LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                      License info: 48-357D-7BC4-C6                      |
LOAD:0000000000000000 ; |                              Virginia Tech                              |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : F0143F12FA7B12B15A3703D23C80AB2660155F031C0CB4D9626F517F5547B631
LOAD:0000000000000000 ; Input MD5    : E5403C24493D64198E7C8CF659A54D54
LOAD:0000000000000000 ; Input CRC32  : 63F0D341
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/true
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'true.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000 ; Source File : 'version.c'
LOAD:0000000000000000 ; Source File : 'closeout.c'
LOAD:0000000000000000 ; Source File : 'exitfail.c'
LOAD:0000000000000000 ; Source File : 'progname.c'
LOAD:0000000000000000 ; Source File : 'quotearg.c'
LOAD:0000000000000000 ; Source File : 'version-etc.c'
LOAD:0000000000000000 ; Source File : 'version-etc-fsf.c'
LOAD:0000000000000000 ; Source File : 'xmalloc.c'
LOAD:0000000000000000 ; Source File : 'xalloc-die.c'
LOAD:0000000000000000 ; Source File : 'mbrtowc.c'
LOAD:0000000000000000 ; Source File : 'close-stream.c'
LOAD:0000000000000000 ; Source File : 'hard-locale.c'
LOAD:0000000000000000 ; Source File : 'localcharset.c'
LOAD:0000000000000000 ; Source File : 'fclose.c'
LOAD:0000000000000000 ; Source File : 'fflush.c'
LOAD:0000000000000000 ; Source File : 'fseeko.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure code
LOAD:0000000000000000 ; Segment permissions: Read/Execute
LOAD:0000000000000000 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000002F0↓o
LOAD:0000000000000000                                         ; LOAD:0000000000000308↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset start         ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 201B8h               ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 9                    ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 25h                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 24h                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 1F8h                 ; Size in file image
LOAD:0000000000000068                 dq 1F8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 238h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 238h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 5                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 5B68h                ; Size in file image
LOAD:00000000000000D8                 dq 5B68h                ; Size in memory image
LOAD:00000000000000E0                 dq 200000h              ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 6                    ; Flags
LOAD:00000000000000F0                 dq 5C30h                ; File offset
LOAD:00000000000000F8                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000100 qword_100       dq 205C30h              ; DATA XREF: .data:slotvec0↓o
LOAD:0000000000000100                                         ; Physical address
LOAD:0000000000000108                 dq 450h                 ; Size in file image
LOAD:0000000000000110                 dq 5E8h                 ; Size in memory image
LOAD:0000000000000118                 dq 200000h              ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000124                 dd 6                    ; Flags
LOAD:0000000000000128                 dq 5C98h                ; File offset
LOAD:0000000000000130                 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000000138                 dq 205C98h              ; Physical address
LOAD:0000000000000140                 dq 1F0h                 ; Size in file image
LOAD:0000000000000148                 dq 1F0h                 ; Size in memory image
LOAD:0000000000000150                 dq 8                    ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 4                    ; Type: NOTE
LOAD:000000000000015C                 dd 4                    ; Flags
LOAD:0000000000000160                 dq 254h                 ; File offset
LOAD:0000000000000168                 dq offset dword_254     ; Virtual address
LOAD:0000000000000170                 dq 254h                 ; Physical address
LOAD:0000000000000178                 dq 44h                  ; Size in file image
LOAD:0000000000000180                 dq 44h                  ; Size in memory image
LOAD:0000000000000188                 dq 4                    ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000194                 dd 4                    ; Flags
LOAD:0000000000000198                 dq 4EB0h                ; File offset
LOAD:00000000000001A0                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000000001A8                 dq 4EB0h                ; Physical address
LOAD:00000000000001B0                 dq 23Ch                 ; Size in file image
LOAD:00000000000001B8                 dq 23Ch                 ; Size in memory image
LOAD:00000000000001C0                 dq 4                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000001CC                 dd 6                    ; Flags
LOAD:00000000000001D0                 dq 0                    ; File offset
LOAD:00000000000001D8                 dq 0                    ; Virtual address
LOAD:00000000000001E0                 dq 0                    ; Physical address
LOAD:00000000000001E8                 dq 0                    ; Size in file image
LOAD:00000000000001F0                 dq 0                    ; Size in memory image
LOAD:00000000000001F8                 dq 10h                  ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 6474E552h            ; Type: RO-AFTER
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 5C30h                ; File offset
LOAD:0000000000000210                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000218                 dq 205C30h              ; Physical address
LOAD:0000000000000220                 dq 3D0h                 ; Size in file image
LOAD:0000000000000228                 dq 3D0h                 ; Size in memory image
LOAD:0000000000000230                 dq 1                    ; Alignment
LOAD:0000000000000238 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000238                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000254 ; ELF Note Entry
LOAD:0000000000000254 dword_254       dd 4                    ; DATA XREF: LOAD:0000000000000168↑o
LOAD:0000000000000254                                         ; Name Size
LOAD:0000000000000258                 dd 10h                  ; Desc Size
LOAD:000000000000025C                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000260 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000264                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:0000000000000274 ; ELF Note Entry
LOAD:0000000000000274                 dd 4                    ; Name Size
LOAD:0000000000000278                 dd 14h                  ; Desc Size
LOAD:000000000000027C                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000280 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000284                 db 5Fh, 0BCh, 67h, 92h, 0B2h, 0F9h, 5Fh, 6Bh, 0DDh, 62h ; Desc
LOAD:0000000000000284                 db 0B9h, 99h, 0BDh, 61h, 67h, 7Fh, 0BCh, 82h, 21h, 99h
LOAD:0000000000000298 ; ELF GNU Hash Table
LOAD:0000000000000298 elf_gnu_hash_nbuckets dd 3
LOAD:000000000000029C elf_gnu_hash_symbias dd 2Dh
LOAD:00000000000002A0 elf_gnu_hash_bitmask_nwords dd 1
LOAD:00000000000002A4 elf_gnu_hash_shift dd 6
LOAD:00000000000002A8 elf_gnu_hash_indexes dq 1218012000404904h
LOAD:00000000000002B0 elf_gnu_hash_bucket dd 2Dh, 2Eh, 0
LOAD:00000000000002BC elf_gnu_hash_chain dd 1C8C1D29h, 9E7650BCh, 9789A096h, 72632CCEh, 0F54162E4h
LOAD:00000000000002BC                 dd 1C8BF239h, 0
LOAD:00000000000002D8 ; ELF Symbol Table
LOAD:00000000000002D8                 Elf64_Sym <0>
LOAD:00000000000002F0                 Elf64_Sym <offset aFree - offset byte_7A0, 12h, 0, 0, offset dword_0, \ ; "free"
LOAD:00000000000002F0                            0>
LOAD:0000000000000308                 Elf64_Sym <offset aAbort - offset byte_7A0, 12h, 0, 0, offset dword_0,\ ; "abort"
LOAD:0000000000000308                            0>
LOAD:0000000000000320                 Elf64_Sym <offset aErrnoLocation - offset byte_7A0, 12h, 0, 0, \ ; "__errno_location"
LOAD:0000000000000320                            offset dword_0, 0>
LOAD:0000000000000338                 Elf64_Sym <offset aStrncmp - offset byte_7A0, 12h, 0, 0, \ ; "strncmp"
LOAD:0000000000000338                            offset dword_0, 0>
LOAD:0000000000000350                 Elf64_Sym <offset aItmDeregistert - offset byte_7A0, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:0000000000000350                            offset dword_0, 0>
LOAD:0000000000000368                 Elf64_Sym <offset aExit - offset byte_7A0, 12h, 0, 0, offset dword_0, \ ; "_exit"
LOAD:0000000000000368                            0>
LOAD:0000000000000380                 Elf64_Sym <offset aFpending - offset byte_7A0, 12h, 0, 0, \ ; "__fpending"
LOAD:0000000000000380                            offset dword_0, 0>
LOAD:0000000000000398                 Elf64_Sym <offset aBindtextdomain+4 - offset byte_7A0, 12h, 0, 0, \ ; "textdomain"
LOAD:0000000000000398                            offset dword_0, 0>
LOAD:00000000000003B0                 Elf64_Sym <offset aFclose - offset byte_7A0, 12h, 0, 0, \ ; "fclose"
LOAD:00000000000003B0                            offset dword_0, 0>
LOAD:00000000000003C8                 Elf64_Sym <offset aBindtextdomain - offset byte_7A0, 12h, 0, 0, \ ; "bindtextdomain"
LOAD:00000000000003C8                            offset dword_0, 0>
LOAD:00000000000003E0                 Elf64_Sym <offset aDcgettext - offset byte_7A0, 12h, 0, 0, \ ; "dcgettext"
LOAD:00000000000003E0                            offset dword_0, 0>
LOAD:00000000000003F8                 Elf64_Sym <offset aCtypeGetMbCurM - offset byte_7A0, 12h, 0, 0, \ ; "__ctype_get_mb_cur_max"
LOAD:00000000000003F8                            offset dword_0, 0>
LOAD:0000000000000410                 Elf64_Sym <offset aStrlen - offset byte_7A0, 12h, 0, 0, \ ; "strlen"
LOAD:0000000000000410                            offset dword_0, 0>
LOAD:0000000000000428                 Elf64_Sym <offset aStackChkFail - offset byte_7A0, 12h, 0, 0, \ ; "__stack_chk_fail"
LOAD:0000000000000428                            offset dword_0, 0>
LOAD:0000000000000440                 Elf64_Sym <offset aMbrtowc - offset byte_7A0, 12h, 0, 0, \ ; "mbrtowc"
LOAD:0000000000000440                            offset dword_0, 0>
LOAD:0000000000000458                 Elf64_Sym <offset aStrrchr - offset byte_7A0, 12h, 0, 0, \ ; "strrchr"
LOAD:0000000000000458                            offset dword_0, 0>
LOAD:0000000000000470                 Elf64_Sym <offset aLseek - offset byte_7A0, 12h, 0, 0, offset dword_0,\ ; "lseek"
LOAD:0000000000000470                            0>
LOAD:0000000000000488                 Elf64_Sym <offset aMemset - offset byte_7A0, 12h, 0, 0, \ ; "memset"
LOAD:0000000000000488                            offset dword_0, 0>
LOAD:00000000000004A0                 Elf64_Sym <offset aLibcStartMain - offset byte_7A0, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:00000000000004A0                            offset dword_0, 0>
LOAD:00000000000004B8                 Elf64_Sym <offset aMemcmp - offset byte_7A0, 12h, 0, 0, \ ; "memcmp"
LOAD:00000000000004B8                            offset dword_0, 0>
LOAD:00000000000004D0                 Elf64_Sym <offset aFputsUnlocked - offset byte_7A0, 12h, 0, 0, \ ; "fputs_unlocked"
LOAD:00000000000004D0                            offset dword_0, 0>
LOAD:00000000000004E8                 Elf64_Sym <offset aCalloc - offset byte_7A0, 12h, 0, 0, \ ; "calloc"
LOAD:00000000000004E8                            offset dword_0, 0>
LOAD:0000000000000500                 Elf64_Sym <offset aStrcmp - offset byte_7A0, 12h, 0, 0, \ ; "strcmp"
LOAD:0000000000000500                            offset dword_0, 0>
LOAD:0000000000000518                 Elf64_Sym <offset aGmonStart - offset byte_7A0, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:0000000000000518                            offset dword_0, 0>
LOAD:0000000000000530                 Elf64_Sym <offset aMemcpy - offset byte_7A0, 12h, 0, 0, \ ; "memcpy"
LOAD:0000000000000530                            offset dword_0, 0>
LOAD:0000000000000548                 Elf64_Sym <offset aFileno - offset byte_7A0, 12h, 0, 0, \ ; "fileno"
LOAD:0000000000000548                            offset dword_0, 0>
LOAD:0000000000000560                 Elf64_Sym <offset aMalloc - offset byte_7A0, 12h, 0, 0, \ ; "malloc"
LOAD:0000000000000560                            offset dword_0, 0>
LOAD:0000000000000578                 Elf64_Sym <offset aFflush - offset byte_7A0, 12h, 0, 0, \ ; "fflush"
LOAD:0000000000000578                            offset dword_0, 0>
LOAD:0000000000000590                 Elf64_Sym <offset aNlLanginfo - offset byte_7A0, 12h, 0, 0, \ ; "nl_langinfo"
LOAD:0000000000000590                            offset dword_0, 0>
LOAD:00000000000005A8                 Elf64_Sym <offset aFreading - offset byte_7A0, 12h, 0, 0, \ ; "__freading"
LOAD:00000000000005A8                            offset dword_0, 0>
LOAD:00000000000005C0                 Elf64_Sym <offset aRealloc - offset byte_7A0, 12h, 0, 0, \ ; "realloc"
LOAD:00000000000005C0                            offset dword_0, 0>
LOAD:00000000000005D8                 Elf64_Sym <offset aSetlocale - offset byte_7A0, 12h, 0, 0, \ ; "setlocale"
LOAD:00000000000005D8                            offset dword_0, 0>
LOAD:00000000000005F0                 Elf64_Sym <offset aPrintfChk - offset byte_7A0, 12h, 0, 0, \ ; "__printf_chk"
LOAD:00000000000005F0                            offset dword_0, 0>
LOAD:0000000000000608                 Elf64_Sym <offset aError - offset byte_7A0, 12h, 0, 0, offset dword_0,\ ; "error"
LOAD:0000000000000608                            0>
LOAD:0000000000000620                 Elf64_Sym <offset aFseeko - offset byte_7A0, 12h, 0, 0, \ ; "fseeko"
LOAD:0000000000000620                            offset dword_0, 0>
LOAD:0000000000000638                 Elf64_Sym <offset aCxaAtexit - offset byte_7A0, 12h, 0, 0, \ ; "__cxa_atexit"
LOAD:0000000000000638                            offset dword_0, 0>
LOAD:0000000000000650                 Elf64_Sym <offset aExit+1 - offset byte_7A0, 12h, 0, 0, \ ; "exit"
LOAD:0000000000000650                            offset dword_0, 0>
LOAD:0000000000000668                 Elf64_Sym <offset aFwrite - offset byte_7A0, 12h, 0, 0, \ ; "fwrite"
LOAD:0000000000000668                            offset dword_0, 0>
LOAD:0000000000000680                 Elf64_Sym <offset aFprintfChk - offset byte_7A0, 12h, 0, 0, \ ; "__fprintf_chk"
LOAD:0000000000000680                            offset dword_0, 0>
LOAD:0000000000000698                 Elf64_Sym <offset aItmRegistertmc - offset byte_7A0, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:0000000000000698                            offset dword_0, 0>
LOAD:00000000000006B0                 Elf64_Sym <offset aMbsinit - offset byte_7A0, 12h, 0, 0, \ ; "mbsinit"
LOAD:00000000000006B0                            offset dword_0, 0>
LOAD:00000000000006C8                 Elf64_Sym <offset aIswprint - offset byte_7A0, 12h, 0, 0, \ ; "iswprint"
LOAD:00000000000006C8                            offset dword_0, 0>
LOAD:00000000000006E0                 Elf64_Sym <offset aCxaFinalize - offset byte_7A0, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:00000000000006E0                            offset dword_0, 0>
LOAD:00000000000006F8                 Elf64_Sym <offset aCtypeBLoc - offset byte_7A0, 12h, 0, 0, \ ; "__ctype_b_loc"
LOAD:00000000000006F8                            offset dword_0, 0>
LOAD:0000000000000710                 Elf64_Sym <offset aStdout - offset byte_7A0, 11h, 0, 19h, \ ; "stdout"
LOAD:0000000000000710                            offset stdout@@GLIBC_2_2_5, 8>
LOAD:0000000000000728                 Elf64_Sym <offset aProgname - offset byte_7A0, 11h, 0, 19h, \ ; "__progname"
LOAD:0000000000000728                            offset __bss_start, 8>
LOAD:0000000000000740                 Elf64_Sym <offset aProgramInvocat - offset byte_7A0, 21h, 0, 19h, \ ; "program_invocation_name"
LOAD:0000000000000740                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000758                 Elf64_Sym <offset aPrognameFull - offset byte_7A0, 11h, 0, 19h, \ ; "__progname_full"
LOAD:0000000000000758                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000770                 Elf64_Sym <offset aProgramInvocat_0 - offset byte_7A0, 21h, 0, 19h, \ ; "program_invocation_short_name"
LOAD:0000000000000770                            offset __bss_start, 8>
LOAD:0000000000000788                 Elf64_Sym <offset aStderr - offset byte_7A0, 11h, 0, 19h, \ ; "stderr"
LOAD:0000000000000788                            offset stderr@@GLIBC_2_2_5, 8>
LOAD:00000000000007A0 ; ELF String Table
LOAD:00000000000007A0 byte_7A0        db 0                    ; DATA XREF: LOAD:00000000000002F0↑o
LOAD:00000000000007A0                                         ; LOAD:0000000000000308↑o ...
LOAD:00000000000007A1 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000000A78↓o
LOAD:00000000000007AB aFflush         db 'fflush',0           ; DATA XREF: LOAD:0000000000000578↑o
LOAD:00000000000007B2 aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:00000000000005F0↑o
LOAD:00000000000007BF aSetlocale      db 'setlocale',0        ; DATA XREF: LOAD:00000000000005D8↑o
LOAD:00000000000007C9 aMbrtowc        db 'mbrtowc',0          ; DATA XREF: LOAD:0000000000000440↑o
LOAD:00000000000007D1 aStrncmp        db 'strncmp',0          ; DATA XREF: LOAD:0000000000000338↑o
LOAD:00000000000007D9 aStrrchr        db 'strrchr',0          ; DATA XREF: LOAD:0000000000000458↑o
LOAD:00000000000007E1 aDcgettext      db 'dcgettext',0        ; DATA XREF: LOAD:00000000000003E0↑o
LOAD:00000000000007EB aError          db 'error',0            ; DATA XREF: LOAD:0000000000000608↑o
LOAD:00000000000007F1 aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:0000000000000428↑o
LOAD:0000000000000802 aIswprint       db 'iswprint',0         ; DATA XREF: LOAD:00000000000006C8↑o
LOAD:000000000000080B aRealloc        db 'realloc',0          ; DATA XREF: LOAD:00000000000005C0↑o
LOAD:0000000000000813 aAbort          db 'abort',0            ; DATA XREF: LOAD:0000000000000308↑o
LOAD:0000000000000819 aExit           db '_exit',0            ; DATA XREF: LOAD:0000000000000368↑o
LOAD:0000000000000819                                         ; LOAD:0000000000000650↑o
LOAD:000000000000081F aProgramInvocat db 'program_invocation_name',0
LOAD:000000000000081F                                         ; DATA XREF: LOAD:0000000000000740↑o
LOAD:0000000000000837 aCtypeGetMbCurM db '__ctype_get_mb_cur_max',0
LOAD:0000000000000837                                         ; DATA XREF: LOAD:00000000000003F8↑o
LOAD:000000000000084E aCalloc         db 'calloc',0           ; DATA XREF: LOAD:00000000000004E8↑o
LOAD:0000000000000855 aStrlen         db 'strlen',0           ; DATA XREF: LOAD:0000000000000410↑o
LOAD:000000000000085C aMemset         db 'memset',0           ; DATA XREF: LOAD:0000000000000488↑o
LOAD:0000000000000863 aErrnoLocation  db '__errno_location',0 ; DATA XREF: LOAD:0000000000000320↑o
LOAD:0000000000000874 aMemcmp         db 'memcmp',0           ; DATA XREF: LOAD:00000000000004B8↑o
LOAD:000000000000087B aFprintfChk     db '__fprintf_chk',0    ; DATA XREF: LOAD:0000000000000680↑o
LOAD:0000000000000889 aStdout         db 'stdout',0           ; DATA XREF: LOAD:0000000000000710↑o
LOAD:0000000000000890 aLseek          db 'lseek',0            ; DATA XREF: LOAD:0000000000000470↑o
LOAD:0000000000000896 aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:0000000000000530↑o
LOAD:000000000000089D aFclose         db 'fclose',0           ; DATA XREF: LOAD:00000000000003B0↑o
LOAD:00000000000008A4 aMalloc         db 'malloc',0           ; DATA XREF: LOAD:0000000000000560↑o
LOAD:00000000000008AB aMbsinit        db 'mbsinit',0          ; DATA XREF: LOAD:00000000000006B0↑o
LOAD:00000000000008B3 aNlLanginfo     db 'nl_langinfo',0      ; DATA XREF: LOAD:0000000000000590↑o
LOAD:00000000000008BF aCtypeBLoc      db '__ctype_b_loc',0    ; DATA XREF: LOAD:00000000000006F8↑o
LOAD:00000000000008CD aFreading       db '__freading',0       ; DATA XREF: LOAD:00000000000005A8↑o
LOAD:00000000000008D8 aStderr         db 'stderr',0           ; DATA XREF: LOAD:0000000000000788↑o
LOAD:00000000000008DF aFileno         db 'fileno',0           ; DATA XREF: LOAD:0000000000000548↑o
LOAD:00000000000008E6 aFwrite         db 'fwrite',0           ; DATA XREF: LOAD:0000000000000668↑o
LOAD:00000000000008ED aFpending       db '__fpending',0       ; DATA XREF: LOAD:0000000000000380↑o
LOAD:00000000000008F8 aProgramInvocat_0 db 'program_invocation_short_name',0
LOAD:00000000000008F8                                         ; DATA XREF: LOAD:0000000000000770↑o
LOAD:0000000000000916 aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:00000000000006E0↑o
LOAD:0000000000000925 aBindtextdomain db 'bindtextdomain',0   ; DATA XREF: LOAD:00000000000003C8↑o
LOAD:0000000000000925                                         ; LOAD:0000000000000398↑o
LOAD:0000000000000934 aStrcmp         db 'strcmp',0           ; DATA XREF: LOAD:0000000000000500↑o
LOAD:000000000000093B aLibcStartMain  db '__libc_start_main',0
LOAD:000000000000093B                                         ; DATA XREF: LOAD:00000000000004A0↑o
LOAD:000000000000094D aFseeko         db 'fseeko',0           ; DATA XREF: LOAD:0000000000000620↑o
LOAD:0000000000000954 aFputsUnlocked  db 'fputs_unlocked',0   ; DATA XREF: LOAD:00000000000004D0↑o
LOAD:0000000000000963 aFree           db 'free',0             ; DATA XREF: LOAD:00000000000002F0↑o
LOAD:0000000000000968 aProgname       db '__progname',0       ; DATA XREF: LOAD:0000000000000728↑o
LOAD:0000000000000973 aPrognameFull   db '__progname_full',0  ; DATA XREF: LOAD:0000000000000758↑o
LOAD:0000000000000983 aCxaAtexit      db '__cxa_atexit',0     ; DATA XREF: LOAD:0000000000000638↑o
LOAD:0000000000000990 aGlibc23        db 'GLIBC_2.3',0        ; DATA XREF: LOAD:0000000000000A88↓o
LOAD:000000000000099A aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000000A98↓o
LOAD:00000000000009A6 aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:0000000000000AA8↓o
LOAD:00000000000009B1 aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000000AB8↓o
LOAD:00000000000009BB aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000000AC8↓o
LOAD:00000000000009C7 aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:00000000000009C7                                         ; DATA XREF: LOAD:0000000000000350↑o
LOAD:00000000000009E3 aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:0000000000000518↑o
LOAD:00000000000009F2 aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:00000000000009F2                                         ; DATA XREF: LOAD:0000000000000698↑o
LOAD:0000000000000A0C ; ELF GNU Symbol Version Table
LOAD:0000000000000A0C                 dw 0
LOAD:0000000000000A0E                 dw 2                    ; free@@GLIBC_2.2.5
LOAD:0000000000000A10                 dw 2                    ; abort@@GLIBC_2.2.5
LOAD:0000000000000A12                 dw 2                    ; __errno_location@@GLIBC_2.2.5
LOAD:0000000000000A14                 dw 2                    ; strncmp@@GLIBC_2.2.5
LOAD:0000000000000A16                 dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
LOAD:0000000000000A18                 dw 2                    ; _exit@@GLIBC_2.2.5
LOAD:0000000000000A1A                 dw 2                    ; __fpending@@GLIBC_2.2.5
LOAD:0000000000000A1C                 dw 2                    ; textdomain@@GLIBC_2.2.5
LOAD:0000000000000A1E                 dw 2                    ; fclose@@GLIBC_2.2.5
LOAD:0000000000000A20                 dw 2                    ; bindtextdomain@@GLIBC_2.2.5
LOAD:0000000000000A22                 dw 2                    ; dcgettext@@GLIBC_2.2.5
LOAD:0000000000000A24                 dw 2                    ; __ctype_get_mb_cur_max@@GLIBC_2.2.5
LOAD:0000000000000A26                 dw 2                    ; strlen@@GLIBC_2.2.5
LOAD:0000000000000A28                 dw 3                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:0000000000000A2A                 dw 2                    ; mbrtowc@@GLIBC_2.2.5
LOAD:0000000000000A2C                 dw 2                    ; strrchr@@GLIBC_2.2.5
LOAD:0000000000000A2E                 dw 2                    ; lseek@@GLIBC_2.2.5
LOAD:0000000000000A30                 dw 2                    ; memset@@GLIBC_2.2.5
LOAD:0000000000000A32                 dw 2                    ; __libc_start_main@@GLIBC_2.2.5
LOAD:0000000000000A34                 dw 2                    ; memcmp@@GLIBC_2.2.5
LOAD:0000000000000A36                 dw 2                    ; fputs_unlocked@@GLIBC_2.2.5
LOAD:0000000000000A38                 dw 2                    ; calloc@@GLIBC_2.2.5
LOAD:0000000000000A3A                 dw 2                    ; strcmp@@GLIBC_2.2.5
LOAD:0000000000000A3C                 dw 0                    ; local  symbol: __gmon_start__
LOAD:0000000000000A3E                 dw 4                    ; memcpy@@GLIBC_2.14
LOAD:0000000000000A40                 dw 2                    ; fileno@@GLIBC_2.2.5
LOAD:0000000000000A42                 dw 2                    ; malloc@@GLIBC_2.2.5
LOAD:0000000000000A44                 dw 2                    ; fflush@@GLIBC_2.2.5
LOAD:0000000000000A46                 dw 2                    ; nl_langinfo@@GLIBC_2.2.5
LOAD:0000000000000A48                 dw 2                    ; __freading@@GLIBC_2.2.5
LOAD:0000000000000A4A                 dw 2                    ; realloc@@GLIBC_2.2.5
LOAD:0000000000000A4C                 dw 2                    ; setlocale@@GLIBC_2.2.5
LOAD:0000000000000A4E                 dw 5                    ; __printf_chk@@GLIBC_2.3.4
LOAD:0000000000000A50                 dw 2                    ; error@@GLIBC_2.2.5
LOAD:0000000000000A52                 dw 2                    ; fseeko@@GLIBC_2.2.5
LOAD:0000000000000A54                 dw 2                    ; __cxa_atexit@@GLIBC_2.2.5
LOAD:0000000000000A56                 dw 2                    ; exit@@GLIBC_2.2.5
LOAD:0000000000000A58                 dw 2                    ; fwrite@@GLIBC_2.2.5
LOAD:0000000000000A5A                 dw 5                    ; __fprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000A5C                 dw 0                    ; local  symbol: _ITM_registerTMCloneTable
LOAD:0000000000000A5E                 dw 2                    ; mbsinit@@GLIBC_2.2.5
LOAD:0000000000000A60                 dw 2                    ; iswprint@@GLIBC_2.2.5
LOAD:0000000000000A62                 dw 2                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:0000000000000A64                 dw 6                    ; __ctype_b_loc@@GLIBC_2.3
LOAD:0000000000000A66                 dw 2                    ; stdout@@GLIBC_2.2.5
LOAD:0000000000000A68                 dw 2                    ; __progname@@GLIBC_2.2.5
LOAD:0000000000000A6A                 dw 2                    ; program_invocation_name@@GLIBC_2.2.5
LOAD:0000000000000A6C                 dw 2                    ; __progname_full@@GLIBC_2.2.5
LOAD:0000000000000A6E                 dw 2                    ; program_invocation_short_name@@GLIBC_2.2.5
LOAD:0000000000000A70                 dw 2                    ; stderr@@GLIBC_2.2.5
LOAD:0000000000000A72                 dw 0
LOAD:0000000000000A74                 dw 0
LOAD:0000000000000A76                 dw 0
LOAD:0000000000000A78 ; ELF GNU Symbol Version Requirements
LOAD:0000000000000A78                 Elf64_Verneed <1, 5, offset aLibcSo6 - offset byte_7A0, 10h, 0> ; "libc.so.6"
LOAD:0000000000000A88                 Elf64_Vernaux <0D696913h, 0, 6, offset aGlibc23 - offset byte_7A0, \ ; "GLIBC_2.3"
LOAD:0000000000000A88                                10h>
LOAD:0000000000000A98                 Elf64_Vernaux <9691974h, 0, 5, offset aGlibc234 - offset byte_7A0, \ ; "GLIBC_2.3.4"
LOAD:0000000000000A98                                10h>
LOAD:0000000000000AA8                 Elf64_Vernaux <6969194h, 0, 4, offset aGlibc214 - offset byte_7A0, \ ; "GLIBC_2.14"
LOAD:0000000000000AA8                                10h>
LOAD:0000000000000AB8                 Elf64_Vernaux <0D696914h, 0, 3, offset aGlibc24 - offset byte_7A0, \ ; "GLIBC_2.4"
LOAD:0000000000000AB8                                10h>
LOAD:0000000000000AC8                 Elf64_Vernaux <9691A75h, 0, 2, offset aGlibc225 - offset byte_7A0, 0> ; "GLIBC_2.2.5"
LOAD:0000000000000AD8 ; ELF RELA Relocation Table
LOAD:0000000000000AD8                 Elf64_Rela <205C30h, 8, 1540h> ; R_X86_64_RELATIVE +1540h
LOAD:0000000000000AF0                 Elf64_Rela <205C38h, 8, 1500h> ; R_X86_64_RELATIVE +1500h
LOAD:0000000000000B08                 Elf64_Rela <205C40h, 8, 4659h> ; R_X86_64_RELATIVE +4659h
LOAD:0000000000000B20                 Elf64_Rela <205C48h, 8, 4661h> ; R_X86_64_RELATIVE +4661h
LOAD:0000000000000B38                 Elf64_Rela <205C50h, 8, 4667h> ; R_X86_64_RELATIVE +4667h
LOAD:0000000000000B50                 Elf64_Rela <205C58h, 8, 4674h> ; R_X86_64_RELATIVE +4674h
LOAD:0000000000000B68                 Elf64_Rela <205C60h, 8, 4681h> ; R_X86_64_RELATIVE +4681h
LOAD:0000000000000B80                 Elf64_Rela <205C68h, 8, 4695h> ; R_X86_64_RELATIVE +4695h
LOAD:0000000000000B98                 Elf64_Rela <205C70h, 8, 4697h> ; R_X86_64_RELATIVE +4697h
LOAD:0000000000000BB0                 Elf64_Rela <205C78h, 8, 467Ah> ; R_X86_64_RELATIVE +467Ah
LOAD:0000000000000BC8                 Elf64_Rela <205C80h, 8, 4382h> ; R_X86_64_RELATIVE +4382h
LOAD:0000000000000BE0                 Elf64_Rela <205C88h, 8, 469Fh> ; R_X86_64_RELATIVE +469Fh
LOAD:0000000000000BF8                 Elf64_Rela <206008h, 8, 206008h> ; R_X86_64_RELATIVE +206008h
LOAD:0000000000000C10                 Elf64_Rela <206010h, 8, 45E3h> ; R_X86_64_RELATIVE +45E3h
LOAD:0000000000000C28                 Elf64_Rela <206060h, 8, 206070h> ; R_X86_64_RELATIVE +206070h
LOAD:0000000000000C40                 Elf64_Rela <206078h, 8, 2060E0h> ; R_X86_64_RELATIVE +2060E0h
LOAD:0000000000000C58                 Elf64_Rela <205FD8h, 500000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:0000000000000C70                 Elf64_Rela <205FE0h, 1300000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:0000000000000C88                 Elf64_Rela <205FE8h, 1800000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:0000000000000CA0                 Elf64_Rela <205FF0h, 2800000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:0000000000000CB8                 Elf64_Rela <205FF8h, 2B00000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:0000000000000CD0                 Elf64_Rela <206080h, 2E00000005h, 0> ; R_X86_64_COPY __progname
LOAD:0000000000000CE8                 Elf64_Rela <206088h, 2D00000005h, 0> ; R_X86_64_COPY stdout
LOAD:0000000000000D00                 Elf64_Rela <206090h, 3000000005h, 0> ; R_X86_64_COPY __progname_full
LOAD:0000000000000D18                 Elf64_Rela <2060A0h, 3200000005h, 0> ; R_X86_64_COPY stderr
LOAD:0000000000000D30 ; ELF JMPREL Relocation Table
LOAD:0000000000000D30                 Elf64_Rela <205EA0h, 100000007h, 0> ; R_X86_64_JUMP_SLOT free
LOAD:0000000000000D48                 Elf64_Rela <205EA8h, 200000007h, 0> ; R_X86_64_JUMP_SLOT abort
LOAD:0000000000000D60                 Elf64_Rela <205EB0h, 300000007h, 0> ; R_X86_64_JUMP_SLOT __errno_location
LOAD:0000000000000D78                 Elf64_Rela <205EB8h, 400000007h, 0> ; R_X86_64_JUMP_SLOT strncmp
LOAD:0000000000000D90                 Elf64_Rela <205EC0h, 600000007h, 0> ; R_X86_64_JUMP_SLOT _exit
LOAD:0000000000000DA8                 Elf64_Rela <205EC8h, 700000007h, 0> ; R_X86_64_JUMP_SLOT __fpending
LOAD:0000000000000DC0                 Elf64_Rela <205ED0h, 800000007h, 0> ; R_X86_64_JUMP_SLOT textdomain
LOAD:0000000000000DD8                 Elf64_Rela <205ED8h, 900000007h, 0> ; R_X86_64_JUMP_SLOT fclose
LOAD:0000000000000DF0                 Elf64_Rela <205EE0h, 0A00000007h, 0> ; R_X86_64_JUMP_SLOT bindtextdomain
LOAD:0000000000000E08                 Elf64_Rela <205EE8h, 0B00000007h, 0> ; R_X86_64_JUMP_SLOT dcgettext
LOAD:0000000000000E20                 Elf64_Rela <205EF0h, 0C00000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_get_mb_cur_max
LOAD:0000000000000E38                 Elf64_Rela <205EF8h, 0D00000007h, 0> ; R_X86_64_JUMP_SLOT strlen
LOAD:0000000000000E50                 Elf64_Rela <205F00h, 0E00000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
LOAD:0000000000000E68                 Elf64_Rela <205F08h, 0F00000007h, 0> ; R_X86_64_JUMP_SLOT mbrtowc
LOAD:0000000000000E80                 Elf64_Rela <205F10h, 1000000007h, 0> ; R_X86_64_JUMP_SLOT strrchr
LOAD:0000000000000E98                 Elf64_Rela <205F18h, 1100000007h, 0> ; R_X86_64_JUMP_SLOT lseek
LOAD:0000000000000EB0                 Elf64_Rela <205F20h, 1200000007h, 0> ; R_X86_64_JUMP_SLOT memset
LOAD:0000000000000EC8                 Elf64_Rela <205F28h, 1400000007h, 0> ; R_X86_64_JUMP_SLOT memcmp
LOAD:0000000000000EE0                 Elf64_Rela <205F30h, 1500000007h, 0> ; R_X86_64_JUMP_SLOT fputs_unlocked
LOAD:0000000000000EF8                 Elf64_Rela <205F38h, 1600000007h, 0> ; R_X86_64_JUMP_SLOT calloc
LOAD:0000000000000F10                 Elf64_Rela <205F40h, 1700000007h, 0> ; R_X86_64_JUMP_SLOT strcmp
LOAD:0000000000000F28                 Elf64_Rela <205F48h, 1900000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
LOAD:0000000000000F40                 Elf64_Rela <205F50h, 1A00000007h, 0> ; R_X86_64_JUMP_SLOT fileno
LOAD:0000000000000F58                 Elf64_Rela <205F58h, 1B00000007h, 0> ; R_X86_64_JUMP_SLOT malloc
LOAD:0000000000000F70                 Elf64_Rela <205F60h, 1C00000007h, 0> ; R_X86_64_JUMP_SLOT fflush
LOAD:0000000000000F88                 Elf64_Rela <205F68h, 1D00000007h, 0> ; R_X86_64_JUMP_SLOT nl_langinfo
LOAD:0000000000000FA0                 Elf64_Rela <205F70h, 1E00000007h, 0> ; R_X86_64_JUMP_SLOT __freading
LOAD:0000000000000FB8                 Elf64_Rela <205F78h, 1F00000007h, 0> ; R_X86_64_JUMP_SLOT realloc
LOAD:0000000000000FD0                 Elf64_Rela <205F80h, 2000000007h, 0> ; R_X86_64_JUMP_SLOT setlocale
LOAD:0000000000000FE8                 Elf64_Rela <205F88h, 2100000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
LOAD:0000000000001000                 Elf64_Rela <205F90h, 2200000007h, 0> ; R_X86_64_JUMP_SLOT error
LOAD:0000000000001018                 Elf64_Rela <205F98h, 2300000007h, 0> ; R_X86_64_JUMP_SLOT fseeko
LOAD:0000000000001030                 Elf64_Rela <205FA0h, 2400000007h, 0> ; R_X86_64_JUMP_SLOT __cxa_atexit
LOAD:0000000000001048                 Elf64_Rela <205FA8h, 2500000007h, 0> ; R_X86_64_JUMP_SLOT exit
LOAD:0000000000001060                 Elf64_Rela <205FB0h, 2600000007h, 0> ; R_X86_64_JUMP_SLOT fwrite
LOAD:0000000000001078                 Elf64_Rela <205FB8h, 2700000007h, 0> ; R_X86_64_JUMP_SLOT __fprintf_chk
LOAD:0000000000001090                 Elf64_Rela <205FC0h, 2900000007h, 0> ; R_X86_64_JUMP_SLOT mbsinit
LOAD:00000000000010A8                 Elf64_Rela <205FC8h, 2A00000007h, 0> ; R_X86_64_JUMP_SLOT iswprint
LOAD:00000000000010C0                 Elf64_Rela <205FD0h, 2C00000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_b_loc
LOAD:00000000000010C0 LOAD            ends
LOAD:00000000000010C0
.init:00000000000010D8 ; ===========================================================================
.init:00000000000010D8
.init:00000000000010D8 ; Segment type: Pure code
.init:00000000000010D8 ; Segment permissions: Read/Execute
.init:00000000000010D8 _init           segment dword public 'CODE' use64
.init:00000000000010D8                 assume cs:_init
.init:00000000000010D8                 ;org 10D8h
.init:00000000000010D8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:00000000000010D8
.init:00000000000010D8 ; =============== S U B R O U T I N E =======================================
.init:00000000000010D8
.init:00000000000010D8
.init:00000000000010D8                 public _init_proc
.init:00000000000010D8 _init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
.init:00000000000010D8                 sub     rsp, 8          ; _init
.init:00000000000010DC                 mov     rax, cs:__gmon_start___ptr
.init:00000000000010E3                 test    rax, rax
.init:00000000000010E6                 jz      short loc_10EA
.init:00000000000010E8                 call    rax ; __gmon_start__
.init:00000000000010EA
.init:00000000000010EA loc_10EA:                               ; CODE XREF: _init_proc+E↑j
.init:00000000000010EA                 add     rsp, 8
.init:00000000000010EE                 retn
.init:00000000000010EE _init_proc      endp
.init:00000000000010EE
.init:00000000000010EE _init           ends
.init:00000000000010EE
LOAD:00000000000010EF ; ===========================================================================
LOAD:00000000000010EF
LOAD:00000000000010EF ; Segment type: Pure code
LOAD:00000000000010EF ; Segment permissions: Read/Execute
LOAD:00000000000010EF LOAD            segment byte public 'CODE' use64
LOAD:00000000000010EF                 assume cs:LOAD
LOAD:00000000000010EF                 ;org 10EFh
LOAD:00000000000010EF                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000010EF                 align 10h
LOAD:00000000000010EF LOAD            ends
LOAD:00000000000010EF
.plt:00000000000010F0 ; ===========================================================================
.plt:00000000000010F0
.plt:00000000000010F0 ; Segment type: Pure code
.plt:00000000000010F0 ; Segment permissions: Read/Execute
.plt:00000000000010F0 _plt            segment para public 'CODE' use64
.plt:00000000000010F0                 assume cs:_plt
.plt:00000000000010F0                 ;org 10F0h
.plt:00000000000010F0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:00000000000010F0
.plt:00000000000010F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000010F0
.plt:00000000000010F0
.plt:00000000000010F0 sub_10F0        proc near               ; CODE XREF: .plt:000000000000110B↓j
.plt:00000000000010F0                                         ; .plt:000000000000111B↓j ...
.plt:00000000000010F0 ; __unwind {
.plt:00000000000010F0                 push    cs:qword_205E90
.plt:00000000000010F6                 jmp     cs:qword_205E98
.plt:00000000000010F6 sub_10F0        endp
.plt:00000000000010F6
.plt:00000000000010F6 ; ---------------------------------------------------------------------------
.plt:00000000000010FC                 align 20h
.plt:0000000000001100
.plt:0000000000001100 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001100
.plt:0000000000001100 ; Attributes: thunk
.plt:0000000000001100
.plt:0000000000001100 ; void free(void *ptr)
.plt:0000000000001100 _free           proc near               ; CODE XREF: quotearg_n_options+115↓p
.plt:0000000000001100                                         ; quotearg_free+37↓p ...
.plt:0000000000001100                 jmp     cs:free_ptr
.plt:0000000000001100 _free           endp
.plt:0000000000001100
.plt:0000000000001106 ; ---------------------------------------------------------------------------
.plt:0000000000001106                 push    0
.plt:000000000000110B                 jmp     sub_10F0
.plt:0000000000001110
.plt:0000000000001110 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001110
.plt:0000000000001110 ; Attributes: noreturn thunk
.plt:0000000000001110
.plt:0000000000001110 ; void __noreturn abort(void)
.plt:0000000000001110 _abort          proc near               ; CODE XREF: set_program_name+9A↓p
.plt:0000000000001110                                         ; quotearg_buffer_restyled:def_1B91↓p ...
.plt:0000000000001110                 jmp     cs:abort_ptr
.plt:0000000000001110 _abort          endp
.plt:0000000000001110
.plt:0000000000001116 ; ---------------------------------------------------------------------------
.plt:0000000000001116                 push    1
.plt:000000000000111B                 jmp     sub_10F0
.plt:0000000000001120
.plt:0000000000001120 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001120
.plt:0000000000001120 ; Attributes: thunk
.plt:0000000000001120
.plt:0000000000001120 ; int *__errno_location(void)
.plt:0000000000001120 ___errno_location proc near             ; CODE XREF: close_stdout+16↓p
.plt:0000000000001120                                         ; quotearg_n_options+1C↓p ...
.plt:0000000000001120                 jmp     cs:__errno_location_ptr
.plt:0000000000001120 ___errno_location endp
.plt:0000000000001120
.plt:0000000000001126 ; ---------------------------------------------------------------------------
.plt:0000000000001126                 push    2
.plt:000000000000112B                 jmp     sub_10F0
.plt:0000000000001130
.plt:0000000000001130 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001130
.plt:0000000000001130 ; Attributes: thunk
.plt:0000000000001130
.plt:0000000000001130 ; int strncmp(const char *s1, const char *s2, size_t n)
.plt:0000000000001130 _strncmp        proc near               ; CODE XREF: usage+205↓p
.plt:0000000000001130                                         ; usage+2C8↓p
.plt:0000000000001130                 jmp     cs:strncmp_ptr
.plt:0000000000001130 _strncmp        endp
.plt:0000000000001130
.plt:0000000000001136 ; ---------------------------------------------------------------------------
.plt:0000000000001136                 push    3
.plt:000000000000113B                 jmp     sub_10F0
.plt:0000000000001140
.plt:0000000000001140 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001140
.plt:0000000000001140 ; Attributes: noreturn thunk
.plt:0000000000001140
.plt:0000000000001140 ; void __noreturn _exit(int status)
.plt:0000000000001140 __exit          proc near               ; CODE XREF: close_stdout+88↓p
.plt:0000000000001140                 jmp     cs:_exit_ptr
.plt:0000000000001140 __exit          endp
.plt:0000000000001140
.plt:0000000000001146 ; ---------------------------------------------------------------------------
.plt:0000000000001146                 push    4
.plt:000000000000114B                 jmp     sub_10F0
.plt:0000000000001150
.plt:0000000000001150 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001150
.plt:0000000000001150 ; Attributes: thunk
.plt:0000000000001150
.plt:0000000000001150 ; size_t __fpending(FILE *fp)
.plt:0000000000001150 ___fpending     proc near               ; CODE XREF: close_stream+7↓p
.plt:0000000000001150                 jmp     cs:__fpending_ptr
.plt:0000000000001150 ___fpending     endp
.plt:0000000000001150
.plt:0000000000001156 ; ---------------------------------------------------------------------------
.plt:0000000000001156                 push    5
.plt:000000000000115B                 jmp     sub_10F0
.plt:0000000000001160
.plt:0000000000001160 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001160
.plt:0000000000001160 ; Attributes: thunk
.plt:0000000000001160
.plt:0000000000001160 ; char *textdomain(const char *domainname)
.plt:0000000000001160 _textdomain     proc near               ; CODE XREF: main+3F↓p
.plt:0000000000001160                 jmp     cs:textdomain_ptr
.plt:0000000000001160 _textdomain     endp
.plt:0000000000001160
.plt:0000000000001166 ; ---------------------------------------------------------------------------
.plt:0000000000001166                 push    6
.plt:000000000000116B                 jmp     sub_10F0
.plt:0000000000001170
.plt:0000000000001170 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001170
.plt:0000000000001170 ; Attributes: thunk
.plt:0000000000001170
.plt:0000000000001170 ; int fclose(FILE *stream)
.plt:0000000000001170 _fclose         proc near               ; CODE XREF: rpl_fclose+36↓p
.plt:0000000000001170                                         ; rpl_fclose+6B↓j
.plt:0000000000001170                 jmp     cs:fclose_ptr
.plt:0000000000001170 _fclose         endp
.plt:0000000000001170
.plt:0000000000001176 ; ---------------------------------------------------------------------------
.plt:0000000000001176                 push    7
.plt:000000000000117B                 jmp     sub_10F0
.plt:0000000000001180
.plt:0000000000001180 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001180
.plt:0000000000001180 ; Attributes: thunk
.plt:0000000000001180
.plt:0000000000001180 ; char *bindtextdomain(const char *domainname, const char *dirname)
.plt:0000000000001180 _bindtextdomain proc near               ; CODE XREF: main+33↓p
.plt:0000000000001180                 jmp     cs:bindtextdomain_ptr
.plt:0000000000001180 _bindtextdomain endp
.plt:0000000000001180
.plt:0000000000001186 ; ---------------------------------------------------------------------------
.plt:0000000000001186                 push    8
.plt:000000000000118B                 jmp     sub_10F0
.plt:0000000000001190
.plt:0000000000001190 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001190
.plt:0000000000001190 ; Attributes: thunk
.plt:0000000000001190
.plt:0000000000001190 ; char *dcgettext(const char *domainname, const char *msgid, int category)
.plt:0000000000001190 _dcgettext      proc near               ; CODE XREF: usage+34↓p
.plt:0000000000001190                                         ; usage+5C↓p ...
.plt:0000000000001190                 jmp     cs:dcgettext_ptr
.plt:0000000000001190 _dcgettext      endp
.plt:0000000000001190
.plt:0000000000001196 ; ---------------------------------------------------------------------------
.plt:0000000000001196                 push    9
.plt:000000000000119B                 jmp     sub_10F0
.plt:00000000000011A0
.plt:00000000000011A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000011A0
.plt:00000000000011A0 ; Attributes: thunk
.plt:00000000000011A0
.plt:00000000000011A0 ; size_t __ctype_get_mb_cur_max(void)
.plt:00000000000011A0 ___ctype_get_mb_cur_max proc near       ; CODE XREF: quotearg_buffer_restyled+6C↓p
.plt:00000000000011A0                 jmp     cs:__ctype_get_mb_cur_max_ptr
.plt:00000000000011A0 ___ctype_get_mb_cur_max endp
.plt:00000000000011A0
.plt:00000000000011A6 ; ---------------------------------------------------------------------------
.plt:00000000000011A6                 push    0Ah
.plt:00000000000011AB                 jmp     sub_10F0
.plt:00000000000011B0
.plt:00000000000011B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000011B0
.plt:00000000000011B0 ; Attributes: thunk
.plt:00000000000011B0
.plt:00000000000011B0 ; size_t strlen(const char *s)
.plt:00000000000011B0 _strlen         proc near               ; CODE XREF: quotearg_buffer_restyled+157↓p
.plt:00000000000011B0                                         ; quotearg_buffer_restyled+8DB↓p ...
.plt:00000000000011B0                 jmp     cs:strlen_ptr
.plt:00000000000011B0 _strlen         endp
.plt:00000000000011B0
.plt:00000000000011B6 ; ---------------------------------------------------------------------------
.plt:00000000000011B6                 push    0Bh
.plt:00000000000011BB                 jmp     sub_10F0
.plt:00000000000011C0
.plt:00000000000011C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000011C0
.plt:00000000000011C0 ; Attributes: noreturn thunk
.plt:00000000000011C0
.plt:00000000000011C0 ___stack_chk_fail proc near             ; CODE XREF: quotearg_buffer_restyled:loc_2CF3↓p
.plt:00000000000011C0                                         ; quotearg_n_style:loc_3319↓p ...
.plt:00000000000011C0                 jmp     cs:__stack_chk_fail_ptr
.plt:00000000000011C0 ___stack_chk_fail endp
.plt:00000000000011C0
.plt:00000000000011C6 ; ---------------------------------------------------------------------------
.plt:00000000000011C6                 push    0Ch
.plt:00000000000011CB                 jmp     sub_10F0
.plt:00000000000011D0
.plt:00000000000011D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000011D0
.plt:00000000000011D0 ; Attributes: thunk
.plt:00000000000011D0
.plt:00000000000011D0 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
.plt:00000000000011D0 _mbrtowc        proc near               ; CODE XREF: rpl_mbrtowc+32↓p
.plt:00000000000011D0                 jmp     cs:mbrtowc_ptr
.plt:00000000000011D0 _mbrtowc        endp
.plt:00000000000011D0
.plt:00000000000011D6 ; ---------------------------------------------------------------------------
.plt:00000000000011D6                 push    0Dh
.plt:00000000000011DB                 jmp     sub_10F0
.plt:00000000000011E0
.plt:00000000000011E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000011E0
.plt:00000000000011E0 ; Attributes: thunk
.plt:00000000000011E0
.plt:00000000000011E0 ; char *strrchr(const char *s, int c)
.plt:00000000000011E0 _strrchr        proc near               ; CODE XREF: set_program_name+E↓p
.plt:00000000000011E0                 jmp     cs:strrchr_ptr
.plt:00000000000011E0 _strrchr        endp
.plt:00000000000011E0
.plt:00000000000011E6 ; ---------------------------------------------------------------------------
.plt:00000000000011E6                 push    0Eh
.plt:00000000000011EB                 jmp     sub_10F0
.plt:00000000000011F0
.plt:00000000000011F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000011F0
.plt:00000000000011F0 ; Attributes: thunk
.plt:00000000000011F0
.plt:00000000000011F0 ; __off_t lseek(int fd, __off_t offset, int whence)
.plt:00000000000011F0 _lseek          proc near               ; CODE XREF: rpl_fclose+59↓p
.plt:00000000000011F0                                         ; rpl_fseeko+3B↓p
.plt:00000000000011F0                 jmp     cs:lseek_ptr
.plt:00000000000011F0 _lseek          endp
.plt:00000000000011F0
.plt:00000000000011F6 ; ---------------------------------------------------------------------------
.plt:00000000000011F6                 push    0Fh
.plt:00000000000011FB                 jmp     sub_10F0
.plt:0000000000001200
.plt:0000000000001200 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001200
.plt:0000000000001200 ; Attributes: thunk
.plt:0000000000001200
.plt:0000000000001200 ; void *memset(void *s, int c, size_t n)
.plt:0000000000001200 _memset         proc near               ; CODE XREF: quotearg_n_options+99↓p
.plt:0000000000001200                                         ; xzalloc+12↓j
.plt:0000000000001200                 jmp     cs:memset_ptr
.plt:0000000000001200 _memset         endp
.plt:0000000000001200
.plt:0000000000001206 ; ---------------------------------------------------------------------------
.plt:0000000000001206                 push    10h
.plt:000000000000120B                 jmp     sub_10F0
.plt:0000000000001210
.plt:0000000000001210 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001210
.plt:0000000000001210 ; Attributes: thunk
.plt:0000000000001210
.plt:0000000000001210 ; int memcmp(const void *s1, const void *s2, size_t n)
.plt:0000000000001210 _memcmp         proc near               ; CODE XREF: quotearg_buffer_restyled+19A↓p
.plt:0000000000001210                 jmp     cs:memcmp_ptr
.plt:0000000000001210 _memcmp         endp
.plt:0000000000001210
.plt:0000000000001216 ; ---------------------------------------------------------------------------
.plt:0000000000001216                 push    11h
.plt:000000000000121B                 jmp     sub_10F0
.plt:0000000000001220
.plt:0000000000001220 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001220
.plt:0000000000001220 ; Attributes: thunk
.plt:0000000000001220
.plt:0000000000001220 ; int fputs_unlocked(const char *s, FILE *stream)
.plt:0000000000001220 _fputs_unlocked proc near               ; CODE XREF: usage+97↓p
.plt:0000000000001220                                         ; usage+C3↓p ...
.plt:0000000000001220                 jmp     cs:fputs_unlocked_ptr
.plt:0000000000001220 _fputs_unlocked endp
.plt:0000000000001220
.plt:0000000000001226 ; ---------------------------------------------------------------------------
.plt:0000000000001226                 push    12h
.plt:000000000000122B                 jmp     sub_10F0
.plt:0000000000001230
.plt:0000000000001230 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001230
.plt:0000000000001230 ; Attributes: thunk
.plt:0000000000001230
.plt:0000000000001230 ; void *calloc(size_t nmemb, size_t size)
.plt:0000000000001230 _calloc         proc near               ; CODE XREF: xcalloc+1A↓p
.plt:0000000000001230                 jmp     cs:calloc_ptr
.plt:0000000000001230 _calloc         endp
.plt:0000000000001230
.plt:0000000000001236 ; ---------------------------------------------------------------------------
.plt:0000000000001236                 push    13h
.plt:000000000000123B                 jmp     sub_10F0
.plt:0000000000001240
.plt:0000000000001240 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001240
.plt:0000000000001240 ; Attributes: thunk
.plt:0000000000001240
.plt:0000000000001240 ; int strcmp(const char *s1, const char *s2)
.plt:0000000000001240 _strcmp         proc near               ; CODE XREF: main+5E↓p
.plt:0000000000001240                                         ; main+71↓p
.plt:0000000000001240                 jmp     cs:strcmp_ptr
.plt:0000000000001240 _strcmp         endp
.plt:0000000000001240
.plt:0000000000001246 ; ---------------------------------------------------------------------------
.plt:0000000000001246                 push    14h
.plt:000000000000124B                 jmp     sub_10F0
.plt:0000000000001250
.plt:0000000000001250 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001250
.plt:0000000000001250 ; Attributes: thunk
.plt:0000000000001250
.plt:0000000000001250 ; void *memcpy(void *dest, const void *src, size_t n)
.plt:0000000000001250 _memcpy         proc near               ; CODE XREF: xmemdup+23↓j
.plt:0000000000001250                 jmp     cs:memcpy_ptr
.plt:0000000000001250 _memcpy         endp
.plt:0000000000001250
.plt:0000000000001256 ; ---------------------------------------------------------------------------
.plt:0000000000001256                 push    15h
.plt:000000000000125B                 jmp     sub_10F0
.plt:0000000000001260
.plt:0000000000001260 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001260
.plt:0000000000001260 ; Attributes: thunk
.plt:0000000000001260
.plt:0000000000001260 ; int fileno(FILE *stream)
.plt:0000000000001260 _fileno         proc near               ; CODE XREF: rpl_fclose+7↓p
.plt:0000000000001260                                         ; rpl_fclose+4B↓p ...
.plt:0000000000001260                 jmp     cs:fileno_ptr
.plt:0000000000001260 _fileno         endp
.plt:0000000000001260
.plt:0000000000001266 ; ---------------------------------------------------------------------------
.plt:0000000000001266                 push    16h
.plt:000000000000126B                 jmp     sub_10F0
.plt:0000000000001270
.plt:0000000000001270 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001270
.plt:0000000000001270 ; Attributes: thunk
.plt:0000000000001270
.plt:0000000000001270 ; void *malloc(size_t size)
.plt:0000000000001270 _malloc         proc near               ; CODE XREF: xmalloc+4↓p
.plt:0000000000001270                 jmp     cs:malloc_ptr
.plt:0000000000001270 _malloc         endp
.plt:0000000000001270
.plt:0000000000001276 ; ---------------------------------------------------------------------------
.plt:0000000000001276                 push    17h
.plt:000000000000127B                 jmp     sub_10F0
.plt:0000000000001280
.plt:0000000000001280 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001280
.plt:0000000000001280 ; Attributes: thunk
.plt:0000000000001280
.plt:0000000000001280 ; int fflush(FILE *stream)
.plt:0000000000001280 _fflush         proc near               ; CODE XREF: rpl_fflush+1E↓j
.plt:0000000000001280                                         ; rpl_fflush+3B↓j
.plt:0000000000001280                 jmp     cs:fflush_ptr
.plt:0000000000001280 _fflush         endp
.plt:0000000000001280
.plt:0000000000001286 ; ---------------------------------------------------------------------------
.plt:0000000000001286                 push    18h
.plt:000000000000128B                 jmp     sub_10F0
.plt:0000000000001290
.plt:0000000000001290 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001290
.plt:0000000000001290 ; Attributes: thunk
.plt:0000000000001290
.plt:0000000000001290 ; char *nl_langinfo(nl_item item)
.plt:0000000000001290 _nl_langinfo    proc near               ; CODE XREF: locale_charset+9↓p
.plt:0000000000001290                 jmp     cs:nl_langinfo_ptr
.plt:0000000000001290 _nl_langinfo    endp
.plt:0000000000001290
.plt:0000000000001296 ; ---------------------------------------------------------------------------
.plt:0000000000001296                 push    19h
.plt:000000000000129B                 jmp     sub_10F0
.plt:00000000000012A0
.plt:00000000000012A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000012A0
.plt:00000000000012A0 ; Attributes: thunk
.plt:00000000000012A0
.plt:00000000000012A0 ; int __freading(FILE *fp)
.plt:00000000000012A0 ___freading     proc near               ; CODE XREF: rpl_fclose+13↓p
.plt:00000000000012A0                                         ; rpl_fflush+9↓p
.plt:00000000000012A0                 jmp     cs:__freading_ptr
.plt:00000000000012A0 ___freading     endp
.plt:00000000000012A0
.plt:00000000000012A6 ; ---------------------------------------------------------------------------
.plt:00000000000012A6                 push    1Ah
.plt:00000000000012AB                 jmp     sub_10F0
.plt:00000000000012B0
.plt:00000000000012B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000012B0
.plt:00000000000012B0 ; Attributes: thunk
.plt:00000000000012B0
.plt:00000000000012B0 ; void *realloc(void *ptr, size_t size)
.plt:00000000000012B0 _realloc        proc near               ; CODE XREF: xrealloc+11↓p
.plt:00000000000012B0                 jmp     cs:realloc_ptr
.plt:00000000000012B0 _realloc        endp
.plt:00000000000012B0
.plt:00000000000012B6 ; ---------------------------------------------------------------------------
.plt:00000000000012B6                 push    1Bh
.plt:00000000000012BB                 jmp     sub_10F0
.plt:00000000000012C0
.plt:00000000000012C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000012C0
.plt:00000000000012C0 ; Attributes: thunk
.plt:00000000000012C0
.plt:00000000000012C0 ; char *setlocale(int category, const char *locale)
.plt:00000000000012C0 _setlocale      proc near               ; CODE XREF: main+20↓p
.plt:00000000000012C0                                         ; usage+1EC↓p ...
.plt:00000000000012C0                 jmp     cs:setlocale_ptr
.plt:00000000000012C0 _setlocale      endp
.plt:00000000000012C0
.plt:00000000000012C6 ; ---------------------------------------------------------------------------
.plt:00000000000012C6                 push    1Ch
.plt:00000000000012CB                 jmp     sub_10F0
.plt:00000000000012D0
.plt:00000000000012D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000012D0
.plt:00000000000012D0 ; Attributes: thunk
.plt:00000000000012D0
.plt:00000000000012D0 ___printf_chk   proc near               ; CODE XREF: usage+49↓p
.plt:00000000000012D0                                         ; usage+72↓p ...
.plt:00000000000012D0                 jmp     cs:__printf_chk_ptr
.plt:00000000000012D0 ___printf_chk   endp
.plt:00000000000012D0
.plt:00000000000012D6 ; ---------------------------------------------------------------------------
.plt:00000000000012D6                 push    1Dh
.plt:00000000000012DB                 jmp     sub_10F0
.plt:00000000000012E0
.plt:00000000000012E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000012E0
.plt:00000000000012E0 ; Attributes: thunk
.plt:00000000000012E0
.plt:00000000000012E0 ; void error(int status, int errnum, const char *format, ...)
.plt:00000000000012E0 _error          proc near               ; CODE XREF: close_stdout+7D↓p
.plt:00000000000012E0                                         ; close_stdout+9D↓p ...
.plt:00000000000012E0                 jmp     cs:error_ptr
.plt:00000000000012E0 _error          endp
.plt:00000000000012E0
.plt:00000000000012E6 ; ---------------------------------------------------------------------------
.plt:00000000000012E6                 push    1Eh
.plt:00000000000012EB                 jmp     sub_10F0
.plt:00000000000012F0
.plt:00000000000012F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000012F0
.plt:00000000000012F0 ; Attributes: thunk
.plt:00000000000012F0
.plt:00000000000012F0 ; int fseeko(FILE *stream, __off_t off, int whence)
.plt:00000000000012F0 _fseeko         proc near               ; CODE XREF: rpl_fseeko:loc_41CA↓j
.plt:00000000000012F0                 jmp     cs:fseeko_ptr
.plt:00000000000012F0 _fseeko         endp
.plt:00000000000012F0
.plt:00000000000012F6 ; ---------------------------------------------------------------------------
.plt:00000000000012F6                 push    1Fh
.plt:00000000000012FB                 jmp     sub_10F0
.plt:0000000000001300
.plt:0000000000001300 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001300
.plt:0000000000001300 ; Attributes: thunk
.plt:0000000000001300
.plt:0000000000001300 ; int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
.plt:0000000000001300 ___cxa_atexit   proc near               ; CODE XREF: atexit+9↓j
.plt:0000000000001300                 jmp     cs:__cxa_atexit_ptr
.plt:0000000000001300 ___cxa_atexit   endp
.plt:0000000000001300
.plt:0000000000001306 ; ---------------------------------------------------------------------------
.plt:0000000000001306                 push    20h ; ' '
.plt:000000000000130B                 jmp     sub_10F0
.plt:0000000000001310
.plt:0000000000001310 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001310
.plt:0000000000001310 ; Attributes: noreturn thunk
.plt:0000000000001310
.plt:0000000000001310 ; void __noreturn exit(int status)
.plt:0000000000001310 _exit           proc near               ; CODE XREF: usage+281↓p
.plt:0000000000001310                 jmp     cs:exit_ptr
.plt:0000000000001310 _exit           endp
.plt:0000000000001310
.plt:0000000000001316 ; ---------------------------------------------------------------------------
.plt:0000000000001316                 push    21h ; '!'
.plt:000000000000131B                 jmp     sub_10F0
.plt:0000000000001320
.plt:0000000000001320 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001320
.plt:0000000000001320 ; Attributes: thunk
.plt:0000000000001320
.plt:0000000000001320 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
.plt:0000000000001320 _fwrite         proc near               ; CODE XREF: set_program_name+95↓p
.plt:0000000000001320                 jmp     cs:fwrite_ptr
.plt:0000000000001320 _fwrite         endp
.plt:0000000000001320
.plt:0000000000001326 ; ---------------------------------------------------------------------------
.plt:0000000000001326                 push    22h ; '"'
.plt:000000000000132B                 jmp     sub_10F0
.plt:0000000000001330
.plt:0000000000001330 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001330
.plt:0000000000001330 ; Attributes: thunk
.plt:0000000000001330
.plt:0000000000001330 ___fprintf_chk  proc near               ; CODE XREF: version_etc_arn+37↓p
.plt:0000000000001330                                         ; version_etc_arn+69↓p ...
.plt:0000000000001330                 jmp     cs:__fprintf_chk_ptr
.plt:0000000000001330 ___fprintf_chk  endp
.plt:0000000000001330
.plt:0000000000001336 ; ---------------------------------------------------------------------------
.plt:0000000000001336                 push    23h ; '#'
.plt:000000000000133B                 jmp     sub_10F0
.plt:0000000000001340
.plt:0000000000001340 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001340
.plt:0000000000001340 ; Attributes: thunk
.plt:0000000000001340
.plt:0000000000001340 ; int mbsinit(const mbstate_t *ps)
.plt:0000000000001340 _mbsinit        proc near               ; CODE XREF: quotearg_buffer_restyled+9A8↓p
.plt:0000000000001340                 jmp     cs:mbsinit_ptr
.plt:0000000000001340 _mbsinit        endp
.plt:0000000000001340
.plt:0000000000001346 ; ---------------------------------------------------------------------------
.plt:0000000000001346                 push    24h ; '$'
.plt:000000000000134B                 jmp     sub_10F0
.plt:0000000000001350
.plt:0000000000001350 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001350
.plt:0000000000001350 ; Attributes: thunk
.plt:0000000000001350
.plt:0000000000001350 ; int iswprint(wint_t wc)
.plt:0000000000001350 _iswprint       proc near               ; CODE XREF: quotearg_buffer_restyled+990↓p
.plt:0000000000001350                 jmp     cs:iswprint_ptr
.plt:0000000000001350 _iswprint       endp
.plt:0000000000001350
.plt:0000000000001356 ; ---------------------------------------------------------------------------
.plt:0000000000001356                 push    25h ; '%'
.plt:000000000000135B                 jmp     sub_10F0
.plt:0000000000001360
.plt:0000000000001360 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001360
.plt:0000000000001360 ; Attributes: thunk
.plt:0000000000001360
.plt:0000000000001360 ; const unsigned __int16 **__ctype_b_loc(void)
.plt:0000000000001360 ___ctype_b_loc  proc near               ; CODE XREF: quotearg_buffer_restyled+513↓p
.plt:0000000000001360                 jmp     cs:__ctype_b_loc_ptr
.plt:0000000000001360 ___ctype_b_loc  endp
.plt:0000000000001360
.plt:0000000000001366 ; ---------------------------------------------------------------------------
.plt:0000000000001366                 push    26h ; '&'
.plt:000000000000136B                 jmp     sub_10F0
.plt:000000000000136B ; } // starts at 10F0
.plt:000000000000136B _plt            ends
.plt:000000000000136B
.plt.got:0000000000001370 ; ===========================================================================
.plt.got:0000000000001370
.plt.got:0000000000001370 ; Segment type: Pure code
.plt.got:0000000000001370 ; Segment permissions: Read/Execute
.plt.got:0000000000001370 _plt_got        segment qword public 'CODE' use64
.plt.got:0000000000001370                 assume cs:_plt_got
.plt.got:0000000000001370                 ;org 1370h
.plt.got:0000000000001370                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:0000000000001370
.plt.got:0000000000001370 ; =============== S U B R O U T I N E =======================================
.plt.got:0000000000001370
.plt.got:0000000000001370 ; Attributes: thunk
.plt.got:0000000000001370
.plt.got:0000000000001370 ; int __fastcall _cxa_finalize(void *)
.plt.got:0000000000001370 __cxa_finalize  proc near               ; CODE XREF: __do_global_dtors_aux+1E↓p
.plt.got:0000000000001370 ; __unwind {
.plt.got:0000000000001370                 jmp     cs:__cxa_finalize_ptr
.plt.got:0000000000001370 __cxa_finalize  endp
.plt.got:0000000000001370
.plt.got:0000000000001370 ; ---------------------------------------------------------------------------
.plt.got:0000000000001376                 align 8
.plt.got:0000000000001376 ; } // starts at 1370
.plt.got:0000000000001376 _plt_got        ends
.plt.got:0000000000001376
LOAD:0000000000001378 ; ===========================================================================
LOAD:0000000000001378
LOAD:0000000000001378 ; Segment type: Pure code
LOAD:0000000000001378 ; Segment permissions: Read/Execute
LOAD:0000000000001378 LOAD            segment byte public 'CODE' use64
LOAD:0000000000001378                 assume cs:LOAD
LOAD:0000000000001378                 ;org 1378h
LOAD:0000000000001378                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000001378                 align 20h
LOAD:0000000000001378 LOAD            ends
LOAD:0000000000001378
.text:0000000000001380 ; ===========================================================================
.text:0000000000001380
.text:0000000000001380 ; Segment type: Pure code
.text:0000000000001380 ; Segment permissions: Read/Execute
.text:0000000000001380 _text           segment para public 'CODE' use64
.text:0000000000001380                 assume cs:_text
.text:0000000000001380                 ;org 1380h
.text:0000000000001380                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:0000000000001380
.text:0000000000001380 ; =============== S U B R O U T I N E =======================================
.text:0000000000001380
.text:0000000000001380
.text:0000000000001380 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:0000000000001380                 public main
.text:0000000000001380 main            proc near               ; DATA XREF: start+1D↓o
.text:0000000000001380 ; __unwind {
.text:0000000000001380                 cmp     edi, 2
.text:0000000000001383                 jz      short loc_1388
.text:0000000000001385                 xor     eax, eax
.text:0000000000001387                 retn
.text:0000000000001388 ; ---------------------------------------------------------------------------
.text:0000000000001388
.text:0000000000001388 loc_1388:                               ; CODE XREF: main+3↑j
.text:0000000000001388                 push    rbx
.text:0000000000001389                 mov     rdi, [rsi]
.text:000000000000138C                 mov     rbx, rsi
.text:000000000000138F                 call    set_program_name
.text:0000000000001394                 lea     rsi, aS+4       ; locale
.text:000000000000139B                 mov     edi, 6          ; category
.text:00000000000013A0                 call    _setlocale
.text:00000000000013A5                 lea     rsi, dirname    ; "/usr/local/share/locale"
.text:00000000000013AC                 lea     rdi, domainname ; "coreutils"
.text:00000000000013B3                 call    _bindtextdomain
.text:00000000000013B8                 lea     rdi, domainname ; "coreutils"
.text:00000000000013BF                 call    _textdomain
.text:00000000000013C4                 lea     rdi, close_stdout
.text:00000000000013CB                 call    atexit
.text:00000000000013D0                 mov     rbx, [rbx+8]
.text:00000000000013D4                 lea     rsi, s2         ; "--help"
.text:00000000000013DB                 mov     rdi, rbx        ; s1
.text:00000000000013DE                 call    _strcmp
.text:00000000000013E3                 test    eax, eax
.text:00000000000013E5                 jz      short loc_142B
.text:00000000000013E7                 lea     rsi, aVersion   ; "--version"
.text:00000000000013EE                 mov     rdi, rbx        ; s1
.text:00000000000013F1                 call    _strcmp
.text:00000000000013F6                 test    eax, eax
.text:00000000000013F8                 jz      short loc_13FE
.text:00000000000013FA
.text:00000000000013FA loc_13FA:                               ; CODE XREF: main+A9↓j
.text:00000000000013FA                 xor     eax, eax
.text:00000000000013FC                 pop     rbx
.text:00000000000013FD                 retn
.text:00000000000013FE ; ---------------------------------------------------------------------------
.text:00000000000013FE
.text:00000000000013FE loc_13FE:                               ; CODE XREF: main+78↑j
.text:00000000000013FE                 mov     rcx, cs:Version
.text:0000000000001405                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:000000000000140C                 lea     r8, aJimMeyering ; "Jim Meyering"
.text:0000000000001413                 lea     rdx, unk_4344
.text:000000000000141A                 lea     rsi, aTrue      ; "true"
.text:0000000000001421                 xor     r9d, r9d
.text:0000000000001424                 call    version_etc
.text:0000000000001429                 jmp     short loc_13FA
.text:000000000000142B ; ---------------------------------------------------------------------------
.text:000000000000142B
.text:000000000000142B loc_142B:                               ; CODE XREF: main+65↑j
.text:000000000000142B                 xor     edi, edi        ; status
.text:000000000000142D                 call    usage
.text:000000000000142D ; } // starts at 1380
.text:000000000000142D main            endp
.text:000000000000142D
.text:000000000000142D ; ---------------------------------------------------------------------------
.text:0000000000001432                 align 20h
.text:0000000000001440
.text:0000000000001440 ; =============== S U B R O U T I N E =======================================
.text:0000000000001440
.text:0000000000001440 ; Attributes: noreturn fuzzy-sp info_from_lumina
.text:0000000000001440
.text:0000000000001440 ; void __fastcall __noreturn start(__int64, __int64, void (*)(void))
.text:0000000000001440                 public start
.text:0000000000001440 start           proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:0000000000001440 ; __unwind {
.text:0000000000001440                 xor     ebp, ebp
.text:0000000000001442                 mov     r9, rdx         ; rtld_fini
.text:0000000000001445                 pop     rsi             ; argc
.text:0000000000001446                 mov     rdx, rsp        ; ubp_av
.text:0000000000001449                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:000000000000144D                 push    rax
.text:000000000000144E                 push    rsp             ; stack_end
.text:000000000000144F                 lea     r8, __libc_csu_fini ; fini
.text:0000000000001456                 lea     rcx, __libc_csu_init ; init
.text:000000000000145D                 lea     rdi, main       ; main
.text:0000000000001464                 call    cs:__libc_start_main_ptr
.text:000000000000146A                 hlt
.text:000000000000146A ; } // starts at 1440
.text:000000000000146A start           endp
.text:000000000000146A
.text:000000000000146A ; ---------------------------------------------------------------------------
.text:000000000000146B                 align 10h
.text:0000000000001470
.text:0000000000001470 ; =============== S U B R O U T I N E =======================================
.text:0000000000001470
.text:0000000000001470 ; Attributes: bp-based frame info_from_lumina
.text:0000000000001470
.text:0000000000001470 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_1523↓p
.text:0000000000001470                 lea     rdi, __bss_start
.text:0000000000001477                 push    rbp
.text:0000000000001478                 lea     rax, __bss_start
.text:000000000000147F                 cmp     rax, rdi
.text:0000000000001482                 mov     rbp, rsp
.text:0000000000001485                 jz      short loc_14A0
.text:0000000000001487                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:000000000000148E                 test    rax, rax
.text:0000000000001491                 jz      short loc_14A0
.text:0000000000001493                 pop     rbp
.text:0000000000001494                 jmp     rax
.text:0000000000001494 ; ---------------------------------------------------------------------------
.text:0000000000001496                 align 20h
.text:00000000000014A0
.text:00000000000014A0 loc_14A0:                               ; CODE XREF: deregister_tm_clones+15↑j
.text:00000000000014A0                                         ; deregister_tm_clones+21↑j
.text:00000000000014A0                 pop     rbp
.text:00000000000014A1                 retn
.text:00000000000014A1 deregister_tm_clones endp
.text:00000000000014A1
.text:00000000000014A1 ; ---------------------------------------------------------------------------
.text:00000000000014A2                 align 10h
.text:00000000000014B0
.text:00000000000014B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000014B0
.text:00000000000014B0 ; Attributes: bp-based frame info_from_lumina
.text:00000000000014B0
.text:00000000000014B0 register_tm_clones proc near            ; CODE XREF: frame_dummy+5↓j
.text:00000000000014B0                 lea     rdi, __bss_start
.text:00000000000014B7                 lea     rsi, __bss_start
.text:00000000000014BE                 push    rbp
.text:00000000000014BF                 sub     rsi, rdi
.text:00000000000014C2                 mov     rbp, rsp
.text:00000000000014C5                 sar     rsi, 3
.text:00000000000014C9                 mov     rax, rsi
.text:00000000000014CC                 shr     rax, 3Fh
.text:00000000000014D0                 add     rsi, rax
.text:00000000000014D3                 sar     rsi, 1
.text:00000000000014D6                 jz      short loc_14F0
.text:00000000000014D8                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:00000000000014DF                 test    rax, rax
.text:00000000000014E2                 jz      short loc_14F0
.text:00000000000014E4                 pop     rbp
.text:00000000000014E5                 jmp     rax
.text:00000000000014E5 ; ---------------------------------------------------------------------------
.text:00000000000014E7                 align 10h
.text:00000000000014F0
.text:00000000000014F0 loc_14F0:                               ; CODE XREF: register_tm_clones+26↑j
.text:00000000000014F0                                         ; register_tm_clones+32↑j
.text:00000000000014F0                 pop     rbp
.text:00000000000014F1                 retn
.text:00000000000014F1 register_tm_clones endp
.text:00000000000014F1
.text:00000000000014F1 ; ---------------------------------------------------------------------------
.text:00000000000014F2                 align 20h
.text:0000000000001500
.text:0000000000001500 ; =============== S U B R O U T I N E =======================================
.text:0000000000001500
.text:0000000000001500 ; Attributes: info_from_lumina
.text:0000000000001500
.text:0000000000001500 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:0000000000001500                 cmp     cs:completed_7697, 0
.text:0000000000001507                 jnz     short locret_1538
.text:0000000000001509                 cmp     cs:__cxa_finalize_ptr, 0
.text:0000000000001511                 push    rbp
.text:0000000000001512                 mov     rbp, rsp
.text:0000000000001515                 jz      short loc_1523
.text:0000000000001517                 mov     rdi, cs:__dso_handle ; void *
.text:000000000000151E                 call    __cxa_finalize
.text:0000000000001523
.text:0000000000001523 loc_1523:                               ; CODE XREF: __do_global_dtors_aux+15↑j
.text:0000000000001523                 call    deregister_tm_clones
.text:0000000000001528                 mov     cs:completed_7697, 1
.text:000000000000152F                 pop     rbp
.text:0000000000001530                 retn
.text:0000000000001530 ; ---------------------------------------------------------------------------
.text:0000000000001531                 align 8
.text:0000000000001538
.text:0000000000001538 locret_1538:                            ; CODE XREF: __do_global_dtors_aux+7↑j
.text:0000000000001538                 rep retn
.text:0000000000001538 __do_global_dtors_aux endp
.text:0000000000001538
.text:0000000000001538 ; ---------------------------------------------------------------------------
.text:000000000000153A                 align 20h
.text:0000000000001540
.text:0000000000001540 ; =============== S U B R O U T I N E =======================================
.text:0000000000001540
.text:0000000000001540 ; Attributes: bp-based frame
.text:0000000000001540
.text:0000000000001540 frame_dummy     proc near               ; CODE XREF: __libc_csu_init+49↓p
.text:0000000000001540                                         ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:0000000000001540                 push    rbp
.text:0000000000001541                 mov     rbp, rsp
.text:0000000000001544                 pop     rbp
.text:0000000000001545                 jmp     register_tm_clones
.text:0000000000001545 frame_dummy     endp
.text:0000000000001545
.text:0000000000001545 ; ---------------------------------------------------------------------------
.text:000000000000154A                 align 10h
.text:0000000000001550
.text:0000000000001550 ; =============== S U B R O U T I N E =======================================
.text:0000000000001550
.text:0000000000001550 ; Attributes: noreturn
.text:0000000000001550
.text:0000000000001550 ; void __fastcall __noreturn usage(int status)
.text:0000000000001550                 public usage
.text:0000000000001550 usage           proc near               ; CODE XREF: main+AD↑p
.text:0000000000001550
.text:0000000000001550 var_A8          = qword ptr -0A8h
.text:0000000000001550 var_A0          = qword ptr -0A0h
.text:0000000000001550 var_98          = qword ptr -98h
.text:0000000000001550 var_90          = qword ptr -90h
.text:0000000000001550 var_88          = qword ptr -88h
.text:0000000000001550 var_80          = qword ptr -80h
.text:0000000000001550 var_78          = qword ptr -78h
.text:0000000000001550 var_70          = qword ptr -70h
.text:0000000000001550 var_68          = qword ptr -68h
.text:0000000000001550 var_60          = qword ptr -60h
.text:0000000000001550 var_58          = qword ptr -58h
.text:0000000000001550 var_50          = qword ptr -50h
.text:0000000000001550 var_48          = qword ptr -48h
.text:0000000000001550 var_40          = qword ptr -40h
.text:0000000000001550 var_30          = qword ptr -30h
.text:0000000000001550
.text:0000000000001550 ; __unwind {
.text:0000000000001550                 push    r13
.text:0000000000001552                 push    r12
.text:0000000000001554                 lea     rsi, msgid      ; "Usage: %s [ignored command line argumen"...
.text:000000000000155B                 push    rbp
.text:000000000000155C                 push    rbx
.text:000000000000155D                 mov     edx, 5          ; category
.text:0000000000001562                 mov     ebx, edi
.text:0000000000001564                 xor     edi, edi        ; domainname
.text:0000000000001566                 sub     rsp, 88h
.text:000000000000156D                 mov     rbp, cs:program_name
.text:0000000000001574                 mov     rax, fs:28h
.text:000000000000157D                 mov     [rsp+0A8h+var_30], rax
.text:0000000000001582                 xor     eax, eax
.text:0000000000001584                 call    _dcgettext
.text:0000000000001589                 mov     rcx, rbp
.text:000000000000158C                 mov     rdx, rbp
.text:000000000000158F                 mov     rsi, rax
.text:0000000000001592                 mov     edi, 1
.text:0000000000001597                 xor     eax, eax
.text:0000000000001599                 call    ___printf_chk
.text:000000000000159E                 lea     rsi, aExitWithAStatu ; "Exit with a status code indicating succ"...
.text:00000000000015A5                 mov     edx, 5          ; category
.text:00000000000015AA                 xor     edi, edi        ; domainname
.text:00000000000015AC                 call    _dcgettext
.text:00000000000015B1                 lea     rsi, aS         ; "%s\n\n"
.text:00000000000015B8                 mov     rdx, rax
.text:00000000000015BB                 mov     edi, 1
.text:00000000000015C0                 xor     eax, eax
.text:00000000000015C2                 call    ___printf_chk
.text:00000000000015C7                 mov     rbp, cs:stdout@@GLIBC_2_2_5
.text:00000000000015CE                 lea     rsi, aHelpDisplayThi ; "      --help     display this help and "...
.text:00000000000015D5                 mov     edx, 5          ; category
.text:00000000000015DA                 xor     edi, edi        ; domainname
.text:00000000000015DC                 call    _dcgettext
.text:00000000000015E1                 mov     rsi, rbp        ; stream
.text:00000000000015E4                 mov     rdi, rax        ; s
.text:00000000000015E7                 call    _fputs_unlocked
.text:00000000000015EC                 mov     rbp, cs:stdout@@GLIBC_2_2_5
.text:00000000000015F3                 lea     rsi, aVersionOutputV ; "      --version  output version informa"...
.text:00000000000015FA                 mov     edx, 5          ; category
.text:00000000000015FF                 xor     edi, edi        ; domainname
.text:0000000000001601                 call    _dcgettext
.text:0000000000001606                 mov     rsi, rbp        ; stream
.text:0000000000001609                 mov     rdi, rax        ; s
.text:000000000000160C                 lea     rbp, aTrue      ; "true"
.text:0000000000001613                 call    _fputs_unlocked
.text:0000000000001618                 lea     rsi, aNoteYourShellM ; "\nNOTE: your shell may have its own ver"...
.text:000000000000161F                 mov     edx, 5          ; category
.text:0000000000001624                 xor     edi, edi        ; domainname
.text:0000000000001626                 call    _dcgettext
.text:000000000000162B                 lea     rdx, aTrue      ; "true"
.text:0000000000001632                 mov     rsi, rax
.text:0000000000001635                 mov     edi, 1
.text:000000000000163A                 xor     eax, eax
.text:000000000000163C                 call    ___printf_chk
.text:0000000000001641                 lea     rax, asc_42CE   ; "["
.text:0000000000001648                 lea     rcx, aSha256sum ; "sha256sum"
.text:000000000000164F                 lea     rdi, domainname ; "coreutils"
.text:0000000000001656                 mov     [rsp+0A8h+var_48], 0
.text:000000000000165F                 mov     [rsp+0A8h+var_40], 0
.text:0000000000001668                 mov     rdx, rsp
.text:000000000000166B                 mov     [rsp+0A8h+var_A8], rax
.text:000000000000166F                 lea     rax, aTestInvocation ; "test invocation"
.text:0000000000001676                 mov     [rsp+0A8h+var_78], rcx
.text:000000000000167B                 lea     rcx, aSha384sum ; "sha384sum"
.text:0000000000001682                 mov     [rsp+0A8h+var_98], rdi
.text:0000000000001687                 mov     [rsp+0A8h+var_A0], rax
.text:000000000000168C                 lea     rax, aMultiCallInvoc ; "Multi-call invocation"
.text:0000000000001693                 mov     [rsp+0A8h+var_68], rcx
.text:0000000000001698                 lea     rcx, aSha512sum ; "sha512sum"
.text:000000000000169F                 mov     [rsp+0A8h+var_90], rax
.text:00000000000016A4                 lea     rax, aSha224sum ; "sha224sum"
.text:00000000000016AB                 mov     [rsp+0A8h+var_58], rcx
.text:00000000000016B0                 mov     [rsp+0A8h+var_88], rax
.text:00000000000016B5                 lea     rax, aSha2Utilities ; "sha2 utilities"
.text:00000000000016BC                 mov     [rsp+0A8h+var_80], rax
.text:00000000000016C1                 mov     [rsp+0A8h+var_70], rax
.text:00000000000016C6                 mov     [rsp+0A8h+var_60], rax
.text:00000000000016CB                 mov     [rsp+0A8h+var_50], rax
.text:00000000000016D0                 jmp     short loc_16DC
.text:00000000000016D0 ; ---------------------------------------------------------------------------
.text:00000000000016D2                 align 8
.text:00000000000016D8
.text:00000000000016D8 loc_16D8:                               ; CODE XREF: usage+1A6↓j
.text:00000000000016D8                 mov     rdi, [rdx+10h]
.text:00000000000016DC
.text:00000000000016DC loc_16DC:                               ; CODE XREF: usage+180↑j
.text:00000000000016DC                 add     rdx, 10h
.text:00000000000016E0                 test    rdi, rdi
.text:00000000000016E3                 jz      short loc_16F8
.text:00000000000016E5                 mov     ecx, 5
.text:00000000000016EA                 mov     rsi, rbp
.text:00000000000016ED                 repe cmpsb
.text:00000000000016EF                 setnbe  al
.text:00000000000016F2                 sbb     al, 0
.text:00000000000016F4                 test    al, al
.text:00000000000016F6                 jnz     short loc_16D8
.text:00000000000016F8
.text:00000000000016F8 loc_16F8:                               ; CODE XREF: usage+193↑j
.text:00000000000016F8                 mov     r12, [rdx+8]
.text:00000000000016FC                 xor     edi, edi        ; domainname
.text:00000000000016FE                 mov     edx, 5          ; category
.text:0000000000001703                 lea     rsi, aSOnlineHelpS ; "\n%s online help: <%s>\n"
.text:000000000000170A                 test    r12, r12
.text:000000000000170D                 jz      loc_17D6
.text:0000000000001713                 call    _dcgettext
.text:0000000000001718                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:000000000000171F                 lea     rdx, unk_4344
.text:0000000000001726                 mov     rsi, rax
.text:0000000000001729                 mov     edi, 1
.text:000000000000172E                 xor     eax, eax
.text:0000000000001730                 call    ___printf_chk
.text:0000000000001735                 xor     esi, esi        ; locale
.text:0000000000001737                 mov     edi, 5          ; category
.text:000000000000173C                 call    _setlocale
.text:0000000000001741                 test    rax, rax
.text:0000000000001744                 jz      short loc_1762
.text:0000000000001746                 lea     rsi, aEn        ; "en_"
.text:000000000000174D                 mov     edx, 3          ; n
.text:0000000000001752                 mov     rdi, rax        ; s1
.text:0000000000001755                 call    _strncmp
.text:000000000000175A                 test    eax, eax
.text:000000000000175C                 jnz     loc_1828
.text:0000000000001762
.text:0000000000001762 loc_1762:                               ; CODE XREF: usage+1F4↑j
.text:0000000000001762                                         ; usage+2FD↓j
.text:0000000000001762                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000001769                 xor     edi, edi        ; domainname
.text:000000000000176B                 mov     edx, 5          ; category
.text:0000000000001770                 call    _dcgettext
.text:0000000000001775                 lea     rcx, aTrue      ; "true"
.text:000000000000177C                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000001783                 mov     rsi, rax
.text:0000000000001786                 mov     edi, 1
.text:000000000000178B                 xor     eax, eax
.text:000000000000178D                 call    ___printf_chk
.text:0000000000001792                 cmp     r12, rbp
.text:0000000000001795                 lea     rcx, aMultiCallInvoc+0Ah ; " invocation"
.text:000000000000179C                 lea     rbp, aS+4       ; ""
.text:00000000000017A3                 cmovz   rbp, rcx
.text:00000000000017A7
.text:00000000000017A7 loc_17A7:                               ; CODE XREF: usage+340↓j
.text:00000000000017A7                 lea     rsi, aOrAvailableLoc ; "or available locally via: info '(coreut"...
.text:00000000000017AE                 mov     edx, 5          ; category
.text:00000000000017B3                 xor     edi, edi        ; domainname
.text:00000000000017B5                 call    _dcgettext
.text:00000000000017BA                 mov     edi, 1
.text:00000000000017BF                 mov     rsi, rax
.text:00000000000017C2                 mov     rcx, rbp
.text:00000000000017C5                 mov     rdx, r12
.text:00000000000017C8                 xor     eax, eax
.text:00000000000017CA                 call    ___printf_chk
.text:00000000000017CF                 mov     edi, ebx        ; status
.text:00000000000017D1                 call    _exit
.text:00000000000017D6 ; ---------------------------------------------------------------------------
.text:00000000000017D6
.text:00000000000017D6 loc_17D6:                               ; CODE XREF: usage+1BD↑j
.text:00000000000017D6                 call    _dcgettext
.text:00000000000017DB                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000017E2                 lea     rdx, unk_4344
.text:00000000000017E9                 mov     rsi, rax
.text:00000000000017EC                 mov     edi, 1
.text:00000000000017F1                 xor     eax, eax
.text:00000000000017F3                 call    ___printf_chk
.text:00000000000017F8                 xor     esi, esi        ; locale
.text:00000000000017FA                 mov     edi, 5          ; category
.text:00000000000017FF                 call    _setlocale
.text:0000000000001804                 test    rax, rax
.text:0000000000001807                 jz      short loc_1852
.text:0000000000001809                 lea     rsi, aEn        ; "en_"
.text:0000000000001810                 mov     edx, 3          ; n
.text:0000000000001815                 mov     rdi, rax        ; s1
.text:0000000000001818                 call    _strncmp
.text:000000000000181D                 test    eax, eax
.text:000000000000181F                 jz      short loc_1852
.text:0000000000001821                 lea     r12, aTrue      ; "true"
.text:0000000000001828
.text:0000000000001828 loc_1828:                               ; CODE XREF: usage+20C↑j
.text:0000000000001828                 mov     r13, cs:stdout@@GLIBC_2_2_5
.text:000000000000182F                 lea     rsi, aReportAnyTrans ; "Report any translation bugs to <https:/"...
.text:0000000000001836                 xor     edi, edi        ; domainname
.text:0000000000001838                 mov     edx, 5          ; category
.text:000000000000183D                 call    _dcgettext
.text:0000000000001842                 mov     rsi, r13        ; stream
.text:0000000000001845                 mov     rdi, rax        ; s
.text:0000000000001848                 call    _fputs_unlocked
.text:000000000000184D                 jmp     loc_1762
.text:0000000000001852 ; ---------------------------------------------------------------------------
.text:0000000000001852
.text:0000000000001852 loc_1852:                               ; CODE XREF: usage+2B7↑j
.text:0000000000001852                                         ; usage+2CF↑j
.text:0000000000001852                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000001859                 mov     edx, 5          ; category
.text:000000000000185E                 xor     edi, edi        ; domainname
.text:0000000000001860                 lea     r12, aTrue      ; "true"
.text:0000000000001867                 lea     rbp, aMultiCallInvoc+0Ah ; " invocation"
.text:000000000000186E                 call    _dcgettext
.text:0000000000001873                 lea     rcx, aTrue      ; "true"
.text:000000000000187A                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000001881                 mov     rsi, rax
.text:0000000000001884                 mov     edi, 1
.text:0000000000001889                 xor     eax, eax
.text:000000000000188B                 call    ___printf_chk
.text:0000000000001890                 jmp     loc_17A7
.text:0000000000001890 ; } // starts at 1550
.text:0000000000001890 usage           endp
.text:0000000000001890
.text:0000000000001890 ; ---------------------------------------------------------------------------
.text:0000000000001895                 align 20h
.text:00000000000018A0
.text:00000000000018A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000018A0
.text:00000000000018A0
.text:00000000000018A0                 public close_stdout_set_file_name
.text:00000000000018A0 close_stdout_set_file_name proc near
.text:00000000000018A0 ; __unwind {
.text:00000000000018A0                 mov     cs:file_name, rdi
.text:00000000000018A7                 retn
.text:00000000000018A7 ; } // starts at 18A0
.text:00000000000018A7 close_stdout_set_file_name endp
.text:00000000000018A7
.text:00000000000018A7 ; ---------------------------------------------------------------------------
.text:00000000000018A8                 align 10h
.text:00000000000018B0
.text:00000000000018B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000018B0
.text:00000000000018B0
.text:00000000000018B0                 public close_stdout_set_ignore_EPIPE
.text:00000000000018B0 close_stdout_set_ignore_EPIPE proc near
.text:00000000000018B0 ; __unwind {
.text:00000000000018B0                 mov     cs:ignore_EPIPE, dil
.text:00000000000018B7                 retn
.text:00000000000018B7 ; } // starts at 18B0
.text:00000000000018B7 close_stdout_set_ignore_EPIPE endp
.text:00000000000018B7
.text:00000000000018B7 ; ---------------------------------------------------------------------------
.text:00000000000018B8                 align 20h
.text:00000000000018C0
.text:00000000000018C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000018C0
.text:00000000000018C0 ; Attributes: info_from_lumina
.text:00000000000018C0
.text:00000000000018C0 ; void __cdecl close_stdout()
.text:00000000000018C0                 public close_stdout
.text:00000000000018C0 close_stdout    proc near               ; DATA XREF: main+44↑o
.text:00000000000018C0 ; __unwind {
.text:00000000000018C0                 push    rbp
.text:00000000000018C1                 push    rbx
.text:00000000000018C2                 sub     rsp, 8
.text:00000000000018C6                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:00000000000018CD                 call    close_stream
.text:00000000000018D2                 test    eax, eax
.text:00000000000018D4                 jz      short loc_18EC
.text:00000000000018D6                 call    ___errno_location
.text:00000000000018DB                 cmp     cs:ignore_EPIPE, 0
.text:00000000000018E2                 mov     rbx, rax
.text:00000000000018E5                 jz      short loc_1903
.text:00000000000018E7                 cmp     dword ptr [rax], 20h ; ' '
.text:00000000000018EA                 jnz     short loc_1903
.text:00000000000018EC
.text:00000000000018EC loc_18EC:                               ; CODE XREF: close_stdout+14↑j
.text:00000000000018EC                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:00000000000018F3                 call    close_stream
.text:00000000000018F8                 test    eax, eax
.text:00000000000018FA                 jnz     short loc_1942
.text:00000000000018FC                 add     rsp, 8
.text:0000000000001900                 pop     rbx
.text:0000000000001901                 pop     rbp
.text:0000000000001902                 retn
.text:0000000000001903 ; ---------------------------------------------------------------------------
.text:0000000000001903
.text:0000000000001903 loc_1903:                               ; CODE XREF: close_stdout+25↑j
.text:0000000000001903                                         ; close_stdout+2A↑j
.text:0000000000001903                 lea     rsi, aWriteError ; "write error"
.text:000000000000190A                 xor     edi, edi        ; domainname
.text:000000000000190C                 mov     edx, 5          ; category
.text:0000000000001911                 call    _dcgettext
.text:0000000000001916                 mov     rdi, cs:file_name
.text:000000000000191D                 mov     rbp, rax
.text:0000000000001920                 test    rdi, rdi
.text:0000000000001923                 jz      short loc_194D
.text:0000000000001925                 call    quotearg_colon
.text:000000000000192A                 mov     esi, [rbx]      ; errnum
.text:000000000000192C                 lea     rdx, format     ; "%s: %s"
.text:0000000000001933                 mov     rcx, rax
.text:0000000000001936                 mov     r8, rbp
.text:0000000000001939                 xor     edi, edi        ; status
.text:000000000000193B                 xor     eax, eax
.text:000000000000193D                 call    _error
.text:0000000000001942
.text:0000000000001942 loc_1942:                               ; CODE XREF: close_stdout+3A↑j
.text:0000000000001942                                         ; close_stdout+A2↓j
.text:0000000000001942                 mov     edi, cs:exit_failure ; status
.text:0000000000001948                 call    __exit
.text:000000000000194D ; ---------------------------------------------------------------------------
.text:000000000000194D
.text:000000000000194D loc_194D:                               ; CODE XREF: close_stdout+63↑j
.text:000000000000194D                 mov     esi, [rbx]      ; errnum
.text:000000000000194F                 lea     rdx, format+4   ; format
.text:0000000000001956                 mov     rcx, rax
.text:0000000000001959                 xor     edi, edi        ; status
.text:000000000000195B                 xor     eax, eax
.text:000000000000195D                 call    _error
.text:0000000000001962                 jmp     short loc_1942
.text:0000000000001962 ; } // starts at 18C0
.text:0000000000001962 close_stdout    endp
.text:0000000000001962
.text:0000000000001962 ; ---------------------------------------------------------------------------
.text:0000000000001964                 align 10h
.text:0000000000001970
.text:0000000000001970 ; =============== S U B R O U T I N E =======================================
.text:0000000000001970
.text:0000000000001970
.text:0000000000001970                 public set_program_name
.text:0000000000001970 set_program_name proc near              ; CODE XREF: main+F↑p
.text:0000000000001970 ; __unwind {
.text:0000000000001970                 test    rdi, rdi
.text:0000000000001973                 push    rbx
.text:0000000000001974                 jz      short loc_19ED
.text:0000000000001976                 mov     esi, 2Fh ; '/'  ; c
.text:000000000000197B                 mov     rbx, rdi
.text:000000000000197E                 call    _strrchr
.text:0000000000001983                 test    rax, rax
.text:0000000000001986                 jz      short loc_19DD
.text:0000000000001988                 lea     r8, [rax+1]
.text:000000000000198C                 mov     rdx, r8
.text:000000000000198F                 sub     rdx, rbx
.text:0000000000001992                 cmp     rdx, 6
.text:0000000000001996                 jle     short loc_19DD
.text:0000000000001998                 lea     rsi, [rax-6]
.text:000000000000199C                 lea     rdi, aLibs      ; "/.libs/"
.text:00000000000019A3                 mov     ecx, 7
.text:00000000000019A8                 repe cmpsb
.text:00000000000019AA                 setnbe  dl
.text:00000000000019AD                 sbb     dl, 0
.text:00000000000019B0                 test    dl, dl
.text:00000000000019B2                 jnz     short loc_19DD
.text:00000000000019B4                 lea     rdi, aLt        ; "lt-"
.text:00000000000019BB                 mov     ecx, 3
.text:00000000000019C0                 mov     rsi, r8
.text:00000000000019C3                 mov     rbx, r8
.text:00000000000019C6                 repe cmpsb
.text:00000000000019C8                 setnbe  dl
.text:00000000000019CB                 sbb     dl, 0
.text:00000000000019CE                 test    dl, dl
.text:00000000000019D0                 jnz     short loc_19DD
.text:00000000000019D2                 lea     rbx, [rax+4]
.text:00000000000019D6                 mov     cs:__bss_start, rbx
.text:00000000000019DD
.text:00000000000019DD loc_19DD:                               ; CODE XREF: set_program_name+16↑j
.text:00000000000019DD                                         ; set_program_name+26↑j ...
.text:00000000000019DD                 mov     cs:program_name, rbx
.text:00000000000019E4                 mov     cs:program_invocation_name@@GLIBC_2_2_5, rbx
.text:00000000000019EB                 pop     rbx
.text:00000000000019EC                 retn
.text:00000000000019ED ; ---------------------------------------------------------------------------
.text:00000000000019ED
.text:00000000000019ED loc_19ED:                               ; CODE XREF: set_program_name+4↑j
.text:00000000000019ED                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:00000000000019F4                 lea     rdi, aANullArgv0WasP ; "A NULL argv[0] was passed through an ex"...
.text:00000000000019FB                 mov     edx, 37h ; '7'  ; n
.text:0000000000001A00                 mov     esi, 1          ; size
.text:0000000000001A05                 call    _fwrite
.text:0000000000001A0A                 call    _abort
.text:0000000000001A0A ; } // starts at 1970
.text:0000000000001A0A set_program_name endp
.text:0000000000001A0A
.text:0000000000001A0A ; ---------------------------------------------------------------------------
.text:0000000000001A0F                 align 10h
.text:0000000000001A10
.text:0000000000001A10 ; =============== S U B R O U T I N E =======================================
.text:0000000000001A10
.text:0000000000001A10 ; Attributes: info_from_lumina
.text:0000000000001A10
.text:0000000000001A10 ; const char *__fastcall gettext_quote(const char *msgid, quoting_style s)
.text:0000000000001A10 gettext_quote   proc near               ; CODE XREF: quotearg_buffer_restyled+1165↓p
.text:0000000000001A10                                         ; quotearg_buffer_restyled+117B↓p
.text:0000000000001A10 ; __unwind {
.text:0000000000001A10                 push    rbp
.text:0000000000001A11                 push    rbx
.text:0000000000001A12                 mov     rbp, rdi
.text:0000000000001A15                 mov     ebx, esi
.text:0000000000001A17                 sub     rsp, 8
.text:0000000000001A1B                 call    locale_charset
.text:0000000000001A20                 movzx   edx, byte ptr [rax]
.text:0000000000001A23                 and     edx, 0FFFFFFDFh
.text:0000000000001A26                 cmp     dl, 55h ; 'U'
.text:0000000000001A29                 jz      short loc_1AA0
.text:0000000000001A2B                 cmp     dl, 47h ; 'G'
.text:0000000000001A2E                 jz      short loc_1A50
.text:0000000000001A30
.text:0000000000001A30 loc_1A30:                               ; CODE XREF: gettext_quote+4A↓j
.text:0000000000001A30                                         ; gettext_quote+50↓j ...
.text:0000000000001A30                 lea     rax, unk_4653
.text:0000000000001A37                 lea     rdx, asc_4655   ; "'"
.text:0000000000001A3E                 cmp     ebx, 9
.text:0000000000001A41                 cmovnz  rax, rdx
.text:0000000000001A45                 add     rsp, 8
.text:0000000000001A49                 pop     rbx
.text:0000000000001A4A                 pop     rbp
.text:0000000000001A4B                 retn
.text:0000000000001A4B ; ---------------------------------------------------------------------------
.text:0000000000001A4C                 align 10h
.text:0000000000001A50
.text:0000000000001A50 loc_1A50:                               ; CODE XREF: gettext_quote+1E↑j
.text:0000000000001A50                 movzx   edx, byte ptr [rax+1]
.text:0000000000001A54                 and     edx, 0FFFFFFDFh
.text:0000000000001A57                 cmp     dl, 42h ; 'B'
.text:0000000000001A5A                 jnz     short loc_1A30
.text:0000000000001A5C                 cmp     byte ptr [rax+2], 31h ; '1'
.text:0000000000001A60                 jnz     short loc_1A30
.text:0000000000001A62                 cmp     byte ptr [rax+3], 38h ; '8'
.text:0000000000001A66                 jnz     short loc_1A30
.text:0000000000001A68                 cmp     byte ptr [rax+4], 30h ; '0'
.text:0000000000001A6C                 jnz     short loc_1A30
.text:0000000000001A6E                 cmp     byte ptr [rax+5], 33h ; '3'
.text:0000000000001A72                 jnz     short loc_1A30
.text:0000000000001A74                 cmp     byte ptr [rax+6], 30h ; '0'
.text:0000000000001A78                 jnz     short loc_1A30
.text:0000000000001A7A                 cmp     byte ptr [rax+7], 0
.text:0000000000001A7E                 jnz     short loc_1A30
.text:0000000000001A80                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000001A84                 lea     rax, unk_464C
.text:0000000000001A8B                 lea     rdx, unk_4650
.text:0000000000001A92                 cmovnz  rax, rdx
.text:0000000000001A96                 add     rsp, 8
.text:0000000000001A9A                 pop     rbx
.text:0000000000001A9B                 pop     rbp
.text:0000000000001A9C                 retn
.text:0000000000001A9C ; ---------------------------------------------------------------------------
.text:0000000000001A9D                 align 20h
.text:0000000000001AA0
.text:0000000000001AA0 loc_1AA0:                               ; CODE XREF: gettext_quote+19↑j
.text:0000000000001AA0                 movzx   edx, byte ptr [rax+1]
.text:0000000000001AA4                 and     edx, 0FFFFFFDFh
.text:0000000000001AA7                 cmp     dl, 54h ; 'T'
.text:0000000000001AAA                 jnz     short loc_1A30
.text:0000000000001AAC                 movzx   edx, byte ptr [rax+2]
.text:0000000000001AB0                 and     edx, 0FFFFFFDFh
.text:0000000000001AB3                 cmp     dl, 46h ; 'F'
.text:0000000000001AB6                 jnz     loc_1A30
.text:0000000000001ABC                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:0000000000001AC0                 jnz     loc_1A30
.text:0000000000001AC6                 cmp     byte ptr [rax+4], 38h ; '8'
.text:0000000000001ACA                 jnz     loc_1A30
.text:0000000000001AD0                 cmp     byte ptr [rax+5], 0
.text:0000000000001AD4                 jnz     loc_1A30
.text:0000000000001ADA                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000001ADE                 lea     rax, unk_4644
.text:0000000000001AE5                 lea     rdx, unk_4648
.text:0000000000001AEC                 cmovnz  rax, rdx
.text:0000000000001AF0                 add     rsp, 8
.text:0000000000001AF4                 pop     rbx
.text:0000000000001AF5                 pop     rbp
.text:0000000000001AF6                 retn
.text:0000000000001AF6 ; } // starts at 1A10
.text:0000000000001AF6 gettext_quote   endp
.text:0000000000001AF6
.text:0000000000001AF6 ; ---------------------------------------------------------------------------
.text:0000000000001AF7                 align 20h
.text:0000000000001B00
.text:0000000000001B00 ; =============== S U B R O U T I N E =======================================
.text:0000000000001B00
.text:0000000000001B00 ; Attributes: info_from_lumina
.text:0000000000001B00
.text:0000000000001B00 ; size_t __fastcall quotearg_buffer_restyled(char *buffer, size_t buffersize, const char *arg, size_t argsize, quoting_style quoting_style, int flags, const unsigned int *quote_these_too, const char *left_quote, const char *right_quote)
.text:0000000000001B00 quotearg_buffer_restyled proc near      ; CODE XREF: quotearg_buffer_restyled+BCD↓p
.text:0000000000001B00                                         ; quotearg_buffer_restyled+11CB↓p ...
.text:0000000000001B00
.text:0000000000001B00 var_E0          = dword ptr -0E0h
.text:0000000000001B00 var_DB          = byte ptr -0DBh
.text:0000000000001B00 var_DA          = byte ptr -0DAh
.text:0000000000001B00 var_D9          = byte ptr -0D9h
.text:0000000000001B00 s               = qword ptr -0D8h
.text:0000000000001B00 n               = qword ptr -0D0h
.text:0000000000001B00 var_C8          = qword ptr -0C8h
.text:0000000000001B00 ps              = qword ptr -0C0h
.text:0000000000001B00 var_B8          = qword ptr -0B8h
.text:0000000000001B00 var_B0          = qword ptr -0B0h
.text:0000000000001B00 var_A8          = qword ptr -0A8h
.text:0000000000001B00 s2              = qword ptr -0A0h
.text:0000000000001B00 var_98          = qword ptr -98h
.text:0000000000001B00 var_90          = qword ptr -90h
.text:0000000000001B00 var_88          = qword ptr -88h
.text:0000000000001B00 var_80          = qword ptr -80h
.text:0000000000001B00 var_78          = qword ptr -78h
.text:0000000000001B00 var_70          = dword ptr -70h
.text:0000000000001B00 var_6C          = byte ptr -6Ch
.text:0000000000001B00 var_6B          = byte ptr -6Bh
.text:0000000000001B00 var_6A          = byte ptr -6Ah
.text:0000000000001B00 var_69          = byte ptr -69h
.text:0000000000001B00 var_68          = qword ptr -68h
.text:0000000000001B00 var_60          = qword ptr -60h
.text:0000000000001B00 wc              = dword ptr -4Ch
.text:0000000000001B00 var_48          = qword ptr -48h
.text:0000000000001B00 var_40          = qword ptr -40h
.text:0000000000001B00 arg_0           = qword ptr  8
.text:0000000000001B00 arg_8           = qword ptr  10h
.text:0000000000001B00 arg_10          = qword ptr  18h
.text:0000000000001B00
.text:0000000000001B00 ; __unwind {
.text:0000000000001B00                 push    r15
.text:0000000000001B02                 push    r14
.text:0000000000001B04                 mov     r15d, r8d
.text:0000000000001B07                 push    r13
.text:0000000000001B09                 push    r12
.text:0000000000001B0B                 mov     r14, rdi
.text:0000000000001B0E                 push    rbp
.text:0000000000001B0F                 push    rbx
.text:0000000000001B10                 mov     ebx, r9d
.text:0000000000001B13                 mov     r13, rsi
.text:0000000000001B16                 mov     rbp, rcx
.text:0000000000001B19                 and     ebx, 2
.text:0000000000001B1C                 sub     rsp, 0B8h
.text:0000000000001B23                 mov     rax, [rsp+0E8h+arg_0]
.text:0000000000001B2B                 mov     [rsp+0E8h+s], rdx
.text:0000000000001B30                 mov     [rsp+0E8h+var_E0], r8d
.text:0000000000001B35                 mov     [rsp+0E8h+var_70], r9d
.text:0000000000001B3A                 mov     [rsp+0E8h+var_C8], rax
.text:0000000000001B3F                 mov     rax, [rsp+0E8h+arg_8]
.text:0000000000001B47                 mov     [rsp+0E8h+var_80], rax
.text:0000000000001B4C                 mov     rax, [rsp+0E8h+arg_10]
.text:0000000000001B54                 mov     [rsp+0E8h+var_88], rax
.text:0000000000001B59                 mov     rax, fs:28h
.text:0000000000001B62                 mov     [rsp+0E8h+var_40], rax
.text:0000000000001B6A                 xor     eax, eax
.text:0000000000001B6C                 call    ___ctype_get_mb_cur_max
.text:0000000000001B71                 cmp     r15d, 0Ah       ; switch 11 cases
.text:0000000000001B75                 mov     [rsp+0E8h+var_90], rax
.text:0000000000001B7A                 ja      def_1B91        ; jumptable 00000000000121F1 default case
.text:0000000000001B80                 lea     rcx, jpt_1B91
.text:0000000000001B87                 mov     edx, r15d
.text:0000000000001B8A                 movsxd  rax, ds:(jpt_1B91 - 46C0h)[rcx+rdx*4]
.text:0000000000001B8E                 add     rax, rcx
.text:0000000000001B91                 jmp     rax             ; switch jump
.text:0000000000001B93 ; ---------------------------------------------------------------------------
.text:0000000000001B93
.text:0000000000001B93 loc_1B93:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000001B93                                         ; quotearg_buffer_restyled+C66↓j
.text:0000000000001B93                                         ; DATA XREF: ...
.text:0000000000001B93                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 1
.text:0000000000001B98                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000001B9D                 xor     r12d, r12d
.text:0000000000001BA0                 mov     [rsp+0E8h+var_98], 0
.text:0000000000001BA9                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000001BAE                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000001BB3
.text:0000000000001BB3 loc_1BB3:                               ; CODE XREF: quotearg_buffer_restyled+E94↓j
.text:0000000000001BB3                 lea     rax, asc_4655   ; "'"
.text:0000000000001BBA                 mov     [rsp+0E8h+n], 1
.text:0000000000001BC3                 xor     r15d, r15d
.text:0000000000001BC6                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000001BCE                 mov     [rsp+0E8h+s2], rax
.text:0000000000001BD3
.text:0000000000001BD3 loc_1BD3:                               ; CODE XREF: quotearg_buffer_restyled+7F4↓j
.text:0000000000001BD3                                         ; quotearg_buffer_restyled+CB8↓j ...
.text:0000000000001BD3                 xor     r11d, r11d
.text:0000000000001BD6                 mov     rax, rbp
.text:0000000000001BD9                 mov     r8d, r12d
.text:0000000000001BDC                 mov     rbp, r11
.text:0000000000001BDF                 mov     r11, rax
.text:0000000000001BE2                 nop     word ptr [rax+rax+00h]
.text:0000000000001BE8
.text:0000000000001BE8 loc_1BE8:                               ; CODE XREF: quotearg_buffer_restyled+2B2↓j
.text:0000000000001BE8                                         ; quotearg_buffer_restyled+42C↓j
.text:0000000000001BE8                 cmp     r11, rbp
.text:0000000000001BEB                 setnz   r12b
.text:0000000000001BEF                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000001BF3                 jnz     short loc_1C02
.text:0000000000001BF5                 mov     rax, [rsp+0E8h+s]
.text:0000000000001BFA                 cmp     byte ptr [rax+rbp], 0
.text:0000000000001BFE                 setnz   r12b
.text:0000000000001C02
.text:0000000000001C02 loc_1C02:                               ; CODE XREF: quotearg_buffer_restyled+F3↑j
.text:0000000000001C02                 test    r12b, r12b
.text:0000000000001C05                 jz      loc_2260
.text:0000000000001C0B                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000001C10                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000001C15                 lea     r9, [rdi+rbp]
.text:0000000000001C19                 setnz   al
.text:0000000000001C1C                 and     al, [rsp+0E8h+var_DB]
.text:0000000000001C20                 mov     r10d, eax
.text:0000000000001C23                 jz      loc_1CD0
.text:0000000000001C29                 mov     rax, [rsp+0E8h+n]
.text:0000000000001C2E                 test    rax, rax
.text:0000000000001C31                 jz      loc_2060
.text:0000000000001C37                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000001C3B                 lea     rbx, [rbp+rax+0]
.text:0000000000001C40                 jnz     short loc_1C70
.text:0000000000001C42                 cmp     rax, 1
.text:0000000000001C46                 jbe     short loc_1C70
.text:0000000000001C48                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000001C4D                 mov     byte ptr [rsp+0E8h+var_B8], r10b
.text:0000000000001C52                 mov     [rsp+0E8h+ps], r9
.text:0000000000001C57                 call    _strlen
.text:0000000000001C5C                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000001C62                 movzx   r10d, byte ptr [rsp+0E8h+var_B8]
.text:0000000000001C68                 mov     r11, rax
.text:0000000000001C6B                 mov     r9, [rsp+0E8h+ps]
.text:0000000000001C70
.text:0000000000001C70 loc_1C70:                               ; CODE XREF: quotearg_buffer_restyled+140↑j
.text:0000000000001C70                                         ; quotearg_buffer_restyled+146↑j
.text:0000000000001C70                 cmp     rbx, r11
.text:0000000000001C73                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000001C78                 ja      loc_2230
.text:0000000000001C7E                 mov     rdx, [rsp+0E8h+n] ; n
.text:0000000000001C83                 mov     rsi, [rsp+0E8h+s2] ; s2
.text:0000000000001C88                 mov     rdi, r9         ; s1
.text:0000000000001C8B                 mov     [rsp+0E8h+var_A8], r11
.text:0000000000001C90                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000001C95                 mov     [rsp+0E8h+var_B8], r9
.text:0000000000001C9A                 call    _memcmp
.text:0000000000001C9F                 test    eax, eax
.text:0000000000001CA1                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000001CA6                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000001CAC                 mov     r11, [rsp+0E8h+var_A8]
.text:0000000000001CB1                 jnz     loc_2230
.text:0000000000001CB7                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000001CBC                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000001CC2                 jnz     loc_2C45
.text:0000000000001CC8                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000001CD0
.text:0000000000001CD0 loc_1CD0:                               ; CODE XREF: quotearg_buffer_restyled+123↑j
.text:0000000000001CD0                                         ; quotearg_buffer_restyled+733↓j
.text:0000000000001CD0                 movzx   ebx, byte ptr [r9]
.text:0000000000001CD4                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000001CD7                 ja      def_1CEE        ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:0000000000001CDD                 lea     rcx, jpt_1CEE
.text:0000000000001CE4                 movzx   edx, bl
.text:0000000000001CE7                 movsxd  rax, ds:(jpt_1CEE - 46ECh)[rcx+rdx*4]
.text:0000000000001CEB                 add     rax, rcx
.text:0000000000001CEE                 jmp     rax             ; switch jump
.text:0000000000001CF0 ; ---------------------------------------------------------------------------
.text:0000000000001CF0
.text:0000000000001CF0 loc_1CF0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000001CF0                                         ; DATA XREF: .rodata:jpt_207A↓o
.text:0000000000001CF0                 xor     r10d, r10d      ; jumptable 00000000000126DA cases 123,125
.text:0000000000001CF3
.text:0000000000001CF3 loc_1CF3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000001CF3                                         ; DATA XREF: .rodata:jpt_1CEE↓o
.text:0000000000001CF3                 cmp     r11, 1          ; jumptable 000000000001234E cases 123,125
.text:0000000000001CF7                 setnz   al
.text:0000000000001CFA                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000001CFE                 jnz     short loc_1D0C
.text:0000000000001D00                 mov     rax, [rsp+0E8h+s]
.text:0000000000001D05                 cmp     byte ptr [rax+1], 0
.text:0000000000001D09                 setnz   al
.text:0000000000001D0C
.text:0000000000001D0C loc_1D0C:                               ; CODE XREF: quotearg_buffer_restyled+1FE↑j
.text:0000000000001D0C                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000001D11                 setz    dl
.text:0000000000001D14                 test    al, al
.text:0000000000001D16                 jz      loc_1F68
.text:0000000000001D1C
.text:0000000000001D1C loc_1D1C:                               ; CODE XREF: quotearg_buffer_restyled+46B↓j
.text:0000000000001D1C                 xor     r12d, r12d
.text:0000000000001D1F                 xor     eax, eax
.text:0000000000001D21                 nop     dword ptr [rax+00000000h]
.text:0000000000001D28
.text:0000000000001D28 loc_1D28:                               ; CODE XREF: quotearg_buffer_restyled+2E9↓j
.text:0000000000001D28                                         ; quotearg_buffer_restyled+30C↓j ...
.text:0000000000001D28                 cmp     [rsp+0E8h+var_DB], 1
.text:0000000000001D2D                 jnz     loc_1E42
.text:0000000000001D33                 test    dl, dl
.text:0000000000001D35                 jnz     loc_1E42
.text:0000000000001D3B
.text:0000000000001D3B loc_1D3B:                               ; CODE XREF: quotearg_buffer_restyled+347↓j
.text:0000000000001D3B                 mov     rsi, [rsp+0E8h+var_C8]
.text:0000000000001D40                 test    rsi, rsi
.text:0000000000001D43                 jz      short loc_1D59
.text:0000000000001D45                 mov     edx, ebx
.text:0000000000001D47                 shr     dl, 5
.text:0000000000001D4A                 movzx   edx, dl
.text:0000000000001D4D                 mov     edx, [rsi+rdx*4]
.text:0000000000001D50                 bt      edx, ebx
.text:0000000000001D53                 jb      loc_1EA3
.text:0000000000001D59
.text:0000000000001D59 loc_1D59:                               ; CODE XREF: quotearg_buffer_restyled+243↑j
.text:0000000000001D59                                         ; quotearg_buffer_restyled+34D↓j ...
.text:0000000000001D59                 test    r10b, r10b
.text:0000000000001D5C                 jnz     loc_1EA3
.text:0000000000001D62                 xor     eax, 1
.text:0000000000001D65                 add     rbp, 1
.text:0000000000001D69                 and     eax, r8d
.text:0000000000001D6C
.text:0000000000001D6C loc_1D6C:                               ; CODE XREF: quotearg_buffer_restyled+75A↓j
.text:0000000000001D6C                                         ; quotearg_buffer_restyled+AE8↓j
.text:0000000000001D6C                 test    al, al
.text:0000000000001D6E                 jz      short loc_1D90
.text:0000000000001D70                 cmp     r13, r15
.text:0000000000001D73                 jbe     short loc_1D7A
.text:0000000000001D75                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000001D7A
.text:0000000000001D7A loc_1D7A:                               ; CODE XREF: quotearg_buffer_restyled+273↑j
.text:0000000000001D7A                 lea     rax, [r15+1]
.text:0000000000001D7E                 cmp     r13, rax
.text:0000000000001D81                 jbe     short loc_1D89
.text:0000000000001D83                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000001D89
.text:0000000000001D89 loc_1D89:                               ; CODE XREF: quotearg_buffer_restyled+281↑j
.text:0000000000001D89                 add     r15, 2
.text:0000000000001D8D                 xor     r8d, r8d
.text:0000000000001D90
.text:0000000000001D90 loc_1D90:                               ; CODE XREF: quotearg_buffer_restyled+26E↑j
.text:0000000000001D90                                         ; quotearg_buffer_restyled+403↓j ...
.text:0000000000001D90                 cmp     r15, r13
.text:0000000000001D93                 jnb     short loc_1D99
.text:0000000000001D95                 mov     [r14+r15], bl
.text:0000000000001D99
.text:0000000000001D99 loc_1D99:                               ; CODE XREF: quotearg_buffer_restyled+293↑j
.text:0000000000001D99                 movzx   edi, [rsp+0E8h+var_DA]
.text:0000000000001D9E                 add     r15, 1
.text:0000000000001DA2                 mov     eax, 0
.text:0000000000001DA7                 test    r12b, r12b
.text:0000000000001DAA                 cmovz   edi, eax
.text:0000000000001DAD                 mov     [rsp+0E8h+var_DA], dil
.text:0000000000001DB2                 jmp     loc_1BE8
.text:0000000000001DB2 ; ---------------------------------------------------------------------------
.text:0000000000001DB7                 align 20h
.text:0000000000001DC0
.text:0000000000001DC0 loc_1DC0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000001DC0                                         ; DATA XREF: .rodata:jpt_207A↓o
.text:0000000000001DC0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 63
.text:0000000000001DC3
.text:0000000000001DC3 loc_1DC3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000001DC3                                         ; DATA XREF: .rodata:jpt_1CEE↓o
.text:0000000000001DC3                 mov     eax, [rsp+0E8h+var_E0] ; jumptable 000000000001234E case 63
.text:0000000000001DC7                 cmp     eax, 2
.text:0000000000001DCA                 jz      loc_2388
.text:0000000000001DD0                 cmp     eax, 5
.text:0000000000001DD3                 jz      loc_2348
.text:0000000000001DD9                 cmp     eax, 2
.text:0000000000001DDC                 mov     ebx, 3Fh ; '?'
.text:0000000000001DE1                 setz    dl
.text:0000000000001DE4                 xor     r12d, r12d
.text:0000000000001DE7                 xor     eax, eax
.text:0000000000001DE9                 jmp     loc_1D28
.text:0000000000001DE9 ; ---------------------------------------------------------------------------
.text:0000000000001DEE                 align 10h
.text:0000000000001DF0
.text:0000000000001DF0 loc_1DF0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000001DF0                                         ; DATA XREF: .rodata:jpt_207A↓o
.text:0000000000001DF0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 39
.text:0000000000001DF3
.text:0000000000001DF3 loc_1DF3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000001DF3                                         ; DATA XREF: .rodata:jpt_1CEE↓o
.text:0000000000001DF3                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 39
.text:0000000000001DF8                 jz      loc_2300
.text:0000000000001DFE                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000001E03                 xor     edx, edx
.text:0000000000001E05                 xor     eax, eax
.text:0000000000001E07                 mov     ebx, 27h ; '''
.text:0000000000001E0C                 jmp     loc_1D28
.text:0000000000001E0C ; ---------------------------------------------------------------------------
.text:0000000000001E11                 align 8
.text:0000000000001E18
.text:0000000000001E18 loc_1E18:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000001E18                                         ; DATA XREF: .rodata:jpt_1CEE↓o
.text:0000000000001E18                 mov     edx, 9          ; jumptable 000000000001234E case 9
.text:0000000000001E1D                 mov     ebx, 74h ; 't'
.text:0000000000001E22
.text:0000000000001E22 loc_1E22:                               ; CODE XREF: quotearg_buffer_restyled+4BA↓j
.text:0000000000001E22                                         ; quotearg_buffer_restyled+4EA↓j ...
.text:0000000000001E22                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000001E27                 setz    al
.text:0000000000001E2A                 and     al, [rsp+0E8h+var_D9]
.text:0000000000001E2E                 jnz     loc_1F7E
.text:0000000000001E34
.text:0000000000001E34 loc_1E34:                               ; CODE XREF: quotearg_buffer_restyled+362↓j
.text:0000000000001E34                                         ; quotearg_buffer_restyled+45A↓j ...
.text:0000000000001E34                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000001E39                 jnz     short loc_1EA0
.text:0000000000001E3B
.text:0000000000001E3B loc_1E3B:                               ; CODE XREF: quotearg_buffer_restyled+422↓j
.text:0000000000001E3B                 mov     ebx, edx
.text:0000000000001E3D                 xor     r12d, r12d
.text:0000000000001E40                 xor     eax, eax
.text:0000000000001E42
.text:0000000000001E42 loc_1E42:                               ; CODE XREF: quotearg_buffer_restyled+22D↑j
.text:0000000000001E42                                         ; quotearg_buffer_restyled+235↑j
.text:0000000000001E42                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000001E47                 jnz     loc_1D3B
.text:0000000000001E4D                 jmp     loc_1D59
.text:0000000000001E4D ; ---------------------------------------------------------------------------
.text:0000000000001E52                 align 8
.text:0000000000001E58
.text:0000000000001E58 loc_1E58:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000001E58                                         ; DATA XREF: .rodata:jpt_1CEE↓o
.text:0000000000001E58                 mov     edx, 8          ; jumptable 000000000001234E case 8
.text:0000000000001E5D                 mov     ebx, 62h ; 'b'
.text:0000000000001E62                 jmp     short loc_1E34
.text:0000000000001E62 ; ---------------------------------------------------------------------------
.text:0000000000001E64                 align 8
.text:0000000000001E68
.text:0000000000001E68 loc_1E68:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000001E68                                         ; DATA XREF: .rodata:jpt_1CEE↓o
.text:0000000000001E68                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 92
.text:0000000000001E6D                 jz      loc_2240
.text:0000000000001E73                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000001E78                 jz      loc_2090
.text:0000000000001E7E
.text:0000000000001E7E loc_1E7E:                               ; CODE XREF: quotearg_buffer_restyled+588↓j
.text:0000000000001E7E                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000001E83                 jz      loc_2090
.text:0000000000001E89                 cmp     [rsp+0E8h+n], 0
.text:0000000000001E8F                 jnz     loc_224B
.text:0000000000001E95                 mov     ebx, 5Ch ; '\'
.text:0000000000001E9A                 nop     word ptr [rax+rax+00h]
.text:0000000000001EA0
.text:0000000000001EA0 loc_1EA0:                               ; CODE XREF: quotearg_buffer_restyled+339↑j
.text:0000000000001EA0                                         ; quotearg_buffer_restyled+5D5↓j ...
.text:0000000000001EA0                 xor     r12d, r12d
.text:0000000000001EA3
.text:0000000000001EA3 loc_1EA3:                               ; CODE XREF: quotearg_buffer_restyled+253↑j
.text:0000000000001EA3                                         ; quotearg_buffer_restyled+25C↑j
.text:0000000000001EA3                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000001EA8                 setz    dl
.text:0000000000001EAB                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000001EB0                 mov     eax, edx
.text:0000000000001EB2                 jnz     loc_2708
.text:0000000000001EB8                 mov     eax, r8d
.text:0000000000001EBB                 xor     eax, 1
.text:0000000000001EBE                 and     al, dl
.text:0000000000001EC0                 jz      short loc_1EF1
.text:0000000000001EC2                 cmp     r13, r15
.text:0000000000001EC5                 jbe     short loc_1ECC
.text:0000000000001EC7                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000001ECC
.text:0000000000001ECC loc_1ECC:                               ; CODE XREF: quotearg_buffer_restyled+3C5↑j
.text:0000000000001ECC                 lea     rdx, [r15+1]
.text:0000000000001ED0                 cmp     r13, rdx
.text:0000000000001ED3                 jbe     short loc_1EDB
.text:0000000000001ED5                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000001EDB
.text:0000000000001EDB loc_1EDB:                               ; CODE XREF: quotearg_buffer_restyled+3D3↑j
.text:0000000000001EDB                 lea     rdx, [r15+2]
.text:0000000000001EDF                 cmp     r13, rdx
.text:0000000000001EE2                 jbe     short loc_1EEA
.text:0000000000001EE4                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000001EEA
.text:0000000000001EEA loc_1EEA:                               ; CODE XREF: quotearg_buffer_restyled+3E2↑j
.text:0000000000001EEA                 add     r15, 3
.text:0000000000001EEE                 mov     r8d, eax
.text:0000000000001EF1
.text:0000000000001EF1 loc_1EF1:                               ; CODE XREF: quotearg_buffer_restyled+3C0↑j
.text:0000000000001EF1                 cmp     r13, r15
.text:0000000000001EF4                 jbe     short loc_1EFB
.text:0000000000001EF6                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000001EFB
.text:0000000000001EFB loc_1EFB:                               ; CODE XREF: quotearg_buffer_restyled+3F4↑j
.text:0000000000001EFB                 add     r15, 1
.text:0000000000001EFF                 add     rbp, 1
.text:0000000000001F03                 jmp     loc_1D90
.text:0000000000001F03 ; ---------------------------------------------------------------------------
.text:0000000000001F08                 align 10h
.text:0000000000001F10
.text:0000000000001F10 loc_1F10:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000001F10                                         ; DATA XREF: .rodata:jpt_1CEE↓o
.text:0000000000001F10                 cmp     [rsp+0E8h+var_DB], 0 ; jumptable 000000000001234E case 0
.text:0000000000001F15                 jnz     loc_20E3
.text:0000000000001F1B                 xor     edx, edx
.text:0000000000001F1D                 test    byte ptr [rsp+0E8h+var_70], 1
.text:0000000000001F22                 jz      loc_1E3B
.text:0000000000001F28                 add     rbp, 1
.text:0000000000001F2C                 jmp     loc_1BE8
.text:0000000000001F2C ; ---------------------------------------------------------------------------
.text:0000000000001F31                 align 8
.text:0000000000001F38
.text:0000000000001F38 loc_1F38:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000001F38                                         ; DATA XREF: .rodata:jpt_1CEE↓o
.text:0000000000001F38                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 37,43-58,65-90,93,95,97-122
.text:0000000000001F3D                 setz    dl
.text:0000000000001F40                 xor     eax, eax
.text:0000000000001F42                 jmp     loc_1D28
.text:0000000000001F42 ; ---------------------------------------------------------------------------
.text:0000000000001F47                 align 10h
.text:0000000000001F50
.text:0000000000001F50 loc_1F50:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000001F50                                         ; DATA XREF: .rodata:jpt_1CEE↓o
.text:0000000000001F50                 mov     edx, 7          ; jumptable 000000000001234E case 7
.text:0000000000001F55                 mov     ebx, 61h ; 'a'
.text:0000000000001F5A                 jmp     loc_1E34
.text:0000000000001F5A ; ---------------------------------------------------------------------------
.text:0000000000001F5F                 align 20h
.text:0000000000001F60
.text:0000000000001F60 loc_1F60:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000001F60                                         ; DATA XREF: .rodata:jpt_1CEE↓o
.text:0000000000001F60                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 35,126
.text:0000000000001F65                 setz    dl
.text:0000000000001F68
.text:0000000000001F68 loc_1F68:                               ; CODE XREF: quotearg_buffer_restyled+216↑j
.text:0000000000001F68                                         ; quotearg_buffer_restyled+6A3↓j
.text:0000000000001F68                 test    rbp, rbp
.text:0000000000001F6B                 jnz     loc_1D1C
.text:0000000000001F71
.text:0000000000001F71 loc_1F71:                               ; CODE XREF: quotearg_buffer_restyled+49B↓j
.text:0000000000001F71                                         ; quotearg_buffer_restyled+4AD↓j ...
.text:0000000000001F71                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000001F76                 and     al, dl
.text:0000000000001F78                 jz      loc_1D28
.text:0000000000001F7E
.text:0000000000001F7E loc_1F7E:                               ; CODE XREF: quotearg_buffer_restyled+32E↑j
.text:0000000000001F7E                 mov     rbp, r11
.text:0000000000001F81                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000001F89                 jmp     loc_2689
.text:0000000000001F89 ; ---------------------------------------------------------------------------
.text:0000000000001F8E                 align 10h
.text:0000000000001F90
.text:0000000000001F90 loc_1F90:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000001F90                                         ; DATA XREF: .rodata:jpt_1CEE↓o
.text:0000000000001F90                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000001F95                 setz    dl
.text:0000000000001F98                 xor     r12d, r12d
.text:0000000000001F9B                 jmp     short loc_1F71
.text:0000000000001F9B ; ---------------------------------------------------------------------------
.text:0000000000001F9D                 align 20h
.text:0000000000001FA0
.text:0000000000001FA0 loc_1FA0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000001FA0                                         ; DATA XREF: .rodata:jpt_1CEE↓o
.text:0000000000001FA0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 32
.text:0000000000001FA5                 mov     ebx, 20h ; ' '
.text:0000000000001FAA                 setz    dl
.text:0000000000001FAD                 jmp     short loc_1F71
.text:0000000000001FAD ; ---------------------------------------------------------------------------
.text:0000000000001FAF                 align 10h
.text:0000000000001FB0
.text:0000000000001FB0 loc_1FB0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000001FB0                                         ; DATA XREF: .rodata:jpt_1CEE↓o
.text:0000000000001FB0                 mov     edx, 0Dh        ; jumptable 000000000001234E case 13
.text:0000000000001FB5                 mov     ebx, 72h ; 'r'
.text:0000000000001FBA                 jmp     loc_1E22
.text:0000000000001FBA ; ---------------------------------------------------------------------------
.text:0000000000001FBF                 align 20h
.text:0000000000001FC0
.text:0000000000001FC0 loc_1FC0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000001FC0                                         ; DATA XREF: .rodata:jpt_1CEE↓o
.text:0000000000001FC0                 mov     edx, 0Ch        ; jumptable 000000000001234E case 12
.text:0000000000001FC5                 mov     ebx, 66h ; 'f'
.text:0000000000001FCA                 jmp     loc_1E34
.text:0000000000001FCA ; ---------------------------------------------------------------------------
.text:0000000000001FCF                 align 10h
.text:0000000000001FD0
.text:0000000000001FD0 loc_1FD0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000001FD0                                         ; DATA XREF: .rodata:jpt_1CEE↓o
.text:0000000000001FD0                 mov     edx, 0Bh        ; jumptable 000000000001234E case 11
.text:0000000000001FD5                 mov     ebx, 76h ; 'v'
.text:0000000000001FDA                 jmp     loc_1E34
.text:0000000000001FDA ; ---------------------------------------------------------------------------
.text:0000000000001FDF                 align 20h
.text:0000000000001FE0
.text:0000000000001FE0 loc_1FE0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000001FE0                                         ; DATA XREF: .rodata:jpt_1CEE↓o
.text:0000000000001FE0                 mov     edx, 0Ah        ; jumptable 000000000001234E case 10
.text:0000000000001FE5                 mov     ebx, 6Eh ; 'n'
.text:0000000000001FEA                 jmp     loc_1E22
.text:0000000000001FEA ; ---------------------------------------------------------------------------
.text:0000000000001FEF                 align 10h
.text:0000000000001FF0
.text:0000000000001FF0 def_207A:                               ; CODE XREF: quotearg_buffer_restyled+567↓j
.text:0000000000001FF0                                         ; quotearg_buffer_restyled+57A↓j
.text:0000000000001FF0                                         ; DATA XREF: ...
.text:0000000000001FF0                 xor     r10d, r10d      ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000001FF3                 nop     dword ptr [rax+rax+00h]
.text:0000000000001FF8
.text:0000000000001FF8 def_1CEE:                               ; CODE XREF: quotearg_buffer_restyled+1D7↑j
.text:0000000000001FF8                                         ; quotearg_buffer_restyled+1EE↑j
.text:0000000000001FF8                                         ; DATA XREF: ...
.text:0000000000001FF8                 cmp     [rsp+0E8h+var_90], 1 ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:0000000000001FFE                 jnz     loc_23A8
.text:0000000000002004                 mov     [rsp+0E8h+var_B0], r11
.text:0000000000002009                 mov     byte ptr [rsp+0E8h+var_B8], r8b
.text:000000000000200E                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000002013                 call    ___ctype_b_loc
.text:0000000000002018                 mov     rcx, [rax]
.text:000000000000201B                 movzx   edx, bl
.text:000000000000201E                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000002024                 movzx   r8d, byte ptr [rsp+0E8h+var_B8]
.text:000000000000202A                 mov     r11, [rsp+0E8h+var_B0]
.text:000000000000202F                 mov     edi, 1
.text:0000000000002034                 movzx   eax, word ptr [rcx+rdx*2]
.text:0000000000002038                 and     ax, 4000h
.text:000000000000203C                 setnz   r12b
.text:0000000000002040                 setz    al
.text:0000000000002043                 and     al, [rsp+0E8h+var_DB]
.text:0000000000002047
.text:0000000000002047 loc_2047:                               ; CODE XREF: quotearg_buffer_restyled+FED↓j
.text:0000000000002047                 test    al, al
.text:0000000000002049                 jnz     loc_29E1
.text:000000000000204F                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002054                 setz    dl
.text:0000000000002057                 jmp     loc_1D28
.text:0000000000002057 ; ---------------------------------------------------------------------------
.text:000000000000205C                 align 20h
.text:0000000000002060
.text:0000000000002060 loc_2060:                               ; CODE XREF: quotearg_buffer_restyled+131↑j
.text:0000000000002060                 movzx   ebx, byte ptr [r9]
.text:0000000000002064                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000002067                 ja      short def_207A  ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000002069                 lea     rcx, jpt_207A
.text:0000000000002070                 movzx   edx, bl
.text:0000000000002073                 movsxd  rax, ds:(jpt_207A - 48E8h)[rcx+rdx*4]
.text:0000000000002077                 add     rax, rcx
.text:000000000000207A                 jmp     rax             ; switch jump
.text:000000000000207A ; ---------------------------------------------------------------------------
.text:000000000000207C                 align 20h
.text:0000000000002080
.text:0000000000002080 loc_2080:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002080                                         ; DATA XREF: .rodata:jpt_207A↓o
.text:0000000000002080                 xor     r10d, r10d      ; jumptable 00000000000126DA case 92
.text:0000000000002083                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000002088                 jnz     loc_1E7E
.text:000000000000208E                 xchg    ax, ax
.text:0000000000002090
.text:0000000000002090 loc_2090:                               ; CODE XREF: quotearg_buffer_restyled+378↑j
.text:0000000000002090                                         ; quotearg_buffer_restyled+383↑j
.text:0000000000002090                 mov     edx, 5Ch ; '\'
.text:0000000000002095                 mov     ebx, 5Ch ; '\'
.text:000000000000209A                 jmp     loc_1E34
.text:000000000000209A ; ---------------------------------------------------------------------------
.text:000000000000209F                 align 20h
.text:00000000000020A0
.text:00000000000020A0 loc_20A0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000020A0                                         ; DATA XREF: .rodata:jpt_207A↓o
.text:00000000000020A0                 mov     edx, 0Ch        ; jumptable 00000000000126DA case 12
.text:00000000000020A5                 xor     r10d, r10d
.text:00000000000020A8                 mov     ebx, 66h ; 'f'
.text:00000000000020AD                 jmp     loc_1E34
.text:00000000000020AD ; ---------------------------------------------------------------------------
.text:00000000000020B2                 align 8
.text:00000000000020B8
.text:00000000000020B8 loc_20B8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000020B8                                         ; DATA XREF: .rodata:jpt_207A↓o
.text:00000000000020B8                 mov     edx, 0Ah        ; jumptable 00000000000126DA case 10
.text:00000000000020BD                 xor     r10d, r10d
.text:00000000000020C0                 mov     ebx, 6Eh ; 'n'
.text:00000000000020C5                 jmp     loc_1E22
.text:00000000000020C5 ; ---------------------------------------------------------------------------
.text:00000000000020CA                 align 10h
.text:00000000000020D0
.text:00000000000020D0 loc_20D0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000020D0                                         ; DATA XREF: .rodata:jpt_207A↓o
.text:00000000000020D0                 mov     ebx, 61h ; 'a'  ; jumptable 00000000000126DA case 7
.text:00000000000020D5                 jmp     loc_1EA0
.text:00000000000020D5 ; ---------------------------------------------------------------------------
.text:00000000000020DA                 align 20h
.text:00000000000020E0
.text:00000000000020E0 loc_20E0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000020E0                                         ; DATA XREF: .rodata:jpt_207A↓o
.text:00000000000020E0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 0
.text:00000000000020E3
.text:00000000000020E3 loc_20E3:                               ; CODE XREF: quotearg_buffer_restyled+415↑j
.text:00000000000020E3                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000020E8                 setz    dl
.text:00000000000020EB                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000020F0                 jnz     loc_2C8A
.text:00000000000020F6                 mov     eax, r8d
.text:00000000000020F9                 mov     rcx, r15
.text:00000000000020FC                 xor     eax, 1
.text:00000000000020FF                 and     al, dl
.text:0000000000002101                 jz      short loc_2130
.text:0000000000002103                 cmp     r13, r15
.text:0000000000002106                 jbe     short loc_210D
.text:0000000000002108                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000210D
.text:000000000000210D loc_210D:                               ; CODE XREF: quotearg_buffer_restyled+606↑j
.text:000000000000210D                 lea     rcx, [r15+1]
.text:0000000000002111                 cmp     r13, rcx
.text:0000000000002114                 jbe     short loc_211C
.text:0000000000002116                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:000000000000211C
.text:000000000000211C loc_211C:                               ; CODE XREF: quotearg_buffer_restyled+614↑j
.text:000000000000211C                 lea     rcx, [r15+2]
.text:0000000000002120                 cmp     r13, rcx
.text:0000000000002123                 ja      loc_2759
.text:0000000000002129
.text:0000000000002129 loc_2129:                               ; CODE XREF: quotearg_buffer_restyled+C5F↓j
.text:0000000000002129                 lea     rcx, [r15+3]
.text:000000000000212D                 mov     r8d, eax
.text:0000000000002130
.text:0000000000002130 loc_2130:                               ; CODE XREF: quotearg_buffer_restyled+601↑j
.text:0000000000002130                 cmp     r13, rcx
.text:0000000000002133                 jbe     short loc_213A
.text:0000000000002135                 mov     byte ptr [r14+rcx], 5Ch ; '\'
.text:000000000000213A
.text:000000000000213A loc_213A:                               ; CODE XREF: quotearg_buffer_restyled+633↑j
.text:000000000000213A                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000213F                 lea     r15, [rcx+1]
.text:0000000000002143                 jz      loc_2749
.text:0000000000002149                 lea     rax, [rbp+1]
.text:000000000000214D                 cmp     rax, r11
.text:0000000000002150                 jnb     short loc_216B
.text:0000000000002152                 mov     rax, [rsp+0E8h+s]
.text:0000000000002157                 movzx   eax, byte ptr [rax+rbp+1]
.text:000000000000215C                 mov     byte ptr [rsp+0E8h+ps], al
.text:0000000000002160                 sub     eax, 30h ; '0'
.text:0000000000002163                 cmp     al, 9
.text:0000000000002165                 jbe     loc_2999
.text:000000000000216B
.text:000000000000216B loc_216B:                               ; CODE XREF: quotearg_buffer_restyled+650↑j
.text:000000000000216B                 mov     eax, r12d
.text:000000000000216E                 mov     ebx, 30h ; '0'
.text:0000000000002173                 xor     r12d, r12d
.text:0000000000002176                 jmp     loc_1D28
.text:0000000000002176 ; ---------------------------------------------------------------------------
.text:000000000000217B                 align 20h
.text:0000000000002180
.text:0000000000002180 loc_2180:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002180                                         ; DATA XREF: .rodata:jpt_207A↓o
.text:0000000000002180                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 37,43-58,65-90,93,95,97-122
.text:0000000000002185                 mov     r12d, r10d
.text:0000000000002188                 setz    dl
.text:000000000000218B                 xor     r10d, r10d
.text:000000000000218E                 xor     eax, eax
.text:0000000000002190                 jmp     loc_1D28
.text:0000000000002190 ; ---------------------------------------------------------------------------
.text:0000000000002195                 align 8
.text:0000000000002198
.text:0000000000002198 loc_2198:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002198                                         ; DATA XREF: .rodata:jpt_207A↓o
.text:0000000000002198                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 35,126
.text:000000000000219D                 setz    dl
.text:00000000000021A0                 xor     r10d, r10d
.text:00000000000021A3                 jmp     loc_1F68
.text:00000000000021A3 ; ---------------------------------------------------------------------------
.text:00000000000021A8                 align 10h
.text:00000000000021B0
.text:00000000000021B0 loc_21B0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000021B0                                         ; DATA XREF: .rodata:jpt_207A↓o
.text:00000000000021B0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:00000000000021B5                 setz    dl
.text:00000000000021B8                 xor     r10d, r10d
.text:00000000000021BB                 xor     r12d, r12d
.text:00000000000021BE                 jmp     loc_1F71
.text:00000000000021BE ; ---------------------------------------------------------------------------
.text:00000000000021C3                 align 8
.text:00000000000021C8
.text:00000000000021C8 loc_21C8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000021C8                                         ; DATA XREF: .rodata:jpt_207A↓o
.text:00000000000021C8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA case 32
.text:00000000000021CD                 mov     r12d, r10d
.text:00000000000021D0                 mov     ebx, 20h ; ' '
.text:00000000000021D5                 setz    dl
.text:00000000000021D8                 xor     r10d, r10d
.text:00000000000021DB                 jmp     loc_1F71
.text:00000000000021E0 ; ---------------------------------------------------------------------------
.text:00000000000021E0
.text:00000000000021E0 loc_21E0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000021E0                                         ; DATA XREF: .rodata:jpt_207A↓o
.text:00000000000021E0                 mov     edx, 0Dh        ; jumptable 00000000000126DA case 13
.text:00000000000021E5                 xor     r10d, r10d
.text:00000000000021E8                 mov     ebx, 72h ; 'r'
.text:00000000000021ED                 jmp     loc_1E22
.text:00000000000021ED ; ---------------------------------------------------------------------------
.text:00000000000021F2                 align 8
.text:00000000000021F8
.text:00000000000021F8 loc_21F8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000021F8                                         ; DATA XREF: .rodata:jpt_207A↓o
.text:00000000000021F8                 mov     ebx, 76h ; 'v'  ; jumptable 00000000000126DA case 11
.text:00000000000021FD                 jmp     loc_1EA0
.text:00000000000021FD ; ---------------------------------------------------------------------------
.text:0000000000002202                 align 8
.text:0000000000002208
.text:0000000000002208 loc_2208:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002208                                         ; DATA XREF: .rodata:jpt_207A↓o
.text:0000000000002208                 mov     edx, 9          ; jumptable 00000000000126DA case 9
.text:000000000000220D                 xor     r10d, r10d
.text:0000000000002210                 mov     ebx, 74h ; 't'
.text:0000000000002215                 jmp     loc_1E22
.text:0000000000002215 ; ---------------------------------------------------------------------------
.text:000000000000221A                 align 20h
.text:0000000000002220
.text:0000000000002220 loc_2220:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002220                                         ; DATA XREF: .rodata:jpt_207A↓o
.text:0000000000002220                 mov     ebx, 62h ; 'b'  ; jumptable 00000000000126DA case 8
.text:0000000000002225                 jmp     loc_1EA0
.text:0000000000002225 ; ---------------------------------------------------------------------------
.text:000000000000222A                 align 10h
.text:0000000000002230
.text:0000000000002230 loc_2230:                               ; CODE XREF: quotearg_buffer_restyled+178↑j
.text:0000000000002230                                         ; quotearg_buffer_restyled+1B1↑j
.text:0000000000002230                 xor     r10d, r10d
.text:0000000000002233                 jmp     loc_1CD0
.text:0000000000002233 ; ---------------------------------------------------------------------------
.text:0000000000002238                 align 20h
.text:0000000000002240
.text:0000000000002240 loc_2240:                               ; CODE XREF: quotearg_buffer_restyled+36D↑j
.text:0000000000002240                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002245                 jnz     loc_2BB0
.text:000000000000224B
.text:000000000000224B loc_224B:                               ; CODE XREF: quotearg_buffer_restyled+38F↑j
.text:000000000000224B                 add     rbp, 1
.text:000000000000224F                 mov     eax, r8d
.text:0000000000002252                 xor     r12d, r12d
.text:0000000000002255                 mov     ebx, 5Ch ; '\'
.text:000000000000225A                 jmp     loc_1D6C
.text:000000000000225A ; ---------------------------------------------------------------------------
.text:000000000000225F                 align 20h
.text:0000000000002260
.text:0000000000002260 loc_2260:                               ; CODE XREF: quotearg_buffer_restyled+105↑j
.text:0000000000002260                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002265                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000226A                 mov     r12d, r8d
.text:000000000000226D                 mov     rbp, r11
.text:0000000000002270                 setz    dl
.text:0000000000002273                 mov     eax, ebx
.text:0000000000002275                 test    r15, r15
.text:0000000000002278                 setz    cl
.text:000000000000227B                 and     eax, edx
.text:000000000000227D                 and     al, cl
.text:000000000000227F                 jnz     loc_2CE6
.text:0000000000002285                 mov     eax, ebx
.text:0000000000002287                 xor     eax, 1
.text:000000000000228A                 and     dl, al
.text:000000000000228C                 jz      loc_2BFC
.text:0000000000002292                 cmp     [rsp+0E8h+var_6C], 0
.text:0000000000002297                 jz      loc_2BFA
.text:000000000000229D                 cmp     [rsp+0E8h+var_DA], 0
.text:00000000000022A2                 jnz     loc_2C9D
.text:00000000000022A8                 test    r13, r13
.text:00000000000022AB                 setz    al
.text:00000000000022AE                 cmp     [rsp+0E8h+var_98], 0
.text:00000000000022B4                 setnz   dl
.text:00000000000022B7                 and     al, dl
.text:00000000000022B9                 jz      loc_2CDC
.text:00000000000022BF                 mov     r13, [rsp+0E8h+var_98]
.text:00000000000022C4
.text:00000000000022C4 loc_22C4:                               ; CODE XREF: quotearg_buffer_restyled+121D↓j
.text:00000000000022C4                 lea     rbx, asc_4655   ; "'"
.text:00000000000022CB                 mov     byte ptr [r14], 27h ; '''
.text:00000000000022CF                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000022D7                 mov     r15d, 1
.text:00000000000022DD                 mov     [rsp+0E8h+n], 1
.text:00000000000022E6                 mov     [rsp+0E8h+var_D9], 0
.text:00000000000022EB                 mov     [rsp+0E8h+s2], rbx
.text:00000000000022F0                 mov     [rsp+0E8h+var_6C], al
.text:00000000000022F4                 jmp     loc_1BD3
.text:00000000000022F4 ; ---------------------------------------------------------------------------
.text:00000000000022F9                 align 20h
.text:0000000000002300
.text:0000000000002300 loc_2300:                               ; CODE XREF: quotearg_buffer_restyled+2F8↑j
.text:0000000000002300                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002305                 jnz     loc_2BB0
.text:000000000000230B                 test    r13, r13
.text:000000000000230E                 jz      loc_2710
.text:0000000000002314                 xor     edx, edx
.text:0000000000002316                 cmp     [rsp+0E8h+var_98], 0
.text:000000000000231C                 jnz     loc_2710
.text:0000000000002322
.text:0000000000002322 loc_2322:                               ; CODE XREF: quotearg_buffer_restyled+C44↓j
.text:0000000000002322                                         ; quotearg_buffer_restyled+122A↓j
.text:0000000000002322                 mov     [rsp+0E8h+var_98], r13
.text:0000000000002327                 add     r15, 3
.text:000000000000232B                 xor     eax, eax
.text:000000000000232D                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000002332                 xor     r8d, r8d
.text:0000000000002335                 mov     r13, rdx
.text:0000000000002338                 mov     ebx, 27h ; '''
.text:000000000000233D                 jmp     loc_1D59
.text:000000000000233D ; ---------------------------------------------------------------------------
.text:0000000000002342                 align 8
.text:0000000000002348
.text:0000000000002348 loc_2348:                               ; CODE XREF: quotearg_buffer_restyled+2D3↑j
.text:0000000000002348                 test    byte ptr [rsp+0E8h+var_70], 4
.text:000000000000234D                 jz      short loc_2370
.text:000000000000234F                 lea     rcx, [rbp+2]
.text:0000000000002353                 cmp     rcx, r11
.text:0000000000002356                 jnb     short loc_2370
.text:0000000000002358                 mov     rax, [rsp+0E8h+s]
.text:000000000000235D                 cmp     byte ptr [rax+rbp+1], 3Fh ; '?'
.text:0000000000002362                 jz      loc_2AF2
.text:0000000000002368                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000002370
.text:0000000000002370 loc_2370:                               ; CODE XREF: quotearg_buffer_restyled+84D↑j
.text:0000000000002370                                         ; quotearg_buffer_restyled+856↑j ...
.text:0000000000002370                 xor     edx, edx
.text:0000000000002372                 xor     r12d, r12d
.text:0000000000002375                 xor     eax, eax
.text:0000000000002377                 mov     ebx, 3Fh ; '?'
.text:000000000000237C                 jmp     loc_1D28
.text:000000000000237C ; ---------------------------------------------------------------------------
.text:0000000000002381                 align 8
.text:0000000000002388
.text:0000000000002388 loc_2388:                               ; CODE XREF: quotearg_buffer_restyled+2CA↑j
.text:0000000000002388                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000238D                 jnz     loc_2BB0
.text:0000000000002393                 xor     r12d, r12d
.text:0000000000002396                 xor     eax, eax
.text:0000000000002398                 mov     ebx, 3Fh ; '?'
.text:000000000000239D                 jmp     loc_1D59
.text:000000000000239D ; ---------------------------------------------------------------------------
.text:00000000000023A2                 align 8
.text:00000000000023A8
.text:00000000000023A8 loc_23A8:                               ; CODE XREF: quotearg_buffer_restyled+4FE↑j
.text:00000000000023A8                 lea     rax, [rsp+0E8h+var_48]
.text:00000000000023B0                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:00000000000023B4                 mov     [rsp+0E8h+var_48], 0
.text:00000000000023C0                 mov     [rsp+0E8h+ps], rax
.text:00000000000023C5                 jnz     short loc_23F4
.text:00000000000023C7                 mov     rdi, [rsp+0E8h+s] ; s
.text:00000000000023CC                 mov     byte ptr [rsp+0E8h+var_A8], r8b
.text:00000000000023D1                 mov     byte ptr [rsp+0E8h+var_B0], r10b
.text:00000000000023D6                 mov     [rsp+0E8h+var_B8], r9
.text:00000000000023DB                 call    _strlen
.text:00000000000023E0                 movzx   r8d, byte ptr [rsp+0E8h+var_A8]
.text:00000000000023E6                 movzx   r10d, byte ptr [rsp+0E8h+var_B0]
.text:00000000000023EC                 mov     r11, rax
.text:00000000000023EF                 mov     r9, [rsp+0E8h+var_B8]
.text:00000000000023F4
.text:00000000000023F4 loc_23F4:                               ; CODE XREF: quotearg_buffer_restyled+8C5↑j
.text:00000000000023F4                 lea     rax, [rsp+0E8h+wc]
.text:00000000000023FC                 xor     ecx, ecx
.text:00000000000023FE                 mov     [rsp+0E8h+var_6A], bl
.text:0000000000002402                 mov     [rsp+0E8h+var_6B], r8b
.text:0000000000002407                 mov     rbx, rcx
.text:000000000000240A                 mov     [rsp+0E8h+var_60], r9
.text:0000000000002412                 mov     [rsp+0E8h+var_B0], rax
.text:0000000000002417                 mov     [rsp+0E8h+var_69], r10b
.text:000000000000241C                 mov     [rsp+0E8h+var_68], r15
.text:0000000000002424                 mov     [rsp+0E8h+var_A8], r14
.text:0000000000002429                 mov     [rsp+0E8h+var_78], r13
.text:000000000000242E                 mov     [rsp+0E8h+var_B8], r11
.text:0000000000002433
.text:0000000000002433 loc_2433:                               ; CODE XREF: quotearg_buffer_restyled+9AF↓j
.text:0000000000002433                 mov     rax, [rsp+0E8h+s]
.text:0000000000002438                 lea     r14, [rbp+rbx+0]
.text:000000000000243D                 mov     rdx, [rsp+0E8h+var_B8]
.text:0000000000002442                 mov     rcx, [rsp+0E8h+ps]
.text:0000000000002447                 mov     rdi, [rsp+0E8h+var_B0]
.text:000000000000244C                 lea     r13, [rax+r14]
.text:0000000000002450                 sub     rdx, r14
.text:0000000000002453                 mov     rsi, r13
.text:0000000000002456                 call    rpl_mbrtowc
.text:000000000000245B                 test    rax, rax
.text:000000000000245E                 mov     r15, rax
.text:0000000000002461                 jz      short loc_24B1
.text:0000000000002463                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000002467                 jz      loc_2A85
.text:000000000000246D                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000002471                 jz      loc_2A11
.text:0000000000002477                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000247C                 setz    al
.text:000000000000247F                 and     al, [rsp+0E8h+var_D9]
.text:0000000000002483                 jnz     loc_2620
.text:0000000000002489
.text:0000000000002489 loc_2489:                               ; CODE XREF: quotearg_buffer_restyled+B24↓j
.text:0000000000002489                                         ; quotearg_buffer_restyled+B47↓j
.text:0000000000002489                 mov     edi, [rsp+0E8h+wc] ; wc
.text:0000000000002490                 call    _iswprint
.text:0000000000002495                 mov     rdi, [rsp+0E8h+ps] ; ps
.text:000000000000249A                 test    eax, eax
.text:000000000000249C                 mov     eax, 0
.text:00000000000024A1                 cmovz   r12d, eax
.text:00000000000024A5                 add     rbx, r15
.text:00000000000024A8                 call    _mbsinit
.text:00000000000024AD                 test    eax, eax
.text:00000000000024AF                 jz      short loc_2433
.text:00000000000024B1
.text:00000000000024B1 loc_24B1:                               ; CODE XREF: quotearg_buffer_restyled+961↑j
.text:00000000000024B1                 mov     edx, r12d
.text:00000000000024B4                 mov     rdi, rbx
.text:00000000000024B7                 movzx   r8d, [rsp+0E8h+var_6B]
.text:00000000000024BD                 xor     edx, 1
.text:00000000000024C0                 movzx   ebx, [rsp+0E8h+var_6A]
.text:00000000000024C5                 movzx   r10d, [rsp+0E8h+var_69]
.text:00000000000024CB                 and     dl, [rsp+0E8h+var_DB]
.text:00000000000024CF                 mov     r15, [rsp+0E8h+var_68]
.text:00000000000024D7                 mov     r14, [rsp+0E8h+var_A8]
.text:00000000000024DC                 mov     r13, [rsp+0E8h+var_78]
.text:00000000000024E1                 mov     r11, [rsp+0E8h+var_B8]
.text:00000000000024E6
.text:00000000000024E6 loc_24E6:                               ; CODE XREF: quotearg_buffer_restyled+F80↓j
.text:00000000000024E6                                         ; quotearg_buffer_restyled+FB8↓j
.text:00000000000024E6                 cmp     rdi, 1
.text:00000000000024EA                 jbe     loc_2AEB
.text:00000000000024F0
.text:00000000000024F0 loc_24F0:                               ; CODE XREF: quotearg_buffer_restyled+EE9↓j
.text:00000000000024F0                 mov     rcx, rdi
.text:00000000000024F3                 xor     esi, esi
.text:00000000000024F5                 movzx   r9d, [rsp+0E8h+var_D9]
.text:00000000000024FB                 add     rcx, rbp
.text:00000000000024FE                 mov     rdi, [rsp+0E8h+s]
.text:0000000000002503                 jmp     loc_25BE
.text:0000000000002503 ; ---------------------------------------------------------------------------
.text:0000000000002508                 align 10h
.text:0000000000002510
.text:0000000000002510 loc_2510:                               ; CODE XREF: quotearg_buffer_restyled+AC0↓j
.text:0000000000002510                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002515                 setz    al
.text:0000000000002518                 test    r9b, r9b
.text:000000000000251B                 jnz     loc_29D0
.text:0000000000002521                 mov     esi, r8d
.text:0000000000002524                 xor     esi, 1
.text:0000000000002527                 and     al, sil
.text:000000000000252A                 jz      short loc_255B
.text:000000000000252C                 cmp     r13, r15
.text:000000000000252F                 jbe     short loc_2536
.text:0000000000002531                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000002536
.text:0000000000002536 loc_2536:                               ; CODE XREF: quotearg_buffer_restyled+A2F↑j
.text:0000000000002536                 lea     rsi, [r15+1]
.text:000000000000253A                 cmp     r13, rsi
.text:000000000000253D                 jbe     short loc_2545
.text:000000000000253F                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000002545
.text:0000000000002545 loc_2545:                               ; CODE XREF: quotearg_buffer_restyled+A3D↑j
.text:0000000000002545                 lea     rsi, [r15+2]
.text:0000000000002549                 cmp     r13, rsi
.text:000000000000254C                 jbe     short loc_2554
.text:000000000000254E                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000002554
.text:0000000000002554 loc_2554:                               ; CODE XREF: quotearg_buffer_restyled+A4C↑j
.text:0000000000002554                 add     r15, 3
.text:0000000000002558                 mov     r8d, eax
.text:000000000000255B
.text:000000000000255B loc_255B:                               ; CODE XREF: quotearg_buffer_restyled+A2A↑j
.text:000000000000255B                 cmp     r13, r15
.text:000000000000255E                 jbe     short loc_2565
.text:0000000000002560                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000002565
.text:0000000000002565 loc_2565:                               ; CODE XREF: quotearg_buffer_restyled+A5E↑j
.text:0000000000002565                 lea     rax, [r15+1]
.text:0000000000002569                 cmp     r13, rax
.text:000000000000256C                 jbe     short loc_257B
.text:000000000000256E                 mov     eax, ebx
.text:0000000000002570                 shr     al, 6
.text:0000000000002573                 add     eax, 30h ; '0'
.text:0000000000002576                 mov     [r14+r15+1], al
.text:000000000000257B
.text:000000000000257B loc_257B:                               ; CODE XREF: quotearg_buffer_restyled+A6C↑j
.text:000000000000257B                 lea     rax, [r15+2]
.text:000000000000257F                 cmp     r13, rax
.text:0000000000002582                 jbe     short loc_2594
.text:0000000000002584                 mov     eax, ebx
.text:0000000000002586                 shr     al, 3
.text:0000000000002589                 and     eax, 7
.text:000000000000258C                 add     eax, 30h ; '0'
.text:000000000000258F                 mov     [r14+r15+2], al
.text:0000000000002594
.text:0000000000002594 loc_2594:                               ; CODE XREF: quotearg_buffer_restyled+A82↑j
.text:0000000000002594                 and     ebx, 7
.text:0000000000002597                 add     rbp, 1
.text:000000000000259B                 add     r15, 3
.text:000000000000259F                 add     ebx, 30h ; '0'
.text:00000000000025A2                 cmp     rbp, rcx
.text:00000000000025A5                 jnb     loc_1D90
.text:00000000000025AB                 mov     esi, edx
.text:00000000000025AD
.text:00000000000025AD loc_25AD:                               ; CODE XREF: quotearg_buffer_restyled+B19↓j
.text:00000000000025AD                                         ; quotearg_buffer_restyled+EF1↓j
.text:00000000000025AD                 cmp     r13, r15
.text:00000000000025B0                 jbe     short loc_25B6
.text:00000000000025B2                 mov     [r14+r15], bl
.text:00000000000025B6
.text:00000000000025B6 loc_25B6:                               ; CODE XREF: quotearg_buffer_restyled+AB0↑j
.text:00000000000025B6                 movzx   ebx, byte ptr [rdi+rbp]
.text:00000000000025BA                 add     r15, 1
.text:00000000000025BE
.text:00000000000025BE loc_25BE:                               ; CODE XREF: quotearg_buffer_restyled+A03↑j
.text:00000000000025BE                 test    dl, dl
.text:00000000000025C0                 jnz     loc_2510
.text:00000000000025C6                 mov     eax, esi
.text:00000000000025C8                 xor     eax, 1
.text:00000000000025CB                 and     eax, r8d
.text:00000000000025CE                 test    r10b, r10b
.text:00000000000025D1                 jz      short loc_25E1
.text:00000000000025D3                 cmp     r13, r15
.text:00000000000025D6                 jbe     short loc_25DD
.text:00000000000025D8                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:00000000000025DD
.text:00000000000025DD loc_25DD:                               ; CODE XREF: quotearg_buffer_restyled+AD6↑j
.text:00000000000025DD                 add     r15, 1
.text:00000000000025E1
.text:00000000000025E1 loc_25E1:                               ; CODE XREF: quotearg_buffer_restyled+AD1↑j
.text:00000000000025E1                 add     rbp, 1
.text:00000000000025E5                 cmp     rbp, rcx
.text:00000000000025E8                 jnb     loc_1D6C
.text:00000000000025EE                 test    al, al
.text:00000000000025F0                 jz      loc_29EE
.text:00000000000025F6                 cmp     r13, r15
.text:00000000000025F9                 jbe     short loc_2600
.text:00000000000025FB                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000002600
.text:0000000000002600 loc_2600:                               ; CODE XREF: quotearg_buffer_restyled+AF9↑j
.text:0000000000002600                 lea     rax, [r15+1]
.text:0000000000002604                 cmp     r13, rax
.text:0000000000002607                 jbe     short loc_260F
.text:0000000000002609                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:000000000000260F
.text:000000000000260F loc_260F:                               ; CODE XREF: quotearg_buffer_restyled+B07↑j
.text:000000000000260F                 add     r15, 2
.text:0000000000002613                 xor     r10d, r10d
.text:0000000000002616                 xor     r8d, r8d
.text:0000000000002619                 jmp     short loc_25AD
.text:0000000000002619 ; ---------------------------------------------------------------------------
.text:000000000000261B                 align 20h
.text:0000000000002620
.text:0000000000002620 loc_2620:                               ; CODE XREF: quotearg_buffer_restyled+983↑j
.text:0000000000002620                 cmp     r15, 1
.text:0000000000002624                 jz      loc_2489
.text:000000000000262A                 mov     rdi, [rsp+0E8h+s]
.text:000000000000262F                 lea     rcx, [rdi+r15]
.text:0000000000002633                 lea     rdx, [rdi+r14+1]
.text:0000000000002638                 lea     r8, [rcx+r14]
.text:000000000000263C                 jmp     short loc_264D
.text:000000000000263C ; ---------------------------------------------------------------------------
.text:000000000000263E                 align 20h
.text:0000000000002640
.text:0000000000002640 loc_2640:                               ; CODE XREF: quotearg_buffer_restyled+B56↓j
.text:0000000000002640                                         ; quotearg_buffer_restyled+B70↓j
.text:0000000000002640                 add     rdx, 1
.text:0000000000002644                 cmp     r8, rdx
.text:0000000000002647                 jz      loc_2489
.text:000000000000264D
.text:000000000000264D loc_264D:                               ; CODE XREF: quotearg_buffer_restyled+B3C↑j
.text:000000000000264D                 movzx   ecx, byte ptr [rdx]
.text:0000000000002650                 sub     ecx, 5Bh ; '['
.text:0000000000002653                 cmp     cl, 21h ; '!'
.text:0000000000002656                 ja      short loc_2640
.text:0000000000002658                 mov     esi, 1
.text:000000000000265D                 shl     rsi, cl
.text:0000000000002660                 mov     rcx, rsi
.text:0000000000002663                 mov     rsi, 20000002Bh
.text:000000000000266D                 test    rcx, rsi
.text:0000000000002670                 jz      short loc_2640
.text:0000000000002672                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000002677                 mov     r13, [rsp+0E8h+var_78]
.text:000000000000267C                 mov     rbp, [rsp+0E8h+var_B8]
.text:0000000000002681                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000002689
.text:0000000000002689 loc_2689:                               ; CODE XREF: quotearg_buffer_restyled+489↑j
.text:0000000000002689                                         ; quotearg_buffer_restyled+C0B↓j ...
.text:0000000000002689                 cmp     [rsp+0E8h+var_DB], 0
.text:000000000000268E                 jz      short loc_26A0
.text:0000000000002690                 test    al, al
.text:0000000000002692                 mov     eax, 4
.text:0000000000002697                 cmovz   eax, [rsp+0E8h+var_E0]
.text:000000000000269C                 mov     [rsp+0E8h+var_E0], eax
.text:00000000000026A0
.text:00000000000026A0 loc_26A0:                               ; CODE XREF: quotearg_buffer_restyled+B8E↑j
.text:00000000000026A0                                         ; quotearg_buffer_restyled+1205↓j
.text:00000000000026A0                 sub     rsp, 8
.text:00000000000026A4                 mov     rcx, rbp
.text:00000000000026A7                 mov     rsi, r13
.text:00000000000026AA                 push    [rsp+0F0h+var_88]
.text:00000000000026AE                 push    [rsp+0F8h+var_80]
.text:00000000000026B2                 mov     rdi, r14
.text:00000000000026B5                 push    0
.text:00000000000026B7                 mov     r9d, [rsp+108h+var_70]
.text:00000000000026BF                 mov     r8d, [rsp+108h+var_E0]
.text:00000000000026C4                 mov     rdx, [rsp+108h+s]
.text:00000000000026C9                 and     r9d, 0FFFFFFFDh
.text:00000000000026CD                 call    quotearg_buffer_restyled
.text:00000000000026D2                 add     rsp, 20h
.text:00000000000026D6                 mov     r15, rax
.text:00000000000026D9
.text:00000000000026D9 loc_26D9:                               ; CODE XREF: quotearg_buffer_restyled+1135↓j
.text:00000000000026D9                                         ; quotearg_buffer_restyled+1140↓j ...
.text:00000000000026D9                 mov     rbx, [rsp+0E8h+var_40]
.text:00000000000026E1                 xor     rbx, fs:28h
.text:00000000000026EA                 mov     rax, r15
.text:00000000000026ED                 jnz     loc_2CF3
.text:00000000000026F3                 add     rsp, 0B8h
.text:00000000000026FA                 pop     rbx
.text:00000000000026FB                 pop     rbp
.text:00000000000026FC                 pop     r12
.text:00000000000026FE                 pop     r13
.text:0000000000002700                 pop     r14
.text:0000000000002702                 pop     r15
.text:0000000000002704                 retn
.text:0000000000002704 ; ---------------------------------------------------------------------------
.text:0000000000002705                 align 8
.text:0000000000002708
.text:0000000000002708 loc_2708:                               ; CODE XREF: quotearg_buffer_restyled+3B2↑j
.text:0000000000002708                 mov     rbp, r11
.text:000000000000270B                 jmp     loc_2689
.text:0000000000002710 ; ---------------------------------------------------------------------------
.text:0000000000002710
.text:0000000000002710 loc_2710:                               ; CODE XREF: quotearg_buffer_restyled+80E↑j
.text:0000000000002710                                         ; quotearg_buffer_restyled+81C↑j
.text:0000000000002710                 cmp     r13, r15
.text:0000000000002713                 jbe     short loc_271A
.text:0000000000002715                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000271A
.text:000000000000271A loc_271A:                               ; CODE XREF: quotearg_buffer_restyled+C13↑j
.text:000000000000271A                 lea     rax, [r15+1]
.text:000000000000271E                 cmp     r13, rax
.text:0000000000002721                 jbe     short loc_2729
.text:0000000000002723                 mov     byte ptr [r14+r15+1], 5Ch ; '\'
.text:0000000000002729
.text:0000000000002729 loc_2729:                               ; CODE XREF: quotearg_buffer_restyled+C21↑j
.text:0000000000002729                 lea     rax, [r15+2]
.text:000000000000272D                 cmp     r13, rax
.text:0000000000002730                 jbe     loc_2D22
.text:0000000000002736                 mov     rdx, r13
.text:0000000000002739                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000273F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000002744                 jmp     loc_2322
.text:0000000000002749 ; ---------------------------------------------------------------------------
.text:0000000000002749
.text:0000000000002749 loc_2749:                               ; CODE XREF: quotearg_buffer_restyled+643↑j
.text:0000000000002749                 mov     eax, r12d
.text:000000000000274C                 mov     ebx, 30h ; '0'
.text:0000000000002751                 xor     r12d, r12d
.text:0000000000002754                 jmp     loc_1D59
.text:0000000000002759 ; ---------------------------------------------------------------------------
.text:0000000000002759
.text:0000000000002759 loc_2759:                               ; CODE XREF: quotearg_buffer_restyled+623↑j
.text:0000000000002759                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000275F                 jmp     loc_2129
.text:0000000000002764 ; ---------------------------------------------------------------------------
.text:0000000000002764
.text:0000000000002764 loc_2764:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002764                                         ; DATA XREF: .rodata:jpt_1B91↓o
.text:0000000000002764                 test    ebx, ebx        ; jumptable 00000000000121F1 case 4
.text:0000000000002766                 jnz     loc_1B93        ; jumptable 00000000000121F1 case 1
.text:000000000000276C                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002771
.text:0000000000002771 loc_2771:                               ; CODE XREF: quotearg_buffer_restyled+11FD↓j
.text:0000000000002771                 test    r13, r13
.text:0000000000002774                 jnz     loc_2D0A
.text:000000000000277A                 lea     rax, asc_4655   ; "'"
.text:0000000000002781                 mov     [rsp+0E8h+var_98], 0
.text:000000000000278A                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000278F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002794                 xor     r12d, r12d
.text:0000000000002797                 mov     [rsp+0E8h+var_D9], 0
.text:000000000000279C                 mov     [rsp+0E8h+n], 1
.text:00000000000027A5                 mov     [rsp+0E8h+s2], rax
.text:00000000000027AA                 mov     r15d, 1
.text:00000000000027B0                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000027B8                 jmp     loc_1BD3
.text:00000000000027B8 ; ---------------------------------------------------------------------------
.text:00000000000027BD                 align 20h
.text:00000000000027C0
.text:00000000000027C0 loc_27C0:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000027C0                                         ; DATA XREF: .rodata:jpt_1B91↓o
.text:00000000000027C0                 test    ebx, ebx        ; jumptable 00000000000121F1 case 5
.text:00000000000027C2                 jnz     loc_2BBD
.text:00000000000027C8                 test    r13, r13
.text:00000000000027CB                 jz      loc_29F6
.text:00000000000027D1                 mov     byte ptr [r14], 22h ; '"'
.text:00000000000027D5                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000027DA                 xor     r12d, r12d
.text:00000000000027DD                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000027E2                 mov     [rsp+0E8h+var_98], 0
.text:00000000000027EB
.text:00000000000027EB loc_27EB:                               ; CODE XREF: quotearg_buffer_restyled+F0C↓j
.text:00000000000027EB                 lea     rax, unk_4653
.text:00000000000027F2                 mov     [rsp+0E8h+var_D9], 0
.text:00000000000027F7                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000027FC                 mov     [rsp+0E8h+n], 1
.text:0000000000002805                 mov     r15d, 1
.text:000000000000280B                 mov     [rsp+0E8h+s2], rax
.text:0000000000002810                 jmp     loc_1BD3
.text:0000000000002815 ; ---------------------------------------------------------------------------
.text:0000000000002815
.text:0000000000002815 loc_2815:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002815                                         ; DATA XREF: .rodata:jpt_1B91↓o
.text:0000000000002815                 lea     rax, unk_4653   ; jumptable 00000000000121F1 case 6
.text:000000000000281C                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002821                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002826                 xor     r12d, r12d
.text:0000000000002829                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002832                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000002837                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000283C                 mov     [rsp+0E8h+n], 1
.text:0000000000002845                 xor     r15d, r15d
.text:0000000000002848                 mov     [rsp+0E8h+s2], rax
.text:000000000000284D                 mov     [rsp+0E8h+var_E0], 5
.text:0000000000002855                 jmp     loc_1BD3
.text:000000000000285A ; ---------------------------------------------------------------------------
.text:000000000000285A
.text:000000000000285A loc_285A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000285A                                         ; DATA XREF: .rodata:jpt_1B91↓o
.text:000000000000285A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 7
.text:000000000000285F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002864                 xor     r12d, r12d
.text:0000000000002867                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002870                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000002875                 xor     r15d, r15d
.text:0000000000002878                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000287D                 mov     [rsp+0E8h+n], 0
.text:0000000000002886                 mov     [rsp+0E8h+s2], 0
.text:000000000000288F                 jmp     loc_1BD3
.text:0000000000002894 ; ---------------------------------------------------------------------------
.text:0000000000002894
.text:0000000000002894 loc_2894:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002894                                         ; DATA XREF: .rodata:jpt_1B91↓o
.text:0000000000002894                 cmp     [rsp+0E8h+var_E0], 0Ah ; jumptable 00000000000121F1 cases 8-10
.text:0000000000002899                 jz      short loc_28F1
.text:000000000000289B                 lea     rsi, asc_4657   ; "`"
.text:00000000000028A2                 xor     edi, edi        ; domainname
.text:00000000000028A4                 mov     edx, 5          ; category
.text:00000000000028A9                 call    _dcgettext
.text:00000000000028AE                 mov     rcx, rax
.text:00000000000028B1                 mov     [rsp+0E8h+var_80], rax
.text:00000000000028B6                 lea     rax, asc_4657   ; "`"
.text:00000000000028BD                 cmp     rcx, rax
.text:00000000000028C0                 jz      loc_2C5E
.text:00000000000028C6
.text:00000000000028C6 loc_28C6:                               ; CODE XREF: quotearg_buffer_restyled+116F↓j
.text:00000000000028C6                 lea     rsi, asc_4655   ; "'"
.text:00000000000028CD                 xor     edi, edi        ; domainname
.text:00000000000028CF                 mov     edx, 5          ; category
.text:00000000000028D4                 call    _dcgettext
.text:00000000000028D9                 mov     rcx, rax
.text:00000000000028DC                 mov     [rsp+0E8h+var_88], rax
.text:00000000000028E1                 lea     rax, asc_4655   ; "'"
.text:00000000000028E8                 cmp     rcx, rax
.text:00000000000028EB                 jz      loc_2C74
.text:00000000000028F1
.text:00000000000028F1 loc_28F1:                               ; CODE XREF: quotearg_buffer_restyled+D99↑j
.text:00000000000028F1                                         ; quotearg_buffer_restyled+1185↓j
.text:00000000000028F1                 xor     r15d, r15d
.text:00000000000028F4                 test    ebx, ebx
.text:00000000000028F6                 jz      loc_2ABD
.text:00000000000028FC
.text:00000000000028FC loc_28FC:                               ; CODE XREF: quotearg_buffer_restyled+FC7↓j
.text:00000000000028FC                                         ; quotearg_buffer_restyled+FE6↓j
.text:00000000000028FC                 test    ebx, ebx
.text:00000000000028FE                 mov     rbx, [rsp+0E8h+var_88]
.text:0000000000002903                 setnz   [rsp+0E8h+var_D9]
.text:0000000000002908                 xor     r12d, r12d
.text:000000000000290B                 mov     rdi, rbx        ; s
.text:000000000000290E                 call    _strlen
.text:0000000000002913                 mov     [rsp+0E8h+s2], rbx
.text:0000000000002918                 mov     [rsp+0E8h+n], rax
.text:000000000000291D                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002922                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002927                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002930                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002935                 jmp     loc_1BD3
.text:000000000000293A ; ---------------------------------------------------------------------------
.text:000000000000293A
.text:000000000000293A loc_293A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000293A                                         ; DATA XREF: .rodata:jpt_1B91↓o
.text:000000000000293A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 0
.text:000000000000293F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002944                 xor     r12d, r12d
.text:0000000000002947                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002950                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000002955                 xor     r15d, r15d
.text:0000000000002958                 mov     [rsp+0E8h+var_DB], 0
.text:000000000000295D                 mov     [rsp+0E8h+n], 0
.text:0000000000002966                 mov     [rsp+0E8h+s2], 0
.text:000000000000296F                 jmp     loc_1BD3
.text:0000000000002974 ; ---------------------------------------------------------------------------
.text:0000000000002974
.text:0000000000002974 loc_2974:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002974                                         ; DATA XREF: .rodata:jpt_1B91↓o
.text:0000000000002974                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 3
.text:0000000000002979                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000297E                 xor     r12d, r12d
.text:0000000000002981                 mov     [rsp+0E8h+var_98], 0
.text:000000000000298A                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000298F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002994                 jmp     loc_1BB3
.text:0000000000002999 ; ---------------------------------------------------------------------------
.text:0000000000002999
.text:0000000000002999 loc_2999:                               ; CODE XREF: quotearg_buffer_restyled+665↑j
.text:0000000000002999                 cmp     r13, r15
.text:000000000000299C                 jbe     short loc_29A3
.text:000000000000299E                 mov     byte ptr [r14+r15], 30h ; '0'
.text:00000000000029A3
.text:00000000000029A3 loc_29A3:                               ; CODE XREF: quotearg_buffer_restyled+E9C↑j
.text:00000000000029A3                 lea     rax, [rcx+2]
.text:00000000000029A7                 cmp     r13, rax
.text:00000000000029AA                 jbe     short loc_29B2
.text:00000000000029AC                 mov     byte ptr [r14+rcx+2], 30h ; '0'
.text:00000000000029B2
.text:00000000000029B2 loc_29B2:                               ; CODE XREF: quotearg_buffer_restyled+EAA↑j
.text:00000000000029B2                 mov     eax, r12d
.text:00000000000029B5                 lea     r15, [rcx+3]
.text:00000000000029B9                 xor     r12d, r12d
.text:00000000000029BC                 mov     ebx, 30h ; '0'
.text:00000000000029C1                 jmp     loc_1D28
.text:00000000000029C1 ; ---------------------------------------------------------------------------
.text:00000000000029C6                 align 10h
.text:00000000000029D0
.text:00000000000029D0 loc_29D0:                               ; CODE XREF: quotearg_buffer_restyled+A1B↑j
.text:00000000000029D0                 movzx   ebx, [rsp+0E8h+var_D9]
.text:00000000000029D5                 mov     rbp, r11
.text:00000000000029D8                 mov     [rsp+0E8h+var_DB], bl
.text:00000000000029DC                 jmp     loc_2689
.text:00000000000029E1 ; ---------------------------------------------------------------------------
.text:00000000000029E1
.text:00000000000029E1 loc_29E1:                               ; CODE XREF: quotearg_buffer_restyled+549↑j
.text:00000000000029E1                 movzx   edx, [rsp+0E8h+var_DB]
.text:00000000000029E6                 xor     r12d, r12d
.text:00000000000029E9                 jmp     loc_24F0
.text:00000000000029EE ; ---------------------------------------------------------------------------
.text:00000000000029EE
.text:00000000000029EE loc_29EE:                               ; CODE XREF: quotearg_buffer_restyled+AF0↑j
.text:00000000000029EE                 xor     r10d, r10d
.text:00000000000029F1                 jmp     loc_25AD
.text:00000000000029F6 ; ---------------------------------------------------------------------------
.text:00000000000029F6
.text:00000000000029F6 loc_29F6:                               ; CODE XREF: quotearg_buffer_restyled+CCB↑j
.text:00000000000029F6                 mov     [rsp+0E8h+var_98], 0
.text:00000000000029FF                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002A04                 xor     r12d, r12d
.text:0000000000002A07                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002A0C                 jmp     loc_27EB
.text:0000000000002A11 ; ---------------------------------------------------------------------------
.text:0000000000002A11
.text:0000000000002A11 loc_2A11:                               ; CODE XREF: quotearg_buffer_restyled+971↑j
.text:0000000000002A11                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000002A16                 mov     rsi, r14
.text:0000000000002A19                 mov     rcx, r13
.text:0000000000002A1C                 mov     rax, rbx
.text:0000000000002A1F                 mov     rdi, rbx
.text:0000000000002A22                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000002A28                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000002A2D                 mov     r9, [rsp+0E8h+var_60]
.text:0000000000002A35                 cmp     rsi, r11
.text:0000000000002A38                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000002A3E                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000002A46                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000002A4B                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000002A50                 jnb     short loc_2A78
.text:0000000000002A52                 cmp     byte ptr [rcx], 0
.text:0000000000002A55                 jnz     short loc_2A67
.text:0000000000002A57                 jmp     short loc_2A78
.text:0000000000002A57 ; ---------------------------------------------------------------------------
.text:0000000000002A59                 align 20h
.text:0000000000002A60
.text:0000000000002A60 loc_2A60:                               ; CODE XREF: quotearg_buffer_restyled+F73↓j
.text:0000000000002A60                 cmp     byte ptr [r9+rax], 0
.text:0000000000002A65                 jz      short loc_2A75
.text:0000000000002A67
.text:0000000000002A67 loc_2A67:                               ; CODE XREF: quotearg_buffer_restyled+F55↑j
.text:0000000000002A67                 add     rax, 1
.text:0000000000002A6B                 lea     rdx, [rbp+rax+0]
.text:0000000000002A70                 cmp     r11, rdx
.text:0000000000002A73                 ja      short loc_2A60
.text:0000000000002A75
.text:0000000000002A75 loc_2A75:                               ; CODE XREF: quotearg_buffer_restyled+F65↑j
.text:0000000000002A75                 mov     rdi, rax
.text:0000000000002A78
.text:0000000000002A78 loc_2A78:                               ; CODE XREF: quotearg_buffer_restyled+F50↑j
.text:0000000000002A78                                         ; quotearg_buffer_restyled+F57↑j
.text:0000000000002A78                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000002A7D                 xor     r12d, r12d
.text:0000000000002A80                 jmp     loc_24E6
.text:0000000000002A85 ; ---------------------------------------------------------------------------
.text:0000000000002A85
.text:0000000000002A85 loc_2A85:                               ; CODE XREF: quotearg_buffer_restyled+967↑j
.text:0000000000002A85                 mov     rdi, rbx
.text:0000000000002A88                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000002A8E                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000002A93                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000002A99                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000002AA1                 xor     r12d, r12d
.text:0000000000002AA4                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000002AA9                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000002AAE                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000002AB3                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000002AB8                 jmp     loc_24E6
.text:0000000000002ABD ; ---------------------------------------------------------------------------
.text:0000000000002ABD
.text:0000000000002ABD loc_2ABD:                               ; CODE XREF: quotearg_buffer_restyled+DF6↑j
.text:0000000000002ABD                 mov     rdx, [rsp+0E8h+var_80]
.text:0000000000002AC2                 movzx   eax, byte ptr [rdx]
.text:0000000000002AC5                 test    al, al
.text:0000000000002AC7                 jz      loc_28FC
.text:0000000000002ACD                 nop     dword ptr [rax]
.text:0000000000002AD0
.text:0000000000002AD0 loc_2AD0:                               ; CODE XREF: quotearg_buffer_restyled+FE4↓j
.text:0000000000002AD0                 cmp     r13, r15
.text:0000000000002AD3                 jbe     short loc_2AD9
.text:0000000000002AD5                 mov     [r14+r15], al
.text:0000000000002AD9
.text:0000000000002AD9 loc_2AD9:                               ; CODE XREF: quotearg_buffer_restyled+FD3↑j
.text:0000000000002AD9                 add     r15, 1
.text:0000000000002ADD                 movzx   eax, byte ptr [rdx+r15]
.text:0000000000002AE2                 test    al, al
.text:0000000000002AE4                 jnz     short loc_2AD0
.text:0000000000002AE6                 jmp     loc_28FC
.text:0000000000002AEB ; ---------------------------------------------------------------------------
.text:0000000000002AEB
.text:0000000000002AEB loc_2AEB:                               ; CODE XREF: quotearg_buffer_restyled+9EA↑j
.text:0000000000002AEB                 mov     eax, edx
.text:0000000000002AED                 jmp     loc_2047
.text:0000000000002AF2 ; ---------------------------------------------------------------------------
.text:0000000000002AF2
.text:0000000000002AF2 loc_2AF2:                               ; CODE XREF: quotearg_buffer_restyled+862↑j
.text:0000000000002AF2                 movzx   ebx, byte ptr [rax+rcx]
.text:0000000000002AF6                 cmp     bl, 3Eh ; '>'
.text:0000000000002AF9                 ja      loc_2370
.text:0000000000002AFF                 mov     rax, 7000A38200000000h
.text:0000000000002B09                 bt      rax, rbx
.text:0000000000002B0D                 jnb     loc_2370
.text:0000000000002B13                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002B18                 jnz     loc_2D02
.text:0000000000002B1E                 cmp     r13, r15
.text:0000000000002B21                 jbe     short loc_2B28
.text:0000000000002B23                 mov     byte ptr [r14+r15], 3Fh ; '?'
.text:0000000000002B28
.text:0000000000002B28 loc_2B28:                               ; CODE XREF: quotearg_buffer_restyled+1021↑j
.text:0000000000002B28                 lea     rax, [r15+1]
.text:0000000000002B2C                 cmp     r13, rax
.text:0000000000002B2F                 jbe     short loc_2B37
.text:0000000000002B31                 mov     byte ptr [r14+r15+1], 22h ; '"'
.text:0000000000002B37
.text:0000000000002B37 loc_2B37:                               ; CODE XREF: quotearg_buffer_restyled+102F↑j
.text:0000000000002B37                 lea     rax, [r15+2]
.text:0000000000002B3B                 cmp     r13, rax
.text:0000000000002B3E                 jbe     short loc_2B46
.text:0000000000002B40                 mov     byte ptr [r14+r15+2], 22h ; '"'
.text:0000000000002B46
.text:0000000000002B46 loc_2B46:                               ; CODE XREF: quotearg_buffer_restyled+103E↑j
.text:0000000000002B46                 lea     rax, [r15+3]
.text:0000000000002B4A                 cmp     r13, rax
.text:0000000000002B4D                 jbe     short loc_2B55
.text:0000000000002B4F                 mov     byte ptr [r14+r15+3], 3Fh ; '?'
.text:0000000000002B55
.text:0000000000002B55 loc_2B55:                               ; CODE XREF: quotearg_buffer_restyled+104D↑j
.text:0000000000002B55                 add     r15, 4
.text:0000000000002B59                 xor     edx, edx
.text:0000000000002B5B                 xor     r12d, r12d
.text:0000000000002B5E                 xor     eax, eax
.text:0000000000002B60                 mov     rbp, rcx
.text:0000000000002B63                 jmp     loc_1D28
.text:0000000000002B68 ; ---------------------------------------------------------------------------
.text:0000000000002B68
.text:0000000000002B68 loc_2B68:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002B68                                         ; DATA XREF: .rodata:jpt_1B91↓o
.text:0000000000002B68                 test    ebx, ebx        ; jumptable 00000000000121F1 case 2
.text:0000000000002B6A                 jz      loc_2CF8
.text:0000000000002B70                 lea     rax, asc_4655   ; "'"
.text:0000000000002B77                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002B7C                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002B81                 xor     r12d, r12d
.text:0000000000002B84                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002B8D                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000002B92                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000002B97                 mov     [rsp+0E8h+n], 1
.text:0000000000002BA0                 xor     r15d, r15d
.text:0000000000002BA3                 mov     [rsp+0E8h+s2], rax
.text:0000000000002BA8                 jmp     loc_1BD3
.text:0000000000002BA8 ; ---------------------------------------------------------------------------
.text:0000000000002BAD                 align 10h
.text:0000000000002BB0
.text:0000000000002BB0 loc_2BB0:                               ; CODE XREF: quotearg_buffer_restyled+745↑j
.text:0000000000002BB0                                         ; quotearg_buffer_restyled+805↑j ...
.text:0000000000002BB0                 mov     rbp, r11
.text:0000000000002BB3                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000002BB8                 jmp     loc_2689
.text:0000000000002BBD ; ---------------------------------------------------------------------------
.text:0000000000002BBD
.text:0000000000002BBD loc_2BBD:                               ; CODE XREF: quotearg_buffer_restyled+CC2↑j
.text:0000000000002BBD                 lea     rax, unk_4653
.text:0000000000002BC4                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002BC9                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002BCE                 xor     r12d, r12d
.text:0000000000002BD1                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002BDA                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000002BDF                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002BE4                 mov     [rsp+0E8h+n], 1
.text:0000000000002BED                 xor     r15d, r15d
.text:0000000000002BF0                 mov     [rsp+0E8h+s2], rax
.text:0000000000002BF5                 jmp     loc_1BD3
.text:0000000000002BFA ; ---------------------------------------------------------------------------
.text:0000000000002BFA
.text:0000000000002BFA loc_2BFA:                               ; CODE XREF: quotearg_buffer_restyled+797↑j
.text:0000000000002BFA                 mov     eax, edx
.text:0000000000002BFC
.text:0000000000002BFC loc_2BFC:                               ; CODE XREF: quotearg_buffer_restyled+78C↑j
.text:0000000000002BFC                                         ; quotearg_buffer_restyled+11E1↓j
.text:0000000000002BFC                 mov     rbx, [rsp+0E8h+s2]
.text:0000000000002C01                 test    rbx, rbx
.text:0000000000002C04                 jz      short loc_2C32
.text:0000000000002C06                 test    al, al
.text:0000000000002C08                 jz      short loc_2C32
.text:0000000000002C0A                 movzx   ecx, byte ptr [rbx]
.text:0000000000002C0D                 mov     rax, rbx
.text:0000000000002C10                 test    cl, cl
.text:0000000000002C12                 jz      short loc_2C32
.text:0000000000002C14                 mov     rdx, r15
.text:0000000000002C17                 sub     rax, r15
.text:0000000000002C1A
.text:0000000000002C1A loc_2C1A:                               ; CODE XREF: quotearg_buffer_restyled+112D↓j
.text:0000000000002C1A                 cmp     r13, rdx
.text:0000000000002C1D                 jbe     short loc_2C23
.text:0000000000002C1F                 mov     [r14+rdx], cl
.text:0000000000002C23
.text:0000000000002C23 loc_2C23:                               ; CODE XREF: quotearg_buffer_restyled+111D↑j
.text:0000000000002C23                 add     rdx, 1
.text:0000000000002C27                 movzx   ecx, byte ptr [rax+rdx]
.text:0000000000002C2B                 test    cl, cl
.text:0000000000002C2D                 jnz     short loc_2C1A
.text:0000000000002C2F                 mov     r15, rdx
.text:0000000000002C32
.text:0000000000002C32 loc_2C32:                               ; CODE XREF: quotearg_buffer_restyled+1104↑j
.text:0000000000002C32                                         ; quotearg_buffer_restyled+1108↑j ...
.text:0000000000002C32                 cmp     r13, r15
.text:0000000000002C35                 jbe     loc_26D9
.text:0000000000002C3B                 mov     byte ptr [r14+r15], 0
.text:0000000000002C40                 jmp     loc_26D9
.text:0000000000002C45 ; ---------------------------------------------------------------------------
.text:0000000000002C45
.text:0000000000002C45 loc_2C45:                               ; CODE XREF: quotearg_buffer_restyled+1C2↑j
.text:0000000000002C45                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002C4A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000002C4F                 mov     rbp, r11
.text:0000000000002C52                 setz    al
.text:0000000000002C55                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000002C59                 jmp     loc_2689
.text:0000000000002C5E ; ---------------------------------------------------------------------------
.text:0000000000002C5E
.text:0000000000002C5E loc_2C5E:                               ; CODE XREF: quotearg_buffer_restyled+DC0↑j
.text:0000000000002C5E                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000002C62                 mov     rdi, rcx
.text:0000000000002C65                 call    gettext_quote
.text:0000000000002C6A                 mov     [rsp+0E8h+var_80], rax
.text:0000000000002C6F                 jmp     loc_28C6
.text:0000000000002C74 ; ---------------------------------------------------------------------------
.text:0000000000002C74
.text:0000000000002C74 loc_2C74:                               ; CODE XREF: quotearg_buffer_restyled+DEB↑j
.text:0000000000002C74                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000002C78                 mov     rdi, rcx
.text:0000000000002C7B                 call    gettext_quote
.text:0000000000002C80                 mov     [rsp+0E8h+var_88], rax
.text:0000000000002C85                 jmp     loc_28F1
.text:0000000000002C8A ; ---------------------------------------------------------------------------
.text:0000000000002C8A
.text:0000000000002C8A loc_2C8A:                               ; CODE XREF: quotearg_buffer_restyled+5F0↑j
.text:0000000000002C8A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000002C8F                 mov     rbp, r11
.text:0000000000002C92                 mov     eax, edx
.text:0000000000002C94                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000002C98                 jmp     loc_2689
.text:0000000000002C9D ; ---------------------------------------------------------------------------
.text:0000000000002C9D
.text:0000000000002C9D loc_2C9D:                               ; CODE XREF: quotearg_buffer_restyled+7A2↑j
.text:0000000000002C9D                 sub     rsp, 8
.text:0000000000002CA1                 mov     r8d, 5
.text:0000000000002CA7                 mov     rcx, r11
.text:0000000000002CAA                 push    [rsp+0F0h+var_88]
.text:0000000000002CAE                 push    [rsp+0F8h+var_80]
.text:0000000000002CB2                 mov     rdi, r14
.text:0000000000002CB5                 push    [rsp+100h+var_C8]
.text:0000000000002CB9                 mov     r9d, [rsp+108h+var_70]
.text:0000000000002CC1                 mov     rdx, [rsp+108h+s]
.text:0000000000002CC6                 mov     rsi, [rsp+108h+var_98]
.text:0000000000002CCB                 call    quotearg_buffer_restyled
.text:0000000000002CD0                 add     rsp, 20h
.text:0000000000002CD4                 mov     r15, rax
.text:0000000000002CD7                 jmp     loc_26D9
.text:0000000000002CDC ; ---------------------------------------------------------------------------
.text:0000000000002CDC
.text:0000000000002CDC loc_2CDC:                               ; CODE XREF: quotearg_buffer_restyled+7B9↑j
.text:0000000000002CDC                 movzx   eax, [rsp+0E8h+var_6C]
.text:0000000000002CE1                 jmp     loc_2BFC
.text:0000000000002CE6 ; ---------------------------------------------------------------------------
.text:0000000000002CE6
.text:0000000000002CE6 loc_2CE6:                               ; CODE XREF: quotearg_buffer_restyled+77F↑j
.text:0000000000002CE6                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000002CEE                 jmp     loc_2689
.text:0000000000002CF3 ; ---------------------------------------------------------------------------
.text:0000000000002CF3
.text:0000000000002CF3 loc_2CF3:                               ; CODE XREF: quotearg_buffer_restyled+BED↑j
.text:0000000000002CF3                 call    ___stack_chk_fail
.text:0000000000002CF8 ; ---------------------------------------------------------------------------
.text:0000000000002CF8
.text:0000000000002CF8 loc_2CF8:                               ; CODE XREF: quotearg_buffer_restyled+106A↑j
.text:0000000000002CF8                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000002CFD                 jmp     loc_2771
.text:0000000000002D02 ; ---------------------------------------------------------------------------
.text:0000000000002D02
.text:0000000000002D02 loc_2D02:                               ; CODE XREF: quotearg_buffer_restyled+1018↑j
.text:0000000000002D02                 mov     rbp, r11
.text:0000000000002D05                 jmp     loc_26A0
.text:0000000000002D0A ; ---------------------------------------------------------------------------
.text:0000000000002D0A
.text:0000000000002D0A loc_2D0A:                               ; CODE XREF: quotearg_buffer_restyled+C74↑j
.text:0000000000002D0A                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002D0F                 xor     eax, eax
.text:0000000000002D11                 xor     r12d, r12d
.text:0000000000002D14                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002D1D                 jmp     loc_22C4
.text:0000000000002D22 ; ---------------------------------------------------------------------------
.text:0000000000002D22
.text:0000000000002D22 loc_2D22:                               ; CODE XREF: quotearg_buffer_restyled+C30↑j
.text:0000000000002D22                 mov     rdx, r13
.text:0000000000002D25                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000002D2A                 jmp     loc_2322
.text:0000000000002D2F ; ---------------------------------------------------------------------------
.text:0000000000002D2F
.text:0000000000002D2F def_1B91:                               ; CODE XREF: quotearg_buffer_restyled+7A↑j
.text:0000000000002D2F                 call    _abort          ; jumptable 00000000000121F1 default case
.text:0000000000002D2F ; } // starts at 1B00
.text:0000000000002D2F quotearg_buffer_restyled endp
.text:0000000000002D2F
.text:0000000000002D2F ; ---------------------------------------------------------------------------
.text:0000000000002D34                 align 20h
.text:0000000000002D40
.text:0000000000002D40 ; =============== S U B R O U T I N E =======================================
.text:0000000000002D40
.text:0000000000002D40
.text:0000000000002D40 quotearg_n_options proc near            ; CODE XREF: quotearg_n+E↓j
.text:0000000000002D40                                         ; quotearg_n_mem+7↓j ...
.text:0000000000002D40
.text:0000000000002D40 var_50          = qword ptr -50h
.text:0000000000002D40 var_48          = qword ptr -48h
.text:0000000000002D40 var_40          = dword ptr -40h
.text:0000000000002D40 var_3C          = dword ptr -3Ch
.text:0000000000002D40
.text:0000000000002D40 ; __unwind {
.text:0000000000002D40                 push    r15
.text:0000000000002D42                 push    r14
.text:0000000000002D44                 movsxd  r15, edi
.text:0000000000002D47                 push    r13
.text:0000000000002D49                 push    r12
.text:0000000000002D4B                 mov     r14, rdx
.text:0000000000002D4E                 push    rbp
.text:0000000000002D4F                 push    rbx
.text:0000000000002D50                 mov     rbp, rcx
.text:0000000000002D53                 sub     rsp, 28h
.text:0000000000002D57                 mov     [rsp+58h+var_50], rsi
.text:0000000000002D5C                 call    ___errno_location
.text:0000000000002D61                 mov     r13, rax
.text:0000000000002D64                 mov     eax, [rax]
.text:0000000000002D66                 test    r15d, r15d
.text:0000000000002D69                 mov     rbx, cs:slotvec
.text:0000000000002D70                 mov     [rsp+58h+var_40], eax
.text:0000000000002D74                 js      loc_2EE1
.text:0000000000002D7A                 cmp     cs:nslots, r15d
.text:0000000000002D81                 jg      short loc_2DE5
.text:0000000000002D83                 cmp     r15d, 7FFFFFFFh
.text:0000000000002D8A                 jz      loc_2EE6
.text:0000000000002D90                 lea     r12d, [r15+1]
.text:0000000000002D94                 lea     rax, slotvec0
.text:0000000000002D9B                 movsxd  rsi, r12d
.text:0000000000002D9E                 shl     rsi, 4
.text:0000000000002DA2                 cmp     rbx, rax
.text:0000000000002DA5                 jz      loc_2EC0
.text:0000000000002DAB                 mov     rdi, rbx
.text:0000000000002DAE                 call    xrealloc
.text:0000000000002DB3                 mov     rbx, rax
.text:0000000000002DB6                 mov     cs:slotvec, rax
.text:0000000000002DBD
.text:0000000000002DBD loc_2DBD:                               ; CODE XREF: quotearg_n_options+19C↓j
.text:0000000000002DBD                 movsxd  rdi, cs:nslots
.text:0000000000002DC4                 mov     edx, r12d
.text:0000000000002DC7                 xor     esi, esi        ; c
.text:0000000000002DC9                 sub     edx, edi
.text:0000000000002DCB                 shl     rdi, 4
.text:0000000000002DCF                 movsxd  rdx, edx
.text:0000000000002DD2                 add     rdi, rbx        ; s
.text:0000000000002DD5                 shl     rdx, 4          ; n
.text:0000000000002DD9                 call    _memset
.text:0000000000002DDE                 mov     cs:nslots, r12d
.text:0000000000002DE5
.text:0000000000002DE5 loc_2DE5:                               ; CODE XREF: quotearg_n_options+41↑j
.text:0000000000002DE5                 mov     eax, [rbp+4]
.text:0000000000002DE8                 shl     r15, 4
.text:0000000000002DEC                 sub     rsp, 8
.text:0000000000002DF0                 add     rbx, r15
.text:0000000000002DF3                 lea     r15, [rbp+8]
.text:0000000000002DF7                 mov     r8d, [rbp+0]
.text:0000000000002DFB                 mov     r11, [rbx]
.text:0000000000002DFE                 mov     r12, [rbx+8]
.text:0000000000002E02                 mov     rcx, r14
.text:0000000000002E05                 or      eax, 1
.text:0000000000002E08                 mov     [rsp+60h+var_3C], eax
.text:0000000000002E0C                 push    qword ptr [rbp+30h]
.text:0000000000002E0F                 mov     r9d, eax
.text:0000000000002E12                 push    qword ptr [rbp+28h]
.text:0000000000002E15                 push    r15
.text:0000000000002E17                 mov     rsi, r11
.text:0000000000002E1A                 mov     rdx, [rsp+78h+var_50]
.text:0000000000002E1F                 mov     rdi, r12
.text:0000000000002E22                 mov     [rsp+78h+var_48], r11
.text:0000000000002E27                 call    quotearg_buffer_restyled
.text:0000000000002E2C                 add     rsp, 20h
.text:0000000000002E30                 mov     r11, [rsp+58h+var_48]
.text:0000000000002E35                 cmp     r11, rax
.text:0000000000002E38                 ja      short loc_2EA1
.text:0000000000002E3A                 lea     rsi, [rax+1]
.text:0000000000002E3E                 lea     rax, slot0
.text:0000000000002E45                 cmp     r12, rax
.text:0000000000002E48                 mov     [rbx], rsi
.text:0000000000002E4B                 jz      short loc_2E5F
.text:0000000000002E4D                 mov     rdi, r12        ; ptr
.text:0000000000002E50                 mov     [rsp+58h+var_48], rsi
.text:0000000000002E55                 call    _free
.text:0000000000002E5A                 mov     rsi, [rsp+58h+var_48]
.text:0000000000002E5F
.text:0000000000002E5F loc_2E5F:                               ; CODE XREF: quotearg_n_options+10B↑j
.text:0000000000002E5F                 mov     rdi, rsi
.text:0000000000002E62                 mov     [rsp+58h+var_48], rsi
.text:0000000000002E67                 call    xmalloc
.text:0000000000002E6C                 sub     rsp, 8
.text:0000000000002E70                 mov     [rbx+8], rax
.text:0000000000002E74                 mov     r8d, [rbp+0]
.text:0000000000002E78                 push    qword ptr [rbp+30h]
.text:0000000000002E7B                 push    qword ptr [rbp+28h]
.text:0000000000002E7E                 mov     rcx, r14
.text:0000000000002E81                 push    r15
.text:0000000000002E83                 mov     r9d, [rsp+78h+var_3C]
.text:0000000000002E88                 mov     rdi, rax
.text:0000000000002E8B                 mov     rdx, [rsp+78h+var_50]
.text:0000000000002E90                 mov     rsi, [rsp+78h+var_48]
.text:0000000000002E95                 mov     r12, rax
.text:0000000000002E98                 call    quotearg_buffer_restyled
.text:0000000000002E9D                 add     rsp, 20h
.text:0000000000002EA1
.text:0000000000002EA1 loc_2EA1:                               ; CODE XREF: quotearg_n_options+F8↑j
.text:0000000000002EA1                 mov     eax, [rsp+58h+var_40]
.text:0000000000002EA5                 mov     [r13+0], eax
.text:0000000000002EA9                 add     rsp, 28h
.text:0000000000002EAD                 mov     rax, r12
.text:0000000000002EB0                 pop     rbx
.text:0000000000002EB1                 pop     rbp
.text:0000000000002EB2                 pop     r12
.text:0000000000002EB4                 pop     r13
.text:0000000000002EB6                 pop     r14
.text:0000000000002EB8                 pop     r15
.text:0000000000002EBA                 retn
.text:0000000000002EBA ; ---------------------------------------------------------------------------
.text:0000000000002EBB                 align 20h
.text:0000000000002EC0
.text:0000000000002EC0 loc_2EC0:                               ; CODE XREF: quotearg_n_options+65↑j
.text:0000000000002EC0                 xor     edi, edi
.text:0000000000002EC2                 call    xrealloc
.text:0000000000002EC7                 movdqa  xmm0, xmmword ptr cs:slotvec0
.text:0000000000002ECF                 mov     rbx, rax
.text:0000000000002ED2                 mov     cs:slotvec, rax
.text:0000000000002ED9                 movups  xmmword ptr [rax], xmm0
.text:0000000000002EDC                 jmp     loc_2DBD
.text:0000000000002EE1 ; ---------------------------------------------------------------------------
.text:0000000000002EE1
.text:0000000000002EE1 loc_2EE1:                               ; CODE XREF: quotearg_n_options+34↑j
.text:0000000000002EE1                 call    _abort
.text:0000000000002EE6 ; ---------------------------------------------------------------------------
.text:0000000000002EE6
.text:0000000000002EE6 loc_2EE6:                               ; CODE XREF: quotearg_n_options+4A↑j
.text:0000000000002EE6                 call    xalloc_die
.text:0000000000002EE6 ; } // starts at 2D40
.text:0000000000002EE6 quotearg_n_options endp
.text:0000000000002EE6
.text:0000000000002EE6 ; ---------------------------------------------------------------------------
.text:0000000000002EEB                 align 10h
.text:0000000000002EF0
.text:0000000000002EF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000002EF0
.text:0000000000002EF0 ; Attributes: info_from_lumina
.text:0000000000002EF0
.text:0000000000002EF0 ; quoting_options *__fastcall clone_quoting_options(quoting_options *o)
.text:0000000000002EF0                 public clone_quoting_options
.text:0000000000002EF0 clone_quoting_options proc near
.text:0000000000002EF0 ; __unwind {
.text:0000000000002EF0                 push    r12
.text:0000000000002EF2                 push    rbp
.text:0000000000002EF3                 push    rbx
.text:0000000000002EF4                 mov     rbx, rdi
.text:0000000000002EF7                 call    ___errno_location
.text:0000000000002EFC                 mov     r12d, [rax]
.text:0000000000002EFF                 mov     rbp, rax
.text:0000000000002F02                 lea     rax, default_quoting_options
.text:0000000000002F09                 test    rbx, rbx
.text:0000000000002F0C                 mov     esi, 38h ; '8'  ; n
.text:0000000000002F11                 cmovz   rbx, rax
.text:0000000000002F15                 mov     rdi, rbx        ; src
.text:0000000000002F18                 call    xmemdup
.text:0000000000002F1D                 mov     [rbp+0], r12d
.text:0000000000002F21                 pop     rbx
.text:0000000000002F22                 pop     rbp
.text:0000000000002F23                 pop     r12
.text:0000000000002F25                 retn
.text:0000000000002F25 ; } // starts at 2EF0
.text:0000000000002F25 clone_quoting_options endp
.text:0000000000002F25
.text:0000000000002F25 ; ---------------------------------------------------------------------------
.text:0000000000002F26                 align 10h
.text:0000000000002F30
.text:0000000000002F30 ; =============== S U B R O U T I N E =======================================
.text:0000000000002F30
.text:0000000000002F30
.text:0000000000002F30                 public get_quoting_style
.text:0000000000002F30 get_quoting_style proc near
.text:0000000000002F30 ; __unwind {
.text:0000000000002F30                 lea     rax, default_quoting_options
.text:0000000000002F37                 test    rdi, rdi
.text:0000000000002F3A                 cmovz   rdi, rax
.text:0000000000002F3E                 mov     eax, [rdi]
.text:0000000000002F40                 retn
.text:0000000000002F40 ; } // starts at 2F30
.text:0000000000002F40 get_quoting_style endp
.text:0000000000002F40
.text:0000000000002F40 ; ---------------------------------------------------------------------------
.text:0000000000002F41                 align 10h
.text:0000000000002F50
.text:0000000000002F50 ; =============== S U B R O U T I N E =======================================
.text:0000000000002F50
.text:0000000000002F50
.text:0000000000002F50                 public set_quoting_style
.text:0000000000002F50 set_quoting_style proc near
.text:0000000000002F50 ; __unwind {
.text:0000000000002F50                 lea     rax, default_quoting_options
.text:0000000000002F57                 test    rdi, rdi
.text:0000000000002F5A                 cmovz   rdi, rax
.text:0000000000002F5E                 mov     [rdi], esi
.text:0000000000002F60                 retn
.text:0000000000002F60 ; } // starts at 2F50
.text:0000000000002F60 set_quoting_style endp
.text:0000000000002F60
.text:0000000000002F60 ; ---------------------------------------------------------------------------
.text:0000000000002F61                 align 10h
.text:0000000000002F70
.text:0000000000002F70 ; =============== S U B R O U T I N E =======================================
.text:0000000000002F70
.text:0000000000002F70 ; Attributes: info_from_lumina
.text:0000000000002F70
.text:0000000000002F70 ; int __fastcall set_char_quoting(quoting_options *o, char c, int i)
.text:0000000000002F70                 public set_char_quoting
.text:0000000000002F70 set_char_quoting proc near
.text:0000000000002F70 ; __unwind {
.text:0000000000002F70                 lea     rax, default_quoting_options
.text:0000000000002F77                 test    rdi, rdi
.text:0000000000002F7A                 mov     ecx, esi
.text:0000000000002F7C                 cmovz   rdi, rax
.text:0000000000002F80                 mov     eax, esi
.text:0000000000002F82                 and     ecx, 1Fh
.text:0000000000002F85                 shr     al, 5
.text:0000000000002F88                 movzx   eax, al
.text:0000000000002F8B                 lea     rdi, [rdi+rax*4+8]
.text:0000000000002F90                 mov     esi, [rdi]
.text:0000000000002F92                 mov     eax, esi
.text:0000000000002F94                 shr     eax, cl
.text:0000000000002F96                 xor     edx, eax
.text:0000000000002F98                 and     eax, 1
.text:0000000000002F9B                 and     edx, 1
.text:0000000000002F9E                 shl     edx, cl
.text:0000000000002FA0                 xor     edx, esi
.text:0000000000002FA2                 mov     [rdi], edx
.text:0000000000002FA4                 retn
.text:0000000000002FA4 ; } // starts at 2F70
.text:0000000000002FA4 set_char_quoting endp
.text:0000000000002FA4
.text:0000000000002FA4 ; ---------------------------------------------------------------------------
.text:0000000000002FA5                 align 10h
.text:0000000000002FB0
.text:0000000000002FB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000002FB0
.text:0000000000002FB0
.text:0000000000002FB0                 public set_quoting_flags
.text:0000000000002FB0 set_quoting_flags proc near
.text:0000000000002FB0 ; __unwind {
.text:0000000000002FB0                 lea     rax, default_quoting_options
.text:0000000000002FB7                 test    rdi, rdi
.text:0000000000002FBA                 cmovz   rdi, rax
.text:0000000000002FBE                 mov     eax, [rdi+4]
.text:0000000000002FC1                 mov     [rdi+4], esi
.text:0000000000002FC4                 retn
.text:0000000000002FC4 ; } // starts at 2FB0
.text:0000000000002FC4 set_quoting_flags endp
.text:0000000000002FC4
.text:0000000000002FC4 ; ---------------------------------------------------------------------------
.text:0000000000002FC5                 align 10h
.text:0000000000002FD0
.text:0000000000002FD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000002FD0
.text:0000000000002FD0 ; Attributes: info_from_lumina
.text:0000000000002FD0
.text:0000000000002FD0 ; void __fastcall set_custom_quoting(quoting_options *o, const char *left_quote, const char *right_quote)
.text:0000000000002FD0                 public set_custom_quoting
.text:0000000000002FD0 set_custom_quoting proc near
.text:0000000000002FD0 ; __unwind {
.text:0000000000002FD0                 lea     rax, default_quoting_options
.text:0000000000002FD7                 test    rdi, rdi
.text:0000000000002FDA                 cmovz   rdi, rax
.text:0000000000002FDE                 test    rsi, rsi
.text:0000000000002FE1                 mov     dword ptr [rdi], 0Ah
.text:0000000000002FE7                 jz      short loc_2FF7
.text:0000000000002FE9                 test    rdx, rdx
.text:0000000000002FEC                 jz      short loc_2FF7
.text:0000000000002FEE                 mov     [rdi+28h], rsi
.text:0000000000002FF2                 mov     [rdi+30h], rdx
.text:0000000000002FF6                 retn
.text:0000000000002FF7 ; ---------------------------------------------------------------------------
.text:0000000000002FF7
.text:0000000000002FF7 loc_2FF7:                               ; CODE XREF: set_custom_quoting+17↑j
.text:0000000000002FF7                                         ; set_custom_quoting+1C↑j
.text:0000000000002FF7                 sub     rsp, 8
.text:0000000000002FFB                 call    _abort
.text:0000000000002FFB ; } // starts at 2FD0
.text:0000000000002FFB set_custom_quoting endp
.text:0000000000002FFB
.text:0000000000003000
.text:0000000000003000 ; =============== S U B R O U T I N E =======================================
.text:0000000000003000
.text:0000000000003000 ; Attributes: info_from_lumina
.text:0000000000003000
.text:0000000000003000 ; size_t __fastcall quotearg_buffer(char *buffer, size_t buffersize, const char *arg, size_t argsize, const quoting_options *o)
.text:0000000000003000                 public quotearg_buffer
.text:0000000000003000 quotearg_buffer proc near
.text:0000000000003000
.text:0000000000003000 var_40          = qword ptr -40h
.text:0000000000003000
.text:0000000000003000 ; __unwind {
.text:0000000000003000                 push    r15
.text:0000000000003002                 push    r14
.text:0000000000003004                 lea     rax, default_quoting_options
.text:000000000000300B                 push    r13
.text:000000000000300D                 push    r12
.text:000000000000300F                 mov     r13, rdi
.text:0000000000003012                 push    rbp
.text:0000000000003013                 push    rbx
.text:0000000000003014                 mov     rbx, r8
.text:0000000000003017                 mov     r14, rsi
.text:000000000000301A                 mov     r15, rdx
.text:000000000000301D                 sub     rsp, 18h
.text:0000000000003021                 test    r8, r8
.text:0000000000003024                 cmovz   rbx, rax
.text:0000000000003028                 mov     [rsp+48h+var_40], rcx
.text:000000000000302D                 call    ___errno_location
.text:0000000000003032                 mov     r12d, [rax]
.text:0000000000003035                 mov     rbp, rax
.text:0000000000003038                 lea     rax, [rbx+8]
.text:000000000000303C                 sub     rsp, 8
.text:0000000000003040                 mov     r9d, [rbx+4]
.text:0000000000003044                 push    qword ptr [rbx+30h]
.text:0000000000003047                 mov     r8d, [rbx]
.text:000000000000304A                 push    qword ptr [rbx+28h]
.text:000000000000304D                 mov     rdx, r15
.text:0000000000003050                 push    rax
.text:0000000000003051                 mov     rcx, [rsp+68h+var_40]
.text:0000000000003056                 mov     rsi, r14
.text:0000000000003059                 mov     rdi, r13
.text:000000000000305C                 call    quotearg_buffer_restyled
.text:0000000000003061                 mov     [rbp+0], r12d
.text:0000000000003065                 add     rsp, 38h
.text:0000000000003069                 pop     rbx
.text:000000000000306A                 pop     rbp
.text:000000000000306B                 pop     r12
.text:000000000000306D                 pop     r13
.text:000000000000306F                 pop     r14
.text:0000000000003071                 pop     r15
.text:0000000000003073                 retn
.text:0000000000003073 ; } // starts at 3000
.text:0000000000003073 quotearg_buffer endp
.text:0000000000003073
.text:0000000000003073 ; ---------------------------------------------------------------------------
.text:0000000000003074                 align 20h
.text:0000000000003080
.text:0000000000003080 ; =============== S U B R O U T I N E =======================================
.text:0000000000003080
.text:0000000000003080 ; Attributes: info_from_lumina
.text:0000000000003080
.text:0000000000003080 ; char *__fastcall quotearg_alloc_mem(const char *arg, size_t argsize, size_t *size, const quoting_options *o)
.text:0000000000003080                 public quotearg_alloc_mem
.text:0000000000003080 quotearg_alloc_mem proc near            ; CODE XREF: quotearg_alloc+5↓j
.text:0000000000003080
.text:0000000000003080 var_5C          = dword ptr -5Ch
.text:0000000000003080 var_58          = qword ptr -58h
.text:0000000000003080 var_50          = qword ptr -50h
.text:0000000000003080 var_48          = qword ptr -48h
.text:0000000000003080 var_40          = qword ptr -40h
.text:0000000000003080
.text:0000000000003080 ; __unwind {
.text:0000000000003080                 push    r15
.text:0000000000003082                 push    r14
.text:0000000000003084                 lea     rax, default_quoting_options
.text:000000000000308B                 push    r13
.text:000000000000308D                 push    r12
.text:000000000000308F                 mov     r12, rdx
.text:0000000000003092                 push    rbp
.text:0000000000003093                 push    rbx
.text:0000000000003094                 mov     rbx, rcx
.text:0000000000003097                 mov     r14, rdi
.text:000000000000309A                 mov     r15, rsi
.text:000000000000309D                 sub     rsp, 38h
.text:00000000000030A1                 test    rcx, rcx
.text:00000000000030A4                 cmovz   rbx, rax
.text:00000000000030A8                 xor     ebp, ebp
.text:00000000000030AA                 call    ___errno_location
.text:00000000000030AF                 test    r12, r12
.text:00000000000030B2                 mov     r13, rax
.text:00000000000030B5                 mov     eax, [rax]
.text:00000000000030B7                 setz    bpl
.text:00000000000030BB                 or      ebp, [rbx+4]
.text:00000000000030BE                 lea     r10, [rbx+8]
.text:00000000000030C2                 sub     rsp, 8
.text:00000000000030C6                 mov     r8d, [rbx]
.text:00000000000030C9                 mov     rcx, r15
.text:00000000000030CC                 mov     [rsp+70h+var_5C], eax
.text:00000000000030D0                 push    qword ptr [rbx+30h]
.text:00000000000030D3                 mov     rdx, r14
.text:00000000000030D6                 push    qword ptr [rbx+28h]
.text:00000000000030D9                 push    r10
.text:00000000000030DB                 xor     esi, esi
.text:00000000000030DD                 mov     r9d, ebp
.text:00000000000030E0                 xor     edi, edi
.text:00000000000030E2                 mov     [rsp+88h+var_48], r10
.text:00000000000030E7                 call    quotearg_buffer_restyled
.text:00000000000030EC                 lea     rsi, [rax+1]
.text:00000000000030F0                 mov     [rsp+88h+var_40], rax
.text:00000000000030F5                 add     rsp, 20h
.text:00000000000030F9                 mov     rdi, rsi
.text:00000000000030FC                 mov     [rsp+68h+var_50], rsi
.text:0000000000003101                 call    xmalloc
.text:0000000000003106                 mov     [rsp+68h+var_58], rax
.text:000000000000310B                 sub     rsp, 8
.text:000000000000310F                 push    qword ptr [rbx+30h]
.text:0000000000003112                 push    qword ptr [rbx+28h]
.text:0000000000003115                 mov     r10, [rsp+80h+var_48]
.text:000000000000311A                 mov     r9d, ebp
.text:000000000000311D                 mov     r8d, [rbx]
.text:0000000000003120                 mov     rcx, r15
.text:0000000000003123                 mov     rdx, r14
.text:0000000000003126                 mov     rdi, rax
.text:0000000000003129                 push    r10
.text:000000000000312B                 mov     rsi, [rsp+88h+var_50]
.text:0000000000003130                 call    quotearg_buffer_restyled
.text:0000000000003135                 mov     eax, [rsp+88h+var_5C]
.text:0000000000003139                 add     rsp, 20h
.text:000000000000313D                 test    r12, r12
.text:0000000000003140                 mov     [r13+0], eax
.text:0000000000003144                 jz      short loc_314F
.text:0000000000003146                 mov     r11, [rsp+68h+var_40]
.text:000000000000314B                 mov     [r12], r11
.text:000000000000314F
.text:000000000000314F loc_314F:                               ; CODE XREF: quotearg_alloc_mem+C4↑j
.text:000000000000314F                 mov     rax, [rsp+68h+var_58]
.text:0000000000003154                 add     rsp, 38h
.text:0000000000003158                 pop     rbx
.text:0000000000003159                 pop     rbp
.text:000000000000315A                 pop     r12
.text:000000000000315C                 pop     r13
.text:000000000000315E                 pop     r14
.text:0000000000003160                 pop     r15
.text:0000000000003162                 retn
.text:0000000000003162 ; } // starts at 3080
.text:0000000000003162 quotearg_alloc_mem endp
.text:0000000000003162
.text:0000000000003162 ; ---------------------------------------------------------------------------
.text:0000000000003163                 align 10h
.text:0000000000003170
.text:0000000000003170 ; =============== S U B R O U T I N E =======================================
.text:0000000000003170
.text:0000000000003170
.text:0000000000003170                 public quotearg_alloc
.text:0000000000003170 quotearg_alloc  proc near
.text:0000000000003170 ; __unwind {
.text:0000000000003170                 mov     rcx, rdx
.text:0000000000003173                 xor     edx, edx
.text:0000000000003175                 jmp     quotearg_alloc_mem
.text:0000000000003175 ; } // starts at 3170
.text:0000000000003175 quotearg_alloc  endp
.text:0000000000003175
.text:0000000000003175 ; ---------------------------------------------------------------------------
.text:000000000000317A                 align 20h
.text:0000000000003180
.text:0000000000003180 ; =============== S U B R O U T I N E =======================================
.text:0000000000003180
.text:0000000000003180 ; Attributes: info_from_lumina
.text:0000000000003180
.text:0000000000003180 ; void __cdecl quotearg_free()
.text:0000000000003180                 public quotearg_free
.text:0000000000003180 quotearg_free   proc near
.text:0000000000003180 ; __unwind {
.text:0000000000003180                 mov     eax, cs:nslots
.text:0000000000003186                 push    r12
.text:0000000000003188                 mov     r12, cs:slotvec
.text:000000000000318F                 push    rbp
.text:0000000000003190                 push    rbx
.text:0000000000003191                 cmp     eax, 1
.text:0000000000003194                 jle     short loc_31C1
.text:0000000000003196                 sub     eax, 2
.text:0000000000003199                 lea     rbx, [r12+18h]
.text:000000000000319E                 shl     rax, 4
.text:00000000000031A2                 lea     rbp, [r12+rax+28h]
.text:00000000000031A7                 nop     word ptr [rax+rax+00000000h]
.text:00000000000031B0
.text:00000000000031B0 loc_31B0:                               ; CODE XREF: quotearg_free+3F↓j
.text:00000000000031B0                 mov     rdi, [rbx]      ; ptr
.text:00000000000031B3                 add     rbx, 10h
.text:00000000000031B7                 call    _free
.text:00000000000031BC                 cmp     rbx, rbp
.text:00000000000031BF                 jnz     short loc_31B0
.text:00000000000031C1
.text:00000000000031C1 loc_31C1:                               ; CODE XREF: quotearg_free+14↑j
.text:00000000000031C1                 mov     rdi, [r12+8]    ; ptr
.text:00000000000031C6                 lea     rbx, slot0
.text:00000000000031CD                 cmp     rdi, rbx
.text:00000000000031D0                 jz      short loc_31E9
.text:00000000000031D2                 call    _free
.text:00000000000031D7                 mov     cs:slotvec0, 100h
.text:00000000000031E2                 mov     cs:off_206078, rbx
.text:00000000000031E9
.text:00000000000031E9 loc_31E9:                               ; CODE XREF: quotearg_free+50↑j
.text:00000000000031E9                 lea     rbx, slotvec0
.text:00000000000031F0                 cmp     r12, rbx
.text:00000000000031F3                 jz      short loc_3204
.text:00000000000031F5                 mov     rdi, r12        ; ptr
.text:00000000000031F8                 call    _free
.text:00000000000031FD                 mov     cs:slotvec, rbx
.text:0000000000003204
.text:0000000000003204 loc_3204:                               ; CODE XREF: quotearg_free+73↑j
.text:0000000000003204                 pop     rbx
.text:0000000000003205                 mov     cs:nslots, 1
.text:000000000000320F                 pop     rbp
.text:0000000000003210                 pop     r12
.text:0000000000003212                 retn
.text:0000000000003212 ; } // starts at 3180
.text:0000000000003212 quotearg_free   endp
.text:0000000000003212
.text:0000000000003212 ; ---------------------------------------------------------------------------
.text:0000000000003213                 align 20h
.text:0000000000003220
.text:0000000000003220 ; =============== S U B R O U T I N E =======================================
.text:0000000000003220
.text:0000000000003220
.text:0000000000003220                 public quotearg_n
.text:0000000000003220 quotearg_n      proc near
.text:0000000000003220 ; __unwind {
.text:0000000000003220                 lea     rcx, default_quoting_options
.text:0000000000003227                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000322E                 jmp     quotearg_n_options
.text:000000000000322E ; } // starts at 3220
.text:000000000000322E quotearg_n      endp
.text:000000000000322E
.text:000000000000322E ; ---------------------------------------------------------------------------
.text:0000000000003233                 align 20h
.text:0000000000003240
.text:0000000000003240 ; =============== S U B R O U T I N E =======================================
.text:0000000000003240
.text:0000000000003240
.text:0000000000003240                 public quotearg_n_mem
.text:0000000000003240 quotearg_n_mem  proc near
.text:0000000000003240 ; __unwind {
.text:0000000000003240                 lea     rcx, default_quoting_options
.text:0000000000003247                 jmp     quotearg_n_options
.text:0000000000003247 ; } // starts at 3240
.text:0000000000003247 quotearg_n_mem  endp
.text:0000000000003247
.text:0000000000003247 ; ---------------------------------------------------------------------------
.text:000000000000324C                 align 10h
.text:0000000000003250
.text:0000000000003250 ; =============== S U B R O U T I N E =======================================
.text:0000000000003250
.text:0000000000003250
.text:0000000000003250                 public quotearg
.text:0000000000003250 quotearg        proc near
.text:0000000000003250 ; __unwind {
.text:0000000000003250                 lea     rcx, default_quoting_options
.text:0000000000003257                 mov     rsi, rdi
.text:000000000000325A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003261                 xor     edi, edi
.text:0000000000003263                 jmp     quotearg_n_options
.text:0000000000003263 ; } // starts at 3250
.text:0000000000003263 quotearg        endp
.text:0000000000003263
.text:0000000000003263 ; ---------------------------------------------------------------------------
.text:0000000000003268                 align 10h
.text:0000000000003270
.text:0000000000003270 ; =============== S U B R O U T I N E =======================================
.text:0000000000003270
.text:0000000000003270
.text:0000000000003270                 public quotearg_mem
.text:0000000000003270 quotearg_mem    proc near
.text:0000000000003270 ; __unwind {
.text:0000000000003270                 lea     rcx, default_quoting_options
.text:0000000000003277                 mov     rdx, rsi
.text:000000000000327A                 mov     rsi, rdi
.text:000000000000327D                 xor     edi, edi
.text:000000000000327F                 jmp     quotearg_n_options
.text:000000000000327F ; } // starts at 3270
.text:000000000000327F quotearg_mem    endp
.text:000000000000327F
.text:000000000000327F ; ---------------------------------------------------------------------------
.text:0000000000003284                 align 10h
.text:0000000000003290
.text:0000000000003290 ; =============== S U B R O U T I N E =======================================
.text:0000000000003290
.text:0000000000003290 ; Attributes: info_from_lumina
.text:0000000000003290
.text:0000000000003290 ; char *__fastcall quotearg_n_style(int n, quoting_style s, const char *arg)
.text:0000000000003290                 public quotearg_n_style
.text:0000000000003290 quotearg_n_style proc near              ; CODE XREF: quotearg_style+7↓j
.text:0000000000003290
.text:0000000000003290 var_48          = dword ptr -48h
.text:0000000000003290 var_44          = qword ptr -44h
.text:0000000000003290 var_3C          = qword ptr -3Ch
.text:0000000000003290 var_34          = qword ptr -34h
.text:0000000000003290 var_2C          = qword ptr -2Ch
.text:0000000000003290 var_24          = qword ptr -24h
.text:0000000000003290 var_1C          = qword ptr -1Ch
.text:0000000000003290 var_14          = dword ptr -14h
.text:0000000000003290 var_10          = qword ptr -10h
.text:0000000000003290
.text:0000000000003290 ; __unwind {
.text:0000000000003290                 sub     rsp, 48h
.text:0000000000003294                 mov     rax, rdx
.text:0000000000003297                 mov     rdx, fs:28h
.text:00000000000032A0                 mov     [rsp+48h+var_10], rdx
.text:00000000000032A5                 xor     edx, edx
.text:00000000000032A7                 cmp     esi, 0Ah
.text:00000000000032AA                 jz      short loc_3314
.text:00000000000032AC                 mov     [rsp+48h+var_48], esi
.text:00000000000032AF                 mov     rcx, rsp
.text:00000000000032B2                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000032B9                 mov     rsi, rax
.text:00000000000032BC                 mov     [rsp+48h+var_44], 0
.text:00000000000032C5                 mov     [rsp+48h+var_3C], 0
.text:00000000000032CE                 mov     [rsp+48h+var_34], 0
.text:00000000000032D7                 mov     [rsp+48h+var_2C], 0
.text:00000000000032E0                 mov     [rsp+48h+var_24], 0
.text:00000000000032E9                 mov     [rsp+48h+var_1C], 0
.text:00000000000032F2                 mov     [rsp+48h+var_14], 0
.text:00000000000032FA                 call    quotearg_n_options
.text:00000000000032FF                 mov     rcx, [rsp+48h+var_10]
.text:0000000000003304                 xor     rcx, fs:28h
.text:000000000000330D                 jnz     short loc_3319
.text:000000000000330F                 add     rsp, 48h
.text:0000000000003313                 retn
.text:0000000000003314 ; ---------------------------------------------------------------------------
.text:0000000000003314
.text:0000000000003314 loc_3314:                               ; CODE XREF: quotearg_n_style+1A↑j
.text:0000000000003314                 call    _abort
.text:0000000000003319 ; ---------------------------------------------------------------------------
.text:0000000000003319
.text:0000000000003319 loc_3319:                               ; CODE XREF: quotearg_n_style+7D↑j
.text:0000000000003319                 call    ___stack_chk_fail
.text:0000000000003319 ; } // starts at 3290
.text:0000000000003319 quotearg_n_style endp
.text:0000000000003319
.text:0000000000003319 ; ---------------------------------------------------------------------------
.text:000000000000331E                 align 20h
.text:0000000000003320
.text:0000000000003320 ; =============== S U B R O U T I N E =======================================
.text:0000000000003320
.text:0000000000003320 ; Attributes: info_from_lumina
.text:0000000000003320
.text:0000000000003320 ; char *__fastcall quotearg_n_style_mem(int n, quoting_style s, const char *arg, size_t argsize)
.text:0000000000003320                 public quotearg_n_style_mem
.text:0000000000003320 quotearg_n_style_mem proc near          ; CODE XREF: quotearg_style_mem+A↓j
.text:0000000000003320
.text:0000000000003320 var_48          = dword ptr -48h
.text:0000000000003320 var_44          = qword ptr -44h
.text:0000000000003320 var_3C          = qword ptr -3Ch
.text:0000000000003320 var_34          = qword ptr -34h
.text:0000000000003320 var_2C          = qword ptr -2Ch
.text:0000000000003320 var_24          = qword ptr -24h
.text:0000000000003320 var_1C          = qword ptr -1Ch
.text:0000000000003320 var_14          = dword ptr -14h
.text:0000000000003320 var_10          = qword ptr -10h
.text:0000000000003320
.text:0000000000003320 ; __unwind {
.text:0000000000003320                 sub     rsp, 48h
.text:0000000000003324                 mov     rax, rdx
.text:0000000000003327                 mov     rdx, rcx
.text:000000000000332A                 mov     rcx, fs:28h
.text:0000000000003333                 mov     [rsp+48h+var_10], rcx
.text:0000000000003338                 xor     ecx, ecx
.text:000000000000333A                 cmp     esi, 0Ah
.text:000000000000333D                 jz      short loc_33A0
.text:000000000000333F                 mov     [rsp+48h+var_48], esi
.text:0000000000003342                 mov     rcx, rsp
.text:0000000000003345                 mov     rsi, rax
.text:0000000000003348                 mov     [rsp+48h+var_44], 0
.text:0000000000003351                 mov     [rsp+48h+var_3C], 0
.text:000000000000335A                 mov     [rsp+48h+var_34], 0
.text:0000000000003363                 mov     [rsp+48h+var_2C], 0
.text:000000000000336C                 mov     [rsp+48h+var_24], 0
.text:0000000000003375                 mov     [rsp+48h+var_1C], 0
.text:000000000000337E                 mov     [rsp+48h+var_14], 0
.text:0000000000003386                 call    quotearg_n_options
.text:000000000000338B                 mov     rdx, [rsp+48h+var_10]
.text:0000000000003390                 xor     rdx, fs:28h
.text:0000000000003399                 jnz     short loc_33A5
.text:000000000000339B                 add     rsp, 48h
.text:000000000000339F                 retn
.text:00000000000033A0 ; ---------------------------------------------------------------------------
.text:00000000000033A0
.text:00000000000033A0 loc_33A0:                               ; CODE XREF: quotearg_n_style_mem+1D↑j
.text:00000000000033A0                 call    _abort
.text:00000000000033A5 ; ---------------------------------------------------------------------------
.text:00000000000033A5
.text:00000000000033A5 loc_33A5:                               ; CODE XREF: quotearg_n_style_mem+79↑j
.text:00000000000033A5                 call    ___stack_chk_fail
.text:00000000000033A5 ; } // starts at 3320
.text:00000000000033A5 quotearg_n_style_mem endp
.text:00000000000033A5
.text:00000000000033A5 ; ---------------------------------------------------------------------------
.text:00000000000033AA                 align 10h
.text:00000000000033B0
.text:00000000000033B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000033B0
.text:00000000000033B0
.text:00000000000033B0                 public quotearg_style
.text:00000000000033B0 quotearg_style  proc near
.text:00000000000033B0 ; __unwind {
.text:00000000000033B0                 mov     rdx, rsi
.text:00000000000033B3                 mov     esi, edi
.text:00000000000033B5                 xor     edi, edi
.text:00000000000033B7                 jmp     quotearg_n_style
.text:00000000000033B7 ; } // starts at 33B0
.text:00000000000033B7 quotearg_style  endp
.text:00000000000033B7
.text:00000000000033B7 ; ---------------------------------------------------------------------------
.text:00000000000033BC                 align 20h
.text:00000000000033C0
.text:00000000000033C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000033C0
.text:00000000000033C0
.text:00000000000033C0                 public quotearg_style_mem
.text:00000000000033C0 quotearg_style_mem proc near
.text:00000000000033C0 ; __unwind {
.text:00000000000033C0                 mov     rcx, rdx
.text:00000000000033C3                 mov     rdx, rsi
.text:00000000000033C6                 mov     esi, edi
.text:00000000000033C8                 xor     edi, edi
.text:00000000000033CA                 jmp     quotearg_n_style_mem
.text:00000000000033CA ; } // starts at 33C0
.text:00000000000033CA quotearg_style_mem endp
.text:00000000000033CA
.text:00000000000033CA ; ---------------------------------------------------------------------------
.text:00000000000033CF                 align 10h
.text:00000000000033D0
.text:00000000000033D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000033D0
.text:00000000000033D0 ; Attributes: info_from_lumina
.text:00000000000033D0
.text:00000000000033D0 ; char *__fastcall quotearg_char_mem(const char *arg, size_t argsize, char ch_0)
.text:00000000000033D0                 public quotearg_char_mem
.text:00000000000033D0 quotearg_char_mem proc near             ; CODE XREF: quotearg_char+B↓j
.text:00000000000033D0                                         ; quotearg_colon+C↓j ...
.text:00000000000033D0
.text:00000000000033D0 var_48          = xmmword ptr -48h
.text:00000000000033D0 var_38          = xmmword ptr -38h
.text:00000000000033D0 var_28          = xmmword ptr -28h
.text:00000000000033D0 var_18          = qword ptr -18h
.text:00000000000033D0 var_10          = qword ptr -10h
.text:00000000000033D0
.text:00000000000033D0 ; __unwind {
.text:00000000000033D0                 sub     rsp, 48h
.text:00000000000033D4                 mov     ecx, edx
.text:00000000000033D6                 mov     rax, fs:28h
.text:00000000000033DF                 mov     [rsp+48h+var_10], rax
.text:00000000000033E4                 xor     eax, eax
.text:00000000000033E6                 mov     rax, cs:qword_206210
.text:00000000000033ED                 mov     r8, rsp
.text:00000000000033F0                 and     ecx, 1Fh
.text:00000000000033F3                 movdqa  xmm0, cs:default_quoting_options
.text:00000000000033FB                 mov     [rsp+48h+var_18], rax
.text:0000000000003400                 mov     eax, edx
.text:0000000000003402                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000003406                 shr     al, 5
.text:0000000000003409                 movzx   eax, al
.text:000000000000340C                 lea     r9, [r8+rax*4+8]
.text:0000000000003411                 movdqa  xmm0, cs:xmmword_2061F0
.text:0000000000003419                 movaps  [rsp+48h+var_38], xmm0
.text:000000000000341E                 movdqa  xmm0, cs:xmmword_206200
.text:0000000000003426                 movaps  [rsp+48h+var_28], xmm0
.text:000000000000342B                 mov     edx, [r9]
.text:000000000000342E                 mov     eax, edx
.text:0000000000003430                 shr     eax, cl
.text:0000000000003432                 not     eax
.text:0000000000003434                 and     eax, 1
.text:0000000000003437                 shl     eax, cl
.text:0000000000003439                 mov     rcx, r8
.text:000000000000343C                 xor     eax, edx
.text:000000000000343E                 mov     rdx, rsi
.text:0000000000003441                 mov     rsi, rdi
.text:0000000000003444                 mov     [r9], eax
.text:0000000000003447                 xor     edi, edi
.text:0000000000003449                 call    quotearg_n_options
.text:000000000000344E                 mov     rsi, [rsp+48h+var_10]
.text:0000000000003453                 xor     rsi, fs:28h
.text:000000000000345C                 jnz     short loc_3463
.text:000000000000345E                 add     rsp, 48h
.text:0000000000003462                 retn
.text:0000000000003463 ; ---------------------------------------------------------------------------
.text:0000000000003463
.text:0000000000003463 loc_3463:                               ; CODE XREF: quotearg_char_mem+8C↑j
.text:0000000000003463                 call    ___stack_chk_fail
.text:0000000000003463 ; } // starts at 33D0
.text:0000000000003463 quotearg_char_mem endp
.text:0000000000003463
.text:0000000000003463 ; ---------------------------------------------------------------------------
.text:0000000000003468                 align 10h
.text:0000000000003470
.text:0000000000003470 ; =============== S U B R O U T I N E =======================================
.text:0000000000003470
.text:0000000000003470
.text:0000000000003470                 public quotearg_char
.text:0000000000003470 quotearg_char   proc near
.text:0000000000003470 ; __unwind {
.text:0000000000003470                 movsx   edx, sil
.text:0000000000003474                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000347B                 jmp     quotearg_char_mem
.text:000000000000347B ; } // starts at 3470
.text:000000000000347B quotearg_char   endp
.text:000000000000347B
.text:0000000000003480
.text:0000000000003480 ; =============== S U B R O U T I N E =======================================
.text:0000000000003480
.text:0000000000003480
.text:0000000000003480                 public quotearg_colon
.text:0000000000003480 quotearg_colon  proc near               ; CODE XREF: close_stdout+65↑p
.text:0000000000003480 ; __unwind {
.text:0000000000003480                 mov     edx, 3Ah ; ':'
.text:0000000000003485                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000348C                 jmp     quotearg_char_mem
.text:000000000000348C ; } // starts at 3480
.text:000000000000348C quotearg_colon  endp
.text:000000000000348C
.text:000000000000348C ; ---------------------------------------------------------------------------
.text:0000000000003491                 align 20h
.text:00000000000034A0
.text:00000000000034A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000034A0
.text:00000000000034A0
.text:00000000000034A0                 public quotearg_colon_mem
.text:00000000000034A0 quotearg_colon_mem proc near
.text:00000000000034A0 ; __unwind {
.text:00000000000034A0                 mov     edx, 3Ah ; ':'
.text:00000000000034A5                 jmp     quotearg_char_mem
.text:00000000000034A5 ; } // starts at 34A0
.text:00000000000034A5 quotearg_colon_mem endp
.text:00000000000034A5
.text:00000000000034A5 ; ---------------------------------------------------------------------------
.text:00000000000034AA                 align 10h
.text:00000000000034B0
.text:00000000000034B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000034B0
.text:00000000000034B0 ; Attributes: info_from_lumina
.text:00000000000034B0
.text:00000000000034B0 ; char *__fastcall quotearg_n_style_colon(int n, quoting_style s, const char *arg)
.text:00000000000034B0                 public quotearg_n_style_colon
.text:00000000000034B0 quotearg_n_style_colon proc near
.text:00000000000034B0
.text:00000000000034B0 var_48          = dword ptr -48h
.text:00000000000034B0 var_44          = qword ptr -44h
.text:00000000000034B0 var_3C          = qword ptr -3Ch
.text:00000000000034B0 var_34          = qword ptr -34h
.text:00000000000034B0 var_2C          = qword ptr -2Ch
.text:00000000000034B0 var_24          = qword ptr -24h
.text:00000000000034B0 var_1C          = qword ptr -1Ch
.text:00000000000034B0 var_14          = dword ptr -14h
.text:00000000000034B0 var_10          = qword ptr -10h
.text:00000000000034B0
.text:00000000000034B0 ; __unwind {
.text:00000000000034B0                 sub     rsp, 48h
.text:00000000000034B4                 mov     rax, rdx
.text:00000000000034B7                 mov     rdx, fs:28h
.text:00000000000034C0                 mov     [rsp+48h+var_10], rdx
.text:00000000000034C5                 xor     edx, edx
.text:00000000000034C7                 cmp     esi, 0Ah
.text:00000000000034CA                 jz      short loc_3534
.text:00000000000034CC                 mov     [rsp+48h+var_48], esi
.text:00000000000034CF                 mov     rcx, rsp
.text:00000000000034D2                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000034D9                 mov     rsi, rax
.text:00000000000034DC                 mov     [rsp+48h+var_44], 0
.text:00000000000034E5                 mov     [rsp+48h+var_3C], 4000000h
.text:00000000000034EE                 mov     [rsp+48h+var_34], 0
.text:00000000000034F7                 mov     [rsp+48h+var_2C], 0
.text:0000000000003500                 mov     [rsp+48h+var_24], 0
.text:0000000000003509                 mov     [rsp+48h+var_1C], 0
.text:0000000000003512                 mov     [rsp+48h+var_14], 0
.text:000000000000351A                 call    quotearg_n_options
.text:000000000000351F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000003524                 xor     rcx, fs:28h
.text:000000000000352D                 jnz     short loc_3539
.text:000000000000352F                 add     rsp, 48h
.text:0000000000003533                 retn
.text:0000000000003534 ; ---------------------------------------------------------------------------
.text:0000000000003534
.text:0000000000003534 loc_3534:                               ; CODE XREF: quotearg_n_style_colon+1A↑j
.text:0000000000003534                 call    _abort
.text:0000000000003539 ; ---------------------------------------------------------------------------
.text:0000000000003539
.text:0000000000003539 loc_3539:                               ; CODE XREF: quotearg_n_style_colon+7D↑j
.text:0000000000003539                 call    ___stack_chk_fail
.text:0000000000003539 ; } // starts at 34B0
.text:0000000000003539 quotearg_n_style_colon endp
.text:0000000000003539
.text:0000000000003539 ; ---------------------------------------------------------------------------
.text:000000000000353E                 align 20h
.text:0000000000003540
.text:0000000000003540 ; =============== S U B R O U T I N E =======================================
.text:0000000000003540
.text:0000000000003540 ; Attributes: info_from_lumina
.text:0000000000003540
.text:0000000000003540 ; char *__fastcall quotearg_n_custom_mem(int n, const char *left_quote, const char *right_quote, const char *arg, size_t argsize)
.text:0000000000003540                 public quotearg_n_custom_mem
.text:0000000000003540 quotearg_n_custom_mem proc near         ; CODE XREF: quotearg_n_custom+7↓j
.text:0000000000003540                                         ; quotearg_custom+12↓j ...
.text:0000000000003540
.text:0000000000003540 var_48          = xmmword ptr -48h
.text:0000000000003540 var_38          = xmmword ptr -38h
.text:0000000000003540 var_28          = xmmword ptr -28h
.text:0000000000003540 var_18          = qword ptr -18h
.text:0000000000003540 var_10          = qword ptr -10h
.text:0000000000003540
.text:0000000000003540 ; __unwind {
.text:0000000000003540                 sub     rsp, 48h
.text:0000000000003544                 mov     r9, rcx
.text:0000000000003547                 mov     rcx, cs:qword_206210
.text:000000000000354E                 movdqa  xmm0, cs:default_quoting_options
.text:0000000000003556                 mov     rax, fs:28h
.text:000000000000355F                 mov     [rsp+48h+var_10], rax
.text:0000000000003564                 xor     eax, eax
.text:0000000000003566                 movaps  [rsp+48h+var_48], xmm0
.text:000000000000356A                 test    rsi, rsi
.text:000000000000356D                 mov     [rsp+48h+var_18], rcx
.text:0000000000003572                 mov     dword ptr [rsp+48h+var_48], 0Ah
.text:0000000000003579                 movdqa  xmm0, cs:xmmword_2061F0
.text:0000000000003581                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000003586                 movdqa  xmm0, cs:xmmword_206200
.text:000000000000358E                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000003593                 jz      short loc_35C7
.text:0000000000003595                 test    rdx, rdx
.text:0000000000003598                 jz      short loc_35C7
.text:000000000000359A                 mov     qword ptr [rsp+48h+var_28+8], rsi
.text:000000000000359F                 mov     [rsp+48h+var_18], rdx
.text:00000000000035A4                 mov     rcx, rsp
.text:00000000000035A7                 mov     rdx, r8
.text:00000000000035AA                 mov     rsi, r9
.text:00000000000035AD                 call    quotearg_n_options
.text:00000000000035B2                 mov     rdi, [rsp+48h+var_10]
.text:00000000000035B7                 xor     rdi, fs:28h
.text:00000000000035C0                 jnz     short loc_35CC
.text:00000000000035C2                 add     rsp, 48h
.text:00000000000035C6                 retn
.text:00000000000035C7 ; ---------------------------------------------------------------------------
.text:00000000000035C7
.text:00000000000035C7 loc_35C7:                               ; CODE XREF: quotearg_n_custom_mem+53↑j
.text:00000000000035C7                                         ; quotearg_n_custom_mem+58↑j
.text:00000000000035C7                 call    _abort
.text:00000000000035CC ; ---------------------------------------------------------------------------
.text:00000000000035CC
.text:00000000000035CC loc_35CC:                               ; CODE XREF: quotearg_n_custom_mem+80↑j
.text:00000000000035CC                 call    ___stack_chk_fail
.text:00000000000035CC ; } // starts at 3540
.text:00000000000035CC quotearg_n_custom_mem endp
.text:00000000000035CC
.text:00000000000035CC ; ---------------------------------------------------------------------------
.text:00000000000035D1                 align 20h
.text:00000000000035E0
.text:00000000000035E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000035E0
.text:00000000000035E0
.text:00000000000035E0                 public quotearg_n_custom
.text:00000000000035E0 quotearg_n_custom proc near
.text:00000000000035E0 ; __unwind {
.text:00000000000035E0                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:00000000000035E7                 jmp     quotearg_n_custom_mem
.text:00000000000035E7 ; } // starts at 35E0
.text:00000000000035E7 quotearg_n_custom endp
.text:00000000000035E7
.text:00000000000035E7 ; ---------------------------------------------------------------------------
.text:00000000000035EC                 align 10h
.text:00000000000035F0
.text:00000000000035F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000035F0
.text:00000000000035F0
.text:00000000000035F0                 public quotearg_custom
.text:00000000000035F0 quotearg_custom proc near
.text:00000000000035F0 ; __unwind {
.text:00000000000035F0                 mov     rcx, rdx
.text:00000000000035F3                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:00000000000035FA                 mov     rdx, rsi
.text:00000000000035FD                 mov     rsi, rdi
.text:0000000000003600                 xor     edi, edi
.text:0000000000003602                 jmp     quotearg_n_custom_mem
.text:0000000000003602 ; } // starts at 35F0
.text:0000000000003602 quotearg_custom endp
.text:0000000000003602
.text:0000000000003602 ; ---------------------------------------------------------------------------
.text:0000000000003607                 align 10h
.text:0000000000003610
.text:0000000000003610 ; =============== S U B R O U T I N E =======================================
.text:0000000000003610
.text:0000000000003610
.text:0000000000003610                 public quotearg_custom_mem
.text:0000000000003610 quotearg_custom_mem proc near
.text:0000000000003610 ; __unwind {
.text:0000000000003610                 mov     r8, rcx
.text:0000000000003613                 mov     rcx, rdx
.text:0000000000003616                 mov     rdx, rsi
.text:0000000000003619                 mov     rsi, rdi
.text:000000000000361C                 xor     edi, edi
.text:000000000000361E                 jmp     quotearg_n_custom_mem
.text:000000000000361E ; } // starts at 3610
.text:000000000000361E quotearg_custom_mem endp
.text:000000000000361E
.text:000000000000361E ; ---------------------------------------------------------------------------
.text:0000000000003623                 align 10h
.text:0000000000003630
.text:0000000000003630 ; =============== S U B R O U T I N E =======================================
.text:0000000000003630
.text:0000000000003630
.text:0000000000003630                 public quote_n_mem
.text:0000000000003630 quote_n_mem     proc near
.text:0000000000003630 ; __unwind {
.text:0000000000003630                 lea     rcx, quote_quoting_options
.text:0000000000003637                 jmp     quotearg_n_options
.text:0000000000003637 ; } // starts at 3630
.text:0000000000003637 quote_n_mem     endp
.text:0000000000003637
.text:0000000000003637 ; ---------------------------------------------------------------------------
.text:000000000000363C                 align 20h
.text:0000000000003640
.text:0000000000003640 ; =============== S U B R O U T I N E =======================================
.text:0000000000003640
.text:0000000000003640
.text:0000000000003640                 public quote_mem
.text:0000000000003640 quote_mem       proc near
.text:0000000000003640 ; __unwind {
.text:0000000000003640                 lea     rcx, quote_quoting_options
.text:0000000000003647                 mov     rdx, rsi
.text:000000000000364A                 mov     rsi, rdi
.text:000000000000364D                 xor     edi, edi
.text:000000000000364F                 jmp     quotearg_n_options
.text:000000000000364F ; } // starts at 3640
.text:000000000000364F quote_mem       endp
.text:000000000000364F
.text:000000000000364F ; ---------------------------------------------------------------------------
.text:0000000000003654                 align 20h
.text:0000000000003660
.text:0000000000003660 ; =============== S U B R O U T I N E =======================================
.text:0000000000003660
.text:0000000000003660
.text:0000000000003660                 public quote_n
.text:0000000000003660 quote_n         proc near
.text:0000000000003660 ; __unwind {
.text:0000000000003660                 lea     rcx, quote_quoting_options
.text:0000000000003667                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000366E                 jmp     quotearg_n_options
.text:000000000000366E ; } // starts at 3660
.text:000000000000366E quote_n         endp
.text:000000000000366E
.text:000000000000366E ; ---------------------------------------------------------------------------
.text:0000000000003673                 align 20h
.text:0000000000003680
.text:0000000000003680 ; =============== S U B R O U T I N E =======================================
.text:0000000000003680
.text:0000000000003680
.text:0000000000003680                 public quote
.text:0000000000003680 quote           proc near
.text:0000000000003680 ; __unwind {
.text:0000000000003680                 lea     rcx, quote_quoting_options
.text:0000000000003687                 mov     rsi, rdi
.text:000000000000368A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003691                 xor     edi, edi
.text:0000000000003693                 jmp     quotearg_n_options
.text:0000000000003693 ; } // starts at 3680
.text:0000000000003693 quote           endp
.text:0000000000003693
.text:0000000000003693 ; ---------------------------------------------------------------------------
.text:0000000000003698                 align 20h
.text:00000000000036A0
.text:00000000000036A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000036A0
.text:00000000000036A0
.text:00000000000036A0 ; __int64 __fastcall version_etc_arn(FILE *stream)
.text:00000000000036A0                 public version_etc_arn
.text:00000000000036A0 version_etc_arn proc near               ; CODE XREF: version_etc_ar:loc_3ADB↓j
.text:00000000000036A0                                         ; version_etc_va:loc_3B2B↓p ...
.text:00000000000036A0
.text:00000000000036A0 var_58          = qword ptr -58h
.text:00000000000036A0 var_50          = qword ptr -50h
.text:00000000000036A0 var_48          = qword ptr -48h
.text:00000000000036A0 var_40          = qword ptr -40h
.text:00000000000036A0
.text:00000000000036A0 ; __unwind {
.text:00000000000036A0                 push    r15
.text:00000000000036A2                 push    r14
.text:00000000000036A4                 push    r13
.text:00000000000036A6                 push    r12
.text:00000000000036A8                 mov     r12, r9
.text:00000000000036AB                 push    rbp
.text:00000000000036AC                 push    rbx
.text:00000000000036AD                 mov     rbp, rdi
.text:00000000000036B0                 mov     rbx, r8
.text:00000000000036B3                 sub     rsp, 28h
.text:00000000000036B7                 test    rsi, rsi
.text:00000000000036BA                 jz      loc_37D8
.text:00000000000036C0                 mov     r8, rdx
.text:00000000000036C3                 lea     rdx, aSSS       ; "%s (%s) %s\n"
.text:00000000000036CA                 mov     r9, rcx
.text:00000000000036CD                 xor     eax, eax
.text:00000000000036CF                 mov     rcx, rsi
.text:00000000000036D2                 mov     esi, 1
.text:00000000000036D7                 call    ___fprintf_chk
.text:00000000000036DC
.text:00000000000036DC loc_36DC:                               ; CODE XREF: version_etc_arn+151↓j
.text:00000000000036DC                 lea     rsi, aC_0       ; "(C)"
.text:00000000000036E3                 xor     edi, edi        ; domainname
.text:00000000000036E5                 mov     edx, 5          ; category
.text:00000000000036EA                 call    _dcgettext
.text:00000000000036EF                 lea     rdx, version_etc_copyright ; "Copyright %s %d Free Software Foundatio"...
.text:00000000000036F6                 mov     rcx, rax
.text:00000000000036F9                 mov     r8d, 7E3h
.text:00000000000036FF                 mov     esi, 1
.text:0000000000003704                 mov     rdi, rbp
.text:0000000000003707                 xor     eax, eax
.text:0000000000003709                 call    ___fprintf_chk
.text:000000000000370E                 lea     rsi, aLicenseGplv3Gn ; "\nLicense GPLv3+: GNU GPL version 3 or "...
.text:0000000000003715                 xor     edi, edi        ; domainname
.text:0000000000003717                 mov     edx, 5          ; category
.text:000000000000371C                 call    _dcgettext
.text:0000000000003721                 mov     rsi, rbp        ; stream
.text:0000000000003724                 mov     rdi, rax        ; s
.text:0000000000003727                 call    _fputs_unlocked
.text:000000000000372C                 cmp     r12, 9          ; switch 10 cases
.text:0000000000003730                 ja      def_3744        ; jumptable 0000000000003744 default case
.text:0000000000003736                 lea     rdx, jpt_3744
.text:000000000000373D                 movsxd  rax, ds:(jpt_3744 - 4E28h)[rdx+r12*4]
.text:0000000000003741                 add     rax, rdx
.text:0000000000003744                 jmp     rax             ; switch jump
.text:0000000000003744 ; ---------------------------------------------------------------------------
.text:0000000000003746                 align 10h
.text:0000000000003750
.text:0000000000003750 loc_3750:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003750                                         ; DATA XREF: .rodata:jpt_3744↓o
.text:0000000000003750                 mov     r9, [rbx+38h]   ; jumptable 0000000000003744 case 8
.text:0000000000003754                 mov     rax, [rbx+10h]
.text:0000000000003758                 lea     rsi, aWrittenBySSSSS ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000375F                 mov     r8, [rbx+8]
.text:0000000000003763                 mov     edx, 5          ; category
.text:0000000000003768                 xor     edi, edi        ; domainname
.text:000000000000376A                 mov     r13, [rbx+30h]
.text:000000000000376E                 mov     r12, [rbx+28h]
.text:0000000000003772                 mov     [rsp+58h+var_48], r9
.text:0000000000003777                 mov     r15, [rbx+20h]
.text:000000000000377B                 mov     r14, [rbx+18h]
.text:000000000000377F                 mov     [rsp+58h+var_58], rax
.text:0000000000003783                 mov     [rsp+58h+var_50], r8
.text:0000000000003788                 mov     rbx, [rbx]
.text:000000000000378B                 call    _dcgettext
.text:0000000000003790                 sub     rsp, 8
.text:0000000000003794
.text:0000000000003794 loc_3794:                               ; CODE XREF: version_etc_arn+1B0↓j
.text:0000000000003794                 mov     r9, [rsp+60h+var_48]
.text:0000000000003799                 mov     rdx, rax
.text:000000000000379C                 mov     rcx, rbx
.text:000000000000379F                 mov     esi, 1
.text:00000000000037A4                 mov     rdi, rbp
.text:00000000000037A7                 xor     eax, eax
.text:00000000000037A9                 push    r9
.text:00000000000037AB                 push    r13
.text:00000000000037AD                 push    r12
.text:00000000000037AF                 push    r15
.text:00000000000037B1                 push    r14
.text:00000000000037B3                 mov     r9, [rsp+88h+var_58]
.text:00000000000037B8                 mov     r8, [rsp+88h+var_50]
.text:00000000000037BD                 call    ___fprintf_chk
.text:00000000000037C2                 add     rsp, 30h
.text:00000000000037C6
.text:00000000000037C6 loc_37C6:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000037C6                                         ; DATA XREF: .rodata:jpt_3744↓o
.text:00000000000037C6                 add     rsp, 28h        ; jumptable 0000000000003744 case 0
.text:00000000000037CA                 pop     rbx
.text:00000000000037CB                 pop     rbp
.text:00000000000037CC                 pop     r12
.text:00000000000037CE                 pop     r13
.text:00000000000037D0                 pop     r14
.text:00000000000037D2                 pop     r15
.text:00000000000037D4                 retn
.text:00000000000037D4 ; ---------------------------------------------------------------------------
.text:00000000000037D5                 align 8
.text:00000000000037D8
.text:00000000000037D8 loc_37D8:                               ; CODE XREF: version_etc_arn+1A↑j
.text:00000000000037D8                 mov     r8, rcx
.text:00000000000037DB                 mov     rcx, rdx
.text:00000000000037DE                 lea     rdx, aSS_0      ; "%s %s\n"
.text:00000000000037E5                 mov     esi, 1
.text:00000000000037EA                 xor     eax, eax
.text:00000000000037EC                 call    ___fprintf_chk
.text:00000000000037F1                 jmp     loc_36DC
.text:00000000000037F1 ; ---------------------------------------------------------------------------
.text:00000000000037F6                 align 20h
.text:0000000000003800
.text:0000000000003800 loc_3800:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003800                                         ; DATA XREF: .rodata:jpt_3744↓o
.text:0000000000003800                 mov     r10, [rbx+40h]  ; jumptable 0000000000003744 case 9
.text:0000000000003804                 mov     r9, [rbx+38h]
.text:0000000000003808                 lea     rsi, aWrittenBySSSSS_0 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000380F                 mov     rax, [rbx+10h]
.text:0000000000003813                 mov     r8, [rbx+8]
.text:0000000000003817                 mov     edx, 5          ; category
.text:000000000000381C                 mov     r13, [rbx+30h]
.text:0000000000003820                 mov     r12, [rbx+28h]
.text:0000000000003824                 mov     r15, [rbx+20h]
.text:0000000000003828                 mov     r14, [rbx+18h]
.text:000000000000382C                 mov     rbx, [rbx]
.text:000000000000382F                 mov     [rsp+58h+var_40], r10
.text:0000000000003834                 mov     [rsp+58h+var_48], r9
.text:0000000000003839                 mov     [rsp+58h+var_58], rax
.text:000000000000383D                 mov     [rsp+58h+var_50], r8
.text:0000000000003842
.text:0000000000003842 loc_3842:                               ; CODE XREF: version_etc_arn+412↓j
.text:0000000000003842                 xor     edi, edi        ; domainname
.text:0000000000003844                 call    _dcgettext
.text:0000000000003849                 mov     r10, [rsp+58h+var_40]
.text:000000000000384E                 push    r10
.text:0000000000003850                 jmp     loc_3794
.text:0000000000003850 ; ---------------------------------------------------------------------------
.text:0000000000003855                 align 8
.text:0000000000003858
.text:0000000000003858 loc_3858:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003858                                         ; DATA XREF: .rodata:jpt_3744↓o
.text:0000000000003858                 mov     rbx, [rbx]      ; jumptable 0000000000003744 case 1
.text:000000000000385B                 lea     rsi, aWrittenByS ; "Written by %s.\n"
.text:0000000000003862                 mov     edx, 5          ; category
.text:0000000000003867                 xor     edi, edi        ; domainname
.text:0000000000003869                 call    _dcgettext
.text:000000000000386E                 add     rsp, 28h
.text:0000000000003872                 mov     rcx, rbx
.text:0000000000003875                 mov     rdi, rbp
.text:0000000000003878                 pop     rbx
.text:0000000000003879                 pop     rbp
.text:000000000000387A                 pop     r12
.text:000000000000387C                 pop     r13
.text:000000000000387E                 pop     r14
.text:0000000000003880                 pop     r15
.text:0000000000003882                 mov     rdx, rax
.text:0000000000003885                 mov     esi, 1
.text:000000000000388A                 xor     eax, eax
.text:000000000000388C                 jmp     ___fprintf_chk
.text:000000000000388C ; ---------------------------------------------------------------------------
.text:0000000000003891                 align 8
.text:0000000000003898
.text:0000000000003898 loc_3898:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003898                                         ; DATA XREF: .rodata:jpt_3744↓o
.text:0000000000003898                 mov     r12, [rbx+8]    ; jumptable 0000000000003744 case 2
.text:000000000000389C                 lea     rsi, aWrittenBySAndS ; "Written by %s and %s.\n"
.text:00000000000038A3                 mov     rbx, [rbx]
.text:00000000000038A6                 mov     edx, 5          ; category
.text:00000000000038AB                 xor     edi, edi        ; domainname
.text:00000000000038AD                 call    _dcgettext
.text:00000000000038B2                 add     rsp, 28h
.text:00000000000038B6                 mov     r8, r12
.text:00000000000038B9                 mov     rcx, rbx
.text:00000000000038BC                 mov     rdi, rbp
.text:00000000000038BF                 mov     rdx, rax
.text:00000000000038C2                 mov     esi, 1
.text:00000000000038C7                 pop     rbx
.text:00000000000038C8                 pop     rbp
.text:00000000000038C9                 pop     r12
.text:00000000000038CB                 pop     r13
.text:00000000000038CD                 pop     r14
.text:00000000000038CF                 pop     r15
.text:00000000000038D1                 xor     eax, eax
.text:00000000000038D3                 jmp     ___fprintf_chk
.text:00000000000038D3 ; ---------------------------------------------------------------------------
.text:00000000000038D8                 align 20h
.text:00000000000038E0
.text:00000000000038E0 loc_38E0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000038E0                                         ; DATA XREF: .rodata:jpt_3744↓o
.text:00000000000038E0                 mov     r13, [rbx+10h]  ; jumptable 0000000000003744 case 3
.text:00000000000038E4                 mov     r12, [rbx+8]
.text:00000000000038E8                 lea     rsi, aWrittenBySSAnd ; "Written by %s, %s, and %s.\n"
.text:00000000000038EF                 mov     rbx, [rbx]
.text:00000000000038F2                 mov     edx, 5          ; category
.text:00000000000038F7                 xor     edi, edi        ; domainname
.text:00000000000038F9                 call    _dcgettext
.text:00000000000038FE                 add     rsp, 28h
.text:0000000000003902                 mov     r9, r13
.text:0000000000003905                 mov     r8, r12
.text:0000000000003908                 mov     rcx, rbx
.text:000000000000390B                 mov     rdi, rbp
.text:000000000000390E                 mov     rdx, rax
.text:0000000000003911                 pop     rbx
.text:0000000000003912                 pop     rbp
.text:0000000000003913                 pop     r12
.text:0000000000003915                 pop     r13
.text:0000000000003917                 pop     r14
.text:0000000000003919                 pop     r15
.text:000000000000391B                 mov     esi, 1
.text:0000000000003920                 xor     eax, eax
.text:0000000000003922                 jmp     ___fprintf_chk
.text:0000000000003922 ; ---------------------------------------------------------------------------
.text:0000000000003927                 align 10h
.text:0000000000003930
.text:0000000000003930 loc_3930:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003930                                         ; DATA XREF: .rodata:jpt_3744↓o
.text:0000000000003930                 lea     rsi, aWrittenBySSSAn ; jumptable 0000000000003744 case 4
.text:0000000000003937                 mov     edx, 5          ; category
.text:000000000000393C                 xor     edi, edi        ; domainname
.text:000000000000393E                 mov     r14, [rbx+18h]
.text:0000000000003942                 mov     r13, [rbx+10h]
.text:0000000000003946                 mov     r12, [rbx+8]
.text:000000000000394A                 mov     rbx, [rbx]
.text:000000000000394D                 call    _dcgettext
.text:0000000000003952                 sub     rsp, 8
.text:0000000000003956
.text:0000000000003956 loc_3956:                               ; CODE XREF: version_etc_arn+310↓j
.text:0000000000003956                 push    r14
.text:0000000000003958                 mov     rdx, rax
.text:000000000000395B                 mov     r9, r13
.text:000000000000395E                 mov     r8, r12
.text:0000000000003961                 mov     rcx, rbx
.text:0000000000003964                 mov     rdi, rbp
.text:0000000000003967                 mov     esi, 1
.text:000000000000396C                 xor     eax, eax
.text:000000000000396E                 call    ___fprintf_chk
.text:0000000000003973                 pop     rax
.text:0000000000003974                 pop     rdx
.text:0000000000003975                 add     rsp, 28h
.text:0000000000003979                 pop     rbx
.text:000000000000397A                 pop     rbp
.text:000000000000397B                 pop     r12
.text:000000000000397D                 pop     r13
.text:000000000000397F                 pop     r14
.text:0000000000003981                 pop     r15
.text:0000000000003983                 retn
.text:0000000000003983 ; ---------------------------------------------------------------------------
.text:0000000000003984                 align 8
.text:0000000000003988
.text:0000000000003988 loc_3988:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003988                                         ; DATA XREF: .rodata:jpt_3744↓o
.text:0000000000003988                 mov     r15, [rbx+20h]  ; jumptable 0000000000003744 case 5
.text:000000000000398C                 lea     rsi, aWrittenBySSSSA ; "Written by %s, %s, %s,\n%s, and %s.\n"
.text:0000000000003993                 mov     edx, 5          ; category
.text:0000000000003998                 xor     edi, edi        ; domainname
.text:000000000000399A                 mov     r14, [rbx+18h]
.text:000000000000399E                 mov     r13, [rbx+10h]
.text:00000000000039A2                 mov     r12, [rbx+8]
.text:00000000000039A6                 mov     rbx, [rbx]
.text:00000000000039A9                 call    _dcgettext
.text:00000000000039AE                 push    r15
.text:00000000000039B0                 jmp     short loc_3956
.text:00000000000039B0 ; ---------------------------------------------------------------------------
.text:00000000000039B2                 align 8
.text:00000000000039B8
.text:00000000000039B8 loc_39B8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000039B8                                         ; DATA XREF: .rodata:jpt_3744↓o
.text:00000000000039B8                 mov     r8, [rbx+8]     ; jumptable 0000000000003744 case 6
.text:00000000000039BC                 mov     r12, [rbx+28h]
.text:00000000000039C0                 lea     rsi, aWrittenBySSSSS_1 ; "Written by %s, %s, %s,\n%s, %s, and %s."...
.text:00000000000039C7                 mov     r15, [rbx+20h]
.text:00000000000039CB                 mov     r14, [rbx+18h]
.text:00000000000039CF                 mov     edx, 5          ; category
.text:00000000000039D4                 mov     r13, [rbx+10h]
.text:00000000000039D8                 xor     edi, edi        ; domainname
.text:00000000000039DA                 mov     rbx, [rbx]
.text:00000000000039DD                 mov     [rsp+58h+var_58], r8
.text:00000000000039E1                 call    _dcgettext
.text:00000000000039E6                 sub     rsp, 8
.text:00000000000039EA                 mov     r9, r13
.text:00000000000039ED                 push    r12
.text:00000000000039EF                 push    r15
.text:00000000000039F1                 push    r14
.text:00000000000039F3
.text:00000000000039F3 loc_39F3:                               ; CODE XREF: version_etc_arn+3C4↓j
.text:00000000000039F3                 mov     r8, [rsp+78h+var_58]
.text:00000000000039F8                 mov     rcx, rbx
.text:00000000000039FB                 mov     rdx, rax
.text:00000000000039FE                 mov     rdi, rbp
.text:0000000000003A01                 mov     esi, 1
.text:0000000000003A06                 xor     eax, eax
.text:0000000000003A08                 call    ___fprintf_chk
.text:0000000000003A0D                 add     rsp, 20h
.text:0000000000003A11                 add     rsp, 28h
.text:0000000000003A15                 pop     rbx
.text:0000000000003A16                 pop     rbp
.text:0000000000003A17                 pop     r12
.text:0000000000003A19                 pop     r13
.text:0000000000003A1B                 pop     r14
.text:0000000000003A1D                 pop     r15
.text:0000000000003A1F                 retn
.text:0000000000003A20 ; ---------------------------------------------------------------------------
.text:0000000000003A20
.text:0000000000003A20 loc_3A20:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003A20                                         ; DATA XREF: .rodata:jpt_3744↓o
.text:0000000000003A20                 mov     r9, [rbx+10h]   ; jumptable 0000000000003744 case 7
.text:0000000000003A24                 mov     r13, [rbx+30h]
.text:0000000000003A28                 lea     rsi, aWrittenBySSSSS_2 ; "Written by %s, %s, %s,\n%s, %s, %s, and"...
.text:0000000000003A2F                 mov     r12, [rbx+28h]
.text:0000000000003A33                 mov     r15, [rbx+20h]
.text:0000000000003A37                 mov     edx, 5          ; category
.text:0000000000003A3C                 mov     r14, [rbx+18h]
.text:0000000000003A40                 mov     r8, [rbx+8]
.text:0000000000003A44                 xor     edi, edi        ; domainname
.text:0000000000003A46                 mov     [rsp+58h+var_50], r9
.text:0000000000003A4B                 mov     rbx, [rbx]
.text:0000000000003A4E                 mov     [rsp+58h+var_58], r8
.text:0000000000003A52                 call    _dcgettext
.text:0000000000003A57                 push    r13
.text:0000000000003A59                 push    r12
.text:0000000000003A5B                 push    r15
.text:0000000000003A5D                 push    r14
.text:0000000000003A5F                 mov     r9, [rsp+78h+var_50]
.text:0000000000003A64                 jmp     short loc_39F3
.text:0000000000003A64 ; ---------------------------------------------------------------------------
.text:0000000000003A66                 align 10h
.text:0000000000003A70
.text:0000000000003A70 def_3744:                               ; CODE XREF: version_etc_arn+90↑j
.text:0000000000003A70                 mov     r10, [rbx+40h]  ; jumptable 0000000000003744 default case
.text:0000000000003A74                 mov     r9, [rbx+38h]
.text:0000000000003A78                 mov     edx, 5
.text:0000000000003A7D                 mov     rax, [rbx+10h]
.text:0000000000003A81                 mov     r8, [rbx+8]
.text:0000000000003A85                 lea     rsi, aWrittenBySSSSS_3 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000003A8C                 mov     r13, [rbx+30h]
.text:0000000000003A90                 mov     r12, [rbx+28h]
.text:0000000000003A94                 mov     r15, [rbx+20h]
.text:0000000000003A98                 mov     r14, [rbx+18h]
.text:0000000000003A9C                 mov     [rsp+58h+var_40], r10
.text:0000000000003AA1                 mov     [rsp+58h+var_48], r9
.text:0000000000003AA6                 mov     [rsp+58h+var_58], rax
.text:0000000000003AAA                 mov     [rsp+58h+var_50], r8
.text:0000000000003AAF                 mov     rbx, [rbx]
.text:0000000000003AB2                 jmp     loc_3842
.text:0000000000003AB2 ; } // starts at 36A0
.text:0000000000003AB2 version_etc_arn endp
.text:0000000000003AB2
.text:0000000000003AB2 ; ---------------------------------------------------------------------------
.text:0000000000003AB7                 align 20h
.text:0000000000003AC0
.text:0000000000003AC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003AC0
.text:0000000000003AC0 ; Attributes: info_from_lumina
.text:0000000000003AC0
.text:0000000000003AC0 ; void __fastcall version_etc_ar(FILE *stream, const char *command_name, const char *package, const char *version, const char *const *authors)
.text:0000000000003AC0                 public version_etc_ar
.text:0000000000003AC0 version_etc_ar  proc near
.text:0000000000003AC0 ; __unwind {
.text:0000000000003AC0                 xor     r9d, r9d
.text:0000000000003AC3                 cmp     qword ptr [r8], 0
.text:0000000000003AC7                 jz      short loc_3ADB
.text:0000000000003AC9                 nop     dword ptr [rax+00000000h]
.text:0000000000003AD0
.text:0000000000003AD0 loc_3AD0:                               ; CODE XREF: version_etc_ar+19↓j
.text:0000000000003AD0                 add     r9, 1
.text:0000000000003AD4                 cmp     qword ptr [r8+r9*8], 0
.text:0000000000003AD9                 jnz     short loc_3AD0
.text:0000000000003ADB
.text:0000000000003ADB loc_3ADB:                               ; CODE XREF: version_etc_ar+7↑j
.text:0000000000003ADB                 jmp     version_etc_arn
.text:0000000000003ADB ; } // starts at 3AC0
.text:0000000000003ADB version_etc_ar  endp
.text:0000000000003ADB
.text:0000000000003AE0
.text:0000000000003AE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003AE0
.text:0000000000003AE0 ; Attributes: info_from_lumina
.text:0000000000003AE0
.text:0000000000003AE0 ; void __fastcall version_etc_va(FILE *stream, const char *command_name, const char *package, const char *version, __va_list_tag *authors)
.text:0000000000003AE0                 public version_etc_va
.text:0000000000003AE0 version_etc_va  proc near
.text:0000000000003AE0
.text:0000000000003AE0 authtab         = qword ptr -68h
.text:0000000000003AE0 var_10          = qword ptr -10h
.text:0000000000003AE0
.text:0000000000003AE0 ; __unwind {
.text:0000000000003AE0                 sub     rsp, 68h
.text:0000000000003AE4                 mov     r10, r8
.text:0000000000003AE7                 xor     r9d, r9d
.text:0000000000003AEA                 mov     rax, fs:28h
.text:0000000000003AF3                 mov     [rsp+68h+var_10], rax
.text:0000000000003AF8                 xor     eax, eax
.text:0000000000003AFA                 mov     r8, rsp
.text:0000000000003AFD                 nop     dword ptr [rax]
.text:0000000000003B00
.text:0000000000003B00 loc_3B00:                               ; CODE XREF: version_etc_va+49↓j
.text:0000000000003B00                 mov     eax, [r10]
.text:0000000000003B03                 cmp     eax, 2Fh ; '/'
.text:0000000000003B06                 ja      short loc_3B4A
.text:0000000000003B08                 mov     r11d, eax
.text:0000000000003B0B                 add     r11, [r10+10h]
.text:0000000000003B0F                 add     eax, 8
.text:0000000000003B12                 mov     [r10], eax
.text:0000000000003B15
.text:0000000000003B15 loc_3B15:                               ; CODE XREF: version_etc_va+76↓j
.text:0000000000003B15                 mov     rax, [r11]
.text:0000000000003B18                 test    rax, rax
.text:0000000000003B1B                 mov     [r8+r9*8], rax
.text:0000000000003B1F                 jz      short loc_3B2B
.text:0000000000003B21                 add     r9, 1
.text:0000000000003B25                 cmp     r9, 0Ah
.text:0000000000003B29                 jnz     short loc_3B00
.text:0000000000003B2B
.text:0000000000003B2B loc_3B2B:                               ; CODE XREF: version_etc_va+3F↑j
.text:0000000000003B2B                 call    version_etc_arn
.text:0000000000003B30                 mov     rax, [rsp+68h+var_10]
.text:0000000000003B35                 xor     rax, fs:28h
.text:0000000000003B3E                 jnz     short loc_3B45
.text:0000000000003B40                 add     rsp, 68h
.text:0000000000003B44                 retn
.text:0000000000003B45 ; ---------------------------------------------------------------------------
.text:0000000000003B45
.text:0000000000003B45 loc_3B45:                               ; CODE XREF: version_etc_va+5E↑j
.text:0000000000003B45                 call    ___stack_chk_fail
.text:0000000000003B4A ; ---------------------------------------------------------------------------
.text:0000000000003B4A
.text:0000000000003B4A loc_3B4A:                               ; CODE XREF: version_etc_va+26↑j
.text:0000000000003B4A                 mov     r11, [r10+8]
.text:0000000000003B4E                 lea     rax, [r11+8]
.text:0000000000003B52                 mov     [r10+8], rax
.text:0000000000003B56                 jmp     short loc_3B15
.text:0000000000003B56 ; } // starts at 3AE0
.text:0000000000003B56 version_etc_va  endp
.text:0000000000003B56
.text:0000000000003B56 ; ---------------------------------------------------------------------------
.text:0000000000003B58                 align 20h
.text:0000000000003B60
.text:0000000000003B60 ; =============== S U B R O U T I N E =======================================
.text:0000000000003B60
.text:0000000000003B60 ; Attributes: info_from_lumina
.text:0000000000003B60
.text:0000000000003B60 ; void version_etc(FILE *stream, const char *command_name, const char *package, const char *version, ...)
.text:0000000000003B60                 public version_etc
.text:0000000000003B60 version_etc     proc near               ; CODE XREF: main+A4↑p
.text:0000000000003B60
.text:0000000000003B60 var_C0          = dword ptr -0C0h
.text:0000000000003B60 var_B8          = qword ptr -0B8h
.text:0000000000003B60 var_B0          = qword ptr -0B0h
.text:0000000000003B60 var_A8          = byte ptr -0A8h
.text:0000000000003B60 var_50          = qword ptr -50h
.text:0000000000003B60 var_48          = byte ptr -48h
.text:0000000000003B60 var_28          = qword ptr -28h
.text:0000000000003B60 var_20          = qword ptr -20h
.text:0000000000003B60 arg_0           = byte ptr  8
.text:0000000000003B60
.text:0000000000003B60 ; __unwind {
.text:0000000000003B60                 push    rbp
.text:0000000000003B61                 push    rbx
.text:0000000000003B62                 mov     r10d, 20h ; ' '
.text:0000000000003B68                 xor     r11d, r11d
.text:0000000000003B6B                 sub     rsp, 0B8h
.text:0000000000003B72                 mov     rax, fs:28h
.text:0000000000003B7B                 mov     [rsp+0C8h+var_50], rax
.text:0000000000003B80                 xor     eax, eax
.text:0000000000003B82                 lea     rax, [rsp+0C8h+arg_0]
.text:0000000000003B8A                 mov     [rsp+0C8h+var_28], r8
.text:0000000000003B92                 lea     rbx, [rsp+0C8h+arg_0]
.text:0000000000003B9A                 lea     r8, [rsp+0C8h+var_A8]
.text:0000000000003B9F                 mov     [rsp+0C8h+var_20], r9
.text:0000000000003BA7                 mov     [rsp+0C8h+var_C0], 20h ; ' '
.text:0000000000003BAF                 mov     [rsp+0C8h+var_B8], rax
.text:0000000000003BB4                 lea     rax, [rsp+0C8h+var_48]
.text:0000000000003BBC                 xor     r9d, r9d
.text:0000000000003BBF                 mov     [rsp+0C8h+var_B0], rax
.text:0000000000003BC4                 mov     rbp, rax
.text:0000000000003BC7                 nop     word ptr [rax+rax+00000000h]
.text:0000000000003BD0
.text:0000000000003BD0 loc_3BD0:                               ; CODE XREF: version_etc+9A↓j
.text:0000000000003BD0                 cmp     r10d, 2Fh ; '/'
.text:0000000000003BD4                 ja      short loc_3C2C
.text:0000000000003BD6                 mov     eax, r10d
.text:0000000000003BD9                 mov     r11d, 1
.text:0000000000003BDF                 add     r10d, 8
.text:0000000000003BE3                 add     rax, rbp
.text:0000000000003BE6
.text:0000000000003BE6 loc_3BE6:                               ; CODE XREF: version_etc+D3↓j
.text:0000000000003BE6                 mov     rax, [rax]
.text:0000000000003BE9                 test    rax, rax
.text:0000000000003BEC                 mov     [r8+r9*8], rax
.text:0000000000003BF0                 jz      short loc_3BFC
.text:0000000000003BF2                 add     r9, 1
.text:0000000000003BF6                 cmp     r9, 0Ah
.text:0000000000003BFA                 jnz     short loc_3BD0
.text:0000000000003BFC
.text:0000000000003BFC loc_3BFC:                               ; CODE XREF: version_etc+90↑j
.text:0000000000003BFC                 test    r11b, r11b
.text:0000000000003BFF                 jnz     short loc_3C25
.text:0000000000003C01
.text:0000000000003C01 loc_3C01:                               ; CODE XREF: version_etc+CA↓j
.text:0000000000003C01                 call    version_etc_arn
.text:0000000000003C06                 mov     rax, [rsp+0C8h+var_50]
.text:0000000000003C0B                 xor     rax, fs:28h
.text:0000000000003C14                 jnz     short loc_3C20
.text:0000000000003C16                 add     rsp, 0B8h
.text:0000000000003C1D                 pop     rbx
.text:0000000000003C1E                 pop     rbp
.text:0000000000003C1F                 retn
.text:0000000000003C20 ; ---------------------------------------------------------------------------
.text:0000000000003C20
.text:0000000000003C20 loc_3C20:                               ; CODE XREF: version_etc+B4↑j
.text:0000000000003C20                 call    ___stack_chk_fail
.text:0000000000003C25 ; ---------------------------------------------------------------------------
.text:0000000000003C25
.text:0000000000003C25 loc_3C25:                               ; CODE XREF: version_etc+9F↑j
.text:0000000000003C25                 mov     [rsp+0C8h+var_C0], r10d
.text:0000000000003C2A                 jmp     short loc_3C01
.text:0000000000003C2C ; ---------------------------------------------------------------------------
.text:0000000000003C2C
.text:0000000000003C2C loc_3C2C:                               ; CODE XREF: version_etc+74↑j
.text:0000000000003C2C                 mov     rax, rbx
.text:0000000000003C2F                 add     rbx, 8
.text:0000000000003C33                 jmp     short loc_3BE6
.text:0000000000003C33 ; } // starts at 3B60
.text:0000000000003C33 version_etc     endp
.text:0000000000003C33
.text:0000000000003C33 ; ---------------------------------------------------------------------------
.text:0000000000003C35                 align 20h
.text:0000000000003C40
.text:0000000000003C40 ; =============== S U B R O U T I N E =======================================
.text:0000000000003C40
.text:0000000000003C40 ; Attributes: info_from_lumina
.text:0000000000003C40
.text:0000000000003C40 ; void __cdecl emit_bug_reporting_address()
.text:0000000000003C40                 public emit_bug_reporting_address
.text:0000000000003C40 emit_bug_reporting_address proc near
.text:0000000000003C40 ; __unwind {
.text:0000000000003C40                 push    rbx
.text:0000000000003C41                 lea     rsi, aReportBugsToS ; "\nReport bugs to: %s\n"
.text:0000000000003C48                 mov     edx, 5          ; category
.text:0000000000003C4D                 xor     edi, edi        ; domainname
.text:0000000000003C4F                 call    _dcgettext
.text:0000000000003C54                 lea     rdx, aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:0000000000003C5B                 mov     rsi, rax
.text:0000000000003C5E                 mov     edi, 1
.text:0000000000003C63                 xor     eax, eax
.text:0000000000003C65                 call    ___printf_chk
.text:0000000000003C6A                 lea     rsi, aSHomePageS ; "%s home page: <%s>\n"
.text:0000000000003C71                 mov     edx, 5          ; category
.text:0000000000003C76                 xor     edi, edi        ; domainname
.text:0000000000003C78                 call    _dcgettext
.text:0000000000003C7D                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000003C84                 lea     rdx, unk_4344
.text:0000000000003C8B                 mov     rsi, rax
.text:0000000000003C8E                 mov     edi, 1
.text:0000000000003C93                 xor     eax, eax
.text:0000000000003C95                 call    ___printf_chk
.text:0000000000003C9A                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000003CA1                 lea     rsi, aGeneralHelpUsi ; "General help using GNU software: <https"...
.text:0000000000003CA8                 xor     edi, edi        ; domainname
.text:0000000000003CAA                 mov     edx, 5          ; category
.text:0000000000003CAF                 call    _dcgettext
.text:0000000000003CB4                 mov     rsi, rbx        ; stream
.text:0000000000003CB7                 mov     rdi, rax        ; s
.text:0000000000003CBA                 pop     rbx
.text:0000000000003CBB                 jmp     _fputs_unlocked
.text:0000000000003CBB ; } // starts at 3C40
.text:0000000000003CBB emit_bug_reporting_address endp
.text:0000000000003CBB
.text:0000000000003CC0
.text:0000000000003CC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003CC0
.text:0000000000003CC0
.text:0000000000003CC0                 public xmalloc
.text:0000000000003CC0 xmalloc         proc near               ; CODE XREF: quotearg_n_options+127↑p
.text:0000000000003CC0                                         ; quotearg_alloc_mem+81↑p ...
.text:0000000000003CC0 ; __unwind {
.text:0000000000003CC0                 push    rbx
.text:0000000000003CC1                 mov     rbx, rdi
.text:0000000000003CC4                 call    _malloc
.text:0000000000003CC9                 test    rax, rax
.text:0000000000003CCC                 jnz     short loc_3CD3
.text:0000000000003CCE                 test    rbx, rbx
.text:0000000000003CD1                 jnz     short loc_3CD5
.text:0000000000003CD3
.text:0000000000003CD3 loc_3CD3:                               ; CODE XREF: xmalloc+C↑j
.text:0000000000003CD3                 pop     rbx
.text:0000000000003CD4                 retn
.text:0000000000003CD5 ; ---------------------------------------------------------------------------
.text:0000000000003CD5
.text:0000000000003CD5 loc_3CD5:                               ; CODE XREF: xmalloc+11↑j
.text:0000000000003CD5                 call    xalloc_die
.text:0000000000003CD5 ; } // starts at 3CC0
.text:0000000000003CD5 xmalloc         endp
.text:0000000000003CD5
.text:0000000000003CD5 ; ---------------------------------------------------------------------------
.text:0000000000003CDA                 align 20h
.text:0000000000003CE0
.text:0000000000003CE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003CE0
.text:0000000000003CE0 ; Attributes: info_from_lumina
.text:0000000000003CE0
.text:0000000000003CE0 ; void *__fastcall xnmalloc(size_t n, size_t s)
.text:0000000000003CE0                 public xnmalloc
.text:0000000000003CE0 xnmalloc        proc near
.text:0000000000003CE0 ; __unwind {
.text:0000000000003CE0                 mov     rax, rdi
.text:0000000000003CE3                 mul     rsi
.text:0000000000003CE6                 mov     rdi, rax
.text:0000000000003CE9                 seto    al
.text:0000000000003CEC                 test    rdi, rdi
.text:0000000000003CEF                 js      short loc_3CFB
.text:0000000000003CF1                 movzx   eax, al
.text:0000000000003CF4                 test    rax, rax
.text:0000000000003CF7                 jnz     short loc_3CFB
.text:0000000000003CF9                 jmp     short xmalloc
.text:0000000000003CFB ; ---------------------------------------------------------------------------
.text:0000000000003CFB
.text:0000000000003CFB loc_3CFB:                               ; CODE XREF: xnmalloc+F↑j
.text:0000000000003CFB                                         ; xnmalloc+17↑j
.text:0000000000003CFB                 sub     rsp, 8
.text:0000000000003CFF                 call    xalloc_die
.text:0000000000003CFF ; } // starts at 3CE0
.text:0000000000003CFF xnmalloc        endp
.text:0000000000003CFF
.text:0000000000003CFF ; ---------------------------------------------------------------------------
.text:0000000000003D04                 align 10h
.text:0000000000003D10
.text:0000000000003D10 ; =============== S U B R O U T I N E =======================================
.text:0000000000003D10
.text:0000000000003D10
.text:0000000000003D10                 public xcharalloc
.text:0000000000003D10 xcharalloc      proc near
.text:0000000000003D10 ; __unwind {
.text:0000000000003D10                 jmp     short xmalloc
.text:0000000000003D10 ; } // starts at 3D10
.text:0000000000003D10 xcharalloc      endp
.text:0000000000003D10
.text:0000000000003D10 ; ---------------------------------------------------------------------------
.text:0000000000003D12                 align 20h
.text:0000000000003D20
.text:0000000000003D20 ; =============== S U B R O U T I N E =======================================
.text:0000000000003D20
.text:0000000000003D20 ; Attributes: info_from_lumina
.text:0000000000003D20
.text:0000000000003D20 ; void *__fastcall xrealloc(void *p, size_t n)
.text:0000000000003D20                 public xrealloc
.text:0000000000003D20 xrealloc        proc near               ; CODE XREF: quotearg_n_options+6E↑p
.text:0000000000003D20                                         ; quotearg_n_options+182↑p ...
.text:0000000000003D20 ; __unwind {
.text:0000000000003D20                 test    rsi, rsi
.text:0000000000003D23                 push    rbx
.text:0000000000003D24                 mov     rbx, rsi
.text:0000000000003D27                 jnz     short loc_3D2E
.text:0000000000003D29                 test    rdi, rdi
.text:0000000000003D2C                 jnz     short loc_3D48
.text:0000000000003D2E
.text:0000000000003D2E loc_3D2E:                               ; CODE XREF: xrealloc+7↑j
.text:0000000000003D2E                 mov     rsi, rbx        ; size
.text:0000000000003D31                 call    _realloc
.text:0000000000003D36                 test    rax, rax
.text:0000000000003D39                 jnz     short loc_3D40
.text:0000000000003D3B                 test    rbx, rbx
.text:0000000000003D3E                 jnz     short loc_3D51
.text:0000000000003D40
.text:0000000000003D40 loc_3D40:                               ; CODE XREF: xrealloc+19↑j
.text:0000000000003D40                 pop     rbx
.text:0000000000003D41                 retn
.text:0000000000003D41 ; ---------------------------------------------------------------------------
.text:0000000000003D42                 align 8
.text:0000000000003D48
.text:0000000000003D48 loc_3D48:                               ; CODE XREF: xrealloc+C↑j
.text:0000000000003D48                 call    _free
.text:0000000000003D4D                 xor     eax, eax
.text:0000000000003D4F                 pop     rbx
.text:0000000000003D50                 retn
.text:0000000000003D51 ; ---------------------------------------------------------------------------
.text:0000000000003D51
.text:0000000000003D51 loc_3D51:                               ; CODE XREF: xrealloc+1E↑j
.text:0000000000003D51                 call    xalloc_die
.text:0000000000003D51 ; } // starts at 3D20
.text:0000000000003D51 xrealloc        endp
.text:0000000000003D51
.text:0000000000003D51 ; ---------------------------------------------------------------------------
.text:0000000000003D56                 align 20h
.text:0000000000003D60
.text:0000000000003D60 ; =============== S U B R O U T I N E =======================================
.text:0000000000003D60
.text:0000000000003D60 ; Attributes: info_from_lumina
.text:0000000000003D60
.text:0000000000003D60 ; void *__fastcall xnrealloc(void *p, size_t n, size_t s)
.text:0000000000003D60                 public xnrealloc
.text:0000000000003D60 xnrealloc       proc near
.text:0000000000003D60 ; __unwind {
.text:0000000000003D60                 mov     rax, rsi
.text:0000000000003D63                 mul     rdx
.text:0000000000003D66                 mov     rsi, rax
.text:0000000000003D69                 seto    al
.text:0000000000003D6C                 test    rsi, rsi
.text:0000000000003D6F                 js      short loc_3D7B
.text:0000000000003D71                 movzx   eax, al
.text:0000000000003D74                 test    rax, rax
.text:0000000000003D77                 jnz     short loc_3D7B
.text:0000000000003D79                 jmp     short xrealloc
.text:0000000000003D7B ; ---------------------------------------------------------------------------
.text:0000000000003D7B
.text:0000000000003D7B loc_3D7B:                               ; CODE XREF: xnrealloc+F↑j
.text:0000000000003D7B                                         ; xnrealloc+17↑j
.text:0000000000003D7B                 sub     rsp, 8
.text:0000000000003D7F                 call    xalloc_die
.text:0000000000003D7F ; } // starts at 3D60
.text:0000000000003D7F xnrealloc       endp
.text:0000000000003D7F
.text:0000000000003D7F ; ---------------------------------------------------------------------------
.text:0000000000003D84                 align 10h
.text:0000000000003D90
.text:0000000000003D90 ; =============== S U B R O U T I N E =======================================
.text:0000000000003D90
.text:0000000000003D90 ; Attributes: info_from_lumina
.text:0000000000003D90
.text:0000000000003D90 ; void *__fastcall x2nrealloc(void *p, size_t *pn, size_t s)
.text:0000000000003D90                 public x2nrealloc
.text:0000000000003D90 x2nrealloc      proc near
.text:0000000000003D90 ; __unwind {
.text:0000000000003D90                 test    rdi, rdi
.text:0000000000003D93                 mov     r9, rdx
.text:0000000000003D96                 mov     rcx, [rsi]
.text:0000000000003D99                 jz      short loc_3DD0
.text:0000000000003D9B                 xor     edx, edx
.text:0000000000003D9D                 mov     rax, 5555555555555554h
.text:0000000000003DA7                 div     r9
.text:0000000000003DAA                 cmp     rax, rcx
.text:0000000000003DAD                 jbe     short loc_3DEB
.text:0000000000003DAF                 mov     rax, rcx
.text:0000000000003DB2                 shr     rax, 1
.text:0000000000003DB5                 lea     rcx, [rax+rcx+1]
.text:0000000000003DBA
.text:0000000000003DBA loc_3DBA:                               ; CODE XREF: x2nrealloc+59↓j
.text:0000000000003DBA                 mov     [rsi], rcx
.text:0000000000003DBD                 imul    rcx, r9
.text:0000000000003DC1                 mov     rsi, rcx
.text:0000000000003DC4                 jmp     xrealloc
.text:0000000000003DC4 ; ---------------------------------------------------------------------------
.text:0000000000003DC9                 align 10h
.text:0000000000003DD0
.text:0000000000003DD0 loc_3DD0:                               ; CODE XREF: x2nrealloc+9↑j
.text:0000000000003DD0                 test    rcx, rcx
.text:0000000000003DD3                 jz      short loc_3DF8
.text:0000000000003DD5
.text:0000000000003DD5 loc_3DD5:                               ; CODE XREF: x2nrealloc+80↓j
.text:0000000000003DD5                 mov     rax, rcx
.text:0000000000003DD8                 mul     r9
.text:0000000000003DDB                 seto    dl
.text:0000000000003DDE                 test    rax, rax
.text:0000000000003DE1                 movzx   edx, dl
.text:0000000000003DE4                 js      short loc_3DEB
.text:0000000000003DE6                 test    rdx, rdx
.text:0000000000003DE9                 jz      short loc_3DBA
.text:0000000000003DEB
.text:0000000000003DEB loc_3DEB:                               ; CODE XREF: x2nrealloc+1D↑j
.text:0000000000003DEB                                         ; x2nrealloc+54↑j
.text:0000000000003DEB                 sub     rsp, 8
.text:0000000000003DEF                 call    xalloc_die
.text:0000000000003DEF ; ---------------------------------------------------------------------------
.text:0000000000003DF4                 align 8
.text:0000000000003DF8
.text:0000000000003DF8 loc_3DF8:                               ; CODE XREF: x2nrealloc+43↑j
.text:0000000000003DF8                 xor     edx, edx
.text:0000000000003DFA                 mov     eax, 80h
.text:0000000000003DFF                 xor     r8d, r8d
.text:0000000000003E02                 div     r9
.text:0000000000003E05                 test    rax, rax
.text:0000000000003E08                 setz    r8b
.text:0000000000003E0C                 lea     rcx, [r8+rax]
.text:0000000000003E10                 jmp     short loc_3DD5
.text:0000000000003E10 ; } // starts at 3D90
.text:0000000000003E10 x2nrealloc      endp
.text:0000000000003E10
.text:0000000000003E10 ; ---------------------------------------------------------------------------
.text:0000000000003E12                 align 20h
.text:0000000000003E20
.text:0000000000003E20 ; =============== S U B R O U T I N E =======================================
.text:0000000000003E20
.text:0000000000003E20 ; Attributes: info_from_lumina
.text:0000000000003E20
.text:0000000000003E20 ; void *__fastcall x2realloc(void *p, size_t *pn)
.text:0000000000003E20                 public x2realloc
.text:0000000000003E20 x2realloc       proc near
.text:0000000000003E20 ; __unwind {
.text:0000000000003E20                 test    rdi, rdi
.text:0000000000003E23                 mov     rax, [rsi]
.text:0000000000003E26                 jz      short loc_3E50
.text:0000000000003E28                 mov     rdx, 5555555555555553h
.text:0000000000003E32                 cmp     rax, rdx
.text:0000000000003E35                 ja      short loc_3E61
.text:0000000000003E37                 mov     rdx, rax
.text:0000000000003E3A                 shr     rdx, 1
.text:0000000000003E3D                 lea     rax, [rdx+rax+1]
.text:0000000000003E42
.text:0000000000003E42 loc_3E42:                               ; CODE XREF: x2realloc+3F↓j
.text:0000000000003E42                 mov     [rsi], rax
.text:0000000000003E45                 mov     rsi, rax
.text:0000000000003E48                 jmp     xrealloc
.text:0000000000003E48 ; ---------------------------------------------------------------------------
.text:0000000000003E4D                 align 10h
.text:0000000000003E50
.text:0000000000003E50 loc_3E50:                               ; CODE XREF: x2realloc+6↑j
.text:0000000000003E50                 test    rax, rax
.text:0000000000003E53                 mov     edx, 80h
.text:0000000000003E58                 cmovz   rax, rdx
.text:0000000000003E5C                 test    rax, rax
.text:0000000000003E5F                 jns     short loc_3E42
.text:0000000000003E61
.text:0000000000003E61 loc_3E61:                               ; CODE XREF: x2realloc+15↑j
.text:0000000000003E61                 sub     rsp, 8
.text:0000000000003E65                 call    xalloc_die
.text:0000000000003E65 ; } // starts at 3E20
.text:0000000000003E65 x2realloc       endp
.text:0000000000003E65
.text:0000000000003E65 ; ---------------------------------------------------------------------------
.text:0000000000003E6A                 align 10h
.text:0000000000003E70
.text:0000000000003E70 ; =============== S U B R O U T I N E =======================================
.text:0000000000003E70
.text:0000000000003E70
.text:0000000000003E70 ; __int64 __fastcall xzalloc(size_t n)
.text:0000000000003E70                 public xzalloc
.text:0000000000003E70 xzalloc         proc near
.text:0000000000003E70 ; __unwind {
.text:0000000000003E70                 push    rbx
.text:0000000000003E71                 mov     rbx, rdi
.text:0000000000003E74                 call    xmalloc
.text:0000000000003E79                 mov     rdx, rbx        ; n
.text:0000000000003E7C                 xor     esi, esi        ; c
.text:0000000000003E7E                 mov     rdi, rax        ; s
.text:0000000000003E81                 pop     rbx
.text:0000000000003E82                 jmp     _memset
.text:0000000000003E82 ; } // starts at 3E70
.text:0000000000003E82 xzalloc         endp
.text:0000000000003E82
.text:0000000000003E82 ; ---------------------------------------------------------------------------
.text:0000000000003E87                 align 10h
.text:0000000000003E90
.text:0000000000003E90 ; =============== S U B R O U T I N E =======================================
.text:0000000000003E90
.text:0000000000003E90 ; Attributes: info_from_lumina
.text:0000000000003E90
.text:0000000000003E90 ; void *__fastcall xcalloc(size_t n, size_t s)
.text:0000000000003E90                 public xcalloc
.text:0000000000003E90 xcalloc         proc near
.text:0000000000003E90 ; __unwind {
.text:0000000000003E90                 mov     rax, rdi
.text:0000000000003E93                 sub     rsp, 8
.text:0000000000003E97                 mul     rsi
.text:0000000000003E9A                 seto    dl
.text:0000000000003E9D                 test    rax, rax
.text:0000000000003EA0                 js      short loc_3EB9
.text:0000000000003EA2                 movzx   edx, dl
.text:0000000000003EA5                 test    rdx, rdx
.text:0000000000003EA8                 jnz     short loc_3EB9
.text:0000000000003EAA                 call    _calloc
.text:0000000000003EAF                 test    rax, rax
.text:0000000000003EB2                 jz      short loc_3EB9
.text:0000000000003EB4                 add     rsp, 8
.text:0000000000003EB8                 retn
.text:0000000000003EB9 ; ---------------------------------------------------------------------------
.text:0000000000003EB9
.text:0000000000003EB9 loc_3EB9:                               ; CODE XREF: xcalloc+10↑j
.text:0000000000003EB9                                         ; xcalloc+18↑j ...
.text:0000000000003EB9                 call    xalloc_die
.text:0000000000003EB9 ; } // starts at 3E90
.text:0000000000003EB9 xcalloc         endp
.text:0000000000003EB9
.text:0000000000003EB9 ; ---------------------------------------------------------------------------
.text:0000000000003EBE                 align 20h
.text:0000000000003EC0
.text:0000000000003EC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003EC0
.text:0000000000003EC0 ; Attributes: info_from_lumina
.text:0000000000003EC0
.text:0000000000003EC0 ; void *__fastcall xmemdup(const void *p, size_t s)
.text:0000000000003EC0                 public xmemdup
.text:0000000000003EC0 xmemdup         proc near               ; CODE XREF: clone_quoting_options+28↑p
.text:0000000000003EC0                                         ; xstrdup+11↓j
.text:0000000000003EC0 ; __unwind {
.text:0000000000003EC0                 push    rbp
.text:0000000000003EC1                 push    rbx
.text:0000000000003EC2                 mov     rbp, rdi
.text:0000000000003EC5                 mov     rdi, rsi
.text:0000000000003EC8                 mov     rbx, rsi
.text:0000000000003ECB                 sub     rsp, 8
.text:0000000000003ECF                 call    xmalloc
.text:0000000000003ED4                 add     rsp, 8
.text:0000000000003ED8                 mov     rdx, rbx        ; n
.text:0000000000003EDB                 mov     rsi, rbp        ; src
.text:0000000000003EDE                 pop     rbx
.text:0000000000003EDF                 pop     rbp
.text:0000000000003EE0                 mov     rdi, rax        ; dest
.text:0000000000003EE3                 jmp     _memcpy
.text:0000000000003EE3 ; } // starts at 3EC0
.text:0000000000003EE3 xmemdup         endp
.text:0000000000003EE3
.text:0000000000003EE3 ; ---------------------------------------------------------------------------
.text:0000000000003EE8                 align 10h
.text:0000000000003EF0
.text:0000000000003EF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003EF0
.text:0000000000003EF0
.text:0000000000003EF0 ; __int64 __fastcall xstrdup(void *src)
.text:0000000000003EF0                 public xstrdup
.text:0000000000003EF0 xstrdup         proc near
.text:0000000000003EF0 ; __unwind {
.text:0000000000003EF0                 push    rbx
.text:0000000000003EF1                 mov     rbx, rdi
.text:0000000000003EF4                 call    _strlen
.text:0000000000003EF9                 mov     rdi, rbx        ; src
.text:0000000000003EFC                 lea     rsi, [rax+1]    ; n
.text:0000000000003F00                 pop     rbx
.text:0000000000003F01                 jmp     short xmemdup
.text:0000000000003F01 ; } // starts at 3EF0
.text:0000000000003F01 xstrdup         endp
.text:0000000000003F01
.text:0000000000003F01 ; ---------------------------------------------------------------------------
.text:0000000000003F03                 align 10h
.text:0000000000003F10
.text:0000000000003F10 ; =============== S U B R O U T I N E =======================================
.text:0000000000003F10
.text:0000000000003F10 ; Attributes: noreturn info_from_lumina
.text:0000000000003F10
.text:0000000000003F10 ; void __cdecl xalloc_die()
.text:0000000000003F10                 public xalloc_die
.text:0000000000003F10 xalloc_die      proc near               ; CODE XREF: quotearg_n_options:loc_2EE6↑p
.text:0000000000003F10                                         ; xmalloc:loc_3CD5↑p ...
.text:0000000000003F10 ; __unwind {
.text:0000000000003F10                 lea     rsi, aMemoryExhauste ; "memory exhausted"
.text:0000000000003F17                 sub     rsp, 8
.text:0000000000003F1B                 mov     edx, 5          ; category
.text:0000000000003F20                 xor     edi, edi        ; domainname
.text:0000000000003F22                 call    _dcgettext
.text:0000000000003F27                 mov     edi, cs:exit_failure ; status
.text:0000000000003F2D                 lea     rdx, format+4   ; format
.text:0000000000003F34                 mov     rcx, rax
.text:0000000000003F37                 xor     esi, esi        ; errnum
.text:0000000000003F39                 xor     eax, eax
.text:0000000000003F3B                 call    _error
.text:0000000000003F40                 call    _abort
.text:0000000000003F40 ; } // starts at 3F10
.text:0000000000003F40 xalloc_die      endp
.text:0000000000003F40
.text:0000000000003F40 ; ---------------------------------------------------------------------------
.text:0000000000003F45                 align 10h
.text:0000000000003F50
.text:0000000000003F50 ; =============== S U B R O U T I N E =======================================
.text:0000000000003F50
.text:0000000000003F50 ; Attributes: info_from_lumina
.text:0000000000003F50
.text:0000000000003F50 ; size_t __fastcall rpl_mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
.text:0000000000003F50                 public rpl_mbrtowc
.text:0000000000003F50 rpl_mbrtowc     proc near               ; CODE XREF: quotearg_buffer_restyled+956↑p
.text:0000000000003F50
.text:0000000000003F50 pwc             = dword ptr -34h
.text:0000000000003F50 var_30          = qword ptr -30h
.text:0000000000003F50
.text:0000000000003F50 ; __unwind {
.text:0000000000003F50                 push    r13
.text:0000000000003F52                 push    r12
.text:0000000000003F54                 mov     r13, rsi
.text:0000000000003F57                 push    rbp
.text:0000000000003F58                 push    rbx
.text:0000000000003F59                 mov     rbx, rdi
.text:0000000000003F5C                 mov     r12, rdx
.text:0000000000003F5F                 sub     rsp, 18h
.text:0000000000003F63                 mov     rax, fs:28h
.text:0000000000003F6C                 mov     [rsp+38h+var_30], rax
.text:0000000000003F71                 xor     eax, eax
.text:0000000000003F73                 lea     rax, [rsp+38h+pwc]
.text:0000000000003F78                 test    rdi, rdi
.text:0000000000003F7B                 cmovz   rbx, rax
.text:0000000000003F7F                 mov     rdi, rbx        ; pwc
.text:0000000000003F82                 call    _mbrtowc
.text:0000000000003F87                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:0000000000003F8B                 mov     rbp, rax
.text:0000000000003F8E                 jbe     short loc_3FB0
.text:0000000000003F90                 test    r12, r12
.text:0000000000003F93                 jz      short loc_3FB0
.text:0000000000003F95                 xor     edi, edi
.text:0000000000003F97                 call    hard_locale
.text:0000000000003F9C                 test    al, al
.text:0000000000003F9E                 jnz     short loc_3FB0
.text:0000000000003FA0                 movzx   eax, byte ptr [r13+0]
.text:0000000000003FA5                 mov     ebp, 1
.text:0000000000003FAA                 mov     [rbx], eax
.text:0000000000003FAC                 nop     dword ptr [rax+00h]
.text:0000000000003FB0
.text:0000000000003FB0 loc_3FB0:                               ; CODE XREF: rpl_mbrtowc+3E↑j
.text:0000000000003FB0                                         ; rpl_mbrtowc+43↑j ...
.text:0000000000003FB0                 mov     rdx, [rsp+38h+var_30]
.text:0000000000003FB5                 xor     rdx, fs:28h
.text:0000000000003FBE                 mov     rax, rbp
.text:0000000000003FC1                 jnz     short loc_3FCE
.text:0000000000003FC3                 add     rsp, 18h
.text:0000000000003FC7                 pop     rbx
.text:0000000000003FC8                 pop     rbp
.text:0000000000003FC9                 pop     r12
.text:0000000000003FCB                 pop     r13
.text:0000000000003FCD                 retn
.text:0000000000003FCE ; ---------------------------------------------------------------------------
.text:0000000000003FCE
.text:0000000000003FCE loc_3FCE:                               ; CODE XREF: rpl_mbrtowc+71↑j
.text:0000000000003FCE                 call    ___stack_chk_fail
.text:0000000000003FCE ; } // starts at 3F50
.text:0000000000003FCE rpl_mbrtowc     endp
.text:0000000000003FCE
.text:0000000000003FCE ; ---------------------------------------------------------------------------
.text:0000000000003FD3                 align 20h
.text:0000000000003FE0
.text:0000000000003FE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003FE0
.text:0000000000003FE0 ; Attributes: info_from_lumina
.text:0000000000003FE0
.text:0000000000003FE0 ; int __fastcall close_stream(FILE *stream)
.text:0000000000003FE0                 public close_stream
.text:0000000000003FE0 close_stream    proc near               ; CODE XREF: close_stdout+D↑p
.text:0000000000003FE0                                         ; close_stdout+33↑p
.text:0000000000003FE0 ; __unwind {
.text:0000000000003FE0                 push    r12
.text:0000000000003FE2                 push    rbp
.text:0000000000003FE3                 mov     rbp, rdi
.text:0000000000003FE6                 push    rbx
.text:0000000000003FE7                 call    ___fpending
.text:0000000000003FEC                 mov     ebx, [rbp+0]
.text:0000000000003FEF                 mov     rdi, rbp        ; stream
.text:0000000000003FF2                 mov     r12, rax
.text:0000000000003FF5                 call    rpl_fclose
.text:0000000000003FFA                 and     ebx, 20h
.text:0000000000003FFD                 test    ebx, ebx
.text:0000000000003FFF                 jnz     short loc_4018
.text:0000000000004001                 test    eax, eax
.text:0000000000004003                 jz      short loc_400F
.text:0000000000004005                 test    r12, r12
.text:0000000000004008                 mov     eax, 0FFFFFFFFh
.text:000000000000400D                 jz      short loc_4048
.text:000000000000400F
.text:000000000000400F loc_400F:                               ; CODE XREF: close_stream+23↑j
.text:000000000000400F                 pop     rbx
.text:0000000000004010                 pop     rbp
.text:0000000000004011                 pop     r12
.text:0000000000004013                 retn
.text:0000000000004013 ; ---------------------------------------------------------------------------
.text:0000000000004014                 align 8
.text:0000000000004018
.text:0000000000004018 loc_4018:                               ; CODE XREF: close_stream+1F↑j
.text:0000000000004018                 test    eax, eax
.text:000000000000401A                 jnz     short loc_4038
.text:000000000000401C                 call    ___errno_location
.text:0000000000004021                 mov     dword ptr [rax], 0
.text:0000000000004027                 mov     eax, 0FFFFFFFFh
.text:000000000000402C                 pop     rbx
.text:000000000000402D                 pop     rbp
.text:000000000000402E                 pop     r12
.text:0000000000004030                 retn
.text:0000000000004030 ; ---------------------------------------------------------------------------
.text:0000000000004031                 align 8
.text:0000000000004038
.text:0000000000004038 loc_4038:                               ; CODE XREF: close_stream+3A↑j
.text:0000000000004038                 pop     rbx
.text:0000000000004039                 mov     eax, 0FFFFFFFFh
.text:000000000000403E                 pop     rbp
.text:000000000000403F                 pop     r12
.text:0000000000004041                 retn
.text:0000000000004041 ; ---------------------------------------------------------------------------
.text:0000000000004042                 align 8
.text:0000000000004048
.text:0000000000004048 loc_4048:                               ; CODE XREF: close_stream+2D↑j
.text:0000000000004048                 call    ___errno_location
.text:000000000000404D                 cmp     dword ptr [rax], 9
.text:0000000000004050                 pop     rbx
.text:0000000000004051                 pop     rbp
.text:0000000000004052                 pop     r12
.text:0000000000004054                 setnz   al
.text:0000000000004057                 movzx   eax, al
.text:000000000000405A                 neg     eax
.text:000000000000405C                 retn
.text:000000000000405C ; } // starts at 3FE0
.text:000000000000405C close_stream    endp
.text:000000000000405C
.text:000000000000405C ; ---------------------------------------------------------------------------
.text:000000000000405D                 align 20h
.text:0000000000004060
.text:0000000000004060 ; =============== S U B R O U T I N E =======================================
.text:0000000000004060
.text:0000000000004060
.text:0000000000004060                 public hard_locale
.text:0000000000004060 hard_locale     proc near               ; CODE XREF: rpl_mbrtowc+47↑p
.text:0000000000004060 ; __unwind {
.text:0000000000004060                 sub     rsp, 8
.text:0000000000004064                 xor     esi, esi        ; locale
.text:0000000000004066                 call    _setlocale
.text:000000000000406B                 mov     rdx, rax
.text:000000000000406E                 mov     eax, 1
.text:0000000000004073                 test    rdx, rdx
.text:0000000000004076                 jz      short loc_4095
.text:0000000000004078                 lea     rdi, aC         ; "C"
.text:000000000000407F                 mov     ecx, 2
.text:0000000000004084                 mov     rsi, rdx
.text:0000000000004087                 repe cmpsb
.text:0000000000004089                 setnbe  cl
.text:000000000000408C                 sbb     cl, 0
.text:000000000000408F                 xor     eax, eax
.text:0000000000004091                 test    cl, cl
.text:0000000000004093                 jnz     short loc_40A0
.text:0000000000004095
.text:0000000000004095 loc_4095:                               ; CODE XREF: hard_locale+16↑j
.text:0000000000004095                 add     rsp, 8
.text:0000000000004099                 retn
.text:0000000000004099 ; ---------------------------------------------------------------------------
.text:000000000000409A                 align 20h
.text:00000000000040A0
.text:00000000000040A0 loc_40A0:                               ; CODE XREF: hard_locale+33↑j
.text:00000000000040A0                 lea     rdi, aPosix     ; "POSIX"
.text:00000000000040A7                 mov     ecx, 6
.text:00000000000040AC                 mov     rsi, rdx
.text:00000000000040AF                 repe cmpsb
.text:00000000000040B1                 setnbe  al
.text:00000000000040B4                 sbb     al, 0
.text:00000000000040B6                 test    al, al
.text:00000000000040B8                 setnz   al
.text:00000000000040BB                 add     rsp, 8
.text:00000000000040BF                 retn
.text:00000000000040BF ; } // starts at 4060
.text:00000000000040BF hard_locale     endp
.text:00000000000040BF
.text:00000000000040C0
.text:00000000000040C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000040C0
.text:00000000000040C0
.text:00000000000040C0                 public locale_charset
.text:00000000000040C0 locale_charset  proc near               ; CODE XREF: gettext_quote+B↑p
.text:00000000000040C0 ; __unwind {
.text:00000000000040C0                 sub     rsp, 8
.text:00000000000040C4                 mov     edi, 0Eh        ; item
.text:00000000000040C9                 call    _nl_langinfo
.text:00000000000040CE                 test    rax, rax
.text:00000000000040D1                 jz      short loc_40F0
.text:00000000000040D3                 cmp     byte ptr [rax], 0
.text:00000000000040D6                 lea     rdx, aAscii     ; "ASCII"
.text:00000000000040DD                 cmovz   rax, rdx
.text:00000000000040E1                 add     rsp, 8
.text:00000000000040E5                 retn
.text:00000000000040E5 ; ---------------------------------------------------------------------------
.text:00000000000040E6                 align 10h
.text:00000000000040F0
.text:00000000000040F0 loc_40F0:                               ; CODE XREF: locale_charset+11↑j
.text:00000000000040F0                 lea     rax, aAscii     ; "ASCII"
.text:00000000000040F7                 add     rsp, 8
.text:00000000000040FB                 retn
.text:00000000000040FB ; } // starts at 40C0
.text:00000000000040FB locale_charset  endp
.text:00000000000040FB
.text:00000000000040FB ; ---------------------------------------------------------------------------
.text:00000000000040FC                 align 20h
.text:0000000000004100
.text:0000000000004100 ; =============== S U B R O U T I N E =======================================
.text:0000000000004100
.text:0000000000004100 ; Attributes: info_from_lumina
.text:0000000000004100
.text:0000000000004100 ; int __fastcall rpl_fclose(FILE *fp)
.text:0000000000004100                 public rpl_fclose
.text:0000000000004100 rpl_fclose      proc near               ; CODE XREF: close_stream+15↑p
.text:0000000000004100 ; __unwind {
.text:0000000000004100                 push    r12
.text:0000000000004102                 push    rbp
.text:0000000000004103                 push    rbx
.text:0000000000004104                 mov     rbx, rdi
.text:0000000000004107                 call    _fileno
.text:000000000000410C                 test    eax, eax
.text:000000000000410E                 mov     rdi, rbx        ; fp
.text:0000000000004111                 js      short loc_4167
.text:0000000000004113                 call    ___freading
.text:0000000000004118                 test    eax, eax
.text:000000000000411A                 jnz     short loc_4148
.text:000000000000411C
.text:000000000000411C loc_411C:                               ; CODE XREF: rpl_fclose+62↓j
.text:000000000000411C                 mov     rdi, rbx        ; stream
.text:000000000000411F                 call    rpl_fflush
.text:0000000000004124                 test    eax, eax
.text:0000000000004126                 jz      short loc_4164
.text:0000000000004128                 call    ___errno_location
.text:000000000000412D                 mov     r12d, [rax]
.text:0000000000004130                 mov     rdi, rbx        ; stream
.text:0000000000004133                 mov     rbp, rax
.text:0000000000004136                 call    _fclose
.text:000000000000413B                 test    r12d, r12d
.text:000000000000413E                 jnz     short loc_4170
.text:0000000000004140
.text:0000000000004140 loc_4140:                               ; CODE XREF: rpl_fclose+79↓j
.text:0000000000004140                 pop     rbx
.text:0000000000004141                 pop     rbp
.text:0000000000004142                 pop     r12
.text:0000000000004144                 retn
.text:0000000000004144 ; ---------------------------------------------------------------------------
.text:0000000000004145                 align 8
.text:0000000000004148
.text:0000000000004148 loc_4148:                               ; CODE XREF: rpl_fclose+1A↑j
.text:0000000000004148                 mov     rdi, rbx        ; stream
.text:000000000000414B                 call    _fileno
.text:0000000000004150                 xor     esi, esi        ; offset
.text:0000000000004152                 mov     edx, 1          ; whence
.text:0000000000004157                 mov     edi, eax        ; fd
.text:0000000000004159                 call    _lseek
.text:000000000000415E                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000004162                 jnz     short loc_411C
.text:0000000000004164
.text:0000000000004164 loc_4164:                               ; CODE XREF: rpl_fclose+26↑j
.text:0000000000004164                 mov     rdi, rbx        ; stream
.text:0000000000004167
.text:0000000000004167 loc_4167:                               ; CODE XREF: rpl_fclose+11↑j
.text:0000000000004167                 pop     rbx
.text:0000000000004168                 pop     rbp
.text:0000000000004169                 pop     r12
.text:000000000000416B                 jmp     _fclose
.text:0000000000004170 ; ---------------------------------------------------------------------------
.text:0000000000004170
.text:0000000000004170 loc_4170:                               ; CODE XREF: rpl_fclose+3E↑j
.text:0000000000004170                 mov     [rbp+0], r12d
.text:0000000000004174                 mov     eax, 0FFFFFFFFh
.text:0000000000004179                 jmp     short loc_4140
.text:0000000000004179 ; } // starts at 4100
.text:0000000000004179 rpl_fclose      endp
.text:0000000000004179
.text:0000000000004179 ; ---------------------------------------------------------------------------
.text:000000000000417B                 align 20h
.text:0000000000004180
.text:0000000000004180 ; =============== S U B R O U T I N E =======================================
.text:0000000000004180
.text:0000000000004180 ; Attributes: info_from_lumina
.text:0000000000004180
.text:0000000000004180 ; int __fastcall rpl_fflush(FILE *stream)
.text:0000000000004180                 public rpl_fflush
.text:0000000000004180 rpl_fflush      proc near               ; CODE XREF: rpl_fclose+1F↑p
.text:0000000000004180 ; __unwind {
.text:0000000000004180                 test    rdi, rdi
.text:0000000000004183                 push    rbx
.text:0000000000004184                 mov     rbx, rdi
.text:0000000000004187                 jz      short loc_419A
.text:0000000000004189                 call    ___freading
.text:000000000000418E                 test    eax, eax
.text:0000000000004190                 jz      short loc_419A
.text:0000000000004192                 test    dword ptr [rbx], 100h
.text:0000000000004198                 jnz     short loc_41A8
.text:000000000000419A
.text:000000000000419A loc_419A:                               ; CODE XREF: rpl_fflush+7↑j
.text:000000000000419A                                         ; rpl_fflush+10↑j
.text:000000000000419A                 mov     rdi, rbx        ; stream
.text:000000000000419D                 pop     rbx
.text:000000000000419E                 jmp     _fflush
.text:000000000000419E ; ---------------------------------------------------------------------------
.text:00000000000041A3                 align 8
.text:00000000000041A8
.text:00000000000041A8 loc_41A8:                               ; CODE XREF: rpl_fflush+18↑j
.text:00000000000041A8                 mov     rdi, rbx
.text:00000000000041AB                 mov     edx, 1
.text:00000000000041B0                 xor     esi, esi
.text:00000000000041B2                 call    rpl_fseeko
.text:00000000000041B7                 mov     rdi, rbx        ; stream
.text:00000000000041BA                 pop     rbx
.text:00000000000041BB                 jmp     _fflush
.text:00000000000041BB ; } // starts at 4180
.text:00000000000041BB rpl_fflush      endp
.text:00000000000041BB
.text:00000000000041C0
.text:00000000000041C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000041C0
.text:00000000000041C0 ; Attributes: info_from_lumina
.text:00000000000041C0
.text:00000000000041C0 ; int __fastcall rpl_fseeko(FILE *fp, off_t offset, int whence)
.text:00000000000041C0                 public rpl_fseeko
.text:00000000000041C0 rpl_fseeko      proc near               ; CODE XREF: rpl_fflush+32↑p
.text:00000000000041C0 ; __unwind {
.text:00000000000041C0                 mov     rax, [rdi+8]
.text:00000000000041C4                 cmp     [rdi+10h], rax
.text:00000000000041C8                 jz      short loc_41D0
.text:00000000000041CA
.text:00000000000041CA loc_41CA:                               ; CODE XREF: rpl_fseeko+18↓j
.text:00000000000041CA                                         ; rpl_fseeko+1F↓j
.text:00000000000041CA                 jmp     _fseeko
.text:00000000000041CA ; ---------------------------------------------------------------------------
.text:00000000000041CF                 align 10h
.text:00000000000041D0
.text:00000000000041D0 loc_41D0:                               ; CODE XREF: rpl_fseeko+8↑j
.text:00000000000041D0                 mov     rax, [rdi+20h]
.text:00000000000041D4                 cmp     [rdi+28h], rax
.text:00000000000041D8                 jnz     short loc_41CA
.text:00000000000041DA                 cmp     qword ptr [rdi+48h], 0
.text:00000000000041DF                 jnz     short loc_41CA
.text:00000000000041E1                 push    r12
.text:00000000000041E3                 push    rbp
.text:00000000000041E4                 mov     r12d, edx
.text:00000000000041E7                 push    rbx
.text:00000000000041E8                 mov     rbp, rsi
.text:00000000000041EB                 mov     rbx, rdi
.text:00000000000041EE                 call    _fileno
.text:00000000000041F3                 mov     edx, r12d       ; whence
.text:00000000000041F6                 mov     rsi, rbp        ; offset
.text:00000000000041F9                 mov     edi, eax        ; fd
.text:00000000000041FB                 call    _lseek
.text:0000000000004200                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000004204                 jz      short loc_4212
.text:0000000000004206                 and     dword ptr [rbx], 0FFFFFFEFh
.text:0000000000004209                 mov     [rbx+90h], rax
.text:0000000000004210                 xor     eax, eax
.text:0000000000004212
.text:0000000000004212 loc_4212:                               ; CODE XREF: rpl_fseeko+44↑j
.text:0000000000004212                 pop     rbx
.text:0000000000004213                 pop     rbp
.text:0000000000004214                 pop     r12
.text:0000000000004216                 retn
.text:0000000000004216 ; } // starts at 41C0
.text:0000000000004216 rpl_fseeko      endp
.text:0000000000004216
.text:0000000000004216 ; ---------------------------------------------------------------------------
.text:0000000000004217                 align 20h
.text:0000000000004220
.text:0000000000004220 ; =============== S U B R O U T I N E =======================================
.text:0000000000004220
.text:0000000000004220 ; Attributes: info_from_lumina
.text:0000000000004220
.text:0000000000004220 ; void _libc_csu_init(void)
.text:0000000000004220                 public __libc_csu_init
.text:0000000000004220 __libc_csu_init proc near               ; DATA XREF: start+16↑o
.text:0000000000004220 ; __unwind {
.text:0000000000004220                 push    r15
.text:0000000000004222                 push    r14
.text:0000000000004224                 mov     r15, rdx
.text:0000000000004227                 push    r13
.text:0000000000004229                 push    r12
.text:000000000000422B                 lea     r12, __frame_dummy_init_array_entry
.text:0000000000004232                 push    rbp
.text:0000000000004233                 lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:000000000000423A                 push    rbx
.text:000000000000423B                 mov     r13d, edi
.text:000000000000423E                 mov     r14, rsi
.text:0000000000004241                 sub     rbp, r12
.text:0000000000004244                 sub     rsp, 8
.text:0000000000004248                 sar     rbp, 3
.text:000000000000424C                 call    _init_proc
.text:0000000000004251                 test    rbp, rbp
.text:0000000000004254                 jz      short loc_4276
.text:0000000000004256                 xor     ebx, ebx
.text:0000000000004258                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000004260
.text:0000000000004260 loc_4260:                               ; CODE XREF: __libc_csu_init+54↓j
.text:0000000000004260                 mov     rdx, r15
.text:0000000000004263                 mov     rsi, r14
.text:0000000000004266                 mov     edi, r13d
.text:0000000000004269                 call    ds:(__frame_dummy_init_array_entry - 205C30h)[r12+rbx*8]
.text:000000000000426D                 add     rbx, 1
.text:0000000000004271                 cmp     rbp, rbx
.text:0000000000004274                 jnz     short loc_4260
.text:0000000000004276
.text:0000000000004276 loc_4276:                               ; CODE XREF: __libc_csu_init+34↑j
.text:0000000000004276                 add     rsp, 8
.text:000000000000427A                 pop     rbx
.text:000000000000427B                 pop     rbp
.text:000000000000427C                 pop     r12
.text:000000000000427E                 pop     r13
.text:0000000000004280                 pop     r14
.text:0000000000004282                 pop     r15
.text:0000000000004284                 retn
.text:0000000000004284 ; } // starts at 4220
.text:0000000000004284 __libc_csu_init endp
.text:0000000000004284
.text:0000000000004284 ; ---------------------------------------------------------------------------
.text:0000000000004285                 align 10h
.text:0000000000004290
.text:0000000000004290 ; =============== S U B R O U T I N E =======================================
.text:0000000000004290
.text:0000000000004290
.text:0000000000004290 ; void _libc_csu_fini(void)
.text:0000000000004290                 public __libc_csu_fini
.text:0000000000004290 __libc_csu_fini proc near               ; DATA XREF: start+F↑o
.text:0000000000004290 ; __unwind {
.text:0000000000004290                 rep retn
.text:0000000000004290 ; } // starts at 4290
.text:0000000000004290 __libc_csu_fini endp
.text:0000000000004290
.text:0000000000004290 ; ---------------------------------------------------------------------------
.text:0000000000004292                 align 20h
.text:00000000000042A0
.text:00000000000042A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000042A0
.text:00000000000042A0
.text:00000000000042A0 atexit          proc near               ; CODE XREF: main+4B↑p
.text:00000000000042A0 ; __unwind {
.text:00000000000042A0                 mov     rdx, cs:__dso_handle ; lpdso_handle
.text:00000000000042A7                 xor     esi, esi        ; obj
.text:00000000000042A9                 jmp     ___cxa_atexit
.text:00000000000042A9 ; } // starts at 42A0
.text:00000000000042A9 atexit          endp
.text:00000000000042A9
.text:00000000000042A9 _text           ends
.text:00000000000042A9
LOAD:00000000000042AE ; ===========================================================================
LOAD:00000000000042AE
LOAD:00000000000042AE ; Segment type: Pure code
LOAD:00000000000042AE ; Segment permissions: Read/Execute
LOAD:00000000000042AE LOAD            segment byte public 'CODE' use64
LOAD:00000000000042AE                 assume cs:LOAD
LOAD:00000000000042AE                 ;org 42AEh
LOAD:00000000000042AE                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000042AE                 align 10h
LOAD:00000000000042AE LOAD            ends
LOAD:00000000000042AE
.fini:00000000000042B0 ; ===========================================================================
.fini:00000000000042B0
.fini:00000000000042B0 ; Segment type: Pure code
.fini:00000000000042B0 ; Segment permissions: Read/Execute
.fini:00000000000042B0 _fini           segment dword public 'CODE' use64
.fini:00000000000042B0                 assume cs:_fini
.fini:00000000000042B0                 ;org 42B0h
.fini:00000000000042B0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:00000000000042B0
.fini:00000000000042B0 ; =============== S U B R O U T I N E =======================================
.fini:00000000000042B0
.fini:00000000000042B0
.fini:00000000000042B0                 public _term_proc
.fini:00000000000042B0 _term_proc      proc near
.fini:00000000000042B0                 sub     rsp, 8          ; _fini
.fini:00000000000042B4                 add     rsp, 8
.fini:00000000000042B8                 retn
.fini:00000000000042B8 _term_proc      endp
.fini:00000000000042B8
.fini:00000000000042B8 _fini           ends
.fini:00000000000042B8
LOAD:00000000000042B9 ; ===========================================================================
LOAD:00000000000042B9
LOAD:00000000000042B9 ; Segment type: Pure code
LOAD:00000000000042B9 ; Segment permissions: Read/Execute
LOAD:00000000000042B9 LOAD            segment byte public 'CODE' use64
LOAD:00000000000042B9                 assume cs:LOAD
LOAD:00000000000042B9                 ;org 42B9h
LOAD:00000000000042B9                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000042B9                 align 20h
LOAD:00000000000042B9 LOAD            ends
LOAD:00000000000042B9
.rodata:00000000000042C0 ; ===========================================================================
.rodata:00000000000042C0
.rodata:00000000000042C0 ; Segment type: Pure data
.rodata:00000000000042C0 ; Segment permissions: Read
.rodata:00000000000042C0 _rodata         segment align_32 public 'CONST' use64
.rodata:00000000000042C0                 assume cs:_rodata
.rodata:00000000000042C0                 ;org 42C0h
.rodata:00000000000042C0                 public _IO_stdin_used
.rodata:00000000000042C0 _IO_stdin_used  db    1
.rodata:00000000000042C1                 db    0
.rodata:00000000000042C2                 db    2
.rodata:00000000000042C3                 db    0
.rodata:00000000000042C4 aTrue           db 'true',0             ; DATA XREF: main+9A↑o
.rodata:00000000000042C4                                         ; usage+BC↑o ...
.rodata:00000000000042C9 aS              db '%s',0Ah             ; DATA XREF: usage+61↑o
.rodata:00000000000042C9                                         ; main+14↑o ...
.rodata:00000000000042C9                 db 0Ah,0
.rodata:00000000000042CE asc_42CE        db '[',0                ; DATA XREF: usage+F1↑o
.rodata:00000000000042D0 aTestInvocation db 'test invocation',0  ; DATA XREF: usage+11F↑o
.rodata:00000000000042E0 aMultiCallInvoc db 'Multi-call invocation',0
.rodata:00000000000042E0                                         ; DATA XREF: usage+13C↑o
.rodata:00000000000042E0                                         ; usage+245↑o ...
.rodata:00000000000042F6 aSha224sum      db 'sha224sum',0        ; DATA XREF: usage+154↑o
.rodata:0000000000004300 aSha2Utilities  db 'sha2 utilities',0   ; DATA XREF: usage+165↑o
.rodata:000000000000430F aSha256sum      db 'sha256sum',0        ; DATA XREF: usage+F8↑o
.rodata:0000000000004319 aSha384sum      db 'sha384sum',0        ; DATA XREF: usage+12B↑o
.rodata:0000000000004323 aSha512sum      db 'sha512sum',0        ; DATA XREF: usage+148↑o
.rodata:000000000000432D ; const char aSOnlineHelpS[]
.rodata:000000000000432D aSOnlineHelpS   db 0Ah                  ; DATA XREF: usage+1B3↑o
.rodata:000000000000432D                 db '%s online help: <%s>',0Ah,0
.rodata:0000000000004344 unk_4344        db  47h ; G             ; DATA XREF: main+93↑o
.rodata:0000000000004344                                         ; usage+1CF↑o ...
.rodata:0000000000004345                 db  4Eh ; N
.rodata:0000000000004346                 db  55h ; U
.rodata:0000000000004347                 db  20h
.rodata:0000000000004348 ; const char domainname[]
.rodata:0000000000004348 domainname      db 'coreutils',0        ; DATA XREF: main+2C↑o
.rodata:0000000000004348                                         ; main+38↑o ...
.rodata:0000000000004352 ; const char aEn[]
.rodata:0000000000004352 aEn             db 'en_',0              ; DATA XREF: usage+1F6↑o
.rodata:0000000000004352                                         ; usage+2B9↑o
.rodata:0000000000004356 ; const char aFullDocumentat[]
.rodata:0000000000004356 aFullDocumentat db 'Full documentation <%s%s>',0Ah,0
.rodata:0000000000004356                                         ; DATA XREF: usage:loc_1762↑o
.rodata:0000000000004356                                         ; usage:loc_1852↑o
.rodata:0000000000004371 ; const char dirname[]
.rodata:0000000000004371 dirname         db '/usr/local/share/locale',0
.rodata:0000000000004371                                         ; DATA XREF: main+25↑o
.rodata:0000000000004389 ; const char s2[]
.rodata:0000000000004389 s2              db '--help',0           ; DATA XREF: main+54↑o
.rodata:0000000000004390 ; const char aVersion[]
.rodata:0000000000004390 aVersion        db '--version',0        ; DATA XREF: main+67↑o
.rodata:000000000000439A aJimMeyering    db 'Jim Meyering',0     ; DATA XREF: main+8C↑o
.rodata:00000000000043A7                 align 8
.rodata:00000000000043A8 ; const char msgid[]
.rodata:00000000000043A8 msgid           db 'Usage: %s [ignored command line arguments]',0Ah
.rodata:00000000000043A8                                         ; DATA XREF: usage+4↑o
.rodata:00000000000043A8                 db '  or:  %s OPTION',0Ah,0
.rodata:00000000000043E5                 align 8
.rodata:00000000000043E8 ; const char aExitWithAStatu[]
.rodata:00000000000043E8 aExitWithAStatu db 'Exit with a status code indicating success.',0
.rodata:00000000000043E8                                         ; DATA XREF: usage+4E↑o
.rodata:0000000000004414                 align 8
.rodata:0000000000004418 ; const char aHelpDisplayThi[]
.rodata:0000000000004418 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.rodata:0000000000004418                                         ; DATA XREF: usage+7E↑o
.rodata:0000000000004445                 align 8
.rodata:0000000000004448 ; const char aVersionOutputV[]
.rodata:0000000000004448 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.rodata:0000000000004448                                         ; DATA XREF: usage+A3↑o
.rodata:000000000000447E                 align 20h
.rodata:0000000000004480 ; const char aNoteYourShellM[]
.rodata:0000000000004480 aNoteYourShellM db 0Ah                  ; DATA XREF: usage+C8↑o
.rodata:0000000000004480                 db 'NOTE: your shell may have its own version of %s, which usually su'
.rodata:0000000000004480                 db 'persedes',0Ah
.rodata:0000000000004480                 db 'the version described here.  Please refer to your shell',27h,'s d'
.rodata:0000000000004480                 db 'ocumentation',0Ah
.rodata:0000000000004480                 db 'for details about the options it supports.',0Ah,0
.rodata:000000000000453F                 align 20h
.rodata:0000000000004540 aHttpsWwwGnuOrg db 'https://www.gnu.org/software/coreutils/',0
.rodata:0000000000004540                                         ; DATA XREF: usage+1C8↑o
.rodata:0000000000004540                                         ; usage+22C↑o ...
.rodata:0000000000004568 ; const char aReportAnyTrans[]
.rodata:0000000000004568 aReportAnyTrans db 'Report any translation bugs to <https://translationproject.org/te'
.rodata:0000000000004568                                         ; DATA XREF: usage+2DF↑o
.rodata:0000000000004568                 db 'am/>',0Ah,0
.rodata:00000000000045AF                 align 10h
.rodata:00000000000045B0 ; const char aOrAvailableLoc[]
.rodata:00000000000045B0 aOrAvailableLoc db 'or available locally via: info ',27h,'(coreutils) %s%s',27h,0Ah,0
.rodata:00000000000045B0                                         ; DATA XREF: usage:loc_17A7↑o
.rodata:00000000000045E3 a831            db '8.31',0             ; DATA XREF: .data:Version↓o
.rodata:00000000000045E8 ; const char aWriteError[]
.rodata:00000000000045E8 aWriteError     db 'write error',0      ; DATA XREF: close_stdout:loc_1903↑o
.rodata:00000000000045F4 ; const char format[]
.rodata:00000000000045F4 format          db '%s: %s',0           ; DATA XREF: close_stdout+6C↑o
.rodata:00000000000045F4                                         ; close_stdout+8F↑o ...
.rodata:00000000000045FB                 align 20h
.rodata:0000000000004600 aANullArgv0WasP db 'A NULL argv[0] was passed through an exec system call.',0Ah,0
.rodata:0000000000004600                                         ; DATA XREF: set_program_name+84↑o
.rodata:0000000000004638 aLibs           db '/.libs/',0          ; DATA XREF: set_program_name+2C↑o
.rodata:0000000000004640 aLt             db 'lt-',0              ; DATA XREF: set_program_name+44↑o
.rodata:0000000000004644 unk_4644        db 0E2h                 ; DATA XREF: gettext_quote+CE↑o
.rodata:0000000000004645                 db  80h
.rodata:0000000000004646                 db  98h
.rodata:0000000000004647                 db    0
.rodata:0000000000004648 unk_4648        db 0E2h                 ; DATA XREF: gettext_quote+D5↑o
.rodata:0000000000004649                 db  80h
.rodata:000000000000464A                 db  99h
.rodata:000000000000464B                 db    0
.rodata:000000000000464C unk_464C        db 0A1h                 ; DATA XREF: gettext_quote+74↑o
.rodata:000000000000464D                 db    7
.rodata:000000000000464E                 db  65h ; e
.rodata:000000000000464F                 db    0
.rodata:0000000000004650 unk_4650        db 0A1h                 ; DATA XREF: gettext_quote+7B↑o
.rodata:0000000000004651                 db 0AFh
.rodata:0000000000004652                 db    0
.rodata:0000000000004653 unk_4653        db  22h ; "             ; DATA XREF: gettext_quote:loc_1A30↑o
.rodata:0000000000004653                                         ; quotearg_buffer_restyled:loc_27EB↑o ...
.rodata:0000000000004654                 db    0
.rodata:0000000000004655 ; const char asc_4655[2]
.rodata:0000000000004655 asc_4655        db 27h,0                ; DATA XREF: gettext_quote+27↑o
.rodata:0000000000004655                                         ; quotearg_buffer_restyled:loc_1BB3↑o ...
.rodata:0000000000004657 ; const char asc_4657[2]
.rodata:0000000000004657 asc_4657        db '`',0                ; DATA XREF: quotearg_buffer_restyled+D9B↑o
.rodata:0000000000004657                                         ; quotearg_buffer_restyled+DB6↑o
.rodata:0000000000004659 aLiteral        db 'literal',0          ; DATA XREF: .data.rel.ro:quoting_style_args↓o
.rodata:0000000000004661 aShell          db 'shell',0            ; DATA XREF: .data.rel.ro:0000000000205C48↓o
.rodata:0000000000004667 aShellAlways    db 'shell-always',0     ; DATA XREF: .data.rel.ro:0000000000205C50↓o
.rodata:0000000000004674 aShellEscape    db 'shell-escape',0     ; DATA XREF: .data.rel.ro:0000000000205C58↓o
.rodata:0000000000004674                                         ; .data.rel.ro:0000000000205C78↓o
.rodata:0000000000004681 aShellEscapeAlw db 'shell-escape-always',0
.rodata:0000000000004681                                         ; DATA XREF: .data.rel.ro:0000000000205C60↓o
.rodata:0000000000004695 aC_1            db 'c',0                ; DATA XREF: .data.rel.ro:0000000000205C68↓o
.rodata:0000000000004697 aCMaybe         db 'c-maybe',0          ; DATA XREF: .data.rel.ro:0000000000205C70↓o
.rodata:000000000000469F aClocale        db 'clocale',0          ; DATA XREF: .data.rel.ro:0000000000205C88↓o
.rodata:00000000000046A7                 align 20h
.rodata:00000000000046C0 jpt_1B91        dd offset loc_293A - 46C0h
.rodata:00000000000046C0                                         ; DATA XREF: quotearg_buffer_restyled+80↑o
.rodata:00000000000046C0                                         ; quotearg_buffer_restyled+8A↑r
.rodata:00000000000046C0                 dd offset loc_1B93 - 46C0h ; jump table for switch statement
.rodata:00000000000046C0                 dd offset loc_2B68 - 46C0h
.rodata:00000000000046C0                 dd offset loc_2974 - 46C0h
.rodata:00000000000046C0                 dd offset loc_2764 - 46C0h
.rodata:00000000000046C0                 dd offset loc_27C0 - 46C0h
.rodata:00000000000046C0                 dd offset loc_2815 - 46C0h
.rodata:00000000000046C0                 dd offset loc_285A - 46C0h
.rodata:00000000000046C0                 dd offset loc_2894 - 46C0h
.rodata:00000000000046C0                 dd offset loc_2894 - 46C0h
.rodata:00000000000046C0                 dd offset loc_2894 - 46C0h
.rodata:00000000000046EC jpt_1CEE        dd offset loc_1F10 - 46ECh, offset def_1CEE - 46ECh, offset def_1CEE - 46ECh
.rodata:00000000000046EC                                         ; DATA XREF: quotearg_buffer_restyled+1DD↑o
.rodata:00000000000046EC                                         ; quotearg_buffer_restyled+1E7↑r
.rodata:00000000000046EC                 dd offset def_1CEE - 46ECh, offset def_1CEE - 46ECh, offset def_1CEE - 46ECh ; jump table for switch statement
.rodata:00000000000046EC                 dd offset def_1CEE - 46ECh, offset loc_1F50 - 46ECh, offset loc_1E58 - 46ECh
.rodata:00000000000046EC                 dd offset loc_1E18 - 46ECh, offset loc_1FE0 - 46ECh, offset loc_1FD0 - 46ECh
.rodata:00000000000046EC                 dd offset loc_1FC0 - 46ECh, offset loc_1FB0 - 46ECh, offset def_1CEE - 46ECh
.rodata:00000000000046EC                 dd offset def_1CEE - 46ECh, offset def_1CEE - 46ECh, offset def_1CEE - 46ECh
.rodata:00000000000046EC                 dd offset def_1CEE - 46ECh, offset def_1CEE - 46ECh, offset def_1CEE - 46ECh
.rodata:00000000000046EC                 dd offset def_1CEE - 46ECh, offset def_1CEE - 46ECh, offset def_1CEE - 46ECh
.rodata:00000000000046EC                 dd offset def_1CEE - 46ECh, offset def_1CEE - 46ECh, offset def_1CEE - 46ECh
.rodata:00000000000046EC                 dd offset def_1CEE - 46ECh, offset def_1CEE - 46ECh, offset def_1CEE - 46ECh
.rodata:00000000000046EC                 dd offset def_1CEE - 46ECh, offset def_1CEE - 46ECh, offset loc_1FA0 - 46ECh
.rodata:00000000000046EC                 dd offset loc_1F90 - 46ECh, offset loc_1F90 - 46ECh, offset loc_1F60 - 46ECh
.rodata:00000000000046EC                 dd offset loc_1F90 - 46ECh, offset loc_1F38 - 46ECh, offset loc_1F90 - 46ECh
.rodata:00000000000046EC                 dd offset loc_1DF3 - 46ECh, offset loc_1F90 - 46ECh, offset loc_1F90 - 46ECh
.rodata:00000000000046EC                 dd offset loc_1F90 - 46ECh, offset loc_1F38 - 46ECh, offset loc_1F38 - 46ECh
.rodata:00000000000046EC                 dd offset loc_1F38 - 46ECh, offset loc_1F38 - 46ECh, offset loc_1F38 - 46ECh
.rodata:00000000000046EC                 dd offset loc_1F38 - 46ECh, offset loc_1F38 - 46ECh, offset loc_1F38 - 46ECh
.rodata:00000000000046EC                 dd offset loc_1F38 - 46ECh, offset loc_1F38 - 46ECh, offset loc_1F38 - 46ECh
.rodata:00000000000046EC                 dd offset loc_1F38 - 46ECh, offset loc_1F38 - 46ECh, offset loc_1F38 - 46ECh
.rodata:00000000000046EC                 dd offset loc_1F38 - 46ECh, offset loc_1F38 - 46ECh, offset loc_1F90 - 46ECh
.rodata:00000000000046EC                 dd offset loc_1F90 - 46ECh, offset loc_1F90 - 46ECh, offset loc_1F90 - 46ECh
.rodata:00000000000046EC                 dd offset loc_1DC3 - 46ECh, offset def_1CEE - 46ECh, offset loc_1F38 - 46ECh
.rodata:00000000000046EC                 dd offset loc_1F38 - 46ECh, offset loc_1F38 - 46ECh, offset loc_1F38 - 46ECh
.rodata:00000000000046EC                 dd offset loc_1F38 - 46ECh, offset loc_1F38 - 46ECh, offset loc_1F38 - 46ECh
.rodata:00000000000046EC                 dd offset loc_1F38 - 46ECh, offset loc_1F38 - 46ECh, offset loc_1F38 - 46ECh
.rodata:00000000000046EC                 dd offset loc_1F38 - 46ECh, offset loc_1F38 - 46ECh, offset loc_1F38 - 46ECh
.rodata:00000000000046EC                 dd offset loc_1F38 - 46ECh, offset loc_1F38 - 46ECh, offset loc_1F38 - 46ECh
.rodata:00000000000046EC                 dd offset loc_1F38 - 46ECh, offset loc_1F38 - 46ECh, offset loc_1F38 - 46ECh
.rodata:00000000000046EC                 dd offset loc_1F38 - 46ECh, offset loc_1F38 - 46ECh, offset loc_1F38 - 46ECh
.rodata:00000000000046EC                 dd offset loc_1F38 - 46ECh, offset loc_1F38 - 46ECh, offset loc_1F38 - 46ECh
.rodata:00000000000046EC                 dd offset loc_1F38 - 46ECh, offset loc_1F90 - 46ECh, offset loc_1E68 - 46ECh
.rodata:00000000000046EC                 dd offset loc_1F38 - 46ECh, offset loc_1F90 - 46ECh, offset loc_1F38 - 46ECh
.rodata:00000000000046EC                 dd offset loc_1F90 - 46ECh, offset loc_1F38 - 46ECh, offset loc_1F38 - 46ECh
.rodata:00000000000046EC                 dd offset loc_1F38 - 46ECh, offset loc_1F38 - 46ECh, offset loc_1F38 - 46ECh
.rodata:00000000000046EC                 dd offset loc_1F38 - 46ECh, offset loc_1F38 - 46ECh, offset loc_1F38 - 46ECh
.rodata:00000000000046EC                 dd offset loc_1F38 - 46ECh, offset loc_1F38 - 46ECh, offset loc_1F38 - 46ECh
.rodata:00000000000046EC                 dd offset loc_1F38 - 46ECh, offset loc_1F38 - 46ECh, offset loc_1F38 - 46ECh
.rodata:00000000000046EC                 dd offset loc_1F38 - 46ECh, offset loc_1F38 - 46ECh, offset loc_1F38 - 46ECh
.rodata:00000000000046EC                 dd offset loc_1F38 - 46ECh, offset loc_1F38 - 46ECh, offset loc_1F38 - 46ECh
.rodata:00000000000046EC                 dd offset loc_1F38 - 46ECh, offset loc_1F38 - 46ECh, offset loc_1F38 - 46ECh
.rodata:00000000000046EC                 dd offset loc_1F38 - 46ECh, offset loc_1F38 - 46ECh, offset loc_1F38 - 46ECh
.rodata:00000000000046EC                 dd offset loc_1CF3 - 46ECh, offset loc_1F90 - 46ECh, offset loc_1CF3 - 46ECh
.rodata:00000000000046EC                 dd offset loc_1F60 - 46ECh
.rodata:00000000000048E8 jpt_207A        dd offset loc_20E0 - 48E8h, offset def_207A - 48E8h, offset def_207A - 48E8h
.rodata:00000000000048E8                                         ; DATA XREF: quotearg_buffer_restyled+569↑o
.rodata:00000000000048E8                                         ; quotearg_buffer_restyled+573↑r
.rodata:00000000000048E8                 dd offset def_207A - 48E8h, offset def_207A - 48E8h, offset def_207A - 48E8h ; jump table for switch statement
.rodata:00000000000048E8                 dd offset def_207A - 48E8h, offset loc_20D0 - 48E8h, offset loc_2220 - 48E8h
.rodata:00000000000048E8                 dd offset loc_2208 - 48E8h, offset loc_20B8 - 48E8h, offset loc_21F8 - 48E8h
.rodata:00000000000048E8                 dd offset loc_20A0 - 48E8h, offset loc_21E0 - 48E8h, offset def_207A - 48E8h
.rodata:00000000000048E8                 dd offset def_207A - 48E8h, offset def_207A - 48E8h, offset def_207A - 48E8h
.rodata:00000000000048E8                 dd offset def_207A - 48E8h, offset def_207A - 48E8h, offset def_207A - 48E8h
.rodata:00000000000048E8                 dd offset def_207A - 48E8h, offset def_207A - 48E8h, offset def_207A - 48E8h
.rodata:00000000000048E8                 dd offset def_207A - 48E8h, offset def_207A - 48E8h, offset def_207A - 48E8h
.rodata:00000000000048E8                 dd offset def_207A - 48E8h, offset def_207A - 48E8h, offset def_207A - 48E8h
.rodata:00000000000048E8                 dd offset def_207A - 48E8h, offset def_207A - 48E8h, offset loc_21C8 - 48E8h
.rodata:00000000000048E8                 dd offset loc_21B0 - 48E8h, offset loc_21B0 - 48E8h, offset loc_2198 - 48E8h
.rodata:00000000000048E8                 dd offset loc_21B0 - 48E8h, offset loc_2180 - 48E8h, offset loc_21B0 - 48E8h
.rodata:00000000000048E8                 dd offset loc_1DF0 - 48E8h, offset loc_21B0 - 48E8h, offset loc_21B0 - 48E8h
.rodata:00000000000048E8                 dd offset loc_21B0 - 48E8h, offset loc_2180 - 48E8h, offset loc_2180 - 48E8h
.rodata:00000000000048E8                 dd offset loc_2180 - 48E8h, offset loc_2180 - 48E8h, offset loc_2180 - 48E8h
.rodata:00000000000048E8                 dd offset loc_2180 - 48E8h, offset loc_2180 - 48E8h, offset loc_2180 - 48E8h
.rodata:00000000000048E8                 dd offset loc_2180 - 48E8h, offset loc_2180 - 48E8h, offset loc_2180 - 48E8h
.rodata:00000000000048E8                 dd offset loc_2180 - 48E8h, offset loc_2180 - 48E8h, offset loc_2180 - 48E8h
.rodata:00000000000048E8                 dd offset loc_2180 - 48E8h, offset loc_2180 - 48E8h, offset loc_21B0 - 48E8h
.rodata:00000000000048E8                 dd offset loc_21B0 - 48E8h, offset loc_21B0 - 48E8h, offset loc_21B0 - 48E8h
.rodata:00000000000048E8                 dd offset loc_1DC0 - 48E8h, offset def_207A - 48E8h, offset loc_2180 - 48E8h
.rodata:00000000000048E8                 dd offset loc_2180 - 48E8h, offset loc_2180 - 48E8h, offset loc_2180 - 48E8h
.rodata:00000000000048E8                 dd offset loc_2180 - 48E8h, offset loc_2180 - 48E8h, offset loc_2180 - 48E8h
.rodata:00000000000048E8                 dd offset loc_2180 - 48E8h, offset loc_2180 - 48E8h, offset loc_2180 - 48E8h
.rodata:00000000000048E8                 dd offset loc_2180 - 48E8h, offset loc_2180 - 48E8h, offset loc_2180 - 48E8h
.rodata:00000000000048E8                 dd offset loc_2180 - 48E8h, offset loc_2180 - 48E8h, offset loc_2180 - 48E8h
.rodata:00000000000048E8                 dd offset loc_2180 - 48E8h, offset loc_2180 - 48E8h, offset loc_2180 - 48E8h
.rodata:00000000000048E8                 dd offset loc_2180 - 48E8h, offset loc_2180 - 48E8h, offset loc_2180 - 48E8h
.rodata:00000000000048E8                 dd offset loc_2180 - 48E8h, offset loc_2180 - 48E8h, offset loc_2180 - 48E8h
.rodata:00000000000048E8                 dd offset loc_2180 - 48E8h, offset loc_21B0 - 48E8h, offset loc_2080 - 48E8h
.rodata:00000000000048E8                 dd offset loc_2180 - 48E8h, offset loc_21B0 - 48E8h, offset loc_2180 - 48E8h
.rodata:00000000000048E8                 dd offset loc_21B0 - 48E8h, offset loc_2180 - 48E8h, offset loc_2180 - 48E8h
.rodata:00000000000048E8                 dd offset loc_2180 - 48E8h, offset loc_2180 - 48E8h, offset loc_2180 - 48E8h
.rodata:00000000000048E8                 dd offset loc_2180 - 48E8h, offset loc_2180 - 48E8h, offset loc_2180 - 48E8h
.rodata:00000000000048E8                 dd offset loc_2180 - 48E8h, offset loc_2180 - 48E8h, offset loc_2180 - 48E8h
.rodata:00000000000048E8                 dd offset loc_2180 - 48E8h, offset loc_2180 - 48E8h, offset loc_2180 - 48E8h
.rodata:00000000000048E8                 dd offset loc_2180 - 48E8h, offset loc_2180 - 48E8h, offset loc_2180 - 48E8h
.rodata:00000000000048E8                 dd offset loc_2180 - 48E8h, offset loc_2180 - 48E8h, offset loc_2180 - 48E8h
.rodata:00000000000048E8                 dd offset loc_2180 - 48E8h, offset loc_2180 - 48E8h, offset loc_2180 - 48E8h
.rodata:00000000000048E8                 dd offset loc_2180 - 48E8h, offset loc_2180 - 48E8h, offset loc_2180 - 48E8h
.rodata:00000000000048E8                 dd offset loc_1CF0 - 48E8h, offset loc_21B0 - 48E8h, offset loc_1CF0 - 48E8h
.rodata:00000000000048E8                 dd offset loc_2198 - 48E8h
.rodata:0000000000004AE4                 align 20h
.rodata:0000000000004B00                 public quoting_style_vals
.rodata:0000000000004B00 quoting_style_vals db    0
.rodata:0000000000004B01                 db    0
.rodata:0000000000004B02                 db    0
.rodata:0000000000004B03                 db    0
.rodata:0000000000004B04                 db    1
.rodata:0000000000004B05                 db    0
.rodata:0000000000004B06                 db    0
.rodata:0000000000004B07                 db    0
.rodata:0000000000004B08                 db    2
.rodata:0000000000004B09                 db    0
.rodata:0000000000004B0A                 db    0
.rodata:0000000000004B0B                 db    0
.rodata:0000000000004B0C                 db    3
.rodata:0000000000004B0D                 db    0
.rodata:0000000000004B0E                 db    0
.rodata:0000000000004B0F                 db    0
.rodata:0000000000004B10                 db    4
.rodata:0000000000004B11                 db    0
.rodata:0000000000004B12                 db    0
.rodata:0000000000004B13                 db    0
.rodata:0000000000004B14                 db    5
.rodata:0000000000004B15                 db    0
.rodata:0000000000004B16                 db    0
.rodata:0000000000004B17                 db    0
.rodata:0000000000004B18                 db    6
.rodata:0000000000004B19                 db    0
.rodata:0000000000004B1A                 db    0
.rodata:0000000000004B1B                 db    0
.rodata:0000000000004B1C                 db    7
.rodata:0000000000004B1D                 db    0
.rodata:0000000000004B1E                 db    0
.rodata:0000000000004B1F                 db    0
.rodata:0000000000004B20                 db    8
.rodata:0000000000004B21                 db    0
.rodata:0000000000004B22                 db    0
.rodata:0000000000004B23                 db    0
.rodata:0000000000004B24                 db    9
.rodata:0000000000004B25                 db    0
.rodata:0000000000004B26                 db    0
.rodata:0000000000004B27                 db    0
.rodata:0000000000004B28 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: version_etc_arn+23↑o
.rodata:0000000000004B34 aSS_0           db '%s %s',0Ah,0        ; DATA XREF: version_etc_arn+13E↑o
.rodata:0000000000004B3B ; const char aC_0[]
.rodata:0000000000004B3B aC_0            db '(C)',0              ; DATA XREF: version_etc_arn:loc_36DC↑o
.rodata:0000000000004B3F ; const char aWrittenByS[]
.rodata:0000000000004B3F aWrittenByS     db 'Written by %s.',0Ah,0
.rodata:0000000000004B3F                                         ; DATA XREF: version_etc_arn+1BB↑o
.rodata:0000000000004B4F ; const char aWrittenBySAndS[]
.rodata:0000000000004B4F aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.rodata:0000000000004B4F                                         ; DATA XREF: version_etc_arn+1FC↑o
.rodata:0000000000004B66 ; const char aWrittenBySSAnd[]
.rodata:0000000000004B66 aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.rodata:0000000000004B66                                         ; DATA XREF: version_etc_arn+248↑o
.rodata:0000000000004B82 ; const char aReportBugsToS[]
.rodata:0000000000004B82 aReportBugsToS  db 0Ah                  ; DATA XREF: emit_bug_reporting_address+1↑o
.rodata:0000000000004B82                 db 'Report bugs to: %s',0Ah,0
.rodata:0000000000004B97 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.rodata:0000000000004B97                                         ; DATA XREF: emit_bug_reporting_address+14↑o
.rodata:0000000000004BAD ; const char aSHomePageS[]
.rodata:0000000000004BAD aSHomePageS     db '%s home page: <%s>',0Ah,0
.rodata:0000000000004BAD                                         ; DATA XREF: emit_bug_reporting_address+2A↑o
.rodata:0000000000004BC1                 align 8
.rodata:0000000000004BC8 ; const char aLicenseGplv3Gn[]
.rodata:0000000000004BC8 aLicenseGplv3Gn db 0Ah                  ; DATA XREF: version_etc_arn+6E↑o
.rodata:0000000000004BC8                 db 'License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licen'
.rodata:0000000000004BC8                 db 'ses/gpl.html>.',0Ah
.rodata:0000000000004BC8                 db 'This is free software: you are free to change and redistribute it'
.rodata:0000000000004BC8                 db '.',0Ah
.rodata:0000000000004BC8                 db 'There is NO WARRANTY, to the extent permitted by law.',0Ah
.rodata:0000000000004BC8                 db 0Ah,0
.rodata:0000000000004C94                 align 8
.rodata:0000000000004C98 ; const char aWrittenBySSSAn[]
.rodata:0000000000004C98 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000004C98                                         ; DATA XREF: version_etc_arn:loc_3930↑o
.rodata:0000000000004C98                 db 'and %s.',0Ah,0
.rodata:0000000000004CB8 ; const char aWrittenBySSSSA[]
.rodata:0000000000004CB8 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000004CB8                                         ; DATA XREF: version_etc_arn+2EC↑o
.rodata:0000000000004CB8                 db '%s, and %s.',0Ah,0
.rodata:0000000000004CDC                 align 20h
.rodata:0000000000004CE0 ; const char aWrittenBySSSSS_1[]
.rodata:0000000000004CE0 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000004CE0                                         ; DATA XREF: version_etc_arn+320↑o
.rodata:0000000000004CE0                 db '%s, %s, and %s.',0Ah,0
.rodata:0000000000004D08 ; const char aWrittenBySSSSS_2[]
.rodata:0000000000004D08 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000004D08                                         ; DATA XREF: version_etc_arn+388↑o
.rodata:0000000000004D08                 db '%s, %s, %s, and %s.',0Ah,0
.rodata:0000000000004D34                 align 8
.rodata:0000000000004D38 ; const char aWrittenBySSSSS[]
.rodata:0000000000004D38 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000004D38                                         ; DATA XREF: version_etc_arn+B8↑o
.rodata:0000000000004D38                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000004D38                 db 'and %s.',0Ah,0
.rodata:0000000000004D68 ; const char aWrittenBySSSSS_0[]
.rodata:0000000000004D68 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000004D68                                         ; DATA XREF: version_etc_arn+168↑o
.rodata:0000000000004D68                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000004D68                 db '%s, and %s.',0Ah,0
.rodata:0000000000004D9C                 align 20h
.rodata:0000000000004DA0 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000004DA0                                         ; DATA XREF: version_etc_arn+3E5↑o
.rodata:0000000000004DA0                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000004DA0                 db '%s, %s, and others.',0Ah,0
.rodata:0000000000004DDC                 align 20h
.rodata:0000000000004DE0 ; const char aGeneralHelpUsi[]
.rodata:0000000000004DE0 aGeneralHelpUsi db 'General help using GNU software: <https://www.gnu.org/gethelp/>',0Ah
.rodata:0000000000004DE0                                         ; DATA XREF: emit_bug_reporting_address+61↑o
.rodata:0000000000004DE0                 db 0
.rodata:0000000000004E21                 align 8
.rodata:0000000000004E28 jpt_3744        dd offset loc_37C6 - 4E28h
.rodata:0000000000004E28                                         ; DATA XREF: version_etc_arn+96↑o
.rodata:0000000000004E28                                         ; version_etc_arn+9D↑r
.rodata:0000000000004E28                 dd offset loc_3858 - 4E28h ; jump table for switch statement
.rodata:0000000000004E28                 dd offset loc_3898 - 4E28h
.rodata:0000000000004E28                 dd offset loc_38E0 - 4E28h
.rodata:0000000000004E28                 dd offset loc_3930 - 4E28h
.rodata:0000000000004E28                 dd offset loc_3988 - 4E28h
.rodata:0000000000004E28                 dd offset loc_39B8 - 4E28h
.rodata:0000000000004E28                 dd offset loc_3A20 - 4E28h
.rodata:0000000000004E28                 dd offset loc_3750 - 4E28h
.rodata:0000000000004E28                 dd offset loc_3800 - 4E28h
.rodata:0000000000004E50                 align 20h
.rodata:0000000000004E60                 public version_etc_copyright
.rodata:0000000000004E60 version_etc_copyright db 'Copyright %s %d Free Software Foundation, Inc.',0
.rodata:0000000000004E60                                         ; DATA XREF: version_etc_arn+4F↑o
.rodata:0000000000004E8F ; const char aMemoryExhauste[]
.rodata:0000000000004E8F aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: xalloc_die↑o
.rodata:0000000000004EA0 aC              db 'C',0                ; DATA XREF: hard_locale+18↑o
.rodata:0000000000004EA2 aPosix          db 'POSIX',0            ; DATA XREF: hard_locale:loc_40A0↑o
.rodata:0000000000004EA8 aAscii          db 'ASCII',0            ; DATA XREF: locale_charset+16↑o
.rodata:0000000000004EA8                                         ; locale_charset:loc_40F0↑o
.rodata:0000000000004EA8 _rodata         ends
.rodata:0000000000004EA8
LOAD:0000000000004EAE ; ===========================================================================
LOAD:0000000000004EAE
LOAD:0000000000004EAE ; Segment type: Pure code
LOAD:0000000000004EAE ; Segment permissions: Read/Execute
LOAD:0000000000004EAE LOAD            segment byte public 'CODE' use64
LOAD:0000000000004EAE                 assume cs:LOAD
LOAD:0000000000004EAE                 ;org 4EAEh
LOAD:0000000000004EAE                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000004EAE                 align 10h
LOAD:0000000000004EAE LOAD            ends
LOAD:0000000000004EAE
.eh_frame_hdr:0000000000004EB0 ; ===========================================================================
.eh_frame_hdr:0000000000004EB0
.eh_frame_hdr:0000000000004EB0 ; Segment type: Pure data
.eh_frame_hdr:0000000000004EB0 ; Segment permissions: Read
.eh_frame_hdr:0000000000004EB0 _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:0000000000004EB0                 assume cs:_eh_frame_hdr
.eh_frame_hdr:0000000000004EB0                 ;org 4EB0h
.eh_frame_hdr:0000000000004EB0 __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000000001A0↑o
.eh_frame_hdr:0000000000004EB1                 db  1Bh
.eh_frame_hdr:0000000000004EB2                 db    3
.eh_frame_hdr:0000000000004EB3                 db  3Bh ; ;
.eh_frame_hdr:0000000000004EB4                 db  3Ch ; <
.eh_frame_hdr:0000000000004EB5                 db    2
.eh_frame_hdr:0000000000004EB6                 db    0
.eh_frame_hdr:0000000000004EB7                 db    0
.eh_frame_hdr:0000000000004EB8                 db  46h ; F
.eh_frame_hdr:0000000000004EB9                 db    0
.eh_frame_hdr:0000000000004EBA                 db    0
.eh_frame_hdr:0000000000004EBB                 db    0
.eh_frame_hdr:0000000000004EBC                 db  40h ; @
.eh_frame_hdr:0000000000004EBD                 db 0C2h
.eh_frame_hdr:0000000000004EBE                 db 0FFh
.eh_frame_hdr:0000000000004EBF                 db 0FFh
.eh_frame_hdr:0000000000004EC0                 db  88h
.eh_frame_hdr:0000000000004EC1                 db    2
.eh_frame_hdr:0000000000004EC2                 db    0
.eh_frame_hdr:0000000000004EC3                 db    0
.eh_frame_hdr:0000000000004EC4                 db 0C0h
.eh_frame_hdr:0000000000004EC5                 db 0C4h
.eh_frame_hdr:0000000000004EC6                 db 0FFh
.eh_frame_hdr:0000000000004EC7                 db 0FFh
.eh_frame_hdr:0000000000004EC8                 db 0B0h
.eh_frame_hdr:0000000000004EC9                 db    2
.eh_frame_hdr:0000000000004ECA                 db    0
.eh_frame_hdr:0000000000004ECB                 db    0
.eh_frame_hdr:0000000000004ECC                 db 0D0h
.eh_frame_hdr:0000000000004ECD                 db 0C4h
.eh_frame_hdr:0000000000004ECE                 db 0FFh
.eh_frame_hdr:0000000000004ECF                 db 0FFh
.eh_frame_hdr:0000000000004ED0                 db 0F4h
.eh_frame_hdr:0000000000004ED1                 db    2
.eh_frame_hdr:0000000000004ED2                 db    0
.eh_frame_hdr:0000000000004ED3                 db    0
.eh_frame_hdr:0000000000004ED4                 db  90h
.eh_frame_hdr:0000000000004ED5                 db 0C5h
.eh_frame_hdr:0000000000004ED6                 db 0FFh
.eh_frame_hdr:0000000000004ED7                 db 0FFh
.eh_frame_hdr:0000000000004ED8                 db  58h ; X
.eh_frame_hdr:0000000000004ED9                 db    2
.eh_frame_hdr:0000000000004EDA                 db    0
.eh_frame_hdr:0000000000004EDB                 db    0
.eh_frame_hdr:0000000000004EDC                 db 0A0h
.eh_frame_hdr:0000000000004EDD                 db 0C6h
.eh_frame_hdr:0000000000004EDE                 db 0FFh
.eh_frame_hdr:0000000000004EDF                 db 0FFh
.eh_frame_hdr:0000000000004EE0                 db 0C8h
.eh_frame_hdr:0000000000004EE1                 db    2
.eh_frame_hdr:0000000000004EE2                 db    0
.eh_frame_hdr:0000000000004EE3                 db    0
.eh_frame_hdr:0000000000004EE4                 db 0F0h
.eh_frame_hdr:0000000000004EE5                 db 0C9h
.eh_frame_hdr:0000000000004EE6                 db 0FFh
.eh_frame_hdr:0000000000004EE7                 db 0FFh
.eh_frame_hdr:0000000000004EE8                 db  18h
.eh_frame_hdr:0000000000004EE9                 db    3
.eh_frame_hdr:0000000000004EEA                 db    0
.eh_frame_hdr:0000000000004EEB                 db    0
.eh_frame_hdr:0000000000004EEC                 db    0
.eh_frame_hdr:0000000000004EED                 db 0CAh
.eh_frame_hdr:0000000000004EEE                 db 0FFh
.eh_frame_hdr:0000000000004EEF                 db 0FFh
.eh_frame_hdr:0000000000004EF0                 db  2Ch ; ,
.eh_frame_hdr:0000000000004EF1                 db    3
.eh_frame_hdr:0000000000004EF2                 db    0
.eh_frame_hdr:0000000000004EF3                 db    0
.eh_frame_hdr:0000000000004EF4                 db  10h
.eh_frame_hdr:0000000000004EF5                 db 0CAh
.eh_frame_hdr:0000000000004EF6                 db 0FFh
.eh_frame_hdr:0000000000004EF7                 db 0FFh
.eh_frame_hdr:0000000000004EF8                 db  40h ; @
.eh_frame_hdr:0000000000004EF9                 db    3
.eh_frame_hdr:0000000000004EFA                 db    0
.eh_frame_hdr:0000000000004EFB                 db    0
.eh_frame_hdr:0000000000004EFC                 db 0C0h
.eh_frame_hdr:0000000000004EFD                 db 0CAh
.eh_frame_hdr:0000000000004EFE                 db 0FFh
.eh_frame_hdr:0000000000004EFF                 db 0FFh
.eh_frame_hdr:0000000000004F00                 db  70h ; p
.eh_frame_hdr:0000000000004F01                 db    3
.eh_frame_hdr:0000000000004F02                 db    0
.eh_frame_hdr:0000000000004F03                 db    0
.eh_frame_hdr:0000000000004F04                 db  60h ; `
.eh_frame_hdr:0000000000004F05                 db 0CBh
.eh_frame_hdr:0000000000004F06                 db 0FFh
.eh_frame_hdr:0000000000004F07                 db 0FFh
.eh_frame_hdr:0000000000004F08                 db  90h
.eh_frame_hdr:0000000000004F09                 db    3
.eh_frame_hdr:0000000000004F0A                 db    0
.eh_frame_hdr:0000000000004F0B                 db    0
.eh_frame_hdr:0000000000004F0C                 db  50h ; P
.eh_frame_hdr:0000000000004F0D                 db 0CCh
.eh_frame_hdr:0000000000004F0E                 db 0FFh
.eh_frame_hdr:0000000000004F0F                 db 0FFh
.eh_frame_hdr:0000000000004F10                 db 0D4h
.eh_frame_hdr:0000000000004F11                 db    3
.eh_frame_hdr:0000000000004F12                 db    0
.eh_frame_hdr:0000000000004F13                 db    0
.eh_frame_hdr:0000000000004F14                 db  90h
.eh_frame_hdr:0000000000004F15                 db 0DEh
.eh_frame_hdr:0000000000004F16                 db 0FFh
.eh_frame_hdr:0000000000004F17                 db 0FFh
.eh_frame_hdr:0000000000004F18                 db  4Ch ; L
.eh_frame_hdr:0000000000004F19                 db    4
.eh_frame_hdr:0000000000004F1A                 db    0
.eh_frame_hdr:0000000000004F1B                 db    0
.eh_frame_hdr:0000000000004F1C                 db  40h ; @
.eh_frame_hdr:0000000000004F1D                 db 0E0h
.eh_frame_hdr:0000000000004F1E                 db 0FFh
.eh_frame_hdr:0000000000004F1F                 db 0FFh
.eh_frame_hdr:0000000000004F20                 db 0B8h
.eh_frame_hdr:0000000000004F21                 db    4
.eh_frame_hdr:0000000000004F22                 db    0
.eh_frame_hdr:0000000000004F23                 db    0
.eh_frame_hdr:0000000000004F24                 db  80h
.eh_frame_hdr:0000000000004F25                 db 0E0h
.eh_frame_hdr:0000000000004F26                 db 0FFh
.eh_frame_hdr:0000000000004F27                 db 0FFh
.eh_frame_hdr:0000000000004F28                 db 0E4h
.eh_frame_hdr:0000000000004F29                 db    4
.eh_frame_hdr:0000000000004F2A                 db    0
.eh_frame_hdr:0000000000004F2B                 db    0
.eh_frame_hdr:0000000000004F2C                 db 0A0h
.eh_frame_hdr:0000000000004F2D                 db 0E0h
.eh_frame_hdr:0000000000004F2E                 db 0FFh
.eh_frame_hdr:0000000000004F2F                 db 0FFh
.eh_frame_hdr:0000000000004F30                 db 0F8h
.eh_frame_hdr:0000000000004F31                 db    4
.eh_frame_hdr:0000000000004F32                 db    0
.eh_frame_hdr:0000000000004F33                 db    0
.eh_frame_hdr:0000000000004F34                 db 0C0h
.eh_frame_hdr:0000000000004F35                 db 0E0h
.eh_frame_hdr:0000000000004F36                 db 0FFh
.eh_frame_hdr:0000000000004F37                 db 0FFh
.eh_frame_hdr:0000000000004F38                 db  0Ch
.eh_frame_hdr:0000000000004F39                 db    5
.eh_frame_hdr:0000000000004F3A                 db    0
.eh_frame_hdr:0000000000004F3B                 db    0
.eh_frame_hdr:0000000000004F3C                 db    0
.eh_frame_hdr:0000000000004F3D                 db 0E1h
.eh_frame_hdr:0000000000004F3E                 db 0FFh
.eh_frame_hdr:0000000000004F3F                 db 0FFh
.eh_frame_hdr:0000000000004F40                 db  20h
.eh_frame_hdr:0000000000004F41                 db    5
.eh_frame_hdr:0000000000004F42                 db    0
.eh_frame_hdr:0000000000004F43                 db    0
.eh_frame_hdr:0000000000004F44                 db  20h
.eh_frame_hdr:0000000000004F45                 db 0E1h
.eh_frame_hdr:0000000000004F46                 db 0FFh
.eh_frame_hdr:0000000000004F47                 db 0FFh
.eh_frame_hdr:0000000000004F48                 db  34h ; 4
.eh_frame_hdr:0000000000004F49                 db    5
.eh_frame_hdr:0000000000004F4A                 db    0
.eh_frame_hdr:0000000000004F4B                 db    0
.eh_frame_hdr:0000000000004F4C                 db  50h ; P
.eh_frame_hdr:0000000000004F4D                 db 0E1h
.eh_frame_hdr:0000000000004F4E                 db 0FFh
.eh_frame_hdr:0000000000004F4F                 db 0FFh
.eh_frame_hdr:0000000000004F50                 db  48h ; H
.eh_frame_hdr:0000000000004F51                 db    5
.eh_frame_hdr:0000000000004F52                 db    0
.eh_frame_hdr:0000000000004F53                 db    0
.eh_frame_hdr:0000000000004F54                 db 0D0h
.eh_frame_hdr:0000000000004F55                 db 0E1h
.eh_frame_hdr:0000000000004F56                 db 0FFh
.eh_frame_hdr:0000000000004F57                 db 0FFh
.eh_frame_hdr:0000000000004F58                 db  9Ch
.eh_frame_hdr:0000000000004F59                 db    5
.eh_frame_hdr:0000000000004F5A                 db    0
.eh_frame_hdr:0000000000004F5B                 db    0
.eh_frame_hdr:0000000000004F5C                 db 0C0h
.eh_frame_hdr:0000000000004F5D                 db 0E2h
.eh_frame_hdr:0000000000004F5E                 db 0FFh
.eh_frame_hdr:0000000000004F5F                 db 0FFh
.eh_frame_hdr:0000000000004F60                 db    8
.eh_frame_hdr:0000000000004F61                 db    6
.eh_frame_hdr:0000000000004F62                 db    0
.eh_frame_hdr:0000000000004F63                 db    0
.eh_frame_hdr:0000000000004F64                 db 0D0h
.eh_frame_hdr:0000000000004F65                 db 0E2h
.eh_frame_hdr:0000000000004F66                 db 0FFh
.eh_frame_hdr:0000000000004F67                 db 0FFh
.eh_frame_hdr:0000000000004F68                 db  1Ch
.eh_frame_hdr:0000000000004F69                 db    6
.eh_frame_hdr:0000000000004F6A                 db    0
.eh_frame_hdr:0000000000004F6B                 db    0
.eh_frame_hdr:0000000000004F6C                 db  70h ; p
.eh_frame_hdr:0000000000004F6D                 db 0E3h
.eh_frame_hdr:0000000000004F6E                 db 0FFh
.eh_frame_hdr:0000000000004F6F                 db 0FFh
.eh_frame_hdr:0000000000004F70                 db  48h ; H
.eh_frame_hdr:0000000000004F71                 db    6
.eh_frame_hdr:0000000000004F72                 db    0
.eh_frame_hdr:0000000000004F73                 db    0
.eh_frame_hdr:0000000000004F74                 db  90h
.eh_frame_hdr:0000000000004F75                 db 0E3h
.eh_frame_hdr:0000000000004F76                 db 0FFh
.eh_frame_hdr:0000000000004F77                 db 0FFh
.eh_frame_hdr:0000000000004F78                 db  5Ch ; \
.eh_frame_hdr:0000000000004F79                 db    6
.eh_frame_hdr:0000000000004F7A                 db    0
.eh_frame_hdr:0000000000004F7B                 db    0
.eh_frame_hdr:0000000000004F7C                 db 0A0h
.eh_frame_hdr:0000000000004F7D                 db 0E3h
.eh_frame_hdr:0000000000004F7E                 db 0FFh
.eh_frame_hdr:0000000000004F7F                 db 0FFh
.eh_frame_hdr:0000000000004F80                 db  70h ; p
.eh_frame_hdr:0000000000004F81                 db    6
.eh_frame_hdr:0000000000004F82                 db    0
.eh_frame_hdr:0000000000004F83                 db    0
.eh_frame_hdr:0000000000004F84                 db 0C0h
.eh_frame_hdr:0000000000004F85                 db 0E3h
.eh_frame_hdr:0000000000004F86                 db 0FFh
.eh_frame_hdr:0000000000004F87                 db 0FFh
.eh_frame_hdr:0000000000004F88                 db  84h
.eh_frame_hdr:0000000000004F89                 db    6
.eh_frame_hdr:0000000000004F8A                 db    0
.eh_frame_hdr:0000000000004F8B                 db    0
.eh_frame_hdr:0000000000004F8C                 db 0E0h
.eh_frame_hdr:0000000000004F8D                 db 0E3h
.eh_frame_hdr:0000000000004F8E                 db 0FFh
.eh_frame_hdr:0000000000004F8F                 db 0FFh
.eh_frame_hdr:0000000000004F90                 db  98h
.eh_frame_hdr:0000000000004F91                 db    6
.eh_frame_hdr:0000000000004F92                 db    0
.eh_frame_hdr:0000000000004F93                 db    0
.eh_frame_hdr:0000000000004F94                 db  70h ; p
.eh_frame_hdr:0000000000004F95                 db 0E4h
.eh_frame_hdr:0000000000004F96                 db 0FFh
.eh_frame_hdr:0000000000004F97                 db 0FFh
.eh_frame_hdr:0000000000004F98                 db 0B4h
.eh_frame_hdr:0000000000004F99                 db    6
.eh_frame_hdr:0000000000004F9A                 db    0
.eh_frame_hdr:0000000000004F9B                 db    0
.eh_frame_hdr:0000000000004F9C                 db    0
.eh_frame_hdr:0000000000004F9D                 db 0E5h
.eh_frame_hdr:0000000000004F9E                 db 0FFh
.eh_frame_hdr:0000000000004F9F                 db 0FFh
.eh_frame_hdr:0000000000004FA0                 db 0D0h
.eh_frame_hdr:0000000000004FA1                 db    6
.eh_frame_hdr:0000000000004FA2                 db    0
.eh_frame_hdr:0000000000004FA3                 db    0
.eh_frame_hdr:0000000000004FA4                 db  10h
.eh_frame_hdr:0000000000004FA5                 db 0E5h
.eh_frame_hdr:0000000000004FA6                 db 0FFh
.eh_frame_hdr:0000000000004FA7                 db 0FFh
.eh_frame_hdr:0000000000004FA8                 db 0E4h
.eh_frame_hdr:0000000000004FA9                 db    6
.eh_frame_hdr:0000000000004FAA                 db    0
.eh_frame_hdr:0000000000004FAB                 db    0
.eh_frame_hdr:0000000000004FAC                 db  20h
.eh_frame_hdr:0000000000004FAD                 db 0E5h
.eh_frame_hdr:0000000000004FAE                 db 0FFh
.eh_frame_hdr:0000000000004FAF                 db 0FFh
.eh_frame_hdr:0000000000004FB0                 db 0F8h
.eh_frame_hdr:0000000000004FB1                 db    6
.eh_frame_hdr:0000000000004FB2                 db    0
.eh_frame_hdr:0000000000004FB3                 db    0
.eh_frame_hdr:0000000000004FB4                 db 0C0h
.eh_frame_hdr:0000000000004FB5                 db 0E5h
.eh_frame_hdr:0000000000004FB6                 db 0FFh
.eh_frame_hdr:0000000000004FB7                 db 0FFh
.eh_frame_hdr:0000000000004FB8                 db  14h
.eh_frame_hdr:0000000000004FB9                 db    7
.eh_frame_hdr:0000000000004FBA                 db    0
.eh_frame_hdr:0000000000004FBB                 db    0
.eh_frame_hdr:0000000000004FBC                 db 0D0h
.eh_frame_hdr:0000000000004FBD                 db 0E5h
.eh_frame_hdr:0000000000004FBE                 db 0FFh
.eh_frame_hdr:0000000000004FBF                 db 0FFh
.eh_frame_hdr:0000000000004FC0                 db  28h ; (
.eh_frame_hdr:0000000000004FC1                 db    7
.eh_frame_hdr:0000000000004FC2                 db    0
.eh_frame_hdr:0000000000004FC3                 db    0
.eh_frame_hdr:0000000000004FC4                 db 0F0h
.eh_frame_hdr:0000000000004FC5                 db 0E5h
.eh_frame_hdr:0000000000004FC6                 db 0FFh
.eh_frame_hdr:0000000000004FC7                 db 0FFh
.eh_frame_hdr:0000000000004FC8                 db  3Ch ; <
.eh_frame_hdr:0000000000004FC9                 db    7
.eh_frame_hdr:0000000000004FCA                 db    0
.eh_frame_hdr:0000000000004FCB                 db    0
.eh_frame_hdr:0000000000004FCC                 db    0
.eh_frame_hdr:0000000000004FCD                 db 0E6h
.eh_frame_hdr:0000000000004FCE                 db 0FFh
.eh_frame_hdr:0000000000004FCF                 db 0FFh
.eh_frame_hdr:0000000000004FD0                 db  50h ; P
.eh_frame_hdr:0000000000004FD1                 db    7
.eh_frame_hdr:0000000000004FD2                 db    0
.eh_frame_hdr:0000000000004FD3                 db    0
.eh_frame_hdr:0000000000004FD4                 db  90h
.eh_frame_hdr:0000000000004FD5                 db 0E6h
.eh_frame_hdr:0000000000004FD6                 db 0FFh
.eh_frame_hdr:0000000000004FD7                 db 0FFh
.eh_frame_hdr:0000000000004FD8                 db  6Ch ; l
.eh_frame_hdr:0000000000004FD9                 db    7
.eh_frame_hdr:0000000000004FDA                 db    0
.eh_frame_hdr:0000000000004FDB                 db    0
.eh_frame_hdr:0000000000004FDC                 db  30h ; 0
.eh_frame_hdr:0000000000004FDD                 db 0E7h
.eh_frame_hdr:0000000000004FDE                 db 0FFh
.eh_frame_hdr:0000000000004FDF                 db 0FFh
.eh_frame_hdr:0000000000004FE0                 db  88h
.eh_frame_hdr:0000000000004FE1                 db    7
.eh_frame_hdr:0000000000004FE2                 db    0
.eh_frame_hdr:0000000000004FE3                 db    0
.eh_frame_hdr:0000000000004FE4                 db  40h ; @
.eh_frame_hdr:0000000000004FE5                 db 0E7h
.eh_frame_hdr:0000000000004FE6                 db 0FFh
.eh_frame_hdr:0000000000004FE7                 db 0FFh
.eh_frame_hdr:0000000000004FE8                 db  9Ch
.eh_frame_hdr:0000000000004FE9                 db    7
.eh_frame_hdr:0000000000004FEA                 db    0
.eh_frame_hdr:0000000000004FEB                 db    0
.eh_frame_hdr:0000000000004FEC                 db  60h ; `
.eh_frame_hdr:0000000000004FED                 db 0E7h
.eh_frame_hdr:0000000000004FEE                 db 0FFh
.eh_frame_hdr:0000000000004FEF                 db 0FFh
.eh_frame_hdr:0000000000004FF0                 db 0B0h
.eh_frame_hdr:0000000000004FF1                 db    7
.eh_frame_hdr:0000000000004FF2                 db    0
.eh_frame_hdr:0000000000004FF3                 db    0
.eh_frame_hdr:0000000000004FF4                 db  80h
.eh_frame_hdr:0000000000004FF5                 db 0E7h
.eh_frame_hdr:0000000000004FF6                 db 0FFh
.eh_frame_hdr:0000000000004FF7                 db 0FFh
.eh_frame_hdr:0000000000004FF8                 db 0C4h
.eh_frame_hdr:0000000000004FF9                 db    7
.eh_frame_hdr:0000000000004FFA                 db    0
.eh_frame_hdr:0000000000004FFB                 db    0
.eh_frame_hdr:0000000000004FFC                 db  90h
.eh_frame_hdr:0000000000004FFD                 db 0E7h
.eh_frame_hdr:0000000000004FFE                 db 0FFh
.eh_frame_hdr:0000000000004FFF                 db 0FFh
.eh_frame_hdr:0000000000005000                 db 0D8h
.eh_frame_hdr:0000000000005001                 db    7
.eh_frame_hdr:0000000000005002                 db    0
.eh_frame_hdr:0000000000005003                 db    0
.eh_frame_hdr:0000000000005004                 db 0B0h
.eh_frame_hdr:0000000000005005                 db 0E7h
.eh_frame_hdr:0000000000005006                 db 0FFh
.eh_frame_hdr:0000000000005007                 db 0FFh
.eh_frame_hdr:0000000000005008                 db 0ECh
.eh_frame_hdr:0000000000005009                 db    7
.eh_frame_hdr:000000000000500A                 db    0
.eh_frame_hdr:000000000000500B                 db    0
.eh_frame_hdr:000000000000500C                 db 0D0h
.eh_frame_hdr:000000000000500D                 db 0E7h
.eh_frame_hdr:000000000000500E                 db 0FFh
.eh_frame_hdr:000000000000500F                 db 0FFh
.eh_frame_hdr:0000000000005010                 db    0
.eh_frame_hdr:0000000000005011                 db    8
.eh_frame_hdr:0000000000005012                 db    0
.eh_frame_hdr:0000000000005013                 db    0
.eh_frame_hdr:0000000000005014                 db 0F0h
.eh_frame_hdr:0000000000005015                 db 0E7h
.eh_frame_hdr:0000000000005016                 db 0FFh
.eh_frame_hdr:0000000000005017                 db 0FFh
.eh_frame_hdr:0000000000005018                 db  18h
.eh_frame_hdr:0000000000005019                 db    8
.eh_frame_hdr:000000000000501A                 db    0
.eh_frame_hdr:000000000000501B                 db    0
.eh_frame_hdr:000000000000501C                 db  10h
.eh_frame_hdr:000000000000501D                 db 0ECh
.eh_frame_hdr:000000000000501E                 db 0FFh
.eh_frame_hdr:000000000000501F                 db 0FFh
.eh_frame_hdr:0000000000005020                 db  2Ch ; ,
.eh_frame_hdr:0000000000005021                 db    9
.eh_frame_hdr:0000000000005022                 db    0
.eh_frame_hdr:0000000000005023                 db    0
.eh_frame_hdr:0000000000005024                 db  30h ; 0
.eh_frame_hdr:0000000000005025                 db 0ECh
.eh_frame_hdr:0000000000005026                 db 0FFh
.eh_frame_hdr:0000000000005027                 db 0FFh
.eh_frame_hdr:0000000000005028                 db  40h ; @
.eh_frame_hdr:0000000000005029                 db    9
.eh_frame_hdr:000000000000502A                 db    0
.eh_frame_hdr:000000000000502B                 db    0
.eh_frame_hdr:000000000000502C                 db 0B0h
.eh_frame_hdr:000000000000502D                 db 0ECh
.eh_frame_hdr:000000000000502E                 db 0FFh
.eh_frame_hdr:000000000000502F                 db 0FFh
.eh_frame_hdr:0000000000005030                 db  5Ch ; \
.eh_frame_hdr:0000000000005031                 db    9
.eh_frame_hdr:0000000000005032                 db    0
.eh_frame_hdr:0000000000005033                 db    0
.eh_frame_hdr:0000000000005034                 db  90h
.eh_frame_hdr:0000000000005035                 db 0EDh
.eh_frame_hdr:0000000000005036                 db 0FFh
.eh_frame_hdr:0000000000005037                 db 0FFh
.eh_frame_hdr:0000000000005038                 db  88h
.eh_frame_hdr:0000000000005039                 db    9
.eh_frame_hdr:000000000000503A                 db    0
.eh_frame_hdr:000000000000503B                 db    0
.eh_frame_hdr:000000000000503C                 db  10h
.eh_frame_hdr:000000000000503D                 db 0EEh
.eh_frame_hdr:000000000000503E                 db 0FFh
.eh_frame_hdr:000000000000503F                 db 0FFh
.eh_frame_hdr:0000000000005040                 db 0A8h
.eh_frame_hdr:0000000000005041                 db    9
.eh_frame_hdr:0000000000005042                 db    0
.eh_frame_hdr:0000000000005043                 db    0
.eh_frame_hdr:0000000000005044                 db  30h ; 0
.eh_frame_hdr:0000000000005045                 db 0EEh
.eh_frame_hdr:0000000000005046                 db 0FFh
.eh_frame_hdr:0000000000005047                 db 0FFh
.eh_frame_hdr:0000000000005048                 db 0C4h
.eh_frame_hdr:0000000000005049                 db    9
.eh_frame_hdr:000000000000504A                 db    0
.eh_frame_hdr:000000000000504B                 db    0
.eh_frame_hdr:000000000000504C                 db  60h ; `
.eh_frame_hdr:000000000000504D                 db 0EEh
.eh_frame_hdr:000000000000504E                 db 0FFh
.eh_frame_hdr:000000000000504F                 db 0FFh
.eh_frame_hdr:0000000000005050                 db 0D8h
.eh_frame_hdr:0000000000005051                 db    9
.eh_frame_hdr:0000000000005052                 db    0
.eh_frame_hdr:0000000000005053                 db    0
.eh_frame_hdr:0000000000005054                 db  70h ; p
.eh_frame_hdr:0000000000005055                 db 0EEh
.eh_frame_hdr:0000000000005056                 db 0FFh
.eh_frame_hdr:0000000000005057                 db 0FFh
.eh_frame_hdr:0000000000005058                 db 0ECh
.eh_frame_hdr:0000000000005059                 db    9
.eh_frame_hdr:000000000000505A                 db    0
.eh_frame_hdr:000000000000505B                 db    0
.eh_frame_hdr:000000000000505C                 db 0B0h
.eh_frame_hdr:000000000000505D                 db 0EEh
.eh_frame_hdr:000000000000505E                 db 0FFh
.eh_frame_hdr:000000000000505F                 db 0FFh
.eh_frame_hdr:0000000000005060                 db  10h
.eh_frame_hdr:0000000000005061                 db  0Ah
.eh_frame_hdr:0000000000005062                 db    0
.eh_frame_hdr:0000000000005063                 db    0
.eh_frame_hdr:0000000000005064                 db 0E0h
.eh_frame_hdr:0000000000005065                 db 0EEh
.eh_frame_hdr:0000000000005066                 db 0FFh
.eh_frame_hdr:0000000000005067                 db 0FFh
.eh_frame_hdr:0000000000005068                 db  24h ; $
.eh_frame_hdr:0000000000005069                 db  0Ah
.eh_frame_hdr:000000000000506A                 db    0
.eh_frame_hdr:000000000000506B                 db    0
.eh_frame_hdr:000000000000506C                 db  70h ; p
.eh_frame_hdr:000000000000506D                 db 0EFh
.eh_frame_hdr:000000000000506E                 db 0FFh
.eh_frame_hdr:000000000000506F                 db 0FFh
.eh_frame_hdr:0000000000005070                 db  3Ch ; <
.eh_frame_hdr:0000000000005071                 db  0Ah
.eh_frame_hdr:0000000000005072                 db    0
.eh_frame_hdr:0000000000005073                 db    0
.eh_frame_hdr:0000000000005074                 db 0C0h
.eh_frame_hdr:0000000000005075                 db 0EFh
.eh_frame_hdr:0000000000005076                 db 0FFh
.eh_frame_hdr:0000000000005077                 db 0FFh
.eh_frame_hdr:0000000000005078                 db  54h ; T
.eh_frame_hdr:0000000000005079                 db  0Ah
.eh_frame_hdr:000000000000507A                 db    0
.eh_frame_hdr:000000000000507B                 db    0
.eh_frame_hdr:000000000000507C                 db 0E0h
.eh_frame_hdr:000000000000507D                 db 0EFh
.eh_frame_hdr:000000000000507E                 db 0FFh
.eh_frame_hdr:000000000000507F                 db 0FFh
.eh_frame_hdr:0000000000005080                 db  70h ; p
.eh_frame_hdr:0000000000005081                 db  0Ah
.eh_frame_hdr:0000000000005082                 db    0
.eh_frame_hdr:0000000000005083                 db    0
.eh_frame_hdr:0000000000005084                 db  10h
.eh_frame_hdr:0000000000005085                 db 0F0h
.eh_frame_hdr:0000000000005086                 db 0FFh
.eh_frame_hdr:0000000000005087                 db 0FFh
.eh_frame_hdr:0000000000005088                 db  8Ch
.eh_frame_hdr:0000000000005089                 db  0Ah
.eh_frame_hdr:000000000000508A                 db    0
.eh_frame_hdr:000000000000508B                 db    0
.eh_frame_hdr:000000000000508C                 db  40h ; @
.eh_frame_hdr:000000000000508D                 db 0F0h
.eh_frame_hdr:000000000000508E                 db 0FFh
.eh_frame_hdr:000000000000508F                 db 0FFh
.eh_frame_hdr:0000000000005090                 db 0B4h
.eh_frame_hdr:0000000000005091                 db  0Ah
.eh_frame_hdr:0000000000005092                 db    0
.eh_frame_hdr:0000000000005093                 db    0
.eh_frame_hdr:0000000000005094                 db  60h ; `
.eh_frame_hdr:0000000000005095                 db 0F0h
.eh_frame_hdr:0000000000005096                 db 0FFh
.eh_frame_hdr:0000000000005097                 db 0FFh
.eh_frame_hdr:0000000000005098                 db 0D0h
.eh_frame_hdr:0000000000005099                 db  0Ah
.eh_frame_hdr:000000000000509A                 db    0
.eh_frame_hdr:000000000000509B                 db    0
.eh_frame_hdr:000000000000509C                 db 0A0h
.eh_frame_hdr:000000000000509D                 db 0F0h
.eh_frame_hdr:000000000000509E                 db 0FFh
.eh_frame_hdr:000000000000509F                 db 0FFh
.eh_frame_hdr:00000000000050A0                 db 0E8h
.eh_frame_hdr:00000000000050A1                 db  0Ah
.eh_frame_hdr:00000000000050A2                 db    0
.eh_frame_hdr:00000000000050A3                 db    0
.eh_frame_hdr:00000000000050A4                 db  30h ; 0
.eh_frame_hdr:00000000000050A5                 db 0F1h
.eh_frame_hdr:00000000000050A6                 db 0FFh
.eh_frame_hdr:00000000000050A7                 db 0FFh
.eh_frame_hdr:00000000000050A8                 db  28h ; (
.eh_frame_hdr:00000000000050A9                 db  0Bh
.eh_frame_hdr:00000000000050AA                 db    0
.eh_frame_hdr:00000000000050AB                 db    0
.eh_frame_hdr:00000000000050AC                 db 0B0h
.eh_frame_hdr:00000000000050AD                 db 0F1h
.eh_frame_hdr:00000000000050AE                 db 0FFh
.eh_frame_hdr:00000000000050AF                 db 0FFh
.eh_frame_hdr:00000000000050B0                 db  78h ; x
.eh_frame_hdr:00000000000050B1                 db  0Bh
.eh_frame_hdr:00000000000050B2                 db    0
.eh_frame_hdr:00000000000050B3                 db    0
.eh_frame_hdr:00000000000050B4                 db  10h
.eh_frame_hdr:00000000000050B5                 db 0F2h
.eh_frame_hdr:00000000000050B6                 db 0FFh
.eh_frame_hdr:00000000000050B7                 db 0FFh
.eh_frame_hdr:00000000000050B8                 db  98h
.eh_frame_hdr:00000000000050B9                 db  0Bh
.eh_frame_hdr:00000000000050BA                 db    0
.eh_frame_hdr:00000000000050BB                 db    0
.eh_frame_hdr:00000000000050BC                 db  50h ; P
.eh_frame_hdr:00000000000050BD                 db 0F2h
.eh_frame_hdr:00000000000050BE                 db 0FFh
.eh_frame_hdr:00000000000050BF                 db 0FFh
.eh_frame_hdr:00000000000050C0                 db 0B8h
.eh_frame_hdr:00000000000050C1                 db  0Bh
.eh_frame_hdr:00000000000050C2                 db    0
.eh_frame_hdr:00000000000050C3                 db    0
.eh_frame_hdr:00000000000050C4                 db 0D0h
.eh_frame_hdr:00000000000050C5                 db 0F2h
.eh_frame_hdr:00000000000050C6                 db 0FFh
.eh_frame_hdr:00000000000050C7                 db 0FFh
.eh_frame_hdr:00000000000050C8                 db 0F0h
.eh_frame_hdr:00000000000050C9                 db  0Bh
.eh_frame_hdr:00000000000050CA                 db    0
.eh_frame_hdr:00000000000050CB                 db    0
.eh_frame_hdr:00000000000050CC                 db  10h
.eh_frame_hdr:00000000000050CD                 db 0F3h
.eh_frame_hdr:00000000000050CE                 db 0FFh
.eh_frame_hdr:00000000000050CF                 db 0FFh
.eh_frame_hdr:00000000000050D0                 db  10h
.eh_frame_hdr:00000000000050D1                 db  0Ch
.eh_frame_hdr:00000000000050D2                 db    0
.eh_frame_hdr:00000000000050D3                 db    0
.eh_frame_hdr:00000000000050D4                 db  70h ; p
.eh_frame_hdr:00000000000050D5                 db 0F3h
.eh_frame_hdr:00000000000050D6                 db 0FFh
.eh_frame_hdr:00000000000050D7                 db 0FFh
.eh_frame_hdr:00000000000050D8                 db  40h ; @
.eh_frame_hdr:00000000000050D9                 db  0Ch
.eh_frame_hdr:00000000000050DA                 db    0
.eh_frame_hdr:00000000000050DB                 db    0
.eh_frame_hdr:00000000000050DC                 db 0E0h
.eh_frame_hdr:00000000000050DD                 db 0F3h
.eh_frame_hdr:00000000000050DE                 db 0FFh
.eh_frame_hdr:00000000000050DF                 db 0FFh
.eh_frame_hdr:00000000000050E0                 db  88h
.eh_frame_hdr:00000000000050E1                 db  0Ch
.eh_frame_hdr:00000000000050E2                 db    0
.eh_frame_hdr:00000000000050E3                 db    0
.eh_frame_hdr:00000000000050E4                 db 0F0h
.eh_frame_hdr:00000000000050E5                 db 0F3h
.eh_frame_hdr:00000000000050E6                 db 0FFh
.eh_frame_hdr:00000000000050E7                 db 0FFh
.eh_frame_hdr:00000000000050E8                 db 0A0h
.eh_frame_hdr:00000000000050E9                 db  0Ch
.eh_frame_hdr:00000000000050EA                 db    0
.eh_frame_hdr:00000000000050EB                 db    0
.eh_frame_hdr:00000000000050EB _eh_frame_hdr   ends
.eh_frame_hdr:00000000000050EB
LOAD:00000000000050EC ; ===========================================================================
LOAD:00000000000050EC
LOAD:00000000000050EC ; Segment type: Pure code
LOAD:00000000000050EC ; Segment permissions: Read/Execute
LOAD:00000000000050EC LOAD            segment byte public 'CODE' use64
LOAD:00000000000050EC                 assume cs:LOAD
LOAD:00000000000050EC                 ;org 50ECh
LOAD:00000000000050EC                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000050EC                 align 10h
LOAD:00000000000050EC LOAD            ends
LOAD:00000000000050EC
.eh_frame:00000000000050F0 ; ===========================================================================
.eh_frame:00000000000050F0
.eh_frame:00000000000050F0 ; Segment type: Pure data
.eh_frame:00000000000050F0 ; Segment permissions: Read
.eh_frame:00000000000050F0 _eh_frame       segment qword public 'CONST' use64
.eh_frame:00000000000050F0                 assume cs:_eh_frame
.eh_frame:00000000000050F0                 ;org 50F0h
.eh_frame:00000000000050F0                 db  14h
.eh_frame:00000000000050F1                 db    0
.eh_frame:00000000000050F2                 db    0
.eh_frame:00000000000050F3                 db    0
.eh_frame:00000000000050F4                 db    0
.eh_frame:00000000000050F5                 db    0
.eh_frame:00000000000050F6                 db    0
.eh_frame:00000000000050F7                 db    0
.eh_frame:00000000000050F8                 db    1
.eh_frame:00000000000050F9                 db  7Ah ; z
.eh_frame:00000000000050FA                 db  52h ; R
.eh_frame:00000000000050FB                 db    0
.eh_frame:00000000000050FC                 db    1
.eh_frame:00000000000050FD                 db  78h ; x
.eh_frame:00000000000050FE                 db  10h
.eh_frame:00000000000050FF                 db    1
.eh_frame:0000000000005100                 db  1Bh
.eh_frame:0000000000005101                 db  0Ch
.eh_frame:0000000000005102                 db    7
.eh_frame:0000000000005103                 db    8
.eh_frame:0000000000005104                 db  90h
.eh_frame:0000000000005105                 db    1
.eh_frame:0000000000005106                 db    7
.eh_frame:0000000000005107                 db  10h
.eh_frame:0000000000005108                 db  14h
.eh_frame:0000000000005109                 db    0
.eh_frame:000000000000510A                 db    0
.eh_frame:000000000000510B                 db    0
.eh_frame:000000000000510C                 db  1Ch
.eh_frame:000000000000510D                 db    0
.eh_frame:000000000000510E                 db    0
.eh_frame:000000000000510F                 db    0
.eh_frame:0000000000005110                 db  30h ; 0
.eh_frame:0000000000005111                 db 0C3h
.eh_frame:0000000000005112                 db 0FFh
.eh_frame:0000000000005113                 db 0FFh
.eh_frame:0000000000005114                 db  2Bh ; +
.eh_frame:0000000000005115                 db    0
.eh_frame:0000000000005116                 db    0
.eh_frame:0000000000005117                 db    0
.eh_frame:0000000000005118                 db    0
.eh_frame:0000000000005119                 db    0
.eh_frame:000000000000511A                 db    0
.eh_frame:000000000000511B                 db    0
.eh_frame:000000000000511C                 db    0
.eh_frame:000000000000511D                 db    0
.eh_frame:000000000000511E                 db    0
.eh_frame:000000000000511F                 db    0
.eh_frame:0000000000005120                 db  14h
.eh_frame:0000000000005121                 db    0
.eh_frame:0000000000005122                 db    0
.eh_frame:0000000000005123                 db    0
.eh_frame:0000000000005124                 db    0
.eh_frame:0000000000005125                 db    0
.eh_frame:0000000000005126                 db    0
.eh_frame:0000000000005127                 db    0
.eh_frame:0000000000005128                 db    1
.eh_frame:0000000000005129                 db  7Ah ; z
.eh_frame:000000000000512A                 db  52h ; R
.eh_frame:000000000000512B                 db    0
.eh_frame:000000000000512C                 db    1
.eh_frame:000000000000512D                 db  78h ; x
.eh_frame:000000000000512E                 db  10h
.eh_frame:000000000000512F                 db    1
.eh_frame:0000000000005130                 db  1Bh
.eh_frame:0000000000005131                 db  0Ch
.eh_frame:0000000000005132                 db    7
.eh_frame:0000000000005133                 db    8
.eh_frame:0000000000005134                 db  90h
.eh_frame:0000000000005135                 db    1
.eh_frame:0000000000005136                 db    0
.eh_frame:0000000000005137                 db    0
.eh_frame:0000000000005138                 db  24h ; $
.eh_frame:0000000000005139                 db    0
.eh_frame:000000000000513A                 db    0
.eh_frame:000000000000513B                 db    0
.eh_frame:000000000000513C                 db  1Ch
.eh_frame:000000000000513D                 db    0
.eh_frame:000000000000513E                 db    0
.eh_frame:000000000000513F                 db    0
.eh_frame:0000000000005140                 db 0B0h
.eh_frame:0000000000005141                 db 0BFh
.eh_frame:0000000000005142                 db 0FFh
.eh_frame:0000000000005143                 db 0FFh
.eh_frame:0000000000005144                 db  80h
.eh_frame:0000000000005145                 db    2
.eh_frame:0000000000005146                 db    0
.eh_frame:0000000000005147                 db    0
.eh_frame:0000000000005148                 db    0
.eh_frame:0000000000005149                 db  0Eh
.eh_frame:000000000000514A                 db  10h
.eh_frame:000000000000514B                 db  46h ; F
.eh_frame:000000000000514C                 db  0Eh
.eh_frame:000000000000514D                 db  18h
.eh_frame:000000000000514E                 db  4Ah ; J
.eh_frame:000000000000514F                 db  0Fh
.eh_frame:0000000000005150                 db  0Bh
.eh_frame:0000000000005151                 db  77h ; w
.eh_frame:0000000000005152                 db    8
.eh_frame:0000000000005153                 db  80h
.eh_frame:0000000000005154                 db    0
.eh_frame:0000000000005155                 db  3Fh ; ?
.eh_frame:0000000000005156                 db  1Ah
.eh_frame:0000000000005157                 db  3Bh ; ;
.eh_frame:0000000000005158                 db  2Ah ; *
.eh_frame:0000000000005159                 db  33h ; 3
.eh_frame:000000000000515A                 db  24h ; $
.eh_frame:000000000000515B                 db  22h ; "
.eh_frame:000000000000515C                 db    0
.eh_frame:000000000000515D                 db    0
.eh_frame:000000000000515E                 db    0
.eh_frame:000000000000515F                 db    0
.eh_frame:0000000000005160                 db  14h
.eh_frame:0000000000005161                 db    0
.eh_frame:0000000000005162                 db    0
.eh_frame:0000000000005163                 db    0
.eh_frame:0000000000005164                 db  44h ; D
.eh_frame:0000000000005165                 db    0
.eh_frame:0000000000005166                 db    0
.eh_frame:0000000000005167                 db    0
.eh_frame:0000000000005168                 db    8
.eh_frame:0000000000005169                 db 0C2h
.eh_frame:000000000000516A                 db 0FFh
.eh_frame:000000000000516B                 db 0FFh
.eh_frame:000000000000516C                 db    8
.eh_frame:000000000000516D                 db    0
.eh_frame:000000000000516E                 db    0
.eh_frame:000000000000516F                 db    0
.eh_frame:0000000000005170                 db    0
.eh_frame:0000000000005171                 db    0
.eh_frame:0000000000005172                 db    0
.eh_frame:0000000000005173                 db    0
.eh_frame:0000000000005174                 db    0
.eh_frame:0000000000005175                 db    0
.eh_frame:0000000000005176                 db    0
.eh_frame:0000000000005177                 db    0
.eh_frame:0000000000005178                 db  28h ; (
.eh_frame:0000000000005179                 db    0
.eh_frame:000000000000517A                 db    0
.eh_frame:000000000000517B                 db    0
.eh_frame:000000000000517C                 db  5Ch ; \
.eh_frame:000000000000517D                 db    0
.eh_frame:000000000000517E                 db    0
.eh_frame:000000000000517F                 db    0
.eh_frame:0000000000005180                 db 0D0h
.eh_frame:0000000000005181                 db 0C3h
.eh_frame:0000000000005182                 db 0FFh
.eh_frame:0000000000005183                 db 0FFh
.eh_frame:0000000000005184                 db  45h ; E
.eh_frame:0000000000005185                 db    3
.eh_frame:0000000000005186                 db    0
.eh_frame:0000000000005187                 db    0
.eh_frame:0000000000005188                 db    0
.eh_frame:0000000000005189                 db  42h ; B
.eh_frame:000000000000518A                 db  0Eh
.eh_frame:000000000000518B                 db  10h
.eh_frame:000000000000518C                 db  8Dh
.eh_frame:000000000000518D                 db    2
.eh_frame:000000000000518E                 db  42h ; B
.eh_frame:000000000000518F                 db  0Eh
.eh_frame:0000000000005190                 db  18h
.eh_frame:0000000000005191                 db  8Ch
.eh_frame:0000000000005192                 db    3
.eh_frame:0000000000005193                 db  48h ; H
.eh_frame:0000000000005194                 db  0Eh
.eh_frame:0000000000005195                 db  20h
.eh_frame:0000000000005196                 db  86h
.eh_frame:0000000000005197                 db    4
.eh_frame:0000000000005198                 db  41h ; A
.eh_frame:0000000000005199                 db  0Eh
.eh_frame:000000000000519A                 db  28h ; (
.eh_frame:000000000000519B                 db  83h
.eh_frame:000000000000519C                 db    5
.eh_frame:000000000000519D                 db  50h ; P
.eh_frame:000000000000519E                 db  0Eh
.eh_frame:000000000000519F                 db 0B0h
.eh_frame:00000000000051A0                 db    1
.eh_frame:00000000000051A1                 db    0
.eh_frame:00000000000051A2                 db    0
.eh_frame:00000000000051A3                 db    0
.eh_frame:00000000000051A4                 db  20h
.eh_frame:00000000000051A5                 db    0
.eh_frame:00000000000051A6                 db    0
.eh_frame:00000000000051A7                 db    0
.eh_frame:00000000000051A8                 db  88h
.eh_frame:00000000000051A9                 db    0
.eh_frame:00000000000051AA                 db    0
.eh_frame:00000000000051AB                 db    0
.eh_frame:00000000000051AC                 db 0D4h
.eh_frame:00000000000051AD                 db 0C1h
.eh_frame:00000000000051AE                 db 0FFh
.eh_frame:00000000000051AF                 db 0FFh
.eh_frame:00000000000051B0                 db 0B2h
.eh_frame:00000000000051B1                 db    0
.eh_frame:00000000000051B2                 db    0
.eh_frame:00000000000051B3                 db    0
.eh_frame:00000000000051B4                 db    0
.eh_frame:00000000000051B5                 db  49h ; I
.eh_frame:00000000000051B6                 db  0Eh
.eh_frame:00000000000051B7                 db  10h
.eh_frame:00000000000051B8                 db  83h
.eh_frame:00000000000051B9                 db    2
.eh_frame:00000000000051BA                 db    2
.eh_frame:00000000000051BB                 db  74h ; t
.eh_frame:00000000000051BC                 db  0Ah
.eh_frame:00000000000051BD                 db  0Eh
.eh_frame:00000000000051BE                 db    8
.eh_frame:00000000000051BF                 db  41h ; A
.eh_frame:00000000000051C0                 db  0Bh
.eh_frame:00000000000051C1                 db    0
.eh_frame:00000000000051C2                 db    0
.eh_frame:00000000000051C3                 db    0
.eh_frame:00000000000051C4                 db    0
.eh_frame:00000000000051C5                 db    0
.eh_frame:00000000000051C6                 db    0
.eh_frame:00000000000051C7                 db    0
.eh_frame:00000000000051C8                 db  10h
.eh_frame:00000000000051C9                 db    0
.eh_frame:00000000000051CA                 db    0
.eh_frame:00000000000051CB                 db    0
.eh_frame:00000000000051CC                 db 0ACh
.eh_frame:00000000000051CD                 db    0
.eh_frame:00000000000051CE                 db    0
.eh_frame:00000000000051CF                 db    0
.eh_frame:00000000000051D0                 db 0D0h
.eh_frame:00000000000051D1                 db 0C6h
.eh_frame:00000000000051D2                 db 0FFh
.eh_frame:00000000000051D3                 db 0FFh
.eh_frame:00000000000051D4                 db    8
.eh_frame:00000000000051D5                 db    0
.eh_frame:00000000000051D6                 db    0
.eh_frame:00000000000051D7                 db    0
.eh_frame:00000000000051D8                 db    0
.eh_frame:00000000000051D9                 db    0
.eh_frame:00000000000051DA                 db    0
.eh_frame:00000000000051DB                 db    0
.eh_frame:00000000000051DC                 db  10h
.eh_frame:00000000000051DD                 db    0
.eh_frame:00000000000051DE                 db    0
.eh_frame:00000000000051DF                 db    0
.eh_frame:00000000000051E0                 db 0C0h
.eh_frame:00000000000051E1                 db    0
.eh_frame:00000000000051E2                 db    0
.eh_frame:00000000000051E3                 db    0
.eh_frame:00000000000051E4                 db 0CCh
.eh_frame:00000000000051E5                 db 0C6h
.eh_frame:00000000000051E6                 db 0FFh
.eh_frame:00000000000051E7                 db 0FFh
.eh_frame:00000000000051E8                 db    8
.eh_frame:00000000000051E9                 db    0
.eh_frame:00000000000051EA                 db    0
.eh_frame:00000000000051EB                 db    0
.eh_frame:00000000000051EC                 db    0
.eh_frame:00000000000051ED                 db    0
.eh_frame:00000000000051EE                 db    0
.eh_frame:00000000000051EF                 db    0
.eh_frame:00000000000051F0                 db  2Ch ; ,
.eh_frame:00000000000051F1                 db    0
.eh_frame:00000000000051F2                 db    0
.eh_frame:00000000000051F3                 db    0
.eh_frame:00000000000051F4                 db 0D4h
.eh_frame:00000000000051F5                 db    0
.eh_frame:00000000000051F6                 db    0
.eh_frame:00000000000051F7                 db    0
.eh_frame:00000000000051F8                 db 0C8h
.eh_frame:00000000000051F9                 db 0C6h
.eh_frame:00000000000051FA                 db 0FFh
.eh_frame:00000000000051FB                 db 0FFh
.eh_frame:00000000000051FC                 db 0A4h
.eh_frame:00000000000051FD                 db    0
.eh_frame:00000000000051FE                 db    0
.eh_frame:00000000000051FF                 db    0
.eh_frame:0000000000005200                 db    0
.eh_frame:0000000000005201                 db  41h ; A
.eh_frame:0000000000005202                 db  0Eh
.eh_frame:0000000000005203                 db  10h
.eh_frame:0000000000005204                 db  86h
.eh_frame:0000000000005205                 db    2
.eh_frame:0000000000005206                 db  41h ; A
.eh_frame:0000000000005207                 db  0Eh
.eh_frame:0000000000005208                 db  18h
.eh_frame:0000000000005209                 db  83h
.eh_frame:000000000000520A                 db    3
.eh_frame:000000000000520B                 db  44h ; D
.eh_frame:000000000000520C                 db  0Eh
.eh_frame:000000000000520D                 db  20h
.eh_frame:000000000000520E                 db  7Ah ; z
.eh_frame:000000000000520F                 db  0Ah
.eh_frame:0000000000005210                 db  0Eh
.eh_frame:0000000000005211                 db  18h
.eh_frame:0000000000005212                 db  41h ; A
.eh_frame:0000000000005213                 db  0Eh
.eh_frame:0000000000005214                 db  10h
.eh_frame:0000000000005215                 db  41h ; A
.eh_frame:0000000000005216                 db  0Eh
.eh_frame:0000000000005217                 db    8
.eh_frame:0000000000005218                 db  41h ; A
.eh_frame:0000000000005219                 db  0Bh
.eh_frame:000000000000521A                 db    0
.eh_frame:000000000000521B                 db    0
.eh_frame:000000000000521C                 db    0
.eh_frame:000000000000521D                 db    0
.eh_frame:000000000000521E                 db    0
.eh_frame:000000000000521F                 db    0
.eh_frame:0000000000005220                 db  1Ch
.eh_frame:0000000000005221                 db    0
.eh_frame:0000000000005222                 db    0
.eh_frame:0000000000005223                 db    0
.eh_frame:0000000000005224                 db    4
.eh_frame:0000000000005225                 db    1
.eh_frame:0000000000005226                 db    0
.eh_frame:0000000000005227                 db    0
.eh_frame:0000000000005228                 db  48h ; H
.eh_frame:0000000000005229                 db 0C7h
.eh_frame:000000000000522A                 db 0FFh
.eh_frame:000000000000522B                 db 0FFh
.eh_frame:000000000000522C                 db  9Fh
.eh_frame:000000000000522D                 db    0
.eh_frame:000000000000522E                 db    0
.eh_frame:000000000000522F                 db    0
.eh_frame:0000000000005230                 db    0
.eh_frame:0000000000005231                 db  44h ; D
.eh_frame:0000000000005232                 db  0Eh
.eh_frame:0000000000005233                 db  10h
.eh_frame:0000000000005234                 db  83h
.eh_frame:0000000000005235                 db    2
.eh_frame:0000000000005236                 db    2
.eh_frame:0000000000005237                 db  78h ; x
.eh_frame:0000000000005238                 db  0Ah
.eh_frame:0000000000005239                 db  0Eh
.eh_frame:000000000000523A                 db    8
.eh_frame:000000000000523B                 db  41h ; A
.eh_frame:000000000000523C                 db  0Bh
.eh_frame:000000000000523D                 db    0
.eh_frame:000000000000523E                 db    0
.eh_frame:000000000000523F                 db    0
.eh_frame:0000000000005240                 db  40h ; @
.eh_frame:0000000000005241                 db    0
.eh_frame:0000000000005242                 db    0
.eh_frame:0000000000005243                 db    0
.eh_frame:0000000000005244                 db  24h ; $
.eh_frame:0000000000005245                 db    1
.eh_frame:0000000000005246                 db    0
.eh_frame:0000000000005247                 db    0
.eh_frame:0000000000005248                 db 0C8h
.eh_frame:0000000000005249                 db 0C7h
.eh_frame:000000000000524A                 db 0FFh
.eh_frame:000000000000524B                 db 0FFh
.eh_frame:000000000000524C                 db 0E7h
.eh_frame:000000000000524D                 db    0
.eh_frame:000000000000524E                 db    0
.eh_frame:000000000000524F                 db    0
.eh_frame:0000000000005250                 db    0
.eh_frame:0000000000005251                 db  41h ; A
.eh_frame:0000000000005252                 db  0Eh
.eh_frame:0000000000005253                 db  10h
.eh_frame:0000000000005254                 db  86h
.eh_frame:0000000000005255                 db    2
.eh_frame:0000000000005256                 db  41h ; A
.eh_frame:0000000000005257                 db  0Eh
.eh_frame:0000000000005258                 db  18h
.eh_frame:0000000000005259                 db  83h
.eh_frame:000000000000525A                 db    3
.eh_frame:000000000000525B                 db  49h ; I
.eh_frame:000000000000525C                 db  0Eh
.eh_frame:000000000000525D                 db  20h
.eh_frame:000000000000525E                 db  6Eh ; n
.eh_frame:000000000000525F                 db  0Ah
.eh_frame:0000000000005260                 db  0Eh
.eh_frame:0000000000005261                 db  18h
.eh_frame:0000000000005262                 db  41h ; A
.eh_frame:0000000000005263                 db  0Eh
.eh_frame:0000000000005264                 db  10h
.eh_frame:0000000000005265                 db  41h ; A
.eh_frame:0000000000005266                 db  0Eh
.eh_frame:0000000000005267                 db    8
.eh_frame:0000000000005268                 db  45h ; E
.eh_frame:0000000000005269                 db  0Bh
.eh_frame:000000000000526A                 db    2
.eh_frame:000000000000526B                 db  4Ah ; J
.eh_frame:000000000000526C                 db  0Ah
.eh_frame:000000000000526D                 db  0Eh
.eh_frame:000000000000526E                 db  18h
.eh_frame:000000000000526F                 db  41h ; A
.eh_frame:0000000000005270                 db  0Eh
.eh_frame:0000000000005271                 db  10h
.eh_frame:0000000000005272                 db  41h ; A
.eh_frame:0000000000005273                 db  0Eh
.eh_frame:0000000000005274                 db    8
.eh_frame:0000000000005275                 db  44h ; D
.eh_frame:0000000000005276                 db  0Bh
.eh_frame:0000000000005277                 db    2
.eh_frame:0000000000005278                 db  54h ; T
.eh_frame:0000000000005279                 db  0Eh
.eh_frame:000000000000527A                 db  18h
.eh_frame:000000000000527B                 db  41h ; A
.eh_frame:000000000000527C                 db  0Eh
.eh_frame:000000000000527D                 db  10h
.eh_frame:000000000000527E                 db  41h ; A
.eh_frame:000000000000527F                 db  0Eh
.eh_frame:0000000000005280                 db    8
.eh_frame:0000000000005281                 db    0
.eh_frame:0000000000005282                 db    0
.eh_frame:0000000000005283                 db    0
.eh_frame:0000000000005284                 db  74h ; t
.eh_frame:0000000000005285                 db    0
.eh_frame:0000000000005286                 db    0
.eh_frame:0000000000005287                 db    0
.eh_frame:0000000000005288                 db  68h ; h
.eh_frame:0000000000005289                 db    1
.eh_frame:000000000000528A                 db    0
.eh_frame:000000000000528B                 db    0
.eh_frame:000000000000528C                 db  74h ; t
.eh_frame:000000000000528D                 db 0C8h
.eh_frame:000000000000528E                 db 0FFh
.eh_frame:000000000000528F                 db 0FFh
.eh_frame:0000000000005290                 db  34h ; 4
.eh_frame:0000000000005291                 db  12h
.eh_frame:0000000000005292                 db    0
.eh_frame:0000000000005293                 db    0
.eh_frame:0000000000005294                 db    0
.eh_frame:0000000000005295                 db  42h ; B
.eh_frame:0000000000005296                 db  0Eh
.eh_frame:0000000000005297                 db  10h
.eh_frame:0000000000005298                 db  8Fh
.eh_frame:0000000000005299                 db    2
.eh_frame:000000000000529A                 db  42h ; B
.eh_frame:000000000000529B                 db  0Eh
.eh_frame:000000000000529C                 db  18h
.eh_frame:000000000000529D                 db  8Eh
.eh_frame:000000000000529E                 db    3
.eh_frame:000000000000529F                 db  45h ; E
.eh_frame:00000000000052A0                 db  0Eh
.eh_frame:00000000000052A1                 db  20h
.eh_frame:00000000000052A2                 db  8Dh
.eh_frame:00000000000052A3                 db    4
.eh_frame:00000000000052A4                 db  42h ; B
.eh_frame:00000000000052A5                 db  0Eh
.eh_frame:00000000000052A6                 db  28h ; (
.eh_frame:00000000000052A7                 db  8Ch
.eh_frame:00000000000052A8                 db    5
.eh_frame:00000000000052A9                 db  44h ; D
.eh_frame:00000000000052AA                 db  0Eh
.eh_frame:00000000000052AB                 db  30h ; 0
.eh_frame:00000000000052AC                 db  86h
.eh_frame:00000000000052AD                 db    6
.eh_frame:00000000000052AE                 db  41h ; A
.eh_frame:00000000000052AF                 db  0Eh
.eh_frame:00000000000052B0                 db  38h ; 8
.eh_frame:00000000000052B1                 db  83h
.eh_frame:00000000000052B2                 db    7
.eh_frame:00000000000052B3                 db  53h ; S
.eh_frame:00000000000052B4                 db  0Eh
.eh_frame:00000000000052B5                 db 0F0h
.eh_frame:00000000000052B6                 db    1
.eh_frame:00000000000052B7                 db    3
.eh_frame:00000000000052B8                 db  81h
.eh_frame:00000000000052B9                 db  0Bh
.eh_frame:00000000000052BA                 db  0Eh
.eh_frame:00000000000052BB                 db 0F8h
.eh_frame:00000000000052BC                 db    1
.eh_frame:00000000000052BD                 db  4Ah ; J
.eh_frame:00000000000052BE                 db  0Eh
.eh_frame:00000000000052BF                 db  80h
.eh_frame:00000000000052C0                 db    2
.eh_frame:00000000000052C1                 db  44h ; D
.eh_frame:00000000000052C2                 db  0Eh
.eh_frame:00000000000052C3                 db  88h
.eh_frame:00000000000052C4                 db    2
.eh_frame:00000000000052C5                 db  45h ; E
.eh_frame:00000000000052C6                 db  0Eh
.eh_frame:00000000000052C7                 db  90h
.eh_frame:00000000000052C8                 db    2
.eh_frame:00000000000052C9                 db  5Fh ; _
.eh_frame:00000000000052CA                 db  0Eh
.eh_frame:00000000000052CB                 db 0F0h
.eh_frame:00000000000052CC                 db    1
.eh_frame:00000000000052CD                 db  64h ; d
.eh_frame:00000000000052CE                 db  0Ah
.eh_frame:00000000000052CF                 db  0Eh
.eh_frame:00000000000052D0                 db  38h ; 8
.eh_frame:00000000000052D1                 db  41h ; A
.eh_frame:00000000000052D2                 db  0Eh
.eh_frame:00000000000052D3                 db  30h ; 0
.eh_frame:00000000000052D4                 db  41h ; A
.eh_frame:00000000000052D5                 db  0Eh
.eh_frame:00000000000052D6                 db  28h ; (
.eh_frame:00000000000052D7                 db  42h ; B
.eh_frame:00000000000052D8                 db  0Eh
.eh_frame:00000000000052D9                 db  20h
.eh_frame:00000000000052DA                 db  42h ; B
.eh_frame:00000000000052DB                 db  0Eh
.eh_frame:00000000000052DC                 db  18h
.eh_frame:00000000000052DD                 db  42h ; B
.eh_frame:00000000000052DE                 db  0Eh
.eh_frame:00000000000052DF                 db  10h
.eh_frame:00000000000052E0                 db  42h ; B
.eh_frame:00000000000052E1                 db  0Eh
.eh_frame:00000000000052E2                 db    8
.eh_frame:00000000000052E3                 db  44h ; D
.eh_frame:00000000000052E4                 db  0Bh
.eh_frame:00000000000052E5                 db    3
.eh_frame:00000000000052E6                 db  99h
.eh_frame:00000000000052E7                 db    5
.eh_frame:00000000000052E8                 db  0Eh
.eh_frame:00000000000052E9                 db 0F8h
.eh_frame:00000000000052EA                 db    1
.eh_frame:00000000000052EB                 db  4Dh ; M
.eh_frame:00000000000052EC                 db  0Eh
.eh_frame:00000000000052ED                 db  80h
.eh_frame:00000000000052EE                 db    2
.eh_frame:00000000000052EF                 db  44h ; D
.eh_frame:00000000000052F0                 db  0Eh
.eh_frame:00000000000052F1                 db  88h
.eh_frame:00000000000052F2                 db    2
.eh_frame:00000000000052F3                 db  47h ; G
.eh_frame:00000000000052F4                 db  0Eh
.eh_frame:00000000000052F5                 db  90h
.eh_frame:00000000000052F6                 db    2
.eh_frame:00000000000052F7                 db  5Bh ; [
.eh_frame:00000000000052F8                 db  0Eh
.eh_frame:00000000000052F9                 db 0F0h
.eh_frame:00000000000052FA                 db    1
.eh_frame:00000000000052FB                 db    0
.eh_frame:00000000000052FC                 db  68h ; h
.eh_frame:00000000000052FD                 db    0
.eh_frame:00000000000052FE                 db    0
.eh_frame:00000000000052FF                 db    0
.eh_frame:0000000000005300                 db 0E0h
.eh_frame:0000000000005301                 db    1
.eh_frame:0000000000005302                 db    0
.eh_frame:0000000000005303                 db    0
.eh_frame:0000000000005304                 db  3Ch ; <
.eh_frame:0000000000005305                 db 0DAh
.eh_frame:0000000000005306                 db 0FFh
.eh_frame:0000000000005307                 db 0FFh
.eh_frame:0000000000005308                 db 0ABh
.eh_frame:0000000000005309                 db    1
.eh_frame:000000000000530A                 db    0
.eh_frame:000000000000530B                 db    0
.eh_frame:000000000000530C                 db    0
.eh_frame:000000000000530D                 db  42h ; B
.eh_frame:000000000000530E                 db  0Eh
.eh_frame:000000000000530F                 db  10h
.eh_frame:0000000000005310                 db  8Fh
.eh_frame:0000000000005311                 db    2
.eh_frame:0000000000005312                 db  42h ; B
.eh_frame:0000000000005313                 db  0Eh
.eh_frame:0000000000005314                 db  18h
.eh_frame:0000000000005315                 db  8Eh
.eh_frame:0000000000005316                 db    3
.eh_frame:0000000000005317                 db  45h ; E
.eh_frame:0000000000005318                 db  0Eh
.eh_frame:0000000000005319                 db  20h
.eh_frame:000000000000531A                 db  8Dh
.eh_frame:000000000000531B                 db    4
.eh_frame:000000000000531C                 db  42h ; B
.eh_frame:000000000000531D                 db  0Eh
.eh_frame:000000000000531E                 db  28h ; (
.eh_frame:000000000000531F                 db  8Ch
.eh_frame:0000000000005320                 db    5
.eh_frame:0000000000005321                 db  44h ; D
.eh_frame:0000000000005322                 db  0Eh
.eh_frame:0000000000005323                 db  30h ; 0
.eh_frame:0000000000005324                 db  86h
.eh_frame:0000000000005325                 db    6
.eh_frame:0000000000005326                 db  41h ; A
.eh_frame:0000000000005327                 db  0Eh
.eh_frame:0000000000005328                 db  38h ; 8
.eh_frame:0000000000005329                 db  83h
.eh_frame:000000000000532A                 db    7
.eh_frame:000000000000532B                 db  47h ; G
.eh_frame:000000000000532C                 db  0Eh
.eh_frame:000000000000532D                 db  60h ; `
.eh_frame:000000000000532E                 db    2
.eh_frame:000000000000532F                 db  99h
.eh_frame:0000000000005330                 db  0Eh
.eh_frame:0000000000005331                 db  68h ; h
.eh_frame:0000000000005332                 db  5Fh ; _
.eh_frame:0000000000005333                 db  0Eh
.eh_frame:0000000000005334                 db  70h ; p
.eh_frame:0000000000005335                 db  46h ; F
.eh_frame:0000000000005336                 db  0Eh
.eh_frame:0000000000005337                 db  78h ; x
.eh_frame:0000000000005338                 db  42h ; B
.eh_frame:0000000000005339                 db  0Eh
.eh_frame:000000000000533A                 db  80h
.eh_frame:000000000000533B                 db    1
.eh_frame:000000000000533C                 db  59h ; Y
.eh_frame:000000000000533D                 db  0Eh
.eh_frame:000000000000533E                 db  60h ; `
.eh_frame:000000000000533F                 db    2
.eh_frame:0000000000005340                 db  40h ; @
.eh_frame:0000000000005341                 db  0Eh
.eh_frame:0000000000005342                 db  68h ; h
.eh_frame:0000000000005343                 db  4Bh ; K
.eh_frame:0000000000005344                 db  0Eh
.eh_frame:0000000000005345                 db  70h ; p
.eh_frame:0000000000005346                 db  43h ; C
.eh_frame:0000000000005347                 db  0Eh
.eh_frame:0000000000005348                 db  78h ; x
.eh_frame:0000000000005349                 db  45h ; E
.eh_frame:000000000000534A                 db  0Eh
.eh_frame:000000000000534B                 db  80h
.eh_frame:000000000000534C                 db    1
.eh_frame:000000000000534D                 db  5Eh ; ^
.eh_frame:000000000000534E                 db  0Eh
.eh_frame:000000000000534F                 db  60h ; `
.eh_frame:0000000000005350                 db  4Ch ; L
.eh_frame:0000000000005351                 db  0Ah
.eh_frame:0000000000005352                 db  0Eh
.eh_frame:0000000000005353                 db  38h ; 8
.eh_frame:0000000000005354                 db  44h ; D
.eh_frame:0000000000005355                 db  0Eh
.eh_frame:0000000000005356                 db  30h ; 0
.eh_frame:0000000000005357                 db  41h ; A
.eh_frame:0000000000005358                 db  0Eh
.eh_frame:0000000000005359                 db  28h ; (
.eh_frame:000000000000535A                 db  42h ; B
.eh_frame:000000000000535B                 db  0Eh
.eh_frame:000000000000535C                 db  20h
.eh_frame:000000000000535D                 db  42h ; B
.eh_frame:000000000000535E                 db  0Eh
.eh_frame:000000000000535F                 db  18h
.eh_frame:0000000000005360                 db  42h ; B
.eh_frame:0000000000005361                 db  0Eh
.eh_frame:0000000000005362                 db  10h
.eh_frame:0000000000005363                 db  42h ; B
.eh_frame:0000000000005364                 db  0Eh
.eh_frame:0000000000005365                 db    8
.eh_frame:0000000000005366                 db  46h ; F
.eh_frame:0000000000005367                 db  0Bh
.eh_frame:0000000000005368                 db  28h ; (
.eh_frame:0000000000005369                 db    0
.eh_frame:000000000000536A                 db    0
.eh_frame:000000000000536B                 db    0
.eh_frame:000000000000536C                 db  4Ch ; L
.eh_frame:000000000000536D                 db    2
.eh_frame:000000000000536E                 db    0
.eh_frame:000000000000536F                 db    0
.eh_frame:0000000000005370                 db  80h
.eh_frame:0000000000005371                 db 0DBh
.eh_frame:0000000000005372                 db 0FFh
.eh_frame:0000000000005373                 db 0FFh
.eh_frame:0000000000005374                 db  36h ; 6
.eh_frame:0000000000005375                 db    0
.eh_frame:0000000000005376                 db    0
.eh_frame:0000000000005377                 db    0
.eh_frame:0000000000005378                 db    0
.eh_frame:0000000000005379                 db  42h ; B
.eh_frame:000000000000537A                 db  0Eh
.eh_frame:000000000000537B                 db  10h
.eh_frame:000000000000537C                 db  8Ch
.eh_frame:000000000000537D                 db    2
.eh_frame:000000000000537E                 db  41h ; A
.eh_frame:000000000000537F                 db  0Eh
.eh_frame:0000000000005380                 db  18h
.eh_frame:0000000000005381                 db  86h
.eh_frame:0000000000005382                 db    3
.eh_frame:0000000000005383                 db  41h ; A
.eh_frame:0000000000005384                 db  0Eh
.eh_frame:0000000000005385                 db  20h
.eh_frame:0000000000005386                 db  83h
.eh_frame:0000000000005387                 db    4
.eh_frame:0000000000005388                 db  6Eh ; n
.eh_frame:0000000000005389                 db  0Eh
.eh_frame:000000000000538A                 db  18h
.eh_frame:000000000000538B                 db  41h ; A
.eh_frame:000000000000538C                 db  0Eh
.eh_frame:000000000000538D                 db  10h
.eh_frame:000000000000538E                 db  42h ; B
.eh_frame:000000000000538F                 db  0Eh
.eh_frame:0000000000005390                 db    8
.eh_frame:0000000000005391                 db    0
.eh_frame:0000000000005392                 db    0
.eh_frame:0000000000005393                 db    0
.eh_frame:0000000000005394                 db  10h
.eh_frame:0000000000005395                 db    0
.eh_frame:0000000000005396                 db    0
.eh_frame:0000000000005397                 db    0
.eh_frame:0000000000005398                 db  78h ; x
.eh_frame:0000000000005399                 db    2
.eh_frame:000000000000539A                 db    0
.eh_frame:000000000000539B                 db    0
.eh_frame:000000000000539C                 db  94h
.eh_frame:000000000000539D                 db 0DBh
.eh_frame:000000000000539E                 db 0FFh
.eh_frame:000000000000539F                 db 0FFh
.eh_frame:00000000000053A0                 db  11h
.eh_frame:00000000000053A1                 db    0
.eh_frame:00000000000053A2                 db    0
.eh_frame:00000000000053A3                 db    0
.eh_frame:00000000000053A4                 db    0
.eh_frame:00000000000053A5                 db    0
.eh_frame:00000000000053A6                 db    0
.eh_frame:00000000000053A7                 db    0
.eh_frame:00000000000053A8                 db  10h
.eh_frame:00000000000053A9                 db    0
.eh_frame:00000000000053AA                 db    0
.eh_frame:00000000000053AB                 db    0
.eh_frame:00000000000053AC                 db  8Ch
.eh_frame:00000000000053AD                 db    2
.eh_frame:00000000000053AE                 db    0
.eh_frame:00000000000053AF                 db    0
.eh_frame:00000000000053B0                 db 0A0h
.eh_frame:00000000000053B1                 db 0DBh
.eh_frame:00000000000053B2                 db 0FFh
.eh_frame:00000000000053B3                 db 0FFh
.eh_frame:00000000000053B4                 db  11h
.eh_frame:00000000000053B5                 db    0
.eh_frame:00000000000053B6                 db    0
.eh_frame:00000000000053B7                 db    0
.eh_frame:00000000000053B8                 db    0
.eh_frame:00000000000053B9                 db    0
.eh_frame:00000000000053BA                 db    0
.eh_frame:00000000000053BB                 db    0
.eh_frame:00000000000053BC                 db  10h
.eh_frame:00000000000053BD                 db    0
.eh_frame:00000000000053BE                 db    0
.eh_frame:00000000000053BF                 db    0
.eh_frame:00000000000053C0                 db 0A0h
.eh_frame:00000000000053C1                 db    2
.eh_frame:00000000000053C2                 db    0
.eh_frame:00000000000053C3                 db    0
.eh_frame:00000000000053C4                 db 0ACh
.eh_frame:00000000000053C5                 db 0DBh
.eh_frame:00000000000053C6                 db 0FFh
.eh_frame:00000000000053C7                 db 0FFh
.eh_frame:00000000000053C8                 db  35h ; 5
.eh_frame:00000000000053C9                 db    0
.eh_frame:00000000000053CA                 db    0
.eh_frame:00000000000053CB                 db    0
.eh_frame:00000000000053CC                 db    0
.eh_frame:00000000000053CD                 db    0
.eh_frame:00000000000053CE                 db    0
.eh_frame:00000000000053CF                 db    0
.eh_frame:00000000000053D0                 db  10h
.eh_frame:00000000000053D1                 db    0
.eh_frame:00000000000053D2                 db    0
.eh_frame:00000000000053D3                 db    0
.eh_frame:00000000000053D4                 db 0B4h
.eh_frame:00000000000053D5                 db    2
.eh_frame:00000000000053D6                 db    0
.eh_frame:00000000000053D7                 db    0
.eh_frame:00000000000053D8                 db 0D8h
.eh_frame:00000000000053D9                 db 0DBh
.eh_frame:00000000000053DA                 db 0FFh
.eh_frame:00000000000053DB                 db 0FFh
.eh_frame:00000000000053DC                 db  15h
.eh_frame:00000000000053DD                 db    0
.eh_frame:00000000000053DE                 db    0
.eh_frame:00000000000053DF                 db    0
.eh_frame:00000000000053E0                 db    0
.eh_frame:00000000000053E1                 db    0
.eh_frame:00000000000053E2                 db    0
.eh_frame:00000000000053E3                 db    0
.eh_frame:00000000000053E4                 db  10h
.eh_frame:00000000000053E5                 db    0
.eh_frame:00000000000053E6                 db    0
.eh_frame:00000000000053E7                 db    0
.eh_frame:00000000000053E8                 db 0C8h
.eh_frame:00000000000053E9                 db    2
.eh_frame:00000000000053EA                 db    0
.eh_frame:00000000000053EB                 db    0
.eh_frame:00000000000053EC                 db 0E4h
.eh_frame:00000000000053ED                 db 0DBh
.eh_frame:00000000000053EE                 db 0FFh
.eh_frame:00000000000053EF                 db 0FFh
.eh_frame:00000000000053F0                 db  30h ; 0
.eh_frame:00000000000053F1                 db    0
.eh_frame:00000000000053F2                 db    0
.eh_frame:00000000000053F3                 db    0
.eh_frame:00000000000053F4                 db    0
.eh_frame:00000000000053F5                 db  6Bh ; k
.eh_frame:00000000000053F6                 db  0Eh
.eh_frame:00000000000053F7                 db  10h
.eh_frame:00000000000053F8                 db  50h ; P
.eh_frame:00000000000053F9                 db    0
.eh_frame:00000000000053FA                 db    0
.eh_frame:00000000000053FB                 db    0
.eh_frame:00000000000053FC                 db 0DCh
.eh_frame:00000000000053FD                 db    2
.eh_frame:00000000000053FE                 db    0
.eh_frame:00000000000053FF                 db    0
.eh_frame:0000000000005400                 db    0
.eh_frame:0000000000005401                 db 0DCh
.eh_frame:0000000000005402                 db 0FFh
.eh_frame:0000000000005403                 db 0FFh
.eh_frame:0000000000005404                 db  74h ; t
.eh_frame:0000000000005405                 db    0
.eh_frame:0000000000005406                 db    0
.eh_frame:0000000000005407                 db    0
.eh_frame:0000000000005408                 db    0
.eh_frame:0000000000005409                 db  42h ; B
.eh_frame:000000000000540A                 db  0Eh
.eh_frame:000000000000540B                 db  10h
.eh_frame:000000000000540C                 db  8Fh
.eh_frame:000000000000540D                 db    2
.eh_frame:000000000000540E                 db  42h ; B
.eh_frame:000000000000540F                 db  0Eh
.eh_frame:0000000000005410                 db  18h
.eh_frame:0000000000005411                 db  8Eh
.eh_frame:0000000000005412                 db    3
.eh_frame:0000000000005413                 db  49h ; I
.eh_frame:0000000000005414                 db  0Eh
.eh_frame:0000000000005415                 db  20h
.eh_frame:0000000000005416                 db  8Dh
.eh_frame:0000000000005417                 db    4
.eh_frame:0000000000005418                 db  42h ; B
.eh_frame:0000000000005419                 db  0Eh
.eh_frame:000000000000541A                 db  28h ; (
.eh_frame:000000000000541B                 db  8Ch
.eh_frame:000000000000541C                 db    5
.eh_frame:000000000000541D                 db  44h ; D
.eh_frame:000000000000541E                 db  0Eh
.eh_frame:000000000000541F                 db  30h ; 0
.eh_frame:0000000000005420                 db  86h
.eh_frame:0000000000005421                 db    6
.eh_frame:0000000000005422                 db  41h ; A
.eh_frame:0000000000005423                 db  0Eh
.eh_frame:0000000000005424                 db  38h ; 8
.eh_frame:0000000000005425                 db  83h
.eh_frame:0000000000005426                 db    7
.eh_frame:0000000000005427                 db  4Dh ; M
.eh_frame:0000000000005428                 db  0Eh
.eh_frame:0000000000005429                 db  50h ; P
.eh_frame:000000000000542A                 db  5Fh ; _
.eh_frame:000000000000542B                 db  0Eh
.eh_frame:000000000000542C                 db  58h ; X
.eh_frame:000000000000542D                 db  47h ; G
.eh_frame:000000000000542E                 db  0Eh
.eh_frame:000000000000542F                 db  60h ; `
.eh_frame:0000000000005430                 db  46h ; F
.eh_frame:0000000000005431                 db  0Eh
.eh_frame:0000000000005432                 db  68h ; h
.eh_frame:0000000000005433                 db  44h ; D
.eh_frame:0000000000005434                 db  0Eh
.eh_frame:0000000000005435                 db  70h ; p
.eh_frame:0000000000005436                 db  58h ; X
.eh_frame:0000000000005437                 db  0Eh
.eh_frame:0000000000005438                 db  38h ; 8
.eh_frame:0000000000005439                 db  41h ; A
.eh_frame:000000000000543A                 db  0Eh
.eh_frame:000000000000543B                 db  30h ; 0
.eh_frame:000000000000543C                 db  41h ; A
.eh_frame:000000000000543D                 db  0Eh
.eh_frame:000000000000543E                 db  28h ; (
.eh_frame:000000000000543F                 db  42h ; B
.eh_frame:0000000000005440                 db  0Eh
.eh_frame:0000000000005441                 db  20h
.eh_frame:0000000000005442                 db  42h ; B
.eh_frame:0000000000005443                 db  0Eh
.eh_frame:0000000000005444                 db  18h
.eh_frame:0000000000005445                 db  42h ; B
.eh_frame:0000000000005446                 db  0Eh
.eh_frame:0000000000005447                 db  10h
.eh_frame:0000000000005448                 db  42h ; B
.eh_frame:0000000000005449                 db  0Eh
.eh_frame:000000000000544A                 db    8
.eh_frame:000000000000544B                 db    0
.eh_frame:000000000000544C                 db  68h ; h
.eh_frame:000000000000544D                 db    0
.eh_frame:000000000000544E                 db    0
.eh_frame:000000000000544F                 db    0
.eh_frame:0000000000005450                 db  30h ; 0
.eh_frame:0000000000005451                 db    3
.eh_frame:0000000000005452                 db    0
.eh_frame:0000000000005453                 db    0
.eh_frame:0000000000005454                 db  2Ch ; ,
.eh_frame:0000000000005455                 db 0DCh
.eh_frame:0000000000005456                 db 0FFh
.eh_frame:0000000000005457                 db 0FFh
.eh_frame:0000000000005458                 db 0E3h
.eh_frame:0000000000005459                 db    0
.eh_frame:000000000000545A                 db    0
.eh_frame:000000000000545B                 db    0
.eh_frame:000000000000545C                 db    0
.eh_frame:000000000000545D                 db  42h ; B
.eh_frame:000000000000545E                 db  0Eh
.eh_frame:000000000000545F                 db  10h
.eh_frame:0000000000005460                 db  8Fh
.eh_frame:0000000000005461                 db    2
.eh_frame:0000000000005462                 db  42h ; B
.eh_frame:0000000000005463                 db  0Eh
.eh_frame:0000000000005464                 db  18h
.eh_frame:0000000000005465                 db  8Eh
.eh_frame:0000000000005466                 db    3
.eh_frame:0000000000005467                 db  49h ; I
.eh_frame:0000000000005468                 db  0Eh
.eh_frame:0000000000005469                 db  20h
.eh_frame:000000000000546A                 db  8Dh
.eh_frame:000000000000546B                 db    4
.eh_frame:000000000000546C                 db  42h ; B
.eh_frame:000000000000546D                 db  0Eh
.eh_frame:000000000000546E                 db  28h ; (
.eh_frame:000000000000546F                 db  8Ch
.eh_frame:0000000000005470                 db    5
.eh_frame:0000000000005471                 db  44h ; D
.eh_frame:0000000000005472                 db  0Eh
.eh_frame:0000000000005473                 db  30h ; 0
.eh_frame:0000000000005474                 db  86h
.eh_frame:0000000000005475                 db    6
.eh_frame:0000000000005476                 db  41h ; A
.eh_frame:0000000000005477                 db  0Eh
.eh_frame:0000000000005478                 db  38h ; 8
.eh_frame:0000000000005479                 db  83h
.eh_frame:000000000000547A                 db    7
.eh_frame:000000000000547B                 db  4Dh ; M
.eh_frame:000000000000547C                 db  0Eh
.eh_frame:000000000000547D                 db  70h ; p
.eh_frame:000000000000547E                 db  65h ; e
.eh_frame:000000000000547F                 db  0Eh
.eh_frame:0000000000005480                 db  78h ; x
.eh_frame:0000000000005481                 db  4Dh ; M
.eh_frame:0000000000005482                 db  0Eh
.eh_frame:0000000000005483                 db  80h
.eh_frame:0000000000005484                 db    1
.eh_frame:0000000000005485                 db  46h ; F
.eh_frame:0000000000005486                 db  0Eh
.eh_frame:0000000000005487                 db  88h
.eh_frame:0000000000005488                 db    1
.eh_frame:0000000000005489                 db  42h ; B
.eh_frame:000000000000548A                 db  0Eh
.eh_frame:000000000000548B                 db  90h
.eh_frame:000000000000548C                 db    1
.eh_frame:000000000000548D                 db  5Eh ; ^
.eh_frame:000000000000548E                 db  0Eh
.eh_frame:000000000000548F                 db  70h ; p
.eh_frame:0000000000005490                 db  56h ; V
.eh_frame:0000000000005491                 db  0Eh
.eh_frame:0000000000005492                 db  78h ; x
.eh_frame:0000000000005493                 db  43h ; C
.eh_frame:0000000000005494                 db  0Eh
.eh_frame:0000000000005495                 db  80h
.eh_frame:0000000000005496                 db    1
.eh_frame:0000000000005497                 db  43h ; C
.eh_frame:0000000000005498                 db  0Eh
.eh_frame:0000000000005499                 db  88h
.eh_frame:000000000000549A                 db    1
.eh_frame:000000000000549B                 db  56h ; V
.eh_frame:000000000000549C                 db  0Eh
.eh_frame:000000000000549D                 db  90h
.eh_frame:000000000000549E                 db    1
.eh_frame:000000000000549F                 db  52h ; R
.eh_frame:00000000000054A0                 db  0Eh
.eh_frame:00000000000054A1                 db  70h ; p
.eh_frame:00000000000054A2                 db  5Bh ; [
.eh_frame:00000000000054A3                 db  0Eh
.eh_frame:00000000000054A4                 db  38h ; 8
.eh_frame:00000000000054A5                 db  41h ; A
.eh_frame:00000000000054A6                 db  0Eh
.eh_frame:00000000000054A7                 db  30h ; 0
.eh_frame:00000000000054A8                 db  41h ; A
.eh_frame:00000000000054A9                 db  0Eh
.eh_frame:00000000000054AA                 db  28h ; (
.eh_frame:00000000000054AB                 db  42h ; B
.eh_frame:00000000000054AC                 db  0Eh
.eh_frame:00000000000054AD                 db  20h
.eh_frame:00000000000054AE                 db  42h ; B
.eh_frame:00000000000054AF                 db  0Eh
.eh_frame:00000000000054B0                 db  18h
.eh_frame:00000000000054B1                 db  42h ; B
.eh_frame:00000000000054B2                 db  0Eh
.eh_frame:00000000000054B3                 db  10h
.eh_frame:00000000000054B4                 db  42h ; B
.eh_frame:00000000000054B5                 db  0Eh
.eh_frame:00000000000054B6                 db    8
.eh_frame:00000000000054B7                 db    0
.eh_frame:00000000000054B8                 db  10h
.eh_frame:00000000000054B9                 db    0
.eh_frame:00000000000054BA                 db    0
.eh_frame:00000000000054BB                 db    0
.eh_frame:00000000000054BC                 db  9Ch
.eh_frame:00000000000054BD                 db    3
.eh_frame:00000000000054BE                 db    0
.eh_frame:00000000000054BF                 db    0
.eh_frame:00000000000054C0                 db 0B0h
.eh_frame:00000000000054C1                 db 0DCh
.eh_frame:00000000000054C2                 db 0FFh
.eh_frame:00000000000054C3                 db 0FFh
.eh_frame:00000000000054C4                 db  0Ah
.eh_frame:00000000000054C5                 db    0
.eh_frame:00000000000054C6                 db    0
.eh_frame:00000000000054C7                 db    0
.eh_frame:00000000000054C8                 db    0
.eh_frame:00000000000054C9                 db    0
.eh_frame:00000000000054CA                 db    0
.eh_frame:00000000000054CB                 db    0
.eh_frame:00000000000054CC                 db  28h ; (
.eh_frame:00000000000054CD                 db    0
.eh_frame:00000000000054CE                 db    0
.eh_frame:00000000000054CF                 db    0
.eh_frame:00000000000054D0                 db 0B0h
.eh_frame:00000000000054D1                 db    3
.eh_frame:00000000000054D2                 db    0
.eh_frame:00000000000054D3                 db    0
.eh_frame:00000000000054D4                 db 0ACh
.eh_frame:00000000000054D5                 db 0DCh
.eh_frame:00000000000054D6                 db 0FFh
.eh_frame:00000000000054D7                 db 0FFh
.eh_frame:00000000000054D8                 db  93h
.eh_frame:00000000000054D9                 db    0
.eh_frame:00000000000054DA                 db    0
.eh_frame:00000000000054DB                 db    0
.eh_frame:00000000000054DC                 db    0
.eh_frame:00000000000054DD                 db  48h ; H
.eh_frame:00000000000054DE                 db  0Eh
.eh_frame:00000000000054DF                 db  10h
.eh_frame:00000000000054E0                 db  8Ch
.eh_frame:00000000000054E1                 db    2
.eh_frame:00000000000054E2                 db  48h ; H
.eh_frame:00000000000054E3                 db  0Eh
.eh_frame:00000000000054E4                 db  18h
.eh_frame:00000000000054E5                 db  86h
.eh_frame:00000000000054E6                 db    3
.eh_frame:00000000000054E7                 db  41h ; A
.eh_frame:00000000000054E8                 db  0Eh
.eh_frame:00000000000054E9                 db  20h
.eh_frame:00000000000054EA                 db  83h
.eh_frame:00000000000054EB                 db    4
.eh_frame:00000000000054EC                 db    2
.eh_frame:00000000000054ED                 db  74h ; t
.eh_frame:00000000000054EE                 db  0Eh
.eh_frame:00000000000054EF                 db  18h
.eh_frame:00000000000054F0                 db  4Bh ; K
.eh_frame:00000000000054F1                 db  0Eh
.eh_frame:00000000000054F2                 db  10h
.eh_frame:00000000000054F3                 db  42h ; B
.eh_frame:00000000000054F4                 db  0Eh
.eh_frame:00000000000054F5                 db    8
.eh_frame:00000000000054F6                 db    0
.eh_frame:00000000000054F7                 db    0
.eh_frame:00000000000054F8                 db  10h
.eh_frame:00000000000054F9                 db    0
.eh_frame:00000000000054FA                 db    0
.eh_frame:00000000000054FB                 db    0
.eh_frame:00000000000054FC                 db 0DCh
.eh_frame:00000000000054FD                 db    3
.eh_frame:00000000000054FE                 db    0
.eh_frame:00000000000054FF                 db    0
.eh_frame:0000000000005500                 db  20h
.eh_frame:0000000000005501                 db 0DDh
.eh_frame:0000000000005502                 db 0FFh
.eh_frame:0000000000005503                 db 0FFh
.eh_frame:0000000000005504                 db  13h
.eh_frame:0000000000005505                 db    0
.eh_frame:0000000000005506                 db    0
.eh_frame:0000000000005507                 db    0
.eh_frame:0000000000005508                 db    0
.eh_frame:0000000000005509                 db    0
.eh_frame:000000000000550A                 db    0
.eh_frame:000000000000550B                 db    0
.eh_frame:000000000000550C                 db  10h
.eh_frame:000000000000550D                 db    0
.eh_frame:000000000000550E                 db    0
.eh_frame:000000000000550F                 db    0
.eh_frame:0000000000005510                 db 0F0h
.eh_frame:0000000000005511                 db    3
.eh_frame:0000000000005512                 db    0
.eh_frame:0000000000005513                 db    0
.eh_frame:0000000000005514                 db  2Ch ; ,
.eh_frame:0000000000005515                 db 0DDh
.eh_frame:0000000000005516                 db 0FFh
.eh_frame:0000000000005517                 db 0FFh
.eh_frame:0000000000005518                 db  0Ch
.eh_frame:0000000000005519                 db    0
.eh_frame:000000000000551A                 db    0
.eh_frame:000000000000551B                 db    0
.eh_frame:000000000000551C                 db    0
.eh_frame:000000000000551D                 db    0
.eh_frame:000000000000551E                 db    0
.eh_frame:000000000000551F                 db    0
.eh_frame:0000000000005520                 db  10h
.eh_frame:0000000000005521                 db    0
.eh_frame:0000000000005522                 db    0
.eh_frame:0000000000005523                 db    0
.eh_frame:0000000000005524                 db    4
.eh_frame:0000000000005525                 db    4
.eh_frame:0000000000005526                 db    0
.eh_frame:0000000000005527                 db    0
.eh_frame:0000000000005528                 db  28h ; (
.eh_frame:0000000000005529                 db 0DDh
.eh_frame:000000000000552A                 db 0FFh
.eh_frame:000000000000552B                 db 0FFh
.eh_frame:000000000000552C                 db  18h
.eh_frame:000000000000552D                 db    0
.eh_frame:000000000000552E                 db    0
.eh_frame:000000000000552F                 db    0
.eh_frame:0000000000005530                 db    0
.eh_frame:0000000000005531                 db    0
.eh_frame:0000000000005532                 db    0
.eh_frame:0000000000005533                 db    0
.eh_frame:0000000000005534                 db  10h
.eh_frame:0000000000005535                 db    0
.eh_frame:0000000000005536                 db    0
.eh_frame:0000000000005537                 db    0
.eh_frame:0000000000005538                 db  18h
.eh_frame:0000000000005539                 db    4
.eh_frame:000000000000553A                 db    0
.eh_frame:000000000000553B                 db    0
.eh_frame:000000000000553C                 db  34h ; 4
.eh_frame:000000000000553D                 db 0DDh
.eh_frame:000000000000553E                 db 0FFh
.eh_frame:000000000000553F                 db 0FFh
.eh_frame:0000000000005540                 db  14h
.eh_frame:0000000000005541                 db    0
.eh_frame:0000000000005542                 db    0
.eh_frame:0000000000005543                 db    0
.eh_frame:0000000000005544                 db    0
.eh_frame:0000000000005545                 db    0
.eh_frame:0000000000005546                 db    0
.eh_frame:0000000000005547                 db    0
.eh_frame:0000000000005548                 db  18h
.eh_frame:0000000000005549                 db    0
.eh_frame:000000000000554A                 db    0
.eh_frame:000000000000554B                 db    0
.eh_frame:000000000000554C                 db  2Ch ; ,
.eh_frame:000000000000554D                 db    4
.eh_frame:000000000000554E                 db    0
.eh_frame:000000000000554F                 db    0
.eh_frame:0000000000005550                 db  40h ; @
.eh_frame:0000000000005551                 db 0DDh
.eh_frame:0000000000005552                 db 0FFh
.eh_frame:0000000000005553                 db 0FFh
.eh_frame:0000000000005554                 db  8Eh
.eh_frame:0000000000005555                 db    0
.eh_frame:0000000000005556                 db    0
.eh_frame:0000000000005557                 db    0
.eh_frame:0000000000005558                 db    0
.eh_frame:0000000000005559                 db  44h ; D
.eh_frame:000000000000555A                 db  0Eh
.eh_frame:000000000000555B                 db  50h ; P
.eh_frame:000000000000555C                 db    2
.eh_frame:000000000000555D                 db  7Fh ; 
.eh_frame:000000000000555E                 db  0Ah
.eh_frame:000000000000555F                 db  0Eh
.eh_frame:0000000000005560                 db    8
.eh_frame:0000000000005561                 db  41h ; A
.eh_frame:0000000000005562                 db  0Bh
.eh_frame:0000000000005563                 db    0
.eh_frame:0000000000005564                 db  18h
.eh_frame:0000000000005565                 db    0
.eh_frame:0000000000005566                 db    0
.eh_frame:0000000000005567                 db    0
.eh_frame:0000000000005568                 db  48h ; H
.eh_frame:0000000000005569                 db    4
.eh_frame:000000000000556A                 db    0
.eh_frame:000000000000556B                 db    0
.eh_frame:000000000000556C                 db 0B4h
.eh_frame:000000000000556D                 db 0DDh
.eh_frame:000000000000556E                 db 0FFh
.eh_frame:000000000000556F                 db 0FFh
.eh_frame:0000000000005570                 db  8Ah
.eh_frame:0000000000005571                 db    0
.eh_frame:0000000000005572                 db    0
.eh_frame:0000000000005573                 db    0
.eh_frame:0000000000005574                 db    0
.eh_frame:0000000000005575                 db  44h ; D
.eh_frame:0000000000005576                 db  0Eh
.eh_frame:0000000000005577                 db  50h ; P
.eh_frame:0000000000005578                 db    2
.eh_frame:0000000000005579                 db  7Bh ; {
.eh_frame:000000000000557A                 db  0Ah
.eh_frame:000000000000557B                 db  0Eh
.eh_frame:000000000000557C                 db    8
.eh_frame:000000000000557D                 db  41h ; A
.eh_frame:000000000000557E                 db  0Bh
.eh_frame:000000000000557F                 db    0
.eh_frame:0000000000005580                 db  10h
.eh_frame:0000000000005581                 db    0
.eh_frame:0000000000005582                 db    0
.eh_frame:0000000000005583                 db    0
.eh_frame:0000000000005584                 db  64h ; d
.eh_frame:0000000000005585                 db    4
.eh_frame:0000000000005586                 db    0
.eh_frame:0000000000005587                 db    0
.eh_frame:0000000000005588                 db  28h ; (
.eh_frame:0000000000005589                 db 0DEh
.eh_frame:000000000000558A                 db 0FFh
.eh_frame:000000000000558B                 db 0FFh
.eh_frame:000000000000558C                 db  0Ch
.eh_frame:000000000000558D                 db    0
.eh_frame:000000000000558E                 db    0
.eh_frame:000000000000558F                 db    0
.eh_frame:0000000000005590                 db    0
.eh_frame:0000000000005591                 db    0
.eh_frame:0000000000005592                 db    0
.eh_frame:0000000000005593                 db    0
.eh_frame:0000000000005594                 db  10h
.eh_frame:0000000000005595                 db    0
.eh_frame:0000000000005596                 db    0
.eh_frame:0000000000005597                 db    0
.eh_frame:0000000000005598                 db  78h ; x
.eh_frame:0000000000005599                 db    4
.eh_frame:000000000000559A                 db    0
.eh_frame:000000000000559B                 db    0
.eh_frame:000000000000559C                 db  24h ; $
.eh_frame:000000000000559D                 db 0DEh
.eh_frame:000000000000559E                 db 0FFh
.eh_frame:000000000000559F                 db 0FFh
.eh_frame:00000000000055A0                 db  0Fh
.eh_frame:00000000000055A1                 db    0
.eh_frame:00000000000055A2                 db    0
.eh_frame:00000000000055A3                 db    0
.eh_frame:00000000000055A4                 db    0
.eh_frame:00000000000055A5                 db    0
.eh_frame:00000000000055A6                 db    0
.eh_frame:00000000000055A7                 db    0
.eh_frame:00000000000055A8                 db  18h
.eh_frame:00000000000055A9                 db    0
.eh_frame:00000000000055AA                 db    0
.eh_frame:00000000000055AB                 db    0
.eh_frame:00000000000055AC                 db  8Ch
.eh_frame:00000000000055AD                 db    4
.eh_frame:00000000000055AE                 db    0
.eh_frame:00000000000055AF                 db    0
.eh_frame:00000000000055B0                 db  20h
.eh_frame:00000000000055B1                 db 0DEh
.eh_frame:00000000000055B2                 db 0FFh
.eh_frame:00000000000055B3                 db 0FFh
.eh_frame:00000000000055B4                 db  98h
.eh_frame:00000000000055B5                 db    0
.eh_frame:00000000000055B6                 db    0
.eh_frame:00000000000055B7                 db    0
.eh_frame:00000000000055B8                 db    0
.eh_frame:00000000000055B9                 db  44h ; D
.eh_frame:00000000000055BA                 db  0Eh
.eh_frame:00000000000055BB                 db  50h ; P
.eh_frame:00000000000055BC                 db    2
.eh_frame:00000000000055BD                 db  8Eh
.eh_frame:00000000000055BE                 db  0Ah
.eh_frame:00000000000055BF                 db  0Eh
.eh_frame:00000000000055C0                 db    8
.eh_frame:00000000000055C1                 db  41h ; A
.eh_frame:00000000000055C2                 db  0Bh
.eh_frame:00000000000055C3                 db    0
.eh_frame:00000000000055C4                 db  10h
.eh_frame:00000000000055C5                 db    0
.eh_frame:00000000000055C6                 db    0
.eh_frame:00000000000055C7                 db    0
.eh_frame:00000000000055C8                 db 0A8h
.eh_frame:00000000000055C9                 db    4
.eh_frame:00000000000055CA                 db    0
.eh_frame:00000000000055CB                 db    0
.eh_frame:00000000000055CC                 db 0A4h
.eh_frame:00000000000055CD                 db 0DEh
.eh_frame:00000000000055CE                 db 0FFh
.eh_frame:00000000000055CF                 db 0FFh
.eh_frame:00000000000055D0                 db  10h
.eh_frame:00000000000055D1                 db    0
.eh_frame:00000000000055D2                 db    0
.eh_frame:00000000000055D3                 db    0
.eh_frame:00000000000055D4                 db    0
.eh_frame:00000000000055D5                 db    0
.eh_frame:00000000000055D6                 db    0
.eh_frame:00000000000055D7                 db    0
.eh_frame:00000000000055D8                 db  10h
.eh_frame:00000000000055D9                 db    0
.eh_frame:00000000000055DA                 db    0
.eh_frame:00000000000055DB                 db    0
.eh_frame:00000000000055DC                 db 0BCh
.eh_frame:00000000000055DD                 db    4
.eh_frame:00000000000055DE                 db    0
.eh_frame:00000000000055DF                 db    0
.eh_frame:00000000000055E0                 db 0A0h
.eh_frame:00000000000055E1                 db 0DEh
.eh_frame:00000000000055E2                 db 0FFh
.eh_frame:00000000000055E3                 db 0FFh
.eh_frame:00000000000055E4                 db  11h
.eh_frame:00000000000055E5                 db    0
.eh_frame:00000000000055E6                 db    0
.eh_frame:00000000000055E7                 db    0
.eh_frame:00000000000055E8                 db    0
.eh_frame:00000000000055E9                 db    0
.eh_frame:00000000000055EA                 db    0
.eh_frame:00000000000055EB                 db    0
.eh_frame:00000000000055EC                 db  10h
.eh_frame:00000000000055ED                 db    0
.eh_frame:00000000000055EE                 db    0
.eh_frame:00000000000055EF                 db    0
.eh_frame:00000000000055F0                 db 0D0h
.eh_frame:00000000000055F1                 db    4
.eh_frame:00000000000055F2                 db    0
.eh_frame:00000000000055F3                 db    0
.eh_frame:00000000000055F4                 db 0ACh
.eh_frame:00000000000055F5                 db 0DEh
.eh_frame:00000000000055F6                 db 0FFh
.eh_frame:00000000000055F7                 db 0FFh
.eh_frame:00000000000055F8                 db  0Ah
.eh_frame:00000000000055F9                 db    0
.eh_frame:00000000000055FA                 db    0
.eh_frame:00000000000055FB                 db    0
.eh_frame:00000000000055FC                 db    0
.eh_frame:00000000000055FD                 db    0
.eh_frame:00000000000055FE                 db    0
.eh_frame:00000000000055FF                 db    0
.eh_frame:0000000000005600                 db  18h
.eh_frame:0000000000005601                 db    0
.eh_frame:0000000000005602                 db    0
.eh_frame:0000000000005603                 db    0
.eh_frame:0000000000005604                 db 0E4h
.eh_frame:0000000000005605                 db    4
.eh_frame:0000000000005606                 db    0
.eh_frame:0000000000005607                 db    0
.eh_frame:0000000000005608                 db 0A8h
.eh_frame:0000000000005609                 db 0DEh
.eh_frame:000000000000560A                 db 0FFh
.eh_frame:000000000000560B                 db 0FFh
.eh_frame:000000000000560C                 db  8Eh
.eh_frame:000000000000560D                 db    0
.eh_frame:000000000000560E                 db    0
.eh_frame:000000000000560F                 db    0
.eh_frame:0000000000005610                 db    0
.eh_frame:0000000000005611                 db  44h ; D
.eh_frame:0000000000005612                 db  0Eh
.eh_frame:0000000000005613                 db  50h ; P
.eh_frame:0000000000005614                 db    2
.eh_frame:0000000000005615                 db  7Fh ; 
.eh_frame:0000000000005616                 db  0Ah
.eh_frame:0000000000005617                 db  0Eh
.eh_frame:0000000000005618                 db    8
.eh_frame:0000000000005619                 db  41h ; A
.eh_frame:000000000000561A                 db  0Bh
.eh_frame:000000000000561B                 db    0
.eh_frame:000000000000561C                 db  18h
.eh_frame:000000000000561D                 db    0
.eh_frame:000000000000561E                 db    0
.eh_frame:000000000000561F                 db    0
.eh_frame:0000000000005620                 db    0
.eh_frame:0000000000005621                 db    5
.eh_frame:0000000000005622                 db    0
.eh_frame:0000000000005623                 db    0
.eh_frame:0000000000005624                 db  1Ch
.eh_frame:0000000000005625                 db 0DFh
.eh_frame:0000000000005626                 db 0FFh
.eh_frame:0000000000005627                 db 0FFh
.eh_frame:0000000000005628                 db  91h
.eh_frame:0000000000005629                 db    0
.eh_frame:000000000000562A                 db    0
.eh_frame:000000000000562B                 db    0
.eh_frame:000000000000562C                 db    0
.eh_frame:000000000000562D                 db  44h ; D
.eh_frame:000000000000562E                 db  0Eh
.eh_frame:000000000000562F                 db  50h ; P
.eh_frame:0000000000005630                 db    2
.eh_frame:0000000000005631                 db  82h
.eh_frame:0000000000005632                 db  0Ah
.eh_frame:0000000000005633                 db  0Eh
.eh_frame:0000000000005634                 db    8
.eh_frame:0000000000005635                 db  41h ; A
.eh_frame:0000000000005636                 db  0Bh
.eh_frame:0000000000005637                 db    0
.eh_frame:0000000000005638                 db  10h
.eh_frame:0000000000005639                 db    0
.eh_frame:000000000000563A                 db    0
.eh_frame:000000000000563B                 db    0
.eh_frame:000000000000563C                 db  1Ch
.eh_frame:000000000000563D                 db    5
.eh_frame:000000000000563E                 db    0
.eh_frame:000000000000563F                 db    0
.eh_frame:0000000000005640                 db 0A0h
.eh_frame:0000000000005641                 db 0DFh
.eh_frame:0000000000005642                 db 0FFh
.eh_frame:0000000000005643                 db 0FFh
.eh_frame:0000000000005644                 db  0Ch
.eh_frame:0000000000005645                 db    0
.eh_frame:0000000000005646                 db    0
.eh_frame:0000000000005647                 db    0
.eh_frame:0000000000005648                 db    0
.eh_frame:0000000000005649                 db    0
.eh_frame:000000000000564A                 db    0
.eh_frame:000000000000564B                 db    0
.eh_frame:000000000000564C                 db  10h
.eh_frame:000000000000564D                 db    0
.eh_frame:000000000000564E                 db    0
.eh_frame:000000000000564F                 db    0
.eh_frame:0000000000005650                 db  30h ; 0
.eh_frame:0000000000005651                 db    5
.eh_frame:0000000000005652                 db    0
.eh_frame:0000000000005653                 db    0
.eh_frame:0000000000005654                 db  9Ch
.eh_frame:0000000000005655                 db 0DFh
.eh_frame:0000000000005656                 db 0FFh
.eh_frame:0000000000005657                 db 0FFh
.eh_frame:0000000000005658                 db  17h
.eh_frame:0000000000005659                 db    0
.eh_frame:000000000000565A                 db    0
.eh_frame:000000000000565B                 db    0
.eh_frame:000000000000565C                 db    0
.eh_frame:000000000000565D                 db    0
.eh_frame:000000000000565E                 db    0
.eh_frame:000000000000565F                 db    0
.eh_frame:0000000000005660                 db  10h
.eh_frame:0000000000005661                 db    0
.eh_frame:0000000000005662                 db    0
.eh_frame:0000000000005663                 db    0
.eh_frame:0000000000005664                 db  44h ; D
.eh_frame:0000000000005665                 db    5
.eh_frame:0000000000005666                 db    0
.eh_frame:0000000000005667                 db    0
.eh_frame:0000000000005668                 db 0A8h
.eh_frame:0000000000005669                 db 0DFh
.eh_frame:000000000000566A                 db 0FFh
.eh_frame:000000000000566B                 db 0FFh
.eh_frame:000000000000566C                 db  13h
.eh_frame:000000000000566D                 db    0
.eh_frame:000000000000566E                 db    0
.eh_frame:000000000000566F                 db    0
.eh_frame:0000000000005670                 db    0
.eh_frame:0000000000005671                 db    0
.eh_frame:0000000000005672                 db    0
.eh_frame:0000000000005673                 db    0
.eh_frame:0000000000005674                 db  10h
.eh_frame:0000000000005675                 db    0
.eh_frame:0000000000005676                 db    0
.eh_frame:0000000000005677                 db    0
.eh_frame:0000000000005678                 db  58h ; X
.eh_frame:0000000000005679                 db    5
.eh_frame:000000000000567A                 db    0
.eh_frame:000000000000567B                 db    0
.eh_frame:000000000000567C                 db 0B4h
.eh_frame:000000000000567D                 db 0DFh
.eh_frame:000000000000567E                 db 0FFh
.eh_frame:000000000000567F                 db 0FFh
.eh_frame:0000000000005680                 db  0Ch
.eh_frame:0000000000005681                 db    0
.eh_frame:0000000000005682                 db    0
.eh_frame:0000000000005683                 db    0
.eh_frame:0000000000005684                 db    0
.eh_frame:0000000000005685                 db    0
.eh_frame:0000000000005686                 db    0
.eh_frame:0000000000005687                 db    0
.eh_frame:0000000000005688                 db  10h
.eh_frame:0000000000005689                 db    0
.eh_frame:000000000000568A                 db    0
.eh_frame:000000000000568B                 db    0
.eh_frame:000000000000568C                 db  6Ch ; l
.eh_frame:000000000000568D                 db    5
.eh_frame:000000000000568E                 db    0
.eh_frame:000000000000568F                 db    0
.eh_frame:0000000000005690                 db 0B0h
.eh_frame:0000000000005691                 db 0DFh
.eh_frame:0000000000005692                 db 0FFh
.eh_frame:0000000000005693                 db 0FFh
.eh_frame:0000000000005694                 db  14h
.eh_frame:0000000000005695                 db    0
.eh_frame:0000000000005696                 db    0
.eh_frame:0000000000005697                 db    0
.eh_frame:0000000000005698                 db    0
.eh_frame:0000000000005699                 db    0
.eh_frame:000000000000569A                 db    0
.eh_frame:000000000000569B                 db    0
.eh_frame:000000000000569C                 db  10h
.eh_frame:000000000000569D                 db    0
.eh_frame:000000000000569E                 db    0
.eh_frame:000000000000569F                 db    0
.eh_frame:00000000000056A0                 db  80h
.eh_frame:00000000000056A1                 db    5
.eh_frame:00000000000056A2                 db    0
.eh_frame:00000000000056A3                 db    0
.eh_frame:00000000000056A4                 db 0BCh
.eh_frame:00000000000056A5                 db 0DFh
.eh_frame:00000000000056A6                 db 0FFh
.eh_frame:00000000000056A7                 db 0FFh
.eh_frame:00000000000056A8                 db  13h
.eh_frame:00000000000056A9                 db    0
.eh_frame:00000000000056AA                 db    0
.eh_frame:00000000000056AB                 db    0
.eh_frame:00000000000056AC                 db    0
.eh_frame:00000000000056AD                 db    0
.eh_frame:00000000000056AE                 db    0
.eh_frame:00000000000056AF                 db    0
.eh_frame:00000000000056B0                 db  14h
.eh_frame:00000000000056B1                 db    0
.eh_frame:00000000000056B2                 db    0
.eh_frame:00000000000056B3                 db    0
.eh_frame:00000000000056B4                 db  94h
.eh_frame:00000000000056B5                 db    5
.eh_frame:00000000000056B6                 db    0
.eh_frame:00000000000056B7                 db    0
.eh_frame:00000000000056B8                 db 0C8h
.eh_frame:00000000000056B9                 db 0DFh
.eh_frame:00000000000056BA                 db 0FFh
.eh_frame:00000000000056BB                 db 0FFh
.eh_frame:00000000000056BC                 db  18h
.eh_frame:00000000000056BD                 db    0
.eh_frame:00000000000056BE                 db    0
.eh_frame:00000000000056BF                 db    0
.eh_frame:00000000000056C0                 db    0
.eh_frame:00000000000056C1                 db    0
.eh_frame:00000000000056C2                 db    0
.eh_frame:00000000000056C3                 db    0
.eh_frame:00000000000056C4                 db    0
.eh_frame:00000000000056C5                 db    0
.eh_frame:00000000000056C6                 db    0
.eh_frame:00000000000056C7                 db    0
.eh_frame:00000000000056C8                 db  10h
.eh_frame:00000000000056C9                 db    1
.eh_frame:00000000000056CA                 db    0
.eh_frame:00000000000056CB                 db    0
.eh_frame:00000000000056CC                 db 0ACh
.eh_frame:00000000000056CD                 db    5
.eh_frame:00000000000056CE                 db    0
.eh_frame:00000000000056CF                 db    0
.eh_frame:00000000000056D0                 db 0D0h
.eh_frame:00000000000056D1                 db 0DFh
.eh_frame:00000000000056D2                 db 0FFh
.eh_frame:00000000000056D3                 db 0FFh
.eh_frame:00000000000056D4                 db  17h
.eh_frame:00000000000056D5                 db    4
.eh_frame:00000000000056D6                 db    0
.eh_frame:00000000000056D7                 db    0
.eh_frame:00000000000056D8                 db    0
.eh_frame:00000000000056D9                 db  42h ; B
.eh_frame:00000000000056DA                 db  0Eh
.eh_frame:00000000000056DB                 db  10h
.eh_frame:00000000000056DC                 db  8Fh
.eh_frame:00000000000056DD                 db    2
.eh_frame:00000000000056DE                 db  42h ; B
.eh_frame:00000000000056DF                 db  0Eh
.eh_frame:00000000000056E0                 db  18h
.eh_frame:00000000000056E1                 db  8Eh
.eh_frame:00000000000056E2                 db    3
.eh_frame:00000000000056E3                 db  42h ; B
.eh_frame:00000000000056E4                 db  0Eh
.eh_frame:00000000000056E5                 db  20h
.eh_frame:00000000000056E6                 db  8Dh
.eh_frame:00000000000056E7                 db    4
.eh_frame:00000000000056E8                 db  42h ; B
.eh_frame:00000000000056E9                 db  0Eh
.eh_frame:00000000000056EA                 db  28h ; (
.eh_frame:00000000000056EB                 db  8Ch
.eh_frame:00000000000056EC                 db    5
.eh_frame:00000000000056ED                 db  44h ; D
.eh_frame:00000000000056EE                 db  0Eh
.eh_frame:00000000000056EF                 db  30h ; 0
.eh_frame:00000000000056F0                 db  86h
.eh_frame:00000000000056F1                 db    6
.eh_frame:00000000000056F2                 db  41h ; A
.eh_frame:00000000000056F3                 db  0Eh
.eh_frame:00000000000056F4                 db  38h ; 8
.eh_frame:00000000000056F5                 db  83h
.eh_frame:00000000000056F6                 db    7
.eh_frame:00000000000056F7                 db  4Ah ; J
.eh_frame:00000000000056F8                 db  0Eh
.eh_frame:00000000000056F9                 db  60h ; `
.eh_frame:00000000000056FA                 db    2
.eh_frame:00000000000056FB                 db 0DDh
.eh_frame:00000000000056FC                 db  0Eh
.eh_frame:00000000000056FD                 db  68h ; h
.eh_frame:00000000000056FE                 db  57h ; W
.eh_frame:00000000000056FF                 db  0Eh
.eh_frame:0000000000005700                 db  70h ; p
.eh_frame:0000000000005701                 db  42h ; B
.eh_frame:0000000000005702                 db  0Eh
.eh_frame:0000000000005703                 db  78h ; x
.eh_frame:0000000000005704                 db  42h ; B
.eh_frame:0000000000005705                 db  0Eh
.eh_frame:0000000000005706                 db  80h
.eh_frame:0000000000005707                 db    1
.eh_frame:0000000000005708                 db  42h ; B
.eh_frame:0000000000005709                 db  0Eh
.eh_frame:000000000000570A                 db  88h
.eh_frame:000000000000570B                 db    1
.eh_frame:000000000000570C                 db  42h ; B
.eh_frame:000000000000570D                 db  0Eh
.eh_frame:000000000000570E                 db  90h
.eh_frame:000000000000570F                 db    1
.eh_frame:0000000000005710                 db  53h ; S
.eh_frame:0000000000005711                 db  0Eh
.eh_frame:0000000000005712                 db  60h ; `
.eh_frame:0000000000005713                 db  44h ; D
.eh_frame:0000000000005714                 db  0Ah
.eh_frame:0000000000005715                 db  0Eh
.eh_frame:0000000000005716                 db  38h ; 8
.eh_frame:0000000000005717                 db  41h ; A
.eh_frame:0000000000005718                 db  0Eh
.eh_frame:0000000000005719                 db  30h ; 0
.eh_frame:000000000000571A                 db  41h ; A
.eh_frame:000000000000571B                 db  0Eh
.eh_frame:000000000000571C                 db  28h ; (
.eh_frame:000000000000571D                 db  42h ; B
.eh_frame:000000000000571E                 db  0Eh
.eh_frame:000000000000571F                 db  20h
.eh_frame:0000000000005720                 db  42h ; B
.eh_frame:0000000000005721                 db  0Eh
.eh_frame:0000000000005722                 db  18h
.eh_frame:0000000000005723                 db  42h ; B
.eh_frame:0000000000005724                 db  0Eh
.eh_frame:0000000000005725                 db  10h
.eh_frame:0000000000005726                 db  42h ; B
.eh_frame:0000000000005727                 db  0Eh
.eh_frame:0000000000005728                 db    8
.eh_frame:0000000000005729                 db  44h ; D
.eh_frame:000000000000572A                 db  0Bh
.eh_frame:000000000000572B                 db    2
.eh_frame:000000000000572C                 db  78h ; x
.eh_frame:000000000000572D                 db  0Ah
.eh_frame:000000000000572E                 db  0Eh
.eh_frame:000000000000572F                 db  68h ; h
.eh_frame:0000000000005730                 db  48h ; H
.eh_frame:0000000000005731                 db  0Bh
.eh_frame:0000000000005732                 db  5Ah ; Z
.eh_frame:0000000000005733                 db  0Ah
.eh_frame:0000000000005734                 db  0Eh
.eh_frame:0000000000005735                 db  38h ; 8
.eh_frame:0000000000005736                 db  47h ; G
.eh_frame:0000000000005737                 db  0Eh
.eh_frame:0000000000005738                 db  30h ; 0
.eh_frame:0000000000005739                 db  41h ; A
.eh_frame:000000000000573A                 db  0Eh
.eh_frame:000000000000573B                 db  28h ; (
.eh_frame:000000000000573C                 db  42h ; B
.eh_frame:000000000000573D                 db  0Eh
.eh_frame:000000000000573E                 db  20h
.eh_frame:000000000000573F                 db  42h ; B
.eh_frame:0000000000005740                 db  0Eh
.eh_frame:0000000000005741                 db  18h
.eh_frame:0000000000005742                 db  42h ; B
.eh_frame:0000000000005743                 db  0Eh
.eh_frame:0000000000005744                 db  10h
.eh_frame:0000000000005745                 db  42h ; B
.eh_frame:0000000000005746                 db  0Eh
.eh_frame:0000000000005747                 db    8
.eh_frame:0000000000005748                 db  56h ; V
.eh_frame:0000000000005749                 db  0Bh
.eh_frame:000000000000574A                 db  5Eh ; ^
.eh_frame:000000000000574B                 db  0Ah
.eh_frame:000000000000574C                 db  0Eh
.eh_frame:000000000000574D                 db  38h ; 8
.eh_frame:000000000000574E                 db  52h ; R
.eh_frame:000000000000574F                 db  0Eh
.eh_frame:0000000000005750                 db  30h ; 0
.eh_frame:0000000000005751                 db  41h ; A
.eh_frame:0000000000005752                 db  0Eh
.eh_frame:0000000000005753                 db  28h ; (
.eh_frame:0000000000005754                 db  42h ; B
.eh_frame:0000000000005755                 db  0Eh
.eh_frame:0000000000005756                 db  20h
.eh_frame:0000000000005757                 db  42h ; B
.eh_frame:0000000000005758                 db  0Eh
.eh_frame:0000000000005759                 db  18h
.eh_frame:000000000000575A                 db  42h ; B
.eh_frame:000000000000575B                 db  0Eh
.eh_frame:000000000000575C                 db  10h
.eh_frame:000000000000575D                 db  42h ; B
.eh_frame:000000000000575E                 db  0Eh
.eh_frame:000000000000575F                 db    8
.eh_frame:0000000000005760                 db  4Fh ; O
.eh_frame:0000000000005761                 db  0Bh
.eh_frame:0000000000005762                 db  62h ; b
.eh_frame:0000000000005763                 db  0Ah
.eh_frame:0000000000005764                 db  0Eh
.eh_frame:0000000000005765                 db  38h ; 8
.eh_frame:0000000000005766                 db  50h ; P
.eh_frame:0000000000005767                 db  0Eh
.eh_frame:0000000000005768                 db  30h ; 0
.eh_frame:0000000000005769                 db  41h ; A
.eh_frame:000000000000576A                 db  0Eh
.eh_frame:000000000000576B                 db  28h ; (
.eh_frame:000000000000576C                 db  42h ; B
.eh_frame:000000000000576D                 db  0Eh
.eh_frame:000000000000576E                 db  20h
.eh_frame:000000000000576F                 db  42h ; B
.eh_frame:0000000000005770                 db  0Eh
.eh_frame:0000000000005771                 db  18h
.eh_frame:0000000000005772                 db  42h ; B
.eh_frame:0000000000005773                 db  0Eh
.eh_frame:0000000000005774                 db  10h
.eh_frame:0000000000005775                 db  42h ; B
.eh_frame:0000000000005776                 db  0Eh
.eh_frame:0000000000005777                 db    8
.eh_frame:0000000000005778                 db  55h ; U
.eh_frame:0000000000005779                 db  0Bh
.eh_frame:000000000000577A                 db  66h ; f
.eh_frame:000000000000577B                 db  0Eh
.eh_frame:000000000000577C                 db  68h ; h
.eh_frame:000000000000577D                 db  42h ; B
.eh_frame:000000000000577E                 db  0Eh
.eh_frame:000000000000577F                 db  70h ; p
.eh_frame:0000000000005780                 db  5Ch ; \
.eh_frame:0000000000005781                 db  0Eh
.eh_frame:0000000000005782                 db  68h ; h
.eh_frame:0000000000005783                 db  41h ; A
.eh_frame:0000000000005784                 db  0Eh
.eh_frame:0000000000005785                 db  60h ; `
.eh_frame:0000000000005786                 db  44h ; D
.eh_frame:0000000000005787                 db  0Ah
.eh_frame:0000000000005788                 db  0Eh
.eh_frame:0000000000005789                 db  38h ; 8
.eh_frame:000000000000578A                 db  41h ; A
.eh_frame:000000000000578B                 db  0Eh
.eh_frame:000000000000578C                 db  30h ; 0
.eh_frame:000000000000578D                 db  41h ; A
.eh_frame:000000000000578E                 db  0Eh
.eh_frame:000000000000578F                 db  28h ; (
.eh_frame:0000000000005790                 db  42h ; B
.eh_frame:0000000000005791                 db  0Eh
.eh_frame:0000000000005792                 db  20h
.eh_frame:0000000000005793                 db  42h ; B
.eh_frame:0000000000005794                 db  0Eh
.eh_frame:0000000000005795                 db  18h
.eh_frame:0000000000005796                 db  42h ; B
.eh_frame:0000000000005797                 db  0Eh
.eh_frame:0000000000005798                 db  10h
.eh_frame:0000000000005799                 db  42h ; B
.eh_frame:000000000000579A                 db  0Eh
.eh_frame:000000000000579B                 db    8
.eh_frame:000000000000579C                 db  45h ; E
.eh_frame:000000000000579D                 db  0Bh
.eh_frame:000000000000579E                 db  68h ; h
.eh_frame:000000000000579F                 db  0Ah
.eh_frame:00000000000057A0                 db  0Eh
.eh_frame:00000000000057A1                 db  68h ; h
.eh_frame:00000000000057A2                 db  48h ; H
.eh_frame:00000000000057A3                 db  0Bh
.eh_frame:00000000000057A4                 db  72h ; r
.eh_frame:00000000000057A5                 db  0Eh
.eh_frame:00000000000057A6                 db  68h ; h
.eh_frame:00000000000057A7                 db  45h ; E
.eh_frame:00000000000057A8                 db  0Eh
.eh_frame:00000000000057A9                 db  70h ; p
.eh_frame:00000000000057AA                 db  42h ; B
.eh_frame:00000000000057AB                 db  0Eh
.eh_frame:00000000000057AC                 db  78h ; x
.eh_frame:00000000000057AD                 db  42h ; B
.eh_frame:00000000000057AE                 db  0Eh
.eh_frame:00000000000057AF                 db  80h
.eh_frame:00000000000057B0                 db    1
.eh_frame:00000000000057B1                 db  5Eh ; ^
.eh_frame:00000000000057B2                 db  0Eh
.eh_frame:00000000000057B3                 db  60h ; `
.eh_frame:00000000000057B4                 db  44h ; D
.eh_frame:00000000000057B5                 db  0Ah
.eh_frame:00000000000057B6                 db  0Eh
.eh_frame:00000000000057B7                 db  38h ; 8
.eh_frame:00000000000057B8                 db  41h ; A
.eh_frame:00000000000057B9                 db  0Eh
.eh_frame:00000000000057BA                 db  30h ; 0
.eh_frame:00000000000057BB                 db  41h ; A
.eh_frame:00000000000057BC                 db  0Eh
.eh_frame:00000000000057BD                 db  28h ; (
.eh_frame:00000000000057BE                 db  42h ; B
.eh_frame:00000000000057BF                 db  0Eh
.eh_frame:00000000000057C0                 db  20h
.eh_frame:00000000000057C1                 db  42h ; B
.eh_frame:00000000000057C2                 db  0Eh
.eh_frame:00000000000057C3                 db  18h
.eh_frame:00000000000057C4                 db  42h ; B
.eh_frame:00000000000057C5                 db  0Eh
.eh_frame:00000000000057C6                 db  10h
.eh_frame:00000000000057C7                 db  42h ; B
.eh_frame:00000000000057C8                 db  0Eh
.eh_frame:00000000000057C9                 db    8
.eh_frame:00000000000057CA                 db  41h ; A
.eh_frame:00000000000057CB                 db  0Bh
.eh_frame:00000000000057CC                 db  79h ; y
.eh_frame:00000000000057CD                 db  0Ah
.eh_frame:00000000000057CE                 db  0Eh
.eh_frame:00000000000057CF                 db  68h ; h
.eh_frame:00000000000057D0                 db  42h ; B
.eh_frame:00000000000057D1                 db  0Eh
.eh_frame:00000000000057D2                 db  70h ; p
.eh_frame:00000000000057D3                 db  42h ; B
.eh_frame:00000000000057D4                 db  0Eh
.eh_frame:00000000000057D5                 db  78h ; x
.eh_frame:00000000000057D6                 db  42h ; B
.eh_frame:00000000000057D7                 db  0Eh
.eh_frame:00000000000057D8                 db  80h
.eh_frame:00000000000057D9                 db    1
.eh_frame:00000000000057DA                 db  51h ; Q
.eh_frame:00000000000057DB                 db  0Bh
.eh_frame:00000000000057DC                 db  10h
.eh_frame:00000000000057DD                 db    0
.eh_frame:00000000000057DE                 db    0
.eh_frame:00000000000057DF                 db    0
.eh_frame:00000000000057E0                 db 0C0h
.eh_frame:00000000000057E1                 db    6
.eh_frame:00000000000057E2                 db    0
.eh_frame:00000000000057E3                 db    0
.eh_frame:00000000000057E4                 db 0DCh
.eh_frame:00000000000057E5                 db 0E2h
.eh_frame:00000000000057E6                 db 0FFh
.eh_frame:00000000000057E7                 db 0FFh
.eh_frame:00000000000057E8                 db  20h
.eh_frame:00000000000057E9                 db    0
.eh_frame:00000000000057EA                 db    0
.eh_frame:00000000000057EB                 db    0
.eh_frame:00000000000057EC                 db    0
.eh_frame:00000000000057ED                 db    0
.eh_frame:00000000000057EE                 db    0
.eh_frame:00000000000057EF                 db    0
.eh_frame:00000000000057F0                 db  18h
.eh_frame:00000000000057F1                 db    0
.eh_frame:00000000000057F2                 db    0
.eh_frame:00000000000057F3                 db    0
.eh_frame:00000000000057F4                 db 0D4h
.eh_frame:00000000000057F5                 db    6
.eh_frame:00000000000057F6                 db    0
.eh_frame:00000000000057F7                 db    0
.eh_frame:00000000000057F8                 db 0E8h
.eh_frame:00000000000057F9                 db 0E2h
.eh_frame:00000000000057FA                 db 0FFh
.eh_frame:00000000000057FB                 db 0FFh
.eh_frame:00000000000057FC                 db  78h ; x
.eh_frame:00000000000057FD                 db    0
.eh_frame:00000000000057FE                 db    0
.eh_frame:00000000000057FF                 db    0
.eh_frame:0000000000005800                 db    0
.eh_frame:0000000000005801                 db  44h ; D
.eh_frame:0000000000005802                 db  0Eh
.eh_frame:0000000000005803                 db  70h ; p
.eh_frame:0000000000005804                 db    2
.eh_frame:0000000000005805                 db  60h ; `
.eh_frame:0000000000005806                 db  0Ah
.eh_frame:0000000000005807                 db  0Eh
.eh_frame:0000000000005808                 db    8
.eh_frame:0000000000005809                 db  41h ; A
.eh_frame:000000000000580A                 db  0Bh
.eh_frame:000000000000580B                 db    0
.eh_frame:000000000000580C                 db  28h ; (
.eh_frame:000000000000580D                 db    0
.eh_frame:000000000000580E                 db    0
.eh_frame:000000000000580F                 db    0
.eh_frame:0000000000005810                 db 0F0h
.eh_frame:0000000000005811                 db    6
.eh_frame:0000000000005812                 db    0
.eh_frame:0000000000005813                 db    0
.eh_frame:0000000000005814                 db  4Ch ; L
.eh_frame:0000000000005815                 db 0E3h
.eh_frame:0000000000005816                 db 0FFh
.eh_frame:0000000000005817                 db 0FFh
.eh_frame:0000000000005818                 db 0D5h
.eh_frame:0000000000005819                 db    0
.eh_frame:000000000000581A                 db    0
.eh_frame:000000000000581B                 db    0
.eh_frame:000000000000581C                 db    0
.eh_frame:000000000000581D                 db  41h ; A
.eh_frame:000000000000581E                 db  0Eh
.eh_frame:000000000000581F                 db  10h
.eh_frame:0000000000005820                 db  86h
.eh_frame:0000000000005821                 db    2
.eh_frame:0000000000005822                 db  41h ; A
.eh_frame:0000000000005823                 db  0Eh
.eh_frame:0000000000005824                 db  18h
.eh_frame:0000000000005825                 db  83h
.eh_frame:0000000000005826                 db    3
.eh_frame:0000000000005827                 db  50h ; P
.eh_frame:0000000000005828                 db  0Eh
.eh_frame:0000000000005829                 db 0D0h
.eh_frame:000000000000582A                 db    1
.eh_frame:000000000000582B                 db    2
.eh_frame:000000000000582C                 db 0ABh
.eh_frame:000000000000582D                 db  0Ah
.eh_frame:000000000000582E                 db  0Eh
.eh_frame:000000000000582F                 db  18h
.eh_frame:0000000000005830                 db  41h ; A
.eh_frame:0000000000005831                 db  0Eh
.eh_frame:0000000000005832                 db  10h
.eh_frame:0000000000005833                 db  41h ; A
.eh_frame:0000000000005834                 db  0Eh
.eh_frame:0000000000005835                 db    8
.eh_frame:0000000000005836                 db  41h ; A
.eh_frame:0000000000005837                 db  0Bh
.eh_frame:0000000000005838                 db  1Ch
.eh_frame:0000000000005839                 db    0
.eh_frame:000000000000583A                 db    0
.eh_frame:000000000000583B                 db    0
.eh_frame:000000000000583C                 db  1Ch
.eh_frame:000000000000583D                 db    7
.eh_frame:000000000000583E                 db    0
.eh_frame:000000000000583F                 db    0
.eh_frame:0000000000005840                 db    0
.eh_frame:0000000000005841                 db 0E4h
.eh_frame:0000000000005842                 db 0FFh
.eh_frame:0000000000005843                 db 0FFh
.eh_frame:0000000000005844                 db  80h
.eh_frame:0000000000005845                 db    0
.eh_frame:0000000000005846                 db    0
.eh_frame:0000000000005847                 db    0
.eh_frame:0000000000005848                 db    0
.eh_frame:0000000000005849                 db  41h ; A
.eh_frame:000000000000584A                 db  0Eh
.eh_frame:000000000000584B                 db  10h
.eh_frame:000000000000584C                 db  83h
.eh_frame:000000000000584D                 db    2
.eh_frame:000000000000584E                 db    2
.eh_frame:000000000000584F                 db  7Ah ; z
.eh_frame:0000000000005850                 db  0Eh
.eh_frame:0000000000005851                 db    8
.eh_frame:0000000000005852                 db    0
.eh_frame:0000000000005853                 db    0
.eh_frame:0000000000005854                 db    0
.eh_frame:0000000000005855                 db    0
.eh_frame:0000000000005856                 db    0
.eh_frame:0000000000005857                 db    0
.eh_frame:0000000000005858                 db  18h
.eh_frame:0000000000005859                 db    0
.eh_frame:000000000000585A                 db    0
.eh_frame:000000000000585B                 db    0
.eh_frame:000000000000585C                 db  3Ch ; <
.eh_frame:000000000000585D                 db    7
.eh_frame:000000000000585E                 db    0
.eh_frame:000000000000585F                 db    0
.eh_frame:0000000000005860                 db  60h ; `
.eh_frame:0000000000005861                 db 0E4h
.eh_frame:0000000000005862                 db 0FFh
.eh_frame:0000000000005863                 db 0FFh
.eh_frame:0000000000005864                 db  1Ah
.eh_frame:0000000000005865                 db    0
.eh_frame:0000000000005866                 db    0
.eh_frame:0000000000005867                 db    0
.eh_frame:0000000000005868                 db    0
.eh_frame:0000000000005869                 db  41h ; A
.eh_frame:000000000000586A                 db  0Eh
.eh_frame:000000000000586B                 db  10h
.eh_frame:000000000000586C                 db  83h
.eh_frame:000000000000586D                 db    2
.eh_frame:000000000000586E                 db  53h ; S
.eh_frame:000000000000586F                 db  0Ah
.eh_frame:0000000000005870                 db  0Eh
.eh_frame:0000000000005871                 db    8
.eh_frame:0000000000005872                 db  41h ; A
.eh_frame:0000000000005873                 db  0Bh
.eh_frame:0000000000005874                 db  10h
.eh_frame:0000000000005875                 db    0
.eh_frame:0000000000005876                 db    0
.eh_frame:0000000000005877                 db    0
.eh_frame:0000000000005878                 db  58h ; X
.eh_frame:0000000000005879                 db    7
.eh_frame:000000000000587A                 db    0
.eh_frame:000000000000587B                 db    0
.eh_frame:000000000000587C                 db  64h ; d
.eh_frame:000000000000587D                 db 0E4h
.eh_frame:000000000000587E                 db 0FFh
.eh_frame:000000000000587F                 db 0FFh
.eh_frame:0000000000005880                 db  24h ; $
.eh_frame:0000000000005881                 db    0
.eh_frame:0000000000005882                 db    0
.eh_frame:0000000000005883                 db    0
.eh_frame:0000000000005884                 db    0
.eh_frame:0000000000005885                 db  5Fh ; _
.eh_frame:0000000000005886                 db  0Eh
.eh_frame:0000000000005887                 db  10h
.eh_frame:0000000000005888                 db  10h
.eh_frame:0000000000005889                 db    0
.eh_frame:000000000000588A                 db    0
.eh_frame:000000000000588B                 db    0
.eh_frame:000000000000588C                 db  6Ch ; l
.eh_frame:000000000000588D                 db    7
.eh_frame:000000000000588E                 db    0
.eh_frame:000000000000588F                 db    0
.eh_frame:0000000000005890                 db  80h
.eh_frame:0000000000005891                 db 0E4h
.eh_frame:0000000000005892                 db 0FFh
.eh_frame:0000000000005893                 db 0FFh
.eh_frame:0000000000005894                 db    2
.eh_frame:0000000000005895                 db    0
.eh_frame:0000000000005896                 db    0
.eh_frame:0000000000005897                 db    0
.eh_frame:0000000000005898                 db    0
.eh_frame:0000000000005899                 db    0
.eh_frame:000000000000589A                 db    0
.eh_frame:000000000000589B                 db    0
.eh_frame:000000000000589C                 db  20h
.eh_frame:000000000000589D                 db    0
.eh_frame:000000000000589E                 db    0
.eh_frame:000000000000589F                 db    0
.eh_frame:00000000000058A0                 db  80h
.eh_frame:00000000000058A1                 db    7
.eh_frame:00000000000058A2                 db    0
.eh_frame:00000000000058A3                 db    0
.eh_frame:00000000000058A4                 db  7Ch ; |
.eh_frame:00000000000058A5                 db 0E4h
.eh_frame:00000000000058A6                 db 0FFh
.eh_frame:00000000000058A7                 db 0FFh
.eh_frame:00000000000058A8                 db  36h ; 6
.eh_frame:00000000000058A9                 db    0
.eh_frame:00000000000058AA                 db    0
.eh_frame:00000000000058AB                 db    0
.eh_frame:00000000000058AC                 db    0
.eh_frame:00000000000058AD                 db  44h ; D
.eh_frame:00000000000058AE                 db  0Eh
.eh_frame:00000000000058AF                 db  10h
.eh_frame:00000000000058B0                 db  83h
.eh_frame:00000000000058B1                 db    2
.eh_frame:00000000000058B2                 db  5Dh ; ]
.eh_frame:00000000000058B3                 db  0Ah
.eh_frame:00000000000058B4                 db  0Eh
.eh_frame:00000000000058B5                 db    8
.eh_frame:00000000000058B6                 db  47h ; G
.eh_frame:00000000000058B7                 db  0Bh
.eh_frame:00000000000058B8                 db  48h ; H
.eh_frame:00000000000058B9                 db  0Ah
.eh_frame:00000000000058BA                 db  0Eh
.eh_frame:00000000000058BB                 db    8
.eh_frame:00000000000058BC                 db  41h ; A
.eh_frame:00000000000058BD                 db  0Bh
.eh_frame:00000000000058BE                 db    0
.eh_frame:00000000000058BF                 db    0
.eh_frame:00000000000058C0                 db  10h
.eh_frame:00000000000058C1                 db    0
.eh_frame:00000000000058C2                 db    0
.eh_frame:00000000000058C3                 db    0
.eh_frame:00000000000058C4                 db 0A4h
.eh_frame:00000000000058C5                 db    7
.eh_frame:00000000000058C6                 db    0
.eh_frame:00000000000058C7                 db    0
.eh_frame:00000000000058C8                 db  98h
.eh_frame:00000000000058C9                 db 0E4h
.eh_frame:00000000000058CA                 db 0FFh
.eh_frame:00000000000058CB                 db 0FFh
.eh_frame:00000000000058CC                 db  24h ; $
.eh_frame:00000000000058CD                 db    0
.eh_frame:00000000000058CE                 db    0
.eh_frame:00000000000058CF                 db    0
.eh_frame:00000000000058D0                 db    0
.eh_frame:00000000000058D1                 db  5Fh ; _
.eh_frame:00000000000058D2                 db  0Eh
.eh_frame:00000000000058D3                 db  10h
.eh_frame:00000000000058D4                 db  14h
.eh_frame:00000000000058D5                 db    0
.eh_frame:00000000000058D6                 db    0
.eh_frame:00000000000058D7                 db    0
.eh_frame:00000000000058D8                 db 0B8h
.eh_frame:00000000000058D9                 db    7
.eh_frame:00000000000058DA                 db    0
.eh_frame:00000000000058DB                 db    0
.eh_frame:00000000000058DC                 db 0B4h
.eh_frame:00000000000058DD                 db 0E4h
.eh_frame:00000000000058DE                 db 0FFh
.eh_frame:00000000000058DF                 db 0FFh
.eh_frame:00000000000058E0                 db  82h
.eh_frame:00000000000058E1                 db    0
.eh_frame:00000000000058E2                 db    0
.eh_frame:00000000000058E3                 db    0
.eh_frame:00000000000058E4                 db    0
.eh_frame:00000000000058E5                 db    2
.eh_frame:00000000000058E6                 db  5Fh ; _
.eh_frame:00000000000058E7                 db  0Eh
.eh_frame:00000000000058E8                 db  10h
.eh_frame:00000000000058E9                 db  49h ; I
.eh_frame:00000000000058EA                 db  0Eh
.eh_frame:00000000000058EB                 db    8
.eh_frame:00000000000058EC                 db  14h
.eh_frame:00000000000058ED                 db    0
.eh_frame:00000000000058EE                 db    0
.eh_frame:00000000000058EF                 db    0
.eh_frame:00000000000058F0                 db 0D0h
.eh_frame:00000000000058F1                 db    7
.eh_frame:00000000000058F2                 db    0
.eh_frame:00000000000058F3                 db    0
.eh_frame:00000000000058F4                 db  2Ch ; ,
.eh_frame:00000000000058F5                 db 0E5h
.eh_frame:00000000000058F6                 db 0FFh
.eh_frame:00000000000058F7                 db 0FFh
.eh_frame:00000000000058F8                 db  4Ah ; J
.eh_frame:00000000000058F9                 db    0
.eh_frame:00000000000058FA                 db    0
.eh_frame:00000000000058FB                 db    0
.eh_frame:00000000000058FC                 db    0
.eh_frame:00000000000058FD                 db    2
.eh_frame:00000000000058FE                 db  45h ; E
.eh_frame:00000000000058FF                 db  0Eh
.eh_frame:0000000000005900                 db  10h
.eh_frame:0000000000005901                 db    0
.eh_frame:0000000000005902                 db    0
.eh_frame:0000000000005903                 db    0
.eh_frame:0000000000005904                 db  18h
.eh_frame:0000000000005905                 db    0
.eh_frame:0000000000005906                 db    0
.eh_frame:0000000000005907                 db    0
.eh_frame:0000000000005908                 db 0E8h
.eh_frame:0000000000005909                 db    7
.eh_frame:000000000000590A                 db    0
.eh_frame:000000000000590B                 db    0
.eh_frame:000000000000590C                 db  64h ; d
.eh_frame:000000000000590D                 db 0E5h
.eh_frame:000000000000590E                 db 0FFh
.eh_frame:000000000000590F                 db 0FFh
.eh_frame:0000000000005910                 db  17h
.eh_frame:0000000000005911                 db    0
.eh_frame:0000000000005912                 db    0
.eh_frame:0000000000005913                 db    0
.eh_frame:0000000000005914                 db    0
.eh_frame:0000000000005915                 db  41h ; A
.eh_frame:0000000000005916                 db  0Eh
.eh_frame:0000000000005917                 db  10h
.eh_frame:0000000000005918                 db  83h
.eh_frame:0000000000005919                 db    2
.eh_frame:000000000000591A                 db  51h ; Q
.eh_frame:000000000000591B                 db  0Eh
.eh_frame:000000000000591C                 db    8
.eh_frame:000000000000591D                 db    0
.eh_frame:000000000000591E                 db    0
.eh_frame:000000000000591F                 db    0
.eh_frame:0000000000005920                 db  18h
.eh_frame:0000000000005921                 db    0
.eh_frame:0000000000005922                 db    0
.eh_frame:0000000000005923                 db    0
.eh_frame:0000000000005924                 db    4
.eh_frame:0000000000005925                 db    8
.eh_frame:0000000000005926                 db    0
.eh_frame:0000000000005927                 db    0
.eh_frame:0000000000005928                 db  68h ; h
.eh_frame:0000000000005929                 db 0E5h
.eh_frame:000000000000592A                 db 0FFh
.eh_frame:000000000000592B                 db 0FFh
.eh_frame:000000000000592C                 db  2Eh ; .
.eh_frame:000000000000592D                 db    0
.eh_frame:000000000000592E                 db    0
.eh_frame:000000000000592F                 db    0
.eh_frame:0000000000005930                 db    0
.eh_frame:0000000000005931                 db  47h ; G
.eh_frame:0000000000005932                 db  0Eh
.eh_frame:0000000000005933                 db  10h
.eh_frame:0000000000005934                 db  61h ; a
.eh_frame:0000000000005935                 db  0Ah
.eh_frame:0000000000005936                 db  0Eh
.eh_frame:0000000000005937                 db    8
.eh_frame:0000000000005938                 db  41h ; A
.eh_frame:0000000000005939                 db  0Bh
.eh_frame:000000000000593A                 db    0
.eh_frame:000000000000593B                 db    0
.eh_frame:000000000000593C                 db  24h ; $
.eh_frame:000000000000593D                 db    0
.eh_frame:000000000000593E                 db    0
.eh_frame:000000000000593F                 db    0
.eh_frame:0000000000005940                 db  20h
.eh_frame:0000000000005941                 db    8
.eh_frame:0000000000005942                 db    0
.eh_frame:0000000000005943                 db    0
.eh_frame:0000000000005944                 db  7Ch ; |
.eh_frame:0000000000005945                 db 0E5h
.eh_frame:0000000000005946                 db 0FFh
.eh_frame:0000000000005947                 db 0FFh
.eh_frame:0000000000005948                 db  28h ; (
.eh_frame:0000000000005949                 db    0
.eh_frame:000000000000594A                 db    0
.eh_frame:000000000000594B                 db    0
.eh_frame:000000000000594C                 db    0
.eh_frame:000000000000594D                 db  41h ; A
.eh_frame:000000000000594E                 db  0Eh
.eh_frame:000000000000594F                 db  10h
.eh_frame:0000000000005950                 db  86h
.eh_frame:0000000000005951                 db    2
.eh_frame:0000000000005952                 db  41h ; A
.eh_frame:0000000000005953                 db  0Eh
.eh_frame:0000000000005954                 db  18h
.eh_frame:0000000000005955                 db  83h
.eh_frame:0000000000005956                 db    3
.eh_frame:0000000000005957                 db  4Dh ; M
.eh_frame:0000000000005958                 db  0Eh
.eh_frame:0000000000005959                 db  20h
.eh_frame:000000000000595A                 db  49h ; I
.eh_frame:000000000000595B                 db  0Eh
.eh_frame:000000000000595C                 db  18h
.eh_frame:000000000000595D                 db  47h ; G
.eh_frame:000000000000595E                 db  0Eh
.eh_frame:000000000000595F                 db  10h
.eh_frame:0000000000005960                 db  41h ; A
.eh_frame:0000000000005961                 db  0Eh
.eh_frame:0000000000005962                 db    8
.eh_frame:0000000000005963                 db    0
.eh_frame:0000000000005964                 db  18h
.eh_frame:0000000000005965                 db    0
.eh_frame:0000000000005966                 db    0
.eh_frame:0000000000005967                 db    0
.eh_frame:0000000000005968                 db  48h ; H
.eh_frame:0000000000005969                 db    8
.eh_frame:000000000000596A                 db    0
.eh_frame:000000000000596B                 db    0
.eh_frame:000000000000596C                 db  84h
.eh_frame:000000000000596D                 db 0E5h
.eh_frame:000000000000596E                 db 0FFh
.eh_frame:000000000000596F                 db 0FFh
.eh_frame:0000000000005970                 db  13h
.eh_frame:0000000000005971                 db    0
.eh_frame:0000000000005972                 db    0
.eh_frame:0000000000005973                 db    0
.eh_frame:0000000000005974                 db    0
.eh_frame:0000000000005975                 db  41h ; A
.eh_frame:0000000000005976                 db  0Eh
.eh_frame:0000000000005977                 db  10h
.eh_frame:0000000000005978                 db  83h
.eh_frame:0000000000005979                 db    2
.eh_frame:000000000000597A                 db  50h ; P
.eh_frame:000000000000597B                 db  0Eh
.eh_frame:000000000000597C                 db    8
.eh_frame:000000000000597D                 db    0
.eh_frame:000000000000597E                 db    0
.eh_frame:000000000000597F                 db    0
.eh_frame:0000000000005980                 db  14h
.eh_frame:0000000000005981                 db    0
.eh_frame:0000000000005982                 db    0
.eh_frame:0000000000005983                 db    0
.eh_frame:0000000000005984                 db  64h ; d
.eh_frame:0000000000005985                 db    8
.eh_frame:0000000000005986                 db    0
.eh_frame:0000000000005987                 db    0
.eh_frame:0000000000005988                 db  88h
.eh_frame:0000000000005989                 db 0E5h
.eh_frame:000000000000598A                 db 0FFh
.eh_frame:000000000000598B                 db 0FFh
.eh_frame:000000000000598C                 db  35h ; 5
.eh_frame:000000000000598D                 db    0
.eh_frame:000000000000598E                 db    0
.eh_frame:000000000000598F                 db    0
.eh_frame:0000000000005990                 db    0
.eh_frame:0000000000005991                 db  4Bh ; K
.eh_frame:0000000000005992                 db  0Eh
.eh_frame:0000000000005993                 db  10h
.eh_frame:0000000000005994                 db    0
.eh_frame:0000000000005995                 db    0
.eh_frame:0000000000005996                 db    0
.eh_frame:0000000000005997                 db    0
.eh_frame:0000000000005998                 db  3Ch ; <
.eh_frame:0000000000005999                 db    0
.eh_frame:000000000000599A                 db    0
.eh_frame:000000000000599B                 db    0
.eh_frame:000000000000599C                 db  7Ch ; |
.eh_frame:000000000000599D                 db    8
.eh_frame:000000000000599E                 db    0
.eh_frame:000000000000599F                 db    0
.eh_frame:00000000000059A0                 db 0B0h
.eh_frame:00000000000059A1                 db 0E5h
.eh_frame:00000000000059A2                 db 0FFh
.eh_frame:00000000000059A3                 db 0FFh
.eh_frame:00000000000059A4                 db  83h
.eh_frame:00000000000059A5                 db    0
.eh_frame:00000000000059A6                 db    0
.eh_frame:00000000000059A7                 db    0
.eh_frame:00000000000059A8                 db    0
.eh_frame:00000000000059A9                 db  42h ; B
.eh_frame:00000000000059AA                 db  0Eh
.eh_frame:00000000000059AB                 db  10h
.eh_frame:00000000000059AC                 db  8Dh
.eh_frame:00000000000059AD                 db    2
.eh_frame:00000000000059AE                 db  42h ; B
.eh_frame:00000000000059AF                 db  0Eh
.eh_frame:00000000000059B0                 db  18h
.eh_frame:00000000000059B1                 db  8Ch
.eh_frame:00000000000059B2                 db    3
.eh_frame:00000000000059B3                 db  44h ; D
.eh_frame:00000000000059B4                 db  0Eh
.eh_frame:00000000000059B5                 db  20h
.eh_frame:00000000000059B6                 db  86h
.eh_frame:00000000000059B7                 db    4
.eh_frame:00000000000059B8                 db  41h ; A
.eh_frame:00000000000059B9                 db  0Eh
.eh_frame:00000000000059BA                 db  28h ; (
.eh_frame:00000000000059BB                 db  83h
.eh_frame:00000000000059BC                 db    5
.eh_frame:00000000000059BD                 db  4Ah ; J
.eh_frame:00000000000059BE                 db  0Eh
.eh_frame:00000000000059BF                 db  40h ; @
.eh_frame:00000000000059C0                 db    2
.eh_frame:00000000000059C1                 db  64h ; d
.eh_frame:00000000000059C2                 db  0Ah
.eh_frame:00000000000059C3                 db  0Eh
.eh_frame:00000000000059C4                 db  28h ; (
.eh_frame:00000000000059C5                 db  41h ; A
.eh_frame:00000000000059C6                 db  0Eh
.eh_frame:00000000000059C7                 db  20h
.eh_frame:00000000000059C8                 db  41h ; A
.eh_frame:00000000000059C9                 db  0Eh
.eh_frame:00000000000059CA                 db  18h
.eh_frame:00000000000059CB                 db  42h ; B
.eh_frame:00000000000059CC                 db  0Eh
.eh_frame:00000000000059CD                 db  10h
.eh_frame:00000000000059CE                 db  42h ; B
.eh_frame:00000000000059CF                 db  0Eh
.eh_frame:00000000000059D0                 db    8
.eh_frame:00000000000059D1                 db  41h ; A
.eh_frame:00000000000059D2                 db  0Bh
.eh_frame:00000000000059D3                 db    0
.eh_frame:00000000000059D4                 db    0
.eh_frame:00000000000059D5                 db    0
.eh_frame:00000000000059D6                 db    0
.eh_frame:00000000000059D7                 db    0
.eh_frame:00000000000059D8                 db  4Ch ; L
.eh_frame:00000000000059D9                 db    0
.eh_frame:00000000000059DA                 db    0
.eh_frame:00000000000059DB                 db    0
.eh_frame:00000000000059DC                 db 0BCh
.eh_frame:00000000000059DD                 db    8
.eh_frame:00000000000059DE                 db    0
.eh_frame:00000000000059DF                 db    0
.eh_frame:00000000000059E0                 db    0
.eh_frame:00000000000059E1                 db 0E6h
.eh_frame:00000000000059E2                 db 0FFh
.eh_frame:00000000000059E3                 db 0FFh
.eh_frame:00000000000059E4                 db  7Dh ; }
.eh_frame:00000000000059E5                 db    0
.eh_frame:00000000000059E6                 db    0
.eh_frame:00000000000059E7                 db    0
.eh_frame:00000000000059E8                 db    0
.eh_frame:00000000000059E9                 db  42h ; B
.eh_frame:00000000000059EA                 db  0Eh
.eh_frame:00000000000059EB                 db  10h
.eh_frame:00000000000059EC                 db  8Ch
.eh_frame:00000000000059ED                 db    2
.eh_frame:00000000000059EE                 db  41h ; A
.eh_frame:00000000000059EF                 db  0Eh
.eh_frame:00000000000059F0                 db  18h
.eh_frame:00000000000059F1                 db  86h
.eh_frame:00000000000059F2                 db    3
.eh_frame:00000000000059F3                 db  44h ; D
.eh_frame:00000000000059F4                 db  0Eh
.eh_frame:00000000000059F5                 db  20h
.eh_frame:00000000000059F6                 db  83h
.eh_frame:00000000000059F7                 db    4
.eh_frame:00000000000059F8                 db  69h ; i
.eh_frame:00000000000059F9                 db  0Ah
.eh_frame:00000000000059FA                 db  0Eh
.eh_frame:00000000000059FB                 db  18h
.eh_frame:00000000000059FC                 db  41h ; A
.eh_frame:00000000000059FD                 db  0Eh
.eh_frame:00000000000059FE                 db  10h
.eh_frame:00000000000059FF                 db  42h ; B
.eh_frame:0000000000005A00                 db  0Eh
.eh_frame:0000000000005A01                 db    8
.eh_frame:0000000000005A02                 db  45h ; E
.eh_frame:0000000000005A03                 db  0Bh
.eh_frame:0000000000005A04                 db  55h ; U
.eh_frame:0000000000005A05                 db  0Ah
.eh_frame:0000000000005A06                 db  0Eh
.eh_frame:0000000000005A07                 db  18h
.eh_frame:0000000000005A08                 db  41h ; A
.eh_frame:0000000000005A09                 db  0Eh
.eh_frame:0000000000005A0A                 db  10h
.eh_frame:0000000000005A0B                 db  42h ; B
.eh_frame:0000000000005A0C                 db  0Eh
.eh_frame:0000000000005A0D                 db    8
.eh_frame:0000000000005A0E                 db  48h ; H
.eh_frame:0000000000005A0F                 db  0Bh
.eh_frame:0000000000005A10                 db  41h ; A
.eh_frame:0000000000005A11                 db  0Ah
.eh_frame:0000000000005A12                 db  0Eh
.eh_frame:0000000000005A13                 db  18h
.eh_frame:0000000000005A14                 db  46h ; F
.eh_frame:0000000000005A15                 db  0Eh
.eh_frame:0000000000005A16                 db  10h
.eh_frame:0000000000005A17                 db  42h ; B
.eh_frame:0000000000005A18                 db  0Eh
.eh_frame:0000000000005A19                 db    8
.eh_frame:0000000000005A1A                 db  47h ; G
.eh_frame:0000000000005A1B                 db  0Bh
.eh_frame:0000000000005A1C                 db  49h ; I
.eh_frame:0000000000005A1D                 db  0Eh
.eh_frame:0000000000005A1E                 db  18h
.eh_frame:0000000000005A1F                 db  41h ; A
.eh_frame:0000000000005A20                 db  0Eh
.eh_frame:0000000000005A21                 db  10h
.eh_frame:0000000000005A22                 db  42h ; B
.eh_frame:0000000000005A23                 db  0Eh
.eh_frame:0000000000005A24                 db    8
.eh_frame:0000000000005A25                 db    0
.eh_frame:0000000000005A26                 db    0
.eh_frame:0000000000005A27                 db    0
.eh_frame:0000000000005A28                 db  1Ch
.eh_frame:0000000000005A29                 db    0
.eh_frame:0000000000005A2A                 db    0
.eh_frame:0000000000005A2B                 db    0
.eh_frame:0000000000005A2C                 db  0Ch
.eh_frame:0000000000005A2D                 db    9
.eh_frame:0000000000005A2E                 db    0
.eh_frame:0000000000005A2F                 db    0
.eh_frame:0000000000005A30                 db  30h ; 0
.eh_frame:0000000000005A31                 db 0E6h
.eh_frame:0000000000005A32                 db 0FFh
.eh_frame:0000000000005A33                 db 0FFh
.eh_frame:0000000000005A34                 db  60h ; `
.eh_frame:0000000000005A35                 db    0
.eh_frame:0000000000005A36                 db    0
.eh_frame:0000000000005A37                 db    0
.eh_frame:0000000000005A38                 db    0
.eh_frame:0000000000005A39                 db  44h ; D
.eh_frame:0000000000005A3A                 db  0Eh
.eh_frame:0000000000005A3B                 db  10h
.eh_frame:0000000000005A3C                 db  75h ; u
.eh_frame:0000000000005A3D                 db  0Ah
.eh_frame:0000000000005A3E                 db  0Eh
.eh_frame:0000000000005A3F                 db    8
.eh_frame:0000000000005A40                 db  47h ; G
.eh_frame:0000000000005A41                 db  0Bh
.eh_frame:0000000000005A42                 db  5Fh ; _
.eh_frame:0000000000005A43                 db  0Eh
.eh_frame:0000000000005A44                 db    8
.eh_frame:0000000000005A45                 db    0
.eh_frame:0000000000005A46                 db    0
.eh_frame:0000000000005A47                 db    0
.eh_frame:0000000000005A48                 db  1Ch
.eh_frame:0000000000005A49                 db    0
.eh_frame:0000000000005A4A                 db    0
.eh_frame:0000000000005A4B                 db    0
.eh_frame:0000000000005A4C                 db  2Ch ; ,
.eh_frame:0000000000005A4D                 db    9
.eh_frame:0000000000005A4E                 db    0
.eh_frame:0000000000005A4F                 db    0
.eh_frame:0000000000005A50                 db  70h ; p
.eh_frame:0000000000005A51                 db 0E6h
.eh_frame:0000000000005A52                 db 0FFh
.eh_frame:0000000000005A53                 db 0FFh
.eh_frame:0000000000005A54                 db  3Ch ; <
.eh_frame:0000000000005A55                 db    0
.eh_frame:0000000000005A56                 db    0
.eh_frame:0000000000005A57                 db    0
.eh_frame:0000000000005A58                 db    0
.eh_frame:0000000000005A59                 db  44h ; D
.eh_frame:0000000000005A5A                 db  0Eh
.eh_frame:0000000000005A5B                 db  10h
.eh_frame:0000000000005A5C                 db  61h ; a
.eh_frame:0000000000005A5D                 db  0Ah
.eh_frame:0000000000005A5E                 db  0Eh
.eh_frame:0000000000005A5F                 db    8
.eh_frame:0000000000005A60                 db  4Bh ; K
.eh_frame:0000000000005A61                 db  0Bh
.eh_frame:0000000000005A62                 db  4Bh ; K
.eh_frame:0000000000005A63                 db  0Eh
.eh_frame:0000000000005A64                 db    8
.eh_frame:0000000000005A65                 db    0
.eh_frame:0000000000005A66                 db    0
.eh_frame:0000000000005A67                 db    0
.eh_frame:0000000000005A68                 db  34h ; 4
.eh_frame:0000000000005A69                 db    0
.eh_frame:0000000000005A6A                 db    0
.eh_frame:0000000000005A6B                 db    0
.eh_frame:0000000000005A6C                 db  4Ch ; L
.eh_frame:0000000000005A6D                 db    9
.eh_frame:0000000000005A6E                 db    0
.eh_frame:0000000000005A6F                 db    0
.eh_frame:0000000000005A70                 db  90h
.eh_frame:0000000000005A71                 db 0E6h
.eh_frame:0000000000005A72                 db 0FFh
.eh_frame:0000000000005A73                 db 0FFh
.eh_frame:0000000000005A74                 db  7Bh ; {
.eh_frame:0000000000005A75                 db    0
.eh_frame:0000000000005A76                 db    0
.eh_frame:0000000000005A77                 db    0
.eh_frame:0000000000005A78                 db    0
.eh_frame:0000000000005A79                 db  42h ; B
.eh_frame:0000000000005A7A                 db  0Eh
.eh_frame:0000000000005A7B                 db  10h
.eh_frame:0000000000005A7C                 db  8Ch
.eh_frame:0000000000005A7D                 db    2
.eh_frame:0000000000005A7E                 db  41h ; A
.eh_frame:0000000000005A7F                 db  0Eh
.eh_frame:0000000000005A80                 db  18h
.eh_frame:0000000000005A81                 db  86h
.eh_frame:0000000000005A82                 db    3
.eh_frame:0000000000005A83                 db  41h ; A
.eh_frame:0000000000005A84                 db  0Eh
.eh_frame:0000000000005A85                 db  20h
.eh_frame:0000000000005A86                 db  83h
.eh_frame:0000000000005A87                 db    4
.eh_frame:0000000000005A88                 db  7Dh ; }
.eh_frame:0000000000005A89                 db  0Ah
.eh_frame:0000000000005A8A                 db  0Eh
.eh_frame:0000000000005A8B                 db  18h
.eh_frame:0000000000005A8C                 db  41h ; A
.eh_frame:0000000000005A8D                 db  0Eh
.eh_frame:0000000000005A8E                 db  10h
.eh_frame:0000000000005A8F                 db  42h ; B
.eh_frame:0000000000005A90                 db  0Eh
.eh_frame:0000000000005A91                 db    8
.eh_frame:0000000000005A92                 db  44h ; D
.eh_frame:0000000000005A93                 db  0Bh
.eh_frame:0000000000005A94                 db  60h ; `
.eh_frame:0000000000005A95                 db  0Ah
.eh_frame:0000000000005A96                 db  0Eh
.eh_frame:0000000000005A97                 db  18h
.eh_frame:0000000000005A98                 db  41h ; A
.eh_frame:0000000000005A99                 db  0Eh
.eh_frame:0000000000005A9A                 db  10h
.eh_frame:0000000000005A9B                 db  42h ; B
.eh_frame:0000000000005A9C                 db  0Eh
.eh_frame:0000000000005A9D                 db    8
.eh_frame:0000000000005A9E                 db  45h ; E
.eh_frame:0000000000005A9F                 db  0Bh
.eh_frame:0000000000005AA0                 db  1Ch
.eh_frame:0000000000005AA1                 db    0
.eh_frame:0000000000005AA2                 db    0
.eh_frame:0000000000005AA3                 db    0
.eh_frame:0000000000005AA4                 db  84h
.eh_frame:0000000000005AA5                 db    9
.eh_frame:0000000000005AA6                 db    0
.eh_frame:0000000000005AA7                 db    0
.eh_frame:0000000000005AA8                 db 0D8h
.eh_frame:0000000000005AA9                 db 0E6h
.eh_frame:0000000000005AAA                 db 0FFh
.eh_frame:0000000000005AAB                 db 0FFh
.eh_frame:0000000000005AAC                 db  40h ; @
.eh_frame:0000000000005AAD                 db    0
.eh_frame:0000000000005AAE                 db    0
.eh_frame:0000000000005AAF                 db    0
.eh_frame:0000000000005AB0                 db    0
.eh_frame:0000000000005AB1                 db  44h ; D
.eh_frame:0000000000005AB2                 db  0Eh
.eh_frame:0000000000005AB3                 db  10h
.eh_frame:0000000000005AB4                 db  83h
.eh_frame:0000000000005AB5                 db    2
.eh_frame:0000000000005AB6                 db  5Ah ; Z
.eh_frame:0000000000005AB7                 db  0Ah
.eh_frame:0000000000005AB8                 db  0Eh
.eh_frame:0000000000005AB9                 db    8
.eh_frame:0000000000005ABA                 db  4Ah ; J
.eh_frame:0000000000005ABB                 db  0Bh
.eh_frame:0000000000005ABC                 db  53h ; S
.eh_frame:0000000000005ABD                 db  0Eh
.eh_frame:0000000000005ABE                 db    8
.eh_frame:0000000000005ABF                 db    0
.eh_frame:0000000000005AC0                 db  2Ch ; ,
.eh_frame:0000000000005AC1                 db    0
.eh_frame:0000000000005AC2                 db    0
.eh_frame:0000000000005AC3                 db    0
.eh_frame:0000000000005AC4                 db 0A4h
.eh_frame:0000000000005AC5                 db    9
.eh_frame:0000000000005AC6                 db    0
.eh_frame:0000000000005AC7                 db    0
.eh_frame:0000000000005AC8                 db 0F8h
.eh_frame:0000000000005AC9                 db 0E6h
.eh_frame:0000000000005ACA                 db 0FFh
.eh_frame:0000000000005ACB                 db 0FFh
.eh_frame:0000000000005ACC                 db  57h ; W
.eh_frame:0000000000005ACD                 db    0
.eh_frame:0000000000005ACE                 db    0
.eh_frame:0000000000005ACF                 db    0
.eh_frame:0000000000005AD0                 db    0
.eh_frame:0000000000005AD1                 db  63h ; c
.eh_frame:0000000000005AD2                 db  0Eh
.eh_frame:0000000000005AD3                 db  10h
.eh_frame:0000000000005AD4                 db  8Ch
.eh_frame:0000000000005AD5                 db    2
.eh_frame:0000000000005AD6                 db  41h ; A
.eh_frame:0000000000005AD7                 db  0Eh
.eh_frame:0000000000005AD8                 db  18h
.eh_frame:0000000000005AD9                 db  86h
.eh_frame:0000000000005ADA                 db    3
.eh_frame:0000000000005ADB                 db  44h ; D
.eh_frame:0000000000005ADC                 db  0Eh
.eh_frame:0000000000005ADD                 db  20h
.eh_frame:0000000000005ADE                 db  83h
.eh_frame:0000000000005ADF                 db    4
.eh_frame:0000000000005AE0                 db  6Bh ; k
.eh_frame:0000000000005AE1                 db  0Eh
.eh_frame:0000000000005AE2                 db  18h
.eh_frame:0000000000005AE3                 db  41h ; A
.eh_frame:0000000000005AE4                 db  0Eh
.eh_frame:0000000000005AE5                 db  10h
.eh_frame:0000000000005AE6                 db  42h ; B
.eh_frame:0000000000005AE7                 db  0Eh
.eh_frame:0000000000005AE8                 db    8
.eh_frame:0000000000005AE9                 db    0
.eh_frame:0000000000005AEA                 db    0
.eh_frame:0000000000005AEB                 db    0
.eh_frame:0000000000005AEC                 db    0
.eh_frame:0000000000005AED                 db    0
.eh_frame:0000000000005AEE                 db    0
.eh_frame:0000000000005AEF                 db    0
.eh_frame:0000000000005AF0                 db  44h ; D
.eh_frame:0000000000005AF1                 db    0
.eh_frame:0000000000005AF2                 db    0
.eh_frame:0000000000005AF3                 db    0
.eh_frame:0000000000005AF4                 db 0D4h
.eh_frame:0000000000005AF5                 db    9
.eh_frame:0000000000005AF6                 db    0
.eh_frame:0000000000005AF7                 db    0
.eh_frame:0000000000005AF8                 db  28h ; (
.eh_frame:0000000000005AF9                 db 0E7h
.eh_frame:0000000000005AFA                 db 0FFh
.eh_frame:0000000000005AFB                 db 0FFh
.eh_frame:0000000000005AFC                 db  65h ; e
.eh_frame:0000000000005AFD                 db    0
.eh_frame:0000000000005AFE                 db    0
.eh_frame:0000000000005AFF                 db    0
.eh_frame:0000000000005B00                 db    0
.eh_frame:0000000000005B01                 db  42h ; B
.eh_frame:0000000000005B02                 db  0Eh
.eh_frame:0000000000005B03                 db  10h
.eh_frame:0000000000005B04                 db  8Fh
.eh_frame:0000000000005B05                 db    2
.eh_frame:0000000000005B06                 db  42h ; B
.eh_frame:0000000000005B07                 db  0Eh
.eh_frame:0000000000005B08                 db  18h
.eh_frame:0000000000005B09                 db  8Eh
.eh_frame:0000000000005B0A                 db    3
.eh_frame:0000000000005B0B                 db  45h ; E
.eh_frame:0000000000005B0C                 db  0Eh
.eh_frame:0000000000005B0D                 db  20h
.eh_frame:0000000000005B0E                 db  8Dh
.eh_frame:0000000000005B0F                 db    4
.eh_frame:0000000000005B10                 db  42h ; B
.eh_frame:0000000000005B11                 db  0Eh
.eh_frame:0000000000005B12                 db  28h ; (
.eh_frame:0000000000005B13                 db  8Ch
.eh_frame:0000000000005B14                 db    5
.eh_frame:0000000000005B15                 db  48h ; H
.eh_frame:0000000000005B16                 db  0Eh
.eh_frame:0000000000005B17                 db  30h ; 0
.eh_frame:0000000000005B18                 db  86h
.eh_frame:0000000000005B19                 db    6
.eh_frame:0000000000005B1A                 db  48h ; H
.eh_frame:0000000000005B1B                 db  0Eh
.eh_frame:0000000000005B1C                 db  38h ; 8
.eh_frame:0000000000005B1D                 db  83h
.eh_frame:0000000000005B1E                 db    7
.eh_frame:0000000000005B1F                 db  4Dh ; M
.eh_frame:0000000000005B20                 db  0Eh
.eh_frame:0000000000005B21                 db  40h ; @
.eh_frame:0000000000005B22                 db  72h ; r
.eh_frame:0000000000005B23                 db  0Eh
.eh_frame:0000000000005B24                 db  38h ; 8
.eh_frame:0000000000005B25                 db  41h ; A
.eh_frame:0000000000005B26                 db  0Eh
.eh_frame:0000000000005B27                 db  30h ; 0
.eh_frame:0000000000005B28                 db  41h ; A
.eh_frame:0000000000005B29                 db  0Eh
.eh_frame:0000000000005B2A                 db  28h ; (
.eh_frame:0000000000005B2B                 db  42h ; B
.eh_frame:0000000000005B2C                 db  0Eh
.eh_frame:0000000000005B2D                 db  20h
.eh_frame:0000000000005B2E                 db  42h ; B
.eh_frame:0000000000005B2F                 db  0Eh
.eh_frame:0000000000005B30                 db  18h
.eh_frame:0000000000005B31                 db  42h ; B
.eh_frame:0000000000005B32                 db  0Eh
.eh_frame:0000000000005B33                 db  10h
.eh_frame:0000000000005B34                 db  42h ; B
.eh_frame:0000000000005B35                 db  0Eh
.eh_frame:0000000000005B36                 db    8
.eh_frame:0000000000005B37                 db    0
.eh_frame:0000000000005B38                 db  14h
.eh_frame:0000000000005B39                 db    0
.eh_frame:0000000000005B3A                 db    0
.eh_frame:0000000000005B3B                 db    0
.eh_frame:0000000000005B3C                 db  1Ch
.eh_frame:0000000000005B3D                 db  0Ah
.eh_frame:0000000000005B3E                 db    0
.eh_frame:0000000000005B3F                 db    0
.eh_frame:0000000000005B40                 db  50h ; P
.eh_frame:0000000000005B41                 db 0E7h
.eh_frame:0000000000005B42                 db 0FFh
.eh_frame:0000000000005B43                 db 0FFh
.eh_frame:0000000000005B44                 db    2
.eh_frame:0000000000005B45                 db    0
.eh_frame:0000000000005B46                 db    0
.eh_frame:0000000000005B47                 db    0
.eh_frame:0000000000005B48                 db    0
.eh_frame:0000000000005B49                 db    0
.eh_frame:0000000000005B4A                 db    0
.eh_frame:0000000000005B4B                 db    0
.eh_frame:0000000000005B4C                 db    0
.eh_frame:0000000000005B4D                 db    0
.eh_frame:0000000000005B4E                 db    0
.eh_frame:0000000000005B4F                 db    0
.eh_frame:0000000000005B50                 db  10h
.eh_frame:0000000000005B51                 db    0
.eh_frame:0000000000005B52                 db    0
.eh_frame:0000000000005B53                 db    0
.eh_frame:0000000000005B54                 db  34h ; 4
.eh_frame:0000000000005B55                 db  0Ah
.eh_frame:0000000000005B56                 db    0
.eh_frame:0000000000005B57                 db    0
.eh_frame:0000000000005B58                 db  48h ; H
.eh_frame:0000000000005B59                 db 0E7h
.eh_frame:0000000000005B5A                 db 0FFh
.eh_frame:0000000000005B5B                 db 0FFh
.eh_frame:0000000000005B5C                 db  0Eh
.eh_frame:0000000000005B5D                 db    0
.eh_frame:0000000000005B5E                 db    0
.eh_frame:0000000000005B5F                 db    0
.eh_frame:0000000000005B60                 db    0
.eh_frame:0000000000005B61                 db    0
.eh_frame:0000000000005B62                 db    0
.eh_frame:0000000000005B63                 db    0
.eh_frame:0000000000005B64 __FRAME_END__   db    0
.eh_frame:0000000000005B65                 db    0
.eh_frame:0000000000005B66                 db    0
.eh_frame:0000000000005B67                 db    0
.eh_frame:0000000000005B67 _eh_frame       ends
.eh_frame:0000000000005B67
.init_array:0000000000205C30 ; ELF Initialization Function Table
.init_array:0000000000205C30 ; ===========================================================================
.init_array:0000000000205C30
.init_array:0000000000205C30 ; Segment type: Pure data
.init_array:0000000000205C30 ; Segment permissions: Read/Write
.init_array:0000000000205C30 _init_array     segment qword public 'DATA' use64
.init_array:0000000000205C30                 assume cs:_init_array
.init_array:0000000000205C30                 ;org 205C30h
.init_array:0000000000205C30 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:0000000000205C30                                         ; DATA XREF: LOAD:00000000000000F8↑o
.init_array:0000000000205C30                                         ; LOAD:0000000000000210↑o ...
.init_array:0000000000205C30 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:0000000000205C30
.fini_array:0000000000205C38 ; ELF Termination Function Table
.fini_array:0000000000205C38 ; ===========================================================================
.fini_array:0000000000205C38
.fini_array:0000000000205C38 ; Segment type: Pure data
.fini_array:0000000000205C38 ; Segment permissions: Read/Write
.fini_array:0000000000205C38 _fini_array     segment qword public 'DATA' use64
.fini_array:0000000000205C38                 assume cs:_fini_array
.fini_array:0000000000205C38                 ;org 205C38h
.fini_array:0000000000205C38 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:0000000000205C38                                         ; DATA XREF: __libc_csu_init+13↑o
.fini_array:0000000000205C38 _fini_array     ends                    ; Alternative name is '__init_array_end'
.fini_array:0000000000205C38
.data.rel.ro:0000000000205C40 ; ===========================================================================
.data.rel.ro:0000000000205C40
.data.rel.ro:0000000000205C40 ; Segment type: Pure data
.data.rel.ro:0000000000205C40 ; Segment permissions: Read/Write
.data.rel.ro:0000000000205C40 _data_rel_ro    segment align_32 public 'DATA' use64
.data.rel.ro:0000000000205C40                 assume cs:_data_rel_ro
.data.rel.ro:0000000000205C40                 ;org 205C40h
.data.rel.ro:0000000000205C40                 public quoting_style_args
.data.rel.ro:0000000000205C40 quoting_style_args dq offset aLiteral   ; "literal"
.data.rel.ro:0000000000205C48                 dq offset aShell        ; "shell"
.data.rel.ro:0000000000205C50                 dq offset aShellAlways  ; "shell-always"
.data.rel.ro:0000000000205C58                 dq offset aShellEscape  ; "shell-escape"
.data.rel.ro:0000000000205C60                 dq offset aShellEscapeAlw ; "shell-escape-always"
.data.rel.ro:0000000000205C68                 dq offset aC_1          ; "c"
.data.rel.ro:0000000000205C70                 dq offset aCMaybe       ; "c-maybe"
.data.rel.ro:0000000000205C78                 dq offset aShellEscape+6 ; "escape"
.data.rel.ro:0000000000205C80                 dq offset dirname+11h   ; "locale"
.data.rel.ro:0000000000205C88                 dq offset aClocale      ; "clocale"
.data.rel.ro:0000000000205C90                 db    0
.data.rel.ro:0000000000205C91                 db    0
.data.rel.ro:0000000000205C92                 db    0
.data.rel.ro:0000000000205C93                 db    0
.data.rel.ro:0000000000205C94                 db    0
.data.rel.ro:0000000000205C95                 db    0
.data.rel.ro:0000000000205C96                 db    0
.data.rel.ro:0000000000205C97                 db    0
.data.rel.ro:0000000000205C97 _data_rel_ro    ends
.data.rel.ro:0000000000205C97
LOAD:0000000000205C98 ; ELF Dynamic Information
LOAD:0000000000205C98 ; ===========================================================================
LOAD:0000000000205C98
LOAD:0000000000205C98 ; Segment type: Pure data
LOAD:0000000000205C98 ; Segment permissions: Read/Write
LOAD:0000000000205C98 LOAD            segment byte public 'DATA' use64
LOAD:0000000000205C98                 assume cs:LOAD
LOAD:0000000000205C98                 ;org 205C98h
LOAD:0000000000205C98 _DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000000130↑o
LOAD:0000000000205C98                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:0000000000205C98                                         ; DT_NEEDED libc.so.6
LOAD:0000000000205CA8                 Elf64_Dyn <0Ch, 10D8h>  ; DT_INIT
LOAD:0000000000205CB8                 Elf64_Dyn <0Dh, 42B0h>  ; DT_FINI
LOAD:0000000000205CC8                 Elf64_Dyn <19h, 205C30h> ; DT_INIT_ARRAY
LOAD:0000000000205CD8                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:0000000000205CE8                 Elf64_Dyn <1Ah, 205C38h> ; DT_FINI_ARRAY
LOAD:0000000000205CF8                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:0000000000205D08                 Elf64_Dyn <6FFFFEF5h, 298h> ; DT_GNU_HASH
LOAD:0000000000205D18                 Elf64_Dyn <5, 7A0h>     ; DT_STRTAB
LOAD:0000000000205D28                 Elf64_Dyn <6, 2D8h>     ; DT_SYMTAB
LOAD:0000000000205D38                 Elf64_Dyn <0Ah, 26Ch>   ; DT_STRSZ
LOAD:0000000000205D48                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:0000000000205D58                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:0000000000205D68                 Elf64_Dyn <3, 205E88h>  ; DT_PLTGOT
LOAD:0000000000205D78                 Elf64_Dyn <2, 3A8h>     ; DT_PLTRELSZ
LOAD:0000000000205D88                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:0000000000205D98                 Elf64_Dyn <17h, 0D30h>  ; DT_JMPREL
LOAD:0000000000205DA8                 Elf64_Dyn <7, 0AD8h>    ; DT_RELA
LOAD:0000000000205DB8                 Elf64_Dyn <8, 258h>     ; DT_RELASZ
LOAD:0000000000205DC8                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:0000000000205DD8                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:0000000000205DE8                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:0000000000205DF8                 Elf64_Dyn <6FFFFFFEh, 0A78h> ; DT_VERNEED
LOAD:0000000000205E08                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:0000000000205E18                 Elf64_Dyn <6FFFFFF0h, 0A0Ch> ; DT_VERSYM
LOAD:0000000000205E28                 Elf64_Dyn <6FFFFFF9h, 10h> ; DT_RELACOUNT
LOAD:0000000000205E38                 Elf64_Dyn <0>           ; DT_NULL
LOAD:0000000000205E48                 db    0
LOAD:0000000000205E49                 db    0
LOAD:0000000000205E4A                 db    0
LOAD:0000000000205E4B                 db    0
LOAD:0000000000205E4C                 db    0
LOAD:0000000000205E4D                 db    0
LOAD:0000000000205E4E                 db    0
LOAD:0000000000205E4F                 db    0
LOAD:0000000000205E50                 db    0
LOAD:0000000000205E51                 db    0
LOAD:0000000000205E52                 db    0
LOAD:0000000000205E53                 db    0
LOAD:0000000000205E54                 db    0
LOAD:0000000000205E55                 db    0
LOAD:0000000000205E56                 db    0
LOAD:0000000000205E57                 db    0
LOAD:0000000000205E58                 db    0
LOAD:0000000000205E59                 db    0
LOAD:0000000000205E5A                 db    0
LOAD:0000000000205E5B                 db    0
LOAD:0000000000205E5C                 db    0
LOAD:0000000000205E5D                 db    0
LOAD:0000000000205E5E                 db    0
LOAD:0000000000205E5F                 db    0
LOAD:0000000000205E60                 db    0
LOAD:0000000000205E61                 db    0
LOAD:0000000000205E62                 db    0
LOAD:0000000000205E63                 db    0
LOAD:0000000000205E64                 db    0
LOAD:0000000000205E65                 db    0
LOAD:0000000000205E66                 db    0
LOAD:0000000000205E67                 db    0
LOAD:0000000000205E68                 db    0
LOAD:0000000000205E69                 db    0
LOAD:0000000000205E6A                 db    0
LOAD:0000000000205E6B                 db    0
LOAD:0000000000205E6C                 db    0
LOAD:0000000000205E6D                 db    0
LOAD:0000000000205E6E                 db    0
LOAD:0000000000205E6F                 db    0
LOAD:0000000000205E70                 db    0
LOAD:0000000000205E71                 db    0
LOAD:0000000000205E72                 db    0
LOAD:0000000000205E73                 db    0
LOAD:0000000000205E74                 db    0
LOAD:0000000000205E75                 db    0
LOAD:0000000000205E76                 db    0
LOAD:0000000000205E77                 db    0
LOAD:0000000000205E78                 db    0
LOAD:0000000000205E79                 db    0
LOAD:0000000000205E7A                 db    0
LOAD:0000000000205E7B                 db    0
LOAD:0000000000205E7C                 db    0
LOAD:0000000000205E7D                 db    0
LOAD:0000000000205E7E                 db    0
LOAD:0000000000205E7F                 db    0
LOAD:0000000000205E80                 db    0
LOAD:0000000000205E81                 db    0
LOAD:0000000000205E82                 db    0
LOAD:0000000000205E83                 db    0
LOAD:0000000000205E84                 db    0
LOAD:0000000000205E85                 db    0
LOAD:0000000000205E86                 db    0
LOAD:0000000000205E87                 db    0
LOAD:0000000000205E87 LOAD            ends
LOAD:0000000000205E87
.got:0000000000205E88 ; ===========================================================================
.got:0000000000205E88
.got:0000000000205E88 ; Segment type: Pure data
.got:0000000000205E88 ; Segment permissions: Read/Write
.got:0000000000205E88 _got            segment qword public 'DATA' use64
.got:0000000000205E88                 assume cs:_got
.got:0000000000205E88                 ;org 205E88h
.got:0000000000205E88 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:0000000000205E90 qword_205E90    dq 0                    ; DATA XREF: sub_10F0↑r
.got:0000000000205E98 qword_205E98    dq 0                    ; DATA XREF: sub_10F0+6↑r
.got:0000000000205EA0 free_ptr        dq offset free          ; DATA XREF: _free↑r
.got:0000000000205EA8 abort_ptr       dq offset abort         ; DATA XREF: _abort↑r
.got:0000000000205EB0 __errno_location_ptr dq offset __errno_location
.got:0000000000205EB0                                         ; DATA XREF: ___errno_location↑r
.got:0000000000205EB8 strncmp_ptr     dq offset strncmp       ; DATA XREF: _strncmp↑r
.got:0000000000205EC0 _exit_ptr       dq offset _exit         ; DATA XREF: __exit↑r
.got:0000000000205EC8 __fpending_ptr  dq offset __fpending    ; DATA XREF: ___fpending↑r
.got:0000000000205ED0 textdomain_ptr  dq offset textdomain    ; DATA XREF: _textdomain↑r
.got:0000000000205ED8 fclose_ptr      dq offset fclose        ; DATA XREF: _fclose↑r
.got:0000000000205EE0 bindtextdomain_ptr dq offset bindtextdomain
.got:0000000000205EE0                                         ; DATA XREF: _bindtextdomain↑r
.got:0000000000205EE8 dcgettext_ptr   dq offset dcgettext     ; DATA XREF: _dcgettext↑r
.got:0000000000205EF0 __ctype_get_mb_cur_max_ptr dq offset __ctype_get_mb_cur_max
.got:0000000000205EF0                                         ; DATA XREF: ___ctype_get_mb_cur_max↑r
.got:0000000000205EF8 strlen_ptr      dq offset strlen        ; DATA XREF: _strlen↑r
.got:0000000000205F00 __stack_chk_fail_ptr dq offset __stack_chk_fail
.got:0000000000205F00                                         ; DATA XREF: ___stack_chk_fail↑r
.got:0000000000205F08 mbrtowc_ptr     dq offset mbrtowc       ; DATA XREF: _mbrtowc↑r
.got:0000000000205F10 strrchr_ptr     dq offset strrchr       ; DATA XREF: _strrchr↑r
.got:0000000000205F18 lseek_ptr       dq offset lseek         ; DATA XREF: _lseek↑r
.got:0000000000205F20 memset_ptr      dq offset memset        ; DATA XREF: _memset↑r
.got:0000000000205F28 memcmp_ptr      dq offset memcmp        ; DATA XREF: _memcmp↑r
.got:0000000000205F30 fputs_unlocked_ptr dq offset fputs_unlocked
.got:0000000000205F30                                         ; DATA XREF: _fputs_unlocked↑r
.got:0000000000205F38 calloc_ptr      dq offset calloc        ; DATA XREF: _calloc↑r
.got:0000000000205F40 strcmp_ptr      dq offset strcmp        ; DATA XREF: _strcmp↑r
.got:0000000000205F48 memcpy_ptr      dq offset memcpy        ; DATA XREF: _memcpy↑r
.got:0000000000205F50 fileno_ptr      dq offset fileno        ; DATA XREF: _fileno↑r
.got:0000000000205F58 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc↑r
.got:0000000000205F60 fflush_ptr      dq offset fflush        ; DATA XREF: _fflush↑r
.got:0000000000205F68 nl_langinfo_ptr dq offset nl_langinfo   ; DATA XREF: _nl_langinfo↑r
.got:0000000000205F70 __freading_ptr  dq offset __freading    ; DATA XREF: ___freading↑r
.got:0000000000205F78 realloc_ptr     dq offset realloc       ; DATA XREF: _realloc↑r
.got:0000000000205F80 setlocale_ptr   dq offset setlocale     ; DATA XREF: _setlocale↑r
.got:0000000000205F88 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk↑r
.got:0000000000205F90 error_ptr       dq offset error         ; DATA XREF: _error↑r
.got:0000000000205F98 fseeko_ptr      dq offset fseeko        ; DATA XREF: _fseeko↑r
.got:0000000000205FA0 __cxa_atexit_ptr dq offset __cxa_atexit ; DATA XREF: ___cxa_atexit↑r
.got:0000000000205FA8 exit_ptr        dq offset exit          ; DATA XREF: _exit↑r
.got:0000000000205FB0 fwrite_ptr      dq offset fwrite        ; DATA XREF: _fwrite↑r
.got:0000000000205FB8 __fprintf_chk_ptr dq offset __fprintf_chk
.got:0000000000205FB8                                         ; DATA XREF: ___fprintf_chk↑r
.got:0000000000205FC0 mbsinit_ptr     dq offset mbsinit       ; DATA XREF: _mbsinit↑r
.got:0000000000205FC8 iswprint_ptr    dq offset iswprint      ; DATA XREF: _iswprint↑r
.got:0000000000205FD0 __ctype_b_loc_ptr dq offset __ctype_b_loc
.got:0000000000205FD0                                         ; DATA XREF: ___ctype_b_loc↑r
.got:0000000000205FD8 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:0000000000205FD8                                         ; DATA XREF: deregister_tm_clones+17↑r
.got:0000000000205FE0 __libc_start_main_ptr dq offset __libc_start_main
.got:0000000000205FE0                                         ; DATA XREF: start+24↑r
.got:0000000000205FE8 __gmon_start___ptr dq offset __gmon_start__
.got:0000000000205FE8                                         ; DATA XREF: _init_proc+4↑r
.got:0000000000205FF0 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:0000000000205FF0                                         ; DATA XREF: register_tm_clones+28↑r
.got:0000000000205FF8 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:0000000000205FF8                                         ; DATA XREF: __cxa_finalize↑r
.got:0000000000205FF8                                         ; __do_global_dtors_aux+9↑r
.got:0000000000205FF8 _got            ends
.got:0000000000205FF8
.data:0000000000206000 ; ===========================================================================
.data:0000000000206000
.data:0000000000206000 ; Segment type: Pure data
.data:0000000000206000 ; Segment permissions: Read/Write
.data:0000000000206000 _data           segment align_32 public 'DATA' use64
.data:0000000000206000                 assume cs:_data
.data:0000000000206000                 ;org 206000h
.data:0000000000206000                 public __data_start ; weak
.data:0000000000206000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:0000000000206000                                         ; data_start
.data:0000000000206001                 db    0
.data:0000000000206002                 db    0
.data:0000000000206003                 db    0
.data:0000000000206004                 db    0
.data:0000000000206005                 db    0
.data:0000000000206006                 db    0
.data:0000000000206007                 db    0
.data:0000000000206008                 public __dso_handle
.data:0000000000206008 ; void *_dso_handle
.data:0000000000206008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+17↑r
.data:0000000000206008                                         ; atexit↑r ...
.data:0000000000206010                 public Version
.data:0000000000206010 Version         dq offset a831          ; DATA XREF: main:loc_13FE↑r
.data:0000000000206010                                         ; "8.31"
.data:0000000000206018                 public exit_failure
.data:0000000000206018 ; int exit_failure
.data:0000000000206018 exit_failure    dd 1                    ; DATA XREF: close_stdout:loc_1942↑r
.data:0000000000206018                                         ; xalloc_die+17↑r
.data:000000000020601C                 align 20h
.data:0000000000206020                 public quote_quoting_options
.data:0000000000206020 quote_quoting_options db    8           ; DATA XREF: quote_n_mem↑o
.data:0000000000206020                                         ; quote_mem↑o ...
.data:0000000000206021                 db    0
.data:0000000000206022                 db    0
.data:0000000000206023                 db    0
.data:0000000000206024                 db    0
.data:0000000000206025                 db    0
.data:0000000000206026                 db    0
.data:0000000000206027                 db    0
.data:0000000000206028                 db    0
.data:0000000000206029                 db    0
.data:000000000020602A                 db    0
.data:000000000020602B                 db    0
.data:000000000020602C                 db    0
.data:000000000020602D                 db    0
.data:000000000020602E                 db    0
.data:000000000020602F                 db    0
.data:0000000000206030                 db    0
.data:0000000000206031                 db    0
.data:0000000000206032                 db    0
.data:0000000000206033                 db    0
.data:0000000000206034                 db    0
.data:0000000000206035                 db    0
.data:0000000000206036                 db    0
.data:0000000000206037                 db    0
.data:0000000000206038                 db    0
.data:0000000000206039                 db    0
.data:000000000020603A                 db    0
.data:000000000020603B                 db    0
.data:000000000020603C                 db    0
.data:000000000020603D                 db    0
.data:000000000020603E                 db    0
.data:000000000020603F                 db    0
.data:0000000000206040                 db    0
.data:0000000000206041                 db    0
.data:0000000000206042                 db    0
.data:0000000000206043                 db    0
.data:0000000000206044                 db    0
.data:0000000000206045                 db    0
.data:0000000000206046                 db    0
.data:0000000000206047                 db    0
.data:0000000000206048                 db    0
.data:0000000000206049                 db    0
.data:000000000020604A                 db    0
.data:000000000020604B                 db    0
.data:000000000020604C                 db    0
.data:000000000020604D                 db    0
.data:000000000020604E                 db    0
.data:000000000020604F                 db    0
.data:0000000000206050                 db    0
.data:0000000000206051                 db    0
.data:0000000000206052                 db    0
.data:0000000000206053                 db    0
.data:0000000000206054                 db    0
.data:0000000000206055                 db    0
.data:0000000000206056                 db    0
.data:0000000000206057                 db    0
.data:0000000000206058 nslots          dd 1                    ; DATA XREF: quotearg_n_options+3A↑r
.data:0000000000206058                                         ; quotearg_n_options:loc_2DBD↑r ...
.data:000000000020605C                 align 20h
.data:0000000000206060 ; void *slotvec
.data:0000000000206060 slotvec         dq offset slotvec0      ; DATA XREF: quotearg_n_options+29↑r
.data:0000000000206060                                         ; quotearg_n_options+76↑w ...
.data:0000000000206068                 align 10h
.data:0000000000206070 slotvec0        dq offset qword_100     ; DATA XREF: quotearg_n_options+54↑o
.data:0000000000206070                                         ; quotearg_n_options+187↑r ...
.data:0000000000206078 off_206078      dq offset slot0         ; DATA XREF: quotearg_free+62↑w
.data:0000000000206078 _data           ends
.data:0000000000206078
.bss:0000000000206080 ; ===========================================================================
.bss:0000000000206080
.bss:0000000000206080 ; Segment type: Uninitialized
.bss:0000000000206080 ; Segment permissions: Read/Write
.bss:0000000000206080 _bss            segment align_32 public 'BSS' use64
.bss:0000000000206080                 assume cs:_bss
.bss:0000000000206080                 ;org 206080h
.bss:0000000000206080                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:0000000000206080                 public __bss_start ; weak
.bss:0000000000206080 __bss_start     dq ?                    ; DATA XREF: LOAD:0000000000000728↑o
.bss:0000000000206080                                         ; LOAD:0000000000000770↑o ...
.bss:0000000000206080                                         ; Alternative name is '__TMC_END__'
.bss:0000000000206080                                         ; program_invocation_short_name@@GLIBC_2.2.5
.bss:0000000000206080                                         ; _edata
.bss:0000000000206080                                         ; Copy of shared data
.bss:0000000000206088                 public stdout@@GLIBC_2_2_5
.bss:0000000000206088 ; FILE *stdout
.bss:0000000000206088 stdout@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000710↑o
.bss:0000000000206088                                         ; main+85↑r ...
.bss:0000000000206088                                         ; Alternative name is 'stdout'
.bss:0000000000206088                                         ; Copy of shared data
.bss:0000000000206090                 public program_invocation_name@@GLIBC_2_2_5 ; weak
.bss:0000000000206090 program_invocation_name@@GLIBC_2_2_5 dq ?
.bss:0000000000206090                                         ; DATA XREF: LOAD:0000000000000740↑o
.bss:0000000000206090                                         ; LOAD:0000000000000758↑o ...
.bss:0000000000206090                                         ; Alternative name is '__progname_full@@GLIBC_2.2.5'
.bss:0000000000206090                                         ; Copy of shared data
.bss:0000000000206098                 align 20h
.bss:00000000002060A0                 public stderr@@GLIBC_2_2_5
.bss:00000000002060A0 ; FILE *stderr
.bss:00000000002060A0 stderr@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000788↑o
.bss:00000000002060A0                                         ; close_stdout:loc_18EC↑r ...
.bss:00000000002060A0                                         ; Alternative name is 'stderr'
.bss:00000000002060A0                                         ; Copy of shared data
.bss:00000000002060A8 completed_7697  db ?                    ; DATA XREF: __do_global_dtors_aux↑r
.bss:00000000002060A8                                         ; __do_global_dtors_aux+28↑w
.bss:00000000002060A9                 align 10h
.bss:00000000002060B0 ignore_EPIPE    db ?                    ; DATA XREF: close_stdout_set_ignore_EPIPE↑w
.bss:00000000002060B0                                         ; close_stdout+1B↑r
.bss:00000000002060B1                 align 8
.bss:00000000002060B8 file_name       dq ?                    ; DATA XREF: close_stdout_set_file_name↑w
.bss:00000000002060B8                                         ; close_stdout+56↑r
.bss:00000000002060C0                 public program_name
.bss:00000000002060C0 program_name    dq ?                    ; DATA XREF: usage+1D↑r
.bss:00000000002060C0                                         ; set_program_name:loc_19DD↑w
.bss:00000000002060C8                 align 20h
.bss:00000000002060E0 slot0           db    ? ;               ; DATA XREF: quotearg_n_options+FE↑o
.bss:00000000002060E0                                         ; quotearg_free+46↑o ...
.bss:00000000002060E1                 db    ? ;
.bss:00000000002060E2                 db    ? ;
.bss:00000000002060E3                 db    ? ;
.bss:00000000002060E4                 db    ? ;
.bss:00000000002060E5                 db    ? ;
.bss:00000000002060E6                 db    ? ;
.bss:00000000002060E7                 db    ? ;
.bss:00000000002060E8                 db    ? ;
.bss:00000000002060E9                 db    ? ;
.bss:00000000002060EA                 db    ? ;
.bss:00000000002060EB                 db    ? ;
.bss:00000000002060EC                 db    ? ;
.bss:00000000002060ED                 db    ? ;
.bss:00000000002060EE                 db    ? ;
.bss:00000000002060EF                 db    ? ;
.bss:00000000002060F0                 db    ? ;
.bss:00000000002060F1                 db    ? ;
.bss:00000000002060F2                 db    ? ;
.bss:00000000002060F3                 db    ? ;
.bss:00000000002060F4                 db    ? ;
.bss:00000000002060F5                 db    ? ;
.bss:00000000002060F6                 db    ? ;
.bss:00000000002060F7                 db    ? ;
.bss:00000000002060F8                 db    ? ;
.bss:00000000002060F9                 db    ? ;
.bss:00000000002060FA                 db    ? ;
.bss:00000000002060FB                 db    ? ;
.bss:00000000002060FC                 db    ? ;
.bss:00000000002060FD                 db    ? ;
.bss:00000000002060FE                 db    ? ;
.bss:00000000002060FF                 db    ? ;
.bss:0000000000206100                 db    ? ;
.bss:0000000000206101                 db    ? ;
.bss:0000000000206102                 db    ? ;
.bss:0000000000206103                 db    ? ;
.bss:0000000000206104                 db    ? ;
.bss:0000000000206105                 db    ? ;
.bss:0000000000206106                 db    ? ;
.bss:0000000000206107                 db    ? ;
.bss:0000000000206108                 db    ? ;
.bss:0000000000206109                 db    ? ;
.bss:000000000020610A                 db    ? ;
.bss:000000000020610B                 db    ? ;
.bss:000000000020610C                 db    ? ;
.bss:000000000020610D                 db    ? ;
.bss:000000000020610E                 db    ? ;
.bss:000000000020610F                 db    ? ;
.bss:0000000000206110                 db    ? ;
.bss:0000000000206111                 db    ? ;
.bss:0000000000206112                 db    ? ;
.bss:0000000000206113                 db    ? ;
.bss:0000000000206114                 db    ? ;
.bss:0000000000206115                 db    ? ;
.bss:0000000000206116                 db    ? ;
.bss:0000000000206117                 db    ? ;
.bss:0000000000206118                 db    ? ;
.bss:0000000000206119                 db    ? ;
.bss:000000000020611A                 db    ? ;
.bss:000000000020611B                 db    ? ;
.bss:000000000020611C                 db    ? ;
.bss:000000000020611D                 db    ? ;
.bss:000000000020611E                 db    ? ;
.bss:000000000020611F                 db    ? ;
.bss:0000000000206120                 db    ? ;
.bss:0000000000206121                 db    ? ;
.bss:0000000000206122                 db    ? ;
.bss:0000000000206123                 db    ? ;
.bss:0000000000206124                 db    ? ;
.bss:0000000000206125                 db    ? ;
.bss:0000000000206126                 db    ? ;
.bss:0000000000206127                 db    ? ;
.bss:0000000000206128                 db    ? ;
.bss:0000000000206129                 db    ? ;
.bss:000000000020612A                 db    ? ;
.bss:000000000020612B                 db    ? ;
.bss:000000000020612C                 db    ? ;
.bss:000000000020612D                 db    ? ;
.bss:000000000020612E                 db    ? ;
.bss:000000000020612F                 db    ? ;
.bss:0000000000206130                 db    ? ;
.bss:0000000000206131                 db    ? ;
.bss:0000000000206132                 db    ? ;
.bss:0000000000206133                 db    ? ;
.bss:0000000000206134                 db    ? ;
.bss:0000000000206135                 db    ? ;
.bss:0000000000206136                 db    ? ;
.bss:0000000000206137                 db    ? ;
.bss:0000000000206138                 db    ? ;
.bss:0000000000206139                 db    ? ;
.bss:000000000020613A                 db    ? ;
.bss:000000000020613B                 db    ? ;
.bss:000000000020613C                 db    ? ;
.bss:000000000020613D                 db    ? ;
.bss:000000000020613E                 db    ? ;
.bss:000000000020613F                 db    ? ;
.bss:0000000000206140                 db    ? ;
.bss:0000000000206141                 db    ? ;
.bss:0000000000206142                 db    ? ;
.bss:0000000000206143                 db    ? ;
.bss:0000000000206144                 db    ? ;
.bss:0000000000206145                 db    ? ;
.bss:0000000000206146                 db    ? ;
.bss:0000000000206147                 db    ? ;
.bss:0000000000206148                 db    ? ;
.bss:0000000000206149                 db    ? ;
.bss:000000000020614A                 db    ? ;
.bss:000000000020614B                 db    ? ;
.bss:000000000020614C                 db    ? ;
.bss:000000000020614D                 db    ? ;
.bss:000000000020614E                 db    ? ;
.bss:000000000020614F                 db    ? ;
.bss:0000000000206150                 db    ? ;
.bss:0000000000206151                 db    ? ;
.bss:0000000000206152                 db    ? ;
.bss:0000000000206153                 db    ? ;
.bss:0000000000206154                 db    ? ;
.bss:0000000000206155                 db    ? ;
.bss:0000000000206156                 db    ? ;
.bss:0000000000206157                 db    ? ;
.bss:0000000000206158                 db    ? ;
.bss:0000000000206159                 db    ? ;
.bss:000000000020615A                 db    ? ;
.bss:000000000020615B                 db    ? ;
.bss:000000000020615C                 db    ? ;
.bss:000000000020615D                 db    ? ;
.bss:000000000020615E                 db    ? ;
.bss:000000000020615F                 db    ? ;
.bss:0000000000206160                 db    ? ;
.bss:0000000000206161                 db    ? ;
.bss:0000000000206162                 db    ? ;
.bss:0000000000206163                 db    ? ;
.bss:0000000000206164                 db    ? ;
.bss:0000000000206165                 db    ? ;
.bss:0000000000206166                 db    ? ;
.bss:0000000000206167                 db    ? ;
.bss:0000000000206168                 db    ? ;
.bss:0000000000206169                 db    ? ;
.bss:000000000020616A                 db    ? ;
.bss:000000000020616B                 db    ? ;
.bss:000000000020616C                 db    ? ;
.bss:000000000020616D                 db    ? ;
.bss:000000000020616E                 db    ? ;
.bss:000000000020616F                 db    ? ;
.bss:0000000000206170                 db    ? ;
.bss:0000000000206171                 db    ? ;
.bss:0000000000206172                 db    ? ;
.bss:0000000000206173                 db    ? ;
.bss:0000000000206174                 db    ? ;
.bss:0000000000206175                 db    ? ;
.bss:0000000000206176                 db    ? ;
.bss:0000000000206177                 db    ? ;
.bss:0000000000206178                 db    ? ;
.bss:0000000000206179                 db    ? ;
.bss:000000000020617A                 db    ? ;
.bss:000000000020617B                 db    ? ;
.bss:000000000020617C                 db    ? ;
.bss:000000000020617D                 db    ? ;
.bss:000000000020617E                 db    ? ;
.bss:000000000020617F                 db    ? ;
.bss:0000000000206180                 db    ? ;
.bss:0000000000206181                 db    ? ;
.bss:0000000000206182                 db    ? ;
.bss:0000000000206183                 db    ? ;
.bss:0000000000206184                 db    ? ;
.bss:0000000000206185                 db    ? ;
.bss:0000000000206186                 db    ? ;
.bss:0000000000206187                 db    ? ;
.bss:0000000000206188                 db    ? ;
.bss:0000000000206189                 db    ? ;
.bss:000000000020618A                 db    ? ;
.bss:000000000020618B                 db    ? ;
.bss:000000000020618C                 db    ? ;
.bss:000000000020618D                 db    ? ;
.bss:000000000020618E                 db    ? ;
.bss:000000000020618F                 db    ? ;
.bss:0000000000206190                 db    ? ;
.bss:0000000000206191                 db    ? ;
.bss:0000000000206192                 db    ? ;
.bss:0000000000206193                 db    ? ;
.bss:0000000000206194                 db    ? ;
.bss:0000000000206195                 db    ? ;
.bss:0000000000206196                 db    ? ;
.bss:0000000000206197                 db    ? ;
.bss:0000000000206198                 db    ? ;
.bss:0000000000206199                 db    ? ;
.bss:000000000020619A                 db    ? ;
.bss:000000000020619B                 db    ? ;
.bss:000000000020619C                 db    ? ;
.bss:000000000020619D                 db    ? ;
.bss:000000000020619E                 db    ? ;
.bss:000000000020619F                 db    ? ;
.bss:00000000002061A0                 db    ? ;
.bss:00000000002061A1                 db    ? ;
.bss:00000000002061A2                 db    ? ;
.bss:00000000002061A3                 db    ? ;
.bss:00000000002061A4                 db    ? ;
.bss:00000000002061A5                 db    ? ;
.bss:00000000002061A6                 db    ? ;
.bss:00000000002061A7                 db    ? ;
.bss:00000000002061A8                 db    ? ;
.bss:00000000002061A9                 db    ? ;
.bss:00000000002061AA                 db    ? ;
.bss:00000000002061AB                 db    ? ;
.bss:00000000002061AC                 db    ? ;
.bss:00000000002061AD                 db    ? ;
.bss:00000000002061AE                 db    ? ;
.bss:00000000002061AF                 db    ? ;
.bss:00000000002061B0                 db    ? ;
.bss:00000000002061B1                 db    ? ;
.bss:00000000002061B2                 db    ? ;
.bss:00000000002061B3                 db    ? ;
.bss:00000000002061B4                 db    ? ;
.bss:00000000002061B5                 db    ? ;
.bss:00000000002061B6                 db    ? ;
.bss:00000000002061B7                 db    ? ;
.bss:00000000002061B8                 db    ? ;
.bss:00000000002061B9                 db    ? ;
.bss:00000000002061BA                 db    ? ;
.bss:00000000002061BB                 db    ? ;
.bss:00000000002061BC                 db    ? ;
.bss:00000000002061BD                 db    ? ;
.bss:00000000002061BE                 db    ? ;
.bss:00000000002061BF                 db    ? ;
.bss:00000000002061C0                 db    ? ;
.bss:00000000002061C1                 db    ? ;
.bss:00000000002061C2                 db    ? ;
.bss:00000000002061C3                 db    ? ;
.bss:00000000002061C4                 db    ? ;
.bss:00000000002061C5                 db    ? ;
.bss:00000000002061C6                 db    ? ;
.bss:00000000002061C7                 db    ? ;
.bss:00000000002061C8                 db    ? ;
.bss:00000000002061C9                 db    ? ;
.bss:00000000002061CA                 db    ? ;
.bss:00000000002061CB                 db    ? ;
.bss:00000000002061CC                 db    ? ;
.bss:00000000002061CD                 db    ? ;
.bss:00000000002061CE                 db    ? ;
.bss:00000000002061CF                 db    ? ;
.bss:00000000002061D0                 db    ? ;
.bss:00000000002061D1                 db    ? ;
.bss:00000000002061D2                 db    ? ;
.bss:00000000002061D3                 db    ? ;
.bss:00000000002061D4                 db    ? ;
.bss:00000000002061D5                 db    ? ;
.bss:00000000002061D6                 db    ? ;
.bss:00000000002061D7                 db    ? ;
.bss:00000000002061D8                 db    ? ;
.bss:00000000002061D9                 db    ? ;
.bss:00000000002061DA                 db    ? ;
.bss:00000000002061DB                 db    ? ;
.bss:00000000002061DC                 db    ? ;
.bss:00000000002061DD                 db    ? ;
.bss:00000000002061DE                 db    ? ;
.bss:00000000002061DF                 db    ? ;
.bss:00000000002061E0 default_quoting_options xmmword ?       ; DATA XREF: clone_quoting_options+12↑o
.bss:00000000002061E0                                         ; get_quoting_style↑o ...
.bss:00000000002061F0 xmmword_2061F0  xmmword ?               ; DATA XREF: quotearg_char_mem+41↑r
.bss:00000000002061F0                                         ; quotearg_n_custom_mem+39↑r
.bss:0000000000206200 xmmword_206200  xmmword ?               ; DATA XREF: quotearg_char_mem+4E↑r
.bss:0000000000206200                                         ; quotearg_n_custom_mem+46↑r
.bss:0000000000206210 qword_206210    dq ?                    ; DATA XREF: quotearg_char_mem+16↑r
.bss:0000000000206210                                         ; quotearg_n_custom_mem+7↑r
.bss:0000000000206210 _bss            ends
.bss:0000000000206210
.prgend:0000000000206218 ; ===========================================================================
.prgend:0000000000206218
.prgend:0000000000206218 ; Segment type: Zero-length
.prgend:0000000000206218 _prgend         segment byte public '' use64
.prgend:0000000000206218 _end            label byte
.prgend:0000000000206218 _prgend         ends
.prgend:0000000000206218
extern:0000000000206220 ; ===========================================================================
extern:0000000000206220
extern:0000000000206220 ; Segment type: Externs
extern:0000000000206220 ; extern
extern:0000000000206220 ; void free(void *ptr)
extern:0000000000206220                 extrn free:near         ; CODE XREF: _free↑j
extern:0000000000206220                                         ; DATA XREF: .got:free_ptr↑o
extern:0000000000206228 ; void __noreturn abort(void)
extern:0000000000206228                 extrn abort:near        ; CODE XREF: _abort↑j
extern:0000000000206228                                         ; DATA XREF: .got:abort_ptr↑o
extern:0000000000206230 ; int *_errno_location(void)
extern:0000000000206230                 extrn __errno_location:near
extern:0000000000206230                                         ; CODE XREF: ___errno_location↑j
extern:0000000000206230                                         ; DATA XREF: .got:__errno_location_ptr↑o
extern:0000000000206238 ; int strncmp(const char *s1, const char *s2, size_t n)
extern:0000000000206238                 extrn strncmp:near      ; CODE XREF: _strncmp↑j
extern:0000000000206238                                         ; DATA XREF: .got:strncmp_ptr↑o
extern:0000000000206240 ; void __noreturn exit(int status)
extern:0000000000206240                 extrn _exit:near        ; CODE XREF: __exit↑j
extern:0000000000206240                                         ; DATA XREF: .got:_exit_ptr↑o
extern:0000000000206248 ; size_t _fpending(FILE *fp)
extern:0000000000206248                 extrn __fpending:near   ; CODE XREF: ___fpending↑j
extern:0000000000206248                                         ; DATA XREF: .got:__fpending_ptr↑o
extern:0000000000206250 ; char *textdomain(const char *domainname)
extern:0000000000206250                 extrn textdomain:near   ; CODE XREF: _textdomain↑j
extern:0000000000206250                                         ; DATA XREF: .got:textdomain_ptr↑o
extern:0000000000206258 ; int fclose(FILE *stream)
extern:0000000000206258                 extrn fclose:near       ; CODE XREF: _fclose↑j
extern:0000000000206258                                         ; DATA XREF: .got:fclose_ptr↑o
extern:0000000000206260 ; char *bindtextdomain(const char *domainname, const char *dirname)
extern:0000000000206260                 extrn bindtextdomain:near
extern:0000000000206260                                         ; CODE XREF: _bindtextdomain↑j
extern:0000000000206260                                         ; DATA XREF: .got:bindtextdomain_ptr↑o
extern:0000000000206268 ; char *dcgettext(const char *domainname, const char *msgid, int category)
extern:0000000000206268                 extrn dcgettext:near    ; CODE XREF: _dcgettext↑j
extern:0000000000206268                                         ; DATA XREF: .got:dcgettext_ptr↑o
extern:0000000000206270 ; size_t _ctype_get_mb_cur_max(void)
extern:0000000000206270                 extrn __ctype_get_mb_cur_max:near
extern:0000000000206270                                         ; CODE XREF: ___ctype_get_mb_cur_max↑j
extern:0000000000206270                                         ; DATA XREF: .got:__ctype_get_mb_cur_max_ptr↑o
extern:0000000000206278 ; size_t strlen(const char *s)
extern:0000000000206278                 extrn strlen:near       ; CODE XREF: _strlen↑j
extern:0000000000206278                                         ; DATA XREF: .got:strlen_ptr↑o
extern:0000000000206280                 extrn __stack_chk_fail:near
extern:0000000000206280                                         ; CODE XREF: ___stack_chk_fail↑j
extern:0000000000206280                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:0000000000206288 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
extern:0000000000206288                 extrn mbrtowc:near      ; CODE XREF: _mbrtowc↑j
extern:0000000000206288                                         ; DATA XREF: .got:mbrtowc_ptr↑o
extern:0000000000206290 ; char *strrchr(const char *s, int c)
extern:0000000000206290                 extrn strrchr:near      ; CODE XREF: _strrchr↑j
extern:0000000000206290                                         ; DATA XREF: .got:strrchr_ptr↑o
extern:0000000000206298 ; __off_t lseek(int fd, __off_t offset, int whence)
extern:0000000000206298                 extrn lseek:near        ; CODE XREF: _lseek↑j
extern:0000000000206298                                         ; DATA XREF: .got:lseek_ptr↑o
extern:00000000002062A0 ; void *memset(void *s, int c, size_t n)
extern:00000000002062A0                 extrn memset:near       ; CODE XREF: _memset↑j
extern:00000000002062A0                                         ; DATA XREF: .got:memset_ptr↑o
extern:00000000002062A8 ; int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:00000000002062A8                 extrn __libc_start_main:near
extern:00000000002062A8                                         ; CODE XREF: start+24↑p
extern:00000000002062A8                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:00000000002062B0 ; int memcmp(const void *s1, const void *s2, size_t n)
extern:00000000002062B0                 extrn memcmp:near       ; CODE XREF: _memcmp↑j
extern:00000000002062B0                                         ; DATA XREF: .got:memcmp_ptr↑o
extern:00000000002062B8 ; int fputs_unlocked(const char *s, FILE *stream)
extern:00000000002062B8                 extrn fputs_unlocked:near
extern:00000000002062B8                                         ; CODE XREF: _fputs_unlocked↑j
extern:00000000002062B8                                         ; DATA XREF: .got:fputs_unlocked_ptr↑o
extern:00000000002062C0 ; void *calloc(size_t nmemb, size_t size)
extern:00000000002062C0                 extrn calloc:near       ; CODE XREF: _calloc↑j
extern:00000000002062C0                                         ; DATA XREF: .got:calloc_ptr↑o
extern:00000000002062C8 ; int strcmp(const char *s1, const char *s2)
extern:00000000002062C8                 extrn strcmp:near       ; CODE XREF: _strcmp↑j
extern:00000000002062C8                                         ; DATA XREF: .got:strcmp_ptr↑o
extern:00000000002062D0 ; void *memcpy(void *dest, const void *src, size_t n)
extern:00000000002062D0                 extrn memcpy:near       ; CODE XREF: _memcpy↑j
extern:00000000002062D0                                         ; DATA XREF: .got:memcpy_ptr↑o
extern:00000000002062D8 ; int fileno(FILE *stream)
extern:00000000002062D8                 extrn fileno:near       ; CODE XREF: _fileno↑j
extern:00000000002062D8                                         ; DATA XREF: .got:fileno_ptr↑o
extern:00000000002062E0 ; void *malloc(size_t size)
extern:00000000002062E0                 extrn malloc:near       ; CODE XREF: _malloc↑j
extern:00000000002062E0                                         ; DATA XREF: .got:malloc_ptr↑o
extern:00000000002062E8 ; int fflush(FILE *stream)
extern:00000000002062E8                 extrn fflush:near       ; CODE XREF: _fflush↑j
extern:00000000002062E8                                         ; DATA XREF: .got:fflush_ptr↑o
extern:00000000002062F0 ; char *nl_langinfo(nl_item item)
extern:00000000002062F0                 extrn nl_langinfo:near  ; CODE XREF: _nl_langinfo↑j
extern:00000000002062F0                                         ; DATA XREF: .got:nl_langinfo_ptr↑o
extern:00000000002062F8 ; int _freading(FILE *fp)
extern:00000000002062F8                 extrn __freading:near   ; CODE XREF: ___freading↑j
extern:00000000002062F8                                         ; DATA XREF: .got:__freading_ptr↑o
extern:0000000000206300 ; void *realloc(void *ptr, size_t size)
extern:0000000000206300                 extrn realloc:near      ; CODE XREF: _realloc↑j
extern:0000000000206300                                         ; DATA XREF: .got:realloc_ptr↑o
extern:0000000000206308 ; char *setlocale(int category, const char *locale)
extern:0000000000206308                 extrn setlocale:near    ; CODE XREF: _setlocale↑j
extern:0000000000206308                                         ; DATA XREF: .got:setlocale_ptr↑o
extern:0000000000206310                 extrn __printf_chk:near ; CODE XREF: ___printf_chk↑j
extern:0000000000206310                                         ; DATA XREF: .got:__printf_chk_ptr↑o
extern:0000000000206318 ; void error(int status, int errnum, const char *format, ...)
extern:0000000000206318                 extrn error:near        ; CODE XREF: _error↑j
extern:0000000000206318                                         ; DATA XREF: .got:error_ptr↑o
extern:0000000000206320 ; int fseeko(FILE *stream, __off_t off, int whence)
extern:0000000000206320                 extrn fseeko:near       ; CODE XREF: _fseeko↑j
extern:0000000000206320                                         ; DATA XREF: .got:fseeko_ptr↑o
extern:0000000000206328 ; int __fastcall _cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
extern:0000000000206328                 extrn __cxa_atexit:near ; CODE XREF: ___cxa_atexit↑j
extern:0000000000206328                                         ; DATA XREF: .got:__cxa_atexit_ptr↑o
extern:0000000000206330 ; void __noreturn exit(int status)
extern:0000000000206330                 extrn exit:near         ; CODE XREF: _exit↑j
extern:0000000000206330                                         ; DATA XREF: .got:exit_ptr↑o
extern:0000000000206338 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
extern:0000000000206338                 extrn fwrite:near       ; CODE XREF: _fwrite↑j
extern:0000000000206338                                         ; DATA XREF: .got:fwrite_ptr↑o
extern:0000000000206340                 extrn __fprintf_chk:near
extern:0000000000206340                                         ; CODE XREF: ___fprintf_chk↑j
extern:0000000000206340                                         ; DATA XREF: .got:__fprintf_chk_ptr↑o
extern:0000000000206348 ; int mbsinit(const mbstate_t *ps)
extern:0000000000206348                 extrn mbsinit:near      ; CODE XREF: _mbsinit↑j
extern:0000000000206348                                         ; DATA XREF: .got:mbsinit_ptr↑o
extern:0000000000206350 ; int iswprint(wint_t wc)
extern:0000000000206350                 extrn iswprint:near     ; CODE XREF: _iswprint↑j
extern:0000000000206350                                         ; DATA XREF: .got:iswprint_ptr↑o
extern:0000000000206358 ; int __fastcall __cxa_finalize(void *)
extern:0000000000206358                 extrn __imp___cxa_finalize:near ; weak
extern:0000000000206358                                         ; CODE XREF: __cxa_finalize↑j
extern:0000000000206358                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:0000000000206360 ; const unsigned __int16 **_ctype_b_loc(void)
extern:0000000000206360                 extrn __ctype_b_loc:near
extern:0000000000206360                                         ; CODE XREF: ___ctype_b_loc↑j
extern:0000000000206360                                         ; DATA XREF: .got:__ctype_b_loc_ptr↑o
extern:0000000000206368                 extrn _ITM_deregisterTMCloneTable ; weak
extern:0000000000206368                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:0000000000206370                 extrn __gmon_start__:near ; weak
extern:0000000000206370                                         ; CODE XREF: _init_proc+10↑p
extern:0000000000206370                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:0000000000206378                 extrn _ITM_registerTMCloneTable ; weak
extern:0000000000206378                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:0000000000206378
extern:0000000000206378
extern:0000000000206378                 end start
