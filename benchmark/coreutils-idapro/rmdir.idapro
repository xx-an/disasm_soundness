LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                      License info: 48-357D-7BC4-C6                      |
LOAD:0000000000000000 ; |                              Virginia Tech                              |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : 247EDD3E974515F90E1A7F9701A2A8EA4B02F09408A1D1F7C4DCACE029BE0C9D
LOAD:0000000000000000 ; Input MD5    : 059651159CA2C31B931FAD84090F4F63
LOAD:0000000000000000 ; Input CRC32  : F6D2D1BE
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/rmdir
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'rmdir.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000 ; Source File : 'prog-fprintf.c'
LOAD:0000000000000000 ; Source File : 'version.c'
LOAD:0000000000000000 ; Source File : 'closeout.c'
LOAD:0000000000000000 ; Source File : 'stripslash.c'
LOAD:0000000000000000 ; Source File : 'exitfail.c'
LOAD:0000000000000000 ; Source File : 'progname.c'
LOAD:0000000000000000 ; Source File : 'quotearg.c'
LOAD:0000000000000000 ; Source File : 'version-etc.c'
LOAD:0000000000000000 ; Source File : 'version-etc-fsf.c'
LOAD:0000000000000000 ; Source File : 'xmalloc.c'
LOAD:0000000000000000 ; Source File : 'xalloc-die.c'
LOAD:0000000000000000 ; Source File : 'mbrtowc.c'
LOAD:0000000000000000 ; Source File : 'vfprintf.c'
LOAD:0000000000000000 ; Source File : 'close-stream.c'
LOAD:0000000000000000 ; Source File : 'basename-lgpl.c'
LOAD:0000000000000000 ; Source File : 'hard-locale.c'
LOAD:0000000000000000 ; Source File : 'localcharset.c'
LOAD:0000000000000000 ; Source File : 'fclose.c'
LOAD:0000000000000000 ; Source File : 'fflush.c'
LOAD:0000000000000000 ; Source File : 'fseeko.c'
LOAD:0000000000000000 ; Source File : 'fseterr.c'
LOAD:0000000000000000 ; Source File : 'vasnprintf.c'
LOAD:0000000000000000 ; Source File : 'printf-args.c'
LOAD:0000000000000000 ; Source File : 'printf-parse.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure code
LOAD:0000000000000000 ; Segment permissions: Read/Execute
LOAD:0000000000000000 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000002F0↓o
LOAD:0000000000000000                                         ; LOAD:0000000000000308↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset start         ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 30700h               ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 9                    ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 25h                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 24h                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 1F8h                 ; Size in file image
LOAD:0000000000000068                 dq 1F8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 238h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 238h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 5                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 8B20h                ; Size in file image
LOAD:00000000000000D8                 dq 8B20h                ; Size in memory image
LOAD:00000000000000E0                 dq 200000h              ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 6                    ; Flags
LOAD:00000000000000F0                 dq 9AF0h                ; File offset
LOAD:00000000000000F8                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000100 qword_100       dq 209AF0h              ; DATA XREF: .data:slotvec0↓o
LOAD:0000000000000100                                         ; Physical address
LOAD:0000000000000108                 dq 590h                 ; Size in file image
LOAD:0000000000000110                 dq 728h                 ; Size in memory image
LOAD:0000000000000118                 dq 200000h              ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000124                 dd 6                    ; Flags
LOAD:0000000000000128                 dq 9C38h                ; File offset
LOAD:0000000000000130                 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000000138                 dq 209C38h              ; Physical address
LOAD:0000000000000140                 dq 1F0h                 ; Size in file image
LOAD:0000000000000148                 dq 1F0h                 ; Size in memory image
LOAD:0000000000000150                 dq 8                    ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 4                    ; Type: NOTE
LOAD:000000000000015C                 dd 4                    ; Flags
LOAD:0000000000000160                 dq 254h                 ; File offset
LOAD:0000000000000168                 dq offset dword_254     ; Virtual address
LOAD:0000000000000170                 dq 254h                 ; Physical address
LOAD:0000000000000178                 dq 44h                  ; Size in file image
LOAD:0000000000000180                 dq 44h                  ; Size in memory image
LOAD:0000000000000188                 dq 4                    ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000194                 dd 4                    ; Flags
LOAD:0000000000000198                 dq 7C2Ch                ; File offset
LOAD:00000000000001A0                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000000001A8                 dq 7C2Ch                ; Physical address
LOAD:00000000000001B0                 dq 28Ch                 ; Size in file image
LOAD:00000000000001B8                 dq 28Ch                 ; Size in memory image
LOAD:00000000000001C0                 dq 4                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000001CC                 dd 6                    ; Flags
LOAD:00000000000001D0                 dq 0                    ; File offset
LOAD:00000000000001D8                 dq 0                    ; Virtual address
LOAD:00000000000001E0                 dq 0                    ; Physical address
LOAD:00000000000001E8                 dq 0                    ; Size in file image
LOAD:00000000000001F0                 dq 0                    ; Size in memory image
LOAD:00000000000001F8                 dq 10h                  ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 6474E552h            ; Type: RO-AFTER
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 9AF0h                ; File offset
LOAD:0000000000000210                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000218                 dq 209AF0h              ; Physical address
LOAD:0000000000000220                 dq 510h                 ; Size in file image
LOAD:0000000000000228                 dq 510h                 ; Size in memory image
LOAD:0000000000000230                 dq 1                    ; Alignment
LOAD:0000000000000238 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000238                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000254 ; ELF Note Entry
LOAD:0000000000000254 dword_254       dd 4                    ; DATA XREF: LOAD:0000000000000168↑o
LOAD:0000000000000254                                         ; Name Size
LOAD:0000000000000258                 dd 10h                  ; Desc Size
LOAD:000000000000025C                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000260 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000264                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:0000000000000274 ; ELF Note Entry
LOAD:0000000000000274                 dd 4                    ; Name Size
LOAD:0000000000000278                 dd 14h                  ; Desc Size
LOAD:000000000000027C                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000280 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000284                 db 9, 0F0h, 5, 0C0h, 0B6h, 0FFh, 5Bh, 68h, 0E0h, 17h, 0D1h ; Desc
LOAD:0000000000000284                 db 33h, 0Ch, 0D5h, 0C5h, 0B2h, 1Bh, 0, 21h, 0C8h
LOAD:0000000000000298 ; ELF GNU Hash Table
LOAD:0000000000000298 elf_gnu_hash_nbuckets dd 3
LOAD:000000000000029C elf_gnu_hash_symbias dd 36h
LOAD:00000000000002A0 elf_gnu_hash_bitmask_nwords dd 1
LOAD:00000000000002A4 elf_gnu_hash_shift dd 6
LOAD:00000000000002A8 elf_gnu_hash_indexes dq 1218012000414904h
LOAD:00000000000002B0 elf_gnu_hash_bucket dd 36h, 37h, 3Ch
LOAD:00000000000002BC elf_gnu_hash_chain dd 1C8C1D29h, 9E7650BCh, 9789A096h, 72632CCEh, 0F54162E4h
LOAD:00000000000002BC                 dd 1C8BF239h, 12F7C433h
LOAD:00000000000002D8 ; ELF Symbol Table
LOAD:00000000000002D8                 Elf64_Sym <0>
LOAD:00000000000002F0                 Elf64_Sym <offset aSnprintfChk - offset byte_890, 12h, 0, 0, \ ; "__snprintf_chk"
LOAD:00000000000002F0                            offset dword_0, 0>
LOAD:0000000000000308                 Elf64_Sym <offset aFree - offset byte_890, 12h, 0, 0, offset dword_0, \ ; "free"
LOAD:0000000000000308                            0>
LOAD:0000000000000320                 Elf64_Sym <offset aAbort - offset byte_890, 12h, 0, 0, offset dword_0,\ ; "abort"
LOAD:0000000000000320                            0>
LOAD:0000000000000338                 Elf64_Sym <offset aErrnoLocation - offset byte_890, 12h, 0, 0, \ ; "__errno_location"
LOAD:0000000000000338                            offset dword_0, 0>
LOAD:0000000000000350                 Elf64_Sym <offset aStrncmp - offset byte_890, 12h, 0, 0, \ ; "strncmp"
LOAD:0000000000000350                            offset dword_0, 0>
LOAD:0000000000000368                 Elf64_Sym <offset aItmDeregistert - offset byte_890, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:0000000000000368                            offset dword_0, 0>
LOAD:0000000000000380                 Elf64_Sym <offset aExit - offset byte_890, 12h, 0, 0, offset dword_0, \ ; "_exit"
LOAD:0000000000000380                            0>
LOAD:0000000000000398                 Elf64_Sym <offset aFpending - offset byte_890, 12h, 0, 0, \ ; "__fpending"
LOAD:0000000000000398                            offset dword_0, 0>
LOAD:00000000000003B0                 Elf64_Sym <offset aBindtextdomain+4 - offset byte_890, 12h, 0, 0, \ ; "textdomain"
LOAD:00000000000003B0                            offset dword_0, 0>
LOAD:00000000000003C8                 Elf64_Sym <offset aFclose - offset byte_890, 12h, 0, 0, \ ; "fclose"
LOAD:00000000000003C8                            offset dword_0, 0>
LOAD:00000000000003E0                 Elf64_Sym <offset aBindtextdomain - offset byte_890, 12h, 0, 0, \ ; "bindtextdomain"
LOAD:00000000000003E0                            offset dword_0, 0>
LOAD:00000000000003F8                 Elf64_Sym <offset aRmdir - offset byte_890, 12h, 0, 0, offset dword_0,\ ; "rmdir"
LOAD:00000000000003F8                            0>
LOAD:0000000000000410                 Elf64_Sym <offset aDcgettext - offset byte_890, 12h, 0, 0, \ ; "dcgettext"
LOAD:0000000000000410                            offset dword_0, 0>
LOAD:0000000000000428                 Elf64_Sym <offset aCtypeGetMbCurM - offset byte_890, 12h, 0, 0, \ ; "__ctype_get_mb_cur_max"
LOAD:0000000000000428                            offset dword_0, 0>
LOAD:0000000000000440                 Elf64_Sym <offset aStrlen - offset byte_890, 12h, 0, 0, \ ; "strlen"
LOAD:0000000000000440                            offset dword_0, 0>
LOAD:0000000000000458                 Elf64_Sym <offset aOpenat - offset byte_890, 12h, 0, 0, \ ; "openat"
LOAD:0000000000000458                            offset dword_0, 0>
LOAD:0000000000000470                 Elf64_Sym <offset aStackChkFail - offset byte_890, 12h, 0, 0, \ ; "__stack_chk_fail"
LOAD:0000000000000470                            offset dword_0, 0>
LOAD:0000000000000488                 Elf64_Sym <offset aGetoptLong - offset byte_890, 12h, 0, 0, \ ; "getopt_long"
LOAD:0000000000000488                            offset dword_0, 0>
LOAD:00000000000004A0                 Elf64_Sym <offset aMbrtowc - offset byte_890, 12h, 0, 0, \ ; "mbrtowc"
LOAD:00000000000004A0                            offset dword_0, 0>
LOAD:00000000000004B8                 Elf64_Sym <offset aOverflow - offset byte_890, 12h, 0, 0, \ ; "__overflow"
LOAD:00000000000004B8                            offset dword_0, 0>
LOAD:00000000000004D0                 Elf64_Sym <offset aStrrchr - offset byte_890, 12h, 0, 0, \ ; "strrchr"
LOAD:00000000000004D0                            offset dword_0, 0>
LOAD:00000000000004E8                 Elf64_Sym <offset aLseek - offset byte_890, 12h, 0, 0, offset dword_0,\ ; "lseek"
LOAD:00000000000004E8                            0>
LOAD:0000000000000500                 Elf64_Sym <offset aMemset - offset byte_890, 12h, 0, 0, \ ; "memset"
LOAD:0000000000000500                            offset dword_0, 0>
LOAD:0000000000000518                 Elf64_Sym <offset aFclose+1 - offset byte_890, 12h, 0, 0, \ ; "close"
LOAD:0000000000000518                            offset dword_0, 0>
LOAD:0000000000000530                 Elf64_Sym <offset aClosedir - offset byte_890, 12h, 0, 0, \ ; "closedir"
LOAD:0000000000000530                            offset dword_0, 0>
LOAD:0000000000000548                 Elf64_Sym <offset aLibcStartMain - offset byte_890, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:0000000000000548                            offset dword_0, 0>
LOAD:0000000000000560                 Elf64_Sym <offset aMemcmp - offset byte_890, 12h, 0, 0, \ ; "memcmp"
LOAD:0000000000000560                            offset dword_0, 0>
LOAD:0000000000000578                 Elf64_Sym <offset aFputsUnlocked - offset byte_890, 12h, 0, 0, \ ; "fputs_unlocked"
LOAD:0000000000000578                            offset dword_0, 0>
LOAD:0000000000000590                 Elf64_Sym <offset aCalloc - offset byte_890, 12h, 0, 0, \ ; "calloc"
LOAD:0000000000000590                            offset dword_0, 0>
LOAD:00000000000005A8                 Elf64_Sym <offset aGmonStart - offset byte_890, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:00000000000005A8                            offset dword_0, 0>
LOAD:00000000000005C0                 Elf64_Sym <offset aMemcpy - offset byte_890, 12h, 0, 0, \ ; "memcpy"
LOAD:00000000000005C0                            offset dword_0, 0>
LOAD:00000000000005D8                 Elf64_Sym <offset aFileno - offset byte_890, 12h, 0, 0, \ ; "fileno"
LOAD:00000000000005D8                            offset dword_0, 0>
LOAD:00000000000005F0                 Elf64_Sym <offset aReaddir - offset byte_890, 12h, 0, 0, \ ; "readdir"
LOAD:00000000000005F0                            offset dword_0, 0>
LOAD:0000000000000608                 Elf64_Sym <offset aMalloc - offset byte_890, 12h, 0, 0, \ ; "malloc"
LOAD:0000000000000608                            offset dword_0, 0>
LOAD:0000000000000620                 Elf64_Sym <offset aFflush - offset byte_890, 12h, 0, 0, \ ; "fflush"
LOAD:0000000000000620                            offset dword_0, 0>
LOAD:0000000000000638                 Elf64_Sym <offset aNlLanginfo - offset byte_890, 12h, 0, 0, \ ; "nl_langinfo"
LOAD:0000000000000638                            offset dword_0, 0>
LOAD:0000000000000650                 Elf64_Sym <offset aFreading - offset byte_890, 12h, 0, 0, \ ; "__freading"
LOAD:0000000000000650                            offset dword_0, 0>
LOAD:0000000000000668                 Elf64_Sym <offset aFwriteUnlocked - offset byte_890, 12h, 0, 0, \ ; "fwrite_unlocked"
LOAD:0000000000000668                            offset dword_0, 0>
LOAD:0000000000000680                 Elf64_Sym <offset aRealloc - offset byte_890, 12h, 0, 0, \ ; "realloc"
LOAD:0000000000000680                            offset dword_0, 0>
LOAD:0000000000000698                 Elf64_Sym <offset aSetlocale - offset byte_890, 12h, 0, 0, \ ; "setlocale"
LOAD:0000000000000698                            offset dword_0, 0>
LOAD:00000000000006B0                 Elf64_Sym <offset aPrintfChk - offset byte_890, 12h, 0, 0, \ ; "__printf_chk"
LOAD:00000000000006B0                            offset dword_0, 0>
LOAD:00000000000006C8                 Elf64_Sym <offset aError - offset byte_890, 12h, 0, 0, offset dword_0,\ ; "error"
LOAD:00000000000006C8                            0>
LOAD:00000000000006E0                 Elf64_Sym <offset aFseeko - offset byte_890, 12h, 0, 0, \ ; "fseeko"
LOAD:00000000000006E0                            offset dword_0, 0>
LOAD:00000000000006F8                 Elf64_Sym <offset aFdopendir - offset byte_890, 12h, 0, 0, \ ; "fdopendir"
LOAD:00000000000006F8                            offset dword_0, 0>
LOAD:0000000000000710                 Elf64_Sym <offset aCxaAtexit - offset byte_890, 12h, 0, 0, \ ; "__cxa_atexit"
LOAD:0000000000000710                            offset dword_0, 0>
LOAD:0000000000000728                 Elf64_Sym <offset aExit+1 - offset byte_890, 12h, 0, 0, \ ; "exit"
LOAD:0000000000000728                            offset dword_0, 0>
LOAD:0000000000000740                 Elf64_Sym <offset aFwrite - offset byte_890, 12h, 0, 0, \ ; "fwrite"
LOAD:0000000000000740                            offset dword_0, 0>
LOAD:0000000000000758                 Elf64_Sym <offset aFprintfChk - offset byte_890, 12h, 0, 0, \ ; "__fprintf_chk"
LOAD:0000000000000758                            offset dword_0, 0>
LOAD:0000000000000770                 Elf64_Sym <offset aItmRegistertmc - offset byte_890, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:0000000000000770                            offset dword_0, 0>
LOAD:0000000000000788                 Elf64_Sym <offset aMbsinit - offset byte_890, 12h, 0, 0, \ ; "mbsinit"
LOAD:0000000000000788                            offset dword_0, 0>
LOAD:00000000000007A0                 Elf64_Sym <offset aIswprint - offset byte_890, 12h, 0, 0, \ ; "iswprint"
LOAD:00000000000007A0                            offset dword_0, 0>
LOAD:00000000000007B8                 Elf64_Sym <offset aCxaFinalize - offset byte_890, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:00000000000007B8                            offset dword_0, 0>
LOAD:00000000000007D0                 Elf64_Sym <offset aCtypeBLoc - offset byte_890, 12h, 0, 0, \ ; "__ctype_b_loc"
LOAD:00000000000007D0                            offset dword_0, 0>
LOAD:00000000000007E8                 Elf64_Sym <offset aStdout - offset byte_890, 11h, 0, 19h, \ ; "stdout"
LOAD:00000000000007E8                            offset stdout@@GLIBC_2_2_5, 8>
LOAD:0000000000000800                 Elf64_Sym <offset aProgname - offset byte_890, 11h, 0, 19h, \ ; "__progname"
LOAD:0000000000000800                            offset __bss_start, 8>
LOAD:0000000000000818                 Elf64_Sym <offset aProgramInvocat - offset byte_890, 21h, 0, 19h, \ ; "program_invocation_name"
LOAD:0000000000000818                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000830                 Elf64_Sym <offset aPrognameFull - offset byte_890, 11h, 0, 19h, \ ; "__progname_full"
LOAD:0000000000000830                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000848                 Elf64_Sym <offset aProgramInvocat_0 - offset byte_890, 21h, 0, 19h, \ ; "program_invocation_short_name"
LOAD:0000000000000848                            offset __bss_start, 8>
LOAD:0000000000000860                 Elf64_Sym <offset aStderr - offset byte_890, 11h, 0, 19h, \ ; "stderr"
LOAD:0000000000000860                            offset stderr@@GLIBC_2_2_5, 8>
LOAD:0000000000000878                 Elf64_Sym <offset aOptind - offset byte_890, 11h, 0, 19h, \ ; "optind"
LOAD:0000000000000878                            offset optind@@GLIBC_2_2_5, 4>
LOAD:0000000000000890 ; ELF String Table
LOAD:0000000000000890 byte_890        db 0                    ; DATA XREF: LOAD:00000000000002F0↑o
LOAD:0000000000000890                                         ; LOAD:0000000000000308↑o ...
LOAD:0000000000000891 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000000BD8↓o
LOAD:000000000000089B aFflush         db 'fflush',0           ; DATA XREF: LOAD:0000000000000620↑o
LOAD:00000000000008A2 aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:00000000000006B0↑o
LOAD:00000000000008AF aReaddir        db 'readdir',0          ; DATA XREF: LOAD:00000000000005F0↑o
LOAD:00000000000008B7 aSetlocale      db 'setlocale',0        ; DATA XREF: LOAD:0000000000000698↑o
LOAD:00000000000008C1 aMbrtowc        db 'mbrtowc',0          ; DATA XREF: LOAD:00000000000004A0↑o
LOAD:00000000000008C9 aStrncmp        db 'strncmp',0          ; DATA XREF: LOAD:0000000000000350↑o
LOAD:00000000000008D1 aOptind         db 'optind',0           ; DATA XREF: LOAD:0000000000000878↑o
LOAD:00000000000008D8 aStrrchr        db 'strrchr',0          ; DATA XREF: LOAD:00000000000004D0↑o
LOAD:00000000000008E0 aDcgettext      db 'dcgettext',0        ; DATA XREF: LOAD:0000000000000410↑o
LOAD:00000000000008EA aClosedir       db 'closedir',0         ; DATA XREF: LOAD:0000000000000530↑o
LOAD:00000000000008F3 aError          db 'error',0            ; DATA XREF: LOAD:00000000000006C8↑o
LOAD:00000000000008F9 aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:0000000000000470↑o
LOAD:000000000000090A aIswprint       db 'iswprint',0         ; DATA XREF: LOAD:00000000000007A0↑o
LOAD:0000000000000913 aRealloc        db 'realloc',0          ; DATA XREF: LOAD:0000000000000680↑o
LOAD:000000000000091B aAbort          db 'abort',0            ; DATA XREF: LOAD:0000000000000320↑o
LOAD:0000000000000921 aExit           db '_exit',0            ; DATA XREF: LOAD:0000000000000380↑o
LOAD:0000000000000921                                         ; LOAD:0000000000000728↑o
LOAD:0000000000000927 aProgramInvocat db 'program_invocation_name',0
LOAD:0000000000000927                                         ; DATA XREF: LOAD:0000000000000818↑o
LOAD:000000000000093F aCtypeGetMbCurM db '__ctype_get_mb_cur_max',0
LOAD:000000000000093F                                         ; DATA XREF: LOAD:0000000000000428↑o
LOAD:0000000000000956 aCalloc         db 'calloc',0           ; DATA XREF: LOAD:0000000000000590↑o
LOAD:000000000000095D aStrlen         db 'strlen',0           ; DATA XREF: LOAD:0000000000000440↑o
LOAD:0000000000000964 aMemset         db 'memset',0           ; DATA XREF: LOAD:0000000000000500↑o
LOAD:000000000000096B aRmdir          db 'rmdir',0            ; DATA XREF: LOAD:00000000000003F8↑o
LOAD:0000000000000971 aErrnoLocation  db '__errno_location',0 ; DATA XREF: LOAD:0000000000000338↑o
LOAD:0000000000000982 aMemcmp         db 'memcmp',0           ; DATA XREF: LOAD:0000000000000560↑o
LOAD:0000000000000989 aFprintfChk     db '__fprintf_chk',0    ; DATA XREF: LOAD:0000000000000758↑o
LOAD:0000000000000997 aStdout         db 'stdout',0           ; DATA XREF: LOAD:00000000000007E8↑o
LOAD:000000000000099E aLseek          db 'lseek',0            ; DATA XREF: LOAD:00000000000004E8↑o
LOAD:00000000000009A4 aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:00000000000005C0↑o
LOAD:00000000000009AB aFclose         db 'fclose',0           ; DATA XREF: LOAD:00000000000003C8↑o
LOAD:00000000000009AB                                         ; LOAD:0000000000000518↑o
LOAD:00000000000009B2 aMalloc         db 'malloc',0           ; DATA XREF: LOAD:0000000000000608↑o
LOAD:00000000000009B9 aFdopendir      db 'fdopendir',0        ; DATA XREF: LOAD:00000000000006F8↑o
LOAD:00000000000009C3 aMbsinit        db 'mbsinit',0          ; DATA XREF: LOAD:0000000000000788↑o
LOAD:00000000000009CB aNlLanginfo     db 'nl_langinfo',0      ; DATA XREF: LOAD:0000000000000638↑o
LOAD:00000000000009D7 aCtypeBLoc      db '__ctype_b_loc',0    ; DATA XREF: LOAD:00000000000007D0↑o
LOAD:00000000000009E5 aFreading       db '__freading',0       ; DATA XREF: LOAD:0000000000000650↑o
LOAD:00000000000009F0 aStderr         db 'stderr',0           ; DATA XREF: LOAD:0000000000000860↑o
LOAD:00000000000009F7 aSnprintfChk    db '__snprintf_chk',0   ; DATA XREF: LOAD:00000000000002F0↑o
LOAD:0000000000000A06 aGetoptLong     db 'getopt_long',0      ; DATA XREF: LOAD:0000000000000488↑o
LOAD:0000000000000A12 aFileno         db 'fileno',0           ; DATA XREF: LOAD:00000000000005D8↑o
LOAD:0000000000000A19 aFwrite         db 'fwrite',0           ; DATA XREF: LOAD:0000000000000740↑o
LOAD:0000000000000A20 aFpending       db '__fpending',0       ; DATA XREF: LOAD:0000000000000398↑o
LOAD:0000000000000A2B aProgramInvocat_0 db 'program_invocation_short_name',0
LOAD:0000000000000A2B                                         ; DATA XREF: LOAD:0000000000000848↑o
LOAD:0000000000000A49 aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:00000000000007B8↑o
LOAD:0000000000000A58 aOpenat         db 'openat',0           ; DATA XREF: LOAD:0000000000000458↑o
LOAD:0000000000000A5F aBindtextdomain db 'bindtextdomain',0   ; DATA XREF: LOAD:00000000000003E0↑o
LOAD:0000000000000A5F                                         ; LOAD:00000000000003B0↑o
LOAD:0000000000000A6E aFwriteUnlocked db 'fwrite_unlocked',0  ; DATA XREF: LOAD:0000000000000668↑o
LOAD:0000000000000A7E aLibcStartMain  db '__libc_start_main',0
LOAD:0000000000000A7E                                         ; DATA XREF: LOAD:0000000000000548↑o
LOAD:0000000000000A90 aFseeko         db 'fseeko',0           ; DATA XREF: LOAD:00000000000006E0↑o
LOAD:0000000000000A97 aOverflow       db '__overflow',0       ; DATA XREF: LOAD:00000000000004B8↑o
LOAD:0000000000000AA2 aFputsUnlocked  db 'fputs_unlocked',0   ; DATA XREF: LOAD:0000000000000578↑o
LOAD:0000000000000AB1 aFree           db 'free',0             ; DATA XREF: LOAD:0000000000000308↑o
LOAD:0000000000000AB6 aProgname       db '__progname',0       ; DATA XREF: LOAD:0000000000000800↑o
LOAD:0000000000000AC1 aPrognameFull   db '__progname_full',0  ; DATA XREF: LOAD:0000000000000830↑o
LOAD:0000000000000AD1 aCxaAtexit      db '__cxa_atexit',0     ; DATA XREF: LOAD:0000000000000710↑o
LOAD:0000000000000ADE aGlibc23        db 'GLIBC_2.3',0        ; DATA XREF: LOAD:0000000000000BE8↓o
LOAD:0000000000000AE8 aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:0000000000000BF8↓o
LOAD:0000000000000AF3 aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000000C08↓o
LOAD:0000000000000AFD aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000000C18↓o
LOAD:0000000000000B09 aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000000C28↓o
LOAD:0000000000000B15 aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:0000000000000B15                                         ; DATA XREF: LOAD:0000000000000368↑o
LOAD:0000000000000B31 aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:00000000000005A8↑o
LOAD:0000000000000B40 aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:0000000000000B40                                         ; DATA XREF: LOAD:0000000000000770↑o
LOAD:0000000000000B5A ; ELF GNU Symbol Version Table
LOAD:0000000000000B5A                 dw 0
LOAD:0000000000000B5C                 dw 3                    ; __snprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000B5E                 dw 2                    ; free@@GLIBC_2.2.5
LOAD:0000000000000B60                 dw 2                    ; abort@@GLIBC_2.2.5
LOAD:0000000000000B62                 dw 2                    ; __errno_location@@GLIBC_2.2.5
LOAD:0000000000000B64                 dw 2                    ; strncmp@@GLIBC_2.2.5
LOAD:0000000000000B66                 dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
LOAD:0000000000000B68                 dw 2                    ; _exit@@GLIBC_2.2.5
LOAD:0000000000000B6A                 dw 2                    ; __fpending@@GLIBC_2.2.5
LOAD:0000000000000B6C                 dw 2                    ; textdomain@@GLIBC_2.2.5
LOAD:0000000000000B6E                 dw 2                    ; fclose@@GLIBC_2.2.5
LOAD:0000000000000B70                 dw 2                    ; bindtextdomain@@GLIBC_2.2.5
LOAD:0000000000000B72                 dw 2                    ; rmdir@@GLIBC_2.2.5
LOAD:0000000000000B74                 dw 2                    ; dcgettext@@GLIBC_2.2.5
LOAD:0000000000000B76                 dw 2                    ; __ctype_get_mb_cur_max@@GLIBC_2.2.5
LOAD:0000000000000B78                 dw 2                    ; strlen@@GLIBC_2.2.5
LOAD:0000000000000B7A                 dw 4                    ; openat@@GLIBC_2.4
LOAD:0000000000000B7C                 dw 4                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:0000000000000B7E                 dw 2                    ; getopt_long@@GLIBC_2.2.5
LOAD:0000000000000B80                 dw 2                    ; mbrtowc@@GLIBC_2.2.5
LOAD:0000000000000B82                 dw 2                    ; __overflow@@GLIBC_2.2.5
LOAD:0000000000000B84                 dw 2                    ; strrchr@@GLIBC_2.2.5
LOAD:0000000000000B86                 dw 2                    ; lseek@@GLIBC_2.2.5
LOAD:0000000000000B88                 dw 2                    ; memset@@GLIBC_2.2.5
LOAD:0000000000000B8A                 dw 2                    ; close@@GLIBC_2.2.5
LOAD:0000000000000B8C                 dw 2                    ; closedir@@GLIBC_2.2.5
LOAD:0000000000000B8E                 dw 2                    ; __libc_start_main@@GLIBC_2.2.5
LOAD:0000000000000B90                 dw 2                    ; memcmp@@GLIBC_2.2.5
LOAD:0000000000000B92                 dw 2                    ; fputs_unlocked@@GLIBC_2.2.5
LOAD:0000000000000B94                 dw 2                    ; calloc@@GLIBC_2.2.5
LOAD:0000000000000B96                 dw 0                    ; local  symbol: __gmon_start__
LOAD:0000000000000B98                 dw 5                    ; memcpy@@GLIBC_2.14
LOAD:0000000000000B9A                 dw 2                    ; fileno@@GLIBC_2.2.5
LOAD:0000000000000B9C                 dw 2                    ; readdir@@GLIBC_2.2.5
LOAD:0000000000000B9E                 dw 2                    ; malloc@@GLIBC_2.2.5
LOAD:0000000000000BA0                 dw 2                    ; fflush@@GLIBC_2.2.5
LOAD:0000000000000BA2                 dw 2                    ; nl_langinfo@@GLIBC_2.2.5
LOAD:0000000000000BA4                 dw 2                    ; __freading@@GLIBC_2.2.5
LOAD:0000000000000BA6                 dw 2                    ; fwrite_unlocked@@GLIBC_2.2.5
LOAD:0000000000000BA8                 dw 2                    ; realloc@@GLIBC_2.2.5
LOAD:0000000000000BAA                 dw 2                    ; setlocale@@GLIBC_2.2.5
LOAD:0000000000000BAC                 dw 3                    ; __printf_chk@@GLIBC_2.3.4
LOAD:0000000000000BAE                 dw 2                    ; error@@GLIBC_2.2.5
LOAD:0000000000000BB0                 dw 2                    ; fseeko@@GLIBC_2.2.5
LOAD:0000000000000BB2                 dw 4                    ; fdopendir@@GLIBC_2.4
LOAD:0000000000000BB4                 dw 2                    ; __cxa_atexit@@GLIBC_2.2.5
LOAD:0000000000000BB6                 dw 2                    ; exit@@GLIBC_2.2.5
LOAD:0000000000000BB8                 dw 2                    ; fwrite@@GLIBC_2.2.5
LOAD:0000000000000BBA                 dw 3                    ; __fprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000BBC                 dw 0                    ; local  symbol: _ITM_registerTMCloneTable
LOAD:0000000000000BBE                 dw 2                    ; mbsinit@@GLIBC_2.2.5
LOAD:0000000000000BC0                 dw 2                    ; iswprint@@GLIBC_2.2.5
LOAD:0000000000000BC2                 dw 2                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:0000000000000BC4                 dw 6                    ; __ctype_b_loc@@GLIBC_2.3
LOAD:0000000000000BC6                 dw 2                    ; stdout@@GLIBC_2.2.5
LOAD:0000000000000BC8                 dw 2                    ; __progname@@GLIBC_2.2.5
LOAD:0000000000000BCA                 dw 2                    ; program_invocation_name@@GLIBC_2.2.5
LOAD:0000000000000BCC                 dw 2                    ; __progname_full@@GLIBC_2.2.5
LOAD:0000000000000BCE                 dw 2                    ; program_invocation_short_name@@GLIBC_2.2.5
LOAD:0000000000000BD0                 dw 2                    ; stderr@@GLIBC_2.2.5
LOAD:0000000000000BD2                 dw 2                    ; optind@@GLIBC_2.2.5
LOAD:0000000000000BD4                 dw 0
LOAD:0000000000000BD6                 dw 0
LOAD:0000000000000BD8 ; ELF GNU Symbol Version Requirements
LOAD:0000000000000BD8                 Elf64_Verneed <1, 5, offset aLibcSo6 - offset byte_890, 10h, 0> ; "libc.so.6"
LOAD:0000000000000BE8                 Elf64_Vernaux <0D696913h, 0, 6, offset aGlibc23 - offset byte_890, \ ; "GLIBC_2.3"
LOAD:0000000000000BE8                                10h>
LOAD:0000000000000BF8                 Elf64_Vernaux <6969194h, 0, 5, offset aGlibc214 - offset byte_890, \ ; "GLIBC_2.14"
LOAD:0000000000000BF8                                10h>
LOAD:0000000000000C08                 Elf64_Vernaux <0D696914h, 0, 4, offset aGlibc24 - offset byte_890, \ ; "GLIBC_2.4"
LOAD:0000000000000C08                                10h>
LOAD:0000000000000C18                 Elf64_Vernaux <9691974h, 0, 3, offset aGlibc234 - offset byte_890, \ ; "GLIBC_2.3.4"
LOAD:0000000000000C18                                10h>
LOAD:0000000000000C28                 Elf64_Vernaux <9691A75h, 0, 2, offset aGlibc225 - offset byte_890, 0> ; "GLIBC_2.2.5"
LOAD:0000000000000C38 ; ELF RELA Relocation Table
LOAD:0000000000000C38                 Elf64_Rela <209AF0h, 8, 1B20h> ; R_X86_64_RELATIVE +1B20h
LOAD:0000000000000C50                 Elf64_Rela <209AF8h, 8, 1AE0h> ; R_X86_64_RELATIVE +1AE0h
LOAD:0000000000000C68                 Elf64_Rela <209B00h, 8, 6E11h> ; R_X86_64_RELATIVE +6E11h
LOAD:0000000000000C80                 Elf64_Rela <209B20h, 8, 6E2Ah> ; R_X86_64_RELATIVE +6E2Ah
LOAD:0000000000000C98                 Elf64_Rela <209B40h, 8, 6E2Fh> ; R_X86_64_RELATIVE +6E2Fh
LOAD:0000000000000CB0                 Elf64_Rela <209B60h, 8, 6E37h> ; R_X86_64_RELATIVE +6E37h
LOAD:0000000000000CC8                 Elf64_Rela <209B80h, 8, 6E3Fh> ; R_X86_64_RELATIVE +6E3Fh
LOAD:0000000000000CE0                 Elf64_Rela <209BA0h, 8, 6E44h> ; R_X86_64_RELATIVE +6E44h
LOAD:0000000000000CF8                 Elf64_Rela <209BE0h, 8, 71A9h> ; R_X86_64_RELATIVE +71A9h
LOAD:0000000000000D10                 Elf64_Rela <209BE8h, 8, 71B1h> ; R_X86_64_RELATIVE +71B1h
LOAD:0000000000000D28                 Elf64_Rela <209BF0h, 8, 71B7h> ; R_X86_64_RELATIVE +71B7h
LOAD:0000000000000D40                 Elf64_Rela <209BF8h, 8, 71C4h> ; R_X86_64_RELATIVE +71C4h
LOAD:0000000000000D58                 Elf64_Rela <209C00h, 8, 71D1h> ; R_X86_64_RELATIVE +71D1h
LOAD:0000000000000D70                 Elf64_Rela <209C08h, 8, 71E5h> ; R_X86_64_RELATIVE +71E5h
LOAD:0000000000000D88                 Elf64_Rela <209C10h, 8, 71E7h> ; R_X86_64_RELATIVE +71E7h
LOAD:0000000000000DA0                 Elf64_Rela <209C18h, 8, 71CAh> ; R_X86_64_RELATIVE +71CAh
LOAD:0000000000000DB8                 Elf64_Rela <209C20h, 8, 6D9Eh> ; R_X86_64_RELATIVE +6D9Eh
LOAD:0000000000000DD0                 Elf64_Rela <209C28h, 8, 71EFh> ; R_X86_64_RELATIVE +71EFh
LOAD:0000000000000DE8                 Elf64_Rela <20A008h, 8, 20A008h> ; R_X86_64_RELATIVE +20A008h
LOAD:0000000000000E00                 Elf64_Rela <20A010h, 8, 7136h> ; R_X86_64_RELATIVE +7136h
LOAD:0000000000000E18                 Elf64_Rela <20A060h, 8, 20A070h> ; R_X86_64_RELATIVE +20A070h
LOAD:0000000000000E30                 Elf64_Rela <20A078h, 8, 20A0E0h> ; R_X86_64_RELATIVE +20A0E0h
LOAD:0000000000000E48                 Elf64_Rela <209FC0h, 600000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:0000000000000E60                 Elf64_Rela <209FC8h, 1A00000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:0000000000000E78                 Elf64_Rela <209FD0h, 1E00000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:0000000000000E90                 Elf64_Rela <209FD8h, 3100000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:0000000000000EA8                 Elf64_Rela <209FE0h, 3400000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:0000000000000EC0                 Elf64_Rela <20A080h, 3700000005h, 0> ; R_X86_64_COPY __progname
LOAD:0000000000000ED8                 Elf64_Rela <20A088h, 3600000005h, 0> ; R_X86_64_COPY stdout
LOAD:0000000000000EF0                 Elf64_Rela <20A090h, 3C00000005h, 0> ; R_X86_64_COPY optind
LOAD:0000000000000F08                 Elf64_Rela <20A098h, 3900000005h, 0> ; R_X86_64_COPY __progname_full
LOAD:0000000000000F20                 Elf64_Rela <20A0A0h, 3B00000005h, 0> ; R_X86_64_COPY stderr
LOAD:0000000000000F38 ; ELF JMPREL Relocation Table
LOAD:0000000000000F38                 Elf64_Rela <209E40h, 100000007h, 0> ; R_X86_64_JUMP_SLOT __snprintf_chk
LOAD:0000000000000F50                 Elf64_Rela <209E48h, 200000007h, 0> ; R_X86_64_JUMP_SLOT free
LOAD:0000000000000F68                 Elf64_Rela <209E50h, 300000007h, 0> ; R_X86_64_JUMP_SLOT abort
LOAD:0000000000000F80                 Elf64_Rela <209E58h, 400000007h, 0> ; R_X86_64_JUMP_SLOT __errno_location
LOAD:0000000000000F98                 Elf64_Rela <209E60h, 500000007h, 0> ; R_X86_64_JUMP_SLOT strncmp
LOAD:0000000000000FB0                 Elf64_Rela <209E68h, 700000007h, 0> ; R_X86_64_JUMP_SLOT _exit
LOAD:0000000000000FC8                 Elf64_Rela <209E70h, 800000007h, 0> ; R_X86_64_JUMP_SLOT __fpending
LOAD:0000000000000FE0                 Elf64_Rela <209E78h, 900000007h, 0> ; R_X86_64_JUMP_SLOT textdomain
LOAD:0000000000000FF8                 Elf64_Rela <209E80h, 0A00000007h, 0> ; R_X86_64_JUMP_SLOT fclose
LOAD:0000000000001010                 Elf64_Rela <209E88h, 0B00000007h, 0> ; R_X86_64_JUMP_SLOT bindtextdomain
LOAD:0000000000001028                 Elf64_Rela <209E90h, 0C00000007h, 0> ; R_X86_64_JUMP_SLOT rmdir
LOAD:0000000000001040                 Elf64_Rela <209E98h, 0D00000007h, 0> ; R_X86_64_JUMP_SLOT dcgettext
LOAD:0000000000001058                 Elf64_Rela <209EA0h, 0E00000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_get_mb_cur_max
LOAD:0000000000001070                 Elf64_Rela <209EA8h, 0F00000007h, 0> ; R_X86_64_JUMP_SLOT strlen
LOAD:0000000000001088                 Elf64_Rela <209EB0h, 1000000007h, 0> ; R_X86_64_JUMP_SLOT openat
LOAD:00000000000010A0                 Elf64_Rela <209EB8h, 1100000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
LOAD:00000000000010B8                 Elf64_Rela <209EC0h, 1200000007h, 0> ; R_X86_64_JUMP_SLOT getopt_long
LOAD:00000000000010D0                 Elf64_Rela <209EC8h, 1300000007h, 0> ; R_X86_64_JUMP_SLOT mbrtowc
LOAD:00000000000010E8                 Elf64_Rela <209ED0h, 1400000007h, 0> ; R_X86_64_JUMP_SLOT __overflow
LOAD:0000000000001100                 Elf64_Rela <209ED8h, 1500000007h, 0> ; R_X86_64_JUMP_SLOT strrchr
LOAD:0000000000001118                 Elf64_Rela <209EE0h, 1600000007h, 0> ; R_X86_64_JUMP_SLOT lseek
LOAD:0000000000001130                 Elf64_Rela <209EE8h, 1700000007h, 0> ; R_X86_64_JUMP_SLOT memset
LOAD:0000000000001148                 Elf64_Rela <209EF0h, 1800000007h, 0> ; R_X86_64_JUMP_SLOT close
LOAD:0000000000001160                 Elf64_Rela <209EF8h, 1900000007h, 0> ; R_X86_64_JUMP_SLOT closedir
LOAD:0000000000001178                 Elf64_Rela <209F00h, 1B00000007h, 0> ; R_X86_64_JUMP_SLOT memcmp
LOAD:0000000000001190                 Elf64_Rela <209F08h, 1C00000007h, 0> ; R_X86_64_JUMP_SLOT fputs_unlocked
LOAD:00000000000011A8                 Elf64_Rela <209F10h, 1D00000007h, 0> ; R_X86_64_JUMP_SLOT calloc
LOAD:00000000000011C0                 Elf64_Rela <209F18h, 1F00000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
LOAD:00000000000011D8                 Elf64_Rela <209F20h, 2000000007h, 0> ; R_X86_64_JUMP_SLOT fileno
LOAD:00000000000011F0                 Elf64_Rela <209F28h, 2100000007h, 0> ; R_X86_64_JUMP_SLOT readdir
LOAD:0000000000001208                 Elf64_Rela <209F30h, 2200000007h, 0> ; R_X86_64_JUMP_SLOT malloc
LOAD:0000000000001220                 Elf64_Rela <209F38h, 2300000007h, 0> ; R_X86_64_JUMP_SLOT fflush
LOAD:0000000000001238                 Elf64_Rela <209F40h, 2400000007h, 0> ; R_X86_64_JUMP_SLOT nl_langinfo
LOAD:0000000000001250                 Elf64_Rela <209F48h, 2500000007h, 0> ; R_X86_64_JUMP_SLOT __freading
LOAD:0000000000001268                 Elf64_Rela <209F50h, 2600000007h, 0> ; R_X86_64_JUMP_SLOT fwrite_unlocked
LOAD:0000000000001280                 Elf64_Rela <209F58h, 2700000007h, 0> ; R_X86_64_JUMP_SLOT realloc
LOAD:0000000000001298                 Elf64_Rela <209F60h, 2800000007h, 0> ; R_X86_64_JUMP_SLOT setlocale
LOAD:00000000000012B0                 Elf64_Rela <209F68h, 2900000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
LOAD:00000000000012C8                 Elf64_Rela <209F70h, 2A00000007h, 0> ; R_X86_64_JUMP_SLOT error
LOAD:00000000000012E0                 Elf64_Rela <209F78h, 2B00000007h, 0> ; R_X86_64_JUMP_SLOT fseeko
LOAD:00000000000012F8                 Elf64_Rela <209F80h, 2C00000007h, 0> ; R_X86_64_JUMP_SLOT fdopendir
LOAD:0000000000001310                 Elf64_Rela <209F88h, 2D00000007h, 0> ; R_X86_64_JUMP_SLOT __cxa_atexit
LOAD:0000000000001328                 Elf64_Rela <209F90h, 2E00000007h, 0> ; R_X86_64_JUMP_SLOT exit
LOAD:0000000000001340                 Elf64_Rela <209F98h, 2F00000007h, 0> ; R_X86_64_JUMP_SLOT fwrite
LOAD:0000000000001358                 Elf64_Rela <209FA0h, 3000000007h, 0> ; R_X86_64_JUMP_SLOT __fprintf_chk
LOAD:0000000000001370                 Elf64_Rela <209FA8h, 3200000007h, 0> ; R_X86_64_JUMP_SLOT mbsinit
LOAD:0000000000001388                 Elf64_Rela <209FB0h, 3300000007h, 0> ; R_X86_64_JUMP_SLOT iswprint
LOAD:00000000000013A0                 Elf64_Rela <209FB8h, 3500000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_b_loc
LOAD:00000000000013A0 LOAD            ends
LOAD:00000000000013A0
.init:00000000000013B8 ; ===========================================================================
.init:00000000000013B8
.init:00000000000013B8 ; Segment type: Pure code
.init:00000000000013B8 ; Segment permissions: Read/Execute
.init:00000000000013B8 _init           segment dword public 'CODE' use64
.init:00000000000013B8                 assume cs:_init
.init:00000000000013B8                 ;org 13B8h
.init:00000000000013B8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:00000000000013B8
.init:00000000000013B8 ; =============== S U B R O U T I N E =======================================
.init:00000000000013B8
.init:00000000000013B8
.init:00000000000013B8                 public _init_proc
.init:00000000000013B8 _init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
.init:00000000000013B8                 sub     rsp, 8          ; _init
.init:00000000000013BC                 mov     rax, cs:__gmon_start___ptr
.init:00000000000013C3                 test    rax, rax
.init:00000000000013C6                 jz      short loc_13CA
.init:00000000000013C8                 call    rax ; __gmon_start__
.init:00000000000013CA
.init:00000000000013CA loc_13CA:                               ; CODE XREF: _init_proc+E↑j
.init:00000000000013CA                 add     rsp, 8
.init:00000000000013CE                 retn
.init:00000000000013CE _init_proc      endp
.init:00000000000013CE
.init:00000000000013CE _init           ends
.init:00000000000013CE
LOAD:00000000000013CF ; ===========================================================================
LOAD:00000000000013CF
LOAD:00000000000013CF ; Segment type: Pure code
LOAD:00000000000013CF ; Segment permissions: Read/Execute
LOAD:00000000000013CF LOAD            segment byte public 'CODE' use64
LOAD:00000000000013CF                 assume cs:LOAD
LOAD:00000000000013CF                 ;org 13CFh
LOAD:00000000000013CF                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000013CF                 align 10h
LOAD:00000000000013CF LOAD            ends
LOAD:00000000000013CF
.plt:00000000000013D0 ; ===========================================================================
.plt:00000000000013D0
.plt:00000000000013D0 ; Segment type: Pure code
.plt:00000000000013D0 ; Segment permissions: Read/Execute
.plt:00000000000013D0 _plt            segment para public 'CODE' use64
.plt:00000000000013D0                 assume cs:_plt
.plt:00000000000013D0                 ;org 13D0h
.plt:00000000000013D0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:00000000000013D0
.plt:00000000000013D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013D0
.plt:00000000000013D0
.plt:00000000000013D0 sub_13D0        proc near               ; CODE XREF: .plt:00000000000013EB↓j
.plt:00000000000013D0                                         ; .plt:00000000000013FB↓j ...
.plt:00000000000013D0 ; __unwind {
.plt:00000000000013D0                 push    cs:qword_209E30
.plt:00000000000013D6                 jmp     cs:qword_209E38
.plt:00000000000013D6 sub_13D0        endp
.plt:00000000000013D6
.plt:00000000000013D6 ; ---------------------------------------------------------------------------
.plt:00000000000013DC                 align 20h
.plt:00000000000013E0
.plt:00000000000013E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013E0
.plt:00000000000013E0 ; Attributes: thunk
.plt:00000000000013E0
.plt:00000000000013E0 ___snprintf_chk proc near               ; CODE XREF: vasnprintf+5B8↓p
.plt:00000000000013E0                                         ; vasnprintf+6F0↓p ...
.plt:00000000000013E0                 jmp     cs:__snprintf_chk_ptr
.plt:00000000000013E0 ___snprintf_chk endp
.plt:00000000000013E0
.plt:00000000000013E6 ; ---------------------------------------------------------------------------
.plt:00000000000013E6                 push    0
.plt:00000000000013EB                 jmp     sub_13D0
.plt:00000000000013F0
.plt:00000000000013F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013F0
.plt:00000000000013F0 ; Attributes: thunk
.plt:00000000000013F0
.plt:00000000000013F0 ; void free(void *ptr)
.plt:00000000000013F0 _free           proc near               ; CODE XREF: quotearg_n_options+115↓p
.plt:00000000000013F0                                         ; quotearg_free+37↓p ...
.plt:00000000000013F0                 jmp     cs:free_ptr
.plt:00000000000013F0 _free           endp
.plt:00000000000013F0
.plt:00000000000013F6 ; ---------------------------------------------------------------------------
.plt:00000000000013F6                 push    1
.plt:00000000000013FB                 jmp     sub_13D0
.plt:0000000000001400
.plt:0000000000001400 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001400
.plt:0000000000001400 ; Attributes: noreturn thunk
.plt:0000000000001400
.plt:0000000000001400 ; void __noreturn abort(void)
.plt:0000000000001400 _abort          proc near               ; CODE XREF: set_program_name+9A↓p
.plt:0000000000001400                                         ; quotearg_buffer_restyled:def_23D1↓p ...
.plt:0000000000001400                 jmp     cs:abort_ptr
.plt:0000000000001400 _abort          endp
.plt:0000000000001400
.plt:0000000000001406 ; ---------------------------------------------------------------------------
.plt:0000000000001406                 push    2
.plt:000000000000140B                 jmp     sub_13D0
.plt:0000000000001410
.plt:0000000000001410 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001410
.plt:0000000000001410 ; Attributes: thunk
.plt:0000000000001410
.plt:0000000000001410 ; int *__errno_location(void)
.plt:0000000000001410 ___errno_location proc near             ; CODE XREF: main:loc_188C↓p
.plt:0000000000001410                                         ; main+247↓p ...
.plt:0000000000001410                 jmp     cs:__errno_location_ptr
.plt:0000000000001410 ___errno_location endp
.plt:0000000000001410
.plt:0000000000001416 ; ---------------------------------------------------------------------------
.plt:0000000000001416                 push    3
.plt:000000000000141B                 jmp     sub_13D0
.plt:0000000000001420
.plt:0000000000001420 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001420
.plt:0000000000001420 ; Attributes: thunk
.plt:0000000000001420
.plt:0000000000001420 ; int strncmp(const char *s1, const char *s2, size_t n)
.plt:0000000000001420 _strncmp        proc near               ; CODE XREF: usage+22C↓p
.plt:0000000000001420                                         ; usage+2ED↓p
.plt:0000000000001420                 jmp     cs:strncmp_ptr
.plt:0000000000001420 _strncmp        endp
.plt:0000000000001420
.plt:0000000000001426 ; ---------------------------------------------------------------------------
.plt:0000000000001426                 push    4
.plt:000000000000142B                 jmp     sub_13D0
.plt:0000000000001430
.plt:0000000000001430 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001430
.plt:0000000000001430 ; Attributes: noreturn thunk
.plt:0000000000001430
.plt:0000000000001430 ; void __noreturn _exit(int status)
.plt:0000000000001430 __exit          proc near               ; CODE XREF: close_stdout+88↓p
.plt:0000000000001430                 jmp     cs:_exit_ptr
.plt:0000000000001430 __exit          endp
.plt:0000000000001430
.plt:0000000000001436 ; ---------------------------------------------------------------------------
.plt:0000000000001436                 push    5
.plt:000000000000143B                 jmp     sub_13D0
.plt:0000000000001440
.plt:0000000000001440 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001440
.plt:0000000000001440 ; Attributes: thunk
.plt:0000000000001440
.plt:0000000000001440 ; size_t __fpending(FILE *fp)
.plt:0000000000001440 ___fpending     proc near               ; CODE XREF: close_stream+7↓p
.plt:0000000000001440                 jmp     cs:__fpending_ptr
.plt:0000000000001440 ___fpending     endp
.plt:0000000000001440
.plt:0000000000001446 ; ---------------------------------------------------------------------------
.plt:0000000000001446                 push    6
.plt:000000000000144B                 jmp     sub_13D0
.plt:0000000000001450
.plt:0000000000001450 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001450
.plt:0000000000001450 ; Attributes: thunk
.plt:0000000000001450
.plt:0000000000001450 ; char *textdomain(const char *domainname)
.plt:0000000000001450 _textdomain     proc near               ; CODE XREF: main+4D↓p
.plt:0000000000001450                 jmp     cs:textdomain_ptr
.plt:0000000000001450 _textdomain     endp
.plt:0000000000001450
.plt:0000000000001456 ; ---------------------------------------------------------------------------
.plt:0000000000001456                 push    7
.plt:000000000000145B                 jmp     sub_13D0
.plt:0000000000001460
.plt:0000000000001460 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001460
.plt:0000000000001460 ; Attributes: thunk
.plt:0000000000001460
.plt:0000000000001460 ; int fclose(FILE *stream)
.plt:0000000000001460 _fclose         proc near               ; CODE XREF: rpl_fclose+36↓p
.plt:0000000000001460                                         ; rpl_fclose+6B↓j
.plt:0000000000001460                 jmp     cs:fclose_ptr
.plt:0000000000001460 _fclose         endp
.plt:0000000000001460
.plt:0000000000001466 ; ---------------------------------------------------------------------------
.plt:0000000000001466                 push    8
.plt:000000000000146B                 jmp     sub_13D0
.plt:0000000000001470
.plt:0000000000001470 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001470
.plt:0000000000001470 ; Attributes: thunk
.plt:0000000000001470
.plt:0000000000001470 ; char *bindtextdomain(const char *domainname, const char *dirname)
.plt:0000000000001470 _bindtextdomain proc near               ; CODE XREF: main+41↓p
.plt:0000000000001470                 jmp     cs:bindtextdomain_ptr
.plt:0000000000001470 _bindtextdomain endp
.plt:0000000000001470
.plt:0000000000001476 ; ---------------------------------------------------------------------------
.plt:0000000000001476                 push    9
.plt:000000000000147B                 jmp     sub_13D0
.plt:0000000000001480
.plt:0000000000001480 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001480
.plt:0000000000001480 ; Attributes: thunk
.plt:0000000000001480
.plt:0000000000001480 ; int rmdir(const char *path)
.plt:0000000000001480 _rmdir          proc near               ; CODE XREF: main+123↓p
.plt:0000000000001480                                         ; main+23E↓p
.plt:0000000000001480                 jmp     cs:rmdir_ptr
.plt:0000000000001480 _rmdir          endp
.plt:0000000000001480
.plt:0000000000001486 ; ---------------------------------------------------------------------------
.plt:0000000000001486                 push    0Ah
.plt:000000000000148B                 jmp     sub_13D0
.plt:0000000000001490
.plt:0000000000001490 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001490
.plt:0000000000001490 ; Attributes: thunk
.plt:0000000000001490
.plt:0000000000001490 ; char *dcgettext(const char *domainname, const char *msgid, int category)
.plt:0000000000001490 _dcgettext      proc near               ; CODE XREF: main+181↓p
.plt:0000000000001490                                         ; main+1D0↓p ...
.plt:0000000000001490                 jmp     cs:dcgettext_ptr
.plt:0000000000001490 _dcgettext      endp
.plt:0000000000001490
.plt:0000000000001496 ; ---------------------------------------------------------------------------
.plt:0000000000001496                 push    0Bh
.plt:000000000000149B                 jmp     sub_13D0
.plt:00000000000014A0
.plt:00000000000014A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014A0
.plt:00000000000014A0 ; Attributes: thunk
.plt:00000000000014A0
.plt:00000000000014A0 ; size_t __ctype_get_mb_cur_max(void)
.plt:00000000000014A0 ___ctype_get_mb_cur_max proc near       ; CODE XREF: quotearg_buffer_restyled+6C↓p
.plt:00000000000014A0                 jmp     cs:__ctype_get_mb_cur_max_ptr
.plt:00000000000014A0 ___ctype_get_mb_cur_max endp
.plt:00000000000014A0
.plt:00000000000014A6 ; ---------------------------------------------------------------------------
.plt:00000000000014A6                 push    0Ch
.plt:00000000000014AB                 jmp     sub_13D0
.plt:00000000000014B0
.plt:00000000000014B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014B0
.plt:00000000000014B0 ; Attributes: thunk
.plt:00000000000014B0
.plt:00000000000014B0 ; size_t strlen(const char *s)
.plt:00000000000014B0 _strlen         proc near               ; CODE XREF: quotearg_buffer_restyled+157↓p
.plt:00000000000014B0                                         ; quotearg_buffer_restyled+8DB↓p ...
.plt:00000000000014B0                 jmp     cs:strlen_ptr
.plt:00000000000014B0 _strlen         endp
.plt:00000000000014B0
.plt:00000000000014B6 ; ---------------------------------------------------------------------------
.plt:00000000000014B6                 push    0Dh
.plt:00000000000014BB                 jmp     sub_13D0
.plt:00000000000014C0
.plt:00000000000014C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014C0
.plt:00000000000014C0 ; Attributes: thunk
.plt:00000000000014C0
.plt:00000000000014C0 ; int openat(int fd, const char *file, int oflag, ...)
.plt:00000000000014C0 _openat         proc near               ; CODE XREF: ignorable_failure+4B↓p
.plt:00000000000014C0                 jmp     cs:openat_ptr
.plt:00000000000014C0 _openat         endp
.plt:00000000000014C0
.plt:00000000000014C6 ; ---------------------------------------------------------------------------
.plt:00000000000014C6                 push    0Eh
.plt:00000000000014CB                 jmp     sub_13D0
.plt:00000000000014D0
.plt:00000000000014D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014D0
.plt:00000000000014D0 ; Attributes: noreturn thunk
.plt:00000000000014D0
.plt:00000000000014D0 ___stack_chk_fail proc near             ; CODE XREF: prog_fprintf:loc_208F↓p
.plt:00000000000014D0                                         ; quotearg_buffer_restyled:loc_3533↓p ...
.plt:00000000000014D0                 jmp     cs:__stack_chk_fail_ptr
.plt:00000000000014D0 ___stack_chk_fail endp
.plt:00000000000014D0
.plt:00000000000014D6 ; ---------------------------------------------------------------------------
.plt:00000000000014D6                 push    0Fh
.plt:00000000000014DB                 jmp     sub_13D0
.plt:00000000000014E0
.plt:00000000000014E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014E0
.plt:00000000000014E0 ; Attributes: thunk
.plt:00000000000014E0
.plt:00000000000014E0 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
.plt:00000000000014E0 _getopt_long    proc near               ; CODE XREF: main+77↓p
.plt:00000000000014E0                 jmp     cs:getopt_long_ptr
.plt:00000000000014E0 _getopt_long    endp
.plt:00000000000014E0
.plt:00000000000014E6 ; ---------------------------------------------------------------------------
.plt:00000000000014E6                 push    10h
.plt:00000000000014EB                 jmp     sub_13D0
.plt:00000000000014F0
.plt:00000000000014F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014F0
.plt:00000000000014F0 ; Attributes: thunk
.plt:00000000000014F0
.plt:00000000000014F0 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
.plt:00000000000014F0 _mbrtowc        proc near               ; CODE XREF: rpl_mbrtowc+32↓p
.plt:00000000000014F0                 jmp     cs:mbrtowc_ptr
.plt:00000000000014F0 _mbrtowc        endp
.plt:00000000000014F0
.plt:00000000000014F6 ; ---------------------------------------------------------------------------
.plt:00000000000014F6                 push    11h
.plt:00000000000014FB                 jmp     sub_13D0
.plt:0000000000001500
.plt:0000000000001500 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001500
.plt:0000000000001500 ; Attributes: thunk
.plt:0000000000001500
.plt:0000000000001500 ; int __overflow(_IO_FILE *, int)
.plt:0000000000001500 ___overflow     proc near               ; CODE XREF: prog_fprintf+108↓p
.plt:0000000000001500                 jmp     cs:__overflow_ptr
.plt:0000000000001500 ___overflow     endp
.plt:0000000000001500
.plt:0000000000001506 ; ---------------------------------------------------------------------------
.plt:0000000000001506                 push    12h
.plt:000000000000150B                 jmp     sub_13D0
.plt:0000000000001510
.plt:0000000000001510 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001510
.plt:0000000000001510 ; Attributes: thunk
.plt:0000000000001510
.plt:0000000000001510 ; char *strrchr(const char *s, int c)
.plt:0000000000001510 _strrchr        proc near               ; CODE XREF: main+208↓p
.plt:0000000000001510                                         ; set_program_name+E↓p
.plt:0000000000001510                 jmp     cs:strrchr_ptr
.plt:0000000000001510 _strrchr        endp
.plt:0000000000001510
.plt:0000000000001516 ; ---------------------------------------------------------------------------
.plt:0000000000001516                 push    13h
.plt:000000000000151B                 jmp     sub_13D0
.plt:0000000000001520
.plt:0000000000001520 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001520
.plt:0000000000001520 ; Attributes: thunk
.plt:0000000000001520
.plt:0000000000001520 ; __off_t lseek(int fd, __off_t offset, int whence)
.plt:0000000000001520 _lseek          proc near               ; CODE XREF: rpl_fclose+59↓p
.plt:0000000000001520                                         ; rpl_fseeko+3B↓p
.plt:0000000000001520                 jmp     cs:lseek_ptr
.plt:0000000000001520 _lseek          endp
.plt:0000000000001520
.plt:0000000000001526 ; ---------------------------------------------------------------------------
.plt:0000000000001526                 push    14h
.plt:000000000000152B                 jmp     sub_13D0
.plt:0000000000001530
.plt:0000000000001530 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001530
.plt:0000000000001530 ; Attributes: thunk
.plt:0000000000001530
.plt:0000000000001530 ; void *memset(void *s, int c, size_t n)
.plt:0000000000001530 _memset         proc near               ; CODE XREF: quotearg_n_options+99↓p
.plt:0000000000001530                                         ; xzalloc+12↓j
.plt:0000000000001530                 jmp     cs:memset_ptr
.plt:0000000000001530 _memset         endp
.plt:0000000000001530
.plt:0000000000001536 ; ---------------------------------------------------------------------------
.plt:0000000000001536                 push    15h
.plt:000000000000153B                 jmp     sub_13D0
.plt:0000000000001540
.plt:0000000000001540 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001540
.plt:0000000000001540 ; Attributes: thunk
.plt:0000000000001540
.plt:0000000000001540 ; int close(int fd)
.plt:0000000000001540 _close          proc near               ; CODE XREF: ignorable_failure+BC↓p
.plt:0000000000001540                 jmp     cs:close_ptr
.plt:0000000000001540 _close          endp
.plt:0000000000001540
.plt:0000000000001546 ; ---------------------------------------------------------------------------
.plt:0000000000001546                 push    16h
.plt:000000000000154B                 jmp     sub_13D0
.plt:0000000000001550
.plt:0000000000001550 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001550
.plt:0000000000001550 ; Attributes: thunk
.plt:0000000000001550
.plt:0000000000001550 ; int closedir(DIR *dirp)
.plt:0000000000001550 _closedir       proc near               ; CODE XREF: ignorable_failure+A4↓p
.plt:0000000000001550                                         ; ignorable_failure+CA↓p
.plt:0000000000001550                 jmp     cs:closedir_ptr
.plt:0000000000001550 _closedir       endp
.plt:0000000000001550
.plt:0000000000001556 ; ---------------------------------------------------------------------------
.plt:0000000000001556                 push    17h
.plt:000000000000155B                 jmp     sub_13D0
.plt:0000000000001560
.plt:0000000000001560 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001560
.plt:0000000000001560 ; Attributes: thunk
.plt:0000000000001560
.plt:0000000000001560 ; int memcmp(const void *s1, const void *s2, size_t n)
.plt:0000000000001560 _memcmp         proc near               ; CODE XREF: quotearg_buffer_restyled+19A↓p
.plt:0000000000001560                 jmp     cs:memcmp_ptr
.plt:0000000000001560 _memcmp         endp
.plt:0000000000001560
.plt:0000000000001566 ; ---------------------------------------------------------------------------
.plt:0000000000001566                 push    18h
.plt:000000000000156B                 jmp     sub_13D0
.plt:0000000000001570
.plt:0000000000001570 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001570
.plt:0000000000001570 ; Attributes: thunk
.plt:0000000000001570
.plt:0000000000001570 ; int fputs_unlocked(const char *s, FILE *stream)
.plt:0000000000001570 _fputs_unlocked proc near               ; CODE XREF: usage+9D↓p
.plt:0000000000001570                                         ; usage+C2↓p ...
.plt:0000000000001570                 jmp     cs:fputs_unlocked_ptr
.plt:0000000000001570 _fputs_unlocked endp
.plt:0000000000001570
.plt:0000000000001576 ; ---------------------------------------------------------------------------
.plt:0000000000001576                 push    19h
.plt:000000000000157B                 jmp     sub_13D0
.plt:0000000000001580
.plt:0000000000001580 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001580
.plt:0000000000001580 ; Attributes: thunk
.plt:0000000000001580
.plt:0000000000001580 ; void *calloc(size_t nmemb, size_t size)
.plt:0000000000001580 _calloc         proc near               ; CODE XREF: xcalloc+1A↓p
.plt:0000000000001580                 jmp     cs:calloc_ptr
.plt:0000000000001580 _calloc         endp
.plt:0000000000001580
.plt:0000000000001586 ; ---------------------------------------------------------------------------
.plt:0000000000001586                 push    1Ah
.plt:000000000000158B                 jmp     sub_13D0
.plt:0000000000001590
.plt:0000000000001590 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001590
.plt:0000000000001590 ; Attributes: thunk
.plt:0000000000001590
.plt:0000000000001590 ; void *memcpy(void *dest, const void *src, size_t n)
.plt:0000000000001590 _memcpy         proc near               ; CODE XREF: xmemdup+23↓j
.plt:0000000000001590                                         ; vasnprintf+2AE↓p ...
.plt:0000000000001590                 jmp     cs:memcpy_ptr
.plt:0000000000001590 _memcpy         endp
.plt:0000000000001590
.plt:0000000000001596 ; ---------------------------------------------------------------------------
.plt:0000000000001596                 push    1Bh
.plt:000000000000159B                 jmp     sub_13D0
.plt:00000000000015A0
.plt:00000000000015A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015A0
.plt:00000000000015A0 ; Attributes: thunk
.plt:00000000000015A0
.plt:00000000000015A0 ; int fileno(FILE *stream)
.plt:00000000000015A0 _fileno         proc near               ; CODE XREF: rpl_fclose+7↓p
.plt:00000000000015A0                                         ; rpl_fclose+4B↓p ...
.plt:00000000000015A0                 jmp     cs:fileno_ptr
.plt:00000000000015A0 _fileno         endp
.plt:00000000000015A0
.plt:00000000000015A6 ; ---------------------------------------------------------------------------
.plt:00000000000015A6                 push    1Ch
.plt:00000000000015AB                 jmp     sub_13D0
.plt:00000000000015B0
.plt:00000000000015B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015B0
.plt:00000000000015B0 ; Attributes: thunk
.plt:00000000000015B0
.plt:00000000000015B0 ; struct dirent *readdir(DIR *dirp)
.plt:00000000000015B0 _readdir        proc near               ; CODE XREF: ignorable_failure+7B↓p
.plt:00000000000015B0                 jmp     cs:readdir_ptr
.plt:00000000000015B0 _readdir        endp
.plt:00000000000015B0
.plt:00000000000015B6 ; ---------------------------------------------------------------------------
.plt:00000000000015B6                 push    1Dh
.plt:00000000000015BB                 jmp     sub_13D0
.plt:00000000000015C0
.plt:00000000000015C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015C0
.plt:00000000000015C0 ; Attributes: thunk
.plt:00000000000015C0
.plt:00000000000015C0 ; void *malloc(size_t size)
.plt:00000000000015C0 _malloc         proc near               ; CODE XREF: xmalloc+4↓p
.plt:00000000000015C0                                         ; vasnprintf+D2↓p ...
.plt:00000000000015C0                 jmp     cs:malloc_ptr
.plt:00000000000015C0 _malloc         endp
.plt:00000000000015C0
.plt:00000000000015C6 ; ---------------------------------------------------------------------------
.plt:00000000000015C6                 push    1Eh
.plt:00000000000015CB                 jmp     sub_13D0
.plt:00000000000015D0
.plt:00000000000015D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015D0
.plt:00000000000015D0 ; Attributes: thunk
.plt:00000000000015D0
.plt:00000000000015D0 ; int fflush(FILE *stream)
.plt:00000000000015D0 _fflush         proc near               ; CODE XREF: rpl_fflush+1E↓j
.plt:00000000000015D0                                         ; rpl_fflush+3B↓j
.plt:00000000000015D0                 jmp     cs:fflush_ptr
.plt:00000000000015D0 _fflush         endp
.plt:00000000000015D0
.plt:00000000000015D6 ; ---------------------------------------------------------------------------
.plt:00000000000015D6                 push    1Fh
.plt:00000000000015DB                 jmp     sub_13D0
.plt:00000000000015E0
.plt:00000000000015E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015E0
.plt:00000000000015E0 ; Attributes: thunk
.plt:00000000000015E0
.plt:00000000000015E0 ; char *nl_langinfo(nl_item item)
.plt:00000000000015E0 _nl_langinfo    proc near               ; CODE XREF: locale_charset+9↓p
.plt:00000000000015E0                 jmp     cs:nl_langinfo_ptr
.plt:00000000000015E0 _nl_langinfo    endp
.plt:00000000000015E0
.plt:00000000000015E6 ; ---------------------------------------------------------------------------
.plt:00000000000015E6                 push    20h ; ' '
.plt:00000000000015EB                 jmp     sub_13D0
.plt:00000000000015F0
.plt:00000000000015F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015F0
.plt:00000000000015F0 ; Attributes: thunk
.plt:00000000000015F0
.plt:00000000000015F0 ; int __freading(FILE *fp)
.plt:00000000000015F0 ___freading     proc near               ; CODE XREF: rpl_fclose+13↓p
.plt:00000000000015F0                                         ; rpl_fflush+9↓p
.plt:00000000000015F0                 jmp     cs:__freading_ptr
.plt:00000000000015F0 ___freading     endp
.plt:00000000000015F0
.plt:00000000000015F6 ; ---------------------------------------------------------------------------
.plt:00000000000015F6                 push    21h ; '!'
.plt:00000000000015FB                 jmp     sub_13D0
.plt:0000000000001600
.plt:0000000000001600 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001600
.plt:0000000000001600 ; Attributes: thunk
.plt:0000000000001600
.plt:0000000000001600 ; size_t fwrite_unlocked(const void *ptr, size_t size, size_t n, FILE *stream)
.plt:0000000000001600 _fwrite_unlocked proc near              ; CODE XREF: prog_fprintf+91↓p
.plt:0000000000001600                 jmp     cs:fwrite_unlocked_ptr
.plt:0000000000001600 _fwrite_unlocked endp
.plt:0000000000001600
.plt:0000000000001606 ; ---------------------------------------------------------------------------
.plt:0000000000001606                 push    22h ; '"'
.plt:000000000000160B                 jmp     sub_13D0
.plt:0000000000001610
.plt:0000000000001610 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001610
.plt:0000000000001610 ; Attributes: thunk
.plt:0000000000001610
.plt:0000000000001610 ; void *realloc(void *ptr, size_t size)
.plt:0000000000001610 _realloc        proc near               ; CODE XREF: xrealloc+11↓p
.plt:0000000000001610                                         ; vasnprintf+285↓p ...
.plt:0000000000001610                 jmp     cs:realloc_ptr
.plt:0000000000001610 _realloc        endp
.plt:0000000000001610
.plt:0000000000001616 ; ---------------------------------------------------------------------------
.plt:0000000000001616                 push    23h ; '#'
.plt:000000000000161B                 jmp     sub_13D0
.plt:0000000000001620
.plt:0000000000001620 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001620
.plt:0000000000001620 ; Attributes: thunk
.plt:0000000000001620
.plt:0000000000001620 ; char *setlocale(int category, const char *locale)
.plt:0000000000001620 _setlocale      proc near               ; CODE XREF: main+2E↓p
.plt:0000000000001620                                         ; usage+213↓p ...
.plt:0000000000001620                 jmp     cs:setlocale_ptr
.plt:0000000000001620 _setlocale      endp
.plt:0000000000001620
.plt:0000000000001626 ; ---------------------------------------------------------------------------
.plt:0000000000001626                 push    24h ; '$'
.plt:000000000000162B                 jmp     sub_13D0
.plt:0000000000001630
.plt:0000000000001630 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001630
.plt:0000000000001630 ; Attributes: thunk
.plt:0000000000001630
.plt:0000000000001630 ___printf_chk   proc near               ; CODE XREF: usage+78↓p
.plt:0000000000001630                                         ; usage+207↓p ...
.plt:0000000000001630                 jmp     cs:__printf_chk_ptr
.plt:0000000000001630 ___printf_chk   endp
.plt:0000000000001630
.plt:0000000000001636 ; ---------------------------------------------------------------------------
.plt:0000000000001636                 push    25h ; '%'
.plt:000000000000163B                 jmp     sub_13D0
.plt:0000000000001640
.plt:0000000000001640 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001640
.plt:0000000000001640 ; Attributes: thunk
.plt:0000000000001640
.plt:0000000000001640 ; void error(int status, int errnum, const char *format, ...)
.plt:0000000000001640 _error          proc near               ; CODE XREF: main+1E6↓p
.plt:0000000000001640                                         ; main+290↓p ...
.plt:0000000000001640                 jmp     cs:error_ptr
.plt:0000000000001640 _error          endp
.plt:0000000000001640
.plt:0000000000001646 ; ---------------------------------------------------------------------------
.plt:0000000000001646                 push    26h ; '&'
.plt:000000000000164B                 jmp     sub_13D0
.plt:0000000000001650
.plt:0000000000001650 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001650
.plt:0000000000001650 ; Attributes: thunk
.plt:0000000000001650
.plt:0000000000001650 ; int fseeko(FILE *stream, __off_t off, int whence)
.plt:0000000000001650 _fseeko         proc near               ; CODE XREF: rpl_fseeko:loc_4BBA↓j
.plt:0000000000001650                 jmp     cs:fseeko_ptr
.plt:0000000000001650 _fseeko         endp
.plt:0000000000001650
.plt:0000000000001656 ; ---------------------------------------------------------------------------
.plt:0000000000001656                 push    27h ; '''
.plt:000000000000165B                 jmp     sub_13D0
.plt:0000000000001660
.plt:0000000000001660 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001660
.plt:0000000000001660 ; Attributes: thunk
.plt:0000000000001660
.plt:0000000000001660 ; DIR *fdopendir(int fd)
.plt:0000000000001660 _fdopendir      proc near               ; CODE XREF: ignorable_failure+59↓p
.plt:0000000000001660                 jmp     cs:fdopendir_ptr
.plt:0000000000001660 _fdopendir      endp
.plt:0000000000001660
.plt:0000000000001666 ; ---------------------------------------------------------------------------
.plt:0000000000001666                 push    28h ; '('
.plt:000000000000166B                 jmp     sub_13D0
.plt:0000000000001670
.plt:0000000000001670 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001670
.plt:0000000000001670 ; Attributes: thunk
.plt:0000000000001670
.plt:0000000000001670 ; int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
.plt:0000000000001670 ___cxa_atexit   proc near               ; CODE XREF: atexit+9↓j
.plt:0000000000001670                 jmp     cs:__cxa_atexit_ptr
.plt:0000000000001670 ___cxa_atexit   endp
.plt:0000000000001670
.plt:0000000000001676 ; ---------------------------------------------------------------------------
.plt:0000000000001676                 push    29h ; ')'
.plt:000000000000167B                 jmp     sub_13D0
.plt:0000000000001680
.plt:0000000000001680 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001680
.plt:0000000000001680 ; Attributes: noreturn thunk
.plt:0000000000001680
.plt:0000000000001680 ; void __noreturn exit(int status)
.plt:0000000000001680 _exit           proc near               ; CODE XREF: main+DA↓p
.plt:0000000000001680                                         ; usage+58↓p
.plt:0000000000001680                 jmp     cs:exit_ptr
.plt:0000000000001680 _exit           endp
.plt:0000000000001680
.plt:0000000000001686 ; ---------------------------------------------------------------------------
.plt:0000000000001686                 push    2Ah ; '*'
.plt:000000000000168B                 jmp     sub_13D0
.plt:0000000000001690
.plt:0000000000001690 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001690
.plt:0000000000001690 ; Attributes: thunk
.plt:0000000000001690
.plt:0000000000001690 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
.plt:0000000000001690 _fwrite         proc near               ; CODE XREF: set_program_name+95↓p
.plt:0000000000001690                                         ; rpl_vfprintf+66↓p
.plt:0000000000001690                 jmp     cs:fwrite_ptr
.plt:0000000000001690 _fwrite         endp
.plt:0000000000001690
.plt:0000000000001696 ; ---------------------------------------------------------------------------
.plt:0000000000001696                 push    2Bh ; '+'
.plt:000000000000169B                 jmp     sub_13D0
.plt:00000000000016A0
.plt:00000000000016A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016A0
.plt:00000000000016A0 ; Attributes: thunk
.plt:00000000000016A0
.plt:00000000000016A0 ___fprintf_chk  proc near               ; CODE XREF: usage+51↓p
.plt:00000000000016A0                                         ; version_etc_arn+37↓p ...
.plt:00000000000016A0                 jmp     cs:__fprintf_chk_ptr
.plt:00000000000016A0 ___fprintf_chk  endp
.plt:00000000000016A0
.plt:00000000000016A6 ; ---------------------------------------------------------------------------
.plt:00000000000016A6                 push    2Ch ; ','
.plt:00000000000016AB                 jmp     sub_13D0
.plt:00000000000016B0
.plt:00000000000016B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016B0
.plt:00000000000016B0 ; Attributes: thunk
.plt:00000000000016B0
.plt:00000000000016B0 ; int mbsinit(const mbstate_t *ps)
.plt:00000000000016B0 _mbsinit        proc near               ; CODE XREF: quotearg_buffer_restyled+9A8↓p
.plt:00000000000016B0                 jmp     cs:mbsinit_ptr
.plt:00000000000016B0 _mbsinit        endp
.plt:00000000000016B0
.plt:00000000000016B6 ; ---------------------------------------------------------------------------
.plt:00000000000016B6                 push    2Dh ; '-'
.plt:00000000000016BB                 jmp     sub_13D0
.plt:00000000000016C0
.plt:00000000000016C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016C0
.plt:00000000000016C0 ; Attributes: thunk
.plt:00000000000016C0
.plt:00000000000016C0 ; int iswprint(wint_t wc)
.plt:00000000000016C0 _iswprint       proc near               ; CODE XREF: quotearg_buffer_restyled+990↓p
.plt:00000000000016C0                 jmp     cs:iswprint_ptr
.plt:00000000000016C0 _iswprint       endp
.plt:00000000000016C0
.plt:00000000000016C6 ; ---------------------------------------------------------------------------
.plt:00000000000016C6                 push    2Eh ; '.'
.plt:00000000000016CB                 jmp     sub_13D0
.plt:00000000000016D0
.plt:00000000000016D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016D0
.plt:00000000000016D0 ; Attributes: thunk
.plt:00000000000016D0
.plt:00000000000016D0 ; const unsigned __int16 **__ctype_b_loc(void)
.plt:00000000000016D0 ___ctype_b_loc  proc near               ; CODE XREF: quotearg_buffer_restyled+513↓p
.plt:00000000000016D0                 jmp     cs:__ctype_b_loc_ptr
.plt:00000000000016D0 ___ctype_b_loc  endp
.plt:00000000000016D0
.plt:00000000000016D6 ; ---------------------------------------------------------------------------
.plt:00000000000016D6                 push    2Fh ; '/'
.plt:00000000000016DB                 jmp     sub_13D0
.plt:00000000000016DB ; } // starts at 13D0
.plt:00000000000016DB _plt            ends
.plt:00000000000016DB
.plt.got:00000000000016E0 ; ===========================================================================
.plt.got:00000000000016E0
.plt.got:00000000000016E0 ; Segment type: Pure code
.plt.got:00000000000016E0 ; Segment permissions: Read/Execute
.plt.got:00000000000016E0 _plt_got        segment qword public 'CODE' use64
.plt.got:00000000000016E0                 assume cs:_plt_got
.plt.got:00000000000016E0                 ;org 16E0h
.plt.got:00000000000016E0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:00000000000016E0
.plt.got:00000000000016E0 ; =============== S U B R O U T I N E =======================================
.plt.got:00000000000016E0
.plt.got:00000000000016E0 ; Attributes: thunk
.plt.got:00000000000016E0
.plt.got:00000000000016E0 ; int __fastcall _cxa_finalize(void *)
.plt.got:00000000000016E0 __cxa_finalize  proc near               ; CODE XREF: __do_global_dtors_aux+1E↓p
.plt.got:00000000000016E0 ; __unwind {
.plt.got:00000000000016E0                 jmp     cs:__cxa_finalize_ptr
.plt.got:00000000000016E0 __cxa_finalize  endp
.plt.got:00000000000016E0
.plt.got:00000000000016E0 ; ---------------------------------------------------------------------------
.plt.got:00000000000016E6                 align 8
.plt.got:00000000000016E6 ; } // starts at 16E0
.plt.got:00000000000016E6 _plt_got        ends
.plt.got:00000000000016E6
LOAD:00000000000016E8 ; ===========================================================================
LOAD:00000000000016E8
LOAD:00000000000016E8 ; Segment type: Pure code
LOAD:00000000000016E8 ; Segment permissions: Read/Execute
LOAD:00000000000016E8 LOAD            segment byte public 'CODE' use64
LOAD:00000000000016E8                 assume cs:LOAD
LOAD:00000000000016E8                 ;org 16E8h
LOAD:00000000000016E8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000016E8                 align 10h
LOAD:00000000000016E8 LOAD            ends
LOAD:00000000000016E8
.text:00000000000016F0 ; ===========================================================================
.text:00000000000016F0
.text:00000000000016F0 ; Segment type: Pure code
.text:00000000000016F0 ; Segment permissions: Read/Execute
.text:00000000000016F0 _text           segment para public 'CODE' use64
.text:00000000000016F0                 assume cs:_text
.text:00000000000016F0                 ;org 16F0h
.text:00000000000016F0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00000000000016F0
.text:00000000000016F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000016F0
.text:00000000000016F0
.text:00000000000016F0 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:00000000000016F0                 public main
.text:00000000000016F0 main            proc near               ; DATA XREF: start+1D↓o
.text:00000000000016F0 ; __unwind {
.text:00000000000016F0                 push    r15
.text:00000000000016F2                 push    r14
.text:00000000000016F4                 push    r13
.text:00000000000016F6                 push    r12
.text:00000000000016F8                 lea     r12, longopts
.text:00000000000016FF                 push    rbp
.text:0000000000001700                 push    rbx
.text:0000000000001701                 mov     ebp, edi
.text:0000000000001703                 mov     rbx, rsi
.text:0000000000001706                 sub     rsp, 8
.text:000000000000170A                 mov     rdi, [rsi]
.text:000000000000170D                 call    set_program_name
.text:0000000000001712                 lea     rsi, aWrittenBySSAnd+1Bh ; locale
.text:0000000000001719                 mov     edi, 6          ; category
.text:000000000000171E                 call    _setlocale
.text:0000000000001723                 lea     rsi, dirname    ; "/usr/local/share/locale"
.text:000000000000172A                 lea     rdi, domainname ; "coreutils"
.text:0000000000001731                 call    _bindtextdomain
.text:0000000000001736                 lea     rdi, domainname ; "coreutils"
.text:000000000000173D                 call    _textdomain
.text:0000000000001742                 lea     rdi, close_stdout
.text:0000000000001749                 call    atexit
.text:000000000000174E                 mov     cs:remove_empty_parents, 0
.text:0000000000001755
.text:0000000000001755 loc_1755:                               ; CODE XREF: main+9D↓j
.text:0000000000001755                                         ; main+E7↓j ...
.text:0000000000001755                 lea     rdx, shortopts  ; "pv"
.text:000000000000175C                 xor     r8d, r8d        ; longind
.text:000000000000175F                 mov     rcx, r12        ; longopts
.text:0000000000001762                 mov     rsi, rbx        ; argv
.text:0000000000001765                 mov     edi, ebp        ; argc
.text:0000000000001767                 call    _getopt_long
.text:000000000000176C                 cmp     eax, 0FFFFFFFFh
.text:000000000000176F                 jz      short loc_17EC
.text:0000000000001771                 cmp     eax, 70h ; 'p'
.text:0000000000001774                 jz      short loc_17D0
.text:0000000000001776                 jle     short loc_1790
.text:0000000000001778                 cmp     eax, 76h ; 'v'
.text:000000000000177B                 jz      short loc_17E0
.text:000000000000177D                 add     eax, 0FFFFFF80h
.text:0000000000001780                 jnz     loc_1A0C
.text:0000000000001786                 mov     cs:ignore_fail_on_non_empty, 1
.text:000000000000178D                 jmp     short loc_1755
.text:000000000000178D ; ---------------------------------------------------------------------------
.text:000000000000178F                 align 10h
.text:0000000000001790
.text:0000000000001790 loc_1790:                               ; CODE XREF: main+86↑j
.text:0000000000001790                 cmp     eax, 0FFFFFF7Dh
.text:0000000000001795                 jnz     loc_19DD
.text:000000000000179B                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:00000000000017A2                 mov     rcx, cs:Version
.text:00000000000017A9                 lea     r8, aDavidMackenzie ; "David MacKenzie"
.text:00000000000017B0                 lea     rdx, unk_6D60
.text:00000000000017B7                 lea     rsi, aRmdir_0   ; "rmdir"
.text:00000000000017BE                 xor     r9d, r9d
.text:00000000000017C1                 xor     eax, eax
.text:00000000000017C3                 call    version_etc
.text:00000000000017C8                 xor     edi, edi        ; status
.text:00000000000017CA                 call    _exit
.text:00000000000017CA ; ---------------------------------------------------------------------------
.text:00000000000017CF                 align 10h
.text:00000000000017D0
.text:00000000000017D0 loc_17D0:                               ; CODE XREF: main+84↑j
.text:00000000000017D0                 mov     cs:remove_empty_parents, 1
.text:00000000000017D7                 jmp     loc_1755
.text:00000000000017D7 ; ---------------------------------------------------------------------------
.text:00000000000017DC                 align 20h
.text:00000000000017E0
.text:00000000000017E0 loc_17E0:                               ; CODE XREF: main+8B↑j
.text:00000000000017E0                 mov     cs:verbose, 1
.text:00000000000017E7                 jmp     loc_1755
.text:00000000000017EC ; ---------------------------------------------------------------------------
.text:00000000000017EC
.text:00000000000017EC loc_17EC:                               ; CODE XREF: main+7F↑j
.text:00000000000017EC                 mov     eax, cs:optind@@GLIBC_2_2_5
.text:00000000000017F2                 cmp     eax, ebp
.text:00000000000017F4                 jz      loc_19EB
.text:00000000000017FA                 mov     r12d, 1
.text:0000000000001800                 jl      short loc_1844
.text:0000000000001802                 jmp     loc_19C9
.text:0000000000001802 ; ---------------------------------------------------------------------------
.text:0000000000001807                 align 10h
.text:0000000000001810
.text:0000000000001810 loc_1810:                               ; CODE XREF: main+161↓j
.text:0000000000001810                                         ; main+19A↓j
.text:0000000000001810                 mov     rdi, r14        ; path
.text:0000000000001813                 call    _rmdir
.text:0000000000001818                 test    eax, eax
.text:000000000000181A                 jnz     short loc_188C
.text:000000000000181C                 movzx   r13d, cs:remove_empty_parents
.text:0000000000001824                 test    r13b, r13b
.text:0000000000001827                 jnz     loc_18E0
.text:000000000000182D
.text:000000000000182D loc_182D:                               ; CODE XREF: main+1B0↓j
.text:000000000000182D                                         ; main+1EB↓j ...
.text:000000000000182D                 mov     eax, cs:optind@@GLIBC_2_2_5
.text:0000000000001833                 add     eax, 1
.text:0000000000001836                 cmp     eax, ebp
.text:0000000000001838                 mov     cs:optind@@GLIBC_2_2_5, eax
.text:000000000000183E                 jge     loc_19C9
.text:0000000000001844
.text:0000000000001844 loc_1844:                               ; CODE XREF: main+110↑j
.text:0000000000001844                 cmp     cs:verbose, 0
.text:000000000000184B                 cdqe
.text:000000000000184D                 mov     r14, [rbx+rax*8]
.text:0000000000001851                 jz      short loc_1810
.text:0000000000001853                 mov     rsi, r14
.text:0000000000001856                 mov     edi, 4
.text:000000000000185B                 call    quotearg_style
.text:0000000000001860                 lea     rsi, msgid      ; "removing directory, %s"
.text:0000000000001867                 xor     edi, edi        ; domainname
.text:0000000000001869                 mov     edx, 5          ; category
.text:000000000000186E                 mov     r13, rax
.text:0000000000001871                 call    _dcgettext
.text:0000000000001876                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; s
.text:000000000000187D                 mov     rsi, rax
.text:0000000000001880                 mov     rdx, r13
.text:0000000000001883                 xor     eax, eax
.text:0000000000001885                 call    prog_fprintf
.text:000000000000188A                 jmp     short loc_1810
.text:000000000000188C ; ---------------------------------------------------------------------------
.text:000000000000188C
.text:000000000000188C loc_188C:                               ; CODE XREF: main+12A↑j
.text:000000000000188C                 call    ___errno_location
.text:0000000000001891                 mov     edi, [rax]
.text:0000000000001893                 mov     rsi, r14
.text:0000000000001896                 mov     r13, rax
.text:0000000000001899                 call    ignorable_failure
.text:000000000000189E                 test    al, al
.text:00000000000018A0                 jnz     short loc_182D
.text:00000000000018A2                 mov     rsi, r14
.text:00000000000018A5                 mov     edi, 4
.text:00000000000018AA                 call    quotearg_style
.text:00000000000018AF                 lea     rsi, aFailedToRemove ; "failed to remove %s"
.text:00000000000018B6                 mov     edx, 5          ; category
.text:00000000000018BB                 xor     edi, edi        ; domainname
.text:00000000000018BD                 mov     r12, rax
.text:00000000000018C0                 call    _dcgettext
.text:00000000000018C5                 mov     esi, [r13+0]    ; errnum
.text:00000000000018C9                 mov     rcx, r12
.text:00000000000018CC                 mov     rdx, rax        ; format
.text:00000000000018CF                 xor     edi, edi        ; status
.text:00000000000018D1                 xor     eax, eax
.text:00000000000018D3                 xor     r12d, r12d
.text:00000000000018D6                 call    _error
.text:00000000000018DB                 jmp     loc_182D
.text:00000000000018E0 ; ---------------------------------------------------------------------------
.text:00000000000018E0
.text:00000000000018E0 loc_18E0:                               ; CODE XREF: main+137↑j
.text:00000000000018E0                 mov     rdi, r14
.text:00000000000018E3                 call    strip_trailing_slashes
.text:00000000000018E8                 nop     dword ptr [rax+rax+00000000h]
.text:00000000000018F0
.text:00000000000018F0 loc_18F0:                               ; CODE XREF: main+245↓j
.text:00000000000018F0                 mov     esi, 2Fh ; '/'  ; c
.text:00000000000018F5                 mov     rdi, r14        ; s
.text:00000000000018F8                 call    _strrchr
.text:00000000000018FD                 test    rax, rax
.text:0000000000001900                 jz      loc_1985
.text:0000000000001906                 cmp     r14, rax
.text:0000000000001909                 jb      short loc_1919
.text:000000000000190B                 jmp     short loc_191E
.text:000000000000190B ; ---------------------------------------------------------------------------
.text:000000000000190D                 align 10h
.text:0000000000001910
.text:0000000000001910 loc_1910:                               ; CODE XREF: main+22C↓j
.text:0000000000001910                 sub     rax, 1
.text:0000000000001914                 cmp     r14, rax
.text:0000000000001917                 jz      short loc_191E
.text:0000000000001919
.text:0000000000001919 loc_1919:                               ; CODE XREF: main+219↑j
.text:0000000000001919                 cmp     byte ptr [rax], 2Fh ; '/'
.text:000000000000191C                 jz      short loc_1910
.text:000000000000191E
.text:000000000000191E loc_191E:                               ; CODE XREF: main+21B↑j
.text:000000000000191E                                         ; main+227↑j
.text:000000000000191E                 cmp     cs:verbose, 0
.text:0000000000001925                 mov     byte ptr [rax+1], 0
.text:0000000000001929                 jnz     short loc_198D
.text:000000000000192B
.text:000000000000192B loc_192B:                               ; CODE XREF: main+2D4↓j
.text:000000000000192B                 mov     rdi, r14        ; path
.text:000000000000192E                 call    _rmdir
.text:0000000000001933                 test    eax, eax
.text:0000000000001935                 jz      short loc_18F0
.text:0000000000001937                 call    ___errno_location
.text:000000000000193C                 mov     edi, [rax]
.text:000000000000193E                 mov     rsi, r14
.text:0000000000001941                 mov     r15, rax
.text:0000000000001944                 call    ignorable_failure
.text:0000000000001949                 test    al, al
.text:000000000000194B                 jnz     short loc_1985
.text:000000000000194D                 mov     rsi, r14
.text:0000000000001950                 mov     edi, 4
.text:0000000000001955                 call    quotearg_style
.text:000000000000195A                 lea     rsi, aFailedToRemove_0 ; "failed to remove directory %s"
.text:0000000000001961                 mov     edx, 5          ; category
.text:0000000000001966                 xor     edi, edi        ; domainname
.text:0000000000001968                 mov     r13, rax
.text:000000000000196B                 call    _dcgettext
.text:0000000000001970                 mov     esi, [r15]      ; errnum
.text:0000000000001973                 mov     rcx, r13
.text:0000000000001976                 mov     rdx, rax        ; format
.text:0000000000001979                 xor     edi, edi        ; status
.text:000000000000197B                 xor     eax, eax
.text:000000000000197D                 xor     r13d, r13d
.text:0000000000001980                 call    _error
.text:0000000000001985
.text:0000000000001985 loc_1985:                               ; CODE XREF: main+210↑j
.text:0000000000001985                                         ; main+25B↑j
.text:0000000000001985                 and     r12d, r13d
.text:0000000000001988                 jmp     loc_182D
.text:000000000000198D ; ---------------------------------------------------------------------------
.text:000000000000198D
.text:000000000000198D loc_198D:                               ; CODE XREF: main+239↑j
.text:000000000000198D                 mov     rsi, r14
.text:0000000000001990                 mov     edi, 4
.text:0000000000001995                 call    quotearg_style
.text:000000000000199A                 lea     rsi, msgid      ; "removing directory, %s"
.text:00000000000019A1                 xor     edi, edi        ; domainname
.text:00000000000019A3                 mov     edx, 5          ; category
.text:00000000000019A8                 mov     r15, rax
.text:00000000000019AB                 call    _dcgettext
.text:00000000000019B0                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; s
.text:00000000000019B7                 mov     rsi, rax
.text:00000000000019BA                 mov     rdx, r15
.text:00000000000019BD                 xor     eax, eax
.text:00000000000019BF                 call    prog_fprintf
.text:00000000000019C4                 jmp     loc_192B
.text:00000000000019C9 ; ---------------------------------------------------------------------------
.text:00000000000019C9
.text:00000000000019C9 loc_19C9:                               ; CODE XREF: main+112↑j
.text:00000000000019C9                                         ; main+14E↑j
.text:00000000000019C9                 xor     r12d, 1
.text:00000000000019CD                 pop     rdx
.text:00000000000019CE                 movzx   eax, r12b
.text:00000000000019D2                 pop     rbx
.text:00000000000019D3                 pop     rbp
.text:00000000000019D4                 pop     r12
.text:00000000000019D6                 pop     r13
.text:00000000000019D8                 pop     r14
.text:00000000000019DA                 pop     r15
.text:00000000000019DC                 retn
.text:00000000000019DD ; ---------------------------------------------------------------------------
.text:00000000000019DD
.text:00000000000019DD loc_19DD:                               ; CODE XREF: main+A5↑j
.text:00000000000019DD                 cmp     eax, 0FFFFFF7Eh
.text:00000000000019E2                 jnz     short loc_1A0C
.text:00000000000019E4                 xor     edi, edi        ; status
.text:00000000000019E6                 call    usage
.text:00000000000019EB ; ---------------------------------------------------------------------------
.text:00000000000019EB
.text:00000000000019EB loc_19EB:                               ; CODE XREF: main+104↑j
.text:00000000000019EB                 lea     rsi, aMissingOperand ; "missing operand"
.text:00000000000019F2                 mov     edx, 5          ; category
.text:00000000000019F7                 xor     edi, edi        ; domainname
.text:00000000000019F9                 call    _dcgettext
.text:00000000000019FE                 xor     esi, esi        ; errnum
.text:0000000000001A00                 mov     rdx, rax        ; format
.text:0000000000001A03                 xor     edi, edi        ; status
.text:0000000000001A05                 xor     eax, eax
.text:0000000000001A07                 call    _error
.text:0000000000001A0C
.text:0000000000001A0C loc_1A0C:                               ; CODE XREF: main+90↑j
.text:0000000000001A0C                                         ; main+2F2↑j
.text:0000000000001A0C                 mov     edi, 1          ; status
.text:0000000000001A11                 call    usage
.text:0000000000001A11 ; } // starts at 16F0
.text:0000000000001A11 main            endp
.text:0000000000001A11
.text:0000000000001A11 ; ---------------------------------------------------------------------------
.text:0000000000001A16                 align 20h
.text:0000000000001A20
.text:0000000000001A20 ; =============== S U B R O U T I N E =======================================
.text:0000000000001A20
.text:0000000000001A20 ; Attributes: noreturn fuzzy-sp info_from_lumina
.text:0000000000001A20
.text:0000000000001A20 ; void __fastcall __noreturn start(__int64, __int64, void (*)(void))
.text:0000000000001A20                 public start
.text:0000000000001A20 start           proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:0000000000001A20 ; __unwind {
.text:0000000000001A20                 xor     ebp, ebp
.text:0000000000001A22                 mov     r9, rdx         ; rtld_fini
.text:0000000000001A25                 pop     rsi             ; argc
.text:0000000000001A26                 mov     rdx, rsp        ; ubp_av
.text:0000000000001A29                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:0000000000001A2D                 push    rax
.text:0000000000001A2E                 push    rsp             ; stack_end
.text:0000000000001A2F                 lea     r8, __libc_csu_fini ; fini
.text:0000000000001A36                 lea     rcx, __libc_csu_init ; init
.text:0000000000001A3D                 lea     rdi, main       ; main
.text:0000000000001A44                 call    cs:__libc_start_main_ptr
.text:0000000000001A4A                 hlt
.text:0000000000001A4A ; } // starts at 1A20
.text:0000000000001A4A start           endp
.text:0000000000001A4A
.text:0000000000001A4A ; ---------------------------------------------------------------------------
.text:0000000000001A4B                 align 10h
.text:0000000000001A50
.text:0000000000001A50 ; =============== S U B R O U T I N E =======================================
.text:0000000000001A50
.text:0000000000001A50 ; Attributes: bp-based frame info_from_lumina
.text:0000000000001A50
.text:0000000000001A50 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_1B03↓p
.text:0000000000001A50                 lea     rdi, __bss_start
.text:0000000000001A57                 push    rbp
.text:0000000000001A58                 lea     rax, __bss_start
.text:0000000000001A5F                 cmp     rax, rdi
.text:0000000000001A62                 mov     rbp, rsp
.text:0000000000001A65                 jz      short loc_1A80
.text:0000000000001A67                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:0000000000001A6E                 test    rax, rax
.text:0000000000001A71                 jz      short loc_1A80
.text:0000000000001A73                 pop     rbp
.text:0000000000001A74                 jmp     rax
.text:0000000000001A74 ; ---------------------------------------------------------------------------
.text:0000000000001A76                 align 20h
.text:0000000000001A80
.text:0000000000001A80 loc_1A80:                               ; CODE XREF: deregister_tm_clones+15↑j
.text:0000000000001A80                                         ; deregister_tm_clones+21↑j
.text:0000000000001A80                 pop     rbp
.text:0000000000001A81                 retn
.text:0000000000001A81 deregister_tm_clones endp
.text:0000000000001A81
.text:0000000000001A81 ; ---------------------------------------------------------------------------
.text:0000000000001A82                 align 10h
.text:0000000000001A90
.text:0000000000001A90 ; =============== S U B R O U T I N E =======================================
.text:0000000000001A90
.text:0000000000001A90 ; Attributes: bp-based frame info_from_lumina
.text:0000000000001A90
.text:0000000000001A90 register_tm_clones proc near            ; CODE XREF: frame_dummy+5↓j
.text:0000000000001A90                 lea     rdi, __bss_start
.text:0000000000001A97                 lea     rsi, __bss_start
.text:0000000000001A9E                 push    rbp
.text:0000000000001A9F                 sub     rsi, rdi
.text:0000000000001AA2                 mov     rbp, rsp
.text:0000000000001AA5                 sar     rsi, 3
.text:0000000000001AA9                 mov     rax, rsi
.text:0000000000001AAC                 shr     rax, 3Fh
.text:0000000000001AB0                 add     rsi, rax
.text:0000000000001AB3                 sar     rsi, 1
.text:0000000000001AB6                 jz      short loc_1AD0
.text:0000000000001AB8                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:0000000000001ABF                 test    rax, rax
.text:0000000000001AC2                 jz      short loc_1AD0
.text:0000000000001AC4                 pop     rbp
.text:0000000000001AC5                 jmp     rax
.text:0000000000001AC5 ; ---------------------------------------------------------------------------
.text:0000000000001AC7                 align 10h
.text:0000000000001AD0
.text:0000000000001AD0 loc_1AD0:                               ; CODE XREF: register_tm_clones+26↑j
.text:0000000000001AD0                                         ; register_tm_clones+32↑j
.text:0000000000001AD0                 pop     rbp
.text:0000000000001AD1                 retn
.text:0000000000001AD1 register_tm_clones endp
.text:0000000000001AD1
.text:0000000000001AD1 ; ---------------------------------------------------------------------------
.text:0000000000001AD2                 align 20h
.text:0000000000001AE0
.text:0000000000001AE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001AE0
.text:0000000000001AE0 ; Attributes: info_from_lumina
.text:0000000000001AE0
.text:0000000000001AE0 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:0000000000001AE0                 cmp     cs:completed_7697, 0
.text:0000000000001AE7                 jnz     short locret_1B18
.text:0000000000001AE9                 cmp     cs:__cxa_finalize_ptr, 0
.text:0000000000001AF1                 push    rbp
.text:0000000000001AF2                 mov     rbp, rsp
.text:0000000000001AF5                 jz      short loc_1B03
.text:0000000000001AF7                 mov     rdi, cs:__dso_handle ; void *
.text:0000000000001AFE                 call    __cxa_finalize
.text:0000000000001B03
.text:0000000000001B03 loc_1B03:                               ; CODE XREF: __do_global_dtors_aux+15↑j
.text:0000000000001B03                 call    deregister_tm_clones
.text:0000000000001B08                 mov     cs:completed_7697, 1
.text:0000000000001B0F                 pop     rbp
.text:0000000000001B10                 retn
.text:0000000000001B10 ; ---------------------------------------------------------------------------
.text:0000000000001B11                 align 8
.text:0000000000001B18
.text:0000000000001B18 locret_1B18:                            ; CODE XREF: __do_global_dtors_aux+7↑j
.text:0000000000001B18                 rep retn
.text:0000000000001B18 __do_global_dtors_aux endp
.text:0000000000001B18
.text:0000000000001B18 ; ---------------------------------------------------------------------------
.text:0000000000001B1A                 align 20h
.text:0000000000001B20
.text:0000000000001B20 ; =============== S U B R O U T I N E =======================================
.text:0000000000001B20
.text:0000000000001B20 ; Attributes: bp-based frame
.text:0000000000001B20
.text:0000000000001B20 frame_dummy     proc near               ; CODE XREF: __libc_csu_init+49↓p
.text:0000000000001B20                                         ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:0000000000001B20                 push    rbp
.text:0000000000001B21                 mov     rbp, rsp
.text:0000000000001B24                 pop     rbp
.text:0000000000001B25                 jmp     register_tm_clones
.text:0000000000001B25 frame_dummy     endp
.text:0000000000001B25
.text:0000000000001B25 ; ---------------------------------------------------------------------------
.text:0000000000001B2A                 align 10h
.text:0000000000001B30
.text:0000000000001B30 ; =============== S U B R O U T I N E =======================================
.text:0000000000001B30
.text:0000000000001B30
.text:0000000000001B30 ignorable_failure proc near             ; CODE XREF: main+1A9↑p
.text:0000000000001B30                                         ; main+254↑p
.text:0000000000001B30 ; __unwind {
.text:0000000000001B30                 cmp     cs:ignore_fail_on_non_empty, 0
.text:0000000000001B37                 push    r12
.text:0000000000001B39                 push    rbp
.text:0000000000001B3A                 push    rbx
.text:0000000000001B3B                 jz      loc_1BE0
.text:0000000000001B41                 cmp     edi, 11h
.text:0000000000001B44                 setz    bl
.text:0000000000001B47                 cmp     edi, 27h ; '''
.text:0000000000001B4A                 setz    al
.text:0000000000001B4D                 or      bl, al
.text:0000000000001B4F                 jnz     loc_1BD9
.text:0000000000001B55                 cmp     edi, 1Eh
.text:0000000000001B58                 ja      loc_1BE0
.text:0000000000001B5E                 mov     eax, 1
.text:0000000000001B63                 mov     ecx, edi
.text:0000000000001B65                 shl     rax, cl
.text:0000000000001B68                 test    eax, 40032002h
.text:0000000000001B6D                 jz      short loc_1BE0
.text:0000000000001B6F                 xor     eax, eax
.text:0000000000001B71                 mov     edx, 30900h     ; oflag
.text:0000000000001B76                 mov     edi, 0FFFFFF9Ch ; fd
.text:0000000000001B7B                 call    _openat
.text:0000000000001B80                 test    eax, eax
.text:0000000000001B82                 mov     r12d, eax
.text:0000000000001B85                 js      short loc_1BE0
.text:0000000000001B87                 mov     edi, eax        ; fd
.text:0000000000001B89                 call    _fdopendir
.text:0000000000001B8E                 test    rax, rax
.text:0000000000001B91                 mov     rbp, rax
.text:0000000000001B94                 jz      short loc_1BE9
.text:0000000000001B96                 call    ___errno_location
.text:0000000000001B9B                 mov     r12, rax
.text:0000000000001B9E                 mov     dword ptr [rax], 0
.text:0000000000001BA4                 nop     dword ptr [rax+00h]
.text:0000000000001BA8
.text:0000000000001BA8 loc_1BA8:                               ; CODE XREF: ignorable_failure+9B↓j
.text:0000000000001BA8                                         ; ignorable_failure+9F↓j
.text:0000000000001BA8                 mov     rdi, rbp        ; dirp
.text:0000000000001BAB                 call    _readdir
.text:0000000000001BB0                 test    rax, rax
.text:0000000000001BB3                 jz      short loc_1BF3
.text:0000000000001BB5                 cmp     byte ptr [rax+13h], 2Eh ; '.'
.text:0000000000001BB9                 jnz     short loc_1BD1
.text:0000000000001BBB                 xor     edx, edx
.text:0000000000001BBD                 cmp     byte ptr [rax+14h], 2Eh ; '.'
.text:0000000000001BC1                 setz    dl
.text:0000000000001BC4                 movzx   eax, byte ptr [rax+rdx+14h]
.text:0000000000001BC9                 test    al, al
.text:0000000000001BCB                 jz      short loc_1BA8
.text:0000000000001BCD                 cmp     al, 2Fh ; '/'
.text:0000000000001BCF                 jz      short loc_1BA8
.text:0000000000001BD1
.text:0000000000001BD1 loc_1BD1:                               ; CODE XREF: ignorable_failure+89↑j
.text:0000000000001BD1                 mov     rdi, rbp        ; dirp
.text:0000000000001BD4                 call    _closedir
.text:0000000000001BD9
.text:0000000000001BD9 loc_1BD9:                               ; CODE XREF: ignorable_failure+1F↑j
.text:0000000000001BD9                                         ; ignorable_failure+C1↓j ...
.text:0000000000001BD9                 mov     eax, ebx
.text:0000000000001BDB                 pop     rbx
.text:0000000000001BDC                 pop     rbp
.text:0000000000001BDD                 pop     r12
.text:0000000000001BDF                 retn
.text:0000000000001BE0 ; ---------------------------------------------------------------------------
.text:0000000000001BE0
.text:0000000000001BE0 loc_1BE0:                               ; CODE XREF: ignorable_failure+B↑j
.text:0000000000001BE0                                         ; ignorable_failure+28↑j ...
.text:0000000000001BE0                 xor     ebx, ebx
.text:0000000000001BE2                 mov     eax, ebx
.text:0000000000001BE4                 pop     rbx
.text:0000000000001BE5                 pop     rbp
.text:0000000000001BE6                 pop     r12
.text:0000000000001BE8                 retn
.text:0000000000001BE9 ; ---------------------------------------------------------------------------
.text:0000000000001BE9
.text:0000000000001BE9 loc_1BE9:                               ; CODE XREF: ignorable_failure+64↑j
.text:0000000000001BE9                 mov     edi, r12d       ; fd
.text:0000000000001BEC                 call    _close
.text:0000000000001BF1                 jmp     short loc_1BD9
.text:0000000000001BF3 ; ---------------------------------------------------------------------------
.text:0000000000001BF3
.text:0000000000001BF3 loc_1BF3:                               ; CODE XREF: ignorable_failure+83↑j
.text:0000000000001BF3                 mov     ebx, [r12]
.text:0000000000001BF7                 mov     rdi, rbp        ; dirp
.text:0000000000001BFA                 call    _closedir
.text:0000000000001BFF                 test    ebx, ebx
.text:0000000000001C01                 setz    bl
.text:0000000000001C04                 jmp     short loc_1BD9
.text:0000000000001C04 ; } // starts at 1B30
.text:0000000000001C04 ignorable_failure endp
.text:0000000000001C04
.text:0000000000001C04 ; ---------------------------------------------------------------------------
.text:0000000000001C06                 align 10h
.text:0000000000001C10
.text:0000000000001C10 ; =============== S U B R O U T I N E =======================================
.text:0000000000001C10
.text:0000000000001C10 ; Attributes: noreturn
.text:0000000000001C10
.text:0000000000001C10 ; void __fastcall __noreturn usage(int status)
.text:0000000000001C10                 public usage
.text:0000000000001C10 usage           proc near               ; CODE XREF: main+2F6↑p
.text:0000000000001C10                                         ; main+321↑p
.text:0000000000001C10
.text:0000000000001C10 var_A8          = qword ptr -0A8h
.text:0000000000001C10 var_A0          = qword ptr -0A0h
.text:0000000000001C10 var_98          = qword ptr -98h
.text:0000000000001C10 var_90          = qword ptr -90h
.text:0000000000001C10 var_88          = qword ptr -88h
.text:0000000000001C10 var_80          = qword ptr -80h
.text:0000000000001C10 var_78          = qword ptr -78h
.text:0000000000001C10 var_70          = qword ptr -70h
.text:0000000000001C10 var_68          = qword ptr -68h
.text:0000000000001C10 var_60          = qword ptr -60h
.text:0000000000001C10 var_58          = qword ptr -58h
.text:0000000000001C10 var_50          = qword ptr -50h
.text:0000000000001C10 var_48          = qword ptr -48h
.text:0000000000001C10 var_40          = qword ptr -40h
.text:0000000000001C10 var_30          = qword ptr -30h
.text:0000000000001C10
.text:0000000000001C10 ; __unwind {
.text:0000000000001C10                 push    r13
.text:0000000000001C12                 push    r12
.text:0000000000001C14                 mov     edx, 5          ; category
.text:0000000000001C19                 push    rbp
.text:0000000000001C1A                 push    rbx
.text:0000000000001C1B                 mov     ebp, edi
.text:0000000000001C1D                 sub     rsp, 88h
.text:0000000000001C24                 mov     rbx, cs:program_name
.text:0000000000001C2B                 mov     rax, fs:28h
.text:0000000000001C34                 mov     [rsp+0A8h+var_30], rax
.text:0000000000001C39                 xor     eax, eax
.text:0000000000001C3B                 test    edi, edi
.text:0000000000001C3D                 jz      short loc_1C6D
.text:0000000000001C3F                 lea     rsi, aTrySHelpForMor ; "Try '%s --help' for more information.\n"
.text:0000000000001C46                 xor     edi, edi        ; domainname
.text:0000000000001C48                 call    _dcgettext
.text:0000000000001C4D                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000001C54                 mov     rdx, rax
.text:0000000000001C57                 mov     rcx, rbx
.text:0000000000001C5A                 mov     esi, 1
.text:0000000000001C5F                 xor     eax, eax
.text:0000000000001C61                 call    ___fprintf_chk
.text:0000000000001C66
.text:0000000000001C66 loc_1C66:                               ; CODE XREF: usage+2A6↓j
.text:0000000000001C66                 mov     edi, ebp        ; status
.text:0000000000001C68                 call    _exit
.text:0000000000001C6D ; ---------------------------------------------------------------------------
.text:0000000000001C6D
.text:0000000000001C6D loc_1C6D:                               ; CODE XREF: usage+2D↑j
.text:0000000000001C6D                 lea     rsi, aUsageSOptionDi ; "Usage: %s [OPTION]... DIRECTORY...\n"
.text:0000000000001C74                 xor     edi, edi        ; domainname
.text:0000000000001C76                 call    _dcgettext
.text:0000000000001C7B                 mov     rdx, rbx
.text:0000000000001C7E                 mov     rsi, rax
.text:0000000000001C81                 mov     edi, 1
.text:0000000000001C86                 xor     eax, eax
.text:0000000000001C88                 call    ___printf_chk
.text:0000000000001C8D                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001C94                 lea     rsi, aRemoveTheDirec ; "Remove the DIRECTORY(ies), if they are "...
.text:0000000000001C9B                 mov     edx, 5          ; category
.text:0000000000001CA0                 xor     edi, edi        ; domainname
.text:0000000000001CA2                 call    _dcgettext
.text:0000000000001CA7                 mov     rsi, rbx        ; stream
.text:0000000000001CAA                 mov     rdi, rax        ; s
.text:0000000000001CAD                 call    _fputs_unlocked
.text:0000000000001CB2                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001CB9                 lea     rsi, aPParentsRemove ; "  -p, --parents   remove DIRECTORY and "...
.text:0000000000001CC0                 mov     edx, 5          ; category
.text:0000000000001CC5                 xor     edi, edi        ; domainname
.text:0000000000001CC7                 call    _dcgettext
.text:0000000000001CCC                 mov     rsi, rbx        ; stream
.text:0000000000001CCF                 mov     rdi, rax        ; s
.text:0000000000001CD2                 call    _fputs_unlocked
.text:0000000000001CD7                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001CDE                 lea     rsi, aHelpDisplayThi ; "      --help     display this help and "...
.text:0000000000001CE5                 mov     edx, 5          ; category
.text:0000000000001CEA                 xor     edi, edi        ; domainname
.text:0000000000001CEC                 call    _dcgettext
.text:0000000000001CF1                 mov     rsi, rbx        ; stream
.text:0000000000001CF4                 mov     rdi, rax        ; s
.text:0000000000001CF7                 call    _fputs_unlocked
.text:0000000000001CFC                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001D03                 lea     rsi, aVersionOutputV ; "      --version  output version informa"...
.text:0000000000001D0A                 mov     edx, 5          ; category
.text:0000000000001D0F                 xor     edi, edi        ; domainname
.text:0000000000001D11                 call    _dcgettext
.text:0000000000001D16                 mov     rsi, rbx        ; stream
.text:0000000000001D19                 mov     rdi, rax        ; s
.text:0000000000001D1C                 lea     rbx, aRmdir_0   ; "rmdir"
.text:0000000000001D23                 call    _fputs_unlocked
.text:0000000000001D28                 lea     rax, asc_6CEA   ; "["
.text:0000000000001D2F                 lea     rcx, aSha256sum ; "sha256sum"
.text:0000000000001D36                 mov     [rsp+0A8h+var_48], 0
.text:0000000000001D3F                 mov     [rsp+0A8h+var_40], 0
.text:0000000000001D48                 mov     rdx, rsp
.text:0000000000001D4B                 mov     [rsp+0A8h+var_A8], rax
.text:0000000000001D4F                 lea     rax, aTestInvocation ; "test invocation"
.text:0000000000001D56                 mov     [rsp+0A8h+var_78], rcx
.text:0000000000001D5B                 lea     rcx, aSha384sum ; "sha384sum"
.text:0000000000001D62                 mov     [rsp+0A8h+var_A0], rax
.text:0000000000001D67                 lea     rax, domainname ; "coreutils"
.text:0000000000001D6E                 mov     [rsp+0A8h+var_68], rcx
.text:0000000000001D73                 lea     rcx, aSha512sum ; "sha512sum"
.text:0000000000001D7A                 mov     [rsp+0A8h+var_98], rax
.text:0000000000001D7F                 lea     rax, aMultiCallInvoc ; "Multi-call invocation"
.text:0000000000001D86                 mov     [rsp+0A8h+var_58], rcx
.text:0000000000001D8B                 mov     [rsp+0A8h+var_90], rax
.text:0000000000001D90                 lea     rax, aSha224sum ; "sha224sum"
.text:0000000000001D97                 mov     [rsp+0A8h+var_88], rax
.text:0000000000001D9C                 lea     rax, aSha2Utilities ; "sha2 utilities"
.text:0000000000001DA3                 mov     [rsp+0A8h+var_80], rax
.text:0000000000001DA8                 mov     [rsp+0A8h+var_70], rax
.text:0000000000001DAD                 mov     [rsp+0A8h+var_60], rax
.text:0000000000001DB2                 mov     [rsp+0A8h+var_50], rax
.text:0000000000001DB7                 nop     word ptr [rax+rax+00000000h]
.text:0000000000001DC0
.text:0000000000001DC0 loc_1DC0:                               ; CODE XREF: usage+1CD↓j
.text:0000000000001DC0                 add     rdx, 10h
.text:0000000000001DC4                 mov     rdi, [rdx]
.text:0000000000001DC7                 test    rdi, rdi
.text:0000000000001DCA                 jz      short loc_1DDF
.text:0000000000001DCC                 mov     ecx, 6
.text:0000000000001DD1                 mov     rsi, rbx
.text:0000000000001DD4                 repe cmpsb
.text:0000000000001DD6                 setnbe  al
.text:0000000000001DD9                 sbb     al, 0
.text:0000000000001DDB                 test    al, al
.text:0000000000001DDD                 jnz     short loc_1DC0
.text:0000000000001DDF
.text:0000000000001DDF loc_1DDF:                               ; CODE XREF: usage+1BA↑j
.text:0000000000001DDF                 mov     r12, [rdx+8]
.text:0000000000001DE3                 xor     edi, edi        ; domainname
.text:0000000000001DE5                 mov     edx, 5          ; category
.text:0000000000001DEA                 lea     rsi, aSOnlineHelpS ; "\n%s online help: <%s>\n"
.text:0000000000001DF1                 test    r12, r12
.text:0000000000001DF4                 jz      loc_1EBB
.text:0000000000001DFA                 call    _dcgettext
.text:0000000000001DFF                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000001E06                 lea     rdx, unk_6D60
.text:0000000000001E0D                 mov     rsi, rax
.text:0000000000001E10                 mov     edi, 1
.text:0000000000001E15                 xor     eax, eax
.text:0000000000001E17                 call    ___printf_chk
.text:0000000000001E1C                 xor     esi, esi        ; locale
.text:0000000000001E1E                 mov     edi, 5          ; category
.text:0000000000001E23                 call    _setlocale
.text:0000000000001E28                 test    rax, rax
.text:0000000000001E2B                 jz      short loc_1E49
.text:0000000000001E2D                 lea     rsi, s2         ; "en_"
.text:0000000000001E34                 mov     edx, 3          ; n
.text:0000000000001E39                 mov     rdi, rax        ; s1
.text:0000000000001E3C                 call    _strncmp
.text:0000000000001E41                 test    eax, eax
.text:0000000000001E43                 jnz     loc_1F50
.text:0000000000001E49
.text:0000000000001E49 loc_1E49:                               ; CODE XREF: usage+21B↑j
.text:0000000000001E49                                         ; usage+365↓j
.text:0000000000001E49                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000001E50                 xor     edi, edi        ; domainname
.text:0000000000001E52                 mov     edx, 5          ; category
.text:0000000000001E57                 call    _dcgettext
.text:0000000000001E5C                 lea     rcx, aRmdir_0   ; "rmdir"
.text:0000000000001E63                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000001E6A                 mov     rsi, rax
.text:0000000000001E6D                 mov     edi, 1
.text:0000000000001E72                 xor     eax, eax
.text:0000000000001E74                 call    ___printf_chk
.text:0000000000001E79                 cmp     r12, rbx
.text:0000000000001E7C                 lea     rcx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000001E83                 lea     rbx, aWrittenBySSAnd+1Bh ; ""
.text:0000000000001E8A                 cmovz   rbx, rcx
.text:0000000000001E8E
.text:0000000000001E8E loc_1E8E:                               ; CODE XREF: usage+334↓j
.text:0000000000001E8E                 lea     rsi, aOrAvailableLoc ; "or available locally via: info '(coreut"...
.text:0000000000001E95                 xor     edi, edi        ; domainname
.text:0000000000001E97                 mov     edx, 5          ; category
.text:0000000000001E9C                 call    _dcgettext
.text:0000000000001EA1                 mov     rcx, rbx
.text:0000000000001EA4                 mov     rsi, rax
.text:0000000000001EA7                 mov     rdx, r12
.text:0000000000001EAA                 mov     edi, 1
.text:0000000000001EAF                 xor     eax, eax
.text:0000000000001EB1                 call    ___printf_chk
.text:0000000000001EB6                 jmp     loc_1C66
.text:0000000000001EBB ; ---------------------------------------------------------------------------
.text:0000000000001EBB
.text:0000000000001EBB loc_1EBB:                               ; CODE XREF: usage+1E4↑j
.text:0000000000001EBB                 call    _dcgettext
.text:0000000000001EC0                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000001EC7                 lea     rdx, unk_6D60
.text:0000000000001ECE                 mov     rsi, rax
.text:0000000000001ED1                 mov     edi, 1
.text:0000000000001ED6                 xor     eax, eax
.text:0000000000001ED8                 call    ___printf_chk
.text:0000000000001EDD                 xor     esi, esi        ; locale
.text:0000000000001EDF                 mov     edi, 5          ; category
.text:0000000000001EE4                 call    _setlocale
.text:0000000000001EE9                 test    rax, rax
.text:0000000000001EEC                 jz      short loc_1F06
.text:0000000000001EEE                 lea     rsi, s2         ; "en_"
.text:0000000000001EF5                 mov     edx, 3          ; n
.text:0000000000001EFA                 mov     rdi, rax        ; s1
.text:0000000000001EFD                 call    _strncmp
.text:0000000000001F02                 test    eax, eax
.text:0000000000001F04                 jnz     short loc_1F49
.text:0000000000001F06
.text:0000000000001F06 loc_1F06:                               ; CODE XREF: usage+2DC↑j
.text:0000000000001F06                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000001F0D                 mov     edx, 5          ; category
.text:0000000000001F12                 xor     edi, edi        ; domainname
.text:0000000000001F14                 lea     r12, aRmdir_0   ; "rmdir"
.text:0000000000001F1B                 lea     rbx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000001F22                 call    _dcgettext
.text:0000000000001F27                 lea     rcx, aRmdir_0   ; "rmdir"
.text:0000000000001F2E                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000001F35                 mov     rsi, rax
.text:0000000000001F38                 mov     edi, 1
.text:0000000000001F3D                 xor     eax, eax
.text:0000000000001F3F                 call    ___printf_chk
.text:0000000000001F44                 jmp     loc_1E8E
.text:0000000000001F49 ; ---------------------------------------------------------------------------
.text:0000000000001F49
.text:0000000000001F49 loc_1F49:                               ; CODE XREF: usage+2F4↑j
.text:0000000000001F49                 lea     r12, aRmdir_0   ; "rmdir"
.text:0000000000001F50
.text:0000000000001F50 loc_1F50:                               ; CODE XREF: usage+233↑j
.text:0000000000001F50                 mov     r13, cs:stdout@@GLIBC_2_2_5
.text:0000000000001F57                 lea     rsi, aReportAnyTrans ; "Report any translation bugs to <https:/"...
.text:0000000000001F5E                 xor     edi, edi        ; domainname
.text:0000000000001F60                 mov     edx, 5          ; category
.text:0000000000001F65                 call    _dcgettext
.text:0000000000001F6A                 mov     rsi, r13        ; stream
.text:0000000000001F6D                 mov     rdi, rax        ; s
.text:0000000000001F70                 call    _fputs_unlocked
.text:0000000000001F75                 jmp     loc_1E49
.text:0000000000001F75 ; } // starts at 1C10
.text:0000000000001F75 usage           endp
.text:0000000000001F75
.text:0000000000001F75 ; ---------------------------------------------------------------------------
.text:0000000000001F7A                 align 20h
.text:0000000000001F80
.text:0000000000001F80 ; =============== S U B R O U T I N E =======================================
.text:0000000000001F80
.text:0000000000001F80
.text:0000000000001F80 ; __int64 __usercall prog_fprintf@<rax>(FILE *s@<rdi>, char)
.text:0000000000001F80                 public prog_fprintf
.text:0000000000001F80 prog_fprintf    proc near               ; CODE XREF: main+195↑p
.text:0000000000001F80                                         ; main+2CF↑p
.text:0000000000001F80
.text:0000000000001F80 var_E8          = dword ptr -0E8h
.text:0000000000001F80 var_E4          = dword ptr -0E4h
.text:0000000000001F80 var_E0          = qword ptr -0E0h
.text:0000000000001F80 var_D8          = qword ptr -0D8h
.text:0000000000001F80 var_D0          = qword ptr -0D0h
.text:0000000000001F80 var_C8          = byte ptr -0C8h
.text:0000000000001F80 var_B8          = qword ptr -0B8h
.text:0000000000001F80 var_B0          = qword ptr -0B0h
.text:0000000000001F80 var_A8          = qword ptr -0A8h
.text:0000000000001F80 var_A0          = qword ptr -0A0h
.text:0000000000001F80 var_98          = xmmword ptr -98h
.text:0000000000001F80 var_88          = xmmword ptr -88h
.text:0000000000001F80 var_78          = xmmword ptr -78h
.text:0000000000001F80 var_68          = xmmword ptr -68h
.text:0000000000001F80 var_58          = xmmword ptr -58h
.text:0000000000001F80 var_48          = xmmword ptr -48h
.text:0000000000001F80 var_38          = xmmword ptr -38h
.text:0000000000001F80 var_28          = xmmword ptr -28h
.text:0000000000001F80 arg_0           = byte ptr  8
.text:0000000000001F80
.text:0000000000001F80 ; __unwind {
.text:0000000000001F80                 push    rbp
.text:0000000000001F81                 push    rbx
.text:0000000000001F82                 mov     rbp, rsi
.text:0000000000001F85                 mov     rbx, rdi
.text:0000000000001F88                 sub     rsp, 0D8h
.text:0000000000001F8F                 test    al, al
.text:0000000000001F91                 mov     [rsp+0E8h+var_B8], rdx
.text:0000000000001F96                 mov     [rsp+0E8h+var_B0], rcx
.text:0000000000001F9B                 mov     [rsp+0E8h+var_A8], r8
.text:0000000000001FA0                 mov     [rsp+0E8h+var_A0], r9
.text:0000000000001FA5                 jz      short loc_1FDE
.text:0000000000001FA7                 movaps  [rsp+0E8h+var_98], xmm0
.text:0000000000001FAC                 movaps  [rsp+0E8h+var_88], xmm1
.text:0000000000001FB1                 movaps  [rsp+0E8h+var_78], xmm2
.text:0000000000001FB6                 movaps  [rsp+0E8h+var_68], xmm3
.text:0000000000001FBE                 movaps  [rsp+0E8h+var_58], xmm4
.text:0000000000001FC6                 movaps  [rsp+0E8h+var_48], xmm5
.text:0000000000001FCE                 movaps  [rsp+0E8h+var_38], xmm6
.text:0000000000001FD6                 movaps  [rsp+0E8h+var_28], xmm7
.text:0000000000001FDE
.text:0000000000001FDE loc_1FDE:                               ; CODE XREF: prog_fprintf+25↑j
.text:0000000000001FDE                 mov     rsi, rbx        ; stream
.text:0000000000001FE1                 mov     rax, fs:28h
.text:0000000000001FEA                 mov     [rsp+0E8h+var_D0], rax
.text:0000000000001FEF                 xor     eax, eax
.text:0000000000001FF1                 mov     rdi, cs:program_name ; s
.text:0000000000001FF8                 call    _fputs_unlocked
.text:0000000000001FFD                 lea     rdi, asc_7133   ; ": "
.text:0000000000002004                 mov     rcx, rbx        ; stream
.text:0000000000002007                 mov     edx, 2          ; n
.text:000000000000200C                 mov     esi, 1          ; size
.text:0000000000002011                 call    _fwrite_unlocked
.text:0000000000002016                 lea     rax, [rsp+0E8h+arg_0]
.text:000000000000201E                 mov     rdx, rsp
.text:0000000000002021                 mov     rsi, rbp
.text:0000000000002024                 mov     rdi, rbx        ; s
.text:0000000000002027                 mov     [rsp+0E8h+var_E8], 10h
.text:000000000000202E                 mov     [rsp+0E8h+var_E4], 30h ; '0'
.text:0000000000002036                 mov     [rsp+0E8h+var_E0], rax
.text:000000000000203B                 lea     rax, [rsp+0E8h+var_C8]
.text:0000000000002040                 mov     [rsp+0E8h+var_D8], rax
.text:0000000000002045                 call    rpl_vfprintf
.text:000000000000204A                 mov     rax, [rbx+28h]
.text:000000000000204E                 cmp     rax, [rbx+30h]
.text:0000000000002052                 jnb     short loc_2080
.text:0000000000002054                 lea     rdx, [rax+1]
.text:0000000000002058                 mov     [rbx+28h], rdx
.text:000000000000205C                 mov     byte ptr [rax], 0Ah
.text:000000000000205F
.text:000000000000205F loc_205F:                               ; CODE XREF: prog_fprintf+10D↓j
.text:000000000000205F                 mov     rax, [rsp+0E8h+var_D0]
.text:0000000000002064                 xor     rax, fs:28h
.text:000000000000206D                 jnz     short loc_208F
.text:000000000000206F                 add     rsp, 0D8h
.text:0000000000002076                 pop     rbx
.text:0000000000002077                 pop     rbp
.text:0000000000002078                 retn
.text:0000000000002078 ; ---------------------------------------------------------------------------
.text:0000000000002079                 align 20h
.text:0000000000002080
.text:0000000000002080 loc_2080:                               ; CODE XREF: prog_fprintf+D2↑j
.text:0000000000002080                 mov     esi, 0Ah        ; int
.text:0000000000002085                 mov     rdi, rbx        ; _IO_FILE *
.text:0000000000002088                 call    ___overflow
.text:000000000000208D                 jmp     short loc_205F
.text:000000000000208F ; ---------------------------------------------------------------------------
.text:000000000000208F
.text:000000000000208F loc_208F:                               ; CODE XREF: prog_fprintf+ED↑j
.text:000000000000208F                 call    ___stack_chk_fail
.text:000000000000208F ; } // starts at 1F80
.text:000000000000208F prog_fprintf    endp
.text:000000000000208F
.text:000000000000208F ; ---------------------------------------------------------------------------
.text:0000000000002094                 align 20h
.text:00000000000020A0
.text:00000000000020A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000020A0
.text:00000000000020A0
.text:00000000000020A0                 public close_stdout_set_file_name
.text:00000000000020A0 close_stdout_set_file_name proc near
.text:00000000000020A0 ; __unwind {
.text:00000000000020A0                 mov     cs:file_name, rdi
.text:00000000000020A7                 retn
.text:00000000000020A7 ; } // starts at 20A0
.text:00000000000020A7 close_stdout_set_file_name endp
.text:00000000000020A7
.text:00000000000020A7 ; ---------------------------------------------------------------------------
.text:00000000000020A8                 align 10h
.text:00000000000020B0
.text:00000000000020B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000020B0
.text:00000000000020B0
.text:00000000000020B0                 public close_stdout_set_ignore_EPIPE
.text:00000000000020B0 close_stdout_set_ignore_EPIPE proc near
.text:00000000000020B0 ; __unwind {
.text:00000000000020B0                 mov     cs:ignore_EPIPE, dil
.text:00000000000020B7                 retn
.text:00000000000020B7 ; } // starts at 20B0
.text:00000000000020B7 close_stdout_set_ignore_EPIPE endp
.text:00000000000020B7
.text:00000000000020B7 ; ---------------------------------------------------------------------------
.text:00000000000020B8                 align 20h
.text:00000000000020C0
.text:00000000000020C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000020C0
.text:00000000000020C0 ; Attributes: info_from_lumina
.text:00000000000020C0
.text:00000000000020C0 ; void __cdecl close_stdout()
.text:00000000000020C0                 public close_stdout
.text:00000000000020C0 close_stdout    proc near               ; DATA XREF: main+52↑o
.text:00000000000020C0 ; __unwind {
.text:00000000000020C0                 push    rbp
.text:00000000000020C1                 push    rbx
.text:00000000000020C2                 sub     rsp, 8
.text:00000000000020C6                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:00000000000020CD                 call    close_stream
.text:00000000000020D2                 test    eax, eax
.text:00000000000020D4                 jz      short loc_20EC
.text:00000000000020D6                 call    ___errno_location
.text:00000000000020DB                 cmp     cs:ignore_EPIPE, 0
.text:00000000000020E2                 mov     rbx, rax
.text:00000000000020E5                 jz      short loc_2103
.text:00000000000020E7                 cmp     dword ptr [rax], 20h ; ' '
.text:00000000000020EA                 jnz     short loc_2103
.text:00000000000020EC
.text:00000000000020EC loc_20EC:                               ; CODE XREF: close_stdout+14↑j
.text:00000000000020EC                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:00000000000020F3                 call    close_stream
.text:00000000000020F8                 test    eax, eax
.text:00000000000020FA                 jnz     short loc_2142
.text:00000000000020FC                 add     rsp, 8
.text:0000000000002100                 pop     rbx
.text:0000000000002101                 pop     rbp
.text:0000000000002102                 retn
.text:0000000000002103 ; ---------------------------------------------------------------------------
.text:0000000000002103
.text:0000000000002103 loc_2103:                               ; CODE XREF: close_stdout+25↑j
.text:0000000000002103                                         ; close_stdout+2A↑j
.text:0000000000002103                 lea     rsi, aWriteError ; "write error"
.text:000000000000210A                 xor     edi, edi        ; domainname
.text:000000000000210C                 mov     edx, 5          ; category
.text:0000000000002111                 call    _dcgettext
.text:0000000000002116                 mov     rdi, cs:file_name
.text:000000000000211D                 mov     rbp, rax
.text:0000000000002120                 test    rdi, rdi
.text:0000000000002123                 jz      short loc_214D
.text:0000000000002125                 call    quotearg_colon
.text:000000000000212A                 mov     esi, [rbx]      ; errnum
.text:000000000000212C                 lea     rdx, format     ; "%s: %s"
.text:0000000000002133                 mov     rcx, rax
.text:0000000000002136                 mov     r8, rbp
.text:0000000000002139                 xor     edi, edi        ; status
.text:000000000000213B                 xor     eax, eax
.text:000000000000213D                 call    _error
.text:0000000000002142
.text:0000000000002142 loc_2142:                               ; CODE XREF: close_stdout+3A↑j
.text:0000000000002142                                         ; close_stdout+A2↓j
.text:0000000000002142                 mov     edi, cs:exit_failure ; status
.text:0000000000002148                 call    __exit
.text:000000000000214D ; ---------------------------------------------------------------------------
.text:000000000000214D
.text:000000000000214D loc_214D:                               ; CODE XREF: close_stdout+63↑j
.text:000000000000214D                 mov     esi, [rbx]      ; errnum
.text:000000000000214F                 lea     rdx, msgid+14h  ; format
.text:0000000000002156                 mov     rcx, rax
.text:0000000000002159                 xor     edi, edi        ; status
.text:000000000000215B                 xor     eax, eax
.text:000000000000215D                 call    _error
.text:0000000000002162                 jmp     short loc_2142
.text:0000000000002162 ; } // starts at 20C0
.text:0000000000002162 close_stdout    endp
.text:0000000000002162
.text:0000000000002162 ; ---------------------------------------------------------------------------
.text:0000000000002164                 align 10h
.text:0000000000002170
.text:0000000000002170 ; =============== S U B R O U T I N E =======================================
.text:0000000000002170
.text:0000000000002170
.text:0000000000002170                 public strip_trailing_slashes
.text:0000000000002170 strip_trailing_slashes proc near        ; CODE XREF: main+1F3↑p
.text:0000000000002170 ; __unwind {
.text:0000000000002170                 push    rbp
.text:0000000000002171                 push    rbx
.text:0000000000002172                 mov     rbp, rdi
.text:0000000000002175                 sub     rsp, 8
.text:0000000000002179                 call    last_component
.text:000000000000217E                 cmp     byte ptr [rax], 0
.text:0000000000002181                 mov     rbx, rax
.text:0000000000002184                 cmovz   rbx, rbp
.text:0000000000002188                 mov     rdi, rbx
.text:000000000000218B                 call    base_len
.text:0000000000002190                 add     rbx, rax
.text:0000000000002193                 cmp     byte ptr [rbx], 0
.text:0000000000002196                 mov     byte ptr [rbx], 0
.text:0000000000002199                 setnz   al
.text:000000000000219C                 add     rsp, 8
.text:00000000000021A0                 pop     rbx
.text:00000000000021A1                 pop     rbp
.text:00000000000021A2                 retn
.text:00000000000021A2 ; } // starts at 2170
.text:00000000000021A2 strip_trailing_slashes endp
.text:00000000000021A2
.text:00000000000021A2 ; ---------------------------------------------------------------------------
.text:00000000000021A3                 align 10h
.text:00000000000021B0
.text:00000000000021B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000021B0
.text:00000000000021B0
.text:00000000000021B0                 public set_program_name
.text:00000000000021B0 set_program_name proc near              ; CODE XREF: main+1D↑p
.text:00000000000021B0 ; __unwind {
.text:00000000000021B0                 test    rdi, rdi
.text:00000000000021B3                 push    rbx
.text:00000000000021B4                 jz      short loc_222D
.text:00000000000021B6                 mov     esi, 2Fh ; '/'  ; c
.text:00000000000021BB                 mov     rbx, rdi
.text:00000000000021BE                 call    _strrchr
.text:00000000000021C3                 test    rax, rax
.text:00000000000021C6                 jz      short loc_221D
.text:00000000000021C8                 lea     r8, [rax+1]
.text:00000000000021CC                 mov     rdx, r8
.text:00000000000021CF                 sub     rdx, rbx
.text:00000000000021D2                 cmp     rdx, 6
.text:00000000000021D6                 jle     short loc_221D
.text:00000000000021D8                 lea     rsi, [rax-6]
.text:00000000000021DC                 lea     rdi, aLibs      ; "/.libs/"
.text:00000000000021E3                 mov     ecx, 7
.text:00000000000021E8                 repe cmpsb
.text:00000000000021EA                 setnbe  dl
.text:00000000000021ED                 sbb     dl, 0
.text:00000000000021F0                 test    dl, dl
.text:00000000000021F2                 jnz     short loc_221D
.text:00000000000021F4                 lea     rdi, aLt        ; "lt-"
.text:00000000000021FB                 mov     ecx, 3
.text:0000000000002200                 mov     rsi, r8
.text:0000000000002203                 mov     rbx, r8
.text:0000000000002206                 repe cmpsb
.text:0000000000002208                 setnbe  dl
.text:000000000000220B                 sbb     dl, 0
.text:000000000000220E                 test    dl, dl
.text:0000000000002210                 jnz     short loc_221D
.text:0000000000002212                 lea     rbx, [rax+4]
.text:0000000000002216                 mov     cs:__bss_start, rbx
.text:000000000000221D
.text:000000000000221D loc_221D:                               ; CODE XREF: set_program_name+16↑j
.text:000000000000221D                                         ; set_program_name+26↑j ...
.text:000000000000221D                 mov     cs:program_name, rbx
.text:0000000000002224                 mov     cs:program_invocation_name@@GLIBC_2_2_5, rbx
.text:000000000000222B                 pop     rbx
.text:000000000000222C                 retn
.text:000000000000222D ; ---------------------------------------------------------------------------
.text:000000000000222D
.text:000000000000222D loc_222D:                               ; CODE XREF: set_program_name+4↑j
.text:000000000000222D                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:0000000000002234                 lea     rdi, aANullArgv0WasP ; "A NULL argv[0] was passed through an ex"...
.text:000000000000223B                 mov     edx, 37h ; '7'  ; n
.text:0000000000002240                 mov     esi, 1          ; size
.text:0000000000002245                 call    _fwrite
.text:000000000000224A                 call    _abort
.text:000000000000224A ; } // starts at 21B0
.text:000000000000224A set_program_name endp
.text:000000000000224A
.text:000000000000224A ; ---------------------------------------------------------------------------
.text:000000000000224F                 align 10h
.text:0000000000002250
.text:0000000000002250 ; =============== S U B R O U T I N E =======================================
.text:0000000000002250
.text:0000000000002250 ; Attributes: info_from_lumina
.text:0000000000002250
.text:0000000000002250 ; const char *__fastcall gettext_quote(const char *msgid, quoting_style s)
.text:0000000000002250 gettext_quote   proc near               ; CODE XREF: quotearg_buffer_restyled+1165↓p
.text:0000000000002250                                         ; quotearg_buffer_restyled+117B↓p
.text:0000000000002250 ; __unwind {
.text:0000000000002250                 push    rbp
.text:0000000000002251                 push    rbx
.text:0000000000002252                 mov     rbp, rdi
.text:0000000000002255                 mov     ebx, esi
.text:0000000000002257                 sub     rsp, 8
.text:000000000000225B                 call    locale_charset
.text:0000000000002260                 movzx   edx, byte ptr [rax]
.text:0000000000002263                 and     edx, 0FFFFFFDFh
.text:0000000000002266                 cmp     dl, 55h ; 'U'
.text:0000000000002269                 jz      short loc_22E0
.text:000000000000226B                 cmp     dl, 47h ; 'G'
.text:000000000000226E                 jz      short loc_2290
.text:0000000000002270
.text:0000000000002270 loc_2270:                               ; CODE XREF: gettext_quote+4A↓j
.text:0000000000002270                                         ; gettext_quote+50↓j ...
.text:0000000000002270                 lea     rax, unk_71A3
.text:0000000000002277                 lea     rdx, asc_71A5   ; "'"
.text:000000000000227E                 cmp     ebx, 9
.text:0000000000002281                 cmovnz  rax, rdx
.text:0000000000002285                 add     rsp, 8
.text:0000000000002289                 pop     rbx
.text:000000000000228A                 pop     rbp
.text:000000000000228B                 retn
.text:000000000000228B ; ---------------------------------------------------------------------------
.text:000000000000228C                 align 10h
.text:0000000000002290
.text:0000000000002290 loc_2290:                               ; CODE XREF: gettext_quote+1E↑j
.text:0000000000002290                 movzx   edx, byte ptr [rax+1]
.text:0000000000002294                 and     edx, 0FFFFFFDFh
.text:0000000000002297                 cmp     dl, 42h ; 'B'
.text:000000000000229A                 jnz     short loc_2270
.text:000000000000229C                 cmp     byte ptr [rax+2], 31h ; '1'
.text:00000000000022A0                 jnz     short loc_2270
.text:00000000000022A2                 cmp     byte ptr [rax+3], 38h ; '8'
.text:00000000000022A6                 jnz     short loc_2270
.text:00000000000022A8                 cmp     byte ptr [rax+4], 30h ; '0'
.text:00000000000022AC                 jnz     short loc_2270
.text:00000000000022AE                 cmp     byte ptr [rax+5], 33h ; '3'
.text:00000000000022B2                 jnz     short loc_2270
.text:00000000000022B4                 cmp     byte ptr [rax+6], 30h ; '0'
.text:00000000000022B8                 jnz     short loc_2270
.text:00000000000022BA                 cmp     byte ptr [rax+7], 0
.text:00000000000022BE                 jnz     short loc_2270
.text:00000000000022C0                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:00000000000022C4                 lea     rax, unk_719C
.text:00000000000022CB                 lea     rdx, unk_71A0
.text:00000000000022D2                 cmovnz  rax, rdx
.text:00000000000022D6                 add     rsp, 8
.text:00000000000022DA                 pop     rbx
.text:00000000000022DB                 pop     rbp
.text:00000000000022DC                 retn
.text:00000000000022DC ; ---------------------------------------------------------------------------
.text:00000000000022DD                 align 20h
.text:00000000000022E0
.text:00000000000022E0 loc_22E0:                               ; CODE XREF: gettext_quote+19↑j
.text:00000000000022E0                 movzx   edx, byte ptr [rax+1]
.text:00000000000022E4                 and     edx, 0FFFFFFDFh
.text:00000000000022E7                 cmp     dl, 54h ; 'T'
.text:00000000000022EA                 jnz     short loc_2270
.text:00000000000022EC                 movzx   edx, byte ptr [rax+2]
.text:00000000000022F0                 and     edx, 0FFFFFFDFh
.text:00000000000022F3                 cmp     dl, 46h ; 'F'
.text:00000000000022F6                 jnz     loc_2270
.text:00000000000022FC                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:0000000000002300                 jnz     loc_2270
.text:0000000000002306                 cmp     byte ptr [rax+4], 38h ; '8'
.text:000000000000230A                 jnz     loc_2270
.text:0000000000002310                 cmp     byte ptr [rax+5], 0
.text:0000000000002314                 jnz     loc_2270
.text:000000000000231A                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:000000000000231E                 lea     rax, unk_7194
.text:0000000000002325                 lea     rdx, unk_7198
.text:000000000000232C                 cmovnz  rax, rdx
.text:0000000000002330                 add     rsp, 8
.text:0000000000002334                 pop     rbx
.text:0000000000002335                 pop     rbp
.text:0000000000002336                 retn
.text:0000000000002336 ; } // starts at 2250
.text:0000000000002336 gettext_quote   endp
.text:0000000000002336
.text:0000000000002336 ; ---------------------------------------------------------------------------
.text:0000000000002337                 align 20h
.text:0000000000002340
.text:0000000000002340 ; =============== S U B R O U T I N E =======================================
.text:0000000000002340
.text:0000000000002340 ; Attributes: info_from_lumina
.text:0000000000002340
.text:0000000000002340 ; size_t __fastcall quotearg_buffer_restyled(char *buffer, size_t buffersize, const char *arg, size_t argsize, quoting_style quoting_style, int flags, const unsigned int *quote_these_too, const char *left_quote, const char *right_quote)
.text:0000000000002340 quotearg_buffer_restyled proc near      ; CODE XREF: quotearg_buffer_restyled+BCD↓p
.text:0000000000002340                                         ; quotearg_buffer_restyled+11CB↓p ...
.text:0000000000002340
.text:0000000000002340 var_E0          = dword ptr -0E0h
.text:0000000000002340 var_DB          = byte ptr -0DBh
.text:0000000000002340 var_DA          = byte ptr -0DAh
.text:0000000000002340 var_D9          = byte ptr -0D9h
.text:0000000000002340 s               = qword ptr -0D8h
.text:0000000000002340 n               = qword ptr -0D0h
.text:0000000000002340 var_C8          = qword ptr -0C8h
.text:0000000000002340 ps              = qword ptr -0C0h
.text:0000000000002340 var_B8          = qword ptr -0B8h
.text:0000000000002340 var_B0          = qword ptr -0B0h
.text:0000000000002340 var_A8          = qword ptr -0A8h
.text:0000000000002340 s2              = qword ptr -0A0h
.text:0000000000002340 var_98          = qword ptr -98h
.text:0000000000002340 var_90          = qword ptr -90h
.text:0000000000002340 var_88          = qword ptr -88h
.text:0000000000002340 var_80          = qword ptr -80h
.text:0000000000002340 var_78          = qword ptr -78h
.text:0000000000002340 var_70          = dword ptr -70h
.text:0000000000002340 var_6C          = byte ptr -6Ch
.text:0000000000002340 var_6B          = byte ptr -6Bh
.text:0000000000002340 var_6A          = byte ptr -6Ah
.text:0000000000002340 var_69          = byte ptr -69h
.text:0000000000002340 var_68          = qword ptr -68h
.text:0000000000002340 var_60          = qword ptr -60h
.text:0000000000002340 wc              = dword ptr -4Ch
.text:0000000000002340 var_48          = qword ptr -48h
.text:0000000000002340 var_40          = qword ptr -40h
.text:0000000000002340 arg_0           = qword ptr  8
.text:0000000000002340 arg_8           = qword ptr  10h
.text:0000000000002340 arg_10          = qword ptr  18h
.text:0000000000002340
.text:0000000000002340 ; __unwind {
.text:0000000000002340                 push    r15
.text:0000000000002342                 push    r14
.text:0000000000002344                 mov     r15d, r8d
.text:0000000000002347                 push    r13
.text:0000000000002349                 push    r12
.text:000000000000234B                 mov     r14, rdi
.text:000000000000234E                 push    rbp
.text:000000000000234F                 push    rbx
.text:0000000000002350                 mov     ebx, r9d
.text:0000000000002353                 mov     r13, rsi
.text:0000000000002356                 mov     rbp, rcx
.text:0000000000002359                 and     ebx, 2
.text:000000000000235C                 sub     rsp, 0B8h
.text:0000000000002363                 mov     rax, [rsp+0E8h+arg_0]
.text:000000000000236B                 mov     [rsp+0E8h+s], rdx
.text:0000000000002370                 mov     [rsp+0E8h+var_E0], r8d
.text:0000000000002375                 mov     [rsp+0E8h+var_70], r9d
.text:000000000000237A                 mov     [rsp+0E8h+var_C8], rax
.text:000000000000237F                 mov     rax, [rsp+0E8h+arg_8]
.text:0000000000002387                 mov     [rsp+0E8h+var_80], rax
.text:000000000000238C                 mov     rax, [rsp+0E8h+arg_10]
.text:0000000000002394                 mov     [rsp+0E8h+var_88], rax
.text:0000000000002399                 mov     rax, fs:28h
.text:00000000000023A2                 mov     [rsp+0E8h+var_40], rax
.text:00000000000023AA                 xor     eax, eax
.text:00000000000023AC                 call    ___ctype_get_mb_cur_max
.text:00000000000023B1                 cmp     r15d, 0Ah       ; switch 11 cases
.text:00000000000023B5                 mov     [rsp+0E8h+var_90], rax
.text:00000000000023BA                 ja      def_23D1        ; jumptable 00000000000121F1 default case
.text:00000000000023C0                 lea     rcx, jpt_23D1
.text:00000000000023C7                 mov     edx, r15d
.text:00000000000023CA                 movsxd  rax, ds:(jpt_23D1 - 7200h)[rcx+rdx*4]
.text:00000000000023CE                 add     rax, rcx
.text:00000000000023D1                 jmp     rax             ; switch jump
.text:00000000000023D3 ; ---------------------------------------------------------------------------
.text:00000000000023D3
.text:00000000000023D3 loc_23D3:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000023D3                                         ; quotearg_buffer_restyled+C66↓j
.text:00000000000023D3                                         ; DATA XREF: ...
.text:00000000000023D3                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 1
.text:00000000000023D8                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000023DD                 xor     r12d, r12d
.text:00000000000023E0                 mov     [rsp+0E8h+var_98], 0
.text:00000000000023E9                 mov     [rsp+0E8h+var_D9], 1
.text:00000000000023EE                 mov     [rsp+0E8h+var_DB], 0
.text:00000000000023F3
.text:00000000000023F3 loc_23F3:                               ; CODE XREF: quotearg_buffer_restyled+E94↓j
.text:00000000000023F3                 lea     rax, asc_71A5   ; "'"
.text:00000000000023FA                 mov     [rsp+0E8h+n], 1
.text:0000000000002403                 xor     r15d, r15d
.text:0000000000002406                 mov     [rsp+0E8h+var_E0], 2
.text:000000000000240E                 mov     [rsp+0E8h+s2], rax
.text:0000000000002413
.text:0000000000002413 loc_2413:                               ; CODE XREF: quotearg_buffer_restyled+7F4↓j
.text:0000000000002413                                         ; quotearg_buffer_restyled+CB8↓j ...
.text:0000000000002413                 xor     r11d, r11d
.text:0000000000002416                 mov     rax, rbp
.text:0000000000002419                 mov     r8d, r12d
.text:000000000000241C                 mov     rbp, r11
.text:000000000000241F                 mov     r11, rax
.text:0000000000002422                 nop     word ptr [rax+rax+00h]
.text:0000000000002428
.text:0000000000002428 loc_2428:                               ; CODE XREF: quotearg_buffer_restyled+2B2↓j
.text:0000000000002428                                         ; quotearg_buffer_restyled+42C↓j
.text:0000000000002428                 cmp     r11, rbp
.text:000000000000242B                 setnz   r12b
.text:000000000000242F                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000002433                 jnz     short loc_2442
.text:0000000000002435                 mov     rax, [rsp+0E8h+s]
.text:000000000000243A                 cmp     byte ptr [rax+rbp], 0
.text:000000000000243E                 setnz   r12b
.text:0000000000002442
.text:0000000000002442 loc_2442:                               ; CODE XREF: quotearg_buffer_restyled+F3↑j
.text:0000000000002442                 test    r12b, r12b
.text:0000000000002445                 jz      loc_2AA0
.text:000000000000244B                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002450                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000002455                 lea     r9, [rdi+rbp]
.text:0000000000002459                 setnz   al
.text:000000000000245C                 and     al, [rsp+0E8h+var_DB]
.text:0000000000002460                 mov     r10d, eax
.text:0000000000002463                 jz      loc_2510
.text:0000000000002469                 mov     rax, [rsp+0E8h+n]
.text:000000000000246E                 test    rax, rax
.text:0000000000002471                 jz      loc_28A0
.text:0000000000002477                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:000000000000247B                 lea     rbx, [rbp+rax+0]
.text:0000000000002480                 jnz     short loc_24B0
.text:0000000000002482                 cmp     rax, 1
.text:0000000000002486                 jbe     short loc_24B0
.text:0000000000002488                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:000000000000248D                 mov     byte ptr [rsp+0E8h+var_B8], r10b
.text:0000000000002492                 mov     [rsp+0E8h+ps], r9
.text:0000000000002497                 call    _strlen
.text:000000000000249C                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:00000000000024A2                 movzx   r10d, byte ptr [rsp+0E8h+var_B8]
.text:00000000000024A8                 mov     r11, rax
.text:00000000000024AB                 mov     r9, [rsp+0E8h+ps]
.text:00000000000024B0
.text:00000000000024B0 loc_24B0:                               ; CODE XREF: quotearg_buffer_restyled+140↑j
.text:00000000000024B0                                         ; quotearg_buffer_restyled+146↑j
.text:00000000000024B0                 cmp     rbx, r11
.text:00000000000024B3                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:00000000000024B8                 ja      loc_2A70
.text:00000000000024BE                 mov     rdx, [rsp+0E8h+n] ; n
.text:00000000000024C3                 mov     rsi, [rsp+0E8h+s2] ; s2
.text:00000000000024C8                 mov     rdi, r9         ; s1
.text:00000000000024CB                 mov     [rsp+0E8h+var_A8], r11
.text:00000000000024D0                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:00000000000024D5                 mov     [rsp+0E8h+var_B8], r9
.text:00000000000024DA                 call    _memcmp
.text:00000000000024DF                 test    eax, eax
.text:00000000000024E1                 mov     r9, [rsp+0E8h+var_B8]
.text:00000000000024E6                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:00000000000024EC                 mov     r11, [rsp+0E8h+var_A8]
.text:00000000000024F1                 jnz     loc_2A70
.text:00000000000024F7                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000024FC                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000002502                 jnz     loc_3485
.text:0000000000002508                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000002510
.text:0000000000002510 loc_2510:                               ; CODE XREF: quotearg_buffer_restyled+123↑j
.text:0000000000002510                                         ; quotearg_buffer_restyled+733↓j
.text:0000000000002510                 movzx   ebx, byte ptr [r9]
.text:0000000000002514                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000002517                 ja      def_252E        ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:000000000000251D                 lea     rcx, jpt_252E
.text:0000000000002524                 movzx   edx, bl
.text:0000000000002527                 movsxd  rax, ds:(jpt_252E - 722Ch)[rcx+rdx*4]
.text:000000000000252B                 add     rax, rcx
.text:000000000000252E                 jmp     rax             ; switch jump
.text:0000000000002530 ; ---------------------------------------------------------------------------
.text:0000000000002530
.text:0000000000002530 loc_2530:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000002530                                         ; DATA XREF: .rodata:jpt_28BA↓o
.text:0000000000002530                 xor     r10d, r10d      ; jumptable 00000000000126DA cases 123,125
.text:0000000000002533
.text:0000000000002533 loc_2533:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002533                                         ; DATA XREF: .rodata:jpt_252E↓o
.text:0000000000002533                 cmp     r11, 1          ; jumptable 000000000001234E cases 123,125
.text:0000000000002537                 setnz   al
.text:000000000000253A                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:000000000000253E                 jnz     short loc_254C
.text:0000000000002540                 mov     rax, [rsp+0E8h+s]
.text:0000000000002545                 cmp     byte ptr [rax+1], 0
.text:0000000000002549                 setnz   al
.text:000000000000254C
.text:000000000000254C loc_254C:                               ; CODE XREF: quotearg_buffer_restyled+1FE↑j
.text:000000000000254C                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002551                 setz    dl
.text:0000000000002554                 test    al, al
.text:0000000000002556                 jz      loc_27A8
.text:000000000000255C
.text:000000000000255C loc_255C:                               ; CODE XREF: quotearg_buffer_restyled+46B↓j
.text:000000000000255C                 xor     r12d, r12d
.text:000000000000255F                 xor     eax, eax
.text:0000000000002561                 nop     dword ptr [rax+00000000h]
.text:0000000000002568
.text:0000000000002568 loc_2568:                               ; CODE XREF: quotearg_buffer_restyled+2E9↓j
.text:0000000000002568                                         ; quotearg_buffer_restyled+30C↓j ...
.text:0000000000002568                 cmp     [rsp+0E8h+var_DB], 1
.text:000000000000256D                 jnz     loc_2682
.text:0000000000002573                 test    dl, dl
.text:0000000000002575                 jnz     loc_2682
.text:000000000000257B
.text:000000000000257B loc_257B:                               ; CODE XREF: quotearg_buffer_restyled+347↓j
.text:000000000000257B                 mov     rsi, [rsp+0E8h+var_C8]
.text:0000000000002580                 test    rsi, rsi
.text:0000000000002583                 jz      short loc_2599
.text:0000000000002585                 mov     edx, ebx
.text:0000000000002587                 shr     dl, 5
.text:000000000000258A                 movzx   edx, dl
.text:000000000000258D                 mov     edx, [rsi+rdx*4]
.text:0000000000002590                 bt      edx, ebx
.text:0000000000002593                 jb      loc_26E3
.text:0000000000002599
.text:0000000000002599 loc_2599:                               ; CODE XREF: quotearg_buffer_restyled+243↑j
.text:0000000000002599                                         ; quotearg_buffer_restyled+34D↓j ...
.text:0000000000002599                 test    r10b, r10b
.text:000000000000259C                 jnz     loc_26E3
.text:00000000000025A2                 xor     eax, 1
.text:00000000000025A5                 add     rbp, 1
.text:00000000000025A9                 and     eax, r8d
.text:00000000000025AC
.text:00000000000025AC loc_25AC:                               ; CODE XREF: quotearg_buffer_restyled+75A↓j
.text:00000000000025AC                                         ; quotearg_buffer_restyled+AE8↓j
.text:00000000000025AC                 test    al, al
.text:00000000000025AE                 jz      short loc_25D0
.text:00000000000025B0                 cmp     r13, r15
.text:00000000000025B3                 jbe     short loc_25BA
.text:00000000000025B5                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000025BA
.text:00000000000025BA loc_25BA:                               ; CODE XREF: quotearg_buffer_restyled+273↑j
.text:00000000000025BA                 lea     rax, [r15+1]
.text:00000000000025BE                 cmp     r13, rax
.text:00000000000025C1                 jbe     short loc_25C9
.text:00000000000025C3                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:00000000000025C9
.text:00000000000025C9 loc_25C9:                               ; CODE XREF: quotearg_buffer_restyled+281↑j
.text:00000000000025C9                 add     r15, 2
.text:00000000000025CD                 xor     r8d, r8d
.text:00000000000025D0
.text:00000000000025D0 loc_25D0:                               ; CODE XREF: quotearg_buffer_restyled+26E↑j
.text:00000000000025D0                                         ; quotearg_buffer_restyled+403↓j ...
.text:00000000000025D0                 cmp     r15, r13
.text:00000000000025D3                 jnb     short loc_25D9
.text:00000000000025D5                 mov     [r14+r15], bl
.text:00000000000025D9
.text:00000000000025D9 loc_25D9:                               ; CODE XREF: quotearg_buffer_restyled+293↑j
.text:00000000000025D9                 movzx   edi, [rsp+0E8h+var_DA]
.text:00000000000025DE                 add     r15, 1
.text:00000000000025E2                 mov     eax, 0
.text:00000000000025E7                 test    r12b, r12b
.text:00000000000025EA                 cmovz   edi, eax
.text:00000000000025ED                 mov     [rsp+0E8h+var_DA], dil
.text:00000000000025F2                 jmp     loc_2428
.text:00000000000025F2 ; ---------------------------------------------------------------------------
.text:00000000000025F7                 align 20h
.text:0000000000002600
.text:0000000000002600 loc_2600:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000002600                                         ; DATA XREF: .rodata:jpt_28BA↓o
.text:0000000000002600                 xor     r10d, r10d      ; jumptable 00000000000126DA case 63
.text:0000000000002603
.text:0000000000002603 loc_2603:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002603                                         ; DATA XREF: .rodata:jpt_252E↓o
.text:0000000000002603                 mov     eax, [rsp+0E8h+var_E0] ; jumptable 000000000001234E case 63
.text:0000000000002607                 cmp     eax, 2
.text:000000000000260A                 jz      loc_2BC8
.text:0000000000002610                 cmp     eax, 5
.text:0000000000002613                 jz      loc_2B88
.text:0000000000002619                 cmp     eax, 2
.text:000000000000261C                 mov     ebx, 3Fh ; '?'
.text:0000000000002621                 setz    dl
.text:0000000000002624                 xor     r12d, r12d
.text:0000000000002627                 xor     eax, eax
.text:0000000000002629                 jmp     loc_2568
.text:0000000000002629 ; ---------------------------------------------------------------------------
.text:000000000000262E                 align 10h
.text:0000000000002630
.text:0000000000002630 loc_2630:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000002630                                         ; DATA XREF: .rodata:jpt_28BA↓o
.text:0000000000002630                 xor     r10d, r10d      ; jumptable 00000000000126DA case 39
.text:0000000000002633
.text:0000000000002633 loc_2633:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002633                                         ; DATA XREF: .rodata:jpt_252E↓o
.text:0000000000002633                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 39
.text:0000000000002638                 jz      loc_2B40
.text:000000000000263E                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000002643                 xor     edx, edx
.text:0000000000002645                 xor     eax, eax
.text:0000000000002647                 mov     ebx, 27h ; '''
.text:000000000000264C                 jmp     loc_2568
.text:000000000000264C ; ---------------------------------------------------------------------------
.text:0000000000002651                 align 8
.text:0000000000002658
.text:0000000000002658 loc_2658:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002658                                         ; DATA XREF: .rodata:jpt_252E↓o
.text:0000000000002658                 mov     edx, 9          ; jumptable 000000000001234E case 9
.text:000000000000265D                 mov     ebx, 74h ; 't'
.text:0000000000002662
.text:0000000000002662 loc_2662:                               ; CODE XREF: quotearg_buffer_restyled+4BA↓j
.text:0000000000002662                                         ; quotearg_buffer_restyled+4EA↓j ...
.text:0000000000002662                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002667                 setz    al
.text:000000000000266A                 and     al, [rsp+0E8h+var_D9]
.text:000000000000266E                 jnz     loc_27BE
.text:0000000000002674
.text:0000000000002674 loc_2674:                               ; CODE XREF: quotearg_buffer_restyled+362↓j
.text:0000000000002674                                         ; quotearg_buffer_restyled+45A↓j ...
.text:0000000000002674                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000002679                 jnz     short loc_26E0
.text:000000000000267B
.text:000000000000267B loc_267B:                               ; CODE XREF: quotearg_buffer_restyled+422↓j
.text:000000000000267B                 mov     ebx, edx
.text:000000000000267D                 xor     r12d, r12d
.text:0000000000002680                 xor     eax, eax
.text:0000000000002682
.text:0000000000002682 loc_2682:                               ; CODE XREF: quotearg_buffer_restyled+22D↑j
.text:0000000000002682                                         ; quotearg_buffer_restyled+235↑j
.text:0000000000002682                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002687                 jnz     loc_257B
.text:000000000000268D                 jmp     loc_2599
.text:000000000000268D ; ---------------------------------------------------------------------------
.text:0000000000002692                 align 8
.text:0000000000002698
.text:0000000000002698 loc_2698:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002698                                         ; DATA XREF: .rodata:jpt_252E↓o
.text:0000000000002698                 mov     edx, 8          ; jumptable 000000000001234E case 8
.text:000000000000269D                 mov     ebx, 62h ; 'b'
.text:00000000000026A2                 jmp     short loc_2674
.text:00000000000026A2 ; ---------------------------------------------------------------------------
.text:00000000000026A4                 align 8
.text:00000000000026A8
.text:00000000000026A8 loc_26A8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000026A8                                         ; DATA XREF: .rodata:jpt_252E↓o
.text:00000000000026A8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 92
.text:00000000000026AD                 jz      loc_2A80
.text:00000000000026B3                 cmp     [rsp+0E8h+var_DB], 0
.text:00000000000026B8                 jz      loc_28D0
.text:00000000000026BE
.text:00000000000026BE loc_26BE:                               ; CODE XREF: quotearg_buffer_restyled+588↓j
.text:00000000000026BE                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000026C3                 jz      loc_28D0
.text:00000000000026C9                 cmp     [rsp+0E8h+n], 0
.text:00000000000026CF                 jnz     loc_2A8B
.text:00000000000026D5                 mov     ebx, 5Ch ; '\'
.text:00000000000026DA                 nop     word ptr [rax+rax+00h]
.text:00000000000026E0
.text:00000000000026E0 loc_26E0:                               ; CODE XREF: quotearg_buffer_restyled+339↑j
.text:00000000000026E0                                         ; quotearg_buffer_restyled+5D5↓j ...
.text:00000000000026E0                 xor     r12d, r12d
.text:00000000000026E3
.text:00000000000026E3 loc_26E3:                               ; CODE XREF: quotearg_buffer_restyled+253↑j
.text:00000000000026E3                                         ; quotearg_buffer_restyled+25C↑j
.text:00000000000026E3                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000026E8                 setz    dl
.text:00000000000026EB                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000026F0                 mov     eax, edx
.text:00000000000026F2                 jnz     loc_2F48
.text:00000000000026F8                 mov     eax, r8d
.text:00000000000026FB                 xor     eax, 1
.text:00000000000026FE                 and     al, dl
.text:0000000000002700                 jz      short loc_2731
.text:0000000000002702                 cmp     r13, r15
.text:0000000000002705                 jbe     short loc_270C
.text:0000000000002707                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000270C
.text:000000000000270C loc_270C:                               ; CODE XREF: quotearg_buffer_restyled+3C5↑j
.text:000000000000270C                 lea     rdx, [r15+1]
.text:0000000000002710                 cmp     r13, rdx
.text:0000000000002713                 jbe     short loc_271B
.text:0000000000002715                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:000000000000271B
.text:000000000000271B loc_271B:                               ; CODE XREF: quotearg_buffer_restyled+3D3↑j
.text:000000000000271B                 lea     rdx, [r15+2]
.text:000000000000271F                 cmp     r13, rdx
.text:0000000000002722                 jbe     short loc_272A
.text:0000000000002724                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000272A
.text:000000000000272A loc_272A:                               ; CODE XREF: quotearg_buffer_restyled+3E2↑j
.text:000000000000272A                 add     r15, 3
.text:000000000000272E                 mov     r8d, eax
.text:0000000000002731
.text:0000000000002731 loc_2731:                               ; CODE XREF: quotearg_buffer_restyled+3C0↑j
.text:0000000000002731                 cmp     r13, r15
.text:0000000000002734                 jbe     short loc_273B
.text:0000000000002736                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:000000000000273B
.text:000000000000273B loc_273B:                               ; CODE XREF: quotearg_buffer_restyled+3F4↑j
.text:000000000000273B                 add     r15, 1
.text:000000000000273F                 add     rbp, 1
.text:0000000000002743                 jmp     loc_25D0
.text:0000000000002743 ; ---------------------------------------------------------------------------
.text:0000000000002748                 align 10h
.text:0000000000002750
.text:0000000000002750 loc_2750:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002750                                         ; DATA XREF: .rodata:jpt_252E↓o
.text:0000000000002750                 cmp     [rsp+0E8h+var_DB], 0 ; jumptable 000000000001234E case 0
.text:0000000000002755                 jnz     loc_2923
.text:000000000000275B                 xor     edx, edx
.text:000000000000275D                 test    byte ptr [rsp+0E8h+var_70], 1
.text:0000000000002762                 jz      loc_267B
.text:0000000000002768                 add     rbp, 1
.text:000000000000276C                 jmp     loc_2428
.text:000000000000276C ; ---------------------------------------------------------------------------
.text:0000000000002771                 align 8
.text:0000000000002778
.text:0000000000002778 loc_2778:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002778                                         ; DATA XREF: .rodata:jpt_252E↓o
.text:0000000000002778                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 37,43-58,65-90,93,95,97-122
.text:000000000000277D                 setz    dl
.text:0000000000002780                 xor     eax, eax
.text:0000000000002782                 jmp     loc_2568
.text:0000000000002782 ; ---------------------------------------------------------------------------
.text:0000000000002787                 align 10h
.text:0000000000002790
.text:0000000000002790 loc_2790:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002790                                         ; DATA XREF: .rodata:jpt_252E↓o
.text:0000000000002790                 mov     edx, 7          ; jumptable 000000000001234E case 7
.text:0000000000002795                 mov     ebx, 61h ; 'a'
.text:000000000000279A                 jmp     loc_2674
.text:000000000000279A ; ---------------------------------------------------------------------------
.text:000000000000279F                 align 20h
.text:00000000000027A0
.text:00000000000027A0 loc_27A0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000027A0                                         ; DATA XREF: .rodata:jpt_252E↓o
.text:00000000000027A0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 35,126
.text:00000000000027A5                 setz    dl
.text:00000000000027A8
.text:00000000000027A8 loc_27A8:                               ; CODE XREF: quotearg_buffer_restyled+216↑j
.text:00000000000027A8                                         ; quotearg_buffer_restyled+6A3↓j
.text:00000000000027A8                 test    rbp, rbp
.text:00000000000027AB                 jnz     loc_255C
.text:00000000000027B1
.text:00000000000027B1 loc_27B1:                               ; CODE XREF: quotearg_buffer_restyled+49B↓j
.text:00000000000027B1                                         ; quotearg_buffer_restyled+4AD↓j ...
.text:00000000000027B1                 movzx   eax, [rsp+0E8h+var_D9]
.text:00000000000027B6                 and     al, dl
.text:00000000000027B8                 jz      loc_2568
.text:00000000000027BE
.text:00000000000027BE loc_27BE:                               ; CODE XREF: quotearg_buffer_restyled+32E↑j
.text:00000000000027BE                 mov     rbp, r11
.text:00000000000027C1                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000027C9                 jmp     loc_2EC9
.text:00000000000027C9 ; ---------------------------------------------------------------------------
.text:00000000000027CE                 align 10h
.text:00000000000027D0
.text:00000000000027D0 loc_27D0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000027D0                                         ; DATA XREF: .rodata:jpt_252E↓o
.text:00000000000027D0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:00000000000027D5                 setz    dl
.text:00000000000027D8                 xor     r12d, r12d
.text:00000000000027DB                 jmp     short loc_27B1
.text:00000000000027DB ; ---------------------------------------------------------------------------
.text:00000000000027DD                 align 20h
.text:00000000000027E0
.text:00000000000027E0 loc_27E0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000027E0                                         ; DATA XREF: .rodata:jpt_252E↓o
.text:00000000000027E0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 32
.text:00000000000027E5                 mov     ebx, 20h ; ' '
.text:00000000000027EA                 setz    dl
.text:00000000000027ED                 jmp     short loc_27B1
.text:00000000000027ED ; ---------------------------------------------------------------------------
.text:00000000000027EF                 align 10h
.text:00000000000027F0
.text:00000000000027F0 loc_27F0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000027F0                                         ; DATA XREF: .rodata:jpt_252E↓o
.text:00000000000027F0                 mov     edx, 0Dh        ; jumptable 000000000001234E case 13
.text:00000000000027F5                 mov     ebx, 72h ; 'r'
.text:00000000000027FA                 jmp     loc_2662
.text:00000000000027FA ; ---------------------------------------------------------------------------
.text:00000000000027FF                 align 20h
.text:0000000000002800
.text:0000000000002800 loc_2800:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002800                                         ; DATA XREF: .rodata:jpt_252E↓o
.text:0000000000002800                 mov     edx, 0Ch        ; jumptable 000000000001234E case 12
.text:0000000000002805                 mov     ebx, 66h ; 'f'
.text:000000000000280A                 jmp     loc_2674
.text:000000000000280A ; ---------------------------------------------------------------------------
.text:000000000000280F                 align 10h
.text:0000000000002810
.text:0000000000002810 loc_2810:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002810                                         ; DATA XREF: .rodata:jpt_252E↓o
.text:0000000000002810                 mov     edx, 0Bh        ; jumptable 000000000001234E case 11
.text:0000000000002815                 mov     ebx, 76h ; 'v'
.text:000000000000281A                 jmp     loc_2674
.text:000000000000281A ; ---------------------------------------------------------------------------
.text:000000000000281F                 align 20h
.text:0000000000002820
.text:0000000000002820 loc_2820:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002820                                         ; DATA XREF: .rodata:jpt_252E↓o
.text:0000000000002820                 mov     edx, 0Ah        ; jumptable 000000000001234E case 10
.text:0000000000002825                 mov     ebx, 6Eh ; 'n'
.text:000000000000282A                 jmp     loc_2662
.text:000000000000282A ; ---------------------------------------------------------------------------
.text:000000000000282F                 align 10h
.text:0000000000002830
.text:0000000000002830 def_28BA:                               ; CODE XREF: quotearg_buffer_restyled+567↓j
.text:0000000000002830                                         ; quotearg_buffer_restyled+57A↓j
.text:0000000000002830                                         ; DATA XREF: ...
.text:0000000000002830                 xor     r10d, r10d      ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000002833                 nop     dword ptr [rax+rax+00h]
.text:0000000000002838
.text:0000000000002838 def_252E:                               ; CODE XREF: quotearg_buffer_restyled+1D7↑j
.text:0000000000002838                                         ; quotearg_buffer_restyled+1EE↑j
.text:0000000000002838                                         ; DATA XREF: ...
.text:0000000000002838                 cmp     [rsp+0E8h+var_90], 1 ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:000000000000283E                 jnz     loc_2BE8
.text:0000000000002844                 mov     [rsp+0E8h+var_B0], r11
.text:0000000000002849                 mov     byte ptr [rsp+0E8h+var_B8], r8b
.text:000000000000284E                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000002853                 call    ___ctype_b_loc
.text:0000000000002858                 mov     rcx, [rax]
.text:000000000000285B                 movzx   edx, bl
.text:000000000000285E                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000002864                 movzx   r8d, byte ptr [rsp+0E8h+var_B8]
.text:000000000000286A                 mov     r11, [rsp+0E8h+var_B0]
.text:000000000000286F                 mov     edi, 1
.text:0000000000002874                 movzx   eax, word ptr [rcx+rdx*2]
.text:0000000000002878                 and     ax, 4000h
.text:000000000000287C                 setnz   r12b
.text:0000000000002880                 setz    al
.text:0000000000002883                 and     al, [rsp+0E8h+var_DB]
.text:0000000000002887
.text:0000000000002887 loc_2887:                               ; CODE XREF: quotearg_buffer_restyled+FED↓j
.text:0000000000002887                 test    al, al
.text:0000000000002889                 jnz     loc_3221
.text:000000000000288F                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002894                 setz    dl
.text:0000000000002897                 jmp     loc_2568
.text:0000000000002897 ; ---------------------------------------------------------------------------
.text:000000000000289C                 align 20h
.text:00000000000028A0
.text:00000000000028A0 loc_28A0:                               ; CODE XREF: quotearg_buffer_restyled+131↑j
.text:00000000000028A0                 movzx   ebx, byte ptr [r9]
.text:00000000000028A4                 cmp     bl, 7Eh         ; switch 127 cases
.text:00000000000028A7                 ja      short def_28BA  ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:00000000000028A9                 lea     rcx, jpt_28BA
.text:00000000000028B0                 movzx   edx, bl
.text:00000000000028B3                 movsxd  rax, ds:(jpt_28BA - 7428h)[rcx+rdx*4]
.text:00000000000028B7                 add     rax, rcx
.text:00000000000028BA                 jmp     rax             ; switch jump
.text:00000000000028BA ; ---------------------------------------------------------------------------
.text:00000000000028BC                 align 20h
.text:00000000000028C0
.text:00000000000028C0 loc_28C0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000028C0                                         ; DATA XREF: .rodata:jpt_28BA↓o
.text:00000000000028C0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 92
.text:00000000000028C3                 cmp     [rsp+0E8h+var_DB], 0
.text:00000000000028C8                 jnz     loc_26BE
.text:00000000000028CE                 xchg    ax, ax
.text:00000000000028D0
.text:00000000000028D0 loc_28D0:                               ; CODE XREF: quotearg_buffer_restyled+378↑j
.text:00000000000028D0                                         ; quotearg_buffer_restyled+383↑j
.text:00000000000028D0                 mov     edx, 5Ch ; '\'
.text:00000000000028D5                 mov     ebx, 5Ch ; '\'
.text:00000000000028DA                 jmp     loc_2674
.text:00000000000028DA ; ---------------------------------------------------------------------------
.text:00000000000028DF                 align 20h
.text:00000000000028E0
.text:00000000000028E0 loc_28E0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000028E0                                         ; DATA XREF: .rodata:jpt_28BA↓o
.text:00000000000028E0                 mov     edx, 0Ch        ; jumptable 00000000000126DA case 12
.text:00000000000028E5                 xor     r10d, r10d
.text:00000000000028E8                 mov     ebx, 66h ; 'f'
.text:00000000000028ED                 jmp     loc_2674
.text:00000000000028ED ; ---------------------------------------------------------------------------
.text:00000000000028F2                 align 8
.text:00000000000028F8
.text:00000000000028F8 loc_28F8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000028F8                                         ; DATA XREF: .rodata:jpt_28BA↓o
.text:00000000000028F8                 mov     edx, 0Ah        ; jumptable 00000000000126DA case 10
.text:00000000000028FD                 xor     r10d, r10d
.text:0000000000002900                 mov     ebx, 6Eh ; 'n'
.text:0000000000002905                 jmp     loc_2662
.text:0000000000002905 ; ---------------------------------------------------------------------------
.text:000000000000290A                 align 10h
.text:0000000000002910
.text:0000000000002910 loc_2910:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002910                                         ; DATA XREF: .rodata:jpt_28BA↓o
.text:0000000000002910                 mov     ebx, 61h ; 'a'  ; jumptable 00000000000126DA case 7
.text:0000000000002915                 jmp     loc_26E0
.text:0000000000002915 ; ---------------------------------------------------------------------------
.text:000000000000291A                 align 20h
.text:0000000000002920
.text:0000000000002920 loc_2920:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002920                                         ; DATA XREF: .rodata:jpt_28BA↓o
.text:0000000000002920                 xor     r10d, r10d      ; jumptable 00000000000126DA case 0
.text:0000000000002923
.text:0000000000002923 loc_2923:                               ; CODE XREF: quotearg_buffer_restyled+415↑j
.text:0000000000002923                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002928                 setz    dl
.text:000000000000292B                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002930                 jnz     loc_34CA
.text:0000000000002936                 mov     eax, r8d
.text:0000000000002939                 mov     rcx, r15
.text:000000000000293C                 xor     eax, 1
.text:000000000000293F                 and     al, dl
.text:0000000000002941                 jz      short loc_2970
.text:0000000000002943                 cmp     r13, r15
.text:0000000000002946                 jbe     short loc_294D
.text:0000000000002948                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000294D
.text:000000000000294D loc_294D:                               ; CODE XREF: quotearg_buffer_restyled+606↑j
.text:000000000000294D                 lea     rcx, [r15+1]
.text:0000000000002951                 cmp     r13, rcx
.text:0000000000002954                 jbe     short loc_295C
.text:0000000000002956                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:000000000000295C
.text:000000000000295C loc_295C:                               ; CODE XREF: quotearg_buffer_restyled+614↑j
.text:000000000000295C                 lea     rcx, [r15+2]
.text:0000000000002960                 cmp     r13, rcx
.text:0000000000002963                 ja      loc_2F99
.text:0000000000002969
.text:0000000000002969 loc_2969:                               ; CODE XREF: quotearg_buffer_restyled+C5F↓j
.text:0000000000002969                 lea     rcx, [r15+3]
.text:000000000000296D                 mov     r8d, eax
.text:0000000000002970
.text:0000000000002970 loc_2970:                               ; CODE XREF: quotearg_buffer_restyled+601↑j
.text:0000000000002970                 cmp     r13, rcx
.text:0000000000002973                 jbe     short loc_297A
.text:0000000000002975                 mov     byte ptr [r14+rcx], 5Ch ; '\'
.text:000000000000297A
.text:000000000000297A loc_297A:                               ; CODE XREF: quotearg_buffer_restyled+633↑j
.text:000000000000297A                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000297F                 lea     r15, [rcx+1]
.text:0000000000002983                 jz      loc_2F89
.text:0000000000002989                 lea     rax, [rbp+1]
.text:000000000000298D                 cmp     rax, r11
.text:0000000000002990                 jnb     short loc_29AB
.text:0000000000002992                 mov     rax, [rsp+0E8h+s]
.text:0000000000002997                 movzx   eax, byte ptr [rax+rbp+1]
.text:000000000000299C                 mov     byte ptr [rsp+0E8h+ps], al
.text:00000000000029A0                 sub     eax, 30h ; '0'
.text:00000000000029A3                 cmp     al, 9
.text:00000000000029A5                 jbe     loc_31D9
.text:00000000000029AB
.text:00000000000029AB loc_29AB:                               ; CODE XREF: quotearg_buffer_restyled+650↑j
.text:00000000000029AB                 mov     eax, r12d
.text:00000000000029AE                 mov     ebx, 30h ; '0'
.text:00000000000029B3                 xor     r12d, r12d
.text:00000000000029B6                 jmp     loc_2568
.text:00000000000029B6 ; ---------------------------------------------------------------------------
.text:00000000000029BB                 align 20h
.text:00000000000029C0
.text:00000000000029C0 loc_29C0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000029C0                                         ; DATA XREF: .rodata:jpt_28BA↓o
.text:00000000000029C0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 37,43-58,65-90,93,95,97-122
.text:00000000000029C5                 mov     r12d, r10d
.text:00000000000029C8                 setz    dl
.text:00000000000029CB                 xor     r10d, r10d
.text:00000000000029CE                 xor     eax, eax
.text:00000000000029D0                 jmp     loc_2568
.text:00000000000029D0 ; ---------------------------------------------------------------------------
.text:00000000000029D5                 align 8
.text:00000000000029D8
.text:00000000000029D8 loc_29D8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000029D8                                         ; DATA XREF: .rodata:jpt_28BA↓o
.text:00000000000029D8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 35,126
.text:00000000000029DD                 setz    dl
.text:00000000000029E0                 xor     r10d, r10d
.text:00000000000029E3                 jmp     loc_27A8
.text:00000000000029E3 ; ---------------------------------------------------------------------------
.text:00000000000029E8                 align 10h
.text:00000000000029F0
.text:00000000000029F0 loc_29F0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000029F0                                         ; DATA XREF: .rodata:jpt_28BA↓o
.text:00000000000029F0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:00000000000029F5                 setz    dl
.text:00000000000029F8                 xor     r10d, r10d
.text:00000000000029FB                 xor     r12d, r12d
.text:00000000000029FE                 jmp     loc_27B1
.text:00000000000029FE ; ---------------------------------------------------------------------------
.text:0000000000002A03                 align 8
.text:0000000000002A08
.text:0000000000002A08 loc_2A08:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002A08                                         ; DATA XREF: .rodata:jpt_28BA↓o
.text:0000000000002A08                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA case 32
.text:0000000000002A0D                 mov     r12d, r10d
.text:0000000000002A10                 mov     ebx, 20h ; ' '
.text:0000000000002A15                 setz    dl
.text:0000000000002A18                 xor     r10d, r10d
.text:0000000000002A1B                 jmp     loc_27B1
.text:0000000000002A20 ; ---------------------------------------------------------------------------
.text:0000000000002A20
.text:0000000000002A20 loc_2A20:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002A20                                         ; DATA XREF: .rodata:jpt_28BA↓o
.text:0000000000002A20                 mov     edx, 0Dh        ; jumptable 00000000000126DA case 13
.text:0000000000002A25                 xor     r10d, r10d
.text:0000000000002A28                 mov     ebx, 72h ; 'r'
.text:0000000000002A2D                 jmp     loc_2662
.text:0000000000002A2D ; ---------------------------------------------------------------------------
.text:0000000000002A32                 align 8
.text:0000000000002A38
.text:0000000000002A38 loc_2A38:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002A38                                         ; DATA XREF: .rodata:jpt_28BA↓o
.text:0000000000002A38                 mov     ebx, 76h ; 'v'  ; jumptable 00000000000126DA case 11
.text:0000000000002A3D                 jmp     loc_26E0
.text:0000000000002A3D ; ---------------------------------------------------------------------------
.text:0000000000002A42                 align 8
.text:0000000000002A48
.text:0000000000002A48 loc_2A48:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002A48                                         ; DATA XREF: .rodata:jpt_28BA↓o
.text:0000000000002A48                 mov     edx, 9          ; jumptable 00000000000126DA case 9
.text:0000000000002A4D                 xor     r10d, r10d
.text:0000000000002A50                 mov     ebx, 74h ; 't'
.text:0000000000002A55                 jmp     loc_2662
.text:0000000000002A55 ; ---------------------------------------------------------------------------
.text:0000000000002A5A                 align 20h
.text:0000000000002A60
.text:0000000000002A60 loc_2A60:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002A60                                         ; DATA XREF: .rodata:jpt_28BA↓o
.text:0000000000002A60                 mov     ebx, 62h ; 'b'  ; jumptable 00000000000126DA case 8
.text:0000000000002A65                 jmp     loc_26E0
.text:0000000000002A65 ; ---------------------------------------------------------------------------
.text:0000000000002A6A                 align 10h
.text:0000000000002A70
.text:0000000000002A70 loc_2A70:                               ; CODE XREF: quotearg_buffer_restyled+178↑j
.text:0000000000002A70                                         ; quotearg_buffer_restyled+1B1↑j
.text:0000000000002A70                 xor     r10d, r10d
.text:0000000000002A73                 jmp     loc_2510
.text:0000000000002A73 ; ---------------------------------------------------------------------------
.text:0000000000002A78                 align 20h
.text:0000000000002A80
.text:0000000000002A80 loc_2A80:                               ; CODE XREF: quotearg_buffer_restyled+36D↑j
.text:0000000000002A80                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002A85                 jnz     loc_33F0
.text:0000000000002A8B
.text:0000000000002A8B loc_2A8B:                               ; CODE XREF: quotearg_buffer_restyled+38F↑j
.text:0000000000002A8B                 add     rbp, 1
.text:0000000000002A8F                 mov     eax, r8d
.text:0000000000002A92                 xor     r12d, r12d
.text:0000000000002A95                 mov     ebx, 5Ch ; '\'
.text:0000000000002A9A                 jmp     loc_25AC
.text:0000000000002A9A ; ---------------------------------------------------------------------------
.text:0000000000002A9F                 align 20h
.text:0000000000002AA0
.text:0000000000002AA0 loc_2AA0:                               ; CODE XREF: quotearg_buffer_restyled+105↑j
.text:0000000000002AA0                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002AA5                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000002AAA                 mov     r12d, r8d
.text:0000000000002AAD                 mov     rbp, r11
.text:0000000000002AB0                 setz    dl
.text:0000000000002AB3                 mov     eax, ebx
.text:0000000000002AB5                 test    r15, r15
.text:0000000000002AB8                 setz    cl
.text:0000000000002ABB                 and     eax, edx
.text:0000000000002ABD                 and     al, cl
.text:0000000000002ABF                 jnz     loc_3526
.text:0000000000002AC5                 mov     eax, ebx
.text:0000000000002AC7                 xor     eax, 1
.text:0000000000002ACA                 and     dl, al
.text:0000000000002ACC                 jz      loc_343C
.text:0000000000002AD2                 cmp     [rsp+0E8h+var_6C], 0
.text:0000000000002AD7                 jz      loc_343A
.text:0000000000002ADD                 cmp     [rsp+0E8h+var_DA], 0
.text:0000000000002AE2                 jnz     loc_34DD
.text:0000000000002AE8                 test    r13, r13
.text:0000000000002AEB                 setz    al
.text:0000000000002AEE                 cmp     [rsp+0E8h+var_98], 0
.text:0000000000002AF4                 setnz   dl
.text:0000000000002AF7                 and     al, dl
.text:0000000000002AF9                 jz      loc_351C
.text:0000000000002AFF                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000002B04
.text:0000000000002B04 loc_2B04:                               ; CODE XREF: quotearg_buffer_restyled+121D↓j
.text:0000000000002B04                 lea     rbx, asc_71A5   ; "'"
.text:0000000000002B0B                 mov     byte ptr [r14], 27h ; '''
.text:0000000000002B0F                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000002B17                 mov     r15d, 1
.text:0000000000002B1D                 mov     [rsp+0E8h+n], 1
.text:0000000000002B26                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000002B2B                 mov     [rsp+0E8h+s2], rbx
.text:0000000000002B30                 mov     [rsp+0E8h+var_6C], al
.text:0000000000002B34                 jmp     loc_2413
.text:0000000000002B34 ; ---------------------------------------------------------------------------
.text:0000000000002B39                 align 20h
.text:0000000000002B40
.text:0000000000002B40 loc_2B40:                               ; CODE XREF: quotearg_buffer_restyled+2F8↑j
.text:0000000000002B40                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002B45                 jnz     loc_33F0
.text:0000000000002B4B                 test    r13, r13
.text:0000000000002B4E                 jz      loc_2F50
.text:0000000000002B54                 xor     edx, edx
.text:0000000000002B56                 cmp     [rsp+0E8h+var_98], 0
.text:0000000000002B5C                 jnz     loc_2F50
.text:0000000000002B62
.text:0000000000002B62 loc_2B62:                               ; CODE XREF: quotearg_buffer_restyled+C44↓j
.text:0000000000002B62                                         ; quotearg_buffer_restyled+122A↓j
.text:0000000000002B62                 mov     [rsp+0E8h+var_98], r13
.text:0000000000002B67                 add     r15, 3
.text:0000000000002B6B                 xor     eax, eax
.text:0000000000002B6D                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000002B72                 xor     r8d, r8d
.text:0000000000002B75                 mov     r13, rdx
.text:0000000000002B78                 mov     ebx, 27h ; '''
.text:0000000000002B7D                 jmp     loc_2599
.text:0000000000002B7D ; ---------------------------------------------------------------------------
.text:0000000000002B82                 align 8
.text:0000000000002B88
.text:0000000000002B88 loc_2B88:                               ; CODE XREF: quotearg_buffer_restyled+2D3↑j
.text:0000000000002B88                 test    byte ptr [rsp+0E8h+var_70], 4
.text:0000000000002B8D                 jz      short loc_2BB0
.text:0000000000002B8F                 lea     rcx, [rbp+2]
.text:0000000000002B93                 cmp     rcx, r11
.text:0000000000002B96                 jnb     short loc_2BB0
.text:0000000000002B98                 mov     rax, [rsp+0E8h+s]
.text:0000000000002B9D                 cmp     byte ptr [rax+rbp+1], 3Fh ; '?'
.text:0000000000002BA2                 jz      loc_3332
.text:0000000000002BA8                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000002BB0
.text:0000000000002BB0 loc_2BB0:                               ; CODE XREF: quotearg_buffer_restyled+84D↑j
.text:0000000000002BB0                                         ; quotearg_buffer_restyled+856↑j ...
.text:0000000000002BB0                 xor     edx, edx
.text:0000000000002BB2                 xor     r12d, r12d
.text:0000000000002BB5                 xor     eax, eax
.text:0000000000002BB7                 mov     ebx, 3Fh ; '?'
.text:0000000000002BBC                 jmp     loc_2568
.text:0000000000002BBC ; ---------------------------------------------------------------------------
.text:0000000000002BC1                 align 8
.text:0000000000002BC8
.text:0000000000002BC8 loc_2BC8:                               ; CODE XREF: quotearg_buffer_restyled+2CA↑j
.text:0000000000002BC8                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002BCD                 jnz     loc_33F0
.text:0000000000002BD3                 xor     r12d, r12d
.text:0000000000002BD6                 xor     eax, eax
.text:0000000000002BD8                 mov     ebx, 3Fh ; '?'
.text:0000000000002BDD                 jmp     loc_2599
.text:0000000000002BDD ; ---------------------------------------------------------------------------
.text:0000000000002BE2                 align 8
.text:0000000000002BE8
.text:0000000000002BE8 loc_2BE8:                               ; CODE XREF: quotearg_buffer_restyled+4FE↑j
.text:0000000000002BE8                 lea     rax, [rsp+0E8h+var_48]
.text:0000000000002BF0                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000002BF4                 mov     [rsp+0E8h+var_48], 0
.text:0000000000002C00                 mov     [rsp+0E8h+ps], rax
.text:0000000000002C05                 jnz     short loc_2C34
.text:0000000000002C07                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000002C0C                 mov     byte ptr [rsp+0E8h+var_A8], r8b
.text:0000000000002C11                 mov     byte ptr [rsp+0E8h+var_B0], r10b
.text:0000000000002C16                 mov     [rsp+0E8h+var_B8], r9
.text:0000000000002C1B                 call    _strlen
.text:0000000000002C20                 movzx   r8d, byte ptr [rsp+0E8h+var_A8]
.text:0000000000002C26                 movzx   r10d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000002C2C                 mov     r11, rax
.text:0000000000002C2F                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000002C34
.text:0000000000002C34 loc_2C34:                               ; CODE XREF: quotearg_buffer_restyled+8C5↑j
.text:0000000000002C34                 lea     rax, [rsp+0E8h+wc]
.text:0000000000002C3C                 xor     ecx, ecx
.text:0000000000002C3E                 mov     [rsp+0E8h+var_6A], bl
.text:0000000000002C42                 mov     [rsp+0E8h+var_6B], r8b
.text:0000000000002C47                 mov     rbx, rcx
.text:0000000000002C4A                 mov     [rsp+0E8h+var_60], r9
.text:0000000000002C52                 mov     [rsp+0E8h+var_B0], rax
.text:0000000000002C57                 mov     [rsp+0E8h+var_69], r10b
.text:0000000000002C5C                 mov     [rsp+0E8h+var_68], r15
.text:0000000000002C64                 mov     [rsp+0E8h+var_A8], r14
.text:0000000000002C69                 mov     [rsp+0E8h+var_78], r13
.text:0000000000002C6E                 mov     [rsp+0E8h+var_B8], r11
.text:0000000000002C73
.text:0000000000002C73 loc_2C73:                               ; CODE XREF: quotearg_buffer_restyled+9AF↓j
.text:0000000000002C73                 mov     rax, [rsp+0E8h+s]
.text:0000000000002C78                 lea     r14, [rbp+rbx+0]
.text:0000000000002C7D                 mov     rdx, [rsp+0E8h+var_B8]
.text:0000000000002C82                 mov     rcx, [rsp+0E8h+ps]
.text:0000000000002C87                 mov     rdi, [rsp+0E8h+var_B0]
.text:0000000000002C8C                 lea     r13, [rax+r14]
.text:0000000000002C90                 sub     rdx, r14
.text:0000000000002C93                 mov     rsi, r13
.text:0000000000002C96                 call    rpl_mbrtowc
.text:0000000000002C9B                 test    rax, rax
.text:0000000000002C9E                 mov     r15, rax
.text:0000000000002CA1                 jz      short loc_2CF1
.text:0000000000002CA3                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000002CA7                 jz      loc_32C5
.text:0000000000002CAD                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000002CB1                 jz      loc_3251
.text:0000000000002CB7                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002CBC                 setz    al
.text:0000000000002CBF                 and     al, [rsp+0E8h+var_D9]
.text:0000000000002CC3                 jnz     loc_2E60
.text:0000000000002CC9
.text:0000000000002CC9 loc_2CC9:                               ; CODE XREF: quotearg_buffer_restyled+B24↓j
.text:0000000000002CC9                                         ; quotearg_buffer_restyled+B47↓j
.text:0000000000002CC9                 mov     edi, [rsp+0E8h+wc] ; wc
.text:0000000000002CD0                 call    _iswprint
.text:0000000000002CD5                 mov     rdi, [rsp+0E8h+ps] ; ps
.text:0000000000002CDA                 test    eax, eax
.text:0000000000002CDC                 mov     eax, 0
.text:0000000000002CE1                 cmovz   r12d, eax
.text:0000000000002CE5                 add     rbx, r15
.text:0000000000002CE8                 call    _mbsinit
.text:0000000000002CED                 test    eax, eax
.text:0000000000002CEF                 jz      short loc_2C73
.text:0000000000002CF1
.text:0000000000002CF1 loc_2CF1:                               ; CODE XREF: quotearg_buffer_restyled+961↑j
.text:0000000000002CF1                 mov     edx, r12d
.text:0000000000002CF4                 mov     rdi, rbx
.text:0000000000002CF7                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000002CFD                 xor     edx, 1
.text:0000000000002D00                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000002D05                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000002D0B                 and     dl, [rsp+0E8h+var_DB]
.text:0000000000002D0F                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000002D17                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000002D1C                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000002D21                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000002D26
.text:0000000000002D26 loc_2D26:                               ; CODE XREF: quotearg_buffer_restyled+F80↓j
.text:0000000000002D26                                         ; quotearg_buffer_restyled+FB8↓j
.text:0000000000002D26                 cmp     rdi, 1
.text:0000000000002D2A                 jbe     loc_332B
.text:0000000000002D30
.text:0000000000002D30 loc_2D30:                               ; CODE XREF: quotearg_buffer_restyled+EE9↓j
.text:0000000000002D30                 mov     rcx, rdi
.text:0000000000002D33                 xor     esi, esi
.text:0000000000002D35                 movzx   r9d, [rsp+0E8h+var_D9]
.text:0000000000002D3B                 add     rcx, rbp
.text:0000000000002D3E                 mov     rdi, [rsp+0E8h+s]
.text:0000000000002D43                 jmp     loc_2DFE
.text:0000000000002D43 ; ---------------------------------------------------------------------------
.text:0000000000002D48                 align 10h
.text:0000000000002D50
.text:0000000000002D50 loc_2D50:                               ; CODE XREF: quotearg_buffer_restyled+AC0↓j
.text:0000000000002D50                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002D55                 setz    al
.text:0000000000002D58                 test    r9b, r9b
.text:0000000000002D5B                 jnz     loc_3210
.text:0000000000002D61                 mov     esi, r8d
.text:0000000000002D64                 xor     esi, 1
.text:0000000000002D67                 and     al, sil
.text:0000000000002D6A                 jz      short loc_2D9B
.text:0000000000002D6C                 cmp     r13, r15
.text:0000000000002D6F                 jbe     short loc_2D76
.text:0000000000002D71                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000002D76
.text:0000000000002D76 loc_2D76:                               ; CODE XREF: quotearg_buffer_restyled+A2F↑j
.text:0000000000002D76                 lea     rsi, [r15+1]
.text:0000000000002D7A                 cmp     r13, rsi
.text:0000000000002D7D                 jbe     short loc_2D85
.text:0000000000002D7F                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000002D85
.text:0000000000002D85 loc_2D85:                               ; CODE XREF: quotearg_buffer_restyled+A3D↑j
.text:0000000000002D85                 lea     rsi, [r15+2]
.text:0000000000002D89                 cmp     r13, rsi
.text:0000000000002D8C                 jbe     short loc_2D94
.text:0000000000002D8E                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000002D94
.text:0000000000002D94 loc_2D94:                               ; CODE XREF: quotearg_buffer_restyled+A4C↑j
.text:0000000000002D94                 add     r15, 3
.text:0000000000002D98                 mov     r8d, eax
.text:0000000000002D9B
.text:0000000000002D9B loc_2D9B:                               ; CODE XREF: quotearg_buffer_restyled+A2A↑j
.text:0000000000002D9B                 cmp     r13, r15
.text:0000000000002D9E                 jbe     short loc_2DA5
.text:0000000000002DA0                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000002DA5
.text:0000000000002DA5 loc_2DA5:                               ; CODE XREF: quotearg_buffer_restyled+A5E↑j
.text:0000000000002DA5                 lea     rax, [r15+1]
.text:0000000000002DA9                 cmp     r13, rax
.text:0000000000002DAC                 jbe     short loc_2DBB
.text:0000000000002DAE                 mov     eax, ebx
.text:0000000000002DB0                 shr     al, 6
.text:0000000000002DB3                 add     eax, 30h ; '0'
.text:0000000000002DB6                 mov     [r14+r15+1], al
.text:0000000000002DBB
.text:0000000000002DBB loc_2DBB:                               ; CODE XREF: quotearg_buffer_restyled+A6C↑j
.text:0000000000002DBB                 lea     rax, [r15+2]
.text:0000000000002DBF                 cmp     r13, rax
.text:0000000000002DC2                 jbe     short loc_2DD4
.text:0000000000002DC4                 mov     eax, ebx
.text:0000000000002DC6                 shr     al, 3
.text:0000000000002DC9                 and     eax, 7
.text:0000000000002DCC                 add     eax, 30h ; '0'
.text:0000000000002DCF                 mov     [r14+r15+2], al
.text:0000000000002DD4
.text:0000000000002DD4 loc_2DD4:                               ; CODE XREF: quotearg_buffer_restyled+A82↑j
.text:0000000000002DD4                 and     ebx, 7
.text:0000000000002DD7                 add     rbp, 1
.text:0000000000002DDB                 add     r15, 3
.text:0000000000002DDF                 add     ebx, 30h ; '0'
.text:0000000000002DE2                 cmp     rbp, rcx
.text:0000000000002DE5                 jnb     loc_25D0
.text:0000000000002DEB                 mov     esi, edx
.text:0000000000002DED
.text:0000000000002DED loc_2DED:                               ; CODE XREF: quotearg_buffer_restyled+B19↓j
.text:0000000000002DED                                         ; quotearg_buffer_restyled+EF1↓j
.text:0000000000002DED                 cmp     r13, r15
.text:0000000000002DF0                 jbe     short loc_2DF6
.text:0000000000002DF2                 mov     [r14+r15], bl
.text:0000000000002DF6
.text:0000000000002DF6 loc_2DF6:                               ; CODE XREF: quotearg_buffer_restyled+AB0↑j
.text:0000000000002DF6                 movzx   ebx, byte ptr [rdi+rbp]
.text:0000000000002DFA                 add     r15, 1
.text:0000000000002DFE
.text:0000000000002DFE loc_2DFE:                               ; CODE XREF: quotearg_buffer_restyled+A03↑j
.text:0000000000002DFE                 test    dl, dl
.text:0000000000002E00                 jnz     loc_2D50
.text:0000000000002E06                 mov     eax, esi
.text:0000000000002E08                 xor     eax, 1
.text:0000000000002E0B                 and     eax, r8d
.text:0000000000002E0E                 test    r10b, r10b
.text:0000000000002E11                 jz      short loc_2E21
.text:0000000000002E13                 cmp     r13, r15
.text:0000000000002E16                 jbe     short loc_2E1D
.text:0000000000002E18                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000002E1D
.text:0000000000002E1D loc_2E1D:                               ; CODE XREF: quotearg_buffer_restyled+AD6↑j
.text:0000000000002E1D                 add     r15, 1
.text:0000000000002E21
.text:0000000000002E21 loc_2E21:                               ; CODE XREF: quotearg_buffer_restyled+AD1↑j
.text:0000000000002E21                 add     rbp, 1
.text:0000000000002E25                 cmp     rbp, rcx
.text:0000000000002E28                 jnb     loc_25AC
.text:0000000000002E2E                 test    al, al
.text:0000000000002E30                 jz      loc_322E
.text:0000000000002E36                 cmp     r13, r15
.text:0000000000002E39                 jbe     short loc_2E40
.text:0000000000002E3B                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000002E40
.text:0000000000002E40 loc_2E40:                               ; CODE XREF: quotearg_buffer_restyled+AF9↑j
.text:0000000000002E40                 lea     rax, [r15+1]
.text:0000000000002E44                 cmp     r13, rax
.text:0000000000002E47                 jbe     short loc_2E4F
.text:0000000000002E49                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000002E4F
.text:0000000000002E4F loc_2E4F:                               ; CODE XREF: quotearg_buffer_restyled+B07↑j
.text:0000000000002E4F                 add     r15, 2
.text:0000000000002E53                 xor     r10d, r10d
.text:0000000000002E56                 xor     r8d, r8d
.text:0000000000002E59                 jmp     short loc_2DED
.text:0000000000002E59 ; ---------------------------------------------------------------------------
.text:0000000000002E5B                 align 20h
.text:0000000000002E60
.text:0000000000002E60 loc_2E60:                               ; CODE XREF: quotearg_buffer_restyled+983↑j
.text:0000000000002E60                 cmp     r15, 1
.text:0000000000002E64                 jz      loc_2CC9
.text:0000000000002E6A                 mov     rdi, [rsp+0E8h+s]
.text:0000000000002E6F                 lea     rcx, [rdi+r15]
.text:0000000000002E73                 lea     rdx, [rdi+r14+1]
.text:0000000000002E78                 lea     r8, [rcx+r14]
.text:0000000000002E7C                 jmp     short loc_2E8D
.text:0000000000002E7C ; ---------------------------------------------------------------------------
.text:0000000000002E7E                 align 20h
.text:0000000000002E80
.text:0000000000002E80 loc_2E80:                               ; CODE XREF: quotearg_buffer_restyled+B56↓j
.text:0000000000002E80                                         ; quotearg_buffer_restyled+B70↓j
.text:0000000000002E80                 add     rdx, 1
.text:0000000000002E84                 cmp     r8, rdx
.text:0000000000002E87                 jz      loc_2CC9
.text:0000000000002E8D
.text:0000000000002E8D loc_2E8D:                               ; CODE XREF: quotearg_buffer_restyled+B3C↑j
.text:0000000000002E8D                 movzx   ecx, byte ptr [rdx]
.text:0000000000002E90                 sub     ecx, 5Bh ; '['
.text:0000000000002E93                 cmp     cl, 21h ; '!'
.text:0000000000002E96                 ja      short loc_2E80
.text:0000000000002E98                 mov     esi, 1
.text:0000000000002E9D                 shl     rsi, cl
.text:0000000000002EA0                 mov     rcx, rsi
.text:0000000000002EA3                 mov     rsi, 20000002Bh
.text:0000000000002EAD                 test    rcx, rsi
.text:0000000000002EB0                 jz      short loc_2E80
.text:0000000000002EB2                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000002EB7                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000002EBC                 mov     rbp, [rsp+0E8h+var_B8]
.text:0000000000002EC1                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000002EC9
.text:0000000000002EC9 loc_2EC9:                               ; CODE XREF: quotearg_buffer_restyled+489↑j
.text:0000000000002EC9                                         ; quotearg_buffer_restyled+C0B↓j ...
.text:0000000000002EC9                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000002ECE                 jz      short loc_2EE0
.text:0000000000002ED0                 test    al, al
.text:0000000000002ED2                 mov     eax, 4
.text:0000000000002ED7                 cmovz   eax, [rsp+0E8h+var_E0]
.text:0000000000002EDC                 mov     [rsp+0E8h+var_E0], eax
.text:0000000000002EE0
.text:0000000000002EE0 loc_2EE0:                               ; CODE XREF: quotearg_buffer_restyled+B8E↑j
.text:0000000000002EE0                                         ; quotearg_buffer_restyled+1205↓j
.text:0000000000002EE0                 sub     rsp, 8
.text:0000000000002EE4                 mov     rcx, rbp
.text:0000000000002EE7                 mov     rsi, r13
.text:0000000000002EEA                 push    [rsp+0F0h+var_88]
.text:0000000000002EEE                 push    [rsp+0F8h+var_80]
.text:0000000000002EF2                 mov     rdi, r14
.text:0000000000002EF5                 push    0
.text:0000000000002EF7                 mov     r9d, [rsp+108h+var_70]
.text:0000000000002EFF                 mov     r8d, [rsp+108h+var_E0]
.text:0000000000002F04                 mov     rdx, [rsp+108h+s]
.text:0000000000002F09                 and     r9d, 0FFFFFFFDh
.text:0000000000002F0D                 call    quotearg_buffer_restyled
.text:0000000000002F12                 add     rsp, 20h
.text:0000000000002F16                 mov     r15, rax
.text:0000000000002F19
.text:0000000000002F19 loc_2F19:                               ; CODE XREF: quotearg_buffer_restyled+1135↓j
.text:0000000000002F19                                         ; quotearg_buffer_restyled+1140↓j ...
.text:0000000000002F19                 mov     rbx, [rsp+0E8h+var_40]
.text:0000000000002F21                 xor     rbx, fs:28h
.text:0000000000002F2A                 mov     rax, r15
.text:0000000000002F2D                 jnz     loc_3533
.text:0000000000002F33                 add     rsp, 0B8h
.text:0000000000002F3A                 pop     rbx
.text:0000000000002F3B                 pop     rbp
.text:0000000000002F3C                 pop     r12
.text:0000000000002F3E                 pop     r13
.text:0000000000002F40                 pop     r14
.text:0000000000002F42                 pop     r15
.text:0000000000002F44                 retn
.text:0000000000002F44 ; ---------------------------------------------------------------------------
.text:0000000000002F45                 align 8
.text:0000000000002F48
.text:0000000000002F48 loc_2F48:                               ; CODE XREF: quotearg_buffer_restyled+3B2↑j
.text:0000000000002F48                 mov     rbp, r11
.text:0000000000002F4B                 jmp     loc_2EC9
.text:0000000000002F50 ; ---------------------------------------------------------------------------
.text:0000000000002F50
.text:0000000000002F50 loc_2F50:                               ; CODE XREF: quotearg_buffer_restyled+80E↑j
.text:0000000000002F50                                         ; quotearg_buffer_restyled+81C↑j
.text:0000000000002F50                 cmp     r13, r15
.text:0000000000002F53                 jbe     short loc_2F5A
.text:0000000000002F55                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000002F5A
.text:0000000000002F5A loc_2F5A:                               ; CODE XREF: quotearg_buffer_restyled+C13↑j
.text:0000000000002F5A                 lea     rax, [r15+1]
.text:0000000000002F5E                 cmp     r13, rax
.text:0000000000002F61                 jbe     short loc_2F69
.text:0000000000002F63                 mov     byte ptr [r14+r15+1], 5Ch ; '\'
.text:0000000000002F69
.text:0000000000002F69 loc_2F69:                               ; CODE XREF: quotearg_buffer_restyled+C21↑j
.text:0000000000002F69                 lea     rax, [r15+2]
.text:0000000000002F6D                 cmp     r13, rax
.text:0000000000002F70                 jbe     loc_3562
.text:0000000000002F76                 mov     rdx, r13
.text:0000000000002F79                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000002F7F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000002F84                 jmp     loc_2B62
.text:0000000000002F89 ; ---------------------------------------------------------------------------
.text:0000000000002F89
.text:0000000000002F89 loc_2F89:                               ; CODE XREF: quotearg_buffer_restyled+643↑j
.text:0000000000002F89                 mov     eax, r12d
.text:0000000000002F8C                 mov     ebx, 30h ; '0'
.text:0000000000002F91                 xor     r12d, r12d
.text:0000000000002F94                 jmp     loc_2599
.text:0000000000002F99 ; ---------------------------------------------------------------------------
.text:0000000000002F99
.text:0000000000002F99 loc_2F99:                               ; CODE XREF: quotearg_buffer_restyled+623↑j
.text:0000000000002F99                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000002F9F                 jmp     loc_2969
.text:0000000000002FA4 ; ---------------------------------------------------------------------------
.text:0000000000002FA4
.text:0000000000002FA4 loc_2FA4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002FA4                                         ; DATA XREF: .rodata:jpt_23D1↓o
.text:0000000000002FA4                 test    ebx, ebx        ; jumptable 00000000000121F1 case 4
.text:0000000000002FA6                 jnz     loc_23D3        ; jumptable 00000000000121F1 case 1
.text:0000000000002FAC                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002FB1
.text:0000000000002FB1 loc_2FB1:                               ; CODE XREF: quotearg_buffer_restyled+11FD↓j
.text:0000000000002FB1                 test    r13, r13
.text:0000000000002FB4                 jnz     loc_354A
.text:0000000000002FBA                 lea     rax, asc_71A5   ; "'"
.text:0000000000002FC1                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002FCA                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002FCF                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002FD4                 xor     r12d, r12d
.text:0000000000002FD7                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000002FDC                 mov     [rsp+0E8h+n], 1
.text:0000000000002FE5                 mov     [rsp+0E8h+s2], rax
.text:0000000000002FEA                 mov     r15d, 1
.text:0000000000002FF0                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000002FF8                 jmp     loc_2413
.text:0000000000002FF8 ; ---------------------------------------------------------------------------
.text:0000000000002FFD                 align 20h
.text:0000000000003000
.text:0000000000003000 loc_3000:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003000                                         ; DATA XREF: .rodata:jpt_23D1↓o
.text:0000000000003000                 test    ebx, ebx        ; jumptable 00000000000121F1 case 5
.text:0000000000003002                 jnz     loc_33FD
.text:0000000000003008                 test    r13, r13
.text:000000000000300B                 jz      loc_3236
.text:0000000000003011                 mov     byte ptr [r14], 22h ; '"'
.text:0000000000003015                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000301A                 xor     r12d, r12d
.text:000000000000301D                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003022                 mov     [rsp+0E8h+var_98], 0
.text:000000000000302B
.text:000000000000302B loc_302B:                               ; CODE XREF: quotearg_buffer_restyled+F0C↓j
.text:000000000000302B                 lea     rax, unk_71A3
.text:0000000000003032                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000003037                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000303C                 mov     [rsp+0E8h+n], 1
.text:0000000000003045                 mov     r15d, 1
.text:000000000000304B                 mov     [rsp+0E8h+s2], rax
.text:0000000000003050                 jmp     loc_2413
.text:0000000000003055 ; ---------------------------------------------------------------------------
.text:0000000000003055
.text:0000000000003055 loc_3055:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003055                                         ; DATA XREF: .rodata:jpt_23D1↓o
.text:0000000000003055                 lea     rax, unk_71A3   ; jumptable 00000000000121F1 case 6
.text:000000000000305C                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003061                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003066                 xor     r12d, r12d
.text:0000000000003069                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003072                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000003077                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000307C                 mov     [rsp+0E8h+n], 1
.text:0000000000003085                 xor     r15d, r15d
.text:0000000000003088                 mov     [rsp+0E8h+s2], rax
.text:000000000000308D                 mov     [rsp+0E8h+var_E0], 5
.text:0000000000003095                 jmp     loc_2413
.text:000000000000309A ; ---------------------------------------------------------------------------
.text:000000000000309A
.text:000000000000309A loc_309A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000309A                                         ; DATA XREF: .rodata:jpt_23D1↓o
.text:000000000000309A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 7
.text:000000000000309F                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000030A4                 xor     r12d, r12d
.text:00000000000030A7                 mov     [rsp+0E8h+var_98], 0
.text:00000000000030B0                 mov     [rsp+0E8h+var_D9], 0
.text:00000000000030B5                 xor     r15d, r15d
.text:00000000000030B8                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000030BD                 mov     [rsp+0E8h+n], 0
.text:00000000000030C6                 mov     [rsp+0E8h+s2], 0
.text:00000000000030CF                 jmp     loc_2413
.text:00000000000030D4 ; ---------------------------------------------------------------------------
.text:00000000000030D4
.text:00000000000030D4 loc_30D4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000030D4                                         ; DATA XREF: .rodata:jpt_23D1↓o
.text:00000000000030D4                 cmp     [rsp+0E8h+var_E0], 0Ah ; jumptable 00000000000121F1 cases 8-10
.text:00000000000030D9                 jz      short loc_3131
.text:00000000000030DB                 lea     rsi, asc_71A7   ; "`"
.text:00000000000030E2                 xor     edi, edi        ; domainname
.text:00000000000030E4                 mov     edx, 5          ; category
.text:00000000000030E9                 call    _dcgettext
.text:00000000000030EE                 mov     rcx, rax
.text:00000000000030F1                 mov     [rsp+0E8h+var_80], rax
.text:00000000000030F6                 lea     rax, asc_71A7   ; "`"
.text:00000000000030FD                 cmp     rcx, rax
.text:0000000000003100                 jz      loc_349E
.text:0000000000003106
.text:0000000000003106 loc_3106:                               ; CODE XREF: quotearg_buffer_restyled+116F↓j
.text:0000000000003106                 lea     rsi, asc_71A5   ; "'"
.text:000000000000310D                 xor     edi, edi        ; domainname
.text:000000000000310F                 mov     edx, 5          ; category
.text:0000000000003114                 call    _dcgettext
.text:0000000000003119                 mov     rcx, rax
.text:000000000000311C                 mov     [rsp+0E8h+var_88], rax
.text:0000000000003121                 lea     rax, asc_71A5   ; "'"
.text:0000000000003128                 cmp     rcx, rax
.text:000000000000312B                 jz      loc_34B4
.text:0000000000003131
.text:0000000000003131 loc_3131:                               ; CODE XREF: quotearg_buffer_restyled+D99↑j
.text:0000000000003131                                         ; quotearg_buffer_restyled+1185↓j
.text:0000000000003131                 xor     r15d, r15d
.text:0000000000003134                 test    ebx, ebx
.text:0000000000003136                 jz      loc_32FD
.text:000000000000313C
.text:000000000000313C loc_313C:                               ; CODE XREF: quotearg_buffer_restyled+FC7↓j
.text:000000000000313C                                         ; quotearg_buffer_restyled+FE6↓j
.text:000000000000313C                 test    ebx, ebx
.text:000000000000313E                 mov     rbx, [rsp+0E8h+var_88]
.text:0000000000003143                 setnz   [rsp+0E8h+var_D9]
.text:0000000000003148                 xor     r12d, r12d
.text:000000000000314B                 mov     rdi, rbx        ; s
.text:000000000000314E                 call    _strlen
.text:0000000000003153                 mov     [rsp+0E8h+s2], rbx
.text:0000000000003158                 mov     [rsp+0E8h+n], rax
.text:000000000000315D                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003162                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003167                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003170                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003175                 jmp     loc_2413
.text:000000000000317A ; ---------------------------------------------------------------------------
.text:000000000000317A
.text:000000000000317A loc_317A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000317A                                         ; DATA XREF: .rodata:jpt_23D1↓o
.text:000000000000317A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 0
.text:000000000000317F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003184                 xor     r12d, r12d
.text:0000000000003187                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003190                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000003195                 xor     r15d, r15d
.text:0000000000003198                 mov     [rsp+0E8h+var_DB], 0
.text:000000000000319D                 mov     [rsp+0E8h+n], 0
.text:00000000000031A6                 mov     [rsp+0E8h+s2], 0
.text:00000000000031AF                 jmp     loc_2413
.text:00000000000031B4 ; ---------------------------------------------------------------------------
.text:00000000000031B4
.text:00000000000031B4 loc_31B4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000031B4                                         ; DATA XREF: .rodata:jpt_23D1↓o
.text:00000000000031B4                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 3
.text:00000000000031B9                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000031BE                 xor     r12d, r12d
.text:00000000000031C1                 mov     [rsp+0E8h+var_98], 0
.text:00000000000031CA                 mov     [rsp+0E8h+var_D9], 1
.text:00000000000031CF                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000031D4                 jmp     loc_23F3
.text:00000000000031D9 ; ---------------------------------------------------------------------------
.text:00000000000031D9
.text:00000000000031D9 loc_31D9:                               ; CODE XREF: quotearg_buffer_restyled+665↑j
.text:00000000000031D9                 cmp     r13, r15
.text:00000000000031DC                 jbe     short loc_31E3
.text:00000000000031DE                 mov     byte ptr [r14+r15], 30h ; '0'
.text:00000000000031E3
.text:00000000000031E3 loc_31E3:                               ; CODE XREF: quotearg_buffer_restyled+E9C↑j
.text:00000000000031E3                 lea     rax, [rcx+2]
.text:00000000000031E7                 cmp     r13, rax
.text:00000000000031EA                 jbe     short loc_31F2
.text:00000000000031EC                 mov     byte ptr [r14+rcx+2], 30h ; '0'
.text:00000000000031F2
.text:00000000000031F2 loc_31F2:                               ; CODE XREF: quotearg_buffer_restyled+EAA↑j
.text:00000000000031F2                 mov     eax, r12d
.text:00000000000031F5                 lea     r15, [rcx+3]
.text:00000000000031F9                 xor     r12d, r12d
.text:00000000000031FC                 mov     ebx, 30h ; '0'
.text:0000000000003201                 jmp     loc_2568
.text:0000000000003201 ; ---------------------------------------------------------------------------
.text:0000000000003206                 align 10h
.text:0000000000003210
.text:0000000000003210 loc_3210:                               ; CODE XREF: quotearg_buffer_restyled+A1B↑j
.text:0000000000003210                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000003215                 mov     rbp, r11
.text:0000000000003218                 mov     [rsp+0E8h+var_DB], bl
.text:000000000000321C                 jmp     loc_2EC9
.text:0000000000003221 ; ---------------------------------------------------------------------------
.text:0000000000003221
.text:0000000000003221 loc_3221:                               ; CODE XREF: quotearg_buffer_restyled+549↑j
.text:0000000000003221                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000003226                 xor     r12d, r12d
.text:0000000000003229                 jmp     loc_2D30
.text:000000000000322E ; ---------------------------------------------------------------------------
.text:000000000000322E
.text:000000000000322E loc_322E:                               ; CODE XREF: quotearg_buffer_restyled+AF0↑j
.text:000000000000322E                 xor     r10d, r10d
.text:0000000000003231                 jmp     loc_2DED
.text:0000000000003236 ; ---------------------------------------------------------------------------
.text:0000000000003236
.text:0000000000003236 loc_3236:                               ; CODE XREF: quotearg_buffer_restyled+CCB↑j
.text:0000000000003236                 mov     [rsp+0E8h+var_98], 0
.text:000000000000323F                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003244                 xor     r12d, r12d
.text:0000000000003247                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000324C                 jmp     loc_302B
.text:0000000000003251 ; ---------------------------------------------------------------------------
.text:0000000000003251
.text:0000000000003251 loc_3251:                               ; CODE XREF: quotearg_buffer_restyled+971↑j
.text:0000000000003251                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000003256                 mov     rsi, r14
.text:0000000000003259                 mov     rcx, r13
.text:000000000000325C                 mov     rax, rbx
.text:000000000000325F                 mov     rdi, rbx
.text:0000000000003262                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000003268                 movzx   ebx, [rsp+0E8h+var_6A]
.text:000000000000326D                 mov     r9, [rsp+0E8h+var_60]
.text:0000000000003275                 cmp     rsi, r11
.text:0000000000003278                 movzx   r10d, [rsp+0E8h+var_69]
.text:000000000000327E                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000003286                 mov     r14, [rsp+0E8h+var_A8]
.text:000000000000328B                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000003290                 jnb     short loc_32B8
.text:0000000000003292                 cmp     byte ptr [rcx], 0
.text:0000000000003295                 jnz     short loc_32A7
.text:0000000000003297                 jmp     short loc_32B8
.text:0000000000003297 ; ---------------------------------------------------------------------------
.text:0000000000003299                 align 20h
.text:00000000000032A0
.text:00000000000032A0 loc_32A0:                               ; CODE XREF: quotearg_buffer_restyled+F73↓j
.text:00000000000032A0                 cmp     byte ptr [r9+rax], 0
.text:00000000000032A5                 jz      short loc_32B5
.text:00000000000032A7
.text:00000000000032A7 loc_32A7:                               ; CODE XREF: quotearg_buffer_restyled+F55↑j
.text:00000000000032A7                 add     rax, 1
.text:00000000000032AB                 lea     rdx, [rbp+rax+0]
.text:00000000000032B0                 cmp     r11, rdx
.text:00000000000032B3                 ja      short loc_32A0
.text:00000000000032B5
.text:00000000000032B5 loc_32B5:                               ; CODE XREF: quotearg_buffer_restyled+F65↑j
.text:00000000000032B5                 mov     rdi, rax
.text:00000000000032B8
.text:00000000000032B8 loc_32B8:                               ; CODE XREF: quotearg_buffer_restyled+F50↑j
.text:00000000000032B8                                         ; quotearg_buffer_restyled+F57↑j
.text:00000000000032B8                 movzx   edx, [rsp+0E8h+var_DB]
.text:00000000000032BD                 xor     r12d, r12d
.text:00000000000032C0                 jmp     loc_2D26
.text:00000000000032C5 ; ---------------------------------------------------------------------------
.text:00000000000032C5
.text:00000000000032C5 loc_32C5:                               ; CODE XREF: quotearg_buffer_restyled+967↑j
.text:00000000000032C5                 mov     rdi, rbx
.text:00000000000032C8                 movzx   r8d, [rsp+0E8h+var_6B]
.text:00000000000032CE                 movzx   ebx, [rsp+0E8h+var_6A]
.text:00000000000032D3                 movzx   r10d, [rsp+0E8h+var_69]
.text:00000000000032D9                 mov     r15, [rsp+0E8h+var_68]
.text:00000000000032E1                 xor     r12d, r12d
.text:00000000000032E4                 mov     r14, [rsp+0E8h+var_A8]
.text:00000000000032E9                 mov     r13, [rsp+0E8h+var_78]
.text:00000000000032EE                 mov     r11, [rsp+0E8h+var_B8]
.text:00000000000032F3                 movzx   edx, [rsp+0E8h+var_DB]
.text:00000000000032F8                 jmp     loc_2D26
.text:00000000000032FD ; ---------------------------------------------------------------------------
.text:00000000000032FD
.text:00000000000032FD loc_32FD:                               ; CODE XREF: quotearg_buffer_restyled+DF6↑j
.text:00000000000032FD                 mov     rdx, [rsp+0E8h+var_80]
.text:0000000000003302                 movzx   eax, byte ptr [rdx]
.text:0000000000003305                 test    al, al
.text:0000000000003307                 jz      loc_313C
.text:000000000000330D                 nop     dword ptr [rax]
.text:0000000000003310
.text:0000000000003310 loc_3310:                               ; CODE XREF: quotearg_buffer_restyled+FE4↓j
.text:0000000000003310                 cmp     r13, r15
.text:0000000000003313                 jbe     short loc_3319
.text:0000000000003315                 mov     [r14+r15], al
.text:0000000000003319
.text:0000000000003319 loc_3319:                               ; CODE XREF: quotearg_buffer_restyled+FD3↑j
.text:0000000000003319                 add     r15, 1
.text:000000000000331D                 movzx   eax, byte ptr [rdx+r15]
.text:0000000000003322                 test    al, al
.text:0000000000003324                 jnz     short loc_3310
.text:0000000000003326                 jmp     loc_313C
.text:000000000000332B ; ---------------------------------------------------------------------------
.text:000000000000332B
.text:000000000000332B loc_332B:                               ; CODE XREF: quotearg_buffer_restyled+9EA↑j
.text:000000000000332B                 mov     eax, edx
.text:000000000000332D                 jmp     loc_2887
.text:0000000000003332 ; ---------------------------------------------------------------------------
.text:0000000000003332
.text:0000000000003332 loc_3332:                               ; CODE XREF: quotearg_buffer_restyled+862↑j
.text:0000000000003332                 movzx   ebx, byte ptr [rax+rcx]
.text:0000000000003336                 cmp     bl, 3Eh ; '>'
.text:0000000000003339                 ja      loc_2BB0
.text:000000000000333F                 mov     rax, 7000A38200000000h
.text:0000000000003349                 bt      rax, rbx
.text:000000000000334D                 jnb     loc_2BB0
.text:0000000000003353                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003358                 jnz     loc_3542
.text:000000000000335E                 cmp     r13, r15
.text:0000000000003361                 jbe     short loc_3368
.text:0000000000003363                 mov     byte ptr [r14+r15], 3Fh ; '?'
.text:0000000000003368
.text:0000000000003368 loc_3368:                               ; CODE XREF: quotearg_buffer_restyled+1021↑j
.text:0000000000003368                 lea     rax, [r15+1]
.text:000000000000336C                 cmp     r13, rax
.text:000000000000336F                 jbe     short loc_3377
.text:0000000000003371                 mov     byte ptr [r14+r15+1], 22h ; '"'
.text:0000000000003377
.text:0000000000003377 loc_3377:                               ; CODE XREF: quotearg_buffer_restyled+102F↑j
.text:0000000000003377                 lea     rax, [r15+2]
.text:000000000000337B                 cmp     r13, rax
.text:000000000000337E                 jbe     short loc_3386
.text:0000000000003380                 mov     byte ptr [r14+r15+2], 22h ; '"'
.text:0000000000003386
.text:0000000000003386 loc_3386:                               ; CODE XREF: quotearg_buffer_restyled+103E↑j
.text:0000000000003386                 lea     rax, [r15+3]
.text:000000000000338A                 cmp     r13, rax
.text:000000000000338D                 jbe     short loc_3395
.text:000000000000338F                 mov     byte ptr [r14+r15+3], 3Fh ; '?'
.text:0000000000003395
.text:0000000000003395 loc_3395:                               ; CODE XREF: quotearg_buffer_restyled+104D↑j
.text:0000000000003395                 add     r15, 4
.text:0000000000003399                 xor     edx, edx
.text:000000000000339B                 xor     r12d, r12d
.text:000000000000339E                 xor     eax, eax
.text:00000000000033A0                 mov     rbp, rcx
.text:00000000000033A3                 jmp     loc_2568
.text:00000000000033A8 ; ---------------------------------------------------------------------------
.text:00000000000033A8
.text:00000000000033A8 loc_33A8:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000033A8                                         ; DATA XREF: .rodata:jpt_23D1↓o
.text:00000000000033A8                 test    ebx, ebx        ; jumptable 00000000000121F1 case 2
.text:00000000000033AA                 jz      loc_3538
.text:00000000000033B0                 lea     rax, asc_71A5   ; "'"
.text:00000000000033B7                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000033BC                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000033C1                 xor     r12d, r12d
.text:00000000000033C4                 mov     [rsp+0E8h+var_98], 0
.text:00000000000033CD                 mov     [rsp+0E8h+var_D9], 1
.text:00000000000033D2                 mov     [rsp+0E8h+var_DB], 0
.text:00000000000033D7                 mov     [rsp+0E8h+n], 1
.text:00000000000033E0                 xor     r15d, r15d
.text:00000000000033E3                 mov     [rsp+0E8h+s2], rax
.text:00000000000033E8                 jmp     loc_2413
.text:00000000000033E8 ; ---------------------------------------------------------------------------
.text:00000000000033ED                 align 10h
.text:00000000000033F0
.text:00000000000033F0 loc_33F0:                               ; CODE XREF: quotearg_buffer_restyled+745↑j
.text:00000000000033F0                                         ; quotearg_buffer_restyled+805↑j ...
.text:00000000000033F0                 mov     rbp, r11
.text:00000000000033F3                 movzx   eax, [rsp+0E8h+var_D9]
.text:00000000000033F8                 jmp     loc_2EC9
.text:00000000000033FD ; ---------------------------------------------------------------------------
.text:00000000000033FD
.text:00000000000033FD loc_33FD:                               ; CODE XREF: quotearg_buffer_restyled+CC2↑j
.text:00000000000033FD                 lea     rax, unk_71A3
.text:0000000000003404                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003409                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000340E                 xor     r12d, r12d
.text:0000000000003411                 mov     [rsp+0E8h+var_98], 0
.text:000000000000341A                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000341F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003424                 mov     [rsp+0E8h+n], 1
.text:000000000000342D                 xor     r15d, r15d
.text:0000000000003430                 mov     [rsp+0E8h+s2], rax
.text:0000000000003435                 jmp     loc_2413
.text:000000000000343A ; ---------------------------------------------------------------------------
.text:000000000000343A
.text:000000000000343A loc_343A:                               ; CODE XREF: quotearg_buffer_restyled+797↑j
.text:000000000000343A                 mov     eax, edx
.text:000000000000343C
.text:000000000000343C loc_343C:                               ; CODE XREF: quotearg_buffer_restyled+78C↑j
.text:000000000000343C                                         ; quotearg_buffer_restyled+11E1↓j
.text:000000000000343C                 mov     rbx, [rsp+0E8h+s2]
.text:0000000000003441                 test    rbx, rbx
.text:0000000000003444                 jz      short loc_3472
.text:0000000000003446                 test    al, al
.text:0000000000003448                 jz      short loc_3472
.text:000000000000344A                 movzx   ecx, byte ptr [rbx]
.text:000000000000344D                 mov     rax, rbx
.text:0000000000003450                 test    cl, cl
.text:0000000000003452                 jz      short loc_3472
.text:0000000000003454                 mov     rdx, r15
.text:0000000000003457                 sub     rax, r15
.text:000000000000345A
.text:000000000000345A loc_345A:                               ; CODE XREF: quotearg_buffer_restyled+112D↓j
.text:000000000000345A                 cmp     r13, rdx
.text:000000000000345D                 jbe     short loc_3463
.text:000000000000345F                 mov     [r14+rdx], cl
.text:0000000000003463
.text:0000000000003463 loc_3463:                               ; CODE XREF: quotearg_buffer_restyled+111D↑j
.text:0000000000003463                 add     rdx, 1
.text:0000000000003467                 movzx   ecx, byte ptr [rax+rdx]
.text:000000000000346B                 test    cl, cl
.text:000000000000346D                 jnz     short loc_345A
.text:000000000000346F                 mov     r15, rdx
.text:0000000000003472
.text:0000000000003472 loc_3472:                               ; CODE XREF: quotearg_buffer_restyled+1104↑j
.text:0000000000003472                                         ; quotearg_buffer_restyled+1108↑j ...
.text:0000000000003472                 cmp     r13, r15
.text:0000000000003475                 jbe     loc_2F19
.text:000000000000347B                 mov     byte ptr [r14+r15], 0
.text:0000000000003480                 jmp     loc_2F19
.text:0000000000003485 ; ---------------------------------------------------------------------------
.text:0000000000003485
.text:0000000000003485 loc_3485:                               ; CODE XREF: quotearg_buffer_restyled+1C2↑j
.text:0000000000003485                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000348A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000348F                 mov     rbp, r11
.text:0000000000003492                 setz    al
.text:0000000000003495                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000003499                 jmp     loc_2EC9
.text:000000000000349E ; ---------------------------------------------------------------------------
.text:000000000000349E
.text:000000000000349E loc_349E:                               ; CODE XREF: quotearg_buffer_restyled+DC0↑j
.text:000000000000349E                 mov     esi, [rsp+0E8h+var_E0]
.text:00000000000034A2                 mov     rdi, rcx
.text:00000000000034A5                 call    gettext_quote
.text:00000000000034AA                 mov     [rsp+0E8h+var_80], rax
.text:00000000000034AF                 jmp     loc_3106
.text:00000000000034B4 ; ---------------------------------------------------------------------------
.text:00000000000034B4
.text:00000000000034B4 loc_34B4:                               ; CODE XREF: quotearg_buffer_restyled+DEB↑j
.text:00000000000034B4                 mov     esi, [rsp+0E8h+var_E0]
.text:00000000000034B8                 mov     rdi, rcx
.text:00000000000034BB                 call    gettext_quote
.text:00000000000034C0                 mov     [rsp+0E8h+var_88], rax
.text:00000000000034C5                 jmp     loc_3131
.text:00000000000034CA ; ---------------------------------------------------------------------------
.text:00000000000034CA
.text:00000000000034CA loc_34CA:                               ; CODE XREF: quotearg_buffer_restyled+5F0↑j
.text:00000000000034CA                 movzx   ebx, [rsp+0E8h+var_D9]
.text:00000000000034CF                 mov     rbp, r11
.text:00000000000034D2                 mov     eax, edx
.text:00000000000034D4                 mov     [rsp+0E8h+var_DB], bl
.text:00000000000034D8                 jmp     loc_2EC9
.text:00000000000034DD ; ---------------------------------------------------------------------------
.text:00000000000034DD
.text:00000000000034DD loc_34DD:                               ; CODE XREF: quotearg_buffer_restyled+7A2↑j
.text:00000000000034DD                 sub     rsp, 8
.text:00000000000034E1                 mov     r8d, 5
.text:00000000000034E7                 mov     rcx, r11
.text:00000000000034EA                 push    [rsp+0F0h+var_88]
.text:00000000000034EE                 push    [rsp+0F8h+var_80]
.text:00000000000034F2                 mov     rdi, r14
.text:00000000000034F5                 push    [rsp+100h+var_C8]
.text:00000000000034F9                 mov     r9d, [rsp+108h+var_70]
.text:0000000000003501                 mov     rdx, [rsp+108h+s]
.text:0000000000003506                 mov     rsi, [rsp+108h+var_98]
.text:000000000000350B                 call    quotearg_buffer_restyled
.text:0000000000003510                 add     rsp, 20h
.text:0000000000003514                 mov     r15, rax
.text:0000000000003517                 jmp     loc_2F19
.text:000000000000351C ; ---------------------------------------------------------------------------
.text:000000000000351C
.text:000000000000351C loc_351C:                               ; CODE XREF: quotearg_buffer_restyled+7B9↑j
.text:000000000000351C                 movzx   eax, [rsp+0E8h+var_6C]
.text:0000000000003521                 jmp     loc_343C
.text:0000000000003526 ; ---------------------------------------------------------------------------
.text:0000000000003526
.text:0000000000003526 loc_3526:                               ; CODE XREF: quotearg_buffer_restyled+77F↑j
.text:0000000000003526                 mov     [rsp+0E8h+var_E0], 2
.text:000000000000352E                 jmp     loc_2EC9
.text:0000000000003533 ; ---------------------------------------------------------------------------
.text:0000000000003533
.text:0000000000003533 loc_3533:                               ; CODE XREF: quotearg_buffer_restyled+BED↑j
.text:0000000000003533                 call    ___stack_chk_fail
.text:0000000000003538 ; ---------------------------------------------------------------------------
.text:0000000000003538
.text:0000000000003538 loc_3538:                               ; CODE XREF: quotearg_buffer_restyled+106A↑j
.text:0000000000003538                 mov     [rsp+0E8h+var_DB], 0
.text:000000000000353D                 jmp     loc_2FB1
.text:0000000000003542 ; ---------------------------------------------------------------------------
.text:0000000000003542
.text:0000000000003542 loc_3542:                               ; CODE XREF: quotearg_buffer_restyled+1018↑j
.text:0000000000003542                 mov     rbp, r11
.text:0000000000003545                 jmp     loc_2EE0
.text:000000000000354A ; ---------------------------------------------------------------------------
.text:000000000000354A
.text:000000000000354A loc_354A:                               ; CODE XREF: quotearg_buffer_restyled+C74↑j
.text:000000000000354A                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000354F                 xor     eax, eax
.text:0000000000003551                 xor     r12d, r12d
.text:0000000000003554                 mov     [rsp+0E8h+var_98], 0
.text:000000000000355D                 jmp     loc_2B04
.text:0000000000003562 ; ---------------------------------------------------------------------------
.text:0000000000003562
.text:0000000000003562 loc_3562:                               ; CODE XREF: quotearg_buffer_restyled+C30↑j
.text:0000000000003562                 mov     rdx, r13
.text:0000000000003565                 mov     r13, [rsp+0E8h+var_98]
.text:000000000000356A                 jmp     loc_2B62
.text:000000000000356F ; ---------------------------------------------------------------------------
.text:000000000000356F
.text:000000000000356F def_23D1:                               ; CODE XREF: quotearg_buffer_restyled+7A↑j
.text:000000000000356F                 call    _abort          ; jumptable 00000000000121F1 default case
.text:000000000000356F ; } // starts at 2340
.text:000000000000356F quotearg_buffer_restyled endp
.text:000000000000356F
.text:000000000000356F ; ---------------------------------------------------------------------------
.text:0000000000003574                 align 20h
.text:0000000000003580
.text:0000000000003580 ; =============== S U B R O U T I N E =======================================
.text:0000000000003580
.text:0000000000003580
.text:0000000000003580 quotearg_n_options proc near            ; CODE XREF: quotearg_n+E↓j
.text:0000000000003580                                         ; quotearg_n_mem+7↓j ...
.text:0000000000003580
.text:0000000000003580 var_50          = qword ptr -50h
.text:0000000000003580 var_48          = qword ptr -48h
.text:0000000000003580 var_40          = dword ptr -40h
.text:0000000000003580 var_3C          = dword ptr -3Ch
.text:0000000000003580
.text:0000000000003580 ; __unwind {
.text:0000000000003580                 push    r15
.text:0000000000003582                 push    r14
.text:0000000000003584                 movsxd  r15, edi
.text:0000000000003587                 push    r13
.text:0000000000003589                 push    r12
.text:000000000000358B                 mov     r14, rdx
.text:000000000000358E                 push    rbp
.text:000000000000358F                 push    rbx
.text:0000000000003590                 mov     rbp, rcx
.text:0000000000003593                 sub     rsp, 28h
.text:0000000000003597                 mov     [rsp+58h+var_50], rsi
.text:000000000000359C                 call    ___errno_location
.text:00000000000035A1                 mov     r13, rax
.text:00000000000035A4                 mov     eax, [rax]
.text:00000000000035A6                 test    r15d, r15d
.text:00000000000035A9                 mov     rbx, cs:slotvec
.text:00000000000035B0                 mov     [rsp+58h+var_40], eax
.text:00000000000035B4                 js      loc_3721
.text:00000000000035BA                 cmp     cs:nslots, r15d
.text:00000000000035C1                 jg      short loc_3625
.text:00000000000035C3                 cmp     r15d, 7FFFFFFFh
.text:00000000000035CA                 jz      loc_3726
.text:00000000000035D0                 lea     r12d, [r15+1]
.text:00000000000035D4                 lea     rax, slotvec0
.text:00000000000035DB                 movsxd  rsi, r12d
.text:00000000000035DE                 shl     rsi, 4
.text:00000000000035E2                 cmp     rbx, rax
.text:00000000000035E5                 jz      loc_3700
.text:00000000000035EB                 mov     rdi, rbx
.text:00000000000035EE                 call    xrealloc
.text:00000000000035F3                 mov     rbx, rax
.text:00000000000035F6                 mov     cs:slotvec, rax
.text:00000000000035FD
.text:00000000000035FD loc_35FD:                               ; CODE XREF: quotearg_n_options+19C↓j
.text:00000000000035FD                 movsxd  rdi, cs:nslots
.text:0000000000003604                 mov     edx, r12d
.text:0000000000003607                 xor     esi, esi        ; c
.text:0000000000003609                 sub     edx, edi
.text:000000000000360B                 shl     rdi, 4
.text:000000000000360F                 movsxd  rdx, edx
.text:0000000000003612                 add     rdi, rbx        ; s
.text:0000000000003615                 shl     rdx, 4          ; n
.text:0000000000003619                 call    _memset
.text:000000000000361E                 mov     cs:nslots, r12d
.text:0000000000003625
.text:0000000000003625 loc_3625:                               ; CODE XREF: quotearg_n_options+41↑j
.text:0000000000003625                 mov     eax, [rbp+4]
.text:0000000000003628                 shl     r15, 4
.text:000000000000362C                 sub     rsp, 8
.text:0000000000003630                 add     rbx, r15
.text:0000000000003633                 lea     r15, [rbp+8]
.text:0000000000003637                 mov     r8d, [rbp+0]
.text:000000000000363B                 mov     r11, [rbx]
.text:000000000000363E                 mov     r12, [rbx+8]
.text:0000000000003642                 mov     rcx, r14
.text:0000000000003645                 or      eax, 1
.text:0000000000003648                 mov     [rsp+60h+var_3C], eax
.text:000000000000364C                 push    qword ptr [rbp+30h]
.text:000000000000364F                 mov     r9d, eax
.text:0000000000003652                 push    qword ptr [rbp+28h]
.text:0000000000003655                 push    r15
.text:0000000000003657                 mov     rsi, r11
.text:000000000000365A                 mov     rdx, [rsp+78h+var_50]
.text:000000000000365F                 mov     rdi, r12
.text:0000000000003662                 mov     [rsp+78h+var_48], r11
.text:0000000000003667                 call    quotearg_buffer_restyled
.text:000000000000366C                 add     rsp, 20h
.text:0000000000003670                 mov     r11, [rsp+58h+var_48]
.text:0000000000003675                 cmp     r11, rax
.text:0000000000003678                 ja      short loc_36E1
.text:000000000000367A                 lea     rsi, [rax+1]
.text:000000000000367E                 lea     rax, slot0
.text:0000000000003685                 cmp     r12, rax
.text:0000000000003688                 mov     [rbx], rsi
.text:000000000000368B                 jz      short loc_369F
.text:000000000000368D                 mov     rdi, r12        ; ptr
.text:0000000000003690                 mov     [rsp+58h+var_48], rsi
.text:0000000000003695                 call    _free
.text:000000000000369A                 mov     rsi, [rsp+58h+var_48]
.text:000000000000369F
.text:000000000000369F loc_369F:                               ; CODE XREF: quotearg_n_options+10B↑j
.text:000000000000369F                 mov     rdi, rsi
.text:00000000000036A2                 mov     [rsp+58h+var_48], rsi
.text:00000000000036A7                 call    xmalloc
.text:00000000000036AC                 sub     rsp, 8
.text:00000000000036B0                 mov     [rbx+8], rax
.text:00000000000036B4                 mov     r8d, [rbp+0]
.text:00000000000036B8                 push    qword ptr [rbp+30h]
.text:00000000000036BB                 push    qword ptr [rbp+28h]
.text:00000000000036BE                 mov     rcx, r14
.text:00000000000036C1                 push    r15
.text:00000000000036C3                 mov     r9d, [rsp+78h+var_3C]
.text:00000000000036C8                 mov     rdi, rax
.text:00000000000036CB                 mov     rdx, [rsp+78h+var_50]
.text:00000000000036D0                 mov     rsi, [rsp+78h+var_48]
.text:00000000000036D5                 mov     r12, rax
.text:00000000000036D8                 call    quotearg_buffer_restyled
.text:00000000000036DD                 add     rsp, 20h
.text:00000000000036E1
.text:00000000000036E1 loc_36E1:                               ; CODE XREF: quotearg_n_options+F8↑j
.text:00000000000036E1                 mov     eax, [rsp+58h+var_40]
.text:00000000000036E5                 mov     [r13+0], eax
.text:00000000000036E9                 add     rsp, 28h
.text:00000000000036ED                 mov     rax, r12
.text:00000000000036F0                 pop     rbx
.text:00000000000036F1                 pop     rbp
.text:00000000000036F2                 pop     r12
.text:00000000000036F4                 pop     r13
.text:00000000000036F6                 pop     r14
.text:00000000000036F8                 pop     r15
.text:00000000000036FA                 retn
.text:00000000000036FA ; ---------------------------------------------------------------------------
.text:00000000000036FB                 align 20h
.text:0000000000003700
.text:0000000000003700 loc_3700:                               ; CODE XREF: quotearg_n_options+65↑j
.text:0000000000003700                 xor     edi, edi
.text:0000000000003702                 call    xrealloc
.text:0000000000003707                 movdqa  xmm0, xmmword ptr cs:slotvec0
.text:000000000000370F                 mov     rbx, rax
.text:0000000000003712                 mov     cs:slotvec, rax
.text:0000000000003719                 movups  xmmword ptr [rax], xmm0
.text:000000000000371C                 jmp     loc_35FD
.text:0000000000003721 ; ---------------------------------------------------------------------------
.text:0000000000003721
.text:0000000000003721 loc_3721:                               ; CODE XREF: quotearg_n_options+34↑j
.text:0000000000003721                 call    _abort
.text:0000000000003726 ; ---------------------------------------------------------------------------
.text:0000000000003726
.text:0000000000003726 loc_3726:                               ; CODE XREF: quotearg_n_options+4A↑j
.text:0000000000003726                 call    xalloc_die
.text:0000000000003726 ; } // starts at 3580
.text:0000000000003726 quotearg_n_options endp
.text:0000000000003726
.text:0000000000003726 ; ---------------------------------------------------------------------------
.text:000000000000372B                 align 10h
.text:0000000000003730
.text:0000000000003730 ; =============== S U B R O U T I N E =======================================
.text:0000000000003730
.text:0000000000003730 ; Attributes: info_from_lumina
.text:0000000000003730
.text:0000000000003730 ; quoting_options *__fastcall clone_quoting_options(quoting_options *o)
.text:0000000000003730                 public clone_quoting_options
.text:0000000000003730 clone_quoting_options proc near
.text:0000000000003730 ; __unwind {
.text:0000000000003730                 push    r12
.text:0000000000003732                 push    rbp
.text:0000000000003733                 push    rbx
.text:0000000000003734                 mov     rbx, rdi
.text:0000000000003737                 call    ___errno_location
.text:000000000000373C                 mov     r12d, [rax]
.text:000000000000373F                 mov     rbp, rax
.text:0000000000003742                 lea     rax, default_quoting_options
.text:0000000000003749                 test    rbx, rbx
.text:000000000000374C                 mov     esi, 38h ; '8'  ; n
.text:0000000000003751                 cmovz   rbx, rax
.text:0000000000003755                 mov     rdi, rbx        ; src
.text:0000000000003758                 call    xmemdup
.text:000000000000375D                 mov     [rbp+0], r12d
.text:0000000000003761                 pop     rbx
.text:0000000000003762                 pop     rbp
.text:0000000000003763                 pop     r12
.text:0000000000003765                 retn
.text:0000000000003765 ; } // starts at 3730
.text:0000000000003765 clone_quoting_options endp
.text:0000000000003765
.text:0000000000003765 ; ---------------------------------------------------------------------------
.text:0000000000003766                 align 10h
.text:0000000000003770
.text:0000000000003770 ; =============== S U B R O U T I N E =======================================
.text:0000000000003770
.text:0000000000003770
.text:0000000000003770                 public get_quoting_style
.text:0000000000003770 get_quoting_style proc near
.text:0000000000003770 ; __unwind {
.text:0000000000003770                 lea     rax, default_quoting_options
.text:0000000000003777                 test    rdi, rdi
.text:000000000000377A                 cmovz   rdi, rax
.text:000000000000377E                 mov     eax, [rdi]
.text:0000000000003780                 retn
.text:0000000000003780 ; } // starts at 3770
.text:0000000000003780 get_quoting_style endp
.text:0000000000003780
.text:0000000000003780 ; ---------------------------------------------------------------------------
.text:0000000000003781                 align 10h
.text:0000000000003790
.text:0000000000003790 ; =============== S U B R O U T I N E =======================================
.text:0000000000003790
.text:0000000000003790
.text:0000000000003790                 public set_quoting_style
.text:0000000000003790 set_quoting_style proc near
.text:0000000000003790 ; __unwind {
.text:0000000000003790                 lea     rax, default_quoting_options
.text:0000000000003797                 test    rdi, rdi
.text:000000000000379A                 cmovz   rdi, rax
.text:000000000000379E                 mov     [rdi], esi
.text:00000000000037A0                 retn
.text:00000000000037A0 ; } // starts at 3790
.text:00000000000037A0 set_quoting_style endp
.text:00000000000037A0
.text:00000000000037A0 ; ---------------------------------------------------------------------------
.text:00000000000037A1                 align 10h
.text:00000000000037B0
.text:00000000000037B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000037B0
.text:00000000000037B0 ; Attributes: info_from_lumina
.text:00000000000037B0
.text:00000000000037B0 ; int __fastcall set_char_quoting(quoting_options *o, char c, int i)
.text:00000000000037B0                 public set_char_quoting
.text:00000000000037B0 set_char_quoting proc near
.text:00000000000037B0 ; __unwind {
.text:00000000000037B0                 lea     rax, default_quoting_options
.text:00000000000037B7                 test    rdi, rdi
.text:00000000000037BA                 mov     ecx, esi
.text:00000000000037BC                 cmovz   rdi, rax
.text:00000000000037C0                 mov     eax, esi
.text:00000000000037C2                 and     ecx, 1Fh
.text:00000000000037C5                 shr     al, 5
.text:00000000000037C8                 movzx   eax, al
.text:00000000000037CB                 lea     rdi, [rdi+rax*4+8]
.text:00000000000037D0                 mov     esi, [rdi]
.text:00000000000037D2                 mov     eax, esi
.text:00000000000037D4                 shr     eax, cl
.text:00000000000037D6                 xor     edx, eax
.text:00000000000037D8                 and     eax, 1
.text:00000000000037DB                 and     edx, 1
.text:00000000000037DE                 shl     edx, cl
.text:00000000000037E0                 xor     edx, esi
.text:00000000000037E2                 mov     [rdi], edx
.text:00000000000037E4                 retn
.text:00000000000037E4 ; } // starts at 37B0
.text:00000000000037E4 set_char_quoting endp
.text:00000000000037E4
.text:00000000000037E4 ; ---------------------------------------------------------------------------
.text:00000000000037E5                 align 10h
.text:00000000000037F0
.text:00000000000037F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000037F0
.text:00000000000037F0
.text:00000000000037F0                 public set_quoting_flags
.text:00000000000037F0 set_quoting_flags proc near
.text:00000000000037F0 ; __unwind {
.text:00000000000037F0                 lea     rax, default_quoting_options
.text:00000000000037F7                 test    rdi, rdi
.text:00000000000037FA                 cmovz   rdi, rax
.text:00000000000037FE                 mov     eax, [rdi+4]
.text:0000000000003801                 mov     [rdi+4], esi
.text:0000000000003804                 retn
.text:0000000000003804 ; } // starts at 37F0
.text:0000000000003804 set_quoting_flags endp
.text:0000000000003804
.text:0000000000003804 ; ---------------------------------------------------------------------------
.text:0000000000003805                 align 10h
.text:0000000000003810
.text:0000000000003810 ; =============== S U B R O U T I N E =======================================
.text:0000000000003810
.text:0000000000003810 ; Attributes: info_from_lumina
.text:0000000000003810
.text:0000000000003810 ; void __fastcall set_custom_quoting(quoting_options *o, const char *left_quote, const char *right_quote)
.text:0000000000003810                 public set_custom_quoting
.text:0000000000003810 set_custom_quoting proc near
.text:0000000000003810 ; __unwind {
.text:0000000000003810                 lea     rax, default_quoting_options
.text:0000000000003817                 test    rdi, rdi
.text:000000000000381A                 cmovz   rdi, rax
.text:000000000000381E                 test    rsi, rsi
.text:0000000000003821                 mov     dword ptr [rdi], 0Ah
.text:0000000000003827                 jz      short loc_3837
.text:0000000000003829                 test    rdx, rdx
.text:000000000000382C                 jz      short loc_3837
.text:000000000000382E                 mov     [rdi+28h], rsi
.text:0000000000003832                 mov     [rdi+30h], rdx
.text:0000000000003836                 retn
.text:0000000000003837 ; ---------------------------------------------------------------------------
.text:0000000000003837
.text:0000000000003837 loc_3837:                               ; CODE XREF: set_custom_quoting+17↑j
.text:0000000000003837                                         ; set_custom_quoting+1C↑j
.text:0000000000003837                 sub     rsp, 8
.text:000000000000383B                 call    _abort
.text:000000000000383B ; } // starts at 3810
.text:000000000000383B set_custom_quoting endp
.text:000000000000383B
.text:0000000000003840
.text:0000000000003840 ; =============== S U B R O U T I N E =======================================
.text:0000000000003840
.text:0000000000003840 ; Attributes: info_from_lumina
.text:0000000000003840
.text:0000000000003840 ; size_t __fastcall quotearg_buffer(char *buffer, size_t buffersize, const char *arg, size_t argsize, const quoting_options *o)
.text:0000000000003840                 public quotearg_buffer
.text:0000000000003840 quotearg_buffer proc near
.text:0000000000003840
.text:0000000000003840 var_40          = qword ptr -40h
.text:0000000000003840
.text:0000000000003840 ; __unwind {
.text:0000000000003840                 push    r15
.text:0000000000003842                 push    r14
.text:0000000000003844                 lea     rax, default_quoting_options
.text:000000000000384B                 push    r13
.text:000000000000384D                 push    r12
.text:000000000000384F                 mov     r13, rdi
.text:0000000000003852                 push    rbp
.text:0000000000003853                 push    rbx
.text:0000000000003854                 mov     rbx, r8
.text:0000000000003857                 mov     r14, rsi
.text:000000000000385A                 mov     r15, rdx
.text:000000000000385D                 sub     rsp, 18h
.text:0000000000003861                 test    r8, r8
.text:0000000000003864                 cmovz   rbx, rax
.text:0000000000003868                 mov     [rsp+48h+var_40], rcx
.text:000000000000386D                 call    ___errno_location
.text:0000000000003872                 mov     r12d, [rax]
.text:0000000000003875                 mov     rbp, rax
.text:0000000000003878                 lea     rax, [rbx+8]
.text:000000000000387C                 sub     rsp, 8
.text:0000000000003880                 mov     r9d, [rbx+4]
.text:0000000000003884                 push    qword ptr [rbx+30h]
.text:0000000000003887                 mov     r8d, [rbx]
.text:000000000000388A                 push    qword ptr [rbx+28h]
.text:000000000000388D                 mov     rdx, r15
.text:0000000000003890                 push    rax
.text:0000000000003891                 mov     rcx, [rsp+68h+var_40]
.text:0000000000003896                 mov     rsi, r14
.text:0000000000003899                 mov     rdi, r13
.text:000000000000389C                 call    quotearg_buffer_restyled
.text:00000000000038A1                 mov     [rbp+0], r12d
.text:00000000000038A5                 add     rsp, 38h
.text:00000000000038A9                 pop     rbx
.text:00000000000038AA                 pop     rbp
.text:00000000000038AB                 pop     r12
.text:00000000000038AD                 pop     r13
.text:00000000000038AF                 pop     r14
.text:00000000000038B1                 pop     r15
.text:00000000000038B3                 retn
.text:00000000000038B3 ; } // starts at 3840
.text:00000000000038B3 quotearg_buffer endp
.text:00000000000038B3
.text:00000000000038B3 ; ---------------------------------------------------------------------------
.text:00000000000038B4                 align 20h
.text:00000000000038C0
.text:00000000000038C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000038C0
.text:00000000000038C0 ; Attributes: info_from_lumina
.text:00000000000038C0
.text:00000000000038C0 ; char *__fastcall quotearg_alloc_mem(const char *arg, size_t argsize, size_t *size, const quoting_options *o)
.text:00000000000038C0                 public quotearg_alloc_mem
.text:00000000000038C0 quotearg_alloc_mem proc near            ; CODE XREF: quotearg_alloc+5↓j
.text:00000000000038C0
.text:00000000000038C0 var_5C          = dword ptr -5Ch
.text:00000000000038C0 var_58          = qword ptr -58h
.text:00000000000038C0 var_50          = qword ptr -50h
.text:00000000000038C0 var_48          = qword ptr -48h
.text:00000000000038C0 var_40          = qword ptr -40h
.text:00000000000038C0
.text:00000000000038C0 ; __unwind {
.text:00000000000038C0                 push    r15
.text:00000000000038C2                 push    r14
.text:00000000000038C4                 lea     rax, default_quoting_options
.text:00000000000038CB                 push    r13
.text:00000000000038CD                 push    r12
.text:00000000000038CF                 mov     r12, rdx
.text:00000000000038D2                 push    rbp
.text:00000000000038D3                 push    rbx
.text:00000000000038D4                 mov     rbx, rcx
.text:00000000000038D7                 mov     r14, rdi
.text:00000000000038DA                 mov     r15, rsi
.text:00000000000038DD                 sub     rsp, 38h
.text:00000000000038E1                 test    rcx, rcx
.text:00000000000038E4                 cmovz   rbx, rax
.text:00000000000038E8                 xor     ebp, ebp
.text:00000000000038EA                 call    ___errno_location
.text:00000000000038EF                 test    r12, r12
.text:00000000000038F2                 mov     r13, rax
.text:00000000000038F5                 mov     eax, [rax]
.text:00000000000038F7                 setz    bpl
.text:00000000000038FB                 or      ebp, [rbx+4]
.text:00000000000038FE                 lea     r10, [rbx+8]
.text:0000000000003902                 sub     rsp, 8
.text:0000000000003906                 mov     r8d, [rbx]
.text:0000000000003909                 mov     rcx, r15
.text:000000000000390C                 mov     [rsp+70h+var_5C], eax
.text:0000000000003910                 push    qword ptr [rbx+30h]
.text:0000000000003913                 mov     rdx, r14
.text:0000000000003916                 push    qword ptr [rbx+28h]
.text:0000000000003919                 push    r10
.text:000000000000391B                 xor     esi, esi
.text:000000000000391D                 mov     r9d, ebp
.text:0000000000003920                 xor     edi, edi
.text:0000000000003922                 mov     [rsp+88h+var_48], r10
.text:0000000000003927                 call    quotearg_buffer_restyled
.text:000000000000392C                 lea     rsi, [rax+1]
.text:0000000000003930                 mov     [rsp+88h+var_40], rax
.text:0000000000003935                 add     rsp, 20h
.text:0000000000003939                 mov     rdi, rsi
.text:000000000000393C                 mov     [rsp+68h+var_50], rsi
.text:0000000000003941                 call    xmalloc
.text:0000000000003946                 mov     [rsp+68h+var_58], rax
.text:000000000000394B                 sub     rsp, 8
.text:000000000000394F                 push    qword ptr [rbx+30h]
.text:0000000000003952                 push    qword ptr [rbx+28h]
.text:0000000000003955                 mov     r10, [rsp+80h+var_48]
.text:000000000000395A                 mov     r9d, ebp
.text:000000000000395D                 mov     r8d, [rbx]
.text:0000000000003960                 mov     rcx, r15
.text:0000000000003963                 mov     rdx, r14
.text:0000000000003966                 mov     rdi, rax
.text:0000000000003969                 push    r10
.text:000000000000396B                 mov     rsi, [rsp+88h+var_50]
.text:0000000000003970                 call    quotearg_buffer_restyled
.text:0000000000003975                 mov     eax, [rsp+88h+var_5C]
.text:0000000000003979                 add     rsp, 20h
.text:000000000000397D                 test    r12, r12
.text:0000000000003980                 mov     [r13+0], eax
.text:0000000000003984                 jz      short loc_398F
.text:0000000000003986                 mov     r11, [rsp+68h+var_40]
.text:000000000000398B                 mov     [r12], r11
.text:000000000000398F
.text:000000000000398F loc_398F:                               ; CODE XREF: quotearg_alloc_mem+C4↑j
.text:000000000000398F                 mov     rax, [rsp+68h+var_58]
.text:0000000000003994                 add     rsp, 38h
.text:0000000000003998                 pop     rbx
.text:0000000000003999                 pop     rbp
.text:000000000000399A                 pop     r12
.text:000000000000399C                 pop     r13
.text:000000000000399E                 pop     r14
.text:00000000000039A0                 pop     r15
.text:00000000000039A2                 retn
.text:00000000000039A2 ; } // starts at 38C0
.text:00000000000039A2 quotearg_alloc_mem endp
.text:00000000000039A2
.text:00000000000039A2 ; ---------------------------------------------------------------------------
.text:00000000000039A3                 align 10h
.text:00000000000039B0
.text:00000000000039B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000039B0
.text:00000000000039B0
.text:00000000000039B0                 public quotearg_alloc
.text:00000000000039B0 quotearg_alloc  proc near
.text:00000000000039B0 ; __unwind {
.text:00000000000039B0                 mov     rcx, rdx
.text:00000000000039B3                 xor     edx, edx
.text:00000000000039B5                 jmp     quotearg_alloc_mem
.text:00000000000039B5 ; } // starts at 39B0
.text:00000000000039B5 quotearg_alloc  endp
.text:00000000000039B5
.text:00000000000039B5 ; ---------------------------------------------------------------------------
.text:00000000000039BA                 align 20h
.text:00000000000039C0
.text:00000000000039C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000039C0
.text:00000000000039C0 ; Attributes: info_from_lumina
.text:00000000000039C0
.text:00000000000039C0 ; void __cdecl quotearg_free()
.text:00000000000039C0                 public quotearg_free
.text:00000000000039C0 quotearg_free   proc near
.text:00000000000039C0 ; __unwind {
.text:00000000000039C0                 mov     eax, cs:nslots
.text:00000000000039C6                 push    r12
.text:00000000000039C8                 mov     r12, cs:slotvec
.text:00000000000039CF                 push    rbp
.text:00000000000039D0                 push    rbx
.text:00000000000039D1                 cmp     eax, 1
.text:00000000000039D4                 jle     short loc_3A01
.text:00000000000039D6                 sub     eax, 2
.text:00000000000039D9                 lea     rbx, [r12+18h]
.text:00000000000039DE                 shl     rax, 4
.text:00000000000039E2                 lea     rbp, [r12+rax+28h]
.text:00000000000039E7                 nop     word ptr [rax+rax+00000000h]
.text:00000000000039F0
.text:00000000000039F0 loc_39F0:                               ; CODE XREF: quotearg_free+3F↓j
.text:00000000000039F0                 mov     rdi, [rbx]      ; ptr
.text:00000000000039F3                 add     rbx, 10h
.text:00000000000039F7                 call    _free
.text:00000000000039FC                 cmp     rbx, rbp
.text:00000000000039FF                 jnz     short loc_39F0
.text:0000000000003A01
.text:0000000000003A01 loc_3A01:                               ; CODE XREF: quotearg_free+14↑j
.text:0000000000003A01                 mov     rdi, [r12+8]    ; ptr
.text:0000000000003A06                 lea     rbx, slot0
.text:0000000000003A0D                 cmp     rdi, rbx
.text:0000000000003A10                 jz      short loc_3A29
.text:0000000000003A12                 call    _free
.text:0000000000003A17                 mov     cs:slotvec0, 100h
.text:0000000000003A22                 mov     cs:off_20A078, rbx
.text:0000000000003A29
.text:0000000000003A29 loc_3A29:                               ; CODE XREF: quotearg_free+50↑j
.text:0000000000003A29                 lea     rbx, slotvec0
.text:0000000000003A30                 cmp     r12, rbx
.text:0000000000003A33                 jz      short loc_3A44
.text:0000000000003A35                 mov     rdi, r12        ; ptr
.text:0000000000003A38                 call    _free
.text:0000000000003A3D                 mov     cs:slotvec, rbx
.text:0000000000003A44
.text:0000000000003A44 loc_3A44:                               ; CODE XREF: quotearg_free+73↑j
.text:0000000000003A44                 pop     rbx
.text:0000000000003A45                 mov     cs:nslots, 1
.text:0000000000003A4F                 pop     rbp
.text:0000000000003A50                 pop     r12
.text:0000000000003A52                 retn
.text:0000000000003A52 ; } // starts at 39C0
.text:0000000000003A52 quotearg_free   endp
.text:0000000000003A52
.text:0000000000003A52 ; ---------------------------------------------------------------------------
.text:0000000000003A53                 align 20h
.text:0000000000003A60
.text:0000000000003A60 ; =============== S U B R O U T I N E =======================================
.text:0000000000003A60
.text:0000000000003A60
.text:0000000000003A60                 public quotearg_n
.text:0000000000003A60 quotearg_n      proc near
.text:0000000000003A60 ; __unwind {
.text:0000000000003A60                 lea     rcx, default_quoting_options
.text:0000000000003A67                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003A6E                 jmp     quotearg_n_options
.text:0000000000003A6E ; } // starts at 3A60
.text:0000000000003A6E quotearg_n      endp
.text:0000000000003A6E
.text:0000000000003A6E ; ---------------------------------------------------------------------------
.text:0000000000003A73                 align 20h
.text:0000000000003A80
.text:0000000000003A80 ; =============== S U B R O U T I N E =======================================
.text:0000000000003A80
.text:0000000000003A80
.text:0000000000003A80                 public quotearg_n_mem
.text:0000000000003A80 quotearg_n_mem  proc near
.text:0000000000003A80 ; __unwind {
.text:0000000000003A80                 lea     rcx, default_quoting_options
.text:0000000000003A87                 jmp     quotearg_n_options
.text:0000000000003A87 ; } // starts at 3A80
.text:0000000000003A87 quotearg_n_mem  endp
.text:0000000000003A87
.text:0000000000003A87 ; ---------------------------------------------------------------------------
.text:0000000000003A8C                 align 10h
.text:0000000000003A90
.text:0000000000003A90 ; =============== S U B R O U T I N E =======================================
.text:0000000000003A90
.text:0000000000003A90
.text:0000000000003A90                 public quotearg
.text:0000000000003A90 quotearg        proc near
.text:0000000000003A90 ; __unwind {
.text:0000000000003A90                 lea     rcx, default_quoting_options
.text:0000000000003A97                 mov     rsi, rdi
.text:0000000000003A9A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003AA1                 xor     edi, edi
.text:0000000000003AA3                 jmp     quotearg_n_options
.text:0000000000003AA3 ; } // starts at 3A90
.text:0000000000003AA3 quotearg        endp
.text:0000000000003AA3
.text:0000000000003AA3 ; ---------------------------------------------------------------------------
.text:0000000000003AA8                 align 10h
.text:0000000000003AB0
.text:0000000000003AB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003AB0
.text:0000000000003AB0
.text:0000000000003AB0                 public quotearg_mem
.text:0000000000003AB0 quotearg_mem    proc near
.text:0000000000003AB0 ; __unwind {
.text:0000000000003AB0                 lea     rcx, default_quoting_options
.text:0000000000003AB7                 mov     rdx, rsi
.text:0000000000003ABA                 mov     rsi, rdi
.text:0000000000003ABD                 xor     edi, edi
.text:0000000000003ABF                 jmp     quotearg_n_options
.text:0000000000003ABF ; } // starts at 3AB0
.text:0000000000003ABF quotearg_mem    endp
.text:0000000000003ABF
.text:0000000000003ABF ; ---------------------------------------------------------------------------
.text:0000000000003AC4                 align 10h
.text:0000000000003AD0
.text:0000000000003AD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003AD0
.text:0000000000003AD0 ; Attributes: info_from_lumina
.text:0000000000003AD0
.text:0000000000003AD0 ; char *__fastcall quotearg_n_style(int n, quoting_style s, const char *arg)
.text:0000000000003AD0                 public quotearg_n_style
.text:0000000000003AD0 quotearg_n_style proc near              ; CODE XREF: quotearg_style+7↓j
.text:0000000000003AD0
.text:0000000000003AD0 var_48          = dword ptr -48h
.text:0000000000003AD0 var_44          = qword ptr -44h
.text:0000000000003AD0 var_3C          = qword ptr -3Ch
.text:0000000000003AD0 var_34          = qword ptr -34h
.text:0000000000003AD0 var_2C          = qword ptr -2Ch
.text:0000000000003AD0 var_24          = qword ptr -24h
.text:0000000000003AD0 var_1C          = qword ptr -1Ch
.text:0000000000003AD0 var_14          = dword ptr -14h
.text:0000000000003AD0 var_10          = qword ptr -10h
.text:0000000000003AD0
.text:0000000000003AD0 ; __unwind {
.text:0000000000003AD0                 sub     rsp, 48h
.text:0000000000003AD4                 mov     rax, rdx
.text:0000000000003AD7                 mov     rdx, fs:28h
.text:0000000000003AE0                 mov     [rsp+48h+var_10], rdx
.text:0000000000003AE5                 xor     edx, edx
.text:0000000000003AE7                 cmp     esi, 0Ah
.text:0000000000003AEA                 jz      short loc_3B54
.text:0000000000003AEC                 mov     [rsp+48h+var_48], esi
.text:0000000000003AEF                 mov     rcx, rsp
.text:0000000000003AF2                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003AF9                 mov     rsi, rax
.text:0000000000003AFC                 mov     [rsp+48h+var_44], 0
.text:0000000000003B05                 mov     [rsp+48h+var_3C], 0
.text:0000000000003B0E                 mov     [rsp+48h+var_34], 0
.text:0000000000003B17                 mov     [rsp+48h+var_2C], 0
.text:0000000000003B20                 mov     [rsp+48h+var_24], 0
.text:0000000000003B29                 mov     [rsp+48h+var_1C], 0
.text:0000000000003B32                 mov     [rsp+48h+var_14], 0
.text:0000000000003B3A                 call    quotearg_n_options
.text:0000000000003B3F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000003B44                 xor     rcx, fs:28h
.text:0000000000003B4D                 jnz     short loc_3B59
.text:0000000000003B4F                 add     rsp, 48h
.text:0000000000003B53                 retn
.text:0000000000003B54 ; ---------------------------------------------------------------------------
.text:0000000000003B54
.text:0000000000003B54 loc_3B54:                               ; CODE XREF: quotearg_n_style+1A↑j
.text:0000000000003B54                 call    _abort
.text:0000000000003B59 ; ---------------------------------------------------------------------------
.text:0000000000003B59
.text:0000000000003B59 loc_3B59:                               ; CODE XREF: quotearg_n_style+7D↑j
.text:0000000000003B59                 call    ___stack_chk_fail
.text:0000000000003B59 ; } // starts at 3AD0
.text:0000000000003B59 quotearg_n_style endp
.text:0000000000003B59
.text:0000000000003B59 ; ---------------------------------------------------------------------------
.text:0000000000003B5E                 align 20h
.text:0000000000003B60
.text:0000000000003B60 ; =============== S U B R O U T I N E =======================================
.text:0000000000003B60
.text:0000000000003B60 ; Attributes: info_from_lumina
.text:0000000000003B60
.text:0000000000003B60 ; char *__fastcall quotearg_n_style_mem(int n, quoting_style s, const char *arg, size_t argsize)
.text:0000000000003B60                 public quotearg_n_style_mem
.text:0000000000003B60 quotearg_n_style_mem proc near          ; CODE XREF: quotearg_style_mem+A↓j
.text:0000000000003B60
.text:0000000000003B60 var_48          = dword ptr -48h
.text:0000000000003B60 var_44          = qword ptr -44h
.text:0000000000003B60 var_3C          = qword ptr -3Ch
.text:0000000000003B60 var_34          = qword ptr -34h
.text:0000000000003B60 var_2C          = qword ptr -2Ch
.text:0000000000003B60 var_24          = qword ptr -24h
.text:0000000000003B60 var_1C          = qword ptr -1Ch
.text:0000000000003B60 var_14          = dword ptr -14h
.text:0000000000003B60 var_10          = qword ptr -10h
.text:0000000000003B60
.text:0000000000003B60 ; __unwind {
.text:0000000000003B60                 sub     rsp, 48h
.text:0000000000003B64                 mov     rax, rdx
.text:0000000000003B67                 mov     rdx, rcx
.text:0000000000003B6A                 mov     rcx, fs:28h
.text:0000000000003B73                 mov     [rsp+48h+var_10], rcx
.text:0000000000003B78                 xor     ecx, ecx
.text:0000000000003B7A                 cmp     esi, 0Ah
.text:0000000000003B7D                 jz      short loc_3BE0
.text:0000000000003B7F                 mov     [rsp+48h+var_48], esi
.text:0000000000003B82                 mov     rcx, rsp
.text:0000000000003B85                 mov     rsi, rax
.text:0000000000003B88                 mov     [rsp+48h+var_44], 0
.text:0000000000003B91                 mov     [rsp+48h+var_3C], 0
.text:0000000000003B9A                 mov     [rsp+48h+var_34], 0
.text:0000000000003BA3                 mov     [rsp+48h+var_2C], 0
.text:0000000000003BAC                 mov     [rsp+48h+var_24], 0
.text:0000000000003BB5                 mov     [rsp+48h+var_1C], 0
.text:0000000000003BBE                 mov     [rsp+48h+var_14], 0
.text:0000000000003BC6                 call    quotearg_n_options
.text:0000000000003BCB                 mov     rdx, [rsp+48h+var_10]
.text:0000000000003BD0                 xor     rdx, fs:28h
.text:0000000000003BD9                 jnz     short loc_3BE5
.text:0000000000003BDB                 add     rsp, 48h
.text:0000000000003BDF                 retn
.text:0000000000003BE0 ; ---------------------------------------------------------------------------
.text:0000000000003BE0
.text:0000000000003BE0 loc_3BE0:                               ; CODE XREF: quotearg_n_style_mem+1D↑j
.text:0000000000003BE0                 call    _abort
.text:0000000000003BE5 ; ---------------------------------------------------------------------------
.text:0000000000003BE5
.text:0000000000003BE5 loc_3BE5:                               ; CODE XREF: quotearg_n_style_mem+79↑j
.text:0000000000003BE5                 call    ___stack_chk_fail
.text:0000000000003BE5 ; } // starts at 3B60
.text:0000000000003BE5 quotearg_n_style_mem endp
.text:0000000000003BE5
.text:0000000000003BE5 ; ---------------------------------------------------------------------------
.text:0000000000003BEA                 align 10h
.text:0000000000003BF0
.text:0000000000003BF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003BF0
.text:0000000000003BF0
.text:0000000000003BF0                 public quotearg_style
.text:0000000000003BF0 quotearg_style  proc near               ; CODE XREF: main+16B↑p
.text:0000000000003BF0                                         ; main+1BA↑p ...
.text:0000000000003BF0 ; __unwind {
.text:0000000000003BF0                 mov     rdx, rsi
.text:0000000000003BF3                 mov     esi, edi
.text:0000000000003BF5                 xor     edi, edi
.text:0000000000003BF7                 jmp     quotearg_n_style
.text:0000000000003BF7 ; } // starts at 3BF0
.text:0000000000003BF7 quotearg_style  endp
.text:0000000000003BF7
.text:0000000000003BF7 ; ---------------------------------------------------------------------------
.text:0000000000003BFC                 align 20h
.text:0000000000003C00
.text:0000000000003C00 ; =============== S U B R O U T I N E =======================================
.text:0000000000003C00
.text:0000000000003C00
.text:0000000000003C00                 public quotearg_style_mem
.text:0000000000003C00 quotearg_style_mem proc near
.text:0000000000003C00 ; __unwind {
.text:0000000000003C00                 mov     rcx, rdx
.text:0000000000003C03                 mov     rdx, rsi
.text:0000000000003C06                 mov     esi, edi
.text:0000000000003C08                 xor     edi, edi
.text:0000000000003C0A                 jmp     quotearg_n_style_mem
.text:0000000000003C0A ; } // starts at 3C00
.text:0000000000003C0A quotearg_style_mem endp
.text:0000000000003C0A
.text:0000000000003C0A ; ---------------------------------------------------------------------------
.text:0000000000003C0F                 align 10h
.text:0000000000003C10
.text:0000000000003C10 ; =============== S U B R O U T I N E =======================================
.text:0000000000003C10
.text:0000000000003C10 ; Attributes: info_from_lumina
.text:0000000000003C10
.text:0000000000003C10 ; char *__fastcall quotearg_char_mem(const char *arg, size_t argsize, char ch_0)
.text:0000000000003C10                 public quotearg_char_mem
.text:0000000000003C10 quotearg_char_mem proc near             ; CODE XREF: quotearg_char+B↓j
.text:0000000000003C10                                         ; quotearg_colon+C↓j ...
.text:0000000000003C10
.text:0000000000003C10 var_48          = xmmword ptr -48h
.text:0000000000003C10 var_38          = xmmword ptr -38h
.text:0000000000003C10 var_28          = xmmword ptr -28h
.text:0000000000003C10 var_18          = qword ptr -18h
.text:0000000000003C10 var_10          = qword ptr -10h
.text:0000000000003C10
.text:0000000000003C10 ; __unwind {
.text:0000000000003C10                 sub     rsp, 48h
.text:0000000000003C14                 mov     ecx, edx
.text:0000000000003C16                 mov     rax, fs:28h
.text:0000000000003C1F                 mov     [rsp+48h+var_10], rax
.text:0000000000003C24                 xor     eax, eax
.text:0000000000003C26                 mov     rax, cs:qword_20A210
.text:0000000000003C2D                 mov     r8, rsp
.text:0000000000003C30                 and     ecx, 1Fh
.text:0000000000003C33                 movdqa  xmm0, cs:default_quoting_options
.text:0000000000003C3B                 mov     [rsp+48h+var_18], rax
.text:0000000000003C40                 mov     eax, edx
.text:0000000000003C42                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000003C46                 shr     al, 5
.text:0000000000003C49                 movzx   eax, al
.text:0000000000003C4C                 lea     r9, [r8+rax*4+8]
.text:0000000000003C51                 movdqa  xmm0, cs:xmmword_20A1F0
.text:0000000000003C59                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000003C5E                 movdqa  xmm0, cs:xmmword_20A200
.text:0000000000003C66                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000003C6B                 mov     edx, [r9]
.text:0000000000003C6E                 mov     eax, edx
.text:0000000000003C70                 shr     eax, cl
.text:0000000000003C72                 not     eax
.text:0000000000003C74                 and     eax, 1
.text:0000000000003C77                 shl     eax, cl
.text:0000000000003C79                 mov     rcx, r8
.text:0000000000003C7C                 xor     eax, edx
.text:0000000000003C7E                 mov     rdx, rsi
.text:0000000000003C81                 mov     rsi, rdi
.text:0000000000003C84                 mov     [r9], eax
.text:0000000000003C87                 xor     edi, edi
.text:0000000000003C89                 call    quotearg_n_options
.text:0000000000003C8E                 mov     rsi, [rsp+48h+var_10]
.text:0000000000003C93                 xor     rsi, fs:28h
.text:0000000000003C9C                 jnz     short loc_3CA3
.text:0000000000003C9E                 add     rsp, 48h
.text:0000000000003CA2                 retn
.text:0000000000003CA3 ; ---------------------------------------------------------------------------
.text:0000000000003CA3
.text:0000000000003CA3 loc_3CA3:                               ; CODE XREF: quotearg_char_mem+8C↑j
.text:0000000000003CA3                 call    ___stack_chk_fail
.text:0000000000003CA3 ; } // starts at 3C10
.text:0000000000003CA3 quotearg_char_mem endp
.text:0000000000003CA3
.text:0000000000003CA3 ; ---------------------------------------------------------------------------
.text:0000000000003CA8                 align 10h
.text:0000000000003CB0
.text:0000000000003CB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003CB0
.text:0000000000003CB0
.text:0000000000003CB0                 public quotearg_char
.text:0000000000003CB0 quotearg_char   proc near
.text:0000000000003CB0 ; __unwind {
.text:0000000000003CB0                 movsx   edx, sil
.text:0000000000003CB4                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:0000000000003CBB                 jmp     quotearg_char_mem
.text:0000000000003CBB ; } // starts at 3CB0
.text:0000000000003CBB quotearg_char   endp
.text:0000000000003CBB
.text:0000000000003CC0
.text:0000000000003CC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003CC0
.text:0000000000003CC0
.text:0000000000003CC0                 public quotearg_colon
.text:0000000000003CC0 quotearg_colon  proc near               ; CODE XREF: close_stdout+65↑p
.text:0000000000003CC0 ; __unwind {
.text:0000000000003CC0                 mov     edx, 3Ah ; ':'
.text:0000000000003CC5                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:0000000000003CCC                 jmp     quotearg_char_mem
.text:0000000000003CCC ; } // starts at 3CC0
.text:0000000000003CCC quotearg_colon  endp
.text:0000000000003CCC
.text:0000000000003CCC ; ---------------------------------------------------------------------------
.text:0000000000003CD1                 align 20h
.text:0000000000003CE0
.text:0000000000003CE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003CE0
.text:0000000000003CE0
.text:0000000000003CE0                 public quotearg_colon_mem
.text:0000000000003CE0 quotearg_colon_mem proc near
.text:0000000000003CE0 ; __unwind {
.text:0000000000003CE0                 mov     edx, 3Ah ; ':'
.text:0000000000003CE5                 jmp     quotearg_char_mem
.text:0000000000003CE5 ; } // starts at 3CE0
.text:0000000000003CE5 quotearg_colon_mem endp
.text:0000000000003CE5
.text:0000000000003CE5 ; ---------------------------------------------------------------------------
.text:0000000000003CEA                 align 10h
.text:0000000000003CF0
.text:0000000000003CF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003CF0
.text:0000000000003CF0 ; Attributes: info_from_lumina
.text:0000000000003CF0
.text:0000000000003CF0 ; char *__fastcall quotearg_n_style_colon(int n, quoting_style s, const char *arg)
.text:0000000000003CF0                 public quotearg_n_style_colon
.text:0000000000003CF0 quotearg_n_style_colon proc near
.text:0000000000003CF0
.text:0000000000003CF0 var_48          = dword ptr -48h
.text:0000000000003CF0 var_44          = qword ptr -44h
.text:0000000000003CF0 var_3C          = qword ptr -3Ch
.text:0000000000003CF0 var_34          = qword ptr -34h
.text:0000000000003CF0 var_2C          = qword ptr -2Ch
.text:0000000000003CF0 var_24          = qword ptr -24h
.text:0000000000003CF0 var_1C          = qword ptr -1Ch
.text:0000000000003CF0 var_14          = dword ptr -14h
.text:0000000000003CF0 var_10          = qword ptr -10h
.text:0000000000003CF0
.text:0000000000003CF0 ; __unwind {
.text:0000000000003CF0                 sub     rsp, 48h
.text:0000000000003CF4                 mov     rax, rdx
.text:0000000000003CF7                 mov     rdx, fs:28h
.text:0000000000003D00                 mov     [rsp+48h+var_10], rdx
.text:0000000000003D05                 xor     edx, edx
.text:0000000000003D07                 cmp     esi, 0Ah
.text:0000000000003D0A                 jz      short loc_3D74
.text:0000000000003D0C                 mov     [rsp+48h+var_48], esi
.text:0000000000003D0F                 mov     rcx, rsp
.text:0000000000003D12                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003D19                 mov     rsi, rax
.text:0000000000003D1C                 mov     [rsp+48h+var_44], 0
.text:0000000000003D25                 mov     [rsp+48h+var_3C], 4000000h
.text:0000000000003D2E                 mov     [rsp+48h+var_34], 0
.text:0000000000003D37                 mov     [rsp+48h+var_2C], 0
.text:0000000000003D40                 mov     [rsp+48h+var_24], 0
.text:0000000000003D49                 mov     [rsp+48h+var_1C], 0
.text:0000000000003D52                 mov     [rsp+48h+var_14], 0
.text:0000000000003D5A                 call    quotearg_n_options
.text:0000000000003D5F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000003D64                 xor     rcx, fs:28h
.text:0000000000003D6D                 jnz     short loc_3D79
.text:0000000000003D6F                 add     rsp, 48h
.text:0000000000003D73                 retn
.text:0000000000003D74 ; ---------------------------------------------------------------------------
.text:0000000000003D74
.text:0000000000003D74 loc_3D74:                               ; CODE XREF: quotearg_n_style_colon+1A↑j
.text:0000000000003D74                 call    _abort
.text:0000000000003D79 ; ---------------------------------------------------------------------------
.text:0000000000003D79
.text:0000000000003D79 loc_3D79:                               ; CODE XREF: quotearg_n_style_colon+7D↑j
.text:0000000000003D79                 call    ___stack_chk_fail
.text:0000000000003D79 ; } // starts at 3CF0
.text:0000000000003D79 quotearg_n_style_colon endp
.text:0000000000003D79
.text:0000000000003D79 ; ---------------------------------------------------------------------------
.text:0000000000003D7E                 align 20h
.text:0000000000003D80
.text:0000000000003D80 ; =============== S U B R O U T I N E =======================================
.text:0000000000003D80
.text:0000000000003D80 ; Attributes: info_from_lumina
.text:0000000000003D80
.text:0000000000003D80 ; char *__fastcall quotearg_n_custom_mem(int n, const char *left_quote, const char *right_quote, const char *arg, size_t argsize)
.text:0000000000003D80                 public quotearg_n_custom_mem
.text:0000000000003D80 quotearg_n_custom_mem proc near         ; CODE XREF: quotearg_n_custom+7↓j
.text:0000000000003D80                                         ; quotearg_custom+12↓j ...
.text:0000000000003D80
.text:0000000000003D80 var_48          = xmmword ptr -48h
.text:0000000000003D80 var_38          = xmmword ptr -38h
.text:0000000000003D80 var_28          = xmmword ptr -28h
.text:0000000000003D80 var_18          = qword ptr -18h
.text:0000000000003D80 var_10          = qword ptr -10h
.text:0000000000003D80
.text:0000000000003D80 ; __unwind {
.text:0000000000003D80                 sub     rsp, 48h
.text:0000000000003D84                 mov     r9, rcx
.text:0000000000003D87                 mov     rcx, cs:qword_20A210
.text:0000000000003D8E                 movdqa  xmm0, cs:default_quoting_options
.text:0000000000003D96                 mov     rax, fs:28h
.text:0000000000003D9F                 mov     [rsp+48h+var_10], rax
.text:0000000000003DA4                 xor     eax, eax
.text:0000000000003DA6                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000003DAA                 test    rsi, rsi
.text:0000000000003DAD                 mov     [rsp+48h+var_18], rcx
.text:0000000000003DB2                 mov     dword ptr [rsp+48h+var_48], 0Ah
.text:0000000000003DB9                 movdqa  xmm0, cs:xmmword_20A1F0
.text:0000000000003DC1                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000003DC6                 movdqa  xmm0, cs:xmmword_20A200
.text:0000000000003DCE                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000003DD3                 jz      short loc_3E07
.text:0000000000003DD5                 test    rdx, rdx
.text:0000000000003DD8                 jz      short loc_3E07
.text:0000000000003DDA                 mov     qword ptr [rsp+48h+var_28+8], rsi
.text:0000000000003DDF                 mov     [rsp+48h+var_18], rdx
.text:0000000000003DE4                 mov     rcx, rsp
.text:0000000000003DE7                 mov     rdx, r8
.text:0000000000003DEA                 mov     rsi, r9
.text:0000000000003DED                 call    quotearg_n_options
.text:0000000000003DF2                 mov     rdi, [rsp+48h+var_10]
.text:0000000000003DF7                 xor     rdi, fs:28h
.text:0000000000003E00                 jnz     short loc_3E0C
.text:0000000000003E02                 add     rsp, 48h
.text:0000000000003E06                 retn
.text:0000000000003E07 ; ---------------------------------------------------------------------------
.text:0000000000003E07
.text:0000000000003E07 loc_3E07:                               ; CODE XREF: quotearg_n_custom_mem+53↑j
.text:0000000000003E07                                         ; quotearg_n_custom_mem+58↑j
.text:0000000000003E07                 call    _abort
.text:0000000000003E0C ; ---------------------------------------------------------------------------
.text:0000000000003E0C
.text:0000000000003E0C loc_3E0C:                               ; CODE XREF: quotearg_n_custom_mem+80↑j
.text:0000000000003E0C                 call    ___stack_chk_fail
.text:0000000000003E0C ; } // starts at 3D80
.text:0000000000003E0C quotearg_n_custom_mem endp
.text:0000000000003E0C
.text:0000000000003E0C ; ---------------------------------------------------------------------------
.text:0000000000003E11                 align 20h
.text:0000000000003E20
.text:0000000000003E20 ; =============== S U B R O U T I N E =======================================
.text:0000000000003E20
.text:0000000000003E20
.text:0000000000003E20                 public quotearg_n_custom
.text:0000000000003E20 quotearg_n_custom proc near
.text:0000000000003E20 ; __unwind {
.text:0000000000003E20                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000003E27                 jmp     quotearg_n_custom_mem
.text:0000000000003E27 ; } // starts at 3E20
.text:0000000000003E27 quotearg_n_custom endp
.text:0000000000003E27
.text:0000000000003E27 ; ---------------------------------------------------------------------------
.text:0000000000003E2C                 align 10h
.text:0000000000003E30
.text:0000000000003E30 ; =============== S U B R O U T I N E =======================================
.text:0000000000003E30
.text:0000000000003E30
.text:0000000000003E30                 public quotearg_custom
.text:0000000000003E30 quotearg_custom proc near
.text:0000000000003E30 ; __unwind {
.text:0000000000003E30                 mov     rcx, rdx
.text:0000000000003E33                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000003E3A                 mov     rdx, rsi
.text:0000000000003E3D                 mov     rsi, rdi
.text:0000000000003E40                 xor     edi, edi
.text:0000000000003E42                 jmp     quotearg_n_custom_mem
.text:0000000000003E42 ; } // starts at 3E30
.text:0000000000003E42 quotearg_custom endp
.text:0000000000003E42
.text:0000000000003E42 ; ---------------------------------------------------------------------------
.text:0000000000003E47                 align 10h
.text:0000000000003E50
.text:0000000000003E50 ; =============== S U B R O U T I N E =======================================
.text:0000000000003E50
.text:0000000000003E50
.text:0000000000003E50                 public quotearg_custom_mem
.text:0000000000003E50 quotearg_custom_mem proc near
.text:0000000000003E50 ; __unwind {
.text:0000000000003E50                 mov     r8, rcx
.text:0000000000003E53                 mov     rcx, rdx
.text:0000000000003E56                 mov     rdx, rsi
.text:0000000000003E59                 mov     rsi, rdi
.text:0000000000003E5C                 xor     edi, edi
.text:0000000000003E5E                 jmp     quotearg_n_custom_mem
.text:0000000000003E5E ; } // starts at 3E50
.text:0000000000003E5E quotearg_custom_mem endp
.text:0000000000003E5E
.text:0000000000003E5E ; ---------------------------------------------------------------------------
.text:0000000000003E63                 align 10h
.text:0000000000003E70
.text:0000000000003E70 ; =============== S U B R O U T I N E =======================================
.text:0000000000003E70
.text:0000000000003E70
.text:0000000000003E70                 public quote_n_mem
.text:0000000000003E70 quote_n_mem     proc near
.text:0000000000003E70 ; __unwind {
.text:0000000000003E70                 lea     rcx, quote_quoting_options
.text:0000000000003E77                 jmp     quotearg_n_options
.text:0000000000003E77 ; } // starts at 3E70
.text:0000000000003E77 quote_n_mem     endp
.text:0000000000003E77
.text:0000000000003E77 ; ---------------------------------------------------------------------------
.text:0000000000003E7C                 align 20h
.text:0000000000003E80
.text:0000000000003E80 ; =============== S U B R O U T I N E =======================================
.text:0000000000003E80
.text:0000000000003E80
.text:0000000000003E80                 public quote_mem
.text:0000000000003E80 quote_mem       proc near
.text:0000000000003E80 ; __unwind {
.text:0000000000003E80                 lea     rcx, quote_quoting_options
.text:0000000000003E87                 mov     rdx, rsi
.text:0000000000003E8A                 mov     rsi, rdi
.text:0000000000003E8D                 xor     edi, edi
.text:0000000000003E8F                 jmp     quotearg_n_options
.text:0000000000003E8F ; } // starts at 3E80
.text:0000000000003E8F quote_mem       endp
.text:0000000000003E8F
.text:0000000000003E8F ; ---------------------------------------------------------------------------
.text:0000000000003E94                 align 20h
.text:0000000000003EA0
.text:0000000000003EA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003EA0
.text:0000000000003EA0
.text:0000000000003EA0                 public quote_n
.text:0000000000003EA0 quote_n         proc near
.text:0000000000003EA0 ; __unwind {
.text:0000000000003EA0                 lea     rcx, quote_quoting_options
.text:0000000000003EA7                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003EAE                 jmp     quotearg_n_options
.text:0000000000003EAE ; } // starts at 3EA0
.text:0000000000003EAE quote_n         endp
.text:0000000000003EAE
.text:0000000000003EAE ; ---------------------------------------------------------------------------
.text:0000000000003EB3                 align 20h
.text:0000000000003EC0
.text:0000000000003EC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003EC0
.text:0000000000003EC0
.text:0000000000003EC0                 public quote
.text:0000000000003EC0 quote           proc near
.text:0000000000003EC0 ; __unwind {
.text:0000000000003EC0                 lea     rcx, quote_quoting_options
.text:0000000000003EC7                 mov     rsi, rdi
.text:0000000000003ECA                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003ED1                 xor     edi, edi
.text:0000000000003ED3                 jmp     quotearg_n_options
.text:0000000000003ED3 ; } // starts at 3EC0
.text:0000000000003ED3 quote           endp
.text:0000000000003ED3
.text:0000000000003ED3 ; ---------------------------------------------------------------------------
.text:0000000000003ED8                 align 20h
.text:0000000000003EE0
.text:0000000000003EE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003EE0
.text:0000000000003EE0
.text:0000000000003EE0 ; __int64 __fastcall version_etc_arn(FILE *stream)
.text:0000000000003EE0                 public version_etc_arn
.text:0000000000003EE0 version_etc_arn proc near               ; CODE XREF: version_etc_ar:loc_431B↓j
.text:0000000000003EE0                                         ; version_etc_va:loc_436B↓p ...
.text:0000000000003EE0
.text:0000000000003EE0 var_58          = qword ptr -58h
.text:0000000000003EE0 var_50          = qword ptr -50h
.text:0000000000003EE0 var_48          = qword ptr -48h
.text:0000000000003EE0 var_40          = qword ptr -40h
.text:0000000000003EE0
.text:0000000000003EE0 ; __unwind {
.text:0000000000003EE0                 push    r15
.text:0000000000003EE2                 push    r14
.text:0000000000003EE4                 push    r13
.text:0000000000003EE6                 push    r12
.text:0000000000003EE8                 mov     r12, r9
.text:0000000000003EEB                 push    rbp
.text:0000000000003EEC                 push    rbx
.text:0000000000003EED                 mov     rbp, rdi
.text:0000000000003EF0                 mov     rbx, r8
.text:0000000000003EF3                 sub     rsp, 28h
.text:0000000000003EF7                 test    rsi, rsi
.text:0000000000003EFA                 jz      loc_4018
.text:0000000000003F00                 mov     r8, rdx
.text:0000000000003F03                 lea     rdx, aSSS       ; "%s (%s) %s\n"
.text:0000000000003F0A                 mov     r9, rcx
.text:0000000000003F0D                 xor     eax, eax
.text:0000000000003F0F                 mov     rcx, rsi
.text:0000000000003F12                 mov     esi, 1
.text:0000000000003F17                 call    ___fprintf_chk
.text:0000000000003F1C
.text:0000000000003F1C loc_3F1C:                               ; CODE XREF: version_etc_arn+151↓j
.text:0000000000003F1C                 lea     rsi, aC_0       ; "(C)"
.text:0000000000003F23                 xor     edi, edi        ; domainname
.text:0000000000003F25                 mov     edx, 5          ; category
.text:0000000000003F2A                 call    _dcgettext
.text:0000000000003F2F                 lea     rdx, version_etc_copyright ; "Copyright %s %d Free Software Foundatio"...
.text:0000000000003F36                 mov     rcx, rax
.text:0000000000003F39                 mov     r8d, 7E3h
.text:0000000000003F3F                 mov     esi, 1
.text:0000000000003F44                 mov     rdi, rbp
.text:0000000000003F47                 xor     eax, eax
.text:0000000000003F49                 call    ___fprintf_chk
.text:0000000000003F4E                 lea     rsi, aLicenseGplv3Gn ; "\nLicense GPLv3+: GNU GPL version 3 or "...
.text:0000000000003F55                 xor     edi, edi        ; domainname
.text:0000000000003F57                 mov     edx, 5          ; category
.text:0000000000003F5C                 call    _dcgettext
.text:0000000000003F61                 mov     rsi, rbp        ; stream
.text:0000000000003F64                 mov     rdi, rax        ; s
.text:0000000000003F67                 call    _fputs_unlocked
.text:0000000000003F6C                 cmp     r12, 9          ; switch 10 cases
.text:0000000000003F70                 ja      def_3F84        ; jumptable 0000000000003F84 default case
.text:0000000000003F76                 lea     rdx, jpt_3F84
.text:0000000000003F7D                 movsxd  rax, ds:(jpt_3F84 - 7968h)[rdx+r12*4]
.text:0000000000003F81                 add     rax, rdx
.text:0000000000003F84                 jmp     rax             ; switch jump
.text:0000000000003F84 ; ---------------------------------------------------------------------------
.text:0000000000003F86                 align 10h
.text:0000000000003F90
.text:0000000000003F90 loc_3F90:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003F90                                         ; DATA XREF: .rodata:jpt_3F84↓o
.text:0000000000003F90                 mov     r9, [rbx+38h]   ; jumptable 0000000000003F84 case 8
.text:0000000000003F94                 mov     rax, [rbx+10h]
.text:0000000000003F98                 lea     rsi, aWrittenBySSSSS ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000003F9F                 mov     r8, [rbx+8]
.text:0000000000003FA3                 mov     edx, 5          ; category
.text:0000000000003FA8                 xor     edi, edi        ; domainname
.text:0000000000003FAA                 mov     r13, [rbx+30h]
.text:0000000000003FAE                 mov     r12, [rbx+28h]
.text:0000000000003FB2                 mov     [rsp+58h+var_48], r9
.text:0000000000003FB7                 mov     r15, [rbx+20h]
.text:0000000000003FBB                 mov     r14, [rbx+18h]
.text:0000000000003FBF                 mov     [rsp+58h+var_58], rax
.text:0000000000003FC3                 mov     [rsp+58h+var_50], r8
.text:0000000000003FC8                 mov     rbx, [rbx]
.text:0000000000003FCB                 call    _dcgettext
.text:0000000000003FD0                 sub     rsp, 8
.text:0000000000003FD4
.text:0000000000003FD4 loc_3FD4:                               ; CODE XREF: version_etc_arn+1B0↓j
.text:0000000000003FD4                 mov     r9, [rsp+60h+var_48]
.text:0000000000003FD9                 mov     rdx, rax
.text:0000000000003FDC                 mov     rcx, rbx
.text:0000000000003FDF                 mov     esi, 1
.text:0000000000003FE4                 mov     rdi, rbp
.text:0000000000003FE7                 xor     eax, eax
.text:0000000000003FE9                 push    r9
.text:0000000000003FEB                 push    r13
.text:0000000000003FED                 push    r12
.text:0000000000003FEF                 push    r15
.text:0000000000003FF1                 push    r14
.text:0000000000003FF3                 mov     r9, [rsp+88h+var_58]
.text:0000000000003FF8                 mov     r8, [rsp+88h+var_50]
.text:0000000000003FFD                 call    ___fprintf_chk
.text:0000000000004002                 add     rsp, 30h
.text:0000000000004006
.text:0000000000004006 loc_4006:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004006                                         ; DATA XREF: .rodata:jpt_3F84↓o
.text:0000000000004006                 add     rsp, 28h        ; jumptable 0000000000003F84 case 0
.text:000000000000400A                 pop     rbx
.text:000000000000400B                 pop     rbp
.text:000000000000400C                 pop     r12
.text:000000000000400E                 pop     r13
.text:0000000000004010                 pop     r14
.text:0000000000004012                 pop     r15
.text:0000000000004014                 retn
.text:0000000000004014 ; ---------------------------------------------------------------------------
.text:0000000000004015                 align 8
.text:0000000000004018
.text:0000000000004018 loc_4018:                               ; CODE XREF: version_etc_arn+1A↑j
.text:0000000000004018                 mov     r8, rcx
.text:000000000000401B                 mov     rcx, rdx
.text:000000000000401E                 lea     rdx, aSS_0      ; "%s %s\n"
.text:0000000000004025                 mov     esi, 1
.text:000000000000402A                 xor     eax, eax
.text:000000000000402C                 call    ___fprintf_chk
.text:0000000000004031                 jmp     loc_3F1C
.text:0000000000004031 ; ---------------------------------------------------------------------------
.text:0000000000004036                 align 20h
.text:0000000000004040
.text:0000000000004040 loc_4040:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004040                                         ; DATA XREF: .rodata:jpt_3F84↓o
.text:0000000000004040                 mov     r10, [rbx+40h]  ; jumptable 0000000000003F84 case 9
.text:0000000000004044                 mov     r9, [rbx+38h]
.text:0000000000004048                 lea     rsi, aWrittenBySSSSS_0 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000404F                 mov     rax, [rbx+10h]
.text:0000000000004053                 mov     r8, [rbx+8]
.text:0000000000004057                 mov     edx, 5          ; category
.text:000000000000405C                 mov     r13, [rbx+30h]
.text:0000000000004060                 mov     r12, [rbx+28h]
.text:0000000000004064                 mov     r15, [rbx+20h]
.text:0000000000004068                 mov     r14, [rbx+18h]
.text:000000000000406C                 mov     rbx, [rbx]
.text:000000000000406F                 mov     [rsp+58h+var_40], r10
.text:0000000000004074                 mov     [rsp+58h+var_48], r9
.text:0000000000004079                 mov     [rsp+58h+var_58], rax
.text:000000000000407D                 mov     [rsp+58h+var_50], r8
.text:0000000000004082
.text:0000000000004082 loc_4082:                               ; CODE XREF: version_etc_arn+412↓j
.text:0000000000004082                 xor     edi, edi        ; domainname
.text:0000000000004084                 call    _dcgettext
.text:0000000000004089                 mov     r10, [rsp+58h+var_40]
.text:000000000000408E                 push    r10
.text:0000000000004090                 jmp     loc_3FD4
.text:0000000000004090 ; ---------------------------------------------------------------------------
.text:0000000000004095                 align 8
.text:0000000000004098
.text:0000000000004098 loc_4098:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004098                                         ; DATA XREF: .rodata:jpt_3F84↓o
.text:0000000000004098                 mov     rbx, [rbx]      ; jumptable 0000000000003F84 case 1
.text:000000000000409B                 lea     rsi, aWrittenByS ; "Written by %s.\n"
.text:00000000000040A2                 mov     edx, 5          ; category
.text:00000000000040A7                 xor     edi, edi        ; domainname
.text:00000000000040A9                 call    _dcgettext
.text:00000000000040AE                 add     rsp, 28h
.text:00000000000040B2                 mov     rcx, rbx
.text:00000000000040B5                 mov     rdi, rbp
.text:00000000000040B8                 pop     rbx
.text:00000000000040B9                 pop     rbp
.text:00000000000040BA                 pop     r12
.text:00000000000040BC                 pop     r13
.text:00000000000040BE                 pop     r14
.text:00000000000040C0                 pop     r15
.text:00000000000040C2                 mov     rdx, rax
.text:00000000000040C5                 mov     esi, 1
.text:00000000000040CA                 xor     eax, eax
.text:00000000000040CC                 jmp     ___fprintf_chk
.text:00000000000040CC ; ---------------------------------------------------------------------------
.text:00000000000040D1                 align 8
.text:00000000000040D8
.text:00000000000040D8 loc_40D8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000040D8                                         ; DATA XREF: .rodata:jpt_3F84↓o
.text:00000000000040D8                 mov     r12, [rbx+8]    ; jumptable 0000000000003F84 case 2
.text:00000000000040DC                 lea     rsi, aWrittenBySAndS ; "Written by %s and %s.\n"
.text:00000000000040E3                 mov     rbx, [rbx]
.text:00000000000040E6                 mov     edx, 5          ; category
.text:00000000000040EB                 xor     edi, edi        ; domainname
.text:00000000000040ED                 call    _dcgettext
.text:00000000000040F2                 add     rsp, 28h
.text:00000000000040F6                 mov     r8, r12
.text:00000000000040F9                 mov     rcx, rbx
.text:00000000000040FC                 mov     rdi, rbp
.text:00000000000040FF                 mov     rdx, rax
.text:0000000000004102                 mov     esi, 1
.text:0000000000004107                 pop     rbx
.text:0000000000004108                 pop     rbp
.text:0000000000004109                 pop     r12
.text:000000000000410B                 pop     r13
.text:000000000000410D                 pop     r14
.text:000000000000410F                 pop     r15
.text:0000000000004111                 xor     eax, eax
.text:0000000000004113                 jmp     ___fprintf_chk
.text:0000000000004113 ; ---------------------------------------------------------------------------
.text:0000000000004118                 align 20h
.text:0000000000004120
.text:0000000000004120 loc_4120:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004120                                         ; DATA XREF: .rodata:jpt_3F84↓o
.text:0000000000004120                 mov     r13, [rbx+10h]  ; jumptable 0000000000003F84 case 3
.text:0000000000004124                 mov     r12, [rbx+8]
.text:0000000000004128                 lea     rsi, aWrittenBySSAnd ; "Written by %s, %s, and %s.\n"
.text:000000000000412F                 mov     rbx, [rbx]
.text:0000000000004132                 mov     edx, 5          ; category
.text:0000000000004137                 xor     edi, edi        ; domainname
.text:0000000000004139                 call    _dcgettext
.text:000000000000413E                 add     rsp, 28h
.text:0000000000004142                 mov     r9, r13
.text:0000000000004145                 mov     r8, r12
.text:0000000000004148                 mov     rcx, rbx
.text:000000000000414B                 mov     rdi, rbp
.text:000000000000414E                 mov     rdx, rax
.text:0000000000004151                 pop     rbx
.text:0000000000004152                 pop     rbp
.text:0000000000004153                 pop     r12
.text:0000000000004155                 pop     r13
.text:0000000000004157                 pop     r14
.text:0000000000004159                 pop     r15
.text:000000000000415B                 mov     esi, 1
.text:0000000000004160                 xor     eax, eax
.text:0000000000004162                 jmp     ___fprintf_chk
.text:0000000000004162 ; ---------------------------------------------------------------------------
.text:0000000000004167                 align 10h
.text:0000000000004170
.text:0000000000004170 loc_4170:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004170                                         ; DATA XREF: .rodata:jpt_3F84↓o
.text:0000000000004170                 lea     rsi, aWrittenBySSSAn ; jumptable 0000000000003F84 case 4
.text:0000000000004177                 mov     edx, 5          ; category
.text:000000000000417C                 xor     edi, edi        ; domainname
.text:000000000000417E                 mov     r14, [rbx+18h]
.text:0000000000004182                 mov     r13, [rbx+10h]
.text:0000000000004186                 mov     r12, [rbx+8]
.text:000000000000418A                 mov     rbx, [rbx]
.text:000000000000418D                 call    _dcgettext
.text:0000000000004192                 sub     rsp, 8
.text:0000000000004196
.text:0000000000004196 loc_4196:                               ; CODE XREF: version_etc_arn+310↓j
.text:0000000000004196                 push    r14
.text:0000000000004198                 mov     rdx, rax
.text:000000000000419B                 mov     r9, r13
.text:000000000000419E                 mov     r8, r12
.text:00000000000041A1                 mov     rcx, rbx
.text:00000000000041A4                 mov     rdi, rbp
.text:00000000000041A7                 mov     esi, 1
.text:00000000000041AC                 xor     eax, eax
.text:00000000000041AE                 call    ___fprintf_chk
.text:00000000000041B3                 pop     rax
.text:00000000000041B4                 pop     rdx
.text:00000000000041B5                 add     rsp, 28h
.text:00000000000041B9                 pop     rbx
.text:00000000000041BA                 pop     rbp
.text:00000000000041BB                 pop     r12
.text:00000000000041BD                 pop     r13
.text:00000000000041BF                 pop     r14
.text:00000000000041C1                 pop     r15
.text:00000000000041C3                 retn
.text:00000000000041C3 ; ---------------------------------------------------------------------------
.text:00000000000041C4                 align 8
.text:00000000000041C8
.text:00000000000041C8 loc_41C8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000041C8                                         ; DATA XREF: .rodata:jpt_3F84↓o
.text:00000000000041C8                 mov     r15, [rbx+20h]  ; jumptable 0000000000003F84 case 5
.text:00000000000041CC                 lea     rsi, aWrittenBySSSSA ; "Written by %s, %s, %s,\n%s, and %s.\n"
.text:00000000000041D3                 mov     edx, 5          ; category
.text:00000000000041D8                 xor     edi, edi        ; domainname
.text:00000000000041DA                 mov     r14, [rbx+18h]
.text:00000000000041DE                 mov     r13, [rbx+10h]
.text:00000000000041E2                 mov     r12, [rbx+8]
.text:00000000000041E6                 mov     rbx, [rbx]
.text:00000000000041E9                 call    _dcgettext
.text:00000000000041EE                 push    r15
.text:00000000000041F0                 jmp     short loc_4196
.text:00000000000041F0 ; ---------------------------------------------------------------------------
.text:00000000000041F2                 align 8
.text:00000000000041F8
.text:00000000000041F8 loc_41F8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000041F8                                         ; DATA XREF: .rodata:jpt_3F84↓o
.text:00000000000041F8                 mov     r8, [rbx+8]     ; jumptable 0000000000003F84 case 6
.text:00000000000041FC                 mov     r12, [rbx+28h]
.text:0000000000004200                 lea     rsi, aWrittenBySSSSS_1 ; "Written by %s, %s, %s,\n%s, %s, and %s."...
.text:0000000000004207                 mov     r15, [rbx+20h]
.text:000000000000420B                 mov     r14, [rbx+18h]
.text:000000000000420F                 mov     edx, 5          ; category
.text:0000000000004214                 mov     r13, [rbx+10h]
.text:0000000000004218                 xor     edi, edi        ; domainname
.text:000000000000421A                 mov     rbx, [rbx]
.text:000000000000421D                 mov     [rsp+58h+var_58], r8
.text:0000000000004221                 call    _dcgettext
.text:0000000000004226                 sub     rsp, 8
.text:000000000000422A                 mov     r9, r13
.text:000000000000422D                 push    r12
.text:000000000000422F                 push    r15
.text:0000000000004231                 push    r14
.text:0000000000004233
.text:0000000000004233 loc_4233:                               ; CODE XREF: version_etc_arn+3C4↓j
.text:0000000000004233                 mov     r8, [rsp+78h+var_58]
.text:0000000000004238                 mov     rcx, rbx
.text:000000000000423B                 mov     rdx, rax
.text:000000000000423E                 mov     rdi, rbp
.text:0000000000004241                 mov     esi, 1
.text:0000000000004246                 xor     eax, eax
.text:0000000000004248                 call    ___fprintf_chk
.text:000000000000424D                 add     rsp, 20h
.text:0000000000004251                 add     rsp, 28h
.text:0000000000004255                 pop     rbx
.text:0000000000004256                 pop     rbp
.text:0000000000004257                 pop     r12
.text:0000000000004259                 pop     r13
.text:000000000000425B                 pop     r14
.text:000000000000425D                 pop     r15
.text:000000000000425F                 retn
.text:0000000000004260 ; ---------------------------------------------------------------------------
.text:0000000000004260
.text:0000000000004260 loc_4260:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004260                                         ; DATA XREF: .rodata:jpt_3F84↓o
.text:0000000000004260                 mov     r9, [rbx+10h]   ; jumptable 0000000000003F84 case 7
.text:0000000000004264                 mov     r13, [rbx+30h]
.text:0000000000004268                 lea     rsi, aWrittenBySSSSS_2 ; "Written by %s, %s, %s,\n%s, %s, %s, and"...
.text:000000000000426F                 mov     r12, [rbx+28h]
.text:0000000000004273                 mov     r15, [rbx+20h]
.text:0000000000004277                 mov     edx, 5          ; category
.text:000000000000427C                 mov     r14, [rbx+18h]
.text:0000000000004280                 mov     r8, [rbx+8]
.text:0000000000004284                 xor     edi, edi        ; domainname
.text:0000000000004286                 mov     [rsp+58h+var_50], r9
.text:000000000000428B                 mov     rbx, [rbx]
.text:000000000000428E                 mov     [rsp+58h+var_58], r8
.text:0000000000004292                 call    _dcgettext
.text:0000000000004297                 push    r13
.text:0000000000004299                 push    r12
.text:000000000000429B                 push    r15
.text:000000000000429D                 push    r14
.text:000000000000429F                 mov     r9, [rsp+78h+var_50]
.text:00000000000042A4                 jmp     short loc_4233
.text:00000000000042A4 ; ---------------------------------------------------------------------------
.text:00000000000042A6                 align 10h
.text:00000000000042B0
.text:00000000000042B0 def_3F84:                               ; CODE XREF: version_etc_arn+90↑j
.text:00000000000042B0                 mov     r10, [rbx+40h]  ; jumptable 0000000000003F84 default case
.text:00000000000042B4                 mov     r9, [rbx+38h]
.text:00000000000042B8                 mov     edx, 5
.text:00000000000042BD                 mov     rax, [rbx+10h]
.text:00000000000042C1                 mov     r8, [rbx+8]
.text:00000000000042C5                 lea     rsi, aWrittenBySSSSS_3 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:00000000000042CC                 mov     r13, [rbx+30h]
.text:00000000000042D0                 mov     r12, [rbx+28h]
.text:00000000000042D4                 mov     r15, [rbx+20h]
.text:00000000000042D8                 mov     r14, [rbx+18h]
.text:00000000000042DC                 mov     [rsp+58h+var_40], r10
.text:00000000000042E1                 mov     [rsp+58h+var_48], r9
.text:00000000000042E6                 mov     [rsp+58h+var_58], rax
.text:00000000000042EA                 mov     [rsp+58h+var_50], r8
.text:00000000000042EF                 mov     rbx, [rbx]
.text:00000000000042F2                 jmp     loc_4082
.text:00000000000042F2 ; } // starts at 3EE0
.text:00000000000042F2 version_etc_arn endp
.text:00000000000042F2
.text:00000000000042F2 ; ---------------------------------------------------------------------------
.text:00000000000042F7                 align 20h
.text:0000000000004300
.text:0000000000004300 ; =============== S U B R O U T I N E =======================================
.text:0000000000004300
.text:0000000000004300 ; Attributes: info_from_lumina
.text:0000000000004300
.text:0000000000004300 ; void __fastcall version_etc_ar(FILE *stream, const char *command_name, const char *package, const char *version, const char *const *authors)
.text:0000000000004300                 public version_etc_ar
.text:0000000000004300 version_etc_ar  proc near
.text:0000000000004300 ; __unwind {
.text:0000000000004300                 xor     r9d, r9d
.text:0000000000004303                 cmp     qword ptr [r8], 0
.text:0000000000004307                 jz      short loc_431B
.text:0000000000004309                 nop     dword ptr [rax+00000000h]
.text:0000000000004310
.text:0000000000004310 loc_4310:                               ; CODE XREF: version_etc_ar+19↓j
.text:0000000000004310                 add     r9, 1
.text:0000000000004314                 cmp     qword ptr [r8+r9*8], 0
.text:0000000000004319                 jnz     short loc_4310
.text:000000000000431B
.text:000000000000431B loc_431B:                               ; CODE XREF: version_etc_ar+7↑j
.text:000000000000431B                 jmp     version_etc_arn
.text:000000000000431B ; } // starts at 4300
.text:000000000000431B version_etc_ar  endp
.text:000000000000431B
.text:0000000000004320
.text:0000000000004320 ; =============== S U B R O U T I N E =======================================
.text:0000000000004320
.text:0000000000004320 ; Attributes: info_from_lumina
.text:0000000000004320
.text:0000000000004320 ; void __fastcall version_etc_va(FILE *stream, const char *command_name, const char *package, const char *version, __va_list_tag *authors)
.text:0000000000004320                 public version_etc_va
.text:0000000000004320 version_etc_va  proc near
.text:0000000000004320
.text:0000000000004320 authtab         = qword ptr -68h
.text:0000000000004320 var_10          = qword ptr -10h
.text:0000000000004320
.text:0000000000004320 ; __unwind {
.text:0000000000004320                 sub     rsp, 68h
.text:0000000000004324                 mov     r10, r8
.text:0000000000004327                 xor     r9d, r9d
.text:000000000000432A                 mov     rax, fs:28h
.text:0000000000004333                 mov     [rsp+68h+var_10], rax
.text:0000000000004338                 xor     eax, eax
.text:000000000000433A                 mov     r8, rsp
.text:000000000000433D                 nop     dword ptr [rax]
.text:0000000000004340
.text:0000000000004340 loc_4340:                               ; CODE XREF: version_etc_va+49↓j
.text:0000000000004340                 mov     eax, [r10]
.text:0000000000004343                 cmp     eax, 2Fh ; '/'
.text:0000000000004346                 ja      short loc_438A
.text:0000000000004348                 mov     r11d, eax
.text:000000000000434B                 add     r11, [r10+10h]
.text:000000000000434F                 add     eax, 8
.text:0000000000004352                 mov     [r10], eax
.text:0000000000004355
.text:0000000000004355 loc_4355:                               ; CODE XREF: version_etc_va+76↓j
.text:0000000000004355                 mov     rax, [r11]
.text:0000000000004358                 test    rax, rax
.text:000000000000435B                 mov     [r8+r9*8], rax
.text:000000000000435F                 jz      short loc_436B
.text:0000000000004361                 add     r9, 1
.text:0000000000004365                 cmp     r9, 0Ah
.text:0000000000004369                 jnz     short loc_4340
.text:000000000000436B
.text:000000000000436B loc_436B:                               ; CODE XREF: version_etc_va+3F↑j
.text:000000000000436B                 call    version_etc_arn
.text:0000000000004370                 mov     rax, [rsp+68h+var_10]
.text:0000000000004375                 xor     rax, fs:28h
.text:000000000000437E                 jnz     short loc_4385
.text:0000000000004380                 add     rsp, 68h
.text:0000000000004384                 retn
.text:0000000000004385 ; ---------------------------------------------------------------------------
.text:0000000000004385
.text:0000000000004385 loc_4385:                               ; CODE XREF: version_etc_va+5E↑j
.text:0000000000004385                 call    ___stack_chk_fail
.text:000000000000438A ; ---------------------------------------------------------------------------
.text:000000000000438A
.text:000000000000438A loc_438A:                               ; CODE XREF: version_etc_va+26↑j
.text:000000000000438A                 mov     r11, [r10+8]
.text:000000000000438E                 lea     rax, [r11+8]
.text:0000000000004392                 mov     [r10+8], rax
.text:0000000000004396                 jmp     short loc_4355
.text:0000000000004396 ; } // starts at 4320
.text:0000000000004396 version_etc_va  endp
.text:0000000000004396
.text:0000000000004396 ; ---------------------------------------------------------------------------
.text:0000000000004398                 align 20h
.text:00000000000043A0
.text:00000000000043A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000043A0
.text:00000000000043A0 ; Attributes: info_from_lumina
.text:00000000000043A0
.text:00000000000043A0 ; void version_etc(FILE *stream, const char *command_name, const char *package, const char *version, ...)
.text:00000000000043A0                 public version_etc
.text:00000000000043A0 version_etc     proc near               ; CODE XREF: main+D3↑p
.text:00000000000043A0
.text:00000000000043A0 var_C0          = dword ptr -0C0h
.text:00000000000043A0 var_B8          = qword ptr -0B8h
.text:00000000000043A0 var_B0          = qword ptr -0B0h
.text:00000000000043A0 var_A8          = byte ptr -0A8h
.text:00000000000043A0 var_50          = qword ptr -50h
.text:00000000000043A0 var_48          = byte ptr -48h
.text:00000000000043A0 var_28          = qword ptr -28h
.text:00000000000043A0 var_20          = qword ptr -20h
.text:00000000000043A0 arg_0           = byte ptr  8
.text:00000000000043A0
.text:00000000000043A0 ; __unwind {
.text:00000000000043A0                 push    rbp
.text:00000000000043A1                 push    rbx
.text:00000000000043A2                 mov     r10d, 20h ; ' '
.text:00000000000043A8                 xor     r11d, r11d
.text:00000000000043AB                 sub     rsp, 0B8h
.text:00000000000043B2                 mov     rax, fs:28h
.text:00000000000043BB                 mov     [rsp+0C8h+var_50], rax
.text:00000000000043C0                 xor     eax, eax
.text:00000000000043C2                 lea     rax, [rsp+0C8h+arg_0]
.text:00000000000043CA                 mov     [rsp+0C8h+var_28], r8
.text:00000000000043D2                 lea     rbx, [rsp+0C8h+arg_0]
.text:00000000000043DA                 lea     r8, [rsp+0C8h+var_A8]
.text:00000000000043DF                 mov     [rsp+0C8h+var_20], r9
.text:00000000000043E7                 mov     [rsp+0C8h+var_C0], 20h ; ' '
.text:00000000000043EF                 mov     [rsp+0C8h+var_B8], rax
.text:00000000000043F4                 lea     rax, [rsp+0C8h+var_48]
.text:00000000000043FC                 xor     r9d, r9d
.text:00000000000043FF                 mov     [rsp+0C8h+var_B0], rax
.text:0000000000004404                 mov     rbp, rax
.text:0000000000004407                 nop     word ptr [rax+rax+00000000h]
.text:0000000000004410
.text:0000000000004410 loc_4410:                               ; CODE XREF: version_etc+9A↓j
.text:0000000000004410                 cmp     r10d, 2Fh ; '/'
.text:0000000000004414                 ja      short loc_446C
.text:0000000000004416                 mov     eax, r10d
.text:0000000000004419                 mov     r11d, 1
.text:000000000000441F                 add     r10d, 8
.text:0000000000004423                 add     rax, rbp
.text:0000000000004426
.text:0000000000004426 loc_4426:                               ; CODE XREF: version_etc+D3↓j
.text:0000000000004426                 mov     rax, [rax]
.text:0000000000004429                 test    rax, rax
.text:000000000000442C                 mov     [r8+r9*8], rax
.text:0000000000004430                 jz      short loc_443C
.text:0000000000004432                 add     r9, 1
.text:0000000000004436                 cmp     r9, 0Ah
.text:000000000000443A                 jnz     short loc_4410
.text:000000000000443C
.text:000000000000443C loc_443C:                               ; CODE XREF: version_etc+90↑j
.text:000000000000443C                 test    r11b, r11b
.text:000000000000443F                 jnz     short loc_4465
.text:0000000000004441
.text:0000000000004441 loc_4441:                               ; CODE XREF: version_etc+CA↓j
.text:0000000000004441                 call    version_etc_arn
.text:0000000000004446                 mov     rax, [rsp+0C8h+var_50]
.text:000000000000444B                 xor     rax, fs:28h
.text:0000000000004454                 jnz     short loc_4460
.text:0000000000004456                 add     rsp, 0B8h
.text:000000000000445D                 pop     rbx
.text:000000000000445E                 pop     rbp
.text:000000000000445F                 retn
.text:0000000000004460 ; ---------------------------------------------------------------------------
.text:0000000000004460
.text:0000000000004460 loc_4460:                               ; CODE XREF: version_etc+B4↑j
.text:0000000000004460                 call    ___stack_chk_fail
.text:0000000000004465 ; ---------------------------------------------------------------------------
.text:0000000000004465
.text:0000000000004465 loc_4465:                               ; CODE XREF: version_etc+9F↑j
.text:0000000000004465                 mov     [rsp+0C8h+var_C0], r10d
.text:000000000000446A                 jmp     short loc_4441
.text:000000000000446C ; ---------------------------------------------------------------------------
.text:000000000000446C
.text:000000000000446C loc_446C:                               ; CODE XREF: version_etc+74↑j
.text:000000000000446C                 mov     rax, rbx
.text:000000000000446F                 add     rbx, 8
.text:0000000000004473                 jmp     short loc_4426
.text:0000000000004473 ; } // starts at 43A0
.text:0000000000004473 version_etc     endp
.text:0000000000004473
.text:0000000000004473 ; ---------------------------------------------------------------------------
.text:0000000000004475                 align 20h
.text:0000000000004480
.text:0000000000004480 ; =============== S U B R O U T I N E =======================================
.text:0000000000004480
.text:0000000000004480 ; Attributes: info_from_lumina
.text:0000000000004480
.text:0000000000004480 ; void __cdecl emit_bug_reporting_address()
.text:0000000000004480                 public emit_bug_reporting_address
.text:0000000000004480 emit_bug_reporting_address proc near
.text:0000000000004480 ; __unwind {
.text:0000000000004480                 push    rbx
.text:0000000000004481                 lea     rsi, aReportBugsToS ; "\nReport bugs to: %s\n"
.text:0000000000004488                 mov     edx, 5          ; category
.text:000000000000448D                 xor     edi, edi        ; domainname
.text:000000000000448F                 call    _dcgettext
.text:0000000000004494                 lea     rdx, aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:000000000000449B                 mov     rsi, rax
.text:000000000000449E                 mov     edi, 1
.text:00000000000044A3                 xor     eax, eax
.text:00000000000044A5                 call    ___printf_chk
.text:00000000000044AA                 lea     rsi, aSHomePageS ; "%s home page: <%s>\n"
.text:00000000000044B1                 mov     edx, 5          ; category
.text:00000000000044B6                 xor     edi, edi        ; domainname
.text:00000000000044B8                 call    _dcgettext
.text:00000000000044BD                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000044C4                 lea     rdx, unk_6D60
.text:00000000000044CB                 mov     rsi, rax
.text:00000000000044CE                 mov     edi, 1
.text:00000000000044D3                 xor     eax, eax
.text:00000000000044D5                 call    ___printf_chk
.text:00000000000044DA                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000044E1                 lea     rsi, aGeneralHelpUsi ; "General help using GNU software: <https"...
.text:00000000000044E8                 xor     edi, edi        ; domainname
.text:00000000000044EA                 mov     edx, 5          ; category
.text:00000000000044EF                 call    _dcgettext
.text:00000000000044F4                 mov     rsi, rbx        ; stream
.text:00000000000044F7                 mov     rdi, rax        ; s
.text:00000000000044FA                 pop     rbx
.text:00000000000044FB                 jmp     _fputs_unlocked
.text:00000000000044FB ; } // starts at 4480
.text:00000000000044FB emit_bug_reporting_address endp
.text:00000000000044FB
.text:0000000000004500
.text:0000000000004500 ; =============== S U B R O U T I N E =======================================
.text:0000000000004500
.text:0000000000004500
.text:0000000000004500                 public xmalloc
.text:0000000000004500 xmalloc         proc near               ; CODE XREF: quotearg_n_options+127↑p
.text:0000000000004500                                         ; quotearg_alloc_mem+81↑p ...
.text:0000000000004500 ; __unwind {
.text:0000000000004500                 push    rbx
.text:0000000000004501                 mov     rbx, rdi
.text:0000000000004504                 call    _malloc
.text:0000000000004509                 test    rax, rax
.text:000000000000450C                 jnz     short loc_4513
.text:000000000000450E                 test    rbx, rbx
.text:0000000000004511                 jnz     short loc_4515
.text:0000000000004513
.text:0000000000004513 loc_4513:                               ; CODE XREF: xmalloc+C↑j
.text:0000000000004513                 pop     rbx
.text:0000000000004514                 retn
.text:0000000000004515 ; ---------------------------------------------------------------------------
.text:0000000000004515
.text:0000000000004515 loc_4515:                               ; CODE XREF: xmalloc+11↑j
.text:0000000000004515                 call    xalloc_die
.text:0000000000004515 ; } // starts at 4500
.text:0000000000004515 xmalloc         endp
.text:0000000000004515
.text:0000000000004515 ; ---------------------------------------------------------------------------
.text:000000000000451A                 align 20h
.text:0000000000004520
.text:0000000000004520 ; =============== S U B R O U T I N E =======================================
.text:0000000000004520
.text:0000000000004520 ; Attributes: info_from_lumina
.text:0000000000004520
.text:0000000000004520 ; void *__fastcall xnmalloc(size_t n, size_t s)
.text:0000000000004520                 public xnmalloc
.text:0000000000004520 xnmalloc        proc near
.text:0000000000004520 ; __unwind {
.text:0000000000004520                 mov     rax, rdi
.text:0000000000004523                 mul     rsi
.text:0000000000004526                 mov     rdi, rax
.text:0000000000004529                 seto    al
.text:000000000000452C                 test    rdi, rdi
.text:000000000000452F                 js      short loc_453B
.text:0000000000004531                 movzx   eax, al
.text:0000000000004534                 test    rax, rax
.text:0000000000004537                 jnz     short loc_453B
.text:0000000000004539                 jmp     short xmalloc
.text:000000000000453B ; ---------------------------------------------------------------------------
.text:000000000000453B
.text:000000000000453B loc_453B:                               ; CODE XREF: xnmalloc+F↑j
.text:000000000000453B                                         ; xnmalloc+17↑j
.text:000000000000453B                 sub     rsp, 8
.text:000000000000453F                 call    xalloc_die
.text:000000000000453F ; } // starts at 4520
.text:000000000000453F xnmalloc        endp
.text:000000000000453F
.text:000000000000453F ; ---------------------------------------------------------------------------
.text:0000000000004544                 align 10h
.text:0000000000004550
.text:0000000000004550 ; =============== S U B R O U T I N E =======================================
.text:0000000000004550
.text:0000000000004550
.text:0000000000004550                 public xcharalloc
.text:0000000000004550 xcharalloc      proc near
.text:0000000000004550 ; __unwind {
.text:0000000000004550                 jmp     short xmalloc
.text:0000000000004550 ; } // starts at 4550
.text:0000000000004550 xcharalloc      endp
.text:0000000000004550
.text:0000000000004550 ; ---------------------------------------------------------------------------
.text:0000000000004552                 align 20h
.text:0000000000004560
.text:0000000000004560 ; =============== S U B R O U T I N E =======================================
.text:0000000000004560
.text:0000000000004560 ; Attributes: info_from_lumina
.text:0000000000004560
.text:0000000000004560 ; void *__fastcall xrealloc(void *p, size_t n)
.text:0000000000004560                 public xrealloc
.text:0000000000004560 xrealloc        proc near               ; CODE XREF: quotearg_n_options+6E↑p
.text:0000000000004560                                         ; quotearg_n_options+182↑p ...
.text:0000000000004560 ; __unwind {
.text:0000000000004560                 test    rsi, rsi
.text:0000000000004563                 push    rbx
.text:0000000000004564                 mov     rbx, rsi
.text:0000000000004567                 jnz     short loc_456E
.text:0000000000004569                 test    rdi, rdi
.text:000000000000456C                 jnz     short loc_4588
.text:000000000000456E
.text:000000000000456E loc_456E:                               ; CODE XREF: xrealloc+7↑j
.text:000000000000456E                 mov     rsi, rbx        ; size
.text:0000000000004571                 call    _realloc
.text:0000000000004576                 test    rax, rax
.text:0000000000004579                 jnz     short loc_4580
.text:000000000000457B                 test    rbx, rbx
.text:000000000000457E                 jnz     short loc_4591
.text:0000000000004580
.text:0000000000004580 loc_4580:                               ; CODE XREF: xrealloc+19↑j
.text:0000000000004580                 pop     rbx
.text:0000000000004581                 retn
.text:0000000000004581 ; ---------------------------------------------------------------------------
.text:0000000000004582                 align 8
.text:0000000000004588
.text:0000000000004588 loc_4588:                               ; CODE XREF: xrealloc+C↑j
.text:0000000000004588                 call    _free
.text:000000000000458D                 xor     eax, eax
.text:000000000000458F                 pop     rbx
.text:0000000000004590                 retn
.text:0000000000004591 ; ---------------------------------------------------------------------------
.text:0000000000004591
.text:0000000000004591 loc_4591:                               ; CODE XREF: xrealloc+1E↑j
.text:0000000000004591                 call    xalloc_die
.text:0000000000004591 ; } // starts at 4560
.text:0000000000004591 xrealloc        endp
.text:0000000000004591
.text:0000000000004591 ; ---------------------------------------------------------------------------
.text:0000000000004596                 align 20h
.text:00000000000045A0
.text:00000000000045A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000045A0
.text:00000000000045A0 ; Attributes: info_from_lumina
.text:00000000000045A0
.text:00000000000045A0 ; void *__fastcall xnrealloc(void *p, size_t n, size_t s)
.text:00000000000045A0                 public xnrealloc
.text:00000000000045A0 xnrealloc       proc near
.text:00000000000045A0 ; __unwind {
.text:00000000000045A0                 mov     rax, rsi
.text:00000000000045A3                 mul     rdx
.text:00000000000045A6                 mov     rsi, rax
.text:00000000000045A9                 seto    al
.text:00000000000045AC                 test    rsi, rsi
.text:00000000000045AF                 js      short loc_45BB
.text:00000000000045B1                 movzx   eax, al
.text:00000000000045B4                 test    rax, rax
.text:00000000000045B7                 jnz     short loc_45BB
.text:00000000000045B9                 jmp     short xrealloc
.text:00000000000045BB ; ---------------------------------------------------------------------------
.text:00000000000045BB
.text:00000000000045BB loc_45BB:                               ; CODE XREF: xnrealloc+F↑j
.text:00000000000045BB                                         ; xnrealloc+17↑j
.text:00000000000045BB                 sub     rsp, 8
.text:00000000000045BF                 call    xalloc_die
.text:00000000000045BF ; } // starts at 45A0
.text:00000000000045BF xnrealloc       endp
.text:00000000000045BF
.text:00000000000045BF ; ---------------------------------------------------------------------------
.text:00000000000045C4                 align 10h
.text:00000000000045D0
.text:00000000000045D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000045D0
.text:00000000000045D0 ; Attributes: info_from_lumina
.text:00000000000045D0
.text:00000000000045D0 ; void *__fastcall x2nrealloc(void *p, size_t *pn, size_t s)
.text:00000000000045D0                 public x2nrealloc
.text:00000000000045D0 x2nrealloc      proc near
.text:00000000000045D0 ; __unwind {
.text:00000000000045D0                 test    rdi, rdi
.text:00000000000045D3                 mov     r9, rdx
.text:00000000000045D6                 mov     rcx, [rsi]
.text:00000000000045D9                 jz      short loc_4610
.text:00000000000045DB                 xor     edx, edx
.text:00000000000045DD                 mov     rax, 5555555555555554h
.text:00000000000045E7                 div     r9
.text:00000000000045EA                 cmp     rax, rcx
.text:00000000000045ED                 jbe     short loc_462B
.text:00000000000045EF                 mov     rax, rcx
.text:00000000000045F2                 shr     rax, 1
.text:00000000000045F5                 lea     rcx, [rax+rcx+1]
.text:00000000000045FA
.text:00000000000045FA loc_45FA:                               ; CODE XREF: x2nrealloc+59↓j
.text:00000000000045FA                 mov     [rsi], rcx
.text:00000000000045FD                 imul    rcx, r9
.text:0000000000004601                 mov     rsi, rcx
.text:0000000000004604                 jmp     xrealloc
.text:0000000000004604 ; ---------------------------------------------------------------------------
.text:0000000000004609                 align 10h
.text:0000000000004610
.text:0000000000004610 loc_4610:                               ; CODE XREF: x2nrealloc+9↑j
.text:0000000000004610                 test    rcx, rcx
.text:0000000000004613                 jz      short loc_4638
.text:0000000000004615
.text:0000000000004615 loc_4615:                               ; CODE XREF: x2nrealloc+80↓j
.text:0000000000004615                 mov     rax, rcx
.text:0000000000004618                 mul     r9
.text:000000000000461B                 seto    dl
.text:000000000000461E                 test    rax, rax
.text:0000000000004621                 movzx   edx, dl
.text:0000000000004624                 js      short loc_462B
.text:0000000000004626                 test    rdx, rdx
.text:0000000000004629                 jz      short loc_45FA
.text:000000000000462B
.text:000000000000462B loc_462B:                               ; CODE XREF: x2nrealloc+1D↑j
.text:000000000000462B                                         ; x2nrealloc+54↑j
.text:000000000000462B                 sub     rsp, 8
.text:000000000000462F                 call    xalloc_die
.text:000000000000462F ; ---------------------------------------------------------------------------
.text:0000000000004634                 align 8
.text:0000000000004638
.text:0000000000004638 loc_4638:                               ; CODE XREF: x2nrealloc+43↑j
.text:0000000000004638                 xor     edx, edx
.text:000000000000463A                 mov     eax, 80h
.text:000000000000463F                 xor     r8d, r8d
.text:0000000000004642                 div     r9
.text:0000000000004645                 test    rax, rax
.text:0000000000004648                 setz    r8b
.text:000000000000464C                 lea     rcx, [r8+rax]
.text:0000000000004650                 jmp     short loc_4615
.text:0000000000004650 ; } // starts at 45D0
.text:0000000000004650 x2nrealloc      endp
.text:0000000000004650
.text:0000000000004650 ; ---------------------------------------------------------------------------
.text:0000000000004652                 align 20h
.text:0000000000004660
.text:0000000000004660 ; =============== S U B R O U T I N E =======================================
.text:0000000000004660
.text:0000000000004660 ; Attributes: info_from_lumina
.text:0000000000004660
.text:0000000000004660 ; void *__fastcall x2realloc(void *p, size_t *pn)
.text:0000000000004660                 public x2realloc
.text:0000000000004660 x2realloc       proc near
.text:0000000000004660 ; __unwind {
.text:0000000000004660                 test    rdi, rdi
.text:0000000000004663                 mov     rax, [rsi]
.text:0000000000004666                 jz      short loc_4690
.text:0000000000004668                 mov     rdx, 5555555555555553h
.text:0000000000004672                 cmp     rax, rdx
.text:0000000000004675                 ja      short loc_46A1
.text:0000000000004677                 mov     rdx, rax
.text:000000000000467A                 shr     rdx, 1
.text:000000000000467D                 lea     rax, [rdx+rax+1]
.text:0000000000004682
.text:0000000000004682 loc_4682:                               ; CODE XREF: x2realloc+3F↓j
.text:0000000000004682                 mov     [rsi], rax
.text:0000000000004685                 mov     rsi, rax
.text:0000000000004688                 jmp     xrealloc
.text:0000000000004688 ; ---------------------------------------------------------------------------
.text:000000000000468D                 align 10h
.text:0000000000004690
.text:0000000000004690 loc_4690:                               ; CODE XREF: x2realloc+6↑j
.text:0000000000004690                 test    rax, rax
.text:0000000000004693                 mov     edx, 80h
.text:0000000000004698                 cmovz   rax, rdx
.text:000000000000469C                 test    rax, rax
.text:000000000000469F                 jns     short loc_4682
.text:00000000000046A1
.text:00000000000046A1 loc_46A1:                               ; CODE XREF: x2realloc+15↑j
.text:00000000000046A1                 sub     rsp, 8
.text:00000000000046A5                 call    xalloc_die
.text:00000000000046A5 ; } // starts at 4660
.text:00000000000046A5 x2realloc       endp
.text:00000000000046A5
.text:00000000000046A5 ; ---------------------------------------------------------------------------
.text:00000000000046AA                 align 10h
.text:00000000000046B0
.text:00000000000046B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000046B0
.text:00000000000046B0
.text:00000000000046B0 ; __int64 __fastcall xzalloc(size_t n)
.text:00000000000046B0                 public xzalloc
.text:00000000000046B0 xzalloc         proc near
.text:00000000000046B0 ; __unwind {
.text:00000000000046B0                 push    rbx
.text:00000000000046B1                 mov     rbx, rdi
.text:00000000000046B4                 call    xmalloc
.text:00000000000046B9                 mov     rdx, rbx        ; n
.text:00000000000046BC                 xor     esi, esi        ; c
.text:00000000000046BE                 mov     rdi, rax        ; s
.text:00000000000046C1                 pop     rbx
.text:00000000000046C2                 jmp     _memset
.text:00000000000046C2 ; } // starts at 46B0
.text:00000000000046C2 xzalloc         endp
.text:00000000000046C2
.text:00000000000046C2 ; ---------------------------------------------------------------------------
.text:00000000000046C7                 align 10h
.text:00000000000046D0
.text:00000000000046D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000046D0
.text:00000000000046D0 ; Attributes: info_from_lumina
.text:00000000000046D0
.text:00000000000046D0 ; void *__fastcall xcalloc(size_t n, size_t s)
.text:00000000000046D0                 public xcalloc
.text:00000000000046D0 xcalloc         proc near
.text:00000000000046D0 ; __unwind {
.text:00000000000046D0                 mov     rax, rdi
.text:00000000000046D3                 sub     rsp, 8
.text:00000000000046D7                 mul     rsi
.text:00000000000046DA                 seto    dl
.text:00000000000046DD                 test    rax, rax
.text:00000000000046E0                 js      short loc_46F9
.text:00000000000046E2                 movzx   edx, dl
.text:00000000000046E5                 test    rdx, rdx
.text:00000000000046E8                 jnz     short loc_46F9
.text:00000000000046EA                 call    _calloc
.text:00000000000046EF                 test    rax, rax
.text:00000000000046F2                 jz      short loc_46F9
.text:00000000000046F4                 add     rsp, 8
.text:00000000000046F8                 retn
.text:00000000000046F9 ; ---------------------------------------------------------------------------
.text:00000000000046F9
.text:00000000000046F9 loc_46F9:                               ; CODE XREF: xcalloc+10↑j
.text:00000000000046F9                                         ; xcalloc+18↑j ...
.text:00000000000046F9                 call    xalloc_die
.text:00000000000046F9 ; } // starts at 46D0
.text:00000000000046F9 xcalloc         endp
.text:00000000000046F9
.text:00000000000046F9 ; ---------------------------------------------------------------------------
.text:00000000000046FE                 align 20h
.text:0000000000004700
.text:0000000000004700 ; =============== S U B R O U T I N E =======================================
.text:0000000000004700
.text:0000000000004700 ; Attributes: info_from_lumina
.text:0000000000004700
.text:0000000000004700 ; void *__fastcall xmemdup(const void *p, size_t s)
.text:0000000000004700                 public xmemdup
.text:0000000000004700 xmemdup         proc near               ; CODE XREF: clone_quoting_options+28↑p
.text:0000000000004700                                         ; xstrdup+11↓j
.text:0000000000004700 ; __unwind {
.text:0000000000004700                 push    rbp
.text:0000000000004701                 push    rbx
.text:0000000000004702                 mov     rbp, rdi
.text:0000000000004705                 mov     rdi, rsi
.text:0000000000004708                 mov     rbx, rsi
.text:000000000000470B                 sub     rsp, 8
.text:000000000000470F                 call    xmalloc
.text:0000000000004714                 add     rsp, 8
.text:0000000000004718                 mov     rdx, rbx        ; n
.text:000000000000471B                 mov     rsi, rbp        ; src
.text:000000000000471E                 pop     rbx
.text:000000000000471F                 pop     rbp
.text:0000000000004720                 mov     rdi, rax        ; dest
.text:0000000000004723                 jmp     _memcpy
.text:0000000000004723 ; } // starts at 4700
.text:0000000000004723 xmemdup         endp
.text:0000000000004723
.text:0000000000004723 ; ---------------------------------------------------------------------------
.text:0000000000004728                 align 10h
.text:0000000000004730
.text:0000000000004730 ; =============== S U B R O U T I N E =======================================
.text:0000000000004730
.text:0000000000004730
.text:0000000000004730 ; __int64 __fastcall xstrdup(void *src)
.text:0000000000004730                 public xstrdup
.text:0000000000004730 xstrdup         proc near
.text:0000000000004730 ; __unwind {
.text:0000000000004730                 push    rbx
.text:0000000000004731                 mov     rbx, rdi
.text:0000000000004734                 call    _strlen
.text:0000000000004739                 mov     rdi, rbx        ; src
.text:000000000000473C                 lea     rsi, [rax+1]    ; n
.text:0000000000004740                 pop     rbx
.text:0000000000004741                 jmp     short xmemdup
.text:0000000000004741 ; } // starts at 4730
.text:0000000000004741 xstrdup         endp
.text:0000000000004741
.text:0000000000004741 ; ---------------------------------------------------------------------------
.text:0000000000004743                 align 10h
.text:0000000000004750
.text:0000000000004750 ; =============== S U B R O U T I N E =======================================
.text:0000000000004750
.text:0000000000004750 ; Attributes: noreturn info_from_lumina
.text:0000000000004750
.text:0000000000004750 ; void __cdecl xalloc_die()
.text:0000000000004750                 public xalloc_die
.text:0000000000004750 xalloc_die      proc near               ; CODE XREF: quotearg_n_options:loc_3726↑p
.text:0000000000004750                                         ; xmalloc:loc_4515↑p ...
.text:0000000000004750 ; __unwind {
.text:0000000000004750                 lea     rsi, aMemoryExhauste ; "memory exhausted"
.text:0000000000004757                 sub     rsp, 8
.text:000000000000475B                 mov     edx, 5          ; category
.text:0000000000004760                 xor     edi, edi        ; domainname
.text:0000000000004762                 call    _dcgettext
.text:0000000000004767                 mov     edi, cs:exit_failure ; status
.text:000000000000476D                 lea     rdx, msgid+14h  ; format
.text:0000000000004774                 mov     rcx, rax
.text:0000000000004777                 xor     esi, esi        ; errnum
.text:0000000000004779                 xor     eax, eax
.text:000000000000477B                 call    _error
.text:0000000000004780                 call    _abort
.text:0000000000004780 ; } // starts at 4750
.text:0000000000004780 xalloc_die      endp
.text:0000000000004780
.text:0000000000004780 ; ---------------------------------------------------------------------------
.text:0000000000004785                 align 10h
.text:0000000000004790
.text:0000000000004790 ; =============== S U B R O U T I N E =======================================
.text:0000000000004790
.text:0000000000004790 ; Attributes: info_from_lumina
.text:0000000000004790
.text:0000000000004790 ; size_t __fastcall rpl_mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
.text:0000000000004790                 public rpl_mbrtowc
.text:0000000000004790 rpl_mbrtowc     proc near               ; CODE XREF: quotearg_buffer_restyled+956↑p
.text:0000000000004790
.text:0000000000004790 pwc             = dword ptr -34h
.text:0000000000004790 var_30          = qword ptr -30h
.text:0000000000004790
.text:0000000000004790 ; __unwind {
.text:0000000000004790                 push    r13
.text:0000000000004792                 push    r12
.text:0000000000004794                 mov     r13, rsi
.text:0000000000004797                 push    rbp
.text:0000000000004798                 push    rbx
.text:0000000000004799                 mov     rbx, rdi
.text:000000000000479C                 mov     r12, rdx
.text:000000000000479F                 sub     rsp, 18h
.text:00000000000047A3                 mov     rax, fs:28h
.text:00000000000047AC                 mov     [rsp+38h+var_30], rax
.text:00000000000047B1                 xor     eax, eax
.text:00000000000047B3                 lea     rax, [rsp+38h+pwc]
.text:00000000000047B8                 test    rdi, rdi
.text:00000000000047BB                 cmovz   rbx, rax
.text:00000000000047BF                 mov     rdi, rbx        ; pwc
.text:00000000000047C2                 call    _mbrtowc
.text:00000000000047C7                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:00000000000047CB                 mov     rbp, rax
.text:00000000000047CE                 jbe     short loc_47F0
.text:00000000000047D0                 test    r12, r12
.text:00000000000047D3                 jz      short loc_47F0
.text:00000000000047D5                 xor     edi, edi
.text:00000000000047D7                 call    hard_locale
.text:00000000000047DC                 test    al, al
.text:00000000000047DE                 jnz     short loc_47F0
.text:00000000000047E0                 movzx   eax, byte ptr [r13+0]
.text:00000000000047E5                 mov     ebp, 1
.text:00000000000047EA                 mov     [rbx], eax
.text:00000000000047EC                 nop     dword ptr [rax+00h]
.text:00000000000047F0
.text:00000000000047F0 loc_47F0:                               ; CODE XREF: rpl_mbrtowc+3E↑j
.text:00000000000047F0                                         ; rpl_mbrtowc+43↑j ...
.text:00000000000047F0                 mov     rdx, [rsp+38h+var_30]
.text:00000000000047F5                 xor     rdx, fs:28h
.text:00000000000047FE                 mov     rax, rbp
.text:0000000000004801                 jnz     short loc_480E
.text:0000000000004803                 add     rsp, 18h
.text:0000000000004807                 pop     rbx
.text:0000000000004808                 pop     rbp
.text:0000000000004809                 pop     r12
.text:000000000000480B                 pop     r13
.text:000000000000480D                 retn
.text:000000000000480E ; ---------------------------------------------------------------------------
.text:000000000000480E
.text:000000000000480E loc_480E:                               ; CODE XREF: rpl_mbrtowc+71↑j
.text:000000000000480E                 call    ___stack_chk_fail
.text:000000000000480E ; } // starts at 4790
.text:000000000000480E rpl_mbrtowc     endp
.text:000000000000480E
.text:000000000000480E ; ---------------------------------------------------------------------------
.text:0000000000004813                 align 20h
.text:0000000000004820
.text:0000000000004820 ; =============== S U B R O U T I N E =======================================
.text:0000000000004820
.text:0000000000004820
.text:0000000000004820 ; __int64 __fastcall rpl_vfprintf(FILE *s)
.text:0000000000004820                 public rpl_vfprintf
.text:0000000000004820 rpl_vfprintf    proc near               ; CODE XREF: prog_fprintf+C5↑p
.text:0000000000004820
.text:0000000000004820 n               = qword ptr -810h
.text:0000000000004820 var_808         = byte ptr -808h
.text:0000000000004820 var_30          = qword ptr -30h
.text:0000000000004820
.text:0000000000004820 ; __unwind {
.text:0000000000004820                 push    r13
.text:0000000000004822                 push    r12
.text:0000000000004824                 mov     rax, rsi
.text:0000000000004827                 push    rbp
.text:0000000000004828                 push    rbx
.text:0000000000004829                 mov     r13, rdi
.text:000000000000482C                 sub     rsp, 7F8h
.text:0000000000004833                 lea     r12, [rsp+818h+var_808]
.text:0000000000004838                 lea     rsi, [rsp+818h+n]
.text:000000000000483D                 mov     [rsp+818h+n], 7D0h
.text:0000000000004846                 mov     rcx, fs:28h
.text:000000000000484F                 mov     [rsp+818h+var_30], rcx
.text:0000000000004857                 xor     ecx, ecx
.text:0000000000004859                 mov     rdi, r12
.text:000000000000485C                 mov     rcx, rdx
.text:000000000000485F                 mov     rdx, rax
.text:0000000000004862                 call    vasnprintf
.text:0000000000004867                 test    rax, rax
.text:000000000000486A                 mov     rbx, [rsp+818h+n]
.text:000000000000486F                 jz      loc_48FE
.text:0000000000004875                 mov     rcx, r13        ; s
.text:0000000000004878                 mov     rdx, rbx        ; n
.text:000000000000487B                 mov     esi, 1          ; size
.text:0000000000004880                 mov     rdi, rax        ; ptr
.text:0000000000004883                 mov     rbp, rax
.text:0000000000004886                 call    _fwrite
.text:000000000000488B                 cmp     rax, rbx
.text:000000000000488E                 jb      short loc_48D0
.text:0000000000004890                 cmp     rbp, r12
.text:0000000000004893                 jz      short loc_489D
.text:0000000000004895                 mov     rdi, rbp        ; ptr
.text:0000000000004898                 call    _free
.text:000000000000489D
.text:000000000000489D loc_489D:                               ; CODE XREF: rpl_vfprintf+73↑j
.text:000000000000489D                 cmp     rbx, 7FFFFFFFh
.text:00000000000048A4                 ja      short loc_48F3
.text:00000000000048A6
.text:00000000000048A6 loc_48A6:                               ; CODE XREF: rpl_vfprintf+B8↓j
.text:00000000000048A6                                         ; rpl_vfprintf+D1↓j ...
.text:00000000000048A6                 mov     rcx, [rsp+818h+var_30]
.text:00000000000048AE                 xor     rcx, fs:28h
.text:00000000000048B7                 mov     eax, ebx
.text:00000000000048B9                 jnz     short loc_490D
.text:00000000000048BB                 add     rsp, 7F8h
.text:00000000000048C2                 pop     rbx
.text:00000000000048C3                 pop     rbp
.text:00000000000048C4                 pop     r12
.text:00000000000048C6                 pop     r13
.text:00000000000048C8                 retn
.text:00000000000048C8 ; ---------------------------------------------------------------------------
.text:00000000000048C9                 align 10h
.text:00000000000048D0
.text:00000000000048D0 loc_48D0:                               ; CODE XREF: rpl_vfprintf+6E↑j
.text:00000000000048D0                 cmp     rbp, r12
.text:00000000000048D3                 mov     ebx, 0FFFFFFFFh
.text:00000000000048D8                 jz      short loc_48A6
.text:00000000000048DA                 call    ___errno_location
.text:00000000000048DF                 mov     r13d, [rax]
.text:00000000000048E2                 mov     r12, rax
.text:00000000000048E5                 mov     rdi, rbp        ; ptr
.text:00000000000048E8                 call    _free
.text:00000000000048ED                 mov     [r12], r13d
.text:00000000000048F1                 jmp     short loc_48A6
.text:00000000000048F3 ; ---------------------------------------------------------------------------
.text:00000000000048F3
.text:00000000000048F3 loc_48F3:                               ; CODE XREF: rpl_vfprintf+84↑j
.text:00000000000048F3                 call    ___errno_location
.text:00000000000048F8                 mov     dword ptr [rax], 4Bh ; 'K'
.text:00000000000048FE
.text:00000000000048FE loc_48FE:                               ; CODE XREF: rpl_vfprintf+4F↑j
.text:00000000000048FE                 mov     rdi, r13
.text:0000000000004901                 mov     ebx, 0FFFFFFFFh
.text:0000000000004906                 call    fseterr
.text:000000000000490B                 jmp     short loc_48A6
.text:000000000000490D ; ---------------------------------------------------------------------------
.text:000000000000490D
.text:000000000000490D loc_490D:                               ; CODE XREF: rpl_vfprintf+99↑j
.text:000000000000490D                 call    ___stack_chk_fail
.text:000000000000490D ; } // starts at 4820
.text:000000000000490D rpl_vfprintf    endp
.text:000000000000490D
.text:000000000000490D ; ---------------------------------------------------------------------------
.text:0000000000004912                 align 20h
.text:0000000000004920
.text:0000000000004920 ; =============== S U B R O U T I N E =======================================
.text:0000000000004920
.text:0000000000004920 ; Attributes: info_from_lumina
.text:0000000000004920
.text:0000000000004920 ; int __fastcall close_stream(FILE *stream)
.text:0000000000004920                 public close_stream
.text:0000000000004920 close_stream    proc near               ; CODE XREF: close_stdout+D↑p
.text:0000000000004920                                         ; close_stdout+33↑p
.text:0000000000004920 ; __unwind {
.text:0000000000004920                 push    r12
.text:0000000000004922                 push    rbp
.text:0000000000004923                 mov     rbp, rdi
.text:0000000000004926                 push    rbx
.text:0000000000004927                 call    ___fpending
.text:000000000000492C                 mov     ebx, [rbp+0]
.text:000000000000492F                 mov     rdi, rbp        ; stream
.text:0000000000004932                 mov     r12, rax
.text:0000000000004935                 call    rpl_fclose
.text:000000000000493A                 and     ebx, 20h
.text:000000000000493D                 test    ebx, ebx
.text:000000000000493F                 jnz     short loc_4958
.text:0000000000004941                 test    eax, eax
.text:0000000000004943                 jz      short loc_494F
.text:0000000000004945                 test    r12, r12
.text:0000000000004948                 mov     eax, 0FFFFFFFFh
.text:000000000000494D                 jz      short loc_4988
.text:000000000000494F
.text:000000000000494F loc_494F:                               ; CODE XREF: close_stream+23↑j
.text:000000000000494F                 pop     rbx
.text:0000000000004950                 pop     rbp
.text:0000000000004951                 pop     r12
.text:0000000000004953                 retn
.text:0000000000004953 ; ---------------------------------------------------------------------------
.text:0000000000004954                 align 8
.text:0000000000004958
.text:0000000000004958 loc_4958:                               ; CODE XREF: close_stream+1F↑j
.text:0000000000004958                 test    eax, eax
.text:000000000000495A                 jnz     short loc_4978
.text:000000000000495C                 call    ___errno_location
.text:0000000000004961                 mov     dword ptr [rax], 0
.text:0000000000004967                 mov     eax, 0FFFFFFFFh
.text:000000000000496C                 pop     rbx
.text:000000000000496D                 pop     rbp
.text:000000000000496E                 pop     r12
.text:0000000000004970                 retn
.text:0000000000004970 ; ---------------------------------------------------------------------------
.text:0000000000004971                 align 8
.text:0000000000004978
.text:0000000000004978 loc_4978:                               ; CODE XREF: close_stream+3A↑j
.text:0000000000004978                 pop     rbx
.text:0000000000004979                 mov     eax, 0FFFFFFFFh
.text:000000000000497E                 pop     rbp
.text:000000000000497F                 pop     r12
.text:0000000000004981                 retn
.text:0000000000004981 ; ---------------------------------------------------------------------------
.text:0000000000004982                 align 8
.text:0000000000004988
.text:0000000000004988 loc_4988:                               ; CODE XREF: close_stream+2D↑j
.text:0000000000004988                 call    ___errno_location
.text:000000000000498D                 cmp     dword ptr [rax], 9
.text:0000000000004990                 pop     rbx
.text:0000000000004991                 pop     rbp
.text:0000000000004992                 pop     r12
.text:0000000000004994                 setnz   al
.text:0000000000004997                 movzx   eax, al
.text:000000000000499A                 neg     eax
.text:000000000000499C                 retn
.text:000000000000499C ; } // starts at 4920
.text:000000000000499C close_stream    endp
.text:000000000000499C
.text:000000000000499C ; ---------------------------------------------------------------------------
.text:000000000000499D                 align 20h
.text:00000000000049A0
.text:00000000000049A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000049A0
.text:00000000000049A0 ; Attributes: info_from_lumina
.text:00000000000049A0
.text:00000000000049A0 ; char *__fastcall last_component(const char *name)
.text:00000000000049A0                 public last_component
.text:00000000000049A0 last_component  proc near               ; CODE XREF: strip_trailing_slashes+9↑p
.text:00000000000049A0 ; __unwind {
.text:00000000000049A0                 movzx   edx, byte ptr [rdi]
.text:00000000000049A3                 mov     rax, rdi
.text:00000000000049A6                 cmp     dl, 2Fh ; '/'
.text:00000000000049A9                 jnz     short loc_49BC
.text:00000000000049AB                 nop     dword ptr [rax+rax+00h]
.text:00000000000049B0
.text:00000000000049B0 loc_49B0:                               ; CODE XREF: last_component+1A↓j
.text:00000000000049B0                 add     rax, 1
.text:00000000000049B4                 movzx   edx, byte ptr [rax]
.text:00000000000049B7                 cmp     dl, 2Fh ; '/'
.text:00000000000049BA                 jz      short loc_49B0
.text:00000000000049BC
.text:00000000000049BC loc_49BC:                               ; CODE XREF: last_component+9↑j
.text:00000000000049BC                 test    dl, dl
.text:00000000000049BE                 jz      short locret_49FA
.text:00000000000049C0                 mov     rcx, rax
.text:00000000000049C3                 xor     esi, esi
.text:00000000000049C5                 jmp     short loc_49E5
.text:00000000000049C5 ; ---------------------------------------------------------------------------
.text:00000000000049C7                 align 10h
.text:00000000000049D0
.text:00000000000049D0 loc_49D0:                               ; CODE XREF: last_component+48↓j
.text:00000000000049D0                 test    sil, sil
.text:00000000000049D3                 jz      short loc_49DA
.text:00000000000049D5                 mov     rax, rcx
.text:00000000000049D8                 xor     esi, esi
.text:00000000000049DA
.text:00000000000049DA loc_49DA:                               ; CODE XREF: last_component+33↑j
.text:00000000000049DA                 add     rcx, 1
.text:00000000000049DE                 movzx   edx, byte ptr [rcx]
.text:00000000000049E1                 test    dl, dl
.text:00000000000049E3                 jz      short locret_49FA
.text:00000000000049E5
.text:00000000000049E5 loc_49E5:                               ; CODE XREF: last_component+25↑j
.text:00000000000049E5                                         ; last_component+58↓j
.text:00000000000049E5                 cmp     dl, 2Fh ; '/'
.text:00000000000049E8                 jnz     short loc_49D0
.text:00000000000049EA                 add     rcx, 1
.text:00000000000049EE                 movzx   edx, byte ptr [rcx]
.text:00000000000049F1                 mov     esi, 1
.text:00000000000049F6                 test    dl, dl
.text:00000000000049F8                 jnz     short loc_49E5
.text:00000000000049FA
.text:00000000000049FA locret_49FA:                            ; CODE XREF: last_component+1E↑j
.text:00000000000049FA                                         ; last_component+43↑j
.text:00000000000049FA                 rep retn
.text:00000000000049FA ; } // starts at 49A0
.text:00000000000049FA last_component  endp
.text:00000000000049FA
.text:00000000000049FA ; ---------------------------------------------------------------------------
.text:00000000000049FC                 align 20h
.text:0000000000004A00
.text:0000000000004A00 ; =============== S U B R O U T I N E =======================================
.text:0000000000004A00
.text:0000000000004A00 ; Attributes: info_from_lumina
.text:0000000000004A00
.text:0000000000004A00 ; size_t __fastcall base_len(const char *name)
.text:0000000000004A00                 public base_len
.text:0000000000004A00 base_len        proc near               ; CODE XREF: strip_trailing_slashes+1B↑p
.text:0000000000004A00 ; __unwind {
.text:0000000000004A00                 push    rbx
.text:0000000000004A01                 mov     rbx, rdi
.text:0000000000004A04                 call    _strlen
.text:0000000000004A09                 cmp     rax, 1
.text:0000000000004A0D                 jbe     short loc_4A1A
.text:0000000000004A0F                 cmp     byte ptr [rbx+rax-1], 2Fh ; '/'
.text:0000000000004A14                 lea     rdx, [rax-1]
.text:0000000000004A18                 jz      short loc_4A28
.text:0000000000004A1A
.text:0000000000004A1A loc_4A1A:                               ; CODE XREF: base_len+D↑j
.text:0000000000004A1A                 pop     rbx
.text:0000000000004A1B                 retn
.text:0000000000004A1B ; ---------------------------------------------------------------------------
.text:0000000000004A1C                 align 20h
.text:0000000000004A20
.text:0000000000004A20 loc_4A20:                               ; CODE XREF: base_len+37↓j
.text:0000000000004A20                 mov     rdx, rax
.text:0000000000004A23                 nop     dword ptr [rax+rax+00h]
.text:0000000000004A28
.text:0000000000004A28 loc_4A28:                               ; CODE XREF: base_len+18↑j
.text:0000000000004A28                 cmp     rdx, 1
.text:0000000000004A2C                 jz      short loc_4A40
.text:0000000000004A2E                 cmp     byte ptr [rbx+rdx-1], 2Fh ; '/'
.text:0000000000004A33                 lea     rax, [rdx-1]
.text:0000000000004A37                 jz      short loc_4A20
.text:0000000000004A39                 mov     rax, rdx
.text:0000000000004A3C                 pop     rbx
.text:0000000000004A3D                 retn
.text:0000000000004A3D ; ---------------------------------------------------------------------------
.text:0000000000004A3E                 align 20h
.text:0000000000004A40
.text:0000000000004A40 loc_4A40:                               ; CODE XREF: base_len+2C↑j
.text:0000000000004A40                 mov     eax, 1
.text:0000000000004A45                 pop     rbx
.text:0000000000004A46                 retn
.text:0000000000004A46 ; } // starts at 4A00
.text:0000000000004A46 base_len        endp
.text:0000000000004A46
.text:0000000000004A46 ; ---------------------------------------------------------------------------
.text:0000000000004A47                 align 10h
.text:0000000000004A50
.text:0000000000004A50 ; =============== S U B R O U T I N E =======================================
.text:0000000000004A50
.text:0000000000004A50
.text:0000000000004A50                 public hard_locale
.text:0000000000004A50 hard_locale     proc near               ; CODE XREF: rpl_mbrtowc+47↑p
.text:0000000000004A50 ; __unwind {
.text:0000000000004A50                 sub     rsp, 8
.text:0000000000004A54                 xor     esi, esi        ; locale
.text:0000000000004A56                 call    _setlocale
.text:0000000000004A5B                 mov     rdx, rax
.text:0000000000004A5E                 mov     eax, 1
.text:0000000000004A63                 test    rdx, rdx
.text:0000000000004A66                 jz      short loc_4A85
.text:0000000000004A68                 lea     rdi, aC         ; "C"
.text:0000000000004A6F                 mov     ecx, 2
.text:0000000000004A74                 mov     rsi, rdx
.text:0000000000004A77                 repe cmpsb
.text:0000000000004A79                 setnbe  cl
.text:0000000000004A7C                 sbb     cl, 0
.text:0000000000004A7F                 xor     eax, eax
.text:0000000000004A81                 test    cl, cl
.text:0000000000004A83                 jnz     short loc_4A90
.text:0000000000004A85
.text:0000000000004A85 loc_4A85:                               ; CODE XREF: hard_locale+16↑j
.text:0000000000004A85                 add     rsp, 8
.text:0000000000004A89                 retn
.text:0000000000004A89 ; ---------------------------------------------------------------------------
.text:0000000000004A8A                 align 10h
.text:0000000000004A90
.text:0000000000004A90 loc_4A90:                               ; CODE XREF: hard_locale+33↑j
.text:0000000000004A90                 lea     rdi, aPosix     ; "POSIX"
.text:0000000000004A97                 mov     ecx, 6
.text:0000000000004A9C                 mov     rsi, rdx
.text:0000000000004A9F                 repe cmpsb
.text:0000000000004AA1                 setnbe  al
.text:0000000000004AA4                 sbb     al, 0
.text:0000000000004AA6                 test    al, al
.text:0000000000004AA8                 setnz   al
.text:0000000000004AAB                 add     rsp, 8
.text:0000000000004AAF                 retn
.text:0000000000004AAF ; } // starts at 4A50
.text:0000000000004AAF hard_locale     endp
.text:0000000000004AAF
.text:0000000000004AB0
.text:0000000000004AB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004AB0
.text:0000000000004AB0
.text:0000000000004AB0                 public locale_charset
.text:0000000000004AB0 locale_charset  proc near               ; CODE XREF: gettext_quote+B↑p
.text:0000000000004AB0 ; __unwind {
.text:0000000000004AB0                 sub     rsp, 8
.text:0000000000004AB4                 mov     edi, 0Eh        ; item
.text:0000000000004AB9                 call    _nl_langinfo
.text:0000000000004ABE                 test    rax, rax
.text:0000000000004AC1                 jz      short loc_4AE0
.text:0000000000004AC3                 cmp     byte ptr [rax], 0
.text:0000000000004AC6                 lea     rdx, aAscii     ; "ASCII"
.text:0000000000004ACD                 cmovz   rax, rdx
.text:0000000000004AD1                 add     rsp, 8
.text:0000000000004AD5                 retn
.text:0000000000004AD5 ; ---------------------------------------------------------------------------
.text:0000000000004AD6                 align 20h
.text:0000000000004AE0
.text:0000000000004AE0 loc_4AE0:                               ; CODE XREF: locale_charset+11↑j
.text:0000000000004AE0                 lea     rax, aAscii     ; "ASCII"
.text:0000000000004AE7                 add     rsp, 8
.text:0000000000004AEB                 retn
.text:0000000000004AEB ; } // starts at 4AB0
.text:0000000000004AEB locale_charset  endp
.text:0000000000004AEB
.text:0000000000004AEB ; ---------------------------------------------------------------------------
.text:0000000000004AEC                 align 10h
.text:0000000000004AF0
.text:0000000000004AF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004AF0
.text:0000000000004AF0 ; Attributes: info_from_lumina
.text:0000000000004AF0
.text:0000000000004AF0 ; int __fastcall rpl_fclose(FILE *fp)
.text:0000000000004AF0                 public rpl_fclose
.text:0000000000004AF0 rpl_fclose      proc near               ; CODE XREF: close_stream+15↑p
.text:0000000000004AF0 ; __unwind {
.text:0000000000004AF0                 push    r12
.text:0000000000004AF2                 push    rbp
.text:0000000000004AF3                 push    rbx
.text:0000000000004AF4                 mov     rbx, rdi
.text:0000000000004AF7                 call    _fileno
.text:0000000000004AFC                 test    eax, eax
.text:0000000000004AFE                 mov     rdi, rbx        ; fp
.text:0000000000004B01                 js      short loc_4B57
.text:0000000000004B03                 call    ___freading
.text:0000000000004B08                 test    eax, eax
.text:0000000000004B0A                 jnz     short loc_4B38
.text:0000000000004B0C
.text:0000000000004B0C loc_4B0C:                               ; CODE XREF: rpl_fclose+62↓j
.text:0000000000004B0C                 mov     rdi, rbx        ; stream
.text:0000000000004B0F                 call    rpl_fflush
.text:0000000000004B14                 test    eax, eax
.text:0000000000004B16                 jz      short loc_4B54
.text:0000000000004B18                 call    ___errno_location
.text:0000000000004B1D                 mov     r12d, [rax]
.text:0000000000004B20                 mov     rdi, rbx        ; stream
.text:0000000000004B23                 mov     rbp, rax
.text:0000000000004B26                 call    _fclose
.text:0000000000004B2B                 test    r12d, r12d
.text:0000000000004B2E                 jnz     short loc_4B60
.text:0000000000004B30
.text:0000000000004B30 loc_4B30:                               ; CODE XREF: rpl_fclose+79↓j
.text:0000000000004B30                 pop     rbx
.text:0000000000004B31                 pop     rbp
.text:0000000000004B32                 pop     r12
.text:0000000000004B34                 retn
.text:0000000000004B34 ; ---------------------------------------------------------------------------
.text:0000000000004B35                 align 8
.text:0000000000004B38
.text:0000000000004B38 loc_4B38:                               ; CODE XREF: rpl_fclose+1A↑j
.text:0000000000004B38                 mov     rdi, rbx        ; stream
.text:0000000000004B3B                 call    _fileno
.text:0000000000004B40                 xor     esi, esi        ; offset
.text:0000000000004B42                 mov     edx, 1          ; whence
.text:0000000000004B47                 mov     edi, eax        ; fd
.text:0000000000004B49                 call    _lseek
.text:0000000000004B4E                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000004B52                 jnz     short loc_4B0C
.text:0000000000004B54
.text:0000000000004B54 loc_4B54:                               ; CODE XREF: rpl_fclose+26↑j
.text:0000000000004B54                 mov     rdi, rbx        ; stream
.text:0000000000004B57
.text:0000000000004B57 loc_4B57:                               ; CODE XREF: rpl_fclose+11↑j
.text:0000000000004B57                 pop     rbx
.text:0000000000004B58                 pop     rbp
.text:0000000000004B59                 pop     r12
.text:0000000000004B5B                 jmp     _fclose
.text:0000000000004B60 ; ---------------------------------------------------------------------------
.text:0000000000004B60
.text:0000000000004B60 loc_4B60:                               ; CODE XREF: rpl_fclose+3E↑j
.text:0000000000004B60                 mov     [rbp+0], r12d
.text:0000000000004B64                 mov     eax, 0FFFFFFFFh
.text:0000000000004B69                 jmp     short loc_4B30
.text:0000000000004B69 ; } // starts at 4AF0
.text:0000000000004B69 rpl_fclose      endp
.text:0000000000004B69
.text:0000000000004B69 ; ---------------------------------------------------------------------------
.text:0000000000004B6B                 align 10h
.text:0000000000004B70
.text:0000000000004B70 ; =============== S U B R O U T I N E =======================================
.text:0000000000004B70
.text:0000000000004B70 ; Attributes: info_from_lumina
.text:0000000000004B70
.text:0000000000004B70 ; int __fastcall rpl_fflush(FILE *stream)
.text:0000000000004B70                 public rpl_fflush
.text:0000000000004B70 rpl_fflush      proc near               ; CODE XREF: rpl_fclose+1F↑p
.text:0000000000004B70 ; __unwind {
.text:0000000000004B70                 test    rdi, rdi
.text:0000000000004B73                 push    rbx
.text:0000000000004B74                 mov     rbx, rdi
.text:0000000000004B77                 jz      short loc_4B8A
.text:0000000000004B79                 call    ___freading
.text:0000000000004B7E                 test    eax, eax
.text:0000000000004B80                 jz      short loc_4B8A
.text:0000000000004B82                 test    dword ptr [rbx], 100h
.text:0000000000004B88                 jnz     short loc_4B98
.text:0000000000004B8A
.text:0000000000004B8A loc_4B8A:                               ; CODE XREF: rpl_fflush+7↑j
.text:0000000000004B8A                                         ; rpl_fflush+10↑j
.text:0000000000004B8A                 mov     rdi, rbx        ; stream
.text:0000000000004B8D                 pop     rbx
.text:0000000000004B8E                 jmp     _fflush
.text:0000000000004B8E ; ---------------------------------------------------------------------------
.text:0000000000004B93                 align 8
.text:0000000000004B98
.text:0000000000004B98 loc_4B98:                               ; CODE XREF: rpl_fflush+18↑j
.text:0000000000004B98                 mov     rdi, rbx
.text:0000000000004B9B                 mov     edx, 1
.text:0000000000004BA0                 xor     esi, esi
.text:0000000000004BA2                 call    rpl_fseeko
.text:0000000000004BA7                 mov     rdi, rbx        ; stream
.text:0000000000004BAA                 pop     rbx
.text:0000000000004BAB                 jmp     _fflush
.text:0000000000004BAB ; } // starts at 4B70
.text:0000000000004BAB rpl_fflush      endp
.text:0000000000004BAB
.text:0000000000004BB0
.text:0000000000004BB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004BB0
.text:0000000000004BB0 ; Attributes: info_from_lumina
.text:0000000000004BB0
.text:0000000000004BB0 ; int __fastcall rpl_fseeko(FILE *fp, off_t offset, int whence)
.text:0000000000004BB0                 public rpl_fseeko
.text:0000000000004BB0 rpl_fseeko      proc near               ; CODE XREF: rpl_fflush+32↑p
.text:0000000000004BB0 ; __unwind {
.text:0000000000004BB0                 mov     rax, [rdi+8]
.text:0000000000004BB4                 cmp     [rdi+10h], rax
.text:0000000000004BB8                 jz      short loc_4BC0
.text:0000000000004BBA
.text:0000000000004BBA loc_4BBA:                               ; CODE XREF: rpl_fseeko+18↓j
.text:0000000000004BBA                                         ; rpl_fseeko+1F↓j
.text:0000000000004BBA                 jmp     _fseeko
.text:0000000000004BBA ; ---------------------------------------------------------------------------
.text:0000000000004BBF                 align 20h
.text:0000000000004BC0
.text:0000000000004BC0 loc_4BC0:                               ; CODE XREF: rpl_fseeko+8↑j
.text:0000000000004BC0                 mov     rax, [rdi+20h]
.text:0000000000004BC4                 cmp     [rdi+28h], rax
.text:0000000000004BC8                 jnz     short loc_4BBA
.text:0000000000004BCA                 cmp     qword ptr [rdi+48h], 0
.text:0000000000004BCF                 jnz     short loc_4BBA
.text:0000000000004BD1                 push    r12
.text:0000000000004BD3                 push    rbp
.text:0000000000004BD4                 mov     r12d, edx
.text:0000000000004BD7                 push    rbx
.text:0000000000004BD8                 mov     rbp, rsi
.text:0000000000004BDB                 mov     rbx, rdi
.text:0000000000004BDE                 call    _fileno
.text:0000000000004BE3                 mov     edx, r12d       ; whence
.text:0000000000004BE6                 mov     rsi, rbp        ; offset
.text:0000000000004BE9                 mov     edi, eax        ; fd
.text:0000000000004BEB                 call    _lseek
.text:0000000000004BF0                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000004BF4                 jz      short loc_4C02
.text:0000000000004BF6                 and     dword ptr [rbx], 0FFFFFFEFh
.text:0000000000004BF9                 mov     [rbx+90h], rax
.text:0000000000004C00                 xor     eax, eax
.text:0000000000004C02
.text:0000000000004C02 loc_4C02:                               ; CODE XREF: rpl_fseeko+44↑j
.text:0000000000004C02                 pop     rbx
.text:0000000000004C03                 pop     rbp
.text:0000000000004C04                 pop     r12
.text:0000000000004C06                 retn
.text:0000000000004C06 ; } // starts at 4BB0
.text:0000000000004C06 rpl_fseeko      endp
.text:0000000000004C06
.text:0000000000004C06 ; ---------------------------------------------------------------------------
.text:0000000000004C07                 align 10h
.text:0000000000004C10
.text:0000000000004C10 ; =============== S U B R O U T I N E =======================================
.text:0000000000004C10
.text:0000000000004C10
.text:0000000000004C10                 public fseterr
.text:0000000000004C10 fseterr         proc near               ; CODE XREF: rpl_vfprintf+E6↑p
.text:0000000000004C10 ; __unwind {
.text:0000000000004C10                 or      dword ptr [rdi], 20h
.text:0000000000004C13                 retn
.text:0000000000004C13 ; } // starts at 4C10
.text:0000000000004C13 fseterr         endp
.text:0000000000004C13
.text:0000000000004C13 ; ---------------------------------------------------------------------------
.text:0000000000004C14                 align 20h
.text:0000000000004C20
.text:0000000000004C20 ; =============== S U B R O U T I N E =======================================
.text:0000000000004C20
.text:0000000000004C20 ; Attributes: bp-based frame
.text:0000000000004C20
.text:0000000000004C20                 public vasnprintf
.text:0000000000004C20 vasnprintf      proc near               ; CODE XREF: rpl_vfprintf+42↑p
.text:0000000000004C20
.text:0000000000004C20 var_450         = tbyte ptr -450h
.text:0000000000004C20 var_440         = tbyte ptr -440h
.text:0000000000004C20 var_430         = qword ptr -430h
.text:0000000000004C20 var_421         = byte ptr -421h
.text:0000000000004C20 ptr             = qword ptr -420h
.text:0000000000004C20 var_418         = qword ptr -418h
.text:0000000000004C20 var_410         = qword ptr -410h
.text:0000000000004C20 var_408         = qword ptr -408h
.text:0000000000004C20 var_400         = qword ptr -400h
.text:0000000000004C20 var_3F8         = qword ptr -3F8h
.text:0000000000004C20 var_3F0         = qword ptr -3F0h
.text:0000000000004C20 src             = qword ptr -3E8h
.text:0000000000004C20 var_3E0         = qword ptr -3E0h
.text:0000000000004C20 var_3D8         = qword ptr -3D8h
.text:0000000000004C20 var_3D0         = qword ptr -3D0h
.text:0000000000004C20 n               = qword ptr -3C8h
.text:0000000000004C20 var_3BC         = dword ptr -3BCh
.text:0000000000004C20 var_3B8         = dword ptr -3B8h
.text:0000000000004C20 var_3B4         = dword ptr -3B4h
.text:0000000000004C20 var_3B0         = byte ptr -3B0h
.text:0000000000004C20 var_3A8         = qword ptr -3A8h
.text:0000000000004C20 var_2C0         = qword ptr -2C0h
.text:0000000000004C20 var_2B8         = qword ptr -2B8h
.text:0000000000004C20 var_2B0         = qword ptr -2B0h
.text:0000000000004C20 var_2A8         = qword ptr -2A8h
.text:0000000000004C20 var_38          = qword ptr -38h
.text:0000000000004C20
.text:0000000000004C20 ; __unwind {
.text:0000000000004C20                 push    rbp
.text:0000000000004C21                 mov     rbp, rsp
.text:0000000000004C24                 push    r15
.text:0000000000004C26                 push    r14
.text:0000000000004C28                 push    r13
.text:0000000000004C2A                 push    r12
.text:0000000000004C2C                 lea     r14, [rbp+var_3B0]
.text:0000000000004C33                 push    rbx
.text:0000000000004C34                 mov     rbx, rdx
.text:0000000000004C37                 mov     r12, rcx
.text:0000000000004C3A                 mov     rdx, r14
.text:0000000000004C3D                 sub     rsp, 408h
.text:0000000000004C44                 mov     [rbp+var_418], rsi
.text:0000000000004C4B                 lea     rsi, [rbp+var_2C0]
.text:0000000000004C52                 mov     [rbp+src], rdi
.text:0000000000004C59                 mov     rdi, rbx
.text:0000000000004C5C                 mov     [rbp+var_410], r14
.text:0000000000004C63                 mov     rax, fs:28h
.text:0000000000004C6C                 mov     [rbp+var_38], rax
.text:0000000000004C70                 xor     eax, eax
.text:0000000000004C72                 mov     [rbp+var_408], rsi
.text:0000000000004C79                 call    printf_parse
.text:0000000000004C7E                 test    eax, eax
.text:0000000000004C80                 js      loc_5AE8
.text:0000000000004C86                 mov     rsi, r14
.text:0000000000004C89                 mov     rdi, r12
.text:0000000000004C8C                 call    printf_fetchargs
.text:0000000000004C91                 test    eax, eax
.text:0000000000004C93                 js      loc_5B50
.text:0000000000004C99                 mov     rax, [rbp+var_2B0]
.text:0000000000004CA0                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004CA7                 add     rax, 7
.text:0000000000004CAB                 cmp     rax, 6
.text:0000000000004CAF                 cmovbe  rax, rdx
.text:0000000000004CB3                 add     rax, [rbp+var_2A8]
.text:0000000000004CBA                 jb      loc_56E8
.text:0000000000004CC0                 mov     rdi, rax
.text:0000000000004CC3                 xor     r8d, r8d
.text:0000000000004CC6                 add     rdi, 6          ; size
.text:0000000000004CCA                 setb    r8b
.text:0000000000004CCE                 jb      loc_56E8
.text:0000000000004CD4                 cmp     rdi, 0F9Fh
.text:0000000000004CDB                 jbe     loc_4E28
.text:0000000000004CE1                 cmp     rdi, 0FFFFFFFFFFFFFFFFh
.text:0000000000004CE5                 mov     [rbp+n], r8
.text:0000000000004CEC                 jz      loc_56E8
.text:0000000000004CF2                 call    _malloc
.text:0000000000004CF7                 test    rax, rax
.text:0000000000004CFA                 mov     [rbp+var_3D8], rax
.text:0000000000004D01                 jz      loc_56E8
.text:0000000000004D07                 mov     r8, [rbp+n]
.text:0000000000004D0E                 mov     [rbp+ptr], rax
.text:0000000000004D15
.text:0000000000004D15 loc_4D15:                               ; CODE XREF: vasnprintf+22E↓j
.text:0000000000004D15                 xor     r12d, r12d
.text:0000000000004D18                 cmp     [rbp+src], 0
.text:0000000000004D20                 jz      short loc_4D2C
.text:0000000000004D22                 mov     rax, [rbp+var_418]
.text:0000000000004D29                 mov     r12, [rax]
.text:0000000000004D2C
.text:0000000000004D2C loc_4D2C:                               ; CODE XREF: vasnprintf+100↑j
.text:0000000000004D2C                 mov     r13, [rbp+var_2B8]
.text:0000000000004D33                 lea     rax, [rbp+var_3BC]
.text:0000000000004D3A                 mov     r15, [rbp+src]
.text:0000000000004D41                 mov     [rbp+var_400], 0
.text:0000000000004D4C                 mov     [rbp+var_3F0], rax
.text:0000000000004D53                 mov     rax, rbx
.text:0000000000004D56                 mov     rbx, r8
.text:0000000000004D59                 mov     rcx, [r13+0]
.text:0000000000004D5D                 mov     r8, rax
.text:0000000000004D60                 cmp     rcx, r8
.text:0000000000004D63                 jz      loc_56D1
.text:0000000000004D69
.text:0000000000004D69 loc_4D69:                               ; CODE XREF: vasnprintf+AAB↓j
.text:0000000000004D69                 sub     rcx, r8
.text:0000000000004D6C                 mov     rax, rbx
.text:0000000000004D6F                 add     rax, rcx
.text:0000000000004D72                 mov     r14, rax
.text:0000000000004D75                 jnb     loc_4E58
.text:0000000000004D7B                 cmp     r12, 0FFFFFFFFFFFFFFFFh
.text:0000000000004D7F                 jz      loc_5850
.text:0000000000004D85
.text:0000000000004D85 loc_4D85:                               ; CODE XREF: vasnprintf+4E2↓j
.text:0000000000004D85                                         ; vasnprintf+A86↓j ...
.text:0000000000004D85                 call    ___errno_location
.text:0000000000004D8A                 mov     [rbp+n], rax
.text:0000000000004D91
.text:0000000000004D91 loc_4D91:                               ; CODE XREF: vasnprintf+640↓j
.text:0000000000004D91                                         ; vasnprintf+652↓j ...
.text:0000000000004D91                 cmp     r15, [rbp+src]
.text:0000000000004D98                 jz      short loc_4DA3
.text:0000000000004D9A                 test    r15, r15
.text:0000000000004D9D                 jnz     loc_5880
.text:0000000000004DA3
.text:0000000000004DA3 loc_4DA3:                               ; CODE XREF: vasnprintf+178↑j
.text:0000000000004DA3                                         ; vasnprintf+C68↓j
.text:0000000000004DA3                 mov     rax, [rbp+ptr]
.text:0000000000004DAA                 test    rax, rax
.text:0000000000004DAD                 jz      short loc_4DB7
.text:0000000000004DAF                 mov     rdi, rax        ; ptr
.text:0000000000004DB2                 call    _free
.text:0000000000004DB7
.text:0000000000004DB7 loc_4DB7:                               ; CODE XREF: vasnprintf+18D↑j
.text:0000000000004DB7                                         ; vasnprintf+AD4↓j
.text:0000000000004DB7                 mov     rax, [rbp+var_408]
.text:0000000000004DBE                 mov     rdi, [rbp+var_2B8] ; ptr
.text:0000000000004DC5                 add     rax, 20h ; ' '
.text:0000000000004DC9                 cmp     rdi, rax
.text:0000000000004DCC                 jz      short loc_4DD3
.text:0000000000004DCE                 call    _free
.text:0000000000004DD3
.text:0000000000004DD3 loc_4DD3:                               ; CODE XREF: vasnprintf+1AC↑j
.text:0000000000004DD3                 mov     rax, [rbp+var_410]
.text:0000000000004DDA                 mov     rdi, [rbp+var_3A8] ; ptr
.text:0000000000004DE1                 add     rax, 10h
.text:0000000000004DE5                 cmp     rdi, rax
.text:0000000000004DE8                 jz      short loc_4DEF
.text:0000000000004DEA                 call    _free
.text:0000000000004DEF
.text:0000000000004DEF loc_4DEF:                               ; CODE XREF: vasnprintf+1C8↑j
.text:0000000000004DEF                 mov     rax, [rbp+n]
.text:0000000000004DF6                 xor     r15d, r15d
.text:0000000000004DF9                 mov     dword ptr [rax], 0Ch
.text:0000000000004DFF
.text:0000000000004DFF loc_4DFF:                               ; CODE XREF: vasnprintf+7BA↓j
.text:0000000000004DFF                                         ; vasnprintf+EBE↓j ...
.text:0000000000004DFF                 mov     rdi, [rbp+var_38]
.text:0000000000004E03                 xor     rdi, fs:28h
.text:0000000000004E0C                 mov     rax, r15
.text:0000000000004E0F                 jnz     loc_5D17
.text:0000000000004E15                 lea     rsp, [rbp-28h]
.text:0000000000004E19                 pop     rbx
.text:0000000000004E1A                 pop     r12
.text:0000000000004E1C                 pop     r13
.text:0000000000004E1E                 pop     r14
.text:0000000000004E20                 pop     r15
.text:0000000000004E22                 pop     rbp
.text:0000000000004E23                 retn
.text:0000000000004E23 ; ---------------------------------------------------------------------------
.text:0000000000004E24                 align 8
.text:0000000000004E28
.text:0000000000004E28 loc_4E28:                               ; CODE XREF: vasnprintf+BB↑j
.text:0000000000004E28                 add     rax, 24h ; '$'
.text:0000000000004E2C                 mov     [rbp+ptr], 0
.text:0000000000004E37                 and     rax, 0FFFFFFFFFFFFFFF0h
.text:0000000000004E3B                 sub     rsp, rax
.text:0000000000004E3E                 lea     rax, [rsp+430h+var_421]
.text:0000000000004E43                 and     rax, 0FFFFFFFFFFFFFFF0h
.text:0000000000004E47                 mov     [rbp+var_3D8], rax
.text:0000000000004E4E                 jmp     loc_4D15
.text:0000000000004E4E ; ---------------------------------------------------------------------------
.text:0000000000004E53                 align 8
.text:0000000000004E58
.text:0000000000004E58 loc_4E58:                               ; CODE XREF: vasnprintf+155↑j
.text:0000000000004E58                 cmp     r12, rax
.text:0000000000004E5B                 jnb     short loc_4EC4
.text:0000000000004E5D                 test    r12, r12
.text:0000000000004E60                 jnz     loc_5790
.text:0000000000004E66                 cmp     rax, 0Ch
.text:0000000000004E6A                 ja      loc_57A2
.text:0000000000004E70                 mov     r12d, 0Ch
.text:0000000000004E76
.text:0000000000004E76 loc_4E76:                               ; CODE XREF: vasnprintf+B7C↓j
.text:0000000000004E76                 cmp     r15, [rbp+src]
.text:0000000000004E7D                 setz    dl
.text:0000000000004E80                 test    r15, r15
.text:0000000000004E83                 jz      loc_57C8
.text:0000000000004E89
.text:0000000000004E89 loc_4E89:                               ; CODE XREF: vasnprintf+B9C↓j
.text:0000000000004E89                 test    dl, dl
.text:0000000000004E8B                 jnz     loc_57C8
.text:0000000000004E91                 mov     rsi, r12        ; size
.text:0000000000004E94                 mov     rdi, r15        ; ptr
.text:0000000000004E97                 mov     [rbp+var_3D0], r8
.text:0000000000004E9E                 mov     [rbp+n], rcx
.text:0000000000004EA5                 call    _realloc
.text:0000000000004EAA                 test    rax, rax
.text:0000000000004EAD                 mov     rcx, [rbp+n]
.text:0000000000004EB4                 mov     r8, [rbp+var_3D0]
.text:0000000000004EBB                 jz      loc_586B
.text:0000000000004EC1                 mov     r15, rax
.text:0000000000004EC4
.text:0000000000004EC4 loc_4EC4:                               ; CODE XREF: vasnprintf+23B↑j
.text:0000000000004EC4                                         ; vasnprintf+C23↓j ...
.text:0000000000004EC4                 lea     rdi, [r15+rbx]  ; dest
.text:0000000000004EC8                 mov     rdx, rcx        ; n
.text:0000000000004ECB                 mov     rsi, r8         ; src
.text:0000000000004ECE                 call    _memcpy
.text:0000000000004ED3
.text:0000000000004ED3 loc_4ED3:                               ; CODE XREF: vasnprintf+AB4↓j
.text:0000000000004ED3                 mov     rax, [rbp+var_400]
.text:0000000000004EDA                 cmp     [rbp+var_2C0], rax
.text:0000000000004EE1                 jz      loc_5B9B
.text:0000000000004EE7                 movzx   edx, byte ptr [r13+48h]
.text:0000000000004EEC                 mov     rax, [r13+50h]
.text:0000000000004EF0                 cmp     dl, 25h ; '%'
.text:0000000000004EF3                 jz      loc_5688
.text:0000000000004EF9                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000004EFD                 jz      def_517B        ; jumptable 000000000000517B default case, case 0
.text:0000000000004EFD                                         ; jumptable 0000000000005720 default case
.text:0000000000004F03                 mov     r8, [rbp+var_3A8]
.text:0000000000004F0A                 shl     rax, 5
.text:0000000000004F0E                 add     rax, r8
.text:0000000000004F11                 cmp     dl, 6Eh ; 'n'
.text:0000000000004F14                 mov     edi, [rax]
.text:0000000000004F16                 mov     dword ptr [rbp+var_3D0], edi
.text:0000000000004F1C                 jz      loc_5700
.text:0000000000004F22                 mov     eax, [r13+10h]
.text:0000000000004F26                 mov     rdi, [rbp+var_3D8]
.text:0000000000004F2D                 test    al, 1
.text:0000000000004F2F                 mov     byte ptr [rdi], 25h ; '%'
.text:0000000000004F32                 lea     rbx, [rdi+1]
.text:0000000000004F36                 jz      short loc_4F47
.text:0000000000004F38                 mov     rdi, [rbp+var_3D8]
.text:0000000000004F3F                 lea     rbx, [rdi+2]
.text:0000000000004F43                 mov     byte ptr [rdi+1], 27h ; '''
.text:0000000000004F47
.text:0000000000004F47 loc_4F47:                               ; CODE XREF: vasnprintf+316↑j
.text:0000000000004F47                 test    al, 2
.text:0000000000004F49                 jz      short loc_4F52
.text:0000000000004F4B                 mov     byte ptr [rbx], 2Dh ; '-'
.text:0000000000004F4E                 add     rbx, 1
.text:0000000000004F52
.text:0000000000004F52 loc_4F52:                               ; CODE XREF: vasnprintf+329↑j
.text:0000000000004F52                 test    al, 4
.text:0000000000004F54                 jz      short loc_4F5D
.text:0000000000004F56                 mov     byte ptr [rbx], 2Bh ; '+'
.text:0000000000004F59                 add     rbx, 1
.text:0000000000004F5D
.text:0000000000004F5D loc_4F5D:                               ; CODE XREF: vasnprintf+334↑j
.text:0000000000004F5D                 test    al, 8
.text:0000000000004F5F                 jz      short loc_4F68
.text:0000000000004F61                 mov     byte ptr [rbx], 20h ; ' '
.text:0000000000004F64                 add     rbx, 1
.text:0000000000004F68
.text:0000000000004F68 loc_4F68:                               ; CODE XREF: vasnprintf+33F↑j
.text:0000000000004F68                 test    al, 10h
.text:0000000000004F6A                 jz      short loc_4F73
.text:0000000000004F6C                 mov     byte ptr [rbx], 23h ; '#'
.text:0000000000004F6F                 add     rbx, 1
.text:0000000000004F73
.text:0000000000004F73 loc_4F73:                               ; CODE XREF: vasnprintf+34A↑j
.text:0000000000004F73                 test    al, 40h
.text:0000000000004F75                 jz      short loc_4F7E
.text:0000000000004F77                 mov     byte ptr [rbx], 49h ; 'I'
.text:0000000000004F7A                 add     rbx, 1
.text:0000000000004F7E
.text:0000000000004F7E loc_4F7E:                               ; CODE XREF: vasnprintf+355↑j
.text:0000000000004F7E                 test    al, 20h
.text:0000000000004F80                 jz      short loc_4F89
.text:0000000000004F82                 mov     byte ptr [rbx], 30h ; '0'
.text:0000000000004F85                 add     rbx, 1
.text:0000000000004F89
.text:0000000000004F89 loc_4F89:                               ; CODE XREF: vasnprintf+360↑j
.text:0000000000004F89                 mov     rsi, [r13+18h]  ; src
.text:0000000000004F8D                 mov     rdx, [r13+20h]
.text:0000000000004F91                 cmp     rsi, rdx
.text:0000000000004F94                 jz      short loc_4FC6
.text:0000000000004F96                 mov     rcx, rdx
.text:0000000000004F99                 mov     rdi, rbx        ; dest
.text:0000000000004F9C                 mov     [rbp+var_3E0], r8
.text:0000000000004FA3                 sub     rcx, rsi
.text:0000000000004FA6                 mov     rdx, rcx        ; n
.text:0000000000004FA9                 mov     [rbp+n], rcx
.text:0000000000004FB0                 call    _memcpy
.text:0000000000004FB5                 mov     rcx, [rbp+n]
.text:0000000000004FBC                 mov     r8, [rbp+var_3E0]
.text:0000000000004FC3                 add     rbx, rcx
.text:0000000000004FC6
.text:0000000000004FC6 loc_4FC6:                               ; CODE XREF: vasnprintf+374↑j
.text:0000000000004FC6                 mov     rsi, [r13+30h]  ; src
.text:0000000000004FCA                 mov     rdx, [r13+38h]
.text:0000000000004FCE                 cmp     rsi, rdx
.text:0000000000004FD1                 jz      short loc_5003
.text:0000000000004FD3                 mov     rcx, rdx
.text:0000000000004FD6                 mov     rdi, rbx        ; dest
.text:0000000000004FD9                 mov     [rbp+var_3E0], r8
.text:0000000000004FE0                 sub     rcx, rsi
.text:0000000000004FE3                 mov     rdx, rcx        ; n
.text:0000000000004FE6                 mov     [rbp+n], rcx
.text:0000000000004FED                 call    _memcpy
.text:0000000000004FF2                 mov     rcx, [rbp+n]
.text:0000000000004FF9                 mov     r8, [rbp+var_3E0]
.text:0000000000005000                 add     rbx, rcx
.text:0000000000005003
.text:0000000000005003 loc_5003:                               ; CODE XREF: vasnprintf+3B1↑j
.text:0000000000005003                 mov     edi, dword ptr [rbp+var_3D0]
.text:0000000000005009                 cmp     edi, 10h
.text:000000000000500C                 ja      short loc_503B
.text:000000000000500E                 mov     eax, 1
.text:0000000000005013                 mov     ecx, edi
.text:0000000000005015                 shl     rax, cl
.text:0000000000005018                 test    eax, 14180h
.text:000000000000501D                 jnz     short loc_5034
.text:000000000000501F                 test    ah, 10h
.text:0000000000005022                 jnz     loc_5980
.text:0000000000005028                 test    ah, 6
.text:000000000000502B                 jz      short loc_503B
.text:000000000000502D                 mov     byte ptr [rbx], 6Ch ; 'l'
.text:0000000000005030                 add     rbx, 1
.text:0000000000005034
.text:0000000000005034 loc_5034:                               ; CODE XREF: vasnprintf+3FD↑j
.text:0000000000005034                 mov     byte ptr [rbx], 6Ch ; 'l'
.text:0000000000005037                 add     rbx, 1
.text:000000000000503B
.text:000000000000503B loc_503B:                               ; CODE XREF: vasnprintf+3EC↑j
.text:000000000000503B                                         ; vasnprintf+40B↑j ...
.text:000000000000503B                 movzx   eax, byte ptr [r13+48h]
.text:0000000000005040                 mov     byte ptr [rbx+1], 0
.text:0000000000005044                 mov     [rbx], al
.text:0000000000005046                 mov     rax, [r13+28h]
.text:000000000000504A                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000504E                 jz      loc_5780
.text:0000000000005054                 shl     rax, 5
.text:0000000000005058                 add     rax, r8
.text:000000000000505B                 cmp     dword ptr [rax], 5
.text:000000000000505E                 jnz     def_517B        ; jumptable 000000000000517B default case, case 0
.text:000000000000505E                                         ; jumptable 0000000000005720 default case
.text:0000000000005064                 mov     eax, [rax+10h]
.text:0000000000005067                 mov     dword ptr [rbp+var_3E0], 1
.text:0000000000005071                 mov     [rbp+var_3B8], eax
.text:0000000000005077
.text:0000000000005077 loc_5077:                               ; CODE XREF: vasnprintf+B6A↓j
.text:0000000000005077                 mov     rax, [r13+40h]
.text:000000000000507B                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000507F                 jz      short loc_50AC
.text:0000000000005081                 shl     rax, 5
.text:0000000000005085                 add     r8, rax
.text:0000000000005088                 cmp     dword ptr [r8], 5
.text:000000000000508C                 jnz     def_517B        ; jumptable 000000000000517B default case, case 0
.text:000000000000508C                                         ; jumptable 0000000000005720 default case
.text:0000000000005092                 mov     eax, dword ptr [rbp+var_3E0]
.text:0000000000005098                 mov     edx, [r8+10h]
.text:000000000000509C                 mov     [rbp+rax*4+var_3B8], edx
.text:00000000000050A3                 lea     eax, [rax+1]
.text:00000000000050A6                 mov     dword ptr [rbp+var_3E0], eax
.text:00000000000050AC
.text:00000000000050AC loc_50AC:                               ; CODE XREF: vasnprintf+45F↑j
.text:00000000000050AC                 mov     rax, r14
.text:00000000000050AF                 xor     edx, edx
.text:00000000000050B1                 add     rax, 2
.text:00000000000050B5                 jb      loc_5D1C
.text:00000000000050BB                 cmp     r12, rax
.text:00000000000050BE                 jnb     short loc_510B
.text:00000000000050C0                 test    r12, r12
.text:00000000000050C3                 jnz     loc_58E8
.text:00000000000050C9                 cmp     rax, 0Ch
.text:00000000000050CD                 ja      loc_5900
.text:00000000000050D3                 mov     r12d, 0Ch
.text:00000000000050D9
.text:00000000000050D9 loc_50D9:                               ; CODE XREF: vasnprintf+CD4↓j
.text:00000000000050D9                 cmp     r15, [rbp+src]
.text:00000000000050E0                 setz    dl
.text:00000000000050E3                 test    r15, r15
.text:00000000000050E6                 jz      loc_5930
.text:00000000000050EC
.text:00000000000050EC loc_50EC:                               ; CODE XREF: vasnprintf+D03↓j
.text:00000000000050EC                 test    dl, dl
.text:00000000000050EE                 jnz     loc_5930
.text:00000000000050F4                 mov     rsi, r12        ; size
.text:00000000000050F7                 mov     rdi, r15        ; ptr
.text:00000000000050FA                 call    _realloc
.text:00000000000050FF                 test    rax, rax
.text:0000000000005102                 jz      loc_4D85
.text:0000000000005108                 mov     r15, rax
.text:000000000000510B
.text:000000000000510B loc_510B:                               ; CODE XREF: vasnprintf+49E↑j
.text:000000000000510B                                         ; vasnprintf+D53↓j ...
.text:000000000000510B                 mov     byte ptr [r15+r14], 0
.text:0000000000005110                 call    ___errno_location
.text:0000000000005115                 mov     [rbp+n], rax
.text:000000000000511C                 mov     eax, [rax]
.text:000000000000511E                 mov     [rbp+var_3F8], rbx
.text:0000000000005125                 mov     [rbp-424h], eax
.text:000000000000512B                 nop     dword ptr [rax+rax+00h]
.text:0000000000005130
.text:0000000000005130 loc_5130:                               ; CODE XREF: vasnprintf+637↓j
.text:0000000000005130                                         ; vasnprintf+68D↓j ...
.text:0000000000005130                 mov     rax, [rbp+n]
.text:0000000000005137                 mov     rbx, r12
.text:000000000000513A                 mov     r10d, 7FFFFFFFh
.text:0000000000005140                 sub     rbx, r14
.text:0000000000005143                 mov     [rbp+var_3BC], 0FFFFFFFFh
.text:000000000000514D                 cmp     rbx, 7FFFFFFFh
.text:0000000000005154                 mov     dword ptr [rax], 0
.text:000000000000515A                 mov     eax, dword ptr [rbp+var_3D0]
.text:0000000000005160                 cmovbe  r10, rbx
.text:0000000000005164                 cmp     eax, 11h        ; switch 18 cases
.text:0000000000005167                 ja      def_517B        ; jumptable 000000000000517B default case, case 0
.text:0000000000005167                                         ; jumptable 0000000000005720 default case
.text:000000000000516D                 lea     rsi, jpt_517B
.text:0000000000005174                 movsxd  rax, ds:(jpt_517B - 79F0h)[rsi+rax*4]
.text:0000000000005178                 add     rax, rsi
.text:000000000000517B                 jmp     rax             ; switch jump
.text:000000000000517B ; ---------------------------------------------------------------------------
.text:000000000000517D                 align 20h
.text:0000000000005180
.text:0000000000005180 loc_5180:                               ; CODE XREF: vasnprintf+55B↑j
.text:0000000000005180                                         ; DATA XREF: .rodata:jpt_517B↓o
.text:0000000000005180                 mov     rax, [r13+50h]  ; jumptable 000000000000517B cases 7-10,15-17
.text:0000000000005184                 lea     rdi, [r15+r14]
.text:0000000000005188                 shl     rax, 5
.text:000000000000518C                 add     rax, [rbp+var_3A8]
.text:0000000000005193                 mov     r9, [rax+10h]
.text:0000000000005197                 mov     eax, dword ptr [rbp+var_3E0]
.text:000000000000519D                 cmp     eax, 1
.text:00000000000051A0                 jz      loc_5668
.text:00000000000051A6                 cmp     eax, 2
.text:00000000000051A9                 jz      loc_5650
.text:00000000000051AF                 sub     rsp, 8
.text:00000000000051B3                 push    [rbp+var_3F0]
.text:00000000000051B9
.text:00000000000051B9 loc_51B9:                               ; CODE XREF: vasnprintf+CBE↓j
.text:00000000000051B9                 mov     r8, [rbp+var_3D8]
.text:00000000000051C0                 mov     rsi, r10
.text:00000000000051C3                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:00000000000051CA                 mov     edx, 1
.text:00000000000051CF                 xor     eax, eax
.text:00000000000051D1                 mov     [rbp+var_430], r10
.text:00000000000051D8                 call    ___snprintf_chk
.text:00000000000051DD                 pop     rsi
.text:00000000000051DE                 pop     rdi
.text:00000000000051DF                 mov     r10, [rbp+var_430]
.text:00000000000051E6
.text:00000000000051E6 loc_51E6:                               ; CODE XREF: vasnprintf+83D↓j
.text:00000000000051E6                                         ; vasnprintf+8BE↓j ...
.text:00000000000051E6                 mov     ecx, [rbp+var_3BC]
.text:00000000000051EC                 test    ecx, ecx
.text:00000000000051EE                 js      loc_532C
.text:00000000000051F4
.text:00000000000051F4 loc_51F4:                               ; CODE XREF: vasnprintf+706↓j
.text:00000000000051F4                 movsxd  rdx, ecx
.text:00000000000051F7                 cmp     rdx, r10
.text:00000000000051FA                 jnb     short loc_520A
.text:00000000000051FC                 add     rdx, r15
.text:00000000000051FF                 cmp     byte ptr [rdx+r14], 0
.text:0000000000005204                 jnz     def_517B        ; jumptable 000000000000517B default case, case 0
.text:0000000000005204                                         ; jumptable 0000000000005720 default case
.text:000000000000520A
.text:000000000000520A loc_520A:                               ; CODE XREF: vasnprintf+5DA↑j
.text:000000000000520A                 cmp     ecx, eax
.text:000000000000520C                 jge     short loc_5216
.text:000000000000520E
.text:000000000000520E loc_520E:                               ; CODE XREF: vasnprintf+71F↓j
.text:000000000000520E                 mov     [rbp+var_3BC], eax
.text:0000000000005214                 mov     ecx, eax
.text:0000000000005216
.text:0000000000005216 loc_5216:                               ; CODE XREF: vasnprintf+5EC↑j
.text:0000000000005216                 lea     eax, [rcx+1]
.text:0000000000005219                 cmp     rax, r10
.text:000000000000521C                 jb      loc_5A50
.text:0000000000005222                 cmp     rbx, 7FFFFFFEh
.text:0000000000005229                 ja      loc_5A70
.text:000000000000522F                 lea     rsi, [r12+r12]
.text:0000000000005233                 lea     edx, [rcx+2]
.text:0000000000005236                 test    r12, r12
.text:0000000000005239                 mov     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000005240                 cmovns  rax, rsi
.text:0000000000005244                 add     rdx, r14
.text:0000000000005247                 jb      loc_5D08
.text:000000000000524D                 cmp     rax, rdx
.text:0000000000005250                 cmovb   rax, rdx
.text:0000000000005254                 cmp     r12, rax
.text:0000000000005257                 jnb     loc_5130
.text:000000000000525D                 test    r12, r12
.text:0000000000005260                 js      loc_4D91
.text:0000000000005266                 cmp     rsi, rax
.text:0000000000005269                 mov     r12, rsi
.text:000000000000526C                 jnb     short loc_527B
.text:000000000000526E                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000005272                 jz      loc_4D91
.text:0000000000005278                 mov     r12, rax
.text:000000000000527B
.text:000000000000527B loc_527B:                               ; CODE XREF: vasnprintf+64C↑j
.text:000000000000527B                 cmp     r15, [rbp+src]
.text:0000000000005282                 setz    bl
.text:0000000000005285                 test    r15, r15
.text:0000000000005288                 jz      loc_5610
.text:000000000000528E                 test    bl, bl
.text:0000000000005290                 jnz     loc_5610
.text:0000000000005296                 mov     rsi, r12        ; size
.text:0000000000005299                 mov     rdi, r15        ; ptr
.text:000000000000529C                 call    _realloc
.text:00000000000052A1                 test    rax, rax
.text:00000000000052A4                 jz      loc_4D91
.text:00000000000052AA                 mov     r15, rax
.text:00000000000052AD                 jmp     loc_5130
.text:00000000000052AD ; ---------------------------------------------------------------------------
.text:00000000000052B2                 align 8
.text:00000000000052B8
.text:00000000000052B8 loc_52B8:                               ; CODE XREF: vasnprintf+55B↑j
.text:00000000000052B8                                         ; DATA XREF: .rodata:jpt_517B↓o
.text:00000000000052B8                 mov     rax, [r13+50h]  ; jumptable 000000000000517B cases 5,6,13,14
.text:00000000000052BC                 lea     rdi, [r15+r14]
.text:00000000000052C0                 shl     rax, 5
.text:00000000000052C4                 add     rax, [rbp+var_3A8]
.text:00000000000052CB                 mov     r9d, [rax+10h]
.text:00000000000052CF                 mov     eax, dword ptr [rbp+var_3E0]
.text:00000000000052D5                 cmp     eax, 1
.text:00000000000052D8                 jz      loc_5510
.text:00000000000052DE
.text:00000000000052DE loc_52DE:                               ; CODE XREF: vasnprintf+8E9↓j
.text:00000000000052DE                                         ; vasnprintf+9B1↓j ...
.text:00000000000052DE                 cmp     eax, 2
.text:00000000000052E1                 jz      loc_5558
.text:00000000000052E7
.text:00000000000052E7 loc_52E7:                               ; CODE XREF: vasnprintf+92E↓j
.text:00000000000052E7                 sub     rsp, 8
.text:00000000000052EB                 push    [rbp+var_3F0]
.text:00000000000052F1
.text:00000000000052F1 loc_52F1:                               ; CODE XREF: vasnprintf+8FF↓j
.text:00000000000052F1                 mov     r8, [rbp+var_3D8]
.text:00000000000052F8                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:00000000000052FF                 mov     edx, 1
.text:0000000000005304                 mov     rsi, r10
.text:0000000000005307                 xor     eax, eax
.text:0000000000005309                 mov     [rbp+var_430], r10
.text:0000000000005310                 call    ___snprintf_chk
.text:0000000000005315                 pop     rdx
.text:0000000000005316                 pop     rcx
.text:0000000000005317                 mov     ecx, [rbp+var_3BC]
.text:000000000000531D                 mov     r10, [rbp+var_430]
.text:0000000000005324                 test    ecx, ecx
.text:0000000000005326                 jns     loc_51F4
.text:000000000000532C
.text:000000000000532C loc_532C:                               ; CODE XREF: vasnprintf+5CE↑j
.text:000000000000532C                 mov     rdi, [rbp+var_3F8]
.text:0000000000005333                 cmp     byte ptr [rdi+1], 0
.text:0000000000005337                 jnz     loc_5678
.text:000000000000533D                 test    eax, eax
.text:000000000000533F                 jns     loc_520E
.text:0000000000005345                 mov     rax, [rbp+n]
.text:000000000000534C                 mov     ebx, [rax]
.text:000000000000534E                 test    ebx, ebx
.text:0000000000005350                 jnz     short loc_5370
.text:0000000000005352                 movzx   eax, byte ptr [r13+48h]
.text:0000000000005357                 mov     ebx, 16h
.text:000000000000535C                 and     eax, 0FFFFFFEFh
.text:000000000000535F                 cmp     al, 63h ; 'c'
.text:0000000000005361                 mov     eax, 54h ; 'T'
.text:0000000000005366                 cmovz   ebx, eax
.text:0000000000005369                 nop     dword ptr [rax+00000000h]
.text:0000000000005370
.text:0000000000005370 loc_5370:                               ; CODE XREF: vasnprintf+730↑j
.text:0000000000005370                 cmp     r15, [rbp+src]
.text:0000000000005377                 jz      short loc_5382
.text:0000000000005379                 test    r15, r15
.text:000000000000537C                 jnz     loc_5B2C
.text:0000000000005382
.text:0000000000005382 loc_5382:                               ; CODE XREF: vasnprintf+757↑j
.text:0000000000005382                                         ; vasnprintf+F14↓j
.text:0000000000005382                 mov     rax, [rbp+ptr]
.text:0000000000005389                 test    rax, rax
.text:000000000000538C                 jz      short loc_5396
.text:000000000000538E                 mov     rdi, rax        ; ptr
.text:0000000000005391                 call    _free
.text:0000000000005396
.text:0000000000005396 loc_5396:                               ; CODE XREF: vasnprintf+76C↑j
.text:0000000000005396                 mov     rax, [rbp+var_408]
.text:000000000000539D                 mov     rdi, [rbp+var_2B8] ; ptr
.text:00000000000053A4                 add     rax, 20h ; ' '
.text:00000000000053A8                 cmp     rdi, rax
.text:00000000000053AB                 jz      short loc_53B2
.text:00000000000053AD                 call    _free
.text:00000000000053B2
.text:00000000000053B2 loc_53B2:                               ; CODE XREF: vasnprintf+78B↑j
.text:00000000000053B2                 mov     rax, [rbp+var_410]
.text:00000000000053B9                 mov     rdi, [rbp+var_3A8] ; ptr
.text:00000000000053C0                 add     rax, 10h
.text:00000000000053C4                 cmp     rdi, rax
.text:00000000000053C7                 jz      short loc_53CE
.text:00000000000053C9                 call    _free
.text:00000000000053CE
.text:00000000000053CE loc_53CE:                               ; CODE XREF: vasnprintf+7A7↑j
.text:00000000000053CE                 mov     rax, [rbp+n]
.text:00000000000053D5                 xor     r15d, r15d
.text:00000000000053D8                 mov     [rax], ebx
.text:00000000000053DA                 jmp     loc_4DFF
.text:00000000000053DA ; ---------------------------------------------------------------------------
.text:00000000000053DF                 align 20h
.text:00000000000053E0
.text:00000000000053E0 loc_53E0:                               ; CODE XREF: vasnprintf+55B↑j
.text:00000000000053E0                                         ; DATA XREF: .rodata:jpt_517B↓o
.text:00000000000053E0                 mov     rax, [r13+50h]  ; jumptable 000000000000517B case 12
.text:00000000000053E4                 lea     rdi, [r15+r14]
.text:00000000000053E8                 shl     rax, 5
.text:00000000000053EC                 add     rax, [rbp+var_3A8]
.text:00000000000053F3                 fld     tbyte ptr [rax+10h]
.text:00000000000053F6                 mov     eax, dword ptr [rbp+var_3E0]
.text:00000000000053FC                 cmp     eax, 1
.text:00000000000053FF                 jz      loc_5A30
.text:0000000000005405                 cmp     eax, 2
.text:0000000000005408                 jnz     loc_58D0
.text:000000000000540E                 mov     eax, [rbp+var_3B4]
.text:0000000000005414                 sub     rsp, 8
.text:0000000000005418                 push    [rbp+var_3F0]
.text:000000000000541E                 mov     r9d, [rbp+var_3B8]
.text:0000000000005425                 mov     r8, [rbp+var_3D8]
.text:000000000000542C                 mov     rsi, r10
.text:000000000000542F                 sub     rsp, 18h
.text:0000000000005433                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:000000000000543A                 mov     edx, 1
.text:000000000000543F                 fstp    [rsp+458h+var_450]
.text:0000000000005443                 push    rax
.text:0000000000005444                 xor     eax, eax
.text:0000000000005446                 mov     [rbp+var_430], r10
.text:000000000000544D                 call    ___snprintf_chk
.text:0000000000005452                 add     rsp, 30h
.text:0000000000005456                 mov     r10, [rbp+var_430]
.text:000000000000545D                 jmp     loc_51E6
.text:000000000000545D ; ---------------------------------------------------------------------------
.text:0000000000005462                 align 8
.text:0000000000005468
.text:0000000000005468 loc_5468:                               ; CODE XREF: vasnprintf+55B↑j
.text:0000000000005468                                         ; DATA XREF: .rodata:jpt_517B↓o
.text:0000000000005468                 mov     rax, [r13+50h]  ; jumptable 000000000000517B case 11
.text:000000000000546C                 lea     rdi, [r15+r14]
.text:0000000000005470                 shl     rax, 5
.text:0000000000005474                 add     rax, [rbp+var_3A8]
.text:000000000000547B                 movsd   xmm0, qword ptr [rax+10h]
.text:0000000000005480                 mov     eax, dword ptr [rbp+var_3E0]
.text:0000000000005486                 cmp     eax, 1
.text:0000000000005489                 jz      loc_5A20
.text:000000000000548F                 cmp     eax, 2
.text:0000000000005492                 jnz     loc_5890
.text:0000000000005498                 mov     eax, [rbp+var_3B4]
.text:000000000000549E                 push    [rbp+var_3F0]
.text:00000000000054A4                 push    rax
.text:00000000000054A5
.text:00000000000054A5 loc_54A5:                               ; CODE XREF: vasnprintf+E0A↓j
.text:00000000000054A5                 mov     r9d, [rbp+var_3B8]
.text:00000000000054AC                 mov     r8, [rbp+var_3D8]
.text:00000000000054B3                 mov     rsi, r10
.text:00000000000054B6                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:00000000000054BD                 mov     edx, 1
.text:00000000000054C2                 mov     eax, 1
.text:00000000000054C7                 mov     [rbp+var_430], r10
.text:00000000000054CE                 call    ___snprintf_chk
.text:00000000000054D3                 pop     r8
.text:00000000000054D5                 mov     r10, [rbp+var_430]
.text:00000000000054DC                 pop     r9
.text:00000000000054DE                 jmp     loc_51E6
.text:00000000000054DE ; ---------------------------------------------------------------------------
.text:00000000000054E3                 align 8
.text:00000000000054E8
.text:00000000000054E8 loc_54E8:                               ; CODE XREF: vasnprintf+55B↑j
.text:00000000000054E8                                         ; DATA XREF: .rodata:jpt_517B↓o
.text:00000000000054E8                 mov     rax, [r13+50h]  ; jumptable 000000000000517B case 4
.text:00000000000054EC                 lea     rdi, [r15+r14]
.text:00000000000054F0                 shl     rax, 5
.text:00000000000054F4                 add     rax, [rbp+var_3A8]
.text:00000000000054FB                 movzx   r9d, word ptr [rax+10h]
.text:0000000000005500                 mov     eax, dword ptr [rbp+var_3E0]
.text:0000000000005506                 cmp     eax, 1
.text:0000000000005509                 jnz     loc_52DE
.text:000000000000550F                 nop
.text:0000000000005510
.text:0000000000005510 loc_5510:                               ; CODE XREF: vasnprintf+6B8↑j
.text:0000000000005510                                         ; vasnprintf+929↓j ...
.text:0000000000005510                 push    [rbp+var_3F0]
.text:0000000000005516                 push    r9
.text:0000000000005518
.text:0000000000005518 loc_5518:                               ; CODE XREF: vasnprintf+A50↓j
.text:0000000000005518                 mov     r9d, [rbp+var_3B8]
.text:000000000000551F                 jmp     loc_52F1
.text:000000000000551F ; ---------------------------------------------------------------------------
.text:0000000000005524                 align 8
.text:0000000000005528
.text:0000000000005528 loc_5528:                               ; CODE XREF: vasnprintf+55B↑j
.text:0000000000005528                                         ; DATA XREF: .rodata:jpt_517B↓o
.text:0000000000005528                 mov     rax, [r13+50h]  ; jumptable 000000000000517B case 3
.text:000000000000552C                 lea     rdi, [r15+r14]
.text:0000000000005530                 shl     rax, 5
.text:0000000000005534                 add     rax, [rbp+var_3A8]
.text:000000000000553B                 movsx   r9d, word ptr [rax+10h]
.text:0000000000005540                 mov     eax, dword ptr [rbp+var_3E0]
.text:0000000000005546                 cmp     eax, 1
.text:0000000000005549                 jz      short loc_5510
.text:000000000000554B                 cmp     eax, 2
.text:000000000000554E                 jnz     loc_52E7
.text:0000000000005554                 nop     dword ptr [rax+00h]
.text:0000000000005558
.text:0000000000005558 loc_5558:                               ; CODE XREF: vasnprintf+6C1↑j
.text:0000000000005558                 sub     rsp, 8
.text:000000000000555C                 push    [rbp+var_3F0]
.text:0000000000005562                 push    r9
.text:0000000000005564
.text:0000000000005564 loc_5564:                               ; CODE XREF: vasnprintf+A3C↓j
.text:0000000000005564                 mov     eax, [rbp+var_3B4]
.text:000000000000556A                 push    rax
.text:000000000000556B
.text:000000000000556B loc_556B:                               ; CODE XREF: vasnprintf+E21↓j
.text:000000000000556B                 mov     r9d, [rbp+var_3B8]
.text:0000000000005572                 mov     r8, [rbp+var_3D8]
.text:0000000000005579                 mov     rsi, r10
.text:000000000000557C                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005583                 mov     edx, 1
.text:0000000000005588                 xor     eax, eax
.text:000000000000558A                 mov     [rbp+var_430], r10
.text:0000000000005591                 call    ___snprintf_chk
.text:0000000000005596                 add     rsp, 20h
.text:000000000000559A                 mov     r10, [rbp+var_430]
.text:00000000000055A1                 jmp     loc_51E6
.text:00000000000055A1 ; ---------------------------------------------------------------------------
.text:00000000000055A6                 align 10h
.text:00000000000055B0
.text:00000000000055B0 loc_55B0:                               ; CODE XREF: vasnprintf+55B↑j
.text:00000000000055B0                                         ; DATA XREF: .rodata:jpt_517B↓o
.text:00000000000055B0                 mov     rax, [r13+50h]  ; jumptable 000000000000517B case 2
.text:00000000000055B4                 lea     rdi, [r15+r14]
.text:00000000000055B8                 shl     rax, 5
.text:00000000000055BC                 add     rax, [rbp+var_3A8]
.text:00000000000055C3                 movzx   r9d, byte ptr [rax+10h]
.text:00000000000055C8                 mov     eax, dword ptr [rbp+var_3E0]
.text:00000000000055CE                 cmp     eax, 1
.text:00000000000055D1                 jnz     loc_52DE
.text:00000000000055D7                 jmp     loc_5510
.text:00000000000055D7 ; ---------------------------------------------------------------------------
.text:00000000000055DC                 align 20h
.text:00000000000055E0
.text:00000000000055E0 loc_55E0:                               ; CODE XREF: vasnprintf+55B↑j
.text:00000000000055E0                                         ; DATA XREF: .rodata:jpt_517B↓o
.text:00000000000055E0                 mov     rax, [r13+50h]  ; jumptable 000000000000517B case 1
.text:00000000000055E4                 lea     rdi, [r15+r14]
.text:00000000000055E8                 shl     rax, 5
.text:00000000000055EC                 add     rax, [rbp+var_3A8]
.text:00000000000055F3                 movsx   r9d, byte ptr [rax+10h]
.text:00000000000055F8                 mov     eax, dword ptr [rbp+var_3E0]
.text:00000000000055FE                 cmp     eax, 1
.text:0000000000005601                 jnz     loc_52DE
.text:0000000000005607                 jmp     loc_5510
.text:0000000000005607 ; ---------------------------------------------------------------------------
.text:000000000000560C                 align 10h
.text:0000000000005610
.text:0000000000005610 loc_5610:                               ; CODE XREF: vasnprintf+668↑j
.text:0000000000005610                                         ; vasnprintf+670↑j
.text:0000000000005610                 mov     rdi, r12        ; size
.text:0000000000005613                 call    _malloc
.text:0000000000005618                 test    rax, rax
.text:000000000000561B                 mov     rcx, rax
.text:000000000000561E                 jz      loc_4D91
.text:0000000000005624                 test    r14, r14
.text:0000000000005627                 jz      loc_56E0
.text:000000000000562D                 test    bl, bl
.text:000000000000562F                 jz      loc_56E0
.text:0000000000005635                 mov     rsi, r15        ; src
.text:0000000000005638                 mov     rdx, r14        ; n
.text:000000000000563B                 mov     rdi, rax        ; dest
.text:000000000000563E                 call    _memcpy
.text:0000000000005643                 mov     r15, rax
.text:0000000000005646                 jmp     loc_5130
.text:0000000000005646 ; ---------------------------------------------------------------------------
.text:000000000000564B                 align 10h
.text:0000000000005650
.text:0000000000005650 loc_5650:                               ; CODE XREF: vasnprintf+589↑j
.text:0000000000005650                 sub     rsp, 8
.text:0000000000005654                 push    [rbp+var_3F0]
.text:000000000000565A                 push    r9
.text:000000000000565C                 jmp     loc_5564
.text:000000000000565C ; ---------------------------------------------------------------------------
.text:0000000000005661                 align 8
.text:0000000000005668
.text:0000000000005668 loc_5668:                               ; CODE XREF: vasnprintf+580↑j
.text:0000000000005668                 push    [rbp+var_3F0]
.text:000000000000566E                 push    r9
.text:0000000000005670                 jmp     loc_5518
.text:0000000000005670 ; ---------------------------------------------------------------------------
.text:0000000000005675                 align 8
.text:0000000000005678
.text:0000000000005678 loc_5678:                               ; CODE XREF: vasnprintf+717↑j
.text:0000000000005678                 mov     byte ptr [rdi+1], 0
.text:000000000000567C                 jmp     loc_5130
.text:000000000000567C ; ---------------------------------------------------------------------------
.text:0000000000005681                 align 8
.text:0000000000005688
.text:0000000000005688 loc_5688:                               ; CODE XREF: vasnprintf+2D3↑j
.text:0000000000005688                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000568C                 jnz     def_517B        ; jumptable 000000000000517B default case, case 0
.text:000000000000568C                                         ; jumptable 0000000000005720 default case
.text:0000000000005692                 mov     rax, r14
.text:0000000000005695                 add     rax, 1
.text:0000000000005699                 mov     rbx, rax
.text:000000000000569C                 jnb     loc_5728
.text:00000000000056A2                 cmp     r12, 0FFFFFFFFFFFFFFFFh
.text:00000000000056A6                 jnz     loc_4D85
.text:00000000000056AC                 mov     rbx, r12
.text:00000000000056AF
.text:00000000000056AF loc_56AF:                               ; CODE XREF: vasnprintf+B0B↓j
.text:00000000000056AF                                         ; vasnprintf+B58↓j ...
.text:00000000000056AF                 mov     byte ptr [r15+r14], 25h ; '%'
.text:00000000000056B4
.text:00000000000056B4 loc_56B4:                               ; CODE XREF: vasnprintf+C46↓j
.text:00000000000056B4                                         ; vasnprintf+D76↓j ...
.text:00000000000056B4                 mov     r8, [r13+8]
.text:00000000000056B8                 add     r13, 58h ; 'X'
.text:00000000000056BC                 mov     rcx, [r13+0]
.text:00000000000056C0                 add     [rbp+var_400], 1
.text:00000000000056C8                 cmp     rcx, r8
.text:00000000000056CB                 jnz     loc_4D69
.text:00000000000056D1
.text:00000000000056D1 loc_56D1:                               ; CODE XREF: vasnprintf+143↑j
.text:00000000000056D1                 mov     r14, rbx
.text:00000000000056D4                 jmp     loc_4ED3
.text:00000000000056D4 ; ---------------------------------------------------------------------------
.text:00000000000056D9                 align 20h
.text:00000000000056E0
.text:00000000000056E0 loc_56E0:                               ; CODE XREF: vasnprintf+A07↑j
.text:00000000000056E0                                         ; vasnprintf+A0F↑j
.text:00000000000056E0                 mov     r15, rcx
.text:00000000000056E3                 jmp     loc_5130
.text:00000000000056E8 ; ---------------------------------------------------------------------------
.text:00000000000056E8
.text:00000000000056E8 loc_56E8:                               ; CODE XREF: vasnprintf+9A↑j
.text:00000000000056E8                                         ; vasnprintf+AE↑j ...
.text:00000000000056E8                 call    ___errno_location
.text:00000000000056ED                 mov     [rbp+n], rax
.text:00000000000056F4                 jmp     loc_4DB7
.text:00000000000056F4 ; ---------------------------------------------------------------------------
.text:00000000000056F9                 align 20h
.text:0000000000005700
.text:0000000000005700 loc_5700:                               ; CODE XREF: vasnprintf+2FC↑j
.text:0000000000005700                 mov     edx, edi
.text:0000000000005702                 sub     edx, 12h        ; switch 5 cases
.text:0000000000005705                 cmp     edx, 4
.text:0000000000005708                 ja      def_517B        ; jumptable 000000000000517B default case, case 0
.text:0000000000005708                                         ; jumptable 0000000000005720 default case
.text:000000000000570E                 lea     rdi, jpt_5720
.text:0000000000005715                 mov     rax, [rax+10h]
.text:0000000000005719                 movsxd  rdx, ds:(jpt_5720 - 7A38h)[rdi+rdx*4]
.text:000000000000571D                 add     rdx, rdi
.text:0000000000005720                 jmp     rdx             ; switch jump
.text:0000000000005720 ; ---------------------------------------------------------------------------
.text:0000000000005722                 align 8
.text:0000000000005728
.text:0000000000005728 loc_5728:                               ; CODE XREF: vasnprintf+A7C↑j
.text:0000000000005728                 cmp     r12, rax
.text:000000000000572B                 jnb     short loc_56AF
.text:000000000000572D                 test    r12, r12
.text:0000000000005730                 jnz     loc_5B00
.text:0000000000005736                 cmp     rax, 0Ch
.text:000000000000573A                 ja      loc_5B12
.text:0000000000005740                 mov     r12d, 0Ch
.text:0000000000005746
.text:0000000000005746 loc_5746:                               ; CODE XREF: vasnprintf+EEC↓j
.text:0000000000005746                                         ; vasnprintf+EFF↓j
.text:0000000000005746                 cmp     r15, [rbp+src]
.text:000000000000574D                 setz    dl
.text:0000000000005750                 test    r15, r15
.text:0000000000005753                 jz      loc_59C0
.text:0000000000005759                 test    dl, dl
.text:000000000000575B                 jnz     loc_59C0
.text:0000000000005761                 mov     rsi, r12        ; size
.text:0000000000005764                 mov     rdi, r15        ; ptr
.text:0000000000005767                 call    _realloc
.text:000000000000576C                 test    rax, rax
.text:000000000000576F                 jz      loc_586B
.text:0000000000005775                 mov     r15, rax
.text:0000000000005778                 jmp     loc_56AF
.text:0000000000005778 ; ---------------------------------------------------------------------------
.text:000000000000577D                 align 20h
.text:0000000000005780
.text:0000000000005780 loc_5780:                               ; CODE XREF: vasnprintf+42E↑j
.text:0000000000005780                 mov     dword ptr [rbp+var_3E0], 0
.text:000000000000578A                 jmp     loc_5077
.text:000000000000578A ; ---------------------------------------------------------------------------
.text:000000000000578F                 align 10h
.text:0000000000005790
.text:0000000000005790 loc_5790:                               ; CODE XREF: vasnprintf+240↑j
.text:0000000000005790                 js      loc_4D85
.text:0000000000005796                 add     r12, r12
.text:0000000000005799                 cmp     r12, rax
.text:000000000000579C                 jnb     loc_4E76
.text:00000000000057A2
.text:00000000000057A2 loc_57A2:                               ; CODE XREF: vasnprintf+24A↑j
.text:00000000000057A2                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000057A6                 jz      loc_4D85
.text:00000000000057AC                 cmp     r15, [rbp+src]
.text:00000000000057B3                 mov     r12, rax
.text:00000000000057B6                 setz    dl
.text:00000000000057B9                 test    r15, r15
.text:00000000000057BC                 jnz     loc_4E89
.text:00000000000057C2                 nop     word ptr [rax+rax+00h]
.text:00000000000057C8
.text:00000000000057C8 loc_57C8:                               ; CODE XREF: vasnprintf+263↑j
.text:00000000000057C8                                         ; vasnprintf+26B↑j
.text:00000000000057C8                 mov     rdi, r12        ; size
.text:00000000000057CB                 mov     [rbp+var_3E0], r8
.text:00000000000057D2                 mov     byte ptr [rbp+var_3D0], dl
.text:00000000000057D8                 mov     [rbp+n], rcx
.text:00000000000057DF                 call    _malloc
.text:00000000000057E4                 test    rax, rax
.text:00000000000057E7                 mov     r9, rax
.text:00000000000057EA                 mov     rcx, [rbp+n]
.text:00000000000057F1                 movzx   edx, byte ptr [rbp+var_3D0]
.text:00000000000057F8                 mov     r8, [rbp+var_3E0]
.text:00000000000057FF                 jz      loc_4D85
.text:0000000000005805                 test    rbx, rbx
.text:0000000000005808                 jz      loc_5A10
.text:000000000000580E                 test    dl, dl
.text:0000000000005810                 jz      loc_5A10
.text:0000000000005816                 mov     rsi, r15        ; src
.text:0000000000005819                 mov     rdx, rbx        ; n
.text:000000000000581C                 mov     rdi, rax        ; dest
.text:000000000000581F                 mov     [rbp+var_3D0], r8
.text:0000000000005826                 mov     [rbp+n], rcx
.text:000000000000582D                 call    _memcpy
.text:0000000000005832                 mov     rcx, [rbp+n]
.text:0000000000005839                 mov     r15, rax
.text:000000000000583C                 mov     r8, [rbp+var_3D0]
.text:0000000000005843                 jmp     loc_4EC4
.text:0000000000005843 ; ---------------------------------------------------------------------------
.text:0000000000005848                 align 10h
.text:0000000000005850
.text:0000000000005850 loc_5850:                               ; CODE XREF: vasnprintf+15F↑j
.text:0000000000005850                 mov     r14, r12
.text:0000000000005853                 jmp     loc_4EC4
.text:0000000000005853 ; ---------------------------------------------------------------------------
.text:0000000000005858                 align 20h
.text:0000000000005860
.text:0000000000005860 loc_5860:                               ; CODE XREF: vasnprintf+B00↑j
.text:0000000000005860                                         ; DATA XREF: .rodata:jpt_5720↓o
.text:0000000000005860                 mov     [rax], r14      ; jumptable 0000000000005720 cases 21,22
.text:0000000000005863                 mov     rbx, r14
.text:0000000000005866                 jmp     loc_56B4
.text:000000000000586B ; ---------------------------------------------------------------------------
.text:000000000000586B
.text:000000000000586B loc_586B:                               ; CODE XREF: vasnprintf+29B↑j
.text:000000000000586B                                         ; vasnprintf+B4F↑j ...
.text:000000000000586B                 call    ___errno_location
.text:0000000000005870                 mov     [rbp+n], rax
.text:0000000000005877                 nop     word ptr [rax+rax+00000000h]
.text:0000000000005880
.text:0000000000005880 loc_5880:                               ; CODE XREF: vasnprintf+17D↑j
.text:0000000000005880                 mov     rdi, r15        ; ptr
.text:0000000000005883                 call    _free
.text:0000000000005888                 jmp     loc_4DA3
.text:0000000000005888 ; ---------------------------------------------------------------------------
.text:000000000000588D                 align 10h
.text:0000000000005890
.text:0000000000005890 loc_5890:                               ; CODE XREF: vasnprintf+872↑j
.text:0000000000005890                 mov     r9, [rbp+var_3F0]
.text:0000000000005897                 mov     r8, [rbp+var_3D8]
.text:000000000000589E                 mov     rsi, r10
.text:00000000000058A1                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:00000000000058A8                 mov     edx, 1
.text:00000000000058AD                 mov     eax, 1
.text:00000000000058B2                 mov     [rbp+var_430], r10
.text:00000000000058B9                 call    ___snprintf_chk
.text:00000000000058BE                 mov     r10, [rbp+var_430]
.text:00000000000058C5                 jmp     loc_51E6
.text:00000000000058C5 ; ---------------------------------------------------------------------------
.text:00000000000058CA                 align 10h
.text:00000000000058D0
.text:00000000000058D0 loc_58D0:                               ; CODE XREF: vasnprintf+7E8↑j
.text:00000000000058D0                 sub     rsp, 10h
.text:00000000000058D4                 mov     r9, [rbp+var_3F0]
.text:00000000000058DB                 fstp    [rsp+440h+var_440]
.text:00000000000058DE                 jmp     loc_51B9
.text:00000000000058DE ; ---------------------------------------------------------------------------
.text:00000000000058E3                 align 8
.text:00000000000058E8
.text:00000000000058E8 loc_58E8:                               ; CODE XREF: vasnprintf+4A3↑j
.text:00000000000058E8                 js      loc_4D85
.text:00000000000058EE                 add     r12, r12
.text:00000000000058F1                 cmp     r12, rax
.text:00000000000058F4                 jnb     loc_50D9
.text:00000000000058FA                 nop     word ptr [rax+rax+00h]
.text:0000000000005900
.text:0000000000005900 loc_5900:                               ; CODE XREF: vasnprintf+4AD↑j
.text:0000000000005900                                         ; vasnprintf+1114↓j
.text:0000000000005900                 test    rdx, rdx
.text:0000000000005903                 jnz     loc_4D85
.text:0000000000005909                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000590D                 jz      loc_4D85
.text:0000000000005913                 cmp     r15, [rbp+src]
.text:000000000000591A                 mov     r12, rax
.text:000000000000591D                 setz    dl
.text:0000000000005920                 test    r15, r15
.text:0000000000005923                 jnz     loc_50EC
.text:0000000000005929                 nop     dword ptr [rax+00000000h]
.text:0000000000005930
.text:0000000000005930 loc_5930:                               ; CODE XREF: vasnprintf+4C6↑j
.text:0000000000005930                                         ; vasnprintf+4CE↑j
.text:0000000000005930                 mov     rdi, r12        ; size
.text:0000000000005933                 mov     byte ptr [rbp+n], dl
.text:0000000000005939                 call    _malloc
.text:000000000000593E                 test    rax, rax
.text:0000000000005941                 mov     rcx, rax
.text:0000000000005944                 movzx   edx, byte ptr [rbp+n]
.text:000000000000594B                 jz      loc_4D85
.text:0000000000005951                 test    r14, r14
.text:0000000000005954                 jz      loc_5AF0
.text:000000000000595A                 test    dl, dl
.text:000000000000595C                 jz      loc_5AF0
.text:0000000000005962                 mov     rsi, r15        ; src
.text:0000000000005965                 mov     rdx, r14        ; n
.text:0000000000005968                 mov     rdi, rax        ; dest
.text:000000000000596B                 call    _memcpy
.text:0000000000005970                 mov     r15, rax
.text:0000000000005973                 jmp     loc_510B
.text:0000000000005973 ; ---------------------------------------------------------------------------
.text:0000000000005978                 align 20h
.text:0000000000005980
.text:0000000000005980 loc_5980:                               ; CODE XREF: vasnprintf+402↑j
.text:0000000000005980                 mov     byte ptr [rbx], 4Ch ; 'L'
.text:0000000000005983                 add     rbx, 1
.text:0000000000005987                 jmp     loc_503B
.text:0000000000005987 ; ---------------------------------------------------------------------------
.text:000000000000598C                 align 10h
.text:0000000000005990
.text:0000000000005990 loc_5990:                               ; CODE XREF: vasnprintf+B00↑j
.text:0000000000005990                                         ; DATA XREF: .rodata:jpt_5720↓o
.text:0000000000005990                 mov     [rax], r14b     ; jumptable 0000000000005720 case 18
.text:0000000000005993                 mov     rbx, r14
.text:0000000000005996                 jmp     loc_56B4
.text:0000000000005996 ; ---------------------------------------------------------------------------
.text:000000000000599B                 align 20h
.text:00000000000059A0
.text:00000000000059A0 loc_59A0:                               ; CODE XREF: vasnprintf+B00↑j
.text:00000000000059A0                                         ; DATA XREF: .rodata:jpt_5720↓o
.text:00000000000059A0                 mov     [rax], r14d     ; jumptable 0000000000005720 case 20
.text:00000000000059A3                 mov     rbx, r14
.text:00000000000059A6                 jmp     loc_56B4
.text:00000000000059A6 ; ---------------------------------------------------------------------------
.text:00000000000059AB                 align 10h
.text:00000000000059B0
.text:00000000000059B0 loc_59B0:                               ; CODE XREF: vasnprintf+B00↑j
.text:00000000000059B0                                         ; DATA XREF: .rodata:jpt_5720↓o
.text:00000000000059B0                 mov     [rax], r14w     ; jumptable 0000000000005720 case 19
.text:00000000000059B4                 mov     rbx, r14
.text:00000000000059B7                 jmp     loc_56B4
.text:00000000000059B7 ; ---------------------------------------------------------------------------
.text:00000000000059BC                 align 20h
.text:00000000000059C0
.text:00000000000059C0 loc_59C0:                               ; CODE XREF: vasnprintf+B33↑j
.text:00000000000059C0                                         ; vasnprintf+B3B↑j
.text:00000000000059C0                 mov     rdi, r12        ; size
.text:00000000000059C3                 mov     byte ptr [rbp+n], dl
.text:00000000000059C9                 call    _malloc
.text:00000000000059CE                 test    rax, rax
.text:00000000000059D1                 mov     rcx, rax
.text:00000000000059D4                 movzx   edx, byte ptr [rbp+n]
.text:00000000000059DB                 jz      loc_4D85
.text:00000000000059E1                 test    r14, r14
.text:00000000000059E4                 jz      loc_5B24
.text:00000000000059EA                 test    dl, dl
.text:00000000000059EC                 jz      loc_5B24
.text:00000000000059F2                 mov     rsi, r15        ; src
.text:00000000000059F5                 mov     rdx, r14        ; n
.text:00000000000059F8                 mov     rdi, rax        ; dest
.text:00000000000059FB                 call    _memcpy
.text:0000000000005A00                 mov     r15, rax
.text:0000000000005A03                 jmp     loc_56AF
.text:0000000000005A03 ; ---------------------------------------------------------------------------
.text:0000000000005A08                 align 10h
.text:0000000000005A10
.text:0000000000005A10 loc_5A10:                               ; CODE XREF: vasnprintf+BE8↑j
.text:0000000000005A10                                         ; vasnprintf+BF0↑j
.text:0000000000005A10                 mov     r15, r9
.text:0000000000005A13                 jmp     loc_4EC4
.text:0000000000005A13 ; ---------------------------------------------------------------------------
.text:0000000000005A18                 align 20h
.text:0000000000005A20
.text:0000000000005A20 loc_5A20:                               ; CODE XREF: vasnprintf+869↑j
.text:0000000000005A20                 sub     rsp, 8
.text:0000000000005A24                 push    [rbp+var_3F0]
.text:0000000000005A2A                 jmp     loc_54A5
.text:0000000000005A2A ; ---------------------------------------------------------------------------
.text:0000000000005A2F                 align 10h
.text:0000000000005A30
.text:0000000000005A30 loc_5A30:                               ; CODE XREF: vasnprintf+7DF↑j
.text:0000000000005A30                 sub     rsp, 8
.text:0000000000005A34                 push    [rbp+var_3F0]
.text:0000000000005A3A                 sub     rsp, 10h
.text:0000000000005A3E                 fstp    [rsp+450h+var_450]
.text:0000000000005A41                 jmp     loc_556B
.text:0000000000005A41 ; ---------------------------------------------------------------------------
.text:0000000000005A46                 align 10h
.text:0000000000005A50
.text:0000000000005A50 loc_5A50:                               ; CODE XREF: vasnprintf+5FC↑j
.text:0000000000005A50                 mov     rax, [rbp+n]
.text:0000000000005A57                 mov     edi, [rbp-424h]
.text:0000000000005A5D                 movsxd  rbx, ecx
.text:0000000000005A60                 add     rbx, r14
.text:0000000000005A63                 mov     [rax], edi
.text:0000000000005A65                 jmp     loc_56B4
.text:0000000000005A65 ; ---------------------------------------------------------------------------
.text:0000000000005A6A                 align 10h
.text:0000000000005A70
.text:0000000000005A70 loc_5A70:                               ; CODE XREF: vasnprintf+609↑j
.text:0000000000005A70                 cmp     r15, [rbp+src]
.text:0000000000005A77                 jz      short loc_5A82
.text:0000000000005A79                 test    r15, r15
.text:0000000000005A7C                 jnz     loc_5B39
.text:0000000000005A82
.text:0000000000005A82 loc_5A82:                               ; CODE XREF: vasnprintf+E57↑j
.text:0000000000005A82                                         ; vasnprintf+F21↓j
.text:0000000000005A82                 mov     rax, [rbp+ptr]
.text:0000000000005A89                 test    rax, rax
.text:0000000000005A8C                 jz      short loc_5A96
.text:0000000000005A8E                 mov     rdi, rax        ; ptr
.text:0000000000005A91                 call    _free
.text:0000000000005A96
.text:0000000000005A96 loc_5A96:                               ; CODE XREF: vasnprintf+E6C↑j
.text:0000000000005A96                 mov     rax, [rbp+var_408]
.text:0000000000005A9D                 mov     rdi, [rbp+var_2B8] ; ptr
.text:0000000000005AA4                 add     rax, 20h ; ' '
.text:0000000000005AA8                 cmp     rdi, rax
.text:0000000000005AAB                 jz      short loc_5AB2
.text:0000000000005AAD                 call    _free
.text:0000000000005AB2
.text:0000000000005AB2 loc_5AB2:                               ; CODE XREF: vasnprintf+E8B↑j
.text:0000000000005AB2                 mov     rax, [rbp+var_410]
.text:0000000000005AB9                 mov     rdi, [rbp+var_3A8] ; ptr
.text:0000000000005AC0                 add     rax, 10h
.text:0000000000005AC4                 cmp     rdi, rax
.text:0000000000005AC7                 jz      short loc_5ACE
.text:0000000000005AC9                 call    _free
.text:0000000000005ACE
.text:0000000000005ACE loc_5ACE:                               ; CODE XREF: vasnprintf+EA7↑j
.text:0000000000005ACE                 mov     rax, [rbp+n]
.text:0000000000005AD5                 xor     r15d, r15d
.text:0000000000005AD8                 mov     dword ptr [rax], 4Bh ; 'K'
.text:0000000000005ADE                 jmp     loc_4DFF
.text:0000000000005ADE ; ---------------------------------------------------------------------------
.text:0000000000005AE3                 align 8
.text:0000000000005AE8
.text:0000000000005AE8 loc_5AE8:                               ; CODE XREF: vasnprintf+60↑j
.text:0000000000005AE8                 xor     r15d, r15d
.text:0000000000005AEB                 jmp     loc_4DFF
.text:0000000000005AF0 ; ---------------------------------------------------------------------------
.text:0000000000005AF0
.text:0000000000005AF0 loc_5AF0:                               ; CODE XREF: vasnprintf+D34↑j
.text:0000000000005AF0                                         ; vasnprintf+D3C↑j
.text:0000000000005AF0                 mov     r15, rcx
.text:0000000000005AF3                 jmp     loc_510B
.text:0000000000005AF3 ; ---------------------------------------------------------------------------
.text:0000000000005AF8                 align 20h
.text:0000000000005B00
.text:0000000000005B00 loc_5B00:                               ; CODE XREF: vasnprintf+B10↑j
.text:0000000000005B00                 js      loc_4D85
.text:0000000000005B06                 add     r12, r12
.text:0000000000005B09                 cmp     r12, rax
.text:0000000000005B0C                 jnb     loc_5746
.text:0000000000005B12
.text:0000000000005B12 loc_5B12:                               ; CODE XREF: vasnprintf+B1A↑j
.text:0000000000005B12                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000005B16                 jz      loc_4D85
.text:0000000000005B1C                 mov     r12, rax
.text:0000000000005B1F                 jmp     loc_5746
.text:0000000000005B24 ; ---------------------------------------------------------------------------
.text:0000000000005B24
.text:0000000000005B24 loc_5B24:                               ; CODE XREF: vasnprintf+DC4↑j
.text:0000000000005B24                                         ; vasnprintf+DCC↑j
.text:0000000000005B24                 mov     r15, rcx
.text:0000000000005B27                 jmp     loc_56AF
.text:0000000000005B2C ; ---------------------------------------------------------------------------
.text:0000000000005B2C
.text:0000000000005B2C loc_5B2C:                               ; CODE XREF: vasnprintf+75C↑j
.text:0000000000005B2C                 mov     rdi, r15        ; ptr
.text:0000000000005B2F                 call    _free
.text:0000000000005B34                 jmp     loc_5382
.text:0000000000005B39 ; ---------------------------------------------------------------------------
.text:0000000000005B39
.text:0000000000005B39 loc_5B39:                               ; CODE XREF: vasnprintf+E5C↑j
.text:0000000000005B39                 mov     rdi, r15        ; ptr
.text:0000000000005B3C                 call    _free
.text:0000000000005B41                 jmp     loc_5A82
.text:0000000000005B46 ; ---------------------------------------------------------------------------
.text:0000000000005B46
.text:0000000000005B46 def_517B:                               ; CODE XREF: vasnprintf+2DD↑j
.text:0000000000005B46                                         ; vasnprintf+43E↑j ...
.text:0000000000005B46                 call    _abort          ; jumptable 000000000000517B default case, case 0
.text:0000000000005B46                                         ; jumptable 0000000000005720 default case
.text:0000000000005B46 ; ---------------------------------------------------------------------------
.text:0000000000005B4B                 align 10h
.text:0000000000005B50
.text:0000000000005B50 loc_5B50:                               ; CODE XREF: vasnprintf+73↑j
.text:0000000000005B50                 mov     rax, [rbp+var_408]
.text:0000000000005B57                 mov     rdi, [rbp+var_2B8] ; ptr
.text:0000000000005B5E                 add     rax, 20h ; ' '
.text:0000000000005B62                 cmp     rdi, rax
.text:0000000000005B65                 jz      short loc_5B6C
.text:0000000000005B67                 call    _free
.text:0000000000005B6C
.text:0000000000005B6C loc_5B6C:                               ; CODE XREF: vasnprintf+F45↑j
.text:0000000000005B6C                 mov     rax, [rbp+var_410]
.text:0000000000005B73                 mov     rdi, [rbp+var_3A8] ; ptr
.text:0000000000005B7A                 add     rax, 10h
.text:0000000000005B7E                 cmp     rdi, rax
.text:0000000000005B81                 jz      short loc_5B88
.text:0000000000005B83                 call    _free
.text:0000000000005B88
.text:0000000000005B88 loc_5B88:                               ; CODE XREF: vasnprintf+F61↑j
.text:0000000000005B88                 call    ___errno_location
.text:0000000000005B8D                 xor     r15d, r15d
.text:0000000000005B90                 mov     dword ptr [rax], 16h
.text:0000000000005B96                 jmp     loc_4DFF
.text:0000000000005B9B ; ---------------------------------------------------------------------------
.text:0000000000005B9B
.text:0000000000005B9B loc_5B9B:                               ; CODE XREF: vasnprintf+2C1↑j
.text:0000000000005B9B                 mov     rbx, r14
.text:0000000000005B9E                 xor     eax, eax
.text:0000000000005BA0                 add     rbx, 1
.text:0000000000005BA4                 jb      loc_5CB0
.text:0000000000005BAA                 cmp     r12, rbx
.text:0000000000005BAD                 jnb     short loc_5BFC
.text:0000000000005BAF                 test    r12, r12
.text:0000000000005BB2                 jnz     loc_5CE9
.text:0000000000005BB8                 cmp     rbx, 0Ch
.text:0000000000005BBC                 ja      loc_5CCE
.text:0000000000005BC2                 mov     r12d, 0Ch
.text:0000000000005BC8
.text:0000000000005BC8 loc_5BC8:                               ; CODE XREF: vasnprintf+10C4↓j
.text:0000000000005BC8                                         ; vasnprintf+10D5↓j
.text:0000000000005BC8                 cmp     r15, [rbp+src]
.text:0000000000005BCF                 setz    r13b
.text:0000000000005BD3                 test    r15, r15
.text:0000000000005BD6                 jz      loc_5C7C
.text:0000000000005BDC                 test    r13b, r13b
.text:0000000000005BDF                 jnz     loc_5C7C
.text:0000000000005BE5                 mov     rsi, r12        ; size
.text:0000000000005BE8                 mov     rdi, r15        ; ptr
.text:0000000000005BEB                 call    _realloc
.text:0000000000005BF0                 test    rax, rax
.text:0000000000005BF3                 jz      loc_586B
.text:0000000000005BF9                 mov     r15, rax
.text:0000000000005BFC
.text:0000000000005BFC loc_5BFC:                               ; CODE XREF: vasnprintf+F8D↑j
.text:0000000000005BFC                                         ; vasnprintf+108B↓j ...
.text:0000000000005BFC                 cmp     r15, [rbp+src]
.text:0000000000005C03                 mov     byte ptr [r15+r14], 0
.text:0000000000005C08                 jz      short loc_5C21
.text:0000000000005C0A                 cmp     r12, rbx
.text:0000000000005C0D                 jbe     short loc_5C21
.text:0000000000005C0F                 mov     rdi, r15        ; ptr
.text:0000000000005C12                 mov     rsi, rbx        ; size
.text:0000000000005C15                 call    _realloc
.text:0000000000005C1A                 test    rax, rax
.text:0000000000005C1D                 cmovnz  r15, rax
.text:0000000000005C21
.text:0000000000005C21 loc_5C21:                               ; CODE XREF: vasnprintf+FE8↑j
.text:0000000000005C21                                         ; vasnprintf+FED↑j
.text:0000000000005C21                 mov     rax, [rbp+ptr]
.text:0000000000005C28                 test    rax, rax
.text:0000000000005C2B                 jz      short loc_5C35
.text:0000000000005C2D                 mov     rdi, rax        ; ptr
.text:0000000000005C30                 call    _free
.text:0000000000005C35
.text:0000000000005C35 loc_5C35:                               ; CODE XREF: vasnprintf+100B↑j
.text:0000000000005C35                 mov     rax, [rbp+var_408]
.text:0000000000005C3C                 mov     rdi, [rbp+var_2B8] ; ptr
.text:0000000000005C43                 add     rax, 20h ; ' '
.text:0000000000005C47                 cmp     rdi, rax
.text:0000000000005C4A                 jz      short loc_5C51
.text:0000000000005C4C                 call    _free
.text:0000000000005C51
.text:0000000000005C51 loc_5C51:                               ; CODE XREF: vasnprintf+102A↑j
.text:0000000000005C51                 mov     rax, [rbp+var_410]
.text:0000000000005C58                 mov     rdi, [rbp+var_3A8] ; ptr
.text:0000000000005C5F                 add     rax, 10h
.text:0000000000005C63                 cmp     rdi, rax
.text:0000000000005C66                 jz      short loc_5C6D
.text:0000000000005C68                 call    _free
.text:0000000000005C6D
.text:0000000000005C6D loc_5C6D:                               ; CODE XREF: vasnprintf+1046↑j
.text:0000000000005C6D                 mov     rax, [rbp+var_418]
.text:0000000000005C74                 mov     [rax], r14
.text:0000000000005C77                 jmp     loc_4DFF
.text:0000000000005C7C ; ---------------------------------------------------------------------------
.text:0000000000005C7C
.text:0000000000005C7C loc_5C7C:                               ; CODE XREF: vasnprintf+FB6↑j
.text:0000000000005C7C                                         ; vasnprintf+FBF↑j
.text:0000000000005C7C                 mov     rdi, r12        ; size
.text:0000000000005C7F                 call    _malloc
.text:0000000000005C84                 test    rax, rax
.text:0000000000005C87                 mov     rcx, rax
.text:0000000000005C8A                 jz      loc_4D85
.text:0000000000005C90                 test    r14, r14
.text:0000000000005C93                 jz      short loc_5D00
.text:0000000000005C95                 test    r13b, r13b
.text:0000000000005C98                 jz      short loc_5D00
.text:0000000000005C9A                 mov     rsi, r15        ; src
.text:0000000000005C9D                 mov     rdx, r14        ; n
.text:0000000000005CA0                 mov     rdi, rax        ; dest
.text:0000000000005CA3                 call    _memcpy
.text:0000000000005CA8                 mov     r15, rax
.text:0000000000005CAB                 jmp     loc_5BFC
.text:0000000000005CB0 ; ---------------------------------------------------------------------------
.text:0000000000005CB0
.text:0000000000005CB0 loc_5CB0:                               ; CODE XREF: vasnprintf+F84↑j
.text:0000000000005CB0                 cmp     r12, 0FFFFFFFFFFFFFFFFh
.text:0000000000005CB4                 mov     eax, 1
.text:0000000000005CB9                 jz      loc_5BFC
.text:0000000000005CBF                 test    r12, r12
.text:0000000000005CC2                 jz      loc_4D85
.text:0000000000005CC8                 js      loc_4D85
.text:0000000000005CCE
.text:0000000000005CCE loc_5CCE:                               ; CODE XREF: vasnprintf+F9C↑j
.text:0000000000005CCE                                         ; vasnprintf+10DB↓j
.text:0000000000005CCE                 test    rax, rax
.text:0000000000005CD1                 jnz     loc_4D85
.text:0000000000005CD7                 cmp     rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005CDB                 jz      loc_4D85
.text:0000000000005CE1                 mov     r12, rbx
.text:0000000000005CE4                 jmp     loc_5BC8
.text:0000000000005CE9 ; ---------------------------------------------------------------------------
.text:0000000000005CE9
.text:0000000000005CE9 loc_5CE9:                               ; CODE XREF: vasnprintf+F92↑j
.text:0000000000005CE9                 js      loc_4D85
.text:0000000000005CEF                 add     r12, r12
.text:0000000000005CF2                 cmp     r12, rbx
.text:0000000000005CF5                 jnb     loc_5BC8
.text:0000000000005CFB                 jmp     short loc_5CCE
.text:0000000000005CFB ; ---------------------------------------------------------------------------
.text:0000000000005CFD                 align 20h
.text:0000000000005D00
.text:0000000000005D00 loc_5D00:                               ; CODE XREF: vasnprintf+1073↑j
.text:0000000000005D00                                         ; vasnprintf+1078↑j
.text:0000000000005D00                 mov     r15, rcx
.text:0000000000005D03                 jmp     loc_5BFC
.text:0000000000005D08 ; ---------------------------------------------------------------------------
.text:0000000000005D08
.text:0000000000005D08 loc_5D08:                               ; CODE XREF: vasnprintf+627↑j
.text:0000000000005D08                 cmp     r12, 0FFFFFFFFFFFFFFFFh
.text:0000000000005D0C                 jz      loc_5130
.text:0000000000005D12                 jmp     loc_4D91
.text:0000000000005D17 ; ---------------------------------------------------------------------------
.text:0000000000005D17
.text:0000000000005D17 loc_5D17:                               ; CODE XREF: vasnprintf+1EF↑j
.text:0000000000005D17                 call    ___stack_chk_fail
.text:0000000000005D1C ; ---------------------------------------------------------------------------
.text:0000000000005D1C
.text:0000000000005D1C loc_5D1C:                               ; CODE XREF: vasnprintf+495↑j
.text:0000000000005D1C                 cmp     r12, 0FFFFFFFFFFFFFFFFh
.text:0000000000005D20                 mov     edx, 1
.text:0000000000005D25                 jz      loc_510B
.text:0000000000005D2B                 test    r12, r12
.text:0000000000005D2E                 jz      loc_4D85
.text:0000000000005D34                 jns     loc_5900
.text:0000000000005D3A                 jmp     loc_4D85
.text:0000000000005D3A ; } // starts at 4C20
.text:0000000000005D3A vasnprintf      endp
.text:0000000000005D3A
.text:0000000000005D3A ; ---------------------------------------------------------------------------
.text:0000000000005D3F                 align 20h
.text:0000000000005D40
.text:0000000000005D40 ; =============== S U B R O U T I N E =======================================
.text:0000000000005D40
.text:0000000000005D40
.text:0000000000005D40                 public printf_fetchargs
.text:0000000000005D40 printf_fetchargs proc near              ; CODE XREF: vasnprintf+6C↑p
.text:0000000000005D40 ; __unwind {
.text:0000000000005D40                 cmp     qword ptr [rsi], 0
.text:0000000000005D44                 mov     rax, [rsi+8]
.text:0000000000005D48                 jz      short loc_5DAD
.text:0000000000005D4A                 lea     r8, jpt_5D76
.text:0000000000005D51                 lea     r10, wide_null_string_2696
.text:0000000000005D58                 lea     r9, aNull       ; "(NULL)"
.text:0000000000005D5F                 xor     ecx, ecx
.text:0000000000005D61                 nop     dword ptr [rax+00000000h]
.text:0000000000005D68
.text:0000000000005D68 loc_5D68:                               ; CODE XREF: printf_fetchargs+6B↓j
.text:0000000000005D68                 cmp     dword ptr [rax], 16h ; switch 23 cases
.text:0000000000005D6B                 ja      short def_5D76  ; jumptable 0000000000005D76 default case, case 0
.text:0000000000005D6D                 mov     edx, [rax]
.text:0000000000005D6F                 movsxd  rdx, ds:(jpt_5D76 - 7A60h)[r8+rdx*4]
.text:0000000000005D73                 add     rdx, r8
.text:0000000000005D76                 jmp     rdx             ; switch jump
.text:0000000000005D76 ; ---------------------------------------------------------------------------
.text:0000000000005D78                 align 20h
.text:0000000000005D80
.text:0000000000005D80 loc_5D80:                               ; CODE XREF: printf_fetchargs+36↑j
.text:0000000000005D80                                         ; DATA XREF: .rodata:jpt_5D76↓o
.text:0000000000005D80                 mov     rdx, [rdi+8]    ; jumptable 0000000000005D76 case 12
.text:0000000000005D84                 add     rdx, 0Fh
.text:0000000000005D88                 and     rdx, 0FFFFFFFFFFFFFFF0h
.text:0000000000005D8C                 lea     r11, [rdx+10h]
.text:0000000000005D90                 mov     [rdi+8], r11
.text:0000000000005D94                 fld     tbyte ptr [rdx]
.text:0000000000005D96                 fstp    tbyte ptr [rax+10h]
.text:0000000000005D99                 nop     dword ptr [rax+00000000h]
.text:0000000000005DA0
.text:0000000000005DA0 loc_5DA0:                               ; CODE XREF: printf_fetchargs+98↓j
.text:0000000000005DA0                                         ; printf_fetchargs+BA↓j ...
.text:0000000000005DA0                 add     rcx, 1
.text:0000000000005DA4                 add     rax, 20h ; ' '
.text:0000000000005DA8                 cmp     [rsi], rcx
.text:0000000000005DAB                 ja      short loc_5D68
.text:0000000000005DAD
.text:0000000000005DAD loc_5DAD:                               ; CODE XREF: printf_fetchargs+8↑j
.text:0000000000005DAD                 xor     eax, eax
.text:0000000000005DAF                 retn
.text:0000000000005DB0 ; ---------------------------------------------------------------------------
.text:0000000000005DB0
.text:0000000000005DB0 def_5D76:                               ; CODE XREF: printf_fetchargs+2B↑j
.text:0000000000005DB0                                         ; printf_fetchargs+36↑j
.text:0000000000005DB0                                         ; DATA XREF: ...
.text:0000000000005DB0                 mov     eax, 0FFFFFFFFh ; jumptable 0000000000005D76 default case, case 0
.text:0000000000005DB5                 retn
.text:0000000000005DB6 ; ---------------------------------------------------------------------------
.text:0000000000005DB6
.text:0000000000005DB6 loc_5DB6:                               ; CODE XREF: printf_fetchargs+36↑j
.text:0000000000005DB6                                         ; DATA XREF: .rodata:jpt_5D76↓o
.text:0000000000005DB6                 mov     r11d, [rdi]     ; jumptable 0000000000005D76 cases 7-10,17-22
.text:0000000000005DB9                 cmp     r11d, 2Fh ; '/'
.text:0000000000005DBD                 ja      loc_5EFA
.text:0000000000005DC3                 mov     edx, r11d
.text:0000000000005DC6                 add     rdx, [rdi+10h]
.text:0000000000005DCA                 add     r11d, 8
.text:0000000000005DCE                 mov     [rdi], r11d
.text:0000000000005DD1
.text:0000000000005DD1 loc_5DD1:                               ; CODE XREF: printf_fetchargs+1C6↓j
.text:0000000000005DD1                 mov     rdx, [rdx]
.text:0000000000005DD4                 mov     [rax+10h], rdx
.text:0000000000005DD8                 jmp     short loc_5DA0
.text:0000000000005DDA ; ---------------------------------------------------------------------------
.text:0000000000005DDA
.text:0000000000005DDA loc_5DDA:                               ; CODE XREF: printf_fetchargs+36↑j
.text:0000000000005DDA                                         ; DATA XREF: .rodata:jpt_5D76↓o
.text:0000000000005DDA                 mov     r11d, [rdi]     ; jumptable 0000000000005D76 cases 5,6,13,14
.text:0000000000005DDD                 cmp     r11d, 2Fh ; '/'
.text:0000000000005DE1                 ja      loc_5F1C
.text:0000000000005DE7                 mov     edx, r11d
.text:0000000000005DEA                 add     rdx, [rdi+10h]
.text:0000000000005DEE                 add     r11d, 8
.text:0000000000005DF2                 mov     [rdi], r11d
.text:0000000000005DF5
.text:0000000000005DF5 loc_5DF5:                               ; CODE XREF: printf_fetchargs+1E8↓j
.text:0000000000005DF5                 mov     edx, [rdx]
.text:0000000000005DF7                 mov     [rax+10h], edx
.text:0000000000005DFA                 jmp     short loc_5DA0
.text:0000000000005DFC ; ---------------------------------------------------------------------------
.text:0000000000005DFC
.text:0000000000005DFC loc_5DFC:                               ; CODE XREF: printf_fetchargs+36↑j
.text:0000000000005DFC                                         ; DATA XREF: .rodata:jpt_5D76↓o
.text:0000000000005DFC                 mov     r11d, [rdi]     ; jumptable 0000000000005D76 cases 1,2
.text:0000000000005DFF                 cmp     r11d, 2Fh ; '/'
.text:0000000000005E03                 ja      loc_5F0B
.text:0000000000005E09                 mov     edx, r11d
.text:0000000000005E0C                 add     rdx, [rdi+10h]
.text:0000000000005E10                 add     r11d, 8
.text:0000000000005E14                 mov     [rdi], r11d
.text:0000000000005E17
.text:0000000000005E17 loc_5E17:                               ; CODE XREF: printf_fetchargs+1D7↓j
.text:0000000000005E17                 mov     edx, [rdx]
.text:0000000000005E19                 mov     [rax+10h], dl
.text:0000000000005E1C                 jmp     short loc_5DA0
.text:0000000000005E1E ; ---------------------------------------------------------------------------
.text:0000000000005E1E
.text:0000000000005E1E loc_5E1E:                               ; CODE XREF: printf_fetchargs+36↑j
.text:0000000000005E1E                                         ; DATA XREF: .rodata:jpt_5D76↓o
.text:0000000000005E1E                 mov     r11d, [rdi]     ; jumptable 0000000000005D76 cases 3,4
.text:0000000000005E21                 cmp     r11d, 2Fh ; '/'
.text:0000000000005E25                 ja      loc_5ECA
.text:0000000000005E2B                 mov     edx, r11d
.text:0000000000005E2E                 add     rdx, [rdi+10h]
.text:0000000000005E32                 add     r11d, 8
.text:0000000000005E36                 mov     [rdi], r11d
.text:0000000000005E39
.text:0000000000005E39 loc_5E39:                               ; CODE XREF: printf_fetchargs+196↓j
.text:0000000000005E39                 mov     edx, [rdx]
.text:0000000000005E3B                 mov     [rax+10h], dx
.text:0000000000005E3F                 jmp     loc_5DA0
.text:0000000000005E44 ; ---------------------------------------------------------------------------
.text:0000000000005E44
.text:0000000000005E44 loc_5E44:                               ; CODE XREF: printf_fetchargs+36↑j
.text:0000000000005E44                                         ; DATA XREF: .rodata:jpt_5D76↓o
.text:0000000000005E44                 mov     r11d, [rdi]     ; jumptable 0000000000005D76 case 15
.text:0000000000005E47                 cmp     r11d, 2Fh ; '/'
.text:0000000000005E4B                 ja      loc_5EDB
.text:0000000000005E51                 mov     edx, r11d
.text:0000000000005E54                 add     rdx, [rdi+10h]
.text:0000000000005E58                 add     r11d, 8
.text:0000000000005E5C                 mov     [rdi], r11d
.text:0000000000005E5F
.text:0000000000005E5F loc_5E5F:                               ; CODE XREF: printf_fetchargs+1A7↓j
.text:0000000000005E5F                 mov     rdx, [rdx]
.text:0000000000005E62                 test    rdx, rdx
.text:0000000000005E65                 cmovz   rdx, r9
.text:0000000000005E69                 mov     [rax+10h], rdx
.text:0000000000005E6D                 jmp     loc_5DA0
.text:0000000000005E72 ; ---------------------------------------------------------------------------
.text:0000000000005E72
.text:0000000000005E72 loc_5E72:                               ; CODE XREF: printf_fetchargs+36↑j
.text:0000000000005E72                                         ; DATA XREF: .rodata:jpt_5D76↓o
.text:0000000000005E72                 mov     r11d, [rdi+4]   ; jumptable 0000000000005D76 case 11
.text:0000000000005E76                 cmp     r11d, 0AFh
.text:0000000000005E7D                 ja      loc_5F2D
.text:0000000000005E83                 mov     edx, r11d
.text:0000000000005E86                 add     rdx, [rdi+10h]
.text:0000000000005E8A                 add     r11d, 10h
.text:0000000000005E8E                 mov     [rdi+4], r11d
.text:0000000000005E92
.text:0000000000005E92 loc_5E92:                               ; CODE XREF: printf_fetchargs+1F9↓j
.text:0000000000005E92                 movsd   xmm0, qword ptr [rdx]
.text:0000000000005E96                 movsd   qword ptr [rax+10h], xmm0
.text:0000000000005E9B                 jmp     loc_5DA0
.text:0000000000005EA0 ; ---------------------------------------------------------------------------
.text:0000000000005EA0
.text:0000000000005EA0 loc_5EA0:                               ; CODE XREF: printf_fetchargs+36↑j
.text:0000000000005EA0                                         ; DATA XREF: .rodata:jpt_5D76↓o
.text:0000000000005EA0                 mov     r11d, [rdi]     ; jumptable 0000000000005D76 case 16
.text:0000000000005EA3                 cmp     r11d, 2Fh ; '/'
.text:0000000000005EA7                 ja      short loc_5EEC
.text:0000000000005EA9                 mov     edx, r11d
.text:0000000000005EAC                 add     rdx, [rdi+10h]
.text:0000000000005EB0                 add     r11d, 8
.text:0000000000005EB4                 mov     [rdi], r11d
.text:0000000000005EB7
.text:0000000000005EB7 loc_5EB7:                               ; CODE XREF: printf_fetchargs+1B8↓j
.text:0000000000005EB7                 mov     rdx, [rdx]
.text:0000000000005EBA                 test    rdx, rdx
.text:0000000000005EBD                 cmovz   rdx, r10
.text:0000000000005EC1                 mov     [rax+10h], rdx
.text:0000000000005EC5                 jmp     loc_5DA0
.text:0000000000005ECA ; ---------------------------------------------------------------------------
.text:0000000000005ECA
.text:0000000000005ECA loc_5ECA:                               ; CODE XREF: printf_fetchargs+E5↑j
.text:0000000000005ECA                 mov     rdx, [rdi+8]
.text:0000000000005ECE                 lea     r11, [rdx+8]
.text:0000000000005ED2                 mov     [rdi+8], r11
.text:0000000000005ED6                 jmp     loc_5E39
.text:0000000000005EDB ; ---------------------------------------------------------------------------
.text:0000000000005EDB
.text:0000000000005EDB loc_5EDB:                               ; CODE XREF: printf_fetchargs+10B↑j
.text:0000000000005EDB                 mov     rdx, [rdi+8]
.text:0000000000005EDF                 lea     r11, [rdx+8]
.text:0000000000005EE3                 mov     [rdi+8], r11
.text:0000000000005EE7                 jmp     loc_5E5F
.text:0000000000005EEC ; ---------------------------------------------------------------------------
.text:0000000000005EEC
.text:0000000000005EEC loc_5EEC:                               ; CODE XREF: printf_fetchargs+167↑j
.text:0000000000005EEC                 mov     rdx, [rdi+8]
.text:0000000000005EF0                 lea     r11, [rdx+8]
.text:0000000000005EF4                 mov     [rdi+8], r11
.text:0000000000005EF8                 jmp     short loc_5EB7
.text:0000000000005EFA ; ---------------------------------------------------------------------------
.text:0000000000005EFA
.text:0000000000005EFA loc_5EFA:                               ; CODE XREF: printf_fetchargs+7D↑j
.text:0000000000005EFA                 mov     rdx, [rdi+8]
.text:0000000000005EFE                 lea     r11, [rdx+8]
.text:0000000000005F02                 mov     [rdi+8], r11
.text:0000000000005F06                 jmp     loc_5DD1
.text:0000000000005F0B ; ---------------------------------------------------------------------------
.text:0000000000005F0B
.text:0000000000005F0B loc_5F0B:                               ; CODE XREF: printf_fetchargs+C3↑j
.text:0000000000005F0B                 mov     rdx, [rdi+8]
.text:0000000000005F0F                 lea     r11, [rdx+8]
.text:0000000000005F13                 mov     [rdi+8], r11
.text:0000000000005F17                 jmp     loc_5E17
.text:0000000000005F1C ; ---------------------------------------------------------------------------
.text:0000000000005F1C
.text:0000000000005F1C loc_5F1C:                               ; CODE XREF: printf_fetchargs+A1↑j
.text:0000000000005F1C                 mov     rdx, [rdi+8]
.text:0000000000005F20                 lea     r11, [rdx+8]
.text:0000000000005F24                 mov     [rdi+8], r11
.text:0000000000005F28                 jmp     loc_5DF5
.text:0000000000005F2D ; ---------------------------------------------------------------------------
.text:0000000000005F2D
.text:0000000000005F2D loc_5F2D:                               ; CODE XREF: printf_fetchargs+13D↑j
.text:0000000000005F2D                 mov     rdx, [rdi+8]
.text:0000000000005F31                 lea     r11, [rdx+8]
.text:0000000000005F35                 mov     [rdi+8], r11
.text:0000000000005F39                 jmp     loc_5E92
.text:0000000000005F39 ; } // starts at 5D40
.text:0000000000005F39 printf_fetchargs endp
.text:0000000000005F39
.text:0000000000005F39 ; ---------------------------------------------------------------------------
.text:0000000000005F3E                 align 20h
.text:0000000000005F40 ; File Name   : /home/ig/disk_vd/vdtests/input/x64_upacks_151/9b7ebdf6382e17b3d79a9c42c370bb6b
.text:0000000000005F40 ; Format      : ELF64 for x86-64 (Relocatable)
.text:0000000000005F40 ;
.text:0000000000005F40 ; Source File : 'printf-parse.c'
.text:0000000000005F40
.text:0000000000005F40 ; =============== S U B R O U T I N E =======================================
.text:0000000000005F40
.text:0000000000005F40 ; Attributes: info_from_lumina
.text:0000000000005F40
.text:0000000000005F40 ; int __fastcall printf_parse(const char *format, char_directives *d, arguments *a)
.text:0000000000005F40                 public printf_parse
.text:0000000000005F40 printf_parse    proc near               ; CODE XREF: vasnprintf+59↑p
.text:0000000000005F40
.text:0000000000005F40 src             = qword ptr -80h
.text:0000000000005F40 var_78          = qword ptr -78h
.text:0000000000005F40 var_70          = qword ptr -70h
.text:0000000000005F40 var_68          = qword ptr -68h
.text:0000000000005F40 var_60          = qword ptr -60h
.text:0000000000005F40 var_58          = qword ptr -58h
.text:0000000000005F40 var_50          = qword ptr -50h
.text:0000000000005F40 var_48          = qword ptr -48h
.text:0000000000005F40 var_40          = qword ptr -40h
.text:0000000000005F40
.text:0000000000005F40 ; __unwind {
.text:0000000000005F40                 push    r15
.text:0000000000005F42                 push    r14
.text:0000000000005F44                 lea     rcx, [rsi+20h]
.text:0000000000005F48                 push    r13
.text:0000000000005F4A                 push    r12
.text:0000000000005F4C                 lea     rax, [rdx+10h]
.text:0000000000005F50                 push    rbp
.text:0000000000005F51                 push    rbx
.text:0000000000005F52                 mov     r14, rsi
.text:0000000000005F55                 mov     r15, rdx
.text:0000000000005F58                 xor     ebx, ebx
.text:0000000000005F5A                 mov     r9d, 7
.text:0000000000005F60                 sub     rsp, 58h
.text:0000000000005F64                 mov     r10d, 7
.text:0000000000005F6A                 mov     qword ptr [rsi], 0
.text:0000000000005F71                 mov     [rsi+8], rcx
.text:0000000000005F75                 mov     [rsp+88h+var_60], rcx
.text:0000000000005F7A                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000005F81                 mov     qword ptr [rdx], 0
.text:0000000000005F88                 mov     [rsp+88h+src], rax
.text:0000000000005F8D                 mov     [rdx+8], rax
.text:0000000000005F91                 mov     [rsp+88h+var_70], 0
.text:0000000000005F9A                 mov     [rsp+88h+var_78], 0
.text:0000000000005FA3                 mov     [rsp+88h+var_68], 0
.text:0000000000005FAC                 jmp     short loc_5FBB
.text:0000000000005FAC ; ---------------------------------------------------------------------------
.text:0000000000005FAE                 align 10h
.text:0000000000005FB0
.text:0000000000005FB0 loc_5FB0:                               ; CODE XREF: printf_parse+80↓j
.text:0000000000005FB0                 cmp     al, 25h ; '%'
.text:0000000000005FB2                 lea     rbp, [rdi+1]
.text:0000000000005FB6                 jz      short loc_5FF8
.text:0000000000005FB8
.text:0000000000005FB8 loc_5FB8:                               ; CODE XREF: printf_parse+35B↓j
.text:0000000000005FB8                                         ; printf_parse+364↓j
.text:0000000000005FB8                 mov     rdi, rbp
.text:0000000000005FBB
.text:0000000000005FBB loc_5FBB:                               ; CODE XREF: printf_parse+6C↑j
.text:0000000000005FBB                 movzx   eax, byte ptr [rdi]
.text:0000000000005FBE                 test    al, al
.text:0000000000005FC0                 jnz     short loc_5FB0
.text:0000000000005FC2                 lea     rax, [rbx+rbx*4]
.text:0000000000005FC6                 lea     rax, [rbx+rax*2]
.text:0000000000005FCA                 mov     [rcx+rax*8], rdi
.text:0000000000005FCE                 mov     rax, [rsp+88h+var_78]
.text:0000000000005FD3                 mov     [r14+10h], rax
.text:0000000000005FD7                 mov     rax, [rsp+88h+var_70]
.text:0000000000005FDC                 mov     [r14+18h], rax
.text:0000000000005FE0                 xor     eax, eax
.text:0000000000005FE2
.text:0000000000005FE2 loc_5FE2:                               ; CODE XREF: printf_parse+87E↓j
.text:0000000000005FE2                                         ; printf_parse+B1C↓j
.text:0000000000005FE2                 add     rsp, 58h
.text:0000000000005FE6                 pop     rbx
.text:0000000000005FE7                 pop     rbp
.text:0000000000005FE8                 pop     r12
.text:0000000000005FEA                 pop     r13
.text:0000000000005FEC                 pop     r14
.text:0000000000005FEE                 pop     r15
.text:0000000000005FF0                 retn
.text:0000000000005FF0 ; ---------------------------------------------------------------------------
.text:0000000000005FF1                 align 8
.text:0000000000005FF8
.text:0000000000005FF8 loc_5FF8:                               ; CODE XREF: printf_parse+76↑j
.text:0000000000005FF8                 lea     rax, [rbx+rbx*4]
.text:0000000000005FFC                 mov     r13, r8
.text:0000000000005FFF                 lea     rax, [rbx+rax*2]
.text:0000000000006003                 lea     r12, [rcx+rax*8]
.text:0000000000006007                 mov     [r12], rdi
.text:000000000000600B                 mov     dword ptr [r12+10h], 0
.text:0000000000006014                 mov     qword ptr [r12+18h], 0
.text:000000000000601D                 mov     qword ptr [r12+20h], 0
.text:0000000000006026                 mov     [r12+28h], r8
.text:000000000000602B                 mov     qword ptr [r12+30h], 0
.text:0000000000006034                 mov     qword ptr [r12+38h], 0
.text:000000000000603D                 mov     [r12+40h], r8
.text:0000000000006042                 mov     [r12+50h], r8
.text:0000000000006047                 movzx   ebx, byte ptr [rdi+1]
.text:000000000000604B                 lea     eax, [rbx-30h]
.text:000000000000604E                 cmp     al, 9
.text:0000000000006050                 ja      short loc_608E
.text:0000000000006052                 jmp     loc_648A
.text:0000000000006052 ; ---------------------------------------------------------------------------
.text:0000000000006057                 align 20h
.text:0000000000006060
.text:0000000000006060 loc_6060:                               ; CODE XREF: printf_parse+158↓j
.text:0000000000006060                 cmp     bl, 2Dh ; '-'
.text:0000000000006063                 jz      short loc_60A8
.text:0000000000006065                 cmp     bl, 2Bh ; '+'
.text:0000000000006068                 jz      short loc_60B0
.text:000000000000606A                 cmp     bl, 20h ; ' '
.text:000000000000606D                 jz      short loc_60C0
.text:000000000000606F                 cmp     bl, 23h ; '#'
.text:0000000000006072                 jz      short loc_60D0
.text:0000000000006074                 cmp     bl, 30h ; '0'
.text:0000000000006077                 jz      short loc_60E0
.text:0000000000006079                 cmp     bl, 49h ; 'I'
.text:000000000000607C                 jnz     short loc_60F0
.text:000000000000607E                 or      dword ptr [r12+10h], 40h
.text:0000000000006084                 nop     dword ptr [rax+00h]
.text:0000000000006088
.text:0000000000006088 loc_6088:                               ; CODE XREF: printf_parse+160↓j
.text:0000000000006088                                         ; printf_parse+16E↓j ...
.text:0000000000006088                 movzx   ebx, byte ptr [rax]
.text:000000000000608B                 mov     rbp, rax
.text:000000000000608E
.text:000000000000608E loc_608E:                               ; CODE XREF: printf_parse+110↑j
.text:000000000000608E                                         ; printf_parse+565↓j ...
.text:000000000000608E                 lea     rax, [rbp+1]
.text:0000000000006092                 cmp     bl, 27h ; '''
.text:0000000000006095                 mov     rdx, rax
.text:0000000000006098                 jnz     short loc_6060
.text:000000000000609A                 or      dword ptr [r12+10h], 1
.text:00000000000060A0                 jmp     short loc_6088
.text:00000000000060A0 ; ---------------------------------------------------------------------------
.text:00000000000060A2                 align 8
.text:00000000000060A8
.text:00000000000060A8 loc_60A8:                               ; CODE XREF: printf_parse+123↑j
.text:00000000000060A8                 or      dword ptr [r12+10h], 2
.text:00000000000060AE                 jmp     short loc_6088
.text:00000000000060B0 ; ---------------------------------------------------------------------------
.text:00000000000060B0
.text:00000000000060B0 loc_60B0:                               ; CODE XREF: printf_parse+128↑j
.text:00000000000060B0                 or      dword ptr [r12+10h], 4
.text:00000000000060B6                 jmp     short loc_6088
.text:00000000000060B6 ; ---------------------------------------------------------------------------
.text:00000000000060B8                 align 20h
.text:00000000000060C0
.text:00000000000060C0 loc_60C0:                               ; CODE XREF: printf_parse+12D↑j
.text:00000000000060C0                 or      dword ptr [r12+10h], 8
.text:00000000000060C6                 jmp     short loc_6088
.text:00000000000060C6 ; ---------------------------------------------------------------------------
.text:00000000000060C8                 align 10h
.text:00000000000060D0
.text:00000000000060D0 loc_60D0:                               ; CODE XREF: printf_parse+132↑j
.text:00000000000060D0                 or      dword ptr [r12+10h], 10h
.text:00000000000060D6                 jmp     short loc_6088
.text:00000000000060D6 ; ---------------------------------------------------------------------------
.text:00000000000060D8                 align 20h
.text:00000000000060E0
.text:00000000000060E0 loc_60E0:                               ; CODE XREF: printf_parse+137↑j
.text:00000000000060E0                 or      dword ptr [r12+10h], 20h
.text:00000000000060E6                 jmp     short loc_6088
.text:00000000000060E6 ; ---------------------------------------------------------------------------
.text:00000000000060E8                 align 10h
.text:00000000000060F0
.text:00000000000060F0 loc_60F0:                               ; CODE XREF: printf_parse+13C↑j
.text:00000000000060F0                 cmp     bl, 2Ah ; '*'
.text:00000000000060F3                 jz      loc_62A9
.text:00000000000060F9                 lea     ecx, [rbx-30h]
.text:00000000000060FC                 cmp     cl, 9
.text:00000000000060FF                 jbe     loc_6517
.text:0000000000006105
.text:0000000000006105 loc_6105:                               ; CODE XREF: printf_parse+629↓j
.text:0000000000006105                                         ; printf_parse+96C↓j
.text:0000000000006105                 cmp     bl, 2Eh ; '.'
.text:0000000000006108                 jz      loc_63DF
.text:000000000000610E
.text:000000000000610E loc_610E:                               ; CODE XREF: printf_parse+499↓j
.text:000000000000610E                                         ; printf_parse+545↓j ...
.text:000000000000610E                 xor     eax, eax
.text:0000000000006110                 mov     esi, 1
.text:0000000000006115                 jmp     short loc_6147
.text:0000000000006115 ; ---------------------------------------------------------------------------
.text:0000000000006117                 align 20h
.text:0000000000006120
.text:0000000000006120 loc_6120:                               ; CODE XREF: printf_parse+20E↓j
.text:0000000000006120                 cmp     bl, 4Ch ; 'L'
.text:0000000000006123                 jz      short loc_6160
.text:0000000000006125                 cmp     bl, 6Ch ; 'l'
.text:0000000000006128                 jz      short loc_6140
.text:000000000000612A                 cmp     bl, 6Ah ; 'j'
.text:000000000000612D                 jz      short loc_6140
.text:000000000000612F                 mov     edx, ebx
.text:0000000000006131                 and     edx, 0FFFFFFDFh
.text:0000000000006134                 cmp     dl, 5Ah ; 'Z'
.text:0000000000006137                 jz      short loc_6140
.text:0000000000006139                 cmp     bl, 74h ; 't'
.text:000000000000613C                 jnz     short loc_6168
.text:000000000000613E                 xchg    ax, ax
.text:0000000000006140
.text:0000000000006140 loc_6140:                               ; CODE XREF: printf_parse+1E8↑j
.text:0000000000006140                                         ; printf_parse+1ED↑j ...
.text:0000000000006140                 add     eax, 8
.text:0000000000006143
.text:0000000000006143 loc_6143:                               ; CODE XREF: printf_parse+21B↓j
.text:0000000000006143                                         ; printf_parse+223↓j
.text:0000000000006143                 movzx   ebx, byte ptr [rbp+0]
.text:0000000000006147
.text:0000000000006147 loc_6147:                               ; CODE XREF: printf_parse+1D5↑j
.text:0000000000006147                 add     rbp, 1
.text:000000000000614B                 cmp     bl, 68h ; 'h'
.text:000000000000614E                 jnz     short loc_6120
.text:0000000000006150                 mov     ecx, eax
.text:0000000000006152                 mov     edx, esi
.text:0000000000006154                 and     ecx, 1
.text:0000000000006157                 shl     edx, cl
.text:0000000000006159                 or      eax, edx
.text:000000000000615B                 jmp     short loc_6143
.text:000000000000615B ; ---------------------------------------------------------------------------
.text:000000000000615D                 align 20h
.text:0000000000006160
.text:0000000000006160 loc_6160:                               ; CODE XREF: printf_parse+1E3↑j
.text:0000000000006160                 or      eax, 4
.text:0000000000006163                 jmp     short loc_6143
.text:0000000000006163 ; ---------------------------------------------------------------------------
.text:0000000000006165                 align 8
.text:0000000000006168
.text:0000000000006168 loc_6168:                               ; CODE XREF: printf_parse+1FC↑j
.text:0000000000006168                 lea     edx, [rbx-25h]  ; switch 84 cases
.text:000000000000616B                 cmp     dl, 53h
.text:000000000000616E                 ja      def_6185        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:0000000000006174                 lea     rcx, jpt_6185
.text:000000000000617B                 movzx   edx, dl
.text:000000000000617E                 movsxd  rdx, ds:(jpt_6185 - 7ADCh)[rcx+rdx*4]
.text:0000000000006182                 add     rdx, rcx
.text:0000000000006185                 jmp     rdx             ; switch jump
.text:0000000000006187 ; ---------------------------------------------------------------------------
.text:0000000000006187
.text:0000000000006187 loc_6187:                               ; CODE XREF: printf_parse+245↑j
.text:0000000000006187                                         ; DATA XREF: .rodata:jpt_6185↓o
.text:0000000000006187                 mov     r11d, 10h       ; jumptable 0000000000000245 case 83
.text:000000000000618D                 mov     ebx, 73h ; 's'
.text:0000000000006192                 nop     word ptr [rax+rax+00h]
.text:0000000000006198
.text:0000000000006198 loc_6198:                               ; CODE XREF: printf_parse+705↓j
.text:0000000000006198                                         ; printf_parse+70D↓j ...
.text:0000000000006198                 cmp     r13, 0FFFFFFFFFFFFFFFFh
.text:000000000000619C                 jz      loc_6857
.text:00000000000061A2                 mov     [r12+50h], r13
.text:00000000000061A7
.text:00000000000061A7 loc_61A7:                               ; CODE XREF: printf_parse+939↓j
.text:00000000000061A7                 cmp     r9, r13
.text:00000000000061AA                 mov     rcx, [r15+8]
.text:00000000000061AE                 jbe     loc_67D0
.text:00000000000061B4
.text:00000000000061B4 loc_61B4:                               ; CODE XREF: printf_parse+912↓j
.text:00000000000061B4                 mov     rax, [r15]
.text:00000000000061B7                 mov     rdx, rax
.text:00000000000061BA                 shl     rdx, 5
.text:00000000000061BE                 add     rdx, rcx
.text:00000000000061C1                 cmp     rax, r13
.text:00000000000061C4                 ja      short loc_61E6
.text:00000000000061C6                 db      2Eh
.text:00000000000061C6                 nop     word ptr [rax+rax+00000000h]
.text:00000000000061D0
.text:00000000000061D0 loc_61D0:                               ; CODE XREF: printf_parse+2A1↓j
.text:00000000000061D0                 add     rax, 1
.text:00000000000061D4                 mov     dword ptr [rdx], 0
.text:00000000000061DA                 add     rdx, 20h ; ' '
.text:00000000000061DE                 cmp     rax, r13
.text:00000000000061E1                 jbe     short loc_61D0
.text:00000000000061E3                 mov     [r15], rax
.text:00000000000061E6
.text:00000000000061E6 loc_61E6:                               ; CODE XREF: printf_parse+284↑j
.text:00000000000061E6                 shl     r13, 5
.text:00000000000061EA                 lea     rax, [rcx+r13]
.text:00000000000061EE                 mov     edx, [rax]
.text:00000000000061F0                 test    edx, edx
.text:00000000000061F2                 jnz     loc_67C3
.text:00000000000061F8                 mov     [rax], r11d
.text:00000000000061FB
.text:00000000000061FB loc_61FB:                               ; CODE XREF: printf_parse+245↑j
.text:00000000000061FB                                         ; printf_parse+886↓j
.text:00000000000061FB                                         ; DATA XREF: ...
.text:00000000000061FB                 mov     [r12+48h], bl   ; jumptable 0000000000000245 case 37
.text:0000000000006200                 mov     rax, [r14]
.text:0000000000006203                 mov     [r12+8], rbp
.text:0000000000006208                 lea     rbx, [rax+1]
.text:000000000000620C                 cmp     r10, rbx
.text:000000000000620F                 mov     [r14], rbx
.text:0000000000006212                 ja      loc_62A0
.text:0000000000006218                 test    r10, r10
.text:000000000000621B                 js      loc_6BC7
.text:0000000000006221                 add     r10, r10
.text:0000000000006224                 mov     rax, 2E8BA2E8BA2E8BAh
.text:000000000000622E                 cmp     r10, rax
.text:0000000000006231                 ja      loc_6BC7
.text:0000000000006237                 lea     rax, [r10+r10*4]
.text:000000000000623B                 mov     rdi, [r14+8]    ; ptr
.text:000000000000623F                 cmp     [rsp+88h+var_60], rdi
.text:0000000000006244                 mov     [rsp+88h+var_48], r9
.text:0000000000006249                 mov     [rsp+88h+var_50], r10
.text:000000000000624E                 lea     rax, [r10+rax*2]
.text:0000000000006252                 mov     [rsp+88h+var_58], r8
.text:0000000000006257                 lea     rsi, ds:0[rax*8] ; size
.text:000000000000625F                 jz      loc_691D
.text:0000000000006265                 call    _realloc        ; PIC mode
.text:000000000000626A                 test    rax, rax
.text:000000000000626D                 mov     rcx, rax
.text:0000000000006270                 mov     r8, [rsp+88h+var_58]
.text:0000000000006275                 mov     r10, [rsp+88h+var_50]
.text:000000000000627A                 mov     r9, [rsp+88h+var_48]
.text:000000000000627F                 jz      loc_6BC7
.text:0000000000006285                 mov     rax, [rsp+88h+var_60]
.text:000000000000628A                 cmp     rax, [r14+8]
.text:000000000000628E                 mov     rbx, [r14]
.text:0000000000006291                 jz      loc_6940
.text:0000000000006297
.text:0000000000006297 loc_6297:                               ; CODE XREF: printf_parse+A3D↓j
.text:0000000000006297                 mov     [r14+8], rcx
.text:000000000000629B                 jmp     loc_5FB8
.text:00000000000062A0 ; ---------------------------------------------------------------------------
.text:00000000000062A0
.text:00000000000062A0 loc_62A0:                               ; CODE XREF: printf_parse+2D2↑j
.text:00000000000062A0                 mov     rcx, [r14+8]
.text:00000000000062A4                 jmp     loc_5FB8
.text:00000000000062A9 ; ---------------------------------------------------------------------------
.text:00000000000062A9
.text:00000000000062A9 loc_62A9:                               ; CODE XREF: printf_parse+1B3↑j
.text:00000000000062A9                 mov     rsi, [rsp+88h+var_78]
.text:00000000000062AE                 mov     ecx, 1
.text:00000000000062B3                 mov     [r12+18h], rbp
.text:00000000000062B8                 mov     [r12+20h], rax
.text:00000000000062BD                 test    rsi, rsi
.text:00000000000062C0                 cmovnz  rcx, rsi
.text:00000000000062C4                 mov     [rsp+88h+var_78], rcx
.text:00000000000062C9                 movzx   ecx, byte ptr [rbp+1]
.text:00000000000062CD                 lea     esi, [rcx-30h]
.text:00000000000062D0                 cmp     sil, 9
.text:00000000000062D4                 jbe     loc_65B5
.text:00000000000062DA
.text:00000000000062DA loc_62DA:                               ; CODE XREF: printf_parse+68D↓j
.text:00000000000062DA                 mov     rsi, [rsp+88h+var_68]
.text:00000000000062DF                 cmp     rsi, 0FFFFFFFFFFFFFFFFh
.text:00000000000062E3                 lea     rdx, [rsi+1]
.text:00000000000062E7                 mov     [r12+28h], rsi
.text:00000000000062EC                 jz      def_6185        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:00000000000062F2                 mov     rbx, [rsp+88h+var_68]
.text:00000000000062F7                 mov     rbp, rax
.text:00000000000062FA                 mov     [rsp+88h+var_68], rdx
.text:00000000000062FF
.text:00000000000062FF loc_62FF:                               ; CODE XREF: printf_parse+6F7↓j
.text:00000000000062FF                 cmp     r9, rbx
.text:0000000000006302                 mov     rcx, [r15+8]
.text:0000000000006306                 ja      loc_6982
.text:000000000000630C                 add     r9, r9
.text:000000000000630F                 lea     rax, [rbx+1]
.text:0000000000006313                 cmp     r9, rbx
.text:0000000000006316                 cmovbe  r9, rax
.text:000000000000631A                 mov     rax, 7FFFFFFFFFFFFFFh
.text:0000000000006324                 cmp     r9, rax
.text:0000000000006327                 ja      loc_6BCB
.text:000000000000632D                 mov     rsi, r9
.text:0000000000006330                 mov     [rsp+88h+var_48], r9
.text:0000000000006335                 mov     [rsp+88h+var_50], r10
.text:000000000000633A                 shl     rsi, 5          ; size
.text:000000000000633E                 cmp     [rsp+88h+src], rcx
.text:0000000000006343                 mov     [rsp+88h+var_58], r8
.text:0000000000006348                 jz      loc_6A61
.text:000000000000634E                 mov     rdi, rcx        ; ptr
.text:0000000000006351                 call    _realloc        ; PIC mode
.text:0000000000006356                 mov     rdx, [r15+8]
.text:000000000000635A                 mov     r8, [rsp+88h+var_58]
.text:000000000000635F                 mov     rcx, rax
.text:0000000000006362                 mov     r10, [rsp+88h+var_50]
.text:0000000000006367                 mov     r9, [rsp+88h+var_48]
.text:000000000000636C
.text:000000000000636C loc_636C:                               ; CODE XREF: printf_parse+B40↓j
.text:000000000000636C                 test    rcx, rcx
.text:000000000000636F                 jz      loc_6C27
.text:0000000000006375                 cmp     [rsp+88h+src], rdx
.text:000000000000637A                 mov     rax, [r15]
.text:000000000000637D                 jz      loc_6B3B
.text:0000000000006383
.text:0000000000006383 loc_6383:                               ; CODE XREF: printf_parse+C33↓j
.text:0000000000006383                 mov     [r15+8], rcx
.text:0000000000006387
.text:0000000000006387 loc_6387:                               ; CODE XREF: printf_parse+A45↓j
.text:0000000000006387                 mov     rdx, rax
.text:000000000000638A                 shl     rdx, 5
.text:000000000000638E                 add     rdx, rcx
.text:0000000000006391                 cmp     rax, rbx
.text:0000000000006394                 ja      short loc_63B6
.text:0000000000006396                 db      2Eh
.text:0000000000006396                 nop     word ptr [rax+rax+00000000h]
.text:00000000000063A0
.text:00000000000063A0 loc_63A0:                               ; CODE XREF: printf_parse+471↓j
.text:00000000000063A0                 add     rax, 1
.text:00000000000063A4                 mov     dword ptr [rdx], 0
.text:00000000000063AA                 add     rdx, 20h ; ' '
.text:00000000000063AE                 cmp     rax, rbx
.text:00000000000063B1                 jbe     short loc_63A0
.text:00000000000063B3                 mov     [r15], rax
.text:00000000000063B6
.text:00000000000063B6 loc_63B6:                               ; CODE XREF: printf_parse+454↑j
.text:00000000000063B6                 shl     rbx, 5
.text:00000000000063BA                 lea     rax, [rcx+rbx]
.text:00000000000063BE                 mov     edx, [rax]
.text:00000000000063C0                 test    edx, edx
.text:00000000000063C2                 jnz     loc_689B
.text:00000000000063C8                 mov     dword ptr [rax], 5
.text:00000000000063CE                 movzx   ebx, byte ptr [rbp+0]
.text:00000000000063D2                 lea     rdx, [rbp+1]
.text:00000000000063D6                 cmp     bl, 2Eh ; '.'
.text:00000000000063D9                 jnz     loc_610E
.text:00000000000063DF
.text:00000000000063DF loc_63DF:                               ; CODE XREF: printf_parse+1C8↑j
.text:00000000000063DF                 cmp     byte ptr [rbp+1], 2Ah ; '*'
.text:00000000000063E3                 mov     [r12+30h], rbp
.text:00000000000063E8                 jnz     loc_656E
.text:00000000000063EE                 mov     rsi, [rsp+88h+var_70]
.text:00000000000063F3                 lea     r11, [rbp+2]
.text:00000000000063F7                 mov     eax, 2
.text:00000000000063FC                 mov     [r12+38h], r11
.text:0000000000006401                 cmp     rsi, 2
.text:0000000000006405                 cmovnb  rax, rsi
.text:0000000000006409                 mov     [rsp+88h+var_70], rax
.text:000000000000640E                 movsx   eax, byte ptr [rbp+2]
.text:0000000000006412                 lea     edx, [rax-30h]
.text:0000000000006415                 cmp     dl, 9
.text:0000000000006418                 jbe     loc_6AAC
.text:000000000000641E
.text:000000000000641E loc_641E:                               ; CODE XREF: printf_parse+B82↓j
.text:000000000000641E                 mov     rbx, [r12+40h]
.text:0000000000006423                 cmp     rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000006427                 jz      loc_6A85
.text:000000000000642D
.text:000000000000642D loc_642D:                               ; CODE XREF: printf_parse+B67↓j
.text:000000000000642D                                         ; printf_parse+C59↓j
.text:000000000000642D                 cmp     r9, rbx
.text:0000000000006430                 mov     rcx, [r15+8]
.text:0000000000006434                 jbe     loc_699F
.text:000000000000643A                 mov     rax, [r15]
.text:000000000000643D
.text:000000000000643D loc_643D:                               ; CODE XREF: printf_parse+AE4↓j
.text:000000000000643D                 mov     rdx, rax
.text:0000000000006440                 shl     rdx, 5
.text:0000000000006444                 add     rdx, rcx
.text:0000000000006447                 cmp     rax, rbx
.text:000000000000644A                 ja      short loc_6466
.text:000000000000644C                 nop     dword ptr [rax+00h]
.text:0000000000006450
.text:0000000000006450 loc_6450:                               ; CODE XREF: printf_parse+521↓j
.text:0000000000006450                 add     rax, 1
.text:0000000000006454                 mov     dword ptr [rdx], 0
.text:000000000000645A                 add     rdx, 20h ; ' '
.text:000000000000645E                 cmp     rax, rbx
.text:0000000000006461                 jbe     short loc_6450
.text:0000000000006463                 mov     [r15], rax
.text:0000000000006466
.text:0000000000006466 loc_6466:                               ; CODE XREF: printf_parse+50A↑j
.text:0000000000006466                 shl     rbx, 5
.text:000000000000646A                 lea     rax, [rcx+rbx]
.text:000000000000646E                 mov     edx, [rax]
.text:0000000000006470                 test    edx, edx
.text:0000000000006472                 jnz     loc_698A
.text:0000000000006478                 mov     dword ptr [rax], 5
.text:000000000000647E                 mov     rbp, r11
.text:0000000000006481                 movzx   ebx, byte ptr [r11]
.text:0000000000006485                 jmp     loc_610E
.text:000000000000648A ; ---------------------------------------------------------------------------
.text:000000000000648A
.text:000000000000648A loc_648A:                               ; CODE XREF: printf_parse+112↑j
.text:000000000000648A                 mov     rax, rbp
.text:000000000000648D                 nop     dword ptr [rax]
.text:0000000000006490
.text:0000000000006490 loc_6490:                               ; CODE XREF: printf_parse+55D↓j
.text:0000000000006490                 add     rax, 1
.text:0000000000006494                 movzx   edx, byte ptr [rax]
.text:0000000000006497                 lea     ecx, [rdx-30h]
.text:000000000000649A                 cmp     cl, 9
.text:000000000000649D                 jbe     short loc_6490
.text:000000000000649F                 cmp     dl, 24h ; '$'
.text:00000000000064A2                 mov     r13, r8
.text:00000000000064A5                 jnz     loc_608E
.text:00000000000064AB                 xor     edx, edx
.text:00000000000064AD
.text:00000000000064AD loc_64AD:                               ; CODE XREF: printf_parse+5B7↓j
.text:00000000000064AD                 movsx   eax, bl
.text:00000000000064B0                 mov     rdi, 1999999999999999h
.text:00000000000064BA                 mov     rsi, r8
.text:00000000000064BD                 sub     eax, 30h ; '0'
.text:00000000000064C0                 cmp     rdx, rdi
.text:00000000000064C3                 cdqe
.text:00000000000064C5                 ja      short loc_64CE
.text:00000000000064C7                 lea     rsi, [rdx+rdx*4]
.text:00000000000064CB                 add     rsi, rsi
.text:00000000000064CE
.text:00000000000064CE loc_64CE:                               ; CODE XREF: printf_parse+585↑j
.text:00000000000064CE                 mov     rcx, rbp
.text:00000000000064D1
.text:00000000000064D1 loc_64D1:                               ; CODE XREF: printf_parse+956↓j
.text:00000000000064D1                 add     rax, rsi
.text:00000000000064D4                 movzx   ebx, byte ptr [rbp+1]
.text:00000000000064D8                 setb    sil
.text:00000000000064DC                 add     rbp, 1
.text:00000000000064E0                 mov     rdx, rax
.text:00000000000064E3                 movzx   esi, sil
.text:00000000000064E7                 test    rsi, rsi
.text:00000000000064EA                 lea     edi, [rbx-30h]
.text:00000000000064ED                 jnz     loc_687E
.text:00000000000064F3                 cmp     dil, 9
.text:00000000000064F7                 jbe     short loc_64AD
.text:00000000000064F9                 mov     r13, rax
.text:00000000000064FC                 sub     r13, 1
.text:0000000000006500                 cmp     r13, 0FFFFFFFFFFFFFFFDh
.text:0000000000006504                 ja      def_6185        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:000000000000650A                 lea     rbp, [rcx+2]
.text:000000000000650E                 movzx   ebx, byte ptr [rcx+2]
.text:0000000000006512                 jmp     loc_608E
.text:0000000000006517 ; ---------------------------------------------------------------------------
.text:0000000000006517
.text:0000000000006517 loc_6517:                               ; CODE XREF: printf_parse+1BF↑j
.text:0000000000006517                 mov     [r12+18h], rbp
.text:000000000000651C                 movzx   edi, byte ptr [rbp+0]
.text:0000000000006520                 mov     rsi, rbp
.text:0000000000006523                 lea     ecx, [rdi-30h]
.text:0000000000006526                 cmp     cl, 9
.text:0000000000006529                 jbe     short loc_6537
.text:000000000000652B                 jmp     short loc_6560
.text:000000000000652B ; ---------------------------------------------------------------------------
.text:000000000000652D                 align 10h
.text:0000000000006530
.text:0000000000006530 loc_6530:                               ; CODE XREF: printf_parse+600↓j
.text:0000000000006530                 mov     rbp, rax
.text:0000000000006533                 add     rax, 1
.text:0000000000006537
.text:0000000000006537 loc_6537:                               ; CODE XREF: printf_parse+5E9↑j
.text:0000000000006537                 movzx   edi, byte ptr [rax]
.text:000000000000653A                 lea     edx, [rdi-30h]
.text:000000000000653D                 cmp     dl, 9
.text:0000000000006540                 jbe     short loc_6530
.text:0000000000006542                 mov     rcx, rax
.text:0000000000006545                 lea     rdx, [rbp+2]
.text:0000000000006549                 mov     rbp, rax
.text:000000000000654C                 sub     rcx, rsi
.text:000000000000654F                 mov     rsi, [rsp+88h+var_78]
.text:0000000000006554                 cmp     rsi, rcx
.text:0000000000006557                 cmovnb  rcx, rsi
.text:000000000000655B                 mov     [rsp+88h+var_78], rcx
.text:0000000000006560
.text:0000000000006560 loc_6560:                               ; CODE XREF: printf_parse+5EB↑j
.text:0000000000006560                 mov     [r12+20h], rbp
.text:0000000000006565                 movzx   ebx, byte ptr [rbp+0]
.text:0000000000006569                 jmp     loc_6105
.text:000000000000656E ; ---------------------------------------------------------------------------
.text:000000000000656E
.text:000000000000656E loc_656E:                               ; CODE XREF: printf_parse+4A8↑j
.text:000000000000656E                 movzx   eax, byte ptr [rbp+1]
.text:0000000000006572                 sub     eax, 30h ; '0'
.text:0000000000006575                 cmp     al, 9
.text:0000000000006577                 ja      short loc_658E
.text:0000000000006579                 nop     dword ptr [rax+00000000h]
.text:0000000000006580
.text:0000000000006580 loc_6580:                               ; CODE XREF: printf_parse+64C↓j
.text:0000000000006580                 add     rdx, 1
.text:0000000000006584                 movzx   eax, byte ptr [rdx]
.text:0000000000006587                 sub     eax, 30h ; '0'
.text:000000000000658A                 cmp     al, 9
.text:000000000000658C                 jbe     short loc_6580
.text:000000000000658E
.text:000000000000658E loc_658E:                               ; CODE XREF: printf_parse+637↑j
.text:000000000000658E                 mov     rsi, [rsp+88h+var_70]
.text:0000000000006593                 mov     rax, rdx
.text:0000000000006596                 mov     [r12+38h], rdx
.text:000000000000659B                 sub     rax, rbp
.text:000000000000659E                 movzx   ebx, byte ptr [rdx]
.text:00000000000065A1                 mov     rbp, rdx
.text:00000000000065A4                 cmp     rsi, rax
.text:00000000000065A7                 cmovnb  rax, rsi
.text:00000000000065AB                 mov     [rsp+88h+var_70], rax
.text:00000000000065B0                 jmp     loc_610E
.text:00000000000065B5 ; ---------------------------------------------------------------------------
.text:00000000000065B5
.text:00000000000065B5 loc_65B5:                               ; CODE XREF: printf_parse+394↑j
.text:00000000000065B5                 mov     rsi, rax
.text:00000000000065B8
.text:00000000000065B8 loc_65B8:                               ; CODE XREF: printf_parse+687↓j
.text:00000000000065B8                 add     rsi, 1
.text:00000000000065BC                 movzx   edi, byte ptr [rsi]
.text:00000000000065BF                 lea     r11d, [rdi-30h]
.text:00000000000065C3                 cmp     r11b, 9
.text:00000000000065C7                 jbe     short loc_65B8
.text:00000000000065C9                 cmp     dil, 24h ; '$'
.text:00000000000065CD                 jnz     loc_62DA
.text:00000000000065D3                 xor     esi, esi
.text:00000000000065D5
.text:00000000000065D5 loc_65D5:                               ; CODE XREF: printf_parse+6DE↓j
.text:00000000000065D5                 movsx   eax, cl
.text:00000000000065D8                 mov     rdi, 1999999999999999h
.text:00000000000065E2                 mov     rcx, r8
.text:00000000000065E5                 sub     eax, 30h ; '0'
.text:00000000000065E8                 cmp     rsi, rdi
.text:00000000000065EB                 cdqe
.text:00000000000065ED                 ja      short loc_65F6
.text:00000000000065EF                 lea     rcx, [rsi+rsi*4]
.text:00000000000065F3                 add     rcx, rcx
.text:00000000000065F6
.text:00000000000065F6 loc_65F6:                               ; CODE XREF: printf_parse+6AD↑j
.text:00000000000065F6                 mov     rbp, rdx
.text:00000000000065F9
.text:00000000000065F9 loc_65F9:                               ; CODE XREF: printf_parse+BF6↓j
.text:00000000000065F9                 xor     r11d, r11d
.text:00000000000065FC                 add     rax, rcx
.text:00000000000065FF                 movzx   ecx, byte ptr [rdx+1]
.text:0000000000006603                 setb    r11b
.text:0000000000006607                 add     rdx, 1
.text:000000000000660B                 mov     rsi, rax
.text:000000000000660E                 test    r11, r11
.text:0000000000006611                 lea     edi, [rcx-30h]
.text:0000000000006614                 jnz     loc_6B1E
.text:000000000000661A                 cmp     dil, 9
.text:000000000000661E                 jbe     short loc_65D5
.text:0000000000006620                 lea     rbx, [rax-1]
.text:0000000000006624                 cmp     rbx, 0FFFFFFFFFFFFFFFDh
.text:0000000000006628                 ja      def_6185        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:000000000000662E                 mov     [r12+28h], rbx
.text:0000000000006633                 add     rbp, 2
.text:0000000000006637                 jmp     loc_62FF
.text:000000000000663C ; ---------------------------------------------------------------------------
.text:000000000000663C
.text:000000000000663C loc_663C:                               ; CODE XREF: printf_parse+245↑j
.text:000000000000663C                                         ; DATA XREF: .rodata:jpt_6185↓o
.text:000000000000663C                 cmp     eax, 0Fh        ; jumptable 0000000000000245 case 110
.text:000000000000663F                 mov     r11d, 16h
.text:0000000000006645                 jg      loc_6198
.text:000000000000664B                 test    al, 4
.text:000000000000664D                 jnz     loc_6198
.text:0000000000006653                 cmp     eax, 7
.text:0000000000006656                 mov     r11d, 15h
.text:000000000000665C                 jg      loc_6198
.text:0000000000006662                 test    al, 2
.text:0000000000006664                 mov     r11d, 12h
.text:000000000000666A                 jnz     loc_6198
.text:0000000000006670                 xor     r11d, r11d
.text:0000000000006673                 test    al, 1
.text:0000000000006675                 setz    r11b
.text:0000000000006679                 add     r11d, 13h
.text:000000000000667D                 jmp     loc_6198
.text:000000000000667D ; ---------------------------------------------------------------------------
.text:0000000000006682                 align 8
.text:0000000000006688
.text:0000000000006688 loc_6688:                               ; CODE XREF: printf_parse+245↑j
.text:0000000000006688                                         ; DATA XREF: .rodata:jpt_6185↓o
.text:0000000000006688                 xor     r11d, r11d      ; jumptable 0000000000000245 case 99
.text:000000000000668B                 cmp     eax, 7
.text:000000000000668E                 setnle  r11b
.text:0000000000006692                 add     r11d, 0Dh
.text:0000000000006696                 jmp     loc_6198
.text:000000000000669B ; ---------------------------------------------------------------------------
.text:000000000000669B
.text:000000000000669B loc_669B:                               ; CODE XREF: printf_parse+245↑j
.text:000000000000669B                                         ; DATA XREF: .rodata:jpt_6185↓o
.text:000000000000669B                 cmp     eax, 0Fh        ; jumptable 0000000000000245 cases 100,105
.text:000000000000669E                 mov     r11d, 9
.text:00000000000066A4                 jg      loc_6198
.text:00000000000066AA                 test    al, 4
.text:00000000000066AC                 jnz     loc_6198
.text:00000000000066B2                 cmp     eax, 7
.text:00000000000066B5                 mov     r11d, 7
.text:00000000000066BB                 jg      loc_6198
.text:00000000000066C1                 test    al, 2
.text:00000000000066C3                 mov     r11d, 1
.text:00000000000066C9                 jnz     loc_6198
.text:00000000000066CF                 and     eax, 1
.text:00000000000066D2                 cmp     eax, 1
.text:00000000000066D5                 sbb     r11d, r11d
.text:00000000000066D8                 and     r11d, 2
.text:00000000000066DC                 add     r11d, 3
.text:00000000000066E0                 jmp     loc_6198
.text:00000000000066E0 ; ---------------------------------------------------------------------------
.text:00000000000066E5                 align 8
.text:00000000000066E8
.text:00000000000066E8 loc_66E8:                               ; CODE XREF: printf_parse+245↑j
.text:00000000000066E8                                         ; DATA XREF: .rodata:jpt_6185↓o
.text:00000000000066E8                 xor     r11d, r11d      ; jumptable 0000000000000245 case 115
.text:00000000000066EB                 cmp     eax, 7
.text:00000000000066EE                 setnle  r11b
.text:00000000000066F2                 add     r11d, 0Fh
.text:00000000000066F6                 jmp     loc_6198
.text:00000000000066FB ; ---------------------------------------------------------------------------
.text:00000000000066FB
.text:00000000000066FB loc_66FB:                               ; CODE XREF: printf_parse+245↑j
.text:00000000000066FB                                         ; DATA XREF: .rodata:jpt_6185↓o
.text:00000000000066FB                 cmp     eax, 0Fh        ; jumptable 0000000000000245 cases 65,69-71,97,101-103
.text:00000000000066FE                 mov     r11d, 0Ch
.text:0000000000006704                 jg      loc_6198
.text:000000000000670A                 xor     r11d, r11d
.text:000000000000670D                 test    al, 4
.text:000000000000670F                 setnz   r11b
.text:0000000000006713                 add     r11d, 0Bh
.text:0000000000006717                 jmp     loc_6198
.text:000000000000671C ; ---------------------------------------------------------------------------
.text:000000000000671C
.text:000000000000671C loc_671C:                               ; CODE XREF: printf_parse+245↑j
.text:000000000000671C                                         ; DATA XREF: .rodata:jpt_6185↓o
.text:000000000000671C                 mov     r11d, 0Eh       ; jumptable 0000000000000245 case 67
.text:0000000000006722                 mov     ebx, 63h ; 'c'
.text:0000000000006727                 jmp     loc_6198
.text:000000000000672C ; ---------------------------------------------------------------------------
.text:000000000000672C
.text:000000000000672C loc_672C:                               ; CODE XREF: printf_parse+245↑j
.text:000000000000672C                                         ; DATA XREF: .rodata:jpt_6185↓o
.text:000000000000672C                 cmp     eax, 0Fh        ; jumptable 0000000000000245 cases 88,111,117,120
.text:000000000000672F                 mov     r11d, 0Ah
.text:0000000000006735                 jg      loc_6198
.text:000000000000673B                 test    al, 4
.text:000000000000673D                 jnz     loc_6198
.text:0000000000006743                 cmp     eax, 7
.text:0000000000006746                 mov     r11d, 8
.text:000000000000674C                 jg      loc_6198
.text:0000000000006752                 test    al, 2
.text:0000000000006754                 mov     r11d, 2
.text:000000000000675A                 jnz     loc_6198
.text:0000000000006760                 and     eax, 1
.text:0000000000006763                 cmp     eax, 1
.text:0000000000006766                 sbb     r11d, r11d
.text:0000000000006769                 and     r11d, 2
.text:000000000000676D                 add     r11d, 4
.text:0000000000006771                 jmp     loc_6198
.text:0000000000006771 ; ---------------------------------------------------------------------------
.text:0000000000006776                 align 20h
.text:0000000000006780
.text:0000000000006780 loc_6780:                               ; CODE XREF: printf_parse+245↑j
.text:0000000000006780                                         ; DATA XREF: .rodata:jpt_6185↓o
.text:0000000000006780                 mov     r11d, 11h       ; jumptable 0000000000000245 case 112
.text:0000000000006786                 jmp     loc_6198
.text:000000000000678B ; ---------------------------------------------------------------------------
.text:000000000000678B
.text:000000000000678B def_6185:                               ; CODE XREF: printf_parse+22E↑j
.text:000000000000678B                                         ; printf_parse+245↑j ...
.text:000000000000678B                 mov     rcx, [r15+8]    ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:000000000000678F
.text:000000000000678F loc_678F:                               ; CODE XREF: printf_parse+88C↓j
.text:000000000000678F                                         ; printf_parse+95E↓j ...
.text:000000000000678F                 cmp     [rsp+88h+src], rcx
.text:0000000000006794                 jz      short loc_679E
.text:0000000000006796                 mov     rdi, rcx        ; ptr
.text:0000000000006799                 call    _free           ; PIC mode
.text:000000000000679E
.text:000000000000679E loc_679E:                               ; CODE XREF: printf_parse+854↑j
.text:000000000000679E                 mov     rdi, [r14+8]    ; ptr
.text:00000000000067A2                 cmp     [rsp+88h+var_60], rdi
.text:00000000000067A7                 jz      short loc_67AE
.text:00000000000067A9                 call    _free           ; PIC mode
.text:00000000000067AE
.text:00000000000067AE loc_67AE:                               ; CODE XREF: printf_parse+867↑j
.text:00000000000067AE                 call    ___errno_location ; PIC mode
.text:00000000000067B3                 mov     dword ptr [rax], 16h
.text:00000000000067B9                 mov     eax, 0FFFFFFFFh
.text:00000000000067BE                 jmp     loc_5FE2
.text:00000000000067C3 ; ---------------------------------------------------------------------------
.text:00000000000067C3
.text:00000000000067C3 loc_67C3:                               ; CODE XREF: printf_parse+2B2↑j
.text:00000000000067C3                 cmp     edx, r11d
.text:00000000000067C6                 jz      loc_61FB        ; jumptable 0000000000000245 case 37
.text:00000000000067CC                 jmp     short loc_678F
.text:00000000000067CC ; ---------------------------------------------------------------------------
.text:00000000000067CE                 align 10h
.text:00000000000067D0
.text:00000000000067D0 loc_67D0:                               ; CODE XREF: printf_parse+26E↑j
.text:00000000000067D0                 add     r9, r9
.text:00000000000067D3                 lea     rax, [r13+1]
.text:00000000000067D7                 cmp     r9, r13
.text:00000000000067DA                 cmovbe  r9, rax
.text:00000000000067DE                 mov     rax, 7FFFFFFFFFFFFFFh
.text:00000000000067E8                 cmp     r9, rax
.text:00000000000067EB                 ja      loc_6BCB
.text:00000000000067F1                 mov     rsi, r9
.text:00000000000067F4                 mov     [rsp+88h+var_40], r9
.text:00000000000067F9                 mov     [rsp+88h+var_48], r10
.text:00000000000067FE                 shl     rsi, 5          ; size
.text:0000000000006802                 cmp     [rsp+88h+src], rcx
.text:0000000000006807                 mov     [rsp+88h+var_50], r8
.text:000000000000680C                 mov     dword ptr [rsp+88h+var_58], r11d
.text:0000000000006811                 jz      loc_68B1
.text:0000000000006817                 mov     rdi, rcx        ; ptr
.text:000000000000681A                 call    _realloc        ; PIC mode
.text:000000000000681F                 test    rax, rax
.text:0000000000006822                 mov     rcx, rax
.text:0000000000006825                 mov     r11d, dword ptr [rsp+88h+var_58]
.text:000000000000682A                 mov     r8, [rsp+88h+var_50]
.text:000000000000682F                 mov     r10, [rsp+88h+var_48]
.text:0000000000006834                 mov     r9, [rsp+88h+var_40]
.text:0000000000006839                 jz      loc_6BC7
.text:000000000000683F                 mov     rax, [rsp+88h+src]
.text:0000000000006844                 cmp     rax, [r15+8]
.text:0000000000006848                 jz      loc_68D9
.text:000000000000684E
.text:000000000000684E loc_684E:                               ; CODE XREF: printf_parse+9D8↓j
.text:000000000000684E                 mov     [r15+8], rcx
.text:0000000000006852                 jmp     loc_61B4
.text:0000000000006857 ; ---------------------------------------------------------------------------
.text:0000000000006857
.text:0000000000006857 loc_6857:                               ; CODE XREF: printf_parse+25C↑j
.text:0000000000006857                 mov     rsi, [rsp+88h+var_68]
.text:000000000000685C                 cmp     rsi, 0FFFFFFFFFFFFFFFFh
.text:0000000000006860                 lea     rax, [rsi+1]
.text:0000000000006864                 mov     [r12+50h], rsi
.text:0000000000006869                 jz      def_6185        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:000000000000686F                 mov     r13, [rsp+88h+var_68]
.text:0000000000006874                 mov     [rsp+88h+var_68], rax
.text:0000000000006879                 jmp     loc_61A7
.text:000000000000687E ; ---------------------------------------------------------------------------
.text:000000000000687E
.text:000000000000687E loc_687E:                               ; CODE XREF: printf_parse+5AD↑j
.text:000000000000687E                 cmp     dil, 9
.text:0000000000006882                 ja      def_6185        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:0000000000006888                 movsx   eax, bl
.text:000000000000688B                 mov     rsi, r8
.text:000000000000688E                 mov     rcx, rbp
.text:0000000000006891                 sub     eax, 30h ; '0'
.text:0000000000006894                 cdqe
.text:0000000000006896                 jmp     loc_64D1
.text:000000000000689B ; ---------------------------------------------------------------------------
.text:000000000000689B
.text:000000000000689B loc_689B:                               ; CODE XREF: printf_parse+482↑j
.text:000000000000689B                 cmp     edx, 5
.text:000000000000689E                 jnz     loc_678F
.text:00000000000068A4                 movzx   ebx, byte ptr [rbp+0]
.text:00000000000068A8                 lea     rdx, [rbp+1]
.text:00000000000068AC                 jmp     loc_6105
.text:00000000000068B1 ; ---------------------------------------------------------------------------
.text:00000000000068B1
.text:00000000000068B1 loc_68B1:                               ; CODE XREF: printf_parse+8D1↑j
.text:00000000000068B1                 mov     rdi, rsi        ; size
.text:00000000000068B4                 call    _malloc         ; PIC mode
.text:00000000000068B9                 test    rax, rax
.text:00000000000068BC                 mov     rcx, rax
.text:00000000000068BF                 mov     r11d, dword ptr [rsp+88h+var_58]
.text:00000000000068C4                 mov     r8, [rsp+88h+var_50]
.text:00000000000068C9                 mov     r10, [rsp+88h+var_48]
.text:00000000000068CE                 mov     r9, [rsp+88h+var_40]
.text:00000000000068D3                 jz      loc_6A3C
.text:00000000000068D9
.text:00000000000068D9 loc_68D9:                               ; CODE XREF: printf_parse+908↑j
.text:00000000000068D9                 mov     rdx, [r15]
.text:00000000000068DC                 mov     rsi, [rsp+88h+src] ; src
.text:00000000000068E1                 mov     rdi, rcx        ; dest
.text:00000000000068E4                 mov     [rsp+88h+var_40], r9
.text:00000000000068E9                 mov     [rsp+88h+var_48], r10
.text:00000000000068EE                 mov     [rsp+88h+var_50], r8
.text:00000000000068F3                 mov     dword ptr [rsp+88h+var_58], r11d
.text:00000000000068F8                 shl     rdx, 5          ; n
.text:00000000000068FC                 call    _memcpy         ; PIC mode
.text:0000000000006901                 mov     r9, [rsp+88h+var_40]
.text:0000000000006906                 mov     r10, [rsp+88h+var_48]
.text:000000000000690B                 mov     rcx, rax
.text:000000000000690E                 mov     r8, [rsp+88h+var_50]
.text:0000000000006913                 mov     r11d, dword ptr [rsp+88h+var_58]
.text:0000000000006918                 jmp     loc_684E
.text:000000000000691D ; ---------------------------------------------------------------------------
.text:000000000000691D
.text:000000000000691D loc_691D:                               ; CODE XREF: printf_parse+31F↑j
.text:000000000000691D                 mov     rdi, rsi        ; size
.text:0000000000006920                 call    _malloc         ; PIC mode
.text:0000000000006925                 test    rax, rax
.text:0000000000006928                 mov     rcx, rax
.text:000000000000692B                 mov     r8, [rsp+88h+var_58]
.text:0000000000006930                 mov     r10, [rsp+88h+var_50]
.text:0000000000006935                 mov     r9, [rsp+88h+var_48]
.text:000000000000693A                 jz      loc_6A29
.text:0000000000006940
.text:0000000000006940 loc_6940:                               ; CODE XREF: printf_parse+351↑j
.text:0000000000006940                 lea     rax, [rbx+rbx*4]
.text:0000000000006944                 mov     rsi, [rsp+88h+var_60] ; src
.text:0000000000006949                 mov     rdi, rcx        ; dest
.text:000000000000694C                 mov     [rsp+88h+var_48], r9
.text:0000000000006951                 mov     [rsp+88h+var_50], r10
.text:0000000000006956                 lea     rdx, [rbx+rax*2]
.text:000000000000695A                 mov     [rsp+88h+var_58], r8
.text:000000000000695F                 shl     rdx, 3          ; n
.text:0000000000006963                 call    _memcpy         ; PIC mode
.text:0000000000006968                 mov     rbx, [r14]
.text:000000000000696B                 mov     rcx, rax
.text:000000000000696E                 mov     r9, [rsp+88h+var_48]
.text:0000000000006973                 mov     r10, [rsp+88h+var_50]
.text:0000000000006978                 mov     r8, [rsp+88h+var_58]
.text:000000000000697D                 jmp     loc_6297
.text:0000000000006982 ; ---------------------------------------------------------------------------
.text:0000000000006982
.text:0000000000006982 loc_6982:                               ; CODE XREF: printf_parse+3C6↑j
.text:0000000000006982                 mov     rax, [r15]
.text:0000000000006985                 jmp     loc_6387
.text:000000000000698A ; ---------------------------------------------------------------------------
.text:000000000000698A
.text:000000000000698A loc_698A:                               ; CODE XREF: printf_parse+532↑j
.text:000000000000698A                 cmp     edx, 5
.text:000000000000698D                 jnz     loc_678F
.text:0000000000006993                 movzx   ebx, byte ptr [r11]
.text:0000000000006997                 mov     rbp, r11
.text:000000000000699A                 jmp     loc_610E
.text:000000000000699F ; ---------------------------------------------------------------------------
.text:000000000000699F
.text:000000000000699F loc_699F:                               ; CODE XREF: printf_parse+4F4↑j
.text:000000000000699F                 add     r9, r9
.text:00000000000069A2                 lea     rax, [rbx+1]
.text:00000000000069A6                 cmp     r9, rbx
.text:00000000000069A9                 cmovbe  r9, rax
.text:00000000000069AD                 mov     rax, 7FFFFFFFFFFFFFFh
.text:00000000000069B7                 cmp     r9, rax
.text:00000000000069BA                 ja      loc_6BCB
.text:00000000000069C0                 mov     rsi, r9
.text:00000000000069C3                 mov     [rsp+88h+var_40], r9
.text:00000000000069C8                 mov     [rsp+88h+var_48], r10
.text:00000000000069CD                 shl     rsi, 5          ; size
.text:00000000000069D1                 cmp     [rsp+88h+src], rcx
.text:00000000000069D6                 mov     [rsp+88h+var_50], r8
.text:00000000000069DB                 mov     [rsp+88h+var_58], r11
.text:00000000000069E0                 jz      loc_6B9E
.text:00000000000069E6                 mov     rdi, rcx        ; ptr
.text:00000000000069E9                 call    _realloc        ; PIC mode
.text:00000000000069EE                 mov     rdx, [r15+8]
.text:00000000000069F2                 mov     r11, [rsp+88h+var_58]
.text:00000000000069F7                 mov     rcx, rax
.text:00000000000069FA                 mov     r8, [rsp+88h+var_50]
.text:00000000000069FF                 mov     r10, [rsp+88h+var_48]
.text:0000000000006A04                 mov     r9, [rsp+88h+var_40]
.text:0000000000006A09
.text:0000000000006A09 loc_6A09:                               ; CODE XREF: printf_parse+C82↓j
.text:0000000000006A09                 test    rcx, rcx
.text:0000000000006A0C                 jz      loc_6C27
.text:0000000000006A12                 cmp     [rsp+88h+src], rdx
.text:0000000000006A17                 mov     rax, [r15]
.text:0000000000006A1A                 jz      loc_6BE0
.text:0000000000006A20
.text:0000000000006A20 loc_6A20:                               ; CODE XREF: printf_parse+CE2↓j
.text:0000000000006A20                 mov     [r15+8], rcx
.text:0000000000006A24                 jmp     loc_643D
.text:0000000000006A29 ; ---------------------------------------------------------------------------
.text:0000000000006A29
.text:0000000000006A29 loc_6A29:                               ; CODE XREF: printf_parse+9FA↑j
.text:0000000000006A29                 mov     rcx, [r15+8]
.text:0000000000006A2D                 cmp     [rsp+88h+src], rcx
.text:0000000000006A32                 jz      short loc_6A4C
.text:0000000000006A34
.text:0000000000006A34 loc_6A34:                               ; CODE XREF: printf_parse+C90↓j
.text:0000000000006A34                 mov     rdi, rcx        ; ptr
.text:0000000000006A37                 call    _free           ; PIC mode
.text:0000000000006A3C
.text:0000000000006A3C loc_6A3C:                               ; CODE XREF: printf_parse+993↑j
.text:0000000000006A3C                                         ; printf_parse+C96↓j
.text:0000000000006A3C                 mov     rdi, [r14+8]    ; ptr
.text:0000000000006A40                 cmp     [rsp+88h+var_60], rdi
.text:0000000000006A45                 jz      short loc_6A4C
.text:0000000000006A47                 call    _free           ; PIC mode
.text:0000000000006A4C
.text:0000000000006A4C loc_6A4C:                               ; CODE XREF: printf_parse+AF2↑j
.text:0000000000006A4C                                         ; printf_parse+B05↑j
.text:0000000000006A4C                 call    ___errno_location ; PIC mode
.text:0000000000006A51                 mov     dword ptr [rax], 0Ch
.text:0000000000006A57                 mov     eax, 0FFFFFFFFh
.text:0000000000006A5C                 jmp     loc_5FE2
.text:0000000000006A61 ; ---------------------------------------------------------------------------
.text:0000000000006A61
.text:0000000000006A61 loc_6A61:                               ; CODE XREF: printf_parse+408↑j
.text:0000000000006A61                 mov     rdi, rsi        ; size
.text:0000000000006A64                 call    _malloc         ; PIC mode
.text:0000000000006A69                 mov     rdx, [rsp+88h+src]
.text:0000000000006A6E                 mov     rcx, rax
.text:0000000000006A71                 mov     r9, [rsp+88h+var_48]
.text:0000000000006A76                 mov     r10, [rsp+88h+var_50]
.text:0000000000006A7B                 mov     r8, [rsp+88h+var_58]
.text:0000000000006A80                 jmp     loc_636C
.text:0000000000006A85 ; ---------------------------------------------------------------------------
.text:0000000000006A85
.text:0000000000006A85 loc_6A85:                               ; CODE XREF: printf_parse+4E7↑j
.text:0000000000006A85                 mov     rsi, [rsp+88h+var_68]
.text:0000000000006A8A                 cmp     rsi, 0FFFFFFFFFFFFFFFFh
.text:0000000000006A8E                 lea     rax, [rsi+1]
.text:0000000000006A92                 mov     [r12+40h], rsi
.text:0000000000006A97                 jz      def_6185        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:0000000000006A9D                 mov     rbx, [rsp+88h+var_68]
.text:0000000000006AA2                 mov     [rsp+88h+var_68], rax
.text:0000000000006AA7                 jmp     loc_642D
.text:0000000000006AAC ; ---------------------------------------------------------------------------
.text:0000000000006AAC
.text:0000000000006AAC loc_6AAC:                               ; CODE XREF: printf_parse+4D8↑j
.text:0000000000006AAC                 mov     rdx, r11
.text:0000000000006AAF
.text:0000000000006AAF loc_6AAF:                               ; CODE XREF: printf_parse+B7D↓j
.text:0000000000006AAF                 add     rdx, 1
.text:0000000000006AB3                 movzx   ecx, byte ptr [rdx]
.text:0000000000006AB6                 lea     esi, [rcx-30h]
.text:0000000000006AB9                 cmp     sil, 9
.text:0000000000006ABD                 jbe     short loc_6AAF
.text:0000000000006ABF                 cmp     cl, 24h ; '$'
.text:0000000000006AC2                 jnz     loc_641E
.text:0000000000006AC8                 xor     ecx, ecx
.text:0000000000006ACA
.text:0000000000006ACA loc_6ACA:                               ; CODE XREF: printf_parse+C3C↓j
.text:0000000000006ACA                 mov     rsi, 1999999999999999h
.text:0000000000006AD4                 sub     eax, 30h ; '0'
.text:0000000000006AD7                 mov     rdx, r8
.text:0000000000006ADA                 cmp     rcx, rsi
.text:0000000000006ADD                 cdqe
.text:0000000000006ADF                 ja      short loc_6AE8
.text:0000000000006AE1                 lea     rdx, [rcx+rcx*4]
.text:0000000000006AE5                 add     rdx, rdx
.text:0000000000006AE8
.text:0000000000006AE8 loc_6AE8:                               ; CODE XREF: printf_parse+B9F↑j
.text:0000000000006AE8                 mov     rsi, r11
.text:0000000000006AEB
.text:0000000000006AEB loc_6AEB:                               ; CODE XREF: printf_parse+BDC↓j
.text:0000000000006AEB                 xor     ebx, ebx
.text:0000000000006AED                 add     rdx, rax
.text:0000000000006AF0                 movsx   eax, byte ptr [r11+1]
.text:0000000000006AF5                 setb    bl
.text:0000000000006AF8                 add     r11, 1
.text:0000000000006AFC                 mov     rcx, rdx
.text:0000000000006AFF                 test    rbx, rbx
.text:0000000000006B02                 lea     edi, [rax-30h]
.text:0000000000006B05                 jz      short loc_6B78
.text:0000000000006B07                 cmp     dil, 9
.text:0000000000006B0B                 ja      def_6185        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:0000000000006B11                 sub     eax, 30h ; '0'
.text:0000000000006B14                 mov     rdx, r8
.text:0000000000006B17                 mov     rsi, r11
.text:0000000000006B1A                 cdqe
.text:0000000000006B1C                 jmp     short loc_6AEB
.text:0000000000006B1E ; ---------------------------------------------------------------------------
.text:0000000000006B1E
.text:0000000000006B1E loc_6B1E:                               ; CODE XREF: printf_parse+6D4↑j
.text:0000000000006B1E                 cmp     dil, 9
.text:0000000000006B22                 ja      def_6185        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:0000000000006B28                 movsx   eax, cl
.text:0000000000006B2B                 mov     rbp, rdx
.text:0000000000006B2E                 mov     rcx, r8
.text:0000000000006B31                 sub     eax, 30h ; '0'
.text:0000000000006B34                 cdqe
.text:0000000000006B36                 jmp     loc_65F9
.text:0000000000006B3B ; ---------------------------------------------------------------------------
.text:0000000000006B3B
.text:0000000000006B3B loc_6B3B:                               ; CODE XREF: printf_parse+43D↑j
.text:0000000000006B3B                 mov     rsi, [rsp+88h+src] ; src
.text:0000000000006B40                 shl     rax, 5
.text:0000000000006B44                 mov     rdi, rcx        ; dest
.text:0000000000006B47                 mov     rdx, rax        ; n
.text:0000000000006B4A                 mov     [rsp+88h+var_48], r9
.text:0000000000006B4F                 mov     [rsp+88h+var_50], r10
.text:0000000000006B54                 mov     [rsp+88h+var_58], r8
.text:0000000000006B59                 call    _memcpy         ; PIC mode
.text:0000000000006B5E                 mov     r9, [rsp+88h+var_48]
.text:0000000000006B63                 mov     rcx, rax
.text:0000000000006B66                 mov     r10, [rsp+88h+var_50]
.text:0000000000006B6B                 mov     rax, [r15]
.text:0000000000006B6E                 mov     r8, [rsp+88h+var_58]
.text:0000000000006B73                 jmp     loc_6383
.text:0000000000006B78 ; ---------------------------------------------------------------------------
.text:0000000000006B78
.text:0000000000006B78 loc_6B78:                               ; CODE XREF: printf_parse+BC5↑j
.text:0000000000006B78                 cmp     dil, 9
.text:0000000000006B7C                 jbe     loc_6ACA
.text:0000000000006B82                 lea     rbx, [rdx-1]
.text:0000000000006B86                 cmp     rbx, 0FFFFFFFFFFFFFFFDh
.text:0000000000006B8A                 ja      def_6185        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:0000000000006B90                 mov     [r12+40h], rbx
.text:0000000000006B95                 lea     r11, [rsi+2]
.text:0000000000006B99                 jmp     loc_642D
.text:0000000000006B9E ; ---------------------------------------------------------------------------
.text:0000000000006B9E
.text:0000000000006B9E loc_6B9E:                               ; CODE XREF: printf_parse+AA0↑j
.text:0000000000006B9E                 mov     rdi, rsi        ; size
.text:0000000000006BA1                 call    _malloc         ; PIC mode
.text:0000000000006BA6                 mov     rdx, [rsp+88h+src]
.text:0000000000006BAB                 mov     rcx, rax
.text:0000000000006BAE                 mov     r9, [rsp+88h+var_40]
.text:0000000000006BB3                 mov     r10, [rsp+88h+var_48]
.text:0000000000006BB8                 mov     r8, [rsp+88h+var_50]
.text:0000000000006BBD                 mov     r11, [rsp+88h+var_58]
.text:0000000000006BC2                 jmp     loc_6A09
.text:0000000000006BC7 ; ---------------------------------------------------------------------------
.text:0000000000006BC7
.text:0000000000006BC7 loc_6BC7:                               ; CODE XREF: printf_parse+2DB↑j
.text:0000000000006BC7                                         ; printf_parse+2F1↑j ...
.text:0000000000006BC7                 mov     rcx, [r15+8]
.text:0000000000006BCB
.text:0000000000006BCB loc_6BCB:                               ; CODE XREF: printf_parse+3E7↑j
.text:0000000000006BCB                                         ; printf_parse+8AB↑j ...
.text:0000000000006BCB                 cmp     [rsp+88h+src], rcx
.text:0000000000006BD0                 jnz     loc_6A34
.text:0000000000006BD6                 jmp     loc_6A3C
.text:0000000000006BD6 ; ---------------------------------------------------------------------------
.text:0000000000006BDB                 align 20h
.text:0000000000006BE0
.text:0000000000006BE0 loc_6BE0:                               ; CODE XREF: printf_parse+ADA↑j
.text:0000000000006BE0                 mov     rsi, [rsp+88h+src] ; src
.text:0000000000006BE5                 shl     rax, 5
.text:0000000000006BE9                 mov     rdi, rcx        ; dest
.text:0000000000006BEC                 mov     rdx, rax        ; n
.text:0000000000006BEF                 mov     [rsp+88h+var_40], r9
.text:0000000000006BF4                 mov     [rsp+88h+var_48], r10
.text:0000000000006BF9                 mov     [rsp+88h+var_50], r8
.text:0000000000006BFE                 mov     [rsp+88h+var_58], r11
.text:0000000000006C03                 call    _memcpy         ; PIC mode
.text:0000000000006C08                 mov     r9, [rsp+88h+var_40]
.text:0000000000006C0D                 mov     rcx, rax
.text:0000000000006C10                 mov     r10, [rsp+88h+var_48]
.text:0000000000006C15                 mov     rax, [r15]
.text:0000000000006C18                 mov     r8, [rsp+88h+var_50]
.text:0000000000006C1D                 mov     r11, [rsp+88h+var_58]
.text:0000000000006C22                 jmp     loc_6A20
.text:0000000000006C27 ; ---------------------------------------------------------------------------
.text:0000000000006C27
.text:0000000000006C27 loc_6C27:                               ; CODE XREF: printf_parse+42F↑j
.text:0000000000006C27                                         ; printf_parse+ACC↑j
.text:0000000000006C27                 mov     rcx, rdx
.text:0000000000006C2A                 jmp     short loc_6BCB
.text:0000000000006C2A ; } // starts at 5F40
.text:0000000000006C2A printf_parse    endp
.text:0000000000006C2A
.text:0000000000006C2A ; ---------------------------------------------------------------------------
.text:0000000000006C2C                 align 10h
.text:0000000000006C30
.text:0000000000006C30 ; =============== S U B R O U T I N E =======================================
.text:0000000000006C30
.text:0000000000006C30 ; Attributes: info_from_lumina
.text:0000000000006C30
.text:0000000000006C30 ; void _libc_csu_init(void)
.text:0000000000006C30                 public __libc_csu_init
.text:0000000000006C30 __libc_csu_init proc near               ; DATA XREF: start+16↑o
.text:0000000000006C30 ; __unwind {
.text:0000000000006C30                 push    r15
.text:0000000000006C32                 push    r14
.text:0000000000006C34                 mov     r15, rdx
.text:0000000000006C37                 push    r13
.text:0000000000006C39                 push    r12
.text:0000000000006C3B                 lea     r12, __frame_dummy_init_array_entry
.text:0000000000006C42                 push    rbp
.text:0000000000006C43                 lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:0000000000006C4A                 push    rbx
.text:0000000000006C4B                 mov     r13d, edi
.text:0000000000006C4E                 mov     r14, rsi
.text:0000000000006C51                 sub     rbp, r12
.text:0000000000006C54                 sub     rsp, 8
.text:0000000000006C58                 sar     rbp, 3
.text:0000000000006C5C                 call    _init_proc
.text:0000000000006C61                 test    rbp, rbp
.text:0000000000006C64                 jz      short loc_6C86
.text:0000000000006C66                 xor     ebx, ebx
.text:0000000000006C68                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000006C70
.text:0000000000006C70 loc_6C70:                               ; CODE XREF: __libc_csu_init+54↓j
.text:0000000000006C70                 mov     rdx, r15
.text:0000000000006C73                 mov     rsi, r14
.text:0000000000006C76                 mov     edi, r13d
.text:0000000000006C79                 call    ds:(__frame_dummy_init_array_entry - 209AF0h)[r12+rbx*8]
.text:0000000000006C7D                 add     rbx, 1
.text:0000000000006C81                 cmp     rbp, rbx
.text:0000000000006C84                 jnz     short loc_6C70
.text:0000000000006C86
.text:0000000000006C86 loc_6C86:                               ; CODE XREF: __libc_csu_init+34↑j
.text:0000000000006C86                 add     rsp, 8
.text:0000000000006C8A                 pop     rbx
.text:0000000000006C8B                 pop     rbp
.text:0000000000006C8C                 pop     r12
.text:0000000000006C8E                 pop     r13
.text:0000000000006C90                 pop     r14
.text:0000000000006C92                 pop     r15
.text:0000000000006C94                 retn
.text:0000000000006C94 ; } // starts at 6C30
.text:0000000000006C94 __libc_csu_init endp
.text:0000000000006C94
.text:0000000000006C94 ; ---------------------------------------------------------------------------
.text:0000000000006C95                 align 20h
.text:0000000000006CA0
.text:0000000000006CA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000006CA0
.text:0000000000006CA0
.text:0000000000006CA0 ; void _libc_csu_fini(void)
.text:0000000000006CA0                 public __libc_csu_fini
.text:0000000000006CA0 __libc_csu_fini proc near               ; DATA XREF: start+F↑o
.text:0000000000006CA0 ; __unwind {
.text:0000000000006CA0                 rep retn
.text:0000000000006CA0 ; } // starts at 6CA0
.text:0000000000006CA0 __libc_csu_fini endp
.text:0000000000006CA0
.text:0000000000006CA0 ; ---------------------------------------------------------------------------
.text:0000000000006CA2                 align 10h
.text:0000000000006CB0
.text:0000000000006CB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000006CB0
.text:0000000000006CB0
.text:0000000000006CB0 atexit          proc near               ; CODE XREF: main+59↑p
.text:0000000000006CB0 ; __unwind {
.text:0000000000006CB0                 mov     rdx, cs:__dso_handle ; lpdso_handle
.text:0000000000006CB7                 xor     esi, esi        ; obj
.text:0000000000006CB9                 jmp     ___cxa_atexit
.text:0000000000006CB9 ; } // starts at 6CB0
.text:0000000000006CB9 atexit          endp
.text:0000000000006CB9
.text:0000000000006CB9 _text           ends
.text:0000000000006CB9
LOAD:0000000000006CBE ; ===========================================================================
LOAD:0000000000006CBE
LOAD:0000000000006CBE ; Segment type: Pure code
LOAD:0000000000006CBE ; Segment permissions: Read/Execute
LOAD:0000000000006CBE LOAD            segment byte public 'CODE' use64
LOAD:0000000000006CBE                 assume cs:LOAD
LOAD:0000000000006CBE                 ;org 6CBEh
LOAD:0000000000006CBE                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000006CBE                 align 20h
LOAD:0000000000006CBE LOAD            ends
LOAD:0000000000006CBE
.fini:0000000000006CC0 ; ===========================================================================
.fini:0000000000006CC0
.fini:0000000000006CC0 ; Segment type: Pure code
.fini:0000000000006CC0 ; Segment permissions: Read/Execute
.fini:0000000000006CC0 _fini           segment dword public 'CODE' use64
.fini:0000000000006CC0                 assume cs:_fini
.fini:0000000000006CC0                 ;org 6CC0h
.fini:0000000000006CC0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:0000000000006CC0
.fini:0000000000006CC0 ; =============== S U B R O U T I N E =======================================
.fini:0000000000006CC0
.fini:0000000000006CC0
.fini:0000000000006CC0                 public _term_proc
.fini:0000000000006CC0 _term_proc      proc near
.fini:0000000000006CC0                 sub     rsp, 8          ; _fini
.fini:0000000000006CC4                 add     rsp, 8
.fini:0000000000006CC8                 retn
.fini:0000000000006CC8 _term_proc      endp
.fini:0000000000006CC8
.fini:0000000000006CC8 _fini           ends
.fini:0000000000006CC8
LOAD:0000000000006CC9 ; ===========================================================================
LOAD:0000000000006CC9
LOAD:0000000000006CC9 ; Segment type: Pure code
LOAD:0000000000006CC9 ; Segment permissions: Read/Execute
LOAD:0000000000006CC9 LOAD            segment byte public 'CODE' use64
LOAD:0000000000006CC9                 assume cs:LOAD
LOAD:0000000000006CC9                 ;org 6CC9h
LOAD:0000000000006CC9                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000006CC9                 align 20h
LOAD:0000000000006CC9 LOAD            ends
LOAD:0000000000006CC9
.rodata:0000000000006CE0 ; ===========================================================================
.rodata:0000000000006CE0
.rodata:0000000000006CE0 ; Segment type: Pure data
.rodata:0000000000006CE0 ; Segment permissions: Read
.rodata:0000000000006CE0 _rodata         segment align_32 public 'CONST' use64
.rodata:0000000000006CE0                 assume cs:_rodata
.rodata:0000000000006CE0                 ;org 6CE0h
.rodata:0000000000006CE0                 public _IO_stdin_used
.rodata:0000000000006CE0 _IO_stdin_used  db    1
.rodata:0000000000006CE1                 db    0
.rodata:0000000000006CE2                 db    2
.rodata:0000000000006CE3                 db    0
.rodata:0000000000006CE4 aRmdir_0        db 'rmdir',0            ; DATA XREF: main+C7↑o
.rodata:0000000000006CE4                                         ; usage+10C↑o ...
.rodata:0000000000006CEA asc_6CEA        db '[',0                ; DATA XREF: usage+118↑o
.rodata:0000000000006CEC aTestInvocation db 'test invocation',0  ; DATA XREF: usage+13F↑o
.rodata:0000000000006CFC aMultiCallInvoc db 'Multi-call invocation',0
.rodata:0000000000006CFC                                         ; DATA XREF: usage+16F↑o
.rodata:0000000000006CFC                                         ; usage+26C↑o ...
.rodata:0000000000006D12 aSha224sum      db 'sha224sum',0        ; DATA XREF: usage+180↑o
.rodata:0000000000006D1C aSha2Utilities  db 'sha2 utilities',0   ; DATA XREF: usage+18C↑o
.rodata:0000000000006D2B aSha256sum      db 'sha256sum',0        ; DATA XREF: usage+11F↑o
.rodata:0000000000006D35 aSha384sum      db 'sha384sum',0        ; DATA XREF: usage+14B↑o
.rodata:0000000000006D3F aSha512sum      db 'sha512sum',0        ; DATA XREF: usage+163↑o
.rodata:0000000000006D49 ; const char aSOnlineHelpS[]
.rodata:0000000000006D49 aSOnlineHelpS   db 0Ah                  ; DATA XREF: usage+1DA↑o
.rodata:0000000000006D49                 db '%s online help: <%s>',0Ah,0
.rodata:0000000000006D60 unk_6D60        db  47h ; G             ; DATA XREF: main+C0↑o
.rodata:0000000000006D60                                         ; usage+1F6↑o ...
.rodata:0000000000006D61                 db  4Eh ; N
.rodata:0000000000006D62                 db  55h ; U
.rodata:0000000000006D63                 db  20h
.rodata:0000000000006D64 ; const char domainname[]
.rodata:0000000000006D64 domainname      db 'coreutils',0        ; DATA XREF: main+3A↑o
.rodata:0000000000006D64                                         ; main+46↑o ...
.rodata:0000000000006D6E ; const char s2[]
.rodata:0000000000006D6E s2              db 'en_',0              ; DATA XREF: usage+21D↑o
.rodata:0000000000006D6E                                         ; usage+2DE↑o
.rodata:0000000000006D72 ; const char aFullDocumentat[]
.rodata:0000000000006D72 aFullDocumentat db 'Full documentation <%s%s>',0Ah,0
.rodata:0000000000006D72                                         ; DATA XREF: usage:loc_1E49↑o
.rodata:0000000000006D72                                         ; usage:loc_1F06↑o
.rodata:0000000000006D8D ; const char dirname[]
.rodata:0000000000006D8D dirname         db '/usr/local/share/locale',0
.rodata:0000000000006D8D                                         ; DATA XREF: main+33↑o
.rodata:0000000000006DA5 aDavidMackenzie db 'David MacKenzie',0  ; DATA XREF: main+B9↑o
.rodata:0000000000006DB5 ; const char shortopts[]
.rodata:0000000000006DB5 shortopts       db 'pv',0               ; DATA XREF: main:loc_1755↑o
.rodata:0000000000006DB8 ; const char aMissingOperand[]
.rodata:0000000000006DB8 aMissingOperand db 'missing operand',0  ; DATA XREF: main:loc_19EB↑o
.rodata:0000000000006DC8 ; const char msgid[]
.rodata:0000000000006DC8 msgid           db 'removing directory, %s',0
.rodata:0000000000006DC8                                         ; DATA XREF: main+170↑o
.rodata:0000000000006DC8                                         ; main+2AA↑o
.rodata:0000000000006DDF ; const char aFailedToRemove[]
.rodata:0000000000006DDF aFailedToRemove db 'failed to remove %s',0
.rodata:0000000000006DDF                                         ; DATA XREF: main+1BF↑o
.rodata:0000000000006DF3 ; const char aFailedToRemove_0[]
.rodata:0000000000006DF3 aFailedToRemove_0 db 'failed to remove directory %s',0
.rodata:0000000000006DF3                                         ; DATA XREF: main+26A↑o
.rodata:0000000000006E11 aIgnoreFailOnNo db 'ignore-fail-on-non-empty',0
.rodata:0000000000006E11                                         ; DATA XREF: .data.rel.ro:longopts↓o
.rodata:0000000000006E2A aPath           db 'path',0             ; DATA XREF: .data.rel.ro:0000000000209B20↓o
.rodata:0000000000006E2F aParents        db 'parents',0          ; DATA XREF: .data.rel.ro:0000000000209B40↓o
.rodata:0000000000006E37 aVerbose        db 'verbose',0          ; DATA XREF: .data.rel.ro:0000000000209B60↓o
.rodata:0000000000006E3F aHelp           db 'help',0             ; DATA XREF: .data.rel.ro:0000000000209B80↓o
.rodata:0000000000006E44 aVersion        db 'version',0          ; DATA XREF: .data.rel.ro:0000000000209BA0↓o
.rodata:0000000000006E4C                 align 10h
.rodata:0000000000006E50 ; const char aTrySHelpForMor[]
.rodata:0000000000006E50 aTrySHelpForMor db 'Try ',27h,'%s --help',27h,' for more information.',0Ah,0
.rodata:0000000000006E50                                         ; DATA XREF: usage+2F↑o
.rodata:0000000000006E77                 align 8
.rodata:0000000000006E78 ; const char aUsageSOptionDi[]
.rodata:0000000000006E78 aUsageSOptionDi db 'Usage: %s [OPTION]... DIRECTORY...',0Ah,0
.rodata:0000000000006E78                                         ; DATA XREF: usage:loc_1C6D↑o
.rodata:0000000000006E9C                 align 20h
.rodata:0000000000006EA0 ; const char aRemoveTheDirec[]
.rodata:0000000000006EA0 aRemoveTheDirec db 'Remove the DIRECTORY(ies), if they are empty.',0Ah
.rodata:0000000000006EA0                                         ; DATA XREF: usage+84↑o
.rodata:0000000000006EA0                 db 0Ah
.rodata:0000000000006EA0                 db '      --ignore-fail-on-non-empty',0Ah
.rodata:0000000000006EA0                 db '                  ignore each failure that is solely because a di'
.rodata:0000000000006EA0                 db 'rectory',0Ah
.rodata:0000000000006EA0                 db '                    is non-empty',0Ah,0
.rodata:0000000000006F5B                 align 20h
.rodata:0000000000006F60 ; const char aPParentsRemove[]
.rodata:0000000000006F60 aPParentsRemove db '  -p, --parents   remove DIRECTORY and its ancestors; e.g., ',27h
.rodata:0000000000006F60                                         ; DATA XREF: usage+A9↑o
.rodata:0000000000006F60                 db 'rmdir -p a/b/c',27h,' is',0Ah
.rodata:0000000000006F60                 db '                    similar to ',27h,'rmdir a/b/c a/b a',27h,0Ah
.rodata:0000000000006F60                 db '  -v, --verbose   output a diagnostic for every directory process'
.rodata:0000000000006F60                 db 'ed',0Ah,0
.rodata:0000000000007028 ; const char aHelpDisplayThi[]
.rodata:0000000000007028 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.rodata:0000000000007028                                         ; DATA XREF: usage+CE↑o
.rodata:0000000000007055                 align 8
.rodata:0000000000007058 ; const char aVersionOutputV[]
.rodata:0000000000007058 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.rodata:0000000000007058                                         ; DATA XREF: usage+F3↑o
.rodata:000000000000708E                 align 10h
.rodata:0000000000007090 aHttpsWwwGnuOrg db 'https://www.gnu.org/software/coreutils/',0
.rodata:0000000000007090                                         ; DATA XREF: usage+1EF↑o
.rodata:0000000000007090                                         ; usage+253↑o ...
.rodata:00000000000070B8 ; const char aReportAnyTrans[]
.rodata:00000000000070B8 aReportAnyTrans db 'Report any translation bugs to <https://translationproject.org/te'
.rodata:00000000000070B8                                         ; DATA XREF: usage+347↑o
.rodata:00000000000070B8                 db 'am/>',0Ah,0
.rodata:00000000000070FF                 align 20h
.rodata:0000000000007100 ; const char aOrAvailableLoc[]
.rodata:0000000000007100 aOrAvailableLoc db 'or available locally via: info ',27h,'(coreutils) %s%s',27h,0Ah,0
.rodata:0000000000007100                                         ; DATA XREF: usage:loc_1E8E↑o
.rodata:0000000000007133 asc_7133        db ': ',0               ; DATA XREF: prog_fprintf+7D↑o
.rodata:0000000000007136 a831            db '8.31',0             ; DATA XREF: .data:Version↓o
.rodata:000000000000713B ; const char aWriteError[]
.rodata:000000000000713B aWriteError     db 'write error',0      ; DATA XREF: close_stdout:loc_2103↑o
.rodata:0000000000007147 ; const char format[]
.rodata:0000000000007147 format          db '%s: %s',0           ; DATA XREF: close_stdout+6C↑o
.rodata:000000000000714E                 align 10h
.rodata:0000000000007150 aANullArgv0WasP db 'A NULL argv[0] was passed through an exec system call.',0Ah,0
.rodata:0000000000007150                                         ; DATA XREF: set_program_name+84↑o
.rodata:0000000000007188 aLibs           db '/.libs/',0          ; DATA XREF: set_program_name+2C↑o
.rodata:0000000000007190 aLt             db 'lt-',0              ; DATA XREF: set_program_name+44↑o
.rodata:0000000000007194 unk_7194        db 0E2h                 ; DATA XREF: gettext_quote+CE↑o
.rodata:0000000000007195                 db  80h
.rodata:0000000000007196                 db  98h
.rodata:0000000000007197                 db    0
.rodata:0000000000007198 unk_7198        db 0E2h                 ; DATA XREF: gettext_quote+D5↑o
.rodata:0000000000007199                 db  80h
.rodata:000000000000719A                 db  99h
.rodata:000000000000719B                 db    0
.rodata:000000000000719C unk_719C        db 0A1h                 ; DATA XREF: gettext_quote+74↑o
.rodata:000000000000719D                 db    7
.rodata:000000000000719E                 db  65h ; e
.rodata:000000000000719F                 db    0
.rodata:00000000000071A0 unk_71A0        db 0A1h                 ; DATA XREF: gettext_quote+7B↑o
.rodata:00000000000071A1                 db 0AFh
.rodata:00000000000071A2                 db    0
.rodata:00000000000071A3 unk_71A3        db  22h ; "             ; DATA XREF: gettext_quote:loc_2270↑o
.rodata:00000000000071A3                                         ; quotearg_buffer_restyled:loc_302B↑o ...
.rodata:00000000000071A4                 db    0
.rodata:00000000000071A5 ; const char asc_71A5[2]
.rodata:00000000000071A5 asc_71A5        db 27h,0                ; DATA XREF: gettext_quote+27↑o
.rodata:00000000000071A5                                         ; quotearg_buffer_restyled:loc_23F3↑o ...
.rodata:00000000000071A7 ; const char asc_71A7[2]
.rodata:00000000000071A7 asc_71A7        db '`',0                ; DATA XREF: quotearg_buffer_restyled+D9B↑o
.rodata:00000000000071A7                                         ; quotearg_buffer_restyled+DB6↑o
.rodata:00000000000071A9 aLiteral        db 'literal',0          ; DATA XREF: .data.rel.ro:quoting_style_args↓o
.rodata:00000000000071B1 aShell          db 'shell',0            ; DATA XREF: .data.rel.ro:0000000000209BE8↓o
.rodata:00000000000071B7 aShellAlways    db 'shell-always',0     ; DATA XREF: .data.rel.ro:0000000000209BF0↓o
.rodata:00000000000071C4 aShellEscape    db 'shell-escape',0     ; DATA XREF: .data.rel.ro:0000000000209BF8↓o
.rodata:00000000000071C4                                         ; .data.rel.ro:0000000000209C18↓o
.rodata:00000000000071D1 aShellEscapeAlw db 'shell-escape-always',0
.rodata:00000000000071D1                                         ; DATA XREF: .data.rel.ro:0000000000209C00↓o
.rodata:00000000000071E5 aC_1            db 'c',0                ; DATA XREF: .data.rel.ro:0000000000209C08↓o
.rodata:00000000000071E7 aCMaybe         db 'c-maybe',0          ; DATA XREF: .data.rel.ro:0000000000209C10↓o
.rodata:00000000000071EF aClocale        db 'clocale',0          ; DATA XREF: .data.rel.ro:0000000000209C28↓o
.rodata:00000000000071F7                 align 20h
.rodata:0000000000007200 jpt_23D1        dd offset loc_317A - 7200h
.rodata:0000000000007200                                         ; DATA XREF: quotearg_buffer_restyled+80↑o
.rodata:0000000000007200                                         ; quotearg_buffer_restyled+8A↑r
.rodata:0000000000007200                 dd offset loc_23D3 - 7200h ; jump table for switch statement
.rodata:0000000000007200                 dd offset loc_33A8 - 7200h
.rodata:0000000000007200                 dd offset loc_31B4 - 7200h
.rodata:0000000000007200                 dd offset loc_2FA4 - 7200h
.rodata:0000000000007200                 dd offset loc_3000 - 7200h
.rodata:0000000000007200                 dd offset loc_3055 - 7200h
.rodata:0000000000007200                 dd offset loc_309A - 7200h
.rodata:0000000000007200                 dd offset loc_30D4 - 7200h
.rodata:0000000000007200                 dd offset loc_30D4 - 7200h
.rodata:0000000000007200                 dd offset loc_30D4 - 7200h
.rodata:000000000000722C jpt_252E        dd offset loc_2750 - 722Ch, offset def_252E - 722Ch, offset def_252E - 722Ch
.rodata:000000000000722C                                         ; DATA XREF: quotearg_buffer_restyled+1DD↑o
.rodata:000000000000722C                                         ; quotearg_buffer_restyled+1E7↑r
.rodata:000000000000722C                 dd offset def_252E - 722Ch, offset def_252E - 722Ch, offset def_252E - 722Ch ; jump table for switch statement
.rodata:000000000000722C                 dd offset def_252E - 722Ch, offset loc_2790 - 722Ch, offset loc_2698 - 722Ch
.rodata:000000000000722C                 dd offset loc_2658 - 722Ch, offset loc_2820 - 722Ch, offset loc_2810 - 722Ch
.rodata:000000000000722C                 dd offset loc_2800 - 722Ch, offset loc_27F0 - 722Ch, offset def_252E - 722Ch
.rodata:000000000000722C                 dd offset def_252E - 722Ch, offset def_252E - 722Ch, offset def_252E - 722Ch
.rodata:000000000000722C                 dd offset def_252E - 722Ch, offset def_252E - 722Ch, offset def_252E - 722Ch
.rodata:000000000000722C                 dd offset def_252E - 722Ch, offset def_252E - 722Ch, offset def_252E - 722Ch
.rodata:000000000000722C                 dd offset def_252E - 722Ch, offset def_252E - 722Ch, offset def_252E - 722Ch
.rodata:000000000000722C                 dd offset def_252E - 722Ch, offset def_252E - 722Ch, offset def_252E - 722Ch
.rodata:000000000000722C                 dd offset def_252E - 722Ch, offset def_252E - 722Ch, offset loc_27E0 - 722Ch
.rodata:000000000000722C                 dd offset loc_27D0 - 722Ch, offset loc_27D0 - 722Ch, offset loc_27A0 - 722Ch
.rodata:000000000000722C                 dd offset loc_27D0 - 722Ch, offset loc_2778 - 722Ch, offset loc_27D0 - 722Ch
.rodata:000000000000722C                 dd offset loc_2633 - 722Ch, offset loc_27D0 - 722Ch, offset loc_27D0 - 722Ch
.rodata:000000000000722C                 dd offset loc_27D0 - 722Ch, offset loc_2778 - 722Ch, offset loc_2778 - 722Ch
.rodata:000000000000722C                 dd offset loc_2778 - 722Ch, offset loc_2778 - 722Ch, offset loc_2778 - 722Ch
.rodata:000000000000722C                 dd offset loc_2778 - 722Ch, offset loc_2778 - 722Ch, offset loc_2778 - 722Ch
.rodata:000000000000722C                 dd offset loc_2778 - 722Ch, offset loc_2778 - 722Ch, offset loc_2778 - 722Ch
.rodata:000000000000722C                 dd offset loc_2778 - 722Ch, offset loc_2778 - 722Ch, offset loc_2778 - 722Ch
.rodata:000000000000722C                 dd offset loc_2778 - 722Ch, offset loc_2778 - 722Ch, offset loc_27D0 - 722Ch
.rodata:000000000000722C                 dd offset loc_27D0 - 722Ch, offset loc_27D0 - 722Ch, offset loc_27D0 - 722Ch
.rodata:000000000000722C                 dd offset loc_2603 - 722Ch, offset def_252E - 722Ch, offset loc_2778 - 722Ch
.rodata:000000000000722C                 dd offset loc_2778 - 722Ch, offset loc_2778 - 722Ch, offset loc_2778 - 722Ch
.rodata:000000000000722C                 dd offset loc_2778 - 722Ch, offset loc_2778 - 722Ch, offset loc_2778 - 722Ch
.rodata:000000000000722C                 dd offset loc_2778 - 722Ch, offset loc_2778 - 722Ch, offset loc_2778 - 722Ch
.rodata:000000000000722C                 dd offset loc_2778 - 722Ch, offset loc_2778 - 722Ch, offset loc_2778 - 722Ch
.rodata:000000000000722C                 dd offset loc_2778 - 722Ch, offset loc_2778 - 722Ch, offset loc_2778 - 722Ch
.rodata:000000000000722C                 dd offset loc_2778 - 722Ch, offset loc_2778 - 722Ch, offset loc_2778 - 722Ch
.rodata:000000000000722C                 dd offset loc_2778 - 722Ch, offset loc_2778 - 722Ch, offset loc_2778 - 722Ch
.rodata:000000000000722C                 dd offset loc_2778 - 722Ch, offset loc_2778 - 722Ch, offset loc_2778 - 722Ch
.rodata:000000000000722C                 dd offset loc_2778 - 722Ch, offset loc_27D0 - 722Ch, offset loc_26A8 - 722Ch
.rodata:000000000000722C                 dd offset loc_2778 - 722Ch, offset loc_27D0 - 722Ch, offset loc_2778 - 722Ch
.rodata:000000000000722C                 dd offset loc_27D0 - 722Ch, offset loc_2778 - 722Ch, offset loc_2778 - 722Ch
.rodata:000000000000722C                 dd offset loc_2778 - 722Ch, offset loc_2778 - 722Ch, offset loc_2778 - 722Ch
.rodata:000000000000722C                 dd offset loc_2778 - 722Ch, offset loc_2778 - 722Ch, offset loc_2778 - 722Ch
.rodata:000000000000722C                 dd offset loc_2778 - 722Ch, offset loc_2778 - 722Ch, offset loc_2778 - 722Ch
.rodata:000000000000722C                 dd offset loc_2778 - 722Ch, offset loc_2778 - 722Ch, offset loc_2778 - 722Ch
.rodata:000000000000722C                 dd offset loc_2778 - 722Ch, offset loc_2778 - 722Ch, offset loc_2778 - 722Ch
.rodata:000000000000722C                 dd offset loc_2778 - 722Ch, offset loc_2778 - 722Ch, offset loc_2778 - 722Ch
.rodata:000000000000722C                 dd offset loc_2778 - 722Ch, offset loc_2778 - 722Ch, offset loc_2778 - 722Ch
.rodata:000000000000722C                 dd offset loc_2778 - 722Ch, offset loc_2778 - 722Ch, offset loc_2778 - 722Ch
.rodata:000000000000722C                 dd offset loc_2533 - 722Ch, offset loc_27D0 - 722Ch, offset loc_2533 - 722Ch
.rodata:000000000000722C                 dd offset loc_27A0 - 722Ch
.rodata:0000000000007428 jpt_28BA        dd offset loc_2920 - 7428h, offset def_28BA - 7428h, offset def_28BA - 7428h
.rodata:0000000000007428                                         ; DATA XREF: quotearg_buffer_restyled+569↑o
.rodata:0000000000007428                                         ; quotearg_buffer_restyled+573↑r
.rodata:0000000000007428                 dd offset def_28BA - 7428h, offset def_28BA - 7428h, offset def_28BA - 7428h ; jump table for switch statement
.rodata:0000000000007428                 dd offset def_28BA - 7428h, offset loc_2910 - 7428h, offset loc_2A60 - 7428h
.rodata:0000000000007428                 dd offset loc_2A48 - 7428h, offset loc_28F8 - 7428h, offset loc_2A38 - 7428h
.rodata:0000000000007428                 dd offset loc_28E0 - 7428h, offset loc_2A20 - 7428h, offset def_28BA - 7428h
.rodata:0000000000007428                 dd offset def_28BA - 7428h, offset def_28BA - 7428h, offset def_28BA - 7428h
.rodata:0000000000007428                 dd offset def_28BA - 7428h, offset def_28BA - 7428h, offset def_28BA - 7428h
.rodata:0000000000007428                 dd offset def_28BA - 7428h, offset def_28BA - 7428h, offset def_28BA - 7428h
.rodata:0000000000007428                 dd offset def_28BA - 7428h, offset def_28BA - 7428h, offset def_28BA - 7428h
.rodata:0000000000007428                 dd offset def_28BA - 7428h, offset def_28BA - 7428h, offset def_28BA - 7428h
.rodata:0000000000007428                 dd offset def_28BA - 7428h, offset def_28BA - 7428h, offset loc_2A08 - 7428h
.rodata:0000000000007428                 dd offset loc_29F0 - 7428h, offset loc_29F0 - 7428h, offset loc_29D8 - 7428h
.rodata:0000000000007428                 dd offset loc_29F0 - 7428h, offset loc_29C0 - 7428h, offset loc_29F0 - 7428h
.rodata:0000000000007428                 dd offset loc_2630 - 7428h, offset loc_29F0 - 7428h, offset loc_29F0 - 7428h
.rodata:0000000000007428                 dd offset loc_29F0 - 7428h, offset loc_29C0 - 7428h, offset loc_29C0 - 7428h
.rodata:0000000000007428                 dd offset loc_29C0 - 7428h, offset loc_29C0 - 7428h, offset loc_29C0 - 7428h
.rodata:0000000000007428                 dd offset loc_29C0 - 7428h, offset loc_29C0 - 7428h, offset loc_29C0 - 7428h
.rodata:0000000000007428                 dd offset loc_29C0 - 7428h, offset loc_29C0 - 7428h, offset loc_29C0 - 7428h
.rodata:0000000000007428                 dd offset loc_29C0 - 7428h, offset loc_29C0 - 7428h, offset loc_29C0 - 7428h
.rodata:0000000000007428                 dd offset loc_29C0 - 7428h, offset loc_29C0 - 7428h, offset loc_29F0 - 7428h
.rodata:0000000000007428                 dd offset loc_29F0 - 7428h, offset loc_29F0 - 7428h, offset loc_29F0 - 7428h
.rodata:0000000000007428                 dd offset loc_2600 - 7428h, offset def_28BA - 7428h, offset loc_29C0 - 7428h
.rodata:0000000000007428                 dd offset loc_29C0 - 7428h, offset loc_29C0 - 7428h, offset loc_29C0 - 7428h
.rodata:0000000000007428                 dd offset loc_29C0 - 7428h, offset loc_29C0 - 7428h, offset loc_29C0 - 7428h
.rodata:0000000000007428                 dd offset loc_29C0 - 7428h, offset loc_29C0 - 7428h, offset loc_29C0 - 7428h
.rodata:0000000000007428                 dd offset loc_29C0 - 7428h, offset loc_29C0 - 7428h, offset loc_29C0 - 7428h
.rodata:0000000000007428                 dd offset loc_29C0 - 7428h, offset loc_29C0 - 7428h, offset loc_29C0 - 7428h
.rodata:0000000000007428                 dd offset loc_29C0 - 7428h, offset loc_29C0 - 7428h, offset loc_29C0 - 7428h
.rodata:0000000000007428                 dd offset loc_29C0 - 7428h, offset loc_29C0 - 7428h, offset loc_29C0 - 7428h
.rodata:0000000000007428                 dd offset loc_29C0 - 7428h, offset loc_29C0 - 7428h, offset loc_29C0 - 7428h
.rodata:0000000000007428                 dd offset loc_29C0 - 7428h, offset loc_29F0 - 7428h, offset loc_28C0 - 7428h
.rodata:0000000000007428                 dd offset loc_29C0 - 7428h, offset loc_29F0 - 7428h, offset loc_29C0 - 7428h
.rodata:0000000000007428                 dd offset loc_29F0 - 7428h, offset loc_29C0 - 7428h, offset loc_29C0 - 7428h
.rodata:0000000000007428                 dd offset loc_29C0 - 7428h, offset loc_29C0 - 7428h, offset loc_29C0 - 7428h
.rodata:0000000000007428                 dd offset loc_29C0 - 7428h, offset loc_29C0 - 7428h, offset loc_29C0 - 7428h
.rodata:0000000000007428                 dd offset loc_29C0 - 7428h, offset loc_29C0 - 7428h, offset loc_29C0 - 7428h
.rodata:0000000000007428                 dd offset loc_29C0 - 7428h, offset loc_29C0 - 7428h, offset loc_29C0 - 7428h
.rodata:0000000000007428                 dd offset loc_29C0 - 7428h, offset loc_29C0 - 7428h, offset loc_29C0 - 7428h
.rodata:0000000000007428                 dd offset loc_29C0 - 7428h, offset loc_29C0 - 7428h, offset loc_29C0 - 7428h
.rodata:0000000000007428                 dd offset loc_29C0 - 7428h, offset loc_29C0 - 7428h, offset loc_29C0 - 7428h
.rodata:0000000000007428                 dd offset loc_29C0 - 7428h, offset loc_29C0 - 7428h, offset loc_29C0 - 7428h
.rodata:0000000000007428                 dd offset loc_2530 - 7428h, offset loc_29F0 - 7428h, offset loc_2530 - 7428h
.rodata:0000000000007428                 dd offset loc_29D8 - 7428h
.rodata:0000000000007624                 align 20h
.rodata:0000000000007640                 public quoting_style_vals
.rodata:0000000000007640 quoting_style_vals db    0
.rodata:0000000000007641                 db    0
.rodata:0000000000007642                 db    0
.rodata:0000000000007643                 db    0
.rodata:0000000000007644                 db    1
.rodata:0000000000007645                 db    0
.rodata:0000000000007646                 db    0
.rodata:0000000000007647                 db    0
.rodata:0000000000007648                 db    2
.rodata:0000000000007649                 db    0
.rodata:000000000000764A                 db    0
.rodata:000000000000764B                 db    0
.rodata:000000000000764C                 db    3
.rodata:000000000000764D                 db    0
.rodata:000000000000764E                 db    0
.rodata:000000000000764F                 db    0
.rodata:0000000000007650                 db    4
.rodata:0000000000007651                 db    0
.rodata:0000000000007652                 db    0
.rodata:0000000000007653                 db    0
.rodata:0000000000007654                 db    5
.rodata:0000000000007655                 db    0
.rodata:0000000000007656                 db    0
.rodata:0000000000007657                 db    0
.rodata:0000000000007658                 db    6
.rodata:0000000000007659                 db    0
.rodata:000000000000765A                 db    0
.rodata:000000000000765B                 db    0
.rodata:000000000000765C                 db    7
.rodata:000000000000765D                 db    0
.rodata:000000000000765E                 db    0
.rodata:000000000000765F                 db    0
.rodata:0000000000007660                 db    8
.rodata:0000000000007661                 db    0
.rodata:0000000000007662                 db    0
.rodata:0000000000007663                 db    0
.rodata:0000000000007664                 db    9
.rodata:0000000000007665                 db    0
.rodata:0000000000007666                 db    0
.rodata:0000000000007667                 db    0
.rodata:0000000000007668 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: version_etc_arn+23↑o
.rodata:0000000000007674 aSS_0           db '%s %s',0Ah,0        ; DATA XREF: version_etc_arn+13E↑o
.rodata:000000000000767B ; const char aC_0[]
.rodata:000000000000767B aC_0            db '(C)',0              ; DATA XREF: version_etc_arn:loc_3F1C↑o
.rodata:000000000000767F ; const char aWrittenByS[]
.rodata:000000000000767F aWrittenByS     db 'Written by %s.',0Ah,0
.rodata:000000000000767F                                         ; DATA XREF: version_etc_arn+1BB↑o
.rodata:000000000000768F ; const char aWrittenBySAndS[]
.rodata:000000000000768F aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.rodata:000000000000768F                                         ; DATA XREF: version_etc_arn+1FC↑o
.rodata:00000000000076A6 ; const char aWrittenBySSAnd[]
.rodata:00000000000076A6 aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.rodata:00000000000076A6                                         ; DATA XREF: version_etc_arn+248↑o
.rodata:00000000000076C2 ; const char aReportBugsToS[]
.rodata:00000000000076C2 aReportBugsToS  db 0Ah                  ; DATA XREF: emit_bug_reporting_address+1↑o
.rodata:00000000000076C2                 db 'Report bugs to: %s',0Ah,0
.rodata:00000000000076D7 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.rodata:00000000000076D7                                         ; DATA XREF: emit_bug_reporting_address+14↑o
.rodata:00000000000076ED ; const char aSHomePageS[]
.rodata:00000000000076ED aSHomePageS     db '%s home page: <%s>',0Ah,0
.rodata:00000000000076ED                                         ; DATA XREF: emit_bug_reporting_address+2A↑o
.rodata:0000000000007701                 align 8
.rodata:0000000000007708 ; const char aLicenseGplv3Gn[]
.rodata:0000000000007708 aLicenseGplv3Gn db 0Ah                  ; DATA XREF: version_etc_arn+6E↑o
.rodata:0000000000007708                 db 'License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licen'
.rodata:0000000000007708                 db 'ses/gpl.html>.',0Ah
.rodata:0000000000007708                 db 'This is free software: you are free to change and redistribute it'
.rodata:0000000000007708                 db '.',0Ah
.rodata:0000000000007708                 db 'There is NO WARRANTY, to the extent permitted by law.',0Ah
.rodata:0000000000007708                 db 0Ah,0
.rodata:00000000000077D4                 align 8
.rodata:00000000000077D8 ; const char aWrittenBySSSAn[]
.rodata:00000000000077D8 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000077D8                                         ; DATA XREF: version_etc_arn:loc_4170↑o
.rodata:00000000000077D8                 db 'and %s.',0Ah,0
.rodata:00000000000077F8 ; const char aWrittenBySSSSA[]
.rodata:00000000000077F8 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000077F8                                         ; DATA XREF: version_etc_arn+2EC↑o
.rodata:00000000000077F8                 db '%s, and %s.',0Ah,0
.rodata:000000000000781C                 align 20h
.rodata:0000000000007820 ; const char aWrittenBySSSSS_1[]
.rodata:0000000000007820 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000007820                                         ; DATA XREF: version_etc_arn+320↑o
.rodata:0000000000007820                 db '%s, %s, and %s.',0Ah,0
.rodata:0000000000007848 ; const char aWrittenBySSSSS_2[]
.rodata:0000000000007848 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000007848                                         ; DATA XREF: version_etc_arn+388↑o
.rodata:0000000000007848                 db '%s, %s, %s, and %s.',0Ah,0
.rodata:0000000000007874                 align 8
.rodata:0000000000007878 ; const char aWrittenBySSSSS[]
.rodata:0000000000007878 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000007878                                         ; DATA XREF: version_etc_arn+B8↑o
.rodata:0000000000007878                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000007878                 db 'and %s.',0Ah,0
.rodata:00000000000078A8 ; const char aWrittenBySSSSS_0[]
.rodata:00000000000078A8 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000078A8                                         ; DATA XREF: version_etc_arn+168↑o
.rodata:00000000000078A8                 db '%s, %s, %s, %s,',0Ah
.rodata:00000000000078A8                 db '%s, and %s.',0Ah,0
.rodata:00000000000078DC                 align 20h
.rodata:00000000000078E0 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000078E0                                         ; DATA XREF: version_etc_arn+3E5↑o
.rodata:00000000000078E0                 db '%s, %s, %s, %s,',0Ah
.rodata:00000000000078E0                 db '%s, %s, and others.',0Ah,0
.rodata:000000000000791C                 align 20h
.rodata:0000000000007920 ; const char aGeneralHelpUsi[]
.rodata:0000000000007920 aGeneralHelpUsi db 'General help using GNU software: <https://www.gnu.org/gethelp/>',0Ah
.rodata:0000000000007920                                         ; DATA XREF: emit_bug_reporting_address+61↑o
.rodata:0000000000007920                 db 0
.rodata:0000000000007961                 align 8
.rodata:0000000000007968 jpt_3F84        dd offset loc_4006 - 7968h
.rodata:0000000000007968                                         ; DATA XREF: version_etc_arn+96↑o
.rodata:0000000000007968                                         ; version_etc_arn+9D↑r
.rodata:0000000000007968                 dd offset loc_4098 - 7968h ; jump table for switch statement
.rodata:0000000000007968                 dd offset loc_40D8 - 7968h
.rodata:0000000000007968                 dd offset loc_4120 - 7968h
.rodata:0000000000007968                 dd offset loc_4170 - 7968h
.rodata:0000000000007968                 dd offset loc_41C8 - 7968h
.rodata:0000000000007968                 dd offset loc_41F8 - 7968h
.rodata:0000000000007968                 dd offset loc_4260 - 7968h
.rodata:0000000000007968                 dd offset loc_3F90 - 7968h
.rodata:0000000000007968                 dd offset loc_4040 - 7968h
.rodata:0000000000007990                 align 20h
.rodata:00000000000079A0                 public version_etc_copyright
.rodata:00000000000079A0 version_etc_copyright db 'Copyright %s %d Free Software Foundation, Inc.',0
.rodata:00000000000079A0                                         ; DATA XREF: version_etc_arn+4F↑o
.rodata:00000000000079CF ; const char aMemoryExhauste[]
.rodata:00000000000079CF aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: xalloc_die↑o
.rodata:00000000000079E0 aC              db 'C',0                ; DATA XREF: hard_locale+18↑o
.rodata:00000000000079E2 aPosix          db 'POSIX',0            ; DATA XREF: hard_locale:loc_4A90↑o
.rodata:00000000000079E8 aAscii          db 'ASCII',0            ; DATA XREF: locale_charset+16↑o
.rodata:00000000000079E8                                         ; locale_charset:loc_4AE0↑o
.rodata:00000000000079EE                 align 10h
.rodata:00000000000079F0 jpt_517B        dd offset def_517B - 79F0h
.rodata:00000000000079F0                                         ; DATA XREF: vasnprintf+54D↑o
.rodata:00000000000079F0                                         ; vasnprintf+554↑r
.rodata:00000000000079F0                 dd offset loc_55E0 - 79F0h ; jump table for switch statement
.rodata:00000000000079F0                 dd offset loc_55B0 - 79F0h
.rodata:00000000000079F0                 dd offset loc_5528 - 79F0h
.rodata:00000000000079F0                 dd offset loc_54E8 - 79F0h
.rodata:00000000000079F0                 dd offset loc_52B8 - 79F0h
.rodata:00000000000079F0                 dd offset loc_52B8 - 79F0h
.rodata:00000000000079F0                 dd offset loc_5180 - 79F0h
.rodata:00000000000079F0                 dd offset loc_5180 - 79F0h
.rodata:00000000000079F0                 dd offset loc_5180 - 79F0h
.rodata:00000000000079F0                 dd offset loc_5180 - 79F0h
.rodata:00000000000079F0                 dd offset loc_5468 - 79F0h
.rodata:00000000000079F0                 dd offset loc_53E0 - 79F0h
.rodata:00000000000079F0                 dd offset loc_52B8 - 79F0h
.rodata:00000000000079F0                 dd offset loc_52B8 - 79F0h
.rodata:00000000000079F0                 dd offset loc_5180 - 79F0h
.rodata:00000000000079F0                 dd offset loc_5180 - 79F0h
.rodata:00000000000079F0                 dd offset loc_5180 - 79F0h
.rodata:0000000000007A38 jpt_5720        dd offset loc_5990 - 7A38h
.rodata:0000000000007A38                                         ; DATA XREF: vasnprintf+AEE↑o
.rodata:0000000000007A38                                         ; vasnprintf+AF9↑r
.rodata:0000000000007A38                 dd offset loc_59B0 - 7A38h ; jump table for switch statement
.rodata:0000000000007A38                 dd offset loc_59A0 - 7A38h
.rodata:0000000000007A38                 dd offset loc_5860 - 7A38h
.rodata:0000000000007A38                 dd offset loc_5860 - 7A38h
.rodata:0000000000007A4C aNull           db '(NULL)',0           ; DATA XREF: printf_fetchargs+18↑o
.rodata:0000000000007A53                 align 20h
.rodata:0000000000007A60 jpt_5D76        dd offset def_5D76 - 7A60h
.rodata:0000000000007A60                                         ; DATA XREF: printf_fetchargs+A↑o
.rodata:0000000000007A60                                         ; printf_fetchargs+2F↑r
.rodata:0000000000007A60                 dd offset loc_5DFC - 7A60h ; jump table for switch statement
.rodata:0000000000007A60                 dd offset loc_5DFC - 7A60h
.rodata:0000000000007A60                 dd offset loc_5E1E - 7A60h
.rodata:0000000000007A60                 dd offset loc_5E1E - 7A60h
.rodata:0000000000007A60                 dd offset loc_5DDA - 7A60h
.rodata:0000000000007A60                 dd offset loc_5DDA - 7A60h
.rodata:0000000000007A60                 dd offset loc_5DB6 - 7A60h
.rodata:0000000000007A60                 dd offset loc_5DB6 - 7A60h
.rodata:0000000000007A60                 dd offset loc_5DB6 - 7A60h
.rodata:0000000000007A60                 dd offset loc_5DB6 - 7A60h
.rodata:0000000000007A60                 dd offset loc_5E72 - 7A60h
.rodata:0000000000007A60                 dd offset loc_5D80 - 7A60h
.rodata:0000000000007A60                 dd offset loc_5DDA - 7A60h
.rodata:0000000000007A60                 dd offset loc_5DDA - 7A60h
.rodata:0000000000007A60                 dd offset loc_5E44 - 7A60h
.rodata:0000000000007A60                 dd offset loc_5EA0 - 7A60h
.rodata:0000000000007A60                 dd offset loc_5DB6 - 7A60h
.rodata:0000000000007A60                 dd offset loc_5DB6 - 7A60h
.rodata:0000000000007A60                 dd offset loc_5DB6 - 7A60h
.rodata:0000000000007A60                 dd offset loc_5DB6 - 7A60h
.rodata:0000000000007A60                 dd offset loc_5DB6 - 7A60h
.rodata:0000000000007A60                 dd offset loc_5DB6 - 7A60h
.rodata:0000000000007ABC                 align 20h
.rodata:0000000000007AC0 wide_null_string_2696 db  28h ; (       ; DATA XREF: printf_fetchargs+11↑o
.rodata:0000000000007AC1                 db    0
.rodata:0000000000007AC2                 db    0
.rodata:0000000000007AC3                 db    0
.rodata:0000000000007AC4                 db  4Eh ; N
.rodata:0000000000007AC5                 db    0
.rodata:0000000000007AC6                 db    0
.rodata:0000000000007AC7                 db    0
.rodata:0000000000007AC8                 db  55h ; U
.rodata:0000000000007AC9                 db    0
.rodata:0000000000007ACA                 db    0
.rodata:0000000000007ACB                 db    0
.rodata:0000000000007ACC                 db  4Ch ; L
.rodata:0000000000007ACD                 db    0
.rodata:0000000000007ACE                 db    0
.rodata:0000000000007ACF                 db    0
.rodata:0000000000007AD0                 db  4Ch ; L
.rodata:0000000000007AD1                 db    0
.rodata:0000000000007AD2                 db    0
.rodata:0000000000007AD3                 db    0
.rodata:0000000000007AD4                 db  29h ; )
.rodata:0000000000007AD5                 db    0
.rodata:0000000000007AD6                 db    0
.rodata:0000000000007AD7                 db    0
.rodata:0000000000007AD8                 db    0
.rodata:0000000000007AD9                 db    0
.rodata:0000000000007ADA                 db    0
.rodata:0000000000007ADB                 db    0
.rodata:0000000000007ADC jpt_6185        dd offset loc_61FB - 7ADCh, offset def_6185 - 7ADCh, offset def_6185 - 7ADCh
.rodata:0000000000007ADC                                         ; DATA XREF: printf_parse+234↑o
.rodata:0000000000007ADC                                         ; printf_parse+23E↑r
.rodata:0000000000007ADC                 dd offset def_6185 - 7ADCh, offset def_6185 - 7ADCh, offset def_6185 - 7ADCh ; jump table for switch statement
.rodata:0000000000007ADC                 dd offset def_6185 - 7ADCh, offset def_6185 - 7ADCh, offset def_6185 - 7ADCh
.rodata:0000000000007ADC                 dd offset def_6185 - 7ADCh, offset def_6185 - 7ADCh, offset def_6185 - 7ADCh
.rodata:0000000000007ADC                 dd offset def_6185 - 7ADCh, offset def_6185 - 7ADCh, offset def_6185 - 7ADCh
.rodata:0000000000007ADC                 dd offset def_6185 - 7ADCh, offset def_6185 - 7ADCh, offset def_6185 - 7ADCh
.rodata:0000000000007ADC                 dd offset def_6185 - 7ADCh, offset def_6185 - 7ADCh, offset def_6185 - 7ADCh
.rodata:0000000000007ADC                 dd offset def_6185 - 7ADCh, offset def_6185 - 7ADCh, offset def_6185 - 7ADCh
.rodata:0000000000007ADC                 dd offset def_6185 - 7ADCh, offset def_6185 - 7ADCh, offset def_6185 - 7ADCh
.rodata:0000000000007ADC                 dd offset def_6185 - 7ADCh, offset loc_66FB - 7ADCh, offset def_6185 - 7ADCh
.rodata:0000000000007ADC                 dd offset loc_671C - 7ADCh, offset def_6185 - 7ADCh, offset loc_66FB - 7ADCh
.rodata:0000000000007ADC                 dd offset loc_66FB - 7ADCh, offset loc_66FB - 7ADCh, offset def_6185 - 7ADCh
.rodata:0000000000007ADC                 dd offset def_6185 - 7ADCh, offset def_6185 - 7ADCh, offset def_6185 - 7ADCh
.rodata:0000000000007ADC                 dd offset def_6185 - 7ADCh, offset def_6185 - 7ADCh, offset def_6185 - 7ADCh
.rodata:0000000000007ADC                 dd offset def_6185 - 7ADCh, offset def_6185 - 7ADCh, offset def_6185 - 7ADCh
.rodata:0000000000007ADC                 dd offset def_6185 - 7ADCh, offset loc_6187 - 7ADCh, offset def_6185 - 7ADCh
.rodata:0000000000007ADC                 dd offset def_6185 - 7ADCh, offset def_6185 - 7ADCh, offset def_6185 - 7ADCh
.rodata:0000000000007ADC                 dd offset loc_672C - 7ADCh, offset def_6185 - 7ADCh, offset def_6185 - 7ADCh
.rodata:0000000000007ADC                 dd offset def_6185 - 7ADCh, offset def_6185 - 7ADCh, offset def_6185 - 7ADCh
.rodata:0000000000007ADC                 dd offset def_6185 - 7ADCh, offset def_6185 - 7ADCh, offset def_6185 - 7ADCh
.rodata:0000000000007ADC                 dd offset loc_66FB - 7ADCh, offset def_6185 - 7ADCh, offset loc_6688 - 7ADCh
.rodata:0000000000007ADC                 dd offset loc_669B - 7ADCh, offset loc_66FB - 7ADCh, offset loc_66FB - 7ADCh
.rodata:0000000000007ADC                 dd offset loc_66FB - 7ADCh, offset def_6185 - 7ADCh, offset loc_669B - 7ADCh
.rodata:0000000000007ADC                 dd offset def_6185 - 7ADCh, offset def_6185 - 7ADCh, offset def_6185 - 7ADCh
.rodata:0000000000007ADC                 dd offset def_6185 - 7ADCh, offset loc_663C - 7ADCh, offset loc_672C - 7ADCh
.rodata:0000000000007ADC                 dd offset loc_6780 - 7ADCh, offset def_6185 - 7ADCh, offset def_6185 - 7ADCh
.rodata:0000000000007ADC                 dd offset loc_66E8 - 7ADCh, offset def_6185 - 7ADCh, offset loc_672C - 7ADCh
.rodata:0000000000007ADC                 dd offset def_6185 - 7ADCh, offset def_6185 - 7ADCh, offset loc_672C - 7ADCh
.rodata:0000000000007ADC _rodata         ends
.rodata:0000000000007ADC
.eh_frame_hdr:0000000000007C2C ; ===========================================================================
.eh_frame_hdr:0000000000007C2C
.eh_frame_hdr:0000000000007C2C ; Segment type: Pure data
.eh_frame_hdr:0000000000007C2C ; Segment permissions: Read
.eh_frame_hdr:0000000000007C2C _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:0000000000007C2C                 assume cs:_eh_frame_hdr
.eh_frame_hdr:0000000000007C2C                 ;org 7C2Ch
.eh_frame_hdr:0000000000007C2C __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000000001A0↑o
.eh_frame_hdr:0000000000007C2D                 db  1Bh
.eh_frame_hdr:0000000000007C2E                 db    3
.eh_frame_hdr:0000000000007C2F                 db  3Bh ; ;
.eh_frame_hdr:0000000000007C30                 db  88h
.eh_frame_hdr:0000000000007C31                 db    2
.eh_frame_hdr:0000000000007C32                 db    0
.eh_frame_hdr:0000000000007C33                 db    0
.eh_frame_hdr:0000000000007C34                 db  50h ; P
.eh_frame_hdr:0000000000007C35                 db    0
.eh_frame_hdr:0000000000007C36                 db    0
.eh_frame_hdr:0000000000007C37                 db    0
.eh_frame_hdr:0000000000007C38                 db 0A4h
.eh_frame_hdr:0000000000007C39                 db  97h
.eh_frame_hdr:0000000000007C3A                 db 0FFh
.eh_frame_hdr:0000000000007C3B                 db 0FFh
.eh_frame_hdr:0000000000007C3C                 db 0D4h
.eh_frame_hdr:0000000000007C3D                 db    2
.eh_frame_hdr:0000000000007C3E                 db    0
.eh_frame_hdr:0000000000007C3F                 db    0
.eh_frame_hdr:0000000000007C40                 db 0B4h
.eh_frame_hdr:0000000000007C41                 db  9Ah
.eh_frame_hdr:0000000000007C42                 db 0FFh
.eh_frame_hdr:0000000000007C43                 db 0FFh
.eh_frame_hdr:0000000000007C44                 db 0FCh
.eh_frame_hdr:0000000000007C45                 db    2
.eh_frame_hdr:0000000000007C46                 db    0
.eh_frame_hdr:0000000000007C47                 db    0
.eh_frame_hdr:0000000000007C48                 db 0C4h
.eh_frame_hdr:0000000000007C49                 db  9Ah
.eh_frame_hdr:0000000000007C4A                 db 0FFh
.eh_frame_hdr:0000000000007C4B                 db 0FFh
.eh_frame_hdr:0000000000007C4C                 db  7Ch ; |
.eh_frame_hdr:0000000000007C4D                 db    3
.eh_frame_hdr:0000000000007C4E                 db    0
.eh_frame_hdr:0000000000007C4F                 db    0
.eh_frame_hdr:0000000000007C50                 db 0F4h
.eh_frame_hdr:0000000000007C51                 db  9Dh
.eh_frame_hdr:0000000000007C52                 db 0FFh
.eh_frame_hdr:0000000000007C53                 db 0FFh
.eh_frame_hdr:0000000000007C54                 db 0A4h
.eh_frame_hdr:0000000000007C55                 db    2
.eh_frame_hdr:0000000000007C56                 db    0
.eh_frame_hdr:0000000000007C57                 db    0
.eh_frame_hdr:0000000000007C58                 db    4
.eh_frame_hdr:0000000000007C59                 db  9Fh
.eh_frame_hdr:0000000000007C5A                 db 0FFh
.eh_frame_hdr:0000000000007C5B                 db 0FFh
.eh_frame_hdr:0000000000007C5C                 db  14h
.eh_frame_hdr:0000000000007C5D                 db    3
.eh_frame_hdr:0000000000007C5E                 db    0
.eh_frame_hdr:0000000000007C5F                 db    0
.eh_frame_hdr:0000000000007C60                 db 0E4h
.eh_frame_hdr:0000000000007C61                 db  9Fh
.eh_frame_hdr:0000000000007C62                 db 0FFh
.eh_frame_hdr:0000000000007C63                 db 0FFh
.eh_frame_hdr:0000000000007C64                 db  50h ; P
.eh_frame_hdr:0000000000007C65                 db    3
.eh_frame_hdr:0000000000007C66                 db    0
.eh_frame_hdr:0000000000007C67                 db    0
.eh_frame_hdr:0000000000007C68                 db  54h ; T
.eh_frame_hdr:0000000000007C69                 db 0A3h
.eh_frame_hdr:0000000000007C6A                 db 0FFh
.eh_frame_hdr:0000000000007C6B                 db 0FFh
.eh_frame_hdr:0000000000007C6C                 db 0CCh
.eh_frame_hdr:0000000000007C6D                 db    3
.eh_frame_hdr:0000000000007C6E                 db    0
.eh_frame_hdr:0000000000007C6F                 db    0
.eh_frame_hdr:0000000000007C70                 db  74h ; t
.eh_frame_hdr:0000000000007C71                 db 0A4h
.eh_frame_hdr:0000000000007C72                 db 0FFh
.eh_frame_hdr:0000000000007C73                 db 0FFh
.eh_frame_hdr:0000000000007C74                 db 0FCh
.eh_frame_hdr:0000000000007C75                 db    3
.eh_frame_hdr:0000000000007C76                 db    0
.eh_frame_hdr:0000000000007C77                 db    0
.eh_frame_hdr:0000000000007C78                 db  84h
.eh_frame_hdr:0000000000007C79                 db 0A4h
.eh_frame_hdr:0000000000007C7A                 db 0FFh
.eh_frame_hdr:0000000000007C7B                 db 0FFh
.eh_frame_hdr:0000000000007C7C                 db  10h
.eh_frame_hdr:0000000000007C7D                 db    4
.eh_frame_hdr:0000000000007C7E                 db    0
.eh_frame_hdr:0000000000007C7F                 db    0
.eh_frame_hdr:0000000000007C80                 db  94h
.eh_frame_hdr:0000000000007C81                 db 0A4h
.eh_frame_hdr:0000000000007C82                 db 0FFh
.eh_frame_hdr:0000000000007C83                 db 0FFh
.eh_frame_hdr:0000000000007C84                 db  24h ; $
.eh_frame_hdr:0000000000007C85                 db    4
.eh_frame_hdr:0000000000007C86                 db    0
.eh_frame_hdr:0000000000007C87                 db    0
.eh_frame_hdr:0000000000007C88                 db  44h ; D
.eh_frame_hdr:0000000000007C89                 db 0A5h
.eh_frame_hdr:0000000000007C8A                 db 0FFh
.eh_frame_hdr:0000000000007C8B                 db 0FFh
.eh_frame_hdr:0000000000007C8C                 db  54h ; T
.eh_frame_hdr:0000000000007C8D                 db    4
.eh_frame_hdr:0000000000007C8E                 db    0
.eh_frame_hdr:0000000000007C8F                 db    0
.eh_frame_hdr:0000000000007C90                 db  84h
.eh_frame_hdr:0000000000007C91                 db 0A5h
.eh_frame_hdr:0000000000007C92                 db 0FFh
.eh_frame_hdr:0000000000007C93                 db 0FFh
.eh_frame_hdr:0000000000007C94                 db  7Ch ; |
.eh_frame_hdr:0000000000007C95                 db    4
.eh_frame_hdr:0000000000007C96                 db    0
.eh_frame_hdr:0000000000007C97                 db    0
.eh_frame_hdr:0000000000007C98                 db  24h ; $
.eh_frame_hdr:0000000000007C99                 db 0A6h
.eh_frame_hdr:0000000000007C9A                 db 0FFh
.eh_frame_hdr:0000000000007C9B                 db 0FFh
.eh_frame_hdr:0000000000007C9C                 db  9Ch
.eh_frame_hdr:0000000000007C9D                 db    4
.eh_frame_hdr:0000000000007C9E                 db    0
.eh_frame_hdr:0000000000007C9F                 db    0
.eh_frame_hdr:0000000000007CA0                 db  14h
.eh_frame_hdr:0000000000007CA1                 db 0A7h
.eh_frame_hdr:0000000000007CA2                 db 0FFh
.eh_frame_hdr:0000000000007CA3                 db 0FFh
.eh_frame_hdr:0000000000007CA4                 db 0E0h
.eh_frame_hdr:0000000000007CA5                 db    4
.eh_frame_hdr:0000000000007CA6                 db    0
.eh_frame_hdr:0000000000007CA7                 db    0
.eh_frame_hdr:0000000000007CA8                 db  54h ; T
.eh_frame_hdr:0000000000007CA9                 db 0B9h
.eh_frame_hdr:0000000000007CAA                 db 0FFh
.eh_frame_hdr:0000000000007CAB                 db 0FFh
.eh_frame_hdr:0000000000007CAC                 db  58h ; X
.eh_frame_hdr:0000000000007CAD                 db    5
.eh_frame_hdr:0000000000007CAE                 db    0
.eh_frame_hdr:0000000000007CAF                 db    0
.eh_frame_hdr:0000000000007CB0                 db    4
.eh_frame_hdr:0000000000007CB1                 db 0BBh
.eh_frame_hdr:0000000000007CB2                 db 0FFh
.eh_frame_hdr:0000000000007CB3                 db 0FFh
.eh_frame_hdr:0000000000007CB4                 db 0C4h
.eh_frame_hdr:0000000000007CB5                 db    5
.eh_frame_hdr:0000000000007CB6                 db    0
.eh_frame_hdr:0000000000007CB7                 db    0
.eh_frame_hdr:0000000000007CB8                 db  44h ; D
.eh_frame_hdr:0000000000007CB9                 db 0BBh
.eh_frame_hdr:0000000000007CBA                 db 0FFh
.eh_frame_hdr:0000000000007CBB                 db 0FFh
.eh_frame_hdr:0000000000007CBC                 db 0F0h
.eh_frame_hdr:0000000000007CBD                 db    5
.eh_frame_hdr:0000000000007CBE                 db    0
.eh_frame_hdr:0000000000007CBF                 db    0
.eh_frame_hdr:0000000000007CC0                 db  64h ; d
.eh_frame_hdr:0000000000007CC1                 db 0BBh
.eh_frame_hdr:0000000000007CC2                 db 0FFh
.eh_frame_hdr:0000000000007CC3                 db 0FFh
.eh_frame_hdr:0000000000007CC4                 db    4
.eh_frame_hdr:0000000000007CC5                 db    6
.eh_frame_hdr:0000000000007CC6                 db    0
.eh_frame_hdr:0000000000007CC7                 db    0
.eh_frame_hdr:0000000000007CC8                 db  84h
.eh_frame_hdr:0000000000007CC9                 db 0BBh
.eh_frame_hdr:0000000000007CCA                 db 0FFh
.eh_frame_hdr:0000000000007CCB                 db 0FFh
.eh_frame_hdr:0000000000007CCC                 db  18h
.eh_frame_hdr:0000000000007CCD                 db    6
.eh_frame_hdr:0000000000007CCE                 db    0
.eh_frame_hdr:0000000000007CCF                 db    0
.eh_frame_hdr:0000000000007CD0                 db 0C4h
.eh_frame_hdr:0000000000007CD1                 db 0BBh
.eh_frame_hdr:0000000000007CD2                 db 0FFh
.eh_frame_hdr:0000000000007CD3                 db 0FFh
.eh_frame_hdr:0000000000007CD4                 db  2Ch ; ,
.eh_frame_hdr:0000000000007CD5                 db    6
.eh_frame_hdr:0000000000007CD6                 db    0
.eh_frame_hdr:0000000000007CD7                 db    0
.eh_frame_hdr:0000000000007CD8                 db 0E4h
.eh_frame_hdr:0000000000007CD9                 db 0BBh
.eh_frame_hdr:0000000000007CDA                 db 0FFh
.eh_frame_hdr:0000000000007CDB                 db 0FFh
.eh_frame_hdr:0000000000007CDC                 db  40h ; @
.eh_frame_hdr:0000000000007CDD                 db    6
.eh_frame_hdr:0000000000007CDE                 db    0
.eh_frame_hdr:0000000000007CDF                 db    0
.eh_frame_hdr:0000000000007CE0                 db  14h
.eh_frame_hdr:0000000000007CE1                 db 0BCh
.eh_frame_hdr:0000000000007CE2                 db 0FFh
.eh_frame_hdr:0000000000007CE3                 db 0FFh
.eh_frame_hdr:0000000000007CE4                 db  54h ; T
.eh_frame_hdr:0000000000007CE5                 db    6
.eh_frame_hdr:0000000000007CE6                 db    0
.eh_frame_hdr:0000000000007CE7                 db    0
.eh_frame_hdr:0000000000007CE8                 db  94h
.eh_frame_hdr:0000000000007CE9                 db 0BCh
.eh_frame_hdr:0000000000007CEA                 db 0FFh
.eh_frame_hdr:0000000000007CEB                 db 0FFh
.eh_frame_hdr:0000000000007CEC                 db 0A8h
.eh_frame_hdr:0000000000007CED                 db    6
.eh_frame_hdr:0000000000007CEE                 db    0
.eh_frame_hdr:0000000000007CEF                 db    0
.eh_frame_hdr:0000000000007CF0                 db  84h
.eh_frame_hdr:0000000000007CF1                 db 0BDh
.eh_frame_hdr:0000000000007CF2                 db 0FFh
.eh_frame_hdr:0000000000007CF3                 db 0FFh
.eh_frame_hdr:0000000000007CF4                 db  14h
.eh_frame_hdr:0000000000007CF5                 db    7
.eh_frame_hdr:0000000000007CF6                 db    0
.eh_frame_hdr:0000000000007CF7                 db    0
.eh_frame_hdr:0000000000007CF8                 db  94h
.eh_frame_hdr:0000000000007CF9                 db 0BDh
.eh_frame_hdr:0000000000007CFA                 db 0FFh
.eh_frame_hdr:0000000000007CFB                 db 0FFh
.eh_frame_hdr:0000000000007CFC                 db  28h ; (
.eh_frame_hdr:0000000000007CFD                 db    7
.eh_frame_hdr:0000000000007CFE                 db    0
.eh_frame_hdr:0000000000007CFF                 db    0
.eh_frame_hdr:0000000000007D00                 db  34h ; 4
.eh_frame_hdr:0000000000007D01                 db 0BEh
.eh_frame_hdr:0000000000007D02                 db 0FFh
.eh_frame_hdr:0000000000007D03                 db 0FFh
.eh_frame_hdr:0000000000007D04                 db  54h ; T
.eh_frame_hdr:0000000000007D05                 db    7
.eh_frame_hdr:0000000000007D06                 db    0
.eh_frame_hdr:0000000000007D07                 db    0
.eh_frame_hdr:0000000000007D08                 db  54h ; T
.eh_frame_hdr:0000000000007D09                 db 0BEh
.eh_frame_hdr:0000000000007D0A                 db 0FFh
.eh_frame_hdr:0000000000007D0B                 db 0FFh
.eh_frame_hdr:0000000000007D0C                 db  68h ; h
.eh_frame_hdr:0000000000007D0D                 db    7
.eh_frame_hdr:0000000000007D0E                 db    0
.eh_frame_hdr:0000000000007D0F                 db    0
.eh_frame_hdr:0000000000007D10                 db  64h ; d
.eh_frame_hdr:0000000000007D11                 db 0BEh
.eh_frame_hdr:0000000000007D12                 db 0FFh
.eh_frame_hdr:0000000000007D13                 db 0FFh
.eh_frame_hdr:0000000000007D14                 db  7Ch ; |
.eh_frame_hdr:0000000000007D15                 db    7
.eh_frame_hdr:0000000000007D16                 db    0
.eh_frame_hdr:0000000000007D17                 db    0
.eh_frame_hdr:0000000000007D18                 db  84h
.eh_frame_hdr:0000000000007D19                 db 0BEh
.eh_frame_hdr:0000000000007D1A                 db 0FFh
.eh_frame_hdr:0000000000007D1B                 db 0FFh
.eh_frame_hdr:0000000000007D1C                 db  90h
.eh_frame_hdr:0000000000007D1D                 db    7
.eh_frame_hdr:0000000000007D1E                 db    0
.eh_frame_hdr:0000000000007D1F                 db    0
.eh_frame_hdr:0000000000007D20                 db 0A4h
.eh_frame_hdr:0000000000007D21                 db 0BEh
.eh_frame_hdr:0000000000007D22                 db 0FFh
.eh_frame_hdr:0000000000007D23                 db 0FFh
.eh_frame_hdr:0000000000007D24                 db 0A4h
.eh_frame_hdr:0000000000007D25                 db    7
.eh_frame_hdr:0000000000007D26                 db    0
.eh_frame_hdr:0000000000007D27                 db    0
.eh_frame_hdr:0000000000007D28                 db  34h ; 4
.eh_frame_hdr:0000000000007D29                 db 0BFh
.eh_frame_hdr:0000000000007D2A                 db 0FFh
.eh_frame_hdr:0000000000007D2B                 db 0FFh
.eh_frame_hdr:0000000000007D2C                 db 0C0h
.eh_frame_hdr:0000000000007D2D                 db    7
.eh_frame_hdr:0000000000007D2E                 db    0
.eh_frame_hdr:0000000000007D2F                 db    0
.eh_frame_hdr:0000000000007D30                 db 0C4h
.eh_frame_hdr:0000000000007D31                 db 0BFh
.eh_frame_hdr:0000000000007D32                 db 0FFh
.eh_frame_hdr:0000000000007D33                 db 0FFh
.eh_frame_hdr:0000000000007D34                 db 0DCh
.eh_frame_hdr:0000000000007D35                 db    7
.eh_frame_hdr:0000000000007D36                 db    0
.eh_frame_hdr:0000000000007D37                 db    0
.eh_frame_hdr:0000000000007D38                 db 0D4h
.eh_frame_hdr:0000000000007D39                 db 0BFh
.eh_frame_hdr:0000000000007D3A                 db 0FFh
.eh_frame_hdr:0000000000007D3B                 db 0FFh
.eh_frame_hdr:0000000000007D3C                 db 0F0h
.eh_frame_hdr:0000000000007D3D                 db    7
.eh_frame_hdr:0000000000007D3E                 db    0
.eh_frame_hdr:0000000000007D3F                 db    0
.eh_frame_hdr:0000000000007D40                 db 0E4h
.eh_frame_hdr:0000000000007D41                 db 0BFh
.eh_frame_hdr:0000000000007D42                 db 0FFh
.eh_frame_hdr:0000000000007D43                 db 0FFh
.eh_frame_hdr:0000000000007D44                 db    4
.eh_frame_hdr:0000000000007D45                 db    8
.eh_frame_hdr:0000000000007D46                 db    0
.eh_frame_hdr:0000000000007D47                 db    0
.eh_frame_hdr:0000000000007D48                 db  84h
.eh_frame_hdr:0000000000007D49                 db 0C0h
.eh_frame_hdr:0000000000007D4A                 db 0FFh
.eh_frame_hdr:0000000000007D4B                 db 0FFh
.eh_frame_hdr:0000000000007D4C                 db  20h
.eh_frame_hdr:0000000000007D4D                 db    8
.eh_frame_hdr:0000000000007D4E                 db    0
.eh_frame_hdr:0000000000007D4F                 db    0
.eh_frame_hdr:0000000000007D50                 db  94h
.eh_frame_hdr:0000000000007D51                 db 0C0h
.eh_frame_hdr:0000000000007D52                 db 0FFh
.eh_frame_hdr:0000000000007D53                 db 0FFh
.eh_frame_hdr:0000000000007D54                 db  34h ; 4
.eh_frame_hdr:0000000000007D55                 db    8
.eh_frame_hdr:0000000000007D56                 db    0
.eh_frame_hdr:0000000000007D57                 db    0
.eh_frame_hdr:0000000000007D58                 db 0B4h
.eh_frame_hdr:0000000000007D59                 db 0C0h
.eh_frame_hdr:0000000000007D5A                 db 0FFh
.eh_frame_hdr:0000000000007D5B                 db 0FFh
.eh_frame_hdr:0000000000007D5C                 db  48h ; H
.eh_frame_hdr:0000000000007D5D                 db    8
.eh_frame_hdr:0000000000007D5E                 db    0
.eh_frame_hdr:0000000000007D5F                 db    0
.eh_frame_hdr:0000000000007D60                 db 0C4h
.eh_frame_hdr:0000000000007D61                 db 0C0h
.eh_frame_hdr:0000000000007D62                 db 0FFh
.eh_frame_hdr:0000000000007D63                 db 0FFh
.eh_frame_hdr:0000000000007D64                 db  5Ch ; \
.eh_frame_hdr:0000000000007D65                 db    8
.eh_frame_hdr:0000000000007D66                 db    0
.eh_frame_hdr:0000000000007D67                 db    0
.eh_frame_hdr:0000000000007D68                 db  54h ; T
.eh_frame_hdr:0000000000007D69                 db 0C1h
.eh_frame_hdr:0000000000007D6A                 db 0FFh
.eh_frame_hdr:0000000000007D6B                 db 0FFh
.eh_frame_hdr:0000000000007D6C                 db  78h ; x
.eh_frame_hdr:0000000000007D6D                 db    8
.eh_frame_hdr:0000000000007D6E                 db    0
.eh_frame_hdr:0000000000007D6F                 db    0
.eh_frame_hdr:0000000000007D70                 db 0F4h
.eh_frame_hdr:0000000000007D71                 db 0C1h
.eh_frame_hdr:0000000000007D72                 db 0FFh
.eh_frame_hdr:0000000000007D73                 db 0FFh
.eh_frame_hdr:0000000000007D74                 db  94h
.eh_frame_hdr:0000000000007D75                 db    8
.eh_frame_hdr:0000000000007D76                 db    0
.eh_frame_hdr:0000000000007D77                 db    0
.eh_frame_hdr:0000000000007D78                 db    4
.eh_frame_hdr:0000000000007D79                 db 0C2h
.eh_frame_hdr:0000000000007D7A                 db 0FFh
.eh_frame_hdr:0000000000007D7B                 db 0FFh
.eh_frame_hdr:0000000000007D7C                 db 0A8h
.eh_frame_hdr:0000000000007D7D                 db    8
.eh_frame_hdr:0000000000007D7E                 db    0
.eh_frame_hdr:0000000000007D7F                 db    0
.eh_frame_hdr:0000000000007D80                 db  24h ; $
.eh_frame_hdr:0000000000007D81                 db 0C2h
.eh_frame_hdr:0000000000007D82                 db 0FFh
.eh_frame_hdr:0000000000007D83                 db 0FFh
.eh_frame_hdr:0000000000007D84                 db 0BCh
.eh_frame_hdr:0000000000007D85                 db    8
.eh_frame_hdr:0000000000007D86                 db    0
.eh_frame_hdr:0000000000007D87                 db    0
.eh_frame_hdr:0000000000007D88                 db  44h ; D
.eh_frame_hdr:0000000000007D89                 db 0C2h
.eh_frame_hdr:0000000000007D8A                 db 0FFh
.eh_frame_hdr:0000000000007D8B                 db 0FFh
.eh_frame_hdr:0000000000007D8C                 db 0D0h
.eh_frame_hdr:0000000000007D8D                 db    8
.eh_frame_hdr:0000000000007D8E                 db    0
.eh_frame_hdr:0000000000007D8F                 db    0
.eh_frame_hdr:0000000000007D90                 db  54h ; T
.eh_frame_hdr:0000000000007D91                 db 0C2h
.eh_frame_hdr:0000000000007D92                 db 0FFh
.eh_frame_hdr:0000000000007D93                 db 0FFh
.eh_frame_hdr:0000000000007D94                 db 0E4h
.eh_frame_hdr:0000000000007D95                 db    8
.eh_frame_hdr:0000000000007D96                 db    0
.eh_frame_hdr:0000000000007D97                 db    0
.eh_frame_hdr:0000000000007D98                 db  74h ; t
.eh_frame_hdr:0000000000007D99                 db 0C2h
.eh_frame_hdr:0000000000007D9A                 db 0FFh
.eh_frame_hdr:0000000000007D9B                 db 0FFh
.eh_frame_hdr:0000000000007D9C                 db 0F8h
.eh_frame_hdr:0000000000007D9D                 db    8
.eh_frame_hdr:0000000000007D9E                 db    0
.eh_frame_hdr:0000000000007D9F                 db    0
.eh_frame_hdr:0000000000007DA0                 db  94h
.eh_frame_hdr:0000000000007DA1                 db 0C2h
.eh_frame_hdr:0000000000007DA2                 db 0FFh
.eh_frame_hdr:0000000000007DA3                 db 0FFh
.eh_frame_hdr:0000000000007DA4                 db  0Ch
.eh_frame_hdr:0000000000007DA5                 db    9
.eh_frame_hdr:0000000000007DA6                 db    0
.eh_frame_hdr:0000000000007DA7                 db    0
.eh_frame_hdr:0000000000007DA8                 db 0B4h
.eh_frame_hdr:0000000000007DA9                 db 0C2h
.eh_frame_hdr:0000000000007DAA                 db 0FFh
.eh_frame_hdr:0000000000007DAB                 db 0FFh
.eh_frame_hdr:0000000000007DAC                 db  24h ; $
.eh_frame_hdr:0000000000007DAD                 db    9
.eh_frame_hdr:0000000000007DAE                 db    0
.eh_frame_hdr:0000000000007DAF                 db    0
.eh_frame_hdr:0000000000007DB0                 db 0D4h
.eh_frame_hdr:0000000000007DB1                 db 0C6h
.eh_frame_hdr:0000000000007DB2                 db 0FFh
.eh_frame_hdr:0000000000007DB3                 db 0FFh
.eh_frame_hdr:0000000000007DB4                 db  38h ; 8
.eh_frame_hdr:0000000000007DB5                 db  0Ah
.eh_frame_hdr:0000000000007DB6                 db    0
.eh_frame_hdr:0000000000007DB7                 db    0
.eh_frame_hdr:0000000000007DB8                 db 0F4h
.eh_frame_hdr:0000000000007DB9                 db 0C6h
.eh_frame_hdr:0000000000007DBA                 db 0FFh
.eh_frame_hdr:0000000000007DBB                 db 0FFh
.eh_frame_hdr:0000000000007DBC                 db  4Ch ; L
.eh_frame_hdr:0000000000007DBD                 db  0Ah
.eh_frame_hdr:0000000000007DBE                 db    0
.eh_frame_hdr:0000000000007DBF                 db    0
.eh_frame_hdr:0000000000007DC0                 db  74h ; t
.eh_frame_hdr:0000000000007DC1                 db 0C7h
.eh_frame_hdr:0000000000007DC2                 db 0FFh
.eh_frame_hdr:0000000000007DC3                 db 0FFh
.eh_frame_hdr:0000000000007DC4                 db  68h ; h
.eh_frame_hdr:0000000000007DC5                 db  0Ah
.eh_frame_hdr:0000000000007DC6                 db    0
.eh_frame_hdr:0000000000007DC7                 db    0
.eh_frame_hdr:0000000000007DC8                 db  54h ; T
.eh_frame_hdr:0000000000007DC9                 db 0C8h
.eh_frame_hdr:0000000000007DCA                 db 0FFh
.eh_frame_hdr:0000000000007DCB                 db 0FFh
.eh_frame_hdr:0000000000007DCC                 db  94h
.eh_frame_hdr:0000000000007DCD                 db  0Ah
.eh_frame_hdr:0000000000007DCE                 db    0
.eh_frame_hdr:0000000000007DCF                 db    0
.eh_frame_hdr:0000000000007DD0                 db 0D4h
.eh_frame_hdr:0000000000007DD1                 db 0C8h
.eh_frame_hdr:0000000000007DD2                 db 0FFh
.eh_frame_hdr:0000000000007DD3                 db 0FFh
.eh_frame_hdr:0000000000007DD4                 db 0B4h
.eh_frame_hdr:0000000000007DD5                 db  0Ah
.eh_frame_hdr:0000000000007DD6                 db    0
.eh_frame_hdr:0000000000007DD7                 db    0
.eh_frame_hdr:0000000000007DD8                 db 0F4h
.eh_frame_hdr:0000000000007DD9                 db 0C8h
.eh_frame_hdr:0000000000007DDA                 db 0FFh
.eh_frame_hdr:0000000000007DDB                 db 0FFh
.eh_frame_hdr:0000000000007DDC                 db 0D0h
.eh_frame_hdr:0000000000007DDD                 db  0Ah
.eh_frame_hdr:0000000000007DDE                 db    0
.eh_frame_hdr:0000000000007DDF                 db    0
.eh_frame_hdr:0000000000007DE0                 db  24h ; $
.eh_frame_hdr:0000000000007DE1                 db 0C9h
.eh_frame_hdr:0000000000007DE2                 db 0FFh
.eh_frame_hdr:0000000000007DE3                 db 0FFh
.eh_frame_hdr:0000000000007DE4                 db 0E4h
.eh_frame_hdr:0000000000007DE5                 db  0Ah
.eh_frame_hdr:0000000000007DE6                 db    0
.eh_frame_hdr:0000000000007DE7                 db    0
.eh_frame_hdr:0000000000007DE8                 db  34h ; 4
.eh_frame_hdr:0000000000007DE9                 db 0C9h
.eh_frame_hdr:0000000000007DEA                 db 0FFh
.eh_frame_hdr:0000000000007DEB                 db 0FFh
.eh_frame_hdr:0000000000007DEC                 db 0F8h
.eh_frame_hdr:0000000000007DED                 db  0Ah
.eh_frame_hdr:0000000000007DEE                 db    0
.eh_frame_hdr:0000000000007DEF                 db    0
.eh_frame_hdr:0000000000007DF0                 db  74h ; t
.eh_frame_hdr:0000000000007DF1                 db 0C9h
.eh_frame_hdr:0000000000007DF2                 db 0FFh
.eh_frame_hdr:0000000000007DF3                 db 0FFh
.eh_frame_hdr:0000000000007DF4                 db  1Ch
.eh_frame_hdr:0000000000007DF5                 db  0Bh
.eh_frame_hdr:0000000000007DF6                 db    0
.eh_frame_hdr:0000000000007DF7                 db    0
.eh_frame_hdr:0000000000007DF8                 db 0A4h
.eh_frame_hdr:0000000000007DF9                 db 0C9h
.eh_frame_hdr:0000000000007DFA                 db 0FFh
.eh_frame_hdr:0000000000007DFB                 db 0FFh
.eh_frame_hdr:0000000000007DFC                 db  30h ; 0
.eh_frame_hdr:0000000000007DFD                 db  0Bh
.eh_frame_hdr:0000000000007DFE                 db    0
.eh_frame_hdr:0000000000007DFF                 db    0
.eh_frame_hdr:0000000000007E00                 db  34h ; 4
.eh_frame_hdr:0000000000007E01                 db 0CAh
.eh_frame_hdr:0000000000007E02                 db 0FFh
.eh_frame_hdr:0000000000007E03                 db 0FFh
.eh_frame_hdr:0000000000007E04                 db  48h ; H
.eh_frame_hdr:0000000000007E05                 db  0Bh
.eh_frame_hdr:0000000000007E06                 db    0
.eh_frame_hdr:0000000000007E07                 db    0
.eh_frame_hdr:0000000000007E08                 db  84h
.eh_frame_hdr:0000000000007E09                 db 0CAh
.eh_frame_hdr:0000000000007E0A                 db 0FFh
.eh_frame_hdr:0000000000007E0B                 db 0FFh
.eh_frame_hdr:0000000000007E0C                 db  60h ; `
.eh_frame_hdr:0000000000007E0D                 db  0Bh
.eh_frame_hdr:0000000000007E0E                 db    0
.eh_frame_hdr:0000000000007E0F                 db    0
.eh_frame_hdr:0000000000007E10                 db 0A4h
.eh_frame_hdr:0000000000007E11                 db 0CAh
.eh_frame_hdr:0000000000007E12                 db 0FFh
.eh_frame_hdr:0000000000007E13                 db 0FFh
.eh_frame_hdr:0000000000007E14                 db  7Ch ; |
.eh_frame_hdr:0000000000007E15                 db  0Bh
.eh_frame_hdr:0000000000007E16                 db    0
.eh_frame_hdr:0000000000007E17                 db    0
.eh_frame_hdr:0000000000007E18                 db 0D4h
.eh_frame_hdr:0000000000007E19                 db 0CAh
.eh_frame_hdr:0000000000007E1A                 db 0FFh
.eh_frame_hdr:0000000000007E1B                 db 0FFh
.eh_frame_hdr:0000000000007E1C                 db  98h
.eh_frame_hdr:0000000000007E1D                 db  0Bh
.eh_frame_hdr:0000000000007E1E                 db    0
.eh_frame_hdr:0000000000007E1F                 db    0
.eh_frame_hdr:0000000000007E20                 db    4
.eh_frame_hdr:0000000000007E21                 db 0CBh
.eh_frame_hdr:0000000000007E22                 db 0FFh
.eh_frame_hdr:0000000000007E23                 db 0FFh
.eh_frame_hdr:0000000000007E24                 db 0C0h
.eh_frame_hdr:0000000000007E25                 db  0Bh
.eh_frame_hdr:0000000000007E26                 db    0
.eh_frame_hdr:0000000000007E27                 db    0
.eh_frame_hdr:0000000000007E28                 db  24h ; $
.eh_frame_hdr:0000000000007E29                 db 0CBh
.eh_frame_hdr:0000000000007E2A                 db 0FFh
.eh_frame_hdr:0000000000007E2B                 db 0FFh
.eh_frame_hdr:0000000000007E2C                 db 0DCh
.eh_frame_hdr:0000000000007E2D                 db  0Bh
.eh_frame_hdr:0000000000007E2E                 db    0
.eh_frame_hdr:0000000000007E2F                 db    0
.eh_frame_hdr:0000000000007E30                 db  64h ; d
.eh_frame_hdr:0000000000007E31                 db 0CBh
.eh_frame_hdr:0000000000007E32                 db 0FFh
.eh_frame_hdr:0000000000007E33                 db 0FFh
.eh_frame_hdr:0000000000007E34                 db 0F4h
.eh_frame_hdr:0000000000007E35                 db  0Bh
.eh_frame_hdr:0000000000007E36                 db    0
.eh_frame_hdr:0000000000007E37                 db    0
.eh_frame_hdr:0000000000007E38                 db 0F4h
.eh_frame_hdr:0000000000007E39                 db 0CBh
.eh_frame_hdr:0000000000007E3A                 db 0FFh
.eh_frame_hdr:0000000000007E3B                 db 0FFh
.eh_frame_hdr:0000000000007E3C                 db  34h ; 4
.eh_frame_hdr:0000000000007E3D                 db  0Ch
.eh_frame_hdr:0000000000007E3E                 db    0
.eh_frame_hdr:0000000000007E3F                 db    0
.eh_frame_hdr:0000000000007E40                 db 0F4h
.eh_frame_hdr:0000000000007E41                 db 0CCh
.eh_frame_hdr:0000000000007E42                 db 0FFh
.eh_frame_hdr:0000000000007E43                 db 0FFh
.eh_frame_hdr:0000000000007E44                 db  74h ; t
.eh_frame_hdr:0000000000007E45                 db  0Ch
.eh_frame_hdr:0000000000007E46                 db    0
.eh_frame_hdr:0000000000007E47                 db    0
.eh_frame_hdr:0000000000007E48                 db  74h ; t
.eh_frame_hdr:0000000000007E49                 db 0CDh
.eh_frame_hdr:0000000000007E4A                 db 0FFh
.eh_frame_hdr:0000000000007E4B                 db 0FFh
.eh_frame_hdr:0000000000007E4C                 db 0C4h
.eh_frame_hdr:0000000000007E4D                 db  0Ch
.eh_frame_hdr:0000000000007E4E                 db    0
.eh_frame_hdr:0000000000007E4F                 db    0
.eh_frame_hdr:0000000000007E50                 db 0D4h
.eh_frame_hdr:0000000000007E51                 db 0CDh
.eh_frame_hdr:0000000000007E52                 db 0FFh
.eh_frame_hdr:0000000000007E53                 db 0FFh
.eh_frame_hdr:0000000000007E54                 db 0D8h
.eh_frame_hdr:0000000000007E55                 db  0Ch
.eh_frame_hdr:0000000000007E56                 db    0
.eh_frame_hdr:0000000000007E57                 db    0
.eh_frame_hdr:0000000000007E58                 db  24h ; $
.eh_frame_hdr:0000000000007E59                 db 0CEh
.eh_frame_hdr:0000000000007E5A                 db 0FFh
.eh_frame_hdr:0000000000007E5B                 db 0FFh
.eh_frame_hdr:0000000000007E5C                 db    4
.eh_frame_hdr:0000000000007E5D                 db  0Dh
.eh_frame_hdr:0000000000007E5E                 db    0
.eh_frame_hdr:0000000000007E5F                 db    0
.eh_frame_hdr:0000000000007E60                 db  84h
.eh_frame_hdr:0000000000007E61                 db 0CEh
.eh_frame_hdr:0000000000007E62                 db 0FFh
.eh_frame_hdr:0000000000007E63                 db 0FFh
.eh_frame_hdr:0000000000007E64                 db  24h ; $
.eh_frame_hdr:0000000000007E65                 db  0Dh
.eh_frame_hdr:0000000000007E66                 db    0
.eh_frame_hdr:0000000000007E67                 db    0
.eh_frame_hdr:0000000000007E68                 db 0C4h
.eh_frame_hdr:0000000000007E69                 db 0CEh
.eh_frame_hdr:0000000000007E6A                 db 0FFh
.eh_frame_hdr:0000000000007E6B                 db 0FFh
.eh_frame_hdr:0000000000007E6C                 db  44h ; D
.eh_frame_hdr:0000000000007E6D                 db  0Dh
.eh_frame_hdr:0000000000007E6E                 db    0
.eh_frame_hdr:0000000000007E6F                 db    0
.eh_frame_hdr:0000000000007E70                 db  44h ; D
.eh_frame_hdr:0000000000007E71                 db 0CFh
.eh_frame_hdr:0000000000007E72                 db 0FFh
.eh_frame_hdr:0000000000007E73                 db 0FFh
.eh_frame_hdr:0000000000007E74                 db  7Ch ; |
.eh_frame_hdr:0000000000007E75                 db  0Dh
.eh_frame_hdr:0000000000007E76                 db    0
.eh_frame_hdr:0000000000007E77                 db    0
.eh_frame_hdr:0000000000007E78                 db  84h
.eh_frame_hdr:0000000000007E79                 db 0CFh
.eh_frame_hdr:0000000000007E7A                 db 0FFh
.eh_frame_hdr:0000000000007E7B                 db 0FFh
.eh_frame_hdr:0000000000007E7C                 db  9Ch
.eh_frame_hdr:0000000000007E7D                 db  0Dh
.eh_frame_hdr:0000000000007E7E                 db    0
.eh_frame_hdr:0000000000007E7F                 db    0
.eh_frame_hdr:0000000000007E80                 db 0E4h
.eh_frame_hdr:0000000000007E81                 db 0CFh
.eh_frame_hdr:0000000000007E82                 db 0FFh
.eh_frame_hdr:0000000000007E83                 db 0FFh
.eh_frame_hdr:0000000000007E84                 db 0CCh
.eh_frame_hdr:0000000000007E85                 db  0Dh
.eh_frame_hdr:0000000000007E86                 db    0
.eh_frame_hdr:0000000000007E87                 db    0
.eh_frame_hdr:0000000000007E88                 db 0F4h
.eh_frame_hdr:0000000000007E89                 db 0CFh
.eh_frame_hdr:0000000000007E8A                 db 0FFh
.eh_frame_hdr:0000000000007E8B                 db 0FFh
.eh_frame_hdr:0000000000007E8C                 db 0E4h
.eh_frame_hdr:0000000000007E8D                 db  0Dh
.eh_frame_hdr:0000000000007E8E                 db    0
.eh_frame_hdr:0000000000007E8F                 db    0
.eh_frame_hdr:0000000000007E90                 db  14h
.eh_frame_hdr:0000000000007E91                 db 0E1h
.eh_frame_hdr:0000000000007E92                 db 0FFh
.eh_frame_hdr:0000000000007E93                 db 0FFh
.eh_frame_hdr:0000000000007E94                 db  14h
.eh_frame_hdr:0000000000007E95                 db  0Eh
.eh_frame_hdr:0000000000007E96                 db    0
.eh_frame_hdr:0000000000007E97                 db    0
.eh_frame_hdr:0000000000007E98                 db  14h
.eh_frame_hdr:0000000000007E99                 db 0E3h
.eh_frame_hdr:0000000000007E9A                 db 0FFh
.eh_frame_hdr:0000000000007E9B                 db 0FFh
.eh_frame_hdr:0000000000007E9C                 db  2Ch ; ,
.eh_frame_hdr:0000000000007E9D                 db  0Eh
.eh_frame_hdr:0000000000007E9E                 db    0
.eh_frame_hdr:0000000000007E9F                 db    0
.eh_frame_hdr:0000000000007EA0                 db    4
.eh_frame_hdr:0000000000007EA1                 db 0F0h
.eh_frame_hdr:0000000000007EA2                 db 0FFh
.eh_frame_hdr:0000000000007EA3                 db 0FFh
.eh_frame_hdr:0000000000007EA4                 db  7Ch ; |
.eh_frame_hdr:0000000000007EA5                 db  0Eh
.eh_frame_hdr:0000000000007EA6                 db    0
.eh_frame_hdr:0000000000007EA7                 db    0
.eh_frame_hdr:0000000000007EA8                 db  74h ; t
.eh_frame_hdr:0000000000007EA9                 db 0F0h
.eh_frame_hdr:0000000000007EAA                 db 0FFh
.eh_frame_hdr:0000000000007EAB                 db 0FFh
.eh_frame_hdr:0000000000007EAC                 db 0C4h
.eh_frame_hdr:0000000000007EAD                 db  0Eh
.eh_frame_hdr:0000000000007EAE                 db    0
.eh_frame_hdr:0000000000007EAF                 db    0
.eh_frame_hdr:0000000000007EB0                 db  84h
.eh_frame_hdr:0000000000007EB1                 db 0F0h
.eh_frame_hdr:0000000000007EB2                 db 0FFh
.eh_frame_hdr:0000000000007EB3                 db 0FFh
.eh_frame_hdr:0000000000007EB4                 db 0DCh
.eh_frame_hdr:0000000000007EB5                 db  0Eh
.eh_frame_hdr:0000000000007EB6                 db    0
.eh_frame_hdr:0000000000007EB7                 db    0
.eh_frame_hdr:0000000000007EB7 _eh_frame_hdr   ends
.eh_frame_hdr:0000000000007EB7
.eh_frame:0000000000007EB8 ; ===========================================================================
.eh_frame:0000000000007EB8
.eh_frame:0000000000007EB8 ; Segment type: Pure data
.eh_frame:0000000000007EB8 ; Segment permissions: Read
.eh_frame:0000000000007EB8 _eh_frame       segment qword public 'CONST' use64
.eh_frame:0000000000007EB8                 assume cs:_eh_frame
.eh_frame:0000000000007EB8                 ;org 7EB8h
.eh_frame:0000000000007EB8                 db  14h
.eh_frame:0000000000007EB9                 db    0
.eh_frame:0000000000007EBA                 db    0
.eh_frame:0000000000007EBB                 db    0
.eh_frame:0000000000007EBC                 db    0
.eh_frame:0000000000007EBD                 db    0
.eh_frame:0000000000007EBE                 db    0
.eh_frame:0000000000007EBF                 db    0
.eh_frame:0000000000007EC0                 db    1
.eh_frame:0000000000007EC1                 db  7Ah ; z
.eh_frame:0000000000007EC2                 db  52h ; R
.eh_frame:0000000000007EC3                 db    0
.eh_frame:0000000000007EC4                 db    1
.eh_frame:0000000000007EC5                 db  78h ; x
.eh_frame:0000000000007EC6                 db  10h
.eh_frame:0000000000007EC7                 db    1
.eh_frame:0000000000007EC8                 db  1Bh
.eh_frame:0000000000007EC9                 db  0Ch
.eh_frame:0000000000007ECA                 db    7
.eh_frame:0000000000007ECB                 db    8
.eh_frame:0000000000007ECC                 db  90h
.eh_frame:0000000000007ECD                 db    1
.eh_frame:0000000000007ECE                 db    7
.eh_frame:0000000000007ECF                 db  10h
.eh_frame:0000000000007ED0                 db  14h
.eh_frame:0000000000007ED1                 db    0
.eh_frame:0000000000007ED2                 db    0
.eh_frame:0000000000007ED3                 db    0
.eh_frame:0000000000007ED4                 db  1Ch
.eh_frame:0000000000007ED5                 db    0
.eh_frame:0000000000007ED6                 db    0
.eh_frame:0000000000007ED7                 db    0
.eh_frame:0000000000007ED8                 db  48h ; H
.eh_frame:0000000000007ED9                 db  9Bh
.eh_frame:0000000000007EDA                 db 0FFh
.eh_frame:0000000000007EDB                 db 0FFh
.eh_frame:0000000000007EDC                 db  2Bh ; +
.eh_frame:0000000000007EDD                 db    0
.eh_frame:0000000000007EDE                 db    0
.eh_frame:0000000000007EDF                 db    0
.eh_frame:0000000000007EE0                 db    0
.eh_frame:0000000000007EE1                 db    0
.eh_frame:0000000000007EE2                 db    0
.eh_frame:0000000000007EE3                 db    0
.eh_frame:0000000000007EE4                 db    0
.eh_frame:0000000000007EE5                 db    0
.eh_frame:0000000000007EE6                 db    0
.eh_frame:0000000000007EE7                 db    0
.eh_frame:0000000000007EE8                 db  14h
.eh_frame:0000000000007EE9                 db    0
.eh_frame:0000000000007EEA                 db    0
.eh_frame:0000000000007EEB                 db    0
.eh_frame:0000000000007EEC                 db    0
.eh_frame:0000000000007EED                 db    0
.eh_frame:0000000000007EEE                 db    0
.eh_frame:0000000000007EEF                 db    0
.eh_frame:0000000000007EF0                 db    1
.eh_frame:0000000000007EF1                 db  7Ah ; z
.eh_frame:0000000000007EF2                 db  52h ; R
.eh_frame:0000000000007EF3                 db    0
.eh_frame:0000000000007EF4                 db    1
.eh_frame:0000000000007EF5                 db  78h ; x
.eh_frame:0000000000007EF6                 db  10h
.eh_frame:0000000000007EF7                 db    1
.eh_frame:0000000000007EF8                 db  1Bh
.eh_frame:0000000000007EF9                 db  0Ch
.eh_frame:0000000000007EFA                 db    7
.eh_frame:0000000000007EFB                 db    8
.eh_frame:0000000000007EFC                 db  90h
.eh_frame:0000000000007EFD                 db    1
.eh_frame:0000000000007EFE                 db    0
.eh_frame:0000000000007EFF                 db    0
.eh_frame:0000000000007F00                 db  24h ; $
.eh_frame:0000000000007F01                 db    0
.eh_frame:0000000000007F02                 db    0
.eh_frame:0000000000007F03                 db    0
.eh_frame:0000000000007F04                 db  1Ch
.eh_frame:0000000000007F05                 db    0
.eh_frame:0000000000007F06                 db    0
.eh_frame:0000000000007F07                 db    0
.eh_frame:0000000000007F08                 db 0C8h
.eh_frame:0000000000007F09                 db  94h
.eh_frame:0000000000007F0A                 db 0FFh
.eh_frame:0000000000007F0B                 db 0FFh
.eh_frame:0000000000007F0C                 db  10h
.eh_frame:0000000000007F0D                 db    3
.eh_frame:0000000000007F0E                 db    0
.eh_frame:0000000000007F0F                 db    0
.eh_frame:0000000000007F10                 db    0
.eh_frame:0000000000007F11                 db  0Eh
.eh_frame:0000000000007F12                 db  10h
.eh_frame:0000000000007F13                 db  46h ; F
.eh_frame:0000000000007F14                 db  0Eh
.eh_frame:0000000000007F15                 db  18h
.eh_frame:0000000000007F16                 db  4Ah ; J
.eh_frame:0000000000007F17                 db  0Fh
.eh_frame:0000000000007F18                 db  0Bh
.eh_frame:0000000000007F19                 db  77h ; w
.eh_frame:0000000000007F1A                 db    8
.eh_frame:0000000000007F1B                 db  80h
.eh_frame:0000000000007F1C                 db    0
.eh_frame:0000000000007F1D                 db  3Fh ; ?
.eh_frame:0000000000007F1E                 db  1Ah
.eh_frame:0000000000007F1F                 db  3Bh ; ;
.eh_frame:0000000000007F20                 db  2Ah ; *
.eh_frame:0000000000007F21                 db  33h ; 3
.eh_frame:0000000000007F22                 db  24h ; $
.eh_frame:0000000000007F23                 db  22h ; "
.eh_frame:0000000000007F24                 db    0
.eh_frame:0000000000007F25                 db    0
.eh_frame:0000000000007F26                 db    0
.eh_frame:0000000000007F27                 db    0
.eh_frame:0000000000007F28                 db  14h
.eh_frame:0000000000007F29                 db    0
.eh_frame:0000000000007F2A                 db    0
.eh_frame:0000000000007F2B                 db    0
.eh_frame:0000000000007F2C                 db  44h ; D
.eh_frame:0000000000007F2D                 db    0
.eh_frame:0000000000007F2E                 db    0
.eh_frame:0000000000007F2F                 db    0
.eh_frame:0000000000007F30                 db 0B0h
.eh_frame:0000000000007F31                 db  97h
.eh_frame:0000000000007F32                 db 0FFh
.eh_frame:0000000000007F33                 db 0FFh
.eh_frame:0000000000007F34                 db    8
.eh_frame:0000000000007F35                 db    0
.eh_frame:0000000000007F36                 db    0
.eh_frame:0000000000007F37                 db    0
.eh_frame:0000000000007F38                 db    0
.eh_frame:0000000000007F39                 db    0
.eh_frame:0000000000007F3A                 db    0
.eh_frame:0000000000007F3B                 db    0
.eh_frame:0000000000007F3C                 db    0
.eh_frame:0000000000007F3D                 db    0
.eh_frame:0000000000007F3E                 db    0
.eh_frame:0000000000007F3F                 db    0
.eh_frame:0000000000007F40                 db  38h ; 8
.eh_frame:0000000000007F41                 db    0
.eh_frame:0000000000007F42                 db    0
.eh_frame:0000000000007F43                 db    0
.eh_frame:0000000000007F44                 db  5Ch ; \
.eh_frame:0000000000007F45                 db    0
.eh_frame:0000000000007F46                 db    0
.eh_frame:0000000000007F47                 db    0
.eh_frame:0000000000007F48                 db 0E8h
.eh_frame:0000000000007F49                 db  9Bh
.eh_frame:0000000000007F4A                 db 0FFh
.eh_frame:0000000000007F4B                 db 0FFh
.eh_frame:0000000000007F4C                 db 0D6h
.eh_frame:0000000000007F4D                 db    0
.eh_frame:0000000000007F4E                 db    0
.eh_frame:0000000000007F4F                 db    0
.eh_frame:0000000000007F50                 db    0
.eh_frame:0000000000007F51                 db  49h ; I
.eh_frame:0000000000007F52                 db  0Eh
.eh_frame:0000000000007F53                 db  10h
.eh_frame:0000000000007F54                 db  8Ch
.eh_frame:0000000000007F55                 db    2
.eh_frame:0000000000007F56                 db  41h ; A
.eh_frame:0000000000007F57                 db  0Eh
.eh_frame:0000000000007F58                 db  18h
.eh_frame:0000000000007F59                 db  86h
.eh_frame:0000000000007F5A                 db    3
.eh_frame:0000000000007F5B                 db  41h ; A
.eh_frame:0000000000007F5C                 db  0Eh
.eh_frame:0000000000007F5D                 db  20h
.eh_frame:0000000000007F5E                 db  83h
.eh_frame:0000000000007F5F                 db    4
.eh_frame:0000000000007F60                 db    2
.eh_frame:0000000000007F61                 db 0A1h
.eh_frame:0000000000007F62                 db  0Ah
.eh_frame:0000000000007F63                 db  0Eh
.eh_frame:0000000000007F64                 db  18h
.eh_frame:0000000000007F65                 db  41h ; A
.eh_frame:0000000000007F66                 db  0Eh
.eh_frame:0000000000007F67                 db  10h
.eh_frame:0000000000007F68                 db  42h ; B
.eh_frame:0000000000007F69                 db  0Eh
.eh_frame:0000000000007F6A                 db    8
.eh_frame:0000000000007F6B                 db  41h ; A
.eh_frame:0000000000007F6C                 db  0Bh
.eh_frame:0000000000007F6D                 db  45h ; E
.eh_frame:0000000000007F6E                 db  0Ah
.eh_frame:0000000000007F6F                 db  0Eh
.eh_frame:0000000000007F70                 db  18h
.eh_frame:0000000000007F71                 db  41h ; A
.eh_frame:0000000000007F72                 db  0Eh
.eh_frame:0000000000007F73                 db  10h
.eh_frame:0000000000007F74                 db  42h ; B
.eh_frame:0000000000007F75                 db  0Eh
.eh_frame:0000000000007F76                 db    8
.eh_frame:0000000000007F77                 db  41h ; A
.eh_frame:0000000000007F78                 db  0Bh
.eh_frame:0000000000007F79                 db    0
.eh_frame:0000000000007F7A                 db    0
.eh_frame:0000000000007F7B                 db    0
.eh_frame:0000000000007F7C                 db  28h ; (
.eh_frame:0000000000007F7D                 db    0
.eh_frame:0000000000007F7E                 db    0
.eh_frame:0000000000007F7F                 db    0
.eh_frame:0000000000007F80                 db  98h
.eh_frame:0000000000007F81                 db    0
.eh_frame:0000000000007F82                 db    0
.eh_frame:0000000000007F83                 db    0
.eh_frame:0000000000007F84                 db  8Ch
.eh_frame:0000000000007F85                 db  9Ch
.eh_frame:0000000000007F86                 db 0FFh
.eh_frame:0000000000007F87                 db 0FFh
.eh_frame:0000000000007F88                 db  6Ah ; j
.eh_frame:0000000000007F89                 db    3
.eh_frame:0000000000007F8A                 db    0
.eh_frame:0000000000007F8B                 db    0
.eh_frame:0000000000007F8C                 db    0
.eh_frame:0000000000007F8D                 db  42h ; B
.eh_frame:0000000000007F8E                 db  0Eh
.eh_frame:0000000000007F8F                 db  10h
.eh_frame:0000000000007F90                 db  8Dh
.eh_frame:0000000000007F91                 db    2
.eh_frame:0000000000007F92                 db  42h ; B
.eh_frame:0000000000007F93                 db  0Eh
.eh_frame:0000000000007F94                 db  18h
.eh_frame:0000000000007F95                 db  8Ch
.eh_frame:0000000000007F96                 db    3
.eh_frame:0000000000007F97                 db  46h ; F
.eh_frame:0000000000007F98                 db  0Eh
.eh_frame:0000000000007F99                 db  20h
.eh_frame:0000000000007F9A                 db  86h
.eh_frame:0000000000007F9B                 db    4
.eh_frame:0000000000007F9C                 db  41h ; A
.eh_frame:0000000000007F9D                 db  0Eh
.eh_frame:0000000000007F9E                 db  28h ; (
.eh_frame:0000000000007F9F                 db  83h
.eh_frame:0000000000007FA0                 db    5
.eh_frame:0000000000007FA1                 db  49h ; I
.eh_frame:0000000000007FA2                 db  0Eh
.eh_frame:0000000000007FA3                 db 0B0h
.eh_frame:0000000000007FA4                 db    1
.eh_frame:0000000000007FA5                 db    0
.eh_frame:0000000000007FA6                 db    0
.eh_frame:0000000000007FA7                 db    0
.eh_frame:0000000000007FA8                 db  4Ch ; L
.eh_frame:0000000000007FA9                 db    0
.eh_frame:0000000000007FAA                 db    0
.eh_frame:0000000000007FAB                 db    0
.eh_frame:0000000000007FAC                 db 0C4h
.eh_frame:0000000000007FAD                 db    0
.eh_frame:0000000000007FAE                 db    0
.eh_frame:0000000000007FAF                 db    0
.eh_frame:0000000000007FB0                 db  40h ; @
.eh_frame:0000000000007FB1                 db  97h
.eh_frame:0000000000007FB2                 db 0FFh
.eh_frame:0000000000007FB3                 db 0FFh
.eh_frame:0000000000007FB4                 db  26h ; &
.eh_frame:0000000000007FB5                 db    3
.eh_frame:0000000000007FB6                 db    0
.eh_frame:0000000000007FB7                 db    0
.eh_frame:0000000000007FB8                 db    0
.eh_frame:0000000000007FB9                 db  42h ; B
.eh_frame:0000000000007FBA                 db  0Eh
.eh_frame:0000000000007FBB                 db  10h
.eh_frame:0000000000007FBC                 db  8Fh
.eh_frame:0000000000007FBD                 db    2
.eh_frame:0000000000007FBE                 db  42h ; B
.eh_frame:0000000000007FBF                 db  0Eh
.eh_frame:0000000000007FC0                 db  18h
.eh_frame:0000000000007FC1                 db  8Eh
.eh_frame:0000000000007FC2                 db    3
.eh_frame:0000000000007FC3                 db  42h ; B
.eh_frame:0000000000007FC4                 db  0Eh
.eh_frame:0000000000007FC5                 db  20h
.eh_frame:0000000000007FC6                 db  8Dh
.eh_frame:0000000000007FC7                 db    4
.eh_frame:0000000000007FC8                 db  42h ; B
.eh_frame:0000000000007FC9                 db  0Eh
.eh_frame:0000000000007FCA                 db  28h ; (
.eh_frame:0000000000007FCB                 db  8Ch
.eh_frame:0000000000007FCC                 db    5
.eh_frame:0000000000007FCD                 db  48h ; H
.eh_frame:0000000000007FCE                 db  0Eh
.eh_frame:0000000000007FCF                 db  30h ; 0
.eh_frame:0000000000007FD0                 db  86h
.eh_frame:0000000000007FD1                 db    6
.eh_frame:0000000000007FD2                 db  41h ; A
.eh_frame:0000000000007FD3                 db  0Eh
.eh_frame:0000000000007FD4                 db  38h ; 8
.eh_frame:0000000000007FD5                 db  83h
.eh_frame:0000000000007FD6                 db    7
.eh_frame:0000000000007FD7                 db  49h ; I
.eh_frame:0000000000007FD8                 db  0Eh
.eh_frame:0000000000007FD9                 db  40h ; @
.eh_frame:0000000000007FDA                 db    3
.eh_frame:0000000000007FDB                 db 0C4h
.eh_frame:0000000000007FDC                 db    2
.eh_frame:0000000000007FDD                 db  0Ah
.eh_frame:0000000000007FDE                 db  0Eh
.eh_frame:0000000000007FDF                 db  38h ; 8
.eh_frame:0000000000007FE0                 db  45h ; E
.eh_frame:0000000000007FE1                 db  0Eh
.eh_frame:0000000000007FE2                 db  30h ; 0
.eh_frame:0000000000007FE3                 db  41h ; A
.eh_frame:0000000000007FE4                 db  0Eh
.eh_frame:0000000000007FE5                 db  28h ; (
.eh_frame:0000000000007FE6                 db  42h ; B
.eh_frame:0000000000007FE7                 db  0Eh
.eh_frame:0000000000007FE8                 db  20h
.eh_frame:0000000000007FE9                 db  42h ; B
.eh_frame:0000000000007FEA                 db  0Eh
.eh_frame:0000000000007FEB                 db  18h
.eh_frame:0000000000007FEC                 db  42h ; B
.eh_frame:0000000000007FED                 db  0Eh
.eh_frame:0000000000007FEE                 db  10h
.eh_frame:0000000000007FEF                 db  42h ; B
.eh_frame:0000000000007FF0                 db  0Eh
.eh_frame:0000000000007FF1                 db    8
.eh_frame:0000000000007FF2                 db  41h ; A
.eh_frame:0000000000007FF3                 db  0Bh
.eh_frame:0000000000007FF4                 db    0
.eh_frame:0000000000007FF5                 db    0
.eh_frame:0000000000007FF6                 db    0
.eh_frame:0000000000007FF7                 db    0
.eh_frame:0000000000007FF8                 db  2Ch ; ,
.eh_frame:0000000000007FF9                 db    0
.eh_frame:0000000000007FFA                 db    0
.eh_frame:0000000000007FFB                 db    0
.eh_frame:0000000000007FFC                 db  14h
.eh_frame:0000000000007FFD                 db    1
.eh_frame:0000000000007FFE                 db    0
.eh_frame:0000000000007FFF                 db    0
.eh_frame:0000000000008000                 db  80h
.eh_frame:0000000000008001                 db  9Fh
.eh_frame:0000000000008002                 db 0FFh
.eh_frame:0000000000008003                 db 0FFh
.eh_frame:0000000000008004                 db  14h
.eh_frame:0000000000008005                 db    1
.eh_frame:0000000000008006                 db    0
.eh_frame:0000000000008007                 db    0
.eh_frame:0000000000008008                 db    0
.eh_frame:0000000000008009                 db  41h ; A
.eh_frame:000000000000800A                 db  0Eh
.eh_frame:000000000000800B                 db  10h
.eh_frame:000000000000800C                 db  86h
.eh_frame:000000000000800D                 db    2
.eh_frame:000000000000800E                 db  41h ; A
.eh_frame:000000000000800F                 db  0Eh
.eh_frame:0000000000008010                 db  18h
.eh_frame:0000000000008011                 db  83h
.eh_frame:0000000000008012                 db    3
.eh_frame:0000000000008013                 db  4Dh ; M
.eh_frame:0000000000008014                 db  0Eh
.eh_frame:0000000000008015                 db 0F0h
.eh_frame:0000000000008016                 db    1
.eh_frame:0000000000008017                 db    2
.eh_frame:0000000000008018                 db 0E7h
.eh_frame:0000000000008019                 db  0Ah
.eh_frame:000000000000801A                 db  0Eh
.eh_frame:000000000000801B                 db  18h
.eh_frame:000000000000801C                 db  41h ; A
.eh_frame:000000000000801D                 db  0Eh
.eh_frame:000000000000801E                 db  10h
.eh_frame:000000000000801F                 db  41h ; A
.eh_frame:0000000000008020                 db  0Eh
.eh_frame:0000000000008021                 db    8
.eh_frame:0000000000008022                 db  48h ; H
.eh_frame:0000000000008023                 db  0Bh
.eh_frame:0000000000008024                 db    0
.eh_frame:0000000000008025                 db    0
.eh_frame:0000000000008026                 db    0
.eh_frame:0000000000008027                 db    0
.eh_frame:0000000000008028                 db  10h
.eh_frame:0000000000008029                 db    0
.eh_frame:000000000000802A                 db    0
.eh_frame:000000000000802B                 db    0
.eh_frame:000000000000802C                 db  44h ; D
.eh_frame:000000000000802D                 db    1
.eh_frame:000000000000802E                 db    0
.eh_frame:000000000000802F                 db    0
.eh_frame:0000000000008030                 db  70h ; p
.eh_frame:0000000000008031                 db 0A0h
.eh_frame:0000000000008032                 db 0FFh
.eh_frame:0000000000008033                 db 0FFh
.eh_frame:0000000000008034                 db    8
.eh_frame:0000000000008035                 db    0
.eh_frame:0000000000008036                 db    0
.eh_frame:0000000000008037                 db    0
.eh_frame:0000000000008038                 db    0
.eh_frame:0000000000008039                 db    0
.eh_frame:000000000000803A                 db    0
.eh_frame:000000000000803B                 db    0
.eh_frame:000000000000803C                 db  10h
.eh_frame:000000000000803D                 db    0
.eh_frame:000000000000803E                 db    0
.eh_frame:000000000000803F                 db    0
.eh_frame:0000000000008040                 db  58h ; X
.eh_frame:0000000000008041                 db    1
.eh_frame:0000000000008042                 db    0
.eh_frame:0000000000008043                 db    0
.eh_frame:0000000000008044                 db  6Ch ; l
.eh_frame:0000000000008045                 db 0A0h
.eh_frame:0000000000008046                 db 0FFh
.eh_frame:0000000000008047                 db 0FFh
.eh_frame:0000000000008048                 db    8
.eh_frame:0000000000008049                 db    0
.eh_frame:000000000000804A                 db    0
.eh_frame:000000000000804B                 db    0
.eh_frame:000000000000804C                 db    0
.eh_frame:000000000000804D                 db    0
.eh_frame:000000000000804E                 db    0
.eh_frame:000000000000804F                 db    0
.eh_frame:0000000000008050                 db  2Ch ; ,
.eh_frame:0000000000008051                 db    0
.eh_frame:0000000000008052                 db    0
.eh_frame:0000000000008053                 db    0
.eh_frame:0000000000008054                 db  6Ch ; l
.eh_frame:0000000000008055                 db    1
.eh_frame:0000000000008056                 db    0
.eh_frame:0000000000008057                 db    0
.eh_frame:0000000000008058                 db  68h ; h
.eh_frame:0000000000008059                 db 0A0h
.eh_frame:000000000000805A                 db 0FFh
.eh_frame:000000000000805B                 db 0FFh
.eh_frame:000000000000805C                 db 0A4h
.eh_frame:000000000000805D                 db    0
.eh_frame:000000000000805E                 db    0
.eh_frame:000000000000805F                 db    0
.eh_frame:0000000000008060                 db    0
.eh_frame:0000000000008061                 db  41h ; A
.eh_frame:0000000000008062                 db  0Eh
.eh_frame:0000000000008063                 db  10h
.eh_frame:0000000000008064                 db  86h
.eh_frame:0000000000008065                 db    2
.eh_frame:0000000000008066                 db  41h ; A
.eh_frame:0000000000008067                 db  0Eh
.eh_frame:0000000000008068                 db  18h
.eh_frame:0000000000008069                 db  83h
.eh_frame:000000000000806A                 db    3
.eh_frame:000000000000806B                 db  44h ; D
.eh_frame:000000000000806C                 db  0Eh
.eh_frame:000000000000806D                 db  20h
.eh_frame:000000000000806E                 db  7Ah ; z
.eh_frame:000000000000806F                 db  0Ah
.eh_frame:0000000000008070                 db  0Eh
.eh_frame:0000000000008071                 db  18h
.eh_frame:0000000000008072                 db  41h ; A
.eh_frame:0000000000008073                 db  0Eh
.eh_frame:0000000000008074                 db  10h
.eh_frame:0000000000008075                 db  41h ; A
.eh_frame:0000000000008076                 db  0Eh
.eh_frame:0000000000008077                 db    8
.eh_frame:0000000000008078                 db  41h ; A
.eh_frame:0000000000008079                 db  0Bh
.eh_frame:000000000000807A                 db    0
.eh_frame:000000000000807B                 db    0
.eh_frame:000000000000807C                 db    0
.eh_frame:000000000000807D                 db    0
.eh_frame:000000000000807E                 db    0
.eh_frame:000000000000807F                 db    0
.eh_frame:0000000000008080                 db  24h ; $
.eh_frame:0000000000008081                 db    0
.eh_frame:0000000000008082                 db    0
.eh_frame:0000000000008083                 db    0
.eh_frame:0000000000008084                 db  9Ch
.eh_frame:0000000000008085                 db    1
.eh_frame:0000000000008086                 db    0
.eh_frame:0000000000008087                 db    0
.eh_frame:0000000000008088                 db 0E8h
.eh_frame:0000000000008089                 db 0A0h
.eh_frame:000000000000808A                 db 0FFh
.eh_frame:000000000000808B                 db 0FFh
.eh_frame:000000000000808C                 db  33h ; 3
.eh_frame:000000000000808D                 db    0
.eh_frame:000000000000808E                 db    0
.eh_frame:000000000000808F                 db    0
.eh_frame:0000000000008090                 db    0
.eh_frame:0000000000008091                 db  41h ; A
.eh_frame:0000000000008092                 db  0Eh
.eh_frame:0000000000008093                 db  10h
.eh_frame:0000000000008094                 db  86h
.eh_frame:0000000000008095                 db    2
.eh_frame:0000000000008096                 db  41h ; A
.eh_frame:0000000000008097                 db  0Eh
.eh_frame:0000000000008098                 db  18h
.eh_frame:0000000000008099                 db  83h
.eh_frame:000000000000809A                 db    3
.eh_frame:000000000000809B                 db  47h ; G
.eh_frame:000000000000809C                 db  0Eh
.eh_frame:000000000000809D                 db  20h
.eh_frame:000000000000809E                 db  67h ; g
.eh_frame:000000000000809F                 db  0Eh
.eh_frame:00000000000080A0                 db  18h
.eh_frame:00000000000080A1                 db  41h ; A
.eh_frame:00000000000080A2                 db  0Eh
.eh_frame:00000000000080A3                 db  10h
.eh_frame:00000000000080A4                 db  41h ; A
.eh_frame:00000000000080A5                 db  0Eh
.eh_frame:00000000000080A6                 db    8
.eh_frame:00000000000080A7                 db    0
.eh_frame:00000000000080A8                 db  1Ch
.eh_frame:00000000000080A9                 db    0
.eh_frame:00000000000080AA                 db    0
.eh_frame:00000000000080AB                 db    0
.eh_frame:00000000000080AC                 db 0C4h
.eh_frame:00000000000080AD                 db    1
.eh_frame:00000000000080AE                 db    0
.eh_frame:00000000000080AF                 db    0
.eh_frame:00000000000080B0                 db    0
.eh_frame:00000000000080B1                 db 0A1h
.eh_frame:00000000000080B2                 db 0FFh
.eh_frame:00000000000080B3                 db 0FFh
.eh_frame:00000000000080B4                 db  9Fh
.eh_frame:00000000000080B5                 db    0
.eh_frame:00000000000080B6                 db    0
.eh_frame:00000000000080B7                 db    0
.eh_frame:00000000000080B8                 db    0
.eh_frame:00000000000080B9                 db  44h ; D
.eh_frame:00000000000080BA                 db  0Eh
.eh_frame:00000000000080BB                 db  10h
.eh_frame:00000000000080BC                 db  83h
.eh_frame:00000000000080BD                 db    2
.eh_frame:00000000000080BE                 db    2
.eh_frame:00000000000080BF                 db  78h ; x
.eh_frame:00000000000080C0                 db  0Ah
.eh_frame:00000000000080C1                 db  0Eh
.eh_frame:00000000000080C2                 db    8
.eh_frame:00000000000080C3                 db  41h ; A
.eh_frame:00000000000080C4                 db  0Bh
.eh_frame:00000000000080C5                 db    0
.eh_frame:00000000000080C6                 db    0
.eh_frame:00000000000080C7                 db    0
.eh_frame:00000000000080C8                 db  40h ; @
.eh_frame:00000000000080C9                 db    0
.eh_frame:00000000000080CA                 db    0
.eh_frame:00000000000080CB                 db    0
.eh_frame:00000000000080CC                 db 0E4h
.eh_frame:00000000000080CD                 db    1
.eh_frame:00000000000080CE                 db    0
.eh_frame:00000000000080CF                 db    0
.eh_frame:00000000000080D0                 db  80h
.eh_frame:00000000000080D1                 db 0A1h
.eh_frame:00000000000080D2                 db 0FFh
.eh_frame:00000000000080D3                 db 0FFh
.eh_frame:00000000000080D4                 db 0E7h
.eh_frame:00000000000080D5                 db    0
.eh_frame:00000000000080D6                 db    0
.eh_frame:00000000000080D7                 db    0
.eh_frame:00000000000080D8                 db    0
.eh_frame:00000000000080D9                 db  41h ; A
.eh_frame:00000000000080DA                 db  0Eh
.eh_frame:00000000000080DB                 db  10h
.eh_frame:00000000000080DC                 db  86h
.eh_frame:00000000000080DD                 db    2
.eh_frame:00000000000080DE                 db  41h ; A
.eh_frame:00000000000080DF                 db  0Eh
.eh_frame:00000000000080E0                 db  18h
.eh_frame:00000000000080E1                 db  83h
.eh_frame:00000000000080E2                 db    3
.eh_frame:00000000000080E3                 db  49h ; I
.eh_frame:00000000000080E4                 db  0Eh
.eh_frame:00000000000080E5                 db  20h
.eh_frame:00000000000080E6                 db  6Eh ; n
.eh_frame:00000000000080E7                 db  0Ah
.eh_frame:00000000000080E8                 db  0Eh
.eh_frame:00000000000080E9                 db  18h
.eh_frame:00000000000080EA                 db  41h ; A
.eh_frame:00000000000080EB                 db  0Eh
.eh_frame:00000000000080EC                 db  10h
.eh_frame:00000000000080ED                 db  41h ; A
.eh_frame:00000000000080EE                 db  0Eh
.eh_frame:00000000000080EF                 db    8
.eh_frame:00000000000080F0                 db  45h ; E
.eh_frame:00000000000080F1                 db  0Bh
.eh_frame:00000000000080F2                 db    2
.eh_frame:00000000000080F3                 db  4Ah ; J
.eh_frame:00000000000080F4                 db  0Ah
.eh_frame:00000000000080F5                 db  0Eh
.eh_frame:00000000000080F6                 db  18h
.eh_frame:00000000000080F7                 db  41h ; A
.eh_frame:00000000000080F8                 db  0Eh
.eh_frame:00000000000080F9                 db  10h
.eh_frame:00000000000080FA                 db  41h ; A
.eh_frame:00000000000080FB                 db  0Eh
.eh_frame:00000000000080FC                 db    8
.eh_frame:00000000000080FD                 db  44h ; D
.eh_frame:00000000000080FE                 db  0Bh
.eh_frame:00000000000080FF                 db    2
.eh_frame:0000000000008100                 db  54h ; T
.eh_frame:0000000000008101                 db  0Eh
.eh_frame:0000000000008102                 db  18h
.eh_frame:0000000000008103                 db  41h ; A
.eh_frame:0000000000008104                 db  0Eh
.eh_frame:0000000000008105                 db  10h
.eh_frame:0000000000008106                 db  41h ; A
.eh_frame:0000000000008107                 db  0Eh
.eh_frame:0000000000008108                 db    8
.eh_frame:0000000000008109                 db    0
.eh_frame:000000000000810A                 db    0
.eh_frame:000000000000810B                 db    0
.eh_frame:000000000000810C                 db  74h ; t
.eh_frame:000000000000810D                 db    0
.eh_frame:000000000000810E                 db    0
.eh_frame:000000000000810F                 db    0
.eh_frame:0000000000008110                 db  28h ; (
.eh_frame:0000000000008111                 db    2
.eh_frame:0000000000008112                 db    0
.eh_frame:0000000000008113                 db    0
.eh_frame:0000000000008114                 db  2Ch ; ,
.eh_frame:0000000000008115                 db 0A2h
.eh_frame:0000000000008116                 db 0FFh
.eh_frame:0000000000008117                 db 0FFh
.eh_frame:0000000000008118                 db  34h ; 4
.eh_frame:0000000000008119                 db  12h
.eh_frame:000000000000811A                 db    0
.eh_frame:000000000000811B                 db    0
.eh_frame:000000000000811C                 db    0
.eh_frame:000000000000811D                 db  42h ; B
.eh_frame:000000000000811E                 db  0Eh
.eh_frame:000000000000811F                 db  10h
.eh_frame:0000000000008120                 db  8Fh
.eh_frame:0000000000008121                 db    2
.eh_frame:0000000000008122                 db  42h ; B
.eh_frame:0000000000008123                 db  0Eh
.eh_frame:0000000000008124                 db  18h
.eh_frame:0000000000008125                 db  8Eh
.eh_frame:0000000000008126                 db    3
.eh_frame:0000000000008127                 db  45h ; E
.eh_frame:0000000000008128                 db  0Eh
.eh_frame:0000000000008129                 db  20h
.eh_frame:000000000000812A                 db  8Dh
.eh_frame:000000000000812B                 db    4
.eh_frame:000000000000812C                 db  42h ; B
.eh_frame:000000000000812D                 db  0Eh
.eh_frame:000000000000812E                 db  28h ; (
.eh_frame:000000000000812F                 db  8Ch
.eh_frame:0000000000008130                 db    5
.eh_frame:0000000000008131                 db  44h ; D
.eh_frame:0000000000008132                 db  0Eh
.eh_frame:0000000000008133                 db  30h ; 0
.eh_frame:0000000000008134                 db  86h
.eh_frame:0000000000008135                 db    6
.eh_frame:0000000000008136                 db  41h ; A
.eh_frame:0000000000008137                 db  0Eh
.eh_frame:0000000000008138                 db  38h ; 8
.eh_frame:0000000000008139                 db  83h
.eh_frame:000000000000813A                 db    7
.eh_frame:000000000000813B                 db  53h ; S
.eh_frame:000000000000813C                 db  0Eh
.eh_frame:000000000000813D                 db 0F0h
.eh_frame:000000000000813E                 db    1
.eh_frame:000000000000813F                 db    3
.eh_frame:0000000000008140                 db  81h
.eh_frame:0000000000008141                 db  0Bh
.eh_frame:0000000000008142                 db  0Eh
.eh_frame:0000000000008143                 db 0F8h
.eh_frame:0000000000008144                 db    1
.eh_frame:0000000000008145                 db  4Ah ; J
.eh_frame:0000000000008146                 db  0Eh
.eh_frame:0000000000008147                 db  80h
.eh_frame:0000000000008148                 db    2
.eh_frame:0000000000008149                 db  44h ; D
.eh_frame:000000000000814A                 db  0Eh
.eh_frame:000000000000814B                 db  88h
.eh_frame:000000000000814C                 db    2
.eh_frame:000000000000814D                 db  45h ; E
.eh_frame:000000000000814E                 db  0Eh
.eh_frame:000000000000814F                 db  90h
.eh_frame:0000000000008150                 db    2
.eh_frame:0000000000008151                 db  5Fh ; _
.eh_frame:0000000000008152                 db  0Eh
.eh_frame:0000000000008153                 db 0F0h
.eh_frame:0000000000008154                 db    1
.eh_frame:0000000000008155                 db  64h ; d
.eh_frame:0000000000008156                 db  0Ah
.eh_frame:0000000000008157                 db  0Eh
.eh_frame:0000000000008158                 db  38h ; 8
.eh_frame:0000000000008159                 db  41h ; A
.eh_frame:000000000000815A                 db  0Eh
.eh_frame:000000000000815B                 db  30h ; 0
.eh_frame:000000000000815C                 db  41h ; A
.eh_frame:000000000000815D                 db  0Eh
.eh_frame:000000000000815E                 db  28h ; (
.eh_frame:000000000000815F                 db  42h ; B
.eh_frame:0000000000008160                 db  0Eh
.eh_frame:0000000000008161                 db  20h
.eh_frame:0000000000008162                 db  42h ; B
.eh_frame:0000000000008163                 db  0Eh
.eh_frame:0000000000008164                 db  18h
.eh_frame:0000000000008165                 db  42h ; B
.eh_frame:0000000000008166                 db  0Eh
.eh_frame:0000000000008167                 db  10h
.eh_frame:0000000000008168                 db  42h ; B
.eh_frame:0000000000008169                 db  0Eh
.eh_frame:000000000000816A                 db    8
.eh_frame:000000000000816B                 db  44h ; D
.eh_frame:000000000000816C                 db  0Bh
.eh_frame:000000000000816D                 db    3
.eh_frame:000000000000816E                 db  99h
.eh_frame:000000000000816F                 db    5
.eh_frame:0000000000008170                 db  0Eh
.eh_frame:0000000000008171                 db 0F8h
.eh_frame:0000000000008172                 db    1
.eh_frame:0000000000008173                 db  4Dh ; M
.eh_frame:0000000000008174                 db  0Eh
.eh_frame:0000000000008175                 db  80h
.eh_frame:0000000000008176                 db    2
.eh_frame:0000000000008177                 db  44h ; D
.eh_frame:0000000000008178                 db  0Eh
.eh_frame:0000000000008179                 db  88h
.eh_frame:000000000000817A                 db    2
.eh_frame:000000000000817B                 db  47h ; G
.eh_frame:000000000000817C                 db  0Eh
.eh_frame:000000000000817D                 db  90h
.eh_frame:000000000000817E                 db    2
.eh_frame:000000000000817F                 db  5Bh ; [
.eh_frame:0000000000008180                 db  0Eh
.eh_frame:0000000000008181                 db 0F0h
.eh_frame:0000000000008182                 db    1
.eh_frame:0000000000008183                 db    0
.eh_frame:0000000000008184                 db  68h ; h
.eh_frame:0000000000008185                 db    0
.eh_frame:0000000000008186                 db    0
.eh_frame:0000000000008187                 db    0
.eh_frame:0000000000008188                 db 0A0h
.eh_frame:0000000000008189                 db    2
.eh_frame:000000000000818A                 db    0
.eh_frame:000000000000818B                 db    0
.eh_frame:000000000000818C                 db 0F4h
.eh_frame:000000000000818D                 db 0B3h
.eh_frame:000000000000818E                 db 0FFh
.eh_frame:000000000000818F                 db 0FFh
.eh_frame:0000000000008190                 db 0ABh
.eh_frame:0000000000008191                 db    1
.eh_frame:0000000000008192                 db    0
.eh_frame:0000000000008193                 db    0
.eh_frame:0000000000008194                 db    0
.eh_frame:0000000000008195                 db  42h ; B
.eh_frame:0000000000008196                 db  0Eh
.eh_frame:0000000000008197                 db  10h
.eh_frame:0000000000008198                 db  8Fh
.eh_frame:0000000000008199                 db    2
.eh_frame:000000000000819A                 db  42h ; B
.eh_frame:000000000000819B                 db  0Eh
.eh_frame:000000000000819C                 db  18h
.eh_frame:000000000000819D                 db  8Eh
.eh_frame:000000000000819E                 db    3
.eh_frame:000000000000819F                 db  45h ; E
.eh_frame:00000000000081A0                 db  0Eh
.eh_frame:00000000000081A1                 db  20h
.eh_frame:00000000000081A2                 db  8Dh
.eh_frame:00000000000081A3                 db    4
.eh_frame:00000000000081A4                 db  42h ; B
.eh_frame:00000000000081A5                 db  0Eh
.eh_frame:00000000000081A6                 db  28h ; (
.eh_frame:00000000000081A7                 db  8Ch
.eh_frame:00000000000081A8                 db    5
.eh_frame:00000000000081A9                 db  44h ; D
.eh_frame:00000000000081AA                 db  0Eh
.eh_frame:00000000000081AB                 db  30h ; 0
.eh_frame:00000000000081AC                 db  86h
.eh_frame:00000000000081AD                 db    6
.eh_frame:00000000000081AE                 db  41h ; A
.eh_frame:00000000000081AF                 db  0Eh
.eh_frame:00000000000081B0                 db  38h ; 8
.eh_frame:00000000000081B1                 db  83h
.eh_frame:00000000000081B2                 db    7
.eh_frame:00000000000081B3                 db  47h ; G
.eh_frame:00000000000081B4                 db  0Eh
.eh_frame:00000000000081B5                 db  60h ; `
.eh_frame:00000000000081B6                 db    2
.eh_frame:00000000000081B7                 db  99h
.eh_frame:00000000000081B8                 db  0Eh
.eh_frame:00000000000081B9                 db  68h ; h
.eh_frame:00000000000081BA                 db  5Fh ; _
.eh_frame:00000000000081BB                 db  0Eh
.eh_frame:00000000000081BC                 db  70h ; p
.eh_frame:00000000000081BD                 db  46h ; F
.eh_frame:00000000000081BE                 db  0Eh
.eh_frame:00000000000081BF                 db  78h ; x
.eh_frame:00000000000081C0                 db  42h ; B
.eh_frame:00000000000081C1                 db  0Eh
.eh_frame:00000000000081C2                 db  80h
.eh_frame:00000000000081C3                 db    1
.eh_frame:00000000000081C4                 db  59h ; Y
.eh_frame:00000000000081C5                 db  0Eh
.eh_frame:00000000000081C6                 db  60h ; `
.eh_frame:00000000000081C7                 db    2
.eh_frame:00000000000081C8                 db  40h ; @
.eh_frame:00000000000081C9                 db  0Eh
.eh_frame:00000000000081CA                 db  68h ; h
.eh_frame:00000000000081CB                 db  4Bh ; K
.eh_frame:00000000000081CC                 db  0Eh
.eh_frame:00000000000081CD                 db  70h ; p
.eh_frame:00000000000081CE                 db  43h ; C
.eh_frame:00000000000081CF                 db  0Eh
.eh_frame:00000000000081D0                 db  78h ; x
.eh_frame:00000000000081D1                 db  45h ; E
.eh_frame:00000000000081D2                 db  0Eh
.eh_frame:00000000000081D3                 db  80h
.eh_frame:00000000000081D4                 db    1
.eh_frame:00000000000081D5                 db  5Eh ; ^
.eh_frame:00000000000081D6                 db  0Eh
.eh_frame:00000000000081D7                 db  60h ; `
.eh_frame:00000000000081D8                 db  4Ch ; L
.eh_frame:00000000000081D9                 db  0Ah
.eh_frame:00000000000081DA                 db  0Eh
.eh_frame:00000000000081DB                 db  38h ; 8
.eh_frame:00000000000081DC                 db  44h ; D
.eh_frame:00000000000081DD                 db  0Eh
.eh_frame:00000000000081DE                 db  30h ; 0
.eh_frame:00000000000081DF                 db  41h ; A
.eh_frame:00000000000081E0                 db  0Eh
.eh_frame:00000000000081E1                 db  28h ; (
.eh_frame:00000000000081E2                 db  42h ; B
.eh_frame:00000000000081E3                 db  0Eh
.eh_frame:00000000000081E4                 db  20h
.eh_frame:00000000000081E5                 db  42h ; B
.eh_frame:00000000000081E6                 db  0Eh
.eh_frame:00000000000081E7                 db  18h
.eh_frame:00000000000081E8                 db  42h ; B
.eh_frame:00000000000081E9                 db  0Eh
.eh_frame:00000000000081EA                 db  10h
.eh_frame:00000000000081EB                 db  42h ; B
.eh_frame:00000000000081EC                 db  0Eh
.eh_frame:00000000000081ED                 db    8
.eh_frame:00000000000081EE                 db  46h ; F
.eh_frame:00000000000081EF                 db  0Bh
.eh_frame:00000000000081F0                 db  28h ; (
.eh_frame:00000000000081F1                 db    0
.eh_frame:00000000000081F2                 db    0
.eh_frame:00000000000081F3                 db    0
.eh_frame:00000000000081F4                 db  0Ch
.eh_frame:00000000000081F5                 db    3
.eh_frame:00000000000081F6                 db    0
.eh_frame:00000000000081F7                 db    0
.eh_frame:00000000000081F8                 db  38h ; 8
.eh_frame:00000000000081F9                 db 0B5h
.eh_frame:00000000000081FA                 db 0FFh
.eh_frame:00000000000081FB                 db 0FFh
.eh_frame:00000000000081FC                 db  36h ; 6
.eh_frame:00000000000081FD                 db    0
.eh_frame:00000000000081FE                 db    0
.eh_frame:00000000000081FF                 db    0
.eh_frame:0000000000008200                 db    0
.eh_frame:0000000000008201                 db  42h ; B
.eh_frame:0000000000008202                 db  0Eh
.eh_frame:0000000000008203                 db  10h
.eh_frame:0000000000008204                 db  8Ch
.eh_frame:0000000000008205                 db    2
.eh_frame:0000000000008206                 db  41h ; A
.eh_frame:0000000000008207                 db  0Eh
.eh_frame:0000000000008208                 db  18h
.eh_frame:0000000000008209                 db  86h
.eh_frame:000000000000820A                 db    3
.eh_frame:000000000000820B                 db  41h ; A
.eh_frame:000000000000820C                 db  0Eh
.eh_frame:000000000000820D                 db  20h
.eh_frame:000000000000820E                 db  83h
.eh_frame:000000000000820F                 db    4
.eh_frame:0000000000008210                 db  6Eh ; n
.eh_frame:0000000000008211                 db  0Eh
.eh_frame:0000000000008212                 db  18h
.eh_frame:0000000000008213                 db  41h ; A
.eh_frame:0000000000008214                 db  0Eh
.eh_frame:0000000000008215                 db  10h
.eh_frame:0000000000008216                 db  42h ; B
.eh_frame:0000000000008217                 db  0Eh
.eh_frame:0000000000008218                 db    8
.eh_frame:0000000000008219                 db    0
.eh_frame:000000000000821A                 db    0
.eh_frame:000000000000821B                 db    0
.eh_frame:000000000000821C                 db  10h
.eh_frame:000000000000821D                 db    0
.eh_frame:000000000000821E                 db    0
.eh_frame:000000000000821F                 db    0
.eh_frame:0000000000008220                 db  38h ; 8
.eh_frame:0000000000008221                 db    3
.eh_frame:0000000000008222                 db    0
.eh_frame:0000000000008223                 db    0
.eh_frame:0000000000008224                 db  4Ch ; L
.eh_frame:0000000000008225                 db 0B5h
.eh_frame:0000000000008226                 db 0FFh
.eh_frame:0000000000008227                 db 0FFh
.eh_frame:0000000000008228                 db  11h
.eh_frame:0000000000008229                 db    0
.eh_frame:000000000000822A                 db    0
.eh_frame:000000000000822B                 db    0
.eh_frame:000000000000822C                 db    0
.eh_frame:000000000000822D                 db    0
.eh_frame:000000000000822E                 db    0
.eh_frame:000000000000822F                 db    0
.eh_frame:0000000000008230                 db  10h
.eh_frame:0000000000008231                 db    0
.eh_frame:0000000000008232                 db    0
.eh_frame:0000000000008233                 db    0
.eh_frame:0000000000008234                 db  4Ch ; L
.eh_frame:0000000000008235                 db    3
.eh_frame:0000000000008236                 db    0
.eh_frame:0000000000008237                 db    0
.eh_frame:0000000000008238                 db  58h ; X
.eh_frame:0000000000008239                 db 0B5h
.eh_frame:000000000000823A                 db 0FFh
.eh_frame:000000000000823B                 db 0FFh
.eh_frame:000000000000823C                 db  11h
.eh_frame:000000000000823D                 db    0
.eh_frame:000000000000823E                 db    0
.eh_frame:000000000000823F                 db    0
.eh_frame:0000000000008240                 db    0
.eh_frame:0000000000008241                 db    0
.eh_frame:0000000000008242                 db    0
.eh_frame:0000000000008243                 db    0
.eh_frame:0000000000008244                 db  10h
.eh_frame:0000000000008245                 db    0
.eh_frame:0000000000008246                 db    0
.eh_frame:0000000000008247                 db    0
.eh_frame:0000000000008248                 db  60h ; `
.eh_frame:0000000000008249                 db    3
.eh_frame:000000000000824A                 db    0
.eh_frame:000000000000824B                 db    0
.eh_frame:000000000000824C                 db  64h ; d
.eh_frame:000000000000824D                 db 0B5h
.eh_frame:000000000000824E                 db 0FFh
.eh_frame:000000000000824F                 db 0FFh
.eh_frame:0000000000008250                 db  35h ; 5
.eh_frame:0000000000008251                 db    0
.eh_frame:0000000000008252                 db    0
.eh_frame:0000000000008253                 db    0
.eh_frame:0000000000008254                 db    0
.eh_frame:0000000000008255                 db    0
.eh_frame:0000000000008256                 db    0
.eh_frame:0000000000008257                 db    0
.eh_frame:0000000000008258                 db  10h
.eh_frame:0000000000008259                 db    0
.eh_frame:000000000000825A                 db    0
.eh_frame:000000000000825B                 db    0
.eh_frame:000000000000825C                 db  74h ; t
.eh_frame:000000000000825D                 db    3
.eh_frame:000000000000825E                 db    0
.eh_frame:000000000000825F                 db    0
.eh_frame:0000000000008260                 db  90h
.eh_frame:0000000000008261                 db 0B5h
.eh_frame:0000000000008262                 db 0FFh
.eh_frame:0000000000008263                 db 0FFh
.eh_frame:0000000000008264                 db  15h
.eh_frame:0000000000008265                 db    0
.eh_frame:0000000000008266                 db    0
.eh_frame:0000000000008267                 db    0
.eh_frame:0000000000008268                 db    0
.eh_frame:0000000000008269                 db    0
.eh_frame:000000000000826A                 db    0
.eh_frame:000000000000826B                 db    0
.eh_frame:000000000000826C                 db  10h
.eh_frame:000000000000826D                 db    0
.eh_frame:000000000000826E                 db    0
.eh_frame:000000000000826F                 db    0
.eh_frame:0000000000008270                 db  88h
.eh_frame:0000000000008271                 db    3
.eh_frame:0000000000008272                 db    0
.eh_frame:0000000000008273                 db    0
.eh_frame:0000000000008274                 db  9Ch
.eh_frame:0000000000008275                 db 0B5h
.eh_frame:0000000000008276                 db 0FFh
.eh_frame:0000000000008277                 db 0FFh
.eh_frame:0000000000008278                 db  30h ; 0
.eh_frame:0000000000008279                 db    0
.eh_frame:000000000000827A                 db    0
.eh_frame:000000000000827B                 db    0
.eh_frame:000000000000827C                 db    0
.eh_frame:000000000000827D                 db  6Bh ; k
.eh_frame:000000000000827E                 db  0Eh
.eh_frame:000000000000827F                 db  10h
.eh_frame:0000000000008280                 db  50h ; P
.eh_frame:0000000000008281                 db    0
.eh_frame:0000000000008282                 db    0
.eh_frame:0000000000008283                 db    0
.eh_frame:0000000000008284                 db  9Ch
.eh_frame:0000000000008285                 db    3
.eh_frame:0000000000008286                 db    0
.eh_frame:0000000000008287                 db    0
.eh_frame:0000000000008288                 db 0B8h
.eh_frame:0000000000008289                 db 0B5h
.eh_frame:000000000000828A                 db 0FFh
.eh_frame:000000000000828B                 db 0FFh
.eh_frame:000000000000828C                 db  74h ; t
.eh_frame:000000000000828D                 db    0
.eh_frame:000000000000828E                 db    0
.eh_frame:000000000000828F                 db    0
.eh_frame:0000000000008290                 db    0
.eh_frame:0000000000008291                 db  42h ; B
.eh_frame:0000000000008292                 db  0Eh
.eh_frame:0000000000008293                 db  10h
.eh_frame:0000000000008294                 db  8Fh
.eh_frame:0000000000008295                 db    2
.eh_frame:0000000000008296                 db  42h ; B
.eh_frame:0000000000008297                 db  0Eh
.eh_frame:0000000000008298                 db  18h
.eh_frame:0000000000008299                 db  8Eh
.eh_frame:000000000000829A                 db    3
.eh_frame:000000000000829B                 db  49h ; I
.eh_frame:000000000000829C                 db  0Eh
.eh_frame:000000000000829D                 db  20h
.eh_frame:000000000000829E                 db  8Dh
.eh_frame:000000000000829F                 db    4
.eh_frame:00000000000082A0                 db  42h ; B
.eh_frame:00000000000082A1                 db  0Eh
.eh_frame:00000000000082A2                 db  28h ; (
.eh_frame:00000000000082A3                 db  8Ch
.eh_frame:00000000000082A4                 db    5
.eh_frame:00000000000082A5                 db  44h ; D
.eh_frame:00000000000082A6                 db  0Eh
.eh_frame:00000000000082A7                 db  30h ; 0
.eh_frame:00000000000082A8                 db  86h
.eh_frame:00000000000082A9                 db    6
.eh_frame:00000000000082AA                 db  41h ; A
.eh_frame:00000000000082AB                 db  0Eh
.eh_frame:00000000000082AC                 db  38h ; 8
.eh_frame:00000000000082AD                 db  83h
.eh_frame:00000000000082AE                 db    7
.eh_frame:00000000000082AF                 db  4Dh ; M
.eh_frame:00000000000082B0                 db  0Eh
.eh_frame:00000000000082B1                 db  50h ; P
.eh_frame:00000000000082B2                 db  5Fh ; _
.eh_frame:00000000000082B3                 db  0Eh
.eh_frame:00000000000082B4                 db  58h ; X
.eh_frame:00000000000082B5                 db  47h ; G
.eh_frame:00000000000082B6                 db  0Eh
.eh_frame:00000000000082B7                 db  60h ; `
.eh_frame:00000000000082B8                 db  46h ; F
.eh_frame:00000000000082B9                 db  0Eh
.eh_frame:00000000000082BA                 db  68h ; h
.eh_frame:00000000000082BB                 db  44h ; D
.eh_frame:00000000000082BC                 db  0Eh
.eh_frame:00000000000082BD                 db  70h ; p
.eh_frame:00000000000082BE                 db  58h ; X
.eh_frame:00000000000082BF                 db  0Eh
.eh_frame:00000000000082C0                 db  38h ; 8
.eh_frame:00000000000082C1                 db  41h ; A
.eh_frame:00000000000082C2                 db  0Eh
.eh_frame:00000000000082C3                 db  30h ; 0
.eh_frame:00000000000082C4                 db  41h ; A
.eh_frame:00000000000082C5                 db  0Eh
.eh_frame:00000000000082C6                 db  28h ; (
.eh_frame:00000000000082C7                 db  42h ; B
.eh_frame:00000000000082C8                 db  0Eh
.eh_frame:00000000000082C9                 db  20h
.eh_frame:00000000000082CA                 db  42h ; B
.eh_frame:00000000000082CB                 db  0Eh
.eh_frame:00000000000082CC                 db  18h
.eh_frame:00000000000082CD                 db  42h ; B
.eh_frame:00000000000082CE                 db  0Eh
.eh_frame:00000000000082CF                 db  10h
.eh_frame:00000000000082D0                 db  42h ; B
.eh_frame:00000000000082D1                 db  0Eh
.eh_frame:00000000000082D2                 db    8
.eh_frame:00000000000082D3                 db    0
.eh_frame:00000000000082D4                 db  68h ; h
.eh_frame:00000000000082D5                 db    0
.eh_frame:00000000000082D6                 db    0
.eh_frame:00000000000082D7                 db    0
.eh_frame:00000000000082D8                 db 0F0h
.eh_frame:00000000000082D9                 db    3
.eh_frame:00000000000082DA                 db    0
.eh_frame:00000000000082DB                 db    0
.eh_frame:00000000000082DC                 db 0E4h
.eh_frame:00000000000082DD                 db 0B5h
.eh_frame:00000000000082DE                 db 0FFh
.eh_frame:00000000000082DF                 db 0FFh
.eh_frame:00000000000082E0                 db 0E3h
.eh_frame:00000000000082E1                 db    0
.eh_frame:00000000000082E2                 db    0
.eh_frame:00000000000082E3                 db    0
.eh_frame:00000000000082E4                 db    0
.eh_frame:00000000000082E5                 db  42h ; B
.eh_frame:00000000000082E6                 db  0Eh
.eh_frame:00000000000082E7                 db  10h
.eh_frame:00000000000082E8                 db  8Fh
.eh_frame:00000000000082E9                 db    2
.eh_frame:00000000000082EA                 db  42h ; B
.eh_frame:00000000000082EB                 db  0Eh
.eh_frame:00000000000082EC                 db  18h
.eh_frame:00000000000082ED                 db  8Eh
.eh_frame:00000000000082EE                 db    3
.eh_frame:00000000000082EF                 db  49h ; I
.eh_frame:00000000000082F0                 db  0Eh
.eh_frame:00000000000082F1                 db  20h
.eh_frame:00000000000082F2                 db  8Dh
.eh_frame:00000000000082F3                 db    4
.eh_frame:00000000000082F4                 db  42h ; B
.eh_frame:00000000000082F5                 db  0Eh
.eh_frame:00000000000082F6                 db  28h ; (
.eh_frame:00000000000082F7                 db  8Ch
.eh_frame:00000000000082F8                 db    5
.eh_frame:00000000000082F9                 db  44h ; D
.eh_frame:00000000000082FA                 db  0Eh
.eh_frame:00000000000082FB                 db  30h ; 0
.eh_frame:00000000000082FC                 db  86h
.eh_frame:00000000000082FD                 db    6
.eh_frame:00000000000082FE                 db  41h ; A
.eh_frame:00000000000082FF                 db  0Eh
.eh_frame:0000000000008300                 db  38h ; 8
.eh_frame:0000000000008301                 db  83h
.eh_frame:0000000000008302                 db    7
.eh_frame:0000000000008303                 db  4Dh ; M
.eh_frame:0000000000008304                 db  0Eh
.eh_frame:0000000000008305                 db  70h ; p
.eh_frame:0000000000008306                 db  65h ; e
.eh_frame:0000000000008307                 db  0Eh
.eh_frame:0000000000008308                 db  78h ; x
.eh_frame:0000000000008309                 db  4Dh ; M
.eh_frame:000000000000830A                 db  0Eh
.eh_frame:000000000000830B                 db  80h
.eh_frame:000000000000830C                 db    1
.eh_frame:000000000000830D                 db  46h ; F
.eh_frame:000000000000830E                 db  0Eh
.eh_frame:000000000000830F                 db  88h
.eh_frame:0000000000008310                 db    1
.eh_frame:0000000000008311                 db  42h ; B
.eh_frame:0000000000008312                 db  0Eh
.eh_frame:0000000000008313                 db  90h
.eh_frame:0000000000008314                 db    1
.eh_frame:0000000000008315                 db  5Eh ; ^
.eh_frame:0000000000008316                 db  0Eh
.eh_frame:0000000000008317                 db  70h ; p
.eh_frame:0000000000008318                 db  56h ; V
.eh_frame:0000000000008319                 db  0Eh
.eh_frame:000000000000831A                 db  78h ; x
.eh_frame:000000000000831B                 db  43h ; C
.eh_frame:000000000000831C                 db  0Eh
.eh_frame:000000000000831D                 db  80h
.eh_frame:000000000000831E                 db    1
.eh_frame:000000000000831F                 db  43h ; C
.eh_frame:0000000000008320                 db  0Eh
.eh_frame:0000000000008321                 db  88h
.eh_frame:0000000000008322                 db    1
.eh_frame:0000000000008323                 db  56h ; V
.eh_frame:0000000000008324                 db  0Eh
.eh_frame:0000000000008325                 db  90h
.eh_frame:0000000000008326                 db    1
.eh_frame:0000000000008327                 db  52h ; R
.eh_frame:0000000000008328                 db  0Eh
.eh_frame:0000000000008329                 db  70h ; p
.eh_frame:000000000000832A                 db  5Bh ; [
.eh_frame:000000000000832B                 db  0Eh
.eh_frame:000000000000832C                 db  38h ; 8
.eh_frame:000000000000832D                 db  41h ; A
.eh_frame:000000000000832E                 db  0Eh
.eh_frame:000000000000832F                 db  30h ; 0
.eh_frame:0000000000008330                 db  41h ; A
.eh_frame:0000000000008331                 db  0Eh
.eh_frame:0000000000008332                 db  28h ; (
.eh_frame:0000000000008333                 db  42h ; B
.eh_frame:0000000000008334                 db  0Eh
.eh_frame:0000000000008335                 db  20h
.eh_frame:0000000000008336                 db  42h ; B
.eh_frame:0000000000008337                 db  0Eh
.eh_frame:0000000000008338                 db  18h
.eh_frame:0000000000008339                 db  42h ; B
.eh_frame:000000000000833A                 db  0Eh
.eh_frame:000000000000833B                 db  10h
.eh_frame:000000000000833C                 db  42h ; B
.eh_frame:000000000000833D                 db  0Eh
.eh_frame:000000000000833E                 db    8
.eh_frame:000000000000833F                 db    0
.eh_frame:0000000000008340                 db  10h
.eh_frame:0000000000008341                 db    0
.eh_frame:0000000000008342                 db    0
.eh_frame:0000000000008343                 db    0
.eh_frame:0000000000008344                 db  5Ch ; \
.eh_frame:0000000000008345                 db    4
.eh_frame:0000000000008346                 db    0
.eh_frame:0000000000008347                 db    0
.eh_frame:0000000000008348                 db  68h ; h
.eh_frame:0000000000008349                 db 0B6h
.eh_frame:000000000000834A                 db 0FFh
.eh_frame:000000000000834B                 db 0FFh
.eh_frame:000000000000834C                 db  0Ah
.eh_frame:000000000000834D                 db    0
.eh_frame:000000000000834E                 db    0
.eh_frame:000000000000834F                 db    0
.eh_frame:0000000000008350                 db    0
.eh_frame:0000000000008351                 db    0
.eh_frame:0000000000008352                 db    0
.eh_frame:0000000000008353                 db    0
.eh_frame:0000000000008354                 db  28h ; (
.eh_frame:0000000000008355                 db    0
.eh_frame:0000000000008356                 db    0
.eh_frame:0000000000008357                 db    0
.eh_frame:0000000000008358                 db  70h ; p
.eh_frame:0000000000008359                 db    4
.eh_frame:000000000000835A                 db    0
.eh_frame:000000000000835B                 db    0
.eh_frame:000000000000835C                 db  64h ; d
.eh_frame:000000000000835D                 db 0B6h
.eh_frame:000000000000835E                 db 0FFh
.eh_frame:000000000000835F                 db 0FFh
.eh_frame:0000000000008360                 db  93h
.eh_frame:0000000000008361                 db    0
.eh_frame:0000000000008362                 db    0
.eh_frame:0000000000008363                 db    0
.eh_frame:0000000000008364                 db    0
.eh_frame:0000000000008365                 db  48h ; H
.eh_frame:0000000000008366                 db  0Eh
.eh_frame:0000000000008367                 db  10h
.eh_frame:0000000000008368                 db  8Ch
.eh_frame:0000000000008369                 db    2
.eh_frame:000000000000836A                 db  48h ; H
.eh_frame:000000000000836B                 db  0Eh
.eh_frame:000000000000836C                 db  18h
.eh_frame:000000000000836D                 db  86h
.eh_frame:000000000000836E                 db    3
.eh_frame:000000000000836F                 db  41h ; A
.eh_frame:0000000000008370                 db  0Eh
.eh_frame:0000000000008371                 db  20h
.eh_frame:0000000000008372                 db  83h
.eh_frame:0000000000008373                 db    4
.eh_frame:0000000000008374                 db    2
.eh_frame:0000000000008375                 db  74h ; t
.eh_frame:0000000000008376                 db  0Eh
.eh_frame:0000000000008377                 db  18h
.eh_frame:0000000000008378                 db  4Bh ; K
.eh_frame:0000000000008379                 db  0Eh
.eh_frame:000000000000837A                 db  10h
.eh_frame:000000000000837B                 db  42h ; B
.eh_frame:000000000000837C                 db  0Eh
.eh_frame:000000000000837D                 db    8
.eh_frame:000000000000837E                 db    0
.eh_frame:000000000000837F                 db    0
.eh_frame:0000000000008380                 db  10h
.eh_frame:0000000000008381                 db    0
.eh_frame:0000000000008382                 db    0
.eh_frame:0000000000008383                 db    0
.eh_frame:0000000000008384                 db  9Ch
.eh_frame:0000000000008385                 db    4
.eh_frame:0000000000008386                 db    0
.eh_frame:0000000000008387                 db    0
.eh_frame:0000000000008388                 db 0D8h
.eh_frame:0000000000008389                 db 0B6h
.eh_frame:000000000000838A                 db 0FFh
.eh_frame:000000000000838B                 db 0FFh
.eh_frame:000000000000838C                 db  13h
.eh_frame:000000000000838D                 db    0
.eh_frame:000000000000838E                 db    0
.eh_frame:000000000000838F                 db    0
.eh_frame:0000000000008390                 db    0
.eh_frame:0000000000008391                 db    0
.eh_frame:0000000000008392                 db    0
.eh_frame:0000000000008393                 db    0
.eh_frame:0000000000008394                 db  10h
.eh_frame:0000000000008395                 db    0
.eh_frame:0000000000008396                 db    0
.eh_frame:0000000000008397                 db    0
.eh_frame:0000000000008398                 db 0B0h
.eh_frame:0000000000008399                 db    4
.eh_frame:000000000000839A                 db    0
.eh_frame:000000000000839B                 db    0
.eh_frame:000000000000839C                 db 0E4h
.eh_frame:000000000000839D                 db 0B6h
.eh_frame:000000000000839E                 db 0FFh
.eh_frame:000000000000839F                 db 0FFh
.eh_frame:00000000000083A0                 db  0Ch
.eh_frame:00000000000083A1                 db    0
.eh_frame:00000000000083A2                 db    0
.eh_frame:00000000000083A3                 db    0
.eh_frame:00000000000083A4                 db    0
.eh_frame:00000000000083A5                 db    0
.eh_frame:00000000000083A6                 db    0
.eh_frame:00000000000083A7                 db    0
.eh_frame:00000000000083A8                 db  10h
.eh_frame:00000000000083A9                 db    0
.eh_frame:00000000000083AA                 db    0
.eh_frame:00000000000083AB                 db    0
.eh_frame:00000000000083AC                 db 0C4h
.eh_frame:00000000000083AD                 db    4
.eh_frame:00000000000083AE                 db    0
.eh_frame:00000000000083AF                 db    0
.eh_frame:00000000000083B0                 db 0E0h
.eh_frame:00000000000083B1                 db 0B6h
.eh_frame:00000000000083B2                 db 0FFh
.eh_frame:00000000000083B3                 db 0FFh
.eh_frame:00000000000083B4                 db  18h
.eh_frame:00000000000083B5                 db    0
.eh_frame:00000000000083B6                 db    0
.eh_frame:00000000000083B7                 db    0
.eh_frame:00000000000083B8                 db    0
.eh_frame:00000000000083B9                 db    0
.eh_frame:00000000000083BA                 db    0
.eh_frame:00000000000083BB                 db    0
.eh_frame:00000000000083BC                 db  10h
.eh_frame:00000000000083BD                 db    0
.eh_frame:00000000000083BE                 db    0
.eh_frame:00000000000083BF                 db    0
.eh_frame:00000000000083C0                 db 0D8h
.eh_frame:00000000000083C1                 db    4
.eh_frame:00000000000083C2                 db    0
.eh_frame:00000000000083C3                 db    0
.eh_frame:00000000000083C4                 db 0ECh
.eh_frame:00000000000083C5                 db 0B6h
.eh_frame:00000000000083C6                 db 0FFh
.eh_frame:00000000000083C7                 db 0FFh
.eh_frame:00000000000083C8                 db  14h
.eh_frame:00000000000083C9                 db    0
.eh_frame:00000000000083CA                 db    0
.eh_frame:00000000000083CB                 db    0
.eh_frame:00000000000083CC                 db    0
.eh_frame:00000000000083CD                 db    0
.eh_frame:00000000000083CE                 db    0
.eh_frame:00000000000083CF                 db    0
.eh_frame:00000000000083D0                 db  18h
.eh_frame:00000000000083D1                 db    0
.eh_frame:00000000000083D2                 db    0
.eh_frame:00000000000083D3                 db    0
.eh_frame:00000000000083D4                 db 0ECh
.eh_frame:00000000000083D5                 db    4
.eh_frame:00000000000083D6                 db    0
.eh_frame:00000000000083D7                 db    0
.eh_frame:00000000000083D8                 db 0F8h
.eh_frame:00000000000083D9                 db 0B6h
.eh_frame:00000000000083DA                 db 0FFh
.eh_frame:00000000000083DB                 db 0FFh
.eh_frame:00000000000083DC                 db  8Eh
.eh_frame:00000000000083DD                 db    0
.eh_frame:00000000000083DE                 db    0
.eh_frame:00000000000083DF                 db    0
.eh_frame:00000000000083E0                 db    0
.eh_frame:00000000000083E1                 db  44h ; D
.eh_frame:00000000000083E2                 db  0Eh
.eh_frame:00000000000083E3                 db  50h ; P
.eh_frame:00000000000083E4                 db    2
.eh_frame:00000000000083E5                 db  7Fh ; 
.eh_frame:00000000000083E6                 db  0Ah
.eh_frame:00000000000083E7                 db  0Eh
.eh_frame:00000000000083E8                 db    8
.eh_frame:00000000000083E9                 db  41h ; A
.eh_frame:00000000000083EA                 db  0Bh
.eh_frame:00000000000083EB                 db    0
.eh_frame:00000000000083EC                 db  18h
.eh_frame:00000000000083ED                 db    0
.eh_frame:00000000000083EE                 db    0
.eh_frame:00000000000083EF                 db    0
.eh_frame:00000000000083F0                 db    8
.eh_frame:00000000000083F1                 db    5
.eh_frame:00000000000083F2                 db    0
.eh_frame:00000000000083F3                 db    0
.eh_frame:00000000000083F4                 db  6Ch ; l
.eh_frame:00000000000083F5                 db 0B7h
.eh_frame:00000000000083F6                 db 0FFh
.eh_frame:00000000000083F7                 db 0FFh
.eh_frame:00000000000083F8                 db  8Ah
.eh_frame:00000000000083F9                 db    0
.eh_frame:00000000000083FA                 db    0
.eh_frame:00000000000083FB                 db    0
.eh_frame:00000000000083FC                 db    0
.eh_frame:00000000000083FD                 db  44h ; D
.eh_frame:00000000000083FE                 db  0Eh
.eh_frame:00000000000083FF                 db  50h ; P
.eh_frame:0000000000008400                 db    2
.eh_frame:0000000000008401                 db  7Bh ; {
.eh_frame:0000000000008402                 db  0Ah
.eh_frame:0000000000008403                 db  0Eh
.eh_frame:0000000000008404                 db    8
.eh_frame:0000000000008405                 db  41h ; A
.eh_frame:0000000000008406                 db  0Bh
.eh_frame:0000000000008407                 db    0
.eh_frame:0000000000008408                 db  10h
.eh_frame:0000000000008409                 db    0
.eh_frame:000000000000840A                 db    0
.eh_frame:000000000000840B                 db    0
.eh_frame:000000000000840C                 db  24h ; $
.eh_frame:000000000000840D                 db    5
.eh_frame:000000000000840E                 db    0
.eh_frame:000000000000840F                 db    0
.eh_frame:0000000000008410                 db 0E0h
.eh_frame:0000000000008411                 db 0B7h
.eh_frame:0000000000008412                 db 0FFh
.eh_frame:0000000000008413                 db 0FFh
.eh_frame:0000000000008414                 db  0Ch
.eh_frame:0000000000008415                 db    0
.eh_frame:0000000000008416                 db    0
.eh_frame:0000000000008417                 db    0
.eh_frame:0000000000008418                 db    0
.eh_frame:0000000000008419                 db    0
.eh_frame:000000000000841A                 db    0
.eh_frame:000000000000841B                 db    0
.eh_frame:000000000000841C                 db  10h
.eh_frame:000000000000841D                 db    0
.eh_frame:000000000000841E                 db    0
.eh_frame:000000000000841F                 db    0
.eh_frame:0000000000008420                 db  38h ; 8
.eh_frame:0000000000008421                 db    5
.eh_frame:0000000000008422                 db    0
.eh_frame:0000000000008423                 db    0
.eh_frame:0000000000008424                 db 0DCh
.eh_frame:0000000000008425                 db 0B7h
.eh_frame:0000000000008426                 db 0FFh
.eh_frame:0000000000008427                 db 0FFh
.eh_frame:0000000000008428                 db  0Fh
.eh_frame:0000000000008429                 db    0
.eh_frame:000000000000842A                 db    0
.eh_frame:000000000000842B                 db    0
.eh_frame:000000000000842C                 db    0
.eh_frame:000000000000842D                 db    0
.eh_frame:000000000000842E                 db    0
.eh_frame:000000000000842F                 db    0
.eh_frame:0000000000008430                 db  18h
.eh_frame:0000000000008431                 db    0
.eh_frame:0000000000008432                 db    0
.eh_frame:0000000000008433                 db    0
.eh_frame:0000000000008434                 db  4Ch ; L
.eh_frame:0000000000008435                 db    5
.eh_frame:0000000000008436                 db    0
.eh_frame:0000000000008437                 db    0
.eh_frame:0000000000008438                 db 0D8h
.eh_frame:0000000000008439                 db 0B7h
.eh_frame:000000000000843A                 db 0FFh
.eh_frame:000000000000843B                 db 0FFh
.eh_frame:000000000000843C                 db  98h
.eh_frame:000000000000843D                 db    0
.eh_frame:000000000000843E                 db    0
.eh_frame:000000000000843F                 db    0
.eh_frame:0000000000008440                 db    0
.eh_frame:0000000000008441                 db  44h ; D
.eh_frame:0000000000008442                 db  0Eh
.eh_frame:0000000000008443                 db  50h ; P
.eh_frame:0000000000008444                 db    2
.eh_frame:0000000000008445                 db  8Eh
.eh_frame:0000000000008446                 db  0Ah
.eh_frame:0000000000008447                 db  0Eh
.eh_frame:0000000000008448                 db    8
.eh_frame:0000000000008449                 db  41h ; A
.eh_frame:000000000000844A                 db  0Bh
.eh_frame:000000000000844B                 db    0
.eh_frame:000000000000844C                 db  10h
.eh_frame:000000000000844D                 db    0
.eh_frame:000000000000844E                 db    0
.eh_frame:000000000000844F                 db    0
.eh_frame:0000000000008450                 db  68h ; h
.eh_frame:0000000000008451                 db    5
.eh_frame:0000000000008452                 db    0
.eh_frame:0000000000008453                 db    0
.eh_frame:0000000000008454                 db  5Ch ; \
.eh_frame:0000000000008455                 db 0B8h
.eh_frame:0000000000008456                 db 0FFh
.eh_frame:0000000000008457                 db 0FFh
.eh_frame:0000000000008458                 db  10h
.eh_frame:0000000000008459                 db    0
.eh_frame:000000000000845A                 db    0
.eh_frame:000000000000845B                 db    0
.eh_frame:000000000000845C                 db    0
.eh_frame:000000000000845D                 db    0
.eh_frame:000000000000845E                 db    0
.eh_frame:000000000000845F                 db    0
.eh_frame:0000000000008460                 db  10h
.eh_frame:0000000000008461                 db    0
.eh_frame:0000000000008462                 db    0
.eh_frame:0000000000008463                 db    0
.eh_frame:0000000000008464                 db  7Ch ; |
.eh_frame:0000000000008465                 db    5
.eh_frame:0000000000008466                 db    0
.eh_frame:0000000000008467                 db    0
.eh_frame:0000000000008468                 db  58h ; X
.eh_frame:0000000000008469                 db 0B8h
.eh_frame:000000000000846A                 db 0FFh
.eh_frame:000000000000846B                 db 0FFh
.eh_frame:000000000000846C                 db  11h
.eh_frame:000000000000846D                 db    0
.eh_frame:000000000000846E                 db    0
.eh_frame:000000000000846F                 db    0
.eh_frame:0000000000008470                 db    0
.eh_frame:0000000000008471                 db    0
.eh_frame:0000000000008472                 db    0
.eh_frame:0000000000008473                 db    0
.eh_frame:0000000000008474                 db  10h
.eh_frame:0000000000008475                 db    0
.eh_frame:0000000000008476                 db    0
.eh_frame:0000000000008477                 db    0
.eh_frame:0000000000008478                 db  90h
.eh_frame:0000000000008479                 db    5
.eh_frame:000000000000847A                 db    0
.eh_frame:000000000000847B                 db    0
.eh_frame:000000000000847C                 db  64h ; d
.eh_frame:000000000000847D                 db 0B8h
.eh_frame:000000000000847E                 db 0FFh
.eh_frame:000000000000847F                 db 0FFh
.eh_frame:0000000000008480                 db  0Ah
.eh_frame:0000000000008481                 db    0
.eh_frame:0000000000008482                 db    0
.eh_frame:0000000000008483                 db    0
.eh_frame:0000000000008484                 db    0
.eh_frame:0000000000008485                 db    0
.eh_frame:0000000000008486                 db    0
.eh_frame:0000000000008487                 db    0
.eh_frame:0000000000008488                 db  18h
.eh_frame:0000000000008489                 db    0
.eh_frame:000000000000848A                 db    0
.eh_frame:000000000000848B                 db    0
.eh_frame:000000000000848C                 db 0A4h
.eh_frame:000000000000848D                 db    5
.eh_frame:000000000000848E                 db    0
.eh_frame:000000000000848F                 db    0
.eh_frame:0000000000008490                 db  60h ; `
.eh_frame:0000000000008491                 db 0B8h
.eh_frame:0000000000008492                 db 0FFh
.eh_frame:0000000000008493                 db 0FFh
.eh_frame:0000000000008494                 db  8Eh
.eh_frame:0000000000008495                 db    0
.eh_frame:0000000000008496                 db    0
.eh_frame:0000000000008497                 db    0
.eh_frame:0000000000008498                 db    0
.eh_frame:0000000000008499                 db  44h ; D
.eh_frame:000000000000849A                 db  0Eh
.eh_frame:000000000000849B                 db  50h ; P
.eh_frame:000000000000849C                 db    2
.eh_frame:000000000000849D                 db  7Fh ; 
.eh_frame:000000000000849E                 db  0Ah
.eh_frame:000000000000849F                 db  0Eh
.eh_frame:00000000000084A0                 db    8
.eh_frame:00000000000084A1                 db  41h ; A
.eh_frame:00000000000084A2                 db  0Bh
.eh_frame:00000000000084A3                 db    0
.eh_frame:00000000000084A4                 db  18h
.eh_frame:00000000000084A5                 db    0
.eh_frame:00000000000084A6                 db    0
.eh_frame:00000000000084A7                 db    0
.eh_frame:00000000000084A8                 db 0C0h
.eh_frame:00000000000084A9                 db    5
.eh_frame:00000000000084AA                 db    0
.eh_frame:00000000000084AB                 db    0
.eh_frame:00000000000084AC                 db 0D4h
.eh_frame:00000000000084AD                 db 0B8h
.eh_frame:00000000000084AE                 db 0FFh
.eh_frame:00000000000084AF                 db 0FFh
.eh_frame:00000000000084B0                 db  91h
.eh_frame:00000000000084B1                 db    0
.eh_frame:00000000000084B2                 db    0
.eh_frame:00000000000084B3                 db    0
.eh_frame:00000000000084B4                 db    0
.eh_frame:00000000000084B5                 db  44h ; D
.eh_frame:00000000000084B6                 db  0Eh
.eh_frame:00000000000084B7                 db  50h ; P
.eh_frame:00000000000084B8                 db    2
.eh_frame:00000000000084B9                 db  82h
.eh_frame:00000000000084BA                 db  0Ah
.eh_frame:00000000000084BB                 db  0Eh
.eh_frame:00000000000084BC                 db    8
.eh_frame:00000000000084BD                 db  41h ; A
.eh_frame:00000000000084BE                 db  0Bh
.eh_frame:00000000000084BF                 db    0
.eh_frame:00000000000084C0                 db  10h
.eh_frame:00000000000084C1                 db    0
.eh_frame:00000000000084C2                 db    0
.eh_frame:00000000000084C3                 db    0
.eh_frame:00000000000084C4                 db 0DCh
.eh_frame:00000000000084C5                 db    5
.eh_frame:00000000000084C6                 db    0
.eh_frame:00000000000084C7                 db    0
.eh_frame:00000000000084C8                 db  58h ; X
.eh_frame:00000000000084C9                 db 0B9h
.eh_frame:00000000000084CA                 db 0FFh
.eh_frame:00000000000084CB                 db 0FFh
.eh_frame:00000000000084CC                 db  0Ch
.eh_frame:00000000000084CD                 db    0
.eh_frame:00000000000084CE                 db    0
.eh_frame:00000000000084CF                 db    0
.eh_frame:00000000000084D0                 db    0
.eh_frame:00000000000084D1                 db    0
.eh_frame:00000000000084D2                 db    0
.eh_frame:00000000000084D3                 db    0
.eh_frame:00000000000084D4                 db  10h
.eh_frame:00000000000084D5                 db    0
.eh_frame:00000000000084D6                 db    0
.eh_frame:00000000000084D7                 db    0
.eh_frame:00000000000084D8                 db 0F0h
.eh_frame:00000000000084D9                 db    5
.eh_frame:00000000000084DA                 db    0
.eh_frame:00000000000084DB                 db    0
.eh_frame:00000000000084DC                 db  54h ; T
.eh_frame:00000000000084DD                 db 0B9h
.eh_frame:00000000000084DE                 db 0FFh
.eh_frame:00000000000084DF                 db 0FFh
.eh_frame:00000000000084E0                 db  17h
.eh_frame:00000000000084E1                 db    0
.eh_frame:00000000000084E2                 db    0
.eh_frame:00000000000084E3                 db    0
.eh_frame:00000000000084E4                 db    0
.eh_frame:00000000000084E5                 db    0
.eh_frame:00000000000084E6                 db    0
.eh_frame:00000000000084E7                 db    0
.eh_frame:00000000000084E8                 db  10h
.eh_frame:00000000000084E9                 db    0
.eh_frame:00000000000084EA                 db    0
.eh_frame:00000000000084EB                 db    0
.eh_frame:00000000000084EC                 db    4
.eh_frame:00000000000084ED                 db    6
.eh_frame:00000000000084EE                 db    0
.eh_frame:00000000000084EF                 db    0
.eh_frame:00000000000084F0                 db  60h ; `
.eh_frame:00000000000084F1                 db 0B9h
.eh_frame:00000000000084F2                 db 0FFh
.eh_frame:00000000000084F3                 db 0FFh
.eh_frame:00000000000084F4                 db  13h
.eh_frame:00000000000084F5                 db    0
.eh_frame:00000000000084F6                 db    0
.eh_frame:00000000000084F7                 db    0
.eh_frame:00000000000084F8                 db    0
.eh_frame:00000000000084F9                 db    0
.eh_frame:00000000000084FA                 db    0
.eh_frame:00000000000084FB                 db    0
.eh_frame:00000000000084FC                 db  10h
.eh_frame:00000000000084FD                 db    0
.eh_frame:00000000000084FE                 db    0
.eh_frame:00000000000084FF                 db    0
.eh_frame:0000000000008500                 db  18h
.eh_frame:0000000000008501                 db    6
.eh_frame:0000000000008502                 db    0
.eh_frame:0000000000008503                 db    0
.eh_frame:0000000000008504                 db  6Ch ; l
.eh_frame:0000000000008505                 db 0B9h
.eh_frame:0000000000008506                 db 0FFh
.eh_frame:0000000000008507                 db 0FFh
.eh_frame:0000000000008508                 db  0Ch
.eh_frame:0000000000008509                 db    0
.eh_frame:000000000000850A                 db    0
.eh_frame:000000000000850B                 db    0
.eh_frame:000000000000850C                 db    0
.eh_frame:000000000000850D                 db    0
.eh_frame:000000000000850E                 db    0
.eh_frame:000000000000850F                 db    0
.eh_frame:0000000000008510                 db  10h
.eh_frame:0000000000008511                 db    0
.eh_frame:0000000000008512                 db    0
.eh_frame:0000000000008513                 db    0
.eh_frame:0000000000008514                 db  2Ch ; ,
.eh_frame:0000000000008515                 db    6
.eh_frame:0000000000008516                 db    0
.eh_frame:0000000000008517                 db    0
.eh_frame:0000000000008518                 db  68h ; h
.eh_frame:0000000000008519                 db 0B9h
.eh_frame:000000000000851A                 db 0FFh
.eh_frame:000000000000851B                 db 0FFh
.eh_frame:000000000000851C                 db  14h
.eh_frame:000000000000851D                 db    0
.eh_frame:000000000000851E                 db    0
.eh_frame:000000000000851F                 db    0
.eh_frame:0000000000008520                 db    0
.eh_frame:0000000000008521                 db    0
.eh_frame:0000000000008522                 db    0
.eh_frame:0000000000008523                 db    0
.eh_frame:0000000000008524                 db  10h
.eh_frame:0000000000008525                 db    0
.eh_frame:0000000000008526                 db    0
.eh_frame:0000000000008527                 db    0
.eh_frame:0000000000008528                 db  40h ; @
.eh_frame:0000000000008529                 db    6
.eh_frame:000000000000852A                 db    0
.eh_frame:000000000000852B                 db    0
.eh_frame:000000000000852C                 db  74h ; t
.eh_frame:000000000000852D                 db 0B9h
.eh_frame:000000000000852E                 db 0FFh
.eh_frame:000000000000852F                 db 0FFh
.eh_frame:0000000000008530                 db  13h
.eh_frame:0000000000008531                 db    0
.eh_frame:0000000000008532                 db    0
.eh_frame:0000000000008533                 db    0
.eh_frame:0000000000008534                 db    0
.eh_frame:0000000000008535                 db    0
.eh_frame:0000000000008536                 db    0
.eh_frame:0000000000008537                 db    0
.eh_frame:0000000000008538                 db  14h
.eh_frame:0000000000008539                 db    0
.eh_frame:000000000000853A                 db    0
.eh_frame:000000000000853B                 db    0
.eh_frame:000000000000853C                 db  54h ; T
.eh_frame:000000000000853D                 db    6
.eh_frame:000000000000853E                 db    0
.eh_frame:000000000000853F                 db    0
.eh_frame:0000000000008540                 db  80h
.eh_frame:0000000000008541                 db 0B9h
.eh_frame:0000000000008542                 db 0FFh
.eh_frame:0000000000008543                 db 0FFh
.eh_frame:0000000000008544                 db  18h
.eh_frame:0000000000008545                 db    0
.eh_frame:0000000000008546                 db    0
.eh_frame:0000000000008547                 db    0
.eh_frame:0000000000008548                 db    0
.eh_frame:0000000000008549                 db    0
.eh_frame:000000000000854A                 db    0
.eh_frame:000000000000854B                 db    0
.eh_frame:000000000000854C                 db    0
.eh_frame:000000000000854D                 db    0
.eh_frame:000000000000854E                 db    0
.eh_frame:000000000000854F                 db    0
.eh_frame:0000000000008550                 db  10h
.eh_frame:0000000000008551                 db    1
.eh_frame:0000000000008552                 db    0
.eh_frame:0000000000008553                 db    0
.eh_frame:0000000000008554                 db  6Ch ; l
.eh_frame:0000000000008555                 db    6
.eh_frame:0000000000008556                 db    0
.eh_frame:0000000000008557                 db    0
.eh_frame:0000000000008558                 db  88h
.eh_frame:0000000000008559                 db 0B9h
.eh_frame:000000000000855A                 db 0FFh
.eh_frame:000000000000855B                 db 0FFh
.eh_frame:000000000000855C                 db  17h
.eh_frame:000000000000855D                 db    4
.eh_frame:000000000000855E                 db    0
.eh_frame:000000000000855F                 db    0
.eh_frame:0000000000008560                 db    0
.eh_frame:0000000000008561                 db  42h ; B
.eh_frame:0000000000008562                 db  0Eh
.eh_frame:0000000000008563                 db  10h
.eh_frame:0000000000008564                 db  8Fh
.eh_frame:0000000000008565                 db    2
.eh_frame:0000000000008566                 db  42h ; B
.eh_frame:0000000000008567                 db  0Eh
.eh_frame:0000000000008568                 db  18h
.eh_frame:0000000000008569                 db  8Eh
.eh_frame:000000000000856A                 db    3
.eh_frame:000000000000856B                 db  42h ; B
.eh_frame:000000000000856C                 db  0Eh
.eh_frame:000000000000856D                 db  20h
.eh_frame:000000000000856E                 db  8Dh
.eh_frame:000000000000856F                 db    4
.eh_frame:0000000000008570                 db  42h ; B
.eh_frame:0000000000008571                 db  0Eh
.eh_frame:0000000000008572                 db  28h ; (
.eh_frame:0000000000008573                 db  8Ch
.eh_frame:0000000000008574                 db    5
.eh_frame:0000000000008575                 db  44h ; D
.eh_frame:0000000000008576                 db  0Eh
.eh_frame:0000000000008577                 db  30h ; 0
.eh_frame:0000000000008578                 db  86h
.eh_frame:0000000000008579                 db    6
.eh_frame:000000000000857A                 db  41h ; A
.eh_frame:000000000000857B                 db  0Eh
.eh_frame:000000000000857C                 db  38h ; 8
.eh_frame:000000000000857D                 db  83h
.eh_frame:000000000000857E                 db    7
.eh_frame:000000000000857F                 db  4Ah ; J
.eh_frame:0000000000008580                 db  0Eh
.eh_frame:0000000000008581                 db  60h ; `
.eh_frame:0000000000008582                 db    2
.eh_frame:0000000000008583                 db 0DDh
.eh_frame:0000000000008584                 db  0Eh
.eh_frame:0000000000008585                 db  68h ; h
.eh_frame:0000000000008586                 db  57h ; W
.eh_frame:0000000000008587                 db  0Eh
.eh_frame:0000000000008588                 db  70h ; p
.eh_frame:0000000000008589                 db  42h ; B
.eh_frame:000000000000858A                 db  0Eh
.eh_frame:000000000000858B                 db  78h ; x
.eh_frame:000000000000858C                 db  42h ; B
.eh_frame:000000000000858D                 db  0Eh
.eh_frame:000000000000858E                 db  80h
.eh_frame:000000000000858F                 db    1
.eh_frame:0000000000008590                 db  42h ; B
.eh_frame:0000000000008591                 db  0Eh
.eh_frame:0000000000008592                 db  88h
.eh_frame:0000000000008593                 db    1
.eh_frame:0000000000008594                 db  42h ; B
.eh_frame:0000000000008595                 db  0Eh
.eh_frame:0000000000008596                 db  90h
.eh_frame:0000000000008597                 db    1
.eh_frame:0000000000008598                 db  53h ; S
.eh_frame:0000000000008599                 db  0Eh
.eh_frame:000000000000859A                 db  60h ; `
.eh_frame:000000000000859B                 db  44h ; D
.eh_frame:000000000000859C                 db  0Ah
.eh_frame:000000000000859D                 db  0Eh
.eh_frame:000000000000859E                 db  38h ; 8
.eh_frame:000000000000859F                 db  41h ; A
.eh_frame:00000000000085A0                 db  0Eh
.eh_frame:00000000000085A1                 db  30h ; 0
.eh_frame:00000000000085A2                 db  41h ; A
.eh_frame:00000000000085A3                 db  0Eh
.eh_frame:00000000000085A4                 db  28h ; (
.eh_frame:00000000000085A5                 db  42h ; B
.eh_frame:00000000000085A6                 db  0Eh
.eh_frame:00000000000085A7                 db  20h
.eh_frame:00000000000085A8                 db  42h ; B
.eh_frame:00000000000085A9                 db  0Eh
.eh_frame:00000000000085AA                 db  18h
.eh_frame:00000000000085AB                 db  42h ; B
.eh_frame:00000000000085AC                 db  0Eh
.eh_frame:00000000000085AD                 db  10h
.eh_frame:00000000000085AE                 db  42h ; B
.eh_frame:00000000000085AF                 db  0Eh
.eh_frame:00000000000085B0                 db    8
.eh_frame:00000000000085B1                 db  44h ; D
.eh_frame:00000000000085B2                 db  0Bh
.eh_frame:00000000000085B3                 db    2
.eh_frame:00000000000085B4                 db  78h ; x
.eh_frame:00000000000085B5                 db  0Ah
.eh_frame:00000000000085B6                 db  0Eh
.eh_frame:00000000000085B7                 db  68h ; h
.eh_frame:00000000000085B8                 db  48h ; H
.eh_frame:00000000000085B9                 db  0Bh
.eh_frame:00000000000085BA                 db  5Ah ; Z
.eh_frame:00000000000085BB                 db  0Ah
.eh_frame:00000000000085BC                 db  0Eh
.eh_frame:00000000000085BD                 db  38h ; 8
.eh_frame:00000000000085BE                 db  47h ; G
.eh_frame:00000000000085BF                 db  0Eh
.eh_frame:00000000000085C0                 db  30h ; 0
.eh_frame:00000000000085C1                 db  41h ; A
.eh_frame:00000000000085C2                 db  0Eh
.eh_frame:00000000000085C3                 db  28h ; (
.eh_frame:00000000000085C4                 db  42h ; B
.eh_frame:00000000000085C5                 db  0Eh
.eh_frame:00000000000085C6                 db  20h
.eh_frame:00000000000085C7                 db  42h ; B
.eh_frame:00000000000085C8                 db  0Eh
.eh_frame:00000000000085C9                 db  18h
.eh_frame:00000000000085CA                 db  42h ; B
.eh_frame:00000000000085CB                 db  0Eh
.eh_frame:00000000000085CC                 db  10h
.eh_frame:00000000000085CD                 db  42h ; B
.eh_frame:00000000000085CE                 db  0Eh
.eh_frame:00000000000085CF                 db    8
.eh_frame:00000000000085D0                 db  56h ; V
.eh_frame:00000000000085D1                 db  0Bh
.eh_frame:00000000000085D2                 db  5Eh ; ^
.eh_frame:00000000000085D3                 db  0Ah
.eh_frame:00000000000085D4                 db  0Eh
.eh_frame:00000000000085D5                 db  38h ; 8
.eh_frame:00000000000085D6                 db  52h ; R
.eh_frame:00000000000085D7                 db  0Eh
.eh_frame:00000000000085D8                 db  30h ; 0
.eh_frame:00000000000085D9                 db  41h ; A
.eh_frame:00000000000085DA                 db  0Eh
.eh_frame:00000000000085DB                 db  28h ; (
.eh_frame:00000000000085DC                 db  42h ; B
.eh_frame:00000000000085DD                 db  0Eh
.eh_frame:00000000000085DE                 db  20h
.eh_frame:00000000000085DF                 db  42h ; B
.eh_frame:00000000000085E0                 db  0Eh
.eh_frame:00000000000085E1                 db  18h
.eh_frame:00000000000085E2                 db  42h ; B
.eh_frame:00000000000085E3                 db  0Eh
.eh_frame:00000000000085E4                 db  10h
.eh_frame:00000000000085E5                 db  42h ; B
.eh_frame:00000000000085E6                 db  0Eh
.eh_frame:00000000000085E7                 db    8
.eh_frame:00000000000085E8                 db  4Fh ; O
.eh_frame:00000000000085E9                 db  0Bh
.eh_frame:00000000000085EA                 db  62h ; b
.eh_frame:00000000000085EB                 db  0Ah
.eh_frame:00000000000085EC                 db  0Eh
.eh_frame:00000000000085ED                 db  38h ; 8
.eh_frame:00000000000085EE                 db  50h ; P
.eh_frame:00000000000085EF                 db  0Eh
.eh_frame:00000000000085F0                 db  30h ; 0
.eh_frame:00000000000085F1                 db  41h ; A
.eh_frame:00000000000085F2                 db  0Eh
.eh_frame:00000000000085F3                 db  28h ; (
.eh_frame:00000000000085F4                 db  42h ; B
.eh_frame:00000000000085F5                 db  0Eh
.eh_frame:00000000000085F6                 db  20h
.eh_frame:00000000000085F7                 db  42h ; B
.eh_frame:00000000000085F8                 db  0Eh
.eh_frame:00000000000085F9                 db  18h
.eh_frame:00000000000085FA                 db  42h ; B
.eh_frame:00000000000085FB                 db  0Eh
.eh_frame:00000000000085FC                 db  10h
.eh_frame:00000000000085FD                 db  42h ; B
.eh_frame:00000000000085FE                 db  0Eh
.eh_frame:00000000000085FF                 db    8
.eh_frame:0000000000008600                 db  55h ; U
.eh_frame:0000000000008601                 db  0Bh
.eh_frame:0000000000008602                 db  66h ; f
.eh_frame:0000000000008603                 db  0Eh
.eh_frame:0000000000008604                 db  68h ; h
.eh_frame:0000000000008605                 db  42h ; B
.eh_frame:0000000000008606                 db  0Eh
.eh_frame:0000000000008607                 db  70h ; p
.eh_frame:0000000000008608                 db  5Ch ; \
.eh_frame:0000000000008609                 db  0Eh
.eh_frame:000000000000860A                 db  68h ; h
.eh_frame:000000000000860B                 db  41h ; A
.eh_frame:000000000000860C                 db  0Eh
.eh_frame:000000000000860D                 db  60h ; `
.eh_frame:000000000000860E                 db  44h ; D
.eh_frame:000000000000860F                 db  0Ah
.eh_frame:0000000000008610                 db  0Eh
.eh_frame:0000000000008611                 db  38h ; 8
.eh_frame:0000000000008612                 db  41h ; A
.eh_frame:0000000000008613                 db  0Eh
.eh_frame:0000000000008614                 db  30h ; 0
.eh_frame:0000000000008615                 db  41h ; A
.eh_frame:0000000000008616                 db  0Eh
.eh_frame:0000000000008617                 db  28h ; (
.eh_frame:0000000000008618                 db  42h ; B
.eh_frame:0000000000008619                 db  0Eh
.eh_frame:000000000000861A                 db  20h
.eh_frame:000000000000861B                 db  42h ; B
.eh_frame:000000000000861C                 db  0Eh
.eh_frame:000000000000861D                 db  18h
.eh_frame:000000000000861E                 db  42h ; B
.eh_frame:000000000000861F                 db  0Eh
.eh_frame:0000000000008620                 db  10h
.eh_frame:0000000000008621                 db  42h ; B
.eh_frame:0000000000008622                 db  0Eh
.eh_frame:0000000000008623                 db    8
.eh_frame:0000000000008624                 db  45h ; E
.eh_frame:0000000000008625                 db  0Bh
.eh_frame:0000000000008626                 db  68h ; h
.eh_frame:0000000000008627                 db  0Ah
.eh_frame:0000000000008628                 db  0Eh
.eh_frame:0000000000008629                 db  68h ; h
.eh_frame:000000000000862A                 db  48h ; H
.eh_frame:000000000000862B                 db  0Bh
.eh_frame:000000000000862C                 db  72h ; r
.eh_frame:000000000000862D                 db  0Eh
.eh_frame:000000000000862E                 db  68h ; h
.eh_frame:000000000000862F                 db  45h ; E
.eh_frame:0000000000008630                 db  0Eh
.eh_frame:0000000000008631                 db  70h ; p
.eh_frame:0000000000008632                 db  42h ; B
.eh_frame:0000000000008633                 db  0Eh
.eh_frame:0000000000008634                 db  78h ; x
.eh_frame:0000000000008635                 db  42h ; B
.eh_frame:0000000000008636                 db  0Eh
.eh_frame:0000000000008637                 db  80h
.eh_frame:0000000000008638                 db    1
.eh_frame:0000000000008639                 db  5Eh ; ^
.eh_frame:000000000000863A                 db  0Eh
.eh_frame:000000000000863B                 db  60h ; `
.eh_frame:000000000000863C                 db  44h ; D
.eh_frame:000000000000863D                 db  0Ah
.eh_frame:000000000000863E                 db  0Eh
.eh_frame:000000000000863F                 db  38h ; 8
.eh_frame:0000000000008640                 db  41h ; A
.eh_frame:0000000000008641                 db  0Eh
.eh_frame:0000000000008642                 db  30h ; 0
.eh_frame:0000000000008643                 db  41h ; A
.eh_frame:0000000000008644                 db  0Eh
.eh_frame:0000000000008645                 db  28h ; (
.eh_frame:0000000000008646                 db  42h ; B
.eh_frame:0000000000008647                 db  0Eh
.eh_frame:0000000000008648                 db  20h
.eh_frame:0000000000008649                 db  42h ; B
.eh_frame:000000000000864A                 db  0Eh
.eh_frame:000000000000864B                 db  18h
.eh_frame:000000000000864C                 db  42h ; B
.eh_frame:000000000000864D                 db  0Eh
.eh_frame:000000000000864E                 db  10h
.eh_frame:000000000000864F                 db  42h ; B
.eh_frame:0000000000008650                 db  0Eh
.eh_frame:0000000000008651                 db    8
.eh_frame:0000000000008652                 db  41h ; A
.eh_frame:0000000000008653                 db  0Bh
.eh_frame:0000000000008654                 db  79h ; y
.eh_frame:0000000000008655                 db  0Ah
.eh_frame:0000000000008656                 db  0Eh
.eh_frame:0000000000008657                 db  68h ; h
.eh_frame:0000000000008658                 db  42h ; B
.eh_frame:0000000000008659                 db  0Eh
.eh_frame:000000000000865A                 db  70h ; p
.eh_frame:000000000000865B                 db  42h ; B
.eh_frame:000000000000865C                 db  0Eh
.eh_frame:000000000000865D                 db  78h ; x
.eh_frame:000000000000865E                 db  42h ; B
.eh_frame:000000000000865F                 db  0Eh
.eh_frame:0000000000008660                 db  80h
.eh_frame:0000000000008661                 db    1
.eh_frame:0000000000008662                 db  51h ; Q
.eh_frame:0000000000008663                 db  0Bh
.eh_frame:0000000000008664                 db  10h
.eh_frame:0000000000008665                 db    0
.eh_frame:0000000000008666                 db    0
.eh_frame:0000000000008667                 db    0
.eh_frame:0000000000008668                 db  80h
.eh_frame:0000000000008669                 db    7
.eh_frame:000000000000866A                 db    0
.eh_frame:000000000000866B                 db    0
.eh_frame:000000000000866C                 db  94h
.eh_frame:000000000000866D                 db 0BCh
.eh_frame:000000000000866E                 db 0FFh
.eh_frame:000000000000866F                 db 0FFh
.eh_frame:0000000000008670                 db  20h
.eh_frame:0000000000008671                 db    0
.eh_frame:0000000000008672                 db    0
.eh_frame:0000000000008673                 db    0
.eh_frame:0000000000008674                 db    0
.eh_frame:0000000000008675                 db    0
.eh_frame:0000000000008676                 db    0
.eh_frame:0000000000008677                 db    0
.eh_frame:0000000000008678                 db  18h
.eh_frame:0000000000008679                 db    0
.eh_frame:000000000000867A                 db    0
.eh_frame:000000000000867B                 db    0
.eh_frame:000000000000867C                 db  94h
.eh_frame:000000000000867D                 db    7
.eh_frame:000000000000867E                 db    0
.eh_frame:000000000000867F                 db    0
.eh_frame:0000000000008680                 db 0A0h
.eh_frame:0000000000008681                 db 0BCh
.eh_frame:0000000000008682                 db 0FFh
.eh_frame:0000000000008683                 db 0FFh
.eh_frame:0000000000008684                 db  78h ; x
.eh_frame:0000000000008685                 db    0
.eh_frame:0000000000008686                 db    0
.eh_frame:0000000000008687                 db    0
.eh_frame:0000000000008688                 db    0
.eh_frame:0000000000008689                 db  44h ; D
.eh_frame:000000000000868A                 db  0Eh
.eh_frame:000000000000868B                 db  70h ; p
.eh_frame:000000000000868C                 db    2
.eh_frame:000000000000868D                 db  60h ; `
.eh_frame:000000000000868E                 db  0Ah
.eh_frame:000000000000868F                 db  0Eh
.eh_frame:0000000000008690                 db    8
.eh_frame:0000000000008691                 db  41h ; A
.eh_frame:0000000000008692                 db  0Bh
.eh_frame:0000000000008693                 db    0
.eh_frame:0000000000008694                 db  28h ; (
.eh_frame:0000000000008695                 db    0
.eh_frame:0000000000008696                 db    0
.eh_frame:0000000000008697                 db    0
.eh_frame:0000000000008698                 db 0B0h
.eh_frame:0000000000008699                 db    7
.eh_frame:000000000000869A                 db    0
.eh_frame:000000000000869B                 db    0
.eh_frame:000000000000869C                 db    4
.eh_frame:000000000000869D                 db 0BDh
.eh_frame:000000000000869E                 db 0FFh
.eh_frame:000000000000869F                 db 0FFh
.eh_frame:00000000000086A0                 db 0D5h
.eh_frame:00000000000086A1                 db    0
.eh_frame:00000000000086A2                 db    0
.eh_frame:00000000000086A3                 db    0
.eh_frame:00000000000086A4                 db    0
.eh_frame:00000000000086A5                 db  41h ; A
.eh_frame:00000000000086A6                 db  0Eh
.eh_frame:00000000000086A7                 db  10h
.eh_frame:00000000000086A8                 db  86h
.eh_frame:00000000000086A9                 db    2
.eh_frame:00000000000086AA                 db  41h ; A
.eh_frame:00000000000086AB                 db  0Eh
.eh_frame:00000000000086AC                 db  18h
.eh_frame:00000000000086AD                 db  83h
.eh_frame:00000000000086AE                 db    3
.eh_frame:00000000000086AF                 db  50h ; P
.eh_frame:00000000000086B0                 db  0Eh
.eh_frame:00000000000086B1                 db 0D0h
.eh_frame:00000000000086B2                 db    1
.eh_frame:00000000000086B3                 db    2
.eh_frame:00000000000086B4                 db 0ABh
.eh_frame:00000000000086B5                 db  0Ah
.eh_frame:00000000000086B6                 db  0Eh
.eh_frame:00000000000086B7                 db  18h
.eh_frame:00000000000086B8                 db  41h ; A
.eh_frame:00000000000086B9                 db  0Eh
.eh_frame:00000000000086BA                 db  10h
.eh_frame:00000000000086BB                 db  41h ; A
.eh_frame:00000000000086BC                 db  0Eh
.eh_frame:00000000000086BD                 db    8
.eh_frame:00000000000086BE                 db  41h ; A
.eh_frame:00000000000086BF                 db  0Bh
.eh_frame:00000000000086C0                 db  1Ch
.eh_frame:00000000000086C1                 db    0
.eh_frame:00000000000086C2                 db    0
.eh_frame:00000000000086C3                 db    0
.eh_frame:00000000000086C4                 db 0DCh
.eh_frame:00000000000086C5                 db    7
.eh_frame:00000000000086C6                 db    0
.eh_frame:00000000000086C7                 db    0
.eh_frame:00000000000086C8                 db 0B8h
.eh_frame:00000000000086C9                 db 0BDh
.eh_frame:00000000000086CA                 db 0FFh
.eh_frame:00000000000086CB                 db 0FFh
.eh_frame:00000000000086CC                 db  80h
.eh_frame:00000000000086CD                 db    0
.eh_frame:00000000000086CE                 db    0
.eh_frame:00000000000086CF                 db    0
.eh_frame:00000000000086D0                 db    0
.eh_frame:00000000000086D1                 db  41h ; A
.eh_frame:00000000000086D2                 db  0Eh
.eh_frame:00000000000086D3                 db  10h
.eh_frame:00000000000086D4                 db  83h
.eh_frame:00000000000086D5                 db    2
.eh_frame:00000000000086D6                 db    2
.eh_frame:00000000000086D7                 db  7Ah ; z
.eh_frame:00000000000086D8                 db  0Eh
.eh_frame:00000000000086D9                 db    8
.eh_frame:00000000000086DA                 db    0
.eh_frame:00000000000086DB                 db    0
.eh_frame:00000000000086DC                 db    0
.eh_frame:00000000000086DD                 db    0
.eh_frame:00000000000086DE                 db    0
.eh_frame:00000000000086DF                 db    0
.eh_frame:00000000000086E0                 db  18h
.eh_frame:00000000000086E1                 db    0
.eh_frame:00000000000086E2                 db    0
.eh_frame:00000000000086E3                 db    0
.eh_frame:00000000000086E4                 db 0FCh
.eh_frame:00000000000086E5                 db    7
.eh_frame:00000000000086E6                 db    0
.eh_frame:00000000000086E7                 db    0
.eh_frame:00000000000086E8                 db  18h
.eh_frame:00000000000086E9                 db 0BEh
.eh_frame:00000000000086EA                 db 0FFh
.eh_frame:00000000000086EB                 db 0FFh
.eh_frame:00000000000086EC                 db  1Ah
.eh_frame:00000000000086ED                 db    0
.eh_frame:00000000000086EE                 db    0
.eh_frame:00000000000086EF                 db    0
.eh_frame:00000000000086F0                 db    0
.eh_frame:00000000000086F1                 db  41h ; A
.eh_frame:00000000000086F2                 db  0Eh
.eh_frame:00000000000086F3                 db  10h
.eh_frame:00000000000086F4                 db  83h
.eh_frame:00000000000086F5                 db    2
.eh_frame:00000000000086F6                 db  53h ; S
.eh_frame:00000000000086F7                 db  0Ah
.eh_frame:00000000000086F8                 db  0Eh
.eh_frame:00000000000086F9                 db    8
.eh_frame:00000000000086FA                 db  41h ; A
.eh_frame:00000000000086FB                 db  0Bh
.eh_frame:00000000000086FC                 db  10h
.eh_frame:00000000000086FD                 db    0
.eh_frame:00000000000086FE                 db    0
.eh_frame:00000000000086FF                 db    0
.eh_frame:0000000000008700                 db  18h
.eh_frame:0000000000008701                 db    8
.eh_frame:0000000000008702                 db    0
.eh_frame:0000000000008703                 db    0
.eh_frame:0000000000008704                 db  1Ch
.eh_frame:0000000000008705                 db 0BEh
.eh_frame:0000000000008706                 db 0FFh
.eh_frame:0000000000008707                 db 0FFh
.eh_frame:0000000000008708                 db  24h ; $
.eh_frame:0000000000008709                 db    0
.eh_frame:000000000000870A                 db    0
.eh_frame:000000000000870B                 db    0
.eh_frame:000000000000870C                 db    0
.eh_frame:000000000000870D                 db  5Fh ; _
.eh_frame:000000000000870E                 db  0Eh
.eh_frame:000000000000870F                 db  10h
.eh_frame:0000000000008710                 db  10h
.eh_frame:0000000000008711                 db    0
.eh_frame:0000000000008712                 db    0
.eh_frame:0000000000008713                 db    0
.eh_frame:0000000000008714                 db  2Ch ; ,
.eh_frame:0000000000008715                 db    8
.eh_frame:0000000000008716                 db    0
.eh_frame:0000000000008717                 db    0
.eh_frame:0000000000008718                 db  38h ; 8
.eh_frame:0000000000008719                 db 0BEh
.eh_frame:000000000000871A                 db 0FFh
.eh_frame:000000000000871B                 db 0FFh
.eh_frame:000000000000871C                 db    2
.eh_frame:000000000000871D                 db    0
.eh_frame:000000000000871E                 db    0
.eh_frame:000000000000871F                 db    0
.eh_frame:0000000000008720                 db    0
.eh_frame:0000000000008721                 db    0
.eh_frame:0000000000008722                 db    0
.eh_frame:0000000000008723                 db    0
.eh_frame:0000000000008724                 db  20h
.eh_frame:0000000000008725                 db    0
.eh_frame:0000000000008726                 db    0
.eh_frame:0000000000008727                 db    0
.eh_frame:0000000000008728                 db  40h ; @
.eh_frame:0000000000008729                 db    8
.eh_frame:000000000000872A                 db    0
.eh_frame:000000000000872B                 db    0
.eh_frame:000000000000872C                 db  34h ; 4
.eh_frame:000000000000872D                 db 0BEh
.eh_frame:000000000000872E                 db 0FFh
.eh_frame:000000000000872F                 db 0FFh
.eh_frame:0000000000008730                 db  36h ; 6
.eh_frame:0000000000008731                 db    0
.eh_frame:0000000000008732                 db    0
.eh_frame:0000000000008733                 db    0
.eh_frame:0000000000008734                 db    0
.eh_frame:0000000000008735                 db  44h ; D
.eh_frame:0000000000008736                 db  0Eh
.eh_frame:0000000000008737                 db  10h
.eh_frame:0000000000008738                 db  83h
.eh_frame:0000000000008739                 db    2
.eh_frame:000000000000873A                 db  5Dh ; ]
.eh_frame:000000000000873B                 db  0Ah
.eh_frame:000000000000873C                 db  0Eh
.eh_frame:000000000000873D                 db    8
.eh_frame:000000000000873E                 db  47h ; G
.eh_frame:000000000000873F                 db  0Bh
.eh_frame:0000000000008740                 db  48h ; H
.eh_frame:0000000000008741                 db  0Ah
.eh_frame:0000000000008742                 db  0Eh
.eh_frame:0000000000008743                 db    8
.eh_frame:0000000000008744                 db  41h ; A
.eh_frame:0000000000008745                 db  0Bh
.eh_frame:0000000000008746                 db    0
.eh_frame:0000000000008747                 db    0
.eh_frame:0000000000008748                 db  10h
.eh_frame:0000000000008749                 db    0
.eh_frame:000000000000874A                 db    0
.eh_frame:000000000000874B                 db    0
.eh_frame:000000000000874C                 db  64h ; d
.eh_frame:000000000000874D                 db    8
.eh_frame:000000000000874E                 db    0
.eh_frame:000000000000874F                 db    0
.eh_frame:0000000000008750                 db  50h ; P
.eh_frame:0000000000008751                 db 0BEh
.eh_frame:0000000000008752                 db 0FFh
.eh_frame:0000000000008753                 db 0FFh
.eh_frame:0000000000008754                 db  24h ; $
.eh_frame:0000000000008755                 db    0
.eh_frame:0000000000008756                 db    0
.eh_frame:0000000000008757                 db    0
.eh_frame:0000000000008758                 db    0
.eh_frame:0000000000008759                 db  5Fh ; _
.eh_frame:000000000000875A                 db  0Eh
.eh_frame:000000000000875B                 db  10h
.eh_frame:000000000000875C                 db  14h
.eh_frame:000000000000875D                 db    0
.eh_frame:000000000000875E                 db    0
.eh_frame:000000000000875F                 db    0
.eh_frame:0000000000008760                 db  78h ; x
.eh_frame:0000000000008761                 db    8
.eh_frame:0000000000008762                 db    0
.eh_frame:0000000000008763                 db    0
.eh_frame:0000000000008764                 db  6Ch ; l
.eh_frame:0000000000008765                 db 0BEh
.eh_frame:0000000000008766                 db 0FFh
.eh_frame:0000000000008767                 db 0FFh
.eh_frame:0000000000008768                 db  82h
.eh_frame:0000000000008769                 db    0
.eh_frame:000000000000876A                 db    0
.eh_frame:000000000000876B                 db    0
.eh_frame:000000000000876C                 db    0
.eh_frame:000000000000876D                 db    2
.eh_frame:000000000000876E                 db  5Fh ; _
.eh_frame:000000000000876F                 db  0Eh
.eh_frame:0000000000008770                 db  10h
.eh_frame:0000000000008771                 db  49h ; I
.eh_frame:0000000000008772                 db  0Eh
.eh_frame:0000000000008773                 db    8
.eh_frame:0000000000008774                 db  14h
.eh_frame:0000000000008775                 db    0
.eh_frame:0000000000008776                 db    0
.eh_frame:0000000000008777                 db    0
.eh_frame:0000000000008778                 db  90h
.eh_frame:0000000000008779                 db    8
.eh_frame:000000000000877A                 db    0
.eh_frame:000000000000877B                 db    0
.eh_frame:000000000000877C                 db 0E4h
.eh_frame:000000000000877D                 db 0BEh
.eh_frame:000000000000877E                 db 0FFh
.eh_frame:000000000000877F                 db 0FFh
.eh_frame:0000000000008780                 db  4Ah ; J
.eh_frame:0000000000008781                 db    0
.eh_frame:0000000000008782                 db    0
.eh_frame:0000000000008783                 db    0
.eh_frame:0000000000008784                 db    0
.eh_frame:0000000000008785                 db    2
.eh_frame:0000000000008786                 db  45h ; E
.eh_frame:0000000000008787                 db  0Eh
.eh_frame:0000000000008788                 db  10h
.eh_frame:0000000000008789                 db    0
.eh_frame:000000000000878A                 db    0
.eh_frame:000000000000878B                 db    0
.eh_frame:000000000000878C                 db  18h
.eh_frame:000000000000878D                 db    0
.eh_frame:000000000000878E                 db    0
.eh_frame:000000000000878F                 db    0
.eh_frame:0000000000008790                 db 0A8h
.eh_frame:0000000000008791                 db    8
.eh_frame:0000000000008792                 db    0
.eh_frame:0000000000008793                 db    0
.eh_frame:0000000000008794                 db  1Ch
.eh_frame:0000000000008795                 db 0BFh
.eh_frame:0000000000008796                 db 0FFh
.eh_frame:0000000000008797                 db 0FFh
.eh_frame:0000000000008798                 db  17h
.eh_frame:0000000000008799                 db    0
.eh_frame:000000000000879A                 db    0
.eh_frame:000000000000879B                 db    0
.eh_frame:000000000000879C                 db    0
.eh_frame:000000000000879D                 db  41h ; A
.eh_frame:000000000000879E                 db  0Eh
.eh_frame:000000000000879F                 db  10h
.eh_frame:00000000000087A0                 db  83h
.eh_frame:00000000000087A1                 db    2
.eh_frame:00000000000087A2                 db  51h ; Q
.eh_frame:00000000000087A3                 db  0Eh
.eh_frame:00000000000087A4                 db    8
.eh_frame:00000000000087A5                 db    0
.eh_frame:00000000000087A6                 db    0
.eh_frame:00000000000087A7                 db    0
.eh_frame:00000000000087A8                 db  18h
.eh_frame:00000000000087A9                 db    0
.eh_frame:00000000000087AA                 db    0
.eh_frame:00000000000087AB                 db    0
.eh_frame:00000000000087AC                 db 0C4h
.eh_frame:00000000000087AD                 db    8
.eh_frame:00000000000087AE                 db    0
.eh_frame:00000000000087AF                 db    0
.eh_frame:00000000000087B0                 db  20h
.eh_frame:00000000000087B1                 db 0BFh
.eh_frame:00000000000087B2                 db 0FFh
.eh_frame:00000000000087B3                 db 0FFh
.eh_frame:00000000000087B4                 db  2Eh ; .
.eh_frame:00000000000087B5                 db    0
.eh_frame:00000000000087B6                 db    0
.eh_frame:00000000000087B7                 db    0
.eh_frame:00000000000087B8                 db    0
.eh_frame:00000000000087B9                 db  47h ; G
.eh_frame:00000000000087BA                 db  0Eh
.eh_frame:00000000000087BB                 db  10h
.eh_frame:00000000000087BC                 db  61h ; a
.eh_frame:00000000000087BD                 db  0Ah
.eh_frame:00000000000087BE                 db  0Eh
.eh_frame:00000000000087BF                 db    8
.eh_frame:00000000000087C0                 db  41h ; A
.eh_frame:00000000000087C1                 db  0Bh
.eh_frame:00000000000087C2                 db    0
.eh_frame:00000000000087C3                 db    0
.eh_frame:00000000000087C4                 db  24h ; $
.eh_frame:00000000000087C5                 db    0
.eh_frame:00000000000087C6                 db    0
.eh_frame:00000000000087C7                 db    0
.eh_frame:00000000000087C8                 db 0E0h
.eh_frame:00000000000087C9                 db    8
.eh_frame:00000000000087CA                 db    0
.eh_frame:00000000000087CB                 db    0
.eh_frame:00000000000087CC                 db  34h ; 4
.eh_frame:00000000000087CD                 db 0BFh
.eh_frame:00000000000087CE                 db 0FFh
.eh_frame:00000000000087CF                 db 0FFh
.eh_frame:00000000000087D0                 db  28h ; (
.eh_frame:00000000000087D1                 db    0
.eh_frame:00000000000087D2                 db    0
.eh_frame:00000000000087D3                 db    0
.eh_frame:00000000000087D4                 db    0
.eh_frame:00000000000087D5                 db  41h ; A
.eh_frame:00000000000087D6                 db  0Eh
.eh_frame:00000000000087D7                 db  10h
.eh_frame:00000000000087D8                 db  86h
.eh_frame:00000000000087D9                 db    2
.eh_frame:00000000000087DA                 db  41h ; A
.eh_frame:00000000000087DB                 db  0Eh
.eh_frame:00000000000087DC                 db  18h
.eh_frame:00000000000087DD                 db  83h
.eh_frame:00000000000087DE                 db    3
.eh_frame:00000000000087DF                 db  4Dh ; M
.eh_frame:00000000000087E0                 db  0Eh
.eh_frame:00000000000087E1                 db  20h
.eh_frame:00000000000087E2                 db  49h ; I
.eh_frame:00000000000087E3                 db  0Eh
.eh_frame:00000000000087E4                 db  18h
.eh_frame:00000000000087E5                 db  47h ; G
.eh_frame:00000000000087E6                 db  0Eh
.eh_frame:00000000000087E7                 db  10h
.eh_frame:00000000000087E8                 db  41h ; A
.eh_frame:00000000000087E9                 db  0Eh
.eh_frame:00000000000087EA                 db    8
.eh_frame:00000000000087EB                 db    0
.eh_frame:00000000000087EC                 db  18h
.eh_frame:00000000000087ED                 db    0
.eh_frame:00000000000087EE                 db    0
.eh_frame:00000000000087EF                 db    0
.eh_frame:00000000000087F0                 db    8
.eh_frame:00000000000087F1                 db    9
.eh_frame:00000000000087F2                 db    0
.eh_frame:00000000000087F3                 db    0
.eh_frame:00000000000087F4                 db  3Ch ; <
.eh_frame:00000000000087F5                 db 0BFh
.eh_frame:00000000000087F6                 db 0FFh
.eh_frame:00000000000087F7                 db 0FFh
.eh_frame:00000000000087F8                 db  13h
.eh_frame:00000000000087F9                 db    0
.eh_frame:00000000000087FA                 db    0
.eh_frame:00000000000087FB                 db    0
.eh_frame:00000000000087FC                 db    0
.eh_frame:00000000000087FD                 db  41h ; A
.eh_frame:00000000000087FE                 db  0Eh
.eh_frame:00000000000087FF                 db  10h
.eh_frame:0000000000008800                 db  83h
.eh_frame:0000000000008801                 db    2
.eh_frame:0000000000008802                 db  50h ; P
.eh_frame:0000000000008803                 db  0Eh
.eh_frame:0000000000008804                 db    8
.eh_frame:0000000000008805                 db    0
.eh_frame:0000000000008806                 db    0
.eh_frame:0000000000008807                 db    0
.eh_frame:0000000000008808                 db  14h
.eh_frame:0000000000008809                 db    0
.eh_frame:000000000000880A                 db    0
.eh_frame:000000000000880B                 db    0
.eh_frame:000000000000880C                 db  24h ; $
.eh_frame:000000000000880D                 db    9
.eh_frame:000000000000880E                 db    0
.eh_frame:000000000000880F                 db    0
.eh_frame:0000000000008810                 db  40h ; @
.eh_frame:0000000000008811                 db 0BFh
.eh_frame:0000000000008812                 db 0FFh
.eh_frame:0000000000008813                 db 0FFh
.eh_frame:0000000000008814                 db  35h ; 5
.eh_frame:0000000000008815                 db    0
.eh_frame:0000000000008816                 db    0
.eh_frame:0000000000008817                 db    0
.eh_frame:0000000000008818                 db    0
.eh_frame:0000000000008819                 db  4Bh ; K
.eh_frame:000000000000881A                 db  0Eh
.eh_frame:000000000000881B                 db  10h
.eh_frame:000000000000881C                 db    0
.eh_frame:000000000000881D                 db    0
.eh_frame:000000000000881E                 db    0
.eh_frame:000000000000881F                 db    0
.eh_frame:0000000000008820                 db  3Ch ; <
.eh_frame:0000000000008821                 db    0
.eh_frame:0000000000008822                 db    0
.eh_frame:0000000000008823                 db    0
.eh_frame:0000000000008824                 db  3Ch ; <
.eh_frame:0000000000008825                 db    9
.eh_frame:0000000000008826                 db    0
.eh_frame:0000000000008827                 db    0
.eh_frame:0000000000008828                 db  68h ; h
.eh_frame:0000000000008829                 db 0BFh
.eh_frame:000000000000882A                 db 0FFh
.eh_frame:000000000000882B                 db 0FFh
.eh_frame:000000000000882C                 db  83h
.eh_frame:000000000000882D                 db    0
.eh_frame:000000000000882E                 db    0
.eh_frame:000000000000882F                 db    0
.eh_frame:0000000000008830                 db    0
.eh_frame:0000000000008831                 db  42h ; B
.eh_frame:0000000000008832                 db  0Eh
.eh_frame:0000000000008833                 db  10h
.eh_frame:0000000000008834                 db  8Dh
.eh_frame:0000000000008835                 db    2
.eh_frame:0000000000008836                 db  42h ; B
.eh_frame:0000000000008837                 db  0Eh
.eh_frame:0000000000008838                 db  18h
.eh_frame:0000000000008839                 db  8Ch
.eh_frame:000000000000883A                 db    3
.eh_frame:000000000000883B                 db  44h ; D
.eh_frame:000000000000883C                 db  0Eh
.eh_frame:000000000000883D                 db  20h
.eh_frame:000000000000883E                 db  86h
.eh_frame:000000000000883F                 db    4
.eh_frame:0000000000008840                 db  41h ; A
.eh_frame:0000000000008841                 db  0Eh
.eh_frame:0000000000008842                 db  28h ; (
.eh_frame:0000000000008843                 db  83h
.eh_frame:0000000000008844                 db    5
.eh_frame:0000000000008845                 db  4Ah ; J
.eh_frame:0000000000008846                 db  0Eh
.eh_frame:0000000000008847                 db  40h ; @
.eh_frame:0000000000008848                 db    2
.eh_frame:0000000000008849                 db  64h ; d
.eh_frame:000000000000884A                 db  0Ah
.eh_frame:000000000000884B                 db  0Eh
.eh_frame:000000000000884C                 db  28h ; (
.eh_frame:000000000000884D                 db  41h ; A
.eh_frame:000000000000884E                 db  0Eh
.eh_frame:000000000000884F                 db  20h
.eh_frame:0000000000008850                 db  41h ; A
.eh_frame:0000000000008851                 db  0Eh
.eh_frame:0000000000008852                 db  18h
.eh_frame:0000000000008853                 db  42h ; B
.eh_frame:0000000000008854                 db  0Eh
.eh_frame:0000000000008855                 db  10h
.eh_frame:0000000000008856                 db  42h ; B
.eh_frame:0000000000008857                 db  0Eh
.eh_frame:0000000000008858                 db    8
.eh_frame:0000000000008859                 db  41h ; A
.eh_frame:000000000000885A                 db  0Bh
.eh_frame:000000000000885B                 db    0
.eh_frame:000000000000885C                 db    0
.eh_frame:000000000000885D                 db    0
.eh_frame:000000000000885E                 db    0
.eh_frame:000000000000885F                 db    0
.eh_frame:0000000000008860                 db  3Ch ; <
.eh_frame:0000000000008861                 db    0
.eh_frame:0000000000008862                 db    0
.eh_frame:0000000000008863                 db    0
.eh_frame:0000000000008864                 db  7Ch ; |
.eh_frame:0000000000008865                 db    9
.eh_frame:0000000000008866                 db    0
.eh_frame:0000000000008867                 db    0
.eh_frame:0000000000008868                 db 0B8h
.eh_frame:0000000000008869                 db 0BFh
.eh_frame:000000000000886A                 db 0FFh
.eh_frame:000000000000886B                 db 0FFh
.eh_frame:000000000000886C                 db 0F2h
.eh_frame:000000000000886D                 db    0
.eh_frame:000000000000886E                 db    0
.eh_frame:000000000000886F                 db    0
.eh_frame:0000000000008870                 db    0
.eh_frame:0000000000008871                 db  42h ; B
.eh_frame:0000000000008872                 db  0Eh
.eh_frame:0000000000008873                 db  10h
.eh_frame:0000000000008874                 db  8Dh
.eh_frame:0000000000008875                 db    2
.eh_frame:0000000000008876                 db  42h ; B
.eh_frame:0000000000008877                 db  0Eh
.eh_frame:0000000000008878                 db  18h
.eh_frame:0000000000008879                 db  8Ch
.eh_frame:000000000000887A                 db    3
.eh_frame:000000000000887B                 db  44h ; D
.eh_frame:000000000000887C                 db  0Eh
.eh_frame:000000000000887D                 db  20h
.eh_frame:000000000000887E                 db  86h
.eh_frame:000000000000887F                 db    4
.eh_frame:0000000000008880                 db  41h ; A
.eh_frame:0000000000008881                 db  0Eh
.eh_frame:0000000000008882                 db  28h ; (
.eh_frame:0000000000008883                 db  83h
.eh_frame:0000000000008884                 db    5
.eh_frame:0000000000008885                 db  4Ah ; J
.eh_frame:0000000000008886                 db  0Eh
.eh_frame:0000000000008887                 db 0A0h
.eh_frame:0000000000008888                 db  10h
.eh_frame:0000000000008889                 db    2
.eh_frame:000000000000888A                 db  8Fh
.eh_frame:000000000000888B                 db  0Ah
.eh_frame:000000000000888C                 db  0Eh
.eh_frame:000000000000888D                 db  28h ; (
.eh_frame:000000000000888E                 db  41h ; A
.eh_frame:000000000000888F                 db  0Eh
.eh_frame:0000000000008890                 db  20h
.eh_frame:0000000000008891                 db  41h ; A
.eh_frame:0000000000008892                 db  0Eh
.eh_frame:0000000000008893                 db  18h
.eh_frame:0000000000008894                 db  42h ; B
.eh_frame:0000000000008895                 db  0Eh
.eh_frame:0000000000008896                 db  10h
.eh_frame:0000000000008897                 db  42h ; B
.eh_frame:0000000000008898                 db  0Eh
.eh_frame:0000000000008899                 db    8
.eh_frame:000000000000889A                 db  48h ; H
.eh_frame:000000000000889B                 db  0Bh
.eh_frame:000000000000889C                 db    0
.eh_frame:000000000000889D                 db    0
.eh_frame:000000000000889E                 db    0
.eh_frame:000000000000889F                 db    0
.eh_frame:00000000000088A0                 db  4Ch ; L
.eh_frame:00000000000088A1                 db    0
.eh_frame:00000000000088A2                 db    0
.eh_frame:00000000000088A3                 db    0
.eh_frame:00000000000088A4                 db 0BCh
.eh_frame:00000000000088A5                 db    9
.eh_frame:00000000000088A6                 db    0
.eh_frame:00000000000088A7                 db    0
.eh_frame:00000000000088A8                 db  78h ; x
.eh_frame:00000000000088A9                 db 0C0h
.eh_frame:00000000000088AA                 db 0FFh
.eh_frame:00000000000088AB                 db 0FFh
.eh_frame:00000000000088AC                 db  7Dh ; }
.eh_frame:00000000000088AD                 db    0
.eh_frame:00000000000088AE                 db    0
.eh_frame:00000000000088AF                 db    0
.eh_frame:00000000000088B0                 db    0
.eh_frame:00000000000088B1                 db  42h ; B
.eh_frame:00000000000088B2                 db  0Eh
.eh_frame:00000000000088B3                 db  10h
.eh_frame:00000000000088B4                 db  8Ch
.eh_frame:00000000000088B5                 db    2
.eh_frame:00000000000088B6                 db  41h ; A
.eh_frame:00000000000088B7                 db  0Eh
.eh_frame:00000000000088B8                 db  18h
.eh_frame:00000000000088B9                 db  86h
.eh_frame:00000000000088BA                 db    3
.eh_frame:00000000000088BB                 db  44h ; D
.eh_frame:00000000000088BC                 db  0Eh
.eh_frame:00000000000088BD                 db  20h
.eh_frame:00000000000088BE                 db  83h
.eh_frame:00000000000088BF                 db    4
.eh_frame:00000000000088C0                 db  69h ; i
.eh_frame:00000000000088C1                 db  0Ah
.eh_frame:00000000000088C2                 db  0Eh
.eh_frame:00000000000088C3                 db  18h
.eh_frame:00000000000088C4                 db  41h ; A
.eh_frame:00000000000088C5                 db  0Eh
.eh_frame:00000000000088C6                 db  10h
.eh_frame:00000000000088C7                 db  42h ; B
.eh_frame:00000000000088C8                 db  0Eh
.eh_frame:00000000000088C9                 db    8
.eh_frame:00000000000088CA                 db  45h ; E
.eh_frame:00000000000088CB                 db  0Bh
.eh_frame:00000000000088CC                 db  55h ; U
.eh_frame:00000000000088CD                 db  0Ah
.eh_frame:00000000000088CE                 db  0Eh
.eh_frame:00000000000088CF                 db  18h
.eh_frame:00000000000088D0                 db  41h ; A
.eh_frame:00000000000088D1                 db  0Eh
.eh_frame:00000000000088D2                 db  10h
.eh_frame:00000000000088D3                 db  42h ; B
.eh_frame:00000000000088D4                 db  0Eh
.eh_frame:00000000000088D5                 db    8
.eh_frame:00000000000088D6                 db  48h ; H
.eh_frame:00000000000088D7                 db  0Bh
.eh_frame:00000000000088D8                 db  41h ; A
.eh_frame:00000000000088D9                 db  0Ah
.eh_frame:00000000000088DA                 db  0Eh
.eh_frame:00000000000088DB                 db  18h
.eh_frame:00000000000088DC                 db  46h ; F
.eh_frame:00000000000088DD                 db  0Eh
.eh_frame:00000000000088DE                 db  10h
.eh_frame:00000000000088DF                 db  42h ; B
.eh_frame:00000000000088E0                 db  0Eh
.eh_frame:00000000000088E1                 db    8
.eh_frame:00000000000088E2                 db  47h ; G
.eh_frame:00000000000088E3                 db  0Bh
.eh_frame:00000000000088E4                 db  49h ; I
.eh_frame:00000000000088E5                 db  0Eh
.eh_frame:00000000000088E6                 db  18h
.eh_frame:00000000000088E7                 db  41h ; A
.eh_frame:00000000000088E8                 db  0Eh
.eh_frame:00000000000088E9                 db  10h
.eh_frame:00000000000088EA                 db  42h ; B
.eh_frame:00000000000088EB                 db  0Eh
.eh_frame:00000000000088EC                 db    8
.eh_frame:00000000000088ED                 db    0
.eh_frame:00000000000088EE                 db    0
.eh_frame:00000000000088EF                 db    0
.eh_frame:00000000000088F0                 db  10h
.eh_frame:00000000000088F1                 db    0
.eh_frame:00000000000088F2                 db    0
.eh_frame:00000000000088F3                 db    0
.eh_frame:00000000000088F4                 db  0Ch
.eh_frame:00000000000088F5                 db  0Ah
.eh_frame:00000000000088F6                 db    0
.eh_frame:00000000000088F7                 db    0
.eh_frame:00000000000088F8                 db 0A8h
.eh_frame:00000000000088F9                 db 0C0h
.eh_frame:00000000000088FA                 db 0FFh
.eh_frame:00000000000088FB                 db 0FFh
.eh_frame:00000000000088FC                 db  5Ch ; \
.eh_frame:00000000000088FD                 db    0
.eh_frame:00000000000088FE                 db    0
.eh_frame:00000000000088FF                 db    0
.eh_frame:0000000000008900                 db    0
.eh_frame:0000000000008901                 db    0
.eh_frame:0000000000008902                 db    0
.eh_frame:0000000000008903                 db    0
.eh_frame:0000000000008904                 db  28h ; (
.eh_frame:0000000000008905                 db    0
.eh_frame:0000000000008906                 db    0
.eh_frame:0000000000008907                 db    0
.eh_frame:0000000000008908                 db  20h
.eh_frame:0000000000008909                 db  0Ah
.eh_frame:000000000000890A                 db    0
.eh_frame:000000000000890B                 db    0
.eh_frame:000000000000890C                 db 0F4h
.eh_frame:000000000000890D                 db 0C0h
.eh_frame:000000000000890E                 db 0FFh
.eh_frame:000000000000890F                 db 0FFh
.eh_frame:0000000000008910                 db  47h ; G
.eh_frame:0000000000008911                 db    0
.eh_frame:0000000000008912                 db    0
.eh_frame:0000000000008913                 db    0
.eh_frame:0000000000008914                 db    0
.eh_frame:0000000000008915                 db  41h ; A
.eh_frame:0000000000008916                 db  0Eh
.eh_frame:0000000000008917                 db  10h
.eh_frame:0000000000008918                 db  83h
.eh_frame:0000000000008919                 db    2
.eh_frame:000000000000891A                 db  5Ah ; Z
.eh_frame:000000000000891B                 db  0Ah
.eh_frame:000000000000891C                 db  0Eh
.eh_frame:000000000000891D                 db    8
.eh_frame:000000000000891E                 db  45h ; E
.eh_frame:000000000000891F                 db  0Bh
.eh_frame:0000000000008920                 db  5Dh ; ]
.eh_frame:0000000000008921                 db  0Ah
.eh_frame:0000000000008922                 db  0Eh
.eh_frame:0000000000008923                 db    8
.eh_frame:0000000000008924                 db  43h ; C
.eh_frame:0000000000008925                 db  0Bh
.eh_frame:0000000000008926                 db  46h ; F
.eh_frame:0000000000008927                 db  0Eh
.eh_frame:0000000000008928                 db    8
.eh_frame:0000000000008929                 db    0
.eh_frame:000000000000892A                 db    0
.eh_frame:000000000000892B                 db    0
.eh_frame:000000000000892C                 db    0
.eh_frame:000000000000892D                 db    0
.eh_frame:000000000000892E                 db    0
.eh_frame:000000000000892F                 db    0
.eh_frame:0000000000008930                 db  1Ch
.eh_frame:0000000000008931                 db    0
.eh_frame:0000000000008932                 db    0
.eh_frame:0000000000008933                 db    0
.eh_frame:0000000000008934                 db  4Ch ; L
.eh_frame:0000000000008935                 db  0Ah
.eh_frame:0000000000008936                 db    0
.eh_frame:0000000000008937                 db    0
.eh_frame:0000000000008938                 db  18h
.eh_frame:0000000000008939                 db 0C1h
.eh_frame:000000000000893A                 db 0FFh
.eh_frame:000000000000893B                 db 0FFh
.eh_frame:000000000000893C                 db  60h ; `
.eh_frame:000000000000893D                 db    0
.eh_frame:000000000000893E                 db    0
.eh_frame:000000000000893F                 db    0
.eh_frame:0000000000008940                 db    0
.eh_frame:0000000000008941                 db  44h ; D
.eh_frame:0000000000008942                 db  0Eh
.eh_frame:0000000000008943                 db  10h
.eh_frame:0000000000008944                 db  75h ; u
.eh_frame:0000000000008945                 db  0Ah
.eh_frame:0000000000008946                 db  0Eh
.eh_frame:0000000000008947                 db    8
.eh_frame:0000000000008948                 db  47h ; G
.eh_frame:0000000000008949                 db  0Bh
.eh_frame:000000000000894A                 db  5Fh ; _
.eh_frame:000000000000894B                 db  0Eh
.eh_frame:000000000000894C                 db    8
.eh_frame:000000000000894D                 db    0
.eh_frame:000000000000894E                 db    0
.eh_frame:000000000000894F                 db    0
.eh_frame:0000000000008950                 db  1Ch
.eh_frame:0000000000008951                 db    0
.eh_frame:0000000000008952                 db    0
.eh_frame:0000000000008953                 db    0
.eh_frame:0000000000008954                 db  6Ch ; l
.eh_frame:0000000000008955                 db  0Ah
.eh_frame:0000000000008956                 db    0
.eh_frame:0000000000008957                 db    0
.eh_frame:0000000000008958                 db  58h ; X
.eh_frame:0000000000008959                 db 0C1h
.eh_frame:000000000000895A                 db 0FFh
.eh_frame:000000000000895B                 db 0FFh
.eh_frame:000000000000895C                 db  3Ch ; <
.eh_frame:000000000000895D                 db    0
.eh_frame:000000000000895E                 db    0
.eh_frame:000000000000895F                 db    0
.eh_frame:0000000000008960                 db    0
.eh_frame:0000000000008961                 db  44h ; D
.eh_frame:0000000000008962                 db  0Eh
.eh_frame:0000000000008963                 db  10h
.eh_frame:0000000000008964                 db  61h ; a
.eh_frame:0000000000008965                 db  0Ah
.eh_frame:0000000000008966                 db  0Eh
.eh_frame:0000000000008967                 db    8
.eh_frame:0000000000008968                 db  4Bh ; K
.eh_frame:0000000000008969                 db  0Bh
.eh_frame:000000000000896A                 db  4Bh ; K
.eh_frame:000000000000896B                 db  0Eh
.eh_frame:000000000000896C                 db    8
.eh_frame:000000000000896D                 db    0
.eh_frame:000000000000896E                 db    0
.eh_frame:000000000000896F                 db    0
.eh_frame:0000000000008970                 db  34h ; 4
.eh_frame:0000000000008971                 db    0
.eh_frame:0000000000008972                 db    0
.eh_frame:0000000000008973                 db    0
.eh_frame:0000000000008974                 db  8Ch
.eh_frame:0000000000008975                 db  0Ah
.eh_frame:0000000000008976                 db    0
.eh_frame:0000000000008977                 db    0
.eh_frame:0000000000008978                 db  78h ; x
.eh_frame:0000000000008979                 db 0C1h
.eh_frame:000000000000897A                 db 0FFh
.eh_frame:000000000000897B                 db 0FFh
.eh_frame:000000000000897C                 db  7Bh ; {
.eh_frame:000000000000897D                 db    0
.eh_frame:000000000000897E                 db    0
.eh_frame:000000000000897F                 db    0
.eh_frame:0000000000008980                 db    0
.eh_frame:0000000000008981                 db  42h ; B
.eh_frame:0000000000008982                 db  0Eh
.eh_frame:0000000000008983                 db  10h
.eh_frame:0000000000008984                 db  8Ch
.eh_frame:0000000000008985                 db    2
.eh_frame:0000000000008986                 db  41h ; A
.eh_frame:0000000000008987                 db  0Eh
.eh_frame:0000000000008988                 db  18h
.eh_frame:0000000000008989                 db  86h
.eh_frame:000000000000898A                 db    3
.eh_frame:000000000000898B                 db  41h ; A
.eh_frame:000000000000898C                 db  0Eh
.eh_frame:000000000000898D                 db  20h
.eh_frame:000000000000898E                 db  83h
.eh_frame:000000000000898F                 db    4
.eh_frame:0000000000008990                 db  7Dh ; }
.eh_frame:0000000000008991                 db  0Ah
.eh_frame:0000000000008992                 db  0Eh
.eh_frame:0000000000008993                 db  18h
.eh_frame:0000000000008994                 db  41h ; A
.eh_frame:0000000000008995                 db  0Eh
.eh_frame:0000000000008996                 db  10h
.eh_frame:0000000000008997                 db  42h ; B
.eh_frame:0000000000008998                 db  0Eh
.eh_frame:0000000000008999                 db    8
.eh_frame:000000000000899A                 db  44h ; D
.eh_frame:000000000000899B                 db  0Bh
.eh_frame:000000000000899C                 db  60h ; `
.eh_frame:000000000000899D                 db  0Ah
.eh_frame:000000000000899E                 db  0Eh
.eh_frame:000000000000899F                 db  18h
.eh_frame:00000000000089A0                 db  41h ; A
.eh_frame:00000000000089A1                 db  0Eh
.eh_frame:00000000000089A2                 db  10h
.eh_frame:00000000000089A3                 db  42h ; B
.eh_frame:00000000000089A4                 db  0Eh
.eh_frame:00000000000089A5                 db    8
.eh_frame:00000000000089A6                 db  45h ; E
.eh_frame:00000000000089A7                 db  0Bh
.eh_frame:00000000000089A8                 db  1Ch
.eh_frame:00000000000089A9                 db    0
.eh_frame:00000000000089AA                 db    0
.eh_frame:00000000000089AB                 db    0
.eh_frame:00000000000089AC                 db 0C4h
.eh_frame:00000000000089AD                 db  0Ah
.eh_frame:00000000000089AE                 db    0
.eh_frame:00000000000089AF                 db    0
.eh_frame:00000000000089B0                 db 0C0h
.eh_frame:00000000000089B1                 db 0C1h
.eh_frame:00000000000089B2                 db 0FFh
.eh_frame:00000000000089B3                 db 0FFh
.eh_frame:00000000000089B4                 db  40h ; @
.eh_frame:00000000000089B5                 db    0
.eh_frame:00000000000089B6                 db    0
.eh_frame:00000000000089B7                 db    0
.eh_frame:00000000000089B8                 db    0
.eh_frame:00000000000089B9                 db  44h ; D
.eh_frame:00000000000089BA                 db  0Eh
.eh_frame:00000000000089BB                 db  10h
.eh_frame:00000000000089BC                 db  83h
.eh_frame:00000000000089BD                 db    2
.eh_frame:00000000000089BE                 db  5Ah ; Z
.eh_frame:00000000000089BF                 db  0Ah
.eh_frame:00000000000089C0                 db  0Eh
.eh_frame:00000000000089C1                 db    8
.eh_frame:00000000000089C2                 db  4Ah ; J
.eh_frame:00000000000089C3                 db  0Bh
.eh_frame:00000000000089C4                 db  53h ; S
.eh_frame:00000000000089C5                 db  0Eh
.eh_frame:00000000000089C6                 db    8
.eh_frame:00000000000089C7                 db    0
.eh_frame:00000000000089C8                 db  2Ch ; ,
.eh_frame:00000000000089C9                 db    0
.eh_frame:00000000000089CA                 db    0
.eh_frame:00000000000089CB                 db    0
.eh_frame:00000000000089CC                 db 0E4h
.eh_frame:00000000000089CD                 db  0Ah
.eh_frame:00000000000089CE                 db    0
.eh_frame:00000000000089CF                 db    0
.eh_frame:00000000000089D0                 db 0E0h
.eh_frame:00000000000089D1                 db 0C1h
.eh_frame:00000000000089D2                 db 0FFh
.eh_frame:00000000000089D3                 db 0FFh
.eh_frame:00000000000089D4                 db  57h ; W
.eh_frame:00000000000089D5                 db    0
.eh_frame:00000000000089D6                 db    0
.eh_frame:00000000000089D7                 db    0
.eh_frame:00000000000089D8                 db    0
.eh_frame:00000000000089D9                 db  63h ; c
.eh_frame:00000000000089DA                 db  0Eh
.eh_frame:00000000000089DB                 db  10h
.eh_frame:00000000000089DC                 db  8Ch
.eh_frame:00000000000089DD                 db    2
.eh_frame:00000000000089DE                 db  41h ; A
.eh_frame:00000000000089DF                 db  0Eh
.eh_frame:00000000000089E0                 db  18h
.eh_frame:00000000000089E1                 db  86h
.eh_frame:00000000000089E2                 db    3
.eh_frame:00000000000089E3                 db  44h ; D
.eh_frame:00000000000089E4                 db  0Eh
.eh_frame:00000000000089E5                 db  20h
.eh_frame:00000000000089E6                 db  83h
.eh_frame:00000000000089E7                 db    4
.eh_frame:00000000000089E8                 db  6Bh ; k
.eh_frame:00000000000089E9                 db  0Eh
.eh_frame:00000000000089EA                 db  18h
.eh_frame:00000000000089EB                 db  41h ; A
.eh_frame:00000000000089EC                 db  0Eh
.eh_frame:00000000000089ED                 db  10h
.eh_frame:00000000000089EE                 db  42h ; B
.eh_frame:00000000000089EF                 db  0Eh
.eh_frame:00000000000089F0                 db    8
.eh_frame:00000000000089F1                 db    0
.eh_frame:00000000000089F2                 db    0
.eh_frame:00000000000089F3                 db    0
.eh_frame:00000000000089F4                 db    0
.eh_frame:00000000000089F5                 db    0
.eh_frame:00000000000089F6                 db    0
.eh_frame:00000000000089F7                 db    0
.eh_frame:00000000000089F8                 db  14h
.eh_frame:00000000000089F9                 db    0
.eh_frame:00000000000089FA                 db    0
.eh_frame:00000000000089FB                 db    0
.eh_frame:00000000000089FC                 db  14h
.eh_frame:00000000000089FD                 db  0Bh
.eh_frame:00000000000089FE                 db    0
.eh_frame:00000000000089FF                 db    0
.eh_frame:0000000000008A00                 db  10h
.eh_frame:0000000000008A01                 db 0C2h
.eh_frame:0000000000008A02                 db 0FFh
.eh_frame:0000000000008A03                 db 0FFh
.eh_frame:0000000000008A04                 db    4
.eh_frame:0000000000008A05                 db    0
.eh_frame:0000000000008A06                 db    0
.eh_frame:0000000000008A07                 db    0
.eh_frame:0000000000008A08                 db    0
.eh_frame:0000000000008A09                 db    0
.eh_frame:0000000000008A0A                 db    0
.eh_frame:0000000000008A0B                 db    0
.eh_frame:0000000000008A0C                 db    0
.eh_frame:0000000000008A0D                 db    0
.eh_frame:0000000000008A0E                 db    0
.eh_frame:0000000000008A0F                 db    0
.eh_frame:0000000000008A10                 db  2Ch ; ,
.eh_frame:0000000000008A11                 db    0
.eh_frame:0000000000008A12                 db    0
.eh_frame:0000000000008A13                 db    0
.eh_frame:0000000000008A14                 db  2Ch ; ,
.eh_frame:0000000000008A15                 db  0Bh
.eh_frame:0000000000008A16                 db    0
.eh_frame:0000000000008A17                 db    0
.eh_frame:0000000000008A18                 db    8
.eh_frame:0000000000008A19                 db 0C2h
.eh_frame:0000000000008A1A                 db 0FFh
.eh_frame:0000000000008A1B                 db 0FFh
.eh_frame:0000000000008A1C                 db  1Fh
.eh_frame:0000000000008A1D                 db  11h
.eh_frame:0000000000008A1E                 db    0
.eh_frame:0000000000008A1F                 db    0
.eh_frame:0000000000008A20                 db    0
.eh_frame:0000000000008A21                 db  41h ; A
.eh_frame:0000000000008A22                 db  0Eh
.eh_frame:0000000000008A23                 db  10h
.eh_frame:0000000000008A24                 db  86h
.eh_frame:0000000000008A25                 db    2
.eh_frame:0000000000008A26                 db  43h ; C
.eh_frame:0000000000008A27                 db  0Dh
.eh_frame:0000000000008A28                 db    6
.eh_frame:0000000000008A29                 db  48h ; H
.eh_frame:0000000000008A2A                 db  8Fh
.eh_frame:0000000000008A2B                 db    3
.eh_frame:0000000000008A2C                 db  8Eh
.eh_frame:0000000000008A2D                 db    4
.eh_frame:0000000000008A2E                 db  8Dh
.eh_frame:0000000000008A2F                 db    5
.eh_frame:0000000000008A30                 db  8Ch
.eh_frame:0000000000008A31                 db    6
.eh_frame:0000000000008A32                 db  48h ; H
.eh_frame:0000000000008A33                 db  83h
.eh_frame:0000000000008A34                 db    7
.eh_frame:0000000000008A35                 db    3
.eh_frame:0000000000008A36                 db 0EFh
.eh_frame:0000000000008A37                 db    1
.eh_frame:0000000000008A38                 db  0Ah
.eh_frame:0000000000008A39                 db  0Ch
.eh_frame:0000000000008A3A                 db    7
.eh_frame:0000000000008A3B                 db    8
.eh_frame:0000000000008A3C                 db  45h ; E
.eh_frame:0000000000008A3D                 db  0Bh
.eh_frame:0000000000008A3E                 db    0
.eh_frame:0000000000008A3F                 db    0
.eh_frame:0000000000008A40                 db  14h
.eh_frame:0000000000008A41                 db    0
.eh_frame:0000000000008A42                 db    0
.eh_frame:0000000000008A43                 db    0
.eh_frame:0000000000008A44                 db  5Ch ; \
.eh_frame:0000000000008A45                 db  0Bh
.eh_frame:0000000000008A46                 db    0
.eh_frame:0000000000008A47                 db    0
.eh_frame:0000000000008A48                 db 0F8h
.eh_frame:0000000000008A49                 db 0D2h
.eh_frame:0000000000008A4A                 db 0FFh
.eh_frame:0000000000008A4B                 db 0FFh
.eh_frame:0000000000008A4C                 db 0FEh
.eh_frame:0000000000008A4D                 db    1
.eh_frame:0000000000008A4E                 db    0
.eh_frame:0000000000008A4F                 db    0
.eh_frame:0000000000008A50                 db    0
.eh_frame:0000000000008A51                 db    0
.eh_frame:0000000000008A52                 db    0
.eh_frame:0000000000008A53                 db    0
.eh_frame:0000000000008A54                 db    0
.eh_frame:0000000000008A55                 db    0
.eh_frame:0000000000008A56                 db    0
.eh_frame:0000000000008A57                 db    0
.eh_frame:0000000000008A58                 db  4Ch ; L
.eh_frame:0000000000008A59                 db    0
.eh_frame:0000000000008A5A                 db    0
.eh_frame:0000000000008A5B                 db    0
.eh_frame:0000000000008A5C                 db  74h ; t
.eh_frame:0000000000008A5D                 db  0Bh
.eh_frame:0000000000008A5E                 db    0
.eh_frame:0000000000008A5F                 db    0
.eh_frame:0000000000008A60                 db 0E0h
.eh_frame:0000000000008A61                 db 0D4h
.eh_frame:0000000000008A62                 db 0FFh
.eh_frame:0000000000008A63                 db 0FFh
.eh_frame:0000000000008A64                 db 0ECh
.eh_frame:0000000000008A65                 db  0Ch
.eh_frame:0000000000008A66                 db    0
.eh_frame:0000000000008A67                 db    0
.eh_frame:0000000000008A68                 db    0
.eh_frame:0000000000008A69                 db  42h ; B
.eh_frame:0000000000008A6A                 db  0Eh
.eh_frame:0000000000008A6B                 db  10h
.eh_frame:0000000000008A6C                 db  8Fh
.eh_frame:0000000000008A6D                 db    2
.eh_frame:0000000000008A6E                 db  42h ; B
.eh_frame:0000000000008A6F                 db  0Eh
.eh_frame:0000000000008A70                 db  18h
.eh_frame:0000000000008A71                 db  8Eh
.eh_frame:0000000000008A72                 db    3
.eh_frame:0000000000008A73                 db  46h ; F
.eh_frame:0000000000008A74                 db  0Eh
.eh_frame:0000000000008A75                 db  20h
.eh_frame:0000000000008A76                 db  8Dh
.eh_frame:0000000000008A77                 db    4
.eh_frame:0000000000008A78                 db  42h ; B
.eh_frame:0000000000008A79                 db  0Eh
.eh_frame:0000000000008A7A                 db  28h ; (
.eh_frame:0000000000008A7B                 db  8Ch
.eh_frame:0000000000008A7C                 db    5
.eh_frame:0000000000008A7D                 db  45h ; E
.eh_frame:0000000000008A7E                 db  0Eh
.eh_frame:0000000000008A7F                 db  30h ; 0
.eh_frame:0000000000008A80                 db  86h
.eh_frame:0000000000008A81                 db    6
.eh_frame:0000000000008A82                 db  41h ; A
.eh_frame:0000000000008A83                 db  0Eh
.eh_frame:0000000000008A84                 db  38h ; 8
.eh_frame:0000000000008A85                 db  83h
.eh_frame:0000000000008A86                 db    7
.eh_frame:0000000000008A87                 db  52h ; R
.eh_frame:0000000000008A88                 db  0Eh
.eh_frame:0000000000008A89                 db  90h
.eh_frame:0000000000008A8A                 db    1
.eh_frame:0000000000008A8B                 db    2
.eh_frame:0000000000008A8C                 db  82h
.eh_frame:0000000000008A8D                 db  0Ah
.eh_frame:0000000000008A8E                 db  0Eh
.eh_frame:0000000000008A8F                 db  38h ; 8
.eh_frame:0000000000008A90                 db  41h ; A
.eh_frame:0000000000008A91                 db  0Eh
.eh_frame:0000000000008A92                 db  30h ; 0
.eh_frame:0000000000008A93                 db  41h ; A
.eh_frame:0000000000008A94                 db  0Eh
.eh_frame:0000000000008A95                 db  28h ; (
.eh_frame:0000000000008A96                 db  42h ; B
.eh_frame:0000000000008A97                 db  0Eh
.eh_frame:0000000000008A98                 db  20h
.eh_frame:0000000000008A99                 db  42h ; B
.eh_frame:0000000000008A9A                 db  0Eh
.eh_frame:0000000000008A9B                 db  18h
.eh_frame:0000000000008A9C                 db  42h ; B
.eh_frame:0000000000008A9D                 db  0Eh
.eh_frame:0000000000008A9E                 db  10h
.eh_frame:0000000000008A9F                 db  42h ; B
.eh_frame:0000000000008AA0                 db  0Eh
.eh_frame:0000000000008AA1                 db    8
.eh_frame:0000000000008AA2                 db  48h ; H
.eh_frame:0000000000008AA3                 db  0Bh
.eh_frame:0000000000008AA4                 db    0
.eh_frame:0000000000008AA5                 db    0
.eh_frame:0000000000008AA6                 db    0
.eh_frame:0000000000008AA7                 db    0
.eh_frame:0000000000008AA8                 db  44h ; D
.eh_frame:0000000000008AA9                 db    0
.eh_frame:0000000000008AAA                 db    0
.eh_frame:0000000000008AAB                 db    0
.eh_frame:0000000000008AAC                 db 0C4h
.eh_frame:0000000000008AAD                 db  0Bh
.eh_frame:0000000000008AAE                 db    0
.eh_frame:0000000000008AAF                 db    0
.eh_frame:0000000000008AB0                 db  80h
.eh_frame:0000000000008AB1                 db 0E1h
.eh_frame:0000000000008AB2                 db 0FFh
.eh_frame:0000000000008AB3                 db 0FFh
.eh_frame:0000000000008AB4                 db  65h ; e
.eh_frame:0000000000008AB5                 db    0
.eh_frame:0000000000008AB6                 db    0
.eh_frame:0000000000008AB7                 db    0
.eh_frame:0000000000008AB8                 db    0
.eh_frame:0000000000008AB9                 db  42h ; B
.eh_frame:0000000000008ABA                 db  0Eh
.eh_frame:0000000000008ABB                 db  10h
.eh_frame:0000000000008ABC                 db  8Fh
.eh_frame:0000000000008ABD                 db    2
.eh_frame:0000000000008ABE                 db  42h ; B
.eh_frame:0000000000008ABF                 db  0Eh
.eh_frame:0000000000008AC0                 db  18h
.eh_frame:0000000000008AC1                 db  8Eh
.eh_frame:0000000000008AC2                 db    3
.eh_frame:0000000000008AC3                 db  45h ; E
.eh_frame:0000000000008AC4                 db  0Eh
.eh_frame:0000000000008AC5                 db  20h
.eh_frame:0000000000008AC6                 db  8Dh
.eh_frame:0000000000008AC7                 db    4
.eh_frame:0000000000008AC8                 db  42h ; B
.eh_frame:0000000000008AC9                 db  0Eh
.eh_frame:0000000000008ACA                 db  28h ; (
.eh_frame:0000000000008ACB                 db  8Ch
.eh_frame:0000000000008ACC                 db    5
.eh_frame:0000000000008ACD                 db  48h ; H
.eh_frame:0000000000008ACE                 db  0Eh
.eh_frame:0000000000008ACF                 db  30h ; 0
.eh_frame:0000000000008AD0                 db  86h
.eh_frame:0000000000008AD1                 db    6
.eh_frame:0000000000008AD2                 db  48h ; H
.eh_frame:0000000000008AD3                 db  0Eh
.eh_frame:0000000000008AD4                 db  38h ; 8
.eh_frame:0000000000008AD5                 db  83h
.eh_frame:0000000000008AD6                 db    7
.eh_frame:0000000000008AD7                 db  4Dh ; M
.eh_frame:0000000000008AD8                 db  0Eh
.eh_frame:0000000000008AD9                 db  40h ; @
.eh_frame:0000000000008ADA                 db  72h ; r
.eh_frame:0000000000008ADB                 db  0Eh
.eh_frame:0000000000008ADC                 db  38h ; 8
.eh_frame:0000000000008ADD                 db  41h ; A
.eh_frame:0000000000008ADE                 db  0Eh
.eh_frame:0000000000008ADF                 db  30h ; 0
.eh_frame:0000000000008AE0                 db  41h ; A
.eh_frame:0000000000008AE1                 db  0Eh
.eh_frame:0000000000008AE2                 db  28h ; (
.eh_frame:0000000000008AE3                 db  42h ; B
.eh_frame:0000000000008AE4                 db  0Eh
.eh_frame:0000000000008AE5                 db  20h
.eh_frame:0000000000008AE6                 db  42h ; B
.eh_frame:0000000000008AE7                 db  0Eh
.eh_frame:0000000000008AE8                 db  18h
.eh_frame:0000000000008AE9                 db  42h ; B
.eh_frame:0000000000008AEA                 db  0Eh
.eh_frame:0000000000008AEB                 db  10h
.eh_frame:0000000000008AEC                 db  42h ; B
.eh_frame:0000000000008AED                 db  0Eh
.eh_frame:0000000000008AEE                 db    8
.eh_frame:0000000000008AEF                 db    0
.eh_frame:0000000000008AF0                 db  14h
.eh_frame:0000000000008AF1                 db    0
.eh_frame:0000000000008AF2                 db    0
.eh_frame:0000000000008AF3                 db    0
.eh_frame:0000000000008AF4                 db  0Ch
.eh_frame:0000000000008AF5                 db  0Ch
.eh_frame:0000000000008AF6                 db    0
.eh_frame:0000000000008AF7                 db    0
.eh_frame:0000000000008AF8                 db 0A8h
.eh_frame:0000000000008AF9                 db 0E1h
.eh_frame:0000000000008AFA                 db 0FFh
.eh_frame:0000000000008AFB                 db 0FFh
.eh_frame:0000000000008AFC                 db    2
.eh_frame:0000000000008AFD                 db    0
.eh_frame:0000000000008AFE                 db    0
.eh_frame:0000000000008AFF                 db    0
.eh_frame:0000000000008B00                 db    0
.eh_frame:0000000000008B01                 db    0
.eh_frame:0000000000008B02                 db    0
.eh_frame:0000000000008B03                 db    0
.eh_frame:0000000000008B04                 db    0
.eh_frame:0000000000008B05                 db    0
.eh_frame:0000000000008B06                 db    0
.eh_frame:0000000000008B07                 db    0
.eh_frame:0000000000008B08                 db  10h
.eh_frame:0000000000008B09                 db    0
.eh_frame:0000000000008B0A                 db    0
.eh_frame:0000000000008B0B                 db    0
.eh_frame:0000000000008B0C                 db  24h ; $
.eh_frame:0000000000008B0D                 db  0Ch
.eh_frame:0000000000008B0E                 db    0
.eh_frame:0000000000008B0F                 db    0
.eh_frame:0000000000008B10                 db 0A0h
.eh_frame:0000000000008B11                 db 0E1h
.eh_frame:0000000000008B12                 db 0FFh
.eh_frame:0000000000008B13                 db 0FFh
.eh_frame:0000000000008B14                 db  0Eh
.eh_frame:0000000000008B15                 db    0
.eh_frame:0000000000008B16                 db    0
.eh_frame:0000000000008B17                 db    0
.eh_frame:0000000000008B18                 db    0
.eh_frame:0000000000008B19                 db    0
.eh_frame:0000000000008B1A                 db    0
.eh_frame:0000000000008B1B                 db    0
.eh_frame:0000000000008B1C __FRAME_END__   db    0
.eh_frame:0000000000008B1D                 db    0
.eh_frame:0000000000008B1E                 db    0
.eh_frame:0000000000008B1F                 db    0
.eh_frame:0000000000008B1F _eh_frame       ends
.eh_frame:0000000000008B1F
.init_array:0000000000209AF0 ; ELF Initialization Function Table
.init_array:0000000000209AF0 ; ===========================================================================
.init_array:0000000000209AF0
.init_array:0000000000209AF0 ; Segment type: Pure data
.init_array:0000000000209AF0 ; Segment permissions: Read/Write
.init_array:0000000000209AF0 _init_array     segment qword public 'DATA' use64
.init_array:0000000000209AF0                 assume cs:_init_array
.init_array:0000000000209AF0                 ;org 209AF0h
.init_array:0000000000209AF0 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:0000000000209AF0                                         ; DATA XREF: LOAD:00000000000000F8↑o
.init_array:0000000000209AF0                                         ; LOAD:0000000000000210↑o ...
.init_array:0000000000209AF0 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:0000000000209AF0
.fini_array:0000000000209AF8 ; ELF Termination Function Table
.fini_array:0000000000209AF8 ; ===========================================================================
.fini_array:0000000000209AF8
.fini_array:0000000000209AF8 ; Segment type: Pure data
.fini_array:0000000000209AF8 ; Segment permissions: Read/Write
.fini_array:0000000000209AF8 _fini_array     segment qword public 'DATA' use64
.fini_array:0000000000209AF8                 assume cs:_fini_array
.fini_array:0000000000209AF8                 ;org 209AF8h
.fini_array:0000000000209AF8 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:0000000000209AF8                                         ; DATA XREF: __libc_csu_init+13↑o
.fini_array:0000000000209AF8 _fini_array     ends                    ; Alternative name is '__init_array_end'
.fini_array:0000000000209AF8
.data.rel.ro:0000000000209B00 ; ===========================================================================
.data.rel.ro:0000000000209B00
.data.rel.ro:0000000000209B00 ; Segment type: Pure data
.data.rel.ro:0000000000209B00 ; Segment permissions: Read/Write
.data.rel.ro:0000000000209B00 _data_rel_ro    segment align_32 public 'DATA' use64
.data.rel.ro:0000000000209B00                 assume cs:_data_rel_ro
.data.rel.ro:0000000000209B00                 ;org 209B00h
.data.rel.ro:0000000000209B00 ; struct option longopts
.data.rel.ro:0000000000209B00 longopts        dq offset aIgnoreFailOnNo; name
.data.rel.ro:0000000000209B00                                         ; DATA XREF: main+8↑o
.data.rel.ro:0000000000209B00                 dd 0                    ; has_arg ; "ignore-fail-on-non-empty"
.data.rel.ro:0000000000209B00                 db 4 dup(0)
.data.rel.ro:0000000000209B00                 dq 0                    ; flag
.data.rel.ro:0000000000209B00                 dd 80h                  ; val
.data.rel.ro:0000000000209B00                 db 4 dup(0)
.data.rel.ro:0000000000209B20                 dq offset aPath         ; "path"
.data.rel.ro:0000000000209B28                 db    0
.data.rel.ro:0000000000209B29                 db    0
.data.rel.ro:0000000000209B2A                 db    0
.data.rel.ro:0000000000209B2B                 db    0
.data.rel.ro:0000000000209B2C                 db    0
.data.rel.ro:0000000000209B2D                 db    0
.data.rel.ro:0000000000209B2E                 db    0
.data.rel.ro:0000000000209B2F                 db    0
.data.rel.ro:0000000000209B30                 db    0
.data.rel.ro:0000000000209B31                 db    0
.data.rel.ro:0000000000209B32                 db    0
.data.rel.ro:0000000000209B33                 db    0
.data.rel.ro:0000000000209B34                 db    0
.data.rel.ro:0000000000209B35                 db    0
.data.rel.ro:0000000000209B36                 db    0
.data.rel.ro:0000000000209B37                 db    0
.data.rel.ro:0000000000209B38                 db  70h ; p
.data.rel.ro:0000000000209B39                 db    0
.data.rel.ro:0000000000209B3A                 db    0
.data.rel.ro:0000000000209B3B                 db    0
.data.rel.ro:0000000000209B3C                 db    0
.data.rel.ro:0000000000209B3D                 db    0
.data.rel.ro:0000000000209B3E                 db    0
.data.rel.ro:0000000000209B3F                 db    0
.data.rel.ro:0000000000209B40                 dq offset aParents      ; "parents"
.data.rel.ro:0000000000209B48                 db    0
.data.rel.ro:0000000000209B49                 db    0
.data.rel.ro:0000000000209B4A                 db    0
.data.rel.ro:0000000000209B4B                 db    0
.data.rel.ro:0000000000209B4C                 db    0
.data.rel.ro:0000000000209B4D                 db    0
.data.rel.ro:0000000000209B4E                 db    0
.data.rel.ro:0000000000209B4F                 db    0
.data.rel.ro:0000000000209B50                 db    0
.data.rel.ro:0000000000209B51                 db    0
.data.rel.ro:0000000000209B52                 db    0
.data.rel.ro:0000000000209B53                 db    0
.data.rel.ro:0000000000209B54                 db    0
.data.rel.ro:0000000000209B55                 db    0
.data.rel.ro:0000000000209B56                 db    0
.data.rel.ro:0000000000209B57                 db    0
.data.rel.ro:0000000000209B58                 db  70h ; p
.data.rel.ro:0000000000209B59                 db    0
.data.rel.ro:0000000000209B5A                 db    0
.data.rel.ro:0000000000209B5B                 db    0
.data.rel.ro:0000000000209B5C                 db    0
.data.rel.ro:0000000000209B5D                 db    0
.data.rel.ro:0000000000209B5E                 db    0
.data.rel.ro:0000000000209B5F                 db    0
.data.rel.ro:0000000000209B60                 dq offset aVerbose      ; "verbose"
.data.rel.ro:0000000000209B68                 db    0
.data.rel.ro:0000000000209B69                 db    0
.data.rel.ro:0000000000209B6A                 db    0
.data.rel.ro:0000000000209B6B                 db    0
.data.rel.ro:0000000000209B6C                 db    0
.data.rel.ro:0000000000209B6D                 db    0
.data.rel.ro:0000000000209B6E                 db    0
.data.rel.ro:0000000000209B6F                 db    0
.data.rel.ro:0000000000209B70                 db    0
.data.rel.ro:0000000000209B71                 db    0
.data.rel.ro:0000000000209B72                 db    0
.data.rel.ro:0000000000209B73                 db    0
.data.rel.ro:0000000000209B74                 db    0
.data.rel.ro:0000000000209B75                 db    0
.data.rel.ro:0000000000209B76                 db    0
.data.rel.ro:0000000000209B77                 db    0
.data.rel.ro:0000000000209B78                 db  76h ; v
.data.rel.ro:0000000000209B79                 db    0
.data.rel.ro:0000000000209B7A                 db    0
.data.rel.ro:0000000000209B7B                 db    0
.data.rel.ro:0000000000209B7C                 db    0
.data.rel.ro:0000000000209B7D                 db    0
.data.rel.ro:0000000000209B7E                 db    0
.data.rel.ro:0000000000209B7F                 db    0
.data.rel.ro:0000000000209B80                 dq offset aHelp         ; "help"
.data.rel.ro:0000000000209B88                 db    0
.data.rel.ro:0000000000209B89                 db    0
.data.rel.ro:0000000000209B8A                 db    0
.data.rel.ro:0000000000209B8B                 db    0
.data.rel.ro:0000000000209B8C                 db    0
.data.rel.ro:0000000000209B8D                 db    0
.data.rel.ro:0000000000209B8E                 db    0
.data.rel.ro:0000000000209B8F                 db    0
.data.rel.ro:0000000000209B90                 db    0
.data.rel.ro:0000000000209B91                 db    0
.data.rel.ro:0000000000209B92                 db    0
.data.rel.ro:0000000000209B93                 db    0
.data.rel.ro:0000000000209B94                 db    0
.data.rel.ro:0000000000209B95                 db    0
.data.rel.ro:0000000000209B96                 db    0
.data.rel.ro:0000000000209B97                 db    0
.data.rel.ro:0000000000209B98                 db  7Eh ; ~
.data.rel.ro:0000000000209B99                 db 0FFh
.data.rel.ro:0000000000209B9A                 db 0FFh
.data.rel.ro:0000000000209B9B                 db 0FFh
.data.rel.ro:0000000000209B9C                 db    0
.data.rel.ro:0000000000209B9D                 db    0
.data.rel.ro:0000000000209B9E                 db    0
.data.rel.ro:0000000000209B9F                 db    0
.data.rel.ro:0000000000209BA0                 dq offset aVersion      ; "version"
.data.rel.ro:0000000000209BA8                 db    0
.data.rel.ro:0000000000209BA9                 db    0
.data.rel.ro:0000000000209BAA                 db    0
.data.rel.ro:0000000000209BAB                 db    0
.data.rel.ro:0000000000209BAC                 db    0
.data.rel.ro:0000000000209BAD                 db    0
.data.rel.ro:0000000000209BAE                 db    0
.data.rel.ro:0000000000209BAF                 db    0
.data.rel.ro:0000000000209BB0                 db    0
.data.rel.ro:0000000000209BB1                 db    0
.data.rel.ro:0000000000209BB2                 db    0
.data.rel.ro:0000000000209BB3                 db    0
.data.rel.ro:0000000000209BB4                 db    0
.data.rel.ro:0000000000209BB5                 db    0
.data.rel.ro:0000000000209BB6                 db    0
.data.rel.ro:0000000000209BB7                 db    0
.data.rel.ro:0000000000209BB8                 db  7Dh ; }
.data.rel.ro:0000000000209BB9                 db 0FFh
.data.rel.ro:0000000000209BBA                 db 0FFh
.data.rel.ro:0000000000209BBB                 db 0FFh
.data.rel.ro:0000000000209BBC                 db    0
.data.rel.ro:0000000000209BBD                 db    0
.data.rel.ro:0000000000209BBE                 db    0
.data.rel.ro:0000000000209BBF                 db    0
.data.rel.ro:0000000000209BC0                 db    0
.data.rel.ro:0000000000209BC1                 db    0
.data.rel.ro:0000000000209BC2                 db    0
.data.rel.ro:0000000000209BC3                 db    0
.data.rel.ro:0000000000209BC4                 db    0
.data.rel.ro:0000000000209BC5                 db    0
.data.rel.ro:0000000000209BC6                 db    0
.data.rel.ro:0000000000209BC7                 db    0
.data.rel.ro:0000000000209BC8                 db    0
.data.rel.ro:0000000000209BC9                 db    0
.data.rel.ro:0000000000209BCA                 db    0
.data.rel.ro:0000000000209BCB                 db    0
.data.rel.ro:0000000000209BCC                 db    0
.data.rel.ro:0000000000209BCD                 db    0
.data.rel.ro:0000000000209BCE                 db    0
.data.rel.ro:0000000000209BCF                 db    0
.data.rel.ro:0000000000209BD0                 db    0
.data.rel.ro:0000000000209BD1                 db    0
.data.rel.ro:0000000000209BD2                 db    0
.data.rel.ro:0000000000209BD3                 db    0
.data.rel.ro:0000000000209BD4                 db    0
.data.rel.ro:0000000000209BD5                 db    0
.data.rel.ro:0000000000209BD6                 db    0
.data.rel.ro:0000000000209BD7                 db    0
.data.rel.ro:0000000000209BD8                 db    0
.data.rel.ro:0000000000209BD9                 db    0
.data.rel.ro:0000000000209BDA                 db    0
.data.rel.ro:0000000000209BDB                 db    0
.data.rel.ro:0000000000209BDC                 db    0
.data.rel.ro:0000000000209BDD                 db    0
.data.rel.ro:0000000000209BDE                 db    0
.data.rel.ro:0000000000209BDF                 db    0
.data.rel.ro:0000000000209BE0                 public quoting_style_args
.data.rel.ro:0000000000209BE0 quoting_style_args dq offset aLiteral   ; "literal"
.data.rel.ro:0000000000209BE8                 dq offset aShell        ; "shell"
.data.rel.ro:0000000000209BF0                 dq offset aShellAlways  ; "shell-always"
.data.rel.ro:0000000000209BF8                 dq offset aShellEscape  ; "shell-escape"
.data.rel.ro:0000000000209C00                 dq offset aShellEscapeAlw ; "shell-escape-always"
.data.rel.ro:0000000000209C08                 dq offset aC_1          ; "c"
.data.rel.ro:0000000000209C10                 dq offset aCMaybe       ; "c-maybe"
.data.rel.ro:0000000000209C18                 dq offset aShellEscape+6 ; "escape"
.data.rel.ro:0000000000209C20                 dq offset dirname+11h   ; "locale"
.data.rel.ro:0000000000209C28                 dq offset aClocale      ; "clocale"
.data.rel.ro:0000000000209C30                 db    0
.data.rel.ro:0000000000209C31                 db    0
.data.rel.ro:0000000000209C32                 db    0
.data.rel.ro:0000000000209C33                 db    0
.data.rel.ro:0000000000209C34                 db    0
.data.rel.ro:0000000000209C35                 db    0
.data.rel.ro:0000000000209C36                 db    0
.data.rel.ro:0000000000209C37                 db    0
.data.rel.ro:0000000000209C37 _data_rel_ro    ends
.data.rel.ro:0000000000209C37
LOAD:0000000000209C38 ; ELF Dynamic Information
LOAD:0000000000209C38 ; ===========================================================================
LOAD:0000000000209C38
LOAD:0000000000209C38 ; Segment type: Pure data
LOAD:0000000000209C38 ; Segment permissions: Read/Write
LOAD:0000000000209C38 LOAD            segment byte public 'DATA' use64
LOAD:0000000000209C38                 assume cs:LOAD
LOAD:0000000000209C38                 ;org 209C38h
LOAD:0000000000209C38 _DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000000130↑o
LOAD:0000000000209C38                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:0000000000209C38                                         ; DT_NEEDED libc.so.6
LOAD:0000000000209C48                 Elf64_Dyn <0Ch, 13B8h>  ; DT_INIT
LOAD:0000000000209C58                 Elf64_Dyn <0Dh, 6CC0h>  ; DT_FINI
LOAD:0000000000209C68                 Elf64_Dyn <19h, 209AF0h> ; DT_INIT_ARRAY
LOAD:0000000000209C78                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:0000000000209C88                 Elf64_Dyn <1Ah, 209AF8h> ; DT_FINI_ARRAY
LOAD:0000000000209C98                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:0000000000209CA8                 Elf64_Dyn <6FFFFEF5h, 298h> ; DT_GNU_HASH
LOAD:0000000000209CB8                 Elf64_Dyn <5, 890h>     ; DT_STRTAB
LOAD:0000000000209CC8                 Elf64_Dyn <6, 2D8h>     ; DT_SYMTAB
LOAD:0000000000209CD8                 Elf64_Dyn <0Ah, 2CAh>   ; DT_STRSZ
LOAD:0000000000209CE8                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:0000000000209CF8                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:0000000000209D08                 Elf64_Dyn <3, 209E28h>  ; DT_PLTGOT
LOAD:0000000000209D18                 Elf64_Dyn <2, 480h>     ; DT_PLTRELSZ
LOAD:0000000000209D28                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:0000000000209D38                 Elf64_Dyn <17h, 0F38h>  ; DT_JMPREL
LOAD:0000000000209D48                 Elf64_Dyn <7, 0C38h>    ; DT_RELA
LOAD:0000000000209D58                 Elf64_Dyn <8, 300h>     ; DT_RELASZ
LOAD:0000000000209D68                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:0000000000209D78                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:0000000000209D88                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:0000000000209D98                 Elf64_Dyn <6FFFFFFEh, 0BD8h> ; DT_VERNEED
LOAD:0000000000209DA8                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:0000000000209DB8                 Elf64_Dyn <6FFFFFF0h, 0B5Ah> ; DT_VERSYM
LOAD:0000000000209DC8                 Elf64_Dyn <6FFFFFF9h, 16h> ; DT_RELACOUNT
LOAD:0000000000209DD8                 Elf64_Dyn <0>           ; DT_NULL
LOAD:0000000000209DE8                 db    0
LOAD:0000000000209DE9                 db    0
LOAD:0000000000209DEA                 db    0
LOAD:0000000000209DEB                 db    0
LOAD:0000000000209DEC                 db    0
LOAD:0000000000209DED                 db    0
LOAD:0000000000209DEE                 db    0
LOAD:0000000000209DEF                 db    0
LOAD:0000000000209DF0                 db    0
LOAD:0000000000209DF1                 db    0
LOAD:0000000000209DF2                 db    0
LOAD:0000000000209DF3                 db    0
LOAD:0000000000209DF4                 db    0
LOAD:0000000000209DF5                 db    0
LOAD:0000000000209DF6                 db    0
LOAD:0000000000209DF7                 db    0
LOAD:0000000000209DF8                 db    0
LOAD:0000000000209DF9                 db    0
LOAD:0000000000209DFA                 db    0
LOAD:0000000000209DFB                 db    0
LOAD:0000000000209DFC                 db    0
LOAD:0000000000209DFD                 db    0
LOAD:0000000000209DFE                 db    0
LOAD:0000000000209DFF                 db    0
LOAD:0000000000209E00                 db    0
LOAD:0000000000209E01                 db    0
LOAD:0000000000209E02                 db    0
LOAD:0000000000209E03                 db    0
LOAD:0000000000209E04                 db    0
LOAD:0000000000209E05                 db    0
LOAD:0000000000209E06                 db    0
LOAD:0000000000209E07                 db    0
LOAD:0000000000209E08                 db    0
LOAD:0000000000209E09                 db    0
LOAD:0000000000209E0A                 db    0
LOAD:0000000000209E0B                 db    0
LOAD:0000000000209E0C                 db    0
LOAD:0000000000209E0D                 db    0
LOAD:0000000000209E0E                 db    0
LOAD:0000000000209E0F                 db    0
LOAD:0000000000209E10                 db    0
LOAD:0000000000209E11                 db    0
LOAD:0000000000209E12                 db    0
LOAD:0000000000209E13                 db    0
LOAD:0000000000209E14                 db    0
LOAD:0000000000209E15                 db    0
LOAD:0000000000209E16                 db    0
LOAD:0000000000209E17                 db    0
LOAD:0000000000209E18                 db    0
LOAD:0000000000209E19                 db    0
LOAD:0000000000209E1A                 db    0
LOAD:0000000000209E1B                 db    0
LOAD:0000000000209E1C                 db    0
LOAD:0000000000209E1D                 db    0
LOAD:0000000000209E1E                 db    0
LOAD:0000000000209E1F                 db    0
LOAD:0000000000209E20                 db    0
LOAD:0000000000209E21                 db    0
LOAD:0000000000209E22                 db    0
LOAD:0000000000209E23                 db    0
LOAD:0000000000209E24                 db    0
LOAD:0000000000209E25                 db    0
LOAD:0000000000209E26                 db    0
LOAD:0000000000209E27                 db    0
LOAD:0000000000209E27 LOAD            ends
LOAD:0000000000209E27
.got:0000000000209E28 ; ===========================================================================
.got:0000000000209E28
.got:0000000000209E28 ; Segment type: Pure data
.got:0000000000209E28 ; Segment permissions: Read/Write
.got:0000000000209E28 _got            segment qword public 'DATA' use64
.got:0000000000209E28                 assume cs:_got
.got:0000000000209E28                 ;org 209E28h
.got:0000000000209E28 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:0000000000209E30 qword_209E30    dq 0                    ; DATA XREF: sub_13D0↑r
.got:0000000000209E38 qword_209E38    dq 0                    ; DATA XREF: sub_13D0+6↑r
.got:0000000000209E40 __snprintf_chk_ptr dq offset __snprintf_chk
.got:0000000000209E40                                         ; DATA XREF: ___snprintf_chk↑r
.got:0000000000209E48 free_ptr        dq offset free          ; DATA XREF: _free↑r
.got:0000000000209E50 abort_ptr       dq offset abort         ; DATA XREF: _abort↑r
.got:0000000000209E58 __errno_location_ptr dq offset __errno_location
.got:0000000000209E58                                         ; DATA XREF: ___errno_location↑r
.got:0000000000209E60 strncmp_ptr     dq offset strncmp       ; DATA XREF: _strncmp↑r
.got:0000000000209E68 _exit_ptr       dq offset _exit         ; DATA XREF: __exit↑r
.got:0000000000209E70 __fpending_ptr  dq offset __fpending    ; DATA XREF: ___fpending↑r
.got:0000000000209E78 textdomain_ptr  dq offset textdomain    ; DATA XREF: _textdomain↑r
.got:0000000000209E80 fclose_ptr      dq offset fclose        ; DATA XREF: _fclose↑r
.got:0000000000209E88 bindtextdomain_ptr dq offset bindtextdomain
.got:0000000000209E88                                         ; DATA XREF: _bindtextdomain↑r
.got:0000000000209E90 rmdir_ptr       dq offset rmdir         ; DATA XREF: _rmdir↑r
.got:0000000000209E98 dcgettext_ptr   dq offset dcgettext     ; DATA XREF: _dcgettext↑r
.got:0000000000209EA0 __ctype_get_mb_cur_max_ptr dq offset __ctype_get_mb_cur_max
.got:0000000000209EA0                                         ; DATA XREF: ___ctype_get_mb_cur_max↑r
.got:0000000000209EA8 strlen_ptr      dq offset strlen        ; DATA XREF: _strlen↑r
.got:0000000000209EB0 openat_ptr      dq offset openat        ; DATA XREF: _openat↑r
.got:0000000000209EB8 __stack_chk_fail_ptr dq offset __stack_chk_fail
.got:0000000000209EB8                                         ; DATA XREF: ___stack_chk_fail↑r
.got:0000000000209EC0 getopt_long_ptr dq offset getopt_long   ; DATA XREF: _getopt_long↑r
.got:0000000000209EC8 mbrtowc_ptr     dq offset mbrtowc       ; DATA XREF: _mbrtowc↑r
.got:0000000000209ED0 __overflow_ptr  dq offset __overflow    ; DATA XREF: ___overflow↑r
.got:0000000000209ED8 strrchr_ptr     dq offset strrchr       ; DATA XREF: _strrchr↑r
.got:0000000000209EE0 lseek_ptr       dq offset lseek         ; DATA XREF: _lseek↑r
.got:0000000000209EE8 memset_ptr      dq offset memset        ; DATA XREF: _memset↑r
.got:0000000000209EF0 close_ptr       dq offset close         ; DATA XREF: _close↑r
.got:0000000000209EF8 closedir_ptr    dq offset closedir      ; DATA XREF: _closedir↑r
.got:0000000000209F00 memcmp_ptr      dq offset memcmp        ; DATA XREF: _memcmp↑r
.got:0000000000209F08 fputs_unlocked_ptr dq offset fputs_unlocked
.got:0000000000209F08                                         ; DATA XREF: _fputs_unlocked↑r
.got:0000000000209F10 calloc_ptr      dq offset calloc        ; DATA XREF: _calloc↑r
.got:0000000000209F18 memcpy_ptr      dq offset memcpy        ; DATA XREF: _memcpy↑r
.got:0000000000209F20 fileno_ptr      dq offset fileno        ; DATA XREF: _fileno↑r
.got:0000000000209F28 readdir_ptr     dq offset readdir       ; DATA XREF: _readdir↑r
.got:0000000000209F30 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc↑r
.got:0000000000209F38 fflush_ptr      dq offset fflush        ; DATA XREF: _fflush↑r
.got:0000000000209F40 nl_langinfo_ptr dq offset nl_langinfo   ; DATA XREF: _nl_langinfo↑r
.got:0000000000209F48 __freading_ptr  dq offset __freading    ; DATA XREF: ___freading↑r
.got:0000000000209F50 fwrite_unlocked_ptr dq offset fwrite_unlocked
.got:0000000000209F50                                         ; DATA XREF: _fwrite_unlocked↑r
.got:0000000000209F58 realloc_ptr     dq offset realloc       ; DATA XREF: _realloc↑r
.got:0000000000209F60 setlocale_ptr   dq offset setlocale     ; DATA XREF: _setlocale↑r
.got:0000000000209F68 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk↑r
.got:0000000000209F70 error_ptr       dq offset error         ; DATA XREF: _error↑r
.got:0000000000209F78 fseeko_ptr      dq offset fseeko        ; DATA XREF: _fseeko↑r
.got:0000000000209F80 fdopendir_ptr   dq offset fdopendir     ; DATA XREF: _fdopendir↑r
.got:0000000000209F88 __cxa_atexit_ptr dq offset __cxa_atexit ; DATA XREF: ___cxa_atexit↑r
.got:0000000000209F90 exit_ptr        dq offset exit          ; DATA XREF: _exit↑r
.got:0000000000209F98 fwrite_ptr      dq offset fwrite        ; DATA XREF: _fwrite↑r
.got:0000000000209FA0 __fprintf_chk_ptr dq offset __fprintf_chk
.got:0000000000209FA0                                         ; DATA XREF: ___fprintf_chk↑r
.got:0000000000209FA8 mbsinit_ptr     dq offset mbsinit       ; DATA XREF: _mbsinit↑r
.got:0000000000209FB0 iswprint_ptr    dq offset iswprint      ; DATA XREF: _iswprint↑r
.got:0000000000209FB8 __ctype_b_loc_ptr dq offset __ctype_b_loc
.got:0000000000209FB8                                         ; DATA XREF: ___ctype_b_loc↑r
.got:0000000000209FC0 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:0000000000209FC0                                         ; DATA XREF: deregister_tm_clones+17↑r
.got:0000000000209FC8 __libc_start_main_ptr dq offset __libc_start_main
.got:0000000000209FC8                                         ; DATA XREF: start+24↑r
.got:0000000000209FD0 __gmon_start___ptr dq offset __gmon_start__
.got:0000000000209FD0                                         ; DATA XREF: _init_proc+4↑r
.got:0000000000209FD8 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:0000000000209FD8                                         ; DATA XREF: register_tm_clones+28↑r
.got:0000000000209FE0 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:0000000000209FE0                                         ; DATA XREF: __cxa_finalize↑r
.got:0000000000209FE0                                         ; __do_global_dtors_aux+9↑r
.got:0000000000209FE0 _got            ends
.got:0000000000209FE0
LOAD:0000000000209FE8 ; ===========================================================================
LOAD:0000000000209FE8
LOAD:0000000000209FE8 ; Segment type: Pure data
LOAD:0000000000209FE8 ; Segment permissions: Read/Write
LOAD:0000000000209FE8 LOAD            segment byte public 'DATA' use64
LOAD:0000000000209FE8                 assume cs:LOAD
LOAD:0000000000209FE8                 ;org 209FE8h
LOAD:0000000000209FE8                 align 20h
LOAD:0000000000209FE8 LOAD            ends
LOAD:0000000000209FE8
.data:000000000020A000 ; ===========================================================================
.data:000000000020A000
.data:000000000020A000 ; Segment type: Pure data
.data:000000000020A000 ; Segment permissions: Read/Write
.data:000000000020A000 _data           segment align_32 public 'DATA' use64
.data:000000000020A000                 assume cs:_data
.data:000000000020A000                 ;org 20A000h
.data:000000000020A000                 public __data_start ; weak
.data:000000000020A000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:000000000020A000                                         ; data_start
.data:000000000020A001                 db    0
.data:000000000020A002                 db    0
.data:000000000020A003                 db    0
.data:000000000020A004                 db    0
.data:000000000020A005                 db    0
.data:000000000020A006                 db    0
.data:000000000020A007                 db    0
.data:000000000020A008                 public __dso_handle
.data:000000000020A008 ; void *_dso_handle
.data:000000000020A008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+17↑r
.data:000000000020A008                                         ; atexit↑r ...
.data:000000000020A010                 public Version
.data:000000000020A010 Version         dq offset a831          ; DATA XREF: main+B2↑r
.data:000000000020A010                                         ; "8.31"
.data:000000000020A018                 public exit_failure
.data:000000000020A018 ; int exit_failure
.data:000000000020A018 exit_failure    dd 1                    ; DATA XREF: close_stdout:loc_2142↑r
.data:000000000020A018                                         ; xalloc_die+17↑r
.data:000000000020A01C                 align 20h
.data:000000000020A020                 public quote_quoting_options
.data:000000000020A020 quote_quoting_options db    8           ; DATA XREF: quote_n_mem↑o
.data:000000000020A020                                         ; quote_mem↑o ...
.data:000000000020A021                 db    0
.data:000000000020A022                 db    0
.data:000000000020A023                 db    0
.data:000000000020A024                 db    0
.data:000000000020A025                 db    0
.data:000000000020A026                 db    0
.data:000000000020A027                 db    0
.data:000000000020A028                 db    0
.data:000000000020A029                 db    0
.data:000000000020A02A                 db    0
.data:000000000020A02B                 db    0
.data:000000000020A02C                 db    0
.data:000000000020A02D                 db    0
.data:000000000020A02E                 db    0
.data:000000000020A02F                 db    0
.data:000000000020A030                 db    0
.data:000000000020A031                 db    0
.data:000000000020A032                 db    0
.data:000000000020A033                 db    0
.data:000000000020A034                 db    0
.data:000000000020A035                 db    0
.data:000000000020A036                 db    0
.data:000000000020A037                 db    0
.data:000000000020A038                 db    0
.data:000000000020A039                 db    0
.data:000000000020A03A                 db    0
.data:000000000020A03B                 db    0
.data:000000000020A03C                 db    0
.data:000000000020A03D                 db    0
.data:000000000020A03E                 db    0
.data:000000000020A03F                 db    0
.data:000000000020A040                 db    0
.data:000000000020A041                 db    0
.data:000000000020A042                 db    0
.data:000000000020A043                 db    0
.data:000000000020A044                 db    0
.data:000000000020A045                 db    0
.data:000000000020A046                 db    0
.data:000000000020A047                 db    0
.data:000000000020A048                 db    0
.data:000000000020A049                 db    0
.data:000000000020A04A                 db    0
.data:000000000020A04B                 db    0
.data:000000000020A04C                 db    0
.data:000000000020A04D                 db    0
.data:000000000020A04E                 db    0
.data:000000000020A04F                 db    0
.data:000000000020A050                 db    0
.data:000000000020A051                 db    0
.data:000000000020A052                 db    0
.data:000000000020A053                 db    0
.data:000000000020A054                 db    0
.data:000000000020A055                 db    0
.data:000000000020A056                 db    0
.data:000000000020A057                 db    0
.data:000000000020A058 nslots          dd 1                    ; DATA XREF: quotearg_n_options+3A↑r
.data:000000000020A058                                         ; quotearg_n_options:loc_35FD↑r ...
.data:000000000020A05C                 align 20h
.data:000000000020A060 ; void *slotvec
.data:000000000020A060 slotvec         dq offset slotvec0      ; DATA XREF: quotearg_n_options+29↑r
.data:000000000020A060                                         ; quotearg_n_options+76↑w ...
.data:000000000020A068                 align 10h
.data:000000000020A070 slotvec0        dq offset qword_100     ; DATA XREF: quotearg_n_options+54↑o
.data:000000000020A070                                         ; quotearg_n_options+187↑r ...
.data:000000000020A078 off_20A078      dq offset slot0         ; DATA XREF: quotearg_free+62↑w
.data:000000000020A078 _data           ends
.data:000000000020A078
.bss:000000000020A080 ; ===========================================================================
.bss:000000000020A080
.bss:000000000020A080 ; Segment type: Uninitialized
.bss:000000000020A080 ; Segment permissions: Read/Write
.bss:000000000020A080 _bss            segment align_32 public 'BSS' use64
.bss:000000000020A080                 assume cs:_bss
.bss:000000000020A080                 ;org 20A080h
.bss:000000000020A080                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:000000000020A080                 public __bss_start ; weak
.bss:000000000020A080 __bss_start     dq ?                    ; DATA XREF: LOAD:0000000000000800↑o
.bss:000000000020A080                                         ; LOAD:0000000000000848↑o ...
.bss:000000000020A080                                         ; Alternative name is '__TMC_END__'
.bss:000000000020A080                                         ; program_invocation_short_name@@GLIBC_2.2.5
.bss:000000000020A080                                         ; _edata
.bss:000000000020A080                                         ; Copy of shared data
.bss:000000000020A088                 public stdout@@GLIBC_2_2_5
.bss:000000000020A088 ; FILE *stdout
.bss:000000000020A088 stdout@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:00000000000007E8↑o
.bss:000000000020A088                                         ; main+AB↑r ...
.bss:000000000020A088                                         ; Alternative name is 'stdout'
.bss:000000000020A088                                         ; Copy of shared data
.bss:000000000020A090                 public optind@@GLIBC_2_2_5
.bss:000000000020A090 optind@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:0000000000000878↑o
.bss:000000000020A090                                         ; main:loc_17EC↑r ...
.bss:000000000020A090                                         ; Alternative name is 'optind'
.bss:000000000020A090                                         ; Copy of shared data
.bss:000000000020A094                 align 8
.bss:000000000020A098                 public program_invocation_name@@GLIBC_2_2_5 ; weak
.bss:000000000020A098 program_invocation_name@@GLIBC_2_2_5 dq ?
.bss:000000000020A098                                         ; DATA XREF: LOAD:0000000000000818↑o
.bss:000000000020A098                                         ; LOAD:0000000000000830↑o ...
.bss:000000000020A098                                         ; Alternative name is '__progname_full@@GLIBC_2.2.5'
.bss:000000000020A098                                         ; Copy of shared data
.bss:000000000020A0A0                 public stderr@@GLIBC_2_2_5
.bss:000000000020A0A0 ; FILE *stderr
.bss:000000000020A0A0 stderr@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000860↑o
.bss:000000000020A0A0                                         ; usage+3D↑r ...
.bss:000000000020A0A0                                         ; Alternative name is 'stderr'
.bss:000000000020A0A0                                         ; Copy of shared data
.bss:000000000020A0A8 completed_7697  db ?                    ; DATA XREF: __do_global_dtors_aux↑r
.bss:000000000020A0A8                                         ; __do_global_dtors_aux+28↑w
.bss:000000000020A0A9 verbose         db ?                    ; DATA XREF: main:loc_17E0↑w
.bss:000000000020A0A9                                         ; main:loc_1844↑r ...
.bss:000000000020A0AA ignore_fail_on_non_empty db ?           ; DATA XREF: main+96↑w
.bss:000000000020A0AA                                         ; ignorable_failure↑r
.bss:000000000020A0AB remove_empty_parents db ?               ; DATA XREF: main+5E↑w
.bss:000000000020A0AB                                         ; main:loc_17D0↑w ...
.bss:000000000020A0AC                 align 10h
.bss:000000000020A0B0 ignore_EPIPE    db ?                    ; DATA XREF: close_stdout_set_ignore_EPIPE↑w
.bss:000000000020A0B0                                         ; close_stdout+1B↑r
.bss:000000000020A0B1                 align 8
.bss:000000000020A0B8 file_name       dq ?                    ; DATA XREF: close_stdout_set_file_name↑w
.bss:000000000020A0B8                                         ; close_stdout+56↑r
.bss:000000000020A0C0                 public program_name
.bss:000000000020A0C0 ; char *program_name
.bss:000000000020A0C0 program_name    dq ?                    ; DATA XREF: usage+14↑r
.bss:000000000020A0C0                                         ; prog_fprintf+71↑r ...
.bss:000000000020A0C8                 align 20h
.bss:000000000020A0E0 slot0           db    ? ;               ; DATA XREF: quotearg_n_options+FE↑o
.bss:000000000020A0E0                                         ; quotearg_free+46↑o ...
.bss:000000000020A0E1                 db    ? ;
.bss:000000000020A0E2                 db    ? ;
.bss:000000000020A0E3                 db    ? ;
.bss:000000000020A0E4                 db    ? ;
.bss:000000000020A0E5                 db    ? ;
.bss:000000000020A0E6                 db    ? ;
.bss:000000000020A0E7                 db    ? ;
.bss:000000000020A0E8                 db    ? ;
.bss:000000000020A0E9                 db    ? ;
.bss:000000000020A0EA                 db    ? ;
.bss:000000000020A0EB                 db    ? ;
.bss:000000000020A0EC                 db    ? ;
.bss:000000000020A0ED                 db    ? ;
.bss:000000000020A0EE                 db    ? ;
.bss:000000000020A0EF                 db    ? ;
.bss:000000000020A0F0                 db    ? ;
.bss:000000000020A0F1                 db    ? ;
.bss:000000000020A0F2                 db    ? ;
.bss:000000000020A0F3                 db    ? ;
.bss:000000000020A0F4                 db    ? ;
.bss:000000000020A0F5                 db    ? ;
.bss:000000000020A0F6                 db    ? ;
.bss:000000000020A0F7                 db    ? ;
.bss:000000000020A0F8                 db    ? ;
.bss:000000000020A0F9                 db    ? ;
.bss:000000000020A0FA                 db    ? ;
.bss:000000000020A0FB                 db    ? ;
.bss:000000000020A0FC                 db    ? ;
.bss:000000000020A0FD                 db    ? ;
.bss:000000000020A0FE                 db    ? ;
.bss:000000000020A0FF                 db    ? ;
.bss:000000000020A100                 db    ? ;
.bss:000000000020A101                 db    ? ;
.bss:000000000020A102                 db    ? ;
.bss:000000000020A103                 db    ? ;
.bss:000000000020A104                 db    ? ;
.bss:000000000020A105                 db    ? ;
.bss:000000000020A106                 db    ? ;
.bss:000000000020A107                 db    ? ;
.bss:000000000020A108                 db    ? ;
.bss:000000000020A109                 db    ? ;
.bss:000000000020A10A                 db    ? ;
.bss:000000000020A10B                 db    ? ;
.bss:000000000020A10C                 db    ? ;
.bss:000000000020A10D                 db    ? ;
.bss:000000000020A10E                 db    ? ;
.bss:000000000020A10F                 db    ? ;
.bss:000000000020A110                 db    ? ;
.bss:000000000020A111                 db    ? ;
.bss:000000000020A112                 db    ? ;
.bss:000000000020A113                 db    ? ;
.bss:000000000020A114                 db    ? ;
.bss:000000000020A115                 db    ? ;
.bss:000000000020A116                 db    ? ;
.bss:000000000020A117                 db    ? ;
.bss:000000000020A118                 db    ? ;
.bss:000000000020A119                 db    ? ;
.bss:000000000020A11A                 db    ? ;
.bss:000000000020A11B                 db    ? ;
.bss:000000000020A11C                 db    ? ;
.bss:000000000020A11D                 db    ? ;
.bss:000000000020A11E                 db    ? ;
.bss:000000000020A11F                 db    ? ;
.bss:000000000020A120                 db    ? ;
.bss:000000000020A121                 db    ? ;
.bss:000000000020A122                 db    ? ;
.bss:000000000020A123                 db    ? ;
.bss:000000000020A124                 db    ? ;
.bss:000000000020A125                 db    ? ;
.bss:000000000020A126                 db    ? ;
.bss:000000000020A127                 db    ? ;
.bss:000000000020A128                 db    ? ;
.bss:000000000020A129                 db    ? ;
.bss:000000000020A12A                 db    ? ;
.bss:000000000020A12B                 db    ? ;
.bss:000000000020A12C                 db    ? ;
.bss:000000000020A12D                 db    ? ;
.bss:000000000020A12E                 db    ? ;
.bss:000000000020A12F                 db    ? ;
.bss:000000000020A130                 db    ? ;
.bss:000000000020A131                 db    ? ;
.bss:000000000020A132                 db    ? ;
.bss:000000000020A133                 db    ? ;
.bss:000000000020A134                 db    ? ;
.bss:000000000020A135                 db    ? ;
.bss:000000000020A136                 db    ? ;
.bss:000000000020A137                 db    ? ;
.bss:000000000020A138                 db    ? ;
.bss:000000000020A139                 db    ? ;
.bss:000000000020A13A                 db    ? ;
.bss:000000000020A13B                 db    ? ;
.bss:000000000020A13C                 db    ? ;
.bss:000000000020A13D                 db    ? ;
.bss:000000000020A13E                 db    ? ;
.bss:000000000020A13F                 db    ? ;
.bss:000000000020A140                 db    ? ;
.bss:000000000020A141                 db    ? ;
.bss:000000000020A142                 db    ? ;
.bss:000000000020A143                 db    ? ;
.bss:000000000020A144                 db    ? ;
.bss:000000000020A145                 db    ? ;
.bss:000000000020A146                 db    ? ;
.bss:000000000020A147                 db    ? ;
.bss:000000000020A148                 db    ? ;
.bss:000000000020A149                 db    ? ;
.bss:000000000020A14A                 db    ? ;
.bss:000000000020A14B                 db    ? ;
.bss:000000000020A14C                 db    ? ;
.bss:000000000020A14D                 db    ? ;
.bss:000000000020A14E                 db    ? ;
.bss:000000000020A14F                 db    ? ;
.bss:000000000020A150                 db    ? ;
.bss:000000000020A151                 db    ? ;
.bss:000000000020A152                 db    ? ;
.bss:000000000020A153                 db    ? ;
.bss:000000000020A154                 db    ? ;
.bss:000000000020A155                 db    ? ;
.bss:000000000020A156                 db    ? ;
.bss:000000000020A157                 db    ? ;
.bss:000000000020A158                 db    ? ;
.bss:000000000020A159                 db    ? ;
.bss:000000000020A15A                 db    ? ;
.bss:000000000020A15B                 db    ? ;
.bss:000000000020A15C                 db    ? ;
.bss:000000000020A15D                 db    ? ;
.bss:000000000020A15E                 db    ? ;
.bss:000000000020A15F                 db    ? ;
.bss:000000000020A160                 db    ? ;
.bss:000000000020A161                 db    ? ;
.bss:000000000020A162                 db    ? ;
.bss:000000000020A163                 db    ? ;
.bss:000000000020A164                 db    ? ;
.bss:000000000020A165                 db    ? ;
.bss:000000000020A166                 db    ? ;
.bss:000000000020A167                 db    ? ;
.bss:000000000020A168                 db    ? ;
.bss:000000000020A169                 db    ? ;
.bss:000000000020A16A                 db    ? ;
.bss:000000000020A16B                 db    ? ;
.bss:000000000020A16C                 db    ? ;
.bss:000000000020A16D                 db    ? ;
.bss:000000000020A16E                 db    ? ;
.bss:000000000020A16F                 db    ? ;
.bss:000000000020A170                 db    ? ;
.bss:000000000020A171                 db    ? ;
.bss:000000000020A172                 db    ? ;
.bss:000000000020A173                 db    ? ;
.bss:000000000020A174                 db    ? ;
.bss:000000000020A175                 db    ? ;
.bss:000000000020A176                 db    ? ;
.bss:000000000020A177                 db    ? ;
.bss:000000000020A178                 db    ? ;
.bss:000000000020A179                 db    ? ;
.bss:000000000020A17A                 db    ? ;
.bss:000000000020A17B                 db    ? ;
.bss:000000000020A17C                 db    ? ;
.bss:000000000020A17D                 db    ? ;
.bss:000000000020A17E                 db    ? ;
.bss:000000000020A17F                 db    ? ;
.bss:000000000020A180                 db    ? ;
.bss:000000000020A181                 db    ? ;
.bss:000000000020A182                 db    ? ;
.bss:000000000020A183                 db    ? ;
.bss:000000000020A184                 db    ? ;
.bss:000000000020A185                 db    ? ;
.bss:000000000020A186                 db    ? ;
.bss:000000000020A187                 db    ? ;
.bss:000000000020A188                 db    ? ;
.bss:000000000020A189                 db    ? ;
.bss:000000000020A18A                 db    ? ;
.bss:000000000020A18B                 db    ? ;
.bss:000000000020A18C                 db    ? ;
.bss:000000000020A18D                 db    ? ;
.bss:000000000020A18E                 db    ? ;
.bss:000000000020A18F                 db    ? ;
.bss:000000000020A190                 db    ? ;
.bss:000000000020A191                 db    ? ;
.bss:000000000020A192                 db    ? ;
.bss:000000000020A193                 db    ? ;
.bss:000000000020A194                 db    ? ;
.bss:000000000020A195                 db    ? ;
.bss:000000000020A196                 db    ? ;
.bss:000000000020A197                 db    ? ;
.bss:000000000020A198                 db    ? ;
.bss:000000000020A199                 db    ? ;
.bss:000000000020A19A                 db    ? ;
.bss:000000000020A19B                 db    ? ;
.bss:000000000020A19C                 db    ? ;
.bss:000000000020A19D                 db    ? ;
.bss:000000000020A19E                 db    ? ;
.bss:000000000020A19F                 db    ? ;
.bss:000000000020A1A0                 db    ? ;
.bss:000000000020A1A1                 db    ? ;
.bss:000000000020A1A2                 db    ? ;
.bss:000000000020A1A3                 db    ? ;
.bss:000000000020A1A4                 db    ? ;
.bss:000000000020A1A5                 db    ? ;
.bss:000000000020A1A6                 db    ? ;
.bss:000000000020A1A7                 db    ? ;
.bss:000000000020A1A8                 db    ? ;
.bss:000000000020A1A9                 db    ? ;
.bss:000000000020A1AA                 db    ? ;
.bss:000000000020A1AB                 db    ? ;
.bss:000000000020A1AC                 db    ? ;
.bss:000000000020A1AD                 db    ? ;
.bss:000000000020A1AE                 db    ? ;
.bss:000000000020A1AF                 db    ? ;
.bss:000000000020A1B0                 db    ? ;
.bss:000000000020A1B1                 db    ? ;
.bss:000000000020A1B2                 db    ? ;
.bss:000000000020A1B3                 db    ? ;
.bss:000000000020A1B4                 db    ? ;
.bss:000000000020A1B5                 db    ? ;
.bss:000000000020A1B6                 db    ? ;
.bss:000000000020A1B7                 db    ? ;
.bss:000000000020A1B8                 db    ? ;
.bss:000000000020A1B9                 db    ? ;
.bss:000000000020A1BA                 db    ? ;
.bss:000000000020A1BB                 db    ? ;
.bss:000000000020A1BC                 db    ? ;
.bss:000000000020A1BD                 db    ? ;
.bss:000000000020A1BE                 db    ? ;
.bss:000000000020A1BF                 db    ? ;
.bss:000000000020A1C0                 db    ? ;
.bss:000000000020A1C1                 db    ? ;
.bss:000000000020A1C2                 db    ? ;
.bss:000000000020A1C3                 db    ? ;
.bss:000000000020A1C4                 db    ? ;
.bss:000000000020A1C5                 db    ? ;
.bss:000000000020A1C6                 db    ? ;
.bss:000000000020A1C7                 db    ? ;
.bss:000000000020A1C8                 db    ? ;
.bss:000000000020A1C9                 db    ? ;
.bss:000000000020A1CA                 db    ? ;
.bss:000000000020A1CB                 db    ? ;
.bss:000000000020A1CC                 db    ? ;
.bss:000000000020A1CD                 db    ? ;
.bss:000000000020A1CE                 db    ? ;
.bss:000000000020A1CF                 db    ? ;
.bss:000000000020A1D0                 db    ? ;
.bss:000000000020A1D1                 db    ? ;
.bss:000000000020A1D2                 db    ? ;
.bss:000000000020A1D3                 db    ? ;
.bss:000000000020A1D4                 db    ? ;
.bss:000000000020A1D5                 db    ? ;
.bss:000000000020A1D6                 db    ? ;
.bss:000000000020A1D7                 db    ? ;
.bss:000000000020A1D8                 db    ? ;
.bss:000000000020A1D9                 db    ? ;
.bss:000000000020A1DA                 db    ? ;
.bss:000000000020A1DB                 db    ? ;
.bss:000000000020A1DC                 db    ? ;
.bss:000000000020A1DD                 db    ? ;
.bss:000000000020A1DE                 db    ? ;
.bss:000000000020A1DF                 db    ? ;
.bss:000000000020A1E0 default_quoting_options xmmword ?       ; DATA XREF: clone_quoting_options+12↑o
.bss:000000000020A1E0                                         ; get_quoting_style↑o ...
.bss:000000000020A1F0 xmmword_20A1F0  xmmword ?               ; DATA XREF: quotearg_char_mem+41↑r
.bss:000000000020A1F0                                         ; quotearg_n_custom_mem+39↑r
.bss:000000000020A200 xmmword_20A200  xmmword ?               ; DATA XREF: quotearg_char_mem+4E↑r
.bss:000000000020A200                                         ; quotearg_n_custom_mem+46↑r
.bss:000000000020A210 qword_20A210    dq ?                    ; DATA XREF: quotearg_char_mem+16↑r
.bss:000000000020A210                                         ; quotearg_n_custom_mem+7↑r
.bss:000000000020A210 _bss            ends
.bss:000000000020A210
.prgend:000000000020A218 ; ===========================================================================
.prgend:000000000020A218
.prgend:000000000020A218 ; Segment type: Zero-length
.prgend:000000000020A218 _prgend         segment byte public '' use64
.prgend:000000000020A218 _end            label byte
.prgend:000000000020A218 _prgend         ends
.prgend:000000000020A218
extern:000000000020A220 ; ===========================================================================
extern:000000000020A220
extern:000000000020A220 ; Segment type: Externs
extern:000000000020A220 ; extern
extern:000000000020A220                 extrn __snprintf_chk:near
extern:000000000020A220                                         ; CODE XREF: ___snprintf_chk↑j
extern:000000000020A220                                         ; DATA XREF: .got:__snprintf_chk_ptr↑o
extern:000000000020A228 ; void free(void *ptr)
extern:000000000020A228                 extrn free:near         ; CODE XREF: _free↑j
extern:000000000020A228                                         ; DATA XREF: .got:free_ptr↑o
extern:000000000020A230 ; void __noreturn abort(void)
extern:000000000020A230                 extrn abort:near        ; CODE XREF: _abort↑j
extern:000000000020A230                                         ; DATA XREF: .got:abort_ptr↑o
extern:000000000020A238 ; int *_errno_location(void)
extern:000000000020A238                 extrn __errno_location:near
extern:000000000020A238                                         ; CODE XREF: ___errno_location↑j
extern:000000000020A238                                         ; DATA XREF: .got:__errno_location_ptr↑o
extern:000000000020A240 ; int strncmp(const char *s1, const char *s2, size_t n)
extern:000000000020A240                 extrn strncmp:near      ; CODE XREF: _strncmp↑j
extern:000000000020A240                                         ; DATA XREF: .got:strncmp_ptr↑o
extern:000000000020A248 ; void __noreturn exit(int status)
extern:000000000020A248                 extrn _exit:near        ; CODE XREF: __exit↑j
extern:000000000020A248                                         ; DATA XREF: .got:_exit_ptr↑o
extern:000000000020A250 ; size_t _fpending(FILE *fp)
extern:000000000020A250                 extrn __fpending:near   ; CODE XREF: ___fpending↑j
extern:000000000020A250                                         ; DATA XREF: .got:__fpending_ptr↑o
extern:000000000020A258 ; char *textdomain(const char *domainname)
extern:000000000020A258                 extrn textdomain:near   ; CODE XREF: _textdomain↑j
extern:000000000020A258                                         ; DATA XREF: .got:textdomain_ptr↑o
extern:000000000020A260 ; int fclose(FILE *stream)
extern:000000000020A260                 extrn fclose:near       ; CODE XREF: _fclose↑j
extern:000000000020A260                                         ; DATA XREF: .got:fclose_ptr↑o
extern:000000000020A268 ; char *bindtextdomain(const char *domainname, const char *dirname)
extern:000000000020A268                 extrn bindtextdomain:near
extern:000000000020A268                                         ; CODE XREF: _bindtextdomain↑j
extern:000000000020A268                                         ; DATA XREF: .got:bindtextdomain_ptr↑o
extern:000000000020A270 ; int rmdir(const char *path)
extern:000000000020A270                 extrn rmdir:near        ; CODE XREF: _rmdir↑j
extern:000000000020A270                                         ; DATA XREF: .got:rmdir_ptr↑o
extern:000000000020A278 ; char *dcgettext(const char *domainname, const char *msgid, int category)
extern:000000000020A278                 extrn dcgettext:near    ; CODE XREF: _dcgettext↑j
extern:000000000020A278                                         ; DATA XREF: .got:dcgettext_ptr↑o
extern:000000000020A280 ; size_t _ctype_get_mb_cur_max(void)
extern:000000000020A280                 extrn __ctype_get_mb_cur_max:near
extern:000000000020A280                                         ; CODE XREF: ___ctype_get_mb_cur_max↑j
extern:000000000020A280                                         ; DATA XREF: .got:__ctype_get_mb_cur_max_ptr↑o
extern:000000000020A288 ; size_t strlen(const char *s)
extern:000000000020A288                 extrn strlen:near       ; CODE XREF: _strlen↑j
extern:000000000020A288                                         ; DATA XREF: .got:strlen_ptr↑o
extern:000000000020A290 ; int openat(int fd, const char *file, int oflag, ...)
extern:000000000020A290                 extrn openat:near       ; CODE XREF: _openat↑j
extern:000000000020A290                                         ; DATA XREF: .got:openat_ptr↑o
extern:000000000020A298                 extrn __stack_chk_fail:near
extern:000000000020A298                                         ; CODE XREF: ___stack_chk_fail↑j
extern:000000000020A298                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:000000000020A2A0 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
extern:000000000020A2A0                 extrn getopt_long:near  ; CODE XREF: _getopt_long↑j
extern:000000000020A2A0                                         ; DATA XREF: .got:getopt_long_ptr↑o
extern:000000000020A2A8 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
extern:000000000020A2A8                 extrn mbrtowc:near      ; CODE XREF: _mbrtowc↑j
extern:000000000020A2A8                                         ; DATA XREF: .got:mbrtowc_ptr↑o
extern:000000000020A2B0 ; int _overflow(_IO_FILE *, int)
extern:000000000020A2B0                 extrn __overflow:near   ; CODE XREF: ___overflow↑j
extern:000000000020A2B0                                         ; DATA XREF: .got:__overflow_ptr↑o
extern:000000000020A2B8 ; char *strrchr(const char *s, int c)
extern:000000000020A2B8                 extrn strrchr:near      ; CODE XREF: _strrchr↑j
extern:000000000020A2B8                                         ; DATA XREF: .got:strrchr_ptr↑o
extern:000000000020A2C0 ; __off_t lseek(int fd, __off_t offset, int whence)
extern:000000000020A2C0                 extrn lseek:near        ; CODE XREF: _lseek↑j
extern:000000000020A2C0                                         ; DATA XREF: .got:lseek_ptr↑o
extern:000000000020A2C8 ; void *memset(void *s, int c, size_t n)
extern:000000000020A2C8                 extrn memset:near       ; CODE XREF: _memset↑j
extern:000000000020A2C8                                         ; DATA XREF: .got:memset_ptr↑o
extern:000000000020A2D0 ; int close(int fd)
extern:000000000020A2D0                 extrn close:near        ; CODE XREF: _close↑j
extern:000000000020A2D0                                         ; DATA XREF: .got:close_ptr↑o
extern:000000000020A2D8 ; int closedir(DIR *dirp)
extern:000000000020A2D8                 extrn closedir:near     ; CODE XREF: _closedir↑j
extern:000000000020A2D8                                         ; DATA XREF: .got:closedir_ptr↑o
extern:000000000020A2E0 ; int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:000000000020A2E0                 extrn __libc_start_main:near
extern:000000000020A2E0                                         ; CODE XREF: start+24↑p
extern:000000000020A2E0                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:000000000020A2E8 ; int memcmp(const void *s1, const void *s2, size_t n)
extern:000000000020A2E8                 extrn memcmp:near       ; CODE XREF: _memcmp↑j
extern:000000000020A2E8                                         ; DATA XREF: .got:memcmp_ptr↑o
extern:000000000020A2F0 ; int fputs_unlocked(const char *s, FILE *stream)
extern:000000000020A2F0                 extrn fputs_unlocked:near
extern:000000000020A2F0                                         ; CODE XREF: _fputs_unlocked↑j
extern:000000000020A2F0                                         ; DATA XREF: .got:fputs_unlocked_ptr↑o
extern:000000000020A2F8 ; void *calloc(size_t nmemb, size_t size)
extern:000000000020A2F8                 extrn calloc:near       ; CODE XREF: _calloc↑j
extern:000000000020A2F8                                         ; DATA XREF: .got:calloc_ptr↑o
extern:000000000020A300 ; void *memcpy(void *dest, const void *src, size_t n)
extern:000000000020A300                 extrn memcpy:near       ; CODE XREF: _memcpy↑j
extern:000000000020A300                                         ; DATA XREF: .got:memcpy_ptr↑o
extern:000000000020A308 ; int fileno(FILE *stream)
extern:000000000020A308                 extrn fileno:near       ; CODE XREF: _fileno↑j
extern:000000000020A308                                         ; DATA XREF: .got:fileno_ptr↑o
extern:000000000020A310 ; struct dirent *readdir(DIR *dirp)
extern:000000000020A310                 extrn readdir:near      ; CODE XREF: _readdir↑j
extern:000000000020A310                                         ; DATA XREF: .got:readdir_ptr↑o
extern:000000000020A318 ; void *malloc(size_t size)
extern:000000000020A318                 extrn malloc:near       ; CODE XREF: _malloc↑j
extern:000000000020A318                                         ; DATA XREF: .got:malloc_ptr↑o
extern:000000000020A320 ; int fflush(FILE *stream)
extern:000000000020A320                 extrn fflush:near       ; CODE XREF: _fflush↑j
extern:000000000020A320                                         ; DATA XREF: .got:fflush_ptr↑o
extern:000000000020A328 ; char *nl_langinfo(nl_item item)
extern:000000000020A328                 extrn nl_langinfo:near  ; CODE XREF: _nl_langinfo↑j
extern:000000000020A328                                         ; DATA XREF: .got:nl_langinfo_ptr↑o
extern:000000000020A330 ; int _freading(FILE *fp)
extern:000000000020A330                 extrn __freading:near   ; CODE XREF: ___freading↑j
extern:000000000020A330                                         ; DATA XREF: .got:__freading_ptr↑o
extern:000000000020A338 ; size_t fwrite_unlocked(const void *ptr, size_t size, size_t n, FILE *stream)
extern:000000000020A338                 extrn fwrite_unlocked:near
extern:000000000020A338                                         ; CODE XREF: _fwrite_unlocked↑j
extern:000000000020A338                                         ; DATA XREF: .got:fwrite_unlocked_ptr↑o
extern:000000000020A340 ; void *realloc(void *ptr, size_t size)
extern:000000000020A340                 extrn realloc:near      ; CODE XREF: _realloc↑j
extern:000000000020A340                                         ; DATA XREF: .got:realloc_ptr↑o
extern:000000000020A348 ; char *setlocale(int category, const char *locale)
extern:000000000020A348                 extrn setlocale:near    ; CODE XREF: _setlocale↑j
extern:000000000020A348                                         ; DATA XREF: .got:setlocale_ptr↑o
extern:000000000020A350                 extrn __printf_chk:near ; CODE XREF: ___printf_chk↑j
extern:000000000020A350                                         ; DATA XREF: .got:__printf_chk_ptr↑o
extern:000000000020A358 ; void error(int status, int errnum, const char *format, ...)
extern:000000000020A358                 extrn error:near        ; CODE XREF: _error↑j
extern:000000000020A358                                         ; DATA XREF: .got:error_ptr↑o
extern:000000000020A360 ; int fseeko(FILE *stream, __off_t off, int whence)
extern:000000000020A360                 extrn fseeko:near       ; CODE XREF: _fseeko↑j
extern:000000000020A360                                         ; DATA XREF: .got:fseeko_ptr↑o
extern:000000000020A368 ; DIR *fdopendir(int fd)
extern:000000000020A368                 extrn fdopendir:near    ; CODE XREF: _fdopendir↑j
extern:000000000020A368                                         ; DATA XREF: .got:fdopendir_ptr↑o
extern:000000000020A370 ; int __fastcall _cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
extern:000000000020A370                 extrn __cxa_atexit:near ; CODE XREF: ___cxa_atexit↑j
extern:000000000020A370                                         ; DATA XREF: .got:__cxa_atexit_ptr↑o
extern:000000000020A378 ; void __noreturn exit(int status)
extern:000000000020A378                 extrn exit:near         ; CODE XREF: _exit↑j
extern:000000000020A378                                         ; DATA XREF: .got:exit_ptr↑o
extern:000000000020A380 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
extern:000000000020A380                 extrn fwrite:near       ; CODE XREF: _fwrite↑j
extern:000000000020A380                                         ; DATA XREF: .got:fwrite_ptr↑o
extern:000000000020A388                 extrn __fprintf_chk:near
extern:000000000020A388                                         ; CODE XREF: ___fprintf_chk↑j
extern:000000000020A388                                         ; DATA XREF: .got:__fprintf_chk_ptr↑o
extern:000000000020A390 ; int mbsinit(const mbstate_t *ps)
extern:000000000020A390                 extrn mbsinit:near      ; CODE XREF: _mbsinit↑j
extern:000000000020A390                                         ; DATA XREF: .got:mbsinit_ptr↑o
extern:000000000020A398 ; int iswprint(wint_t wc)
extern:000000000020A398                 extrn iswprint:near     ; CODE XREF: _iswprint↑j
extern:000000000020A398                                         ; DATA XREF: .got:iswprint_ptr↑o
extern:000000000020A3A0 ; int __fastcall __cxa_finalize(void *)
extern:000000000020A3A0                 extrn __imp___cxa_finalize:near ; weak
extern:000000000020A3A0                                         ; CODE XREF: __cxa_finalize↑j
extern:000000000020A3A0                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:000000000020A3A8 ; const unsigned __int16 **_ctype_b_loc(void)
extern:000000000020A3A8                 extrn __ctype_b_loc:near
extern:000000000020A3A8                                         ; CODE XREF: ___ctype_b_loc↑j
extern:000000000020A3A8                                         ; DATA XREF: .got:__ctype_b_loc_ptr↑o
extern:000000000020A3B0                 extrn _ITM_deregisterTMCloneTable ; weak
extern:000000000020A3B0                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:000000000020A3B8                 extrn __gmon_start__:near ; weak
extern:000000000020A3B8                                         ; CODE XREF: _init_proc+10↑p
extern:000000000020A3B8                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:000000000020A3C0                 extrn _ITM_registerTMCloneTable ; weak
extern:000000000020A3C0                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:000000000020A3C0
extern:000000000020A3C0
extern:000000000020A3C0                 end start
