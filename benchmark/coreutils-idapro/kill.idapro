LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                      License info: 48-357D-7BC4-C6                      |
LOAD:0000000000000000 ; |                              Virginia Tech                              |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : 29BA77D888674AACE178B768C830E5A6C53A38935100CE39BEA4FFD55ED7C555
LOAD:0000000000000000 ; Input MD5    : 538DD4E8885F8B4619153F04051F72A7
LOAD:0000000000000000 ; Input CRC32  : D8349A0F
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/kill
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'kill.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000 ; Source File : 'operand2sig.c'
LOAD:0000000000000000 ; Source File : 'version.c'
LOAD:0000000000000000 ; Source File : 'closeout.c'
LOAD:0000000000000000 ; Source File : 'exitfail.c'
LOAD:0000000000000000 ; Source File : 'progname.c'
LOAD:0000000000000000 ; Source File : 'quotearg.c'
LOAD:0000000000000000 ; Source File : 'version-etc.c'
LOAD:0000000000000000 ; Source File : 'version-etc-fsf.c'
LOAD:0000000000000000 ; Source File : 'xmalloc.c'
LOAD:0000000000000000 ; Source File : 'xalloc-die.c'
LOAD:0000000000000000 ; Source File : 'mbrtowc.c'
LOAD:0000000000000000 ; Source File : 'sig2str.c'
LOAD:0000000000000000 ; Source File : 'close-stream.c'
LOAD:0000000000000000 ; Source File : 'hard-locale.c'
LOAD:0000000000000000 ; Source File : 'localcharset.c'
LOAD:0000000000000000 ; Source File : 'fclose.c'
LOAD:0000000000000000 ; Source File : 'fflush.c'
LOAD:0000000000000000 ; Source File : 'fseeko.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure code
LOAD:0000000000000000 ; Segment permissions: Read/Execute
LOAD:0000000000000000 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000002F8↓o
LOAD:0000000000000000                                         ; LOAD:0000000000000310↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset start         ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 26678h               ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 9                    ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 25h                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 24h                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 1F8h                 ; Size in file image
LOAD:0000000000000068                 dq 1F8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 238h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 238h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 5                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 6EA8h                ; Size in file image
LOAD:00000000000000D8                 dq 6EA8h                ; Size in memory image
LOAD:00000000000000E0                 dq 200000h              ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 6                    ; Flags
LOAD:00000000000000F0                 dq 7B10h                ; File offset
LOAD:00000000000000F8                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000100 qword_100       dq 207B10h              ; DATA XREF: .data:slotvec0↓o
LOAD:0000000000000100                                         ; Physical address
LOAD:0000000000000108                 dq 714h                 ; Size in file image
LOAD:0000000000000110                 dq 8E8h                 ; Size in memory image
LOAD:0000000000000118                 dq 200000h              ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000124                 dd 6                    ; Flags
LOAD:0000000000000128                 dq 7C38h                ; File offset
LOAD:0000000000000130                 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000000138                 dq 207C38h              ; Physical address
LOAD:0000000000000140                 dq 1F0h                 ; Size in file image
LOAD:0000000000000148                 dq 1F0h                 ; Size in memory image
LOAD:0000000000000150                 dq 8                    ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 4                    ; Type: NOTE
LOAD:000000000000015C                 dd 4                    ; Flags
LOAD:0000000000000160                 dq 254h                 ; File offset
LOAD:0000000000000168                 dq offset dword_254     ; Virtual address
LOAD:0000000000000170                 dq 254h                 ; Physical address
LOAD:0000000000000178                 dq 44h                  ; Size in file image
LOAD:0000000000000180                 dq 44h                  ; Size in memory image
LOAD:0000000000000188                 dq 4                    ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000194                 dd 4                    ; Flags
LOAD:0000000000000198                 dq 60C0h                ; File offset
LOAD:00000000000001A0                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000000001A8                 dq 60C0h                ; Physical address
LOAD:00000000000001B0                 dq 254h                 ; Size in file image
LOAD:00000000000001B8                 dq 254h                 ; Size in memory image
LOAD:00000000000001C0                 dq 4                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000001CC                 dd 6                    ; Flags
LOAD:00000000000001D0                 dq 0                    ; File offset
LOAD:00000000000001D8                 dq 0                    ; Virtual address
LOAD:00000000000001E0                 dq 0                    ; Physical address
LOAD:00000000000001E8                 dq 0                    ; Size in file image
LOAD:00000000000001F0                 dq 0                    ; Size in memory image
LOAD:00000000000001F8                 dq 10h                  ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 6474E552h            ; Type: RO-AFTER
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 7B10h                ; File offset
LOAD:0000000000000210                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000218                 dq 207B10h              ; Physical address
LOAD:0000000000000220                 dq 4F0h                 ; Size in file image
LOAD:0000000000000228                 dq 4F0h                 ; Size in memory image
LOAD:0000000000000230                 dq 1                    ; Alignment
LOAD:0000000000000238 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000238                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000254 ; ELF Note Entry
LOAD:0000000000000254 dword_254       dd 4                    ; DATA XREF: LOAD:0000000000000168↑o
LOAD:0000000000000254                                         ; Name Size
LOAD:0000000000000258                 dd 10h                  ; Desc Size
LOAD:000000000000025C                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000260 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000264                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:0000000000000274 ; ELF Note Entry
LOAD:0000000000000274                 dd 4                    ; Name Size
LOAD:0000000000000278                 dd 14h                  ; Desc Size
LOAD:000000000000027C                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000280 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000284                 db 65h, 98h, 35h, 0C2h, 0, 24h, 8Ah, 31h, 0CCh, 5Ah, 0B9h ; Desc
LOAD:0000000000000284                 db 0DDh, 73h, 9, 72h, 66h, 0EFh, 5Fh, 96h, 7
LOAD:0000000000000298 ; ELF GNU Hash Table
LOAD:0000000000000298 elf_gnu_hash_nbuckets dd 3
LOAD:000000000000029C elf_gnu_hash_symbias dd 38h
LOAD:00000000000002A0 elf_gnu_hash_bitmask_nwords dd 1
LOAD:00000000000002A4 elf_gnu_hash_shift dd 6
LOAD:00000000000002A8 elf_gnu_hash_indexes dq 121C012000414D04h
LOAD:00000000000002B0 elf_gnu_hash_bucket dd 38h, 39h, 3Eh
LOAD:00000000000002BC elf_gnu_hash_chain dd 1C8C1D29h, 9E7650BCh, 9789A096h, 72632CCEh, 0F54162E4h
LOAD:00000000000002BC                 dd 1C8BF239h, 12F7C432h, 12F7A2B3h, 0
LOAD:00000000000002E0 ; ELF Symbol Table
LOAD:00000000000002E0                 Elf64_Sym <0>
LOAD:00000000000002F8                 Elf64_Sym <offset aFree - offset byte_8E0, 12h, 0, 0, offset dword_0, \ ; "free"
LOAD:00000000000002F8                            0>
LOAD:0000000000000310                 Elf64_Sym <offset aAbort - offset byte_8E0, 12h, 0, 0, offset dword_0,\ ; "abort"
LOAD:0000000000000310                            0>
LOAD:0000000000000328                 Elf64_Sym <offset aErrnoLocation - offset byte_8E0, 12h, 0, 0, \ ; "__errno_location"
LOAD:0000000000000328                            offset dword_0, 0>
LOAD:0000000000000340                 Elf64_Sym <offset aStrncmp - offset byte_8E0, 12h, 0, 0, \ ; "strncmp"
LOAD:0000000000000340                            offset dword_0, 0>
LOAD:0000000000000358                 Elf64_Sym <offset aItmDeregistert - offset byte_8E0, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:0000000000000358                            offset dword_0, 0>
LOAD:0000000000000370                 Elf64_Sym <offset aExit - offset byte_8E0, 12h, 0, 0, offset dword_0, \ ; "_exit"
LOAD:0000000000000370                            0>
LOAD:0000000000000388                 Elf64_Sym <offset aStrcpy - offset byte_8E0, 12h, 0, 0, \ ; "strcpy"
LOAD:0000000000000388                            offset dword_0, 0>
LOAD:00000000000003A0                 Elf64_Sym <offset aFpending - offset byte_8E0, 12h, 0, 0, \ ; "__fpending"
LOAD:00000000000003A0                            offset dword_0, 0>
LOAD:00000000000003B8                 Elf64_Sym <offset aPuts - offset byte_8E0, 12h, 0, 0, offset dword_0, \ ; "puts"
LOAD:00000000000003B8                            0>
LOAD:00000000000003D0                 Elf64_Sym <offset aBindtextdomain+4 - offset byte_8E0, 12h, 0, 0, \ ; "textdomain"
LOAD:00000000000003D0                            offset dword_0, 0>
LOAD:00000000000003E8                 Elf64_Sym <offset aStrtolInternal - offset byte_8E0, 12h, 0, 0, \ ; "__strtol_internal"
LOAD:00000000000003E8                            offset dword_0, 0>
LOAD:0000000000000400                 Elf64_Sym <offset aFclose - offset byte_8E0, 12h, 0, 0, \ ; "fclose"
LOAD:0000000000000400                            offset dword_0, 0>
LOAD:0000000000000418                 Elf64_Sym <offset aBindtextdomain - offset byte_8E0, 12h, 0, 0, \ ; "bindtextdomain"
LOAD:0000000000000418                            offset dword_0, 0>
LOAD:0000000000000430                 Elf64_Sym <offset aDcgettext - offset byte_8E0, 12h, 0, 0, \ ; "dcgettext"
LOAD:0000000000000430                            offset dword_0, 0>
LOAD:0000000000000448                 Elf64_Sym <offset aCtypeGetMbCurM - offset byte_8E0, 12h, 0, 0, \ ; "__ctype_get_mb_cur_max"
LOAD:0000000000000448                            offset dword_0, 0>
LOAD:0000000000000460                 Elf64_Sym <offset aStrlen - offset byte_8E0, 12h, 0, 0, \ ; "strlen"
LOAD:0000000000000460                            offset dword_0, 0>
LOAD:0000000000000478                 Elf64_Sym <offset aStackChkFail - offset byte_8E0, 12h, 0, 0, \ ; "__stack_chk_fail"
LOAD:0000000000000478                            offset dword_0, 0>
LOAD:0000000000000490                 Elf64_Sym <offset aGetoptLong - offset byte_8E0, 12h, 0, 0, \ ; "getopt_long"
LOAD:0000000000000490                            offset dword_0, 0>
LOAD:00000000000004A8                 Elf64_Sym <offset aMbrtowc - offset byte_8E0, 12h, 0, 0, \ ; "mbrtowc"
LOAD:00000000000004A8                            offset dword_0, 0>
LOAD:00000000000004C0                 Elf64_Sym <offset aStrchr - offset byte_8E0, 12h, 0, 0, \ ; "strchr"
LOAD:00000000000004C0                            offset dword_0, 0>
LOAD:00000000000004D8                 Elf64_Sym <offset aStrrchr - offset byte_8E0, 12h, 0, 0, \ ; "strrchr"
LOAD:00000000000004D8                            offset dword_0, 0>
LOAD:00000000000004F0                 Elf64_Sym <offset aLseek - offset byte_8E0, 12h, 0, 0, offset dword_0,\ ; "lseek"
LOAD:00000000000004F0                            0>
LOAD:0000000000000508                 Elf64_Sym <offset aMemset - offset byte_8E0, 12h, 0, 0, \ ; "memset"
LOAD:0000000000000508                            offset dword_0, 0>
LOAD:0000000000000520                 Elf64_Sym <offset aLibcStartMain - offset byte_8E0, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:0000000000000520                            offset dword_0, 0>
LOAD:0000000000000538                 Elf64_Sym <offset aMemcmp - offset byte_8E0, 12h, 0, 0, \ ; "memcmp"
LOAD:0000000000000538                            offset dword_0, 0>
LOAD:0000000000000550                 Elf64_Sym <offset aFputsUnlocked - offset byte_8E0, 12h, 0, 0, \ ; "fputs_unlocked"
LOAD:0000000000000550                            offset dword_0, 0>
LOAD:0000000000000568                 Elf64_Sym <offset aCalloc - offset byte_8E0, 12h, 0, 0, \ ; "calloc"
LOAD:0000000000000568                            offset dword_0, 0>
LOAD:0000000000000580                 Elf64_Sym <offset aStrcmp - offset byte_8E0, 12h, 0, 0, \ ; "strcmp"
LOAD:0000000000000580                            offset dword_0, 0>
LOAD:0000000000000598                 Elf64_Sym <offset aGmonStart - offset byte_8E0, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:0000000000000598                            offset dword_0, 0>
LOAD:00000000000005B0                 Elf64_Sym <offset aStrtol - offset byte_8E0, 12h, 0, 0, \ ; "strtol"
LOAD:00000000000005B0                            offset dword_0, 0>
LOAD:00000000000005C8                 Elf64_Sym <offset aMemcpy - offset byte_8E0, 12h, 0, 0, \ ; "memcpy"
LOAD:00000000000005C8                            offset dword_0, 0>
LOAD:00000000000005E0                 Elf64_Sym <offset aKill - offset byte_8E0, 12h, 0, 0, offset dword_0, \ ; "kill"
LOAD:00000000000005E0                            0>
LOAD:00000000000005F8                 Elf64_Sym <offset aFileno - offset byte_8E0, 12h, 0, 0, \ ; "fileno"
LOAD:00000000000005F8                            offset dword_0, 0>
LOAD:0000000000000610                 Elf64_Sym <offset aMalloc - offset byte_8E0, 12h, 0, 0, \ ; "malloc"
LOAD:0000000000000610                            offset dword_0, 0>
LOAD:0000000000000628                 Elf64_Sym <offset aFflush - offset byte_8E0, 12h, 0, 0, \ ; "fflush"
LOAD:0000000000000628                            offset dword_0, 0>
LOAD:0000000000000640                 Elf64_Sym <offset aNlLanginfo - offset byte_8E0, 12h, 0, 0, \ ; "nl_langinfo"
LOAD:0000000000000640                            offset dword_0, 0>
LOAD:0000000000000658                 Elf64_Sym <offset aFreading - offset byte_8E0, 12h, 0, 0, \ ; "__freading"
LOAD:0000000000000658                            offset dword_0, 0>
LOAD:0000000000000670                 Elf64_Sym <offset aStrsignal - offset byte_8E0, 12h, 0, 0, \ ; "strsignal"
LOAD:0000000000000670                            offset dword_0, 0>
LOAD:0000000000000688                 Elf64_Sym <offset aRealloc - offset byte_8E0, 12h, 0, 0, \ ; "realloc"
LOAD:0000000000000688                            offset dword_0, 0>
LOAD:00000000000006A0                 Elf64_Sym <offset aSetlocale - offset byte_8E0, 12h, 0, 0, \ ; "setlocale"
LOAD:00000000000006A0                            offset dword_0, 0>
LOAD:00000000000006B8                 Elf64_Sym <offset aPrintfChk - offset byte_8E0, 12h, 0, 0, \ ; "__printf_chk"
LOAD:00000000000006B8                            offset dword_0, 0>
LOAD:00000000000006D0                 Elf64_Sym <offset aError - offset byte_8E0, 12h, 0, 0, offset dword_0,\ ; "error"
LOAD:00000000000006D0                            0>
LOAD:00000000000006E8                 Elf64_Sym <offset aFseeko - offset byte_8E0, 12h, 0, 0, \ ; "fseeko"
LOAD:00000000000006E8                            offset dword_0, 0>
LOAD:0000000000000700                 Elf64_Sym <offset aCxaAtexit - offset byte_8E0, 12h, 0, 0, \ ; "__cxa_atexit"
LOAD:0000000000000700                            offset dword_0, 0>
LOAD:0000000000000718                 Elf64_Sym <offset aLibcCurrentSig_0 - offset byte_8E0, 12h, 0, 0, \ ; "__libc_current_sigrtmin"
LOAD:0000000000000718                            offset dword_0, 0>
LOAD:0000000000000730                 Elf64_Sym <offset aExit+1 - offset byte_8E0, 12h, 0, 0, \ ; "exit"
LOAD:0000000000000730                            offset dword_0, 0>
LOAD:0000000000000748                 Elf64_Sym <offset aFwrite - offset byte_8E0, 12h, 0, 0, \ ; "fwrite"
LOAD:0000000000000748                            offset dword_0, 0>
LOAD:0000000000000760                 Elf64_Sym <offset aFprintfChk - offset byte_8E0, 12h, 0, 0, \ ; "__fprintf_chk"
LOAD:0000000000000760                            offset dword_0, 0>
LOAD:0000000000000778                 Elf64_Sym <offset aLibcCurrentSig - offset byte_8E0, 12h, 0, 0, \ ; "__libc_current_sigrtmax"
LOAD:0000000000000778                            offset dword_0, 0>
LOAD:0000000000000790                 Elf64_Sym <offset aItmRegistertmc - offset byte_8E0, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:0000000000000790                            offset dword_0, 0>
LOAD:00000000000007A8                 Elf64_Sym <offset aMbsinit - offset byte_8E0, 12h, 0, 0, \ ; "mbsinit"
LOAD:00000000000007A8                            offset dword_0, 0>
LOAD:00000000000007C0                 Elf64_Sym <offset aIswprint - offset byte_8E0, 12h, 0, 0, \ ; "iswprint"
LOAD:00000000000007C0                            offset dword_0, 0>
LOAD:00000000000007D8                 Elf64_Sym <offset aCxaFinalize - offset byte_8E0, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:00000000000007D8                            offset dword_0, 0>
LOAD:00000000000007F0                 Elf64_Sym <offset aCtypeBLoc - offset byte_8E0, 12h, 0, 0, \ ; "__ctype_b_loc"
LOAD:00000000000007F0                            offset dword_0, 0>
LOAD:0000000000000808                 Elf64_Sym <offset aSprintfChk - offset byte_8E0, 12h, 0, 0, \ ; "__sprintf_chk"
LOAD:0000000000000808                            offset dword_0, 0>
LOAD:0000000000000820                 Elf64_Sym <offset aStdout - offset byte_8E0, 11h, 0, 19h, \ ; "stdout"
LOAD:0000000000000820                            offset stdout@@GLIBC_2_2_5, 8>
LOAD:0000000000000838                 Elf64_Sym <offset aProgname - offset byte_8E0, 11h, 0, 19h, \ ; "__progname"
LOAD:0000000000000838                            offset program_invocation_short_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000850                 Elf64_Sym <offset aProgramInvocat - offset byte_8E0, 21h, 0, 19h, \ ; "program_invocation_name"
LOAD:0000000000000850                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000868                 Elf64_Sym <offset aPrognameFull - offset byte_8E0, 11h, 0, 19h, \ ; "__progname_full"
LOAD:0000000000000868                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000880                 Elf64_Sym <offset aProgramInvocat_0 - offset byte_8E0, 21h, 0, 19h, \ ; "program_invocation_short_name"
LOAD:0000000000000880                            offset program_invocation_short_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000898                 Elf64_Sym <offset aStderr - offset byte_8E0, 11h, 0, 19h, \ ; "stderr"
LOAD:0000000000000898                            offset stderr@@GLIBC_2_2_5, 8>
LOAD:00000000000008B0                 Elf64_Sym <offset aOptind - offset byte_8E0, 11h, 0, 19h, \ ; "optind"
LOAD:00000000000008B0                            offset optind@@GLIBC_2_2_5, 4>
LOAD:00000000000008C8                 Elf64_Sym <offset aOptarg - offset byte_8E0, 11h, 0, 19h, \ ; "optarg"
LOAD:00000000000008C8                            offset optarg@@GLIBC_2_2_5, 8>
LOAD:00000000000008E0 ; ELF String Table
LOAD:00000000000008E0 byte_8E0        db 0                    ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:00000000000008E0                                         ; LOAD:0000000000000310↑o ...
LOAD:00000000000008E1 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000000C60↓o
LOAD:00000000000008EB aFflush         db 'fflush',0           ; DATA XREF: LOAD:0000000000000628↑o
LOAD:00000000000008F2 aStrcpy         db 'strcpy',0           ; DATA XREF: LOAD:0000000000000388↑o
LOAD:00000000000008F9 aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:00000000000006B8↑o
LOAD:0000000000000906 aSetlocale      db 'setlocale',0        ; DATA XREF: LOAD:00000000000006A0↑o
LOAD:0000000000000910 aMbrtowc        db 'mbrtowc',0          ; DATA XREF: LOAD:00000000000004A8↑o
LOAD:0000000000000918 aStrsignal      db 'strsignal',0        ; DATA XREF: LOAD:0000000000000670↑o
LOAD:0000000000000922 aStrncmp        db 'strncmp',0          ; DATA XREF: LOAD:0000000000000340↑o
LOAD:000000000000092A aOptind         db 'optind',0           ; DATA XREF: LOAD:00000000000008B0↑o
LOAD:0000000000000931 aStrrchr        db 'strrchr',0          ; DATA XREF: LOAD:00000000000004D8↑o
LOAD:0000000000000939 aDcgettext      db 'dcgettext',0        ; DATA XREF: LOAD:0000000000000430↑o
LOAD:0000000000000943 aError          db 'error',0            ; DATA XREF: LOAD:00000000000006D0↑o
LOAD:0000000000000949 aPuts           db 'puts',0             ; DATA XREF: LOAD:00000000000003B8↑o
LOAD:000000000000094E aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:0000000000000478↑o
LOAD:000000000000095F aIswprint       db 'iswprint',0         ; DATA XREF: LOAD:00000000000007C0↑o
LOAD:0000000000000968 aRealloc        db 'realloc',0          ; DATA XREF: LOAD:0000000000000688↑o
LOAD:0000000000000970 aAbort          db 'abort',0            ; DATA XREF: LOAD:0000000000000310↑o
LOAD:0000000000000976 aExit           db '_exit',0            ; DATA XREF: LOAD:0000000000000370↑o
LOAD:0000000000000976                                         ; LOAD:0000000000000730↑o
LOAD:000000000000097C aKill           db 'kill',0             ; DATA XREF: LOAD:00000000000005E0↑o
LOAD:0000000000000981 aProgramInvocat db 'program_invocation_name',0
LOAD:0000000000000981                                         ; DATA XREF: LOAD:0000000000000850↑o
LOAD:0000000000000999 aCtypeGetMbCurM db '__ctype_get_mb_cur_max',0
LOAD:0000000000000999                                         ; DATA XREF: LOAD:0000000000000448↑o
LOAD:00000000000009B0 aStrtol         db 'strtol',0           ; DATA XREF: LOAD:00000000000005B0↑o
LOAD:00000000000009B7 aCalloc         db 'calloc',0           ; DATA XREF: LOAD:0000000000000568↑o
LOAD:00000000000009BE aStrlen         db 'strlen',0           ; DATA XREF: LOAD:0000000000000460↑o
LOAD:00000000000009C5 aMemset         db 'memset',0           ; DATA XREF: LOAD:0000000000000508↑o
LOAD:00000000000009CC aErrnoLocation  db '__errno_location',0 ; DATA XREF: LOAD:0000000000000328↑o
LOAD:00000000000009DD aMemcmp         db 'memcmp',0           ; DATA XREF: LOAD:0000000000000538↑o
LOAD:00000000000009E4 aFprintfChk     db '__fprintf_chk',0    ; DATA XREF: LOAD:0000000000000760↑o
LOAD:00000000000009F2 aStdout         db 'stdout',0           ; DATA XREF: LOAD:0000000000000820↑o
LOAD:00000000000009F9 aLseek          db 'lseek',0            ; DATA XREF: LOAD:00000000000004F0↑o
LOAD:00000000000009FF aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:00000000000005C8↑o
LOAD:0000000000000A06 aFclose         db 'fclose',0           ; DATA XREF: LOAD:0000000000000400↑o
LOAD:0000000000000A0D aStrtolInternal db '__strtol_internal',0
LOAD:0000000000000A0D                                         ; DATA XREF: LOAD:00000000000003E8↑o
LOAD:0000000000000A1F aMalloc         db 'malloc',0           ; DATA XREF: LOAD:0000000000000610↑o
LOAD:0000000000000A26 aMbsinit        db 'mbsinit',0          ; DATA XREF: LOAD:00000000000007A8↑o
LOAD:0000000000000A2E aNlLanginfo     db 'nl_langinfo',0      ; DATA XREF: LOAD:0000000000000640↑o
LOAD:0000000000000A3A aLibcCurrentSig db '__libc_current_sigrtmax',0
LOAD:0000000000000A3A                                         ; DATA XREF: LOAD:0000000000000778↑o
LOAD:0000000000000A52 aCtypeBLoc      db '__ctype_b_loc',0    ; DATA XREF: LOAD:00000000000007F0↑o
LOAD:0000000000000A60 aOptarg         db 'optarg',0           ; DATA XREF: LOAD:00000000000008C8↑o
LOAD:0000000000000A67 aFreading       db '__freading',0       ; DATA XREF: LOAD:0000000000000658↑o
LOAD:0000000000000A72 aStderr         db 'stderr',0           ; DATA XREF: LOAD:0000000000000898↑o
LOAD:0000000000000A79 aGetoptLong     db 'getopt_long',0      ; DATA XREF: LOAD:0000000000000490↑o
LOAD:0000000000000A85 aFileno         db 'fileno',0           ; DATA XREF: LOAD:00000000000005F8↑o
LOAD:0000000000000A8C aFwrite         db 'fwrite',0           ; DATA XREF: LOAD:0000000000000748↑o
LOAD:0000000000000A93 aFpending       db '__fpending',0       ; DATA XREF: LOAD:00000000000003A0↑o
LOAD:0000000000000A9E aStrchr         db 'strchr',0           ; DATA XREF: LOAD:00000000000004C0↑o
LOAD:0000000000000AA5 aProgramInvocat_0 db 'program_invocation_short_name',0
LOAD:0000000000000AA5                                         ; DATA XREF: LOAD:0000000000000880↑o
LOAD:0000000000000AC3 aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:00000000000007D8↑o
LOAD:0000000000000AD2 aLibcCurrentSig_0 db '__libc_current_sigrtmin',0
LOAD:0000000000000AD2                                         ; DATA XREF: LOAD:0000000000000718↑o
LOAD:0000000000000AEA aSprintfChk     db '__sprintf_chk',0    ; DATA XREF: LOAD:0000000000000808↑o
LOAD:0000000000000AF8 aBindtextdomain db 'bindtextdomain',0   ; DATA XREF: LOAD:0000000000000418↑o
LOAD:0000000000000AF8                                         ; LOAD:00000000000003D0↑o
LOAD:0000000000000B07 aStrcmp         db 'strcmp',0           ; DATA XREF: LOAD:0000000000000580↑o
LOAD:0000000000000B0E aLibcStartMain  db '__libc_start_main',0
LOAD:0000000000000B0E                                         ; DATA XREF: LOAD:0000000000000520↑o
LOAD:0000000000000B20 aFseeko         db 'fseeko',0           ; DATA XREF: LOAD:00000000000006E8↑o
LOAD:0000000000000B27 aFputsUnlocked  db 'fputs_unlocked',0   ; DATA XREF: LOAD:0000000000000550↑o
LOAD:0000000000000B36 aFree           db 'free',0             ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000B3B aProgname       db '__progname',0       ; DATA XREF: LOAD:0000000000000838↑o
LOAD:0000000000000B46 aPrognameFull   db '__progname_full',0  ; DATA XREF: LOAD:0000000000000868↑o
LOAD:0000000000000B56 aCxaAtexit      db '__cxa_atexit',0     ; DATA XREF: LOAD:0000000000000700↑o
LOAD:0000000000000B63 aGlibc23        db 'GLIBC_2.3',0        ; DATA XREF: LOAD:0000000000000C70↓o
LOAD:0000000000000B6D aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000000C80↓o
LOAD:0000000000000B79 aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:0000000000000C90↓o
LOAD:0000000000000B84 aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000000CA0↓o
LOAD:0000000000000B8E aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000000CB0↓o
LOAD:0000000000000B9A aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:0000000000000B9A                                         ; DATA XREF: LOAD:0000000000000358↑o
LOAD:0000000000000BB6 aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:0000000000000598↑o
LOAD:0000000000000BC5 aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:0000000000000BC5                                         ; DATA XREF: LOAD:0000000000000790↑o
LOAD:0000000000000BDF                 align 20h
LOAD:0000000000000BE0 ; ELF GNU Symbol Version Table
LOAD:0000000000000BE0                 dw 0
LOAD:0000000000000BE2                 dw 2                    ; free@@GLIBC_2.2.5
LOAD:0000000000000BE4                 dw 2                    ; abort@@GLIBC_2.2.5
LOAD:0000000000000BE6                 dw 2                    ; __errno_location@@GLIBC_2.2.5
LOAD:0000000000000BE8                 dw 2                    ; strncmp@@GLIBC_2.2.5
LOAD:0000000000000BEA                 dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
LOAD:0000000000000BEC                 dw 2                    ; _exit@@GLIBC_2.2.5
LOAD:0000000000000BEE                 dw 2                    ; strcpy@@GLIBC_2.2.5
LOAD:0000000000000BF0                 dw 2                    ; __fpending@@GLIBC_2.2.5
LOAD:0000000000000BF2                 dw 2                    ; puts@@GLIBC_2.2.5
LOAD:0000000000000BF4                 dw 2                    ; textdomain@@GLIBC_2.2.5
LOAD:0000000000000BF6                 dw 2                    ; __strtol_internal@@GLIBC_2.2.5
LOAD:0000000000000BF8                 dw 2                    ; fclose@@GLIBC_2.2.5
LOAD:0000000000000BFA                 dw 2                    ; bindtextdomain@@GLIBC_2.2.5
LOAD:0000000000000BFC                 dw 2                    ; dcgettext@@GLIBC_2.2.5
LOAD:0000000000000BFE                 dw 2                    ; __ctype_get_mb_cur_max@@GLIBC_2.2.5
LOAD:0000000000000C00                 dw 2                    ; strlen@@GLIBC_2.2.5
LOAD:0000000000000C02                 dw 3                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:0000000000000C04                 dw 2                    ; getopt_long@@GLIBC_2.2.5
LOAD:0000000000000C06                 dw 2                    ; mbrtowc@@GLIBC_2.2.5
LOAD:0000000000000C08                 dw 2                    ; strchr@@GLIBC_2.2.5
LOAD:0000000000000C0A                 dw 2                    ; strrchr@@GLIBC_2.2.5
LOAD:0000000000000C0C                 dw 2                    ; lseek@@GLIBC_2.2.5
LOAD:0000000000000C0E                 dw 2                    ; memset@@GLIBC_2.2.5
LOAD:0000000000000C10                 dw 2                    ; __libc_start_main@@GLIBC_2.2.5
LOAD:0000000000000C12                 dw 2                    ; memcmp@@GLIBC_2.2.5
LOAD:0000000000000C14                 dw 2                    ; fputs_unlocked@@GLIBC_2.2.5
LOAD:0000000000000C16                 dw 2                    ; calloc@@GLIBC_2.2.5
LOAD:0000000000000C18                 dw 2                    ; strcmp@@GLIBC_2.2.5
LOAD:0000000000000C1A                 dw 0                    ; local  symbol: __gmon_start__
LOAD:0000000000000C1C                 dw 2                    ; strtol@@GLIBC_2.2.5
LOAD:0000000000000C1E                 dw 4                    ; memcpy@@GLIBC_2.14
LOAD:0000000000000C20                 dw 2                    ; kill@@GLIBC_2.2.5
LOAD:0000000000000C22                 dw 2                    ; fileno@@GLIBC_2.2.5
LOAD:0000000000000C24                 dw 2                    ; malloc@@GLIBC_2.2.5
LOAD:0000000000000C26                 dw 2                    ; fflush@@GLIBC_2.2.5
LOAD:0000000000000C28                 dw 2                    ; nl_langinfo@@GLIBC_2.2.5
LOAD:0000000000000C2A                 dw 2                    ; __freading@@GLIBC_2.2.5
LOAD:0000000000000C2C                 dw 2                    ; strsignal@@GLIBC_2.2.5
LOAD:0000000000000C2E                 dw 2                    ; realloc@@GLIBC_2.2.5
LOAD:0000000000000C30                 dw 2                    ; setlocale@@GLIBC_2.2.5
LOAD:0000000000000C32                 dw 5                    ; __printf_chk@@GLIBC_2.3.4
LOAD:0000000000000C34                 dw 2                    ; error@@GLIBC_2.2.5
LOAD:0000000000000C36                 dw 2                    ; fseeko@@GLIBC_2.2.5
LOAD:0000000000000C38                 dw 2                    ; __cxa_atexit@@GLIBC_2.2.5
LOAD:0000000000000C3A                 dw 2                    ; __libc_current_sigrtmin@@GLIBC_2.2.5
LOAD:0000000000000C3C                 dw 2                    ; exit@@GLIBC_2.2.5
LOAD:0000000000000C3E                 dw 2                    ; fwrite@@GLIBC_2.2.5
LOAD:0000000000000C40                 dw 5                    ; __fprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000C42                 dw 2                    ; __libc_current_sigrtmax@@GLIBC_2.2.5
LOAD:0000000000000C44                 dw 0                    ; local  symbol: _ITM_registerTMCloneTable
LOAD:0000000000000C46                 dw 2                    ; mbsinit@@GLIBC_2.2.5
LOAD:0000000000000C48                 dw 2                    ; iswprint@@GLIBC_2.2.5
LOAD:0000000000000C4A                 dw 2                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:0000000000000C4C                 dw 6                    ; __ctype_b_loc@@GLIBC_2.3
LOAD:0000000000000C4E                 dw 5                    ; __sprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000C50                 dw 2                    ; stdout@@GLIBC_2.2.5
LOAD:0000000000000C52                 dw 2                    ; __progname@@GLIBC_2.2.5
LOAD:0000000000000C54                 dw 2                    ; program_invocation_name@@GLIBC_2.2.5
LOAD:0000000000000C56                 dw 2                    ; __progname_full@@GLIBC_2.2.5
LOAD:0000000000000C58                 dw 2                    ; program_invocation_short_name@@GLIBC_2.2.5
LOAD:0000000000000C5A                 dw 2                    ; stderr@@GLIBC_2.2.5
LOAD:0000000000000C5C                 dw 2                    ; optind@@GLIBC_2.2.5
LOAD:0000000000000C5E                 dw 2                    ; optarg@@GLIBC_2.2.5
LOAD:0000000000000C60 ; ELF GNU Symbol Version Requirements
LOAD:0000000000000C60                 Elf64_Verneed <1, 5, offset aLibcSo6 - offset byte_8E0, 10h, 0> ; "libc.so.6"
LOAD:0000000000000C70                 Elf64_Vernaux <0D696913h, 0, 6, offset aGlibc23 - offset byte_8E0, \ ; "GLIBC_2.3"
LOAD:0000000000000C70                                10h>
LOAD:0000000000000C80                 Elf64_Vernaux <9691974h, 0, 5, offset aGlibc234 - offset byte_8E0, \ ; "GLIBC_2.3.4"
LOAD:0000000000000C80                                10h>
LOAD:0000000000000C90                 Elf64_Vernaux <6969194h, 0, 4, offset aGlibc214 - offset byte_8E0, \ ; "GLIBC_2.14"
LOAD:0000000000000C90                                10h>
LOAD:0000000000000CA0                 Elf64_Vernaux <0D696914h, 0, 3, offset aGlibc24 - offset byte_8E0, \ ; "GLIBC_2.4"
LOAD:0000000000000CA0                                10h>
LOAD:0000000000000CB0                 Elf64_Vernaux <9691A75h, 0, 2, offset aGlibc225 - offset byte_8E0, 0> ; "GLIBC_2.2.5"
LOAD:0000000000000CC0 ; ELF RELA Relocation Table
LOAD:0000000000000CC0                 Elf64_Rela <207B10h, 8, 1EB0h> ; R_X86_64_RELATIVE +1EB0h
LOAD:0000000000000CD8                 Elf64_Rela <207B18h, 8, 1E70h> ; R_X86_64_RELATIVE +1E70h
LOAD:0000000000000CF0                 Elf64_Rela <207B20h, 8, 5247h> ; R_X86_64_RELATIVE +5247h
LOAD:0000000000000D08                 Elf64_Rela <207B40h, 8, 57F8h> ; R_X86_64_RELATIVE +57F8h
LOAD:0000000000000D20                 Elf64_Rela <207B60h, 8, 524Ch> ; R_X86_64_RELATIVE +524Ch
LOAD:0000000000000D38                 Elf64_Rela <207B80h, 8, 5252h> ; R_X86_64_RELATIVE +5252h
LOAD:0000000000000D50                 Elf64_Rela <207BA0h, 8, 5257h> ; R_X86_64_RELATIVE +5257h
LOAD:0000000000000D68                 Elf64_Rela <207BE0h, 8, 5871h> ; R_X86_64_RELATIVE +5871h
LOAD:0000000000000D80                 Elf64_Rela <207BE8h, 8, 5879h> ; R_X86_64_RELATIVE +5879h
LOAD:0000000000000D98                 Elf64_Rela <207BF0h, 8, 587Fh> ; R_X86_64_RELATIVE +587Fh
LOAD:0000000000000DB0                 Elf64_Rela <207BF8h, 8, 588Ch> ; R_X86_64_RELATIVE +588Ch
LOAD:0000000000000DC8                 Elf64_Rela <207C00h, 8, 5899h> ; R_X86_64_RELATIVE +5899h
LOAD:0000000000000DE0                 Elf64_Rela <207C08h, 8, 51F9h> ; R_X86_64_RELATIVE +51F9h
LOAD:0000000000000DF8                 Elf64_Rela <207C10h, 8, 58ADh> ; R_X86_64_RELATIVE +58ADh
LOAD:0000000000000E10                 Elf64_Rela <207C18h, 8, 5892h> ; R_X86_64_RELATIVE +5892h
LOAD:0000000000000E28                 Elf64_Rela <207C20h, 8, 51DFh> ; R_X86_64_RELATIVE +51DFh
LOAD:0000000000000E40                 Elf64_Rela <207C28h, 8, 58B5h> ; R_X86_64_RELATIVE +58B5h
LOAD:0000000000000E58                 Elf64_Rela <208008h, 8, 208008h> ; R_X86_64_RELATIVE +208008h
LOAD:0000000000000E70                 Elf64_Rela <208010h, 8, 57FFh> ; R_X86_64_RELATIVE +57FFh
LOAD:0000000000000E88                 Elf64_Rela <208060h, 8, 208070h> ; R_X86_64_RELATIVE +208070h
LOAD:0000000000000EA0                 Elf64_Rela <208078h, 8, 2082C0h> ; R_X86_64_RELATIVE +2082C0h
LOAD:0000000000000EB8                 Elf64_Rela <207FD0h, 500000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:0000000000000ED0                 Elf64_Rela <207FD8h, 1800000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:0000000000000EE8                 Elf64_Rela <207FE0h, 1D00000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:0000000000000F00                 Elf64_Rela <207FE8h, 3200000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:0000000000000F18                 Elf64_Rela <207FF0h, 3500000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:0000000000000F30                 Elf64_Rela <208240h, 3900000005h, 0> ; R_X86_64_COPY __progname
LOAD:0000000000000F48                 Elf64_Rela <208248h, 3800000005h, 0> ; R_X86_64_COPY stdout
LOAD:0000000000000F60                 Elf64_Rela <208250h, 3E00000005h, 0> ; R_X86_64_COPY optind
LOAD:0000000000000F78                 Elf64_Rela <208258h, 3F00000005h, 0> ; R_X86_64_COPY optarg
LOAD:0000000000000F90                 Elf64_Rela <208260h, 3B00000005h, 0> ; R_X86_64_COPY __progname_full
LOAD:0000000000000FA8                 Elf64_Rela <208280h, 3D00000005h, 0> ; R_X86_64_COPY stderr
LOAD:0000000000000FC0 ; ELF JMPREL Relocation Table
LOAD:0000000000000FC0                 Elf64_Rela <207E40h, 100000007h, 0> ; R_X86_64_JUMP_SLOT free
LOAD:0000000000000FD8                 Elf64_Rela <207E48h, 200000007h, 0> ; R_X86_64_JUMP_SLOT abort
LOAD:0000000000000FF0                 Elf64_Rela <207E50h, 300000007h, 0> ; R_X86_64_JUMP_SLOT __errno_location
LOAD:0000000000001008                 Elf64_Rela <207E58h, 400000007h, 0> ; R_X86_64_JUMP_SLOT strncmp
LOAD:0000000000001020                 Elf64_Rela <207E60h, 600000007h, 0> ; R_X86_64_JUMP_SLOT _exit
LOAD:0000000000001038                 Elf64_Rela <207E68h, 700000007h, 0> ; R_X86_64_JUMP_SLOT strcpy
LOAD:0000000000001050                 Elf64_Rela <207E70h, 800000007h, 0> ; R_X86_64_JUMP_SLOT __fpending
LOAD:0000000000001068                 Elf64_Rela <207E78h, 900000007h, 0> ; R_X86_64_JUMP_SLOT puts
LOAD:0000000000001080                 Elf64_Rela <207E80h, 0A00000007h, 0> ; R_X86_64_JUMP_SLOT textdomain
LOAD:0000000000001098                 Elf64_Rela <207E88h, 0B00000007h, 0> ; R_X86_64_JUMP_SLOT __strtol_internal
LOAD:00000000000010B0                 Elf64_Rela <207E90h, 0C00000007h, 0> ; R_X86_64_JUMP_SLOT fclose
LOAD:00000000000010C8                 Elf64_Rela <207E98h, 0D00000007h, 0> ; R_X86_64_JUMP_SLOT bindtextdomain
LOAD:00000000000010E0                 Elf64_Rela <207EA0h, 0E00000007h, 0> ; R_X86_64_JUMP_SLOT dcgettext
LOAD:00000000000010F8                 Elf64_Rela <207EA8h, 0F00000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_get_mb_cur_max
LOAD:0000000000001110                 Elf64_Rela <207EB0h, 1000000007h, 0> ; R_X86_64_JUMP_SLOT strlen
LOAD:0000000000001128                 Elf64_Rela <207EB8h, 1100000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
LOAD:0000000000001140                 Elf64_Rela <207EC0h, 1200000007h, 0> ; R_X86_64_JUMP_SLOT getopt_long
LOAD:0000000000001158                 Elf64_Rela <207EC8h, 1300000007h, 0> ; R_X86_64_JUMP_SLOT mbrtowc
LOAD:0000000000001170                 Elf64_Rela <207ED0h, 1400000007h, 0> ; R_X86_64_JUMP_SLOT strchr
LOAD:0000000000001188                 Elf64_Rela <207ED8h, 1500000007h, 0> ; R_X86_64_JUMP_SLOT strrchr
LOAD:00000000000011A0                 Elf64_Rela <207EE0h, 1600000007h, 0> ; R_X86_64_JUMP_SLOT lseek
LOAD:00000000000011B8                 Elf64_Rela <207EE8h, 1700000007h, 0> ; R_X86_64_JUMP_SLOT memset
LOAD:00000000000011D0                 Elf64_Rela <207EF0h, 1900000007h, 0> ; R_X86_64_JUMP_SLOT memcmp
LOAD:00000000000011E8                 Elf64_Rela <207EF8h, 1A00000007h, 0> ; R_X86_64_JUMP_SLOT fputs_unlocked
LOAD:0000000000001200                 Elf64_Rela <207F00h, 1B00000007h, 0> ; R_X86_64_JUMP_SLOT calloc
LOAD:0000000000001218                 Elf64_Rela <207F08h, 1C00000007h, 0> ; R_X86_64_JUMP_SLOT strcmp
LOAD:0000000000001230                 Elf64_Rela <207F10h, 1E00000007h, 0> ; R_X86_64_JUMP_SLOT strtol
LOAD:0000000000001248                 Elf64_Rela <207F18h, 1F00000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
LOAD:0000000000001260                 Elf64_Rela <207F20h, 2000000007h, 0> ; R_X86_64_JUMP_SLOT kill
LOAD:0000000000001278                 Elf64_Rela <207F28h, 2100000007h, 0> ; R_X86_64_JUMP_SLOT fileno
LOAD:0000000000001290                 Elf64_Rela <207F30h, 2200000007h, 0> ; R_X86_64_JUMP_SLOT malloc
LOAD:00000000000012A8                 Elf64_Rela <207F38h, 2300000007h, 0> ; R_X86_64_JUMP_SLOT fflush
LOAD:00000000000012C0                 Elf64_Rela <207F40h, 2400000007h, 0> ; R_X86_64_JUMP_SLOT nl_langinfo
LOAD:00000000000012D8                 Elf64_Rela <207F48h, 2500000007h, 0> ; R_X86_64_JUMP_SLOT __freading
LOAD:00000000000012F0                 Elf64_Rela <207F50h, 2600000007h, 0> ; R_X86_64_JUMP_SLOT strsignal
LOAD:0000000000001308                 Elf64_Rela <207F58h, 2700000007h, 0> ; R_X86_64_JUMP_SLOT realloc
LOAD:0000000000001320                 Elf64_Rela <207F60h, 2800000007h, 0> ; R_X86_64_JUMP_SLOT setlocale
LOAD:0000000000001338                 Elf64_Rela <207F68h, 2900000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
LOAD:0000000000001350                 Elf64_Rela <207F70h, 2A00000007h, 0> ; R_X86_64_JUMP_SLOT error
LOAD:0000000000001368                 Elf64_Rela <207F78h, 2B00000007h, 0> ; R_X86_64_JUMP_SLOT fseeko
LOAD:0000000000001380                 Elf64_Rela <207F80h, 2C00000007h, 0> ; R_X86_64_JUMP_SLOT __cxa_atexit
LOAD:0000000000001398                 Elf64_Rela <207F88h, 2D00000007h, 0> ; R_X86_64_JUMP_SLOT __libc_current_sigrtmin
LOAD:00000000000013B0                 Elf64_Rela <207F90h, 2E00000007h, 0> ; R_X86_64_JUMP_SLOT exit
LOAD:00000000000013C8                 Elf64_Rela <207F98h, 2F00000007h, 0> ; R_X86_64_JUMP_SLOT fwrite
LOAD:00000000000013E0                 Elf64_Rela <207FA0h, 3000000007h, 0> ; R_X86_64_JUMP_SLOT __fprintf_chk
LOAD:00000000000013F8                 Elf64_Rela <207FA8h, 3100000007h, 0> ; R_X86_64_JUMP_SLOT __libc_current_sigrtmax
LOAD:0000000000001410                 Elf64_Rela <207FB0h, 3300000007h, 0> ; R_X86_64_JUMP_SLOT mbsinit
LOAD:0000000000001428                 Elf64_Rela <207FB8h, 3400000007h, 0> ; R_X86_64_JUMP_SLOT iswprint
LOAD:0000000000001440                 Elf64_Rela <207FC0h, 3600000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_b_loc
LOAD:0000000000001458                 Elf64_Rela <207FC8h, 3700000007h, 0> ; R_X86_64_JUMP_SLOT __sprintf_chk
LOAD:0000000000001458 LOAD            ends
LOAD:0000000000001458
.init:0000000000001470 ; ===========================================================================
.init:0000000000001470
.init:0000000000001470 ; Segment type: Pure code
.init:0000000000001470 ; Segment permissions: Read/Execute
.init:0000000000001470 _init           segment dword public 'CODE' use64
.init:0000000000001470                 assume cs:_init
.init:0000000000001470                 ;org 1470h
.init:0000000000001470                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:0000000000001470
.init:0000000000001470 ; =============== S U B R O U T I N E =======================================
.init:0000000000001470
.init:0000000000001470
.init:0000000000001470                 public _init_proc
.init:0000000000001470 _init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
.init:0000000000001470                 sub     rsp, 8          ; _init
.init:0000000000001474                 mov     rax, cs:__gmon_start___ptr
.init:000000000000147B                 test    rax, rax
.init:000000000000147E                 jz      short loc_1482
.init:0000000000001480                 call    rax ; __gmon_start__
.init:0000000000001482
.init:0000000000001482 loc_1482:                               ; CODE XREF: _init_proc+E↑j
.init:0000000000001482                 add     rsp, 8
.init:0000000000001486                 retn
.init:0000000000001486 _init_proc      endp
.init:0000000000001486
.init:0000000000001486 _init           ends
.init:0000000000001486
LOAD:0000000000001487 ; ===========================================================================
LOAD:0000000000001487
LOAD:0000000000001487 ; Segment type: Pure code
LOAD:0000000000001487 ; Segment permissions: Read/Execute
LOAD:0000000000001487 LOAD            segment byte public 'CODE' use64
LOAD:0000000000001487                 assume cs:LOAD
LOAD:0000000000001487                 ;org 1487h
LOAD:0000000000001487                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000001487                 align 10h
LOAD:0000000000001487 LOAD            ends
LOAD:0000000000001487
.plt:0000000000001490 ; ===========================================================================
.plt:0000000000001490
.plt:0000000000001490 ; Segment type: Pure code
.plt:0000000000001490 ; Segment permissions: Read/Execute
.plt:0000000000001490 _plt            segment para public 'CODE' use64
.plt:0000000000001490                 assume cs:_plt
.plt:0000000000001490                 ;org 1490h
.plt:0000000000001490                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:0000000000001490
.plt:0000000000001490 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001490
.plt:0000000000001490
.plt:0000000000001490 sub_1490        proc near               ; CODE XREF: .plt:00000000000014AB↓j
.plt:0000000000001490                                         ; .plt:00000000000014BB↓j ...
.plt:0000000000001490 ; __unwind {
.plt:0000000000001490                 push    cs:qword_207E30
.plt:0000000000001496                 jmp     cs:qword_207E38
.plt:0000000000001496 sub_1490        endp
.plt:0000000000001496
.plt:0000000000001496 ; ---------------------------------------------------------------------------
.plt:000000000000149C                 align 20h
.plt:00000000000014A0
.plt:00000000000014A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014A0
.plt:00000000000014A0 ; Attributes: thunk
.plt:00000000000014A0
.plt:00000000000014A0 ; void free(void *ptr)
.plt:00000000000014A0 _free           proc near               ; CODE XREF: operand2sig+11D↓p
.plt:00000000000014A0                                         ; operand2sig+17A↓p ...
.plt:00000000000014A0                 jmp     cs:free_ptr
.plt:00000000000014A0 _free           endp
.plt:00000000000014A0
.plt:00000000000014A6 ; ---------------------------------------------------------------------------
.plt:00000000000014A6                 push    0
.plt:00000000000014AB                 jmp     sub_1490
.plt:00000000000014B0
.plt:00000000000014B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014B0
.plt:00000000000014B0 ; Attributes: noreturn thunk
.plt:00000000000014B0
.plt:00000000000014B0 ; void __noreturn abort(void)
.plt:00000000000014B0 _abort          proc near               ; CODE XREF: set_program_name+9A↓p
.plt:00000000000014B0                                         ; quotearg_buffer_restyled:def_2781↓p ...
.plt:00000000000014B0                 jmp     cs:abort_ptr
.plt:00000000000014B0 _abort          endp
.plt:00000000000014B0
.plt:00000000000014B6 ; ---------------------------------------------------------------------------
.plt:00000000000014B6                 push    1
.plt:00000000000014BB                 jmp     sub_1490
.plt:00000000000014C0
.plt:00000000000014C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014C0
.plt:00000000000014C0 ; Attributes: thunk
.plt:00000000000014C0
.plt:00000000000014C0 ; int *__errno_location(void)
.plt:00000000000014C0 ___errno_location proc near             ; CODE XREF: main+245↓p
.plt:00000000000014C0                                         ; operand2sig+33↓p ...
.plt:00000000000014C0                 jmp     cs:__errno_location_ptr
.plt:00000000000014C0 ___errno_location endp
.plt:00000000000014C0
.plt:00000000000014C6 ; ---------------------------------------------------------------------------
.plt:00000000000014C6                 push    2
.plt:00000000000014CB                 jmp     sub_1490
.plt:00000000000014D0
.plt:00000000000014D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014D0
.plt:00000000000014D0 ; Attributes: thunk
.plt:00000000000014D0
.plt:00000000000014D0 ; int strncmp(const char *s1, const char *s2, size_t n)
.plt:00000000000014D0 _strncmp        proc near               ; CODE XREF: usage+29C↓p
.plt:00000000000014D0                                         ; usage+35D↓p
.plt:00000000000014D0                 jmp     cs:strncmp_ptr
.plt:00000000000014D0 _strncmp        endp
.plt:00000000000014D0
.plt:00000000000014D6 ; ---------------------------------------------------------------------------
.plt:00000000000014D6                 push    3
.plt:00000000000014DB                 jmp     sub_1490
.plt:00000000000014E0
.plt:00000000000014E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014E0
.plt:00000000000014E0 ; Attributes: noreturn thunk
.plt:00000000000014E0
.plt:00000000000014E0 ; void __noreturn _exit(int status)
.plt:00000000000014E0 __exit          proc near               ; CODE XREF: close_stdout+88↓p
.plt:00000000000014E0                 jmp     cs:_exit_ptr
.plt:00000000000014E0 __exit          endp
.plt:00000000000014E0
.plt:00000000000014E6 ; ---------------------------------------------------------------------------
.plt:00000000000014E6                 push    4
.plt:00000000000014EB                 jmp     sub_1490
.plt:00000000000014F0
.plt:00000000000014F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014F0
.plt:00000000000014F0 ; Attributes: thunk
.plt:00000000000014F0
.plt:00000000000014F0 ; char *strcpy(char *dest, const char *src)
.plt:00000000000014F0 _strcpy         proc near               ; CODE XREF: sig2str+39↓p
.plt:00000000000014F0                 jmp     cs:strcpy_ptr
.plt:00000000000014F0 _strcpy         endp
.plt:00000000000014F0
.plt:00000000000014F6 ; ---------------------------------------------------------------------------
.plt:00000000000014F6                 push    5
.plt:00000000000014FB                 jmp     sub_1490
.plt:0000000000001500
.plt:0000000000001500 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001500
.plt:0000000000001500 ; Attributes: thunk
.plt:0000000000001500
.plt:0000000000001500 ; size_t __fpending(FILE *fp)
.plt:0000000000001500 ___fpending     proc near               ; CODE XREF: close_stream+7↓p
.plt:0000000000001500                 jmp     cs:__fpending_ptr
.plt:0000000000001500 ___fpending     endp
.plt:0000000000001500
.plt:0000000000001506 ; ---------------------------------------------------------------------------
.plt:0000000000001506                 push    6
.plt:000000000000150B                 jmp     sub_1490
.plt:0000000000001510
.plt:0000000000001510 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001510
.plt:0000000000001510 ; Attributes: thunk
.plt:0000000000001510
.plt:0000000000001510 ; int puts(const char *s)
.plt:0000000000001510 _puts           proc near               ; CODE XREF: main+44B↓p
.plt:0000000000001510                                         ; main+4B5↓p
.plt:0000000000001510                 jmp     cs:puts_ptr
.plt:0000000000001510 _puts           endp
.plt:0000000000001510
.plt:0000000000001516 ; ---------------------------------------------------------------------------
.plt:0000000000001516                 push    7
.plt:000000000000151B                 jmp     sub_1490
.plt:0000000000001520
.plt:0000000000001520 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001520
.plt:0000000000001520 ; Attributes: thunk
.plt:0000000000001520
.plt:0000000000001520 ; char *textdomain(const char *domainname)
.plt:0000000000001520 _textdomain     proc near               ; CODE XREF: main+67↓p
.plt:0000000000001520                 jmp     cs:textdomain_ptr
.plt:0000000000001520 _textdomain     endp
.plt:0000000000001520
.plt:0000000000001526 ; ---------------------------------------------------------------------------
.plt:0000000000001526                 push    8
.plt:000000000000152B                 jmp     sub_1490
.plt:0000000000001530
.plt:0000000000001530 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001530
.plt:0000000000001530 ; Attributes: thunk
.plt:0000000000001530
.plt:0000000000001530 ; __int64 __strtol_internal(const char *nptr, char **endptr, int base, int group)
.plt:0000000000001530 ___strtol_internal proc near            ; CODE XREF: main+2BB↓p
.plt:0000000000001530                 jmp     cs:__strtol_internal_ptr
.plt:0000000000001530 ___strtol_internal endp
.plt:0000000000001530
.plt:0000000000001536 ; ---------------------------------------------------------------------------
.plt:0000000000001536                 push    9
.plt:000000000000153B                 jmp     sub_1490
.plt:0000000000001540
.plt:0000000000001540 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001540
.plt:0000000000001540 ; Attributes: thunk
.plt:0000000000001540
.plt:0000000000001540 ; int fclose(FILE *stream)
.plt:0000000000001540 _fclose         proc near               ; CODE XREF: rpl_fclose+36↓p
.plt:0000000000001540                                         ; rpl_fclose+6B↓j
.plt:0000000000001540                 jmp     cs:fclose_ptr
.plt:0000000000001540 _fclose         endp
.plt:0000000000001540
.plt:0000000000001546 ; ---------------------------------------------------------------------------
.plt:0000000000001546                 push    0Ah
.plt:000000000000154B                 jmp     sub_1490
.plt:0000000000001550
.plt:0000000000001550 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001550
.plt:0000000000001550 ; Attributes: thunk
.plt:0000000000001550
.plt:0000000000001550 ; char *bindtextdomain(const char *domainname, const char *dirname)
.plt:0000000000001550 _bindtextdomain proc near               ; CODE XREF: main+5B↓p
.plt:0000000000001550                 jmp     cs:bindtextdomain_ptr
.plt:0000000000001550 _bindtextdomain endp
.plt:0000000000001550
.plt:0000000000001556 ; ---------------------------------------------------------------------------
.plt:0000000000001556                 push    0Bh
.plt:000000000000155B                 jmp     sub_1490
.plt:0000000000001560
.plt:0000000000001560 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001560
.plt:0000000000001560 ; Attributes: thunk
.plt:0000000000001560
.plt:0000000000001560 ; char *dcgettext(const char *domainname, const char *msgid, int category)
.plt:0000000000001560 _dcgettext      proc near               ; CODE XREF: main+27F↓p
.plt:0000000000001560                                         ; main+54B↓p ...
.plt:0000000000001560                 jmp     cs:dcgettext_ptr
.plt:0000000000001560 _dcgettext      endp
.plt:0000000000001560
.plt:0000000000001566 ; ---------------------------------------------------------------------------
.plt:0000000000001566                 push    0Ch
.plt:000000000000156B                 jmp     sub_1490
.plt:0000000000001570
.plt:0000000000001570 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001570
.plt:0000000000001570 ; Attributes: thunk
.plt:0000000000001570
.plt:0000000000001570 ; size_t __ctype_get_mb_cur_max(void)
.plt:0000000000001570 ___ctype_get_mb_cur_max proc near       ; CODE XREF: quotearg_buffer_restyled+6C↓p
.plt:0000000000001570                 jmp     cs:__ctype_get_mb_cur_max_ptr
.plt:0000000000001570 ___ctype_get_mb_cur_max endp
.plt:0000000000001570
.plt:0000000000001576 ; ---------------------------------------------------------------------------
.plt:0000000000001576                 push    0Dh
.plt:000000000000157B                 jmp     sub_1490
.plt:0000000000001580
.plt:0000000000001580 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001580
.plt:0000000000001580 ; Attributes: thunk
.plt:0000000000001580
.plt:0000000000001580 ; size_t strlen(const char *s)
.plt:0000000000001580 _strlen         proc near               ; CODE XREF: quotearg_buffer_restyled+157↓p
.plt:0000000000001580                                         ; quotearg_buffer_restyled+8DB↓p ...
.plt:0000000000001580                 jmp     cs:strlen_ptr
.plt:0000000000001580 _strlen         endp
.plt:0000000000001580
.plt:0000000000001586 ; ---------------------------------------------------------------------------
.plt:0000000000001586                 push    0Eh
.plt:000000000000158B                 jmp     sub_1490
.plt:0000000000001590
.plt:0000000000001590 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001590
.plt:0000000000001590 ; Attributes: noreturn thunk
.plt:0000000000001590
.plt:0000000000001590 ___stack_chk_fail proc near             ; CODE XREF: main:loc_1D3B↓p
.plt:0000000000001590                                         ; operand2sig:loc_247C↓p ...
.plt:0000000000001590                 jmp     cs:__stack_chk_fail_ptr
.plt:0000000000001590 ___stack_chk_fail endp
.plt:0000000000001590
.plt:0000000000001596 ; ---------------------------------------------------------------------------
.plt:0000000000001596                 push    0Fh
.plt:000000000000159B                 jmp     sub_1490
.plt:00000000000015A0
.plt:00000000000015A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015A0
.plt:00000000000015A0 ; Attributes: thunk
.plt:00000000000015A0
.plt:00000000000015A0 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
.plt:00000000000015A0 _getopt_long    proc near               ; CODE XREF: main+97↓p
.plt:00000000000015A0                 jmp     cs:getopt_long_ptr
.plt:00000000000015A0 _getopt_long    endp
.plt:00000000000015A0
.plt:00000000000015A6 ; ---------------------------------------------------------------------------
.plt:00000000000015A6                 push    10h
.plt:00000000000015AB                 jmp     sub_1490
.plt:00000000000015B0
.plt:00000000000015B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015B0
.plt:00000000000015B0 ; Attributes: thunk
.plt:00000000000015B0
.plt:00000000000015B0 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
.plt:00000000000015B0 _mbrtowc        proc near               ; CODE XREF: rpl_mbrtowc+32↓p
.plt:00000000000015B0                 jmp     cs:mbrtowc_ptr
.plt:00000000000015B0 _mbrtowc        endp
.plt:00000000000015B0
.plt:00000000000015B6 ; ---------------------------------------------------------------------------
.plt:00000000000015B6                 push    11h
.plt:00000000000015BB                 jmp     sub_1490
.plt:00000000000015C0
.plt:00000000000015C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015C0
.plt:00000000000015C0 ; Attributes: thunk
.plt:00000000000015C0
.plt:00000000000015C0 ; char *strchr(const char *s, int c)
.plt:00000000000015C0 _strchr         proc near               ; CODE XREF: operand2sig+E6↓p
.plt:00000000000015C0                 jmp     cs:strchr_ptr
.plt:00000000000015C0 _strchr         endp
.plt:00000000000015C0
.plt:00000000000015C6 ; ---------------------------------------------------------------------------
.plt:00000000000015C6                 push    12h
.plt:00000000000015CB                 jmp     sub_1490
.plt:00000000000015D0
.plt:00000000000015D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015D0
.plt:00000000000015D0 ; Attributes: thunk
.plt:00000000000015D0
.plt:00000000000015D0 ; char *strrchr(const char *s, int c)
.plt:00000000000015D0 _strrchr        proc near               ; CODE XREF: set_program_name+E↓p
.plt:00000000000015D0                 jmp     cs:strrchr_ptr
.plt:00000000000015D0 _strrchr        endp
.plt:00000000000015D0
.plt:00000000000015D6 ; ---------------------------------------------------------------------------
.plt:00000000000015D6                 push    13h
.plt:00000000000015DB                 jmp     sub_1490
.plt:00000000000015E0
.plt:00000000000015E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015E0
.plt:00000000000015E0 ; Attributes: thunk
.plt:00000000000015E0
.plt:00000000000015E0 ; __off_t lseek(int fd, __off_t offset, int whence)
.plt:00000000000015E0 _lseek          proc near               ; CODE XREF: rpl_fclose+59↓p
.plt:00000000000015E0                                         ; rpl_fseeko+3B↓p
.plt:00000000000015E0                 jmp     cs:lseek_ptr
.plt:00000000000015E0 _lseek          endp
.plt:00000000000015E0
.plt:00000000000015E6 ; ---------------------------------------------------------------------------
.plt:00000000000015E6                 push    14h
.plt:00000000000015EB                 jmp     sub_1490
.plt:00000000000015F0
.plt:00000000000015F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015F0
.plt:00000000000015F0 ; Attributes: thunk
.plt:00000000000015F0
.plt:00000000000015F0 ; void *memset(void *s, int c, size_t n)
.plt:00000000000015F0 _memset         proc near               ; CODE XREF: quotearg_n_options+99↓p
.plt:00000000000015F0                                         ; xzalloc+12↓j
.plt:00000000000015F0                 jmp     cs:memset_ptr
.plt:00000000000015F0 _memset         endp
.plt:00000000000015F0
.plt:00000000000015F6 ; ---------------------------------------------------------------------------
.plt:00000000000015F6                 push    15h
.plt:00000000000015FB                 jmp     sub_1490
.plt:0000000000001600
.plt:0000000000001600 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001600
.plt:0000000000001600 ; Attributes: thunk
.plt:0000000000001600
.plt:0000000000001600 ; int memcmp(const void *s1, const void *s2, size_t n)
.plt:0000000000001600 _memcmp         proc near               ; CODE XREF: quotearg_buffer_restyled+19A↓p
.plt:0000000000001600                 jmp     cs:memcmp_ptr
.plt:0000000000001600 _memcmp         endp
.plt:0000000000001600
.plt:0000000000001606 ; ---------------------------------------------------------------------------
.plt:0000000000001606                 push    16h
.plt:000000000000160B                 jmp     sub_1490
.plt:0000000000001610
.plt:0000000000001610 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001610
.plt:0000000000001610 ; Attributes: thunk
.plt:0000000000001610
.plt:0000000000001610 ; int fputs_unlocked(const char *s, FILE *stream)
.plt:0000000000001610 _fputs_unlocked proc near               ; CODE XREF: usage+A3↓p
.plt:0000000000001610                                         ; usage+C8↓p ...
.plt:0000000000001610                 jmp     cs:fputs_unlocked_ptr
.plt:0000000000001610 _fputs_unlocked endp
.plt:0000000000001610
.plt:0000000000001616 ; ---------------------------------------------------------------------------
.plt:0000000000001616                 push    17h
.plt:000000000000161B                 jmp     sub_1490
.plt:0000000000001620
.plt:0000000000001620 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001620
.plt:0000000000001620 ; Attributes: thunk
.plt:0000000000001620
.plt:0000000000001620 ; void *calloc(size_t nmemb, size_t size)
.plt:0000000000001620 _calloc         proc near               ; CODE XREF: xcalloc+1A↓p
.plt:0000000000001620                 jmp     cs:calloc_ptr
.plt:0000000000001620 _calloc         endp
.plt:0000000000001620
.plt:0000000000001626 ; ---------------------------------------------------------------------------
.plt:0000000000001626                 push    18h
.plt:000000000000162B                 jmp     sub_1490
.plt:0000000000001630
.plt:0000000000001630 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001630
.plt:0000000000001630 ; Attributes: thunk
.plt:0000000000001630
.plt:0000000000001630 ; int strcmp(const char *s1, const char *s2)
.plt:0000000000001630 _strcmp         proc near               ; CODE XREF: str2sig+52↓p
.plt:0000000000001630                 jmp     cs:strcmp_ptr
.plt:0000000000001630 _strcmp         endp
.plt:0000000000001630
.plt:0000000000001636 ; ---------------------------------------------------------------------------
.plt:0000000000001636                 push    19h
.plt:000000000000163B                 jmp     sub_1490
.plt:0000000000001640
.plt:0000000000001640 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001640
.plt:0000000000001640 ; Attributes: thunk
.plt:0000000000001640
.plt:0000000000001640 ; __int64 strtol(const char *nptr, char **endptr, int base)
.plt:0000000000001640 _strtol         proc near               ; CODE XREF: operand2sig+4E↓p
.plt:0000000000001640                                         ; str2sig+98↓p ...
.plt:0000000000001640                 jmp     cs:strtol_ptr
.plt:0000000000001640 _strtol         endp
.plt:0000000000001640
.plt:0000000000001646 ; ---------------------------------------------------------------------------
.plt:0000000000001646                 push    1Ah
.plt:000000000000164B                 jmp     sub_1490
.plt:0000000000001650
.plt:0000000000001650 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001650
.plt:0000000000001650 ; Attributes: thunk
.plt:0000000000001650
.plt:0000000000001650 ; void *memcpy(void *dest, const void *src, size_t n)
.plt:0000000000001650 _memcpy         proc near               ; CODE XREF: xmemdup+23↓j
.plt:0000000000001650                 jmp     cs:memcpy_ptr
.plt:0000000000001650 _memcpy         endp
.plt:0000000000001650
.plt:0000000000001656 ; ---------------------------------------------------------------------------
.plt:0000000000001656                 push    1Bh
.plt:000000000000165B                 jmp     sub_1490
.plt:0000000000001660
.plt:0000000000001660 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001660
.plt:0000000000001660 ; Attributes: thunk
.plt:0000000000001660
.plt:0000000000001660 ; int kill(__pid_t pid, int sig)
.plt:0000000000001660 _kill           proc near               ; CODE XREF: main+301↓p
.plt:0000000000001660                 jmp     cs:kill_ptr
.plt:0000000000001660 _kill           endp
.plt:0000000000001660
.plt:0000000000001666 ; ---------------------------------------------------------------------------
.plt:0000000000001666                 push    1Ch
.plt:000000000000166B                 jmp     sub_1490
.plt:0000000000001670
.plt:0000000000001670 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001670
.plt:0000000000001670 ; Attributes: thunk
.plt:0000000000001670
.plt:0000000000001670 ; int fileno(FILE *stream)
.plt:0000000000001670 _fileno         proc near               ; CODE XREF: rpl_fclose+7↓p
.plt:0000000000001670                                         ; rpl_fclose+4B↓p ...
.plt:0000000000001670                 jmp     cs:fileno_ptr
.plt:0000000000001670 _fileno         endp
.plt:0000000000001670
.plt:0000000000001676 ; ---------------------------------------------------------------------------
.plt:0000000000001676                 push    1Dh
.plt:000000000000167B                 jmp     sub_1490
.plt:0000000000001680
.plt:0000000000001680 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001680
.plt:0000000000001680 ; Attributes: thunk
.plt:0000000000001680
.plt:0000000000001680 ; void *malloc(size_t size)
.plt:0000000000001680 _malloc         proc near               ; CODE XREF: xmalloc+4↓p
.plt:0000000000001680                 jmp     cs:malloc_ptr
.plt:0000000000001680 _malloc         endp
.plt:0000000000001680
.plt:0000000000001686 ; ---------------------------------------------------------------------------
.plt:0000000000001686                 push    1Eh
.plt:000000000000168B                 jmp     sub_1490
.plt:0000000000001690
.plt:0000000000001690 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001690
.plt:0000000000001690 ; Attributes: thunk
.plt:0000000000001690
.plt:0000000000001690 ; int fflush(FILE *stream)
.plt:0000000000001690 _fflush         proc near               ; CODE XREF: rpl_fflush+1E↓j
.plt:0000000000001690                                         ; rpl_fflush+3B↓j
.plt:0000000000001690                 jmp     cs:fflush_ptr
.plt:0000000000001690 _fflush         endp
.plt:0000000000001690
.plt:0000000000001696 ; ---------------------------------------------------------------------------
.plt:0000000000001696                 push    1Fh
.plt:000000000000169B                 jmp     sub_1490
.plt:00000000000016A0
.plt:00000000000016A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016A0
.plt:00000000000016A0 ; Attributes: thunk
.plt:00000000000016A0
.plt:00000000000016A0 ; char *nl_langinfo(nl_item item)
.plt:00000000000016A0 _nl_langinfo    proc near               ; CODE XREF: locale_charset+9↓p
.plt:00000000000016A0                 jmp     cs:nl_langinfo_ptr
.plt:00000000000016A0 _nl_langinfo    endp
.plt:00000000000016A0
.plt:00000000000016A6 ; ---------------------------------------------------------------------------
.plt:00000000000016A6                 push    20h ; ' '
.plt:00000000000016AB                 jmp     sub_1490
.plt:00000000000016B0
.plt:00000000000016B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016B0
.plt:00000000000016B0 ; Attributes: thunk
.plt:00000000000016B0
.plt:00000000000016B0 ; int __freading(FILE *fp)
.plt:00000000000016B0 ___freading     proc near               ; CODE XREF: rpl_fclose+13↓p
.plt:00000000000016B0                                         ; rpl_fflush+9↓p
.plt:00000000000016B0                 jmp     cs:__freading_ptr
.plt:00000000000016B0 ___freading     endp
.plt:00000000000016B0
.plt:00000000000016B6 ; ---------------------------------------------------------------------------
.plt:00000000000016B6                 push    21h ; '!'
.plt:00000000000016BB                 jmp     sub_1490
.plt:00000000000016C0
.plt:00000000000016C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016C0
.plt:00000000000016C0 ; Attributes: thunk
.plt:00000000000016C0
.plt:00000000000016C0 ; char *strsignal(int sig)
.plt:00000000000016C0 _strsignal      proc near               ; CODE XREF: main+3F5↓p
.plt:00000000000016C0                                         ; main+4EC↓p
.plt:00000000000016C0                 jmp     cs:strsignal_ptr
.plt:00000000000016C0 _strsignal      endp
.plt:00000000000016C0
.plt:00000000000016C6 ; ---------------------------------------------------------------------------
.plt:00000000000016C6                 push    22h ; '"'
.plt:00000000000016CB                 jmp     sub_1490
.plt:00000000000016D0
.plt:00000000000016D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016D0
.plt:00000000000016D0 ; Attributes: thunk
.plt:00000000000016D0
.plt:00000000000016D0 ; void *realloc(void *ptr, size_t size)
.plt:00000000000016D0 _realloc        proc near               ; CODE XREF: xrealloc+11↓p
.plt:00000000000016D0                 jmp     cs:realloc_ptr
.plt:00000000000016D0 _realloc        endp
.plt:00000000000016D0
.plt:00000000000016D6 ; ---------------------------------------------------------------------------
.plt:00000000000016D6                 push    23h ; '#'
.plt:00000000000016DB                 jmp     sub_1490
.plt:00000000000016E0
.plt:00000000000016E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016E0
.plt:00000000000016E0 ; Attributes: thunk
.plt:00000000000016E0
.plt:00000000000016E0 ; char *setlocale(int category, const char *locale)
.plt:00000000000016E0 _setlocale      proc near               ; CODE XREF: main+48↓p
.plt:00000000000016E0                                         ; usage+283↓p ...
.plt:00000000000016E0                 jmp     cs:setlocale_ptr
.plt:00000000000016E0 _setlocale      endp
.plt:00000000000016E0
.plt:00000000000016E6 ; ---------------------------------------------------------------------------
.plt:00000000000016E6                 push    24h ; '$'
.plt:00000000000016EB                 jmp     sub_1490
.plt:00000000000016F0
.plt:00000000000016F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016F0
.plt:00000000000016F0 ; Attributes: thunk
.plt:00000000000016F0
.plt:00000000000016F0 ___printf_chk   proc near               ; CODE XREF: main+422↓p
.plt:00000000000016F0                                         ; main+484↓p ...
.plt:00000000000016F0                 jmp     cs:__printf_chk_ptr
.plt:00000000000016F0 ___printf_chk   endp
.plt:00000000000016F0
.plt:00000000000016F6 ; ---------------------------------------------------------------------------
.plt:00000000000016F6                 push    25h ; '%'
.plt:00000000000016FB                 jmp     sub_1490
.plt:0000000000001700
.plt:0000000000001700 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001700
.plt:0000000000001700 ; Attributes: thunk
.plt:0000000000001700
.plt:0000000000001700 ; void error(int status, int errnum, const char *format, ...)
.plt:0000000000001700 _error          proc near               ; CODE XREF: main+295↓p
.plt:0000000000001700                                         ; main+328↓p ...
.plt:0000000000001700                 jmp     cs:error_ptr
.plt:0000000000001700 _error          endp
.plt:0000000000001700
.plt:0000000000001706 ; ---------------------------------------------------------------------------
.plt:0000000000001706                 push    26h ; '&'
.plt:000000000000170B                 jmp     sub_1490
.plt:0000000000001710
.plt:0000000000001710 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001710
.plt:0000000000001710 ; Attributes: thunk
.plt:0000000000001710
.plt:0000000000001710 ; int fseeko(FILE *stream, __off_t off, int whence)
.plt:0000000000001710 _fseeko         proc near               ; CODE XREF: rpl_fseeko:loc_502A↓j
.plt:0000000000001710                 jmp     cs:fseeko_ptr
.plt:0000000000001710 _fseeko         endp
.plt:0000000000001710
.plt:0000000000001716 ; ---------------------------------------------------------------------------
.plt:0000000000001716                 push    27h ; '''
.plt:000000000000171B                 jmp     sub_1490
.plt:0000000000001720
.plt:0000000000001720 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001720
.plt:0000000000001720 ; Attributes: thunk
.plt:0000000000001720
.plt:0000000000001720 ; int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
.plt:0000000000001720 ___cxa_atexit   proc near               ; CODE XREF: atexit+9↓j
.plt:0000000000001720                 jmp     cs:__cxa_atexit_ptr
.plt:0000000000001720 ___cxa_atexit   endp
.plt:0000000000001720
.plt:0000000000001726 ; ---------------------------------------------------------------------------
.plt:0000000000001726                 push    28h ; '('
.plt:000000000000172B                 jmp     sub_1490
.plt:0000000000001730
.plt:0000000000001730 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001730
.plt:0000000000001730 ; Attributes: thunk
.plt:0000000000001730
.plt:0000000000001730 ; int __libc_current_sigrtmin(void)
.plt:0000000000001730 ___libc_current_sigrtmin proc near      ; CODE XREF: str2sig:loc_4C90↓p
.plt:0000000000001730                                         ; sig2str+55↓p
.plt:0000000000001730                 jmp     cs:__libc_current_sigrtmin_ptr
.plt:0000000000001730 ___libc_current_sigrtmin endp
.plt:0000000000001730
.plt:0000000000001736 ; ---------------------------------------------------------------------------
.plt:0000000000001736                 push    29h ; ')'
.plt:000000000000173B                 jmp     sub_1490
.plt:0000000000001740
.plt:0000000000001740 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001740
.plt:0000000000001740 ; Attributes: noreturn thunk
.plt:0000000000001740
.plt:0000000000001740 ; void __noreturn exit(int status)
.plt:0000000000001740 _exit           proc near               ; CODE XREF: main+14C↓p
.plt:0000000000001740                                         ; usage+58↓p
.plt:0000000000001740                 jmp     cs:exit_ptr
.plt:0000000000001740 _exit           endp
.plt:0000000000001740
.plt:0000000000001746 ; ---------------------------------------------------------------------------
.plt:0000000000001746                 push    2Ah ; '*'
.plt:000000000000174B                 jmp     sub_1490
.plt:0000000000001750
.plt:0000000000001750 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001750
.plt:0000000000001750 ; Attributes: thunk
.plt:0000000000001750
.plt:0000000000001750 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
.plt:0000000000001750 _fwrite         proc near               ; CODE XREF: set_program_name+95↓p
.plt:0000000000001750                 jmp     cs:fwrite_ptr
.plt:0000000000001750 _fwrite         endp
.plt:0000000000001750
.plt:0000000000001756 ; ---------------------------------------------------------------------------
.plt:0000000000001756                 push    2Bh ; '+'
.plt:000000000000175B                 jmp     sub_1490
.plt:0000000000001760
.plt:0000000000001760 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001760
.plt:0000000000001760 ; Attributes: thunk
.plt:0000000000001760
.plt:0000000000001760 ___fprintf_chk  proc near               ; CODE XREF: usage+51↓p
.plt:0000000000001760                                         ; version_etc_arn+37↓p ...
.plt:0000000000001760                 jmp     cs:__fprintf_chk_ptr
.plt:0000000000001760 ___fprintf_chk  endp
.plt:0000000000001760
.plt:0000000000001766 ; ---------------------------------------------------------------------------
.plt:0000000000001766                 push    2Ch ; ','
.plt:000000000000176B                 jmp     sub_1490
.plt:0000000000001770
.plt:0000000000001770 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001770
.plt:0000000000001770 ; Attributes: thunk
.plt:0000000000001770
.plt:0000000000001770 ; int __libc_current_sigrtmax(void)
.plt:0000000000001770 ___libc_current_sigrtmax proc near      ; CODE XREF: str2sig+C7↓p
.plt:0000000000001770                                         ; sig2str+5C↓p
.plt:0000000000001770                 jmp     cs:__libc_current_sigrtmax_ptr
.plt:0000000000001770 ___libc_current_sigrtmax endp
.plt:0000000000001770
.plt:0000000000001776 ; ---------------------------------------------------------------------------
.plt:0000000000001776                 push    2Dh ; '-'
.plt:000000000000177B                 jmp     sub_1490
.plt:0000000000001780
.plt:0000000000001780 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001780
.plt:0000000000001780 ; Attributes: thunk
.plt:0000000000001780
.plt:0000000000001780 ; int mbsinit(const mbstate_t *ps)
.plt:0000000000001780 _mbsinit        proc near               ; CODE XREF: quotearg_buffer_restyled+9A8↓p
.plt:0000000000001780                 jmp     cs:mbsinit_ptr
.plt:0000000000001780 _mbsinit        endp
.plt:0000000000001780
.plt:0000000000001786 ; ---------------------------------------------------------------------------
.plt:0000000000001786                 push    2Eh ; '.'
.plt:000000000000178B                 jmp     sub_1490
.plt:0000000000001790
.plt:0000000000001790 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001790
.plt:0000000000001790 ; Attributes: thunk
.plt:0000000000001790
.plt:0000000000001790 ; int iswprint(wint_t wc)
.plt:0000000000001790 _iswprint       proc near               ; CODE XREF: quotearg_buffer_restyled+990↓p
.plt:0000000000001790                 jmp     cs:iswprint_ptr
.plt:0000000000001790 _iswprint       endp
.plt:0000000000001790
.plt:0000000000001796 ; ---------------------------------------------------------------------------
.plt:0000000000001796                 push    2Fh ; '/'
.plt:000000000000179B                 jmp     sub_1490
.plt:00000000000017A0
.plt:00000000000017A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017A0
.plt:00000000000017A0 ; Attributes: thunk
.plt:00000000000017A0
.plt:00000000000017A0 ; const unsigned __int16 **__ctype_b_loc(void)
.plt:00000000000017A0 ___ctype_b_loc  proc near               ; CODE XREF: quotearg_buffer_restyled+513↓p
.plt:00000000000017A0                 jmp     cs:__ctype_b_loc_ptr
.plt:00000000000017A0 ___ctype_b_loc  endp
.plt:00000000000017A0
.plt:00000000000017A6 ; ---------------------------------------------------------------------------
.plt:00000000000017A6                 push    30h ; '0'
.plt:00000000000017AB                 jmp     sub_1490
.plt:00000000000017B0
.plt:00000000000017B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017B0
.plt:00000000000017B0 ; Attributes: thunk
.plt:00000000000017B0
.plt:00000000000017B0 ___sprintf_chk  proc near               ; CODE XREF: sig2str+AD↓p
.plt:00000000000017B0                 jmp     cs:__sprintf_chk_ptr
.plt:00000000000017B0 ___sprintf_chk  endp
.plt:00000000000017B0
.plt:00000000000017B6 ; ---------------------------------------------------------------------------
.plt:00000000000017B6                 push    31h ; '1'
.plt:00000000000017BB                 jmp     sub_1490
.plt:00000000000017BB ; } // starts at 1490
.plt:00000000000017BB _plt            ends
.plt:00000000000017BB
.plt.got:00000000000017C0 ; ===========================================================================
.plt.got:00000000000017C0
.plt.got:00000000000017C0 ; Segment type: Pure code
.plt.got:00000000000017C0 ; Segment permissions: Read/Execute
.plt.got:00000000000017C0 _plt_got        segment qword public 'CODE' use64
.plt.got:00000000000017C0                 assume cs:_plt_got
.plt.got:00000000000017C0                 ;org 17C0h
.plt.got:00000000000017C0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:00000000000017C0
.plt.got:00000000000017C0 ; =============== S U B R O U T I N E =======================================
.plt.got:00000000000017C0
.plt.got:00000000000017C0 ; Attributes: thunk
.plt.got:00000000000017C0
.plt.got:00000000000017C0 ; int __fastcall _cxa_finalize(void *)
.plt.got:00000000000017C0 __cxa_finalize  proc near               ; CODE XREF: __do_global_dtors_aux+1E↓p
.plt.got:00000000000017C0 ; __unwind {
.plt.got:00000000000017C0                 jmp     cs:__cxa_finalize_ptr
.plt.got:00000000000017C0 __cxa_finalize  endp
.plt.got:00000000000017C0
.plt.got:00000000000017C0 ; ---------------------------------------------------------------------------
.plt.got:00000000000017C6                 align 8
.plt.got:00000000000017C6 ; } // starts at 17C0
.plt.got:00000000000017C6 _plt_got        ends
.plt.got:00000000000017C6
LOAD:00000000000017C8 ; ===========================================================================
LOAD:00000000000017C8
LOAD:00000000000017C8 ; Segment type: Pure code
LOAD:00000000000017C8 ; Segment permissions: Read/Execute
LOAD:00000000000017C8 LOAD            segment byte public 'CODE' use64
LOAD:00000000000017C8                 assume cs:LOAD
LOAD:00000000000017C8                 ;org 17C8h
LOAD:00000000000017C8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000017C8                 align 10h
LOAD:00000000000017C8 LOAD            ends
LOAD:00000000000017C8
.text:00000000000017D0 ; ===========================================================================
.text:00000000000017D0
.text:00000000000017D0 ; Segment type: Pure code
.text:00000000000017D0 ; Segment permissions: Read/Execute
.text:00000000000017D0 _text           segment para public 'CODE' use64
.text:00000000000017D0                 assume cs:_text
.text:00000000000017D0                 ;org 17D0h
.text:00000000000017D0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00000000000017D0
.text:00000000000017D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000017D0
.text:00000000000017D0
.text:00000000000017D0 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:00000000000017D0                 public main
.text:00000000000017D0 main            proc near               ; DATA XREF: start+1D↓o
.text:00000000000017D0
.text:00000000000017D0 var_8C          = dword ptr -8Ch
.text:00000000000017D0 endptr          = qword ptr -80h
.text:00000000000017D0 var_78          = byte ptr -78h
.text:00000000000017D0 s               = byte ptr -58h
.text:00000000000017D0 var_40          = qword ptr -40h
.text:00000000000017D0
.text:00000000000017D0 ; __unwind {
.text:00000000000017D0                 push    r15
.text:00000000000017D2                 push    r14
.text:00000000000017D4                 xor     r15d, r15d
.text:00000000000017D7                 push    r13
.text:00000000000017D9                 push    r12
.text:00000000000017DB                 mov     r12d, edi
.text:00000000000017DE                 push    rbp
.text:00000000000017DF                 push    rbx
.text:00000000000017E0                 mov     rbx, rsi
.text:00000000000017E3                 mov     ebp, 0FFFFFFFFh
.text:00000000000017E8                 xor     r13d, r13d
.text:00000000000017EB                 sub     rsp, 68h
.text:00000000000017EF                 mov     rdi, [rsi]
.text:00000000000017F2                 mov     rax, fs:28h
.text:00000000000017FB                 mov     [rsp+98h+var_40], rax
.text:0000000000001800                 xor     eax, eax
.text:0000000000001802                 lea     r14, [rsp+98h+var_78]
.text:0000000000001807                 call    set_program_name
.text:000000000000180C                 lea     rsi, aWrittenBySSAnd+1Bh ; locale
.text:0000000000001813                 mov     edi, 6          ; category
.text:0000000000001818                 call    _setlocale
.text:000000000000181D                 lea     rsi, dirname    ; "/usr/local/share/locale"
.text:0000000000001824                 lea     rdi, domainname ; "coreutils"
.text:000000000000182B                 call    _bindtextdomain
.text:0000000000001830                 lea     rdi, domainname ; "coreutils"
.text:0000000000001837                 call    _textdomain
.text:000000000000183C                 lea     rdi, close_stdout
.text:0000000000001843                 call    atexit
.text:0000000000001848                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000001850
.text:0000000000001850 loc_1850:                               ; CODE XREF: main+F5↓j
.text:0000000000001850                                         ; main+174↓j
.text:0000000000001850                 lea     rcx, long_options ; longopts
.text:0000000000001857                 lea     rdx, short_options ; "0::1::2::3::4::5::6::7::8::9::A::B::C::"...
.text:000000000000185E                 xor     r8d, r8d        ; longind
.text:0000000000001861                 mov     rsi, rbx        ; argv
.text:0000000000001864                 mov     edi, r12d       ; argc
.text:0000000000001867                 call    _getopt_long
.text:000000000000186C                 cmp     eax, 0FFFFFFFFh
.text:000000000000186F                 mov     r8d, eax
.text:0000000000001872                 jz      loc_19D0
.text:0000000000001878                 cmp     r8d, 4Ch ; 'L'
.text:000000000000187C                 jz      short loc_18B0
.text:000000000000187E                 jle     short loc_18D0
.text:0000000000001880                 cmp     r8d, 6Ch ; 'l'
.text:0000000000001884                 jz      short loc_18B6
.text:0000000000001886                 jle     loc_19A9
.text:000000000000188C                 cmp     r8d, 73h ; 's'
.text:0000000000001890                 jz      loc_1928
.text:0000000000001896                 cmp     r8d, 74h ; 't'
.text:000000000000189A                 jz      short loc_18B0
.text:000000000000189C                 cmp     r8d, 6Eh ; 'n'
.text:00000000000018A0                 jz      loc_1928
.text:00000000000018A6
.text:00000000000018A6 loc_18A6:                               ; CODE XREF: main+17A↓j
.text:00000000000018A6                                         ; main+1DD↓j ...
.text:00000000000018A6                 mov     edi, 1          ; status
.text:00000000000018AB                 call    usage
.text:00000000000018B0 ; ---------------------------------------------------------------------------
.text:00000000000018B0
.text:00000000000018B0 loc_18B0:                               ; CODE XREF: main+AC↑j
.text:00000000000018B0                                         ; main+CA↑j
.text:00000000000018B0                 mov     r15d, 1
.text:00000000000018B6
.text:00000000000018B6 loc_18B6:                               ; CODE XREF: main+B4↑j
.text:00000000000018B6                 test    r13b, r13b
.text:00000000000018B9                 jnz     loc_1D40
.text:00000000000018BF                 mov     r13d, 1
.text:00000000000018C5                 jmp     short loc_1850
.text:00000000000018C5 ; ---------------------------------------------------------------------------
.text:00000000000018C7                 align 10h
.text:00000000000018D0
.text:00000000000018D0 loc_18D0:                               ; CODE XREF: main+AE↑j
.text:00000000000018D0                 cmp     r8d, 39h ; '9'
.text:00000000000018D4                 jg      loc_19BC
.text:00000000000018DA                 cmp     r8d, 30h ; '0'
.text:00000000000018DE                 jge     short loc_1950
.text:00000000000018E0                 cmp     r8d, 0FFFFFF7Dh
.text:00000000000018E7                 jnz     loc_1CF1
.text:00000000000018ED                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:00000000000018F4                 mov     rcx, cs:Version
.text:00000000000018FB                 lea     r8, aPaulEggert ; "Paul Eggert"
.text:0000000000001902                 lea     rdx, unk_519F
.text:0000000000001909                 lea     rsi, aKill_0    ; "kill"
.text:0000000000001910                 xor     r9d, r9d
.text:0000000000001913                 xor     eax, eax
.text:0000000000001915                 call    version_etc
.text:000000000000191A                 xor     edi, edi        ; status
.text:000000000000191C                 call    _exit
.text:000000000000191C ; ---------------------------------------------------------------------------
.text:0000000000001921                 align 8
.text:0000000000001928
.text:0000000000001928 loc_1928:                               ; CODE XREF: main+C0↑j
.text:0000000000001928                                         ; main+D0↑j
.text:0000000000001928                 mov     rdi, cs:optarg@@GLIBC_2_2_5 ; nptr
.text:000000000000192F
.text:000000000000192F loc_192F:                               ; CODE XREF: main+1B8↓j
.text:000000000000192F                 cmp     ebp, 0FFFFFFFFh
.text:0000000000001932                 jnz     loc_1D05
.text:0000000000001938                 mov     rsi, r14
.text:000000000000193B                 call    operand2sig
.text:0000000000001940                 test    eax, eax
.text:0000000000001942                 mov     ebp, eax
.text:0000000000001944                 jns     loc_1850
.text:000000000000194A                 jmp     loc_18A6
.text:000000000000194A ; ---------------------------------------------------------------------------
.text:000000000000194F                 align 10h
.text:0000000000001950
.text:0000000000001950 loc_1950:                               ; CODE XREF: main+10E↑j
.text:0000000000001950                 movsxd  rax, cs:optind@@GLIBC_2_2_5
.text:0000000000001957                 cmp     eax, 2
.text:000000000000195A                 jnz     short loc_19C7
.text:000000000000195C
.text:000000000000195C loc_195C:                               ; CODE XREF: main+1EA↓j
.text:000000000000195C                 mov     rcx, cs:optarg@@GLIBC_2_2_5
.text:0000000000001963                 lea     rsi, [rbx+rax*8-8]
.text:0000000000001968                 mov     rdx, [rsi]
.text:000000000000196B                 test    rcx, rcx
.text:000000000000196E                 jz      short loc_198A
.text:0000000000001970
.text:0000000000001970 loc_1970:                               ; CODE XREF: main+1D7↓j
.text:0000000000001970                 lea     rax, [rdx+2]
.text:0000000000001974                 cmp     rcx, rax
.text:0000000000001977                 jnz     loc_1D66
.text:000000000000197D                 lea     rdi, [rdx+1]
.text:0000000000001981                 mov     cs:optarg@@GLIBC_2_2_5, rdi
.text:0000000000001988                 jmp     short loc_192F
.text:000000000000198A ; ---------------------------------------------------------------------------
.text:000000000000198A
.text:000000000000198A loc_198A:                               ; CODE XREF: main+19E↑j
.text:000000000000198A                 mov     rdi, rdx
.text:000000000000198D                 or      rcx, 0FFFFFFFFFFFFFFFFh
.text:0000000000001991                 xor     eax, eax
.text:0000000000001993                 repne scasb
.text:0000000000001995                 not     rcx
.text:0000000000001998                 lea     rcx, [rdx+rcx-1]
.text:000000000000199D                 mov     cs:optarg@@GLIBC_2_2_5, rcx
.text:00000000000019A4                 mov     rdx, [rsi]
.text:00000000000019A7                 jmp     short loc_1970
.text:00000000000019A9 ; ---------------------------------------------------------------------------
.text:00000000000019A9
.text:00000000000019A9 loc_19A9:                               ; CODE XREF: main+B6↑j
.text:00000000000019A9                 cmp     r8d, 5Ah ; 'Z'
.text:00000000000019AD                 jg      loc_18A6
.text:00000000000019B3
.text:00000000000019B3 loc_19B3:                               ; CODE XREF: main+1F0↓j
.text:00000000000019B3                 movsxd  rax, cs:optind@@GLIBC_2_2_5
.text:00000000000019BA                 jmp     short loc_195C
.text:00000000000019BC ; ---------------------------------------------------------------------------
.text:00000000000019BC
.text:00000000000019BC loc_19BC:                               ; CODE XREF: main+104↑j
.text:00000000000019BC                 cmp     r8d, 41h ; 'A'
.text:00000000000019C0                 jge     short loc_19B3
.text:00000000000019C2                 jmp     loc_18A6
.text:00000000000019C7 ; ---------------------------------------------------------------------------
.text:00000000000019C7
.text:00000000000019C7 loc_19C7:                               ; CODE XREF: main+18A↑j
.text:00000000000019C7                 sub     eax, 1
.text:00000000000019CA                 mov     cs:optind@@GLIBC_2_2_5, eax
.text:00000000000019D0
.text:00000000000019D0 loc_19D0:                               ; CODE XREF: main+A2↑j
.text:00000000000019D0                 cmp     ebp, 0FFFFFFFFh
.text:00000000000019D3                 movsxd  rax, cs:optind@@GLIBC_2_2_5
.text:00000000000019DA                 jz      loc_1B02
.text:00000000000019E0                 test    r13b, r13b
.text:00000000000019E3                 mov     edx, 5
.text:00000000000019E8                 lea     rsi, aCannotCombineS ; "cannot combine signal with -l or -t"
.text:00000000000019EF                 jnz     loc_1D4C
.text:00000000000019F5
.text:00000000000019F5 loc_19F5:                               ; CODE XREF: main+5D3↓j
.text:00000000000019F5                 cmp     eax, r12d
.text:00000000000019F8                 mov     edx, 5
.text:00000000000019FD                 lea     rsi, aNoProcessIdSpe ; "no process ID specified"
.text:0000000000001A04                 jge     loc_1D4C
.text:0000000000001A0A                 lea     r13, [rbx+rax*8]
.text:0000000000001A0E                 lea     r15, [rsp+98h+endptr]
.text:0000000000001A13                 xor     ebx, ebx
.text:0000000000001A15                 call    ___errno_location
.text:0000000000001A1A                 mov     r12, [r13+0]
.text:0000000000001A1E                 mov     r14, rax
.text:0000000000001A21                 jmp     short loc_1A77
.text:0000000000001A23 ; ---------------------------------------------------------------------------
.text:0000000000001A23
.text:0000000000001A23 loc_1A23:                               ; CODE XREF: main+2CE↓j
.text:0000000000001A23                 mov     rdx, [rsp+98h+endptr]
.text:0000000000001A28                 cmp     r12, rdx
.text:0000000000001A2B                 jz      short loc_1A36
.text:0000000000001A2D                 cmp     byte ptr [rdx], 0
.text:0000000000001A30                 jz      loc_1ACD
.text:0000000000001A36
.text:0000000000001A36 loc_1A36:                               ; CODE XREF: main+25B↑j
.text:0000000000001A36                                         ; main+2C4↓j ...
.text:0000000000001A36                 mov     rdi, r12
.text:0000000000001A39                 call    quote
.text:0000000000001A3E                 lea     rsi, msgid      ; "%s: invalid process id"
.text:0000000000001A45                 mov     rbx, rax
.text:0000000000001A48                 mov     edx, 5          ; category
.text:0000000000001A4D                 xor     edi, edi        ; domainname
.text:0000000000001A4F                 call    _dcgettext
.text:0000000000001A54                 mov     rcx, rbx
.text:0000000000001A57                 mov     rdx, rax        ; format
.text:0000000000001A5A                 xor     esi, esi        ; errnum
.text:0000000000001A5C                 xor     edi, edi        ; status
.text:0000000000001A5E                 xor     eax, eax
.text:0000000000001A60                 mov     ebx, 1
.text:0000000000001A65                 call    _error
.text:0000000000001A6A
.text:0000000000001A6A loc_1A6A:                               ; CODE XREF: main+308↓j
.text:0000000000001A6A                                         ; main+32D↓j
.text:0000000000001A6A                 add     r13, 8
.text:0000000000001A6E                 mov     r12, [r13+0]
.text:0000000000001A72                 test    r12, r12
.text:0000000000001A75                 jz      short loc_1AA8
.text:0000000000001A77
.text:0000000000001A77 loc_1A77:                               ; CODE XREF: main+251↑j
.text:0000000000001A77                 xor     ecx, ecx        ; group
.text:0000000000001A79                 mov     dword ptr [r14], 0
.text:0000000000001A80                 mov     edx, 0Ah        ; base
.text:0000000000001A85                 mov     rsi, r15        ; endptr
.text:0000000000001A88                 mov     rdi, r12        ; nptr
.text:0000000000001A8B                 call    ___strtol_internal
.text:0000000000001A90                 cmp     dword ptr [r14], 22h ; '"'
.text:0000000000001A94                 jz      short loc_1A36
.text:0000000000001A96                 movsxd  rdx, eax
.text:0000000000001A99                 cmp     rax, rdx
.text:0000000000001A9C                 jnz     short loc_1A36
.text:0000000000001A9E                 jmp     short loc_1A23
.text:0000000000001AA0 ; ---------------------------------------------------------------------------
.text:0000000000001AA0
.text:0000000000001AA0 loc_1AA0:                               ; CODE XREF: main+49E↓j
.text:0000000000001AA0                                         ; main+4D6↓j
.text:0000000000001AA0                 xor     ebx, ebx
.text:0000000000001AA2                 nop     word ptr [rax+rax+00h]
.text:0000000000001AA8
.text:0000000000001AA8 loc_1AA8:                               ; CODE XREF: main+2A5↑j
.text:0000000000001AA8                                         ; main+3DE↓j ...
.text:0000000000001AA8                 mov     rsi, [rsp+98h+var_40]
.text:0000000000001AAD                 xor     rsi, fs:28h
.text:0000000000001AB6                 mov     eax, ebx
.text:0000000000001AB8                 jnz     loc_1D3B
.text:0000000000001ABE                 add     rsp, 68h
.text:0000000000001AC2                 pop     rbx
.text:0000000000001AC3                 pop     rbp
.text:0000000000001AC4                 pop     r12
.text:0000000000001AC6                 pop     r13
.text:0000000000001AC8                 pop     r14
.text:0000000000001ACA                 pop     r15
.text:0000000000001ACC                 retn
.text:0000000000001ACD ; ---------------------------------------------------------------------------
.text:0000000000001ACD
.text:0000000000001ACD loc_1ACD:                               ; CODE XREF: main+260↑j
.text:0000000000001ACD                 mov     esi, ebp        ; sig
.text:0000000000001ACF                 mov     edi, eax        ; pid
.text:0000000000001AD1                 call    _kill
.text:0000000000001AD6                 test    eax, eax
.text:0000000000001AD8                 jz      short loc_1A6A
.text:0000000000001ADA                 mov     rdi, r12
.text:0000000000001ADD                 mov     ebx, 1
.text:0000000000001AE2                 call    quote
.text:0000000000001AE7                 mov     esi, [r14]      ; errnum
.text:0000000000001AEA                 lea     rdx, format+4   ; format
.text:0000000000001AF1                 mov     rcx, rax
.text:0000000000001AF4                 xor     edi, edi        ; status
.text:0000000000001AF6                 xor     eax, eax
.text:0000000000001AF8                 call    _error
.text:0000000000001AFD                 jmp     loc_1A6A
.text:0000000000001B02 ; ---------------------------------------------------------------------------
.text:0000000000001B02
.text:0000000000001B02 loc_1B02:                               ; CODE XREF: main+20A↑j
.text:0000000000001B02                 test    r13b, r13b
.text:0000000000001B05                 jz      loc_1D9E
.text:0000000000001B0B                 xor     ebp, ebp
.text:0000000000001B0D                 cmp     r12d, eax
.text:0000000000001B10                 jle     short loc_1B16
.text:0000000000001B12                 lea     rbp, [rbx+rax*8]
.text:0000000000001B16
.text:0000000000001B16 loc_1B16:                               ; CODE XREF: main+340↑j
.text:0000000000001B16                 test    r15b, r15b
.text:0000000000001B19                 jz      loc_1BFB
.text:0000000000001B1F                 lea     r12, [rsp+98h+s]
.text:0000000000001B24                 xor     r13d, r13d
.text:0000000000001B27                 mov     ebx, 1
.text:0000000000001B2C                 nop     dword ptr [rax+00h]
.text:0000000000001B30
.text:0000000000001B30 loc_1B30:                               ; CODE XREF: main+3B9↓j
.text:0000000000001B30                 mov     rsi, r12
.text:0000000000001B33                 mov     edi, ebx
.text:0000000000001B35                 call    sig2str
.text:0000000000001B3A                 test    eax, eax
.text:0000000000001B3C                 jnz     short loc_1B83
.text:0000000000001B3E                 mov     rdx, r12
.text:0000000000001B41
.text:0000000000001B41 loc_1B41:                               ; CODE XREF: main+386↓j
.text:0000000000001B41                 mov     ecx, [rdx]
.text:0000000000001B43                 add     rdx, 4
.text:0000000000001B47                 lea     eax, [rcx-1010101h]
.text:0000000000001B4D                 not     ecx
.text:0000000000001B4F                 and     eax, ecx
.text:0000000000001B51                 and     eax, 80808080h
.text:0000000000001B56                 jz      short loc_1B41
.text:0000000000001B58                 mov     ecx, eax
.text:0000000000001B5A                 shr     ecx, 10h
.text:0000000000001B5D                 test    eax, 8080h
.text:0000000000001B62                 cmovz   eax, ecx
.text:0000000000001B65                 lea     rcx, [rdx+2]
.text:0000000000001B69                 mov     esi, eax
.text:0000000000001B6B                 cmovz   rdx, rcx
.text:0000000000001B6F                 add     sil, al
.text:0000000000001B72                 mov     eax, r13d
.text:0000000000001B75                 sbb     rdx, 3
.text:0000000000001B79                 sub     rdx, r12
.text:0000000000001B7C                 cmp     rdx, rax
.text:0000000000001B7F                 cmova   r13d, edx
.text:0000000000001B83
.text:0000000000001B83 loc_1B83:                               ; CODE XREF: main+36C↑j
.text:0000000000001B83                 add     ebx, 1
.text:0000000000001B86                 cmp     ebx, 41h ; 'A'
.text:0000000000001B89                 jnz     short loc_1B30
.text:0000000000001B8B                 xor     ebx, ebx
.text:0000000000001B8D                 test    rbp, rbp
.text:0000000000001B90                 lea     r14, asc_51CC   ; "?"
.text:0000000000001B97                 jnz     short loc_1BA7
.text:0000000000001B99                 jmp     loc_1C8C
.text:0000000000001B9E ; ---------------------------------------------------------------------------
.text:0000000000001B9E
.text:0000000000001B9E loc_1B9E:                               ; CODE XREF: main+3F1↓j
.text:0000000000001B9E                 mov     ebx, 1
.text:0000000000001BA3
.text:0000000000001BA3 loc_1BA3:                               ; CODE XREF: main+429↓j
.text:0000000000001BA3                 add     rbp, 8
.text:0000000000001BA7
.text:0000000000001BA7 loc_1BA7:                               ; CODE XREF: main+3C7↑j
.text:0000000000001BA7                 mov     rdi, [rbp+0]    ; nptr
.text:0000000000001BAB                 test    rdi, rdi
.text:0000000000001BAE                 jz      loc_1AA8
.text:0000000000001BB4                 mov     rsi, r12
.text:0000000000001BB7                 call    operand2sig
.text:0000000000001BBC                 test    eax, eax
.text:0000000000001BBE                 mov     r15d, eax
.text:0000000000001BC1                 js      short loc_1B9E
.text:0000000000001BC3                 mov     edi, eax        ; sig
.text:0000000000001BC5                 call    _strsignal
.text:0000000000001BCA                 test    rax, rax
.text:0000000000001BCD                 lea     rsi, aDSS       ; "%*d %-*s %s\n"
.text:0000000000001BD4                 mov     ecx, r15d
.text:0000000000001BD7                 cmovz   rax, r14
.text:0000000000001BDB                 sub     rsp, 8
.text:0000000000001BDF                 mov     r9, r12
.text:0000000000001BE2                 push    rax
.text:0000000000001BE3                 mov     r8d, r13d
.text:0000000000001BE6                 mov     edx, 2
.text:0000000000001BEB                 mov     edi, 1
.text:0000000000001BF0                 xor     eax, eax
.text:0000000000001BF2                 call    ___printf_chk
.text:0000000000001BF7                 pop     rcx
.text:0000000000001BF8                 pop     rsi
.text:0000000000001BF9                 jmp     short loc_1BA3
.text:0000000000001BFB ; ---------------------------------------------------------------------------
.text:0000000000001BFB
.text:0000000000001BFB loc_1BFB:                               ; CODE XREF: main+349↑j
.text:0000000000001BFB                 xor     ebx, ebx
.text:0000000000001BFD                 test    rbp, rbp
.text:0000000000001C00                 lea     r12, [rsp+98h+s]
.text:0000000000001C05                 jnz     short loc_1C24
.text:0000000000001C07                 jmp     short loc_1C5B
.text:0000000000001C09 ; ---------------------------------------------------------------------------
.text:0000000000001C09
.text:0000000000001C09 loc_1C09:                               ; CODE XREF: main+46B↓j
.text:0000000000001C09                 mov     rdx, [rbp+0]
.text:0000000000001C0D                 movsx   ecx, byte ptr [rdx]
.text:0000000000001C10                 sub     ecx, 30h ; '0'
.text:0000000000001C13                 cmp     ecx, 9
.text:0000000000001C16                 ja      short loc_1C44
.text:0000000000001C18                 mov     rdi, r12        ; s
.text:0000000000001C1B                 call    _puts
.text:0000000000001C20
.text:0000000000001C20 loc_1C20:                               ; CODE XREF: main+472↓j
.text:0000000000001C20                                         ; main+489↓j
.text:0000000000001C20                 add     rbp, 8
.text:0000000000001C24
.text:0000000000001C24 loc_1C24:                               ; CODE XREF: main+435↑j
.text:0000000000001C24                 mov     rdi, [rbp+0]    ; nptr
.text:0000000000001C28                 test    rdi, rdi
.text:0000000000001C2B                 jz      loc_1AA8
.text:0000000000001C31                 mov     rsi, r12
.text:0000000000001C34                 call    operand2sig
.text:0000000000001C39                 test    eax, eax
.text:0000000000001C3B                 jns     short loc_1C09
.text:0000000000001C3D                 mov     ebx, 1
.text:0000000000001C42                 jmp     short loc_1C20
.text:0000000000001C44 ; ---------------------------------------------------------------------------
.text:0000000000001C44
.text:0000000000001C44 loc_1C44:                               ; CODE XREF: main+446↑j
.text:0000000000001C44                 lea     rsi, aD         ; "%d\n"
.text:0000000000001C4B                 mov     edx, eax
.text:0000000000001C4D                 mov     edi, 1
.text:0000000000001C52                 xor     eax, eax
.text:0000000000001C54                 call    ___printf_chk
.text:0000000000001C59                 jmp     short loc_1C20
.text:0000000000001C5B ; ---------------------------------------------------------------------------
.text:0000000000001C5B
.text:0000000000001C5B loc_1C5B:                               ; CODE XREF: main+437↑j
.text:0000000000001C5B                 mov     ebx, 1
.text:0000000000001C60                 jmp     short loc_1C74
.text:0000000000001C60 ; ---------------------------------------------------------------------------
.text:0000000000001C62                 align 8
.text:0000000000001C68
.text:0000000000001C68 loc_1C68:                               ; CODE XREF: main+4B0↓j
.text:0000000000001C68                                         ; main+4BA↓j
.text:0000000000001C68                 add     ebx, 1
.text:0000000000001C6B                 cmp     ebx, 41h ; 'A'
.text:0000000000001C6E                 jz      loc_1AA0
.text:0000000000001C74
.text:0000000000001C74 loc_1C74:                               ; CODE XREF: main+490↑j
.text:0000000000001C74                 mov     rsi, r12
.text:0000000000001C77                 mov     edi, ebx
.text:0000000000001C79                 call    sig2str
.text:0000000000001C7E                 test    eax, eax
.text:0000000000001C80                 jnz     short loc_1C68
.text:0000000000001C82                 mov     rdi, r12        ; s
.text:0000000000001C85                 call    _puts
.text:0000000000001C8A                 jmp     short loc_1C68
.text:0000000000001C8C ; ---------------------------------------------------------------------------
.text:0000000000001C8C
.text:0000000000001C8C loc_1C8C:                               ; CODE XREF: main+3C9↑j
.text:0000000000001C8C                 mov     ebx, 1
.text:0000000000001C91                 mov     rbp, r14
.text:0000000000001C94                 jmp     short loc_1CAC
.text:0000000000001C94 ; ---------------------------------------------------------------------------
.text:0000000000001C96                 align 20h
.text:0000000000001CA0
.text:0000000000001CA0 loc_1CA0:                               ; CODE XREF: main+4E8↓j
.text:0000000000001CA0                                         ; main+51F↓j
.text:0000000000001CA0                 add     ebx, 1
.text:0000000000001CA3                 cmp     ebx, 41h ; 'A'
.text:0000000000001CA6                 jz      loc_1AA0
.text:0000000000001CAC
.text:0000000000001CAC loc_1CAC:                               ; CODE XREF: main+4C4↑j
.text:0000000000001CAC                 mov     rsi, r12
.text:0000000000001CAF                 mov     edi, ebx
.text:0000000000001CB1                 call    sig2str
.text:0000000000001CB6                 test    eax, eax
.text:0000000000001CB8                 jnz     short loc_1CA0
.text:0000000000001CBA                 mov     edi, ebx        ; sig
.text:0000000000001CBC                 call    _strsignal
.text:0000000000001CC1                 test    rax, rax
.text:0000000000001CC4                 lea     rsi, aDSS       ; "%*d %-*s %s\n"
.text:0000000000001CCB                 mov     edx, 2
.text:0000000000001CD0                 cmovz   rax, rbp
.text:0000000000001CD4                 sub     rsp, 8
.text:0000000000001CD8                 mov     r9, r12
.text:0000000000001CDB                 push    rax
.text:0000000000001CDC                 mov     r8d, r13d
.text:0000000000001CDF                 mov     ecx, ebx
.text:0000000000001CE1                 mov     edi, 1
.text:0000000000001CE6                 xor     eax, eax
.text:0000000000001CE8                 call    ___printf_chk
.text:0000000000001CED                 pop     rax
.text:0000000000001CEE                 pop     rdx
.text:0000000000001CEF                 jmp     short loc_1CA0
.text:0000000000001CF1 ; ---------------------------------------------------------------------------
.text:0000000000001CF1
.text:0000000000001CF1 loc_1CF1:                               ; CODE XREF: main+117↑j
.text:0000000000001CF1                 cmp     r8d, 0FFFFFF7Eh
.text:0000000000001CF8                 jnz     loc_18A6
.text:0000000000001CFE                 xor     edi, edi        ; status
.text:0000000000001D00                 call    usage
.text:0000000000001D05 ; ---------------------------------------------------------------------------
.text:0000000000001D05
.text:0000000000001D05 loc_1D05:                               ; CODE XREF: main+162↑j
.text:0000000000001D05                 call    quote
.text:0000000000001D0A                 lea     rsi, aSMultipleSigna ; "%s: multiple signals specified"
.text:0000000000001D11                 mov     rbx, rax
.text:0000000000001D14                 mov     edx, 5          ; category
.text:0000000000001D19                 xor     edi, edi        ; domainname
.text:0000000000001D1B                 call    _dcgettext
.text:0000000000001D20                 xor     edi, edi        ; status
.text:0000000000001D22                 mov     rdx, rax        ; format
.text:0000000000001D25                 mov     rcx, rbx
.text:0000000000001D28                 xor     esi, esi        ; errnum
.text:0000000000001D2A                 xor     eax, eax
.text:0000000000001D2C                 call    _error
.text:0000000000001D31                 mov     edi, 1          ; status
.text:0000000000001D36                 call    usage
.text:0000000000001D3B ; ---------------------------------------------------------------------------
.text:0000000000001D3B
.text:0000000000001D3B loc_1D3B:                               ; CODE XREF: main+2E8↑j
.text:0000000000001D3B                 call    ___stack_chk_fail
.text:0000000000001D40 ; ---------------------------------------------------------------------------
.text:0000000000001D40
.text:0000000000001D40 loc_1D40:                               ; CODE XREF: main+E9↑j
.text:0000000000001D40                 lea     rsi, aMultipleLOrTOp ; "multiple -l or -t options specified"
.text:0000000000001D47                 mov     edx, 5          ; category
.text:0000000000001D4C
.text:0000000000001D4C loc_1D4C:                               ; CODE XREF: main+21F↑j
.text:0000000000001D4C                                         ; main+234↑j
.text:0000000000001D4C                 xor     edi, edi        ; domainname
.text:0000000000001D4E                 call    _dcgettext
.text:0000000000001D53                 xor     esi, esi        ; errnum
.text:0000000000001D55                 mov     rdx, rax        ; format
.text:0000000000001D58                 xor     edi, edi        ; status
.text:0000000000001D5A                 xor     eax, eax
.text:0000000000001D5C                 call    _error
.text:0000000000001D61                 jmp     loc_18A6
.text:0000000000001D66 ; ---------------------------------------------------------------------------
.text:0000000000001D66
.text:0000000000001D66 loc_1D66:                               ; CODE XREF: main+1A7↑j
.text:0000000000001D66                 lea     rsi, aInvalidOptionC ; "invalid option -- %c"
.text:0000000000001D6D                 mov     edx, 5          ; category
.text:0000000000001D72                 xor     edi, edi        ; domainname
.text:0000000000001D74                 mov     [rsp+98h+var_8C], r8d
.text:0000000000001D79                 call    _dcgettext
.text:0000000000001D7E                 mov     r8d, [rsp+98h+var_8C]
.text:0000000000001D83                 mov     rdx, rax        ; format
.text:0000000000001D86                 xor     edi, edi        ; status
.text:0000000000001D88                 xor     esi, esi        ; errnum
.text:0000000000001D8A                 xor     eax, eax
.text:0000000000001D8C                 mov     ecx, r8d
.text:0000000000001D8F                 call    _error
.text:0000000000001D94                 mov     edi, 1          ; status
.text:0000000000001D99                 call    usage
.text:0000000000001D9E ; ---------------------------------------------------------------------------
.text:0000000000001D9E
.text:0000000000001D9E loc_1D9E:                               ; CODE XREF: main+335↑j
.text:0000000000001D9E                 mov     ebp, 0Fh
.text:0000000000001DA3                 jmp     loc_19F5
.text:0000000000001DA3 ; } // starts at 17D0
.text:0000000000001DA3 main            endp
.text:0000000000001DA3
.text:0000000000001DA3 ; ---------------------------------------------------------------------------
.text:0000000000001DA8                 align 10h
.text:0000000000001DB0
.text:0000000000001DB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001DB0
.text:0000000000001DB0 ; Attributes: noreturn fuzzy-sp info_from_lumina
.text:0000000000001DB0
.text:0000000000001DB0 ; void __fastcall __noreturn start(__int64, __int64, void (*)(void))
.text:0000000000001DB0                 public start
.text:0000000000001DB0 start           proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:0000000000001DB0 ; __unwind {
.text:0000000000001DB0                 xor     ebp, ebp
.text:0000000000001DB2                 mov     r9, rdx         ; rtld_fini
.text:0000000000001DB5                 pop     rsi             ; argc
.text:0000000000001DB6                 mov     rdx, rsp        ; ubp_av
.text:0000000000001DB9                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:0000000000001DBD                 push    rax
.text:0000000000001DBE                 push    rsp             ; stack_end
.text:0000000000001DBF                 lea     r8, __libc_csu_fini ; fini
.text:0000000000001DC6                 lea     rcx, __libc_csu_init ; init
.text:0000000000001DCD                 lea     rdi, main       ; main
.text:0000000000001DD4                 call    cs:__libc_start_main_ptr
.text:0000000000001DDA                 hlt
.text:0000000000001DDA ; } // starts at 1DB0
.text:0000000000001DDA start           endp
.text:0000000000001DDA
.text:0000000000001DDA ; ---------------------------------------------------------------------------
.text:0000000000001DDB                 align 20h
.text:0000000000001DE0
.text:0000000000001DE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001DE0
.text:0000000000001DE0 ; Attributes: bp-based frame info_from_lumina
.text:0000000000001DE0
.text:0000000000001DE0 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_1E93↓p
.text:0000000000001DE0                 lea     rdi, __TMC_END__
.text:0000000000001DE7                 push    rbp
.text:0000000000001DE8                 lea     rax, __TMC_END__
.text:0000000000001DEF                 cmp     rax, rdi
.text:0000000000001DF2                 mov     rbp, rsp
.text:0000000000001DF5                 jz      short loc_1E10
.text:0000000000001DF7                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:0000000000001DFE                 test    rax, rax
.text:0000000000001E01                 jz      short loc_1E10
.text:0000000000001E03                 pop     rbp
.text:0000000000001E04                 jmp     rax
.text:0000000000001E04 ; ---------------------------------------------------------------------------
.text:0000000000001E06                 align 10h
.text:0000000000001E10
.text:0000000000001E10 loc_1E10:                               ; CODE XREF: deregister_tm_clones+15↑j
.text:0000000000001E10                                         ; deregister_tm_clones+21↑j
.text:0000000000001E10                 pop     rbp
.text:0000000000001E11                 retn
.text:0000000000001E11 deregister_tm_clones endp
.text:0000000000001E11
.text:0000000000001E11 ; ---------------------------------------------------------------------------
.text:0000000000001E12                 align 20h
.text:0000000000001E20
.text:0000000000001E20 ; =============== S U B R O U T I N E =======================================
.text:0000000000001E20
.text:0000000000001E20 ; Attributes: bp-based frame info_from_lumina
.text:0000000000001E20
.text:0000000000001E20 register_tm_clones proc near            ; CODE XREF: frame_dummy+5↓j
.text:0000000000001E20                 lea     rdi, __TMC_END__
.text:0000000000001E27                 lea     rsi, __TMC_END__
.text:0000000000001E2E                 push    rbp
.text:0000000000001E2F                 sub     rsi, rdi
.text:0000000000001E32                 mov     rbp, rsp
.text:0000000000001E35                 sar     rsi, 3
.text:0000000000001E39                 mov     rax, rsi
.text:0000000000001E3C                 shr     rax, 3Fh
.text:0000000000001E40                 add     rsi, rax
.text:0000000000001E43                 sar     rsi, 1
.text:0000000000001E46                 jz      short loc_1E60
.text:0000000000001E48                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:0000000000001E4F                 test    rax, rax
.text:0000000000001E52                 jz      short loc_1E60
.text:0000000000001E54                 pop     rbp
.text:0000000000001E55                 jmp     rax
.text:0000000000001E55 ; ---------------------------------------------------------------------------
.text:0000000000001E57                 align 20h
.text:0000000000001E60
.text:0000000000001E60 loc_1E60:                               ; CODE XREF: register_tm_clones+26↑j
.text:0000000000001E60                                         ; register_tm_clones+32↑j
.text:0000000000001E60                 pop     rbp
.text:0000000000001E61                 retn
.text:0000000000001E61 register_tm_clones endp
.text:0000000000001E61
.text:0000000000001E61 ; ---------------------------------------------------------------------------
.text:0000000000001E62                 align 10h
.text:0000000000001E70
.text:0000000000001E70 ; =============== S U B R O U T I N E =======================================
.text:0000000000001E70
.text:0000000000001E70 ; Attributes: info_from_lumina
.text:0000000000001E70
.text:0000000000001E70 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:0000000000001E70                 cmp     cs:completed_7697, 0
.text:0000000000001E77                 jnz     short locret_1EA8
.text:0000000000001E79                 cmp     cs:__cxa_finalize_ptr, 0
.text:0000000000001E81                 push    rbp
.text:0000000000001E82                 mov     rbp, rsp
.text:0000000000001E85                 jz      short loc_1E93
.text:0000000000001E87                 mov     rdi, cs:__dso_handle ; void *
.text:0000000000001E8E                 call    __cxa_finalize
.text:0000000000001E93
.text:0000000000001E93 loc_1E93:                               ; CODE XREF: __do_global_dtors_aux+15↑j
.text:0000000000001E93                 call    deregister_tm_clones
.text:0000000000001E98                 mov     cs:completed_7697, 1
.text:0000000000001E9F                 pop     rbp
.text:0000000000001EA0                 retn
.text:0000000000001EA0 ; ---------------------------------------------------------------------------
.text:0000000000001EA1                 align 8
.text:0000000000001EA8
.text:0000000000001EA8 locret_1EA8:                            ; CODE XREF: __do_global_dtors_aux+7↑j
.text:0000000000001EA8                 rep retn
.text:0000000000001EA8 __do_global_dtors_aux endp
.text:0000000000001EA8
.text:0000000000001EA8 ; ---------------------------------------------------------------------------
.text:0000000000001EAA                 align 10h
.text:0000000000001EB0
.text:0000000000001EB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001EB0
.text:0000000000001EB0 ; Attributes: bp-based frame
.text:0000000000001EB0
.text:0000000000001EB0 frame_dummy     proc near               ; CODE XREF: __libc_csu_init+49↓p
.text:0000000000001EB0                                         ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:0000000000001EB0                 push    rbp
.text:0000000000001EB1                 mov     rbp, rsp
.text:0000000000001EB4                 pop     rbp
.text:0000000000001EB5                 jmp     register_tm_clones
.text:0000000000001EB5 frame_dummy     endp
.text:0000000000001EB5
.text:0000000000001EB5 ; ---------------------------------------------------------------------------
.text:0000000000001EBA                 align 20h
.text:0000000000001EC0
.text:0000000000001EC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001EC0
.text:0000000000001EC0 ; Attributes: noreturn
.text:0000000000001EC0
.text:0000000000001EC0 ; void __fastcall __noreturn usage(int status)
.text:0000000000001EC0                 public usage
.text:0000000000001EC0 usage           proc near               ; CODE XREF: main+DB↑p
.text:0000000000001EC0                                         ; main+530↑p ...
.text:0000000000001EC0
.text:0000000000001EC0 var_A8          = qword ptr -0A8h
.text:0000000000001EC0 var_A0          = qword ptr -0A0h
.text:0000000000001EC0 var_98          = qword ptr -98h
.text:0000000000001EC0 var_90          = qword ptr -90h
.text:0000000000001EC0 var_88          = qword ptr -88h
.text:0000000000001EC0 var_80          = qword ptr -80h
.text:0000000000001EC0 var_78          = qword ptr -78h
.text:0000000000001EC0 var_70          = qword ptr -70h
.text:0000000000001EC0 var_68          = qword ptr -68h
.text:0000000000001EC0 var_60          = qword ptr -60h
.text:0000000000001EC0 var_58          = qword ptr -58h
.text:0000000000001EC0 var_50          = qword ptr -50h
.text:0000000000001EC0 var_48          = qword ptr -48h
.text:0000000000001EC0 var_40          = qword ptr -40h
.text:0000000000001EC0 var_30          = qword ptr -30h
.text:0000000000001EC0
.text:0000000000001EC0 ; __unwind {
.text:0000000000001EC0                 push    r13
.text:0000000000001EC2                 push    r12
.text:0000000000001EC4                 mov     edx, 5          ; category
.text:0000000000001EC9                 push    rbp
.text:0000000000001ECA                 push    rbx
.text:0000000000001ECB                 mov     ebp, edi
.text:0000000000001ECD                 sub     rsp, 88h
.text:0000000000001ED4                 mov     rbx, cs:program_name
.text:0000000000001EDB                 mov     rax, fs:28h
.text:0000000000001EE4                 mov     [rsp+0A8h+var_30], rax
.text:0000000000001EE9                 xor     eax, eax
.text:0000000000001EEB                 test    edi, edi
.text:0000000000001EED                 jz      short loc_1F1D
.text:0000000000001EEF                 lea     rsi, aTrySHelpForMor ; "Try '%s --help' for more information.\n"
.text:0000000000001EF6                 xor     edi, edi        ; domainname
.text:0000000000001EF8                 call    _dcgettext
.text:0000000000001EFD                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000001F04                 mov     rdx, rax
.text:0000000000001F07                 mov     rcx, rbx
.text:0000000000001F0A                 mov     esi, 1
.text:0000000000001F0F                 xor     eax, eax
.text:0000000000001F11                 call    ___fprintf_chk
.text:0000000000001F16
.text:0000000000001F16 loc_1F16:                               ; CODE XREF: usage+316↓j
.text:0000000000001F16                 mov     edi, ebp        ; status
.text:0000000000001F18                 call    _exit
.text:0000000000001F1D ; ---------------------------------------------------------------------------
.text:0000000000001F1D
.text:0000000000001F1D loc_1F1D:                               ; CODE XREF: usage+2D↑j
.text:0000000000001F1D                 lea     rsi, aUsageSSSignalS ; "Usage: %s [-s SIGNAL | -SIGNAL] PID..."...
.text:0000000000001F24                 xor     edi, edi        ; domainname
.text:0000000000001F26                 call    _dcgettext
.text:0000000000001F2B                 mov     rcx, rbx
.text:0000000000001F2E                 mov     r8, rbx
.text:0000000000001F31                 mov     rdx, rbx
.text:0000000000001F34                 mov     rsi, rax
.text:0000000000001F37                 mov     edi, 1
.text:0000000000001F3C                 xor     eax, eax
.text:0000000000001F3E                 call    ___printf_chk
.text:0000000000001F43                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001F4A                 lea     rsi, aSendSignalsToP ; "Send signals to processes, or list sign"...
.text:0000000000001F51                 mov     edx, 5          ; category
.text:0000000000001F56                 xor     edi, edi        ; domainname
.text:0000000000001F58                 call    _dcgettext
.text:0000000000001F5D                 mov     rsi, rbx        ; stream
.text:0000000000001F60                 mov     rdi, rax        ; s
.text:0000000000001F63                 call    _fputs_unlocked
.text:0000000000001F68                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001F6F                 lea     rsi, aMandatoryArgum ; "\nMandatory arguments to long options a"...
.text:0000000000001F76                 mov     edx, 5          ; category
.text:0000000000001F7B                 xor     edi, edi        ; domainname
.text:0000000000001F7D                 call    _dcgettext
.text:0000000000001F82                 mov     rsi, rbx        ; stream
.text:0000000000001F85                 mov     rdi, rax        ; s
.text:0000000000001F88                 call    _fputs_unlocked
.text:0000000000001F8D                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001F94                 lea     rsi, aSSignalSignalS ; "  -s, --signal=SIGNAL, -SIGNAL\n       "...
.text:0000000000001F9B                 mov     edx, 5          ; category
.text:0000000000001FA0                 xor     edi, edi        ; domainname
.text:0000000000001FA2                 call    _dcgettext
.text:0000000000001FA7                 mov     rsi, rbx        ; stream
.text:0000000000001FAA                 mov     rdi, rax        ; s
.text:0000000000001FAD                 call    _fputs_unlocked
.text:0000000000001FB2                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001FB9                 lea     rsi, aHelpDisplayThi ; "      --help     display this help and "...
.text:0000000000001FC0                 mov     edx, 5          ; category
.text:0000000000001FC5                 xor     edi, edi        ; domainname
.text:0000000000001FC7                 call    _dcgettext
.text:0000000000001FCC                 mov     rsi, rbx        ; stream
.text:0000000000001FCF                 mov     rdi, rax        ; s
.text:0000000000001FD2                 call    _fputs_unlocked
.text:0000000000001FD7                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001FDE                 lea     rsi, aVersionOutputV ; "      --version  output version informa"...
.text:0000000000001FE5                 mov     edx, 5          ; category
.text:0000000000001FEA                 xor     edi, edi        ; domainname
.text:0000000000001FEC                 call    _dcgettext
.text:0000000000001FF1                 mov     rsi, rbx        ; stream
.text:0000000000001FF4                 mov     rdi, rax        ; s
.text:0000000000001FF7                 call    _fputs_unlocked
.text:0000000000001FFC                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002003                 lea     rsi, aSignalMayBeASi ; "\nSIGNAL may be a signal name like 'HUP"...
.text:000000000000200A                 mov     edx, 5          ; category
.text:000000000000200F                 xor     edi, edi        ; domainname
.text:0000000000002011                 call    _dcgettext
.text:0000000000002016                 mov     rsi, rbx        ; stream
.text:0000000000002019                 mov     rdi, rax        ; s
.text:000000000000201C                 lea     rbx, aKill_0    ; "kill"
.text:0000000000002023                 call    _fputs_unlocked
.text:0000000000002028                 lea     rsi, aNoteYourShellM ; "\nNOTE: your shell may have its own ver"...
.text:000000000000202F                 mov     edx, 5          ; category
.text:0000000000002034                 xor     edi, edi        ; domainname
.text:0000000000002036                 call    _dcgettext
.text:000000000000203B                 lea     rdx, aKill_0    ; "kill"
.text:0000000000002042                 mov     rsi, rax
.text:0000000000002045                 mov     edi, 1
.text:000000000000204A                 xor     eax, eax
.text:000000000000204C                 call    ___printf_chk
.text:0000000000002051                 lea     rax, asc_5129   ; "["
.text:0000000000002058                 lea     rcx, aSha256sum ; "sha256sum"
.text:000000000000205F                 mov     [rsp+0A8h+var_48], 0
.text:0000000000002068                 mov     [rsp+0A8h+var_40], 0
.text:0000000000002071                 mov     rdx, rsp
.text:0000000000002074                 mov     [rsp+0A8h+var_A8], rax
.text:0000000000002078                 lea     rax, aTestInvocation ; "test invocation"
.text:000000000000207F                 mov     [rsp+0A8h+var_78], rcx
.text:0000000000002084                 lea     rcx, aSha384sum ; "sha384sum"
.text:000000000000208B                 mov     [rsp+0A8h+var_A0], rax
.text:0000000000002090                 lea     rax, domainname ; "coreutils"
.text:0000000000002097                 mov     [rsp+0A8h+var_68], rcx
.text:000000000000209C                 lea     rcx, aSha512sum ; "sha512sum"
.text:00000000000020A3                 mov     [rsp+0A8h+var_98], rax
.text:00000000000020A8                 lea     rax, aMultiCallInvoc ; "Multi-call invocation"
.text:00000000000020AF                 mov     [rsp+0A8h+var_58], rcx
.text:00000000000020B4                 mov     [rsp+0A8h+var_90], rax
.text:00000000000020B9                 lea     rax, aSha224sum ; "sha224sum"
.text:00000000000020C0                 mov     [rsp+0A8h+var_88], rax
.text:00000000000020C5                 lea     rax, aSha2Utilities ; "sha2 utilities"
.text:00000000000020CC                 mov     [rsp+0A8h+var_80], rax
.text:00000000000020D1                 mov     [rsp+0A8h+var_70], rax
.text:00000000000020D6                 mov     [rsp+0A8h+var_60], rax
.text:00000000000020DB                 mov     [rsp+0A8h+var_50], rax
.text:00000000000020E0
.text:00000000000020E0 loc_20E0:                               ; CODE XREF: usage+23D↓j
.text:00000000000020E0                 add     rdx, 10h
.text:00000000000020E4                 mov     rdi, [rdx]
.text:00000000000020E7                 test    rdi, rdi
.text:00000000000020EA                 jz      short loc_20FF
.text:00000000000020EC                 mov     ecx, 5
.text:00000000000020F1                 mov     rsi, rbx
.text:00000000000020F4                 repe cmpsb
.text:00000000000020F6                 setnbe  al
.text:00000000000020F9                 sbb     al, 0
.text:00000000000020FB                 test    al, al
.text:00000000000020FD                 jnz     short loc_20E0
.text:00000000000020FF
.text:00000000000020FF loc_20FF:                               ; CODE XREF: usage+22A↑j
.text:00000000000020FF                 mov     r12, [rdx+8]
.text:0000000000002103                 xor     edi, edi        ; domainname
.text:0000000000002105                 mov     edx, 5          ; category
.text:000000000000210A                 lea     rsi, aSOnlineHelpS ; "\n%s online help: <%s>\n"
.text:0000000000002111                 test    r12, r12
.text:0000000000002114                 jz      loc_21DB
.text:000000000000211A                 call    _dcgettext
.text:000000000000211F                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000002126                 lea     rdx, unk_519F
.text:000000000000212D                 mov     rsi, rax
.text:0000000000002130                 mov     edi, 1
.text:0000000000002135                 xor     eax, eax
.text:0000000000002137                 call    ___printf_chk
.text:000000000000213C                 xor     esi, esi        ; locale
.text:000000000000213E                 mov     edi, 5          ; category
.text:0000000000002143                 call    _setlocale
.text:0000000000002148                 test    rax, rax
.text:000000000000214B                 jz      short loc_2169
.text:000000000000214D                 lea     rsi, s2         ; "en_"
.text:0000000000002154                 mov     edx, 3          ; n
.text:0000000000002159                 mov     rdi, rax        ; s1
.text:000000000000215C                 call    _strncmp
.text:0000000000002161                 test    eax, eax
.text:0000000000002163                 jnz     loc_2270
.text:0000000000002169
.text:0000000000002169 loc_2169:                               ; CODE XREF: usage+28B↑j
.text:0000000000002169                                         ; usage+3D5↓j
.text:0000000000002169                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000002170                 xor     edi, edi        ; domainname
.text:0000000000002172                 mov     edx, 5          ; category
.text:0000000000002177                 call    _dcgettext
.text:000000000000217C                 lea     rcx, aKill_0    ; "kill"
.text:0000000000002183                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:000000000000218A                 mov     rsi, rax
.text:000000000000218D                 mov     edi, 1
.text:0000000000002192                 xor     eax, eax
.text:0000000000002194                 call    ___printf_chk
.text:0000000000002199                 cmp     r12, rbx
.text:000000000000219C                 lea     rcx, aMultiCallInvoc+0Ah ; " invocation"
.text:00000000000021A3                 lea     rbx, aWrittenBySSAnd+1Bh ; ""
.text:00000000000021AA                 cmovz   rbx, rcx
.text:00000000000021AE
.text:00000000000021AE loc_21AE:                               ; CODE XREF: usage+3A4↓j
.text:00000000000021AE                 lea     rsi, aOrAvailableLoc ; "or available locally via: info '(coreut"...
.text:00000000000021B5                 xor     edi, edi        ; domainname
.text:00000000000021B7                 mov     edx, 5          ; category
.text:00000000000021BC                 call    _dcgettext
.text:00000000000021C1                 mov     rcx, rbx
.text:00000000000021C4                 mov     rsi, rax
.text:00000000000021C7                 mov     rdx, r12
.text:00000000000021CA                 mov     edi, 1
.text:00000000000021CF                 xor     eax, eax
.text:00000000000021D1                 call    ___printf_chk
.text:00000000000021D6                 jmp     loc_1F16
.text:00000000000021DB ; ---------------------------------------------------------------------------
.text:00000000000021DB
.text:00000000000021DB loc_21DB:                               ; CODE XREF: usage+254↑j
.text:00000000000021DB                 call    _dcgettext
.text:00000000000021E0                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000021E7                 lea     rdx, unk_519F
.text:00000000000021EE                 mov     rsi, rax
.text:00000000000021F1                 mov     edi, 1
.text:00000000000021F6                 xor     eax, eax
.text:00000000000021F8                 call    ___printf_chk
.text:00000000000021FD                 xor     esi, esi        ; locale
.text:00000000000021FF                 mov     edi, 5          ; category
.text:0000000000002204                 call    _setlocale
.text:0000000000002209                 test    rax, rax
.text:000000000000220C                 jz      short loc_2226
.text:000000000000220E                 lea     rsi, s2         ; "en_"
.text:0000000000002215                 mov     edx, 3          ; n
.text:000000000000221A                 mov     rdi, rax        ; s1
.text:000000000000221D                 call    _strncmp
.text:0000000000002222                 test    eax, eax
.text:0000000000002224                 jnz     short loc_2269
.text:0000000000002226
.text:0000000000002226 loc_2226:                               ; CODE XREF: usage+34C↑j
.text:0000000000002226                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:000000000000222D                 mov     edx, 5          ; category
.text:0000000000002232                 xor     edi, edi        ; domainname
.text:0000000000002234                 lea     r12, aKill_0    ; "kill"
.text:000000000000223B                 lea     rbx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000002242                 call    _dcgettext
.text:0000000000002247                 lea     rcx, aKill_0    ; "kill"
.text:000000000000224E                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000002255                 mov     rsi, rax
.text:0000000000002258                 mov     edi, 1
.text:000000000000225D                 xor     eax, eax
.text:000000000000225F                 call    ___printf_chk
.text:0000000000002264                 jmp     loc_21AE
.text:0000000000002269 ; ---------------------------------------------------------------------------
.text:0000000000002269
.text:0000000000002269 loc_2269:                               ; CODE XREF: usage+364↑j
.text:0000000000002269                 lea     r12, aKill_0    ; "kill"
.text:0000000000002270
.text:0000000000002270 loc_2270:                               ; CODE XREF: usage+2A3↑j
.text:0000000000002270                 mov     r13, cs:stdout@@GLIBC_2_2_5
.text:0000000000002277                 lea     rsi, aReportAnyTrans ; "Report any translation bugs to <https:/"...
.text:000000000000227E                 xor     edi, edi        ; domainname
.text:0000000000002280                 mov     edx, 5          ; category
.text:0000000000002285                 call    _dcgettext
.text:000000000000228A                 mov     rsi, r13        ; stream
.text:000000000000228D                 mov     rdi, rax        ; s
.text:0000000000002290                 call    _fputs_unlocked
.text:0000000000002295                 jmp     loc_2169
.text:0000000000002295 ; } // starts at 1EC0
.text:0000000000002295 usage           endp
.text:0000000000002295
.text:0000000000002295 ; ---------------------------------------------------------------------------
.text:000000000000229A                 align 20h
.text:00000000000022A0
.text:00000000000022A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000022A0
.text:00000000000022A0
.text:00000000000022A0 ; __int64 __fastcall operand2sig(char *nptr)
.text:00000000000022A0                 public operand2sig
.text:00000000000022A0 operand2sig     proc near               ; CODE XREF: main+16B↑p
.text:00000000000022A0                                         ; main+3E7↑p ...
.text:00000000000022A0
.text:00000000000022A0 var_4C          = dword ptr -4Ch
.text:00000000000022A0 endptr          = qword ptr -48h
.text:00000000000022A0 var_40          = qword ptr -40h
.text:00000000000022A0
.text:00000000000022A0 ; __unwind {
.text:00000000000022A0                 push    r15
.text:00000000000022A2                 push    r14
.text:00000000000022A4                 mov     r14, rsi
.text:00000000000022A7                 push    r13
.text:00000000000022A9                 push    r12
.text:00000000000022AB                 push    rbp
.text:00000000000022AC                 push    rbx
.text:00000000000022AD                 mov     rbp, rdi
.text:00000000000022B0                 sub     rsp, 28h
.text:00000000000022B4                 mov     rax, fs:28h
.text:00000000000022BD                 mov     [rsp+58h+var_40], rax
.text:00000000000022C2                 xor     eax, eax
.text:00000000000022C4                 movsx   eax, byte ptr [rdi]
.text:00000000000022C7                 sub     eax, 30h ; '0'
.text:00000000000022CA                 cmp     eax, 9
.text:00000000000022CD                 ja      loc_2360
.text:00000000000022D3                 call    ___errno_location
.text:00000000000022D8                 lea     rsi, [rsp+58h+endptr] ; endptr
.text:00000000000022DD                 mov     edx, 0Ah        ; base
.text:00000000000022E2                 mov     dword ptr [rax], 0
.text:00000000000022E8                 mov     rdi, rbp        ; nptr
.text:00000000000022EB                 mov     rbx, rax
.text:00000000000022EE                 call    _strtol
.text:00000000000022F3                 mov     rdx, [rsp+58h+endptr]
.text:00000000000022F8                 cmp     rdx, rbp
.text:00000000000022FB                 jz      short loc_2318
.text:00000000000022FD                 cmp     byte ptr [rdx], 0
.text:0000000000002300                 jnz     short loc_2318
.text:0000000000002302                 mov     edx, [rbx]
.text:0000000000002304                 test    edx, edx
.text:0000000000002306                 jnz     short loc_2318
.text:0000000000002308                 movsxd  rdx, eax
.text:000000000000230B                 cmp     rdx, rax
.text:000000000000230E                 jz      loc_2450
.text:0000000000002314                 nop     dword ptr [rax+00h]
.text:0000000000002318
.text:0000000000002318 loc_2318:                               ; CODE XREF: operand2sig+5B↑j
.text:0000000000002318                                         ; operand2sig+60↑j ...
.text:0000000000002318                 mov     [rsp+58h+var_4C], 0FFFFFFFFh
.text:0000000000002320
.text:0000000000002320 loc_2320:                               ; CODE XREF: operand2sig+124↓j
.text:0000000000002320                                         ; operand2sig+136↓j ...
.text:0000000000002320                 mov     rdi, rbp
.text:0000000000002323                 call    quote
.text:0000000000002328                 lea     rsi, aSInvalidSignal ; "%s: invalid signal"
.text:000000000000232F                 mov     rbx, rax
.text:0000000000002332                 mov     edx, 5          ; category
.text:0000000000002337                 xor     edi, edi        ; domainname
.text:0000000000002339                 call    _dcgettext
.text:000000000000233E                 mov     rcx, rbx
.text:0000000000002341                 mov     rdx, rax        ; format
.text:0000000000002344                 xor     esi, esi        ; errnum
.text:0000000000002346                 xor     eax, eax
.text:0000000000002348                 xor     edi, edi        ; src
.text:000000000000234A                 call    _error
.text:000000000000234F                 mov     eax, 0FFFFFFFFh
.text:0000000000002354                 jmp     loc_23E0
.text:0000000000002354 ; ---------------------------------------------------------------------------
.text:0000000000002359                 align 20h
.text:0000000000002360
.text:0000000000002360 loc_2360:                               ; CODE XREF: operand2sig+2D↑j
.text:0000000000002360                 call    xstrdup
.text:0000000000002365                 movzx   ebx, byte ptr [rax]
.text:0000000000002368                 mov     r13, rax
.text:000000000000236B                 test    bl, bl
.text:000000000000236D                 jz      short loc_23A2
.text:000000000000236F                 lea     r12, s          ; "abcdefghijklmnopqrstuvwxyz"
.text:0000000000002376                 mov     r15, rax
.text:0000000000002379                 nop     dword ptr [rax+00000000h]
.text:0000000000002380
.text:0000000000002380 loc_2380:                               ; CODE XREF: operand2sig+100↓j
.text:0000000000002380                 movsx   esi, bl         ; c
.text:0000000000002383                 mov     rdi, r12        ; s
.text:0000000000002386                 call    _strchr
.text:000000000000238B                 test    rax, rax
.text:000000000000238E                 jz      short loc_2396
.text:0000000000002390                 sub     ebx, 20h ; ' '
.text:0000000000002393                 mov     [r15], bl
.text:0000000000002396
.text:0000000000002396 loc_2396:                               ; CODE XREF: operand2sig+EE↑j
.text:0000000000002396                 add     r15, 1
.text:000000000000239A                 movzx   ebx, byte ptr [r15]
.text:000000000000239E                 test    bl, bl
.text:00000000000023A0                 jnz     short loc_2380
.text:00000000000023A2
.text:00000000000023A2 loc_23A2:                               ; CODE XREF: operand2sig+CD↑j
.text:00000000000023A2                 lea     rbx, [rsp+58h+var_4C]
.text:00000000000023A7                 mov     rdi, r13        ; s2
.text:00000000000023AA                 mov     rsi, rbx
.text:00000000000023AD                 call    str2sig
.text:00000000000023B2                 test    eax, eax
.text:00000000000023B4                 jnz     short loc_2408
.text:00000000000023B6
.text:00000000000023B6 loc_23B6:                               ; CODE XREF: operand2sig+1A6↓j
.text:00000000000023B6                 mov     ebx, [rsp+58h+var_4C]
.text:00000000000023BA                 mov     rdi, r13        ; ptr
.text:00000000000023BD                 call    _free
.text:00000000000023C2                 test    ebx, ebx
.text:00000000000023C4                 js      loc_2320
.text:00000000000023CA
.text:00000000000023CA loc_23CA:                               ; CODE XREF: operand2sig+1CE↓j
.text:00000000000023CA                 mov     rsi, r14
.text:00000000000023CD                 mov     edi, ebx
.text:00000000000023CF                 call    sig2str
.text:00000000000023D4                 test    eax, eax
.text:00000000000023D6                 jnz     loc_2320
.text:00000000000023DC                 mov     eax, [rsp+58h+var_4C]
.text:00000000000023E0
.text:00000000000023E0 loc_23E0:                               ; CODE XREF: operand2sig+B4↑j
.text:00000000000023E0                 mov     rcx, [rsp+58h+var_40]
.text:00000000000023E5                 xor     rcx, fs:28h
.text:00000000000023EE                 jnz     loc_247C
.text:00000000000023F4                 add     rsp, 28h
.text:00000000000023F8                 pop     rbx
.text:00000000000023F9                 pop     rbp
.text:00000000000023FA                 pop     r12
.text:00000000000023FC                 pop     r13
.text:00000000000023FE                 pop     r14
.text:0000000000002400                 pop     r15
.text:0000000000002402                 retn
.text:0000000000002402 ; ---------------------------------------------------------------------------
.text:0000000000002403                 align 8
.text:0000000000002408
.text:0000000000002408 loc_2408:                               ; CODE XREF: operand2sig+114↑j
.text:0000000000002408                 cmp     byte ptr [r13+0], 53h ; 'S'
.text:000000000000240D                 jz      short loc_2428
.text:000000000000240F
.text:000000000000240F loc_240F:                               ; CODE XREF: operand2sig+18D↓j
.text:000000000000240F                                         ; operand2sig+194↓j ...
.text:000000000000240F                 mov     rdi, r13        ; ptr
.text:0000000000002412                 mov     [rsp+58h+var_4C], 0FFFFFFFFh
.text:000000000000241A                 call    _free
.text:000000000000241F                 jmp     loc_2320
.text:000000000000241F ; ---------------------------------------------------------------------------
.text:0000000000002424                 align 8
.text:0000000000002428
.text:0000000000002428 loc_2428:                               ; CODE XREF: operand2sig+16D↑j
.text:0000000000002428                 cmp     byte ptr [r13+1], 49h ; 'I'
.text:000000000000242D                 jnz     short loc_240F
.text:000000000000242F                 cmp     byte ptr [r13+2], 47h ; 'G'
.text:0000000000002434                 jnz     short loc_240F
.text:0000000000002436                 lea     rdi, [r13+3]    ; s2
.text:000000000000243A                 mov     rsi, rbx
.text:000000000000243D                 call    str2sig
.text:0000000000002442                 test    eax, eax
.text:0000000000002444                 jnz     short loc_240F
.text:0000000000002446                 jmp     loc_23B6
.text:0000000000002446 ; ---------------------------------------------------------------------------
.text:000000000000244B                 align 10h
.text:0000000000002450
.text:0000000000002450 loc_2450:                               ; CODE XREF: operand2sig+6E↑j
.text:0000000000002450                 cmp     edx, 0FFFFFFFFh
.text:0000000000002453                 jz      short loc_2473
.text:0000000000002455                 cmp     edx, 0FFh
.text:000000000000245B                 mov     eax, 7Fh
.text:0000000000002460                 mov     ebx, 0FFh
.text:0000000000002465                 cmovl   ebx, eax
.text:0000000000002468                 and     ebx, edx
.text:000000000000246A                 mov     [rsp+58h+var_4C], ebx
.text:000000000000246E                 jmp     loc_23CA
.text:0000000000002473 ; ---------------------------------------------------------------------------
.text:0000000000002473
.text:0000000000002473 loc_2473:                               ; CODE XREF: operand2sig+1B3↑j
.text:0000000000002473                 mov     [rsp+58h+var_4C], edx
.text:0000000000002477                 jmp     loc_2320
.text:000000000000247C ; ---------------------------------------------------------------------------
.text:000000000000247C
.text:000000000000247C loc_247C:                               ; CODE XREF: operand2sig+14E↑j
.text:000000000000247C                 call    ___stack_chk_fail
.text:000000000000247C ; } // starts at 22A0
.text:000000000000247C operand2sig     endp
.text:000000000000247C
.text:000000000000247C ; ---------------------------------------------------------------------------
.text:0000000000002481                 align 10h
.text:0000000000002490
.text:0000000000002490 ; =============== S U B R O U T I N E =======================================
.text:0000000000002490
.text:0000000000002490
.text:0000000000002490                 public close_stdout_set_file_name
.text:0000000000002490 close_stdout_set_file_name proc near
.text:0000000000002490 ; __unwind {
.text:0000000000002490                 mov     cs:file_name, rdi
.text:0000000000002497                 retn
.text:0000000000002497 ; } // starts at 2490
.text:0000000000002497 close_stdout_set_file_name endp
.text:0000000000002497
.text:0000000000002497 ; ---------------------------------------------------------------------------
.text:0000000000002498                 align 20h
.text:00000000000024A0
.text:00000000000024A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000024A0
.text:00000000000024A0
.text:00000000000024A0                 public close_stdout_set_ignore_EPIPE
.text:00000000000024A0 close_stdout_set_ignore_EPIPE proc near
.text:00000000000024A0 ; __unwind {
.text:00000000000024A0                 mov     cs:ignore_EPIPE, dil
.text:00000000000024A7                 retn
.text:00000000000024A7 ; } // starts at 24A0
.text:00000000000024A7 close_stdout_set_ignore_EPIPE endp
.text:00000000000024A7
.text:00000000000024A7 ; ---------------------------------------------------------------------------
.text:00000000000024A8                 align 10h
.text:00000000000024B0
.text:00000000000024B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000024B0
.text:00000000000024B0 ; Attributes: info_from_lumina
.text:00000000000024B0
.text:00000000000024B0 ; void __cdecl close_stdout()
.text:00000000000024B0                 public close_stdout
.text:00000000000024B0 close_stdout    proc near               ; DATA XREF: main+6C↑o
.text:00000000000024B0 ; __unwind {
.text:00000000000024B0                 push    rbp
.text:00000000000024B1                 push    rbx
.text:00000000000024B2                 sub     rsp, 8
.text:00000000000024B6                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:00000000000024BD                 call    close_stream
.text:00000000000024C2                 test    eax, eax
.text:00000000000024C4                 jz      short loc_24DC
.text:00000000000024C6                 call    ___errno_location
.text:00000000000024CB                 cmp     cs:ignore_EPIPE, 0
.text:00000000000024D2                 mov     rbx, rax
.text:00000000000024D5                 jz      short loc_24F3
.text:00000000000024D7                 cmp     dword ptr [rax], 20h ; ' '
.text:00000000000024DA                 jnz     short loc_24F3
.text:00000000000024DC
.text:00000000000024DC loc_24DC:                               ; CODE XREF: close_stdout+14↑j
.text:00000000000024DC                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:00000000000024E3                 call    close_stream
.text:00000000000024E8                 test    eax, eax
.text:00000000000024EA                 jnz     short loc_2532
.text:00000000000024EC                 add     rsp, 8
.text:00000000000024F0                 pop     rbx
.text:00000000000024F1                 pop     rbp
.text:00000000000024F2                 retn
.text:00000000000024F3 ; ---------------------------------------------------------------------------
.text:00000000000024F3
.text:00000000000024F3 loc_24F3:                               ; CODE XREF: close_stdout+25↑j
.text:00000000000024F3                                         ; close_stdout+2A↑j
.text:00000000000024F3                 lea     rsi, aWriteError ; "write error"
.text:00000000000024FA                 xor     edi, edi        ; domainname
.text:00000000000024FC                 mov     edx, 5          ; category
.text:0000000000002501                 call    _dcgettext
.text:0000000000002506                 mov     rdi, cs:file_name
.text:000000000000250D                 mov     rbp, rax
.text:0000000000002510                 test    rdi, rdi
.text:0000000000002513                 jz      short loc_253D
.text:0000000000002515                 call    quotearg_colon
.text:000000000000251A                 mov     esi, [rbx]      ; errnum
.text:000000000000251C                 lea     rdx, format     ; "%s: %s"
.text:0000000000002523                 mov     rcx, rax
.text:0000000000002526                 mov     r8, rbp
.text:0000000000002529                 xor     edi, edi        ; status
.text:000000000000252B                 xor     eax, eax
.text:000000000000252D                 call    _error
.text:0000000000002532
.text:0000000000002532 loc_2532:                               ; CODE XREF: close_stdout+3A↑j
.text:0000000000002532                                         ; close_stdout+A2↓j
.text:0000000000002532                 mov     edi, cs:exit_failure ; status
.text:0000000000002538                 call    __exit
.text:000000000000253D ; ---------------------------------------------------------------------------
.text:000000000000253D
.text:000000000000253D loc_253D:                               ; CODE XREF: close_stdout+63↑j
.text:000000000000253D                 mov     esi, [rbx]      ; errnum
.text:000000000000253F                 lea     rdx, format+4   ; format
.text:0000000000002546                 mov     rcx, rax
.text:0000000000002549                 xor     edi, edi        ; status
.text:000000000000254B                 xor     eax, eax
.text:000000000000254D                 call    _error
.text:0000000000002552                 jmp     short loc_2532
.text:0000000000002552 ; } // starts at 24B0
.text:0000000000002552 close_stdout    endp
.text:0000000000002552
.text:0000000000002552 ; ---------------------------------------------------------------------------
.text:0000000000002554                 align 20h
.text:0000000000002560
.text:0000000000002560 ; =============== S U B R O U T I N E =======================================
.text:0000000000002560
.text:0000000000002560
.text:0000000000002560                 public set_program_name
.text:0000000000002560 set_program_name proc near              ; CODE XREF: main+37↑p
.text:0000000000002560 ; __unwind {
.text:0000000000002560                 test    rdi, rdi
.text:0000000000002563                 push    rbx
.text:0000000000002564                 jz      short loc_25DD
.text:0000000000002566                 mov     esi, 2Fh ; '/'  ; c
.text:000000000000256B                 mov     rbx, rdi
.text:000000000000256E                 call    _strrchr
.text:0000000000002573                 test    rax, rax
.text:0000000000002576                 jz      short loc_25CD
.text:0000000000002578                 lea     r8, [rax+1]
.text:000000000000257C                 mov     rdx, r8
.text:000000000000257F                 sub     rdx, rbx
.text:0000000000002582                 cmp     rdx, 6
.text:0000000000002586                 jle     short loc_25CD
.text:0000000000002588                 lea     rsi, [rax-6]
.text:000000000000258C                 lea     rdi, aLibs      ; "/.libs/"
.text:0000000000002593                 mov     ecx, 7
.text:0000000000002598                 repe cmpsb
.text:000000000000259A                 setnbe  dl
.text:000000000000259D                 sbb     dl, 0
.text:00000000000025A0                 test    dl, dl
.text:00000000000025A2                 jnz     short loc_25CD
.text:00000000000025A4                 lea     rdi, aLt        ; "lt-"
.text:00000000000025AB                 mov     ecx, 3
.text:00000000000025B0                 mov     rsi, r8
.text:00000000000025B3                 mov     rbx, r8
.text:00000000000025B6                 repe cmpsb
.text:00000000000025B8                 setnbe  dl
.text:00000000000025BB                 sbb     dl, 0
.text:00000000000025BE                 test    dl, dl
.text:00000000000025C0                 jnz     short loc_25CD
.text:00000000000025C2                 lea     rbx, [rax+4]
.text:00000000000025C6                 mov     cs:program_invocation_short_name@@GLIBC_2_2_5, rbx
.text:00000000000025CD
.text:00000000000025CD loc_25CD:                               ; CODE XREF: set_program_name+16↑j
.text:00000000000025CD                                         ; set_program_name+26↑j ...
.text:00000000000025CD                 mov     cs:program_name, rbx
.text:00000000000025D4                 mov     cs:program_invocation_name@@GLIBC_2_2_5, rbx
.text:00000000000025DB                 pop     rbx
.text:00000000000025DC                 retn
.text:00000000000025DD ; ---------------------------------------------------------------------------
.text:00000000000025DD
.text:00000000000025DD loc_25DD:                               ; CODE XREF: set_program_name+4↑j
.text:00000000000025DD                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:00000000000025E4                 lea     rdi, aANullArgv0WasP ; "A NULL argv[0] was passed through an ex"...
.text:00000000000025EB                 mov     edx, 37h ; '7'  ; n
.text:00000000000025F0                 mov     esi, 1          ; size
.text:00000000000025F5                 call    _fwrite
.text:00000000000025FA                 call    _abort
.text:00000000000025FA ; } // starts at 2560
.text:00000000000025FA set_program_name endp
.text:00000000000025FA
.text:00000000000025FA ; ---------------------------------------------------------------------------
.text:00000000000025FF                 align 20h
.text:0000000000002600
.text:0000000000002600 ; =============== S U B R O U T I N E =======================================
.text:0000000000002600
.text:0000000000002600 ; Attributes: info_from_lumina
.text:0000000000002600
.text:0000000000002600 ; const char *__fastcall gettext_quote(const char *msgid, quoting_style s)
.text:0000000000002600 gettext_quote   proc near               ; CODE XREF: quotearg_buffer_restyled+1165↓p
.text:0000000000002600                                         ; quotearg_buffer_restyled+117B↓p
.text:0000000000002600 ; __unwind {
.text:0000000000002600                 push    rbp
.text:0000000000002601                 push    rbx
.text:0000000000002602                 mov     rbp, rdi
.text:0000000000002605                 mov     ebx, esi
.text:0000000000002607                 sub     rsp, 8
.text:000000000000260B                 call    locale_charset
.text:0000000000002610                 movzx   edx, byte ptr [rax]
.text:0000000000002613                 and     edx, 0FFFFFFDFh
.text:0000000000002616                 cmp     dl, 55h ; 'U'
.text:0000000000002619                 jz      short loc_2690
.text:000000000000261B                 cmp     dl, 47h ; 'G'
.text:000000000000261E                 jz      short loc_2640
.text:0000000000002620
.text:0000000000002620 loc_2620:                               ; CODE XREF: gettext_quote+4A↓j
.text:0000000000002620                                         ; gettext_quote+50↓j ...
.text:0000000000002620                 lea     rax, unk_586B
.text:0000000000002627                 lea     rdx, asc_586D   ; "'"
.text:000000000000262E                 cmp     ebx, 9
.text:0000000000002631                 cmovnz  rax, rdx
.text:0000000000002635                 add     rsp, 8
.text:0000000000002639                 pop     rbx
.text:000000000000263A                 pop     rbp
.text:000000000000263B                 retn
.text:000000000000263B ; ---------------------------------------------------------------------------
.text:000000000000263C                 align 20h
.text:0000000000002640
.text:0000000000002640 loc_2640:                               ; CODE XREF: gettext_quote+1E↑j
.text:0000000000002640                 movzx   edx, byte ptr [rax+1]
.text:0000000000002644                 and     edx, 0FFFFFFDFh
.text:0000000000002647                 cmp     dl, 42h ; 'B'
.text:000000000000264A                 jnz     short loc_2620
.text:000000000000264C                 cmp     byte ptr [rax+2], 31h ; '1'
.text:0000000000002650                 jnz     short loc_2620
.text:0000000000002652                 cmp     byte ptr [rax+3], 38h ; '8'
.text:0000000000002656                 jnz     short loc_2620
.text:0000000000002658                 cmp     byte ptr [rax+4], 30h ; '0'
.text:000000000000265C                 jnz     short loc_2620
.text:000000000000265E                 cmp     byte ptr [rax+5], 33h ; '3'
.text:0000000000002662                 jnz     short loc_2620
.text:0000000000002664                 cmp     byte ptr [rax+6], 30h ; '0'
.text:0000000000002668                 jnz     short loc_2620
.text:000000000000266A                 cmp     byte ptr [rax+7], 0
.text:000000000000266E                 jnz     short loc_2620
.text:0000000000002670                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000002674                 lea     rax, unk_5864
.text:000000000000267B                 lea     rdx, unk_5868
.text:0000000000002682                 cmovnz  rax, rdx
.text:0000000000002686                 add     rsp, 8
.text:000000000000268A                 pop     rbx
.text:000000000000268B                 pop     rbp
.text:000000000000268C                 retn
.text:000000000000268C ; ---------------------------------------------------------------------------
.text:000000000000268D                 align 10h
.text:0000000000002690
.text:0000000000002690 loc_2690:                               ; CODE XREF: gettext_quote+19↑j
.text:0000000000002690                 movzx   edx, byte ptr [rax+1]
.text:0000000000002694                 and     edx, 0FFFFFFDFh
.text:0000000000002697                 cmp     dl, 54h ; 'T'
.text:000000000000269A                 jnz     short loc_2620
.text:000000000000269C                 movzx   edx, byte ptr [rax+2]
.text:00000000000026A0                 and     edx, 0FFFFFFDFh
.text:00000000000026A3                 cmp     dl, 46h ; 'F'
.text:00000000000026A6                 jnz     loc_2620
.text:00000000000026AC                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:00000000000026B0                 jnz     loc_2620
.text:00000000000026B6                 cmp     byte ptr [rax+4], 38h ; '8'
.text:00000000000026BA                 jnz     loc_2620
.text:00000000000026C0                 cmp     byte ptr [rax+5], 0
.text:00000000000026C4                 jnz     loc_2620
.text:00000000000026CA                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:00000000000026CE                 lea     rax, unk_585C
.text:00000000000026D5                 lea     rdx, unk_5860
.text:00000000000026DC                 cmovnz  rax, rdx
.text:00000000000026E0                 add     rsp, 8
.text:00000000000026E4                 pop     rbx
.text:00000000000026E5                 pop     rbp
.text:00000000000026E6                 retn
.text:00000000000026E6 ; } // starts at 2600
.text:00000000000026E6 gettext_quote   endp
.text:00000000000026E6
.text:00000000000026E6 ; ---------------------------------------------------------------------------
.text:00000000000026E7                 align 10h
.text:00000000000026F0
.text:00000000000026F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000026F0
.text:00000000000026F0 ; Attributes: info_from_lumina
.text:00000000000026F0
.text:00000000000026F0 ; size_t __fastcall quotearg_buffer_restyled(char *buffer, size_t buffersize, const char *arg, size_t argsize, quoting_style quoting_style, int flags, const unsigned int *quote_these_too, const char *left_quote, const char *right_quote)
.text:00000000000026F0 quotearg_buffer_restyled proc near      ; CODE XREF: quotearg_buffer_restyled+BCD↓p
.text:00000000000026F0                                         ; quotearg_buffer_restyled+11CB↓p ...
.text:00000000000026F0
.text:00000000000026F0 var_E0          = dword ptr -0E0h
.text:00000000000026F0 var_DB          = byte ptr -0DBh
.text:00000000000026F0 var_DA          = byte ptr -0DAh
.text:00000000000026F0 var_D9          = byte ptr -0D9h
.text:00000000000026F0 s               = qword ptr -0D8h
.text:00000000000026F0 n               = qword ptr -0D0h
.text:00000000000026F0 var_C8          = qword ptr -0C8h
.text:00000000000026F0 ps              = qword ptr -0C0h
.text:00000000000026F0 var_B8          = qword ptr -0B8h
.text:00000000000026F0 var_B0          = qword ptr -0B0h
.text:00000000000026F0 var_A8          = qword ptr -0A8h
.text:00000000000026F0 s2              = qword ptr -0A0h
.text:00000000000026F0 var_98          = qword ptr -98h
.text:00000000000026F0 var_90          = qword ptr -90h
.text:00000000000026F0 var_88          = qword ptr -88h
.text:00000000000026F0 var_80          = qword ptr -80h
.text:00000000000026F0 var_78          = qword ptr -78h
.text:00000000000026F0 var_70          = dword ptr -70h
.text:00000000000026F0 var_6C          = byte ptr -6Ch
.text:00000000000026F0 var_6B          = byte ptr -6Bh
.text:00000000000026F0 var_6A          = byte ptr -6Ah
.text:00000000000026F0 var_69          = byte ptr -69h
.text:00000000000026F0 var_68          = qword ptr -68h
.text:00000000000026F0 var_60          = qword ptr -60h
.text:00000000000026F0 wc              = dword ptr -4Ch
.text:00000000000026F0 var_48          = qword ptr -48h
.text:00000000000026F0 var_40          = qword ptr -40h
.text:00000000000026F0 arg_0           = qword ptr  8
.text:00000000000026F0 arg_8           = qword ptr  10h
.text:00000000000026F0 arg_10          = qword ptr  18h
.text:00000000000026F0
.text:00000000000026F0 ; __unwind {
.text:00000000000026F0                 push    r15
.text:00000000000026F2                 push    r14
.text:00000000000026F4                 mov     r15d, r8d
.text:00000000000026F7                 push    r13
.text:00000000000026F9                 push    r12
.text:00000000000026FB                 mov     r14, rdi
.text:00000000000026FE                 push    rbp
.text:00000000000026FF                 push    rbx
.text:0000000000002700                 mov     ebx, r9d
.text:0000000000002703                 mov     r13, rsi
.text:0000000000002706                 mov     rbp, rcx
.text:0000000000002709                 and     ebx, 2
.text:000000000000270C                 sub     rsp, 0B8h
.text:0000000000002713                 mov     rax, [rsp+0E8h+arg_0]
.text:000000000000271B                 mov     [rsp+0E8h+s], rdx
.text:0000000000002720                 mov     [rsp+0E8h+var_E0], r8d
.text:0000000000002725                 mov     [rsp+0E8h+var_70], r9d
.text:000000000000272A                 mov     [rsp+0E8h+var_C8], rax
.text:000000000000272F                 mov     rax, [rsp+0E8h+arg_8]
.text:0000000000002737                 mov     [rsp+0E8h+var_80], rax
.text:000000000000273C                 mov     rax, [rsp+0E8h+arg_10]
.text:0000000000002744                 mov     [rsp+0E8h+var_88], rax
.text:0000000000002749                 mov     rax, fs:28h
.text:0000000000002752                 mov     [rsp+0E8h+var_40], rax
.text:000000000000275A                 xor     eax, eax
.text:000000000000275C                 call    ___ctype_get_mb_cur_max
.text:0000000000002761                 cmp     r15d, 0Ah       ; switch 11 cases
.text:0000000000002765                 mov     [rsp+0E8h+var_90], rax
.text:000000000000276A                 ja      def_2781        ; jumptable 00000000000121F1 default case
.text:0000000000002770                 lea     rcx, jpt_2781
.text:0000000000002777                 mov     edx, r15d
.text:000000000000277A                 movsxd  rax, ds:(jpt_2781 - 58C0h)[rcx+rdx*4]
.text:000000000000277E                 add     rax, rcx
.text:0000000000002781                 jmp     rax             ; switch jump
.text:0000000000002783 ; ---------------------------------------------------------------------------
.text:0000000000002783
.text:0000000000002783 loc_2783:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002783                                         ; quotearg_buffer_restyled+C66↓j
.text:0000000000002783                                         ; DATA XREF: ...
.text:0000000000002783                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 1
.text:0000000000002788                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000278D                 xor     r12d, r12d
.text:0000000000002790                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002799                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000279E                 mov     [rsp+0E8h+var_DB], 0
.text:00000000000027A3
.text:00000000000027A3 loc_27A3:                               ; CODE XREF: quotearg_buffer_restyled+E94↓j
.text:00000000000027A3                 lea     rax, asc_586D   ; "'"
.text:00000000000027AA                 mov     [rsp+0E8h+n], 1
.text:00000000000027B3                 xor     r15d, r15d
.text:00000000000027B6                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000027BE                 mov     [rsp+0E8h+s2], rax
.text:00000000000027C3
.text:00000000000027C3 loc_27C3:                               ; CODE XREF: quotearg_buffer_restyled+7F4↓j
.text:00000000000027C3                                         ; quotearg_buffer_restyled+CB8↓j ...
.text:00000000000027C3                 xor     r11d, r11d
.text:00000000000027C6                 mov     rax, rbp
.text:00000000000027C9                 mov     r8d, r12d
.text:00000000000027CC                 mov     rbp, r11
.text:00000000000027CF                 mov     r11, rax
.text:00000000000027D2                 nop     word ptr [rax+rax+00h]
.text:00000000000027D8
.text:00000000000027D8 loc_27D8:                               ; CODE XREF: quotearg_buffer_restyled+2B2↓j
.text:00000000000027D8                                         ; quotearg_buffer_restyled+42C↓j
.text:00000000000027D8                 cmp     r11, rbp
.text:00000000000027DB                 setnz   r12b
.text:00000000000027DF                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:00000000000027E3                 jnz     short loc_27F2
.text:00000000000027E5                 mov     rax, [rsp+0E8h+s]
.text:00000000000027EA                 cmp     byte ptr [rax+rbp], 0
.text:00000000000027EE                 setnz   r12b
.text:00000000000027F2
.text:00000000000027F2 loc_27F2:                               ; CODE XREF: quotearg_buffer_restyled+F3↑j
.text:00000000000027F2                 test    r12b, r12b
.text:00000000000027F5                 jz      loc_2E50
.text:00000000000027FB                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002800                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000002805                 lea     r9, [rdi+rbp]
.text:0000000000002809                 setnz   al
.text:000000000000280C                 and     al, [rsp+0E8h+var_DB]
.text:0000000000002810                 mov     r10d, eax
.text:0000000000002813                 jz      loc_28C0
.text:0000000000002819                 mov     rax, [rsp+0E8h+n]
.text:000000000000281E                 test    rax, rax
.text:0000000000002821                 jz      loc_2C50
.text:0000000000002827                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:000000000000282B                 lea     rbx, [rbp+rax+0]
.text:0000000000002830                 jnz     short loc_2860
.text:0000000000002832                 cmp     rax, 1
.text:0000000000002836                 jbe     short loc_2860
.text:0000000000002838                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:000000000000283D                 mov     byte ptr [rsp+0E8h+var_B8], r10b
.text:0000000000002842                 mov     [rsp+0E8h+ps], r9
.text:0000000000002847                 call    _strlen
.text:000000000000284C                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000002852                 movzx   r10d, byte ptr [rsp+0E8h+var_B8]
.text:0000000000002858                 mov     r11, rax
.text:000000000000285B                 mov     r9, [rsp+0E8h+ps]
.text:0000000000002860
.text:0000000000002860 loc_2860:                               ; CODE XREF: quotearg_buffer_restyled+140↑j
.text:0000000000002860                                         ; quotearg_buffer_restyled+146↑j
.text:0000000000002860                 cmp     rbx, r11
.text:0000000000002863                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000002868                 ja      loc_2E20
.text:000000000000286E                 mov     rdx, [rsp+0E8h+n] ; n
.text:0000000000002873                 mov     rsi, [rsp+0E8h+s2] ; s2
.text:0000000000002878                 mov     rdi, r9         ; s1
.text:000000000000287B                 mov     [rsp+0E8h+var_A8], r11
.text:0000000000002880                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000002885                 mov     [rsp+0E8h+var_B8], r9
.text:000000000000288A                 call    _memcmp
.text:000000000000288F                 test    eax, eax
.text:0000000000002891                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000002896                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:000000000000289C                 mov     r11, [rsp+0E8h+var_A8]
.text:00000000000028A1                 jnz     loc_2E20
.text:00000000000028A7                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000028AC                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:00000000000028B2                 jnz     loc_3835
.text:00000000000028B8                 nop     dword ptr [rax+rax+00000000h]
.text:00000000000028C0
.text:00000000000028C0 loc_28C0:                               ; CODE XREF: quotearg_buffer_restyled+123↑j
.text:00000000000028C0                                         ; quotearg_buffer_restyled+733↓j
.text:00000000000028C0                 movzx   ebx, byte ptr [r9]
.text:00000000000028C4                 cmp     bl, 7Eh         ; switch 127 cases
.text:00000000000028C7                 ja      def_28DE        ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:00000000000028CD                 lea     rcx, jpt_28DE
.text:00000000000028D4                 movzx   edx, bl
.text:00000000000028D7                 movsxd  rax, ds:(jpt_28DE - 58ECh)[rcx+rdx*4]
.text:00000000000028DB                 add     rax, rcx
.text:00000000000028DE                 jmp     rax             ; switch jump
.text:00000000000028E0 ; ---------------------------------------------------------------------------
.text:00000000000028E0
.text:00000000000028E0 loc_28E0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:00000000000028E0                                         ; DATA XREF: .rodata:jpt_2C6A↓o
.text:00000000000028E0                 xor     r10d, r10d      ; jumptable 00000000000126DA cases 123,125
.text:00000000000028E3
.text:00000000000028E3 loc_28E3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000028E3                                         ; DATA XREF: .rodata:jpt_28DE↓o
.text:00000000000028E3                 cmp     r11, 1          ; jumptable 000000000001234E cases 123,125
.text:00000000000028E7                 setnz   al
.text:00000000000028EA                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:00000000000028EE                 jnz     short loc_28FC
.text:00000000000028F0                 mov     rax, [rsp+0E8h+s]
.text:00000000000028F5                 cmp     byte ptr [rax+1], 0
.text:00000000000028F9                 setnz   al
.text:00000000000028FC
.text:00000000000028FC loc_28FC:                               ; CODE XREF: quotearg_buffer_restyled+1FE↑j
.text:00000000000028FC                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002901                 setz    dl
.text:0000000000002904                 test    al, al
.text:0000000000002906                 jz      loc_2B58
.text:000000000000290C
.text:000000000000290C loc_290C:                               ; CODE XREF: quotearg_buffer_restyled+46B↓j
.text:000000000000290C                 xor     r12d, r12d
.text:000000000000290F                 xor     eax, eax
.text:0000000000002911                 nop     dword ptr [rax+00000000h]
.text:0000000000002918
.text:0000000000002918 loc_2918:                               ; CODE XREF: quotearg_buffer_restyled+2E9↓j
.text:0000000000002918                                         ; quotearg_buffer_restyled+30C↓j ...
.text:0000000000002918                 cmp     [rsp+0E8h+var_DB], 1
.text:000000000000291D                 jnz     loc_2A32
.text:0000000000002923                 test    dl, dl
.text:0000000000002925                 jnz     loc_2A32
.text:000000000000292B
.text:000000000000292B loc_292B:                               ; CODE XREF: quotearg_buffer_restyled+347↓j
.text:000000000000292B                 mov     rsi, [rsp+0E8h+var_C8]
.text:0000000000002930                 test    rsi, rsi
.text:0000000000002933                 jz      short loc_2949
.text:0000000000002935                 mov     edx, ebx
.text:0000000000002937                 shr     dl, 5
.text:000000000000293A                 movzx   edx, dl
.text:000000000000293D                 mov     edx, [rsi+rdx*4]
.text:0000000000002940                 bt      edx, ebx
.text:0000000000002943                 jb      loc_2A93
.text:0000000000002949
.text:0000000000002949 loc_2949:                               ; CODE XREF: quotearg_buffer_restyled+243↑j
.text:0000000000002949                                         ; quotearg_buffer_restyled+34D↓j ...
.text:0000000000002949                 test    r10b, r10b
.text:000000000000294C                 jnz     loc_2A93
.text:0000000000002952                 xor     eax, 1
.text:0000000000002955                 add     rbp, 1
.text:0000000000002959                 and     eax, r8d
.text:000000000000295C
.text:000000000000295C loc_295C:                               ; CODE XREF: quotearg_buffer_restyled+75A↓j
.text:000000000000295C                                         ; quotearg_buffer_restyled+AE8↓j
.text:000000000000295C                 test    al, al
.text:000000000000295E                 jz      short loc_2980
.text:0000000000002960                 cmp     r13, r15
.text:0000000000002963                 jbe     short loc_296A
.text:0000000000002965                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000296A
.text:000000000000296A loc_296A:                               ; CODE XREF: quotearg_buffer_restyled+273↑j
.text:000000000000296A                 lea     rax, [r15+1]
.text:000000000000296E                 cmp     r13, rax
.text:0000000000002971                 jbe     short loc_2979
.text:0000000000002973                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000002979
.text:0000000000002979 loc_2979:                               ; CODE XREF: quotearg_buffer_restyled+281↑j
.text:0000000000002979                 add     r15, 2
.text:000000000000297D                 xor     r8d, r8d
.text:0000000000002980
.text:0000000000002980 loc_2980:                               ; CODE XREF: quotearg_buffer_restyled+26E↑j
.text:0000000000002980                                         ; quotearg_buffer_restyled+403↓j ...
.text:0000000000002980                 cmp     r15, r13
.text:0000000000002983                 jnb     short loc_2989
.text:0000000000002985                 mov     [r14+r15], bl
.text:0000000000002989
.text:0000000000002989 loc_2989:                               ; CODE XREF: quotearg_buffer_restyled+293↑j
.text:0000000000002989                 movzx   edi, [rsp+0E8h+var_DA]
.text:000000000000298E                 add     r15, 1
.text:0000000000002992                 mov     eax, 0
.text:0000000000002997                 test    r12b, r12b
.text:000000000000299A                 cmovz   edi, eax
.text:000000000000299D                 mov     [rsp+0E8h+var_DA], dil
.text:00000000000029A2                 jmp     loc_27D8
.text:00000000000029A2 ; ---------------------------------------------------------------------------
.text:00000000000029A7                 align 10h
.text:00000000000029B0
.text:00000000000029B0 loc_29B0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:00000000000029B0                                         ; DATA XREF: .rodata:jpt_2C6A↓o
.text:00000000000029B0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 63
.text:00000000000029B3
.text:00000000000029B3 loc_29B3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000029B3                                         ; DATA XREF: .rodata:jpt_28DE↓o
.text:00000000000029B3                 mov     eax, [rsp+0E8h+var_E0] ; jumptable 000000000001234E case 63
.text:00000000000029B7                 cmp     eax, 2
.text:00000000000029BA                 jz      loc_2F78
.text:00000000000029C0                 cmp     eax, 5
.text:00000000000029C3                 jz      loc_2F38
.text:00000000000029C9                 cmp     eax, 2
.text:00000000000029CC                 mov     ebx, 3Fh ; '?'
.text:00000000000029D1                 setz    dl
.text:00000000000029D4                 xor     r12d, r12d
.text:00000000000029D7                 xor     eax, eax
.text:00000000000029D9                 jmp     loc_2918
.text:00000000000029D9 ; ---------------------------------------------------------------------------
.text:00000000000029DE                 align 20h
.text:00000000000029E0
.text:00000000000029E0 loc_29E0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:00000000000029E0                                         ; DATA XREF: .rodata:jpt_2C6A↓o
.text:00000000000029E0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 39
.text:00000000000029E3
.text:00000000000029E3 loc_29E3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000029E3                                         ; DATA XREF: .rodata:jpt_28DE↓o
.text:00000000000029E3                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 39
.text:00000000000029E8                 jz      loc_2EF0
.text:00000000000029EE                 mov     [rsp+0E8h+var_6C], r12b
.text:00000000000029F3                 xor     edx, edx
.text:00000000000029F5                 xor     eax, eax
.text:00000000000029F7                 mov     ebx, 27h ; '''
.text:00000000000029FC                 jmp     loc_2918
.text:00000000000029FC ; ---------------------------------------------------------------------------
.text:0000000000002A01                 align 8
.text:0000000000002A08
.text:0000000000002A08 loc_2A08:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002A08                                         ; DATA XREF: .rodata:jpt_28DE↓o
.text:0000000000002A08                 mov     edx, 9          ; jumptable 000000000001234E case 9
.text:0000000000002A0D                 mov     ebx, 74h ; 't'
.text:0000000000002A12
.text:0000000000002A12 loc_2A12:                               ; CODE XREF: quotearg_buffer_restyled+4BA↓j
.text:0000000000002A12                                         ; quotearg_buffer_restyled+4EA↓j ...
.text:0000000000002A12                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002A17                 setz    al
.text:0000000000002A1A                 and     al, [rsp+0E8h+var_D9]
.text:0000000000002A1E                 jnz     loc_2B6E
.text:0000000000002A24
.text:0000000000002A24 loc_2A24:                               ; CODE XREF: quotearg_buffer_restyled+362↓j
.text:0000000000002A24                                         ; quotearg_buffer_restyled+45A↓j ...
.text:0000000000002A24                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000002A29                 jnz     short loc_2A90
.text:0000000000002A2B
.text:0000000000002A2B loc_2A2B:                               ; CODE XREF: quotearg_buffer_restyled+422↓j
.text:0000000000002A2B                 mov     ebx, edx
.text:0000000000002A2D                 xor     r12d, r12d
.text:0000000000002A30                 xor     eax, eax
.text:0000000000002A32
.text:0000000000002A32 loc_2A32:                               ; CODE XREF: quotearg_buffer_restyled+22D↑j
.text:0000000000002A32                                         ; quotearg_buffer_restyled+235↑j
.text:0000000000002A32                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002A37                 jnz     loc_292B
.text:0000000000002A3D                 jmp     loc_2949
.text:0000000000002A3D ; ---------------------------------------------------------------------------
.text:0000000000002A42                 align 8
.text:0000000000002A48
.text:0000000000002A48 loc_2A48:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002A48                                         ; DATA XREF: .rodata:jpt_28DE↓o
.text:0000000000002A48                 mov     edx, 8          ; jumptable 000000000001234E case 8
.text:0000000000002A4D                 mov     ebx, 62h ; 'b'
.text:0000000000002A52                 jmp     short loc_2A24
.text:0000000000002A52 ; ---------------------------------------------------------------------------
.text:0000000000002A54                 align 8
.text:0000000000002A58
.text:0000000000002A58 loc_2A58:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002A58                                         ; DATA XREF: .rodata:jpt_28DE↓o
.text:0000000000002A58                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 92
.text:0000000000002A5D                 jz      loc_2E30
.text:0000000000002A63                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000002A68                 jz      loc_2C80
.text:0000000000002A6E
.text:0000000000002A6E loc_2A6E:                               ; CODE XREF: quotearg_buffer_restyled+588↓j
.text:0000000000002A6E                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002A73                 jz      loc_2C80
.text:0000000000002A79                 cmp     [rsp+0E8h+n], 0
.text:0000000000002A7F                 jnz     loc_2E3B
.text:0000000000002A85                 mov     ebx, 5Ch ; '\'
.text:0000000000002A8A                 nop     word ptr [rax+rax+00h]
.text:0000000000002A90
.text:0000000000002A90 loc_2A90:                               ; CODE XREF: quotearg_buffer_restyled+339↑j
.text:0000000000002A90                                         ; quotearg_buffer_restyled+5D5↓j ...
.text:0000000000002A90                 xor     r12d, r12d
.text:0000000000002A93
.text:0000000000002A93 loc_2A93:                               ; CODE XREF: quotearg_buffer_restyled+253↑j
.text:0000000000002A93                                         ; quotearg_buffer_restyled+25C↑j
.text:0000000000002A93                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002A98                 setz    dl
.text:0000000000002A9B                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002AA0                 mov     eax, edx
.text:0000000000002AA2                 jnz     loc_32F8
.text:0000000000002AA8                 mov     eax, r8d
.text:0000000000002AAB                 xor     eax, 1
.text:0000000000002AAE                 and     al, dl
.text:0000000000002AB0                 jz      short loc_2AE1
.text:0000000000002AB2                 cmp     r13, r15
.text:0000000000002AB5                 jbe     short loc_2ABC
.text:0000000000002AB7                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000002ABC
.text:0000000000002ABC loc_2ABC:                               ; CODE XREF: quotearg_buffer_restyled+3C5↑j
.text:0000000000002ABC                 lea     rdx, [r15+1]
.text:0000000000002AC0                 cmp     r13, rdx
.text:0000000000002AC3                 jbe     short loc_2ACB
.text:0000000000002AC5                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000002ACB
.text:0000000000002ACB loc_2ACB:                               ; CODE XREF: quotearg_buffer_restyled+3D3↑j
.text:0000000000002ACB                 lea     rdx, [r15+2]
.text:0000000000002ACF                 cmp     r13, rdx
.text:0000000000002AD2                 jbe     short loc_2ADA
.text:0000000000002AD4                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000002ADA
.text:0000000000002ADA loc_2ADA:                               ; CODE XREF: quotearg_buffer_restyled+3E2↑j
.text:0000000000002ADA                 add     r15, 3
.text:0000000000002ADE                 mov     r8d, eax
.text:0000000000002AE1
.text:0000000000002AE1 loc_2AE1:                               ; CODE XREF: quotearg_buffer_restyled+3C0↑j
.text:0000000000002AE1                 cmp     r13, r15
.text:0000000000002AE4                 jbe     short loc_2AEB
.text:0000000000002AE6                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000002AEB
.text:0000000000002AEB loc_2AEB:                               ; CODE XREF: quotearg_buffer_restyled+3F4↑j
.text:0000000000002AEB                 add     r15, 1
.text:0000000000002AEF                 add     rbp, 1
.text:0000000000002AF3                 jmp     loc_2980
.text:0000000000002AF3 ; ---------------------------------------------------------------------------
.text:0000000000002AF8                 align 20h
.text:0000000000002B00
.text:0000000000002B00 loc_2B00:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002B00                                         ; DATA XREF: .rodata:jpt_28DE↓o
.text:0000000000002B00                 cmp     [rsp+0E8h+var_DB], 0 ; jumptable 000000000001234E case 0
.text:0000000000002B05                 jnz     loc_2CD3
.text:0000000000002B0B                 xor     edx, edx
.text:0000000000002B0D                 test    byte ptr [rsp+0E8h+var_70], 1
.text:0000000000002B12                 jz      loc_2A2B
.text:0000000000002B18                 add     rbp, 1
.text:0000000000002B1C                 jmp     loc_27D8
.text:0000000000002B1C ; ---------------------------------------------------------------------------
.text:0000000000002B21                 align 8
.text:0000000000002B28
.text:0000000000002B28 loc_2B28:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002B28                                         ; DATA XREF: .rodata:jpt_28DE↓o
.text:0000000000002B28                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 37,43-58,65-90,93,95,97-122
.text:0000000000002B2D                 setz    dl
.text:0000000000002B30                 xor     eax, eax
.text:0000000000002B32                 jmp     loc_2918
.text:0000000000002B32 ; ---------------------------------------------------------------------------
.text:0000000000002B37                 align 20h
.text:0000000000002B40
.text:0000000000002B40 loc_2B40:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002B40                                         ; DATA XREF: .rodata:jpt_28DE↓o
.text:0000000000002B40                 mov     edx, 7          ; jumptable 000000000001234E case 7
.text:0000000000002B45                 mov     ebx, 61h ; 'a'
.text:0000000000002B4A                 jmp     loc_2A24
.text:0000000000002B4A ; ---------------------------------------------------------------------------
.text:0000000000002B4F                 align 10h
.text:0000000000002B50
.text:0000000000002B50 loc_2B50:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002B50                                         ; DATA XREF: .rodata:jpt_28DE↓o
.text:0000000000002B50                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 35,126
.text:0000000000002B55                 setz    dl
.text:0000000000002B58
.text:0000000000002B58 loc_2B58:                               ; CODE XREF: quotearg_buffer_restyled+216↑j
.text:0000000000002B58                                         ; quotearg_buffer_restyled+6A3↓j
.text:0000000000002B58                 test    rbp, rbp
.text:0000000000002B5B                 jnz     loc_290C
.text:0000000000002B61
.text:0000000000002B61 loc_2B61:                               ; CODE XREF: quotearg_buffer_restyled+49B↓j
.text:0000000000002B61                                         ; quotearg_buffer_restyled+4AD↓j ...
.text:0000000000002B61                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000002B66                 and     al, dl
.text:0000000000002B68                 jz      loc_2918
.text:0000000000002B6E
.text:0000000000002B6E loc_2B6E:                               ; CODE XREF: quotearg_buffer_restyled+32E↑j
.text:0000000000002B6E                 mov     rbp, r11
.text:0000000000002B71                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000002B79                 jmp     loc_3279
.text:0000000000002B79 ; ---------------------------------------------------------------------------
.text:0000000000002B7E                 align 20h
.text:0000000000002B80
.text:0000000000002B80 loc_2B80:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002B80                                         ; DATA XREF: .rodata:jpt_28DE↓o
.text:0000000000002B80                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000002B85                 setz    dl
.text:0000000000002B88                 xor     r12d, r12d
.text:0000000000002B8B                 jmp     short loc_2B61
.text:0000000000002B8B ; ---------------------------------------------------------------------------
.text:0000000000002B8D                 align 10h
.text:0000000000002B90
.text:0000000000002B90 loc_2B90:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002B90                                         ; DATA XREF: .rodata:jpt_28DE↓o
.text:0000000000002B90                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 32
.text:0000000000002B95                 mov     ebx, 20h ; ' '
.text:0000000000002B9A                 setz    dl
.text:0000000000002B9D                 jmp     short loc_2B61
.text:0000000000002B9D ; ---------------------------------------------------------------------------
.text:0000000000002B9F                 align 20h
.text:0000000000002BA0
.text:0000000000002BA0 loc_2BA0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002BA0                                         ; DATA XREF: .rodata:jpt_28DE↓o
.text:0000000000002BA0                 mov     edx, 0Dh        ; jumptable 000000000001234E case 13
.text:0000000000002BA5                 mov     ebx, 72h ; 'r'
.text:0000000000002BAA                 jmp     loc_2A12
.text:0000000000002BAA ; ---------------------------------------------------------------------------
.text:0000000000002BAF                 align 10h
.text:0000000000002BB0
.text:0000000000002BB0 loc_2BB0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002BB0                                         ; DATA XREF: .rodata:jpt_28DE↓o
.text:0000000000002BB0                 mov     edx, 0Ch        ; jumptable 000000000001234E case 12
.text:0000000000002BB5                 mov     ebx, 66h ; 'f'
.text:0000000000002BBA                 jmp     loc_2A24
.text:0000000000002BBA ; ---------------------------------------------------------------------------
.text:0000000000002BBF                 align 20h
.text:0000000000002BC0
.text:0000000000002BC0 loc_2BC0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002BC0                                         ; DATA XREF: .rodata:jpt_28DE↓o
.text:0000000000002BC0                 mov     edx, 0Bh        ; jumptable 000000000001234E case 11
.text:0000000000002BC5                 mov     ebx, 76h ; 'v'
.text:0000000000002BCA                 jmp     loc_2A24
.text:0000000000002BCA ; ---------------------------------------------------------------------------
.text:0000000000002BCF                 align 10h
.text:0000000000002BD0
.text:0000000000002BD0 loc_2BD0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002BD0                                         ; DATA XREF: .rodata:jpt_28DE↓o
.text:0000000000002BD0                 mov     edx, 0Ah        ; jumptable 000000000001234E case 10
.text:0000000000002BD5                 mov     ebx, 6Eh ; 'n'
.text:0000000000002BDA                 jmp     loc_2A12
.text:0000000000002BDA ; ---------------------------------------------------------------------------
.text:0000000000002BDF                 align 20h
.text:0000000000002BE0
.text:0000000000002BE0 def_2C6A:                               ; CODE XREF: quotearg_buffer_restyled+567↓j
.text:0000000000002BE0                                         ; quotearg_buffer_restyled+57A↓j
.text:0000000000002BE0                                         ; DATA XREF: ...
.text:0000000000002BE0                 xor     r10d, r10d      ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000002BE3                 nop     dword ptr [rax+rax+00h]
.text:0000000000002BE8
.text:0000000000002BE8 def_28DE:                               ; CODE XREF: quotearg_buffer_restyled+1D7↑j
.text:0000000000002BE8                                         ; quotearg_buffer_restyled+1EE↑j
.text:0000000000002BE8                                         ; DATA XREF: ...
.text:0000000000002BE8                 cmp     [rsp+0E8h+var_90], 1 ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:0000000000002BEE                 jnz     loc_2F98
.text:0000000000002BF4                 mov     [rsp+0E8h+var_B0], r11
.text:0000000000002BF9                 mov     byte ptr [rsp+0E8h+var_B8], r8b
.text:0000000000002BFE                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000002C03                 call    ___ctype_b_loc
.text:0000000000002C08                 mov     rcx, [rax]
.text:0000000000002C0B                 movzx   edx, bl
.text:0000000000002C0E                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000002C14                 movzx   r8d, byte ptr [rsp+0E8h+var_B8]
.text:0000000000002C1A                 mov     r11, [rsp+0E8h+var_B0]
.text:0000000000002C1F                 mov     edi, 1
.text:0000000000002C24                 movzx   eax, word ptr [rcx+rdx*2]
.text:0000000000002C28                 and     ax, 4000h
.text:0000000000002C2C                 setnz   r12b
.text:0000000000002C30                 setz    al
.text:0000000000002C33                 and     al, [rsp+0E8h+var_DB]
.text:0000000000002C37
.text:0000000000002C37 loc_2C37:                               ; CODE XREF: quotearg_buffer_restyled+FED↓j
.text:0000000000002C37                 test    al, al
.text:0000000000002C39                 jnz     loc_35D1
.text:0000000000002C3F                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002C44                 setz    dl
.text:0000000000002C47                 jmp     loc_2918
.text:0000000000002C47 ; ---------------------------------------------------------------------------
.text:0000000000002C4C                 align 10h
.text:0000000000002C50
.text:0000000000002C50 loc_2C50:                               ; CODE XREF: quotearg_buffer_restyled+131↑j
.text:0000000000002C50                 movzx   ebx, byte ptr [r9]
.text:0000000000002C54                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000002C57                 ja      short def_2C6A  ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000002C59                 lea     rcx, jpt_2C6A
.text:0000000000002C60                 movzx   edx, bl
.text:0000000000002C63                 movsxd  rax, ds:(jpt_2C6A - 5AE8h)[rcx+rdx*4]
.text:0000000000002C67                 add     rax, rcx
.text:0000000000002C6A                 jmp     rax             ; switch jump
.text:0000000000002C6A ; ---------------------------------------------------------------------------
.text:0000000000002C6C                 align 10h
.text:0000000000002C70
.text:0000000000002C70 loc_2C70:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002C70                                         ; DATA XREF: .rodata:jpt_2C6A↓o
.text:0000000000002C70                 xor     r10d, r10d      ; jumptable 00000000000126DA case 92
.text:0000000000002C73                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000002C78                 jnz     loc_2A6E
.text:0000000000002C7E                 xchg    ax, ax
.text:0000000000002C80
.text:0000000000002C80 loc_2C80:                               ; CODE XREF: quotearg_buffer_restyled+378↑j
.text:0000000000002C80                                         ; quotearg_buffer_restyled+383↑j
.text:0000000000002C80                 mov     edx, 5Ch ; '\'
.text:0000000000002C85                 mov     ebx, 5Ch ; '\'
.text:0000000000002C8A                 jmp     loc_2A24
.text:0000000000002C8A ; ---------------------------------------------------------------------------
.text:0000000000002C8F                 align 10h
.text:0000000000002C90
.text:0000000000002C90 loc_2C90:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002C90                                         ; DATA XREF: .rodata:jpt_2C6A↓o
.text:0000000000002C90                 mov     edx, 0Ch        ; jumptable 00000000000126DA case 12
.text:0000000000002C95                 xor     r10d, r10d
.text:0000000000002C98                 mov     ebx, 66h ; 'f'
.text:0000000000002C9D                 jmp     loc_2A24
.text:0000000000002C9D ; ---------------------------------------------------------------------------
.text:0000000000002CA2                 align 8
.text:0000000000002CA8
.text:0000000000002CA8 loc_2CA8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002CA8                                         ; DATA XREF: .rodata:jpt_2C6A↓o
.text:0000000000002CA8                 mov     edx, 0Ah        ; jumptable 00000000000126DA case 10
.text:0000000000002CAD                 xor     r10d, r10d
.text:0000000000002CB0                 mov     ebx, 6Eh ; 'n'
.text:0000000000002CB5                 jmp     loc_2A12
.text:0000000000002CB5 ; ---------------------------------------------------------------------------
.text:0000000000002CBA                 align 20h
.text:0000000000002CC0
.text:0000000000002CC0 loc_2CC0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002CC0                                         ; DATA XREF: .rodata:jpt_2C6A↓o
.text:0000000000002CC0                 mov     ebx, 61h ; 'a'  ; jumptable 00000000000126DA case 7
.text:0000000000002CC5                 jmp     loc_2A90
.text:0000000000002CC5 ; ---------------------------------------------------------------------------
.text:0000000000002CCA                 align 10h
.text:0000000000002CD0
.text:0000000000002CD0 loc_2CD0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002CD0                                         ; DATA XREF: .rodata:jpt_2C6A↓o
.text:0000000000002CD0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 0
.text:0000000000002CD3
.text:0000000000002CD3 loc_2CD3:                               ; CODE XREF: quotearg_buffer_restyled+415↑j
.text:0000000000002CD3                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002CD8                 setz    dl
.text:0000000000002CDB                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002CE0                 jnz     loc_387A
.text:0000000000002CE6                 mov     eax, r8d
.text:0000000000002CE9                 mov     rcx, r15
.text:0000000000002CEC                 xor     eax, 1
.text:0000000000002CEF                 and     al, dl
.text:0000000000002CF1                 jz      short loc_2D20
.text:0000000000002CF3                 cmp     r13, r15
.text:0000000000002CF6                 jbe     short loc_2CFD
.text:0000000000002CF8                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000002CFD
.text:0000000000002CFD loc_2CFD:                               ; CODE XREF: quotearg_buffer_restyled+606↑j
.text:0000000000002CFD                 lea     rcx, [r15+1]
.text:0000000000002D01                 cmp     r13, rcx
.text:0000000000002D04                 jbe     short loc_2D0C
.text:0000000000002D06                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000002D0C
.text:0000000000002D0C loc_2D0C:                               ; CODE XREF: quotearg_buffer_restyled+614↑j
.text:0000000000002D0C                 lea     rcx, [r15+2]
.text:0000000000002D10                 cmp     r13, rcx
.text:0000000000002D13                 ja      loc_3349
.text:0000000000002D19
.text:0000000000002D19 loc_2D19:                               ; CODE XREF: quotearg_buffer_restyled+C5F↓j
.text:0000000000002D19                 lea     rcx, [r15+3]
.text:0000000000002D1D                 mov     r8d, eax
.text:0000000000002D20
.text:0000000000002D20 loc_2D20:                               ; CODE XREF: quotearg_buffer_restyled+601↑j
.text:0000000000002D20                 cmp     r13, rcx
.text:0000000000002D23                 jbe     short loc_2D2A
.text:0000000000002D25                 mov     byte ptr [r14+rcx], 5Ch ; '\'
.text:0000000000002D2A
.text:0000000000002D2A loc_2D2A:                               ; CODE XREF: quotearg_buffer_restyled+633↑j
.text:0000000000002D2A                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002D2F                 lea     r15, [rcx+1]
.text:0000000000002D33                 jz      loc_3339
.text:0000000000002D39                 lea     rax, [rbp+1]
.text:0000000000002D3D                 cmp     rax, r11
.text:0000000000002D40                 jnb     short loc_2D5B
.text:0000000000002D42                 mov     rax, [rsp+0E8h+s]
.text:0000000000002D47                 movzx   eax, byte ptr [rax+rbp+1]
.text:0000000000002D4C                 mov     byte ptr [rsp+0E8h+ps], al
.text:0000000000002D50                 sub     eax, 30h ; '0'
.text:0000000000002D53                 cmp     al, 9
.text:0000000000002D55                 jbe     loc_3589
.text:0000000000002D5B
.text:0000000000002D5B loc_2D5B:                               ; CODE XREF: quotearg_buffer_restyled+650↑j
.text:0000000000002D5B                 mov     eax, r12d
.text:0000000000002D5E                 mov     ebx, 30h ; '0'
.text:0000000000002D63                 xor     r12d, r12d
.text:0000000000002D66                 jmp     loc_2918
.text:0000000000002D66 ; ---------------------------------------------------------------------------
.text:0000000000002D6B                 align 10h
.text:0000000000002D70
.text:0000000000002D70 loc_2D70:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002D70                                         ; DATA XREF: .rodata:jpt_2C6A↓o
.text:0000000000002D70                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 37,43-58,65-90,93,95,97-122
.text:0000000000002D75                 mov     r12d, r10d
.text:0000000000002D78                 setz    dl
.text:0000000000002D7B                 xor     r10d, r10d
.text:0000000000002D7E                 xor     eax, eax
.text:0000000000002D80                 jmp     loc_2918
.text:0000000000002D80 ; ---------------------------------------------------------------------------
.text:0000000000002D85                 align 8
.text:0000000000002D88
.text:0000000000002D88 loc_2D88:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002D88                                         ; DATA XREF: .rodata:jpt_2C6A↓o
.text:0000000000002D88                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 35,126
.text:0000000000002D8D                 setz    dl
.text:0000000000002D90                 xor     r10d, r10d
.text:0000000000002D93                 jmp     loc_2B58
.text:0000000000002D93 ; ---------------------------------------------------------------------------
.text:0000000000002D98                 align 20h
.text:0000000000002DA0
.text:0000000000002DA0 loc_2DA0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002DA0                                         ; DATA XREF: .rodata:jpt_2C6A↓o
.text:0000000000002DA0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000002DA5                 setz    dl
.text:0000000000002DA8                 xor     r10d, r10d
.text:0000000000002DAB                 xor     r12d, r12d
.text:0000000000002DAE                 jmp     loc_2B61
.text:0000000000002DAE ; ---------------------------------------------------------------------------
.text:0000000000002DB3                 align 8
.text:0000000000002DB8
.text:0000000000002DB8 loc_2DB8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002DB8                                         ; DATA XREF: .rodata:jpt_2C6A↓o
.text:0000000000002DB8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA case 32
.text:0000000000002DBD                 mov     r12d, r10d
.text:0000000000002DC0                 mov     ebx, 20h ; ' '
.text:0000000000002DC5                 setz    dl
.text:0000000000002DC8                 xor     r10d, r10d
.text:0000000000002DCB                 jmp     loc_2B61
.text:0000000000002DD0 ; ---------------------------------------------------------------------------
.text:0000000000002DD0
.text:0000000000002DD0 loc_2DD0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002DD0                                         ; DATA XREF: .rodata:jpt_2C6A↓o
.text:0000000000002DD0                 mov     edx, 0Dh        ; jumptable 00000000000126DA case 13
.text:0000000000002DD5                 xor     r10d, r10d
.text:0000000000002DD8                 mov     ebx, 72h ; 'r'
.text:0000000000002DDD                 jmp     loc_2A12
.text:0000000000002DDD ; ---------------------------------------------------------------------------
.text:0000000000002DE2                 align 8
.text:0000000000002DE8
.text:0000000000002DE8 loc_2DE8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002DE8                                         ; DATA XREF: .rodata:jpt_2C6A↓o
.text:0000000000002DE8                 mov     ebx, 76h ; 'v'  ; jumptable 00000000000126DA case 11
.text:0000000000002DED                 jmp     loc_2A90
.text:0000000000002DED ; ---------------------------------------------------------------------------
.text:0000000000002DF2                 align 8
.text:0000000000002DF8
.text:0000000000002DF8 loc_2DF8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002DF8                                         ; DATA XREF: .rodata:jpt_2C6A↓o
.text:0000000000002DF8                 mov     edx, 9          ; jumptable 00000000000126DA case 9
.text:0000000000002DFD                 xor     r10d, r10d
.text:0000000000002E00                 mov     ebx, 74h ; 't'
.text:0000000000002E05                 jmp     loc_2A12
.text:0000000000002E05 ; ---------------------------------------------------------------------------
.text:0000000000002E0A                 align 10h
.text:0000000000002E10
.text:0000000000002E10 loc_2E10:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002E10                                         ; DATA XREF: .rodata:jpt_2C6A↓o
.text:0000000000002E10                 mov     ebx, 62h ; 'b'  ; jumptable 00000000000126DA case 8
.text:0000000000002E15                 jmp     loc_2A90
.text:0000000000002E15 ; ---------------------------------------------------------------------------
.text:0000000000002E1A                 align 20h
.text:0000000000002E20
.text:0000000000002E20 loc_2E20:                               ; CODE XREF: quotearg_buffer_restyled+178↑j
.text:0000000000002E20                                         ; quotearg_buffer_restyled+1B1↑j
.text:0000000000002E20                 xor     r10d, r10d
.text:0000000000002E23                 jmp     loc_28C0
.text:0000000000002E23 ; ---------------------------------------------------------------------------
.text:0000000000002E28                 align 10h
.text:0000000000002E30
.text:0000000000002E30 loc_2E30:                               ; CODE XREF: quotearg_buffer_restyled+36D↑j
.text:0000000000002E30                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002E35                 jnz     loc_37A0
.text:0000000000002E3B
.text:0000000000002E3B loc_2E3B:                               ; CODE XREF: quotearg_buffer_restyled+38F↑j
.text:0000000000002E3B                 add     rbp, 1
.text:0000000000002E3F                 mov     eax, r8d
.text:0000000000002E42                 xor     r12d, r12d
.text:0000000000002E45                 mov     ebx, 5Ch ; '\'
.text:0000000000002E4A                 jmp     loc_295C
.text:0000000000002E4A ; ---------------------------------------------------------------------------
.text:0000000000002E4F                 align 10h
.text:0000000000002E50
.text:0000000000002E50 loc_2E50:                               ; CODE XREF: quotearg_buffer_restyled+105↑j
.text:0000000000002E50                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002E55                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000002E5A                 mov     r12d, r8d
.text:0000000000002E5D                 mov     rbp, r11
.text:0000000000002E60                 setz    dl
.text:0000000000002E63                 mov     eax, ebx
.text:0000000000002E65                 test    r15, r15
.text:0000000000002E68                 setz    cl
.text:0000000000002E6B                 and     eax, edx
.text:0000000000002E6D                 and     al, cl
.text:0000000000002E6F                 jnz     loc_38D6
.text:0000000000002E75                 mov     eax, ebx
.text:0000000000002E77                 xor     eax, 1
.text:0000000000002E7A                 and     dl, al
.text:0000000000002E7C                 jz      loc_37EC
.text:0000000000002E82                 cmp     [rsp+0E8h+var_6C], 0
.text:0000000000002E87                 jz      loc_37EA
.text:0000000000002E8D                 cmp     [rsp+0E8h+var_DA], 0
.text:0000000000002E92                 jnz     loc_388D
.text:0000000000002E98                 test    r13, r13
.text:0000000000002E9B                 setz    al
.text:0000000000002E9E                 cmp     [rsp+0E8h+var_98], 0
.text:0000000000002EA4                 setnz   dl
.text:0000000000002EA7                 and     al, dl
.text:0000000000002EA9                 jz      loc_38CC
.text:0000000000002EAF                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000002EB4
.text:0000000000002EB4 loc_2EB4:                               ; CODE XREF: quotearg_buffer_restyled+121D↓j
.text:0000000000002EB4                 lea     rbx, asc_586D   ; "'"
.text:0000000000002EBB                 mov     byte ptr [r14], 27h ; '''
.text:0000000000002EBF                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000002EC7                 mov     r15d, 1
.text:0000000000002ECD                 mov     [rsp+0E8h+n], 1
.text:0000000000002ED6                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000002EDB                 mov     [rsp+0E8h+s2], rbx
.text:0000000000002EE0                 mov     [rsp+0E8h+var_6C], al
.text:0000000000002EE4                 jmp     loc_27C3
.text:0000000000002EE4 ; ---------------------------------------------------------------------------
.text:0000000000002EE9                 align 10h
.text:0000000000002EF0
.text:0000000000002EF0 loc_2EF0:                               ; CODE XREF: quotearg_buffer_restyled+2F8↑j
.text:0000000000002EF0                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002EF5                 jnz     loc_37A0
.text:0000000000002EFB                 test    r13, r13
.text:0000000000002EFE                 jz      loc_3300
.text:0000000000002F04                 xor     edx, edx
.text:0000000000002F06                 cmp     [rsp+0E8h+var_98], 0
.text:0000000000002F0C                 jnz     loc_3300
.text:0000000000002F12
.text:0000000000002F12 loc_2F12:                               ; CODE XREF: quotearg_buffer_restyled+C44↓j
.text:0000000000002F12                                         ; quotearg_buffer_restyled+122A↓j
.text:0000000000002F12                 mov     [rsp+0E8h+var_98], r13
.text:0000000000002F17                 add     r15, 3
.text:0000000000002F1B                 xor     eax, eax
.text:0000000000002F1D                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000002F22                 xor     r8d, r8d
.text:0000000000002F25                 mov     r13, rdx
.text:0000000000002F28                 mov     ebx, 27h ; '''
.text:0000000000002F2D                 jmp     loc_2949
.text:0000000000002F2D ; ---------------------------------------------------------------------------
.text:0000000000002F32                 align 8
.text:0000000000002F38
.text:0000000000002F38 loc_2F38:                               ; CODE XREF: quotearg_buffer_restyled+2D3↑j
.text:0000000000002F38                 test    byte ptr [rsp+0E8h+var_70], 4
.text:0000000000002F3D                 jz      short loc_2F60
.text:0000000000002F3F                 lea     rcx, [rbp+2]
.text:0000000000002F43                 cmp     rcx, r11
.text:0000000000002F46                 jnb     short loc_2F60
.text:0000000000002F48                 mov     rax, [rsp+0E8h+s]
.text:0000000000002F4D                 cmp     byte ptr [rax+rbp+1], 3Fh ; '?'
.text:0000000000002F52                 jz      loc_36E2
.text:0000000000002F58                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000002F60
.text:0000000000002F60 loc_2F60:                               ; CODE XREF: quotearg_buffer_restyled+84D↑j
.text:0000000000002F60                                         ; quotearg_buffer_restyled+856↑j ...
.text:0000000000002F60                 xor     edx, edx
.text:0000000000002F62                 xor     r12d, r12d
.text:0000000000002F65                 xor     eax, eax
.text:0000000000002F67                 mov     ebx, 3Fh ; '?'
.text:0000000000002F6C                 jmp     loc_2918
.text:0000000000002F6C ; ---------------------------------------------------------------------------
.text:0000000000002F71                 align 8
.text:0000000000002F78
.text:0000000000002F78 loc_2F78:                               ; CODE XREF: quotearg_buffer_restyled+2CA↑j
.text:0000000000002F78                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002F7D                 jnz     loc_37A0
.text:0000000000002F83                 xor     r12d, r12d
.text:0000000000002F86                 xor     eax, eax
.text:0000000000002F88                 mov     ebx, 3Fh ; '?'
.text:0000000000002F8D                 jmp     loc_2949
.text:0000000000002F8D ; ---------------------------------------------------------------------------
.text:0000000000002F92                 align 8
.text:0000000000002F98
.text:0000000000002F98 loc_2F98:                               ; CODE XREF: quotearg_buffer_restyled+4FE↑j
.text:0000000000002F98                 lea     rax, [rsp+0E8h+var_48]
.text:0000000000002FA0                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000002FA4                 mov     [rsp+0E8h+var_48], 0
.text:0000000000002FB0                 mov     [rsp+0E8h+ps], rax
.text:0000000000002FB5                 jnz     short loc_2FE4
.text:0000000000002FB7                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000002FBC                 mov     byte ptr [rsp+0E8h+var_A8], r8b
.text:0000000000002FC1                 mov     byte ptr [rsp+0E8h+var_B0], r10b
.text:0000000000002FC6                 mov     [rsp+0E8h+var_B8], r9
.text:0000000000002FCB                 call    _strlen
.text:0000000000002FD0                 movzx   r8d, byte ptr [rsp+0E8h+var_A8]
.text:0000000000002FD6                 movzx   r10d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000002FDC                 mov     r11, rax
.text:0000000000002FDF                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000002FE4
.text:0000000000002FE4 loc_2FE4:                               ; CODE XREF: quotearg_buffer_restyled+8C5↑j
.text:0000000000002FE4                 lea     rax, [rsp+0E8h+wc]
.text:0000000000002FEC                 xor     ecx, ecx
.text:0000000000002FEE                 mov     [rsp+0E8h+var_6A], bl
.text:0000000000002FF2                 mov     [rsp+0E8h+var_6B], r8b
.text:0000000000002FF7                 mov     rbx, rcx
.text:0000000000002FFA                 mov     [rsp+0E8h+var_60], r9
.text:0000000000003002                 mov     [rsp+0E8h+var_B0], rax
.text:0000000000003007                 mov     [rsp+0E8h+var_69], r10b
.text:000000000000300C                 mov     [rsp+0E8h+var_68], r15
.text:0000000000003014                 mov     [rsp+0E8h+var_A8], r14
.text:0000000000003019                 mov     [rsp+0E8h+var_78], r13
.text:000000000000301E                 mov     [rsp+0E8h+var_B8], r11
.text:0000000000003023
.text:0000000000003023 loc_3023:                               ; CODE XREF: quotearg_buffer_restyled+9AF↓j
.text:0000000000003023                 mov     rax, [rsp+0E8h+s]
.text:0000000000003028                 lea     r14, [rbp+rbx+0]
.text:000000000000302D                 mov     rdx, [rsp+0E8h+var_B8]
.text:0000000000003032                 mov     rcx, [rsp+0E8h+ps]
.text:0000000000003037                 mov     rdi, [rsp+0E8h+var_B0]
.text:000000000000303C                 lea     r13, [rax+r14]
.text:0000000000003040                 sub     rdx, r14
.text:0000000000003043                 mov     rsi, r13
.text:0000000000003046                 call    rpl_mbrtowc
.text:000000000000304B                 test    rax, rax
.text:000000000000304E                 mov     r15, rax
.text:0000000000003051                 jz      short loc_30A1
.text:0000000000003053                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000003057                 jz      loc_3675
.text:000000000000305D                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000003061                 jz      loc_3601
.text:0000000000003067                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000306C                 setz    al
.text:000000000000306F                 and     al, [rsp+0E8h+var_D9]
.text:0000000000003073                 jnz     loc_3210
.text:0000000000003079
.text:0000000000003079 loc_3079:                               ; CODE XREF: quotearg_buffer_restyled+B24↓j
.text:0000000000003079                                         ; quotearg_buffer_restyled+B47↓j
.text:0000000000003079                 mov     edi, [rsp+0E8h+wc] ; wc
.text:0000000000003080                 call    _iswprint
.text:0000000000003085                 mov     rdi, [rsp+0E8h+ps] ; ps
.text:000000000000308A                 test    eax, eax
.text:000000000000308C                 mov     eax, 0
.text:0000000000003091                 cmovz   r12d, eax
.text:0000000000003095                 add     rbx, r15
.text:0000000000003098                 call    _mbsinit
.text:000000000000309D                 test    eax, eax
.text:000000000000309F                 jz      short loc_3023
.text:00000000000030A1
.text:00000000000030A1 loc_30A1:                               ; CODE XREF: quotearg_buffer_restyled+961↑j
.text:00000000000030A1                 mov     edx, r12d
.text:00000000000030A4                 mov     rdi, rbx
.text:00000000000030A7                 movzx   r8d, [rsp+0E8h+var_6B]
.text:00000000000030AD                 xor     edx, 1
.text:00000000000030B0                 movzx   ebx, [rsp+0E8h+var_6A]
.text:00000000000030B5                 movzx   r10d, [rsp+0E8h+var_69]
.text:00000000000030BB                 and     dl, [rsp+0E8h+var_DB]
.text:00000000000030BF                 mov     r15, [rsp+0E8h+var_68]
.text:00000000000030C7                 mov     r14, [rsp+0E8h+var_A8]
.text:00000000000030CC                 mov     r13, [rsp+0E8h+var_78]
.text:00000000000030D1                 mov     r11, [rsp+0E8h+var_B8]
.text:00000000000030D6
.text:00000000000030D6 loc_30D6:                               ; CODE XREF: quotearg_buffer_restyled+F80↓j
.text:00000000000030D6                                         ; quotearg_buffer_restyled+FB8↓j
.text:00000000000030D6                 cmp     rdi, 1
.text:00000000000030DA                 jbe     loc_36DB
.text:00000000000030E0
.text:00000000000030E0 loc_30E0:                               ; CODE XREF: quotearg_buffer_restyled+EE9↓j
.text:00000000000030E0                 mov     rcx, rdi
.text:00000000000030E3                 xor     esi, esi
.text:00000000000030E5                 movzx   r9d, [rsp+0E8h+var_D9]
.text:00000000000030EB                 add     rcx, rbp
.text:00000000000030EE                 mov     rdi, [rsp+0E8h+s]
.text:00000000000030F3                 jmp     loc_31AE
.text:00000000000030F3 ; ---------------------------------------------------------------------------
.text:00000000000030F8                 align 20h
.text:0000000000003100
.text:0000000000003100 loc_3100:                               ; CODE XREF: quotearg_buffer_restyled+AC0↓j
.text:0000000000003100                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003105                 setz    al
.text:0000000000003108                 test    r9b, r9b
.text:000000000000310B                 jnz     loc_35C0
.text:0000000000003111                 mov     esi, r8d
.text:0000000000003114                 xor     esi, 1
.text:0000000000003117                 and     al, sil
.text:000000000000311A                 jz      short loc_314B
.text:000000000000311C                 cmp     r13, r15
.text:000000000000311F                 jbe     short loc_3126
.text:0000000000003121                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000003126
.text:0000000000003126 loc_3126:                               ; CODE XREF: quotearg_buffer_restyled+A2F↑j
.text:0000000000003126                 lea     rsi, [r15+1]
.text:000000000000312A                 cmp     r13, rsi
.text:000000000000312D                 jbe     short loc_3135
.text:000000000000312F                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000003135
.text:0000000000003135 loc_3135:                               ; CODE XREF: quotearg_buffer_restyled+A3D↑j
.text:0000000000003135                 lea     rsi, [r15+2]
.text:0000000000003139                 cmp     r13, rsi
.text:000000000000313C                 jbe     short loc_3144
.text:000000000000313E                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000003144
.text:0000000000003144 loc_3144:                               ; CODE XREF: quotearg_buffer_restyled+A4C↑j
.text:0000000000003144                 add     r15, 3
.text:0000000000003148                 mov     r8d, eax
.text:000000000000314B
.text:000000000000314B loc_314B:                               ; CODE XREF: quotearg_buffer_restyled+A2A↑j
.text:000000000000314B                 cmp     r13, r15
.text:000000000000314E                 jbe     short loc_3155
.text:0000000000003150                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000003155
.text:0000000000003155 loc_3155:                               ; CODE XREF: quotearg_buffer_restyled+A5E↑j
.text:0000000000003155                 lea     rax, [r15+1]
.text:0000000000003159                 cmp     r13, rax
.text:000000000000315C                 jbe     short loc_316B
.text:000000000000315E                 mov     eax, ebx
.text:0000000000003160                 shr     al, 6
.text:0000000000003163                 add     eax, 30h ; '0'
.text:0000000000003166                 mov     [r14+r15+1], al
.text:000000000000316B
.text:000000000000316B loc_316B:                               ; CODE XREF: quotearg_buffer_restyled+A6C↑j
.text:000000000000316B                 lea     rax, [r15+2]
.text:000000000000316F                 cmp     r13, rax
.text:0000000000003172                 jbe     short loc_3184
.text:0000000000003174                 mov     eax, ebx
.text:0000000000003176                 shr     al, 3
.text:0000000000003179                 and     eax, 7
.text:000000000000317C                 add     eax, 30h ; '0'
.text:000000000000317F                 mov     [r14+r15+2], al
.text:0000000000003184
.text:0000000000003184 loc_3184:                               ; CODE XREF: quotearg_buffer_restyled+A82↑j
.text:0000000000003184                 and     ebx, 7
.text:0000000000003187                 add     rbp, 1
.text:000000000000318B                 add     r15, 3
.text:000000000000318F                 add     ebx, 30h ; '0'
.text:0000000000003192                 cmp     rbp, rcx
.text:0000000000003195                 jnb     loc_2980
.text:000000000000319B                 mov     esi, edx
.text:000000000000319D
.text:000000000000319D loc_319D:                               ; CODE XREF: quotearg_buffer_restyled+B19↓j
.text:000000000000319D                                         ; quotearg_buffer_restyled+EF1↓j
.text:000000000000319D                 cmp     r13, r15
.text:00000000000031A0                 jbe     short loc_31A6
.text:00000000000031A2                 mov     [r14+r15], bl
.text:00000000000031A6
.text:00000000000031A6 loc_31A6:                               ; CODE XREF: quotearg_buffer_restyled+AB0↑j
.text:00000000000031A6                 movzx   ebx, byte ptr [rdi+rbp]
.text:00000000000031AA                 add     r15, 1
.text:00000000000031AE
.text:00000000000031AE loc_31AE:                               ; CODE XREF: quotearg_buffer_restyled+A03↑j
.text:00000000000031AE                 test    dl, dl
.text:00000000000031B0                 jnz     loc_3100
.text:00000000000031B6                 mov     eax, esi
.text:00000000000031B8                 xor     eax, 1
.text:00000000000031BB                 and     eax, r8d
.text:00000000000031BE                 test    r10b, r10b
.text:00000000000031C1                 jz      short loc_31D1
.text:00000000000031C3                 cmp     r13, r15
.text:00000000000031C6                 jbe     short loc_31CD
.text:00000000000031C8                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:00000000000031CD
.text:00000000000031CD loc_31CD:                               ; CODE XREF: quotearg_buffer_restyled+AD6↑j
.text:00000000000031CD                 add     r15, 1
.text:00000000000031D1
.text:00000000000031D1 loc_31D1:                               ; CODE XREF: quotearg_buffer_restyled+AD1↑j
.text:00000000000031D1                 add     rbp, 1
.text:00000000000031D5                 cmp     rbp, rcx
.text:00000000000031D8                 jnb     loc_295C
.text:00000000000031DE                 test    al, al
.text:00000000000031E0                 jz      loc_35DE
.text:00000000000031E6                 cmp     r13, r15
.text:00000000000031E9                 jbe     short loc_31F0
.text:00000000000031EB                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000031F0
.text:00000000000031F0 loc_31F0:                               ; CODE XREF: quotearg_buffer_restyled+AF9↑j
.text:00000000000031F0                 lea     rax, [r15+1]
.text:00000000000031F4                 cmp     r13, rax
.text:00000000000031F7                 jbe     short loc_31FF
.text:00000000000031F9                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:00000000000031FF
.text:00000000000031FF loc_31FF:                               ; CODE XREF: quotearg_buffer_restyled+B07↑j
.text:00000000000031FF                 add     r15, 2
.text:0000000000003203                 xor     r10d, r10d
.text:0000000000003206                 xor     r8d, r8d
.text:0000000000003209                 jmp     short loc_319D
.text:0000000000003209 ; ---------------------------------------------------------------------------
.text:000000000000320B                 align 10h
.text:0000000000003210
.text:0000000000003210 loc_3210:                               ; CODE XREF: quotearg_buffer_restyled+983↑j
.text:0000000000003210                 cmp     r15, 1
.text:0000000000003214                 jz      loc_3079
.text:000000000000321A                 mov     rdi, [rsp+0E8h+s]
.text:000000000000321F                 lea     rcx, [rdi+r15]
.text:0000000000003223                 lea     rdx, [rdi+r14+1]
.text:0000000000003228                 lea     r8, [rcx+r14]
.text:000000000000322C                 jmp     short loc_323D
.text:000000000000322C ; ---------------------------------------------------------------------------
.text:000000000000322E                 align 10h
.text:0000000000003230
.text:0000000000003230 loc_3230:                               ; CODE XREF: quotearg_buffer_restyled+B56↓j
.text:0000000000003230                                         ; quotearg_buffer_restyled+B70↓j
.text:0000000000003230                 add     rdx, 1
.text:0000000000003234                 cmp     r8, rdx
.text:0000000000003237                 jz      loc_3079
.text:000000000000323D
.text:000000000000323D loc_323D:                               ; CODE XREF: quotearg_buffer_restyled+B3C↑j
.text:000000000000323D                 movzx   ecx, byte ptr [rdx]
.text:0000000000003240                 sub     ecx, 5Bh ; '['
.text:0000000000003243                 cmp     cl, 21h ; '!'
.text:0000000000003246                 ja      short loc_3230
.text:0000000000003248                 mov     esi, 1
.text:000000000000324D                 shl     rsi, cl
.text:0000000000003250                 mov     rcx, rsi
.text:0000000000003253                 mov     rsi, 20000002Bh
.text:000000000000325D                 test    rcx, rsi
.text:0000000000003260                 jz      short loc_3230
.text:0000000000003262                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000003267                 mov     r13, [rsp+0E8h+var_78]
.text:000000000000326C                 mov     rbp, [rsp+0E8h+var_B8]
.text:0000000000003271                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003279
.text:0000000000003279 loc_3279:                               ; CODE XREF: quotearg_buffer_restyled+489↑j
.text:0000000000003279                                         ; quotearg_buffer_restyled+C0B↓j ...
.text:0000000000003279                 cmp     [rsp+0E8h+var_DB], 0
.text:000000000000327E                 jz      short loc_3290
.text:0000000000003280                 test    al, al
.text:0000000000003282                 mov     eax, 4
.text:0000000000003287                 cmovz   eax, [rsp+0E8h+var_E0]
.text:000000000000328C                 mov     [rsp+0E8h+var_E0], eax
.text:0000000000003290
.text:0000000000003290 loc_3290:                               ; CODE XREF: quotearg_buffer_restyled+B8E↑j
.text:0000000000003290                                         ; quotearg_buffer_restyled+1205↓j
.text:0000000000003290                 sub     rsp, 8
.text:0000000000003294                 mov     rcx, rbp
.text:0000000000003297                 mov     rsi, r13
.text:000000000000329A                 push    [rsp+0F0h+var_88]
.text:000000000000329E                 push    [rsp+0F8h+var_80]
.text:00000000000032A2                 mov     rdi, r14
.text:00000000000032A5                 push    0
.text:00000000000032A7                 mov     r9d, [rsp+108h+var_70]
.text:00000000000032AF                 mov     r8d, [rsp+108h+var_E0]
.text:00000000000032B4                 mov     rdx, [rsp+108h+s]
.text:00000000000032B9                 and     r9d, 0FFFFFFFDh
.text:00000000000032BD                 call    quotearg_buffer_restyled
.text:00000000000032C2                 add     rsp, 20h
.text:00000000000032C6                 mov     r15, rax
.text:00000000000032C9
.text:00000000000032C9 loc_32C9:                               ; CODE XREF: quotearg_buffer_restyled+1135↓j
.text:00000000000032C9                                         ; quotearg_buffer_restyled+1140↓j ...
.text:00000000000032C9                 mov     rbx, [rsp+0E8h+var_40]
.text:00000000000032D1                 xor     rbx, fs:28h
.text:00000000000032DA                 mov     rax, r15
.text:00000000000032DD                 jnz     loc_38E3
.text:00000000000032E3                 add     rsp, 0B8h
.text:00000000000032EA                 pop     rbx
.text:00000000000032EB                 pop     rbp
.text:00000000000032EC                 pop     r12
.text:00000000000032EE                 pop     r13
.text:00000000000032F0                 pop     r14
.text:00000000000032F2                 pop     r15
.text:00000000000032F4                 retn
.text:00000000000032F4 ; ---------------------------------------------------------------------------
.text:00000000000032F5                 align 8
.text:00000000000032F8
.text:00000000000032F8 loc_32F8:                               ; CODE XREF: quotearg_buffer_restyled+3B2↑j
.text:00000000000032F8                 mov     rbp, r11
.text:00000000000032FB                 jmp     loc_3279
.text:0000000000003300 ; ---------------------------------------------------------------------------
.text:0000000000003300
.text:0000000000003300 loc_3300:                               ; CODE XREF: quotearg_buffer_restyled+80E↑j
.text:0000000000003300                                         ; quotearg_buffer_restyled+81C↑j
.text:0000000000003300                 cmp     r13, r15
.text:0000000000003303                 jbe     short loc_330A
.text:0000000000003305                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000330A
.text:000000000000330A loc_330A:                               ; CODE XREF: quotearg_buffer_restyled+C13↑j
.text:000000000000330A                 lea     rax, [r15+1]
.text:000000000000330E                 cmp     r13, rax
.text:0000000000003311                 jbe     short loc_3319
.text:0000000000003313                 mov     byte ptr [r14+r15+1], 5Ch ; '\'
.text:0000000000003319
.text:0000000000003319 loc_3319:                               ; CODE XREF: quotearg_buffer_restyled+C21↑j
.text:0000000000003319                 lea     rax, [r15+2]
.text:000000000000331D                 cmp     r13, rax
.text:0000000000003320                 jbe     loc_3912
.text:0000000000003326                 mov     rdx, r13
.text:0000000000003329                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000332F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000003334                 jmp     loc_2F12
.text:0000000000003339 ; ---------------------------------------------------------------------------
.text:0000000000003339
.text:0000000000003339 loc_3339:                               ; CODE XREF: quotearg_buffer_restyled+643↑j
.text:0000000000003339                 mov     eax, r12d
.text:000000000000333C                 mov     ebx, 30h ; '0'
.text:0000000000003341                 xor     r12d, r12d
.text:0000000000003344                 jmp     loc_2949
.text:0000000000003349 ; ---------------------------------------------------------------------------
.text:0000000000003349
.text:0000000000003349 loc_3349:                               ; CODE XREF: quotearg_buffer_restyled+623↑j
.text:0000000000003349                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000334F                 jmp     loc_2D19
.text:0000000000003354 ; ---------------------------------------------------------------------------
.text:0000000000003354
.text:0000000000003354 loc_3354:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003354                                         ; DATA XREF: .rodata:jpt_2781↓o
.text:0000000000003354                 test    ebx, ebx        ; jumptable 00000000000121F1 case 4
.text:0000000000003356                 jnz     loc_2783        ; jumptable 00000000000121F1 case 1
.text:000000000000335C                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003361
.text:0000000000003361 loc_3361:                               ; CODE XREF: quotearg_buffer_restyled+11FD↓j
.text:0000000000003361                 test    r13, r13
.text:0000000000003364                 jnz     loc_38FA
.text:000000000000336A                 lea     rax, asc_586D   ; "'"
.text:0000000000003371                 mov     [rsp+0E8h+var_98], 0
.text:000000000000337A                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000337F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003384                 xor     r12d, r12d
.text:0000000000003387                 mov     [rsp+0E8h+var_D9], 0
.text:000000000000338C                 mov     [rsp+0E8h+n], 1
.text:0000000000003395                 mov     [rsp+0E8h+s2], rax
.text:000000000000339A                 mov     r15d, 1
.text:00000000000033A0                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000033A8                 jmp     loc_27C3
.text:00000000000033A8 ; ---------------------------------------------------------------------------
.text:00000000000033AD                 align 10h
.text:00000000000033B0
.text:00000000000033B0 loc_33B0:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000033B0                                         ; DATA XREF: .rodata:jpt_2781↓o
.text:00000000000033B0                 test    ebx, ebx        ; jumptable 00000000000121F1 case 5
.text:00000000000033B2                 jnz     loc_37AD
.text:00000000000033B8                 test    r13, r13
.text:00000000000033BB                 jz      loc_35E6
.text:00000000000033C1                 mov     byte ptr [r14], 22h ; '"'
.text:00000000000033C5                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000033CA                 xor     r12d, r12d
.text:00000000000033CD                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000033D2                 mov     [rsp+0E8h+var_98], 0
.text:00000000000033DB
.text:00000000000033DB loc_33DB:                               ; CODE XREF: quotearg_buffer_restyled+F0C↓j
.text:00000000000033DB                 lea     rax, unk_586B
.text:00000000000033E2                 mov     [rsp+0E8h+var_D9], 0
.text:00000000000033E7                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000033EC                 mov     [rsp+0E8h+n], 1
.text:00000000000033F5                 mov     r15d, 1
.text:00000000000033FB                 mov     [rsp+0E8h+s2], rax
.text:0000000000003400                 jmp     loc_27C3
.text:0000000000003405 ; ---------------------------------------------------------------------------
.text:0000000000003405
.text:0000000000003405 loc_3405:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003405                                         ; DATA XREF: .rodata:jpt_2781↓o
.text:0000000000003405                 lea     rax, unk_586B   ; jumptable 00000000000121F1 case 6
.text:000000000000340C                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003411                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003416                 xor     r12d, r12d
.text:0000000000003419                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003422                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000003427                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000342C                 mov     [rsp+0E8h+n], 1
.text:0000000000003435                 xor     r15d, r15d
.text:0000000000003438                 mov     [rsp+0E8h+s2], rax
.text:000000000000343D                 mov     [rsp+0E8h+var_E0], 5
.text:0000000000003445                 jmp     loc_27C3
.text:000000000000344A ; ---------------------------------------------------------------------------
.text:000000000000344A
.text:000000000000344A loc_344A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000344A                                         ; DATA XREF: .rodata:jpt_2781↓o
.text:000000000000344A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 7
.text:000000000000344F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003454                 xor     r12d, r12d
.text:0000000000003457                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003460                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000003465                 xor     r15d, r15d
.text:0000000000003468                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000346D                 mov     [rsp+0E8h+n], 0
.text:0000000000003476                 mov     [rsp+0E8h+s2], 0
.text:000000000000347F                 jmp     loc_27C3
.text:0000000000003484 ; ---------------------------------------------------------------------------
.text:0000000000003484
.text:0000000000003484 loc_3484:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003484                                         ; DATA XREF: .rodata:jpt_2781↓o
.text:0000000000003484                 cmp     [rsp+0E8h+var_E0], 0Ah ; jumptable 00000000000121F1 cases 8-10
.text:0000000000003489                 jz      short loc_34E1
.text:000000000000348B                 lea     rsi, asc_586F   ; "`"
.text:0000000000003492                 xor     edi, edi        ; domainname
.text:0000000000003494                 mov     edx, 5          ; category
.text:0000000000003499                 call    _dcgettext
.text:000000000000349E                 mov     rcx, rax
.text:00000000000034A1                 mov     [rsp+0E8h+var_80], rax
.text:00000000000034A6                 lea     rax, asc_586F   ; "`"
.text:00000000000034AD                 cmp     rcx, rax
.text:00000000000034B0                 jz      loc_384E
.text:00000000000034B6
.text:00000000000034B6 loc_34B6:                               ; CODE XREF: quotearg_buffer_restyled+116F↓j
.text:00000000000034B6                 lea     rsi, asc_586D   ; "'"
.text:00000000000034BD                 xor     edi, edi        ; domainname
.text:00000000000034BF                 mov     edx, 5          ; category
.text:00000000000034C4                 call    _dcgettext
.text:00000000000034C9                 mov     rcx, rax
.text:00000000000034CC                 mov     [rsp+0E8h+var_88], rax
.text:00000000000034D1                 lea     rax, asc_586D   ; "'"
.text:00000000000034D8                 cmp     rcx, rax
.text:00000000000034DB                 jz      loc_3864
.text:00000000000034E1
.text:00000000000034E1 loc_34E1:                               ; CODE XREF: quotearg_buffer_restyled+D99↑j
.text:00000000000034E1                                         ; quotearg_buffer_restyled+1185↓j
.text:00000000000034E1                 xor     r15d, r15d
.text:00000000000034E4                 test    ebx, ebx
.text:00000000000034E6                 jz      loc_36AD
.text:00000000000034EC
.text:00000000000034EC loc_34EC:                               ; CODE XREF: quotearg_buffer_restyled+FC7↓j
.text:00000000000034EC                                         ; quotearg_buffer_restyled+FE6↓j
.text:00000000000034EC                 test    ebx, ebx
.text:00000000000034EE                 mov     rbx, [rsp+0E8h+var_88]
.text:00000000000034F3                 setnz   [rsp+0E8h+var_D9]
.text:00000000000034F8                 xor     r12d, r12d
.text:00000000000034FB                 mov     rdi, rbx        ; s
.text:00000000000034FE                 call    _strlen
.text:0000000000003503                 mov     [rsp+0E8h+s2], rbx
.text:0000000000003508                 mov     [rsp+0E8h+n], rax
.text:000000000000350D                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003512                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003517                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003520                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003525                 jmp     loc_27C3
.text:000000000000352A ; ---------------------------------------------------------------------------
.text:000000000000352A
.text:000000000000352A loc_352A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000352A                                         ; DATA XREF: .rodata:jpt_2781↓o
.text:000000000000352A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 0
.text:000000000000352F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003534                 xor     r12d, r12d
.text:0000000000003537                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003540                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000003545                 xor     r15d, r15d
.text:0000000000003548                 mov     [rsp+0E8h+var_DB], 0
.text:000000000000354D                 mov     [rsp+0E8h+n], 0
.text:0000000000003556                 mov     [rsp+0E8h+s2], 0
.text:000000000000355F                 jmp     loc_27C3
.text:0000000000003564 ; ---------------------------------------------------------------------------
.text:0000000000003564
.text:0000000000003564 loc_3564:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003564                                         ; DATA XREF: .rodata:jpt_2781↓o
.text:0000000000003564                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 3
.text:0000000000003569                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000356E                 xor     r12d, r12d
.text:0000000000003571                 mov     [rsp+0E8h+var_98], 0
.text:000000000000357A                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000357F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003584                 jmp     loc_27A3
.text:0000000000003589 ; ---------------------------------------------------------------------------
.text:0000000000003589
.text:0000000000003589 loc_3589:                               ; CODE XREF: quotearg_buffer_restyled+665↑j
.text:0000000000003589                 cmp     r13, r15
.text:000000000000358C                 jbe     short loc_3593
.text:000000000000358E                 mov     byte ptr [r14+r15], 30h ; '0'
.text:0000000000003593
.text:0000000000003593 loc_3593:                               ; CODE XREF: quotearg_buffer_restyled+E9C↑j
.text:0000000000003593                 lea     rax, [rcx+2]
.text:0000000000003597                 cmp     r13, rax
.text:000000000000359A                 jbe     short loc_35A2
.text:000000000000359C                 mov     byte ptr [r14+rcx+2], 30h ; '0'
.text:00000000000035A2
.text:00000000000035A2 loc_35A2:                               ; CODE XREF: quotearg_buffer_restyled+EAA↑j
.text:00000000000035A2                 mov     eax, r12d
.text:00000000000035A5                 lea     r15, [rcx+3]
.text:00000000000035A9                 xor     r12d, r12d
.text:00000000000035AC                 mov     ebx, 30h ; '0'
.text:00000000000035B1                 jmp     loc_2918
.text:00000000000035B1 ; ---------------------------------------------------------------------------
.text:00000000000035B6                 align 20h
.text:00000000000035C0
.text:00000000000035C0 loc_35C0:                               ; CODE XREF: quotearg_buffer_restyled+A1B↑j
.text:00000000000035C0                 movzx   ebx, [rsp+0E8h+var_D9]
.text:00000000000035C5                 mov     rbp, r11
.text:00000000000035C8                 mov     [rsp+0E8h+var_DB], bl
.text:00000000000035CC                 jmp     loc_3279
.text:00000000000035D1 ; ---------------------------------------------------------------------------
.text:00000000000035D1
.text:00000000000035D1 loc_35D1:                               ; CODE XREF: quotearg_buffer_restyled+549↑j
.text:00000000000035D1                 movzx   edx, [rsp+0E8h+var_DB]
.text:00000000000035D6                 xor     r12d, r12d
.text:00000000000035D9                 jmp     loc_30E0
.text:00000000000035DE ; ---------------------------------------------------------------------------
.text:00000000000035DE
.text:00000000000035DE loc_35DE:                               ; CODE XREF: quotearg_buffer_restyled+AF0↑j
.text:00000000000035DE                 xor     r10d, r10d
.text:00000000000035E1                 jmp     loc_319D
.text:00000000000035E6 ; ---------------------------------------------------------------------------
.text:00000000000035E6
.text:00000000000035E6 loc_35E6:                               ; CODE XREF: quotearg_buffer_restyled+CCB↑j
.text:00000000000035E6                 mov     [rsp+0E8h+var_98], 0
.text:00000000000035EF                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000035F4                 xor     r12d, r12d
.text:00000000000035F7                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000035FC                 jmp     loc_33DB
.text:0000000000003601 ; ---------------------------------------------------------------------------
.text:0000000000003601
.text:0000000000003601 loc_3601:                               ; CODE XREF: quotearg_buffer_restyled+971↑j
.text:0000000000003601                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000003606                 mov     rsi, r14
.text:0000000000003609                 mov     rcx, r13
.text:000000000000360C                 mov     rax, rbx
.text:000000000000360F                 mov     rdi, rbx
.text:0000000000003612                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000003618                 movzx   ebx, [rsp+0E8h+var_6A]
.text:000000000000361D                 mov     r9, [rsp+0E8h+var_60]
.text:0000000000003625                 cmp     rsi, r11
.text:0000000000003628                 movzx   r10d, [rsp+0E8h+var_69]
.text:000000000000362E                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000003636                 mov     r14, [rsp+0E8h+var_A8]
.text:000000000000363B                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000003640                 jnb     short loc_3668
.text:0000000000003642                 cmp     byte ptr [rcx], 0
.text:0000000000003645                 jnz     short loc_3657
.text:0000000000003647                 jmp     short loc_3668
.text:0000000000003647 ; ---------------------------------------------------------------------------
.text:0000000000003649                 align 10h
.text:0000000000003650
.text:0000000000003650 loc_3650:                               ; CODE XREF: quotearg_buffer_restyled+F73↓j
.text:0000000000003650                 cmp     byte ptr [r9+rax], 0
.text:0000000000003655                 jz      short loc_3665
.text:0000000000003657
.text:0000000000003657 loc_3657:                               ; CODE XREF: quotearg_buffer_restyled+F55↑j
.text:0000000000003657                 add     rax, 1
.text:000000000000365B                 lea     rdx, [rbp+rax+0]
.text:0000000000003660                 cmp     r11, rdx
.text:0000000000003663                 ja      short loc_3650
.text:0000000000003665
.text:0000000000003665 loc_3665:                               ; CODE XREF: quotearg_buffer_restyled+F65↑j
.text:0000000000003665                 mov     rdi, rax
.text:0000000000003668
.text:0000000000003668 loc_3668:                               ; CODE XREF: quotearg_buffer_restyled+F50↑j
.text:0000000000003668                                         ; quotearg_buffer_restyled+F57↑j
.text:0000000000003668                 movzx   edx, [rsp+0E8h+var_DB]
.text:000000000000366D                 xor     r12d, r12d
.text:0000000000003670                 jmp     loc_30D6
.text:0000000000003675 ; ---------------------------------------------------------------------------
.text:0000000000003675
.text:0000000000003675 loc_3675:                               ; CODE XREF: quotearg_buffer_restyled+967↑j
.text:0000000000003675                 mov     rdi, rbx
.text:0000000000003678                 movzx   r8d, [rsp+0E8h+var_6B]
.text:000000000000367E                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000003683                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000003689                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000003691                 xor     r12d, r12d
.text:0000000000003694                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000003699                 mov     r13, [rsp+0E8h+var_78]
.text:000000000000369E                 mov     r11, [rsp+0E8h+var_B8]
.text:00000000000036A3                 movzx   edx, [rsp+0E8h+var_DB]
.text:00000000000036A8                 jmp     loc_30D6
.text:00000000000036AD ; ---------------------------------------------------------------------------
.text:00000000000036AD
.text:00000000000036AD loc_36AD:                               ; CODE XREF: quotearg_buffer_restyled+DF6↑j
.text:00000000000036AD                 mov     rdx, [rsp+0E8h+var_80]
.text:00000000000036B2                 movzx   eax, byte ptr [rdx]
.text:00000000000036B5                 test    al, al
.text:00000000000036B7                 jz      loc_34EC
.text:00000000000036BD                 nop     dword ptr [rax]
.text:00000000000036C0
.text:00000000000036C0 loc_36C0:                               ; CODE XREF: quotearg_buffer_restyled+FE4↓j
.text:00000000000036C0                 cmp     r13, r15
.text:00000000000036C3                 jbe     short loc_36C9
.text:00000000000036C5                 mov     [r14+r15], al
.text:00000000000036C9
.text:00000000000036C9 loc_36C9:                               ; CODE XREF: quotearg_buffer_restyled+FD3↑j
.text:00000000000036C9                 add     r15, 1
.text:00000000000036CD                 movzx   eax, byte ptr [rdx+r15]
.text:00000000000036D2                 test    al, al
.text:00000000000036D4                 jnz     short loc_36C0
.text:00000000000036D6                 jmp     loc_34EC
.text:00000000000036DB ; ---------------------------------------------------------------------------
.text:00000000000036DB
.text:00000000000036DB loc_36DB:                               ; CODE XREF: quotearg_buffer_restyled+9EA↑j
.text:00000000000036DB                 mov     eax, edx
.text:00000000000036DD                 jmp     loc_2C37
.text:00000000000036E2 ; ---------------------------------------------------------------------------
.text:00000000000036E2
.text:00000000000036E2 loc_36E2:                               ; CODE XREF: quotearg_buffer_restyled+862↑j
.text:00000000000036E2                 movzx   ebx, byte ptr [rax+rcx]
.text:00000000000036E6                 cmp     bl, 3Eh ; '>'
.text:00000000000036E9                 ja      loc_2F60
.text:00000000000036EF                 mov     rax, 7000A38200000000h
.text:00000000000036F9                 bt      rax, rbx
.text:00000000000036FD                 jnb     loc_2F60
.text:0000000000003703                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003708                 jnz     loc_38F2
.text:000000000000370E                 cmp     r13, r15
.text:0000000000003711                 jbe     short loc_3718
.text:0000000000003713                 mov     byte ptr [r14+r15], 3Fh ; '?'
.text:0000000000003718
.text:0000000000003718 loc_3718:                               ; CODE XREF: quotearg_buffer_restyled+1021↑j
.text:0000000000003718                 lea     rax, [r15+1]
.text:000000000000371C                 cmp     r13, rax
.text:000000000000371F                 jbe     short loc_3727
.text:0000000000003721                 mov     byte ptr [r14+r15+1], 22h ; '"'
.text:0000000000003727
.text:0000000000003727 loc_3727:                               ; CODE XREF: quotearg_buffer_restyled+102F↑j
.text:0000000000003727                 lea     rax, [r15+2]
.text:000000000000372B                 cmp     r13, rax
.text:000000000000372E                 jbe     short loc_3736
.text:0000000000003730                 mov     byte ptr [r14+r15+2], 22h ; '"'
.text:0000000000003736
.text:0000000000003736 loc_3736:                               ; CODE XREF: quotearg_buffer_restyled+103E↑j
.text:0000000000003736                 lea     rax, [r15+3]
.text:000000000000373A                 cmp     r13, rax
.text:000000000000373D                 jbe     short loc_3745
.text:000000000000373F                 mov     byte ptr [r14+r15+3], 3Fh ; '?'
.text:0000000000003745
.text:0000000000003745 loc_3745:                               ; CODE XREF: quotearg_buffer_restyled+104D↑j
.text:0000000000003745                 add     r15, 4
.text:0000000000003749                 xor     edx, edx
.text:000000000000374B                 xor     r12d, r12d
.text:000000000000374E                 xor     eax, eax
.text:0000000000003750                 mov     rbp, rcx
.text:0000000000003753                 jmp     loc_2918
.text:0000000000003758 ; ---------------------------------------------------------------------------
.text:0000000000003758
.text:0000000000003758 loc_3758:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003758                                         ; DATA XREF: .rodata:jpt_2781↓o
.text:0000000000003758                 test    ebx, ebx        ; jumptable 00000000000121F1 case 2
.text:000000000000375A                 jz      loc_38E8
.text:0000000000003760                 lea     rax, asc_586D   ; "'"
.text:0000000000003767                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000376C                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003771                 xor     r12d, r12d
.text:0000000000003774                 mov     [rsp+0E8h+var_98], 0
.text:000000000000377D                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000003782                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000003787                 mov     [rsp+0E8h+n], 1
.text:0000000000003790                 xor     r15d, r15d
.text:0000000000003793                 mov     [rsp+0E8h+s2], rax
.text:0000000000003798                 jmp     loc_27C3
.text:0000000000003798 ; ---------------------------------------------------------------------------
.text:000000000000379D                 align 20h
.text:00000000000037A0
.text:00000000000037A0 loc_37A0:                               ; CODE XREF: quotearg_buffer_restyled+745↑j
.text:00000000000037A0                                         ; quotearg_buffer_restyled+805↑j ...
.text:00000000000037A0                 mov     rbp, r11
.text:00000000000037A3                 movzx   eax, [rsp+0E8h+var_D9]
.text:00000000000037A8                 jmp     loc_3279
.text:00000000000037AD ; ---------------------------------------------------------------------------
.text:00000000000037AD
.text:00000000000037AD loc_37AD:                               ; CODE XREF: quotearg_buffer_restyled+CC2↑j
.text:00000000000037AD                 lea     rax, unk_586B
.text:00000000000037B4                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000037B9                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000037BE                 xor     r12d, r12d
.text:00000000000037C1                 mov     [rsp+0E8h+var_98], 0
.text:00000000000037CA                 mov     [rsp+0E8h+var_D9], 1
.text:00000000000037CF                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000037D4                 mov     [rsp+0E8h+n], 1
.text:00000000000037DD                 xor     r15d, r15d
.text:00000000000037E0                 mov     [rsp+0E8h+s2], rax
.text:00000000000037E5                 jmp     loc_27C3
.text:00000000000037EA ; ---------------------------------------------------------------------------
.text:00000000000037EA
.text:00000000000037EA loc_37EA:                               ; CODE XREF: quotearg_buffer_restyled+797↑j
.text:00000000000037EA                 mov     eax, edx
.text:00000000000037EC
.text:00000000000037EC loc_37EC:                               ; CODE XREF: quotearg_buffer_restyled+78C↑j
.text:00000000000037EC                                         ; quotearg_buffer_restyled+11E1↓j
.text:00000000000037EC                 mov     rbx, [rsp+0E8h+s2]
.text:00000000000037F1                 test    rbx, rbx
.text:00000000000037F4                 jz      short loc_3822
.text:00000000000037F6                 test    al, al
.text:00000000000037F8                 jz      short loc_3822
.text:00000000000037FA                 movzx   ecx, byte ptr [rbx]
.text:00000000000037FD                 mov     rax, rbx
.text:0000000000003800                 test    cl, cl
.text:0000000000003802                 jz      short loc_3822
.text:0000000000003804                 mov     rdx, r15
.text:0000000000003807                 sub     rax, r15
.text:000000000000380A
.text:000000000000380A loc_380A:                               ; CODE XREF: quotearg_buffer_restyled+112D↓j
.text:000000000000380A                 cmp     r13, rdx
.text:000000000000380D                 jbe     short loc_3813
.text:000000000000380F                 mov     [r14+rdx], cl
.text:0000000000003813
.text:0000000000003813 loc_3813:                               ; CODE XREF: quotearg_buffer_restyled+111D↑j
.text:0000000000003813                 add     rdx, 1
.text:0000000000003817                 movzx   ecx, byte ptr [rax+rdx]
.text:000000000000381B                 test    cl, cl
.text:000000000000381D                 jnz     short loc_380A
.text:000000000000381F                 mov     r15, rdx
.text:0000000000003822
.text:0000000000003822 loc_3822:                               ; CODE XREF: quotearg_buffer_restyled+1104↑j
.text:0000000000003822                                         ; quotearg_buffer_restyled+1108↑j ...
.text:0000000000003822                 cmp     r13, r15
.text:0000000000003825                 jbe     loc_32C9
.text:000000000000382B                 mov     byte ptr [r14+r15], 0
.text:0000000000003830                 jmp     loc_32C9
.text:0000000000003835 ; ---------------------------------------------------------------------------
.text:0000000000003835
.text:0000000000003835 loc_3835:                               ; CODE XREF: quotearg_buffer_restyled+1C2↑j
.text:0000000000003835                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000383A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000383F                 mov     rbp, r11
.text:0000000000003842                 setz    al
.text:0000000000003845                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000003849                 jmp     loc_3279
.text:000000000000384E ; ---------------------------------------------------------------------------
.text:000000000000384E
.text:000000000000384E loc_384E:                               ; CODE XREF: quotearg_buffer_restyled+DC0↑j
.text:000000000000384E                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000003852                 mov     rdi, rcx
.text:0000000000003855                 call    gettext_quote
.text:000000000000385A                 mov     [rsp+0E8h+var_80], rax
.text:000000000000385F                 jmp     loc_34B6
.text:0000000000003864 ; ---------------------------------------------------------------------------
.text:0000000000003864
.text:0000000000003864 loc_3864:                               ; CODE XREF: quotearg_buffer_restyled+DEB↑j
.text:0000000000003864                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000003868                 mov     rdi, rcx
.text:000000000000386B                 call    gettext_quote
.text:0000000000003870                 mov     [rsp+0E8h+var_88], rax
.text:0000000000003875                 jmp     loc_34E1
.text:000000000000387A ; ---------------------------------------------------------------------------
.text:000000000000387A
.text:000000000000387A loc_387A:                               ; CODE XREF: quotearg_buffer_restyled+5F0↑j
.text:000000000000387A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000387F                 mov     rbp, r11
.text:0000000000003882                 mov     eax, edx
.text:0000000000003884                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000003888                 jmp     loc_3279
.text:000000000000388D ; ---------------------------------------------------------------------------
.text:000000000000388D
.text:000000000000388D loc_388D:                               ; CODE XREF: quotearg_buffer_restyled+7A2↑j
.text:000000000000388D                 sub     rsp, 8
.text:0000000000003891                 mov     r8d, 5
.text:0000000000003897                 mov     rcx, r11
.text:000000000000389A                 push    [rsp+0F0h+var_88]
.text:000000000000389E                 push    [rsp+0F8h+var_80]
.text:00000000000038A2                 mov     rdi, r14
.text:00000000000038A5                 push    [rsp+100h+var_C8]
.text:00000000000038A9                 mov     r9d, [rsp+108h+var_70]
.text:00000000000038B1                 mov     rdx, [rsp+108h+s]
.text:00000000000038B6                 mov     rsi, [rsp+108h+var_98]
.text:00000000000038BB                 call    quotearg_buffer_restyled
.text:00000000000038C0                 add     rsp, 20h
.text:00000000000038C4                 mov     r15, rax
.text:00000000000038C7                 jmp     loc_32C9
.text:00000000000038CC ; ---------------------------------------------------------------------------
.text:00000000000038CC
.text:00000000000038CC loc_38CC:                               ; CODE XREF: quotearg_buffer_restyled+7B9↑j
.text:00000000000038CC                 movzx   eax, [rsp+0E8h+var_6C]
.text:00000000000038D1                 jmp     loc_37EC
.text:00000000000038D6 ; ---------------------------------------------------------------------------
.text:00000000000038D6
.text:00000000000038D6 loc_38D6:                               ; CODE XREF: quotearg_buffer_restyled+77F↑j
.text:00000000000038D6                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000038DE                 jmp     loc_3279
.text:00000000000038E3 ; ---------------------------------------------------------------------------
.text:00000000000038E3
.text:00000000000038E3 loc_38E3:                               ; CODE XREF: quotearg_buffer_restyled+BED↑j
.text:00000000000038E3                 call    ___stack_chk_fail
.text:00000000000038E8 ; ---------------------------------------------------------------------------
.text:00000000000038E8
.text:00000000000038E8 loc_38E8:                               ; CODE XREF: quotearg_buffer_restyled+106A↑j
.text:00000000000038E8                 mov     [rsp+0E8h+var_DB], 0
.text:00000000000038ED                 jmp     loc_3361
.text:00000000000038F2 ; ---------------------------------------------------------------------------
.text:00000000000038F2
.text:00000000000038F2 loc_38F2:                               ; CODE XREF: quotearg_buffer_restyled+1018↑j
.text:00000000000038F2                 mov     rbp, r11
.text:00000000000038F5                 jmp     loc_3290
.text:00000000000038FA ; ---------------------------------------------------------------------------
.text:00000000000038FA
.text:00000000000038FA loc_38FA:                               ; CODE XREF: quotearg_buffer_restyled+C74↑j
.text:00000000000038FA                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000038FF                 xor     eax, eax
.text:0000000000003901                 xor     r12d, r12d
.text:0000000000003904                 mov     [rsp+0E8h+var_98], 0
.text:000000000000390D                 jmp     loc_2EB4
.text:0000000000003912 ; ---------------------------------------------------------------------------
.text:0000000000003912
.text:0000000000003912 loc_3912:                               ; CODE XREF: quotearg_buffer_restyled+C30↑j
.text:0000000000003912                 mov     rdx, r13
.text:0000000000003915                 mov     r13, [rsp+0E8h+var_98]
.text:000000000000391A                 jmp     loc_2F12
.text:000000000000391F ; ---------------------------------------------------------------------------
.text:000000000000391F
.text:000000000000391F def_2781:                               ; CODE XREF: quotearg_buffer_restyled+7A↑j
.text:000000000000391F                 call    _abort          ; jumptable 00000000000121F1 default case
.text:000000000000391F ; } // starts at 26F0
.text:000000000000391F quotearg_buffer_restyled endp
.text:000000000000391F
.text:000000000000391F ; ---------------------------------------------------------------------------
.text:0000000000003924                 align 10h
.text:0000000000003930
.text:0000000000003930 ; =============== S U B R O U T I N E =======================================
.text:0000000000003930
.text:0000000000003930
.text:0000000000003930 quotearg_n_options proc near            ; CODE XREF: quotearg_n+E↓j
.text:0000000000003930                                         ; quotearg_n_mem+7↓j ...
.text:0000000000003930
.text:0000000000003930 var_50          = qword ptr -50h
.text:0000000000003930 var_48          = qword ptr -48h
.text:0000000000003930 var_40          = dword ptr -40h
.text:0000000000003930 var_3C          = dword ptr -3Ch
.text:0000000000003930
.text:0000000000003930 ; __unwind {
.text:0000000000003930                 push    r15
.text:0000000000003932                 push    r14
.text:0000000000003934                 movsxd  r15, edi
.text:0000000000003937                 push    r13
.text:0000000000003939                 push    r12
.text:000000000000393B                 mov     r14, rdx
.text:000000000000393E                 push    rbp
.text:000000000000393F                 push    rbx
.text:0000000000003940                 mov     rbp, rcx
.text:0000000000003943                 sub     rsp, 28h
.text:0000000000003947                 mov     [rsp+58h+var_50], rsi
.text:000000000000394C                 call    ___errno_location
.text:0000000000003951                 mov     r13, rax
.text:0000000000003954                 mov     eax, [rax]
.text:0000000000003956                 test    r15d, r15d
.text:0000000000003959                 mov     rbx, cs:slotvec
.text:0000000000003960                 mov     [rsp+58h+var_40], eax
.text:0000000000003964                 js      loc_3AD1
.text:000000000000396A                 cmp     cs:nslots, r15d
.text:0000000000003971                 jg      short loc_39D5
.text:0000000000003973                 cmp     r15d, 7FFFFFFFh
.text:000000000000397A                 jz      loc_3AD6
.text:0000000000003980                 lea     r12d, [r15+1]
.text:0000000000003984                 lea     rax, slotvec0
.text:000000000000398B                 movsxd  rsi, r12d
.text:000000000000398E                 shl     rsi, 4
.text:0000000000003992                 cmp     rbx, rax
.text:0000000000003995                 jz      loc_3AB0
.text:000000000000399B                 mov     rdi, rbx
.text:000000000000399E                 call    xrealloc
.text:00000000000039A3                 mov     rbx, rax
.text:00000000000039A6                 mov     cs:slotvec, rax
.text:00000000000039AD
.text:00000000000039AD loc_39AD:                               ; CODE XREF: quotearg_n_options+19C↓j
.text:00000000000039AD                 movsxd  rdi, cs:nslots
.text:00000000000039B4                 mov     edx, r12d
.text:00000000000039B7                 xor     esi, esi        ; c
.text:00000000000039B9                 sub     edx, edi
.text:00000000000039BB                 shl     rdi, 4
.text:00000000000039BF                 movsxd  rdx, edx
.text:00000000000039C2                 add     rdi, rbx        ; s
.text:00000000000039C5                 shl     rdx, 4          ; n
.text:00000000000039C9                 call    _memset
.text:00000000000039CE                 mov     cs:nslots, r12d
.text:00000000000039D5
.text:00000000000039D5 loc_39D5:                               ; CODE XREF: quotearg_n_options+41↑j
.text:00000000000039D5                 mov     eax, [rbp+4]
.text:00000000000039D8                 shl     r15, 4
.text:00000000000039DC                 sub     rsp, 8
.text:00000000000039E0                 add     rbx, r15
.text:00000000000039E3                 lea     r15, [rbp+8]
.text:00000000000039E7                 mov     r8d, [rbp+0]
.text:00000000000039EB                 mov     r11, [rbx]
.text:00000000000039EE                 mov     r12, [rbx+8]
.text:00000000000039F2                 mov     rcx, r14
.text:00000000000039F5                 or      eax, 1
.text:00000000000039F8                 mov     [rsp+60h+var_3C], eax
.text:00000000000039FC                 push    qword ptr [rbp+30h]
.text:00000000000039FF                 mov     r9d, eax
.text:0000000000003A02                 push    qword ptr [rbp+28h]
.text:0000000000003A05                 push    r15
.text:0000000000003A07                 mov     rsi, r11
.text:0000000000003A0A                 mov     rdx, [rsp+78h+var_50]
.text:0000000000003A0F                 mov     rdi, r12
.text:0000000000003A12                 mov     [rsp+78h+var_48], r11
.text:0000000000003A17                 call    quotearg_buffer_restyled
.text:0000000000003A1C                 add     rsp, 20h
.text:0000000000003A20                 mov     r11, [rsp+58h+var_48]
.text:0000000000003A25                 cmp     r11, rax
.text:0000000000003A28                 ja      short loc_3A91
.text:0000000000003A2A                 lea     rsi, [rax+1]
.text:0000000000003A2E                 lea     rax, slot0
.text:0000000000003A35                 cmp     r12, rax
.text:0000000000003A38                 mov     [rbx], rsi
.text:0000000000003A3B                 jz      short loc_3A4F
.text:0000000000003A3D                 mov     rdi, r12        ; ptr
.text:0000000000003A40                 mov     [rsp+58h+var_48], rsi
.text:0000000000003A45                 call    _free
.text:0000000000003A4A                 mov     rsi, [rsp+58h+var_48]
.text:0000000000003A4F
.text:0000000000003A4F loc_3A4F:                               ; CODE XREF: quotearg_n_options+10B↑j
.text:0000000000003A4F                 mov     rdi, rsi
.text:0000000000003A52                 mov     [rsp+58h+var_48], rsi
.text:0000000000003A57                 call    xmalloc
.text:0000000000003A5C                 sub     rsp, 8
.text:0000000000003A60                 mov     [rbx+8], rax
.text:0000000000003A64                 mov     r8d, [rbp+0]
.text:0000000000003A68                 push    qword ptr [rbp+30h]
.text:0000000000003A6B                 push    qword ptr [rbp+28h]
.text:0000000000003A6E                 mov     rcx, r14
.text:0000000000003A71                 push    r15
.text:0000000000003A73                 mov     r9d, [rsp+78h+var_3C]
.text:0000000000003A78                 mov     rdi, rax
.text:0000000000003A7B                 mov     rdx, [rsp+78h+var_50]
.text:0000000000003A80                 mov     rsi, [rsp+78h+var_48]
.text:0000000000003A85                 mov     r12, rax
.text:0000000000003A88                 call    quotearg_buffer_restyled
.text:0000000000003A8D                 add     rsp, 20h
.text:0000000000003A91
.text:0000000000003A91 loc_3A91:                               ; CODE XREF: quotearg_n_options+F8↑j
.text:0000000000003A91                 mov     eax, [rsp+58h+var_40]
.text:0000000000003A95                 mov     [r13+0], eax
.text:0000000000003A99                 add     rsp, 28h
.text:0000000000003A9D                 mov     rax, r12
.text:0000000000003AA0                 pop     rbx
.text:0000000000003AA1                 pop     rbp
.text:0000000000003AA2                 pop     r12
.text:0000000000003AA4                 pop     r13
.text:0000000000003AA6                 pop     r14
.text:0000000000003AA8                 pop     r15
.text:0000000000003AAA                 retn
.text:0000000000003AAA ; ---------------------------------------------------------------------------
.text:0000000000003AAB                 align 10h
.text:0000000000003AB0
.text:0000000000003AB0 loc_3AB0:                               ; CODE XREF: quotearg_n_options+65↑j
.text:0000000000003AB0                 xor     edi, edi
.text:0000000000003AB2                 call    xrealloc
.text:0000000000003AB7                 movdqa  xmm0, xmmword ptr cs:slotvec0
.text:0000000000003ABF                 mov     rbx, rax
.text:0000000000003AC2                 mov     cs:slotvec, rax
.text:0000000000003AC9                 movups  xmmword ptr [rax], xmm0
.text:0000000000003ACC                 jmp     loc_39AD
.text:0000000000003AD1 ; ---------------------------------------------------------------------------
.text:0000000000003AD1
.text:0000000000003AD1 loc_3AD1:                               ; CODE XREF: quotearg_n_options+34↑j
.text:0000000000003AD1                 call    _abort
.text:0000000000003AD6 ; ---------------------------------------------------------------------------
.text:0000000000003AD6
.text:0000000000003AD6 loc_3AD6:                               ; CODE XREF: quotearg_n_options+4A↑j
.text:0000000000003AD6                 call    xalloc_die
.text:0000000000003AD6 ; } // starts at 3930
.text:0000000000003AD6 quotearg_n_options endp
.text:0000000000003AD6
.text:0000000000003AD6 ; ---------------------------------------------------------------------------
.text:0000000000003ADB                 align 20h
.text:0000000000003AE0
.text:0000000000003AE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003AE0
.text:0000000000003AE0 ; Attributes: info_from_lumina
.text:0000000000003AE0
.text:0000000000003AE0 ; quoting_options *__fastcall clone_quoting_options(quoting_options *o)
.text:0000000000003AE0                 public clone_quoting_options
.text:0000000000003AE0 clone_quoting_options proc near
.text:0000000000003AE0 ; __unwind {
.text:0000000000003AE0                 push    r12
.text:0000000000003AE2                 push    rbp
.text:0000000000003AE3                 push    rbx
.text:0000000000003AE4                 mov     rbx, rdi
.text:0000000000003AE7                 call    ___errno_location
.text:0000000000003AEC                 mov     r12d, [rax]
.text:0000000000003AEF                 mov     rbp, rax
.text:0000000000003AF2                 lea     rax, default_quoting_options
.text:0000000000003AF9                 test    rbx, rbx
.text:0000000000003AFC                 mov     esi, 38h ; '8'  ; n
.text:0000000000003B01                 cmovz   rbx, rax
.text:0000000000003B05                 mov     rdi, rbx        ; src
.text:0000000000003B08                 call    xmemdup
.text:0000000000003B0D                 mov     [rbp+0], r12d
.text:0000000000003B11                 pop     rbx
.text:0000000000003B12                 pop     rbp
.text:0000000000003B13                 pop     r12
.text:0000000000003B15                 retn
.text:0000000000003B15 ; } // starts at 3AE0
.text:0000000000003B15 clone_quoting_options endp
.text:0000000000003B15
.text:0000000000003B15 ; ---------------------------------------------------------------------------
.text:0000000000003B16                 align 20h
.text:0000000000003B20
.text:0000000000003B20 ; =============== S U B R O U T I N E =======================================
.text:0000000000003B20
.text:0000000000003B20
.text:0000000000003B20                 public get_quoting_style
.text:0000000000003B20 get_quoting_style proc near
.text:0000000000003B20 ; __unwind {
.text:0000000000003B20                 lea     rax, default_quoting_options
.text:0000000000003B27                 test    rdi, rdi
.text:0000000000003B2A                 cmovz   rdi, rax
.text:0000000000003B2E                 mov     eax, [rdi]
.text:0000000000003B30                 retn
.text:0000000000003B30 ; } // starts at 3B20
.text:0000000000003B30 get_quoting_style endp
.text:0000000000003B30
.text:0000000000003B30 ; ---------------------------------------------------------------------------
.text:0000000000003B31                 align 20h
.text:0000000000003B40
.text:0000000000003B40 ; =============== S U B R O U T I N E =======================================
.text:0000000000003B40
.text:0000000000003B40
.text:0000000000003B40                 public set_quoting_style
.text:0000000000003B40 set_quoting_style proc near
.text:0000000000003B40 ; __unwind {
.text:0000000000003B40                 lea     rax, default_quoting_options
.text:0000000000003B47                 test    rdi, rdi
.text:0000000000003B4A                 cmovz   rdi, rax
.text:0000000000003B4E                 mov     [rdi], esi
.text:0000000000003B50                 retn
.text:0000000000003B50 ; } // starts at 3B40
.text:0000000000003B50 set_quoting_style endp
.text:0000000000003B50
.text:0000000000003B50 ; ---------------------------------------------------------------------------
.text:0000000000003B51                 align 20h
.text:0000000000003B60
.text:0000000000003B60 ; =============== S U B R O U T I N E =======================================
.text:0000000000003B60
.text:0000000000003B60 ; Attributes: info_from_lumina
.text:0000000000003B60
.text:0000000000003B60 ; int __fastcall set_char_quoting(quoting_options *o, char c, int i)
.text:0000000000003B60                 public set_char_quoting
.text:0000000000003B60 set_char_quoting proc near
.text:0000000000003B60 ; __unwind {
.text:0000000000003B60                 lea     rax, default_quoting_options
.text:0000000000003B67                 test    rdi, rdi
.text:0000000000003B6A                 mov     ecx, esi
.text:0000000000003B6C                 cmovz   rdi, rax
.text:0000000000003B70                 mov     eax, esi
.text:0000000000003B72                 and     ecx, 1Fh
.text:0000000000003B75                 shr     al, 5
.text:0000000000003B78                 movzx   eax, al
.text:0000000000003B7B                 lea     rdi, [rdi+rax*4+8]
.text:0000000000003B80                 mov     esi, [rdi]
.text:0000000000003B82                 mov     eax, esi
.text:0000000000003B84                 shr     eax, cl
.text:0000000000003B86                 xor     edx, eax
.text:0000000000003B88                 and     eax, 1
.text:0000000000003B8B                 and     edx, 1
.text:0000000000003B8E                 shl     edx, cl
.text:0000000000003B90                 xor     edx, esi
.text:0000000000003B92                 mov     [rdi], edx
.text:0000000000003B94                 retn
.text:0000000000003B94 ; } // starts at 3B60
.text:0000000000003B94 set_char_quoting endp
.text:0000000000003B94
.text:0000000000003B94 ; ---------------------------------------------------------------------------
.text:0000000000003B95                 align 20h
.text:0000000000003BA0
.text:0000000000003BA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003BA0
.text:0000000000003BA0
.text:0000000000003BA0                 public set_quoting_flags
.text:0000000000003BA0 set_quoting_flags proc near
.text:0000000000003BA0 ; __unwind {
.text:0000000000003BA0                 lea     rax, default_quoting_options
.text:0000000000003BA7                 test    rdi, rdi
.text:0000000000003BAA                 cmovz   rdi, rax
.text:0000000000003BAE                 mov     eax, [rdi+4]
.text:0000000000003BB1                 mov     [rdi+4], esi
.text:0000000000003BB4                 retn
.text:0000000000003BB4 ; } // starts at 3BA0
.text:0000000000003BB4 set_quoting_flags endp
.text:0000000000003BB4
.text:0000000000003BB4 ; ---------------------------------------------------------------------------
.text:0000000000003BB5                 align 20h
.text:0000000000003BC0
.text:0000000000003BC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003BC0
.text:0000000000003BC0 ; Attributes: info_from_lumina
.text:0000000000003BC0
.text:0000000000003BC0 ; void __fastcall set_custom_quoting(quoting_options *o, const char *left_quote, const char *right_quote)
.text:0000000000003BC0                 public set_custom_quoting
.text:0000000000003BC0 set_custom_quoting proc near
.text:0000000000003BC0 ; __unwind {
.text:0000000000003BC0                 lea     rax, default_quoting_options
.text:0000000000003BC7                 test    rdi, rdi
.text:0000000000003BCA                 cmovz   rdi, rax
.text:0000000000003BCE                 test    rsi, rsi
.text:0000000000003BD1                 mov     dword ptr [rdi], 0Ah
.text:0000000000003BD7                 jz      short loc_3BE7
.text:0000000000003BD9                 test    rdx, rdx
.text:0000000000003BDC                 jz      short loc_3BE7
.text:0000000000003BDE                 mov     [rdi+28h], rsi
.text:0000000000003BE2                 mov     [rdi+30h], rdx
.text:0000000000003BE6                 retn
.text:0000000000003BE7 ; ---------------------------------------------------------------------------
.text:0000000000003BE7
.text:0000000000003BE7 loc_3BE7:                               ; CODE XREF: set_custom_quoting+17↑j
.text:0000000000003BE7                                         ; set_custom_quoting+1C↑j
.text:0000000000003BE7                 sub     rsp, 8
.text:0000000000003BEB                 call    _abort
.text:0000000000003BEB ; } // starts at 3BC0
.text:0000000000003BEB set_custom_quoting endp
.text:0000000000003BEB
.text:0000000000003BF0
.text:0000000000003BF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003BF0
.text:0000000000003BF0 ; Attributes: info_from_lumina
.text:0000000000003BF0
.text:0000000000003BF0 ; size_t __fastcall quotearg_buffer(char *buffer, size_t buffersize, const char *arg, size_t argsize, const quoting_options *o)
.text:0000000000003BF0                 public quotearg_buffer
.text:0000000000003BF0 quotearg_buffer proc near
.text:0000000000003BF0
.text:0000000000003BF0 var_40          = qword ptr -40h
.text:0000000000003BF0
.text:0000000000003BF0 ; __unwind {
.text:0000000000003BF0                 push    r15
.text:0000000000003BF2                 push    r14
.text:0000000000003BF4                 lea     rax, default_quoting_options
.text:0000000000003BFB                 push    r13
.text:0000000000003BFD                 push    r12
.text:0000000000003BFF                 mov     r13, rdi
.text:0000000000003C02                 push    rbp
.text:0000000000003C03                 push    rbx
.text:0000000000003C04                 mov     rbx, r8
.text:0000000000003C07                 mov     r14, rsi
.text:0000000000003C0A                 mov     r15, rdx
.text:0000000000003C0D                 sub     rsp, 18h
.text:0000000000003C11                 test    r8, r8
.text:0000000000003C14                 cmovz   rbx, rax
.text:0000000000003C18                 mov     [rsp+48h+var_40], rcx
.text:0000000000003C1D                 call    ___errno_location
.text:0000000000003C22                 mov     r12d, [rax]
.text:0000000000003C25                 mov     rbp, rax
.text:0000000000003C28                 lea     rax, [rbx+8]
.text:0000000000003C2C                 sub     rsp, 8
.text:0000000000003C30                 mov     r9d, [rbx+4]
.text:0000000000003C34                 push    qword ptr [rbx+30h]
.text:0000000000003C37                 mov     r8d, [rbx]
.text:0000000000003C3A                 push    qword ptr [rbx+28h]
.text:0000000000003C3D                 mov     rdx, r15
.text:0000000000003C40                 push    rax
.text:0000000000003C41                 mov     rcx, [rsp+68h+var_40]
.text:0000000000003C46                 mov     rsi, r14
.text:0000000000003C49                 mov     rdi, r13
.text:0000000000003C4C                 call    quotearg_buffer_restyled
.text:0000000000003C51                 mov     [rbp+0], r12d
.text:0000000000003C55                 add     rsp, 38h
.text:0000000000003C59                 pop     rbx
.text:0000000000003C5A                 pop     rbp
.text:0000000000003C5B                 pop     r12
.text:0000000000003C5D                 pop     r13
.text:0000000000003C5F                 pop     r14
.text:0000000000003C61                 pop     r15
.text:0000000000003C63                 retn
.text:0000000000003C63 ; } // starts at 3BF0
.text:0000000000003C63 quotearg_buffer endp
.text:0000000000003C63
.text:0000000000003C63 ; ---------------------------------------------------------------------------
.text:0000000000003C64                 align 10h
.text:0000000000003C70
.text:0000000000003C70 ; =============== S U B R O U T I N E =======================================
.text:0000000000003C70
.text:0000000000003C70 ; Attributes: info_from_lumina
.text:0000000000003C70
.text:0000000000003C70 ; char *__fastcall quotearg_alloc_mem(const char *arg, size_t argsize, size_t *size, const quoting_options *o)
.text:0000000000003C70                 public quotearg_alloc_mem
.text:0000000000003C70 quotearg_alloc_mem proc near            ; CODE XREF: quotearg_alloc+5↓j
.text:0000000000003C70
.text:0000000000003C70 var_5C          = dword ptr -5Ch
.text:0000000000003C70 var_58          = qword ptr -58h
.text:0000000000003C70 var_50          = qword ptr -50h
.text:0000000000003C70 var_48          = qword ptr -48h
.text:0000000000003C70 var_40          = qword ptr -40h
.text:0000000000003C70
.text:0000000000003C70 ; __unwind {
.text:0000000000003C70                 push    r15
.text:0000000000003C72                 push    r14
.text:0000000000003C74                 lea     rax, default_quoting_options
.text:0000000000003C7B                 push    r13
.text:0000000000003C7D                 push    r12
.text:0000000000003C7F                 mov     r12, rdx
.text:0000000000003C82                 push    rbp
.text:0000000000003C83                 push    rbx
.text:0000000000003C84                 mov     rbx, rcx
.text:0000000000003C87                 mov     r14, rdi
.text:0000000000003C8A                 mov     r15, rsi
.text:0000000000003C8D                 sub     rsp, 38h
.text:0000000000003C91                 test    rcx, rcx
.text:0000000000003C94                 cmovz   rbx, rax
.text:0000000000003C98                 xor     ebp, ebp
.text:0000000000003C9A                 call    ___errno_location
.text:0000000000003C9F                 test    r12, r12
.text:0000000000003CA2                 mov     r13, rax
.text:0000000000003CA5                 mov     eax, [rax]
.text:0000000000003CA7                 setz    bpl
.text:0000000000003CAB                 or      ebp, [rbx+4]
.text:0000000000003CAE                 lea     r10, [rbx+8]
.text:0000000000003CB2                 sub     rsp, 8
.text:0000000000003CB6                 mov     r8d, [rbx]
.text:0000000000003CB9                 mov     rcx, r15
.text:0000000000003CBC                 mov     [rsp+70h+var_5C], eax
.text:0000000000003CC0                 push    qword ptr [rbx+30h]
.text:0000000000003CC3                 mov     rdx, r14
.text:0000000000003CC6                 push    qword ptr [rbx+28h]
.text:0000000000003CC9                 push    r10
.text:0000000000003CCB                 xor     esi, esi
.text:0000000000003CCD                 mov     r9d, ebp
.text:0000000000003CD0                 xor     edi, edi
.text:0000000000003CD2                 mov     [rsp+88h+var_48], r10
.text:0000000000003CD7                 call    quotearg_buffer_restyled
.text:0000000000003CDC                 lea     rsi, [rax+1]
.text:0000000000003CE0                 mov     [rsp+88h+var_40], rax
.text:0000000000003CE5                 add     rsp, 20h
.text:0000000000003CE9                 mov     rdi, rsi
.text:0000000000003CEC                 mov     [rsp+68h+var_50], rsi
.text:0000000000003CF1                 call    xmalloc
.text:0000000000003CF6                 mov     [rsp+68h+var_58], rax
.text:0000000000003CFB                 sub     rsp, 8
.text:0000000000003CFF                 push    qword ptr [rbx+30h]
.text:0000000000003D02                 push    qword ptr [rbx+28h]
.text:0000000000003D05                 mov     r10, [rsp+80h+var_48]
.text:0000000000003D0A                 mov     r9d, ebp
.text:0000000000003D0D                 mov     r8d, [rbx]
.text:0000000000003D10                 mov     rcx, r15
.text:0000000000003D13                 mov     rdx, r14
.text:0000000000003D16                 mov     rdi, rax
.text:0000000000003D19                 push    r10
.text:0000000000003D1B                 mov     rsi, [rsp+88h+var_50]
.text:0000000000003D20                 call    quotearg_buffer_restyled
.text:0000000000003D25                 mov     eax, [rsp+88h+var_5C]
.text:0000000000003D29                 add     rsp, 20h
.text:0000000000003D2D                 test    r12, r12
.text:0000000000003D30                 mov     [r13+0], eax
.text:0000000000003D34                 jz      short loc_3D3F
.text:0000000000003D36                 mov     r11, [rsp+68h+var_40]
.text:0000000000003D3B                 mov     [r12], r11
.text:0000000000003D3F
.text:0000000000003D3F loc_3D3F:                               ; CODE XREF: quotearg_alloc_mem+C4↑j
.text:0000000000003D3F                 mov     rax, [rsp+68h+var_58]
.text:0000000000003D44                 add     rsp, 38h
.text:0000000000003D48                 pop     rbx
.text:0000000000003D49                 pop     rbp
.text:0000000000003D4A                 pop     r12
.text:0000000000003D4C                 pop     r13
.text:0000000000003D4E                 pop     r14
.text:0000000000003D50                 pop     r15
.text:0000000000003D52                 retn
.text:0000000000003D52 ; } // starts at 3C70
.text:0000000000003D52 quotearg_alloc_mem endp
.text:0000000000003D52
.text:0000000000003D52 ; ---------------------------------------------------------------------------
.text:0000000000003D53                 align 20h
.text:0000000000003D60
.text:0000000000003D60 ; =============== S U B R O U T I N E =======================================
.text:0000000000003D60
.text:0000000000003D60
.text:0000000000003D60                 public quotearg_alloc
.text:0000000000003D60 quotearg_alloc  proc near
.text:0000000000003D60 ; __unwind {
.text:0000000000003D60                 mov     rcx, rdx
.text:0000000000003D63                 xor     edx, edx
.text:0000000000003D65                 jmp     quotearg_alloc_mem
.text:0000000000003D65 ; } // starts at 3D60
.text:0000000000003D65 quotearg_alloc  endp
.text:0000000000003D65
.text:0000000000003D65 ; ---------------------------------------------------------------------------
.text:0000000000003D6A                 align 10h
.text:0000000000003D70
.text:0000000000003D70 ; =============== S U B R O U T I N E =======================================
.text:0000000000003D70
.text:0000000000003D70 ; Attributes: info_from_lumina
.text:0000000000003D70
.text:0000000000003D70 ; void __cdecl quotearg_free()
.text:0000000000003D70                 public quotearg_free
.text:0000000000003D70 quotearg_free   proc near
.text:0000000000003D70 ; __unwind {
.text:0000000000003D70                 mov     eax, cs:nslots
.text:0000000000003D76                 push    r12
.text:0000000000003D78                 mov     r12, cs:slotvec
.text:0000000000003D7F                 push    rbp
.text:0000000000003D80                 push    rbx
.text:0000000000003D81                 cmp     eax, 1
.text:0000000000003D84                 jle     short loc_3DB1
.text:0000000000003D86                 sub     eax, 2
.text:0000000000003D89                 lea     rbx, [r12+18h]
.text:0000000000003D8E                 shl     rax, 4
.text:0000000000003D92                 lea     rbp, [r12+rax+28h]
.text:0000000000003D97                 nop     word ptr [rax+rax+00000000h]
.text:0000000000003DA0
.text:0000000000003DA0 loc_3DA0:                               ; CODE XREF: quotearg_free+3F↓j
.text:0000000000003DA0                 mov     rdi, [rbx]      ; ptr
.text:0000000000003DA3                 add     rbx, 10h
.text:0000000000003DA7                 call    _free
.text:0000000000003DAC                 cmp     rbx, rbp
.text:0000000000003DAF                 jnz     short loc_3DA0
.text:0000000000003DB1
.text:0000000000003DB1 loc_3DB1:                               ; CODE XREF: quotearg_free+14↑j
.text:0000000000003DB1                 mov     rdi, [r12+8]    ; ptr
.text:0000000000003DB6                 lea     rbx, slot0
.text:0000000000003DBD                 cmp     rdi, rbx
.text:0000000000003DC0                 jz      short loc_3DD9
.text:0000000000003DC2                 call    _free
.text:0000000000003DC7                 mov     cs:slotvec0, 100h
.text:0000000000003DD2                 mov     cs:off_208078, rbx
.text:0000000000003DD9
.text:0000000000003DD9 loc_3DD9:                               ; CODE XREF: quotearg_free+50↑j
.text:0000000000003DD9                 lea     rbx, slotvec0
.text:0000000000003DE0                 cmp     r12, rbx
.text:0000000000003DE3                 jz      short loc_3DF4
.text:0000000000003DE5                 mov     rdi, r12        ; ptr
.text:0000000000003DE8                 call    _free
.text:0000000000003DED                 mov     cs:slotvec, rbx
.text:0000000000003DF4
.text:0000000000003DF4 loc_3DF4:                               ; CODE XREF: quotearg_free+73↑j
.text:0000000000003DF4                 pop     rbx
.text:0000000000003DF5                 mov     cs:nslots, 1
.text:0000000000003DFF                 pop     rbp
.text:0000000000003E00                 pop     r12
.text:0000000000003E02                 retn
.text:0000000000003E02 ; } // starts at 3D70
.text:0000000000003E02 quotearg_free   endp
.text:0000000000003E02
.text:0000000000003E02 ; ---------------------------------------------------------------------------
.text:0000000000003E03                 align 10h
.text:0000000000003E10
.text:0000000000003E10 ; =============== S U B R O U T I N E =======================================
.text:0000000000003E10
.text:0000000000003E10
.text:0000000000003E10                 public quotearg_n
.text:0000000000003E10 quotearg_n      proc near
.text:0000000000003E10 ; __unwind {
.text:0000000000003E10                 lea     rcx, default_quoting_options
.text:0000000000003E17                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003E1E                 jmp     quotearg_n_options
.text:0000000000003E1E ; } // starts at 3E10
.text:0000000000003E1E quotearg_n      endp
.text:0000000000003E1E
.text:0000000000003E1E ; ---------------------------------------------------------------------------
.text:0000000000003E23                 align 10h
.text:0000000000003E30
.text:0000000000003E30 ; =============== S U B R O U T I N E =======================================
.text:0000000000003E30
.text:0000000000003E30
.text:0000000000003E30                 public quotearg_n_mem
.text:0000000000003E30 quotearg_n_mem  proc near
.text:0000000000003E30 ; __unwind {
.text:0000000000003E30                 lea     rcx, default_quoting_options
.text:0000000000003E37                 jmp     quotearg_n_options
.text:0000000000003E37 ; } // starts at 3E30
.text:0000000000003E37 quotearg_n_mem  endp
.text:0000000000003E37
.text:0000000000003E37 ; ---------------------------------------------------------------------------
.text:0000000000003E3C                 align 20h
.text:0000000000003E40
.text:0000000000003E40 ; =============== S U B R O U T I N E =======================================
.text:0000000000003E40
.text:0000000000003E40
.text:0000000000003E40                 public quotearg
.text:0000000000003E40 quotearg        proc near
.text:0000000000003E40 ; __unwind {
.text:0000000000003E40                 lea     rcx, default_quoting_options
.text:0000000000003E47                 mov     rsi, rdi
.text:0000000000003E4A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003E51                 xor     edi, edi
.text:0000000000003E53                 jmp     quotearg_n_options
.text:0000000000003E53 ; } // starts at 3E40
.text:0000000000003E53 quotearg        endp
.text:0000000000003E53
.text:0000000000003E53 ; ---------------------------------------------------------------------------
.text:0000000000003E58                 align 20h
.text:0000000000003E60
.text:0000000000003E60 ; =============== S U B R O U T I N E =======================================
.text:0000000000003E60
.text:0000000000003E60
.text:0000000000003E60                 public quotearg_mem
.text:0000000000003E60 quotearg_mem    proc near
.text:0000000000003E60 ; __unwind {
.text:0000000000003E60                 lea     rcx, default_quoting_options
.text:0000000000003E67                 mov     rdx, rsi
.text:0000000000003E6A                 mov     rsi, rdi
.text:0000000000003E6D                 xor     edi, edi
.text:0000000000003E6F                 jmp     quotearg_n_options
.text:0000000000003E6F ; } // starts at 3E60
.text:0000000000003E6F quotearg_mem    endp
.text:0000000000003E6F
.text:0000000000003E6F ; ---------------------------------------------------------------------------
.text:0000000000003E74                 align 20h
.text:0000000000003E80
.text:0000000000003E80 ; =============== S U B R O U T I N E =======================================
.text:0000000000003E80
.text:0000000000003E80 ; Attributes: info_from_lumina
.text:0000000000003E80
.text:0000000000003E80 ; char *__fastcall quotearg_n_style(int n, quoting_style s, const char *arg)
.text:0000000000003E80                 public quotearg_n_style
.text:0000000000003E80 quotearg_n_style proc near              ; CODE XREF: quotearg_style+7↓j
.text:0000000000003E80
.text:0000000000003E80 var_48          = dword ptr -48h
.text:0000000000003E80 var_44          = qword ptr -44h
.text:0000000000003E80 var_3C          = qword ptr -3Ch
.text:0000000000003E80 var_34          = qword ptr -34h
.text:0000000000003E80 var_2C          = qword ptr -2Ch
.text:0000000000003E80 var_24          = qword ptr -24h
.text:0000000000003E80 var_1C          = qword ptr -1Ch
.text:0000000000003E80 var_14          = dword ptr -14h
.text:0000000000003E80 var_10          = qword ptr -10h
.text:0000000000003E80
.text:0000000000003E80 ; __unwind {
.text:0000000000003E80                 sub     rsp, 48h
.text:0000000000003E84                 mov     rax, rdx
.text:0000000000003E87                 mov     rdx, fs:28h
.text:0000000000003E90                 mov     [rsp+48h+var_10], rdx
.text:0000000000003E95                 xor     edx, edx
.text:0000000000003E97                 cmp     esi, 0Ah
.text:0000000000003E9A                 jz      short loc_3F04
.text:0000000000003E9C                 mov     [rsp+48h+var_48], esi
.text:0000000000003E9F                 mov     rcx, rsp
.text:0000000000003EA2                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003EA9                 mov     rsi, rax
.text:0000000000003EAC                 mov     [rsp+48h+var_44], 0
.text:0000000000003EB5                 mov     [rsp+48h+var_3C], 0
.text:0000000000003EBE                 mov     [rsp+48h+var_34], 0
.text:0000000000003EC7                 mov     [rsp+48h+var_2C], 0
.text:0000000000003ED0                 mov     [rsp+48h+var_24], 0
.text:0000000000003ED9                 mov     [rsp+48h+var_1C], 0
.text:0000000000003EE2                 mov     [rsp+48h+var_14], 0
.text:0000000000003EEA                 call    quotearg_n_options
.text:0000000000003EEF                 mov     rcx, [rsp+48h+var_10]
.text:0000000000003EF4                 xor     rcx, fs:28h
.text:0000000000003EFD                 jnz     short loc_3F09
.text:0000000000003EFF                 add     rsp, 48h
.text:0000000000003F03                 retn
.text:0000000000003F04 ; ---------------------------------------------------------------------------
.text:0000000000003F04
.text:0000000000003F04 loc_3F04:                               ; CODE XREF: quotearg_n_style+1A↑j
.text:0000000000003F04                 call    _abort
.text:0000000000003F09 ; ---------------------------------------------------------------------------
.text:0000000000003F09
.text:0000000000003F09 loc_3F09:                               ; CODE XREF: quotearg_n_style+7D↑j
.text:0000000000003F09                 call    ___stack_chk_fail
.text:0000000000003F09 ; } // starts at 3E80
.text:0000000000003F09 quotearg_n_style endp
.text:0000000000003F09
.text:0000000000003F09 ; ---------------------------------------------------------------------------
.text:0000000000003F0E                 align 10h
.text:0000000000003F10
.text:0000000000003F10 ; =============== S U B R O U T I N E =======================================
.text:0000000000003F10
.text:0000000000003F10 ; Attributes: info_from_lumina
.text:0000000000003F10
.text:0000000000003F10 ; char *__fastcall quotearg_n_style_mem(int n, quoting_style s, const char *arg, size_t argsize)
.text:0000000000003F10                 public quotearg_n_style_mem
.text:0000000000003F10 quotearg_n_style_mem proc near          ; CODE XREF: quotearg_style_mem+A↓j
.text:0000000000003F10
.text:0000000000003F10 var_48          = dword ptr -48h
.text:0000000000003F10 var_44          = qword ptr -44h
.text:0000000000003F10 var_3C          = qword ptr -3Ch
.text:0000000000003F10 var_34          = qword ptr -34h
.text:0000000000003F10 var_2C          = qword ptr -2Ch
.text:0000000000003F10 var_24          = qword ptr -24h
.text:0000000000003F10 var_1C          = qword ptr -1Ch
.text:0000000000003F10 var_14          = dword ptr -14h
.text:0000000000003F10 var_10          = qword ptr -10h
.text:0000000000003F10
.text:0000000000003F10 ; __unwind {
.text:0000000000003F10                 sub     rsp, 48h
.text:0000000000003F14                 mov     rax, rdx
.text:0000000000003F17                 mov     rdx, rcx
.text:0000000000003F1A                 mov     rcx, fs:28h
.text:0000000000003F23                 mov     [rsp+48h+var_10], rcx
.text:0000000000003F28                 xor     ecx, ecx
.text:0000000000003F2A                 cmp     esi, 0Ah
.text:0000000000003F2D                 jz      short loc_3F90
.text:0000000000003F2F                 mov     [rsp+48h+var_48], esi
.text:0000000000003F32                 mov     rcx, rsp
.text:0000000000003F35                 mov     rsi, rax
.text:0000000000003F38                 mov     [rsp+48h+var_44], 0
.text:0000000000003F41                 mov     [rsp+48h+var_3C], 0
.text:0000000000003F4A                 mov     [rsp+48h+var_34], 0
.text:0000000000003F53                 mov     [rsp+48h+var_2C], 0
.text:0000000000003F5C                 mov     [rsp+48h+var_24], 0
.text:0000000000003F65                 mov     [rsp+48h+var_1C], 0
.text:0000000000003F6E                 mov     [rsp+48h+var_14], 0
.text:0000000000003F76                 call    quotearg_n_options
.text:0000000000003F7B                 mov     rdx, [rsp+48h+var_10]
.text:0000000000003F80                 xor     rdx, fs:28h
.text:0000000000003F89                 jnz     short loc_3F95
.text:0000000000003F8B                 add     rsp, 48h
.text:0000000000003F8F                 retn
.text:0000000000003F90 ; ---------------------------------------------------------------------------
.text:0000000000003F90
.text:0000000000003F90 loc_3F90:                               ; CODE XREF: quotearg_n_style_mem+1D↑j
.text:0000000000003F90                 call    _abort
.text:0000000000003F95 ; ---------------------------------------------------------------------------
.text:0000000000003F95
.text:0000000000003F95 loc_3F95:                               ; CODE XREF: quotearg_n_style_mem+79↑j
.text:0000000000003F95                 call    ___stack_chk_fail
.text:0000000000003F95 ; } // starts at 3F10
.text:0000000000003F95 quotearg_n_style_mem endp
.text:0000000000003F95
.text:0000000000003F95 ; ---------------------------------------------------------------------------
.text:0000000000003F9A                 align 20h
.text:0000000000003FA0
.text:0000000000003FA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003FA0
.text:0000000000003FA0
.text:0000000000003FA0                 public quotearg_style
.text:0000000000003FA0 quotearg_style  proc near
.text:0000000000003FA0 ; __unwind {
.text:0000000000003FA0                 mov     rdx, rsi
.text:0000000000003FA3                 mov     esi, edi
.text:0000000000003FA5                 xor     edi, edi
.text:0000000000003FA7                 jmp     quotearg_n_style
.text:0000000000003FA7 ; } // starts at 3FA0
.text:0000000000003FA7 quotearg_style  endp
.text:0000000000003FA7
.text:0000000000003FA7 ; ---------------------------------------------------------------------------
.text:0000000000003FAC                 align 10h
.text:0000000000003FB0
.text:0000000000003FB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003FB0
.text:0000000000003FB0
.text:0000000000003FB0                 public quotearg_style_mem
.text:0000000000003FB0 quotearg_style_mem proc near
.text:0000000000003FB0 ; __unwind {
.text:0000000000003FB0                 mov     rcx, rdx
.text:0000000000003FB3                 mov     rdx, rsi
.text:0000000000003FB6                 mov     esi, edi
.text:0000000000003FB8                 xor     edi, edi
.text:0000000000003FBA                 jmp     quotearg_n_style_mem
.text:0000000000003FBA ; } // starts at 3FB0
.text:0000000000003FBA quotearg_style_mem endp
.text:0000000000003FBA
.text:0000000000003FBA ; ---------------------------------------------------------------------------
.text:0000000000003FBF                 align 20h
.text:0000000000003FC0
.text:0000000000003FC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003FC0
.text:0000000000003FC0 ; Attributes: info_from_lumina
.text:0000000000003FC0
.text:0000000000003FC0 ; char *__fastcall quotearg_char_mem(const char *arg, size_t argsize, char ch_0)
.text:0000000000003FC0                 public quotearg_char_mem
.text:0000000000003FC0 quotearg_char_mem proc near             ; CODE XREF: quotearg_char+B↓j
.text:0000000000003FC0                                         ; quotearg_colon+C↓j ...
.text:0000000000003FC0
.text:0000000000003FC0 var_48          = xmmword ptr -48h
.text:0000000000003FC0 var_38          = xmmword ptr -38h
.text:0000000000003FC0 var_28          = xmmword ptr -28h
.text:0000000000003FC0 var_18          = qword ptr -18h
.text:0000000000003FC0 var_10          = qword ptr -10h
.text:0000000000003FC0
.text:0000000000003FC0 ; __unwind {
.text:0000000000003FC0                 sub     rsp, 48h
.text:0000000000003FC4                 mov     ecx, edx
.text:0000000000003FC6                 mov     rax, fs:28h
.text:0000000000003FCF                 mov     [rsp+48h+var_10], rax
.text:0000000000003FD4                 xor     eax, eax
.text:0000000000003FD6                 mov     rax, cs:qword_2083F0
.text:0000000000003FDD                 mov     r8, rsp
.text:0000000000003FE0                 and     ecx, 1Fh
.text:0000000000003FE3                 movdqa  xmm0, cs:default_quoting_options
.text:0000000000003FEB                 mov     [rsp+48h+var_18], rax
.text:0000000000003FF0                 mov     eax, edx
.text:0000000000003FF2                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000003FF6                 shr     al, 5
.text:0000000000003FF9                 movzx   eax, al
.text:0000000000003FFC                 lea     r9, [r8+rax*4+8]
.text:0000000000004001                 movdqa  xmm0, cs:xmmword_2083D0
.text:0000000000004009                 movaps  [rsp+48h+var_38], xmm0
.text:000000000000400E                 movdqa  xmm0, cs:xmmword_2083E0
.text:0000000000004016                 movaps  [rsp+48h+var_28], xmm0
.text:000000000000401B                 mov     edx, [r9]
.text:000000000000401E                 mov     eax, edx
.text:0000000000004020                 shr     eax, cl
.text:0000000000004022                 not     eax
.text:0000000000004024                 and     eax, 1
.text:0000000000004027                 shl     eax, cl
.text:0000000000004029                 mov     rcx, r8
.text:000000000000402C                 xor     eax, edx
.text:000000000000402E                 mov     rdx, rsi
.text:0000000000004031                 mov     rsi, rdi
.text:0000000000004034                 mov     [r9], eax
.text:0000000000004037                 xor     edi, edi
.text:0000000000004039                 call    quotearg_n_options
.text:000000000000403E                 mov     rsi, [rsp+48h+var_10]
.text:0000000000004043                 xor     rsi, fs:28h
.text:000000000000404C                 jnz     short loc_4053
.text:000000000000404E                 add     rsp, 48h
.text:0000000000004052                 retn
.text:0000000000004053 ; ---------------------------------------------------------------------------
.text:0000000000004053
.text:0000000000004053 loc_4053:                               ; CODE XREF: quotearg_char_mem+8C↑j
.text:0000000000004053                 call    ___stack_chk_fail
.text:0000000000004053 ; } // starts at 3FC0
.text:0000000000004053 quotearg_char_mem endp
.text:0000000000004053
.text:0000000000004053 ; ---------------------------------------------------------------------------
.text:0000000000004058                 align 20h
.text:0000000000004060
.text:0000000000004060 ; =============== S U B R O U T I N E =======================================
.text:0000000000004060
.text:0000000000004060
.text:0000000000004060                 public quotearg_char
.text:0000000000004060 quotearg_char   proc near
.text:0000000000004060 ; __unwind {
.text:0000000000004060                 movsx   edx, sil
.text:0000000000004064                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000406B                 jmp     quotearg_char_mem
.text:000000000000406B ; } // starts at 4060
.text:000000000000406B quotearg_char   endp
.text:000000000000406B
.text:0000000000004070
.text:0000000000004070 ; =============== S U B R O U T I N E =======================================
.text:0000000000004070
.text:0000000000004070
.text:0000000000004070                 public quotearg_colon
.text:0000000000004070 quotearg_colon  proc near               ; CODE XREF: close_stdout+65↑p
.text:0000000000004070 ; __unwind {
.text:0000000000004070                 mov     edx, 3Ah ; ':'
.text:0000000000004075                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000407C                 jmp     quotearg_char_mem
.text:000000000000407C ; } // starts at 4070
.text:000000000000407C quotearg_colon  endp
.text:000000000000407C
.text:000000000000407C ; ---------------------------------------------------------------------------
.text:0000000000004081                 align 10h
.text:0000000000004090
.text:0000000000004090 ; =============== S U B R O U T I N E =======================================
.text:0000000000004090
.text:0000000000004090
.text:0000000000004090                 public quotearg_colon_mem
.text:0000000000004090 quotearg_colon_mem proc near
.text:0000000000004090 ; __unwind {
.text:0000000000004090                 mov     edx, 3Ah ; ':'
.text:0000000000004095                 jmp     quotearg_char_mem
.text:0000000000004095 ; } // starts at 4090
.text:0000000000004095 quotearg_colon_mem endp
.text:0000000000004095
.text:0000000000004095 ; ---------------------------------------------------------------------------
.text:000000000000409A                 align 20h
.text:00000000000040A0
.text:00000000000040A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000040A0
.text:00000000000040A0 ; Attributes: info_from_lumina
.text:00000000000040A0
.text:00000000000040A0 ; char *__fastcall quotearg_n_style_colon(int n, quoting_style s, const char *arg)
.text:00000000000040A0                 public quotearg_n_style_colon
.text:00000000000040A0 quotearg_n_style_colon proc near
.text:00000000000040A0
.text:00000000000040A0 var_48          = dword ptr -48h
.text:00000000000040A0 var_44          = qword ptr -44h
.text:00000000000040A0 var_3C          = qword ptr -3Ch
.text:00000000000040A0 var_34          = qword ptr -34h
.text:00000000000040A0 var_2C          = qword ptr -2Ch
.text:00000000000040A0 var_24          = qword ptr -24h
.text:00000000000040A0 var_1C          = qword ptr -1Ch
.text:00000000000040A0 var_14          = dword ptr -14h
.text:00000000000040A0 var_10          = qword ptr -10h
.text:00000000000040A0
.text:00000000000040A0 ; __unwind {
.text:00000000000040A0                 sub     rsp, 48h
.text:00000000000040A4                 mov     rax, rdx
.text:00000000000040A7                 mov     rdx, fs:28h
.text:00000000000040B0                 mov     [rsp+48h+var_10], rdx
.text:00000000000040B5                 xor     edx, edx
.text:00000000000040B7                 cmp     esi, 0Ah
.text:00000000000040BA                 jz      short loc_4124
.text:00000000000040BC                 mov     [rsp+48h+var_48], esi
.text:00000000000040BF                 mov     rcx, rsp
.text:00000000000040C2                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000040C9                 mov     rsi, rax
.text:00000000000040CC                 mov     [rsp+48h+var_44], 0
.text:00000000000040D5                 mov     [rsp+48h+var_3C], 4000000h
.text:00000000000040DE                 mov     [rsp+48h+var_34], 0
.text:00000000000040E7                 mov     [rsp+48h+var_2C], 0
.text:00000000000040F0                 mov     [rsp+48h+var_24], 0
.text:00000000000040F9                 mov     [rsp+48h+var_1C], 0
.text:0000000000004102                 mov     [rsp+48h+var_14], 0
.text:000000000000410A                 call    quotearg_n_options
.text:000000000000410F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000004114                 xor     rcx, fs:28h
.text:000000000000411D                 jnz     short loc_4129
.text:000000000000411F                 add     rsp, 48h
.text:0000000000004123                 retn
.text:0000000000004124 ; ---------------------------------------------------------------------------
.text:0000000000004124
.text:0000000000004124 loc_4124:                               ; CODE XREF: quotearg_n_style_colon+1A↑j
.text:0000000000004124                 call    _abort
.text:0000000000004129 ; ---------------------------------------------------------------------------
.text:0000000000004129
.text:0000000000004129 loc_4129:                               ; CODE XREF: quotearg_n_style_colon+7D↑j
.text:0000000000004129                 call    ___stack_chk_fail
.text:0000000000004129 ; } // starts at 40A0
.text:0000000000004129 quotearg_n_style_colon endp
.text:0000000000004129
.text:0000000000004129 ; ---------------------------------------------------------------------------
.text:000000000000412E                 align 10h
.text:0000000000004130
.text:0000000000004130 ; =============== S U B R O U T I N E =======================================
.text:0000000000004130
.text:0000000000004130 ; Attributes: info_from_lumina
.text:0000000000004130
.text:0000000000004130 ; char *__fastcall quotearg_n_custom_mem(int n, const char *left_quote, const char *right_quote, const char *arg, size_t argsize)
.text:0000000000004130                 public quotearg_n_custom_mem
.text:0000000000004130 quotearg_n_custom_mem proc near         ; CODE XREF: quotearg_n_custom+7↓j
.text:0000000000004130                                         ; quotearg_custom+12↓j ...
.text:0000000000004130
.text:0000000000004130 var_48          = xmmword ptr -48h
.text:0000000000004130 var_38          = xmmword ptr -38h
.text:0000000000004130 var_28          = xmmword ptr -28h
.text:0000000000004130 var_18          = qword ptr -18h
.text:0000000000004130 var_10          = qword ptr -10h
.text:0000000000004130
.text:0000000000004130 ; __unwind {
.text:0000000000004130                 sub     rsp, 48h
.text:0000000000004134                 mov     r9, rcx
.text:0000000000004137                 mov     rcx, cs:qword_2083F0
.text:000000000000413E                 movdqa  xmm0, cs:default_quoting_options
.text:0000000000004146                 mov     rax, fs:28h
.text:000000000000414F                 mov     [rsp+48h+var_10], rax
.text:0000000000004154                 xor     eax, eax
.text:0000000000004156                 movaps  [rsp+48h+var_48], xmm0
.text:000000000000415A                 test    rsi, rsi
.text:000000000000415D                 mov     [rsp+48h+var_18], rcx
.text:0000000000004162                 mov     dword ptr [rsp+48h+var_48], 0Ah
.text:0000000000004169                 movdqa  xmm0, cs:xmmword_2083D0
.text:0000000000004171                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000004176                 movdqa  xmm0, cs:xmmword_2083E0
.text:000000000000417E                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000004183                 jz      short loc_41B7
.text:0000000000004185                 test    rdx, rdx
.text:0000000000004188                 jz      short loc_41B7
.text:000000000000418A                 mov     qword ptr [rsp+48h+var_28+8], rsi
.text:000000000000418F                 mov     [rsp+48h+var_18], rdx
.text:0000000000004194                 mov     rcx, rsp
.text:0000000000004197                 mov     rdx, r8
.text:000000000000419A                 mov     rsi, r9
.text:000000000000419D                 call    quotearg_n_options
.text:00000000000041A2                 mov     rdi, [rsp+48h+var_10]
.text:00000000000041A7                 xor     rdi, fs:28h
.text:00000000000041B0                 jnz     short loc_41BC
.text:00000000000041B2                 add     rsp, 48h
.text:00000000000041B6                 retn
.text:00000000000041B7 ; ---------------------------------------------------------------------------
.text:00000000000041B7
.text:00000000000041B7 loc_41B7:                               ; CODE XREF: quotearg_n_custom_mem+53↑j
.text:00000000000041B7                                         ; quotearg_n_custom_mem+58↑j
.text:00000000000041B7                 call    _abort
.text:00000000000041BC ; ---------------------------------------------------------------------------
.text:00000000000041BC
.text:00000000000041BC loc_41BC:                               ; CODE XREF: quotearg_n_custom_mem+80↑j
.text:00000000000041BC                 call    ___stack_chk_fail
.text:00000000000041BC ; } // starts at 4130
.text:00000000000041BC quotearg_n_custom_mem endp
.text:00000000000041BC
.text:00000000000041BC ; ---------------------------------------------------------------------------
.text:00000000000041C1                 align 10h
.text:00000000000041D0
.text:00000000000041D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000041D0
.text:00000000000041D0
.text:00000000000041D0                 public quotearg_n_custom
.text:00000000000041D0 quotearg_n_custom proc near
.text:00000000000041D0 ; __unwind {
.text:00000000000041D0                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:00000000000041D7                 jmp     quotearg_n_custom_mem
.text:00000000000041D7 ; } // starts at 41D0
.text:00000000000041D7 quotearg_n_custom endp
.text:00000000000041D7
.text:00000000000041D7 ; ---------------------------------------------------------------------------
.text:00000000000041DC                 align 20h
.text:00000000000041E0
.text:00000000000041E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000041E0
.text:00000000000041E0
.text:00000000000041E0                 public quotearg_custom
.text:00000000000041E0 quotearg_custom proc near
.text:00000000000041E0 ; __unwind {
.text:00000000000041E0                 mov     rcx, rdx
.text:00000000000041E3                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:00000000000041EA                 mov     rdx, rsi
.text:00000000000041ED                 mov     rsi, rdi
.text:00000000000041F0                 xor     edi, edi
.text:00000000000041F2                 jmp     quotearg_n_custom_mem
.text:00000000000041F2 ; } // starts at 41E0
.text:00000000000041F2 quotearg_custom endp
.text:00000000000041F2
.text:00000000000041F2 ; ---------------------------------------------------------------------------
.text:00000000000041F7                 align 20h
.text:0000000000004200
.text:0000000000004200 ; =============== S U B R O U T I N E =======================================
.text:0000000000004200
.text:0000000000004200
.text:0000000000004200                 public quotearg_custom_mem
.text:0000000000004200 quotearg_custom_mem proc near
.text:0000000000004200 ; __unwind {
.text:0000000000004200                 mov     r8, rcx
.text:0000000000004203                 mov     rcx, rdx
.text:0000000000004206                 mov     rdx, rsi
.text:0000000000004209                 mov     rsi, rdi
.text:000000000000420C                 xor     edi, edi
.text:000000000000420E                 jmp     quotearg_n_custom_mem
.text:000000000000420E ; } // starts at 4200
.text:000000000000420E quotearg_custom_mem endp
.text:000000000000420E
.text:000000000000420E ; ---------------------------------------------------------------------------
.text:0000000000004213                 align 20h
.text:0000000000004220
.text:0000000000004220 ; =============== S U B R O U T I N E =======================================
.text:0000000000004220
.text:0000000000004220
.text:0000000000004220                 public quote_n_mem
.text:0000000000004220 quote_n_mem     proc near
.text:0000000000004220 ; __unwind {
.text:0000000000004220                 lea     rcx, quote_quoting_options
.text:0000000000004227                 jmp     quotearg_n_options
.text:0000000000004227 ; } // starts at 4220
.text:0000000000004227 quote_n_mem     endp
.text:0000000000004227
.text:0000000000004227 ; ---------------------------------------------------------------------------
.text:000000000000422C                 align 10h
.text:0000000000004230
.text:0000000000004230 ; =============== S U B R O U T I N E =======================================
.text:0000000000004230
.text:0000000000004230
.text:0000000000004230                 public quote_mem
.text:0000000000004230 quote_mem       proc near
.text:0000000000004230 ; __unwind {
.text:0000000000004230                 lea     rcx, quote_quoting_options
.text:0000000000004237                 mov     rdx, rsi
.text:000000000000423A                 mov     rsi, rdi
.text:000000000000423D                 xor     edi, edi
.text:000000000000423F                 jmp     quotearg_n_options
.text:000000000000423F ; } // starts at 4230
.text:000000000000423F quote_mem       endp
.text:000000000000423F
.text:000000000000423F ; ---------------------------------------------------------------------------
.text:0000000000004244                 align 10h
.text:0000000000004250
.text:0000000000004250 ; =============== S U B R O U T I N E =======================================
.text:0000000000004250
.text:0000000000004250
.text:0000000000004250                 public quote_n
.text:0000000000004250 quote_n         proc near
.text:0000000000004250 ; __unwind {
.text:0000000000004250                 lea     rcx, quote_quoting_options
.text:0000000000004257                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000425E                 jmp     quotearg_n_options
.text:000000000000425E ; } // starts at 4250
.text:000000000000425E quote_n         endp
.text:000000000000425E
.text:000000000000425E ; ---------------------------------------------------------------------------
.text:0000000000004263                 align 10h
.text:0000000000004270
.text:0000000000004270 ; =============== S U B R O U T I N E =======================================
.text:0000000000004270
.text:0000000000004270
.text:0000000000004270                 public quote
.text:0000000000004270 quote           proc near               ; CODE XREF: main+269↑p
.text:0000000000004270                                         ; main+312↑p ...
.text:0000000000004270 ; __unwind {
.text:0000000000004270                 lea     rcx, quote_quoting_options
.text:0000000000004277                 mov     rsi, rdi
.text:000000000000427A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004281                 xor     edi, edi
.text:0000000000004283                 jmp     quotearg_n_options
.text:0000000000004283 ; } // starts at 4270
.text:0000000000004283 quote           endp
.text:0000000000004283
.text:0000000000004283 ; ---------------------------------------------------------------------------
.text:0000000000004288                 align 10h
.text:0000000000004290
.text:0000000000004290 ; =============== S U B R O U T I N E =======================================
.text:0000000000004290
.text:0000000000004290
.text:0000000000004290 ; __int64 __fastcall version_etc_arn(FILE *stream)
.text:0000000000004290                 public version_etc_arn
.text:0000000000004290 version_etc_arn proc near               ; CODE XREF: version_etc_ar:loc_46CB↓j
.text:0000000000004290                                         ; version_etc_va:loc_471B↓p ...
.text:0000000000004290
.text:0000000000004290 var_58          = qword ptr -58h
.text:0000000000004290 var_50          = qword ptr -50h
.text:0000000000004290 var_48          = qword ptr -48h
.text:0000000000004290 var_40          = qword ptr -40h
.text:0000000000004290
.text:0000000000004290 ; __unwind {
.text:0000000000004290                 push    r15
.text:0000000000004292                 push    r14
.text:0000000000004294                 push    r13
.text:0000000000004296                 push    r12
.text:0000000000004298                 mov     r12, r9
.text:000000000000429B                 push    rbp
.text:000000000000429C                 push    rbx
.text:000000000000429D                 mov     rbp, rdi
.text:00000000000042A0                 mov     rbx, r8
.text:00000000000042A3                 sub     rsp, 28h
.text:00000000000042A7                 test    rsi, rsi
.text:00000000000042AA                 jz      loc_43C8
.text:00000000000042B0                 mov     r8, rdx
.text:00000000000042B3                 lea     rdx, aSSS       ; "%s (%s) %s\n"
.text:00000000000042BA                 mov     r9, rcx
.text:00000000000042BD                 xor     eax, eax
.text:00000000000042BF                 mov     rcx, rsi
.text:00000000000042C2                 mov     esi, 1
.text:00000000000042C7                 call    ___fprintf_chk
.text:00000000000042CC
.text:00000000000042CC loc_42CC:                               ; CODE XREF: version_etc_arn+151↓j
.text:00000000000042CC                 lea     rsi, aC_0       ; "(C)"
.text:00000000000042D3                 xor     edi, edi        ; domainname
.text:00000000000042D5                 mov     edx, 5          ; category
.text:00000000000042DA                 call    _dcgettext
.text:00000000000042DF                 lea     rdx, version_etc_copyright ; "Copyright %s %d Free Software Foundatio"...
.text:00000000000042E6                 mov     rcx, rax
.text:00000000000042E9                 mov     r8d, 7E3h
.text:00000000000042EF                 mov     esi, 1
.text:00000000000042F4                 mov     rdi, rbp
.text:00000000000042F7                 xor     eax, eax
.text:00000000000042F9                 call    ___fprintf_chk
.text:00000000000042FE                 lea     rsi, aLicenseGplv3Gn ; "\nLicense GPLv3+: GNU GPL version 3 or "...
.text:0000000000004305                 xor     edi, edi        ; domainname
.text:0000000000004307                 mov     edx, 5          ; category
.text:000000000000430C                 call    _dcgettext
.text:0000000000004311                 mov     rsi, rbp        ; stream
.text:0000000000004314                 mov     rdi, rax        ; s
.text:0000000000004317                 call    _fputs_unlocked
.text:000000000000431C                 cmp     r12, 9          ; switch 10 cases
.text:0000000000004320                 ja      def_4334        ; jumptable 0000000000004334 default case
.text:0000000000004326                 lea     rdx, jpt_4334
.text:000000000000432D                 movsxd  rax, ds:(jpt_4334 - 6028h)[rdx+r12*4]
.text:0000000000004331                 add     rax, rdx
.text:0000000000004334                 jmp     rax             ; switch jump
.text:0000000000004334 ; ---------------------------------------------------------------------------
.text:0000000000004336                 align 20h
.text:0000000000004340
.text:0000000000004340 loc_4340:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004340                                         ; DATA XREF: .rodata:jpt_4334↓o
.text:0000000000004340                 mov     r9, [rbx+38h]   ; jumptable 0000000000004334 case 8
.text:0000000000004344                 mov     rax, [rbx+10h]
.text:0000000000004348                 lea     rsi, aWrittenBySSSSS ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000434F                 mov     r8, [rbx+8]
.text:0000000000004353                 mov     edx, 5          ; category
.text:0000000000004358                 xor     edi, edi        ; domainname
.text:000000000000435A                 mov     r13, [rbx+30h]
.text:000000000000435E                 mov     r12, [rbx+28h]
.text:0000000000004362                 mov     [rsp+58h+var_48], r9
.text:0000000000004367                 mov     r15, [rbx+20h]
.text:000000000000436B                 mov     r14, [rbx+18h]
.text:000000000000436F                 mov     [rsp+58h+var_58], rax
.text:0000000000004373                 mov     [rsp+58h+var_50], r8
.text:0000000000004378                 mov     rbx, [rbx]
.text:000000000000437B                 call    _dcgettext
.text:0000000000004380                 sub     rsp, 8
.text:0000000000004384
.text:0000000000004384 loc_4384:                               ; CODE XREF: version_etc_arn+1B0↓j
.text:0000000000004384                 mov     r9, [rsp+60h+var_48]
.text:0000000000004389                 mov     rdx, rax
.text:000000000000438C                 mov     rcx, rbx
.text:000000000000438F                 mov     esi, 1
.text:0000000000004394                 mov     rdi, rbp
.text:0000000000004397                 xor     eax, eax
.text:0000000000004399                 push    r9
.text:000000000000439B                 push    r13
.text:000000000000439D                 push    r12
.text:000000000000439F                 push    r15
.text:00000000000043A1                 push    r14
.text:00000000000043A3                 mov     r9, [rsp+88h+var_58]
.text:00000000000043A8                 mov     r8, [rsp+88h+var_50]
.text:00000000000043AD                 call    ___fprintf_chk
.text:00000000000043B2                 add     rsp, 30h
.text:00000000000043B6
.text:00000000000043B6 loc_43B6:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000043B6                                         ; DATA XREF: .rodata:jpt_4334↓o
.text:00000000000043B6                 add     rsp, 28h        ; jumptable 0000000000004334 case 0
.text:00000000000043BA                 pop     rbx
.text:00000000000043BB                 pop     rbp
.text:00000000000043BC                 pop     r12
.text:00000000000043BE                 pop     r13
.text:00000000000043C0                 pop     r14
.text:00000000000043C2                 pop     r15
.text:00000000000043C4                 retn
.text:00000000000043C4 ; ---------------------------------------------------------------------------
.text:00000000000043C5                 align 8
.text:00000000000043C8
.text:00000000000043C8 loc_43C8:                               ; CODE XREF: version_etc_arn+1A↑j
.text:00000000000043C8                 mov     r8, rcx
.text:00000000000043CB                 mov     rcx, rdx
.text:00000000000043CE                 lea     rdx, aSS_0      ; "%s %s\n"
.text:00000000000043D5                 mov     esi, 1
.text:00000000000043DA                 xor     eax, eax
.text:00000000000043DC                 call    ___fprintf_chk
.text:00000000000043E1                 jmp     loc_42CC
.text:00000000000043E1 ; ---------------------------------------------------------------------------
.text:00000000000043E6                 align 10h
.text:00000000000043F0
.text:00000000000043F0 loc_43F0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000043F0                                         ; DATA XREF: .rodata:jpt_4334↓o
.text:00000000000043F0                 mov     r10, [rbx+40h]  ; jumptable 0000000000004334 case 9
.text:00000000000043F4                 mov     r9, [rbx+38h]
.text:00000000000043F8                 lea     rsi, aWrittenBySSSSS_0 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:00000000000043FF                 mov     rax, [rbx+10h]
.text:0000000000004403                 mov     r8, [rbx+8]
.text:0000000000004407                 mov     edx, 5          ; category
.text:000000000000440C                 mov     r13, [rbx+30h]
.text:0000000000004410                 mov     r12, [rbx+28h]
.text:0000000000004414                 mov     r15, [rbx+20h]
.text:0000000000004418                 mov     r14, [rbx+18h]
.text:000000000000441C                 mov     rbx, [rbx]
.text:000000000000441F                 mov     [rsp+58h+var_40], r10
.text:0000000000004424                 mov     [rsp+58h+var_48], r9
.text:0000000000004429                 mov     [rsp+58h+var_58], rax
.text:000000000000442D                 mov     [rsp+58h+var_50], r8
.text:0000000000004432
.text:0000000000004432 loc_4432:                               ; CODE XREF: version_etc_arn+412↓j
.text:0000000000004432                 xor     edi, edi        ; domainname
.text:0000000000004434                 call    _dcgettext
.text:0000000000004439                 mov     r10, [rsp+58h+var_40]
.text:000000000000443E                 push    r10
.text:0000000000004440                 jmp     loc_4384
.text:0000000000004440 ; ---------------------------------------------------------------------------
.text:0000000000004445                 align 8
.text:0000000000004448
.text:0000000000004448 loc_4448:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004448                                         ; DATA XREF: .rodata:jpt_4334↓o
.text:0000000000004448                 mov     rbx, [rbx]      ; jumptable 0000000000004334 case 1
.text:000000000000444B                 lea     rsi, aWrittenByS ; "Written by %s.\n"
.text:0000000000004452                 mov     edx, 5          ; category
.text:0000000000004457                 xor     edi, edi        ; domainname
.text:0000000000004459                 call    _dcgettext
.text:000000000000445E                 add     rsp, 28h
.text:0000000000004462                 mov     rcx, rbx
.text:0000000000004465                 mov     rdi, rbp
.text:0000000000004468                 pop     rbx
.text:0000000000004469                 pop     rbp
.text:000000000000446A                 pop     r12
.text:000000000000446C                 pop     r13
.text:000000000000446E                 pop     r14
.text:0000000000004470                 pop     r15
.text:0000000000004472                 mov     rdx, rax
.text:0000000000004475                 mov     esi, 1
.text:000000000000447A                 xor     eax, eax
.text:000000000000447C                 jmp     ___fprintf_chk
.text:000000000000447C ; ---------------------------------------------------------------------------
.text:0000000000004481                 align 8
.text:0000000000004488
.text:0000000000004488 loc_4488:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004488                                         ; DATA XREF: .rodata:jpt_4334↓o
.text:0000000000004488                 mov     r12, [rbx+8]    ; jumptable 0000000000004334 case 2
.text:000000000000448C                 lea     rsi, aWrittenBySAndS ; "Written by %s and %s.\n"
.text:0000000000004493                 mov     rbx, [rbx]
.text:0000000000004496                 mov     edx, 5          ; category
.text:000000000000449B                 xor     edi, edi        ; domainname
.text:000000000000449D                 call    _dcgettext
.text:00000000000044A2                 add     rsp, 28h
.text:00000000000044A6                 mov     r8, r12
.text:00000000000044A9                 mov     rcx, rbx
.text:00000000000044AC                 mov     rdi, rbp
.text:00000000000044AF                 mov     rdx, rax
.text:00000000000044B2                 mov     esi, 1
.text:00000000000044B7                 pop     rbx
.text:00000000000044B8                 pop     rbp
.text:00000000000044B9                 pop     r12
.text:00000000000044BB                 pop     r13
.text:00000000000044BD                 pop     r14
.text:00000000000044BF                 pop     r15
.text:00000000000044C1                 xor     eax, eax
.text:00000000000044C3                 jmp     ___fprintf_chk
.text:00000000000044C3 ; ---------------------------------------------------------------------------
.text:00000000000044C8                 align 10h
.text:00000000000044D0
.text:00000000000044D0 loc_44D0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000044D0                                         ; DATA XREF: .rodata:jpt_4334↓o
.text:00000000000044D0                 mov     r13, [rbx+10h]  ; jumptable 0000000000004334 case 3
.text:00000000000044D4                 mov     r12, [rbx+8]
.text:00000000000044D8                 lea     rsi, aWrittenBySSAnd ; "Written by %s, %s, and %s.\n"
.text:00000000000044DF                 mov     rbx, [rbx]
.text:00000000000044E2                 mov     edx, 5          ; category
.text:00000000000044E7                 xor     edi, edi        ; domainname
.text:00000000000044E9                 call    _dcgettext
.text:00000000000044EE                 add     rsp, 28h
.text:00000000000044F2                 mov     r9, r13
.text:00000000000044F5                 mov     r8, r12
.text:00000000000044F8                 mov     rcx, rbx
.text:00000000000044FB                 mov     rdi, rbp
.text:00000000000044FE                 mov     rdx, rax
.text:0000000000004501                 pop     rbx
.text:0000000000004502                 pop     rbp
.text:0000000000004503                 pop     r12
.text:0000000000004505                 pop     r13
.text:0000000000004507                 pop     r14
.text:0000000000004509                 pop     r15
.text:000000000000450B                 mov     esi, 1
.text:0000000000004510                 xor     eax, eax
.text:0000000000004512                 jmp     ___fprintf_chk
.text:0000000000004512 ; ---------------------------------------------------------------------------
.text:0000000000004517                 align 20h
.text:0000000000004520
.text:0000000000004520 loc_4520:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004520                                         ; DATA XREF: .rodata:jpt_4334↓o
.text:0000000000004520                 lea     rsi, aWrittenBySSSAn ; jumptable 0000000000004334 case 4
.text:0000000000004527                 mov     edx, 5          ; category
.text:000000000000452C                 xor     edi, edi        ; domainname
.text:000000000000452E                 mov     r14, [rbx+18h]
.text:0000000000004532                 mov     r13, [rbx+10h]
.text:0000000000004536                 mov     r12, [rbx+8]
.text:000000000000453A                 mov     rbx, [rbx]
.text:000000000000453D                 call    _dcgettext
.text:0000000000004542                 sub     rsp, 8
.text:0000000000004546
.text:0000000000004546 loc_4546:                               ; CODE XREF: version_etc_arn+310↓j
.text:0000000000004546                 push    r14
.text:0000000000004548                 mov     rdx, rax
.text:000000000000454B                 mov     r9, r13
.text:000000000000454E                 mov     r8, r12
.text:0000000000004551                 mov     rcx, rbx
.text:0000000000004554                 mov     rdi, rbp
.text:0000000000004557                 mov     esi, 1
.text:000000000000455C                 xor     eax, eax
.text:000000000000455E                 call    ___fprintf_chk
.text:0000000000004563                 pop     rax
.text:0000000000004564                 pop     rdx
.text:0000000000004565                 add     rsp, 28h
.text:0000000000004569                 pop     rbx
.text:000000000000456A                 pop     rbp
.text:000000000000456B                 pop     r12
.text:000000000000456D                 pop     r13
.text:000000000000456F                 pop     r14
.text:0000000000004571                 pop     r15
.text:0000000000004573                 retn
.text:0000000000004573 ; ---------------------------------------------------------------------------
.text:0000000000004574                 align 8
.text:0000000000004578
.text:0000000000004578 loc_4578:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004578                                         ; DATA XREF: .rodata:jpt_4334↓o
.text:0000000000004578                 mov     r15, [rbx+20h]  ; jumptable 0000000000004334 case 5
.text:000000000000457C                 lea     rsi, aWrittenBySSSSA ; "Written by %s, %s, %s,\n%s, and %s.\n"
.text:0000000000004583                 mov     edx, 5          ; category
.text:0000000000004588                 xor     edi, edi        ; domainname
.text:000000000000458A                 mov     r14, [rbx+18h]
.text:000000000000458E                 mov     r13, [rbx+10h]
.text:0000000000004592                 mov     r12, [rbx+8]
.text:0000000000004596                 mov     rbx, [rbx]
.text:0000000000004599                 call    _dcgettext
.text:000000000000459E                 push    r15
.text:00000000000045A0                 jmp     short loc_4546
.text:00000000000045A0 ; ---------------------------------------------------------------------------
.text:00000000000045A2                 align 8
.text:00000000000045A8
.text:00000000000045A8 loc_45A8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000045A8                                         ; DATA XREF: .rodata:jpt_4334↓o
.text:00000000000045A8                 mov     r8, [rbx+8]     ; jumptable 0000000000004334 case 6
.text:00000000000045AC                 mov     r12, [rbx+28h]
.text:00000000000045B0                 lea     rsi, aWrittenBySSSSS_1 ; "Written by %s, %s, %s,\n%s, %s, and %s."...
.text:00000000000045B7                 mov     r15, [rbx+20h]
.text:00000000000045BB                 mov     r14, [rbx+18h]
.text:00000000000045BF                 mov     edx, 5          ; category
.text:00000000000045C4                 mov     r13, [rbx+10h]
.text:00000000000045C8                 xor     edi, edi        ; domainname
.text:00000000000045CA                 mov     rbx, [rbx]
.text:00000000000045CD                 mov     [rsp+58h+var_58], r8
.text:00000000000045D1                 call    _dcgettext
.text:00000000000045D6                 sub     rsp, 8
.text:00000000000045DA                 mov     r9, r13
.text:00000000000045DD                 push    r12
.text:00000000000045DF                 push    r15
.text:00000000000045E1                 push    r14
.text:00000000000045E3
.text:00000000000045E3 loc_45E3:                               ; CODE XREF: version_etc_arn+3C4↓j
.text:00000000000045E3                 mov     r8, [rsp+78h+var_58]
.text:00000000000045E8                 mov     rcx, rbx
.text:00000000000045EB                 mov     rdx, rax
.text:00000000000045EE                 mov     rdi, rbp
.text:00000000000045F1                 mov     esi, 1
.text:00000000000045F6                 xor     eax, eax
.text:00000000000045F8                 call    ___fprintf_chk
.text:00000000000045FD                 add     rsp, 20h
.text:0000000000004601                 add     rsp, 28h
.text:0000000000004605                 pop     rbx
.text:0000000000004606                 pop     rbp
.text:0000000000004607                 pop     r12
.text:0000000000004609                 pop     r13
.text:000000000000460B                 pop     r14
.text:000000000000460D                 pop     r15
.text:000000000000460F                 retn
.text:0000000000004610 ; ---------------------------------------------------------------------------
.text:0000000000004610
.text:0000000000004610 loc_4610:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004610                                         ; DATA XREF: .rodata:jpt_4334↓o
.text:0000000000004610                 mov     r9, [rbx+10h]   ; jumptable 0000000000004334 case 7
.text:0000000000004614                 mov     r13, [rbx+30h]
.text:0000000000004618                 lea     rsi, aWrittenBySSSSS_2 ; "Written by %s, %s, %s,\n%s, %s, %s, and"...
.text:000000000000461F                 mov     r12, [rbx+28h]
.text:0000000000004623                 mov     r15, [rbx+20h]
.text:0000000000004627                 mov     edx, 5          ; category
.text:000000000000462C                 mov     r14, [rbx+18h]
.text:0000000000004630                 mov     r8, [rbx+8]
.text:0000000000004634                 xor     edi, edi        ; domainname
.text:0000000000004636                 mov     [rsp+58h+var_50], r9
.text:000000000000463B                 mov     rbx, [rbx]
.text:000000000000463E                 mov     [rsp+58h+var_58], r8
.text:0000000000004642                 call    _dcgettext
.text:0000000000004647                 push    r13
.text:0000000000004649                 push    r12
.text:000000000000464B                 push    r15
.text:000000000000464D                 push    r14
.text:000000000000464F                 mov     r9, [rsp+78h+var_50]
.text:0000000000004654                 jmp     short loc_45E3
.text:0000000000004654 ; ---------------------------------------------------------------------------
.text:0000000000004656                 align 20h
.text:0000000000004660
.text:0000000000004660 def_4334:                               ; CODE XREF: version_etc_arn+90↑j
.text:0000000000004660                 mov     r10, [rbx+40h]  ; jumptable 0000000000004334 default case
.text:0000000000004664                 mov     r9, [rbx+38h]
.text:0000000000004668                 mov     edx, 5
.text:000000000000466D                 mov     rax, [rbx+10h]
.text:0000000000004671                 mov     r8, [rbx+8]
.text:0000000000004675                 lea     rsi, aWrittenBySSSSS_3 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000467C                 mov     r13, [rbx+30h]
.text:0000000000004680                 mov     r12, [rbx+28h]
.text:0000000000004684                 mov     r15, [rbx+20h]
.text:0000000000004688                 mov     r14, [rbx+18h]
.text:000000000000468C                 mov     [rsp+58h+var_40], r10
.text:0000000000004691                 mov     [rsp+58h+var_48], r9
.text:0000000000004696                 mov     [rsp+58h+var_58], rax
.text:000000000000469A                 mov     [rsp+58h+var_50], r8
.text:000000000000469F                 mov     rbx, [rbx]
.text:00000000000046A2                 jmp     loc_4432
.text:00000000000046A2 ; } // starts at 4290
.text:00000000000046A2 version_etc_arn endp
.text:00000000000046A2
.text:00000000000046A2 ; ---------------------------------------------------------------------------
.text:00000000000046A7                 align 10h
.text:00000000000046B0
.text:00000000000046B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000046B0
.text:00000000000046B0 ; Attributes: info_from_lumina
.text:00000000000046B0
.text:00000000000046B0 ; void __fastcall version_etc_ar(FILE *stream, const char *command_name, const char *package, const char *version, const char *const *authors)
.text:00000000000046B0                 public version_etc_ar
.text:00000000000046B0 version_etc_ar  proc near
.text:00000000000046B0 ; __unwind {
.text:00000000000046B0                 xor     r9d, r9d
.text:00000000000046B3                 cmp     qword ptr [r8], 0
.text:00000000000046B7                 jz      short loc_46CB
.text:00000000000046B9                 nop     dword ptr [rax+00000000h]
.text:00000000000046C0
.text:00000000000046C0 loc_46C0:                               ; CODE XREF: version_etc_ar+19↓j
.text:00000000000046C0                 add     r9, 1
.text:00000000000046C4                 cmp     qword ptr [r8+r9*8], 0
.text:00000000000046C9                 jnz     short loc_46C0
.text:00000000000046CB
.text:00000000000046CB loc_46CB:                               ; CODE XREF: version_etc_ar+7↑j
.text:00000000000046CB                 jmp     version_etc_arn
.text:00000000000046CB ; } // starts at 46B0
.text:00000000000046CB version_etc_ar  endp
.text:00000000000046CB
.text:00000000000046D0
.text:00000000000046D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000046D0
.text:00000000000046D0 ; Attributes: info_from_lumina
.text:00000000000046D0
.text:00000000000046D0 ; void __fastcall version_etc_va(FILE *stream, const char *command_name, const char *package, const char *version, __va_list_tag *authors)
.text:00000000000046D0                 public version_etc_va
.text:00000000000046D0 version_etc_va  proc near
.text:00000000000046D0
.text:00000000000046D0 authtab         = qword ptr -68h
.text:00000000000046D0 var_10          = qword ptr -10h
.text:00000000000046D0
.text:00000000000046D0 ; __unwind {
.text:00000000000046D0                 sub     rsp, 68h
.text:00000000000046D4                 mov     r10, r8
.text:00000000000046D7                 xor     r9d, r9d
.text:00000000000046DA                 mov     rax, fs:28h
.text:00000000000046E3                 mov     [rsp+68h+var_10], rax
.text:00000000000046E8                 xor     eax, eax
.text:00000000000046EA                 mov     r8, rsp
.text:00000000000046ED                 nop     dword ptr [rax]
.text:00000000000046F0
.text:00000000000046F0 loc_46F0:                               ; CODE XREF: version_etc_va+49↓j
.text:00000000000046F0                 mov     eax, [r10]
.text:00000000000046F3                 cmp     eax, 2Fh ; '/'
.text:00000000000046F6                 ja      short loc_473A
.text:00000000000046F8                 mov     r11d, eax
.text:00000000000046FB                 add     r11, [r10+10h]
.text:00000000000046FF                 add     eax, 8
.text:0000000000004702                 mov     [r10], eax
.text:0000000000004705
.text:0000000000004705 loc_4705:                               ; CODE XREF: version_etc_va+76↓j
.text:0000000000004705                 mov     rax, [r11]
.text:0000000000004708                 test    rax, rax
.text:000000000000470B                 mov     [r8+r9*8], rax
.text:000000000000470F                 jz      short loc_471B
.text:0000000000004711                 add     r9, 1
.text:0000000000004715                 cmp     r9, 0Ah
.text:0000000000004719                 jnz     short loc_46F0
.text:000000000000471B
.text:000000000000471B loc_471B:                               ; CODE XREF: version_etc_va+3F↑j
.text:000000000000471B                 call    version_etc_arn
.text:0000000000004720                 mov     rax, [rsp+68h+var_10]
.text:0000000000004725                 xor     rax, fs:28h
.text:000000000000472E                 jnz     short loc_4735
.text:0000000000004730                 add     rsp, 68h
.text:0000000000004734                 retn
.text:0000000000004735 ; ---------------------------------------------------------------------------
.text:0000000000004735
.text:0000000000004735 loc_4735:                               ; CODE XREF: version_etc_va+5E↑j
.text:0000000000004735                 call    ___stack_chk_fail
.text:000000000000473A ; ---------------------------------------------------------------------------
.text:000000000000473A
.text:000000000000473A loc_473A:                               ; CODE XREF: version_etc_va+26↑j
.text:000000000000473A                 mov     r11, [r10+8]
.text:000000000000473E                 lea     rax, [r11+8]
.text:0000000000004742                 mov     [r10+8], rax
.text:0000000000004746                 jmp     short loc_4705
.text:0000000000004746 ; } // starts at 46D0
.text:0000000000004746 version_etc_va  endp
.text:0000000000004746
.text:0000000000004746 ; ---------------------------------------------------------------------------
.text:0000000000004748                 align 10h
.text:0000000000004750
.text:0000000000004750 ; =============== S U B R O U T I N E =======================================
.text:0000000000004750
.text:0000000000004750 ; Attributes: info_from_lumina
.text:0000000000004750
.text:0000000000004750 ; void version_etc(FILE *stream, const char *command_name, const char *package, const char *version, ...)
.text:0000000000004750                 public version_etc
.text:0000000000004750 version_etc     proc near               ; CODE XREF: main+145↑p
.text:0000000000004750
.text:0000000000004750 var_C0          = dword ptr -0C0h
.text:0000000000004750 var_B8          = qword ptr -0B8h
.text:0000000000004750 var_B0          = qword ptr -0B0h
.text:0000000000004750 var_A8          = byte ptr -0A8h
.text:0000000000004750 var_50          = qword ptr -50h
.text:0000000000004750 var_48          = byte ptr -48h
.text:0000000000004750 var_28          = qword ptr -28h
.text:0000000000004750 var_20          = qword ptr -20h
.text:0000000000004750 arg_0           = byte ptr  8
.text:0000000000004750
.text:0000000000004750 ; __unwind {
.text:0000000000004750                 push    rbp
.text:0000000000004751                 push    rbx
.text:0000000000004752                 mov     r10d, 20h ; ' '
.text:0000000000004758                 xor     r11d, r11d
.text:000000000000475B                 sub     rsp, 0B8h
.text:0000000000004762                 mov     rax, fs:28h
.text:000000000000476B                 mov     [rsp+0C8h+var_50], rax
.text:0000000000004770                 xor     eax, eax
.text:0000000000004772                 lea     rax, [rsp+0C8h+arg_0]
.text:000000000000477A                 mov     [rsp+0C8h+var_28], r8
.text:0000000000004782                 lea     rbx, [rsp+0C8h+arg_0]
.text:000000000000478A                 lea     r8, [rsp+0C8h+var_A8]
.text:000000000000478F                 mov     [rsp+0C8h+var_20], r9
.text:0000000000004797                 mov     [rsp+0C8h+var_C0], 20h ; ' '
.text:000000000000479F                 mov     [rsp+0C8h+var_B8], rax
.text:00000000000047A4                 lea     rax, [rsp+0C8h+var_48]
.text:00000000000047AC                 xor     r9d, r9d
.text:00000000000047AF                 mov     [rsp+0C8h+var_B0], rax
.text:00000000000047B4                 mov     rbp, rax
.text:00000000000047B7                 nop     word ptr [rax+rax+00000000h]
.text:00000000000047C0
.text:00000000000047C0 loc_47C0:                               ; CODE XREF: version_etc+9A↓j
.text:00000000000047C0                 cmp     r10d, 2Fh ; '/'
.text:00000000000047C4                 ja      short loc_481C
.text:00000000000047C6                 mov     eax, r10d
.text:00000000000047C9                 mov     r11d, 1
.text:00000000000047CF                 add     r10d, 8
.text:00000000000047D3                 add     rax, rbp
.text:00000000000047D6
.text:00000000000047D6 loc_47D6:                               ; CODE XREF: version_etc+D3↓j
.text:00000000000047D6                 mov     rax, [rax]
.text:00000000000047D9                 test    rax, rax
.text:00000000000047DC                 mov     [r8+r9*8], rax
.text:00000000000047E0                 jz      short loc_47EC
.text:00000000000047E2                 add     r9, 1
.text:00000000000047E6                 cmp     r9, 0Ah
.text:00000000000047EA                 jnz     short loc_47C0
.text:00000000000047EC
.text:00000000000047EC loc_47EC:                               ; CODE XREF: version_etc+90↑j
.text:00000000000047EC                 test    r11b, r11b
.text:00000000000047EF                 jnz     short loc_4815
.text:00000000000047F1
.text:00000000000047F1 loc_47F1:                               ; CODE XREF: version_etc+CA↓j
.text:00000000000047F1                 call    version_etc_arn
.text:00000000000047F6                 mov     rax, [rsp+0C8h+var_50]
.text:00000000000047FB                 xor     rax, fs:28h
.text:0000000000004804                 jnz     short loc_4810
.text:0000000000004806                 add     rsp, 0B8h
.text:000000000000480D                 pop     rbx
.text:000000000000480E                 pop     rbp
.text:000000000000480F                 retn
.text:0000000000004810 ; ---------------------------------------------------------------------------
.text:0000000000004810
.text:0000000000004810 loc_4810:                               ; CODE XREF: version_etc+B4↑j
.text:0000000000004810                 call    ___stack_chk_fail
.text:0000000000004815 ; ---------------------------------------------------------------------------
.text:0000000000004815
.text:0000000000004815 loc_4815:                               ; CODE XREF: version_etc+9F↑j
.text:0000000000004815                 mov     [rsp+0C8h+var_C0], r10d
.text:000000000000481A                 jmp     short loc_47F1
.text:000000000000481C ; ---------------------------------------------------------------------------
.text:000000000000481C
.text:000000000000481C loc_481C:                               ; CODE XREF: version_etc+74↑j
.text:000000000000481C                 mov     rax, rbx
.text:000000000000481F                 add     rbx, 8
.text:0000000000004823                 jmp     short loc_47D6
.text:0000000000004823 ; } // starts at 4750
.text:0000000000004823 version_etc     endp
.text:0000000000004823
.text:0000000000004823 ; ---------------------------------------------------------------------------
.text:0000000000004825                 align 10h
.text:0000000000004830
.text:0000000000004830 ; =============== S U B R O U T I N E =======================================
.text:0000000000004830
.text:0000000000004830 ; Attributes: info_from_lumina
.text:0000000000004830
.text:0000000000004830 ; void __cdecl emit_bug_reporting_address()
.text:0000000000004830                 public emit_bug_reporting_address
.text:0000000000004830 emit_bug_reporting_address proc near
.text:0000000000004830 ; __unwind {
.text:0000000000004830                 push    rbx
.text:0000000000004831                 lea     rsi, aReportBugsToS ; "\nReport bugs to: %s\n"
.text:0000000000004838                 mov     edx, 5          ; category
.text:000000000000483D                 xor     edi, edi        ; domainname
.text:000000000000483F                 call    _dcgettext
.text:0000000000004844                 lea     rdx, aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:000000000000484B                 mov     rsi, rax
.text:000000000000484E                 mov     edi, 1
.text:0000000000004853                 xor     eax, eax
.text:0000000000004855                 call    ___printf_chk
.text:000000000000485A                 lea     rsi, aSHomePageS ; "%s home page: <%s>\n"
.text:0000000000004861                 mov     edx, 5          ; category
.text:0000000000004866                 xor     edi, edi        ; domainname
.text:0000000000004868                 call    _dcgettext
.text:000000000000486D                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000004874                 lea     rdx, unk_519F
.text:000000000000487B                 mov     rsi, rax
.text:000000000000487E                 mov     edi, 1
.text:0000000000004883                 xor     eax, eax
.text:0000000000004885                 call    ___printf_chk
.text:000000000000488A                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004891                 lea     rsi, aGeneralHelpUsi ; "General help using GNU software: <https"...
.text:0000000000004898                 xor     edi, edi        ; domainname
.text:000000000000489A                 mov     edx, 5          ; category
.text:000000000000489F                 call    _dcgettext
.text:00000000000048A4                 mov     rsi, rbx        ; stream
.text:00000000000048A7                 mov     rdi, rax        ; s
.text:00000000000048AA                 pop     rbx
.text:00000000000048AB                 jmp     _fputs_unlocked
.text:00000000000048AB ; } // starts at 4830
.text:00000000000048AB emit_bug_reporting_address endp
.text:00000000000048AB
.text:00000000000048B0
.text:00000000000048B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000048B0
.text:00000000000048B0
.text:00000000000048B0                 public xmalloc
.text:00000000000048B0 xmalloc         proc near               ; CODE XREF: quotearg_n_options+127↑p
.text:00000000000048B0                                         ; quotearg_alloc_mem+81↑p ...
.text:00000000000048B0 ; __unwind {
.text:00000000000048B0                 push    rbx
.text:00000000000048B1                 mov     rbx, rdi
.text:00000000000048B4                 call    _malloc
.text:00000000000048B9                 test    rax, rax
.text:00000000000048BC                 jnz     short loc_48C3
.text:00000000000048BE                 test    rbx, rbx
.text:00000000000048C1                 jnz     short loc_48C5
.text:00000000000048C3
.text:00000000000048C3 loc_48C3:                               ; CODE XREF: xmalloc+C↑j
.text:00000000000048C3                 pop     rbx
.text:00000000000048C4                 retn
.text:00000000000048C5 ; ---------------------------------------------------------------------------
.text:00000000000048C5
.text:00000000000048C5 loc_48C5:                               ; CODE XREF: xmalloc+11↑j
.text:00000000000048C5                 call    xalloc_die
.text:00000000000048C5 ; } // starts at 48B0
.text:00000000000048C5 xmalloc         endp
.text:00000000000048C5
.text:00000000000048C5 ; ---------------------------------------------------------------------------
.text:00000000000048CA                 align 10h
.text:00000000000048D0
.text:00000000000048D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000048D0
.text:00000000000048D0 ; Attributes: info_from_lumina
.text:00000000000048D0
.text:00000000000048D0 ; void *__fastcall xnmalloc(size_t n, size_t s)
.text:00000000000048D0                 public xnmalloc
.text:00000000000048D0 xnmalloc        proc near
.text:00000000000048D0 ; __unwind {
.text:00000000000048D0                 mov     rax, rdi
.text:00000000000048D3                 mul     rsi
.text:00000000000048D6                 mov     rdi, rax
.text:00000000000048D9                 seto    al
.text:00000000000048DC                 test    rdi, rdi
.text:00000000000048DF                 js      short loc_48EB
.text:00000000000048E1                 movzx   eax, al
.text:00000000000048E4                 test    rax, rax
.text:00000000000048E7                 jnz     short loc_48EB
.text:00000000000048E9                 jmp     short xmalloc
.text:00000000000048EB ; ---------------------------------------------------------------------------
.text:00000000000048EB
.text:00000000000048EB loc_48EB:                               ; CODE XREF: xnmalloc+F↑j
.text:00000000000048EB                                         ; xnmalloc+17↑j
.text:00000000000048EB                 sub     rsp, 8
.text:00000000000048EF                 call    xalloc_die
.text:00000000000048EF ; } // starts at 48D0
.text:00000000000048EF xnmalloc        endp
.text:00000000000048EF
.text:00000000000048EF ; ---------------------------------------------------------------------------
.text:00000000000048F4                 align 20h
.text:0000000000004900
.text:0000000000004900 ; =============== S U B R O U T I N E =======================================
.text:0000000000004900
.text:0000000000004900
.text:0000000000004900                 public xcharalloc
.text:0000000000004900 xcharalloc      proc near
.text:0000000000004900 ; __unwind {
.text:0000000000004900                 jmp     short xmalloc
.text:0000000000004900 ; } // starts at 4900
.text:0000000000004900 xcharalloc      endp
.text:0000000000004900
.text:0000000000004900 ; ---------------------------------------------------------------------------
.text:0000000000004902                 align 10h
.text:0000000000004910
.text:0000000000004910 ; =============== S U B R O U T I N E =======================================
.text:0000000000004910
.text:0000000000004910 ; Attributes: info_from_lumina
.text:0000000000004910
.text:0000000000004910 ; void *__fastcall xrealloc(void *p, size_t n)
.text:0000000000004910                 public xrealloc
.text:0000000000004910 xrealloc        proc near               ; CODE XREF: quotearg_n_options+6E↑p
.text:0000000000004910                                         ; quotearg_n_options+182↑p ...
.text:0000000000004910 ; __unwind {
.text:0000000000004910                 test    rsi, rsi
.text:0000000000004913                 push    rbx
.text:0000000000004914                 mov     rbx, rsi
.text:0000000000004917                 jnz     short loc_491E
.text:0000000000004919                 test    rdi, rdi
.text:000000000000491C                 jnz     short loc_4938
.text:000000000000491E
.text:000000000000491E loc_491E:                               ; CODE XREF: xrealloc+7↑j
.text:000000000000491E                 mov     rsi, rbx        ; size
.text:0000000000004921                 call    _realloc
.text:0000000000004926                 test    rax, rax
.text:0000000000004929                 jnz     short loc_4930
.text:000000000000492B                 test    rbx, rbx
.text:000000000000492E                 jnz     short loc_4941
.text:0000000000004930
.text:0000000000004930 loc_4930:                               ; CODE XREF: xrealloc+19↑j
.text:0000000000004930                 pop     rbx
.text:0000000000004931                 retn
.text:0000000000004931 ; ---------------------------------------------------------------------------
.text:0000000000004932                 align 8
.text:0000000000004938
.text:0000000000004938 loc_4938:                               ; CODE XREF: xrealloc+C↑j
.text:0000000000004938                 call    _free
.text:000000000000493D                 xor     eax, eax
.text:000000000000493F                 pop     rbx
.text:0000000000004940                 retn
.text:0000000000004941 ; ---------------------------------------------------------------------------
.text:0000000000004941
.text:0000000000004941 loc_4941:                               ; CODE XREF: xrealloc+1E↑j
.text:0000000000004941                 call    xalloc_die
.text:0000000000004941 ; } // starts at 4910
.text:0000000000004941 xrealloc        endp
.text:0000000000004941
.text:0000000000004941 ; ---------------------------------------------------------------------------
.text:0000000000004946                 align 10h
.text:0000000000004950
.text:0000000000004950 ; =============== S U B R O U T I N E =======================================
.text:0000000000004950
.text:0000000000004950 ; Attributes: info_from_lumina
.text:0000000000004950
.text:0000000000004950 ; void *__fastcall xnrealloc(void *p, size_t n, size_t s)
.text:0000000000004950                 public xnrealloc
.text:0000000000004950 xnrealloc       proc near
.text:0000000000004950 ; __unwind {
.text:0000000000004950                 mov     rax, rsi
.text:0000000000004953                 mul     rdx
.text:0000000000004956                 mov     rsi, rax
.text:0000000000004959                 seto    al
.text:000000000000495C                 test    rsi, rsi
.text:000000000000495F                 js      short loc_496B
.text:0000000000004961                 movzx   eax, al
.text:0000000000004964                 test    rax, rax
.text:0000000000004967                 jnz     short loc_496B
.text:0000000000004969                 jmp     short xrealloc
.text:000000000000496B ; ---------------------------------------------------------------------------
.text:000000000000496B
.text:000000000000496B loc_496B:                               ; CODE XREF: xnrealloc+F↑j
.text:000000000000496B                                         ; xnrealloc+17↑j
.text:000000000000496B                 sub     rsp, 8
.text:000000000000496F                 call    xalloc_die
.text:000000000000496F ; } // starts at 4950
.text:000000000000496F xnrealloc       endp
.text:000000000000496F
.text:000000000000496F ; ---------------------------------------------------------------------------
.text:0000000000004974                 align 20h
.text:0000000000004980
.text:0000000000004980 ; =============== S U B R O U T I N E =======================================
.text:0000000000004980
.text:0000000000004980 ; Attributes: info_from_lumina
.text:0000000000004980
.text:0000000000004980 ; void *__fastcall x2nrealloc(void *p, size_t *pn, size_t s)
.text:0000000000004980                 public x2nrealloc
.text:0000000000004980 x2nrealloc      proc near
.text:0000000000004980 ; __unwind {
.text:0000000000004980                 test    rdi, rdi
.text:0000000000004983                 mov     r9, rdx
.text:0000000000004986                 mov     rcx, [rsi]
.text:0000000000004989                 jz      short loc_49C0
.text:000000000000498B                 xor     edx, edx
.text:000000000000498D                 mov     rax, 5555555555555554h
.text:0000000000004997                 div     r9
.text:000000000000499A                 cmp     rax, rcx
.text:000000000000499D                 jbe     short loc_49DB
.text:000000000000499F                 mov     rax, rcx
.text:00000000000049A2                 shr     rax, 1
.text:00000000000049A5                 lea     rcx, [rax+rcx+1]
.text:00000000000049AA
.text:00000000000049AA loc_49AA:                               ; CODE XREF: x2nrealloc+59↓j
.text:00000000000049AA                 mov     [rsi], rcx
.text:00000000000049AD                 imul    rcx, r9
.text:00000000000049B1                 mov     rsi, rcx
.text:00000000000049B4                 jmp     xrealloc
.text:00000000000049B4 ; ---------------------------------------------------------------------------
.text:00000000000049B9                 align 20h
.text:00000000000049C0
.text:00000000000049C0 loc_49C0:                               ; CODE XREF: x2nrealloc+9↑j
.text:00000000000049C0                 test    rcx, rcx
.text:00000000000049C3                 jz      short loc_49E8
.text:00000000000049C5
.text:00000000000049C5 loc_49C5:                               ; CODE XREF: x2nrealloc+80↓j
.text:00000000000049C5                 mov     rax, rcx
.text:00000000000049C8                 mul     r9
.text:00000000000049CB                 seto    dl
.text:00000000000049CE                 test    rax, rax
.text:00000000000049D1                 movzx   edx, dl
.text:00000000000049D4                 js      short loc_49DB
.text:00000000000049D6                 test    rdx, rdx
.text:00000000000049D9                 jz      short loc_49AA
.text:00000000000049DB
.text:00000000000049DB loc_49DB:                               ; CODE XREF: x2nrealloc+1D↑j
.text:00000000000049DB                                         ; x2nrealloc+54↑j
.text:00000000000049DB                 sub     rsp, 8
.text:00000000000049DF                 call    xalloc_die
.text:00000000000049DF ; ---------------------------------------------------------------------------
.text:00000000000049E4                 align 8
.text:00000000000049E8
.text:00000000000049E8 loc_49E8:                               ; CODE XREF: x2nrealloc+43↑j
.text:00000000000049E8                 xor     edx, edx
.text:00000000000049EA                 mov     eax, 80h
.text:00000000000049EF                 xor     r8d, r8d
.text:00000000000049F2                 div     r9
.text:00000000000049F5                 test    rax, rax
.text:00000000000049F8                 setz    r8b
.text:00000000000049FC                 lea     rcx, [r8+rax]
.text:0000000000004A00                 jmp     short loc_49C5
.text:0000000000004A00 ; } // starts at 4980
.text:0000000000004A00 x2nrealloc      endp
.text:0000000000004A00
.text:0000000000004A00 ; ---------------------------------------------------------------------------
.text:0000000000004A02                 align 10h
.text:0000000000004A10
.text:0000000000004A10 ; =============== S U B R O U T I N E =======================================
.text:0000000000004A10
.text:0000000000004A10 ; Attributes: info_from_lumina
.text:0000000000004A10
.text:0000000000004A10 ; void *__fastcall x2realloc(void *p, size_t *pn)
.text:0000000000004A10                 public x2realloc
.text:0000000000004A10 x2realloc       proc near
.text:0000000000004A10 ; __unwind {
.text:0000000000004A10                 test    rdi, rdi
.text:0000000000004A13                 mov     rax, [rsi]
.text:0000000000004A16                 jz      short loc_4A40
.text:0000000000004A18                 mov     rdx, 5555555555555553h
.text:0000000000004A22                 cmp     rax, rdx
.text:0000000000004A25                 ja      short loc_4A51
.text:0000000000004A27                 mov     rdx, rax
.text:0000000000004A2A                 shr     rdx, 1
.text:0000000000004A2D                 lea     rax, [rdx+rax+1]
.text:0000000000004A32
.text:0000000000004A32 loc_4A32:                               ; CODE XREF: x2realloc+3F↓j
.text:0000000000004A32                 mov     [rsi], rax
.text:0000000000004A35                 mov     rsi, rax
.text:0000000000004A38                 jmp     xrealloc
.text:0000000000004A38 ; ---------------------------------------------------------------------------
.text:0000000000004A3D                 align 20h
.text:0000000000004A40
.text:0000000000004A40 loc_4A40:                               ; CODE XREF: x2realloc+6↑j
.text:0000000000004A40                 test    rax, rax
.text:0000000000004A43                 mov     edx, 80h
.text:0000000000004A48                 cmovz   rax, rdx
.text:0000000000004A4C                 test    rax, rax
.text:0000000000004A4F                 jns     short loc_4A32
.text:0000000000004A51
.text:0000000000004A51 loc_4A51:                               ; CODE XREF: x2realloc+15↑j
.text:0000000000004A51                 sub     rsp, 8
.text:0000000000004A55                 call    xalloc_die
.text:0000000000004A55 ; } // starts at 4A10
.text:0000000000004A55 x2realloc       endp
.text:0000000000004A55
.text:0000000000004A55 ; ---------------------------------------------------------------------------
.text:0000000000004A5A                 align 20h
.text:0000000000004A60
.text:0000000000004A60 ; =============== S U B R O U T I N E =======================================
.text:0000000000004A60
.text:0000000000004A60
.text:0000000000004A60 ; __int64 __fastcall xzalloc(size_t n)
.text:0000000000004A60                 public xzalloc
.text:0000000000004A60 xzalloc         proc near
.text:0000000000004A60 ; __unwind {
.text:0000000000004A60                 push    rbx
.text:0000000000004A61                 mov     rbx, rdi
.text:0000000000004A64                 call    xmalloc
.text:0000000000004A69                 mov     rdx, rbx        ; n
.text:0000000000004A6C                 xor     esi, esi        ; c
.text:0000000000004A6E                 mov     rdi, rax        ; s
.text:0000000000004A71                 pop     rbx
.text:0000000000004A72                 jmp     _memset
.text:0000000000004A72 ; } // starts at 4A60
.text:0000000000004A72 xzalloc         endp
.text:0000000000004A72
.text:0000000000004A72 ; ---------------------------------------------------------------------------
.text:0000000000004A77                 align 20h
.text:0000000000004A80
.text:0000000000004A80 ; =============== S U B R O U T I N E =======================================
.text:0000000000004A80
.text:0000000000004A80 ; Attributes: info_from_lumina
.text:0000000000004A80
.text:0000000000004A80 ; void *__fastcall xcalloc(size_t n, size_t s)
.text:0000000000004A80                 public xcalloc
.text:0000000000004A80 xcalloc         proc near
.text:0000000000004A80 ; __unwind {
.text:0000000000004A80                 mov     rax, rdi
.text:0000000000004A83                 sub     rsp, 8
.text:0000000000004A87                 mul     rsi
.text:0000000000004A8A                 seto    dl
.text:0000000000004A8D                 test    rax, rax
.text:0000000000004A90                 js      short loc_4AA9
.text:0000000000004A92                 movzx   edx, dl
.text:0000000000004A95                 test    rdx, rdx
.text:0000000000004A98                 jnz     short loc_4AA9
.text:0000000000004A9A                 call    _calloc
.text:0000000000004A9F                 test    rax, rax
.text:0000000000004AA2                 jz      short loc_4AA9
.text:0000000000004AA4                 add     rsp, 8
.text:0000000000004AA8                 retn
.text:0000000000004AA9 ; ---------------------------------------------------------------------------
.text:0000000000004AA9
.text:0000000000004AA9 loc_4AA9:                               ; CODE XREF: xcalloc+10↑j
.text:0000000000004AA9                                         ; xcalloc+18↑j ...
.text:0000000000004AA9                 call    xalloc_die
.text:0000000000004AA9 ; } // starts at 4A80
.text:0000000000004AA9 xcalloc         endp
.text:0000000000004AA9
.text:0000000000004AA9 ; ---------------------------------------------------------------------------
.text:0000000000004AAE                 align 10h
.text:0000000000004AB0
.text:0000000000004AB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004AB0
.text:0000000000004AB0 ; Attributes: info_from_lumina
.text:0000000000004AB0
.text:0000000000004AB0 ; void *__fastcall xmemdup(const void *p, size_t s)
.text:0000000000004AB0                 public xmemdup
.text:0000000000004AB0 xmemdup         proc near               ; CODE XREF: clone_quoting_options+28↑p
.text:0000000000004AB0                                         ; xstrdup+11↓j
.text:0000000000004AB0 ; __unwind {
.text:0000000000004AB0                 push    rbp
.text:0000000000004AB1                 push    rbx
.text:0000000000004AB2                 mov     rbp, rdi
.text:0000000000004AB5                 mov     rdi, rsi
.text:0000000000004AB8                 mov     rbx, rsi
.text:0000000000004ABB                 sub     rsp, 8
.text:0000000000004ABF                 call    xmalloc
.text:0000000000004AC4                 add     rsp, 8
.text:0000000000004AC8                 mov     rdx, rbx        ; n
.text:0000000000004ACB                 mov     rsi, rbp        ; src
.text:0000000000004ACE                 pop     rbx
.text:0000000000004ACF                 pop     rbp
.text:0000000000004AD0                 mov     rdi, rax        ; dest
.text:0000000000004AD3                 jmp     _memcpy
.text:0000000000004AD3 ; } // starts at 4AB0
.text:0000000000004AD3 xmemdup         endp
.text:0000000000004AD3
.text:0000000000004AD3 ; ---------------------------------------------------------------------------
.text:0000000000004AD8                 align 20h
.text:0000000000004AE0
.text:0000000000004AE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004AE0
.text:0000000000004AE0
.text:0000000000004AE0 ; __int64 __fastcall xstrdup(void *src)
.text:0000000000004AE0                 public xstrdup
.text:0000000000004AE0 xstrdup         proc near               ; CODE XREF: operand2sig:loc_2360↑p
.text:0000000000004AE0 ; __unwind {
.text:0000000000004AE0                 push    rbx
.text:0000000000004AE1                 mov     rbx, rdi
.text:0000000000004AE4                 call    _strlen
.text:0000000000004AE9                 mov     rdi, rbx        ; src
.text:0000000000004AEC                 lea     rsi, [rax+1]    ; n
.text:0000000000004AF0                 pop     rbx
.text:0000000000004AF1                 jmp     short xmemdup
.text:0000000000004AF1 ; } // starts at 4AE0
.text:0000000000004AF1 xstrdup         endp
.text:0000000000004AF1
.text:0000000000004AF1 ; ---------------------------------------------------------------------------
.text:0000000000004AF3                 align 20h
.text:0000000000004B00
.text:0000000000004B00 ; =============== S U B R O U T I N E =======================================
.text:0000000000004B00
.text:0000000000004B00 ; Attributes: noreturn info_from_lumina
.text:0000000000004B00
.text:0000000000004B00 ; void __cdecl xalloc_die()
.text:0000000000004B00                 public xalloc_die
.text:0000000000004B00 xalloc_die      proc near               ; CODE XREF: quotearg_n_options:loc_3AD6↑p
.text:0000000000004B00                                         ; xmalloc:loc_48C5↑p ...
.text:0000000000004B00 ; __unwind {
.text:0000000000004B00                 lea     rsi, aMemoryExhauste ; "memory exhausted"
.text:0000000000004B07                 sub     rsp, 8
.text:0000000000004B0B                 mov     edx, 5          ; category
.text:0000000000004B10                 xor     edi, edi        ; domainname
.text:0000000000004B12                 call    _dcgettext
.text:0000000000004B17                 mov     edi, cs:exit_failure ; status
.text:0000000000004B1D                 lea     rdx, format+4   ; format
.text:0000000000004B24                 mov     rcx, rax
.text:0000000000004B27                 xor     esi, esi        ; errnum
.text:0000000000004B29                 xor     eax, eax
.text:0000000000004B2B                 call    _error
.text:0000000000004B30                 call    _abort
.text:0000000000004B30 ; } // starts at 4B00
.text:0000000000004B30 xalloc_die      endp
.text:0000000000004B30
.text:0000000000004B30 ; ---------------------------------------------------------------------------
.text:0000000000004B35                 align 20h
.text:0000000000004B40
.text:0000000000004B40 ; =============== S U B R O U T I N E =======================================
.text:0000000000004B40
.text:0000000000004B40 ; Attributes: info_from_lumina
.text:0000000000004B40
.text:0000000000004B40 ; size_t __fastcall rpl_mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
.text:0000000000004B40                 public rpl_mbrtowc
.text:0000000000004B40 rpl_mbrtowc     proc near               ; CODE XREF: quotearg_buffer_restyled+956↑p
.text:0000000000004B40
.text:0000000000004B40 pwc             = dword ptr -34h
.text:0000000000004B40 var_30          = qword ptr -30h
.text:0000000000004B40
.text:0000000000004B40 ; __unwind {
.text:0000000000004B40                 push    r13
.text:0000000000004B42                 push    r12
.text:0000000000004B44                 mov     r13, rsi
.text:0000000000004B47                 push    rbp
.text:0000000000004B48                 push    rbx
.text:0000000000004B49                 mov     rbx, rdi
.text:0000000000004B4C                 mov     r12, rdx
.text:0000000000004B4F                 sub     rsp, 18h
.text:0000000000004B53                 mov     rax, fs:28h
.text:0000000000004B5C                 mov     [rsp+38h+var_30], rax
.text:0000000000004B61                 xor     eax, eax
.text:0000000000004B63                 lea     rax, [rsp+38h+pwc]
.text:0000000000004B68                 test    rdi, rdi
.text:0000000000004B6B                 cmovz   rbx, rax
.text:0000000000004B6F                 mov     rdi, rbx        ; pwc
.text:0000000000004B72                 call    _mbrtowc
.text:0000000000004B77                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:0000000000004B7B                 mov     rbp, rax
.text:0000000000004B7E                 jbe     short loc_4BA0
.text:0000000000004B80                 test    r12, r12
.text:0000000000004B83                 jz      short loc_4BA0
.text:0000000000004B85                 xor     edi, edi
.text:0000000000004B87                 call    hard_locale
.text:0000000000004B8C                 test    al, al
.text:0000000000004B8E                 jnz     short loc_4BA0
.text:0000000000004B90                 movzx   eax, byte ptr [r13+0]
.text:0000000000004B95                 mov     ebp, 1
.text:0000000000004B9A                 mov     [rbx], eax
.text:0000000000004B9C                 nop     dword ptr [rax+00h]
.text:0000000000004BA0
.text:0000000000004BA0 loc_4BA0:                               ; CODE XREF: rpl_mbrtowc+3E↑j
.text:0000000000004BA0                                         ; rpl_mbrtowc+43↑j ...
.text:0000000000004BA0                 mov     rdx, [rsp+38h+var_30]
.text:0000000000004BA5                 xor     rdx, fs:28h
.text:0000000000004BAE                 mov     rax, rbp
.text:0000000000004BB1                 jnz     short loc_4BBE
.text:0000000000004BB3                 add     rsp, 18h
.text:0000000000004BB7                 pop     rbx
.text:0000000000004BB8                 pop     rbp
.text:0000000000004BB9                 pop     r12
.text:0000000000004BBB                 pop     r13
.text:0000000000004BBD                 retn
.text:0000000000004BBE ; ---------------------------------------------------------------------------
.text:0000000000004BBE
.text:0000000000004BBE loc_4BBE:                               ; CODE XREF: rpl_mbrtowc+71↑j
.text:0000000000004BBE                 call    ___stack_chk_fail
.text:0000000000004BBE ; } // starts at 4B40
.text:0000000000004BBE rpl_mbrtowc     endp
.text:0000000000004BBE
.text:0000000000004BBE ; ---------------------------------------------------------------------------
.text:0000000000004BC3                 align 10h
.text:0000000000004BD0
.text:0000000000004BD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004BD0
.text:0000000000004BD0
.text:0000000000004BD0 ; __int64 __fastcall str2sig(char *s2)
.text:0000000000004BD0                 public str2sig
.text:0000000000004BD0 str2sig         proc near               ; CODE XREF: operand2sig+10D↑p
.text:0000000000004BD0                                         ; operand2sig+19D↑p
.text:0000000000004BD0
.text:0000000000004BD0 var_38          = qword ptr -38h
.text:0000000000004BD0 var_30          = qword ptr -30h
.text:0000000000004BD0
.text:0000000000004BD0 ; __unwind {
.text:0000000000004BD0                 push    r13
.text:0000000000004BD2                 push    r12
.text:0000000000004BD4                 mov     r13, rsi
.text:0000000000004BD7                 push    rbp
.text:0000000000004BD8                 push    rbx
.text:0000000000004BD9                 xor     ebx, ebx
.text:0000000000004BDB                 mov     r12, rdi
.text:0000000000004BDE                 lea     rbp, nptr       ; "HUP"
.text:0000000000004BE5                 sub     rsp, 18h
.text:0000000000004BE9                 mov     rax, fs:28h
.text:0000000000004BF2                 mov     [rsp+38h+var_30], rax
.text:0000000000004BF7                 xor     eax, eax
.text:0000000000004BF9                 movsx   eax, byte ptr [rdi]
.text:0000000000004BFC                 sub     eax, 30h ; '0'
.text:0000000000004BFF                 cmp     eax, 9
.text:0000000000004C02                 ja      short loc_4C1C
.text:0000000000004C04                 jmp     short loc_4C60
.text:0000000000004C04 ; ---------------------------------------------------------------------------
.text:0000000000004C06                 align 10h
.text:0000000000004C10
.text:0000000000004C10 loc_4C10:                               ; CODE XREF: str2sig+59↓j
.text:0000000000004C10                 add     ebx, 1
.text:0000000000004C13                 add     rbp, 0Ch
.text:0000000000004C17                 cmp     ebx, 23h ; '#'
.text:0000000000004C1A                 jz      short loc_4C90
.text:0000000000004C1C
.text:0000000000004C1C loc_4C1C:                               ; CODE XREF: str2sig+32↑j
.text:0000000000004C1C                 mov     rsi, r12        ; s2
.text:0000000000004C1F                 mov     rdi, rbp        ; nptr
.text:0000000000004C22                 call    _strcmp
.text:0000000000004C27                 test    eax, eax
.text:0000000000004C29                 jnz     short loc_4C10
.text:0000000000004C2B                 lea     rdx, [rbx+rbx*2]
.text:0000000000004C2F                 lea     rax, numname_table
.text:0000000000004C36                 mov     eax, [rax+rdx*4]
.text:0000000000004C39
.text:0000000000004C39 loc_4C39:                               ; CODE XREF: str2sig+AA↓j
.text:0000000000004C39                                         ; str2sig+13E↓j ...
.text:0000000000004C39                 mov     [r13+0], eax
.text:0000000000004C3D                 sar     eax, 1Fh
.text:0000000000004C40
.text:0000000000004C40 loc_4C40:                               ; CODE XREF: str2sig+B9↓j
.text:0000000000004C40                 mov     rcx, [rsp+38h+var_30]
.text:0000000000004C45                 xor     rcx, fs:28h
.text:0000000000004C4E                 jnz     loc_4D50
.text:0000000000004C54                 add     rsp, 18h
.text:0000000000004C58                 pop     rbx
.text:0000000000004C59                 pop     rbp
.text:0000000000004C5A                 pop     r12
.text:0000000000004C5C                 pop     r13
.text:0000000000004C5E                 retn
.text:0000000000004C5E ; ---------------------------------------------------------------------------
.text:0000000000004C5F                 align 20h
.text:0000000000004C60
.text:0000000000004C60 loc_4C60:                               ; CODE XREF: str2sig+34↑j
.text:0000000000004C60                 mov     edx, 0Ah        ; base
.text:0000000000004C65                 mov     rsi, rsp        ; endptr
.text:0000000000004C68                 call    _strtol
.text:0000000000004C6D                 mov     rdx, [rsp+38h+var_38]
.text:0000000000004C71                 cmp     byte ptr [rdx], 0
.text:0000000000004C74                 jnz     short loc_4C7C
.text:0000000000004C76                 cmp     rax, 40h ; '@'
.text:0000000000004C7A                 jle     short loc_4C39
.text:0000000000004C7C
.text:0000000000004C7C loc_4C7C:                               ; CODE XREF: str2sig+A4↑j
.text:0000000000004C7C                                         ; str2sig+EE↓j ...
.text:0000000000004C7C                 mov     dword ptr [r13+0], 0FFFFFFFFh
.text:0000000000004C84                 mov     eax, 0FFFFFFFFh
.text:0000000000004C89                 jmp     short loc_4C40
.text:0000000000004C89 ; ---------------------------------------------------------------------------
.text:0000000000004C8B                 align 10h
.text:0000000000004C90
.text:0000000000004C90 loc_4C90:                               ; CODE XREF: str2sig+4A↑j
.text:0000000000004C90                 call    ___libc_current_sigrtmin
.text:0000000000004C95                 mov     ebp, eax
.text:0000000000004C97                 call    ___libc_current_sigrtmax
.text:0000000000004C9C                 test    ebp, ebp
.text:0000000000004C9E                 mov     ebx, eax
.text:0000000000004CA0                 jle     short loc_4CBC
.text:0000000000004CA2                 lea     rdi, aRtmin     ; "RTMIN"
.text:0000000000004CA9                 mov     ecx, 5
.text:0000000000004CAE                 mov     rsi, r12
.text:0000000000004CB1                 repe cmpsb
.text:0000000000004CB3                 setnbe  al
.text:0000000000004CB6                 sbb     al, 0
.text:0000000000004CB8                 test    al, al
.text:0000000000004CBA                 jz      short loc_4D13
.text:0000000000004CBC
.text:0000000000004CBC loc_4CBC:                               ; CODE XREF: str2sig+D0↑j
.text:0000000000004CBC                 test    ebx, ebx
.text:0000000000004CBE                 jle     short loc_4C7C
.text:0000000000004CC0                 lea     rdi, aRtmax     ; "RTMAX"
.text:0000000000004CC7                 mov     ecx, 5
.text:0000000000004CCC                 mov     rsi, r12
.text:0000000000004CCF                 repe cmpsb
.text:0000000000004CD1                 setnbe  al
.text:0000000000004CD4                 sbb     al, 0
.text:0000000000004CD6                 test    al, al
.text:0000000000004CD8                 jnz     short loc_4C7C
.text:0000000000004CDA                 lea     rdi, [r12+5]    ; nptr
.text:0000000000004CDF                 mov     edx, 0Ah        ; base
.text:0000000000004CE4                 mov     rsi, rsp        ; endptr
.text:0000000000004CE7                 call    _strtol
.text:0000000000004CEC                 mov     rdx, [rsp+38h+var_38]
.text:0000000000004CF0                 cmp     byte ptr [rdx], 0
.text:0000000000004CF3                 jnz     short loc_4C7C
.text:0000000000004CF5                 sub     ebp, ebx
.text:0000000000004CF7                 movsxd  rbp, ebp
.text:0000000000004CFA                 cmp     rax, rbp
.text:0000000000004CFD                 jl      loc_4C7C
.text:0000000000004D03                 test    rax, rax
.text:0000000000004D06                 jg      loc_4C7C
.text:0000000000004D0C                 add     eax, ebx
.text:0000000000004D0E                 jmp     loc_4C39
.text:0000000000004D13 ; ---------------------------------------------------------------------------
.text:0000000000004D13
.text:0000000000004D13 loc_4D13:                               ; CODE XREF: str2sig+EA↑j
.text:0000000000004D13                 lea     rdi, [r12+5]    ; nptr
.text:0000000000004D18                 mov     edx, 0Ah        ; base
.text:0000000000004D1D                 mov     rsi, rsp        ; endptr
.text:0000000000004D20                 call    _strtol
.text:0000000000004D25                 mov     rdx, [rsp+38h+var_38]
.text:0000000000004D29                 cmp     byte ptr [rdx], 0
.text:0000000000004D2C                 jnz     loc_4C7C
.text:0000000000004D32                 test    rax, rax
.text:0000000000004D35                 js      loc_4C7C
.text:0000000000004D3B                 sub     ebx, ebp
.text:0000000000004D3D                 movsxd  rdx, ebx
.text:0000000000004D40                 cmp     rax, rdx
.text:0000000000004D43                 jg      loc_4C7C
.text:0000000000004D49                 add     eax, ebp
.text:0000000000004D4B                 jmp     loc_4C39
.text:0000000000004D50 ; ---------------------------------------------------------------------------
.text:0000000000004D50
.text:0000000000004D50 loc_4D50:                               ; CODE XREF: str2sig+7E↑j
.text:0000000000004D50                 call    ___stack_chk_fail
.text:0000000000004D50 ; } // starts at 4BD0
.text:0000000000004D50 str2sig         endp
.text:0000000000004D50
.text:0000000000004D50 ; ---------------------------------------------------------------------------
.text:0000000000004D55                 align 20h
.text:0000000000004D60
.text:0000000000004D60 ; =============== S U B R O U T I N E =======================================
.text:0000000000004D60
.text:0000000000004D60
.text:0000000000004D60                 public sig2str
.text:0000000000004D60 sig2str         proc near               ; CODE XREF: main+365↑p
.text:0000000000004D60                                         ; main+4A9↑p ...
.text:0000000000004D60
.text:0000000000004D60 var_20          = qword ptr -20h
.text:0000000000004D60
.text:0000000000004D60 ; __unwind {
.text:0000000000004D60                 push    rbp
.text:0000000000004D61                 lea     rax, numname_table
.text:0000000000004D68                 push    rbx
.text:0000000000004D69                 xor     edx, edx
.text:0000000000004D6B                 mov     ebx, edi
.text:0000000000004D6D                 mov     rdi, rsi        ; dest
.text:0000000000004D70                 sub     rsp, 18h
.text:0000000000004D74                 mov     rcx, rax
.text:0000000000004D77                 jmp     short loc_4D8C
.text:0000000000004D77 ; ---------------------------------------------------------------------------
.text:0000000000004D79                 align 20h
.text:0000000000004D80
.text:0000000000004D80 loc_4D80:                               ; CODE XREF: sig2str+2E↓j
.text:0000000000004D80                 add     edx, 1
.text:0000000000004D83                 add     rcx, 0Ch
.text:0000000000004D87                 cmp     edx, 23h ; '#'
.text:0000000000004D8A                 jz      short loc_4DB0
.text:0000000000004D8C
.text:0000000000004D8C loc_4D8C:                               ; CODE XREF: sig2str+17↑j
.text:0000000000004D8C                 cmp     [rcx], ebx
.text:0000000000004D8E                 jnz     short loc_4D80
.text:0000000000004D90                 lea     rdx, [rdx+rdx*2]
.text:0000000000004D94                 lea     rsi, [rax+rdx*4+4] ; src
.text:0000000000004D99                 call    _strcpy
.text:0000000000004D9E                 xor     eax, eax
.text:0000000000004DA0
.text:0000000000004DA0 loc_4DA0:                               ; CODE XREF: sig2str+8F↓j
.text:0000000000004DA0                                         ; sig2str+D6↓j
.text:0000000000004DA0                 add     rsp, 18h
.text:0000000000004DA4                 pop     rbx
.text:0000000000004DA5                 pop     rbp
.text:0000000000004DA6                 retn
.text:0000000000004DA6 ; ---------------------------------------------------------------------------
.text:0000000000004DA7                 align 10h
.text:0000000000004DB0
.text:0000000000004DB0 loc_4DB0:                               ; CODE XREF: sig2str+2A↑j
.text:0000000000004DB0                 mov     [rsp+28h+var_20], rdi
.text:0000000000004DB5                 call    ___libc_current_sigrtmin
.text:0000000000004DBA                 mov     ebp, eax
.text:0000000000004DBC                 call    ___libc_current_sigrtmax
.text:0000000000004DC1                 cmp     ebp, ebx
.text:0000000000004DC3                 jg      short loc_4E31
.text:0000000000004DC5                 cmp     eax, ebx
.text:0000000000004DC7                 jl      short loc_4E31
.text:0000000000004DC9                 mov     edx, eax
.text:0000000000004DCB                 mov     rdi, [rsp+28h+var_20]
.text:0000000000004DD0                 sub     edx, ebp
.text:0000000000004DD2                 sar     edx, 1
.text:0000000000004DD4                 add     edx, ebp
.text:0000000000004DD6                 cmp     edx, ebx
.text:0000000000004DD8                 jge     short loc_4E20
.text:0000000000004DDA                 mov     edx, 58h ; 'X'
.text:0000000000004DDF                 mov     dword ptr [rdi], 414D5452h
.text:0000000000004DE5                 mov     ebp, eax
.text:0000000000004DE7                 mov     [rdi+4], dx
.text:0000000000004DEB
.text:0000000000004DEB loc_4DEB:                               ; CODE XREF: sig2str+CF↓j
.text:0000000000004DEB                 mov     eax, ebx
.text:0000000000004DED                 sub     eax, ebp
.text:0000000000004DEF                 jz      short loc_4DA0
.text:0000000000004DF1                 lea     rcx, aD_0       ; "%+d"
.text:0000000000004DF8                 mov     r8d, eax
.text:0000000000004DFB                 add     rdi, 5
.text:0000000000004DFF                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004E06                 mov     esi, 1
.text:0000000000004E0B                 xor     eax, eax
.text:0000000000004E0D                 call    ___sprintf_chk
.text:0000000000004E12                 add     rsp, 18h
.text:0000000000004E16                 xor     eax, eax
.text:0000000000004E18                 pop     rbx
.text:0000000000004E19                 pop     rbp
.text:0000000000004E1A                 retn
.text:0000000000004E1A ; ---------------------------------------------------------------------------
.text:0000000000004E1B                 align 20h
.text:0000000000004E20
.text:0000000000004E20 loc_4E20:                               ; CODE XREF: sig2str+78↑j
.text:0000000000004E20                 mov     ecx, 4Eh ; 'N'
.text:0000000000004E25                 mov     dword ptr [rdi], 494D5452h
.text:0000000000004E2B                 mov     [rdi+4], cx
.text:0000000000004E2F                 jmp     short loc_4DEB
.text:0000000000004E31 ; ---------------------------------------------------------------------------
.text:0000000000004E31
.text:0000000000004E31 loc_4E31:                               ; CODE XREF: sig2str+63↑j
.text:0000000000004E31                                         ; sig2str+67↑j
.text:0000000000004E31                 mov     eax, 0FFFFFFFFh
.text:0000000000004E36                 jmp     loc_4DA0
.text:0000000000004E36 ; } // starts at 4D60
.text:0000000000004E36 sig2str         endp
.text:0000000000004E36
.text:0000000000004E36 ; ---------------------------------------------------------------------------
.text:0000000000004E3B                 align 20h
.text:0000000000004E40
.text:0000000000004E40 ; =============== S U B R O U T I N E =======================================
.text:0000000000004E40
.text:0000000000004E40 ; Attributes: info_from_lumina
.text:0000000000004E40
.text:0000000000004E40 ; int __fastcall close_stream(FILE *stream)
.text:0000000000004E40                 public close_stream
.text:0000000000004E40 close_stream    proc near               ; CODE XREF: close_stdout+D↑p
.text:0000000000004E40                                         ; close_stdout+33↑p
.text:0000000000004E40 ; __unwind {
.text:0000000000004E40                 push    r12
.text:0000000000004E42                 push    rbp
.text:0000000000004E43                 mov     rbp, rdi
.text:0000000000004E46                 push    rbx
.text:0000000000004E47                 call    ___fpending
.text:0000000000004E4C                 mov     ebx, [rbp+0]
.text:0000000000004E4F                 mov     rdi, rbp        ; stream
.text:0000000000004E52                 mov     r12, rax
.text:0000000000004E55                 call    rpl_fclose
.text:0000000000004E5A                 and     ebx, 20h
.text:0000000000004E5D                 test    ebx, ebx
.text:0000000000004E5F                 jnz     short loc_4E78
.text:0000000000004E61                 test    eax, eax
.text:0000000000004E63                 jz      short loc_4E6F
.text:0000000000004E65                 test    r12, r12
.text:0000000000004E68                 mov     eax, 0FFFFFFFFh
.text:0000000000004E6D                 jz      short loc_4EA8
.text:0000000000004E6F
.text:0000000000004E6F loc_4E6F:                               ; CODE XREF: close_stream+23↑j
.text:0000000000004E6F                 pop     rbx
.text:0000000000004E70                 pop     rbp
.text:0000000000004E71                 pop     r12
.text:0000000000004E73                 retn
.text:0000000000004E73 ; ---------------------------------------------------------------------------
.text:0000000000004E74                 align 8
.text:0000000000004E78
.text:0000000000004E78 loc_4E78:                               ; CODE XREF: close_stream+1F↑j
.text:0000000000004E78                 test    eax, eax
.text:0000000000004E7A                 jnz     short loc_4E98
.text:0000000000004E7C                 call    ___errno_location
.text:0000000000004E81                 mov     dword ptr [rax], 0
.text:0000000000004E87                 mov     eax, 0FFFFFFFFh
.text:0000000000004E8C                 pop     rbx
.text:0000000000004E8D                 pop     rbp
.text:0000000000004E8E                 pop     r12
.text:0000000000004E90                 retn
.text:0000000000004E90 ; ---------------------------------------------------------------------------
.text:0000000000004E91                 align 8
.text:0000000000004E98
.text:0000000000004E98 loc_4E98:                               ; CODE XREF: close_stream+3A↑j
.text:0000000000004E98                 pop     rbx
.text:0000000000004E99                 mov     eax, 0FFFFFFFFh
.text:0000000000004E9E                 pop     rbp
.text:0000000000004E9F                 pop     r12
.text:0000000000004EA1                 retn
.text:0000000000004EA1 ; ---------------------------------------------------------------------------
.text:0000000000004EA2                 align 8
.text:0000000000004EA8
.text:0000000000004EA8 loc_4EA8:                               ; CODE XREF: close_stream+2D↑j
.text:0000000000004EA8                 call    ___errno_location
.text:0000000000004EAD                 cmp     dword ptr [rax], 9
.text:0000000000004EB0                 pop     rbx
.text:0000000000004EB1                 pop     rbp
.text:0000000000004EB2                 pop     r12
.text:0000000000004EB4                 setnz   al
.text:0000000000004EB7                 movzx   eax, al
.text:0000000000004EBA                 neg     eax
.text:0000000000004EBC                 retn
.text:0000000000004EBC ; } // starts at 4E40
.text:0000000000004EBC close_stream    endp
.text:0000000000004EBC
.text:0000000000004EBC ; ---------------------------------------------------------------------------
.text:0000000000004EBD                 align 20h
.text:0000000000004EC0
.text:0000000000004EC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004EC0
.text:0000000000004EC0
.text:0000000000004EC0                 public hard_locale
.text:0000000000004EC0 hard_locale     proc near               ; CODE XREF: rpl_mbrtowc+47↑p
.text:0000000000004EC0 ; __unwind {
.text:0000000000004EC0                 sub     rsp, 8
.text:0000000000004EC4                 xor     esi, esi        ; locale
.text:0000000000004EC6                 call    _setlocale
.text:0000000000004ECB                 mov     rdx, rax
.text:0000000000004ECE                 mov     eax, 1
.text:0000000000004ED3                 test    rdx, rdx
.text:0000000000004ED6                 jz      short loc_4EF5
.text:0000000000004ED8                 lea     rdi, aC         ; "C"
.text:0000000000004EDF                 mov     ecx, 2
.text:0000000000004EE4                 mov     rsi, rdx
.text:0000000000004EE7                 repe cmpsb
.text:0000000000004EE9                 setnbe  cl
.text:0000000000004EEC                 sbb     cl, 0
.text:0000000000004EEF                 xor     eax, eax
.text:0000000000004EF1                 test    cl, cl
.text:0000000000004EF3                 jnz     short loc_4F00
.text:0000000000004EF5
.text:0000000000004EF5 loc_4EF5:                               ; CODE XREF: hard_locale+16↑j
.text:0000000000004EF5                 add     rsp, 8
.text:0000000000004EF9                 retn
.text:0000000000004EF9 ; ---------------------------------------------------------------------------
.text:0000000000004EFA                 align 20h
.text:0000000000004F00
.text:0000000000004F00 loc_4F00:                               ; CODE XREF: hard_locale+33↑j
.text:0000000000004F00                 lea     rdi, aPosix     ; "POSIX"
.text:0000000000004F07                 mov     ecx, 6
.text:0000000000004F0C                 mov     rsi, rdx
.text:0000000000004F0F                 repe cmpsb
.text:0000000000004F11                 setnbe  al
.text:0000000000004F14                 sbb     al, 0
.text:0000000000004F16                 test    al, al
.text:0000000000004F18                 setnz   al
.text:0000000000004F1B                 add     rsp, 8
.text:0000000000004F1F                 retn
.text:0000000000004F1F ; } // starts at 4EC0
.text:0000000000004F1F hard_locale     endp
.text:0000000000004F1F
.text:0000000000004F20
.text:0000000000004F20 ; =============== S U B R O U T I N E =======================================
.text:0000000000004F20
.text:0000000000004F20
.text:0000000000004F20                 public locale_charset
.text:0000000000004F20 locale_charset  proc near               ; CODE XREF: gettext_quote+B↑p
.text:0000000000004F20 ; __unwind {
.text:0000000000004F20                 sub     rsp, 8
.text:0000000000004F24                 mov     edi, 0Eh        ; item
.text:0000000000004F29                 call    _nl_langinfo
.text:0000000000004F2E                 test    rax, rax
.text:0000000000004F31                 jz      short loc_4F50
.text:0000000000004F33                 cmp     byte ptr [rax], 0
.text:0000000000004F36                 lea     rdx, aAscii     ; "ASCII"
.text:0000000000004F3D                 cmovz   rax, rdx
.text:0000000000004F41                 add     rsp, 8
.text:0000000000004F45                 retn
.text:0000000000004F45 ; ---------------------------------------------------------------------------
.text:0000000000004F46                 align 10h
.text:0000000000004F50
.text:0000000000004F50 loc_4F50:                               ; CODE XREF: locale_charset+11↑j
.text:0000000000004F50                 lea     rax, aAscii     ; "ASCII"
.text:0000000000004F57                 add     rsp, 8
.text:0000000000004F5B                 retn
.text:0000000000004F5B ; } // starts at 4F20
.text:0000000000004F5B locale_charset  endp
.text:0000000000004F5B
.text:0000000000004F5B ; ---------------------------------------------------------------------------
.text:0000000000004F5C                 align 20h
.text:0000000000004F60
.text:0000000000004F60 ; =============== S U B R O U T I N E =======================================
.text:0000000000004F60
.text:0000000000004F60 ; Attributes: info_from_lumina
.text:0000000000004F60
.text:0000000000004F60 ; int __fastcall rpl_fclose(FILE *fp)
.text:0000000000004F60                 public rpl_fclose
.text:0000000000004F60 rpl_fclose      proc near               ; CODE XREF: close_stream+15↑p
.text:0000000000004F60 ; __unwind {
.text:0000000000004F60                 push    r12
.text:0000000000004F62                 push    rbp
.text:0000000000004F63                 push    rbx
.text:0000000000004F64                 mov     rbx, rdi
.text:0000000000004F67                 call    _fileno
.text:0000000000004F6C                 test    eax, eax
.text:0000000000004F6E                 mov     rdi, rbx        ; fp
.text:0000000000004F71                 js      short loc_4FC7
.text:0000000000004F73                 call    ___freading
.text:0000000000004F78                 test    eax, eax
.text:0000000000004F7A                 jnz     short loc_4FA8
.text:0000000000004F7C
.text:0000000000004F7C loc_4F7C:                               ; CODE XREF: rpl_fclose+62↓j
.text:0000000000004F7C                 mov     rdi, rbx        ; stream
.text:0000000000004F7F                 call    rpl_fflush
.text:0000000000004F84                 test    eax, eax
.text:0000000000004F86                 jz      short loc_4FC4
.text:0000000000004F88                 call    ___errno_location
.text:0000000000004F8D                 mov     r12d, [rax]
.text:0000000000004F90                 mov     rdi, rbx        ; stream
.text:0000000000004F93                 mov     rbp, rax
.text:0000000000004F96                 call    _fclose
.text:0000000000004F9B                 test    r12d, r12d
.text:0000000000004F9E                 jnz     short loc_4FD0
.text:0000000000004FA0
.text:0000000000004FA0 loc_4FA0:                               ; CODE XREF: rpl_fclose+79↓j
.text:0000000000004FA0                 pop     rbx
.text:0000000000004FA1                 pop     rbp
.text:0000000000004FA2                 pop     r12
.text:0000000000004FA4                 retn
.text:0000000000004FA4 ; ---------------------------------------------------------------------------
.text:0000000000004FA5                 align 8
.text:0000000000004FA8
.text:0000000000004FA8 loc_4FA8:                               ; CODE XREF: rpl_fclose+1A↑j
.text:0000000000004FA8                 mov     rdi, rbx        ; stream
.text:0000000000004FAB                 call    _fileno
.text:0000000000004FB0                 xor     esi, esi        ; offset
.text:0000000000004FB2                 mov     edx, 1          ; whence
.text:0000000000004FB7                 mov     edi, eax        ; fd
.text:0000000000004FB9                 call    _lseek
.text:0000000000004FBE                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000004FC2                 jnz     short loc_4F7C
.text:0000000000004FC4
.text:0000000000004FC4 loc_4FC4:                               ; CODE XREF: rpl_fclose+26↑j
.text:0000000000004FC4                 mov     rdi, rbx        ; stream
.text:0000000000004FC7
.text:0000000000004FC7 loc_4FC7:                               ; CODE XREF: rpl_fclose+11↑j
.text:0000000000004FC7                 pop     rbx
.text:0000000000004FC8                 pop     rbp
.text:0000000000004FC9                 pop     r12
.text:0000000000004FCB                 jmp     _fclose
.text:0000000000004FD0 ; ---------------------------------------------------------------------------
.text:0000000000004FD0
.text:0000000000004FD0 loc_4FD0:                               ; CODE XREF: rpl_fclose+3E↑j
.text:0000000000004FD0                 mov     [rbp+0], r12d
.text:0000000000004FD4                 mov     eax, 0FFFFFFFFh
.text:0000000000004FD9                 jmp     short loc_4FA0
.text:0000000000004FD9 ; } // starts at 4F60
.text:0000000000004FD9 rpl_fclose      endp
.text:0000000000004FD9
.text:0000000000004FD9 ; ---------------------------------------------------------------------------
.text:0000000000004FDB                 align 20h
.text:0000000000004FE0
.text:0000000000004FE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004FE0
.text:0000000000004FE0 ; Attributes: info_from_lumina
.text:0000000000004FE0
.text:0000000000004FE0 ; int __fastcall rpl_fflush(FILE *stream)
.text:0000000000004FE0                 public rpl_fflush
.text:0000000000004FE0 rpl_fflush      proc near               ; CODE XREF: rpl_fclose+1F↑p
.text:0000000000004FE0 ; __unwind {
.text:0000000000004FE0                 test    rdi, rdi
.text:0000000000004FE3                 push    rbx
.text:0000000000004FE4                 mov     rbx, rdi
.text:0000000000004FE7                 jz      short loc_4FFA
.text:0000000000004FE9                 call    ___freading
.text:0000000000004FEE                 test    eax, eax
.text:0000000000004FF0                 jz      short loc_4FFA
.text:0000000000004FF2                 test    dword ptr [rbx], 100h
.text:0000000000004FF8                 jnz     short loc_5008
.text:0000000000004FFA
.text:0000000000004FFA loc_4FFA:                               ; CODE XREF: rpl_fflush+7↑j
.text:0000000000004FFA                                         ; rpl_fflush+10↑j
.text:0000000000004FFA                 mov     rdi, rbx        ; stream
.text:0000000000004FFD                 pop     rbx
.text:0000000000004FFE                 jmp     _fflush
.text:0000000000004FFE ; ---------------------------------------------------------------------------
.text:0000000000005003                 align 8
.text:0000000000005008
.text:0000000000005008 loc_5008:                               ; CODE XREF: rpl_fflush+18↑j
.text:0000000000005008                 mov     rdi, rbx
.text:000000000000500B                 mov     edx, 1
.text:0000000000005010                 xor     esi, esi
.text:0000000000005012                 call    rpl_fseeko
.text:0000000000005017                 mov     rdi, rbx        ; stream
.text:000000000000501A                 pop     rbx
.text:000000000000501B                 jmp     _fflush
.text:000000000000501B ; } // starts at 4FE0
.text:000000000000501B rpl_fflush      endp
.text:000000000000501B
.text:0000000000005020
.text:0000000000005020 ; =============== S U B R O U T I N E =======================================
.text:0000000000005020
.text:0000000000005020 ; Attributes: info_from_lumina
.text:0000000000005020
.text:0000000000005020 ; int __fastcall rpl_fseeko(FILE *fp, off_t offset, int whence)
.text:0000000000005020                 public rpl_fseeko
.text:0000000000005020 rpl_fseeko      proc near               ; CODE XREF: rpl_fflush+32↑p
.text:0000000000005020 ; __unwind {
.text:0000000000005020                 mov     rax, [rdi+8]
.text:0000000000005024                 cmp     [rdi+10h], rax
.text:0000000000005028                 jz      short loc_5030
.text:000000000000502A
.text:000000000000502A loc_502A:                               ; CODE XREF: rpl_fseeko+18↓j
.text:000000000000502A                                         ; rpl_fseeko+1F↓j
.text:000000000000502A                 jmp     _fseeko
.text:000000000000502A ; ---------------------------------------------------------------------------
.text:000000000000502F                 align 10h
.text:0000000000005030
.text:0000000000005030 loc_5030:                               ; CODE XREF: rpl_fseeko+8↑j
.text:0000000000005030                 mov     rax, [rdi+20h]
.text:0000000000005034                 cmp     [rdi+28h], rax
.text:0000000000005038                 jnz     short loc_502A
.text:000000000000503A                 cmp     qword ptr [rdi+48h], 0
.text:000000000000503F                 jnz     short loc_502A
.text:0000000000005041                 push    r12
.text:0000000000005043                 push    rbp
.text:0000000000005044                 mov     r12d, edx
.text:0000000000005047                 push    rbx
.text:0000000000005048                 mov     rbp, rsi
.text:000000000000504B                 mov     rbx, rdi
.text:000000000000504E                 call    _fileno
.text:0000000000005053                 mov     edx, r12d       ; whence
.text:0000000000005056                 mov     rsi, rbp        ; offset
.text:0000000000005059                 mov     edi, eax        ; fd
.text:000000000000505B                 call    _lseek
.text:0000000000005060                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000005064                 jz      short loc_5072
.text:0000000000005066                 and     dword ptr [rbx], 0FFFFFFEFh
.text:0000000000005069                 mov     [rbx+90h], rax
.text:0000000000005070                 xor     eax, eax
.text:0000000000005072
.text:0000000000005072 loc_5072:                               ; CODE XREF: rpl_fseeko+44↑j
.text:0000000000005072                 pop     rbx
.text:0000000000005073                 pop     rbp
.text:0000000000005074                 pop     r12
.text:0000000000005076                 retn
.text:0000000000005076 ; } // starts at 5020
.text:0000000000005076 rpl_fseeko      endp
.text:0000000000005076
.text:0000000000005076 ; ---------------------------------------------------------------------------
.text:0000000000005077                 align 20h
.text:0000000000005080
.text:0000000000005080 ; =============== S U B R O U T I N E =======================================
.text:0000000000005080
.text:0000000000005080 ; Attributes: info_from_lumina
.text:0000000000005080
.text:0000000000005080 ; void _libc_csu_init(void)
.text:0000000000005080                 public __libc_csu_init
.text:0000000000005080 __libc_csu_init proc near               ; DATA XREF: start+16↑o
.text:0000000000005080 ; __unwind {
.text:0000000000005080                 push    r15
.text:0000000000005082                 push    r14
.text:0000000000005084                 mov     r15, rdx
.text:0000000000005087                 push    r13
.text:0000000000005089                 push    r12
.text:000000000000508B                 lea     r12, __frame_dummy_init_array_entry
.text:0000000000005092                 push    rbp
.text:0000000000005093                 lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:000000000000509A                 push    rbx
.text:000000000000509B                 mov     r13d, edi
.text:000000000000509E                 mov     r14, rsi
.text:00000000000050A1                 sub     rbp, r12
.text:00000000000050A4                 sub     rsp, 8
.text:00000000000050A8                 sar     rbp, 3
.text:00000000000050AC                 call    _init_proc
.text:00000000000050B1                 test    rbp, rbp
.text:00000000000050B4                 jz      short loc_50D6
.text:00000000000050B6                 xor     ebx, ebx
.text:00000000000050B8                 nop     dword ptr [rax+rax+00000000h]
.text:00000000000050C0
.text:00000000000050C0 loc_50C0:                               ; CODE XREF: __libc_csu_init+54↓j
.text:00000000000050C0                 mov     rdx, r15
.text:00000000000050C3                 mov     rsi, r14
.text:00000000000050C6                 mov     edi, r13d
.text:00000000000050C9                 call    ds:(__frame_dummy_init_array_entry - 207B10h)[r12+rbx*8]
.text:00000000000050CD                 add     rbx, 1
.text:00000000000050D1                 cmp     rbp, rbx
.text:00000000000050D4                 jnz     short loc_50C0
.text:00000000000050D6
.text:00000000000050D6 loc_50D6:                               ; CODE XREF: __libc_csu_init+34↑j
.text:00000000000050D6                 add     rsp, 8
.text:00000000000050DA                 pop     rbx
.text:00000000000050DB                 pop     rbp
.text:00000000000050DC                 pop     r12
.text:00000000000050DE                 pop     r13
.text:00000000000050E0                 pop     r14
.text:00000000000050E2                 pop     r15
.text:00000000000050E4                 retn
.text:00000000000050E4 ; } // starts at 5080
.text:00000000000050E4 __libc_csu_init endp
.text:00000000000050E4
.text:00000000000050E4 ; ---------------------------------------------------------------------------
.text:00000000000050E5                 align 10h
.text:00000000000050F0
.text:00000000000050F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000050F0
.text:00000000000050F0
.text:00000000000050F0 ; void _libc_csu_fini(void)
.text:00000000000050F0                 public __libc_csu_fini
.text:00000000000050F0 __libc_csu_fini proc near               ; DATA XREF: start+F↑o
.text:00000000000050F0 ; __unwind {
.text:00000000000050F0                 rep retn
.text:00000000000050F0 ; } // starts at 50F0
.text:00000000000050F0 __libc_csu_fini endp
.text:00000000000050F0
.text:00000000000050F0 ; ---------------------------------------------------------------------------
.text:00000000000050F2                 align 20h
.text:0000000000005100
.text:0000000000005100 ; =============== S U B R O U T I N E =======================================
.text:0000000000005100
.text:0000000000005100
.text:0000000000005100 atexit          proc near               ; CODE XREF: main+73↑p
.text:0000000000005100 ; __unwind {
.text:0000000000005100                 mov     rdx, cs:__dso_handle ; lpdso_handle
.text:0000000000005107                 xor     esi, esi        ; obj
.text:0000000000005109                 jmp     ___cxa_atexit
.text:0000000000005109 ; } // starts at 5100
.text:0000000000005109 atexit          endp
.text:0000000000005109
.text:0000000000005109 _text           ends
.text:0000000000005109
LOAD:000000000000510E ; ===========================================================================
LOAD:000000000000510E
LOAD:000000000000510E ; Segment type: Pure code
LOAD:000000000000510E ; Segment permissions: Read/Execute
LOAD:000000000000510E LOAD            segment byte public 'CODE' use64
LOAD:000000000000510E                 assume cs:LOAD
LOAD:000000000000510E                 ;org 510Eh
LOAD:000000000000510E                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000510E                 align 10h
LOAD:000000000000510E LOAD            ends
LOAD:000000000000510E
.fini:0000000000005110 ; ===========================================================================
.fini:0000000000005110
.fini:0000000000005110 ; Segment type: Pure code
.fini:0000000000005110 ; Segment permissions: Read/Execute
.fini:0000000000005110 _fini           segment dword public 'CODE' use64
.fini:0000000000005110                 assume cs:_fini
.fini:0000000000005110                 ;org 5110h
.fini:0000000000005110                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:0000000000005110
.fini:0000000000005110 ; =============== S U B R O U T I N E =======================================
.fini:0000000000005110
.fini:0000000000005110
.fini:0000000000005110                 public _term_proc
.fini:0000000000005110 _term_proc      proc near
.fini:0000000000005110                 sub     rsp, 8          ; _fini
.fini:0000000000005114                 add     rsp, 8
.fini:0000000000005118                 retn
.fini:0000000000005118 _term_proc      endp
.fini:0000000000005118
.fini:0000000000005118 _fini           ends
.fini:0000000000005118
LOAD:0000000000005119 ; ===========================================================================
LOAD:0000000000005119
LOAD:0000000000005119 ; Segment type: Pure code
LOAD:0000000000005119 ; Segment permissions: Read/Execute
LOAD:0000000000005119 LOAD            segment byte public 'CODE' use64
LOAD:0000000000005119                 assume cs:LOAD
LOAD:0000000000005119                 ;org 5119h
LOAD:0000000000005119                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000005119                 align 20h
LOAD:0000000000005119 LOAD            ends
LOAD:0000000000005119
.rodata:0000000000005120 ; ===========================================================================
.rodata:0000000000005120
.rodata:0000000000005120 ; Segment type: Pure data
.rodata:0000000000005120 ; Segment permissions: Read
.rodata:0000000000005120 _rodata         segment align_32 public 'CONST' use64
.rodata:0000000000005120                 assume cs:_rodata
.rodata:0000000000005120                 ;org 5120h
.rodata:0000000000005120                 public _IO_stdin_used
.rodata:0000000000005120 _IO_stdin_used  db    1
.rodata:0000000000005121                 db    0
.rodata:0000000000005122                 db    2
.rodata:0000000000005123                 db    0
.rodata:0000000000005124 aKill_0         db 'kill',0             ; DATA XREF: main+139↑o
.rodata:0000000000005124                                         ; usage+15C↑o ...
.rodata:0000000000005129 asc_5129        db '[',0                ; DATA XREF: usage+191↑o
.rodata:000000000000512B aTestInvocation db 'test invocation',0  ; DATA XREF: usage+1B8↑o
.rodata:000000000000513B aMultiCallInvoc db 'Multi-call invocation',0
.rodata:000000000000513B                                         ; DATA XREF: usage+1E8↑o
.rodata:000000000000513B                                         ; usage+2DC↑o ...
.rodata:0000000000005151 aSha224sum      db 'sha224sum',0        ; DATA XREF: usage+1F9↑o
.rodata:000000000000515B aSha2Utilities  db 'sha2 utilities',0   ; DATA XREF: usage+205↑o
.rodata:000000000000516A aSha256sum      db 'sha256sum',0        ; DATA XREF: usage+198↑o
.rodata:0000000000005174 aSha384sum      db 'sha384sum',0        ; DATA XREF: usage+1C4↑o
.rodata:000000000000517E aSha512sum      db 'sha512sum',0        ; DATA XREF: usage+1DC↑o
.rodata:0000000000005188 ; const char aSOnlineHelpS[]
.rodata:0000000000005188 aSOnlineHelpS   db 0Ah                  ; DATA XREF: usage+24A↑o
.rodata:0000000000005188                 db '%s online help: <%s>',0Ah,0
.rodata:000000000000519F unk_519F        db  47h ; G             ; DATA XREF: main+132↑o
.rodata:000000000000519F                                         ; usage+266↑o ...
.rodata:00000000000051A0                 db  4Eh ; N
.rodata:00000000000051A1                 db  55h ; U
.rodata:00000000000051A2                 db  20h
.rodata:00000000000051A3 ; const char domainname[]
.rodata:00000000000051A3 domainname      db 'coreutils',0        ; DATA XREF: main+54↑o
.rodata:00000000000051A3                                         ; main+60↑o ...
.rodata:00000000000051AD ; const char s2[]
.rodata:00000000000051AD s2              db 'en_',0              ; DATA XREF: usage+28D↑o
.rodata:00000000000051AD                                         ; usage+34E↑o
.rodata:00000000000051B1 ; const char aFullDocumentat[]
.rodata:00000000000051B1 aFullDocumentat db 'Full documentation <%s%s>',0Ah,0
.rodata:00000000000051B1                                         ; DATA XREF: usage:loc_2169↑o
.rodata:00000000000051B1                                         ; usage:loc_2226↑o
.rodata:00000000000051CC asc_51CC        db '?',0                ; DATA XREF: main+3C0↑o
.rodata:00000000000051CE ; const char dirname[]
.rodata:00000000000051CE dirname         db '/usr/local/share/locale',0
.rodata:00000000000051CE                                         ; DATA XREF: main+4D↑o
.rodata:00000000000051E6 ; const char aInvalidOptionC[]
.rodata:00000000000051E6 aInvalidOptionC db 'invalid option -- %c',0
.rodata:00000000000051E6                                         ; DATA XREF: main:loc_1D66↑o
.rodata:00000000000051FB aPaulEggert     db 'Paul Eggert',0      ; DATA XREF: main+12B↑o
.rodata:0000000000005207 aNoProcessIdSpe db 'no process ID specified',0
.rodata:0000000000005207                                         ; DATA XREF: main+22D↑o
.rodata:000000000000521F aDSS            db '%*d %-*s %s',0Ah,0  ; DATA XREF: main+3FD↑o
.rodata:000000000000521F                                         ; main+4F4↑o
.rodata:000000000000522C aD              db '%d',0Ah,0           ; DATA XREF: main:loc_1C44↑o
.rodata:0000000000005230 ; const char msgid[]
.rodata:0000000000005230 msgid           db '%s: invalid process id',0
.rodata:0000000000005230                                         ; DATA XREF: main+26E↑o
.rodata:0000000000005247 aList           db 'list',0             ; DATA XREF: .data.rel.ro:long_options↓o
.rodata:000000000000524C aTable          db 'table',0            ; DATA XREF: .data.rel.ro:0000000000207B60↓o
.rodata:0000000000005252 aHelp           db 'help',0             ; DATA XREF: .data.rel.ro:0000000000207B80↓o
.rodata:0000000000005257 aVersion        db 'version',0          ; DATA XREF: .data.rel.ro:0000000000207BA0↓o
.rodata:000000000000525F                 align 20h
.rodata:0000000000005260 ; const char aTrySHelpForMor[]
.rodata:0000000000005260 aTrySHelpForMor db 'Try ',27h,'%s --help',27h,' for more information.',0Ah,0
.rodata:0000000000005260                                         ; DATA XREF: usage+2F↑o
.rodata:0000000000005287                 align 8
.rodata:0000000000005288 ; const char aUsageSSSignalS[]
.rodata:0000000000005288 aUsageSSSignalS db 'Usage: %s [-s SIGNAL | -SIGNAL] PID...',0Ah
.rodata:0000000000005288                                         ; DATA XREF: usage:loc_1F1D↑o
.rodata:0000000000005288                 db '  or:  %s -l [SIGNAL]...',0Ah
.rodata:0000000000005288                 db '  or:  %s -t [SIGNAL]...',0Ah,0
.rodata:00000000000052E2                 align 8
.rodata:00000000000052E8 ; const char aSendSignalsToP[]
.rodata:00000000000052E8 aSendSignalsToP db 'Send signals to processes, or list signals.',0Ah,0
.rodata:00000000000052E8                                         ; DATA XREF: usage+8A↑o
.rodata:0000000000005315                 align 8
.rodata:0000000000005318 ; const char aMandatoryArgum[]
.rodata:0000000000005318 aMandatoryArgum db 0Ah                  ; DATA XREF: usage+AF↑o
.rodata:0000000000005318                 db 'Mandatory arguments to long options are mandatory for short optio'
.rodata:0000000000005318                 db 'ns too.',0Ah,0
.rodata:0000000000005363                 align 8
.rodata:0000000000005368 ; const char aSSignalSignalS[]
.rodata:0000000000005368 aSSignalSignalS db '  -s, --signal=SIGNAL, -SIGNAL',0Ah
.rodata:0000000000005368                                         ; DATA XREF: usage+D4↑o
.rodata:0000000000005368                 db '                   specify the name or number of the signal to be'
.rodata:0000000000005368                 db ' sent',0Ah
.rodata:0000000000005368                 db '  -l, --list       list signal names, or convert signal names to/'
.rodata:0000000000005368                 db 'from numbers',0Ah
.rodata:0000000000005368                 db '  -t, --table      print a table of signal information',0Ah,0
.rodata:0000000000005454                 align 8
.rodata:0000000000005458 ; const char aHelpDisplayThi[]
.rodata:0000000000005458 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.rodata:0000000000005458                                         ; DATA XREF: usage+F9↑o
.rodata:0000000000005485                 align 8
.rodata:0000000000005488 ; const char aVersionOutputV[]
.rodata:0000000000005488 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.rodata:0000000000005488                                         ; DATA XREF: usage+11E↑o
.rodata:00000000000054BE                 align 20h
.rodata:00000000000054C0 ; const char aSignalMayBeASi[]
.rodata:00000000000054C0 aSignalMayBeASi db 0Ah                  ; DATA XREF: usage+143↑o
.rodata:00000000000054C0                 db 'SIGNAL may be a signal name like ',27h,'HUP',27h,', or a signal n'
.rodata:00000000000054C0                 db 'umber like ',27h,'1',27h,',',0Ah
.rodata:00000000000054C0                 db 'or the exit status of a process terminated by a signal.',0Ah
.rodata:00000000000054C0                 db 'PID is an integer; if negative it identifies a process group.',0Ah
.rodata:00000000000054C0                 db 0
.rodata:000000000000557D                 align 20h
.rodata:0000000000005580 ; const char aNoteYourShellM[]
.rodata:0000000000005580 aNoteYourShellM db 0Ah                  ; DATA XREF: usage+168↑o
.rodata:0000000000005580                 db 'NOTE: your shell may have its own version of %s, which usually su'
.rodata:0000000000005580                 db 'persedes',0Ah
.rodata:0000000000005580                 db 'the version described here.  Please refer to your shell',27h,'s d'
.rodata:0000000000005580                 db 'ocumentation',0Ah
.rodata:0000000000005580                 db 'for details about the options it supports.',0Ah,0
.rodata:000000000000563F                 align 20h
.rodata:0000000000005640 aHttpsWwwGnuOrg db 'https://www.gnu.org/software/coreutils/',0
.rodata:0000000000005640                                         ; DATA XREF: usage+25F↑o
.rodata:0000000000005640                                         ; usage+2C3↑o ...
.rodata:0000000000005668 ; const char aReportAnyTrans[]
.rodata:0000000000005668 aReportAnyTrans db 'Report any translation bugs to <https://translationproject.org/te'
.rodata:0000000000005668                                         ; DATA XREF: usage+3B7↑o
.rodata:0000000000005668                 db 'am/>',0Ah,0
.rodata:00000000000056AF                 align 10h
.rodata:00000000000056B0 ; const char aOrAvailableLoc[]
.rodata:00000000000056B0 aOrAvailableLoc db 'or available locally via: info ',27h,'(coreutils) %s%s',27h,0Ah,0
.rodata:00000000000056B0                                         ; DATA XREF: usage:loc_21AE↑o
.rodata:00000000000056E3                 align 8
.rodata:00000000000056E8 ; const char aSMultipleSigna[]
.rodata:00000000000056E8 aSMultipleSigna db '%s: multiple signals specified',0
.rodata:00000000000056E8                                         ; DATA XREF: main+53A↑o
.rodata:0000000000005707                 align 8
.rodata:0000000000005708 ; const char aMultipleLOrTOp[]
.rodata:0000000000005708 aMultipleLOrTOp db 'multiple -l or -t options specified',0
.rodata:0000000000005708                                         ; DATA XREF: main:loc_1D40↑o
.rodata:000000000000572C                 align 10h
.rodata:0000000000005730 aCannotCombineS db 'cannot combine signal with -l or -t',0
.rodata:0000000000005730                                         ; DATA XREF: main+218↑o
.rodata:0000000000005754                 align 20h
.rodata:0000000000005760 ; const char short_options[]
.rodata:0000000000005760 short_options   db '0::1::2::3::4::5::6::7::8::9::A::B::C::D::E::F::G::H::I::J::K::M:'
.rodata:0000000000005760                                         ; DATA XREF: main+87↑o
.rodata:0000000000005760                 db ':N::O::P::Q::R::S::T::U::V::W::X::Y::Z::Lln:s:t',0
.rodata:00000000000057D1 ; const char s[]
.rodata:00000000000057D1 s               db 'abcdefghijklmnopqrstuvwxyz',0
.rodata:00000000000057D1                                         ; DATA XREF: operand2sig+CF↑o
.rodata:00000000000057EC ; const char aSInvalidSignal[]
.rodata:00000000000057EC aSInvalidSignal db '%s: invalid signal',0
.rodata:00000000000057EC                                         ; DATA XREF: operand2sig+88↑o
.rodata:00000000000057EC                                         ; .data.rel.ro:0000000000207B40↓o
.rodata:00000000000057FF a831            db '8.31',0             ; DATA XREF: .data:Version↓o
.rodata:0000000000005804 ; const char aWriteError[]
.rodata:0000000000005804 aWriteError     db 'write error',0      ; DATA XREF: close_stdout:loc_24F3↑o
.rodata:0000000000005810 ; const char format[]
.rodata:0000000000005810 format          db '%s: %s',0           ; DATA XREF: close_stdout+6C↑o
.rodata:0000000000005810                                         ; main+31A↑o ...
.rodata:0000000000005817                 align 8
.rodata:0000000000005818 aANullArgv0WasP db 'A NULL argv[0] was passed through an exec system call.',0Ah,0
.rodata:0000000000005818                                         ; DATA XREF: set_program_name+84↑o
.rodata:0000000000005850 aLibs           db '/.libs/',0          ; DATA XREF: set_program_name+2C↑o
.rodata:0000000000005858 aLt             db 'lt-',0              ; DATA XREF: set_program_name+44↑o
.rodata:000000000000585C unk_585C        db 0E2h                 ; DATA XREF: gettext_quote+CE↑o
.rodata:000000000000585D                 db  80h
.rodata:000000000000585E                 db  98h
.rodata:000000000000585F                 db    0
.rodata:0000000000005860 unk_5860        db 0E2h                 ; DATA XREF: gettext_quote+D5↑o
.rodata:0000000000005861                 db  80h
.rodata:0000000000005862                 db  99h
.rodata:0000000000005863                 db    0
.rodata:0000000000005864 unk_5864        db 0A1h                 ; DATA XREF: gettext_quote+74↑o
.rodata:0000000000005865                 db    7
.rodata:0000000000005866                 db  65h ; e
.rodata:0000000000005867                 db    0
.rodata:0000000000005868 unk_5868        db 0A1h                 ; DATA XREF: gettext_quote+7B↑o
.rodata:0000000000005869                 db 0AFh
.rodata:000000000000586A                 db    0
.rodata:000000000000586B unk_586B        db  22h ; "             ; DATA XREF: gettext_quote:loc_2620↑o
.rodata:000000000000586B                                         ; quotearg_buffer_restyled:loc_33DB↑o ...
.rodata:000000000000586C                 db    0
.rodata:000000000000586D ; const char asc_586D[2]
.rodata:000000000000586D asc_586D        db 27h,0                ; DATA XREF: gettext_quote+27↑o
.rodata:000000000000586D                                         ; quotearg_buffer_restyled:loc_27A3↑o ...
.rodata:000000000000586F ; const char asc_586F[2]
.rodata:000000000000586F asc_586F        db '`',0                ; DATA XREF: quotearg_buffer_restyled+D9B↑o
.rodata:000000000000586F                                         ; quotearg_buffer_restyled+DB6↑o
.rodata:0000000000005871 aLiteral        db 'literal',0          ; DATA XREF: .data.rel.ro:quoting_style_args↓o
.rodata:0000000000005879 aShell          db 'shell',0            ; DATA XREF: .data.rel.ro:0000000000207BE8↓o
.rodata:000000000000587F aShellAlways    db 'shell-always',0     ; DATA XREF: .data.rel.ro:0000000000207BF0↓o
.rodata:000000000000588C aShellEscape    db 'shell-escape',0     ; DATA XREF: .data.rel.ro:0000000000207BF8↓o
.rodata:000000000000588C                                         ; .data.rel.ro:0000000000207C18↓o
.rodata:0000000000005899 aShellEscapeAlw db 'shell-escape-always',0
.rodata:0000000000005899                                         ; DATA XREF: .data.rel.ro:0000000000207C00↓o
.rodata:00000000000058AD aCMaybe         db 'c-maybe',0          ; DATA XREF: .data.rel.ro:0000000000207C10↓o
.rodata:00000000000058B5 aClocale        db 'clocale',0          ; DATA XREF: .data.rel.ro:0000000000207C28↓o
.rodata:00000000000058BD                 align 20h
.rodata:00000000000058C0 jpt_2781        dd offset loc_352A - 58C0h
.rodata:00000000000058C0                                         ; DATA XREF: quotearg_buffer_restyled+80↑o
.rodata:00000000000058C0                                         ; quotearg_buffer_restyled+8A↑r
.rodata:00000000000058C0                 dd offset loc_2783 - 58C0h ; jump table for switch statement
.rodata:00000000000058C0                 dd offset loc_3758 - 58C0h
.rodata:00000000000058C0                 dd offset loc_3564 - 58C0h
.rodata:00000000000058C0                 dd offset loc_3354 - 58C0h
.rodata:00000000000058C0                 dd offset loc_33B0 - 58C0h
.rodata:00000000000058C0                 dd offset loc_3405 - 58C0h
.rodata:00000000000058C0                 dd offset loc_344A - 58C0h
.rodata:00000000000058C0                 dd offset loc_3484 - 58C0h
.rodata:00000000000058C0                 dd offset loc_3484 - 58C0h
.rodata:00000000000058C0                 dd offset loc_3484 - 58C0h
.rodata:00000000000058EC jpt_28DE        dd offset loc_2B00 - 58ECh, offset def_28DE - 58ECh, offset def_28DE - 58ECh
.rodata:00000000000058EC                                         ; DATA XREF: quotearg_buffer_restyled+1DD↑o
.rodata:00000000000058EC                                         ; quotearg_buffer_restyled+1E7↑r
.rodata:00000000000058EC                 dd offset def_28DE - 58ECh, offset def_28DE - 58ECh, offset def_28DE - 58ECh ; jump table for switch statement
.rodata:00000000000058EC                 dd offset def_28DE - 58ECh, offset loc_2B40 - 58ECh, offset loc_2A48 - 58ECh
.rodata:00000000000058EC                 dd offset loc_2A08 - 58ECh, offset loc_2BD0 - 58ECh, offset loc_2BC0 - 58ECh
.rodata:00000000000058EC                 dd offset loc_2BB0 - 58ECh, offset loc_2BA0 - 58ECh, offset def_28DE - 58ECh
.rodata:00000000000058EC                 dd offset def_28DE - 58ECh, offset def_28DE - 58ECh, offset def_28DE - 58ECh
.rodata:00000000000058EC                 dd offset def_28DE - 58ECh, offset def_28DE - 58ECh, offset def_28DE - 58ECh
.rodata:00000000000058EC                 dd offset def_28DE - 58ECh, offset def_28DE - 58ECh, offset def_28DE - 58ECh
.rodata:00000000000058EC                 dd offset def_28DE - 58ECh, offset def_28DE - 58ECh, offset def_28DE - 58ECh
.rodata:00000000000058EC                 dd offset def_28DE - 58ECh, offset def_28DE - 58ECh, offset def_28DE - 58ECh
.rodata:00000000000058EC                 dd offset def_28DE - 58ECh, offset def_28DE - 58ECh, offset loc_2B90 - 58ECh
.rodata:00000000000058EC                 dd offset loc_2B80 - 58ECh, offset loc_2B80 - 58ECh, offset loc_2B50 - 58ECh
.rodata:00000000000058EC                 dd offset loc_2B80 - 58ECh, offset loc_2B28 - 58ECh, offset loc_2B80 - 58ECh
.rodata:00000000000058EC                 dd offset loc_29E3 - 58ECh, offset loc_2B80 - 58ECh, offset loc_2B80 - 58ECh
.rodata:00000000000058EC                 dd offset loc_2B80 - 58ECh, offset loc_2B28 - 58ECh, offset loc_2B28 - 58ECh
.rodata:00000000000058EC                 dd offset loc_2B28 - 58ECh, offset loc_2B28 - 58ECh, offset loc_2B28 - 58ECh
.rodata:00000000000058EC                 dd offset loc_2B28 - 58ECh, offset loc_2B28 - 58ECh, offset loc_2B28 - 58ECh
.rodata:00000000000058EC                 dd offset loc_2B28 - 58ECh, offset loc_2B28 - 58ECh, offset loc_2B28 - 58ECh
.rodata:00000000000058EC                 dd offset loc_2B28 - 58ECh, offset loc_2B28 - 58ECh, offset loc_2B28 - 58ECh
.rodata:00000000000058EC                 dd offset loc_2B28 - 58ECh, offset loc_2B28 - 58ECh, offset loc_2B80 - 58ECh
.rodata:00000000000058EC                 dd offset loc_2B80 - 58ECh, offset loc_2B80 - 58ECh, offset loc_2B80 - 58ECh
.rodata:00000000000058EC                 dd offset loc_29B3 - 58ECh, offset def_28DE - 58ECh, offset loc_2B28 - 58ECh
.rodata:00000000000058EC                 dd offset loc_2B28 - 58ECh, offset loc_2B28 - 58ECh, offset loc_2B28 - 58ECh
.rodata:00000000000058EC                 dd offset loc_2B28 - 58ECh, offset loc_2B28 - 58ECh, offset loc_2B28 - 58ECh
.rodata:00000000000058EC                 dd offset loc_2B28 - 58ECh, offset loc_2B28 - 58ECh, offset loc_2B28 - 58ECh
.rodata:00000000000058EC                 dd offset loc_2B28 - 58ECh, offset loc_2B28 - 58ECh, offset loc_2B28 - 58ECh
.rodata:00000000000058EC                 dd offset loc_2B28 - 58ECh, offset loc_2B28 - 58ECh, offset loc_2B28 - 58ECh
.rodata:00000000000058EC                 dd offset loc_2B28 - 58ECh, offset loc_2B28 - 58ECh, offset loc_2B28 - 58ECh
.rodata:00000000000058EC                 dd offset loc_2B28 - 58ECh, offset loc_2B28 - 58ECh, offset loc_2B28 - 58ECh
.rodata:00000000000058EC                 dd offset loc_2B28 - 58ECh, offset loc_2B28 - 58ECh, offset loc_2B28 - 58ECh
.rodata:00000000000058EC                 dd offset loc_2B28 - 58ECh, offset loc_2B80 - 58ECh, offset loc_2A58 - 58ECh
.rodata:00000000000058EC                 dd offset loc_2B28 - 58ECh, offset loc_2B80 - 58ECh, offset loc_2B28 - 58ECh
.rodata:00000000000058EC                 dd offset loc_2B80 - 58ECh, offset loc_2B28 - 58ECh, offset loc_2B28 - 58ECh
.rodata:00000000000058EC                 dd offset loc_2B28 - 58ECh, offset loc_2B28 - 58ECh, offset loc_2B28 - 58ECh
.rodata:00000000000058EC                 dd offset loc_2B28 - 58ECh, offset loc_2B28 - 58ECh, offset loc_2B28 - 58ECh
.rodata:00000000000058EC                 dd offset loc_2B28 - 58ECh, offset loc_2B28 - 58ECh, offset loc_2B28 - 58ECh
.rodata:00000000000058EC                 dd offset loc_2B28 - 58ECh, offset loc_2B28 - 58ECh, offset loc_2B28 - 58ECh
.rodata:00000000000058EC                 dd offset loc_2B28 - 58ECh, offset loc_2B28 - 58ECh, offset loc_2B28 - 58ECh
.rodata:00000000000058EC                 dd offset loc_2B28 - 58ECh, offset loc_2B28 - 58ECh, offset loc_2B28 - 58ECh
.rodata:00000000000058EC                 dd offset loc_2B28 - 58ECh, offset loc_2B28 - 58ECh, offset loc_2B28 - 58ECh
.rodata:00000000000058EC                 dd offset loc_2B28 - 58ECh, offset loc_2B28 - 58ECh, offset loc_2B28 - 58ECh
.rodata:00000000000058EC                 dd offset loc_28E3 - 58ECh, offset loc_2B80 - 58ECh, offset loc_28E3 - 58ECh
.rodata:00000000000058EC                 dd offset loc_2B50 - 58ECh
.rodata:0000000000005AE8 jpt_2C6A        dd offset loc_2CD0 - 5AE8h, offset def_2C6A - 5AE8h, offset def_2C6A - 5AE8h
.rodata:0000000000005AE8                                         ; DATA XREF: quotearg_buffer_restyled+569↑o
.rodata:0000000000005AE8                                         ; quotearg_buffer_restyled+573↑r
.rodata:0000000000005AE8                 dd offset def_2C6A - 5AE8h, offset def_2C6A - 5AE8h, offset def_2C6A - 5AE8h ; jump table for switch statement
.rodata:0000000000005AE8                 dd offset def_2C6A - 5AE8h, offset loc_2CC0 - 5AE8h, offset loc_2E10 - 5AE8h
.rodata:0000000000005AE8                 dd offset loc_2DF8 - 5AE8h, offset loc_2CA8 - 5AE8h, offset loc_2DE8 - 5AE8h
.rodata:0000000000005AE8                 dd offset loc_2C90 - 5AE8h, offset loc_2DD0 - 5AE8h, offset def_2C6A - 5AE8h
.rodata:0000000000005AE8                 dd offset def_2C6A - 5AE8h, offset def_2C6A - 5AE8h, offset def_2C6A - 5AE8h
.rodata:0000000000005AE8                 dd offset def_2C6A - 5AE8h, offset def_2C6A - 5AE8h, offset def_2C6A - 5AE8h
.rodata:0000000000005AE8                 dd offset def_2C6A - 5AE8h, offset def_2C6A - 5AE8h, offset def_2C6A - 5AE8h
.rodata:0000000000005AE8                 dd offset def_2C6A - 5AE8h, offset def_2C6A - 5AE8h, offset def_2C6A - 5AE8h
.rodata:0000000000005AE8                 dd offset def_2C6A - 5AE8h, offset def_2C6A - 5AE8h, offset def_2C6A - 5AE8h
.rodata:0000000000005AE8                 dd offset def_2C6A - 5AE8h, offset def_2C6A - 5AE8h, offset loc_2DB8 - 5AE8h
.rodata:0000000000005AE8                 dd offset loc_2DA0 - 5AE8h, offset loc_2DA0 - 5AE8h, offset loc_2D88 - 5AE8h
.rodata:0000000000005AE8                 dd offset loc_2DA0 - 5AE8h, offset loc_2D70 - 5AE8h, offset loc_2DA0 - 5AE8h
.rodata:0000000000005AE8                 dd offset loc_29E0 - 5AE8h, offset loc_2DA0 - 5AE8h, offset loc_2DA0 - 5AE8h
.rodata:0000000000005AE8                 dd offset loc_2DA0 - 5AE8h, offset loc_2D70 - 5AE8h, offset loc_2D70 - 5AE8h
.rodata:0000000000005AE8                 dd offset loc_2D70 - 5AE8h, offset loc_2D70 - 5AE8h, offset loc_2D70 - 5AE8h
.rodata:0000000000005AE8                 dd offset loc_2D70 - 5AE8h, offset loc_2D70 - 5AE8h, offset loc_2D70 - 5AE8h
.rodata:0000000000005AE8                 dd offset loc_2D70 - 5AE8h, offset loc_2D70 - 5AE8h, offset loc_2D70 - 5AE8h
.rodata:0000000000005AE8                 dd offset loc_2D70 - 5AE8h, offset loc_2D70 - 5AE8h, offset loc_2D70 - 5AE8h
.rodata:0000000000005AE8                 dd offset loc_2D70 - 5AE8h, offset loc_2D70 - 5AE8h, offset loc_2DA0 - 5AE8h
.rodata:0000000000005AE8                 dd offset loc_2DA0 - 5AE8h, offset loc_2DA0 - 5AE8h, offset loc_2DA0 - 5AE8h
.rodata:0000000000005AE8                 dd offset loc_29B0 - 5AE8h, offset def_2C6A - 5AE8h, offset loc_2D70 - 5AE8h
.rodata:0000000000005AE8                 dd offset loc_2D70 - 5AE8h, offset loc_2D70 - 5AE8h, offset loc_2D70 - 5AE8h
.rodata:0000000000005AE8                 dd offset loc_2D70 - 5AE8h, offset loc_2D70 - 5AE8h, offset loc_2D70 - 5AE8h
.rodata:0000000000005AE8                 dd offset loc_2D70 - 5AE8h, offset loc_2D70 - 5AE8h, offset loc_2D70 - 5AE8h
.rodata:0000000000005AE8                 dd offset loc_2D70 - 5AE8h, offset loc_2D70 - 5AE8h, offset loc_2D70 - 5AE8h
.rodata:0000000000005AE8                 dd offset loc_2D70 - 5AE8h, offset loc_2D70 - 5AE8h, offset loc_2D70 - 5AE8h
.rodata:0000000000005AE8                 dd offset loc_2D70 - 5AE8h, offset loc_2D70 - 5AE8h, offset loc_2D70 - 5AE8h
.rodata:0000000000005AE8                 dd offset loc_2D70 - 5AE8h, offset loc_2D70 - 5AE8h, offset loc_2D70 - 5AE8h
.rodata:0000000000005AE8                 dd offset loc_2D70 - 5AE8h, offset loc_2D70 - 5AE8h, offset loc_2D70 - 5AE8h
.rodata:0000000000005AE8                 dd offset loc_2D70 - 5AE8h, offset loc_2DA0 - 5AE8h, offset loc_2C70 - 5AE8h
.rodata:0000000000005AE8                 dd offset loc_2D70 - 5AE8h, offset loc_2DA0 - 5AE8h, offset loc_2D70 - 5AE8h
.rodata:0000000000005AE8                 dd offset loc_2DA0 - 5AE8h, offset loc_2D70 - 5AE8h, offset loc_2D70 - 5AE8h
.rodata:0000000000005AE8                 dd offset loc_2D70 - 5AE8h, offset loc_2D70 - 5AE8h, offset loc_2D70 - 5AE8h
.rodata:0000000000005AE8                 dd offset loc_2D70 - 5AE8h, offset loc_2D70 - 5AE8h, offset loc_2D70 - 5AE8h
.rodata:0000000000005AE8                 dd offset loc_2D70 - 5AE8h, offset loc_2D70 - 5AE8h, offset loc_2D70 - 5AE8h
.rodata:0000000000005AE8                 dd offset loc_2D70 - 5AE8h, offset loc_2D70 - 5AE8h, offset loc_2D70 - 5AE8h
.rodata:0000000000005AE8                 dd offset loc_2D70 - 5AE8h, offset loc_2D70 - 5AE8h, offset loc_2D70 - 5AE8h
.rodata:0000000000005AE8                 dd offset loc_2D70 - 5AE8h, offset loc_2D70 - 5AE8h, offset loc_2D70 - 5AE8h
.rodata:0000000000005AE8                 dd offset loc_2D70 - 5AE8h, offset loc_2D70 - 5AE8h, offset loc_2D70 - 5AE8h
.rodata:0000000000005AE8                 dd offset loc_2D70 - 5AE8h, offset loc_2D70 - 5AE8h, offset loc_2D70 - 5AE8h
.rodata:0000000000005AE8                 dd offset loc_28E0 - 5AE8h, offset loc_2DA0 - 5AE8h, offset loc_28E0 - 5AE8h
.rodata:0000000000005AE8                 dd offset loc_2D88 - 5AE8h
.rodata:0000000000005CE4                 align 20h
.rodata:0000000000005D00                 public quoting_style_vals
.rodata:0000000000005D00 quoting_style_vals db    0
.rodata:0000000000005D01                 db    0
.rodata:0000000000005D02                 db    0
.rodata:0000000000005D03                 db    0
.rodata:0000000000005D04                 db    1
.rodata:0000000000005D05                 db    0
.rodata:0000000000005D06                 db    0
.rodata:0000000000005D07                 db    0
.rodata:0000000000005D08                 db    2
.rodata:0000000000005D09                 db    0
.rodata:0000000000005D0A                 db    0
.rodata:0000000000005D0B                 db    0
.rodata:0000000000005D0C                 db    3
.rodata:0000000000005D0D                 db    0
.rodata:0000000000005D0E                 db    0
.rodata:0000000000005D0F                 db    0
.rodata:0000000000005D10                 db    4
.rodata:0000000000005D11                 db    0
.rodata:0000000000005D12                 db    0
.rodata:0000000000005D13                 db    0
.rodata:0000000000005D14                 db    5
.rodata:0000000000005D15                 db    0
.rodata:0000000000005D16                 db    0
.rodata:0000000000005D17                 db    0
.rodata:0000000000005D18                 db    6
.rodata:0000000000005D19                 db    0
.rodata:0000000000005D1A                 db    0
.rodata:0000000000005D1B                 db    0
.rodata:0000000000005D1C                 db    7
.rodata:0000000000005D1D                 db    0
.rodata:0000000000005D1E                 db    0
.rodata:0000000000005D1F                 db    0
.rodata:0000000000005D20                 db    8
.rodata:0000000000005D21                 db    0
.rodata:0000000000005D22                 db    0
.rodata:0000000000005D23                 db    0
.rodata:0000000000005D24                 db    9
.rodata:0000000000005D25                 db    0
.rodata:0000000000005D26                 db    0
.rodata:0000000000005D27                 db    0
.rodata:0000000000005D28 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: version_etc_arn+23↑o
.rodata:0000000000005D34 aSS_0           db '%s %s',0Ah,0        ; DATA XREF: version_etc_arn+13E↑o
.rodata:0000000000005D3B ; const char aC_0[]
.rodata:0000000000005D3B aC_0            db '(C)',0              ; DATA XREF: version_etc_arn:loc_42CC↑o
.rodata:0000000000005D3F ; const char aWrittenByS[]
.rodata:0000000000005D3F aWrittenByS     db 'Written by %s.',0Ah,0
.rodata:0000000000005D3F                                         ; DATA XREF: version_etc_arn+1BB↑o
.rodata:0000000000005D4F ; const char aWrittenBySAndS[]
.rodata:0000000000005D4F aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.rodata:0000000000005D4F                                         ; DATA XREF: version_etc_arn+1FC↑o
.rodata:0000000000005D66 ; const char aWrittenBySSAnd[]
.rodata:0000000000005D66 aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.rodata:0000000000005D66                                         ; DATA XREF: version_etc_arn+248↑o
.rodata:0000000000005D82 ; const char aReportBugsToS[]
.rodata:0000000000005D82 aReportBugsToS  db 0Ah                  ; DATA XREF: emit_bug_reporting_address+1↑o
.rodata:0000000000005D82                 db 'Report bugs to: %s',0Ah,0
.rodata:0000000000005D97 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.rodata:0000000000005D97                                         ; DATA XREF: emit_bug_reporting_address+14↑o
.rodata:0000000000005DAD ; const char aSHomePageS[]
.rodata:0000000000005DAD aSHomePageS     db '%s home page: <%s>',0Ah,0
.rodata:0000000000005DAD                                         ; DATA XREF: emit_bug_reporting_address+2A↑o
.rodata:0000000000005DC1                 align 8
.rodata:0000000000005DC8 ; const char aLicenseGplv3Gn[]
.rodata:0000000000005DC8 aLicenseGplv3Gn db 0Ah                  ; DATA XREF: version_etc_arn+6E↑o
.rodata:0000000000005DC8                 db 'License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licen'
.rodata:0000000000005DC8                 db 'ses/gpl.html>.',0Ah
.rodata:0000000000005DC8                 db 'This is free software: you are free to change and redistribute it'
.rodata:0000000000005DC8                 db '.',0Ah
.rodata:0000000000005DC8                 db 'There is NO WARRANTY, to the extent permitted by law.',0Ah
.rodata:0000000000005DC8                 db 0Ah,0
.rodata:0000000000005E94                 align 8
.rodata:0000000000005E98 ; const char aWrittenBySSSAn[]
.rodata:0000000000005E98 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005E98                                         ; DATA XREF: version_etc_arn:loc_4520↑o
.rodata:0000000000005E98                 db 'and %s.',0Ah,0
.rodata:0000000000005EB8 ; const char aWrittenBySSSSA[]
.rodata:0000000000005EB8 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005EB8                                         ; DATA XREF: version_etc_arn+2EC↑o
.rodata:0000000000005EB8                 db '%s, and %s.',0Ah,0
.rodata:0000000000005EDC                 align 20h
.rodata:0000000000005EE0 ; const char aWrittenBySSSSS_1[]
.rodata:0000000000005EE0 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005EE0                                         ; DATA XREF: version_etc_arn+320↑o
.rodata:0000000000005EE0                 db '%s, %s, and %s.',0Ah,0
.rodata:0000000000005F08 ; const char aWrittenBySSSSS_2[]
.rodata:0000000000005F08 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005F08                                         ; DATA XREF: version_etc_arn+388↑o
.rodata:0000000000005F08                 db '%s, %s, %s, and %s.',0Ah,0
.rodata:0000000000005F34                 align 8
.rodata:0000000000005F38 ; const char aWrittenBySSSSS[]
.rodata:0000000000005F38 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005F38                                         ; DATA XREF: version_etc_arn+B8↑o
.rodata:0000000000005F38                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000005F38                 db 'and %s.',0Ah,0
.rodata:0000000000005F68 ; const char aWrittenBySSSSS_0[]
.rodata:0000000000005F68 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005F68                                         ; DATA XREF: version_etc_arn+168↑o
.rodata:0000000000005F68                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000005F68                 db '%s, and %s.',0Ah,0
.rodata:0000000000005F9C                 align 20h
.rodata:0000000000005FA0 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005FA0                                         ; DATA XREF: version_etc_arn+3E5↑o
.rodata:0000000000005FA0                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000005FA0                 db '%s, %s, and others.',0Ah,0
.rodata:0000000000005FDC                 align 20h
.rodata:0000000000005FE0 ; const char aGeneralHelpUsi[]
.rodata:0000000000005FE0 aGeneralHelpUsi db 'General help using GNU software: <https://www.gnu.org/gethelp/>',0Ah
.rodata:0000000000005FE0                                         ; DATA XREF: emit_bug_reporting_address+61↑o
.rodata:0000000000005FE0                 db 0
.rodata:0000000000006021                 align 8
.rodata:0000000000006028 jpt_4334        dd offset loc_43B6 - 6028h
.rodata:0000000000006028                                         ; DATA XREF: version_etc_arn+96↑o
.rodata:0000000000006028                                         ; version_etc_arn+9D↑r
.rodata:0000000000006028                 dd offset loc_4448 - 6028h ; jump table for switch statement
.rodata:0000000000006028                 dd offset loc_4488 - 6028h
.rodata:0000000000006028                 dd offset loc_44D0 - 6028h
.rodata:0000000000006028                 dd offset loc_4520 - 6028h
.rodata:0000000000006028                 dd offset loc_4578 - 6028h
.rodata:0000000000006028                 dd offset loc_45A8 - 6028h
.rodata:0000000000006028                 dd offset loc_4610 - 6028h
.rodata:0000000000006028                 dd offset loc_4340 - 6028h
.rodata:0000000000006028                 dd offset loc_43F0 - 6028h
.rodata:0000000000006050                 align 20h
.rodata:0000000000006060                 public version_etc_copyright
.rodata:0000000000006060 version_etc_copyright db 'Copyright %s %d Free Software Foundation, Inc.',0
.rodata:0000000000006060                                         ; DATA XREF: version_etc_arn+4F↑o
.rodata:000000000000608F ; const char aMemoryExhauste[]
.rodata:000000000000608F aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: xalloc_die↑o
.rodata:00000000000060A0 aRtmin          db 'RTMIN',0            ; DATA XREF: str2sig+D2↑o
.rodata:00000000000060A6 aRtmax          db 'RTMAX',0            ; DATA XREF: str2sig+F0↑o
.rodata:00000000000060AC aD_0            db '%+d',0              ; DATA XREF: sig2str+91↑o
.rodata:00000000000060B0 aC              db 'C',0                ; DATA XREF: hard_locale+18↑o
.rodata:00000000000060B2 aPosix          db 'POSIX',0            ; DATA XREF: hard_locale:loc_4F00↑o
.rodata:00000000000060B8 aAscii          db 'ASCII',0            ; DATA XREF: locale_charset+16↑o
.rodata:00000000000060B8                                         ; locale_charset:loc_4F50↑o
.rodata:00000000000060B8 _rodata         ends
.rodata:00000000000060B8
LOAD:00000000000060BE ; ===========================================================================
LOAD:00000000000060BE
LOAD:00000000000060BE ; Segment type: Pure code
LOAD:00000000000060BE ; Segment permissions: Read/Execute
LOAD:00000000000060BE LOAD            segment byte public 'CODE' use64
LOAD:00000000000060BE                 assume cs:LOAD
LOAD:00000000000060BE                 ;org 60BEh
LOAD:00000000000060BE                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000060BE                 align 20h
LOAD:00000000000060BE LOAD            ends
LOAD:00000000000060BE
.eh_frame_hdr:00000000000060C0 ; ===========================================================================
.eh_frame_hdr:00000000000060C0
.eh_frame_hdr:00000000000060C0 ; Segment type: Pure data
.eh_frame_hdr:00000000000060C0 ; Segment permissions: Read
.eh_frame_hdr:00000000000060C0 _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:00000000000060C0                 assume cs:_eh_frame_hdr
.eh_frame_hdr:00000000000060C0                 ;org 60C0h
.eh_frame_hdr:00000000000060C0 __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000000001A0↑o
.eh_frame_hdr:00000000000060C1                 db  1Bh
.eh_frame_hdr:00000000000060C2                 db    3
.eh_frame_hdr:00000000000060C3                 db  3Bh ; ;
.eh_frame_hdr:00000000000060C4                 db  54h ; T
.eh_frame_hdr:00000000000060C5                 db    2
.eh_frame_hdr:00000000000060C6                 db    0
.eh_frame_hdr:00000000000060C7                 db    0
.eh_frame_hdr:00000000000060C8                 db  49h ; I
.eh_frame_hdr:00000000000060C9                 db    0
.eh_frame_hdr:00000000000060CA                 db    0
.eh_frame_hdr:00000000000060CB                 db    0
.eh_frame_hdr:00000000000060CC                 db 0D0h
.eh_frame_hdr:00000000000060CD                 db 0B3h
.eh_frame_hdr:00000000000060CE                 db 0FFh
.eh_frame_hdr:00000000000060CF                 db 0FFh
.eh_frame_hdr:00000000000060D0                 db 0A0h
.eh_frame_hdr:00000000000060D1                 db    2
.eh_frame_hdr:00000000000060D2                 db    0
.eh_frame_hdr:00000000000060D3                 db    0
.eh_frame_hdr:00000000000060D4                 db    0
.eh_frame_hdr:00000000000060D5                 db 0B7h
.eh_frame_hdr:00000000000060D6                 db 0FFh
.eh_frame_hdr:00000000000060D7                 db 0FFh
.eh_frame_hdr:00000000000060D8                 db 0C8h
.eh_frame_hdr:00000000000060D9                 db    2
.eh_frame_hdr:00000000000060DA                 db    0
.eh_frame_hdr:00000000000060DB                 db    0
.eh_frame_hdr:00000000000060DC                 db  10h
.eh_frame_hdr:00000000000060DD                 db 0B7h
.eh_frame_hdr:00000000000060DE                 db 0FFh
.eh_frame_hdr:00000000000060DF                 db 0FFh
.eh_frame_hdr:00000000000060E0                 db  0Ch
.eh_frame_hdr:00000000000060E1                 db    3
.eh_frame_hdr:00000000000060E2                 db    0
.eh_frame_hdr:00000000000060E3                 db    0
.eh_frame_hdr:00000000000060E4                 db 0F0h
.eh_frame_hdr:00000000000060E5                 db 0BCh
.eh_frame_hdr:00000000000060E6                 db 0FFh
.eh_frame_hdr:00000000000060E7                 db 0FFh
.eh_frame_hdr:00000000000060E8                 db  70h ; p
.eh_frame_hdr:00000000000060E9                 db    2
.eh_frame_hdr:00000000000060EA                 db    0
.eh_frame_hdr:00000000000060EB                 db    0
.eh_frame_hdr:00000000000060EC                 db    0
.eh_frame_hdr:00000000000060ED                 db 0BEh
.eh_frame_hdr:00000000000060EE                 db 0FFh
.eh_frame_hdr:00000000000060EF                 db 0FFh
.eh_frame_hdr:00000000000060F0                 db 0E0h
.eh_frame_hdr:00000000000060F1                 db    2
.eh_frame_hdr:00000000000060F2                 db    0
.eh_frame_hdr:00000000000060F3                 db    0
.eh_frame_hdr:00000000000060F4                 db 0E0h
.eh_frame_hdr:00000000000060F5                 db 0C1h
.eh_frame_hdr:00000000000060F6                 db 0FFh
.eh_frame_hdr:00000000000060F7                 db 0FFh
.eh_frame_hdr:00000000000060F8                 db  80h
.eh_frame_hdr:00000000000060F9                 db    3
.eh_frame_hdr:00000000000060FA                 db    0
.eh_frame_hdr:00000000000060FB                 db    0
.eh_frame_hdr:00000000000060FC                 db 0D0h
.eh_frame_hdr:00000000000060FD                 db 0C3h
.eh_frame_hdr:00000000000060FE                 db 0FFh
.eh_frame_hdr:00000000000060FF                 db 0FFh
.eh_frame_hdr:0000000000006100                 db 0D0h
.eh_frame_hdr:0000000000006101                 db    3
.eh_frame_hdr:0000000000006102                 db    0
.eh_frame_hdr:0000000000006103                 db    0
.eh_frame_hdr:0000000000006104                 db 0E0h
.eh_frame_hdr:0000000000006105                 db 0C3h
.eh_frame_hdr:0000000000006106                 db 0FFh
.eh_frame_hdr:0000000000006107                 db 0FFh
.eh_frame_hdr:0000000000006108                 db 0E4h
.eh_frame_hdr:0000000000006109                 db    3
.eh_frame_hdr:000000000000610A                 db    0
.eh_frame_hdr:000000000000610B                 db    0
.eh_frame_hdr:000000000000610C                 db 0F0h
.eh_frame_hdr:000000000000610D                 db 0C3h
.eh_frame_hdr:000000000000610E                 db 0FFh
.eh_frame_hdr:000000000000610F                 db 0FFh
.eh_frame_hdr:0000000000006110                 db 0F8h
.eh_frame_hdr:0000000000006111                 db    3
.eh_frame_hdr:0000000000006112                 db    0
.eh_frame_hdr:0000000000006113                 db    0
.eh_frame_hdr:0000000000006114                 db 0A0h
.eh_frame_hdr:0000000000006115                 db 0C4h
.eh_frame_hdr:0000000000006116                 db 0FFh
.eh_frame_hdr:0000000000006117                 db 0FFh
.eh_frame_hdr:0000000000006118                 db  28h ; (
.eh_frame_hdr:0000000000006119                 db    4
.eh_frame_hdr:000000000000611A                 db    0
.eh_frame_hdr:000000000000611B                 db    0
.eh_frame_hdr:000000000000611C                 db  40h ; @
.eh_frame_hdr:000000000000611D                 db 0C5h
.eh_frame_hdr:000000000000611E                 db 0FFh
.eh_frame_hdr:000000000000611F                 db 0FFh
.eh_frame_hdr:0000000000006120                 db  48h ; H
.eh_frame_hdr:0000000000006121                 db    4
.eh_frame_hdr:0000000000006122                 db    0
.eh_frame_hdr:0000000000006123                 db    0
.eh_frame_hdr:0000000000006124                 db  30h ; 0
.eh_frame_hdr:0000000000006125                 db 0C6h
.eh_frame_hdr:0000000000006126                 db 0FFh
.eh_frame_hdr:0000000000006127                 db 0FFh
.eh_frame_hdr:0000000000006128                 db  8Ch
.eh_frame_hdr:0000000000006129                 db    4
.eh_frame_hdr:000000000000612A                 db    0
.eh_frame_hdr:000000000000612B                 db    0
.eh_frame_hdr:000000000000612C                 db  70h ; p
.eh_frame_hdr:000000000000612D                 db 0D8h
.eh_frame_hdr:000000000000612E                 db 0FFh
.eh_frame_hdr:000000000000612F                 db 0FFh
.eh_frame_hdr:0000000000006130                 db    4
.eh_frame_hdr:0000000000006131                 db    5
.eh_frame_hdr:0000000000006132                 db    0
.eh_frame_hdr:0000000000006133                 db    0
.eh_frame_hdr:0000000000006134                 db  20h
.eh_frame_hdr:0000000000006135                 db 0DAh
.eh_frame_hdr:0000000000006136                 db 0FFh
.eh_frame_hdr:0000000000006137                 db 0FFh
.eh_frame_hdr:0000000000006138                 db  70h ; p
.eh_frame_hdr:0000000000006139                 db    5
.eh_frame_hdr:000000000000613A                 db    0
.eh_frame_hdr:000000000000613B                 db    0
.eh_frame_hdr:000000000000613C                 db  60h ; `
.eh_frame_hdr:000000000000613D                 db 0DAh
.eh_frame_hdr:000000000000613E                 db 0FFh
.eh_frame_hdr:000000000000613F                 db 0FFh
.eh_frame_hdr:0000000000006140                 db  9Ch
.eh_frame_hdr:0000000000006141                 db    5
.eh_frame_hdr:0000000000006142                 db    0
.eh_frame_hdr:0000000000006143                 db    0
.eh_frame_hdr:0000000000006144                 db  80h
.eh_frame_hdr:0000000000006145                 db 0DAh
.eh_frame_hdr:0000000000006146                 db 0FFh
.eh_frame_hdr:0000000000006147                 db 0FFh
.eh_frame_hdr:0000000000006148                 db 0B0h
.eh_frame_hdr:0000000000006149                 db    5
.eh_frame_hdr:000000000000614A                 db    0
.eh_frame_hdr:000000000000614B                 db    0
.eh_frame_hdr:000000000000614C                 db 0A0h
.eh_frame_hdr:000000000000614D                 db 0DAh
.eh_frame_hdr:000000000000614E                 db 0FFh
.eh_frame_hdr:000000000000614F                 db 0FFh
.eh_frame_hdr:0000000000006150                 db 0C4h
.eh_frame_hdr:0000000000006151                 db    5
.eh_frame_hdr:0000000000006152                 db    0
.eh_frame_hdr:0000000000006153                 db    0
.eh_frame_hdr:0000000000006154                 db 0E0h
.eh_frame_hdr:0000000000006155                 db 0DAh
.eh_frame_hdr:0000000000006156                 db 0FFh
.eh_frame_hdr:0000000000006157                 db 0FFh
.eh_frame_hdr:0000000000006158                 db 0D8h
.eh_frame_hdr:0000000000006159                 db    5
.eh_frame_hdr:000000000000615A                 db    0
.eh_frame_hdr:000000000000615B                 db    0
.eh_frame_hdr:000000000000615C                 db    0
.eh_frame_hdr:000000000000615D                 db 0DBh
.eh_frame_hdr:000000000000615E                 db 0FFh
.eh_frame_hdr:000000000000615F                 db 0FFh
.eh_frame_hdr:0000000000006160                 db 0ECh
.eh_frame_hdr:0000000000006161                 db    5
.eh_frame_hdr:0000000000006162                 db    0
.eh_frame_hdr:0000000000006163                 db    0
.eh_frame_hdr:0000000000006164                 db  30h ; 0
.eh_frame_hdr:0000000000006165                 db 0DBh
.eh_frame_hdr:0000000000006166                 db 0FFh
.eh_frame_hdr:0000000000006167                 db 0FFh
.eh_frame_hdr:0000000000006168                 db    0
.eh_frame_hdr:0000000000006169                 db    6
.eh_frame_hdr:000000000000616A                 db    0
.eh_frame_hdr:000000000000616B                 db    0
.eh_frame_hdr:000000000000616C                 db 0B0h
.eh_frame_hdr:000000000000616D                 db 0DBh
.eh_frame_hdr:000000000000616E                 db 0FFh
.eh_frame_hdr:000000000000616F                 db 0FFh
.eh_frame_hdr:0000000000006170                 db  54h ; T
.eh_frame_hdr:0000000000006171                 db    6
.eh_frame_hdr:0000000000006172                 db    0
.eh_frame_hdr:0000000000006173                 db    0
.eh_frame_hdr:0000000000006174                 db 0A0h
.eh_frame_hdr:0000000000006175                 db 0DCh
.eh_frame_hdr:0000000000006176                 db 0FFh
.eh_frame_hdr:0000000000006177                 db 0FFh
.eh_frame_hdr:0000000000006178                 db 0C0h
.eh_frame_hdr:0000000000006179                 db    6
.eh_frame_hdr:000000000000617A                 db    0
.eh_frame_hdr:000000000000617B                 db    0
.eh_frame_hdr:000000000000617C                 db 0B0h
.eh_frame_hdr:000000000000617D                 db 0DCh
.eh_frame_hdr:000000000000617E                 db 0FFh
.eh_frame_hdr:000000000000617F                 db 0FFh
.eh_frame_hdr:0000000000006180                 db 0D4h
.eh_frame_hdr:0000000000006181                 db    6
.eh_frame_hdr:0000000000006182                 db    0
.eh_frame_hdr:0000000000006183                 db    0
.eh_frame_hdr:0000000000006184                 db  50h ; P
.eh_frame_hdr:0000000000006185                 db 0DDh
.eh_frame_hdr:0000000000006186                 db 0FFh
.eh_frame_hdr:0000000000006187                 db 0FFh
.eh_frame_hdr:0000000000006188                 db    0
.eh_frame_hdr:0000000000006189                 db    7
.eh_frame_hdr:000000000000618A                 db    0
.eh_frame_hdr:000000000000618B                 db    0
.eh_frame_hdr:000000000000618C                 db  70h ; p
.eh_frame_hdr:000000000000618D                 db 0DDh
.eh_frame_hdr:000000000000618E                 db 0FFh
.eh_frame_hdr:000000000000618F                 db 0FFh
.eh_frame_hdr:0000000000006190                 db  14h
.eh_frame_hdr:0000000000006191                 db    7
.eh_frame_hdr:0000000000006192                 db    0
.eh_frame_hdr:0000000000006193                 db    0
.eh_frame_hdr:0000000000006194                 db  80h
.eh_frame_hdr:0000000000006195                 db 0DDh
.eh_frame_hdr:0000000000006196                 db 0FFh
.eh_frame_hdr:0000000000006197                 db 0FFh
.eh_frame_hdr:0000000000006198                 db  28h ; (
.eh_frame_hdr:0000000000006199                 db    7
.eh_frame_hdr:000000000000619A                 db    0
.eh_frame_hdr:000000000000619B                 db    0
.eh_frame_hdr:000000000000619C                 db 0A0h
.eh_frame_hdr:000000000000619D                 db 0DDh
.eh_frame_hdr:000000000000619E                 db 0FFh
.eh_frame_hdr:000000000000619F                 db 0FFh
.eh_frame_hdr:00000000000061A0                 db  3Ch ; <
.eh_frame_hdr:00000000000061A1                 db    7
.eh_frame_hdr:00000000000061A2                 db    0
.eh_frame_hdr:00000000000061A3                 db    0
.eh_frame_hdr:00000000000061A4                 db 0C0h
.eh_frame_hdr:00000000000061A5                 db 0DDh
.eh_frame_hdr:00000000000061A6                 db 0FFh
.eh_frame_hdr:00000000000061A7                 db 0FFh
.eh_frame_hdr:00000000000061A8                 db  50h ; P
.eh_frame_hdr:00000000000061A9                 db    7
.eh_frame_hdr:00000000000061AA                 db    0
.eh_frame_hdr:00000000000061AB                 db    0
.eh_frame_hdr:00000000000061AC                 db  50h ; P
.eh_frame_hdr:00000000000061AD                 db 0DEh
.eh_frame_hdr:00000000000061AE                 db 0FFh
.eh_frame_hdr:00000000000061AF                 db 0FFh
.eh_frame_hdr:00000000000061B0                 db  6Ch ; l
.eh_frame_hdr:00000000000061B1                 db    7
.eh_frame_hdr:00000000000061B2                 db    0
.eh_frame_hdr:00000000000061B3                 db    0
.eh_frame_hdr:00000000000061B4                 db 0E0h
.eh_frame_hdr:00000000000061B5                 db 0DEh
.eh_frame_hdr:00000000000061B6                 db 0FFh
.eh_frame_hdr:00000000000061B7                 db 0FFh
.eh_frame_hdr:00000000000061B8                 db  88h
.eh_frame_hdr:00000000000061B9                 db    7
.eh_frame_hdr:00000000000061BA                 db    0
.eh_frame_hdr:00000000000061BB                 db    0
.eh_frame_hdr:00000000000061BC                 db 0F0h
.eh_frame_hdr:00000000000061BD                 db 0DEh
.eh_frame_hdr:00000000000061BE                 db 0FFh
.eh_frame_hdr:00000000000061BF                 db 0FFh
.eh_frame_hdr:00000000000061C0                 db  9Ch
.eh_frame_hdr:00000000000061C1                 db    7
.eh_frame_hdr:00000000000061C2                 db    0
.eh_frame_hdr:00000000000061C3                 db    0
.eh_frame_hdr:00000000000061C4                 db    0
.eh_frame_hdr:00000000000061C5                 db 0DFh
.eh_frame_hdr:00000000000061C6                 db 0FFh
.eh_frame_hdr:00000000000061C7                 db 0FFh
.eh_frame_hdr:00000000000061C8                 db 0B0h
.eh_frame_hdr:00000000000061C9                 db    7
.eh_frame_hdr:00000000000061CA                 db    0
.eh_frame_hdr:00000000000061CB                 db    0
.eh_frame_hdr:00000000000061CC                 db 0A0h
.eh_frame_hdr:00000000000061CD                 db 0DFh
.eh_frame_hdr:00000000000061CE                 db 0FFh
.eh_frame_hdr:00000000000061CF                 db 0FFh
.eh_frame_hdr:00000000000061D0                 db 0CCh
.eh_frame_hdr:00000000000061D1                 db    7
.eh_frame_hdr:00000000000061D2                 db    0
.eh_frame_hdr:00000000000061D3                 db    0
.eh_frame_hdr:00000000000061D4                 db 0B0h
.eh_frame_hdr:00000000000061D5                 db 0DFh
.eh_frame_hdr:00000000000061D6                 db 0FFh
.eh_frame_hdr:00000000000061D7                 db 0FFh
.eh_frame_hdr:00000000000061D8                 db 0E0h
.eh_frame_hdr:00000000000061D9                 db    7
.eh_frame_hdr:00000000000061DA                 db    0
.eh_frame_hdr:00000000000061DB                 db    0
.eh_frame_hdr:00000000000061DC                 db 0D0h
.eh_frame_hdr:00000000000061DD                 db 0DFh
.eh_frame_hdr:00000000000061DE                 db 0FFh
.eh_frame_hdr:00000000000061DF                 db 0FFh
.eh_frame_hdr:00000000000061E0                 db 0F4h
.eh_frame_hdr:00000000000061E1                 db    7
.eh_frame_hdr:00000000000061E2                 db    0
.eh_frame_hdr:00000000000061E3                 db    0
.eh_frame_hdr:00000000000061E4                 db 0E0h
.eh_frame_hdr:00000000000061E5                 db 0DFh
.eh_frame_hdr:00000000000061E6                 db 0FFh
.eh_frame_hdr:00000000000061E7                 db 0FFh
.eh_frame_hdr:00000000000061E8                 db    8
.eh_frame_hdr:00000000000061E9                 db    8
.eh_frame_hdr:00000000000061EA                 db    0
.eh_frame_hdr:00000000000061EB                 db    0
.eh_frame_hdr:00000000000061EC                 db  70h ; p
.eh_frame_hdr:00000000000061ED                 db 0E0h
.eh_frame_hdr:00000000000061EE                 db 0FFh
.eh_frame_hdr:00000000000061EF                 db 0FFh
.eh_frame_hdr:00000000000061F0                 db  24h ; $
.eh_frame_hdr:00000000000061F1                 db    8
.eh_frame_hdr:00000000000061F2                 db    0
.eh_frame_hdr:00000000000061F3                 db    0
.eh_frame_hdr:00000000000061F4                 db  10h
.eh_frame_hdr:00000000000061F5                 db 0E1h
.eh_frame_hdr:00000000000061F6                 db 0FFh
.eh_frame_hdr:00000000000061F7                 db 0FFh
.eh_frame_hdr:00000000000061F8                 db  40h ; @
.eh_frame_hdr:00000000000061F9                 db    8
.eh_frame_hdr:00000000000061FA                 db    0
.eh_frame_hdr:00000000000061FB                 db    0
.eh_frame_hdr:00000000000061FC                 db  20h
.eh_frame_hdr:00000000000061FD                 db 0E1h
.eh_frame_hdr:00000000000061FE                 db 0FFh
.eh_frame_hdr:00000000000061FF                 db 0FFh
.eh_frame_hdr:0000000000006200                 db  54h ; T
.eh_frame_hdr:0000000000006201                 db    8
.eh_frame_hdr:0000000000006202                 db    0
.eh_frame_hdr:0000000000006203                 db    0
.eh_frame_hdr:0000000000006204                 db  40h ; @
.eh_frame_hdr:0000000000006205                 db 0E1h
.eh_frame_hdr:0000000000006206                 db 0FFh
.eh_frame_hdr:0000000000006207                 db 0FFh
.eh_frame_hdr:0000000000006208                 db  68h ; h
.eh_frame_hdr:0000000000006209                 db    8
.eh_frame_hdr:000000000000620A                 db    0
.eh_frame_hdr:000000000000620B                 db    0
.eh_frame_hdr:000000000000620C                 db  60h ; `
.eh_frame_hdr:000000000000620D                 db 0E1h
.eh_frame_hdr:000000000000620E                 db 0FFh
.eh_frame_hdr:000000000000620F                 db 0FFh
.eh_frame_hdr:0000000000006210                 db  7Ch ; |
.eh_frame_hdr:0000000000006211                 db    8
.eh_frame_hdr:0000000000006212                 db    0
.eh_frame_hdr:0000000000006213                 db    0
.eh_frame_hdr:0000000000006214                 db  70h ; p
.eh_frame_hdr:0000000000006215                 db 0E1h
.eh_frame_hdr:0000000000006216                 db 0FFh
.eh_frame_hdr:0000000000006217                 db 0FFh
.eh_frame_hdr:0000000000006218                 db  90h
.eh_frame_hdr:0000000000006219                 db    8
.eh_frame_hdr:000000000000621A                 db    0
.eh_frame_hdr:000000000000621B                 db    0
.eh_frame_hdr:000000000000621C                 db  90h
.eh_frame_hdr:000000000000621D                 db 0E1h
.eh_frame_hdr:000000000000621E                 db 0FFh
.eh_frame_hdr:000000000000621F                 db 0FFh
.eh_frame_hdr:0000000000006220                 db 0A4h
.eh_frame_hdr:0000000000006221                 db    8
.eh_frame_hdr:0000000000006222                 db    0
.eh_frame_hdr:0000000000006223                 db    0
.eh_frame_hdr:0000000000006224                 db 0B0h
.eh_frame_hdr:0000000000006225                 db 0E1h
.eh_frame_hdr:0000000000006226                 db 0FFh
.eh_frame_hdr:0000000000006227                 db 0FFh
.eh_frame_hdr:0000000000006228                 db 0B8h
.eh_frame_hdr:0000000000006229                 db    8
.eh_frame_hdr:000000000000622A                 db    0
.eh_frame_hdr:000000000000622B                 db    0
.eh_frame_hdr:000000000000622C                 db 0D0h
.eh_frame_hdr:000000000000622D                 db 0E1h
.eh_frame_hdr:000000000000622E                 db 0FFh
.eh_frame_hdr:000000000000622F                 db 0FFh
.eh_frame_hdr:0000000000006230                 db 0D0h
.eh_frame_hdr:0000000000006231                 db    8
.eh_frame_hdr:0000000000006232                 db    0
.eh_frame_hdr:0000000000006233                 db    0
.eh_frame_hdr:0000000000006234                 db 0F0h
.eh_frame_hdr:0000000000006235                 db 0E5h
.eh_frame_hdr:0000000000006236                 db 0FFh
.eh_frame_hdr:0000000000006237                 db 0FFh
.eh_frame_hdr:0000000000006238                 db 0E4h
.eh_frame_hdr:0000000000006239                 db    9
.eh_frame_hdr:000000000000623A                 db    0
.eh_frame_hdr:000000000000623B                 db    0
.eh_frame_hdr:000000000000623C                 db  10h
.eh_frame_hdr:000000000000623D                 db 0E6h
.eh_frame_hdr:000000000000623E                 db 0FFh
.eh_frame_hdr:000000000000623F                 db 0FFh
.eh_frame_hdr:0000000000006240                 db 0F8h
.eh_frame_hdr:0000000000006241                 db    9
.eh_frame_hdr:0000000000006242                 db    0
.eh_frame_hdr:0000000000006243                 db    0
.eh_frame_hdr:0000000000006244                 db  90h
.eh_frame_hdr:0000000000006245                 db 0E6h
.eh_frame_hdr:0000000000006246                 db 0FFh
.eh_frame_hdr:0000000000006247                 db 0FFh
.eh_frame_hdr:0000000000006248                 db  14h
.eh_frame_hdr:0000000000006249                 db  0Ah
.eh_frame_hdr:000000000000624A                 db    0
.eh_frame_hdr:000000000000624B                 db    0
.eh_frame_hdr:000000000000624C                 db  70h ; p
.eh_frame_hdr:000000000000624D                 db 0E7h
.eh_frame_hdr:000000000000624E                 db 0FFh
.eh_frame_hdr:000000000000624F                 db 0FFh
.eh_frame_hdr:0000000000006250                 db  40h ; @
.eh_frame_hdr:0000000000006251                 db  0Ah
.eh_frame_hdr:0000000000006252                 db    0
.eh_frame_hdr:0000000000006253                 db    0
.eh_frame_hdr:0000000000006254                 db 0F0h
.eh_frame_hdr:0000000000006255                 db 0E7h
.eh_frame_hdr:0000000000006256                 db 0FFh
.eh_frame_hdr:0000000000006257                 db 0FFh
.eh_frame_hdr:0000000000006258                 db  60h ; `
.eh_frame_hdr:0000000000006259                 db  0Ah
.eh_frame_hdr:000000000000625A                 db    0
.eh_frame_hdr:000000000000625B                 db    0
.eh_frame_hdr:000000000000625C                 db  10h
.eh_frame_hdr:000000000000625D                 db 0E8h
.eh_frame_hdr:000000000000625E                 db 0FFh
.eh_frame_hdr:000000000000625F                 db 0FFh
.eh_frame_hdr:0000000000006260                 db  7Ch ; |
.eh_frame_hdr:0000000000006261                 db  0Ah
.eh_frame_hdr:0000000000006262                 db    0
.eh_frame_hdr:0000000000006263                 db    0
.eh_frame_hdr:0000000000006264                 db  40h ; @
.eh_frame_hdr:0000000000006265                 db 0E8h
.eh_frame_hdr:0000000000006266                 db 0FFh
.eh_frame_hdr:0000000000006267                 db 0FFh
.eh_frame_hdr:0000000000006268                 db  90h
.eh_frame_hdr:0000000000006269                 db  0Ah
.eh_frame_hdr:000000000000626A                 db    0
.eh_frame_hdr:000000000000626B                 db    0
.eh_frame_hdr:000000000000626C                 db  50h ; P
.eh_frame_hdr:000000000000626D                 db 0E8h
.eh_frame_hdr:000000000000626E                 db 0FFh
.eh_frame_hdr:000000000000626F                 db 0FFh
.eh_frame_hdr:0000000000006270                 db 0A4h
.eh_frame_hdr:0000000000006271                 db  0Ah
.eh_frame_hdr:0000000000006272                 db    0
.eh_frame_hdr:0000000000006273                 db    0
.eh_frame_hdr:0000000000006274                 db  90h
.eh_frame_hdr:0000000000006275                 db 0E8h
.eh_frame_hdr:0000000000006276                 db 0FFh
.eh_frame_hdr:0000000000006277                 db 0FFh
.eh_frame_hdr:0000000000006278                 db 0C8h
.eh_frame_hdr:0000000000006279                 db  0Ah
.eh_frame_hdr:000000000000627A                 db    0
.eh_frame_hdr:000000000000627B                 db    0
.eh_frame_hdr:000000000000627C                 db 0C0h
.eh_frame_hdr:000000000000627D                 db 0E8h
.eh_frame_hdr:000000000000627E                 db 0FFh
.eh_frame_hdr:000000000000627F                 db 0FFh
.eh_frame_hdr:0000000000006280                 db 0DCh
.eh_frame_hdr:0000000000006281                 db  0Ah
.eh_frame_hdr:0000000000006282                 db    0
.eh_frame_hdr:0000000000006283                 db    0
.eh_frame_hdr:0000000000006284                 db  50h ; P
.eh_frame_hdr:0000000000006285                 db 0E9h
.eh_frame_hdr:0000000000006286                 db 0FFh
.eh_frame_hdr:0000000000006287                 db 0FFh
.eh_frame_hdr:0000000000006288                 db 0F4h
.eh_frame_hdr:0000000000006289                 db  0Ah
.eh_frame_hdr:000000000000628A                 db    0
.eh_frame_hdr:000000000000628B                 db    0
.eh_frame_hdr:000000000000628C                 db 0A0h
.eh_frame_hdr:000000000000628D                 db 0E9h
.eh_frame_hdr:000000000000628E                 db 0FFh
.eh_frame_hdr:000000000000628F                 db 0FFh
.eh_frame_hdr:0000000000006290                 db  0Ch
.eh_frame_hdr:0000000000006291                 db  0Bh
.eh_frame_hdr:0000000000006292                 db    0
.eh_frame_hdr:0000000000006293                 db    0
.eh_frame_hdr:0000000000006294                 db 0C0h
.eh_frame_hdr:0000000000006295                 db 0E9h
.eh_frame_hdr:0000000000006296                 db 0FFh
.eh_frame_hdr:0000000000006297                 db 0FFh
.eh_frame_hdr:0000000000006298                 db  28h ; (
.eh_frame_hdr:0000000000006299                 db  0Bh
.eh_frame_hdr:000000000000629A                 db    0
.eh_frame_hdr:000000000000629B                 db    0
.eh_frame_hdr:000000000000629C                 db 0F0h
.eh_frame_hdr:000000000000629D                 db 0E9h
.eh_frame_hdr:000000000000629E                 db 0FFh
.eh_frame_hdr:000000000000629F                 db 0FFh
.eh_frame_hdr:00000000000062A0                 db  44h ; D
.eh_frame_hdr:00000000000062A1                 db  0Bh
.eh_frame_hdr:00000000000062A2                 db    0
.eh_frame_hdr:00000000000062A3                 db    0
.eh_frame_hdr:00000000000062A4                 db  20h
.eh_frame_hdr:00000000000062A5                 db 0EAh
.eh_frame_hdr:00000000000062A6                 db 0FFh
.eh_frame_hdr:00000000000062A7                 db 0FFh
.eh_frame_hdr:00000000000062A8                 db  6Ch ; l
.eh_frame_hdr:00000000000062A9                 db  0Bh
.eh_frame_hdr:00000000000062AA                 db    0
.eh_frame_hdr:00000000000062AB                 db    0
.eh_frame_hdr:00000000000062AC                 db  40h ; @
.eh_frame_hdr:00000000000062AD                 db 0EAh
.eh_frame_hdr:00000000000062AE                 db 0FFh
.eh_frame_hdr:00000000000062AF                 db 0FFh
.eh_frame_hdr:00000000000062B0                 db  88h
.eh_frame_hdr:00000000000062B1                 db  0Bh
.eh_frame_hdr:00000000000062B2                 db    0
.eh_frame_hdr:00000000000062B3                 db    0
.eh_frame_hdr:00000000000062B4                 db  80h
.eh_frame_hdr:00000000000062B5                 db 0EAh
.eh_frame_hdr:00000000000062B6                 db 0FFh
.eh_frame_hdr:00000000000062B7                 db 0FFh
.eh_frame_hdr:00000000000062B8                 db 0A0h
.eh_frame_hdr:00000000000062B9                 db  0Bh
.eh_frame_hdr:00000000000062BA                 db    0
.eh_frame_hdr:00000000000062BB                 db    0
.eh_frame_hdr:00000000000062BC                 db  10h
.eh_frame_hdr:00000000000062BD                 db 0EBh
.eh_frame_hdr:00000000000062BE                 db 0FFh
.eh_frame_hdr:00000000000062BF                 db 0FFh
.eh_frame_hdr:00000000000062C0                 db 0E0h
.eh_frame_hdr:00000000000062C1                 db  0Bh
.eh_frame_hdr:00000000000062C2                 db    0
.eh_frame_hdr:00000000000062C3                 db    0
.eh_frame_hdr:00000000000062C4                 db 0A0h
.eh_frame_hdr:00000000000062C5                 db 0ECh
.eh_frame_hdr:00000000000062C6                 db 0FFh
.eh_frame_hdr:00000000000062C7                 db 0FFh
.eh_frame_hdr:00000000000062C8                 db  1Ch
.eh_frame_hdr:00000000000062C9                 db  0Ch
.eh_frame_hdr:00000000000062CA                 db    0
.eh_frame_hdr:00000000000062CB                 db    0
.eh_frame_hdr:00000000000062CC                 db  80h
.eh_frame_hdr:00000000000062CD                 db 0EDh
.eh_frame_hdr:00000000000062CE                 db 0FFh
.eh_frame_hdr:00000000000062CF                 db 0FFh
.eh_frame_hdr:00000000000062D0                 db  58h ; X
.eh_frame_hdr:00000000000062D1                 db  0Ch
.eh_frame_hdr:00000000000062D2                 db    0
.eh_frame_hdr:00000000000062D3                 db    0
.eh_frame_hdr:00000000000062D4                 db    0
.eh_frame_hdr:00000000000062D5                 db 0EEh
.eh_frame_hdr:00000000000062D6                 db 0FFh
.eh_frame_hdr:00000000000062D7                 db 0FFh
.eh_frame_hdr:00000000000062D8                 db 0A8h
.eh_frame_hdr:00000000000062D9                 db  0Ch
.eh_frame_hdr:00000000000062DA                 db    0
.eh_frame_hdr:00000000000062DB                 db    0
.eh_frame_hdr:00000000000062DC                 db  60h ; `
.eh_frame_hdr:00000000000062DD                 db 0EEh
.eh_frame_hdr:00000000000062DE                 db 0FFh
.eh_frame_hdr:00000000000062DF                 db 0FFh
.eh_frame_hdr:00000000000062E0                 db 0C8h
.eh_frame_hdr:00000000000062E1                 db  0Ch
.eh_frame_hdr:00000000000062E2                 db    0
.eh_frame_hdr:00000000000062E3                 db    0
.eh_frame_hdr:00000000000062E4                 db 0A0h
.eh_frame_hdr:00000000000062E5                 db 0EEh
.eh_frame_hdr:00000000000062E6                 db 0FFh
.eh_frame_hdr:00000000000062E7                 db 0FFh
.eh_frame_hdr:00000000000062E8                 db 0E8h
.eh_frame_hdr:00000000000062E9                 db  0Ch
.eh_frame_hdr:00000000000062EA                 db    0
.eh_frame_hdr:00000000000062EB                 db    0
.eh_frame_hdr:00000000000062EC                 db  20h
.eh_frame_hdr:00000000000062ED                 db 0EFh
.eh_frame_hdr:00000000000062EE                 db 0FFh
.eh_frame_hdr:00000000000062EF                 db 0FFh
.eh_frame_hdr:00000000000062F0                 db  20h
.eh_frame_hdr:00000000000062F1                 db  0Dh
.eh_frame_hdr:00000000000062F2                 db    0
.eh_frame_hdr:00000000000062F3                 db    0
.eh_frame_hdr:00000000000062F4                 db  60h ; `
.eh_frame_hdr:00000000000062F5                 db 0EFh
.eh_frame_hdr:00000000000062F6                 db 0FFh
.eh_frame_hdr:00000000000062F7                 db 0FFh
.eh_frame_hdr:00000000000062F8                 db  40h ; @
.eh_frame_hdr:00000000000062F9                 db  0Dh
.eh_frame_hdr:00000000000062FA                 db    0
.eh_frame_hdr:00000000000062FB                 db    0
.eh_frame_hdr:00000000000062FC                 db 0C0h
.eh_frame_hdr:00000000000062FD                 db 0EFh
.eh_frame_hdr:00000000000062FE                 db 0FFh
.eh_frame_hdr:00000000000062FF                 db 0FFh
.eh_frame_hdr:0000000000006300                 db  70h ; p
.eh_frame_hdr:0000000000006301                 db  0Dh
.eh_frame_hdr:0000000000006302                 db    0
.eh_frame_hdr:0000000000006303                 db    0
.eh_frame_hdr:0000000000006304                 db  30h ; 0
.eh_frame_hdr:0000000000006305                 db 0F0h
.eh_frame_hdr:0000000000006306                 db 0FFh
.eh_frame_hdr:0000000000006307                 db 0FFh
.eh_frame_hdr:0000000000006308                 db 0B8h
.eh_frame_hdr:0000000000006309                 db  0Dh
.eh_frame_hdr:000000000000630A                 db    0
.eh_frame_hdr:000000000000630B                 db    0
.eh_frame_hdr:000000000000630C                 db  40h ; @
.eh_frame_hdr:000000000000630D                 db 0F0h
.eh_frame_hdr:000000000000630E                 db 0FFh
.eh_frame_hdr:000000000000630F                 db 0FFh
.eh_frame_hdr:0000000000006310                 db 0D0h
.eh_frame_hdr:0000000000006311                 db  0Dh
.eh_frame_hdr:0000000000006312                 db    0
.eh_frame_hdr:0000000000006313                 db    0
.eh_frame_hdr:0000000000006313 _eh_frame_hdr   ends
.eh_frame_hdr:0000000000006313
LOAD:0000000000006314 ; ===========================================================================
LOAD:0000000000006314
LOAD:0000000000006314 ; Segment type: Pure code
LOAD:0000000000006314 ; Segment permissions: Read/Execute
LOAD:0000000000006314 LOAD            segment byte public 'CODE' use64
LOAD:0000000000006314                 assume cs:LOAD
LOAD:0000000000006314                 ;org 6314h
LOAD:0000000000006314                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000006314                 align 8
LOAD:0000000000006314 LOAD            ends
LOAD:0000000000006314
.eh_frame:0000000000006318 ; ===========================================================================
.eh_frame:0000000000006318
.eh_frame:0000000000006318 ; Segment type: Pure data
.eh_frame:0000000000006318 ; Segment permissions: Read
.eh_frame:0000000000006318 _eh_frame       segment qword public 'CONST' use64
.eh_frame:0000000000006318                 assume cs:_eh_frame
.eh_frame:0000000000006318                 ;org 6318h
.eh_frame:0000000000006318                 db  14h
.eh_frame:0000000000006319                 db    0
.eh_frame:000000000000631A                 db    0
.eh_frame:000000000000631B                 db    0
.eh_frame:000000000000631C                 db    0
.eh_frame:000000000000631D                 db    0
.eh_frame:000000000000631E                 db    0
.eh_frame:000000000000631F                 db    0
.eh_frame:0000000000006320                 db    1
.eh_frame:0000000000006321                 db  7Ah ; z
.eh_frame:0000000000006322                 db  52h ; R
.eh_frame:0000000000006323                 db    0
.eh_frame:0000000000006324                 db    1
.eh_frame:0000000000006325                 db  78h ; x
.eh_frame:0000000000006326                 db  10h
.eh_frame:0000000000006327                 db    1
.eh_frame:0000000000006328                 db  1Bh
.eh_frame:0000000000006329                 db  0Ch
.eh_frame:000000000000632A                 db    7
.eh_frame:000000000000632B                 db    8
.eh_frame:000000000000632C                 db  90h
.eh_frame:000000000000632D                 db    1
.eh_frame:000000000000632E                 db    7
.eh_frame:000000000000632F                 db  10h
.eh_frame:0000000000006330                 db  14h
.eh_frame:0000000000006331                 db    0
.eh_frame:0000000000006332                 db    0
.eh_frame:0000000000006333                 db    0
.eh_frame:0000000000006334                 db  1Ch
.eh_frame:0000000000006335                 db    0
.eh_frame:0000000000006336                 db    0
.eh_frame:0000000000006337                 db    0
.eh_frame:0000000000006338                 db  78h ; x
.eh_frame:0000000000006339                 db 0BAh
.eh_frame:000000000000633A                 db 0FFh
.eh_frame:000000000000633B                 db 0FFh
.eh_frame:000000000000633C                 db  2Bh ; +
.eh_frame:000000000000633D                 db    0
.eh_frame:000000000000633E                 db    0
.eh_frame:000000000000633F                 db    0
.eh_frame:0000000000006340                 db    0
.eh_frame:0000000000006341                 db    0
.eh_frame:0000000000006342                 db    0
.eh_frame:0000000000006343                 db    0
.eh_frame:0000000000006344                 db    0
.eh_frame:0000000000006345                 db    0
.eh_frame:0000000000006346                 db    0
.eh_frame:0000000000006347                 db    0
.eh_frame:0000000000006348                 db  14h
.eh_frame:0000000000006349                 db    0
.eh_frame:000000000000634A                 db    0
.eh_frame:000000000000634B                 db    0
.eh_frame:000000000000634C                 db    0
.eh_frame:000000000000634D                 db    0
.eh_frame:000000000000634E                 db    0
.eh_frame:000000000000634F                 db    0
.eh_frame:0000000000006350                 db    1
.eh_frame:0000000000006351                 db  7Ah ; z
.eh_frame:0000000000006352                 db  52h ; R
.eh_frame:0000000000006353                 db    0
.eh_frame:0000000000006354                 db    1
.eh_frame:0000000000006355                 db  78h ; x
.eh_frame:0000000000006356                 db  10h
.eh_frame:0000000000006357                 db    1
.eh_frame:0000000000006358                 db  1Bh
.eh_frame:0000000000006359                 db  0Ch
.eh_frame:000000000000635A                 db    7
.eh_frame:000000000000635B                 db    8
.eh_frame:000000000000635C                 db  90h
.eh_frame:000000000000635D                 db    1
.eh_frame:000000000000635E                 db    0
.eh_frame:000000000000635F                 db    0
.eh_frame:0000000000006360                 db  24h ; $
.eh_frame:0000000000006361                 db    0
.eh_frame:0000000000006362                 db    0
.eh_frame:0000000000006363                 db    0
.eh_frame:0000000000006364                 db  1Ch
.eh_frame:0000000000006365                 db    0
.eh_frame:0000000000006366                 db    0
.eh_frame:0000000000006367                 db    0
.eh_frame:0000000000006368                 db  28h ; (
.eh_frame:0000000000006369                 db 0B1h
.eh_frame:000000000000636A                 db 0FFh
.eh_frame:000000000000636B                 db 0FFh
.eh_frame:000000000000636C                 db  30h ; 0
.eh_frame:000000000000636D                 db    3
.eh_frame:000000000000636E                 db    0
.eh_frame:000000000000636F                 db    0
.eh_frame:0000000000006370                 db    0
.eh_frame:0000000000006371                 db  0Eh
.eh_frame:0000000000006372                 db  10h
.eh_frame:0000000000006373                 db  46h ; F
.eh_frame:0000000000006374                 db  0Eh
.eh_frame:0000000000006375                 db  18h
.eh_frame:0000000000006376                 db  4Ah ; J
.eh_frame:0000000000006377                 db  0Fh
.eh_frame:0000000000006378                 db  0Bh
.eh_frame:0000000000006379                 db  77h ; w
.eh_frame:000000000000637A                 db    8
.eh_frame:000000000000637B                 db  80h
.eh_frame:000000000000637C                 db    0
.eh_frame:000000000000637D                 db  3Fh ; ?
.eh_frame:000000000000637E                 db  1Ah
.eh_frame:000000000000637F                 db  3Bh ; ;
.eh_frame:0000000000006380                 db  2Ah ; *
.eh_frame:0000000000006381                 db  33h ; 3
.eh_frame:0000000000006382                 db  24h ; $
.eh_frame:0000000000006383                 db  22h ; "
.eh_frame:0000000000006384                 db    0
.eh_frame:0000000000006385                 db    0
.eh_frame:0000000000006386                 db    0
.eh_frame:0000000000006387                 db    0
.eh_frame:0000000000006388                 db  14h
.eh_frame:0000000000006389                 db    0
.eh_frame:000000000000638A                 db    0
.eh_frame:000000000000638B                 db    0
.eh_frame:000000000000638C                 db  44h ; D
.eh_frame:000000000000638D                 db    0
.eh_frame:000000000000638E                 db    0
.eh_frame:000000000000638F                 db    0
.eh_frame:0000000000006390                 db  30h ; 0
.eh_frame:0000000000006391                 db 0B4h
.eh_frame:0000000000006392                 db 0FFh
.eh_frame:0000000000006393                 db 0FFh
.eh_frame:0000000000006394                 db    8
.eh_frame:0000000000006395                 db    0
.eh_frame:0000000000006396                 db    0
.eh_frame:0000000000006397                 db    0
.eh_frame:0000000000006398                 db    0
.eh_frame:0000000000006399                 db    0
.eh_frame:000000000000639A                 db    0
.eh_frame:000000000000639B                 db    0
.eh_frame:000000000000639C                 db    0
.eh_frame:000000000000639D                 db    0
.eh_frame:000000000000639E                 db    0
.eh_frame:000000000000639F                 db    0
.eh_frame:00000000000063A0                 db  28h ; (
.eh_frame:00000000000063A1                 db    0
.eh_frame:00000000000063A2                 db    0
.eh_frame:00000000000063A3                 db    0
.eh_frame:00000000000063A4                 db  5Ch ; \
.eh_frame:00000000000063A5                 db    0
.eh_frame:00000000000063A6                 db    0
.eh_frame:00000000000063A7                 db    0
.eh_frame:00000000000063A8                 db  18h
.eh_frame:00000000000063A9                 db 0BBh
.eh_frame:00000000000063AA                 db 0FFh
.eh_frame:00000000000063AB                 db 0FFh
.eh_frame:00000000000063AC                 db 0DAh
.eh_frame:00000000000063AD                 db    3
.eh_frame:00000000000063AE                 db    0
.eh_frame:00000000000063AF                 db    0
.eh_frame:00000000000063B0                 db    0
.eh_frame:00000000000063B1                 db  42h ; B
.eh_frame:00000000000063B2                 db  0Eh
.eh_frame:00000000000063B3                 db  10h
.eh_frame:00000000000063B4                 db  8Dh
.eh_frame:00000000000063B5                 db    2
.eh_frame:00000000000063B6                 db  42h ; B
.eh_frame:00000000000063B7                 db  0Eh
.eh_frame:00000000000063B8                 db  18h
.eh_frame:00000000000063B9                 db  8Ch
.eh_frame:00000000000063BA                 db    3
.eh_frame:00000000000063BB                 db  46h ; F
.eh_frame:00000000000063BC                 db  0Eh
.eh_frame:00000000000063BD                 db  20h
.eh_frame:00000000000063BE                 db  86h
.eh_frame:00000000000063BF                 db    4
.eh_frame:00000000000063C0                 db  41h ; A
.eh_frame:00000000000063C1                 db  0Eh
.eh_frame:00000000000063C2                 db  28h ; (
.eh_frame:00000000000063C3                 db  83h
.eh_frame:00000000000063C4                 db    5
.eh_frame:00000000000063C5                 db  49h ; I
.eh_frame:00000000000063C6                 db  0Eh
.eh_frame:00000000000063C7                 db 0B0h
.eh_frame:00000000000063C8                 db    1
.eh_frame:00000000000063C9                 db    0
.eh_frame:00000000000063CA                 db    0
.eh_frame:00000000000063CB                 db    0
.eh_frame:00000000000063CC                 db  70h ; p
.eh_frame:00000000000063CD                 db    0
.eh_frame:00000000000063CE                 db    0
.eh_frame:00000000000063CF                 db    0
.eh_frame:00000000000063D0                 db  88h
.eh_frame:00000000000063D1                 db    0
.eh_frame:00000000000063D2                 db    0
.eh_frame:00000000000063D3                 db    0
.eh_frame:00000000000063D4                 db 0FCh
.eh_frame:00000000000063D5                 db 0B3h
.eh_frame:00000000000063D6                 db 0FFh
.eh_frame:00000000000063D7                 db 0FFh
.eh_frame:00000000000063D8                 db 0D8h
.eh_frame:00000000000063D9                 db    5
.eh_frame:00000000000063DA                 db    0
.eh_frame:00000000000063DB                 db    0
.eh_frame:00000000000063DC                 db    0
.eh_frame:00000000000063DD                 db  42h ; B
.eh_frame:00000000000063DE                 db  0Eh
.eh_frame:00000000000063DF                 db  10h
.eh_frame:00000000000063E0                 db  8Fh
.eh_frame:00000000000063E1                 db    2
.eh_frame:00000000000063E2                 db  42h ; B
.eh_frame:00000000000063E3                 db  0Eh
.eh_frame:00000000000063E4                 db  18h
.eh_frame:00000000000063E5                 db  8Eh
.eh_frame:00000000000063E6                 db    3
.eh_frame:00000000000063E7                 db  45h ; E
.eh_frame:00000000000063E8                 db  0Eh
.eh_frame:00000000000063E9                 db  20h
.eh_frame:00000000000063EA                 db  8Dh
.eh_frame:00000000000063EB                 db    4
.eh_frame:00000000000063EC                 db  42h ; B
.eh_frame:00000000000063ED                 db  0Eh
.eh_frame:00000000000063EE                 db  28h ; (
.eh_frame:00000000000063EF                 db  8Ch
.eh_frame:00000000000063F0                 db    5
.eh_frame:00000000000063F1                 db  44h ; D
.eh_frame:00000000000063F2                 db  0Eh
.eh_frame:00000000000063F3                 db  30h ; 0
.eh_frame:00000000000063F4                 db  86h
.eh_frame:00000000000063F5                 db    6
.eh_frame:00000000000063F6                 db  41h ; A
.eh_frame:00000000000063F7                 db  0Eh
.eh_frame:00000000000063F8                 db  38h ; 8
.eh_frame:00000000000063F9                 db  83h
.eh_frame:00000000000063FA                 db    7
.eh_frame:00000000000063FB                 db  4Fh ; O
.eh_frame:00000000000063FC                 db  0Eh
.eh_frame:00000000000063FD                 db 0A0h
.eh_frame:00000000000063FE                 db    1
.eh_frame:00000000000063FF                 db    3
.eh_frame:0000000000006400                 db 0D3h
.eh_frame:0000000000006401                 db    2
.eh_frame:0000000000006402                 db  0Ah
.eh_frame:0000000000006403                 db  0Eh
.eh_frame:0000000000006404                 db  38h ; 8
.eh_frame:0000000000006405                 db  41h ; A
.eh_frame:0000000000006406                 db  0Eh
.eh_frame:0000000000006407                 db  30h ; 0
.eh_frame:0000000000006408                 db  41h ; A
.eh_frame:0000000000006409                 db  0Eh
.eh_frame:000000000000640A                 db  28h ; (
.eh_frame:000000000000640B                 db  42h ; B
.eh_frame:000000000000640C                 db  0Eh
.eh_frame:000000000000640D                 db  20h
.eh_frame:000000000000640E                 db  42h ; B
.eh_frame:000000000000640F                 db  0Eh
.eh_frame:0000000000006410                 db  18h
.eh_frame:0000000000006411                 db  42h ; B
.eh_frame:0000000000006412                 db  0Eh
.eh_frame:0000000000006413                 db  10h
.eh_frame:0000000000006414                 db  42h ; B
.eh_frame:0000000000006415                 db  0Eh
.eh_frame:0000000000006416                 db    8
.eh_frame:0000000000006417                 db  41h ; A
.eh_frame:0000000000006418                 db  0Bh
.eh_frame:0000000000006419                 db    3
.eh_frame:000000000000641A                 db  12h
.eh_frame:000000000000641B                 db    1
.eh_frame:000000000000641C                 db  0Eh
.eh_frame:000000000000641D                 db 0A8h
.eh_frame:000000000000641E                 db    1
.eh_frame:000000000000641F                 db  44h ; D
.eh_frame:0000000000006420                 db  0Eh
.eh_frame:0000000000006421                 db 0B0h
.eh_frame:0000000000006422                 db    1
.eh_frame:0000000000006423                 db  55h ; U
.eh_frame:0000000000006424                 db  0Eh
.eh_frame:0000000000006425                 db 0A8h
.eh_frame:0000000000006426                 db    1
.eh_frame:0000000000006427                 db  41h ; A
.eh_frame:0000000000006428                 db  0Eh
.eh_frame:0000000000006429                 db 0A0h
.eh_frame:000000000000642A                 db    1
.eh_frame:000000000000642B                 db    2
.eh_frame:000000000000642C                 db 0DFh
.eh_frame:000000000000642D                 db  0Eh
.eh_frame:000000000000642E                 db 0A8h
.eh_frame:000000000000642F                 db    1
.eh_frame:0000000000006430                 db  44h ; D
.eh_frame:0000000000006431                 db  0Eh
.eh_frame:0000000000006432                 db 0B0h
.eh_frame:0000000000006433                 db    1
.eh_frame:0000000000006434                 db  52h ; R
.eh_frame:0000000000006435                 db  0Eh
.eh_frame:0000000000006436                 db 0A8h
.eh_frame:0000000000006437                 db    1
.eh_frame:0000000000006438                 db  41h ; A
.eh_frame:0000000000006439                 db  0Eh
.eh_frame:000000000000643A                 db 0A0h
.eh_frame:000000000000643B                 db    1
.eh_frame:000000000000643C                 db    0
.eh_frame:000000000000643D                 db    0
.eh_frame:000000000000643E                 db    0
.eh_frame:000000000000643F                 db    0
.eh_frame:0000000000006440                 db  4Ch ; L
.eh_frame:0000000000006441                 db    0
.eh_frame:0000000000006442                 db    0
.eh_frame:0000000000006443                 db    0
.eh_frame:0000000000006444                 db 0FCh
.eh_frame:0000000000006445                 db    0
.eh_frame:0000000000006446                 db    0
.eh_frame:0000000000006447                 db    0
.eh_frame:0000000000006448                 db  58h ; X
.eh_frame:0000000000006449                 db 0BEh
.eh_frame:000000000000644A                 db 0FFh
.eh_frame:000000000000644B                 db 0FFh
.eh_frame:000000000000644C                 db 0E1h
.eh_frame:000000000000644D                 db    1
.eh_frame:000000000000644E                 db    0
.eh_frame:000000000000644F                 db    0
.eh_frame:0000000000006450                 db    0
.eh_frame:0000000000006451                 db  42h ; B
.eh_frame:0000000000006452                 db  0Eh
.eh_frame:0000000000006453                 db  10h
.eh_frame:0000000000006454                 db  8Fh
.eh_frame:0000000000006455                 db    2
.eh_frame:0000000000006456                 db  42h ; B
.eh_frame:0000000000006457                 db  0Eh
.eh_frame:0000000000006458                 db  18h
.eh_frame:0000000000006459                 db  8Eh
.eh_frame:000000000000645A                 db    3
.eh_frame:000000000000645B                 db  45h ; E
.eh_frame:000000000000645C                 db  0Eh
.eh_frame:000000000000645D                 db  20h
.eh_frame:000000000000645E                 db  8Dh
.eh_frame:000000000000645F                 db    4
.eh_frame:0000000000006460                 db  42h ; B
.eh_frame:0000000000006461                 db  0Eh
.eh_frame:0000000000006462                 db  28h ; (
.eh_frame:0000000000006463                 db  8Ch
.eh_frame:0000000000006464                 db    5
.eh_frame:0000000000006465                 db  41h ; A
.eh_frame:0000000000006466                 db  0Eh
.eh_frame:0000000000006467                 db  30h ; 0
.eh_frame:0000000000006468                 db  86h
.eh_frame:0000000000006469                 db    6
.eh_frame:000000000000646A                 db  41h ; A
.eh_frame:000000000000646B                 db  0Eh
.eh_frame:000000000000646C                 db  38h ; 8
.eh_frame:000000000000646D                 db  83h
.eh_frame:000000000000646E                 db    7
.eh_frame:000000000000646F                 db  47h ; G
.eh_frame:0000000000006470                 db  0Eh
.eh_frame:0000000000006471                 db  60h ; `
.eh_frame:0000000000006472                 db    3
.eh_frame:0000000000006473                 db  44h ; D
.eh_frame:0000000000006474                 db    1
.eh_frame:0000000000006475                 db  0Ah
.eh_frame:0000000000006476                 db  0Eh
.eh_frame:0000000000006477                 db  38h ; 8
.eh_frame:0000000000006478                 db  41h ; A
.eh_frame:0000000000006479                 db  0Eh
.eh_frame:000000000000647A                 db  30h ; 0
.eh_frame:000000000000647B                 db  41h ; A
.eh_frame:000000000000647C                 db  0Eh
.eh_frame:000000000000647D                 db  28h ; (
.eh_frame:000000000000647E                 db  42h ; B
.eh_frame:000000000000647F                 db  0Eh
.eh_frame:0000000000006480                 db  20h
.eh_frame:0000000000006481                 db  42h ; B
.eh_frame:0000000000006482                 db  0Eh
.eh_frame:0000000000006483                 db  18h
.eh_frame:0000000000006484                 db  42h ; B
.eh_frame:0000000000006485                 db  0Eh
.eh_frame:0000000000006486                 db  10h
.eh_frame:0000000000006487                 db  42h ; B
.eh_frame:0000000000006488                 db  0Eh
.eh_frame:0000000000006489                 db    8
.eh_frame:000000000000648A                 db  46h ; F
.eh_frame:000000000000648B                 db  0Bh
.eh_frame:000000000000648C                 db    0
.eh_frame:000000000000648D                 db    0
.eh_frame:000000000000648E                 db    0
.eh_frame:000000000000648F                 db    0
.eh_frame:0000000000006490                 db  10h
.eh_frame:0000000000006491                 db    0
.eh_frame:0000000000006492                 db    0
.eh_frame:0000000000006493                 db    0
.eh_frame:0000000000006494                 db  4Ch ; L
.eh_frame:0000000000006495                 db    1
.eh_frame:0000000000006496                 db    0
.eh_frame:0000000000006497                 db    0
.eh_frame:0000000000006498                 db 0F8h
.eh_frame:0000000000006499                 db 0BFh
.eh_frame:000000000000649A                 db 0FFh
.eh_frame:000000000000649B                 db 0FFh
.eh_frame:000000000000649C                 db    8
.eh_frame:000000000000649D                 db    0
.eh_frame:000000000000649E                 db    0
.eh_frame:000000000000649F                 db    0
.eh_frame:00000000000064A0                 db    0
.eh_frame:00000000000064A1                 db    0
.eh_frame:00000000000064A2                 db    0
.eh_frame:00000000000064A3                 db    0
.eh_frame:00000000000064A4                 db  10h
.eh_frame:00000000000064A5                 db    0
.eh_frame:00000000000064A6                 db    0
.eh_frame:00000000000064A7                 db    0
.eh_frame:00000000000064A8                 db  60h ; `
.eh_frame:00000000000064A9                 db    1
.eh_frame:00000000000064AA                 db    0
.eh_frame:00000000000064AB                 db    0
.eh_frame:00000000000064AC                 db 0F4h
.eh_frame:00000000000064AD                 db 0BFh
.eh_frame:00000000000064AE                 db 0FFh
.eh_frame:00000000000064AF                 db 0FFh
.eh_frame:00000000000064B0                 db    8
.eh_frame:00000000000064B1                 db    0
.eh_frame:00000000000064B2                 db    0
.eh_frame:00000000000064B3                 db    0
.eh_frame:00000000000064B4                 db    0
.eh_frame:00000000000064B5                 db    0
.eh_frame:00000000000064B6                 db    0
.eh_frame:00000000000064B7                 db    0
.eh_frame:00000000000064B8                 db  2Ch ; ,
.eh_frame:00000000000064B9                 db    0
.eh_frame:00000000000064BA                 db    0
.eh_frame:00000000000064BB                 db    0
.eh_frame:00000000000064BC                 db  74h ; t
.eh_frame:00000000000064BD                 db    1
.eh_frame:00000000000064BE                 db    0
.eh_frame:00000000000064BF                 db    0
.eh_frame:00000000000064C0                 db 0F0h
.eh_frame:00000000000064C1                 db 0BFh
.eh_frame:00000000000064C2                 db 0FFh
.eh_frame:00000000000064C3                 db 0FFh
.eh_frame:00000000000064C4                 db 0A4h
.eh_frame:00000000000064C5                 db    0
.eh_frame:00000000000064C6                 db    0
.eh_frame:00000000000064C7                 db    0
.eh_frame:00000000000064C8                 db    0
.eh_frame:00000000000064C9                 db  41h ; A
.eh_frame:00000000000064CA                 db  0Eh
.eh_frame:00000000000064CB                 db  10h
.eh_frame:00000000000064CC                 db  86h
.eh_frame:00000000000064CD                 db    2
.eh_frame:00000000000064CE                 db  41h ; A
.eh_frame:00000000000064CF                 db  0Eh
.eh_frame:00000000000064D0                 db  18h
.eh_frame:00000000000064D1                 db  83h
.eh_frame:00000000000064D2                 db    3
.eh_frame:00000000000064D3                 db  44h ; D
.eh_frame:00000000000064D4                 db  0Eh
.eh_frame:00000000000064D5                 db  20h
.eh_frame:00000000000064D6                 db  7Ah ; z
.eh_frame:00000000000064D7                 db  0Ah
.eh_frame:00000000000064D8                 db  0Eh
.eh_frame:00000000000064D9                 db  18h
.eh_frame:00000000000064DA                 db  41h ; A
.eh_frame:00000000000064DB                 db  0Eh
.eh_frame:00000000000064DC                 db  10h
.eh_frame:00000000000064DD                 db  41h ; A
.eh_frame:00000000000064DE                 db  0Eh
.eh_frame:00000000000064DF                 db    8
.eh_frame:00000000000064E0                 db  41h ; A
.eh_frame:00000000000064E1                 db  0Bh
.eh_frame:00000000000064E2                 db    0
.eh_frame:00000000000064E3                 db    0
.eh_frame:00000000000064E4                 db    0
.eh_frame:00000000000064E5                 db    0
.eh_frame:00000000000064E6                 db    0
.eh_frame:00000000000064E7                 db    0
.eh_frame:00000000000064E8                 db  1Ch
.eh_frame:00000000000064E9                 db    0
.eh_frame:00000000000064EA                 db    0
.eh_frame:00000000000064EB                 db    0
.eh_frame:00000000000064EC                 db 0A4h
.eh_frame:00000000000064ED                 db    1
.eh_frame:00000000000064EE                 db    0
.eh_frame:00000000000064EF                 db    0
.eh_frame:00000000000064F0                 db  70h ; p
.eh_frame:00000000000064F1                 db 0C0h
.eh_frame:00000000000064F2                 db 0FFh
.eh_frame:00000000000064F3                 db 0FFh
.eh_frame:00000000000064F4                 db  9Fh
.eh_frame:00000000000064F5                 db    0
.eh_frame:00000000000064F6                 db    0
.eh_frame:00000000000064F7                 db    0
.eh_frame:00000000000064F8                 db    0
.eh_frame:00000000000064F9                 db  44h ; D
.eh_frame:00000000000064FA                 db  0Eh
.eh_frame:00000000000064FB                 db  10h
.eh_frame:00000000000064FC                 db  83h
.eh_frame:00000000000064FD                 db    2
.eh_frame:00000000000064FE                 db    2
.eh_frame:00000000000064FF                 db  78h ; x
.eh_frame:0000000000006500                 db  0Ah
.eh_frame:0000000000006501                 db  0Eh
.eh_frame:0000000000006502                 db    8
.eh_frame:0000000000006503                 db  41h ; A
.eh_frame:0000000000006504                 db  0Bh
.eh_frame:0000000000006505                 db    0
.eh_frame:0000000000006506                 db    0
.eh_frame:0000000000006507                 db    0
.eh_frame:0000000000006508                 db  40h ; @
.eh_frame:0000000000006509                 db    0
.eh_frame:000000000000650A                 db    0
.eh_frame:000000000000650B                 db    0
.eh_frame:000000000000650C                 db 0C4h
.eh_frame:000000000000650D                 db    1
.eh_frame:000000000000650E                 db    0
.eh_frame:000000000000650F                 db    0
.eh_frame:0000000000006510                 db 0F0h
.eh_frame:0000000000006511                 db 0C0h
.eh_frame:0000000000006512                 db 0FFh
.eh_frame:0000000000006513                 db 0FFh
.eh_frame:0000000000006514                 db 0E7h
.eh_frame:0000000000006515                 db    0
.eh_frame:0000000000006516                 db    0
.eh_frame:0000000000006517                 db    0
.eh_frame:0000000000006518                 db    0
.eh_frame:0000000000006519                 db  41h ; A
.eh_frame:000000000000651A                 db  0Eh
.eh_frame:000000000000651B                 db  10h
.eh_frame:000000000000651C                 db  86h
.eh_frame:000000000000651D                 db    2
.eh_frame:000000000000651E                 db  41h ; A
.eh_frame:000000000000651F                 db  0Eh
.eh_frame:0000000000006520                 db  18h
.eh_frame:0000000000006521                 db  83h
.eh_frame:0000000000006522                 db    3
.eh_frame:0000000000006523                 db  49h ; I
.eh_frame:0000000000006524                 db  0Eh
.eh_frame:0000000000006525                 db  20h
.eh_frame:0000000000006526                 db  6Eh ; n
.eh_frame:0000000000006527                 db  0Ah
.eh_frame:0000000000006528                 db  0Eh
.eh_frame:0000000000006529                 db  18h
.eh_frame:000000000000652A                 db  41h ; A
.eh_frame:000000000000652B                 db  0Eh
.eh_frame:000000000000652C                 db  10h
.eh_frame:000000000000652D                 db  41h ; A
.eh_frame:000000000000652E                 db  0Eh
.eh_frame:000000000000652F                 db    8
.eh_frame:0000000000006530                 db  45h ; E
.eh_frame:0000000000006531                 db  0Bh
.eh_frame:0000000000006532                 db    2
.eh_frame:0000000000006533                 db  4Ah ; J
.eh_frame:0000000000006534                 db  0Ah
.eh_frame:0000000000006535                 db  0Eh
.eh_frame:0000000000006536                 db  18h
.eh_frame:0000000000006537                 db  41h ; A
.eh_frame:0000000000006538                 db  0Eh
.eh_frame:0000000000006539                 db  10h
.eh_frame:000000000000653A                 db  41h ; A
.eh_frame:000000000000653B                 db  0Eh
.eh_frame:000000000000653C                 db    8
.eh_frame:000000000000653D                 db  44h ; D
.eh_frame:000000000000653E                 db  0Bh
.eh_frame:000000000000653F                 db    2
.eh_frame:0000000000006540                 db  54h ; T
.eh_frame:0000000000006541                 db  0Eh
.eh_frame:0000000000006542                 db  18h
.eh_frame:0000000000006543                 db  41h ; A
.eh_frame:0000000000006544                 db  0Eh
.eh_frame:0000000000006545                 db  10h
.eh_frame:0000000000006546                 db  41h ; A
.eh_frame:0000000000006547                 db  0Eh
.eh_frame:0000000000006548                 db    8
.eh_frame:0000000000006549                 db    0
.eh_frame:000000000000654A                 db    0
.eh_frame:000000000000654B                 db    0
.eh_frame:000000000000654C                 db  74h ; t
.eh_frame:000000000000654D                 db    0
.eh_frame:000000000000654E                 db    0
.eh_frame:000000000000654F                 db    0
.eh_frame:0000000000006550                 db    8
.eh_frame:0000000000006551                 db    2
.eh_frame:0000000000006552                 db    0
.eh_frame:0000000000006553                 db    0
.eh_frame:0000000000006554                 db  9Ch
.eh_frame:0000000000006555                 db 0C1h
.eh_frame:0000000000006556                 db 0FFh
.eh_frame:0000000000006557                 db 0FFh
.eh_frame:0000000000006558                 db  34h ; 4
.eh_frame:0000000000006559                 db  12h
.eh_frame:000000000000655A                 db    0
.eh_frame:000000000000655B                 db    0
.eh_frame:000000000000655C                 db    0
.eh_frame:000000000000655D                 db  42h ; B
.eh_frame:000000000000655E                 db  0Eh
.eh_frame:000000000000655F                 db  10h
.eh_frame:0000000000006560                 db  8Fh
.eh_frame:0000000000006561                 db    2
.eh_frame:0000000000006562                 db  42h ; B
.eh_frame:0000000000006563                 db  0Eh
.eh_frame:0000000000006564                 db  18h
.eh_frame:0000000000006565                 db  8Eh
.eh_frame:0000000000006566                 db    3
.eh_frame:0000000000006567                 db  45h ; E
.eh_frame:0000000000006568                 db  0Eh
.eh_frame:0000000000006569                 db  20h
.eh_frame:000000000000656A                 db  8Dh
.eh_frame:000000000000656B                 db    4
.eh_frame:000000000000656C                 db  42h ; B
.eh_frame:000000000000656D                 db  0Eh
.eh_frame:000000000000656E                 db  28h ; (
.eh_frame:000000000000656F                 db  8Ch
.eh_frame:0000000000006570                 db    5
.eh_frame:0000000000006571                 db  44h ; D
.eh_frame:0000000000006572                 db  0Eh
.eh_frame:0000000000006573                 db  30h ; 0
.eh_frame:0000000000006574                 db  86h
.eh_frame:0000000000006575                 db    6
.eh_frame:0000000000006576                 db  41h ; A
.eh_frame:0000000000006577                 db  0Eh
.eh_frame:0000000000006578                 db  38h ; 8
.eh_frame:0000000000006579                 db  83h
.eh_frame:000000000000657A                 db    7
.eh_frame:000000000000657B                 db  53h ; S
.eh_frame:000000000000657C                 db  0Eh
.eh_frame:000000000000657D                 db 0F0h
.eh_frame:000000000000657E                 db    1
.eh_frame:000000000000657F                 db    3
.eh_frame:0000000000006580                 db  81h
.eh_frame:0000000000006581                 db  0Bh
.eh_frame:0000000000006582                 db  0Eh
.eh_frame:0000000000006583                 db 0F8h
.eh_frame:0000000000006584                 db    1
.eh_frame:0000000000006585                 db  4Ah ; J
.eh_frame:0000000000006586                 db  0Eh
.eh_frame:0000000000006587                 db  80h
.eh_frame:0000000000006588                 db    2
.eh_frame:0000000000006589                 db  44h ; D
.eh_frame:000000000000658A                 db  0Eh
.eh_frame:000000000000658B                 db  88h
.eh_frame:000000000000658C                 db    2
.eh_frame:000000000000658D                 db  45h ; E
.eh_frame:000000000000658E                 db  0Eh
.eh_frame:000000000000658F                 db  90h
.eh_frame:0000000000006590                 db    2
.eh_frame:0000000000006591                 db  5Fh ; _
.eh_frame:0000000000006592                 db  0Eh
.eh_frame:0000000000006593                 db 0F0h
.eh_frame:0000000000006594                 db    1
.eh_frame:0000000000006595                 db  64h ; d
.eh_frame:0000000000006596                 db  0Ah
.eh_frame:0000000000006597                 db  0Eh
.eh_frame:0000000000006598                 db  38h ; 8
.eh_frame:0000000000006599                 db  41h ; A
.eh_frame:000000000000659A                 db  0Eh
.eh_frame:000000000000659B                 db  30h ; 0
.eh_frame:000000000000659C                 db  41h ; A
.eh_frame:000000000000659D                 db  0Eh
.eh_frame:000000000000659E                 db  28h ; (
.eh_frame:000000000000659F                 db  42h ; B
.eh_frame:00000000000065A0                 db  0Eh
.eh_frame:00000000000065A1                 db  20h
.eh_frame:00000000000065A2                 db  42h ; B
.eh_frame:00000000000065A3                 db  0Eh
.eh_frame:00000000000065A4                 db  18h
.eh_frame:00000000000065A5                 db  42h ; B
.eh_frame:00000000000065A6                 db  0Eh
.eh_frame:00000000000065A7                 db  10h
.eh_frame:00000000000065A8                 db  42h ; B
.eh_frame:00000000000065A9                 db  0Eh
.eh_frame:00000000000065AA                 db    8
.eh_frame:00000000000065AB                 db  44h ; D
.eh_frame:00000000000065AC                 db  0Bh
.eh_frame:00000000000065AD                 db    3
.eh_frame:00000000000065AE                 db  99h
.eh_frame:00000000000065AF                 db    5
.eh_frame:00000000000065B0                 db  0Eh
.eh_frame:00000000000065B1                 db 0F8h
.eh_frame:00000000000065B2                 db    1
.eh_frame:00000000000065B3                 db  4Dh ; M
.eh_frame:00000000000065B4                 db  0Eh
.eh_frame:00000000000065B5                 db  80h
.eh_frame:00000000000065B6                 db    2
.eh_frame:00000000000065B7                 db  44h ; D
.eh_frame:00000000000065B8                 db  0Eh
.eh_frame:00000000000065B9                 db  88h
.eh_frame:00000000000065BA                 db    2
.eh_frame:00000000000065BB                 db  47h ; G
.eh_frame:00000000000065BC                 db  0Eh
.eh_frame:00000000000065BD                 db  90h
.eh_frame:00000000000065BE                 db    2
.eh_frame:00000000000065BF                 db  5Bh ; [
.eh_frame:00000000000065C0                 db  0Eh
.eh_frame:00000000000065C1                 db 0F0h
.eh_frame:00000000000065C2                 db    1
.eh_frame:00000000000065C3                 db    0
.eh_frame:00000000000065C4                 db  68h ; h
.eh_frame:00000000000065C5                 db    0
.eh_frame:00000000000065C6                 db    0
.eh_frame:00000000000065C7                 db    0
.eh_frame:00000000000065C8                 db  80h
.eh_frame:00000000000065C9                 db    2
.eh_frame:00000000000065CA                 db    0
.eh_frame:00000000000065CB                 db    0
.eh_frame:00000000000065CC                 db  64h ; d
.eh_frame:00000000000065CD                 db 0D3h
.eh_frame:00000000000065CE                 db 0FFh
.eh_frame:00000000000065CF                 db 0FFh
.eh_frame:00000000000065D0                 db 0ABh
.eh_frame:00000000000065D1                 db    1
.eh_frame:00000000000065D2                 db    0
.eh_frame:00000000000065D3                 db    0
.eh_frame:00000000000065D4                 db    0
.eh_frame:00000000000065D5                 db  42h ; B
.eh_frame:00000000000065D6                 db  0Eh
.eh_frame:00000000000065D7                 db  10h
.eh_frame:00000000000065D8                 db  8Fh
.eh_frame:00000000000065D9                 db    2
.eh_frame:00000000000065DA                 db  42h ; B
.eh_frame:00000000000065DB                 db  0Eh
.eh_frame:00000000000065DC                 db  18h
.eh_frame:00000000000065DD                 db  8Eh
.eh_frame:00000000000065DE                 db    3
.eh_frame:00000000000065DF                 db  45h ; E
.eh_frame:00000000000065E0                 db  0Eh
.eh_frame:00000000000065E1                 db  20h
.eh_frame:00000000000065E2                 db  8Dh
.eh_frame:00000000000065E3                 db    4
.eh_frame:00000000000065E4                 db  42h ; B
.eh_frame:00000000000065E5                 db  0Eh
.eh_frame:00000000000065E6                 db  28h ; (
.eh_frame:00000000000065E7                 db  8Ch
.eh_frame:00000000000065E8                 db    5
.eh_frame:00000000000065E9                 db  44h ; D
.eh_frame:00000000000065EA                 db  0Eh
.eh_frame:00000000000065EB                 db  30h ; 0
.eh_frame:00000000000065EC                 db  86h
.eh_frame:00000000000065ED                 db    6
.eh_frame:00000000000065EE                 db  41h ; A
.eh_frame:00000000000065EF                 db  0Eh
.eh_frame:00000000000065F0                 db  38h ; 8
.eh_frame:00000000000065F1                 db  83h
.eh_frame:00000000000065F2                 db    7
.eh_frame:00000000000065F3                 db  47h ; G
.eh_frame:00000000000065F4                 db  0Eh
.eh_frame:00000000000065F5                 db  60h ; `
.eh_frame:00000000000065F6                 db    2
.eh_frame:00000000000065F7                 db  99h
.eh_frame:00000000000065F8                 db  0Eh
.eh_frame:00000000000065F9                 db  68h ; h
.eh_frame:00000000000065FA                 db  5Fh ; _
.eh_frame:00000000000065FB                 db  0Eh
.eh_frame:00000000000065FC                 db  70h ; p
.eh_frame:00000000000065FD                 db  46h ; F
.eh_frame:00000000000065FE                 db  0Eh
.eh_frame:00000000000065FF                 db  78h ; x
.eh_frame:0000000000006600                 db  42h ; B
.eh_frame:0000000000006601                 db  0Eh
.eh_frame:0000000000006602                 db  80h
.eh_frame:0000000000006603                 db    1
.eh_frame:0000000000006604                 db  59h ; Y
.eh_frame:0000000000006605                 db  0Eh
.eh_frame:0000000000006606                 db  60h ; `
.eh_frame:0000000000006607                 db    2
.eh_frame:0000000000006608                 db  40h ; @
.eh_frame:0000000000006609                 db  0Eh
.eh_frame:000000000000660A                 db  68h ; h
.eh_frame:000000000000660B                 db  4Bh ; K
.eh_frame:000000000000660C                 db  0Eh
.eh_frame:000000000000660D                 db  70h ; p
.eh_frame:000000000000660E                 db  43h ; C
.eh_frame:000000000000660F                 db  0Eh
.eh_frame:0000000000006610                 db  78h ; x
.eh_frame:0000000000006611                 db  45h ; E
.eh_frame:0000000000006612                 db  0Eh
.eh_frame:0000000000006613                 db  80h
.eh_frame:0000000000006614                 db    1
.eh_frame:0000000000006615                 db  5Eh ; ^
.eh_frame:0000000000006616                 db  0Eh
.eh_frame:0000000000006617                 db  60h ; `
.eh_frame:0000000000006618                 db  4Ch ; L
.eh_frame:0000000000006619                 db  0Ah
.eh_frame:000000000000661A                 db  0Eh
.eh_frame:000000000000661B                 db  38h ; 8
.eh_frame:000000000000661C                 db  44h ; D
.eh_frame:000000000000661D                 db  0Eh
.eh_frame:000000000000661E                 db  30h ; 0
.eh_frame:000000000000661F                 db  41h ; A
.eh_frame:0000000000006620                 db  0Eh
.eh_frame:0000000000006621                 db  28h ; (
.eh_frame:0000000000006622                 db  42h ; B
.eh_frame:0000000000006623                 db  0Eh
.eh_frame:0000000000006624                 db  20h
.eh_frame:0000000000006625                 db  42h ; B
.eh_frame:0000000000006626                 db  0Eh
.eh_frame:0000000000006627                 db  18h
.eh_frame:0000000000006628                 db  42h ; B
.eh_frame:0000000000006629                 db  0Eh
.eh_frame:000000000000662A                 db  10h
.eh_frame:000000000000662B                 db  42h ; B
.eh_frame:000000000000662C                 db  0Eh
.eh_frame:000000000000662D                 db    8
.eh_frame:000000000000662E                 db  46h ; F
.eh_frame:000000000000662F                 db  0Bh
.eh_frame:0000000000006630                 db  28h ; (
.eh_frame:0000000000006631                 db    0
.eh_frame:0000000000006632                 db    0
.eh_frame:0000000000006633                 db    0
.eh_frame:0000000000006634                 db 0ECh
.eh_frame:0000000000006635                 db    2
.eh_frame:0000000000006636                 db    0
.eh_frame:0000000000006637                 db    0
.eh_frame:0000000000006638                 db 0A8h
.eh_frame:0000000000006639                 db 0D4h
.eh_frame:000000000000663A                 db 0FFh
.eh_frame:000000000000663B                 db 0FFh
.eh_frame:000000000000663C                 db  36h ; 6
.eh_frame:000000000000663D                 db    0
.eh_frame:000000000000663E                 db    0
.eh_frame:000000000000663F                 db    0
.eh_frame:0000000000006640                 db    0
.eh_frame:0000000000006641                 db  42h ; B
.eh_frame:0000000000006642                 db  0Eh
.eh_frame:0000000000006643                 db  10h
.eh_frame:0000000000006644                 db  8Ch
.eh_frame:0000000000006645                 db    2
.eh_frame:0000000000006646                 db  41h ; A
.eh_frame:0000000000006647                 db  0Eh
.eh_frame:0000000000006648                 db  18h
.eh_frame:0000000000006649                 db  86h
.eh_frame:000000000000664A                 db    3
.eh_frame:000000000000664B                 db  41h ; A
.eh_frame:000000000000664C                 db  0Eh
.eh_frame:000000000000664D                 db  20h
.eh_frame:000000000000664E                 db  83h
.eh_frame:000000000000664F                 db    4
.eh_frame:0000000000006650                 db  6Eh ; n
.eh_frame:0000000000006651                 db  0Eh
.eh_frame:0000000000006652                 db  18h
.eh_frame:0000000000006653                 db  41h ; A
.eh_frame:0000000000006654                 db  0Eh
.eh_frame:0000000000006655                 db  10h
.eh_frame:0000000000006656                 db  42h ; B
.eh_frame:0000000000006657                 db  0Eh
.eh_frame:0000000000006658                 db    8
.eh_frame:0000000000006659                 db    0
.eh_frame:000000000000665A                 db    0
.eh_frame:000000000000665B                 db    0
.eh_frame:000000000000665C                 db  10h
.eh_frame:000000000000665D                 db    0
.eh_frame:000000000000665E                 db    0
.eh_frame:000000000000665F                 db    0
.eh_frame:0000000000006660                 db  18h
.eh_frame:0000000000006661                 db    3
.eh_frame:0000000000006662                 db    0
.eh_frame:0000000000006663                 db    0
.eh_frame:0000000000006664                 db 0BCh
.eh_frame:0000000000006665                 db 0D4h
.eh_frame:0000000000006666                 db 0FFh
.eh_frame:0000000000006667                 db 0FFh
.eh_frame:0000000000006668                 db  11h
.eh_frame:0000000000006669                 db    0
.eh_frame:000000000000666A                 db    0
.eh_frame:000000000000666B                 db    0
.eh_frame:000000000000666C                 db    0
.eh_frame:000000000000666D                 db    0
.eh_frame:000000000000666E                 db    0
.eh_frame:000000000000666F                 db    0
.eh_frame:0000000000006670                 db  10h
.eh_frame:0000000000006671                 db    0
.eh_frame:0000000000006672                 db    0
.eh_frame:0000000000006673                 db    0
.eh_frame:0000000000006674                 db  2Ch ; ,
.eh_frame:0000000000006675                 db    3
.eh_frame:0000000000006676                 db    0
.eh_frame:0000000000006677                 db    0
.eh_frame:0000000000006678                 db 0C8h
.eh_frame:0000000000006679                 db 0D4h
.eh_frame:000000000000667A                 db 0FFh
.eh_frame:000000000000667B                 db 0FFh
.eh_frame:000000000000667C                 db  11h
.eh_frame:000000000000667D                 db    0
.eh_frame:000000000000667E                 db    0
.eh_frame:000000000000667F                 db    0
.eh_frame:0000000000006680                 db    0
.eh_frame:0000000000006681                 db    0
.eh_frame:0000000000006682                 db    0
.eh_frame:0000000000006683                 db    0
.eh_frame:0000000000006684                 db  10h
.eh_frame:0000000000006685                 db    0
.eh_frame:0000000000006686                 db    0
.eh_frame:0000000000006687                 db    0
.eh_frame:0000000000006688                 db  40h ; @
.eh_frame:0000000000006689                 db    3
.eh_frame:000000000000668A                 db    0
.eh_frame:000000000000668B                 db    0
.eh_frame:000000000000668C                 db 0D4h
.eh_frame:000000000000668D                 db 0D4h
.eh_frame:000000000000668E                 db 0FFh
.eh_frame:000000000000668F                 db 0FFh
.eh_frame:0000000000006690                 db  35h ; 5
.eh_frame:0000000000006691                 db    0
.eh_frame:0000000000006692                 db    0
.eh_frame:0000000000006693                 db    0
.eh_frame:0000000000006694                 db    0
.eh_frame:0000000000006695                 db    0
.eh_frame:0000000000006696                 db    0
.eh_frame:0000000000006697                 db    0
.eh_frame:0000000000006698                 db  10h
.eh_frame:0000000000006699                 db    0
.eh_frame:000000000000669A                 db    0
.eh_frame:000000000000669B                 db    0
.eh_frame:000000000000669C                 db  54h ; T
.eh_frame:000000000000669D                 db    3
.eh_frame:000000000000669E                 db    0
.eh_frame:000000000000669F                 db    0
.eh_frame:00000000000066A0                 db    0
.eh_frame:00000000000066A1                 db 0D5h
.eh_frame:00000000000066A2                 db 0FFh
.eh_frame:00000000000066A3                 db 0FFh
.eh_frame:00000000000066A4                 db  15h
.eh_frame:00000000000066A5                 db    0
.eh_frame:00000000000066A6                 db    0
.eh_frame:00000000000066A7                 db    0
.eh_frame:00000000000066A8                 db    0
.eh_frame:00000000000066A9                 db    0
.eh_frame:00000000000066AA                 db    0
.eh_frame:00000000000066AB                 db    0
.eh_frame:00000000000066AC                 db  10h
.eh_frame:00000000000066AD                 db    0
.eh_frame:00000000000066AE                 db    0
.eh_frame:00000000000066AF                 db    0
.eh_frame:00000000000066B0                 db  68h ; h
.eh_frame:00000000000066B1                 db    3
.eh_frame:00000000000066B2                 db    0
.eh_frame:00000000000066B3                 db    0
.eh_frame:00000000000066B4                 db  0Ch
.eh_frame:00000000000066B5                 db 0D5h
.eh_frame:00000000000066B6                 db 0FFh
.eh_frame:00000000000066B7                 db 0FFh
.eh_frame:00000000000066B8                 db  30h ; 0
.eh_frame:00000000000066B9                 db    0
.eh_frame:00000000000066BA                 db    0
.eh_frame:00000000000066BB                 db    0
.eh_frame:00000000000066BC                 db    0
.eh_frame:00000000000066BD                 db  6Bh ; k
.eh_frame:00000000000066BE                 db  0Eh
.eh_frame:00000000000066BF                 db  10h
.eh_frame:00000000000066C0                 db  50h ; P
.eh_frame:00000000000066C1                 db    0
.eh_frame:00000000000066C2                 db    0
.eh_frame:00000000000066C3                 db    0
.eh_frame:00000000000066C4                 db  7Ch ; |
.eh_frame:00000000000066C5                 db    3
.eh_frame:00000000000066C6                 db    0
.eh_frame:00000000000066C7                 db    0
.eh_frame:00000000000066C8                 db  28h ; (
.eh_frame:00000000000066C9                 db 0D5h
.eh_frame:00000000000066CA                 db 0FFh
.eh_frame:00000000000066CB                 db 0FFh
.eh_frame:00000000000066CC                 db  74h ; t
.eh_frame:00000000000066CD                 db    0
.eh_frame:00000000000066CE                 db    0
.eh_frame:00000000000066CF                 db    0
.eh_frame:00000000000066D0                 db    0
.eh_frame:00000000000066D1                 db  42h ; B
.eh_frame:00000000000066D2                 db  0Eh
.eh_frame:00000000000066D3                 db  10h
.eh_frame:00000000000066D4                 db  8Fh
.eh_frame:00000000000066D5                 db    2
.eh_frame:00000000000066D6                 db  42h ; B
.eh_frame:00000000000066D7                 db  0Eh
.eh_frame:00000000000066D8                 db  18h
.eh_frame:00000000000066D9                 db  8Eh
.eh_frame:00000000000066DA                 db    3
.eh_frame:00000000000066DB                 db  49h ; I
.eh_frame:00000000000066DC                 db  0Eh
.eh_frame:00000000000066DD                 db  20h
.eh_frame:00000000000066DE                 db  8Dh
.eh_frame:00000000000066DF                 db    4
.eh_frame:00000000000066E0                 db  42h ; B
.eh_frame:00000000000066E1                 db  0Eh
.eh_frame:00000000000066E2                 db  28h ; (
.eh_frame:00000000000066E3                 db  8Ch
.eh_frame:00000000000066E4                 db    5
.eh_frame:00000000000066E5                 db  44h ; D
.eh_frame:00000000000066E6                 db  0Eh
.eh_frame:00000000000066E7                 db  30h ; 0
.eh_frame:00000000000066E8                 db  86h
.eh_frame:00000000000066E9                 db    6
.eh_frame:00000000000066EA                 db  41h ; A
.eh_frame:00000000000066EB                 db  0Eh
.eh_frame:00000000000066EC                 db  38h ; 8
.eh_frame:00000000000066ED                 db  83h
.eh_frame:00000000000066EE                 db    7
.eh_frame:00000000000066EF                 db  4Dh ; M
.eh_frame:00000000000066F0                 db  0Eh
.eh_frame:00000000000066F1                 db  50h ; P
.eh_frame:00000000000066F2                 db  5Fh ; _
.eh_frame:00000000000066F3                 db  0Eh
.eh_frame:00000000000066F4                 db  58h ; X
.eh_frame:00000000000066F5                 db  47h ; G
.eh_frame:00000000000066F6                 db  0Eh
.eh_frame:00000000000066F7                 db  60h ; `
.eh_frame:00000000000066F8                 db  46h ; F
.eh_frame:00000000000066F9                 db  0Eh
.eh_frame:00000000000066FA                 db  68h ; h
.eh_frame:00000000000066FB                 db  44h ; D
.eh_frame:00000000000066FC                 db  0Eh
.eh_frame:00000000000066FD                 db  70h ; p
.eh_frame:00000000000066FE                 db  58h ; X
.eh_frame:00000000000066FF                 db  0Eh
.eh_frame:0000000000006700                 db  38h ; 8
.eh_frame:0000000000006701                 db  41h ; A
.eh_frame:0000000000006702                 db  0Eh
.eh_frame:0000000000006703                 db  30h ; 0
.eh_frame:0000000000006704                 db  41h ; A
.eh_frame:0000000000006705                 db  0Eh
.eh_frame:0000000000006706                 db  28h ; (
.eh_frame:0000000000006707                 db  42h ; B
.eh_frame:0000000000006708                 db  0Eh
.eh_frame:0000000000006709                 db  20h
.eh_frame:000000000000670A                 db  42h ; B
.eh_frame:000000000000670B                 db  0Eh
.eh_frame:000000000000670C                 db  18h
.eh_frame:000000000000670D                 db  42h ; B
.eh_frame:000000000000670E                 db  0Eh
.eh_frame:000000000000670F                 db  10h
.eh_frame:0000000000006710                 db  42h ; B
.eh_frame:0000000000006711                 db  0Eh
.eh_frame:0000000000006712                 db    8
.eh_frame:0000000000006713                 db    0
.eh_frame:0000000000006714                 db  68h ; h
.eh_frame:0000000000006715                 db    0
.eh_frame:0000000000006716                 db    0
.eh_frame:0000000000006717                 db    0
.eh_frame:0000000000006718                 db 0D0h
.eh_frame:0000000000006719                 db    3
.eh_frame:000000000000671A                 db    0
.eh_frame:000000000000671B                 db    0
.eh_frame:000000000000671C                 db  54h ; T
.eh_frame:000000000000671D                 db 0D5h
.eh_frame:000000000000671E                 db 0FFh
.eh_frame:000000000000671F                 db 0FFh
.eh_frame:0000000000006720                 db 0E3h
.eh_frame:0000000000006721                 db    0
.eh_frame:0000000000006722                 db    0
.eh_frame:0000000000006723                 db    0
.eh_frame:0000000000006724                 db    0
.eh_frame:0000000000006725                 db  42h ; B
.eh_frame:0000000000006726                 db  0Eh
.eh_frame:0000000000006727                 db  10h
.eh_frame:0000000000006728                 db  8Fh
.eh_frame:0000000000006729                 db    2
.eh_frame:000000000000672A                 db  42h ; B
.eh_frame:000000000000672B                 db  0Eh
.eh_frame:000000000000672C                 db  18h
.eh_frame:000000000000672D                 db  8Eh
.eh_frame:000000000000672E                 db    3
.eh_frame:000000000000672F                 db  49h ; I
.eh_frame:0000000000006730                 db  0Eh
.eh_frame:0000000000006731                 db  20h
.eh_frame:0000000000006732                 db  8Dh
.eh_frame:0000000000006733                 db    4
.eh_frame:0000000000006734                 db  42h ; B
.eh_frame:0000000000006735                 db  0Eh
.eh_frame:0000000000006736                 db  28h ; (
.eh_frame:0000000000006737                 db  8Ch
.eh_frame:0000000000006738                 db    5
.eh_frame:0000000000006739                 db  44h ; D
.eh_frame:000000000000673A                 db  0Eh
.eh_frame:000000000000673B                 db  30h ; 0
.eh_frame:000000000000673C                 db  86h
.eh_frame:000000000000673D                 db    6
.eh_frame:000000000000673E                 db  41h ; A
.eh_frame:000000000000673F                 db  0Eh
.eh_frame:0000000000006740                 db  38h ; 8
.eh_frame:0000000000006741                 db  83h
.eh_frame:0000000000006742                 db    7
.eh_frame:0000000000006743                 db  4Dh ; M
.eh_frame:0000000000006744                 db  0Eh
.eh_frame:0000000000006745                 db  70h ; p
.eh_frame:0000000000006746                 db  65h ; e
.eh_frame:0000000000006747                 db  0Eh
.eh_frame:0000000000006748                 db  78h ; x
.eh_frame:0000000000006749                 db  4Dh ; M
.eh_frame:000000000000674A                 db  0Eh
.eh_frame:000000000000674B                 db  80h
.eh_frame:000000000000674C                 db    1
.eh_frame:000000000000674D                 db  46h ; F
.eh_frame:000000000000674E                 db  0Eh
.eh_frame:000000000000674F                 db  88h
.eh_frame:0000000000006750                 db    1
.eh_frame:0000000000006751                 db  42h ; B
.eh_frame:0000000000006752                 db  0Eh
.eh_frame:0000000000006753                 db  90h
.eh_frame:0000000000006754                 db    1
.eh_frame:0000000000006755                 db  5Eh ; ^
.eh_frame:0000000000006756                 db  0Eh
.eh_frame:0000000000006757                 db  70h ; p
.eh_frame:0000000000006758                 db  56h ; V
.eh_frame:0000000000006759                 db  0Eh
.eh_frame:000000000000675A                 db  78h ; x
.eh_frame:000000000000675B                 db  43h ; C
.eh_frame:000000000000675C                 db  0Eh
.eh_frame:000000000000675D                 db  80h
.eh_frame:000000000000675E                 db    1
.eh_frame:000000000000675F                 db  43h ; C
.eh_frame:0000000000006760                 db  0Eh
.eh_frame:0000000000006761                 db  88h
.eh_frame:0000000000006762                 db    1
.eh_frame:0000000000006763                 db  56h ; V
.eh_frame:0000000000006764                 db  0Eh
.eh_frame:0000000000006765                 db  90h
.eh_frame:0000000000006766                 db    1
.eh_frame:0000000000006767                 db  52h ; R
.eh_frame:0000000000006768                 db  0Eh
.eh_frame:0000000000006769                 db  70h ; p
.eh_frame:000000000000676A                 db  5Bh ; [
.eh_frame:000000000000676B                 db  0Eh
.eh_frame:000000000000676C                 db  38h ; 8
.eh_frame:000000000000676D                 db  41h ; A
.eh_frame:000000000000676E                 db  0Eh
.eh_frame:000000000000676F                 db  30h ; 0
.eh_frame:0000000000006770                 db  41h ; A
.eh_frame:0000000000006771                 db  0Eh
.eh_frame:0000000000006772                 db  28h ; (
.eh_frame:0000000000006773                 db  42h ; B
.eh_frame:0000000000006774                 db  0Eh
.eh_frame:0000000000006775                 db  20h
.eh_frame:0000000000006776                 db  42h ; B
.eh_frame:0000000000006777                 db  0Eh
.eh_frame:0000000000006778                 db  18h
.eh_frame:0000000000006779                 db  42h ; B
.eh_frame:000000000000677A                 db  0Eh
.eh_frame:000000000000677B                 db  10h
.eh_frame:000000000000677C                 db  42h ; B
.eh_frame:000000000000677D                 db  0Eh
.eh_frame:000000000000677E                 db    8
.eh_frame:000000000000677F                 db    0
.eh_frame:0000000000006780                 db  10h
.eh_frame:0000000000006781                 db    0
.eh_frame:0000000000006782                 db    0
.eh_frame:0000000000006783                 db    0
.eh_frame:0000000000006784                 db  3Ch ; <
.eh_frame:0000000000006785                 db    4
.eh_frame:0000000000006786                 db    0
.eh_frame:0000000000006787                 db    0
.eh_frame:0000000000006788                 db 0D8h
.eh_frame:0000000000006789                 db 0D5h
.eh_frame:000000000000678A                 db 0FFh
.eh_frame:000000000000678B                 db 0FFh
.eh_frame:000000000000678C                 db  0Ah
.eh_frame:000000000000678D                 db    0
.eh_frame:000000000000678E                 db    0
.eh_frame:000000000000678F                 db    0
.eh_frame:0000000000006790                 db    0
.eh_frame:0000000000006791                 db    0
.eh_frame:0000000000006792                 db    0
.eh_frame:0000000000006793                 db    0
.eh_frame:0000000000006794                 db  28h ; (
.eh_frame:0000000000006795                 db    0
.eh_frame:0000000000006796                 db    0
.eh_frame:0000000000006797                 db    0
.eh_frame:0000000000006798                 db  50h ; P
.eh_frame:0000000000006799                 db    4
.eh_frame:000000000000679A                 db    0
.eh_frame:000000000000679B                 db    0
.eh_frame:000000000000679C                 db 0D4h
.eh_frame:000000000000679D                 db 0D5h
.eh_frame:000000000000679E                 db 0FFh
.eh_frame:000000000000679F                 db 0FFh
.eh_frame:00000000000067A0                 db  93h
.eh_frame:00000000000067A1                 db    0
.eh_frame:00000000000067A2                 db    0
.eh_frame:00000000000067A3                 db    0
.eh_frame:00000000000067A4                 db    0
.eh_frame:00000000000067A5                 db  48h ; H
.eh_frame:00000000000067A6                 db  0Eh
.eh_frame:00000000000067A7                 db  10h
.eh_frame:00000000000067A8                 db  8Ch
.eh_frame:00000000000067A9                 db    2
.eh_frame:00000000000067AA                 db  48h ; H
.eh_frame:00000000000067AB                 db  0Eh
.eh_frame:00000000000067AC                 db  18h
.eh_frame:00000000000067AD                 db  86h
.eh_frame:00000000000067AE                 db    3
.eh_frame:00000000000067AF                 db  41h ; A
.eh_frame:00000000000067B0                 db  0Eh
.eh_frame:00000000000067B1                 db  20h
.eh_frame:00000000000067B2                 db  83h
.eh_frame:00000000000067B3                 db    4
.eh_frame:00000000000067B4                 db    2
.eh_frame:00000000000067B5                 db  74h ; t
.eh_frame:00000000000067B6                 db  0Eh
.eh_frame:00000000000067B7                 db  18h
.eh_frame:00000000000067B8                 db  4Bh ; K
.eh_frame:00000000000067B9                 db  0Eh
.eh_frame:00000000000067BA                 db  10h
.eh_frame:00000000000067BB                 db  42h ; B
.eh_frame:00000000000067BC                 db  0Eh
.eh_frame:00000000000067BD                 db    8
.eh_frame:00000000000067BE                 db    0
.eh_frame:00000000000067BF                 db    0
.eh_frame:00000000000067C0                 db  10h
.eh_frame:00000000000067C1                 db    0
.eh_frame:00000000000067C2                 db    0
.eh_frame:00000000000067C3                 db    0
.eh_frame:00000000000067C4                 db  7Ch ; |
.eh_frame:00000000000067C5                 db    4
.eh_frame:00000000000067C6                 db    0
.eh_frame:00000000000067C7                 db    0
.eh_frame:00000000000067C8                 db  48h ; H
.eh_frame:00000000000067C9                 db 0D6h
.eh_frame:00000000000067CA                 db 0FFh
.eh_frame:00000000000067CB                 db 0FFh
.eh_frame:00000000000067CC                 db  13h
.eh_frame:00000000000067CD                 db    0
.eh_frame:00000000000067CE                 db    0
.eh_frame:00000000000067CF                 db    0
.eh_frame:00000000000067D0                 db    0
.eh_frame:00000000000067D1                 db    0
.eh_frame:00000000000067D2                 db    0
.eh_frame:00000000000067D3                 db    0
.eh_frame:00000000000067D4                 db  10h
.eh_frame:00000000000067D5                 db    0
.eh_frame:00000000000067D6                 db    0
.eh_frame:00000000000067D7                 db    0
.eh_frame:00000000000067D8                 db  90h
.eh_frame:00000000000067D9                 db    4
.eh_frame:00000000000067DA                 db    0
.eh_frame:00000000000067DB                 db    0
.eh_frame:00000000000067DC                 db  54h ; T
.eh_frame:00000000000067DD                 db 0D6h
.eh_frame:00000000000067DE                 db 0FFh
.eh_frame:00000000000067DF                 db 0FFh
.eh_frame:00000000000067E0                 db  0Ch
.eh_frame:00000000000067E1                 db    0
.eh_frame:00000000000067E2                 db    0
.eh_frame:00000000000067E3                 db    0
.eh_frame:00000000000067E4                 db    0
.eh_frame:00000000000067E5                 db    0
.eh_frame:00000000000067E6                 db    0
.eh_frame:00000000000067E7                 db    0
.eh_frame:00000000000067E8                 db  10h
.eh_frame:00000000000067E9                 db    0
.eh_frame:00000000000067EA                 db    0
.eh_frame:00000000000067EB                 db    0
.eh_frame:00000000000067EC                 db 0A4h
.eh_frame:00000000000067ED                 db    4
.eh_frame:00000000000067EE                 db    0
.eh_frame:00000000000067EF                 db    0
.eh_frame:00000000000067F0                 db  50h ; P
.eh_frame:00000000000067F1                 db 0D6h
.eh_frame:00000000000067F2                 db 0FFh
.eh_frame:00000000000067F3                 db 0FFh
.eh_frame:00000000000067F4                 db  18h
.eh_frame:00000000000067F5                 db    0
.eh_frame:00000000000067F6                 db    0
.eh_frame:00000000000067F7                 db    0
.eh_frame:00000000000067F8                 db    0
.eh_frame:00000000000067F9                 db    0
.eh_frame:00000000000067FA                 db    0
.eh_frame:00000000000067FB                 db    0
.eh_frame:00000000000067FC                 db  10h
.eh_frame:00000000000067FD                 db    0
.eh_frame:00000000000067FE                 db    0
.eh_frame:00000000000067FF                 db    0
.eh_frame:0000000000006800                 db 0B8h
.eh_frame:0000000000006801                 db    4
.eh_frame:0000000000006802                 db    0
.eh_frame:0000000000006803                 db    0
.eh_frame:0000000000006804                 db  5Ch ; \
.eh_frame:0000000000006805                 db 0D6h
.eh_frame:0000000000006806                 db 0FFh
.eh_frame:0000000000006807                 db 0FFh
.eh_frame:0000000000006808                 db  14h
.eh_frame:0000000000006809                 db    0
.eh_frame:000000000000680A                 db    0
.eh_frame:000000000000680B                 db    0
.eh_frame:000000000000680C                 db    0
.eh_frame:000000000000680D                 db    0
.eh_frame:000000000000680E                 db    0
.eh_frame:000000000000680F                 db    0
.eh_frame:0000000000006810                 db  18h
.eh_frame:0000000000006811                 db    0
.eh_frame:0000000000006812                 db    0
.eh_frame:0000000000006813                 db    0
.eh_frame:0000000000006814                 db 0CCh
.eh_frame:0000000000006815                 db    4
.eh_frame:0000000000006816                 db    0
.eh_frame:0000000000006817                 db    0
.eh_frame:0000000000006818                 db  68h ; h
.eh_frame:0000000000006819                 db 0D6h
.eh_frame:000000000000681A                 db 0FFh
.eh_frame:000000000000681B                 db 0FFh
.eh_frame:000000000000681C                 db  8Eh
.eh_frame:000000000000681D                 db    0
.eh_frame:000000000000681E                 db    0
.eh_frame:000000000000681F                 db    0
.eh_frame:0000000000006820                 db    0
.eh_frame:0000000000006821                 db  44h ; D
.eh_frame:0000000000006822                 db  0Eh
.eh_frame:0000000000006823                 db  50h ; P
.eh_frame:0000000000006824                 db    2
.eh_frame:0000000000006825                 db  7Fh ; 
.eh_frame:0000000000006826                 db  0Ah
.eh_frame:0000000000006827                 db  0Eh
.eh_frame:0000000000006828                 db    8
.eh_frame:0000000000006829                 db  41h ; A
.eh_frame:000000000000682A                 db  0Bh
.eh_frame:000000000000682B                 db    0
.eh_frame:000000000000682C                 db  18h
.eh_frame:000000000000682D                 db    0
.eh_frame:000000000000682E                 db    0
.eh_frame:000000000000682F                 db    0
.eh_frame:0000000000006830                 db 0E8h
.eh_frame:0000000000006831                 db    4
.eh_frame:0000000000006832                 db    0
.eh_frame:0000000000006833                 db    0
.eh_frame:0000000000006834                 db 0DCh
.eh_frame:0000000000006835                 db 0D6h
.eh_frame:0000000000006836                 db 0FFh
.eh_frame:0000000000006837                 db 0FFh
.eh_frame:0000000000006838                 db  8Ah
.eh_frame:0000000000006839                 db    0
.eh_frame:000000000000683A                 db    0
.eh_frame:000000000000683B                 db    0
.eh_frame:000000000000683C                 db    0
.eh_frame:000000000000683D                 db  44h ; D
.eh_frame:000000000000683E                 db  0Eh
.eh_frame:000000000000683F                 db  50h ; P
.eh_frame:0000000000006840                 db    2
.eh_frame:0000000000006841                 db  7Bh ; {
.eh_frame:0000000000006842                 db  0Ah
.eh_frame:0000000000006843                 db  0Eh
.eh_frame:0000000000006844                 db    8
.eh_frame:0000000000006845                 db  41h ; A
.eh_frame:0000000000006846                 db  0Bh
.eh_frame:0000000000006847                 db    0
.eh_frame:0000000000006848                 db  10h
.eh_frame:0000000000006849                 db    0
.eh_frame:000000000000684A                 db    0
.eh_frame:000000000000684B                 db    0
.eh_frame:000000000000684C                 db    4
.eh_frame:000000000000684D                 db    5
.eh_frame:000000000000684E                 db    0
.eh_frame:000000000000684F                 db    0
.eh_frame:0000000000006850                 db  50h ; P
.eh_frame:0000000000006851                 db 0D7h
.eh_frame:0000000000006852                 db 0FFh
.eh_frame:0000000000006853                 db 0FFh
.eh_frame:0000000000006854                 db  0Ch
.eh_frame:0000000000006855                 db    0
.eh_frame:0000000000006856                 db    0
.eh_frame:0000000000006857                 db    0
.eh_frame:0000000000006858                 db    0
.eh_frame:0000000000006859                 db    0
.eh_frame:000000000000685A                 db    0
.eh_frame:000000000000685B                 db    0
.eh_frame:000000000000685C                 db  10h
.eh_frame:000000000000685D                 db    0
.eh_frame:000000000000685E                 db    0
.eh_frame:000000000000685F                 db    0
.eh_frame:0000000000006860                 db  18h
.eh_frame:0000000000006861                 db    5
.eh_frame:0000000000006862                 db    0
.eh_frame:0000000000006863                 db    0
.eh_frame:0000000000006864                 db  4Ch ; L
.eh_frame:0000000000006865                 db 0D7h
.eh_frame:0000000000006866                 db 0FFh
.eh_frame:0000000000006867                 db 0FFh
.eh_frame:0000000000006868                 db  0Fh
.eh_frame:0000000000006869                 db    0
.eh_frame:000000000000686A                 db    0
.eh_frame:000000000000686B                 db    0
.eh_frame:000000000000686C                 db    0
.eh_frame:000000000000686D                 db    0
.eh_frame:000000000000686E                 db    0
.eh_frame:000000000000686F                 db    0
.eh_frame:0000000000006870                 db  18h
.eh_frame:0000000000006871                 db    0
.eh_frame:0000000000006872                 db    0
.eh_frame:0000000000006873                 db    0
.eh_frame:0000000000006874                 db  2Ch ; ,
.eh_frame:0000000000006875                 db    5
.eh_frame:0000000000006876                 db    0
.eh_frame:0000000000006877                 db    0
.eh_frame:0000000000006878                 db  48h ; H
.eh_frame:0000000000006879                 db 0D7h
.eh_frame:000000000000687A                 db 0FFh
.eh_frame:000000000000687B                 db 0FFh
.eh_frame:000000000000687C                 db  98h
.eh_frame:000000000000687D                 db    0
.eh_frame:000000000000687E                 db    0
.eh_frame:000000000000687F                 db    0
.eh_frame:0000000000006880                 db    0
.eh_frame:0000000000006881                 db  44h ; D
.eh_frame:0000000000006882                 db  0Eh
.eh_frame:0000000000006883                 db  50h ; P
.eh_frame:0000000000006884                 db    2
.eh_frame:0000000000006885                 db  8Eh
.eh_frame:0000000000006886                 db  0Ah
.eh_frame:0000000000006887                 db  0Eh
.eh_frame:0000000000006888                 db    8
.eh_frame:0000000000006889                 db  41h ; A
.eh_frame:000000000000688A                 db  0Bh
.eh_frame:000000000000688B                 db    0
.eh_frame:000000000000688C                 db  10h
.eh_frame:000000000000688D                 db    0
.eh_frame:000000000000688E                 db    0
.eh_frame:000000000000688F                 db    0
.eh_frame:0000000000006890                 db  48h ; H
.eh_frame:0000000000006891                 db    5
.eh_frame:0000000000006892                 db    0
.eh_frame:0000000000006893                 db    0
.eh_frame:0000000000006894                 db 0CCh
.eh_frame:0000000000006895                 db 0D7h
.eh_frame:0000000000006896                 db 0FFh
.eh_frame:0000000000006897                 db 0FFh
.eh_frame:0000000000006898                 db  10h
.eh_frame:0000000000006899                 db    0
.eh_frame:000000000000689A                 db    0
.eh_frame:000000000000689B                 db    0
.eh_frame:000000000000689C                 db    0
.eh_frame:000000000000689D                 db    0
.eh_frame:000000000000689E                 db    0
.eh_frame:000000000000689F                 db    0
.eh_frame:00000000000068A0                 db  10h
.eh_frame:00000000000068A1                 db    0
.eh_frame:00000000000068A2                 db    0
.eh_frame:00000000000068A3                 db    0
.eh_frame:00000000000068A4                 db  5Ch ; \
.eh_frame:00000000000068A5                 db    5
.eh_frame:00000000000068A6                 db    0
.eh_frame:00000000000068A7                 db    0
.eh_frame:00000000000068A8                 db 0C8h
.eh_frame:00000000000068A9                 db 0D7h
.eh_frame:00000000000068AA                 db 0FFh
.eh_frame:00000000000068AB                 db 0FFh
.eh_frame:00000000000068AC                 db  11h
.eh_frame:00000000000068AD                 db    0
.eh_frame:00000000000068AE                 db    0
.eh_frame:00000000000068AF                 db    0
.eh_frame:00000000000068B0                 db    0
.eh_frame:00000000000068B1                 db    0
.eh_frame:00000000000068B2                 db    0
.eh_frame:00000000000068B3                 db    0
.eh_frame:00000000000068B4                 db  10h
.eh_frame:00000000000068B5                 db    0
.eh_frame:00000000000068B6                 db    0
.eh_frame:00000000000068B7                 db    0
.eh_frame:00000000000068B8                 db  70h ; p
.eh_frame:00000000000068B9                 db    5
.eh_frame:00000000000068BA                 db    0
.eh_frame:00000000000068BB                 db    0
.eh_frame:00000000000068BC                 db 0D4h
.eh_frame:00000000000068BD                 db 0D7h
.eh_frame:00000000000068BE                 db 0FFh
.eh_frame:00000000000068BF                 db 0FFh
.eh_frame:00000000000068C0                 db  0Ah
.eh_frame:00000000000068C1                 db    0
.eh_frame:00000000000068C2                 db    0
.eh_frame:00000000000068C3                 db    0
.eh_frame:00000000000068C4                 db    0
.eh_frame:00000000000068C5                 db    0
.eh_frame:00000000000068C6                 db    0
.eh_frame:00000000000068C7                 db    0
.eh_frame:00000000000068C8                 db  18h
.eh_frame:00000000000068C9                 db    0
.eh_frame:00000000000068CA                 db    0
.eh_frame:00000000000068CB                 db    0
.eh_frame:00000000000068CC                 db  84h
.eh_frame:00000000000068CD                 db    5
.eh_frame:00000000000068CE                 db    0
.eh_frame:00000000000068CF                 db    0
.eh_frame:00000000000068D0                 db 0D0h
.eh_frame:00000000000068D1                 db 0D7h
.eh_frame:00000000000068D2                 db 0FFh
.eh_frame:00000000000068D3                 db 0FFh
.eh_frame:00000000000068D4                 db  8Eh
.eh_frame:00000000000068D5                 db    0
.eh_frame:00000000000068D6                 db    0
.eh_frame:00000000000068D7                 db    0
.eh_frame:00000000000068D8                 db    0
.eh_frame:00000000000068D9                 db  44h ; D
.eh_frame:00000000000068DA                 db  0Eh
.eh_frame:00000000000068DB                 db  50h ; P
.eh_frame:00000000000068DC                 db    2
.eh_frame:00000000000068DD                 db  7Fh ; 
.eh_frame:00000000000068DE                 db  0Ah
.eh_frame:00000000000068DF                 db  0Eh
.eh_frame:00000000000068E0                 db    8
.eh_frame:00000000000068E1                 db  41h ; A
.eh_frame:00000000000068E2                 db  0Bh
.eh_frame:00000000000068E3                 db    0
.eh_frame:00000000000068E4                 db  18h
.eh_frame:00000000000068E5                 db    0
.eh_frame:00000000000068E6                 db    0
.eh_frame:00000000000068E7                 db    0
.eh_frame:00000000000068E8                 db 0A0h
.eh_frame:00000000000068E9                 db    5
.eh_frame:00000000000068EA                 db    0
.eh_frame:00000000000068EB                 db    0
.eh_frame:00000000000068EC                 db  44h ; D
.eh_frame:00000000000068ED                 db 0D8h
.eh_frame:00000000000068EE                 db 0FFh
.eh_frame:00000000000068EF                 db 0FFh
.eh_frame:00000000000068F0                 db  91h
.eh_frame:00000000000068F1                 db    0
.eh_frame:00000000000068F2                 db    0
.eh_frame:00000000000068F3                 db    0
.eh_frame:00000000000068F4                 db    0
.eh_frame:00000000000068F5                 db  44h ; D
.eh_frame:00000000000068F6                 db  0Eh
.eh_frame:00000000000068F7                 db  50h ; P
.eh_frame:00000000000068F8                 db    2
.eh_frame:00000000000068F9                 db  82h
.eh_frame:00000000000068FA                 db  0Ah
.eh_frame:00000000000068FB                 db  0Eh
.eh_frame:00000000000068FC                 db    8
.eh_frame:00000000000068FD                 db  41h ; A
.eh_frame:00000000000068FE                 db  0Bh
.eh_frame:00000000000068FF                 db    0
.eh_frame:0000000000006900                 db  10h
.eh_frame:0000000000006901                 db    0
.eh_frame:0000000000006902                 db    0
.eh_frame:0000000000006903                 db    0
.eh_frame:0000000000006904                 db 0BCh
.eh_frame:0000000000006905                 db    5
.eh_frame:0000000000006906                 db    0
.eh_frame:0000000000006907                 db    0
.eh_frame:0000000000006908                 db 0C8h
.eh_frame:0000000000006909                 db 0D8h
.eh_frame:000000000000690A                 db 0FFh
.eh_frame:000000000000690B                 db 0FFh
.eh_frame:000000000000690C                 db  0Ch
.eh_frame:000000000000690D                 db    0
.eh_frame:000000000000690E                 db    0
.eh_frame:000000000000690F                 db    0
.eh_frame:0000000000006910                 db    0
.eh_frame:0000000000006911                 db    0
.eh_frame:0000000000006912                 db    0
.eh_frame:0000000000006913                 db    0
.eh_frame:0000000000006914                 db  10h
.eh_frame:0000000000006915                 db    0
.eh_frame:0000000000006916                 db    0
.eh_frame:0000000000006917                 db    0
.eh_frame:0000000000006918                 db 0D0h
.eh_frame:0000000000006919                 db    5
.eh_frame:000000000000691A                 db    0
.eh_frame:000000000000691B                 db    0
.eh_frame:000000000000691C                 db 0C4h
.eh_frame:000000000000691D                 db 0D8h
.eh_frame:000000000000691E                 db 0FFh
.eh_frame:000000000000691F                 db 0FFh
.eh_frame:0000000000006920                 db  17h
.eh_frame:0000000000006921                 db    0
.eh_frame:0000000000006922                 db    0
.eh_frame:0000000000006923                 db    0
.eh_frame:0000000000006924                 db    0
.eh_frame:0000000000006925                 db    0
.eh_frame:0000000000006926                 db    0
.eh_frame:0000000000006927                 db    0
.eh_frame:0000000000006928                 db  10h
.eh_frame:0000000000006929                 db    0
.eh_frame:000000000000692A                 db    0
.eh_frame:000000000000692B                 db    0
.eh_frame:000000000000692C                 db 0E4h
.eh_frame:000000000000692D                 db    5
.eh_frame:000000000000692E                 db    0
.eh_frame:000000000000692F                 db    0
.eh_frame:0000000000006930                 db 0D0h
.eh_frame:0000000000006931                 db 0D8h
.eh_frame:0000000000006932                 db 0FFh
.eh_frame:0000000000006933                 db 0FFh
.eh_frame:0000000000006934                 db  13h
.eh_frame:0000000000006935                 db    0
.eh_frame:0000000000006936                 db    0
.eh_frame:0000000000006937                 db    0
.eh_frame:0000000000006938                 db    0
.eh_frame:0000000000006939                 db    0
.eh_frame:000000000000693A                 db    0
.eh_frame:000000000000693B                 db    0
.eh_frame:000000000000693C                 db  10h
.eh_frame:000000000000693D                 db    0
.eh_frame:000000000000693E                 db    0
.eh_frame:000000000000693F                 db    0
.eh_frame:0000000000006940                 db 0F8h
.eh_frame:0000000000006941                 db    5
.eh_frame:0000000000006942                 db    0
.eh_frame:0000000000006943                 db    0
.eh_frame:0000000000006944                 db 0DCh
.eh_frame:0000000000006945                 db 0D8h
.eh_frame:0000000000006946                 db 0FFh
.eh_frame:0000000000006947                 db 0FFh
.eh_frame:0000000000006948                 db  0Ch
.eh_frame:0000000000006949                 db    0
.eh_frame:000000000000694A                 db    0
.eh_frame:000000000000694B                 db    0
.eh_frame:000000000000694C                 db    0
.eh_frame:000000000000694D                 db    0
.eh_frame:000000000000694E                 db    0
.eh_frame:000000000000694F                 db    0
.eh_frame:0000000000006950                 db  10h
.eh_frame:0000000000006951                 db    0
.eh_frame:0000000000006952                 db    0
.eh_frame:0000000000006953                 db    0
.eh_frame:0000000000006954                 db  0Ch
.eh_frame:0000000000006955                 db    6
.eh_frame:0000000000006956                 db    0
.eh_frame:0000000000006957                 db    0
.eh_frame:0000000000006958                 db 0D8h
.eh_frame:0000000000006959                 db 0D8h
.eh_frame:000000000000695A                 db 0FFh
.eh_frame:000000000000695B                 db 0FFh
.eh_frame:000000000000695C                 db  14h
.eh_frame:000000000000695D                 db    0
.eh_frame:000000000000695E                 db    0
.eh_frame:000000000000695F                 db    0
.eh_frame:0000000000006960                 db    0
.eh_frame:0000000000006961                 db    0
.eh_frame:0000000000006962                 db    0
.eh_frame:0000000000006963                 db    0
.eh_frame:0000000000006964                 db  10h
.eh_frame:0000000000006965                 db    0
.eh_frame:0000000000006966                 db    0
.eh_frame:0000000000006967                 db    0
.eh_frame:0000000000006968                 db  20h
.eh_frame:0000000000006969                 db    6
.eh_frame:000000000000696A                 db    0
.eh_frame:000000000000696B                 db    0
.eh_frame:000000000000696C                 db 0E4h
.eh_frame:000000000000696D                 db 0D8h
.eh_frame:000000000000696E                 db 0FFh
.eh_frame:000000000000696F                 db 0FFh
.eh_frame:0000000000006970                 db  13h
.eh_frame:0000000000006971                 db    0
.eh_frame:0000000000006972                 db    0
.eh_frame:0000000000006973                 db    0
.eh_frame:0000000000006974                 db    0
.eh_frame:0000000000006975                 db    0
.eh_frame:0000000000006976                 db    0
.eh_frame:0000000000006977                 db    0
.eh_frame:0000000000006978                 db  14h
.eh_frame:0000000000006979                 db    0
.eh_frame:000000000000697A                 db    0
.eh_frame:000000000000697B                 db    0
.eh_frame:000000000000697C                 db  34h ; 4
.eh_frame:000000000000697D                 db    6
.eh_frame:000000000000697E                 db    0
.eh_frame:000000000000697F                 db    0
.eh_frame:0000000000006980                 db 0F0h
.eh_frame:0000000000006981                 db 0D8h
.eh_frame:0000000000006982                 db 0FFh
.eh_frame:0000000000006983                 db 0FFh
.eh_frame:0000000000006984                 db  18h
.eh_frame:0000000000006985                 db    0
.eh_frame:0000000000006986                 db    0
.eh_frame:0000000000006987                 db    0
.eh_frame:0000000000006988                 db    0
.eh_frame:0000000000006989                 db    0
.eh_frame:000000000000698A                 db    0
.eh_frame:000000000000698B                 db    0
.eh_frame:000000000000698C                 db    0
.eh_frame:000000000000698D                 db    0
.eh_frame:000000000000698E                 db    0
.eh_frame:000000000000698F                 db    0
.eh_frame:0000000000006990                 db  10h
.eh_frame:0000000000006991                 db    1
.eh_frame:0000000000006992                 db    0
.eh_frame:0000000000006993                 db    0
.eh_frame:0000000000006994                 db  4Ch ; L
.eh_frame:0000000000006995                 db    6
.eh_frame:0000000000006996                 db    0
.eh_frame:0000000000006997                 db    0
.eh_frame:0000000000006998                 db 0F8h
.eh_frame:0000000000006999                 db 0D8h
.eh_frame:000000000000699A                 db 0FFh
.eh_frame:000000000000699B                 db 0FFh
.eh_frame:000000000000699C                 db  17h
.eh_frame:000000000000699D                 db    4
.eh_frame:000000000000699E                 db    0
.eh_frame:000000000000699F                 db    0
.eh_frame:00000000000069A0                 db    0
.eh_frame:00000000000069A1                 db  42h ; B
.eh_frame:00000000000069A2                 db  0Eh
.eh_frame:00000000000069A3                 db  10h
.eh_frame:00000000000069A4                 db  8Fh
.eh_frame:00000000000069A5                 db    2
.eh_frame:00000000000069A6                 db  42h ; B
.eh_frame:00000000000069A7                 db  0Eh
.eh_frame:00000000000069A8                 db  18h
.eh_frame:00000000000069A9                 db  8Eh
.eh_frame:00000000000069AA                 db    3
.eh_frame:00000000000069AB                 db  42h ; B
.eh_frame:00000000000069AC                 db  0Eh
.eh_frame:00000000000069AD                 db  20h
.eh_frame:00000000000069AE                 db  8Dh
.eh_frame:00000000000069AF                 db    4
.eh_frame:00000000000069B0                 db  42h ; B
.eh_frame:00000000000069B1                 db  0Eh
.eh_frame:00000000000069B2                 db  28h ; (
.eh_frame:00000000000069B3                 db  8Ch
.eh_frame:00000000000069B4                 db    5
.eh_frame:00000000000069B5                 db  44h ; D
.eh_frame:00000000000069B6                 db  0Eh
.eh_frame:00000000000069B7                 db  30h ; 0
.eh_frame:00000000000069B8                 db  86h
.eh_frame:00000000000069B9                 db    6
.eh_frame:00000000000069BA                 db  41h ; A
.eh_frame:00000000000069BB                 db  0Eh
.eh_frame:00000000000069BC                 db  38h ; 8
.eh_frame:00000000000069BD                 db  83h
.eh_frame:00000000000069BE                 db    7
.eh_frame:00000000000069BF                 db  4Ah ; J
.eh_frame:00000000000069C0                 db  0Eh
.eh_frame:00000000000069C1                 db  60h ; `
.eh_frame:00000000000069C2                 db    2
.eh_frame:00000000000069C3                 db 0DDh
.eh_frame:00000000000069C4                 db  0Eh
.eh_frame:00000000000069C5                 db  68h ; h
.eh_frame:00000000000069C6                 db  57h ; W
.eh_frame:00000000000069C7                 db  0Eh
.eh_frame:00000000000069C8                 db  70h ; p
.eh_frame:00000000000069C9                 db  42h ; B
.eh_frame:00000000000069CA                 db  0Eh
.eh_frame:00000000000069CB                 db  78h ; x
.eh_frame:00000000000069CC                 db  42h ; B
.eh_frame:00000000000069CD                 db  0Eh
.eh_frame:00000000000069CE                 db  80h
.eh_frame:00000000000069CF                 db    1
.eh_frame:00000000000069D0                 db  42h ; B
.eh_frame:00000000000069D1                 db  0Eh
.eh_frame:00000000000069D2                 db  88h
.eh_frame:00000000000069D3                 db    1
.eh_frame:00000000000069D4                 db  42h ; B
.eh_frame:00000000000069D5                 db  0Eh
.eh_frame:00000000000069D6                 db  90h
.eh_frame:00000000000069D7                 db    1
.eh_frame:00000000000069D8                 db  53h ; S
.eh_frame:00000000000069D9                 db  0Eh
.eh_frame:00000000000069DA                 db  60h ; `
.eh_frame:00000000000069DB                 db  44h ; D
.eh_frame:00000000000069DC                 db  0Ah
.eh_frame:00000000000069DD                 db  0Eh
.eh_frame:00000000000069DE                 db  38h ; 8
.eh_frame:00000000000069DF                 db  41h ; A
.eh_frame:00000000000069E0                 db  0Eh
.eh_frame:00000000000069E1                 db  30h ; 0
.eh_frame:00000000000069E2                 db  41h ; A
.eh_frame:00000000000069E3                 db  0Eh
.eh_frame:00000000000069E4                 db  28h ; (
.eh_frame:00000000000069E5                 db  42h ; B
.eh_frame:00000000000069E6                 db  0Eh
.eh_frame:00000000000069E7                 db  20h
.eh_frame:00000000000069E8                 db  42h ; B
.eh_frame:00000000000069E9                 db  0Eh
.eh_frame:00000000000069EA                 db  18h
.eh_frame:00000000000069EB                 db  42h ; B
.eh_frame:00000000000069EC                 db  0Eh
.eh_frame:00000000000069ED                 db  10h
.eh_frame:00000000000069EE                 db  42h ; B
.eh_frame:00000000000069EF                 db  0Eh
.eh_frame:00000000000069F0                 db    8
.eh_frame:00000000000069F1                 db  44h ; D
.eh_frame:00000000000069F2                 db  0Bh
.eh_frame:00000000000069F3                 db    2
.eh_frame:00000000000069F4                 db  78h ; x
.eh_frame:00000000000069F5                 db  0Ah
.eh_frame:00000000000069F6                 db  0Eh
.eh_frame:00000000000069F7                 db  68h ; h
.eh_frame:00000000000069F8                 db  48h ; H
.eh_frame:00000000000069F9                 db  0Bh
.eh_frame:00000000000069FA                 db  5Ah ; Z
.eh_frame:00000000000069FB                 db  0Ah
.eh_frame:00000000000069FC                 db  0Eh
.eh_frame:00000000000069FD                 db  38h ; 8
.eh_frame:00000000000069FE                 db  47h ; G
.eh_frame:00000000000069FF                 db  0Eh
.eh_frame:0000000000006A00                 db  30h ; 0
.eh_frame:0000000000006A01                 db  41h ; A
.eh_frame:0000000000006A02                 db  0Eh
.eh_frame:0000000000006A03                 db  28h ; (
.eh_frame:0000000000006A04                 db  42h ; B
.eh_frame:0000000000006A05                 db  0Eh
.eh_frame:0000000000006A06                 db  20h
.eh_frame:0000000000006A07                 db  42h ; B
.eh_frame:0000000000006A08                 db  0Eh
.eh_frame:0000000000006A09                 db  18h
.eh_frame:0000000000006A0A                 db  42h ; B
.eh_frame:0000000000006A0B                 db  0Eh
.eh_frame:0000000000006A0C                 db  10h
.eh_frame:0000000000006A0D                 db  42h ; B
.eh_frame:0000000000006A0E                 db  0Eh
.eh_frame:0000000000006A0F                 db    8
.eh_frame:0000000000006A10                 db  56h ; V
.eh_frame:0000000000006A11                 db  0Bh
.eh_frame:0000000000006A12                 db  5Eh ; ^
.eh_frame:0000000000006A13                 db  0Ah
.eh_frame:0000000000006A14                 db  0Eh
.eh_frame:0000000000006A15                 db  38h ; 8
.eh_frame:0000000000006A16                 db  52h ; R
.eh_frame:0000000000006A17                 db  0Eh
.eh_frame:0000000000006A18                 db  30h ; 0
.eh_frame:0000000000006A19                 db  41h ; A
.eh_frame:0000000000006A1A                 db  0Eh
.eh_frame:0000000000006A1B                 db  28h ; (
.eh_frame:0000000000006A1C                 db  42h ; B
.eh_frame:0000000000006A1D                 db  0Eh
.eh_frame:0000000000006A1E                 db  20h
.eh_frame:0000000000006A1F                 db  42h ; B
.eh_frame:0000000000006A20                 db  0Eh
.eh_frame:0000000000006A21                 db  18h
.eh_frame:0000000000006A22                 db  42h ; B
.eh_frame:0000000000006A23                 db  0Eh
.eh_frame:0000000000006A24                 db  10h
.eh_frame:0000000000006A25                 db  42h ; B
.eh_frame:0000000000006A26                 db  0Eh
.eh_frame:0000000000006A27                 db    8
.eh_frame:0000000000006A28                 db  4Fh ; O
.eh_frame:0000000000006A29                 db  0Bh
.eh_frame:0000000000006A2A                 db  62h ; b
.eh_frame:0000000000006A2B                 db  0Ah
.eh_frame:0000000000006A2C                 db  0Eh
.eh_frame:0000000000006A2D                 db  38h ; 8
.eh_frame:0000000000006A2E                 db  50h ; P
.eh_frame:0000000000006A2F                 db  0Eh
.eh_frame:0000000000006A30                 db  30h ; 0
.eh_frame:0000000000006A31                 db  41h ; A
.eh_frame:0000000000006A32                 db  0Eh
.eh_frame:0000000000006A33                 db  28h ; (
.eh_frame:0000000000006A34                 db  42h ; B
.eh_frame:0000000000006A35                 db  0Eh
.eh_frame:0000000000006A36                 db  20h
.eh_frame:0000000000006A37                 db  42h ; B
.eh_frame:0000000000006A38                 db  0Eh
.eh_frame:0000000000006A39                 db  18h
.eh_frame:0000000000006A3A                 db  42h ; B
.eh_frame:0000000000006A3B                 db  0Eh
.eh_frame:0000000000006A3C                 db  10h
.eh_frame:0000000000006A3D                 db  42h ; B
.eh_frame:0000000000006A3E                 db  0Eh
.eh_frame:0000000000006A3F                 db    8
.eh_frame:0000000000006A40                 db  55h ; U
.eh_frame:0000000000006A41                 db  0Bh
.eh_frame:0000000000006A42                 db  66h ; f
.eh_frame:0000000000006A43                 db  0Eh
.eh_frame:0000000000006A44                 db  68h ; h
.eh_frame:0000000000006A45                 db  42h ; B
.eh_frame:0000000000006A46                 db  0Eh
.eh_frame:0000000000006A47                 db  70h ; p
.eh_frame:0000000000006A48                 db  5Ch ; \
.eh_frame:0000000000006A49                 db  0Eh
.eh_frame:0000000000006A4A                 db  68h ; h
.eh_frame:0000000000006A4B                 db  41h ; A
.eh_frame:0000000000006A4C                 db  0Eh
.eh_frame:0000000000006A4D                 db  60h ; `
.eh_frame:0000000000006A4E                 db  44h ; D
.eh_frame:0000000000006A4F                 db  0Ah
.eh_frame:0000000000006A50                 db  0Eh
.eh_frame:0000000000006A51                 db  38h ; 8
.eh_frame:0000000000006A52                 db  41h ; A
.eh_frame:0000000000006A53                 db  0Eh
.eh_frame:0000000000006A54                 db  30h ; 0
.eh_frame:0000000000006A55                 db  41h ; A
.eh_frame:0000000000006A56                 db  0Eh
.eh_frame:0000000000006A57                 db  28h ; (
.eh_frame:0000000000006A58                 db  42h ; B
.eh_frame:0000000000006A59                 db  0Eh
.eh_frame:0000000000006A5A                 db  20h
.eh_frame:0000000000006A5B                 db  42h ; B
.eh_frame:0000000000006A5C                 db  0Eh
.eh_frame:0000000000006A5D                 db  18h
.eh_frame:0000000000006A5E                 db  42h ; B
.eh_frame:0000000000006A5F                 db  0Eh
.eh_frame:0000000000006A60                 db  10h
.eh_frame:0000000000006A61                 db  42h ; B
.eh_frame:0000000000006A62                 db  0Eh
.eh_frame:0000000000006A63                 db    8
.eh_frame:0000000000006A64                 db  45h ; E
.eh_frame:0000000000006A65                 db  0Bh
.eh_frame:0000000000006A66                 db  68h ; h
.eh_frame:0000000000006A67                 db  0Ah
.eh_frame:0000000000006A68                 db  0Eh
.eh_frame:0000000000006A69                 db  68h ; h
.eh_frame:0000000000006A6A                 db  48h ; H
.eh_frame:0000000000006A6B                 db  0Bh
.eh_frame:0000000000006A6C                 db  72h ; r
.eh_frame:0000000000006A6D                 db  0Eh
.eh_frame:0000000000006A6E                 db  68h ; h
.eh_frame:0000000000006A6F                 db  45h ; E
.eh_frame:0000000000006A70                 db  0Eh
.eh_frame:0000000000006A71                 db  70h ; p
.eh_frame:0000000000006A72                 db  42h ; B
.eh_frame:0000000000006A73                 db  0Eh
.eh_frame:0000000000006A74                 db  78h ; x
.eh_frame:0000000000006A75                 db  42h ; B
.eh_frame:0000000000006A76                 db  0Eh
.eh_frame:0000000000006A77                 db  80h
.eh_frame:0000000000006A78                 db    1
.eh_frame:0000000000006A79                 db  5Eh ; ^
.eh_frame:0000000000006A7A                 db  0Eh
.eh_frame:0000000000006A7B                 db  60h ; `
.eh_frame:0000000000006A7C                 db  44h ; D
.eh_frame:0000000000006A7D                 db  0Ah
.eh_frame:0000000000006A7E                 db  0Eh
.eh_frame:0000000000006A7F                 db  38h ; 8
.eh_frame:0000000000006A80                 db  41h ; A
.eh_frame:0000000000006A81                 db  0Eh
.eh_frame:0000000000006A82                 db  30h ; 0
.eh_frame:0000000000006A83                 db  41h ; A
.eh_frame:0000000000006A84                 db  0Eh
.eh_frame:0000000000006A85                 db  28h ; (
.eh_frame:0000000000006A86                 db  42h ; B
.eh_frame:0000000000006A87                 db  0Eh
.eh_frame:0000000000006A88                 db  20h
.eh_frame:0000000000006A89                 db  42h ; B
.eh_frame:0000000000006A8A                 db  0Eh
.eh_frame:0000000000006A8B                 db  18h
.eh_frame:0000000000006A8C                 db  42h ; B
.eh_frame:0000000000006A8D                 db  0Eh
.eh_frame:0000000000006A8E                 db  10h
.eh_frame:0000000000006A8F                 db  42h ; B
.eh_frame:0000000000006A90                 db  0Eh
.eh_frame:0000000000006A91                 db    8
.eh_frame:0000000000006A92                 db  41h ; A
.eh_frame:0000000000006A93                 db  0Bh
.eh_frame:0000000000006A94                 db  79h ; y
.eh_frame:0000000000006A95                 db  0Ah
.eh_frame:0000000000006A96                 db  0Eh
.eh_frame:0000000000006A97                 db  68h ; h
.eh_frame:0000000000006A98                 db  42h ; B
.eh_frame:0000000000006A99                 db  0Eh
.eh_frame:0000000000006A9A                 db  70h ; p
.eh_frame:0000000000006A9B                 db  42h ; B
.eh_frame:0000000000006A9C                 db  0Eh
.eh_frame:0000000000006A9D                 db  78h ; x
.eh_frame:0000000000006A9E                 db  42h ; B
.eh_frame:0000000000006A9F                 db  0Eh
.eh_frame:0000000000006AA0                 db  80h
.eh_frame:0000000000006AA1                 db    1
.eh_frame:0000000000006AA2                 db  51h ; Q
.eh_frame:0000000000006AA3                 db  0Bh
.eh_frame:0000000000006AA4                 db  10h
.eh_frame:0000000000006AA5                 db    0
.eh_frame:0000000000006AA6                 db    0
.eh_frame:0000000000006AA7                 db    0
.eh_frame:0000000000006AA8                 db  60h ; `
.eh_frame:0000000000006AA9                 db    7
.eh_frame:0000000000006AAA                 db    0
.eh_frame:0000000000006AAB                 db    0
.eh_frame:0000000000006AAC                 db    4
.eh_frame:0000000000006AAD                 db 0DCh
.eh_frame:0000000000006AAE                 db 0FFh
.eh_frame:0000000000006AAF                 db 0FFh
.eh_frame:0000000000006AB0                 db  20h
.eh_frame:0000000000006AB1                 db    0
.eh_frame:0000000000006AB2                 db    0
.eh_frame:0000000000006AB3                 db    0
.eh_frame:0000000000006AB4                 db    0
.eh_frame:0000000000006AB5                 db    0
.eh_frame:0000000000006AB6                 db    0
.eh_frame:0000000000006AB7                 db    0
.eh_frame:0000000000006AB8                 db  18h
.eh_frame:0000000000006AB9                 db    0
.eh_frame:0000000000006ABA                 db    0
.eh_frame:0000000000006ABB                 db    0
.eh_frame:0000000000006ABC                 db  74h ; t
.eh_frame:0000000000006ABD                 db    7
.eh_frame:0000000000006ABE                 db    0
.eh_frame:0000000000006ABF                 db    0
.eh_frame:0000000000006AC0                 db  10h
.eh_frame:0000000000006AC1                 db 0DCh
.eh_frame:0000000000006AC2                 db 0FFh
.eh_frame:0000000000006AC3                 db 0FFh
.eh_frame:0000000000006AC4                 db  78h ; x
.eh_frame:0000000000006AC5                 db    0
.eh_frame:0000000000006AC6                 db    0
.eh_frame:0000000000006AC7                 db    0
.eh_frame:0000000000006AC8                 db    0
.eh_frame:0000000000006AC9                 db  44h ; D
.eh_frame:0000000000006ACA                 db  0Eh
.eh_frame:0000000000006ACB                 db  70h ; p
.eh_frame:0000000000006ACC                 db    2
.eh_frame:0000000000006ACD                 db  60h ; `
.eh_frame:0000000000006ACE                 db  0Ah
.eh_frame:0000000000006ACF                 db  0Eh
.eh_frame:0000000000006AD0                 db    8
.eh_frame:0000000000006AD1                 db  41h ; A
.eh_frame:0000000000006AD2                 db  0Bh
.eh_frame:0000000000006AD3                 db    0
.eh_frame:0000000000006AD4                 db  28h ; (
.eh_frame:0000000000006AD5                 db    0
.eh_frame:0000000000006AD6                 db    0
.eh_frame:0000000000006AD7                 db    0
.eh_frame:0000000000006AD8                 db  90h
.eh_frame:0000000000006AD9                 db    7
.eh_frame:0000000000006ADA                 db    0
.eh_frame:0000000000006ADB                 db    0
.eh_frame:0000000000006ADC                 db  74h ; t
.eh_frame:0000000000006ADD                 db 0DCh
.eh_frame:0000000000006ADE                 db 0FFh
.eh_frame:0000000000006ADF                 db 0FFh
.eh_frame:0000000000006AE0                 db 0D5h
.eh_frame:0000000000006AE1                 db    0
.eh_frame:0000000000006AE2                 db    0
.eh_frame:0000000000006AE3                 db    0
.eh_frame:0000000000006AE4                 db    0
.eh_frame:0000000000006AE5                 db  41h ; A
.eh_frame:0000000000006AE6                 db  0Eh
.eh_frame:0000000000006AE7                 db  10h
.eh_frame:0000000000006AE8                 db  86h
.eh_frame:0000000000006AE9                 db    2
.eh_frame:0000000000006AEA                 db  41h ; A
.eh_frame:0000000000006AEB                 db  0Eh
.eh_frame:0000000000006AEC                 db  18h
.eh_frame:0000000000006AED                 db  83h
.eh_frame:0000000000006AEE                 db    3
.eh_frame:0000000000006AEF                 db  50h ; P
.eh_frame:0000000000006AF0                 db  0Eh
.eh_frame:0000000000006AF1                 db 0D0h
.eh_frame:0000000000006AF2                 db    1
.eh_frame:0000000000006AF3                 db    2
.eh_frame:0000000000006AF4                 db 0ABh
.eh_frame:0000000000006AF5                 db  0Ah
.eh_frame:0000000000006AF6                 db  0Eh
.eh_frame:0000000000006AF7                 db  18h
.eh_frame:0000000000006AF8                 db  41h ; A
.eh_frame:0000000000006AF9                 db  0Eh
.eh_frame:0000000000006AFA                 db  10h
.eh_frame:0000000000006AFB                 db  41h ; A
.eh_frame:0000000000006AFC                 db  0Eh
.eh_frame:0000000000006AFD                 db    8
.eh_frame:0000000000006AFE                 db  41h ; A
.eh_frame:0000000000006AFF                 db  0Bh
.eh_frame:0000000000006B00                 db  1Ch
.eh_frame:0000000000006B01                 db    0
.eh_frame:0000000000006B02                 db    0
.eh_frame:0000000000006B03                 db    0
.eh_frame:0000000000006B04                 db 0BCh
.eh_frame:0000000000006B05                 db    7
.eh_frame:0000000000006B06                 db    0
.eh_frame:0000000000006B07                 db    0
.eh_frame:0000000000006B08                 db  28h ; (
.eh_frame:0000000000006B09                 db 0DDh
.eh_frame:0000000000006B0A                 db 0FFh
.eh_frame:0000000000006B0B                 db 0FFh
.eh_frame:0000000000006B0C                 db  80h
.eh_frame:0000000000006B0D                 db    0
.eh_frame:0000000000006B0E                 db    0
.eh_frame:0000000000006B0F                 db    0
.eh_frame:0000000000006B10                 db    0
.eh_frame:0000000000006B11                 db  41h ; A
.eh_frame:0000000000006B12                 db  0Eh
.eh_frame:0000000000006B13                 db  10h
.eh_frame:0000000000006B14                 db  83h
.eh_frame:0000000000006B15                 db    2
.eh_frame:0000000000006B16                 db    2
.eh_frame:0000000000006B17                 db  7Ah ; z
.eh_frame:0000000000006B18                 db  0Eh
.eh_frame:0000000000006B19                 db    8
.eh_frame:0000000000006B1A                 db    0
.eh_frame:0000000000006B1B                 db    0
.eh_frame:0000000000006B1C                 db    0
.eh_frame:0000000000006B1D                 db    0
.eh_frame:0000000000006B1E                 db    0
.eh_frame:0000000000006B1F                 db    0
.eh_frame:0000000000006B20                 db  18h
.eh_frame:0000000000006B21                 db    0
.eh_frame:0000000000006B22                 db    0
.eh_frame:0000000000006B23                 db    0
.eh_frame:0000000000006B24                 db 0DCh
.eh_frame:0000000000006B25                 db    7
.eh_frame:0000000000006B26                 db    0
.eh_frame:0000000000006B27                 db    0
.eh_frame:0000000000006B28                 db  88h
.eh_frame:0000000000006B29                 db 0DDh
.eh_frame:0000000000006B2A                 db 0FFh
.eh_frame:0000000000006B2B                 db 0FFh
.eh_frame:0000000000006B2C                 db  1Ah
.eh_frame:0000000000006B2D                 db    0
.eh_frame:0000000000006B2E                 db    0
.eh_frame:0000000000006B2F                 db    0
.eh_frame:0000000000006B30                 db    0
.eh_frame:0000000000006B31                 db  41h ; A
.eh_frame:0000000000006B32                 db  0Eh
.eh_frame:0000000000006B33                 db  10h
.eh_frame:0000000000006B34                 db  83h
.eh_frame:0000000000006B35                 db    2
.eh_frame:0000000000006B36                 db  53h ; S
.eh_frame:0000000000006B37                 db  0Ah
.eh_frame:0000000000006B38                 db  0Eh
.eh_frame:0000000000006B39                 db    8
.eh_frame:0000000000006B3A                 db  41h ; A
.eh_frame:0000000000006B3B                 db  0Bh
.eh_frame:0000000000006B3C                 db  10h
.eh_frame:0000000000006B3D                 db    0
.eh_frame:0000000000006B3E                 db    0
.eh_frame:0000000000006B3F                 db    0
.eh_frame:0000000000006B40                 db 0F8h
.eh_frame:0000000000006B41                 db    7
.eh_frame:0000000000006B42                 db    0
.eh_frame:0000000000006B43                 db    0
.eh_frame:0000000000006B44                 db  8Ch
.eh_frame:0000000000006B45                 db 0DDh
.eh_frame:0000000000006B46                 db 0FFh
.eh_frame:0000000000006B47                 db 0FFh
.eh_frame:0000000000006B48                 db  24h ; $
.eh_frame:0000000000006B49                 db    0
.eh_frame:0000000000006B4A                 db    0
.eh_frame:0000000000006B4B                 db    0
.eh_frame:0000000000006B4C                 db    0
.eh_frame:0000000000006B4D                 db  5Fh ; _
.eh_frame:0000000000006B4E                 db  0Eh
.eh_frame:0000000000006B4F                 db  10h
.eh_frame:0000000000006B50                 db  10h
.eh_frame:0000000000006B51                 db    0
.eh_frame:0000000000006B52                 db    0
.eh_frame:0000000000006B53                 db    0
.eh_frame:0000000000006B54                 db  0Ch
.eh_frame:0000000000006B55                 db    8
.eh_frame:0000000000006B56                 db    0
.eh_frame:0000000000006B57                 db    0
.eh_frame:0000000000006B58                 db 0A8h
.eh_frame:0000000000006B59                 db 0DDh
.eh_frame:0000000000006B5A                 db 0FFh
.eh_frame:0000000000006B5B                 db 0FFh
.eh_frame:0000000000006B5C                 db    2
.eh_frame:0000000000006B5D                 db    0
.eh_frame:0000000000006B5E                 db    0
.eh_frame:0000000000006B5F                 db    0
.eh_frame:0000000000006B60                 db    0
.eh_frame:0000000000006B61                 db    0
.eh_frame:0000000000006B62                 db    0
.eh_frame:0000000000006B63                 db    0
.eh_frame:0000000000006B64                 db  20h
.eh_frame:0000000000006B65                 db    0
.eh_frame:0000000000006B66                 db    0
.eh_frame:0000000000006B67                 db    0
.eh_frame:0000000000006B68                 db  20h
.eh_frame:0000000000006B69                 db    8
.eh_frame:0000000000006B6A                 db    0
.eh_frame:0000000000006B6B                 db    0
.eh_frame:0000000000006B6C                 db 0A4h
.eh_frame:0000000000006B6D                 db 0DDh
.eh_frame:0000000000006B6E                 db 0FFh
.eh_frame:0000000000006B6F                 db 0FFh
.eh_frame:0000000000006B70                 db  36h ; 6
.eh_frame:0000000000006B71                 db    0
.eh_frame:0000000000006B72                 db    0
.eh_frame:0000000000006B73                 db    0
.eh_frame:0000000000006B74                 db    0
.eh_frame:0000000000006B75                 db  44h ; D
.eh_frame:0000000000006B76                 db  0Eh
.eh_frame:0000000000006B77                 db  10h
.eh_frame:0000000000006B78                 db  83h
.eh_frame:0000000000006B79                 db    2
.eh_frame:0000000000006B7A                 db  5Dh ; ]
.eh_frame:0000000000006B7B                 db  0Ah
.eh_frame:0000000000006B7C                 db  0Eh
.eh_frame:0000000000006B7D                 db    8
.eh_frame:0000000000006B7E                 db  47h ; G
.eh_frame:0000000000006B7F                 db  0Bh
.eh_frame:0000000000006B80                 db  48h ; H
.eh_frame:0000000000006B81                 db  0Ah
.eh_frame:0000000000006B82                 db  0Eh
.eh_frame:0000000000006B83                 db    8
.eh_frame:0000000000006B84                 db  41h ; A
.eh_frame:0000000000006B85                 db  0Bh
.eh_frame:0000000000006B86                 db    0
.eh_frame:0000000000006B87                 db    0
.eh_frame:0000000000006B88                 db  10h
.eh_frame:0000000000006B89                 db    0
.eh_frame:0000000000006B8A                 db    0
.eh_frame:0000000000006B8B                 db    0
.eh_frame:0000000000006B8C                 db  44h ; D
.eh_frame:0000000000006B8D                 db    8
.eh_frame:0000000000006B8E                 db    0
.eh_frame:0000000000006B8F                 db    0
.eh_frame:0000000000006B90                 db 0C0h
.eh_frame:0000000000006B91                 db 0DDh
.eh_frame:0000000000006B92                 db 0FFh
.eh_frame:0000000000006B93                 db 0FFh
.eh_frame:0000000000006B94                 db  24h ; $
.eh_frame:0000000000006B95                 db    0
.eh_frame:0000000000006B96                 db    0
.eh_frame:0000000000006B97                 db    0
.eh_frame:0000000000006B98                 db    0
.eh_frame:0000000000006B99                 db  5Fh ; _
.eh_frame:0000000000006B9A                 db  0Eh
.eh_frame:0000000000006B9B                 db  10h
.eh_frame:0000000000006B9C                 db  14h
.eh_frame:0000000000006B9D                 db    0
.eh_frame:0000000000006B9E                 db    0
.eh_frame:0000000000006B9F                 db    0
.eh_frame:0000000000006BA0                 db  58h ; X
.eh_frame:0000000000006BA1                 db    8
.eh_frame:0000000000006BA2                 db    0
.eh_frame:0000000000006BA3                 db    0
.eh_frame:0000000000006BA4                 db 0DCh
.eh_frame:0000000000006BA5                 db 0DDh
.eh_frame:0000000000006BA6                 db 0FFh
.eh_frame:0000000000006BA7                 db 0FFh
.eh_frame:0000000000006BA8                 db  82h
.eh_frame:0000000000006BA9                 db    0
.eh_frame:0000000000006BAA                 db    0
.eh_frame:0000000000006BAB                 db    0
.eh_frame:0000000000006BAC                 db    0
.eh_frame:0000000000006BAD                 db    2
.eh_frame:0000000000006BAE                 db  5Fh ; _
.eh_frame:0000000000006BAF                 db  0Eh
.eh_frame:0000000000006BB0                 db  10h
.eh_frame:0000000000006BB1                 db  49h ; I
.eh_frame:0000000000006BB2                 db  0Eh
.eh_frame:0000000000006BB3                 db    8
.eh_frame:0000000000006BB4                 db  14h
.eh_frame:0000000000006BB5                 db    0
.eh_frame:0000000000006BB6                 db    0
.eh_frame:0000000000006BB7                 db    0
.eh_frame:0000000000006BB8                 db  70h ; p
.eh_frame:0000000000006BB9                 db    8
.eh_frame:0000000000006BBA                 db    0
.eh_frame:0000000000006BBB                 db    0
.eh_frame:0000000000006BBC                 db  54h ; T
.eh_frame:0000000000006BBD                 db 0DEh
.eh_frame:0000000000006BBE                 db 0FFh
.eh_frame:0000000000006BBF                 db 0FFh
.eh_frame:0000000000006BC0                 db  4Ah ; J
.eh_frame:0000000000006BC1                 db    0
.eh_frame:0000000000006BC2                 db    0
.eh_frame:0000000000006BC3                 db    0
.eh_frame:0000000000006BC4                 db    0
.eh_frame:0000000000006BC5                 db    2
.eh_frame:0000000000006BC6                 db  45h ; E
.eh_frame:0000000000006BC7                 db  0Eh
.eh_frame:0000000000006BC8                 db  10h
.eh_frame:0000000000006BC9                 db    0
.eh_frame:0000000000006BCA                 db    0
.eh_frame:0000000000006BCB                 db    0
.eh_frame:0000000000006BCC                 db  18h
.eh_frame:0000000000006BCD                 db    0
.eh_frame:0000000000006BCE                 db    0
.eh_frame:0000000000006BCF                 db    0
.eh_frame:0000000000006BD0                 db  88h
.eh_frame:0000000000006BD1                 db    8
.eh_frame:0000000000006BD2                 db    0
.eh_frame:0000000000006BD3                 db    0
.eh_frame:0000000000006BD4                 db  8Ch
.eh_frame:0000000000006BD5                 db 0DEh
.eh_frame:0000000000006BD6                 db 0FFh
.eh_frame:0000000000006BD7                 db 0FFh
.eh_frame:0000000000006BD8                 db  17h
.eh_frame:0000000000006BD9                 db    0
.eh_frame:0000000000006BDA                 db    0
.eh_frame:0000000000006BDB                 db    0
.eh_frame:0000000000006BDC                 db    0
.eh_frame:0000000000006BDD                 db  41h ; A
.eh_frame:0000000000006BDE                 db  0Eh
.eh_frame:0000000000006BDF                 db  10h
.eh_frame:0000000000006BE0                 db  83h
.eh_frame:0000000000006BE1                 db    2
.eh_frame:0000000000006BE2                 db  51h ; Q
.eh_frame:0000000000006BE3                 db  0Eh
.eh_frame:0000000000006BE4                 db    8
.eh_frame:0000000000006BE5                 db    0
.eh_frame:0000000000006BE6                 db    0
.eh_frame:0000000000006BE7                 db    0
.eh_frame:0000000000006BE8                 db  18h
.eh_frame:0000000000006BE9                 db    0
.eh_frame:0000000000006BEA                 db    0
.eh_frame:0000000000006BEB                 db    0
.eh_frame:0000000000006BEC                 db 0A4h
.eh_frame:0000000000006BED                 db    8
.eh_frame:0000000000006BEE                 db    0
.eh_frame:0000000000006BEF                 db    0
.eh_frame:0000000000006BF0                 db  90h
.eh_frame:0000000000006BF1                 db 0DEh
.eh_frame:0000000000006BF2                 db 0FFh
.eh_frame:0000000000006BF3                 db 0FFh
.eh_frame:0000000000006BF4                 db  2Eh ; .
.eh_frame:0000000000006BF5                 db    0
.eh_frame:0000000000006BF6                 db    0
.eh_frame:0000000000006BF7                 db    0
.eh_frame:0000000000006BF8                 db    0
.eh_frame:0000000000006BF9                 db  47h ; G
.eh_frame:0000000000006BFA                 db  0Eh
.eh_frame:0000000000006BFB                 db  10h
.eh_frame:0000000000006BFC                 db  61h ; a
.eh_frame:0000000000006BFD                 db  0Ah
.eh_frame:0000000000006BFE                 db  0Eh
.eh_frame:0000000000006BFF                 db    8
.eh_frame:0000000000006C00                 db  41h ; A
.eh_frame:0000000000006C01                 db  0Bh
.eh_frame:0000000000006C02                 db    0
.eh_frame:0000000000006C03                 db    0
.eh_frame:0000000000006C04                 db  24h ; $
.eh_frame:0000000000006C05                 db    0
.eh_frame:0000000000006C06                 db    0
.eh_frame:0000000000006C07                 db    0
.eh_frame:0000000000006C08                 db 0C0h
.eh_frame:0000000000006C09                 db    8
.eh_frame:0000000000006C0A                 db    0
.eh_frame:0000000000006C0B                 db    0
.eh_frame:0000000000006C0C                 db 0A4h
.eh_frame:0000000000006C0D                 db 0DEh
.eh_frame:0000000000006C0E                 db 0FFh
.eh_frame:0000000000006C0F                 db 0FFh
.eh_frame:0000000000006C10                 db  28h ; (
.eh_frame:0000000000006C11                 db    0
.eh_frame:0000000000006C12                 db    0
.eh_frame:0000000000006C13                 db    0
.eh_frame:0000000000006C14                 db    0
.eh_frame:0000000000006C15                 db  41h ; A
.eh_frame:0000000000006C16                 db  0Eh
.eh_frame:0000000000006C17                 db  10h
.eh_frame:0000000000006C18                 db  86h
.eh_frame:0000000000006C19                 db    2
.eh_frame:0000000000006C1A                 db  41h ; A
.eh_frame:0000000000006C1B                 db  0Eh
.eh_frame:0000000000006C1C                 db  18h
.eh_frame:0000000000006C1D                 db  83h
.eh_frame:0000000000006C1E                 db    3
.eh_frame:0000000000006C1F                 db  4Dh ; M
.eh_frame:0000000000006C20                 db  0Eh
.eh_frame:0000000000006C21                 db  20h
.eh_frame:0000000000006C22                 db  49h ; I
.eh_frame:0000000000006C23                 db  0Eh
.eh_frame:0000000000006C24                 db  18h
.eh_frame:0000000000006C25                 db  47h ; G
.eh_frame:0000000000006C26                 db  0Eh
.eh_frame:0000000000006C27                 db  10h
.eh_frame:0000000000006C28                 db  41h ; A
.eh_frame:0000000000006C29                 db  0Eh
.eh_frame:0000000000006C2A                 db    8
.eh_frame:0000000000006C2B                 db    0
.eh_frame:0000000000006C2C                 db  18h
.eh_frame:0000000000006C2D                 db    0
.eh_frame:0000000000006C2E                 db    0
.eh_frame:0000000000006C2F                 db    0
.eh_frame:0000000000006C30                 db 0E8h
.eh_frame:0000000000006C31                 db    8
.eh_frame:0000000000006C32                 db    0
.eh_frame:0000000000006C33                 db    0
.eh_frame:0000000000006C34                 db 0ACh
.eh_frame:0000000000006C35                 db 0DEh
.eh_frame:0000000000006C36                 db 0FFh
.eh_frame:0000000000006C37                 db 0FFh
.eh_frame:0000000000006C38                 db  13h
.eh_frame:0000000000006C39                 db    0
.eh_frame:0000000000006C3A                 db    0
.eh_frame:0000000000006C3B                 db    0
.eh_frame:0000000000006C3C                 db    0
.eh_frame:0000000000006C3D                 db  41h ; A
.eh_frame:0000000000006C3E                 db  0Eh
.eh_frame:0000000000006C3F                 db  10h
.eh_frame:0000000000006C40                 db  83h
.eh_frame:0000000000006C41                 db    2
.eh_frame:0000000000006C42                 db  50h ; P
.eh_frame:0000000000006C43                 db  0Eh
.eh_frame:0000000000006C44                 db    8
.eh_frame:0000000000006C45                 db    0
.eh_frame:0000000000006C46                 db    0
.eh_frame:0000000000006C47                 db    0
.eh_frame:0000000000006C48                 db  14h
.eh_frame:0000000000006C49                 db    0
.eh_frame:0000000000006C4A                 db    0
.eh_frame:0000000000006C4B                 db    0
.eh_frame:0000000000006C4C                 db    4
.eh_frame:0000000000006C4D                 db    9
.eh_frame:0000000000006C4E                 db    0
.eh_frame:0000000000006C4F                 db    0
.eh_frame:0000000000006C50                 db 0B0h
.eh_frame:0000000000006C51                 db 0DEh
.eh_frame:0000000000006C52                 db 0FFh
.eh_frame:0000000000006C53                 db 0FFh
.eh_frame:0000000000006C54                 db  35h ; 5
.eh_frame:0000000000006C55                 db    0
.eh_frame:0000000000006C56                 db    0
.eh_frame:0000000000006C57                 db    0
.eh_frame:0000000000006C58                 db    0
.eh_frame:0000000000006C59                 db  4Bh ; K
.eh_frame:0000000000006C5A                 db  0Eh
.eh_frame:0000000000006C5B                 db  10h
.eh_frame:0000000000006C5C                 db    0
.eh_frame:0000000000006C5D                 db    0
.eh_frame:0000000000006C5E                 db    0
.eh_frame:0000000000006C5F                 db    0
.eh_frame:0000000000006C60                 db  3Ch ; <
.eh_frame:0000000000006C61                 db    0
.eh_frame:0000000000006C62                 db    0
.eh_frame:0000000000006C63                 db    0
.eh_frame:0000000000006C64                 db  1Ch
.eh_frame:0000000000006C65                 db    9
.eh_frame:0000000000006C66                 db    0
.eh_frame:0000000000006C67                 db    0
.eh_frame:0000000000006C68                 db 0D8h
.eh_frame:0000000000006C69                 db 0DEh
.eh_frame:0000000000006C6A                 db 0FFh
.eh_frame:0000000000006C6B                 db 0FFh
.eh_frame:0000000000006C6C                 db  83h
.eh_frame:0000000000006C6D                 db    0
.eh_frame:0000000000006C6E                 db    0
.eh_frame:0000000000006C6F                 db    0
.eh_frame:0000000000006C70                 db    0
.eh_frame:0000000000006C71                 db  42h ; B
.eh_frame:0000000000006C72                 db  0Eh
.eh_frame:0000000000006C73                 db  10h
.eh_frame:0000000000006C74                 db  8Dh
.eh_frame:0000000000006C75                 db    2
.eh_frame:0000000000006C76                 db  42h ; B
.eh_frame:0000000000006C77                 db  0Eh
.eh_frame:0000000000006C78                 db  18h
.eh_frame:0000000000006C79                 db  8Ch
.eh_frame:0000000000006C7A                 db    3
.eh_frame:0000000000006C7B                 db  44h ; D
.eh_frame:0000000000006C7C                 db  0Eh
.eh_frame:0000000000006C7D                 db  20h
.eh_frame:0000000000006C7E                 db  86h
.eh_frame:0000000000006C7F                 db    4
.eh_frame:0000000000006C80                 db  41h ; A
.eh_frame:0000000000006C81                 db  0Eh
.eh_frame:0000000000006C82                 db  28h ; (
.eh_frame:0000000000006C83                 db  83h
.eh_frame:0000000000006C84                 db    5
.eh_frame:0000000000006C85                 db  4Ah ; J
.eh_frame:0000000000006C86                 db  0Eh
.eh_frame:0000000000006C87                 db  40h ; @
.eh_frame:0000000000006C88                 db    2
.eh_frame:0000000000006C89                 db  64h ; d
.eh_frame:0000000000006C8A                 db  0Ah
.eh_frame:0000000000006C8B                 db  0Eh
.eh_frame:0000000000006C8C                 db  28h ; (
.eh_frame:0000000000006C8D                 db  41h ; A
.eh_frame:0000000000006C8E                 db  0Eh
.eh_frame:0000000000006C8F                 db  20h
.eh_frame:0000000000006C90                 db  41h ; A
.eh_frame:0000000000006C91                 db  0Eh
.eh_frame:0000000000006C92                 db  18h
.eh_frame:0000000000006C93                 db  42h ; B
.eh_frame:0000000000006C94                 db  0Eh
.eh_frame:0000000000006C95                 db  10h
.eh_frame:0000000000006C96                 db  42h ; B
.eh_frame:0000000000006C97                 db  0Eh
.eh_frame:0000000000006C98                 db    8
.eh_frame:0000000000006C99                 db  41h ; A
.eh_frame:0000000000006C9A                 db  0Bh
.eh_frame:0000000000006C9B                 db    0
.eh_frame:0000000000006C9C                 db    0
.eh_frame:0000000000006C9D                 db    0
.eh_frame:0000000000006C9E                 db    0
.eh_frame:0000000000006C9F                 db    0
.eh_frame:0000000000006CA0                 db  38h ; 8
.eh_frame:0000000000006CA1                 db    0
.eh_frame:0000000000006CA2                 db    0
.eh_frame:0000000000006CA3                 db    0
.eh_frame:0000000000006CA4                 db  5Ch ; \
.eh_frame:0000000000006CA5                 db    9
.eh_frame:0000000000006CA6                 db    0
.eh_frame:0000000000006CA7                 db    0
.eh_frame:0000000000006CA8                 db  28h ; (
.eh_frame:0000000000006CA9                 db 0DFh
.eh_frame:0000000000006CAA                 db 0FFh
.eh_frame:0000000000006CAB                 db 0FFh
.eh_frame:0000000000006CAC                 db  85h
.eh_frame:0000000000006CAD                 db    1
.eh_frame:0000000000006CAE                 db    0
.eh_frame:0000000000006CAF                 db    0
.eh_frame:0000000000006CB0                 db    0
.eh_frame:0000000000006CB1                 db  42h ; B
.eh_frame:0000000000006CB2                 db  0Eh
.eh_frame:0000000000006CB3                 db  10h
.eh_frame:0000000000006CB4                 db  8Dh
.eh_frame:0000000000006CB5                 db    2
.eh_frame:0000000000006CB6                 db  42h ; B
.eh_frame:0000000000006CB7                 db  0Eh
.eh_frame:0000000000006CB8                 db  18h
.eh_frame:0000000000006CB9                 db  8Ch
.eh_frame:0000000000006CBA                 db    3
.eh_frame:0000000000006CBB                 db  44h ; D
.eh_frame:0000000000006CBC                 db  0Eh
.eh_frame:0000000000006CBD                 db  20h
.eh_frame:0000000000006CBE                 db  86h
.eh_frame:0000000000006CBF                 db    4
.eh_frame:0000000000006CC0                 db  41h ; A
.eh_frame:0000000000006CC1                 db  0Eh
.eh_frame:0000000000006CC2                 db  28h ; (
.eh_frame:0000000000006CC3                 db  83h
.eh_frame:0000000000006CC4                 db    5
.eh_frame:0000000000006CC5                 db  50h ; P
.eh_frame:0000000000006CC6                 db  0Eh
.eh_frame:0000000000006CC7                 db  40h ; @
.eh_frame:0000000000006CC8                 db    2
.eh_frame:0000000000006CC9                 db  6Fh ; o
.eh_frame:0000000000006CCA                 db  0Ah
.eh_frame:0000000000006CCB                 db  0Eh
.eh_frame:0000000000006CCC                 db  28h ; (
.eh_frame:0000000000006CCD                 db  41h ; A
.eh_frame:0000000000006CCE                 db  0Eh
.eh_frame:0000000000006CCF                 db  20h
.eh_frame:0000000000006CD0                 db  41h ; A
.eh_frame:0000000000006CD1                 db  0Eh
.eh_frame:0000000000006CD2                 db  18h
.eh_frame:0000000000006CD3                 db  42h ; B
.eh_frame:0000000000006CD4                 db  0Eh
.eh_frame:0000000000006CD5                 db  10h
.eh_frame:0000000000006CD6                 db  42h ; B
.eh_frame:0000000000006CD7                 db  0Eh
.eh_frame:0000000000006CD8                 db    8
.eh_frame:0000000000006CD9                 db  42h ; B
.eh_frame:0000000000006CDA                 db  0Bh
.eh_frame:0000000000006CDB                 db    0
.eh_frame:0000000000006CDC                 db  38h ; 8
.eh_frame:0000000000006CDD                 db    0
.eh_frame:0000000000006CDE                 db    0
.eh_frame:0000000000006CDF                 db    0
.eh_frame:0000000000006CE0                 db  98h
.eh_frame:0000000000006CE1                 db    9
.eh_frame:0000000000006CE2                 db    0
.eh_frame:0000000000006CE3                 db    0
.eh_frame:0000000000006CE4                 db  7Ch ; |
.eh_frame:0000000000006CE5                 db 0E0h
.eh_frame:0000000000006CE6                 db 0FFh
.eh_frame:0000000000006CE7                 db 0FFh
.eh_frame:0000000000006CE8                 db 0DBh
.eh_frame:0000000000006CE9                 db    0
.eh_frame:0000000000006CEA                 db    0
.eh_frame:0000000000006CEB                 db    0
.eh_frame:0000000000006CEC                 db    0
.eh_frame:0000000000006CED                 db  41h ; A
.eh_frame:0000000000006CEE                 db  0Eh
.eh_frame:0000000000006CEF                 db  10h
.eh_frame:0000000000006CF0                 db  86h
.eh_frame:0000000000006CF1                 db    2
.eh_frame:0000000000006CF2                 db  48h ; H
.eh_frame:0000000000006CF3                 db  0Eh
.eh_frame:0000000000006CF4                 db  18h
.eh_frame:0000000000006CF5                 db  83h
.eh_frame:0000000000006CF6                 db    3
.eh_frame:0000000000006CF7                 db  4Bh ; K
.eh_frame:0000000000006CF8                 db  0Eh
.eh_frame:0000000000006CF9                 db  30h ; 0
.eh_frame:0000000000006CFA                 db  70h ; p
.eh_frame:0000000000006CFB                 db  0Ah
.eh_frame:0000000000006CFC                 db  0Eh
.eh_frame:0000000000006CFD                 db  18h
.eh_frame:0000000000006CFE                 db  41h ; A
.eh_frame:0000000000006CFF                 db  0Eh
.eh_frame:0000000000006D00                 db  10h
.eh_frame:0000000000006D01                 db  41h ; A
.eh_frame:0000000000006D02                 db  0Eh
.eh_frame:0000000000006D03                 db    8
.eh_frame:0000000000006D04                 db  4Ah ; J
.eh_frame:0000000000006D05                 db  0Bh
.eh_frame:0000000000006D06                 db    2
.eh_frame:0000000000006D07                 db  66h ; f
.eh_frame:0000000000006D08                 db  0Ah
.eh_frame:0000000000006D09                 db  0Eh
.eh_frame:0000000000006D0A                 db  18h
.eh_frame:0000000000006D0B                 db  43h ; C
.eh_frame:0000000000006D0C                 db  0Eh
.eh_frame:0000000000006D0D                 db  10h
.eh_frame:0000000000006D0E                 db  41h ; A
.eh_frame:0000000000006D0F                 db  0Eh
.eh_frame:0000000000006D10                 db    8
.eh_frame:0000000000006D11                 db  46h ; F
.eh_frame:0000000000006D12                 db  0Bh
.eh_frame:0000000000006D13                 db    0
.eh_frame:0000000000006D14                 db    0
.eh_frame:0000000000006D15                 db    0
.eh_frame:0000000000006D16                 db    0
.eh_frame:0000000000006D17                 db    0
.eh_frame:0000000000006D18                 db  4Ch ; L
.eh_frame:0000000000006D19                 db    0
.eh_frame:0000000000006D1A                 db    0
.eh_frame:0000000000006D1B                 db    0
.eh_frame:0000000000006D1C                 db 0D4h
.eh_frame:0000000000006D1D                 db    9
.eh_frame:0000000000006D1E                 db    0
.eh_frame:0000000000006D1F                 db    0
.eh_frame:0000000000006D20                 db  20h
.eh_frame:0000000000006D21                 db 0E1h
.eh_frame:0000000000006D22                 db 0FFh
.eh_frame:0000000000006D23                 db 0FFh
.eh_frame:0000000000006D24                 db  7Dh ; }
.eh_frame:0000000000006D25                 db    0
.eh_frame:0000000000006D26                 db    0
.eh_frame:0000000000006D27                 db    0
.eh_frame:0000000000006D28                 db    0
.eh_frame:0000000000006D29                 db  42h ; B
.eh_frame:0000000000006D2A                 db  0Eh
.eh_frame:0000000000006D2B                 db  10h
.eh_frame:0000000000006D2C                 db  8Ch
.eh_frame:0000000000006D2D                 db    2
.eh_frame:0000000000006D2E                 db  41h ; A
.eh_frame:0000000000006D2F                 db  0Eh
.eh_frame:0000000000006D30                 db  18h
.eh_frame:0000000000006D31                 db  86h
.eh_frame:0000000000006D32                 db    3
.eh_frame:0000000000006D33                 db  44h ; D
.eh_frame:0000000000006D34                 db  0Eh
.eh_frame:0000000000006D35                 db  20h
.eh_frame:0000000000006D36                 db  83h
.eh_frame:0000000000006D37                 db    4
.eh_frame:0000000000006D38                 db  69h ; i
.eh_frame:0000000000006D39                 db  0Ah
.eh_frame:0000000000006D3A                 db  0Eh
.eh_frame:0000000000006D3B                 db  18h
.eh_frame:0000000000006D3C                 db  41h ; A
.eh_frame:0000000000006D3D                 db  0Eh
.eh_frame:0000000000006D3E                 db  10h
.eh_frame:0000000000006D3F                 db  42h ; B
.eh_frame:0000000000006D40                 db  0Eh
.eh_frame:0000000000006D41                 db    8
.eh_frame:0000000000006D42                 db  45h ; E
.eh_frame:0000000000006D43                 db  0Bh
.eh_frame:0000000000006D44                 db  55h ; U
.eh_frame:0000000000006D45                 db  0Ah
.eh_frame:0000000000006D46                 db  0Eh
.eh_frame:0000000000006D47                 db  18h
.eh_frame:0000000000006D48                 db  41h ; A
.eh_frame:0000000000006D49                 db  0Eh
.eh_frame:0000000000006D4A                 db  10h
.eh_frame:0000000000006D4B                 db  42h ; B
.eh_frame:0000000000006D4C                 db  0Eh
.eh_frame:0000000000006D4D                 db    8
.eh_frame:0000000000006D4E                 db  48h ; H
.eh_frame:0000000000006D4F                 db  0Bh
.eh_frame:0000000000006D50                 db  41h ; A
.eh_frame:0000000000006D51                 db  0Ah
.eh_frame:0000000000006D52                 db  0Eh
.eh_frame:0000000000006D53                 db  18h
.eh_frame:0000000000006D54                 db  46h ; F
.eh_frame:0000000000006D55                 db  0Eh
.eh_frame:0000000000006D56                 db  10h
.eh_frame:0000000000006D57                 db  42h ; B
.eh_frame:0000000000006D58                 db  0Eh
.eh_frame:0000000000006D59                 db    8
.eh_frame:0000000000006D5A                 db  47h ; G
.eh_frame:0000000000006D5B                 db  0Bh
.eh_frame:0000000000006D5C                 db  49h ; I
.eh_frame:0000000000006D5D                 db  0Eh
.eh_frame:0000000000006D5E                 db  18h
.eh_frame:0000000000006D5F                 db  41h ; A
.eh_frame:0000000000006D60                 db  0Eh
.eh_frame:0000000000006D61                 db  10h
.eh_frame:0000000000006D62                 db  42h ; B
.eh_frame:0000000000006D63                 db  0Eh
.eh_frame:0000000000006D64                 db    8
.eh_frame:0000000000006D65                 db    0
.eh_frame:0000000000006D66                 db    0
.eh_frame:0000000000006D67                 db    0
.eh_frame:0000000000006D68                 db  1Ch
.eh_frame:0000000000006D69                 db    0
.eh_frame:0000000000006D6A                 db    0
.eh_frame:0000000000006D6B                 db    0
.eh_frame:0000000000006D6C                 db  24h ; $
.eh_frame:0000000000006D6D                 db  0Ah
.eh_frame:0000000000006D6E                 db    0
.eh_frame:0000000000006D6F                 db    0
.eh_frame:0000000000006D70                 db  50h ; P
.eh_frame:0000000000006D71                 db 0E1h
.eh_frame:0000000000006D72                 db 0FFh
.eh_frame:0000000000006D73                 db 0FFh
.eh_frame:0000000000006D74                 db  60h ; `
.eh_frame:0000000000006D75                 db    0
.eh_frame:0000000000006D76                 db    0
.eh_frame:0000000000006D77                 db    0
.eh_frame:0000000000006D78                 db    0
.eh_frame:0000000000006D79                 db  44h ; D
.eh_frame:0000000000006D7A                 db  0Eh
.eh_frame:0000000000006D7B                 db  10h
.eh_frame:0000000000006D7C                 db  75h ; u
.eh_frame:0000000000006D7D                 db  0Ah
.eh_frame:0000000000006D7E                 db  0Eh
.eh_frame:0000000000006D7F                 db    8
.eh_frame:0000000000006D80                 db  47h ; G
.eh_frame:0000000000006D81                 db  0Bh
.eh_frame:0000000000006D82                 db  5Fh ; _
.eh_frame:0000000000006D83                 db  0Eh
.eh_frame:0000000000006D84                 db    8
.eh_frame:0000000000006D85                 db    0
.eh_frame:0000000000006D86                 db    0
.eh_frame:0000000000006D87                 db    0
.eh_frame:0000000000006D88                 db  1Ch
.eh_frame:0000000000006D89                 db    0
.eh_frame:0000000000006D8A                 db    0
.eh_frame:0000000000006D8B                 db    0
.eh_frame:0000000000006D8C                 db  44h ; D
.eh_frame:0000000000006D8D                 db  0Ah
.eh_frame:0000000000006D8E                 db    0
.eh_frame:0000000000006D8F                 db    0
.eh_frame:0000000000006D90                 db  90h
.eh_frame:0000000000006D91                 db 0E1h
.eh_frame:0000000000006D92                 db 0FFh
.eh_frame:0000000000006D93                 db 0FFh
.eh_frame:0000000000006D94                 db  3Ch ; <
.eh_frame:0000000000006D95                 db    0
.eh_frame:0000000000006D96                 db    0
.eh_frame:0000000000006D97                 db    0
.eh_frame:0000000000006D98                 db    0
.eh_frame:0000000000006D99                 db  44h ; D
.eh_frame:0000000000006D9A                 db  0Eh
.eh_frame:0000000000006D9B                 db  10h
.eh_frame:0000000000006D9C                 db  61h ; a
.eh_frame:0000000000006D9D                 db  0Ah
.eh_frame:0000000000006D9E                 db  0Eh
.eh_frame:0000000000006D9F                 db    8
.eh_frame:0000000000006DA0                 db  4Bh ; K
.eh_frame:0000000000006DA1                 db  0Bh
.eh_frame:0000000000006DA2                 db  4Bh ; K
.eh_frame:0000000000006DA3                 db  0Eh
.eh_frame:0000000000006DA4                 db    8
.eh_frame:0000000000006DA5                 db    0
.eh_frame:0000000000006DA6                 db    0
.eh_frame:0000000000006DA7                 db    0
.eh_frame:0000000000006DA8                 db  34h ; 4
.eh_frame:0000000000006DA9                 db    0
.eh_frame:0000000000006DAA                 db    0
.eh_frame:0000000000006DAB                 db    0
.eh_frame:0000000000006DAC                 db  64h ; d
.eh_frame:0000000000006DAD                 db  0Ah
.eh_frame:0000000000006DAE                 db    0
.eh_frame:0000000000006DAF                 db    0
.eh_frame:0000000000006DB0                 db 0B0h
.eh_frame:0000000000006DB1                 db 0E1h
.eh_frame:0000000000006DB2                 db 0FFh
.eh_frame:0000000000006DB3                 db 0FFh
.eh_frame:0000000000006DB4                 db  7Bh ; {
.eh_frame:0000000000006DB5                 db    0
.eh_frame:0000000000006DB6                 db    0
.eh_frame:0000000000006DB7                 db    0
.eh_frame:0000000000006DB8                 db    0
.eh_frame:0000000000006DB9                 db  42h ; B
.eh_frame:0000000000006DBA                 db  0Eh
.eh_frame:0000000000006DBB                 db  10h
.eh_frame:0000000000006DBC                 db  8Ch
.eh_frame:0000000000006DBD                 db    2
.eh_frame:0000000000006DBE                 db  41h ; A
.eh_frame:0000000000006DBF                 db  0Eh
.eh_frame:0000000000006DC0                 db  18h
.eh_frame:0000000000006DC1                 db  86h
.eh_frame:0000000000006DC2                 db    3
.eh_frame:0000000000006DC3                 db  41h ; A
.eh_frame:0000000000006DC4                 db  0Eh
.eh_frame:0000000000006DC5                 db  20h
.eh_frame:0000000000006DC6                 db  83h
.eh_frame:0000000000006DC7                 db    4
.eh_frame:0000000000006DC8                 db  7Dh ; }
.eh_frame:0000000000006DC9                 db  0Ah
.eh_frame:0000000000006DCA                 db  0Eh
.eh_frame:0000000000006DCB                 db  18h
.eh_frame:0000000000006DCC                 db  41h ; A
.eh_frame:0000000000006DCD                 db  0Eh
.eh_frame:0000000000006DCE                 db  10h
.eh_frame:0000000000006DCF                 db  42h ; B
.eh_frame:0000000000006DD0                 db  0Eh
.eh_frame:0000000000006DD1                 db    8
.eh_frame:0000000000006DD2                 db  44h ; D
.eh_frame:0000000000006DD3                 db  0Bh
.eh_frame:0000000000006DD4                 db  60h ; `
.eh_frame:0000000000006DD5                 db  0Ah
.eh_frame:0000000000006DD6                 db  0Eh
.eh_frame:0000000000006DD7                 db  18h
.eh_frame:0000000000006DD8                 db  41h ; A
.eh_frame:0000000000006DD9                 db  0Eh
.eh_frame:0000000000006DDA                 db  10h
.eh_frame:0000000000006DDB                 db  42h ; B
.eh_frame:0000000000006DDC                 db  0Eh
.eh_frame:0000000000006DDD                 db    8
.eh_frame:0000000000006DDE                 db  45h ; E
.eh_frame:0000000000006DDF                 db  0Bh
.eh_frame:0000000000006DE0                 db  1Ch
.eh_frame:0000000000006DE1                 db    0
.eh_frame:0000000000006DE2                 db    0
.eh_frame:0000000000006DE3                 db    0
.eh_frame:0000000000006DE4                 db  9Ch
.eh_frame:0000000000006DE5                 db  0Ah
.eh_frame:0000000000006DE6                 db    0
.eh_frame:0000000000006DE7                 db    0
.eh_frame:0000000000006DE8                 db 0F8h
.eh_frame:0000000000006DE9                 db 0E1h
.eh_frame:0000000000006DEA                 db 0FFh
.eh_frame:0000000000006DEB                 db 0FFh
.eh_frame:0000000000006DEC                 db  40h ; @
.eh_frame:0000000000006DED                 db    0
.eh_frame:0000000000006DEE                 db    0
.eh_frame:0000000000006DEF                 db    0
.eh_frame:0000000000006DF0                 db    0
.eh_frame:0000000000006DF1                 db  44h ; D
.eh_frame:0000000000006DF2                 db  0Eh
.eh_frame:0000000000006DF3                 db  10h
.eh_frame:0000000000006DF4                 db  83h
.eh_frame:0000000000006DF5                 db    2
.eh_frame:0000000000006DF6                 db  5Ah ; Z
.eh_frame:0000000000006DF7                 db  0Ah
.eh_frame:0000000000006DF8                 db  0Eh
.eh_frame:0000000000006DF9                 db    8
.eh_frame:0000000000006DFA                 db  4Ah ; J
.eh_frame:0000000000006DFB                 db  0Bh
.eh_frame:0000000000006DFC                 db  53h ; S
.eh_frame:0000000000006DFD                 db  0Eh
.eh_frame:0000000000006DFE                 db    8
.eh_frame:0000000000006DFF                 db    0
.eh_frame:0000000000006E00                 db  2Ch ; ,
.eh_frame:0000000000006E01                 db    0
.eh_frame:0000000000006E02                 db    0
.eh_frame:0000000000006E03                 db    0
.eh_frame:0000000000006E04                 db 0BCh
.eh_frame:0000000000006E05                 db  0Ah
.eh_frame:0000000000006E06                 db    0
.eh_frame:0000000000006E07                 db    0
.eh_frame:0000000000006E08                 db  18h
.eh_frame:0000000000006E09                 db 0E2h
.eh_frame:0000000000006E0A                 db 0FFh
.eh_frame:0000000000006E0B                 db 0FFh
.eh_frame:0000000000006E0C                 db  57h ; W
.eh_frame:0000000000006E0D                 db    0
.eh_frame:0000000000006E0E                 db    0
.eh_frame:0000000000006E0F                 db    0
.eh_frame:0000000000006E10                 db    0
.eh_frame:0000000000006E11                 db  63h ; c
.eh_frame:0000000000006E12                 db  0Eh
.eh_frame:0000000000006E13                 db  10h
.eh_frame:0000000000006E14                 db  8Ch
.eh_frame:0000000000006E15                 db    2
.eh_frame:0000000000006E16                 db  41h ; A
.eh_frame:0000000000006E17                 db  0Eh
.eh_frame:0000000000006E18                 db  18h
.eh_frame:0000000000006E19                 db  86h
.eh_frame:0000000000006E1A                 db    3
.eh_frame:0000000000006E1B                 db  44h ; D
.eh_frame:0000000000006E1C                 db  0Eh
.eh_frame:0000000000006E1D                 db  20h
.eh_frame:0000000000006E1E                 db  83h
.eh_frame:0000000000006E1F                 db    4
.eh_frame:0000000000006E20                 db  6Bh ; k
.eh_frame:0000000000006E21                 db  0Eh
.eh_frame:0000000000006E22                 db  18h
.eh_frame:0000000000006E23                 db  41h ; A
.eh_frame:0000000000006E24                 db  0Eh
.eh_frame:0000000000006E25                 db  10h
.eh_frame:0000000000006E26                 db  42h ; B
.eh_frame:0000000000006E27                 db  0Eh
.eh_frame:0000000000006E28                 db    8
.eh_frame:0000000000006E29                 db    0
.eh_frame:0000000000006E2A                 db    0
.eh_frame:0000000000006E2B                 db    0
.eh_frame:0000000000006E2C                 db    0
.eh_frame:0000000000006E2D                 db    0
.eh_frame:0000000000006E2E                 db    0
.eh_frame:0000000000006E2F                 db    0
.eh_frame:0000000000006E30                 db  44h ; D
.eh_frame:0000000000006E31                 db    0
.eh_frame:0000000000006E32                 db    0
.eh_frame:0000000000006E33                 db    0
.eh_frame:0000000000006E34                 db 0ECh
.eh_frame:0000000000006E35                 db  0Ah
.eh_frame:0000000000006E36                 db    0
.eh_frame:0000000000006E37                 db    0
.eh_frame:0000000000006E38                 db  48h ; H
.eh_frame:0000000000006E39                 db 0E2h
.eh_frame:0000000000006E3A                 db 0FFh
.eh_frame:0000000000006E3B                 db 0FFh
.eh_frame:0000000000006E3C                 db  65h ; e
.eh_frame:0000000000006E3D                 db    0
.eh_frame:0000000000006E3E                 db    0
.eh_frame:0000000000006E3F                 db    0
.eh_frame:0000000000006E40                 db    0
.eh_frame:0000000000006E41                 db  42h ; B
.eh_frame:0000000000006E42                 db  0Eh
.eh_frame:0000000000006E43                 db  10h
.eh_frame:0000000000006E44                 db  8Fh
.eh_frame:0000000000006E45                 db    2
.eh_frame:0000000000006E46                 db  42h ; B
.eh_frame:0000000000006E47                 db  0Eh
.eh_frame:0000000000006E48                 db  18h
.eh_frame:0000000000006E49                 db  8Eh
.eh_frame:0000000000006E4A                 db    3
.eh_frame:0000000000006E4B                 db  45h ; E
.eh_frame:0000000000006E4C                 db  0Eh
.eh_frame:0000000000006E4D                 db  20h
.eh_frame:0000000000006E4E                 db  8Dh
.eh_frame:0000000000006E4F                 db    4
.eh_frame:0000000000006E50                 db  42h ; B
.eh_frame:0000000000006E51                 db  0Eh
.eh_frame:0000000000006E52                 db  28h ; (
.eh_frame:0000000000006E53                 db  8Ch
.eh_frame:0000000000006E54                 db    5
.eh_frame:0000000000006E55                 db  48h ; H
.eh_frame:0000000000006E56                 db  0Eh
.eh_frame:0000000000006E57                 db  30h ; 0
.eh_frame:0000000000006E58                 db  86h
.eh_frame:0000000000006E59                 db    6
.eh_frame:0000000000006E5A                 db  48h ; H
.eh_frame:0000000000006E5B                 db  0Eh
.eh_frame:0000000000006E5C                 db  38h ; 8
.eh_frame:0000000000006E5D                 db  83h
.eh_frame:0000000000006E5E                 db    7
.eh_frame:0000000000006E5F                 db  4Dh ; M
.eh_frame:0000000000006E60                 db  0Eh
.eh_frame:0000000000006E61                 db  40h ; @
.eh_frame:0000000000006E62                 db  72h ; r
.eh_frame:0000000000006E63                 db  0Eh
.eh_frame:0000000000006E64                 db  38h ; 8
.eh_frame:0000000000006E65                 db  41h ; A
.eh_frame:0000000000006E66                 db  0Eh
.eh_frame:0000000000006E67                 db  30h ; 0
.eh_frame:0000000000006E68                 db  41h ; A
.eh_frame:0000000000006E69                 db  0Eh
.eh_frame:0000000000006E6A                 db  28h ; (
.eh_frame:0000000000006E6B                 db  42h ; B
.eh_frame:0000000000006E6C                 db  0Eh
.eh_frame:0000000000006E6D                 db  20h
.eh_frame:0000000000006E6E                 db  42h ; B
.eh_frame:0000000000006E6F                 db  0Eh
.eh_frame:0000000000006E70                 db  18h
.eh_frame:0000000000006E71                 db  42h ; B
.eh_frame:0000000000006E72                 db  0Eh
.eh_frame:0000000000006E73                 db  10h
.eh_frame:0000000000006E74                 db  42h ; B
.eh_frame:0000000000006E75                 db  0Eh
.eh_frame:0000000000006E76                 db    8
.eh_frame:0000000000006E77                 db    0
.eh_frame:0000000000006E78                 db  14h
.eh_frame:0000000000006E79                 db    0
.eh_frame:0000000000006E7A                 db    0
.eh_frame:0000000000006E7B                 db    0
.eh_frame:0000000000006E7C                 db  34h ; 4
.eh_frame:0000000000006E7D                 db  0Bh
.eh_frame:0000000000006E7E                 db    0
.eh_frame:0000000000006E7F                 db    0
.eh_frame:0000000000006E80                 db  70h ; p
.eh_frame:0000000000006E81                 db 0E2h
.eh_frame:0000000000006E82                 db 0FFh
.eh_frame:0000000000006E83                 db 0FFh
.eh_frame:0000000000006E84                 db    2
.eh_frame:0000000000006E85                 db    0
.eh_frame:0000000000006E86                 db    0
.eh_frame:0000000000006E87                 db    0
.eh_frame:0000000000006E88                 db    0
.eh_frame:0000000000006E89                 db    0
.eh_frame:0000000000006E8A                 db    0
.eh_frame:0000000000006E8B                 db    0
.eh_frame:0000000000006E8C                 db    0
.eh_frame:0000000000006E8D                 db    0
.eh_frame:0000000000006E8E                 db    0
.eh_frame:0000000000006E8F                 db    0
.eh_frame:0000000000006E90                 db  10h
.eh_frame:0000000000006E91                 db    0
.eh_frame:0000000000006E92                 db    0
.eh_frame:0000000000006E93                 db    0
.eh_frame:0000000000006E94                 db  4Ch ; L
.eh_frame:0000000000006E95                 db  0Bh
.eh_frame:0000000000006E96                 db    0
.eh_frame:0000000000006E97                 db    0
.eh_frame:0000000000006E98                 db  68h ; h
.eh_frame:0000000000006E99                 db 0E2h
.eh_frame:0000000000006E9A                 db 0FFh
.eh_frame:0000000000006E9B                 db 0FFh
.eh_frame:0000000000006E9C                 db  0Eh
.eh_frame:0000000000006E9D                 db    0
.eh_frame:0000000000006E9E                 db    0
.eh_frame:0000000000006E9F                 db    0
.eh_frame:0000000000006EA0                 db    0
.eh_frame:0000000000006EA1                 db    0
.eh_frame:0000000000006EA2                 db    0
.eh_frame:0000000000006EA3                 db    0
.eh_frame:0000000000006EA4 __FRAME_END__   db    0
.eh_frame:0000000000006EA5                 db    0
.eh_frame:0000000000006EA6                 db    0
.eh_frame:0000000000006EA7                 db    0
.eh_frame:0000000000006EA7 _eh_frame       ends
.eh_frame:0000000000006EA7
.init_array:0000000000207B10 ; ELF Initialization Function Table
.init_array:0000000000207B10 ; ===========================================================================
.init_array:0000000000207B10
.init_array:0000000000207B10 ; Segment type: Pure data
.init_array:0000000000207B10 ; Segment permissions: Read/Write
.init_array:0000000000207B10 _init_array     segment qword public 'DATA' use64
.init_array:0000000000207B10                 assume cs:_init_array
.init_array:0000000000207B10                 ;org 207B10h
.init_array:0000000000207B10 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:0000000000207B10                                         ; DATA XREF: LOAD:00000000000000F8↑o
.init_array:0000000000207B10                                         ; LOAD:0000000000000210↑o ...
.init_array:0000000000207B10 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:0000000000207B10
.fini_array:0000000000207B18 ; ELF Termination Function Table
.fini_array:0000000000207B18 ; ===========================================================================
.fini_array:0000000000207B18
.fini_array:0000000000207B18 ; Segment type: Pure data
.fini_array:0000000000207B18 ; Segment permissions: Read/Write
.fini_array:0000000000207B18 _fini_array     segment qword public 'DATA' use64
.fini_array:0000000000207B18                 assume cs:_fini_array
.fini_array:0000000000207B18                 ;org 207B18h
.fini_array:0000000000207B18 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:0000000000207B18                                         ; DATA XREF: __libc_csu_init+13↑o
.fini_array:0000000000207B18 _fini_array     ends                    ; Alternative name is '__init_array_end'
.fini_array:0000000000207B18
.data.rel.ro:0000000000207B20 ; ===========================================================================
.data.rel.ro:0000000000207B20
.data.rel.ro:0000000000207B20 ; Segment type: Pure data
.data.rel.ro:0000000000207B20 ; Segment permissions: Read/Write
.data.rel.ro:0000000000207B20 _data_rel_ro    segment align_32 public 'DATA' use64
.data.rel.ro:0000000000207B20                 assume cs:_data_rel_ro
.data.rel.ro:0000000000207B20                 ;org 207B20h
.data.rel.ro:0000000000207B20 ; struct option long_options
.data.rel.ro:0000000000207B20 long_options    dq offset aList         ; name
.data.rel.ro:0000000000207B20                                         ; DATA XREF: main:loc_1850↑o
.data.rel.ro:0000000000207B20                 dd 0                    ; has_arg ; "list"
.data.rel.ro:0000000000207B20                 db 4 dup(0)
.data.rel.ro:0000000000207B20                 dq 0                    ; flag
.data.rel.ro:0000000000207B20                 dd 6Ch                  ; val
.data.rel.ro:0000000000207B20                 db 4 dup(0)
.data.rel.ro:0000000000207B40                 dq offset aSInvalidSignal+0Ch ; "signal"
.data.rel.ro:0000000000207B48                 db    1
.data.rel.ro:0000000000207B49                 db    0
.data.rel.ro:0000000000207B4A                 db    0
.data.rel.ro:0000000000207B4B                 db    0
.data.rel.ro:0000000000207B4C                 db    0
.data.rel.ro:0000000000207B4D                 db    0
.data.rel.ro:0000000000207B4E                 db    0
.data.rel.ro:0000000000207B4F                 db    0
.data.rel.ro:0000000000207B50                 db    0
.data.rel.ro:0000000000207B51                 db    0
.data.rel.ro:0000000000207B52                 db    0
.data.rel.ro:0000000000207B53                 db    0
.data.rel.ro:0000000000207B54                 db    0
.data.rel.ro:0000000000207B55                 db    0
.data.rel.ro:0000000000207B56                 db    0
.data.rel.ro:0000000000207B57                 db    0
.data.rel.ro:0000000000207B58                 db  73h ; s
.data.rel.ro:0000000000207B59                 db    0
.data.rel.ro:0000000000207B5A                 db    0
.data.rel.ro:0000000000207B5B                 db    0
.data.rel.ro:0000000000207B5C                 db    0
.data.rel.ro:0000000000207B5D                 db    0
.data.rel.ro:0000000000207B5E                 db    0
.data.rel.ro:0000000000207B5F                 db    0
.data.rel.ro:0000000000207B60                 dq offset aTable        ; "table"
.data.rel.ro:0000000000207B68                 db    0
.data.rel.ro:0000000000207B69                 db    0
.data.rel.ro:0000000000207B6A                 db    0
.data.rel.ro:0000000000207B6B                 db    0
.data.rel.ro:0000000000207B6C                 db    0
.data.rel.ro:0000000000207B6D                 db    0
.data.rel.ro:0000000000207B6E                 db    0
.data.rel.ro:0000000000207B6F                 db    0
.data.rel.ro:0000000000207B70                 db    0
.data.rel.ro:0000000000207B71                 db    0
.data.rel.ro:0000000000207B72                 db    0
.data.rel.ro:0000000000207B73                 db    0
.data.rel.ro:0000000000207B74                 db    0
.data.rel.ro:0000000000207B75                 db    0
.data.rel.ro:0000000000207B76                 db    0
.data.rel.ro:0000000000207B77                 db    0
.data.rel.ro:0000000000207B78                 db  74h ; t
.data.rel.ro:0000000000207B79                 db    0
.data.rel.ro:0000000000207B7A                 db    0
.data.rel.ro:0000000000207B7B                 db    0
.data.rel.ro:0000000000207B7C                 db    0
.data.rel.ro:0000000000207B7D                 db    0
.data.rel.ro:0000000000207B7E                 db    0
.data.rel.ro:0000000000207B7F                 db    0
.data.rel.ro:0000000000207B80                 dq offset aHelp         ; "help"
.data.rel.ro:0000000000207B88                 db    0
.data.rel.ro:0000000000207B89                 db    0
.data.rel.ro:0000000000207B8A                 db    0
.data.rel.ro:0000000000207B8B                 db    0
.data.rel.ro:0000000000207B8C                 db    0
.data.rel.ro:0000000000207B8D                 db    0
.data.rel.ro:0000000000207B8E                 db    0
.data.rel.ro:0000000000207B8F                 db    0
.data.rel.ro:0000000000207B90                 db    0
.data.rel.ro:0000000000207B91                 db    0
.data.rel.ro:0000000000207B92                 db    0
.data.rel.ro:0000000000207B93                 db    0
.data.rel.ro:0000000000207B94                 db    0
.data.rel.ro:0000000000207B95                 db    0
.data.rel.ro:0000000000207B96                 db    0
.data.rel.ro:0000000000207B97                 db    0
.data.rel.ro:0000000000207B98                 db  7Eh ; ~
.data.rel.ro:0000000000207B99                 db 0FFh
.data.rel.ro:0000000000207B9A                 db 0FFh
.data.rel.ro:0000000000207B9B                 db 0FFh
.data.rel.ro:0000000000207B9C                 db    0
.data.rel.ro:0000000000207B9D                 db    0
.data.rel.ro:0000000000207B9E                 db    0
.data.rel.ro:0000000000207B9F                 db    0
.data.rel.ro:0000000000207BA0                 dq offset aVersion      ; "version"
.data.rel.ro:0000000000207BA8                 db    0
.data.rel.ro:0000000000207BA9                 db    0
.data.rel.ro:0000000000207BAA                 db    0
.data.rel.ro:0000000000207BAB                 db    0
.data.rel.ro:0000000000207BAC                 db    0
.data.rel.ro:0000000000207BAD                 db    0
.data.rel.ro:0000000000207BAE                 db    0
.data.rel.ro:0000000000207BAF                 db    0
.data.rel.ro:0000000000207BB0                 db    0
.data.rel.ro:0000000000207BB1                 db    0
.data.rel.ro:0000000000207BB2                 db    0
.data.rel.ro:0000000000207BB3                 db    0
.data.rel.ro:0000000000207BB4                 db    0
.data.rel.ro:0000000000207BB5                 db    0
.data.rel.ro:0000000000207BB6                 db    0
.data.rel.ro:0000000000207BB7                 db    0
.data.rel.ro:0000000000207BB8                 db  7Dh ; }
.data.rel.ro:0000000000207BB9                 db 0FFh
.data.rel.ro:0000000000207BBA                 db 0FFh
.data.rel.ro:0000000000207BBB                 db 0FFh
.data.rel.ro:0000000000207BBC                 db    0
.data.rel.ro:0000000000207BBD                 db    0
.data.rel.ro:0000000000207BBE                 db    0
.data.rel.ro:0000000000207BBF                 db    0
.data.rel.ro:0000000000207BC0                 db    0
.data.rel.ro:0000000000207BC1                 db    0
.data.rel.ro:0000000000207BC2                 db    0
.data.rel.ro:0000000000207BC3                 db    0
.data.rel.ro:0000000000207BC4                 db    0
.data.rel.ro:0000000000207BC5                 db    0
.data.rel.ro:0000000000207BC6                 db    0
.data.rel.ro:0000000000207BC7                 db    0
.data.rel.ro:0000000000207BC8                 db    0
.data.rel.ro:0000000000207BC9                 db    0
.data.rel.ro:0000000000207BCA                 db    0
.data.rel.ro:0000000000207BCB                 db    0
.data.rel.ro:0000000000207BCC                 db    0
.data.rel.ro:0000000000207BCD                 db    0
.data.rel.ro:0000000000207BCE                 db    0
.data.rel.ro:0000000000207BCF                 db    0
.data.rel.ro:0000000000207BD0                 db    0
.data.rel.ro:0000000000207BD1                 db    0
.data.rel.ro:0000000000207BD2                 db    0
.data.rel.ro:0000000000207BD3                 db    0
.data.rel.ro:0000000000207BD4                 db    0
.data.rel.ro:0000000000207BD5                 db    0
.data.rel.ro:0000000000207BD6                 db    0
.data.rel.ro:0000000000207BD7                 db    0
.data.rel.ro:0000000000207BD8                 db    0
.data.rel.ro:0000000000207BD9                 db    0
.data.rel.ro:0000000000207BDA                 db    0
.data.rel.ro:0000000000207BDB                 db    0
.data.rel.ro:0000000000207BDC                 db    0
.data.rel.ro:0000000000207BDD                 db    0
.data.rel.ro:0000000000207BDE                 db    0
.data.rel.ro:0000000000207BDF                 db    0
.data.rel.ro:0000000000207BE0                 public quoting_style_args
.data.rel.ro:0000000000207BE0 quoting_style_args dq offset aLiteral   ; "literal"
.data.rel.ro:0000000000207BE8                 dq offset aShell        ; "shell"
.data.rel.ro:0000000000207BF0                 dq offset aShellAlways  ; "shell-always"
.data.rel.ro:0000000000207BF8                 dq offset aShellEscape  ; "shell-escape"
.data.rel.ro:0000000000207C00                 dq offset aShellEscapeAlw ; "shell-escape-always"
.data.rel.ro:0000000000207C08                 dq offset aInvalidOptionC+13h ; "c"
.data.rel.ro:0000000000207C10                 dq offset aCMaybe       ; "c-maybe"
.data.rel.ro:0000000000207C18                 dq offset aShellEscape+6 ; "escape"
.data.rel.ro:0000000000207C20                 dq offset dirname+11h   ; "locale"
.data.rel.ro:0000000000207C28                 dq offset aClocale      ; "clocale"
.data.rel.ro:0000000000207C30                 db    0
.data.rel.ro:0000000000207C31                 db    0
.data.rel.ro:0000000000207C32                 db    0
.data.rel.ro:0000000000207C33                 db    0
.data.rel.ro:0000000000207C34                 db    0
.data.rel.ro:0000000000207C35                 db    0
.data.rel.ro:0000000000207C36                 db    0
.data.rel.ro:0000000000207C37                 db    0
.data.rel.ro:0000000000207C37 _data_rel_ro    ends
.data.rel.ro:0000000000207C37
LOAD:0000000000207C38 ; ELF Dynamic Information
LOAD:0000000000207C38 ; ===========================================================================
LOAD:0000000000207C38
LOAD:0000000000207C38 ; Segment type: Pure data
LOAD:0000000000207C38 ; Segment permissions: Read/Write
LOAD:0000000000207C38 LOAD            segment byte public 'DATA' use64
LOAD:0000000000207C38                 assume cs:LOAD
LOAD:0000000000207C38                 ;org 207C38h
LOAD:0000000000207C38 _DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000000130↑o
LOAD:0000000000207C38                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:0000000000207C38                                         ; DT_NEEDED libc.so.6
LOAD:0000000000207C48                 Elf64_Dyn <0Ch, 1470h>  ; DT_INIT
LOAD:0000000000207C58                 Elf64_Dyn <0Dh, 5110h>  ; DT_FINI
LOAD:0000000000207C68                 Elf64_Dyn <19h, 207B10h> ; DT_INIT_ARRAY
LOAD:0000000000207C78                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:0000000000207C88                 Elf64_Dyn <1Ah, 207B18h> ; DT_FINI_ARRAY
LOAD:0000000000207C98                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:0000000000207CA8                 Elf64_Dyn <6FFFFEF5h, 298h> ; DT_GNU_HASH
LOAD:0000000000207CB8                 Elf64_Dyn <5, 8E0h>     ; DT_STRTAB
LOAD:0000000000207CC8                 Elf64_Dyn <6, 2E0h>     ; DT_SYMTAB
LOAD:0000000000207CD8                 Elf64_Dyn <0Ah, 2FFh>   ; DT_STRSZ
LOAD:0000000000207CE8                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:0000000000207CF8                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:0000000000207D08                 Elf64_Dyn <3, 207E28h>  ; DT_PLTGOT
LOAD:0000000000207D18                 Elf64_Dyn <2, 4B0h>     ; DT_PLTRELSZ
LOAD:0000000000207D28                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:0000000000207D38                 Elf64_Dyn <17h, 0FC0h>  ; DT_JMPREL
LOAD:0000000000207D48                 Elf64_Dyn <7, 0CC0h>    ; DT_RELA
LOAD:0000000000207D58                 Elf64_Dyn <8, 300h>     ; DT_RELASZ
LOAD:0000000000207D68                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:0000000000207D78                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:0000000000207D88                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:0000000000207D98                 Elf64_Dyn <6FFFFFFEh, 0C60h> ; DT_VERNEED
LOAD:0000000000207DA8                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:0000000000207DB8                 Elf64_Dyn <6FFFFFF0h, 0BE0h> ; DT_VERSYM
LOAD:0000000000207DC8                 Elf64_Dyn <6FFFFFF9h, 15h> ; DT_RELACOUNT
LOAD:0000000000207DD8                 Elf64_Dyn <0>           ; DT_NULL
LOAD:0000000000207DE8                 db    0
LOAD:0000000000207DE9                 db    0
LOAD:0000000000207DEA                 db    0
LOAD:0000000000207DEB                 db    0
LOAD:0000000000207DEC                 db    0
LOAD:0000000000207DED                 db    0
LOAD:0000000000207DEE                 db    0
LOAD:0000000000207DEF                 db    0
LOAD:0000000000207DF0                 db    0
LOAD:0000000000207DF1                 db    0
LOAD:0000000000207DF2                 db    0
LOAD:0000000000207DF3                 db    0
LOAD:0000000000207DF4                 db    0
LOAD:0000000000207DF5                 db    0
LOAD:0000000000207DF6                 db    0
LOAD:0000000000207DF7                 db    0
LOAD:0000000000207DF8                 db    0
LOAD:0000000000207DF9                 db    0
LOAD:0000000000207DFA                 db    0
LOAD:0000000000207DFB                 db    0
LOAD:0000000000207DFC                 db    0
LOAD:0000000000207DFD                 db    0
LOAD:0000000000207DFE                 db    0
LOAD:0000000000207DFF                 db    0
LOAD:0000000000207E00                 db    0
LOAD:0000000000207E01                 db    0
LOAD:0000000000207E02                 db    0
LOAD:0000000000207E03                 db    0
LOAD:0000000000207E04                 db    0
LOAD:0000000000207E05                 db    0
LOAD:0000000000207E06                 db    0
LOAD:0000000000207E07                 db    0
LOAD:0000000000207E08                 db    0
LOAD:0000000000207E09                 db    0
LOAD:0000000000207E0A                 db    0
LOAD:0000000000207E0B                 db    0
LOAD:0000000000207E0C                 db    0
LOAD:0000000000207E0D                 db    0
LOAD:0000000000207E0E                 db    0
LOAD:0000000000207E0F                 db    0
LOAD:0000000000207E10                 db    0
LOAD:0000000000207E11                 db    0
LOAD:0000000000207E12                 db    0
LOAD:0000000000207E13                 db    0
LOAD:0000000000207E14                 db    0
LOAD:0000000000207E15                 db    0
LOAD:0000000000207E16                 db    0
LOAD:0000000000207E17                 db    0
LOAD:0000000000207E18                 db    0
LOAD:0000000000207E19                 db    0
LOAD:0000000000207E1A                 db    0
LOAD:0000000000207E1B                 db    0
LOAD:0000000000207E1C                 db    0
LOAD:0000000000207E1D                 db    0
LOAD:0000000000207E1E                 db    0
LOAD:0000000000207E1F                 db    0
LOAD:0000000000207E20                 db    0
LOAD:0000000000207E21                 db    0
LOAD:0000000000207E22                 db    0
LOAD:0000000000207E23                 db    0
LOAD:0000000000207E24                 db    0
LOAD:0000000000207E25                 db    0
LOAD:0000000000207E26                 db    0
LOAD:0000000000207E27                 db    0
LOAD:0000000000207E27 LOAD            ends
LOAD:0000000000207E27
.got:0000000000207E28 ; ===========================================================================
.got:0000000000207E28
.got:0000000000207E28 ; Segment type: Pure data
.got:0000000000207E28 ; Segment permissions: Read/Write
.got:0000000000207E28 _got            segment qword public 'DATA' use64
.got:0000000000207E28                 assume cs:_got
.got:0000000000207E28                 ;org 207E28h
.got:0000000000207E28 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:0000000000207E30 qword_207E30    dq 0                    ; DATA XREF: sub_1490↑r
.got:0000000000207E38 qword_207E38    dq 0                    ; DATA XREF: sub_1490+6↑r
.got:0000000000207E40 free_ptr        dq offset free          ; DATA XREF: _free↑r
.got:0000000000207E48 abort_ptr       dq offset abort         ; DATA XREF: _abort↑r
.got:0000000000207E50 __errno_location_ptr dq offset __errno_location
.got:0000000000207E50                                         ; DATA XREF: ___errno_location↑r
.got:0000000000207E58 strncmp_ptr     dq offset strncmp       ; DATA XREF: _strncmp↑r
.got:0000000000207E60 _exit_ptr       dq offset _exit         ; DATA XREF: __exit↑r
.got:0000000000207E68 strcpy_ptr      dq offset strcpy        ; DATA XREF: _strcpy↑r
.got:0000000000207E70 __fpending_ptr  dq offset __fpending    ; DATA XREF: ___fpending↑r
.got:0000000000207E78 puts_ptr        dq offset puts          ; DATA XREF: _puts↑r
.got:0000000000207E80 textdomain_ptr  dq offset textdomain    ; DATA XREF: _textdomain↑r
.got:0000000000207E88 __strtol_internal_ptr dq offset __strtol_internal
.got:0000000000207E88                                         ; DATA XREF: ___strtol_internal↑r
.got:0000000000207E90 fclose_ptr      dq offset fclose        ; DATA XREF: _fclose↑r
.got:0000000000207E98 bindtextdomain_ptr dq offset bindtextdomain
.got:0000000000207E98                                         ; DATA XREF: _bindtextdomain↑r
.got:0000000000207EA0 dcgettext_ptr   dq offset dcgettext     ; DATA XREF: _dcgettext↑r
.got:0000000000207EA8 __ctype_get_mb_cur_max_ptr dq offset __ctype_get_mb_cur_max
.got:0000000000207EA8                                         ; DATA XREF: ___ctype_get_mb_cur_max↑r
.got:0000000000207EB0 strlen_ptr      dq offset strlen        ; DATA XREF: _strlen↑r
.got:0000000000207EB8 __stack_chk_fail_ptr dq offset __stack_chk_fail
.got:0000000000207EB8                                         ; DATA XREF: ___stack_chk_fail↑r
.got:0000000000207EC0 getopt_long_ptr dq offset getopt_long   ; DATA XREF: _getopt_long↑r
.got:0000000000207EC8 mbrtowc_ptr     dq offset mbrtowc       ; DATA XREF: _mbrtowc↑r
.got:0000000000207ED0 strchr_ptr      dq offset strchr        ; DATA XREF: _strchr↑r
.got:0000000000207ED8 strrchr_ptr     dq offset strrchr       ; DATA XREF: _strrchr↑r
.got:0000000000207EE0 lseek_ptr       dq offset lseek         ; DATA XREF: _lseek↑r
.got:0000000000207EE8 memset_ptr      dq offset memset        ; DATA XREF: _memset↑r
.got:0000000000207EF0 memcmp_ptr      dq offset memcmp        ; DATA XREF: _memcmp↑r
.got:0000000000207EF8 fputs_unlocked_ptr dq offset fputs_unlocked
.got:0000000000207EF8                                         ; DATA XREF: _fputs_unlocked↑r
.got:0000000000207F00 calloc_ptr      dq offset calloc        ; DATA XREF: _calloc↑r
.got:0000000000207F08 strcmp_ptr      dq offset strcmp        ; DATA XREF: _strcmp↑r
.got:0000000000207F10 strtol_ptr      dq offset strtol        ; DATA XREF: _strtol↑r
.got:0000000000207F18 memcpy_ptr      dq offset memcpy        ; DATA XREF: _memcpy↑r
.got:0000000000207F20 kill_ptr        dq offset kill          ; DATA XREF: _kill↑r
.got:0000000000207F28 fileno_ptr      dq offset fileno        ; DATA XREF: _fileno↑r
.got:0000000000207F30 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc↑r
.got:0000000000207F38 fflush_ptr      dq offset fflush        ; DATA XREF: _fflush↑r
.got:0000000000207F40 nl_langinfo_ptr dq offset nl_langinfo   ; DATA XREF: _nl_langinfo↑r
.got:0000000000207F48 __freading_ptr  dq offset __freading    ; DATA XREF: ___freading↑r
.got:0000000000207F50 strsignal_ptr   dq offset strsignal     ; DATA XREF: _strsignal↑r
.got:0000000000207F58 realloc_ptr     dq offset realloc       ; DATA XREF: _realloc↑r
.got:0000000000207F60 setlocale_ptr   dq offset setlocale     ; DATA XREF: _setlocale↑r
.got:0000000000207F68 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk↑r
.got:0000000000207F70 error_ptr       dq offset error         ; DATA XREF: _error↑r
.got:0000000000207F78 fseeko_ptr      dq offset fseeko        ; DATA XREF: _fseeko↑r
.got:0000000000207F80 __cxa_atexit_ptr dq offset __cxa_atexit ; DATA XREF: ___cxa_atexit↑r
.got:0000000000207F88 __libc_current_sigrtmin_ptr dq offset __libc_current_sigrtmin
.got:0000000000207F88                                         ; DATA XREF: ___libc_current_sigrtmin↑r
.got:0000000000207F90 exit_ptr        dq offset exit          ; DATA XREF: _exit↑r
.got:0000000000207F98 fwrite_ptr      dq offset fwrite        ; DATA XREF: _fwrite↑r
.got:0000000000207FA0 __fprintf_chk_ptr dq offset __fprintf_chk
.got:0000000000207FA0                                         ; DATA XREF: ___fprintf_chk↑r
.got:0000000000207FA8 __libc_current_sigrtmax_ptr dq offset __libc_current_sigrtmax
.got:0000000000207FA8                                         ; DATA XREF: ___libc_current_sigrtmax↑r
.got:0000000000207FB0 mbsinit_ptr     dq offset mbsinit       ; DATA XREF: _mbsinit↑r
.got:0000000000207FB8 iswprint_ptr    dq offset iswprint      ; DATA XREF: _iswprint↑r
.got:0000000000207FC0 __ctype_b_loc_ptr dq offset __ctype_b_loc
.got:0000000000207FC0                                         ; DATA XREF: ___ctype_b_loc↑r
.got:0000000000207FC8 __sprintf_chk_ptr dq offset __sprintf_chk
.got:0000000000207FC8                                         ; DATA XREF: ___sprintf_chk↑r
.got:0000000000207FD0 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:0000000000207FD0                                         ; DATA XREF: deregister_tm_clones+17↑r
.got:0000000000207FD8 __libc_start_main_ptr dq offset __libc_start_main
.got:0000000000207FD8                                         ; DATA XREF: start+24↑r
.got:0000000000207FE0 __gmon_start___ptr dq offset __gmon_start__
.got:0000000000207FE0                                         ; DATA XREF: _init_proc+4↑r
.got:0000000000207FE8 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:0000000000207FE8                                         ; DATA XREF: register_tm_clones+28↑r
.got:0000000000207FF0 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:0000000000207FF0                                         ; DATA XREF: __cxa_finalize↑r
.got:0000000000207FF0                                         ; __do_global_dtors_aux+9↑r
.got:0000000000207FF0 _got            ends
.got:0000000000207FF0
LOAD:0000000000207FF8 ; ===========================================================================
LOAD:0000000000207FF8
LOAD:0000000000207FF8 ; Segment type: Pure data
LOAD:0000000000207FF8 ; Segment permissions: Read/Write
LOAD:0000000000207FF8 LOAD            segment byte public 'DATA' use64
LOAD:0000000000207FF8                 assume cs:LOAD
LOAD:0000000000207FF8                 ;org 207FF8h
LOAD:0000000000207FF8                 align 20h
LOAD:0000000000207FF8 LOAD            ends
LOAD:0000000000207FF8
.data:0000000000208000 ; ===========================================================================
.data:0000000000208000
.data:0000000000208000 ; Segment type: Pure data
.data:0000000000208000 ; Segment permissions: Read/Write
.data:0000000000208000 _data           segment align_32 public 'DATA' use64
.data:0000000000208000                 assume cs:_data
.data:0000000000208000                 ;org 208000h
.data:0000000000208000                 public __data_start ; weak
.data:0000000000208000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:0000000000208000                                         ; data_start
.data:0000000000208001                 db    0
.data:0000000000208002                 db    0
.data:0000000000208003                 db    0
.data:0000000000208004                 db    0
.data:0000000000208005                 db    0
.data:0000000000208006                 db    0
.data:0000000000208007                 db    0
.data:0000000000208008                 public __dso_handle
.data:0000000000208008 ; void *_dso_handle
.data:0000000000208008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+17↑r
.data:0000000000208008                                         ; atexit↑r ...
.data:0000000000208010                 public Version
.data:0000000000208010 Version         dq offset a831          ; DATA XREF: main+124↑r
.data:0000000000208010                                         ; "8.31"
.data:0000000000208018                 public exit_failure
.data:0000000000208018 ; int exit_failure
.data:0000000000208018 exit_failure    dd 1                    ; DATA XREF: close_stdout:loc_2532↑r
.data:0000000000208018                                         ; xalloc_die+17↑r
.data:000000000020801C                 align 20h
.data:0000000000208020                 public quote_quoting_options
.data:0000000000208020 quote_quoting_options db    8           ; DATA XREF: quote_n_mem↑o
.data:0000000000208020                                         ; quote_mem↑o ...
.data:0000000000208021                 db    0
.data:0000000000208022                 db    0
.data:0000000000208023                 db    0
.data:0000000000208024                 db    0
.data:0000000000208025                 db    0
.data:0000000000208026                 db    0
.data:0000000000208027                 db    0
.data:0000000000208028                 db    0
.data:0000000000208029                 db    0
.data:000000000020802A                 db    0
.data:000000000020802B                 db    0
.data:000000000020802C                 db    0
.data:000000000020802D                 db    0
.data:000000000020802E                 db    0
.data:000000000020802F                 db    0
.data:0000000000208030                 db    0
.data:0000000000208031                 db    0
.data:0000000000208032                 db    0
.data:0000000000208033                 db    0
.data:0000000000208034                 db    0
.data:0000000000208035                 db    0
.data:0000000000208036                 db    0
.data:0000000000208037                 db    0
.data:0000000000208038                 db    0
.data:0000000000208039                 db    0
.data:000000000020803A                 db    0
.data:000000000020803B                 db    0
.data:000000000020803C                 db    0
.data:000000000020803D                 db    0
.data:000000000020803E                 db    0
.data:000000000020803F                 db    0
.data:0000000000208040                 db    0
.data:0000000000208041                 db    0
.data:0000000000208042                 db    0
.data:0000000000208043                 db    0
.data:0000000000208044                 db    0
.data:0000000000208045                 db    0
.data:0000000000208046                 db    0
.data:0000000000208047                 db    0
.data:0000000000208048                 db    0
.data:0000000000208049                 db    0
.data:000000000020804A                 db    0
.data:000000000020804B                 db    0
.data:000000000020804C                 db    0
.data:000000000020804D                 db    0
.data:000000000020804E                 db    0
.data:000000000020804F                 db    0
.data:0000000000208050                 db    0
.data:0000000000208051                 db    0
.data:0000000000208052                 db    0
.data:0000000000208053                 db    0
.data:0000000000208054                 db    0
.data:0000000000208055                 db    0
.data:0000000000208056                 db    0
.data:0000000000208057                 db    0
.data:0000000000208058 nslots          dd 1                    ; DATA XREF: quotearg_n_options+3A↑r
.data:0000000000208058                                         ; quotearg_n_options:loc_39AD↑r ...
.data:000000000020805C                 align 20h
.data:0000000000208060 ; void *slotvec
.data:0000000000208060 slotvec         dq offset slotvec0      ; DATA XREF: quotearg_n_options+29↑r
.data:0000000000208060                                         ; quotearg_n_options+76↑w ...
.data:0000000000208068                 align 10h
.data:0000000000208070 slotvec0        dq offset qword_100     ; DATA XREF: quotearg_n_options+54↑o
.data:0000000000208070                                         ; quotearg_n_options+187↑r ...
.data:0000000000208078 off_208078      dq offset slot0         ; DATA XREF: quotearg_free+62↑w
.data:0000000000208080 numname_table   db    1                 ; DATA XREF: str2sig+5F↑o
.data:0000000000208080                                         ; sig2str+1↑o
.data:0000000000208081                 db    0
.data:0000000000208082                 db    0
.data:0000000000208083                 db    0
.data:0000000000208084 ; char nptr[4]
.data:0000000000208084 nptr            db 'HUP',0              ; DATA XREF: str2sig+E↑o
.data:0000000000208088                 db    0
.data:0000000000208089                 db    0
.data:000000000020808A                 db    0
.data:000000000020808B                 db    0
.data:000000000020808C                 db    2
.data:000000000020808D                 db    0
.data:000000000020808E                 db    0
.data:000000000020808F                 db    0
.data:0000000000208090                 db  49h ; I
.data:0000000000208091                 db  4Eh ; N
.data:0000000000208092                 db  54h ; T
.data:0000000000208093                 db    0
.data:0000000000208094                 db    0
.data:0000000000208095                 db    0
.data:0000000000208096                 db    0
.data:0000000000208097                 db    0
.data:0000000000208098                 db    3
.data:0000000000208099                 db    0
.data:000000000020809A                 db    0
.data:000000000020809B                 db    0
.data:000000000020809C                 db  51h ; Q
.data:000000000020809D                 db  55h ; U
.data:000000000020809E                 db  49h ; I
.data:000000000020809F                 db  54h ; T
.data:00000000002080A0                 db    0
.data:00000000002080A1                 db    0
.data:00000000002080A2                 db    0
.data:00000000002080A3                 db    0
.data:00000000002080A4                 db    4
.data:00000000002080A5                 db    0
.data:00000000002080A6                 db    0
.data:00000000002080A7                 db    0
.data:00000000002080A8                 db  49h ; I
.data:00000000002080A9                 db  4Ch ; L
.data:00000000002080AA                 db  4Ch ; L
.data:00000000002080AB                 db    0
.data:00000000002080AC                 db    0
.data:00000000002080AD                 db    0
.data:00000000002080AE                 db    0
.data:00000000002080AF                 db    0
.data:00000000002080B0                 db    5
.data:00000000002080B1                 db    0
.data:00000000002080B2                 db    0
.data:00000000002080B3                 db    0
.data:00000000002080B4                 db  54h ; T
.data:00000000002080B5                 db  52h ; R
.data:00000000002080B6                 db  41h ; A
.data:00000000002080B7                 db  50h ; P
.data:00000000002080B8                 db    0
.data:00000000002080B9                 db    0
.data:00000000002080BA                 db    0
.data:00000000002080BB                 db    0
.data:00000000002080BC                 db    6
.data:00000000002080BD                 db    0
.data:00000000002080BE                 db    0
.data:00000000002080BF                 db    0
.data:00000000002080C0                 db  41h ; A
.data:00000000002080C1                 db  42h ; B
.data:00000000002080C2                 db  52h ; R
.data:00000000002080C3                 db  54h ; T
.data:00000000002080C4                 db    0
.data:00000000002080C5                 db    0
.data:00000000002080C6                 db    0
.data:00000000002080C7                 db    0
.data:00000000002080C8                 db    8
.data:00000000002080C9                 db    0
.data:00000000002080CA                 db    0
.data:00000000002080CB                 db    0
.data:00000000002080CC                 db  46h ; F
.data:00000000002080CD                 db  50h ; P
.data:00000000002080CE                 db  45h ; E
.data:00000000002080CF                 db    0
.data:00000000002080D0                 db    0
.data:00000000002080D1                 db    0
.data:00000000002080D2                 db    0
.data:00000000002080D3                 db    0
.data:00000000002080D4                 db    9
.data:00000000002080D5                 db    0
.data:00000000002080D6                 db    0
.data:00000000002080D7                 db    0
.data:00000000002080D8                 db  4Bh ; K
.data:00000000002080D9                 db  49h ; I
.data:00000000002080DA                 db  4Ch ; L
.data:00000000002080DB                 db  4Ch ; L
.data:00000000002080DC                 db    0
.data:00000000002080DD                 db    0
.data:00000000002080DE                 db    0
.data:00000000002080DF                 db    0
.data:00000000002080E0                 db  0Bh
.data:00000000002080E1                 db    0
.data:00000000002080E2                 db    0
.data:00000000002080E3                 db    0
.data:00000000002080E4                 db  53h ; S
.data:00000000002080E5                 db  45h ; E
.data:00000000002080E6                 db  47h ; G
.data:00000000002080E7                 db  56h ; V
.data:00000000002080E8                 db    0
.data:00000000002080E9                 db    0
.data:00000000002080EA                 db    0
.data:00000000002080EB                 db    0
.data:00000000002080EC                 db    7
.data:00000000002080ED                 db    0
.data:00000000002080EE                 db    0
.data:00000000002080EF                 db    0
.data:00000000002080F0                 db  42h ; B
.data:00000000002080F1                 db  55h ; U
.data:00000000002080F2                 db  53h ; S
.data:00000000002080F3                 db    0
.data:00000000002080F4                 db    0
.data:00000000002080F5                 db    0
.data:00000000002080F6                 db    0
.data:00000000002080F7                 db    0
.data:00000000002080F8                 db  0Dh
.data:00000000002080F9                 db    0
.data:00000000002080FA                 db    0
.data:00000000002080FB                 db    0
.data:00000000002080FC                 db  50h ; P
.data:00000000002080FD                 db  49h ; I
.data:00000000002080FE                 db  50h ; P
.data:00000000002080FF                 db  45h ; E
.data:0000000000208100                 db    0
.data:0000000000208101                 db    0
.data:0000000000208102                 db    0
.data:0000000000208103                 db    0
.data:0000000000208104                 db  0Eh
.data:0000000000208105                 db    0
.data:0000000000208106                 db    0
.data:0000000000208107                 db    0
.data:0000000000208108                 db  41h ; A
.data:0000000000208109                 db  4Ch ; L
.data:000000000020810A                 db  52h ; R
.data:000000000020810B                 db  4Dh ; M
.data:000000000020810C                 db    0
.data:000000000020810D                 db    0
.data:000000000020810E                 db    0
.data:000000000020810F                 db    0
.data:0000000000208110                 db  0Fh
.data:0000000000208111                 db    0
.data:0000000000208112                 db    0
.data:0000000000208113                 db    0
.data:0000000000208114                 db  54h ; T
.data:0000000000208115                 db  45h ; E
.data:0000000000208116                 db  52h ; R
.data:0000000000208117                 db  4Dh ; M
.data:0000000000208118                 db    0
.data:0000000000208119                 db    0
.data:000000000020811A                 db    0
.data:000000000020811B                 db    0
.data:000000000020811C                 db  0Ah
.data:000000000020811D                 db    0
.data:000000000020811E                 db    0
.data:000000000020811F                 db    0
.data:0000000000208120                 db  55h ; U
.data:0000000000208121                 db  53h ; S
.data:0000000000208122                 db  52h ; R
.data:0000000000208123                 db  31h ; 1
.data:0000000000208124                 db    0
.data:0000000000208125                 db    0
.data:0000000000208126                 db    0
.data:0000000000208127                 db    0
.data:0000000000208128                 db  0Ch
.data:0000000000208129                 db    0
.data:000000000020812A                 db    0
.data:000000000020812B                 db    0
.data:000000000020812C                 db  55h ; U
.data:000000000020812D                 db  53h ; S
.data:000000000020812E                 db  52h ; R
.data:000000000020812F                 db  32h ; 2
.data:0000000000208130                 db    0
.data:0000000000208131                 db    0
.data:0000000000208132                 db    0
.data:0000000000208133                 db    0
.data:0000000000208134                 db  11h
.data:0000000000208135                 db    0
.data:0000000000208136                 db    0
.data:0000000000208137                 db    0
.data:0000000000208138                 db  43h ; C
.data:0000000000208139                 db  48h ; H
.data:000000000020813A                 db  4Ch ; L
.data:000000000020813B                 db  44h ; D
.data:000000000020813C                 db    0
.data:000000000020813D                 db    0
.data:000000000020813E                 db    0
.data:000000000020813F                 db    0
.data:0000000000208140                 db  17h
.data:0000000000208141                 db    0
.data:0000000000208142                 db    0
.data:0000000000208143                 db    0
.data:0000000000208144                 db  55h ; U
.data:0000000000208145                 db  52h ; R
.data:0000000000208146                 db  47h ; G
.data:0000000000208147                 db    0
.data:0000000000208148                 db    0
.data:0000000000208149                 db    0
.data:000000000020814A                 db    0
.data:000000000020814B                 db    0
.data:000000000020814C                 db  13h
.data:000000000020814D                 db    0
.data:000000000020814E                 db    0
.data:000000000020814F                 db    0
.data:0000000000208150                 db  53h ; S
.data:0000000000208151                 db  54h ; T
.data:0000000000208152                 db  4Fh ; O
.data:0000000000208153                 db  50h ; P
.data:0000000000208154                 db    0
.data:0000000000208155                 db    0
.data:0000000000208156                 db    0
.data:0000000000208157                 db    0
.data:0000000000208158                 db  14h
.data:0000000000208159                 db    0
.data:000000000020815A                 db    0
.data:000000000020815B                 db    0
.data:000000000020815C                 db  54h ; T
.data:000000000020815D                 db  53h ; S
.data:000000000020815E                 db  54h ; T
.data:000000000020815F                 db  50h ; P
.data:0000000000208160                 db    0
.data:0000000000208161                 db    0
.data:0000000000208162                 db    0
.data:0000000000208163                 db    0
.data:0000000000208164                 db  12h
.data:0000000000208165                 db    0
.data:0000000000208166                 db    0
.data:0000000000208167                 db    0
.data:0000000000208168                 db  43h ; C
.data:0000000000208169                 db  4Fh ; O
.data:000000000020816A                 db  4Eh ; N
.data:000000000020816B                 db  54h ; T
.data:000000000020816C                 db    0
.data:000000000020816D                 db    0
.data:000000000020816E                 db    0
.data:000000000020816F                 db    0
.data:0000000000208170                 db  15h
.data:0000000000208171                 db    0
.data:0000000000208172                 db    0
.data:0000000000208173                 db    0
.data:0000000000208174                 db  54h ; T
.data:0000000000208175                 db  54h ; T
.data:0000000000208176                 db  49h ; I
.data:0000000000208177                 db  4Eh ; N
.data:0000000000208178                 db    0
.data:0000000000208179                 db    0
.data:000000000020817A                 db    0
.data:000000000020817B                 db    0
.data:000000000020817C                 db  16h
.data:000000000020817D                 db    0
.data:000000000020817E                 db    0
.data:000000000020817F                 db    0
.data:0000000000208180                 db  54h ; T
.data:0000000000208181                 db  54h ; T
.data:0000000000208182                 db  4Fh ; O
.data:0000000000208183                 db  55h ; U
.data:0000000000208184                 db    0
.data:0000000000208185                 db    0
.data:0000000000208186                 db    0
.data:0000000000208187                 db    0
.data:0000000000208188                 db  1Fh
.data:0000000000208189                 db    0
.data:000000000020818A                 db    0
.data:000000000020818B                 db    0
.data:000000000020818C                 db  53h ; S
.data:000000000020818D                 db  59h ; Y
.data:000000000020818E                 db  53h ; S
.data:000000000020818F                 db    0
.data:0000000000208190                 db    0
.data:0000000000208191                 db    0
.data:0000000000208192                 db    0
.data:0000000000208193                 db    0
.data:0000000000208194                 db  1Dh
.data:0000000000208195                 db    0
.data:0000000000208196                 db    0
.data:0000000000208197                 db    0
.data:0000000000208198                 db  50h ; P
.data:0000000000208199                 db  4Fh ; O
.data:000000000020819A                 db  4Ch ; L
.data:000000000020819B                 db  4Ch ; L
.data:000000000020819C                 db    0
.data:000000000020819D                 db    0
.data:000000000020819E                 db    0
.data:000000000020819F                 db    0
.data:00000000002081A0                 db  1Ah
.data:00000000002081A1                 db    0
.data:00000000002081A2                 db    0
.data:00000000002081A3                 db    0
.data:00000000002081A4                 db  56h ; V
.data:00000000002081A5                 db  54h ; T
.data:00000000002081A6                 db  41h ; A
.data:00000000002081A7                 db  4Ch ; L
.data:00000000002081A8                 db  52h ; R
.data:00000000002081A9                 db  4Dh ; M
.data:00000000002081AA                 db    0
.data:00000000002081AB                 db    0
.data:00000000002081AC                 db  1Bh
.data:00000000002081AD                 db    0
.data:00000000002081AE                 db    0
.data:00000000002081AF                 db    0
.data:00000000002081B0                 db  50h ; P
.data:00000000002081B1                 db  52h ; R
.data:00000000002081B2                 db  4Fh ; O
.data:00000000002081B3                 db  46h ; F
.data:00000000002081B4                 db    0
.data:00000000002081B5                 db    0
.data:00000000002081B6                 db    0
.data:00000000002081B7                 db    0
.data:00000000002081B8                 db  18h
.data:00000000002081B9                 db    0
.data:00000000002081BA                 db    0
.data:00000000002081BB                 db    0
.data:00000000002081BC                 db  58h ; X
.data:00000000002081BD                 db  43h ; C
.data:00000000002081BE                 db  50h ; P
.data:00000000002081BF                 db  55h ; U
.data:00000000002081C0                 db    0
.data:00000000002081C1                 db    0
.data:00000000002081C2                 db    0
.data:00000000002081C3                 db    0
.data:00000000002081C4                 db  19h
.data:00000000002081C5                 db    0
.data:00000000002081C6                 db    0
.data:00000000002081C7                 db    0
.data:00000000002081C8                 db  58h ; X
.data:00000000002081C9                 db  46h ; F
.data:00000000002081CA                 db  53h ; S
.data:00000000002081CB                 db  5Ah ; Z
.data:00000000002081CC                 db    0
.data:00000000002081CD                 db    0
.data:00000000002081CE                 db    0
.data:00000000002081CF                 db    0
.data:00000000002081D0                 db    6
.data:00000000002081D1                 db    0
.data:00000000002081D2                 db    0
.data:00000000002081D3                 db    0
.data:00000000002081D4                 db  49h ; I
.data:00000000002081D5                 db  4Fh ; O
.data:00000000002081D6                 db  54h ; T
.data:00000000002081D7                 db    0
.data:00000000002081D8                 db    0
.data:00000000002081D9                 db    0
.data:00000000002081DA                 db    0
.data:00000000002081DB                 db    0
.data:00000000002081DC                 db  11h
.data:00000000002081DD                 db    0
.data:00000000002081DE                 db    0
.data:00000000002081DF                 db    0
.data:00000000002081E0                 db  43h ; C
.data:00000000002081E1                 db  4Ch ; L
.data:00000000002081E2                 db  44h ; D
.data:00000000002081E3                 db    0
.data:00000000002081E4                 db    0
.data:00000000002081E5                 db    0
.data:00000000002081E6                 db    0
.data:00000000002081E7                 db    0
.data:00000000002081E8                 db  1Eh
.data:00000000002081E9                 db    0
.data:00000000002081EA                 db    0
.data:00000000002081EB                 db    0
.data:00000000002081EC                 db  50h ; P
.data:00000000002081ED                 db  57h ; W
.data:00000000002081EE                 db  52h ; R
.data:00000000002081EF                 db    0
.data:00000000002081F0                 db    0
.data:00000000002081F1                 db    0
.data:00000000002081F2                 db    0
.data:00000000002081F3                 db    0
.data:00000000002081F4                 db  1Ch
.data:00000000002081F5                 db    0
.data:00000000002081F6                 db    0
.data:00000000002081F7                 db    0
.data:00000000002081F8                 db  57h ; W
.data:00000000002081F9                 db  49h ; I
.data:00000000002081FA                 db  4Eh ; N
.data:00000000002081FB                 db  43h ; C
.data:00000000002081FC                 db  48h ; H
.data:00000000002081FD                 db    0
.data:00000000002081FE                 db    0
.data:00000000002081FF                 db    0
.data:0000000000208200                 db  1Dh
.data:0000000000208201                 db    0
.data:0000000000208202                 db    0
.data:0000000000208203                 db    0
.data:0000000000208204                 db  49h ; I
.data:0000000000208205                 db  4Fh ; O
.data:0000000000208206                 db    0
.data:0000000000208207                 db    0
.data:0000000000208208                 db    0
.data:0000000000208209                 db    0
.data:000000000020820A                 db    0
.data:000000000020820B                 db    0
.data:000000000020820C                 db  10h
.data:000000000020820D                 db    0
.data:000000000020820E                 db    0
.data:000000000020820F                 db    0
.data:0000000000208210                 db  53h ; S
.data:0000000000208211                 db  54h ; T
.data:0000000000208212                 db  4Bh ; K
.data:0000000000208213                 db  46h ; F
.data:0000000000208214                 db  4Ch ; L
.data:0000000000208215                 db  54h ; T
.data:0000000000208216                 db    0
.data:0000000000208217                 db    0
.data:0000000000208218                 db    0
.data:0000000000208219                 db    0
.data:000000000020821A                 db    0
.data:000000000020821B                 db    0
.data:000000000020821C                 db  45h ; E
.data:000000000020821D                 db  58h ; X
.data:000000000020821E                 db  49h ; I
.data:000000000020821F                 db  54h ; T
.data:0000000000208220                 db    0
.data:0000000000208221                 db    0
.data:0000000000208222                 db    0
.data:0000000000208223                 db    0
.data:0000000000208223 _data           ends
.data:0000000000208223
LOAD:0000000000208224 ; ===========================================================================
LOAD:0000000000208224
LOAD:0000000000208224 ; Segment type: Pure data
LOAD:0000000000208224 ; Segment permissions: Read/Write
LOAD:0000000000208224 LOAD            segment byte public 'DATA' use64
LOAD:0000000000208224                 assume cs:LOAD
LOAD:0000000000208224                 ;org 208224h
LOAD:0000000000208224                 public __bss_start
LOAD:0000000000208224 __bss_start     db    ? ;               ; Alternative name is '__bss_start'
LOAD:0000000000208224                                         ; _edata
LOAD:0000000000208225                 db    ? ;
LOAD:0000000000208226                 db    ? ;
LOAD:0000000000208227                 db    ? ;
LOAD:0000000000208228                 public __TMC_END__
LOAD:0000000000208228 __TMC_END__     db    ? ;               ; DATA XREF: deregister_tm_clones↑o
LOAD:0000000000208228                                         ; deregister_tm_clones+8↑o ...
LOAD:0000000000208229                 db    ? ;
LOAD:000000000020822A                 db    ? ;
LOAD:000000000020822B                 db    ? ;
LOAD:000000000020822C                 db    ? ;
LOAD:000000000020822D                 db    ? ;
LOAD:000000000020822E                 db    ? ;
LOAD:000000000020822F                 db    ? ;
LOAD:0000000000208230                 db    ? ;
LOAD:0000000000208231                 db    ? ;
LOAD:0000000000208232                 db    ? ;
LOAD:0000000000208233                 db    ? ;
LOAD:0000000000208234                 db    ? ;
LOAD:0000000000208235                 db    ? ;
LOAD:0000000000208236                 db    ? ;
LOAD:0000000000208237                 db    ? ;
LOAD:0000000000208238                 db    ? ;
LOAD:0000000000208239                 db    ? ;
LOAD:000000000020823A                 db    ? ;
LOAD:000000000020823B                 db    ? ;
LOAD:000000000020823C                 db    ? ;
LOAD:000000000020823D                 db    ? ;
LOAD:000000000020823E                 db    ? ;
LOAD:000000000020823F                 db    ? ;
LOAD:000000000020823F LOAD            ends
LOAD:000000000020823F
.bss:0000000000208240 ; ===========================================================================
.bss:0000000000208240
.bss:0000000000208240 ; Segment type: Uninitialized
.bss:0000000000208240 ; Segment permissions: Read/Write
.bss:0000000000208240 _bss            segment align_32 public 'BSS' use64
.bss:0000000000208240                 assume cs:_bss
.bss:0000000000208240                 ;org 208240h
.bss:0000000000208240                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:0000000000208240                 public program_invocation_short_name@@GLIBC_2_2_5 ; weak
.bss:0000000000208240 program_invocation_short_name@@GLIBC_2_2_5 dq ?
.bss:0000000000208240                                         ; DATA XREF: LOAD:0000000000000838↑o
.bss:0000000000208240                                         ; LOAD:0000000000000880↑o ...
.bss:0000000000208240                                         ; Alternative name is '__progname'
.bss:0000000000208240                                         ; Copy of shared data
.bss:0000000000208248                 public stdout@@GLIBC_2_2_5
.bss:0000000000208248 ; FILE *stdout
.bss:0000000000208248 stdout@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000820↑o
.bss:0000000000208248                                         ; main+11D↑r ...
.bss:0000000000208248                                         ; Alternative name is 'stdout'
.bss:0000000000208248                                         ; Copy of shared data
.bss:0000000000208250                 public optind@@GLIBC_2_2_5
.bss:0000000000208250 optind@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:00000000000008B0↑o
.bss:0000000000208250                                         ; main:loc_1950↑r ...
.bss:0000000000208250                                         ; Alternative name is 'optind'
.bss:0000000000208250                                         ; Copy of shared data
.bss:0000000000208254                 align 8
.bss:0000000000208258                 public optarg@@GLIBC_2_2_5
.bss:0000000000208258 ; char *optarg
.bss:0000000000208258 optarg@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:00000000000008C8↑o
.bss:0000000000208258                                         ; main:loc_1928↑r ...
.bss:0000000000208258                                         ; Alternative name is 'optarg'
.bss:0000000000208258                                         ; Copy of shared data
.bss:0000000000208260                 public program_invocation_name@@GLIBC_2_2_5 ; weak
.bss:0000000000208260 program_invocation_name@@GLIBC_2_2_5 dq ?
.bss:0000000000208260                                         ; DATA XREF: LOAD:0000000000000850↑o
.bss:0000000000208260                                         ; LOAD:0000000000000868↑o ...
.bss:0000000000208260                                         ; Alternative name is '__progname_full@@GLIBC_2.2.5'
.bss:0000000000208260                                         ; Copy of shared data
.bss:0000000000208268                 align 20h
.bss:0000000000208280                 public stderr@@GLIBC_2_2_5
.bss:0000000000208280 ; FILE *stderr
.bss:0000000000208280 stderr@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000898↑o
.bss:0000000000208280                                         ; usage+3D↑r ...
.bss:0000000000208280                                         ; Alternative name is 'stderr'
.bss:0000000000208280                                         ; Copy of shared data
.bss:0000000000208288 completed_7697  db ?                    ; DATA XREF: __do_global_dtors_aux↑r
.bss:0000000000208288                                         ; __do_global_dtors_aux+28↑w
.bss:0000000000208289                 align 10h
.bss:0000000000208290 ignore_EPIPE    db ?                    ; DATA XREF: close_stdout_set_ignore_EPIPE↑w
.bss:0000000000208290                                         ; close_stdout+1B↑r
.bss:0000000000208291                 align 8
.bss:0000000000208298 file_name       dq ?                    ; DATA XREF: close_stdout_set_file_name↑w
.bss:0000000000208298                                         ; close_stdout+56↑r
.bss:00000000002082A0                 public program_name
.bss:00000000002082A0 program_name    dq ?                    ; DATA XREF: usage+14↑r
.bss:00000000002082A0                                         ; set_program_name:loc_25CD↑w
.bss:00000000002082A8                 align 20h
.bss:00000000002082C0 slot0           db    ? ;               ; DATA XREF: quotearg_n_options+FE↑o
.bss:00000000002082C0                                         ; quotearg_free+46↑o ...
.bss:00000000002082C1                 db    ? ;
.bss:00000000002082C2                 db    ? ;
.bss:00000000002082C3                 db    ? ;
.bss:00000000002082C4                 db    ? ;
.bss:00000000002082C5                 db    ? ;
.bss:00000000002082C6                 db    ? ;
.bss:00000000002082C7                 db    ? ;
.bss:00000000002082C8                 db    ? ;
.bss:00000000002082C9                 db    ? ;
.bss:00000000002082CA                 db    ? ;
.bss:00000000002082CB                 db    ? ;
.bss:00000000002082CC                 db    ? ;
.bss:00000000002082CD                 db    ? ;
.bss:00000000002082CE                 db    ? ;
.bss:00000000002082CF                 db    ? ;
.bss:00000000002082D0                 db    ? ;
.bss:00000000002082D1                 db    ? ;
.bss:00000000002082D2                 db    ? ;
.bss:00000000002082D3                 db    ? ;
.bss:00000000002082D4                 db    ? ;
.bss:00000000002082D5                 db    ? ;
.bss:00000000002082D6                 db    ? ;
.bss:00000000002082D7                 db    ? ;
.bss:00000000002082D8                 db    ? ;
.bss:00000000002082D9                 db    ? ;
.bss:00000000002082DA                 db    ? ;
.bss:00000000002082DB                 db    ? ;
.bss:00000000002082DC                 db    ? ;
.bss:00000000002082DD                 db    ? ;
.bss:00000000002082DE                 db    ? ;
.bss:00000000002082DF                 db    ? ;
.bss:00000000002082E0                 db    ? ;
.bss:00000000002082E1                 db    ? ;
.bss:00000000002082E2                 db    ? ;
.bss:00000000002082E3                 db    ? ;
.bss:00000000002082E4                 db    ? ;
.bss:00000000002082E5                 db    ? ;
.bss:00000000002082E6                 db    ? ;
.bss:00000000002082E7                 db    ? ;
.bss:00000000002082E8                 db    ? ;
.bss:00000000002082E9                 db    ? ;
.bss:00000000002082EA                 db    ? ;
.bss:00000000002082EB                 db    ? ;
.bss:00000000002082EC                 db    ? ;
.bss:00000000002082ED                 db    ? ;
.bss:00000000002082EE                 db    ? ;
.bss:00000000002082EF                 db    ? ;
.bss:00000000002082F0                 db    ? ;
.bss:00000000002082F1                 db    ? ;
.bss:00000000002082F2                 db    ? ;
.bss:00000000002082F3                 db    ? ;
.bss:00000000002082F4                 db    ? ;
.bss:00000000002082F5                 db    ? ;
.bss:00000000002082F6                 db    ? ;
.bss:00000000002082F7                 db    ? ;
.bss:00000000002082F8                 db    ? ;
.bss:00000000002082F9                 db    ? ;
.bss:00000000002082FA                 db    ? ;
.bss:00000000002082FB                 db    ? ;
.bss:00000000002082FC                 db    ? ;
.bss:00000000002082FD                 db    ? ;
.bss:00000000002082FE                 db    ? ;
.bss:00000000002082FF                 db    ? ;
.bss:0000000000208300                 db    ? ;
.bss:0000000000208301                 db    ? ;
.bss:0000000000208302                 db    ? ;
.bss:0000000000208303                 db    ? ;
.bss:0000000000208304                 db    ? ;
.bss:0000000000208305                 db    ? ;
.bss:0000000000208306                 db    ? ;
.bss:0000000000208307                 db    ? ;
.bss:0000000000208308                 db    ? ;
.bss:0000000000208309                 db    ? ;
.bss:000000000020830A                 db    ? ;
.bss:000000000020830B                 db    ? ;
.bss:000000000020830C                 db    ? ;
.bss:000000000020830D                 db    ? ;
.bss:000000000020830E                 db    ? ;
.bss:000000000020830F                 db    ? ;
.bss:0000000000208310                 db    ? ;
.bss:0000000000208311                 db    ? ;
.bss:0000000000208312                 db    ? ;
.bss:0000000000208313                 db    ? ;
.bss:0000000000208314                 db    ? ;
.bss:0000000000208315                 db    ? ;
.bss:0000000000208316                 db    ? ;
.bss:0000000000208317                 db    ? ;
.bss:0000000000208318                 db    ? ;
.bss:0000000000208319                 db    ? ;
.bss:000000000020831A                 db    ? ;
.bss:000000000020831B                 db    ? ;
.bss:000000000020831C                 db    ? ;
.bss:000000000020831D                 db    ? ;
.bss:000000000020831E                 db    ? ;
.bss:000000000020831F                 db    ? ;
.bss:0000000000208320                 db    ? ;
.bss:0000000000208321                 db    ? ;
.bss:0000000000208322                 db    ? ;
.bss:0000000000208323                 db    ? ;
.bss:0000000000208324                 db    ? ;
.bss:0000000000208325                 db    ? ;
.bss:0000000000208326                 db    ? ;
.bss:0000000000208327                 db    ? ;
.bss:0000000000208328                 db    ? ;
.bss:0000000000208329                 db    ? ;
.bss:000000000020832A                 db    ? ;
.bss:000000000020832B                 db    ? ;
.bss:000000000020832C                 db    ? ;
.bss:000000000020832D                 db    ? ;
.bss:000000000020832E                 db    ? ;
.bss:000000000020832F                 db    ? ;
.bss:0000000000208330                 db    ? ;
.bss:0000000000208331                 db    ? ;
.bss:0000000000208332                 db    ? ;
.bss:0000000000208333                 db    ? ;
.bss:0000000000208334                 db    ? ;
.bss:0000000000208335                 db    ? ;
.bss:0000000000208336                 db    ? ;
.bss:0000000000208337                 db    ? ;
.bss:0000000000208338                 db    ? ;
.bss:0000000000208339                 db    ? ;
.bss:000000000020833A                 db    ? ;
.bss:000000000020833B                 db    ? ;
.bss:000000000020833C                 db    ? ;
.bss:000000000020833D                 db    ? ;
.bss:000000000020833E                 db    ? ;
.bss:000000000020833F                 db    ? ;
.bss:0000000000208340                 db    ? ;
.bss:0000000000208341                 db    ? ;
.bss:0000000000208342                 db    ? ;
.bss:0000000000208343                 db    ? ;
.bss:0000000000208344                 db    ? ;
.bss:0000000000208345                 db    ? ;
.bss:0000000000208346                 db    ? ;
.bss:0000000000208347                 db    ? ;
.bss:0000000000208348                 db    ? ;
.bss:0000000000208349                 db    ? ;
.bss:000000000020834A                 db    ? ;
.bss:000000000020834B                 db    ? ;
.bss:000000000020834C                 db    ? ;
.bss:000000000020834D                 db    ? ;
.bss:000000000020834E                 db    ? ;
.bss:000000000020834F                 db    ? ;
.bss:0000000000208350                 db    ? ;
.bss:0000000000208351                 db    ? ;
.bss:0000000000208352                 db    ? ;
.bss:0000000000208353                 db    ? ;
.bss:0000000000208354                 db    ? ;
.bss:0000000000208355                 db    ? ;
.bss:0000000000208356                 db    ? ;
.bss:0000000000208357                 db    ? ;
.bss:0000000000208358                 db    ? ;
.bss:0000000000208359                 db    ? ;
.bss:000000000020835A                 db    ? ;
.bss:000000000020835B                 db    ? ;
.bss:000000000020835C                 db    ? ;
.bss:000000000020835D                 db    ? ;
.bss:000000000020835E                 db    ? ;
.bss:000000000020835F                 db    ? ;
.bss:0000000000208360                 db    ? ;
.bss:0000000000208361                 db    ? ;
.bss:0000000000208362                 db    ? ;
.bss:0000000000208363                 db    ? ;
.bss:0000000000208364                 db    ? ;
.bss:0000000000208365                 db    ? ;
.bss:0000000000208366                 db    ? ;
.bss:0000000000208367                 db    ? ;
.bss:0000000000208368                 db    ? ;
.bss:0000000000208369                 db    ? ;
.bss:000000000020836A                 db    ? ;
.bss:000000000020836B                 db    ? ;
.bss:000000000020836C                 db    ? ;
.bss:000000000020836D                 db    ? ;
.bss:000000000020836E                 db    ? ;
.bss:000000000020836F                 db    ? ;
.bss:0000000000208370                 db    ? ;
.bss:0000000000208371                 db    ? ;
.bss:0000000000208372                 db    ? ;
.bss:0000000000208373                 db    ? ;
.bss:0000000000208374                 db    ? ;
.bss:0000000000208375                 db    ? ;
.bss:0000000000208376                 db    ? ;
.bss:0000000000208377                 db    ? ;
.bss:0000000000208378                 db    ? ;
.bss:0000000000208379                 db    ? ;
.bss:000000000020837A                 db    ? ;
.bss:000000000020837B                 db    ? ;
.bss:000000000020837C                 db    ? ;
.bss:000000000020837D                 db    ? ;
.bss:000000000020837E                 db    ? ;
.bss:000000000020837F                 db    ? ;
.bss:0000000000208380                 db    ? ;
.bss:0000000000208381                 db    ? ;
.bss:0000000000208382                 db    ? ;
.bss:0000000000208383                 db    ? ;
.bss:0000000000208384                 db    ? ;
.bss:0000000000208385                 db    ? ;
.bss:0000000000208386                 db    ? ;
.bss:0000000000208387                 db    ? ;
.bss:0000000000208388                 db    ? ;
.bss:0000000000208389                 db    ? ;
.bss:000000000020838A                 db    ? ;
.bss:000000000020838B                 db    ? ;
.bss:000000000020838C                 db    ? ;
.bss:000000000020838D                 db    ? ;
.bss:000000000020838E                 db    ? ;
.bss:000000000020838F                 db    ? ;
.bss:0000000000208390                 db    ? ;
.bss:0000000000208391                 db    ? ;
.bss:0000000000208392                 db    ? ;
.bss:0000000000208393                 db    ? ;
.bss:0000000000208394                 db    ? ;
.bss:0000000000208395                 db    ? ;
.bss:0000000000208396                 db    ? ;
.bss:0000000000208397                 db    ? ;
.bss:0000000000208398                 db    ? ;
.bss:0000000000208399                 db    ? ;
.bss:000000000020839A                 db    ? ;
.bss:000000000020839B                 db    ? ;
.bss:000000000020839C                 db    ? ;
.bss:000000000020839D                 db    ? ;
.bss:000000000020839E                 db    ? ;
.bss:000000000020839F                 db    ? ;
.bss:00000000002083A0                 db    ? ;
.bss:00000000002083A1                 db    ? ;
.bss:00000000002083A2                 db    ? ;
.bss:00000000002083A3                 db    ? ;
.bss:00000000002083A4                 db    ? ;
.bss:00000000002083A5                 db    ? ;
.bss:00000000002083A6                 db    ? ;
.bss:00000000002083A7                 db    ? ;
.bss:00000000002083A8                 db    ? ;
.bss:00000000002083A9                 db    ? ;
.bss:00000000002083AA                 db    ? ;
.bss:00000000002083AB                 db    ? ;
.bss:00000000002083AC                 db    ? ;
.bss:00000000002083AD                 db    ? ;
.bss:00000000002083AE                 db    ? ;
.bss:00000000002083AF                 db    ? ;
.bss:00000000002083B0                 db    ? ;
.bss:00000000002083B1                 db    ? ;
.bss:00000000002083B2                 db    ? ;
.bss:00000000002083B3                 db    ? ;
.bss:00000000002083B4                 db    ? ;
.bss:00000000002083B5                 db    ? ;
.bss:00000000002083B6                 db    ? ;
.bss:00000000002083B7                 db    ? ;
.bss:00000000002083B8                 db    ? ;
.bss:00000000002083B9                 db    ? ;
.bss:00000000002083BA                 db    ? ;
.bss:00000000002083BB                 db    ? ;
.bss:00000000002083BC                 db    ? ;
.bss:00000000002083BD                 db    ? ;
.bss:00000000002083BE                 db    ? ;
.bss:00000000002083BF                 db    ? ;
.bss:00000000002083C0 default_quoting_options xmmword ?       ; DATA XREF: clone_quoting_options+12↑o
.bss:00000000002083C0                                         ; get_quoting_style↑o ...
.bss:00000000002083D0 xmmword_2083D0  xmmword ?               ; DATA XREF: quotearg_char_mem+41↑r
.bss:00000000002083D0                                         ; quotearg_n_custom_mem+39↑r
.bss:00000000002083E0 xmmword_2083E0  xmmword ?               ; DATA XREF: quotearg_char_mem+4E↑r
.bss:00000000002083E0                                         ; quotearg_n_custom_mem+46↑r
.bss:00000000002083F0 qword_2083F0    dq ?                    ; DATA XREF: quotearg_char_mem+16↑r
.bss:00000000002083F0                                         ; quotearg_n_custom_mem+7↑r
.bss:00000000002083F0 _bss            ends
.bss:00000000002083F0
.prgend:00000000002083F8 ; ===========================================================================
.prgend:00000000002083F8
.prgend:00000000002083F8 ; Segment type: Zero-length
.prgend:00000000002083F8 _prgend         segment byte public '' use64
.prgend:00000000002083F8 _end            label byte
.prgend:00000000002083F8 _prgend         ends
.prgend:00000000002083F8
extern:0000000000208400 ; ===========================================================================
extern:0000000000208400
extern:0000000000208400 ; Segment type: Externs
extern:0000000000208400 ; extern
extern:0000000000208400 ; void free(void *ptr)
extern:0000000000208400                 extrn free:near         ; CODE XREF: _free↑j
extern:0000000000208400                                         ; DATA XREF: .got:free_ptr↑o
extern:0000000000208408 ; void __noreturn abort(void)
extern:0000000000208408                 extrn abort:near        ; CODE XREF: _abort↑j
extern:0000000000208408                                         ; DATA XREF: .got:abort_ptr↑o
extern:0000000000208410 ; int *_errno_location(void)
extern:0000000000208410                 extrn __errno_location:near
extern:0000000000208410                                         ; CODE XREF: ___errno_location↑j
extern:0000000000208410                                         ; DATA XREF: .got:__errno_location_ptr↑o
extern:0000000000208418 ; int strncmp(const char *s1, const char *s2, size_t n)
extern:0000000000208418                 extrn strncmp:near      ; CODE XREF: _strncmp↑j
extern:0000000000208418                                         ; DATA XREF: .got:strncmp_ptr↑o
extern:0000000000208420 ; void __noreturn exit(int status)
extern:0000000000208420                 extrn _exit:near        ; CODE XREF: __exit↑j
extern:0000000000208420                                         ; DATA XREF: .got:_exit_ptr↑o
extern:0000000000208428 ; char *strcpy(char *dest, const char *src)
extern:0000000000208428                 extrn strcpy:near       ; CODE XREF: _strcpy↑j
extern:0000000000208428                                         ; DATA XREF: .got:strcpy_ptr↑o
extern:0000000000208430 ; size_t _fpending(FILE *fp)
extern:0000000000208430                 extrn __fpending:near   ; CODE XREF: ___fpending↑j
extern:0000000000208430                                         ; DATA XREF: .got:__fpending_ptr↑o
extern:0000000000208438 ; int puts(const char *s)
extern:0000000000208438                 extrn puts:near         ; CODE XREF: _puts↑j
extern:0000000000208438                                         ; DATA XREF: .got:puts_ptr↑o
extern:0000000000208440 ; char *textdomain(const char *domainname)
extern:0000000000208440                 extrn textdomain:near   ; CODE XREF: _textdomain↑j
extern:0000000000208440                                         ; DATA XREF: .got:textdomain_ptr↑o
extern:0000000000208448 ; __int64 _strtol_internal(const char *nptr, char **endptr, int base, int group)
extern:0000000000208448                 extrn __strtol_internal:near
extern:0000000000208448                                         ; CODE XREF: ___strtol_internal↑j
extern:0000000000208448                                         ; DATA XREF: .got:__strtol_internal_ptr↑o
extern:0000000000208450 ; int fclose(FILE *stream)
extern:0000000000208450                 extrn fclose:near       ; CODE XREF: _fclose↑j
extern:0000000000208450                                         ; DATA XREF: .got:fclose_ptr↑o
extern:0000000000208458 ; char *bindtextdomain(const char *domainname, const char *dirname)
extern:0000000000208458                 extrn bindtextdomain:near
extern:0000000000208458                                         ; CODE XREF: _bindtextdomain↑j
extern:0000000000208458                                         ; DATA XREF: .got:bindtextdomain_ptr↑o
extern:0000000000208460 ; char *dcgettext(const char *domainname, const char *msgid, int category)
extern:0000000000208460                 extrn dcgettext:near    ; CODE XREF: _dcgettext↑j
extern:0000000000208460                                         ; DATA XREF: .got:dcgettext_ptr↑o
extern:0000000000208468 ; size_t _ctype_get_mb_cur_max(void)
extern:0000000000208468                 extrn __ctype_get_mb_cur_max:near
extern:0000000000208468                                         ; CODE XREF: ___ctype_get_mb_cur_max↑j
extern:0000000000208468                                         ; DATA XREF: .got:__ctype_get_mb_cur_max_ptr↑o
extern:0000000000208470 ; size_t strlen(const char *s)
extern:0000000000208470                 extrn strlen:near       ; CODE XREF: _strlen↑j
extern:0000000000208470                                         ; DATA XREF: .got:strlen_ptr↑o
extern:0000000000208478                 extrn __stack_chk_fail:near
extern:0000000000208478                                         ; CODE XREF: ___stack_chk_fail↑j
extern:0000000000208478                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:0000000000208480 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
extern:0000000000208480                 extrn getopt_long:near  ; CODE XREF: _getopt_long↑j
extern:0000000000208480                                         ; DATA XREF: .got:getopt_long_ptr↑o
extern:0000000000208488 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
extern:0000000000208488                 extrn mbrtowc:near      ; CODE XREF: _mbrtowc↑j
extern:0000000000208488                                         ; DATA XREF: .got:mbrtowc_ptr↑o
extern:0000000000208490 ; char *strchr(const char *s, int c)
extern:0000000000208490                 extrn strchr:near       ; CODE XREF: _strchr↑j
extern:0000000000208490                                         ; DATA XREF: .got:strchr_ptr↑o
extern:0000000000208498 ; char *strrchr(const char *s, int c)
extern:0000000000208498                 extrn strrchr:near      ; CODE XREF: _strrchr↑j
extern:0000000000208498                                         ; DATA XREF: .got:strrchr_ptr↑o
extern:00000000002084A0 ; __off_t lseek(int fd, __off_t offset, int whence)
extern:00000000002084A0                 extrn lseek:near        ; CODE XREF: _lseek↑j
extern:00000000002084A0                                         ; DATA XREF: .got:lseek_ptr↑o
extern:00000000002084A8 ; void *memset(void *s, int c, size_t n)
extern:00000000002084A8                 extrn memset:near       ; CODE XREF: _memset↑j
extern:00000000002084A8                                         ; DATA XREF: .got:memset_ptr↑o
extern:00000000002084B0 ; int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:00000000002084B0                 extrn __libc_start_main:near
extern:00000000002084B0                                         ; CODE XREF: start+24↑p
extern:00000000002084B0                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:00000000002084B8 ; int memcmp(const void *s1, const void *s2, size_t n)
extern:00000000002084B8                 extrn memcmp:near       ; CODE XREF: _memcmp↑j
extern:00000000002084B8                                         ; DATA XREF: .got:memcmp_ptr↑o
extern:00000000002084C0 ; int fputs_unlocked(const char *s, FILE *stream)
extern:00000000002084C0                 extrn fputs_unlocked:near
extern:00000000002084C0                                         ; CODE XREF: _fputs_unlocked↑j
extern:00000000002084C0                                         ; DATA XREF: .got:fputs_unlocked_ptr↑o
extern:00000000002084C8 ; void *calloc(size_t nmemb, size_t size)
extern:00000000002084C8                 extrn calloc:near       ; CODE XREF: _calloc↑j
extern:00000000002084C8                                         ; DATA XREF: .got:calloc_ptr↑o
extern:00000000002084D0 ; int strcmp(const char *s1, const char *s2)
extern:00000000002084D0                 extrn strcmp:near       ; CODE XREF: _strcmp↑j
extern:00000000002084D0                                         ; DATA XREF: .got:strcmp_ptr↑o
extern:00000000002084D8 ; __int64 strtol(const char *nptr, char **endptr, int base)
extern:00000000002084D8                 extrn strtol:near       ; CODE XREF: _strtol↑j
extern:00000000002084D8                                         ; DATA XREF: .got:strtol_ptr↑o
extern:00000000002084E0 ; void *memcpy(void *dest, const void *src, size_t n)
extern:00000000002084E0                 extrn memcpy:near       ; CODE XREF: _memcpy↑j
extern:00000000002084E0                                         ; DATA XREF: .got:memcpy_ptr↑o
extern:00000000002084E8 ; int kill(__pid_t pid, int sig)
extern:00000000002084E8                 extrn kill:near         ; CODE XREF: _kill↑j
extern:00000000002084E8                                         ; DATA XREF: .got:kill_ptr↑o
extern:00000000002084F0 ; int fileno(FILE *stream)
extern:00000000002084F0                 extrn fileno:near       ; CODE XREF: _fileno↑j
extern:00000000002084F0                                         ; DATA XREF: .got:fileno_ptr↑o
extern:00000000002084F8 ; void *malloc(size_t size)
extern:00000000002084F8                 extrn malloc:near       ; CODE XREF: _malloc↑j
extern:00000000002084F8                                         ; DATA XREF: .got:malloc_ptr↑o
extern:0000000000208500 ; int fflush(FILE *stream)
extern:0000000000208500                 extrn fflush:near       ; CODE XREF: _fflush↑j
extern:0000000000208500                                         ; DATA XREF: .got:fflush_ptr↑o
extern:0000000000208508 ; char *nl_langinfo(nl_item item)
extern:0000000000208508                 extrn nl_langinfo:near  ; CODE XREF: _nl_langinfo↑j
extern:0000000000208508                                         ; DATA XREF: .got:nl_langinfo_ptr↑o
extern:0000000000208510 ; int _freading(FILE *fp)
extern:0000000000208510                 extrn __freading:near   ; CODE XREF: ___freading↑j
extern:0000000000208510                                         ; DATA XREF: .got:__freading_ptr↑o
extern:0000000000208518 ; char *strsignal(int sig)
extern:0000000000208518                 extrn strsignal:near    ; CODE XREF: _strsignal↑j
extern:0000000000208518                                         ; DATA XREF: .got:strsignal_ptr↑o
extern:0000000000208520 ; void *realloc(void *ptr, size_t size)
extern:0000000000208520                 extrn realloc:near      ; CODE XREF: _realloc↑j
extern:0000000000208520                                         ; DATA XREF: .got:realloc_ptr↑o
extern:0000000000208528 ; char *setlocale(int category, const char *locale)
extern:0000000000208528                 extrn setlocale:near    ; CODE XREF: _setlocale↑j
extern:0000000000208528                                         ; DATA XREF: .got:setlocale_ptr↑o
extern:0000000000208530                 extrn __printf_chk:near ; CODE XREF: ___printf_chk↑j
extern:0000000000208530                                         ; DATA XREF: .got:__printf_chk_ptr↑o
extern:0000000000208538 ; void error(int status, int errnum, const char *format, ...)
extern:0000000000208538                 extrn error:near        ; CODE XREF: _error↑j
extern:0000000000208538                                         ; DATA XREF: .got:error_ptr↑o
extern:0000000000208540 ; int fseeko(FILE *stream, __off_t off, int whence)
extern:0000000000208540                 extrn fseeko:near       ; CODE XREF: _fseeko↑j
extern:0000000000208540                                         ; DATA XREF: .got:fseeko_ptr↑o
extern:0000000000208548 ; int __fastcall _cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
extern:0000000000208548                 extrn __cxa_atexit:near ; CODE XREF: ___cxa_atexit↑j
extern:0000000000208548                                         ; DATA XREF: .got:__cxa_atexit_ptr↑o
extern:0000000000208550 ; int _libc_current_sigrtmin(void)
extern:0000000000208550                 extrn __libc_current_sigrtmin:near
extern:0000000000208550                                         ; CODE XREF: ___libc_current_sigrtmin↑j
extern:0000000000208550                                         ; DATA XREF: .got:__libc_current_sigrtmin_ptr↑o
extern:0000000000208558 ; void __noreturn exit(int status)
extern:0000000000208558                 extrn exit:near         ; CODE XREF: _exit↑j
extern:0000000000208558                                         ; DATA XREF: .got:exit_ptr↑o
extern:0000000000208560 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
extern:0000000000208560                 extrn fwrite:near       ; CODE XREF: _fwrite↑j
extern:0000000000208560                                         ; DATA XREF: .got:fwrite_ptr↑o
extern:0000000000208568                 extrn __fprintf_chk:near
extern:0000000000208568                                         ; CODE XREF: ___fprintf_chk↑j
extern:0000000000208568                                         ; DATA XREF: .got:__fprintf_chk_ptr↑o
extern:0000000000208570 ; int _libc_current_sigrtmax(void)
extern:0000000000208570                 extrn __libc_current_sigrtmax:near
extern:0000000000208570                                         ; CODE XREF: ___libc_current_sigrtmax↑j
extern:0000000000208570                                         ; DATA XREF: .got:__libc_current_sigrtmax_ptr↑o
extern:0000000000208578 ; int mbsinit(const mbstate_t *ps)
extern:0000000000208578                 extrn mbsinit:near      ; CODE XREF: _mbsinit↑j
extern:0000000000208578                                         ; DATA XREF: .got:mbsinit_ptr↑o
extern:0000000000208580 ; int iswprint(wint_t wc)
extern:0000000000208580                 extrn iswprint:near     ; CODE XREF: _iswprint↑j
extern:0000000000208580                                         ; DATA XREF: .got:iswprint_ptr↑o
extern:0000000000208588 ; int __fastcall __cxa_finalize(void *)
extern:0000000000208588                 extrn __imp___cxa_finalize:near ; weak
extern:0000000000208588                                         ; CODE XREF: __cxa_finalize↑j
extern:0000000000208588                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:0000000000208590 ; const unsigned __int16 **_ctype_b_loc(void)
extern:0000000000208590                 extrn __ctype_b_loc:near
extern:0000000000208590                                         ; CODE XREF: ___ctype_b_loc↑j
extern:0000000000208590                                         ; DATA XREF: .got:__ctype_b_loc_ptr↑o
extern:0000000000208598                 extrn __sprintf_chk:near
extern:0000000000208598                                         ; CODE XREF: ___sprintf_chk↑j
extern:0000000000208598                                         ; DATA XREF: .got:__sprintf_chk_ptr↑o
extern:00000000002085A0                 extrn _ITM_deregisterTMCloneTable ; weak
extern:00000000002085A0                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:00000000002085A8                 extrn __gmon_start__:near ; weak
extern:00000000002085A8                                         ; CODE XREF: _init_proc+10↑p
extern:00000000002085A8                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:00000000002085B0                 extrn _ITM_registerTMCloneTable ; weak
extern:00000000002085B0                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:00000000002085B0
extern:00000000002085B0
extern:00000000002085B0                 end start
