LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                      License info: 48-357D-7BC4-C6                      |
LOAD:0000000000000000 ; |                              Virginia Tech                              |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : E6E6EE39CA9DA03C8785D1753FC425FF35D69ACB2AE83C636CA9437E1946176F
LOAD:0000000000000000 ; Input MD5    : D82906F8C24E9CE352D346E596C7CD89
LOAD:0000000000000000 ; Input CRC32  : CCF1AE6C
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/nl
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'nl.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000 ; Source File : 'version.c'
LOAD:0000000000000000 ; Source File : 'closeout.c'
LOAD:0000000000000000 ; Source File : 'exitfail.c'
LOAD:0000000000000000 ; Source File : 'fadvise.c'
LOAD:0000000000000000 ; Source File : 'linebuffer.c'
LOAD:0000000000000000 ; Source File : 'progname.c'
LOAD:0000000000000000 ; Source File : 'quotearg.c'
LOAD:0000000000000000 ; Source File : 'version-etc.c'
LOAD:0000000000000000 ; Source File : 'version-etc-fsf.c'
LOAD:0000000000000000 ; Source File : 'xmalloc.c'
LOAD:0000000000000000 ; Source File : 'xalloc-die.c'
LOAD:0000000000000000 ; Source File : 'xdectoimax.c'
LOAD:0000000000000000 ; Source File : 'xstrtoimax.c'
LOAD:0000000000000000 ; Source File : 'fclose.c'
LOAD:0000000000000000 ; Source File : 'fflush.c'
LOAD:0000000000000000 ; Source File : 'fseeko.c'
LOAD:0000000000000000 ; Source File : 'mbrtowc.c'
LOAD:0000000000000000 ; Source File : 'regex.c'
LOAD:0000000000000000 ; Source File : 'close-stream.c'
LOAD:0000000000000000 ; Source File : 'hard-locale.c'
LOAD:0000000000000000 ; Source File : 'localcharset.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure code
LOAD:0000000000000000 ; Segment permissions: Read/Execute
LOAD:0000000000000000 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000002F8↓o
LOAD:0000000000000000                                         ; LOAD:0000000000000310↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset start         ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 79B00h               ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 9                    ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 25h                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 24h                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 1F8h                 ; Size in file image
LOAD:0000000000000068                 dq 1F8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 238h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 238h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 5                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 188C0h               ; Size in file image
LOAD:00000000000000D8                 dq 188C0h               ; Size in memory image
LOAD:00000000000000E0                 dq 200000h              ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 6                    ; Flags
LOAD:00000000000000F0                 dq 189B0h               ; File offset
LOAD:00000000000000F8                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000100 qword_100       dq 2189B0h              ; DATA XREF: .data:slotvec0↓o
LOAD:0000000000000100                                         ; Physical address
LOAD:0000000000000108                 dq 730h                 ; Size in file image
LOAD:0000000000000110                 dq 0D30h                ; Size in memory image
LOAD:0000000000000118                 dq 200000h              ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000124                 dd 6                    ; Flags
LOAD:0000000000000128                 dq 18BD8h               ; File offset
LOAD:0000000000000130                 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000000138                 dq 218BD8h              ; Physical address
LOAD:0000000000000140                 dq 1F0h                 ; Size in file image
LOAD:0000000000000148                 dq 1F0h                 ; Size in memory image
LOAD:0000000000000150                 dq 8                    ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 4                    ; Type: NOTE
LOAD:000000000000015C                 dd 4                    ; Flags
LOAD:0000000000000160                 dq 254h                 ; File offset
LOAD:0000000000000168                 dq offset dword_254     ; Virtual address
LOAD:0000000000000170                 dq 254h                 ; Physical address
LOAD:0000000000000178                 dq 44h                  ; Size in file image
LOAD:0000000000000180                 dq 44h                  ; Size in memory image
LOAD:0000000000000188                 dq 4                    ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000194                 dd 4                    ; Flags
LOAD:0000000000000198                 dq 160C0h               ; File offset
LOAD:00000000000001A0                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000000001A8                 dq 160C0h               ; Physical address
LOAD:00000000000001B0                 dq 574h                 ; Size in file image
LOAD:00000000000001B8                 dq 574h                 ; Size in memory image
LOAD:00000000000001C0                 dq 4                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000001CC                 dd 6                    ; Flags
LOAD:00000000000001D0                 dq 0                    ; File offset
LOAD:00000000000001D8                 dq 0                    ; Virtual address
LOAD:00000000000001E0                 dq 0                    ; Physical address
LOAD:00000000000001E8                 dq 0                    ; Size in file image
LOAD:00000000000001F0                 dq 0                    ; Size in memory image
LOAD:00000000000001F8                 dq 10h                  ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 6474E552h            ; Type: RO-AFTER
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 189B0h               ; File offset
LOAD:0000000000000210                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000218                 dq 2189B0h              ; Physical address
LOAD:0000000000000220                 dq 650h                 ; Size in file image
LOAD:0000000000000228                 dq 650h                 ; Size in memory image
LOAD:0000000000000230                 dq 1                    ; Alignment
LOAD:0000000000000238 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000238                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000254 ; ELF Note Entry
LOAD:0000000000000254 dword_254       dd 4                    ; DATA XREF: LOAD:0000000000000168↑o
LOAD:0000000000000254                                         ; Name Size
LOAD:0000000000000258                 dd 10h                  ; Desc Size
LOAD:000000000000025C                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000260 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000264                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:0000000000000274 ; ELF Note Entry
LOAD:0000000000000274                 dd 4                    ; Name Size
LOAD:0000000000000278                 dd 14h                  ; Desc Size
LOAD:000000000000027C                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000280 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000284                 db 74h, 0FEh, 99h, 0DEh, 28h, 0C5h, 5Eh, 0A5h, 0CEh, 85h ; Desc
LOAD:0000000000000284                 db 60h, 6Ch, 93h, 56h, 0C7h, 4Ch, 3Fh, 54h, 0A7h, 0BCh
LOAD:0000000000000298 ; ELF GNU Hash Table
LOAD:0000000000000298 elf_gnu_hash_nbuckets dd 3
LOAD:000000000000029C elf_gnu_hash_symbias dd 43h
LOAD:00000000000002A0 elf_gnu_hash_bitmask_nwords dd 1
LOAD:00000000000002A4 elf_gnu_hash_shift dd 6
LOAD:00000000000002A8 elf_gnu_hash_indexes dq 121C01A000614D04h
LOAD:00000000000002B0 elf_gnu_hash_bucket dd 43h, 44h, 4Ah
LOAD:00000000000002BC elf_gnu_hash_chain dd 1C8C1D29h, 9E7650BCh, 10615566h, 9789A096h, 72632CCEh
LOAD:00000000000002BC                 dd 0F54162E4h, 1C8BF239h, 12F7C432h, 12F7A2B3h
LOAD:00000000000002E0 ; ELF Symbol Table
LOAD:00000000000002E0                 Elf64_Sym <0>
LOAD:00000000000002F8                 Elf64_Sym <offset aCtypeToupperLo - offset byte_A00, 12h, 0, 0, \ ; "__ctype_toupper_loc"
LOAD:00000000000002F8                            offset dword_0, 0>
LOAD:0000000000000310                 Elf64_Sym <offset aUflow - offset byte_A00, 12h, 0, 0, offset dword_0,\ ; "__uflow"
LOAD:0000000000000310                            0>
LOAD:0000000000000328                 Elf64_Sym <offset aFree - offset byte_A00, 12h, 0, 0, offset dword_0, \ ; "free"
LOAD:0000000000000328                            0>
LOAD:0000000000000340                 Elf64_Sym <offset aAbort - offset byte_A00, 12h, 0, 0, offset dword_0,\ ; "abort"
LOAD:0000000000000340                            0>
LOAD:0000000000000358                 Elf64_Sym <offset aErrnoLocation - offset byte_A00, 12h, 0, 0, \ ; "__errno_location"
LOAD:0000000000000358                            offset dword_0, 0>
LOAD:0000000000000370                 Elf64_Sym <offset aStrncmp - offset byte_A00, 12h, 0, 0, \ ; "strncmp"
LOAD:0000000000000370                            offset dword_0, 0>
LOAD:0000000000000388                 Elf64_Sym <offset aItmDeregistert - offset byte_A00, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:0000000000000388                            offset dword_0, 0>
LOAD:00000000000003A0                 Elf64_Sym <offset aExit - offset byte_A00, 12h, 0, 0, offset dword_0, \ ; "_exit"
LOAD:00000000000003A0                            0>
LOAD:00000000000003B8                 Elf64_Sym <offset aStrcpy - offset byte_A00, 12h, 0, 0, \ ; "strcpy"
LOAD:00000000000003B8                            offset dword_0, 0>
LOAD:00000000000003D0                 Elf64_Sym <offset aFpending - offset byte_A00, 12h, 0, 0, \ ; "__fpending"
LOAD:00000000000003D0                            offset dword_0, 0>
LOAD:00000000000003E8                 Elf64_Sym <offset aClearerrUnlock - offset byte_A00, 12h, 0, 0, \ ; "clearerr_unlocked"
LOAD:00000000000003E8                            offset dword_0, 0>
LOAD:0000000000000400                 Elf64_Sym <offset aBindtextdomain+4 - offset byte_A00, 12h, 0, 0, \ ; "textdomain"
LOAD:0000000000000400                            offset dword_0, 0>
LOAD:0000000000000418                 Elf64_Sym <offset aStrtolInternal - offset byte_A00, 12h, 0, 0, \ ; "__strtol_internal"
LOAD:0000000000000418                            offset dword_0, 0>
LOAD:0000000000000430                 Elf64_Sym <offset aIswctype - offset byte_A00, 12h, 0, 0, \ ; "iswctype"
LOAD:0000000000000430                            offset dword_0, 0>
LOAD:0000000000000448                 Elf64_Sym <offset aFclose - offset byte_A00, 12h, 0, 0, \ ; "fclose"
LOAD:0000000000000448                            offset dword_0, 0>
LOAD:0000000000000460                 Elf64_Sym <offset aBindtextdomain - offset byte_A00, 12h, 0, 0, \ ; "bindtextdomain"
LOAD:0000000000000460                            offset dword_0, 0>
LOAD:0000000000000478                 Elf64_Sym <offset aStpcpy - offset byte_A00, 12h, 0, 0, \ ; "stpcpy"
LOAD:0000000000000478                            offset dword_0, 0>
LOAD:0000000000000490                 Elf64_Sym <offset aDcgettext - offset byte_A00, 12h, 0, 0, \ ; "dcgettext"
LOAD:0000000000000490                            offset dword_0, 0>
LOAD:00000000000004A8                 Elf64_Sym <offset aCtypeGetMbCurM - offset byte_A00, 12h, 0, 0, \ ; "__ctype_get_mb_cur_max"
LOAD:00000000000004A8                            offset dword_0, 0>
LOAD:00000000000004C0                 Elf64_Sym <offset aStrlen - offset byte_A00, 12h, 0, 0, \ ; "strlen"
LOAD:00000000000004C0                            offset dword_0, 0>
LOAD:00000000000004D8                 Elf64_Sym <offset aStackChkFail - offset byte_A00, 12h, 0, 0, \ ; "__stack_chk_fail"
LOAD:00000000000004D8                            offset dword_0, 0>
LOAD:00000000000004F0                 Elf64_Sym <offset aGetoptLong - offset byte_A00, 12h, 0, 0, \ ; "getopt_long"
LOAD:00000000000004F0                            offset dword_0, 0>
LOAD:0000000000000508                 Elf64_Sym <offset aMbrtowc - offset byte_A00, 12h, 0, 0, \ ; "mbrtowc"
LOAD:0000000000000508                            offset dword_0, 0>
LOAD:0000000000000520                 Elf64_Sym <offset aStrchr - offset byte_A00, 12h, 0, 0, \ ; "strchr"
LOAD:0000000000000520                            offset dword_0, 0>
LOAD:0000000000000538                 Elf64_Sym <offset aOverflow - offset byte_A00, 12h, 0, 0, \ ; "__overflow"
LOAD:0000000000000538                            offset dword_0, 0>
LOAD:0000000000000550                 Elf64_Sym <offset aStrrchr - offset byte_A00, 12h, 0, 0, \ ; "strrchr"
LOAD:0000000000000550                            offset dword_0, 0>
LOAD:0000000000000568                 Elf64_Sym <offset aLseek - offset byte_A00, 12h, 0, 0, offset dword_0,\ ; "lseek"
LOAD:0000000000000568                            0>
LOAD:0000000000000580                 Elf64_Sym <offset aAssertFail - offset byte_A00, 12h, 0, 0, \ ; "__assert_fail"
LOAD:0000000000000580                            offset dword_0, 0>
LOAD:0000000000000598                 Elf64_Sym <offset aMemset - offset byte_A00, 12h, 0, 0, \ ; "memset"
LOAD:0000000000000598                            offset dword_0, 0>
LOAD:00000000000005B0                 Elf64_Sym <offset aPosixFadvise - offset byte_A00, 12h, 0, 0, \ ; "posix_fadvise"
LOAD:00000000000005B0                            offset dword_0, 0>
LOAD:00000000000005C8                 Elf64_Sym <offset aLibcStartMain - offset byte_A00, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:00000000000005C8                            offset dword_0, 0>
LOAD:00000000000005E0                 Elf64_Sym <offset aMemcmp - offset byte_A00, 12h, 0, 0, \ ; "memcmp"
LOAD:00000000000005E0                            offset dword_0, 0>
LOAD:00000000000005F8                 Elf64_Sym <offset aIswctype+2 - offset byte_A00, 12h, 0, 0, \ ; "wctype"
LOAD:00000000000005F8                            offset dword_0, 0>
LOAD:0000000000000610                 Elf64_Sym <offset aFputsUnlocked - offset byte_A00, 12h, 0, 0, \ ; "fputs_unlocked"
LOAD:0000000000000610                            offset dword_0, 0>
LOAD:0000000000000628                 Elf64_Sym <offset aCalloc - offset byte_A00, 12h, 0, 0, \ ; "calloc"
LOAD:0000000000000628                            offset dword_0, 0>
LOAD:0000000000000640                 Elf64_Sym <offset aStrcmp - offset byte_A00, 12h, 0, 0, \ ; "strcmp"
LOAD:0000000000000640                            offset dword_0, 0>
LOAD:0000000000000658                 Elf64_Sym <offset aGmonStart - offset byte_A00, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:0000000000000658                            offset dword_0, 0>
LOAD:0000000000000670                 Elf64_Sym <offset aMemcpy - offset byte_A00, 12h, 0, 0, \ ; "memcpy"
LOAD:0000000000000670                            offset dword_0, 0>
LOAD:0000000000000688                 Elf64_Sym <offset aFileno - offset byte_A00, 12h, 0, 0, \ ; "fileno"
LOAD:0000000000000688                            offset dword_0, 0>
LOAD:00000000000006A0                 Elf64_Sym <offset aIswalnum - offset byte_A00, 12h, 0, 0, \ ; "iswalnum"
LOAD:00000000000006A0                            offset dword_0, 0>
LOAD:00000000000006B8                 Elf64_Sym <offset aMalloc - offset byte_A00, 12h, 0, 0, \ ; "malloc"
LOAD:00000000000006B8                            offset dword_0, 0>
LOAD:00000000000006D0                 Elf64_Sym <offset aWcrtomb - offset byte_A00, 12h, 0, 0, \ ; "wcrtomb"
LOAD:00000000000006D0                            offset dword_0, 0>
LOAD:00000000000006E8                 Elf64_Sym <offset aFflush - offset byte_A00, 12h, 0, 0, \ ; "fflush"
LOAD:00000000000006E8                            offset dword_0, 0>
LOAD:0000000000000700                 Elf64_Sym <offset aNlLanginfo - offset byte_A00, 12h, 0, 0, \ ; "nl_langinfo"
LOAD:0000000000000700                            offset dword_0, 0>
LOAD:0000000000000718                 Elf64_Sym <offset aFreading - offset byte_A00, 12h, 0, 0, \ ; "__freading"
LOAD:0000000000000718                            offset dword_0, 0>
LOAD:0000000000000730                 Elf64_Sym <offset aFwriteUnlocked - offset byte_A00, 12h, 0, 0, \ ; "fwrite_unlocked"
LOAD:0000000000000730                            offset dword_0, 0>
LOAD:0000000000000748                 Elf64_Sym <offset aRealloc - offset byte_A00, 12h, 0, 0, \ ; "realloc"
LOAD:0000000000000748                            offset dword_0, 0>
LOAD:0000000000000760                 Elf64_Sym <offset aSetlocale - offset byte_A00, 12h, 0, 0, \ ; "setlocale"
LOAD:0000000000000760                            offset dword_0, 0>
LOAD:0000000000000778                 Elf64_Sym <offset aPrintfChk - offset byte_A00, 12h, 0, 0, \ ; "__printf_chk"
LOAD:0000000000000778                            offset dword_0, 0>
LOAD:0000000000000790                 Elf64_Sym <offset aBtowc - offset byte_A00, 12h, 0, 0, offset dword_0,\ ; "btowc"
LOAD:0000000000000790                            0>
LOAD:00000000000007A8                 Elf64_Sym <offset aMemmove - offset byte_A00, 12h, 0, 0, \ ; "memmove"
LOAD:00000000000007A8                            offset dword_0, 0>
LOAD:00000000000007C0                 Elf64_Sym <offset aError - offset byte_A00, 12h, 0, 0, offset dword_0,\ ; "error"
LOAD:00000000000007C0                            0>
LOAD:00000000000007D8                 Elf64_Sym <offset aFseeko - offset byte_A00, 12h, 0, 0, \ ; "fseeko"
LOAD:00000000000007D8                            offset dword_0, 0>
LOAD:00000000000007F0                 Elf64_Sym <offset aFopen - offset byte_A00, 12h, 0, 0, offset dword_0,\ ; "fopen"
LOAD:00000000000007F0                            0>
LOAD:0000000000000808                 Elf64_Sym <offset aTowlower - offset byte_A00, 12h, 0, 0, \ ; "towlower"
LOAD:0000000000000808                            offset dword_0, 0>
LOAD:0000000000000820                 Elf64_Sym <offset aTowupper - offset byte_A00, 12h, 0, 0, \ ; "towupper"
LOAD:0000000000000820                            offset dword_0, 0>
LOAD:0000000000000838                 Elf64_Sym <offset aCxaAtexit - offset byte_A00, 12h, 0, 0, \ ; "__cxa_atexit"
LOAD:0000000000000838                            offset dword_0, 0>
LOAD:0000000000000850                 Elf64_Sym <offset aExit+1 - offset byte_A00, 12h, 0, 0, \ ; "exit"
LOAD:0000000000000850                            offset dword_0, 0>
LOAD:0000000000000868                 Elf64_Sym <offset aFwrite - offset byte_A00, 12h, 0, 0, \ ; "fwrite"
LOAD:0000000000000868                            offset dword_0, 0>
LOAD:0000000000000880                 Elf64_Sym <offset aFprintfChk - offset byte_A00, 12h, 0, 0, \ ; "__fprintf_chk"
LOAD:0000000000000880                            offset dword_0, 0>
LOAD:0000000000000898                 Elf64_Sym <offset aItmRegistertmc - offset byte_A00, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:0000000000000898                            offset dword_0, 0>
LOAD:00000000000008B0                 Elf64_Sym <offset aMbsinit - offset byte_A00, 12h, 0, 0, \ ; "mbsinit"
LOAD:00000000000008B0                            offset dword_0, 0>
LOAD:00000000000008C8                 Elf64_Sym <offset aIswprint - offset byte_A00, 12h, 0, 0, \ ; "iswprint"
LOAD:00000000000008C8                            offset dword_0, 0>
LOAD:00000000000008E0                 Elf64_Sym <offset aCxaFinalize - offset byte_A00, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:00000000000008E0                            offset dword_0, 0>
LOAD:00000000000008F8                 Elf64_Sym <offset aCtypeTolowerLo - offset byte_A00, 12h, 0, 0, \ ; "__ctype_tolower_loc"
LOAD:00000000000008F8                            offset dword_0, 0>
LOAD:0000000000000910                 Elf64_Sym <offset aCtypeBLoc - offset byte_A00, 12h, 0, 0, \ ; "__ctype_b_loc"
LOAD:0000000000000910                            offset dword_0, 0>
LOAD:0000000000000928                 Elf64_Sym <offset aStdout - offset byte_A00, 11h, 0, 19h, \ ; "stdout"
LOAD:0000000000000928                            offset stdout@@GLIBC_2_2_5, 8>
LOAD:0000000000000940                 Elf64_Sym <offset aProgname - offset byte_A00, 11h, 0, 19h, \ ; "__progname"
LOAD:0000000000000940                            offset __bss_start, 8>
LOAD:0000000000000958                 Elf64_Sym <offset aStdin - offset byte_A00, 11h, 0, 19h, \ ; "stdin"
LOAD:0000000000000958                            offset stdin@@GLIBC_2_2_5, 8>
LOAD:0000000000000970                 Elf64_Sym <offset aProgramInvocat - offset byte_A00, 21h, 0, 19h, \ ; "program_invocation_name"
LOAD:0000000000000970                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000988                 Elf64_Sym <offset aPrognameFull - offset byte_A00, 11h, 0, 19h, \ ; "__progname_full"
LOAD:0000000000000988                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:00000000000009A0                 Elf64_Sym <offset aProgramInvocat_0 - offset byte_A00, 21h, 0, 19h, \ ; "program_invocation_short_name"
LOAD:00000000000009A0                            offset __bss_start, 8>
LOAD:00000000000009B8                 Elf64_Sym <offset aStderr - offset byte_A00, 11h, 0, 19h, \ ; "stderr"
LOAD:00000000000009B8                            offset stderr@@GLIBC_2_2_5, 8>
LOAD:00000000000009D0                 Elf64_Sym <offset aOptind - offset byte_A00, 11h, 0, 19h, \ ; "optind"
LOAD:00000000000009D0                            offset optind@@GLIBC_2_2_5, 4>
LOAD:00000000000009E8                 Elf64_Sym <offset aOptarg - offset byte_A00, 11h, 0, 19h, \ ; "optarg"
LOAD:00000000000009E8                            offset optarg@@GLIBC_2_2_5, 8>
LOAD:0000000000000A00 ; ELF String Table
LOAD:0000000000000A00 byte_A00        db 0                    ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000A00                                         ; LOAD:0000000000000310↑o ...
LOAD:0000000000000A01 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000000E08↓o
LOAD:0000000000000A0B aFflush         db 'fflush',0           ; DATA XREF: LOAD:00000000000006E8↑o
LOAD:0000000000000A12 aStrcpy         db 'strcpy',0           ; DATA XREF: LOAD:00000000000003B8↑o
LOAD:0000000000000A19 aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:0000000000000778↑o
LOAD:0000000000000A26 aClearerrUnlock db 'clearerr_unlocked',0
LOAD:0000000000000A26                                         ; DATA XREF: LOAD:00000000000003E8↑o
LOAD:0000000000000A38 aSetlocale      db 'setlocale',0        ; DATA XREF: LOAD:0000000000000760↑o
LOAD:0000000000000A42 aMbrtowc        db 'mbrtowc',0          ; DATA XREF: LOAD:0000000000000508↑o
LOAD:0000000000000A4A aTowlower       db 'towlower',0         ; DATA XREF: LOAD:0000000000000808↑o
LOAD:0000000000000A53 aFopen          db 'fopen',0            ; DATA XREF: LOAD:00000000000007F0↑o
LOAD:0000000000000A59 aStrncmp        db 'strncmp',0          ; DATA XREF: LOAD:0000000000000370↑o
LOAD:0000000000000A61 aOptind         db 'optind',0           ; DATA XREF: LOAD:00000000000009D0↑o
LOAD:0000000000000A68 aStrrchr        db 'strrchr',0          ; DATA XREF: LOAD:0000000000000550↑o
LOAD:0000000000000A70 aDcgettext      db 'dcgettext',0        ; DATA XREF: LOAD:0000000000000490↑o
LOAD:0000000000000A7A aWcrtomb        db 'wcrtomb',0          ; DATA XREF: LOAD:00000000000006D0↑o
LOAD:0000000000000A82 aError          db 'error',0            ; DATA XREF: LOAD:00000000000007C0↑o
LOAD:0000000000000A88 aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:00000000000004D8↑o
LOAD:0000000000000A99 aIswprint       db 'iswprint',0         ; DATA XREF: LOAD:00000000000008C8↑o
LOAD:0000000000000AA2 aRealloc        db 'realloc',0          ; DATA XREF: LOAD:0000000000000748↑o
LOAD:0000000000000AAA aBtowc          db 'btowc',0            ; DATA XREF: LOAD:0000000000000790↑o
LOAD:0000000000000AB0 aTowupper       db 'towupper',0         ; DATA XREF: LOAD:0000000000000820↑o
LOAD:0000000000000AB9 aAbort          db 'abort',0            ; DATA XREF: LOAD:0000000000000340↑o
LOAD:0000000000000ABF aStdin          db 'stdin',0            ; DATA XREF: LOAD:0000000000000958↑o
LOAD:0000000000000AC5 aExit           db '_exit',0            ; DATA XREF: LOAD:00000000000003A0↑o
LOAD:0000000000000AC5                                         ; LOAD:0000000000000850↑o
LOAD:0000000000000ACB aProgramInvocat db 'program_invocation_name',0
LOAD:0000000000000ACB                                         ; DATA XREF: LOAD:0000000000000970↑o
LOAD:0000000000000AE3 aAssertFail     db '__assert_fail',0    ; DATA XREF: LOAD:0000000000000580↑o
LOAD:0000000000000AF1 aIswalnum       db 'iswalnum',0         ; DATA XREF: LOAD:00000000000006A0↑o
LOAD:0000000000000AFA aCtypeGetMbCurM db '__ctype_get_mb_cur_max',0
LOAD:0000000000000AFA                                         ; DATA XREF: LOAD:00000000000004A8↑o
LOAD:0000000000000B11 aPosixFadvise   db 'posix_fadvise',0    ; DATA XREF: LOAD:00000000000005B0↑o
LOAD:0000000000000B1F aCalloc         db 'calloc',0           ; DATA XREF: LOAD:0000000000000628↑o
LOAD:0000000000000B26 aStrlen         db 'strlen',0           ; DATA XREF: LOAD:00000000000004C0↑o
LOAD:0000000000000B2D aIswctype       db 'iswctype',0         ; DATA XREF: LOAD:0000000000000430↑o
LOAD:0000000000000B2D                                         ; LOAD:00000000000005F8↑o
LOAD:0000000000000B36 aMemset         db 'memset',0           ; DATA XREF: LOAD:0000000000000598↑o
LOAD:0000000000000B3D aErrnoLocation  db '__errno_location',0 ; DATA XREF: LOAD:0000000000000358↑o
LOAD:0000000000000B4E aMemcmp         db 'memcmp',0           ; DATA XREF: LOAD:00000000000005E0↑o
LOAD:0000000000000B55 aFprintfChk     db '__fprintf_chk',0    ; DATA XREF: LOAD:0000000000000880↑o
LOAD:0000000000000B63 aStdout         db 'stdout',0           ; DATA XREF: LOAD:0000000000000928↑o
LOAD:0000000000000B6A aLseek          db 'lseek',0            ; DATA XREF: LOAD:0000000000000568↑o
LOAD:0000000000000B70 aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:0000000000000670↑o
LOAD:0000000000000B77 aFclose         db 'fclose',0           ; DATA XREF: LOAD:0000000000000448↑o
LOAD:0000000000000B7E aStrtolInternal db '__strtol_internal',0
LOAD:0000000000000B7E                                         ; DATA XREF: LOAD:0000000000000418↑o
LOAD:0000000000000B90 aMalloc         db 'malloc',0           ; DATA XREF: LOAD:00000000000006B8↑o
LOAD:0000000000000B97 aMbsinit        db 'mbsinit',0          ; DATA XREF: LOAD:00000000000008B0↑o
LOAD:0000000000000B9F aUflow          db '__uflow',0          ; DATA XREF: LOAD:0000000000000310↑o
LOAD:0000000000000BA7 aNlLanginfo     db 'nl_langinfo',0      ; DATA XREF: LOAD:0000000000000700↑o
LOAD:0000000000000BB3 aCtypeBLoc      db '__ctype_b_loc',0    ; DATA XREF: LOAD:0000000000000910↑o
LOAD:0000000000000BC1 aOptarg         db 'optarg',0           ; DATA XREF: LOAD:00000000000009E8↑o
LOAD:0000000000000BC8 aFreading       db '__freading',0       ; DATA XREF: LOAD:0000000000000718↑o
LOAD:0000000000000BD3 aStderr         db 'stderr',0           ; DATA XREF: LOAD:00000000000009B8↑o
LOAD:0000000000000BDA aGetoptLong     db 'getopt_long',0      ; DATA XREF: LOAD:00000000000004F0↑o
LOAD:0000000000000BE6 aFileno         db 'fileno',0           ; DATA XREF: LOAD:0000000000000688↑o
LOAD:0000000000000BED aFwrite         db 'fwrite',0           ; DATA XREF: LOAD:0000000000000868↑o
LOAD:0000000000000BF4 aFpending       db '__fpending',0       ; DATA XREF: LOAD:00000000000003D0↑o
LOAD:0000000000000BFF aStrchr         db 'strchr',0           ; DATA XREF: LOAD:0000000000000520↑o
LOAD:0000000000000C06 aProgramInvocat_0 db 'program_invocation_short_name',0
LOAD:0000000000000C06                                         ; DATA XREF: LOAD:00000000000009A0↑o
LOAD:0000000000000C24 aCtypeToupperLo db '__ctype_toupper_loc',0
LOAD:0000000000000C24                                         ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000C38 aCtypeTolowerLo db '__ctype_tolower_loc',0
LOAD:0000000000000C38                                         ; DATA XREF: LOAD:00000000000008F8↑o
LOAD:0000000000000C4C aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:00000000000008E0↑o
LOAD:0000000000000C5B aMemmove        db 'memmove',0          ; DATA XREF: LOAD:00000000000007A8↑o
LOAD:0000000000000C63 aBindtextdomain db 'bindtextdomain',0   ; DATA XREF: LOAD:0000000000000460↑o
LOAD:0000000000000C63                                         ; LOAD:0000000000000400↑o
LOAD:0000000000000C72 aFwriteUnlocked db 'fwrite_unlocked',0  ; DATA XREF: LOAD:0000000000000730↑o
LOAD:0000000000000C82 aStrcmp         db 'strcmp',0           ; DATA XREF: LOAD:0000000000000640↑o
LOAD:0000000000000C89 aLibcStartMain  db '__libc_start_main',0
LOAD:0000000000000C89                                         ; DATA XREF: LOAD:00000000000005C8↑o
LOAD:0000000000000C9B aStpcpy         db 'stpcpy',0           ; DATA XREF: LOAD:0000000000000478↑o
LOAD:0000000000000CA2 aFseeko         db 'fseeko',0           ; DATA XREF: LOAD:00000000000007D8↑o
LOAD:0000000000000CA9 aOverflow       db '__overflow',0       ; DATA XREF: LOAD:0000000000000538↑o
LOAD:0000000000000CB4 aFputsUnlocked  db 'fputs_unlocked',0   ; DATA XREF: LOAD:0000000000000610↑o
LOAD:0000000000000CC3 aFree           db 'free',0             ; DATA XREF: LOAD:0000000000000328↑o
LOAD:0000000000000CC8 aProgname       db '__progname',0       ; DATA XREF: LOAD:0000000000000940↑o
LOAD:0000000000000CD3 aPrognameFull   db '__progname_full',0  ; DATA XREF: LOAD:0000000000000988↑o
LOAD:0000000000000CE3 aCxaAtexit      db '__cxa_atexit',0     ; DATA XREF: LOAD:0000000000000838↑o
LOAD:0000000000000CF0 aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000000E18↓o
LOAD:0000000000000CFC aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:0000000000000E28↓o
LOAD:0000000000000D07 aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000000E38↓o
LOAD:0000000000000D11 aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000000E48↓o
LOAD:0000000000000D1D aGlibc23        db 'GLIBC_2.3',0        ; DATA XREF: LOAD:0000000000000E58↓o
LOAD:0000000000000D27 aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:0000000000000D27                                         ; DATA XREF: LOAD:0000000000000388↑o
LOAD:0000000000000D43 aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:0000000000000658↑o
LOAD:0000000000000D52 aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:0000000000000D52                                         ; DATA XREF: LOAD:0000000000000898↑o
LOAD:0000000000000D6C ; ELF GNU Symbol Version Table
LOAD:0000000000000D6C                 dw 0
LOAD:0000000000000D6E                 dw 2                    ; __ctype_toupper_loc@@GLIBC_2.3
LOAD:0000000000000D70                 dw 3                    ; __uflow@@GLIBC_2.2.5
LOAD:0000000000000D72                 dw 3                    ; free@@GLIBC_2.2.5
LOAD:0000000000000D74                 dw 3                    ; abort@@GLIBC_2.2.5
LOAD:0000000000000D76                 dw 3                    ; __errno_location@@GLIBC_2.2.5
LOAD:0000000000000D78                 dw 3                    ; strncmp@@GLIBC_2.2.5
LOAD:0000000000000D7A                 dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
LOAD:0000000000000D7C                 dw 3                    ; _exit@@GLIBC_2.2.5
LOAD:0000000000000D7E                 dw 3                    ; strcpy@@GLIBC_2.2.5
LOAD:0000000000000D80                 dw 3                    ; __fpending@@GLIBC_2.2.5
LOAD:0000000000000D82                 dw 3                    ; clearerr_unlocked@@GLIBC_2.2.5
LOAD:0000000000000D84                 dw 3                    ; textdomain@@GLIBC_2.2.5
LOAD:0000000000000D86                 dw 3                    ; __strtol_internal@@GLIBC_2.2.5
LOAD:0000000000000D88                 dw 3                    ; iswctype@@GLIBC_2.2.5
LOAD:0000000000000D8A                 dw 3                    ; fclose@@GLIBC_2.2.5
LOAD:0000000000000D8C                 dw 3                    ; bindtextdomain@@GLIBC_2.2.5
LOAD:0000000000000D8E                 dw 3                    ; stpcpy@@GLIBC_2.2.5
LOAD:0000000000000D90                 dw 3                    ; dcgettext@@GLIBC_2.2.5
LOAD:0000000000000D92                 dw 3                    ; __ctype_get_mb_cur_max@@GLIBC_2.2.5
LOAD:0000000000000D94                 dw 3                    ; strlen@@GLIBC_2.2.5
LOAD:0000000000000D96                 dw 4                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:0000000000000D98                 dw 3                    ; getopt_long@@GLIBC_2.2.5
LOAD:0000000000000D9A                 dw 3                    ; mbrtowc@@GLIBC_2.2.5
LOAD:0000000000000D9C                 dw 3                    ; strchr@@GLIBC_2.2.5
LOAD:0000000000000D9E                 dw 3                    ; __overflow@@GLIBC_2.2.5
LOAD:0000000000000DA0                 dw 3                    ; strrchr@@GLIBC_2.2.5
LOAD:0000000000000DA2                 dw 3                    ; lseek@@GLIBC_2.2.5
LOAD:0000000000000DA4                 dw 3                    ; __assert_fail@@GLIBC_2.2.5
LOAD:0000000000000DA6                 dw 3                    ; memset@@GLIBC_2.2.5
LOAD:0000000000000DA8                 dw 3                    ; posix_fadvise@@GLIBC_2.2.5
LOAD:0000000000000DAA                 dw 3                    ; __libc_start_main@@GLIBC_2.2.5
LOAD:0000000000000DAC                 dw 3                    ; memcmp@@GLIBC_2.2.5
LOAD:0000000000000DAE                 dw 3                    ; wctype@@GLIBC_2.2.5
LOAD:0000000000000DB0                 dw 3                    ; fputs_unlocked@@GLIBC_2.2.5
LOAD:0000000000000DB2                 dw 3                    ; calloc@@GLIBC_2.2.5
LOAD:0000000000000DB4                 dw 3                    ; strcmp@@GLIBC_2.2.5
LOAD:0000000000000DB6                 dw 0                    ; local  symbol: __gmon_start__
LOAD:0000000000000DB8                 dw 5                    ; memcpy@@GLIBC_2.14
LOAD:0000000000000DBA                 dw 3                    ; fileno@@GLIBC_2.2.5
LOAD:0000000000000DBC                 dw 3                    ; iswalnum@@GLIBC_2.2.5
LOAD:0000000000000DBE                 dw 3                    ; malloc@@GLIBC_2.2.5
LOAD:0000000000000DC0                 dw 3                    ; wcrtomb@@GLIBC_2.2.5
LOAD:0000000000000DC2                 dw 3                    ; fflush@@GLIBC_2.2.5
LOAD:0000000000000DC4                 dw 3                    ; nl_langinfo@@GLIBC_2.2.5
LOAD:0000000000000DC6                 dw 3                    ; __freading@@GLIBC_2.2.5
LOAD:0000000000000DC8                 dw 3                    ; fwrite_unlocked@@GLIBC_2.2.5
LOAD:0000000000000DCA                 dw 3                    ; realloc@@GLIBC_2.2.5
LOAD:0000000000000DCC                 dw 3                    ; setlocale@@GLIBC_2.2.5
LOAD:0000000000000DCE                 dw 6                    ; __printf_chk@@GLIBC_2.3.4
LOAD:0000000000000DD0                 dw 3                    ; btowc@@GLIBC_2.2.5
LOAD:0000000000000DD2                 dw 3                    ; memmove@@GLIBC_2.2.5
LOAD:0000000000000DD4                 dw 3                    ; error@@GLIBC_2.2.5
LOAD:0000000000000DD6                 dw 3                    ; fseeko@@GLIBC_2.2.5
LOAD:0000000000000DD8                 dw 3                    ; fopen@@GLIBC_2.2.5
LOAD:0000000000000DDA                 dw 3                    ; towlower@@GLIBC_2.2.5
LOAD:0000000000000DDC                 dw 3                    ; towupper@@GLIBC_2.2.5
LOAD:0000000000000DDE                 dw 3                    ; __cxa_atexit@@GLIBC_2.2.5
LOAD:0000000000000DE0                 dw 3                    ; exit@@GLIBC_2.2.5
LOAD:0000000000000DE2                 dw 3                    ; fwrite@@GLIBC_2.2.5
LOAD:0000000000000DE4                 dw 6                    ; __fprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000DE6                 dw 0                    ; local  symbol: _ITM_registerTMCloneTable
LOAD:0000000000000DE8                 dw 3                    ; mbsinit@@GLIBC_2.2.5
LOAD:0000000000000DEA                 dw 3                    ; iswprint@@GLIBC_2.2.5
LOAD:0000000000000DEC                 dw 3                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:0000000000000DEE                 dw 2                    ; __ctype_tolower_loc@@GLIBC_2.3
LOAD:0000000000000DF0                 dw 2                    ; __ctype_b_loc@@GLIBC_2.3
LOAD:0000000000000DF2                 dw 3                    ; stdout@@GLIBC_2.2.5
LOAD:0000000000000DF4                 dw 3                    ; __progname@@GLIBC_2.2.5
LOAD:0000000000000DF6                 dw 3                    ; stdin@@GLIBC_2.2.5
LOAD:0000000000000DF8                 dw 3                    ; program_invocation_name@@GLIBC_2.2.5
LOAD:0000000000000DFA                 dw 3                    ; __progname_full@@GLIBC_2.2.5
LOAD:0000000000000DFC                 dw 3                    ; program_invocation_short_name@@GLIBC_2.2.5
LOAD:0000000000000DFE                 dw 3                    ; stderr@@GLIBC_2.2.5
LOAD:0000000000000E00                 dw 3                    ; optind@@GLIBC_2.2.5
LOAD:0000000000000E02                 dw 3                    ; optarg@@GLIBC_2.2.5
LOAD:0000000000000E04                 dw 0
LOAD:0000000000000E06                 dw 0
LOAD:0000000000000E08 ; ELF GNU Symbol Version Requirements
LOAD:0000000000000E08                 Elf64_Verneed <1, 5, offset aLibcSo6 - offset byte_A00, 10h, 0> ; "libc.so.6"
LOAD:0000000000000E18                 Elf64_Vernaux <9691974h, 0, 6, offset aGlibc234 - offset byte_A00, \ ; "GLIBC_2.3.4"
LOAD:0000000000000E18                                10h>
LOAD:0000000000000E28                 Elf64_Vernaux <6969194h, 0, 5, offset aGlibc214 - offset byte_A00, \ ; "GLIBC_2.14"
LOAD:0000000000000E28                                10h>
LOAD:0000000000000E38                 Elf64_Vernaux <0D696914h, 0, 4, offset aGlibc24 - offset byte_A00, \ ; "GLIBC_2.4"
LOAD:0000000000000E38                                10h>
LOAD:0000000000000E48                 Elf64_Vernaux <9691A75h, 0, 3, offset aGlibc225 - offset byte_A00, \ ; "GLIBC_2.2.5"
LOAD:0000000000000E48                                10h>
LOAD:0000000000000E58                 Elf64_Vernaux <0D696913h, 0, 2, offset aGlibc23 - offset byte_A00, 0> ; "GLIBC_2.3"
LOAD:0000000000000E68 ; ELF RELA Relocation Table
LOAD:0000000000000E68                 Elf64_Rela <2189B0h, 8, 2410h> ; R_X86_64_RELATIVE +2410h
LOAD:0000000000000E80                 Elf64_Rela <2189B8h, 8, 23D0h> ; R_X86_64_RELATIVE +23D0h
LOAD:0000000000000E98                 Elf64_Rela <2189C0h, 8, 144EFh> ; R_X86_64_RELATIVE +144EFh
LOAD:0000000000000EB0                 Elf64_Rela <2189E0h, 8, 14500h> ; R_X86_64_RELATIVE +14500h
LOAD:0000000000000EC8                 Elf64_Rela <218A00h, 8, 1450Fh> ; R_X86_64_RELATIVE +1450Fh
LOAD:0000000000000EE0                 Elf64_Rela <218A20h, 8, 14520h> ; R_X86_64_RELATIVE +14520h
LOAD:0000000000000EF8                 Elf64_Rela <218A40h, 8, 14535h> ; R_X86_64_RELATIVE +14535h
LOAD:0000000000000F10                 Elf64_Rela <218A60h, 8, 14544h> ; R_X86_64_RELATIVE +14544h
LOAD:0000000000000F28                 Elf64_Rela <218A80h, 8, 14550h> ; R_X86_64_RELATIVE +14550h
LOAD:0000000000000F40                 Elf64_Rela <218AA0h, 8, 14561h> ; R_X86_64_RELATIVE +14561h
LOAD:0000000000000F58                 Elf64_Rela <218AC0h, 8, 14572h> ; R_X86_64_RELATIVE +14572h
LOAD:0000000000000F70                 Elf64_Rela <218AE0h, 8, 1457Fh> ; R_X86_64_RELATIVE +1457Fh
LOAD:0000000000000F88                 Elf64_Rela <218B00h, 8, 1458Dh> ; R_X86_64_RELATIVE +1458Dh
LOAD:0000000000000FA0                 Elf64_Rela <218B20h, 8, 1459Fh> ; R_X86_64_RELATIVE +1459Fh
LOAD:0000000000000FB8                 Elf64_Rela <218B40h, 8, 145A4h> ; R_X86_64_RELATIVE +145A4h
LOAD:0000000000000FD0                 Elf64_Rela <218B80h, 8, 14EC9h> ; R_X86_64_RELATIVE +14EC9h
LOAD:0000000000000FE8                 Elf64_Rela <218B88h, 8, 14ED1h> ; R_X86_64_RELATIVE +14ED1h
LOAD:0000000000001000                 Elf64_Rela <218B90h, 8, 14ED7h> ; R_X86_64_RELATIVE +14ED7h
LOAD:0000000000001018                 Elf64_Rela <218B98h, 8, 14EE4h> ; R_X86_64_RELATIVE +14EE4h
LOAD:0000000000001030                 Elf64_Rela <218BA0h, 8, 14EF1h> ; R_X86_64_RELATIVE +14EF1h
LOAD:0000000000001048                 Elf64_Rela <218BA8h, 8, 14F05h> ; R_X86_64_RELATIVE +14F05h
LOAD:0000000000001060                 Elf64_Rela <218BB0h, 8, 14F07h> ; R_X86_64_RELATIVE +14F07h
LOAD:0000000000001078                 Elf64_Rela <218BB8h, 8, 14EEAh> ; R_X86_64_RELATIVE +14EEAh
LOAD:0000000000001090                 Elf64_Rela <218BC0h, 8, 14470h> ; R_X86_64_RELATIVE +14470h
LOAD:00000000000010A8                 Elf64_Rela <218BC8h, 8, 14F0Fh> ; R_X86_64_RELATIVE +14F0Fh
LOAD:00000000000010C0                 Elf64_Rela <219008h, 8, 219008h> ; R_X86_64_RELATIVE +219008h
LOAD:00000000000010D8                 Elf64_Rela <219038h, 8, 14E50h> ; R_X86_64_RELATIVE +14E50h
LOAD:00000000000010F0                 Elf64_Rela <219040h, 8, 14E38h> ; R_X86_64_RELATIVE +14E38h
LOAD:0000000000001108                 Elf64_Rela <219048h, 8, 145ACh> ; R_X86_64_RELATIVE +145ACh
LOAD:0000000000001120                 Elf64_Rela <219050h, 8, 144B3h> ; R_X86_64_RELATIVE +144B3h
LOAD:0000000000001138                 Elf64_Rela <219058h, 8, 144B3h> ; R_X86_64_RELATIVE +144B3h
LOAD:0000000000001150                 Elf64_Rela <219060h, 8, 1458Bh> ; R_X86_64_RELATIVE +1458Bh
LOAD:0000000000001168                 Elf64_Rela <219068h, 8, 14E57h> ; R_X86_64_RELATIVE +14E57h
LOAD:0000000000001180                 Elf64_Rela <2190C0h, 8, 2190D0h> ; R_X86_64_RELATIVE +2190D0h
LOAD:0000000000001198                 Elf64_Rela <2190D8h, 8, 2195A0h> ; R_X86_64_RELATIVE +2195A0h
LOAD:00000000000011B0                 Elf64_Rela <218FC8h, 700000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:00000000000011C8                 Elf64_Rela <218FD0h, 1F00000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:00000000000011E0                 Elf64_Rela <218FD8h, 2500000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:00000000000011F8                 Elf64_Rela <218FE0h, 3D00000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:0000000000001210                 Elf64_Rela <218FE8h, 4000000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:0000000000001228                 Elf64_Rela <2190E0h, 4400000005h, 0> ; R_X86_64_COPY __progname
LOAD:0000000000001240                 Elf64_Rela <2190E8h, 4300000005h, 0> ; R_X86_64_COPY stdout
LOAD:0000000000001258                 Elf64_Rela <2190F0h, 4500000005h, 0> ; R_X86_64_COPY stdin
LOAD:0000000000001270                 Elf64_Rela <2190F8h, 4A00000005h, 0> ; R_X86_64_COPY optind
LOAD:0000000000001288                 Elf64_Rela <219100h, 4B00000005h, 0> ; R_X86_64_COPY optarg
LOAD:00000000000012A0                 Elf64_Rela <219108h, 4700000005h, 0> ; R_X86_64_COPY __progname_full
LOAD:00000000000012B8                 Elf64_Rela <219120h, 4900000005h, 0> ; R_X86_64_COPY stderr
LOAD:00000000000012D0 ; ELF JMPREL Relocation Table
LOAD:00000000000012D0                 Elf64_Rela <218DE0h, 100000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_toupper_loc
LOAD:00000000000012E8                 Elf64_Rela <218DE8h, 200000007h, 0> ; R_X86_64_JUMP_SLOT __uflow
LOAD:0000000000001300                 Elf64_Rela <218DF0h, 300000007h, 0> ; R_X86_64_JUMP_SLOT free
LOAD:0000000000001318                 Elf64_Rela <218DF8h, 400000007h, 0> ; R_X86_64_JUMP_SLOT abort
LOAD:0000000000001330                 Elf64_Rela <218E00h, 500000007h, 0> ; R_X86_64_JUMP_SLOT __errno_location
LOAD:0000000000001348                 Elf64_Rela <218E08h, 600000007h, 0> ; R_X86_64_JUMP_SLOT strncmp
LOAD:0000000000001360                 Elf64_Rela <218E10h, 800000007h, 0> ; R_X86_64_JUMP_SLOT _exit
LOAD:0000000000001378                 Elf64_Rela <218E18h, 900000007h, 0> ; R_X86_64_JUMP_SLOT strcpy
LOAD:0000000000001390                 Elf64_Rela <218E20h, 0A00000007h, 0> ; R_X86_64_JUMP_SLOT __fpending
LOAD:00000000000013A8                 Elf64_Rela <218E28h, 0B00000007h, 0> ; R_X86_64_JUMP_SLOT clearerr_unlocked
LOAD:00000000000013C0                 Elf64_Rela <218E30h, 0C00000007h, 0> ; R_X86_64_JUMP_SLOT textdomain
LOAD:00000000000013D8                 Elf64_Rela <218E38h, 0D00000007h, 0> ; R_X86_64_JUMP_SLOT __strtol_internal
LOAD:00000000000013F0                 Elf64_Rela <218E40h, 0E00000007h, 0> ; R_X86_64_JUMP_SLOT iswctype
LOAD:0000000000001408                 Elf64_Rela <218E48h, 0F00000007h, 0> ; R_X86_64_JUMP_SLOT fclose
LOAD:0000000000001420                 Elf64_Rela <218E50h, 1000000007h, 0> ; R_X86_64_JUMP_SLOT bindtextdomain
LOAD:0000000000001438                 Elf64_Rela <218E58h, 1100000007h, 0> ; R_X86_64_JUMP_SLOT stpcpy
LOAD:0000000000001450                 Elf64_Rela <218E60h, 1200000007h, 0> ; R_X86_64_JUMP_SLOT dcgettext
LOAD:0000000000001468                 Elf64_Rela <218E68h, 1300000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_get_mb_cur_max
LOAD:0000000000001480                 Elf64_Rela <218E70h, 1400000007h, 0> ; R_X86_64_JUMP_SLOT strlen
LOAD:0000000000001498                 Elf64_Rela <218E78h, 1500000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
LOAD:00000000000014B0                 Elf64_Rela <218E80h, 1600000007h, 0> ; R_X86_64_JUMP_SLOT getopt_long
LOAD:00000000000014C8                 Elf64_Rela <218E88h, 1700000007h, 0> ; R_X86_64_JUMP_SLOT mbrtowc
LOAD:00000000000014E0                 Elf64_Rela <218E90h, 1800000007h, 0> ; R_X86_64_JUMP_SLOT strchr
LOAD:00000000000014F8                 Elf64_Rela <218E98h, 1900000007h, 0> ; R_X86_64_JUMP_SLOT __overflow
LOAD:0000000000001510                 Elf64_Rela <218EA0h, 1A00000007h, 0> ; R_X86_64_JUMP_SLOT strrchr
LOAD:0000000000001528                 Elf64_Rela <218EA8h, 1B00000007h, 0> ; R_X86_64_JUMP_SLOT lseek
LOAD:0000000000001540                 Elf64_Rela <218EB0h, 1C00000007h, 0> ; R_X86_64_JUMP_SLOT __assert_fail
LOAD:0000000000001558                 Elf64_Rela <218EB8h, 1D00000007h, 0> ; R_X86_64_JUMP_SLOT memset
LOAD:0000000000001570                 Elf64_Rela <218EC0h, 1E00000007h, 0> ; R_X86_64_JUMP_SLOT posix_fadvise
LOAD:0000000000001588                 Elf64_Rela <218EC8h, 2000000007h, 0> ; R_X86_64_JUMP_SLOT memcmp
LOAD:00000000000015A0                 Elf64_Rela <218ED0h, 2100000007h, 0> ; R_X86_64_JUMP_SLOT wctype
LOAD:00000000000015B8                 Elf64_Rela <218ED8h, 2200000007h, 0> ; R_X86_64_JUMP_SLOT fputs_unlocked
LOAD:00000000000015D0                 Elf64_Rela <218EE0h, 2300000007h, 0> ; R_X86_64_JUMP_SLOT calloc
LOAD:00000000000015E8                 Elf64_Rela <218EE8h, 2400000007h, 0> ; R_X86_64_JUMP_SLOT strcmp
LOAD:0000000000001600                 Elf64_Rela <218EF0h, 2600000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
LOAD:0000000000001618                 Elf64_Rela <218EF8h, 2700000007h, 0> ; R_X86_64_JUMP_SLOT fileno
LOAD:0000000000001630                 Elf64_Rela <218F00h, 2800000007h, 0> ; R_X86_64_JUMP_SLOT iswalnum
LOAD:0000000000001648                 Elf64_Rela <218F08h, 2900000007h, 0> ; R_X86_64_JUMP_SLOT malloc
LOAD:0000000000001660                 Elf64_Rela <218F10h, 2A00000007h, 0> ; R_X86_64_JUMP_SLOT wcrtomb
LOAD:0000000000001678                 Elf64_Rela <218F18h, 2B00000007h, 0> ; R_X86_64_JUMP_SLOT fflush
LOAD:0000000000001690                 Elf64_Rela <218F20h, 2C00000007h, 0> ; R_X86_64_JUMP_SLOT nl_langinfo
LOAD:00000000000016A8                 Elf64_Rela <218F28h, 2D00000007h, 0> ; R_X86_64_JUMP_SLOT __freading
LOAD:00000000000016C0                 Elf64_Rela <218F30h, 2E00000007h, 0> ; R_X86_64_JUMP_SLOT fwrite_unlocked
LOAD:00000000000016D8                 Elf64_Rela <218F38h, 2F00000007h, 0> ; R_X86_64_JUMP_SLOT realloc
LOAD:00000000000016F0                 Elf64_Rela <218F40h, 3000000007h, 0> ; R_X86_64_JUMP_SLOT setlocale
LOAD:0000000000001708                 Elf64_Rela <218F48h, 3100000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
LOAD:0000000000001720                 Elf64_Rela <218F50h, 3200000007h, 0> ; R_X86_64_JUMP_SLOT btowc
LOAD:0000000000001738                 Elf64_Rela <218F58h, 3300000007h, 0> ; R_X86_64_JUMP_SLOT memmove
LOAD:0000000000001750                 Elf64_Rela <218F60h, 3400000007h, 0> ; R_X86_64_JUMP_SLOT error
LOAD:0000000000001768                 Elf64_Rela <218F68h, 3500000007h, 0> ; R_X86_64_JUMP_SLOT fseeko
LOAD:0000000000001780                 Elf64_Rela <218F70h, 3600000007h, 0> ; R_X86_64_JUMP_SLOT fopen
LOAD:0000000000001798                 Elf64_Rela <218F78h, 3700000007h, 0> ; R_X86_64_JUMP_SLOT towlower
LOAD:00000000000017B0                 Elf64_Rela <218F80h, 3800000007h, 0> ; R_X86_64_JUMP_SLOT towupper
LOAD:00000000000017C8                 Elf64_Rela <218F88h, 3900000007h, 0> ; R_X86_64_JUMP_SLOT __cxa_atexit
LOAD:00000000000017E0                 Elf64_Rela <218F90h, 3A00000007h, 0> ; R_X86_64_JUMP_SLOT exit
LOAD:00000000000017F8                 Elf64_Rela <218F98h, 3B00000007h, 0> ; R_X86_64_JUMP_SLOT fwrite
LOAD:0000000000001810                 Elf64_Rela <218FA0h, 3C00000007h, 0> ; R_X86_64_JUMP_SLOT __fprintf_chk
LOAD:0000000000001828                 Elf64_Rela <218FA8h, 3E00000007h, 0> ; R_X86_64_JUMP_SLOT mbsinit
LOAD:0000000000001840                 Elf64_Rela <218FB0h, 3F00000007h, 0> ; R_X86_64_JUMP_SLOT iswprint
LOAD:0000000000001858                 Elf64_Rela <218FB8h, 4100000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_tolower_loc
LOAD:0000000000001870                 Elf64_Rela <218FC0h, 4200000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_b_loc
LOAD:0000000000001870 LOAD            ends
LOAD:0000000000001870
.init:0000000000001888 ; ===========================================================================
.init:0000000000001888
.init:0000000000001888 ; Segment type: Pure code
.init:0000000000001888 ; Segment permissions: Read/Execute
.init:0000000000001888 _init           segment dword public 'CODE' use64
.init:0000000000001888                 assume cs:_init
.init:0000000000001888                 ;org 1888h
.init:0000000000001888                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:0000000000001888
.init:0000000000001888 ; =============== S U B R O U T I N E =======================================
.init:0000000000001888
.init:0000000000001888
.init:0000000000001888                 public _init_proc
.init:0000000000001888 _init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
.init:0000000000001888                 sub     rsp, 8          ; _init
.init:000000000000188C                 mov     rax, cs:__gmon_start___ptr
.init:0000000000001893                 test    rax, rax
.init:0000000000001896                 jz      short loc_189A
.init:0000000000001898                 call    rax ; __gmon_start__
.init:000000000000189A
.init:000000000000189A loc_189A:                               ; CODE XREF: _init_proc+E↑j
.init:000000000000189A                 add     rsp, 8
.init:000000000000189E                 retn
.init:000000000000189E _init_proc      endp
.init:000000000000189E
.init:000000000000189E _init           ends
.init:000000000000189E
LOAD:000000000000189F ; ===========================================================================
LOAD:000000000000189F
LOAD:000000000000189F ; Segment type: Pure code
LOAD:000000000000189F ; Segment permissions: Read/Execute
LOAD:000000000000189F LOAD            segment byte public 'CODE' use64
LOAD:000000000000189F                 assume cs:LOAD
LOAD:000000000000189F                 ;org 189Fh
LOAD:000000000000189F                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000189F                 align 20h
LOAD:000000000000189F LOAD            ends
LOAD:000000000000189F
.plt:00000000000018A0 ; ===========================================================================
.plt:00000000000018A0
.plt:00000000000018A0 ; Segment type: Pure code
.plt:00000000000018A0 ; Segment permissions: Read/Execute
.plt:00000000000018A0 _plt            segment para public 'CODE' use64
.plt:00000000000018A0                 assume cs:_plt
.plt:00000000000018A0                 ;org 18A0h
.plt:00000000000018A0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:00000000000018A0
.plt:00000000000018A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018A0
.plt:00000000000018A0
.plt:00000000000018A0 sub_18A0        proc near               ; CODE XREF: .plt:00000000000018BB↓j
.plt:00000000000018A0                                         ; .plt:00000000000018CB↓j ...
.plt:00000000000018A0 ; __unwind {
.plt:00000000000018A0                 push    cs:qword_218DD0
.plt:00000000000018A6                 jmp     cs:qword_218DD8
.plt:00000000000018A6 sub_18A0        endp
.plt:00000000000018A6
.plt:00000000000018A6 ; ---------------------------------------------------------------------------
.plt:00000000000018AC                 align 10h
.plt:00000000000018B0
.plt:00000000000018B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018B0
.plt:00000000000018B0 ; Attributes: thunk
.plt:00000000000018B0
.plt:00000000000018B0 ; const __int32_t **__ctype_toupper_loc(void)
.plt:00000000000018B0 ___ctype_toupper_loc proc near          ; CODE XREF: build_upper_buffer+1D↓p
.plt:00000000000018B0                                         ; build_wcs_upper_buffer:loc_6D28↓p
.plt:00000000000018B0                 jmp     cs:__ctype_toupper_loc_ptr
.plt:00000000000018B0 ___ctype_toupper_loc endp
.plt:00000000000018B0
.plt:00000000000018B6 ; ---------------------------------------------------------------------------
.plt:00000000000018B6                 push    0
.plt:00000000000018BB                 jmp     sub_18A0
.plt:00000000000018C0
.plt:00000000000018C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018C0
.plt:00000000000018C0 ; Attributes: thunk
.plt:00000000000018C0
.plt:00000000000018C0 ; int __uflow(_IO_FILE *)
.plt:00000000000018C0 ___uflow        proc near               ; CODE XREF: readlinebuffer_delim+BB↓p
.plt:00000000000018C0                 jmp     cs:__uflow_ptr
.plt:00000000000018C0 ___uflow        endp
.plt:00000000000018C0
.plt:00000000000018C6 ; ---------------------------------------------------------------------------
.plt:00000000000018C6                 push    1
.plt:00000000000018CB                 jmp     sub_18A0
.plt:00000000000018D0
.plt:00000000000018D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018D0
.plt:00000000000018D0 ; Attributes: thunk
.plt:00000000000018D0
.plt:00000000000018D0 ; void free(void *ptr)
.plt:00000000000018D0 _free           proc near               ; CODE XREF: freebuffer+4↓j
.plt:00000000000018D0                                         ; quotearg_n_options+115↓p ...
.plt:00000000000018D0                 jmp     cs:free_ptr
.plt:00000000000018D0 _free           endp
.plt:00000000000018D0
.plt:00000000000018D6 ; ---------------------------------------------------------------------------
.plt:00000000000018D6                 push    2
.plt:00000000000018DB                 jmp     sub_18A0
.plt:00000000000018E0
.plt:00000000000018E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018E0
.plt:00000000000018E0 ; Attributes: noreturn thunk
.plt:00000000000018E0
.plt:00000000000018E0 ; void __noreturn abort(void)
.plt:00000000000018E0 _abort          proc near               ; CODE XREF: set_program_name+9A↓p
.plt:00000000000018E0                                         ; quotearg_buffer_restyled:def_3251↓p ...
.plt:00000000000018E0                 jmp     cs:abort_ptr
.plt:00000000000018E0 _abort          endp
.plt:00000000000018E0
.plt:00000000000018E6 ; ---------------------------------------------------------------------------
.plt:00000000000018E6                 push    3
.plt:00000000000018EB                 jmp     sub_18A0
.plt:00000000000018F0
.plt:00000000000018F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018F0
.plt:00000000000018F0 ; Attributes: thunk
.plt:00000000000018F0
.plt:00000000000018F0 ; int *__errno_location(void)
.plt:00000000000018F0 ___errno_location proc near             ; CODE XREF: main+620↓p
.plt:00000000000018F0                                         ; nl_file+3B1↓p ...
.plt:00000000000018F0                 jmp     cs:__errno_location_ptr
.plt:00000000000018F0 ___errno_location endp
.plt:00000000000018F0
.plt:00000000000018F6 ; ---------------------------------------------------------------------------
.plt:00000000000018F6                 push    4
.plt:00000000000018FB                 jmp     sub_18A0
.plt:0000000000001900
.plt:0000000000001900 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001900
.plt:0000000000001900 ; Attributes: thunk
.plt:0000000000001900
.plt:0000000000001900 ; int strncmp(const char *s1, const char *s2, size_t n)
.plt:0000000000001900 _strncmp        proc near               ; CODE XREF: usage+32C↓p
.plt:0000000000001900                                         ; usage+3ED↓p
.plt:0000000000001900                 jmp     cs:strncmp_ptr
.plt:0000000000001900 _strncmp        endp
.plt:0000000000001900
.plt:0000000000001906 ; ---------------------------------------------------------------------------
.plt:0000000000001906                 push    5
.plt:000000000000190B                 jmp     sub_18A0
.plt:0000000000001910
.plt:0000000000001910 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001910
.plt:0000000000001910 ; Attributes: noreturn thunk
.plt:0000000000001910
.plt:0000000000001910 ; void __noreturn _exit(int status)
.plt:0000000000001910 __exit          proc near               ; CODE XREF: close_stdout+88↓p
.plt:0000000000001910                 jmp     cs:_exit_ptr
.plt:0000000000001910 __exit          endp
.plt:0000000000001910
.plt:0000000000001916 ; ---------------------------------------------------------------------------
.plt:0000000000001916                 push    6
.plt:000000000000191B                 jmp     sub_18A0
.plt:0000000000001920
.plt:0000000000001920 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001920
.plt:0000000000001920 ; Attributes: thunk
.plt:0000000000001920
.plt:0000000000001920 ; char *strcpy(char *dest, const char *src)
.plt:0000000000001920 _strcpy         proc near               ; CODE XREF: main+4AD↓p
.plt:0000000000001920                                         ; main+4E5↓p ...
.plt:0000000000001920                 jmp     cs:strcpy_ptr
.plt:0000000000001920 _strcpy         endp
.plt:0000000000001920
.plt:0000000000001926 ; ---------------------------------------------------------------------------
.plt:0000000000001926                 push    7
.plt:000000000000192B                 jmp     sub_18A0
.plt:0000000000001930
.plt:0000000000001930 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001930
.plt:0000000000001930 ; Attributes: thunk
.plt:0000000000001930
.plt:0000000000001930 ; size_t __fpending(FILE *fp)
.plt:0000000000001930 ___fpending     proc near               ; CODE XREF: close_stream+7↓p
.plt:0000000000001930                 jmp     cs:__fpending_ptr
.plt:0000000000001930 ___fpending     endp
.plt:0000000000001930
.plt:0000000000001936 ; ---------------------------------------------------------------------------
.plt:0000000000001936                 push    8
.plt:000000000000193B                 jmp     sub_18A0
.plt:0000000000001940
.plt:0000000000001940 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001940
.plt:0000000000001940 ; Attributes: thunk
.plt:0000000000001940
.plt:0000000000001940 ; void clearerr_unlocked(FILE *stream)
.plt:0000000000001940 _clearerr_unlocked proc near            ; CODE XREF: nl_file:loc_28C2↓p
.plt:0000000000001940                 jmp     cs:clearerr_unlocked_ptr
.plt:0000000000001940 _clearerr_unlocked endp
.plt:0000000000001940
.plt:0000000000001946 ; ---------------------------------------------------------------------------
.plt:0000000000001946                 push    9
.plt:000000000000194B                 jmp     sub_18A0
.plt:0000000000001950
.plt:0000000000001950 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001950
.plt:0000000000001950 ; Attributes: thunk
.plt:0000000000001950
.plt:0000000000001950 ; char *textdomain(const char *domainname)
.plt:0000000000001950 _textdomain     proc near               ; CODE XREF: main+61↓p
.plt:0000000000001950                 jmp     cs:textdomain_ptr
.plt:0000000000001950 _textdomain     endp
.plt:0000000000001950
.plt:0000000000001956 ; ---------------------------------------------------------------------------
.plt:0000000000001956                 push    0Ah
.plt:000000000000195B                 jmp     sub_18A0
.plt:0000000000001960
.plt:0000000000001960 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001960
.plt:0000000000001960 ; Attributes: thunk
.plt:0000000000001960
.plt:0000000000001960 ; __int64 __strtol_internal(const char *nptr, char **endptr, int base, int group)
.plt:0000000000001960 ___strtol_internal proc near            ; CODE XREF: xstrtoimax+59↓p
.plt:0000000000001960                 jmp     cs:__strtol_internal_ptr
.plt:0000000000001960 ___strtol_internal endp
.plt:0000000000001960
.plt:0000000000001966 ; ---------------------------------------------------------------------------
.plt:0000000000001966                 push    0Bh
.plt:000000000000196B                 jmp     sub_18A0
.plt:0000000000001970
.plt:0000000000001970 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001970
.plt:0000000000001970 ; Attributes: thunk
.plt:0000000000001970
.plt:0000000000001970 ; int iswctype(wint_t wc, wctype_t desc)
.plt:0000000000001970 _iswctype       proc near               ; CODE XREF: check_node_accept_bytes_isra_31+D9↓p
.plt:0000000000001970                 jmp     cs:iswctype_ptr
.plt:0000000000001970 _iswctype       endp
.plt:0000000000001970
.plt:0000000000001976 ; ---------------------------------------------------------------------------
.plt:0000000000001976                 push    0Ch
.plt:000000000000197B                 jmp     sub_18A0
.plt:0000000000001980
.plt:0000000000001980 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001980
.plt:0000000000001980 ; Attributes: thunk
.plt:0000000000001980
.plt:0000000000001980 ; int fclose(FILE *stream)
.plt:0000000000001980 _fclose         proc near               ; CODE XREF: rpl_fclose+36↓p
.plt:0000000000001980                                         ; rpl_fclose+6B↓j
.plt:0000000000001980                 jmp     cs:fclose_ptr
.plt:0000000000001980 _fclose         endp
.plt:0000000000001980
.plt:0000000000001986 ; ---------------------------------------------------------------------------
.plt:0000000000001986                 push    0Dh
.plt:000000000000198B                 jmp     sub_18A0
.plt:0000000000001990
.plt:0000000000001990 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001990
.plt:0000000000001990 ; Attributes: thunk
.plt:0000000000001990
.plt:0000000000001990 ; char *bindtextdomain(const char *domainname, const char *dirname)
.plt:0000000000001990 _bindtextdomain proc near               ; CODE XREF: main+55↓p
.plt:0000000000001990                 jmp     cs:bindtextdomain_ptr
.plt:0000000000001990 _bindtextdomain endp
.plt:0000000000001990
.plt:0000000000001996 ; ---------------------------------------------------------------------------
.plt:0000000000001996                 push    0Eh
.plt:000000000000199B                 jmp     sub_18A0
.plt:00000000000019A0
.plt:00000000000019A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019A0
.plt:00000000000019A0 ; Attributes: thunk
.plt:00000000000019A0
.plt:00000000000019A0 ; char *stpcpy(char *dest, const char *src)
.plt:00000000000019A0 _stpcpy         proc near               ; CODE XREF: main+497↓p
.plt:00000000000019A0                                         ; main+4A2↓p ...
.plt:00000000000019A0                 jmp     cs:stpcpy_ptr
.plt:00000000000019A0 _stpcpy         endp
.plt:00000000000019A0
.plt:00000000000019A6 ; ---------------------------------------------------------------------------
.plt:00000000000019A6                 push    0Fh
.plt:00000000000019AB                 jmp     sub_18A0
.plt:00000000000019B0
.plt:00000000000019B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019B0
.plt:00000000000019B0 ; Attributes: thunk
.plt:00000000000019B0
.plt:00000000000019B0 ; char *dcgettext(const char *domainname, const char *msgid, int category)
.plt:00000000000019B0 _dcgettext      proc near               ; CODE XREF: main+25E↓p
.plt:00000000000019B0                                         ; main+2A6↓p ...
.plt:00000000000019B0                 jmp     cs:dcgettext_ptr
.plt:00000000000019B0 _dcgettext      endp
.plt:00000000000019B0
.plt:00000000000019B6 ; ---------------------------------------------------------------------------
.plt:00000000000019B6                 push    10h
.plt:00000000000019BB                 jmp     sub_18A0
.plt:00000000000019C0
.plt:00000000000019C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019C0
.plt:00000000000019C0 ; Attributes: thunk
.plt:00000000000019C0
.plt:00000000000019C0 ; size_t __ctype_get_mb_cur_max(void)
.plt:00000000000019C0 ___ctype_get_mb_cur_max proc near       ; CODE XREF: quotearg_buffer_restyled+6C↓p
.plt:00000000000019C0                                         ; re_compile_internal+122↓p
.plt:00000000000019C0                 jmp     cs:__ctype_get_mb_cur_max_ptr
.plt:00000000000019C0 ___ctype_get_mb_cur_max endp
.plt:00000000000019C0
.plt:00000000000019C6 ; ---------------------------------------------------------------------------
.plt:00000000000019C6                 push    11h
.plt:00000000000019CB                 jmp     sub_18A0
.plt:00000000000019D0
.plt:00000000000019D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019D0
.plt:00000000000019D0 ; Attributes: thunk
.plt:00000000000019D0
.plt:00000000000019D0 ; size_t strlen(const char *s)
.plt:00000000000019D0 _strlen         proc near               ; CODE XREF: build_type_arg+5F↓p
.plt:00000000000019D0                                         ; quotearg_buffer_restyled+157↓p ...
.plt:00000000000019D0                 jmp     cs:strlen_ptr
.plt:00000000000019D0 _strlen         endp
.plt:00000000000019D0
.plt:00000000000019D6 ; ---------------------------------------------------------------------------
.plt:00000000000019D6                 push    12h
.plt:00000000000019DB                 jmp     sub_18A0
.plt:00000000000019E0
.plt:00000000000019E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019E0
.plt:00000000000019E0 ; Attributes: noreturn thunk
.plt:00000000000019E0
.plt:00000000000019E0 ___stack_chk_fail proc near             ; CODE XREF: quotearg_buffer_restyled:loc_43B3↓p
.plt:00000000000019E0                                         ; quotearg_n_style:loc_49D9↓p ...
.plt:00000000000019E0                 jmp     cs:__stack_chk_fail_ptr
.plt:00000000000019E0 ___stack_chk_fail endp
.plt:00000000000019E0
.plt:00000000000019E6 ; ---------------------------------------------------------------------------
.plt:00000000000019E6                 push    13h
.plt:00000000000019EB                 jmp     sub_18A0
.plt:00000000000019F0
.plt:00000000000019F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019F0
.plt:00000000000019F0 ; Attributes: thunk
.plt:00000000000019F0
.plt:00000000000019F0 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
.plt:00000000000019F0 _getopt_long    proc near               ; CODE XREF: main+92↓p
.plt:00000000000019F0                 jmp     cs:getopt_long_ptr
.plt:00000000000019F0 _getopt_long    endp
.plt:00000000000019F0
.plt:00000000000019F6 ; ---------------------------------------------------------------------------
.plt:00000000000019F6                 push    14h
.plt:00000000000019FB                 jmp     sub_18A0
.plt:0000000000001A00
.plt:0000000000001A00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A00
.plt:0000000000001A00 ; Attributes: thunk
.plt:0000000000001A00
.plt:0000000000001A00 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
.plt:0000000000001A00 _mbrtowc        proc near               ; CODE XREF: rpl_mbrtowc+32↓p
.plt:0000000000001A00                 jmp     cs:mbrtowc_ptr
.plt:0000000000001A00 _mbrtowc        endp
.plt:0000000000001A00
.plt:0000000000001A06 ; ---------------------------------------------------------------------------
.plt:0000000000001A06                 push    15h
.plt:0000000000001A0B                 jmp     sub_18A0
.plt:0000000000001A10
.plt:0000000000001A10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A10
.plt:0000000000001A10 ; Attributes: thunk
.plt:0000000000001A10
.plt:0000000000001A10 ; char *strchr(const char *s, int c)
.plt:0000000000001A10 _strchr         proc near               ; CODE XREF: xstrtoimax+EC↓p
.plt:0000000000001A10                                         ; xstrtoimax+10F↓p ...
.plt:0000000000001A10                 jmp     cs:strchr_ptr
.plt:0000000000001A10 _strchr         endp
.plt:0000000000001A10
.plt:0000000000001A16 ; ---------------------------------------------------------------------------
.plt:0000000000001A16                 push    16h
.plt:0000000000001A1B                 jmp     sub_18A0
.plt:0000000000001A20
.plt:0000000000001A20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A20
.plt:0000000000001A20 ; Attributes: thunk
.plt:0000000000001A20
.plt:0000000000001A20 ; int __overflow(_IO_FILE *, int)
.plt:0000000000001A20 ___overflow     proc near               ; CODE XREF: nl_file+2FD↓p
.plt:0000000000001A20                 jmp     cs:__overflow_ptr
.plt:0000000000001A20 ___overflow     endp
.plt:0000000000001A20
.plt:0000000000001A26 ; ---------------------------------------------------------------------------
.plt:0000000000001A26                 push    17h
.plt:0000000000001A2B                 jmp     sub_18A0
.plt:0000000000001A30
.plt:0000000000001A30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A30
.plt:0000000000001A30 ; Attributes: thunk
.plt:0000000000001A30
.plt:0000000000001A30 ; char *strrchr(const char *s, int c)
.plt:0000000000001A30 _strrchr        proc near               ; CODE XREF: set_program_name+E↓p
.plt:0000000000001A30                 jmp     cs:strrchr_ptr
.plt:0000000000001A30 _strrchr        endp
.plt:0000000000001A30
.plt:0000000000001A36 ; ---------------------------------------------------------------------------
.plt:0000000000001A36                 push    18h
.plt:0000000000001A3B                 jmp     sub_18A0
.plt:0000000000001A40
.plt:0000000000001A40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A40
.plt:0000000000001A40 ; Attributes: thunk
.plt:0000000000001A40
.plt:0000000000001A40 ; __off_t lseek(int fd, __off_t offset, int whence)
.plt:0000000000001A40 _lseek          proc near               ; CODE XREF: rpl_fclose+59↓p
.plt:0000000000001A40                                         ; rpl_fseeko+3B↓p
.plt:0000000000001A40                 jmp     cs:lseek_ptr
.plt:0000000000001A40 _lseek          endp
.plt:0000000000001A40
.plt:0000000000001A46 ; ---------------------------------------------------------------------------
.plt:0000000000001A46                 push    19h
.plt:0000000000001A4B                 jmp     sub_18A0
.plt:0000000000001A50
.plt:0000000000001A50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A50
.plt:0000000000001A50 ; Attributes: noreturn thunk
.plt:0000000000001A50
.plt:0000000000001A50 ; void __noreturn __assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
.plt:0000000000001A50 ___assert_fail  proc near               ; CODE XREF: xstrtoimax+6A9↓p
.plt:0000000000001A50                                         ; pop_fail_stack_isra_25+8F↓p ...
.plt:0000000000001A50                 jmp     cs:__assert_fail_ptr
.plt:0000000000001A50 ___assert_fail  endp
.plt:0000000000001A50
.plt:0000000000001A56 ; ---------------------------------------------------------------------------
.plt:0000000000001A56                 push    1Ah
.plt:0000000000001A5B                 jmp     sub_18A0
.plt:0000000000001A60
.plt:0000000000001A60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A60
.plt:0000000000001A60 ; Attributes: thunk
.plt:0000000000001A60
.plt:0000000000001A60 ; void *memset(void *s, int c, size_t n)
.plt:0000000000001A60 _memset         proc near               ; CODE XREF: main+56C↓p
.plt:0000000000001A60                                         ; quotearg_n_options+99↓p ...
.plt:0000000000001A60                 jmp     cs:memset_ptr
.plt:0000000000001A60 _memset         endp
.plt:0000000000001A60
.plt:0000000000001A66 ; ---------------------------------------------------------------------------
.plt:0000000000001A66                 push    1Bh
.plt:0000000000001A6B                 jmp     sub_18A0
.plt:0000000000001A70
.plt:0000000000001A70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A70
.plt:0000000000001A70 ; Attributes: thunk
.plt:0000000000001A70
.plt:0000000000001A70 ; int posix_fadvise(int fd, off_t offset, off_t len, int advise)
.plt:0000000000001A70 _posix_fadvise  proc near               ; CODE XREF: fdadvise↓j
.plt:0000000000001A70                                         ; fadvise+16↓j
.plt:0000000000001A70                 jmp     cs:posix_fadvise_ptr
.plt:0000000000001A70 _posix_fadvise  endp
.plt:0000000000001A70
.plt:0000000000001A76 ; ---------------------------------------------------------------------------
.plt:0000000000001A76                 push    1Ch
.plt:0000000000001A7B                 jmp     sub_18A0
.plt:0000000000001A80
.plt:0000000000001A80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A80
.plt:0000000000001A80 ; Attributes: thunk
.plt:0000000000001A80
.plt:0000000000001A80 ; int memcmp(const void *s1, const void *s2, size_t n)
.plt:0000000000001A80 _memcmp         proc near               ; CODE XREF: nl_file+D9↓p
.plt:0000000000001A80                                         ; nl_file+20D↓p ...
.plt:0000000000001A80                 jmp     cs:memcmp_ptr
.plt:0000000000001A80 _memcmp         endp
.plt:0000000000001A80
.plt:0000000000001A86 ; ---------------------------------------------------------------------------
.plt:0000000000001A86                 push    1Dh
.plt:0000000000001A8B                 jmp     sub_18A0
.plt:0000000000001A90
.plt:0000000000001A90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A90
.plt:0000000000001A90 ; Attributes: thunk
.plt:0000000000001A90
.plt:0000000000001A90 ; wctype_t wctype(const char *property)
.plt:0000000000001A90 _wctype         proc near               ; CODE XREF: build_charclass_isra_29+67↓p
.plt:0000000000001A90                 jmp     cs:wctype_ptr
.plt:0000000000001A90 _wctype         endp
.plt:0000000000001A90
.plt:0000000000001A96 ; ---------------------------------------------------------------------------
.plt:0000000000001A96                 push    1Eh
.plt:0000000000001A9B                 jmp     sub_18A0
.plt:0000000000001AA0
.plt:0000000000001AA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AA0
.plt:0000000000001AA0 ; Attributes: thunk
.plt:0000000000001AA0
.plt:0000000000001AA0 ; int fputs_unlocked(const char *s, FILE *stream)
.plt:0000000000001AA0 _fputs_unlocked proc near               ; CODE XREF: nl_file+2E0↓p
.plt:0000000000001AA0                                         ; usage+9D↓p ...
.plt:0000000000001AA0                 jmp     cs:fputs_unlocked_ptr
.plt:0000000000001AA0 _fputs_unlocked endp
.plt:0000000000001AA0
.plt:0000000000001AA6 ; ---------------------------------------------------------------------------
.plt:0000000000001AA6                 push    1Fh
.plt:0000000000001AAB                 jmp     sub_18A0
.plt:0000000000001AB0
.plt:0000000000001AB0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AB0
.plt:0000000000001AB0 ; Attributes: thunk
.plt:0000000000001AB0
.plt:0000000000001AB0 ; void *calloc(size_t nmemb, size_t size)
.plt:0000000000001AB0 _calloc         proc near               ; CODE XREF: xcalloc+1A↓p
.plt:0000000000001AB0                                         ; re_acquire_state_context+CA↓p ...
.plt:0000000000001AB0                 jmp     cs:calloc_ptr
.plt:0000000000001AB0 _calloc         endp
.plt:0000000000001AB0
.plt:0000000000001AB6 ; ---------------------------------------------------------------------------
.plt:0000000000001AB6                 push    20h ; ' '
.plt:0000000000001ABB                 jmp     sub_18A0
.plt:0000000000001AC0
.plt:0000000000001AC0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AC0
.plt:0000000000001AC0 ; Attributes: thunk
.plt:0000000000001AC0
.plt:0000000000001AC0 ; int strcmp(const char *s1, const char *s2)
.plt:0000000000001AC0 _strcmp         proc near               ; CODE XREF: main+3FD↓p
.plt:0000000000001AC0                                         ; main+41C↓p ...
.plt:0000000000001AC0                 jmp     cs:strcmp_ptr
.plt:0000000000001AC0 _strcmp         endp
.plt:0000000000001AC0
.plt:0000000000001AC6 ; ---------------------------------------------------------------------------
.plt:0000000000001AC6                 push    21h ; '!'
.plt:0000000000001ACB                 jmp     sub_18A0
.plt:0000000000001AD0
.plt:0000000000001AD0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AD0
.plt:0000000000001AD0 ; Attributes: thunk
.plt:0000000000001AD0
.plt:0000000000001AD0 ; void *memcpy(void *dest, const void *src, size_t n)
.plt:0000000000001AD0 _memcpy         proc near               ; CODE XREF: xmemdup+23↓j
.plt:0000000000001AD0                                         ; build_wcs_upper_buffer+15C↓p ...
.plt:0000000000001AD0                 jmp     cs:memcpy_ptr
.plt:0000000000001AD0 _memcpy         endp
.plt:0000000000001AD0
.plt:0000000000001AD6 ; ---------------------------------------------------------------------------
.plt:0000000000001AD6                 push    22h ; '"'
.plt:0000000000001ADB                 jmp     sub_18A0
.plt:0000000000001AE0
.plt:0000000000001AE0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AE0
.plt:0000000000001AE0 ; Attributes: thunk
.plt:0000000000001AE0
.plt:0000000000001AE0 ; int fileno(FILE *stream)
.plt:0000000000001AE0 _fileno         proc near               ; CODE XREF: fadvise+8↓p
.plt:0000000000001AE0                                         ; rpl_fclose+7↓p ...
.plt:0000000000001AE0                 jmp     cs:fileno_ptr
.plt:0000000000001AE0 _fileno         endp
.plt:0000000000001AE0
.plt:0000000000001AE6 ; ---------------------------------------------------------------------------
.plt:0000000000001AE6                 push    23h ; '#'
.plt:0000000000001AEB                 jmp     sub_18A0
.plt:0000000000001AF0
.plt:0000000000001AF0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AF0
.plt:0000000000001AF0 ; Attributes: thunk
.plt:0000000000001AF0
.plt:0000000000001AF0 ; int iswalnum(wint_t wc)
.plt:0000000000001AF0 _iswalnum       proc near               ; CODE XREF: re_string_context_at+CA↓p
.plt:0000000000001AF0                                         ; re_string_reconstruct+6FE↓p ...
.plt:0000000000001AF0                 jmp     cs:iswalnum_ptr
.plt:0000000000001AF0 _iswalnum       endp
.plt:0000000000001AF0
.plt:0000000000001AF6 ; ---------------------------------------------------------------------------
.plt:0000000000001AF6                 push    24h ; '$'
.plt:0000000000001AFB                 jmp     sub_18A0
.plt:0000000000001B00
.plt:0000000000001B00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B00
.plt:0000000000001B00 ; Attributes: thunk
.plt:0000000000001B00
.plt:0000000000001B00 ; void *malloc(size_t size)
.plt:0000000000001B00 _malloc         proc near               ; CODE XREF: xmalloc+4↓p
.plt:0000000000001B00                                         ; re_node_set_insert+4C↓p ...
.plt:0000000000001B00                 jmp     cs:malloc_ptr
.plt:0000000000001B00 _malloc         endp
.plt:0000000000001B00
.plt:0000000000001B06 ; ---------------------------------------------------------------------------
.plt:0000000000001B06                 push    25h ; '%'
.plt:0000000000001B0B                 jmp     sub_18A0
.plt:0000000000001B10
.plt:0000000000001B10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B10
.plt:0000000000001B10 ; Attributes: thunk
.plt:0000000000001B10
.plt:0000000000001B10 ; size_t wcrtomb(char *s, wchar_t wc, mbstate_t *ps)
.plt:0000000000001B10 _wcrtomb        proc near               ; CODE XREF: build_wcs_upper_buffer+139↓p
.plt:0000000000001B10                                         ; build_wcs_upper_buffer+29C↓p ...
.plt:0000000000001B10                 jmp     cs:wcrtomb_ptr
.plt:0000000000001B10 _wcrtomb        endp
.plt:0000000000001B10
.plt:0000000000001B16 ; ---------------------------------------------------------------------------
.plt:0000000000001B16                 push    26h ; '&'
.plt:0000000000001B1B                 jmp     sub_18A0
.plt:0000000000001B20
.plt:0000000000001B20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B20
.plt:0000000000001B20 ; Attributes: thunk
.plt:0000000000001B20
.plt:0000000000001B20 ; int fflush(FILE *stream)
.plt:0000000000001B20 _fflush         proc near               ; CODE XREF: rpl_fflush+1E↓j
.plt:0000000000001B20                                         ; rpl_fflush+3B↓j
.plt:0000000000001B20                 jmp     cs:fflush_ptr
.plt:0000000000001B20 _fflush         endp
.plt:0000000000001B20
.plt:0000000000001B26 ; ---------------------------------------------------------------------------
.plt:0000000000001B26                 push    27h ; '''
.plt:0000000000001B2B                 jmp     sub_18A0
.plt:0000000000001B30
.plt:0000000000001B30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B30
.plt:0000000000001B30 ; Attributes: thunk
.plt:0000000000001B30
.plt:0000000000001B30 ; char *nl_langinfo(nl_item item)
.plt:0000000000001B30 _nl_langinfo    proc near               ; CODE XREF: re_compile_internal+132↓p
.plt:0000000000001B30                                         ; locale_charset+9↓p
.plt:0000000000001B30                 jmp     cs:nl_langinfo_ptr
.plt:0000000000001B30 _nl_langinfo    endp
.plt:0000000000001B30
.plt:0000000000001B36 ; ---------------------------------------------------------------------------
.plt:0000000000001B36                 push    28h ; '('
.plt:0000000000001B3B                 jmp     sub_18A0
.plt:0000000000001B40
.plt:0000000000001B40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B40
.plt:0000000000001B40 ; Attributes: thunk
.plt:0000000000001B40
.plt:0000000000001B40 ; int __freading(FILE *fp)
.plt:0000000000001B40 ___freading     proc near               ; CODE XREF: rpl_fclose+13↓p
.plt:0000000000001B40                                         ; rpl_fflush+9↓p
.plt:0000000000001B40                 jmp     cs:__freading_ptr
.plt:0000000000001B40 ___freading     endp
.plt:0000000000001B40
.plt:0000000000001B46 ; ---------------------------------------------------------------------------
.plt:0000000000001B46                 push    29h ; ')'
.plt:0000000000001B4B                 jmp     sub_18A0
.plt:0000000000001B50
.plt:0000000000001B50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B50
.plt:0000000000001B50 ; Attributes: thunk
.plt:0000000000001B50
.plt:0000000000001B50 ; size_t fwrite_unlocked(const void *ptr, size_t size, size_t n, FILE *stream)
.plt:0000000000001B50 _fwrite_unlocked proc near              ; CODE XREF: nl_file+1F0↓p
.plt:0000000000001B50                 jmp     cs:fwrite_unlocked_ptr
.plt:0000000000001B50 _fwrite_unlocked endp
.plt:0000000000001B50
.plt:0000000000001B56 ; ---------------------------------------------------------------------------
.plt:0000000000001B56                 push    2Ah ; '*'
.plt:0000000000001B5B                 jmp     sub_18A0
.plt:0000000000001B60
.plt:0000000000001B60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B60
.plt:0000000000001B60 ; Attributes: thunk
.plt:0000000000001B60
.plt:0000000000001B60 ; void *realloc(void *ptr, size_t size)
.plt:0000000000001B60 _realloc        proc near               ; CODE XREF: xrealloc+11↓p
.plt:0000000000001B60                                         ; re_string_realloc_buffers+30↓p ...
.plt:0000000000001B60                 jmp     cs:realloc_ptr
.plt:0000000000001B60 _realloc        endp
.plt:0000000000001B60
.plt:0000000000001B66 ; ---------------------------------------------------------------------------
.plt:0000000000001B66                 push    2Bh ; '+'
.plt:0000000000001B6B                 jmp     sub_18A0
.plt:0000000000001B70
.plt:0000000000001B70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B70
.plt:0000000000001B70 ; Attributes: thunk
.plt:0000000000001B70
.plt:0000000000001B70 ; char *setlocale(int category, const char *locale)
.plt:0000000000001B70 _setlocale      proc near               ; CODE XREF: main+42↓p
.plt:0000000000001B70                                         ; usage+313↓p ...
.plt:0000000000001B70                 jmp     cs:setlocale_ptr
.plt:0000000000001B70 _setlocale      endp
.plt:0000000000001B70
.plt:0000000000001B76 ; ---------------------------------------------------------------------------
.plt:0000000000001B76                 push    2Ch ; ','
.plt:0000000000001B7B                 jmp     sub_18A0
.plt:0000000000001B80
.plt:0000000000001B80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B80
.plt:0000000000001B80 ; Attributes: thunk
.plt:0000000000001B80
.plt:0000000000001B80 ___printf_chk   proc near               ; CODE XREF: print_lineno+26↓p
.plt:0000000000001B80                                         ; usage+78↓p ...
.plt:0000000000001B80                 jmp     cs:__printf_chk_ptr
.plt:0000000000001B80 ___printf_chk   endp
.plt:0000000000001B80
.plt:0000000000001B86 ; ---------------------------------------------------------------------------
.plt:0000000000001B86                 push    2Dh ; '-'
.plt:0000000000001B8B                 jmp     sub_18A0
.plt:0000000000001B90
.plt:0000000000001B90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B90
.plt:0000000000001B90 ; Attributes: thunk
.plt:0000000000001B90
.plt:0000000000001B90 ; wint_t btowc(int c)
.plt:0000000000001B90 _btowc          proc near               ; CODE XREF: parse_expression+F23↓p
.plt:0000000000001B90                                         ; parse_expression+11F7↓p ...
.plt:0000000000001B90                 jmp     cs:btowc_ptr
.plt:0000000000001B90 _btowc          endp
.plt:0000000000001B90
.plt:0000000000001B96 ; ---------------------------------------------------------------------------
.plt:0000000000001B96                 push    2Eh ; '.'
.plt:0000000000001B9B                 jmp     sub_18A0
.plt:0000000000001BA0
.plt:0000000000001BA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BA0
.plt:0000000000001BA0 ; Attributes: thunk
.plt:0000000000001BA0
.plt:0000000000001BA0 ; void *memmove(void *dest, const void *src, size_t n)
.plt:0000000000001BA0 _memmove        proc near               ; CODE XREF: re_string_reconstruct+190↓p
.plt:0000000000001BA0                                         ; re_string_reconstruct+358↓p ...
.plt:0000000000001BA0                 jmp     cs:memmove_ptr
.plt:0000000000001BA0 _memmove        endp
.plt:0000000000001BA0
.plt:0000000000001BA6 ; ---------------------------------------------------------------------------
.plt:0000000000001BA6                 push    2Fh ; '/'
.plt:0000000000001BAB                 jmp     sub_18A0
.plt:0000000000001BB0
.plt:0000000000001BB0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BB0
.plt:0000000000001BB0 ; Attributes: thunk
.plt:0000000000001BB0
.plt:0000000000001BB0 ; void error(int status, int errnum, const char *format, ...)
.plt:0000000000001BB0 _error          proc near               ; CODE XREF: main+39B↓p
.plt:0000000000001BB0                                         ; main+635↓p ...
.plt:0000000000001BB0                 jmp     cs:error_ptr
.plt:0000000000001BB0 _error          endp
.plt:0000000000001BB0
.plt:0000000000001BB6 ; ---------------------------------------------------------------------------
.plt:0000000000001BB6                 push    30h ; '0'
.plt:0000000000001BBB                 jmp     sub_18A0
.plt:0000000000001BC0
.plt:0000000000001BC0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BC0
.plt:0000000000001BC0 ; Attributes: thunk
.plt:0000000000001BC0
.plt:0000000000001BC0 ; int fseeko(FILE *stream, __off_t off, int whence)
.plt:0000000000001BC0 _fseeko         proc near               ; CODE XREF: rpl_fseeko:loc_5EEA↓j
.plt:0000000000001BC0                 jmp     cs:fseeko_ptr
.plt:0000000000001BC0 _fseeko         endp
.plt:0000000000001BC0
.plt:0000000000001BC6 ; ---------------------------------------------------------------------------
.plt:0000000000001BC6                 push    31h ; '1'
.plt:0000000000001BCB                 jmp     sub_18A0
.plt:0000000000001BD0
.plt:0000000000001BD0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BD0
.plt:0000000000001BD0 ; Attributes: thunk
.plt:0000000000001BD0
.plt:0000000000001BD0 ; FILE *fopen(const char *filename, const char *modes)
.plt:0000000000001BD0 _fopen          proc near               ; CODE XREF: nl_file+38C↓p
.plt:0000000000001BD0                 jmp     cs:fopen_ptr
.plt:0000000000001BD0 _fopen          endp
.plt:0000000000001BD0
.plt:0000000000001BD6 ; ---------------------------------------------------------------------------
.plt:0000000000001BD6                 push    32h ; '2'
.plt:0000000000001BDB                 jmp     sub_18A0
.plt:0000000000001BE0
.plt:0000000000001BE0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BE0
.plt:0000000000001BE0 ; Attributes: thunk
.plt:0000000000001BE0
.plt:0000000000001BE0 ; wint_t towlower(wint_t wc)
.plt:0000000000001BE0 _towlower       proc near               ; CODE XREF: re_compile_fastmap_iter_isra_30+205↓p
.plt:0000000000001BE0                                         ; re_compile_fastmap_iter_isra_30+30E↓p
.plt:0000000000001BE0                 jmp     cs:towlower_ptr
.plt:0000000000001BE0 _towlower       endp
.plt:0000000000001BE0
.plt:0000000000001BE6 ; ---------------------------------------------------------------------------
.plt:0000000000001BE6                 push    33h ; '3'
.plt:0000000000001BEB                 jmp     sub_18A0
.plt:0000000000001BF0
.plt:0000000000001BF0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BF0
.plt:0000000000001BF0 ; Attributes: thunk
.plt:0000000000001BF0
.plt:0000000000001BF0 ; wint_t towupper(wint_t wc)
.plt:0000000000001BF0 _towupper       proc near               ; CODE XREF: build_wcs_upper_buffer+10C↓p
.plt:0000000000001BF0                                         ; build_wcs_upper_buffer+280↓p
.plt:0000000000001BF0                 jmp     cs:towupper_ptr
.plt:0000000000001BF0 _towupper       endp
.plt:0000000000001BF0
.plt:0000000000001BF6 ; ---------------------------------------------------------------------------
.plt:0000000000001BF6                 push    34h ; '4'
.plt:0000000000001BFB                 jmp     sub_18A0
.plt:0000000000001C00
.plt:0000000000001C00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C00
.plt:0000000000001C00 ; Attributes: thunk
.plt:0000000000001C00
.plt:0000000000001C00 ; int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
.plt:0000000000001C00 ___cxa_atexit   proc near               ; CODE XREF: atexit+9↓j
.plt:0000000000001C00                 jmp     cs:__cxa_atexit_ptr
.plt:0000000000001C00 ___cxa_atexit   endp
.plt:0000000000001C00
.plt:0000000000001C06 ; ---------------------------------------------------------------------------
.plt:0000000000001C06                 push    35h ; '5'
.plt:0000000000001C0B                 jmp     sub_18A0
.plt:0000000000001C10
.plt:0000000000001C10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C10
.plt:0000000000001C10 ; Attributes: noreturn thunk
.plt:0000000000001C10
.plt:0000000000001C10 ; void __noreturn exit(int status)
.plt:0000000000001C10 _exit           proc near               ; CODE XREF: main+1A4↓p
.plt:0000000000001C10                                         ; usage+58↓p
.plt:0000000000001C10                 jmp     cs:exit_ptr
.plt:0000000000001C10 _exit           endp
.plt:0000000000001C10
.plt:0000000000001C16 ; ---------------------------------------------------------------------------
.plt:0000000000001C16                 push    36h ; '6'
.plt:0000000000001C1B                 jmp     sub_18A0
.plt:0000000000001C20
.plt:0000000000001C20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C20
.plt:0000000000001C20 ; Attributes: thunk
.plt:0000000000001C20
.plt:0000000000001C20 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
.plt:0000000000001C20 _fwrite         proc near               ; CODE XREF: set_program_name+95↓p
.plt:0000000000001C20                 jmp     cs:fwrite_ptr
.plt:0000000000001C20 _fwrite         endp
.plt:0000000000001C20
.plt:0000000000001C26 ; ---------------------------------------------------------------------------
.plt:0000000000001C26                 push    37h ; '7'
.plt:0000000000001C2B                 jmp     sub_18A0
.plt:0000000000001C30
.plt:0000000000001C30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C30
.plt:0000000000001C30 ; Attributes: thunk
.plt:0000000000001C30
.plt:0000000000001C30 ___fprintf_chk  proc near               ; CODE XREF: usage+51↓p
.plt:0000000000001C30                                         ; version_etc_arn+37↓p ...
.plt:0000000000001C30                 jmp     cs:__fprintf_chk_ptr
.plt:0000000000001C30 ___fprintf_chk  endp
.plt:0000000000001C30
.plt:0000000000001C36 ; ---------------------------------------------------------------------------
.plt:0000000000001C36                 push    38h ; '8'
.plt:0000000000001C3B                 jmp     sub_18A0
.plt:0000000000001C40
.plt:0000000000001C40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C40
.plt:0000000000001C40 ; Attributes: thunk
.plt:0000000000001C40
.plt:0000000000001C40 ; int mbsinit(const mbstate_t *ps)
.plt:0000000000001C40 _mbsinit        proc near               ; CODE XREF: quotearg_buffer_restyled+9A8↓p
.plt:0000000000001C40                                         ; build_wcs_upper_buffer+22D↓p
.plt:0000000000001C40                 jmp     cs:mbsinit_ptr
.plt:0000000000001C40 _mbsinit        endp
.plt:0000000000001C40
.plt:0000000000001C46 ; ---------------------------------------------------------------------------
.plt:0000000000001C46                 push    39h ; '9'
.plt:0000000000001C4B                 jmp     sub_18A0
.plt:0000000000001C50
.plt:0000000000001C50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C50
.plt:0000000000001C50 ; Attributes: thunk
.plt:0000000000001C50
.plt:0000000000001C50 ; int iswprint(wint_t wc)
.plt:0000000000001C50 _iswprint       proc near               ; CODE XREF: quotearg_buffer_restyled+990↓p
.plt:0000000000001C50                 jmp     cs:iswprint_ptr
.plt:0000000000001C50 _iswprint       endp
.plt:0000000000001C50
.plt:0000000000001C56 ; ---------------------------------------------------------------------------
.plt:0000000000001C56                 push    3Ah ; ':'
.plt:0000000000001C5B                 jmp     sub_18A0
.plt:0000000000001C60
.plt:0000000000001C60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C60
.plt:0000000000001C60 ; Attributes: thunk
.plt:0000000000001C60
.plt:0000000000001C60 ; const __int32_t **__ctype_tolower_loc(void)
.plt:0000000000001C60 ___ctype_tolower_loc proc near          ; CODE XREF: re_compile_fastmap_iter_isra_30+11F↓p
.plt:0000000000001C60                                         ; re_compile_fastmap_iter_isra_30+2D9↓p ...
.plt:0000000000001C60                 jmp     cs:__ctype_tolower_loc_ptr
.plt:0000000000001C60 ___ctype_tolower_loc endp
.plt:0000000000001C60
.plt:0000000000001C66 ; ---------------------------------------------------------------------------
.plt:0000000000001C66                 push    3Bh ; ';'
.plt:0000000000001C6B                 jmp     sub_18A0
.plt:0000000000001C70
.plt:0000000000001C70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C70
.plt:0000000000001C70 ; Attributes: thunk
.plt:0000000000001C70
.plt:0000000000001C70 ; const unsigned __int16 **__ctype_b_loc(void)
.plt:0000000000001C70 ___ctype_b_loc  proc near               ; CODE XREF: quotearg_buffer_restyled+513↓p
.plt:0000000000001C70                                         ; build_charclass_isra_29+A8↓p ...
.plt:0000000000001C70                 jmp     cs:__ctype_b_loc_ptr
.plt:0000000000001C70 ___ctype_b_loc  endp
.plt:0000000000001C70
.plt:0000000000001C76 ; ---------------------------------------------------------------------------
.plt:0000000000001C76                 push    3Ch ; '<'
.plt:0000000000001C7B                 jmp     sub_18A0
.plt:0000000000001C7B ; } // starts at 18A0
.plt:0000000000001C7B _plt            ends
.plt:0000000000001C7B
.plt.got:0000000000001C80 ; ===========================================================================
.plt.got:0000000000001C80
.plt.got:0000000000001C80 ; Segment type: Pure code
.plt.got:0000000000001C80 ; Segment permissions: Read/Execute
.plt.got:0000000000001C80 _plt_got        segment qword public 'CODE' use64
.plt.got:0000000000001C80                 assume cs:_plt_got
.plt.got:0000000000001C80                 ;org 1C80h
.plt.got:0000000000001C80                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:0000000000001C80
.plt.got:0000000000001C80 ; =============== S U B R O U T I N E =======================================
.plt.got:0000000000001C80
.plt.got:0000000000001C80 ; Attributes: thunk
.plt.got:0000000000001C80
.plt.got:0000000000001C80 ; int __fastcall _cxa_finalize(void *)
.plt.got:0000000000001C80 __cxa_finalize  proc near               ; CODE XREF: __do_global_dtors_aux+1E↓p
.plt.got:0000000000001C80 ; __unwind {
.plt.got:0000000000001C80                 jmp     cs:__cxa_finalize_ptr
.plt.got:0000000000001C80 __cxa_finalize  endp
.plt.got:0000000000001C80
.plt.got:0000000000001C80 ; ---------------------------------------------------------------------------
.plt.got:0000000000001C86                 align 8
.plt.got:0000000000001C86 ; } // starts at 1C80
.plt.got:0000000000001C86 _plt_got        ends
.plt.got:0000000000001C86
LOAD:0000000000001C88 ; ===========================================================================
LOAD:0000000000001C88
LOAD:0000000000001C88 ; Segment type: Pure code
LOAD:0000000000001C88 ; Segment permissions: Read/Execute
LOAD:0000000000001C88 LOAD            segment byte public 'CODE' use64
LOAD:0000000000001C88                 assume cs:LOAD
LOAD:0000000000001C88                 ;org 1C88h
LOAD:0000000000001C88                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000001C88                 align 10h
LOAD:0000000000001C88 LOAD            ends
LOAD:0000000000001C88
.text:0000000000001C90 ; ===========================================================================
.text:0000000000001C90
.text:0000000000001C90 ; Segment type: Pure code
.text:0000000000001C90 ; Segment permissions: Read/Execute
.text:0000000000001C90 _text           segment para public 'CODE' use64
.text:0000000000001C90                 assume cs:_text
.text:0000000000001C90                 ;org 1C90h
.text:0000000000001C90                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:0000000000001C90
.text:0000000000001C90 ; =============== S U B R O U T I N E =======================================
.text:0000000000001C90
.text:0000000000001C90
.text:0000000000001C90 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:0000000000001C90                 public main
.text:0000000000001C90 main            proc near               ; DATA XREF: start+1D↓o
.text:0000000000001C90
.text:0000000000001C90 s1              = qword ptr -48h
.text:0000000000001C90 var_40          = qword ptr -40h
.text:0000000000001C90
.text:0000000000001C90 ; __unwind {
.text:0000000000001C90                 push    r15
.text:0000000000001C92                 push    r14
.text:0000000000001C94                 lea     r15, FORMAT_RIGHT_NOLZ ; "%*ld%s"
.text:0000000000001C9B                 push    r13
.text:0000000000001C9D                 push    r12
.text:0000000000001C9F                 lea     r14, aLn        ; "ln"
.text:0000000000001CA6                 push    rbp
.text:0000000000001CA7                 push    rbx
.text:0000000000001CA8                 mov     ebp, edi
.text:0000000000001CAA                 mov     rbx, rsi
.text:0000000000001CAD                 lea     r12, longopts
.text:0000000000001CB4                 mov     r13d, 1
.text:0000000000001CBA                 sub     rsp, 18h
.text:0000000000001CBE                 mov     rdi, [rsi]
.text:0000000000001CC1                 call    set_program_name
.text:0000000000001CC6                 lea     rsi, locale     ; locale
.text:0000000000001CCD                 mov     edi, 6          ; category
.text:0000000000001CD2                 call    _setlocale
.text:0000000000001CD7                 lea     rsi, dirname    ; "/usr/local/share/locale"
.text:0000000000001CDE                 lea     rdi, domainname ; "coreutils"
.text:0000000000001CE5                 call    _bindtextdomain
.text:0000000000001CEA                 lea     rdi, domainname ; "coreutils"
.text:0000000000001CF1                 call    _textdomain
.text:0000000000001CF6                 lea     rdi, close_stdout
.text:0000000000001CFD                 call    atexit
.text:0000000000001D02                 mov     cs:have_read_stdin, 0
.text:0000000000001D09                 nop     dword ptr [rax+00000000h]
.text:0000000000001D10
.text:0000000000001D10 loc_1D10:                               ; CODE XREF: main+D4↓j
.text:0000000000001D10                                         ; main+110↓j ...
.text:0000000000001D10                 lea     rdx, shortopts  ; "h:b:f:v:i:pl:s:w:n:d:"
.text:0000000000001D17                 xor     r8d, r8d        ; longind
.text:0000000000001D1A                 mov     rcx, r12        ; longopts
.text:0000000000001D1D                 mov     rsi, rbx        ; argv
.text:0000000000001D20                 mov     edi, ebp        ; argc
.text:0000000000001D22                 call    _getopt_long
.text:0000000000001D27                 cmp     eax, 0FFFFFFFFh
.text:0000000000001D2A                 jz      loc_20D0
.text:0000000000001D30                 cmp     eax, 69h ; 'i'
.text:0000000000001D33                 jz      loc_1F78
.text:0000000000001D39                 jle     short loc_1D70
.text:0000000000001D3B                 cmp     eax, 70h ; 'p'
.text:0000000000001D3E                 jz      loc_1E40
.text:0000000000001D44                 jle     short loc_1DA8
.text:0000000000001D46                 cmp     eax, 76h ; 'v'
.text:0000000000001D49                 jz      loc_1F28
.text:0000000000001D4F                 cmp     eax, 77h ; 'w'
.text:0000000000001D52                 jz      loc_1EE0
.text:0000000000001D58                 cmp     eax, 73h ; 's'
.text:0000000000001D5B                 jz      loc_1FC0
.text:0000000000001D61
.text:0000000000001D61 loc_1D61:                               ; CODE XREF: main+100↓j
.text:0000000000001D61                                         ; main+124↓j ...
.text:0000000000001D61                 xor     r13d, r13d
.text:0000000000001D64                 jmp     short loc_1D10
.text:0000000000001D64 ; ---------------------------------------------------------------------------
.text:0000000000001D66                 align 10h
.text:0000000000001D70
.text:0000000000001D70 loc_1D70:                               ; CODE XREF: main+A9↑j
.text:0000000000001D70                 cmp     eax, 62h ; 'b'
.text:0000000000001D73                 jz      loc_1FD8
.text:0000000000001D79                 jle     short loc_1DF0
.text:0000000000001D7B                 cmp     eax, 66h ; 'f'
.text:0000000000001D7E                 jz      loc_1E98
.text:0000000000001D84                 cmp     eax, 68h ; 'h'
.text:0000000000001D87                 jz      loc_1E50
.text:0000000000001D8D                 cmp     eax, 64h ; 'd'
.text:0000000000001D90                 jnz     short loc_1D61
.text:0000000000001D92                 mov     rax, cs:optarg@@GLIBC_2_2_5
.text:0000000000001D99                 mov     cs:section_del, rax
.text:0000000000001DA0                 jmp     loc_1D10
.text:0000000000001DA0 ; ---------------------------------------------------------------------------
.text:0000000000001DA5                 align 8
.text:0000000000001DA8
.text:0000000000001DA8 loc_1DA8:                               ; CODE XREF: main+B4↑j
.text:0000000000001DA8                 cmp     eax, 6Ch ; 'l'
.text:0000000000001DAB                 jz      loc_2038
.text:0000000000001DB1                 cmp     eax, 6Eh ; 'n'
.text:0000000000001DB4                 jnz     short loc_1D61
.text:0000000000001DB6                 mov     rdx, cs:optarg@@GLIBC_2_2_5
.text:0000000000001DBD                 mov     ecx, 3
.text:0000000000001DC2                 mov     rdi, r14
.text:0000000000001DC5                 mov     rsi, rdx
.text:0000000000001DC8                 repe cmpsb
.text:0000000000001DCA                 setnbe  al
.text:0000000000001DCD                 sbb     al, 0
.text:0000000000001DCF                 test    al, al
.text:0000000000001DD1                 jnz     loc_207F
.text:0000000000001DD7                 lea     rax, FORMAT_LEFT ; "%-*ld%s"
.text:0000000000001DDE                 mov     cs:lineno_format, rax
.text:0000000000001DE5                 jmp     loc_1D10
.text:0000000000001DE5 ; ---------------------------------------------------------------------------
.text:0000000000001DEA                 align 10h
.text:0000000000001DF0
.text:0000000000001DF0 loc_1DF0:                               ; CODE XREF: main+E9↑j
.text:0000000000001DF0                 cmp     eax, 0FFFFFF7Dh
.text:0000000000001DF5                 jnz     loc_2281
.text:0000000000001DFB                 sub     rsp, 8
.text:0000000000001DFF                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:0000000000001E06                 mov     rcx, cs:Version
.text:0000000000001E0D                 push    0
.text:0000000000001E0F                 lea     r9, aDavidMackenzie ; "David MacKenzie"
.text:0000000000001E16                 lea     r8, aScottBartram ; "Scott Bartram"
.text:0000000000001E1D                 lea     rdx, unk_14432
.text:0000000000001E24                 lea     rsi, aNl        ; "nl"
.text:0000000000001E2B                 xor     eax, eax
.text:0000000000001E2D                 call    version_etc
.text:0000000000001E32                 xor     edi, edi        ; status
.text:0000000000001E34                 call    _exit
.text:0000000000001E34 ; ---------------------------------------------------------------------------
.text:0000000000001E39                 align 20h
.text:0000000000001E40
.text:0000000000001E40 loc_1E40:                               ; CODE XREF: main+AE↑j
.text:0000000000001E40                 mov     cs:reset_numbers, 0
.text:0000000000001E47                 jmp     loc_1D10
.text:0000000000001E47 ; ---------------------------------------------------------------------------
.text:0000000000001E4C                 align 10h
.text:0000000000001E50
.text:0000000000001E50 loc_1E50:                               ; CODE XREF: main+F7↑j
.text:0000000000001E50                 lea     rdx, header_fastmap
.text:0000000000001E57                 lea     rsi, header_regex
.text:0000000000001E5E                 lea     rdi, header_type
.text:0000000000001E65                 call    build_type_arg
.text:0000000000001E6A                 test    al, al
.text:0000000000001E6C                 jnz     loc_1D10
.text:0000000000001E72                 mov     rdi, cs:optarg@@GLIBC_2_2_5
.text:0000000000001E79                 call    quote
.text:0000000000001E7E                 mov     edx, 5
.text:0000000000001E83                 mov     r13, rax
.text:0000000000001E86                 lea     rsi, aInvalidHeaderN ; "invalid header numbering style: %s"
.text:0000000000001E8D                 jmp     loc_2015
.text:0000000000001E8D ; ---------------------------------------------------------------------------
.text:0000000000001E92                 align 8
.text:0000000000001E98
.text:0000000000001E98 loc_1E98:                               ; CODE XREF: main+EE↑j
.text:0000000000001E98                 lea     rdx, footer_fastmap
.text:0000000000001E9F                 lea     rsi, footer_regex
.text:0000000000001EA6                 lea     rdi, footer_type
.text:0000000000001EAD                 call    build_type_arg
.text:0000000000001EB2                 test    al, al
.text:0000000000001EB4                 jnz     loc_1D10
.text:0000000000001EBA                 mov     rdi, cs:optarg@@GLIBC_2_2_5
.text:0000000000001EC1                 call    quote
.text:0000000000001EC6                 mov     edx, 5
.text:0000000000001ECB                 mov     r13, rax
.text:0000000000001ECE                 lea     rsi, aInvalidFooterN ; "invalid footer numbering style: %s"
.text:0000000000001ED5                 jmp     loc_2015
.text:0000000000001ED5 ; ---------------------------------------------------------------------------
.text:0000000000001EDA                 align 20h
.text:0000000000001EE0
.text:0000000000001EE0 loc_1EE0:                               ; CODE XREF: main+C2↑j
.text:0000000000001EE0                 lea     rsi, msgid      ; "invalid line number field width"
.text:0000000000001EE7                 mov     edx, 5          ; category
.text:0000000000001EEC                 xor     edi, edi        ; domainname
.text:0000000000001EEE                 call    _dcgettext
.text:0000000000001EF3                 mov     rdi, cs:optarg@@GLIBC_2_2_5
.text:0000000000001EFA                 lea     rcx, locale
.text:0000000000001F01                 mov     r8, rax
.text:0000000000001F04                 xor     r9d, r9d
.text:0000000000001F07                 mov     edx, 7FFFFFFFh
.text:0000000000001F0C                 mov     esi, 1
.text:0000000000001F11                 call    xdectoumax
.text:0000000000001F16                 mov     cs:lineno_width, eax
.text:0000000000001F1C                 jmp     loc_1D10
.text:0000000000001F1C ; ---------------------------------------------------------------------------
.text:0000000000001F21                 align 8
.text:0000000000001F28
.text:0000000000001F28 loc_1F28:                               ; CODE XREF: main+B9↑j
.text:0000000000001F28                 lea     rsi, aInvalidStartin ; "invalid starting line number"
.text:0000000000001F2F                 mov     edx, 5          ; category
.text:0000000000001F34                 xor     edi, edi        ; domainname
.text:0000000000001F36                 call    _dcgettext
.text:0000000000001F3B                 mov     rdi, cs:optarg@@GLIBC_2_2_5
.text:0000000000001F42                 lea     rcx, locale
.text:0000000000001F49                 mov     r8, rax
.text:0000000000001F4C                 xor     r9d, r9d
.text:0000000000001F4F                 mov     rdx, 7FFFFFFFFFFFFFFFh
.text:0000000000001F59                 mov     rsi, 8000000000000000h
.text:0000000000001F63                 call    xdectoumax
.text:0000000000001F68                 mov     cs:starting_line_number, rax
.text:0000000000001F6F                 jmp     loc_1D10
.text:0000000000001F6F ; ---------------------------------------------------------------------------
.text:0000000000001F74                 align 8
.text:0000000000001F78
.text:0000000000001F78 loc_1F78:                               ; CODE XREF: main+A3↑j
.text:0000000000001F78                 lea     rsi, aInvalidLineNum_0 ; "invalid line number increment"
.text:0000000000001F7F                 mov     edx, 5          ; category
.text:0000000000001F84                 xor     edi, edi        ; domainname
.text:0000000000001F86                 call    _dcgettext
.text:0000000000001F8B                 mov     rdi, cs:optarg@@GLIBC_2_2_5
.text:0000000000001F92                 lea     rcx, locale
.text:0000000000001F99                 mov     r8, rax
.text:0000000000001F9C                 xor     r9d, r9d
.text:0000000000001F9F                 mov     rdx, 7FFFFFFFFFFFFFFFh
.text:0000000000001FA9                 mov     esi, 1
.text:0000000000001FAE                 call    xdectoumax
.text:0000000000001FB3                 mov     cs:page_incr, rax
.text:0000000000001FBA                 jmp     loc_1D10
.text:0000000000001FBA ; ---------------------------------------------------------------------------
.text:0000000000001FBF                 align 20h
.text:0000000000001FC0
.text:0000000000001FC0 loc_1FC0:                               ; CODE XREF: main+CB↑j
.text:0000000000001FC0                 mov     rax, cs:optarg@@GLIBC_2_2_5
.text:0000000000001FC7                 mov     cs:separator_str, rax
.text:0000000000001FCE                 jmp     loc_1D10
.text:0000000000001FCE ; ---------------------------------------------------------------------------
.text:0000000000001FD3                 align 8
.text:0000000000001FD8
.text:0000000000001FD8 loc_1FD8:                               ; CODE XREF: main+E3↑j
.text:0000000000001FD8                 lea     rdx, body_fastmap
.text:0000000000001FDF                 lea     rsi, body_regex
.text:0000000000001FE6                 lea     rdi, body_type
.text:0000000000001FED                 call    build_type_arg
.text:0000000000001FF2                 test    al, al
.text:0000000000001FF4                 jnz     loc_1D10
.text:0000000000001FFA                 mov     rdi, cs:optarg@@GLIBC_2_2_5
.text:0000000000002001                 call    quote
.text:0000000000002006                 lea     rsi, aInvalidBodyNum ; "invalid body numbering style: %s"
.text:000000000000200D                 mov     r13, rax
.text:0000000000002010                 mov     edx, 5          ; category
.text:0000000000002015
.text:0000000000002015 loc_2015:                               ; CODE XREF: main+1FD↑j
.text:0000000000002015                                         ; main+245↑j ...
.text:0000000000002015                 xor     edi, edi        ; domainname
.text:0000000000002017                 call    _dcgettext
.text:000000000000201C                 mov     rcx, r13
.text:000000000000201F                 mov     rdx, rax        ; format
.text:0000000000002022                 xor     esi, esi        ; errnum
.text:0000000000002024                 xor     edi, edi        ; status
.text:0000000000002026                 xor     eax, eax
.text:0000000000002028                 xor     r13d, r13d
.text:000000000000202B                 call    _error
.text:0000000000002030                 jmp     loc_1D10
.text:0000000000002030 ; ---------------------------------------------------------------------------
.text:0000000000002035                 align 8
.text:0000000000002038
.text:0000000000002038 loc_2038:                               ; CODE XREF: main+11B↑j
.text:0000000000002038                 lea     rsi, aInvalidLineNum_1 ; "invalid line number of blank lines"
.text:000000000000203F                 mov     edx, 5          ; category
.text:0000000000002044                 xor     edi, edi        ; domainname
.text:0000000000002046                 call    _dcgettext
.text:000000000000204B                 mov     rdi, cs:optarg@@GLIBC_2_2_5
.text:0000000000002052                 lea     rcx, locale
.text:0000000000002059                 mov     r8, rax
.text:000000000000205C                 xor     r9d, r9d
.text:000000000000205F                 mov     rdx, 7FFFFFFFFFFFFFFFh
.text:0000000000002069                 mov     esi, 1
.text:000000000000206E                 call    xdectoumax
.text:0000000000002073                 mov     cs:blank_join, rax
.text:000000000000207A                 jmp     loc_1D10
.text:000000000000207F ; ---------------------------------------------------------------------------
.text:000000000000207F
.text:000000000000207F loc_207F:                               ; CODE XREF: main+141↑j
.text:000000000000207F                 lea     rsi, s2         ; "rn"
.text:0000000000002086                 mov     rdi, rdx        ; s1
.text:0000000000002089                 mov     [rsp+48h+s1], rdx
.text:000000000000208D                 call    _strcmp
.text:0000000000002092                 test    eax, eax
.text:0000000000002094                 mov     rdx, [rsp+48h+s1]
.text:0000000000002098                 jz      loc_2293
.text:000000000000209E                 lea     rsi, aRz        ; "rz"
.text:00000000000020A5                 mov     rdi, rdx        ; s1
.text:00000000000020A8                 mov     [rsp+48h+s1], rdx
.text:00000000000020AC                 call    _strcmp
.text:00000000000020B1                 test    eax, eax
.text:00000000000020B3                 mov     rdx, [rsp+48h+s1]
.text:00000000000020B7                 jnz     loc_22CA
.text:00000000000020BD                 lea     rax, FORMAT_RIGHT_LZ ; "%0*ld%s"
.text:00000000000020C4                 mov     cs:lineno_format, rax
.text:00000000000020CB                 jmp     loc_1D10
.text:00000000000020D0 ; ---------------------------------------------------------------------------
.text:00000000000020D0
.text:00000000000020D0 loc_20D0:                               ; CODE XREF: main+9A↑j
.text:00000000000020D0                 test    r13b, r13b
.text:00000000000020D3                 jz      loc_22FA
.text:00000000000020D9                 mov     rdi, cs:section_del
.text:00000000000020E0                 or      r8, 0FFFFFFFFFFFFFFFFh
.text:00000000000020E4                 xor     edx, edx
.text:00000000000020E6                 mov     rcx, r8
.text:00000000000020E9                 mov     [rsp+48h+var_40], r8
.text:00000000000020EE                 mov     eax, edx
.text:00000000000020F0                 mov     byte ptr [rsp+48h+s1], dl
.text:00000000000020F3                 repne scasb
.text:00000000000020F5                 not     rcx
.text:00000000000020F8                 lea     r12, [rcx+r8]
.text:00000000000020FC                 mov     r14, rcx
.text:00000000000020FF                 lea     rdi, [r12+r12*2]
.text:0000000000002103                 mov     cs:header_del_len, rdi
.text:000000000000210A                 add     rdi, 1
.text:000000000000210E                 call    xmalloc
.text:0000000000002113                 mov     r15, cs:section_del
.text:000000000000211A                 mov     rdi, rax        ; dest
.text:000000000000211D                 mov     cs:header_del, rax
.text:0000000000002124                 mov     rsi, r15        ; src
.text:0000000000002127                 call    _stpcpy
.text:000000000000212C                 mov     rsi, r15        ; src
.text:000000000000212F                 mov     rdi, rax        ; dest
.text:0000000000002132                 call    _stpcpy
.text:0000000000002137                 mov     rsi, r15        ; src
.text:000000000000213A                 mov     rdi, rax        ; dest
.text:000000000000213D                 call    _strcpy
.text:0000000000002142                 lea     rdi, [r12+r12]
.text:0000000000002146                 mov     cs:body_del_len, rdi
.text:000000000000214D                 add     rdi, 1
.text:0000000000002151                 call    xmalloc
.text:0000000000002156                 mov     r15, cs:section_del
.text:000000000000215D                 mov     rdi, rax        ; dest
.text:0000000000002160                 mov     cs:body_del, rax
.text:0000000000002167                 mov     rsi, r15        ; src
.text:000000000000216A                 call    _stpcpy
.text:000000000000216F                 mov     rsi, r15        ; src
.text:0000000000002172                 mov     rdi, rax        ; dest
.text:0000000000002175                 call    _strcpy
.text:000000000000217A                 mov     rdi, r14
.text:000000000000217D                 mov     cs:footer_del_len, r12
.text:0000000000002184                 call    xmalloc
.text:0000000000002189                 mov     rsi, cs:section_del ; src
.text:0000000000002190                 mov     rdi, rax        ; dest
.text:0000000000002193                 mov     cs:footer_del, rax
.text:000000000000219A                 call    _strcpy
.text:000000000000219F                 lea     rdi, line_buf
.text:00000000000021A6                 call    initbuffer
.text:00000000000021AB                 movzx   edx, byte ptr [rsp+48h+s1]
.text:00000000000021AF                 mov     r8, [rsp+48h+var_40]
.text:00000000000021B4                 mov     rdi, cs:separator_str
.text:00000000000021BB                 mov     rcx, r8
.text:00000000000021BE                 mov     eax, edx
.text:00000000000021C0                 repne scasb
.text:00000000000021C2                 movsxd  rax, cs:lineno_width
.text:00000000000021C9                 mov     r12, rcx
.text:00000000000021CC                 not     r12
.text:00000000000021CF                 sub     r12, 1
.text:00000000000021D3                 lea     rdi, [r12+rax+1]
.text:00000000000021D8                 call    xmalloc
.text:00000000000021DD                 mov     rcx, rax
.text:00000000000021E0                 mov     cs:print_no_line_fmt, rax
.text:00000000000021E7                 movsxd  rax, cs:lineno_width
.text:00000000000021EE                 mov     esi, 20h ; ' '  ; c
.text:00000000000021F3                 mov     rdi, rcx        ; s
.text:00000000000021F6                 add     r12, rax
.text:00000000000021F9                 mov     rdx, r12        ; n
.text:00000000000021FC                 call    _memset
.text:0000000000002201                 mov     byte ptr [rax+r12], 0
.text:0000000000002206                 mov     rax, cs:starting_line_number
.text:000000000000220D                 mov     cs:line_no, rax
.text:0000000000002214                 mov     rax, cs:body_type
.text:000000000000221B                 mov     cs:current_type, rax
.text:0000000000002222                 lea     rax, body_regex
.text:0000000000002229                 mov     cs:current_regex, rax
.text:0000000000002230                 mov     eax, cs:optind@@GLIBC_2_2_5
.text:0000000000002236                 cmp     eax, ebp
.text:0000000000002238                 jz      loc_22E6
.text:000000000000223E                 jge     short loc_2261
.text:0000000000002240
.text:0000000000002240 loc_2240:                               ; CODE XREF: main+5CF↓j
.text:0000000000002240                 cdqe
.text:0000000000002242                 mov     rdi, [rbx+rax*8]
.text:0000000000002246                 call    nl_file
.text:000000000000224B                 and     r13d, eax
.text:000000000000224E                 mov     eax, cs:optind@@GLIBC_2_2_5
.text:0000000000002254                 add     eax, 1
.text:0000000000002257                 cmp     eax, ebp
.text:0000000000002259                 mov     cs:optind@@GLIBC_2_2_5, eax
.text:000000000000225F                 jl      short loc_2240
.text:0000000000002261
.text:0000000000002261 loc_2261:                               ; CODE XREF: main+5AE↑j
.text:0000000000002261                                         ; main+665↓j
.text:0000000000002261                 cmp     cs:have_read_stdin, 0
.text:0000000000002268                 jnz     short loc_229F
.text:000000000000226A
.text:000000000000226A loc_226A:                               ; CODE XREF: main+61E↓j
.text:000000000000226A                 add     rsp, 18h
.text:000000000000226E                 xor     r13d, 1
.text:0000000000002272                 pop     rbx
.text:0000000000002273                 movzx   eax, r13b
.text:0000000000002277                 pop     rbp
.text:0000000000002278                 pop     r12
.text:000000000000227A                 pop     r13
.text:000000000000227C                 pop     r14
.text:000000000000227E                 pop     r15
.text:0000000000002280                 retn
.text:0000000000002281 ; ---------------------------------------------------------------------------
.text:0000000000002281
.text:0000000000002281 loc_2281:                               ; CODE XREF: main+165↑j
.text:0000000000002281                 cmp     eax, 0FFFFFF7Eh
.text:0000000000002286                 jnz     loc_1D61
.text:000000000000228C                 xor     edi, edi        ; status
.text:000000000000228E                 call    usage
.text:0000000000002293 ; ---------------------------------------------------------------------------
.text:0000000000002293
.text:0000000000002293 loc_2293:                               ; CODE XREF: main+408↑j
.text:0000000000002293                 mov     cs:lineno_format, r15
.text:000000000000229A                 jmp     loc_1D10
.text:000000000000229F ; ---------------------------------------------------------------------------
.text:000000000000229F
.text:000000000000229F loc_229F:                               ; CODE XREF: main+5D8↑j
.text:000000000000229F                 mov     rdi, cs:stdin@@GLIBC_2_2_5 ; stream
.text:00000000000022A6                 call    rpl_fclose
.text:00000000000022AB                 add     eax, 1
.text:00000000000022AE                 jnz     short loc_226A
.text:00000000000022B0                 call    ___errno_location
.text:00000000000022B5                 mov     esi, [rax]      ; errnum
.text:00000000000022B7                 lea     rdx, aLt+2      ; format
.text:00000000000022BE                 mov     edi, 1          ; status
.text:00000000000022C3                 xor     eax, eax
.text:00000000000022C5                 call    _error
.text:00000000000022CA
.text:00000000000022CA loc_22CA:                               ; CODE XREF: main+427↑j
.text:00000000000022CA                 mov     rdi, rdx
.text:00000000000022CD                 call    quote
.text:00000000000022D2                 mov     edx, 5
.text:00000000000022D7                 mov     r13, rax
.text:00000000000022DA                 lea     rsi, aInvalidLineNum_2 ; "invalid line numbering format: %s"
.text:00000000000022E1                 jmp     loc_2015
.text:00000000000022E6 ; ---------------------------------------------------------------------------
.text:00000000000022E6
.text:00000000000022E6 loc_22E6:                               ; CODE XREF: main+5A8↑j
.text:00000000000022E6                 lea     rdi, aLt+2      ; "-"
.text:00000000000022ED                 call    nl_file
.text:00000000000022F2                 mov     r13d, eax
.text:00000000000022F5                 jmp     loc_2261
.text:00000000000022FA ; ---------------------------------------------------------------------------
.text:00000000000022FA
.text:00000000000022FA loc_22FA:                               ; CODE XREF: main+443↑j
.text:00000000000022FA                 mov     edi, 1          ; status
.text:00000000000022FF                 call    usage
.text:00000000000022FF ; } // starts at 1C90
.text:00000000000022FF main            endp
.text:00000000000022FF
.text:00000000000022FF ; ---------------------------------------------------------------------------
.text:0000000000002304                 align 10h
.text:0000000000002310
.text:0000000000002310 ; =============== S U B R O U T I N E =======================================
.text:0000000000002310
.text:0000000000002310 ; Attributes: noreturn fuzzy-sp info_from_lumina
.text:0000000000002310
.text:0000000000002310 ; void __fastcall __noreturn start(__int64, __int64, void (*)(void))
.text:0000000000002310                 public start
.text:0000000000002310 start           proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:0000000000002310 ; __unwind {
.text:0000000000002310                 xor     ebp, ebp
.text:0000000000002312                 mov     r9, rdx         ; rtld_fini
.text:0000000000002315                 pop     rsi             ; argc
.text:0000000000002316                 mov     rdx, rsp        ; ubp_av
.text:0000000000002319                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:000000000000231D                 push    rax
.text:000000000000231E                 push    rsp             ; stack_end
.text:000000000000231F                 lea     r8, __libc_csu_fini ; fini
.text:0000000000002326                 lea     rcx, __libc_csu_init ; init
.text:000000000000232D                 lea     rdi, main       ; main
.text:0000000000002334                 call    cs:__libc_start_main_ptr
.text:000000000000233A                 hlt
.text:000000000000233A ; } // starts at 2310
.text:000000000000233A start           endp
.text:000000000000233A
.text:000000000000233A ; ---------------------------------------------------------------------------
.text:000000000000233B                 align 20h
.text:0000000000002340
.text:0000000000002340 ; =============== S U B R O U T I N E =======================================
.text:0000000000002340
.text:0000000000002340 ; Attributes: bp-based frame info_from_lumina
.text:0000000000002340
.text:0000000000002340 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_23F3↓p
.text:0000000000002340                 lea     rdi, __bss_start
.text:0000000000002347                 push    rbp
.text:0000000000002348                 lea     rax, __bss_start
.text:000000000000234F                 cmp     rax, rdi
.text:0000000000002352                 mov     rbp, rsp
.text:0000000000002355                 jz      short loc_2370
.text:0000000000002357                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:000000000000235E                 test    rax, rax
.text:0000000000002361                 jz      short loc_2370
.text:0000000000002363                 pop     rbp
.text:0000000000002364                 jmp     rax
.text:0000000000002364 ; ---------------------------------------------------------------------------
.text:0000000000002366                 align 10h
.text:0000000000002370
.text:0000000000002370 loc_2370:                               ; CODE XREF: deregister_tm_clones+15↑j
.text:0000000000002370                                         ; deregister_tm_clones+21↑j
.text:0000000000002370                 pop     rbp
.text:0000000000002371                 retn
.text:0000000000002371 deregister_tm_clones endp
.text:0000000000002371
.text:0000000000002371 ; ---------------------------------------------------------------------------
.text:0000000000002372                 align 20h
.text:0000000000002380
.text:0000000000002380 ; =============== S U B R O U T I N E =======================================
.text:0000000000002380
.text:0000000000002380 ; Attributes: bp-based frame info_from_lumina
.text:0000000000002380
.text:0000000000002380 register_tm_clones proc near            ; CODE XREF: frame_dummy+5↓j
.text:0000000000002380                 lea     rdi, __bss_start
.text:0000000000002387                 lea     rsi, __bss_start
.text:000000000000238E                 push    rbp
.text:000000000000238F                 sub     rsi, rdi
.text:0000000000002392                 mov     rbp, rsp
.text:0000000000002395                 sar     rsi, 3
.text:0000000000002399                 mov     rax, rsi
.text:000000000000239C                 shr     rax, 3Fh
.text:00000000000023A0                 add     rsi, rax
.text:00000000000023A3                 sar     rsi, 1
.text:00000000000023A6                 jz      short loc_23C0
.text:00000000000023A8                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:00000000000023AF                 test    rax, rax
.text:00000000000023B2                 jz      short loc_23C0
.text:00000000000023B4                 pop     rbp
.text:00000000000023B5                 jmp     rax
.text:00000000000023B5 ; ---------------------------------------------------------------------------
.text:00000000000023B7                 align 20h
.text:00000000000023C0
.text:00000000000023C0 loc_23C0:                               ; CODE XREF: register_tm_clones+26↑j
.text:00000000000023C0                                         ; register_tm_clones+32↑j
.text:00000000000023C0                 pop     rbp
.text:00000000000023C1                 retn
.text:00000000000023C1 register_tm_clones endp
.text:00000000000023C1
.text:00000000000023C1 ; ---------------------------------------------------------------------------
.text:00000000000023C2                 align 10h
.text:00000000000023D0
.text:00000000000023D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000023D0
.text:00000000000023D0 ; Attributes: info_from_lumina
.text:00000000000023D0
.text:00000000000023D0 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:00000000000023D0                 cmp     cs:completed_7697, 0
.text:00000000000023D7                 jnz     short locret_2408
.text:00000000000023D9                 cmp     cs:__cxa_finalize_ptr, 0
.text:00000000000023E1                 push    rbp
.text:00000000000023E2                 mov     rbp, rsp
.text:00000000000023E5                 jz      short loc_23F3
.text:00000000000023E7                 mov     rdi, cs:__dso_handle ; void *
.text:00000000000023EE                 call    __cxa_finalize
.text:00000000000023F3
.text:00000000000023F3 loc_23F3:                               ; CODE XREF: __do_global_dtors_aux+15↑j
.text:00000000000023F3                 call    deregister_tm_clones
.text:00000000000023F8                 mov     cs:completed_7697, 1
.text:00000000000023FF                 pop     rbp
.text:0000000000002400                 retn
.text:0000000000002400 ; ---------------------------------------------------------------------------
.text:0000000000002401                 align 8
.text:0000000000002408
.text:0000000000002408 locret_2408:                            ; CODE XREF: __do_global_dtors_aux+7↑j
.text:0000000000002408                 rep retn
.text:0000000000002408 __do_global_dtors_aux endp
.text:0000000000002408
.text:0000000000002408 ; ---------------------------------------------------------------------------
.text:000000000000240A                 align 10h
.text:0000000000002410
.text:0000000000002410 ; =============== S U B R O U T I N E =======================================
.text:0000000000002410
.text:0000000000002410 ; Attributes: bp-based frame
.text:0000000000002410
.text:0000000000002410 frame_dummy     proc near               ; CODE XREF: __libc_csu_init+49↓p
.text:0000000000002410                                         ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:0000000000002410                 push    rbp
.text:0000000000002411                 mov     rbp, rsp
.text:0000000000002414                 pop     rbp
.text:0000000000002415                 jmp     register_tm_clones
.text:0000000000002415 frame_dummy     endp
.text:0000000000002415
.text:0000000000002415 ; ---------------------------------------------------------------------------
.text:000000000000241A                 align 20h
.text:0000000000002420
.text:0000000000002420 ; =============== S U B R O U T I N E =======================================
.text:0000000000002420
.text:0000000000002420
.text:0000000000002420 build_type_arg  proc near               ; CODE XREF: main+1D5↑p
.text:0000000000002420                                         ; main+21D↑p ...
.text:0000000000002420 ; __unwind {
.text:0000000000002420                 mov     rcx, cs:optarg@@GLIBC_2_2_5
.text:0000000000002427                 movzx   eax, byte ptr [rcx]
.text:000000000000242A                 cmp     al, 6Eh ; 'n'
.text:000000000000242C                 jz      loc_24B4
.text:0000000000002432                 jle     short loc_24B0
.text:0000000000002434                 cmp     al, 70h ; 'p'
.text:0000000000002436                 jnz     short loc_24A8
.text:0000000000002438                 push    rbp
.text:0000000000002439                 lea     rax, [rcx+1]
.text:000000000000243D                 push    rbx
.text:000000000000243E                 mov     rbx, rsi
.text:0000000000002441                 sub     rsp, 8
.text:0000000000002445                 mov     cs:optarg@@GLIBC_2_2_5, rax
.text:000000000000244C                 mov     [rdi], rcx
.text:000000000000244F                 mov     rbp, cs:optarg@@GLIBC_2_2_5
.text:0000000000002456                 mov     qword ptr [rsi], 0
.text:000000000000245D                 mov     [rsi+20h], rdx
.text:0000000000002461                 mov     qword ptr [rsi+8], 0
.text:0000000000002469                 mov     qword ptr [rsi+28h], 0
.text:0000000000002471                 mov     cs:rpl_re_syntax_options, 2C6h
.text:000000000000247C                 mov     rdi, rbp        ; s
.text:000000000000247F                 call    _strlen
.text:0000000000002484                 mov     rdx, rbx
.text:0000000000002487                 mov     rsi, rax
.text:000000000000248A                 mov     rdi, rbp
.text:000000000000248D                 call    rpl_re_compile_pattern
.text:0000000000002492                 test    rax, rax
.text:0000000000002495                 jnz     short loc_24BD
.text:0000000000002497                 add     rsp, 8
.text:000000000000249B                 mov     eax, 1
.text:00000000000024A0                 pop     rbx
.text:00000000000024A1                 pop     rbp
.text:00000000000024A2                 retn
.text:00000000000024A2 ; ---------------------------------------------------------------------------
.text:00000000000024A3                 align 8
.text:00000000000024A8
.text:00000000000024A8 loc_24A8:                               ; CODE XREF: build_type_arg+16↑j
.text:00000000000024A8                 cmp     al, 74h ; 't'
.text:00000000000024AA                 jz      short loc_24B4
.text:00000000000024AC
.text:00000000000024AC loc_24AC:                               ; CODE XREF: build_type_arg+92↓j
.text:00000000000024AC                 xor     eax, eax
.text:00000000000024AE                 retn
.text:00000000000024AE ; ---------------------------------------------------------------------------
.text:00000000000024AF                 align 10h
.text:00000000000024B0
.text:00000000000024B0 loc_24B0:                               ; CODE XREF: build_type_arg+12↑j
.text:00000000000024B0                 cmp     al, 61h ; 'a'
.text:00000000000024B2                 jnz     short loc_24AC
.text:00000000000024B4
.text:00000000000024B4 loc_24B4:                               ; CODE XREF: build_type_arg+C↑j
.text:00000000000024B4                                         ; build_type_arg+8A↑j
.text:00000000000024B4                 mov     [rdi], rcx
.text:00000000000024B7                 mov     eax, 1
.text:00000000000024BC                 retn
.text:00000000000024BD ; ---------------------------------------------------------------------------
.text:00000000000024BD
.text:00000000000024BD loc_24BD:                               ; CODE XREF: build_type_arg+75↑j
.text:00000000000024BD                 lea     rdx, format     ; format
.text:00000000000024C4                 mov     rcx, rax
.text:00000000000024C7                 xor     esi, esi        ; errnum
.text:00000000000024C9                 mov     edi, 1          ; status
.text:00000000000024CE                 xor     eax, eax
.text:00000000000024D0                 call    _error
.text:00000000000024D0 ; } // starts at 2420
.text:00000000000024D5                 nop
.text:00000000000024D6                 db      2Eh
.text:00000000000024D6                 nop     word ptr [rax+rax+00000000h]
.text:00000000000024D6 build_type_arg  endp ; sp-analysis failed
.text:00000000000024D6
.text:00000000000024E0
.text:00000000000024E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000024E0
.text:00000000000024E0
.text:00000000000024E0 print_lineno    proc near               ; CODE XREF: nl_file:loc_272E↓p
.text:00000000000024E0                                         ; nl_file:loc_28A6↓p
.text:00000000000024E0 ; __unwind {
.text:00000000000024E0                 sub     rsp, 8
.text:00000000000024E4                 mov     edx, cs:lineno_width
.text:00000000000024EA                 mov     r8, cs:separator_str
.text:00000000000024F1                 mov     rcx, cs:line_no
.text:00000000000024F8                 mov     rsi, cs:lineno_format
.text:00000000000024FF                 xor     eax, eax
.text:0000000000002501                 mov     edi, 1
.text:0000000000002506                 call    ___printf_chk
.text:000000000000250B                 mov     rax, cs:line_no
.text:0000000000002512                 mov     rdx, cs:page_incr
.text:0000000000002519                 add     rdx, rax
.text:000000000000251C                 cmp     rax, rdx
.text:000000000000251F                 jg      short loc_252D
.text:0000000000002521                 mov     cs:line_no, rdx
.text:0000000000002528                 add     rsp, 8
.text:000000000000252C                 retn
.text:000000000000252D ; ---------------------------------------------------------------------------
.text:000000000000252D
.text:000000000000252D loc_252D:                               ; CODE XREF: print_lineno+3F↑j
.text:000000000000252D                 lea     rsi, aLineNumberOver ; "line number overflow"
.text:0000000000002534                 mov     edx, 5          ; category
.text:0000000000002539                 xor     edi, edi        ; domainname
.text:000000000000253B                 call    _dcgettext
.text:0000000000002540                 xor     esi, esi        ; errnum
.text:0000000000002542                 mov     rdx, rax        ; format
.text:0000000000002545                 mov     edi, 1          ; status
.text:000000000000254A                 xor     eax, eax
.text:000000000000254C                 call    _error
.text:000000000000254C ; } // starts at 24E0
.text:0000000000002551                 nop     dword ptr [rax+rax+00h]
.text:0000000000002556                 db      2Eh
.text:0000000000002556                 nop     word ptr [rax+rax+00000000h]
.text:0000000000002556 print_lineno    endp ; sp-analysis failed
.text:0000000000002556
.text:0000000000002560
.text:0000000000002560 ; =============== S U B R O U T I N E =======================================
.text:0000000000002560
.text:0000000000002560
.text:0000000000002560 nl_file         proc near               ; CODE XREF: main+5B6↑p
.text:0000000000002560                                         ; main+65D↑p
.text:0000000000002560
.text:0000000000002560 filename        = qword ptr -40h
.text:0000000000002560
.text:0000000000002560 ; __unwind {
.text:0000000000002560                 push    r15
.text:0000000000002562                 push    r14
.text:0000000000002564                 mov     rsi, rdi
.text:0000000000002567                 push    r13
.text:0000000000002569                 push    r12
.text:000000000000256B                 mov     ecx, 2
.text:0000000000002570                 push    rbp
.text:0000000000002571                 push    rbx
.text:0000000000002572                 sub     rsp, 18h
.text:0000000000002576                 mov     [rsp+48h+filename], rdi
.text:000000000000257B                 lea     rdi, aLt+2      ; "-"
.text:0000000000002582                 repe cmpsb
.text:0000000000002584                 setnbe  al
.text:0000000000002587                 sbb     al, 0
.text:0000000000002589                 test    al, al
.text:000000000000258B                 jnz     loc_28E0
.text:0000000000002591                 mov     rbx, cs:stdin@@GLIBC_2_2_5
.text:0000000000002598                 mov     cs:have_read_stdin, 1
.text:000000000000259F
.text:000000000000259F loc_259F:                               ; CODE XREF: nl_file+397↓j
.text:000000000000259F                 lea     rbp, line_buf
.text:00000000000025A6                 lea     r12, footer_regex
.text:00000000000025AD                 mov     esi, 2
.text:00000000000025B2                 mov     rdi, rbx
.text:00000000000025B5                 call    fadvise
.text:00000000000025BA                 nop     word ptr [rax+rax+00h]
.text:00000000000025C0
.text:00000000000025C0 loc_25C0:                               ; CODE XREF: nl_file+1F5↓j
.text:00000000000025C0                                         ; nl_file+302↓j
.text:00000000000025C0                 mov     rsi, rbx
.text:00000000000025C3                 mov     rdi, rbp
.text:00000000000025C6                 call    readlinebuffer
.text:00000000000025CB                 test    rax, rax
.text:00000000000025CE                 jz      loc_26A6
.text:00000000000025D4
.text:00000000000025D4 loc_25D4:                               ; CODE XREF: nl_file+140↓j
.text:00000000000025D4                 mov     r14, cs:n
.text:00000000000025DB                 lea     r15, [r14-1]
.text:00000000000025DF                 cmp     r15, 1
.text:00000000000025E3                 jbe     loc_2700
.text:00000000000025E9                 mov     rax, cs:section_del
.text:00000000000025F0                 mov     r13, cs:s1
.text:00000000000025F7                 movzx   eax, word ptr [rax]
.text:00000000000025FA                 cmp     [r13+0], ax
.text:00000000000025FF                 jnz     loc_2700
.text:0000000000002605                 cmp     r15, cs:header_del_len
.text:000000000000260C                 jz      loc_2760
.text:0000000000002612
.text:0000000000002612 loc_2612:                               ; CODE XREF: nl_file+214↓j
.text:0000000000002612                 cmp     r15, cs:body_del_len
.text:0000000000002619                 jz      loc_27B0
.text:000000000000261F
.text:000000000000261F loc_261F:                               ; CODE XREF: nl_file+264↓j
.text:000000000000261F                 cmp     r15, cs:footer_del_len
.text:0000000000002626                 jnz     loc_2700
.text:000000000000262C                 mov     rsi, cs:footer_del ; s2
.text:0000000000002633                 mov     rdx, r15        ; n
.text:0000000000002636                 mov     rdi, r13        ; s1
.text:0000000000002639                 call    _memcmp
.text:000000000000263E                 test    eax, eax
.text:0000000000002640                 jnz     loc_2700
.text:0000000000002646                 cmp     cs:reset_numbers, 0
.text:000000000000264D                 mov     rax, cs:footer_type
.text:0000000000002654                 mov     cs:current_regex, r12
.text:000000000000265B                 mov     cs:current_type, rax
.text:0000000000002662                 jz      short loc_2672
.text:0000000000002664
.text:0000000000002664 loc_2664:                               ; CODE XREF: nl_file+243↓j
.text:0000000000002664                                         ; nl_file+28D↓j
.text:0000000000002664                 mov     rax, cs:starting_line_number
.text:000000000000266B                 mov     cs:line_no, rax
.text:0000000000002672
.text:0000000000002672 loc_2672:                               ; CODE XREF: nl_file+102↑j
.text:0000000000002672                                         ; nl_file+23D↓j ...
.text:0000000000002672                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:0000000000002679                 mov     rax, [rdi+28h]
.text:000000000000267D                 cmp     rax, [rdi+30h]
.text:0000000000002681                 jnb     loc_2858
.text:0000000000002687                 lea     rdx, [rax+1]
.text:000000000000268B                 mov     rsi, rbx
.text:000000000000268E                 mov     [rdi+28h], rdx
.text:0000000000002692                 mov     byte ptr [rax], 0Ah
.text:0000000000002695                 mov     rdi, rbp
.text:0000000000002698                 call    readlinebuffer
.text:000000000000269D                 test    rax, rax
.text:00000000000026A0                 jnz     loc_25D4
.text:00000000000026A6
.text:00000000000026A6 loc_26A6:                               ; CODE XREF: nl_file+6E↑j
.text:00000000000026A6                 test    byte ptr [rbx], 20h
.text:00000000000026A9                 jnz     loc_28FD
.text:00000000000026AF                 mov     rsi, [rsp+48h+filename]
.text:00000000000026B4                 lea     rdi, aLt+2      ; "-"
.text:00000000000026BB                 mov     ecx, 2
.text:00000000000026C0                 repe cmpsb
.text:00000000000026C2                 mov     rdi, rbx        ; stream
.text:00000000000026C5                 setnbe  al
.text:00000000000026C8                 sbb     al, 0
.text:00000000000026CA                 test    al, al
.text:00000000000026CC                 jz      loc_28C2
.text:00000000000026D2                 call    rpl_fclose
.text:00000000000026D7                 mov     edx, eax
.text:00000000000026D9                 mov     eax, 1
.text:00000000000026DE                 cmp     edx, 0FFFFFFFFh
.text:00000000000026E1                 jz      loc_28FD
.text:00000000000026E7                 add     rsp, 18h
.text:00000000000026EB                 pop     rbx
.text:00000000000026EC                 pop     rbp
.text:00000000000026ED                 pop     r12
.text:00000000000026EF                 pop     r13
.text:00000000000026F1                 pop     r14
.text:00000000000026F3                 pop     r15
.text:00000000000026F5                 retn
.text:00000000000026F5 ; ---------------------------------------------------------------------------
.text:00000000000026F6                 align 20h
.text:0000000000002700
.text:0000000000002700 loc_2700:                               ; CODE XREF: nl_file+83↑j
.text:0000000000002700                                         ; nl_file+9F↑j ...
.text:0000000000002700                 mov     rax, cs:current_type
.text:0000000000002707                 movzx   eax, byte ptr [rax]
.text:000000000000270A                 cmp     al, 6Eh ; 'n'
.text:000000000000270C                 jz      loc_2832
.text:0000000000002712                 jle     loc_2870
.text:0000000000002718                 cmp     al, 70h ; 'p'
.text:000000000000271A                 jz      loc_2800
.text:0000000000002720                 cmp     al, 74h ; 't'
.text:0000000000002722                 jnz     short loc_273A
.text:0000000000002724                 cmp     r14, 1
.text:0000000000002728                 jbe     loc_2832
.text:000000000000272E
.text:000000000000272E loc_272E:                               ; CODE XREF: nl_file+2CC↓j
.text:000000000000272E                                         ; nl_file+323↓j
.text:000000000000272E                 call    print_lineno
.text:0000000000002733                 mov     r14, cs:n
.text:000000000000273A
.text:000000000000273A loc_273A:                               ; CODE XREF: nl_file+1C2↑j
.text:000000000000273A                                         ; nl_file+2EC↓j ...
.text:000000000000273A                 mov     rcx, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000002741                 mov     rdi, cs:s1      ; ptr
.text:0000000000002748                 mov     rdx, r14        ; n
.text:000000000000274B                 mov     esi, 1          ; size
.text:0000000000002750                 call    _fwrite_unlocked
.text:0000000000002755                 jmp     loc_25C0
.text:0000000000002755 ; ---------------------------------------------------------------------------
.text:000000000000275A                 align 20h
.text:0000000000002760
.text:0000000000002760 loc_2760:                               ; CODE XREF: nl_file+AC↑j
.text:0000000000002760                 mov     rsi, cs:header_del ; s2
.text:0000000000002767                 mov     rdx, r15        ; n
.text:000000000000276A                 mov     rdi, r13        ; s1
.text:000000000000276D                 call    _memcmp
.text:0000000000002772                 test    eax, eax
.text:0000000000002774                 jnz     loc_2612
.text:000000000000277A                 mov     rax, cs:header_type
.text:0000000000002781                 cmp     cs:reset_numbers, 0
.text:0000000000002788                 mov     cs:current_type, rax
.text:000000000000278F                 lea     rax, header_regex
.text:0000000000002796                 mov     cs:current_regex, rax
.text:000000000000279D                 jz      loc_2672
.text:00000000000027A3                 jmp     loc_2664
.text:00000000000027A3 ; ---------------------------------------------------------------------------
.text:00000000000027A8                 align 10h
.text:00000000000027B0
.text:00000000000027B0 loc_27B0:                               ; CODE XREF: nl_file+B9↑j
.text:00000000000027B0                 mov     rsi, cs:body_del ; s2
.text:00000000000027B7                 mov     rdx, r15        ; n
.text:00000000000027BA                 mov     rdi, r13        ; s1
.text:00000000000027BD                 call    _memcmp
.text:00000000000027C2                 test    eax, eax
.text:00000000000027C4                 jnz     loc_261F
.text:00000000000027CA                 mov     rax, cs:body_type
.text:00000000000027D1                 cmp     cs:reset_numbers, 0
.text:00000000000027D8                 mov     cs:current_type, rax
.text:00000000000027DF                 lea     rax, body_regex
.text:00000000000027E6                 mov     cs:current_regex, rax
.text:00000000000027ED                 jnz     loc_2664
.text:00000000000027F3                 jmp     loc_2672
.text:00000000000027F3 ; ---------------------------------------------------------------------------
.text:00000000000027F8                 align 20h
.text:0000000000002800
.text:0000000000002800 loc_2800:                               ; CODE XREF: nl_file+1BA↑j
.text:0000000000002800                 mov     rsi, cs:s1
.text:0000000000002807                 mov     rdi, cs:current_regex
.text:000000000000280E                 xor     r9d, r9d
.text:0000000000002811                 xor     ecx, ecx
.text:0000000000002813                 mov     r8, r15
.text:0000000000002816                 mov     rdx, r15
.text:0000000000002819                 call    rpl_re_search
.text:000000000000281E                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000002822                 jz      loc_293C
.text:0000000000002828                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000282C                 jnz     loc_272E
.text:0000000000002832
.text:0000000000002832 loc_2832:                               ; CODE XREF: nl_file+1AC↑j
.text:0000000000002832                                         ; nl_file+1C8↑j ...
.text:0000000000002832                 mov     rsi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000002839                 mov     rdi, cs:print_no_line_fmt ; s
.text:0000000000002840                 call    _fputs_unlocked
.text:0000000000002845                 mov     r14, cs:n
.text:000000000000284C                 jmp     loc_273A
.text:000000000000284C ; ---------------------------------------------------------------------------
.text:0000000000002851                 align 8
.text:0000000000002858
.text:0000000000002858 loc_2858:                               ; CODE XREF: nl_file+121↑j
.text:0000000000002858                 mov     esi, 0Ah        ; int
.text:000000000000285D                 call    ___overflow
.text:0000000000002862                 jmp     loc_25C0
.text:0000000000002862 ; ---------------------------------------------------------------------------
.text:0000000000002867                 align 10h
.text:0000000000002870
.text:0000000000002870 loc_2870:                               ; CODE XREF: nl_file+1B2↑j
.text:0000000000002870                 cmp     al, 61h ; 'a'
.text:0000000000002872                 jnz     loc_273A
.text:0000000000002878                 mov     rax, cs:blank_join
.text:000000000000287F                 cmp     rax, 1
.text:0000000000002883                 jle     loc_272E
.text:0000000000002889                 cmp     r14, 1
.text:000000000000288D                 ja      short loc_28A6
.text:000000000000288F                 mov     rcx, cs:blank_lines_7093
.text:0000000000002896                 lea     rdx, [rcx+1]
.text:000000000000289A                 cmp     rax, rdx
.text:000000000000289D                 mov     cs:blank_lines_7093, rdx
.text:00000000000028A4                 jnz     short loc_2832
.text:00000000000028A6
.text:00000000000028A6 loc_28A6:                               ; CODE XREF: nl_file+32D↑j
.text:00000000000028A6                 call    print_lineno
.text:00000000000028AB                 mov     cs:blank_lines_7093, 0
.text:00000000000028B6                 mov     r14, cs:n
.text:00000000000028BD                 jmp     loc_273A
.text:00000000000028C2 ; ---------------------------------------------------------------------------
.text:00000000000028C2
.text:00000000000028C2 loc_28C2:                               ; CODE XREF: nl_file+16C↑j
.text:00000000000028C2                 call    _clearerr_unlocked
.text:00000000000028C7                 add     rsp, 18h
.text:00000000000028CB                 mov     eax, 1
.text:00000000000028D0                 pop     rbx
.text:00000000000028D1                 pop     rbp
.text:00000000000028D2                 pop     r12
.text:00000000000028D4                 pop     r13
.text:00000000000028D6                 pop     r14
.text:00000000000028D8                 pop     r15
.text:00000000000028DA                 retn
.text:00000000000028DA ; ---------------------------------------------------------------------------
.text:00000000000028DB                 align 20h
.text:00000000000028E0
.text:00000000000028E0 loc_28E0:                               ; CODE XREF: nl_file+2B↑j
.text:00000000000028E0                 mov     rdi, [rsp+48h+filename] ; filename
.text:00000000000028E5                 lea     rsi, aInvalidStartin+1Bh ; modes
.text:00000000000028EC                 call    _fopen
.text:00000000000028F1                 test    rax, rax
.text:00000000000028F4                 mov     rbx, rax
.text:00000000000028F7                 jnz     loc_259F
.text:00000000000028FD
.text:00000000000028FD loc_28FD:                               ; CODE XREF: nl_file+149↑j
.text:00000000000028FD                                         ; nl_file+181↑j
.text:00000000000028FD                 mov     rdx, [rsp+48h+filename]
.text:0000000000002902                 mov     esi, 3
.text:0000000000002907                 xor     edi, edi
.text:0000000000002909                 call    quotearg_n_style_colon
.text:000000000000290E                 mov     rbx, rax
.text:0000000000002911                 call    ___errno_location
.text:0000000000002916                 mov     esi, [rax]      ; errnum
.text:0000000000002918                 lea     rdx, format     ; format
.text:000000000000291F                 mov     rcx, rbx
.text:0000000000002922                 xor     eax, eax
.text:0000000000002924                 xor     edi, edi        ; status
.text:0000000000002926                 call    _error
.text:000000000000292B                 add     rsp, 18h
.text:000000000000292F                 xor     eax, eax
.text:0000000000002931                 pop     rbx
.text:0000000000002932                 pop     rbp
.text:0000000000002933                 pop     r12
.text:0000000000002935                 pop     r13
.text:0000000000002937                 pop     r14
.text:0000000000002939                 pop     r15
.text:000000000000293B                 retn
.text:000000000000293C ; ---------------------------------------------------------------------------
.text:000000000000293C
.text:000000000000293C loc_293C:                               ; CODE XREF: nl_file+2C2↑j
.text:000000000000293C                 lea     rsi, aErrorInRegular ; "error in regular expression search"
.text:0000000000002943                 mov     edx, 5          ; category
.text:0000000000002948                 xor     edi, edi        ; domainname
.text:000000000000294A                 call    _dcgettext
.text:000000000000294F                 mov     rbx, rax
.text:0000000000002952                 call    ___errno_location
.text:0000000000002957                 mov     esi, [rax]      ; errnum
.text:0000000000002959                 mov     rdx, rbx        ; format
.text:000000000000295C                 mov     edi, 1          ; status
.text:0000000000002961                 xor     eax, eax
.text:0000000000002963                 call    _error
.text:0000000000002963 ; } // starts at 2560
.text:0000000000002968                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000002968 nl_file         endp ; sp-analysis failed
.text:0000000000002968
.text:0000000000002970
.text:0000000000002970 ; =============== S U B R O U T I N E =======================================
.text:0000000000002970
.text:0000000000002970 ; Attributes: noreturn
.text:0000000000002970
.text:0000000000002970 ; void __fastcall __noreturn usage(int status)
.text:0000000000002970                 public usage
.text:0000000000002970 usage           proc near               ; CODE XREF: main+5FE↑p
.text:0000000000002970                                         ; main+66F↑p
.text:0000000000002970
.text:0000000000002970 var_A8          = qword ptr -0A8h
.text:0000000000002970 var_A0          = qword ptr -0A0h
.text:0000000000002970 var_98          = qword ptr -98h
.text:0000000000002970 var_90          = qword ptr -90h
.text:0000000000002970 var_88          = qword ptr -88h
.text:0000000000002970 var_80          = qword ptr -80h
.text:0000000000002970 var_78          = qword ptr -78h
.text:0000000000002970 var_70          = qword ptr -70h
.text:0000000000002970 var_68          = qword ptr -68h
.text:0000000000002970 var_60          = qword ptr -60h
.text:0000000000002970 var_58          = qword ptr -58h
.text:0000000000002970 var_50          = qword ptr -50h
.text:0000000000002970 var_48          = qword ptr -48h
.text:0000000000002970 var_40          = qword ptr -40h
.text:0000000000002970 var_30          = qword ptr -30h
.text:0000000000002970
.text:0000000000002970 ; __unwind {
.text:0000000000002970                 push    r13
.text:0000000000002972                 push    r12
.text:0000000000002974                 mov     edx, 5          ; category
.text:0000000000002979                 push    rbp
.text:000000000000297A                 push    rbx
.text:000000000000297B                 mov     ebp, edi
.text:000000000000297D                 sub     rsp, 88h
.text:0000000000002984                 mov     rbx, cs:program_name
.text:000000000000298B                 mov     rax, fs:28h
.text:0000000000002994                 mov     [rsp+0A8h+var_30], rax
.text:0000000000002999                 xor     eax, eax
.text:000000000000299B                 test    edi, edi
.text:000000000000299D                 jz      short loc_29CD
.text:000000000000299F                 lea     rsi, aTrySHelpForMor ; "Try '%s --help' for more information.\n"
.text:00000000000029A6                 xor     edi, edi        ; domainname
.text:00000000000029A8                 call    _dcgettext
.text:00000000000029AD                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:00000000000029B4                 mov     rdx, rax
.text:00000000000029B7                 mov     rcx, rbx
.text:00000000000029BA                 mov     esi, 1
.text:00000000000029BF                 xor     eax, eax
.text:00000000000029C1                 call    ___fprintf_chk
.text:00000000000029C6
.text:00000000000029C6 loc_29C6:                               ; CODE XREF: usage+3A6↓j
.text:00000000000029C6                 mov     edi, ebp        ; status
.text:00000000000029C8                 call    _exit
.text:00000000000029CD ; ---------------------------------------------------------------------------
.text:00000000000029CD
.text:00000000000029CD loc_29CD:                               ; CODE XREF: usage+2D↑j
.text:00000000000029CD                 lea     rsi, aUsageSOptionFi ; "Usage: %s [OPTION]... [FILE]...\n"
.text:00000000000029D4                 xor     edi, edi        ; domainname
.text:00000000000029D6                 call    _dcgettext
.text:00000000000029DB                 mov     rdx, rbx
.text:00000000000029DE                 mov     rsi, rax
.text:00000000000029E1                 mov     edi, 1
.text:00000000000029E6                 xor     eax, eax
.text:00000000000029E8                 call    ___printf_chk
.text:00000000000029ED                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000029F4                 lea     rsi, aWriteEachFileT ; "Write each FILE to standard output, wit"...
.text:00000000000029FB                 mov     edx, 5          ; category
.text:0000000000002A00                 xor     edi, edi        ; domainname
.text:0000000000002A02                 call    _dcgettext
.text:0000000000002A07                 mov     rsi, rbx        ; stream
.text:0000000000002A0A                 mov     rdi, rax        ; s
.text:0000000000002A0D                 call    _fputs_unlocked
.text:0000000000002A12                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002A19                 lea     rsi, aWithNoFileOrWh ; "\nWith no FILE, or when FILE is -, read"...
.text:0000000000002A20                 mov     edx, 5          ; category
.text:0000000000002A25                 xor     edi, edi        ; domainname
.text:0000000000002A27                 call    _dcgettext
.text:0000000000002A2C                 mov     rsi, rbx        ; stream
.text:0000000000002A2F                 mov     rdi, rax        ; s
.text:0000000000002A32                 call    _fputs_unlocked
.text:0000000000002A37                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002A3E                 lea     rsi, aMandatoryArgum ; "\nMandatory arguments to long options a"...
.text:0000000000002A45                 mov     edx, 5          ; category
.text:0000000000002A4A                 xor     edi, edi        ; domainname
.text:0000000000002A4C                 call    _dcgettext
.text:0000000000002A51                 mov     rsi, rbx        ; stream
.text:0000000000002A54                 mov     rdi, rax        ; s
.text:0000000000002A57                 call    _fputs_unlocked
.text:0000000000002A5C                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002A63                 lea     rsi, aBBodyNumbering ; "  -b, --body-numbering=STYLE      use S"...
.text:0000000000002A6A                 mov     edx, 5          ; category
.text:0000000000002A6F                 xor     edi, edi        ; domainname
.text:0000000000002A71                 call    _dcgettext
.text:0000000000002A76                 mov     rsi, rbx        ; stream
.text:0000000000002A79                 mov     rdi, rax        ; s
.text:0000000000002A7C                 call    _fputs_unlocked
.text:0000000000002A81                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002A88                 lea     rsi, aHHeaderNumberi ; "  -h, --header-numbering=STYLE    use S"...
.text:0000000000002A8F                 mov     edx, 5          ; category
.text:0000000000002A94                 xor     edi, edi        ; domainname
.text:0000000000002A96                 call    _dcgettext
.text:0000000000002A9B                 mov     rsi, rbx        ; stream
.text:0000000000002A9E                 mov     rdi, rax        ; s
.text:0000000000002AA1                 call    _fputs_unlocked
.text:0000000000002AA6                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002AAD                 lea     rsi, aVStartingLineN ; "  -v, --starting-line-number=NUMBER  fi"...
.text:0000000000002AB4                 mov     edx, 5          ; category
.text:0000000000002AB9                 xor     edi, edi        ; domainname
.text:0000000000002ABB                 call    _dcgettext
.text:0000000000002AC0                 mov     rsi, rbx        ; stream
.text:0000000000002AC3                 mov     rdi, rax        ; s
.text:0000000000002AC6                 call    _fputs_unlocked
.text:0000000000002ACB                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002AD2                 lea     rsi, aHelpDisplayThi ; "      --help     display this help and "...
.text:0000000000002AD9                 mov     edx, 5          ; category
.text:0000000000002ADE                 xor     edi, edi        ; domainname
.text:0000000000002AE0                 call    _dcgettext
.text:0000000000002AE5                 mov     rsi, rbx        ; stream
.text:0000000000002AE8                 mov     rdi, rax        ; s
.text:0000000000002AEB                 call    _fputs_unlocked
.text:0000000000002AF0                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002AF7                 lea     rsi, aVersionOutputV ; "      --version  output version informa"...
.text:0000000000002AFE                 mov     edx, 5          ; category
.text:0000000000002B03                 xor     edi, edi        ; domainname
.text:0000000000002B05                 call    _dcgettext
.text:0000000000002B0A                 mov     rsi, rbx        ; stream
.text:0000000000002B0D                 mov     rdi, rax        ; s
.text:0000000000002B10                 call    _fputs_unlocked
.text:0000000000002B15                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002B1C                 lea     rsi, aDefaultOptions ; "\nDefault options are: -bt -d'\\:' -fn "...
.text:0000000000002B23                 mov     edx, 5          ; category
.text:0000000000002B28                 xor     edi, edi        ; domainname
.text:0000000000002B2A                 call    _dcgettext
.text:0000000000002B2F                 mov     rsi, rbx        ; stream
.text:0000000000002B32                 mov     rdi, rax        ; s
.text:0000000000002B35                 call    _fputs_unlocked
.text:0000000000002B3A                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002B41                 lea     rsi, aStyleIsOneOfAN ; "\nSTYLE is one of:\n\n  a      number a"...
.text:0000000000002B48                 mov     edx, 5          ; category
.text:0000000000002B4D                 xor     edi, edi        ; domainname
.text:0000000000002B4F                 call    _dcgettext
.text:0000000000002B54                 mov     rsi, rbx        ; stream
.text:0000000000002B57                 mov     rdi, rax        ; s
.text:0000000000002B5A                 call    _fputs_unlocked
.text:0000000000002B5F                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002B66                 lea     rsi, aFormatIsOneOfL ; "\nFORMAT is one of:\n\n  ln     left ju"...
.text:0000000000002B6D                 mov     edx, 5          ; category
.text:0000000000002B72                 xor     edi, edi        ; domainname
.text:0000000000002B74                 call    _dcgettext
.text:0000000000002B79                 mov     rsi, rbx        ; stream
.text:0000000000002B7C                 mov     rdi, rax        ; s
.text:0000000000002B7F                 lea     rbx, aNl        ; "nl"
.text:0000000000002B86                 call    _fputs_unlocked
.text:0000000000002B8B                 lea     rax, asc_143BC  ; "["
.text:0000000000002B92                 lea     rcx, aSha256sum ; "sha256sum"
.text:0000000000002B99                 mov     [rsp+0A8h+var_48], 0
.text:0000000000002BA2                 mov     [rsp+0A8h+var_40], 0
.text:0000000000002BAB                 mov     rdx, rsp
.text:0000000000002BAE                 mov     [rsp+0A8h+var_A8], rax
.text:0000000000002BB2                 lea     rax, aTestInvocation ; "test invocation"
.text:0000000000002BB9                 mov     [rsp+0A8h+var_78], rcx
.text:0000000000002BBE                 lea     rcx, aSha384sum ; "sha384sum"
.text:0000000000002BC5                 mov     [rsp+0A8h+var_A0], rax
.text:0000000000002BCA                 lea     rax, domainname ; "coreutils"
.text:0000000000002BD1                 mov     [rsp+0A8h+var_68], rcx
.text:0000000000002BD6                 lea     rcx, aSha512sum ; "sha512sum"
.text:0000000000002BDD                 mov     [rsp+0A8h+var_98], rax
.text:0000000000002BE2                 lea     rax, aMultiCallInvoc ; "Multi-call invocation"
.text:0000000000002BE9                 mov     [rsp+0A8h+var_58], rcx
.text:0000000000002BEE                 mov     [rsp+0A8h+var_90], rax
.text:0000000000002BF3                 lea     rax, aSha224sum ; "sha224sum"
.text:0000000000002BFA                 mov     [rsp+0A8h+var_88], rax
.text:0000000000002BFF                 lea     rax, aSha2Utilities ; "sha2 utilities"
.text:0000000000002C06                 mov     [rsp+0A8h+var_80], rax
.text:0000000000002C0B                 mov     [rsp+0A8h+var_70], rax
.text:0000000000002C10                 mov     [rsp+0A8h+var_60], rax
.text:0000000000002C15                 mov     [rsp+0A8h+var_50], rax
.text:0000000000002C1A                 nop     word ptr [rax+rax+00h]
.text:0000000000002C20
.text:0000000000002C20 loc_2C20:                               ; CODE XREF: usage+2CD↓j
.text:0000000000002C20                 add     rdx, 10h
.text:0000000000002C24                 mov     rdi, [rdx]
.text:0000000000002C27                 test    rdi, rdi
.text:0000000000002C2A                 jz      short loc_2C3F
.text:0000000000002C2C                 mov     ecx, 3
.text:0000000000002C31                 mov     rsi, rbx
.text:0000000000002C34                 repe cmpsb
.text:0000000000002C36                 setnbe  al
.text:0000000000002C39                 sbb     al, 0
.text:0000000000002C3B                 test    al, al
.text:0000000000002C3D                 jnz     short loc_2C20
.text:0000000000002C3F
.text:0000000000002C3F loc_2C3F:                               ; CODE XREF: usage+2BA↑j
.text:0000000000002C3F                 mov     r12, [rdx+8]
.text:0000000000002C43                 xor     edi, edi        ; domainname
.text:0000000000002C45                 mov     edx, 5          ; category
.text:0000000000002C4A                 lea     rsi, aSOnlineHelpS ; "\n%s online help: <%s>\n"
.text:0000000000002C51                 test    r12, r12
.text:0000000000002C54                 jz      loc_2D1B
.text:0000000000002C5A                 call    _dcgettext
.text:0000000000002C5F                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000002C66                 lea     rdx, unk_14432
.text:0000000000002C6D                 mov     rsi, rax
.text:0000000000002C70                 mov     edi, 1
.text:0000000000002C75                 xor     eax, eax
.text:0000000000002C77                 call    ___printf_chk
.text:0000000000002C7C                 xor     esi, esi        ; locale
.text:0000000000002C7E                 mov     edi, 5          ; category
.text:0000000000002C83                 call    _setlocale
.text:0000000000002C88                 test    rax, rax
.text:0000000000002C8B                 jz      short loc_2CA9
.text:0000000000002C8D                 lea     rsi, aEn        ; "en_"
.text:0000000000002C94                 mov     edx, 3          ; n
.text:0000000000002C99                 mov     rdi, rax        ; s1
.text:0000000000002C9C                 call    _strncmp
.text:0000000000002CA1                 test    eax, eax
.text:0000000000002CA3                 jnz     loc_2DB0
.text:0000000000002CA9
.text:0000000000002CA9 loc_2CA9:                               ; CODE XREF: usage+31B↑j
.text:0000000000002CA9                                         ; usage+465↓j
.text:0000000000002CA9                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000002CB0                 xor     edi, edi        ; domainname
.text:0000000000002CB2                 mov     edx, 5          ; category
.text:0000000000002CB7                 call    _dcgettext
.text:0000000000002CBC                 lea     rcx, aNl        ; "nl"
.text:0000000000002CC3                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000002CCA                 mov     rsi, rax
.text:0000000000002CCD                 mov     edi, 1
.text:0000000000002CD2                 xor     eax, eax
.text:0000000000002CD4                 call    ___printf_chk
.text:0000000000002CD9                 cmp     r12, rbx
.text:0000000000002CDC                 lea     rcx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000002CE3                 lea     rbx, locale
.text:0000000000002CEA                 cmovz   rbx, rcx
.text:0000000000002CEE
.text:0000000000002CEE loc_2CEE:                               ; CODE XREF: usage+434↓j
.text:0000000000002CEE                 lea     rsi, aOrAvailableLoc ; "or available locally via: info '(coreut"...
.text:0000000000002CF5                 xor     edi, edi        ; domainname
.text:0000000000002CF7                 mov     edx, 5          ; category
.text:0000000000002CFC                 call    _dcgettext
.text:0000000000002D01                 mov     rcx, rbx
.text:0000000000002D04                 mov     rsi, rax
.text:0000000000002D07                 mov     rdx, r12
.text:0000000000002D0A                 mov     edi, 1
.text:0000000000002D0F                 xor     eax, eax
.text:0000000000002D11                 call    ___printf_chk
.text:0000000000002D16                 jmp     loc_29C6
.text:0000000000002D1B ; ---------------------------------------------------------------------------
.text:0000000000002D1B
.text:0000000000002D1B loc_2D1B:                               ; CODE XREF: usage+2E4↑j
.text:0000000000002D1B                 call    _dcgettext
.text:0000000000002D20                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000002D27                 lea     rdx, unk_14432
.text:0000000000002D2E                 mov     rsi, rax
.text:0000000000002D31                 mov     edi, 1
.text:0000000000002D36                 xor     eax, eax
.text:0000000000002D38                 call    ___printf_chk
.text:0000000000002D3D                 xor     esi, esi        ; locale
.text:0000000000002D3F                 mov     edi, 5          ; category
.text:0000000000002D44                 call    _setlocale
.text:0000000000002D49                 test    rax, rax
.text:0000000000002D4C                 jz      short loc_2D66
.text:0000000000002D4E                 lea     rsi, aEn        ; "en_"
.text:0000000000002D55                 mov     edx, 3          ; n
.text:0000000000002D5A                 mov     rdi, rax        ; s1
.text:0000000000002D5D                 call    _strncmp
.text:0000000000002D62                 test    eax, eax
.text:0000000000002D64                 jnz     short loc_2DA9
.text:0000000000002D66
.text:0000000000002D66 loc_2D66:                               ; CODE XREF: usage+3DC↑j
.text:0000000000002D66                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000002D6D                 mov     edx, 5          ; category
.text:0000000000002D72                 xor     edi, edi        ; domainname
.text:0000000000002D74                 lea     r12, aNl        ; "nl"
.text:0000000000002D7B                 lea     rbx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000002D82                 call    _dcgettext
.text:0000000000002D87                 lea     rcx, aNl        ; "nl"
.text:0000000000002D8E                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000002D95                 mov     rsi, rax
.text:0000000000002D98                 mov     edi, 1
.text:0000000000002D9D                 xor     eax, eax
.text:0000000000002D9F                 call    ___printf_chk
.text:0000000000002DA4                 jmp     loc_2CEE
.text:0000000000002DA9 ; ---------------------------------------------------------------------------
.text:0000000000002DA9
.text:0000000000002DA9 loc_2DA9:                               ; CODE XREF: usage+3F4↑j
.text:0000000000002DA9                 lea     r12, aNl        ; "nl"
.text:0000000000002DB0
.text:0000000000002DB0 loc_2DB0:                               ; CODE XREF: usage+333↑j
.text:0000000000002DB0                 mov     r13, cs:stdout@@GLIBC_2_2_5
.text:0000000000002DB7                 lea     rsi, aReportAnyTrans ; "Report any translation bugs to <https:/"...
.text:0000000000002DBE                 xor     edi, edi        ; domainname
.text:0000000000002DC0                 mov     edx, 5          ; category
.text:0000000000002DC5                 call    _dcgettext
.text:0000000000002DCA                 mov     rsi, r13        ; stream
.text:0000000000002DCD                 mov     rdi, rax        ; s
.text:0000000000002DD0                 call    _fputs_unlocked
.text:0000000000002DD5                 jmp     loc_2CA9
.text:0000000000002DD5 ; } // starts at 2970
.text:0000000000002DD5 usage           endp
.text:0000000000002DD5
.text:0000000000002DD5 ; ---------------------------------------------------------------------------
.text:0000000000002DDA                 align 20h
.text:0000000000002DE0
.text:0000000000002DE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000002DE0
.text:0000000000002DE0
.text:0000000000002DE0                 public close_stdout_set_file_name
.text:0000000000002DE0 close_stdout_set_file_name proc near
.text:0000000000002DE0 ; __unwind {
.text:0000000000002DE0                 mov     cs:file_name, rdi
.text:0000000000002DE7                 retn
.text:0000000000002DE7 ; } // starts at 2DE0
.text:0000000000002DE7 close_stdout_set_file_name endp
.text:0000000000002DE7
.text:0000000000002DE7 ; ---------------------------------------------------------------------------
.text:0000000000002DE8                 align 10h
.text:0000000000002DF0
.text:0000000000002DF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000002DF0
.text:0000000000002DF0
.text:0000000000002DF0                 public close_stdout_set_ignore_EPIPE
.text:0000000000002DF0 close_stdout_set_ignore_EPIPE proc near
.text:0000000000002DF0 ; __unwind {
.text:0000000000002DF0                 mov     cs:ignore_EPIPE, dil
.text:0000000000002DF7                 retn
.text:0000000000002DF7 ; } // starts at 2DF0
.text:0000000000002DF7 close_stdout_set_ignore_EPIPE endp
.text:0000000000002DF7
.text:0000000000002DF7 ; ---------------------------------------------------------------------------
.text:0000000000002DF8                 align 20h
.text:0000000000002E00
.text:0000000000002E00 ; =============== S U B R O U T I N E =======================================
.text:0000000000002E00
.text:0000000000002E00 ; Attributes: info_from_lumina
.text:0000000000002E00
.text:0000000000002E00 ; void __cdecl close_stdout()
.text:0000000000002E00                 public close_stdout
.text:0000000000002E00 close_stdout    proc near               ; DATA XREF: main+66↑o
.text:0000000000002E00 ; __unwind {
.text:0000000000002E00                 push    rbp
.text:0000000000002E01                 push    rbx
.text:0000000000002E02                 sub     rsp, 8
.text:0000000000002E06                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000002E0D                 call    close_stream
.text:0000000000002E12                 test    eax, eax
.text:0000000000002E14                 jz      short loc_2E2C
.text:0000000000002E16                 call    ___errno_location
.text:0000000000002E1B                 cmp     cs:ignore_EPIPE, 0
.text:0000000000002E22                 mov     rbx, rax
.text:0000000000002E25                 jz      short loc_2E43
.text:0000000000002E27                 cmp     dword ptr [rax], 20h ; ' '
.text:0000000000002E2A                 jnz     short loc_2E43
.text:0000000000002E2C
.text:0000000000002E2C loc_2E2C:                               ; CODE XREF: close_stdout+14↑j
.text:0000000000002E2C                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:0000000000002E33                 call    close_stream
.text:0000000000002E38                 test    eax, eax
.text:0000000000002E3A                 jnz     short loc_2E82
.text:0000000000002E3C                 add     rsp, 8
.text:0000000000002E40                 pop     rbx
.text:0000000000002E41                 pop     rbp
.text:0000000000002E42                 retn
.text:0000000000002E43 ; ---------------------------------------------------------------------------
.text:0000000000002E43
.text:0000000000002E43 loc_2E43:                               ; CODE XREF: close_stdout+25↑j
.text:0000000000002E43                                         ; close_stdout+2A↑j
.text:0000000000002E43                 lea     rsi, aWriteError ; "write error"
.text:0000000000002E4A                 xor     edi, edi        ; domainname
.text:0000000000002E4C                 mov     edx, 5          ; category
.text:0000000000002E51                 call    _dcgettext
.text:0000000000002E56                 mov     rdi, cs:file_name
.text:0000000000002E5D                 mov     rbp, rax
.text:0000000000002E60                 test    rdi, rdi
.text:0000000000002E63                 jz      short loc_2E8D
.text:0000000000002E65                 call    quotearg_colon
.text:0000000000002E6A                 mov     esi, [rbx]      ; errnum
.text:0000000000002E6C                 lea     rdx, aS         ; "%s: "
.text:0000000000002E73                 mov     rcx, rax
.text:0000000000002E76                 mov     r8, rbp
.text:0000000000002E79                 xor     edi, edi        ; status
.text:0000000000002E7B                 xor     eax, eax
.text:0000000000002E7D                 call    _error
.text:0000000000002E82
.text:0000000000002E82 loc_2E82:                               ; CODE XREF: close_stdout+3A↑j
.text:0000000000002E82                                         ; close_stdout+A2↓j
.text:0000000000002E82                 mov     edi, cs:exit_failure ; status
.text:0000000000002E88                 call    __exit
.text:0000000000002E8D ; ---------------------------------------------------------------------------
.text:0000000000002E8D
.text:0000000000002E8D loc_2E8D:                               ; CODE XREF: close_stdout+63↑j
.text:0000000000002E8D                 mov     esi, [rbx]      ; errnum
.text:0000000000002E8F                 lea     rdx, format     ; format
.text:0000000000002E96                 mov     rcx, rax
.text:0000000000002E99                 xor     edi, edi        ; status
.text:0000000000002E9B                 xor     eax, eax
.text:0000000000002E9D                 call    _error
.text:0000000000002EA2                 jmp     short loc_2E82
.text:0000000000002EA2 ; } // starts at 2E00
.text:0000000000002EA2 close_stdout    endp
.text:0000000000002EA2
.text:0000000000002EA2 ; ---------------------------------------------------------------------------
.text:0000000000002EA4                 align 10h
.text:0000000000002EB0
.text:0000000000002EB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000002EB0
.text:0000000000002EB0
.text:0000000000002EB0 ; int fdadvise(int fd, off_t offset, off_t len, int advise)
.text:0000000000002EB0                 public fdadvise
.text:0000000000002EB0 fdadvise        proc near
.text:0000000000002EB0 ; __unwind {
.text:0000000000002EB0                 jmp     _posix_fadvise
.text:0000000000002EB0 ; } // starts at 2EB0
.text:0000000000002EB0 fdadvise        endp
.text:0000000000002EB0
.text:0000000000002EB0 ; ---------------------------------------------------------------------------
.text:0000000000002EB5                 align 20h
.text:0000000000002EC0
.text:0000000000002EC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000002EC0
.text:0000000000002EC0
.text:0000000000002EC0                 public fadvise
.text:0000000000002EC0 fadvise         proc near               ; CODE XREF: nl_file+55↑p
.text:0000000000002EC0 ; __unwind {
.text:0000000000002EC0                 test    rdi, rdi
.text:0000000000002EC3                 jz      short locret_2EE0
.text:0000000000002EC5                 push    rbx
.text:0000000000002EC6                 mov     ebx, esi
.text:0000000000002EC8                 call    _fileno
.text:0000000000002ECD                 mov     ecx, ebx        ; advise
.text:0000000000002ECF                 xor     edx, edx        ; len
.text:0000000000002ED1                 xor     esi, esi        ; offset
.text:0000000000002ED3                 pop     rbx
.text:0000000000002ED4                 mov     edi, eax        ; fd
.text:0000000000002ED6                 jmp     _posix_fadvise
.text:0000000000002ED6 ; ---------------------------------------------------------------------------
.text:0000000000002EDB                 align 20h
.text:0000000000002EE0
.text:0000000000002EE0 locret_2EE0:                            ; CODE XREF: fadvise+3↑j
.text:0000000000002EE0                 rep retn
.text:0000000000002EE0 ; } // starts at 2EC0
.text:0000000000002EE0 fadvise         endp
.text:0000000000002EE0
.text:0000000000002EE0 ; ---------------------------------------------------------------------------
.text:0000000000002EE2                 align 10h
.text:0000000000002EF0
.text:0000000000002EF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000002EF0
.text:0000000000002EF0
.text:0000000000002EF0                 public initbuffer
.text:0000000000002EF0 initbuffer      proc near               ; CODE XREF: main+516↑p
.text:0000000000002EF0 ; __unwind {
.text:0000000000002EF0                 pxor    xmm0, xmm0
.text:0000000000002EF4                 mov     qword ptr [rdi+10h], 0
.text:0000000000002EFC                 movups  xmmword ptr [rdi], xmm0
.text:0000000000002EFF                 retn
.text:0000000000002EFF ; } // starts at 2EF0
.text:0000000000002EFF initbuffer      endp
.text:0000000000002EFF
.text:0000000000002F00
.text:0000000000002F00 ; =============== S U B R O U T I N E =======================================
.text:0000000000002F00
.text:0000000000002F00
.text:0000000000002F00                 public readlinebuffer_delim
.text:0000000000002F00 readlinebuffer_delim proc near          ; CODE XREF: readlinebuffer+5↓j
.text:0000000000002F00
.text:0000000000002F00 var_48          = qword ptr -48h
.text:0000000000002F00 var_39          = byte ptr -39h
.text:0000000000002F00
.text:0000000000002F00 ; __unwind {
.text:0000000000002F00                 push    r15
.text:0000000000002F02                 push    r14
.text:0000000000002F04                 push    r13
.text:0000000000002F06                 push    r12
.text:0000000000002F08                 push    rbp
.text:0000000000002F09                 push    rbx
.text:0000000000002F0A                 sub     rsp, 18h
.text:0000000000002F0E                 mov     r13, [rdi+10h]
.text:0000000000002F12                 mov     r8, [rdi]
.text:0000000000002F15                 add     r8, r13
.text:0000000000002F18                 test    byte ptr [rsi], 10h
.text:0000000000002F1B                 jnz     loc_2FF0
.text:0000000000002F21                 mov     r14, rdi
.text:0000000000002F24                 mov     rbp, rsi
.text:0000000000002F27                 mov     rbx, r13
.text:0000000000002F2A                 movsx   r15d, dl
.text:0000000000002F2E                 jmp     short loc_2F3B
.text:0000000000002F30 ; ---------------------------------------------------------------------------
.text:0000000000002F30
.text:0000000000002F30 loc_2F30:                               ; CODE XREF: readlinebuffer_delim+5A↓j
.text:0000000000002F30                 cmp     r12d, r15d
.text:0000000000002F33                 lea     rbx, [rsi+1]
.text:0000000000002F37                 mov     [rsi], cl
.text:0000000000002F39                 jz      short loc_2F96
.text:0000000000002F3B
.text:0000000000002F3B loc_2F3B:                               ; CODE XREF: readlinebuffer_delim+2E↑j
.text:0000000000002F3B                                         ; readlinebuffer_delim+94↓j
.text:0000000000002F3B                 mov     rcx, [rbp+8]
.text:0000000000002F3F                 cmp     rcx, [rbp+10h]
.text:0000000000002F43                 jnb     short loc_2FB0
.text:0000000000002F45                 lea     rax, [rcx+1]
.text:0000000000002F49                 mov     [rbp+8], rax
.text:0000000000002F4D                 movzx   r12d, byte ptr [rcx]
.text:0000000000002F51                 mov     ecx, r12d
.text:0000000000002F54
.text:0000000000002F54 loc_2F54:                               ; CODE XREF: readlinebuffer_delim+E6↓j
.text:0000000000002F54                                         ; readlinebuffer_delim+103↓j
.text:0000000000002F54                 cmp     rbx, r8
.text:0000000000002F57                 mov     rsi, rbx
.text:0000000000002F5A                 jnz     short loc_2F30
.text:0000000000002F5C                 mov     rbx, [r14]
.text:0000000000002F5F                 mov     rsi, r14
.text:0000000000002F62                 mov     rdi, r13
.text:0000000000002F65                 mov     [rsp+48h+var_39], dl
.text:0000000000002F69                 mov     byte ptr [rsp+48h+var_48], cl
.text:0000000000002F6C                 call    x2realloc
.text:0000000000002F71                 mov     r8, [r14]
.text:0000000000002F74                 movzx   ecx, byte ptr [rsp+48h+var_48]
.text:0000000000002F78                 lea     rsi, [rax+rbx]
.text:0000000000002F7C                 mov     [r14+10h], rax
.text:0000000000002F80                 mov     r13, rax
.text:0000000000002F83                 movzx   edx, [rsp+48h+var_39]
.text:0000000000002F88                 lea     rbx, [rsi+1]
.text:0000000000002F8C                 add     r8, rax
.text:0000000000002F8F                 cmp     r12d, r15d
.text:0000000000002F92                 mov     [rsi], cl
.text:0000000000002F94                 jnz     short loc_2F3B
.text:0000000000002F96
.text:0000000000002F96 loc_2F96:                               ; CODE XREF: readlinebuffer_delim+39↑j
.text:0000000000002F96                                         ; readlinebuffer_delim+DF↓j
.text:0000000000002F96                 sub     rbx, r13
.text:0000000000002F99                 mov     rax, r14
.text:0000000000002F9C                 mov     [r14+8], rbx
.text:0000000000002FA0                 add     rsp, 18h
.text:0000000000002FA4                 pop     rbx
.text:0000000000002FA5                 pop     rbp
.text:0000000000002FA6                 pop     r12
.text:0000000000002FA8                 pop     r13
.text:0000000000002FAA                 pop     r14
.text:0000000000002FAC                 pop     r15
.text:0000000000002FAE                 retn
.text:0000000000002FAE ; ---------------------------------------------------------------------------
.text:0000000000002FAF                 align 10h
.text:0000000000002FB0
.text:0000000000002FB0 loc_2FB0:                               ; CODE XREF: readlinebuffer_delim+43↑j
.text:0000000000002FB0                 mov     rdi, rbp        ; _IO_FILE *
.text:0000000000002FB3                 mov     [rsp+48h+var_39], dl
.text:0000000000002FB7                 mov     [rsp+48h+var_48], r8
.text:0000000000002FBB                 call    ___uflow
.text:0000000000002FC0                 cmp     eax, 0FFFFFFFFh
.text:0000000000002FC3                 mov     r12d, eax
.text:0000000000002FC6                 mov     r8, [rsp+48h+var_48]
.text:0000000000002FCA                 movzx   edx, [rsp+48h+var_39]
.text:0000000000002FCF                 jnz     short loc_3001
.text:0000000000002FD1                 cmp     r13, rbx
.text:0000000000002FD4                 jz      short loc_2FF0
.text:0000000000002FD6                 test    byte ptr [rbp+0], 20h
.text:0000000000002FDA                 jnz     short loc_2FF0
.text:0000000000002FDC                 cmp     [rbx-1], dl
.text:0000000000002FDF                 jz      short loc_2F96
.text:0000000000002FE1                 mov     r12d, r15d
.text:0000000000002FE4                 mov     ecx, edx
.text:0000000000002FE6                 jmp     loc_2F54
.text:0000000000002FE6 ; ---------------------------------------------------------------------------
.text:0000000000002FEB                 align 10h
.text:0000000000002FF0
.text:0000000000002FF0 loc_2FF0:                               ; CODE XREF: readlinebuffer_delim+1B↑j
.text:0000000000002FF0                                         ; readlinebuffer_delim+D4↑j ...
.text:0000000000002FF0                 add     rsp, 18h
.text:0000000000002FF4                 xor     eax, eax
.text:0000000000002FF6                 pop     rbx
.text:0000000000002FF7                 pop     rbp
.text:0000000000002FF8                 pop     r12
.text:0000000000002FFA                 pop     r13
.text:0000000000002FFC                 pop     r14
.text:0000000000002FFE                 pop     r15
.text:0000000000003000                 retn
.text:0000000000003001 ; ---------------------------------------------------------------------------
.text:0000000000003001
.text:0000000000003001 loc_3001:                               ; CODE XREF: readlinebuffer_delim+CF↑j
.text:0000000000003001                 mov     ecx, eax
.text:0000000000003003                 jmp     loc_2F54
.text:0000000000003003 ; } // starts at 2F00
.text:0000000000003003 readlinebuffer_delim endp
.text:0000000000003003
.text:0000000000003003 ; ---------------------------------------------------------------------------
.text:0000000000003008                 align 10h
.text:0000000000003010
.text:0000000000003010 ; =============== S U B R O U T I N E =======================================
.text:0000000000003010
.text:0000000000003010
.text:0000000000003010                 public readlinebuffer
.text:0000000000003010 readlinebuffer  proc near               ; CODE XREF: nl_file+66↑p
.text:0000000000003010                                         ; nl_file+138↑p
.text:0000000000003010 ; __unwind {
.text:0000000000003010                 mov     edx, 0Ah
.text:0000000000003015                 jmp     readlinebuffer_delim
.text:0000000000003015 ; } // starts at 3010
.text:0000000000003015 readlinebuffer  endp
.text:0000000000003015
.text:0000000000003015 ; ---------------------------------------------------------------------------
.text:000000000000301A                 align 20h
.text:0000000000003020
.text:0000000000003020 ; =============== S U B R O U T I N E =======================================
.text:0000000000003020
.text:0000000000003020
.text:0000000000003020                 public freebuffer
.text:0000000000003020 freebuffer      proc near
.text:0000000000003020 ; __unwind {
.text:0000000000003020                 mov     rdi, [rdi+10h]  ; ptr
.text:0000000000003024                 jmp     _free
.text:0000000000003024 ; } // starts at 3020
.text:0000000000003024 freebuffer      endp
.text:0000000000003024
.text:0000000000003024 ; ---------------------------------------------------------------------------
.text:0000000000003029                 align 10h
.text:0000000000003030
.text:0000000000003030 ; =============== S U B R O U T I N E =======================================
.text:0000000000003030
.text:0000000000003030
.text:0000000000003030                 public set_program_name
.text:0000000000003030 set_program_name proc near              ; CODE XREF: main+31↑p
.text:0000000000003030 ; __unwind {
.text:0000000000003030                 test    rdi, rdi
.text:0000000000003033                 push    rbx
.text:0000000000003034                 jz      short loc_30AD
.text:0000000000003036                 mov     esi, 2Fh ; '/'  ; c
.text:000000000000303B                 mov     rbx, rdi
.text:000000000000303E                 call    _strrchr
.text:0000000000003043                 test    rax, rax
.text:0000000000003046                 jz      short loc_309D
.text:0000000000003048                 lea     r8, [rax+1]
.text:000000000000304C                 mov     rdx, r8
.text:000000000000304F                 sub     rdx, rbx
.text:0000000000003052                 cmp     rdx, 6
.text:0000000000003056                 jle     short loc_309D
.text:0000000000003058                 lea     rsi, [rax-6]
.text:000000000000305C                 lea     rdi, aLibs      ; "/.libs/"
.text:0000000000003063                 mov     ecx, 7
.text:0000000000003068                 repe cmpsb
.text:000000000000306A                 setnbe  dl
.text:000000000000306D                 sbb     dl, 0
.text:0000000000003070                 test    dl, dl
.text:0000000000003072                 jnz     short loc_309D
.text:0000000000003074                 lea     rdi, aLt        ; "lt-"
.text:000000000000307B                 mov     ecx, 3
.text:0000000000003080                 mov     rsi, r8
.text:0000000000003083                 mov     rbx, r8
.text:0000000000003086                 repe cmpsb
.text:0000000000003088                 setnbe  dl
.text:000000000000308B                 sbb     dl, 0
.text:000000000000308E                 test    dl, dl
.text:0000000000003090                 jnz     short loc_309D
.text:0000000000003092                 lea     rbx, [rax+4]
.text:0000000000003096                 mov     cs:__bss_start, rbx
.text:000000000000309D
.text:000000000000309D loc_309D:                               ; CODE XREF: set_program_name+16↑j
.text:000000000000309D                                         ; set_program_name+26↑j ...
.text:000000000000309D                 mov     cs:program_name, rbx
.text:00000000000030A4                 mov     cs:program_invocation_name@@GLIBC_2_2_5, rbx
.text:00000000000030AB                 pop     rbx
.text:00000000000030AC                 retn
.text:00000000000030AD ; ---------------------------------------------------------------------------
.text:00000000000030AD
.text:00000000000030AD loc_30AD:                               ; CODE XREF: set_program_name+4↑j
.text:00000000000030AD                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:00000000000030B4                 lea     rdi, aANullArgv0WasP ; "A NULL argv[0] was passed through an ex"...
.text:00000000000030BB                 mov     edx, 37h ; '7'  ; n
.text:00000000000030C0                 mov     esi, 1          ; size
.text:00000000000030C5                 call    _fwrite
.text:00000000000030CA                 call    _abort
.text:00000000000030CA ; } // starts at 3030
.text:00000000000030CA set_program_name endp
.text:00000000000030CA
.text:00000000000030CA ; ---------------------------------------------------------------------------
.text:00000000000030CF                 align 10h
.text:00000000000030D0
.text:00000000000030D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000030D0
.text:00000000000030D0 ; Attributes: info_from_lumina
.text:00000000000030D0
.text:00000000000030D0 ; const char *__fastcall gettext_quote(const char *msgid, quoting_style s)
.text:00000000000030D0 gettext_quote   proc near               ; CODE XREF: quotearg_buffer_restyled+1165↓p
.text:00000000000030D0                                         ; quotearg_buffer_restyled+117B↓p
.text:00000000000030D0 ; __unwind {
.text:00000000000030D0                 push    rbp
.text:00000000000030D1                 push    rbx
.text:00000000000030D2                 mov     rbp, rdi
.text:00000000000030D5                 mov     ebx, esi
.text:00000000000030D7                 sub     rsp, 8
.text:00000000000030DB                 call    locale_charset
.text:00000000000030E0                 movzx   edx, byte ptr [rax]
.text:00000000000030E3                 and     edx, 0FFFFFFDFh
.text:00000000000030E6                 cmp     dl, 55h ; 'U'
.text:00000000000030E9                 jz      short loc_3160
.text:00000000000030EB                 cmp     dl, 47h ; 'G'
.text:00000000000030EE                 jz      short loc_3110
.text:00000000000030F0
.text:00000000000030F0 loc_30F0:                               ; CODE XREF: gettext_quote+4A↓j
.text:00000000000030F0                                         ; gettext_quote+50↓j ...
.text:00000000000030F0                 lea     rax, unk_14EC3
.text:00000000000030F7                 lea     rdx, asc_14EC5  ; "'"
.text:00000000000030FE                 cmp     ebx, 9
.text:0000000000003101                 cmovnz  rax, rdx
.text:0000000000003105                 add     rsp, 8
.text:0000000000003109                 pop     rbx
.text:000000000000310A                 pop     rbp
.text:000000000000310B                 retn
.text:000000000000310B ; ---------------------------------------------------------------------------
.text:000000000000310C                 align 10h
.text:0000000000003110
.text:0000000000003110 loc_3110:                               ; CODE XREF: gettext_quote+1E↑j
.text:0000000000003110                 movzx   edx, byte ptr [rax+1]
.text:0000000000003114                 and     edx, 0FFFFFFDFh
.text:0000000000003117                 cmp     dl, 42h ; 'B'
.text:000000000000311A                 jnz     short loc_30F0
.text:000000000000311C                 cmp     byte ptr [rax+2], 31h ; '1'
.text:0000000000003120                 jnz     short loc_30F0
.text:0000000000003122                 cmp     byte ptr [rax+3], 38h ; '8'
.text:0000000000003126                 jnz     short loc_30F0
.text:0000000000003128                 cmp     byte ptr [rax+4], 30h ; '0'
.text:000000000000312C                 jnz     short loc_30F0
.text:000000000000312E                 cmp     byte ptr [rax+5], 33h ; '3'
.text:0000000000003132                 jnz     short loc_30F0
.text:0000000000003134                 cmp     byte ptr [rax+6], 30h ; '0'
.text:0000000000003138                 jnz     short loc_30F0
.text:000000000000313A                 cmp     byte ptr [rax+7], 0
.text:000000000000313E                 jnz     short loc_30F0
.text:0000000000003140                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000003144                 lea     rax, unk_14EBC
.text:000000000000314B                 lea     rdx, unk_14EC0
.text:0000000000003152                 cmovnz  rax, rdx
.text:0000000000003156                 add     rsp, 8
.text:000000000000315A                 pop     rbx
.text:000000000000315B                 pop     rbp
.text:000000000000315C                 retn
.text:000000000000315C ; ---------------------------------------------------------------------------
.text:000000000000315D                 align 20h
.text:0000000000003160
.text:0000000000003160 loc_3160:                               ; CODE XREF: gettext_quote+19↑j
.text:0000000000003160                 movzx   edx, byte ptr [rax+1]
.text:0000000000003164                 and     edx, 0FFFFFFDFh
.text:0000000000003167                 cmp     dl, 54h ; 'T'
.text:000000000000316A                 jnz     short loc_30F0
.text:000000000000316C                 movzx   edx, byte ptr [rax+2]
.text:0000000000003170                 and     edx, 0FFFFFFDFh
.text:0000000000003173                 cmp     dl, 46h ; 'F'
.text:0000000000003176                 jnz     loc_30F0
.text:000000000000317C                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:0000000000003180                 jnz     loc_30F0
.text:0000000000003186                 cmp     byte ptr [rax+4], 38h ; '8'
.text:000000000000318A                 jnz     loc_30F0
.text:0000000000003190                 cmp     byte ptr [rax+5], 0
.text:0000000000003194                 jnz     loc_30F0
.text:000000000000319A                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:000000000000319E                 lea     rax, unk_14EB4
.text:00000000000031A5                 lea     rdx, unk_14EB8
.text:00000000000031AC                 cmovnz  rax, rdx
.text:00000000000031B0                 add     rsp, 8
.text:00000000000031B4                 pop     rbx
.text:00000000000031B5                 pop     rbp
.text:00000000000031B6                 retn
.text:00000000000031B6 ; } // starts at 30D0
.text:00000000000031B6 gettext_quote   endp
.text:00000000000031B6
.text:00000000000031B6 ; ---------------------------------------------------------------------------
.text:00000000000031B7                 align 20h
.text:00000000000031C0
.text:00000000000031C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000031C0
.text:00000000000031C0 ; Attributes: info_from_lumina
.text:00000000000031C0
.text:00000000000031C0 ; size_t __fastcall quotearg_buffer_restyled(char *buffer, size_t buffersize, const char *arg, size_t argsize, quoting_style quoting_style, int flags, const unsigned int *quote_these_too, const char *left_quote, const char *right_quote)
.text:00000000000031C0 quotearg_buffer_restyled proc near      ; CODE XREF: quotearg_buffer_restyled+BCD↓p
.text:00000000000031C0                                         ; quotearg_buffer_restyled+11CB↓p ...
.text:00000000000031C0
.text:00000000000031C0 var_E0          = dword ptr -0E0h
.text:00000000000031C0 var_DB          = byte ptr -0DBh
.text:00000000000031C0 var_DA          = byte ptr -0DAh
.text:00000000000031C0 var_D9          = byte ptr -0D9h
.text:00000000000031C0 s               = qword ptr -0D8h
.text:00000000000031C0 n               = qword ptr -0D0h
.text:00000000000031C0 var_C8          = qword ptr -0C8h
.text:00000000000031C0 ps              = qword ptr -0C0h
.text:00000000000031C0 var_B8          = qword ptr -0B8h
.text:00000000000031C0 var_B0          = qword ptr -0B0h
.text:00000000000031C0 var_A8          = qword ptr -0A8h
.text:00000000000031C0 s2              = qword ptr -0A0h
.text:00000000000031C0 var_98          = qword ptr -98h
.text:00000000000031C0 var_90          = qword ptr -90h
.text:00000000000031C0 var_88          = qword ptr -88h
.text:00000000000031C0 var_80          = qword ptr -80h
.text:00000000000031C0 var_78          = qword ptr -78h
.text:00000000000031C0 var_70          = dword ptr -70h
.text:00000000000031C0 var_6C          = byte ptr -6Ch
.text:00000000000031C0 var_6B          = byte ptr -6Bh
.text:00000000000031C0 var_6A          = byte ptr -6Ah
.text:00000000000031C0 var_69          = byte ptr -69h
.text:00000000000031C0 var_68          = qword ptr -68h
.text:00000000000031C0 var_60          = qword ptr -60h
.text:00000000000031C0 wc              = dword ptr -4Ch
.text:00000000000031C0 var_48          = qword ptr -48h
.text:00000000000031C0 var_40          = qword ptr -40h
.text:00000000000031C0 arg_0           = qword ptr  8
.text:00000000000031C0 arg_8           = qword ptr  10h
.text:00000000000031C0 arg_10          = qword ptr  18h
.text:00000000000031C0
.text:00000000000031C0 ; __unwind {
.text:00000000000031C0                 push    r15
.text:00000000000031C2                 push    r14
.text:00000000000031C4                 mov     r15d, r8d
.text:00000000000031C7                 push    r13
.text:00000000000031C9                 push    r12
.text:00000000000031CB                 mov     r14, rdi
.text:00000000000031CE                 push    rbp
.text:00000000000031CF                 push    rbx
.text:00000000000031D0                 mov     ebx, r9d
.text:00000000000031D3                 mov     r13, rsi
.text:00000000000031D6                 mov     rbp, rcx
.text:00000000000031D9                 and     ebx, 2
.text:00000000000031DC                 sub     rsp, 0B8h
.text:00000000000031E3                 mov     rax, [rsp+0E8h+arg_0]
.text:00000000000031EB                 mov     [rsp+0E8h+s], rdx
.text:00000000000031F0                 mov     [rsp+0E8h+var_E0], r8d
.text:00000000000031F5                 mov     [rsp+0E8h+var_70], r9d
.text:00000000000031FA                 mov     [rsp+0E8h+var_C8], rax
.text:00000000000031FF                 mov     rax, [rsp+0E8h+arg_8]
.text:0000000000003207                 mov     [rsp+0E8h+var_80], rax
.text:000000000000320C                 mov     rax, [rsp+0E8h+arg_10]
.text:0000000000003214                 mov     [rsp+0E8h+var_88], rax
.text:0000000000003219                 mov     rax, fs:28h
.text:0000000000003222                 mov     [rsp+0E8h+var_40], rax
.text:000000000000322A                 xor     eax, eax
.text:000000000000322C                 call    ___ctype_get_mb_cur_max
.text:0000000000003231                 cmp     r15d, 0Ah       ; switch 11 cases
.text:0000000000003235                 mov     [rsp+0E8h+var_90], rax
.text:000000000000323A                 ja      def_3251        ; jumptable 00000000000121F1 default case
.text:0000000000003240                 lea     rcx, jpt_3251
.text:0000000000003247                 mov     edx, r15d
.text:000000000000324A                 movsxd  rax, ds:(jpt_3251 - 14F20h)[rcx+rdx*4]
.text:000000000000324E                 add     rax, rcx
.text:0000000000003251                 jmp     rax             ; switch jump
.text:0000000000003253 ; ---------------------------------------------------------------------------
.text:0000000000003253
.text:0000000000003253 loc_3253:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003253                                         ; quotearg_buffer_restyled+C66↓j
.text:0000000000003253                                         ; DATA XREF: ...
.text:0000000000003253                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 1
.text:0000000000003258                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000325D                 xor     r12d, r12d
.text:0000000000003260                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003269                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000326E                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000003273
.text:0000000000003273 loc_3273:                               ; CODE XREF: quotearg_buffer_restyled+E94↓j
.text:0000000000003273                 lea     rax, asc_14EC5  ; "'"
.text:000000000000327A                 mov     [rsp+0E8h+n], 1
.text:0000000000003283                 xor     r15d, r15d
.text:0000000000003286                 mov     [rsp+0E8h+var_E0], 2
.text:000000000000328E                 mov     [rsp+0E8h+s2], rax
.text:0000000000003293
.text:0000000000003293 loc_3293:                               ; CODE XREF: quotearg_buffer_restyled+7F4↓j
.text:0000000000003293                                         ; quotearg_buffer_restyled+CB8↓j ...
.text:0000000000003293                 xor     r11d, r11d
.text:0000000000003296                 mov     rax, rbp
.text:0000000000003299                 mov     r8d, r12d
.text:000000000000329C                 mov     rbp, r11
.text:000000000000329F                 mov     r11, rax
.text:00000000000032A2                 nop     word ptr [rax+rax+00h]
.text:00000000000032A8
.text:00000000000032A8 loc_32A8:                               ; CODE XREF: quotearg_buffer_restyled+2B2↓j
.text:00000000000032A8                                         ; quotearg_buffer_restyled+42C↓j
.text:00000000000032A8                 cmp     r11, rbp
.text:00000000000032AB                 setnz   r12b
.text:00000000000032AF                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:00000000000032B3                 jnz     short loc_32C2
.text:00000000000032B5                 mov     rax, [rsp+0E8h+s]
.text:00000000000032BA                 cmp     byte ptr [rax+rbp], 0
.text:00000000000032BE                 setnz   r12b
.text:00000000000032C2
.text:00000000000032C2 loc_32C2:                               ; CODE XREF: quotearg_buffer_restyled+F3↑j
.text:00000000000032C2                 test    r12b, r12b
.text:00000000000032C5                 jz      loc_3920
.text:00000000000032CB                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000032D0                 mov     rdi, [rsp+0E8h+s] ; s
.text:00000000000032D5                 lea     r9, [rdi+rbp]
.text:00000000000032D9                 setnz   al
.text:00000000000032DC                 and     al, [rsp+0E8h+var_DB]
.text:00000000000032E0                 mov     r10d, eax
.text:00000000000032E3                 jz      loc_3390
.text:00000000000032E9                 mov     rax, [rsp+0E8h+n]
.text:00000000000032EE                 test    rax, rax
.text:00000000000032F1                 jz      loc_3720
.text:00000000000032F7                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:00000000000032FB                 lea     rbx, [rbp+rax+0]
.text:0000000000003300                 jnz     short loc_3330
.text:0000000000003302                 cmp     rax, 1
.text:0000000000003306                 jbe     short loc_3330
.text:0000000000003308                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:000000000000330D                 mov     byte ptr [rsp+0E8h+var_B8], r10b
.text:0000000000003312                 mov     [rsp+0E8h+ps], r9
.text:0000000000003317                 call    _strlen
.text:000000000000331C                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000003322                 movzx   r10d, byte ptr [rsp+0E8h+var_B8]
.text:0000000000003328                 mov     r11, rax
.text:000000000000332B                 mov     r9, [rsp+0E8h+ps]
.text:0000000000003330
.text:0000000000003330 loc_3330:                               ; CODE XREF: quotearg_buffer_restyled+140↑j
.text:0000000000003330                                         ; quotearg_buffer_restyled+146↑j
.text:0000000000003330                 cmp     rbx, r11
.text:0000000000003333                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000003338                 ja      loc_38F0
.text:000000000000333E                 mov     rdx, [rsp+0E8h+n] ; n
.text:0000000000003343                 mov     rsi, [rsp+0E8h+s2] ; s2
.text:0000000000003348                 mov     rdi, r9         ; s1
.text:000000000000334B                 mov     [rsp+0E8h+var_A8], r11
.text:0000000000003350                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000003355                 mov     [rsp+0E8h+var_B8], r9
.text:000000000000335A                 call    _memcmp
.text:000000000000335F                 test    eax, eax
.text:0000000000003361                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000003366                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:000000000000336C                 mov     r11, [rsp+0E8h+var_A8]
.text:0000000000003371                 jnz     loc_38F0
.text:0000000000003377                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000337C                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000003382                 jnz     loc_4305
.text:0000000000003388                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000003390
.text:0000000000003390 loc_3390:                               ; CODE XREF: quotearg_buffer_restyled+123↑j
.text:0000000000003390                                         ; quotearg_buffer_restyled+733↓j
.text:0000000000003390                 movzx   ebx, byte ptr [r9]
.text:0000000000003394                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000003397                 ja      def_33AE        ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:000000000000339D                 lea     rcx, jpt_33AE
.text:00000000000033A4                 movzx   edx, bl
.text:00000000000033A7                 movsxd  rax, ds:(jpt_33AE - 14F4Ch)[rcx+rdx*4]
.text:00000000000033AB                 add     rax, rcx
.text:00000000000033AE                 jmp     rax             ; switch jump
.text:00000000000033B0 ; ---------------------------------------------------------------------------
.text:00000000000033B0
.text:00000000000033B0 loc_33B0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:00000000000033B0                                         ; DATA XREF: .rodata:jpt_373A↓o
.text:00000000000033B0                 xor     r10d, r10d      ; jumptable 00000000000126DA cases 123,125
.text:00000000000033B3
.text:00000000000033B3 loc_33B3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000033B3                                         ; DATA XREF: .rodata:jpt_33AE↓o
.text:00000000000033B3                 cmp     r11, 1          ; jumptable 000000000001234E cases 123,125
.text:00000000000033B7                 setnz   al
.text:00000000000033BA                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:00000000000033BE                 jnz     short loc_33CC
.text:00000000000033C0                 mov     rax, [rsp+0E8h+s]
.text:00000000000033C5                 cmp     byte ptr [rax+1], 0
.text:00000000000033C9                 setnz   al
.text:00000000000033CC
.text:00000000000033CC loc_33CC:                               ; CODE XREF: quotearg_buffer_restyled+1FE↑j
.text:00000000000033CC                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000033D1                 setz    dl
.text:00000000000033D4                 test    al, al
.text:00000000000033D6                 jz      loc_3628
.text:00000000000033DC
.text:00000000000033DC loc_33DC:                               ; CODE XREF: quotearg_buffer_restyled+46B↓j
.text:00000000000033DC                 xor     r12d, r12d
.text:00000000000033DF                 xor     eax, eax
.text:00000000000033E1                 nop     dword ptr [rax+00000000h]
.text:00000000000033E8
.text:00000000000033E8 loc_33E8:                               ; CODE XREF: quotearg_buffer_restyled+2E9↓j
.text:00000000000033E8                                         ; quotearg_buffer_restyled+30C↓j ...
.text:00000000000033E8                 cmp     [rsp+0E8h+var_DB], 1
.text:00000000000033ED                 jnz     loc_3502
.text:00000000000033F3                 test    dl, dl
.text:00000000000033F5                 jnz     loc_3502
.text:00000000000033FB
.text:00000000000033FB loc_33FB:                               ; CODE XREF: quotearg_buffer_restyled+347↓j
.text:00000000000033FB                 mov     rsi, [rsp+0E8h+var_C8]
.text:0000000000003400                 test    rsi, rsi
.text:0000000000003403                 jz      short loc_3419
.text:0000000000003405                 mov     edx, ebx
.text:0000000000003407                 shr     dl, 5
.text:000000000000340A                 movzx   edx, dl
.text:000000000000340D                 mov     edx, [rsi+rdx*4]
.text:0000000000003410                 bt      edx, ebx
.text:0000000000003413                 jb      loc_3563
.text:0000000000003419
.text:0000000000003419 loc_3419:                               ; CODE XREF: quotearg_buffer_restyled+243↑j
.text:0000000000003419                                         ; quotearg_buffer_restyled+34D↓j ...
.text:0000000000003419                 test    r10b, r10b
.text:000000000000341C                 jnz     loc_3563
.text:0000000000003422                 xor     eax, 1
.text:0000000000003425                 add     rbp, 1
.text:0000000000003429                 and     eax, r8d
.text:000000000000342C
.text:000000000000342C loc_342C:                               ; CODE XREF: quotearg_buffer_restyled+75A↓j
.text:000000000000342C                                         ; quotearg_buffer_restyled+AE8↓j
.text:000000000000342C                 test    al, al
.text:000000000000342E                 jz      short loc_3450
.text:0000000000003430                 cmp     r13, r15
.text:0000000000003433                 jbe     short loc_343A
.text:0000000000003435                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000343A
.text:000000000000343A loc_343A:                               ; CODE XREF: quotearg_buffer_restyled+273↑j
.text:000000000000343A                 lea     rax, [r15+1]
.text:000000000000343E                 cmp     r13, rax
.text:0000000000003441                 jbe     short loc_3449
.text:0000000000003443                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000003449
.text:0000000000003449 loc_3449:                               ; CODE XREF: quotearg_buffer_restyled+281↑j
.text:0000000000003449                 add     r15, 2
.text:000000000000344D                 xor     r8d, r8d
.text:0000000000003450
.text:0000000000003450 loc_3450:                               ; CODE XREF: quotearg_buffer_restyled+26E↑j
.text:0000000000003450                                         ; quotearg_buffer_restyled+403↓j ...
.text:0000000000003450                 cmp     r15, r13
.text:0000000000003453                 jnb     short loc_3459
.text:0000000000003455                 mov     [r14+r15], bl
.text:0000000000003459
.text:0000000000003459 loc_3459:                               ; CODE XREF: quotearg_buffer_restyled+293↑j
.text:0000000000003459                 movzx   edi, [rsp+0E8h+var_DA]
.text:000000000000345E                 add     r15, 1
.text:0000000000003462                 mov     eax, 0
.text:0000000000003467                 test    r12b, r12b
.text:000000000000346A                 cmovz   edi, eax
.text:000000000000346D                 mov     [rsp+0E8h+var_DA], dil
.text:0000000000003472                 jmp     loc_32A8
.text:0000000000003472 ; ---------------------------------------------------------------------------
.text:0000000000003477                 align 20h
.text:0000000000003480
.text:0000000000003480 loc_3480:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000003480                                         ; DATA XREF: .rodata:jpt_373A↓o
.text:0000000000003480                 xor     r10d, r10d      ; jumptable 00000000000126DA case 63
.text:0000000000003483
.text:0000000000003483 loc_3483:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003483                                         ; DATA XREF: .rodata:jpt_33AE↓o
.text:0000000000003483                 mov     eax, [rsp+0E8h+var_E0] ; jumptable 000000000001234E case 63
.text:0000000000003487                 cmp     eax, 2
.text:000000000000348A                 jz      loc_3A48
.text:0000000000003490                 cmp     eax, 5
.text:0000000000003493                 jz      loc_3A08
.text:0000000000003499                 cmp     eax, 2
.text:000000000000349C                 mov     ebx, 3Fh ; '?'
.text:00000000000034A1                 setz    dl
.text:00000000000034A4                 xor     r12d, r12d
.text:00000000000034A7                 xor     eax, eax
.text:00000000000034A9                 jmp     loc_33E8
.text:00000000000034A9 ; ---------------------------------------------------------------------------
.text:00000000000034AE                 align 10h
.text:00000000000034B0
.text:00000000000034B0 loc_34B0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:00000000000034B0                                         ; DATA XREF: .rodata:jpt_373A↓o
.text:00000000000034B0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 39
.text:00000000000034B3
.text:00000000000034B3 loc_34B3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000034B3                                         ; DATA XREF: .rodata:jpt_33AE↓o
.text:00000000000034B3                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 39
.text:00000000000034B8                 jz      loc_39C0
.text:00000000000034BE                 mov     [rsp+0E8h+var_6C], r12b
.text:00000000000034C3                 xor     edx, edx
.text:00000000000034C5                 xor     eax, eax
.text:00000000000034C7                 mov     ebx, 27h ; '''
.text:00000000000034CC                 jmp     loc_33E8
.text:00000000000034CC ; ---------------------------------------------------------------------------
.text:00000000000034D1                 align 8
.text:00000000000034D8
.text:00000000000034D8 loc_34D8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000034D8                                         ; DATA XREF: .rodata:jpt_33AE↓o
.text:00000000000034D8                 mov     edx, 9          ; jumptable 000000000001234E case 9
.text:00000000000034DD                 mov     ebx, 74h ; 't'
.text:00000000000034E2
.text:00000000000034E2 loc_34E2:                               ; CODE XREF: quotearg_buffer_restyled+4BA↓j
.text:00000000000034E2                                         ; quotearg_buffer_restyled+4EA↓j ...
.text:00000000000034E2                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000034E7                 setz    al
.text:00000000000034EA                 and     al, [rsp+0E8h+var_D9]
.text:00000000000034EE                 jnz     loc_363E
.text:00000000000034F4
.text:00000000000034F4 loc_34F4:                               ; CODE XREF: quotearg_buffer_restyled+362↓j
.text:00000000000034F4                                         ; quotearg_buffer_restyled+45A↓j ...
.text:00000000000034F4                 cmp     [rsp+0E8h+var_DB], 0
.text:00000000000034F9                 jnz     short loc_3560
.text:00000000000034FB
.text:00000000000034FB loc_34FB:                               ; CODE XREF: quotearg_buffer_restyled+422↓j
.text:00000000000034FB                 mov     ebx, edx
.text:00000000000034FD                 xor     r12d, r12d
.text:0000000000003500                 xor     eax, eax
.text:0000000000003502
.text:0000000000003502 loc_3502:                               ; CODE XREF: quotearg_buffer_restyled+22D↑j
.text:0000000000003502                                         ; quotearg_buffer_restyled+235↑j
.text:0000000000003502                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003507                 jnz     loc_33FB
.text:000000000000350D                 jmp     loc_3419
.text:000000000000350D ; ---------------------------------------------------------------------------
.text:0000000000003512                 align 8
.text:0000000000003518
.text:0000000000003518 loc_3518:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003518                                         ; DATA XREF: .rodata:jpt_33AE↓o
.text:0000000000003518                 mov     edx, 8          ; jumptable 000000000001234E case 8
.text:000000000000351D                 mov     ebx, 62h ; 'b'
.text:0000000000003522                 jmp     short loc_34F4
.text:0000000000003522 ; ---------------------------------------------------------------------------
.text:0000000000003524                 align 8
.text:0000000000003528
.text:0000000000003528 loc_3528:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003528                                         ; DATA XREF: .rodata:jpt_33AE↓o
.text:0000000000003528                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 92
.text:000000000000352D                 jz      loc_3900
.text:0000000000003533                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000003538                 jz      loc_3750
.text:000000000000353E
.text:000000000000353E loc_353E:                               ; CODE XREF: quotearg_buffer_restyled+588↓j
.text:000000000000353E                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003543                 jz      loc_3750
.text:0000000000003549                 cmp     [rsp+0E8h+n], 0
.text:000000000000354F                 jnz     loc_390B
.text:0000000000003555                 mov     ebx, 5Ch ; '\'
.text:000000000000355A                 nop     word ptr [rax+rax+00h]
.text:0000000000003560
.text:0000000000003560 loc_3560:                               ; CODE XREF: quotearg_buffer_restyled+339↑j
.text:0000000000003560                                         ; quotearg_buffer_restyled+5D5↓j ...
.text:0000000000003560                 xor     r12d, r12d
.text:0000000000003563
.text:0000000000003563 loc_3563:                               ; CODE XREF: quotearg_buffer_restyled+253↑j
.text:0000000000003563                                         ; quotearg_buffer_restyled+25C↑j
.text:0000000000003563                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003568                 setz    dl
.text:000000000000356B                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003570                 mov     eax, edx
.text:0000000000003572                 jnz     loc_3DC8
.text:0000000000003578                 mov     eax, r8d
.text:000000000000357B                 xor     eax, 1
.text:000000000000357E                 and     al, dl
.text:0000000000003580                 jz      short loc_35B1
.text:0000000000003582                 cmp     r13, r15
.text:0000000000003585                 jbe     short loc_358C
.text:0000000000003587                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000358C
.text:000000000000358C loc_358C:                               ; CODE XREF: quotearg_buffer_restyled+3C5↑j
.text:000000000000358C                 lea     rdx, [r15+1]
.text:0000000000003590                 cmp     r13, rdx
.text:0000000000003593                 jbe     short loc_359B
.text:0000000000003595                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:000000000000359B
.text:000000000000359B loc_359B:                               ; CODE XREF: quotearg_buffer_restyled+3D3↑j
.text:000000000000359B                 lea     rdx, [r15+2]
.text:000000000000359F                 cmp     r13, rdx
.text:00000000000035A2                 jbe     short loc_35AA
.text:00000000000035A4                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:00000000000035AA
.text:00000000000035AA loc_35AA:                               ; CODE XREF: quotearg_buffer_restyled+3E2↑j
.text:00000000000035AA                 add     r15, 3
.text:00000000000035AE                 mov     r8d, eax
.text:00000000000035B1
.text:00000000000035B1 loc_35B1:                               ; CODE XREF: quotearg_buffer_restyled+3C0↑j
.text:00000000000035B1                 cmp     r13, r15
.text:00000000000035B4                 jbe     short loc_35BB
.text:00000000000035B6                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:00000000000035BB
.text:00000000000035BB loc_35BB:                               ; CODE XREF: quotearg_buffer_restyled+3F4↑j
.text:00000000000035BB                 add     r15, 1
.text:00000000000035BF                 add     rbp, 1
.text:00000000000035C3                 jmp     loc_3450
.text:00000000000035C3 ; ---------------------------------------------------------------------------
.text:00000000000035C8                 align 10h
.text:00000000000035D0
.text:00000000000035D0 loc_35D0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000035D0                                         ; DATA XREF: .rodata:jpt_33AE↓o
.text:00000000000035D0                 cmp     [rsp+0E8h+var_DB], 0 ; jumptable 000000000001234E case 0
.text:00000000000035D5                 jnz     loc_37A3
.text:00000000000035DB                 xor     edx, edx
.text:00000000000035DD                 test    byte ptr [rsp+0E8h+var_70], 1
.text:00000000000035E2                 jz      loc_34FB
.text:00000000000035E8                 add     rbp, 1
.text:00000000000035EC                 jmp     loc_32A8
.text:00000000000035EC ; ---------------------------------------------------------------------------
.text:00000000000035F1                 align 8
.text:00000000000035F8
.text:00000000000035F8 loc_35F8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000035F8                                         ; DATA XREF: .rodata:jpt_33AE↓o
.text:00000000000035F8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 37,43-58,65-90,93,95,97-122
.text:00000000000035FD                 setz    dl
.text:0000000000003600                 xor     eax, eax
.text:0000000000003602                 jmp     loc_33E8
.text:0000000000003602 ; ---------------------------------------------------------------------------
.text:0000000000003607                 align 10h
.text:0000000000003610
.text:0000000000003610 loc_3610:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003610                                         ; DATA XREF: .rodata:jpt_33AE↓o
.text:0000000000003610                 mov     edx, 7          ; jumptable 000000000001234E case 7
.text:0000000000003615                 mov     ebx, 61h ; 'a'
.text:000000000000361A                 jmp     loc_34F4
.text:000000000000361A ; ---------------------------------------------------------------------------
.text:000000000000361F                 align 20h
.text:0000000000003620
.text:0000000000003620 loc_3620:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003620                                         ; DATA XREF: .rodata:jpt_33AE↓o
.text:0000000000003620                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 35,126
.text:0000000000003625                 setz    dl
.text:0000000000003628
.text:0000000000003628 loc_3628:                               ; CODE XREF: quotearg_buffer_restyled+216↑j
.text:0000000000003628                                         ; quotearg_buffer_restyled+6A3↓j
.text:0000000000003628                 test    rbp, rbp
.text:000000000000362B                 jnz     loc_33DC
.text:0000000000003631
.text:0000000000003631 loc_3631:                               ; CODE XREF: quotearg_buffer_restyled+49B↓j
.text:0000000000003631                                         ; quotearg_buffer_restyled+4AD↓j ...
.text:0000000000003631                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000003636                 and     al, dl
.text:0000000000003638                 jz      loc_33E8
.text:000000000000363E
.text:000000000000363E loc_363E:                               ; CODE XREF: quotearg_buffer_restyled+32E↑j
.text:000000000000363E                 mov     rbp, r11
.text:0000000000003641                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003649                 jmp     loc_3D49
.text:0000000000003649 ; ---------------------------------------------------------------------------
.text:000000000000364E                 align 10h
.text:0000000000003650
.text:0000000000003650 loc_3650:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003650                                         ; DATA XREF: .rodata:jpt_33AE↓o
.text:0000000000003650                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000003655                 setz    dl
.text:0000000000003658                 xor     r12d, r12d
.text:000000000000365B                 jmp     short loc_3631
.text:000000000000365B ; ---------------------------------------------------------------------------
.text:000000000000365D                 align 20h
.text:0000000000003660
.text:0000000000003660 loc_3660:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003660                                         ; DATA XREF: .rodata:jpt_33AE↓o
.text:0000000000003660                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 32
.text:0000000000003665                 mov     ebx, 20h ; ' '
.text:000000000000366A                 setz    dl
.text:000000000000366D                 jmp     short loc_3631
.text:000000000000366D ; ---------------------------------------------------------------------------
.text:000000000000366F                 align 10h
.text:0000000000003670
.text:0000000000003670 loc_3670:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003670                                         ; DATA XREF: .rodata:jpt_33AE↓o
.text:0000000000003670                 mov     edx, 0Dh        ; jumptable 000000000001234E case 13
.text:0000000000003675                 mov     ebx, 72h ; 'r'
.text:000000000000367A                 jmp     loc_34E2
.text:000000000000367A ; ---------------------------------------------------------------------------
.text:000000000000367F                 align 20h
.text:0000000000003680
.text:0000000000003680 loc_3680:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003680                                         ; DATA XREF: .rodata:jpt_33AE↓o
.text:0000000000003680                 mov     edx, 0Ch        ; jumptable 000000000001234E case 12
.text:0000000000003685                 mov     ebx, 66h ; 'f'
.text:000000000000368A                 jmp     loc_34F4
.text:000000000000368A ; ---------------------------------------------------------------------------
.text:000000000000368F                 align 10h
.text:0000000000003690
.text:0000000000003690 loc_3690:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003690                                         ; DATA XREF: .rodata:jpt_33AE↓o
.text:0000000000003690                 mov     edx, 0Bh        ; jumptable 000000000001234E case 11
.text:0000000000003695                 mov     ebx, 76h ; 'v'
.text:000000000000369A                 jmp     loc_34F4
.text:000000000000369A ; ---------------------------------------------------------------------------
.text:000000000000369F                 align 20h
.text:00000000000036A0
.text:00000000000036A0 loc_36A0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000036A0                                         ; DATA XREF: .rodata:jpt_33AE↓o
.text:00000000000036A0                 mov     edx, 0Ah        ; jumptable 000000000001234E case 10
.text:00000000000036A5                 mov     ebx, 6Eh ; 'n'
.text:00000000000036AA                 jmp     loc_34E2
.text:00000000000036AA ; ---------------------------------------------------------------------------
.text:00000000000036AF                 align 10h
.text:00000000000036B0
.text:00000000000036B0 def_373A:                               ; CODE XREF: quotearg_buffer_restyled+567↓j
.text:00000000000036B0                                         ; quotearg_buffer_restyled+57A↓j
.text:00000000000036B0                                         ; DATA XREF: ...
.text:00000000000036B0                 xor     r10d, r10d      ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:00000000000036B3                 nop     dword ptr [rax+rax+00h]
.text:00000000000036B8
.text:00000000000036B8 def_33AE:                               ; CODE XREF: quotearg_buffer_restyled+1D7↑j
.text:00000000000036B8                                         ; quotearg_buffer_restyled+1EE↑j
.text:00000000000036B8                                         ; DATA XREF: ...
.text:00000000000036B8                 cmp     [rsp+0E8h+var_90], 1 ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:00000000000036BE                 jnz     loc_3A68
.text:00000000000036C4                 mov     [rsp+0E8h+var_B0], r11
.text:00000000000036C9                 mov     byte ptr [rsp+0E8h+var_B8], r8b
.text:00000000000036CE                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:00000000000036D3                 call    ___ctype_b_loc
.text:00000000000036D8                 mov     rcx, [rax]
.text:00000000000036DB                 movzx   edx, bl
.text:00000000000036DE                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:00000000000036E4                 movzx   r8d, byte ptr [rsp+0E8h+var_B8]
.text:00000000000036EA                 mov     r11, [rsp+0E8h+var_B0]
.text:00000000000036EF                 mov     edi, 1
.text:00000000000036F4                 movzx   eax, word ptr [rcx+rdx*2]
.text:00000000000036F8                 and     ax, 4000h
.text:00000000000036FC                 setnz   r12b
.text:0000000000003700                 setz    al
.text:0000000000003703                 and     al, [rsp+0E8h+var_DB]
.text:0000000000003707
.text:0000000000003707 loc_3707:                               ; CODE XREF: quotearg_buffer_restyled+FED↓j
.text:0000000000003707                 test    al, al
.text:0000000000003709                 jnz     loc_40A1
.text:000000000000370F                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003714                 setz    dl
.text:0000000000003717                 jmp     loc_33E8
.text:0000000000003717 ; ---------------------------------------------------------------------------
.text:000000000000371C                 align 20h
.text:0000000000003720
.text:0000000000003720 loc_3720:                               ; CODE XREF: quotearg_buffer_restyled+131↑j
.text:0000000000003720                 movzx   ebx, byte ptr [r9]
.text:0000000000003724                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000003727                 ja      short def_373A  ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000003729                 lea     rcx, jpt_373A
.text:0000000000003730                 movzx   edx, bl
.text:0000000000003733                 movsxd  rax, ds:(jpt_373A - 15148h)[rcx+rdx*4]
.text:0000000000003737                 add     rax, rcx
.text:000000000000373A                 jmp     rax             ; switch jump
.text:000000000000373A ; ---------------------------------------------------------------------------
.text:000000000000373C                 align 20h
.text:0000000000003740
.text:0000000000003740 loc_3740:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003740                                         ; DATA XREF: .rodata:jpt_373A↓o
.text:0000000000003740                 xor     r10d, r10d      ; jumptable 00000000000126DA case 92
.text:0000000000003743                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000003748                 jnz     loc_353E
.text:000000000000374E                 xchg    ax, ax
.text:0000000000003750
.text:0000000000003750 loc_3750:                               ; CODE XREF: quotearg_buffer_restyled+378↑j
.text:0000000000003750                                         ; quotearg_buffer_restyled+383↑j
.text:0000000000003750                 mov     edx, 5Ch ; '\'
.text:0000000000003755                 mov     ebx, 5Ch ; '\'
.text:000000000000375A                 jmp     loc_34F4
.text:000000000000375A ; ---------------------------------------------------------------------------
.text:000000000000375F                 align 20h
.text:0000000000003760
.text:0000000000003760 loc_3760:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003760                                         ; DATA XREF: .rodata:jpt_373A↓o
.text:0000000000003760                 mov     edx, 0Ch        ; jumptable 00000000000126DA case 12
.text:0000000000003765                 xor     r10d, r10d
.text:0000000000003768                 mov     ebx, 66h ; 'f'
.text:000000000000376D                 jmp     loc_34F4
.text:000000000000376D ; ---------------------------------------------------------------------------
.text:0000000000003772                 align 8
.text:0000000000003778
.text:0000000000003778 loc_3778:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003778                                         ; DATA XREF: .rodata:jpt_373A↓o
.text:0000000000003778                 mov     edx, 0Ah        ; jumptable 00000000000126DA case 10
.text:000000000000377D                 xor     r10d, r10d
.text:0000000000003780                 mov     ebx, 6Eh ; 'n'
.text:0000000000003785                 jmp     loc_34E2
.text:0000000000003785 ; ---------------------------------------------------------------------------
.text:000000000000378A                 align 10h
.text:0000000000003790
.text:0000000000003790 loc_3790:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003790                                         ; DATA XREF: .rodata:jpt_373A↓o
.text:0000000000003790                 mov     ebx, 61h ; 'a'  ; jumptable 00000000000126DA case 7
.text:0000000000003795                 jmp     loc_3560
.text:0000000000003795 ; ---------------------------------------------------------------------------
.text:000000000000379A                 align 20h
.text:00000000000037A0
.text:00000000000037A0 loc_37A0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000037A0                                         ; DATA XREF: .rodata:jpt_373A↓o
.text:00000000000037A0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 0
.text:00000000000037A3
.text:00000000000037A3 loc_37A3:                               ; CODE XREF: quotearg_buffer_restyled+415↑j
.text:00000000000037A3                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000037A8                 setz    dl
.text:00000000000037AB                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000037B0                 jnz     loc_434A
.text:00000000000037B6                 mov     eax, r8d
.text:00000000000037B9                 mov     rcx, r15
.text:00000000000037BC                 xor     eax, 1
.text:00000000000037BF                 and     al, dl
.text:00000000000037C1                 jz      short loc_37F0
.text:00000000000037C3                 cmp     r13, r15
.text:00000000000037C6                 jbe     short loc_37CD
.text:00000000000037C8                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000037CD
.text:00000000000037CD loc_37CD:                               ; CODE XREF: quotearg_buffer_restyled+606↑j
.text:00000000000037CD                 lea     rcx, [r15+1]
.text:00000000000037D1                 cmp     r13, rcx
.text:00000000000037D4                 jbe     short loc_37DC
.text:00000000000037D6                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:00000000000037DC
.text:00000000000037DC loc_37DC:                               ; CODE XREF: quotearg_buffer_restyled+614↑j
.text:00000000000037DC                 lea     rcx, [r15+2]
.text:00000000000037E0                 cmp     r13, rcx
.text:00000000000037E3                 ja      loc_3E19
.text:00000000000037E9
.text:00000000000037E9 loc_37E9:                               ; CODE XREF: quotearg_buffer_restyled+C5F↓j
.text:00000000000037E9                 lea     rcx, [r15+3]
.text:00000000000037ED                 mov     r8d, eax
.text:00000000000037F0
.text:00000000000037F0 loc_37F0:                               ; CODE XREF: quotearg_buffer_restyled+601↑j
.text:00000000000037F0                 cmp     r13, rcx
.text:00000000000037F3                 jbe     short loc_37FA
.text:00000000000037F5                 mov     byte ptr [r14+rcx], 5Ch ; '\'
.text:00000000000037FA
.text:00000000000037FA loc_37FA:                               ; CODE XREF: quotearg_buffer_restyled+633↑j
.text:00000000000037FA                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000037FF                 lea     r15, [rcx+1]
.text:0000000000003803                 jz      loc_3E09
.text:0000000000003809                 lea     rax, [rbp+1]
.text:000000000000380D                 cmp     rax, r11
.text:0000000000003810                 jnb     short loc_382B
.text:0000000000003812                 mov     rax, [rsp+0E8h+s]
.text:0000000000003817                 movzx   eax, byte ptr [rax+rbp+1]
.text:000000000000381C                 mov     byte ptr [rsp+0E8h+ps], al
.text:0000000000003820                 sub     eax, 30h ; '0'
.text:0000000000003823                 cmp     al, 9
.text:0000000000003825                 jbe     loc_4059
.text:000000000000382B
.text:000000000000382B loc_382B:                               ; CODE XREF: quotearg_buffer_restyled+650↑j
.text:000000000000382B                 mov     eax, r12d
.text:000000000000382E                 mov     ebx, 30h ; '0'
.text:0000000000003833                 xor     r12d, r12d
.text:0000000000003836                 jmp     loc_33E8
.text:0000000000003836 ; ---------------------------------------------------------------------------
.text:000000000000383B                 align 20h
.text:0000000000003840
.text:0000000000003840 loc_3840:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003840                                         ; DATA XREF: .rodata:jpt_373A↓o
.text:0000000000003840                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 37,43-58,65-90,93,95,97-122
.text:0000000000003845                 mov     r12d, r10d
.text:0000000000003848                 setz    dl
.text:000000000000384B                 xor     r10d, r10d
.text:000000000000384E                 xor     eax, eax
.text:0000000000003850                 jmp     loc_33E8
.text:0000000000003850 ; ---------------------------------------------------------------------------
.text:0000000000003855                 align 8
.text:0000000000003858
.text:0000000000003858 loc_3858:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003858                                         ; DATA XREF: .rodata:jpt_373A↓o
.text:0000000000003858                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 35,126
.text:000000000000385D                 setz    dl
.text:0000000000003860                 xor     r10d, r10d
.text:0000000000003863                 jmp     loc_3628
.text:0000000000003863 ; ---------------------------------------------------------------------------
.text:0000000000003868                 align 10h
.text:0000000000003870
.text:0000000000003870 loc_3870:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003870                                         ; DATA XREF: .rodata:jpt_373A↓o
.text:0000000000003870                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000003875                 setz    dl
.text:0000000000003878                 xor     r10d, r10d
.text:000000000000387B                 xor     r12d, r12d
.text:000000000000387E                 jmp     loc_3631
.text:000000000000387E ; ---------------------------------------------------------------------------
.text:0000000000003883                 align 8
.text:0000000000003888
.text:0000000000003888 loc_3888:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003888                                         ; DATA XREF: .rodata:jpt_373A↓o
.text:0000000000003888                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA case 32
.text:000000000000388D                 mov     r12d, r10d
.text:0000000000003890                 mov     ebx, 20h ; ' '
.text:0000000000003895                 setz    dl
.text:0000000000003898                 xor     r10d, r10d
.text:000000000000389B                 jmp     loc_3631
.text:00000000000038A0 ; ---------------------------------------------------------------------------
.text:00000000000038A0
.text:00000000000038A0 loc_38A0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000038A0                                         ; DATA XREF: .rodata:jpt_373A↓o
.text:00000000000038A0                 mov     edx, 0Dh        ; jumptable 00000000000126DA case 13
.text:00000000000038A5                 xor     r10d, r10d
.text:00000000000038A8                 mov     ebx, 72h ; 'r'
.text:00000000000038AD                 jmp     loc_34E2
.text:00000000000038AD ; ---------------------------------------------------------------------------
.text:00000000000038B2                 align 8
.text:00000000000038B8
.text:00000000000038B8 loc_38B8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000038B8                                         ; DATA XREF: .rodata:jpt_373A↓o
.text:00000000000038B8                 mov     ebx, 76h ; 'v'  ; jumptable 00000000000126DA case 11
.text:00000000000038BD                 jmp     loc_3560
.text:00000000000038BD ; ---------------------------------------------------------------------------
.text:00000000000038C2                 align 8
.text:00000000000038C8
.text:00000000000038C8 loc_38C8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000038C8                                         ; DATA XREF: .rodata:jpt_373A↓o
.text:00000000000038C8                 mov     edx, 9          ; jumptable 00000000000126DA case 9
.text:00000000000038CD                 xor     r10d, r10d
.text:00000000000038D0                 mov     ebx, 74h ; 't'
.text:00000000000038D5                 jmp     loc_34E2
.text:00000000000038D5 ; ---------------------------------------------------------------------------
.text:00000000000038DA                 align 20h
.text:00000000000038E0
.text:00000000000038E0 loc_38E0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000038E0                                         ; DATA XREF: .rodata:jpt_373A↓o
.text:00000000000038E0                 mov     ebx, 62h ; 'b'  ; jumptable 00000000000126DA case 8
.text:00000000000038E5                 jmp     loc_3560
.text:00000000000038E5 ; ---------------------------------------------------------------------------
.text:00000000000038EA                 align 10h
.text:00000000000038F0
.text:00000000000038F0 loc_38F0:                               ; CODE XREF: quotearg_buffer_restyled+178↑j
.text:00000000000038F0                                         ; quotearg_buffer_restyled+1B1↑j
.text:00000000000038F0                 xor     r10d, r10d
.text:00000000000038F3                 jmp     loc_3390
.text:00000000000038F3 ; ---------------------------------------------------------------------------
.text:00000000000038F8                 align 20h
.text:0000000000003900
.text:0000000000003900 loc_3900:                               ; CODE XREF: quotearg_buffer_restyled+36D↑j
.text:0000000000003900                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003905                 jnz     loc_4270
.text:000000000000390B
.text:000000000000390B loc_390B:                               ; CODE XREF: quotearg_buffer_restyled+38F↑j
.text:000000000000390B                 add     rbp, 1
.text:000000000000390F                 mov     eax, r8d
.text:0000000000003912                 xor     r12d, r12d
.text:0000000000003915                 mov     ebx, 5Ch ; '\'
.text:000000000000391A                 jmp     loc_342C
.text:000000000000391A ; ---------------------------------------------------------------------------
.text:000000000000391F                 align 20h
.text:0000000000003920
.text:0000000000003920 loc_3920:                               ; CODE XREF: quotearg_buffer_restyled+105↑j
.text:0000000000003920                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003925                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000392A                 mov     r12d, r8d
.text:000000000000392D                 mov     rbp, r11
.text:0000000000003930                 setz    dl
.text:0000000000003933                 mov     eax, ebx
.text:0000000000003935                 test    r15, r15
.text:0000000000003938                 setz    cl
.text:000000000000393B                 and     eax, edx
.text:000000000000393D                 and     al, cl
.text:000000000000393F                 jnz     loc_43A6
.text:0000000000003945                 mov     eax, ebx
.text:0000000000003947                 xor     eax, 1
.text:000000000000394A                 and     dl, al
.text:000000000000394C                 jz      loc_42BC
.text:0000000000003952                 cmp     [rsp+0E8h+var_6C], 0
.text:0000000000003957                 jz      loc_42BA
.text:000000000000395D                 cmp     [rsp+0E8h+var_DA], 0
.text:0000000000003962                 jnz     loc_435D
.text:0000000000003968                 test    r13, r13
.text:000000000000396B                 setz    al
.text:000000000000396E                 cmp     [rsp+0E8h+var_98], 0
.text:0000000000003974                 setnz   dl
.text:0000000000003977                 and     al, dl
.text:0000000000003979                 jz      loc_439C
.text:000000000000397F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000003984
.text:0000000000003984 loc_3984:                               ; CODE XREF: quotearg_buffer_restyled+121D↓j
.text:0000000000003984                 lea     rbx, asc_14EC5  ; "'"
.text:000000000000398B                 mov     byte ptr [r14], 27h ; '''
.text:000000000000398F                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003997                 mov     r15d, 1
.text:000000000000399D                 mov     [rsp+0E8h+n], 1
.text:00000000000039A6                 mov     [rsp+0E8h+var_D9], 0
.text:00000000000039AB                 mov     [rsp+0E8h+s2], rbx
.text:00000000000039B0                 mov     [rsp+0E8h+var_6C], al
.text:00000000000039B4                 jmp     loc_3293
.text:00000000000039B4 ; ---------------------------------------------------------------------------
.text:00000000000039B9                 align 20h
.text:00000000000039C0
.text:00000000000039C0 loc_39C0:                               ; CODE XREF: quotearg_buffer_restyled+2F8↑j
.text:00000000000039C0                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000039C5                 jnz     loc_4270
.text:00000000000039CB                 test    r13, r13
.text:00000000000039CE                 jz      loc_3DD0
.text:00000000000039D4                 xor     edx, edx
.text:00000000000039D6                 cmp     [rsp+0E8h+var_98], 0
.text:00000000000039DC                 jnz     loc_3DD0
.text:00000000000039E2
.text:00000000000039E2 loc_39E2:                               ; CODE XREF: quotearg_buffer_restyled+C44↓j
.text:00000000000039E2                                         ; quotearg_buffer_restyled+122A↓j
.text:00000000000039E2                 mov     [rsp+0E8h+var_98], r13
.text:00000000000039E7                 add     r15, 3
.text:00000000000039EB                 xor     eax, eax
.text:00000000000039ED                 mov     [rsp+0E8h+var_6C], r12b
.text:00000000000039F2                 xor     r8d, r8d
.text:00000000000039F5                 mov     r13, rdx
.text:00000000000039F8                 mov     ebx, 27h ; '''
.text:00000000000039FD                 jmp     loc_3419
.text:00000000000039FD ; ---------------------------------------------------------------------------
.text:0000000000003A02                 align 8
.text:0000000000003A08
.text:0000000000003A08 loc_3A08:                               ; CODE XREF: quotearg_buffer_restyled+2D3↑j
.text:0000000000003A08                 test    byte ptr [rsp+0E8h+var_70], 4
.text:0000000000003A0D                 jz      short loc_3A30
.text:0000000000003A0F                 lea     rcx, [rbp+2]
.text:0000000000003A13                 cmp     rcx, r11
.text:0000000000003A16                 jnb     short loc_3A30
.text:0000000000003A18                 mov     rax, [rsp+0E8h+s]
.text:0000000000003A1D                 cmp     byte ptr [rax+rbp+1], 3Fh ; '?'
.text:0000000000003A22                 jz      loc_41B2
.text:0000000000003A28                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000003A30
.text:0000000000003A30 loc_3A30:                               ; CODE XREF: quotearg_buffer_restyled+84D↑j
.text:0000000000003A30                                         ; quotearg_buffer_restyled+856↑j ...
.text:0000000000003A30                 xor     edx, edx
.text:0000000000003A32                 xor     r12d, r12d
.text:0000000000003A35                 xor     eax, eax
.text:0000000000003A37                 mov     ebx, 3Fh ; '?'
.text:0000000000003A3C                 jmp     loc_33E8
.text:0000000000003A3C ; ---------------------------------------------------------------------------
.text:0000000000003A41                 align 8
.text:0000000000003A48
.text:0000000000003A48 loc_3A48:                               ; CODE XREF: quotearg_buffer_restyled+2CA↑j
.text:0000000000003A48                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003A4D                 jnz     loc_4270
.text:0000000000003A53                 xor     r12d, r12d
.text:0000000000003A56                 xor     eax, eax
.text:0000000000003A58                 mov     ebx, 3Fh ; '?'
.text:0000000000003A5D                 jmp     loc_3419
.text:0000000000003A5D ; ---------------------------------------------------------------------------
.text:0000000000003A62                 align 8
.text:0000000000003A68
.text:0000000000003A68 loc_3A68:                               ; CODE XREF: quotearg_buffer_restyled+4FE↑j
.text:0000000000003A68                 lea     rax, [rsp+0E8h+var_48]
.text:0000000000003A70                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000003A74                 mov     [rsp+0E8h+var_48], 0
.text:0000000000003A80                 mov     [rsp+0E8h+ps], rax
.text:0000000000003A85                 jnz     short loc_3AB4
.text:0000000000003A87                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000003A8C                 mov     byte ptr [rsp+0E8h+var_A8], r8b
.text:0000000000003A91                 mov     byte ptr [rsp+0E8h+var_B0], r10b
.text:0000000000003A96                 mov     [rsp+0E8h+var_B8], r9
.text:0000000000003A9B                 call    _strlen
.text:0000000000003AA0                 movzx   r8d, byte ptr [rsp+0E8h+var_A8]
.text:0000000000003AA6                 movzx   r10d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000003AAC                 mov     r11, rax
.text:0000000000003AAF                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000003AB4
.text:0000000000003AB4 loc_3AB4:                               ; CODE XREF: quotearg_buffer_restyled+8C5↑j
.text:0000000000003AB4                 lea     rax, [rsp+0E8h+wc]
.text:0000000000003ABC                 xor     ecx, ecx
.text:0000000000003ABE                 mov     [rsp+0E8h+var_6A], bl
.text:0000000000003AC2                 mov     [rsp+0E8h+var_6B], r8b
.text:0000000000003AC7                 mov     rbx, rcx
.text:0000000000003ACA                 mov     [rsp+0E8h+var_60], r9
.text:0000000000003AD2                 mov     [rsp+0E8h+var_B0], rax
.text:0000000000003AD7                 mov     [rsp+0E8h+var_69], r10b
.text:0000000000003ADC                 mov     [rsp+0E8h+var_68], r15
.text:0000000000003AE4                 mov     [rsp+0E8h+var_A8], r14
.text:0000000000003AE9                 mov     [rsp+0E8h+var_78], r13
.text:0000000000003AEE                 mov     [rsp+0E8h+var_B8], r11
.text:0000000000003AF3
.text:0000000000003AF3 loc_3AF3:                               ; CODE XREF: quotearg_buffer_restyled+9AF↓j
.text:0000000000003AF3                 mov     rax, [rsp+0E8h+s]
.text:0000000000003AF8                 lea     r14, [rbp+rbx+0]
.text:0000000000003AFD                 mov     rdx, [rsp+0E8h+var_B8]
.text:0000000000003B02                 mov     rcx, [rsp+0E8h+ps]
.text:0000000000003B07                 mov     rdi, [rsp+0E8h+var_B0]
.text:0000000000003B0C                 lea     r13, [rax+r14]
.text:0000000000003B10                 sub     rdx, r14
.text:0000000000003B13                 mov     rsi, r13
.text:0000000000003B16                 call    rpl_mbrtowc
.text:0000000000003B1B                 test    rax, rax
.text:0000000000003B1E                 mov     r15, rax
.text:0000000000003B21                 jz      short loc_3B71
.text:0000000000003B23                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000003B27                 jz      loc_4145
.text:0000000000003B2D                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000003B31                 jz      loc_40D1
.text:0000000000003B37                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003B3C                 setz    al
.text:0000000000003B3F                 and     al, [rsp+0E8h+var_D9]
.text:0000000000003B43                 jnz     loc_3CE0
.text:0000000000003B49
.text:0000000000003B49 loc_3B49:                               ; CODE XREF: quotearg_buffer_restyled+B24↓j
.text:0000000000003B49                                         ; quotearg_buffer_restyled+B47↓j
.text:0000000000003B49                 mov     edi, [rsp+0E8h+wc] ; wc
.text:0000000000003B50                 call    _iswprint
.text:0000000000003B55                 mov     rdi, [rsp+0E8h+ps] ; ps
.text:0000000000003B5A                 test    eax, eax
.text:0000000000003B5C                 mov     eax, 0
.text:0000000000003B61                 cmovz   r12d, eax
.text:0000000000003B65                 add     rbx, r15
.text:0000000000003B68                 call    _mbsinit
.text:0000000000003B6D                 test    eax, eax
.text:0000000000003B6F                 jz      short loc_3AF3
.text:0000000000003B71
.text:0000000000003B71 loc_3B71:                               ; CODE XREF: quotearg_buffer_restyled+961↑j
.text:0000000000003B71                 mov     edx, r12d
.text:0000000000003B74                 mov     rdi, rbx
.text:0000000000003B77                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000003B7D                 xor     edx, 1
.text:0000000000003B80                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000003B85                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000003B8B                 and     dl, [rsp+0E8h+var_DB]
.text:0000000000003B8F                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000003B97                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000003B9C                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000003BA1                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000003BA6
.text:0000000000003BA6 loc_3BA6:                               ; CODE XREF: quotearg_buffer_restyled+F80↓j
.text:0000000000003BA6                                         ; quotearg_buffer_restyled+FB8↓j
.text:0000000000003BA6                 cmp     rdi, 1
.text:0000000000003BAA                 jbe     loc_41AB
.text:0000000000003BB0
.text:0000000000003BB0 loc_3BB0:                               ; CODE XREF: quotearg_buffer_restyled+EE9↓j
.text:0000000000003BB0                 mov     rcx, rdi
.text:0000000000003BB3                 xor     esi, esi
.text:0000000000003BB5                 movzx   r9d, [rsp+0E8h+var_D9]
.text:0000000000003BBB                 add     rcx, rbp
.text:0000000000003BBE                 mov     rdi, [rsp+0E8h+s]
.text:0000000000003BC3                 jmp     loc_3C7E
.text:0000000000003BC3 ; ---------------------------------------------------------------------------
.text:0000000000003BC8                 align 10h
.text:0000000000003BD0
.text:0000000000003BD0 loc_3BD0:                               ; CODE XREF: quotearg_buffer_restyled+AC0↓j
.text:0000000000003BD0                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003BD5                 setz    al
.text:0000000000003BD8                 test    r9b, r9b
.text:0000000000003BDB                 jnz     loc_4090
.text:0000000000003BE1                 mov     esi, r8d
.text:0000000000003BE4                 xor     esi, 1
.text:0000000000003BE7                 and     al, sil
.text:0000000000003BEA                 jz      short loc_3C1B
.text:0000000000003BEC                 cmp     r13, r15
.text:0000000000003BEF                 jbe     short loc_3BF6
.text:0000000000003BF1                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000003BF6
.text:0000000000003BF6 loc_3BF6:                               ; CODE XREF: quotearg_buffer_restyled+A2F↑j
.text:0000000000003BF6                 lea     rsi, [r15+1]
.text:0000000000003BFA                 cmp     r13, rsi
.text:0000000000003BFD                 jbe     short loc_3C05
.text:0000000000003BFF                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000003C05
.text:0000000000003C05 loc_3C05:                               ; CODE XREF: quotearg_buffer_restyled+A3D↑j
.text:0000000000003C05                 lea     rsi, [r15+2]
.text:0000000000003C09                 cmp     r13, rsi
.text:0000000000003C0C                 jbe     short loc_3C14
.text:0000000000003C0E                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000003C14
.text:0000000000003C14 loc_3C14:                               ; CODE XREF: quotearg_buffer_restyled+A4C↑j
.text:0000000000003C14                 add     r15, 3
.text:0000000000003C18                 mov     r8d, eax
.text:0000000000003C1B
.text:0000000000003C1B loc_3C1B:                               ; CODE XREF: quotearg_buffer_restyled+A2A↑j
.text:0000000000003C1B                 cmp     r13, r15
.text:0000000000003C1E                 jbe     short loc_3C25
.text:0000000000003C20                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000003C25
.text:0000000000003C25 loc_3C25:                               ; CODE XREF: quotearg_buffer_restyled+A5E↑j
.text:0000000000003C25                 lea     rax, [r15+1]
.text:0000000000003C29                 cmp     r13, rax
.text:0000000000003C2C                 jbe     short loc_3C3B
.text:0000000000003C2E                 mov     eax, ebx
.text:0000000000003C30                 shr     al, 6
.text:0000000000003C33                 add     eax, 30h ; '0'
.text:0000000000003C36                 mov     [r14+r15+1], al
.text:0000000000003C3B
.text:0000000000003C3B loc_3C3B:                               ; CODE XREF: quotearg_buffer_restyled+A6C↑j
.text:0000000000003C3B                 lea     rax, [r15+2]
.text:0000000000003C3F                 cmp     r13, rax
.text:0000000000003C42                 jbe     short loc_3C54
.text:0000000000003C44                 mov     eax, ebx
.text:0000000000003C46                 shr     al, 3
.text:0000000000003C49                 and     eax, 7
.text:0000000000003C4C                 add     eax, 30h ; '0'
.text:0000000000003C4F                 mov     [r14+r15+2], al
.text:0000000000003C54
.text:0000000000003C54 loc_3C54:                               ; CODE XREF: quotearg_buffer_restyled+A82↑j
.text:0000000000003C54                 and     ebx, 7
.text:0000000000003C57                 add     rbp, 1
.text:0000000000003C5B                 add     r15, 3
.text:0000000000003C5F                 add     ebx, 30h ; '0'
.text:0000000000003C62                 cmp     rbp, rcx
.text:0000000000003C65                 jnb     loc_3450
.text:0000000000003C6B                 mov     esi, edx
.text:0000000000003C6D
.text:0000000000003C6D loc_3C6D:                               ; CODE XREF: quotearg_buffer_restyled+B19↓j
.text:0000000000003C6D                                         ; quotearg_buffer_restyled+EF1↓j
.text:0000000000003C6D                 cmp     r13, r15
.text:0000000000003C70                 jbe     short loc_3C76
.text:0000000000003C72                 mov     [r14+r15], bl
.text:0000000000003C76
.text:0000000000003C76 loc_3C76:                               ; CODE XREF: quotearg_buffer_restyled+AB0↑j
.text:0000000000003C76                 movzx   ebx, byte ptr [rdi+rbp]
.text:0000000000003C7A                 add     r15, 1
.text:0000000000003C7E
.text:0000000000003C7E loc_3C7E:                               ; CODE XREF: quotearg_buffer_restyled+A03↑j
.text:0000000000003C7E                 test    dl, dl
.text:0000000000003C80                 jnz     loc_3BD0
.text:0000000000003C86                 mov     eax, esi
.text:0000000000003C88                 xor     eax, 1
.text:0000000000003C8B                 and     eax, r8d
.text:0000000000003C8E                 test    r10b, r10b
.text:0000000000003C91                 jz      short loc_3CA1
.text:0000000000003C93                 cmp     r13, r15
.text:0000000000003C96                 jbe     short loc_3C9D
.text:0000000000003C98                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000003C9D
.text:0000000000003C9D loc_3C9D:                               ; CODE XREF: quotearg_buffer_restyled+AD6↑j
.text:0000000000003C9D                 add     r15, 1
.text:0000000000003CA1
.text:0000000000003CA1 loc_3CA1:                               ; CODE XREF: quotearg_buffer_restyled+AD1↑j
.text:0000000000003CA1                 add     rbp, 1
.text:0000000000003CA5                 cmp     rbp, rcx
.text:0000000000003CA8                 jnb     loc_342C
.text:0000000000003CAE                 test    al, al
.text:0000000000003CB0                 jz      loc_40AE
.text:0000000000003CB6                 cmp     r13, r15
.text:0000000000003CB9                 jbe     short loc_3CC0
.text:0000000000003CBB                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000003CC0
.text:0000000000003CC0 loc_3CC0:                               ; CODE XREF: quotearg_buffer_restyled+AF9↑j
.text:0000000000003CC0                 lea     rax, [r15+1]
.text:0000000000003CC4                 cmp     r13, rax
.text:0000000000003CC7                 jbe     short loc_3CCF
.text:0000000000003CC9                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000003CCF
.text:0000000000003CCF loc_3CCF:                               ; CODE XREF: quotearg_buffer_restyled+B07↑j
.text:0000000000003CCF                 add     r15, 2
.text:0000000000003CD3                 xor     r10d, r10d
.text:0000000000003CD6                 xor     r8d, r8d
.text:0000000000003CD9                 jmp     short loc_3C6D
.text:0000000000003CD9 ; ---------------------------------------------------------------------------
.text:0000000000003CDB                 align 20h
.text:0000000000003CE0
.text:0000000000003CE0 loc_3CE0:                               ; CODE XREF: quotearg_buffer_restyled+983↑j
.text:0000000000003CE0                 cmp     r15, 1
.text:0000000000003CE4                 jz      loc_3B49
.text:0000000000003CEA                 mov     rdi, [rsp+0E8h+s]
.text:0000000000003CEF                 lea     rcx, [rdi+r15]
.text:0000000000003CF3                 lea     rdx, [rdi+r14+1]
.text:0000000000003CF8                 lea     r8, [rcx+r14]
.text:0000000000003CFC                 jmp     short loc_3D0D
.text:0000000000003CFC ; ---------------------------------------------------------------------------
.text:0000000000003CFE                 align 20h
.text:0000000000003D00
.text:0000000000003D00 loc_3D00:                               ; CODE XREF: quotearg_buffer_restyled+B56↓j
.text:0000000000003D00                                         ; quotearg_buffer_restyled+B70↓j
.text:0000000000003D00                 add     rdx, 1
.text:0000000000003D04                 cmp     r8, rdx
.text:0000000000003D07                 jz      loc_3B49
.text:0000000000003D0D
.text:0000000000003D0D loc_3D0D:                               ; CODE XREF: quotearg_buffer_restyled+B3C↑j
.text:0000000000003D0D                 movzx   ecx, byte ptr [rdx]
.text:0000000000003D10                 sub     ecx, 5Bh ; '['
.text:0000000000003D13                 cmp     cl, 21h ; '!'
.text:0000000000003D16                 ja      short loc_3D00
.text:0000000000003D18                 mov     esi, 1
.text:0000000000003D1D                 shl     rsi, cl
.text:0000000000003D20                 mov     rcx, rsi
.text:0000000000003D23                 mov     rsi, 20000002Bh
.text:0000000000003D2D                 test    rcx, rsi
.text:0000000000003D30                 jz      short loc_3D00
.text:0000000000003D32                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000003D37                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000003D3C                 mov     rbp, [rsp+0E8h+var_B8]
.text:0000000000003D41                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003D49
.text:0000000000003D49 loc_3D49:                               ; CODE XREF: quotearg_buffer_restyled+489↑j
.text:0000000000003D49                                         ; quotearg_buffer_restyled+C0B↓j ...
.text:0000000000003D49                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000003D4E                 jz      short loc_3D60
.text:0000000000003D50                 test    al, al
.text:0000000000003D52                 mov     eax, 4
.text:0000000000003D57                 cmovz   eax, [rsp+0E8h+var_E0]
.text:0000000000003D5C                 mov     [rsp+0E8h+var_E0], eax
.text:0000000000003D60
.text:0000000000003D60 loc_3D60:                               ; CODE XREF: quotearg_buffer_restyled+B8E↑j
.text:0000000000003D60                                         ; quotearg_buffer_restyled+1205↓j
.text:0000000000003D60                 sub     rsp, 8
.text:0000000000003D64                 mov     rcx, rbp
.text:0000000000003D67                 mov     rsi, r13
.text:0000000000003D6A                 push    [rsp+0F0h+var_88]
.text:0000000000003D6E                 push    [rsp+0F8h+var_80]
.text:0000000000003D72                 mov     rdi, r14
.text:0000000000003D75                 push    0
.text:0000000000003D77                 mov     r9d, [rsp+108h+var_70]
.text:0000000000003D7F                 mov     r8d, [rsp+108h+var_E0]
.text:0000000000003D84                 mov     rdx, [rsp+108h+s]
.text:0000000000003D89                 and     r9d, 0FFFFFFFDh
.text:0000000000003D8D                 call    quotearg_buffer_restyled
.text:0000000000003D92                 add     rsp, 20h
.text:0000000000003D96                 mov     r15, rax
.text:0000000000003D99
.text:0000000000003D99 loc_3D99:                               ; CODE XREF: quotearg_buffer_restyled+1135↓j
.text:0000000000003D99                                         ; quotearg_buffer_restyled+1140↓j ...
.text:0000000000003D99                 mov     rbx, [rsp+0E8h+var_40]
.text:0000000000003DA1                 xor     rbx, fs:28h
.text:0000000000003DAA                 mov     rax, r15
.text:0000000000003DAD                 jnz     loc_43B3
.text:0000000000003DB3                 add     rsp, 0B8h
.text:0000000000003DBA                 pop     rbx
.text:0000000000003DBB                 pop     rbp
.text:0000000000003DBC                 pop     r12
.text:0000000000003DBE                 pop     r13
.text:0000000000003DC0                 pop     r14
.text:0000000000003DC2                 pop     r15
.text:0000000000003DC4                 retn
.text:0000000000003DC4 ; ---------------------------------------------------------------------------
.text:0000000000003DC5                 align 8
.text:0000000000003DC8
.text:0000000000003DC8 loc_3DC8:                               ; CODE XREF: quotearg_buffer_restyled+3B2↑j
.text:0000000000003DC8                 mov     rbp, r11
.text:0000000000003DCB                 jmp     loc_3D49
.text:0000000000003DD0 ; ---------------------------------------------------------------------------
.text:0000000000003DD0
.text:0000000000003DD0 loc_3DD0:                               ; CODE XREF: quotearg_buffer_restyled+80E↑j
.text:0000000000003DD0                                         ; quotearg_buffer_restyled+81C↑j
.text:0000000000003DD0                 cmp     r13, r15
.text:0000000000003DD3                 jbe     short loc_3DDA
.text:0000000000003DD5                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000003DDA
.text:0000000000003DDA loc_3DDA:                               ; CODE XREF: quotearg_buffer_restyled+C13↑j
.text:0000000000003DDA                 lea     rax, [r15+1]
.text:0000000000003DDE                 cmp     r13, rax
.text:0000000000003DE1                 jbe     short loc_3DE9
.text:0000000000003DE3                 mov     byte ptr [r14+r15+1], 5Ch ; '\'
.text:0000000000003DE9
.text:0000000000003DE9 loc_3DE9:                               ; CODE XREF: quotearg_buffer_restyled+C21↑j
.text:0000000000003DE9                 lea     rax, [r15+2]
.text:0000000000003DED                 cmp     r13, rax
.text:0000000000003DF0                 jbe     loc_43E2
.text:0000000000003DF6                 mov     rdx, r13
.text:0000000000003DF9                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000003DFF                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000003E04                 jmp     loc_39E2
.text:0000000000003E09 ; ---------------------------------------------------------------------------
.text:0000000000003E09
.text:0000000000003E09 loc_3E09:                               ; CODE XREF: quotearg_buffer_restyled+643↑j
.text:0000000000003E09                 mov     eax, r12d
.text:0000000000003E0C                 mov     ebx, 30h ; '0'
.text:0000000000003E11                 xor     r12d, r12d
.text:0000000000003E14                 jmp     loc_3419
.text:0000000000003E19 ; ---------------------------------------------------------------------------
.text:0000000000003E19
.text:0000000000003E19 loc_3E19:                               ; CODE XREF: quotearg_buffer_restyled+623↑j
.text:0000000000003E19                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000003E1F                 jmp     loc_37E9
.text:0000000000003E24 ; ---------------------------------------------------------------------------
.text:0000000000003E24
.text:0000000000003E24 loc_3E24:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003E24                                         ; DATA XREF: .rodata:jpt_3251↓o
.text:0000000000003E24                 test    ebx, ebx        ; jumptable 00000000000121F1 case 4
.text:0000000000003E26                 jnz     loc_3253        ; jumptable 00000000000121F1 case 1
.text:0000000000003E2C                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003E31
.text:0000000000003E31 loc_3E31:                               ; CODE XREF: quotearg_buffer_restyled+11FD↓j
.text:0000000000003E31                 test    r13, r13
.text:0000000000003E34                 jnz     loc_43CA
.text:0000000000003E3A                 lea     rax, asc_14EC5  ; "'"
.text:0000000000003E41                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003E4A                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003E4F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003E54                 xor     r12d, r12d
.text:0000000000003E57                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000003E5C                 mov     [rsp+0E8h+n], 1
.text:0000000000003E65                 mov     [rsp+0E8h+s2], rax
.text:0000000000003E6A                 mov     r15d, 1
.text:0000000000003E70                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003E78                 jmp     loc_3293
.text:0000000000003E78 ; ---------------------------------------------------------------------------
.text:0000000000003E7D                 align 20h
.text:0000000000003E80
.text:0000000000003E80 loc_3E80:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003E80                                         ; DATA XREF: .rodata:jpt_3251↓o
.text:0000000000003E80                 test    ebx, ebx        ; jumptable 00000000000121F1 case 5
.text:0000000000003E82                 jnz     loc_427D
.text:0000000000003E88                 test    r13, r13
.text:0000000000003E8B                 jz      loc_40B6
.text:0000000000003E91                 mov     byte ptr [r14], 22h ; '"'
.text:0000000000003E95                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003E9A                 xor     r12d, r12d
.text:0000000000003E9D                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003EA2                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003EAB
.text:0000000000003EAB loc_3EAB:                               ; CODE XREF: quotearg_buffer_restyled+F0C↓j
.text:0000000000003EAB                 lea     rax, unk_14EC3
.text:0000000000003EB2                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000003EB7                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003EBC                 mov     [rsp+0E8h+n], 1
.text:0000000000003EC5                 mov     r15d, 1
.text:0000000000003ECB                 mov     [rsp+0E8h+s2], rax
.text:0000000000003ED0                 jmp     loc_3293
.text:0000000000003ED5 ; ---------------------------------------------------------------------------
.text:0000000000003ED5
.text:0000000000003ED5 loc_3ED5:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003ED5                                         ; DATA XREF: .rodata:jpt_3251↓o
.text:0000000000003ED5                 lea     rax, unk_14EC3  ; jumptable 00000000000121F1 case 6
.text:0000000000003EDC                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003EE1                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003EE6                 xor     r12d, r12d
.text:0000000000003EE9                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003EF2                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000003EF7                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003EFC                 mov     [rsp+0E8h+n], 1
.text:0000000000003F05                 xor     r15d, r15d
.text:0000000000003F08                 mov     [rsp+0E8h+s2], rax
.text:0000000000003F0D                 mov     [rsp+0E8h+var_E0], 5
.text:0000000000003F15                 jmp     loc_3293
.text:0000000000003F1A ; ---------------------------------------------------------------------------
.text:0000000000003F1A
.text:0000000000003F1A loc_3F1A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003F1A                                         ; DATA XREF: .rodata:jpt_3251↓o
.text:0000000000003F1A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 7
.text:0000000000003F1F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003F24                 xor     r12d, r12d
.text:0000000000003F27                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003F30                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000003F35                 xor     r15d, r15d
.text:0000000000003F38                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003F3D                 mov     [rsp+0E8h+n], 0
.text:0000000000003F46                 mov     [rsp+0E8h+s2], 0
.text:0000000000003F4F                 jmp     loc_3293
.text:0000000000003F54 ; ---------------------------------------------------------------------------
.text:0000000000003F54
.text:0000000000003F54 loc_3F54:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003F54                                         ; DATA XREF: .rodata:jpt_3251↓o
.text:0000000000003F54                 cmp     [rsp+0E8h+var_E0], 0Ah ; jumptable 00000000000121F1 cases 8-10
.text:0000000000003F59                 jz      short loc_3FB1
.text:0000000000003F5B                 lea     rsi, asc_14EC7  ; "`"
.text:0000000000003F62                 xor     edi, edi        ; domainname
.text:0000000000003F64                 mov     edx, 5          ; category
.text:0000000000003F69                 call    _dcgettext
.text:0000000000003F6E                 mov     rcx, rax
.text:0000000000003F71                 mov     [rsp+0E8h+var_80], rax
.text:0000000000003F76                 lea     rax, asc_14EC7  ; "`"
.text:0000000000003F7D                 cmp     rcx, rax
.text:0000000000003F80                 jz      loc_431E
.text:0000000000003F86
.text:0000000000003F86 loc_3F86:                               ; CODE XREF: quotearg_buffer_restyled+116F↓j
.text:0000000000003F86                 lea     rsi, asc_14EC5  ; "'"
.text:0000000000003F8D                 xor     edi, edi        ; domainname
.text:0000000000003F8F                 mov     edx, 5          ; category
.text:0000000000003F94                 call    _dcgettext
.text:0000000000003F99                 mov     rcx, rax
.text:0000000000003F9C                 mov     [rsp+0E8h+var_88], rax
.text:0000000000003FA1                 lea     rax, asc_14EC5  ; "'"
.text:0000000000003FA8                 cmp     rcx, rax
.text:0000000000003FAB                 jz      loc_4334
.text:0000000000003FB1
.text:0000000000003FB1 loc_3FB1:                               ; CODE XREF: quotearg_buffer_restyled+D99↑j
.text:0000000000003FB1                                         ; quotearg_buffer_restyled+1185↓j
.text:0000000000003FB1                 xor     r15d, r15d
.text:0000000000003FB4                 test    ebx, ebx
.text:0000000000003FB6                 jz      loc_417D
.text:0000000000003FBC
.text:0000000000003FBC loc_3FBC:                               ; CODE XREF: quotearg_buffer_restyled+FC7↓j
.text:0000000000003FBC                                         ; quotearg_buffer_restyled+FE6↓j
.text:0000000000003FBC                 test    ebx, ebx
.text:0000000000003FBE                 mov     rbx, [rsp+0E8h+var_88]
.text:0000000000003FC3                 setnz   [rsp+0E8h+var_D9]
.text:0000000000003FC8                 xor     r12d, r12d
.text:0000000000003FCB                 mov     rdi, rbx        ; s
.text:0000000000003FCE                 call    _strlen
.text:0000000000003FD3                 mov     [rsp+0E8h+s2], rbx
.text:0000000000003FD8                 mov     [rsp+0E8h+n], rax
.text:0000000000003FDD                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003FE2                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003FE7                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003FF0                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003FF5                 jmp     loc_3293
.text:0000000000003FFA ; ---------------------------------------------------------------------------
.text:0000000000003FFA
.text:0000000000003FFA loc_3FFA:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003FFA                                         ; DATA XREF: .rodata:jpt_3251↓o
.text:0000000000003FFA                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 0
.text:0000000000003FFF                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004004                 xor     r12d, r12d
.text:0000000000004007                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004010                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000004015                 xor     r15d, r15d
.text:0000000000004018                 mov     [rsp+0E8h+var_DB], 0
.text:000000000000401D                 mov     [rsp+0E8h+n], 0
.text:0000000000004026                 mov     [rsp+0E8h+s2], 0
.text:000000000000402F                 jmp     loc_3293
.text:0000000000004034 ; ---------------------------------------------------------------------------
.text:0000000000004034
.text:0000000000004034 loc_4034:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004034                                         ; DATA XREF: .rodata:jpt_3251↓o
.text:0000000000004034                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 3
.text:0000000000004039                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000403E                 xor     r12d, r12d
.text:0000000000004041                 mov     [rsp+0E8h+var_98], 0
.text:000000000000404A                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000404F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000004054                 jmp     loc_3273
.text:0000000000004059 ; ---------------------------------------------------------------------------
.text:0000000000004059
.text:0000000000004059 loc_4059:                               ; CODE XREF: quotearg_buffer_restyled+665↑j
.text:0000000000004059                 cmp     r13, r15
.text:000000000000405C                 jbe     short loc_4063
.text:000000000000405E                 mov     byte ptr [r14+r15], 30h ; '0'
.text:0000000000004063
.text:0000000000004063 loc_4063:                               ; CODE XREF: quotearg_buffer_restyled+E9C↑j
.text:0000000000004063                 lea     rax, [rcx+2]
.text:0000000000004067                 cmp     r13, rax
.text:000000000000406A                 jbe     short loc_4072
.text:000000000000406C                 mov     byte ptr [r14+rcx+2], 30h ; '0'
.text:0000000000004072
.text:0000000000004072 loc_4072:                               ; CODE XREF: quotearg_buffer_restyled+EAA↑j
.text:0000000000004072                 mov     eax, r12d
.text:0000000000004075                 lea     r15, [rcx+3]
.text:0000000000004079                 xor     r12d, r12d
.text:000000000000407C                 mov     ebx, 30h ; '0'
.text:0000000000004081                 jmp     loc_33E8
.text:0000000000004081 ; ---------------------------------------------------------------------------
.text:0000000000004086                 align 10h
.text:0000000000004090
.text:0000000000004090 loc_4090:                               ; CODE XREF: quotearg_buffer_restyled+A1B↑j
.text:0000000000004090                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000004095                 mov     rbp, r11
.text:0000000000004098                 mov     [rsp+0E8h+var_DB], bl
.text:000000000000409C                 jmp     loc_3D49
.text:00000000000040A1 ; ---------------------------------------------------------------------------
.text:00000000000040A1
.text:00000000000040A1 loc_40A1:                               ; CODE XREF: quotearg_buffer_restyled+549↑j
.text:00000000000040A1                 movzx   edx, [rsp+0E8h+var_DB]
.text:00000000000040A6                 xor     r12d, r12d
.text:00000000000040A9                 jmp     loc_3BB0
.text:00000000000040AE ; ---------------------------------------------------------------------------
.text:00000000000040AE
.text:00000000000040AE loc_40AE:                               ; CODE XREF: quotearg_buffer_restyled+AF0↑j
.text:00000000000040AE                 xor     r10d, r10d
.text:00000000000040B1                 jmp     loc_3C6D
.text:00000000000040B6 ; ---------------------------------------------------------------------------
.text:00000000000040B6
.text:00000000000040B6 loc_40B6:                               ; CODE XREF: quotearg_buffer_restyled+CCB↑j
.text:00000000000040B6                 mov     [rsp+0E8h+var_98], 0
.text:00000000000040BF                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000040C4                 xor     r12d, r12d
.text:00000000000040C7                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000040CC                 jmp     loc_3EAB
.text:00000000000040D1 ; ---------------------------------------------------------------------------
.text:00000000000040D1
.text:00000000000040D1 loc_40D1:                               ; CODE XREF: quotearg_buffer_restyled+971↑j
.text:00000000000040D1                 mov     r11, [rsp+0E8h+var_B8]
.text:00000000000040D6                 mov     rsi, r14
.text:00000000000040D9                 mov     rcx, r13
.text:00000000000040DC                 mov     rax, rbx
.text:00000000000040DF                 mov     rdi, rbx
.text:00000000000040E2                 movzx   r8d, [rsp+0E8h+var_6B]
.text:00000000000040E8                 movzx   ebx, [rsp+0E8h+var_6A]
.text:00000000000040ED                 mov     r9, [rsp+0E8h+var_60]
.text:00000000000040F5                 cmp     rsi, r11
.text:00000000000040F8                 movzx   r10d, [rsp+0E8h+var_69]
.text:00000000000040FE                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000004106                 mov     r14, [rsp+0E8h+var_A8]
.text:000000000000410B                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000004110                 jnb     short loc_4138
.text:0000000000004112                 cmp     byte ptr [rcx], 0
.text:0000000000004115                 jnz     short loc_4127
.text:0000000000004117                 jmp     short loc_4138
.text:0000000000004117 ; ---------------------------------------------------------------------------
.text:0000000000004119                 align 20h
.text:0000000000004120
.text:0000000000004120 loc_4120:                               ; CODE XREF: quotearg_buffer_restyled+F73↓j
.text:0000000000004120                 cmp     byte ptr [r9+rax], 0
.text:0000000000004125                 jz      short loc_4135
.text:0000000000004127
.text:0000000000004127 loc_4127:                               ; CODE XREF: quotearg_buffer_restyled+F55↑j
.text:0000000000004127                 add     rax, 1
.text:000000000000412B                 lea     rdx, [rbp+rax+0]
.text:0000000000004130                 cmp     r11, rdx
.text:0000000000004133                 ja      short loc_4120
.text:0000000000004135
.text:0000000000004135 loc_4135:                               ; CODE XREF: quotearg_buffer_restyled+F65↑j
.text:0000000000004135                 mov     rdi, rax
.text:0000000000004138
.text:0000000000004138 loc_4138:                               ; CODE XREF: quotearg_buffer_restyled+F50↑j
.text:0000000000004138                                         ; quotearg_buffer_restyled+F57↑j
.text:0000000000004138                 movzx   edx, [rsp+0E8h+var_DB]
.text:000000000000413D                 xor     r12d, r12d
.text:0000000000004140                 jmp     loc_3BA6
.text:0000000000004145 ; ---------------------------------------------------------------------------
.text:0000000000004145
.text:0000000000004145 loc_4145:                               ; CODE XREF: quotearg_buffer_restyled+967↑j
.text:0000000000004145                 mov     rdi, rbx
.text:0000000000004148                 movzx   r8d, [rsp+0E8h+var_6B]
.text:000000000000414E                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000004153                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000004159                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000004161                 xor     r12d, r12d
.text:0000000000004164                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000004169                 mov     r13, [rsp+0E8h+var_78]
.text:000000000000416E                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000004173                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000004178                 jmp     loc_3BA6
.text:000000000000417D ; ---------------------------------------------------------------------------
.text:000000000000417D
.text:000000000000417D loc_417D:                               ; CODE XREF: quotearg_buffer_restyled+DF6↑j
.text:000000000000417D                 mov     rdx, [rsp+0E8h+var_80]
.text:0000000000004182                 movzx   eax, byte ptr [rdx]
.text:0000000000004185                 test    al, al
.text:0000000000004187                 jz      loc_3FBC
.text:000000000000418D                 nop     dword ptr [rax]
.text:0000000000004190
.text:0000000000004190 loc_4190:                               ; CODE XREF: quotearg_buffer_restyled+FE4↓j
.text:0000000000004190                 cmp     r13, r15
.text:0000000000004193                 jbe     short loc_4199
.text:0000000000004195                 mov     [r14+r15], al
.text:0000000000004199
.text:0000000000004199 loc_4199:                               ; CODE XREF: quotearg_buffer_restyled+FD3↑j
.text:0000000000004199                 add     r15, 1
.text:000000000000419D                 movzx   eax, byte ptr [rdx+r15]
.text:00000000000041A2                 test    al, al
.text:00000000000041A4                 jnz     short loc_4190
.text:00000000000041A6                 jmp     loc_3FBC
.text:00000000000041AB ; ---------------------------------------------------------------------------
.text:00000000000041AB
.text:00000000000041AB loc_41AB:                               ; CODE XREF: quotearg_buffer_restyled+9EA↑j
.text:00000000000041AB                 mov     eax, edx
.text:00000000000041AD                 jmp     loc_3707
.text:00000000000041B2 ; ---------------------------------------------------------------------------
.text:00000000000041B2
.text:00000000000041B2 loc_41B2:                               ; CODE XREF: quotearg_buffer_restyled+862↑j
.text:00000000000041B2                 movzx   ebx, byte ptr [rax+rcx]
.text:00000000000041B6                 cmp     bl, 3Eh ; '>'
.text:00000000000041B9                 ja      loc_3A30
.text:00000000000041BF                 mov     rax, 7000A38200000000h
.text:00000000000041C9                 bt      rax, rbx
.text:00000000000041CD                 jnb     loc_3A30
.text:00000000000041D3                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000041D8                 jnz     loc_43C2
.text:00000000000041DE                 cmp     r13, r15
.text:00000000000041E1                 jbe     short loc_41E8
.text:00000000000041E3                 mov     byte ptr [r14+r15], 3Fh ; '?'
.text:00000000000041E8
.text:00000000000041E8 loc_41E8:                               ; CODE XREF: quotearg_buffer_restyled+1021↑j
.text:00000000000041E8                 lea     rax, [r15+1]
.text:00000000000041EC                 cmp     r13, rax
.text:00000000000041EF                 jbe     short loc_41F7
.text:00000000000041F1                 mov     byte ptr [r14+r15+1], 22h ; '"'
.text:00000000000041F7
.text:00000000000041F7 loc_41F7:                               ; CODE XREF: quotearg_buffer_restyled+102F↑j
.text:00000000000041F7                 lea     rax, [r15+2]
.text:00000000000041FB                 cmp     r13, rax
.text:00000000000041FE                 jbe     short loc_4206
.text:0000000000004200                 mov     byte ptr [r14+r15+2], 22h ; '"'
.text:0000000000004206
.text:0000000000004206 loc_4206:                               ; CODE XREF: quotearg_buffer_restyled+103E↑j
.text:0000000000004206                 lea     rax, [r15+3]
.text:000000000000420A                 cmp     r13, rax
.text:000000000000420D                 jbe     short loc_4215
.text:000000000000420F                 mov     byte ptr [r14+r15+3], 3Fh ; '?'
.text:0000000000004215
.text:0000000000004215 loc_4215:                               ; CODE XREF: quotearg_buffer_restyled+104D↑j
.text:0000000000004215                 add     r15, 4
.text:0000000000004219                 xor     edx, edx
.text:000000000000421B                 xor     r12d, r12d
.text:000000000000421E                 xor     eax, eax
.text:0000000000004220                 mov     rbp, rcx
.text:0000000000004223                 jmp     loc_33E8
.text:0000000000004228 ; ---------------------------------------------------------------------------
.text:0000000000004228
.text:0000000000004228 loc_4228:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004228                                         ; DATA XREF: .rodata:jpt_3251↓o
.text:0000000000004228                 test    ebx, ebx        ; jumptable 00000000000121F1 case 2
.text:000000000000422A                 jz      loc_43B8
.text:0000000000004230                 lea     rax, asc_14EC5  ; "'"
.text:0000000000004237                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000423C                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004241                 xor     r12d, r12d
.text:0000000000004244                 mov     [rsp+0E8h+var_98], 0
.text:000000000000424D                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000004252                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000004257                 mov     [rsp+0E8h+n], 1
.text:0000000000004260                 xor     r15d, r15d
.text:0000000000004263                 mov     [rsp+0E8h+s2], rax
.text:0000000000004268                 jmp     loc_3293
.text:0000000000004268 ; ---------------------------------------------------------------------------
.text:000000000000426D                 align 10h
.text:0000000000004270
.text:0000000000004270 loc_4270:                               ; CODE XREF: quotearg_buffer_restyled+745↑j
.text:0000000000004270                                         ; quotearg_buffer_restyled+805↑j ...
.text:0000000000004270                 mov     rbp, r11
.text:0000000000004273                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000004278                 jmp     loc_3D49
.text:000000000000427D ; ---------------------------------------------------------------------------
.text:000000000000427D
.text:000000000000427D loc_427D:                               ; CODE XREF: quotearg_buffer_restyled+CC2↑j
.text:000000000000427D                 lea     rax, unk_14EC3
.text:0000000000004284                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000004289                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000428E                 xor     r12d, r12d
.text:0000000000004291                 mov     [rsp+0E8h+var_98], 0
.text:000000000000429A                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000429F                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000042A4                 mov     [rsp+0E8h+n], 1
.text:00000000000042AD                 xor     r15d, r15d
.text:00000000000042B0                 mov     [rsp+0E8h+s2], rax
.text:00000000000042B5                 jmp     loc_3293
.text:00000000000042BA ; ---------------------------------------------------------------------------
.text:00000000000042BA
.text:00000000000042BA loc_42BA:                               ; CODE XREF: quotearg_buffer_restyled+797↑j
.text:00000000000042BA                 mov     eax, edx
.text:00000000000042BC
.text:00000000000042BC loc_42BC:                               ; CODE XREF: quotearg_buffer_restyled+78C↑j
.text:00000000000042BC                                         ; quotearg_buffer_restyled+11E1↓j
.text:00000000000042BC                 mov     rbx, [rsp+0E8h+s2]
.text:00000000000042C1                 test    rbx, rbx
.text:00000000000042C4                 jz      short loc_42F2
.text:00000000000042C6                 test    al, al
.text:00000000000042C8                 jz      short loc_42F2
.text:00000000000042CA                 movzx   ecx, byte ptr [rbx]
.text:00000000000042CD                 mov     rax, rbx
.text:00000000000042D0                 test    cl, cl
.text:00000000000042D2                 jz      short loc_42F2
.text:00000000000042D4                 mov     rdx, r15
.text:00000000000042D7                 sub     rax, r15
.text:00000000000042DA
.text:00000000000042DA loc_42DA:                               ; CODE XREF: quotearg_buffer_restyled+112D↓j
.text:00000000000042DA                 cmp     r13, rdx
.text:00000000000042DD                 jbe     short loc_42E3
.text:00000000000042DF                 mov     [r14+rdx], cl
.text:00000000000042E3
.text:00000000000042E3 loc_42E3:                               ; CODE XREF: quotearg_buffer_restyled+111D↑j
.text:00000000000042E3                 add     rdx, 1
.text:00000000000042E7                 movzx   ecx, byte ptr [rax+rdx]
.text:00000000000042EB                 test    cl, cl
.text:00000000000042ED                 jnz     short loc_42DA
.text:00000000000042EF                 mov     r15, rdx
.text:00000000000042F2
.text:00000000000042F2 loc_42F2:                               ; CODE XREF: quotearg_buffer_restyled+1104↑j
.text:00000000000042F2                                         ; quotearg_buffer_restyled+1108↑j ...
.text:00000000000042F2                 cmp     r13, r15
.text:00000000000042F5                 jbe     loc_3D99
.text:00000000000042FB                 mov     byte ptr [r14+r15], 0
.text:0000000000004300                 jmp     loc_3D99
.text:0000000000004305 ; ---------------------------------------------------------------------------
.text:0000000000004305
.text:0000000000004305 loc_4305:                               ; CODE XREF: quotearg_buffer_restyled+1C2↑j
.text:0000000000004305                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000430A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000430F                 mov     rbp, r11
.text:0000000000004312                 setz    al
.text:0000000000004315                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000004319                 jmp     loc_3D49
.text:000000000000431E ; ---------------------------------------------------------------------------
.text:000000000000431E
.text:000000000000431E loc_431E:                               ; CODE XREF: quotearg_buffer_restyled+DC0↑j
.text:000000000000431E                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000004322                 mov     rdi, rcx
.text:0000000000004325                 call    gettext_quote
.text:000000000000432A                 mov     [rsp+0E8h+var_80], rax
.text:000000000000432F                 jmp     loc_3F86
.text:0000000000004334 ; ---------------------------------------------------------------------------
.text:0000000000004334
.text:0000000000004334 loc_4334:                               ; CODE XREF: quotearg_buffer_restyled+DEB↑j
.text:0000000000004334                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000004338                 mov     rdi, rcx
.text:000000000000433B                 call    gettext_quote
.text:0000000000004340                 mov     [rsp+0E8h+var_88], rax
.text:0000000000004345                 jmp     loc_3FB1
.text:000000000000434A ; ---------------------------------------------------------------------------
.text:000000000000434A
.text:000000000000434A loc_434A:                               ; CODE XREF: quotearg_buffer_restyled+5F0↑j
.text:000000000000434A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000434F                 mov     rbp, r11
.text:0000000000004352                 mov     eax, edx
.text:0000000000004354                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000004358                 jmp     loc_3D49
.text:000000000000435D ; ---------------------------------------------------------------------------
.text:000000000000435D
.text:000000000000435D loc_435D:                               ; CODE XREF: quotearg_buffer_restyled+7A2↑j
.text:000000000000435D                 sub     rsp, 8
.text:0000000000004361                 mov     r8d, 5
.text:0000000000004367                 mov     rcx, r11
.text:000000000000436A                 push    [rsp+0F0h+var_88]
.text:000000000000436E                 push    [rsp+0F8h+var_80]
.text:0000000000004372                 mov     rdi, r14
.text:0000000000004375                 push    [rsp+100h+var_C8]
.text:0000000000004379                 mov     r9d, [rsp+108h+var_70]
.text:0000000000004381                 mov     rdx, [rsp+108h+s]
.text:0000000000004386                 mov     rsi, [rsp+108h+var_98]
.text:000000000000438B                 call    quotearg_buffer_restyled
.text:0000000000004390                 add     rsp, 20h
.text:0000000000004394                 mov     r15, rax
.text:0000000000004397                 jmp     loc_3D99
.text:000000000000439C ; ---------------------------------------------------------------------------
.text:000000000000439C
.text:000000000000439C loc_439C:                               ; CODE XREF: quotearg_buffer_restyled+7B9↑j
.text:000000000000439C                 movzx   eax, [rsp+0E8h+var_6C]
.text:00000000000043A1                 jmp     loc_42BC
.text:00000000000043A6 ; ---------------------------------------------------------------------------
.text:00000000000043A6
.text:00000000000043A6 loc_43A6:                               ; CODE XREF: quotearg_buffer_restyled+77F↑j
.text:00000000000043A6                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000043AE                 jmp     loc_3D49
.text:00000000000043B3 ; ---------------------------------------------------------------------------
.text:00000000000043B3
.text:00000000000043B3 loc_43B3:                               ; CODE XREF: quotearg_buffer_restyled+BED↑j
.text:00000000000043B3                 call    ___stack_chk_fail
.text:00000000000043B8 ; ---------------------------------------------------------------------------
.text:00000000000043B8
.text:00000000000043B8 loc_43B8:                               ; CODE XREF: quotearg_buffer_restyled+106A↑j
.text:00000000000043B8                 mov     [rsp+0E8h+var_DB], 0
.text:00000000000043BD                 jmp     loc_3E31
.text:00000000000043C2 ; ---------------------------------------------------------------------------
.text:00000000000043C2
.text:00000000000043C2 loc_43C2:                               ; CODE XREF: quotearg_buffer_restyled+1018↑j
.text:00000000000043C2                 mov     rbp, r11
.text:00000000000043C5                 jmp     loc_3D60
.text:00000000000043CA ; ---------------------------------------------------------------------------
.text:00000000000043CA
.text:00000000000043CA loc_43CA:                               ; CODE XREF: quotearg_buffer_restyled+C74↑j
.text:00000000000043CA                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000043CF                 xor     eax, eax
.text:00000000000043D1                 xor     r12d, r12d
.text:00000000000043D4                 mov     [rsp+0E8h+var_98], 0
.text:00000000000043DD                 jmp     loc_3984
.text:00000000000043E2 ; ---------------------------------------------------------------------------
.text:00000000000043E2
.text:00000000000043E2 loc_43E2:                               ; CODE XREF: quotearg_buffer_restyled+C30↑j
.text:00000000000043E2                 mov     rdx, r13
.text:00000000000043E5                 mov     r13, [rsp+0E8h+var_98]
.text:00000000000043EA                 jmp     loc_39E2
.text:00000000000043EF ; ---------------------------------------------------------------------------
.text:00000000000043EF
.text:00000000000043EF def_3251:                               ; CODE XREF: quotearg_buffer_restyled+7A↑j
.text:00000000000043EF                 call    _abort          ; jumptable 00000000000121F1 default case
.text:00000000000043EF ; } // starts at 31C0
.text:00000000000043EF quotearg_buffer_restyled endp
.text:00000000000043EF
.text:00000000000043EF ; ---------------------------------------------------------------------------
.text:00000000000043F4                 align 20h
.text:0000000000004400
.text:0000000000004400 ; =============== S U B R O U T I N E =======================================
.text:0000000000004400
.text:0000000000004400
.text:0000000000004400 quotearg_n_options proc near            ; CODE XREF: quotearg_n+E↓j
.text:0000000000004400                                         ; quotearg_n_mem+7↓j ...
.text:0000000000004400
.text:0000000000004400 var_50          = qword ptr -50h
.text:0000000000004400 var_48          = qword ptr -48h
.text:0000000000004400 var_40          = dword ptr -40h
.text:0000000000004400 var_3C          = dword ptr -3Ch
.text:0000000000004400
.text:0000000000004400 ; __unwind {
.text:0000000000004400                 push    r15
.text:0000000000004402                 push    r14
.text:0000000000004404                 movsxd  r15, edi
.text:0000000000004407                 push    r13
.text:0000000000004409                 push    r12
.text:000000000000440B                 mov     r14, rdx
.text:000000000000440E                 push    rbp
.text:000000000000440F                 push    rbx
.text:0000000000004410                 mov     rbp, rcx
.text:0000000000004413                 sub     rsp, 28h
.text:0000000000004417                 mov     [rsp+58h+var_50], rsi
.text:000000000000441C                 call    ___errno_location
.text:0000000000004421                 mov     r13, rax
.text:0000000000004424                 mov     eax, [rax]
.text:0000000000004426                 test    r15d, r15d
.text:0000000000004429                 mov     rbx, cs:slotvec
.text:0000000000004430                 mov     [rsp+58h+var_40], eax
.text:0000000000004434                 js      loc_45A1
.text:000000000000443A                 cmp     cs:nslots, r15d
.text:0000000000004441                 jg      short loc_44A5
.text:0000000000004443                 cmp     r15d, 7FFFFFFFh
.text:000000000000444A                 jz      loc_45A6
.text:0000000000004450                 lea     r12d, [r15+1]
.text:0000000000004454                 lea     rax, slotvec0
.text:000000000000445B                 movsxd  rsi, r12d
.text:000000000000445E                 shl     rsi, 4
.text:0000000000004462                 cmp     rbx, rax
.text:0000000000004465                 jz      loc_4580
.text:000000000000446B                 mov     rdi, rbx
.text:000000000000446E                 call    xrealloc
.text:0000000000004473                 mov     rbx, rax
.text:0000000000004476                 mov     cs:slotvec, rax
.text:000000000000447D
.text:000000000000447D loc_447D:                               ; CODE XREF: quotearg_n_options+19C↓j
.text:000000000000447D                 movsxd  rdi, cs:nslots
.text:0000000000004484                 mov     edx, r12d
.text:0000000000004487                 xor     esi, esi        ; c
.text:0000000000004489                 sub     edx, edi
.text:000000000000448B                 shl     rdi, 4
.text:000000000000448F                 movsxd  rdx, edx
.text:0000000000004492                 add     rdi, rbx        ; s
.text:0000000000004495                 shl     rdx, 4          ; n
.text:0000000000004499                 call    _memset
.text:000000000000449E                 mov     cs:nslots, r12d
.text:00000000000044A5
.text:00000000000044A5 loc_44A5:                               ; CODE XREF: quotearg_n_options+41↑j
.text:00000000000044A5                 mov     eax, [rbp+4]
.text:00000000000044A8                 shl     r15, 4
.text:00000000000044AC                 sub     rsp, 8
.text:00000000000044B0                 add     rbx, r15
.text:00000000000044B3                 lea     r15, [rbp+8]
.text:00000000000044B7                 mov     r8d, [rbp+0]
.text:00000000000044BB                 mov     r11, [rbx]
.text:00000000000044BE                 mov     r12, [rbx+8]
.text:00000000000044C2                 mov     rcx, r14
.text:00000000000044C5                 or      eax, 1
.text:00000000000044C8                 mov     [rsp+60h+var_3C], eax
.text:00000000000044CC                 push    qword ptr [rbp+30h]
.text:00000000000044CF                 mov     r9d, eax
.text:00000000000044D2                 push    qword ptr [rbp+28h]
.text:00000000000044D5                 push    r15
.text:00000000000044D7                 mov     rsi, r11
.text:00000000000044DA                 mov     rdx, [rsp+78h+var_50]
.text:00000000000044DF                 mov     rdi, r12
.text:00000000000044E2                 mov     [rsp+78h+var_48], r11
.text:00000000000044E7                 call    quotearg_buffer_restyled
.text:00000000000044EC                 add     rsp, 20h
.text:00000000000044F0                 mov     r11, [rsp+58h+var_48]
.text:00000000000044F5                 cmp     r11, rax
.text:00000000000044F8                 ja      short loc_4561
.text:00000000000044FA                 lea     rsi, [rax+1]
.text:00000000000044FE                 lea     rax, slot0
.text:0000000000004505                 cmp     r12, rax
.text:0000000000004508                 mov     [rbx], rsi
.text:000000000000450B                 jz      short loc_451F
.text:000000000000450D                 mov     rdi, r12        ; ptr
.text:0000000000004510                 mov     [rsp+58h+var_48], rsi
.text:0000000000004515                 call    _free
.text:000000000000451A                 mov     rsi, [rsp+58h+var_48]
.text:000000000000451F
.text:000000000000451F loc_451F:                               ; CODE XREF: quotearg_n_options+10B↑j
.text:000000000000451F                 mov     rdi, rsi
.text:0000000000004522                 mov     [rsp+58h+var_48], rsi
.text:0000000000004527                 call    xmalloc
.text:000000000000452C                 sub     rsp, 8
.text:0000000000004530                 mov     [rbx+8], rax
.text:0000000000004534                 mov     r8d, [rbp+0]
.text:0000000000004538                 push    qword ptr [rbp+30h]
.text:000000000000453B                 push    qword ptr [rbp+28h]
.text:000000000000453E                 mov     rcx, r14
.text:0000000000004541                 push    r15
.text:0000000000004543                 mov     r9d, [rsp+78h+var_3C]
.text:0000000000004548                 mov     rdi, rax
.text:000000000000454B                 mov     rdx, [rsp+78h+var_50]
.text:0000000000004550                 mov     rsi, [rsp+78h+var_48]
.text:0000000000004555                 mov     r12, rax
.text:0000000000004558                 call    quotearg_buffer_restyled
.text:000000000000455D                 add     rsp, 20h
.text:0000000000004561
.text:0000000000004561 loc_4561:                               ; CODE XREF: quotearg_n_options+F8↑j
.text:0000000000004561                 mov     eax, [rsp+58h+var_40]
.text:0000000000004565                 mov     [r13+0], eax
.text:0000000000004569                 add     rsp, 28h
.text:000000000000456D                 mov     rax, r12
.text:0000000000004570                 pop     rbx
.text:0000000000004571                 pop     rbp
.text:0000000000004572                 pop     r12
.text:0000000000004574                 pop     r13
.text:0000000000004576                 pop     r14
.text:0000000000004578                 pop     r15
.text:000000000000457A                 retn
.text:000000000000457A ; ---------------------------------------------------------------------------
.text:000000000000457B                 align 20h
.text:0000000000004580
.text:0000000000004580 loc_4580:                               ; CODE XREF: quotearg_n_options+65↑j
.text:0000000000004580                 xor     edi, edi
.text:0000000000004582                 call    xrealloc
.text:0000000000004587                 movdqa  xmm0, xmmword ptr cs:slotvec0
.text:000000000000458F                 mov     rbx, rax
.text:0000000000004592                 mov     cs:slotvec, rax
.text:0000000000004599                 movups  xmmword ptr [rax], xmm0
.text:000000000000459C                 jmp     loc_447D
.text:00000000000045A1 ; ---------------------------------------------------------------------------
.text:00000000000045A1
.text:00000000000045A1 loc_45A1:                               ; CODE XREF: quotearg_n_options+34↑j
.text:00000000000045A1                 call    _abort
.text:00000000000045A6 ; ---------------------------------------------------------------------------
.text:00000000000045A6
.text:00000000000045A6 loc_45A6:                               ; CODE XREF: quotearg_n_options+4A↑j
.text:00000000000045A6                 call    xalloc_die
.text:00000000000045A6 ; } // starts at 4400
.text:00000000000045A6 quotearg_n_options endp
.text:00000000000045A6
.text:00000000000045A6 ; ---------------------------------------------------------------------------
.text:00000000000045AB                 align 10h
.text:00000000000045B0
.text:00000000000045B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000045B0
.text:00000000000045B0 ; Attributes: info_from_lumina
.text:00000000000045B0
.text:00000000000045B0 ; quoting_options *__fastcall clone_quoting_options(quoting_options *o)
.text:00000000000045B0                 public clone_quoting_options
.text:00000000000045B0 clone_quoting_options proc near
.text:00000000000045B0 ; __unwind {
.text:00000000000045B0                 push    r12
.text:00000000000045B2                 push    rbp
.text:00000000000045B3                 push    rbx
.text:00000000000045B4                 mov     rbx, rdi
.text:00000000000045B7                 call    ___errno_location
.text:00000000000045BC                 mov     r12d, [rax]
.text:00000000000045BF                 mov     rbp, rax
.text:00000000000045C2                 lea     rax, default_quoting_options
.text:00000000000045C9                 test    rbx, rbx
.text:00000000000045CC                 mov     esi, 38h ; '8'  ; n
.text:00000000000045D1                 cmovz   rbx, rax
.text:00000000000045D5                 mov     rdi, rbx        ; src
.text:00000000000045D8                 call    xmemdup
.text:00000000000045DD                 mov     [rbp+0], r12d
.text:00000000000045E1                 pop     rbx
.text:00000000000045E2                 pop     rbp
.text:00000000000045E3                 pop     r12
.text:00000000000045E5                 retn
.text:00000000000045E5 ; } // starts at 45B0
.text:00000000000045E5 clone_quoting_options endp
.text:00000000000045E5
.text:00000000000045E5 ; ---------------------------------------------------------------------------
.text:00000000000045E6                 align 10h
.text:00000000000045F0
.text:00000000000045F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000045F0
.text:00000000000045F0
.text:00000000000045F0                 public get_quoting_style
.text:00000000000045F0 get_quoting_style proc near
.text:00000000000045F0 ; __unwind {
.text:00000000000045F0                 lea     rax, default_quoting_options
.text:00000000000045F7                 test    rdi, rdi
.text:00000000000045FA                 cmovz   rdi, rax
.text:00000000000045FE                 mov     eax, [rdi]
.text:0000000000004600                 retn
.text:0000000000004600 ; } // starts at 45F0
.text:0000000000004600 get_quoting_style endp
.text:0000000000004600
.text:0000000000004600 ; ---------------------------------------------------------------------------
.text:0000000000004601                 align 10h
.text:0000000000004610
.text:0000000000004610 ; =============== S U B R O U T I N E =======================================
.text:0000000000004610
.text:0000000000004610
.text:0000000000004610                 public set_quoting_style
.text:0000000000004610 set_quoting_style proc near
.text:0000000000004610 ; __unwind {
.text:0000000000004610                 lea     rax, default_quoting_options
.text:0000000000004617                 test    rdi, rdi
.text:000000000000461A                 cmovz   rdi, rax
.text:000000000000461E                 mov     [rdi], esi
.text:0000000000004620                 retn
.text:0000000000004620 ; } // starts at 4610
.text:0000000000004620 set_quoting_style endp
.text:0000000000004620
.text:0000000000004620 ; ---------------------------------------------------------------------------
.text:0000000000004621                 align 10h
.text:0000000000004630
.text:0000000000004630 ; =============== S U B R O U T I N E =======================================
.text:0000000000004630
.text:0000000000004630 ; Attributes: info_from_lumina
.text:0000000000004630
.text:0000000000004630 ; int __fastcall set_char_quoting(quoting_options *o, char c, int i)
.text:0000000000004630                 public set_char_quoting
.text:0000000000004630 set_char_quoting proc near
.text:0000000000004630 ; __unwind {
.text:0000000000004630                 lea     rax, default_quoting_options
.text:0000000000004637                 test    rdi, rdi
.text:000000000000463A                 mov     ecx, esi
.text:000000000000463C                 cmovz   rdi, rax
.text:0000000000004640                 mov     eax, esi
.text:0000000000004642                 and     ecx, 1Fh
.text:0000000000004645                 shr     al, 5
.text:0000000000004648                 movzx   eax, al
.text:000000000000464B                 lea     rdi, [rdi+rax*4+8]
.text:0000000000004650                 mov     esi, [rdi]
.text:0000000000004652                 mov     eax, esi
.text:0000000000004654                 shr     eax, cl
.text:0000000000004656                 xor     edx, eax
.text:0000000000004658                 and     eax, 1
.text:000000000000465B                 and     edx, 1
.text:000000000000465E                 shl     edx, cl
.text:0000000000004660                 xor     edx, esi
.text:0000000000004662                 mov     [rdi], edx
.text:0000000000004664                 retn
.text:0000000000004664 ; } // starts at 4630
.text:0000000000004664 set_char_quoting endp
.text:0000000000004664
.text:0000000000004664 ; ---------------------------------------------------------------------------
.text:0000000000004665                 align 10h
.text:0000000000004670
.text:0000000000004670 ; =============== S U B R O U T I N E =======================================
.text:0000000000004670
.text:0000000000004670
.text:0000000000004670                 public set_quoting_flags
.text:0000000000004670 set_quoting_flags proc near
.text:0000000000004670 ; __unwind {
.text:0000000000004670                 lea     rax, default_quoting_options
.text:0000000000004677                 test    rdi, rdi
.text:000000000000467A                 cmovz   rdi, rax
.text:000000000000467E                 mov     eax, [rdi+4]
.text:0000000000004681                 mov     [rdi+4], esi
.text:0000000000004684                 retn
.text:0000000000004684 ; } // starts at 4670
.text:0000000000004684 set_quoting_flags endp
.text:0000000000004684
.text:0000000000004684 ; ---------------------------------------------------------------------------
.text:0000000000004685                 align 10h
.text:0000000000004690
.text:0000000000004690 ; =============== S U B R O U T I N E =======================================
.text:0000000000004690
.text:0000000000004690 ; Attributes: info_from_lumina
.text:0000000000004690
.text:0000000000004690 ; void __fastcall set_custom_quoting(quoting_options *o, const char *left_quote, const char *right_quote)
.text:0000000000004690                 public set_custom_quoting
.text:0000000000004690 set_custom_quoting proc near
.text:0000000000004690 ; __unwind {
.text:0000000000004690                 lea     rax, default_quoting_options
.text:0000000000004697                 test    rdi, rdi
.text:000000000000469A                 cmovz   rdi, rax
.text:000000000000469E                 test    rsi, rsi
.text:00000000000046A1                 mov     dword ptr [rdi], 0Ah
.text:00000000000046A7                 jz      short loc_46B7
.text:00000000000046A9                 test    rdx, rdx
.text:00000000000046AC                 jz      short loc_46B7
.text:00000000000046AE                 mov     [rdi+28h], rsi
.text:00000000000046B2                 mov     [rdi+30h], rdx
.text:00000000000046B6                 retn
.text:00000000000046B7 ; ---------------------------------------------------------------------------
.text:00000000000046B7
.text:00000000000046B7 loc_46B7:                               ; CODE XREF: set_custom_quoting+17↑j
.text:00000000000046B7                                         ; set_custom_quoting+1C↑j
.text:00000000000046B7                 sub     rsp, 8
.text:00000000000046BB                 call    _abort
.text:00000000000046BB ; } // starts at 4690
.text:00000000000046BB set_custom_quoting endp
.text:00000000000046BB
.text:00000000000046C0
.text:00000000000046C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000046C0
.text:00000000000046C0 ; Attributes: info_from_lumina
.text:00000000000046C0
.text:00000000000046C0 ; size_t __fastcall quotearg_buffer(char *buffer, size_t buffersize, const char *arg, size_t argsize, const quoting_options *o)
.text:00000000000046C0                 public quotearg_buffer
.text:00000000000046C0 quotearg_buffer proc near
.text:00000000000046C0
.text:00000000000046C0 var_40          = qword ptr -40h
.text:00000000000046C0
.text:00000000000046C0 ; __unwind {
.text:00000000000046C0                 push    r15
.text:00000000000046C2                 push    r14
.text:00000000000046C4                 lea     rax, default_quoting_options
.text:00000000000046CB                 push    r13
.text:00000000000046CD                 push    r12
.text:00000000000046CF                 mov     r13, rdi
.text:00000000000046D2                 push    rbp
.text:00000000000046D3                 push    rbx
.text:00000000000046D4                 mov     rbx, r8
.text:00000000000046D7                 mov     r14, rsi
.text:00000000000046DA                 mov     r15, rdx
.text:00000000000046DD                 sub     rsp, 18h
.text:00000000000046E1                 test    r8, r8
.text:00000000000046E4                 cmovz   rbx, rax
.text:00000000000046E8                 mov     [rsp+48h+var_40], rcx
.text:00000000000046ED                 call    ___errno_location
.text:00000000000046F2                 mov     r12d, [rax]
.text:00000000000046F5                 mov     rbp, rax
.text:00000000000046F8                 lea     rax, [rbx+8]
.text:00000000000046FC                 sub     rsp, 8
.text:0000000000004700                 mov     r9d, [rbx+4]
.text:0000000000004704                 push    qword ptr [rbx+30h]
.text:0000000000004707                 mov     r8d, [rbx]
.text:000000000000470A                 push    qword ptr [rbx+28h]
.text:000000000000470D                 mov     rdx, r15
.text:0000000000004710                 push    rax
.text:0000000000004711                 mov     rcx, [rsp+68h+var_40]
.text:0000000000004716                 mov     rsi, r14
.text:0000000000004719                 mov     rdi, r13
.text:000000000000471C                 call    quotearg_buffer_restyled
.text:0000000000004721                 mov     [rbp+0], r12d
.text:0000000000004725                 add     rsp, 38h
.text:0000000000004729                 pop     rbx
.text:000000000000472A                 pop     rbp
.text:000000000000472B                 pop     r12
.text:000000000000472D                 pop     r13
.text:000000000000472F                 pop     r14
.text:0000000000004731                 pop     r15
.text:0000000000004733                 retn
.text:0000000000004733 ; } // starts at 46C0
.text:0000000000004733 quotearg_buffer endp
.text:0000000000004733
.text:0000000000004733 ; ---------------------------------------------------------------------------
.text:0000000000004734                 align 20h
.text:0000000000004740
.text:0000000000004740 ; =============== S U B R O U T I N E =======================================
.text:0000000000004740
.text:0000000000004740 ; Attributes: info_from_lumina
.text:0000000000004740
.text:0000000000004740 ; char *__fastcall quotearg_alloc_mem(const char *arg, size_t argsize, size_t *size, const quoting_options *o)
.text:0000000000004740                 public quotearg_alloc_mem
.text:0000000000004740 quotearg_alloc_mem proc near            ; CODE XREF: quotearg_alloc+5↓j
.text:0000000000004740
.text:0000000000004740 var_5C          = dword ptr -5Ch
.text:0000000000004740 var_58          = qword ptr -58h
.text:0000000000004740 var_50          = qword ptr -50h
.text:0000000000004740 var_48          = qword ptr -48h
.text:0000000000004740 var_40          = qword ptr -40h
.text:0000000000004740
.text:0000000000004740 ; __unwind {
.text:0000000000004740                 push    r15
.text:0000000000004742                 push    r14
.text:0000000000004744                 lea     rax, default_quoting_options
.text:000000000000474B                 push    r13
.text:000000000000474D                 push    r12
.text:000000000000474F                 mov     r12, rdx
.text:0000000000004752                 push    rbp
.text:0000000000004753                 push    rbx
.text:0000000000004754                 mov     rbx, rcx
.text:0000000000004757                 mov     r14, rdi
.text:000000000000475A                 mov     r15, rsi
.text:000000000000475D                 sub     rsp, 38h
.text:0000000000004761                 test    rcx, rcx
.text:0000000000004764                 cmovz   rbx, rax
.text:0000000000004768                 xor     ebp, ebp
.text:000000000000476A                 call    ___errno_location
.text:000000000000476F                 test    r12, r12
.text:0000000000004772                 mov     r13, rax
.text:0000000000004775                 mov     eax, [rax]
.text:0000000000004777                 setz    bpl
.text:000000000000477B                 or      ebp, [rbx+4]
.text:000000000000477E                 lea     r10, [rbx+8]
.text:0000000000004782                 sub     rsp, 8
.text:0000000000004786                 mov     r8d, [rbx]
.text:0000000000004789                 mov     rcx, r15
.text:000000000000478C                 mov     [rsp+70h+var_5C], eax
.text:0000000000004790                 push    qword ptr [rbx+30h]
.text:0000000000004793                 mov     rdx, r14
.text:0000000000004796                 push    qword ptr [rbx+28h]
.text:0000000000004799                 push    r10
.text:000000000000479B                 xor     esi, esi
.text:000000000000479D                 mov     r9d, ebp
.text:00000000000047A0                 xor     edi, edi
.text:00000000000047A2                 mov     [rsp+88h+var_48], r10
.text:00000000000047A7                 call    quotearg_buffer_restyled
.text:00000000000047AC                 lea     rsi, [rax+1]
.text:00000000000047B0                 mov     [rsp+88h+var_40], rax
.text:00000000000047B5                 add     rsp, 20h
.text:00000000000047B9                 mov     rdi, rsi
.text:00000000000047BC                 mov     [rsp+68h+var_50], rsi
.text:00000000000047C1                 call    xmalloc
.text:00000000000047C6                 mov     [rsp+68h+var_58], rax
.text:00000000000047CB                 sub     rsp, 8
.text:00000000000047CF                 push    qword ptr [rbx+30h]
.text:00000000000047D2                 push    qword ptr [rbx+28h]
.text:00000000000047D5                 mov     r10, [rsp+80h+var_48]
.text:00000000000047DA                 mov     r9d, ebp
.text:00000000000047DD                 mov     r8d, [rbx]
.text:00000000000047E0                 mov     rcx, r15
.text:00000000000047E3                 mov     rdx, r14
.text:00000000000047E6                 mov     rdi, rax
.text:00000000000047E9                 push    r10
.text:00000000000047EB                 mov     rsi, [rsp+88h+var_50]
.text:00000000000047F0                 call    quotearg_buffer_restyled
.text:00000000000047F5                 mov     eax, [rsp+88h+var_5C]
.text:00000000000047F9                 add     rsp, 20h
.text:00000000000047FD                 test    r12, r12
.text:0000000000004800                 mov     [r13+0], eax
.text:0000000000004804                 jz      short loc_480F
.text:0000000000004806                 mov     r11, [rsp+68h+var_40]
.text:000000000000480B                 mov     [r12], r11
.text:000000000000480F
.text:000000000000480F loc_480F:                               ; CODE XREF: quotearg_alloc_mem+C4↑j
.text:000000000000480F                 mov     rax, [rsp+68h+var_58]
.text:0000000000004814                 add     rsp, 38h
.text:0000000000004818                 pop     rbx
.text:0000000000004819                 pop     rbp
.text:000000000000481A                 pop     r12
.text:000000000000481C                 pop     r13
.text:000000000000481E                 pop     r14
.text:0000000000004820                 pop     r15
.text:0000000000004822                 retn
.text:0000000000004822 ; } // starts at 4740
.text:0000000000004822 quotearg_alloc_mem endp
.text:0000000000004822
.text:0000000000004822 ; ---------------------------------------------------------------------------
.text:0000000000004823                 align 10h
.text:0000000000004830
.text:0000000000004830 ; =============== S U B R O U T I N E =======================================
.text:0000000000004830
.text:0000000000004830
.text:0000000000004830                 public quotearg_alloc
.text:0000000000004830 quotearg_alloc  proc near
.text:0000000000004830 ; __unwind {
.text:0000000000004830                 mov     rcx, rdx
.text:0000000000004833                 xor     edx, edx
.text:0000000000004835                 jmp     quotearg_alloc_mem
.text:0000000000004835 ; } // starts at 4830
.text:0000000000004835 quotearg_alloc  endp
.text:0000000000004835
.text:0000000000004835 ; ---------------------------------------------------------------------------
.text:000000000000483A                 align 20h
.text:0000000000004840
.text:0000000000004840 ; =============== S U B R O U T I N E =======================================
.text:0000000000004840
.text:0000000000004840 ; Attributes: info_from_lumina
.text:0000000000004840
.text:0000000000004840 ; void __cdecl quotearg_free()
.text:0000000000004840                 public quotearg_free
.text:0000000000004840 quotearg_free   proc near
.text:0000000000004840 ; __unwind {
.text:0000000000004840                 mov     eax, cs:nslots
.text:0000000000004846                 push    r12
.text:0000000000004848                 mov     r12, cs:slotvec
.text:000000000000484F                 push    rbp
.text:0000000000004850                 push    rbx
.text:0000000000004851                 cmp     eax, 1
.text:0000000000004854                 jle     short loc_4881
.text:0000000000004856                 sub     eax, 2
.text:0000000000004859                 lea     rbx, [r12+18h]
.text:000000000000485E                 shl     rax, 4
.text:0000000000004862                 lea     rbp, [r12+rax+28h]
.text:0000000000004867                 nop     word ptr [rax+rax+00000000h]
.text:0000000000004870
.text:0000000000004870 loc_4870:                               ; CODE XREF: quotearg_free+3F↓j
.text:0000000000004870                 mov     rdi, [rbx]      ; ptr
.text:0000000000004873                 add     rbx, 10h
.text:0000000000004877                 call    _free
.text:000000000000487C                 cmp     rbx, rbp
.text:000000000000487F                 jnz     short loc_4870
.text:0000000000004881
.text:0000000000004881 loc_4881:                               ; CODE XREF: quotearg_free+14↑j
.text:0000000000004881                 mov     rdi, [r12+8]    ; ptr
.text:0000000000004886                 lea     rbx, slot0
.text:000000000000488D                 cmp     rdi, rbx
.text:0000000000004890                 jz      short loc_48A9
.text:0000000000004892                 call    _free
.text:0000000000004897                 mov     cs:slotvec0, 100h
.text:00000000000048A2                 mov     cs:off_2190D8, rbx
.text:00000000000048A9
.text:00000000000048A9 loc_48A9:                               ; CODE XREF: quotearg_free+50↑j
.text:00000000000048A9                 lea     rbx, slotvec0
.text:00000000000048B0                 cmp     r12, rbx
.text:00000000000048B3                 jz      short loc_48C4
.text:00000000000048B5                 mov     rdi, r12        ; ptr
.text:00000000000048B8                 call    _free
.text:00000000000048BD                 mov     cs:slotvec, rbx
.text:00000000000048C4
.text:00000000000048C4 loc_48C4:                               ; CODE XREF: quotearg_free+73↑j
.text:00000000000048C4                 pop     rbx
.text:00000000000048C5                 mov     cs:nslots, 1
.text:00000000000048CF                 pop     rbp
.text:00000000000048D0                 pop     r12
.text:00000000000048D2                 retn
.text:00000000000048D2 ; } // starts at 4840
.text:00000000000048D2 quotearg_free   endp
.text:00000000000048D2
.text:00000000000048D2 ; ---------------------------------------------------------------------------
.text:00000000000048D3                 align 20h
.text:00000000000048E0
.text:00000000000048E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000048E0
.text:00000000000048E0
.text:00000000000048E0                 public quotearg_n
.text:00000000000048E0 quotearg_n      proc near
.text:00000000000048E0 ; __unwind {
.text:00000000000048E0                 lea     rcx, default_quoting_options
.text:00000000000048E7                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000048EE                 jmp     quotearg_n_options
.text:00000000000048EE ; } // starts at 48E0
.text:00000000000048EE quotearg_n      endp
.text:00000000000048EE
.text:00000000000048EE ; ---------------------------------------------------------------------------
.text:00000000000048F3                 align 20h
.text:0000000000004900
.text:0000000000004900 ; =============== S U B R O U T I N E =======================================
.text:0000000000004900
.text:0000000000004900
.text:0000000000004900                 public quotearg_n_mem
.text:0000000000004900 quotearg_n_mem  proc near
.text:0000000000004900 ; __unwind {
.text:0000000000004900                 lea     rcx, default_quoting_options
.text:0000000000004907                 jmp     quotearg_n_options
.text:0000000000004907 ; } // starts at 4900
.text:0000000000004907 quotearg_n_mem  endp
.text:0000000000004907
.text:0000000000004907 ; ---------------------------------------------------------------------------
.text:000000000000490C                 align 10h
.text:0000000000004910
.text:0000000000004910 ; =============== S U B R O U T I N E =======================================
.text:0000000000004910
.text:0000000000004910
.text:0000000000004910                 public quotearg
.text:0000000000004910 quotearg        proc near
.text:0000000000004910 ; __unwind {
.text:0000000000004910                 lea     rcx, default_quoting_options
.text:0000000000004917                 mov     rsi, rdi
.text:000000000000491A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004921                 xor     edi, edi
.text:0000000000004923                 jmp     quotearg_n_options
.text:0000000000004923 ; } // starts at 4910
.text:0000000000004923 quotearg        endp
.text:0000000000004923
.text:0000000000004923 ; ---------------------------------------------------------------------------
.text:0000000000004928                 align 10h
.text:0000000000004930
.text:0000000000004930 ; =============== S U B R O U T I N E =======================================
.text:0000000000004930
.text:0000000000004930
.text:0000000000004930                 public quotearg_mem
.text:0000000000004930 quotearg_mem    proc near
.text:0000000000004930 ; __unwind {
.text:0000000000004930                 lea     rcx, default_quoting_options
.text:0000000000004937                 mov     rdx, rsi
.text:000000000000493A                 mov     rsi, rdi
.text:000000000000493D                 xor     edi, edi
.text:000000000000493F                 jmp     quotearg_n_options
.text:000000000000493F ; } // starts at 4930
.text:000000000000493F quotearg_mem    endp
.text:000000000000493F
.text:000000000000493F ; ---------------------------------------------------------------------------
.text:0000000000004944                 align 10h
.text:0000000000004950
.text:0000000000004950 ; =============== S U B R O U T I N E =======================================
.text:0000000000004950
.text:0000000000004950 ; Attributes: info_from_lumina
.text:0000000000004950
.text:0000000000004950 ; char *__fastcall quotearg_n_style(int n, quoting_style s, const char *arg)
.text:0000000000004950                 public quotearg_n_style
.text:0000000000004950 quotearg_n_style proc near              ; CODE XREF: quotearg_style+7↓j
.text:0000000000004950
.text:0000000000004950 var_48          = dword ptr -48h
.text:0000000000004950 var_44          = qword ptr -44h
.text:0000000000004950 var_3C          = qword ptr -3Ch
.text:0000000000004950 var_34          = qword ptr -34h
.text:0000000000004950 var_2C          = qword ptr -2Ch
.text:0000000000004950 var_24          = qword ptr -24h
.text:0000000000004950 var_1C          = qword ptr -1Ch
.text:0000000000004950 var_14          = dword ptr -14h
.text:0000000000004950 var_10          = qword ptr -10h
.text:0000000000004950
.text:0000000000004950 ; __unwind {
.text:0000000000004950                 sub     rsp, 48h
.text:0000000000004954                 mov     rax, rdx
.text:0000000000004957                 mov     rdx, fs:28h
.text:0000000000004960                 mov     [rsp+48h+var_10], rdx
.text:0000000000004965                 xor     edx, edx
.text:0000000000004967                 cmp     esi, 0Ah
.text:000000000000496A                 jz      short loc_49D4
.text:000000000000496C                 mov     [rsp+48h+var_48], esi
.text:000000000000496F                 mov     rcx, rsp
.text:0000000000004972                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004979                 mov     rsi, rax
.text:000000000000497C                 mov     [rsp+48h+var_44], 0
.text:0000000000004985                 mov     [rsp+48h+var_3C], 0
.text:000000000000498E                 mov     [rsp+48h+var_34], 0
.text:0000000000004997                 mov     [rsp+48h+var_2C], 0
.text:00000000000049A0                 mov     [rsp+48h+var_24], 0
.text:00000000000049A9                 mov     [rsp+48h+var_1C], 0
.text:00000000000049B2                 mov     [rsp+48h+var_14], 0
.text:00000000000049BA                 call    quotearg_n_options
.text:00000000000049BF                 mov     rcx, [rsp+48h+var_10]
.text:00000000000049C4                 xor     rcx, fs:28h
.text:00000000000049CD                 jnz     short loc_49D9
.text:00000000000049CF                 add     rsp, 48h
.text:00000000000049D3                 retn
.text:00000000000049D4 ; ---------------------------------------------------------------------------
.text:00000000000049D4
.text:00000000000049D4 loc_49D4:                               ; CODE XREF: quotearg_n_style+1A↑j
.text:00000000000049D4                 call    _abort
.text:00000000000049D9 ; ---------------------------------------------------------------------------
.text:00000000000049D9
.text:00000000000049D9 loc_49D9:                               ; CODE XREF: quotearg_n_style+7D↑j
.text:00000000000049D9                 call    ___stack_chk_fail
.text:00000000000049D9 ; } // starts at 4950
.text:00000000000049D9 quotearg_n_style endp
.text:00000000000049D9
.text:00000000000049D9 ; ---------------------------------------------------------------------------
.text:00000000000049DE                 align 20h
.text:00000000000049E0
.text:00000000000049E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000049E0
.text:00000000000049E0 ; Attributes: info_from_lumina
.text:00000000000049E0
.text:00000000000049E0 ; char *__fastcall quotearg_n_style_mem(int n, quoting_style s, const char *arg, size_t argsize)
.text:00000000000049E0                 public quotearg_n_style_mem
.text:00000000000049E0 quotearg_n_style_mem proc near          ; CODE XREF: quotearg_style_mem+A↓j
.text:00000000000049E0
.text:00000000000049E0 var_48          = dword ptr -48h
.text:00000000000049E0 var_44          = qword ptr -44h
.text:00000000000049E0 var_3C          = qword ptr -3Ch
.text:00000000000049E0 var_34          = qword ptr -34h
.text:00000000000049E0 var_2C          = qword ptr -2Ch
.text:00000000000049E0 var_24          = qword ptr -24h
.text:00000000000049E0 var_1C          = qword ptr -1Ch
.text:00000000000049E0 var_14          = dword ptr -14h
.text:00000000000049E0 var_10          = qword ptr -10h
.text:00000000000049E0
.text:00000000000049E0 ; __unwind {
.text:00000000000049E0                 sub     rsp, 48h
.text:00000000000049E4                 mov     rax, rdx
.text:00000000000049E7                 mov     rdx, rcx
.text:00000000000049EA                 mov     rcx, fs:28h
.text:00000000000049F3                 mov     [rsp+48h+var_10], rcx
.text:00000000000049F8                 xor     ecx, ecx
.text:00000000000049FA                 cmp     esi, 0Ah
.text:00000000000049FD                 jz      short loc_4A60
.text:00000000000049FF                 mov     [rsp+48h+var_48], esi
.text:0000000000004A02                 mov     rcx, rsp
.text:0000000000004A05                 mov     rsi, rax
.text:0000000000004A08                 mov     [rsp+48h+var_44], 0
.text:0000000000004A11                 mov     [rsp+48h+var_3C], 0
.text:0000000000004A1A                 mov     [rsp+48h+var_34], 0
.text:0000000000004A23                 mov     [rsp+48h+var_2C], 0
.text:0000000000004A2C                 mov     [rsp+48h+var_24], 0
.text:0000000000004A35                 mov     [rsp+48h+var_1C], 0
.text:0000000000004A3E                 mov     [rsp+48h+var_14], 0
.text:0000000000004A46                 call    quotearg_n_options
.text:0000000000004A4B                 mov     rdx, [rsp+48h+var_10]
.text:0000000000004A50                 xor     rdx, fs:28h
.text:0000000000004A59                 jnz     short loc_4A65
.text:0000000000004A5B                 add     rsp, 48h
.text:0000000000004A5F                 retn
.text:0000000000004A60 ; ---------------------------------------------------------------------------
.text:0000000000004A60
.text:0000000000004A60 loc_4A60:                               ; CODE XREF: quotearg_n_style_mem+1D↑j
.text:0000000000004A60                 call    _abort
.text:0000000000004A65 ; ---------------------------------------------------------------------------
.text:0000000000004A65
.text:0000000000004A65 loc_4A65:                               ; CODE XREF: quotearg_n_style_mem+79↑j
.text:0000000000004A65                 call    ___stack_chk_fail
.text:0000000000004A65 ; } // starts at 49E0
.text:0000000000004A65 quotearg_n_style_mem endp
.text:0000000000004A65
.text:0000000000004A65 ; ---------------------------------------------------------------------------
.text:0000000000004A6A                 align 10h
.text:0000000000004A70
.text:0000000000004A70 ; =============== S U B R O U T I N E =======================================
.text:0000000000004A70
.text:0000000000004A70
.text:0000000000004A70                 public quotearg_style
.text:0000000000004A70 quotearg_style  proc near
.text:0000000000004A70 ; __unwind {
.text:0000000000004A70                 mov     rdx, rsi
.text:0000000000004A73                 mov     esi, edi
.text:0000000000004A75                 xor     edi, edi
.text:0000000000004A77                 jmp     quotearg_n_style
.text:0000000000004A77 ; } // starts at 4A70
.text:0000000000004A77 quotearg_style  endp
.text:0000000000004A77
.text:0000000000004A77 ; ---------------------------------------------------------------------------
.text:0000000000004A7C                 align 20h
.text:0000000000004A80
.text:0000000000004A80 ; =============== S U B R O U T I N E =======================================
.text:0000000000004A80
.text:0000000000004A80
.text:0000000000004A80                 public quotearg_style_mem
.text:0000000000004A80 quotearg_style_mem proc near
.text:0000000000004A80 ; __unwind {
.text:0000000000004A80                 mov     rcx, rdx
.text:0000000000004A83                 mov     rdx, rsi
.text:0000000000004A86                 mov     esi, edi
.text:0000000000004A88                 xor     edi, edi
.text:0000000000004A8A                 jmp     quotearg_n_style_mem
.text:0000000000004A8A ; } // starts at 4A80
.text:0000000000004A8A quotearg_style_mem endp
.text:0000000000004A8A
.text:0000000000004A8A ; ---------------------------------------------------------------------------
.text:0000000000004A8F                 align 10h
.text:0000000000004A90
.text:0000000000004A90 ; =============== S U B R O U T I N E =======================================
.text:0000000000004A90
.text:0000000000004A90 ; Attributes: info_from_lumina
.text:0000000000004A90
.text:0000000000004A90 ; char *__fastcall quotearg_char_mem(const char *arg, size_t argsize, char ch_0)
.text:0000000000004A90                 public quotearg_char_mem
.text:0000000000004A90 quotearg_char_mem proc near             ; CODE XREF: quotearg_char+B↓j
.text:0000000000004A90                                         ; quotearg_colon+C↓j ...
.text:0000000000004A90
.text:0000000000004A90 var_48          = xmmword ptr -48h
.text:0000000000004A90 var_38          = xmmword ptr -38h
.text:0000000000004A90 var_28          = xmmword ptr -28h
.text:0000000000004A90 var_18          = qword ptr -18h
.text:0000000000004A90 var_10          = qword ptr -10h
.text:0000000000004A90
.text:0000000000004A90 ; __unwind {
.text:0000000000004A90                 sub     rsp, 48h
.text:0000000000004A94                 mov     ecx, edx
.text:0000000000004A96                 mov     rax, fs:28h
.text:0000000000004A9F                 mov     [rsp+48h+var_10], rax
.text:0000000000004AA4                 xor     eax, eax
.text:0000000000004AA6                 mov     rax, cs:qword_2196D0
.text:0000000000004AAD                 mov     r8, rsp
.text:0000000000004AB0                 and     ecx, 1Fh
.text:0000000000004AB3                 movdqa  xmm0, cs:default_quoting_options
.text:0000000000004ABB                 mov     [rsp+48h+var_18], rax
.text:0000000000004AC0                 mov     eax, edx
.text:0000000000004AC2                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000004AC6                 shr     al, 5
.text:0000000000004AC9                 movzx   eax, al
.text:0000000000004ACC                 lea     r9, [r8+rax*4+8]
.text:0000000000004AD1                 movdqa  xmm0, cs:xmmword_2196B0
.text:0000000000004AD9                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000004ADE                 movdqa  xmm0, cs:xmmword_2196C0
.text:0000000000004AE6                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000004AEB                 mov     edx, [r9]
.text:0000000000004AEE                 mov     eax, edx
.text:0000000000004AF0                 shr     eax, cl
.text:0000000000004AF2                 not     eax
.text:0000000000004AF4                 and     eax, 1
.text:0000000000004AF7                 shl     eax, cl
.text:0000000000004AF9                 mov     rcx, r8
.text:0000000000004AFC                 xor     eax, edx
.text:0000000000004AFE                 mov     rdx, rsi
.text:0000000000004B01                 mov     rsi, rdi
.text:0000000000004B04                 mov     [r9], eax
.text:0000000000004B07                 xor     edi, edi
.text:0000000000004B09                 call    quotearg_n_options
.text:0000000000004B0E                 mov     rsi, [rsp+48h+var_10]
.text:0000000000004B13                 xor     rsi, fs:28h
.text:0000000000004B1C                 jnz     short loc_4B23
.text:0000000000004B1E                 add     rsp, 48h
.text:0000000000004B22                 retn
.text:0000000000004B23 ; ---------------------------------------------------------------------------
.text:0000000000004B23
.text:0000000000004B23 loc_4B23:                               ; CODE XREF: quotearg_char_mem+8C↑j
.text:0000000000004B23                 call    ___stack_chk_fail
.text:0000000000004B23 ; } // starts at 4A90
.text:0000000000004B23 quotearg_char_mem endp
.text:0000000000004B23
.text:0000000000004B23 ; ---------------------------------------------------------------------------
.text:0000000000004B28                 align 10h
.text:0000000000004B30
.text:0000000000004B30 ; =============== S U B R O U T I N E =======================================
.text:0000000000004B30
.text:0000000000004B30
.text:0000000000004B30                 public quotearg_char
.text:0000000000004B30 quotearg_char   proc near
.text:0000000000004B30 ; __unwind {
.text:0000000000004B30                 movsx   edx, sil
.text:0000000000004B34                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:0000000000004B3B                 jmp     quotearg_char_mem
.text:0000000000004B3B ; } // starts at 4B30
.text:0000000000004B3B quotearg_char   endp
.text:0000000000004B3B
.text:0000000000004B40
.text:0000000000004B40 ; =============== S U B R O U T I N E =======================================
.text:0000000000004B40
.text:0000000000004B40
.text:0000000000004B40                 public quotearg_colon
.text:0000000000004B40 quotearg_colon  proc near               ; CODE XREF: close_stdout+65↑p
.text:0000000000004B40 ; __unwind {
.text:0000000000004B40                 mov     edx, 3Ah ; ':'
.text:0000000000004B45                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:0000000000004B4C                 jmp     quotearg_char_mem
.text:0000000000004B4C ; } // starts at 4B40
.text:0000000000004B4C quotearg_colon  endp
.text:0000000000004B4C
.text:0000000000004B4C ; ---------------------------------------------------------------------------
.text:0000000000004B51                 align 20h
.text:0000000000004B60
.text:0000000000004B60 ; =============== S U B R O U T I N E =======================================
.text:0000000000004B60
.text:0000000000004B60
.text:0000000000004B60                 public quotearg_colon_mem
.text:0000000000004B60 quotearg_colon_mem proc near
.text:0000000000004B60 ; __unwind {
.text:0000000000004B60                 mov     edx, 3Ah ; ':'
.text:0000000000004B65                 jmp     quotearg_char_mem
.text:0000000000004B65 ; } // starts at 4B60
.text:0000000000004B65 quotearg_colon_mem endp
.text:0000000000004B65
.text:0000000000004B65 ; ---------------------------------------------------------------------------
.text:0000000000004B6A                 align 10h
.text:0000000000004B70
.text:0000000000004B70 ; =============== S U B R O U T I N E =======================================
.text:0000000000004B70
.text:0000000000004B70 ; Attributes: info_from_lumina
.text:0000000000004B70
.text:0000000000004B70 ; char *__fastcall quotearg_n_style_colon(int n, quoting_style s, const char *arg)
.text:0000000000004B70                 public quotearg_n_style_colon
.text:0000000000004B70 quotearg_n_style_colon proc near        ; CODE XREF: nl_file+3A9↑p
.text:0000000000004B70
.text:0000000000004B70 var_48          = dword ptr -48h
.text:0000000000004B70 var_44          = qword ptr -44h
.text:0000000000004B70 var_3C          = qword ptr -3Ch
.text:0000000000004B70 var_34          = qword ptr -34h
.text:0000000000004B70 var_2C          = qword ptr -2Ch
.text:0000000000004B70 var_24          = qword ptr -24h
.text:0000000000004B70 var_1C          = qword ptr -1Ch
.text:0000000000004B70 var_14          = dword ptr -14h
.text:0000000000004B70 var_10          = qword ptr -10h
.text:0000000000004B70
.text:0000000000004B70 ; __unwind {
.text:0000000000004B70                 sub     rsp, 48h
.text:0000000000004B74                 mov     rax, rdx
.text:0000000000004B77                 mov     rdx, fs:28h
.text:0000000000004B80                 mov     [rsp+48h+var_10], rdx
.text:0000000000004B85                 xor     edx, edx
.text:0000000000004B87                 cmp     esi, 0Ah
.text:0000000000004B8A                 jz      short loc_4BF4
.text:0000000000004B8C                 mov     [rsp+48h+var_48], esi
.text:0000000000004B8F                 mov     rcx, rsp
.text:0000000000004B92                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004B99                 mov     rsi, rax
.text:0000000000004B9C                 mov     [rsp+48h+var_44], 0
.text:0000000000004BA5                 mov     [rsp+48h+var_3C], 4000000h
.text:0000000000004BAE                 mov     [rsp+48h+var_34], 0
.text:0000000000004BB7                 mov     [rsp+48h+var_2C], 0
.text:0000000000004BC0                 mov     [rsp+48h+var_24], 0
.text:0000000000004BC9                 mov     [rsp+48h+var_1C], 0
.text:0000000000004BD2                 mov     [rsp+48h+var_14], 0
.text:0000000000004BDA                 call    quotearg_n_options
.text:0000000000004BDF                 mov     rcx, [rsp+48h+var_10]
.text:0000000000004BE4                 xor     rcx, fs:28h
.text:0000000000004BED                 jnz     short loc_4BF9
.text:0000000000004BEF                 add     rsp, 48h
.text:0000000000004BF3                 retn
.text:0000000000004BF4 ; ---------------------------------------------------------------------------
.text:0000000000004BF4
.text:0000000000004BF4 loc_4BF4:                               ; CODE XREF: quotearg_n_style_colon+1A↑j
.text:0000000000004BF4                 call    _abort
.text:0000000000004BF9 ; ---------------------------------------------------------------------------
.text:0000000000004BF9
.text:0000000000004BF9 loc_4BF9:                               ; CODE XREF: quotearg_n_style_colon+7D↑j
.text:0000000000004BF9                 call    ___stack_chk_fail
.text:0000000000004BF9 ; } // starts at 4B70
.text:0000000000004BF9 quotearg_n_style_colon endp
.text:0000000000004BF9
.text:0000000000004BF9 ; ---------------------------------------------------------------------------
.text:0000000000004BFE                 align 20h
.text:0000000000004C00
.text:0000000000004C00 ; =============== S U B R O U T I N E =======================================
.text:0000000000004C00
.text:0000000000004C00 ; Attributes: info_from_lumina
.text:0000000000004C00
.text:0000000000004C00 ; char *__fastcall quotearg_n_custom_mem(int n, const char *left_quote, const char *right_quote, const char *arg, size_t argsize)
.text:0000000000004C00                 public quotearg_n_custom_mem
.text:0000000000004C00 quotearg_n_custom_mem proc near         ; CODE XREF: quotearg_n_custom+7↓j
.text:0000000000004C00                                         ; quotearg_custom+12↓j ...
.text:0000000000004C00
.text:0000000000004C00 var_48          = xmmword ptr -48h
.text:0000000000004C00 var_38          = xmmword ptr -38h
.text:0000000000004C00 var_28          = xmmword ptr -28h
.text:0000000000004C00 var_18          = qword ptr -18h
.text:0000000000004C00 var_10          = qword ptr -10h
.text:0000000000004C00
.text:0000000000004C00 ; __unwind {
.text:0000000000004C00                 sub     rsp, 48h
.text:0000000000004C04                 mov     r9, rcx
.text:0000000000004C07                 mov     rcx, cs:qword_2196D0
.text:0000000000004C0E                 movdqa  xmm0, cs:default_quoting_options
.text:0000000000004C16                 mov     rax, fs:28h
.text:0000000000004C1F                 mov     [rsp+48h+var_10], rax
.text:0000000000004C24                 xor     eax, eax
.text:0000000000004C26                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000004C2A                 test    rsi, rsi
.text:0000000000004C2D                 mov     [rsp+48h+var_18], rcx
.text:0000000000004C32                 mov     dword ptr [rsp+48h+var_48], 0Ah
.text:0000000000004C39                 movdqa  xmm0, cs:xmmword_2196B0
.text:0000000000004C41                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000004C46                 movdqa  xmm0, cs:xmmword_2196C0
.text:0000000000004C4E                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000004C53                 jz      short loc_4C87
.text:0000000000004C55                 test    rdx, rdx
.text:0000000000004C58                 jz      short loc_4C87
.text:0000000000004C5A                 mov     qword ptr [rsp+48h+var_28+8], rsi
.text:0000000000004C5F                 mov     [rsp+48h+var_18], rdx
.text:0000000000004C64                 mov     rcx, rsp
.text:0000000000004C67                 mov     rdx, r8
.text:0000000000004C6A                 mov     rsi, r9
.text:0000000000004C6D                 call    quotearg_n_options
.text:0000000000004C72                 mov     rdi, [rsp+48h+var_10]
.text:0000000000004C77                 xor     rdi, fs:28h
.text:0000000000004C80                 jnz     short loc_4C8C
.text:0000000000004C82                 add     rsp, 48h
.text:0000000000004C86                 retn
.text:0000000000004C87 ; ---------------------------------------------------------------------------
.text:0000000000004C87
.text:0000000000004C87 loc_4C87:                               ; CODE XREF: quotearg_n_custom_mem+53↑j
.text:0000000000004C87                                         ; quotearg_n_custom_mem+58↑j
.text:0000000000004C87                 call    _abort
.text:0000000000004C8C ; ---------------------------------------------------------------------------
.text:0000000000004C8C
.text:0000000000004C8C loc_4C8C:                               ; CODE XREF: quotearg_n_custom_mem+80↑j
.text:0000000000004C8C                 call    ___stack_chk_fail
.text:0000000000004C8C ; } // starts at 4C00
.text:0000000000004C8C quotearg_n_custom_mem endp
.text:0000000000004C8C
.text:0000000000004C8C ; ---------------------------------------------------------------------------
.text:0000000000004C91                 align 20h
.text:0000000000004CA0
.text:0000000000004CA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004CA0
.text:0000000000004CA0
.text:0000000000004CA0                 public quotearg_n_custom
.text:0000000000004CA0 quotearg_n_custom proc near
.text:0000000000004CA0 ; __unwind {
.text:0000000000004CA0                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000004CA7                 jmp     quotearg_n_custom_mem
.text:0000000000004CA7 ; } // starts at 4CA0
.text:0000000000004CA7 quotearg_n_custom endp
.text:0000000000004CA7
.text:0000000000004CA7 ; ---------------------------------------------------------------------------
.text:0000000000004CAC                 align 10h
.text:0000000000004CB0
.text:0000000000004CB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004CB0
.text:0000000000004CB0
.text:0000000000004CB0                 public quotearg_custom
.text:0000000000004CB0 quotearg_custom proc near
.text:0000000000004CB0 ; __unwind {
.text:0000000000004CB0                 mov     rcx, rdx
.text:0000000000004CB3                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000004CBA                 mov     rdx, rsi
.text:0000000000004CBD                 mov     rsi, rdi
.text:0000000000004CC0                 xor     edi, edi
.text:0000000000004CC2                 jmp     quotearg_n_custom_mem
.text:0000000000004CC2 ; } // starts at 4CB0
.text:0000000000004CC2 quotearg_custom endp
.text:0000000000004CC2
.text:0000000000004CC2 ; ---------------------------------------------------------------------------
.text:0000000000004CC7                 align 10h
.text:0000000000004CD0
.text:0000000000004CD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004CD0
.text:0000000000004CD0
.text:0000000000004CD0                 public quotearg_custom_mem
.text:0000000000004CD0 quotearg_custom_mem proc near
.text:0000000000004CD0 ; __unwind {
.text:0000000000004CD0                 mov     r8, rcx
.text:0000000000004CD3                 mov     rcx, rdx
.text:0000000000004CD6                 mov     rdx, rsi
.text:0000000000004CD9                 mov     rsi, rdi
.text:0000000000004CDC                 xor     edi, edi
.text:0000000000004CDE                 jmp     quotearg_n_custom_mem
.text:0000000000004CDE ; } // starts at 4CD0
.text:0000000000004CDE quotearg_custom_mem endp
.text:0000000000004CDE
.text:0000000000004CDE ; ---------------------------------------------------------------------------
.text:0000000000004CE3                 align 10h
.text:0000000000004CF0
.text:0000000000004CF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004CF0
.text:0000000000004CF0
.text:0000000000004CF0                 public quote_n_mem
.text:0000000000004CF0 quote_n_mem     proc near
.text:0000000000004CF0 ; __unwind {
.text:0000000000004CF0                 lea     rcx, quote_quoting_options
.text:0000000000004CF7                 jmp     quotearg_n_options
.text:0000000000004CF7 ; } // starts at 4CF0
.text:0000000000004CF7 quote_n_mem     endp
.text:0000000000004CF7
.text:0000000000004CF7 ; ---------------------------------------------------------------------------
.text:0000000000004CFC                 align 20h
.text:0000000000004D00
.text:0000000000004D00 ; =============== S U B R O U T I N E =======================================
.text:0000000000004D00
.text:0000000000004D00
.text:0000000000004D00                 public quote_mem
.text:0000000000004D00 quote_mem       proc near
.text:0000000000004D00 ; __unwind {
.text:0000000000004D00                 lea     rcx, quote_quoting_options
.text:0000000000004D07                 mov     rdx, rsi
.text:0000000000004D0A                 mov     rsi, rdi
.text:0000000000004D0D                 xor     edi, edi
.text:0000000000004D0F                 jmp     quotearg_n_options
.text:0000000000004D0F ; } // starts at 4D00
.text:0000000000004D0F quote_mem       endp
.text:0000000000004D0F
.text:0000000000004D0F ; ---------------------------------------------------------------------------
.text:0000000000004D14                 align 20h
.text:0000000000004D20
.text:0000000000004D20 ; =============== S U B R O U T I N E =======================================
.text:0000000000004D20
.text:0000000000004D20
.text:0000000000004D20                 public quote_n
.text:0000000000004D20 quote_n         proc near
.text:0000000000004D20 ; __unwind {
.text:0000000000004D20                 lea     rcx, quote_quoting_options
.text:0000000000004D27                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004D2E                 jmp     quotearg_n_options
.text:0000000000004D2E ; } // starts at 4D20
.text:0000000000004D2E quote_n         endp
.text:0000000000004D2E
.text:0000000000004D2E ; ---------------------------------------------------------------------------
.text:0000000000004D33                 align 20h
.text:0000000000004D40
.text:0000000000004D40 ; =============== S U B R O U T I N E =======================================
.text:0000000000004D40
.text:0000000000004D40
.text:0000000000004D40                 public quote
.text:0000000000004D40 quote           proc near               ; CODE XREF: main+1E9↑p
.text:0000000000004D40                                         ; main+231↑p ...
.text:0000000000004D40 ; __unwind {
.text:0000000000004D40                 lea     rcx, quote_quoting_options
.text:0000000000004D47                 mov     rsi, rdi
.text:0000000000004D4A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004D51                 xor     edi, edi
.text:0000000000004D53                 jmp     quotearg_n_options
.text:0000000000004D53 ; } // starts at 4D40
.text:0000000000004D53 quote           endp
.text:0000000000004D53
.text:0000000000004D53 ; ---------------------------------------------------------------------------
.text:0000000000004D58                 align 20h
.text:0000000000004D60
.text:0000000000004D60 ; =============== S U B R O U T I N E =======================================
.text:0000000000004D60
.text:0000000000004D60
.text:0000000000004D60 ; __int64 __fastcall version_etc_arn(FILE *stream)
.text:0000000000004D60                 public version_etc_arn
.text:0000000000004D60 version_etc_arn proc near               ; CODE XREF: version_etc_ar:loc_519B↓j
.text:0000000000004D60                                         ; version_etc_va:loc_51EB↓p ...
.text:0000000000004D60
.text:0000000000004D60 var_58          = qword ptr -58h
.text:0000000000004D60 var_50          = qword ptr -50h
.text:0000000000004D60 var_48          = qword ptr -48h
.text:0000000000004D60 var_40          = qword ptr -40h
.text:0000000000004D60
.text:0000000000004D60 ; __unwind {
.text:0000000000004D60                 push    r15
.text:0000000000004D62                 push    r14
.text:0000000000004D64                 push    r13
.text:0000000000004D66                 push    r12
.text:0000000000004D68                 mov     r12, r9
.text:0000000000004D6B                 push    rbp
.text:0000000000004D6C                 push    rbx
.text:0000000000004D6D                 mov     rbp, rdi
.text:0000000000004D70                 mov     rbx, r8
.text:0000000000004D73                 sub     rsp, 28h
.text:0000000000004D77                 test    rsi, rsi
.text:0000000000004D7A                 jz      loc_4E98
.text:0000000000004D80                 mov     r8, rdx
.text:0000000000004D83                 lea     rdx, aSSS       ; "%s (%s) %s\n"
.text:0000000000004D8A                 mov     r9, rcx
.text:0000000000004D8D                 xor     eax, eax
.text:0000000000004D8F                 mov     rcx, rsi
.text:0000000000004D92                 mov     esi, 1
.text:0000000000004D97                 call    ___fprintf_chk
.text:0000000000004D9C
.text:0000000000004D9C loc_4D9C:                               ; CODE XREF: version_etc_arn+151↓j
.text:0000000000004D9C                 lea     rsi, aC         ; "(C)"
.text:0000000000004DA3                 xor     edi, edi        ; domainname
.text:0000000000004DA5                 mov     edx, 5          ; category
.text:0000000000004DAA                 call    _dcgettext
.text:0000000000004DAF                 lea     rdx, version_etc_copyright ; "Copyright %s %d Free Software Foundatio"...
.text:0000000000004DB6                 mov     rcx, rax
.text:0000000000004DB9                 mov     r8d, 7E3h
.text:0000000000004DBF                 mov     esi, 1
.text:0000000000004DC4                 mov     rdi, rbp
.text:0000000000004DC7                 xor     eax, eax
.text:0000000000004DC9                 call    ___fprintf_chk
.text:0000000000004DCE                 lea     rsi, aLicenseGplv3Gn ; "\nLicense GPLv3+: GNU GPL version 3 or "...
.text:0000000000004DD5                 xor     edi, edi        ; domainname
.text:0000000000004DD7                 mov     edx, 5          ; category
.text:0000000000004DDC                 call    _dcgettext
.text:0000000000004DE1                 mov     rsi, rbp        ; stream
.text:0000000000004DE4                 mov     rdi, rax        ; s
.text:0000000000004DE7                 call    _fputs_unlocked
.text:0000000000004DEC                 cmp     r12, 9          ; switch 10 cases
.text:0000000000004DF0                 ja      def_4E04        ; jumptable 0000000000004E04 default case
.text:0000000000004DF6                 lea     rdx, jpt_4E04
.text:0000000000004DFD                 movsxd  rax, ds:(jpt_4E04 - 15684h)[rdx+r12*4]
.text:0000000000004E01                 add     rax, rdx
.text:0000000000004E04                 jmp     rax             ; switch jump
.text:0000000000004E04 ; ---------------------------------------------------------------------------
.text:0000000000004E06                 align 10h
.text:0000000000004E10
.text:0000000000004E10 loc_4E10:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004E10                                         ; DATA XREF: .rodata:jpt_4E04↓o
.text:0000000000004E10                 mov     r9, [rbx+38h]   ; jumptable 0000000000004E04 case 8
.text:0000000000004E14                 mov     rax, [rbx+10h]
.text:0000000000004E18                 lea     rsi, aWrittenBySSSSS ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000004E1F                 mov     r8, [rbx+8]
.text:0000000000004E23                 mov     edx, 5          ; category
.text:0000000000004E28                 xor     edi, edi        ; domainname
.text:0000000000004E2A                 mov     r13, [rbx+30h]
.text:0000000000004E2E                 mov     r12, [rbx+28h]
.text:0000000000004E32                 mov     [rsp+58h+var_48], r9
.text:0000000000004E37                 mov     r15, [rbx+20h]
.text:0000000000004E3B                 mov     r14, [rbx+18h]
.text:0000000000004E3F                 mov     [rsp+58h+var_58], rax
.text:0000000000004E43                 mov     [rsp+58h+var_50], r8
.text:0000000000004E48                 mov     rbx, [rbx]
.text:0000000000004E4B                 call    _dcgettext
.text:0000000000004E50                 sub     rsp, 8
.text:0000000000004E54
.text:0000000000004E54 loc_4E54:                               ; CODE XREF: version_etc_arn+1B0↓j
.text:0000000000004E54                 mov     r9, [rsp+60h+var_48]
.text:0000000000004E59                 mov     rdx, rax
.text:0000000000004E5C                 mov     rcx, rbx
.text:0000000000004E5F                 mov     esi, 1
.text:0000000000004E64                 mov     rdi, rbp
.text:0000000000004E67                 xor     eax, eax
.text:0000000000004E69                 push    r9
.text:0000000000004E6B                 push    r13
.text:0000000000004E6D                 push    r12
.text:0000000000004E6F                 push    r15
.text:0000000000004E71                 push    r14
.text:0000000000004E73                 mov     r9, [rsp+88h+var_58]
.text:0000000000004E78                 mov     r8, [rsp+88h+var_50]
.text:0000000000004E7D                 call    ___fprintf_chk
.text:0000000000004E82                 add     rsp, 30h
.text:0000000000004E86
.text:0000000000004E86 loc_4E86:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004E86                                         ; DATA XREF: .rodata:jpt_4E04↓o
.text:0000000000004E86                 add     rsp, 28h        ; jumptable 0000000000004E04 case 0
.text:0000000000004E8A                 pop     rbx
.text:0000000000004E8B                 pop     rbp
.text:0000000000004E8C                 pop     r12
.text:0000000000004E8E                 pop     r13
.text:0000000000004E90                 pop     r14
.text:0000000000004E92                 pop     r15
.text:0000000000004E94                 retn
.text:0000000000004E94 ; ---------------------------------------------------------------------------
.text:0000000000004E95                 align 8
.text:0000000000004E98
.text:0000000000004E98 loc_4E98:                               ; CODE XREF: version_etc_arn+1A↑j
.text:0000000000004E98                 mov     r8, rcx
.text:0000000000004E9B                 mov     rcx, rdx
.text:0000000000004E9E                 lea     rdx, aSS        ; "%s %s\n"
.text:0000000000004EA5                 mov     esi, 1
.text:0000000000004EAA                 xor     eax, eax
.text:0000000000004EAC                 call    ___fprintf_chk
.text:0000000000004EB1                 jmp     loc_4D9C
.text:0000000000004EB1 ; ---------------------------------------------------------------------------
.text:0000000000004EB6                 align 20h
.text:0000000000004EC0
.text:0000000000004EC0 loc_4EC0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004EC0                                         ; DATA XREF: .rodata:jpt_4E04↓o
.text:0000000000004EC0                 mov     r10, [rbx+40h]  ; jumptable 0000000000004E04 case 9
.text:0000000000004EC4                 mov     r9, [rbx+38h]
.text:0000000000004EC8                 lea     rsi, aWrittenBySSSSS_0 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000004ECF                 mov     rax, [rbx+10h]
.text:0000000000004ED3                 mov     r8, [rbx+8]
.text:0000000000004ED7                 mov     edx, 5          ; category
.text:0000000000004EDC                 mov     r13, [rbx+30h]
.text:0000000000004EE0                 mov     r12, [rbx+28h]
.text:0000000000004EE4                 mov     r15, [rbx+20h]
.text:0000000000004EE8                 mov     r14, [rbx+18h]
.text:0000000000004EEC                 mov     rbx, [rbx]
.text:0000000000004EEF                 mov     [rsp+58h+var_40], r10
.text:0000000000004EF4                 mov     [rsp+58h+var_48], r9
.text:0000000000004EF9                 mov     [rsp+58h+var_58], rax
.text:0000000000004EFD                 mov     [rsp+58h+var_50], r8
.text:0000000000004F02
.text:0000000000004F02 loc_4F02:                               ; CODE XREF: version_etc_arn+412↓j
.text:0000000000004F02                 xor     edi, edi        ; domainname
.text:0000000000004F04                 call    _dcgettext
.text:0000000000004F09                 mov     r10, [rsp+58h+var_40]
.text:0000000000004F0E                 push    r10
.text:0000000000004F10                 jmp     loc_4E54
.text:0000000000004F10 ; ---------------------------------------------------------------------------
.text:0000000000004F15                 align 8
.text:0000000000004F18
.text:0000000000004F18 loc_4F18:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004F18                                         ; DATA XREF: .rodata:jpt_4E04↓o
.text:0000000000004F18                 mov     rbx, [rbx]      ; jumptable 0000000000004E04 case 1
.text:0000000000004F1B                 lea     rsi, aWrittenByS ; "Written by %s.\n"
.text:0000000000004F22                 mov     edx, 5          ; category
.text:0000000000004F27                 xor     edi, edi        ; domainname
.text:0000000000004F29                 call    _dcgettext
.text:0000000000004F2E                 add     rsp, 28h
.text:0000000000004F32                 mov     rcx, rbx
.text:0000000000004F35                 mov     rdi, rbp
.text:0000000000004F38                 pop     rbx
.text:0000000000004F39                 pop     rbp
.text:0000000000004F3A                 pop     r12
.text:0000000000004F3C                 pop     r13
.text:0000000000004F3E                 pop     r14
.text:0000000000004F40                 pop     r15
.text:0000000000004F42                 mov     rdx, rax
.text:0000000000004F45                 mov     esi, 1
.text:0000000000004F4A                 xor     eax, eax
.text:0000000000004F4C                 jmp     ___fprintf_chk
.text:0000000000004F4C ; ---------------------------------------------------------------------------
.text:0000000000004F51                 align 8
.text:0000000000004F58
.text:0000000000004F58 loc_4F58:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004F58                                         ; DATA XREF: .rodata:jpt_4E04↓o
.text:0000000000004F58                 mov     r12, [rbx+8]    ; jumptable 0000000000004E04 case 2
.text:0000000000004F5C                 lea     rsi, aWrittenBySAndS ; "Written by %s and %s.\n"
.text:0000000000004F63                 mov     rbx, [rbx]
.text:0000000000004F66                 mov     edx, 5          ; category
.text:0000000000004F6B                 xor     edi, edi        ; domainname
.text:0000000000004F6D                 call    _dcgettext
.text:0000000000004F72                 add     rsp, 28h
.text:0000000000004F76                 mov     r8, r12
.text:0000000000004F79                 mov     rcx, rbx
.text:0000000000004F7C                 mov     rdi, rbp
.text:0000000000004F7F                 mov     rdx, rax
.text:0000000000004F82                 mov     esi, 1
.text:0000000000004F87                 pop     rbx
.text:0000000000004F88                 pop     rbp
.text:0000000000004F89                 pop     r12
.text:0000000000004F8B                 pop     r13
.text:0000000000004F8D                 pop     r14
.text:0000000000004F8F                 pop     r15
.text:0000000000004F91                 xor     eax, eax
.text:0000000000004F93                 jmp     ___fprintf_chk
.text:0000000000004F93 ; ---------------------------------------------------------------------------
.text:0000000000004F98                 align 20h
.text:0000000000004FA0
.text:0000000000004FA0 loc_4FA0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004FA0                                         ; DATA XREF: .rodata:jpt_4E04↓o
.text:0000000000004FA0                 mov     r13, [rbx+10h]  ; jumptable 0000000000004E04 case 3
.text:0000000000004FA4                 mov     r12, [rbx+8]
.text:0000000000004FA8                 lea     rsi, aWrittenBySSAnd ; "Written by %s, %s, and %s.\n"
.text:0000000000004FAF                 mov     rbx, [rbx]
.text:0000000000004FB2                 mov     edx, 5          ; category
.text:0000000000004FB7                 xor     edi, edi        ; domainname
.text:0000000000004FB9                 call    _dcgettext
.text:0000000000004FBE                 add     rsp, 28h
.text:0000000000004FC2                 mov     r9, r13
.text:0000000000004FC5                 mov     r8, r12
.text:0000000000004FC8                 mov     rcx, rbx
.text:0000000000004FCB                 mov     rdi, rbp
.text:0000000000004FCE                 mov     rdx, rax
.text:0000000000004FD1                 pop     rbx
.text:0000000000004FD2                 pop     rbp
.text:0000000000004FD3                 pop     r12
.text:0000000000004FD5                 pop     r13
.text:0000000000004FD7                 pop     r14
.text:0000000000004FD9                 pop     r15
.text:0000000000004FDB                 mov     esi, 1
.text:0000000000004FE0                 xor     eax, eax
.text:0000000000004FE2                 jmp     ___fprintf_chk
.text:0000000000004FE2 ; ---------------------------------------------------------------------------
.text:0000000000004FE7                 align 10h
.text:0000000000004FF0
.text:0000000000004FF0 loc_4FF0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004FF0                                         ; DATA XREF: .rodata:jpt_4E04↓o
.text:0000000000004FF0                 lea     rsi, aWrittenBySSSAn ; jumptable 0000000000004E04 case 4
.text:0000000000004FF7                 mov     edx, 5          ; category
.text:0000000000004FFC                 xor     edi, edi        ; domainname
.text:0000000000004FFE                 mov     r14, [rbx+18h]
.text:0000000000005002                 mov     r13, [rbx+10h]
.text:0000000000005006                 mov     r12, [rbx+8]
.text:000000000000500A                 mov     rbx, [rbx]
.text:000000000000500D                 call    _dcgettext
.text:0000000000005012                 sub     rsp, 8
.text:0000000000005016
.text:0000000000005016 loc_5016:                               ; CODE XREF: version_etc_arn+310↓j
.text:0000000000005016                 push    r14
.text:0000000000005018                 mov     rdx, rax
.text:000000000000501B                 mov     r9, r13
.text:000000000000501E                 mov     r8, r12
.text:0000000000005021                 mov     rcx, rbx
.text:0000000000005024                 mov     rdi, rbp
.text:0000000000005027                 mov     esi, 1
.text:000000000000502C                 xor     eax, eax
.text:000000000000502E                 call    ___fprintf_chk
.text:0000000000005033                 pop     rax
.text:0000000000005034                 pop     rdx
.text:0000000000005035                 add     rsp, 28h
.text:0000000000005039                 pop     rbx
.text:000000000000503A                 pop     rbp
.text:000000000000503B                 pop     r12
.text:000000000000503D                 pop     r13
.text:000000000000503F                 pop     r14
.text:0000000000005041                 pop     r15
.text:0000000000005043                 retn
.text:0000000000005043 ; ---------------------------------------------------------------------------
.text:0000000000005044                 align 8
.text:0000000000005048
.text:0000000000005048 loc_5048:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005048                                         ; DATA XREF: .rodata:jpt_4E04↓o
.text:0000000000005048                 mov     r15, [rbx+20h]  ; jumptable 0000000000004E04 case 5
.text:000000000000504C                 lea     rsi, aWrittenBySSSSA ; "Written by %s, %s, %s,\n%s, and %s.\n"
.text:0000000000005053                 mov     edx, 5          ; category
.text:0000000000005058                 xor     edi, edi        ; domainname
.text:000000000000505A                 mov     r14, [rbx+18h]
.text:000000000000505E                 mov     r13, [rbx+10h]
.text:0000000000005062                 mov     r12, [rbx+8]
.text:0000000000005066                 mov     rbx, [rbx]
.text:0000000000005069                 call    _dcgettext
.text:000000000000506E                 push    r15
.text:0000000000005070                 jmp     short loc_5016
.text:0000000000005070 ; ---------------------------------------------------------------------------
.text:0000000000005072                 align 8
.text:0000000000005078
.text:0000000000005078 loc_5078:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005078                                         ; DATA XREF: .rodata:jpt_4E04↓o
.text:0000000000005078                 mov     r8, [rbx+8]     ; jumptable 0000000000004E04 case 6
.text:000000000000507C                 mov     r12, [rbx+28h]
.text:0000000000005080                 lea     rsi, aWrittenBySSSSS_1 ; "Written by %s, %s, %s,\n%s, %s, and %s."...
.text:0000000000005087                 mov     r15, [rbx+20h]
.text:000000000000508B                 mov     r14, [rbx+18h]
.text:000000000000508F                 mov     edx, 5          ; category
.text:0000000000005094                 mov     r13, [rbx+10h]
.text:0000000000005098                 xor     edi, edi        ; domainname
.text:000000000000509A                 mov     rbx, [rbx]
.text:000000000000509D                 mov     [rsp+58h+var_58], r8
.text:00000000000050A1                 call    _dcgettext
.text:00000000000050A6                 sub     rsp, 8
.text:00000000000050AA                 mov     r9, r13
.text:00000000000050AD                 push    r12
.text:00000000000050AF                 push    r15
.text:00000000000050B1                 push    r14
.text:00000000000050B3
.text:00000000000050B3 loc_50B3:                               ; CODE XREF: version_etc_arn+3C4↓j
.text:00000000000050B3                 mov     r8, [rsp+78h+var_58]
.text:00000000000050B8                 mov     rcx, rbx
.text:00000000000050BB                 mov     rdx, rax
.text:00000000000050BE                 mov     rdi, rbp
.text:00000000000050C1                 mov     esi, 1
.text:00000000000050C6                 xor     eax, eax
.text:00000000000050C8                 call    ___fprintf_chk
.text:00000000000050CD                 add     rsp, 20h
.text:00000000000050D1                 add     rsp, 28h
.text:00000000000050D5                 pop     rbx
.text:00000000000050D6                 pop     rbp
.text:00000000000050D7                 pop     r12
.text:00000000000050D9                 pop     r13
.text:00000000000050DB                 pop     r14
.text:00000000000050DD                 pop     r15
.text:00000000000050DF                 retn
.text:00000000000050E0 ; ---------------------------------------------------------------------------
.text:00000000000050E0
.text:00000000000050E0 loc_50E0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000050E0                                         ; DATA XREF: .rodata:jpt_4E04↓o
.text:00000000000050E0                 mov     r9, [rbx+10h]   ; jumptable 0000000000004E04 case 7
.text:00000000000050E4                 mov     r13, [rbx+30h]
.text:00000000000050E8                 lea     rsi, aWrittenBySSSSS_2 ; "Written by %s, %s, %s,\n%s, %s, %s, and"...
.text:00000000000050EF                 mov     r12, [rbx+28h]
.text:00000000000050F3                 mov     r15, [rbx+20h]
.text:00000000000050F7                 mov     edx, 5          ; category
.text:00000000000050FC                 mov     r14, [rbx+18h]
.text:0000000000005100                 mov     r8, [rbx+8]
.text:0000000000005104                 xor     edi, edi        ; domainname
.text:0000000000005106                 mov     [rsp+58h+var_50], r9
.text:000000000000510B                 mov     rbx, [rbx]
.text:000000000000510E                 mov     [rsp+58h+var_58], r8
.text:0000000000005112                 call    _dcgettext
.text:0000000000005117                 push    r13
.text:0000000000005119                 push    r12
.text:000000000000511B                 push    r15
.text:000000000000511D                 push    r14
.text:000000000000511F                 mov     r9, [rsp+78h+var_50]
.text:0000000000005124                 jmp     short loc_50B3
.text:0000000000005124 ; ---------------------------------------------------------------------------
.text:0000000000005126                 align 10h
.text:0000000000005130
.text:0000000000005130 def_4E04:                               ; CODE XREF: version_etc_arn+90↑j
.text:0000000000005130                 mov     r10, [rbx+40h]  ; jumptable 0000000000004E04 default case
.text:0000000000005134                 mov     r9, [rbx+38h]
.text:0000000000005138                 mov     edx, 5
.text:000000000000513D                 mov     rax, [rbx+10h]
.text:0000000000005141                 mov     r8, [rbx+8]
.text:0000000000005145                 lea     rsi, aWrittenBySSSSS_3 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000514C                 mov     r13, [rbx+30h]
.text:0000000000005150                 mov     r12, [rbx+28h]
.text:0000000000005154                 mov     r15, [rbx+20h]
.text:0000000000005158                 mov     r14, [rbx+18h]
.text:000000000000515C                 mov     [rsp+58h+var_40], r10
.text:0000000000005161                 mov     [rsp+58h+var_48], r9
.text:0000000000005166                 mov     [rsp+58h+var_58], rax
.text:000000000000516A                 mov     [rsp+58h+var_50], r8
.text:000000000000516F                 mov     rbx, [rbx]
.text:0000000000005172                 jmp     loc_4F02
.text:0000000000005172 ; } // starts at 4D60
.text:0000000000005172 version_etc_arn endp
.text:0000000000005172
.text:0000000000005172 ; ---------------------------------------------------------------------------
.text:0000000000005177                 align 20h
.text:0000000000005180
.text:0000000000005180 ; =============== S U B R O U T I N E =======================================
.text:0000000000005180
.text:0000000000005180 ; Attributes: info_from_lumina
.text:0000000000005180
.text:0000000000005180 ; void __fastcall version_etc_ar(FILE *stream, const char *command_name, const char *package, const char *version, const char *const *authors)
.text:0000000000005180                 public version_etc_ar
.text:0000000000005180 version_etc_ar  proc near
.text:0000000000005180 ; __unwind {
.text:0000000000005180                 xor     r9d, r9d
.text:0000000000005183                 cmp     qword ptr [r8], 0
.text:0000000000005187                 jz      short loc_519B
.text:0000000000005189                 nop     dword ptr [rax+00000000h]
.text:0000000000005190
.text:0000000000005190 loc_5190:                               ; CODE XREF: version_etc_ar+19↓j
.text:0000000000005190                 add     r9, 1
.text:0000000000005194                 cmp     qword ptr [r8+r9*8], 0
.text:0000000000005199                 jnz     short loc_5190
.text:000000000000519B
.text:000000000000519B loc_519B:                               ; CODE XREF: version_etc_ar+7↑j
.text:000000000000519B                 jmp     version_etc_arn
.text:000000000000519B ; } // starts at 5180
.text:000000000000519B version_etc_ar  endp
.text:000000000000519B
.text:00000000000051A0
.text:00000000000051A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000051A0
.text:00000000000051A0 ; Attributes: info_from_lumina
.text:00000000000051A0
.text:00000000000051A0 ; void __fastcall version_etc_va(FILE *stream, const char *command_name, const char *package, const char *version, __va_list_tag *authors)
.text:00000000000051A0                 public version_etc_va
.text:00000000000051A0 version_etc_va  proc near
.text:00000000000051A0
.text:00000000000051A0 authtab         = qword ptr -68h
.text:00000000000051A0 var_10          = qword ptr -10h
.text:00000000000051A0
.text:00000000000051A0 ; __unwind {
.text:00000000000051A0                 sub     rsp, 68h
.text:00000000000051A4                 mov     r10, r8
.text:00000000000051A7                 xor     r9d, r9d
.text:00000000000051AA                 mov     rax, fs:28h
.text:00000000000051B3                 mov     [rsp+68h+var_10], rax
.text:00000000000051B8                 xor     eax, eax
.text:00000000000051BA                 mov     r8, rsp
.text:00000000000051BD                 nop     dword ptr [rax]
.text:00000000000051C0
.text:00000000000051C0 loc_51C0:                               ; CODE XREF: version_etc_va+49↓j
.text:00000000000051C0                 mov     eax, [r10]
.text:00000000000051C3                 cmp     eax, 2Fh ; '/'
.text:00000000000051C6                 ja      short loc_520A
.text:00000000000051C8                 mov     r11d, eax
.text:00000000000051CB                 add     r11, [r10+10h]
.text:00000000000051CF                 add     eax, 8
.text:00000000000051D2                 mov     [r10], eax
.text:00000000000051D5
.text:00000000000051D5 loc_51D5:                               ; CODE XREF: version_etc_va+76↓j
.text:00000000000051D5                 mov     rax, [r11]
.text:00000000000051D8                 test    rax, rax
.text:00000000000051DB                 mov     [r8+r9*8], rax
.text:00000000000051DF                 jz      short loc_51EB
.text:00000000000051E1                 add     r9, 1
.text:00000000000051E5                 cmp     r9, 0Ah
.text:00000000000051E9                 jnz     short loc_51C0
.text:00000000000051EB
.text:00000000000051EB loc_51EB:                               ; CODE XREF: version_etc_va+3F↑j
.text:00000000000051EB                 call    version_etc_arn
.text:00000000000051F0                 mov     rax, [rsp+68h+var_10]
.text:00000000000051F5                 xor     rax, fs:28h
.text:00000000000051FE                 jnz     short loc_5205
.text:0000000000005200                 add     rsp, 68h
.text:0000000000005204                 retn
.text:0000000000005205 ; ---------------------------------------------------------------------------
.text:0000000000005205
.text:0000000000005205 loc_5205:                               ; CODE XREF: version_etc_va+5E↑j
.text:0000000000005205                 call    ___stack_chk_fail
.text:000000000000520A ; ---------------------------------------------------------------------------
.text:000000000000520A
.text:000000000000520A loc_520A:                               ; CODE XREF: version_etc_va+26↑j
.text:000000000000520A                 mov     r11, [r10+8]
.text:000000000000520E                 lea     rax, [r11+8]
.text:0000000000005212                 mov     [r10+8], rax
.text:0000000000005216                 jmp     short loc_51D5
.text:0000000000005216 ; } // starts at 51A0
.text:0000000000005216 version_etc_va  endp
.text:0000000000005216
.text:0000000000005216 ; ---------------------------------------------------------------------------
.text:0000000000005218                 align 20h
.text:0000000000005220
.text:0000000000005220 ; =============== S U B R O U T I N E =======================================
.text:0000000000005220
.text:0000000000005220 ; Attributes: info_from_lumina
.text:0000000000005220
.text:0000000000005220 ; void version_etc(FILE *stream, const char *command_name, const char *package, const char *version, ...)
.text:0000000000005220                 public version_etc
.text:0000000000005220 version_etc     proc near               ; CODE XREF: main+19D↑p
.text:0000000000005220
.text:0000000000005220 var_C0          = dword ptr -0C0h
.text:0000000000005220 var_B8          = qword ptr -0B8h
.text:0000000000005220 var_B0          = qword ptr -0B0h
.text:0000000000005220 var_A8          = byte ptr -0A8h
.text:0000000000005220 var_50          = qword ptr -50h
.text:0000000000005220 var_48          = byte ptr -48h
.text:0000000000005220 var_28          = qword ptr -28h
.text:0000000000005220 var_20          = qword ptr -20h
.text:0000000000005220 arg_0           = byte ptr  8
.text:0000000000005220
.text:0000000000005220 ; __unwind {
.text:0000000000005220                 push    rbp
.text:0000000000005221                 push    rbx
.text:0000000000005222                 mov     r10d, 20h ; ' '
.text:0000000000005228                 xor     r11d, r11d
.text:000000000000522B                 sub     rsp, 0B8h
.text:0000000000005232                 mov     rax, fs:28h
.text:000000000000523B                 mov     [rsp+0C8h+var_50], rax
.text:0000000000005240                 xor     eax, eax
.text:0000000000005242                 lea     rax, [rsp+0C8h+arg_0]
.text:000000000000524A                 mov     [rsp+0C8h+var_28], r8
.text:0000000000005252                 lea     rbx, [rsp+0C8h+arg_0]
.text:000000000000525A                 lea     r8, [rsp+0C8h+var_A8]
.text:000000000000525F                 mov     [rsp+0C8h+var_20], r9
.text:0000000000005267                 mov     [rsp+0C8h+var_C0], 20h ; ' '
.text:000000000000526F                 mov     [rsp+0C8h+var_B8], rax
.text:0000000000005274                 lea     rax, [rsp+0C8h+var_48]
.text:000000000000527C                 xor     r9d, r9d
.text:000000000000527F                 mov     [rsp+0C8h+var_B0], rax
.text:0000000000005284                 mov     rbp, rax
.text:0000000000005287                 nop     word ptr [rax+rax+00000000h]
.text:0000000000005290
.text:0000000000005290 loc_5290:                               ; CODE XREF: version_etc+9A↓j
.text:0000000000005290                 cmp     r10d, 2Fh ; '/'
.text:0000000000005294                 ja      short loc_52EC
.text:0000000000005296                 mov     eax, r10d
.text:0000000000005299                 mov     r11d, 1
.text:000000000000529F                 add     r10d, 8
.text:00000000000052A3                 add     rax, rbp
.text:00000000000052A6
.text:00000000000052A6 loc_52A6:                               ; CODE XREF: version_etc+D3↓j
.text:00000000000052A6                 mov     rax, [rax]
.text:00000000000052A9                 test    rax, rax
.text:00000000000052AC                 mov     [r8+r9*8], rax
.text:00000000000052B0                 jz      short loc_52BC
.text:00000000000052B2                 add     r9, 1
.text:00000000000052B6                 cmp     r9, 0Ah
.text:00000000000052BA                 jnz     short loc_5290
.text:00000000000052BC
.text:00000000000052BC loc_52BC:                               ; CODE XREF: version_etc+90↑j
.text:00000000000052BC                 test    r11b, r11b
.text:00000000000052BF                 jnz     short loc_52E5
.text:00000000000052C1
.text:00000000000052C1 loc_52C1:                               ; CODE XREF: version_etc+CA↓j
.text:00000000000052C1                 call    version_etc_arn
.text:00000000000052C6                 mov     rax, [rsp+0C8h+var_50]
.text:00000000000052CB                 xor     rax, fs:28h
.text:00000000000052D4                 jnz     short loc_52E0
.text:00000000000052D6                 add     rsp, 0B8h
.text:00000000000052DD                 pop     rbx
.text:00000000000052DE                 pop     rbp
.text:00000000000052DF                 retn
.text:00000000000052E0 ; ---------------------------------------------------------------------------
.text:00000000000052E0
.text:00000000000052E0 loc_52E0:                               ; CODE XREF: version_etc+B4↑j
.text:00000000000052E0                 call    ___stack_chk_fail
.text:00000000000052E5 ; ---------------------------------------------------------------------------
.text:00000000000052E5
.text:00000000000052E5 loc_52E5:                               ; CODE XREF: version_etc+9F↑j
.text:00000000000052E5                 mov     [rsp+0C8h+var_C0], r10d
.text:00000000000052EA                 jmp     short loc_52C1
.text:00000000000052EC ; ---------------------------------------------------------------------------
.text:00000000000052EC
.text:00000000000052EC loc_52EC:                               ; CODE XREF: version_etc+74↑j
.text:00000000000052EC                 mov     rax, rbx
.text:00000000000052EF                 add     rbx, 8
.text:00000000000052F3                 jmp     short loc_52A6
.text:00000000000052F3 ; } // starts at 5220
.text:00000000000052F3 version_etc     endp
.text:00000000000052F3
.text:00000000000052F3 ; ---------------------------------------------------------------------------
.text:00000000000052F5                 align 20h
.text:0000000000005300
.text:0000000000005300 ; =============== S U B R O U T I N E =======================================
.text:0000000000005300
.text:0000000000005300 ; Attributes: info_from_lumina
.text:0000000000005300
.text:0000000000005300 ; void __cdecl emit_bug_reporting_address()
.text:0000000000005300                 public emit_bug_reporting_address
.text:0000000000005300 emit_bug_reporting_address proc near
.text:0000000000005300 ; __unwind {
.text:0000000000005300                 push    rbx
.text:0000000000005301                 lea     rsi, aReportBugsToS ; "\nReport bugs to: %s\n"
.text:0000000000005308                 mov     edx, 5          ; category
.text:000000000000530D                 xor     edi, edi        ; domainname
.text:000000000000530F                 call    _dcgettext
.text:0000000000005314                 lea     rdx, aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:000000000000531B                 mov     rsi, rax
.text:000000000000531E                 mov     edi, 1
.text:0000000000005323                 xor     eax, eax
.text:0000000000005325                 call    ___printf_chk
.text:000000000000532A                 lea     rsi, aSHomePageS ; "%s home page: <%s>\n"
.text:0000000000005331                 mov     edx, 5          ; category
.text:0000000000005336                 xor     edi, edi        ; domainname
.text:0000000000005338                 call    _dcgettext
.text:000000000000533D                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000005344                 lea     rdx, unk_14432
.text:000000000000534B                 mov     rsi, rax
.text:000000000000534E                 mov     edi, 1
.text:0000000000005353                 xor     eax, eax
.text:0000000000005355                 call    ___printf_chk
.text:000000000000535A                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000005361                 lea     rsi, aGeneralHelpUsi ; "General help using GNU software: <https"...
.text:0000000000005368                 xor     edi, edi        ; domainname
.text:000000000000536A                 mov     edx, 5          ; category
.text:000000000000536F                 call    _dcgettext
.text:0000000000005374                 mov     rsi, rbx        ; stream
.text:0000000000005377                 mov     rdi, rax        ; s
.text:000000000000537A                 pop     rbx
.text:000000000000537B                 jmp     _fputs_unlocked
.text:000000000000537B ; } // starts at 5300
.text:000000000000537B emit_bug_reporting_address endp
.text:000000000000537B
.text:0000000000005380
.text:0000000000005380 ; =============== S U B R O U T I N E =======================================
.text:0000000000005380
.text:0000000000005380
.text:0000000000005380                 public xmalloc
.text:0000000000005380 xmalloc         proc near               ; CODE XREF: main+47E↑p
.text:0000000000005380                                         ; main+4C1↑p ...
.text:0000000000005380 ; __unwind {
.text:0000000000005380                 push    rbx
.text:0000000000005381                 mov     rbx, rdi
.text:0000000000005384                 call    _malloc
.text:0000000000005389                 test    rax, rax
.text:000000000000538C                 jnz     short loc_5393
.text:000000000000538E                 test    rbx, rbx
.text:0000000000005391                 jnz     short loc_5395
.text:0000000000005393
.text:0000000000005393 loc_5393:                               ; CODE XREF: xmalloc+C↑j
.text:0000000000005393                 pop     rbx
.text:0000000000005394                 retn
.text:0000000000005395 ; ---------------------------------------------------------------------------
.text:0000000000005395
.text:0000000000005395 loc_5395:                               ; CODE XREF: xmalloc+11↑j
.text:0000000000005395                 call    xalloc_die
.text:0000000000005395 ; } // starts at 5380
.text:0000000000005395 xmalloc         endp
.text:0000000000005395
.text:0000000000005395 ; ---------------------------------------------------------------------------
.text:000000000000539A                 align 20h
.text:00000000000053A0
.text:00000000000053A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000053A0
.text:00000000000053A0 ; Attributes: info_from_lumina
.text:00000000000053A0
.text:00000000000053A0 ; void *__fastcall xnmalloc(size_t n, size_t s)
.text:00000000000053A0                 public xnmalloc
.text:00000000000053A0 xnmalloc        proc near
.text:00000000000053A0 ; __unwind {
.text:00000000000053A0                 mov     rax, rdi
.text:00000000000053A3                 mul     rsi
.text:00000000000053A6                 mov     rdi, rax
.text:00000000000053A9                 seto    al
.text:00000000000053AC                 test    rdi, rdi
.text:00000000000053AF                 js      short loc_53BB
.text:00000000000053B1                 movzx   eax, al
.text:00000000000053B4                 test    rax, rax
.text:00000000000053B7                 jnz     short loc_53BB
.text:00000000000053B9                 jmp     short xmalloc
.text:00000000000053BB ; ---------------------------------------------------------------------------
.text:00000000000053BB
.text:00000000000053BB loc_53BB:                               ; CODE XREF: xnmalloc+F↑j
.text:00000000000053BB                                         ; xnmalloc+17↑j
.text:00000000000053BB                 sub     rsp, 8
.text:00000000000053BF                 call    xalloc_die
.text:00000000000053BF ; } // starts at 53A0
.text:00000000000053BF xnmalloc        endp
.text:00000000000053BF
.text:00000000000053BF ; ---------------------------------------------------------------------------
.text:00000000000053C4                 align 10h
.text:00000000000053D0
.text:00000000000053D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000053D0
.text:00000000000053D0
.text:00000000000053D0                 public xcharalloc
.text:00000000000053D0 xcharalloc      proc near
.text:00000000000053D0 ; __unwind {
.text:00000000000053D0                 jmp     short xmalloc
.text:00000000000053D0 ; } // starts at 53D0
.text:00000000000053D0 xcharalloc      endp
.text:00000000000053D0
.text:00000000000053D0 ; ---------------------------------------------------------------------------
.text:00000000000053D2                 align 20h
.text:00000000000053E0
.text:00000000000053E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000053E0
.text:00000000000053E0 ; Attributes: info_from_lumina
.text:00000000000053E0
.text:00000000000053E0 ; void *__fastcall xrealloc(void *p, size_t n)
.text:00000000000053E0                 public xrealloc
.text:00000000000053E0 xrealloc        proc near               ; CODE XREF: quotearg_n_options+6E↑p
.text:00000000000053E0                                         ; quotearg_n_options+182↑p ...
.text:00000000000053E0 ; __unwind {
.text:00000000000053E0                 test    rsi, rsi
.text:00000000000053E3                 push    rbx
.text:00000000000053E4                 mov     rbx, rsi
.text:00000000000053E7                 jnz     short loc_53EE
.text:00000000000053E9                 test    rdi, rdi
.text:00000000000053EC                 jnz     short loc_5408
.text:00000000000053EE
.text:00000000000053EE loc_53EE:                               ; CODE XREF: xrealloc+7↑j
.text:00000000000053EE                 mov     rsi, rbx        ; size
.text:00000000000053F1                 call    _realloc
.text:00000000000053F6                 test    rax, rax
.text:00000000000053F9                 jnz     short loc_5400
.text:00000000000053FB                 test    rbx, rbx
.text:00000000000053FE                 jnz     short loc_5411
.text:0000000000005400
.text:0000000000005400 loc_5400:                               ; CODE XREF: xrealloc+19↑j
.text:0000000000005400                 pop     rbx
.text:0000000000005401                 retn
.text:0000000000005401 ; ---------------------------------------------------------------------------
.text:0000000000005402                 align 8
.text:0000000000005408
.text:0000000000005408 loc_5408:                               ; CODE XREF: xrealloc+C↑j
.text:0000000000005408                 call    _free
.text:000000000000540D                 xor     eax, eax
.text:000000000000540F                 pop     rbx
.text:0000000000005410                 retn
.text:0000000000005411 ; ---------------------------------------------------------------------------
.text:0000000000005411
.text:0000000000005411 loc_5411:                               ; CODE XREF: xrealloc+1E↑j
.text:0000000000005411                 call    xalloc_die
.text:0000000000005411 ; } // starts at 53E0
.text:0000000000005411 xrealloc        endp
.text:0000000000005411
.text:0000000000005411 ; ---------------------------------------------------------------------------
.text:0000000000005416                 align 20h
.text:0000000000005420
.text:0000000000005420 ; =============== S U B R O U T I N E =======================================
.text:0000000000005420
.text:0000000000005420 ; Attributes: info_from_lumina
.text:0000000000005420
.text:0000000000005420 ; void *__fastcall xnrealloc(void *p, size_t n, size_t s)
.text:0000000000005420                 public xnrealloc
.text:0000000000005420 xnrealloc       proc near
.text:0000000000005420 ; __unwind {
.text:0000000000005420                 mov     rax, rsi
.text:0000000000005423                 mul     rdx
.text:0000000000005426                 mov     rsi, rax
.text:0000000000005429                 seto    al
.text:000000000000542C                 test    rsi, rsi
.text:000000000000542F                 js      short loc_543B
.text:0000000000005431                 movzx   eax, al
.text:0000000000005434                 test    rax, rax
.text:0000000000005437                 jnz     short loc_543B
.text:0000000000005439                 jmp     short xrealloc
.text:000000000000543B ; ---------------------------------------------------------------------------
.text:000000000000543B
.text:000000000000543B loc_543B:                               ; CODE XREF: xnrealloc+F↑j
.text:000000000000543B                                         ; xnrealloc+17↑j
.text:000000000000543B                 sub     rsp, 8
.text:000000000000543F                 call    xalloc_die
.text:000000000000543F ; } // starts at 5420
.text:000000000000543F xnrealloc       endp
.text:000000000000543F
.text:000000000000543F ; ---------------------------------------------------------------------------
.text:0000000000005444                 align 10h
.text:0000000000005450
.text:0000000000005450 ; =============== S U B R O U T I N E =======================================
.text:0000000000005450
.text:0000000000005450 ; Attributes: info_from_lumina
.text:0000000000005450
.text:0000000000005450 ; void *__fastcall x2nrealloc(void *p, size_t *pn, size_t s)
.text:0000000000005450                 public x2nrealloc
.text:0000000000005450 x2nrealloc      proc near
.text:0000000000005450 ; __unwind {
.text:0000000000005450                 test    rdi, rdi
.text:0000000000005453                 mov     r9, rdx
.text:0000000000005456                 mov     rcx, [rsi]
.text:0000000000005459                 jz      short loc_5490
.text:000000000000545B                 xor     edx, edx
.text:000000000000545D                 mov     rax, 5555555555555554h
.text:0000000000005467                 div     r9
.text:000000000000546A                 cmp     rax, rcx
.text:000000000000546D                 jbe     short loc_54AB
.text:000000000000546F                 mov     rax, rcx
.text:0000000000005472                 shr     rax, 1
.text:0000000000005475                 lea     rcx, [rax+rcx+1]
.text:000000000000547A
.text:000000000000547A loc_547A:                               ; CODE XREF: x2nrealloc+59↓j
.text:000000000000547A                 mov     [rsi], rcx
.text:000000000000547D                 imul    rcx, r9
.text:0000000000005481                 mov     rsi, rcx
.text:0000000000005484                 jmp     xrealloc
.text:0000000000005484 ; ---------------------------------------------------------------------------
.text:0000000000005489                 align 10h
.text:0000000000005490
.text:0000000000005490 loc_5490:                               ; CODE XREF: x2nrealloc+9↑j
.text:0000000000005490                 test    rcx, rcx
.text:0000000000005493                 jz      short loc_54B8
.text:0000000000005495
.text:0000000000005495 loc_5495:                               ; CODE XREF: x2nrealloc+80↓j
.text:0000000000005495                 mov     rax, rcx
.text:0000000000005498                 mul     r9
.text:000000000000549B                 seto    dl
.text:000000000000549E                 test    rax, rax
.text:00000000000054A1                 movzx   edx, dl
.text:00000000000054A4                 js      short loc_54AB
.text:00000000000054A6                 test    rdx, rdx
.text:00000000000054A9                 jz      short loc_547A
.text:00000000000054AB
.text:00000000000054AB loc_54AB:                               ; CODE XREF: x2nrealloc+1D↑j
.text:00000000000054AB                                         ; x2nrealloc+54↑j
.text:00000000000054AB                 sub     rsp, 8
.text:00000000000054AF                 call    xalloc_die
.text:00000000000054AF ; ---------------------------------------------------------------------------
.text:00000000000054B4                 align 8
.text:00000000000054B8
.text:00000000000054B8 loc_54B8:                               ; CODE XREF: x2nrealloc+43↑j
.text:00000000000054B8                 xor     edx, edx
.text:00000000000054BA                 mov     eax, 80h
.text:00000000000054BF                 xor     r8d, r8d
.text:00000000000054C2                 div     r9
.text:00000000000054C5                 test    rax, rax
.text:00000000000054C8                 setz    r8b
.text:00000000000054CC                 lea     rcx, [r8+rax]
.text:00000000000054D0                 jmp     short loc_5495
.text:00000000000054D0 ; } // starts at 5450
.text:00000000000054D0 x2nrealloc      endp
.text:00000000000054D0
.text:00000000000054D0 ; ---------------------------------------------------------------------------
.text:00000000000054D2                 align 20h
.text:00000000000054E0
.text:00000000000054E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000054E0
.text:00000000000054E0 ; Attributes: info_from_lumina
.text:00000000000054E0
.text:00000000000054E0 ; void *__fastcall x2realloc(void *p, size_t *pn)
.text:00000000000054E0                 public x2realloc
.text:00000000000054E0 x2realloc       proc near               ; CODE XREF: readlinebuffer_delim+6C↑p
.text:00000000000054E0 ; __unwind {
.text:00000000000054E0                 test    rdi, rdi
.text:00000000000054E3                 mov     rax, [rsi]
.text:00000000000054E6                 jz      short loc_5510
.text:00000000000054E8                 mov     rdx, 5555555555555553h
.text:00000000000054F2                 cmp     rax, rdx
.text:00000000000054F5                 ja      short loc_5521
.text:00000000000054F7                 mov     rdx, rax
.text:00000000000054FA                 shr     rdx, 1
.text:00000000000054FD                 lea     rax, [rdx+rax+1]
.text:0000000000005502
.text:0000000000005502 loc_5502:                               ; CODE XREF: x2realloc+3F↓j
.text:0000000000005502                 mov     [rsi], rax
.text:0000000000005505                 mov     rsi, rax
.text:0000000000005508                 jmp     xrealloc
.text:0000000000005508 ; ---------------------------------------------------------------------------
.text:000000000000550D                 align 10h
.text:0000000000005510
.text:0000000000005510 loc_5510:                               ; CODE XREF: x2realloc+6↑j
.text:0000000000005510                 test    rax, rax
.text:0000000000005513                 mov     edx, 80h
.text:0000000000005518                 cmovz   rax, rdx
.text:000000000000551C                 test    rax, rax
.text:000000000000551F                 jns     short loc_5502
.text:0000000000005521
.text:0000000000005521 loc_5521:                               ; CODE XREF: x2realloc+15↑j
.text:0000000000005521                 sub     rsp, 8
.text:0000000000005525                 call    xalloc_die
.text:0000000000005525 ; } // starts at 54E0
.text:0000000000005525 x2realloc       endp
.text:0000000000005525
.text:0000000000005525 ; ---------------------------------------------------------------------------
.text:000000000000552A                 align 10h
.text:0000000000005530
.text:0000000000005530 ; =============== S U B R O U T I N E =======================================
.text:0000000000005530
.text:0000000000005530
.text:0000000000005530 ; __int64 __fastcall xzalloc(size_t n)
.text:0000000000005530                 public xzalloc
.text:0000000000005530 xzalloc         proc near
.text:0000000000005530 ; __unwind {
.text:0000000000005530                 push    rbx
.text:0000000000005531                 mov     rbx, rdi
.text:0000000000005534                 call    xmalloc
.text:0000000000005539                 mov     rdx, rbx        ; n
.text:000000000000553C                 xor     esi, esi        ; c
.text:000000000000553E                 mov     rdi, rax        ; s
.text:0000000000005541                 pop     rbx
.text:0000000000005542                 jmp     _memset
.text:0000000000005542 ; } // starts at 5530
.text:0000000000005542 xzalloc         endp
.text:0000000000005542
.text:0000000000005542 ; ---------------------------------------------------------------------------
.text:0000000000005547                 align 10h
.text:0000000000005550
.text:0000000000005550 ; =============== S U B R O U T I N E =======================================
.text:0000000000005550
.text:0000000000005550 ; Attributes: info_from_lumina
.text:0000000000005550
.text:0000000000005550 ; void *__fastcall xcalloc(size_t n, size_t s)
.text:0000000000005550                 public xcalloc
.text:0000000000005550 xcalloc         proc near
.text:0000000000005550 ; __unwind {
.text:0000000000005550                 mov     rax, rdi
.text:0000000000005553                 sub     rsp, 8
.text:0000000000005557                 mul     rsi
.text:000000000000555A                 seto    dl
.text:000000000000555D                 test    rax, rax
.text:0000000000005560                 js      short loc_5579
.text:0000000000005562                 movzx   edx, dl
.text:0000000000005565                 test    rdx, rdx
.text:0000000000005568                 jnz     short loc_5579
.text:000000000000556A                 call    _calloc
.text:000000000000556F                 test    rax, rax
.text:0000000000005572                 jz      short loc_5579
.text:0000000000005574                 add     rsp, 8
.text:0000000000005578                 retn
.text:0000000000005579 ; ---------------------------------------------------------------------------
.text:0000000000005579
.text:0000000000005579 loc_5579:                               ; CODE XREF: xcalloc+10↑j
.text:0000000000005579                                         ; xcalloc+18↑j ...
.text:0000000000005579                 call    xalloc_die
.text:0000000000005579 ; } // starts at 5550
.text:0000000000005579 xcalloc         endp
.text:0000000000005579
.text:0000000000005579 ; ---------------------------------------------------------------------------
.text:000000000000557E                 align 20h
.text:0000000000005580
.text:0000000000005580 ; =============== S U B R O U T I N E =======================================
.text:0000000000005580
.text:0000000000005580 ; Attributes: info_from_lumina
.text:0000000000005580
.text:0000000000005580 ; void *__fastcall xmemdup(const void *p, size_t s)
.text:0000000000005580                 public xmemdup
.text:0000000000005580 xmemdup         proc near               ; CODE XREF: clone_quoting_options+28↑p
.text:0000000000005580                                         ; xstrdup+11↓j
.text:0000000000005580 ; __unwind {
.text:0000000000005580                 push    rbp
.text:0000000000005581                 push    rbx
.text:0000000000005582                 mov     rbp, rdi
.text:0000000000005585                 mov     rdi, rsi
.text:0000000000005588                 mov     rbx, rsi
.text:000000000000558B                 sub     rsp, 8
.text:000000000000558F                 call    xmalloc
.text:0000000000005594                 add     rsp, 8
.text:0000000000005598                 mov     rdx, rbx        ; n
.text:000000000000559B                 mov     rsi, rbp        ; src
.text:000000000000559E                 pop     rbx
.text:000000000000559F                 pop     rbp
.text:00000000000055A0                 mov     rdi, rax        ; dest
.text:00000000000055A3                 jmp     _memcpy
.text:00000000000055A3 ; } // starts at 5580
.text:00000000000055A3 xmemdup         endp
.text:00000000000055A3
.text:00000000000055A3 ; ---------------------------------------------------------------------------
.text:00000000000055A8                 align 10h
.text:00000000000055B0
.text:00000000000055B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000055B0
.text:00000000000055B0
.text:00000000000055B0 ; __int64 __fastcall xstrdup(void *src)
.text:00000000000055B0                 public xstrdup
.text:00000000000055B0 xstrdup         proc near
.text:00000000000055B0 ; __unwind {
.text:00000000000055B0                 push    rbx
.text:00000000000055B1                 mov     rbx, rdi
.text:00000000000055B4                 call    _strlen
.text:00000000000055B9                 mov     rdi, rbx        ; src
.text:00000000000055BC                 lea     rsi, [rax+1]    ; n
.text:00000000000055C0                 pop     rbx
.text:00000000000055C1                 jmp     short xmemdup
.text:00000000000055C1 ; } // starts at 55B0
.text:00000000000055C1 xstrdup         endp
.text:00000000000055C1
.text:00000000000055C1 ; ---------------------------------------------------------------------------
.text:00000000000055C3                 align 10h
.text:00000000000055D0
.text:00000000000055D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000055D0
.text:00000000000055D0 ; Attributes: noreturn info_from_lumina
.text:00000000000055D0
.text:00000000000055D0 ; void __cdecl xalloc_die()
.text:00000000000055D0                 public xalloc_die
.text:00000000000055D0 xalloc_die      proc near               ; CODE XREF: quotearg_n_options:loc_45A6↑p
.text:00000000000055D0                                         ; xmalloc:loc_5395↑p ...
.text:00000000000055D0 ; __unwind {
.text:00000000000055D0                 lea     rsi, aMemoryExhauste ; "memory exhausted"
.text:00000000000055D7                 sub     rsp, 8
.text:00000000000055DB                 mov     edx, 5          ; category
.text:00000000000055E0                 xor     edi, edi        ; domainname
.text:00000000000055E2                 call    _dcgettext
.text:00000000000055E7                 mov     edi, cs:exit_failure ; status
.text:00000000000055ED                 lea     rdx, format     ; format
.text:00000000000055F4                 mov     rcx, rax
.text:00000000000055F7                 xor     esi, esi        ; errnum
.text:00000000000055F9                 xor     eax, eax
.text:00000000000055FB                 call    _error
.text:0000000000005600                 call    _abort
.text:0000000000005600 ; } // starts at 55D0
.text:0000000000005600 xalloc_die      endp
.text:0000000000005600
.text:0000000000005600 ; ---------------------------------------------------------------------------
.text:0000000000005605                 align 10h
.text:0000000000005610
.text:0000000000005610 ; =============== S U B R O U T I N E =======================================
.text:0000000000005610
.text:0000000000005610
.text:0000000000005610                 public xnumtoimax
.text:0000000000005610 xnumtoimax      proc near               ; CODE XREF: xdectoumax+17↓p
.text:0000000000005610
.text:0000000000005610 var_48          = qword ptr -48h
.text:0000000000005610 var_40          = qword ptr -40h
.text:0000000000005610 arg_0           = dword ptr  8
.text:0000000000005610
.text:0000000000005610 ; __unwind {
.text:0000000000005610                 push    r15
.text:0000000000005612                 push    r14
.text:0000000000005614                 mov     r15, rcx
.text:0000000000005617                 push    r13
.text:0000000000005619                 push    r12
.text:000000000000561B                 mov     r14, rdx
.text:000000000000561E                 push    rbp
.text:000000000000561F                 push    rbx
.text:0000000000005620                 mov     edx, esi
.text:0000000000005622                 xor     esi, esi
.text:0000000000005624                 mov     r12, rdi
.text:0000000000005627                 mov     r13, r9
.text:000000000000562A                 sub     rsp, 18h
.text:000000000000562E                 mov     rcx, rsp
.text:0000000000005631                 mov     ebx, [rsp+48h+arg_0]
.text:0000000000005635                 mov     rax, fs:28h
.text:000000000000563E                 mov     [rsp+48h+var_40], rax
.text:0000000000005643                 xor     eax, eax
.text:0000000000005645                 call    xstrtoimax
.text:000000000000564A                 test    eax, eax
.text:000000000000564C                 jnz     loc_56E0
.text:0000000000005652                 mov     rbp, [rsp+48h+var_48]
.text:0000000000005656                 cmp     rbp, r14
.text:0000000000005659                 jl      short loc_5660
.text:000000000000565B                 cmp     rbp, r15
.text:000000000000565E                 jle     short loc_56B6
.text:0000000000005660
.text:0000000000005660 loc_5660:                               ; CODE XREF: xnumtoimax+49↑j
.text:0000000000005660                 call    ___errno_location
.text:0000000000005665                 cmp     rbp, 3FFFFFFFh
.text:000000000000566C                 mov     r14, rax
.text:000000000000566F                 jle     loc_5700
.text:0000000000005675
.text:0000000000005675 loc_5675:                               ; CODE XREF: xnumtoimax+DD↓j
.text:0000000000005675                 mov     dword ptr [r14], 4Bh ; 'K'
.text:000000000000567C
.text:000000000000567C loc_567C:                               ; CODE XREF: xnumtoimax+E2↓j
.text:000000000000567C                                         ; xnumtoimax+EA↓j ...
.text:000000000000567C                 mov     rdi, r12
.text:000000000000567F                 call    quote
.text:0000000000005684                 mov     esi, [r14]
.text:0000000000005687                 mov     r8, rax
.text:000000000000568A                 mov     eax, 0
.text:000000000000568F                 lea     rdx, aS         ; "%s: "
.text:0000000000005696                 mov     rcx, r13
.text:0000000000005699                 cmp     esi, 16h
.text:000000000000569C                 cmovz   esi, eax        ; errnum
.text:000000000000569F                 test    ebx, ebx
.text:00000000000056A1                 mov     eax, 1
.text:00000000000056A6                 cmovz   ebx, eax
.text:00000000000056A9                 xor     eax, eax
.text:00000000000056AB                 mov     edi, ebx        ; status
.text:00000000000056AD                 call    _error
.text:00000000000056B2                 mov     rbp, [rsp+48h+var_48]
.text:00000000000056B6
.text:00000000000056B6 loc_56B6:                               ; CODE XREF: xnumtoimax+4E↑j
.text:00000000000056B6                 mov     rdx, [rsp+48h+var_40]
.text:00000000000056BB                 xor     rdx, fs:28h
.text:00000000000056C4                 mov     rax, rbp
.text:00000000000056C7                 jnz     short loc_571C
.text:00000000000056C9                 add     rsp, 18h
.text:00000000000056CD                 pop     rbx
.text:00000000000056CE                 pop     rbp
.text:00000000000056CF                 pop     r12
.text:00000000000056D1                 pop     r13
.text:00000000000056D3                 pop     r14
.text:00000000000056D5                 pop     r15
.text:00000000000056D7                 retn
.text:00000000000056D7 ; ---------------------------------------------------------------------------
.text:00000000000056D8                 align 20h
.text:00000000000056E0
.text:00000000000056E0 loc_56E0:                               ; CODE XREF: xnumtoimax+3C↑j
.text:00000000000056E0                 mov     ebp, eax
.text:00000000000056E2                 call    ___errno_location
.text:00000000000056E7                 cmp     ebp, 1
.text:00000000000056EA                 mov     r14, rax
.text:00000000000056ED                 jz      short loc_5675
.text:00000000000056EF                 cmp     ebp, 3
.text:00000000000056F2                 jnz     short loc_567C
.text:00000000000056F4                 mov     dword ptr [rax], 0
.text:00000000000056FA                 jmp     short loc_567C
.text:00000000000056FA ; ---------------------------------------------------------------------------
.text:00000000000056FC                 align 20h
.text:0000000000005700
.text:0000000000005700 loc_5700:                               ; CODE XREF: xnumtoimax+5F↑j
.text:0000000000005700                 cmp     rbp, 0FFFFFFFFBFFFFFFFh
.text:0000000000005707                 mov     eax, 22h ; '"'
.text:000000000000570C                 mov     edx, 4Bh ; 'K'
.text:0000000000005711                 cmovle  eax, edx
.text:0000000000005714                 mov     [r14], eax
.text:0000000000005717                 jmp     loc_567C
.text:000000000000571C ; ---------------------------------------------------------------------------
.text:000000000000571C
.text:000000000000571C loc_571C:                               ; CODE XREF: xnumtoimax+B7↑j
.text:000000000000571C                 call    ___stack_chk_fail
.text:000000000000571C ; } // starts at 5610
.text:000000000000571C xnumtoimax      endp
.text:000000000000571C
.text:000000000000571C ; ---------------------------------------------------------------------------
.text:0000000000005721                 align 10h
.text:0000000000005730
.text:0000000000005730 ; =============== S U B R O U T I N E =======================================
.text:0000000000005730
.text:0000000000005730 ; Attributes: info_from_lumina
.text:0000000000005730
.text:0000000000005730 ; uintmax_t __fastcall xdectoumax(const char *n_str, uintmax_t min, uintmax_t max, const char *suffixes, const char *err, int err_exit)
.text:0000000000005730                 public xdectoumax
.text:0000000000005730 xdectoumax      proc near               ; CODE XREF: main+281↑p
.text:0000000000005730                                         ; main+2D3↑p ...
.text:0000000000005730 ; __unwind {
.text:0000000000005730                 sub     rsp, 10h
.text:0000000000005734                 push    r9
.text:0000000000005736                 mov     r9, r8
.text:0000000000005739                 mov     r8, rcx
.text:000000000000573C                 mov     rcx, rdx
.text:000000000000573F                 mov     rdx, rsi
.text:0000000000005742                 mov     esi, 0Ah
.text:0000000000005747                 call    xnumtoimax
.text:000000000000574C                 add     rsp, 18h
.text:0000000000005750                 retn
.text:0000000000005750 ; } // starts at 5730
.text:0000000000005750 xdectoumax      endp
.text:0000000000005750
.text:0000000000005750 ; ---------------------------------------------------------------------------
.text:0000000000005751                 align 20h
.text:0000000000005760
.text:0000000000005760 ; =============== S U B R O U T I N E =======================================
.text:0000000000005760
.text:0000000000005760
.text:0000000000005760 ; __int64 __fastcall xstrtoimax(char *nptr)
.text:0000000000005760                 public xstrtoimax
.text:0000000000005760 xstrtoimax      proc near               ; CODE XREF: xnumtoimax+35↑p
.text:0000000000005760
.text:0000000000005760 var_50          = qword ptr -50h
.text:0000000000005760 endptr          = qword ptr -48h
.text:0000000000005760 var_40          = qword ptr -40h
.text:0000000000005760
.text:0000000000005760 ; __unwind {
.text:0000000000005760                 push    r15
.text:0000000000005762                 push    r14
.text:0000000000005764                 push    r13
.text:0000000000005766                 push    r12
.text:0000000000005768                 push    rbp
.text:0000000000005769                 push    rbx
.text:000000000000576A                 sub     rsp, 28h
.text:000000000000576E                 mov     rax, fs:28h
.text:0000000000005777                 mov     [rsp+58h+var_40], rax
.text:000000000000577C                 xor     eax, eax
.text:000000000000577E                 cmp     edx, 24h ; '$'
.text:0000000000005781                 ja      loc_5DEF
.text:0000000000005787                 lea     rax, [rsp+58h+endptr]
.text:000000000000578C                 test    rsi, rsi
.text:000000000000578F                 mov     rbx, rsi
.text:0000000000005792                 mov     r12, rdi
.text:0000000000005795                 mov     ebp, edx
.text:0000000000005797                 mov     r14, rcx
.text:000000000000579A                 cmovz   rbx, rax
.text:000000000000579E                 mov     r15, r8
.text:00000000000057A1                 call    ___errno_location
.text:00000000000057A6                 xor     ecx, ecx        ; group
.text:00000000000057A8                 mov     edx, ebp        ; base
.text:00000000000057AA                 mov     dword ptr [rax], 0
.text:00000000000057B0                 mov     rsi, rbx        ; endptr
.text:00000000000057B3                 mov     rdi, r12        ; nptr
.text:00000000000057B6                 mov     r13, rax
.text:00000000000057B9                 call    ___strtol_internal
.text:00000000000057BE                 mov     rcx, [rbx]
.text:00000000000057C1                 mov     rbp, rax
.text:00000000000057C4                 cmp     rcx, r12
.text:00000000000057C7                 jz      short loc_5828
.text:00000000000057C9                 mov     eax, [r13+0]
.text:00000000000057CD                 test    eax, eax
.text:00000000000057CF                 jnz     short loc_5810
.text:00000000000057D1                 xor     r12d, r12d
.text:00000000000057D4
.text:00000000000057D4 loc_57D4:                               ; CODE XREF: xstrtoimax+C1↓j
.text:00000000000057D4                 test    r15, r15
.text:00000000000057D7                 jz      short loc_57E6
.text:00000000000057D9                 movzx   r13d, byte ptr [rcx]
.text:00000000000057DD                 test    r13b, r13b
.text:00000000000057E0                 jnz     loc_5863
.text:00000000000057E6
.text:00000000000057E6 loc_57E6:                               ; CODE XREF: xstrtoimax+77↑j
.text:00000000000057E6                                         ; xstrtoimax+226↓j
.text:00000000000057E6                 mov     [r14], rbp
.text:00000000000057E9
.text:00000000000057E9 loc_57E9:                               ; CODE XREF: xstrtoimax+B9↓j
.text:00000000000057E9                                         ; xstrtoimax+E3↓j ...
.text:00000000000057E9                 mov     rdi, [rsp+58h+var_40]
.text:00000000000057EE                 xor     rdi, fs:28h
.text:00000000000057F7                 mov     eax, r12d
.text:00000000000057FA                 jnz     loc_5E0E
.text:0000000000005800                 add     rsp, 28h
.text:0000000000005804                 pop     rbx
.text:0000000000005805                 pop     rbp
.text:0000000000005806                 pop     r12
.text:0000000000005808                 pop     r13
.text:000000000000580A                 pop     r14
.text:000000000000580C                 pop     r15
.text:000000000000580E                 retn
.text:000000000000580E ; ---------------------------------------------------------------------------
.text:000000000000580F                 align 10h
.text:0000000000005810
.text:0000000000005810 loc_5810:                               ; CODE XREF: xstrtoimax+6F↑j
.text:0000000000005810                 cmp     eax, 22h ; '"'
.text:0000000000005813                 mov     r12d, 4
.text:0000000000005819                 jnz     short loc_57E9
.text:000000000000581B                 mov     r12d, 1
.text:0000000000005821                 jmp     short loc_57D4
.text:0000000000005821 ; ---------------------------------------------------------------------------
.text:0000000000005823                 align 8
.text:0000000000005828
.text:0000000000005828 loc_5828:                               ; CODE XREF: xstrtoimax+67↑j
.text:0000000000005828                 test    r15, r15
.text:000000000000582B                 jz      loc_5CC0
.text:0000000000005831                 movzx   r13d, byte ptr [rcx]
.text:0000000000005835                 mov     [rsp+58h+var_50], rcx
.text:000000000000583A                 mov     r12d, 4
.text:0000000000005840                 test    r13b, r13b
.text:0000000000005843                 jz      short loc_57E9
.text:0000000000005845                 movsx   esi, r13b       ; c
.text:0000000000005849                 mov     rdi, r15        ; s
.text:000000000000584C                 call    _strchr
.text:0000000000005851                 test    rax, rax
.text:0000000000005854                 mov     rcx, [rsp+58h+var_50]
.text:0000000000005859                 jz      short loc_57E9
.text:000000000000585B                 mov     ebp, 1
.text:0000000000005860                 xor     r12d, r12d
.text:0000000000005863
.text:0000000000005863 loc_5863:                               ; CODE XREF: xstrtoimax+80↑j
.text:0000000000005863                 movsx   esi, r13b       ; c
.text:0000000000005867                 mov     rdi, r15        ; s
.text:000000000000586A                 mov     [rsp+58h+var_50], rcx
.text:000000000000586F                 call    _strchr
.text:0000000000005874                 test    rax, rax
.text:0000000000005877                 mov     rcx, [rsp+58h+var_50]
.text:000000000000587C                 jz      short def_590E  ; jumptable 000000000000590E default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:000000000000587E                 lea     eax, [r13-45h]
.text:0000000000005882                 cmp     al, 2Fh ; '/'
.text:0000000000005884                 ja      short loc_58E8
.text:0000000000005886                 mov     rdx, 814400308945h
.text:0000000000005890                 bt      rdx, rax
.text:0000000000005894                 jnb     short loc_58E8
.text:0000000000005896                 mov     esi, 30h ; '0'  ; c
.text:000000000000589B                 mov     rdi, r15        ; s
.text:000000000000589E                 mov     [rsp+58h+var_50], rcx
.text:00000000000058A3                 call    _strchr
.text:00000000000058A8                 test    rax, rax
.text:00000000000058AB                 mov     rcx, [rsp+58h+var_50]
.text:00000000000058B0                 jz      short loc_58E8
.text:00000000000058B2                 movzx   eax, byte ptr [rcx+1]
.text:00000000000058B6                 cmp     al, 44h ; 'D'
.text:00000000000058B8                 jz      short loc_58C6
.text:00000000000058BA                 cmp     al, 69h ; 'i'
.text:00000000000058BC                 jz      loc_5DA8
.text:00000000000058C2                 cmp     al, 42h ; 'B'
.text:00000000000058C4                 jnz     short loc_58E8
.text:00000000000058C6
.text:00000000000058C6 loc_58C6:                               ; CODE XREF: xstrtoimax+158↑j
.text:00000000000058C6                 mov     edi, 2
.text:00000000000058CB                 mov     eax, 3E8h
.text:00000000000058D0                 jmp     short loc_58F2
.text:00000000000058D0 ; ---------------------------------------------------------------------------
.text:00000000000058D2                 align 8
.text:00000000000058D8
.text:00000000000058D8 def_590E:                               ; CODE XREF: xstrtoimax+11C↑j
.text:00000000000058D8                                         ; xstrtoimax+19A↓j ...
.text:00000000000058D8                 mov     [r14], rbp      ; jumptable 000000000000590E default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:00000000000058DB                 or      r12d, 2
.text:00000000000058DF                 jmp     loc_57E9
.text:00000000000058DF ; ---------------------------------------------------------------------------
.text:00000000000058E4                 align 8
.text:00000000000058E8
.text:00000000000058E8 loc_58E8:                               ; CODE XREF: xstrtoimax+124↑j
.text:00000000000058E8                                         ; xstrtoimax+134↑j ...
.text:00000000000058E8                 mov     edi, 1
.text:00000000000058ED                 mov     eax, 400h
.text:00000000000058F2
.text:00000000000058F2 loc_58F2:                               ; CODE XREF: xstrtoimax+170↑j
.text:00000000000058F2                                         ; xstrtoimax+65B↓j
.text:00000000000058F2                 sub     r13d, 42h ; 'B' ; switch 54 cases
.text:00000000000058F6                 cmp     r13b, 35h
.text:00000000000058FA                 ja      short def_590E  ; jumptable 000000000000590E default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:00000000000058FC                 lea     rsi, jpt_590E
.text:0000000000005903                 movzx   r13d, r13b
.text:0000000000005907                 movsxd  rdx, ds:(jpt_590E - 15748h)[rsi+r13*4]
.text:000000000000590B                 add     rdx, rsi
.text:000000000000590E                 jmp     rdx             ; switch jump
.text:0000000000005910 ; ---------------------------------------------------------------------------
.text:0000000000005910
.text:0000000000005910 loc_5910:                               ; CODE XREF: xstrtoimax+1AE↑j
.text:0000000000005910                                         ; DATA XREF: .rodata:jpt_590E↓o
.text:0000000000005910                 mov     r8, 8000000000000000h ; jumptable 000000000000590E cases 77,109
.text:000000000000591A                 movsxd  rsi, eax
.text:000000000000591D                 mov     rax, r8
.text:0000000000005920                 cqo
.text:0000000000005922                 idiv    rsi
.text:0000000000005925                 cmp     rbp, rax
.text:0000000000005928                 mov     r9, rax
.text:000000000000592B                 jl      loc_5DD5
.text:0000000000005931                 mov     r10, 7FFFFFFFFFFFFFFFh
.text:000000000000593B                 mov     rax, r10
.text:000000000000593E                 cqo
.text:0000000000005940                 idiv    rsi
.text:0000000000005943                 cmp     rbp, rax
.text:0000000000005946                 jg      loc_5DE2
.text:000000000000594C                 imul    rbp, rsi
.text:0000000000005950                 cmp     r9, rbp
.text:0000000000005953                 jg      loc_5DD5
.text:0000000000005959                 cmp     rax, rbp
.text:000000000000595C                 jl      loc_5DE2
.text:0000000000005962                 imul    rbp, rsi
.text:0000000000005966                 xor     eax, eax
.text:0000000000005968
.text:0000000000005968 loc_5968:                               ; CODE XREF: xstrtoimax+67D↓j
.text:0000000000005968                                         ; xstrtoimax+68A↓j
.text:0000000000005968                 or      r12d, eax
.text:000000000000596B                 nop     dword ptr [rax+rax+00h]
.text:0000000000005970
.text:0000000000005970 loc_5970:                               ; CODE XREF: xstrtoimax+1AE↑j
.text:0000000000005970                                         ; xstrtoimax+259↓j ...
.text:0000000000005970                 movsxd  rax, edi        ; jumptable 000000000000590E case 99
.text:0000000000005973                 add     rcx, rax
.text:0000000000005976                 mov     eax, r12d
.text:0000000000005979                 or      eax, 2
.text:000000000000597C                 mov     [rbx], rcx
.text:000000000000597F                 cmp     byte ptr [rcx], 0
.text:0000000000005982                 cmovnz  r12d, eax
.text:0000000000005986                 jmp     loc_57E6
.text:0000000000005986 ; ---------------------------------------------------------------------------
.text:000000000000598B                 align 10h
.text:0000000000005990
.text:0000000000005990 loc_5990:                               ; CODE XREF: xstrtoimax+1AE↑j
.text:0000000000005990                                         ; DATA XREF: .rodata:jpt_590E↓o
.text:0000000000005990                 mov     rax, 0C000000000000000h ; jumptable 000000000000590E case 119
.text:000000000000599A                 cmp     rbp, rax
.text:000000000000599D                 jl      loc_5CD0
.text:00000000000059A3                 mov     rax, 3FFFFFFFFFFFFFFFh
.text:00000000000059AD                 cmp     rbp, rax
.text:00000000000059B0                 jg      loc_5D90
.text:00000000000059B6                 add     rbp, rbp
.text:00000000000059B9                 jmp     short loc_5970  ; jumptable 000000000000590E case 99
.text:00000000000059B9 ; ---------------------------------------------------------------------------
.text:00000000000059BB                 align 20h
.text:00000000000059C0
.text:00000000000059C0 loc_59C0:                               ; CODE XREF: xstrtoimax+1AE↑j
.text:00000000000059C0                                         ; DATA XREF: .rodata:jpt_590E↓o
.text:00000000000059C0                 mov     rax, 0FFC0000000000000h ; jumptable 000000000000590E case 98
.text:00000000000059CA                 cmp     rbp, rax
.text:00000000000059CD                 jl      loc_5CD0
.text:00000000000059D3                 mov     rax, 3FFFFFFFFFFFFFh
.text:00000000000059DD                 cmp     rbp, rax
.text:00000000000059E0                 jg      loc_5D90
.text:00000000000059E6                 shl     rbp, 9
.text:00000000000059EA                 jmp     short loc_5970  ; jumptable 000000000000590E case 99
.text:00000000000059EA ; ---------------------------------------------------------------------------
.text:00000000000059EC                 align 10h
.text:00000000000059F0
.text:00000000000059F0 loc_59F0:                               ; CODE XREF: xstrtoimax+1AE↑j
.text:00000000000059F0                                         ; DATA XREF: .rodata:jpt_590E↓o
.text:00000000000059F0                 movsxd  rsi, eax        ; jumptable 000000000000590E case 90
.text:00000000000059F3                 mov     rax, 8000000000000000h
.text:00000000000059FD                 mov     r8d, 7
.text:0000000000005A03                 cqo
.text:0000000000005A05                 xor     r11d, r11d
.text:0000000000005A08                 mov     r9, 7FFFFFFFFFFFFFFFh
.text:0000000000005A12                 idiv    rsi
.text:0000000000005A15                 mov     r10, rax
.text:0000000000005A18                 jmp     short loc_5A3F
.text:0000000000005A18 ; ---------------------------------------------------------------------------
.text:0000000000005A1A                 align 20h
.text:0000000000005A20
.text:0000000000005A20 loc_5A20:                               ; CODE XREF: xstrtoimax+2E2↓j
.text:0000000000005A20                 mov     rax, r9
.text:0000000000005A23                 cqo
.text:0000000000005A25                 idiv    rsi
.text:0000000000005A28                 cmp     rax, rbp
.text:0000000000005A2B                 jl      loc_5D18
.text:0000000000005A31                 imul    rbp, rsi
.text:0000000000005A35
.text:0000000000005A35 loc_5A35:                               ; CODE XREF: xstrtoimax+2F4↓j
.text:0000000000005A35                                         ; xstrtoimax+5C8↓j
.text:0000000000005A35                 sub     r8d, 1
.text:0000000000005A39                 jz      loc_5B60
.text:0000000000005A3F
.text:0000000000005A3F loc_5A3F:                               ; CODE XREF: xstrtoimax+2B8↑j
.text:0000000000005A3F                 cmp     r10, rbp
.text:0000000000005A42                 jle     short loc_5A20
.text:0000000000005A44                 mov     r11d, 1
.text:0000000000005A4A                 mov     rbp, 8000000000000000h
.text:0000000000005A54                 jmp     short loc_5A35
.text:0000000000005A54 ; ---------------------------------------------------------------------------
.text:0000000000005A56                 align 20h
.text:0000000000005A60
.text:0000000000005A60 loc_5A60:                               ; CODE XREF: xstrtoimax+1AE↑j
.text:0000000000005A60                                         ; DATA XREF: .rodata:jpt_590E↓o
.text:0000000000005A60                 movsxd  rsi, eax        ; jumptable 000000000000590E case 89
.text:0000000000005A63                 mov     rax, 8000000000000000h
.text:0000000000005A6D                 mov     r8d, 8
.text:0000000000005A73                 cqo
.text:0000000000005A75                 xor     r11d, r11d
.text:0000000000005A78                 mov     r9, 7FFFFFFFFFFFFFFFh
.text:0000000000005A82                 idiv    rsi
.text:0000000000005A85                 mov     r10, rax
.text:0000000000005A88                 jmp     short loc_5AAF
.text:0000000000005A88 ; ---------------------------------------------------------------------------
.text:0000000000005A8A                 align 10h
.text:0000000000005A90
.text:0000000000005A90 loc_5A90:                               ; CODE XREF: xstrtoimax+352↓j
.text:0000000000005A90                 mov     rax, r9
.text:0000000000005A93                 cqo
.text:0000000000005A95                 idiv    rsi
.text:0000000000005A98                 cmp     rax, rbp
.text:0000000000005A9B                 jl      loc_5CE8
.text:0000000000005AA1                 imul    rbp, rsi
.text:0000000000005AA5
.text:0000000000005AA5 loc_5AA5:                               ; CODE XREF: xstrtoimax+364↓j
.text:0000000000005AA5                                         ; xstrtoimax+598↓j
.text:0000000000005AA5                 sub     r8d, 1
.text:0000000000005AA9                 jz      loc_5B60
.text:0000000000005AAF
.text:0000000000005AAF loc_5AAF:                               ; CODE XREF: xstrtoimax+328↑j
.text:0000000000005AAF                 cmp     r10, rbp
.text:0000000000005AB2                 jle     short loc_5A90
.text:0000000000005AB4                 mov     r11d, 1
.text:0000000000005ABA                 mov     rbp, 8000000000000000h
.text:0000000000005AC4                 jmp     short loc_5AA5
.text:0000000000005AC4 ; ---------------------------------------------------------------------------
.text:0000000000005AC6                 align 10h
.text:0000000000005AD0
.text:0000000000005AD0 loc_5AD0:                               ; CODE XREF: xstrtoimax+1AE↑j
.text:0000000000005AD0                                         ; DATA XREF: .rodata:jpt_590E↓o
.text:0000000000005AD0                 mov     r8, 8000000000000000h ; jumptable 000000000000590E cases 75,107
.text:0000000000005ADA                 movsxd  rsi, eax
.text:0000000000005ADD                 mov     rax, r8
.text:0000000000005AE0                 cqo
.text:0000000000005AE2                 idiv    rsi
.text:0000000000005AE5                 cmp     rbp, rax
.text:0000000000005AE8                 jl      loc_5CD0
.text:0000000000005AEE                 sub     r8, 1
.text:0000000000005AF2                 mov     rax, r8
.text:0000000000005AF5                 cqo
.text:0000000000005AF7                 idiv    rsi
.text:0000000000005AFA                 cmp     rbp, rax
.text:0000000000005AFD                 jg      loc_5D90
.text:0000000000005B03                 imul    rbp, rsi
.text:0000000000005B07                 jmp     loc_5970        ; jumptable 000000000000590E case 99
.text:0000000000005B07 ; ---------------------------------------------------------------------------
.text:0000000000005B0C                 align 10h
.text:0000000000005B10
.text:0000000000005B10 loc_5B10:                               ; CODE XREF: xstrtoimax+1AE↑j
.text:0000000000005B10                                         ; DATA XREF: .rodata:jpt_590E↓o
.text:0000000000005B10                 movsxd  rsi, eax        ; jumptable 000000000000590E cases 71,103
.text:0000000000005B13                 mov     rax, 8000000000000000h
.text:0000000000005B1D                 mov     r8d, 3
.text:0000000000005B23                 cqo
.text:0000000000005B25                 xor     r11d, r11d
.text:0000000000005B28                 mov     r9, 7FFFFFFFFFFFFFFFh
.text:0000000000005B32                 idiv    rsi
.text:0000000000005B35                 mov     r10, rax
.text:0000000000005B38
.text:0000000000005B38 loc_5B38:                               ; CODE XREF: xstrtoimax+3FA↓j
.text:0000000000005B38                 cmp     r10, rbp
.text:0000000000005B3B                 jg      loc_5D30
.text:0000000000005B41                 mov     rax, r9
.text:0000000000005B44                 cqo
.text:0000000000005B46                 idiv    rsi
.text:0000000000005B49                 cmp     rax, rbp
.text:0000000000005B4C                 jl      loc_5DC0
.text:0000000000005B52                 imul    rbp, rsi
.text:0000000000005B56
.text:0000000000005B56 loc_5B56:                               ; CODE XREF: xstrtoimax+5E0↓j
.text:0000000000005B56                                         ; xstrtoimax+670↓j
.text:0000000000005B56                 sub     r8d, 1
.text:0000000000005B5A                 jnz     short loc_5B38
.text:0000000000005B5C                 nop     dword ptr [rax+00h]
.text:0000000000005B60
.text:0000000000005B60 loc_5B60:                               ; CODE XREF: xstrtoimax+2D9↑j
.text:0000000000005B60                                         ; xstrtoimax+349↑j ...
.text:0000000000005B60                 or      r12d, r11d
.text:0000000000005B63                 jmp     loc_5970        ; jumptable 000000000000590E case 99
.text:0000000000005B63 ; ---------------------------------------------------------------------------
.text:0000000000005B68                 align 10h
.text:0000000000005B70
.text:0000000000005B70 loc_5B70:                               ; CODE XREF: xstrtoimax+1AE↑j
.text:0000000000005B70                                         ; DATA XREF: .rodata:jpt_590E↓o
.text:0000000000005B70                 movsxd  rsi, eax        ; jumptable 000000000000590E case 69
.text:0000000000005B73                 mov     rax, 8000000000000000h
.text:0000000000005B7D                 mov     r8d, 6
.text:0000000000005B83                 cqo
.text:0000000000005B85                 xor     r11d, r11d
.text:0000000000005B88                 mov     r9, 7FFFFFFFFFFFFFFFh
.text:0000000000005B92                 idiv    rsi
.text:0000000000005B95                 mov     r10, rax
.text:0000000000005B98                 jmp     short loc_5BBB
.text:0000000000005B98 ; ---------------------------------------------------------------------------
.text:0000000000005B9A                 align 20h
.text:0000000000005BA0
.text:0000000000005BA0 loc_5BA0:                               ; CODE XREF: xstrtoimax+45E↓j
.text:0000000000005BA0                 mov     rax, r9
.text:0000000000005BA3                 cqo
.text:0000000000005BA5                 idiv    rsi
.text:0000000000005BA8                 cmp     rax, rbp
.text:0000000000005BAB                 jl      loc_5D48
.text:0000000000005BB1                 imul    rbp, rsi
.text:0000000000005BB5
.text:0000000000005BB5 loc_5BB5:                               ; CODE XREF: xstrtoimax+470↓j
.text:0000000000005BB5                                         ; xstrtoimax+5F8↓j
.text:0000000000005BB5                 sub     r8d, 1
.text:0000000000005BB9                 jz      short loc_5B60
.text:0000000000005BBB
.text:0000000000005BBB loc_5BBB:                               ; CODE XREF: xstrtoimax+438↑j
.text:0000000000005BBB                 cmp     r10, rbp
.text:0000000000005BBE                 jle     short loc_5BA0
.text:0000000000005BC0                 mov     r11d, 1
.text:0000000000005BC6                 mov     rbp, 8000000000000000h
.text:0000000000005BD0                 jmp     short loc_5BB5
.text:0000000000005BD0 ; ---------------------------------------------------------------------------
.text:0000000000005BD2                 align 8
.text:0000000000005BD8
.text:0000000000005BD8 loc_5BD8:                               ; CODE XREF: xstrtoimax+1AE↑j
.text:0000000000005BD8                                         ; DATA XREF: .rodata:jpt_590E↓o
.text:0000000000005BD8                 movsxd  rsi, eax        ; jumptable 000000000000590E case 80
.text:0000000000005BDB                 mov     rax, 8000000000000000h
.text:0000000000005BE5                 mov     r8d, 5
.text:0000000000005BEB                 cqo
.text:0000000000005BED                 xor     r11d, r11d
.text:0000000000005BF0                 mov     r9, 7FFFFFFFFFFFFFFFh
.text:0000000000005BFA                 idiv    rsi
.text:0000000000005BFD                 mov     r10, rax
.text:0000000000005C00                 jmp     short loc_5C27
.text:0000000000005C00 ; ---------------------------------------------------------------------------
.text:0000000000005C02                 align 8
.text:0000000000005C08
.text:0000000000005C08 loc_5C08:                               ; CODE XREF: xstrtoimax+4CA↓j
.text:0000000000005C08                 mov     rax, r9
.text:0000000000005C0B                 cqo
.text:0000000000005C0D                 idiv    rsi
.text:0000000000005C10                 cmp     rax, rbp
.text:0000000000005C13                 jl      loc_5D60
.text:0000000000005C19                 imul    rbp, rsi
.text:0000000000005C1D
.text:0000000000005C1D loc_5C1D:                               ; CODE XREF: xstrtoimax+4DC↓j
.text:0000000000005C1D                                         ; xstrtoimax+610↓j
.text:0000000000005C1D                 sub     r8d, 1
.text:0000000000005C21                 jz      loc_5B60
.text:0000000000005C27
.text:0000000000005C27 loc_5C27:                               ; CODE XREF: xstrtoimax+4A0↑j
.text:0000000000005C27                 cmp     r10, rbp
.text:0000000000005C2A                 jle     short loc_5C08
.text:0000000000005C2C                 mov     r11d, 1
.text:0000000000005C32                 mov     rbp, 8000000000000000h
.text:0000000000005C3C                 jmp     short loc_5C1D
.text:0000000000005C3C ; ---------------------------------------------------------------------------
.text:0000000000005C3E                 align 20h
.text:0000000000005C40
.text:0000000000005C40 loc_5C40:                               ; CODE XREF: xstrtoimax+1AE↑j
.text:0000000000005C40                                         ; DATA XREF: .rodata:jpt_590E↓o
.text:0000000000005C40                 mov     rax, 0FFE0000000000000h ; jumptable 000000000000590E case 66
.text:0000000000005C4A                 cmp     rbp, rax
.text:0000000000005C4D                 jl      loc_5CD0
.text:0000000000005C53                 mov     rax, 1FFFFFFFFFFFFFh
.text:0000000000005C5D                 cmp     rbp, rax
.text:0000000000005C60                 jg      loc_5D90
.text:0000000000005C66                 shl     rbp, 0Ah
.text:0000000000005C6A                 jmp     loc_5970        ; jumptable 000000000000590E case 99
.text:0000000000005C6A ; ---------------------------------------------------------------------------
.text:0000000000005C6F                 align 10h
.text:0000000000005C70
.text:0000000000005C70 loc_5C70:                               ; CODE XREF: xstrtoimax+1AE↑j
.text:0000000000005C70                                         ; DATA XREF: .rodata:jpt_590E↓o
.text:0000000000005C70                 movsxd  rsi, eax        ; jumptable 000000000000590E cases 84,116
.text:0000000000005C73                 mov     rax, 8000000000000000h
.text:0000000000005C7D                 mov     r8d, 4
.text:0000000000005C83                 cqo
.text:0000000000005C85                 xor     r11d, r11d
.text:0000000000005C88                 mov     r9, 7FFFFFFFFFFFFFFFh
.text:0000000000005C92                 idiv    rsi
.text:0000000000005C95                 mov     r10, rax
.text:0000000000005C98
.text:0000000000005C98 loc_5C98:                               ; CODE XREF: xstrtoimax+556↓j
.text:0000000000005C98                 cmp     r10, rbp
.text:0000000000005C9B                 jg      short loc_5D00
.text:0000000000005C9D                 mov     rax, r9
.text:0000000000005CA0                 cqo
.text:0000000000005CA2                 idiv    rsi
.text:0000000000005CA5                 cmp     rax, rbp
.text:0000000000005CA8                 jl      loc_5D78
.text:0000000000005CAE                 imul    rbp, rsi
.text:0000000000005CB2
.text:0000000000005CB2 loc_5CB2:                               ; CODE XREF: xstrtoimax+5B0↓j
.text:0000000000005CB2                                         ; xstrtoimax+628↓j
.text:0000000000005CB2                 sub     r8d, 1
.text:0000000000005CB6                 jnz     short loc_5C98
.text:0000000000005CB8                 jmp     loc_5B60
.text:0000000000005CB8 ; ---------------------------------------------------------------------------
.text:0000000000005CBD                 align 20h
.text:0000000000005CC0
.text:0000000000005CC0 loc_5CC0:                               ; CODE XREF: xstrtoimax+CB↑j
.text:0000000000005CC0                 mov     r12d, 4
.text:0000000000005CC6                 jmp     loc_57E9
.text:0000000000005CC6 ; ---------------------------------------------------------------------------
.text:0000000000005CCB                 align 10h
.text:0000000000005CD0
.text:0000000000005CD0 loc_5CD0:                               ; CODE XREF: xstrtoimax+23D↑j
.text:0000000000005CD0                                         ; xstrtoimax+26D↑j ...
.text:0000000000005CD0                 mov     r12d, 1
.text:0000000000005CD6                 mov     rbp, 8000000000000000h
.text:0000000000005CE0                 jmp     loc_5970        ; jumptable 000000000000590E case 99
.text:0000000000005CE0 ; ---------------------------------------------------------------------------
.text:0000000000005CE5                 align 8
.text:0000000000005CE8
.text:0000000000005CE8 loc_5CE8:                               ; CODE XREF: xstrtoimax+33B↑j
.text:0000000000005CE8                 mov     r11d, 1
.text:0000000000005CEE                 mov     rbp, 7FFFFFFFFFFFFFFFh
.text:0000000000005CF8                 jmp     loc_5AA5
.text:0000000000005CF8 ; ---------------------------------------------------------------------------
.text:0000000000005CFD                 align 20h
.text:0000000000005D00
.text:0000000000005D00 loc_5D00:                               ; CODE XREF: xstrtoimax+53B↑j
.text:0000000000005D00                 mov     r11d, 1
.text:0000000000005D06                 mov     rbp, 8000000000000000h
.text:0000000000005D10                 jmp     short loc_5CB2
.text:0000000000005D10 ; ---------------------------------------------------------------------------
.text:0000000000005D12                 align 8
.text:0000000000005D18
.text:0000000000005D18 loc_5D18:                               ; CODE XREF: xstrtoimax+2CB↑j
.text:0000000000005D18                 mov     r11d, 1
.text:0000000000005D1E                 mov     rbp, 7FFFFFFFFFFFFFFFh
.text:0000000000005D28                 jmp     loc_5A35
.text:0000000000005D28 ; ---------------------------------------------------------------------------
.text:0000000000005D2D                 align 10h
.text:0000000000005D30
.text:0000000000005D30 loc_5D30:                               ; CODE XREF: xstrtoimax+3DB↑j
.text:0000000000005D30                 mov     r11d, 1
.text:0000000000005D36                 mov     rbp, 8000000000000000h
.text:0000000000005D40                 jmp     loc_5B56
.text:0000000000005D40 ; ---------------------------------------------------------------------------
.text:0000000000005D45                 align 8
.text:0000000000005D48
.text:0000000000005D48 loc_5D48:                               ; CODE XREF: xstrtoimax+44B↑j
.text:0000000000005D48                 mov     r11d, 1
.text:0000000000005D4E                 mov     rbp, 7FFFFFFFFFFFFFFFh
.text:0000000000005D58                 jmp     loc_5BB5
.text:0000000000005D58 ; ---------------------------------------------------------------------------
.text:0000000000005D5D                 align 20h
.text:0000000000005D60
.text:0000000000005D60 loc_5D60:                               ; CODE XREF: xstrtoimax+4B3↑j
.text:0000000000005D60                 mov     r11d, 1
.text:0000000000005D66                 mov     rbp, 7FFFFFFFFFFFFFFFh
.text:0000000000005D70                 jmp     loc_5C1D
.text:0000000000005D70 ; ---------------------------------------------------------------------------
.text:0000000000005D75                 align 8
.text:0000000000005D78
.text:0000000000005D78 loc_5D78:                               ; CODE XREF: xstrtoimax+548↑j
.text:0000000000005D78                 mov     r11d, 1
.text:0000000000005D7E                 mov     rbp, 7FFFFFFFFFFFFFFFh
.text:0000000000005D88                 jmp     loc_5CB2
.text:0000000000005D88 ; ---------------------------------------------------------------------------
.text:0000000000005D8D                 align 10h
.text:0000000000005D90
.text:0000000000005D90 loc_5D90:                               ; CODE XREF: xstrtoimax+250↑j
.text:0000000000005D90                                         ; xstrtoimax+280↑j ...
.text:0000000000005D90                 mov     r12d, 1
.text:0000000000005D96                 mov     rbp, 7FFFFFFFFFFFFFFFh
.text:0000000000005DA0                 jmp     loc_5970        ; jumptable 000000000000590E case 99
.text:0000000000005DA0 ; ---------------------------------------------------------------------------
.text:0000000000005DA5                 align 8
.text:0000000000005DA8
.text:0000000000005DA8 loc_5DA8:                               ; CODE XREF: xstrtoimax+15C↑j
.text:0000000000005DA8                 xor     edi, edi
.text:0000000000005DAA                 cmp     byte ptr [rcx+2], 42h ; 'B'
.text:0000000000005DAE                 mov     eax, 400h
.text:0000000000005DB3                 setz    dil
.text:0000000000005DB7                 lea     edi, [rdi+rdi+1]
.text:0000000000005DBB                 jmp     loc_58F2
.text:0000000000005DC0 ; ---------------------------------------------------------------------------
.text:0000000000005DC0
.text:0000000000005DC0 loc_5DC0:                               ; CODE XREF: xstrtoimax+3EC↑j
.text:0000000000005DC0                 mov     r11d, 1
.text:0000000000005DC6                 mov     rbp, 7FFFFFFFFFFFFFFFh
.text:0000000000005DD0                 jmp     loc_5B56
.text:0000000000005DD5 ; ---------------------------------------------------------------------------
.text:0000000000005DD5
.text:0000000000005DD5 loc_5DD5:                               ; CODE XREF: xstrtoimax+1CB↑j
.text:0000000000005DD5                                         ; xstrtoimax+1F3↑j
.text:0000000000005DD5                 mov     eax, 1
.text:0000000000005DDA                 mov     rbp, r8
.text:0000000000005DDD                 jmp     loc_5968
.text:0000000000005DE2 ; ---------------------------------------------------------------------------
.text:0000000000005DE2
.text:0000000000005DE2 loc_5DE2:                               ; CODE XREF: xstrtoimax+1E6↑j
.text:0000000000005DE2                                         ; xstrtoimax+1FC↑j
.text:0000000000005DE2                 mov     eax, 1
.text:0000000000005DE7                 mov     rbp, r10
.text:0000000000005DEA                 jmp     loc_5968
.text:0000000000005DEF ; ---------------------------------------------------------------------------
.text:0000000000005DEF
.text:0000000000005DEF loc_5DEF:                               ; CODE XREF: xstrtoimax+21↑j
.text:0000000000005DEF                 lea     rcx, __PRETTY_FUNCTION___4162 ; "xstrtoimax"
.text:0000000000005DF6                 lea     rsi, file       ; "../coreutils-8.31/lib/xstrtol.c"
.text:0000000000005DFD                 lea     rdi, assertion  ; "0 <= strtol_base && strtol_base <= 36"
.text:0000000000005E04                 mov     edx, 54h ; 'T'  ; line
.text:0000000000005E09                 call    ___assert_fail
.text:0000000000005E0E ; ---------------------------------------------------------------------------
.text:0000000000005E0E
.text:0000000000005E0E loc_5E0E:                               ; CODE XREF: xstrtoimax+9A↑j
.text:0000000000005E0E                 call    ___stack_chk_fail
.text:0000000000005E0E ; } // starts at 5760
.text:0000000000005E0E xstrtoimax      endp
.text:0000000000005E0E
.text:0000000000005E0E ; ---------------------------------------------------------------------------
.text:0000000000005E13                 align 20h
.text:0000000000005E20
.text:0000000000005E20 ; =============== S U B R O U T I N E =======================================
.text:0000000000005E20
.text:0000000000005E20 ; Attributes: info_from_lumina
.text:0000000000005E20
.text:0000000000005E20 ; int __fastcall rpl_fclose(FILE *fp)
.text:0000000000005E20                 public rpl_fclose
.text:0000000000005E20 rpl_fclose      proc near               ; CODE XREF: main+616↑p
.text:0000000000005E20                                         ; nl_file+172↑p ...
.text:0000000000005E20 ; __unwind {
.text:0000000000005E20                 push    r12
.text:0000000000005E22                 push    rbp
.text:0000000000005E23                 push    rbx
.text:0000000000005E24                 mov     rbx, rdi
.text:0000000000005E27                 call    _fileno
.text:0000000000005E2C                 test    eax, eax
.text:0000000000005E2E                 mov     rdi, rbx        ; fp
.text:0000000000005E31                 js      short loc_5E87
.text:0000000000005E33                 call    ___freading
.text:0000000000005E38                 test    eax, eax
.text:0000000000005E3A                 jnz     short loc_5E68
.text:0000000000005E3C
.text:0000000000005E3C loc_5E3C:                               ; CODE XREF: rpl_fclose+62↓j
.text:0000000000005E3C                 mov     rdi, rbx        ; stream
.text:0000000000005E3F                 call    rpl_fflush
.text:0000000000005E44                 test    eax, eax
.text:0000000000005E46                 jz      short loc_5E84
.text:0000000000005E48                 call    ___errno_location
.text:0000000000005E4D                 mov     r12d, [rax]
.text:0000000000005E50                 mov     rdi, rbx        ; stream
.text:0000000000005E53                 mov     rbp, rax
.text:0000000000005E56                 call    _fclose
.text:0000000000005E5B                 test    r12d, r12d
.text:0000000000005E5E                 jnz     short loc_5E90
.text:0000000000005E60
.text:0000000000005E60 loc_5E60:                               ; CODE XREF: rpl_fclose+79↓j
.text:0000000000005E60                 pop     rbx
.text:0000000000005E61                 pop     rbp
.text:0000000000005E62                 pop     r12
.text:0000000000005E64                 retn
.text:0000000000005E64 ; ---------------------------------------------------------------------------
.text:0000000000005E65                 align 8
.text:0000000000005E68
.text:0000000000005E68 loc_5E68:                               ; CODE XREF: rpl_fclose+1A↑j
.text:0000000000005E68                 mov     rdi, rbx        ; stream
.text:0000000000005E6B                 call    _fileno
.text:0000000000005E70                 xor     esi, esi        ; offset
.text:0000000000005E72                 mov     edx, 1          ; whence
.text:0000000000005E77                 mov     edi, eax        ; fd
.text:0000000000005E79                 call    _lseek
.text:0000000000005E7E                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000005E82                 jnz     short loc_5E3C
.text:0000000000005E84
.text:0000000000005E84 loc_5E84:                               ; CODE XREF: rpl_fclose+26↑j
.text:0000000000005E84                 mov     rdi, rbx        ; stream
.text:0000000000005E87
.text:0000000000005E87 loc_5E87:                               ; CODE XREF: rpl_fclose+11↑j
.text:0000000000005E87                 pop     rbx
.text:0000000000005E88                 pop     rbp
.text:0000000000005E89                 pop     r12
.text:0000000000005E8B                 jmp     _fclose
.text:0000000000005E90 ; ---------------------------------------------------------------------------
.text:0000000000005E90
.text:0000000000005E90 loc_5E90:                               ; CODE XREF: rpl_fclose+3E↑j
.text:0000000000005E90                 mov     [rbp+0], r12d
.text:0000000000005E94                 mov     eax, 0FFFFFFFFh
.text:0000000000005E99                 jmp     short loc_5E60
.text:0000000000005E99 ; } // starts at 5E20
.text:0000000000005E99 rpl_fclose      endp
.text:0000000000005E99
.text:0000000000005E99 ; ---------------------------------------------------------------------------
.text:0000000000005E9B                 align 20h
.text:0000000000005EA0
.text:0000000000005EA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005EA0
.text:0000000000005EA0 ; Attributes: info_from_lumina
.text:0000000000005EA0
.text:0000000000005EA0 ; int __fastcall rpl_fflush(FILE *stream)
.text:0000000000005EA0                 public rpl_fflush
.text:0000000000005EA0 rpl_fflush      proc near               ; CODE XREF: rpl_fclose+1F↑p
.text:0000000000005EA0 ; __unwind {
.text:0000000000005EA0                 test    rdi, rdi
.text:0000000000005EA3                 push    rbx
.text:0000000000005EA4                 mov     rbx, rdi
.text:0000000000005EA7                 jz      short loc_5EBA
.text:0000000000005EA9                 call    ___freading
.text:0000000000005EAE                 test    eax, eax
.text:0000000000005EB0                 jz      short loc_5EBA
.text:0000000000005EB2                 test    dword ptr [rbx], 100h
.text:0000000000005EB8                 jnz     short loc_5EC8
.text:0000000000005EBA
.text:0000000000005EBA loc_5EBA:                               ; CODE XREF: rpl_fflush+7↑j
.text:0000000000005EBA                                         ; rpl_fflush+10↑j
.text:0000000000005EBA                 mov     rdi, rbx        ; stream
.text:0000000000005EBD                 pop     rbx
.text:0000000000005EBE                 jmp     _fflush
.text:0000000000005EBE ; ---------------------------------------------------------------------------
.text:0000000000005EC3                 align 8
.text:0000000000005EC8
.text:0000000000005EC8 loc_5EC8:                               ; CODE XREF: rpl_fflush+18↑j
.text:0000000000005EC8                 mov     rdi, rbx
.text:0000000000005ECB                 mov     edx, 1
.text:0000000000005ED0                 xor     esi, esi
.text:0000000000005ED2                 call    rpl_fseeko
.text:0000000000005ED7                 mov     rdi, rbx        ; stream
.text:0000000000005EDA                 pop     rbx
.text:0000000000005EDB                 jmp     _fflush
.text:0000000000005EDB ; } // starts at 5EA0
.text:0000000000005EDB rpl_fflush      endp
.text:0000000000005EDB
.text:0000000000005EE0
.text:0000000000005EE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005EE0
.text:0000000000005EE0 ; Attributes: info_from_lumina
.text:0000000000005EE0
.text:0000000000005EE0 ; int __fastcall rpl_fseeko(FILE *fp, off_t offset, int whence)
.text:0000000000005EE0                 public rpl_fseeko
.text:0000000000005EE0 rpl_fseeko      proc near               ; CODE XREF: rpl_fflush+32↑p
.text:0000000000005EE0 ; __unwind {
.text:0000000000005EE0                 mov     rax, [rdi+8]
.text:0000000000005EE4                 cmp     [rdi+10h], rax
.text:0000000000005EE8                 jz      short loc_5EF0
.text:0000000000005EEA
.text:0000000000005EEA loc_5EEA:                               ; CODE XREF: rpl_fseeko+18↓j
.text:0000000000005EEA                                         ; rpl_fseeko+1F↓j
.text:0000000000005EEA                 jmp     _fseeko
.text:0000000000005EEA ; ---------------------------------------------------------------------------
.text:0000000000005EEF                 align 10h
.text:0000000000005EF0
.text:0000000000005EF0 loc_5EF0:                               ; CODE XREF: rpl_fseeko+8↑j
.text:0000000000005EF0                 mov     rax, [rdi+20h]
.text:0000000000005EF4                 cmp     [rdi+28h], rax
.text:0000000000005EF8                 jnz     short loc_5EEA
.text:0000000000005EFA                 cmp     qword ptr [rdi+48h], 0
.text:0000000000005EFF                 jnz     short loc_5EEA
.text:0000000000005F01                 push    r12
.text:0000000000005F03                 push    rbp
.text:0000000000005F04                 mov     r12d, edx
.text:0000000000005F07                 push    rbx
.text:0000000000005F08                 mov     rbp, rsi
.text:0000000000005F0B                 mov     rbx, rdi
.text:0000000000005F0E                 call    _fileno
.text:0000000000005F13                 mov     edx, r12d       ; whence
.text:0000000000005F16                 mov     rsi, rbp        ; offset
.text:0000000000005F19                 mov     edi, eax        ; fd
.text:0000000000005F1B                 call    _lseek
.text:0000000000005F20                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000005F24                 jz      short loc_5F32
.text:0000000000005F26                 and     dword ptr [rbx], 0FFFFFFEFh
.text:0000000000005F29                 mov     [rbx+90h], rax
.text:0000000000005F30                 xor     eax, eax
.text:0000000000005F32
.text:0000000000005F32 loc_5F32:                               ; CODE XREF: rpl_fseeko+44↑j
.text:0000000000005F32                 pop     rbx
.text:0000000000005F33                 pop     rbp
.text:0000000000005F34                 pop     r12
.text:0000000000005F36                 retn
.text:0000000000005F36 ; } // starts at 5EE0
.text:0000000000005F36 rpl_fseeko      endp
.text:0000000000005F36
.text:0000000000005F36 ; ---------------------------------------------------------------------------
.text:0000000000005F37                 align 20h
.text:0000000000005F40
.text:0000000000005F40 ; =============== S U B R O U T I N E =======================================
.text:0000000000005F40
.text:0000000000005F40 ; Attributes: info_from_lumina
.text:0000000000005F40
.text:0000000000005F40 ; size_t __fastcall rpl_mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
.text:0000000000005F40                 public rpl_mbrtowc
.text:0000000000005F40 rpl_mbrtowc     proc near               ; CODE XREF: quotearg_buffer_restyled+956↑p
.text:0000000000005F40                                         ; build_wcs_buffer+6F↓p ...
.text:0000000000005F40
.text:0000000000005F40 pwc             = dword ptr -34h
.text:0000000000005F40 var_30          = qword ptr -30h
.text:0000000000005F40
.text:0000000000005F40 ; __unwind {
.text:0000000000005F40                 push    r13
.text:0000000000005F42                 push    r12
.text:0000000000005F44                 mov     r13, rsi
.text:0000000000005F47                 push    rbp
.text:0000000000005F48                 push    rbx
.text:0000000000005F49                 mov     rbx, rdi
.text:0000000000005F4C                 mov     r12, rdx
.text:0000000000005F4F                 sub     rsp, 18h
.text:0000000000005F53                 mov     rax, fs:28h
.text:0000000000005F5C                 mov     [rsp+38h+var_30], rax
.text:0000000000005F61                 xor     eax, eax
.text:0000000000005F63                 lea     rax, [rsp+38h+pwc]
.text:0000000000005F68                 test    rdi, rdi
.text:0000000000005F6B                 cmovz   rbx, rax
.text:0000000000005F6F                 mov     rdi, rbx        ; pwc
.text:0000000000005F72                 call    _mbrtowc
.text:0000000000005F77                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:0000000000005F7B                 mov     rbp, rax
.text:0000000000005F7E                 jbe     short loc_5FA0
.text:0000000000005F80                 test    r12, r12
.text:0000000000005F83                 jz      short loc_5FA0
.text:0000000000005F85                 xor     edi, edi
.text:0000000000005F87                 call    hard_locale
.text:0000000000005F8C                 test    al, al
.text:0000000000005F8E                 jnz     short loc_5FA0
.text:0000000000005F90                 movzx   eax, byte ptr [r13+0]
.text:0000000000005F95                 mov     ebp, 1
.text:0000000000005F9A                 mov     [rbx], eax
.text:0000000000005F9C                 nop     dword ptr [rax+00h]
.text:0000000000005FA0
.text:0000000000005FA0 loc_5FA0:                               ; CODE XREF: rpl_mbrtowc+3E↑j
.text:0000000000005FA0                                         ; rpl_mbrtowc+43↑j ...
.text:0000000000005FA0                 mov     rdx, [rsp+38h+var_30]
.text:0000000000005FA5                 xor     rdx, fs:28h
.text:0000000000005FAE                 mov     rax, rbp
.text:0000000000005FB1                 jnz     short loc_5FBE
.text:0000000000005FB3                 add     rsp, 18h
.text:0000000000005FB7                 pop     rbx
.text:0000000000005FB8                 pop     rbp
.text:0000000000005FB9                 pop     r12
.text:0000000000005FBB                 pop     r13
.text:0000000000005FBD                 retn
.text:0000000000005FBE ; ---------------------------------------------------------------------------
.text:0000000000005FBE
.text:0000000000005FBE loc_5FBE:                               ; CODE XREF: rpl_mbrtowc+71↑j
.text:0000000000005FBE                 call    ___stack_chk_fail
.text:0000000000005FBE ; } // starts at 5F40
.text:0000000000005FBE rpl_mbrtowc     endp
.text:0000000000005FBE
.text:0000000000005FBE ; ---------------------------------------------------------------------------
.text:0000000000005FC3                 align 10h
.text:0000000000005FD0
.text:0000000000005FD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005FD0
.text:0000000000005FD0
.text:0000000000005FD0 peek_token_bracket proc near            ; CODE XREF: parse_bracket_element_constprop_37+1FB↓p
.text:0000000000005FD0                                         ; parse_expression+854↓p ...
.text:0000000000005FD0 ; __unwind {
.text:0000000000005FD0                 mov     rax, [rsi+48h]
.text:0000000000005FD4                 cmp     [rsi+68h], rax
.text:0000000000005FD8                 jle     short loc_6030
.text:0000000000005FDA                 mov     r8, [rsi+8]
.text:0000000000005FDE                 cmp     dword ptr [rsi+90h], 1
.text:0000000000005FE5                 movzx   ecx, byte ptr [r8+rax]
.text:0000000000005FEA                 mov     [rdi], cl
.text:0000000000005FEC                 jle     short loc_6003
.text:0000000000005FEE                 cmp     rax, [rsi+30h]
.text:0000000000005FF2                 jz      short loc_6003
.text:0000000000005FF4                 mov     r9, [rsi+10h]
.text:0000000000005FF8                 cmp     dword ptr [r9+rax*4], 0FFFFFFFFh
.text:0000000000005FFD                 jz      loc_607F
.text:0000000000006003
.text:0000000000006003 loc_6003:                               ; CODE XREF: peek_token_bracket+1C↑j
.text:0000000000006003                                         ; peek_token_bracket+22↑j
.text:0000000000006003                 cmp     cl, 5Ch ; '\'
.text:0000000000006006                 jz      short loc_6070
.text:0000000000006008                 cmp     cl, 5Bh ; '['
.text:000000000000600B                 jz      short loc_6040
.text:000000000000600D                 cmp     cl, 5Dh ; ']'
.text:0000000000006010                 jz      loc_60B0
.text:0000000000006016                 cmp     cl, 5Eh ; '^'
.text:0000000000006019                 jz      loc_60A0
.text:000000000000601F                 cmp     cl, 2Dh ; '-'
.text:0000000000006022                 jnz     short loc_607F
.text:0000000000006024                 mov     byte ptr [rdi+8], 16h
.text:0000000000006028                 mov     eax, 1
.text:000000000000602D                 retn
.text:000000000000602D ; ---------------------------------------------------------------------------
.text:000000000000602E                 align 10h
.text:0000000000006030
.text:0000000000006030 loc_6030:                               ; CODE XREF: peek_token_bracket+8↑j
.text:0000000000006030                 mov     byte ptr [rdi+8], 2
.text:0000000000006034                 xor     eax, eax
.text:0000000000006036                 retn
.text:0000000000006036 ; ---------------------------------------------------------------------------
.text:0000000000006037                 align 20h
.text:0000000000006040
.text:0000000000006040 loc_6040:                               ; CODE XREF: peek_token_bracket+3B↑j
.text:0000000000006040                 lea     rcx, [rax+1]
.text:0000000000006044                 cmp     rcx, [rsi+58h]
.text:0000000000006048                 jge     short loc_6090
.text:000000000000604A                 movzx   eax, byte ptr [r8+rax+1]
.text:0000000000006050                 cmp     al, 3Ah ; ':'
.text:0000000000006052                 mov     [rdi], al
.text:0000000000006054                 jz      loc_60F0
.text:000000000000605A                 cmp     al, 3Dh ; '='
.text:000000000000605C                 jz      loc_60E0
.text:0000000000006062                 cmp     al, 2Eh ; '.'
.text:0000000000006064                 jnz     short loc_6090
.text:0000000000006066                 mov     byte ptr [rdi+8], 1Ah
.text:000000000000606A                 mov     eax, 2
.text:000000000000606F                 retn
.text:0000000000006070 ; ---------------------------------------------------------------------------
.text:0000000000006070
.text:0000000000006070 loc_6070:                               ; CODE XREF: peek_token_bracket+36↑j
.text:0000000000006070                 and     edx, 1
.text:0000000000006073                 jz      short loc_607F
.text:0000000000006075                 lea     rdx, [rax+1]
.text:0000000000006079                 cmp     rdx, [rsi+58h]
.text:000000000000607D                 jl      short loc_60C0
.text:000000000000607F
.text:000000000000607F loc_607F:                               ; CODE XREF: peek_token_bracket+2D↑j
.text:000000000000607F                                         ; peek_token_bracket+52↑j ...
.text:000000000000607F                 mov     byte ptr [rdi+8], 1
.text:0000000000006083                 mov     eax, 1
.text:0000000000006088                 retn
.text:0000000000006088 ; ---------------------------------------------------------------------------
.text:0000000000006089                 align 10h
.text:0000000000006090
.text:0000000000006090 loc_6090:                               ; CODE XREF: peek_token_bracket+78↑j
.text:0000000000006090                                         ; peek_token_bracket+94↑j ...
.text:0000000000006090                 mov     byte ptr [rdi+8], 1
.text:0000000000006094                 mov     byte ptr [rdi], 5Bh ; '['
.text:0000000000006097                 mov     eax, 1
.text:000000000000609C                 retn
.text:000000000000609C ; ---------------------------------------------------------------------------
.text:000000000000609D                 align 20h
.text:00000000000060A0
.text:00000000000060A0 loc_60A0:                               ; CODE XREF: peek_token_bracket+49↑j
.text:00000000000060A0                 mov     byte ptr [rdi+8], 19h
.text:00000000000060A4                 mov     eax, 1
.text:00000000000060A9                 retn
.text:00000000000060A9 ; ---------------------------------------------------------------------------
.text:00000000000060AA                 align 10h
.text:00000000000060B0
.text:00000000000060B0 loc_60B0:                               ; CODE XREF: peek_token_bracket+40↑j
.text:00000000000060B0                 mov     byte ptr [rdi+8], 15h
.text:00000000000060B4                 mov     eax, 1
.text:00000000000060B9                 retn
.text:00000000000060B9 ; ---------------------------------------------------------------------------
.text:00000000000060BA                 align 20h
.text:00000000000060C0
.text:00000000000060C0 loc_60C0:                               ; CODE XREF: peek_token_bracket+AD↑j
.text:00000000000060C0                 mov     [rsi+48h], rdx
.text:00000000000060C4                 movzx   eax, byte ptr [r8+rax+1]
.text:00000000000060CA                 mov     byte ptr [rdi+8], 1
.text:00000000000060CE                 mov     [rdi], al
.text:00000000000060D0                 mov     eax, 1
.text:00000000000060D5                 retn
.text:00000000000060D5 ; ---------------------------------------------------------------------------
.text:00000000000060D6                 align 20h
.text:00000000000060E0
.text:00000000000060E0 loc_60E0:                               ; CODE XREF: peek_token_bracket+8C↑j
.text:00000000000060E0                 mov     byte ptr [rdi+8], 1Ch
.text:00000000000060E4                 mov     eax, 2
.text:00000000000060E9                 retn
.text:00000000000060E9 ; ---------------------------------------------------------------------------
.text:00000000000060EA                 align 10h
.text:00000000000060F0
.text:00000000000060F0 loc_60F0:                               ; CODE XREF: peek_token_bracket+84↑j
.text:00000000000060F0                 and     edx, 4
.text:00000000000060F3                 jz      short loc_6090
.text:00000000000060F5                 mov     byte ptr [rdi+8], 1Eh
.text:00000000000060F9                 mov     eax, 2
.text:00000000000060FE                 retn
.text:00000000000060FE ; } // starts at 5FD0
.text:00000000000060FE peek_token_bracket endp
.text:00000000000060FE
.text:00000000000060FE ; ---------------------------------------------------------------------------
.text:00000000000060FF                 align 20h
.text:0000000000006100
.text:0000000000006100 ; =============== S U B R O U T I N E =======================================
.text:0000000000006100
.text:0000000000006100
.text:0000000000006100 mark_opt_subexp proc near               ; DATA XREF: parse_expression+594↓o
.text:0000000000006100 ; __unwind {
.text:0000000000006100                 cmp     byte ptr [rsi+30h], 11h
.text:0000000000006104                 jz      short loc_6110
.text:0000000000006106
.text:0000000000006106 loc_6106:                               ; CODE XREF: mark_opt_subexp+14↓j
.text:0000000000006106                 xor     eax, eax
.text:0000000000006108                 retn
.text:0000000000006108 ; ---------------------------------------------------------------------------
.text:0000000000006109                 align 10h
.text:0000000000006110
.text:0000000000006110 loc_6110:                               ; CODE XREF: mark_opt_subexp+4↑j
.text:0000000000006110                 cmp     rdi, [rsi+28h]
.text:0000000000006114                 jnz     short loc_6106
.text:0000000000006116                 or      byte ptr [rsi+32h], 8
.text:000000000000611A                 xor     eax, eax
.text:000000000000611C                 retn
.text:000000000000611C ; } // starts at 6100
.text:000000000000611C mark_opt_subexp endp
.text:000000000000611C
.text:000000000000611C ; ---------------------------------------------------------------------------
.text:000000000000611D                 align 20h
.text:0000000000006120
.text:0000000000006120 ; =============== S U B R O U T I N E =======================================
.text:0000000000006120
.text:0000000000006120
.text:0000000000006120 check_dst_limits_calc_pos_1 proc near   ; CODE XREF: check_dst_limits_calc_pos_1+15D↓p
.text:0000000000006120                                         ; check_dst_limits_calc_pos+58↓j
.text:0000000000006120
.text:0000000000006120 var_78          = qword ptr -78h
.text:0000000000006120 var_70          = dword ptr -70h
.text:0000000000006120 var_6C          = dword ptr -6Ch
.text:0000000000006120 var_68          = qword ptr -68h
.text:0000000000006120 var_60          = qword ptr -60h
.text:0000000000006120 var_58          = dword ptr -58h
.text:0000000000006120 var_52          = word ptr -52h
.text:0000000000006120 var_50          = qword ptr -50h
.text:0000000000006120 var_48          = qword ptr -48h
.text:0000000000006120 var_40          = qword ptr -40h
.text:0000000000006120
.text:0000000000006120 ; __unwind {
.text:0000000000006120                 push    r15
.text:0000000000006122                 push    r14
.text:0000000000006124                 mov     r9, rdx
.text:0000000000006127                 push    r13
.text:0000000000006129                 push    r12
.text:000000000000612B                 lea     rdx, [rcx+rcx*2]
.text:000000000000612F                 push    rbp
.text:0000000000006130                 push    rbx
.text:0000000000006131                 mov     r15d, esi
.text:0000000000006134                 sub     rsp, 48h
.text:0000000000006138                 mov     r14, [rdi+98h]
.text:000000000000613F                 mov     [rsp+78h+var_78], rdi
.text:0000000000006143                 mov     rax, [r14+30h]
.text:0000000000006147                 lea     r12, [rax+rdx*8]
.text:000000000000614B                 cmp     qword ptr [r12+8], 0
.text:0000000000006151                 jle     loc_62E5
.text:0000000000006157                 lea     rax, [r8+r8*4]
.text:000000000000615B                 mov     r11, rcx
.text:000000000000615E                 mov     ecx, r9d
.text:0000000000006161                 mov     r10, r8
.text:0000000000006164                 xor     ebx, ebx
.text:0000000000006166                 mov     [rsp+78h+var_58], esi
.text:000000000000616A                 shl     rax, 3
.text:000000000000616E                 mov     r15, r9
.text:0000000000006171                 mov     [rsp+78h+var_68], r11
.text:0000000000006176                 mov     [rsp+78h+var_50], rax
.text:000000000000617B                 mov     eax, 1
.text:0000000000006180                 shl     rax, cl
.text:0000000000006183                 mov     [rsp+78h+var_60], rax
.text:0000000000006188                 not     eax
.text:000000000000618A                 mov     [rsp+78h+var_52], ax
.text:000000000000618F                 mov     eax, esi
.text:0000000000006191                 and     eax, 1
.text:0000000000006194                 mov     [rsp+78h+var_6C], eax
.text:0000000000006198                 mov     eax, esi
.text:000000000000619A                 and     eax, 2
.text:000000000000619D                 mov     [rsp+78h+var_70], eax
.text:00000000000061A1                 jmp     short loc_61C5
.text:00000000000061A1 ; ---------------------------------------------------------------------------
.text:00000000000061A3                 align 8
.text:00000000000061A8
.text:00000000000061A8 loc_61A8:                               ; CODE XREF: check_dst_limits_calc_pos_1+BF↓j
.text:00000000000061A8                 cmp     dl, 9
.text:00000000000061AB                 jz      loc_6300
.text:00000000000061B1                 cmp     dl, 4
.text:00000000000061B4                 jz      short loc_6208
.text:00000000000061B6
.text:00000000000061B6 loc_61B6:                               ; CODE XREF: check_dst_limits_calc_pos_1+C7↓j
.text:00000000000061B6                                         ; check_dst_limits_calc_pos_1+CC↓j ...
.text:00000000000061B6                 add     rbx, 1
.text:00000000000061BA                 cmp     [r12+8], rbx
.text:00000000000061BF                 jle     loc_62E0
.text:00000000000061C5
.text:00000000000061C5 loc_61C5:                               ; CODE XREF: check_dst_limits_calc_pos_1+81↑j
.text:00000000000061C5                                         ; check_dst_limits_calc_pos_1+1B4↓j
.text:00000000000061C5                 mov     rax, [r12+10h]
.text:00000000000061CA                 mov     rbp, [rax+rbx*8]
.text:00000000000061CE                 mov     rax, rbp
.text:00000000000061D1                 shl     rax, 4
.text:00000000000061D5                 add     rax, [r14]
.text:00000000000061D8                 movzx   edx, byte ptr [rax+8]
.text:00000000000061DC                 cmp     dl, 8
.text:00000000000061DF                 jnz     short loc_61A8
.text:00000000000061E1                 mov     ecx, [rsp+78h+var_6C]
.text:00000000000061E5                 test    ecx, ecx
.text:00000000000061E7                 jz      short loc_61B6
.text:00000000000061E9                 cmp     [rax], r15
.text:00000000000061EC                 jnz     short loc_61B6
.text:00000000000061EE
.text:00000000000061EE loc_61EE:                               ; CODE XREF: check_dst_limits_calc_pos_1+165↓j
.text:00000000000061EE                 add     rsp, 48h
.text:00000000000061F2                 mov     eax, 0FFFFFFFFh
.text:00000000000061F7                 pop     rbx
.text:00000000000061F8                 pop     rbp
.text:00000000000061F9                 pop     r12
.text:00000000000061FB                 pop     r13
.text:00000000000061FD                 pop     r14
.text:00000000000061FF                 pop     r15
.text:0000000000006201                 retn
.text:0000000000006201 ; ---------------------------------------------------------------------------
.text:0000000000006202                 align 8
.text:0000000000006208
.text:0000000000006208 loc_6208:                               ; CODE XREF: check_dst_limits_calc_pos_1+94↑j
.text:0000000000006208                 cmp     r10, 0FFFFFFFFFFFFFFFFh
.text:000000000000620C                 jz      short loc_61B6
.text:000000000000620E                 mov     rax, [rsp+78h+var_78]
.text:0000000000006212                 mov     r13, [rsp+78h+var_50]
.text:0000000000006217                 mov     rdi, rbp
.text:000000000000621A                 mov     [rsp+78h+var_48], r12
.text:000000000000621F                 mov     [rsp+78h+var_40], rbx
.text:0000000000006224                 mov     r12, r10
.text:0000000000006227                 add     r13, [rax+0D8h]
.text:000000000000622E                 lea     rax, [rbp+rbp*2+0]
.text:0000000000006233                 mov     rbp, r14
.text:0000000000006236                 mov     r14, rdi
.text:0000000000006239                 shl     rax, 3
.text:000000000000623D                 mov     rbx, rax
.text:0000000000006240
.text:0000000000006240 loc_6240:                               ; CODE XREF: check_dst_limits_calc_pos_1+199↓j
.text:0000000000006240                 cmp     [r13+0], r14
.text:0000000000006244                 jnz     short loc_62B0
.text:0000000000006246                 cmp     r15, 3Fh ; '?'
.text:000000000000624A                 jg      short loc_6258
.text:000000000000624C                 movzx   eax, word ptr [r13+22h]
.text:0000000000006251                 test    [rsp+78h+var_60], rax
.text:0000000000006256                 jz      short loc_62B0
.text:0000000000006258
.text:0000000000006258 loc_6258:                               ; CODE XREF: check_dst_limits_calc_pos_1+12A↑j
.text:0000000000006258                 mov     rax, [rbp+28h]
.text:000000000000625C                 mov     rax, [rax+rbx+10h]
.text:0000000000006261                 mov     rcx, [rax]
.text:0000000000006264                 cmp     [rsp+78h+var_68], rcx
.text:0000000000006269                 jz      loc_6330
.text:000000000000626F                 mov     esi, [rsp+78h+var_58]
.text:0000000000006273                 mov     rdi, [rsp+78h+var_78]
.text:0000000000006277                 mov     r8, r12
.text:000000000000627A                 mov     rdx, r15
.text:000000000000627D                 call    check_dst_limits_calc_pos_1
.text:0000000000006282                 cmp     eax, 0FFFFFFFFh
.text:0000000000006285                 jz      loc_61EE
.text:000000000000628B                 test    eax, eax
.text:000000000000628D                 jnz     short loc_6297
.text:000000000000628F                 mov     esi, [rsp+78h+var_70]
.text:0000000000006293                 test    esi, esi
.text:0000000000006295                 jnz     short loc_6315
.text:0000000000006297
.text:0000000000006297 loc_6297:                               ; CODE XREF: check_dst_limits_calc_pos_1+16D↑j
.text:0000000000006297                 cmp     r15, 3Fh ; '?'
.text:000000000000629B                 jg      short loc_62B0
.text:000000000000629D                 movzx   eax, [rsp+78h+var_52]
.text:00000000000062A2                 and     [r13+22h], ax
.text:00000000000062A7                 nop     word ptr [rax+rax+00000000h]
.text:00000000000062B0
.text:00000000000062B0 loc_62B0:                               ; CODE XREF: check_dst_limits_calc_pos_1+124↑j
.text:00000000000062B0                                         ; check_dst_limits_calc_pos_1+136↑j ...
.text:00000000000062B0                 add     r13, 28h ; '('
.text:00000000000062B4                 cmp     byte ptr [r13-8], 0
.text:00000000000062B9                 jnz     short loc_6240
.text:00000000000062BB                 mov     rbx, [rsp+78h+var_40]
.text:00000000000062C0                 mov     r10, r12
.text:00000000000062C3                 mov     r12, [rsp+78h+var_48]
.text:00000000000062C8                 mov     r14, rbp
.text:00000000000062CB                 add     rbx, 1
.text:00000000000062CF                 cmp     [r12+8], rbx
.text:00000000000062D4                 jg      loc_61C5
.text:00000000000062DA                 nop     word ptr [rax+rax+00h]
.text:00000000000062E0
.text:00000000000062E0 loc_62E0:                               ; CODE XREF: check_dst_limits_calc_pos_1+9F↑j
.text:00000000000062E0                 mov     r15d, [rsp+78h+var_58]
.text:00000000000062E5
.text:00000000000062E5 loc_62E5:                               ; CODE XREF: check_dst_limits_calc_pos_1+31↑j
.text:00000000000062E5                 add     rsp, 48h
.text:00000000000062E9                 mov     eax, r15d
.text:00000000000062EC                 pop     rbx
.text:00000000000062ED                 sar     eax, 1
.text:00000000000062EF                 pop     rbp
.text:00000000000062F0                 pop     r12
.text:00000000000062F2                 pop     r13
.text:00000000000062F4                 pop     r14
.text:00000000000062F6                 pop     r15
.text:00000000000062F8                 retn
.text:00000000000062F8 ; ---------------------------------------------------------------------------
.text:00000000000062F9                 align 20h
.text:0000000000006300
.text:0000000000006300 loc_6300:                               ; CODE XREF: check_dst_limits_calc_pos_1+8B↑j
.text:0000000000006300                 mov     edx, [rsp+78h+var_70]
.text:0000000000006304                 test    edx, edx
.text:0000000000006306                 jz      loc_61B6
.text:000000000000630C                 cmp     [rax], r15
.text:000000000000630F                 jnz     loc_61B6
.text:0000000000006315
.text:0000000000006315 loc_6315:                               ; CODE XREF: check_dst_limits_calc_pos_1+175↑j
.text:0000000000006315                 add     rsp, 48h
.text:0000000000006319                 xor     eax, eax
.text:000000000000631B                 pop     rbx
.text:000000000000631C                 pop     rbp
.text:000000000000631D                 pop     r12
.text:000000000000631F                 pop     r13
.text:0000000000006321                 pop     r14
.text:0000000000006323                 pop     r15
.text:0000000000006325                 retn
.text:0000000000006325 ; ---------------------------------------------------------------------------
.text:0000000000006326                 align 10h
.text:0000000000006330
.text:0000000000006330 loc_6330:                               ; CODE XREF: check_dst_limits_calc_pos_1+149↑j
.text:0000000000006330                 mov     r15d, [rsp+78h+var_58]
.text:0000000000006335                 add     rsp, 48h
.text:0000000000006339                 pop     rbx
.text:000000000000633A                 pop     rbp
.text:000000000000633B                 mov     eax, r15d
.text:000000000000633E                 and     eax, 1
.text:0000000000006341                 pop     r12
.text:0000000000006343                 neg     eax
.text:0000000000006345                 pop     r13
.text:0000000000006347                 pop     r14
.text:0000000000006349                 pop     r15
.text:000000000000634B                 retn
.text:000000000000634B ; } // starts at 6120
.text:000000000000634B check_dst_limits_calc_pos_1 endp
.text:000000000000634B
.text:000000000000634B ; ---------------------------------------------------------------------------
.text:000000000000634C                 align 10h
.text:0000000000006350
.text:0000000000006350 ; =============== S U B R O U T I N E =======================================
.text:0000000000006350
.text:0000000000006350
.text:0000000000006350 check_dst_limits_calc_pos proc near     ; CODE XREF: check_dst_limits_isra_13+1AE↓p
.text:0000000000006350                                         ; check_dst_limits_isra_13+1D0↓p
.text:0000000000006350 ; __unwind {
.text:0000000000006350                 mov     rax, [rdi+0D8h]
.text:0000000000006357                 lea     rsi, [rsi+rsi*4]
.text:000000000000635B                 lea     rax, [rax+rsi*8]
.text:000000000000635F                 mov     r10, [rax+10h]
.text:0000000000006363                 cmp     r10, r8
.text:0000000000006366                 jg      short loc_63B0
.text:0000000000006368                 mov     rax, [rax+18h]
.text:000000000000636C                 cmp     rax, r8
.text:000000000000636F                 jl      short loc_6390
.text:0000000000006371                 xor     esi, esi
.text:0000000000006373                 cmp     r10, r8
.text:0000000000006376                 setz    sil
.text:000000000000637A                 or      esi, 2
.text:000000000000637D                 cmp     rax, r8
.text:0000000000006380                 jz      short loc_63A5
.text:0000000000006382                 xor     eax, eax
.text:0000000000006384                 cmp     r10, r8
.text:0000000000006387                 jz      short loc_63A0
.text:0000000000006389                 rep retn
.text:0000000000006389 ; ---------------------------------------------------------------------------
.text:000000000000638B                 align 10h
.text:0000000000006390
.text:0000000000006390 loc_6390:                               ; CODE XREF: check_dst_limits_calc_pos+1F↑j
.text:0000000000006390                 mov     eax, 1
.text:0000000000006395                 retn
.text:0000000000006395 ; ---------------------------------------------------------------------------
.text:0000000000006396                 align 20h
.text:00000000000063A0
.text:00000000000063A0 loc_63A0:                               ; CODE XREF: check_dst_limits_calc_pos+37↑j
.text:00000000000063A0                 mov     esi, 1
.text:00000000000063A5
.text:00000000000063A5 loc_63A5:                               ; CODE XREF: check_dst_limits_calc_pos+30↑j
.text:00000000000063A5                 mov     r8, r9
.text:00000000000063A8                 jmp     check_dst_limits_calc_pos_1
.text:00000000000063A8 ; ---------------------------------------------------------------------------
.text:00000000000063AD                 align 10h
.text:00000000000063B0
.text:00000000000063B0 loc_63B0:                               ; CODE XREF: check_dst_limits_calc_pos+16↑j
.text:00000000000063B0                 mov     eax, 0FFFFFFFFh
.text:00000000000063B5                 retn
.text:00000000000063B5 ; } // starts at 6350
.text:00000000000063B5 check_dst_limits_calc_pos endp
.text:00000000000063B5
.text:00000000000063B5 ; ---------------------------------------------------------------------------
.text:00000000000063B6                 align 20h
.text:00000000000063C0
.text:00000000000063C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000063C0
.text:00000000000063C0
.text:00000000000063C0 postorder       proc near               ; CODE XREF: parse_expression+ED↓p
.text:00000000000063C0                                         ; parse_expression+398↓p ...
.text:00000000000063C0 ; __unwind {
.text:00000000000063C0                 push    r12
.text:00000000000063C2                 mov     r12, rsi
.text:00000000000063C5                 push    rbp
.text:00000000000063C6                 mov     rbp, rdx
.text:00000000000063C9                 push    rbx
.text:00000000000063CA                 mov     rbx, rdi
.text:00000000000063CD                 jmp     short loc_63D3
.text:00000000000063CD ; ---------------------------------------------------------------------------
.text:00000000000063CF                 align 10h
.text:00000000000063D0
.text:00000000000063D0 loc_63D0:                               ; CODE XREF: postorder+1A↓j
.text:00000000000063D0                                         ; postorder+23↓j ...
.text:00000000000063D0                 mov     rbx, rax
.text:00000000000063D3
.text:00000000000063D3 loc_63D3:                               ; CODE XREF: postorder+D↑j
.text:00000000000063D3                 mov     rax, [rbx+8]
.text:00000000000063D7                 test    rax, rax
.text:00000000000063DA                 jnz     short loc_63D0
.text:00000000000063DC                 mov     rax, [rbx+10h]
.text:00000000000063E0                 test    rax, rax
.text:00000000000063E3                 jnz     short loc_63D0
.text:00000000000063E5                 mov     rsi, rbx
.text:00000000000063E8                 mov     rdi, rbp
.text:00000000000063EB                 call    r12
.text:00000000000063EE                 test    eax, eax
.text:00000000000063F0                 jnz     short loc_6426
.text:00000000000063F2                 nop     word ptr [rax+rax+00h]
.text:00000000000063F8
.text:00000000000063F8 loc_63F8:                               ; CODE XREF: postorder+64↓j
.text:00000000000063F8                 mov     rdx, [rbx]
.text:00000000000063FB                 test    rdx, rdx
.text:00000000000063FE                 jz      short loc_6426
.text:0000000000006400                 mov     rax, [rdx+10h]
.text:0000000000006404                 cmp     rax, rbx
.text:0000000000006407                 mov     rbx, rdx
.text:000000000000640A                 setz    sil
.text:000000000000640E                 test    rax, rax
.text:0000000000006411                 setz    cl
.text:0000000000006414                 or      sil, cl
.text:0000000000006417                 jz      short loc_63D0
.text:0000000000006419                 mov     rsi, rbx
.text:000000000000641C                 mov     rdi, rbp
.text:000000000000641F                 call    r12
.text:0000000000006422                 test    eax, eax
.text:0000000000006424                 jz      short loc_63F8
.text:0000000000006426
.text:0000000000006426 loc_6426:                               ; CODE XREF: postorder+30↑j
.text:0000000000006426                                         ; postorder+3E↑j
.text:0000000000006426                 pop     rbx
.text:0000000000006427                 pop     rbp
.text:0000000000006428                 pop     r12
.text:000000000000642A                 retn
.text:000000000000642A ; } // starts at 63C0
.text:000000000000642A postorder       endp
.text:000000000000642A
.text:000000000000642A ; ---------------------------------------------------------------------------
.text:000000000000642B                 align 10h
.text:0000000000006430
.text:0000000000006430 ; =============== S U B R O U T I N E =======================================
.text:0000000000006430
.text:0000000000006430
.text:0000000000006430 preorder        proc near               ; CODE XREF: re_compile_internal+61B↓p
.text:0000000000006430                                         ; re_compile_internal+6A3↓p
.text:0000000000006430 ; __unwind {
.text:0000000000006430                 push    r12
.text:0000000000006432                 mov     r12, rsi
.text:0000000000006435                 push    rbp
.text:0000000000006436                 mov     rbp, rdx
.text:0000000000006439                 push    rbx
.text:000000000000643A                 mov     rbx, rdi
.text:000000000000643D                 jmp     short loc_6443
.text:000000000000643D ; ---------------------------------------------------------------------------
.text:000000000000643F                 align 20h
.text:0000000000006440
.text:0000000000006440 loc_6440:                               ; CODE XREF: preorder+29↓j
.text:0000000000006440                                         ; preorder+3F↓j
.text:0000000000006440                 mov     rbx, rdx
.text:0000000000006443
.text:0000000000006443 loc_6443:                               ; CODE XREF: preorder+D↑j
.text:0000000000006443                 mov     rsi, rbx
.text:0000000000006446                 mov     rdi, rbp
.text:0000000000006449                 call    r12
.text:000000000000644C                 test    eax, eax
.text:000000000000644E                 jnz     short loc_647C
.text:0000000000006450                 mov     rdx, [rbx+8]
.text:0000000000006454                 xor     ecx, ecx
.text:0000000000006456                 test    rdx, rdx
.text:0000000000006459                 jnz     short loc_6440
.text:000000000000645B                 jmp     short loc_6463
.text:000000000000645B ; ---------------------------------------------------------------------------
.text:000000000000645D                 align 20h
.text:0000000000006460
.text:0000000000006460 loc_6460:                               ; CODE XREF: preorder+4A↓j
.text:0000000000006460                 mov     rbx, rdx
.text:0000000000006463
.text:0000000000006463 loc_6463:                               ; CODE XREF: preorder+2B↑j
.text:0000000000006463                 mov     rdx, [rbx+10h]
.text:0000000000006467                 cmp     rdx, rcx
.text:000000000000646A                 jz      short loc_6471
.text:000000000000646C                 test    rdx, rdx
.text:000000000000646F                 jnz     short loc_6440
.text:0000000000006471
.text:0000000000006471 loc_6471:                               ; CODE XREF: preorder+3A↑j
.text:0000000000006471                 mov     rdx, [rbx]
.text:0000000000006474                 mov     rcx, rbx
.text:0000000000006477                 test    rdx, rdx
.text:000000000000647A                 jnz     short loc_6460
.text:000000000000647C
.text:000000000000647C loc_647C:                               ; CODE XREF: preorder+1E↑j
.text:000000000000647C                 pop     rbx
.text:000000000000647D                 pop     rbp
.text:000000000000647E                 pop     r12
.text:0000000000006480                 retn
.text:0000000000006480 ; } // starts at 6430
.text:0000000000006480 preorder        endp
.text:0000000000006480
.text:0000000000006480 ; ---------------------------------------------------------------------------
.text:0000000000006481                 align 10h
.text:0000000000006490
.text:0000000000006490 ; =============== S U B R O U T I N E =======================================
.text:0000000000006490
.text:0000000000006490
.text:0000000000006490 re_string_realloc_buffers proc near     ; CODE XREF: extend_buffers+38↓p
.text:0000000000006490                                         ; re_search_internal+24B↓p ...
.text:0000000000006490 ; __unwind {
.text:0000000000006490                 push    rbp
.text:0000000000006491                 push    rbx
.text:0000000000006492                 mov     rbp, rsi
.text:0000000000006495                 mov     rbx, rdi
.text:0000000000006498                 sub     rsp, 8
.text:000000000000649C                 cmp     dword ptr [rdi+90h], 1
.text:00000000000064A3                 jle     short loc_64ED
.text:00000000000064A5                 mov     rax, 1FFFFFFFFFFFFFFFh
.text:00000000000064AF                 cmp     rsi, rax
.text:00000000000064B2                 ja      short loc_6520
.text:00000000000064B4                 mov     rdi, [rdi+10h]  ; ptr
.text:00000000000064B8                 lea     rsi, ds:0[rsi*4] ; size
.text:00000000000064C0                 call    _realloc
.text:00000000000064C5                 test    rax, rax
.text:00000000000064C8                 jz      short loc_6520
.text:00000000000064CA                 mov     rdi, [rbx+18h]  ; ptr
.text:00000000000064CE                 mov     [rbx+10h], rax
.text:00000000000064D2                 test    rdi, rdi
.text:00000000000064D5                 jz      short loc_64ED
.text:00000000000064D7                 lea     rsi, ds:0[rbp*8] ; size
.text:00000000000064DF                 call    _realloc
.text:00000000000064E4                 test    rax, rax
.text:00000000000064E7                 jz      short loc_6520
.text:00000000000064E9                 mov     [rbx+18h], rax
.text:00000000000064ED
.text:00000000000064ED loc_64ED:                               ; CODE XREF: re_string_realloc_buffers+13↑j
.text:00000000000064ED                                         ; re_string_realloc_buffers+45↑j
.text:00000000000064ED                 cmp     byte ptr [rbx+8Bh], 0
.text:00000000000064F4                 jnz     short loc_6508
.text:00000000000064F6
.text:00000000000064F6 loc_64F6:                               ; CODE XREF: re_string_realloc_buffers+8D↓j
.text:00000000000064F6                 mov     [rbx+40h], rbp
.text:00000000000064FA                 add     rsp, 8
.text:00000000000064FE                 xor     eax, eax
.text:0000000000006500                 pop     rbx
.text:0000000000006501                 pop     rbp
.text:0000000000006502                 retn
.text:0000000000006502 ; ---------------------------------------------------------------------------
.text:0000000000006503                 align 8
.text:0000000000006508
.text:0000000000006508 loc_6508:                               ; CODE XREF: re_string_realloc_buffers+64↑j
.text:0000000000006508                 mov     rdi, [rbx+8]    ; ptr
.text:000000000000650C                 mov     rsi, rbp        ; size
.text:000000000000650F                 call    _realloc
.text:0000000000006514                 test    rax, rax
.text:0000000000006517                 jz      short loc_6520
.text:0000000000006519                 mov     [rbx+8], rax
.text:000000000000651D                 jmp     short loc_64F6
.text:000000000000651D ; ---------------------------------------------------------------------------
.text:000000000000651F                 align 20h
.text:0000000000006520
.text:0000000000006520 loc_6520:                               ; CODE XREF: re_string_realloc_buffers+22↑j
.text:0000000000006520                                         ; re_string_realloc_buffers+38↑j ...
.text:0000000000006520                 add     rsp, 8
.text:0000000000006524                 mov     eax, 0Ch
.text:0000000000006529                 pop     rbx
.text:000000000000652A                 pop     rbp
.text:000000000000652B                 retn
.text:000000000000652B ; } // starts at 6490
.text:000000000000652B re_string_realloc_buffers endp
.text:000000000000652B
.text:000000000000652B ; ---------------------------------------------------------------------------
.text:000000000000652C                 align 10h
.text:0000000000006530
.text:0000000000006530 ; =============== S U B R O U T I N E =======================================
.text:0000000000006530
.text:0000000000006530
.text:0000000000006530 re_node_set_insert_last proc near       ; CODE XREF: register_state+75↓p
.text:0000000000006530                                         ; re_compile_internal+B61↓p
.text:0000000000006530 ; __unwind {
.text:0000000000006530                 push    rbp
.text:0000000000006531                 push    rbx
.text:0000000000006532                 mov     rbp, rsi
.text:0000000000006535                 mov     rbx, rdi
.text:0000000000006538                 sub     rsp, 8
.text:000000000000653C                 mov     rsi, [rdi+8]
.text:0000000000006540                 cmp     [rdi], rsi
.text:0000000000006543                 mov     rax, [rdi+10h]
.text:0000000000006547                 jz      short loc_6568
.text:0000000000006549
.text:0000000000006549 loc_6549:                               ; CODE XREF: re_node_set_insert_last+5C↓j
.text:0000000000006549                 lea     rdx, [rsi+1]
.text:000000000000654D                 mov     [rbx+8], rdx
.text:0000000000006551                 mov     [rax+rsi*8], rbp
.text:0000000000006555                 mov     eax, 1
.text:000000000000655A
.text:000000000000655A loc_655A:                               ; CODE XREF: re_node_set_insert_last+62↓j
.text:000000000000655A                 add     rsp, 8
.text:000000000000655E                 pop     rbx
.text:000000000000655F                 pop     rbp
.text:0000000000006560                 retn
.text:0000000000006560 ; ---------------------------------------------------------------------------
.text:0000000000006561                 align 8
.text:0000000000006568
.text:0000000000006568 loc_6568:                               ; CODE XREF: re_node_set_insert_last+17↑j
.text:0000000000006568                 add     rsi, 1
.text:000000000000656C                 lea     rdx, [rsi+rsi]
.text:0000000000006570                 shl     rsi, 4          ; size
.text:0000000000006574                 mov     [rdi], rdx
.text:0000000000006577                 mov     rdi, rax        ; ptr
.text:000000000000657A                 call    _realloc
.text:000000000000657F                 test    rax, rax
.text:0000000000006582                 jz      short loc_6590
.text:0000000000006584                 mov     [rbx+10h], rax
.text:0000000000006588                 mov     rsi, [rbx+8]
.text:000000000000658C                 jmp     short loc_6549
.text:000000000000658C ; ---------------------------------------------------------------------------
.text:000000000000658E                 align 10h
.text:0000000000006590
.text:0000000000006590 loc_6590:                               ; CODE XREF: re_node_set_insert_last+52↑j
.text:0000000000006590                 xor     eax, eax
.text:0000000000006592                 jmp     short loc_655A
.text:0000000000006592 ; } // starts at 6530
.text:0000000000006592 re_node_set_insert_last endp
.text:0000000000006592
.text:0000000000006592 ; ---------------------------------------------------------------------------
.text:0000000000006594                 align 20h
.text:00000000000065A0
.text:00000000000065A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000065A0
.text:00000000000065A0
.text:00000000000065A0 re_node_set_insert proc near            ; CODE XREF: duplicate_node_closure+E0↓p
.text:00000000000065A0                                         ; duplicate_node_closure+11A↓p ...
.text:00000000000065A0 ; __unwind {
.text:00000000000065A0                 push    rbp
.text:00000000000065A1                 push    rbx
.text:00000000000065A2                 mov     rbp, rsi
.text:00000000000065A5                 mov     rbx, rdi
.text:00000000000065A8                 sub     rsp, 8
.text:00000000000065AC                 mov     rdx, [rdi]
.text:00000000000065AF                 test    rdx, rdx
.text:00000000000065B2                 jz      short loc_65D8
.text:00000000000065B4                 mov     rsi, [rdi+8]
.text:00000000000065B8                 mov     rax, [rdi+10h]
.text:00000000000065BC                 test    rsi, rsi
.text:00000000000065BF                 jnz     short loc_6610
.text:00000000000065C1                 mov     [rax], rbp
.text:00000000000065C4                 add     qword ptr [rdi+8], 1
.text:00000000000065C9                 mov     eax, 1
.text:00000000000065CE
.text:00000000000065CE loc_65CE:                               ; CODE XREF: re_node_set_insert+B1↓j
.text:00000000000065CE                                         ; re_node_set_insert+F7↓j ...
.text:00000000000065CE                 add     rsp, 8
.text:00000000000065D2                 pop     rbx
.text:00000000000065D3                 pop     rbp
.text:00000000000065D4                 retn
.text:00000000000065D4 ; ---------------------------------------------------------------------------
.text:00000000000065D5                 align 8
.text:00000000000065D8
.text:00000000000065D8 loc_65D8:                               ; CODE XREF: re_node_set_insert+12↑j
.text:00000000000065D8                 mov     qword ptr [rdi], 1
.text:00000000000065DF                 mov     qword ptr [rdi+8], 1
.text:00000000000065E7                 mov     edi, 8          ; size
.text:00000000000065EC                 call    _malloc
.text:00000000000065F1                 test    rax, rax
.text:00000000000065F4                 mov     [rbx+10h], rax
.text:00000000000065F8                 jz      loc_6688
.text:00000000000065FE                 mov     [rax], rbp
.text:0000000000006601                 add     rsp, 8
.text:0000000000006605                 mov     eax, 1
.text:000000000000660A                 pop     rbx
.text:000000000000660B                 pop     rbp
.text:000000000000660C                 retn
.text:000000000000660C ; ---------------------------------------------------------------------------
.text:000000000000660D                 align 10h
.text:0000000000006610
.text:0000000000006610 loc_6610:                               ; CODE XREF: re_node_set_insert+1F↑j
.text:0000000000006610                 cmp     rdx, rsi
.text:0000000000006613                 jz      loc_66A0
.text:0000000000006619
.text:0000000000006619 loc_6619:                               ; CODE XREF: re_node_set_insert+120↓j
.text:0000000000006619                 cmp     [rax], rbp
.text:000000000000661C                 lea     rdx, ds:0[rsi*8]
.text:0000000000006624                 jle     short loc_6660
.text:0000000000006626                 test    rsi, rsi
.text:0000000000006629                 jle     short loc_6643
.text:000000000000662B                 add     rdx, rax
.text:000000000000662E                 xchg    ax, ax
.text:0000000000006630
.text:0000000000006630 loc_6630:                               ; CODE XREF: re_node_set_insert+9F↓j
.text:0000000000006630                 mov     rcx, [rdx-8]
.text:0000000000006634                 sub     rdx, 8
.text:0000000000006638                 mov     [rdx+8], rcx
.text:000000000000663C                 cmp     rax, rdx
.text:000000000000663F                 jnz     short loc_6630
.text:0000000000006641                 xor     edx, edx
.text:0000000000006643
.text:0000000000006643 loc_6643:                               ; CODE XREF: re_node_set_insert+89↑j
.text:0000000000006643                                         ; re_node_set_insert+C8↓j ...
.text:0000000000006643                 mov     [rax+rdx], rbp
.text:0000000000006647                 mov     eax, 1
.text:000000000000664C                 add     qword ptr [rbx+8], 1
.text:0000000000006651                 jmp     loc_65CE
.text:0000000000006651 ; ---------------------------------------------------------------------------
.text:0000000000006656                 align 20h
.text:0000000000006660
.text:0000000000006660 loc_6660:                               ; CODE XREF: re_node_set_insert+84↑j
.text:0000000000006660                 mov     rcx, [rax+rdx-8]
.text:0000000000006665                 cmp     rbp, rcx
.text:0000000000006668                 jge     short loc_6643
.text:000000000000666A                 nop     word ptr [rax+rax+00h]
.text:0000000000006670
.text:0000000000006670 loc_6670:                               ; CODE XREF: re_node_set_insert+E0↓j
.text:0000000000006670                 mov     [rax+rdx], rcx
.text:0000000000006674                 sub     rdx, 8
.text:0000000000006678                 mov     rcx, [rax+rdx-8]
.text:000000000000667D                 cmp     rcx, rbp
.text:0000000000006680                 jg      short loc_6670
.text:0000000000006682                 jmp     short loc_6643
.text:0000000000006682 ; ---------------------------------------------------------------------------
.text:0000000000006684                 align 8
.text:0000000000006688
.text:0000000000006688 loc_6688:                               ; CODE XREF: re_node_set_insert+58↑j
.text:0000000000006688                 mov     qword ptr [rbx+8], 0
.text:0000000000006690                 mov     qword ptr [rbx], 0
.text:0000000000006697                 jmp     loc_65CE
.text:0000000000006697 ; ---------------------------------------------------------------------------
.text:000000000000669C                 align 20h
.text:00000000000066A0
.text:00000000000066A0 loc_66A0:                               ; CODE XREF: re_node_set_insert+73↑j
.text:00000000000066A0                 lea     rdx, [rsi+rsi]
.text:00000000000066A4                 shl     rsi, 4          ; size
.text:00000000000066A8                 mov     [rdi], rdx
.text:00000000000066AB                 mov     rdi, rax        ; ptr
.text:00000000000066AE                 call    _realloc
.text:00000000000066B3                 test    rax, rax
.text:00000000000066B6                 jz      short loc_66C5
.text:00000000000066B8                 mov     [rbx+10h], rax
.text:00000000000066BC                 mov     rsi, [rbx+8]
.text:00000000000066C0                 jmp     loc_6619
.text:00000000000066C5 ; ---------------------------------------------------------------------------
.text:00000000000066C5
.text:00000000000066C5 loc_66C5:                               ; CODE XREF: re_node_set_insert+116↑j
.text:00000000000066C5                 xor     eax, eax
.text:00000000000066C7                 jmp     loc_65CE
.text:00000000000066C7 ; } // starts at 65A0
.text:00000000000066C7 re_node_set_insert endp
.text:00000000000066C7
.text:00000000000066C7 ; ---------------------------------------------------------------------------
.text:00000000000066CC                 align 10h
.text:00000000000066D0
.text:00000000000066D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000066D0
.text:00000000000066D0
.text:00000000000066D0 register_state  proc near               ; CODE XREF: re_acquire_state_context+201↓p
.text:00000000000066D0                                         ; re_acquire_state+186↓p
.text:00000000000066D0 ; __unwind {
.text:00000000000066D0                 push    r14
.text:00000000000066D2                 push    r13
.text:00000000000066D4                 mov     r14, rdi
.text:00000000000066D7                 push    r12
.text:00000000000066D9                 push    rbp
.text:00000000000066DA                 mov     r12, rdx
.text:00000000000066DD                 push    rbx
.text:00000000000066DE                 mov     rbx, [rsi+10h]
.text:00000000000066E2                 mov     rbp, rsi
.text:00000000000066E5                 mov     [rsi], rdx
.text:00000000000066E8                 mov     qword ptr [rsi+28h], 0
.text:00000000000066F0                 lea     r13, [rsi+20h]
.text:00000000000066F4                 lea     rdi, ds:0[rbx*8] ; size
.text:00000000000066FC                 mov     [rsi+20h], rbx
.text:0000000000006700                 call    _malloc
.text:0000000000006705                 test    rax, rax
.text:0000000000006708                 mov     [rbp+30h], rax
.text:000000000000670C                 jz      short loc_674E
.text:000000000000670E                 test    rbx, rbx
.text:0000000000006711                 jle     short loc_6760
.text:0000000000006713                 xor     ebx, ebx
.text:0000000000006715                 jmp     short loc_672A
.text:0000000000006715 ; ---------------------------------------------------------------------------
.text:0000000000006717                 align 20h
.text:0000000000006720
.text:0000000000006720 loc_6720:                               ; CODE XREF: register_state+70↓j
.text:0000000000006720                                         ; register_state+7C↓j
.text:0000000000006720                 add     rbx, 1
.text:0000000000006724                 cmp     [rbp+10h], rbx
.text:0000000000006728                 jle     short loc_6760
.text:000000000000672A
.text:000000000000672A loc_672A:                               ; CODE XREF: register_state+45↑j
.text:000000000000672A                 mov     rax, [rbp+18h]
.text:000000000000672E                 mov     rsi, [rax+rbx*8]
.text:0000000000006732                 mov     rax, rsi
.text:0000000000006735                 shl     rax, 4
.text:0000000000006739                 add     rax, [r14]
.text:000000000000673C                 test    byte ptr [rax+8], 8
.text:0000000000006740                 jnz     short loc_6720
.text:0000000000006742                 mov     rdi, r13
.text:0000000000006745                 call    re_node_set_insert_last
.text:000000000000674A                 test    al, al
.text:000000000000674C                 jnz     short loc_6720
.text:000000000000674E
.text:000000000000674E loc_674E:                               ; CODE XREF: register_state+3C↑j
.text:000000000000674E                                         ; register_state+D9↓j
.text:000000000000674E                 pop     rbx
.text:000000000000674F                 mov     eax, 0Ch
.text:0000000000006754                 pop     rbp
.text:0000000000006755                 pop     r12
.text:0000000000006757                 pop     r13
.text:0000000000006759                 pop     r14
.text:000000000000675B                 retn
.text:000000000000675B ; ---------------------------------------------------------------------------
.text:000000000000675C                 align 20h
.text:0000000000006760
.text:0000000000006760 loc_6760:                               ; CODE XREF: register_state+41↑j
.text:0000000000006760                                         ; register_state+58↑j
.text:0000000000006760                 and     r12, [r14+88h]
.text:0000000000006767                 mov     rax, [r14+40h]
.text:000000000000676B                 lea     rdx, [r12+r12*2]
.text:000000000000676F                 lea     rbx, [rax+rdx*8]
.text:0000000000006773                 mov     rdx, [rbx]
.text:0000000000006776                 cmp     [rbx+8], rdx
.text:000000000000677A                 mov     rax, [rbx+10h]
.text:000000000000677E                 lea     rsi, [rdx+1]
.text:0000000000006782                 jle     short loc_6796
.text:0000000000006784
.text:0000000000006784 loc_6784:                               ; CODE XREF: register_state+EA↓j
.text:0000000000006784                 mov     [rbx], rsi
.text:0000000000006787                 mov     [rax+rdx*8], rbp
.text:000000000000678B                 xor     eax, eax
.text:000000000000678D                 pop     rbx
.text:000000000000678E                 pop     rbp
.text:000000000000678F                 pop     r12
.text:0000000000006791                 pop     r13
.text:0000000000006793                 pop     r14
.text:0000000000006795                 retn
.text:0000000000006796 ; ---------------------------------------------------------------------------
.text:0000000000006796
.text:0000000000006796 loc_6796:                               ; CODE XREF: register_state+B2↑j
.text:0000000000006796                 lea     r12, [rsi+rsi]
.text:000000000000679A                 mov     rdi, rax        ; ptr
.text:000000000000679D                 shl     rsi, 4          ; size
.text:00000000000067A1                 call    _realloc
.text:00000000000067A6                 test    rax, rax
.text:00000000000067A9                 jz      short loc_674E
.text:00000000000067AB                 mov     rdx, [rbx]
.text:00000000000067AE                 mov     [rbx+10h], rax
.text:00000000000067B2                 mov     [rbx+8], r12
.text:00000000000067B6                 lea     rsi, [rdx+1]
.text:00000000000067BA                 jmp     short loc_6784
.text:00000000000067BA ; } // starts at 66D0
.text:00000000000067BA register_state  endp
.text:00000000000067BA
.text:00000000000067BA ; ---------------------------------------------------------------------------
.text:00000000000067BC                 align 20h
.text:00000000000067C0
.text:00000000000067C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000067C0
.text:00000000000067C0
.text:00000000000067C0 build_upper_buffer proc near            ; CODE XREF: extend_buffers:loc_7160↓p
.text:00000000000067C0                                         ; re_string_reconstruct+673↓p ...
.text:00000000000067C0 ; __unwind {
.text:00000000000067C0                 push    r12
.text:00000000000067C2                 mov     r12, [rdi+58h]
.text:00000000000067C6                 cmp     [rdi+40h], r12
.text:00000000000067CA                 push    rbp
.text:00000000000067CB                 mov     rbp, rdi
.text:00000000000067CE                 cmovle  r12, [rdi+40h]
.text:00000000000067D3                 push    rbx
.text:00000000000067D4                 mov     rbx, [rdi+30h]
.text:00000000000067D8                 cmp     r12, rbx
.text:00000000000067DB                 jle     short loc_6815
.text:00000000000067DD                 call    ___ctype_toupper_loc
.text:00000000000067E2                 nop     word ptr [rax+rax+00h]
.text:00000000000067E8
.text:00000000000067E8 loc_67E8:                               ; CODE XREF: build_upper_buffer+53↓j
.text:00000000000067E8                 mov     rdx, [rbp+0]
.text:00000000000067EC                 mov     rcx, [rbp+78h]
.text:00000000000067F0                 add     rdx, rbx
.text:00000000000067F3                 add     rdx, [rbp+28h]
.text:00000000000067F7                 test    rcx, rcx
.text:00000000000067FA                 movzx   edx, byte ptr [rdx]
.text:00000000000067FD                 jnz     short loc_6828
.text:00000000000067FF
.text:00000000000067FF loc_67FF:                               ; CODE XREF: build_upper_buffer+6C↓j
.text:00000000000067FF                 mov     rsi, [rax]
.text:0000000000006802                 mov     rcx, [rbp+8]
.text:0000000000006806                 mov     edx, [rsi+rdx*4]
.text:0000000000006809                 mov     [rcx+rbx], dl
.text:000000000000680C                 add     rbx, 1
.text:0000000000006810                 cmp     r12, rbx
.text:0000000000006813                 jnz     short loc_67E8
.text:0000000000006815
.text:0000000000006815 loc_6815:                               ; CODE XREF: build_upper_buffer+1B↑j
.text:0000000000006815                 mov     [rbp+30h], rbx
.text:0000000000006819                 mov     [rbp+38h], rbx
.text:000000000000681D                 pop     rbx
.text:000000000000681E                 pop     rbp
.text:000000000000681F                 pop     r12
.text:0000000000006821                 retn
.text:0000000000006821 ; ---------------------------------------------------------------------------
.text:0000000000006822                 align 8
.text:0000000000006828
.text:0000000000006828 loc_6828:                               ; CODE XREF: build_upper_buffer+3D↑j
.text:0000000000006828                 movzx   edx, byte ptr [rcx+rdx]
.text:000000000000682C                 jmp     short loc_67FF
.text:000000000000682C ; } // starts at 67C0
.text:000000000000682C build_upper_buffer endp
.text:000000000000682C
.text:000000000000682C ; ---------------------------------------------------------------------------
.text:000000000000682E                 align 10h
.text:0000000000006830
.text:0000000000006830 ; =============== S U B R O U T I N E =======================================
.text:0000000000006830
.text:0000000000006830
.text:0000000000006830 build_wcs_buffer proc near              ; CODE XREF: extend_buffers+113↓p
.text:0000000000006830                                         ; re_string_reconstruct:loc_9D38↓p ...
.text:0000000000006830
.text:0000000000006830 var_8C          = dword ptr -8Ch
.text:0000000000006830 var_88          = byte ptr -88h
.text:0000000000006830 var_40          = qword ptr -40h
.text:0000000000006830
.text:0000000000006830 ; __unwind {
.text:0000000000006830                 push    r15
.text:0000000000006832                 push    r14
.text:0000000000006834                 push    r13
.text:0000000000006836                 push    r12
.text:0000000000006838                 push    rbp
.text:0000000000006839                 push    rbx
.text:000000000000683A                 mov     rbx, rdi
.text:000000000000683D                 sub     rsp, 68h
.text:0000000000006841                 mov     r12, [rdi+58h]
.text:0000000000006845                 mov     rbp, [rdi+30h]
.text:0000000000006849                 mov     rax, fs:28h
.text:0000000000006852                 mov     [rsp+98h+var_40], rax
.text:0000000000006857                 xor     eax, eax
.text:0000000000006859                 cmp     [rdi+40h], r12
.text:000000000000685D                 cmovle  r12, [rdi+40h]
.text:0000000000006862                 cmp     r12, rbp
.text:0000000000006865                 jle     loc_68F4
.text:000000000000686B                 lea     r14, [rdi+20h]
.text:000000000000686F                 lea     r13, [rsp+98h+var_8C]
.text:0000000000006874                 nop     dword ptr [rax+00h]
.text:0000000000006878
.text:0000000000006878 loc_6878:                               ; CODE XREF: build_wcs_buffer+C2↓j
.text:0000000000006878                                         ; build_wcs_buffer+F6↓j
.text:0000000000006878                 mov     rdi, [rbx+78h]
.text:000000000000687C                 mov     rdx, r12
.text:000000000000687F                 mov     r15, [rbx+20h]
.text:0000000000006883                 sub     rdx, rbp
.text:0000000000006886                 test    rdi, rdi
.text:0000000000006889                 jnz     loc_6970
.text:000000000000688F                 mov     rsi, [rbx+28h]
.text:0000000000006893                 add     rsi, rbp
.text:0000000000006896                 add     rsi, [rbx]
.text:0000000000006899
.text:0000000000006899 loc_6899:                               ; CODE XREF: build_wcs_buffer+151↓j
.text:0000000000006899                                         ; build_wcs_buffer+167↓j ...
.text:0000000000006899                 mov     rcx, r14
.text:000000000000689C                 mov     rdi, r13
.text:000000000000689F                 call    rpl_mbrtowc
.text:00000000000068A4                 lea     rdx, [rax-1]
.text:00000000000068A8                 cmp     rdx, 0FFFFFFFFFFFFFFFDh
.text:00000000000068AC                 ja      loc_6940
.text:00000000000068B2                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:00000000000068B6                 mov     edx, [rsp+98h+var_8C]
.text:00000000000068BA                 jz      short loc_6930
.text:00000000000068BC
.text:00000000000068BC loc_68BC:                               ; CODE XREF: build_wcs_buffer+137↓j
.text:00000000000068BC                 mov     rcx, [rbx+10h]
.text:00000000000068C0                 lea     rsi, [rbp+1]
.text:00000000000068C4                 lea     rdi, ds:0[rbp*4]
.text:00000000000068CC                 mov     [rcx+rbp*4], edx
.text:00000000000068CF                 add     rbp, rax
.text:00000000000068D2                 cmp     rsi, rbp
.text:00000000000068D5                 jge     short loc_6920
.text:00000000000068D7                 lea     rdx, [rcx+rdi+4]
.text:00000000000068DC                 lea     rax, [rcx+rbp*4]
.text:00000000000068E0
.text:00000000000068E0 loc_68E0:                               ; CODE XREF: build_wcs_buffer+BD↓j
.text:00000000000068E0                 mov     dword ptr [rdx], 0FFFFFFFFh
.text:00000000000068E6                 add     rdx, 4
.text:00000000000068EA                 cmp     rax, rdx
.text:00000000000068ED                 jnz     short loc_68E0
.text:00000000000068EF                 cmp     rbp, r12
.text:00000000000068F2                 jl      short loc_6878
.text:00000000000068F4
.text:00000000000068F4 loc_68F4:                               ; CODE XREF: build_wcs_buffer+35↑j
.text:00000000000068F4                                         ; build_wcs_buffer+FC↓j ...
.text:00000000000068F4                 mov     rax, [rsp+98h+var_40]
.text:00000000000068F9                 xor     rax, fs:28h
.text:0000000000006902                 mov     [rbx+30h], rbp
.text:0000000000006906                 mov     [rbx+38h], rbp
.text:000000000000690A                 jnz     loc_69EE
.text:0000000000006910                 add     rsp, 68h
.text:0000000000006914                 pop     rbx
.text:0000000000006915                 pop     rbp
.text:0000000000006916                 pop     r12
.text:0000000000006918                 pop     r13
.text:000000000000691A                 pop     r14
.text:000000000000691C                 pop     r15
.text:000000000000691E                 retn
.text:000000000000691E ; ---------------------------------------------------------------------------
.text:000000000000691F                 align 20h
.text:0000000000006920
.text:0000000000006920 loc_6920:                               ; CODE XREF: build_wcs_buffer+A5↑j
.text:0000000000006920                 mov     rbp, rsi
.text:0000000000006923                 cmp     rbp, r12
.text:0000000000006926                 jl      loc_6878
.text:000000000000692C                 jmp     short loc_68F4
.text:000000000000692C ; ---------------------------------------------------------------------------
.text:000000000000692E                 align 10h
.text:0000000000006930
.text:0000000000006930 loc_6930:                               ; CODE XREF: build_wcs_buffer+8A↑j
.text:0000000000006930                 mov     rax, [rbx+58h]
.text:0000000000006934                 cmp     [rbx+40h], rax
.text:0000000000006938                 jl      loc_69D8
.text:000000000000693E                 xchg    ax, ax
.text:0000000000006940
.text:0000000000006940 loc_6940:                               ; CODE XREF: build_wcs_buffer+7C↑j
.text:0000000000006940                 mov     rax, [rbx]
.text:0000000000006943                 mov     rcx, [rbx+78h]
.text:0000000000006947                 add     rax, rbp
.text:000000000000694A                 add     rax, [rbx+28h]
.text:000000000000694E                 test    rcx, rcx
.text:0000000000006951                 movzx   edx, byte ptr [rax]
.text:0000000000006954                 mov     [rsp+98h+var_8C], edx
.text:0000000000006958                 jnz     loc_69E1
.text:000000000000695E
.text:000000000000695E loc_695E:                               ; CODE XREF: build_wcs_buffer+1B9↓j
.text:000000000000695E                 mov     [rbx+20h], r15
.text:0000000000006962                 mov     eax, 1
.text:0000000000006967                 jmp     loc_68BC
.text:0000000000006967 ; ---------------------------------------------------------------------------
.text:000000000000696C                 align 10h
.text:0000000000006970
.text:0000000000006970 loc_6970:                               ; CODE XREF: build_wcs_buffer+59↑j
.text:0000000000006970                 mov     ecx, [rbx+90h]
.text:0000000000006976                 xor     eax, eax
.text:0000000000006978                 lea     rsi, [rsp+98h+var_88]
.text:000000000000697D                 test    ecx, ecx
.text:000000000000697F                 jg      short loc_69A1
.text:0000000000006981                 jmp     loc_6899
.text:0000000000006981 ; ---------------------------------------------------------------------------
.text:0000000000006986                 align 10h
.text:0000000000006990
.text:0000000000006990 loc_6990:                               ; CODE XREF: build_wcs_buffer+19B↓j
.text:0000000000006990                 add     rax, 1
.text:0000000000006994                 cmp     rdx, rax
.text:0000000000006997                 jz      loc_6899
.text:000000000000699D                 mov     rdi, [rbx+78h]
.text:00000000000069A1
.text:00000000000069A1 loc_69A1:                               ; CODE XREF: build_wcs_buffer+14F↑j
.text:00000000000069A1                 mov     rcx, [rbx]
.text:00000000000069A4                 add     rcx, rbp
.text:00000000000069A7                 add     rcx, rax
.text:00000000000069AA                 add     rcx, [rbx+28h]
.text:00000000000069AE                 movzx   ecx, byte ptr [rcx]
.text:00000000000069B1                 movzx   ecx, byte ptr [rdi+rcx]
.text:00000000000069B5                 mov     rdi, [rbx+8]
.text:00000000000069B9                 add     rdi, rbp
.text:00000000000069BC                 mov     [rdi+rax], cl
.text:00000000000069BF                 mov     [rsi+rax], cl
.text:00000000000069C2                 lea     ecx, [rax+1]
.text:00000000000069C5                 cmp     ecx, [rbx+90h]
.text:00000000000069CB                 jl      short loc_6990
.text:00000000000069CD                 jmp     loc_6899
.text:00000000000069CD ; ---------------------------------------------------------------------------
.text:00000000000069D2                 align 8
.text:00000000000069D8
.text:00000000000069D8 loc_69D8:                               ; CODE XREF: build_wcs_buffer+108↑j
.text:00000000000069D8                 mov     [rbx+20h], r15
.text:00000000000069DC                 jmp     loc_68F4
.text:00000000000069E1 ; ---------------------------------------------------------------------------
.text:00000000000069E1
.text:00000000000069E1 loc_69E1:                               ; CODE XREF: build_wcs_buffer+128↑j
.text:00000000000069E1                 movzx   edx, byte ptr [rcx+rdx]
.text:00000000000069E5                 mov     [rsp+98h+var_8C], edx
.text:00000000000069E9                 jmp     loc_695E
.text:00000000000069EE ; ---------------------------------------------------------------------------
.text:00000000000069EE
.text:00000000000069EE loc_69EE:                               ; CODE XREF: build_wcs_buffer+DA↑j
.text:00000000000069EE                 call    ___stack_chk_fail
.text:00000000000069EE ; } // starts at 6830
.text:00000000000069EE build_wcs_buffer endp
.text:00000000000069EE
.text:00000000000069EE ; ---------------------------------------------------------------------------
.text:00000000000069F3                 align 20h
.text:0000000000006A00
.text:0000000000006A00 ; =============== S U B R O U T I N E =======================================
.text:0000000000006A00
.text:0000000000006A00
.text:0000000000006A00 build_wcs_upper_buffer proc near        ; CODE XREF: extend_buffers+95↓j
.text:0000000000006A00                                         ; re_string_reconstruct+12A↓p ...
.text:0000000000006A00
.text:0000000000006A00 var_D0          = qword ptr -0D0h
.text:0000000000006A00 src             = qword ptr -0C8h
.text:0000000000006A00 var_C0          = qword ptr -0C0h
.text:0000000000006A00 var_B8          = qword ptr -0B8h
.text:0000000000006A00 var_B0          = qword ptr -0B0h
.text:0000000000006A00 var_A8          = qword ptr -0A8h
.text:0000000000006A00 var_A0          = qword ptr -0A0h
.text:0000000000006A00 wc              = dword ptr -94h
.text:0000000000006A00 ps              = mbstate_t ptr -90h
.text:0000000000006A00 s               = byte ptr -88h
.text:0000000000006A00 var_40          = qword ptr -40h
.text:0000000000006A00
.text:0000000000006A00 ; __unwind {
.text:0000000000006A00                 push    r15
.text:0000000000006A02                 push    r14
.text:0000000000006A04                 mov     r14, rdi
.text:0000000000006A07                 push    r13
.text:0000000000006A09                 push    r12
.text:0000000000006A0B                 push    rbp
.text:0000000000006A0C                 push    rbx
.text:0000000000006A0D                 sub     rsp, 0A8h
.text:0000000000006A14                 mov     rbx, [rdi+58h]
.text:0000000000006A18                 mov     r15, [rdi+30h]
.text:0000000000006A1C                 mov     rax, fs:28h
.text:0000000000006A25                 mov     [rsp+0D8h+var_40], rax
.text:0000000000006A2D                 xor     eax, eax
.text:0000000000006A2F                 cmp     [rdi+40h], rbx
.text:0000000000006A33                 cmovle  rbx, [rdi+40h]
.text:0000000000006A38                 cmp     byte ptr [rdi+8Ah], 0
.text:0000000000006A3F                 jnz     short loc_6A4C
.text:0000000000006A41                 cmp     qword ptr [rdi+78h], 0
.text:0000000000006A46                 jz      loc_6BD0
.text:0000000000006A4C
.text:0000000000006A4C loc_6A4C:                               ; CODE XREF: build_wcs_upper_buffer+3F↑j
.text:0000000000006A4C                                         ; build_wcs_upper_buffer+1D7↓j
.text:0000000000006A4C                 mov     r13, [r14+38h]
.text:0000000000006A50
.text:0000000000006A50 loc_6A50:                               ; CODE XREF: build_wcs_upper_buffer+198↓j
.text:0000000000006A50                                         ; build_wcs_upper_buffer+1C2↓j ...
.text:0000000000006A50                 cmp     r15, rbx
.text:0000000000006A53                 jl      short loc_6A90
.text:0000000000006A55
.text:0000000000006A55 loc_6A55:                               ; CODE XREF: build_wcs_upper_buffer+4D1↓j
.text:0000000000006A55                 mov     [r14+30h], r15
.text:0000000000006A59                 mov     [r14+38h], r13
.text:0000000000006A5D                 xor     eax, eax
.text:0000000000006A5F
.text:0000000000006A5F loc_6A5F:                               ; CODE XREF: build_wcs_upper_buffer+382↓j
.text:0000000000006A5F                                         ; build_wcs_upper_buffer+5EB↓j
.text:0000000000006A5F                 mov     rcx, [rsp+0D8h+var_40]
.text:0000000000006A67                 xor     rcx, fs:28h
.text:0000000000006A70                 jnz     loc_6FFA
.text:0000000000006A76                 add     rsp, 0A8h
.text:0000000000006A7D                 pop     rbx
.text:0000000000006A7E                 pop     rbp
.text:0000000000006A7F                 pop     r12
.text:0000000000006A81                 pop     r13
.text:0000000000006A83                 pop     r14
.text:0000000000006A85                 pop     r15
.text:0000000000006A87                 retn
.text:0000000000006A87 ; ---------------------------------------------------------------------------
.text:0000000000006A88                 align 10h
.text:0000000000006A90
.text:0000000000006A90 loc_6A90:                               ; CODE XREF: build_wcs_upper_buffer+53↑j
.text:0000000000006A90                 lea     rax, [r14+20h]
.text:0000000000006A94                 mov     [rsp+0D8h+var_D0], rax
.text:0000000000006A99                 mov     rax, rbx
.text:0000000000006A9C                 sub     rax, r15
.text:0000000000006A9F                 mov     [rsp+0D8h+src], rax
.text:0000000000006AA4                 lea     rax, [rsp+0D8h+wc]
.text:0000000000006AA9                 mov     [rsp+0D8h+var_B8], rax
.text:0000000000006AAE
.text:0000000000006AAE loc_6AAE:                               ; CODE XREF: build_wcs_upper_buffer+41B↓j
.text:0000000000006AAE                 mov     rdx, [r14+78h]
.text:0000000000006AB2                 mov     rax, [r14+20h]
.text:0000000000006AB6                 test    rdx, rdx
.text:0000000000006AB9                 mov     qword ptr [rsp+0D8h+ps.__count], rax
.text:0000000000006ABE                 jnz     loc_6DC9
.text:0000000000006AC4                 mov     rbp, [r14+28h]
.text:0000000000006AC8                 add     rbp, r13
.text:0000000000006ACB                 add     rbp, [r14]
.text:0000000000006ACE                 mov     [rsp+0D8h+var_C0], rbp
.text:0000000000006AD3
.text:0000000000006AD3 loc_6AD3:                               ; CODE XREF: build_wcs_upper_buffer+410↓j
.text:0000000000006AD3                 mov     rcx, [rsp+0D8h+var_D0]
.text:0000000000006AD8                 mov     rdx, [rsp+0D8h+src]
.text:0000000000006ADD                 mov     rsi, [rsp+0D8h+var_C0]
.text:0000000000006AE2                 mov     rdi, [rsp+0D8h+var_B8]
.text:0000000000006AE7                 call    rpl_mbrtowc
.text:0000000000006AEC                 mov     rbp, rax
.text:0000000000006AEF                 lea     rax, [rax-1]
.text:0000000000006AF3                 cmp     rax, 0FFFFFFFFFFFFFFFCh
.text:0000000000006AF7                 mov     [rsp+0D8h+var_B8], rax
.text:0000000000006AFC                 ja      loc_6E39
.text:0000000000006B02                 mov     edx, [rsp+0D8h+wc]
.text:0000000000006B06                 mov     edi, edx        ; wc
.text:0000000000006B08                 mov     dword ptr [rsp+0D8h+src], edx
.text:0000000000006B0C                 call    _towupper
.text:0000000000006B11                 mov     edx, dword ptr [rsp+0D8h+src]
.text:0000000000006B15                 mov     r12d, eax
.text:0000000000006B18                 mov     [rsp+0D8h+var_D0], r15
.text:0000000000006B1D                 cmp     edx, eax
.text:0000000000006B1F                 jz      loc_6E20
.text:0000000000006B25                 lea     rcx, [rsp+0D8h+s]
.text:0000000000006B2A                 lea     rdx, [rsp+0D8h+ps] ; ps
.text:0000000000006B2F                 mov     esi, eax        ; wc
.text:0000000000006B31                 mov     rdi, rcx        ; s
.text:0000000000006B34                 mov     [rsp+0D8h+src], rcx
.text:0000000000006B39                 call    _wcrtomb
.text:0000000000006B3E                 cmp     rbp, rax
.text:0000000000006B41                 mov     r11, rax
.text:0000000000006B44                 mov     rcx, [rsp+0D8h+src]
.text:0000000000006B49                 jnz     loc_6ED6
.text:0000000000006B4F                 mov     rdi, [r14+8]
.text:0000000000006B53                 mov     rdx, rbp        ; n
.text:0000000000006B56                 mov     rsi, rcx        ; src
.text:0000000000006B59                 add     rdi, r15        ; dest
.text:0000000000006B5C                 call    _memcpy
.text:0000000000006B61
.text:0000000000006B61 loc_6B61:                               ; CODE XREF: build_wcs_upper_buffer+434↓j
.text:0000000000006B61                 cmp     byte ptr [r14+8Ch], 0
.text:0000000000006B69                 lea     rax, [rbp+r13+0]
.text:0000000000006B6E                 jnz     loc_6EA5
.text:0000000000006B74
.text:0000000000006B74 loc_6B74:                               ; CODE XREF: build_wcs_upper_buffer+4C3↓j
.text:0000000000006B74                 add     r15, 1
.text:0000000000006B78                 mov     rsi, [rsp+0D8h+var_D0]
.text:0000000000006B7D                 mov     rdx, [r14+10h]
.text:0000000000006B81                 lea     rcx, [r15+rbp-1]
.text:0000000000006B86                 mov     r13, rax
.text:0000000000006B89                 cmp     r15, rcx
.text:0000000000006B8C                 lea     rax, ds:0[rsi*4]
.text:0000000000006B94                 mov     [rdx+rsi*4], r12d
.text:0000000000006B98                 jge     loc_6A50
.text:0000000000006B9E                 lea     rax, [rdx+rax+4]
.text:0000000000006BA3                 lea     rdx, [rdx+rcx*4]
.text:0000000000006BA7                 nop     word ptr [rax+rax+00000000h]
.text:0000000000006BB0
.text:0000000000006BB0 loc_6BB0:                               ; CODE XREF: build_wcs_upper_buffer+1BD↓j
.text:0000000000006BB0                 mov     dword ptr [rax], 0FFFFFFFFh
.text:0000000000006BB6                 add     rax, 4
.text:0000000000006BBA                 cmp     rdx, rax
.text:0000000000006BBD                 jnz     short loc_6BB0
.text:0000000000006BBF                 mov     r15, rcx
.text:0000000000006BC2                 jmp     loc_6A50
.text:0000000000006BC2 ; ---------------------------------------------------------------------------
.text:0000000000006BC7                 align 10h
.text:0000000000006BD0
.text:0000000000006BD0 loc_6BD0:                               ; CODE XREF: build_wcs_upper_buffer+46↑j
.text:0000000000006BD0                 cmp     byte ptr [rdi+8Ch], 0
.text:0000000000006BD7                 jnz     loc_6A4C
.text:0000000000006BDD                 cmp     r15, rbx
.text:0000000000006BE0                 jge     loc_6D78
.text:0000000000006BE6                 lea     rax, [rdi+20h]
.text:0000000000006BEA                 mov     [rsp+0D8h+var_D0], rax
.text:0000000000006BEF                 lea     rax, [rsp+0D8h+wc]
.text:0000000000006BF4                 mov     [rsp+0D8h+var_A8], rax
.text:0000000000006BF9                 lea     rax, [rsp+0D8h+ps]
.text:0000000000006BFE                 mov     [rsp+0D8h+var_A0], rax
.text:0000000000006C03                 lea     rax, [rsp+0D8h+s]
.text:0000000000006C08                 mov     [rsp+0D8h+var_B0], rax
.text:0000000000006C0D                 nop     dword ptr [rax]
.text:0000000000006C10
.text:0000000000006C10 loc_6C10:                               ; CODE XREF: build_wcs_upper_buffer+2FD↓j
.text:0000000000006C10                 mov     rbp, [r14+28h]
.text:0000000000006C14                 mov     r13, r15
.text:0000000000006C17                 add     rbp, r15
.text:0000000000006C1A                 add     rbp, [r14]
.text:0000000000006C1D                 movzx   r12d, byte ptr [rbp+0]
.text:0000000000006C22                 test    r12b, 80h
.text:0000000000006C26                 jnz     short loc_6C3A
.text:0000000000006C28                 mov     rdi, [rsp+0D8h+var_D0] ; ps
.text:0000000000006C2D                 call    _mbsinit
.text:0000000000006C32                 test    eax, eax
.text:0000000000006C34                 jnz     loc_6D28
.text:0000000000006C3A
.text:0000000000006C3A loc_6C3A:                               ; CODE XREF: build_wcs_upper_buffer+226↑j
.text:0000000000006C3A                 mov     rax, [r14+20h]
.text:0000000000006C3E                 mov     rdi, [rsp+0D8h+var_A8]
.text:0000000000006C43                 mov     rdx, rbx
.text:0000000000006C46                 mov     rcx, [rsp+0D8h+var_D0]
.text:0000000000006C4B                 sub     rdx, r15
.text:0000000000006C4E                 mov     rsi, rbp
.text:0000000000006C51                 mov     [rsp+0D8h+src], rdx
.text:0000000000006C56                 mov     qword ptr [rsp+0D8h+ps.__count], rax
.text:0000000000006C5B                 mov     [rsp+0D8h+var_B8], rdi
.text:0000000000006C60                 call    rpl_mbrtowc
.text:0000000000006C65                 mov     rbp, rax
.text:0000000000006C68                 lea     rax, [rax-1]
.text:0000000000006C6C                 cmp     rax, 0FFFFFFFFFFFFFFFCh
.text:0000000000006C70                 ja      loc_6D58
.text:0000000000006C76                 mov     edx, [rsp+0D8h+wc]
.text:0000000000006C7A                 mov     edi, edx        ; wc
.text:0000000000006C7C                 mov     dword ptr [rsp+0D8h+var_C0], edx
.text:0000000000006C80                 call    _towupper
.text:0000000000006C85                 mov     edx, dword ptr [rsp+0D8h+var_C0]
.text:0000000000006C89                 mov     r12d, eax
.text:0000000000006C8C                 cmp     edx, eax
.text:0000000000006C8E                 jz      short loc_6D08
.text:0000000000006C90                 mov     rdx, [rsp+0D8h+var_A0] ; ps
.text:0000000000006C95                 mov     rdi, [rsp+0D8h+var_B0] ; s
.text:0000000000006C9A                 mov     esi, eax        ; wc
.text:0000000000006C9C                 call    _wcrtomb
.text:0000000000006CA1                 cmp     rbp, rax
.text:0000000000006CA4                 jnz     loc_6E18
.text:0000000000006CAA                 mov     rdi, [r14+8]
.text:0000000000006CAE                 mov     rsi, [rsp+0D8h+var_B0] ; src
.text:0000000000006CB3                 mov     rdx, rbp        ; n
.text:0000000000006CB6                 add     rdi, r15        ; dest
.text:0000000000006CB9                 call    _memcpy
.text:0000000000006CBE
.text:0000000000006CBE loc_6CBE:                               ; CODE XREF: build_wcs_upper_buffer+321↓j
.text:0000000000006CBE                 add     r15, 1
.text:0000000000006CC2                 mov     rdx, [r14+10h]
.text:0000000000006CC6                 lea     rax, ds:0[r13*4]
.text:0000000000006CCE                 lea     rcx, [r15+rbp-1]
.text:0000000000006CD3                 cmp     r15, rcx
.text:0000000000006CD6                 mov     [rdx+r13*4], r12d
.text:0000000000006CDA                 jge     short loc_6CFA
.text:0000000000006CDC                 lea     rax, [rdx+rax+4]
.text:0000000000006CE1                 lea     rdx, [rdx+rcx*4]
.text:0000000000006CE5                 nop     dword ptr [rax]
.text:0000000000006CE8
.text:0000000000006CE8 loc_6CE8:                               ; CODE XREF: build_wcs_upper_buffer+2F5↓j
.text:0000000000006CE8                 mov     dword ptr [rax], 0FFFFFFFFh
.text:0000000000006CEE                 add     rax, 4
.text:0000000000006CF2                 cmp     rdx, rax
.text:0000000000006CF5                 jnz     short loc_6CE8
.text:0000000000006CF7                 mov     r15, rcx
.text:0000000000006CFA
.text:0000000000006CFA loc_6CFA:                               ; CODE XREF: build_wcs_upper_buffer+2DA↑j
.text:0000000000006CFA                                         ; build_wcs_upper_buffer+351↓j ...
.text:0000000000006CFA                 cmp     rbx, r15
.text:0000000000006CFD                 jg      loc_6C10
.text:0000000000006D03                 jmp     short loc_6D78
.text:0000000000006D03 ; ---------------------------------------------------------------------------
.text:0000000000006D05                 align 8
.text:0000000000006D08
.text:0000000000006D08 loc_6D08:                               ; CODE XREF: build_wcs_upper_buffer+28E↑j
.text:0000000000006D08                 mov     rsi, [r14+28h]
.text:0000000000006D0C                 mov     rdi, [r14+8]
.text:0000000000006D10                 mov     rdx, rbp        ; n
.text:0000000000006D13                 add     rsi, r15
.text:0000000000006D16                 add     rsi, [r14]      ; src
.text:0000000000006D19                 add     rdi, r15        ; dest
.text:0000000000006D1C                 call    _memcpy
.text:0000000000006D21                 jmp     short loc_6CBE
.text:0000000000006D21 ; ---------------------------------------------------------------------------
.text:0000000000006D23                 align 8
.text:0000000000006D28
.text:0000000000006D28 loc_6D28:                               ; CODE XREF: build_wcs_upper_buffer+234↑j
.text:0000000000006D28                 call    ___ctype_toupper_loc
.text:0000000000006D2D                 mov     rax, [rax]
.text:0000000000006D30                 mov     rdx, [r14+8]
.text:0000000000006D34                 mov     eax, [rax+r12*4]
.text:0000000000006D38                 mov     [rdx+r15], al
.text:0000000000006D3C                 mov     rdx, [r14+8]
.text:0000000000006D40                 mov     rax, [r14+10h]
.text:0000000000006D44                 movzx   edx, byte ptr [rdx+r15]
.text:0000000000006D49                 mov     [rax+r15*4], edx
.text:0000000000006D4D                 add     r15, 1
.text:0000000000006D51                 jmp     short loc_6CFA
.text:0000000000006D51 ; ---------------------------------------------------------------------------
.text:0000000000006D53                 align 8
.text:0000000000006D58
.text:0000000000006D58 loc_6D58:                               ; CODE XREF: build_wcs_upper_buffer+270↑j
.text:0000000000006D58                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:0000000000006D5C                 jnz     short loc_6D90
.text:0000000000006D5E                 mov     rax, [r14+58h]
.text:0000000000006D62                 cmp     [r14+40h], rax
.text:0000000000006D66                 jge     short loc_6D90
.text:0000000000006D68                 mov     rax, qword ptr [rsp+0D8h+ps.__count]
.text:0000000000006D6D                 mov     [r14+20h], rax
.text:0000000000006D71                 nop     dword ptr [rax+00000000h]
.text:0000000000006D78
.text:0000000000006D78 loc_6D78:                               ; CODE XREF: build_wcs_upper_buffer+1E0↑j
.text:0000000000006D78                                         ; build_wcs_upper_buffer+303↑j
.text:0000000000006D78                 mov     [r14+30h], r15
.text:0000000000006D7C                 mov     [r14+38h], r15
.text:0000000000006D80                 xor     eax, eax
.text:0000000000006D82                 jmp     loc_6A5F
.text:0000000000006D82 ; ---------------------------------------------------------------------------
.text:0000000000006D87                 align 10h
.text:0000000000006D90
.text:0000000000006D90 loc_6D90:                               ; CODE XREF: build_wcs_upper_buffer+35C↑j
.text:0000000000006D90                                         ; build_wcs_upper_buffer+366↑j
.text:0000000000006D90                 mov     rax, [r14]
.text:0000000000006D93                 mov     rdx, [r14+8]
.text:0000000000006D97                 add     rax, r15
.text:0000000000006D9A                 add     rax, [r14+28h]
.text:0000000000006D9E                 movzx   eax, byte ptr [rax]
.text:0000000000006DA1                 mov     [rdx+r15], al
.text:0000000000006DA5                 mov     rdx, [r14+10h]
.text:0000000000006DA9                 add     r15, 1
.text:0000000000006DAD                 cmp     rbp, 0FFFFFFFFFFFFFFFFh
.text:0000000000006DB1                 mov     [rdx+r13*4], eax
.text:0000000000006DB5                 jnz     loc_6CFA
.text:0000000000006DBB                 mov     rax, qword ptr [rsp+0D8h+ps.__count]
.text:0000000000006DC0                 mov     [r14+20h], rax
.text:0000000000006DC4                 jmp     loc_6CFA
.text:0000000000006DC9 ; ---------------------------------------------------------------------------
.text:0000000000006DC9
.text:0000000000006DC9 loc_6DC9:                               ; CODE XREF: build_wcs_upper_buffer+BE↑j
.text:0000000000006DC9                 mov     eax, [r14+90h]
.text:0000000000006DD0                 test    eax, eax
.text:0000000000006DD2                 jle     loc_6FF0
.text:0000000000006DD8                 mov     rdi, [r14+28h]
.text:0000000000006DDC                 lea     r11d, [rax-1]
.text:0000000000006DE0                 lea     rcx, [rsp+0D8h+s]
.text:0000000000006DE5                 xor     eax, eax
.text:0000000000006DE7                 add     rdi, r13
.text:0000000000006DEA                 add     rdi, [r14]
.text:0000000000006DED                 jmp     short loc_6DFA
.text:0000000000006DEF ; ---------------------------------------------------------------------------
.text:0000000000006DEF
.text:0000000000006DEF loc_6DEF:                               ; CODE XREF: build_wcs_upper_buffer+409↓j
.text:0000000000006DEF                 add     rax, 1
.text:0000000000006DF3                 cmp     [rsp+0D8h+src], rax
.text:0000000000006DF8                 jz      short loc_6E0B
.text:0000000000006DFA
.text:0000000000006DFA loc_6DFA:                               ; CODE XREF: build_wcs_upper_buffer+3ED↑j
.text:0000000000006DFA                 movzx   esi, byte ptr [rdi+rax]
.text:0000000000006DFE                 cmp     r11, rax
.text:0000000000006E01                 movzx   esi, byte ptr [rdx+rsi]
.text:0000000000006E05                 mov     [rcx+rax], sil
.text:0000000000006E09                 jnz     short loc_6DEF
.text:0000000000006E0B
.text:0000000000006E0B loc_6E0B:                               ; CODE XREF: build_wcs_upper_buffer+3F8↑j
.text:0000000000006E0B                                         ; build_wcs_upper_buffer+5F5↓j
.text:0000000000006E0B                 mov     [rsp+0D8h+var_C0], rcx
.text:0000000000006E10                 jmp     loc_6AD3
.text:0000000000006E10 ; ---------------------------------------------------------------------------
.text:0000000000006E15                 align 8
.text:0000000000006E18
.text:0000000000006E18 loc_6E18:                               ; CODE XREF: build_wcs_upper_buffer+2A4↑j
.text:0000000000006E18                 mov     r13, r15
.text:0000000000006E1B                 jmp     loc_6AAE
.text:0000000000006E20 ; ---------------------------------------------------------------------------
.text:0000000000006E20
.text:0000000000006E20 loc_6E20:                               ; CODE XREF: build_wcs_upper_buffer+11F↑j
.text:0000000000006E20                                         ; build_wcs_upper_buffer+4DA↓j
.text:0000000000006E20                 mov     rdi, [r14+8]
.text:0000000000006E24                 mov     rsi, [rsp+0D8h+var_C0] ; src
.text:0000000000006E29                 mov     rdx, rbp        ; n
.text:0000000000006E2C                 add     rdi, r15        ; dest
.text:0000000000006E2F                 call    _memcpy
.text:0000000000006E34                 jmp     loc_6B61
.text:0000000000006E39 ; ---------------------------------------------------------------------------
.text:0000000000006E39
.text:0000000000006E39 loc_6E39:                               ; CODE XREF: build_wcs_upper_buffer+FC↑j
.text:0000000000006E39                 cmp     [rsp+0D8h+var_B8], 0FFFFFFFFFFFFFFFDh
.text:0000000000006E3F                 jnz     short loc_6E4B
.text:0000000000006E41                 mov     rax, [r14+58h]
.text:0000000000006E45                 cmp     [r14+40h], rax
.text:0000000000006E49                 jl      short loc_6EC8
.text:0000000000006E4B
.text:0000000000006E4B loc_6E4B:                               ; CODE XREF: build_wcs_upper_buffer+43F↑j
.text:0000000000006E4B                 mov     rax, [r14]
.text:0000000000006E4E                 mov     rdx, [r14+78h]
.text:0000000000006E52                 add     rax, r13
.text:0000000000006E55                 add     rax, [r14+28h]
.text:0000000000006E59                 test    rdx, rdx
.text:0000000000006E5C                 movzx   eax, byte ptr [rax]
.text:0000000000006E5F                 jnz     loc_700C
.text:0000000000006E65
.text:0000000000006E65 loc_6E65:                               ; CODE XREF: build_wcs_upper_buffer+610↓j
.text:0000000000006E65                 mov     rdx, [r14+8]
.text:0000000000006E69                 mov     rcx, r15
.text:0000000000006E6C                 mov     [rdx+r15], al
.text:0000000000006E70                 cmp     byte ptr [r14+8Ch], 0
.text:0000000000006E78                 jnz     loc_6FFF
.text:0000000000006E7E
.text:0000000000006E7E loc_6E7E:                               ; CODE XREF: build_wcs_upper_buffer+607↓j
.text:0000000000006E7E                 mov     rdx, [r14+10h]
.text:0000000000006E82                 add     r13, 1
.text:0000000000006E86                 add     r15, 1
.text:0000000000006E8A                 cmp     rbp, 0FFFFFFFFFFFFFFFFh
.text:0000000000006E8E                 mov     [rdx+rcx*4], eax
.text:0000000000006E91                 jnz     loc_6A50
.text:0000000000006E97                 mov     rax, qword ptr [rsp+0D8h+ps.__count]
.text:0000000000006E9C                 mov     [r14+20h], rax
.text:0000000000006EA0                 jmp     loc_6A50
.text:0000000000006EA5 ; ---------------------------------------------------------------------------
.text:0000000000006EA5
.text:0000000000006EA5 loc_6EA5:                               ; CODE XREF: build_wcs_upper_buffer+16E↑j
.text:0000000000006EA5                 mov     rdx, [r14+18h]
.text:0000000000006EA9                 mov     rcx, r15
.text:0000000000006EAC                 mov     r10, r13
.text:0000000000006EAF                 sub     rcx, r13
.text:0000000000006EB2                 lea     rdx, [rdx+rcx*8]
.text:0000000000006EB6
.text:0000000000006EB6 loc_6EB6:                               ; CODE XREF: build_wcs_upper_buffer+4C1↓j
.text:0000000000006EB6                 mov     [rdx+r10*8], r10
.text:0000000000006EBA                 add     r10, 1
.text:0000000000006EBE                 cmp     rax, r10
.text:0000000000006EC1                 jnz     short loc_6EB6
.text:0000000000006EC3                 jmp     loc_6B74
.text:0000000000006EC8 ; ---------------------------------------------------------------------------
.text:0000000000006EC8
.text:0000000000006EC8 loc_6EC8:                               ; CODE XREF: build_wcs_upper_buffer+449↑j
.text:0000000000006EC8                                         ; build_wcs_upper_buffer+4F3↓j
.text:0000000000006EC8                 mov     rax, qword ptr [rsp+0D8h+ps.__count]
.text:0000000000006ECD                 mov     [r14+20h], rax
.text:0000000000006ED1                 jmp     loc_6A55
.text:0000000000006ED6 ; ---------------------------------------------------------------------------
.text:0000000000006ED6
.text:0000000000006ED6 loc_6ED6:                               ; CODE XREF: build_wcs_upper_buffer+149↑j
.text:0000000000006ED6                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000006EDA                 jz      loc_6E20
.text:0000000000006EE0                 lea     rax, [rax+r15]
.text:0000000000006EE4                 mov     rsi, rax
.text:0000000000006EE7                 mov     [rsp+0D8h+var_D0], rax
.text:0000000000006EEC                 mov     rax, [r14+40h]
.text:0000000000006EF0                 cmp     rsi, rax
.text:0000000000006EF3                 ja      short loc_6EC8
.text:0000000000006EF5                 cmp     qword ptr [r14+18h], 0
.text:0000000000006EFA                 jz      loc_6FB8
.text:0000000000006F00
.text:0000000000006F00 loc_6F00:                               ; CODE XREF: build_wcs_upper_buffer+5E0↓j
.text:0000000000006F00                 cmp     byte ptr [r14+8Ch], 0
.text:0000000000006F08                 jnz     short loc_6F2A
.text:0000000000006F0A                 test    r15, r15
.text:0000000000006F0D                 jz      short loc_6F22
.text:0000000000006F0F                 mov     rdx, [r14+18h]
.text:0000000000006F13                 xor     eax, eax
.text:0000000000006F15
.text:0000000000006F15 loc_6F15:                               ; CODE XREF: build_wcs_upper_buffer+520↓j
.text:0000000000006F15                 mov     [rdx+rax*8], rax
.text:0000000000006F19                 add     rax, 1
.text:0000000000006F1D                 cmp     rax, r15
.text:0000000000006F20                 jnz     short loc_6F15
.text:0000000000006F22
.text:0000000000006F22 loc_6F22:                               ; CODE XREF: build_wcs_upper_buffer+50D↑j
.text:0000000000006F22                 mov     byte ptr [r14+8Ch], 1
.text:0000000000006F2A
.text:0000000000006F2A loc_6F2A:                               ; CODE XREF: build_wcs_upper_buffer+508↑j
.text:0000000000006F2A                 mov     rdi, [r14+8]
.text:0000000000006F2E                 mov     rsi, rcx        ; src
.text:0000000000006F31                 mov     rdx, r11        ; n
.text:0000000000006F34                 mov     [rsp+0D8h+src], r11
.text:0000000000006F39                 add     rdi, r15        ; dest
.text:0000000000006F3C                 call    _memcpy
.text:0000000000006F41                 mov     rax, [r14+10h]
.text:0000000000006F45                 mov     r11, [rsp+0D8h+src]
.text:0000000000006F4A                 lea     rcx, [rax+r15*4]
.text:0000000000006F4E                 mov     rax, [r14+18h]
.text:0000000000006F52                 cmp     r11, 1
.text:0000000000006F56                 mov     [rcx], r12d
.text:0000000000006F59                 lea     rsi, [rax+r15*8]
.text:0000000000006F5D                 mov     [rsi], r13
.text:0000000000006F60                 jbe     short loc_6F8A
.text:0000000000006F62                 mov     eax, 1
.text:0000000000006F67
.text:0000000000006F67 loc_6F67:                               ; CODE XREF: build_wcs_upper_buffer+588↓j
.text:0000000000006F67                 mov     rdx, [rsp+0D8h+var_B8]
.text:0000000000006F6C                 cmp     rax, rbp
.text:0000000000006F6F                 cmovb   rdx, rax
.text:0000000000006F73                 add     rdx, r13
.text:0000000000006F76                 mov     [rsi+rax*8], rdx
.text:0000000000006F7A                 mov     dword ptr [rcx+rax*4], 0FFFFFFFFh
.text:0000000000006F81                 add     rax, 1
.text:0000000000006F85                 cmp     rax, r11
.text:0000000000006F88                 jnz     short loc_6F67
.text:0000000000006F8A
.text:0000000000006F8A loc_6F8A:                               ; CODE XREF: build_wcs_upper_buffer+560↑j
.text:0000000000006F8A                 mov     rbx, [r14+58h]
.text:0000000000006F8E                 sub     r11, rbp
.text:0000000000006F91                 add     rbx, r11
.text:0000000000006F94                 cmp     r13, [r14+60h]
.text:0000000000006F98                 mov     [r14+58h], rbx
.text:0000000000006F9C                 jge     short loc_6FA2
.text:0000000000006F9E                 add     [r14+68h], r11
.text:0000000000006FA2
.text:0000000000006FA2 loc_6FA2:                               ; CODE XREF: build_wcs_upper_buffer+59C↑j
.text:0000000000006FA2                 cmp     [r14+40h], rbx
.text:0000000000006FA6                 mov     r15, [rsp+0D8h+var_D0]
.text:0000000000006FAB                 cmovle  rbx, [r14+40h]
.text:0000000000006FB0                 add     r13, rbp
.text:0000000000006FB3                 jmp     loc_6A50
.text:0000000000006FB8 ; ---------------------------------------------------------------------------
.text:0000000000006FB8
.text:0000000000006FB8 loc_6FB8:                               ; CODE XREF: build_wcs_upper_buffer+4FA↑j
.text:0000000000006FB8                 lea     rdi, ds:0[rax*8] ; size
.text:0000000000006FC0                 mov     [rsp+0D8h+var_C0], rcx
.text:0000000000006FC5                 mov     [rsp+0D8h+src], r11
.text:0000000000006FCA                 call    _malloc
.text:0000000000006FCF                 test    rax, rax
.text:0000000000006FD2                 mov     [r14+18h], rax
.text:0000000000006FD6                 mov     r11, [rsp+0D8h+src]
.text:0000000000006FDB                 mov     rcx, [rsp+0D8h+var_C0]
.text:0000000000006FE0                 jnz     loc_6F00
.text:0000000000006FE6                 mov     eax, 0Ch
.text:0000000000006FEB                 jmp     loc_6A5F
.text:0000000000006FF0 ; ---------------------------------------------------------------------------
.text:0000000000006FF0
.text:0000000000006FF0 loc_6FF0:                               ; CODE XREF: build_wcs_upper_buffer+3D2↑j
.text:0000000000006FF0                 lea     rcx, [rsp+0D8h+s]
.text:0000000000006FF5                 jmp     loc_6E0B
.text:0000000000006FFA ; ---------------------------------------------------------------------------
.text:0000000000006FFA
.text:0000000000006FFA loc_6FFA:                               ; CODE XREF: build_wcs_upper_buffer+70↑j
.text:0000000000006FFA                 call    ___stack_chk_fail
.text:0000000000006FFF ; ---------------------------------------------------------------------------
.text:0000000000006FFF
.text:0000000000006FFF loc_6FFF:                               ; CODE XREF: build_wcs_upper_buffer+478↑j
.text:0000000000006FFF                 mov     rdx, [r14+18h]
.text:0000000000007003                 mov     [rdx+r15*8], r13
.text:0000000000007007                 jmp     loc_6E7E
.text:000000000000700C ; ---------------------------------------------------------------------------
.text:000000000000700C
.text:000000000000700C loc_700C:                               ; CODE XREF: build_wcs_upper_buffer+45F↑j
.text:000000000000700C                 movzx   eax, byte ptr [rdx+rax]
.text:0000000000007010                 jmp     loc_6E65
.text:0000000000007010 ; } // starts at 6A00
.text:0000000000007010 build_wcs_upper_buffer endp
.text:0000000000007010
.text:0000000000007010 ; ---------------------------------------------------------------------------
.text:0000000000007015                 align 20h
.text:0000000000007020
.text:0000000000007020 ; =============== S U B R O U T I N E =======================================
.text:0000000000007020
.text:0000000000007020
.text:0000000000007020 extend_buffers  proc near               ; CODE XREF: clean_state_log_if_needed+26↓p
.text:0000000000007020                                         ; clean_state_log_if_needed+55↓p ...
.text:0000000000007020 ; __unwind {
.text:0000000000007020                 push    rbp
.text:0000000000007021                 push    rbx
.text:0000000000007022                 mov     rdx, 0FFFFFFFFFFFFFFEh
.text:000000000000702C                 sub     rsp, 8
.text:0000000000007030                 mov     rax, [rdi+40h]
.text:0000000000007034                 cmp     rax, rdx
.text:0000000000007037                 ja      loc_7148
.text:000000000000703D                 mov     rdx, [rdi+58h]
.text:0000000000007041                 add     rax, rax
.text:0000000000007044                 movsxd  rsi, esi
.text:0000000000007047                 mov     rbx, rdi
.text:000000000000704A                 cmp     rax, rdx
.text:000000000000704D                 cmovg   rax, rdx
.text:0000000000007051                 cmp     rax, rsi
.text:0000000000007054                 cmovge  rsi, rax
.text:0000000000007058                 call    re_string_realloc_buffers
.text:000000000000705D                 test    eax, eax
.text:000000000000705F                 mov     ebp, eax
.text:0000000000007061                 jnz     loc_711D
.text:0000000000007067                 mov     rdi, [rbx+0B8h] ; ptr
.text:000000000000706E                 test    rdi, rdi
.text:0000000000007071                 jz      short loc_7094
.text:0000000000007073                 mov     rax, [rbx+40h]
.text:0000000000007077                 lea     rsi, ds:8[rax*8] ; size
.text:000000000000707F                 call    _realloc
.text:0000000000007084                 test    rax, rax
.text:0000000000007087                 jz      loc_7148
.text:000000000000708D                 mov     [rbx+0B8h], rax
.text:0000000000007094
.text:0000000000007094 loc_7094:                               ; CODE XREF: extend_buffers+51↑j
.text:0000000000007094                 cmp     byte ptr [rbx+88h], 0
.text:000000000000709B                 mov     eax, [rbx+90h]
.text:00000000000070A1                 jz      short loc_70C0
.text:00000000000070A3                 cmp     eax, 1
.text:00000000000070A6                 mov     rdi, rbx
.text:00000000000070A9                 jle     loc_7160
.text:00000000000070AF                 add     rsp, 8
.text:00000000000070B3                 pop     rbx
.text:00000000000070B4                 pop     rbp
.text:00000000000070B5                 jmp     build_wcs_upper_buffer
.text:00000000000070B5 ; ---------------------------------------------------------------------------
.text:00000000000070BA                 align 20h
.text:00000000000070C0
.text:00000000000070C0 loc_70C0:                               ; CODE XREF: extend_buffers+81↑j
.text:00000000000070C0                 cmp     eax, 1
.text:00000000000070C3                 jg      short loc_7130
.text:00000000000070C5                 mov     rcx, [rbx+78h]
.text:00000000000070C9                 test    rcx, rcx
.text:00000000000070CC                 jz      short loc_711D
.text:00000000000070CE                 mov     rsi, [rbx+58h]
.text:00000000000070D2                 cmp     [rbx+40h], rsi
.text:00000000000070D6                 cmovle  rsi, [rbx+40h]
.text:00000000000070DB                 mov     rax, [rbx+30h]
.text:00000000000070DF                 cmp     rsi, rax
.text:00000000000070E2                 jg      short loc_70F4
.text:00000000000070E4                 jmp     short loc_7115
.text:00000000000070E4 ; ---------------------------------------------------------------------------
.text:00000000000070E6                 align 10h
.text:00000000000070F0
.text:00000000000070F0 loc_70F0:                               ; CODE XREF: extend_buffers+F3↓j
.text:00000000000070F0                 mov     rcx, [rbx+78h]
.text:00000000000070F4
.text:00000000000070F4 loc_70F4:                               ; CODE XREF: extend_buffers+C2↑j
.text:00000000000070F4                 mov     rdx, [rbx]
.text:00000000000070F7                 add     rdx, rax
.text:00000000000070FA                 add     rdx, [rbx+28h]
.text:00000000000070FE                 movzx   edx, byte ptr [rdx]
.text:0000000000007101                 movzx   ecx, byte ptr [rcx+rdx]
.text:0000000000007105                 mov     rdx, [rbx+8]
.text:0000000000007109                 mov     [rdx+rax], cl
.text:000000000000710C                 add     rax, 1
.text:0000000000007110                 cmp     rsi, rax
.text:0000000000007113                 jnz     short loc_70F0
.text:0000000000007115
.text:0000000000007115 loc_7115:                               ; CODE XREF: extend_buffers+C4↑j
.text:0000000000007115                 mov     [rbx+30h], rax
.text:0000000000007119                 mov     [rbx+38h], rax
.text:000000000000711D
.text:000000000000711D loc_711D:                               ; CODE XREF: extend_buffers+41↑j
.text:000000000000711D                                         ; extend_buffers+AC↑j
.text:000000000000711D                 add     rsp, 8
.text:0000000000007121                 mov     eax, ebp
.text:0000000000007123                 pop     rbx
.text:0000000000007124                 pop     rbp
.text:0000000000007125                 retn
.text:0000000000007125 ; ---------------------------------------------------------------------------
.text:0000000000007126                 align 10h
.text:0000000000007130
.text:0000000000007130 loc_7130:                               ; CODE XREF: extend_buffers+A3↑j
.text:0000000000007130                 mov     rdi, rbx
.text:0000000000007133                 call    build_wcs_buffer
.text:0000000000007138                 add     rsp, 8
.text:000000000000713C                 mov     eax, ebp
.text:000000000000713E                 pop     rbx
.text:000000000000713F                 pop     rbp
.text:0000000000007140                 retn
.text:0000000000007140 ; ---------------------------------------------------------------------------
.text:0000000000007141                 align 8
.text:0000000000007148
.text:0000000000007148 loc_7148:                               ; CODE XREF: extend_buffers+17↑j
.text:0000000000007148                                         ; extend_buffers+67↑j
.text:0000000000007148                 mov     ebp, 0Ch
.text:000000000000714D                 add     rsp, 8
.text:0000000000007151                 mov     eax, ebp
.text:0000000000007153                 pop     rbx
.text:0000000000007154                 pop     rbp
.text:0000000000007155                 retn
.text:0000000000007155 ; ---------------------------------------------------------------------------
.text:0000000000007156                 align 20h
.text:0000000000007160
.text:0000000000007160 loc_7160:                               ; CODE XREF: extend_buffers+89↑j
.text:0000000000007160                 call    build_upper_buffer
.text:0000000000007165                 add     rsp, 8
.text:0000000000007169                 mov     eax, ebp
.text:000000000000716B                 pop     rbx
.text:000000000000716C                 pop     rbp
.text:000000000000716D                 retn
.text:000000000000716D ; } // starts at 7020
.text:000000000000716D extend_buffers  endp
.text:000000000000716D
.text:000000000000716D ; ---------------------------------------------------------------------------
.text:000000000000716E                 align 10h
.text:0000000000007170
.text:0000000000007170 ; =============== S U B R O U T I N E =======================================
.text:0000000000007170
.text:0000000000007170
.text:0000000000007170 clean_state_log_if_needed proc near     ; CODE XREF: get_subexp_sub_isra_32+F4↓j
.text:0000000000007170                                         ; transit_state_bkref_isra_34+330↓p ...
.text:0000000000007170 ; __unwind {
.text:0000000000007170                 push    r12
.text:0000000000007172                 push    rbp
.text:0000000000007173                 mov     rbp, rsi
.text:0000000000007176                 push    rbx
.text:0000000000007177                 mov     rax, [rdi+40h]
.text:000000000000717B                 mov     rbx, rdi
.text:000000000000717E                 mov     r12, [rdi+0C0h]
.text:0000000000007185                 cmp     rax, rsi
.text:0000000000007188                 jg      short loc_71B0
.text:000000000000718A                 cmp     rax, [rdi+58h]
.text:000000000000718E                 jge     short loc_71B0
.text:0000000000007190                 lea     esi, [rbp+1]
.text:0000000000007193                 mov     rdi, rbx
.text:0000000000007196                 call    extend_buffers
.text:000000000000719B                 test    eax, eax
.text:000000000000719D                 jnz     short loc_71A6
.text:000000000000719F
.text:000000000000719F loc_719F:                               ; CODE XREF: clean_state_log_if_needed+47↓j
.text:000000000000719F                                         ; clean_state_log_if_needed+4D↓j ...
.text:000000000000719F                 cmp     r12, rbp
.text:00000000000071A2                 jl      short loc_71D0
.text:00000000000071A4
.text:00000000000071A4 loc_71A4:                               ; CODE XREF: clean_state_log_if_needed+84↓j
.text:00000000000071A4                 xor     eax, eax
.text:00000000000071A6
.text:00000000000071A6 loc_71A6:                               ; CODE XREF: clean_state_log_if_needed+2D↑j
.text:00000000000071A6                                         ; clean_state_log_if_needed+5E↓j
.text:00000000000071A6                 pop     rbx
.text:00000000000071A7                 pop     rbp
.text:00000000000071A8                 pop     r12
.text:00000000000071AA                 retn
.text:00000000000071AA ; ---------------------------------------------------------------------------
.text:00000000000071AB                 align 10h
.text:00000000000071B0
.text:00000000000071B0 loc_71B0:                               ; CODE XREF: clean_state_log_if_needed+18↑j
.text:00000000000071B0                                         ; clean_state_log_if_needed+1E↑j
.text:00000000000071B0                 mov     rax, [rbx+30h]
.text:00000000000071B4                 cmp     rax, rbp
.text:00000000000071B7                 jg      short loc_719F
.text:00000000000071B9                 cmp     rax, [rbx+58h]
.text:00000000000071BD                 jge     short loc_719F
.text:00000000000071BF                 lea     esi, [rbp+1]
.text:00000000000071C2                 mov     rdi, rbx
.text:00000000000071C5                 call    extend_buffers
.text:00000000000071CA                 test    eax, eax
.text:00000000000071CC                 jz      short loc_719F
.text:00000000000071CE                 jmp     short loc_71A6
.text:00000000000071D0 ; ---------------------------------------------------------------------------
.text:00000000000071D0
.text:00000000000071D0 loc_71D0:                               ; CODE XREF: clean_state_log_if_needed+32↑j
.text:00000000000071D0                 mov     rax, [rbx+0B8h]
.text:00000000000071D7                 mov     rdx, rbp
.text:00000000000071DA                 xor     esi, esi        ; c
.text:00000000000071DC                 sub     rdx, r12
.text:00000000000071DF                 shl     rdx, 3          ; n
.text:00000000000071E3                 lea     rdi, [rax+r12*8+8] ; s
.text:00000000000071E8                 call    _memset
.text:00000000000071ED                 mov     [rbx+0C0h], rbp
.text:00000000000071F4                 jmp     short loc_71A4
.text:00000000000071F4 ; } // starts at 7170
.text:00000000000071F4 clean_state_log_if_needed endp
.text:00000000000071F4
.text:00000000000071F4 ; ---------------------------------------------------------------------------
.text:00000000000071F6                 align 20h
.text:0000000000007200
.text:0000000000007200 ; =============== S U B R O U T I N E =======================================
.text:0000000000007200
.text:0000000000007200 ; Attributes: info_from_lumina
.text:0000000000007200
.text:0000000000007200 ; isl_union_flow_0 *__fastcall isl_union_flow_free_0(isl_union_flow_0 *flow)
.text:0000000000007200 isl_union_flow_free_0 proc near         ; CODE XREF: free_token+23↓j
.text:0000000000007200                                         ; build_charclass_op+1F3↓p ...
.text:0000000000007200 ; __unwind {
.text:0000000000007200                 push    rbx
.text:0000000000007201                 mov     rbx, rdi
.text:0000000000007204                 mov     rdi, [rdi]      ; ptr
.text:0000000000007207                 call    _free
.text:000000000000720C                 mov     rdi, [rbx+8]    ; ptr
.text:0000000000007210                 call    _free
.text:0000000000007215                 mov     rdi, [rbx+10h]  ; ptr
.text:0000000000007219                 call    _free
.text:000000000000721E                 mov     rdi, [rbx+18h]  ; ptr
.text:0000000000007222                 call    _free
.text:0000000000007227                 mov     rdi, rbx        ; ptr
.text:000000000000722A                 pop     rbx
.text:000000000000722B                 jmp     _free
.text:000000000000722B ; } // starts at 7200
.text:000000000000722B isl_union_flow_free_0 endp
.text:000000000000722B
.text:0000000000007230
.text:0000000000007230 ; =============== S U B R O U T I N E =======================================
.text:0000000000007230
.text:0000000000007230
.text:0000000000007230 free_token      proc near               ; CODE XREF: free_tree+8↓p
.text:0000000000007230                                         ; free_dfa_content+32↓p
.text:0000000000007230 ; __unwind {
.text:0000000000007230                 mov     eax, [rdi+8]
.text:0000000000007233                 and     eax, 400FFh
.text:0000000000007238                 cmp     eax, 6
.text:000000000000723B                 jz      short loc_7250
.text:000000000000723D                 cmp     eax, 3
.text:0000000000007240                 jz      short loc_7248
.text:0000000000007242                 rep retn
.text:0000000000007242 ; ---------------------------------------------------------------------------
.text:0000000000007244                 align 8
.text:0000000000007248
.text:0000000000007248 loc_7248:                               ; CODE XREF: free_token+10↑j
.text:0000000000007248                 mov     rdi, [rdi]      ; ptr
.text:000000000000724B                 jmp     _free
.text:0000000000007250 ; ---------------------------------------------------------------------------
.text:0000000000007250
.text:0000000000007250 loc_7250:                               ; CODE XREF: free_token+B↑j
.text:0000000000007250                 mov     rdi, [rdi]      ; ptr
.text:0000000000007253                 jmp     short isl_union_flow_free_0
.text:0000000000007253 ; } // starts at 7230
.text:0000000000007253 free_token      endp
.text:0000000000007253
.text:0000000000007253 ; ---------------------------------------------------------------------------
.text:0000000000007255                 align 20h
.text:0000000000007260
.text:0000000000007260 ; =============== S U B R O U T I N E =======================================
.text:0000000000007260
.text:0000000000007260
.text:0000000000007260 free_tree       proc near               ; DATA XREF: parse_expression+E1↓o
.text:0000000000007260                                         ; parse_expression+38C↓o ...
.text:0000000000007260 ; __unwind {
.text:0000000000007260                 lea     rdi, [rsi+28h]
.text:0000000000007264                 sub     rsp, 8
.text:0000000000007268                 call    free_token
.text:000000000000726D                 xor     eax, eax
.text:000000000000726F                 add     rsp, 8
.text:0000000000007273                 retn
.text:0000000000007273 ; } // starts at 7260
.text:0000000000007273 free_tree       endp
.text:0000000000007273
.text:0000000000007273 ; ---------------------------------------------------------------------------
.text:0000000000007274                 align 20h
.text:0000000000007280
.text:0000000000007280 ; =============== S U B R O U T I N E =======================================
.text:0000000000007280
.text:0000000000007280
.text:0000000000007280 re_dfa_add_node proc near               ; CODE XREF: duplicate_node+26↓p
.text:0000000000007280                                         ; calc_first+1E↓p
.text:0000000000007280
.text:0000000000007280 ptr             = qword ptr -48h
.text:0000000000007280 var_40          = qword ptr -40h
.text:0000000000007280
.text:0000000000007280 ; __unwind {
.text:0000000000007280                 push    r15
.text:0000000000007282                 push    r14
.text:0000000000007284                 mov     r14, rsi
.text:0000000000007287                 push    r13
.text:0000000000007289                 push    r12
.text:000000000000728B                 push    rbp
.text:000000000000728C                 push    rbx
.text:000000000000728D                 mov     rbx, rdi
.text:0000000000007290                 sub     rsp, 18h
.text:0000000000007294                 mov     rsi, [rdi+10h]
.text:0000000000007298                 mov     rbp, [rdi+8]
.text:000000000000729C                 cmp     rsi, rbp
.text:000000000000729F                 jnb     loc_7350
.text:00000000000072A5                 mov     r12, [rdi+18h]
.text:00000000000072A9                 mov     rbp, [rdi+28h]
.text:00000000000072AD
.text:00000000000072AD loc_72AD:                               ; CODE XREF: re_dfa_add_node+187↓j
.text:00000000000072AD                 mov     rax, rsi
.text:00000000000072B0                 mov     ecx, edx
.text:00000000000072B2                 shl     rax, 4
.text:00000000000072B6                 add     rax, [rbx]
.text:00000000000072B9                 and     ecx, 0FFFC00FFh
.text:00000000000072BF                 mov     [rax+8], rdx
.text:00000000000072C3                 mov     [rax+8], ecx
.text:00000000000072C6                 xor     ecx, ecx
.text:00000000000072C8                 cmp     dl, 6
.text:00000000000072CB                 mov     [rax], r14
.text:00000000000072CE                 setz    cl
.text:00000000000072D1                 cmp     dl, 5
.text:00000000000072D4                 jnz     short loc_72E2
.text:00000000000072D6                 xor     ecx, ecx
.text:00000000000072D8                 cmp     dword ptr [rbx+0B4h], 1
.text:00000000000072DF                 setnle  cl
.text:00000000000072E2
.text:00000000000072E2 loc_72E2:                               ; CODE XREF: re_dfa_add_node+54↑j
.text:00000000000072E2                 movzx   edx, byte ptr [rax+0Ah]
.text:00000000000072E6                 shl     ecx, 4
.text:00000000000072E9                 pxor    xmm0, xmm0
.text:00000000000072ED                 and     edx, 0FFFFFFEFh
.text:00000000000072F0                 or      edx, ecx
.text:00000000000072F2                 mov     [rax+0Ah], dl
.text:00000000000072F5                 mov     qword ptr [r12+rsi*8], 0FFFFFFFFFFFFFFFFh
.text:00000000000072FD                 mov     rax, [rbx+10h]
.text:0000000000007301                 lea     rax, [rax+rax*2]
.text:0000000000007305                 lea     rax, [rbp+rax*8+0]
.text:000000000000730A                 movups  xmmword ptr [rax], xmm0
.text:000000000000730D                 mov     qword ptr [rax+10h], 0
.text:0000000000007315                 mov     rax, [rbx+10h]
.text:0000000000007319                 lea     rdx, [rax+rax*2]
.text:000000000000731D                 mov     rax, [rbx+30h]
.text:0000000000007321                 lea     rax, [rax+rdx*8]
.text:0000000000007325
.text:0000000000007325 loc_7325:                               ; DATA XREF: .rodata:format↓o
.text:0000000000007325                 movups  xmmword ptr [rax], xmm0
.text:0000000000007328                 mov     qword ptr [rax+10h], 0
.text:0000000000007330                 mov     rax, [rbx+10h]
.text:0000000000007334                 lea     rdx, [rax+1]
.text:0000000000007338                 mov     [rbx+10h], rdx
.text:000000000000733C
.text:000000000000733C loc_733C:                               ; CODE XREF: re_dfa_add_node+1C9↓j
.text:000000000000733C                 add     rsp, 18h
.text:0000000000007340                 pop     rbx
.text:0000000000007341                 pop     rbp
.text:0000000000007342                 pop     r12
.text:0000000000007344                 pop     r13
.text:0000000000007346                 pop     r14
.text:0000000000007348                 pop     r15
.text:000000000000734A                 retn
.text:000000000000734A ; ---------------------------------------------------------------------------
.text:000000000000734B                 align 10h
.text:0000000000007350
.text:0000000000007350 loc_7350:                               ; CODE XREF: re_dfa_add_node+1F↑j
.text:0000000000007350                 lea     r13, [rbp+rbp+0]
.text:0000000000007355                 mov     rax, 0AAAAAAAAAAAAAAAh
.text:000000000000735F                 cmp     r13, rax
.text:0000000000007362                 ja      loc_7442
.text:0000000000007368                 mov     rdi, [rdi]      ; ptr
.text:000000000000736B                 mov     rsi, rbp
.text:000000000000736E                 mov     [rsp+48h+var_40], rdx
.text:0000000000007373                 shl     rsi, 5          ; size
.text:0000000000007377                 call    _realloc
.text:000000000000737C                 test    rax, rax
.text:000000000000737F                 jz      loc_7442
.text:0000000000007385                 mov     r15, rbp
.text:0000000000007388                 mov     rdi, [rbx+18h]  ; ptr
.text:000000000000738C                 mov     [rbx], rax
.text:000000000000738F                 shl     r15, 4
.text:0000000000007393                 mov     rsi, r15        ; size
.text:0000000000007396                 call    _realloc
.text:000000000000739B                 mov     rdi, [rbx+20h]  ; ptr
.text:000000000000739F                 mov     rsi, r15        ; size
.text:00000000000073A2                 lea     r15, [r13+rbp*4+0]
.text:00000000000073A7                 mov     r12, rax
.text:00000000000073AA                 shl     r15, 3
.text:00000000000073AE                 call    _realloc
.text:00000000000073B3                 mov     rdi, [rbx+28h]  ; ptr
.text:00000000000073B7                 mov     rsi, r15        ; size
.text:00000000000073BA                 mov     [rsp+48h+ptr], rax
.text:00000000000073BE                 call    _realloc
.text:00000000000073C3                 mov     rdi, [rbx+30h]  ; ptr
.text:00000000000073C7                 mov     rsi, r15        ; size
.text:00000000000073CA                 mov     rbp, rax
.text:00000000000073CD                 call    _realloc
.text:00000000000073D2                 test    r12, r12
.text:00000000000073D5                 mov     rcx, [rsp+48h+ptr]
.text:00000000000073D9                 jz      short loc_7410
.text:00000000000073DB                 test    rcx, rcx
.text:00000000000073DE                 jz      short loc_7410
.text:00000000000073E0                 test    rbp, rbp
.text:00000000000073E3                 jz      short loc_7410
.text:00000000000073E5                 test    rax, rax
.text:00000000000073E8                 mov     rdx, [rsp+48h+var_40]
.text:00000000000073ED                 jz      short loc_7410
.text:00000000000073EF                 mov     [rbx+18h], r12
.text:00000000000073F3                 mov     [rbx+20h], rcx
.text:00000000000073F7                 mov     [rbx+28h], rbp
.text:00000000000073FB                 mov     [rbx+30h], rax
.text:00000000000073FF                 mov     [rbx+8], r13
.text:0000000000007403                 mov     rsi, [rbx+10h]
.text:0000000000007407                 jmp     loc_72AD
.text:0000000000007407 ; ---------------------------------------------------------------------------
.text:000000000000740C                 align 10h
.text:0000000000007410
.text:0000000000007410 loc_7410:                               ; CODE XREF: re_dfa_add_node+159↑j
.text:0000000000007410                                         ; re_dfa_add_node+15E↑j ...
.text:0000000000007410                 mov     rdi, r12        ; ptr
.text:0000000000007413                 mov     [rsp+48h+var_40], rax
.text:0000000000007418                 mov     [rsp+48h+ptr], rcx
.text:000000000000741C                 call    _free
.text:0000000000007421                 mov     rcx, [rsp+48h+ptr]
.text:0000000000007425                 mov     rdi, rcx        ; ptr
.text:0000000000007428                 call    _free
.text:000000000000742D                 mov     rdi, rbp        ; ptr
.text:0000000000007430                 call    _free
.text:0000000000007435                 mov     rax, [rsp+48h+var_40]
.text:000000000000743A                 mov     rdi, rax        ; ptr
.text:000000000000743D                 call    _free
.text:0000000000007442
.text:0000000000007442 loc_7442:                               ; CODE XREF: re_dfa_add_node+E2↑j
.text:0000000000007442                                         ; re_dfa_add_node+FF↑j
.text:0000000000007442                 mov     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000007449                 jmp     loc_733C
.text:0000000000007449 ; } // starts at 7280
.text:0000000000007449 re_dfa_add_node endp
.text:0000000000007449
.text:0000000000007449 ; ---------------------------------------------------------------------------
.text:000000000000744E                 align 10h
.text:0000000000007450
.text:0000000000007450 ; =============== S U B R O U T I N E =======================================
.text:0000000000007450
.text:0000000000007450
.text:0000000000007450 duplicate_node  proc near               ; CODE XREF: duplicate_node_closure+102↓p
.text:0000000000007450                                         ; duplicate_node_closure+148↓p ...
.text:0000000000007450 ; __unwind {
.text:0000000000007450                 push    r13
.text:0000000000007452                 push    r12
.text:0000000000007454                 mov     r13, rsi
.text:0000000000007457                 push    rbp
.text:0000000000007458                 push    rbx
.text:0000000000007459                 shl     r13, 4
.text:000000000000745D                 mov     rbp, rsi
.text:0000000000007460                 mov     r12d, edx
.text:0000000000007463                 mov     rbx, rdi
.text:0000000000007466                 sub     rsp, 8
.text:000000000000746A                 mov     rax, [rdi]
.text:000000000000746D                 mov     rsi, [rax+r13]
.text:0000000000007471                 mov     rdx, [rax+r13+8]
.text:0000000000007476                 call    re_dfa_add_node
.text:000000000000747B                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000747F                 jz      short loc_74E4
.text:0000000000007481                 mov     edi, r12d
.text:0000000000007484                 mov     r8, [rbx]
.text:0000000000007487                 mov     rsi, rax
.text:000000000000748A                 and     di, 3FFh
.text:000000000000748F                 shl     rsi, 4
.text:0000000000007493                 mov     ecx, edi
.text:0000000000007495                 and     ecx, 3FFh
.text:000000000000749B                 add     rsi, r8
.text:000000000000749E                 shl     ecx, 8
.text:00000000000074A1                 mov     edx, ecx
.text:00000000000074A3                 mov     ecx, [rsi+8]
.text:00000000000074A6                 and     ecx, 0FFFC00FFh
.text:00000000000074AC                 or      ecx, edx
.text:00000000000074AE                 mov     [rsi+8], ecx
.text:00000000000074B1                 mov     edx, [r8+r13+8]
.text:00000000000074B6                 and     ecx, 0FFFC00FFh
.text:00000000000074BC                 shr     edx, 8
.text:00000000000074BF                 or      edx, edi
.text:00000000000074C1                 and     edx, 3FFh
.text:00000000000074C7                 shl     edx, 8
.text:00000000000074CA                 or      edx, ecx
.text:00000000000074CC                 mov     ecx, edx
.text:00000000000074CE                 mov     [rsi+8], edx
.text:00000000000074D1                 shr     ecx, 10h
.text:00000000000074D4                 mov     edx, ecx
.text:00000000000074D6                 or      edx, 4
.text:00000000000074D9                 mov     [rsi+0Ah], dl
.text:00000000000074DC                 mov     rdx, [rbx+20h]
.text:00000000000074E0                 mov     [rdx+rax*8], rbp
.text:00000000000074E4
.text:00000000000074E4 loc_74E4:                               ; CODE XREF: duplicate_node+2F↑j
.text:00000000000074E4                 add     rsp, 8
.text:00000000000074E8                 pop     rbx
.text:00000000000074E9                 pop     rbp
.text:00000000000074EA                 pop     r12
.text:00000000000074EC                 pop     r13
.text:00000000000074EE                 retn
.text:00000000000074EE ; } // starts at 7450
.text:00000000000074EE duplicate_node  endp
.text:00000000000074EE
.text:00000000000074EE ; ---------------------------------------------------------------------------
.text:00000000000074EF                 align 10h
.text:00000000000074F0
.text:00000000000074F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000074F0
.text:00000000000074F0
.text:00000000000074F0 duplicate_node_closure proc near        ; CODE XREF: duplicate_node_closure+17A↓p
.text:00000000000074F0                                         ; calc_eclosure_iter+26A↓p
.text:00000000000074F0
.text:00000000000074F0 var_48          = qword ptr -48h
.text:00000000000074F0 var_40          = qword ptr -40h
.text:00000000000074F0
.text:00000000000074F0 ; __unwind {
.text:00000000000074F0                 push    r15
.text:00000000000074F2                 push    r14
.text:00000000000074F4                 mov     r9, rsi
.text:00000000000074F7                 push    r13
.text:00000000000074F9                 push    r12
.text:00000000000074FB                 mov     r14, rdi
.text:00000000000074FE                 push    rbp
.text:00000000000074FF                 push    rbx
.text:0000000000007500                 mov     r13, rdx
.text:0000000000007503                 mov     ebp, r8d
.text:0000000000007506                 sub     rsp, 18h
.text:000000000000750A                 mov     [rsp+48h+var_40], rcx
.text:000000000000750F
.text:000000000000750F loc_750F:                               ; CODE XREF: duplicate_node_closure+125↓j
.text:000000000000750F                                         ; duplicate_node_closure+1E1↓j
.text:000000000000750F                 mov     r8, [r14]
.text:0000000000007512                 mov     rax, r9
.text:0000000000007515                 mov     rdi, [r14+28h]
.text:0000000000007519                 shl     rax, 4
.text:000000000000751D                 mov     r12, r13
.text:0000000000007520                 add     rax, r8
.text:0000000000007523                 cmp     byte ptr [rax+8], 4
.text:0000000000007527                 jz      loc_76E0
.text:000000000000752D                 lea     r12, [r9+r9*2]
.text:0000000000007531                 shl     r12, 3
.text:0000000000007535                 lea     rsi, [rdi+r12]
.text:0000000000007539                 mov     rcx, [rsi+8]
.text:000000000000753D                 test    rcx, rcx
.text:0000000000007540                 jz      loc_7739
.text:0000000000007546                 lea     rbx, [r13+r13*2+0]
.text:000000000000754B                 mov     rsi, [rsi+10h]
.text:000000000000754F                 shl     rbx, 3
.text:0000000000007553                 add     rdi, rbx
.text:0000000000007556                 cmp     rcx, 1
.text:000000000000755A                 mov     r15, [rsi]
.text:000000000000755D                 mov     qword ptr [rdi+8], 0
.text:0000000000007565                 jz      loc_7680
.text:000000000000756B                 mov     rdx, [r14+10h]
.text:000000000000756F                 lea     rsi, [rdx-1]
.text:0000000000007573                 mov     rax, rsi
.text:0000000000007576                 shl     rax, 4
.text:000000000000757A                 add     rax, r8
.text:000000000000757D                 test    byte ptr [rax+0Ah], 4
.text:0000000000007581                 jz      loc_7630
.text:0000000000007587                 test    rsi, rsi
.text:000000000000758A                 jle     loc_7630
.text:0000000000007590                 shl     rdx, 4
.text:0000000000007594                 sub     r8, rax
.text:0000000000007597                 mov     rcx, [r14+20h]
.text:000000000000759B                 lea     r8, [r8+rdx-20h]
.text:00000000000075A0                 jmp     short loc_75BA
.text:00000000000075A0 ; ---------------------------------------------------------------------------
.text:00000000000075A2                 align 8
.text:00000000000075A8
.text:00000000000075A8 loc_75A8:                               ; CODE XREF: duplicate_node_closure+CE↓j
.text:00000000000075A8                                         ; duplicate_node_closure+DE↓j
.text:00000000000075A8                 add     rax, r8
.text:00000000000075AB                 sub     rsi, 1
.text:00000000000075AF                 test    byte ptr [rax+0Ah], 4
.text:00000000000075B3                 jz      short loc_7630
.text:00000000000075B5                 test    rsi, rsi
.text:00000000000075B8                 jle     short loc_7630
.text:00000000000075BA
.text:00000000000075BA loc_75BA:                               ; CODE XREF: duplicate_node_closure+B0↑j
.text:00000000000075BA                 cmp     [rcx+rsi*8], r15
.text:00000000000075BE                 jnz     short loc_75A8
.text:00000000000075C0                 mov     edx, [rax+8]
.text:00000000000075C3                 shr     edx, 8
.text:00000000000075C6                 and     edx, 3FFh
.text:00000000000075CC                 cmp     ebp, edx
.text:00000000000075CE                 jnz     short loc_75A8
.text:00000000000075D0                 call    re_node_set_insert
.text:00000000000075D5                 test    al, al
.text:00000000000075D7                 jz      short loc_761B
.text:00000000000075D9
.text:00000000000075D9 loc_75D9:                               ; CODE XREF: duplicate_node_closure+181↓j
.text:00000000000075D9                 mov     rax, [r14+28h]
.text:00000000000075DD                 mov     edx, ebp
.text:00000000000075DF                 mov     rdi, r14
.text:00000000000075E2                 mov     rax, [rax+r12+10h]
.text:00000000000075E7                 mov     r9, [rax+8]
.text:00000000000075EB                 mov     rsi, r9
.text:00000000000075EE                 mov     [rsp+48h+var_48], r9
.text:00000000000075F2                 call    duplicate_node
.text:00000000000075F7                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000075FB                 mov     r13, rax
.text:00000000000075FE                 jz      short loc_761B
.text:0000000000007600
.text:0000000000007600 loc_7600:                               ; CODE XREF: duplicate_node_closure+244↓j
.text:0000000000007600                 add     rbx, [r14+28h]
.text:0000000000007604                 mov     rsi, r13
.text:0000000000007607                 mov     rdi, rbx
.text:000000000000760A                 call    re_node_set_insert
.text:000000000000760F                 test    al, al
.text:0000000000007611                 mov     r9, [rsp+48h+var_48]
.text:0000000000007615                 jnz     loc_750F
.text:000000000000761B
.text:000000000000761B loc_761B:                               ; CODE XREF: duplicate_node_closure+E7↑j
.text:000000000000761B                                         ; duplicate_node_closure+10E↑j ...
.text:000000000000761B                 mov     eax, 0Ch
.text:0000000000007620
.text:0000000000007620 loc_7620:                               ; CODE XREF: duplicate_node_closure+187↓j
.text:0000000000007620                                         ; duplicate_node_closure+257↓j ...
.text:0000000000007620                 add     rsp, 18h
.text:0000000000007624                 pop     rbx
.text:0000000000007625                 pop     rbp
.text:0000000000007626                 pop     r12
.text:0000000000007628                 pop     r13
.text:000000000000762A                 pop     r14
.text:000000000000762C                 pop     r15
.text:000000000000762E                 retn
.text:000000000000762E ; ---------------------------------------------------------------------------
.text:000000000000762F                 align 10h
.text:0000000000007630
.text:0000000000007630 loc_7630:                               ; CODE XREF: duplicate_node_closure+91↑j
.text:0000000000007630                                         ; duplicate_node_closure+9A↑j ...
.text:0000000000007630                 mov     edx, ebp
.text:0000000000007632                 mov     rsi, r15
.text:0000000000007635                 mov     rdi, r14
.text:0000000000007638                 call    duplicate_node
.text:000000000000763D                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000007641                 mov     r13, rax
.text:0000000000007644                 jz      short loc_761B
.text:0000000000007646                 mov     rdi, [r14+28h]
.text:000000000000764A                 mov     rsi, r13
.text:000000000000764D                 add     rdi, rbx
.text:0000000000007650                 call    re_node_set_insert
.text:0000000000007655                 test    al, al
.text:0000000000007657                 jz      short loc_761B
.text:0000000000007659                 mov     rcx, [rsp+48h+var_40]
.text:000000000000765E                 mov     r8d, ebp
.text:0000000000007661                 mov     rdx, r13
.text:0000000000007664                 mov     rsi, r15
.text:0000000000007667                 mov     rdi, r14
.text:000000000000766A                 call    duplicate_node_closure
.text:000000000000766F                 test    eax, eax
.text:0000000000007671                 jz      loc_75D9
.text:0000000000007677                 jmp     short loc_7620
.text:0000000000007677 ; ---------------------------------------------------------------------------
.text:0000000000007679                 align 20h
.text:0000000000007680
.text:0000000000007680 loc_7680:                               ; CODE XREF: duplicate_node_closure+75↑j
.text:0000000000007680                 cmp     r9, [rsp+48h+var_40]
.text:0000000000007685                 jnz     short loc_7690
.text:0000000000007687                 cmp     r9, r13
.text:000000000000768A                 jnz     loc_774C
.text:0000000000007690
.text:0000000000007690 loc_7690:                               ; CODE XREF: duplicate_node_closure+195↑j
.text:0000000000007690                 mov     eax, [rax+8]
.text:0000000000007693                 mov     rsi, r15
.text:0000000000007696                 mov     rdi, r14
.text:0000000000007699                 shr     eax, 8
.text:000000000000769C                 and     eax, 3FFh
.text:00000000000076A1                 or      ebp, eax
.text:00000000000076A3                 mov     edx, ebp
.text:00000000000076A5                 call    duplicate_node
.text:00000000000076AA                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000076AE                 mov     r13, rax
.text:00000000000076B1                 jz      loc_761B
.text:00000000000076B7                 add     rbx, [r14+28h]
.text:00000000000076BB                 mov     rsi, rax
.text:00000000000076BE                 mov     rdi, rbx
.text:00000000000076C1                 call    re_node_set_insert
.text:00000000000076C6                 test    al, al
.text:00000000000076C8                 jz      loc_761B
.text:00000000000076CE                 mov     r9, r15
.text:00000000000076D1                 jmp     loc_750F
.text:00000000000076D1 ; ---------------------------------------------------------------------------
.text:00000000000076D6                 align 20h
.text:00000000000076E0
.text:00000000000076E0 loc_76E0:                               ; CODE XREF: duplicate_node_closure+37↑j
.text:00000000000076E0                 mov     rax, [r14+18h]
.text:00000000000076E4                 lea     rbx, [r13+r13*2+0]
.text:00000000000076E9                 lea     r15, ds:0[r9*8]
.text:00000000000076F1                 mov     edx, ebp
.text:00000000000076F3                 shl     rbx, 3
.text:00000000000076F7                 mov     r9, [rax+r9*8]
.text:00000000000076FB                 mov     qword ptr [rdi+rbx+8], 0
.text:0000000000007704                 mov     rdi, r14
.text:0000000000007707                 mov     rsi, r9
.text:000000000000770A                 mov     [rsp+48h+var_48], r9
.text:000000000000770E                 call    duplicate_node
.text:0000000000007713                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000007717                 mov     r13, rax
.text:000000000000771A                 mov     r9, [rsp+48h+var_48]
.text:000000000000771E                 jz      loc_761B
.text:0000000000007724                 mov     rax, [r14+18h]
.text:0000000000007728                 mov     [rsp+48h+var_48], r9
.text:000000000000772C                 mov     rcx, [rax+r15]
.text:0000000000007730                 mov     [rax+r12*8], rcx
.text:0000000000007734                 jmp     loc_7600
.text:0000000000007739 ; ---------------------------------------------------------------------------
.text:0000000000007739
.text:0000000000007739 loc_7739:                               ; CODE XREF: duplicate_node_closure+50↑j
.text:0000000000007739                 mov     rax, [r14+18h]
.text:000000000000773D                 mov     rcx, [rax+r9*8]
.text:0000000000007741                 mov     [rax+r13*8], rcx
.text:0000000000007745                 xor     eax, eax
.text:0000000000007747                 jmp     loc_7620
.text:000000000000774C ; ---------------------------------------------------------------------------
.text:000000000000774C
.text:000000000000774C loc_774C:                               ; CODE XREF: duplicate_node_closure+19A↑j
.text:000000000000774C                 mov     rsi, r15
.text:000000000000774F                 call    re_node_set_insert
.text:0000000000007754                 mov     edx, eax
.text:0000000000007756                 xor     eax, eax
.text:0000000000007758                 test    dl, dl
.text:000000000000775A                 jnz     loc_7620
.text:0000000000007760                 jmp     loc_761B
.text:0000000000007760 ; } // starts at 74F0
.text:0000000000007760 duplicate_node_closure endp
.text:0000000000007760
.text:0000000000007760 ; ---------------------------------------------------------------------------
.text:0000000000007765                 align 10h
.text:0000000000007770
.text:0000000000007770 ; =============== S U B R O U T I N E =======================================
.text:0000000000007770
.text:0000000000007770
.text:0000000000007770 ; __int64 __fastcall free_state(void *ptr)
.text:0000000000007770 free_state      proc near               ; CODE XREF: free_dfa_content+FC↓p
.text:0000000000007770                                         ; re_acquire_state_context+211↓p ...
.text:0000000000007770 ; __unwind {
.text:0000000000007770                 push    rbx
.text:0000000000007771                 mov     rbx, rdi
.text:0000000000007774                 mov     rdi, [rdi+30h]  ; ptr
.text:0000000000007778                 call    _free
.text:000000000000777D                 mov     rdi, [rbx+48h]  ; ptr
.text:0000000000007781                 call    _free
.text:0000000000007786                 mov     rax, [rbx+50h]
.text:000000000000778A                 lea     rdx, [rbx+8]
.text:000000000000778E                 cmp     rax, rdx
.text:0000000000007791                 jz      short loc_77A5
.text:0000000000007793                 mov     rdi, [rax+10h]  ; ptr
.text:0000000000007797                 call    _free
.text:000000000000779C                 mov     rdi, [rbx+50h]  ; ptr
.text:00000000000077A0                 call    _free
.text:00000000000077A5
.text:00000000000077A5 loc_77A5:                               ; CODE XREF: free_state+21↑j
.text:00000000000077A5                 mov     rdi, [rbx+18h]  ; ptr
.text:00000000000077A9                 call    _free
.text:00000000000077AE                 mov     rdi, [rbx+60h]  ; ptr
.text:00000000000077B2                 call    _free
.text:00000000000077B7                 mov     rdi, [rbx+58h]  ; ptr
.text:00000000000077BB                 call    _free
.text:00000000000077C0                 mov     rdi, rbx        ; ptr
.text:00000000000077C3                 pop     rbx
.text:00000000000077C4                 jmp     _free
.text:00000000000077C4 ; } // starts at 7770
.text:00000000000077C4 free_state      endp
.text:00000000000077C4
.text:00000000000077C4 ; ---------------------------------------------------------------------------
.text:00000000000077C9                 align 10h
.text:00000000000077D0
.text:00000000000077D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000077D0
.text:00000000000077D0
.text:00000000000077D0 re_string_destruct proc near            ; CODE XREF: re_search_internal+B74↓p
.text:00000000000077D0                                         ; re_compile_internal+377↓p ...
.text:00000000000077D0 ; __unwind {
.text:00000000000077D0                 push    rbx
.text:00000000000077D1                 mov     rbx, rdi
.text:00000000000077D4                 mov     rdi, [rdi+10h]  ; ptr
.text:00000000000077D8                 call    _free
.text:00000000000077DD                 mov     rdi, [rbx+18h]  ; ptr
.text:00000000000077E1                 call    _free
.text:00000000000077E6                 cmp     byte ptr [rbx+8Bh], 0
.text:00000000000077ED                 jnz     short loc_77F8
.text:00000000000077EF                 pop     rbx
.text:00000000000077F0                 retn
.text:00000000000077F0 ; ---------------------------------------------------------------------------
.text:00000000000077F1                 align 8
.text:00000000000077F8
.text:00000000000077F8 loc_77F8:                               ; CODE XREF: re_string_destruct+1D↑j
.text:00000000000077F8                 mov     rdi, [rbx+8]    ; ptr
.text:00000000000077FC                 pop     rbx
.text:00000000000077FD                 jmp     _free
.text:00000000000077FD ; } // starts at 77D0
.text:00000000000077FD re_string_destruct endp
.text:00000000000077FD
.text:00000000000077FD ; ---------------------------------------------------------------------------
.text:0000000000007802                 align 10h
.text:0000000000007810
.text:0000000000007810 ; =============== S U B R O U T I N E =======================================
.text:0000000000007810
.text:0000000000007810
.text:0000000000007810 ; __int64 __fastcall free_dfa_content(void *ptr)
.text:0000000000007810 free_dfa_content proc near              ; CODE XREF: re_compile_internal+37F↓p
.text:0000000000007810                                         ; regfree+C↓p
.text:0000000000007810 ; __unwind {
.text:0000000000007810                 push    r14
.text:0000000000007812                 push    r13
.text:0000000000007814                 push    r12
.text:0000000000007816                 mov     r12, rdi
.text:0000000000007819                 push    rbp
.text:000000000000781A                 push    rbx
.text:000000000000781B                 mov     rdi, [rdi]
.text:000000000000781E                 test    rdi, rdi
.text:0000000000007821                 jz      short loc_784E
.text:0000000000007823                 cmp     qword ptr [r12+10h], 0
.text:0000000000007829                 jz      short loc_784E
.text:000000000000782B                 xor     ebx, ebx
.text:000000000000782D                 jmp     short loc_7834
.text:000000000000782D ; ---------------------------------------------------------------------------
.text:000000000000782F                 align 10h
.text:0000000000007830
.text:0000000000007830 loc_7830:                               ; CODE XREF: free_dfa_content+3C↓j
.text:0000000000007830                 mov     rdi, [r12]
.text:0000000000007834
.text:0000000000007834 loc_7834:                               ; CODE XREF: free_dfa_content+1D↑j
.text:0000000000007834                 mov     rax, rbx
.text:0000000000007837                 add     rbx, 1
.text:000000000000783B                 shl     rax, 4
.text:000000000000783F                 add     rdi, rax
.text:0000000000007842                 call    free_token
.text:0000000000007847                 cmp     [r12+10h], rbx
.text:000000000000784C                 ja      short loc_7830
.text:000000000000784E
.text:000000000000784E loc_784E:                               ; CODE XREF: free_dfa_content+11↑j
.text:000000000000784E                                         ; free_dfa_content+19↑j
.text:000000000000784E                 mov     rdi, [r12+18h]  ; ptr
.text:0000000000007853                 call    _free
.text:0000000000007858                 cmp     qword ptr [r12+10h], 0
.text:000000000000785E                 jz      short loc_78B3
.text:0000000000007860                 xor     ebx, ebx
.text:0000000000007862                 xor     ebp, ebp
.text:0000000000007864                 nop     dword ptr [rax+00h]
.text:0000000000007868
.text:0000000000007868 loc_7868:                               ; CODE XREF: free_dfa_content+A1↓j
.text:0000000000007868                 mov     rax, [r12+30h]
.text:000000000000786D                 test    rax, rax
.text:0000000000007870                 jz      short loc_787C
.text:0000000000007872                 mov     rdi, [rax+rbx+10h] ; ptr
.text:0000000000007877                 call    _free
.text:000000000000787C
.text:000000000000787C loc_787C:                               ; CODE XREF: free_dfa_content+60↑j
.text:000000000000787C                 mov     rax, [r12+38h]
.text:0000000000007881                 test    rax, rax
.text:0000000000007884                 jz      short loc_7890
.text:0000000000007886                 mov     rdi, [rax+rbx+10h] ; ptr
.text:000000000000788B                 call    _free
.text:0000000000007890
.text:0000000000007890 loc_7890:                               ; CODE XREF: free_dfa_content+74↑j
.text:0000000000007890                 mov     rax, [r12+28h]
.text:0000000000007895                 test    rax, rax
.text:0000000000007898                 jz      short loc_78A4
.text:000000000000789A                 mov     rdi, [rax+rbx+10h] ; ptr
.text:000000000000789F                 call    _free
.text:00000000000078A4
.text:00000000000078A4 loc_78A4:                               ; CODE XREF: free_dfa_content+88↑j
.text:00000000000078A4                 add     rbp, 1
.text:00000000000078A8                 add     rbx, 18h
.text:00000000000078AC                 cmp     [r12+10h], rbp
.text:00000000000078B1                 ja      short loc_7868
.text:00000000000078B3
.text:00000000000078B3 loc_78B3:                               ; CODE XREF: free_dfa_content+4E↑j
.text:00000000000078B3                 mov     rdi, [r12+28h]  ; ptr
.text:00000000000078B8                 call    _free
.text:00000000000078BD                 mov     rdi, [r12+30h]  ; ptr
.text:00000000000078C2                 call    _free
.text:00000000000078C7                 mov     rdi, [r12+38h]  ; ptr
.text:00000000000078CC                 call    _free
.text:00000000000078D1                 mov     rdi, [r12]      ; ptr
.text:00000000000078D5                 call    _free
.text:00000000000078DA                 mov     rdi, [r12+40h]
.text:00000000000078DF                 test    rdi, rdi
.text:00000000000078E2                 jz      short loc_7937
.text:00000000000078E4                 xor     r14d, r14d
.text:00000000000078E7                 xor     r13d, r13d
.text:00000000000078EA                 nop     word ptr [rax+rax+00h]
.text:00000000000078F0
.text:00000000000078F0 loc_78F0:                               ; CODE XREF: free_dfa_content+125↓j
.text:00000000000078F0                 lea     rbp, [rdi+r14]
.text:00000000000078F4                 cmp     qword ptr [rbp+0], 0
.text:00000000000078F9                 jle     short loc_7917
.text:00000000000078FB                 xor     ebx, ebx
.text:00000000000078FD                 nop     dword ptr [rax]
.text:0000000000007900
.text:0000000000007900 loc_7900:                               ; CODE XREF: free_dfa_content+105↓j
.text:0000000000007900                 mov     rax, [rbp+10h]
.text:0000000000007904                 mov     rdi, [rax+rbx*8] ; ptr
.text:0000000000007908                 add     rbx, 1
.text:000000000000790C                 call    free_state
.text:0000000000007911                 cmp     [rbp+0], rbx
.text:0000000000007915                 jg      short loc_7900
.text:0000000000007917
.text:0000000000007917 loc_7917:                               ; CODE XREF: free_dfa_content+E9↑j
.text:0000000000007917                 mov     rdi, [rbp+10h]  ; ptr
.text:000000000000791B                 add     r13, 1
.text:000000000000791F                 add     r14, 18h
.text:0000000000007923                 call    _free
.text:0000000000007928                 cmp     [r12+88h], r13
.text:0000000000007930                 mov     rdi, [r12+40h]  ; ptr
.text:0000000000007935                 jnb     short loc_78F0
.text:0000000000007937
.text:0000000000007937 loc_7937:                               ; CODE XREF: free_dfa_content+D2↑j
.text:0000000000007937                 call    _free
.text:000000000000793C                 mov     rdi, [r12+78h]  ; ptr
.text:0000000000007941                 lea     rax, utf8_sb_map
.text:0000000000007948                 cmp     rdi, rax
.text:000000000000794B                 jz      short loc_7952
.text:000000000000794D                 call    _free
.text:0000000000007952
.text:0000000000007952 loc_7952:                               ; CODE XREF: free_dfa_content+13B↑j
.text:0000000000007952                 mov     rdi, [r12+0E0h] ; ptr
.text:000000000000795A                 call    _free
.text:000000000000795F                 pop     rbx
.text:0000000000007960                 mov     rdi, r12        ; ptr
.text:0000000000007963                 pop     rbp
.text:0000000000007964                 pop     r12
.text:0000000000007966                 pop     r13
.text:0000000000007968                 pop     r14
.text:000000000000796A                 jmp     _free
.text:000000000000796A ; } // starts at 7810
.text:000000000000796A free_dfa_content endp
.text:000000000000796A
.text:000000000000796A ; ---------------------------------------------------------------------------
.text:000000000000796F                 align 10h
.text:0000000000007970
.text:0000000000007970 ; =============== S U B R O U T I N E =======================================
.text:0000000000007970
.text:0000000000007970
.text:0000000000007970 match_ctx_clean proc near               ; CODE XREF: re_search_internal+F34↓p
.text:0000000000007970                                         ; re_search_internal+1494↓p
.text:0000000000007970 ; __unwind {
.text:0000000000007970                 push    r14
.text:0000000000007972                 push    r13
.text:0000000000007974                 mov     r14, rdi
.text:0000000000007977                 push    r12
.text:0000000000007979                 push    rbp
.text:000000000000797A                 push    rbx
.text:000000000000797B                 cmp     qword ptr [rdi+0E8h], 0
.text:0000000000007983                 jle     loc_7A09
.text:0000000000007989                 xor     r13d, r13d
.text:000000000000798C                 nop     dword ptr [rax+00h]
.text:0000000000007990
.text:0000000000007990 loc_7990:                               ; CODE XREF: match_ctx_clean+97↓j
.text:0000000000007990                 mov     rax, [r14+0F8h]
.text:0000000000007997                 mov     r12, [rax+r13*8]
.text:000000000000799B                 cmp     qword ptr [r12+20h], 0
.text:00000000000079A1                 jle     short loc_79CD
.text:00000000000079A3                 xor     ebx, ebx
.text:00000000000079A5                 nop     dword ptr [rax]
.text:00000000000079A8
.text:00000000000079A8 loc_79A8:                               ; CODE XREF: match_ctx_clean+5B↓j
.text:00000000000079A8                 mov     rax, [r12+28h]
.text:00000000000079AD                 mov     rbp, [rax+rbx*8]
.text:00000000000079B1                 add     rbx, 1
.text:00000000000079B5                 mov     rdi, [rbp+20h]  ; ptr
.text:00000000000079B9                 call    _free
.text:00000000000079BE                 mov     rdi, rbp        ; ptr
.text:00000000000079C1                 call    _free
.text:00000000000079C6                 cmp     [r12+20h], rbx
.text:00000000000079CB                 jg      short loc_79A8
.text:00000000000079CD
.text:00000000000079CD loc_79CD:                               ; CODE XREF: match_ctx_clean+31↑j
.text:00000000000079CD                 mov     rdi, [r12+28h]  ; ptr
.text:00000000000079D2                 call    _free
.text:00000000000079D7                 mov     rax, [r12+10h]
.text:00000000000079DC                 test    rax, rax
.text:00000000000079DF                 jz      short loc_79F4
.text:00000000000079E1                 mov     rdi, [rax+10h]  ; ptr
.text:00000000000079E5                 call    _free
.text:00000000000079EA                 mov     rdi, [r12+10h]  ; ptr
.text:00000000000079EF                 call    _free
.text:00000000000079F4
.text:00000000000079F4 loc_79F4:                               ; CODE XREF: match_ctx_clean+6F↑j
.text:00000000000079F4                 mov     rdi, r12        ; ptr
.text:00000000000079F7                 add     r13, 1
.text:00000000000079FB                 call    _free
.text:0000000000007A00                 cmp     [r14+0E8h], r13
.text:0000000000007A07                 jg      short loc_7990
.text:0000000000007A09
.text:0000000000007A09 loc_7A09:                               ; CODE XREF: match_ctx_clean+13↑j
.text:0000000000007A09                 pop     rbx
.text:0000000000007A0A                 mov     qword ptr [r14+0E8h], 0
.text:0000000000007A15                 mov     qword ptr [r14+0C8h], 0
.text:0000000000007A20                 pop     rbp
.text:0000000000007A21                 pop     r12
.text:0000000000007A23                 pop     r13
.text:0000000000007A25                 pop     r14
.text:0000000000007A27                 retn
.text:0000000000007A27 ; } // starts at 7970
.text:0000000000007A27 match_ctx_clean endp
.text:0000000000007A27
.text:0000000000007A27 ; ---------------------------------------------------------------------------
.text:0000000000007A28                 align 10h
.text:0000000000007A30
.text:0000000000007A30 ; =============== S U B R O U T I N E =======================================
.text:0000000000007A30
.text:0000000000007A30
.text:0000000000007A30 re_string_char_size_at_part_0 proc near ; CODE XREF: check_node_accept_bytes_isra_31+3A↓p
.text:0000000000007A30                                         ; parse_bracket_element_constprop_37+3B↓p ...
.text:0000000000007A30 ; __unwind {
.text:0000000000007A30                 mov     rcx, [rdi+30h]
.text:0000000000007A34                 lea     rax, [rsi+1]
.text:0000000000007A38                 cmp     rax, rcx
.text:0000000000007A3B                 jge     short loc_7A78
.text:0000000000007A3D                 mov     rdx, [rdi+10h]
.text:0000000000007A41                 lea     rdi, ds:0[rax*4]
.text:0000000000007A49                 cmp     dword ptr [rdx+rax*4], 0FFFFFFFFh
.text:0000000000007A4D                 jnz     short loc_7A78
.text:0000000000007A4F                 sub     rcx, rsi
.text:0000000000007A52                 lea     rsi, [rdx+rdi-4]
.text:0000000000007A57                 mov     edx, 2
.text:0000000000007A5C                 jmp     short loc_7A6B
.text:0000000000007A5C ; ---------------------------------------------------------------------------
.text:0000000000007A5E                 align 20h
.text:0000000000007A60
.text:0000000000007A60 loc_7A60:                               ; CODE XREF: re_string_char_size_at_part_0+40↓j
.text:0000000000007A60                 add     rdx, 1
.text:0000000000007A64                 cmp     dword ptr [rsi+rdx*4-4], 0FFFFFFFFh
.text:0000000000007A69                 jnz     short locret_7A7D
.text:0000000000007A6B
.text:0000000000007A6B loc_7A6B:                               ; CODE XREF: re_string_char_size_at_part_0+2C↑j
.text:0000000000007A6B                 cmp     rdx, rcx
.text:0000000000007A6E                 mov     eax, edx
.text:0000000000007A70                 jnz     short loc_7A60
.text:0000000000007A72                 rep retn
.text:0000000000007A72 ; ---------------------------------------------------------------------------
.text:0000000000007A74                 align 8
.text:0000000000007A78
.text:0000000000007A78 loc_7A78:                               ; CODE XREF: re_string_char_size_at_part_0+B↑j
.text:0000000000007A78                                         ; re_string_char_size_at_part_0+1D↑j
.text:0000000000007A78                 mov     eax, 1
.text:0000000000007A7D
.text:0000000000007A7D locret_7A7D:                            ; CODE XREF: re_string_char_size_at_part_0+39↑j
.text:0000000000007A7D                 rep retn
.text:0000000000007A7D ; } // starts at 7A30
.text:0000000000007A7D re_string_char_size_at_part_0 endp
.text:0000000000007A7D
.text:0000000000007A7D ; ---------------------------------------------------------------------------
.text:0000000000007A7F                 align 20h
.text:0000000000007A80
.text:0000000000007A80 ; =============== S U B R O U T I N E =======================================
.text:0000000000007A80
.text:0000000000007A80
.text:0000000000007A80 re_node_set_compare_part_2 proc near    ; CODE XREF: re_acquire_state_context+A3↓p
.text:0000000000007A80                                         ; re_acquire_state+80↓p
.text:0000000000007A80 ; __unwind {
.text:0000000000007A80                 mov     rdx, [rdi+8]
.text:0000000000007A84                 xor     eax, eax
.text:0000000000007A86                 cmp     rdx, [rsi+8]
.text:0000000000007A8A                 jz      short loc_7A90
.text:0000000000007A8C                 rep retn
.text:0000000000007A8C ; ---------------------------------------------------------------------------
.text:0000000000007A8E                 align 10h
.text:0000000000007A90
.text:0000000000007A90 loc_7A90:                               ; CODE XREF: re_node_set_compare_part_2+A↑j
.text:0000000000007A90                 lea     rax, [rdx-1]
.text:0000000000007A94                 lea     rdx, ds:0[rax*8]
.text:0000000000007A9C                 jmp     short loc_7ABD
.text:0000000000007A9C ; ---------------------------------------------------------------------------
.text:0000000000007A9E                 align 20h
.text:0000000000007AA0
.text:0000000000007AA0 loc_7AA0:                               ; CODE XREF: re_node_set_compare_part_2+40↓j
.text:0000000000007AA0                 mov     rcx, [rdi+10h]
.text:0000000000007AA4                 mov     r8, [rcx+rdx]
.text:0000000000007AA8                 mov     rcx, [rsi+10h]
.text:0000000000007AAC                 mov     rcx, [rcx+rdx]
.text:0000000000007AB0                 sub     rdx, 8
.text:0000000000007AB4                 cmp     r8, rcx
.text:0000000000007AB7                 jnz     short loc_7AD0
.text:0000000000007AB9                 sub     rax, 1
.text:0000000000007ABD
.text:0000000000007ABD loc_7ABD:                               ; CODE XREF: re_node_set_compare_part_2+1C↑j
.text:0000000000007ABD                 test    rax, rax
.text:0000000000007AC0                 jns     short loc_7AA0
.text:0000000000007AC2                 mov     eax, 1
.text:0000000000007AC7                 retn
.text:0000000000007AC7 ; ---------------------------------------------------------------------------
.text:0000000000007AC8                 align 10h
.text:0000000000007AD0
.text:0000000000007AD0 loc_7AD0:                               ; CODE XREF: re_node_set_compare_part_2+37↑j
.text:0000000000007AD0                 xor     eax, eax
.text:0000000000007AD2                 retn
.text:0000000000007AD2 ; } // starts at 7A80
.text:0000000000007AD2 re_node_set_compare_part_2 endp
.text:0000000000007AD2
.text:0000000000007AD2 ; ---------------------------------------------------------------------------
.text:0000000000007AD3                 align 20h
.text:0000000000007AE0
.text:0000000000007AE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000007AE0
.text:0000000000007AE0
.text:0000000000007AE0 re_node_set_contains_isra_3 proc near   ; CODE XREF: check_arrival_expand_ecl_sub+2B↓p
.text:0000000000007AE0                                         ; expand_bkref_cache+173↓p ...
.text:0000000000007AE0 ; __unwind {
.text:0000000000007AE0                 xor     eax, eax
.text:0000000000007AE2                 test    rdi, rdi
.text:0000000000007AE5                 jle     short locret_7B25
.text:0000000000007AE7                 mov     r8, [rsi]
.text:0000000000007AEA                 sub     rdi, 1
.text:0000000000007AEE                 xor     esi, esi
.text:0000000000007AF0
.text:0000000000007AF0 loc_7AF0:                               ; CODE XREF: re_node_set_contains_isra_3+67↓j
.text:0000000000007AF0                 cmp     rsi, rdi
.text:0000000000007AF3                 jnb     short loc_7B1D
.text:0000000000007AF5                 lea     rcx, [rsi+rdi]
.text:0000000000007AF9                 shr     rcx, 1
.text:0000000000007AFC                 cmp     rdx, [r8+rcx*8]
.text:0000000000007B00                 jle     short loc_7B18
.text:0000000000007B02                 jmp     short loc_7B30
.text:0000000000007B02 ; ---------------------------------------------------------------------------
.text:0000000000007B04                 align 8
.text:0000000000007B08
.text:0000000000007B08 loc_7B08:                               ; CODE XREF: re_node_set_contains_isra_3+3B↓j
.text:0000000000007B08                 lea     rax, [rsi+rcx]
.text:0000000000007B0C                 shr     rax, 1
.text:0000000000007B0F                 cmp     [r8+rax*8], rdx
.text:0000000000007B13                 jl      short loc_7B40
.text:0000000000007B15                 mov     rcx, rax
.text:0000000000007B18
.text:0000000000007B18 loc_7B18:                               ; CODE XREF: re_node_set_contains_isra_3+20↑j
.text:0000000000007B18                 cmp     rsi, rcx
.text:0000000000007B1B                 jb      short loc_7B08
.text:0000000000007B1D
.text:0000000000007B1D loc_7B1D:                               ; CODE XREF: re_node_set_contains_isra_3+13↑j
.text:0000000000007B1D                 xor     eax, eax
.text:0000000000007B1F                 cmp     rdx, [r8+rsi*8]
.text:0000000000007B23                 jz      short loc_7B50
.text:0000000000007B25
.text:0000000000007B25 locret_7B25:                            ; CODE XREF: re_node_set_contains_isra_3+5↑j
.text:0000000000007B25                 rep retn
.text:0000000000007B25 ; ---------------------------------------------------------------------------
.text:0000000000007B27                 align 10h
.text:0000000000007B30
.text:0000000000007B30 loc_7B30:                               ; CODE XREF: re_node_set_contains_isra_3+22↑j
.text:0000000000007B30                 mov     rax, rcx
.text:0000000000007B33                 mov     rcx, rdi
.text:0000000000007B36                 db      2Eh
.text:0000000000007B36                 nop     word ptr [rax+rax+00000000h]
.text:0000000000007B40
.text:0000000000007B40 loc_7B40:                               ; CODE XREF: re_node_set_contains_isra_3+33↑j
.text:0000000000007B40                 lea     rsi, [rax+1]
.text:0000000000007B44                 mov     rdi, rcx
.text:0000000000007B47                 jmp     short loc_7AF0
.text:0000000000007B47 ; ---------------------------------------------------------------------------
.text:0000000000007B49                 align 10h
.text:0000000000007B50
.text:0000000000007B50 loc_7B50:                               ; CODE XREF: re_node_set_contains_isra_3+43↑j
.text:0000000000007B50                 lea     rax, [rsi+1]
.text:0000000000007B54                 retn
.text:0000000000007B54 ; } // starts at 7AE0
.text:0000000000007B54 re_node_set_contains_isra_3 endp
.text:0000000000007B54
.text:0000000000007B54 ; ---------------------------------------------------------------------------
.text:0000000000007B55                 align 20h
.text:0000000000007B60
.text:0000000000007B60 ; =============== S U B R O U T I N E =======================================
.text:0000000000007B60
.text:0000000000007B60
.text:0000000000007B60 check_arrival_expand_ecl_sub proc near  ; CODE XREF: check_arrival_expand_ecl_sub+E0↓p
.text:0000000000007B60                                         ; check_arrival_expand_ecl+D8↓p
.text:0000000000007B60 ; __unwind {
.text:0000000000007B60                 push    r15
.text:0000000000007B62                 push    r14
.text:0000000000007B64                 lea     r14, [rsi+10h]
.text:0000000000007B68                 push    r13
.text:0000000000007B6A                 push    r12
.text:0000000000007B6C                 mov     r15, rcx
.text:0000000000007B6F                 push    rbp
.text:0000000000007B70                 push    rbx
.text:0000000000007B71                 mov     r12, rdi
.text:0000000000007B74                 mov     rbp, rsi
.text:0000000000007B77                 mov     rbx, rdx
.text:0000000000007B7A                 mov     r13d, r8d
.text:0000000000007B7D                 sub     rsp, 8
.text:0000000000007B81
.text:0000000000007B81 loc_7B81:                               ; CODE XREF: check_arrival_expand_ecl_sub+83↓j
.text:0000000000007B81                 mov     rdi, [rbp+8]
.text:0000000000007B85                 mov     rdx, rbx
.text:0000000000007B88                 mov     rsi, r14
.text:0000000000007B8B                 call    re_node_set_contains_isra_3
.text:0000000000007B90                 test    rax, rax
.text:0000000000007B93                 jnz     short loc_7C00
.text:0000000000007B95                 mov     rax, rbx
.text:0000000000007B98                 shl     rax, 4
.text:0000000000007B9C                 add     rax, [r12]
.text:0000000000007BA0                 movzx   edx, byte ptr [rax+8]
.text:0000000000007BA4                 cmp     edx, r13d
.text:0000000000007BA7                 jnz     short loc_7BAE
.text:0000000000007BA9                 cmp     [rax], r15
.text:0000000000007BAC                 jz      short loc_7BE8
.text:0000000000007BAE
.text:0000000000007BAE loc_7BAE:                               ; CODE XREF: check_arrival_expand_ecl_sub+47↑j
.text:0000000000007BAE                 mov     rsi, rbx
.text:0000000000007BB1                 mov     rdi, rbp
.text:0000000000007BB4                 call    re_node_set_insert
.text:0000000000007BB9                 test    al, al
.text:0000000000007BBB                 jz      short loc_7C18
.text:0000000000007BBD                 lea     rbx, [rbx+rbx*2]
.text:0000000000007BC1                 mov     rdx, [r12+28h]
.text:0000000000007BC6                 shl     rbx, 3
.text:0000000000007BCA                 add     rdx, rbx
.text:0000000000007BCD                 mov     rax, [rdx+8]
.text:0000000000007BD1                 test    rax, rax
.text:0000000000007BD4                 jz      short loc_7C00
.text:0000000000007BD6                 cmp     rax, 2
.text:0000000000007BDA                 mov     rdx, [rdx+10h]
.text:0000000000007BDE                 jz      short loc_7C30
.text:0000000000007BE0
.text:0000000000007BE0 loc_7BE0:                               ; CODE XREF: check_arrival_expand_ecl_sub+F3↓j
.text:0000000000007BE0                 mov     rbx, [rdx]
.text:0000000000007BE3                 jmp     short loc_7B81
.text:0000000000007BE3 ; ---------------------------------------------------------------------------
.text:0000000000007BE5                 align 8
.text:0000000000007BE8
.text:0000000000007BE8 loc_7BE8:                               ; CODE XREF: check_arrival_expand_ecl_sub+4C↑j
.text:0000000000007BE8                 cmp     r13d, 9
.text:0000000000007BEC                 jnz     short loc_7C00
.text:0000000000007BEE                 mov     rsi, rbx
.text:0000000000007BF1                 mov     rdi, rbp
.text:0000000000007BF4                 call    re_node_set_insert
.text:0000000000007BF9                 test    al, al
.text:0000000000007BFB                 jz      short loc_7C18
.text:0000000000007BFD                 nop     dword ptr [rax]
.text:0000000000007C00
.text:0000000000007C00 loc_7C00:                               ; CODE XREF: check_arrival_expand_ecl_sub+33↑j
.text:0000000000007C00                                         ; check_arrival_expand_ecl_sub+74↑j ...
.text:0000000000007C00                 xor     eax, eax
.text:0000000000007C02
.text:0000000000007C02 loc_7C02:                               ; CODE XREF: check_arrival_expand_ecl_sub+E7↓j
.text:0000000000007C02                 add     rsp, 8
.text:0000000000007C06                 pop     rbx
.text:0000000000007C07                 pop     rbp
.text:0000000000007C08                 pop     r12
.text:0000000000007C0A                 pop     r13
.text:0000000000007C0C                 pop     r14
.text:0000000000007C0E                 pop     r15
.text:0000000000007C10                 retn
.text:0000000000007C10 ; ---------------------------------------------------------------------------
.text:0000000000007C11                 align 8
.text:0000000000007C18
.text:0000000000007C18 loc_7C18:                               ; CODE XREF: check_arrival_expand_ecl_sub+5B↑j
.text:0000000000007C18                                         ; check_arrival_expand_ecl_sub+9B↑j
.text:0000000000007C18                 add     rsp, 8
.text:0000000000007C1C                 mov     eax, 0Ch
.text:0000000000007C21                 pop     rbx
.text:0000000000007C22                 pop     rbp
.text:0000000000007C23                 pop     r12
.text:0000000000007C25                 pop     r13
.text:0000000000007C27                 pop     r14
.text:0000000000007C29                 pop     r15
.text:0000000000007C2B                 retn
.text:0000000000007C2B ; ---------------------------------------------------------------------------
.text:0000000000007C2C                 align 10h
.text:0000000000007C30
.text:0000000000007C30 loc_7C30:                               ; CODE XREF: check_arrival_expand_ecl_sub+7E↑j
.text:0000000000007C30                 mov     rdx, [rdx+8]
.text:0000000000007C34                 mov     r8d, r13d
.text:0000000000007C37                 mov     rcx, r15
.text:0000000000007C3A                 mov     rsi, rbp
.text:0000000000007C3D                 mov     rdi, r12
.text:0000000000007C40                 call    check_arrival_expand_ecl_sub
.text:0000000000007C45                 test    eax, eax
.text:0000000000007C47                 jnz     short loc_7C02
.text:0000000000007C49                 mov     rax, [r12+28h]
.text:0000000000007C4E                 mov     rdx, [rax+rbx+10h]
.text:0000000000007C53                 jmp     short loc_7BE0
.text:0000000000007C53 ; } // starts at 7B60
.text:0000000000007C53 check_arrival_expand_ecl_sub endp
.text:0000000000007C53
.text:0000000000007C53 ; ---------------------------------------------------------------------------
.text:0000000000007C55                 align 20h
.text:0000000000007C60
.text:0000000000007C60 ; =============== S U B R O U T I N E =======================================
.text:0000000000007C60
.text:0000000000007C60
.text:0000000000007C60 re_node_set_remove_at_isra_4_part_5 proc near
.text:0000000000007C60                                         ; CODE XREF: re_acquire_state_context+1D9↓p
.text:0000000000007C60                                         ; _sub_epsilon_src_nodes+1DD↓p ...
.text:0000000000007C60 ; __unwind {
.text:0000000000007C60                 mov     rax, [rdi]
.text:0000000000007C63                 cmp     rax, rdx
.text:0000000000007C66                 jle     short locret_7C92
.text:0000000000007C68                 sub     rax, 1
.text:0000000000007C6C                 cmp     rdx, rax
.text:0000000000007C6F                 mov     [rdi], rax
.text:0000000000007C72                 jge     short locret_7C92
.text:0000000000007C74                 mov     rax, [rsi]
.text:0000000000007C77                 nop     word ptr [rax+rax+00000000h]
.text:0000000000007C80
.text:0000000000007C80 loc_7C80:                               ; CODE XREF: re_node_set_remove_at_isra_4_part_5+30↓j
.text:0000000000007C80                 mov     rcx, [rax+rdx*8+8]
.text:0000000000007C85                 mov     [rax+rdx*8], rcx
.text:0000000000007C89                 add     rdx, 1
.text:0000000000007C8D                 cmp     rdx, [rdi]
.text:0000000000007C90                 jl      short loc_7C80
.text:0000000000007C92
.text:0000000000007C92 locret_7C92:                            ; CODE XREF: re_node_set_remove_at_isra_4_part_5+6↑j
.text:0000000000007C92                                         ; re_node_set_remove_at_isra_4_part_5+12↑j
.text:0000000000007C92                 rep retn
.text:0000000000007C92 ; } // starts at 7C60
.text:0000000000007C92 re_node_set_remove_at_isra_4_part_5 endp
.text:0000000000007C92
.text:0000000000007C92 ; ---------------------------------------------------------------------------
.text:0000000000007C94                 align 20h
.text:0000000000007CA0
.text:0000000000007CA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000007CA0
.text:0000000000007CA0
.text:0000000000007CA0 optimize_subexps proc near              ; DATA XREF: re_compile_internal+611↓o
.text:0000000000007CA0 ; __unwind {
.text:0000000000007CA0                 movzx   eax, byte ptr [rsi+30h]
.text:0000000000007CA4                 cmp     al, 4
.text:0000000000007CA6                 jz      short loc_7D00
.text:0000000000007CA8                 cmp     al, 11h
.text:0000000000007CAA                 jz      short loc_7CB0
.text:0000000000007CAC
.text:0000000000007CAC loc_7CAC:                               ; CODE XREF: optimize_subexps+17↓j
.text:0000000000007CAC                                         ; optimize_subexps+1D↓j ...
.text:0000000000007CAC                 xor     eax, eax
.text:0000000000007CAE                 retn
.text:0000000000007CAE ; ---------------------------------------------------------------------------
.text:0000000000007CAF                 align 10h
.text:0000000000007CB0
.text:0000000000007CB0 loc_7CB0:                               ; CODE XREF: optimize_subexps+A↑j
.text:0000000000007CB0                 mov     rax, [rsi+8]
.text:0000000000007CB4                 test    rax, rax
.text:0000000000007CB7                 jz      short loc_7CAC
.text:0000000000007CB9                 cmp     byte ptr [rax+30h], 11h
.text:0000000000007CBD                 jnz     short loc_7CAC
.text:0000000000007CBF                 mov     rcx, [rax+28h]
.text:0000000000007CC3                 mov     rax, [rax+8]
.text:0000000000007CC7                 test    rax, rax
.text:0000000000007CCA                 mov     [rsi+8], rax
.text:0000000000007CCE                 jz      short loc_7CD3
.text:0000000000007CD0                 mov     [rax], rsi
.text:0000000000007CD3
.text:0000000000007CD3 loc_7CD3:                               ; CODE XREF: optimize_subexps+2E↑j
.text:0000000000007CD3                 mov     rax, [rdi+0E0h]
.text:0000000000007CDA                 mov     rdx, [rsi+28h]
.text:0000000000007CDE                 cmp     rcx, 3Fh ; '?'
.text:0000000000007CE2                 mov     rdx, [rax+rdx*8]
.text:0000000000007CE6                 mov     [rax+rcx*8], rdx
.text:0000000000007CEA                 jg      short loc_7CAC
.text:0000000000007CEC                 mov     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000007CF3                 rol     rax, cl
.text:0000000000007CF6                 and     [rdi+0A0h], rax
.text:0000000000007CFD                 jmp     short loc_7CAC
.text:0000000000007CFD ; ---------------------------------------------------------------------------
.text:0000000000007CFF                 align 20h
.text:0000000000007D00
.text:0000000000007D00 loc_7D00:                               ; CODE XREF: optimize_subexps+6↑j
.text:0000000000007D00                 mov     rax, [rdi+0E0h]
.text:0000000000007D07                 test    rax, rax
.text:0000000000007D0A                 jz      short loc_7CAC
.text:0000000000007D0C                 movsxd  rdx, dword ptr [rsi+28h]
.text:0000000000007D10                 mov     rcx, [rax+rdx*8]
.text:0000000000007D14                 mov     eax, 1
.text:0000000000007D19                 shl     eax, cl
.text:0000000000007D1B                 mov     [rsi+28h], rcx
.text:0000000000007D1F                 cdqe
.text:0000000000007D21                 or      [rdi+0A0h], rax
.text:0000000000007D28                 xor     eax, eax
.text:0000000000007D2A                 retn
.text:0000000000007D2A ; } // starts at 7CA0
.text:0000000000007D2A optimize_subexps endp
.text:0000000000007D2A
.text:0000000000007D2A ; ---------------------------------------------------------------------------
.text:0000000000007D2B                 align 10h
.text:0000000000007D30
.text:0000000000007D30 ; =============== S U B R O U T I N E =======================================
.text:0000000000007D30
.text:0000000000007D30
.text:0000000000007D30 calc_next       proc near               ; DATA XREF: re_compile_internal+699↓o
.text:0000000000007D30 ; __unwind {
.text:0000000000007D30                 movzx   eax, byte ptr [rsi+30h]
.text:0000000000007D34                 mov     rdx, [rsi+8]
.text:0000000000007D38                 cmp     al, 0Bh
.text:0000000000007D3A                 jz      short loc_7D80
.text:0000000000007D3C                 cmp     al, 10h
.text:0000000000007D3E                 jz      short loc_7D68
.text:0000000000007D40                 test    rdx, rdx
.text:0000000000007D43                 jz      short loc_7D4D
.text:0000000000007D45                 mov     rax, [rsi+20h]
.text:0000000000007D49                 mov     [rdx+20h], rax
.text:0000000000007D4D
.text:0000000000007D4D loc_7D4D:                               ; CODE XREF: calc_next+13↑j
.text:0000000000007D4D                 mov     rax, [rsi+10h]
.text:0000000000007D51                 test    rax, rax
.text:0000000000007D54                 jz      short loc_7D5E
.text:0000000000007D56                 mov     rdx, [rsi+20h]
.text:0000000000007D5A                 mov     [rax+20h], rdx
.text:0000000000007D5E
.text:0000000000007D5E loc_7D5E:                               ; CODE XREF: calc_next+24↑j
.text:0000000000007D5E                 xor     eax, eax
.text:0000000000007D60                 retn
.text:0000000000007D60 ; ---------------------------------------------------------------------------
.text:0000000000007D61                 align 8
.text:0000000000007D68
.text:0000000000007D68 loc_7D68:                               ; CODE XREF: calc_next+E↑j
.text:0000000000007D68                 mov     rax, [rsi+10h]
.text:0000000000007D6C                 mov     rcx, [rax+18h]
.text:0000000000007D70                 mov     [rdx+20h], rcx
.text:0000000000007D74                 mov     rdx, [rsi+20h]
.text:0000000000007D78                 mov     [rax+20h], rdx
.text:0000000000007D7C                 xor     eax, eax
.text:0000000000007D7E                 retn
.text:0000000000007D7E ; ---------------------------------------------------------------------------
.text:0000000000007D7F                 align 20h
.text:0000000000007D80
.text:0000000000007D80 loc_7D80:                               ; CODE XREF: calc_next+A↑j
.text:0000000000007D80                 mov     [rdx+20h], rsi
.text:0000000000007D84                 xor     eax, eax
.text:0000000000007D86                 retn
.text:0000000000007D86 ; } // starts at 7D30
.text:0000000000007D86 calc_next       endp
.text:0000000000007D86
.text:0000000000007D86 ; ---------------------------------------------------------------------------
.text:0000000000007D87                 align 10h
.text:0000000000007D90
.text:0000000000007D90 ; =============== S U B R O U T I N E =======================================
.text:0000000000007D90
.text:0000000000007D90
.text:0000000000007D90 check_dst_limits_isra_13 proc near      ; CODE XREF: sift_states_backward+18C↓p
.text:0000000000007D90                                         ; update_cur_sifted_state+6A3↓p
.text:0000000000007D90
.text:0000000000007D90 var_70          = qword ptr -70h
.text:0000000000007D90 var_68          = qword ptr -68h
.text:0000000000007D90 var_60          = qword ptr -60h
.text:0000000000007D90 var_58          = qword ptr -58h
.text:0000000000007D90 var_50          = qword ptr -50h
.text:0000000000007D90 var_48          = qword ptr -48h
.text:0000000000007D90 var_40          = qword ptr -40h
.text:0000000000007D90 arg_0           = qword ptr  8
.text:0000000000007D90
.text:0000000000007D90 ; __unwind {
.text:0000000000007D90                 push    r15
.text:0000000000007D92                 push    r14
.text:0000000000007D94                 push    r13
.text:0000000000007D96                 push    r12
.text:0000000000007D98                 push    rbp
.text:0000000000007D99                 push    rbx
.text:0000000000007D9A                 xor     ebx, ebx
.text:0000000000007D9C                 sub     rsp, 48h
.text:0000000000007DA0                 mov     rax, [rdi+98h]
.text:0000000000007DA7                 mov     r15, [rdi+0C8h]
.text:0000000000007DAE                 mov     r12, [rsp+78h+arg_0]
.text:0000000000007DB6                 mov     [rsp+78h+var_70], rax
.text:0000000000007DBB                 mov     rbp, r15
.text:0000000000007DBE
.text:0000000000007DBE loc_7DBE:                               ; CODE XREF: check_dst_limits_isra_13+207↓j
.text:0000000000007DBE                 cmp     rbx, rbp
.text:0000000000007DC1                 jge     short loc_7E1B
.text:0000000000007DC3                 lea     rax, [rbx+rbp]
.text:0000000000007DC7                 mov     r13, [rdi+0D8h]
.text:0000000000007DCE                 mov     r10, rax
.text:0000000000007DD1                 shr     r10, 3Fh
.text:0000000000007DD5                 add     r10, rax
.text:0000000000007DD8                 sar     r10, 1
.text:0000000000007DDB                 lea     rax, [r10+r10*4]
.text:0000000000007DDF                 cmp     r8, [r13+rax*8+8]
.text:0000000000007DE4                 jle     short loc_7E16
.text:0000000000007DE6                 jmp     loc_7F80
.text:0000000000007DE6 ; ---------------------------------------------------------------------------
.text:0000000000007DEB                 align 10h
.text:0000000000007DF0
.text:0000000000007DF0 loc_7DF0:                               ; CODE XREF: check_dst_limits_isra_13+89↓j
.text:0000000000007DF0                 lea     r11, [rbx+r10]
.text:0000000000007DF4                 mov     rax, r11
.text:0000000000007DF7                 shr     rax, 3Fh
.text:0000000000007DFB                 add     rax, r11
.text:0000000000007DFE                 sar     rax, 1
.text:0000000000007E01                 lea     r11, [rax+rax*4]
.text:0000000000007E05                 mov     r14, rax
.text:0000000000007E08                 cmp     [r13+r11*8+8], r8
.text:0000000000007E0D                 jl      loc_7F90
.text:0000000000007E13                 mov     r10, rax
.text:0000000000007E16
.text:0000000000007E16 loc_7E16:                               ; CODE XREF: check_dst_limits_isra_13+54↑j
.text:0000000000007E16                 cmp     rbx, r10
.text:0000000000007E19                 jl      short loc_7DF0
.text:0000000000007E1B
.text:0000000000007E1B loc_7E1B:                               ; CODE XREF: check_dst_limits_isra_13+31↑j
.text:0000000000007E1B                 cmp     r15, rbx
.text:0000000000007E1E                 jle     loc_7FC0
.text:0000000000007E24                 mov     r11, [rdi+0D8h]
.text:0000000000007E2B                 lea     rax, [rbx+rbx*4]
.text:0000000000007E2F                 lea     rax, [r11+rax*8]
.text:0000000000007E33                 cmp     r8, [rax+8]
.text:0000000000007E37                 mov     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000007E3E                 cmovnz  rbx, rax
.text:0000000000007E42
.text:0000000000007E42 loc_7E42:                               ; CODE XREF: check_dst_limits_isra_13+237↓j
.text:0000000000007E42                 mov     rax, r15
.text:0000000000007E45                 xor     ebp, ebp
.text:0000000000007E47
.text:0000000000007E47 loc_7E47:                               ; CODE XREF: check_dst_limits_isra_13+227↓j
.text:0000000000007E47                 cmp     rbp, rax
.text:0000000000007E4A                 jge     short loc_7EA4
.text:0000000000007E4C                 lea     r11, [rbp+rax+0]
.text:0000000000007E51                 mov     r10, r11
.text:0000000000007E54                 shr     r10, 3Fh
.text:0000000000007E58                 add     r10, r11
.text:0000000000007E5B                 mov     r11, [rdi+0D8h]
.text:0000000000007E62                 sar     r10, 1
.text:0000000000007E65                 lea     r13, [r10+r10*4]
.text:0000000000007E69                 cmp     r12, [r11+r13*8+8]
.text:0000000000007E6E                 jle     short loc_7E9F
.text:0000000000007E70                 jmp     loc_7FA0
.text:0000000000007E70 ; ---------------------------------------------------------------------------
.text:0000000000007E75                 align 8
.text:0000000000007E78
.text:0000000000007E78 loc_7E78:                               ; CODE XREF: check_dst_limits_isra_13+112↓j
.text:0000000000007E78                 lea     r13, [rbp+r10+0]
.text:0000000000007E7D                 mov     rax, r13
.text:0000000000007E80                 shr     rax, 3Fh
.text:0000000000007E84                 add     rax, r13
.text:0000000000007E87                 sar     rax, 1
.text:0000000000007E8A                 lea     r13, [rax+rax*4]
.text:0000000000007E8E                 mov     r14, rax
.text:0000000000007E91                 cmp     [r11+r13*8+8], r12
.text:0000000000007E96                 jl      loc_7FB0
.text:0000000000007E9C                 mov     r10, rax
.text:0000000000007E9F
.text:0000000000007E9F loc_7E9F:                               ; CODE XREF: check_dst_limits_isra_13+DE↑j
.text:0000000000007E9F                 cmp     rbp, r10
.text:0000000000007EA2                 jl      short loc_7E78
.text:0000000000007EA4
.text:0000000000007EA4 loc_7EA4:                               ; CODE XREF: check_dst_limits_isra_13+BA↑j
.text:0000000000007EA4                 cmp     r15, rbp
.text:0000000000007EA7                 jle     loc_7FD0
.text:0000000000007EAD                 mov     r10, [rdi+0D8h]
.text:0000000000007EB4                 lea     rax, [rbp+rbp*4+0]
.text:0000000000007EB9                 lea     rax, [r10+rax*8]
.text:0000000000007EBD                 cmp     r12, [rax+8]
.text:0000000000007EC1                 mov     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000007EC8                 cmovnz  rbp, rax
.text:0000000000007ECC
.text:0000000000007ECC loc_7ECC:                               ; CODE XREF: check_dst_limits_isra_13+247↓j
.text:0000000000007ECC                 cmp     qword ptr [rsi], 0
.text:0000000000007ED0                 jle     loc_7FF2
.text:0000000000007ED6                 mov     [rsp+78h+var_48], rbp
.text:0000000000007EDB                 mov     [rsp+78h+var_58], r9
.text:0000000000007EE0                 mov     r13, rdi
.text:0000000000007EE3                 mov     [rsp+78h+var_60], r8
.text:0000000000007EE8                 mov     [rsp+78h+var_68], rcx
.text:0000000000007EED                 xor     r14d, r14d
.text:0000000000007EF0                 mov     [rsp+78h+var_40], rsi
.text:0000000000007EF5                 mov     [rsp+78h+var_50], rbx
.text:0000000000007EFA                 mov     rbp, rdx
.text:0000000000007EFD                 mov     r15, r12
.text:0000000000007F00
.text:0000000000007F00 loc_7F00:                               ; CODE XREF: check_dst_limits_isra_13+25C↓j
.text:0000000000007F00                 mov     rax, [rbp+0]
.text:0000000000007F04                 mov     rdx, [r13+0D8h]
.text:0000000000007F0B                 mov     rdi, r13
.text:0000000000007F0E                 mov     r9, [rsp+78h+var_50]
.text:0000000000007F13                 mov     r8, [rsp+78h+var_60]
.text:0000000000007F18                 mov     rcx, [rsp+78h+var_68]
.text:0000000000007F1D                 mov     rsi, [rax+r14*8]
.text:0000000000007F21                 lea     rax, [rsi+rsi*4]
.text:0000000000007F25                 lea     rax, [rdx+rax*8]
.text:0000000000007F29                 mov     rdx, [rsp+78h+var_70]
.text:0000000000007F2E                 mov     rax, [rax]
.text:0000000000007F31                 shl     rax, 4
.text:0000000000007F35                 add     rax, [rdx]
.text:0000000000007F38                 mov     r12, [rax]
.text:0000000000007F3B                 mov     rdx, r12
.text:0000000000007F3E                 call    check_dst_limits_calc_pos
.text:0000000000007F43                 mov     ebx, eax
.text:0000000000007F45                 mov     rax, [rbp+0]
.text:0000000000007F49                 mov     r9, [rsp+78h+var_48]
.text:0000000000007F4E                 mov     rcx, [rsp+78h+var_58]
.text:0000000000007F53                 mov     r8, r15
.text:0000000000007F56                 mov     rdx, r12
.text:0000000000007F59                 mov     rdi, r13
.text:0000000000007F5C                 mov     rsi, [rax+r14*8]
.text:0000000000007F60                 call    check_dst_limits_calc_pos
.text:0000000000007F65                 cmp     ebx, eax
.text:0000000000007F67                 jz      short loc_7FE0
.text:0000000000007F69                 mov     eax, 1
.text:0000000000007F6E
.text:0000000000007F6E loc_7F6E:                               ; CODE XREF: check_dst_limits_isra_13+264↓j
.text:0000000000007F6E                 add     rsp, 48h
.text:0000000000007F72                 pop     rbx
.text:0000000000007F73                 pop     rbp
.text:0000000000007F74                 pop     r12
.text:0000000000007F76                 pop     r13
.text:0000000000007F78                 pop     r14
.text:0000000000007F7A                 pop     r15
.text:0000000000007F7C                 retn
.text:0000000000007F7C ; ---------------------------------------------------------------------------
.text:0000000000007F7D                 align 20h
.text:0000000000007F80
.text:0000000000007F80 loc_7F80:                               ; CODE XREF: check_dst_limits_isra_13+56↑j
.text:0000000000007F80                 mov     r14, r10
.text:0000000000007F83                 mov     r10, rbp
.text:0000000000007F86                 db      2Eh
.text:0000000000007F86                 nop     word ptr [rax+rax+00000000h]
.text:0000000000007F90
.text:0000000000007F90 loc_7F90:                               ; CODE XREF: check_dst_limits_isra_13+7D↑j
.text:0000000000007F90                 lea     rbx, [r14+1]
.text:0000000000007F94                 mov     rbp, r10
.text:0000000000007F97                 jmp     loc_7DBE
.text:0000000000007F97 ; ---------------------------------------------------------------------------
.text:0000000000007F9C                 align 20h
.text:0000000000007FA0
.text:0000000000007FA0 loc_7FA0:                               ; CODE XREF: check_dst_limits_isra_13+E0↑j
.text:0000000000007FA0                 mov     r14, r10
.text:0000000000007FA3                 mov     r10, rax
.text:0000000000007FA6                 db      2Eh
.text:0000000000007FA6                 nop     word ptr [rax+rax+00000000h]
.text:0000000000007FB0
.text:0000000000007FB0 loc_7FB0:                               ; CODE XREF: check_dst_limits_isra_13+106↑j
.text:0000000000007FB0                 lea     rbp, [r14+1]
.text:0000000000007FB4                 mov     rax, r10
.text:0000000000007FB7                 jmp     loc_7E47
.text:0000000000007FB7 ; ---------------------------------------------------------------------------
.text:0000000000007FBC                 align 20h
.text:0000000000007FC0
.text:0000000000007FC0 loc_7FC0:                               ; CODE XREF: check_dst_limits_isra_13+8E↑j
.text:0000000000007FC0                 mov     rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000007FC7                 jmp     loc_7E42
.text:0000000000007FC7 ; ---------------------------------------------------------------------------
.text:0000000000007FCC                 align 10h
.text:0000000000007FD0
.text:0000000000007FD0 loc_7FD0:                               ; CODE XREF: check_dst_limits_isra_13+117↑j
.text:0000000000007FD0                 mov     rbp, 0FFFFFFFFFFFFFFFFh
.text:0000000000007FD7                 jmp     loc_7ECC
.text:0000000000007FD7 ; ---------------------------------------------------------------------------
.text:0000000000007FDC                 align 20h
.text:0000000000007FE0
.text:0000000000007FE0 loc_7FE0:                               ; CODE XREF: check_dst_limits_isra_13+1D7↑j
.text:0000000000007FE0                 mov     rax, [rsp+78h+var_40]
.text:0000000000007FE5                 add     r14, 1
.text:0000000000007FE9                 cmp     r14, [rax]
.text:0000000000007FEC                 jl      loc_7F00
.text:0000000000007FF2
.text:0000000000007FF2 loc_7FF2:                               ; CODE XREF: check_dst_limits_isra_13+140↑j
.text:0000000000007FF2                 xor     eax, eax
.text:0000000000007FF4                 jmp     loc_7F6E
.text:0000000000007FF4 ; } // starts at 7D90
.text:0000000000007FF4 check_dst_limits_isra_13 endp
.text:0000000000007FF4
.text:0000000000007FF4 ; ---------------------------------------------------------------------------
.text:0000000000007FF9                 align 20h
.text:0000000000008000
.text:0000000000008000 ; =============== S U B R O U T I N E =======================================
.text:0000000000008000
.text:0000000000008000
.text:0000000000008000 re_node_set_merge proc near             ; CODE XREF: calc_eclosure_iter+132↓p
.text:0000000000008000                                         ; check_arrival_expand_ecl+113↓p ...
.text:0000000000008000 ; __unwind {
.text:0000000000008000                 test    rsi, rsi
.text:0000000000008003                 jz      loc_80F8
.text:0000000000008009                 mov     rdx, [rsi+8]
.text:000000000000800D                 test    rdx, rdx
.text:0000000000008010                 jz      loc_80F8
.text:0000000000008016                 push    r12
.text:0000000000008018                 push    rbp
.text:0000000000008019                 mov     r12, rsi
.text:000000000000801C                 push    rbx
.text:000000000000801D                 mov     rax, [rdi+8]
.text:0000000000008021                 mov     rbx, rdi
.text:0000000000008024                 mov     rsi, [rdi]
.text:0000000000008027                 lea     rcx, [rax+rdx*2]
.text:000000000000802B                 cmp     rsi, rcx
.text:000000000000802E                 jl      loc_8178
.text:0000000000008034
.text:0000000000008034 loc_8034:                               ; CODE XREF: re_node_set_merge+1A4↓j
.text:0000000000008034                 test    rax, rax
.text:0000000000008037                 jz      loc_81B0
.text:000000000000803D                 lea     rbp, [rax+rdx*2]
.text:0000000000008041                 sub     rdx, 1
.text:0000000000008045                 sub     rax, 1
.text:0000000000008049                 mov     rdi, rdx
.text:000000000000804C                 not     rdi
.text:000000000000804F
.text:000000000000804F loc_804F:                               ; CODE XREF: re_node_set_merge+10E↓j
.text:000000000000804F                                         ; re_node_set_merge+11C↓j
.text:000000000000804F                 test    rdi, rdi
.text:0000000000008052                 jns     short loc_8090
.text:0000000000008054
.text:0000000000008054 loc_8054:                               ; CODE XREF: re_node_set_merge+8B↓j
.text:0000000000008054                 test    rax, rax
.text:0000000000008057                 js      short loc_8090
.text:0000000000008059                 mov     rcx, [rbx+10h]
.text:000000000000805D                 mov     rsi, [r12+10h]
.text:0000000000008062                 mov     rsi, [rsi+rdx*8]
.text:0000000000008066                 cmp     [rcx+rax*8], rsi
.text:000000000000806A                 jz      loc_8100
.text:0000000000008070                 jge     loc_8118
.text:0000000000008076                 sub     rdx, 1
.text:000000000000807A                 sub     rbp, 1
.text:000000000000807E                 mov     rdi, rdx
.text:0000000000008081                 mov     [rcx+rbp*8], rsi
.text:0000000000008085                 not     rdi
.text:0000000000008088                 test    rdi, rdi
.text:000000000000808B                 js      short loc_8054
.text:000000000000808D                 nop     dword ptr [rax]
.text:0000000000008090
.text:0000000000008090 loc_8090:                               ; CODE XREF: re_node_set_merge+52↑j
.text:0000000000008090                                         ; re_node_set_merge+57↑j
.text:0000000000008090                 test    rdx, rdx
.text:0000000000008093                 jns     loc_8128
.text:0000000000008099
.text:0000000000008099 loc_8099:                               ; CODE XREF: re_node_set_merge+145↓j
.text:0000000000008099                 mov     rcx, [rbx+8]
.text:000000000000809D                 mov     rax, [r12+8]
.text:00000000000080A2                 lea     r8, [rcx+rax*2-1]
.text:00000000000080A7                 mov     rdx, r8
.text:00000000000080AA                 sub     rdx, rbp
.text:00000000000080AD                 add     rdx, 1
.text:00000000000080B1                 jz      short loc_80EA
.text:00000000000080B3                 mov     rdi, [rbx+10h]  ; dest
.text:00000000000080B7                 lea     rax, [rcx-1]
.text:00000000000080BB                 add     rcx, rdx
.text:00000000000080BE                 mov     [rbx+8], rcx
.text:00000000000080C2                 nop     word ptr [rax+rax+00h]
.text:00000000000080C8
.text:00000000000080C8 loc_80C8:                               ; CODE XREF: re_node_set_merge+E8↓j
.text:00000000000080C8                                         ; re_node_set_merge+157↓j
.text:00000000000080C8                 mov     rsi, [rdi+r8*8]
.text:00000000000080CC                 mov     rcx, [rdi+rax*8]
.text:00000000000080D0                 lea     r9, [rax+rdx]
.text:00000000000080D4                 lea     r9, [rdi+r9*8]
.text:00000000000080D8                 cmp     rsi, rcx
.text:00000000000080DB                 jle     short loc_8150
.text:00000000000080DD                 sub     r8, 1
.text:00000000000080E1                 sub     rdx, 1
.text:00000000000080E5                 mov     [r9], rsi
.text:00000000000080E8                 jnz     short loc_80C8
.text:00000000000080EA
.text:00000000000080EA loc_80EA:                               ; CODE XREF: re_node_set_merge+B1↑j
.text:00000000000080EA                                         ; re_node_set_merge+1CF↓j
.text:00000000000080EA                 xor     eax, eax
.text:00000000000080EC
.text:00000000000080EC loc_80EC:                               ; CODE XREF: re_node_set_merge+16C↓j
.text:00000000000080EC                                         ; re_node_set_merge+1D9↓j
.text:00000000000080EC                 pop     rbx
.text:00000000000080ED                 pop     rbp
.text:00000000000080EE                 pop     r12
.text:00000000000080F0                 retn
.text:00000000000080F0 ; ---------------------------------------------------------------------------
.text:00000000000080F1                 align 8
.text:00000000000080F8
.text:00000000000080F8 loc_80F8:                               ; CODE XREF: re_node_set_merge+3↑j
.text:00000000000080F8                                         ; re_node_set_merge+10↑j
.text:00000000000080F8                 xor     eax, eax
.text:00000000000080FA                 retn
.text:00000000000080FA ; ---------------------------------------------------------------------------
.text:00000000000080FB                 align 20h
.text:0000000000008100
.text:0000000000008100 loc_8100:                               ; CODE XREF: re_node_set_merge+6A↑j
.text:0000000000008100                 sub     rdx, 1
.text:0000000000008104                 sub     rax, 1
.text:0000000000008108                 mov     rdi, rdx
.text:000000000000810B                 not     rdi
.text:000000000000810E                 jmp     loc_804F
.text:000000000000810E ; ---------------------------------------------------------------------------
.text:0000000000008113                 align 8
.text:0000000000008118
.text:0000000000008118 loc_8118:                               ; CODE XREF: re_node_set_merge+70↑j
.text:0000000000008118                 sub     rax, 1
.text:000000000000811C                 jmp     loc_804F
.text:000000000000811C ; ---------------------------------------------------------------------------
.text:0000000000008121                 align 8
.text:0000000000008128
.text:0000000000008128 loc_8128:                               ; CODE XREF: re_node_set_merge+93↑j
.text:0000000000008128                 mov     rax, [rbx+10h]
.text:000000000000812C                 add     rdx, 1
.text:0000000000008130                 mov     rsi, [r12+10h]  ; src
.text:0000000000008135                 sub     rbp, rdx
.text:0000000000008138                 shl     rdx, 3          ; n
.text:000000000000813C                 lea     rdi, [rax+rbp*8] ; dest
.text:0000000000008140                 call    _memcpy
.text:0000000000008145                 jmp     loc_8099
.text:0000000000008145 ; ---------------------------------------------------------------------------
.text:000000000000814A                 align 10h
.text:0000000000008150
.text:0000000000008150 loc_8150:                               ; CODE XREF: re_node_set_merge+DB↑j
.text:0000000000008150                 sub     rax, 1
.text:0000000000008154                 mov     [r9], rcx
.text:0000000000008157                 jns     loc_80C8
.text:000000000000815D                 lea     rsi, [rdi+rbp*8] ; src
.text:0000000000008161                 shl     rdx, 3          ; n
.text:0000000000008165                 call    _memcpy
.text:000000000000816A                 xor     eax, eax
.text:000000000000816C                 jmp     loc_80EC
.text:000000000000816C ; ---------------------------------------------------------------------------
.text:0000000000008171                 align 8
.text:0000000000008178
.text:0000000000008178 loc_8178:                               ; CODE XREF: re_node_set_merge+2E↑j
.text:0000000000008178                 add     rdx, rsi
.text:000000000000817B                 mov     rdi, [rdi+10h]  ; ptr
.text:000000000000817F                 lea     rbp, [rdx+rdx]
.text:0000000000008183                 shl     rdx, 4
.text:0000000000008187                 mov     rsi, rdx        ; size
.text:000000000000818A                 call    _realloc
.text:000000000000818F                 test    rax, rax
.text:0000000000008192                 jz      short loc_81D4
.text:0000000000008194                 mov     [rbx+10h], rax
.text:0000000000008198                 mov     [rbx], rbp
.text:000000000000819B                 mov     rax, [rbx+8]
.text:000000000000819F                 mov     rdx, [r12+8]
.text:00000000000081A4                 jmp     loc_8034
.text:00000000000081A4 ; ---------------------------------------------------------------------------
.text:00000000000081A9                 align 10h
.text:00000000000081B0
.text:00000000000081B0 loc_81B0:                               ; CODE XREF: re_node_set_merge+37↑j
.text:00000000000081B0                 mov     [rbx+8], rdx
.text:00000000000081B4                 mov     rax, [r12+8]
.text:00000000000081B9                 mov     rdi, [rbx+10h]  ; dest
.text:00000000000081BD                 mov     rsi, [r12+10h]  ; src
.text:00000000000081C2                 lea     rdx, ds:0[rax*8] ; n
.text:00000000000081CA                 call    _memcpy
.text:00000000000081CF                 jmp     loc_80EA
.text:00000000000081D4 ; ---------------------------------------------------------------------------
.text:00000000000081D4
.text:00000000000081D4 loc_81D4:                               ; CODE XREF: re_node_set_merge+192↑j
.text:00000000000081D4                 mov     eax, 0Ch
.text:00000000000081D9                 jmp     loc_80EC
.text:00000000000081D9 ; } // starts at 8000
.text:00000000000081D9 re_node_set_merge endp
.text:00000000000081D9
.text:00000000000081D9 ; ---------------------------------------------------------------------------
.text:00000000000081DE                 align 20h
.text:00000000000081E0
.text:00000000000081E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000081E0
.text:00000000000081E0
.text:00000000000081E0 calc_eclosure_iter proc near            ; CODE XREF: calc_eclosure_iter+28E↓p
.text:00000000000081E0                                         ; re_compile_internal+A2A↓p
.text:00000000000081E0
.text:00000000000081E0 var_90          = qword ptr -90h
.text:00000000000081E0 var_88          = qword ptr -88h
.text:00000000000081E0 var_7D          = byte ptr -7Dh
.text:00000000000081E0 var_7C          = dword ptr -7Ch
.text:00000000000081E0 var_78          = xmmword ptr -78h
.text:00000000000081E0 var_68          = qword ptr -68h
.text:00000000000081E0 var_58          = xmmword ptr -58h
.text:00000000000081E0 ptr             = qword ptr -48h
.text:00000000000081E0 var_40          = qword ptr -40h
.text:00000000000081E0
.text:00000000000081E0 ; __unwind {
.text:00000000000081E0                 push    r15
.text:00000000000081E2                 push    r14
.text:00000000000081E4                 mov     r15, rsi
.text:00000000000081E7                 push    r13
.text:00000000000081E9                 push    r12
.text:00000000000081EB                 push    rbp
.text:00000000000081EC                 push    rbx
.text:00000000000081ED                 lea     rbx, [rdx+rdx*2]
.text:00000000000081F1                 mov     rbp, rdx
.text:00000000000081F4                 sub     rsp, 68h
.text:00000000000081F8                 mov     r12, [rsi+28h]
.text:00000000000081FC                 shl     rbx, 3
.text:0000000000008200                 mov     rax, fs:28h
.text:0000000000008209                 mov     [rsp+98h+var_40], rax
.text:000000000000820E                 xor     eax, eax
.text:0000000000008210                 mov     [rsp+98h+var_88], rdi
.text:0000000000008215                 mov     [rsp+98h+var_7C], ecx
.text:0000000000008219                 add     r12, rbx
.text:000000000000821C                 mov     rax, [r12+8]
.text:0000000000008221                 mov     qword ptr [rsp+98h+var_78+8], 0
.text:000000000000822A                 lea     rdi, [rax+1]
.text:000000000000822E                 mov     qword ptr [rsp+98h+var_78], rdi
.text:0000000000008233                 shl     rdi, 3          ; size
.text:0000000000008237                 call    _malloc
.text:000000000000823C                 test    rax, rax
.text:000000000000823F                 mov     [rsp+98h+var_68], rax
.text:0000000000008244                 jz      loc_8480
.text:000000000000824A                 mov     rax, [r15+30h]
.text:000000000000824E                 mov     rdx, [r15]
.text:0000000000008251                 mov     r13, rbp
.text:0000000000008254                 shl     r13, 4
.text:0000000000008258                 mov     qword ptr [rax+rbx+8], 0FFFFFFFFFFFFFFFFh
.text:0000000000008261                 lea     rax, [rdx+r13]
.text:0000000000008265                 mov     r8d, [rax+8]
.text:0000000000008269                 test    r8d, 3FF00h
.text:0000000000008270                 jnz     loc_8410
.text:0000000000008276
.text:0000000000008276 loc_8276:                               ; CODE XREF: calc_eclosure_iter+24D↓j
.text:0000000000008276                                         ; calc_eclosure_iter+27D↓j
.text:0000000000008276                 test    byte ptr [rax+8], 8
.text:000000000000827A                 jz      loc_8340
.text:0000000000008280                 mov     rsi, [r15+28h]
.text:0000000000008284                 lea     rax, [rsi+rbx]
.text:0000000000008288                 cmp     qword ptr [rax+8], 0
.text:000000000000828D                 jle     loc_8340
.text:0000000000008293                 lea     rdx, [rsp+98h+var_78]
.text:0000000000008298                 mov     [rsp+98h+var_7D], 0
.text:000000000000829D                 xor     r14d, r14d
.text:00000000000082A0                 lea     r12, [rsp+98h+var_58]
.text:00000000000082A5                 mov     [rsp+98h+var_90], rdx
.text:00000000000082AA                 jmp     short loc_82C6
.text:00000000000082AA ; ---------------------------------------------------------------------------
.text:00000000000082AC                 align 10h
.text:00000000000082B0
.text:00000000000082B0 loc_82B0:                               ; CODE XREF: calc_eclosure_iter+145↓j
.text:00000000000082B0                                         ; calc_eclosure_iter+156↓j
.text:00000000000082B0                 mov     rsi, [r15+28h]
.text:00000000000082B4                 add     r14, 1
.text:00000000000082B8                 lea     rax, [rsi+rbx]
.text:00000000000082BC                 cmp     [rax+8], r14
.text:00000000000082C0                 jle     loc_83C7
.text:00000000000082C6
.text:00000000000082C6 loc_82C6:                               ; CODE XREF: calc_eclosure_iter+CA↑j
.text:00000000000082C6                                         ; calc_eclosure_iter+1E1↓j
.text:00000000000082C6                 mov     rax, [rax+10h]
.text:00000000000082CA                 mov     rdx, [rax+r14*8]
.text:00000000000082CE                 mov     rax, [r15+30h]
.text:00000000000082D2                 lea     r8, [rdx+rdx*2]
.text:00000000000082D6                 lea     r13, ds:0[r8*8]
.text:00000000000082DE                 add     rax, r13
.text:00000000000082E1                 mov     rcx, [rax+8]
.text:00000000000082E5                 cmp     rcx, 0FFFFFFFFFFFFFFFFh
.text:00000000000082E9                 jz      loc_83B0
.text:00000000000082EF                 test    rcx, rcx
.text:00000000000082F2                 jz      loc_8468
.text:00000000000082F8                 movdqu  xmm0, xmmword ptr [rax]
.text:00000000000082FC                 movaps  [rsp+98h+var_58], xmm0
.text:0000000000008301                 mov     rax, [rax+10h]
.text:0000000000008305                 mov     [rsp+98h+ptr], rax
.text:000000000000830A
.text:000000000000830A loc_830A:                               ; CODE XREF: calc_eclosure_iter+295↓j
.text:000000000000830A                 mov     rdi, [rsp+98h+var_90]
.text:000000000000830F                 mov     rsi, r12
.text:0000000000008312                 call    re_node_set_merge
.text:0000000000008317                 test    eax, eax
.text:0000000000008319                 jnz     short loc_8386
.text:000000000000831B                 mov     rax, [r15+30h]
.text:000000000000831F                 cmp     qword ptr [rax+r13+8], 0
.text:0000000000008325                 jnz     short loc_82B0
.text:0000000000008327                 mov     rdi, [rsp+98h+ptr] ; ptr
.text:000000000000832C                 call    _free
.text:0000000000008331                 mov     [rsp+98h+var_7D], 1
.text:0000000000008336                 jmp     loc_82B0
.text:0000000000008336 ; ---------------------------------------------------------------------------
.text:000000000000833B                 align 20h
.text:0000000000008340
.text:0000000000008340 loc_8340:                               ; CODE XREF: calc_eclosure_iter+9A↑j
.text:0000000000008340                                         ; calc_eclosure_iter+AD↑j ...
.text:0000000000008340                 lea     rdi, [rsp+98h+var_78]
.text:0000000000008345                 mov     rsi, rbp
.text:0000000000008348                 call    re_node_set_insert
.text:000000000000834D                 test    al, al
.text:000000000000834F                 jz      loc_8480
.text:0000000000008355                 mov     rax, [r15+30h]
.text:0000000000008359
.text:0000000000008359 loc_8359:                               ; CODE XREF: calc_eclosure_iter+209↓j
.text:0000000000008359                                         ; calc_eclosure_iter+214↓j
.text:0000000000008359                 movdqa  xmm0, [rsp+98h+var_78]
.text:000000000000835F                 movups  xmmword ptr [rax+rbx], xmm0
.text:0000000000008363                 mov     rdx, [rsp+98h+var_68]
.text:0000000000008368                 mov     [rax+rbx+10h], rdx
.text:000000000000836D
.text:000000000000836D loc_836D:                               ; CODE XREF: calc_eclosure_iter+222↓j
.text:000000000000836D                 mov     rbx, [rsp+98h+var_88]
.text:0000000000008372                 mov     rax, [rsp+98h+var_68]
.text:0000000000008377                 movdqa  xmm0, [rsp+98h+var_78]
.text:000000000000837D                 movaps  xmmword ptr [rbx], xmm0
.text:0000000000008380                 mov     [rbx+10h], rax
.text:0000000000008384                 xor     eax, eax
.text:0000000000008386
.text:0000000000008386 loc_8386:                               ; CODE XREF: calc_eclosure_iter+139↑j
.text:0000000000008386                                         ; calc_eclosure_iter+271↓j ...
.text:0000000000008386                 mov     rsi, [rsp+98h+var_40]
.text:000000000000838B                 xor     rsi, fs:28h
.text:0000000000008394                 jnz     loc_848A
.text:000000000000839A                 add     rsp, 68h
.text:000000000000839E                 pop     rbx
.text:000000000000839F                 pop     rbp
.text:00000000000083A0                 pop     r12
.text:00000000000083A2                 pop     r13
.text:00000000000083A4                 pop     r14
.text:00000000000083A6                 pop     r15
.text:00000000000083A8                 retn
.text:00000000000083A8 ; ---------------------------------------------------------------------------
.text:00000000000083A9                 align 10h
.text:00000000000083B0
.text:00000000000083B0 loc_83B0:                               ; CODE XREF: calc_eclosure_iter+109↑j
.text:00000000000083B0                 lea     rax, [rsi+rbx]
.text:00000000000083B4                 add     r14, 1
.text:00000000000083B8                 mov     [rsp+98h+var_7D], 1
.text:00000000000083BD                 cmp     [rax+8], r14
.text:00000000000083C1                 jg      loc_82C6
.text:00000000000083C7
.text:00000000000083C7 loc_83C7:                               ; CODE XREF: calc_eclosure_iter+E0↑j
.text:00000000000083C7                 lea     rdi, [rsp+98h+var_78]
.text:00000000000083CC                 mov     rsi, rbp
.text:00000000000083CF                 call    re_node_set_insert
.text:00000000000083D4                 test    al, al
.text:00000000000083D6                 jz      loc_8480
.text:00000000000083DC                 cmp     byte ptr [rsp+98h+var_7C], 1
.text:00000000000083E1                 mov     rax, [r15+30h]
.text:00000000000083E5                 lea     rdx, [rax+rbx]
.text:00000000000083E9                 jz      loc_8359
.text:00000000000083EF                 cmp     [rsp+98h+var_7D], 0
.text:00000000000083F4                 jz      loc_8359
.text:00000000000083FA                 mov     qword ptr [rdx+8], 0
.text:0000000000008402                 jmp     loc_836D
.text:0000000000008402 ; ---------------------------------------------------------------------------
.text:0000000000008407                 align 10h
.text:0000000000008410
.text:0000000000008410 loc_8410:                               ; CODE XREF: calc_eclosure_iter+90↑j
.text:0000000000008410                 cmp     qword ptr [r12+8], 0
.text:0000000000008416                 jz      loc_8340
.text:000000000000841C                 mov     rcx, [r12+10h]
.text:0000000000008421                 mov     rcx, [rcx]
.text:0000000000008424                 shl     rcx, 4
.text:0000000000008428                 test    byte ptr [rdx+rcx+0Ah], 4
.text:000000000000842D                 jnz     loc_8276
.text:0000000000008433                 shr     r8d, 8
.text:0000000000008437                 mov     rcx, rbp
.text:000000000000843A                 mov     rdx, rbp
.text:000000000000843D                 and     r8d, 3FFh
.text:0000000000008444                 mov     rsi, rbp
.text:0000000000008447                 mov     rdi, r15
.text:000000000000844A                 call    duplicate_node_closure
.text:000000000000844F                 test    eax, eax
.text:0000000000008451                 jnz     loc_8386
.text:0000000000008457                 mov     rax, [r15]
.text:000000000000845A                 add     rax, r13
.text:000000000000845D                 jmp     loc_8276
.text:000000000000845D ; ---------------------------------------------------------------------------
.text:0000000000008462                 align 8
.text:0000000000008468
.text:0000000000008468 loc_8468:                               ; CODE XREF: calc_eclosure_iter+112↑j
.text:0000000000008468                 mov     rsi, r15
.text:000000000000846B                 mov     rdi, r12
.text:000000000000846E                 call    calc_eclosure_iter
.text:0000000000008473                 test    eax, eax
.text:0000000000008475                 jz      loc_830A
.text:000000000000847B                 jmp     loc_8386
.text:0000000000008480 ; ---------------------------------------------------------------------------
.text:0000000000008480
.text:0000000000008480 loc_8480:                               ; CODE XREF: calc_eclosure_iter+64↑j
.text:0000000000008480                                         ; calc_eclosure_iter+16F↑j ...
.text:0000000000008480                 mov     eax, 0Ch
.text:0000000000008485                 jmp     loc_8386
.text:000000000000848A ; ---------------------------------------------------------------------------
.text:000000000000848A
.text:000000000000848A loc_848A:                               ; CODE XREF: calc_eclosure_iter+1B4↑j
.text:000000000000848A                 call    ___stack_chk_fail
.text:000000000000848A ; } // starts at 81E0
.text:000000000000848A calc_eclosure_iter endp
.text:000000000000848A
.text:000000000000848A ; ---------------------------------------------------------------------------
.text:000000000000848F                 align 10h
.text:0000000000008490
.text:0000000000008490 ; =============== S U B R O U T I N E =======================================
.text:0000000000008490
.text:0000000000008490
.text:0000000000008490 check_arrival_expand_ecl proc near      ; CODE XREF: expand_bkref_cache+2A8↓p
.text:0000000000008490                                         ; check_arrival+374↓p ...
.text:0000000000008490
.text:0000000000008490 var_5C          = dword ptr -5Ch
.text:0000000000008490 var_58          = xmmword ptr -58h
.text:0000000000008490 ptr             = qword ptr -48h
.text:0000000000008490 var_40          = qword ptr -40h
.text:0000000000008490
.text:0000000000008490 ; __unwind {
.text:0000000000008490                 push    r15
.text:0000000000008492                 push    r14
.text:0000000000008494                 mov     r14, rdi
.text:0000000000008497                 push    r13
.text:0000000000008499                 push    r12
.text:000000000000849B                 mov     r15, rsi
.text:000000000000849E                 push    rbp
.text:000000000000849F                 push    rbx
.text:00000000000084A0                 mov     rbp, rdx
.text:00000000000084A3                 mov     ebx, ecx
.text:00000000000084A5                 sub     rsp, 38h
.text:00000000000084A9                 mov     r12, [rsi+8]
.text:00000000000084AD                 mov     rax, fs:28h
.text:00000000000084B6                 mov     [rsp+68h+var_40], rax
.text:00000000000084BB                 xor     eax, eax
.text:00000000000084BD                 mov     qword ptr [rsp+68h+var_58+8], 0
.text:00000000000084C6                 lea     rdi, ds:0[r12*8] ; size
.text:00000000000084CE                 mov     qword ptr [rsp+68h+var_58], r12
.text:00000000000084D3                 call    _malloc
.text:00000000000084D8                 test    rax, rax
.text:00000000000084DB                 mov     [rsp+68h+ptr], rax
.text:00000000000084E0                 jz      loc_85DD
.text:00000000000084E6                 test    r12, r12
.text:00000000000084E9                 jle     loc_857B
.text:00000000000084EF                 lea     r12, [rsp+68h+var_58]
.text:00000000000084F4                 xor     r13d, r13d
.text:00000000000084F7                 nop     word ptr [rax+rax+00000000h]
.text:0000000000008500
.text:0000000000008500 loc_8500:                               ; CODE XREF: check_arrival_expand_ecl+E9↓j
.text:0000000000008500                 mov     rax, [r15+10h]
.text:0000000000008504                 mov     rdx, [rax+r13*8]
.text:0000000000008508                 mov     rax, [r14+30h]
.text:000000000000850C                 lea     rcx, [rdx+rdx*2]
.text:0000000000008510                 lea     rsi, [rax+rcx*8]
.text:0000000000008514                 mov     r8, [rsi+8]
.text:0000000000008518                 test    r8, r8
.text:000000000000851B                 jle     loc_85A0
.text:0000000000008521                 mov     r10, [rsi+10h]
.text:0000000000008525                 mov     r9, [r14]
.text:0000000000008528                 xor     ecx, ecx
.text:000000000000852A                 jmp     short loc_8539
.text:000000000000852A ; ---------------------------------------------------------------------------
.text:000000000000852C                 align 10h
.text:0000000000008530
.text:0000000000008530 loc_8530:                               ; CODE XREF: check_arrival_expand_ecl+BF↓j
.text:0000000000008530                                         ; check_arrival_expand_ecl+C4↓j
.text:0000000000008530                 add     rcx, 1
.text:0000000000008534                 cmp     r8, rcx
.text:0000000000008537                 jz      short loc_85A0
.text:0000000000008539
.text:0000000000008539 loc_8539:                               ; CODE XREF: check_arrival_expand_ecl+9A↑j
.text:0000000000008539                 mov     rdi, [r10+rcx*8]
.text:000000000000853D                 mov     rax, rdi
.text:0000000000008540                 shl     rax, 4
.text:0000000000008544                 add     rax, r9
.text:0000000000008547                 movzx   r11d, byte ptr [rax+8]
.text:000000000000854C                 cmp     ebx, r11d
.text:000000000000854F                 jnz     short loc_8530
.text:0000000000008551                 cmp     rbp, [rax]
.text:0000000000008554                 jnz     short loc_8530
.text:0000000000008556                 cmp     rdi, 0FFFFFFFFFFFFFFFFh
.text:000000000000855A                 jz      short loc_85A0
.text:000000000000855C                 mov     r8d, ebx
.text:000000000000855F                 mov     rcx, rbp
.text:0000000000008562                 mov     rsi, r12
.text:0000000000008565                 mov     rdi, r14
.text:0000000000008568                 call    check_arrival_expand_ecl_sub
.text:000000000000856D                 test    eax, eax
.text:000000000000856F                 jnz     short loc_85AC
.text:0000000000008571
.text:0000000000008571 loc_8571:                               ; CODE XREF: check_arrival_expand_ecl+11A↓j
.text:0000000000008571                 add     r13, 1
.text:0000000000008575                 cmp     [r15+8], r13
.text:0000000000008579                 jg      short loc_8500
.text:000000000000857B
.text:000000000000857B loc_857B:                               ; CODE XREF: check_arrival_expand_ecl+59↑j
.text:000000000000857B                 mov     rdi, [r15+10h]  ; ptr
.text:000000000000857F                 call    _free
.text:0000000000008584                 mov     rax, [rsp+68h+ptr]
.text:0000000000008589                 movdqa  xmm0, [rsp+68h+var_58]
.text:000000000000858F                 mov     [r15+10h], rax
.text:0000000000008593                 xor     eax, eax
.text:0000000000008595                 movaps  xmmword ptr [r15], xmm0
.text:0000000000008599                 jmp     short loc_85BE
.text:0000000000008599 ; ---------------------------------------------------------------------------
.text:000000000000859B                 align 20h
.text:00000000000085A0
.text:00000000000085A0 loc_85A0:                               ; CODE XREF: check_arrival_expand_ecl+8B↑j
.text:00000000000085A0                                         ; check_arrival_expand_ecl+A7↑j ...
.text:00000000000085A0                 mov     rdi, r12
.text:00000000000085A3                 call    re_node_set_merge
.text:00000000000085A8                 test    eax, eax
.text:00000000000085AA                 jz      short loc_8571
.text:00000000000085AC
.text:00000000000085AC loc_85AC:                               ; CODE XREF: check_arrival_expand_ecl+DF↑j
.text:00000000000085AC                 mov     rdi, [rsp+68h+ptr] ; ptr
.text:00000000000085B1                 mov     [rsp+68h+var_5C], eax
.text:00000000000085B5                 call    _free
.text:00000000000085BA                 mov     eax, [rsp+68h+var_5C]
.text:00000000000085BE
.text:00000000000085BE loc_85BE:                               ; CODE XREF: check_arrival_expand_ecl+109↑j
.text:00000000000085BE                                         ; check_arrival_expand_ecl+152↓j
.text:00000000000085BE                 mov     rdx, [rsp+68h+var_40]
.text:00000000000085C3                 xor     rdx, fs:28h
.text:00000000000085CC                 jnz     short loc_85E4
.text:00000000000085CE                 add     rsp, 38h
.text:00000000000085D2                 pop     rbx
.text:00000000000085D3                 pop     rbp
.text:00000000000085D4                 pop     r12
.text:00000000000085D6                 pop     r13
.text:00000000000085D8                 pop     r14
.text:00000000000085DA                 pop     r15
.text:00000000000085DC                 retn
.text:00000000000085DD ; ---------------------------------------------------------------------------
.text:00000000000085DD
.text:00000000000085DD loc_85DD:                               ; CODE XREF: check_arrival_expand_ecl+50↑j
.text:00000000000085DD                 mov     eax, 0Ch
.text:00000000000085E2                 jmp     short loc_85BE
.text:00000000000085E4 ; ---------------------------------------------------------------------------
.text:00000000000085E4
.text:00000000000085E4 loc_85E4:                               ; CODE XREF: check_arrival_expand_ecl+13C↑j
.text:00000000000085E4                 call    ___stack_chk_fail
.text:00000000000085E4 ; } // starts at 8490
.text:00000000000085E4 check_arrival_expand_ecl endp
.text:00000000000085E4
.text:00000000000085E4 ; ---------------------------------------------------------------------------
.text:00000000000085E9                 align 10h
.text:00000000000085F0
.text:00000000000085F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000085F0
.text:00000000000085F0
.text:00000000000085F0 re_node_set_add_intersect proc near     ; CODE XREF: _sub_epsilon_src_nodes+9C↓p
.text:00000000000085F0                                         ; update_cur_sifted_state+107↓p
.text:00000000000085F0 ; __unwind {
.text:00000000000085F0                 mov     r9, [rsi+8]
.text:00000000000085F4                 xor     eax, eax
.text:00000000000085F6                 test    r9, r9
.text:00000000000085F9                 jz      locret_86B8
.text:00000000000085FF                 mov     r11, [rdx+8]
.text:0000000000008603                 test    r11, r11
.text:0000000000008606                 jz      locret_86B8
.text:000000000000860C                 push    r13
.text:000000000000860E                 push    r12
.text:0000000000008610                 lea     rax, [r9+r11]
.text:0000000000008614                 push    rbp
.text:0000000000008615                 push    rbx
.text:0000000000008616                 mov     r12, rdx
.text:0000000000008619                 mov     rbx, rdi
.text:000000000000861C                 mov     rbp, rsi
.text:000000000000861F                 sub     rsp, 8
.text:0000000000008623                 mov     rcx, [rdi+8]
.text:0000000000008627                 mov     r13, [rdi]
.text:000000000000862A                 mov     rdi, [rdi+10h]  ; ptr
.text:000000000000862E                 lea     rdx, [rax+rcx]
.text:0000000000008632                 cmp     rdx, r13
.text:0000000000008635                 jg      loc_8760
.text:000000000000863B
.text:000000000000863B loc_863B:                               ; CODE XREF: re_node_set_add_intersect+19C↓j
.text:000000000000863B                 lea     rsi, [rcx+r9]
.text:000000000000863F                 mov     r13, [rbp+10h]
.text:0000000000008643                 mov     rdx, [r12+10h]
.text:0000000000008648                 sub     r9, 1
.text:000000000000864C                 sub     rcx, 1
.text:0000000000008650                 add     rsi, r11
.text:0000000000008653                 sub     r11, 1
.text:0000000000008657                 mov     rax, [r13+r9*8+0]
.text:000000000000865C                 mov     r8, [rdx+r11*8]
.text:0000000000008660
.text:0000000000008660 loc_8660:                               ; CODE XREF: re_node_set_add_intersect+DB↓j
.text:0000000000008660                 cmp     rax, r8
.text:0000000000008663                 jz      short loc_8676
.text:0000000000008665
.text:0000000000008665 loc_8665:                               ; CODE XREF: re_node_set_add_intersect+84↓j
.text:0000000000008665                 jge     short loc_86C0
.text:0000000000008667                 sub     r11, 1
.text:000000000000866B                 js      short loc_86D0
.text:000000000000866D
.text:000000000000866D loc_866D:                               ; CODE XREF: re_node_set_add_intersect+C1↓j
.text:000000000000866D                 mov     r8, [rdx+r11*8]
.text:0000000000008671                 cmp     rax, r8
.text:0000000000008674                 jnz     short loc_8665
.text:0000000000008676
.text:0000000000008676 loc_8676:                               ; CODE XREF: re_node_set_add_intersect+73↑j
.text:0000000000008676                 test    rcx, rcx
.text:0000000000008679                 jns     short loc_868A
.text:000000000000867B                 jmp     short loc_8698
.text:000000000000867B ; ---------------------------------------------------------------------------
.text:000000000000867D                 align 20h
.text:0000000000008680
.text:0000000000008680 loc_8680:                               ; CODE XREF: re_node_set_add_intersect+A1↓j
.text:0000000000008680                 sub     rcx, 1
.text:0000000000008684                 cmp     rcx, 0FFFFFFFFFFFFFFFFh
.text:0000000000008688                 jz      short loc_8698
.text:000000000000868A
.text:000000000000868A loc_868A:                               ; CODE XREF: re_node_set_add_intersect+89↑j
.text:000000000000868A                 mov     r10, [rdi+rcx*8]
.text:000000000000868E                 cmp     r10, r8
.text:0000000000008691                 jg      short loc_8680
.text:0000000000008693                 cmp     r10, r8
.text:0000000000008696                 jz      short loc_86A0
.text:0000000000008698
.text:0000000000008698 loc_8698:                               ; CODE XREF: re_node_set_add_intersect+8B↑j
.text:0000000000008698                                         ; re_node_set_add_intersect+98↑j
.text:0000000000008698                 sub     rsi, 1
.text:000000000000869C                 mov     [rdi+rsi*8], r8
.text:00000000000086A0
.text:00000000000086A0 loc_86A0:                               ; CODE XREF: re_node_set_add_intersect+A6↑j
.text:00000000000086A0                 sub     r9, 1
.text:00000000000086A4                 js      short loc_86D0
.text:00000000000086A6                 sub     r11, 1
.text:00000000000086AA                 js      short loc_86D0
.text:00000000000086AC                 mov     rax, [r13+r9*8+0]
.text:00000000000086B1                 jmp     short loc_866D
.text:00000000000086B1 ; ---------------------------------------------------------------------------
.text:00000000000086B3                 align 8
.text:00000000000086B8
.text:00000000000086B8 locret_86B8:                            ; CODE XREF: re_node_set_add_intersect+9↑j
.text:00000000000086B8                                         ; re_node_set_add_intersect+16↑j
.text:00000000000086B8                 rep retn
.text:00000000000086B8 ; ---------------------------------------------------------------------------
.text:00000000000086BA                 align 20h
.text:00000000000086C0
.text:00000000000086C0 loc_86C0:                               ; CODE XREF: re_node_set_add_intersect:loc_8665↑j
.text:00000000000086C0                 sub     r9, 1
.text:00000000000086C4                 js      short loc_86D0
.text:00000000000086C6                 mov     rax, [r13+r9*8+0]
.text:00000000000086CB                 jmp     short loc_8660
.text:00000000000086CB ; ---------------------------------------------------------------------------
.text:00000000000086CD                 align 10h
.text:00000000000086D0
.text:00000000000086D0 loc_86D0:                               ; CODE XREF: re_node_set_add_intersect+7B↑j
.text:00000000000086D0                                         ; re_node_set_add_intersect+B4↑j ...
.text:00000000000086D0                 mov     rcx, [rbx+8]
.text:00000000000086D4                 mov     rdx, [rbp+8]
.text:00000000000086D8                 add     rdx, rcx
.text:00000000000086DB                 add     rdx, [r12+8]
.text:00000000000086E0                 lea     rax, [rcx-1]
.text:00000000000086E4                 lea     r9, [rdx-1]
.text:00000000000086E8                 sub     rdx, rsi
.text:00000000000086EB                 add     rcx, rdx
.text:00000000000086EE                 test    rdx, rdx
.text:00000000000086F1                 mov     [rbx+8], rcx
.text:00000000000086F5                 jle     short loc_873D
.text:00000000000086F7                 test    rax, rax
.text:00000000000086FA                 js      short loc_873D
.text:00000000000086FC                 nop     dword ptr [rax+00h]
.text:0000000000008700
.text:0000000000008700 loc_8700:                               ; CODE XREF: re_node_set_add_intersect+130↓j
.text:0000000000008700                                         ; re_node_set_add_intersect+14B↓j
.text:0000000000008700                 mov     r8, [rdi+r9*8]
.text:0000000000008704                 mov     rcx, [rdi+rax*8]
.text:0000000000008708                 lea     r10, [rax+rdx]
.text:000000000000870C                 lea     r10, [rdi+r10*8]
.text:0000000000008710                 cmp     r8, rcx
.text:0000000000008713                 jle     short loc_8730
.text:0000000000008715                 sub     r9, 1
.text:0000000000008719                 sub     rdx, 1
.text:000000000000871D                 mov     [r10], r8
.text:0000000000008720                 jnz     short loc_8700
.text:0000000000008722                 xor     edx, edx
.text:0000000000008724                 jmp     short loc_8741
.text:0000000000008724 ; ---------------------------------------------------------------------------
.text:0000000000008726                 align 10h
.text:0000000000008730
.text:0000000000008730 loc_8730:                               ; CODE XREF: re_node_set_add_intersect+123↑j
.text:0000000000008730                 sub     rax, 1
.text:0000000000008734                 mov     [r10], rcx
.text:0000000000008737                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000873B                 jnz     short loc_8700
.text:000000000000873D
.text:000000000000873D loc_873D:                               ; CODE XREF: re_node_set_add_intersect+105↑j
.text:000000000000873D                                         ; re_node_set_add_intersect+10A↑j
.text:000000000000873D                 shl     rdx, 3          ; n
.text:0000000000008741
.text:0000000000008741 loc_8741:                               ; CODE XREF: re_node_set_add_intersect+134↑j
.text:0000000000008741                 lea     rsi, [rdi+rsi*8] ; src
.text:0000000000008745                 call    _memcpy
.text:000000000000874A                 xor     eax, eax
.text:000000000000874C
.text:000000000000874C loc_874C:                               ; CODE XREF: re_node_set_add_intersect+1A6↓j
.text:000000000000874C                 add     rsp, 8
.text:0000000000008750                 pop     rbx
.text:0000000000008751                 pop     rbp
.text:0000000000008752                 pop     r12
.text:0000000000008754                 pop     r13
.text:0000000000008756                 retn
.text:0000000000008756 ; ---------------------------------------------------------------------------
.text:0000000000008757                 align 20h
.text:0000000000008760
.text:0000000000008760 loc_8760:                               ; CODE XREF: re_node_set_add_intersect+45↑j
.text:0000000000008760                 add     r13, rax
.text:0000000000008763                 lea     rsi, ds:0[r13*8] ; size
.text:000000000000876B                 call    _realloc
.text:0000000000008770                 test    rax, rax
.text:0000000000008773                 mov     rdi, rax
.text:0000000000008776                 jz      short loc_8791
.text:0000000000008778                 mov     [rbx+10h], rax
.text:000000000000877C                 mov     [rbx], r13
.text:000000000000877F                 mov     rcx, [rbx+8]
.text:0000000000008783                 mov     r9, [rbp+8]
.text:0000000000008787                 mov     r11, [r12+8]
.text:000000000000878C                 jmp     loc_863B
.text:0000000000008791 ; ---------------------------------------------------------------------------
.text:0000000000008791
.text:0000000000008791 loc_8791:                               ; CODE XREF: re_node_set_add_intersect+186↑j
.text:0000000000008791                 mov     eax, 0Ch
.text:0000000000008796                 jmp     short loc_874C
.text:0000000000008796 ; } // starts at 85F0
.text:0000000000008796 re_node_set_add_intersect endp
.text:0000000000008796
.text:0000000000008796 ; ---------------------------------------------------------------------------
.text:0000000000008798                 align 20h
.text:00000000000087A0
.text:00000000000087A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000087A0
.text:00000000000087A0
.text:00000000000087A0 create_token_tree_isra_16 proc near     ; CODE XREF: duplicate_tree+3E↓p
.text:00000000000087A0                                         ; lower_subexp+82↓p ...
.text:00000000000087A0
.text:00000000000087A0 var_28          = qword ptr -28h
.text:00000000000087A0 var_20          = qword ptr -20h
.text:00000000000087A0 var_18          = qword ptr -18h
.text:00000000000087A0 var_10          = qword ptr -10h
.text:00000000000087A0
.text:00000000000087A0 ; __unwind {
.text:00000000000087A0                 push    rbx
.text:00000000000087A1                 mov     rbx, rdi
.text:00000000000087A4                 sub     rsp, 20h
.text:00000000000087A8                 mov     eax, [rsi]
.text:00000000000087AA                 cmp     eax, 0Fh
.text:00000000000087AD                 jz      short loc_8828
.text:00000000000087AF                 movsxd  r9, eax
.text:00000000000087B2                 lea     r10d, [rax+1]
.text:00000000000087B6                 mov     rdi, [rdi]
.text:00000000000087B9                 mov     rax, r9
.text:00000000000087BC                 shl     rax, 6
.text:00000000000087C0                 add     rax, 8
.text:00000000000087C4
.text:00000000000087C4 loc_87C4:                               ; CODE XREF: create_token_tree_isra_16+D7↓j
.text:00000000000087C4                 shl     r9, 6
.text:00000000000087C8                 mov     [rsi], r10d
.text:00000000000087CB                 add     rax, rdi
.text:00000000000087CE                 lea     rsi, [rdi+r9]
.text:00000000000087D2                 mov     qword ptr [rsi+8], 0
.text:00000000000087DA                 mov     [rsi+10h], rdx
.text:00000000000087DE                 lea     rdi, [rsi+20h]
.text:00000000000087E2                 mov     [rsi+18h], rcx
.text:00000000000087E6                 movdqu  xmm0, xmmword ptr [r8]
.text:00000000000087EB                 movups  xmmword ptr [rsi+30h], xmm0
.text:00000000000087EF                 and     byte ptr [rdi+1Ah], 0F3h
.text:00000000000087F3                 test    rdx, rdx
.text:00000000000087F6                 mov     qword ptr [rsi+20h], 0
.text:00000000000087FE                 mov     qword ptr [rsi+28h], 0
.text:0000000000008806                 mov     qword ptr [rsi+40h], 0FFFFFFFFFFFFFFFFh
.text:000000000000880E                 jz      short loc_8813
.text:0000000000008810                 mov     [rdx], rax
.text:0000000000008813
.text:0000000000008813 loc_8813:                               ; CODE XREF: create_token_tree_isra_16+6E↑j
.text:0000000000008813                 test    rcx, rcx
.text:0000000000008816                 jz      short loc_881B
.text:0000000000008818                 mov     [rcx], rax
.text:000000000000881B
.text:000000000000881B loc_881B:                               ; CODE XREF: create_token_tree_isra_16+76↑j
.text:000000000000881B                                         ; create_token_tree_isra_16+DE↓j
.text:000000000000881B                 add     rsp, 20h
.text:000000000000881F                 pop     rbx
.text:0000000000008820                 retn
.text:0000000000008820 ; ---------------------------------------------------------------------------
.text:0000000000008821                 align 8
.text:0000000000008828
.text:0000000000008828 loc_8828:                               ; CODE XREF: create_token_tree_isra_16+D↑j
.text:0000000000008828                 mov     edi, 3C8h       ; size
.text:000000000000882D                 mov     [rsp+28h+var_10], r8
.text:0000000000008832                 mov     [rsp+28h+var_18], rcx
.text:0000000000008837                 mov     [rsp+28h+var_20], rdx
.text:000000000000883C                 mov     [rsp+28h+var_28], rsi
.text:0000000000008840                 call    _malloc
.text:0000000000008845                 test    rax, rax
.text:0000000000008848                 mov     rdi, rax
.text:000000000000884B                 jz      short loc_887C
.text:000000000000884D                 mov     rax, [rbx]
.text:0000000000008850                 mov     r10d, 1
.text:0000000000008856                 mov     [rbx], rdi
.text:0000000000008859                 xor     r9d, r9d
.text:000000000000885C                 mov     r8, [rsp+28h+var_10]
.text:0000000000008861                 mov     rcx, [rsp+28h+var_18]
.text:0000000000008866                 mov     rdx, [rsp+28h+var_20]
.text:000000000000886B                 mov     rsi, [rsp+28h+var_28]
.text:000000000000886F                 mov     [rdi], rax
.text:0000000000008872                 mov     eax, 8
.text:0000000000008877                 jmp     loc_87C4
.text:000000000000887C ; ---------------------------------------------------------------------------
.text:000000000000887C
.text:000000000000887C loc_887C:                               ; CODE XREF: create_token_tree_isra_16+AB↑j
.text:000000000000887C                 xor     eax, eax
.text:000000000000887E                 jmp     short loc_881B
.text:000000000000887E ; } // starts at 87A0
.text:000000000000887E create_token_tree_isra_16 endp
.text:000000000000887E
.text:0000000000008880
.text:0000000000008880 ; =============== S U B R O U T I N E =======================================
.text:0000000000008880
.text:0000000000008880
.text:0000000000008880 duplicate_tree  proc near               ; CODE XREF: parse_expression+2AC↓p
.text:0000000000008880                                         ; parse_expression+408↓p ...
.text:0000000000008880
.text:0000000000008880 var_38          = qword ptr -38h
.text:0000000000008880 var_30          = qword ptr -30h
.text:0000000000008880
.text:0000000000008880 ; __unwind {
.text:0000000000008880                 push    r14
.text:0000000000008882                 push    r13
.text:0000000000008884                 lea     r13, [rsi+70h]
.text:0000000000008888                 push    r12
.text:000000000000888A                 push    rbp
.text:000000000000888B                 lea     r12, [rsi+80h]
.text:0000000000008892                 push    rbx
.text:0000000000008893                 mov     rbx, rdi
.text:0000000000008896                 sub     rsp, 10h
.text:000000000000889A                 mov     rbp, [rdi]
.text:000000000000889D                 mov     rax, fs:28h
.text:00000000000088A6                 mov     [rsp+38h+var_30], rax
.text:00000000000088AB                 xor     eax, eax
.text:00000000000088AD                 mov     r14, rsp
.text:00000000000088B0
.text:00000000000088B0 loc_88B0:                               ; CODE XREF: duplicate_tree+65↓j
.text:00000000000088B0                                         ; duplicate_tree+C7↓j
.text:00000000000088B0                 lea     r8, [rbx+28h]
.text:00000000000088B4                 xor     ecx, ecx
.text:00000000000088B6                 xor     edx, edx
.text:00000000000088B8                 mov     rsi, r12
.text:00000000000088BB                 mov     rdi, r13
.text:00000000000088BE                 call    create_token_tree_isra_16
.text:00000000000088C3                 test    rax, rax
.text:00000000000088C6                 mov     [r14], rax
.text:00000000000088C9                 jz      short loc_891C
.text:00000000000088CB                 mov     [rax], rbp
.text:00000000000088CE                 mov     rbp, [r14]
.text:00000000000088D1                 or      byte ptr [rbp+32h], 4
.text:00000000000088D5                 mov     rax, [rbx+8]
.text:00000000000088D9                 test    rax, rax
.text:00000000000088DC                 jz      short loc_88F0
.text:00000000000088DE                 lea     r14, [rbp+8]
.text:00000000000088E2                 mov     rbx, rax
.text:00000000000088E5                 jmp     short loc_88B0
.text:00000000000088E5 ; ---------------------------------------------------------------------------
.text:00000000000088E7                 align 10h
.text:00000000000088F0
.text:00000000000088F0 loc_88F0:                               ; CODE XREF: duplicate_tree+5C↑j
.text:00000000000088F0                 xor     edx, edx
.text:00000000000088F2                 jmp     short loc_88FB
.text:00000000000088F2 ; ---------------------------------------------------------------------------
.text:00000000000088F4                 align 8
.text:00000000000088F8
.text:00000000000088F8 loc_88F8:                               ; CODE XREF: duplicate_tree+96↓j
.text:00000000000088F8                 mov     rbx, rax
.text:00000000000088FB
.text:00000000000088FB loc_88FB:                               ; CODE XREF: duplicate_tree+72↑j
.text:00000000000088FB                 mov     rax, [rbx+10h]
.text:00000000000088FF                 test    rax, rax
.text:0000000000008902                 jz      short loc_8909
.text:0000000000008904                 cmp     rax, rdx
.text:0000000000008907                 jnz     short loc_8940
.text:0000000000008909
.text:0000000000008909 loc_8909:                               ; CODE XREF: duplicate_tree+82↑j
.text:0000000000008909                 mov     rax, [rbx]
.text:000000000000890C                 mov     rbp, [rbp+0]
.text:0000000000008910                 mov     rdx, rbx
.text:0000000000008913                 test    rax, rax
.text:0000000000008916                 jnz     short loc_88F8
.text:0000000000008918                 mov     rax, [rsp+38h+var_38]
.text:000000000000891C
.text:000000000000891C loc_891C:                               ; CODE XREF: duplicate_tree+49↑j
.text:000000000000891C                 mov     rcx, [rsp+38h+var_30]
.text:0000000000008921                 xor     rcx, fs:28h
.text:000000000000892A                 jnz     short loc_894C
.text:000000000000892C                 add     rsp, 10h
.text:0000000000008930                 pop     rbx
.text:0000000000008931                 pop     rbp
.text:0000000000008932                 pop     r12
.text:0000000000008934                 pop     r13
.text:0000000000008936                 pop     r14
.text:0000000000008938                 retn
.text:0000000000008938 ; ---------------------------------------------------------------------------
.text:0000000000008939                 align 20h
.text:0000000000008940
.text:0000000000008940 loc_8940:                               ; CODE XREF: duplicate_tree+87↑j
.text:0000000000008940                 lea     r14, [rbp+10h]
.text:0000000000008944                 mov     rbx, rax
.text:0000000000008947                 jmp     loc_88B0
.text:000000000000894C ; ---------------------------------------------------------------------------
.text:000000000000894C
.text:000000000000894C loc_894C:                               ; CODE XREF: duplicate_tree+AA↑j
.text:000000000000894C                 call    ___stack_chk_fail
.text:000000000000894C ; } // starts at 8880
.text:000000000000894C duplicate_tree  endp
.text:000000000000894C
.text:000000000000894C ; ---------------------------------------------------------------------------
.text:0000000000008951                 align 20h
.text:0000000000008960
.text:0000000000008960 ; =============== S U B R O U T I N E =======================================
.text:0000000000008960
.text:0000000000008960
.text:0000000000008960 lower_subexp    proc near               ; CODE XREF: lower_subexps+68↓p
.text:0000000000008960                                         ; lower_subexps+88↓p
.text:0000000000008960
.text:0000000000008960 var_70          = qword ptr -70h
.text:0000000000008960 var_68          = qword ptr -68h
.text:0000000000008960 var_60          = qword ptr -60h
.text:0000000000008960 var_58          = byte ptr -58h
.text:0000000000008960 var_50          = byte ptr -50h
.text:0000000000008960 var_40          = qword ptr -40h
.text:0000000000008960
.text:0000000000008960 ; __unwind {
.text:0000000000008960                 push    r15
.text:0000000000008962                 push    r14
.text:0000000000008964                 push    r13
.text:0000000000008966                 push    r12
.text:0000000000008968                 mov     r13, rdx
.text:000000000000896B                 push    rbp
.text:000000000000896C                 push    rbx
.text:000000000000896D                 sub     rsp, 48h
.text:0000000000008971                 mov     rbx, [rsi]
.text:0000000000008974                 mov     rbp, [rdx+8]
.text:0000000000008978                 mov     rax, fs:28h
.text:0000000000008981                 mov     [rsp+78h+var_40], rax
.text:0000000000008986                 xor     eax, eax
.text:0000000000008988                 test    byte ptr [rsi+38h], 10h
.text:000000000000898C                 mov     [rsp+78h+var_60], rdi
.text:0000000000008991                 jz      loc_8B08
.text:0000000000008997                 test    rbp, rbp
.text:000000000000899A                 jz      short loc_8A10
.text:000000000000899C                 mov     rax, [rdx+28h]
.text:00000000000089A0                 cmp     rax, 3Fh ; '?'
.text:00000000000089A4                 jg      loc_8ADD
.text:00000000000089AA                 mov     rdx, [rbx+0A0h]
.text:00000000000089B1                 bt      rdx, rax
.text:00000000000089B5                 jnb     loc_8ADD
.text:00000000000089BB                 lea     rax, [rbx+70h]
.text:00000000000089BF                 lea     r14, [rsp+78h+var_58]
.text:00000000000089C4                 sub     rbx, 0FFFFFFFFFFFFFF80h
.text:00000000000089C8                 xor     ecx, ecx
.text:00000000000089CA                 xor     edx, edx
.text:00000000000089CC                 mov     rsi, rbx
.text:00000000000089CF                 mov     r15, rax
.text:00000000000089D2                 mov     r8, r14
.text:00000000000089D5                 mov     rdi, rax
.text:00000000000089D8                 mov     [rsp+78h+var_50], 8
.text:00000000000089DD                 mov     [rsp+78h+var_70], rax
.text:00000000000089E2                 call    create_token_tree_isra_16
.text:00000000000089E7                 mov     rdi, r15
.text:00000000000089EA                 mov     r8, r14
.text:00000000000089ED                 xor     ecx, ecx
.text:00000000000089EF                 xor     edx, edx
.text:00000000000089F1                 mov     rsi, rbx
.text:00000000000089F4                 mov     r12, rax
.text:00000000000089F7                 mov     [rsp+78h+var_50], 9
.text:00000000000089FC                 call    create_token_tree_isra_16
.text:0000000000008A01                 mov     r15, rax
.text:0000000000008A04                 jmp     loc_8B5D
.text:0000000000008A04 ; ---------------------------------------------------------------------------
.text:0000000000008A09                 align 10h
.text:0000000000008A10
.text:0000000000008A10 loc_8A10:                               ; CODE XREF: lower_subexp+3A↑j
.text:0000000000008A10                 lea     rax, [rbx+70h]
.text:0000000000008A14                 lea     r14, [rsp+78h+var_58]
.text:0000000000008A19                 sub     rbx, 0FFFFFFFFFFFFFF80h
.text:0000000000008A1D                 xor     ecx, ecx
.text:0000000000008A1F                 xor     edx, edx
.text:0000000000008A21                 mov     rsi, rbx
.text:0000000000008A24                 mov     r15, rax
.text:0000000000008A27                 mov     r8, r14
.text:0000000000008A2A                 mov     rdi, rax
.text:0000000000008A2D                 mov     [rsp+78h+var_50], 8
.text:0000000000008A32                 mov     [rsp+78h+var_70], rax
.text:0000000000008A37                 call    create_token_tree_isra_16
.text:0000000000008A3C                 mov     rdi, r15
.text:0000000000008A3F                 mov     r8, r14
.text:0000000000008A42                 xor     ecx, ecx
.text:0000000000008A44                 xor     edx, edx
.text:0000000000008A46                 mov     rsi, rbx
.text:0000000000008A49                 mov     r12, rax
.text:0000000000008A4C                 mov     [rsp+78h+var_50], 9
.text:0000000000008A51                 call    create_token_tree_isra_16
.text:0000000000008A56                 mov     r11, rax
.text:0000000000008A59                 mov     r15, rax
.text:0000000000008A5C
.text:0000000000008A5C loc_8A5C:                               ; CODE XREF: lower_subexp+1F7↓j
.text:0000000000008A5C                                         ; lower_subexp+21B↓j
.text:0000000000008A5C                 mov     rdi, [rsp+78h+var_70]
.text:0000000000008A61                 mov     r8, r14
.text:0000000000008A64                 mov     rcx, r11
.text:0000000000008A67                 mov     rdx, r12
.text:0000000000008A6A                 mov     rsi, rbx
.text:0000000000008A6D                 mov     [rsp+78h+var_50], 10h
.text:0000000000008A72                 mov     [rsp+78h+var_68], r11
.text:0000000000008A77                 call    create_token_tree_isra_16
.text:0000000000008A7C                 test    rax, rax
.text:0000000000008A7F                 mov     rbp, rax
.text:0000000000008A82                 jz      loc_8B80
.text:0000000000008A88                 mov     r11, [rsp+78h+var_68]
.text:0000000000008A8D                 test    r11, r11
.text:0000000000008A90                 jz      loc_8B80
.text:0000000000008A96                 test    r12, r12
.text:0000000000008A99                 jz      loc_8B80
.text:0000000000008A9F                 test    r15, r15
.text:0000000000008AA2                 jz      loc_8B80
.text:0000000000008AA8                 mov     rax, [r13+28h]
.text:0000000000008AAC                 mov     [r15+28h], rax
.text:0000000000008AB0                 mov     [r12+28h], rax
.text:0000000000008AB5                 movzx   eax, byte ptr [r13+32h]
.text:0000000000008ABA                 movzx   edx, byte ptr [r15+32h]
.text:0000000000008ABF                 and     eax, 8
.text:0000000000008AC2                 and     edx, 0FFFFFFF7h
.text:0000000000008AC5                 mov     ecx, eax
.text:0000000000008AC7                 or      edx, ecx
.text:0000000000008AC9                 mov     [r15+32h], dl
.text:0000000000008ACD                 movzx   eax, byte ptr [r12+32h]
.text:0000000000008AD3                 and     eax, 0FFFFFFF7h
.text:0000000000008AD6                 or      eax, ecx
.text:0000000000008AD8                 mov     [r12+32h], al
.text:0000000000008ADD
.text:0000000000008ADD loc_8ADD:                               ; CODE XREF: lower_subexp+44↑j
.text:0000000000008ADD                                         ; lower_subexp+55↑j ...
.text:0000000000008ADD                 mov     rdi, [rsp+78h+var_40]
.text:0000000000008AE2                 xor     rdi, fs:28h
.text:0000000000008AEB                 mov     rax, rbp
.text:0000000000008AEE                 jnz     loc_8B92
.text:0000000000008AF4                 add     rsp, 48h
.text:0000000000008AF8                 pop     rbx
.text:0000000000008AF9                 pop     rbp
.text:0000000000008AFA                 pop     r12
.text:0000000000008AFC                 pop     r13
.text:0000000000008AFE                 pop     r14
.text:0000000000008B00                 pop     r15
.text:0000000000008B02                 retn
.text:0000000000008B02 ; ---------------------------------------------------------------------------
.text:0000000000008B03                 align 8
.text:0000000000008B08
.text:0000000000008B08 loc_8B08:                               ; CODE XREF: lower_subexp+31↑j
.text:0000000000008B08                 lea     rax, [rbx+70h]
.text:0000000000008B0C                 lea     r14, [rsp+78h+var_58]
.text:0000000000008B11                 sub     rbx, 0FFFFFFFFFFFFFF80h
.text:0000000000008B15                 xor     ecx, ecx
.text:0000000000008B17                 xor     edx, edx
.text:0000000000008B19                 mov     rsi, rbx
.text:0000000000008B1C                 mov     r15, rax
.text:0000000000008B1F                 mov     r8, r14
.text:0000000000008B22                 mov     rdi, rax
.text:0000000000008B25                 mov     [rsp+78h+var_50], 8
.text:0000000000008B2A                 mov     [rsp+78h+var_70], rax
.text:0000000000008B2F                 call    create_token_tree_isra_16
.text:0000000000008B34                 xor     ecx, ecx
.text:0000000000008B36                 xor     edx, edx
.text:0000000000008B38                 mov     rdi, r15
.text:0000000000008B3B                 mov     r8, r14
.text:0000000000008B3E                 mov     rsi, rbx
.text:0000000000008B41                 mov     r12, rax
.text:0000000000008B44                 mov     [rsp+78h+var_50], 9
.text:0000000000008B49                 call    create_token_tree_isra_16
.text:0000000000008B4E                 test    rbp, rbp
.text:0000000000008B51                 mov     r15, rax
.text:0000000000008B54                 mov     r11, rax
.text:0000000000008B57                 jz      loc_8A5C
.text:0000000000008B5D
.text:0000000000008B5D loc_8B5D:                               ; CODE XREF: lower_subexp+A4↑j
.text:0000000000008B5D                 mov     rdi, [rsp+78h+var_70]
.text:0000000000008B62                 mov     r8, r14
.text:0000000000008B65                 mov     rcx, r15
.text:0000000000008B68                 mov     rdx, rbp
.text:0000000000008B6B                 mov     rsi, rbx
.text:0000000000008B6E                 mov     [rsp+78h+var_50], 10h
.text:0000000000008B73                 call    create_token_tree_isra_16
.text:0000000000008B78                 mov     r11, rax
.text:0000000000008B7B                 jmp     loc_8A5C
.text:0000000000008B80 ; ---------------------------------------------------------------------------
.text:0000000000008B80
.text:0000000000008B80 loc_8B80:                               ; CODE XREF: lower_subexp+122↑j
.text:0000000000008B80                                         ; lower_subexp+130↑j ...
.text:0000000000008B80                 mov     rax, [rsp+78h+var_60]
.text:0000000000008B85                 xor     ebp, ebp
.text:0000000000008B87                 mov     dword ptr [rax], 0Ch
.text:0000000000008B8D                 jmp     loc_8ADD
.text:0000000000008B92 ; ---------------------------------------------------------------------------
.text:0000000000008B92
.text:0000000000008B92 loc_8B92:                               ; CODE XREF: lower_subexp+18E↑j
.text:0000000000008B92                 call    ___stack_chk_fail
.text:0000000000008B92 ; } // starts at 8960
.text:0000000000008B92 lower_subexp    endp
.text:0000000000008B92
.text:0000000000008B92 ; ---------------------------------------------------------------------------
.text:0000000000008B97                 align 20h
.text:0000000000008BA0
.text:0000000000008BA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000008BA0
.text:0000000000008BA0
.text:0000000000008BA0 lower_subexps   proc near               ; DATA XREF: re_compile_internal+666↓o
.text:0000000000008BA0
.text:0000000000008BA0 var_24          = dword ptr -24h
.text:0000000000008BA0 var_20          = qword ptr -20h
.text:0000000000008BA0
.text:0000000000008BA0 ; __unwind {
.text:0000000000008BA0                 push    rbp
.text:0000000000008BA1                 push    rbx
.text:0000000000008BA2                 mov     rbp, rdi
.text:0000000000008BA5                 mov     rbx, rsi
.text:0000000000008BA8                 sub     rsp, 18h
.text:0000000000008BAC                 mov     rdx, [rsi+8]
.text:0000000000008BB0                 mov     rax, fs:28h
.text:0000000000008BB9                 mov     [rsp+28h+var_20], rax
.text:0000000000008BBE                 xor     eax, eax
.text:0000000000008BC0                 mov     [rsp+28h+var_24], 0
.text:0000000000008BC8                 test    rdx, rdx
.text:0000000000008BCB                 jz      short loc_8BD3
.text:0000000000008BCD                 cmp     byte ptr [rdx+30h], 11h
.text:0000000000008BD1                 jz      short loc_8C20
.text:0000000000008BD3
.text:0000000000008BD3 loc_8BD3:                               ; CODE XREF: lower_subexps+2B↑j
.text:0000000000008BD3                                         ; lower_subexps+94↓j ...
.text:0000000000008BD3                 mov     rdx, [rbx+10h]
.text:0000000000008BD7                 test    rdx, rdx
.text:0000000000008BDA                 jz      short loc_8BE2
.text:0000000000008BDC                 cmp     byte ptr [rdx+30h], 11h
.text:0000000000008BE0                 jz      short loc_8C00
.text:0000000000008BE2
.text:0000000000008BE2 loc_8BE2:                               ; CODE XREF: lower_subexps+3A↑j
.text:0000000000008BE2                                         ; lower_subexps+74↓j ...
.text:0000000000008BE2                 mov     rcx, [rsp+28h+var_20]
.text:0000000000008BE7                 xor     rcx, fs:28h
.text:0000000000008BF0                 mov     eax, [rsp+28h+var_24]
.text:0000000000008BF4                 jnz     short loc_8C3B
.text:0000000000008BF6                 add     rsp, 18h
.text:0000000000008BFA                 pop     rbx
.text:0000000000008BFB                 pop     rbp
.text:0000000000008BFC                 retn
.text:0000000000008BFC ; ---------------------------------------------------------------------------
.text:0000000000008BFD                 align 20h
.text:0000000000008C00
.text:0000000000008C00 loc_8C00:                               ; CODE XREF: lower_subexps+40↑j
.text:0000000000008C00                 lea     rdi, [rsp+28h+var_24]
.text:0000000000008C05                 mov     rsi, rbp
.text:0000000000008C08                 call    lower_subexp
.text:0000000000008C0D                 test    rax, rax
.text:0000000000008C10                 mov     [rbx+10h], rax
.text:0000000000008C14                 jz      short loc_8BE2
.text:0000000000008C16                 mov     [rax], rbx
.text:0000000000008C19                 jmp     short loc_8BE2
.text:0000000000008C19 ; ---------------------------------------------------------------------------
.text:0000000000008C1B                 align 20h
.text:0000000000008C20
.text:0000000000008C20 loc_8C20:                               ; CODE XREF: lower_subexps+31↑j
.text:0000000000008C20                 lea     rdi, [rsp+28h+var_24]
.text:0000000000008C25                 mov     rsi, rbp
.text:0000000000008C28                 call    lower_subexp
.text:0000000000008C2D                 test    rax, rax
.text:0000000000008C30                 mov     [rbx+8], rax
.text:0000000000008C34                 jz      short loc_8BD3
.text:0000000000008C36                 mov     [rax], rbx
.text:0000000000008C39                 jmp     short loc_8BD3
.text:0000000000008C3B ; ---------------------------------------------------------------------------
.text:0000000000008C3B
.text:0000000000008C3B loc_8C3B:                               ; CODE XREF: lower_subexps+54↑j
.text:0000000000008C3B                 call    ___stack_chk_fail
.text:0000000000008C3B ; } // starts at 8BA0
.text:0000000000008C3B lower_subexps   endp
.text:0000000000008C3B
.text:0000000000008C40
.text:0000000000008C40 ; =============== S U B R O U T I N E =======================================
.text:0000000000008C40
.text:0000000000008C40
.text:0000000000008C40 re_node_set_init_copy proc near         ; CODE XREF: re_node_set_init_union+EB↓j
.text:0000000000008C40                                         ; re_acquire_state_context+E8↓p ...
.text:0000000000008C40 ; __unwind {
.text:0000000000008C40                 push    r12
.text:0000000000008C42                 push    rbp
.text:0000000000008C43                 push    rbx
.text:0000000000008C44                 mov     rax, [rsi+8]
.text:0000000000008C48                 mov     [rdi+8], rax
.text:0000000000008C4C                 mov     r12, [rsi+8]
.text:0000000000008C50                 test    r12, r12
.text:0000000000008C53                 jle     short loc_8C90
.text:0000000000008C55                 mov     rbx, rdi
.text:0000000000008C58                 mov     [rdi], rax
.text:0000000000008C5B                 lea     rdi, ds:0[rax*8] ; size
.text:0000000000008C63                 mov     rbp, rsi
.text:0000000000008C66                 call    _malloc
.text:0000000000008C6B                 test    rax, rax
.text:0000000000008C6E                 mov     [rbx+10h], rax
.text:0000000000008C72                 jz      short loc_8CB0
.text:0000000000008C74                 mov     rsi, [rbp+10h]  ; src
.text:0000000000008C78                 lea     rdx, ds:0[r12*8] ; n
.text:0000000000008C80                 mov     rdi, rax        ; dest
.text:0000000000008C83                 call    _memcpy
.text:0000000000008C88                 xor     eax, eax
.text:0000000000008C8A
.text:0000000000008C8A loc_8C8A:                               ; CODE XREF: re_node_set_init_copy+84↓j
.text:0000000000008C8A                 pop     rbx
.text:0000000000008C8B                 pop     rbp
.text:0000000000008C8C                 pop     r12
.text:0000000000008C8E                 retn
.text:0000000000008C8E ; ---------------------------------------------------------------------------
.text:0000000000008C8F                 align 10h
.text:0000000000008C90
.text:0000000000008C90 loc_8C90:                               ; CODE XREF: re_node_set_init_copy+13↑j
.text:0000000000008C90                 pxor    xmm0, xmm0
.text:0000000000008C94                 mov     qword ptr [rdi+10h], 0
.text:0000000000008C9C                 xor     eax, eax
.text:0000000000008C9E                 movups  xmmword ptr [rdi], xmm0
.text:0000000000008CA1                 pop     rbx
.text:0000000000008CA2                 pop     rbp
.text:0000000000008CA3                 pop     r12
.text:0000000000008CA5                 retn
.text:0000000000008CA5 ; ---------------------------------------------------------------------------
.text:0000000000008CA6                 align 10h
.text:0000000000008CB0
.text:0000000000008CB0 loc_8CB0:                               ; CODE XREF: re_node_set_init_copy+32↑j
.text:0000000000008CB0                 mov     qword ptr [rbx+8], 0
.text:0000000000008CB8                 mov     qword ptr [rbx], 0
.text:0000000000008CBF                 mov     eax, 0Ch
.text:0000000000008CC4                 jmp     short loc_8C8A
.text:0000000000008CC4 ; } // starts at 8C40
.text:0000000000008CC4 re_node_set_init_copy endp
.text:0000000000008CC4
.text:0000000000008CC4 ; ---------------------------------------------------------------------------
.text:0000000000008CC6                 align 10h
.text:0000000000008CD0
.text:0000000000008CD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000008CD0
.text:0000000000008CD0
.text:0000000000008CD0 re_node_set_init_union proc near        ; CODE XREF: merge_state_array+60↓p
.text:0000000000008CD0                                         ; transit_state_bkref_isra_34+4A1↓p ...
.text:0000000000008CD0 ; __unwind {
.text:0000000000008CD0                 test    rsi, rsi
.text:0000000000008CD3                 push    r14
.text:0000000000008CD5                 push    r13
.text:0000000000008CD7                 push    r12
.text:0000000000008CD9                 push    rbp
.text:0000000000008CDA                 push    rbx
.text:0000000000008CDB                 jz      loc_8D85
.text:0000000000008CE1                 test    rdx, rdx
.text:0000000000008CE4                 mov     r13, [rsi+8]
.text:0000000000008CE8                 jz      loc_8D80
.text:0000000000008CEE                 test    r13, r13
.text:0000000000008CF1                 jle     loc_8D80
.text:0000000000008CF7                 mov     r14, [rdx+8]
.text:0000000000008CFB                 test    r14, r14
.text:0000000000008CFE                 jle     loc_8DB3
.text:0000000000008D04                 mov     r12, rdi
.text:0000000000008D07                 lea     rdi, [r13+r14+0]
.text:0000000000008D0C                 mov     rbx, rdx
.text:0000000000008D0F                 mov     rbp, rsi
.text:0000000000008D12                 mov     [r12], rdi
.text:0000000000008D16                 shl     rdi, 3          ; size
.text:0000000000008D1A                 call    _malloc
.text:0000000000008D1F                 test    rax, rax
.text:0000000000008D22                 mov     [r12+10h], rax
.text:0000000000008D27                 jz      loc_8E18
.text:0000000000008D2D                 mov     r9, [rbx+10h]
.text:0000000000008D31                 mov     r8, [rbp+10h]
.text:0000000000008D35                 xor     ebx, ebx
.text:0000000000008D37                 xor     ecx, ecx
.text:0000000000008D39                 xor     esi, esi
.text:0000000000008D3B                 jmp     short loc_8D5E
.text:0000000000008D3B ; ---------------------------------------------------------------------------
.text:0000000000008D3D                 align 20h
.text:0000000000008D40
.text:0000000000008D40 loc_8D40:                               ; CODE XREF: re_node_set_init_union+9D↓j
.text:0000000000008D40                 setz    dil
.text:0000000000008D44                 mov     [rax+rbx*8-8], rdx
.text:0000000000008D49                 add     rsi, 1
.text:0000000000008D4D                 movzx   edi, dil
.text:0000000000008D51                 add     rcx, rdi
.text:0000000000008D54
.text:0000000000008D54 loc_8D54:                               ; CODE XREF: re_node_set_init_union+A8↓j
.text:0000000000008D54                 cmp     r13, rsi
.text:0000000000008D57                 jle     short loc_8DC0
.text:0000000000008D59                 cmp     r14, rcx
.text:0000000000008D5C                 jle     short loc_8DD8
.text:0000000000008D5E
.text:0000000000008D5E loc_8D5E:                               ; CODE XREF: re_node_set_init_union+6B↑j
.text:0000000000008D5E                 mov     rdx, [r8+rsi*8]
.text:0000000000008D62                 mov     rdi, [r9+rcx*8]
.text:0000000000008D66                 add     rbx, 1
.text:0000000000008D6A                 cmp     rdx, rdi
.text:0000000000008D6D                 jle     short loc_8D40
.text:0000000000008D6F                 add     rcx, 1
.text:0000000000008D73                 mov     [rax+rbx*8-8], rdi
.text:0000000000008D78                 jmp     short loc_8D54
.text:0000000000008D78 ; ---------------------------------------------------------------------------
.text:0000000000008D7A                 align 20h
.text:0000000000008D80
.text:0000000000008D80 loc_8D80:                               ; CODE XREF: re_node_set_init_union+18↑j
.text:0000000000008D80                                         ; re_node_set_init_union+21↑j
.text:0000000000008D80                 test    r13, r13
.text:0000000000008D83                 jg      short loc_8DB3
.text:0000000000008D85
.text:0000000000008D85 loc_8D85:                               ; CODE XREF: re_node_set_init_union+B↑j
.text:0000000000008D85                 test    rdx, rdx
.text:0000000000008D88                 jz      short loc_8D91
.text:0000000000008D8A                 cmp     qword ptr [rdx+8], 0
.text:0000000000008D8F                 jg      short loc_8DB0
.text:0000000000008D91
.text:0000000000008D91 loc_8D91:                               ; CODE XREF: re_node_set_init_union+B8↑j
.text:0000000000008D91                 pxor    xmm0, xmm0
.text:0000000000008D95                 mov     qword ptr [rdi+10h], 0
.text:0000000000008D9D                 xor     eax, eax
.text:0000000000008D9F                 movaps  xmmword ptr [rdi], xmm0
.text:0000000000008DA2
.text:0000000000008DA2 loc_8DA2:                               ; CODE XREF: re_node_set_init_union+14D↓j
.text:0000000000008DA2                 pop     rbx
.text:0000000000008DA3                 pop     rbp
.text:0000000000008DA4                 pop     r12
.text:0000000000008DA6                 pop     r13
.text:0000000000008DA8                 pop     r14
.text:0000000000008DAA                 retn
.text:0000000000008DAA ; ---------------------------------------------------------------------------
.text:0000000000008DAB                 align 10h
.text:0000000000008DB0
.text:0000000000008DB0 loc_8DB0:                               ; CODE XREF: re_node_set_init_union+BF↑j
.text:0000000000008DB0                 mov     rsi, rdx
.text:0000000000008DB3
.text:0000000000008DB3 loc_8DB3:                               ; CODE XREF: re_node_set_init_union+2E↑j
.text:0000000000008DB3                                         ; re_node_set_init_union+B3↑j
.text:0000000000008DB3                 pop     rbx
.text:0000000000008DB4                 pop     rbp
.text:0000000000008DB5                 pop     r12
.text:0000000000008DB7                 pop     r13
.text:0000000000008DB9                 pop     r14
.text:0000000000008DBB                 jmp     re_node_set_init_copy
.text:0000000000008DC0 ; ---------------------------------------------------------------------------
.text:0000000000008DC0
.text:0000000000008DC0 loc_8DC0:                               ; CODE XREF: re_node_set_init_union+87↑j
.text:0000000000008DC0                 cmp     r14, rcx
.text:0000000000008DC3                 jg      short loc_8DF8
.text:0000000000008DC5
.text:0000000000008DC5 loc_8DC5:                               ; CODE XREF: re_node_set_init_union+123↓j
.text:0000000000008DC5                                         ; re_node_set_init_union+143↓j
.text:0000000000008DC5                 mov     [r12+8], rbx
.text:0000000000008DCA                 xor     eax, eax
.text:0000000000008DCC                 pop     rbx
.text:0000000000008DCD                 pop     rbp
.text:0000000000008DCE                 pop     r12
.text:0000000000008DD0                 pop     r13
.text:0000000000008DD2                 pop     r14
.text:0000000000008DD4                 retn
.text:0000000000008DD4 ; ---------------------------------------------------------------------------
.text:0000000000008DD5                 align 8
.text:0000000000008DD8
.text:0000000000008DD8 loc_8DD8:                               ; CODE XREF: re_node_set_init_union+8C↑j
.text:0000000000008DD8                 sub     r13, rsi
.text:0000000000008DDB                 lea     rdi, [rax+rbx*8] ; dest
.text:0000000000008DDF                 lea     rsi, [r8+rsi*8] ; src
.text:0000000000008DE3                 lea     rdx, ds:0[r13*8] ; n
.text:0000000000008DEB                 add     rbx, r13
.text:0000000000008DEE                 call    _memcpy
.text:0000000000008DF3                 jmp     short loc_8DC5
.text:0000000000008DF3 ; ---------------------------------------------------------------------------
.text:0000000000008DF5                 align 8
.text:0000000000008DF8
.text:0000000000008DF8 loc_8DF8:                               ; CODE XREF: re_node_set_init_union+F3↑j
.text:0000000000008DF8                 sub     r14, rcx
.text:0000000000008DFB                 lea     rdi, [rax+rbx*8] ; dest
.text:0000000000008DFF                 lea     rsi, [r9+rcx*8] ; src
.text:0000000000008E03                 lea     rdx, ds:0[r14*8] ; n
.text:0000000000008E0B                 add     rbx, r14
.text:0000000000008E0E                 call    _memcpy
.text:0000000000008E13                 jmp     short loc_8DC5
.text:0000000000008E13 ; ---------------------------------------------------------------------------
.text:0000000000008E15                 align 8
.text:0000000000008E18
.text:0000000000008E18 loc_8E18:                               ; CODE XREF: re_node_set_init_union+57↑j
.text:0000000000008E18                 mov     eax, 0Ch
.text:0000000000008E1D                 jmp     loc_8DA2
.text:0000000000008E1D ; } // starts at 8CD0
.text:0000000000008E1D re_node_set_init_union endp
.text:0000000000008E1D
.text:0000000000008E1D ; ---------------------------------------------------------------------------
.text:0000000000008E22                 align 10h
.text:0000000000008E30
.text:0000000000008E30 ; =============== S U B R O U T I N E =======================================
.text:0000000000008E30
.text:0000000000008E30
.text:0000000000008E30 re_acquire_state_context proc near      ; CODE XREF: build_trtable+255↓p
.text:0000000000008E30                                         ; build_trtable+9A0↓p ...
.text:0000000000008E30
.text:0000000000008E30 var_54          = dword ptr -54h
.text:0000000000008E30 var_50          = qword ptr -50h
.text:0000000000008E30 var_48          = qword ptr -48h
.text:0000000000008E30 var_40          = qword ptr -40h
.text:0000000000008E30
.text:0000000000008E30 ; __unwind {
.text:0000000000008E30                 push    r15
.text:0000000000008E32                 push    r14
.text:0000000000008E34                 push    r13
.text:0000000000008E36                 push    r12
.text:0000000000008E38                 push    rbp
.text:0000000000008E39                 push    rbx
.text:0000000000008E3A                 sub     rsp, 28h
.text:0000000000008E3E                 mov     r10, [rdx+8]
.text:0000000000008E42                 test    r10, r10
.text:0000000000008E45                 jz      loc_90CF
.text:0000000000008E4B                 mov     r8d, ecx
.text:0000000000008E4E                 test    r10, r10
.text:0000000000008E51                 lea     r12, [r8+r10]
.text:0000000000008E55                 jle     short loc_8E6C
.text:0000000000008E57                 mov     rax, [rdx+10h]
.text:0000000000008E5B                 lea     r10, [rax+r10*8]
.text:0000000000008E5F                 nop
.text:0000000000008E60
.text:0000000000008E60 loc_8E60:                               ; CODE XREF: re_acquire_state_context+3A↓j
.text:0000000000008E60                 add     r12, [rax]
.text:0000000000008E63                 add     rax, 8
.text:0000000000008E67                 cmp     r10, rax
.text:0000000000008E6A                 jnz     short loc_8E60
.text:0000000000008E6C
.text:0000000000008E6C loc_8E6C:                               ; CODE XREF: re_acquire_state_context+25↑j
.text:0000000000008E6C                 mov     rax, [rsi+88h]
.text:0000000000008E73                 mov     rbp, rdx
.text:0000000000008E76                 mov     [rsp+58h+var_54], ecx
.text:0000000000008E7A                 mov     r13, rsi
.text:0000000000008E7D                 mov     [rsp+58h+var_40], rdi
.text:0000000000008E82                 and     rax, r12
.text:0000000000008E85                 lea     rdx, [rax+rax*2]
.text:0000000000008E89                 mov     rax, [rsi+40h]
.text:0000000000008E8D                 lea     rax, [rax+rdx*8]
.text:0000000000008E91                 mov     r11, [rax]
.text:0000000000008E94                 test    r11, r11
.text:0000000000008E97                 jle     short loc_8EF0
.text:0000000000008E99                 mov     rbx, [rax+10h]
.text:0000000000008E9D                 xor     r10d, r10d
.text:0000000000008EA0                 mov     r9d, ecx
.text:0000000000008EA3                 jmp     short loc_8EB1
.text:0000000000008EA3 ; ---------------------------------------------------------------------------
.text:0000000000008EA5                 align 8
.text:0000000000008EA8
.text:0000000000008EA8 loc_8EA8:                               ; CODE XREF: re_acquire_state_context+88↓j
.text:0000000000008EA8                                         ; re_acquire_state_context+95↓j ...
.text:0000000000008EA8                 add     r10, 1
.text:0000000000008EAC                 cmp     r10, r11
.text:0000000000008EAF                 jz      short loc_8EF0
.text:0000000000008EB1
.text:0000000000008EB1 loc_8EB1:                               ; CODE XREF: re_acquire_state_context+73↑j
.text:0000000000008EB1                 mov     r14, [rbx+r10*8]
.text:0000000000008EB5                 cmp     [r14], r12
.text:0000000000008EB8                 jnz     short loc_8EA8
.text:0000000000008EBA                 movzx   eax, byte ptr [r14+68h]
.text:0000000000008EBF                 and     eax, 0Fh
.text:0000000000008EC2                 cmp     eax, r9d
.text:0000000000008EC5                 jnz     short loc_8EA8
.text:0000000000008EC7                 mov     rdi, [r14+50h]
.text:0000000000008ECB                 test    rdi, rdi
.text:0000000000008ECE                 jz      short loc_8EA8
.text:0000000000008ED0                 mov     rsi, rbp
.text:0000000000008ED3                 call    re_node_set_compare_part_2
.text:0000000000008ED8                 test    al, al
.text:0000000000008EDA                 jz      short loc_8EA8
.text:0000000000008EDC
.text:0000000000008EDC loc_8EDC:                               ; CODE XREF: re_acquire_state_context+208↓j
.text:0000000000008EDC                                         ; re_acquire_state_context+224↓j ...
.text:0000000000008EDC                 add     rsp, 28h
.text:0000000000008EE0                 mov     rax, r14
.text:0000000000008EE3                 pop     rbx
.text:0000000000008EE4                 pop     rbp
.text:0000000000008EE5                 pop     r12
.text:0000000000008EE7                 pop     r13
.text:0000000000008EE9                 pop     r14
.text:0000000000008EEB                 pop     r15
.text:0000000000008EED                 retn
.text:0000000000008EED ; ---------------------------------------------------------------------------
.text:0000000000008EEE                 align 10h
.text:0000000000008EF0
.text:0000000000008EF0 loc_8EF0:                               ; CODE XREF: re_acquire_state_context+67↑j
.text:0000000000008EF0                                         ; re_acquire_state_context+7F↑j
.text:0000000000008EF0                 mov     esi, 1          ; size
.text:0000000000008EF5                 mov     edi, 70h ; 'p'  ; nmemb
.text:0000000000008EFA                 call    _calloc
.text:0000000000008EFF                 test    rax, rax
.text:0000000000008F02                 mov     r14, rax
.text:0000000000008F05                 jz      loc_9046
.text:0000000000008F0B                 lea     rax, [rax+8]
.text:0000000000008F0F                 mov     rsi, rbp
.text:0000000000008F12                 mov     rdi, rax
.text:0000000000008F15                 mov     rbx, rax
.text:0000000000008F18                 call    re_node_set_init_copy
.text:0000000000008F1D                 test    eax, eax
.text:0000000000008F1F                 jnz     loc_90DD
.text:0000000000008F25                 movzx   eax, byte ptr [r14+68h]
.text:0000000000008F2A                 movzx   edx, byte ptr [rsp+58h+var_54]
.text:0000000000008F2F                 mov     [r14+50h], rbx
.text:0000000000008F33                 and     edx, 0Fh
.text:0000000000008F36                 and     eax, 0FFFFFFF0h
.text:0000000000008F39                 or      eax, edx
.text:0000000000008F3B                 cmp     qword ptr [rbp+8], 0
.text:0000000000008F40                 mov     [r14+68h], al
.text:0000000000008F44                 jle     loc_9028
.text:0000000000008F4A                 lea     rcx, [r14+18h]
.text:0000000000008F4E                 xor     r15d, r15d
.text:0000000000008F51                 mov     [rsp+58h+var_48], r12
.text:0000000000008F56                 xor     r10d, r10d
.text:0000000000008F59                 mov     r12, r13
.text:0000000000008F5C                 mov     r13, r15
.text:0000000000008F5F                 mov     [rsp+58h+var_50], rcx
.text:0000000000008F64                 mov     r15, rbx
.text:0000000000008F67                 nop     word ptr [rax+rax+00000000h]
.text:0000000000008F70
.text:0000000000008F70 loc_8F70:                               ; CODE XREF: re_acquire_state_context+1EA↓j
.text:0000000000008F70                 mov     rax, [rbp+10h]
.text:0000000000008F74                 mov     rax, [rax+r13*8]
.text:0000000000008F78                 shl     rax, 4
.text:0000000000008F7C                 add     rax, [r12]
.text:0000000000008F80                 movzx   esi, byte ptr [rax+8]
.text:0000000000008F84                 mov     ebx, [rax+8]
.text:0000000000008F87                 shr     ebx, 8
.text:0000000000008F8A                 and     bx, 3FFh
.text:0000000000008F8F                 cmp     esi, 1
.text:0000000000008F92                 movzx   edi, bx
.text:0000000000008F95                 jnz     short loc_8F9B
.text:0000000000008F97                 test    edi, edi
.text:0000000000008F99                 jz      short loc_9012
.text:0000000000008F9B
.text:0000000000008F9B loc_8F9B:                               ; CODE XREF: re_acquire_state_context+165↑j
.text:0000000000008F9B                 movzx   edx, byte ptr [r14+68h]
.text:0000000000008FA0                 movzx   eax, byte ptr [rax+0Ah]
.text:0000000000008FA4                 mov     r9d, edx
.text:0000000000008FA7                 shr     al, 4
.text:0000000000008FAA                 and     edx, 0FFFFFFDFh
.text:0000000000008FAD                 shr     r9b, 5
.text:0000000000008FB1                 or      eax, r9d
.text:0000000000008FB4                 and     eax, 1
.text:0000000000008FB7                 shl     eax, 5
.text:0000000000008FBA                 or      eax, edx
.text:0000000000008FBC                 cmp     esi, 2
.text:0000000000008FBF                 mov     [r14+68h], al
.text:0000000000008FC3                 jz      loc_9090
.text:0000000000008FC9                 cmp     esi, 4
.text:0000000000008FCC                 jnz     short loc_8FD5
.text:0000000000008FCE                 or      eax, 40h
.text:0000000000008FD1                 mov     [r14+68h], al
.text:0000000000008FD5
.text:0000000000008FD5 loc_8FD5:                               ; CODE XREF: re_acquire_state_context+19C↑j
.text:0000000000008FD5                                         ; re_acquire_state_context+267↓j
.text:0000000000008FD5                 test    edi, edi
.text:0000000000008FD7                 jz      short loc_9012
.text:0000000000008FD9                 cmp     r15, [r14+50h]
.text:0000000000008FDD                 jz      loc_90A0
.text:0000000000008FE3
.text:0000000000008FE3 loc_8FE3:                               ; CODE XREF: re_acquire_state_context+29A↓j
.text:0000000000008FE3                 test    bl, 1
.text:0000000000008FE6                 jz      short loc_9060
.text:0000000000008FE8                 test    byte ptr [rsp+58h+var_54], 1
.text:0000000000008FED                 jz      short loc_8FF8
.text:0000000000008FEF                 test    bl, 2
.text:0000000000008FF2                 jz      short loc_906C
.text:0000000000008FF4                 nop     dword ptr [rax+00h]
.text:0000000000008FF8
.text:0000000000008FF8 loc_8FF8:                               ; CODE XREF: re_acquire_state_context+1BD↑j
.text:0000000000008FF8                                         ; re_acquire_state_context+23A↓j ...
.text:0000000000008FF8                 mov     rdx, r13
.text:0000000000008FFB                 sub     rdx, r10
.text:0000000000008FFE                 js      short loc_900E
.text:0000000000009000                 mov     rsi, [rsp+58h+var_50]
.text:0000000000009005                 lea     rdi, [r14+10h]
.text:0000000000009009                 call    re_node_set_remove_at_isra_4_part_5
.text:000000000000900E
.text:000000000000900E loc_900E:                               ; CODE XREF: re_acquire_state_context+1CE↑j
.text:000000000000900E                 add     r10, 1
.text:0000000000009012
.text:0000000000009012 loc_9012:                               ; CODE XREF: re_acquire_state_context+169↑j
.text:0000000000009012                                         ; re_acquire_state_context+1A7↑j ...
.text:0000000000009012                 add     r13, 1
.text:0000000000009016                 cmp     r13, [rbp+8]
.text:000000000000901A                 jl      loc_8F70
.text:0000000000009020                 mov     r13, r12
.text:0000000000009023                 mov     r12, [rsp+58h+var_48]
.text:0000000000009028
.text:0000000000009028 loc_9028:                               ; CODE XREF: re_acquire_state_context+114↑j
.text:0000000000009028                 mov     rdx, r12
.text:000000000000902B                 mov     rsi, r14
.text:000000000000902E                 mov     rdi, r13
.text:0000000000009031                 call    register_state
.text:0000000000009036                 test    eax, eax
.text:0000000000009038                 jz      loc_8EDC
.text:000000000000903E
.text:000000000000903E loc_903E:                               ; CODE XREF: re_acquire_state_context+281↓j
.text:000000000000903E                 mov     rdi, r14        ; ptr
.text:0000000000009041                 call    free_state
.text:0000000000009046
.text:0000000000009046 loc_9046:                               ; CODE XREF: re_acquire_state_context+D5↑j
.text:0000000000009046                                         ; re_acquire_state_context+290↓j ...
.text:0000000000009046                 mov     rax, [rsp+58h+var_40]
.text:000000000000904B                 xor     r14d, r14d
.text:000000000000904E                 mov     dword ptr [rax], 0Ch
.text:0000000000009054                 jmp     loc_8EDC
.text:0000000000009054 ; ---------------------------------------------------------------------------
.text:0000000000009059                 align 20h
.text:0000000000009060
.text:0000000000009060 loc_9060:                               ; CODE XREF: re_acquire_state_context+1B6↑j
.text:0000000000009060                 test    bl, 2
.text:0000000000009063                 jz      short loc_906C
.text:0000000000009065                 test    byte ptr [rsp+58h+var_54], 1
.text:000000000000906A                 jnz     short loc_8FF8
.text:000000000000906C
.text:000000000000906C loc_906C:                               ; CODE XREF: re_acquire_state_context+1C2↑j
.text:000000000000906C                                         ; re_acquire_state_context+233↑j
.text:000000000000906C                 test    bl, 10h
.text:000000000000906F                 jz      short loc_9078
.text:0000000000009071                 test    byte ptr [rsp+58h+var_54], 2
.text:0000000000009076                 jz      short loc_8FF8
.text:0000000000009078
.text:0000000000009078 loc_9078:                               ; CODE XREF: re_acquire_state_context+23F↑j
.text:0000000000009078                 and     ebx, 40h
.text:000000000000907B                 jz      short loc_9012
.text:000000000000907D                 test    byte ptr [rsp+58h+var_54], 4
.text:0000000000009082                 jnz     short loc_9012
.text:0000000000009084                 jmp     loc_8FF8
.text:0000000000009084 ; ---------------------------------------------------------------------------
.text:0000000000009089                 align 10h
.text:0000000000009090
.text:0000000000009090 loc_9090:                               ; CODE XREF: re_acquire_state_context+193↑j
.text:0000000000009090                 or      eax, 10h
.text:0000000000009093                 mov     [r14+68h], al
.text:0000000000009097                 jmp     loc_8FD5
.text:0000000000009097 ; ---------------------------------------------------------------------------
.text:000000000000909C                 align 20h
.text:00000000000090A0
.text:00000000000090A0 loc_90A0:                               ; CODE XREF: re_acquire_state_context+1AD↑j
.text:00000000000090A0                 mov     edi, 18h        ; size
.text:00000000000090A5                 call    _malloc
.text:00000000000090AA                 test    rax, rax
.text:00000000000090AD                 mov     [r14+50h], rax
.text:00000000000090B1                 jz      short loc_903E
.text:00000000000090B3                 mov     rsi, rbp
.text:00000000000090B6                 mov     rdi, rax
.text:00000000000090B9                 call    re_node_set_init_copy
.text:00000000000090BE                 test    eax, eax
.text:00000000000090C0                 jnz     short loc_9046
.text:00000000000090C2                 or      byte ptr [r14+68h], 80h
.text:00000000000090C7                 xor     r10d, r10d
.text:00000000000090CA                 jmp     loc_8FE3
.text:00000000000090CF ; ---------------------------------------------------------------------------
.text:00000000000090CF
.text:00000000000090CF loc_90CF:                               ; CODE XREF: re_acquire_state_context+15↑j
.text:00000000000090CF                 mov     dword ptr [rdi], 0
.text:00000000000090D5                 xor     r14d, r14d
.text:00000000000090D8                 jmp     loc_8EDC
.text:00000000000090DD ; ---------------------------------------------------------------------------
.text:00000000000090DD
.text:00000000000090DD loc_90DD:                               ; CODE XREF: re_acquire_state_context+EF↑j
.text:00000000000090DD                 mov     rdi, r14        ; ptr
.text:00000000000090E0                 call    _free
.text:00000000000090E5                 jmp     loc_9046
.text:00000000000090E5 ; } // starts at 8E30
.text:00000000000090E5 re_acquire_state_context endp
.text:00000000000090E5
.text:00000000000090E5 ; ---------------------------------------------------------------------------
.text:00000000000090EA                 align 10h
.text:00000000000090F0
.text:00000000000090F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000090F0
.text:00000000000090F0
.text:00000000000090F0 re_acquire_state proc near              ; CODE XREF: merge_state_array+78↓p
.text:00000000000090F0                                         ; expand_bkref_cache+1D0↓p ...
.text:00000000000090F0 ; __unwind {
.text:00000000000090F0                 push    r15
.text:00000000000090F2                 push    r14
.text:00000000000090F4                 push    r13
.text:00000000000090F6                 push    r12
.text:00000000000090F8                 push    rbp
.text:00000000000090F9                 push    rbx
.text:00000000000090FA                 sub     rsp, 8
.text:00000000000090FE                 mov     rbp, [rdx+8]
.text:0000000000009102                 test    rbp, rbp
.text:0000000000009105                 jz      loc_92E0
.text:000000000000910B                 test    rbp, rbp
.text:000000000000910E                 jle     short loc_912C
.text:0000000000009110                 mov     rax, [rdx+10h]
.text:0000000000009114                 lea     rcx, [rax+rbp*8]
.text:0000000000009118                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000009120
.text:0000000000009120 loc_9120:                               ; CODE XREF: re_acquire_state+3A↓j
.text:0000000000009120                 add     rbp, [rax]
.text:0000000000009123                 add     rax, 8
.text:0000000000009127                 cmp     rcx, rax
.text:000000000000912A                 jnz     short loc_9120
.text:000000000000912C
.text:000000000000912C loc_912C:                               ; CODE XREF: re_acquire_state+1E↑j
.text:000000000000912C                 mov     rax, [rsi+88h]
.text:0000000000009133                 mov     r14, rdx
.text:0000000000009136                 mov     r12, rsi
.text:0000000000009139                 mov     r13, rdi
.text:000000000000913C                 and     rax, rbp
.text:000000000000913F                 lea     rdx, [rax+rax*2]
.text:0000000000009143                 mov     rax, [rsi+40h]
.text:0000000000009147                 lea     rax, [rax+rdx*8]
.text:000000000000914B                 mov     r10, [rax]
.text:000000000000914E                 test    r10, r10
.text:0000000000009151                 jle     short loc_9186
.text:0000000000009153                 mov     r11, [rax+10h]
.text:0000000000009157                 xor     r9d, r9d
.text:000000000000915A                 nop     word ptr [rax+rax+00h]
.text:0000000000009160
.text:0000000000009160 loc_9160:                               ; CODE XREF: re_acquire_state+94↓j
.text:0000000000009160                 mov     rbx, [r11+r9*8]
.text:0000000000009164                 cmp     [rbx], rbp
.text:0000000000009167                 jnz     short loc_917D
.text:0000000000009169                 lea     rdi, [rbx+8]
.text:000000000000916D                 mov     rsi, r14
.text:0000000000009170                 call    re_node_set_compare_part_2
.text:0000000000009175                 test    al, al
.text:0000000000009177                 jnz     loc_927F
.text:000000000000917D
.text:000000000000917D loc_917D:                               ; CODE XREF: re_acquire_state+77↑j
.text:000000000000917D                 add     r9, 1
.text:0000000000009181                 cmp     r10, r9
.text:0000000000009184                 jnz     short loc_9160
.text:0000000000009186
.text:0000000000009186 loc_9186:                               ; CODE XREF: re_acquire_state+61↑j
.text:0000000000009186                 mov     esi, 1          ; size
.text:000000000000918B                 mov     edi, 70h ; 'p'  ; nmemb
.text:0000000000009190                 call    _calloc
.text:0000000000009195                 test    rax, rax
.text:0000000000009198                 mov     rbx, rax
.text:000000000000919B                 jz      loc_92C8
.text:00000000000091A1                 lea     r15, [rax+8]
.text:00000000000091A5                 mov     rsi, r14
.text:00000000000091A8                 mov     rdi, r15
.text:00000000000091AB                 call    re_node_set_init_copy
.text:00000000000091B0                 test    eax, eax
.text:00000000000091B2                 jnz     loc_92C0
.text:00000000000091B8                 mov     rax, [r14+8]
.text:00000000000091BC                 mov     [rbx+50h], r15
.text:00000000000091C0                 test    rax, rax
.text:00000000000091C3                 jle     loc_926D
.text:00000000000091C9                 mov     rsi, [r14+10h]
.text:00000000000091CD                 mov     r8, [r12]
.text:00000000000091D1                 lea     r9, [rsi+rax*8]
.text:00000000000091D5                 jmp     short loc_9224
.text:00000000000091D5 ; ---------------------------------------------------------------------------
.text:00000000000091D7                 align 20h
.text:00000000000091E0
.text:00000000000091E0 loc_91E0:                               ; CODE XREF: re_acquire_state+145↓j
.text:00000000000091E0                 movzx   ecx, byte ptr [rbx+68h]
.text:00000000000091E4                 movzx   edx, byte ptr [rax+0Ah]
.text:00000000000091E8                 mov     r10d, ecx
.text:00000000000091EB                 shr     dl, 4
.text:00000000000091EE                 and     ecx, 0FFFFFFDFh
.text:00000000000091F1                 shr     r10b, 5
.text:00000000000091F5                 or      edx, r10d
.text:00000000000091F8                 and     edx, 1
.text:00000000000091FB                 shl     edx, 5
.text:00000000000091FE                 or      edx, ecx
.text:0000000000009200                 cmp     edi, 2
.text:0000000000009203                 mov     [rbx+68h], dl
.text:0000000000009206                 jz      loc_9298
.text:000000000000920C                 cmp     edi, 4
.text:000000000000920F                 jnz     loc_92A8
.text:0000000000009215                 or      edx, 40h
.text:0000000000009218                 mov     [rbx+68h], dl
.text:000000000000921B
.text:000000000000921B loc_921B:                               ; CODE XREF: re_acquire_state+14E↓j
.text:000000000000921B                                         ; re_acquire_state+1AE↓j ...
.text:000000000000921B                 add     rsi, 8
.text:000000000000921F                 cmp     r9, rsi
.text:0000000000009222                 jz      short loc_926D
.text:0000000000009224
.text:0000000000009224 loc_9224:                               ; CODE XREF: re_acquire_state+E5↑j
.text:0000000000009224                                         ; re_acquire_state+17B↓j
.text:0000000000009224                 mov     rax, [rsi]
.text:0000000000009227                 shl     rax, 4
.text:000000000000922B                 add     rax, r8
.text:000000000000922E                 movzx   edi, byte ptr [rax+8]
.text:0000000000009232                 cmp     edi, 1
.text:0000000000009235                 jnz     short loc_91E0
.text:0000000000009237                 test    dword ptr [rax+8], 3FF00h
.text:000000000000923E                 jz      short loc_921B
.text:0000000000009240                 movzx   edx, byte ptr [rbx+68h]
.text:0000000000009244                 movzx   eax, byte ptr [rax+0Ah]
.text:0000000000009248                 mov     ecx, edx
.text:000000000000924A                 shr     al, 4
.text:000000000000924D                 and     edx, 0FFFFFFDFh
.text:0000000000009250                 shr     cl, 5
.text:0000000000009253                 or      eax, ecx
.text:0000000000009255                 and     eax, 1
.text:0000000000009258                 shl     eax, 5
.text:000000000000925B                 or      eax, edx
.text:000000000000925D                 mov     [rbx+68h], al
.text:0000000000009260
.text:0000000000009260 loc_9260:                               ; CODE XREF: re_acquire_state+1BB↓j
.text:0000000000009260                                         ; re_acquire_state+1CA↓j
.text:0000000000009260                 add     rsi, 8
.text:0000000000009264                 or      byte ptr [rbx+68h], 80h
.text:0000000000009268                 cmp     r9, rsi
.text:000000000000926B                 jnz     short loc_9224
.text:000000000000926D
.text:000000000000926D loc_926D:                               ; CODE XREF: re_acquire_state+D3↑j
.text:000000000000926D                                         ; re_acquire_state+132↑j
.text:000000000000926D                 mov     rdx, rbp
.text:0000000000009270                 mov     rsi, rbx
.text:0000000000009273                 mov     rdi, r12
.text:0000000000009276                 call    register_state
.text:000000000000927B                 test    eax, eax
.text:000000000000927D                 jnz     short loc_92D4
.text:000000000000927F
.text:000000000000927F loc_927F:                               ; CODE XREF: re_acquire_state+87↑j
.text:000000000000927F                                         ; re_acquire_state+1E2↓j ...
.text:000000000000927F                 add     rsp, 8
.text:0000000000009283                 mov     rax, rbx
.text:0000000000009286                 pop     rbx
.text:0000000000009287                 pop     rbp
.text:0000000000009288                 pop     r12
.text:000000000000928A                 pop     r13
.text:000000000000928C                 pop     r14
.text:000000000000928E                 pop     r15
.text:0000000000009290                 retn
.text:0000000000009290 ; ---------------------------------------------------------------------------
.text:0000000000009291                 align 8
.text:0000000000009298
.text:0000000000009298 loc_9298:                               ; CODE XREF: re_acquire_state+116↑j
.text:0000000000009298                 or      edx, 10h
.text:000000000000929B                 mov     [rbx+68h], dl
.text:000000000000929E                 jmp     loc_921B
.text:000000000000929E ; ---------------------------------------------------------------------------
.text:00000000000092A3                 align 8
.text:00000000000092A8
.text:00000000000092A8 loc_92A8:                               ; CODE XREF: re_acquire_state+11F↑j
.text:00000000000092A8                 cmp     edi, 0Ch
.text:00000000000092AB                 jz      short loc_9260
.text:00000000000092AD                 test    dword ptr [rax+8], 3FF00h
.text:00000000000092B4                 jz      loc_921B
.text:00000000000092BA                 jmp     short loc_9260
.text:00000000000092BA ; ---------------------------------------------------------------------------
.text:00000000000092BC                 align 20h
.text:00000000000092C0
.text:00000000000092C0 loc_92C0:                               ; CODE XREF: re_acquire_state+C2↑j
.text:00000000000092C0                 mov     rdi, rbx        ; ptr
.text:00000000000092C3                 call    _free
.text:00000000000092C8
.text:00000000000092C8 loc_92C8:                               ; CODE XREF: re_acquire_state+AB↑j
.text:00000000000092C8                                         ; re_acquire_state+1EC↓j
.text:00000000000092C8                 mov     dword ptr [r13+0], 0Ch
.text:00000000000092D0                 xor     ebx, ebx
.text:00000000000092D2                 jmp     short loc_927F
.text:00000000000092D4 ; ---------------------------------------------------------------------------
.text:00000000000092D4
.text:00000000000092D4 loc_92D4:                               ; CODE XREF: re_acquire_state+18D↑j
.text:00000000000092D4                 mov     rdi, rbx        ; ptr
.text:00000000000092D7                 call    free_state
.text:00000000000092DC                 jmp     short loc_92C8
.text:00000000000092DC ; ---------------------------------------------------------------------------
.text:00000000000092DE                 align 20h
.text:00000000000092E0
.text:00000000000092E0 loc_92E0:                               ; CODE XREF: re_acquire_state+15↑j
.text:00000000000092E0                 mov     dword ptr [rdi], 0
.text:00000000000092E6                 xor     ebx, ebx
.text:00000000000092E8                 jmp     short loc_927F
.text:00000000000092E8 ; } // starts at 90F0
.text:00000000000092E8 re_acquire_state endp
.text:00000000000092E8
.text:00000000000092E8 ; ---------------------------------------------------------------------------
.text:00000000000092EA                 align 10h
.text:00000000000092F0
.text:00000000000092F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000092F0
.text:00000000000092F0
.text:00000000000092F0 merge_state_array proc near             ; CODE XREF: re_search_internal+167B↓p
.text:00000000000092F0                                         ; update_cur_sifted_state+71B↓p
.text:00000000000092F0
.text:00000000000092F0 var_70          = qword ptr -70h
.text:00000000000092F0 var_5C          = dword ptr -5Ch
.text:00000000000092F0 var_58          = byte ptr -58h
.text:00000000000092F0 ptr             = qword ptr -48h
.text:00000000000092F0 var_40          = qword ptr -40h
.text:00000000000092F0
.text:00000000000092F0 ; __unwind {
.text:00000000000092F0                 push    r15
.text:00000000000092F2                 push    r14
.text:00000000000092F4                 push    r13
.text:00000000000092F6                 push    r12
.text:00000000000092F8                 push    rbp
.text:00000000000092F9                 push    rbx
.text:00000000000092FA                 sub     rsp, 48h
.text:00000000000092FE                 mov     rax, fs:28h
.text:0000000000009307                 mov     [rsp+78h+var_40], rax
.text:000000000000930C                 xor     eax, eax
.text:000000000000930E                 test    rcx, rcx
.text:0000000000009311                 jle     loc_93A6
.text:0000000000009317                 lea     rax, [rsp+78h+var_5C]
.text:000000000000931C                 mov     r14, rdi
.text:000000000000931F                 mov     rbx, rsi
.text:0000000000009322                 mov     r12, rdx
.text:0000000000009325                 mov     rbp, rcx
.text:0000000000009328                 xor     r15d, r15d
.text:000000000000932B                 lea     r13, [rsp+78h+var_58]
.text:0000000000009330                 mov     [rsp+78h+var_70], rax
.text:0000000000009335                 jmp     short loc_938C
.text:0000000000009335 ; ---------------------------------------------------------------------------
.text:0000000000009337                 align 20h
.text:0000000000009340
.text:0000000000009340 loc_9340:                               ; CODE XREF: merge_state_array+A7↓j
.text:0000000000009340                 test    rdx, rdx
.text:0000000000009343                 jz      short loc_9383
.text:0000000000009345                 add     rdx, 8
.text:0000000000009349                 add     rsi, 8
.text:000000000000934D                 mov     rdi, r13
.text:0000000000009350                 call    re_node_set_init_union
.text:0000000000009355                 test    eax, eax
.text:0000000000009357                 mov     [rsp+78h+var_5C], eax
.text:000000000000935B                 jnz     short loc_93A8
.text:000000000000935D                 mov     rdi, [rsp+78h+var_70]
.text:0000000000009362                 mov     rdx, r13
.text:0000000000009365                 mov     rsi, r14
.text:0000000000009368                 call    re_acquire_state
.text:000000000000936D                 mov     rdi, [rsp+78h+ptr] ; ptr
.text:0000000000009372                 mov     [rbx+r15*8], rax
.text:0000000000009376                 call    _free
.text:000000000000937B                 mov     eax, [rsp+78h+var_5C]
.text:000000000000937F                 test    eax, eax
.text:0000000000009381                 jnz     short loc_93A8
.text:0000000000009383
.text:0000000000009383 loc_9383:                               ; CODE XREF: merge_state_array+53↑j
.text:0000000000009383                 add     r15, 1
.text:0000000000009387                 cmp     rbp, r15
.text:000000000000938A                 jz      short loc_93A6
.text:000000000000938C
.text:000000000000938C loc_938C:                               ; CODE XREF: merge_state_array+45↑j
.text:000000000000938C                                         ; merge_state_array+B4↓j
.text:000000000000938C                 mov     rsi, [rbx+r15*8]
.text:0000000000009390                 mov     rdx, [r12+r15*8]
.text:0000000000009394                 test    rsi, rsi
.text:0000000000009397                 jnz     short loc_9340
.text:0000000000009399                 mov     [rbx+r15*8], rdx
.text:000000000000939D                 add     r15, 1
.text:00000000000093A1                 cmp     rbp, r15
.text:00000000000093A4                 jnz     short loc_938C
.text:00000000000093A6
.text:00000000000093A6 loc_93A6:                               ; CODE XREF: merge_state_array+21↑j
.text:00000000000093A6                                         ; merge_state_array+9A↑j
.text:00000000000093A6                 xor     eax, eax
.text:00000000000093A8
.text:00000000000093A8 loc_93A8:                               ; CODE XREF: merge_state_array+6B↑j
.text:00000000000093A8                                         ; merge_state_array+91↑j
.text:00000000000093A8                 mov     rcx, [rsp+78h+var_40]
.text:00000000000093AD                 xor     rcx, fs:28h
.text:00000000000093B6                 jnz     short loc_93C7
.text:00000000000093B8                 add     rsp, 48h
.text:00000000000093BC                 pop     rbx
.text:00000000000093BD                 pop     rbp
.text:00000000000093BE                 pop     r12
.text:00000000000093C0                 pop     r13
.text:00000000000093C2                 pop     r14
.text:00000000000093C4                 pop     r15
.text:00000000000093C6                 retn
.text:00000000000093C7 ; ---------------------------------------------------------------------------
.text:00000000000093C7
.text:00000000000093C7 loc_93C7:                               ; CODE XREF: merge_state_array+C6↑j
.text:00000000000093C7                 call    ___stack_chk_fail
.text:00000000000093C7 ; } // starts at 92F0
.text:00000000000093C7 merge_state_array endp
.text:00000000000093C7
.text:00000000000093C7 ; ---------------------------------------------------------------------------
.text:00000000000093CC                 align 10h
.text:00000000000093D0
.text:00000000000093D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000093D0
.text:00000000000093D0
.text:00000000000093D0 expand_bkref_cache proc near            ; CODE XREF: check_arrival+3A0↓p
.text:00000000000093D0                                         ; check_arrival+64E↓p
.text:00000000000093D0
.text:00000000000093D0 var_A8          = qword ptr -0A8h
.text:00000000000093D0 var_A0          = qword ptr -0A0h
.text:00000000000093D0 var_98          = qword ptr -98h
.text:00000000000093D0 var_90          = qword ptr -90h
.text:00000000000093D0 var_88          = qword ptr -88h
.text:00000000000093D0 var_7C          = dword ptr -7Ch
.text:00000000000093D0 var_78          = qword ptr -78h
.text:00000000000093D0 var_70          = qword ptr -70h
.text:00000000000093D0 var_5C          = dword ptr -5Ch
.text:00000000000093D0 var_58          = qword ptr -58h
.text:00000000000093D0 var_50          = qword ptr -50h
.text:00000000000093D0 ptr             = qword ptr -48h
.text:00000000000093D0 var_40          = qword ptr -40h
.text:00000000000093D0
.text:00000000000093D0 ; __unwind {
.text:00000000000093D0                 push    r15
.text:00000000000093D2                 push    r14
.text:00000000000093D4                 push    r13
.text:00000000000093D6                 push    r12
.text:00000000000093D8                 mov     r12, rdx
.text:00000000000093DB                 push    rbp
.text:00000000000093DC                 push    rbx
.text:00000000000093DD                 mov     rbx, rdi
.text:00000000000093E0                 mov     rbp, rsi
.text:00000000000093E3                 xor     esi, esi
.text:00000000000093E5                 sub     rsp, 78h
.text:00000000000093E9                 mov     rdi, [rdi+0C8h]
.text:00000000000093F0                 mov     rax, fs:28h
.text:00000000000093F9                 mov     [rsp+0A8h+var_40], rax
.text:00000000000093FE                 xor     eax, eax
.text:0000000000009400                 mov     [rsp+0A8h+var_88], rcx
.text:0000000000009405                 mov     [rsp+0A8h+var_7C], r8d
.text:000000000000940A                 mov     rdx, rdi
.text:000000000000940D
.text:000000000000940D loc_940D:                               ; CODE XREF: expand_bkref_cache+F7↓j
.text:000000000000940D                 cmp     rsi, rdx
.text:0000000000009410                 jge     short loc_9467
.text:0000000000009412                 lea     rax, [rsi+rdx]
.text:0000000000009416                 mov     r8, [rbx+0D8h]
.text:000000000000941D                 mov     rcx, rax
.text:0000000000009420                 shr     rcx, 3Fh
.text:0000000000009424                 add     rcx, rax
.text:0000000000009427                 sar     rcx, 1
.text:000000000000942A                 lea     rax, [rcx+rcx*4]
.text:000000000000942E                 cmp     r12, [r8+rax*8+8]
.text:0000000000009433                 jle     short loc_9462
.text:0000000000009435                 jmp     loc_94B8
.text:0000000000009435 ; ---------------------------------------------------------------------------
.text:000000000000943A                 align 20h
.text:0000000000009440
.text:0000000000009440 loc_9440:                               ; CODE XREF: expand_bkref_cache+95↓j
.text:0000000000009440                 lea     rdx, [rsi+rcx]
.text:0000000000009444                 mov     rax, rdx
.text:0000000000009447                 shr     rax, 3Fh
.text:000000000000944B                 add     rax, rdx
.text:000000000000944E                 sar     rax, 1
.text:0000000000009451                 lea     rdx, [rax+rax*4]
.text:0000000000009455                 mov     r9, rax
.text:0000000000009458                 cmp     r12, [r8+rdx*8+8]
.text:000000000000945D                 jg      short loc_94C0
.text:000000000000945F                 mov     rcx, rax
.text:0000000000009462
.text:0000000000009462 loc_9462:                               ; CODE XREF: expand_bkref_cache+63↑j
.text:0000000000009462                 cmp     rsi, rcx
.text:0000000000009465                 jl      short loc_9440
.text:0000000000009467
.text:0000000000009467 loc_9467:                               ; CODE XREF: expand_bkref_cache+40↑j
.text:0000000000009467                 cmp     rdi, rsi
.text:000000000000946A                 jle     short loc_948D
.text:000000000000946C                 mov     rcx, [rbx+0D8h]
.text:0000000000009473                 lea     rax, [rsi+rsi*4]
.text:0000000000009477                 shl     rax, 3
.text:000000000000947B                 cmp     [rcx+rax+8], r12
.text:0000000000009480                 mov     [rsp+0A8h+var_78], rax
.text:0000000000009485                 jnz     short loc_948D
.text:0000000000009487                 cmp     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000948B                 jnz     short loc_94D0
.text:000000000000948D
.text:000000000000948D loc_948D:                               ; CODE XREF: expand_bkref_cache+9A↑j
.text:000000000000948D                                         ; expand_bkref_cache+B5↑j ...
.text:000000000000948D                 xor     eax, eax
.text:000000000000948F
.text:000000000000948F loc_948F:                               ; CODE XREF: expand_bkref_cache+341↓j
.text:000000000000948F                                         ; expand_bkref_cache+356↓j ...
.text:000000000000948F                 mov     rbx, [rsp+0A8h+var_40]
.text:0000000000009494                 xor     rbx, fs:28h
.text:000000000000949D                 jnz     loc_9769
.text:00000000000094A3                 add     rsp, 78h
.text:00000000000094A7                 pop     rbx
.text:00000000000094A8                 pop     rbp
.text:00000000000094A9                 pop     r12
.text:00000000000094AB                 pop     r13
.text:00000000000094AD                 pop     r14
.text:00000000000094AF                 pop     r15
.text:00000000000094B1                 retn
.text:00000000000094B1 ; ---------------------------------------------------------------------------
.text:00000000000094B2                 align 8
.text:00000000000094B8
.text:00000000000094B8 loc_94B8:                               ; CODE XREF: expand_bkref_cache+65↑j
.text:00000000000094B8                 mov     r9, rcx
.text:00000000000094BB                 mov     rcx, rdx
.text:00000000000094BE                 xchg    ax, ax
.text:00000000000094C0
.text:00000000000094C0 loc_94C0:                               ; CODE XREF: expand_bkref_cache+8D↑j
.text:00000000000094C0                 lea     rsi, [r9+1]
.text:00000000000094C4                 mov     rdx, rcx
.text:00000000000094C7                 jmp     loc_940D
.text:00000000000094C7 ; ---------------------------------------------------------------------------
.text:00000000000094CC                 align 10h
.text:00000000000094D0
.text:00000000000094D0 loc_94D0:                               ; CODE XREF: expand_bkref_cache+BB↑j
.text:00000000000094D0                 lea     rax, [rbp+10h]
.text:00000000000094D4                 mov     r13, [rbx+98h]
.text:00000000000094DB                 mov     [rsp+0A8h+var_A8], rax
.text:00000000000094DF                 lea     rax, [rsp+0A8h+var_5C]
.text:00000000000094E4                 mov     [rsp+0A8h+var_70], rax
.text:00000000000094E9                 lea     rax, [rsp+0A8h+var_58]
.text:00000000000094EE                 mov     [rsp+0A8h+var_98], rax
.text:00000000000094F3
.text:00000000000094F3 loc_94F3:                               ; CODE XREF: expand_bkref_cache+2E1↓j
.text:00000000000094F3                 mov     rax, [rsp+0A8h+var_78]
.text:00000000000094F8                 lea     r15, [rcx+rax]
.text:00000000000094FC                 jmp     loc_95D8
.text:00000000000094FC ; ---------------------------------------------------------------------------
.text:0000000000009501                 align 8
.text:0000000000009508
.text:0000000000009508 loc_9508:                               ; CODE XREF: expand_bkref_cache+234↓j
.text:0000000000009508                 mov     rax, [r13+18h]
.text:000000000000950C                 mov     rcx, [rax+r10*8]
.text:0000000000009510                 mov     r10, [rbx+0B8h]
.text:0000000000009517                 lea     rax, ds:0[r14*8]
.text:000000000000951F                 mov     [rsp+0A8h+var_90], rax
.text:0000000000009524                 add     r10, rax
.text:0000000000009527                 mov     [rsp+0A8h+var_A0], rcx
.text:000000000000952C                 mov     r9, [r10]
.text:000000000000952F                 test    r9, r9
.text:0000000000009532                 jz      loc_96C0
.text:0000000000009538                 mov     rdi, [r9+10h]
.text:000000000000953C                 lea     rsi, [r9+18h]
.text:0000000000009540                 mov     rdx, rcx
.text:0000000000009543                 call    re_node_set_contains_isra_3
.text:0000000000009548                 test    rax, rax
.text:000000000000954B                 jnz     short loc_95C9
.text:000000000000954D                 mov     rdi, [rsp+0A8h+var_98]
.text:0000000000009552                 lea     rsi, [r9+8]
.text:0000000000009556                 call    re_node_set_init_copy
.text:000000000000955B                 mov     rsi, [rsp+0A8h+var_A0]
.text:0000000000009560                 mov     rdi, [rsp+0A8h+var_98]
.text:0000000000009565                 mov     [rsp+0A8h+var_5C], eax
.text:0000000000009569                 call    re_node_set_insert
.text:000000000000956E                 mov     edx, [rsp+0A8h+var_5C]
.text:0000000000009572                 test    edx, edx
.text:0000000000009574                 jnz     loc_9716
.text:000000000000957A                 cmp     al, 1
.text:000000000000957C                 jnz     loc_9716
.text:0000000000009582                 mov     r10, [rsp+0A8h+var_90]
.text:0000000000009587                 add     r10, [rbx+0B8h]
.text:000000000000958E
.text:000000000000958E loc_958E:                               ; CODE XREF: expand_bkref_cache+330↓j
.text:000000000000958E                 mov     rdx, [rsp+0A8h+var_98]
.text:0000000000009593                 mov     rdi, [rsp+0A8h+var_70]
.text:0000000000009598                 mov     rsi, r13
.text:000000000000959B                 mov     [rsp+0A8h+var_A0], r10
.text:00000000000095A0                 call    re_acquire_state
.text:00000000000095A5                 mov     r10, [rsp+0A8h+var_A0]
.text:00000000000095AA                 mov     rdi, [rsp+0A8h+ptr] ; ptr
.text:00000000000095AF                 mov     [r10], rax
.text:00000000000095B2                 call    _free
.text:00000000000095B7                 mov     rax, [rbx+0B8h]
.text:00000000000095BE                 cmp     qword ptr [rax+r14*8], 0
.text:00000000000095C3                 jz      loc_9705
.text:00000000000095C9
.text:00000000000095C9 loc_95C9:                               ; CODE XREF: expand_bkref_cache+17B↑j
.text:00000000000095C9                                         ; expand_bkref_cache+221↓j ...
.text:00000000000095C9                 add     r15, 28h ; '('
.text:00000000000095CD                 cmp     byte ptr [r15-8], 0
.text:00000000000095D2                 jz      loc_948D
.text:00000000000095D8
.text:00000000000095D8 loc_95D8:                               ; CODE XREF: expand_bkref_cache+12C↑j
.text:00000000000095D8                 mov     r10, [r15]
.text:00000000000095DB                 mov     r9, [rbp+8]
.text:00000000000095DF                 mov     rsi, [rsp+0A8h+var_A8]
.text:00000000000095E3                 mov     rdx, r10
.text:00000000000095E6                 mov     rdi, r9
.text:00000000000095E9                 call    re_node_set_contains_isra_3
.text:00000000000095EE                 test    rax, rax
.text:00000000000095F1                 jz      short loc_95C9
.text:00000000000095F3                 mov     r8, [r15+18h]
.text:00000000000095F7                 add     r8, r12
.text:00000000000095FA                 mov     r14, r8
.text:00000000000095FD                 sub     r14, [r15+10h]
.text:0000000000009601                 cmp     r12, r14
.text:0000000000009604                 jnz     loc_9508
.text:000000000000960A                 mov     rcx, [r13+28h]
.text:000000000000960E                 lea     rax, [r10+r10*2]
.text:0000000000009612                 mov     rsi, [rsp+0A8h+var_A8]
.text:0000000000009616                 mov     rdi, r9
.text:0000000000009619                 lea     rax, [rcx+rax*8]
.text:000000000000961D                 mov     rax, [rax+10h]
.text:0000000000009621                 mov     r14, [rax]
.text:0000000000009624                 mov     rdx, r14
.text:0000000000009627                 call    re_node_set_contains_isra_3
.text:000000000000962C                 test    rax, rax
.text:000000000000962F                 jnz     short loc_95C9
.text:0000000000009631                 mov     edi, 8          ; size
.text:0000000000009636                 mov     [rsp+0A8h+var_58], 1
.text:000000000000963F                 mov     [rsp+0A8h+var_50], 1
.text:0000000000009648                 call    _malloc
.text:000000000000964D                 test    rax, rax
.text:0000000000009650                 mov     [rsp+0A8h+ptr], rax
.text:0000000000009655                 jz      loc_974D
.text:000000000000965B                 mov     [rax], r14
.text:000000000000965E                 xor     eax, eax
.text:0000000000009660
.text:0000000000009660 loc_9660:                               ; CODE XREF: expand_bkref_cache+394↓j
.text:0000000000009660                 mov     r15, [rsp+0A8h+var_98]
.text:0000000000009665                 mov     rdx, [rsp+0A8h+var_88]
.text:000000000000966A                 mov     rdi, r13
.text:000000000000966D                 mov     ecx, [rsp+0A8h+var_7C]
.text:0000000000009671                 mov     [rsp+0A8h+var_5C], eax
.text:0000000000009675                 mov     rsi, r15
.text:0000000000009678                 call    check_arrival_expand_ecl
.text:000000000000967D                 mov     rsi, r15
.text:0000000000009680                 mov     rdi, rbp
.text:0000000000009683                 mov     r14d, eax
.text:0000000000009686                 call    re_node_set_merge
.text:000000000000968B                 mov     rdi, [rsp+0A8h+ptr] ; ptr
.text:0000000000009690                 mov     r15d, eax
.text:0000000000009693                 call    _free
.text:0000000000009698                 mov     eax, [rsp+0A8h+var_5C]
.text:000000000000969C                 mov     edx, r14d
.text:000000000000969F                 or      edx, r15d
.text:00000000000096A2                 or      edx, eax
.text:00000000000096A4                 jnz     loc_9736
.text:00000000000096AA                 mov     rcx, [rbx+0D8h]
.text:00000000000096B1                 jmp     loc_94F3
.text:00000000000096B1 ; ---------------------------------------------------------------------------
.text:00000000000096B6                 align 20h
.text:00000000000096C0
.text:00000000000096C0 loc_96C0:                               ; CODE XREF: expand_bkref_cache+162↑j
.text:00000000000096C0                 mov     edi, 8          ; size
.text:00000000000096C5                 mov     [rsp+0A8h+var_90], r10
.text:00000000000096CA                 mov     [rsp+0A8h+var_58], 1
.text:00000000000096D3                 mov     [rsp+0A8h+var_50], 1
.text:00000000000096DC                 call    _malloc
.text:00000000000096E1                 test    rax, rax
.text:00000000000096E4                 mov     [rsp+0A8h+ptr], rax
.text:00000000000096E9                 jz      short loc_972C
.text:00000000000096EB                 mov     rdi, [rsp+0A8h+var_A0]
.text:00000000000096F0                 mov     [rsp+0A8h+var_5C], 0
.text:00000000000096F8                 mov     r10, [rsp+0A8h+var_90]
.text:00000000000096FD                 mov     [rax], rdi
.text:0000000000009700                 jmp     loc_958E
.text:0000000000009705 ; ---------------------------------------------------------------------------
.text:0000000000009705
.text:0000000000009705 loc_9705:                               ; CODE XREF: expand_bkref_cache+1F3↑j
.text:0000000000009705                 mov     eax, [rsp+0A8h+var_5C]
.text:0000000000009709                 test    eax, eax
.text:000000000000970B                 jz      loc_95C9
.text:0000000000009711                 jmp     loc_948F
.text:0000000000009716 ; ---------------------------------------------------------------------------
.text:0000000000009716
.text:0000000000009716 loc_9716:                               ; CODE XREF: expand_bkref_cache+1A4↑j
.text:0000000000009716                                         ; expand_bkref_cache+1AC↑j
.text:0000000000009716                 mov     rdi, [rsp+0A8h+ptr] ; ptr
.text:000000000000971B                 call    _free
.text:0000000000009720                 mov     eax, [rsp+0A8h+var_5C]
.text:0000000000009724                 test    eax, eax
.text:0000000000009726                 jnz     loc_948F
.text:000000000000972C
.text:000000000000972C loc_972C:                               ; CODE XREF: expand_bkref_cache+319↑j
.text:000000000000972C                 mov     eax, 0Ch
.text:0000000000009731                 jmp     loc_948F
.text:0000000000009736 ; ---------------------------------------------------------------------------
.text:0000000000009736
.text:0000000000009736 loc_9736:                               ; CODE XREF: expand_bkref_cache+2D4↑j
.text:0000000000009736                 test    eax, eax
.text:0000000000009738                 jnz     loc_948F
.text:000000000000973E                 test    r14d, r14d
.text:0000000000009741                 mov     eax, r14d
.text:0000000000009744                 cmovz   eax, r15d
.text:0000000000009748                 jmp     loc_948F
.text:000000000000974D ; ---------------------------------------------------------------------------
.text:000000000000974D
.text:000000000000974D loc_974D:                               ; CODE XREF: expand_bkref_cache+285↑j
.text:000000000000974D                 mov     [rsp+0A8h+var_50], 0
.text:0000000000009756                 mov     [rsp+0A8h+var_58], 0
.text:000000000000975F                 mov     eax, 0Ch
.text:0000000000009764                 jmp     loc_9660
.text:0000000000009769 ; ---------------------------------------------------------------------------
.text:0000000000009769
.text:0000000000009769 loc_9769:                               ; CODE XREF: expand_bkref_cache+CD↑j
.text:0000000000009769                 call    ___stack_chk_fail
.text:0000000000009769 ; } // starts at 93D0
.text:0000000000009769 expand_bkref_cache endp
.text:0000000000009769
.text:0000000000009769 ; ---------------------------------------------------------------------------
.text:000000000000976E                 align 10h
.text:0000000000009770
.text:0000000000009770 ; =============== S U B R O U T I N E =======================================
.text:0000000000009770
.text:0000000000009770
.text:0000000000009770 check_subexp_matching_top_isra_18 proc near
.text:0000000000009770                                         ; CODE XREF: transit_state_bkref_isra_34+808↓p
.text:0000000000009770                                         ; merge_state_with_log+1A1↓p ...
.text:0000000000009770
.text:0000000000009770 var_50          = qword ptr -50h
.text:0000000000009770 var_48          = qword ptr -48h
.text:0000000000009770 var_40          = qword ptr -40h
.text:0000000000009770
.text:0000000000009770 ; __unwind {
.text:0000000000009770                 push    r15
.text:0000000000009772                 push    r14
.text:0000000000009774                 push    r13
.text:0000000000009776                 push    r12
.text:0000000000009778                 push    rbp
.text:0000000000009779                 push    rbx
.text:000000000000977A                 sub     rsp, 28h
.text:000000000000977E                 cmp     qword ptr [rsi], 0
.text:0000000000009782                 mov     r13, [rdi+98h]
.text:0000000000009789                 jle     loc_9850
.text:000000000000978F                 mov     r14, rdx
.text:0000000000009792                 mov     r12, rsi
.text:0000000000009795                 mov     r15, rdi
.text:0000000000009798                 xor     ebx, ebx
.text:000000000000979A                 jmp     short loc_97AE
.text:000000000000979A ; ---------------------------------------------------------------------------
.text:000000000000979C                 align 20h
.text:00000000000097A0
.text:00000000000097A0 loc_97A0:                               ; CODE XREF: check_subexp_matching_top_isra_18+54↓j
.text:00000000000097A0                                         ; check_subexp_matching_top_isra_18+5D↓j ...
.text:00000000000097A0                 add     rbx, 1
.text:00000000000097A4                 cmp     rbx, [r12]
.text:00000000000097A8                 jge     loc_9850
.text:00000000000097AE
.text:00000000000097AE loc_97AE:                               ; CODE XREF: check_subexp_matching_top_isra_18+2A↑j
.text:00000000000097AE                                         ; check_subexp_matching_top_isra_18+D3↓j
.text:00000000000097AE                 mov     rax, [r14]
.text:00000000000097B1                 mov     rbp, [rax+rbx*8]
.text:00000000000097B5                 mov     rax, rbp
.text:00000000000097B8                 shl     rax, 4
.text:00000000000097BC                 add     rax, [r13+0]
.text:00000000000097C0                 cmp     byte ptr [rax+8], 8
.text:00000000000097C4                 jnz     short loc_97A0
.text:00000000000097C6                 mov     rax, [rax]
.text:00000000000097C9                 cmp     rax, 3Fh ; '?'
.text:00000000000097CD                 jg      short loc_97A0
.text:00000000000097CF                 mov     rsi, [r13+0A0h]
.text:00000000000097D6                 bt      rsi, rax
.text:00000000000097DA                 jnb     short loc_97A0
.text:00000000000097DC                 mov     r8, [r15+0E8h]
.text:00000000000097E3                 cmp     r8, [r15+0F0h]
.text:00000000000097EA                 mov     r9, [r15+0F8h]
.text:00000000000097F1                 jz      short loc_9868
.text:00000000000097F3
.text:00000000000097F3 loc_97F3:                               ; CODE XREF: check_subexp_matching_top_isra_18+13C↓j
.text:00000000000097F3                 mov     esi, 30h ; '0'  ; size
.text:00000000000097F8                 mov     edi, 1          ; nmemb
.text:00000000000097FD                 mov     [rsp+58h+var_48], r9
.text:0000000000009802                 mov     [rsp+58h+var_50], r8
.text:0000000000009807                 mov     [rsp+58h+var_40], rcx
.text:000000000000980C                 call    _calloc
.text:0000000000009811                 mov     r8, [rsp+58h+var_50]
.text:0000000000009816                 mov     r9, [rsp+58h+var_48]
.text:000000000000981B                 test    rax, rax
.text:000000000000981E                 mov     [r9+r8*8], rax
.text:0000000000009822                 jz      short loc_9861
.text:0000000000009824                 add     r8, 1
.text:0000000000009828                 add     rbx, 1
.text:000000000000982C                 mov     rcx, [rsp+58h+var_40]
.text:0000000000009831                 mov     [r15+0E8h], r8
.text:0000000000009838                 cmp     rbx, [r12]
.text:000000000000983C                 mov     [rax+8], rbp
.text:0000000000009840                 mov     [rax], rcx
.text:0000000000009843                 jl      loc_97AE
.text:0000000000009849                 nop     dword ptr [rax+00000000h]
.text:0000000000009850
.text:0000000000009850 loc_9850:                               ; CODE XREF: check_subexp_matching_top_isra_18+19↑j
.text:0000000000009850                                         ; check_subexp_matching_top_isra_18+38↑j
.text:0000000000009850                 xor     eax, eax
.text:0000000000009852
.text:0000000000009852 loc_9852:                               ; CODE XREF: check_subexp_matching_top_isra_18+F6↓j
.text:0000000000009852                 add     rsp, 28h
.text:0000000000009856                 pop     rbx
.text:0000000000009857                 pop     rbp
.text:0000000000009858                 pop     r12
.text:000000000000985A                 pop     r13
.text:000000000000985C                 pop     r14
.text:000000000000985E                 pop     r15
.text:0000000000009860                 retn
.text:0000000000009861 ; ---------------------------------------------------------------------------
.text:0000000000009861
.text:0000000000009861 loc_9861:                               ; CODE XREF: check_subexp_matching_top_isra_18+B2↑j
.text:0000000000009861                                         ; check_subexp_matching_top_isra_18+120↓j
.text:0000000000009861                 mov     eax, 0Ch
.text:0000000000009866                 jmp     short loc_9852
.text:0000000000009868 ; ---------------------------------------------------------------------------
.text:0000000000009868
.text:0000000000009868 loc_9868:                               ; CODE XREF: check_subexp_matching_top_isra_18+81↑j
.text:0000000000009868                 lea     rax, [r8+r8]
.text:000000000000986C                 mov     rsi, r8
.text:000000000000986F                 mov     rdi, r9         ; ptr
.text:0000000000009872                 shl     rsi, 4          ; size
.text:0000000000009876                 mov     [rsp+58h+var_50], rcx
.text:000000000000987B                 mov     [rsp+58h+var_48], rax
.text:0000000000009880                 call    _realloc
.text:0000000000009885                 test    rax, rax
.text:0000000000009888                 mov     r9, rax
.text:000000000000988B                 mov     rcx, [rsp+58h+var_50]
.text:0000000000009890                 jz      short loc_9861
.text:0000000000009892                 mov     [r15+0F8h], rax
.text:0000000000009899                 mov     rax, [rsp+58h+var_48]
.text:000000000000989E                 mov     r8, [r15+0E8h]
.text:00000000000098A5                 mov     [r15+0F0h], rax
.text:00000000000098AC                 jmp     loc_97F3
.text:00000000000098AC ; } // starts at 9770
.text:00000000000098AC check_subexp_matching_top_isra_18 endp
.text:00000000000098AC
.text:00000000000098AC ; ---------------------------------------------------------------------------
.text:00000000000098B1                 align 20h
.text:00000000000098C0
.text:00000000000098C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000098C0
.text:00000000000098C0
.text:00000000000098C0 re_string_context_at proc near          ; CODE XREF: check_node_accept+6D↓p
.text:00000000000098C0                                         ; check_halt_state_context_isra_20+16↓p ...
.text:00000000000098C0 ; __unwind {
.text:00000000000098C0                 push    rbp
.text:00000000000098C1                 push    rbx
.text:00000000000098C2                 mov     rbp, rdi
.text:00000000000098C5                 sub     rsp, 8
.text:00000000000098C9                 test    rsi, rsi
.text:00000000000098CC                 js      short loc_9920
.text:00000000000098CE                 cmp     [rdi+58h], rsi
.text:00000000000098D2                 jz      loc_9978
.text:00000000000098D8                 cmp     dword ptr [rdi+90h], 1
.text:00000000000098DF                 jle     short loc_9930
.text:00000000000098E1                 mov     rax, [rdi+10h]
.text:00000000000098E5                 jmp     short loc_98FA
.text:00000000000098E5 ; ---------------------------------------------------------------------------
.text:00000000000098E7                 align 10h
.text:00000000000098F0
.text:00000000000098F0 loc_98F0:                               ; CODE XREF: re_string_context_at+40↓j
.text:00000000000098F0                 sub     rsi, 1
.text:00000000000098F4                 cmp     rsi, 0FFFFFFFFFFFFFFFFh
.text:00000000000098F8                 jz      short loc_9920
.text:00000000000098FA
.text:00000000000098FA loc_98FA:                               ; CODE XREF: re_string_context_at+25↑j
.text:00000000000098FA                 mov     ebx, [rax+rsi*4]
.text:00000000000098FD                 cmp     ebx, 0FFFFFFFFh
.text:0000000000009900                 jz      short loc_98F0
.text:0000000000009902                 cmp     byte ptr [rbp+8Eh], 0
.text:0000000000009909                 jnz     short loc_9988
.text:000000000000990B
.text:000000000000990B loc_990B:                               ; CODE XREF: re_string_context_at+D6↓j
.text:000000000000990B                 xor     eax, eax
.text:000000000000990D                 cmp     ebx, 0Ah
.text:0000000000009910                 jz      short loc_995C
.text:0000000000009912
.text:0000000000009912 loc_9912:                               ; CODE XREF: re_string_context_at+93↓j
.text:0000000000009912                                         ; re_string_context_at+9A↓j ...
.text:0000000000009912                 add     rsp, 8
.text:0000000000009916                 pop     rbx
.text:0000000000009917                 pop     rbp
.text:0000000000009918                 retn
.text:0000000000009918 ; ---------------------------------------------------------------------------
.text:0000000000009919                 align 20h
.text:0000000000009920
.text:0000000000009920 loc_9920:                               ; CODE XREF: re_string_context_at+C↑j
.text:0000000000009920                                         ; re_string_context_at+38↑j
.text:0000000000009920                 mov     eax, [rbp+70h]
.text:0000000000009923                 add     rsp, 8
.text:0000000000009927                 pop     rbx
.text:0000000000009928                 pop     rbp
.text:0000000000009929                 retn
.text:0000000000009929 ; ---------------------------------------------------------------------------
.text:000000000000992A                 align 10h
.text:0000000000009930
.text:0000000000009930 loc_9930:                               ; CODE XREF: re_string_context_at+1F↑j
.text:0000000000009930                 mov     rax, [rdi+8]
.text:0000000000009934                 mov     rcx, [rdi+80h]
.text:000000000000993B                 movzx   eax, byte ptr [rax+rsi]
.text:000000000000993F                 mov     rdx, rax
.text:0000000000009942                 sar     rax, 6
.text:0000000000009946                 mov     rcx, [rcx+rax*8]
.text:000000000000994A                 mov     eax, 1
.text:000000000000994F                 bt      rcx, rdx
.text:0000000000009953                 jb      short loc_9912
.text:0000000000009955                 xor     eax, eax
.text:0000000000009957                 cmp     dl, 0Ah
.text:000000000000995A                 jnz     short loc_9912
.text:000000000000995C
.text:000000000000995C loc_995C:                               ; CODE XREF: re_string_context_at+50↑j
.text:000000000000995C                 xor     eax, eax
.text:000000000000995E                 cmp     byte ptr [rbp+8Dh], 0
.text:0000000000009965                 setnz   al
.text:0000000000009968                 add     rsp, 8
.text:000000000000996C                 add     eax, eax
.text:000000000000996E                 pop     rbx
.text:000000000000996F                 pop     rbp
.text:0000000000009970                 retn
.text:0000000000009970 ; ---------------------------------------------------------------------------
.text:0000000000009971                 align 8
.text:0000000000009978
.text:0000000000009978 loc_9978:                               ; CODE XREF: re_string_context_at+12↑j
.text:0000000000009978                 and     edx, 2
.text:000000000000997B                 cmp     edx, 1
.text:000000000000997E                 sbb     eax, eax
.text:0000000000009980                 and     eax, 2
.text:0000000000009983                 add     eax, 8
.text:0000000000009986                 jmp     short loc_9912
.text:0000000000009988 ; ---------------------------------------------------------------------------
.text:0000000000009988
.text:0000000000009988 loc_9988:                               ; CODE XREF: re_string_context_at+49↑j
.text:0000000000009988                 mov     edi, ebx        ; wc
.text:000000000000998A                 call    _iswalnum
.text:000000000000998F                 test    eax, eax
.text:0000000000009991                 jnz     short loc_999C
.text:0000000000009993                 cmp     ebx, 5Fh ; '_'
.text:0000000000009996                 jnz     loc_990B
.text:000000000000999C
.text:000000000000999C loc_999C:                               ; CODE XREF: re_string_context_at+D1↑j
.text:000000000000999C                 mov     eax, 1
.text:00000000000099A1                 jmp     loc_9912
.text:00000000000099A1 ; } // starts at 98C0
.text:00000000000099A1 re_string_context_at endp
.text:00000000000099A1
.text:00000000000099A1 ; ---------------------------------------------------------------------------
.text:00000000000099A6                 align 10h
.text:00000000000099B0
.text:00000000000099B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000099B0
.text:00000000000099B0
.text:00000000000099B0 check_node_accept proc near             ; CODE XREF: check_arrival+1EF↓p
.text:00000000000099B0                                         ; set_regs+17A↓p ...
.text:00000000000099B0 ; __unwind {
.text:00000000000099B0                 mov     rax, [rdi+8]
.text:00000000000099B4                 movzx   ecx, byte ptr [rax+rdx]
.text:00000000000099B8                 movzx   eax, byte ptr [rsi+8]
.text:00000000000099BC                 cmp     al, 3
.text:00000000000099BE                 jz      loc_9A78
.text:00000000000099C4                 jbe     loc_9A60
.text:00000000000099CA                 cmp     al, 5
.text:00000000000099CC                 jz      short loc_99E0
.text:00000000000099CE                 cmp     al, 7
.text:00000000000099D0                 jnz     loc_9A70
.text:00000000000099D6                 xor     eax, eax
.text:00000000000099D8                 test    cl, cl
.text:00000000000099DA                 js      locret_9A6A
.text:00000000000099E0
.text:00000000000099E0 loc_99E0:                               ; CODE XREF: check_node_accept+1C↑j
.text:00000000000099E0                 cmp     cl, 0Ah
.text:00000000000099E3                 jz      loc_9AA8
.text:00000000000099E9                 test    cl, cl
.text:00000000000099EB                 jnz     short loc_9A00
.text:00000000000099ED                 mov     rcx, [rdi+98h]
.text:00000000000099F4                 xor     eax, eax
.text:00000000000099F6                 test    byte ptr [rcx+0D8h], 80h
.text:00000000000099FD                 jnz     short locret_9A6A
.text:00000000000099FF                 nop
.text:0000000000009A00
.text:0000000000009A00 loc_9A00:                               ; CODE XREF: check_node_accept+3B↑j
.text:0000000000009A00                                         ; check_node_accept+B8↓j ...
.text:0000000000009A00                 push    rbx
.text:0000000000009A01                 mov     ebx, [rsi+8]
.text:0000000000009A04                 mov     eax, 1
.text:0000000000009A09                 test    ebx, 3FF00h
.text:0000000000009A0F                 jz      short loc_9A5C
.text:0000000000009A11                 mov     rsi, rdx
.text:0000000000009A14                 mov     edx, [rdi+0A0h]
.text:0000000000009A1A                 shr     ebx, 8
.text:0000000000009A1D                 call    re_string_context_at
.text:0000000000009A22                 mov     ecx, ebx
.text:0000000000009A24                 mov     edx, eax
.text:0000000000009A26                 and     cx, 3FFh
.text:0000000000009A2B                 test    bl, 4
.text:0000000000009A2E                 jz      short loc_9A98
.text:0000000000009A30                 xor     eax, eax
.text:0000000000009A32                 test    dl, 1
.text:0000000000009A35                 jz      short loc_9A5C
.text:0000000000009A37                 and     ebx, 8
.text:0000000000009A3A                 jnz     short loc_9A5C
.text:0000000000009A3C
.text:0000000000009A3C loc_9A3C:                               ; CODE XREF: check_node_accept+EB↓j
.text:0000000000009A3C                                         ; check_node_accept+EF↓j
.text:0000000000009A3C                 test    cl, 20h
.text:0000000000009A3F                 jz      short loc_9A48
.text:0000000000009A41                 xor     eax, eax
.text:0000000000009A43                 test    dl, 2
.text:0000000000009A46                 jz      short loc_9A5C
.text:0000000000009A48
.text:0000000000009A48 loc_9A48:                               ; CODE XREF: check_node_accept+8F↑j
.text:0000000000009A48                 shr     edx, 3
.text:0000000000009A4B                 mov     eax, 1
.text:0000000000009A50                 and     edx, 1
.text:0000000000009A53                 and     ecx, 80h
.text:0000000000009A59                 cmovnz  eax, edx
.text:0000000000009A5C
.text:0000000000009A5C loc_9A5C:                               ; CODE XREF: check_node_accept+5F↑j
.text:0000000000009A5C                                         ; check_node_accept+85↑j ...
.text:0000000000009A5C                 pop     rbx
.text:0000000000009A5D                 retn
.text:0000000000009A5D ; ---------------------------------------------------------------------------
.text:0000000000009A5E                 align 20h
.text:0000000000009A60
.text:0000000000009A60 loc_9A60:                               ; CODE XREF: check_node_accept+14↑j
.text:0000000000009A60                 cmp     al, 1
.text:0000000000009A62                 jnz     short loc_9A70
.text:0000000000009A64                 xor     eax, eax
.text:0000000000009A66                 cmp     [rsi], cl
.text:0000000000009A68                 jz      short loc_9A00
.text:0000000000009A6A
.text:0000000000009A6A locret_9A6A:                            ; CODE XREF: check_node_accept+2A↑j
.text:0000000000009A6A                                         ; check_node_accept+4D↑j
.text:0000000000009A6A                 rep retn
.text:0000000000009A6A ; ---------------------------------------------------------------------------
.text:0000000000009A6C                 align 10h
.text:0000000000009A70
.text:0000000000009A70 loc_9A70:                               ; CODE XREF: check_node_accept+20↑j
.text:0000000000009A70                                         ; check_node_accept+B2↑j
.text:0000000000009A70                 xor     eax, eax
.text:0000000000009A72                 retn
.text:0000000000009A72 ; ---------------------------------------------------------------------------
.text:0000000000009A73                 align 8
.text:0000000000009A78
.text:0000000000009A78 loc_9A78:                               ; CODE XREF: check_node_accept+E↑j
.text:0000000000009A78                 mov     r8, [rsi]
.text:0000000000009A7B                 movzx   eax, cl
.text:0000000000009A7E                 sar     rax, 6
.text:0000000000009A82                 mov     r8, [r8+rax*8]
.text:0000000000009A86                 xor     eax, eax
.text:0000000000009A88                 bt      r8, rcx
.text:0000000000009A8C                 jb      loc_9A00
.text:0000000000009A92                 rep retn
.text:0000000000009A92 ; ---------------------------------------------------------------------------
.text:0000000000009A94                 align 8
.text:0000000000009A98
.text:0000000000009A98 loc_9A98:                               ; CODE XREF: check_node_accept+7E↑j
.text:0000000000009A98                 and     ebx, 8
.text:0000000000009A9B                 jz      short loc_9A3C
.text:0000000000009A9D                 test    al, 1
.text:0000000000009A9F                 jz      short loc_9A3C
.text:0000000000009AA1                 xor     eax, eax
.text:0000000000009AA3                 pop     rbx
.text:0000000000009AA4                 retn
.text:0000000000009AA4 ; ---------------------------------------------------------------------------
.text:0000000000009AA5                 align 8
.text:0000000000009AA8
.text:0000000000009AA8 loc_9AA8:                               ; CODE XREF: check_node_accept+33↑j
.text:0000000000009AA8                 mov     rcx, [rdi+98h]
.text:0000000000009AAF                 xor     eax, eax
.text:0000000000009AB1                 test    byte ptr [rcx+0D8h], 40h
.text:0000000000009AB8                 jnz     loc_9A00
.text:0000000000009ABE                 rep retn
.text:0000000000009ABE ; } // starts at 99B0
.text:0000000000009ABE check_node_accept endp
.text:0000000000009ABE
.text:0000000000009AC0
.text:0000000000009AC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000009AC0
.text:0000000000009AC0
.text:0000000000009AC0 check_halt_state_context_isra_20 proc near
.text:0000000000009AC0                                         ; CODE XREF: re_search_internal+8C7↓p
.text:0000000000009AC0                                         ; re_search_internal+A3C↓p ...
.text:0000000000009AC0 ; __unwind {
.text:0000000000009AC0                 push    r12
.text:0000000000009AC2                 mov     r12, rdx
.text:0000000000009AC5                 push    rbp
.text:0000000000009AC6                 push    rbx
.text:0000000000009AC7                 mov     edx, [rdi+0A0h]
.text:0000000000009ACD                 mov     rbx, rsi
.text:0000000000009AD0                 mov     rsi, rcx
.text:0000000000009AD3                 mov     rbp, rdi
.text:0000000000009AD6                 call    re_string_context_at
.text:0000000000009ADB                 test    rbx, rbx
.text:0000000000009ADE                 jle     loc_9B88
.text:0000000000009AE4                 mov     rdx, [rbp+98h]
.text:0000000000009AEB                 mov     r11d, eax
.text:0000000000009AEE                 mov     ebp, eax
.text:0000000000009AF0                 and     eax, 1
.text:0000000000009AF3                 mov     r9, [r12]
.text:0000000000009AF7                 xor     esi, esi
.text:0000000000009AF9                 and     ebp, 8
.text:0000000000009AFC                 and     r11d, 2
.text:0000000000009B00                 mov     r10d, eax
.text:0000000000009B03                 mov     r8, [rdx]
.text:0000000000009B06                 jmp     short loc_9B19
.text:0000000000009B06 ; ---------------------------------------------------------------------------
.text:0000000000009B08                 align 10h
.text:0000000000009B10
.text:0000000000009B10 loc_9B10:                               ; CODE XREF: check_halt_state_context_isra_20+78↓j
.text:0000000000009B10                                         ; check_halt_state_context_isra_20+87↓j ...
.text:0000000000009B10                 add     rsi, 1
.text:0000000000009B14                 cmp     rsi, rbx
.text:0000000000009B17                 jz      short loc_9B88
.text:0000000000009B19
.text:0000000000009B19 loc_9B19:                               ; CODE XREF: check_halt_state_context_isra_20+46↑j
.text:0000000000009B19                 mov     rax, [r9+rsi*8]
.text:0000000000009B1D                 mov     rdx, rax
.text:0000000000009B20                 shl     rdx, 4
.text:0000000000009B24                 add     rdx, r8
.text:0000000000009B27                 mov     ecx, [rdx+8]
.text:0000000000009B2A                 shr     ecx, 8
.text:0000000000009B2D                 mov     edi, ecx
.text:0000000000009B2F                 and     di, 3FFh
.text:0000000000009B34                 cmp     byte ptr [rdx+8], 2
.text:0000000000009B38                 jnz     short loc_9B10
.text:0000000000009B3A                 test    di, di
.text:0000000000009B3D                 jz      short loc_9B65
.text:0000000000009B3F                 test    cl, 4
.text:0000000000009B42                 jz      short loc_9B70
.text:0000000000009B44                 test    r10d, r10d
.text:0000000000009B47                 jz      short loc_9B10
.text:0000000000009B49                 and     ecx, 8
.text:0000000000009B4C                 jnz     short loc_9B10
.text:0000000000009B4E
.text:0000000000009B4E loc_9B4E:                               ; CODE XREF: check_halt_state_context_isra_20+B3↓j
.text:0000000000009B4E                 test    dil, 20h
.text:0000000000009B52                 jz      short loc_9B59
.text:0000000000009B54
.text:0000000000009B54 loc_9B54:                               ; CODE XREF: check_halt_state_context_isra_20+C0↓j
.text:0000000000009B54                 test    r11d, r11d
.text:0000000000009B57                 jz      short loc_9B10
.text:0000000000009B59
.text:0000000000009B59 loc_9B59:                               ; CODE XREF: check_halt_state_context_isra_20+92↑j
.text:0000000000009B59                                         ; check_halt_state_context_isra_20+BE↓j
.text:0000000000009B59                 and     edi, 80h
.text:0000000000009B5F                 jz      short loc_9B65
.text:0000000000009B61                 test    ebp, ebp
.text:0000000000009B63                 jz      short loc_9B10
.text:0000000000009B65
.text:0000000000009B65 loc_9B65:                               ; CODE XREF: check_halt_state_context_isra_20+7D↑j
.text:0000000000009B65                                         ; check_halt_state_context_isra_20+9F↑j
.text:0000000000009B65                 pop     rbx
.text:0000000000009B66                 pop     rbp
.text:0000000000009B67                 pop     r12
.text:0000000000009B69                 retn
.text:0000000000009B69 ; ---------------------------------------------------------------------------
.text:0000000000009B6A                 align 10h
.text:0000000000009B70
.text:0000000000009B70 loc_9B70:                               ; CODE XREF: check_halt_state_context_isra_20+82↑j
.text:0000000000009B70                 and     ecx, 8
.text:0000000000009B73                 jz      short loc_9B4E
.text:0000000000009B75                 test    r10d, r10d
.text:0000000000009B78                 jnz     short loc_9B10
.text:0000000000009B7A                 test    dil, 20h
.text:0000000000009B7E                 jz      short loc_9B59
.text:0000000000009B80                 jmp     short loc_9B54
.text:0000000000009B80 ; ---------------------------------------------------------------------------
.text:0000000000009B82                 align 8
.text:0000000000009B88
.text:0000000000009B88 loc_9B88:                               ; CODE XREF: check_halt_state_context_isra_20+1E↑j
.text:0000000000009B88                                         ; check_halt_state_context_isra_20+57↑j
.text:0000000000009B88                 pop     rbx
.text:0000000000009B89                 xor     eax, eax
.text:0000000000009B8B                 pop     rbp
.text:0000000000009B8C                 pop     r12
.text:0000000000009B8E                 retn
.text:0000000000009B8E ; } // starts at 9AC0
.text:0000000000009B8E check_halt_state_context_isra_20 endp
.text:0000000000009B8E
.text:0000000000009B8E ; ---------------------------------------------------------------------------
.text:0000000000009B8F                 align 10h
.text:0000000000009B90
.text:0000000000009B90 ; =============== S U B R O U T I N E =======================================
.text:0000000000009B90
.text:0000000000009B90
.text:0000000000009B90 re_string_reconstruct proc near         ; CODE XREF: re_search_internal+5E6↓p
.text:0000000000009B90                                         ; re_search_internal+115B↓p
.text:0000000000009B90
.text:0000000000009B90 var_78          = qword ptr -78h
.text:0000000000009B90 var_6C          = dword ptr -6Ch
.text:0000000000009B90 var_68          = qword ptr -68h
.text:0000000000009B90 var_60          = qword ptr -60h
.text:0000000000009B90 wc              = dword ptr -54h
.text:0000000000009B90 var_50          = qword ptr -50h
.text:0000000000009B90 var_46          = byte ptr -46h
.text:0000000000009B90 var_40          = qword ptr -40h
.text:0000000000009B90
.text:0000000000009B90 ; __unwind {
.text:0000000000009B90                 push    r15
.text:0000000000009B92                 push    r14
.text:0000000000009B94                 mov     r15, rsi
.text:0000000000009B97                 push    r13
.text:0000000000009B99                 push    r12
.text:0000000000009B9B                 mov     r10d, edx
.text:0000000000009B9E                 push    rbp
.text:0000000000009B9F                 push    rbx
.text:0000000000009BA0                 mov     rbp, rsi
.text:0000000000009BA3                 mov     rbx, rdi
.text:0000000000009BA6                 sub     rsp, 48h
.text:0000000000009BAA                 mov     rax, fs:28h
.text:0000000000009BB3                 mov     [rsp+78h+var_40], rax
.text:0000000000009BB8                 xor     eax, eax
.text:0000000000009BBA                 mov     rax, [rdi+28h]
.text:0000000000009BBE                 sub     rbp, rax
.text:0000000000009BC1                 cmp     rax, rsi
.text:0000000000009BC4                 jle     short loc_9C26
.text:0000000000009BC6                 cmp     dword ptr [rdi+90h], 1
.text:0000000000009BCD                 jg      loc_9D00
.text:0000000000009BD3
.text:0000000000009BD3 loc_9BD3:                               ; CODE XREF: re_string_reconstruct+178↓j
.text:0000000000009BD3                 mov     rax, [rbx+50h]
.text:0000000000009BD7                 mov     qword ptr [rbx+30h], 0
.text:0000000000009BDF                 mov     rbp, r15
.text:0000000000009BE2                 mov     qword ptr [rbx+28h], 0
.text:0000000000009BEA                 mov     qword ptr [rbx+38h], 0
.text:0000000000009BF2                 mov     byte ptr [rbx+8Ch], 0
.text:0000000000009BF9                 mov     [rbx+58h], rax
.text:0000000000009BFD                 mov     rax, [rbx+60h]
.text:0000000000009C01                 mov     [rbx+68h], rax
.text:0000000000009C05                 mov     eax, r10d
.text:0000000000009C08                 and     eax, 1
.text:0000000000009C0B                 cmp     eax, 1
.text:0000000000009C0E                 sbb     eax, eax
.text:0000000000009C10                 and     eax, 2
.text:0000000000009C13                 add     eax, 4
.text:0000000000009C16                 cmp     byte ptr [rbx+8Bh], 0
.text:0000000000009C1D                 mov     [rbx+70h], eax
.text:0000000000009C20                 jz      loc_9CF0
.text:0000000000009C26
.text:0000000000009C26 loc_9C26:                               ; CODE XREF: re_string_reconstruct+34↑j
.text:0000000000009C26                                         ; re_string_reconstruct+167↓j
.text:0000000000009C26                 test    rbp, rbp
.text:0000000000009C29                 jz      short loc_9C8E
.text:0000000000009C2B                 mov     rax, [rbx+38h]
.text:0000000000009C2F                 movzx   edx, byte ptr [rbx+8Ch]
.text:0000000000009C36                 mov     r8, [rbx+30h]
.text:0000000000009C3A                 cmp     rax, rbp
.text:0000000000009C3D                 jle     loc_9D60
.text:0000000000009C43                 test    dl, dl
.text:0000000000009C45                 jnz     loc_9E58
.text:0000000000009C4B                 lea     rsi, [rbp-1]
.text:0000000000009C4F                 mov     edx, r10d
.text:0000000000009C52                 mov     rdi, rbx
.text:0000000000009C55                 mov     [rsp+78h+var_78], r8
.text:0000000000009C59                 call    re_string_context_at
.text:0000000000009C5E                 mov     r8, [rsp+78h+var_78]
.text:0000000000009C62                 mov     [rbx+70h], eax
.text:0000000000009C65                 sub     r8, rbp
.text:0000000000009C68                 cmp     dword ptr [rbx+90h], 1
.text:0000000000009C6F                 jg      loc_9D10
.text:0000000000009C75
.text:0000000000009C75 loc_9C75:                               ; CODE XREF: re_string_reconstruct+19C↓j
.text:0000000000009C75                 cmp     byte ptr [rbx+8Bh], 0
.text:0000000000009C7C                 jnz     loc_A020
.text:0000000000009C82                 sub     [rbx+38h], rbp
.text:0000000000009C86                 mov     [rbx+30h], r8
.text:0000000000009C8A
.text:0000000000009C8A loc_9C8A:                               ; CODE XREF: re_string_reconstruct+47E↓j
.text:0000000000009C8A                                         ; re_string_reconstruct+6F4↓j
.text:0000000000009C8A                 add     [rbx+8], rbp
.text:0000000000009C8E
.text:0000000000009C8E loc_9C8E:                               ; CODE XREF: re_string_reconstruct+99↑j
.text:0000000000009C8E                                         ; re_string_reconstruct+484↓j
.text:0000000000009C8E                 mov     rax, [rbx+58h]
.text:0000000000009C92                 sub     [rbx+68h], rbp
.text:0000000000009C96                 mov     [rbx+28h], r15
.text:0000000000009C9A                 sub     rax, rbp
.text:0000000000009C9D                 cmp     dword ptr [rbx+90h], 1
.text:0000000000009CA4                 mov     [rbx+58h], rax
.text:0000000000009CA8                 jle     loc_9D48
.text:0000000000009CAE                 cmp     byte ptr [rbx+88h], 0
.text:0000000000009CB5                 mov     rdi, rbx
.text:0000000000009CB8                 jz      short loc_9D38
.text:0000000000009CBA                 call    build_wcs_upper_buffer
.text:0000000000009CBF                 test    eax, eax
.text:0000000000009CC1                 jnz     short loc_9CCD
.text:0000000000009CC3
.text:0000000000009CC3 loc_9CC3:                               ; CODE XREF: re_string_reconstruct+1AD↓j
.text:0000000000009CC3                                         ; re_string_reconstruct+1C9↓j ...
.text:0000000000009CC3                 mov     qword ptr [rbx+48h], 0
.text:0000000000009CCB                 xor     eax, eax
.text:0000000000009CCD
.text:0000000000009CCD loc_9CCD:                               ; CODE XREF: re_string_reconstruct+131↑j
.text:0000000000009CCD                 mov     rcx, [rsp+78h+var_40]
.text:0000000000009CD2                 xor     rcx, fs:28h
.text:0000000000009CDB                 jnz     loc_A32A
.text:0000000000009CE1                 add     rsp, 48h
.text:0000000000009CE5                 pop     rbx
.text:0000000000009CE6                 pop     rbp
.text:0000000000009CE7                 pop     r12
.text:0000000000009CE9                 pop     r13
.text:0000000000009CEB                 pop     r14
.text:0000000000009CED                 pop     r15
.text:0000000000009CEF                 retn
.text:0000000000009CF0 ; ---------------------------------------------------------------------------
.text:0000000000009CF0
.text:0000000000009CF0 loc_9CF0:                               ; CODE XREF: re_string_reconstruct+90↑j
.text:0000000000009CF0                 mov     rax, [rbx]
.text:0000000000009CF3                 mov     [rbx+8], rax
.text:0000000000009CF7                 jmp     loc_9C26
.text:0000000000009CF7 ; ---------------------------------------------------------------------------
.text:0000000000009CFC                 align 20h
.text:0000000000009D00
.text:0000000000009D00 loc_9D00:                               ; CODE XREF: re_string_reconstruct+3D↑j
.text:0000000000009D00                 mov     qword ptr [rdi+20h], 0
.text:0000000000009D08                 jmp     loc_9BD3
.text:0000000000009D08 ; ---------------------------------------------------------------------------
.text:0000000000009D0D                 align 10h
.text:0000000000009D10
.text:0000000000009D10 loc_9D10:                               ; CODE XREF: re_string_reconstruct+DF↑j
.text:0000000000009D10                 mov     rdi, [rbx+10h]  ; dest
.text:0000000000009D14                 lea     rdx, ds:0[r8*4] ; n
.text:0000000000009D1C                 lea     rsi, [rdi+rbp*4] ; src
.text:0000000000009D20                 call    _memmove
.text:0000000000009D25                 mov     r8, [rbx+30h]
.text:0000000000009D29                 sub     r8, rbp
.text:0000000000009D2C                 jmp     loc_9C75
.text:0000000000009D2C ; ---------------------------------------------------------------------------
.text:0000000000009D31                 align 8
.text:0000000000009D38
.text:0000000000009D38 loc_9D38:                               ; CODE XREF: re_string_reconstruct+128↑j
.text:0000000000009D38                 call    build_wcs_buffer
.text:0000000000009D3D                 jmp     loc_9CC3
.text:0000000000009D3D ; ---------------------------------------------------------------------------
.text:0000000000009D42                 align 8
.text:0000000000009D48
.text:0000000000009D48 loc_9D48:                               ; CODE XREF: re_string_reconstruct+118↑j
.text:0000000000009D48                 cmp     byte ptr [rbx+8Bh], 0
.text:0000000000009D4F                 jnz     loc_A100
.text:0000000000009D55                 mov     [rbx+30h], rax
.text:0000000000009D59                 jmp     loc_9CC3
.text:0000000000009D59 ; ---------------------------------------------------------------------------
.text:0000000000009D5E                 align 20h
.text:0000000000009D60
.text:0000000000009D60 loc_9D60:                               ; CODE XREF: re_string_reconstruct+AD↑j
.text:0000000000009D60                 test    dl, dl
.text:0000000000009D62                 jnz     loc_A20D
.text:0000000000009D68
.text:0000000000009D68 loc_9D68:                               ; CODE XREF: re_string_reconstruct+6A0↓j
.text:0000000000009D68                 movsxd  rdx, dword ptr [rbx+90h]
.text:0000000000009D6F                 mov     qword ptr [rbx+30h], 0
.text:0000000000009D77                 mov     r11, [rbx+28h]
.text:0000000000009D7B                 cmp     edx, 1
.text:0000000000009D7E                 jle     loc_A168
.text:0000000000009D84                 cmp     byte ptr [rbx+89h], 0
.text:0000000000009D8B                 jnz     loc_A048
.text:0000000000009D91
.text:0000000000009D91 loc_9D91:                               ; CODE XREF: re_string_reconstruct+4DC↓j
.text:0000000000009D91                                         ; re_string_reconstruct+4EF↓j ...
.text:0000000000009D91                 lea     r14, [r11+rax]
.text:0000000000009D95                 cmp     r15, r14
.text:0000000000009D98                 jle     loc_A1DF
.text:0000000000009D9E                 lea     rax, [rbx+20h]
.text:0000000000009DA2                 lea     r13, [rsp+78h+wc]
.text:0000000000009DA7                 mov     [rsp+78h+var_68], rax
.text:0000000000009DAC                 nop     dword ptr [rax+00h]
.text:0000000000009DB0
.text:0000000000009DB0 loc_9DB0:                               ; CODE XREF: re_string_reconstruct+270↓j
.text:0000000000009DB0                 mov     r12, [rbx+50h]
.text:0000000000009DB4                 mov     rsi, [rbx]
.text:0000000000009DB7                 mov     rdi, r13
.text:0000000000009DBA                 mov     rax, [rbx+20h]
.text:0000000000009DBE                 mov     rcx, [rsp+78h+var_68]
.text:0000000000009DC3                 mov     [rsp+78h+var_6C], r10d
.text:0000000000009DC8                 mov     [rsp+78h+var_78], r8
.text:0000000000009DCC                 sub     r12, r14
.text:0000000000009DCF                 add     rsi, r14
.text:0000000000009DD2                 mov     rdx, r12
.text:0000000000009DD5                 mov     [rsp+78h+var_60], rax
.text:0000000000009DDA                 call    rpl_mbrtowc
.text:0000000000009DDF                 lea     rcx, [rax-1]
.text:0000000000009DE3                 mov     edx, [rsp+78h+wc]
.text:0000000000009DE7                 mov     r8, [rsp+78h+var_78]
.text:0000000000009DEB                 mov     r10d, [rsp+78h+var_6C]
.text:0000000000009DF0                 cmp     rcx, 0FFFFFFFFFFFFFFFCh
.text:0000000000009DF4                 ja      loc_A235
.text:0000000000009DFA
.text:0000000000009DFA loc_9DFA:                               ; CODE XREF: re_string_reconstruct+6C5↓j
.text:0000000000009DFA                 add     r14, rax
.text:0000000000009DFD                 cmp     r15, r14
.text:0000000000009E00                 jg      short loc_9DB0
.text:0000000000009E02                 sub     r14, r15
.text:0000000000009E05                 cmp     edx, 0FFFFFFFFh
.text:0000000000009E08                 mov     r12, r14
.text:0000000000009E0B                 mov     [rbx+30h], r14
.text:0000000000009E0F                 jz      loc_A1E9
.text:0000000000009E15
.text:0000000000009E15 loc_9E15:                               ; CODE XREF: re_string_reconstruct+73A↓j
.text:0000000000009E15                 cmp     byte ptr [rbx+8Eh], 0
.text:0000000000009E1C                 jnz     loc_A289
.text:0000000000009E22
.text:0000000000009E22 loc_9E22:                               ; CODE XREF: re_string_reconstruct+70D↓j
.text:0000000000009E22                 xor     eax, eax
.text:0000000000009E24                 cmp     edx, 0Ah
.text:0000000000009E27                 jnz     short loc_9E37
.text:0000000000009E29                 xor     eax, eax
.text:0000000000009E2B                 cmp     byte ptr [rbx+8Dh], 0
.text:0000000000009E32                 setnz   al
.text:0000000000009E35                 add     eax, eax
.text:0000000000009E37
.text:0000000000009E37 loc_9E37:                               ; CODE XREF: re_string_reconstruct+297↑j
.text:0000000000009E37                                         ; re_string_reconstruct+718↓j
.text:0000000000009E37                 mov     [rbx+70h], eax
.text:0000000000009E3A
.text:0000000000009E3A loc_9E3A:                               ; CODE XREF: re_string_reconstruct+66B↓j
.text:0000000000009E3A                 cmp     r12, 0
.text:0000000000009E3E                 jnz     loc_A25A
.text:0000000000009E44
.text:0000000000009E44 loc_9E44:                               ; CODE XREF: re_string_reconstruct+75D↓j
.text:0000000000009E44                 movzx   eax, byte ptr [rbx+8Bh]
.text:0000000000009E4B                 mov     [rbx+38h], r12
.text:0000000000009E4F                 jmp     loc_A00C
.text:0000000000009E4F ; ---------------------------------------------------------------------------
.text:0000000000009E54                 align 8
.text:0000000000009E58
.text:0000000000009E58 loc_9E58:                               ; CODE XREF: re_string_reconstruct+B5↑j
.text:0000000000009E58                 mov     r14, [rbx+18h]
.text:0000000000009E5C                 mov     rcx, r8
.text:0000000000009E5F                 xor     esi, esi
.text:0000000000009E61                 jmp     short loc_9E73
.text:0000000000009E61 ; ---------------------------------------------------------------------------
.text:0000000000009E63                 align 8
.text:0000000000009E68
.text:0000000000009E68 loc_9E68:                               ; CODE XREF: re_string_reconstruct+2FE↓j
.text:0000000000009E68                 jge     short loc_9EA3
.text:0000000000009E6A                 lea     rsi, [rax+1]
.text:0000000000009E6E
.text:0000000000009E6E loc_9E6E:                               ; CODE XREF: re_string_reconstruct+303↓j
.text:0000000000009E6E                 cmp     rsi, rcx
.text:0000000000009E71                 jge     short loc_9E98
.text:0000000000009E73
.text:0000000000009E73 loc_9E73:                               ; CODE XREF: re_string_reconstruct+2D1↑j
.text:0000000000009E73                 lea     rdx, [rsi+rcx]
.text:0000000000009E77                 mov     rax, rdx
.text:0000000000009E7A                 shr     rax, 3Fh
.text:0000000000009E7E                 add     rax, rdx
.text:0000000000009E81                 sar     rax, 1
.text:0000000000009E84                 mov     rdx, [r14+rax*8]
.text:0000000000009E88                 mov     r12, rax
.text:0000000000009E8B                 cmp     rdx, rbp
.text:0000000000009E8E                 jle     short loc_9E68
.text:0000000000009E90                 mov     rcx, rax
.text:0000000000009E93                 jmp     short loc_9E6E
.text:0000000000009E93 ; ---------------------------------------------------------------------------
.text:0000000000009E95                 align 8
.text:0000000000009E98
.text:0000000000009E98 loc_9E98:                               ; CODE XREF: re_string_reconstruct+2E1↑j
.text:0000000000009E98                 lea     r12, [rax+1]
.text:0000000000009E9C                 cmp     rdx, rbp
.text:0000000000009E9F                 cmovge  r12, rax
.text:0000000000009EA3
.text:0000000000009EA3 loc_9EA3:                               ; CODE XREF: re_string_reconstruct:loc_9E68↑j
.text:0000000000009EA3                 lea     r13, [r12-1]
.text:0000000000009EA8                 mov     edx, r10d
.text:0000000000009EAB                 mov     rdi, rbx
.text:0000000000009EAE                 mov     [rsp+78h+var_78], r8
.text:0000000000009EB2                 mov     rsi, r13
.text:0000000000009EB5                 call    re_string_context_at
.text:0000000000009EBA                 cmp     rbp, r12
.text:0000000000009EBD                 mov     [rbx+70h], eax
.text:0000000000009EC0                 mov     r8, [rsp+78h+var_78]
.text:0000000000009EC4                 jnz     loc_9F48
.text:0000000000009ECA                 cmp     rbp, r8
.text:0000000000009ECD                 jge     short loc_9F48
.text:0000000000009ECF                 cmp     [r14+r12*8], rbp
.text:0000000000009ED3                 jnz     short loc_9F48
.text:0000000000009ED5                 mov     rdi, [rbx+10h]  ; dest
.text:0000000000009ED9                 sub     r8, rbp
.text:0000000000009EDC                 lea     rdx, ds:0[r8*4] ; n
.text:0000000000009EE4                 lea     rsi, [rdi+rbp*4] ; src
.text:0000000000009EE8                 call    _memmove
.text:0000000000009EED                 mov     rdi, [rbx+8]    ; dest
.text:0000000000009EF1                 mov     rdx, [rbx+30h]
.text:0000000000009EF5                 lea     rsi, [rdi+rbp]  ; src
.text:0000000000009EF9                 sub     rdx, rbp        ; n
.text:0000000000009EFC                 call    _memmove
.text:0000000000009F01                 mov     rax, [rbx+30h]
.text:0000000000009F05                 sub     [rbx+38h], rbp
.text:0000000000009F09                 sub     rax, rbp
.text:0000000000009F0C                 test    rax, rax
.text:0000000000009F0F                 mov     [rbx+30h], rax
.text:0000000000009F13                 jle     short loc_9F38
.text:0000000000009F15                 mov     rcx, [rbx+18h]
.text:0000000000009F19                 xor     eax, eax
.text:0000000000009F1B                 lea     rsi, [rcx+rbp*8]
.text:0000000000009F1F                 nop
.text:0000000000009F20
.text:0000000000009F20 loc_9F20:                               ; CODE XREF: re_string_reconstruct+3A3↓j
.text:0000000000009F20                 mov     rdx, [rsi+rax*8]
.text:0000000000009F24                 sub     rdx, rbp
.text:0000000000009F27                 mov     [rcx+rax*8], rdx
.text:0000000000009F2B                 add     rax, 1
.text:0000000000009F2F                 cmp     [rbx+30h], rax
.text:0000000000009F33                 jg      short loc_9F20
.text:0000000000009F35                 nop     dword ptr [rax]
.text:0000000000009F38
.text:0000000000009F38 loc_9F38:                               ; CODE XREF: re_string_reconstruct+383↑j
.text:0000000000009F38                                         ; re_string_reconstruct+633↓j
.text:0000000000009F38                 movzx   eax, byte ptr [rbx+8Bh]
.text:0000000000009F3F                 jmp     loc_A00C
.text:0000000000009F3F ; ---------------------------------------------------------------------------
.text:0000000000009F44                 align 8
.text:0000000000009F48
.text:0000000000009F48 loc_9F48:                               ; CODE XREF: re_string_reconstruct+334↑j
.text:0000000000009F48                                         ; re_string_reconstruct+33D↑j ...
.text:0000000000009F48                 mov     rax, [rbx+50h]
.text:0000000000009F4C                 mov     byte ptr [rbx+8Ch], 0
.text:0000000000009F53                 add     rax, rbp
.text:0000000000009F56                 sub     rax, r15
.text:0000000000009F59                 mov     [rbx+58h], rax
.text:0000000000009F5D                 mov     rax, [rbx+60h]
.text:0000000000009F61                 add     rax, rbp
.text:0000000000009F64                 sub     rax, r15
.text:0000000000009F67                 test    r12, r12
.text:0000000000009F6A                 mov     [rbx+68h], rax
.text:0000000000009F6E                 jle     short loc_9F93
.text:0000000000009F70                 cmp     [r14+r12*8-8], rbp
.text:0000000000009F75                 jz      short loc_9F8B
.text:0000000000009F77                 jmp     short loc_9F93
.text:0000000000009F77 ; ---------------------------------------------------------------------------
.text:0000000000009F79                 align 20h
.text:0000000000009F80
.text:0000000000009F80 loc_9F80:                               ; CODE XREF: re_string_reconstruct+401↓j
.text:0000000000009F80                 cmp     [r14+r13*8-8], rbp
.text:0000000000009F85                 jnz     short loc_9F93
.text:0000000000009F87                 sub     r13, 1
.text:0000000000009F8B
.text:0000000000009F8B loc_9F8B:                               ; CODE XREF: re_string_reconstruct+3E5↑j
.text:0000000000009F8B                 test    r13, r13
.text:0000000000009F8E                 mov     r12, r13
.text:0000000000009F91                 jnz     short loc_9F80
.text:0000000000009F93
.text:0000000000009F93 loc_9F93:                               ; CODE XREF: re_string_reconstruct+3DE↑j
.text:0000000000009F93                                         ; re_string_reconstruct+3E7↑j ...
.text:0000000000009F93                 cmp     r12, r8
.text:0000000000009F96                 jge     loc_A1C8
.text:0000000000009F9C                 mov     rax, [rbx+10h]
.text:0000000000009FA0                 jmp     short loc_9FB5
.text:0000000000009FA0 ; ---------------------------------------------------------------------------
.text:0000000000009FA2                 align 8
.text:0000000000009FA8
.text:0000000000009FA8 loc_9FA8:                               ; CODE XREF: re_string_reconstruct+42A↓j
.text:0000000000009FA8                 add     r12, 1
.text:0000000000009FAC                 cmp     r12, r8
.text:0000000000009FAF                 jz      loc_A1D0
.text:0000000000009FB5
.text:0000000000009FB5 loc_9FB5:                               ; CODE XREF: re_string_reconstruct+410↑j
.text:0000000000009FB5                 cmp     dword ptr [rax+r12*4], 0FFFFFFFFh
.text:0000000000009FBA                 jz      short loc_9FA8
.text:0000000000009FBC
.text:0000000000009FBC loc_9FBC:                               ; CODE XREF: re_string_reconstruct:loc_A1C8↓j
.text:0000000000009FBC                 mov     rdx, [r14+r12*8]
.text:0000000000009FC0                 sub     rdx, rbp        ; n
.text:0000000000009FC3                 cmp     rdx, 0
.text:0000000000009FC7                 mov     [rbx+30h], rdx
.text:0000000000009FCB                 jz      short loc_A001
.text:0000000000009FCD                 jle     short loc_9FEF
.text:0000000000009FCF                 mov     rax, [rbx+10h]
.text:0000000000009FD3                 lea     rcx, [rax+rdx*4]
.text:0000000000009FD7                 nop     word ptr [rax+rax+00000000h]
.text:0000000000009FE0
.text:0000000000009FE0 loc_9FE0:                               ; CODE XREF: re_string_reconstruct+45D↓j
.text:0000000000009FE0                 mov     dword ptr [rax], 0FFFFFFFFh
.text:0000000000009FE6                 add     rax, 4
.text:0000000000009FEA                 cmp     rcx, rax
.text:0000000000009FED                 jnz     short loc_9FE0
.text:0000000000009FEF
.text:0000000000009FEF loc_9FEF:                               ; CODE XREF: re_string_reconstruct+43D↑j
.text:0000000000009FEF                 mov     rdi, [rbx+8]    ; s
.text:0000000000009FF3                 mov     esi, 0FFh       ; c
.text:0000000000009FF8                 call    _memset
.text:0000000000009FFD                 mov     rdx, [rbx+30h]
.text:000000000000A001
.text:000000000000A001 loc_A001:                               ; CODE XREF: re_string_reconstruct+43B↑j
.text:000000000000A001                                         ; re_string_reconstruct+64A↓j
.text:000000000000A001                 movzx   eax, byte ptr [rbx+8Bh]
.text:000000000000A008                 mov     [rbx+38h], rdx
.text:000000000000A00C
.text:000000000000A00C loc_A00C:                               ; CODE XREF: re_string_reconstruct+2BF↑j
.text:000000000000A00C                                         ; re_string_reconstruct+3AF↑j ...
.text:000000000000A00C                 test    al, al
.text:000000000000A00E                 jz      loc_9C8A
.text:000000000000A014                 jmp     loc_9C8E
.text:000000000000A014 ; ---------------------------------------------------------------------------
.text:000000000000A019                 align 20h
.text:000000000000A020
.text:000000000000A020 loc_A020:                               ; CODE XREF: re_string_reconstruct+EC↑j
.text:000000000000A020                 mov     rdi, [rbx+8]    ; dest
.text:000000000000A024                 mov     rdx, r8         ; n
.text:000000000000A027                 lea     rsi, [rdi+rbp]  ; src
.text:000000000000A02B                 call    _memmove
.text:000000000000A030                 movzx   eax, byte ptr [rbx+8Bh]
.text:000000000000A037                 sub     [rbx+30h], rbp
.text:000000000000A03B                 sub     [rbx+38h], rbp
.text:000000000000A03F                 jmp     short loc_A00C
.text:000000000000A03F ; ---------------------------------------------------------------------------
.text:000000000000A041                 align 8
.text:000000000000A048
.text:000000000000A048 loc_A048:                               ; CODE XREF: re_string_reconstruct+1FB↑j
.text:000000000000A048                 mov     rcx, [rbx]
.text:000000000000A04B                 mov     rdi, rbp
.text:000000000000A04E                 sub     rdi, rdx
.text:000000000000A051                 mov     rdx, rdi
.text:000000000000A054                 lea     r12, [rcx+r11]
.text:000000000000A058                 add     rdx, r12
.text:000000000000A05B                 lea     rsi, [r12+rbp-1]
.text:000000000000A060                 cmp     rcx, rdx
.text:000000000000A063                 cmovb   rcx, rdx
.text:000000000000A067                 cmp     rcx, rsi
.text:000000000000A06A                 jbe     short loc_A085
.text:000000000000A06C                 jmp     loc_9D91
.text:000000000000A06C ; ---------------------------------------------------------------------------
.text:000000000000A071                 align 8
.text:000000000000A078
.text:000000000000A078 loc_A078:                               ; CODE XREF: re_string_reconstruct+4FE↓j
.text:000000000000A078                 sub     rsi, 1
.text:000000000000A07C                 cmp     rcx, rsi
.text:000000000000A07F                 ja      loc_9D91
.text:000000000000A085
.text:000000000000A085 loc_A085:                               ; CODE XREF: re_string_reconstruct+4DA↑j
.text:000000000000A085                 movzx   edx, byte ptr [rsi]
.text:000000000000A088                 and     edx, 0FFFFFFC0h
.text:000000000000A08B                 cmp     dl, 80h
.text:000000000000A08E                 jz      short loc_A078
.text:000000000000A090                 mov     rdx, [rbx+58h]
.text:000000000000A094                 mov     rcx, [rbx+78h]
.text:000000000000A098                 mov     r14, rsi
.text:000000000000A09B                 add     rdx, r12
.text:000000000000A09E                 sub     rdx, rsi
.text:000000000000A0A1                 test    rcx, rcx
.text:000000000000A0A4                 jnz     loc_A2F2
.text:000000000000A0AA
.text:000000000000A0AA loc_A0AA:                               ; CODE XREF: re_string_reconstruct+795↓j
.text:000000000000A0AA                 lea     r13, [rsp+78h+wc]
.text:000000000000A0AF                 add     r12, rbp
.text:000000000000A0B2                 lea     rcx, [rsp+78h+var_50]
.text:000000000000A0B7                 sub     r12, r14
.text:000000000000A0BA                 mov     [rsp+78h+var_6C], r10d
.text:000000000000A0BF                 mov     [rsp+78h+var_78], r8
.text:000000000000A0C3                 mov     rdi, r13
.text:000000000000A0C6                 mov     [rsp+78h+var_50], 0
.text:000000000000A0CF                 call    rpl_mbrtowc
.text:000000000000A0D4                 cmp     r12, rax
.text:000000000000A0D7                 mov     r8, [rsp+78h+var_78]
.text:000000000000A0DB                 mov     r10d, [rsp+78h+var_6C]
.text:000000000000A0E0                 ja      short loc_A0EC
.text:000000000000A0E2                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:000000000000A0E6                 jbe     loc_A2B1
.text:000000000000A0EC
.text:000000000000A0EC loc_A0EC:                               ; CODE XREF: re_string_reconstruct+550↑j
.text:000000000000A0EC                                         ; re_string_reconstruct+740↓j
.text:000000000000A0EC                 mov     r11, [rbx+28h]
.text:000000000000A0F0                 mov     rax, [rbx+38h]
.text:000000000000A0F4                 jmp     loc_9D91
.text:000000000000A0F4 ; ---------------------------------------------------------------------------
.text:000000000000A0F9                 align 20h
.text:000000000000A100
.text:000000000000A100 loc_A100:                               ; CODE XREF: re_string_reconstruct+1BF↑j
.text:000000000000A100                 cmp     byte ptr [rbx+88h], 0
.text:000000000000A107                 jnz     loc_A200
.text:000000000000A10D                 mov     rcx, [rbx+78h]
.text:000000000000A111                 test    rcx, rcx
.text:000000000000A114                 jz      loc_9CC3
.text:000000000000A11A                 cmp     [rbx+40h], rax
.text:000000000000A11E                 mov     rdx, [rbx+30h]
.text:000000000000A122                 cmovle  rax, [rbx+40h]
.text:000000000000A127                 cmp     rax, rdx
.text:000000000000A12A                 jg      short loc_A138
.text:000000000000A12C                 jmp     short loc_A158
.text:000000000000A12C ; ---------------------------------------------------------------------------
.text:000000000000A12E                 align 10h
.text:000000000000A130
.text:000000000000A130 loc_A130:                               ; CODE XREF: re_string_reconstruct+5C6↓j
.text:000000000000A130                 mov     r15, [rbx+28h]
.text:000000000000A134                 mov     rcx, [rbx+78h]
.text:000000000000A138
.text:000000000000A138 loc_A138:                               ; CODE XREF: re_string_reconstruct+59A↑j
.text:000000000000A138                 mov     rsi, [rbx]
.text:000000000000A13B                 add     rsi, rdx
.text:000000000000A13E                 movzx   esi, byte ptr [rsi+r15]
.text:000000000000A143                 movzx   esi, byte ptr [rcx+rsi]
.text:000000000000A147                 mov     rcx, [rbx+8]
.text:000000000000A14B                 mov     [rcx+rdx], sil
.text:000000000000A14F                 add     rdx, 1
.text:000000000000A153                 cmp     rax, rdx
.text:000000000000A156                 jnz     short loc_A130
.text:000000000000A158
.text:000000000000A158 loc_A158:                               ; CODE XREF: re_string_reconstruct+59C↑j
.text:000000000000A158                 mov     [rbx+30h], rdx
.text:000000000000A15C                 mov     [rbx+38h], rdx
.text:000000000000A160                 jmp     loc_9CC3
.text:000000000000A160 ; ---------------------------------------------------------------------------
.text:000000000000A165                 align 8
.text:000000000000A168
.text:000000000000A168 loc_A168:                               ; CODE XREF: re_string_reconstruct+1EE↑j
.text:000000000000A168                 mov     rax, [rbx]
.text:000000000000A16B                 mov     rdx, [rbx+78h]
.text:000000000000A16F                 add     rax, rbp
.text:000000000000A172                 test    rdx, rdx
.text:000000000000A175                 movzx   eax, byte ptr [r11+rax-1]
.text:000000000000A17B                 mov     qword ptr [rbx+38h], 0
.text:000000000000A183                 jz      short loc_A189
.text:000000000000A185                 movzx   eax, byte ptr [rdx+rax]
.text:000000000000A189
.text:000000000000A189 loc_A189:                               ; CODE XREF: re_string_reconstruct+5F3↑j
.text:000000000000A189                 mov     rcx, [rbx+80h]
.text:000000000000A190                 movzx   edx, al
.text:000000000000A193                 sar     rdx, 6
.text:000000000000A197                 mov     rcx, [rcx+rdx*8]
.text:000000000000A19B                 mov     edx, 1
.text:000000000000A1A0                 bt      rcx, rax
.text:000000000000A1A4                 jb      short loc_A1C0
.text:000000000000A1A6                 xor     edx, edx
.text:000000000000A1A8                 cmp     al, 0Ah
.text:000000000000A1AA                 jnz     short loc_A1C0
.text:000000000000A1AC                 xor     edx, edx
.text:000000000000A1AE                 cmp     byte ptr [rbx+8Dh], 0
.text:000000000000A1B5                 setnz   dl
.text:000000000000A1B8                 add     edx, edx
.text:000000000000A1BA                 nop     word ptr [rax+rax+00h]
.text:000000000000A1C0
.text:000000000000A1C0 loc_A1C0:                               ; CODE XREF: re_string_reconstruct+614↑j
.text:000000000000A1C0                                         ; re_string_reconstruct+61A↑j
.text:000000000000A1C0                 mov     [rbx+70h], edx
.text:000000000000A1C3                 jmp     loc_9F38
.text:000000000000A1C8 ; ---------------------------------------------------------------------------
.text:000000000000A1C8
.text:000000000000A1C8 loc_A1C8:                               ; CODE XREF: re_string_reconstruct+406↑j
.text:000000000000A1C8                 jnz     loc_9FBC
.text:000000000000A1CE                 xchg    ax, ax
.text:000000000000A1D0
.text:000000000000A1D0 loc_A1D0:                               ; CODE XREF: re_string_reconstruct+41F↑j
.text:000000000000A1D0                 mov     qword ptr [rbx+30h], 0
.text:000000000000A1D8                 xor     edx, edx
.text:000000000000A1DA                 jmp     loc_A001
.text:000000000000A1DF ; ---------------------------------------------------------------------------
.text:000000000000A1DF
.text:000000000000A1DF loc_A1DF:                               ; CODE XREF: re_string_reconstruct+208↑j
.text:000000000000A1DF                 sub     r14, r15
.text:000000000000A1E2                 mov     r12, r14
.text:000000000000A1E5                 mov     [rbx+30h], r14
.text:000000000000A1E9
.text:000000000000A1E9 loc_A1E9:                               ; CODE XREF: re_string_reconstruct+27F↑j
.text:000000000000A1E9                 lea     rsi, [r8-1]
.text:000000000000A1ED                 mov     edx, r10d
.text:000000000000A1F0                 mov     rdi, rbx
.text:000000000000A1F3                 call    re_string_context_at
.text:000000000000A1F8                 mov     [rbx+70h], eax
.text:000000000000A1FB                 jmp     loc_9E3A
.text:000000000000A200 ; ---------------------------------------------------------------------------
.text:000000000000A200
.text:000000000000A200 loc_A200:                               ; CODE XREF: re_string_reconstruct+577↑j
.text:000000000000A200                 mov     rdi, rbx
.text:000000000000A203                 call    build_upper_buffer
.text:000000000000A208                 jmp     loc_9CC3
.text:000000000000A20D ; ---------------------------------------------------------------------------
.text:000000000000A20D
.text:000000000000A20D loc_A20D:                               ; CODE XREF: re_string_reconstruct+1D2↑j
.text:000000000000A20D                 mov     rdx, [rbx+50h]
.text:000000000000A211                 mov     byte ptr [rbx+8Ch], 0
.text:000000000000A218                 add     rdx, rbp
.text:000000000000A21B                 sub     rdx, r15
.text:000000000000A21E                 mov     [rbx+58h], rdx
.text:000000000000A222                 mov     rdx, [rbx+60h]
.text:000000000000A226                 add     rdx, rbp
.text:000000000000A229                 sub     rdx, r15
.text:000000000000A22C                 mov     [rbx+68h], rdx
.text:000000000000A230                 jmp     loc_9D68
.text:000000000000A235 ; ---------------------------------------------------------------------------
.text:000000000000A235
.text:000000000000A235 loc_A235:                               ; CODE XREF: re_string_reconstruct+264↑j
.text:000000000000A235                 test    rax, rax
.text:000000000000A238                 jz      short loc_A2AD
.text:000000000000A23A                 test    r12, r12
.text:000000000000A23D                 jz      short loc_A2AD
.text:000000000000A23F                 mov     rax, [rbx]
.text:000000000000A242                 movzx   edx, byte ptr [rax+r14]
.text:000000000000A247
.text:000000000000A247 loc_A247:                               ; CODE XREF: re_string_reconstruct+71F↓j
.text:000000000000A247                 mov     rax, [rsp+78h+var_60]
.text:000000000000A24C                 mov     [rbx+20h], rax
.text:000000000000A250                 mov     eax, 1
.text:000000000000A255                 jmp     loc_9DFA
.text:000000000000A25A ; ---------------------------------------------------------------------------
.text:000000000000A25A
.text:000000000000A25A loc_A25A:                               ; CODE XREF: re_string_reconstruct+2AE↑j
.text:000000000000A25A                 jle     short loc_A277
.text:000000000000A25C                 mov     rax, [rbx+10h]
.text:000000000000A260                 lea     rdx, [rax+r12*4]
.text:000000000000A264                 nop     dword ptr [rax+00h]
.text:000000000000A268
.text:000000000000A268 loc_A268:                               ; CODE XREF: re_string_reconstruct+6E5↓j
.text:000000000000A268                 mov     dword ptr [rax], 0FFFFFFFFh
.text:000000000000A26E                 add     rax, 4
.text:000000000000A272                 cmp     rdx, rax
.text:000000000000A275                 jnz     short loc_A268
.text:000000000000A277
.text:000000000000A277 loc_A277:                               ; CODE XREF: re_string_reconstruct:loc_A25A↑j
.text:000000000000A277                 cmp     byte ptr [rbx+8Bh], 0
.text:000000000000A27E                 jnz     short loc_A2D8
.text:000000000000A280                 mov     [rbx+38h], r12
.text:000000000000A284                 jmp     loc_9C8A
.text:000000000000A289 ; ---------------------------------------------------------------------------
.text:000000000000A289
.text:000000000000A289 loc_A289:                               ; CODE XREF: re_string_reconstruct+28C↑j
.text:000000000000A289                 mov     edi, edx        ; wc
.text:000000000000A28B                 mov     dword ptr [rsp+78h+var_78], edx
.text:000000000000A28E                 call    _iswalnum
.text:000000000000A293                 test    eax, eax
.text:000000000000A295                 jnz     short loc_A2A3
.text:000000000000A297                 mov     edx, dword ptr [rsp+78h+var_78]
.text:000000000000A29A                 cmp     edx, 5Fh ; '_'
.text:000000000000A29D                 jnz     loc_9E22
.text:000000000000A2A3
.text:000000000000A2A3 loc_A2A3:                               ; CODE XREF: re_string_reconstruct+705↑j
.text:000000000000A2A3                 mov     eax, 1
.text:000000000000A2A8                 jmp     loc_9E37
.text:000000000000A2AD ; ---------------------------------------------------------------------------
.text:000000000000A2AD
.text:000000000000A2AD loc_A2AD:                               ; CODE XREF: re_string_reconstruct+6A8↑j
.text:000000000000A2AD                                         ; re_string_reconstruct+6AD↑j
.text:000000000000A2AD                 xor     edx, edx
.text:000000000000A2AF                 jmp     short loc_A247
.text:000000000000A2B1 ; ---------------------------------------------------------------------------
.text:000000000000A2B1
.text:000000000000A2B1 loc_A2B1:                               ; CODE XREF: re_string_reconstruct+556↑j
.text:000000000000A2B1                 mov     edx, [rsp+78h+wc]
.text:000000000000A2B5                 sub     rax, r12
.text:000000000000A2B8                 mov     qword ptr [rbx+20h], 0
.text:000000000000A2C0                 mov     r12, rax
.text:000000000000A2C3                 mov     [rbx+30h], rax
.text:000000000000A2C7                 cmp     edx, 0FFFFFFFFh
.text:000000000000A2CA                 jnz     loc_9E15
.text:000000000000A2D0                 jmp     loc_A0EC
.text:000000000000A2D0 ; ---------------------------------------------------------------------------
.text:000000000000A2D5                 align 8
.text:000000000000A2D8
.text:000000000000A2D8 loc_A2D8:                               ; CODE XREF: re_string_reconstruct+6EE↑j
.text:000000000000A2D8                 mov     rdi, [rbx+8]    ; s
.text:000000000000A2DC                 mov     rdx, r12        ; n
.text:000000000000A2DF                 mov     esi, 0FFh       ; c
.text:000000000000A2E4                 call    _memset
.text:000000000000A2E9                 mov     r12, [rbx+30h]
.text:000000000000A2ED                 jmp     loc_9E44
.text:000000000000A2F2 ; ---------------------------------------------------------------------------
.text:000000000000A2F2
.text:000000000000A2F2 loc_A2F2:                               ; CODE XREF: re_string_reconstruct+514↑j
.text:000000000000A2F2                 cmp     rdx, 6
.text:000000000000A2F6                 mov     edi, 6
.text:000000000000A2FB                 lea     r11, [rsp+78h+var_46]
.text:000000000000A300                 cmovle  rdi, rdx
.text:000000000000A304                 sub     edi, 1
.text:000000000000A307                 test    edi, edi
.text:000000000000A309                 movsxd  rax, edi
.text:000000000000A30C                 js      short loc_A322
.text:000000000000A30E
.text:000000000000A30E loc_A30E:                               ; CODE XREF: re_string_reconstruct+790↓j
.text:000000000000A30E                 movzx   edi, byte ptr [rsi+rax]
.text:000000000000A312                 movzx   edi, byte ptr [rcx+rdi]
.text:000000000000A316                 mov     [r11+rax], dil
.text:000000000000A31A                 sub     rax, 1
.text:000000000000A31E                 test    eax, eax
.text:000000000000A320                 jns     short loc_A30E
.text:000000000000A322
.text:000000000000A322 loc_A322:                               ; CODE XREF: re_string_reconstruct+77C↑j
.text:000000000000A322                 mov     rsi, r11
.text:000000000000A325                 jmp     loc_A0AA
.text:000000000000A32A ; ---------------------------------------------------------------------------
.text:000000000000A32A
.text:000000000000A32A loc_A32A:                               ; CODE XREF: re_string_reconstruct+14B↑j
.text:000000000000A32A                 call    ___stack_chk_fail
.text:000000000000A32A ; } // starts at 9B90
.text:000000000000A32A re_string_reconstruct endp
.text:000000000000A32A
.text:000000000000A32A ; ---------------------------------------------------------------------------
.text:000000000000A32F                 align 10h
.text:000000000000A330
.text:000000000000A330 ; =============== S U B R O U T I N E =======================================
.text:000000000000A330
.text:000000000000A330
.text:000000000000A330 _sub_epsilon_src_nodes proc near        ; CODE XREF: update_cur_sifted_state+44C↓p
.text:000000000000A330                                         ; update_cur_sifted_state+50A↓p ...
.text:000000000000A330
.text:000000000000A330 var_78          = qword ptr -78h
.text:000000000000A330 var_70          = qword ptr -70h
.text:000000000000A330 var_68          = qword ptr -68h
.text:000000000000A330 var_60          = qword ptr -60h
.text:000000000000A330 var_58          = xmmword ptr -58h
.text:000000000000A330 ptr             = qword ptr -48h
.text:000000000000A330 var_40          = qword ptr -40h
.text:000000000000A330
.text:000000000000A330 ; __unwind {
.text:000000000000A330                 push    r15
.text:000000000000A332                 push    r14
.text:000000000000A334                 mov     r14, rdx
.text:000000000000A337                 push    r13
.text:000000000000A339                 push    r12
.text:000000000000A33B                 lea     rdx, [rsi+rsi*2]
.text:000000000000A33F                 push    rbp
.text:000000000000A340                 push    rbx
.text:000000000000A341                 pxor    xmm0, xmm0
.text:000000000000A345                 sub     rsp, 48h
.text:000000000000A349                 mov     rax, fs:28h
.text:000000000000A352                 mov     [rsp+78h+var_40], rax
.text:000000000000A357                 xor     eax, eax
.text:000000000000A359                 mov     rax, [rdi+38h]
.text:000000000000A35D                 mov     [rsp+78h+ptr], 0
.text:000000000000A366                 movaps  [rsp+78h+var_58], xmm0
.text:000000000000A36B                 mov     [rsp+78h+var_68], rcx
.text:000000000000A370                 lea     rbp, [rax+rdx*8]
.text:000000000000A374                 mov     r10, [rbp+8]
.text:000000000000A378                 test    r10, r10
.text:000000000000A37B                 jle     loc_A562
.text:000000000000A381                 lea     rax, [rsp+78h+var_58]
.text:000000000000A386                 mov     r12, rdi
.text:000000000000A389                 mov     r13, rsi
.text:000000000000A38C                 xor     ebx, ebx
.text:000000000000A38E                 mov     [rsp+78h+var_60], rax
.text:000000000000A393                 jmp     short loc_A3ED
.text:000000000000A393 ; ---------------------------------------------------------------------------
.text:000000000000A395                 align 8
.text:000000000000A398
.text:000000000000A398 loc_A398:                               ; CODE XREF: _sub_epsilon_src_nodes+11B↓j
.text:000000000000A398                 test    rax, rax
.text:000000000000A39B                 jnz     loc_A478
.text:000000000000A3A1                 mov     rdi, [r14+8]
.text:000000000000A3A5                 lea     rsi, [r14+10h]
.text:000000000000A3A9                 mov     rdx, r8
.text:000000000000A3AC                 call    re_node_set_contains_isra_3
.text:000000000000A3B1                 test    rax, rax
.text:000000000000A3B4                 jz      loc_A478
.text:000000000000A3BA
.text:000000000000A3BA loc_A3BA:                               ; CODE XREF: _sub_epsilon_src_nodes+139↓j
.text:000000000000A3BA                                         ; _sub_epsilon_src_nodes+182↓j
.text:000000000000A3BA                 mov     rdx, [r12+38h]
.text:000000000000A3BF                 mov     rsi, [rsp+78h+var_68]
.text:000000000000A3C4                 mov     rdi, [rsp+78h+var_60]
.text:000000000000A3C9                 add     rdx, r9
.text:000000000000A3CC                 call    re_node_set_add_intersect
.text:000000000000A3D1                 test    eax, eax
.text:000000000000A3D3                 jnz     loc_A550
.text:000000000000A3D9                 mov     r10, [rbp+8]
.text:000000000000A3DD                 nop     dword ptr [rax]
.text:000000000000A3E0
.text:000000000000A3E0 loc_A3E0:                               ; CODE XREF: _sub_epsilon_src_nodes+C8↓j
.text:000000000000A3E0                                         ; _sub_epsilon_src_nodes+D9↓j ...
.text:000000000000A3E0                 add     rbx, 1
.text:000000000000A3E4                 cmp     r10, rbx
.text:000000000000A3E7                 jle     loc_A4C0
.text:000000000000A3ED
.text:000000000000A3ED loc_A3ED:                               ; CODE XREF: _sub_epsilon_src_nodes+63↑j
.text:000000000000A3ED                 mov     rax, [rbp+10h]
.text:000000000000A3F1                 mov     rax, [rax+rbx*8]
.text:000000000000A3F5                 cmp     r13, rax
.text:000000000000A3F8                 jz      short loc_A3E0
.text:000000000000A3FA                 mov     rdx, rax
.text:000000000000A3FD                 shl     rdx, 4
.text:000000000000A401                 add     rdx, [r12]
.text:000000000000A405                 test    byte ptr [rdx+8], 8
.text:000000000000A409                 jz      short loc_A3E0
.text:000000000000A40B                 lea     r9, [rax+rax*2]
.text:000000000000A40F                 mov     rcx, [r12+28h]
.text:000000000000A414                 lea     r11, [rbp+10h]
.text:000000000000A418                 mov     rdi, r10
.text:000000000000A41B                 shl     r9, 3
.text:000000000000A41F                 mov     rsi, r11
.text:000000000000A422                 add     rcx, r9
.text:000000000000A425                 mov     r15, [rcx+10h]
.text:000000000000A429                 mov     [rsp+78h+var_70], rcx
.text:000000000000A42E                 mov     r8, [r15]
.text:000000000000A431                 mov     rdx, r8
.text:000000000000A434                 mov     [rsp+78h+var_78], r8
.text:000000000000A438                 call    re_node_set_contains_isra_3
.text:000000000000A43D                 mov     rcx, [rsp+78h+var_70]
.text:000000000000A442                 mov     r8, [rsp+78h+var_78]
.text:000000000000A446                 cmp     qword ptr [rcx+8], 1
.text:000000000000A44B                 jg      loc_A398
.text:000000000000A451                 test    rax, rax
.text:000000000000A454                 jnz     short loc_A3E0
.text:000000000000A456                 mov     rdi, [r14+8]
.text:000000000000A45A                 lea     rsi, [r14+10h]
.text:000000000000A45E                 mov     rdx, r8
.text:000000000000A461                 call    re_node_set_contains_isra_3
.text:000000000000A466                 test    rax, rax
.text:000000000000A469                 jnz     loc_A3BA
.text:000000000000A46F                 jmp     loc_A3E0
.text:000000000000A46F ; ---------------------------------------------------------------------------
.text:000000000000A474                 align 8
.text:000000000000A478
.text:000000000000A478 loc_A478:                               ; CODE XREF: _sub_epsilon_src_nodes+6B↑j
.text:000000000000A478                                         ; _sub_epsilon_src_nodes+84↑j
.text:000000000000A478                 mov     r15, [r15+8]
.text:000000000000A47C                 test    r15, r15
.text:000000000000A47F                 jle     loc_A3E0
.text:000000000000A485                 mov     rdx, r15
.text:000000000000A488                 mov     rsi, r11
.text:000000000000A48B                 mov     rdi, r10
.text:000000000000A48E                 call    re_node_set_contains_isra_3
.text:000000000000A493                 test    rax, rax
.text:000000000000A496                 jnz     loc_A3E0
.text:000000000000A49C                 mov     rdi, [r14+8]
.text:000000000000A4A0                 lea     rsi, [r14+10h]
.text:000000000000A4A4                 call    re_node_set_contains_isra_3
.text:000000000000A4A9                 test    rax, rax
.text:000000000000A4AC                 jz      loc_A3E0
.text:000000000000A4B2                 jmp     loc_A3BA
.text:000000000000A4B2 ; ---------------------------------------------------------------------------
.text:000000000000A4B7                 align 20h
.text:000000000000A4C0
.text:000000000000A4C0 loc_A4C0:                               ; CODE XREF: _sub_epsilon_src_nodes+B7↑j
.text:000000000000A4C0                 xor     r9d, r9d
.text:000000000000A4C3                 test    r10, r10
.text:000000000000A4C6                 lea     r11, [rsp+78h+ptr]
.text:000000000000A4CB                 jle     short loc_A51C
.text:000000000000A4CD                 nop     dword ptr [rax]
.text:000000000000A4D0
.text:000000000000A4D0 loc_A4D0:                               ; CODE XREF: _sub_epsilon_src_nodes+1EA↓j
.text:000000000000A4D0                 mov     rax, [rbp+10h]
.text:000000000000A4D4                 mov     rdi, qword ptr [rsp+78h+var_58+8]
.text:000000000000A4D9                 mov     rsi, r11
.text:000000000000A4DC                 mov     r10, [rax+r9*8]
.text:000000000000A4E0                 mov     rdx, r10
.text:000000000000A4E3                 call    re_node_set_contains_isra_3
.text:000000000000A4E8                 test    rax, rax
.text:000000000000A4EB                 jnz     short loc_A512
.text:000000000000A4ED                 lea     rbx, [r14+10h]
.text:000000000000A4F1                 mov     rdi, [r14+8]
.text:000000000000A4F5                 mov     rsi, rbx
.text:000000000000A4F8                 call    re_node_set_contains_isra_3
.text:000000000000A4FD                 sub     rax, 1
.text:000000000000A501                 mov     rdx, rax
.text:000000000000A504                 js      short loc_A512
.text:000000000000A506                 lea     rdi, [r14+8]
.text:000000000000A50A                 mov     rsi, rbx
.text:000000000000A50D                 call    re_node_set_remove_at_isra_4_part_5
.text:000000000000A512
.text:000000000000A512 loc_A512:                               ; CODE XREF: _sub_epsilon_src_nodes+1BB↑j
.text:000000000000A512                                         ; _sub_epsilon_src_nodes+1D4↑j
.text:000000000000A512                 add     r9, 1
.text:000000000000A516                 cmp     [rbp+8], r9
.text:000000000000A51A                 jg      short loc_A4D0
.text:000000000000A51C
.text:000000000000A51C loc_A51C:                               ; CODE XREF: _sub_epsilon_src_nodes+19B↑j
.text:000000000000A51C                 mov     rdi, [rsp+78h+ptr] ; ptr
.text:000000000000A521
.text:000000000000A521 loc_A521:                               ; CODE XREF: _sub_epsilon_src_nodes+234↓j
.text:000000000000A521                 call    _free
.text:000000000000A526                 xor     eax, eax
.text:000000000000A528
.text:000000000000A528 loc_A528:                               ; CODE XREF: _sub_epsilon_src_nodes+230↓j
.text:000000000000A528                 mov     rsi, [rsp+78h+var_40]
.text:000000000000A52D                 xor     rsi, fs:28h
.text:000000000000A536                 jnz     short loc_A566
.text:000000000000A538                 add     rsp, 48h
.text:000000000000A53C                 pop     rbx
.text:000000000000A53D                 pop     rbp
.text:000000000000A53E                 pop     r12
.text:000000000000A540                 pop     r13
.text:000000000000A542                 pop     r14
.text:000000000000A544                 pop     r15
.text:000000000000A546                 retn
.text:000000000000A546 ; ---------------------------------------------------------------------------
.text:000000000000A547                 align 10h
.text:000000000000A550
.text:000000000000A550 loc_A550:                               ; CODE XREF: _sub_epsilon_src_nodes+A3↑j
.text:000000000000A550                 mov     rdi, [rsp+78h+ptr] ; ptr
.text:000000000000A555                 mov     dword ptr [rsp+78h+var_78], eax
.text:000000000000A558                 call    _free
.text:000000000000A55D                 mov     eax, dword ptr [rsp+78h+var_78]
.text:000000000000A560                 jmp     short loc_A528
.text:000000000000A562 ; ---------------------------------------------------------------------------
.text:000000000000A562
.text:000000000000A562 loc_A562:                               ; CODE XREF: _sub_epsilon_src_nodes+4B↑j
.text:000000000000A562                 xor     edi, edi
.text:000000000000A564                 jmp     short loc_A521
.text:000000000000A566 ; ---------------------------------------------------------------------------
.text:000000000000A566
.text:000000000000A566 loc_A566:                               ; CODE XREF: _sub_epsilon_src_nodes+206↑j
.text:000000000000A566                 call    ___stack_chk_fail
.text:000000000000A566 ; } // starts at A330
.text:000000000000A566 _sub_epsilon_src_nodes endp
.text:000000000000A566
.text:000000000000A566 ; ---------------------------------------------------------------------------
.text:000000000000A56B                 align 10h
.text:000000000000A570
.text:000000000000A570 ; =============== S U B R O U T I N E =======================================
.text:000000000000A570
.text:000000000000A570
.text:000000000000A570 build_trtable   proc near               ; CODE XREF: re_search_internal+1090↓p
.text:000000000000A570
.text:000000000000A570 var_130         = qword ptr -130h
.text:000000000000A570 ptr             = qword ptr -128h
.text:000000000000A570 var_120         = qword ptr -120h
.text:000000000000A570 var_118         = qword ptr -118h
.text:000000000000A570 var_110         = qword ptr -110h
.text:000000000000A570 var_108         = qword ptr -108h
.text:000000000000A570 var_100         = qword ptr -100h
.text:000000000000A570 var_F8          = qword ptr -0F8h
.text:000000000000A570 var_E9          = byte ptr -0E9h
.text:000000000000A570 var_E8          = qword ptr -0E8h
.text:000000000000A570 var_E0          = qword ptr -0E0h
.text:000000000000A570 var_CC          = dword ptr -0CCh
.text:000000000000A570 var_C8          = qword ptr -0C8h
.text:000000000000A570 var_C0          = qword ptr -0C0h
.text:000000000000A570 var_B8          = qword ptr -0B8h
.text:000000000000A570 var_A8          = xmmword ptr -0A8h
.text:000000000000A570 var_98          = xmmword ptr -98h
.text:000000000000A570 var_88          = xmmword ptr -88h
.text:000000000000A570 var_78          = xmmword ptr -78h
.text:000000000000A570 var_68          = xmmword ptr -68h
.text:000000000000A570 var_58          = xmmword ptr -58h
.text:000000000000A570 var_40          = qword ptr -40h
.text:000000000000A570
.text:000000000000A570 ; __unwind {
.text:000000000000A570                 push    r15
.text:000000000000A572                 push    r14
.text:000000000000A574                 mov     r15, rdi
.text:000000000000A577                 push    r13
.text:000000000000A579                 push    r12
.text:000000000000A57B                 mov     edi, 3800h      ; size
.text:000000000000A580                 push    rbp
.text:000000000000A581                 push    rbx
.text:000000000000A582                 sub     rsp, 108h
.text:000000000000A589                 mov     rax, fs:28h
.text:000000000000A592                 mov     [rsp+138h+var_40], rax
.text:000000000000A59A                 xor     eax, eax
.text:000000000000A59C                 mov     [rsp+138h+var_130], rsi
.text:000000000000A5A1                 call    _malloc
.text:000000000000A5A6                 test    rax, rax
.text:000000000000A5A9                 mov     [rsp+138h+var_120], rax
.text:000000000000A5AE                 jz      loc_A980
.text:000000000000A5B4                 mov     rax, [rsp+138h+var_120]
.text:000000000000A5B9                 pxor    xmm0, xmm0
.text:000000000000A5BD                 lea     rbx, [rax+1800h]
.text:000000000000A5C4                 mov     rax, [rsp+138h+var_130]
.text:000000000000A5C9                 movaps  [rsp+138h+var_A8], xmm0
.text:000000000000A5D1                 mov     [rsp+138h+var_F8], rbx
.text:000000000000A5D6                 movaps  [rsp+138h+var_98], xmm0
.text:000000000000A5DE                 cmp     qword ptr [rax+10h], 0
.text:000000000000A5E3                 mov     qword ptr [rax+58h], 0
.text:000000000000A5EB                 mov     qword ptr [rax+60h], 0
.text:000000000000A5F3                 jle     loc_B06A
.text:000000000000A5F9                 mov     [rsp+138h+var_108], r15
.text:000000000000A5FE                 xor     ebp, ebp
.text:000000000000A600                 mov     [rsp+138h+ptr], 0
.text:000000000000A609                 mov     r15, rbx
.text:000000000000A60C
.text:000000000000A60C loc_A60C:                               ; CODE XREF: build_trtable+113↓j
.text:000000000000A60C                 mov     rbx, [rsp+138h+ptr]
.text:000000000000A611                 lea     rax, ds:0[rbx*8]
.text:000000000000A619                 mov     [rsp+138h+var_118], rax
.text:000000000000A61E                 mov     rax, [rsp+138h+var_130]
.text:000000000000A623                 mov     rax, [rax+18h]
.text:000000000000A627                 mov     r13, [rax+rbx*8]
.text:000000000000A62B                 mov     rax, [rsp+138h+var_108]
.text:000000000000A630                 shl     r13, 4
.text:000000000000A634                 add     r13, [rax]
.text:000000000000A637                 movzx   r14d, byte ptr [r13+8]
.text:000000000000A63C                 mov     eax, [r13+8]
.text:000000000000A640                 shr     eax, 8
.text:000000000000A643                 and     ax, 3FFh
.text:000000000000A647                 cmp     r14d, 1
.text:000000000000A64B                 jz      loc_A9B0
.text:000000000000A651                 cmp     r14d, 3
.text:000000000000A655                 jz      loc_AE20
.text:000000000000A65B                 cmp     r14d, 5
.text:000000000000A65F                 jz      loc_ACE0
.text:000000000000A665                 cmp     r14d, 7
.text:000000000000A669                 jz      loc_AE49
.text:000000000000A66F
.text:000000000000A66F loc_A66F:                               ; CODE XREF: build_trtable+4CF↓j
.text:000000000000A66F                                         ; build_trtable+524↓j ...
.text:000000000000A66F                 mov     rbx, [rsp+138h+var_130]
.text:000000000000A674                 add     [rsp+138h+ptr], 1
.text:000000000000A67A                 mov     rax, [rsp+138h+ptr]
.text:000000000000A67F                 cmp     rax, [rbx+10h]
.text:000000000000A683                 jl      short loc_A60C
.text:000000000000A685                 test    rbp, rbp
.text:000000000000A688                 mov     r15, [rsp+138h+var_108]
.text:000000000000A68D                 jle     loc_B0E9
.text:000000000000A693                 lea     rbx, [rbp+1]
.text:000000000000A697                 mov     [rsp+138h+var_C0], 0
.text:000000000000A6A0                 mov     [rsp+138h+var_C8], rbx
.text:000000000000A6A5                 shl     rbx, 3
.text:000000000000A6A9                 mov     rdi, rbx        ; size
.text:000000000000A6AC                 call    _malloc
.text:000000000000A6B1                 test    rax, rax
.text:000000000000A6B4                 mov     r12, rax
.text:000000000000A6B7                 mov     [rsp+138h+var_B8], rax
.text:000000000000A6BF                 jz      loc_AEBF
.text:000000000000A6C5                 mov     rax, 0AAAAAAAAAAAA855h
.text:000000000000A6CF                 mov     [rsp+138h+var_CC], 0
.text:000000000000A6D7                 cmp     rbp, rax
.text:000000000000A6DA                 jg      loc_AEBF
.text:000000000000A6E0                 lea     rax, [rbp+rbp*2+0]
.text:000000000000A6E5                 shl     rax, 3
.text:000000000000A6E9                 mov     rdi, rax        ; size
.text:000000000000A6EC                 mov     [rsp+138h+var_E0], rax
.text:000000000000A6F1                 call    _malloc
.text:000000000000A6F6                 test    rax, rax
.text:000000000000A6F9                 mov     [rsp+138h+ptr], rax
.text:000000000000A6FE                 jz      loc_AEBF
.text:000000000000A704                 mov     rax, [rsp+138h+ptr]
.text:000000000000A709                 sub     rbx, 8
.text:000000000000A70D                 mov     r12, [rsp+138h+var_F8]
.text:000000000000A712                 pxor    xmm0, xmm0
.text:000000000000A716                 lea     r14, [rsp+138h+var_C8]
.text:000000000000A71B                 mov     [rsp+138h+var_118], rbp
.text:000000000000A720                 mov     [rsp+138h+var_E9], 0
.text:000000000000A725                 mov     rbp, r15
.text:000000000000A728                 add     rax, rbx
.text:000000000000A72B                 mov     [rsp+138h+var_E8], r12
.text:000000000000A730                 add     rbx, rax
.text:000000000000A733                 mov     [rsp+138h+var_108], rax
.text:000000000000A738                 mov     rax, [rsp+138h+var_120]
.text:000000000000A73D                 movaps  [rsp+138h+var_68], xmm0
.text:000000000000A745                 mov     [rsp+138h+var_100], rbx
.text:000000000000A74A                 xor     ebx, ebx
.text:000000000000A74C                 lea     r13, [rax+8]
.text:000000000000A750                 lea     rax, [rsp+138h+var_CC]
.text:000000000000A755                 movaps  [rsp+138h+var_58], xmm0
.text:000000000000A75D                 mov     [rsp+138h+var_110], rax
.text:000000000000A762
.text:000000000000A762 loc_A762:                               ; CODE XREF: build_trtable+2C2↓j
.text:000000000000A762                 mov     [rsp+138h+var_C0], 0
.text:000000000000A76B                 cmp     qword ptr [r13+0], 0
.text:000000000000A770                 jle     short loc_A7B8
.text:000000000000A772                 xor     r15d, r15d
.text:000000000000A775                 nop     dword ptr [rax]
.text:000000000000A778
.text:000000000000A778 loc_A778:                               ; CODE XREF: build_trtable+246↓j
.text:000000000000A778                 mov     rax, [r13+8]
.text:000000000000A77C                 mov     rdx, [rax+r15*8]
.text:000000000000A780                 mov     rax, [rbp+18h]
.text:000000000000A784                 mov     rax, [rax+rdx*8]
.text:000000000000A788                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000A78C                 jz      short loc_A7AE
.text:000000000000A78E                 lea     rdx, [rax+rax*2]
.text:000000000000A792                 mov     rax, [rbp+30h]
.text:000000000000A796                 mov     rdi, r14
.text:000000000000A799                 lea     rsi, [rax+rdx*8]
.text:000000000000A79D                 call    re_node_set_merge
.text:000000000000A7A2                 test    eax, eax
.text:000000000000A7A4                 mov     [rsp+138h+var_CC], eax
.text:000000000000A7A8                 jnz     loc_AEA8
.text:000000000000A7AE
.text:000000000000A7AE loc_A7AE:                               ; CODE XREF: build_trtable+21C↑j
.text:000000000000A7AE                 add     r15, 1
.text:000000000000A7B2                 cmp     [r13+0], r15
.text:000000000000A7B6                 jg      short loc_A778
.text:000000000000A7B8
.text:000000000000A7B8 loc_A7B8:                               ; CODE XREF: build_trtable+200↑j
.text:000000000000A7B8                 mov     rdi, [rsp+138h+var_110]
.text:000000000000A7BD                 xor     ecx, ecx
.text:000000000000A7BF                 mov     rsi, rbp
.text:000000000000A7C2                 mov     rdx, r14
.text:000000000000A7C5                 call    re_acquire_state_context
.text:000000000000A7CA                 mov     rsi, [rsp+138h+ptr]
.text:000000000000A7CF                 test    rax, rax
.text:000000000000A7D2                 mov     [rsi+rbx*8], rax
.text:000000000000A7D6                 jz      loc_AF88
.text:000000000000A7DC
.text:000000000000A7DC loc_A7DC:                               ; CODE XREF: build_trtable+A1E↓j
.text:000000000000A7DC                 cmp     byte ptr [rax+68h], 0
.text:000000000000A7E0                 js      loc_AF00
.text:000000000000A7E6                 mov     rdi, [rsp+138h+var_108]
.text:000000000000A7EB                 mov     rsi, [rsp+138h+var_100]
.text:000000000000A7F0                 mov     [rdi+rbx*8], rax
.text:000000000000A7F4                 mov     rax, [rsp+138h+ptr]
.text:000000000000A7F9                 mov     rax, [rax+rbx*8]
.text:000000000000A7FD                 mov     [rsi+rbx*8], rax
.text:000000000000A801
.text:000000000000A801 loc_A801:                               ; CODE XREF: build_trtable+9FC↓j
.text:000000000000A801                                         ; build_trtable+A08↓j
.text:000000000000A801                 lea     rdx, [rsp+138h+var_68]
.text:000000000000A809                 xor     eax, eax
.text:000000000000A80B
.text:000000000000A80B loc_A80B:                               ; CODE XREF: build_trtable+2AF↓j
.text:000000000000A80B                 mov     rcx, [rdx+rax]
.text:000000000000A80F                 or      rcx, [r12+rax]
.text:000000000000A813                 mov     [rdx+rax], rcx
.text:000000000000A817                 add     rax, 8
.text:000000000000A81B                 cmp     rax, 20h ; ' '
.text:000000000000A81F                 jnz     short loc_A80B
.text:000000000000A821                 add     rbx, 1
.text:000000000000A825                 add     r13, 18h
.text:000000000000A829                 add     r12, 20h ; ' '
.text:000000000000A82D                 cmp     rbx, [rsp+138h+var_118]
.text:000000000000A832                 jnz     loc_A762
.text:000000000000A838                 cmp     [rsp+138h+var_E9], 0
.text:000000000000A83D                 mov     r15, rbp
.text:000000000000A840                 mov     rbp, [rsp+138h+var_118]
.text:000000000000A845                 mov     [rsp+138h+var_118], rdx
.text:000000000000A84A                 jnz     loc_AF99
.text:000000000000A850                 mov     esi, 100h       ; size
.text:000000000000A855                 mov     edi, 8          ; nmemb
.text:000000000000A85A                 call    _calloc
.text:000000000000A85F                 mov     r11, rax
.text:000000000000A862                 mov     rax, [rsp+138h+var_130]
.text:000000000000A867                 test    r11, r11
.text:000000000000A86A                 mov     [rax+58h], r11
.text:000000000000A86E                 jz      loc_AEAD
.text:000000000000A874                 mov     rbx, [rsp+138h+var_F8]
.text:000000000000A879                 mov     r12, [rsp+138h+ptr]
.text:000000000000A87E                 xor     r9d, r9d
.text:000000000000A881                 mov     r13, [rsp+138h+var_108]
.text:000000000000A886                 mov     rdx, [rsp+138h+var_118]
.text:000000000000A88B                 add     rbx, 20h ; ' '
.text:000000000000A88F
.text:000000000000A88F loc_A88F:                               ; CODE XREF: build_trtable+35C↓j
.text:000000000000A88F                 mov     rax, [rdx+r9]
.text:000000000000A893                 test    rax, rax
.text:000000000000A896                 jz      short loc_A8C4
.text:000000000000A898                 mov     rsi, r9
.text:000000000000A89B                 mov     ecx, 1
.text:000000000000A8A0                 shl     rsi, 6
.text:000000000000A8A4                 add     rsi, r11
.text:000000000000A8A7                 nop     word ptr [rax+rax+00000000h]
.text:000000000000A8B0
.text:000000000000A8B0 loc_A8B0:                               ; CODE XREF: build_trtable+352↓j
.text:000000000000A8B0                 test    al, 1
.text:000000000000A8B2                 jnz     loc_B018
.text:000000000000A8B8
.text:000000000000A8B8 loc_A8B8:                               ; CODE XREF: build_trtable+AE9↓j
.text:000000000000A8B8                                         ; build_trtable+AF5↓j
.text:000000000000A8B8                 add     rcx, rcx
.text:000000000000A8BB                 add     rsi, 8
.text:000000000000A8BF                 shr     rax, 1
.text:000000000000A8C2                 jnz     short loc_A8B0
.text:000000000000A8C4
.text:000000000000A8C4 loc_A8C4:                               ; CODE XREF: build_trtable+326↑j
.text:000000000000A8C4                 add     r9, 8
.text:000000000000A8C8                 cmp     r9, 20h ; ' '
.text:000000000000A8CC                 jnz     short loc_A88F
.text:000000000000A8CE
.text:000000000000A8CE loc_A8CE:                               ; CODE XREF: build_trtable+AA0↓j
.text:000000000000A8CE                 test    byte ptr [rsp+138h+var_68+1], 4
.text:000000000000A8D6                 jz      short loc_A912
.text:000000000000A8D8                 xor     eax, eax
.text:000000000000A8DA                 mov     rdx, [rsp+138h+var_E8]
.text:000000000000A8DF                 jmp     short loc_A8EE
.text:000000000000A8E1 ; ---------------------------------------------------------------------------
.text:000000000000A8E1
.text:000000000000A8E1 loc_A8E1:                               ; CODE XREF: build_trtable+385↓j
.text:000000000000A8E1                 add     rax, 1
.text:000000000000A8E5                 add     rdx, 20h ; ' '
.text:000000000000A8E9                 cmp     rax, rbp
.text:000000000000A8EC                 jz      short loc_A912
.text:000000000000A8EE
.text:000000000000A8EE loc_A8EE:                               ; CODE XREF: build_trtable+36F↑j
.text:000000000000A8EE                 test    qword ptr [rdx], 400h
.text:000000000000A8F5                 jz      short loc_A8E1
.text:000000000000A8F7                 mov     rbx, [rsp+138h+var_100]
.text:000000000000A8FC                 cmp     [rsp+138h+var_E9], 0
.text:000000000000A901                 mov     rax, [rbx+rax*8]
.text:000000000000A905                 mov     [r11+50h], rax
.text:000000000000A909                 jz      short loc_A912
.text:000000000000A90B                 mov     [r11+850h], rax
.text:000000000000A912
.text:000000000000A912 loc_A912:                               ; CODE XREF: build_trtable+366↑j
.text:000000000000A912                                         ; build_trtable+37C↑j ...
.text:000000000000A912                 mov     rdi, [rsp+138h+ptr] ; ptr
.text:000000000000A917                 call    _free
.text:000000000000A91C                 mov     rdi, [rsp+138h+var_B8] ; ptr
.text:000000000000A924                 call    _free
.text:000000000000A929                 mov     rax, [rsp+138h+var_120]
.text:000000000000A92E                 mov     rbx, [rsp+138h+var_E0]
.text:000000000000A933                 lea     rbp, [rax+10h]
.text:000000000000A937                 add     rbx, rbp
.text:000000000000A93A
.text:000000000000A93A loc_A93A:                               ; CODE XREF: build_trtable+3DA↓j
.text:000000000000A93A                 mov     rdi, [rbp+0]    ; ptr
.text:000000000000A93E                 add     rbp, 18h
.text:000000000000A942                 call    _free
.text:000000000000A947                 cmp     rbx, rbp
.text:000000000000A94A                 jnz     short loc_A93A
.text:000000000000A94C                 mov     rdi, [rsp+138h+var_120] ; ptr
.text:000000000000A951                 call    _free
.text:000000000000A956                 mov     eax, 1
.text:000000000000A95B                 jmp     short loc_A982
.text:000000000000A95D ; ---------------------------------------------------------------------------
.text:000000000000A95D
.text:000000000000A95D loc_A95D:                               ; CODE XREF: build_trtable+707↓j
.text:000000000000A95D                 test    rbp, rbp
.text:000000000000A960                 mov     qword ptr [rbx+8], 0
.text:000000000000A968                 mov     qword ptr [rbx], 0
.text:000000000000A96F                 jnz     loc_ACA0
.text:000000000000A975                 mov     rdi, [rsp+138h+var_120] ; ptr
.text:000000000000A97A                 call    _free
.text:000000000000A97F                 nop
.text:000000000000A980
.text:000000000000A980 loc_A980:                               ; CODE XREF: build_trtable+3E↑j
.text:000000000000A980                                         ; build_trtable+763↓j ...
.text:000000000000A980                 xor     eax, eax
.text:000000000000A982
.text:000000000000A982 loc_A982:                               ; CODE XREF: build_trtable+3EB↑j
.text:000000000000A982                                         ; build_trtable+B22↓j
.text:000000000000A982                 mov     rbx, [rsp+138h+var_40]
.text:000000000000A98A                 xor     rbx, fs:28h
.text:000000000000A993                 jnz     loc_B0E4
.text:000000000000A999                 add     rsp, 108h
.text:000000000000A9A0                 pop     rbx
.text:000000000000A9A1                 pop     rbp
.text:000000000000A9A2                 pop     r12
.text:000000000000A9A4                 pop     r13
.text:000000000000A9A6                 pop     r14
.text:000000000000A9A8                 pop     r15
.text:000000000000A9AA                 retn
.text:000000000000A9AA ; ---------------------------------------------------------------------------
.text:000000000000A9AB                 align 10h
.text:000000000000A9B0
.text:000000000000A9B0 loc_A9B0:                               ; CODE XREF: build_trtable+DB↑j
.text:000000000000A9B0                 movzx   ecx, byte ptr [r13+0]
.text:000000000000A9B5                 lea     r12, [rsp+138h+var_A8]
.text:000000000000A9BD                 mov     edi, 1
.text:000000000000A9C2                 mov     rdx, rcx
.text:000000000000A9C5                 and     ecx, 3Fh
.text:000000000000A9C8                 shr     rdx, 3
.text:000000000000A9CC                 shl     rdi, cl
.text:000000000000A9CF                 and     edx, 18h
.text:000000000000A9D2                 or      [r12+rdx], rdi
.text:000000000000A9D6
.text:000000000000A9D6 loc_A9D6:                               ; CODE XREF: build_trtable+7C9↓j
.text:000000000000A9D6                                         ; build_trtable+7D8↓j ...
.text:000000000000A9D6                 test    ax, ax
.text:000000000000A9D9                 jz      loc_AAA0
.text:000000000000A9DF                 test    al, 20h
.text:000000000000A9E1                 jnz     loc_AD50
.text:000000000000A9E7
.text:000000000000A9E7 loc_A9E7:                               ; CODE XREF: build_trtable+80C↓j
.text:000000000000A9E7                 test    al, 80h
.text:000000000000A9E9                 jnz     loc_AC84
.text:000000000000A9EF                 test    al, 4
.text:000000000000A9F1                 jz      short loc_AA45
.text:000000000000A9F3                 cmp     r14d, 1
.text:000000000000A9F7                 jz      loc_ADD5
.text:000000000000A9FD                 mov     r8, [rsp+138h+var_108]
.text:000000000000AA02                 cmp     dword ptr [r8+0B4h], 1
.text:000000000000AA0A                 jle     loc_AE62
.text:000000000000AA10
.text:000000000000AA10 loc_AA10:                               ; CODE XREF: build_trtable+87D↓j
.text:000000000000AA10                 mov     rdi, [r8+78h]
.text:000000000000AA14                 xor     esi, esi
.text:000000000000AA16                 xor     ecx, ecx
.text:000000000000AA18
.text:000000000000AA18 loc_AA18:                               ; CODE XREF: build_trtable+4CA↓j
.text:000000000000AA18                 mov     rdx, [rdi+rcx*8]
.text:000000000000AA1C                 not     rdx
.text:000000000000AA1F                 or      rdx, [r8+rcx*8+0B8h]
.text:000000000000AA27                 and     rdx, [r12+rcx*8]
.text:000000000000AA2B                 mov     [r12+rcx*8], rdx
.text:000000000000AA2F                 add     rcx, 1
.text:000000000000AA33                 or      rsi, rdx
.text:000000000000AA36                 cmp     rcx, 4
.text:000000000000AA3A                 jnz     short loc_AA18
.text:000000000000AA3C                 test    rsi, rsi
.text:000000000000AA3F                 jz      loc_A66F
.text:000000000000AA45
.text:000000000000AA45 loc_AA45:                               ; CODE XREF: build_trtable+481↑j
.text:000000000000AA45                                         ; build_trtable+91B↓j
.text:000000000000AA45                 test    al, 8
.text:000000000000AA47                 jz      short loc_AAA0
.text:000000000000AA49                 cmp     r14d, 1
.text:000000000000AA4D                 jz      loc_AD81
.text:000000000000AA53                 mov     rdi, [rsp+138h+var_108]
.text:000000000000AA58                 cmp     dword ptr [rdi+0B4h], 1
.text:000000000000AA5F                 jle     loc_AD9E
.text:000000000000AA65
.text:000000000000AA65 loc_AA65:                               ; CODE XREF: build_trtable+828↓j
.text:000000000000AA65                 mov     rsi, [rdi+78h]
.text:000000000000AA69                 xor     ecx, ecx
.text:000000000000AA6B                 xor     edx, edx
.text:000000000000AA6D
.text:000000000000AA6D loc_AA6D:                               ; CODE XREF: build_trtable+51F↓j
.text:000000000000AA6D                 mov     rax, [rdi+rdx*8+0B8h]
.text:000000000000AA75                 and     rax, [rsi+rdx*8]
.text:000000000000AA79                 not     rax
.text:000000000000AA7C                 and     rax, [r12+rdx*8]
.text:000000000000AA80                 mov     [r12+rdx*8], rax
.text:000000000000AA84                 add     rdx, 1
.text:000000000000AA88                 or      rcx, rax
.text:000000000000AA8B                 cmp     rdx, 4
.text:000000000000AA8F                 jnz     short loc_AA6D
.text:000000000000AA91                 test    rcx, rcx
.text:000000000000AA94                 jz      loc_A66F
.text:000000000000AA9A                 nop     word ptr [rax+rax+00h]
.text:000000000000AAA0
.text:000000000000AAA0 loc_AAA0:                               ; CODE XREF: build_trtable+469↑j
.text:000000000000AAA0                                         ; build_trtable+4D7↑j ...
.text:000000000000AAA0                 xor     ebx, ebx
.text:000000000000AAA2                 test    rbp, rbp
.text:000000000000AAA5                 jle     loc_AC0B
.text:000000000000AAAB                 mov     [rsp+138h+var_110], r13
.text:000000000000AAB0                 mov     r13, r15
.text:000000000000AAB3                 nop     dword ptr [rax+rax+00h]
.text:000000000000AAB8
.text:000000000000AAB8 loc_AAB8:                               ; CODE XREF: build_trtable+692↓j
.text:000000000000AAB8                 mov     r10, rbx
.text:000000000000AABB                 shl     r10, 5
.text:000000000000AABF                 cmp     r14d, 1
.text:000000000000AAC3                 jnz     short loc_AAE8
.text:000000000000AAC5                 mov     rax, [rsp+138h+var_110]
.text:000000000000AACA                 movzx   edx, byte ptr [rax]
.text:000000000000AACD                 mov     rax, rdx
.text:000000000000AAD0                 shr     rax, 3
.text:000000000000AAD4                 and     eax, 18h
.text:000000000000AAD7                 add     rax, r13
.text:000000000000AADA                 mov     rax, [rax+r10]
.text:000000000000AADE                 bt      rax, rdx
.text:000000000000AAE2                 jnb     loc_ABFB
.text:000000000000AAE8
.text:000000000000AAE8 loc_AAE8:                               ; CODE XREF: build_trtable+553↑j
.text:000000000000AAE8                 lea     rdi, [r13+r10+0]
.text:000000000000AAED                 lea     rsi, [rsp+138h+var_88]
.text:000000000000AAF5                 xor     ecx, ecx
.text:000000000000AAF7                 xor     eax, eax
.text:000000000000AAF9
.text:000000000000AAF9 loc_AAF9:                               ; CODE XREF: build_trtable+5A0↓j
.text:000000000000AAF9                 mov     rdx, [r12+rax*8]
.text:000000000000AAFD                 and     rdx, [rdi+rax*8]
.text:000000000000AB01                 mov     [rsi+rax*8], rdx
.text:000000000000AB05                 add     rax, 1
.text:000000000000AB09                 or      rcx, rdx
.text:000000000000AB0C                 cmp     rax, 4
.text:000000000000AB10                 jnz     short loc_AAF9
.text:000000000000AB12                 test    rcx, rcx
.text:000000000000AB15                 jz      loc_ABFB
.text:000000000000AB1B                 lea     r11, [rsp+138h+var_68]
.text:000000000000AB23                 xor     r15d, r15d
.text:000000000000AB26                 xor     r9d, r9d
.text:000000000000AB29                 xor     ecx, ecx
.text:000000000000AB2B
.text:000000000000AB2B loc_AB2B:                               ; CODE XREF: build_trtable+5E8↓j
.text:000000000000AB2B                 mov     rsi, [r12+rcx*8]
.text:000000000000AB2F                 mov     rax, [rdi+rcx*8]
.text:000000000000AB33                 mov     rdx, rsi
.text:000000000000AB36                 not     rdx
.text:000000000000AB39                 and     rdx, rax
.text:000000000000AB3C                 not     rax
.text:000000000000AB3F                 and     rax, rsi
.text:000000000000AB42                 mov     [r11+rcx*8], rdx
.text:000000000000AB46                 or      r9, rdx
.text:000000000000AB49                 mov     [r12+rcx*8], rax
.text:000000000000AB4D                 add     rcx, 1
.text:000000000000AB51                 or      r15, rax
.text:000000000000AB54                 cmp     rcx, 4
.text:000000000000AB58                 jnz     short loc_AB2B
.text:000000000000AB5A                 mov     rdi, [rsp+138h+var_120]
.text:000000000000AB5F                 lea     rax, [rbx+rbx*2]
.text:000000000000AB63                 test    r9, r9
.text:000000000000AB66                 lea     rdx, [rdi+rax*8]
.text:000000000000AB6A                 jz      short loc_ABD4
.text:000000000000AB6C                 mov     rax, rbp
.text:000000000000AB6F                 movdqa  xmm0, [rsp+138h+var_68]
.text:000000000000AB78                 shl     rax, 5
.text:000000000000AB7C                 mov     rsi, rdx
.text:000000000000AB7F                 mov     [rsp+138h+var_100], rdx
.text:000000000000AB84                 add     rax, r13
.text:000000000000AB87                 movups  xmmword ptr [rax], xmm0
.text:000000000000AB8A                 movdqa  xmm0, [rsp+138h+var_58]
.text:000000000000AB93                 movups  xmmword ptr [rax+10h], xmm0
.text:000000000000AB97                 lea     rax, [rbp+rbp*2+0]
.text:000000000000AB9C                 lea     rdi, [rdi+rax*8]
.text:000000000000ABA0                 movdqa  xmm0, [rsp+138h+var_88]
.text:000000000000ABA9                 movups  xmmword ptr [r13+r10+0], xmm0
.text:000000000000ABAF                 movdqa  xmm0, [rsp+138h+var_78]
.text:000000000000ABB8                 movups  xmmword ptr [r13+r10+10h], xmm0
.text:000000000000ABBE                 call    re_node_set_init_copy
.text:000000000000ABC3                 test    eax, eax
.text:000000000000ABC5                 jnz     loc_ACA0
.text:000000000000ABCB                 mov     rdx, [rsp+138h+var_100]
.text:000000000000ABD0                 add     rbp, 1
.text:000000000000ABD4
.text:000000000000ABD4 loc_ABD4:                               ; CODE XREF: build_trtable+5FA↑j
.text:000000000000ABD4                 mov     rax, [rsp+138h+var_130]
.text:000000000000ABD9                 mov     rsi, [rsp+138h+var_118]
.text:000000000000ABDE                 mov     rdi, rdx
.text:000000000000ABE1                 mov     rax, [rax+18h]
.text:000000000000ABE5                 mov     rsi, [rax+rsi]
.text:000000000000ABE9                 call    re_node_set_insert
.text:000000000000ABEE                 test    al, al
.text:000000000000ABF0                 jz      loc_ACA0
.text:000000000000ABF6                 test    r15, r15
.text:000000000000ABF9                 jz      short loc_AC08
.text:000000000000ABFB
.text:000000000000ABFB loc_ABFB:                               ; CODE XREF: build_trtable+572↑j
.text:000000000000ABFB                                         ; build_trtable+5A5↑j
.text:000000000000ABFB                 add     rbx, 1
.text:000000000000ABFF                 cmp     rbx, rbp
.text:000000000000AC02                 jl      loc_AAB8
.text:000000000000AC08
.text:000000000000AC08 loc_AC08:                               ; CODE XREF: build_trtable+689↑j
.text:000000000000AC08                 mov     r15, r13
.text:000000000000AC0B
.text:000000000000AC0B loc_AC0B:                               ; CODE XREF: build_trtable+535↑j
.text:000000000000AC0B                 cmp     rbp, rbx
.text:000000000000AC0E                 jnz     loc_A66F
.text:000000000000AC14                 mov     rax, rbp
.text:000000000000AC17                 movdqa  xmm0, [rsp+138h+var_A8]
.text:000000000000AC20                 shl     rax, 5
.text:000000000000AC24                 mov     rbx, [rsp+138h+var_118]
.text:000000000000AC29                 mov     edi, 8          ; size
.text:000000000000AC2E                 add     rax, r15
.text:000000000000AC31                 movups  xmmword ptr [rax], xmm0
.text:000000000000AC34                 movdqa  xmm0, [rsp+138h+var_98]
.text:000000000000AC3D                 movups  xmmword ptr [rax+10h], xmm0
.text:000000000000AC41                 mov     rax, [rsp+138h+var_130]
.text:000000000000AC46                 mov     rax, [rax+18h]
.text:000000000000AC4A                 mov     r13, [rax+rbx]
.text:000000000000AC4E                 mov     rbx, [rsp+138h+var_120]
.text:000000000000AC53                 lea     rax, [rbp+rbp*2+0]
.text:000000000000AC58                 lea     rbx, [rbx+rax*8]
.text:000000000000AC5C                 mov     qword ptr [rbx], 1
.text:000000000000AC63                 mov     qword ptr [rbx+8], 1
.text:000000000000AC6B                 call    _malloc
.text:000000000000AC70                 test    rax, rax
.text:000000000000AC73                 mov     [rbx+10h], rax
.text:000000000000AC77                 jz      loc_A95D
.text:000000000000AC7D                 mov     [rax], r13
.text:000000000000AC80                 add     rbp, 1
.text:000000000000AC84
.text:000000000000AC84 loc_AC84:                               ; CODE XREF: build_trtable+479↑j
.text:000000000000AC84                                         ; build_trtable+816↓j ...
.text:000000000000AC84                 pxor    xmm0, xmm0
.text:000000000000AC88                 movaps  xmmword ptr [r12], xmm0
.text:000000000000AC8D                 movaps  xmmword ptr [r12+10h], xmm0
.text:000000000000AC93                 jmp     loc_A66F
.text:000000000000AC93 ; ---------------------------------------------------------------------------
.text:000000000000AC98                 align 20h
.text:000000000000ACA0
.text:000000000000ACA0 loc_ACA0:                               ; CODE XREF: build_trtable+3FF↑j
.text:000000000000ACA0                                         ; build_trtable+655↑j ...
.text:000000000000ACA0                 mov     rax, [rsp+138h+var_120]
.text:000000000000ACA5                 lea     rbx, [rax+10h]
.text:000000000000ACA9                 lea     rax, [rbp+rbp*2+0]
.text:000000000000ACAE                 lea     rbp, [rbx+rax*8]
.text:000000000000ACB2                 nop     word ptr [rax+rax+00h]
.text:000000000000ACB8
.text:000000000000ACB8 loc_ACB8:                               ; CODE XREF: build_trtable+757↓j
.text:000000000000ACB8                 mov     rdi, [rbx]      ; ptr
.text:000000000000ACBB                 add     rbx, 18h
.text:000000000000ACBF                 call    _free
.text:000000000000ACC4                 cmp     rbp, rbx
.text:000000000000ACC7                 jnz     short loc_ACB8
.text:000000000000ACC9                 mov     rdi, [rsp+138h+var_120] ; ptr
.text:000000000000ACCE                 call    _free
.text:000000000000ACD3                 jmp     loc_A980
.text:000000000000ACD3 ; ---------------------------------------------------------------------------
.text:000000000000ACD8                 align 20h
.text:000000000000ACE0
.text:000000000000ACE0 loc_ACE0:                               ; CODE XREF: build_trtable+EF↑j
.text:000000000000ACE0                 mov     rsi, [rsp+138h+var_108]
.text:000000000000ACE5                 cmp     dword ptr [rsi+0B4h], 1
.text:000000000000ACEC                 jle     loc_ADF5
.text:000000000000ACF2                 mov     rsi, [rsi+78h]
.text:000000000000ACF6                 lea     r12, [rsp+138h+var_A8]
.text:000000000000ACFE                 xor     edx, edx
.text:000000000000AD00
.text:000000000000AD00 loc_AD00:                               ; CODE XREF: build_trtable+7A4↓j
.text:000000000000AD00                 mov     rcx, [r12+rdx]
.text:000000000000AD04                 or      rcx, [rsi+rdx]
.text:000000000000AD08                 mov     [r12+rdx], rcx
.text:000000000000AD0C                 add     rdx, 8
.text:000000000000AD10                 cmp     rdx, 20h ; ' '
.text:000000000000AD14                 jnz     short loc_AD00
.text:000000000000AD16
.text:000000000000AD16 loc_AD16:                               ; CODE XREF: build_trtable+8A1↓j
.text:000000000000AD16                                         ; build_trtable+8ED↓j
.text:000000000000AD16                 mov     rbx, [rsp+138h+var_108]
.text:000000000000AD1B                 mov     rdx, [rbx+0D8h]
.text:000000000000AD22                 test    dl, 40h
.text:000000000000AD25                 jnz     short loc_AD33
.text:000000000000AD27                 and     qword ptr [rsp+138h+var_A8], 0FFFFFFFFFFFFFBFFh
.text:000000000000AD33
.text:000000000000AD33 loc_AD33:                               ; CODE XREF: build_trtable+7B5↑j
.text:000000000000AD33                 and     edx, 80h
.text:000000000000AD39                 jz      loc_A9D6
.text:000000000000AD3F                 and     qword ptr [rsp+138h+var_A8], 0FFFFFFFFFFFFFFFEh
.text:000000000000AD48                 jmp     loc_A9D6
.text:000000000000AD48 ; ---------------------------------------------------------------------------
.text:000000000000AD4D                 align 10h
.text:000000000000AD50
.text:000000000000AD50 loc_AD50:                               ; CODE XREF: build_trtable+471↑j
.text:000000000000AD50                 mov     rdx, qword ptr [rsp+138h+var_A8]
.text:000000000000AD58                 pxor    xmm0, xmm0
.text:000000000000AD5C                 and     dh, 4
.text:000000000000AD5F                 movaps  xmmword ptr [r12], xmm0
.text:000000000000AD64                 movaps  xmmword ptr [r12+10h], xmm0
.text:000000000000AD6A                 jz      loc_A66F
.text:000000000000AD70                 mov     qword ptr [rsp+138h+var_A8], 400h
.text:000000000000AD7C                 jmp     loc_A9E7
.text:000000000000AD81 ; ---------------------------------------------------------------------------
.text:000000000000AD81
.text:000000000000AD81 loc_AD81:                               ; CODE XREF: build_trtable+4DD↑j
.text:000000000000AD81                 test    byte ptr [r13+0Ah], 40h
.text:000000000000AD86                 jnz     loc_AC84
.text:000000000000AD8C                 mov     rdi, [rsp+138h+var_108]
.text:000000000000AD91                 cmp     dword ptr [rdi+0B4h], 1
.text:000000000000AD98                 jg      loc_AA65
.text:000000000000AD9E
.text:000000000000AD9E loc_AD9E:                               ; CODE XREF: build_trtable+4EF↑j
.text:000000000000AD9E                 mov     rsi, [rsp+138h+var_108]
.text:000000000000ADA3                 xor     ecx, ecx
.text:000000000000ADA5                 xor     edx, edx
.text:000000000000ADA7
.text:000000000000ADA7 loc_ADA7:                               ; CODE XREF: build_trtable+855↓j
.text:000000000000ADA7                 mov     rax, [rsi+rdx*8+0B8h]
.text:000000000000ADAF                 not     rax
.text:000000000000ADB2                 and     rax, [r12+rdx*8]
.text:000000000000ADB6                 mov     [r12+rdx*8], rax
.text:000000000000ADBA                 add     rdx, 1
.text:000000000000ADBE                 or      rcx, rax
.text:000000000000ADC1                 cmp     rdx, 4
.text:000000000000ADC5                 jnz     short loc_ADA7
.text:000000000000ADC7                 test    rcx, rcx
.text:000000000000ADCA                 jnz     loc_AAA0
.text:000000000000ADD0                 jmp     loc_A66F
.text:000000000000ADD5 ; ---------------------------------------------------------------------------
.text:000000000000ADD5
.text:000000000000ADD5 loc_ADD5:                               ; CODE XREF: build_trtable+487↑j
.text:000000000000ADD5                 test    byte ptr [r13+0Ah], 40h
.text:000000000000ADDA                 jz      loc_AC84
.text:000000000000ADE0                 mov     r8, [rsp+138h+var_108]
.text:000000000000ADE5                 cmp     dword ptr [r8+0B4h], 1
.text:000000000000ADED                 jg      loc_AA10
.text:000000000000ADF3                 jmp     short loc_AE62
.text:000000000000ADF5 ; ---------------------------------------------------------------------------
.text:000000000000ADF5
.text:000000000000ADF5 loc_ADF5:                               ; CODE XREF: build_trtable+77C↑j
.text:000000000000ADF5                 pcmpeqd xmm0, xmm0
.text:000000000000ADF9                 lea     r12, [rsp+138h+var_A8]
.text:000000000000AE01                 movaps  [rsp+138h+var_A8], xmm0
.text:000000000000AE09                 movaps  [rsp+138h+var_98], xmm0
.text:000000000000AE11                 jmp     loc_AD16
.text:000000000000AE11 ; ---------------------------------------------------------------------------
.text:000000000000AE16                 align 20h
.text:000000000000AE20
.text:000000000000AE20 loc_AE20:                               ; CODE XREF: build_trtable+E5↑j
.text:000000000000AE20                 mov     rsi, [r13+0]
.text:000000000000AE24                 lea     r12, [rsp+138h+var_A8]
.text:000000000000AE2C                 xor     edx, edx
.text:000000000000AE2E
.text:000000000000AE2E loc_AE2E:                               ; CODE XREF: build_trtable+8D2↓j
.text:000000000000AE2E                 mov     rcx, [r12+rdx]
.text:000000000000AE32                 or      rcx, [rsi+rdx]
.text:000000000000AE36                 mov     [r12+rdx], rcx
.text:000000000000AE3A                 add     rdx, 8
.text:000000000000AE3E                 cmp     rdx, 20h ; ' '
.text:000000000000AE42                 jnz     short loc_AE2E
.text:000000000000AE44                 jmp     loc_A9D6
.text:000000000000AE49 ; ---------------------------------------------------------------------------
.text:000000000000AE49
.text:000000000000AE49 loc_AE49:                               ; CODE XREF: build_trtable+F9↑j
.text:000000000000AE49                 pcmpeqd xmm0, xmm0
.text:000000000000AE4D                 lea     r12, [rsp+138h+var_A8]
.text:000000000000AE55                 movaps  [rsp+138h+var_A8], xmm0
.text:000000000000AE5D                 jmp     loc_AD16
.text:000000000000AE62 ; ---------------------------------------------------------------------------
.text:000000000000AE62
.text:000000000000AE62 loc_AE62:                               ; CODE XREF: build_trtable+49A↑j
.text:000000000000AE62                                         ; build_trtable+883↑j
.text:000000000000AE62                 mov     rdi, [rsp+138h+var_108]
.text:000000000000AE67                 xor     esi, esi
.text:000000000000AE69                 xor     edx, edx
.text:000000000000AE6B
.text:000000000000AE6B loc_AE6B:                               ; CODE XREF: build_trtable+916↓j
.text:000000000000AE6B                 mov     rcx, [r12+rdx*8]
.text:000000000000AE6F                 and     rcx, [rdi+rdx*8+0B8h]
.text:000000000000AE77                 mov     [r12+rdx*8], rcx
.text:000000000000AE7B                 add     rdx, 1
.text:000000000000AE7F                 or      rsi, rcx
.text:000000000000AE82                 cmp     rdx, 4
.text:000000000000AE86                 jnz     short loc_AE6B
.text:000000000000AE88                 test    rsi, rsi
.text:000000000000AE8B                 jnz     loc_AA45
.text:000000000000AE91                 jmp     loc_A66F
.text:000000000000AE96 ; ---------------------------------------------------------------------------
.text:000000000000AE96
.text:000000000000AE96 loc_AE96:                               ; CODE XREF: build_trtable+9B1↓j
.text:000000000000AE96                 mov     edx, [rsp+138h+var_CC]
.text:000000000000AE9A                 test    edx, edx
.text:000000000000AE9C                 jz      loc_AF27
.text:000000000000AEA2                 nop     word ptr [rax+rax+00h]
.text:000000000000AEA8
.text:000000000000AEA8 loc_AEA8:                               ; CODE XREF: build_trtable+238↑j
.text:000000000000AEA8                                         ; build_trtable+A0E↓j ...
.text:000000000000AEA8                 mov     rbp, [rsp+138h+var_118]
.text:000000000000AEAD
.text:000000000000AEAD loc_AEAD:                               ; CODE XREF: build_trtable+2FE↑j
.text:000000000000AEAD                                         ; build_trtable+A47↓j
.text:000000000000AEAD                 mov     rdi, [rsp+138h+ptr] ; ptr
.text:000000000000AEB2                 call    _free
.text:000000000000AEB7                 mov     r12, [rsp+138h+var_B8]
.text:000000000000AEBF
.text:000000000000AEBF loc_AEBF:                               ; CODE XREF: build_trtable+14F↑j
.text:000000000000AEBF                                         ; build_trtable+16A↑j ...
.text:000000000000AEBF                 mov     rdi, r12        ; ptr
.text:000000000000AEC2                 call    _free
.text:000000000000AEC7                 mov     rax, [rsp+138h+var_120]
.text:000000000000AECC                 lea     rbx, [rax+10h]
.text:000000000000AED0                 lea     rax, [rbp+rbp*2+0]
.text:000000000000AED5                 lea     rbp, [rbx+rax*8]
.text:000000000000AED9                 nop     dword ptr [rax+00000000h]
.text:000000000000AEE0
.text:000000000000AEE0 loc_AEE0:                               ; CODE XREF: build_trtable+97F↓j
.text:000000000000AEE0                 mov     rdi, [rbx]      ; ptr
.text:000000000000AEE3                 add     rbx, 18h
.text:000000000000AEE7                 call    _free
.text:000000000000AEEC                 cmp     rbp, rbx
.text:000000000000AEEF                 jnz     short loc_AEE0
.text:000000000000AEF1                 mov     rdi, [rsp+138h+var_120] ; ptr
.text:000000000000AEF6                 call    _free
.text:000000000000AEFB                 jmp     loc_A980
.text:000000000000AF00 ; ---------------------------------------------------------------------------
.text:000000000000AF00
.text:000000000000AF00 loc_AF00:                               ; CODE XREF: build_trtable+270↑j
.text:000000000000AF00                 mov     rdi, [rsp+138h+var_110]
.text:000000000000AF05                 mov     ecx, 1
.text:000000000000AF0A                 mov     rdx, r14
.text:000000000000AF0D                 mov     rsi, rbp
.text:000000000000AF10                 call    re_acquire_state_context
.text:000000000000AF15                 mov     rdi, [rsp+138h+var_108]
.text:000000000000AF1A                 test    rax, rax
.text:000000000000AF1D                 mov     [rdi+rbx*8], rax
.text:000000000000AF21                 jz      loc_AE96
.text:000000000000AF27
.text:000000000000AF27 loc_AF27:                               ; CODE XREF: build_trtable+92C↑j
.text:000000000000AF27                 mov     rdi, [rsp+138h+ptr]
.text:000000000000AF2C                 cmp     rax, [rdi+rbx*8]
.text:000000000000AF30                 jz      short loc_AF4B
.text:000000000000AF32                 movzx   edi, [rsp+138h+var_E9]
.text:000000000000AF37                 cmp     dword ptr [rbp+0B4h], 2
.text:000000000000AF3E                 mov     eax, 1
.text:000000000000AF43                 cmovge  edi, eax
.text:000000000000AF46                 mov     [rsp+138h+var_E9], dil
.text:000000000000AF4B
.text:000000000000AF4B loc_AF4B:                               ; CODE XREF: build_trtable+9C0↑j
.text:000000000000AF4B                 mov     rdi, [rsp+138h+var_110]
.text:000000000000AF50                 mov     rsi, rbp
.text:000000000000AF53                 mov     ecx, 2
.text:000000000000AF58                 mov     rdx, r14
.text:000000000000AF5B                 call    re_acquire_state_context
.text:000000000000AF60                 mov     rsi, [rsp+138h+var_100]
.text:000000000000AF65                 test    rax, rax
.text:000000000000AF68                 mov     [rsi+rbx*8], rax
.text:000000000000AF6C                 jnz     loc_A801
.text:000000000000AF72                 mov     eax, [rsp+138h+var_CC]
.text:000000000000AF76                 test    eax, eax
.text:000000000000AF78                 jz      loc_A801
.text:000000000000AF7E                 jmp     loc_AEA8
.text:000000000000AF7E ; ---------------------------------------------------------------------------
.text:000000000000AF83                 align 8
.text:000000000000AF88
.text:000000000000AF88 loc_AF88:                               ; CODE XREF: build_trtable+266↑j
.text:000000000000AF88                 mov     ecx, [rsp+138h+var_CC]
.text:000000000000AF8C                 test    ecx, ecx
.text:000000000000AF8E                 jz      loc_A7DC
.text:000000000000AF94                 jmp     loc_AEA8
.text:000000000000AF99 ; ---------------------------------------------------------------------------
.text:000000000000AF99
.text:000000000000AF99 loc_AF99:                               ; CODE XREF: build_trtable+2DA↑j
.text:000000000000AF99                 mov     esi, 200h       ; size
.text:000000000000AF9E                 mov     edi, 8          ; nmemb
.text:000000000000AFA3                 call    _calloc
.text:000000000000AFA8                 mov     r11, rax
.text:000000000000AFAB                 mov     rax, [rsp+138h+var_130]
.text:000000000000AFB0                 test    r11, r11
.text:000000000000AFB3                 mov     [rax+60h], r11
.text:000000000000AFB7                 jz      loc_AEAD
.text:000000000000AFBD                 mov     r13, [rsp+138h+var_F8]
.text:000000000000AFC2                 mov     r10, [rsp+138h+ptr]
.text:000000000000AFC7                 mov     r12, r11
.text:000000000000AFCA                 mov     r14, [rsp+138h+var_108]
.text:000000000000AFCF                 mov     rdx, [rsp+138h+var_118]
.text:000000000000AFD4                 xor     ebx, ebx
.text:000000000000AFD6                 add     r13, 20h ; ' '
.text:000000000000AFDA
.text:000000000000AFDA loc_AFDA:                               ; CODE XREF: build_trtable+A9E↓j
.text:000000000000AFDA                 mov     rax, [rdx+rbx]
.text:000000000000AFDE                 test    rax, rax
.text:000000000000AFE1                 jz      short loc_AFFF
.text:000000000000AFE3                 mov     rsi, r12
.text:000000000000AFE6                 mov     ecx, 1
.text:000000000000AFEB
.text:000000000000AFEB loc_AFEB:                               ; CODE XREF: build_trtable+A8D↓j
.text:000000000000AFEB                 test    al, 1
.text:000000000000AFED                 jnz     loc_B09C
.text:000000000000AFF3
.text:000000000000AFF3 loc_AFF3:                               ; CODE XREF: build_trtable+B6B↓j
.text:000000000000AFF3                 add     rcx, rcx
.text:000000000000AFF6                 add     rsi, 8
.text:000000000000AFFA                 shr     rax, 1
.text:000000000000AFFD                 jnz     short loc_AFEB
.text:000000000000AFFF
.text:000000000000AFFF loc_AFFF:                               ; CODE XREF: build_trtable+A71↑j
.text:000000000000AFFF                 add     rbx, 8
.text:000000000000B003                 add     r12, 200h
.text:000000000000B00A                 cmp     rbx, 20h ; ' '
.text:000000000000B00E                 jnz     short loc_AFDA
.text:000000000000B010                 jmp     loc_A8CE
.text:000000000000B010 ; ---------------------------------------------------------------------------
.text:000000000000B015                 align 8
.text:000000000000B018
.text:000000000000B018 loc_B018:                               ; CODE XREF: build_trtable+342↑j
.text:000000000000B018                 mov     rdi, [rsp+138h+var_120]
.text:000000000000B01D                 test    [rdi+r9+1800h], rcx
.text:000000000000B025                 jnz     short loc_B097
.text:000000000000B027                 lea     rdi, [rbx+r9]
.text:000000000000B02B                 xor     r8d, r8d
.text:000000000000B02E                 xchg    ax, ax
.text:000000000000B030
.text:000000000000B030 loc_B030:                               ; CODE XREF: build_trtable+AD1↓j
.text:000000000000B030                 mov     r10, [rdi]
.text:000000000000B033                 add     r8, 1
.text:000000000000B037                 add     rdi, 20h ; ' '
.text:000000000000B03B                 and     r10, rcx
.text:000000000000B03E                 test    r10, r10
.text:000000000000B041                 jz      short loc_B030
.text:000000000000B043                 shl     r8, 3
.text:000000000000B047
.text:000000000000B047 loc_B047:                               ; CODE XREF: build_trtable+B2A↓j
.text:000000000000B047                 test    [r15+r9+0B8h], rcx
.text:000000000000B04F                 jz      short loc_B05E
.text:000000000000B051                 mov     rdi, [r13+r8+0]
.text:000000000000B056                 mov     [rsi], rdi
.text:000000000000B059                 jmp     loc_A8B8
.text:000000000000B05E ; ---------------------------------------------------------------------------
.text:000000000000B05E
.text:000000000000B05E loc_B05E:                               ; CODE XREF: build_trtable+ADF↑j
.text:000000000000B05E                 mov     rdi, [r12+r8]
.text:000000000000B062                 mov     [rsi], rdi
.text:000000000000B065                 jmp     loc_A8B8
.text:000000000000B06A ; ---------------------------------------------------------------------------
.text:000000000000B06A
.text:000000000000B06A loc_B06A:                               ; CODE XREF: build_trtable+83↑j
.text:000000000000B06A                 mov     rdi, [rsp+138h+var_120] ; ptr
.text:000000000000B06F                 call    _free
.text:000000000000B074
.text:000000000000B074 loc_B074:                               ; CODE XREF: build_trtable+B8C↓j
.text:000000000000B074                 mov     esi, 100h       ; size
.text:000000000000B079                 mov     edi, 8          ; nmemb
.text:000000000000B07E                 call    _calloc
.text:000000000000B083                 mov     rbx, [rsp+138h+var_130]
.text:000000000000B088                 test    rax, rax
.text:000000000000B08B                 mov     [rbx+58h], rax
.text:000000000000B08F                 setnz   al
.text:000000000000B092                 jmp     loc_A982
.text:000000000000B097 ; ---------------------------------------------------------------------------
.text:000000000000B097
.text:000000000000B097 loc_B097:                               ; CODE XREF: build_trtable+AB5↑j
.text:000000000000B097                 xor     r8d, r8d
.text:000000000000B09A                 jmp     short loc_B047
.text:000000000000B09C ; ---------------------------------------------------------------------------
.text:000000000000B09C
.text:000000000000B09C loc_B09C:                               ; CODE XREF: build_trtable+A7D↑j
.text:000000000000B09C                 mov     rdi, [rsp+138h+var_120]
.text:000000000000B0A1                 test    [rdi+rbx+1800h], rcx
.text:000000000000B0A9                 jnz     short loc_B0E0
.text:000000000000B0AB                 lea     r9, [r13+rbx+0]
.text:000000000000B0B0                 xor     r8d, r8d
.text:000000000000B0B3
.text:000000000000B0B3 loc_B0B3:                               ; CODE XREF: build_trtable+B57↓j
.text:000000000000B0B3                 mov     r15, [r9]
.text:000000000000B0B6                 add     r8, 1
.text:000000000000B0BA                 add     r9, 20h ; ' '
.text:000000000000B0BE                 mov     rdi, r8
.text:000000000000B0C1                 and     r15, rcx
.text:000000000000B0C4                 test    r15, r15
.text:000000000000B0C7                 jz      short loc_B0B3
.text:000000000000B0C9
.text:000000000000B0C9 loc_B0C9:                               ; CODE XREF: build_trtable+B72↓j
.text:000000000000B0C9                 mov     r8, [r10+rdi*8]
.text:000000000000B0CD                 mov     [rsi], r8
.text:000000000000B0D0                 mov     rdi, [r14+rdi*8]
.text:000000000000B0D4                 mov     [rsi+800h], rdi
.text:000000000000B0DB                 jmp     loc_AFF3
.text:000000000000B0E0 ; ---------------------------------------------------------------------------
.text:000000000000B0E0
.text:000000000000B0E0 loc_B0E0:                               ; CODE XREF: build_trtable+B39↑j
.text:000000000000B0E0                 xor     edi, edi
.text:000000000000B0E2                 jmp     short loc_B0C9
.text:000000000000B0E4 ; ---------------------------------------------------------------------------
.text:000000000000B0E4
.text:000000000000B0E4 loc_B0E4:                               ; CODE XREF: build_trtable+423↑j
.text:000000000000B0E4                 call    ___stack_chk_fail
.text:000000000000B0E9 ; ---------------------------------------------------------------------------
.text:000000000000B0E9
.text:000000000000B0E9 loc_B0E9:                               ; CODE XREF: build_trtable+11D↑j
.text:000000000000B0E9                 mov     rdi, [rsp+138h+var_120] ; ptr
.text:000000000000B0EE                 call    _free
.text:000000000000B0F3                 test    rbp, rbp
.text:000000000000B0F6                 jnz     loc_A980
.text:000000000000B0FC                 jmp     loc_B074
.text:000000000000B0FC ; } // starts at A570
.text:000000000000B0FC build_trtable   endp
.text:000000000000B0FC
.text:000000000000B0FC ; ---------------------------------------------------------------------------
.text:000000000000B101                 align 10h
.text:000000000000B110
.text:000000000000B110 ; =============== S U B R O U T I N E =======================================
.text:000000000000B110
.text:000000000000B110
.text:000000000000B110 calc_first      proc near               ; DATA XREF: re_compile_internal+67E↓o
.text:000000000000B110 ; __unwind {
.text:000000000000B110                 cmp     byte ptr [rsi+30h], 10h
.text:000000000000B114                 jz      short loc_B178
.text:000000000000B116                 push    rbp
.text:000000000000B117                 push    rbx
.text:000000000000B118                 mov     rbx, rsi
.text:000000000000B11B                 mov     rbp, rdi
.text:000000000000B11E                 sub     rsp, 8
.text:000000000000B122                 mov     [rbx+18h], rsi
.text:000000000000B126                 mov     rdx, [rbx+30h]
.text:000000000000B12A                 mov     rsi, [rsi+28h]
.text:000000000000B12E                 call    re_dfa_add_node
.text:000000000000B133                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000B137                 mov     rdx, rax
.text:000000000000B13A                 mov     [rbx+38h], rax
.text:000000000000B13E                 jz      short loc_B190
.text:000000000000B140                 xor     eax, eax
.text:000000000000B142                 cmp     byte ptr [rbx+30h], 0Ch
.text:000000000000B146                 jnz     short loc_B16C
.text:000000000000B148                 mov     ecx, [rbx+28h]
.text:000000000000B14B                 shl     rdx, 4
.text:000000000000B14F                 add     rdx, [rbp+0]
.text:000000000000B153                 and     ecx, 3FFh
.text:000000000000B159                 shl     ecx, 8
.text:000000000000B15C                 mov     esi, ecx
.text:000000000000B15E                 mov     ecx, [rdx+8]
.text:000000000000B161                 and     ecx, 0FFFC00FFh
.text:000000000000B167                 or      ecx, esi
.text:000000000000B169                 mov     [rdx+8], ecx
.text:000000000000B16C
.text:000000000000B16C loc_B16C:                               ; CODE XREF: calc_first+36↑j
.text:000000000000B16C                                         ; calc_first+85↓j
.text:000000000000B16C                 add     rsp, 8
.text:000000000000B170                 pop     rbx
.text:000000000000B171                 pop     rbp
.text:000000000000B172                 retn
.text:000000000000B172 ; ---------------------------------------------------------------------------
.text:000000000000B173                 align 8
.text:000000000000B178
.text:000000000000B178 loc_B178:                               ; CODE XREF: calc_first+4↑j
.text:000000000000B178                 mov     rax, [rsi+8]
.text:000000000000B17C                 mov     rdx, [rax+18h]
.text:000000000000B180                 mov     rax, [rax+38h]
.text:000000000000B184                 mov     [rsi+18h], rdx
.text:000000000000B188                 mov     [rsi+38h], rax
.text:000000000000B18C                 xor     eax, eax
.text:000000000000B18E                 retn
.text:000000000000B18E ; ---------------------------------------------------------------------------
.text:000000000000B18F                 align 10h
.text:000000000000B190
.text:000000000000B190 loc_B190:                               ; CODE XREF: calc_first+2E↑j
.text:000000000000B190                 mov     eax, 0Ch
.text:000000000000B195                 jmp     short loc_B16C
.text:000000000000B195 ; } // starts at B110
.text:000000000000B195 calc_first      endp
.text:000000000000B195
.text:000000000000B195 ; ---------------------------------------------------------------------------
.text:000000000000B197                 align 20h
.text:000000000000B1A0
.text:000000000000B1A0 ; =============== S U B R O U T I N E =======================================
.text:000000000000B1A0
.text:000000000000B1A0
.text:000000000000B1A0 free_fail_stack_return_part_24 proc near
.text:000000000000B1A0                                         ; CODE XREF: set_regs+4FF↓p
.text:000000000000B1A0                                         ; set_regs+567↓p ...
.text:000000000000B1A0 ; __unwind {
.text:000000000000B1A0                 push    r12
.text:000000000000B1A2                 push    rbp
.text:000000000000B1A3                 mov     rbp, rdi
.text:000000000000B1A6                 push    rbx
.text:000000000000B1A7                 cmp     qword ptr [rdi], 0
.text:000000000000B1AB                 jle     short loc_B1E2
.text:000000000000B1AD                 xor     ebx, ebx
.text:000000000000B1AF                 xor     r12d, r12d
.text:000000000000B1B2                 nop     word ptr [rax+rax+00h]
.text:000000000000B1B8
.text:000000000000B1B8 loc_B1B8:                               ; CODE XREF: free_fail_stack_return_part_24+40↓j
.text:000000000000B1B8                 mov     rax, [rbp+10h]
.text:000000000000B1BC                 add     r12, 1
.text:000000000000B1C0                 mov     rdi, [rax+rbx+28h] ; ptr
.text:000000000000B1C5                 call    _free
.text:000000000000B1CA                 mov     rax, [rbp+10h]
.text:000000000000B1CE                 mov     rdi, [rax+rbx+10h] ; ptr
.text:000000000000B1D3                 add     rbx, 30h ; '0'
.text:000000000000B1D7                 call    _free
.text:000000000000B1DC                 cmp     r12, [rbp+0]
.text:000000000000B1E0                 jl      short loc_B1B8
.text:000000000000B1E2
.text:000000000000B1E2 loc_B1E2:                               ; CODE XREF: free_fail_stack_return_part_24+B↑j
.text:000000000000B1E2                 pop     rbx
.text:000000000000B1E3                 mov     rdi, [rbp+10h]  ; ptr
.text:000000000000B1E7                 pop     rbp
.text:000000000000B1E8                 pop     r12
.text:000000000000B1EA                 jmp     _free
.text:000000000000B1EA ; } // starts at B1A0
.text:000000000000B1EA free_fail_stack_return_part_24 endp
.text:000000000000B1EA
.text:000000000000B1EA ; ---------------------------------------------------------------------------
.text:000000000000B1EF                 align 10h
.text:000000000000B1F0
.text:000000000000B1F0 ; =============== S U B R O U T I N E =======================================
.text:000000000000B1F0
.text:000000000000B1F0
.text:000000000000B1F0 pop_fail_stack_isra_25 proc near        ; CODE XREF: set_regs+5B3↓p
.text:000000000000B1F0                                         ; set_regs+606↓p
.text:000000000000B1F0 ; __unwind {
.text:000000000000B1F0                 push    r12
.text:000000000000B1F2                 push    rbp
.text:000000000000B1F3                 push    rbx
.text:000000000000B1F4                 mov     rax, [rdi]
.text:000000000000B1F7                 sub     rax, 1
.text:000000000000B1FB                 test    rax, rax
.text:000000000000B1FE                 mov     [rdi], rax
.text:000000000000B201                 js      short loc_B265
.text:000000000000B203                 lea     rbx, [rax+rax*2]
.text:000000000000B207                 mov     rax, [rsi]
.text:000000000000B20A                 mov     r12, rsi
.text:000000000000B20D                 shl     rcx, 4
.text:000000000000B211                 mov     rbp, r9
.text:000000000000B214                 mov     rdi, r8         ; dest
.text:000000000000B217                 shl     rbx, 4
.text:000000000000B21B                 add     rax, rbx
.text:000000000000B21E                 mov     rsi, [rax]
.text:000000000000B221                 mov     [rdx], rsi
.text:000000000000B224                 mov     rsi, [rax+10h]  ; src
.text:000000000000B228                 mov     rdx, rcx        ; n
.text:000000000000B22B                 call    _memcpy
.text:000000000000B230                 mov     rdi, [rbp+10h]  ; ptr
.text:000000000000B234                 call    _free
.text:000000000000B239                 mov     rax, [r12]
.text:000000000000B23D                 mov     rdi, [rax+rbx+10h] ; ptr
.text:000000000000B242                 call    _free
.text:000000000000B247                 add     rbx, [r12]
.text:000000000000B24B                 movdqu  xmm0, xmmword ptr [rbx+18h]
.text:000000000000B250                 movaps  xmmword ptr [rbp+0], xmm0
.text:000000000000B254                 mov     rax, [rbx+28h]
.text:000000000000B258                 mov     [rbp+10h], rax
.text:000000000000B25C                 mov     rax, [rbx+8]
.text:000000000000B260                 pop     rbx
.text:000000000000B261                 pop     rbp
.text:000000000000B262                 pop     r12
.text:000000000000B264                 retn
.text:000000000000B265 ; ---------------------------------------------------------------------------
.text:000000000000B265
.text:000000000000B265 loc_B265:                               ; CODE XREF: pop_fail_stack_isra_25+11↑j
.text:000000000000B265                 lea     rcx, __PRETTY_FUNCTION___8040 ; "pop_fail_stack"
.text:000000000000B26C                 lea     rsi, aCoreutils831Li_0 ; "../coreutils-8.31/lib/regexec.c"
.text:000000000000B273                 lea     rdi, aNum0      ; "num >= 0"
.text:000000000000B27A                 mov     edx, 555h       ; line
.text:000000000000B27F                 call    ___assert_fail
.text:000000000000B27F ; } // starts at B1F0
.text:000000000000B27F pop_fail_stack_isra_25 endp
.text:000000000000B27F
.text:000000000000B27F ; ---------------------------------------------------------------------------
.text:000000000000B284                 align 10h
.text:000000000000B290
.text:000000000000B290 ; =============== S U B R O U T I N E =======================================
.text:000000000000B290
.text:000000000000B290
.text:000000000000B290 build_equiv_class_isra_27 proc near     ; CODE XREF: parse_expression+C30↓p
.text:000000000000B290                                         ; parse_expression+C68↓p
.text:000000000000B290 ; __unwind {
.text:000000000000B290                 push    rbp
.text:000000000000B291                 push    rbx
.text:000000000000B292                 mov     rbp, rdi
.text:000000000000B295                 mov     rdi, rsi        ; s
.text:000000000000B298                 mov     rbx, rsi
.text:000000000000B29B                 sub     rsp, 8
.text:000000000000B29F                 call    _strlen
.text:000000000000B2A4                 cmp     rax, 1
.text:000000000000B2A8                 jnz     short loc_B2D0
.text:000000000000B2AA                 movzx   ecx, byte ptr [rbx]
.text:000000000000B2AD                 mov     rdx, rcx
.text:000000000000B2B0                 and     ecx, 3Fh
.text:000000000000B2B3                 shr     rdx, 3
.text:000000000000B2B7                 shl     rax, cl
.text:000000000000B2BA                 and     edx, 18h
.text:000000000000B2BD                 or      [rbp+rdx+0], rax
.text:000000000000B2C2                 add     rsp, 8
.text:000000000000B2C6                 xor     eax, eax
.text:000000000000B2C8                 pop     rbx
.text:000000000000B2C9                 pop     rbp
.text:000000000000B2CA                 retn
.text:000000000000B2CA ; ---------------------------------------------------------------------------
.text:000000000000B2CB                 align 10h
.text:000000000000B2D0
.text:000000000000B2D0 loc_B2D0:                               ; CODE XREF: build_equiv_class_isra_27+18↑j
.text:000000000000B2D0                 add     rsp, 8
.text:000000000000B2D4                 mov     eax, 3
.text:000000000000B2D9                 pop     rbx
.text:000000000000B2DA                 pop     rbp
.text:000000000000B2DB                 retn
.text:000000000000B2DB ; } // starts at B290
.text:000000000000B2DB build_equiv_class_isra_27 endp
.text:000000000000B2DB
.text:000000000000B2DB ; ---------------------------------------------------------------------------
.text:000000000000B2DC                 align 20h
.text:000000000000B2E0
.text:000000000000B2E0 ; =============== S U B R O U T I N E =======================================
.text:000000000000B2E0
.text:000000000000B2E0
.text:000000000000B2E0 build_charclass_isra_29 proc near       ; CODE XREF: build_charclass_op+A3↓p
.text:000000000000B2E0                                         ; parse_expression+D1D↓p
.text:000000000000B2E0
.text:000000000000B2E0 var_38          = qword ptr -38h
.text:000000000000B2E0 var_30          = qword ptr -30h
.text:000000000000B2E0 arg_0           = qword ptr  8
.text:000000000000B2E0
.text:000000000000B2E0 ; __unwind {
.text:000000000000B2E0                 push    r14
.text:000000000000B2E2                 push    r13
.text:000000000000B2E4                 mov     r13, rcx
.text:000000000000B2E7                 push    r12
.text:000000000000B2E9                 push    rbp
.text:000000000000B2EA                 mov     r12, r9
.text:000000000000B2ED                 push    rbx
.text:000000000000B2EE                 mov     rbp, rdi
.text:000000000000B2F1                 mov     rbx, rsi
.text:000000000000B2F4                 sub     rsp, 10h
.text:000000000000B2F8                 test    [rsp+38h+arg_0], 400000h
.text:000000000000B301                 jz      short loc_B328
.text:000000000000B303                 lea     rdi, aUpper     ; "upper"
.text:000000000000B30A                 mov     ecx, 6
.text:000000000000B30F                 mov     rsi, r9
.text:000000000000B312                 repe cmpsb
.text:000000000000B314                 setnbe  al
.text:000000000000B317                 sbb     al, 0
.text:000000000000B319                 test    al, al
.text:000000000000B31B                 jnz     loc_B416
.text:000000000000B321                 lea     r12, aAlpha     ; "alpha"
.text:000000000000B328
.text:000000000000B328 loc_B328:                               ; CODE XREF: build_charclass_isra_29+21↑j
.text:000000000000B328                 mov     rcx, [r13+0]
.text:000000000000B32C                 cmp     [r8], rcx
.text:000000000000B32F                 mov     rax, [rdx]
.text:000000000000B332                 jz      loc_B449
.text:000000000000B338
.text:000000000000B338 loc_B338:                               ; CODE XREF: build_charclass_isra_29+163↓j
.text:000000000000B338                                         ; build_charclass_isra_29+1A3↓j
.text:000000000000B338                 lea     rdx, [rcx+1]
.text:000000000000B33C                 mov     rdi, r12        ; property
.text:000000000000B33F                 mov     [r13+0], rdx
.text:000000000000B343                 lea     r13, [rax+rcx*8]
.text:000000000000B347                 call    _wctype
.text:000000000000B34C                 lea     rdi, aAlnum     ; "alnum"
.text:000000000000B353                 mov     [r13+0], rax
.text:000000000000B357                 mov     ecx, 6
.text:000000000000B35C                 mov     rsi, r12
.text:000000000000B35F                 repe cmpsb
.text:000000000000B361                 setnbe  al
.text:000000000000B364                 sbb     al, 0
.text:000000000000B366                 test    al, al
.text:000000000000B368                 jz      short loc_B3D8
.text:000000000000B36A                 lea     rdi, aCntrl     ; "cntrl"
.text:000000000000B371                 mov     ecx, 6
.text:000000000000B376                 mov     rsi, r12
.text:000000000000B379                 repe cmpsb
.text:000000000000B37B                 setnbe  al
.text:000000000000B37E                 sbb     al, 0
.text:000000000000B380                 test    al, al
.text:000000000000B382                 jnz     loc_B488
.text:000000000000B388                 call    ___ctype_b_loc
.text:000000000000B38D                 xor     ecx, ecx
.text:000000000000B38F                 test    rbp, rbp
.text:000000000000B392                 mov     rdx, [rax]
.text:000000000000B395                 mov     edi, 1
.text:000000000000B39A                 jnz     loc_B65A
.text:000000000000B3A0
.text:000000000000B3A0 loc_B3A0:                               ; CODE XREF: build_charclass_isra_29+E2↓j
.text:000000000000B3A0                 test    byte ptr [rdx+rcx*2], 2
.text:000000000000B3A4                 jz      short loc_B3B7
.text:000000000000B3A6                 mov     rax, rcx
.text:000000000000B3A9                 mov     rsi, rdi
.text:000000000000B3AC                 sar     rax, 6
.text:000000000000B3B0                 shl     rsi, cl
.text:000000000000B3B3                 or      [rbx+rax*8], rsi
.text:000000000000B3B7
.text:000000000000B3B7 loc_B3B7:                               ; CODE XREF: build_charclass_isra_29+C4↑j
.text:000000000000B3B7                 add     rcx, 1
.text:000000000000B3BB                 cmp     rcx, 100h
.text:000000000000B3C2                 jnz     short loc_B3A0
.text:000000000000B3C4
.text:000000000000B3C4 loc_B3C4:                               ; CODE XREF: build_charclass_isra_29+134↓j
.text:000000000000B3C4                                         ; build_charclass_isra_29+225↓j ...
.text:000000000000B3C4                 xor     eax, eax
.text:000000000000B3C6
.text:000000000000B3C6 loc_B3C6:                               ; CODE XREF: build_charclass_isra_29+4AD↓j
.text:000000000000B3C6                                         ; build_charclass_isra_29+765↓j
.text:000000000000B3C6                 add     rsp, 10h
.text:000000000000B3CA                 pop     rbx
.text:000000000000B3CB                 pop     rbp
.text:000000000000B3CC                 pop     r12
.text:000000000000B3CE                 pop     r13
.text:000000000000B3D0                 pop     r14
.text:000000000000B3D2                 retn
.text:000000000000B3D2 ; ---------------------------------------------------------------------------
.text:000000000000B3D3                 align 8
.text:000000000000B3D8
.text:000000000000B3D8 loc_B3D8:                               ; CODE XREF: build_charclass_isra_29+88↑j
.text:000000000000B3D8                 call    ___ctype_b_loc
.text:000000000000B3DD                 xor     ecx, ecx
.text:000000000000B3DF                 test    rbp, rbp
.text:000000000000B3E2                 mov     rdx, [rax]
.text:000000000000B3E5                 mov     edi, 1
.text:000000000000B3EA                 jnz     loc_B5DA
.text:000000000000B3F0
.text:000000000000B3F0 loc_B3F0:                               ; CODE XREF: build_charclass_isra_29+132↓j
.text:000000000000B3F0                 test    byte ptr [rdx+rcx*2], 8
.text:000000000000B3F4                 jz      short loc_B407
.text:000000000000B3F6                 mov     rax, rcx
.text:000000000000B3F9                 mov     rsi, rdi
.text:000000000000B3FC                 sar     rax, 6
.text:000000000000B400                 shl     rsi, cl
.text:000000000000B403                 or      [rbx+rax*8], rsi
.text:000000000000B407
.text:000000000000B407 loc_B407:                               ; CODE XREF: build_charclass_isra_29+114↑j
.text:000000000000B407                 add     rcx, 1
.text:000000000000B40B                 cmp     rcx, 100h
.text:000000000000B412                 jnz     short loc_B3F0
.text:000000000000B414                 jmp     short loc_B3C4
.text:000000000000B416 ; ---------------------------------------------------------------------------
.text:000000000000B416
.text:000000000000B416 loc_B416:                               ; CODE XREF: build_charclass_isra_29+3B↑j
.text:000000000000B416                 lea     rdi, aLower     ; "lower"
.text:000000000000B41D                 mov     ecx, 6
.text:000000000000B422                 mov     rsi, r9
.text:000000000000B425                 repe cmpsb
.text:000000000000B427                 mov     rcx, [r13+0]
.text:000000000000B42B                 setnbe  al
.text:000000000000B42E                 sbb     al, 0
.text:000000000000B430                 test    al, al
.text:000000000000B432                 lea     rax, aAlpha     ; "alpha"
.text:000000000000B439                 cmovz   r12, rax
.text:000000000000B43D                 cmp     [r8], rcx
.text:000000000000B440                 mov     rax, [rdx]
.text:000000000000B443                 jnz     loc_B338
.text:000000000000B449
.text:000000000000B449 loc_B449:                               ; CODE XREF: build_charclass_isra_29+52↑j
.text:000000000000B449                 lea     r14, [rcx+rcx+1]
.text:000000000000B44E                 mov     rdi, rax        ; ptr
.text:000000000000B451                 mov     [rsp+38h+var_30], r8
.text:000000000000B456                 mov     [rsp+38h+var_38], rdx
.text:000000000000B45A                 lea     rsi, ds:0[r14*8] ; size
.text:000000000000B462                 call    _realloc
.text:000000000000B467                 test    rax, rax
.text:000000000000B46A                 jz      loc_B788
.text:000000000000B470                 mov     rdx, [rsp+38h+var_38]
.text:000000000000B474                 mov     r8, [rsp+38h+var_30]
.text:000000000000B479                 mov     [rdx], rax
.text:000000000000B47C                 mov     [r8], r14
.text:000000000000B47F                 mov     rcx, [r13+0]
.text:000000000000B483                 jmp     loc_B338
.text:000000000000B488 ; ---------------------------------------------------------------------------
.text:000000000000B488
.text:000000000000B488 loc_B488:                               ; CODE XREF: build_charclass_isra_29+A2↑j
.text:000000000000B488                 lea     rdi, aLower     ; "lower"
.text:000000000000B48F                 mov     ecx, 6
.text:000000000000B494                 mov     rsi, r12
.text:000000000000B497                 repe cmpsb
.text:000000000000B499                 setnbe  al
.text:000000000000B49C                 sbb     al, 0
.text:000000000000B49E                 test    al, al
.text:000000000000B4A0                 jz      short loc_B50A
.text:000000000000B4A2                 lea     rdi, aSpace     ; "space"
.text:000000000000B4A9                 mov     ecx, 6
.text:000000000000B4AE                 mov     rsi, r12
.text:000000000000B4B1                 repe cmpsb
.text:000000000000B4B3                 setnbe  al
.text:000000000000B4B6                 sbb     al, 0
.text:000000000000B4B8                 test    al, al
.text:000000000000B4BA                 jnz     loc_B552
.text:000000000000B4C0                 call    ___ctype_b_loc
.text:000000000000B4C5                 xor     ecx, ecx
.text:000000000000B4C7                 test    rbp, rbp
.text:000000000000B4CA                 mov     rdx, [rax]
.text:000000000000B4CD                 mov     edi, 1
.text:000000000000B4D2                 jnz     loc_B82E
.text:000000000000B4D8                 nop     dword ptr [rax+rax+00000000h]
.text:000000000000B4E0
.text:000000000000B4E0 loc_B4E0:                               ; CODE XREF: build_charclass_isra_29+223↓j
.text:000000000000B4E0                 test    byte ptr [rdx+rcx*2+1], 20h
.text:000000000000B4E5                 jz      short loc_B4F8
.text:000000000000B4E7                 mov     rax, rcx
.text:000000000000B4EA                 mov     rsi, rdi
.text:000000000000B4ED                 sar     rax, 6
.text:000000000000B4F1                 shl     rsi, cl
.text:000000000000B4F4                 or      [rbx+rax*8], rsi
.text:000000000000B4F8
.text:000000000000B4F8 loc_B4F8:                               ; CODE XREF: build_charclass_isra_29+205↑j
.text:000000000000B4F8                 add     rcx, 1
.text:000000000000B4FC                 cmp     rcx, 100h
.text:000000000000B503                 jnz     short loc_B4E0
.text:000000000000B505                 jmp     loc_B3C4
.text:000000000000B50A ; ---------------------------------------------------------------------------
.text:000000000000B50A
.text:000000000000B50A loc_B50A:                               ; CODE XREF: build_charclass_isra_29+1C0↑j
.text:000000000000B50A                 call    ___ctype_b_loc
.text:000000000000B50F                 xor     ecx, ecx
.text:000000000000B511                 test    rbp, rbp
.text:000000000000B514                 mov     rdx, [rax]
.text:000000000000B517                 mov     edi, 1
.text:000000000000B51C                 jnz     loc_B6F2
.text:000000000000B522                 nop     word ptr [rax+rax+00h]
.text:000000000000B528
.text:000000000000B528 loc_B528:                               ; CODE XREF: build_charclass_isra_29+26B↓j
.text:000000000000B528                 test    byte ptr [rdx+rcx*2+1], 2
.text:000000000000B52D                 jz      short loc_B540
.text:000000000000B52F                 mov     rax, rcx
.text:000000000000B532                 mov     rsi, rdi
.text:000000000000B535                 sar     rax, 6
.text:000000000000B539                 shl     rsi, cl
.text:000000000000B53C                 or      [rbx+rax*8], rsi
.text:000000000000B540
.text:000000000000B540 loc_B540:                               ; CODE XREF: build_charclass_isra_29+24D↑j
.text:000000000000B540                 add     rcx, 1
.text:000000000000B544                 cmp     rcx, 100h
.text:000000000000B54B                 jnz     short loc_B528
.text:000000000000B54D                 jmp     loc_B3C4
.text:000000000000B552 ; ---------------------------------------------------------------------------
.text:000000000000B552
.text:000000000000B552 loc_B552:                               ; CODE XREF: build_charclass_isra_29+1DA↑j
.text:000000000000B552                 lea     rdi, aAlpha     ; "alpha"
.text:000000000000B559                 mov     ecx, 6
.text:000000000000B55E                 mov     rsi, r12
.text:000000000000B561                 repe cmpsb
.text:000000000000B563                 setnbe  al
.text:000000000000B566                 sbb     al, 0
.text:000000000000B568                 test    al, al
.text:000000000000B56A                 jz      loc_B613
.text:000000000000B570                 lea     rdi, aDigit     ; "digit"
.text:000000000000B577                 mov     ecx, 6
.text:000000000000B57C                 mov     rsi, r12
.text:000000000000B57F                 repe cmpsb
.text:000000000000B581                 setnbe  al
.text:000000000000B584                 sbb     al, 0
.text:000000000000B586                 test    al, al
.text:000000000000B588                 jnz     loc_B693
.text:000000000000B58E                 call    ___ctype_b_loc
.text:000000000000B593                 xor     ecx, ecx
.text:000000000000B595                 test    rbp, rbp
.text:000000000000B598                 mov     rdx, [rax]
.text:000000000000B59B                 mov     edi, 1
.text:000000000000B5A0                 jnz     loc_BA4A
.text:000000000000B5A6                 db      2Eh
.text:000000000000B5A6                 nop     word ptr [rax+rax+00000000h]
.text:000000000000B5B0
.text:000000000000B5B0 loc_B5B0:                               ; CODE XREF: build_charclass_isra_29+2F3↓j
.text:000000000000B5B0                 test    byte ptr [rdx+rcx*2+1], 8
.text:000000000000B5B5                 jz      short loc_B5C8
.text:000000000000B5B7                 mov     rax, rcx
.text:000000000000B5BA                 mov     rsi, rdi
.text:000000000000B5BD                 sar     rax, 6
.text:000000000000B5C1                 shl     rsi, cl
.text:000000000000B5C4                 or      [rbx+rax*8], rsi
.text:000000000000B5C8
.text:000000000000B5C8 loc_B5C8:                               ; CODE XREF: build_charclass_isra_29+2D5↑j
.text:000000000000B5C8                 add     rcx, 1
.text:000000000000B5CC                 cmp     rcx, 100h
.text:000000000000B5D3                 jnz     short loc_B5B0
.text:000000000000B5D5                 jmp     loc_B3C4
.text:000000000000B5DA ; ---------------------------------------------------------------------------
.text:000000000000B5DA
.text:000000000000B5DA loc_B5DA:                               ; CODE XREF: build_charclass_isra_29+10A↑j
.text:000000000000B5DA                 xor     eax, eax
.text:000000000000B5DC                 nop     dword ptr [rax+00h]
.text:000000000000B5E0
.text:000000000000B5E0 loc_B5E0:                               ; CODE XREF: build_charclass_isra_29+32C↓j
.text:000000000000B5E0                 test    byte ptr [rdx+rax*2], 8
.text:000000000000B5E4                 jz      short loc_B602
.text:000000000000B5E6                 movzx   ecx, byte ptr [rbp+rax+0]
.text:000000000000B5EB                 mov     r10, rdi
.text:000000000000B5EE                 mov     rsi, rcx
.text:000000000000B5F1                 and     ecx, 3Fh
.text:000000000000B5F4                 shr     rsi, 3
.text:000000000000B5F8                 shl     r10, cl
.text:000000000000B5FB                 and     esi, 18h
.text:000000000000B5FE                 or      [rbx+rsi], r10
.text:000000000000B602
.text:000000000000B602 loc_B602:                               ; CODE XREF: build_charclass_isra_29+304↑j
.text:000000000000B602                 add     rax, 1
.text:000000000000B606                 cmp     rax, 100h
.text:000000000000B60C                 jnz     short loc_B5E0
.text:000000000000B60E                 jmp     loc_B3C4
.text:000000000000B613 ; ---------------------------------------------------------------------------
.text:000000000000B613
.text:000000000000B613 loc_B613:                               ; CODE XREF: build_charclass_isra_29+28A↑j
.text:000000000000B613                 call    ___ctype_b_loc
.text:000000000000B618                 xor     ecx, ecx
.text:000000000000B61A                 test    rbp, rbp
.text:000000000000B61D                 mov     rdx, [rax]
.text:000000000000B620                 mov     edi, 1
.text:000000000000B625                 jnz     loc_B7F8
.text:000000000000B62B                 nop     dword ptr [rax+rax+00h]
.text:000000000000B630
.text:000000000000B630 loc_B630:                               ; CODE XREF: build_charclass_isra_29+373↓j
.text:000000000000B630                 test    byte ptr [rdx+rcx*2+1], 4
.text:000000000000B635                 jz      short loc_B648
.text:000000000000B637                 mov     rax, rcx
.text:000000000000B63A                 mov     rsi, rdi
.text:000000000000B63D                 sar     rax, 6
.text:000000000000B641                 shl     rsi, cl
.text:000000000000B644                 or      [rbx+rax*8], rsi
.text:000000000000B648
.text:000000000000B648 loc_B648:                               ; CODE XREF: build_charclass_isra_29+355↑j
.text:000000000000B648                 add     rcx, 1
.text:000000000000B64C                 cmp     rcx, 100h
.text:000000000000B653                 jnz     short loc_B630
.text:000000000000B655                 jmp     loc_B3C4
.text:000000000000B65A ; ---------------------------------------------------------------------------
.text:000000000000B65A
.text:000000000000B65A loc_B65A:                               ; CODE XREF: build_charclass_isra_29+BA↑j
.text:000000000000B65A                 xor     eax, eax
.text:000000000000B65C                 nop     dword ptr [rax+00h]
.text:000000000000B660
.text:000000000000B660 loc_B660:                               ; CODE XREF: build_charclass_isra_29+3AC↓j
.text:000000000000B660                 test    byte ptr [rdx+rax*2], 2
.text:000000000000B664                 jz      short loc_B682
.text:000000000000B666                 movzx   ecx, byte ptr [rbp+rax+0]
.text:000000000000B66B                 mov     r11, rdi
.text:000000000000B66E                 mov     rsi, rcx
.text:000000000000B671                 and     ecx, 3Fh
.text:000000000000B674                 shr     rsi, 3
.text:000000000000B678                 shl     r11, cl
.text:000000000000B67B                 and     esi, 18h
.text:000000000000B67E                 or      [rbx+rsi], r11
.text:000000000000B682
.text:000000000000B682 loc_B682:                               ; CODE XREF: build_charclass_isra_29+384↑j
.text:000000000000B682                 add     rax, 1
.text:000000000000B686                 cmp     rax, 100h
.text:000000000000B68C                 jnz     short loc_B660
.text:000000000000B68E                 jmp     loc_B3C4
.text:000000000000B693 ; ---------------------------------------------------------------------------
.text:000000000000B693
.text:000000000000B693 loc_B693:                               ; CODE XREF: build_charclass_isra_29+2A8↑j
.text:000000000000B693                 lea     rdi, aPrint     ; "print"
.text:000000000000B69A                 mov     ecx, 6
.text:000000000000B69F                 mov     rsi, r12
.text:000000000000B6A2                 repe cmpsb
.text:000000000000B6A4                 setnbe  al
.text:000000000000B6A7                 sbb     al, 0
.text:000000000000B6A9                 test    al, al
.text:000000000000B6AB                 jnz     short loc_B72C
.text:000000000000B6AD                 call    ___ctype_b_loc
.text:000000000000B6B2                 xor     ecx, ecx
.text:000000000000B6B4                 test    rbp, rbp
.text:000000000000B6B7                 mov     rdx, [rax]
.text:000000000000B6BA                 mov     edi, 1
.text:000000000000B6BF                 jnz     loc_BAB7
.text:000000000000B6C5                 nop     dword ptr [rax]
.text:000000000000B6C8
.text:000000000000B6C8 loc_B6C8:                               ; CODE XREF: build_charclass_isra_29+40B↓j
.text:000000000000B6C8                 test    byte ptr [rdx+rcx*2+1], 40h
.text:000000000000B6CD                 jz      short loc_B6E0
.text:000000000000B6CF                 mov     rax, rcx
.text:000000000000B6D2                 mov     rsi, rdi
.text:000000000000B6D5                 sar     rax, 6
.text:000000000000B6D9                 shl     rsi, cl
.text:000000000000B6DC                 or      [rbx+rax*8], rsi
.text:000000000000B6E0
.text:000000000000B6E0 loc_B6E0:                               ; CODE XREF: build_charclass_isra_29+3ED↑j
.text:000000000000B6E0                 add     rcx, 1
.text:000000000000B6E4                 cmp     rcx, 100h
.text:000000000000B6EB                 jnz     short loc_B6C8
.text:000000000000B6ED                 jmp     loc_B3C4
.text:000000000000B6F2 ; ---------------------------------------------------------------------------
.text:000000000000B6F2
.text:000000000000B6F2 loc_B6F2:                               ; CODE XREF: build_charclass_isra_29+23C↑j
.text:000000000000B6F2                 xor     eax, eax
.text:000000000000B6F4                 nop     dword ptr [rax+00h]
.text:000000000000B6F8
.text:000000000000B6F8 loc_B6F8:                               ; CODE XREF: build_charclass_isra_29+445↓j
.text:000000000000B6F8                 test    byte ptr [rdx+rax*2+1], 2
.text:000000000000B6FD                 jz      short loc_B71B
.text:000000000000B6FF                 movzx   ecx, byte ptr [rbp+rax+0]
.text:000000000000B704                 mov     r14, rdi
.text:000000000000B707                 mov     rsi, rcx
.text:000000000000B70A                 and     ecx, 3Fh
.text:000000000000B70D                 shr     rsi, 3
.text:000000000000B711                 shl     r14, cl
.text:000000000000B714                 and     esi, 18h
.text:000000000000B717                 or      [rbx+rsi], r14
.text:000000000000B71B
.text:000000000000B71B loc_B71B:                               ; CODE XREF: build_charclass_isra_29+41D↑j
.text:000000000000B71B                 add     rax, 1
.text:000000000000B71F                 cmp     rax, 100h
.text:000000000000B725                 jnz     short loc_B6F8
.text:000000000000B727                 jmp     loc_B3C4
.text:000000000000B72C ; ---------------------------------------------------------------------------
.text:000000000000B72C
.text:000000000000B72C loc_B72C:                               ; CODE XREF: build_charclass_isra_29+3CB↑j
.text:000000000000B72C                 lea     rdi, aUpper     ; "upper"
.text:000000000000B733                 mov     ecx, 6
.text:000000000000B738                 mov     rsi, r12
.text:000000000000B73B                 repe cmpsb
.text:000000000000B73D                 setnbe  al
.text:000000000000B740                 sbb     al, 0
.text:000000000000B742                 test    al, al
.text:000000000000B744                 jnz     short loc_B792
.text:000000000000B746                 call    ___ctype_b_loc
.text:000000000000B74B                 xor     ecx, ecx
.text:000000000000B74D                 test    rbp, rbp
.text:000000000000B750                 mov     rax, [rax]
.text:000000000000B753                 mov     edi, 1
.text:000000000000B758                 jnz     loc_BA80
.text:000000000000B75E
.text:000000000000B75E loc_B75E:                               ; CODE XREF: build_charclass_isra_29+4A1↓j
.text:000000000000B75E                 test    byte ptr [rax+rcx*2+1], 1
.text:000000000000B763                 jz      short loc_B776
.text:000000000000B765                 mov     rdx, rcx
.text:000000000000B768                 mov     rsi, rdi
.text:000000000000B76B                 sar     rdx, 6
.text:000000000000B76F                 shl     rsi, cl
.text:000000000000B772                 or      [rbx+rdx*8], rsi
.text:000000000000B776
.text:000000000000B776 loc_B776:                               ; CODE XREF: build_charclass_isra_29+483↑j
.text:000000000000B776                 add     rcx, 1
.text:000000000000B77A                 cmp     rcx, 100h
.text:000000000000B781                 jnz     short loc_B75E
.text:000000000000B783                 jmp     loc_B3C4
.text:000000000000B788 ; ---------------------------------------------------------------------------
.text:000000000000B788
.text:000000000000B788 loc_B788:                               ; CODE XREF: build_charclass_isra_29+18A↑j
.text:000000000000B788                 mov     eax, 0Ch
.text:000000000000B78D                 jmp     loc_B3C6
.text:000000000000B792 ; ---------------------------------------------------------------------------
.text:000000000000B792
.text:000000000000B792 loc_B792:                               ; CODE XREF: build_charclass_isra_29+464↑j
.text:000000000000B792                 lea     rdi, aBlank     ; "blank"
.text:000000000000B799                 mov     ecx, 6
.text:000000000000B79E                 mov     rsi, r12
.text:000000000000B7A1                 repe cmpsb
.text:000000000000B7A3                 setnbe  al
.text:000000000000B7A6                 sbb     al, 0
.text:000000000000B7A8                 test    al, al
.text:000000000000B7AA                 jnz     loc_B89E
.text:000000000000B7B0                 call    ___ctype_b_loc
.text:000000000000B7B5                 xor     ecx, ecx
.text:000000000000B7B7                 test    rbp, rbp
.text:000000000000B7BA                 mov     rdx, [rax]
.text:000000000000B7BD                 mov     esi, 1
.text:000000000000B7C2                 jnz     loc_B864
.text:000000000000B7C8
.text:000000000000B7C8 loc_B7C8:                               ; CODE XREF: build_charclass_isra_29+50A↓j
.text:000000000000B7C8                 test    byte ptr [rdx+rcx*2], 1
.text:000000000000B7CC                 jz      short loc_B7DF
.text:000000000000B7CE                 mov     rax, rcx
.text:000000000000B7D1                 mov     rdi, rsi
.text:000000000000B7D4                 sar     rax, 6
.text:000000000000B7D8                 shl     rdi, cl
.text:000000000000B7DB                 or      [rbx+rax*8], rdi
.text:000000000000B7DF
.text:000000000000B7DF loc_B7DF:                               ; CODE XREF: build_charclass_isra_29+4EC↑j
.text:000000000000B7DF                 add     rcx, 1
.text:000000000000B7E3                 cmp     rcx, 100h
.text:000000000000B7EA                 jnz     short loc_B7C8
.text:000000000000B7EC                 jmp     loc_B3C4
.text:000000000000B7EC ; ---------------------------------------------------------------------------
.text:000000000000B7F1                 align 8
.text:000000000000B7F8
.text:000000000000B7F8 loc_B7F8:                               ; CODE XREF: build_charclass_isra_29+345↑j
.text:000000000000B7F8                 xor     eax, eax
.text:000000000000B7FA
.text:000000000000B7FA loc_B7FA:                               ; CODE XREF: build_charclass_isra_29+547↓j
.text:000000000000B7FA                 test    byte ptr [rdx+rax*2+1], 4
.text:000000000000B7FF                 jz      short loc_B81D
.text:000000000000B801                 movzx   ecx, byte ptr [rbp+rax+0]
.text:000000000000B806                 mov     r9, rdi
.text:000000000000B809                 mov     rsi, rcx
.text:000000000000B80C                 and     ecx, 3Fh
.text:000000000000B80F                 shr     rsi, 3
.text:000000000000B813                 shl     r9, cl
.text:000000000000B816                 and     esi, 18h
.text:000000000000B819                 or      [rbx+rsi], r9
.text:000000000000B81D
.text:000000000000B81D loc_B81D:                               ; CODE XREF: build_charclass_isra_29+51F↑j
.text:000000000000B81D                 add     rax, 1
.text:000000000000B821                 cmp     rax, 100h
.text:000000000000B827                 jnz     short loc_B7FA
.text:000000000000B829                 jmp     loc_B3C4
.text:000000000000B82E ; ---------------------------------------------------------------------------
.text:000000000000B82E
.text:000000000000B82E loc_B82E:                               ; CODE XREF: build_charclass_isra_29+1F2↑j
.text:000000000000B82E                 xor     eax, eax
.text:000000000000B830
.text:000000000000B830 loc_B830:                               ; CODE XREF: build_charclass_isra_29+57D↓j
.text:000000000000B830                 test    byte ptr [rdx+rax*2+1], 20h
.text:000000000000B835                 jz      short loc_B853
.text:000000000000B837                 movzx   ecx, byte ptr [rbp+rax+0]
.text:000000000000B83C                 mov     r9, rdi
.text:000000000000B83F                 mov     rsi, rcx
.text:000000000000B842                 and     ecx, 3Fh
.text:000000000000B845                 shr     rsi, 3
.text:000000000000B849                 shl     r9, cl
.text:000000000000B84C                 and     esi, 18h
.text:000000000000B84F                 or      [rbx+rsi], r9
.text:000000000000B853
.text:000000000000B853 loc_B853:                               ; CODE XREF: build_charclass_isra_29+555↑j
.text:000000000000B853                 add     rax, 1
.text:000000000000B857                 cmp     rax, 100h
.text:000000000000B85D                 jnz     short loc_B830
.text:000000000000B85F                 jmp     loc_B3C4
.text:000000000000B864 ; ---------------------------------------------------------------------------
.text:000000000000B864
.text:000000000000B864 loc_B864:                               ; CODE XREF: build_charclass_isra_29+4E2↑j
.text:000000000000B864                 xor     eax, eax
.text:000000000000B866                 mov     edi, 1
.text:000000000000B86B
.text:000000000000B86B loc_B86B:                               ; CODE XREF: build_charclass_isra_29+5B7↓j
.text:000000000000B86B                 test    byte ptr [rdx+rax*2], 1
.text:000000000000B86F                 jz      short loc_B88D
.text:000000000000B871                 movzx   ecx, byte ptr [rbp+rax+0]
.text:000000000000B876                 mov     r14, rdi
.text:000000000000B879                 mov     rsi, rcx
.text:000000000000B87C                 and     ecx, 3Fh
.text:000000000000B87F                 shr     rsi, 3
.text:000000000000B883                 shl     r14, cl
.text:000000000000B886                 and     esi, 18h
.text:000000000000B889                 or      [rbx+rsi], r14
.text:000000000000B88D
.text:000000000000B88D loc_B88D:                               ; CODE XREF: build_charclass_isra_29+58F↑j
.text:000000000000B88D                 add     rax, 1
.text:000000000000B891                 cmp     rax, 100h
.text:000000000000B897                 jnz     short loc_B86B
.text:000000000000B899                 jmp     loc_B3C4
.text:000000000000B89E ; ---------------------------------------------------------------------------
.text:000000000000B89E
.text:000000000000B89E loc_B89E:                               ; CODE XREF: build_charclass_isra_29+4CA↑j
.text:000000000000B89E                 lea     rsi, aGraph     ; "graph"
.text:000000000000B8A5                 mov     rdi, r12        ; s1
.text:000000000000B8A8                 call    _strcmp
.text:000000000000B8AD                 test    eax, eax
.text:000000000000B8AF                 jnz     short loc_B92A
.text:000000000000B8B1                 call    ___ctype_b_loc
.text:000000000000B8B6                 xor     ecx, ecx
.text:000000000000B8B8                 test    rbp, rbp
.text:000000000000B8BB                 mov     rsi, [rax]
.text:000000000000B8BE                 mov     edx, 1
.text:000000000000B8C3                 jnz     short loc_B8EF
.text:000000000000B8C5
.text:000000000000B8C5 loc_B8C5:                               ; CODE XREF: build_charclass_isra_29+608↓j
.text:000000000000B8C5                 cmp     word ptr [rsi+rcx*2], 0
.text:000000000000B8CA                 jns     short loc_B8DD
.text:000000000000B8CC                 mov     rax, rcx
.text:000000000000B8CF                 mov     rdi, rdx
.text:000000000000B8D2                 sar     rax, 6
.text:000000000000B8D6                 shl     rdi, cl
.text:000000000000B8D9                 or      [rbx+rax*8], rdi
.text:000000000000B8DD
.text:000000000000B8DD loc_B8DD:                               ; CODE XREF: build_charclass_isra_29+5EA↑j
.text:000000000000B8DD                 add     rcx, 1
.text:000000000000B8E1                 cmp     rcx, 100h
.text:000000000000B8E8                 jnz     short loc_B8C5
.text:000000000000B8EA                 jmp     loc_B3C4
.text:000000000000B8EF ; ---------------------------------------------------------------------------
.text:000000000000B8EF
.text:000000000000B8EF loc_B8EF:                               ; CODE XREF: build_charclass_isra_29+5E3↑j
.text:000000000000B8EF                 xor     eax, eax
.text:000000000000B8F1                 mov     edi, 1
.text:000000000000B8F6
.text:000000000000B8F6 loc_B8F6:                               ; CODE XREF: build_charclass_isra_29+643↓j
.text:000000000000B8F6                 cmp     word ptr [rsi+rax*2], 0
.text:000000000000B8FB                 jns     short loc_B919
.text:000000000000B8FD                 movzx   ecx, byte ptr [rbp+rax+0]
.text:000000000000B902                 mov     r9, rdi
.text:000000000000B905                 mov     rdx, rcx
.text:000000000000B908                 and     ecx, 3Fh
.text:000000000000B90B                 shr     rdx, 3
.text:000000000000B90F                 shl     r9, cl
.text:000000000000B912                 and     edx, 18h
.text:000000000000B915                 or      [rbx+rdx], r9
.text:000000000000B919
.text:000000000000B919 loc_B919:                               ; CODE XREF: build_charclass_isra_29+61B↑j
.text:000000000000B919                 add     rax, 1
.text:000000000000B91D                 cmp     rax, 100h
.text:000000000000B923                 jnz     short loc_B8F6
.text:000000000000B925                 jmp     loc_B3C4
.text:000000000000B92A ; ---------------------------------------------------------------------------
.text:000000000000B92A
.text:000000000000B92A loc_B92A:                               ; CODE XREF: build_charclass_isra_29+5CF↑j
.text:000000000000B92A                 lea     rsi, aPunct     ; "punct"
.text:000000000000B931                 mov     rdi, r12        ; s1
.text:000000000000B934                 call    _strcmp
.text:000000000000B939                 test    eax, eax
.text:000000000000B93B                 jnz     short loc_B9B4
.text:000000000000B93D                 call    ___ctype_b_loc
.text:000000000000B942                 xor     ecx, ecx
.text:000000000000B944                 test    rbp, rbp
.text:000000000000B947                 mov     rsi, [rax]
.text:000000000000B94A                 mov     edx, 1
.text:000000000000B94F                 jnz     short loc_B97A
.text:000000000000B951
.text:000000000000B951 loc_B951:                               ; CODE XREF: build_charclass_isra_29+693↓j
.text:000000000000B951                 test    byte ptr [rsi+rcx*2], 4
.text:000000000000B955                 jz      short loc_B968
.text:000000000000B957                 mov     rax, rcx
.text:000000000000B95A                 mov     rdi, rdx
.text:000000000000B95D                 sar     rax, 6
.text:000000000000B961                 shl     rdi, cl
.text:000000000000B964                 or      [rbx+rax*8], rdi
.text:000000000000B968
.text:000000000000B968 loc_B968:                               ; CODE XREF: build_charclass_isra_29+675↑j
.text:000000000000B968                 add     rcx, 1
.text:000000000000B96C                 cmp     rcx, 100h
.text:000000000000B973                 jnz     short loc_B951
.text:000000000000B975                 jmp     loc_B3C4
.text:000000000000B97A ; ---------------------------------------------------------------------------
.text:000000000000B97A
.text:000000000000B97A loc_B97A:                               ; CODE XREF: build_charclass_isra_29+66F↑j
.text:000000000000B97A                 xor     eax, eax
.text:000000000000B97C                 mov     edi, 1
.text:000000000000B981
.text:000000000000B981 loc_B981:                               ; CODE XREF: build_charclass_isra_29+6CD↓j
.text:000000000000B981                 test    byte ptr [rsi+rax*2], 4
.text:000000000000B985                 jz      short loc_B9A3
.text:000000000000B987                 movzx   ecx, byte ptr [rbp+rax+0]
.text:000000000000B98C                 mov     r14, rdi
.text:000000000000B98F                 mov     rdx, rcx
.text:000000000000B992                 and     ecx, 3Fh
.text:000000000000B995                 shr     rdx, 3
.text:000000000000B999                 shl     r14, cl
.text:000000000000B99C                 and     edx, 18h
.text:000000000000B99F                 or      [rbx+rdx], r14
.text:000000000000B9A3
.text:000000000000B9A3 loc_B9A3:                               ; CODE XREF: build_charclass_isra_29+6A5↑j
.text:000000000000B9A3                 add     rax, 1
.text:000000000000B9A7                 cmp     rax, 100h
.text:000000000000B9AD                 jnz     short loc_B981
.text:000000000000B9AF                 jmp     loc_B3C4
.text:000000000000B9B4 ; ---------------------------------------------------------------------------
.text:000000000000B9B4
.text:000000000000B9B4 loc_B9B4:                               ; CODE XREF: build_charclass_isra_29+65B↑j
.text:000000000000B9B4                 lea     rsi, asc_158DD  ; "x"
.text:000000000000B9BB                 mov     rdi, r12        ; s1
.text:000000000000B9BE                 call    _strcmp
.text:000000000000B9C3                 test    eax, eax
.text:000000000000B9C5                 jnz     short loc_BA40
.text:000000000000B9C7                 call    ___ctype_b_loc
.text:000000000000B9CC                 xor     ecx, ecx
.text:000000000000B9CE                 test    rbp, rbp
.text:000000000000B9D1                 mov     rsi, [rax]
.text:000000000000B9D4                 mov     edx, 1
.text:000000000000B9D9                 jnz     short loc_BA05
.text:000000000000B9DB
.text:000000000000B9DB loc_B9DB:                               ; CODE XREF: build_charclass_isra_29+71E↓j
.text:000000000000B9DB                 test    byte ptr [rsi+rcx*2+1], 10h
.text:000000000000B9E0                 jz      short loc_B9F3
.text:000000000000B9E2                 mov     rax, rcx
.text:000000000000B9E5                 mov     rdi, rdx
.text:000000000000B9E8                 sar     rax, 6
.text:000000000000B9EC                 shl     rdi, cl
.text:000000000000B9EF                 or      [rbx+rax*8], rdi
.text:000000000000B9F3
.text:000000000000B9F3 loc_B9F3:                               ; CODE XREF: build_charclass_isra_29+700↑j
.text:000000000000B9F3                 add     rcx, 1
.text:000000000000B9F7                 cmp     rcx, 100h
.text:000000000000B9FE                 jnz     short loc_B9DB
.text:000000000000BA00                 jmp     loc_B3C4
.text:000000000000BA05 ; ---------------------------------------------------------------------------
.text:000000000000BA05
.text:000000000000BA05 loc_BA05:                               ; CODE XREF: build_charclass_isra_29+6F9↑j
.text:000000000000BA05                 xor     eax, eax
.text:000000000000BA07                 mov     edi, 1
.text:000000000000BA0C
.text:000000000000BA0C loc_BA0C:                               ; CODE XREF: build_charclass_isra_29+759↓j
.text:000000000000BA0C                 test    byte ptr [rsi+rax*2+1], 10h
.text:000000000000BA11                 jz      short loc_BA2F
.text:000000000000BA13                 movzx   ecx, byte ptr [rbp+rax+0]
.text:000000000000BA18                 mov     r9, rdi
.text:000000000000BA1B                 mov     rdx, rcx
.text:000000000000BA1E                 and     ecx, 3Fh
.text:000000000000BA21                 shr     rdx, 3
.text:000000000000BA25                 shl     r9, cl
.text:000000000000BA28                 and     edx, 18h
.text:000000000000BA2B                 or      [rbx+rdx], r9
.text:000000000000BA2F
.text:000000000000BA2F loc_BA2F:                               ; CODE XREF: build_charclass_isra_29+731↑j
.text:000000000000BA2F                 add     rax, 1
.text:000000000000BA33                 cmp     rax, 100h
.text:000000000000BA39                 jnz     short loc_BA0C
.text:000000000000BA3B                 jmp     loc_B3C4
.text:000000000000BA40 ; ---------------------------------------------------------------------------
.text:000000000000BA40
.text:000000000000BA40 loc_BA40:                               ; CODE XREF: build_charclass_isra_29+6E5↑j
.text:000000000000BA40                 mov     eax, 4
.text:000000000000BA45                 jmp     loc_B3C6
.text:000000000000BA4A ; ---------------------------------------------------------------------------
.text:000000000000BA4A
.text:000000000000BA4A loc_BA4A:                               ; CODE XREF: build_charclass_isra_29+2C0↑j
.text:000000000000BA4A                 xor     eax, eax
.text:000000000000BA4C
.text:000000000000BA4C loc_BA4C:                               ; CODE XREF: build_charclass_isra_29+799↓j
.text:000000000000BA4C                 test    byte ptr [rdx+rax*2+1], 8
.text:000000000000BA51                 jz      short loc_BA6F
.text:000000000000BA53                 movzx   ecx, byte ptr [rbp+rax+0]
.text:000000000000BA58                 mov     r14, rdi
.text:000000000000BA5B                 mov     rsi, rcx
.text:000000000000BA5E                 and     ecx, 3Fh
.text:000000000000BA61                 shr     rsi, 3
.text:000000000000BA65                 shl     r14, cl
.text:000000000000BA68                 and     esi, 18h
.text:000000000000BA6B                 or      [rbx+rsi], r14
.text:000000000000BA6F
.text:000000000000BA6F loc_BA6F:                               ; CODE XREF: build_charclass_isra_29+771↑j
.text:000000000000BA6F                 add     rax, 1
.text:000000000000BA73                 cmp     rax, 100h
.text:000000000000BA79                 jnz     short loc_BA4C
.text:000000000000BA7B                 jmp     loc_B3C4
.text:000000000000BA80 ; ---------------------------------------------------------------------------
.text:000000000000BA80
.text:000000000000BA80 loc_BA80:                               ; CODE XREF: build_charclass_isra_29+478↑j
.text:000000000000BA80                 xor     edx, edx
.text:000000000000BA82
.text:000000000000BA82 loc_BA82:                               ; CODE XREF: build_charclass_isra_29+7D0↓j
.text:000000000000BA82                 test    byte ptr [rax+rdx*2+1], 1
.text:000000000000BA87                 jz      short loc_BAA5
.text:000000000000BA89                 movzx   ecx, byte ptr [rbp+rdx+0]
.text:000000000000BA8E                 mov     r9, rdi
.text:000000000000BA91                 mov     rsi, rcx
.text:000000000000BA94                 and     ecx, 3Fh
.text:000000000000BA97                 shr     rsi, 3
.text:000000000000BA9B                 shl     r9, cl
.text:000000000000BA9E                 and     esi, 18h
.text:000000000000BAA1                 or      [rbx+rsi], r9
.text:000000000000BAA5
.text:000000000000BAA5 loc_BAA5:                               ; CODE XREF: build_charclass_isra_29+7A7↑j
.text:000000000000BAA5                 add     rdx, 1
.text:000000000000BAA9                 cmp     rdx, 100h
.text:000000000000BAB0                 jnz     short loc_BA82
.text:000000000000BAB2                 jmp     loc_B3C4
.text:000000000000BAB7 ; ---------------------------------------------------------------------------
.text:000000000000BAB7
.text:000000000000BAB7 loc_BAB7:                               ; CODE XREF: build_charclass_isra_29+3DF↑j
.text:000000000000BAB7                 xor     eax, eax
.text:000000000000BAB9
.text:000000000000BAB9 loc_BAB9:                               ; CODE XREF: build_charclass_isra_29+806↓j
.text:000000000000BAB9                 test    byte ptr [rdx+rax*2+1], 40h
.text:000000000000BABE                 jz      short loc_BADC
.text:000000000000BAC0                 movzx   ecx, byte ptr [rbp+rax+0]
.text:000000000000BAC5                 mov     r14, rdi
.text:000000000000BAC8                 mov     rsi, rcx
.text:000000000000BACB                 and     ecx, 3Fh
.text:000000000000BACE                 shr     rsi, 3
.text:000000000000BAD2                 shl     r14, cl
.text:000000000000BAD5                 and     esi, 18h
.text:000000000000BAD8                 or      [rbx+rsi], r14
.text:000000000000BADC
.text:000000000000BADC loc_BADC:                               ; CODE XREF: build_charclass_isra_29+7DE↑j
.text:000000000000BADC                 add     rax, 1
.text:000000000000BAE0                 cmp     rax, 100h
.text:000000000000BAE6                 jnz     short loc_BAB9
.text:000000000000BAE8                 jmp     loc_B3C4
.text:000000000000BAE8 ; } // starts at B2E0
.text:000000000000BAE8 build_charclass_isra_29 endp
.text:000000000000BAE8
.text:000000000000BAE8 ; ---------------------------------------------------------------------------
.text:000000000000BAED                 align 10h
.text:000000000000BAF0
.text:000000000000BAF0 ; =============== S U B R O U T I N E =======================================
.text:000000000000BAF0
.text:000000000000BAF0
.text:000000000000BAF0 build_charclass_op proc near            ; CODE XREF: parse_expression+992↓p
.text:000000000000BAF0
.text:000000000000BAF0 var_88          = qword ptr -88h
.text:000000000000BAF0 var_80          = qword ptr -80h
.text:000000000000BAF0 var_70          = qword ptr -70h
.text:000000000000BAF0 var_68          = qword ptr -68h
.text:000000000000BAF0 var_60          = byte ptr -60h
.text:000000000000BAF0 var_58          = byte ptr -58h
.text:000000000000BAF0 var_50          = byte ptr -50h
.text:000000000000BAF0 var_40          = qword ptr -40h
.text:000000000000BAF0
.text:000000000000BAF0 ; __unwind {
.text:000000000000BAF0                 push    r15
.text:000000000000BAF2                 push    r14
.text:000000000000BAF4                 mov     r14, rdx
.text:000000000000BAF7                 push    r13
.text:000000000000BAF9                 push    r12
.text:000000000000BAFB                 mov     r13, rcx
.text:000000000000BAFE                 push    rbp
.text:000000000000BAFF                 push    rbx
.text:000000000000BB00                 mov     rbp, rdi
.text:000000000000BB03                 mov     edi, 20h ; ' '  ; nmemb
.text:000000000000BB08                 mov     r12d, r8d
.text:000000000000BB0B                 sub     rsp, 58h
.text:000000000000BB0F                 mov     [rsp+88h+var_88], rsi
.text:000000000000BB13                 mov     esi, 1          ; size
.text:000000000000BB18                 mov     [rsp+88h+var_80], r9
.text:000000000000BB1D                 mov     rax, fs:28h
.text:000000000000BB26                 mov     [rsp+88h+var_40], rax
.text:000000000000BB2B                 xor     eax, eax
.text:000000000000BB2D                 mov     [rsp+88h+var_70], 0
.text:000000000000BB36                 call    _calloc
.text:000000000000BB3B                 test    rax, rax
.text:000000000000BB3E                 jz      loc_BD00
.text:000000000000BB44                 mov     esi, 1          ; size
.text:000000000000BB49                 mov     edi, 50h ; 'P'  ; nmemb
.text:000000000000BB4E                 mov     rbx, rax
.text:000000000000BB51                 call    _calloc
.text:000000000000BB56                 test    rax, rax
.text:000000000000BB59                 mov     r15, rax
.text:000000000000BB5C                 jz      loc_BD10
.text:000000000000BB62                 movzx   eax, byte ptr [rax+20h]
.text:000000000000BB66                 sub     rsp, 8
.text:000000000000BB6A                 mov     edx, r12d
.text:000000000000BB6D                 push    0
.text:000000000000BB6F                 and     edx, 1
.text:000000000000BB72                 mov     rdi, [rsp+98h+var_88]
.text:000000000000BB77                 lea     rcx, [r15+48h]
.text:000000000000BB7B                 mov     r9, r14
.text:000000000000BB7E                 mov     rsi, rbx
.text:000000000000BB81                 lea     r8, [rsp+98h+var_70]
.text:000000000000BB86                 and     eax, 0FFFFFFFEh
.text:000000000000BB89                 or      eax, edx
.text:000000000000BB8B                 lea     rdx, [r15+18h]
.text:000000000000BB8F                 mov     [r15+20h], al
.text:000000000000BB93                 call    build_charclass_isra_29
.text:000000000000BB98                 test    eax, eax
.text:000000000000BB9A                 pop     rdx
.text:000000000000BB9B                 pop     rcx
.text:000000000000BB9C                 jnz     loc_BD30
.text:000000000000BBA2                 movsx   rcx, byte ptr [r13+0]
.text:000000000000BBA7                 mov     esi, 1
.text:000000000000BBAC                 test    cl, cl
.text:000000000000BBAE                 jz      short loc_BBEA
.text:000000000000BBB0
.text:000000000000BBB0 loc_BBB0:                               ; CODE XREF: build_charclass_op+F8↓j
.text:000000000000BBB0                 lea     rax, [rcx+3Fh]
.text:000000000000BBB4                 test    rcx, rcx
.text:000000000000BBB7                 mov     rdx, rcx
.text:000000000000BBBA                 cmovns  rax, rcx
.text:000000000000BBBE                 sar     rdx, 3Fh
.text:000000000000BBC2                 add     r13, 1
.text:000000000000BBC6                 shr     rdx, 3Ah
.text:000000000000BBCA                 sar     rax, 6
.text:000000000000BBCE                 add     rcx, rdx
.text:000000000000BBD1                 and     ecx, 3Fh
.text:000000000000BBD4                 sub     rcx, rdx
.text:000000000000BBD7                 mov     rdx, rsi
.text:000000000000BBDA                 shl     rdx, cl
.text:000000000000BBDD                 movsx   rcx, byte ptr [r13+0]
.text:000000000000BBE2                 or      [rbx+rax*8], rdx
.text:000000000000BBE6                 test    cl, cl
.text:000000000000BBE8                 jnz     short loc_BBB0
.text:000000000000BBEA
.text:000000000000BBEA loc_BBEA:                               ; CODE XREF: build_charclass_op+BE↑j
.text:000000000000BBEA                 test    r12b, r12b
.text:000000000000BBED                 jz      short loc_BC02
.text:000000000000BBEF                 lea     rdx, [rbx+20h]
.text:000000000000BBF3                 mov     rax, rbx
.text:000000000000BBF6
.text:000000000000BBF6 loc_BBF6:                               ; CODE XREF: build_charclass_op+110↓j
.text:000000000000BBF6                 not     qword ptr [rax]
.text:000000000000BBF9                 add     rax, 8
.text:000000000000BBFD                 cmp     rdx, rax
.text:000000000000BC00                 jnz     short loc_BBF6
.text:000000000000BC02
.text:000000000000BC02 loc_BC02:                               ; CODE XREF: build_charclass_op+FD↑j
.text:000000000000BC02                 cmp     dword ptr [rbp+0B4h], 1
.text:000000000000BC09                 jle     short loc_BC23
.text:000000000000BC0B                 mov     rcx, [rbp+78h]
.text:000000000000BC0F                 xor     eax, eax
.text:000000000000BC11
.text:000000000000BC11 loc_BC11:                               ; CODE XREF: build_charclass_op+131↓j
.text:000000000000BC11                 mov     rdx, [rcx+rax]
.text:000000000000BC15                 and     [rbx+rax], rdx
.text:000000000000BC19                 add     rax, 8
.text:000000000000BC1D                 cmp     rax, 20h ; ' '
.text:000000000000BC21                 jnz     short loc_BC11
.text:000000000000BC23
.text:000000000000BC23 loc_BC23:                               ; CODE XREF: build_charclass_op+119↑j
.text:000000000000BC23                 lea     r9, [rsp+88h+var_68]
.text:000000000000BC28                 lea     r12, [rbp+70h]
.text:000000000000BC2C                 lea     r13, [rbp+80h]
.text:000000000000BC33                 xor     ecx, ecx
.text:000000000000BC35                 xor     edx, edx
.text:000000000000BC37                 mov     [rsp+88h+var_60], 3
.text:000000000000BC3C                 mov     r8, r9
.text:000000000000BC3F                 mov     rsi, r13
.text:000000000000BC42                 mov     rdi, r12
.text:000000000000BC45                 mov     [rsp+88h+var_68], rbx
.text:000000000000BC4A                 mov     [rsp+88h+var_88], r9
.text:000000000000BC4E                 call    create_token_tree_isra_16
.text:000000000000BC53                 test    rax, rax
.text:000000000000BC56                 mov     r14, rax
.text:000000000000BC59                 jz      loc_BCF0
.text:000000000000BC5F                 cmp     dword ptr [rbp+0B4h], 1
.text:000000000000BC66                 jle     short loc_BCE0
.text:000000000000BC68                 or      byte ptr [rbp+0B0h], 2
.text:000000000000BC6F                 mov     r9, [rsp+88h+var_88]
.text:000000000000BC73                 xor     ecx, ecx
.text:000000000000BC75                 xor     edx, edx
.text:000000000000BC77                 mov     rsi, r13
.text:000000000000BC7A                 mov     rdi, r12
.text:000000000000BC7D                 mov     [rsp+88h+var_60], 6
.text:000000000000BC82                 mov     [rsp+88h+var_68], r15
.text:000000000000BC87                 mov     r8, r9
.text:000000000000BC8A                 call    create_token_tree_isra_16
.text:000000000000BC8F                 test    rax, rax
.text:000000000000BC92                 jz      short loc_BCF0
.text:000000000000BC94                 lea     r8, [rsp+88h+var_58]
.text:000000000000BC99                 mov     rdx, r14
.text:000000000000BC9C                 mov     rcx, rax
.text:000000000000BC9F                 mov     rsi, r13
.text:000000000000BCA2                 mov     rdi, r12
.text:000000000000BCA5                 mov     [rsp+88h+var_50], 0Ah
.text:000000000000BCAA                 call    create_token_tree_isra_16
.text:000000000000BCAF                 mov     r14, rax
.text:000000000000BCB2
.text:000000000000BCB2 loc_BCB2:                               ; CODE XREF: build_charclass_op+1F8↓j
.text:000000000000BCB2                                         ; build_charclass_op+21E↓j ...
.text:000000000000BCB2                 mov     rdi, [rsp+88h+var_40]
.text:000000000000BCB7                 xor     rdi, fs:28h
.text:000000000000BCC0                 mov     rax, r14
.text:000000000000BCC3                 jnz     loc_BD55
.text:000000000000BCC9                 add     rsp, 58h
.text:000000000000BCCD                 pop     rbx
.text:000000000000BCCE                 pop     rbp
.text:000000000000BCCF                 pop     r12
.text:000000000000BCD1                 pop     r13
.text:000000000000BCD3                 pop     r14
.text:000000000000BCD5                 pop     r15
.text:000000000000BCD7                 retn
.text:000000000000BCD7 ; ---------------------------------------------------------------------------
.text:000000000000BCD8                 align 20h
.text:000000000000BCE0
.text:000000000000BCE0 loc_BCE0:                               ; CODE XREF: build_charclass_op+176↑j
.text:000000000000BCE0                 mov     rdi, r15        ; ptr
.text:000000000000BCE3                 call    isl_union_flow_free_0
.text:000000000000BCE8                 jmp     short loc_BCB2
.text:000000000000BCE8 ; ---------------------------------------------------------------------------
.text:000000000000BCEA                 align 10h
.text:000000000000BCF0
.text:000000000000BCF0 loc_BCF0:                               ; CODE XREF: build_charclass_op+169↑j
.text:000000000000BCF0                                         ; build_charclass_op+1A2↑j
.text:000000000000BCF0                 mov     rdi, rbx        ; ptr
.text:000000000000BCF3                 call    _free
.text:000000000000BCF8                 mov     rdi, r15        ; ptr
.text:000000000000BCFB                 call    isl_union_flow_free_0
.text:000000000000BD00
.text:000000000000BD00 loc_BD00:                               ; CODE XREF: build_charclass_op+4E↑j
.text:000000000000BD00                 mov     rax, [rsp+88h+var_80]
.text:000000000000BD05                 xor     r14d, r14d
.text:000000000000BD08                 mov     dword ptr [rax], 0Ch
.text:000000000000BD0E                 jmp     short loc_BCB2
.text:000000000000BD10 ; ---------------------------------------------------------------------------
.text:000000000000BD10
.text:000000000000BD10 loc_BD10:                               ; CODE XREF: build_charclass_op+6C↑j
.text:000000000000BD10                 mov     rdi, rbx        ; ptr
.text:000000000000BD13                 xor     r14d, r14d
.text:000000000000BD16                 call    _free
.text:000000000000BD1B                 mov     rax, [rsp+88h+var_80]
.text:000000000000BD20                 mov     dword ptr [rax], 0Ch
.text:000000000000BD26                 jmp     short loc_BCB2
.text:000000000000BD26 ; ---------------------------------------------------------------------------
.text:000000000000BD28                 align 10h
.text:000000000000BD30
.text:000000000000BD30 loc_BD30:                               ; CODE XREF: build_charclass_op+AC↑j
.text:000000000000BD30                 mov     rdi, rbx        ; ptr
.text:000000000000BD33                 mov     dword ptr [rsp+88h+var_88], eax
.text:000000000000BD36                 xor     r14d, r14d
.text:000000000000BD39                 call    _free
.text:000000000000BD3E                 mov     rdi, r15        ; ptr
.text:000000000000BD41                 call    isl_union_flow_free_0
.text:000000000000BD46                 mov     rdi, [rsp+88h+var_80]
.text:000000000000BD4B                 mov     eax, dword ptr [rsp+88h+var_88]
.text:000000000000BD4E                 mov     [rdi], eax
.text:000000000000BD50                 jmp     loc_BCB2
.text:000000000000BD55 ; ---------------------------------------------------------------------------
.text:000000000000BD55
.text:000000000000BD55 loc_BD55:                               ; CODE XREF: build_charclass_op+1D3↑j
.text:000000000000BD55                 call    ___stack_chk_fail
.text:000000000000BD55 ; } // starts at BAF0
.text:000000000000BD55 build_charclass_op endp
.text:000000000000BD55
.text:000000000000BD55 ; ---------------------------------------------------------------------------
.text:000000000000BD5A                 align 20h
.text:000000000000BD60
.text:000000000000BD60 ; =============== S U B R O U T I N E =======================================
.text:000000000000BD60
.text:000000000000BD60
.text:000000000000BD60 re_compile_fastmap_iter_isra_30 proc near
.text:000000000000BD60                                         ; CODE XREF: rpl_re_compile_fastmap+50↓p
.text:000000000000BD60                                         ; rpl_re_compile_fastmap+6F↓p ...
.text:000000000000BD60
.text:000000000000BD60 var_1A8         = qword ptr -1A8h
.text:000000000000BD60 var_1A0         = qword ptr -1A0h
.text:000000000000BD60 var_198         = qword ptr -198h
.text:000000000000BD60 var_190         = qword ptr -190h
.text:000000000000BD60 var_188         = qword ptr -188h
.text:000000000000BD60 var_180         = qword ptr -180h
.text:000000000000BD60 var_178         = qword ptr -178h
.text:000000000000BD60 s               = qword ptr -170h
.text:000000000000BD60 ps              = qword ptr -168h
.text:000000000000BD60 var_160         = qword ptr -160h
.text:000000000000BD60 wc              = dword ptr -154h
.text:000000000000BD60 var_150         = byte ptr -150h
.text:000000000000BD60 var_148         = byte ptr -148h
.text:000000000000BD60 var_40          = qword ptr -40h
.text:000000000000BD60
.text:000000000000BD60 ; __unwind {
.text:000000000000BD60                 push    r15
.text:000000000000BD62                 push    r14
.text:000000000000BD64                 mov     rax, rdi
.text:000000000000BD67                 push    r13
.text:000000000000BD69                 push    r12
.text:000000000000BD6B                 push    rbp
.text:000000000000BD6C                 push    rbx
.text:000000000000BD6D                 xor     ebx, ebx
.text:000000000000BD6F                 mov     rbp, rcx
.text:000000000000BD72                 sub     rsp, 178h
.text:000000000000BD79                 mov     rax, [rax]
.text:000000000000BD7C                 mov     [rsp+1A8h+var_178], rdi
.text:000000000000BD81                 mov     [rsp+1A8h+var_188], rsi
.text:000000000000BD86                 mov     rdi, fs:28h
.text:000000000000BD8F                 mov     [rsp+1A8h+var_40], rdi
.text:000000000000BD97                 xor     edi, edi
.text:000000000000BD99                 cmp     dword ptr [rax+0B4h], 1
.text:000000000000BDA0                 mov     [rsp+1A8h+var_180], rdx
.text:000000000000BDA5                 mov     [rsp+1A8h+var_1A0], rax
.text:000000000000BDAA                 jnz     short loc_BDC3
.text:000000000000BDAC                 mov     rax, [rsp+1A8h+var_178]
.text:000000000000BDB1                 mov     rax, [rax+18h]
.text:000000000000BDB5                 mov     rbx, rax
.text:000000000000BDB8                 mov     [rsp+1A8h+var_1A8], rax
.text:000000000000BDBC                 shr     rbx, 16h
.text:000000000000BDC0                 and     ebx, 1
.text:000000000000BDC3
.text:000000000000BDC3 loc_BDC3:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+4A↑j
.text:000000000000BDC3                 mov     rax, [rsp+1A8h+var_188]
.text:000000000000BDC8                 cmp     qword ptr [rax], 0
.text:000000000000BDCC                 jle     loc_C1DD
.text:000000000000BDD2                 lea     rax, [rsp+1A8h+var_150]
.text:000000000000BDD7                 mov     [rsp+1A8h+var_1A8], 0
.text:000000000000BDDF                 mov     [rsp+1A8h+ps], rax
.text:000000000000BDE4                 lea     rax, [rsp+1A8h+wc]
.text:000000000000BDE9                 mov     [rsp+1A8h+var_160], rax
.text:000000000000BDEE                 lea     rax, [rsp+1A8h+var_148]
.text:000000000000BDF3                 mov     [rsp+1A8h+s], rax
.text:000000000000BDF8                 jmp     short loc_BE3E
.text:000000000000BDF8 ; ---------------------------------------------------------------------------
.text:000000000000BDFA                 align 20h
.text:000000000000BE00
.text:000000000000BE00 loc_BE00:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+10F↓j
.text:000000000000BE00                 cmp     eax, 3
.text:000000000000BE03                 jz      loc_C0F6
.text:000000000000BE09                 cmp     eax, 6
.text:000000000000BE0C                 jz      loc_BF98
.text:000000000000BE12                 and     edx, 0FFFFFFFDh
.text:000000000000BE15                 cmp     dl, 5
.text:000000000000BE18                 jz      loc_C214
.text:000000000000BE1E                 cmp     eax, 2
.text:000000000000BE21                 jz      loc_C174
.text:000000000000BE27
.text:000000000000BE27 loc_BE27:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+139↓j
.text:000000000000BE27                                         ; re_compile_fastmap_iter_isra_30+147↓j ...
.text:000000000000BE27                 mov     rdi, [rsp+1A8h+var_188]
.text:000000000000BE2C                 add     [rsp+1A8h+var_1A8], 1
.text:000000000000BE31                 mov     rax, [rsp+1A8h+var_1A8]
.text:000000000000BE35                 cmp     rax, [rdi]
.text:000000000000BE38                 jge     loc_C1DD
.text:000000000000BE3E
.text:000000000000BE3E loc_BE3E:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+98↑j
.text:000000000000BE3E                 mov     rax, [rsp+1A8h+var_180]
.text:000000000000BE43                 mov     rdi, [rsp+1A8h+var_1A8]
.text:000000000000BE47                 mov     rax, [rax]
.text:000000000000BE4A                 mov     r12, [rax+rdi*8]
.text:000000000000BE4E                 mov     rax, [rsp+1A8h+var_1A0]
.text:000000000000BE53                 mov     rcx, [rax]
.text:000000000000BE56                 mov     rax, r12
.text:000000000000BE59                 shl     rax, 4
.text:000000000000BE5D                 mov     [rsp+1A8h+var_198], rax
.text:000000000000BE62                 lea     rsi, [rcx+rax]
.text:000000000000BE66                 movzx   eax, byte ptr [rsi+8]
.text:000000000000BE6A                 cmp     eax, 1
.text:000000000000BE6D                 mov     edx, eax
.text:000000000000BE6F                 jnz     short loc_BE00
.text:000000000000BE71                 movzx   r13d, byte ptr [rsi]
.text:000000000000BE75                 test    ebx, ebx
.text:000000000000BE77                 mov     byte ptr [rbp+r13+0], 1
.text:000000000000BE7D                 jz      short loc_BE90
.text:000000000000BE7F                 call    ___ctype_tolower_loc
.text:000000000000BE84                 mov     rax, [rax]
.text:000000000000BE87                 movsxd  rax, dword ptr [rax+r13*4]
.text:000000000000BE8B                 mov     byte ptr [rbp+rax+0], 1
.text:000000000000BE90
.text:000000000000BE90 loc_BE90:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+11D↑j
.text:000000000000BE90                 mov     rax, [rsp+1A8h+var_178]
.text:000000000000BE95                 test    byte ptr [rax+1Ah], 40h
.text:000000000000BE99                 jz      short loc_BE27
.text:000000000000BE9B                 mov     rsi, [rsp+1A8h+var_1A0]
.text:000000000000BEA0                 cmp     dword ptr [rsi+0B4h], 1
.text:000000000000BEA7                 jle     loc_BE27
.text:000000000000BEAD                 mov     rax, [rsi]
.text:000000000000BEB0                 mov     rdi, [rsp+1A8h+var_198]
.text:000000000000BEB5                 movzx   edx, byte ptr [rax+rdi]
.text:000000000000BEB9                 mov     [rsp+1A8h+var_148], dl
.text:000000000000BEBD                 lea     rdx, [r12+1]
.text:000000000000BEC2                 cmp     [rsi+10h], rdx
.text:000000000000BEC6                 jbe     loc_C206
.text:000000000000BECC                 lea     rcx, [rax+rdi+10h]
.text:000000000000BED1                 mov     eax, [rcx+8]
.text:000000000000BED4                 and     eax, 2000FFh
.text:000000000000BED9                 cmp     eax, 200001h
.text:000000000000BEDE                 jnz     loc_C206
.text:000000000000BEE4                 add     rdi, 20h ; ' '
.text:000000000000BEE8                 mov     r13, rdi
.text:000000000000BEEB                 mov     rdi, [rsp+1A8h+s]
.text:000000000000BEF0                 lea     rax, [rdi+1]
.text:000000000000BEF4                 jmp     short loc_BF1B
.text:000000000000BEF4 ; ---------------------------------------------------------------------------
.text:000000000000BEF6                 align 20h
.text:000000000000BF00
.text:000000000000BF00 loc_BF00:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+1D2↓j
.text:000000000000BF00                 mov     rcx, [rsi]
.text:000000000000BF03                 add     rcx, r13
.text:000000000000BF06                 add     r13, 10h
.text:000000000000BF0A                 mov     edx, [rcx+8]
.text:000000000000BF0D                 and     edx, 2000FFh
.text:000000000000BF13                 cmp     edx, 200001h
.text:000000000000BF19                 jnz     short loc_BF34
.text:000000000000BF1B
.text:000000000000BF1B loc_BF1B:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+194↑j
.text:000000000000BF1B                 movzx   edx, byte ptr [rcx]
.text:000000000000BF1E                 add     rax, 1
.text:000000000000BF22                 mov     [rax-1], dl
.text:000000000000BF25                 mov     rdx, rax
.text:000000000000BF28                 sub     rdx, rdi
.text:000000000000BF2B                 add     rdx, r12
.text:000000000000BF2E                 cmp     [rsi+10h], rdx
.text:000000000000BF32                 ja      short loc_BF00
.text:000000000000BF34
.text:000000000000BF34 loc_BF34:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+1B9↑j
.text:000000000000BF34                                         ; re_compile_fastmap_iter_isra_30+4AF↓j
.text:000000000000BF34                 mov     rsi, [rsp+1A8h+s]
.text:000000000000BF39                 mov     rcx, [rsp+1A8h+ps]
.text:000000000000BF3E                 mov     rdi, [rsp+1A8h+var_160]
.text:000000000000BF43                 sub     rax, rsi
.text:000000000000BF46                 mov     qword ptr [rcx], 0
.text:000000000000BF4D                 mov     r12, rax
.text:000000000000BF50                 mov     rdx, rax
.text:000000000000BF53                 call    rpl_mbrtowc
.text:000000000000BF58                 cmp     r12, rax
.text:000000000000BF5B                 jnz     loc_BE27
.text:000000000000BF61                 mov     edi, [rsp+1A8h+wc] ; wc
.text:000000000000BF65                 call    _towlower
.text:000000000000BF6A                 mov     rdx, [rsp+1A8h+ps] ; ps
.text:000000000000BF6F                 mov     rdi, [rsp+1A8h+s] ; s
.text:000000000000BF74                 mov     esi, eax        ; wc
.text:000000000000BF76                 call    _wcrtomb
.text:000000000000BF7B                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000BF7F                 jz      loc_BE27
.text:000000000000BF85                 movzx   eax, [rsp+1A8h+var_148]
.text:000000000000BF8A                 mov     byte ptr [rbp+rax+0], 1
.text:000000000000BF8F                 jmp     loc_BE27
.text:000000000000BF8F ; ---------------------------------------------------------------------------
.text:000000000000BF94                 align 8
.text:000000000000BF98
.text:000000000000BF98 loc_BF98:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+AC↑j
.text:000000000000BF98                 mov     rax, [rsp+1A8h+var_1A0]
.text:000000000000BF9D                 mov     r12, [rsi]
.text:000000000000BFA0                 cmp     dword ptr [rax+0B4h], 1
.text:000000000000BFA7                 jle     short loc_BFCD
.text:000000000000BFA9                 cmp     qword ptr [r12+48h], 0
.text:000000000000BFAF                 jnz     loc_C0AF
.text:000000000000BFB5                 test    byte ptr [r12+20h], 1
.text:000000000000BFBB                 jnz     loc_C0AF
.text:000000000000BFC1                 cmp     qword ptr [r12+40h], 0
.text:000000000000BFC7                 jnz     loc_C0AF
.text:000000000000BFCD
.text:000000000000BFCD loc_BFCD:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+247↑j
.text:000000000000BFCD                 xor     r13d, r13d
.text:000000000000BFD0                 cmp     qword ptr [r12+28h], 0
.text:000000000000BFD6                 jle     loc_BE27
.text:000000000000BFDC                 mov     r15, r12
.text:000000000000BFDF                 mov     r14, [rsp+1A8h+ps]
.text:000000000000BFE4                 mov     r12, rbp
.text:000000000000BFE7                 mov     rbp, r13
.text:000000000000BFEA                 mov     r13d, ebx
.text:000000000000BFED                 jmp     short loc_BFFD
.text:000000000000BFEF ; ---------------------------------------------------------------------------
.text:000000000000BFEF
.text:000000000000BFEF loc_BFEF:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+2F8↓j
.text:000000000000BFEF                                         ; re_compile_fastmap_iter_isra_30+306↓j ...
.text:000000000000BFEF                 add     rbp, 1
.text:000000000000BFF3                 cmp     rbp, [r15+28h]
.text:000000000000BFF7                 jge     loc_C0A4
.text:000000000000BFFD
.text:000000000000BFFD loc_BFFD:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+28D↑j
.text:000000000000BFFD                                         ; re_compile_fastmap_iter_isra_30+33E↓j
.text:000000000000BFFD                 mov     qword ptr [r14], 0
.text:000000000000C004                 mov     rax, [r15]
.text:000000000000C007                 mov     rdx, r14        ; ps
.text:000000000000C00A                 mov     rdi, [rsp+1A8h+s] ; s
.text:000000000000C00F                 lea     rbx, ds:0[rbp*4]
.text:000000000000C017                 mov     esi, [rax+rbp*4] ; wc
.text:000000000000C01A                 call    _wcrtomb
.text:000000000000C01F                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000C023                 jz      short loc_C04F
.text:000000000000C025                 movzx   edx, [rsp+1A8h+var_148]
.text:000000000000C02A                 test    r13d, r13d
.text:000000000000C02D                 mov     byte ptr [r12+rdx], 1
.text:000000000000C032                 mov     [rsp+1A8h+var_198], rdx
.text:000000000000C037                 jz      short loc_C04F
.text:000000000000C039                 call    ___ctype_tolower_loc
.text:000000000000C03E                 mov     rdx, [rsp+1A8h+var_198]
.text:000000000000C043                 mov     rax, [rax]
.text:000000000000C046                 movsxd  rax, dword ptr [rax+rdx*4]
.text:000000000000C04A                 mov     byte ptr [r12+rax], 1
.text:000000000000C04F
.text:000000000000C04F loc_C04F:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+2C3↑j
.text:000000000000C04F                                         ; re_compile_fastmap_iter_isra_30+2D7↑j
.text:000000000000C04F                 mov     rax, [rsp+1A8h+var_178]
.text:000000000000C054                 test    byte ptr [rax+1Ah], 40h
.text:000000000000C058                 jz      short loc_BFEF
.text:000000000000C05A                 mov     rax, [rsp+1A8h+var_1A0]
.text:000000000000C05F                 cmp     dword ptr [rax+0B4h], 1
.text:000000000000C066                 jle     short loc_BFEF
.text:000000000000C068                 mov     rax, [r15]
.text:000000000000C06B                 mov     edi, [rax+rbx]  ; wc
.text:000000000000C06E                 call    _towlower
.text:000000000000C073                 mov     rdi, [rsp+1A8h+s] ; s
.text:000000000000C078                 mov     rdx, r14        ; ps
.text:000000000000C07B                 mov     esi, eax        ; wc
.text:000000000000C07D                 call    _wcrtomb
.text:000000000000C082                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000C086                 jz      loc_BFEF
.text:000000000000C08C                 movzx   eax, [rsp+1A8h+var_148]
.text:000000000000C091                 add     rbp, 1
.text:000000000000C095                 mov     byte ptr [r12+rax], 1
.text:000000000000C09A                 cmp     rbp, [r15+28h]
.text:000000000000C09E                 jl      loc_BFFD
.text:000000000000C0A4
.text:000000000000C0A4 loc_C0A4:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+297↑j
.text:000000000000C0A4                 mov     ebx, r13d
.text:000000000000C0A7                 mov     rbp, r12
.text:000000000000C0AA                 jmp     loc_BE27
.text:000000000000C0AF ; ---------------------------------------------------------------------------
.text:000000000000C0AF
.text:000000000000C0AF loc_C0AF:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+24F↑j
.text:000000000000C0AF                                         ; re_compile_fastmap_iter_isra_30+25B↑j ...
.text:000000000000C0AF                 mov     r12, [rsp+1A8h+ps]
.text:000000000000C0B4                 mov     r13, [rsp+1A8h+var_160]
.text:000000000000C0B9                 mov     byte ptr [rsp+1A8h+wc], 0
.text:000000000000C0BE                 xchg    ax, ax
.text:000000000000C0C0
.text:000000000000C0C0 loc_C0C0:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+38F↓j
.text:000000000000C0C0                 xor     edi, edi
.text:000000000000C0C2                 mov     qword ptr [r12], 0
.text:000000000000C0CA                 mov     rcx, r12
.text:000000000000C0CD                 mov     edx, 1
.text:000000000000C0D2                 mov     rsi, r13
.text:000000000000C0D5                 call    rpl_mbrtowc
.text:000000000000C0DA                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:000000000000C0DE                 jnz     short loc_C0EA
.text:000000000000C0E0                 movzx   eax, byte ptr [rsp+1A8h+wc]
.text:000000000000C0E5                 mov     byte ptr [rbp+rax+0], 1
.text:000000000000C0EA
.text:000000000000C0EA loc_C0EA:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+37E↑j
.text:000000000000C0EA                 add     byte ptr [rsp+1A8h+wc], 1
.text:000000000000C0EF                 jnz     short loc_C0C0
.text:000000000000C0F1                 jmp     loc_BE27
.text:000000000000C0F6 ; ---------------------------------------------------------------------------
.text:000000000000C0F6
.text:000000000000C0F6 loc_C0F6:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+A3↑j
.text:000000000000C0F6                 mov     r13, rbp
.text:000000000000C0F9                 xor     r12d, r12d
.text:000000000000C0FC                 mov     [rsp+1A8h+var_190], 0
.text:000000000000C105
.text:000000000000C105 loc_C105:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+412↓j
.text:000000000000C105                 mov     rax, [rsp+1A8h+var_198]
.text:000000000000C10A                 mov     rsi, [rsp+1A8h+var_190]
.text:000000000000C10F                 xor     r14d, r14d
.text:000000000000C112                 mov     rax, [rcx+rax]
.text:000000000000C116                 mov     r15, [rax+rsi]
.text:000000000000C11A                 nop     word ptr [rax+rax+00h]
.text:000000000000C120
.text:000000000000C120 loc_C120:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+3ED↓j
.text:000000000000C120                 bt      r15, r14
.text:000000000000C124                 jnb     short loc_C145
.text:000000000000C126                 test    ebx, ebx
.text:000000000000C128                 mov     byte ptr [r13+r14+0], 1
.text:000000000000C12E                 jz      short loc_C145
.text:000000000000C130                 call    ___ctype_tolower_loc
.text:000000000000C135                 mov     rax, [rax]
.text:000000000000C138                 lea     rdx, [r12+r14]
.text:000000000000C13C                 movsxd  rax, dword ptr [rax+rdx*4]
.text:000000000000C140                 mov     byte ptr [rbp+rax+0], 1
.text:000000000000C145
.text:000000000000C145 loc_C145:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+3C4↑j
.text:000000000000C145                                         ; re_compile_fastmap_iter_isra_30+3CE↑j
.text:000000000000C145                 add     r14, 1
.text:000000000000C149                 cmp     r14, 40h ; '@'
.text:000000000000C14D                 jnz     short loc_C120
.text:000000000000C14F                 add     r12, 40h ; '@'
.text:000000000000C153                 add     [rsp+1A8h+var_190], 8
.text:000000000000C159                 add     r13, 40h ; '@'
.text:000000000000C15D                 cmp     r12, 100h
.text:000000000000C164                 jz      loc_BE27
.text:000000000000C16A                 mov     rax, [rsp+1A8h+var_1A0]
.text:000000000000C16F                 mov     rcx, [rax]
.text:000000000000C172                 jmp     short loc_C105
.text:000000000000C174 ; ---------------------------------------------------------------------------
.text:000000000000C174
.text:000000000000C174 loc_C174:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+C1↑j
.text:000000000000C174                 movdqa  xmm0, cs:xmmword_160A0
.text:000000000000C17C                 movups  xmmword ptr [rbp+0], xmm0
.text:000000000000C180                 movups  xmmword ptr [rbp+10h], xmm0
.text:000000000000C184                 movups  xmmword ptr [rbp+20h], xmm0
.text:000000000000C188                 movups  xmmword ptr [rbp+30h], xmm0
.text:000000000000C18C                 movups  xmmword ptr [rbp+40h], xmm0
.text:000000000000C190                 movups  xmmword ptr [rbp+50h], xmm0
.text:000000000000C194                 movups  xmmword ptr [rbp+60h], xmm0
.text:000000000000C198                 movups  xmmword ptr [rbp+70h], xmm0
.text:000000000000C19C                 movups  xmmword ptr [rbp+80h], xmm0
.text:000000000000C1A3                 movups  xmmword ptr [rbp+90h], xmm0
.text:000000000000C1AA                 movups  xmmword ptr [rbp+0A0h], xmm0
.text:000000000000C1B1                 movups  xmmword ptr [rbp+0B0h], xmm0
.text:000000000000C1B8                 movups  xmmword ptr [rbp+0C0h], xmm0
.text:000000000000C1BF                 movups  xmmword ptr [rbp+0D0h], xmm0
.text:000000000000C1C6                 movups  xmmword ptr [rbp+0E0h], xmm0
.text:000000000000C1CD                 movups  xmmword ptr [rbp+0F0h], xmm0
.text:000000000000C1D4
.text:000000000000C1D4 loc_C1D4:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+51D↓j
.text:000000000000C1D4                 mov     rax, [rsp+1A8h+var_178]
.text:000000000000C1D9                 or      byte ptr [rax+38h], 1
.text:000000000000C1DD
.text:000000000000C1DD loc_C1DD:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+6C↑j
.text:000000000000C1DD                                         ; re_compile_fastmap_iter_isra_30+D8↑j ...
.text:000000000000C1DD                 mov     rax, [rsp+1A8h+var_40]
.text:000000000000C1E5                 xor     rax, fs:28h
.text:000000000000C1EE                 jnz     loc_C282
.text:000000000000C1F4                 add     rsp, 178h
.text:000000000000C1FB                 pop     rbx
.text:000000000000C1FC                 pop     rbp
.text:000000000000C1FD                 pop     r12
.text:000000000000C1FF                 pop     r13
.text:000000000000C201                 pop     r14
.text:000000000000C203                 pop     r15
.text:000000000000C205                 retn
.text:000000000000C206 ; ---------------------------------------------------------------------------
.text:000000000000C206
.text:000000000000C206 loc_C206:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+166↑j
.text:000000000000C206                                         ; re_compile_fastmap_iter_isra_30+17E↑j
.text:000000000000C206                 mov     rax, [rsp+1A8h+s]
.text:000000000000C20B                 add     rax, 1
.text:000000000000C20F                 jmp     loc_BF34
.text:000000000000C214 ; ---------------------------------------------------------------------------
.text:000000000000C214
.text:000000000000C214 loc_C214:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+B8↑j
.text:000000000000C214                 movdqa  xmm0, cs:xmmword_160A0
.text:000000000000C21C                 cmp     eax, 2
.text:000000000000C21F                 movups  xmmword ptr [rbp+0], xmm0
.text:000000000000C223                 movups  xmmword ptr [rbp+10h], xmm0
.text:000000000000C227                 movups  xmmword ptr [rbp+20h], xmm0
.text:000000000000C22B                 movups  xmmword ptr [rbp+30h], xmm0
.text:000000000000C22F                 movups  xmmword ptr [rbp+40h], xmm0
.text:000000000000C233                 movups  xmmword ptr [rbp+50h], xmm0
.text:000000000000C237                 movups  xmmword ptr [rbp+60h], xmm0
.text:000000000000C23B                 movups  xmmword ptr [rbp+70h], xmm0
.text:000000000000C23F                 movups  xmmword ptr [rbp+80h], xmm0
.text:000000000000C246                 movups  xmmword ptr [rbp+90h], xmm0
.text:000000000000C24D                 movups  xmmword ptr [rbp+0A0h], xmm0
.text:000000000000C254                 movups  xmmword ptr [rbp+0B0h], xmm0
.text:000000000000C25B                 movups  xmmword ptr [rbp+0C0h], xmm0
.text:000000000000C262                 movups  xmmword ptr [rbp+0D0h], xmm0
.text:000000000000C269                 movups  xmmword ptr [rbp+0E0h], xmm0
.text:000000000000C270                 movups  xmmword ptr [rbp+0F0h], xmm0
.text:000000000000C277                 jnz     loc_C1DD
.text:000000000000C27D                 jmp     loc_C1D4
.text:000000000000C282 ; ---------------------------------------------------------------------------
.text:000000000000C282
.text:000000000000C282 loc_C282:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+48E↑j
.text:000000000000C282                 call    ___stack_chk_fail
.text:000000000000C282 ; } // starts at BD60
.text:000000000000C282 re_compile_fastmap_iter_isra_30 endp
.text:000000000000C282
.text:000000000000C282 ; ---------------------------------------------------------------------------
.text:000000000000C287                 align 10h
.text:000000000000C290
.text:000000000000C290 ; =============== S U B R O U T I N E =======================================
.text:000000000000C290
.text:000000000000C290
.text:000000000000C290 check_node_accept_bytes_isra_31 proc near
.text:000000000000C290                                         ; CODE XREF: check_arrival+255↓p
.text:000000000000C290                                         ; set_regs+378↓p ...
.text:000000000000C290 ; __unwind {
.text:000000000000C290                 shl     rdx, 4
.text:000000000000C294                 push    r13
.text:000000000000C296                 push    r12
.text:000000000000C298                 lea     r9, [rdi+rdx]
.text:000000000000C29C                 push    rbp
.text:000000000000C29D                 push    rbx
.text:000000000000C29E                 sub     rsp, 8
.text:000000000000C2A2                 movzx   r11d, byte ptr [r9+8]
.text:000000000000C2A7                 cmp     r11b, 7
.text:000000000000C2AB                 jz      loc_C3C0
.text:000000000000C2B1                 cmp     dword ptr [rcx+90h], 1
.text:000000000000C2B8                 jz      loc_C380
.text:000000000000C2BE                 mov     rbx, rsi
.text:000000000000C2C1                 mov     rdi, rcx
.text:000000000000C2C4                 mov     rsi, r8
.text:000000000000C2C7                 mov     r10, rcx
.text:000000000000C2CA                 call    re_string_char_size_at_part_0
.text:000000000000C2CF                 cmp     r11b, 5
.text:000000000000C2D3                 mov     ebp, eax
.text:000000000000C2D5                 jz      loc_C390
.text:000000000000C2DB                 cmp     r11b, 6
.text:000000000000C2DF                 jnz     loc_C380
.text:000000000000C2E5                 cmp     eax, 1
.text:000000000000C2E8                 jle     loc_C380
.text:000000000000C2EE                 mov     r13, [r9]
.text:000000000000C2F1                 mov     rsi, [r13+40h]
.text:000000000000C2F5                 mov     rdx, [r13+28h]
.text:000000000000C2F9                 test    rsi, rsi
.text:000000000000C2FC                 jnz     short loc_C309
.text:000000000000C2FE                 cmp     qword ptr [r13+48h], 0
.text:000000000000C303                 jz      loc_C3F8
.text:000000000000C309
.text:000000000000C309 loc_C309:                               ; CODE XREF: check_node_accept_bytes_isra_31+6C↑j
.text:000000000000C309                                         ; check_node_accept_bytes_isra_31+16B↓j
.text:000000000000C309                 mov     rax, [r10+10h]
.text:000000000000C30D                 test    rdx, rdx
.text:000000000000C310                 mov     r12d, [rax+r8*4]
.text:000000000000C314                 jle     short loc_C337
.text:000000000000C316                 mov     rcx, [r13+0]
.text:000000000000C31A                 cmp     r12d, [rcx]
.text:000000000000C31D                 jz      short loc_C372
.text:000000000000C31F                 xor     eax, eax
.text:000000000000C321                 jmp     short loc_C32E
.text:000000000000C321 ; ---------------------------------------------------------------------------
.text:000000000000C323                 align 8
.text:000000000000C328
.text:000000000000C328 loc_C328:                               ; CODE XREF: check_node_accept_bytes_isra_31+A5↓j
.text:000000000000C328                 cmp     r12d, [rcx+rax*4]
.text:000000000000C32C                 jz      short loc_C372
.text:000000000000C32E
.text:000000000000C32E loc_C32E:                               ; CODE XREF: check_node_accept_bytes_isra_31+91↑j
.text:000000000000C32E                 add     rax, 1
.text:000000000000C332                 cmp     rax, rdx
.text:000000000000C335                 jnz     short loc_C328
.text:000000000000C337
.text:000000000000C337 loc_C337:                               ; CODE XREF: check_node_accept_bytes_isra_31+84↑j
.text:000000000000C337                 mov     rax, [r13+48h]
.text:000000000000C33B                 test    rax, rax
.text:000000000000C33E                 jle     loc_C41C
.text:000000000000C344                 xor     ebx, ebx
.text:000000000000C346                 jmp     short loc_C35E
.text:000000000000C346 ; ---------------------------------------------------------------------------
.text:000000000000C348                 align 10h
.text:000000000000C350
.text:000000000000C350 loc_C350:                               ; CODE XREF: check_node_accept_bytes_isra_31+E0↓j
.text:000000000000C350                 add     rbx, 1
.text:000000000000C354                 cmp     rbx, [r13+48h]
.text:000000000000C358                 jge     loc_C418
.text:000000000000C35E
.text:000000000000C35E loc_C35E:                               ; CODE XREF: check_node_accept_bytes_isra_31+B6↑j
.text:000000000000C35E                 mov     rax, [r13+18h]
.text:000000000000C362                 mov     edi, r12d       ; wc
.text:000000000000C365                 mov     rsi, [rax+rbx*8] ; desc
.text:000000000000C369                 call    _iswctype
.text:000000000000C36E                 test    eax, eax
.text:000000000000C370                 jz      short loc_C350
.text:000000000000C372
.text:000000000000C372 loc_C372:                               ; CODE XREF: check_node_accept_bytes_isra_31+8D↑j
.text:000000000000C372                                         ; check_node_accept_bytes_isra_31+9C↑j ...
.text:000000000000C372                 test    byte ptr [r13+20h], 1
.text:000000000000C377                 jz      short loc_C382
.text:000000000000C379                 nop     dword ptr [rax+00000000h]
.text:000000000000C380
.text:000000000000C380 loc_C380:                               ; CODE XREF: check_node_accept_bytes_isra_31+28↑j
.text:000000000000C380                                         ; check_node_accept_bytes_isra_31+4F↑j ...
.text:000000000000C380                 xor     ebp, ebp
.text:000000000000C382
.text:000000000000C382 loc_C382:                               ; CODE XREF: check_node_accept_bytes_isra_31+E7↑j
.text:000000000000C382                                         ; check_node_accept_bytes_isra_31+10E↓j ...
.text:000000000000C382                 add     rsp, 8
.text:000000000000C386                 mov     eax, ebp
.text:000000000000C388                 pop     rbx
.text:000000000000C389                 pop     rbp
.text:000000000000C38A                 pop     r12
.text:000000000000C38C                 pop     r13
.text:000000000000C38E                 retn
.text:000000000000C38E ; ---------------------------------------------------------------------------
.text:000000000000C38F                 align 10h
.text:000000000000C390
.text:000000000000C390 loc_C390:                               ; CODE XREF: check_node_accept_bytes_isra_31+45↑j
.text:000000000000C390                 cmp     eax, 1
.text:000000000000C393                 jle     short loc_C380
.text:000000000000C395                 mov     rax, [rbx]
.text:000000000000C398                 test    al, 40h
.text:000000000000C39A                 jz      short loc_C3B0
.text:000000000000C39C
.text:000000000000C39C loc_C39C:                               ; CODE XREF: check_node_accept_bytes_isra_31+129↓j
.text:000000000000C39C                 test    al, 80h
.text:000000000000C39E                 jz      short loc_C382
.text:000000000000C3A0                 mov     rax, [r10+8]
.text:000000000000C3A4                 cmp     byte ptr [rax+r8], 0
.text:000000000000C3A9                 jz      short loc_C380
.text:000000000000C3AB                 jmp     short loc_C382
.text:000000000000C3AB ; ---------------------------------------------------------------------------
.text:000000000000C3AD                 align 10h
.text:000000000000C3B0
.text:000000000000C3B0 loc_C3B0:                               ; CODE XREF: check_node_accept_bytes_isra_31+10A↑j
.text:000000000000C3B0                 mov     rdx, [r10+8]
.text:000000000000C3B4                 cmp     byte ptr [rdx+r8], 0Ah
.text:000000000000C3B9                 jnz     short loc_C39C
.text:000000000000C3BB                 jmp     short loc_C380
.text:000000000000C3BB ; ---------------------------------------------------------------------------
.text:000000000000C3BD                 align 20h
.text:000000000000C3C0
.text:000000000000C3C0 loc_C3C0:                               ; CODE XREF: check_node_accept_bytes_isra_31+1B↑j
.text:000000000000C3C0                 mov     rdx, [rcx+8]
.text:000000000000C3C4                 lea     rsi, [rdx+r8]
.text:000000000000C3C8                 movzx   eax, byte ptr [rsi]
.text:000000000000C3CB                 cmp     al, 0C1h
.text:000000000000C3CD                 jbe     short loc_C380
.text:000000000000C3CF                 mov     rcx, [rcx+58h]
.text:000000000000C3D3                 lea     rdi, [r8+1]
.text:000000000000C3D7                 cmp     rdi, rcx
.text:000000000000C3DA                 jge     short loc_C380
.text:000000000000C3DC                 cmp     al, 0DFh
.text:000000000000C3DE                 movzx   edx, byte ptr [rdx+r8+1]
.text:000000000000C3E4                 ja      short loc_C44E
.text:000000000000C3E6                 add     edx, 0FFFFFF80h
.text:000000000000C3E9                 mov     ebp, 2
.text:000000000000C3EE                 cmp     dl, 3Fh ; '?'
.text:000000000000C3F1                 ja      short loc_C380
.text:000000000000C3F3                 jmp     short loc_C382
.text:000000000000C3F3 ; ---------------------------------------------------------------------------
.text:000000000000C3F5                 align 8
.text:000000000000C3F8
.text:000000000000C3F8 loc_C3F8:                               ; CODE XREF: check_node_accept_bytes_isra_31+73↑j
.text:000000000000C3F8                 test    rdx, rdx
.text:000000000000C3FB                 jnz     loc_C309
.text:000000000000C401
.text:000000000000C401 loc_C401:                               ; CODE XREF: check_node_accept_bytes_isra_31+18F↓j
.text:000000000000C401                                         ; check_node_accept_bytes_isra_31+1A7↓j
.text:000000000000C401                 test    byte ptr [r13+20h], 1
.text:000000000000C406                 jnz     loc_C382
.text:000000000000C40C                 jmp     loc_C380
.text:000000000000C40C ; ---------------------------------------------------------------------------
.text:000000000000C411                 align 8
.text:000000000000C418
.text:000000000000C418 loc_C418:                               ; CODE XREF: check_node_accept_bytes_isra_31+C8↑j
.text:000000000000C418                 mov     rsi, [r13+40h]
.text:000000000000C41C
.text:000000000000C41C loc_C41C:                               ; CODE XREF: check_node_accept_bytes_isra_31+AE↑j
.text:000000000000C41C                 test    rsi, rsi
.text:000000000000C41F                 jle     short loc_C401
.text:000000000000C421                 mov     rdx, [r13+8]
.text:000000000000C425                 xor     eax, eax
.text:000000000000C427                 jmp     short loc_C439
.text:000000000000C427 ; ---------------------------------------------------------------------------
.text:000000000000C429                 align 10h
.text:000000000000C430
.text:000000000000C430 loc_C430:                               ; CODE XREF: check_node_accept_bytes_isra_31+1AD↓j
.text:000000000000C430                                         ; check_node_accept_bytes_isra_31+1B7↓j
.text:000000000000C430                 add     rax, 1
.text:000000000000C434                 cmp     rax, rsi
.text:000000000000C437                 jz      short loc_C401
.text:000000000000C439
.text:000000000000C439 loc_C439:                               ; CODE XREF: check_node_accept_bytes_isra_31+197↑j
.text:000000000000C439                 cmp     r12d, [rdx+rax*4]
.text:000000000000C43D                 jl      short loc_C430
.text:000000000000C43F                 mov     rcx, [r13+10h]
.text:000000000000C443                 cmp     r12d, [rcx+rax*4]
.text:000000000000C447                 jg      short loc_C430
.text:000000000000C449                 jmp     loc_C372
.text:000000000000C44E ; ---------------------------------------------------------------------------
.text:000000000000C44E
.text:000000000000C44E loc_C44E:                               ; CODE XREF: check_node_accept_bytes_isra_31+154↑j
.text:000000000000C44E                 cmp     al, 0EFh
.text:000000000000C450                 ja      short loc_C498
.text:000000000000C452                 cmp     al, 0E0h
.text:000000000000C454                 jnz     short loc_C45F
.text:000000000000C456                 cmp     dl, 9Fh
.text:000000000000C459                 jbe     loc_C380
.text:000000000000C45F
.text:000000000000C45F loc_C45F:                               ; CODE XREF: check_node_accept_bytes_isra_31+1C4↑j
.text:000000000000C45F                 mov     ebp, 3
.text:000000000000C464
.text:000000000000C464 loc_C464:                               ; CODE XREF: check_node_accept_bytes_isra_31+21E↓j
.text:000000000000C464                                         ; check_node_accept_bytes_isra_31+236↓j ...
.text:000000000000C464                 movsxd  rdi, ebp
.text:000000000000C467                 add     r8, rdi
.text:000000000000C46A                 cmp     rcx, r8
.text:000000000000C46D                 jl      loc_C380
.text:000000000000C473                 mov     eax, 1
.text:000000000000C478                 jmp     short loc_C487
.text:000000000000C47A ; ---------------------------------------------------------------------------
.text:000000000000C47A
.text:000000000000C47A loc_C47A:                               ; CODE XREF: check_node_accept_bytes_isra_31+201↓j
.text:000000000000C47A                 add     rax, 1
.text:000000000000C47E                 cmp     rdi, rax
.text:000000000000C481                 jle     loc_C382
.text:000000000000C487
.text:000000000000C487 loc_C487:                               ; CODE XREF: check_node_accept_bytes_isra_31+1E8↑j
.text:000000000000C487                 movzx   ebx, byte ptr [rsi+rax]
.text:000000000000C48B                 lea     edx, [rbx-80h]
.text:000000000000C48E                 cmp     dl, 3Fh ; '?'
.text:000000000000C491                 jbe     short loc_C47A
.text:000000000000C493                 jmp     loc_C380
.text:000000000000C498 ; ---------------------------------------------------------------------------
.text:000000000000C498
.text:000000000000C498 loc_C498:                               ; CODE XREF: check_node_accept_bytes_isra_31+1C0↑j
.text:000000000000C498                 cmp     al, 0F7h
.text:000000000000C49A                 ja      short loc_C4B0
.text:000000000000C49C                 cmp     al, 0F0h
.text:000000000000C49E                 jnz     short loc_C4A9
.text:000000000000C4A0                 cmp     dl, 8Fh
.text:000000000000C4A3                 jbe     loc_C380
.text:000000000000C4A9
.text:000000000000C4A9 loc_C4A9:                               ; CODE XREF: check_node_accept_bytes_isra_31+20E↑j
.text:000000000000C4A9                 mov     ebp, 4
.text:000000000000C4AE                 jmp     short loc_C464
.text:000000000000C4B0 ; ---------------------------------------------------------------------------
.text:000000000000C4B0
.text:000000000000C4B0 loc_C4B0:                               ; CODE XREF: check_node_accept_bytes_isra_31+20A↑j
.text:000000000000C4B0                 cmp     al, 0FBh
.text:000000000000C4B2                 ja      short loc_C4C8
.text:000000000000C4B4                 cmp     al, 0F8h
.text:000000000000C4B6                 jnz     short loc_C4C1
.text:000000000000C4B8                 cmp     dl, 87h
.text:000000000000C4BB                 jbe     loc_C380
.text:000000000000C4C1
.text:000000000000C4C1 loc_C4C1:                               ; CODE XREF: check_node_accept_bytes_isra_31+226↑j
.text:000000000000C4C1                 mov     ebp, 5
.text:000000000000C4C6                 jmp     short loc_C464
.text:000000000000C4C8 ; ---------------------------------------------------------------------------
.text:000000000000C4C8
.text:000000000000C4C8 loc_C4C8:                               ; CODE XREF: check_node_accept_bytes_isra_31+222↑j
.text:000000000000C4C8                 cmp     al, 0FDh
.text:000000000000C4CA                 ja      loc_C380
.text:000000000000C4D0                 cmp     al, 0FCh
.text:000000000000C4D2                 jnz     short loc_C4DD
.text:000000000000C4D4                 cmp     dl, 83h
.text:000000000000C4D7                 jbe     loc_C380
.text:000000000000C4DD
.text:000000000000C4DD loc_C4DD:                               ; CODE XREF: check_node_accept_bytes_isra_31+242↑j
.text:000000000000C4DD                 mov     ebp, 6
.text:000000000000C4E2                 jmp     short loc_C464
.text:000000000000C4E2 ; } // starts at C290
.text:000000000000C4E2 check_node_accept_bytes_isra_31 endp
.text:000000000000C4E2
.text:000000000000C4E2 ; ---------------------------------------------------------------------------
.text:000000000000C4E4                 align 10h
.text:000000000000C4F0
.text:000000000000C4F0 ; =============== S U B R O U T I N E =======================================
.text:000000000000C4F0
.text:000000000000C4F0
.text:000000000000C4F0 check_arrival   proc near               ; CODE XREF: get_subexp_sub_isra_32+30↓p
.text:000000000000C4F0                                         ; transit_state_bkref_isra_34+68B↓p
.text:000000000000C4F0
.text:000000000000C4F0 var_108         = qword ptr -108h
.text:000000000000C4F0 var_100         = qword ptr -100h
.text:000000000000C4F0 var_F8          = qword ptr -0F8h
.text:000000000000C4F0 var_F0          = qword ptr -0F0h
.text:000000000000C4F0 var_E8          = qword ptr -0E8h
.text:000000000000C4F0 var_E0          = qword ptr -0E0h
.text:000000000000C4F0 var_D8          = qword ptr -0D8h
.text:000000000000C4F0 var_D0          = qword ptr -0D0h
.text:000000000000C4F0 var_C8          = qword ptr -0C8h
.text:000000000000C4F0 var_C0          = qword ptr -0C0h
.text:000000000000C4F0 var_B8          = qword ptr -0B8h
.text:000000000000C4F0 var_B0          = qword ptr -0B0h
.text:000000000000C4F0 var_A8          = qword ptr -0A8h
.text:000000000000C4F0 var_A0          = qword ptr -0A0h
.text:000000000000C4F0 var_98          = qword ptr -98h
.text:000000000000C4F0 var_90          = qword ptr -90h
.text:000000000000C4F0 var_80          = dword ptr -80h
.text:000000000000C4F0 var_7C          = dword ptr -7Ch
.text:000000000000C4F0 var_78          = xmmword ptr -78h
.text:000000000000C4F0 var_68          = qword ptr -68h
.text:000000000000C4F0 var_58          = byte ptr -58h
.text:000000000000C4F0 var_50          = qword ptr -50h
.text:000000000000C4F0 ptr             = qword ptr -48h
.text:000000000000C4F0 var_40          = qword ptr -40h
.text:000000000000C4F0 arg_0           = dword ptr  8
.text:000000000000C4F0
.text:000000000000C4F0 ; __unwind {
.text:000000000000C4F0                 push    r15
.text:000000000000C4F2                 push    r14
.text:000000000000C4F4                 mov     r15, rdi
.text:000000000000C4F7                 push    r13
.text:000000000000C4F9                 push    r12
.text:000000000000C4FB                 push    rbp
.text:000000000000C4FC                 push    rbx
.text:000000000000C4FD                 mov     rbp, rcx
.text:000000000000C500                 mov     rbx, rdx
.text:000000000000C503                 sub     rsp, 0D8h
.text:000000000000C50A                 mov     rcx, [rdi+98h]
.text:000000000000C511                 mov     r13, [rsi+8]
.text:000000000000C515                 mov     rax, fs:28h
.text:000000000000C51E                 mov     [rsp+108h+var_40], rax
.text:000000000000C526                 xor     eax, eax
.text:000000000000C528                 mov     rax, rdx
.text:000000000000C52B                 mov     [rsp+108h+var_A8], rsi
.text:000000000000C530                 mov     [rsp+108h+var_90], r8
.text:000000000000C535                 shl     rax, 4
.text:000000000000C539                 add     rax, [rcx]
.text:000000000000C53C                 mov     [rsp+108h+var_C8], r9
.text:000000000000C541                 mov     [rsp+108h+var_D8], rcx
.text:000000000000C546                 mov     [rsp+108h+var_80], 0
.text:000000000000C551                 mov     rax, [rax]
.text:000000000000C554                 mov     [rsp+108h+var_C0], rax
.text:000000000000C559                 movsxd  rax, dword ptr [rdi+0E0h]
.text:000000000000C560                 add     rax, r9
.text:000000000000C563                 cmp     rax, r13
.text:000000000000C566                 jge     loc_CB86
.text:000000000000C56C
.text:000000000000C56C loc_C56C:                               ; CODE XREF: check_arrival+6FB↓j
.text:000000000000C56C                 mov     rax, [rsp+108h+var_A8]
.text:000000000000C571                 mov     rdx, [r15+0B8h]
.text:000000000000C578                 mov     rcx, [r15+48h]
.text:000000000000C57C                 mov     r12, [rax]
.text:000000000000C57F                 mov     r14, [rax+10h]
.text:000000000000C583                 mov     [rsp+108h+var_A0], rdx
.text:000000000000C588                 mov     [rsp+108h+var_98], rcx
.text:000000000000C58D                 mov     edx, [r15+0A0h]
.text:000000000000C594                 test    r12, r12
.text:000000000000C597                 mov     [r15+0B8h], r14
.text:000000000000C59E                 jz      loc_C980
.text:000000000000C5A4                 lea     rsi, [r12-1]
.text:000000000000C5A9                 mov     [r15+48h], r12
.text:000000000000C5AD                 mov     rdi, r15
.text:000000000000C5B0                 call    re_string_context_at
.text:000000000000C5B5                 cmp     r12, rbp
.text:000000000000C5B8                 mov     r13d, eax
.text:000000000000C5BB                 jz      loc_C993
.text:000000000000C5C1                 mov     rbp, [r14+r12*8]
.text:000000000000C5C5                 test    rbp, rbp
.text:000000000000C5C8                 jz      short loc_C5D4
.text:000000000000C5CA                 test    byte ptr [rbp+68h], 40h
.text:000000000000C5CE                 jnz     loc_CAF0
.text:000000000000C5D4
.text:000000000000C5D4 loc_C5D4:                               ; CODE XREF: check_arrival+D8↑j
.text:000000000000C5D4                 pxor    xmm0, xmm0
.text:000000000000C5D8                 mov     [rsp+108h+var_68], 0
.text:000000000000C5E4                 movaps  [rsp+108h+var_78], xmm0
.text:000000000000C5EC
.text:000000000000C5EC loc_C5EC:                               ; CODE XREF: check_arrival+627↓j
.text:000000000000C5EC                                         ; check_arrival+691↓j
.text:000000000000C5EC                 cmp     r12, [rsp+108h+var_C8]
.text:000000000000C5F1                 jge     loc_C918
.text:000000000000C5F7                 mov     ecx, [r15+0E0h]
.text:000000000000C5FE                 test    ecx, ecx
.text:000000000000C600                 js      loc_C918
.text:000000000000C606                 lea     rbx, [rsp+108h+var_78]
.text:000000000000C60E                 lea     rax, ds:8[r12*8]
.text:000000000000C616                 mov     [rsp+108h+var_108], r12
.text:000000000000C61A                 mov     [rsp+108h+var_E8], 0
.text:000000000000C623                 mov     [rsp+108h+var_100], rbx
.text:000000000000C628                 lea     rbx, [rsp+108h+var_58]
.text:000000000000C630                 mov     [rsp+108h+var_F8], rax
.text:000000000000C635                 mov     rax, [r15+0B8h]
.text:000000000000C63C                 mov     [rsp+108h+var_F0], rbx
.text:000000000000C641                 lea     rbx, [rsp+108h+var_7C]
.text:000000000000C649                 mov     [rsp+108h+var_B0], rbx
.text:000000000000C64E
.text:000000000000C64E loc_C64E:                               ; CODE XREF: check_arrival+422↓j
.text:000000000000C64E                 mov     rcx, [rsp+108h+var_F8]
.text:000000000000C653                 mov     qword ptr [rsp+108h+var_78+8], 0
.text:000000000000C65F                 mov     rsi, [rax+rcx]
.text:000000000000C663                 test    rsi, rsi
.text:000000000000C666                 jz      loc_CA28
.text:000000000000C66C                 mov     rdi, [rsp+108h+var_100]
.text:000000000000C671                 add     rsi, 8
.text:000000000000C675                 call    re_node_set_merge
.text:000000000000C67A                 test    eax, eax
.text:000000000000C67C                 mov     [rsp+108h+var_80], eax
.text:000000000000C683                 jnz     loc_CA60
.text:000000000000C689                 test    rbp, rbp
.text:000000000000C68C                 jz      loc_C838
.text:000000000000C692
.text:000000000000C692 loc_C692:                               ; CODE XREF: check_arrival+53B↓j
.text:000000000000C692                 cmp     qword ptr [rbp+28h], 0
.text:000000000000C697                 mov     rax, [rsp+108h+var_F0]
.text:000000000000C69C                 pxor    xmm0, xmm0
.text:000000000000C6A0                 mov     r12, [r15+98h]
.text:000000000000C6A7                 mov     [rsp+108h+var_7C], 0
.text:000000000000C6B2                 mov     qword ptr [rax+10h], 0
.text:000000000000C6BA                 movaps  xmmword ptr [rax], xmm0
.text:000000000000C6BD                 jle     loc_CBF0
.text:000000000000C6C3                 lea     rax, [r12+0D8h]
.text:000000000000C6CB                 xor     ebx, ebx
.text:000000000000C6CD                 mov     [rsp+108h+var_E0], rax
.text:000000000000C6D2                 jmp     short loc_C719
.text:000000000000C6D2 ; ---------------------------------------------------------------------------
.text:000000000000C6D4                 align 8
.text:000000000000C6D8
.text:000000000000C6D8 loc_C6D8:                               ; CODE XREF: check_arrival+244↓j
.text:000000000000C6D8                                         ; check_arrival+52F↓j
.text:000000000000C6D8                 mov     rdx, [rsp+108h+var_108]
.text:000000000000C6DC                 mov     rdi, r15
.text:000000000000C6DF                 call    check_node_accept
.text:000000000000C6E4                 test    al, al
.text:000000000000C6E6                 jz      short loc_C70B
.text:000000000000C6E8
.text:000000000000C6E8 loc_C6E8:                               ; CODE XREF: check_arrival+522↓j
.text:000000000000C6E8                 lea     r13, ds:0[r14*8]
.text:000000000000C6F0
.text:000000000000C6F0 loc_C6F0:                               ; CODE XREF: check_arrival+30B↓j
.text:000000000000C6F0                                         ; check_arrival+31A↓j
.text:000000000000C6F0                 mov     rax, [r12+18h]
.text:000000000000C6F5                 mov     rdi, [rsp+108h+var_100]
.text:000000000000C6FA                 mov     rsi, [rax+r13]
.text:000000000000C6FE                 call    re_node_set_insert
.text:000000000000C703                 test    al, al
.text:000000000000C705                 jz      loc_CA48
.text:000000000000C70B
.text:000000000000C70B loc_C70B:                               ; CODE XREF: check_arrival+1F6↑j
.text:000000000000C70B                 add     rbx, 1
.text:000000000000C70F                 cmp     rbx, [rbp+28h]
.text:000000000000C713                 jge     loc_CAA0
.text:000000000000C719
.text:000000000000C719 loc_C719:                               ; CODE XREF: check_arrival+1E2↑j
.text:000000000000C719                 mov     rax, [rbp+30h]
.text:000000000000C71D                 mov     rdi, [r12]
.text:000000000000C721                 mov     r14, [rax+rbx*8]
.text:000000000000C725                 mov     r13, r14
.text:000000000000C728                 shl     r13, 4
.text:000000000000C72C                 lea     rsi, [rdi+r13]
.text:000000000000C730                 test    byte ptr [rsi+0Ah], 10h
.text:000000000000C734                 jz      short loc_C6D8
.text:000000000000C736                 mov     r8, [rsp+108h+var_108]
.text:000000000000C73A                 mov     rsi, [rsp+108h+var_E0]
.text:000000000000C73F                 mov     rcx, r15
.text:000000000000C742                 mov     rdx, r14
.text:000000000000C745                 call    check_node_accept_bytes_isra_31
.text:000000000000C74A                 cmp     eax, 1
.text:000000000000C74D                 jle     loc_CA10
.text:000000000000C753                 cdqe
.text:000000000000C755                 add     rax, [rsp+108h+var_108]
.text:000000000000C759                 mov     rdx, [r12+18h]
.text:000000000000C75E                 lea     r13, ds:0[r14*8]
.text:000000000000C766                 mov     rdx, [rdx+r14*8]
.text:000000000000C76A                 mov     rcx, rax
.text:000000000000C76D                 mov     [rsp+108h+var_D0], rax
.text:000000000000C772                 lea     r14, ds:0[rax*8]
.text:000000000000C77A                 mov     rax, [r15+0B8h]
.text:000000000000C781                 mov     rsi, [rax+rcx*8]
.text:000000000000C785                 mov     [rsp+108h+var_50], 0
.text:000000000000C791                 test    rsi, rsi
.text:000000000000C794                 jz      short loc_C7B9
.text:000000000000C796                 mov     rdi, [rsp+108h+var_F0]
.text:000000000000C79B                 add     rsi, 8
.text:000000000000C79F                 mov     [rsp+108h+var_B8], rdx
.text:000000000000C7A4                 call    re_node_set_merge
.text:000000000000C7A9                 test    eax, eax
.text:000000000000C7AB                 mov     [rsp+108h+var_7C], eax
.text:000000000000C7B2                 mov     rdx, [rsp+108h+var_B8]
.text:000000000000C7B7                 jnz     short loc_C810
.text:000000000000C7B9
.text:000000000000C7B9 loc_C7B9:                               ; CODE XREF: check_arrival+2A4↑j
.text:000000000000C7B9                 mov     rdi, [rsp+108h+var_F0]
.text:000000000000C7BE                 mov     rsi, rdx
.text:000000000000C7C1                 call    re_node_set_insert
.text:000000000000C7C6                 test    al, al
.text:000000000000C7C8                 jz      loc_CA48
.text:000000000000C7CE                 add     r14, [r15+0B8h]
.text:000000000000C7D5                 mov     rdx, [rsp+108h+var_F0]
.text:000000000000C7DA                 mov     rsi, r12
.text:000000000000C7DD                 mov     rdi, [rsp+108h+var_B0]
.text:000000000000C7E2                 call    re_acquire_state
.text:000000000000C7E7                 mov     rdx, [rsp+108h+var_D0]
.text:000000000000C7EC                 mov     [r14], rax
.text:000000000000C7EF                 mov     rax, [r15+0B8h]
.text:000000000000C7F6                 cmp     qword ptr [rax+rdx*8], 0
.text:000000000000C7FB                 jnz     loc_C6F0
.text:000000000000C801                 mov     edx, [rsp+108h+var_7C]
.text:000000000000C808                 test    edx, edx
.text:000000000000C80A                 jz      loc_C6F0
.text:000000000000C810
.text:000000000000C810 loc_C810:                               ; CODE XREF: check_arrival+2C7↑j
.text:000000000000C810                 mov     rdi, [rsp+108h+ptr] ; ptr
.text:000000000000C818                 call    _free
.text:000000000000C81D                 mov     eax, [rsp+108h+var_7C]
.text:000000000000C824                 test    eax, eax
.text:000000000000C826                 mov     [rsp+108h+var_80], eax
.text:000000000000C82D                 jnz     loc_CA60
.text:000000000000C833                 nop     dword ptr [rax+rax+00h]
.text:000000000000C838
.text:000000000000C838 loc_C838:                               ; CODE XREF: check_arrival+19C↑j
.text:000000000000C838                                         ; check_arrival+5C8↓j
.text:000000000000C838                 mov     rax, [rsp+108h+var_108]
.text:000000000000C83C                 cmp     qword ptr [rsp+108h+var_78+8], 0
.text:000000000000C845                 lea     rbx, [rax+1]
.text:000000000000C849                 mov     r12, rbx
.text:000000000000C84C                 jz      short loc_C8A4
.text:000000000000C84E                 mov     ecx, [rsp+108h+arg_0]
.text:000000000000C855                 mov     rdx, [rsp+108h+var_C0]
.text:000000000000C85A                 mov     rsi, [rsp+108h+var_100]
.text:000000000000C85F                 mov     rdi, [rsp+108h+var_D8]
.text:000000000000C864                 call    check_arrival_expand_ecl
.text:000000000000C869                 test    eax, eax
.text:000000000000C86B                 mov     [rsp+108h+var_80], eax
.text:000000000000C872                 jnz     loc_CA60
.text:000000000000C878                 mov     r8d, [rsp+108h+arg_0]
.text:000000000000C880                 mov     rcx, [rsp+108h+var_C0]
.text:000000000000C885                 mov     rdx, rbx
.text:000000000000C888                 mov     rsi, [rsp+108h+var_100]
.text:000000000000C88D                 mov     rdi, r15
.text:000000000000C890                 call    expand_bkref_cache
.text:000000000000C895                 test    eax, eax
.text:000000000000C897                 mov     [rsp+108h+var_80], eax
.text:000000000000C89E                 jnz     loc_CA60
.text:000000000000C8A4
.text:000000000000C8A4 loc_C8A4:                               ; CODE XREF: check_arrival+35C↑j
.text:000000000000C8A4                                         ; check_arrival+54C↓j
.text:000000000000C8A4                 mov     edx, [r15+0A0h]
.text:000000000000C8AB                 mov     rsi, [rsp+108h+var_108]
.text:000000000000C8AF                 mov     rdi, r15
.text:000000000000C8B2                 call    re_string_context_at
.text:000000000000C8B7                 mov     rdx, [rsp+108h+var_100]
.text:000000000000C8BC                 mov     rsi, [rsp+108h+var_D8]
.text:000000000000C8C1                 lea     rdi, [rsp+108h+var_80]
.text:000000000000C8C9                 mov     ecx, eax
.text:000000000000C8CB                 call    re_acquire_state_context
.text:000000000000C8D0                 test    rax, rax
.text:000000000000C8D3                 mov     rbp, rax
.text:000000000000C8D6                 jz      loc_CAC0
.text:000000000000C8DC                 mov     rax, [r15+0B8h]
.text:000000000000C8E3                 mov     rdx, [rsp+108h+var_F8]
.text:000000000000C8E8                 mov     [rsp+108h+var_E8], 0
.text:000000000000C8F1                 mov     [rax+rdx], rbp
.text:000000000000C8F5
.text:000000000000C8F5 loc_C8F5:                               ; CODE XREF: check_arrival+5F5↓j
.text:000000000000C8F5                 cmp     [rsp+108h+var_C8], rbx
.text:000000000000C8FA                 jle     short loc_C918
.text:000000000000C8FC                 movsxd  rdx, dword ptr [r15+0E0h]
.text:000000000000C903                 add     [rsp+108h+var_F8], 8
.text:000000000000C909                 cmp     rdx, [rsp+108h+var_E8]
.text:000000000000C90E                 mov     [rsp+108h+var_108], rbx
.text:000000000000C912                 jge     loc_C64E
.text:000000000000C918
.text:000000000000C918 loc_C918:                               ; CODE XREF: check_arrival+101↑j
.text:000000000000C918                                         ; check_arrival+110↑j ...
.text:000000000000C918                 mov     rdi, [rsp+108h+var_68] ; ptr
.text:000000000000C920                 call    _free
.text:000000000000C925                 mov     rax, [r15+0B8h]
.text:000000000000C92C                 mov     rbx, [rsp+108h+var_C8]
.text:000000000000C931                 mov     rax, [rax+rbx*8]
.text:000000000000C935                 test    rax, rax
.text:000000000000C938                 jz      loc_CC15
.text:000000000000C93E                 mov     rbx, [rsp+108h+var_A8]
.text:000000000000C943                 mov     rdx, [rsp+108h+var_90]
.text:000000000000C948                 lea     rsi, [rax+18h]
.text:000000000000C94C                 mov     [rbx], r12
.text:000000000000C94F                 mov     rbx, [rsp+108h+var_A0]
.text:000000000000C954                 mov     [r15+0B8h], rbx
.text:000000000000C95B                 mov     rbx, [rsp+108h+var_98]
.text:000000000000C960                 mov     [r15+48h], rbx
.text:000000000000C964                 mov     rdi, [rax+10h]
.text:000000000000C968                 call    re_node_set_contains_isra_3
.text:000000000000C96D                 test    rax, rax
.text:000000000000C970                 setz    al
.text:000000000000C973                 movzx   eax, al
.text:000000000000C976                 jmp     loc_CA74
.text:000000000000C976 ; ---------------------------------------------------------------------------
.text:000000000000C97B                 align 20h
.text:000000000000C980
.text:000000000000C980 loc_C980:                               ; CODE XREF: check_arrival+AE↑j
.text:000000000000C980                 lea     rsi, [rbp-1]
.text:000000000000C984                 mov     [r15+48h], rbp
.text:000000000000C988                 mov     rdi, r15
.text:000000000000C98B                 call    re_string_context_at
.text:000000000000C990                 mov     r13d, eax
.text:000000000000C993
.text:000000000000C993 loc_C993:                               ; CODE XREF: check_arrival+CB↑j
.text:000000000000C993                 mov     edi, 8          ; size
.text:000000000000C998                 mov     qword ptr [rsp+108h+var_78], 1
.text:000000000000C9A4                 mov     qword ptr [rsp+108h+var_78+8], 1
.text:000000000000C9B0                 call    _malloc
.text:000000000000C9B5                 test    rax, rax
.text:000000000000C9B8                 mov     [rsp+108h+var_68], rax
.text:000000000000C9C0                 jz      loc_CC0B
.text:000000000000C9C6                 mov     [rax], rbx
.text:000000000000C9C9                 mov     ecx, [rsp+108h+arg_0]
.text:000000000000C9D0                 lea     rbx, [rsp+108h+var_78]
.text:000000000000C9D8                 mov     rdx, [rsp+108h+var_C0]
.text:000000000000C9DD                 mov     rdi, [rsp+108h+var_D8]
.text:000000000000C9E2                 mov     r12, rbp
.text:000000000000C9E5                 mov     rsi, rbx
.text:000000000000C9E8                 mov     [rsp+108h+var_80], 0
.text:000000000000C9F3                 call    check_arrival_expand_ecl
.text:000000000000C9F8                 test    eax, eax
.text:000000000000C9FA                 mov     [rsp+108h+var_80], eax
.text:000000000000CA01                 jz      loc_CB1D
.text:000000000000CA07                 jmp     short loc_CA60
.text:000000000000CA07 ; ---------------------------------------------------------------------------
.text:000000000000CA09                 align 10h
.text:000000000000CA10
.text:000000000000CA10 loc_CA10:                               ; CODE XREF: check_arrival+25D↑j
.text:000000000000CA10                 test    eax, eax
.text:000000000000CA12                 jnz     loc_C6E8
.text:000000000000CA18                 mov     rsi, [r12]
.text:000000000000CA1C                 add     rsi, r13
.text:000000000000CA1F                 jmp     loc_C6D8
.text:000000000000CA1F ; ---------------------------------------------------------------------------
.text:000000000000CA24                 align 8
.text:000000000000CA28
.text:000000000000CA28 loc_CA28:                               ; CODE XREF: check_arrival+176↑j
.text:000000000000CA28                 test    rbp, rbp
.text:000000000000CA2B                 jnz     loc_C692
.text:000000000000CA31                 mov     rax, [rsp+108h+var_108]
.text:000000000000CA35                 lea     rbx, [rax+1]
.text:000000000000CA39                 mov     r12, rbx
.text:000000000000CA3C                 jmp     loc_C8A4
.text:000000000000CA3C ; ---------------------------------------------------------------------------
.text:000000000000CA41                 align 8
.text:000000000000CA48
.text:000000000000CA48 loc_CA48:                               ; CODE XREF: check_arrival+215↑j
.text:000000000000CA48                                         ; check_arrival+2D8↑j
.text:000000000000CA48                 mov     rdi, [rsp+108h+ptr] ; ptr
.text:000000000000CA50                 call    _free
.text:000000000000CA55                 mov     [rsp+108h+var_80], 0Ch
.text:000000000000CA60
.text:000000000000CA60 loc_CA60:                               ; CODE XREF: check_arrival+193↑j
.text:000000000000CA60                                         ; check_arrival+33D↑j ...
.text:000000000000CA60                 mov     rdi, [rsp+108h+var_68] ; ptr
.text:000000000000CA68                 call    _free
.text:000000000000CA6D                 mov     eax, [rsp+108h+var_80]
.text:000000000000CA74
.text:000000000000CA74 loc_CA74:                               ; CODE XREF: check_arrival+486↑j
.text:000000000000CA74                                         ; check_arrival+61D↓j ...
.text:000000000000CA74                 mov     rbx, [rsp+108h+var_40]
.text:000000000000CA7C                 xor     rbx, fs:28h
.text:000000000000CA85                 jnz     loc_CC3C
.text:000000000000CA8B                 add     rsp, 0D8h
.text:000000000000CA92                 pop     rbx
.text:000000000000CA93                 pop     rbp
.text:000000000000CA94                 pop     r12
.text:000000000000CA96                 pop     r13
.text:000000000000CA98                 pop     r14
.text:000000000000CA9A                 pop     r15
.text:000000000000CA9C                 retn
.text:000000000000CA9C ; ---------------------------------------------------------------------------
.text:000000000000CA9D                 align 20h
.text:000000000000CAA0
.text:000000000000CAA0 loc_CAA0:                               ; CODE XREF: check_arrival+223↑j
.text:000000000000CAA0                 mov     rdi, [rsp+108h+ptr] ; ptr
.text:000000000000CAA8
.text:000000000000CAA8 loc_CAA8:                               ; CODE XREF: check_arrival+702↓j
.text:000000000000CAA8                 call    _free
.text:000000000000CAAD                 mov     [rsp+108h+var_80], 0
.text:000000000000CAB8                 jmp     loc_C838
.text:000000000000CAB8 ; ---------------------------------------------------------------------------
.text:000000000000CABD                 align 20h
.text:000000000000CAC0
.text:000000000000CAC0 loc_CAC0:                               ; CODE XREF: check_arrival+3E6↑j
.text:000000000000CAC0                 mov     eax, [rsp+108h+var_80]
.text:000000000000CAC7                 test    eax, eax
.text:000000000000CAC9                 jnz     short loc_CA60
.text:000000000000CACB                 mov     rax, [r15+0B8h]
.text:000000000000CAD2                 mov     rdx, [rsp+108h+var_F8]
.text:000000000000CAD7                 add     [rsp+108h+var_E8], 1
.text:000000000000CADD                 mov     qword ptr [rax+rdx], 0
.text:000000000000CAE5                 jmp     loc_C8F5
.text:000000000000CAE5 ; ---------------------------------------------------------------------------
.text:000000000000CAEA                 align 10h
.text:000000000000CAF0
.text:000000000000CAF0 loc_CAF0:                               ; CODE XREF: check_arrival+DE↑j
.text:000000000000CAF0                 lea     rbx, [rsp+108h+var_78]
.text:000000000000CAF8                 lea     rsi, [rbp+8]
.text:000000000000CAFC                 mov     rdi, rbx
.text:000000000000CAFF                 call    re_node_set_init_copy
.text:000000000000CB04                 test    eax, eax
.text:000000000000CB06                 mov     [rsp+108h+var_80], eax
.text:000000000000CB0D                 jnz     loc_CA74
.text:000000000000CB13                 test    byte ptr [rbp+68h], 40h
.text:000000000000CB17                 jz      loc_C5EC
.text:000000000000CB1D
.text:000000000000CB1D loc_CB1D:                               ; CODE XREF: check_arrival+511↑j
.text:000000000000CB1D                 cmp     qword ptr [rsp+108h+var_78+8], 0
.text:000000000000CB26                 jz      short loc_CB52
.text:000000000000CB28                 mov     r8d, [rsp+108h+arg_0]
.text:000000000000CB30                 mov     rcx, [rsp+108h+var_C0]
.text:000000000000CB35                 mov     rdx, r12
.text:000000000000CB38                 mov     rsi, rbx
.text:000000000000CB3B                 mov     rdi, r15
.text:000000000000CB3E                 call    expand_bkref_cache
.text:000000000000CB43                 test    eax, eax
.text:000000000000CB45                 mov     [rsp+108h+var_80], eax
.text:000000000000CB4C                 jnz     loc_CA60
.text:000000000000CB52
.text:000000000000CB52 loc_CB52:                               ; CODE XREF: check_arrival+636↑j
.text:000000000000CB52                 mov     rsi, [rsp+108h+var_D8]
.text:000000000000CB57                 lea     rdi, [rsp+108h+var_80]
.text:000000000000CB5F                 mov     ecx, r13d
.text:000000000000CB62                 mov     rdx, rbx
.text:000000000000CB65                 call    re_acquire_state_context
.text:000000000000CB6A                 test    rax, rax
.text:000000000000CB6D                 mov     rbp, rax
.text:000000000000CB70                 jz      loc_CBF7
.text:000000000000CB76
.text:000000000000CB76 loc_CB76:                               ; CODE XREF: check_arrival+710↓j
.text:000000000000CB76                 mov     rax, [r15+0B8h]
.text:000000000000CB7D                 mov     [rax+r12*8], rbp
.text:000000000000CB81                 jmp     loc_C5EC
.text:000000000000CB86 ; ---------------------------------------------------------------------------
.text:000000000000CB86
.text:000000000000CB86 loc_CB86:                               ; CODE XREF: check_arrival+76↑j
.text:000000000000CB86                 lea     r12, [rax+1]
.text:000000000000CB8A                 mov     rax, 7FFFFFFFFFFFFFFFh
.text:000000000000CB94                 sub     rax, r13
.text:000000000000CB97                 cmp     rax, r12
.text:000000000000CB9A                 jl      short loc_CC0B
.text:000000000000CB9C                 lea     r14, [r13+r12+0]
.text:000000000000CBA1                 mov     rax, 1FFFFFFFFFFFFFFFh
.text:000000000000CBAB                 cmp     r14, rax
.text:000000000000CBAE                 ja      short loc_CC0B
.text:000000000000CBB0                 mov     rax, [rsp+108h+var_A8]
.text:000000000000CBB5                 lea     rsi, ds:0[r14*8] ; size
.text:000000000000CBBD                 mov     rdi, [rax+10h]  ; ptr
.text:000000000000CBC1                 call    _realloc
.text:000000000000CBC6                 test    rax, rax
.text:000000000000CBC9                 jz      short loc_CC0B
.text:000000000000CBCB                 mov     rcx, [rsp+108h+var_A8]
.text:000000000000CBD0                 lea     rdx, ds:0[r12*8] ; n
.text:000000000000CBD8                 lea     rdi, [rax+r13*8] ; s
.text:000000000000CBDC                 xor     esi, esi        ; c
.text:000000000000CBDE                 mov     [rcx+10h], rax
.text:000000000000CBE2                 mov     [rcx+8], r14
.text:000000000000CBE6                 call    _memset
.text:000000000000CBEB                 jmp     loc_C56C
.text:000000000000CBF0 ; ---------------------------------------------------------------------------
.text:000000000000CBF0
.text:000000000000CBF0 loc_CBF0:                               ; CODE XREF: check_arrival+1CD↑j
.text:000000000000CBF0                 xor     edi, edi
.text:000000000000CBF2                 jmp     loc_CAA8
.text:000000000000CBF7 ; ---------------------------------------------------------------------------
.text:000000000000CBF7
.text:000000000000CBF7 loc_CBF7:                               ; CODE XREF: check_arrival+680↑j
.text:000000000000CBF7                 mov     esi, [rsp+108h+var_80]
.text:000000000000CBFE                 test    esi, esi
.text:000000000000CC00                 jz      loc_CB76
.text:000000000000CC06                 jmp     loc_CA60
.text:000000000000CC0B ; ---------------------------------------------------------------------------
.text:000000000000CC0B
.text:000000000000CC0B loc_CC0B:                               ; CODE XREF: check_arrival+4D0↑j
.text:000000000000CC0B                                         ; check_arrival+6AA↑j ...
.text:000000000000CC0B                 mov     eax, 0Ch
.text:000000000000CC10                 jmp     loc_CA74
.text:000000000000CC15 ; ---------------------------------------------------------------------------
.text:000000000000CC15
.text:000000000000CC15 loc_CC15:                               ; CODE XREF: check_arrival+448↑j
.text:000000000000CC15                 mov     rax, [rsp+108h+var_A8]
.text:000000000000CC1A                 mov     [rax], r12
.text:000000000000CC1D                 mov     rax, [rsp+108h+var_A0]
.text:000000000000CC22                 mov     [r15+0B8h], rax
.text:000000000000CC29                 mov     rax, [rsp+108h+var_98]
.text:000000000000CC2E                 mov     [r15+48h], rax
.text:000000000000CC32                 mov     eax, 1
.text:000000000000CC37                 jmp     loc_CA74
.text:000000000000CC3C ; ---------------------------------------------------------------------------
.text:000000000000CC3C
.text:000000000000CC3C loc_CC3C:                               ; CODE XREF: check_arrival+595↑j
.text:000000000000CC3C                 call    ___stack_chk_fail
.text:000000000000CC3C ; } // starts at C4F0
.text:000000000000CC3C check_arrival   endp
.text:000000000000CC3C
.text:000000000000CC3C ; ---------------------------------------------------------------------------
.text:000000000000CC41                 align 10h
.text:000000000000CC50
.text:000000000000CC50 ; =============== S U B R O U T I N E =======================================
.text:000000000000CC50
.text:000000000000CC50 ; Attributes: bp-based frame
.text:000000000000CC50
.text:000000000000CC50 set_regs        proc near               ; CODE XREF: re_search_internal+1351↓p
.text:000000000000CC50
.text:000000000000CC50 var_D1          = byte ptr -0D1h
.text:000000000000CC50 var_C9          = byte ptr -0C9h
.text:000000000000CC50 var_C8          = qword ptr -0C8h
.text:000000000000CC50 dest            = qword ptr -0C0h
.text:000000000000CC50 n               = qword ptr -0B8h
.text:000000000000CC50 var_B0          = qword ptr -0B0h
.text:000000000000CC50 var_A8          = qword ptr -0A8h
.text:000000000000CC50 var_A0          = qword ptr -0A0h
.text:000000000000CC50 var_98          = qword ptr -98h
.text:000000000000CC50 var_90          = qword ptr -90h
.text:000000000000CC50 var_88          = qword ptr -88h
.text:000000000000CC50 var_78          = qword ptr -78h
.text:000000000000CC50 var_70          = xmmword ptr -70h
.text:000000000000CC50 ptr             = qword ptr -60h
.text:000000000000CC50 var_50          = qword ptr -50h
.text:000000000000CC50 var_48          = qword ptr -48h
.text:000000000000CC50 var_40          = qword ptr -40h
.text:000000000000CC50 var_38          = qword ptr -38h
.text:000000000000CC50
.text:000000000000CC50 ; __unwind {
.text:000000000000CC50                 push    rbp
.text:000000000000CC51                 mov     rbp, rsp
.text:000000000000CC54                 push    r15
.text:000000000000CC56                 push    r14
.text:000000000000CC58                 push    r13
.text:000000000000CC5A                 push    r12
.text:000000000000CC5C                 mov     r13, rcx
.text:000000000000CC5F                 push    rbx
.text:000000000000CC60                 mov     r12, rsi
.text:000000000000CC63                 sub     rsp, 0B8h
.text:000000000000CC6A                 mov     [rbp+var_98], rdx
.text:000000000000CC71                 mov     [rbp+var_50], 0
.text:000000000000CC79                 mov     rax, fs:28h
.text:000000000000CC82                 mov     [rbp+var_38], rax
.text:000000000000CC86                 xor     eax, eax
.text:000000000000CC88                 mov     rax, [rdi]
.text:000000000000CC8B                 test    r8b, r8b
.text:000000000000CC8E                 mov     [rbp+var_48], 2
.text:000000000000CC96                 mov     [rbp+var_40], 0
.text:000000000000CC9E                 mov     [rbp+var_90], rax
.text:000000000000CCA5                 jz      loc_D44D
.text:000000000000CCAB                 mov     edi, 60h ; '`'  ; size
.text:000000000000CCB0                 call    _malloc
.text:000000000000CCB5                 lea     rcx, [rbp+var_50]
.text:000000000000CCB9                 test    rax, rax
.text:000000000000CCBC                 mov     [rbp+var_40], rax
.text:000000000000CCC0                 mov     [rbp+var_88], rcx
.text:000000000000CCC7                 jz      loc_D3EC
.text:000000000000CCCD
.text:000000000000CCCD loc_CCCD:                               ; CODE XREF: set_regs+808↓j
.text:000000000000CCCD                 mov     rax, [rbp+var_90]
.text:000000000000CCD4                 pxor    xmm0, xmm0
.text:000000000000CCD8                 mov     [rbp+ptr], 0
.text:000000000000CCE0                 mov     rbx, [rax+90h]
.text:000000000000CCE7                 mov     rax, [rbp+var_98]
.text:000000000000CCEE                 movaps  [rbp+var_70], xmm0
.text:000000000000CCF2                 shl     rax, 4
.text:000000000000CCF6                 cmp     rax, 0FBFh
.text:000000000000CCFC                 mov     [rbp+n], rax
.text:000000000000CD03                 ja      loc_D3F6
.text:000000000000CD09                 add     rax, 10h
.text:000000000000CD0D                 mov     [rbp+var_C9], 0
.text:000000000000CD14                 sub     rsp, rax
.text:000000000000CD17                 lea     rax, [rsp+0E0h+var_D1]
.text:000000000000CD1C                 and     rax, 0FFFFFFFFFFFFFFF0h
.text:000000000000CD20                 mov     [rbp+dest], rax
.text:000000000000CD27
.text:000000000000CD27 loc_CD27:                               ; CODE XREF: set_regs+7C3↓j
.text:000000000000CD27                 mov     rdx, [rbp+n]    ; n
.text:000000000000CD2E                 mov     rdi, [rbp+dest] ; dest
.text:000000000000CD35                 mov     rsi, r13        ; src
.text:000000000000CD38                 call    _memcpy
.text:000000000000CD3D                 lea     rax, [rbp+var_70]
.text:000000000000CD41                 mov     rcx, [r13+0]
.text:000000000000CD45                 mov     [rbp+var_A8], rax
.text:000000000000CD4C                 add     rax, 10h
.text:000000000000CD50                 mov     [rbp+var_78], rcx
.text:000000000000CD54                 mov     [rbp+var_C8], rax
.text:000000000000CD5B
.text:000000000000CD5B loc_CD5B:                               ; CODE XREF: set_regs+612↓j
.text:000000000000CD5B                 lea     rax, [rbp+var_78]
.text:000000000000CD5F                 mov     [rbp+var_B0], rax
.text:000000000000CD66                 jmp     loc_CE49
.text:000000000000CD66 ; ---------------------------------------------------------------------------
.text:000000000000CD6B                 align 10h
.text:000000000000CD70
.text:000000000000CD70 loc_CD70:                               ; CODE XREF: set_regs+224↓j
.text:000000000000CD70                 cmp     esi, 9
.text:000000000000CD73                 jz      loc_CF60
.text:000000000000CD79
.text:000000000000CD79 loc_CD79:                               ; CODE XREF: set_regs+238↓j
.text:000000000000CD79                                         ; set_regs+254↓j ...
.text:000000000000CD79                 cmp     rax, rcx
.text:000000000000CD7C                 jnz     short loc_CD8C
.text:000000000000CD7E                 cmp     [r12+0B0h], rbx
.text:000000000000CD86                 jz      loc_D160
.text:000000000000CD8C
.text:000000000000CD8C loc_CD8C:                               ; CODE XREF: set_regs+12C↑j
.text:000000000000CD8C                                         ; set_regs+5C5↓j
.text:000000000000CD8C                 mov     r14, [r12+98h]
.text:000000000000CD94                 mov     rdi, [r14]
.text:000000000000CD97                 lea     rsi, [rdi+r9]
.text:000000000000CD9B                 movzx   eax, byte ptr [rsi+8]
.text:000000000000CD9F                 test    al, 8
.text:000000000000CDA1                 jnz     loc_CEB0
.text:000000000000CDA7                 test    byte ptr [rsi+0Ah], 10h
.text:000000000000CDAB                 jnz     loc_CFB0
.text:000000000000CDB1                 cmp     al, 4
.text:000000000000CDB3                 jz      loc_CFF0
.text:000000000000CDB9                 mov     rcx, [rbp+var_78]
.text:000000000000CDBD
.text:000000000000CDBD loc_CDBD:                               ; CODE XREF: set_regs+39A↓j
.text:000000000000CDBD                                         ; set_regs+6A5↓j
.text:000000000000CDBD                 mov     rdx, rcx
.text:000000000000CDC0                 mov     rdi, r12
.text:000000000000CDC3                 mov     [rbp+var_A0], rcx
.text:000000000000CDCA                 call    check_node_accept
.text:000000000000CDCF                 test    al, al
.text:000000000000CDD1                 mov     rcx, [rbp+var_A0]
.text:000000000000CDD8                 jz      loc_D228
.text:000000000000CDDE                 mov     rax, [r14+18h]
.text:000000000000CDE2                 lea     rdx, [rcx+1]
.text:000000000000CDE6                 mov     rbx, [rax+r15*8]
.text:000000000000CDEA
.text:000000000000CDEA loc_CDEA:                               ; CODE XREF: set_regs+431↓j
.text:000000000000CDEA                 cmp     [rbp+var_88], 0
.text:000000000000CDF2                 mov     [rbp+var_78], rdx
.text:000000000000CDF6                 jz      short loc_CE34
.text:000000000000CDF8                 cmp     rdx, [r12+0A8h]
.text:000000000000CE00                 jg      loc_D236
.text:000000000000CE06                 mov     rax, [r12+0B8h]
.text:000000000000CE0E                 mov     rax, [rax+rdx*8]
.text:000000000000CE12                 test    rax, rax
.text:000000000000CE15                 jz      loc_D236
.text:000000000000CE1B                 mov     rdi, [rax+10h]
.text:000000000000CE1F                 lea     rsi, [rax+18h]
.text:000000000000CE23                 mov     rdx, rbx
.text:000000000000CE26                 call    re_node_set_contains_isra_3
.text:000000000000CE2B                 test    rax, rax
.text:000000000000CE2E                 jz      loc_D236
.text:000000000000CE34
.text:000000000000CE34 loc_CE34:                               ; CODE XREF: set_regs+1A6↑j
.text:000000000000CE34                 mov     qword ptr [rbp+var_70+8], 0
.text:000000000000CE3C
.text:000000000000CE3C loc_CE3C:                               ; CODE XREF: set_regs+304↓j
.text:000000000000CE3C                                         ; set_regs+470↓j ...
.text:000000000000CE3C                 test    rbx, rbx
.text:000000000000CE3F                 js      loc_D21A
.text:000000000000CE45                 mov     rcx, [rbp+var_78]
.text:000000000000CE49
.text:000000000000CE49 loc_CE49:                               ; CODE XREF: set_regs+116↑j
.text:000000000000CE49                 mov     rax, [r13+8]
.text:000000000000CE4D                 cmp     rax, rcx
.text:000000000000CE50                 jl      loc_D340
.text:000000000000CE56                 mov     rdi, [rbp+var_90]
.text:000000000000CE5D                 mov     r9, rbx
.text:000000000000CE60                 mov     r15, rbx
.text:000000000000CE63                 shl     r9, 4
.text:000000000000CE67                 mov     rdx, [rdi]
.text:000000000000CE6A                 add     rdx, r9
.text:000000000000CE6D                 movzx   esi, byte ptr [rdx+8]
.text:000000000000CE71                 cmp     esi, 8
.text:000000000000CE74                 jnz     loc_CD70
.text:000000000000CE7A                 mov     rdx, [rdx]
.text:000000000000CE7D                 add     rdx, 1
.text:000000000000CE81                 cmp     [rbp+var_98], rdx
.text:000000000000CE88                 jle     loc_CD79
.text:000000000000CE8E                 shl     rdx, 4
.text:000000000000CE92                 add     rdx, r13
.text:000000000000CE95                 mov     qword ptr [rdx+8], 0FFFFFFFFFFFFFFFFh
.text:000000000000CE9D                 mov     [rdx], rcx
.text:000000000000CEA0                 mov     rax, [r13+8]
.text:000000000000CEA4                 jmp     loc_CD79
.text:000000000000CEA4 ; ---------------------------------------------------------------------------
.text:000000000000CEA9                 align 10h
.text:000000000000CEB0
.text:000000000000CEB0 loc_CEB0:                               ; CODE XREF: set_regs+151↑j
.text:000000000000CEB0                 mov     rax, [r12+0B8h]
.text:000000000000CEB8                 mov     rdx, [rbp+var_78]
.text:000000000000CEBC                 mov     rsi, rbx
.text:000000000000CEBF                 mov     rdi, [rbp+var_A8]
.text:000000000000CEC6                 mov     r9, [rax+rdx*8]
.text:000000000000CECA                 mov     rax, [r14+28h]
.text:000000000000CECE                 lea     rdx, [rbx+rbx*2]
.text:000000000000CED2                 mov     [rbp+var_A0], r9
.text:000000000000CED9                 lea     r15, [rax+rdx*8]
.text:000000000000CEDD                 call    re_node_set_insert
.text:000000000000CEE2                 test    al, al
.text:000000000000CEE4                 mov     r9, [rbp+var_A0]
.text:000000000000CEEB                 jz      loc_D3C8
.text:000000000000CEF1                 mov     r10, [r15+8]
.text:000000000000CEF5                 test    r10, r10
.text:000000000000CEF8                 jle     loc_D228
.text:000000000000CEFE                 mov     r15, [r15+10h]
.text:000000000000CF02                 mov     r11, [r9+10h]
.text:000000000000CF06                 lea     r14, [r9+18h]
.text:000000000000CF0A                 mov     rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000000CF11                 xor     r9d, r9d
.text:000000000000CF14                 mov     [rbp+var_A0], r12
.text:000000000000CF1B                 nop     dword ptr [rax+rax+00h]
.text:000000000000CF20
.text:000000000000CF20 loc_CF20:                               ; CODE XREF: set_regs+2FB↓j
.text:000000000000CF20                 mov     r12, [r15+r9*8]
.text:000000000000CF24                 mov     rsi, r14
.text:000000000000CF27                 mov     rdi, r11
.text:000000000000CF2A                 mov     rdx, r12
.text:000000000000CF2D                 call    re_node_set_contains_isra_3
.text:000000000000CF32                 test    rax, rax
.text:000000000000CF35                 jz      short loc_CF44
.text:000000000000CF37                 cmp     rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000000CF3B                 jnz     loc_D090
.text:000000000000CF41                 mov     rbx, r12
.text:000000000000CF44
.text:000000000000CF44 loc_CF44:                               ; CODE XREF: set_regs+2E5↑j
.text:000000000000CF44                 add     r9, 1
.text:000000000000CF48                 cmp     r10, r9
.text:000000000000CF4B                 jnz     short loc_CF20
.text:000000000000CF4D                 mov     r12, [rbp+var_A0]
.text:000000000000CF54                 jmp     loc_CE3C
.text:000000000000CF54 ; ---------------------------------------------------------------------------
.text:000000000000CF59                 align 20h
.text:000000000000CF60
.text:000000000000CF60 loc_CF60:                               ; CODE XREF: set_regs+123↑j
.text:000000000000CF60                 mov     rdi, [rdx]
.text:000000000000CF63                 lea     rsi, [rdi+1]
.text:000000000000CF67                 cmp     [rbp+var_98], rsi
.text:000000000000CF6E                 jle     loc_CD79
.text:000000000000CF74                 shl     rsi, 4
.text:000000000000CF78                 lea     rax, [r13+rsi+0]
.text:000000000000CF7D                 cmp     [rax], rcx
.text:000000000000CF80                 jl      loc_D300
.text:000000000000CF86                 test    byte ptr [rdx+0Ah], 8
.text:000000000000CF8A                 jz      short loc_CF9E
.text:000000000000CF8C                 mov     rdi, [rbp+dest]
.text:000000000000CF93                 cmp     qword ptr [rdi+rsi], 0FFFFFFFFFFFFFFFFh
.text:000000000000CF98                 jnz     loc_D38B
.text:000000000000CF9E
.text:000000000000CF9E loc_CF9E:                               ; CODE XREF: set_regs+33A↑j
.text:000000000000CF9E                 mov     [rax+8], rcx
.text:000000000000CFA2                 mov     rax, [r13+8]
.text:000000000000CFA6                 jmp     loc_CD79
.text:000000000000CFA6 ; ---------------------------------------------------------------------------
.text:000000000000CFAB                 align 10h
.text:000000000000CFB0
.text:000000000000CFB0 loc_CFB0:                               ; CODE XREF: set_regs+15B↑j
.text:000000000000CFB0                 mov     r8, [rbp+var_78]
.text:000000000000CFB4                 lea     rsi, [r14+0D8h]
.text:000000000000CFBB                 mov     rcx, r12
.text:000000000000CFBE                 mov     rdx, rbx
.text:000000000000CFC1                 mov     [rbp+var_A0], r9
.text:000000000000CFC8                 call    check_node_accept_bytes_isra_31
.text:000000000000CFCD                 movsxd  rcx, eax
.text:000000000000CFD0                 test    rcx, rcx
.text:000000000000CFD3                 jnz     loc_D1D1
.text:000000000000CFD9                 mov     r9, [rbp+var_A0]
.text:000000000000CFE0                 mov     rsi, [r14]
.text:000000000000CFE3                 mov     rcx, [rbp+var_78]
.text:000000000000CFE7                 add     rsi, r9
.text:000000000000CFEA                 jmp     loc_CDBD
.text:000000000000CFEA ; ---------------------------------------------------------------------------
.text:000000000000CFEF                 align 10h
.text:000000000000CFF0
.text:000000000000CFF0 loc_CFF0:                               ; CODE XREF: set_regs+163↑j
.text:000000000000CFF0                 mov     rax, [rsi]
.text:000000000000CFF3                 add     rax, 1
.text:000000000000CFF7                 shl     rax, 4
.text:000000000000CFFB                 add     rax, r13
.text:000000000000CFFE                 mov     rdx, [rax+8]
.text:000000000000D002                 mov     rdi, [rax]
.text:000000000000D005                 mov     rcx, rdx
.text:000000000000D008                 sub     rcx, rdi
.text:000000000000D00B                 cmp     [rbp+var_88], 0
.text:000000000000D013                 jz      loc_D1C8
.text:000000000000D019                 cmp     rdi, 0FFFFFFFFFFFFFFFFh
.text:000000000000D01D                 jz      loc_D236
.text:000000000000D023                 cmp     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000D027                 jz      loc_D236
.text:000000000000D02D                 test    rcx, rcx
.text:000000000000D030                 jz      loc_D280
.text:000000000000D036                 mov     r15, [rbp+var_78]
.text:000000000000D03A                 mov     rdx, [r12+30h]
.text:000000000000D03F                 mov     rax, [r12+8]
.text:000000000000D044                 sub     rdx, r15
.text:000000000000D047                 cmp     rcx, rdx
.text:000000000000D04A                 jg      loc_D236
.text:000000000000D050                 lea     rsi, [rax+r15]  ; s2
.text:000000000000D054                 add     rdi, rax        ; s1
.text:000000000000D057                 mov     rdx, rcx        ; n
.text:000000000000D05A                 mov     [rbp+var_A0], rcx
.text:000000000000D061                 call    _memcmp
.text:000000000000D066                 test    eax, eax
.text:000000000000D068                 mov     rcx, [rbp+var_A0]
.text:000000000000D06F                 jnz     loc_D236
.text:000000000000D075
.text:000000000000D075 loc_D075:                               ; CODE XREF: set_regs+585↓j
.text:000000000000D075                 mov     rax, [r14+18h]
.text:000000000000D079                 lea     rdx, [r15+rcx]
.text:000000000000D07D                 mov     rbx, [rax+rbx*8]
.text:000000000000D081                 jmp     loc_CDEA
.text:000000000000D081 ; ---------------------------------------------------------------------------
.text:000000000000D086                 align 10h
.text:000000000000D090
.text:000000000000D090 loc_D090:                               ; CODE XREF: set_regs+2EB↑j
.text:000000000000D090                 mov     rsi, [rbp+var_C8]
.text:000000000000D097                 mov     rdi, qword ptr [rbp+var_70+8]
.text:000000000000D09B                 mov     rdx, rbx
.text:000000000000D09E                 mov     r14, r12
.text:000000000000D0A1                 mov     r12, [rbp+var_A0]
.text:000000000000D0A8                 call    re_node_set_contains_isra_3
.text:000000000000D0AD                 test    rax, rax
.text:000000000000D0B0                 jnz     loc_D270
.text:000000000000D0B6                 mov     rcx, [rbp+var_88]
.text:000000000000D0BD                 test    rcx, rcx
.text:000000000000D0C0                 jz      loc_CE3C
.text:000000000000D0C6                 mov     r15, [rcx]
.text:000000000000D0C9                 mov     rdx, [rbp+var_78]
.text:000000000000D0CD                 lea     rax, [r15+1]
.text:000000000000D0D1                 cmp     rax, [rcx+8]
.text:000000000000D0D5                 mov     [rcx], rax
.text:000000000000D0D8                 jz      loc_D45D
.text:000000000000D0DE                 mov     rax, [rcx+10h]
.text:000000000000D0E2
.text:000000000000D0E2 loc_D0E2:                               ; CODE XREF: set_regs+847↓j
.text:000000000000D0E2                 lea     r15, [r15+r15*2]
.text:000000000000D0E6                 shl     r15, 4
.text:000000000000D0EA                 add     r15, rax
.text:000000000000D0ED                 mov     [r15+8], r14
.text:000000000000D0F1                 mov     r14, [rbp+n]
.text:000000000000D0F8                 mov     [r15], rdx
.text:000000000000D0FB                 mov     rdi, r14        ; size
.text:000000000000D0FE                 call    _malloc
.text:000000000000D103                 test    rax, rax
.text:000000000000D106                 mov     [r15+10h], rax
.text:000000000000D10A                 jz      short loc_D132
.text:000000000000D10C                 mov     rdx, r14        ; n
.text:000000000000D10F                 mov     rsi, r13        ; src
.text:000000000000D112                 mov     rdi, rax        ; dest
.text:000000000000D115                 call    _memcpy
.text:000000000000D11A                 mov     rsi, [rbp+var_A8]
.text:000000000000D121                 lea     rdi, [r15+18h]
.text:000000000000D125                 call    re_node_set_init_copy
.text:000000000000D12A                 test    eax, eax
.text:000000000000D12C                 jz      loc_CE3C
.text:000000000000D132
.text:000000000000D132 loc_D132:                               ; CODE XREF: set_regs+4BA↑j
.text:000000000000D132                 mov     rdi, [rbp+ptr]  ; ptr
.text:000000000000D136                 call    _free
.text:000000000000D13B                 cmp     [rbp+var_C9], 0
.text:000000000000D142                 jnz     loc_D4DB
.text:000000000000D148
.text:000000000000D148 loc_D148:                               ; CODE XREF: set_regs+796↓j
.text:000000000000D148                                         ; set_regs+885↓j
.text:000000000000D148                 mov     rdi, [rbp+var_88]
.text:000000000000D14F                 call    free_fail_stack_return_part_24
.text:000000000000D154                 mov     eax, 0Ch
.text:000000000000D159                 jmp     loc_D369
.text:000000000000D159 ; ---------------------------------------------------------------------------
.text:000000000000D15E                 align 20h
.text:000000000000D160
.text:000000000000D160 loc_D160:                               ; CODE XREF: set_regs+136↑j
.text:000000000000D160                 cmp     [rbp+var_88], 0
.text:000000000000D168                 jz      loc_D49C
.text:000000000000D16E                 mov     rcx, [rbp+var_98]
.text:000000000000D175                 test    rcx, rcx
.text:000000000000D178                 jz      short loc_D19A
.text:000000000000D17A                 mov     rax, r13
.text:000000000000D17D                 xor     edx, edx
.text:000000000000D17F                 nop
.text:000000000000D180
.text:000000000000D180 loc_D180:                               ; CODE XREF: set_regs+548↓j
.text:000000000000D180                 cmp     qword ptr [rax], 0
.text:000000000000D184                 js      short loc_D18D
.text:000000000000D186                 cmp     qword ptr [rax+8], 0FFFFFFFFFFFFFFFFh
.text:000000000000D18B                 jz      short loc_D1E0
.text:000000000000D18D
.text:000000000000D18D loc_D18D:                               ; CODE XREF: set_regs+534↑j
.text:000000000000D18D                 add     rdx, 1
.text:000000000000D191                 add     rax, 10h
.text:000000000000D195                 cmp     rcx, rdx
.text:000000000000D198                 jnz     short loc_D180
.text:000000000000D19A
.text:000000000000D19A loc_D19A:                               ; CODE XREF: set_regs+528↑j
.text:000000000000D19A                 mov     rdi, [rbp+ptr]  ; ptr
.text:000000000000D19E                 call    _free
.text:000000000000D1A3                 cmp     [rbp+var_C9], 0
.text:000000000000D1AA                 jnz     loc_D524
.text:000000000000D1B0
.text:000000000000D1B0 loc_D1B0:                               ; CODE XREF: set_regs+8E0↓j
.text:000000000000D1B0                 mov     rdi, [rbp+var_88]
.text:000000000000D1B7                 call    free_fail_stack_return_part_24
.text:000000000000D1BC                 xor     eax, eax
.text:000000000000D1BE                 jmp     loc_D369
.text:000000000000D1BE ; ---------------------------------------------------------------------------
.text:000000000000D1C3                 align 8
.text:000000000000D1C8
.text:000000000000D1C8 loc_D1C8:                               ; CODE XREF: set_regs+3C3↑j
.text:000000000000D1C8                 test    rcx, rcx
.text:000000000000D1CB                 jz      loc_D280
.text:000000000000D1D1
.text:000000000000D1D1 loc_D1D1:                               ; CODE XREF: set_regs+383↑j
.text:000000000000D1D1                 mov     r15, [rbp+var_78]
.text:000000000000D1D5                 jmp     loc_D075
.text:000000000000D1D5 ; ---------------------------------------------------------------------------
.text:000000000000D1DA                 align 20h
.text:000000000000D1E0
.text:000000000000D1E0 loc_D1E0:                               ; CODE XREF: set_regs+53B↑j
.text:000000000000D1E0                 mov     rdi, [rbp+var_88]
.text:000000000000D1E7                 mov     r9, [rbp+var_A8]
.text:000000000000D1EE                 mov     r8, r13
.text:000000000000D1F1                 mov     rcx, [rbp+var_98]
.text:000000000000D1F8                 mov     rdx, [rbp+var_B0]
.text:000000000000D1FF                 lea     rsi, [rdi+10h]
.text:000000000000D203                 call    pop_fail_stack_isra_25
.text:000000000000D208                 mov     r9, rax
.text:000000000000D20B                 mov     rbx, rax
.text:000000000000D20E                 mov     r15, rax
.text:000000000000D211                 shl     r9, 4
.text:000000000000D215                 jmp     loc_CD8C
.text:000000000000D21A ; ---------------------------------------------------------------------------
.text:000000000000D21A
.text:000000000000D21A loc_D21A:                               ; CODE XREF: set_regs+1EF↑j
.text:000000000000D21A                 cmp     rbx, 0FFFFFFFFFFFFFFFEh
.text:000000000000D21E                 jz      loc_D3C8
.text:000000000000D224                 nop     dword ptr [rax+00h]
.text:000000000000D228
.text:000000000000D228 loc_D228:                               ; CODE XREF: set_regs+188↑j
.text:000000000000D228                                         ; set_regs+2A8↑j
.text:000000000000D228                 cmp     [rbp+var_88], 0
.text:000000000000D230                 jz      loc_D4EC
.text:000000000000D236
.text:000000000000D236 loc_D236:                               ; CODE XREF: set_regs+1B0↑j
.text:000000000000D236                                         ; set_regs+1C5↑j ...
.text:000000000000D236                 mov     rdi, [rbp+var_88]
.text:000000000000D23D                 mov     rcx, [rbp+var_98]
.text:000000000000D244                 lea     rdx, [rbp+var_78]
.text:000000000000D248                 mov     r9, [rbp+var_A8]
.text:000000000000D24F                 mov     r8, r13
.text:000000000000D252                 lea     rsi, [rdi+10h]
.text:000000000000D256                 call    pop_fail_stack_isra_25
.text:000000000000D25B                 mov     rcx, [rbp+var_78]
.text:000000000000D25F                 mov     rbx, rax
.text:000000000000D262                 jmp     loc_CD5B
.text:000000000000D262 ; ---------------------------------------------------------------------------
.text:000000000000D267                 align 10h
.text:000000000000D270
.text:000000000000D270 loc_D270:                               ; CODE XREF: set_regs+460↑j
.text:000000000000D270                 mov     rbx, r14
.text:000000000000D273                 jmp     loc_CE3C
.text:000000000000D273 ; ---------------------------------------------------------------------------
.text:000000000000D278                 align 20h
.text:000000000000D280
.text:000000000000D280 loc_D280:                               ; CODE XREF: set_regs+3E0↑j
.text:000000000000D280                                         ; set_regs+57B↑j
.text:000000000000D280                 mov     rdi, [rbp+var_A8]
.text:000000000000D287                 mov     rsi, rbx
.text:000000000000D28A                 mov     [rbp+var_A0], r9
.text:000000000000D291                 call    re_node_set_insert
.text:000000000000D296                 test    al, al
.text:000000000000D298                 jz      loc_D3C8
.text:000000000000D29E                 mov     rdx, [r14+28h]
.text:000000000000D2A2                 lea     rax, [rbx+rbx*2]
.text:000000000000D2A6                 mov     rcx, [rbp+var_78]
.text:000000000000D2AA                 lea     rax, [rdx+rax*8]
.text:000000000000D2AE                 mov     [rbp-0D8h], rcx
.text:000000000000D2B5                 mov     rax, [rax+10h]
.text:000000000000D2B9                 mov     rbx, [rax]
.text:000000000000D2BC                 mov     rax, [r12+0B8h]
.text:000000000000D2C4                 mov     rax, [rax+rcx*8]
.text:000000000000D2C8                 mov     rdx, rbx
.text:000000000000D2CB                 mov     rdi, [rax+10h]
.text:000000000000D2CF                 lea     rsi, [rax+18h]
.text:000000000000D2D3                 call    re_node_set_contains_isra_3
.text:000000000000D2D8                 test    rax, rax
.text:000000000000D2DB                 jnz     loc_CE3C
.text:000000000000D2E1                 mov     r9, [rbp+var_A0]
.text:000000000000D2E8                 mov     rsi, [r14]
.text:000000000000D2EB                 mov     rcx, [rbp-0D8h]
.text:000000000000D2F2                 add     rsi, r9
.text:000000000000D2F5                 jmp     loc_CDBD
.text:000000000000D2F5 ; ---------------------------------------------------------------------------
.text:000000000000D2FA                 align 20h
.text:000000000000D300
.text:000000000000D300 loc_D300:                               ; CODE XREF: set_regs+330↑j
.text:000000000000D300                 mov     rdx, [rbp+n]    ; n
.text:000000000000D307                 mov     rdi, [rbp+dest] ; dest
.text:000000000000D30E                 mov     rsi, r13        ; src
.text:000000000000D311                 mov     [rax+8], rcx
.text:000000000000D315                 mov     [rbp-0D8h], r9
.text:000000000000D31C                 mov     [rbp+var_A0], rcx
.text:000000000000D323                 call    _memcpy
.text:000000000000D328                 mov     rax, [r13+8]
.text:000000000000D32C                 mov     rcx, [rbp+var_A0]
.text:000000000000D333                 mov     r9, [rbp-0D8h]
.text:000000000000D33A                 jmp     loc_CD79
.text:000000000000D33A ; ---------------------------------------------------------------------------
.text:000000000000D33F                 align 20h
.text:000000000000D340
.text:000000000000D340 loc_D340:                               ; CODE XREF: set_regs+200↑j
.text:000000000000D340                 mov     rdi, [rbp+ptr]  ; ptr
.text:000000000000D344                 call    _free
.text:000000000000D349                 cmp     [rbp+var_C9], 0
.text:000000000000D350                 jnz     loc_D42C
.text:000000000000D356                 mov     rdi, [rbp+var_88]
.text:000000000000D35D                 test    rdi, rdi
.text:000000000000D360                 jz      short loc_D367
.text:000000000000D362
.text:000000000000D362 loc_D362:                               ; CODE XREF: set_regs+7F2↓j
.text:000000000000D362                 call    free_fail_stack_return_part_24
.text:000000000000D367
.text:000000000000D367 loc_D367:                               ; CODE XREF: set_regs+710↑j
.text:000000000000D367                                         ; set_regs+7F8↓j ...
.text:000000000000D367                 xor     eax, eax
.text:000000000000D369
.text:000000000000D369 loc_D369:                               ; CODE XREF: set_regs+509↑j
.text:000000000000D369                                         ; set_regs+56E↑j ...
.text:000000000000D369                 mov     rbx, [rbp+var_38]
.text:000000000000D36D                 xor     rbx, fs:28h
.text:000000000000D376                 jnz     loc_D535
.text:000000000000D37C                 lea     rsp, [rbp-28h]
.text:000000000000D380                 pop     rbx
.text:000000000000D381                 pop     r12
.text:000000000000D383                 pop     r13
.text:000000000000D385                 pop     r14
.text:000000000000D387                 pop     r15
.text:000000000000D389                 pop     rbp
.text:000000000000D38A                 retn
.text:000000000000D38B ; ---------------------------------------------------------------------------
.text:000000000000D38B
.text:000000000000D38B loc_D38B:                               ; CODE XREF: set_regs+348↑j
.text:000000000000D38B                 mov     rdx, [rbp+n]    ; n
.text:000000000000D392                 mov     rsi, rdi        ; src
.text:000000000000D395                 mov     rdi, r13        ; dest
.text:000000000000D398                 mov     [rbp-0D8h], rcx
.text:000000000000D39F                 mov     [rbp+var_A0], r9
.text:000000000000D3A6                 call    _memcpy
.text:000000000000D3AB                 mov     rax, [r13+8]
.text:000000000000D3AF                 mov     r9, [rbp+var_A0]
.text:000000000000D3B6                 mov     rcx, [rbp-0D8h]
.text:000000000000D3BD                 jmp     loc_CD79
.text:000000000000D3BD ; ---------------------------------------------------------------------------
.text:000000000000D3C2                 align 8
.text:000000000000D3C8
.text:000000000000D3C8 loc_D3C8:                               ; CODE XREF: set_regs+29B↑j
.text:000000000000D3C8                                         ; set_regs+5CE↑j ...
.text:000000000000D3C8                 mov     rdi, [rbp+ptr]  ; ptr
.text:000000000000D3CC                 call    _free
.text:000000000000D3D1                 cmp     [rbp+var_C9], 0
.text:000000000000D3D8                 jnz     loc_D4DB
.text:000000000000D3DE
.text:000000000000D3DE loc_D3DE:                               ; CODE XREF: set_regs+897↓j
.text:000000000000D3DE                 cmp     [rbp+var_88], 0
.text:000000000000D3E6                 jnz     loc_D148
.text:000000000000D3EC
.text:000000000000D3EC loc_D3EC:                               ; CODE XREF: set_regs+77↑j
.text:000000000000D3EC                                         ; set_regs+7D3↓j ...
.text:000000000000D3EC                 mov     eax, 0Ch
.text:000000000000D3F1                 jmp     loc_D369
.text:000000000000D3F6 ; ---------------------------------------------------------------------------
.text:000000000000D3F6
.text:000000000000D3F6 loc_D3F6:                               ; CODE XREF: set_regs+B3↑j
.text:000000000000D3F6                 mov     rdi, [rbp+n]    ; size
.text:000000000000D3FD                 call    _malloc
.text:000000000000D402                 test    rax, rax
.text:000000000000D405                 mov     [rbp+dest], rax
.text:000000000000D40C                 mov     [rbp+var_C9], 1
.text:000000000000D413                 jnz     loc_CD27
.text:000000000000D419                 mov     rdi, [rbp+var_88]
.text:000000000000D420                 test    rdi, rdi
.text:000000000000D423                 jz      short loc_D3EC
.text:000000000000D425                 call    free_fail_stack_return_part_24
.text:000000000000D42A                 jmp     short loc_D3EC
.text:000000000000D42C ; ---------------------------------------------------------------------------
.text:000000000000D42C
.text:000000000000D42C loc_D42C:                               ; CODE XREF: set_regs+700↑j
.text:000000000000D42C                 mov     rdi, [rbp+dest] ; ptr
.text:000000000000D433                 call    _free
.text:000000000000D438                 mov     rdi, [rbp+var_88]
.text:000000000000D43F                 test    rdi, rdi
.text:000000000000D442                 jnz     loc_D362
.text:000000000000D448                 jmp     loc_D367
.text:000000000000D44D ; ---------------------------------------------------------------------------
.text:000000000000D44D
.text:000000000000D44D loc_D44D:                               ; CODE XREF: set_regs+55↑j
.text:000000000000D44D                 mov     [rbp+var_88], 0
.text:000000000000D458                 jmp     loc_CCCD
.text:000000000000D45D ; ---------------------------------------------------------------------------
.text:000000000000D45D
.text:000000000000D45D loc_D45D:                               ; CODE XREF: set_regs+488↑j
.text:000000000000D45D                 lea     rsi, [rax+rax*2]
.text:000000000000D461                 mov     rax, [rbp+var_88]
.text:000000000000D468                 mov     [rbp+var_A0], rdx
.text:000000000000D46F                 shl     rsi, 5          ; size
.text:000000000000D473                 mov     rdi, [rax+10h]  ; ptr
.text:000000000000D477                 call    _realloc
.text:000000000000D47C                 test    rax, rax
.text:000000000000D47F                 jz      short loc_D4C5
.text:000000000000D481                 mov     rcx, [rbp+var_88]
.text:000000000000D488                 mov     rdx, [rbp+var_A0]
.text:000000000000D48F                 shl     qword ptr [rcx+8], 1
.text:000000000000D493                 mov     [rcx+10h], rax
.text:000000000000D497                 jmp     loc_D0E2
.text:000000000000D49C ; ---------------------------------------------------------------------------
.text:000000000000D49C
.text:000000000000D49C loc_D49C:                               ; CODE XREF: set_regs+518↑j
.text:000000000000D49C                 mov     rdi, [rbp+ptr]  ; ptr
.text:000000000000D4A0                 call    _free
.text:000000000000D4A5                 cmp     [rbp+var_C9], 0
.text:000000000000D4AC                 jz      loc_D367
.text:000000000000D4B2                 mov     rdi, [rbp+dest] ; ptr
.text:000000000000D4B9                 call    _free
.text:000000000000D4BE                 xor     eax, eax
.text:000000000000D4C0                 jmp     loc_D369
.text:000000000000D4C5 ; ---------------------------------------------------------------------------
.text:000000000000D4C5
.text:000000000000D4C5 loc_D4C5:                               ; CODE XREF: set_regs+82F↑j
.text:000000000000D4C5                 mov     rdi, [rbp+ptr]  ; ptr
.text:000000000000D4C9                 call    _free
.text:000000000000D4CE                 cmp     [rbp+var_C9], 0
.text:000000000000D4D5                 jz      loc_D148
.text:000000000000D4DB
.text:000000000000D4DB loc_D4DB:                               ; CODE XREF: set_regs+4F2↑j
.text:000000000000D4DB                                         ; set_regs+788↑j
.text:000000000000D4DB                 mov     rdi, [rbp+dest] ; ptr
.text:000000000000D4E2                 call    _free
.text:000000000000D4E7                 jmp     loc_D3DE
.text:000000000000D4EC ; ---------------------------------------------------------------------------
.text:000000000000D4EC
.text:000000000000D4EC loc_D4EC:                               ; CODE XREF: set_regs+5E0↑j
.text:000000000000D4EC                 mov     rdi, [rbp+ptr]  ; ptr
.text:000000000000D4F0                 call    _free
.text:000000000000D4F5                 cmp     [rbp+var_C9], 0
.text:000000000000D4FC                 mov     eax, 1
.text:000000000000D501                 jz      loc_D369
.text:000000000000D507                 mov     rdi, [rbp+dest] ; ptr
.text:000000000000D50E                 mov     dword ptr [rbp+var_88], eax
.text:000000000000D514                 call    _free
.text:000000000000D519                 mov     eax, dword ptr [rbp+var_88]
.text:000000000000D51F                 jmp     loc_D369
.text:000000000000D524 ; ---------------------------------------------------------------------------
.text:000000000000D524
.text:000000000000D524 loc_D524:                               ; CODE XREF: set_regs+55A↑j
.text:000000000000D524                 mov     rdi, [rbp+dest] ; ptr
.text:000000000000D52B                 call    _free
.text:000000000000D530                 jmp     loc_D1B0
.text:000000000000D535 ; ---------------------------------------------------------------------------
.text:000000000000D535
.text:000000000000D535 loc_D535:                               ; CODE XREF: set_regs+726↑j
.text:000000000000D535                 call    ___stack_chk_fail
.text:000000000000D535 ; } // starts at CC50
.text:000000000000D535 set_regs        endp
.text:000000000000D535
.text:000000000000D535 ; ---------------------------------------------------------------------------
.text:000000000000D53A                 align 20h
.text:000000000000D540
.text:000000000000D540 ; =============== S U B R O U T I N E =======================================
.text:000000000000D540
.text:000000000000D540
.text:000000000000D540 get_subexp_sub_isra_32 proc near        ; CODE XREF: transit_state_bkref_isra_34+2C6↓p
.text:000000000000D540                                         ; transit_state_bkref_isra_34+6FD↓p
.text:000000000000D540
.text:000000000000D540 var_40          = qword ptr -40h
.text:000000000000D540
.text:000000000000D540 ; __unwind {
.text:000000000000D540                 push    r15
.text:000000000000D542                 push    r14
.text:000000000000D544                 mov     r14, rcx
.text:000000000000D547                 push    r13
.text:000000000000D549                 push    r12
.text:000000000000D54B                 mov     r13, rsi
.text:000000000000D54E                 push    rbp
.text:000000000000D54F                 push    rbx
.text:000000000000D550                 lea     rsi, [rdx+10h]
.text:000000000000D554                 mov     rbp, rdx
.text:000000000000D557                 mov     r9, r8
.text:000000000000D55A                 mov     r12, r8
.text:000000000000D55D                 sub     rsp, 20h
.text:000000000000D561                 mov     rcx, [rdx+8]
.text:000000000000D565                 mov     r8, r14
.text:000000000000D568                 push    8
.text:000000000000D56A                 mov     rdx, [rdx]
.text:000000000000D56D                 mov     rbx, rdi
.text:000000000000D570                 call    check_arrival
.text:000000000000D575                 test    eax, eax
.text:000000000000D577                 pop     rdx
.text:000000000000D578                 pop     rcx
.text:000000000000D579                 jz      short loc_D590
.text:000000000000D57B
.text:000000000000D57B loc_D57B:                               ; CODE XREF: get_subexp_sub_isra_32+191↓j
.text:000000000000D57B                 add     rsp, 18h
.text:000000000000D57F                 pop     rbx
.text:000000000000D580                 pop     rbp
.text:000000000000D581                 pop     r12
.text:000000000000D583                 pop     r13
.text:000000000000D585                 pop     r14
.text:000000000000D587                 pop     r15
.text:000000000000D589                 retn
.text:000000000000D589 ; ---------------------------------------------------------------------------
.text:000000000000D58A                 align 10h
.text:000000000000D590
.text:000000000000D590 loc_D590:                               ; CODE XREF: get_subexp_sub_isra_32+39↑j
.text:000000000000D590                 mov     rax, [rbx+0C8h]
.text:000000000000D597                 mov     rdx, [rbx+0D0h]
.text:000000000000D59E                 mov     r15, [rbp+8]
.text:000000000000D5A2                 mov     rcx, [r13+0]
.text:000000000000D5A6                 mov     rdi, [rbx+0D8h] ; ptr
.text:000000000000D5AD                 cmp     rax, rdx
.text:000000000000D5B0                 mov     rsi, r15
.text:000000000000D5B3                 jge     loc_D650
.text:000000000000D5B9
.text:000000000000D5B9 loc_D5B9:                               ; CODE XREF: get_subexp_sub_isra_32+17B↓j
.text:000000000000D5B9                 lea     rdx, [rax+rax*4]
.text:000000000000D5BD                 shl     rdx, 3
.text:000000000000D5C1                 test    rax, rax
.text:000000000000D5C4                 jle     short loc_D5D1
.text:000000000000D5C6                 lea     r8, [rdi+rdx-28h]
.text:000000000000D5CB                 cmp     r12, [r8+8]
.text:000000000000D5CF                 jz      short loc_D640
.text:000000000000D5D1
.text:000000000000D5D1 loc_D5D1:                               ; CODE XREF: get_subexp_sub_isra_32+84↑j
.text:000000000000D5D1                                         ; get_subexp_sub_isra_32+105↓j
.text:000000000000D5D1                 add     rdi, rdx
.text:000000000000D5D4                 xor     edx, edx
.text:000000000000D5D6                 cmp     r15, rcx
.text:000000000000D5D9                 setz    dl
.text:000000000000D5DC                 add     rax, 1
.text:000000000000D5E0                 mov     [rdi], r14
.text:000000000000D5E3                 neg     edx
.text:000000000000D5E5                 mov     [rdi+8], r12
.text:000000000000D5E9                 mov     [rdi+10h], rcx
.text:000000000000D5ED                 mov     [rdi+22h], dx
.text:000000000000D5F1                 mov     [rdi+18h], r15
.text:000000000000D5F5                 mov     [rbx+0C8h], rax
.text:000000000000D5FC                 mov     byte ptr [rdi+20h], 0
.text:000000000000D600                 mov     rax, r15
.text:000000000000D603                 movsxd  rdx, dword ptr [rbx+0E0h]
.text:000000000000D60A                 sub     rax, rcx
.text:000000000000D60D                 cmp     rdx, rax
.text:000000000000D610                 jge     short loc_D61C
.text:000000000000D612                 sub     r15d, ecx
.text:000000000000D615                 mov     [rbx+0E0h], r15d
.text:000000000000D61C
.text:000000000000D61C loc_D61C:                               ; CODE XREF: get_subexp_sub_isra_32+D0↑j
.text:000000000000D61C                 add     rsi, r12
.text:000000000000D61F                 sub     rsi, [r13+0]
.text:000000000000D623                 add     rsp, 18h
.text:000000000000D627                 mov     rdi, rbx
.text:000000000000D62A                 pop     rbx
.text:000000000000D62B                 pop     rbp
.text:000000000000D62C                 pop     r12
.text:000000000000D62E                 pop     r13
.text:000000000000D630                 pop     r14
.text:000000000000D632                 pop     r15
.text:000000000000D634                 jmp     clean_state_log_if_needed
.text:000000000000D634 ; ---------------------------------------------------------------------------
.text:000000000000D639                 align 20h
.text:000000000000D640
.text:000000000000D640 loc_D640:                               ; CODE XREF: get_subexp_sub_isra_32+8F↑j
.text:000000000000D640                 mov     byte ptr [r8+20h], 1
.text:000000000000D645                 jmp     short loc_D5D1
.text:000000000000D645 ; ---------------------------------------------------------------------------
.text:000000000000D647                 align 10h
.text:000000000000D650
.text:000000000000D650 loc_D650:                               ; CODE XREF: get_subexp_sub_isra_32+73↑j
.text:000000000000D650                 lea     rsi, [rdx+rdx*4]
.text:000000000000D654                 mov     [rsp+48h+var_40], rcx
.text:000000000000D659                 shl     rsi, 4          ; size
.text:000000000000D65D                 call    _realloc
.text:000000000000D662                 test    rax, rax
.text:000000000000D665                 mov     rcx, [rsp+48h+var_40]
.text:000000000000D66A                 jz      short loc_D6C0
.text:000000000000D66C                 mov     rsi, [rbx+0C8h]
.text:000000000000D673                 mov     rdx, [rbx+0D0h]
.text:000000000000D67A                 mov     [rbx+0D8h], rax
.text:000000000000D681                 mov     [rsp+48h+var_40], rcx
.text:000000000000D686                 lea     rsi, [rsi+rsi*4]
.text:000000000000D68A                 lea     rdx, [rdx+rdx*4]
.text:000000000000D68E                 lea     rdi, [rax+rsi*8] ; s
.text:000000000000D692                 shl     rdx, 3          ; n
.text:000000000000D696                 xor     esi, esi        ; c
.text:000000000000D698                 call    _memset
.text:000000000000D69D                 shl     qword ptr [rbx+0D0h], 1
.text:000000000000D6A4                 mov     rax, [rbx+0C8h]
.text:000000000000D6AB                 mov     rdi, [rbx+0D8h]
.text:000000000000D6B2                 mov     rsi, [rbp+8]
.text:000000000000D6B6                 mov     rcx, [rsp+48h+var_40]
.text:000000000000D6BB                 jmp     loc_D5B9
.text:000000000000D6C0 ; ---------------------------------------------------------------------------
.text:000000000000D6C0
.text:000000000000D6C0 loc_D6C0:                               ; CODE XREF: get_subexp_sub_isra_32+12A↑j
.text:000000000000D6C0                 mov     rdi, [rbx+0D8h] ; ptr
.text:000000000000D6C7                 call    _free
.text:000000000000D6CC                 mov     eax, 0Ch
.text:000000000000D6D1                 jmp     loc_D57B
.text:000000000000D6D1 ; } // starts at D540
.text:000000000000D6D1 get_subexp_sub_isra_32 endp
.text:000000000000D6D1
.text:000000000000D6D1 ; ---------------------------------------------------------------------------
.text:000000000000D6D6                 align 20h
.text:000000000000D6E0
.text:000000000000D6E0 ; =============== S U B R O U T I N E =======================================
.text:000000000000D6E0
.text:000000000000D6E0
.text:000000000000D6E0 transit_state_bkref_isra_34 proc near   ; CODE XREF: transit_state_bkref_isra_34+82A↓p
.text:000000000000D6E0                                         ; merge_state_with_log+1C1↓p ...
.text:000000000000D6E0
.text:000000000000D6E0 var_E8          = qword ptr -0E8h
.text:000000000000D6E0 var_E0          = qword ptr -0E0h
.text:000000000000D6E0 var_D8          = qword ptr -0D8h
.text:000000000000D6E0 var_D0          = qword ptr -0D0h
.text:000000000000D6E0 var_C8          = qword ptr -0C8h
.text:000000000000D6E0 var_C0          = qword ptr -0C0h
.text:000000000000D6E0 var_B8          = qword ptr -0B8h
.text:000000000000D6E0 var_B0          = qword ptr -0B0h
.text:000000000000D6E0 var_A8          = qword ptr -0A8h
.text:000000000000D6E0 var_A0          = qword ptr -0A0h
.text:000000000000D6E0 var_98          = qword ptr -98h
.text:000000000000D6E0 var_90          = qword ptr -90h
.text:000000000000D6E0 var_88          = qword ptr -88h
.text:000000000000D6E0 var_80          = qword ptr -80h
.text:000000000000D6E0 var_78          = qword ptr -78h
.text:000000000000D6E0 var_70          = qword ptr -70h
.text:000000000000D6E0 var_5C          = byte ptr -5Ch
.text:000000000000D6E0 var_58          = byte ptr -58h
.text:000000000000D6E0 ptr             = qword ptr -48h
.text:000000000000D6E0 var_40          = qword ptr -40h
.text:000000000000D6E0
.text:000000000000D6E0 ; __unwind {
.text:000000000000D6E0                 push    r15
.text:000000000000D6E2                 push    r14
.text:000000000000D6E4                 push    r13
.text:000000000000D6E6                 push    r12
.text:000000000000D6E8                 push    rbp
.text:000000000000D6E9                 push    rbx
.text:000000000000D6EA                 sub     rsp, 0B8h
.text:000000000000D6F1                 mov     r15, [rdi+48h]
.text:000000000000D6F5                 mov     rax, fs:28h
.text:000000000000D6FE                 mov     [rsp+0E8h+var_40], rax
.text:000000000000D706                 xor     eax, eax
.text:000000000000D708                 cmp     qword ptr [rsi], 0
.text:000000000000D70C                 mov     rax, [rdi+98h]
.text:000000000000D713                 mov     [rsp+0E8h+var_A0], rsi
.text:000000000000D718                 mov     [rsp+0E8h+var_A8], rdx
.text:000000000000D71D                 mov     [rsp+0E8h+var_B0], rax
.text:000000000000D722                 jle     loc_DA50
.text:000000000000D728                 lea     rax, ds:0[r15*8]
.text:000000000000D730                 mov     r14, rdi
.text:000000000000D733                 mov     [rsp+0E8h+var_E8], 0
.text:000000000000D73B                 mov     [rsp+0E8h+var_E0], r15
.text:000000000000D740                 mov     [rsp+0E8h+var_88], rax
.text:000000000000D745                 lea     rax, [rsp+0E8h+var_58]
.text:000000000000D74D                 mov     [rsp+0E8h+var_80], rax
.text:000000000000D752                 lea     rax, [rsp+0E8h+var_5C]
.text:000000000000D75A                 mov     [rsp+0E8h+var_70], rax
.text:000000000000D75F                 jmp     short loc_D7A7
.text:000000000000D75F ; ---------------------------------------------------------------------------
.text:000000000000D761                 align 8
.text:000000000000D768
.text:000000000000D768 loc_D768:                               ; CODE XREF: transit_state_bkref_isra_34+11D↓j
.text:000000000000D768                 test    al, 1
.text:000000000000D76A                 jz      short loc_D790
.text:000000000000D76C                 and     edx, 8
.text:000000000000D76F                 jnz     short loc_D790
.text:000000000000D771
.text:000000000000D771 loc_D771:                               ; CODE XREF: transit_state_bkref_isra_34+126↓j
.text:000000000000D771                                         ; transit_state_bkref_isra_34+12E↓j
.text:000000000000D771                 test    cl, 20h
.text:000000000000D774                 jz      short loc_D77A
.text:000000000000D776                 test    al, 2
.text:000000000000D778                 jz      short loc_D790
.text:000000000000D77A
.text:000000000000D77A loc_D77A:                               ; CODE XREF: transit_state_bkref_isra_34+94↑j
.text:000000000000D77A                 and     ecx, 80h
.text:000000000000D780                 jz      loc_D820
.text:000000000000D786                 test    al, 8
.text:000000000000D788                 jnz     loc_D820
.text:000000000000D78E                 xchg    ax, ax
.text:000000000000D790
.text:000000000000D790 loc_D790:                               ; CODE XREF: transit_state_bkref_isra_34+8A↑j
.text:000000000000D790                                         ; transit_state_bkref_isra_34+8F↑j ...
.text:000000000000D790                 mov     rdi, [rsp+0E8h+var_A0]
.text:000000000000D795                 add     [rsp+0E8h+var_E8], 1
.text:000000000000D79A                 mov     rax, [rsp+0E8h+var_E8]
.text:000000000000D79E                 cmp     rax, [rdi]
.text:000000000000D7A1                 jge     loc_DA50
.text:000000000000D7A7
.text:000000000000D7A7 loc_D7A7:                               ; CODE XREF: transit_state_bkref_isra_34+7F↑j
.text:000000000000D7A7                 mov     rax, [rsp+0E8h+var_A8]
.text:000000000000D7AC                 mov     rdi, [rsp+0E8h+var_E8]
.text:000000000000D7B0                 mov     rax, [rax]
.text:000000000000D7B3                 mov     r13, [rax+rdi*8]
.text:000000000000D7B7                 mov     rdi, [rsp+0E8h+var_B0]
.text:000000000000D7BC                 mov     rax, [rdi]
.text:000000000000D7BF                 mov     rbx, r13
.text:000000000000D7C2                 shl     rbx, 4
.text:000000000000D7C6                 add     rax, rbx
.text:000000000000D7C9                 cmp     byte ptr [rax+8], 4
.text:000000000000D7CD                 jnz     short loc_D790
.text:000000000000D7CF                 mov     ebp, [rax+8]
.text:000000000000D7D2                 test    ebp, 3FF00h
.text:000000000000D7D8                 jz      short loc_D820
.text:000000000000D7DA                 mov     edx, [r14+0A0h]
.text:000000000000D7E1                 mov     rsi, [rsp+0E8h+var_E0]
.text:000000000000D7E6                 mov     rdi, r14
.text:000000000000D7E9                 call    re_string_context_at
.text:000000000000D7EE                 mov     edx, ebp
.text:000000000000D7F0                 shr     edx, 8
.text:000000000000D7F3                 mov     ecx, edx
.text:000000000000D7F5                 and     cx, 3FFh
.text:000000000000D7FA                 test    dl, 4
.text:000000000000D7FD                 jnz     loc_D768
.text:000000000000D803                 and     edx, 8
.text:000000000000D806                 jz      loc_D771
.text:000000000000D80C                 test    al, 1
.text:000000000000D80E                 jz      loc_D771
.text:000000000000D814                 jmp     loc_D790
.text:000000000000D814 ; ---------------------------------------------------------------------------
.text:000000000000D819                 align 20h
.text:000000000000D820
.text:000000000000D820 loc_D820:                               ; CODE XREF: transit_state_bkref_isra_34+A0↑j
.text:000000000000D820                                         ; transit_state_bkref_isra_34+A8↑j ...
.text:000000000000D820                 mov     rdi, [r14+0C8h]
.text:000000000000D827                 mov     rax, [r14+98h]
.text:000000000000D82E                 xor     ecx, ecx
.text:000000000000D830                 mov     r10, [r14+8]
.text:000000000000D834                 mov     r9, [rsp+0E8h+var_E0]
.text:000000000000D839                 mov     [rsp+0E8h+var_78], rdi
.text:000000000000D83E                 mov     [rsp+0E8h+var_98], rax
.text:000000000000D843
.text:000000000000D843 loc_D843:                               ; CODE XREF: transit_state_bkref_isra_34+367↓j
.text:000000000000D843                 cmp     rcx, rdi
.text:000000000000D846                 jge     short loc_D89B
.text:000000000000D848                 lea     rax, [rcx+rdi]
.text:000000000000D84C                 mov     r11, [r14+0D8h]
.text:000000000000D853                 mov     rsi, rax
.text:000000000000D856                 shr     rsi, 3Fh
.text:000000000000D85A                 add     rsi, rax
.text:000000000000D85D                 sar     rsi, 1
.text:000000000000D860                 lea     rax, [rsi+rsi*4]
.text:000000000000D864                 cmp     r9, [r11+rax*8+8]
.text:000000000000D869                 jle     short loc_D896
.text:000000000000D86B                 jmp     loc_DA38
.text:000000000000D870 ; ---------------------------------------------------------------------------
.text:000000000000D870
.text:000000000000D870 loc_D870:                               ; CODE XREF: transit_state_bkref_isra_34+1B9↓j
.text:000000000000D870                 lea     rdx, [rsi+rcx]
.text:000000000000D874                 mov     rax, rdx
.text:000000000000D877                 shr     rax, 3Fh
.text:000000000000D87B                 add     rax, rdx
.text:000000000000D87E                 sar     rax, 1
.text:000000000000D881                 lea     rdx, [rax+rax*4]
.text:000000000000D885                 mov     r8, rax
.text:000000000000D888                 cmp     r9, [r11+rdx*8+8]
.text:000000000000D88D                 jg      loc_DA40
.text:000000000000D893                 mov     rsi, rax
.text:000000000000D896
.text:000000000000D896 loc_D896:                               ; CODE XREF: transit_state_bkref_isra_34+189↑j
.text:000000000000D896                 cmp     rsi, rcx
.text:000000000000D899                 jg      short loc_D870
.text:000000000000D89B
.text:000000000000D89B loc_D89B:                               ; CODE XREF: transit_state_bkref_isra_34+166↑j
.text:000000000000D89B                 cmp     [rsp+0E8h+var_78], rcx
.text:000000000000D8A0                 jle     short loc_D8C6
.text:000000000000D8A2                 mov     rdx, [r14+0D8h]
.text:000000000000D8A9                 lea     rax, [rcx+rcx*4]
.text:000000000000D8AD                 mov     rdi, [rsp+0E8h+var_E0]
.text:000000000000D8B2                 lea     rax, [rdx+rax*8]
.text:000000000000D8B6                 cmp     [rax+8], rdi
.text:000000000000D8BA                 jnz     short loc_D8C6
.text:000000000000D8BC                 cmp     rcx, 0FFFFFFFFFFFFFFFFh
.text:000000000000D8C0                 jnz     loc_DA96
.text:000000000000D8C6
.text:000000000000D8C6 loc_D8C6:                               ; CODE XREF: transit_state_bkref_isra_34+1C0↑j
.text:000000000000D8C6                                         ; transit_state_bkref_isra_34+1DA↑j ...
.text:000000000000D8C6                 mov     rax, [rsp+0E8h+var_98]
.text:000000000000D8CB                 cmp     qword ptr [r14+0E8h], 0
.text:000000000000D8D3                 mov     rdx, [rax]
.text:000000000000D8D6                 mov     rax, [rdx+rbx]
.text:000000000000D8DA                 mov     [rsp+0E8h+var_90], rax
.text:000000000000D8DF                 jle     loc_DA9B
.text:000000000000D8E5                 mov     [rsp+0E8h+var_B8], r13
.text:000000000000D8EA                 mov     [rsp+0E8h+var_C0], 0
.text:000000000000D8F3                 mov     r13, r10
.text:000000000000D8F6
.text:000000000000D8F6 loc_D8F6:                               ; CODE XREF: transit_state_bkref_isra_34+259↓j
.text:000000000000D8F6                 mov     rax, [r14+0F8h]
.text:000000000000D8FD                 mov     rbx, [rsp+0E8h+var_C0]
.text:000000000000D902                 mov     rdi, [rsp+0E8h+var_90]
.text:000000000000D907                 mov     rbx, [rax+rbx*8]
.text:000000000000D90B                 mov     rax, [rbx+8]
.text:000000000000D90F                 shl     rax, 4
.text:000000000000D913                 cmp     rdi, [rdx+rax]
.text:000000000000D917                 jz      short loc_D940
.text:000000000000D919
.text:000000000000D919 loc_D919:                               ; CODE XREF: transit_state_bkref_isra_34+5A7↓j
.text:000000000000D919                                         ; transit_state_bkref_isra_34+725↓j ...
.text:000000000000D919                 add     [rsp+0E8h+var_C0], 1
.text:000000000000D91F                 mov     rax, [rsp+0E8h+var_C0]
.text:000000000000D924                 cmp     rax, [r14+0E8h]
.text:000000000000D92B                 jge     loc_DFA1
.text:000000000000D931                 mov     rax, [rsp+0E8h+var_98]
.text:000000000000D936                 mov     rdx, [rax]
.text:000000000000D939                 jmp     short loc_D8F6
.text:000000000000D939 ; ---------------------------------------------------------------------------
.text:000000000000D93B                 align 20h
.text:000000000000D940
.text:000000000000D940 loc_D940:                               ; CODE XREF: transit_state_bkref_isra_34+237↑j
.text:000000000000D940                 cmp     qword ptr [rbx+20h], 0
.text:000000000000D945                 mov     r11, [rbx]
.text:000000000000D948                 jle     loc_DFB2
.text:000000000000D94E                 mov     rcx, [rsp+0E8h+var_E0]
.text:000000000000D953                 mov     r8, r13
.text:000000000000D956                 xor     ebp, ebp
.text:000000000000D958                 mov     r13, rbx
.text:000000000000D95B                 mov     rbx, rcx
.text:000000000000D95E                 jmp     short loc_D9CC
.text:000000000000D960 ; ---------------------------------------------------------------------------
.text:000000000000D960
.text:000000000000D960 loc_D960:                               ; CODE XREF: transit_state_bkref_isra_34+30B↓j
.text:000000000000D960                                         ; transit_state_bkref_isra_34+34C↓j
.text:000000000000D960                 lea     rsi, [r8+r11]   ; s2
.text:000000000000D964                 lea     rdi, [r8+rbx]   ; s1
.text:000000000000D968                 mov     [rsp+0E8h+var_C8], r9
.text:000000000000D96D                 mov     [rsp+0E8h+var_D0], r11
.text:000000000000D972                 mov     [rsp+0E8h+var_D8], r8
.text:000000000000D977                 call    _memcmp
.text:000000000000D97C                 test    eax, eax
.text:000000000000D97E                 mov     r8, [rsp+0E8h+var_D8]
.text:000000000000D983                 mov     r11, [rsp+0E8h+var_D0]
.text:000000000000D988                 mov     r9, [rsp+0E8h+var_C8]
.text:000000000000D98D                 jnz     loc_DE58
.text:000000000000D993
.text:000000000000D993 loc_D993:                               ; CODE XREF: transit_state_bkref_isra_34+305↓j
.text:000000000000D993                 mov     r8, [rsp+0E8h+var_E0]
.text:000000000000D998                 mov     rcx, [rsp+0E8h+var_B8]
.text:000000000000D99D                 mov     rdx, r9
.text:000000000000D9A0                 mov     rsi, r13
.text:000000000000D9A3                 mov     rdi, r14
.text:000000000000D9A6                 call    get_subexp_sub_isra_32
.text:000000000000D9AB                 cmp     eax, 1
.text:000000000000D9AE                 mov     r8, [r14+8]
.text:000000000000D9B2                 ja      loc_DA58
.text:000000000000D9B8                 add     rbp, 1
.text:000000000000D9BC                 cmp     rbp, [r13+20h]
.text:000000000000D9C0                 mov     r11, r15
.text:000000000000D9C3                 mov     rbx, r12
.text:000000000000D9C6                 jge     loc_DC78
.text:000000000000D9CC
.text:000000000000D9CC loc_D9CC:                               ; CODE XREF: transit_state_bkref_isra_34+27E↑j
.text:000000000000D9CC                 mov     rax, [r13+28h]
.text:000000000000D9D0                 mov     r9, [rax+rbp*8]
.text:000000000000D9D4                 mov     r15, [r9+8]
.text:000000000000D9D8                 mov     rdx, r15
.text:000000000000D9DB                 sub     rdx, r11        ; n
.text:000000000000D9DE                 test    rdx, rdx
.text:000000000000D9E1                 lea     r12, [rdx+rbx]
.text:000000000000D9E5                 jle     short loc_D993
.text:000000000000D9E7                 cmp     [r14+30h], r12
.text:000000000000D9EB                 jge     loc_D960
.text:000000000000D9F1                 cmp     [r14+58h], r12
.text:000000000000D9F5                 mov     [rsp+0E8h+var_D0], rdx
.text:000000000000D9FA                 mov     [rsp+0E8h+var_D8], r9
.text:000000000000D9FF                 jl      loc_DE58
.text:000000000000DA05                 mov     rsi, r12
.text:000000000000DA08                 mov     rdi, r14
.text:000000000000DA0B                 mov     [rsp+0E8h+var_C8], r11
.text:000000000000DA10                 call    clean_state_log_if_needed
.text:000000000000DA15                 test    eax, eax
.text:000000000000DA17                 jnz     short loc_DA58
.text:000000000000DA19                 mov     r8, [r14+8]
.text:000000000000DA1D                 mov     rdx, [rsp+0E8h+var_D0]
.text:000000000000DA22                 mov     r9, [rsp+0E8h+var_D8]
.text:000000000000DA27                 mov     r11, [rsp+0E8h+var_C8]
.text:000000000000DA2C                 jmp     loc_D960
.text:000000000000DA2C ; ---------------------------------------------------------------------------
.text:000000000000DA31                 align 8
.text:000000000000DA38
.text:000000000000DA38 loc_DA38:                               ; CODE XREF: transit_state_bkref_isra_34+18B↑j
.text:000000000000DA38                 mov     r8, rsi
.text:000000000000DA3B                 mov     rsi, rdi
.text:000000000000DA3E                 xchg    ax, ax
.text:000000000000DA40
.text:000000000000DA40 loc_DA40:                               ; CODE XREF: transit_state_bkref_isra_34+1AD↑j
.text:000000000000DA40                 lea     rcx, [r8+1]
.text:000000000000DA44                 mov     rdi, rsi
.text:000000000000DA47                 jmp     loc_D843
.text:000000000000DA47 ; ---------------------------------------------------------------------------
.text:000000000000DA4C                 align 10h
.text:000000000000DA50
.text:000000000000DA50 loc_DA50:                               ; CODE XREF: transit_state_bkref_isra_34+42↑j
.text:000000000000DA50                                         ; transit_state_bkref_isra_34+C1↑j
.text:000000000000DA50                 xor     eax, eax
.text:000000000000DA52                 nop     word ptr [rax+rax+00h]
.text:000000000000DA58
.text:000000000000DA58 loc_DA58:                               ; CODE XREF: transit_state_bkref_isra_34+2D2↑j
.text:000000000000DA58                                         ; transit_state_bkref_isra_34+337↑j ...
.text:000000000000DA58                 mov     rbx, [rsp+0E8h+var_40]
.text:000000000000DA60                 xor     rbx, fs:28h
.text:000000000000DA69                 jnz     loc_DFBC
.text:000000000000DA6F                 add     rsp, 0B8h
.text:000000000000DA76                 pop     rbx
.text:000000000000DA77                 pop     rbp
.text:000000000000DA78                 pop     r12
.text:000000000000DA7A                 pop     r13
.text:000000000000DA7C                 pop     r14
.text:000000000000DA7E                 pop     r15
.text:000000000000DA80                 retn
.text:000000000000DA80 ; ---------------------------------------------------------------------------
.text:000000000000DA81                 align 8
.text:000000000000DA88
.text:000000000000DA88 loc_DA88:                               ; CODE XREF: transit_state_bkref_isra_34+3B9↓j
.text:000000000000DA88                 add     rax, 28h ; '('
.text:000000000000DA8C                 cmp     byte ptr [rax-8], 0
.text:000000000000DA90                 jz      loc_D8C6
.text:000000000000DA96
.text:000000000000DA96 loc_DA96:                               ; CODE XREF: transit_state_bkref_isra_34+1E0↑j
.text:000000000000DA96                 cmp     r13, [rax]
.text:000000000000DA99                 jnz     short loc_DA88
.text:000000000000DA9B
.text:000000000000DA9B loc_DA9B:                               ; CODE XREF: transit_state_bkref_isra_34+1FF↑j
.text:000000000000DA9B                 mov     rax, [rsp+0E8h+var_78]
.text:000000000000DAA0
.text:000000000000DAA0 loc_DAA0:                               ; CODE XREF: transit_state_bkref_isra_34+8CD↓j
.text:000000000000DAA0                 cmp     [rsp+0E8h+var_78], rax
.text:000000000000DAA5                 mov     dword ptr [rsp+0E8h+var_5C], 0
.text:000000000000DAB0                 jge     loc_D790
.text:000000000000DAB6                 lea     rax, ds:0[r13*8]
.text:000000000000DABE                 mov     r12, [rsp+0E8h+var_78]
.text:000000000000DAC3                 mov     rbp, [rsp+0E8h+var_B0]
.text:000000000000DAC8                 mov     [rsp+0E8h+var_98], rax
.text:000000000000DACD                 lea     rax, [r13+r13*2+0]
.text:000000000000DAD2                 lea     r8, [r12+r12*4]
.text:000000000000DAD6                 shl     rax, 3
.text:000000000000DADA                 mov     [rsp+0E8h+var_90], rax
.text:000000000000DADF                 lea     r15, ds:0[r8*8]
.text:000000000000DAE7                 jmp     loc_DC1D
.text:000000000000DAE7 ; ---------------------------------------------------------------------------
.text:000000000000DAEC                 align 10h
.text:000000000000DAF0
.text:000000000000DAF0 loc_DAF0:                               ; CODE XREF: transit_state_bkref_isra_34+56E↓j
.text:000000000000DAF0                 mov     rcx, [rbp+28h]
.text:000000000000DAF4                 mov     rdi, [rsp+0E8h+var_90]
.text:000000000000DAF9                 mov     rcx, [rcx+rdi+10h]
.text:000000000000DAFE                 mov     rcx, [rcx]
.text:000000000000DB01                 lea     rcx, [rcx+rcx*2]
.text:000000000000DB05                 lea     rcx, [rdx+rcx*8]
.text:000000000000DB09                 mov     [rsp+0E8h+var_D0], rcx
.text:000000000000DB0E
.text:000000000000DB0E loc_DB0E:                               ; CODE XREF: transit_state_bkref_isra_34+58E↓j
.text:000000000000DB0E                 add     rbx, [rsp+0E8h+var_E0]
.text:000000000000DB13                 mov     edx, [r14+0A0h]
.text:000000000000DB1A                 mov     rdi, r14
.text:000000000000DB1D                 sub     rbx, rax
.text:000000000000DB20                 lea     rsi, [rbx-1]
.text:000000000000DB24                 call    re_string_context_at
.text:000000000000DB29                 mov     rsi, [rsp+0E8h+var_88]
.text:000000000000DB2E                 mov     ecx, eax
.text:000000000000DB30                 mov     rax, [r14+0B8h]
.text:000000000000DB37                 lea     r10, ds:0[rbx*8]
.text:000000000000DB3F                 mov     [rsp+0E8h+var_D8], 0
.text:000000000000DB48                 lea     r11, [rax+r10]
.text:000000000000DB4C                 mov     rax, [rax+rsi]
.text:000000000000DB50                 mov     rdx, [r11]
.text:000000000000DB53                 test    rax, rax
.text:000000000000DB56                 jz      short loc_DB61
.text:000000000000DB58                 mov     rax, [rax+10h]
.text:000000000000DB5C                 mov     [rsp+0E8h+var_D8], rax
.text:000000000000DB61
.text:000000000000DB61 loc_DB61:                               ; CODE XREF: transit_state_bkref_isra_34+476↑j
.text:000000000000DB61                 test    rdx, rdx
.text:000000000000DB64                 jz      loc_DE80
.text:000000000000DB6A                 mov     rsi, [rdx+50h]
.text:000000000000DB6E                 mov     rdi, [rsp+0E8h+var_80]
.text:000000000000DB73                 mov     rdx, [rsp+0E8h+var_D0]
.text:000000000000DB78                 mov     [rsp+0E8h+var_B8], r10
.text:000000000000DB7D                 mov     dword ptr [rsp+0E8h+var_C0], ecx
.text:000000000000DB81                 call    re_node_set_init_union
.text:000000000000DB86                 test    eax, eax
.text:000000000000DB88                 mov     dword ptr [rsp+0E8h+var_5C], eax
.text:000000000000DB8F                 mov     ecx, dword ptr [rsp+0E8h+var_C0]
.text:000000000000DB93                 mov     r10, [rsp+0E8h+var_B8]
.text:000000000000DB98                 jnz     loc_DF28
.text:000000000000DB9E                 add     r10, [r14+0B8h]
.text:000000000000DBA5                 mov     rdx, [rsp+0E8h+var_80]
.text:000000000000DBAA                 mov     rsi, rbp
.text:000000000000DBAD                 mov     rdi, [rsp+0E8h+var_70]
.text:000000000000DBB2                 mov     [rsp+0E8h+var_C0], r10
.text:000000000000DBB7                 call    re_acquire_state_context
.text:000000000000DBBC                 mov     r10, [rsp+0E8h+var_C0]
.text:000000000000DBC1                 mov     rdi, [rsp+0E8h+ptr] ; ptr
.text:000000000000DBC9                 mov     [r10], rax
.text:000000000000DBCC                 call    _free
.text:000000000000DBD1                 mov     rdx, [r14+0B8h]
.text:000000000000DBD8                 cmp     qword ptr [rdx+rbx*8], 0
.text:000000000000DBDD                 jz      loc_DEB1
.text:000000000000DBE3
.text:000000000000DBE3 loc_DBE3:                               ; CODE XREF: transit_state_bkref_isra_34+7CB↓j
.text:000000000000DBE3                                         ; transit_state_bkref_isra_34+7DA↓j
.text:000000000000DBE3                 cmp     [rsp+0E8h+var_C8], 0
.text:000000000000DBE9                 jnz     short loc_DC08
.text:000000000000DBEB                 mov     rax, [rsp+0E8h+var_88]
.text:000000000000DBF0                 mov     rbx, [rsp+0E8h+var_D8]
.text:000000000000DBF5                 mov     rax, [rdx+rax]
.text:000000000000DBF9                 cmp     [rax+10h], rbx
.text:000000000000DBFD                 jg      loc_DEC8
.text:000000000000DC03                 nop     dword ptr [rax+rax+00h]
.text:000000000000DC08
.text:000000000000DC08 loc_DC08:                               ; CODE XREF: transit_state_bkref_isra_34+509↑j
.text:000000000000DC08                                         ; transit_state_bkref_isra_34+54A↓j ...
.text:000000000000DC08                 add     r12, 1
.text:000000000000DC0C                 add     r15, 28h ; '('
.text:000000000000DC10                 cmp     r12, [r14+0C8h]
.text:000000000000DC17                 jge     loc_D790
.text:000000000000DC1D
.text:000000000000DC1D loc_DC1D:                               ; CODE XREF: transit_state_bkref_isra_34+407↑j
.text:000000000000DC1D                 mov     rax, [r14+0D8h]
.text:000000000000DC24                 add     rax, r15
.text:000000000000DC27                 cmp     r13, [rax]
.text:000000000000DC2A                 jnz     short loc_DC08
.text:000000000000DC2C                 mov     rdi, [rsp+0E8h+var_E0]
.text:000000000000DC31                 cmp     rdi, [rax+8]
.text:000000000000DC35                 jnz     short loc_DC08
.text:000000000000DC37                 mov     rbx, [rax+18h]
.text:000000000000DC3B                 mov     rax, [rax+10h]
.text:000000000000DC3F                 mov     rdx, [rbp+30h]
.text:000000000000DC43                 mov     rcx, rbx
.text:000000000000DC46                 sub     rcx, rax
.text:000000000000DC49                 mov     [rsp+0E8h+var_C8], rcx
.text:000000000000DC4E                 jz      loc_DAF0
.text:000000000000DC54                 mov     rcx, [rbp+18h]
.text:000000000000DC58                 mov     rdi, [rsp+0E8h+var_98]
.text:000000000000DC5D                 mov     rcx, [rcx+rdi]
.text:000000000000DC61                 lea     rcx, [rcx+rcx*2]
.text:000000000000DC65                 lea     rcx, [rdx+rcx*8]
.text:000000000000DC69                 mov     [rsp+0E8h+var_D0], rcx
.text:000000000000DC6E                 jmp     loc_DB0E
.text:000000000000DC6E ; ---------------------------------------------------------------------------
.text:000000000000DC73                 align 8
.text:000000000000DC78
.text:000000000000DC78 loc_DC78:                               ; CODE XREF: transit_state_bkref_isra_34+2E6↑j
.text:000000000000DC78                 mov     rbx, r13
.text:000000000000DC7B                 mov     r13, r8
.text:000000000000DC7E
.text:000000000000DC7E loc_DC7E:                               ; CODE XREF: transit_state_bkref_isra_34+79A↓j
.text:000000000000DC7E                 lea     r11, [r15+1]
.text:000000000000DC82
.text:000000000000DC82 loc_DC82:                               ; CODE XREF: transit_state_bkref_isra_34+791↓j
.text:000000000000DC82                                         ; transit_state_bkref_isra_34+8D7↓j
.text:000000000000DC82                 cmp     [rsp+0E8h+var_E0], r11
.text:000000000000DC87                 jl      loc_D919
.text:000000000000DC8D                 mov     rax, r12
.text:000000000000DC90                 lea     r15, ds:0[r11*8]
.text:000000000000DC98                 mov     r12, rbx
.text:000000000000DC9B                 mov     rbx, r11
.text:000000000000DC9E                 mov     r11, r13
.text:000000000000DCA1                 mov     r13, rax
.text:000000000000DCA4                 nop     dword ptr [rax+00h]
.text:000000000000DCA8
.text:000000000000DCA8 loc_DCA8:                               ; CODE XREF: transit_state_bkref_isra_34+71C↓j
.text:000000000000DCA8                 mov     rax, rbx
.text:000000000000DCAB                 sub     rax, [r12]
.text:000000000000DCAF                 test    rax, rax
.text:000000000000DCB2                 jle     short loc_DCD5
.text:000000000000DCB4                 cmp     [r14+30h], r13
.text:000000000000DCB8                 jle     loc_DF41
.text:000000000000DCBE
.text:000000000000DCBE loc_DCBE:                               ; CODE XREF: transit_state_bkref_isra_34+883↓j
.text:000000000000DCBE                 movzx   ecx, byte ptr [r11+rbx-1]
.text:000000000000DCC4                 lea     rax, [r13+1]
.text:000000000000DCC8                 cmp     [r11+r13], cl
.text:000000000000DCCC                 jnz     loc_DE02
.text:000000000000DCD2                 mov     r13, rax
.text:000000000000DCD5
.text:000000000000DCD5 loc_DCD5:                               ; CODE XREF: transit_state_bkref_isra_34+5D2↑j
.text:000000000000DCD5                 mov     rax, [r14+0B8h]
.text:000000000000DCDC                 mov     rax, [rax+r15]
.text:000000000000DCE0                 test    rax, rax
.text:000000000000DCE3                 jz      loc_DDEF
.text:000000000000DCE9                 mov     rcx, [rax+10h]
.text:000000000000DCED                 test    rcx, rcx
.text:000000000000DCF0                 jle     loc_DDEF
.text:000000000000DCF6                 mov     rdi, [rax+18h]
.text:000000000000DCFA                 mov     rax, [rsp+0E8h+var_98]
.text:000000000000DCFF                 xor     edx, edx
.text:000000000000DD01                 mov     r8, [rsp+0E8h+var_90]
.text:000000000000DD06                 mov     rsi, [rax]
.text:000000000000DD09                 jmp     short loc_DD1D
.text:000000000000DD09 ; ---------------------------------------------------------------------------
.text:000000000000DD0B                 align 10h
.text:000000000000DD10
.text:000000000000DD10 loc_DD10:                               ; CODE XREF: transit_state_bkref_isra_34+64F↓j
.text:000000000000DD10                                         ; transit_state_bkref_isra_34+654↓j
.text:000000000000DD10                 add     rdx, 1
.text:000000000000DD14                 cmp     rcx, rdx
.text:000000000000DD17                 jz      loc_DDEF
.text:000000000000DD1D
.text:000000000000DD1D loc_DD1D:                               ; CODE XREF: transit_state_bkref_isra_34+629↑j
.text:000000000000DD1D                 mov     rbp, [rdi+rdx*8]
.text:000000000000DD21                 mov     rax, rbp
.text:000000000000DD24                 shl     rax, 4
.text:000000000000DD28                 add     rax, rsi
.text:000000000000DD2B                 cmp     byte ptr [rax+8], 9
.text:000000000000DD2F                 jnz     short loc_DD10
.text:000000000000DD31                 cmp     r8, [rax]
.text:000000000000DD34                 jnz     short loc_DD10
.text:000000000000DD36                 cmp     rbp, 0FFFFFFFFFFFFFFFFh
.text:000000000000DD3A                 jz      loc_DDEF
.text:000000000000DD40                 mov     rsi, [r12+10h]
.text:000000000000DD45                 mov     rcx, [r12]
.text:000000000000DD49                 test    rsi, rsi
.text:000000000000DD4C                 jz      loc_DE10
.text:000000000000DD52
.text:000000000000DD52 loc_DD52:                               ; CODE XREF: transit_state_bkref_isra_34+763↓j
.text:000000000000DD52                 mov     [rsp+0E8h+var_D8], r11
.text:000000000000DD57                 mov     rdx, [r12+8]
.text:000000000000DD5C                 sub     rsp, 8
.text:000000000000DD60                 push    9
.text:000000000000DD62                 mov     r9, rbx
.text:000000000000DD65                 mov     r8, rbp
.text:000000000000DD68                 mov     rdi, r14
.text:000000000000DD6B                 call    check_arrival
.text:000000000000DD70                 pop     rdx
.text:000000000000DD71                 cmp     eax, 1
.text:000000000000DD74                 pop     rcx
.text:000000000000DD75                 mov     r11, [rsp+0E8h+var_D8]
.text:000000000000DD7A                 jz      short loc_DDEF
.text:000000000000DD7C                 test    eax, eax
.text:000000000000DD7E                 jnz     loc_DA58
.text:000000000000DD84                 mov     rax, [r12+20h]
.text:000000000000DD89                 cmp     rax, [r12+18h]
.text:000000000000DD8E                 jz      loc_DF68
.text:000000000000DD94
.text:000000000000DD94 loc_DD94:                               ; CODE XREF: transit_state_bkref_isra_34+8BC↓j
.text:000000000000DD94                 mov     esi, 28h ; '('  ; size
.text:000000000000DD99                 mov     edi, 1          ; nmemb
.text:000000000000DD9E                 call    _calloc
.text:000000000000DDA3                 test    rax, rax
.text:000000000000DDA6                 jz      loc_DE49
.text:000000000000DDAC                 mov     rdx, [r12+20h]
.text:000000000000DDB1                 mov     rcx, [r12+28h]
.text:000000000000DDB6                 mov     rsi, r12
.text:000000000000DDB9                 mov     r8, [rsp+0E8h+var_E0]
.text:000000000000DDBE                 mov     rdi, r14
.text:000000000000DDC1                 mov     [rcx+rdx*8], rax
.text:000000000000DDC5                 mov     rcx, [rsp+0E8h+var_B8]
.text:000000000000DDCA                 add     rdx, 1
.text:000000000000DDCE                 mov     [rax], rbp
.text:000000000000DDD1                 mov     [rax+8], rbx
.text:000000000000DDD5                 mov     [r12+20h], rdx
.text:000000000000DDDA                 mov     rdx, rax
.text:000000000000DDDD                 call    get_subexp_sub_isra_32
.text:000000000000DDE2                 cmp     eax, 1
.text:000000000000DDE5                 mov     r11, [r14+8]
.text:000000000000DDE9                 ja      loc_DA58
.text:000000000000DDEF
.text:000000000000DDEF loc_DDEF:                               ; CODE XREF: transit_state_bkref_isra_34+603↑j
.text:000000000000DDEF                                         ; transit_state_bkref_isra_34+610↑j ...
.text:000000000000DDEF                 add     rbx, 1
.text:000000000000DDF3                 add     r15, 8
.text:000000000000DDF7                 cmp     [rsp+0E8h+var_E0], rbx
.text:000000000000DDFC                 jge     loc_DCA8
.text:000000000000DE02
.text:000000000000DE02 loc_DE02:                               ; CODE XREF: transit_state_bkref_isra_34+5EC↑j
.text:000000000000DE02                                         ; transit_state_bkref_isra_34+865↓j
.text:000000000000DE02                 mov     r13, r11
.text:000000000000DE05                 jmp     loc_D919
.text:000000000000DE05 ; ---------------------------------------------------------------------------
.text:000000000000DE0A                 align 10h
.text:000000000000DE10
.text:000000000000DE10 loc_DE10:                               ; CODE XREF: transit_state_bkref_isra_34+66C↑j
.text:000000000000DE10                 mov     rsi, rbx
.text:000000000000DE13                 mov     edi, 18h        ; nmemb
.text:000000000000DE18                 mov     [rsp+0E8h+var_D0], r11
.text:000000000000DE1D                 sub     rsi, rcx
.text:000000000000DE20                 mov     [rsp+0E8h+var_D8], rcx
.text:000000000000DE25                 add     rsi, 1          ; size
.text:000000000000DE29                 call    _calloc
.text:000000000000DE2E                 test    rax, rax
.text:000000000000DE31                 mov     rsi, rax
.text:000000000000DE34                 mov     [r12+10h], rax
.text:000000000000DE39                 mov     rcx, [rsp+0E8h+var_D8]
.text:000000000000DE3E                 mov     r11, [rsp+0E8h+var_D0]
.text:000000000000DE43                 jnz     loc_DD52
.text:000000000000DE49
.text:000000000000DE49 loc_DE49:                               ; CODE XREF: transit_state_bkref_isra_34+6C6↑j
.text:000000000000DE49                                         ; transit_state_bkref_isra_34+8A7↓j
.text:000000000000DE49                 mov     eax, 0Ch
.text:000000000000DE4E                 jmp     loc_DA58
.text:000000000000DE4E ; ---------------------------------------------------------------------------
.text:000000000000DE53                 align 8
.text:000000000000DE58
.text:000000000000DE58 loc_DE58:                               ; CODE XREF: transit_state_bkref_isra_34+2AD↑j
.text:000000000000DE58                                         ; transit_state_bkref_isra_34+31F↑j
.text:000000000000DE58                 mov     rcx, rbx
.text:000000000000DE5B                 mov     rbx, r13
.text:000000000000DE5E                 mov     r13, r8
.text:000000000000DE61                 cmp     [rbx+20h], rbp
.text:000000000000DE65                 jg      loc_D919
.text:000000000000DE6B                 test    rbp, rbp
.text:000000000000DE6E                 mov     r12, rcx
.text:000000000000DE71                 jz      loc_DC82
.text:000000000000DE77                 mov     r15, r11
.text:000000000000DE7A                 jmp     loc_DC7E
.text:000000000000DE7A ; ---------------------------------------------------------------------------
.text:000000000000DE7F                 align 20h
.text:000000000000DE80
.text:000000000000DE80 loc_DE80:                               ; CODE XREF: transit_state_bkref_isra_34+484↑j
.text:000000000000DE80                 mov     rdx, [rsp+0E8h+var_D0]
.text:000000000000DE85                 mov     rdi, [rsp+0E8h+var_70]
.text:000000000000DE8A                 mov     rsi, rbp
.text:000000000000DE8D                 mov     [rsp+0E8h+var_C0], r11
.text:000000000000DE92                 call    re_acquire_state_context
.text:000000000000DE97                 mov     r11, [rsp+0E8h+var_C0]
.text:000000000000DE9C                 mov     rdx, [r14+0B8h]
.text:000000000000DEA3                 mov     [r11], rax
.text:000000000000DEA6                 cmp     qword ptr [rdx+rbx*8], 0
.text:000000000000DEAB                 jnz     loc_DBE3
.text:000000000000DEB1
.text:000000000000DEB1 loc_DEB1:                               ; CODE XREF: transit_state_bkref_isra_34+4FD↑j
.text:000000000000DEB1                 mov     eax, dword ptr [rsp+0E8h+var_5C]
.text:000000000000DEB8                 test    eax, eax
.text:000000000000DEBA                 jz      loc_DBE3
.text:000000000000DEC0                 jmp     loc_DA58
.text:000000000000DEC0 ; ---------------------------------------------------------------------------
.text:000000000000DEC5                 align 8
.text:000000000000DEC8
.text:000000000000DEC8 loc_DEC8:                               ; CODE XREF: transit_state_bkref_isra_34+51D↑j
.text:000000000000DEC8                 mov     rax, [rsp+0E8h+var_D0]
.text:000000000000DECD                 mov     rcx, [rsp+0E8h+var_E0]
.text:000000000000DED2                 mov     rdi, r14
.text:000000000000DED5                 lea     r8, [rax+10h]
.text:000000000000DED9                 lea     rbx, [rax+8]
.text:000000000000DEDD                 mov     rdx, r8
.text:000000000000DEE0                 mov     rsi, rbx
.text:000000000000DEE3                 mov     [rsp+0E8h+var_D8], r8
.text:000000000000DEE8                 call    check_subexp_matching_top_isra_18
.text:000000000000DEED                 test    eax, eax
.text:000000000000DEEF                 mov     dword ptr [rsp+0E8h+var_5C], eax
.text:000000000000DEF6                 jnz     loc_DA58
.text:000000000000DEFC                 mov     r8, [rsp+0E8h+var_D8]
.text:000000000000DF01                 mov     rsi, rbx
.text:000000000000DF04                 mov     rdi, r14
.text:000000000000DF07                 mov     rdx, r8
.text:000000000000DF0A                 call    transit_state_bkref_isra_34
.text:000000000000DF0F                 test    eax, eax
.text:000000000000DF11                 mov     dword ptr [rsp+0E8h+var_5C], eax
.text:000000000000DF18                 jz      loc_DC08
.text:000000000000DF1E                 jmp     loc_DA58
.text:000000000000DF1E ; ---------------------------------------------------------------------------
.text:000000000000DF23                 align 8
.text:000000000000DF28
.text:000000000000DF28 loc_DF28:                               ; CODE XREF: transit_state_bkref_isra_34+4B8↑j
.text:000000000000DF28                 mov     rdi, [rsp+0E8h+ptr] ; ptr
.text:000000000000DF30                 call    _free
.text:000000000000DF35                 mov     eax, dword ptr [rsp+0E8h+var_5C]
.text:000000000000DF3C                 jmp     loc_DA58
.text:000000000000DF41 ; ---------------------------------------------------------------------------
.text:000000000000DF41
.text:000000000000DF41 loc_DF41:                               ; CODE XREF: transit_state_bkref_isra_34+5D8↑j
.text:000000000000DF41                 cmp     [r14+58h], r13
.text:000000000000DF45                 jle     loc_DE02
.text:000000000000DF4B                 lea     esi, [r13+1]
.text:000000000000DF4F                 mov     rdi, r14
.text:000000000000DF52                 call    extend_buffers
.text:000000000000DF57                 test    eax, eax
.text:000000000000DF59                 jnz     loc_DA58
.text:000000000000DF5F                 mov     r11, [r14+8]
.text:000000000000DF63                 jmp     loc_DCBE
.text:000000000000DF68 ; ---------------------------------------------------------------------------
.text:000000000000DF68
.text:000000000000DF68 loc_DF68:                               ; CODE XREF: transit_state_bkref_isra_34+6AE↑j
.text:000000000000DF68                 lea     rdx, [rax+rax+1]
.text:000000000000DF6D                 mov     rdi, [r12+28h]  ; ptr
.text:000000000000DF72                 lea     rsi, ds:0[rdx*8] ; size
.text:000000000000DF7A                 mov     [rsp+0E8h+var_D8], rdx
.text:000000000000DF7F                 call    _realloc
.text:000000000000DF84                 test    rax, rax
.text:000000000000DF87                 jz      loc_DE49
.text:000000000000DF8D                 mov     rdx, [rsp+0E8h+var_D8]
.text:000000000000DF92                 mov     [r12+28h], rax
.text:000000000000DF97                 mov     [r12+18h], rdx
.text:000000000000DF9C                 jmp     loc_DD94
.text:000000000000DFA1 ; ---------------------------------------------------------------------------
.text:000000000000DFA1
.text:000000000000DFA1 loc_DFA1:                               ; CODE XREF: transit_state_bkref_isra_34+24B↑j
.text:000000000000DFA1                 mov     r13, [rsp+0E8h+var_B8]
.text:000000000000DFA6                 mov     rax, [r14+0C8h]
.text:000000000000DFAD                 jmp     loc_DAA0
.text:000000000000DFB2 ; ---------------------------------------------------------------------------
.text:000000000000DFB2
.text:000000000000DFB2 loc_DFB2:                               ; CODE XREF: transit_state_bkref_isra_34+268↑j
.text:000000000000DFB2                 mov     r12, [rsp+0E8h+var_E0]
.text:000000000000DFB7                 jmp     loc_DC82
.text:000000000000DFBC ; ---------------------------------------------------------------------------
.text:000000000000DFBC
.text:000000000000DFBC loc_DFBC:                               ; CODE XREF: transit_state_bkref_isra_34+389↑j
.text:000000000000DFBC                 call    ___stack_chk_fail
.text:000000000000DFBC ; } // starts at D6E0
.text:000000000000DFBC transit_state_bkref_isra_34 endp
.text:000000000000DFBC
.text:000000000000DFBC ; ---------------------------------------------------------------------------
.text:000000000000DFC1                 align 10h
.text:000000000000DFD0
.text:000000000000DFD0 ; =============== S U B R O U T I N E =======================================
.text:000000000000DFD0
.text:000000000000DFD0
.text:000000000000DFD0 merge_state_with_log proc near          ; CODE XREF: re_search_internal+7DC↓p
.text:000000000000DFD0                                         ; re_search_internal+BC3↓p
.text:000000000000DFD0
.text:000000000000DFD0 var_68          = qword ptr -68h
.text:000000000000DFD0 var_60          = qword ptr -60h
.text:000000000000DFD0 var_58          = xmmword ptr -58h
.text:000000000000DFD0 ptr             = qword ptr -48h
.text:000000000000DFD0 var_40          = qword ptr -40h
.text:000000000000DFD0
.text:000000000000DFD0 ; __unwind {
.text:000000000000DFD0                 push    r15
.text:000000000000DFD2                 push    r14
.text:000000000000DFD4                 push    r13
.text:000000000000DFD6                 push    r12
.text:000000000000DFD8                 mov     r13, rdi
.text:000000000000DFDB                 push    rbp
.text:000000000000DFDC                 push    rbx
.text:000000000000DFDD                 mov     rbx, rsi
.text:000000000000DFE0                 sub     rsp, 38h
.text:000000000000DFE4                 mov     r12, [rsi+48h]
.text:000000000000DFE8                 mov     r14, [rsi+0B8h]
.text:000000000000DFEF                 mov     rax, fs:28h
.text:000000000000DFF8                 mov     [rsp+68h+var_40], rax
.text:000000000000DFFD                 xor     eax, eax
.text:000000000000DFFF                 mov     r15, [rsi+98h]
.text:000000000000E006                 lea     rbp, ds:0[r12*8]
.text:000000000000E00E                 add     r14, rbp
.text:000000000000E011                 cmp     [rsi+0C0h], r12
.text:000000000000E018                 jge     short loc_E060
.text:000000000000E01A                 mov     [r14], rdx
.text:000000000000E01D                 mov     rbp, rdx
.text:000000000000E020                 mov     [rsi+0C0h], r12
.text:000000000000E027
.text:000000000000E027 loc_E027:                               ; CODE XREF: merge_state_with_log+111↓j
.text:000000000000E027                                         ; merge_state_with_log+121↓j ...
.text:000000000000E027                 cmp     qword ptr [r15+98h], 0
.text:000000000000E02F                 jnz     loc_E158
.text:000000000000E035
.text:000000000000E035 loc_E035:                               ; CODE XREF: merge_state_with_log+1B2↓j
.text:000000000000E035                                         ; merge_state_with_log+1D9↓j ...
.text:000000000000E035                 mov     rcx, [rsp+68h+var_40]
.text:000000000000E03A                 xor     rcx, fs:28h
.text:000000000000E043                 mov     rax, rbp
.text:000000000000E046                 jnz     loc_E1B7
.text:000000000000E04C                 add     rsp, 38h
.text:000000000000E050                 pop     rbx
.text:000000000000E051                 pop     rbp
.text:000000000000E052                 pop     r12
.text:000000000000E054                 pop     r13
.text:000000000000E056                 pop     r14
.text:000000000000E058                 pop     r15
.text:000000000000E05A                 retn
.text:000000000000E05A ; ---------------------------------------------------------------------------
.text:000000000000E05B                 align 20h
.text:000000000000E060
.text:000000000000E060 loc_E060:                               ; CODE XREF: merge_state_with_log+48↑j
.text:000000000000E060                 mov     rax, [r14]
.text:000000000000E063                 test    rax, rax
.text:000000000000E066                 jz      loc_E148
.text:000000000000E06C                 test    rdx, rdx
.text:000000000000E06F                 mov     rax, [rax+50h]
.text:000000000000E073                 jz      loc_E100
.text:000000000000E079                 mov     r14, [rdx+50h]
.text:000000000000E07D                 lea     rdi, [rsp+68h+var_58]
.text:000000000000E082                 mov     rdx, rax
.text:000000000000E085                 mov     [rsp+68h+var_68], rdi
.text:000000000000E089                 mov     rsi, r14
.text:000000000000E08C                 call    re_node_set_init_union
.text:000000000000E091                 test    eax, eax
.text:000000000000E093                 mov     [r13+0], eax
.text:000000000000E097                 jnz     loc_E1B0
.text:000000000000E09D                 mov     rax, [rbx+48h]
.text:000000000000E0A1                 mov     edx, [rbx+0A0h]
.text:000000000000E0A7                 mov     rdi, rbx
.text:000000000000E0AA                 lea     rsi, [rax-1]
.text:000000000000E0AE                 call    re_string_context_at
.text:000000000000E0B3                 mov     r8, [rbx+0B8h]
.text:000000000000E0BA                 mov     rdx, [rsp+68h+var_68]
.text:000000000000E0BE                 mov     ecx, eax
.text:000000000000E0C0                 mov     rsi, r15
.text:000000000000E0C3                 mov     rdi, r13
.text:000000000000E0C6                 add     r8, rbp
.text:000000000000E0C9                 mov     [rsp+68h+var_60], r8
.text:000000000000E0CE                 call    re_acquire_state_context
.text:000000000000E0D3                 mov     r8, [rsp+68h+var_60]
.text:000000000000E0D8                 test    r14, r14
.text:000000000000E0DB                 mov     rbp, rax
.text:000000000000E0DE                 mov     [r8], rax
.text:000000000000E0E1                 jz      loc_E027
.text:000000000000E0E7                 mov     rdi, [rsp+68h+ptr] ; ptr
.text:000000000000E0EC                 call    _free
.text:000000000000E0F1                 jmp     loc_E027
.text:000000000000E0F1 ; ---------------------------------------------------------------------------
.text:000000000000E0F6                 align 20h
.text:000000000000E100
.text:000000000000E100 loc_E100:                               ; CODE XREF: merge_state_with_log+A3↑j
.text:000000000000E100                 movdqu  xmm0, xmmword ptr [rax]
.text:000000000000E104                 mov     rdi, rbx
.text:000000000000E107                 mov     edx, [rsi+0A0h]
.text:000000000000E10D                 lea     rsi, [r12-1]
.text:000000000000E112                 movaps  [rsp+68h+var_58], xmm0
.text:000000000000E117                 mov     rax, [rax+10h]
.text:000000000000E11B                 mov     [rsp+68h+ptr], rax
.text:000000000000E120                 call    re_string_context_at
.text:000000000000E125                 lea     rdx, [rsp+68h+var_58]
.text:000000000000E12A                 mov     ecx, eax
.text:000000000000E12C                 mov     rsi, r15
.text:000000000000E12F                 mov     rdi, r13
.text:000000000000E132                 call    re_acquire_state_context
.text:000000000000E137                 mov     rbp, rax
.text:000000000000E13A                 mov     [r14], rax
.text:000000000000E13D                 jmp     loc_E027
.text:000000000000E13D ; ---------------------------------------------------------------------------
.text:000000000000E142                 align 8
.text:000000000000E148
.text:000000000000E148 loc_E148:                               ; CODE XREF: merge_state_with_log+96↑j
.text:000000000000E148                 mov     [r14], rdx
.text:000000000000E14B                 mov     rbp, rdx
.text:000000000000E14E                 jmp     loc_E027
.text:000000000000E14E ; ---------------------------------------------------------------------------
.text:000000000000E153                 align 8
.text:000000000000E158
.text:000000000000E158 loc_E158:                               ; CODE XREF: merge_state_with_log+5F↑j
.text:000000000000E158                 test    rbp, rbp
.text:000000000000E15B                 jz      short loc_E1B0
.text:000000000000E15D                 lea     r14, [rbp+10h]
.text:000000000000E161                 lea     r15, [rbp+18h]
.text:000000000000E165                 mov     rcx, r12
.text:000000000000E168                 mov     rdi, rbx
.text:000000000000E16B                 mov     rdx, r15
.text:000000000000E16E                 mov     rsi, r14
.text:000000000000E171                 call    check_subexp_matching_top_isra_18
.text:000000000000E176                 test    eax, eax
.text:000000000000E178                 mov     [r13+0], eax
.text:000000000000E17C                 jnz     short loc_E1B0
.text:000000000000E17E                 test    byte ptr [rbp+68h], 40h
.text:000000000000E182                 jz      loc_E035
.text:000000000000E188                 mov     rdx, r15
.text:000000000000E18B                 mov     rsi, r14
.text:000000000000E18E                 mov     rdi, rbx
.text:000000000000E191                 call    transit_state_bkref_isra_34
.text:000000000000E196                 test    eax, eax
.text:000000000000E198                 mov     [r13+0], eax
.text:000000000000E19C                 jnz     short loc_E1B0
.text:000000000000E19E                 mov     rax, [rbx+0B8h]
.text:000000000000E1A5                 mov     rbp, [rax+r12*8]
.text:000000000000E1A9                 jmp     loc_E035
.text:000000000000E1A9 ; ---------------------------------------------------------------------------
.text:000000000000E1AE                 align 10h
.text:000000000000E1B0
.text:000000000000E1B0 loc_E1B0:                               ; CODE XREF: merge_state_with_log+C7↑j
.text:000000000000E1B0                                         ; merge_state_with_log+18B↑j ...
.text:000000000000E1B0                 xor     ebp, ebp
.text:000000000000E1B2                 jmp     loc_E035
.text:000000000000E1B7 ; ---------------------------------------------------------------------------
.text:000000000000E1B7
.text:000000000000E1B7 loc_E1B7:                               ; CODE XREF: merge_state_with_log+76↑j
.text:000000000000E1B7                 call    ___stack_chk_fail
.text:000000000000E1B7 ; } // starts at DFD0
.text:000000000000E1B7 merge_state_with_log endp
.text:000000000000E1B7
.text:000000000000E1B7 ; ---------------------------------------------------------------------------
.text:000000000000E1BC                 align 20h
.text:000000000000E1C0
.text:000000000000E1C0 ; =============== S U B R O U T I N E =======================================
.text:000000000000E1C0
.text:000000000000E1C0
.text:000000000000E1C0 sift_states_backward proc near          ; CODE XREF: re_search_internal+9CE↓p
.text:000000000000E1C0                                         ; re_search_internal+1235↓p ...
.text:000000000000E1C0
.text:000000000000E1C0 var_98          = qword ptr -98h
.text:000000000000E1C0 n               = qword ptr -90h
.text:000000000000E1C0 var_88          = qword ptr -88h
.text:000000000000E1C0 var_80          = qword ptr -80h
.text:000000000000E1C0 var_78          = qword ptr -78h
.text:000000000000E1C0 var_6C          = dword ptr -6Ch
.text:000000000000E1C0 var_68          = qword ptr -68h
.text:000000000000E1C0 var_60          = qword ptr -60h
.text:000000000000E1C0 var_58          = qword ptr -58h
.text:000000000000E1C0 var_50          = qword ptr -50h
.text:000000000000E1C0 ptr             = qword ptr -48h
.text:000000000000E1C0 var_40          = qword ptr -40h
.text:000000000000E1C0
.text:000000000000E1C0 ; __unwind {
.text:000000000000E1C0                 push    r15
.text:000000000000E1C2                 push    r14
.text:000000000000E1C4                 mov     r14, rdi
.text:000000000000E1C7                 push    r13
.text:000000000000E1C9                 push    r12
.text:000000000000E1CB                 mov     r13, rsi
.text:000000000000E1CE                 push    rbp
.text:000000000000E1CF                 push    rbx
.text:000000000000E1D0                 sub     rsp, 68h
.text:000000000000E1D4                 mov     r15, [rsi+18h]
.text:000000000000E1D8                 mov     rbx, [rsi+10h]
.text:000000000000E1DC                 mov     [rsp+98h+var_98], rdi
.text:000000000000E1E0                 mov     edi, 8          ; size
.text:000000000000E1E5                 mov     [rsp+98h+var_58], 1
.text:000000000000E1EE                 mov     rax, fs:28h
.text:000000000000E1F7                 mov     [rsp+98h+var_40], rax
.text:000000000000E1FC                 xor     eax, eax
.text:000000000000E1FE                 mov     [rsp+98h+var_50], 1
.text:000000000000E207                 call    _malloc
.text:000000000000E20C                 test    rax, rax
.text:000000000000E20F                 mov     [rsp+98h+ptr], rax
.text:000000000000E214                 jz      loc_E4F4
.text:000000000000E21A                 lea     rcx, [rsp+98h+var_58]
.text:000000000000E21F                 mov     [rax], rbx
.text:000000000000E222                 mov     rdx, r15
.text:000000000000E225                 mov     rsi, r13
.text:000000000000E228                 mov     rdi, r14
.text:000000000000E22B                 mov     [rsp+98h+var_88], rcx
.text:000000000000E230                 call    update_cur_sifted_state
.text:000000000000E235                 test    eax, eax
.text:000000000000E237                 jnz     loc_E4C5
.text:000000000000E23D                 lea     rax, ds:0[r15*8]
.text:000000000000E245                 test    r15, r15
.text:000000000000E248                 mov     [rsp+98h+var_6C], 0
.text:000000000000E250                 mov     [rsp+98h+n], rax
.text:000000000000E255                 lea     rax, [r13+30h]
.text:000000000000E259                 mov     [rsp+98h+var_60], rax
.text:000000000000E25E                 jle     loc_E467
.text:000000000000E264
.text:000000000000E264 loc_E264:                               ; CODE XREF: sift_states_backward+2A1↓j
.text:000000000000E264                 mov     rdi, [r13+0]    ; s
.text:000000000000E268                 mov     rax, [rsp+98h+n]
.text:000000000000E26D                 cmp     qword ptr [rdi+rax], 0
.text:000000000000E272                 jz      loc_E488
.text:000000000000E278                 mov     rax, [rsp+98h+var_98]
.text:000000000000E27C                 mov     [rsp+98h+var_6C], 0
.text:000000000000E284                 mov     ecx, [rsp+98h+var_6C]
.text:000000000000E288                 cmp     [rax+0E0h], ecx
.text:000000000000E28E                 jl      loc_E4A1
.text:000000000000E294
.text:000000000000E294 loc_E294:                               ; CODE XREF: sift_states_backward+2DB↓j
.text:000000000000E294                 mov     rbx, [rsp+98h+var_98]
.text:000000000000E298                 mov     rdi, [rsp+98h+n]
.text:000000000000E29D                 sub     r15, 1
.text:000000000000E2A1                 mov     [rsp+98h+var_50], 0
.text:000000000000E2AA                 mov     rax, [rbx+0B8h]
.text:000000000000E2B1                 mov     r12, [rax+rdi-8]
.text:000000000000E2B6                 test    r12, r12
.text:000000000000E2B9                 jz      loc_E440
.text:000000000000E2BF                 cmp     qword ptr [r12+28h], 0
.text:000000000000E2C5                 mov     r14, [rbx+98h]
.text:000000000000E2CC                 jle     loc_E440
.text:000000000000E2D2                 xor     ebx, ebx
.text:000000000000E2D4                 jmp     loc_E37B
.text:000000000000E2D4 ; ---------------------------------------------------------------------------
.text:000000000000E2D9                 align 20h
.text:000000000000E2E0
.text:000000000000E2E0 loc_E2E0:                               ; CODE XREF: sift_states_backward+1D5↓j
.text:000000000000E2E0                                         ; sift_states_backward+271↓j ...
.text:000000000000E2E0                 mov     rdi, [rsp+98h+var_98]
.text:000000000000E2E4                 mov     rdx, r15
.text:000000000000E2E7                 call    check_node_accept
.text:000000000000E2EC                 test    al, al
.text:000000000000E2EE                 jz      short loc_E36C
.text:000000000000E2F0                 mov     rax, [r13+0]
.text:000000000000E2F4                 mov     rcx, [rsp+98h+n]
.text:000000000000E2F9                 mov     rax, [rax+rcx]
.text:000000000000E2FD                 test    rax, rax
.text:000000000000E300                 jz      short loc_E36C
.text:000000000000E302                 mov     rdx, [r14+18h]
.text:000000000000E306                 mov     rdi, [rax+10h]
.text:000000000000E30A                 lea     rsi, [rax+18h]
.text:000000000000E30E                 mov     rdx, [rdx+rbp*8]
.text:000000000000E312                 call    re_node_set_contains_isra_3
.text:000000000000E317                 test    rax, rax
.text:000000000000E31A                 jz      short loc_E36C
.text:000000000000E31C                 mov     r10d, 1
.text:000000000000E322
.text:000000000000E322 loc_E322:                               ; CODE XREF: sift_states_backward+22B↓j
.text:000000000000E322                                         ; sift_states_backward+260↓j ...
.text:000000000000E322                 cmp     qword ptr [r13+28h], 0
.text:000000000000E327                 jz      short loc_E357
.text:000000000000E329                 mov     rax, [r14+18h]
.text:000000000000E32D                 sub     rsp, 8
.text:000000000000E331                 lea     rsi, [r13+28h]
.text:000000000000E335                 lea     r8, [r10+r15]
.text:000000000000E339                 mov     r9, rbp
.text:000000000000E33C                 mov     rcx, [rax+rbp*8]
.text:000000000000E340                 push    r15
.text:000000000000E342                 mov     rdx, [rsp+0A8h+var_60]
.text:000000000000E347                 mov     rdi, [rsp+0A8h+var_98]
.text:000000000000E34C                 call    check_dst_limits_isra_13
.text:000000000000E351                 test    al, al
.text:000000000000E353                 pop     rdx
.text:000000000000E354                 pop     rcx
.text:000000000000E355                 jnz     short loc_E36C
.text:000000000000E357
.text:000000000000E357 loc_E357:                               ; CODE XREF: sift_states_backward+167↑j
.text:000000000000E357                 mov     rdi, [rsp+98h+var_88]
.text:000000000000E35C                 mov     rsi, rbp
.text:000000000000E35F                 call    re_node_set_insert
.text:000000000000E364                 test    al, al
.text:000000000000E366                 jz      loc_E4C0
.text:000000000000E36C
.text:000000000000E36C loc_E36C:                               ; CODE XREF: sift_states_backward+12E↑j
.text:000000000000E36C                                         ; sift_states_backward+140↑j ...
.text:000000000000E36C                 add     rbx, 1
.text:000000000000E370                 cmp     rbx, [r12+28h]
.text:000000000000E375                 jge     loc_E440
.text:000000000000E37B
.text:000000000000E37B loc_E37B:                               ; CODE XREF: sift_states_backward+114↑j
.text:000000000000E37B                 mov     rax, [r12+30h]
.text:000000000000E380                 mov     rsi, [r14]
.text:000000000000E383                 mov     rbp, [rax+rbx*8]
.text:000000000000E387                 mov     r9, rbp
.text:000000000000E38A                 shl     r9, 4
.text:000000000000E38E                 add     rsi, r9
.text:000000000000E391                 test    byte ptr [rsi+0Ah], 10h
.text:000000000000E395                 jz      loc_E2E0
.text:000000000000E39B                 mov     rcx, [rsp+98h+var_98]
.text:000000000000E39F                 mov     rax, [r13+18h]
.text:000000000000E3A3                 mov     r8, r15
.text:000000000000E3A6                 mov     rdx, rbp
.text:000000000000E3A9                 mov     [rsp+98h+var_80], r9
.text:000000000000E3AE                 mov     r11, [rcx+98h]
.text:000000000000E3B5                 mov     [rsp+98h+var_78], rax
.text:000000000000E3BA                 mov     rdi, [r11]
.text:000000000000E3BD                 lea     rsi, [r11+0D8h]
.text:000000000000E3C4                 mov     [rsp+98h+var_68], r11
.text:000000000000E3C9                 call    check_node_accept_bytes_isra_31
.text:000000000000E3CE                 movsxd  r10, eax
.text:000000000000E3D1                 mov     r9, [rsp+98h+var_80]
.text:000000000000E3D6                 cmp     r10d, 0
.text:000000000000E3DA                 jle     loc_E470
.text:000000000000E3E0                 movsxd  rax, r10d
.text:000000000000E3E3                 add     rax, r15
.text:000000000000E3E6                 cmp     [rsp+98h+var_78], rax
.text:000000000000E3EB                 jl      loc_E322
.text:000000000000E3F1                 mov     rdx, [r13+0]
.text:000000000000E3F5                 mov     r11, [rsp+98h+var_68]
.text:000000000000E3FA                 mov     rax, [rdx+rax*8]
.text:000000000000E3FE                 test    rax, rax
.text:000000000000E401                 jz      short loc_E476
.text:000000000000E403                 mov     rdx, [r11+18h]
.text:000000000000E407                 mov     rdi, [rax+10h]
.text:000000000000E40B                 lea     rsi, [rax+18h]
.text:000000000000E40F                 mov     [rsp+98h+var_80], r9
.text:000000000000E414                 mov     rdx, [rdx+rbp*8]
.text:000000000000E418                 call    re_node_set_contains_isra_3
.text:000000000000E41D                 test    rax, rax
.text:000000000000E420                 jnz     loc_E322
.text:000000000000E426                 mov     r9, [rsp+98h+var_80]
.text:000000000000E42B                 mov     rsi, [r14]
.text:000000000000E42E                 add     rsi, r9
.text:000000000000E431                 jmp     loc_E2E0
.text:000000000000E431 ; ---------------------------------------------------------------------------
.text:000000000000E436                 align 20h
.text:000000000000E440
.text:000000000000E440 loc_E440:                               ; CODE XREF: sift_states_backward+F9↑j
.text:000000000000E440                                         ; sift_states_backward+10C↑j ...
.text:000000000000E440                 mov     rcx, [rsp+98h+var_88]
.text:000000000000E445                 mov     rdi, [rsp+98h+var_98]
.text:000000000000E449                 mov     rdx, r15
.text:000000000000E44C                 mov     rsi, r13
.text:000000000000E44F                 call    update_cur_sifted_state
.text:000000000000E454                 test    eax, eax
.text:000000000000E456                 jnz     short loc_E4C5
.text:000000000000E458                 sub     [rsp+98h+n], 8
.text:000000000000E45E                 test    r15, r15
.text:000000000000E461                 jnz     loc_E264
.text:000000000000E467
.text:000000000000E467 loc_E467:                               ; CODE XREF: sift_states_backward+9E↑j
.text:000000000000E467                 xor     eax, eax
.text:000000000000E469                 jmp     short loc_E4C5
.text:000000000000E469 ; ---------------------------------------------------------------------------
.text:000000000000E46B                 align 10h
.text:000000000000E470
.text:000000000000E470 loc_E470:                               ; CODE XREF: sift_states_backward+21A↑j
.text:000000000000E470                 jnz     loc_E322
.text:000000000000E476
.text:000000000000E476 loc_E476:                               ; CODE XREF: sift_states_backward+241↑j
.text:000000000000E476                 mov     rsi, [r14]
.text:000000000000E479                 add     rsi, r9
.text:000000000000E47C                 jmp     loc_E2E0
.text:000000000000E47C ; ---------------------------------------------------------------------------
.text:000000000000E481                 align 8
.text:000000000000E488
.text:000000000000E488 loc_E488:                               ; CODE XREF: sift_states_backward+B2↑j
.text:000000000000E488                 mov     rax, [rsp+98h+var_98]
.text:000000000000E48C                 add     [rsp+98h+var_6C], 1
.text:000000000000E491                 mov     ecx, [rsp+98h+var_6C]
.text:000000000000E495                 cmp     [rax+0E0h], ecx
.text:000000000000E49B                 jge     loc_E294
.text:000000000000E4A1
.text:000000000000E4A1 loc_E4A1:                               ; CODE XREF: sift_states_backward+CE↑j
.text:000000000000E4A1                 mov     rdx, [rsp+98h+n] ; n
.text:000000000000E4A6                 xor     esi, esi        ; c
.text:000000000000E4A8                 call    _memset
.text:000000000000E4AD                 mov     rdi, [rsp+98h+ptr] ; ptr
.text:000000000000E4B2                 call    _free
.text:000000000000E4B7                 xor     eax, eax
.text:000000000000E4B9                 jmp     short loc_E4D5
.text:000000000000E4B9 ; ---------------------------------------------------------------------------
.text:000000000000E4BB                 align 20h
.text:000000000000E4C0
.text:000000000000E4C0 loc_E4C0:                               ; CODE XREF: sift_states_backward+1A6↑j
.text:000000000000E4C0                 mov     eax, 0Ch
.text:000000000000E4C5
.text:000000000000E4C5 loc_E4C5:                               ; CODE XREF: sift_states_backward+77↑j
.text:000000000000E4C5                                         ; sift_states_backward+296↑j ...
.text:000000000000E4C5                 mov     rdi, [rsp+98h+ptr] ; ptr
.text:000000000000E4CA                 mov     dword ptr [rsp+98h+var_98], eax
.text:000000000000E4CD                 call    _free
.text:000000000000E4D2                 mov     eax, dword ptr [rsp+98h+var_98]
.text:000000000000E4D5
.text:000000000000E4D5 loc_E4D5:                               ; CODE XREF: sift_states_backward+2F9↑j
.text:000000000000E4D5                                         ; sift_states_backward+339↓j
.text:000000000000E4D5                 mov     rdx, [rsp+98h+var_40]
.text:000000000000E4DA                 xor     rdx, fs:28h
.text:000000000000E4E3                 jnz     short loc_E4FB
.text:000000000000E4E5                 add     rsp, 68h
.text:000000000000E4E9                 pop     rbx
.text:000000000000E4EA                 pop     rbp
.text:000000000000E4EB                 pop     r12
.text:000000000000E4ED                 pop     r13
.text:000000000000E4EF                 pop     r14
.text:000000000000E4F1                 pop     r15
.text:000000000000E4F3                 retn
.text:000000000000E4F4 ; ---------------------------------------------------------------------------
.text:000000000000E4F4
.text:000000000000E4F4 loc_E4F4:                               ; CODE XREF: sift_states_backward+54↑j
.text:000000000000E4F4                 mov     eax, 0Ch
.text:000000000000E4F9                 jmp     short loc_E4D5
.text:000000000000E4FB ; ---------------------------------------------------------------------------
.text:000000000000E4FB
.text:000000000000E4FB loc_E4FB:                               ; CODE XREF: sift_states_backward+323↑j
.text:000000000000E4FB                 call    ___stack_chk_fail
.text:000000000000E4FB ; } // starts at E1C0
.text:000000000000E4FB sift_states_backward endp
.text:000000000000E4FB
.text:000000000000E500
.text:000000000000E500 ; =============== S U B R O U T I N E =======================================
.text:000000000000E500
.text:000000000000E500
.text:000000000000E500 re_search_internal proc near            ; CODE XREF: re_search_stub+10A↓p
.text:000000000000E500                                         ; rpl_regexec+58↓p
.text:000000000000E500
.text:000000000000E500 var_268         = qword ptr -268h
.text:000000000000E500 var_260         = qword ptr -260h
.text:000000000000E500 var_258         = qword ptr -258h
.text:000000000000E500 var_250         = qword ptr -250h
.text:000000000000E500 var_248         = qword ptr -248h
.text:000000000000E500 var_240         = qword ptr -240h
.text:000000000000E500 var_238         = qword ptr -238h
.text:000000000000E500 var_230         = qword ptr -230h
.text:000000000000E500 var_228         = qword ptr -228h
.text:000000000000E500 var_220         = qword ptr -220h
.text:000000000000E500 var_218         = qword ptr -218h
.text:000000000000E500 var_210         = dword ptr -210h
.text:000000000000E500 var_20C         = dword ptr -20Ch
.text:000000000000E500 var_208         = qword ptr -208h
.text:000000000000E500 var_200         = qword ptr -200h
.text:000000000000E500 var_1F8         = qword ptr -1F8h
.text:000000000000E500 var_1F0         = qword ptr -1F0h
.text:000000000000E500 var_1E8         = qword ptr -1E8h
.text:000000000000E500 var_1E0         = qword ptr -1E0h
.text:000000000000E500 var_1D8         = qword ptr -1D8h
.text:000000000000E500 var_1D0         = qword ptr -1D0h
.text:000000000000E500 var_1C8         = qword ptr -1C8h
.text:000000000000E500 var_1C0         = dword ptr -1C0h
.text:000000000000E500 var_1BC         = dword ptr -1BCh
.text:000000000000E500 var_1B8         = qword ptr -1B8h
.text:000000000000E500 var_1B0         = qword ptr -1B0h
.text:000000000000E500 var_1A8         = qword ptr -1A8h
.text:000000000000E500 var_1A0         = dword ptr -1A0h
.text:000000000000E500 var_19A         = byte ptr -19Ah
.text:000000000000E500 var_199         = byte ptr -199h
.text:000000000000E500 var_198         = dword ptr -198h
.text:000000000000E500 var_194         = dword ptr -194h
.text:000000000000E500 var_190         = qword ptr -190h
.text:000000000000E500 var_188         = xmmword ptr -188h
.text:000000000000E500 var_178         = qword ptr -178h
.text:000000000000E500 var_170         = qword ptr -170h
.text:000000000000E500 var_168         = xmmword ptr -168h
.text:000000000000E500 ptr             = qword ptr -158h
.text:000000000000E500 var_148         = qword ptr -148h
.text:000000000000E500 var_140         = qword ptr -140h
.text:000000000000E500 var_138         = qword ptr -138h
.text:000000000000E500 var_130         = qword ptr -130h
.text:000000000000E500 var_120         = qword ptr -120h
.text:000000000000E500 var_118         = qword ptr -118h
.text:000000000000E500 var_110         = qword ptr -110h
.text:000000000000E500 var_108         = qword ptr -108h
.text:000000000000E500 var_100         = qword ptr -100h
.text:000000000000E500 var_F8          = qword ptr -0F8h
.text:000000000000E500 var_F0          = qword ptr -0F0h
.text:000000000000E500 var_E8          = qword ptr -0E8h
.text:000000000000E500 var_E0          = qword ptr -0E0h
.text:000000000000E500 var_D8          = dword ptr -0D8h
.text:000000000000E500 var_D0          = qword ptr -0D0h
.text:000000000000E500 var_C8          = qword ptr -0C8h
.text:000000000000E500 var_C0          = byte ptr -0C0h
.text:000000000000E500 var_BF          = byte ptr -0BFh
.text:000000000000E500 var_BE          = byte ptr -0BEh
.text:000000000000E500 var_BD          = byte ptr -0BDh
.text:000000000000E500 var_BC          = byte ptr -0BCh
.text:000000000000E500 var_BB          = byte ptr -0BBh
.text:000000000000E500 var_BA          = byte ptr -0BAh
.text:000000000000E500 var_B8          = dword ptr -0B8h
.text:000000000000E500 var_B0          = qword ptr -0B0h
.text:000000000000E500 var_A8          = dword ptr -0A8h
.text:000000000000E500 var_A0          = qword ptr -0A0h
.text:000000000000E500 var_98          = qword ptr -98h
.text:000000000000E500 var_90          = qword ptr -90h
.text:000000000000E500 var_88          = qword ptr -88h
.text:000000000000E500 var_80          = qword ptr -80h
.text:000000000000E500 var_78          = qword ptr -78h
.text:000000000000E500 var_70          = qword ptr -70h
.text:000000000000E500 var_68          = dword ptr -68h
.text:000000000000E500 var_58          = qword ptr -58h
.text:000000000000E500 var_50          = qword ptr -50h
.text:000000000000E500 var_40          = qword ptr -40h
.text:000000000000E500 arg_0           = qword ptr  8
.text:000000000000E500 arg_8           = qword ptr  10h
.text:000000000000E500 arg_10          = dword ptr  18h
.text:000000000000E500
.text:000000000000E500 ; __unwind {
.text:000000000000E500                 push    r15
.text:000000000000E502                 push    r14
.text:000000000000E504                 push    r13
.text:000000000000E506                 push    r12
.text:000000000000E508                 mov     r13, r9
.text:000000000000E50B                 push    rbp
.text:000000000000E50C                 push    rbx
.text:000000000000E50D                 mov     rbp, rcx
.text:000000000000E510                 mov     ecx, 20h ; ' '
.text:000000000000E515                 mov     r12, r8
.text:000000000000E518                 sub     rsp, 238h
.text:000000000000E51F                 mov     rbx, [rdi]
.text:000000000000E522                 mov     rax, [rsp+268h+arg_8]
.text:000000000000E52A                 mov     [rsp+268h+var_220], rdi
.text:000000000000E52F                 mov     [rsp+268h+var_1F0], rsi
.text:000000000000E534                 mov     rsi, rdi
.text:000000000000E537                 lea     rdi, [rsp+268h+var_148]
.text:000000000000E53F                 mov     [rsp+268h+var_1E0], rdx
.text:000000000000E547                 mov     [rsp+268h+var_230], rbx
.text:000000000000E54C                 mov     [rsp+268h+var_1B0], rax
.text:000000000000E554                 mov     [rsp+268h+var_268], rdi
.text:000000000000E558                 mov     rax, fs:28h
.text:000000000000E561                 mov     [rsp+268h+var_40], rax
.text:000000000000E569                 xor     eax, eax
.text:000000000000E56B                 rep stosq
.text:000000000000E56E                 mov     rdi, [rsi+20h]
.text:000000000000E572                 mov     [rsp+268h+var_B0], rbx
.text:000000000000E57A                 test    rdi, rdi
.text:000000000000E57D                 mov     [rsp+268h+var_200], rdi
.text:000000000000E582                 jz      short loc_E5A6
.text:000000000000E584                 movzx   edx, byte ptr [rsi+38h]
.text:000000000000E588                 test    dl, 8
.text:000000000000E58B                 jz      loc_EA20
.text:000000000000E591                 cmp     rbp, r8
.text:000000000000E594                 jz      loc_EA20
.text:000000000000E59A                 and     edx, 1
.text:000000000000E59D                 cmovz   rax, rdi
.text:000000000000E5A1                 mov     [rsp+268h+var_200], rax
.text:000000000000E5A6
.text:000000000000E5A6 loc_E5A6:                               ; CODE XREF: re_search_internal+82↑j
.text:000000000000E5A6                                         ; re_search_internal+529↓j
.text:000000000000E5A6                 mov     rax, [rsp+268h+var_220]
.text:000000000000E5AB                 mov     [rsp+268h+var_1D0], 0
.text:000000000000E5B7                 mov     rax, [rax+30h]
.text:000000000000E5BB                 cmp     rax, [rsp+268h+arg_0]
.text:000000000000E5C3                 jnb     short loc_E5E4
.text:000000000000E5C5                 mov     rcx, [rsp+268h+arg_0]
.text:000000000000E5CD                 lea     rdx, [rcx-1]
.text:000000000000E5D1                 sub     rdx, rax
.text:000000000000E5D4                 sub     [rsp+268h+arg_0], rdx
.text:000000000000E5DC                 mov     [rsp+268h+var_1D0], rdx
.text:000000000000E5E4
.text:000000000000E5E4 loc_E5E4:                               ; CODE XREF: re_search_internal+C3↑j
.text:000000000000E5E4                 mov     rsi, [rsp+268h+var_220]
.text:000000000000E5E9                 cmp     qword ptr [rsi+10h], 0
.text:000000000000E5EE                 jz      loc_F480
.text:000000000000E5F4                 mov     rdi, [rsp+268h+var_230]
.text:000000000000E5F9                 mov     rax, [rdi+48h]
.text:000000000000E5FD                 test    rax, rax
.text:000000000000E600                 jz      loc_F480
.text:000000000000E606                 mov     rdx, [rdi+50h]
.text:000000000000E60A                 test    rdx, rdx
.text:000000000000E60D                 jz      loc_F480
.text:000000000000E613                 mov     rcx, [rdi+58h]
.text:000000000000E617                 test    rcx, rcx
.text:000000000000E61A                 jz      loc_F480
.text:000000000000E620                 cmp     qword ptr [rdi+60h], 0
.text:000000000000E625                 jz      loc_F480
.text:000000000000E62B                 cmp     qword ptr [rax+10h], 0
.text:000000000000E630                 jnz     short loc_E668
.text:000000000000E632                 cmp     qword ptr [rdx+10h], 0
.text:000000000000E637                 jnz     short loc_E668
.text:000000000000E639                 cmp     qword ptr [rcx+10h], 0
.text:000000000000E63E                 jz      short loc_E646
.text:000000000000E640                 cmp     byte ptr [rsi+38h], 0
.text:000000000000E644                 js      short loc_E668
.text:000000000000E646
.text:000000000000E646 loc_E646:                               ; CODE XREF: re_search_internal+13E↑j
.text:000000000000E646                 test    rbp, rbp
.text:000000000000E649                 jz      short loc_E65C
.text:000000000000E64B                 test    r12, r12
.text:000000000000E64E                 mov     [rsp+268h+var_20C], 1
.text:000000000000E656                 jnz     loc_F079
.text:000000000000E65C
.text:000000000000E65C loc_E65C:                               ; CODE XREF: re_search_internal+149↑j
.text:000000000000E65C                 xor     r12d, r12d
.text:000000000000E65F                 xor     ebp, ebp
.text:000000000000E661                 nop     dword ptr [rax+00000000h]
.text:000000000000E668
.text:000000000000E668 loc_E668:                               ; CODE XREF: re_search_internal+130↑j
.text:000000000000E668                                         ; re_search_internal+137↑j ...
.text:000000000000E668                 cmp     [rsp+268h+arg_0], 0
.text:000000000000E671                 mov     [rsp+268h+var_210], 1
.text:000000000000E679                 jz      loc_EA00
.text:000000000000E67F
.text:000000000000E67F loc_E67F:                               ; CODE XREF: re_search_internal+517↓j
.text:000000000000E67F                 mov     r11, [rsp+268h+var_230]
.text:000000000000E684                 mov     rax, [rsp+268h+var_220]
.text:000000000000E689                 mov     rdi, [rsp+268h+var_1E0]
.text:000000000000E691                 mov     rsi, [r11+10h]
.text:000000000000E695                 mov     rbx, [rax+28h]
.text:000000000000E699                 mov     edx, [r11+0B4h]
.text:000000000000E6A0                 mov     rax, [rax+18h]
.text:000000000000E6A4                 mov     [rsp+268h+var_F0], rdi
.text:000000000000E6AC                 mov     [rsp+268h+var_F8], rdi
.text:000000000000E6B4                 mov     [rsp+268h+var_260], rsi
.text:000000000000E6B9                 lea     rsi, [rsi+1]
.text:000000000000E6BD                 mov     [rsp+268h+var_1B8], rbx
.text:000000000000E6C5                 movsxd  rcx, edx
.text:000000000000E6C8                 shr     rax, 16h
.text:000000000000E6CC                 mov     [rsp+268h+var_D0], rbx
.text:000000000000E6D4                 and     eax, 1
.text:000000000000E6D7                 cmp     rsi, rcx
.text:000000000000E6DA                 mov     [rsp+268h+var_B8], edx
.text:000000000000E6E1                 cmovl   rsi, rcx
.text:000000000000E6E5                 lea     rcx, [rdi+1]
.text:000000000000E6E9                 mov     [rsp+268h+var_C0], al
.text:000000000000E6F0                 mov     [rsp+268h+var_E0], rdi
.text:000000000000E6F8                 mov     [rsp+268h+var_E8], rdi
.text:000000000000E700                 cmp     rsi, rcx
.text:000000000000E703                 mov     rdi, [rsp+268h+var_268]
.text:000000000000E707                 cmovg   rsi, rcx
.text:000000000000E70B                 test    rbx, rbx
.text:000000000000E70E                 mov     rcx, [rsp+268h+var_1F0]
.text:000000000000E713                 setnz   bl
.text:000000000000E716                 or      eax, ebx
.text:000000000000E718                 mov     [rsp+268h+var_BD], al
.text:000000000000E71F                 movzx   eax, byte ptr [r11+0B0h]
.text:000000000000E727                 mov     [rsp+268h+var_148], rcx
.text:000000000000E72F                 mov     edx, eax
.text:000000000000E731                 shr     al, 3
.text:000000000000E734                 shr     dl, 2
.text:000000000000E737                 and     eax, 1
.text:000000000000E73A                 and     edx, 1
.text:000000000000E73D                 mov     [rsp+268h+var_BE], al
.text:000000000000E744                 mov     [rsp+268h+var_BF], dl
.text:000000000000E74B                 call    re_string_realloc_buffers
.text:000000000000E750                 test    eax, eax
.text:000000000000E752                 mov     [rsp+268h+var_20C], eax
.text:000000000000E756                 jnz     loc_F050
.text:000000000000E75C                 mov     rdi, [rsp+268h+var_230]
.text:000000000000E761                 lea     rax, [rdi+0B8h]
.text:000000000000E768                 mov     [rsp+268h+var_C8], rax
.text:000000000000E770                 movzx   eax, byte ptr [rdi+0B0h]
.text:000000000000E777                 mov     byte ptr [rsp+268h+var_260], al
.text:000000000000E77B                 shr     al, 4
.text:000000000000E77E                 and     eax, 1
.text:000000000000E781                 cmp     [rsp+268h+var_BD], 0
.text:000000000000E789                 mov     [rsp+268h+var_BA], al
.text:000000000000E790                 jnz     short loc_E7B5
.text:000000000000E792                 mov     rsi, [rsp+268h+var_230]
.text:000000000000E797                 mov     rax, [rsp+268h+var_1F0]
.text:000000000000E79C                 cmp     dword ptr [rsi+0B4h], 1
.text:000000000000E7A3                 mov     [rsp+268h+var_140], rax
.text:000000000000E7AB                 mov     rax, [rsp+268h+var_1E0]
.text:000000000000E7B3                 jle     short loc_E7B7
.text:000000000000E7B5
.text:000000000000E7B5 loc_E7B5:                               ; CODE XREF: re_search_internal+290↑j
.text:000000000000E7B5                 xor     eax, eax
.text:000000000000E7B7
.text:000000000000E7B7 loc_E7B7:                               ; CODE XREF: re_search_internal+2B3↑j
.text:000000000000E7B7                 mov     [rsp+268h+var_118], rax
.text:000000000000E7BF                 mov     [rsp+268h+var_110], rax
.text:000000000000E7C7                 mov     rax, [rsp+268h+var_220]
.text:000000000000E7CC                 mov     [rsp+268h+var_E0], r13
.text:000000000000E7D4                 mov     [rsp+268h+var_E8], r13
.text:000000000000E7DC                 movzx   eax, byte ptr [rax+38h]
.text:000000000000E7E0                 mov     byte ptr [rsp+268h+var_260], al
.text:000000000000E7E4                 shr     al, 7
.text:000000000000E7E7                 mov     [rsp+268h+var_BB], al
.text:000000000000E7EE                 mov     rax, [rsp+268h+var_230]
.text:000000000000E7F3                 mov     r14, [rax+98h]
.text:000000000000E7FA                 mov     eax, [rsp+268h+arg_10]
.text:000000000000E801                 mov     [rsp+268h+var_A0], 0FFFFFFFFFFFFFFFFh
.text:000000000000E80D                 lea     r13, [r14+r14]
.text:000000000000E811                 mov     [rsp+268h+var_A8], eax
.text:000000000000E818                 test    r13, r13
.text:000000000000E81B                 jle     short loc_E86F
.text:000000000000E81D                 mov     rax, 666666666666666h
.text:000000000000E827                 cmp     r13, rax
.text:000000000000E82A                 jg      loc_F570
.text:000000000000E830                 lea     rdi, [r13+r14*8+0]
.text:000000000000E835                 shl     rdi, 3          ; size
.text:000000000000E839                 call    _malloc
.text:000000000000E83E                 mov     rdi, r14
.text:000000000000E841                 mov     r15, rax
.text:000000000000E844                 mov     [rsp+268h+var_70], rax
.text:000000000000E84C                 shl     rdi, 4          ; size
.text:000000000000E850                 call    _malloc
.text:000000000000E855                 test    rax, rax
.text:000000000000E858                 mov     [rsp+268h+var_50], rax
.text:000000000000E860                 jz      loc_F570
.text:000000000000E866                 test    r15, r15
.text:000000000000E869                 jz      loc_F570
.text:000000000000E86F
.text:000000000000E86F loc_E86F:                               ; CODE XREF: re_search_internal+31B↑j
.text:000000000000E86F                 cmp     [rsp+268h+arg_0], 1
.text:000000000000E878                 mov     [rsp+268h+var_78], r13
.text:000000000000E880                 mov     [rsp+268h+var_68], 1
.text:000000000000E88B                 mov     [rsp+268h+var_58], r13
.text:000000000000E893                 jbe     loc_F9B8
.text:000000000000E899
.text:000000000000E899 loc_E899:                               ; CODE XREF: re_search_internal+14C4↓j
.text:000000000000E899                 mov     rax, [rsp+268h+var_108]
.text:000000000000E8A1                 mov     rdx, 1FFFFFFFFFFFFFFEh
.text:000000000000E8AB                 cmp     rax, rdx
.text:000000000000E8AE                 ja      loc_F570
.text:000000000000E8B4                 lea     rdi, ds:8[rax*8] ; size
.text:000000000000E8BC                 call    _malloc
.text:000000000000E8C1                 test    rax, rax
.text:000000000000E8C4                 mov     rdi, rax
.text:000000000000E8C7                 mov     [rsp+268h+var_90], rax
.text:000000000000E8CF                 jz      loc_F5C0
.text:000000000000E8D5
.text:000000000000E8D5 loc_E8D5:                               ; CODE XREF: re_search_internal+14D6↓j
.text:000000000000E8D5                 mov     eax, [rsp+268h+arg_10]
.text:000000000000E8DC                 mov     [rsp+268h+var_190], rbp
.text:000000000000E8E4                 and     eax, 1
.text:000000000000E8E7                 cmp     eax, 1
.text:000000000000E8EA                 sbb     eax, eax
.text:000000000000E8EC                 and     eax, 2
.text:000000000000E8EF                 add     eax, 4
.text:000000000000E8F2                 mov     [rsp+268h+var_D8], eax
.text:000000000000E8F9                 xor     eax, eax
.text:000000000000E8FB                 cmp     rbp, r12
.text:000000000000E8FE                 setle   al
.text:000000000000E901                 lea     eax, [rax+rax-1]
.text:000000000000E905                 mov     [rsp+268h+var_1BC], eax
.text:000000000000E90C                 mov     rax, r12
.text:000000000000E90F                 cmovle  rax, rbp
.text:000000000000E913                 mov     [rsp+268h+var_1D8], rax
.text:000000000000E91B                 mov     rax, r12
.text:000000000000E91E                 cmovge  rax, rbp
.text:000000000000E922                 cmp     [rsp+268h+var_200], 0
.text:000000000000E928                 mov     [rsp+268h+var_1F8], rax
.text:000000000000E92D                 mov     rax, [rsp+268h+var_230]
.text:000000000000E932                 mov     esi, [rax+0B4h]
.text:000000000000E938                 mov     eax, 8
.text:000000000000E93D                 mov     [rsp+268h+var_1A0], esi
.text:000000000000E944                 jz      short loc_E97F
.text:000000000000E946                 cmp     esi, 1
.text:000000000000E949                 mov     ecx, 4
.text:000000000000E94E                 jz      short loc_E96E
.text:000000000000E950                 mov     rax, [rsp+268h+var_220]
.text:000000000000E955                 test    byte ptr [rax+1Ah], 40h
.text:000000000000E959                 jnz     loc_F6DE
.text:000000000000E95F                 cmp     [rsp+268h+var_1B8], 0
.text:000000000000E968                 jnz     loc_F6DE
.text:000000000000E96E
.text:000000000000E96E loc_E96E:                               ; CODE XREF: re_search_internal+44E↑j
.text:000000000000E96E                                         ; re_search_internal+11E0↓j
.text:000000000000E96E                 xor     edx, edx
.text:000000000000E970                 cmp     rbp, r12
.text:000000000000E973                 movzx   eax, bl
.text:000000000000E976                 setle   dl
.text:000000000000E979                 or      eax, ecx
.text:000000000000E97B                 add     edx, edx
.text:000000000000E97D                 or      eax, edx
.text:000000000000E97F
.text:000000000000E97F loc_E97F:                               ; CODE XREF: re_search_internal+444↑j
.text:000000000000E97F                 cmp     rbp, [rsp+268h+var_1F8]
.text:000000000000E984                 setnle  cl
.text:000000000000E987                 cmp     rbp, [rsp+268h+var_1D8]
.text:000000000000E98F                 setl    dl
.text:000000000000E992                 or      cl, dl
.text:000000000000E994                 jnz     loc_F469
.text:000000000000E99A                 lea     rcx, [rsp+268h+var_190]
.text:000000000000E9A2                 cmp     rbp, r12
.text:000000000000E9A5                 mov     edx, 0
.text:000000000000E9AA                 cmovle  rdx, rcx
.text:000000000000E9AE                 test    rdx, rdx
.text:000000000000E9B1                 mov     [rsp+268h+var_1A8], rdx
.text:000000000000E9B9                 setnz   [rsp+268h+var_199]
.text:000000000000E9C1                 sub     eax, 4
.text:000000000000E9C4                 mov     [rsp+268h+var_1C0], eax
.text:000000000000E9CB                 lea     rax, [rsp+268h+var_198]
.text:000000000000E9D3                 mov     [rsp+268h+var_240], rax
.text:000000000000E9D8
.text:000000000000E9D8 loc_E9D8:                               ; CODE XREF: re_search_internal+F63↓j
.text:000000000000E9D8                 mov     eax, [rsp+268h+var_1C0]
.text:000000000000E9DF                 cmp     eax, 4          ; switch 5 cases
.text:000000000000E9E2                 ja      def_E9F6        ; jumptable 000000000000E9F6 default case
.text:000000000000E9E8                 lea     rcx, jpt_E9F6
.text:000000000000E9EF                 movsxd  rax, ds:(jpt_E9F6 - 15980h)[rcx+rax*4]
.text:000000000000E9F3                 add     rax, rcx
.text:000000000000E9F6                 jmp     rax             ; switch jump
.text:000000000000E9F6 ; ---------------------------------------------------------------------------
.text:000000000000E9F8                 align 20h
.text:000000000000EA00
.text:000000000000EA00 loc_EA00:                               ; CODE XREF: re_search_internal+179↑j
.text:000000000000EA00                 mov     rax, [rsp+268h+var_230]
.text:000000000000EA05                 cmp     qword ptr [rax+98h], 0
.text:000000000000EA0D                 setnz   al
.text:000000000000EA10                 movzx   eax, al
.text:000000000000EA13                 mov     [rsp+268h+var_210], eax
.text:000000000000EA17                 jmp     loc_E67F
.text:000000000000EA17 ; ---------------------------------------------------------------------------
.text:000000000000EA1C                 align 20h
.text:000000000000EA20
.text:000000000000EA20 loc_EA20:                               ; CODE XREF: re_search_internal+8B↑j
.text:000000000000EA20                                         ; re_search_internal+94↑j
.text:000000000000EA20                 mov     [rsp+268h+var_200], 0
.text:000000000000EA29                 jmp     loc_E5A6
.text:000000000000EA2E ; ---------------------------------------------------------------------------
.text:000000000000EA2E
.text:000000000000EA2E loc_EA2E:                               ; CODE XREF: re_search_internal+4F6↑j
.text:000000000000EA2E                                         ; DATA XREF: .rodata:jpt_E9F6↓o
.text:000000000000EA2E                 cmp     [rsp+268h+var_1F8], rbp ; jumptable 000000000000E9F6 case 2
.text:000000000000EA33                 jle     short loc_EA8F
.text:000000000000EA35                 mov     rax, [rsp+268h+var_1F0]
.text:000000000000EA3A                 mov     rdi, [rsp+268h+var_200]
.text:000000000000EA3F                 movzx   edx, byte ptr [rax+rbp]
.text:000000000000EA43                 lea     rax, [rbp+1]
.text:000000000000EA47                 cmp     byte ptr [rdi+rdx], 0
.text:000000000000EA4B                 jnz     loc_EAD8        ; jumptable 000000000000E9F6 case 4
.text:000000000000EA51                 mov     rsi, [rsp+268h+var_200]
.text:000000000000EA56                 mov     rcx, [rsp+268h+var_1F8]
.text:000000000000EA5B                 mov     rdi, [rsp+268h+var_1F0]
.text:000000000000EA60                 jmp     short loc_EA7A
.text:000000000000EA60 ; ---------------------------------------------------------------------------
.text:000000000000EA62                 align 8
.text:000000000000EA68
.text:000000000000EA68 loc_EA68:                               ; CODE XREF: re_search_internal+580↓j
.text:000000000000EA68                 movzx   edx, byte ptr [rdi+rax]
.text:000000000000EA6C                 lea     rax, [rax+1]
.text:000000000000EA70                 cmp     byte ptr [rsi+rdx], 0
.text:000000000000EA74                 jnz     loc_FC11
.text:000000000000EA7A
.text:000000000000EA7A loc_EA7A:                               ; CODE XREF: re_search_internal+560↑j
.text:000000000000EA7A                 cmp     rcx, rax
.text:000000000000EA7D                 mov     rbp, rax
.text:000000000000EA80                 jnz     short loc_EA68
.text:000000000000EA82
.text:000000000000EA82 loc_EA82:                               ; CODE XREF: re_search_internal+ABF↓j
.text:000000000000EA82                 mov     rax, [rsp+268h+var_1F8]
.text:000000000000EA87                 mov     [rsp+268h+var_190], rax
.text:000000000000EA8F
.text:000000000000EA8F loc_EA8F:                               ; CODE XREF: re_search_internal+533↑j
.text:000000000000EA8F                                         ; re_search_internal+A57↓j
.text:000000000000EA8F                 cmp     [rsp+268h+var_1F8], rbp
.text:000000000000EA94                 jnz     short loc_EAD8  ; jumptable 000000000000E9F6 case 4
.text:000000000000EA96                 xor     eax, eax
.text:000000000000EA98                 mov     rsi, [rsp+268h+var_1F8]
.text:000000000000EA9D                 cmp     [rsp+268h+var_1E0], rsi
.text:000000000000EAA5                 jle     short loc_EAB0
.text:000000000000EAA7                 mov     rax, [rsp+268h+var_1F0]
.text:000000000000EAAC                 movzx   eax, byte ptr [rax+rsi]
.text:000000000000EAB0
.text:000000000000EAB0 loc_EAB0:                               ; CODE XREF: re_search_internal+5A5↑j
.text:000000000000EAB0                 mov     rsi, [rsp+268h+var_1B8]
.text:000000000000EAB8                 test    rsi, rsi
.text:000000000000EABB                 jz      short loc_EAC1
.text:000000000000EABD                 movzx   eax, byte ptr [rsi+rax]
.text:000000000000EAC1
.text:000000000000EAC1 loc_EAC1:                               ; CODE XREF: re_search_internal+5BB↑j
.text:000000000000EAC1                 mov     rdi, [rsp+268h+var_200]
.text:000000000000EAC6                 cmp     byte ptr [rdi+rax], 0
.text:000000000000EACA                 jz      loc_F469
.text:000000000000EAD0                 mov     rbp, [rsp+268h+var_1F8]
.text:000000000000EAD5                 nop     dword ptr [rax]
.text:000000000000EAD8
.text:000000000000EAD8 loc_EAD8:                               ; CODE XREF: re_search_internal+4F6↑j
.text:000000000000EAD8                                         ; re_search_internal+54B↑j ...
.text:000000000000EAD8                 mov     edx, [rsp+268h+arg_10] ; jumptable 000000000000E9F6 case 4
.text:000000000000EADF                 mov     rdi, [rsp+268h+var_268]
.text:000000000000EAE3                 mov     rsi, rbp
.text:000000000000EAE6                 call    re_string_reconstruct
.text:000000000000EAEB                 test    eax, eax
.text:000000000000EAED                 mov     [rsp+268h+var_20C], eax
.text:000000000000EAF1                 jnz     loc_F050
.text:000000000000EAF7                 cmp     [rsp+268h+var_1A0], 1
.text:000000000000EAFF                 jz      short loc_EB1D
.text:000000000000EB01                 cmp     [rsp+268h+var_118], 0
.text:000000000000EB0A                 jz      short loc_EB1D
.text:000000000000EB0C                 mov     rax, [rsp+268h+var_138]
.text:000000000000EB14                 cmp     dword ptr [rax], 0FFFFFFFFh
.text:000000000000EB17                 jz      loc_F441
.text:000000000000EB1D
.text:000000000000EB1D loc_EB1D:                               ; CODE XREF: re_search_internal+5FF↑j
.text:000000000000EB1D                                         ; re_search_internal+60A↑j
.text:000000000000EB1D                 mov     rbx, [rsp+268h+var_B0]
.text:000000000000EB25                 movzx   eax, byte ptr [rsp+268h+var_210]
.text:000000000000EB2A                 mov     [rsp+268h+var_68], 0
.text:000000000000EB35                 mov     [rsp+268h+var_80], 0
.text:000000000000EB41                 mov     [rsp+268h+var_88], 0
.text:000000000000EB4D                 mov     [rsp+268h+var_198], 0
.text:000000000000EB58                 mov     r14, [rbx+48h]
.text:000000000000EB5C                 and     eax, 1
.text:000000000000EB5F                 mov     [rsp+268h+var_19A], al
.text:000000000000EB66                 mov     rax, [rsp+268h+var_100]
.text:000000000000EB6E                 cmp     byte ptr [r14+68h], 0
.text:000000000000EB73                 mov     [rsp+268h+var_260], rax
.text:000000000000EB78                 js      loc_F4F0
.text:000000000000EB7E
.text:000000000000EB7E loc_EB7E:                               ; CODE XREF: re_search_internal+1013↓j
.text:000000000000EB7E                                         ; re_search_internal+1177↓j ...
.text:000000000000EB7E                 mov     rax, [rsp+268h+var_90]
.text:000000000000EB86                 test    rax, rax
.text:000000000000EB89                 jz      short loc_EBA2
.text:000000000000EB8B                 cmp     qword ptr [rbx+98h], 0
.text:000000000000EB93                 mov     rdi, [rsp+268h+var_260]
.text:000000000000EB98                 mov     [rax+rdi*8], r14
.text:000000000000EB9C                 jnz     loc_FA8B
.text:000000000000EBA2
.text:000000000000EBA2 loc_EBA2:                               ; CODE XREF: re_search_internal+689↑j
.text:000000000000EBA2                 movzx   eax, [rsp+268h+var_199]
.text:000000000000EBAA                 mov     byte ptr [rsp+268h+var_250], al
.text:000000000000EBAE                 movzx   eax, byte ptr [r14+68h]
.text:000000000000EBB3
.text:000000000000EBB3 loc_EBB3:                               ; CODE XREF: re_search_internal+15C1↓j
.text:000000000000EBB3                 test    al, 10h
.text:000000000000EBB5                 mov     [rsp+268h+var_248], 0FFFFFFFFFFFFFFFFh
.text:000000000000EBBE                 mov     [rsp+268h+var_238], 0
.text:000000000000EBC7                 jnz     loc_FA50
.text:000000000000EBCD
.text:000000000000EBCD loc_EBCD:                               ; CODE XREF: re_search_internal+1576↓j
.text:000000000000EBCD                                         ; re_search_internal+15E4↓j
.text:000000000000EBCD                 mov     rax, [rsp+268h+var_1A8]
.text:000000000000EBD5                 mov     r8, [rsp+268h+var_100]
.text:000000000000EBDD                 mov     [rsp+268h+var_218], rax
.text:000000000000EBE2                 lea     rax, [rsp+268h+var_188]
.text:000000000000EBEA                 mov     [rsp+268h+var_208], rax
.text:000000000000EBEF                 lea     rax, [rsp+268h+var_194]
.text:000000000000EBF7                 mov     [rsp+268h+var_1E8], rax
.text:000000000000EBFF                 jmp     short loc_EC5C
.text:000000000000EBFF ; ---------------------------------------------------------------------------
.text:000000000000EC01                 align 8
.text:000000000000EC08
.text:000000000000EC08 loc_EC08:                               ; CODE XREF: re_search_internal+7E7↓j
.text:000000000000EC08                                         ; re_search_internal+1513↓j ...
.text:000000000000EC08                 cmp     r14, r13
.text:000000000000EC0B                 mov     r8, [rsp+268h+var_100]
.text:000000000000EC13                 setz    al
.text:000000000000EC16                 and     byte ptr [rsp+268h+var_250], al
.text:000000000000EC1A                 movzx   eax, byte ptr [r13+68h]
.text:000000000000EC1F                 cmovz   rbx, [rsp+268h+var_260]
.text:000000000000EC25                 test    al, 10h
.text:000000000000EC27                 mov     [rsp+268h+var_260], rbx
.text:000000000000EC2C                 jz      short loc_EC59
.text:000000000000EC2E                 test    al, al
.text:000000000000EC30                 js      loc_F0F0
.text:000000000000EC36
.text:000000000000EC36 loc_EC36:                               ; CODE XREF: re_search_internal+C17↓j
.text:000000000000EC36                 mov     eax, [rsp+268h+var_210]
.text:000000000000EC3A                 mov     [rsp+268h+var_248], r8
.text:000000000000EC3F                 test    eax, eax
.text:000000000000EC41                 jz      loc_ED66
.text:000000000000EC47                 mov     [rsp+268h+var_238], 1
.text:000000000000EC50                 mov     [rsp+268h+var_218], 0
.text:000000000000EC59
.text:000000000000EC59 loc_EC59:                               ; CODE XREF: re_search_internal+72C↑j
.text:000000000000EC59                                         ; re_search_internal+C11↓j
.text:000000000000EC59                 mov     r14, r13
.text:000000000000EC5C
.text:000000000000EC5C loc_EC5C:                               ; CODE XREF: re_search_internal+6FF↑j
.text:000000000000EC5C                 cmp     [rsp+268h+var_E0], r8
.text:000000000000EC64                 jle     loc_ED54
.text:000000000000EC6A                 mov     rax, [rsp+268h+var_108]
.text:000000000000EC72                 lea     rbx, [r8+1]
.text:000000000000EC76                 cmp     rbx, rax
.text:000000000000EC79                 jge     loc_F120
.text:000000000000EC7F
.text:000000000000EC7F loc_EC7F:                               ; CODE XREF: re_search_internal+C28↓j
.text:000000000000EC7F                 mov     rax, [rsp+268h+var_118]
.text:000000000000EC87                 cmp     rbx, rax
.text:000000000000EC8A                 jge     loc_F410
.text:000000000000EC90
.text:000000000000EC90 loc_EC90:                               ; CODE XREF: re_search_internal+F18↓j
.text:000000000000EC90                 test    byte ptr [r14+68h], 20h
.text:000000000000EC95                 jnz     loc_F160
.text:000000000000EC9B
.text:000000000000EC9B loc_EC9B:                               ; CODE XREF: re_search_internal+C56↓j
.text:000000000000EC9B                                         ; re_search_internal+FA6↓j
.text:000000000000EC9B                 lea     rax, [r8+1]
.text:000000000000EC9F                 mov     [rsp+268h+var_100], rax
.text:000000000000ECA7                 mov     rax, [rsp+268h+var_140]
.text:000000000000ECAF                 movzx   r13d, byte ptr [rax+r8]
.text:000000000000ECB4
.text:000000000000ECB4 loc_ECB4:                               ; CODE XREF: re_search_internal+1097↓j
.text:000000000000ECB4                 mov     rax, [r14+58h]
.text:000000000000ECB8                 test    rax, rax
.text:000000000000ECBB                 jz      loc_F3D0
.text:000000000000ECC1                 mov     r13, [rax+r13*8]
.text:000000000000ECC5
.text:000000000000ECC5 loc_ECC5:                               ; CODE XREF: re_search_internal+F09↓j
.text:000000000000ECC5                                         ; re_search_internal+FB5↓j
.text:000000000000ECC5                 cmp     [rsp+268h+var_90], 0
.text:000000000000ECCE                 jz      short loc_ECE4
.text:000000000000ECD0
.text:000000000000ECD0 loc_ECD0:                               ; CODE XREF: re_search_internal+FE3↓j
.text:000000000000ECD0                 mov     rsi, [rsp+268h+var_268]
.text:000000000000ECD4                 mov     rdi, [rsp+268h+var_240]
.text:000000000000ECD9                 mov     rdx, r13
.text:000000000000ECDC                 call    merge_state_with_log
.text:000000000000ECE1                 mov     r13, rax
.text:000000000000ECE4
.text:000000000000ECE4 loc_ECE4:                               ; CODE XREF: re_search_internal+7CE↑j
.text:000000000000ECE4                 test    r13, r13
.text:000000000000ECE7                 jnz     loc_EC08
.text:000000000000ECED                 mov     ecx, [rsp+268h+var_198]
.text:000000000000ECF4                 mov     rdi, [rsp+268h+var_90]
.text:000000000000ECFC                 test    ecx, ecx
.text:000000000000ECFE                 jnz     loc_F5C0
.text:000000000000ED04                 test    rdi, rdi
.text:000000000000ED07                 jz      short loc_ED54
.text:000000000000ED09                 movzx   eax, [rsp+268h+var_19A]
.text:000000000000ED11                 xor     eax, 1
.text:000000000000ED14                 test    byte ptr [rsp+268h+var_238], al
.text:000000000000ED18                 jnz     short loc_ED54
.text:000000000000ED1A
.text:000000000000ED1A loc_ED1A:                               ; CODE XREF: re_search_internal+BE8↓j
.text:000000000000ED1A                 mov     rsi, [rsp+268h+var_88]
.text:000000000000ED22                 mov     rax, [rsp+268h+var_100]
.text:000000000000ED2A                 xor     ecx, ecx
.text:000000000000ED2C                 jmp     short loc_ED43
.text:000000000000ED2C ; ---------------------------------------------------------------------------
.text:000000000000ED2E                 align 10h
.text:000000000000ED30
.text:000000000000ED30 loc_ED30:                               ; CODE XREF: re_search_internal+84A↓j
.text:000000000000ED30                 cmp     qword ptr [rdi+rdx*8], 0
.text:000000000000ED35                 mov     rax, rdx
.text:000000000000ED38                 mov     ecx, 1
.text:000000000000ED3D                 jnz     loc_F0B0
.text:000000000000ED43
.text:000000000000ED43 loc_ED43:                               ; CODE XREF: re_search_internal+82C↑j
.text:000000000000ED43                 lea     rdx, [rax+1]
.text:000000000000ED47                 cmp     rsi, rdx
.text:000000000000ED4A                 jge     short loc_ED30
.text:000000000000ED4C                 test    cl, cl
.text:000000000000ED4E                 jnz     loc_FC1E
.text:000000000000ED54
.text:000000000000ED54 loc_ED54:                               ; CODE XREF: re_search_internal+764↑j
.text:000000000000ED54                                         ; re_search_internal+807↑j ...
.text:000000000000ED54                 mov     rax, [rsp+268h+var_218]
.text:000000000000ED59                 test    rax, rax
.text:000000000000ED5C                 jz      short loc_ED66
.text:000000000000ED5E                 mov     rdi, [rsp+268h+var_260]
.text:000000000000ED63                 add     [rax], rdi
.text:000000000000ED66
.text:000000000000ED66 loc_ED66:                               ; CODE XREF: re_search_internal+741↑j
.text:000000000000ED66                                         ; re_search_internal+85C↑j ...
.text:000000000000ED66                 mov     rax, [rsp+268h+var_248]
.text:000000000000ED6B                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000ED6F                 jz      loc_F430
.text:000000000000ED75                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:000000000000ED79                 jz      loc_F570
.text:000000000000ED7F                 mov     rax, [rsp+268h+var_248]
.text:000000000000ED84                 mov     [rsp+268h+var_A0], rax
.text:000000000000ED8C                 mov     rax, [rsp+268h+var_220]
.text:000000000000ED91                 test    byte ptr [rax+38h], 10h
.text:000000000000ED95                 jnz     loc_F550
.text:000000000000ED9B                 cmp     [rsp+268h+arg_0], 1
.text:000000000000EDA4                 jbe     loc_F69C
.text:000000000000EDAA                 mov     rcx, [rsp+268h+var_248]
.text:000000000000EDAF                 mov     rbx, [rsp+268h+var_90]
.text:000000000000EDB7                 mov     rdi, [rsp+268h+var_268]
.text:000000000000EDBB                 mov     rax, [rbx+rcx*8]
.text:000000000000EDBF                 mov     rsi, [rax+10h]
.text:000000000000EDC3                 lea     rdx, [rax+18h]
.text:000000000000EDC7                 call    check_halt_state_context_isra_20
.text:000000000000EDCC                 mov     r13, rax
.text:000000000000EDCF                 mov     [rsp+268h+var_98], rax
.text:000000000000EDD7                 mov     rax, [rsp+268h+var_230]
.text:000000000000EDDC                 test    byte ptr [rax+0B0h], 1
.text:000000000000EDE3                 jnz     short loc_EE00
.text:000000000000EDE5                 mov     rax, [rsp+268h+var_230]
.text:000000000000EDEA                 cmp     qword ptr [rax+98h], 0
.text:000000000000EDF2                 jz      loc_F78C
.text:000000000000EDF8
.text:000000000000EDF8 loc_EDF8:                               ; CODE XREF: re_search_internal+11D9↓j
.text:000000000000EDF8                 mov     r13, [rsp+268h+var_98]
.text:000000000000EE00
.text:000000000000EE00 loc_EE00:                               ; CODE XREF: re_search_internal+8E3↑j
.text:000000000000EE00                 mov     rsi, 1FFFFFFFFFFFFFFEh
.text:000000000000EE0A                 cmp     [rsp+268h+var_248], rsi
.text:000000000000EE0F                 mov     r15, [rsp+268h+var_B0]
.text:000000000000EE17                 ja      loc_FA7B
.text:000000000000EE1D                 mov     rax, [rsp+268h+var_248]
.text:000000000000EE22                 add     rax, 1
.text:000000000000EE26                 lea     rbx, ds:0[rax*8]
.text:000000000000EE2E                 mov     [rsp+268h+var_260], rax
.text:000000000000EE33                 mov     rdi, rbx        ; size
.text:000000000000EE36                 call    _malloc
.text:000000000000EE3B                 test    rax, rax
.text:000000000000EE3E                 mov     r12, rax
.text:000000000000EE41                 jz      loc_F570
.text:000000000000EE47                 cmp     qword ptr [r15+98h], 0
.text:000000000000EE4F                 jz      loc_F6E5
.text:000000000000EE55                 mov     rdi, rbx        ; size
.text:000000000000EE58                 call    _malloc
.text:000000000000EE5D                 test    rax, rax
.text:000000000000EE60                 mov     rbp, rax
.text:000000000000EE63                 jz      loc_F568
.text:000000000000EE69                 mov     r14, [rsp+268h+var_248]
.text:000000000000EE6E                 lea     rbx, [rsp+268h+var_188]
.text:000000000000EE76                 mov     [rsp+268h+var_258], r15
.text:000000000000EE7B                 mov     [rsp+268h+var_250], rax
.text:000000000000EE80
.text:000000000000EE80 loc_EE80:                               ; CODE XREF: re_search_internal+A4D↓j
.text:000000000000EE80                 mov     rax, [rsp+268h+var_260]
.text:000000000000EE85                 xor     esi, esi        ; c
.text:000000000000EE87                 mov     rdi, rbp        ; s
.text:000000000000EE8A                 lea     rdx, ds:0[rax*8] ; n
.text:000000000000EE92                 call    _memset
.text:000000000000EE97                 pxor    xmm0, xmm0
.text:000000000000EE9B                 mov     qword ptr [rsp+268h+var_188], r12
.text:000000000000EEA3                 mov     qword ptr [rsp+268h+var_188+8], rbp
.text:000000000000EEAB                 mov     [rsp+268h+var_178], r13
.text:000000000000EEB3                 mov     rsi, rbx
.text:000000000000EEB6                 mov     [rsp+268h+var_170], r14
.text:000000000000EEBE                 mov     rdi, [rsp+268h+var_268]
.text:000000000000EEC2                 movaps  xmmword ptr [rbx+20h], xmm0
.text:000000000000EEC6                 mov     qword ptr [rbx+30h], 0
.text:000000000000EECE                 call    sift_states_backward
.text:000000000000EED3                 mov     rdi, [rsp+268h+ptr] ; ptr
.text:000000000000EEDB                 mov     r15d, eax
.text:000000000000EEDE                 call    _free
.text:000000000000EEE3                 test    r15d, r15d
.text:000000000000EEE6                 jnz     loc_FB04
.text:000000000000EEEC                 cmp     qword ptr [r12], 0
.text:000000000000EEF1                 jnz     loc_FB63
.text:000000000000EEF7                 cmp     qword ptr [rbp+0], 0
.text:000000000000EEFC                 jnz     loc_FB63
.text:000000000000EF02                 mov     rdx, [rsp+268h+var_90]
.text:000000000000EF0A                 nop     word ptr [rax+rax+00h]
.text:000000000000EF10
.text:000000000000EF10 loc_EF10:                               ; CODE XREF: re_search_internal+A25↓j
.text:000000000000EF10                                         ; re_search_internal+A2B↓j
.text:000000000000EF10                 sub     r14, 1
.text:000000000000EF14                 cmp     r14, 0FFFFFFFFFFFFFFFFh
.text:000000000000EF18                 jz      loc_F9DB
.text:000000000000EF1E                 mov     rax, [rdx+r14*8]
.text:000000000000EF22                 test    rax, rax
.text:000000000000EF25                 jz      short loc_EF10
.text:000000000000EF27                 test    byte ptr [rax+68h], 10h
.text:000000000000EF2B                 jz      short loc_EF10
.text:000000000000EF2D                 mov     rsi, [rax+10h]
.text:000000000000EF31                 mov     rdi, [rsp+268h+var_268]
.text:000000000000EF35                 lea     rdx, [rax+18h]
.text:000000000000EF39                 mov     rcx, r14
.text:000000000000EF3C                 call    check_halt_state_context_isra_20
.text:000000000000EF41                 mov     r13, rax
.text:000000000000EF44                 lea     rax, [r14+1]
.text:000000000000EF48                 mov     [rsp+268h+var_260], rax
.text:000000000000EF4D                 jmp     loc_EE80
.text:000000000000EF52 ; ---------------------------------------------------------------------------
.text:000000000000EF52
.text:000000000000EF52 loc_EF52:                               ; CODE XREF: re_search_internal+4F6↑j
.text:000000000000EF52                                         ; DATA XREF: .rodata:jpt_E9F6↓o
.text:000000000000EF52                 cmp     [rsp+268h+var_1F8], rbp ; jumptable 000000000000E9F6 case 3
.text:000000000000EF57                 jle     loc_EA8F
.text:000000000000EF5D                 mov     rax, [rsp+268h+var_1F0]
.text:000000000000EF62                 mov     rdi, [rsp+268h+var_1B8]
.text:000000000000EF6A                 mov     rsi, [rsp+268h+var_200]
.text:000000000000EF6F                 movzx   eax, byte ptr [rax+rbp]
.text:000000000000EF73                 movzx   edx, byte ptr [rdi+rax]
.text:000000000000EF77                 lea     rax, [rbp+1]
.text:000000000000EF7B                 cmp     byte ptr [rsi+rdx], 0
.text:000000000000EF7F                 jnz     loc_EAD8        ; jumptable 000000000000E9F6 case 4
.text:000000000000EF85                 mov     rsi, [rsp+268h+var_200]
.text:000000000000EF8A                 mov     rdi, [rsp+268h+var_1B8]
.text:000000000000EF92                 mov     rcx, [rsp+268h+var_1F8]
.text:000000000000EF97                 mov     r8, [rsp+268h+var_1F0]
.text:000000000000EF9C                 jmp     short loc_EFB7
.text:000000000000EF9C ; ---------------------------------------------------------------------------
.text:000000000000EF9E                 align 20h
.text:000000000000EFA0
.text:000000000000EFA0 loc_EFA0:                               ; CODE XREF: re_search_internal+ABD↓j
.text:000000000000EFA0                 movzx   eax, byte ptr [r8+rax]
.text:000000000000EFA5                 movzx   edx, byte ptr [rdi+rax]
.text:000000000000EFA9                 lea     rax, [rbp+1]
.text:000000000000EFAD                 cmp     byte ptr [rsi+rdx], 0
.text:000000000000EFB1                 jnz     loc_FC11
.text:000000000000EFB7
.text:000000000000EFB7 loc_EFB7:                               ; CODE XREF: re_search_internal+A9C↑j
.text:000000000000EFB7                 cmp     rcx, rax
.text:000000000000EFBA                 mov     rbp, rax
.text:000000000000EFBD                 jnz     short loc_EFA0
.text:000000000000EFBF                 jmp     loc_EA82
.text:000000000000EFC4 ; ---------------------------------------------------------------------------
.text:000000000000EFC4
.text:000000000000EFC4 loc_EFC4:                               ; CODE XREF: re_search_internal+4F6↑j
.text:000000000000EFC4                                         ; DATA XREF: .rodata:jpt_E9F6↓o
.text:000000000000EFC4                 cmp     [rsp+268h+var_1D8], rbp ; jumptable 000000000000E9F6 cases 0,1
.text:000000000000EFCC                 jg      loc_F469
.text:000000000000EFD2                 xor     ecx, ecx
.text:000000000000EFD4                 mov     rax, rbp
.text:000000000000EFD7                 mov     rdi, [rsp+268h+var_200]
.text:000000000000EFDC                 mov     rsi, [rsp+268h+var_1B8]
.text:000000000000EFE4                 mov     r9, [rsp+268h+var_1D8]
.text:000000000000EFEC                 mov     r10, [rsp+268h+var_1F0]
.text:000000000000EFF1                 mov     r8, [rsp+268h+var_1E0]
.text:000000000000EFF9                 jmp     short loc_F012
.text:000000000000EFF9 ; ---------------------------------------------------------------------------
.text:000000000000EFFB                 align 20h
.text:000000000000F000
.text:000000000000F000 loc_F000:                               ; CODE XREF: re_search_internal+B2B↓j
.text:000000000000F000                 sub     rax, 1
.text:000000000000F004                 mov     ecx, 1
.text:000000000000F009                 cmp     rax, r9
.text:000000000000F00C                 jl      loc_F9F0
.text:000000000000F012
.text:000000000000F012 loc_F012:                               ; CODE XREF: re_search_internal+AF9↑j
.text:000000000000F012                 xor     edx, edx
.text:000000000000F014                 cmp     r8, rax
.text:000000000000F017                 jle     short loc_F01E
.text:000000000000F019                 movzx   edx, byte ptr [r10+rax]
.text:000000000000F01E
.text:000000000000F01E loc_F01E:                               ; CODE XREF: re_search_internal+B17↑j
.text:000000000000F01E                 test    rsi, rsi
.text:000000000000F021                 jz      short loc_F027
.text:000000000000F023                 movzx   edx, byte ptr [rsi+rdx]
.text:000000000000F027
.text:000000000000F027 loc_F027:                               ; CODE XREF: re_search_internal+B21↑j
.text:000000000000F027                 cmp     byte ptr [rdi+rdx], 0
.text:000000000000F02B                 jz      short loc_F000
.text:000000000000F02D                 test    cl, cl
.text:000000000000F02F                 jz      loc_EAD8        ; jumptable 000000000000E9F6 case 4
.text:000000000000F035                 mov     [rsp+268h+var_190], rax
.text:000000000000F03D                 mov     rbp, rax
.text:000000000000F040                 jmp     loc_EAD8        ; jumptable 000000000000E9F6 case 4
.text:000000000000F040 ; ---------------------------------------------------------------------------
.text:000000000000F045                 align 8
.text:000000000000F048
.text:000000000000F048 loc_F048:                               ; CODE XREF: re_search_internal+1162↓j
.text:000000000000F048                 mov     [rsp+268h+var_20C], eax
.text:000000000000F04C                 nop     dword ptr [rax+00h]
.text:000000000000F050
.text:000000000000F050 loc_F050:                               ; CODE XREF: re_search_internal+256↑j
.text:000000000000F050                                         ; re_search_internal+5F1↑j ...
.text:000000000000F050                 mov     rdi, [rsp+268h+var_90] ; ptr
.text:000000000000F058
.text:000000000000F058 loc_F058:                               ; CODE XREF: re_search_internal+F79↓j
.text:000000000000F058                                         ; re_search_internal+1080↓j ...
.text:000000000000F058                 call    _free
.text:000000000000F05D                 mov     rax, [rsp+268h+var_230]
.text:000000000000F062                 cmp     qword ptr [rax+98h], 0
.text:000000000000F06A                 jnz     loc_F990
.text:000000000000F070
.text:000000000000F070 loc_F070:                               ; CODE XREF: re_search_internal+14B3↓j
.text:000000000000F070                 mov     rdi, [rsp+268h+var_268]
.text:000000000000F074                 call    re_string_destruct
.text:000000000000F079
.text:000000000000F079 loc_F079:                               ; CODE XREF: re_search_internal+156↑j
.text:000000000000F079                                         ; re_search_internal+F88↓j
.text:000000000000F079                 mov     rsi, [rsp+268h+var_40]
.text:000000000000F081                 xor     rsi, fs:28h
.text:000000000000F08A                 mov     eax, [rsp+268h+var_20C]
.text:000000000000F08E                 jnz     loc_FC2B
.text:000000000000F094                 add     rsp, 238h
.text:000000000000F09B                 pop     rbx
.text:000000000000F09C                 pop     rbp
.text:000000000000F09D                 pop     r12
.text:000000000000F09F                 pop     r13
.text:000000000000F0A1                 pop     r14
.text:000000000000F0A3                 pop     r15
.text:000000000000F0A5                 retn
.text:000000000000F0A5 ; ---------------------------------------------------------------------------
.text:000000000000F0A6                 align 10h
.text:000000000000F0B0
.text:000000000000F0B0 loc_F0B0:                               ; CODE XREF: re_search_internal+83D↑j
.text:000000000000F0B0                 mov     rsi, [rsp+268h+var_268]
.text:000000000000F0B4                 mov     rdi, [rsp+268h+var_240]
.text:000000000000F0B9                 mov     [rsp+268h+var_100], rdx
.text:000000000000F0C1                 xor     edx, edx
.text:000000000000F0C3                 call    merge_state_with_log
.text:000000000000F0C8                 mov     edx, [rsp+268h+var_198]
.text:000000000000F0CF                 test    edx, edx
.text:000000000000F0D1                 jnz     loc_FA0D
.text:000000000000F0D7                 test    rax, rax
.text:000000000000F0DA                 jnz     loc_FA20
.text:000000000000F0E0                 mov     rdi, [rsp+268h+var_90]
.text:000000000000F0E8                 jmp     loc_ED1A
.text:000000000000F0E8 ; ---------------------------------------------------------------------------
.text:000000000000F0ED                 align 10h
.text:000000000000F0F0
.text:000000000000F0F0 loc_F0F0:                               ; CODE XREF: re_search_internal+730↑j
.text:000000000000F0F0                 mov     rsi, [r13+10h]
.text:000000000000F0F4                 mov     rdi, [rsp+268h+var_268]
.text:000000000000F0F8                 lea     rdx, [r13+18h]
.text:000000000000F0FC                 mov     rcx, r8
.text:000000000000F0FF                 mov     [rsp+268h+var_258], r8
.text:000000000000F104                 call    check_halt_state_context_isra_20
.text:000000000000F109                 test    rax, rax
.text:000000000000F10C                 mov     r8, [rsp+268h+var_258]
.text:000000000000F111                 jz      loc_EC59
.text:000000000000F117                 jmp     loc_EC36
.text:000000000000F117 ; ---------------------------------------------------------------------------
.text:000000000000F11C                 align 20h
.text:000000000000F120
.text:000000000000F120 loc_F120:                               ; CODE XREF: re_search_internal+779↑j
.text:000000000000F120                 cmp     rax, [rsp+268h+var_F0]
.text:000000000000F128                 jge     loc_EC7F
.text:000000000000F12E
.text:000000000000F12E loc_F12E:                               ; CODE XREF: re_search_internal+F1E↓j
.text:000000000000F12E                 mov     rdi, [rsp+268h+var_268]
.text:000000000000F132                 lea     esi, [rbx+1]
.text:000000000000F135                 call    extend_buffers
.text:000000000000F13A                 test    eax, eax
.text:000000000000F13C                 mov     [rsp+268h+var_198], eax
.text:000000000000F143                 jnz     loc_FA28
.text:000000000000F149                 test    byte ptr [r14+68h], 20h
.text:000000000000F14E                 mov     r8, [rsp+268h+var_100]
.text:000000000000F156                 jz      loc_EC9B
.text:000000000000F15C                 nop     dword ptr [rax+00h]
.text:000000000000F160
.text:000000000000F160 loc_F160:                               ; CODE XREF: re_search_internal+795↑j
.text:000000000000F160                 cmp     qword ptr [r14+10h], 0
.text:000000000000F165                 mov     r13, [rsp+268h+var_B0]
.text:000000000000F16D                 jle     loc_F49B
.text:000000000000F173                 lea     rax, [r13+0D8h]
.text:000000000000F17A                 xor     r12d, r12d
.text:000000000000F17D                 mov     [rsp+268h+var_1C8], rbx
.text:000000000000F185                 mov     rbx, r12
.text:000000000000F188                 mov     r12, r8
.text:000000000000F18B                 mov     [rsp+268h+var_228], rax
.text:000000000000F190                 jmp     loc_F2E8
.text:000000000000F190 ; ---------------------------------------------------------------------------
.text:000000000000F195                 align 8
.text:000000000000F198
.text:000000000000F198 loc_F198:                               ; CODE XREF: re_search_internal+E3B↓j
.text:000000000000F198                 test    al, 1
.text:000000000000F19A                 jz      loc_F2DA
.text:000000000000F1A0                 and     ecx, 8
.text:000000000000F1A3                 jnz     loc_F2DA
.text:000000000000F1A9
.text:000000000000F1A9 loc_F1A9:                               ; CODE XREF: re_search_internal+E44↓j
.text:000000000000F1A9                                         ; re_search_internal+E4C↓j
.text:000000000000F1A9                 test    dl, 20h
.text:000000000000F1AC                 jz      short loc_F1B6
.text:000000000000F1AE                 test    al, 2
.text:000000000000F1B0                 jz      loc_F2DA
.text:000000000000F1B6
.text:000000000000F1B6 loc_F1B6:                               ; CODE XREF: re_search_internal+CAC↑j
.text:000000000000F1B6                 and     edx, 80h
.text:000000000000F1BC                 jz      short loc_F1D0
.text:000000000000F1BE                 test    al, 8
.text:000000000000F1C0                 jz      loc_F2DA
.text:000000000000F1C6                 db      2Eh
.text:000000000000F1C6                 nop     word ptr [rax+rax+00000000h]
.text:000000000000F1D0
.text:000000000000F1D0 loc_F1D0:                               ; CODE XREF: re_search_internal+CBC↑j
.text:000000000000F1D0                                         ; re_search_internal+E11↓j
.text:000000000000F1D0                 mov     rcx, [rsp+268h+var_268]
.text:000000000000F1D4                 mov     rsi, [rsp+268h+var_228]
.text:000000000000F1D9                 mov     r8, r12
.text:000000000000F1DC                 mov     rdx, r15
.text:000000000000F1DF                 mov     rdi, rbp
.text:000000000000F1E2                 call    check_node_accept_bytes_isra_31
.text:000000000000F1E7                 test    eax, eax
.text:000000000000F1E9                 jz      loc_F2D2
.text:000000000000F1EF                 movsxd  rbp, eax
.text:000000000000F1F2                 add     rbp, [rsp+268h+var_100]
.text:000000000000F1FA                 cmp     [rsp+268h+var_68], eax
.text:000000000000F201                 cmovge  eax, [rsp+268h+var_68]
.text:000000000000F209                 mov     rdi, [rsp+268h+var_268]
.text:000000000000F20D                 mov     rsi, rbp
.text:000000000000F210                 mov     [rsp+268h+var_68], eax
.text:000000000000F217                 call    clean_state_log_if_needed
.text:000000000000F21C                 test    eax, eax
.text:000000000000F21E                 mov     [rsp+268h+var_194], eax
.text:000000000000F225                 jnz     loc_F4C0
.text:000000000000F22B                 mov     rax, [r13+18h]
.text:000000000000F22F                 lea     r12, ds:0[rbp*8]
.text:000000000000F237                 mov     rax, [rax+r15*8]
.text:000000000000F23B                 mov     r15, [rsp+268h+var_90]
.text:000000000000F243                 lea     rdx, [rax+rax*2]
.text:000000000000F247                 mov     rax, [r13+30h]
.text:000000000000F24B                 add     r15, r12
.text:000000000000F24E                 lea     rdx, [rax+rdx*8]
.text:000000000000F252                 mov     rax, [r15]
.text:000000000000F255                 test    rax, rax
.text:000000000000F258                 jz      loc_F358
.text:000000000000F25E                 mov     rsi, [rax+50h]
.text:000000000000F262                 mov     rdi, [rsp+268h+var_208]
.text:000000000000F267                 call    re_node_set_init_union
.text:000000000000F26C                 test    eax, eax
.text:000000000000F26E                 mov     [rsp+268h+var_194], eax
.text:000000000000F275                 jnz     loc_F4C0
.text:000000000000F27B                 mov     edx, [rsp+268h+var_A8]
.text:000000000000F282                 mov     rdi, [rsp+268h+var_268]
.text:000000000000F286                 lea     rsi, [rbp-1]
.text:000000000000F28A                 call    re_string_context_at
.text:000000000000F28F                 mov     rdx, [rsp+268h+var_208]
.text:000000000000F294                 mov     rdi, [rsp+268h+var_1E8]
.text:000000000000F29C                 mov     ecx, eax
.text:000000000000F29E                 add     r12, [rsp+268h+var_90]
.text:000000000000F2A6                 mov     rsi, r13
.text:000000000000F2A9                 call    re_acquire_state_context
.text:000000000000F2AE                 mov     rdi, [rsp+268h+var_178] ; ptr
.text:000000000000F2B6                 mov     [r12], rax
.text:000000000000F2BA                 call    _free
.text:000000000000F2BF                 mov     rdi, [rsp+268h+var_90]
.text:000000000000F2C7                 cmp     qword ptr [rdi+rbp*8], 0
.text:000000000000F2CC                 jz      loc_F3B1
.text:000000000000F2D2
.text:000000000000F2D2 loc_F2D2:                               ; CODE XREF: re_search_internal+CE9↑j
.text:000000000000F2D2                                         ; re_search_internal+EAB↓j ...
.text:000000000000F2D2                 mov     r12, [rsp+268h+var_100]
.text:000000000000F2DA
.text:000000000000F2DA loc_F2DA:                               ; CODE XREF: re_search_internal+C9A↑j
.text:000000000000F2DA                                         ; re_search_internal+CA3↑j ...
.text:000000000000F2DA                 add     rbx, 1
.text:000000000000F2DE                 cmp     rbx, [r14+10h]
.text:000000000000F2E2                 jge     loc_F490
.text:000000000000F2E8
.text:000000000000F2E8 loc_F2E8:                               ; CODE XREF: re_search_internal+C90↑j
.text:000000000000F2E8                 mov     rax, [r14+18h]
.text:000000000000F2EC                 mov     rbp, [r13+0]
.text:000000000000F2F0                 mov     r15, [rax+rbx*8]
.text:000000000000F2F4                 mov     rax, r15
.text:000000000000F2F7                 shl     rax, 4
.text:000000000000F2FB                 add     rax, rbp
.text:000000000000F2FE                 test    byte ptr [rax+0Ah], 10h
.text:000000000000F302                 jz      short loc_F2DA
.text:000000000000F304                 mov     ecx, [rax+8]
.text:000000000000F307                 test    ecx, 3FF00h
.text:000000000000F30D                 mov     dword ptr [rsp+268h+var_258], ecx
.text:000000000000F311                 jz      loc_F1D0
.text:000000000000F317                 mov     edx, [rsp+268h+var_A8]
.text:000000000000F31E                 mov     rdi, [rsp+268h+var_268]
.text:000000000000F322                 mov     rsi, r12
.text:000000000000F325                 call    re_string_context_at
.text:000000000000F32A                 mov     ecx, dword ptr [rsp+268h+var_258]
.text:000000000000F32E                 shr     ecx, 8
.text:000000000000F331                 mov     edx, ecx
.text:000000000000F333                 and     dx, 3FFh
.text:000000000000F338                 test    cl, 4
.text:000000000000F33B                 jnz     loc_F198
.text:000000000000F341                 and     ecx, 8
.text:000000000000F344                 jz      loc_F1A9
.text:000000000000F34A                 test    al, 1
.text:000000000000F34C                 jz      loc_F1A9
.text:000000000000F352                 jmp     short loc_F2DA
.text:000000000000F352 ; ---------------------------------------------------------------------------
.text:000000000000F354                 align 8
.text:000000000000F358
.text:000000000000F358 loc_F358:                               ; CODE XREF: re_search_internal+D58↑j
.text:000000000000F358                 movdqu  xmm0, xmmword ptr [rdx]
.text:000000000000F35C                 lea     rsi, [rbp-1]
.text:000000000000F360                 mov     rdi, [rsp+268h+var_268]
.text:000000000000F364                 movaps  [rsp+268h+var_188], xmm0
.text:000000000000F36C                 mov     rax, [rdx+10h]
.text:000000000000F370                 mov     edx, [rsp+268h+var_A8]
.text:000000000000F377                 mov     [rsp+268h+var_178], rax
.text:000000000000F37F                 call    re_string_context_at
.text:000000000000F384                 mov     rdi, [rsp+268h+var_1E8]
.text:000000000000F38C                 mov     rdx, [rsp+268h+var_208]
.text:000000000000F391                 mov     ecx, eax
.text:000000000000F393                 mov     rsi, r13
.text:000000000000F396                 call    re_acquire_state_context
.text:000000000000F39B                 mov     rdi, [rsp+268h+var_90]
.text:000000000000F3A3                 mov     [r15], rax
.text:000000000000F3A6                 cmp     qword ptr [rdi+rbp*8], 0
.text:000000000000F3AB                 jnz     loc_F2D2
.text:000000000000F3B1
.text:000000000000F3B1 loc_F3B1:                               ; CODE XREF: re_search_internal+DCC↑j
.text:000000000000F3B1                 mov     eax, [rsp+268h+var_194]
.text:000000000000F3B8                 test    eax, eax
.text:000000000000F3BA                 jz      loc_F2D2
.text:000000000000F3C0                 mov     rbx, [rsp+268h+var_1C8]
.text:000000000000F3C8                 jmp     loc_F4D0
.text:000000000000F3C8 ; ---------------------------------------------------------------------------
.text:000000000000F3CD                 align 10h
.text:000000000000F3D0
.text:000000000000F3D0 loc_F3D0:                               ; CODE XREF: re_search_internal+7BB↑j
.text:000000000000F3D0                 mov     rbp, [r14+60h]
.text:000000000000F3D4                 test    rbp, rbp
.text:000000000000F3D7                 jz      loc_F585
.text:000000000000F3DD                 mov     rax, [rsp+268h+var_100]
.text:000000000000F3E5                 mov     edx, [rsp+268h+var_A8]
.text:000000000000F3EC                 mov     rdi, [rsp+268h+var_268]
.text:000000000000F3F0                 lea     rsi, [rax-1]
.text:000000000000F3F4                 call    re_string_context_at
.text:000000000000F3F9                 test    al, 1
.text:000000000000F3FB                 jz      loc_F4B0
.text:000000000000F401                 mov     r13, [rbp+r13*8+800h]
.text:000000000000F409                 jmp     loc_ECC5
.text:000000000000F409 ; ---------------------------------------------------------------------------
.text:000000000000F40E                 align 10h
.text:000000000000F410
.text:000000000000F410 loc_F410:                               ; CODE XREF: re_search_internal+78A↑j
.text:000000000000F410                 cmp     rax, [rsp+268h+var_F0]
.text:000000000000F418                 jge     loc_EC90
.text:000000000000F41E                 jmp     loc_F12E
.text:000000000000F423 ; ---------------------------------------------------------------------------
.text:000000000000F423
.text:000000000000F423 loc_F423:                               ; CODE XREF: re_search_internal+125C↓j
.text:000000000000F423                 mov     rdi, r12        ; ptr
.text:000000000000F426                 call    _free
.text:000000000000F42B                 nop     dword ptr [rax+rax+00h]
.text:000000000000F430
.text:000000000000F430 loc_F430:                               ; CODE XREF: re_search_internal+86F↑j
.text:000000000000F430                                         ; re_search_internal+14EB↓j ...
.text:000000000000F430                 mov     rdi, [rsp+268h+var_268]
.text:000000000000F434                 call    match_ctx_clean
.text:000000000000F439                 mov     rbp, [rsp+268h+var_190]
.text:000000000000F441
.text:000000000000F441 loc_F441:                               ; CODE XREF: re_search_internal+617↑j
.text:000000000000F441                 movsxd  rax, [rsp+268h+var_1BC]
.text:000000000000F449                 add     rbp, rax
.text:000000000000F44C                 cmp     rbp, [rsp+268h+var_1D8]
.text:000000000000F454                 mov     [rsp+268h+var_190], rbp
.text:000000000000F45C                 jl      short loc_F469
.text:000000000000F45E                 cmp     rbp, [rsp+268h+var_1F8]
.text:000000000000F463                 jle     loc_E9D8
.text:000000000000F469
.text:000000000000F469 loc_F469:                               ; CODE XREF: re_search_internal+494↑j
.text:000000000000F469                                         ; re_search_internal+5CA↑j ...
.text:000000000000F469                 mov     rdi, [rsp+268h+var_90]
.text:000000000000F471                 mov     [rsp+268h+var_20C], 1
.text:000000000000F479                 jmp     loc_F058
.text:000000000000F479 ; ---------------------------------------------------------------------------
.text:000000000000F47E                 align 20h
.text:000000000000F480
.text:000000000000F480 loc_F480:                               ; CODE XREF: re_search_internal+EE↑j
.text:000000000000F480                                         ; re_search_internal+100↑j ...
.text:000000000000F480                 mov     [rsp+268h+var_20C], 1
.text:000000000000F488                 jmp     loc_F079
.text:000000000000F488 ; ---------------------------------------------------------------------------
.text:000000000000F48D                 align 10h
.text:000000000000F490
.text:000000000000F490 loc_F490:                               ; CODE XREF: re_search_internal+DE2↑j
.text:000000000000F490                 mov     rbx, [rsp+268h+var_1C8]
.text:000000000000F498                 mov     r8, r12
.text:000000000000F49B
.text:000000000000F49B loc_F49B:                               ; CODE XREF: re_search_internal+C6D↑j
.text:000000000000F49B                 mov     [rsp+268h+var_198], 0
.text:000000000000F4A6                 jmp     loc_EC9B
.text:000000000000F4A6 ; ---------------------------------------------------------------------------
.text:000000000000F4AB                 align 10h
.text:000000000000F4B0
.text:000000000000F4B0 loc_F4B0:                               ; CODE XREF: re_search_internal+EFB↑j
.text:000000000000F4B0                 mov     r13, [rbp+r13*8+0]
.text:000000000000F4B5                 jmp     loc_ECC5
.text:000000000000F4B5 ; ---------------------------------------------------------------------------
.text:000000000000F4BA                 align 20h
.text:000000000000F4C0
.text:000000000000F4C0 loc_F4C0:                               ; CODE XREF: re_search_internal+D25↑j
.text:000000000000F4C0                                         ; re_search_internal+D75↑j
.text:000000000000F4C0                 mov     rbx, [rsp+268h+var_1C8]
.text:000000000000F4C8                 mov     rdi, [rsp+268h+var_90]
.text:000000000000F4D0
.text:000000000000F4D0 loc_F4D0:                               ; CODE XREF: re_search_internal+EC8↑j
.text:000000000000F4D0                 test    rdi, rdi
.text:000000000000F4D3                 mov     [rsp+268h+var_198], eax
.text:000000000000F4DA                 jz      loc_F5C0
.text:000000000000F4E0
.text:000000000000F4E0 loc_F4E0:                               ; CODE XREF: re_search_internal+10B3↓j
.text:000000000000F4E0                 xor     r13d, r13d
.text:000000000000F4E3                 jmp     loc_ECD0
.text:000000000000F4E3 ; ---------------------------------------------------------------------------
.text:000000000000F4E8                 align 10h
.text:000000000000F4F0
.text:000000000000F4F0 loc_F4F0:                               ; CODE XREF: re_search_internal+678↑j
.text:000000000000F4F0                 mov     edx, [rsp+268h+var_A8]
.text:000000000000F4F7                 mov     rdi, [rsp+268h+var_268]
.text:000000000000F4FB                 lea     rsi, [rax-1]
.text:000000000000F4FF                 call    re_string_context_at
.text:000000000000F504                 test    al, 1
.text:000000000000F506                 jz      loc_F675
.text:000000000000F50C                 mov     r14, [rbx+50h]
.text:000000000000F510
.text:000000000000F510 loc_F510:                               ; CODE XREF: re_search_internal+1197↓j
.text:000000000000F510                                         ; re_search_internal+15F3↓j ...
.text:000000000000F510                 test    r14, r14
.text:000000000000F513                 jnz     loc_EB7E
.text:000000000000F519                 mov     eax, [rsp+268h+var_198]
.text:000000000000F520                 cmp     eax, 0Ch
.text:000000000000F523                 mov     [rsp+268h+var_20C], eax
.text:000000000000F527                 jz      loc_F050
.text:000000000000F52D                 lea     rcx, __PRETTY_FUNCTION___7972 ; "check_matching"
.text:000000000000F534                 lea     rsi, aCoreutils831Li_0 ; "../coreutils-8.31/lib/regexec.c"
.text:000000000000F53B                 lea     rdi, aErrRegEspace ; "err == REG_ESPACE"
.text:000000000000F542                 mov     edx, 435h       ; line
.text:000000000000F547                 call    ___assert_fail
.text:000000000000F547 ; ---------------------------------------------------------------------------
.text:000000000000F54C                 align 10h
.text:000000000000F550
.text:000000000000F550 loc_F550:                               ; CODE XREF: re_search_internal+895↑j
.text:000000000000F550                 mov     rax, [rsp+268h+var_230]
.text:000000000000F555                 cmp     qword ptr [rax+98h], 0
.text:000000000000F55D                 jz      loc_F78C
.text:000000000000F563                 jmp     loc_F6AF
.text:000000000000F568 ; ---------------------------------------------------------------------------
.text:000000000000F568
.text:000000000000F568 loc_F568:                               ; CODE XREF: re_search_internal+963↑j
.text:000000000000F568                 mov     rdi, r12        ; ptr
.text:000000000000F56B                 call    _free
.text:000000000000F570
.text:000000000000F570 loc_F570:                               ; CODE XREF: re_search_internal+32A↑j
.text:000000000000F570                                         ; re_search_internal+360↑j ...
.text:000000000000F570                 mov     rdi, [rsp+268h+var_90]
.text:000000000000F578                 mov     [rsp+268h+var_20C], 0Ch
.text:000000000000F580                 jmp     loc_F058
.text:000000000000F585 ; ---------------------------------------------------------------------------
.text:000000000000F585
.text:000000000000F585 loc_F585:                               ; CODE XREF: re_search_internal+ED7↑j
.text:000000000000F585                 mov     rdi, [rsp+268h+var_B0]
.text:000000000000F58D                 mov     rsi, r14
.text:000000000000F590                 call    build_trtable
.text:000000000000F595                 test    al, al
.text:000000000000F597                 jnz     loc_ECB4
.text:000000000000F59D                 mov     rdi, [rsp+268h+var_90]
.text:000000000000F5A5                 mov     [rsp+268h+var_198], 0Ch
.text:000000000000F5B0                 test    rdi, rdi
.text:000000000000F5B3                 jnz     loc_F4E0
.text:000000000000F5B9                 nop     dword ptr [rax+00000000h]
.text:000000000000F5C0
.text:000000000000F5C0 loc_F5C0:                               ; CODE XREF: re_search_internal+3CF↑j
.text:000000000000F5C0                                         ; re_search_internal+7FE↑j ...
.text:000000000000F5C0                 mov     [rsp+268h+var_20C], 0Ch
.text:000000000000F5C8                 jmp     loc_F058
.text:000000000000F5CD ; ---------------------------------------------------------------------------
.text:000000000000F5CD
.text:000000000000F5CD def_E9F6:                               ; CODE XREF: re_search_internal+4E2↑j
.text:000000000000F5CD                 mov     rbx, [rsp+268h+var_200] ; jumptable 000000000000E9F6 default case
.text:000000000000F5D2                 mov     r13d, [rsp+268h+var_1BC]
.text:000000000000F5DA                 mov     r14, [rsp+268h+var_1D8]
.text:000000000000F5E2                 mov     r15, [rsp+268h+var_1F8]
.text:000000000000F5E7                 mov     r12, [rsp+268h+var_1E0]
.text:000000000000F5EF                 jmp     short loc_F638
.text:000000000000F5EF ; ---------------------------------------------------------------------------
.text:000000000000F5F1                 align 8
.text:000000000000F5F8
.text:000000000000F5F8 loc_F5F8:                               ; CODE XREF: re_search_internal+114B↓j
.text:000000000000F5F8                                         ; re_search_internal+1173↓j
.text:000000000000F5F8                 cmp     r12, rbp
.text:000000000000F5FB                 mov     rax, rbx
.text:000000000000F5FE                 jle     short loc_F60F
.text:000000000000F600                 mov     rax, [rsp+268h+var_140]
.text:000000000000F608                 movzx   eax, byte ptr [rax+rdx]
.text:000000000000F60C                 add     rax, rbx
.text:000000000000F60F
.text:000000000000F60F loc_F60F:                               ; CODE XREF: re_search_internal+10FE↑j
.text:000000000000F60F                 cmp     byte ptr [rax], 0
.text:000000000000F612                 jnz     loc_EAD8        ; jumptable 000000000000E9F6 case 4
.text:000000000000F618                 movsxd  rax, r13d
.text:000000000000F61B                 add     rbp, rax
.text:000000000000F61E                 cmp     rbp, r14
.text:000000000000F621                 mov     [rsp+268h+var_190], rbp
.text:000000000000F629                 jl      loc_F469
.text:000000000000F62F                 cmp     rbp, r15
.text:000000000000F632                 jg      loc_F469
.text:000000000000F638
.text:000000000000F638 loc_F638:                               ; CODE XREF: re_search_internal+10EF↑j
.text:000000000000F638                 mov     rdx, rbp
.text:000000000000F63B                 sub     rdx, [rsp+268h+var_120]
.text:000000000000F643                 cmp     [rsp+268h+var_110], rdx
.text:000000000000F64B                 ja      short loc_F5F8
.text:000000000000F64D                 mov     edx, [rsp+268h+arg_10]
.text:000000000000F654                 mov     rdi, [rsp+268h+var_268]
.text:000000000000F658                 mov     rsi, rbp
.text:000000000000F65B                 call    re_string_reconstruct
.text:000000000000F660                 test    eax, eax
.text:000000000000F662                 jnz     loc_F048
.text:000000000000F668                 mov     rdx, rbp
.text:000000000000F66B                 sub     rdx, [rsp+268h+var_120]
.text:000000000000F673                 jmp     short loc_F5F8
.text:000000000000F675 ; ---------------------------------------------------------------------------
.text:000000000000F675
.text:000000000000F675 loc_F675:                               ; CODE XREF: re_search_internal+1006↑j
.text:000000000000F675                 test    eax, eax
.text:000000000000F677                 jz      loc_EB7E
.text:000000000000F67D                 mov     edx, eax
.text:000000000000F67F                 and     edx, 6
.text:000000000000F682                 cmp     edx, 6
.text:000000000000F685                 jz      loc_FAEF
.text:000000000000F68B                 test    al, 2
.text:000000000000F68D                 jz      loc_FB40
.text:000000000000F693                 mov     r14, [rbx+58h]
.text:000000000000F697                 jmp     loc_F510
.text:000000000000F69C ; ---------------------------------------------------------------------------
.text:000000000000F69C
.text:000000000000F69C loc_F69C:                               ; CODE XREF: re_search_internal+8A4↑j
.text:000000000000F69C                 mov     rax, [rsp+268h+var_230]
.text:000000000000F6A1                 cmp     qword ptr [rax+98h], 0
.text:000000000000F6A9                 jz      loc_F78C
.text:000000000000F6AF
.text:000000000000F6AF loc_F6AF:                               ; CODE XREF: re_search_internal+1063↑j
.text:000000000000F6AF                 mov     rcx, [rsp+268h+var_248]
.text:000000000000F6B4                 mov     rbx, [rsp+268h+var_90]
.text:000000000000F6BC                 mov     rdi, [rsp+268h+var_268]
.text:000000000000F6C0                 mov     rax, [rbx+rcx*8]
.text:000000000000F6C4                 mov     rsi, [rax+10h]
.text:000000000000F6C8                 lea     rdx, [rax+18h]
.text:000000000000F6CC                 call    check_halt_state_context_isra_20
.text:000000000000F6D1                 mov     [rsp+268h+var_98], rax
.text:000000000000F6D9                 jmp     loc_EDF8
.text:000000000000F6DE ; ---------------------------------------------------------------------------
.text:000000000000F6DE
.text:000000000000F6DE loc_F6DE:                               ; CODE XREF: re_search_internal+459↑j
.text:000000000000F6DE                                         ; re_search_internal+468↑j
.text:000000000000F6DE                 xor     ecx, ecx
.text:000000000000F6E0                 jmp     loc_E96E
.text:000000000000F6E5 ; ---------------------------------------------------------------------------
.text:000000000000F6E5
.text:000000000000F6E5 loc_F6E5:                               ; CODE XREF: re_search_internal+94F↑j
.text:000000000000F6E5                 pxor    xmm0, xmm0
.text:000000000000F6E9                 mov     qword ptr [rsp+268h+var_188], rax
.text:000000000000F6F1                 mov     rdi, [rsp+268h+var_268]
.text:000000000000F6F5                 mov     rax, [rsp+268h+var_248]
.text:000000000000F6FA                 lea     rbx, [rsp+268h+var_188]
.text:000000000000F702                 mov     qword ptr [rsp+268h+var_188+8], 0
.text:000000000000F70E                 mov     [rsp+268h+var_178], r13
.text:000000000000F716                 mov     rsi, rbx
.text:000000000000F719                 mov     [rsp+268h+ptr], 0
.text:000000000000F725                 movaps  [rsp+268h+var_168], xmm0
.text:000000000000F72D                 mov     [rsp+268h+var_170], rax
.text:000000000000F735                 call    sift_states_backward
.text:000000000000F73A                 mov     rdi, [rsp+268h+ptr] ; ptr
.text:000000000000F742                 mov     dword ptr [rsp+268h+var_260], eax
.text:000000000000F746                 call    _free
.text:000000000000F74B                 mov     eax, dword ptr [rsp+268h+var_260]
.text:000000000000F74F                 test    eax, eax
.text:000000000000F751                 jnz     loc_FB98
.text:000000000000F757                 cmp     qword ptr [r12], 0
.text:000000000000F75C                 jz      loc_F423
.text:000000000000F762
.text:000000000000F762 loc_F762:                               ; CODE XREF: re_search_internal+1692↓j
.text:000000000000F762                 mov     rdi, [rsp+268h+var_90] ; ptr
.text:000000000000F76A                 call    _free
.text:000000000000F76F                 mov     rax, [rsp+268h+var_248]
.text:000000000000F774                 mov     [rsp+268h+var_90], r12
.text:000000000000F77C                 mov     [rsp+268h+var_98], r13
.text:000000000000F784                 mov     [rsp+268h+var_A0], rax
.text:000000000000F78C
.text:000000000000F78C loc_F78C:                               ; CODE XREF: re_search_internal+8F2↑j
.text:000000000000F78C                                         ; re_search_internal+105D↑j ...
.text:000000000000F78C                 cmp     [rsp+268h+arg_0], 0
.text:000000000000F795                 jz      loc_F050
.text:000000000000F79B                 cmp     [rsp+268h+arg_0], 1
.text:000000000000F7A4                 jz      loc_FBC8
.text:000000000000F7AA                 mov     rsi, [rsp+268h+var_1B0]
.text:000000000000F7B2                 mov     rcx, [rsp+268h+arg_0]
.text:000000000000F7BA                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000F7C1                 shl     rcx, 4
.text:000000000000F7C5                 lea     rax, [rsi+10h]
.text:000000000000F7C9                 add     rcx, rsi
.text:000000000000F7CC
.text:000000000000F7CC loc_F7CC:                               ; CODE XREF: re_search_internal+12DA↓j
.text:000000000000F7CC                 mov     [rax+8], rdx
.text:000000000000F7D0                 mov     [rax], rdx
.text:000000000000F7D3                 add     rax, 10h
.text:000000000000F7D7                 cmp     rcx, rax
.text:000000000000F7DA                 jnz     short loc_F7CC
.text:000000000000F7DC                 mov     rdi, [rsp+268h+var_1B0]
.text:000000000000F7E4                 mov     rax, [rsp+268h+var_A0]
.text:000000000000F7EC                 mov     [rdi+8], rax
.text:000000000000F7F0                 mov     rax, [rsp+268h+var_220]
.text:000000000000F7F5                 mov     qword ptr [rdi], 0
.text:000000000000F7FC                 test    byte ptr [rax+38h], 10h
.text:000000000000F800                 jnz     loc_FBE3
.text:000000000000F806                 cmp     [rsp+268h+arg_0], 1
.text:000000000000F80F                 jz      loc_FBE3
.text:000000000000F815                 mov     rax, [rsp+268h+var_230]
.text:000000000000F81A                 xor     r8d, r8d
.text:000000000000F81D                 test    byte ptr [rax+0B0h], 1
.text:000000000000F824                 jz      short loc_F835
.text:000000000000F826                 xor     r8d, r8d
.text:000000000000F829                 cmp     qword ptr [rax+98h], 0
.text:000000000000F831                 setnle  r8b
.text:000000000000F835
.text:000000000000F835 loc_F835:                               ; CODE XREF: re_search_internal+1324↑j
.text:000000000000F835                 mov     rbx, [rsp+268h+var_1B0]
.text:000000000000F83D                 mov     rdx, [rsp+268h+arg_0]
.text:000000000000F845                 mov     rsi, [rsp+268h+var_268]
.text:000000000000F849                 mov     rdi, [rsp+268h+var_220]
.text:000000000000F84E                 mov     rcx, rbx
.text:000000000000F851                 call    set_regs
.text:000000000000F856                 test    eax, eax
.text:000000000000F858                 jnz     loc_FB2D
.text:000000000000F85E                 mov     rax, [rbx]
.text:000000000000F861
.text:000000000000F861 loc_F861:                               ; CODE XREF: re_search_internal+16E5↓j
.text:000000000000F861                 movzx   r11d, [rsp+268h+var_BC]
.text:000000000000F86A                 mov     r10, [rsp+268h+var_118]
.text:000000000000F872                 xor     ecx, ecx
.text:000000000000F874                 mov     r9, [rsp+268h+var_130]
.text:000000000000F87C                 mov     r8, [rsp+268h+var_110]
.text:000000000000F884                 mov     rdi, [rsp+268h+var_190]
.text:000000000000F88C                 mov     rdx, [rsp+268h+var_1B0]
.text:000000000000F894                 jmp     short loc_F899
.text:000000000000F896 ; ---------------------------------------------------------------------------
.text:000000000000F896
.text:000000000000F896 loc_F896:                               ; CODE XREF: re_search_internal+13C9↓j
.text:000000000000F896                 mov     rax, [rdx]
.text:000000000000F899
.text:000000000000F899 loc_F899:                               ; CODE XREF: re_search_internal+1394↑j
.text:000000000000F899                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000F89D                 jz      short loc_F8B9
.text:000000000000F89F                 test    r11b, r11b
.text:000000000000F8A2                 mov     rsi, [rdx+8]
.text:000000000000F8A6                 jnz     loc_FBEA
.text:000000000000F8AC
.text:000000000000F8AC loc_F8AC:                               ; CODE XREF: re_search_internal+16FF↓j
.text:000000000000F8AC                                         ; re_search_internal+1707↓j
.text:000000000000F8AC                 add     rax, rdi
.text:000000000000F8AF                 add     rsi, rdi
.text:000000000000F8B2                 mov     [rdx], rax
.text:000000000000F8B5                 mov     [rdx+8], rsi
.text:000000000000F8B9
.text:000000000000F8B9 loc_F8B9:                               ; CODE XREF: re_search_internal+139D↑j
.text:000000000000F8B9                 add     rcx, 1
.text:000000000000F8BD                 add     rdx, 10h
.text:000000000000F8C1                 cmp     rcx, [rsp+268h+arg_0]
.text:000000000000F8C9                 jnz     short loc_F896
.text:000000000000F8CB                 cmp     [rsp+268h+var_1D0], 0
.text:000000000000F8D4                 jle     short loc_F915
.text:000000000000F8D6                 mov     rdx, [rsp+268h+var_1D0]
.text:000000000000F8DE                 mov     rdi, [rsp+268h+var_1B0]
.text:000000000000F8E6                 mov     rax, rcx
.text:000000000000F8E9                 shl     rax, 4
.text:000000000000F8ED                 add     rdx, rcx
.text:000000000000F8F0                 lea     rax, [rdi+rax+8]
.text:000000000000F8F5                 shl     rdx, 4
.text:000000000000F8F9                 lea     rsi, [rdi+rdx+8]
.text:000000000000F8FE                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000F905
.text:000000000000F905 loc_F905:                               ; CODE XREF: re_search_internal+1413↓j
.text:000000000000F905                 mov     [rax-8], rdx
.text:000000000000F909                 mov     [rax], rdx
.text:000000000000F90C                 add     rax, 10h
.text:000000000000F910                 cmp     rsi, rax
.text:000000000000F913                 jnz     short loc_F905
.text:000000000000F915
.text:000000000000F915 loc_F915:                               ; CODE XREF: re_search_internal+13D4↑j
.text:000000000000F915                 mov     rax, [rsp+268h+var_230]
.text:000000000000F91A                 mov     rdi, [rsp+268h+var_90]
.text:000000000000F922                 mov     r9, [rax+0E0h]
.text:000000000000F929                 test    r9, r9
.text:000000000000F92C                 jz      loc_F058
.text:000000000000F932                 mov     r10, [rsp+268h+var_1B0]
.text:000000000000F93A                 xor     r8d, r8d
.text:000000000000F93D                 lea     rdx, [r10+10h]
.text:000000000000F941                 jmp     short loc_F979
.text:000000000000F943 ; ---------------------------------------------------------------------------
.text:000000000000F943
.text:000000000000F943 loc_F943:                               ; CODE XREF: re_search_internal+1480↓j
.text:000000000000F943                 mov     rax, [r9+rsi*8-8]
.text:000000000000F948                 cmp     rax, r8
.text:000000000000F94B                 jz      short loc_F972
.text:000000000000F94D                 add     rax, 1
.text:000000000000F951                 shl     rax, 4
.text:000000000000F955                 mov     rax, [r10+rax]
.text:000000000000F959                 mov     [rdx], rax
.text:000000000000F95C                 mov     rax, [r9+rsi*8-8]
.text:000000000000F961                 add     rax, 1
.text:000000000000F965                 shl     rax, 4
.text:000000000000F969                 mov     rax, [r10+rax+8]
.text:000000000000F96E                 mov     [rdx+8], rax
.text:000000000000F972
.text:000000000000F972 loc_F972:                               ; CODE XREF: re_search_internal+144B↑j
.text:000000000000F972                 add     rdx, 10h
.text:000000000000F976                 mov     r8, rsi
.text:000000000000F979
.text:000000000000F979 loc_F979:                               ; CODE XREF: re_search_internal+1441↑j
.text:000000000000F979                 lea     rsi, [r8+1]
.text:000000000000F97D                 cmp     rsi, rcx
.text:000000000000F980                 jnz     short loc_F943
.text:000000000000F982                 jmp     loc_F058
.text:000000000000F982 ; ---------------------------------------------------------------------------
.text:000000000000F987                 align 10h
.text:000000000000F990
.text:000000000000F990 loc_F990:                               ; CODE XREF: re_search_internal+B6A↑j
.text:000000000000F990                 mov     rdi, [rsp+268h+var_268]
.text:000000000000F994                 call    match_ctx_clean
.text:000000000000F999                 mov     rdi, [rsp+268h+var_50] ; ptr
.text:000000000000F9A1                 call    _free
.text:000000000000F9A6                 mov     rdi, [rsp+268h+var_70] ; ptr
.text:000000000000F9AE                 call    _free
.text:000000000000F9B3                 jmp     loc_F070
.text:000000000000F9B8 ; ---------------------------------------------------------------------------
.text:000000000000F9B8
.text:000000000000F9B8 loc_F9B8:                               ; CODE XREF: re_search_internal+393↑j
.text:000000000000F9B8                 mov     rax, [rsp+268h+var_230]
.text:000000000000F9BD                 test    byte ptr [rax+0B0h], 2
.text:000000000000F9C4                 jnz     loc_E899
.text:000000000000F9CA                 mov     [rsp+268h+var_90], 0
.text:000000000000F9D6                 jmp     loc_E8D5
.text:000000000000F9DB ; ---------------------------------------------------------------------------
.text:000000000000F9DB
.text:000000000000F9DB loc_F9DB:                               ; CODE XREF: re_search_internal+A18↑j
.text:000000000000F9DB                 mov     rdi, r12        ; ptr
.text:000000000000F9DE                 call    _free
.text:000000000000F9E3                 mov     rdi, rbp        ; ptr
.text:000000000000F9E6                 call    _free
.text:000000000000F9EB                 jmp     loc_F430
.text:000000000000F9F0 ; ---------------------------------------------------------------------------
.text:000000000000F9F0
.text:000000000000F9F0 loc_F9F0:                               ; CODE XREF: re_search_internal+B0C↑j
.text:000000000000F9F0                 mov     [rsp+268h+var_190], rax
.text:000000000000F9F8                 mov     rdi, [rsp+268h+var_90]
.text:000000000000FA00                 mov     [rsp+268h+var_20C], 1
.text:000000000000FA08                 jmp     loc_F058
.text:000000000000FA0D ; ---------------------------------------------------------------------------
.text:000000000000FA0D
.text:000000000000FA0D loc_FA0D:                               ; CODE XREF: re_search_internal+BD1↑j
.text:000000000000FA0D                 test    rax, rax
.text:000000000000FA10                 mov     r13, rax
.text:000000000000FA13                 jnz     loc_EC08
.text:000000000000FA19                 jmp     loc_ED54
.text:000000000000FA19 ; ---------------------------------------------------------------------------
.text:000000000000FA1E                 align 20h
.text:000000000000FA20
.text:000000000000FA20 loc_FA20:                               ; CODE XREF: re_search_internal+BDA↑j
.text:000000000000FA20                 mov     r13, rax
.text:000000000000FA23                 jmp     loc_EC08
.text:000000000000FA28 ; ---------------------------------------------------------------------------
.text:000000000000FA28
.text:000000000000FA28 loc_FA28:                               ; CODE XREF: re_search_internal+C43↑j
.text:000000000000FA28                 cmp     eax, 0Ch
.text:000000000000FA2B                 jz      loc_F570
.text:000000000000FA31                 lea     rcx, __PRETTY_FUNCTION___7972 ; "check_matching"
.text:000000000000FA38                 lea     rsi, aCoreutils831Li_0 ; "../coreutils-8.31/lib/regexec.c"
.text:000000000000FA3F                 lea     rdi, aErrRegEspace ; "err == REG_ESPACE"
.text:000000000000FA46                 mov     edx, 46Ch       ; line
.text:000000000000FA4B                 call    ___assert_fail
.text:000000000000FA50 ; ---------------------------------------------------------------------------
.text:000000000000FA50
.text:000000000000FA50 loc_FA50:                               ; CODE XREF: re_search_internal+6C7↑j
.text:000000000000FA50                 cmp     byte ptr [r14+68h], 0
.text:000000000000FA55                 js      short loc_FAC6
.text:000000000000FA57
.text:000000000000FA57 loc_FA57:                               ; CODE XREF: re_search_internal+15EA↓j
.text:000000000000FA57                 mov     esi, [rsp+268h+var_210]
.text:000000000000FA5B                 mov     rax, [rsp+268h+var_260]
.text:000000000000FA60                 test    esi, esi
.text:000000000000FA62                 mov     [rsp+268h+var_248], rax
.text:000000000000FA67                 jz      loc_ED66
.text:000000000000FA6D                 mov     [rsp+268h+var_238], 1
.text:000000000000FA76                 jmp     loc_EBCD
.text:000000000000FA7B ; ---------------------------------------------------------------------------
.text:000000000000FA7B
.text:000000000000FA7B loc_FA7B:                               ; CODE XREF: re_search_internal+917↑j
.text:000000000000FA7B                 mov     rdi, rbx
.text:000000000000FA7E                 mov     [rsp+268h+var_20C], 0Ch
.text:000000000000FA86                 jmp     loc_F058
.text:000000000000FA8B ; ---------------------------------------------------------------------------
.text:000000000000FA8B
.text:000000000000FA8B loc_FA8B:                               ; CODE XREF: re_search_internal+69C↑j
.text:000000000000FA8B                 lea     rbx, [r14+10h]
.text:000000000000FA8F                 lea     rbp, [r14+18h]
.text:000000000000FA93                 mov     rdi, [rsp+268h+var_268]
.text:000000000000FA97                 xor     ecx, ecx
.text:000000000000FA99                 mov     rdx, rbp
.text:000000000000FA9C                 mov     rsi, rbx
.text:000000000000FA9F                 call    check_subexp_matching_top_isra_18
.text:000000000000FAA4                 test    eax, eax
.text:000000000000FAA6                 mov     [rsp+268h+var_198], eax
.text:000000000000FAAD                 jnz     short loc_FAF8
.text:000000000000FAAF                 movzx   eax, byte ptr [r14+68h]
.text:000000000000FAB4                 test    al, 40h
.text:000000000000FAB6                 jnz     loc_FBA0
.text:000000000000FABC
.text:000000000000FABC loc_FABC:                               ; CODE XREF: re_search_internal+16C3↓j
.text:000000000000FABC                 mov     byte ptr [rsp+268h+var_250], 0
.text:000000000000FAC1                 jmp     loc_EBB3
.text:000000000000FAC6 ; ---------------------------------------------------------------------------
.text:000000000000FAC6
.text:000000000000FAC6 loc_FAC6:                               ; CODE XREF: re_search_internal+1555↑j
.text:000000000000FAC6                 mov     rsi, [r14+10h]
.text:000000000000FACA                 mov     rcx, [rsp+268h+var_260]
.text:000000000000FACF                 lea     rdx, [r14+18h]
.text:000000000000FAD3                 mov     rdi, [rsp+268h+var_268]
.text:000000000000FAD7                 call    check_halt_state_context_isra_20
.text:000000000000FADC                 test    rax, rax
.text:000000000000FADF                 mov     [rsp+268h+var_238], rax
.text:000000000000FAE4                 jz      loc_EBCD
.text:000000000000FAEA                 jmp     loc_FA57
.text:000000000000FAEF ; ---------------------------------------------------------------------------
.text:000000000000FAEF
.text:000000000000FAEF loc_FAEF:                               ; CODE XREF: re_search_internal+1185↑j
.text:000000000000FAEF                 mov     r14, [rbx+60h]
.text:000000000000FAF3                 jmp     loc_F510
.text:000000000000FAF8 ; ---------------------------------------------------------------------------
.text:000000000000FAF8
.text:000000000000FAF8 loc_FAF8:                               ; CODE XREF: re_search_internal+15AD↑j
.text:000000000000FAF8                                         ; re_search_internal+16B8↓j
.text:000000000000FAF8                 cdqe
.text:000000000000FAFA                 mov     [rsp+268h+var_248], rax
.text:000000000000FAFF                 jmp     loc_ED66
.text:000000000000FB04 ; ---------------------------------------------------------------------------
.text:000000000000FB04
.text:000000000000FB04 loc_FB04:                               ; CODE XREF: re_search_internal+9E6↑j
.text:000000000000FB04                 mov     r14, [rsp+268h+var_250]
.text:000000000000FB09                 mov     eax, r15d
.text:000000000000FB0C
.text:000000000000FB0C loc_FB0C:                               ; CODE XREF: re_search_internal+169B↓j
.text:000000000000FB0C                 mov     rdi, r12        ; ptr
.text:000000000000FB0F                 mov     dword ptr [rsp+268h+var_260], eax
.text:000000000000FB13                 call    _free
.text:000000000000FB18                 mov     rdi, r14        ; ptr
.text:000000000000FB1B                 call    _free
.text:000000000000FB20                 mov     eax, dword ptr [rsp+268h+var_260]
.text:000000000000FB24                 cmp     eax, 1
.text:000000000000FB27                 jz      loc_F430
.text:000000000000FB2D
.text:000000000000FB2D loc_FB2D:                               ; CODE XREF: re_search_internal+1358↑j
.text:000000000000FB2D                 mov     rdi, [rsp+268h+var_90]
.text:000000000000FB35                 mov     [rsp+268h+var_20C], eax
.text:000000000000FB39                 jmp     loc_F058
.text:000000000000FB39 ; ---------------------------------------------------------------------------
.text:000000000000FB3E                 align 20h
.text:000000000000FB40
.text:000000000000FB40 loc_FB40:                               ; CODE XREF: re_search_internal+118D↑j
.text:000000000000FB40                 test    al, 4
.text:000000000000FB42                 jz      loc_EB7E
.text:000000000000FB48                 mov     rdx, [r14+50h]
.text:000000000000FB4C                 mov     rdi, [rsp+268h+var_240]
.text:000000000000FB51                 mov     ecx, eax
.text:000000000000FB53                 mov     rsi, rbx
.text:000000000000FB56                 call    re_acquire_state_context
.text:000000000000FB5B                 mov     r14, rax
.text:000000000000FB5E                 jmp     loc_F510
.text:000000000000FB63 ; ---------------------------------------------------------------------------
.text:000000000000FB63
.text:000000000000FB63 loc_FB63:                               ; CODE XREF: re_search_internal+9F1↑j
.text:000000000000FB63                                         ; re_search_internal+9FC↑j
.text:000000000000FB63                 mov     r15, [rsp+268h+var_258]
.text:000000000000FB68                 mov     rcx, [rsp+268h+var_260]
.text:000000000000FB6D                 mov     rdx, rbp
.text:000000000000FB70                 mov     rsi, r12
.text:000000000000FB73                 mov     [rsp+268h+var_248], r14
.text:000000000000FB78                 mov     rdi, r15
.text:000000000000FB7B                 call    merge_state_array
.text:000000000000FB80                 mov     rdi, rbp        ; ptr
.text:000000000000FB83                 mov     dword ptr [rsp+268h+var_260], eax
.text:000000000000FB87                 call    _free
.text:000000000000FB8C                 mov     eax, dword ptr [rsp+268h+var_260]
.text:000000000000FB90                 test    eax, eax
.text:000000000000FB92                 jz      loc_F762
.text:000000000000FB98
.text:000000000000FB98 loc_FB98:                               ; CODE XREF: re_search_internal+1251↑j
.text:000000000000FB98                 xor     r14d, r14d
.text:000000000000FB9B                 jmp     loc_FB0C
.text:000000000000FBA0 ; ---------------------------------------------------------------------------
.text:000000000000FBA0
.text:000000000000FBA0 loc_FBA0:                               ; CODE XREF: re_search_internal+15B6↑j
.text:000000000000FBA0                 mov     rdi, [rsp+268h+var_268]
.text:000000000000FBA4                 mov     rdx, rbp
.text:000000000000FBA7                 mov     rsi, rbx
.text:000000000000FBAA                 call    transit_state_bkref_isra_34
.text:000000000000FBAF                 test    eax, eax
.text:000000000000FBB1                 mov     [rsp+268h+var_198], eax
.text:000000000000FBB8                 jnz     loc_FAF8
.text:000000000000FBBE                 movzx   eax, byte ptr [r14+68h]
.text:000000000000FBC3                 jmp     loc_FABC
.text:000000000000FBC8 ; ---------------------------------------------------------------------------
.text:000000000000FBC8
.text:000000000000FBC8 loc_FBC8:                               ; CODE XREF: re_search_internal+12A4↑j
.text:000000000000FBC8                 mov     rsi, [rsp+268h+var_1B0]
.text:000000000000FBD0                 mov     rax, [rsp+268h+var_A0]
.text:000000000000FBD8                 mov     qword ptr [rsi], 0
.text:000000000000FBDF                 mov     [rsi+8], rax
.text:000000000000FBE3
.text:000000000000FBE3 loc_FBE3:                               ; CODE XREF: re_search_internal+1300↑j
.text:000000000000FBE3                                         ; re_search_internal+130F↑j
.text:000000000000FBE3                 xor     eax, eax
.text:000000000000FBE5                 jmp     loc_F861
.text:000000000000FBEA ; ---------------------------------------------------------------------------
.text:000000000000FBEA
.text:000000000000FBEA loc_FBEA:                               ; CODE XREF: re_search_internal+13A6↑j
.text:000000000000FBEA                 cmp     r10, rax
.text:000000000000FBED                 jz      short loc_FC0C
.text:000000000000FBEF                 mov     rax, [r9+rax*8]
.text:000000000000FBF3
.text:000000000000FBF3 loc_FBF3:                               ; CODE XREF: re_search_internal+170F↓j
.text:000000000000FBF3                 cmp     r10, rsi
.text:000000000000FBF6                 mov     [rdx], rax
.text:000000000000FBF9                 jz      short loc_FC04
.text:000000000000FBFB                 mov     rsi, [r9+rsi*8]
.text:000000000000FBFF                 jmp     loc_F8AC
.text:000000000000FC04 ; ---------------------------------------------------------------------------
.text:000000000000FC04
.text:000000000000FC04 loc_FC04:                               ; CODE XREF: re_search_internal+16F9↑j
.text:000000000000FC04                 mov     rsi, r8
.text:000000000000FC07                 jmp     loc_F8AC
.text:000000000000FC0C ; ---------------------------------------------------------------------------
.text:000000000000FC0C
.text:000000000000FC0C loc_FC0C:                               ; CODE XREF: re_search_internal+16ED↑j
.text:000000000000FC0C                 mov     rax, r8
.text:000000000000FC0F                 jmp     short loc_FBF3
.text:000000000000FC11 ; ---------------------------------------------------------------------------
.text:000000000000FC11
.text:000000000000FC11 loc_FC11:                               ; CODE XREF: re_search_internal+574↑j
.text:000000000000FC11                                         ; re_search_internal+AB1↑j
.text:000000000000FC11                 mov     [rsp+268h+var_190], rbp
.text:000000000000FC19                 jmp     loc_EAD8        ; jumptable 000000000000E9F6 case 4
.text:000000000000FC1E ; ---------------------------------------------------------------------------
.text:000000000000FC1E
.text:000000000000FC1E loc_FC1E:                               ; CODE XREF: re_search_internal+84E↑j
.text:000000000000FC1E                 mov     [rsp+268h+var_100], rax
.text:000000000000FC26                 jmp     loc_ED54
.text:000000000000FC2B ; ---------------------------------------------------------------------------
.text:000000000000FC2B
.text:000000000000FC2B loc_FC2B:                               ; CODE XREF: re_search_internal+B8E↑j
.text:000000000000FC2B                 call    ___stack_chk_fail
.text:000000000000FC2B ; } // starts at E500
.text:000000000000FC2B re_search_internal endp
.text:000000000000FC2B
.text:000000000000FC30
.text:000000000000FC30 ; =============== S U B R O U T I N E =======================================
.text:000000000000FC30
.text:000000000000FC30
.text:000000000000FC30 update_cur_sifted_state proc near       ; CODE XREF: sift_states_backward+70↑p
.text:000000000000FC30                                         ; sift_states_backward+28F↑p
.text:000000000000FC30
.text:000000000000FC30 var_D0          = qword ptr -0D0h
.text:000000000000FC30 var_C8          = qword ptr -0C8h
.text:000000000000FC30 var_C0          = qword ptr -0C0h
.text:000000000000FC30 var_B8          = qword ptr -0B8h
.text:000000000000FC30 var_B0          = qword ptr -0B0h
.text:000000000000FC30 var_A8          = qword ptr -0A8h
.text:000000000000FC30 var_A0          = qword ptr -0A0h
.text:000000000000FC30 var_98          = qword ptr -98h
.text:000000000000FC30 var_90          = qword ptr -90h
.text:000000000000FC30 var_7C          = dword ptr -7Ch
.text:000000000000FC30 var_78          = xmmword ptr -78h
.text:000000000000FC30 var_68          = xmmword ptr -68h
.text:000000000000FC30 var_50          = qword ptr -50h
.text:000000000000FC30 ptr             = qword ptr -48h
.text:000000000000FC30 var_40          = qword ptr -40h
.text:000000000000FC30
.text:000000000000FC30 ; __unwind {
.text:000000000000FC30                 push    r15
.text:000000000000FC32                 push    r14
.text:000000000000FC34                 mov     rax, rdi
.text:000000000000FC37                 push    r13
.text:000000000000FC39                 push    r12
.text:000000000000FC3B                 mov     r13, rsi
.text:000000000000FC3E                 push    rbp
.text:000000000000FC3F                 push    rbx
.text:000000000000FC40                 mov     rbp, rdx
.text:000000000000FC43                 mov     rbx, rcx
.text:000000000000FC46                 lea     rcx, ds:0[rdx*8]
.text:000000000000FC4E                 sub     rsp, 0A8h
.text:000000000000FC55                 mov     r12, [rax+98h]
.text:000000000000FC5C                 mov     rax, [rax+0B8h]
.text:000000000000FC63                 mov     [rsp+0D8h+var_D0], rdi
.text:000000000000FC68                 mov     [rsp+0D8h+var_C0], rcx
.text:000000000000FC6D                 mov     rdi, fs:28h
.text:000000000000FC76                 mov     [rsp+0D8h+var_40], rdi
.text:000000000000FC7E                 xor     edi, edi
.text:000000000000FC80                 mov     rdx, [rax+rdx*8]
.text:000000000000FC84                 mov     [rsp+0D8h+var_7C], 0
.text:000000000000FC8C                 mov     rcx, [rbx+8]
.text:000000000000FC90                 test    rdx, rdx
.text:000000000000FC93                 jz      loc_FEE8
.text:000000000000FC99                 lea     rdi, [rdx+8]
.text:000000000000FC9D                 test    rcx, rcx
.text:000000000000FCA0                 mov     [rsp+0D8h+var_C8], rdi
.text:000000000000FCA5                 jnz     short loc_FCF8
.text:000000000000FCA7                 mov     rdx, [rsi]
.text:000000000000FCAA                 mov     qword ptr [rdx+rbp*8], 0
.text:000000000000FCB2                 mov     rdx, [rax+rbp*8]
.text:000000000000FCB6                 xor     eax, eax
.text:000000000000FCB8                 test    byte ptr [rdx+68h], 40h
.text:000000000000FCBC                 jnz     loc_FD9F
.text:000000000000FCC2                 nop     word ptr [rax+rax+00h]
.text:000000000000FCC8
.text:000000000000FCC8 loc_FCC8:                               ; CODE XREF: update_cur_sifted_state+E9↓j
.text:000000000000FCC8                                         ; update_cur_sifted_state+112↓j ...
.text:000000000000FCC8                 mov     rdi, [rsp+0D8h+var_40]
.text:000000000000FCD0                 xor     rdi, fs:28h
.text:000000000000FCD9                 jnz     loc_1047B
.text:000000000000FCDF                 add     rsp, 0A8h
.text:000000000000FCE6                 pop     rbx
.text:000000000000FCE7                 pop     rbp
.text:000000000000FCE8                 pop     r12
.text:000000000000FCEA                 pop     r13
.text:000000000000FCEC                 pop     r14
.text:000000000000FCEE                 pop     r15
.text:000000000000FCF0                 retn
.text:000000000000FCF0 ; ---------------------------------------------------------------------------
.text:000000000000FCF1                 align 8
.text:000000000000FCF8
.text:000000000000FCF8 loc_FCF8:                               ; CODE XREF: update_cur_sifted_state+75↑j
.text:000000000000FCF8                 lea     rdi, [rsp+0D8h+var_78]
.text:000000000000FCFD                 mov     rdx, rbx
.text:000000000000FD00                 mov     rsi, r12
.text:000000000000FD03                 mov     dword ptr [rsp+0D8h+var_78], 0
.text:000000000000FD0B                 call    re_acquire_state
.text:000000000000FD10                 mov     rdx, rax
.text:000000000000FD13                 mov     eax, dword ptr [rsp+0D8h+var_78]
.text:000000000000FD17                 test    eax, eax
.text:000000000000FD19                 jnz     short loc_FCC8
.text:000000000000FD1B                 mov     r15, [rdx+38h]
.text:000000000000FD1F                 lea     r14, [rdx+38h]
.text:000000000000FD23                 test    r15, r15
.text:000000000000FD26                 jz      loc_FF30
.text:000000000000FD2C
.text:000000000000FD2C loc_FD2C:                               ; CODE XREF: update_cur_sifted_state+33B↓j
.text:000000000000FD2C                                         ; update_cur_sifted_state+348↓j
.text:000000000000FD2C                 mov     rsi, [rsp+0D8h+var_C8]
.text:000000000000FD31                 mov     rdx, r14
.text:000000000000FD34                 mov     rdi, rbx
.text:000000000000FD37                 call    re_node_set_add_intersect
.text:000000000000FD3C                 test    eax, eax
.text:000000000000FD3E                 mov     [rsp+0D8h+var_7C], eax
.text:000000000000FD42                 jnz     short loc_FCC8
.text:000000000000FD44                 cmp     qword ptr [r13+28h], 0
.text:000000000000FD49                 jnz     loc_FFC0
.text:000000000000FD4F
.text:000000000000FD4F loc_FD4F:                               ; CODE XREF: update_cur_sifted_state+483↓j
.text:000000000000FD4F                 mov     r14, [rsp+0D8h+var_C0]
.text:000000000000FD54                 add     r14, [r13+0]
.text:000000000000FD58
.text:000000000000FD58 loc_FD58:                               ; CODE XREF: update_cur_sifted_state+389↓j
.text:000000000000FD58                 lea     rdi, [rsp+0D8h+var_7C]
.text:000000000000FD5D                 mov     rdx, rbx
.text:000000000000FD60                 mov     rsi, r12
.text:000000000000FD63                 call    re_acquire_state
.text:000000000000FD68                 mov     [r14], rax
.text:000000000000FD6B                 mov     eax, [rsp+0D8h+var_7C]
.text:000000000000FD6F                 test    eax, eax
.text:000000000000FD71                 jnz     loc_FCC8
.text:000000000000FD77                 cmp     [rsp+0D8h+var_C8], 0
.text:000000000000FD7D                 jz      loc_FCC8
.text:000000000000FD83                 mov     rax, [rsp+0D8h+var_D0]
.text:000000000000FD88                 mov     rax, [rax+0B8h]
.text:000000000000FD8F                 mov     rdx, [rax+rbp*8]
.text:000000000000FD93                 xor     eax, eax
.text:000000000000FD95                 test    byte ptr [rdx+68h], 40h
.text:000000000000FD99                 jz      loc_FCC8
.text:000000000000FD9F
.text:000000000000FD9F loc_FD9F:                               ; CODE XREF: update_cur_sifted_state+8C↑j
.text:000000000000FD9F                 mov     rax, [rsp+0D8h+var_D0]
.text:000000000000FDA4                 xor     ebx, ebx
.text:000000000000FDA6                 mov     rsi, [rax+0C8h]
.text:000000000000FDAD                 mov     rdx, rsi
.text:000000000000FDB0
.text:000000000000FDB0 loc_FDB0:                               ; CODE XREF: update_cur_sifted_state+2F7↓j
.text:000000000000FDB0                 cmp     rbx, rdx
.text:000000000000FDB3                 jge     short loc_FE13
.text:000000000000FDB5                 lea     rax, [rbx+rdx]
.text:000000000000FDB9                 mov     rcx, rax
.text:000000000000FDBC                 shr     rcx, 3Fh
.text:000000000000FDC0                 add     rcx, rax
.text:000000000000FDC3                 mov     rax, [rsp+0D8h+var_D0]
.text:000000000000FDC8                 sar     rcx, 1
.text:000000000000FDCB                 mov     rdi, [rax+0D8h]
.text:000000000000FDD2                 lea     rax, [rcx+rcx*4]
.text:000000000000FDD6                 cmp     rbp, [rdi+rax*8+8]
.text:000000000000FDDB                 jle     short loc_FE0E
.text:000000000000FDDD                 jmp     loc_FF17
.text:000000000000FDDD ; ---------------------------------------------------------------------------
.text:000000000000FDE2                 align 8
.text:000000000000FDE8
.text:000000000000FDE8 loc_FDE8:                               ; CODE XREF: update_cur_sifted_state+1E1↓j
.text:000000000000FDE8                 lea     rdx, [rbx+rcx]
.text:000000000000FDEC                 mov     rax, rdx
.text:000000000000FDEF                 shr     rax, 3Fh
.text:000000000000FDF3                 add     rax, rdx
.text:000000000000FDF6                 sar     rax, 1
.text:000000000000FDF9                 lea     rdx, [rax+rax*4]
.text:000000000000FDFD                 mov     r8, rax
.text:000000000000FE00                 cmp     rbp, [rdi+rdx*8+8]
.text:000000000000FE05                 jg      loc_FF20
.text:000000000000FE0B                 mov     rcx, rax
.text:000000000000FE0E
.text:000000000000FE0E loc_FE0E:                               ; CODE XREF: update_cur_sifted_state+1AB↑j
.text:000000000000FE0E                 cmp     rbx, rcx
.text:000000000000FE11                 jl      short loc_FDE8
.text:000000000000FE13
.text:000000000000FE13 loc_FE13:                               ; CODE XREF: update_cur_sifted_state+183↑j
.text:000000000000FE13                 cmp     rsi, rbx
.text:000000000000FE16                 jle     loc_FF10
.text:000000000000FE1C                 lea     rax, [rbx+rbx*4]
.text:000000000000FE20                 lea     rsi, ds:0[rax*8]
.text:000000000000FE28                 mov     rax, [rsp+0D8h+var_D0]
.text:000000000000FE2D                 mov     [rsp+0D8h+var_98], rsi
.text:000000000000FE32                 mov     rax, [rax+0D8h]
.text:000000000000FE39                 cmp     rbp, [rax+rsi+8]
.text:000000000000FE3E                 jnz     loc_FF10
.text:000000000000FE44                 cmp     rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000000FE48                 jz      loc_FF10
.text:000000000000FE4E                 mov     rax, [rsp+0D8h+var_D0]
.text:000000000000FE53                 mov     qword ptr [rsp+0D8h+var_78], 0
.text:000000000000FE5C                 mov     r12, [rax+98h]
.text:000000000000FE63                 mov     rax, [rsp+0D8h+var_C8]
.text:000000000000FE68                 cmp     qword ptr [rax+8], 0
.text:000000000000FE6D                 jle     loc_FF10
.text:000000000000FE73                 lea     rax, [rsp+0D8h+var_78]
.text:000000000000FE78                 mov     [rsp+0D8h+var_B8], 0
.text:000000000000FE81                 mov     [rsp+0D8h+var_90], rbx
.text:000000000000FE86                 mov     r15, r13
.text:000000000000FE89                 mov     [rsp+0D8h+var_A0], rax
.text:000000000000FE8E                 jmp     short loc_FEB2
.text:000000000000FE90 ; ---------------------------------------------------------------------------
.text:000000000000FE90
.text:000000000000FE90 loc_FE90:                               ; CODE XREF: update_cur_sifted_state+2A7↓j
.text:000000000000FE90                                         ; update_cur_sifted_state+2AD↓j
.text:000000000000FE90                 cmp     al, 4
.text:000000000000FE92                 jz      loc_10218
.text:000000000000FE98
.text:000000000000FE98 loc_FE98:                               ; CODE XREF: update_cur_sifted_state+2AF↓j
.text:000000000000FE98                                         ; update_cur_sifted_state+7C3↓j
.text:000000000000FE98                 mov     rcx, [rsp+0D8h+var_C8]
.text:000000000000FE9D                 add     [rsp+0D8h+var_B8], 1
.text:000000000000FEA3                 mov     rax, [rsp+0D8h+var_B8]
.text:000000000000FEA8                 cmp     rax, [rcx+8]
.text:000000000000FEAC                 jge     loc_1046B
.text:000000000000FEB2
.text:000000000000FEB2 loc_FEB2:                               ; CODE XREF: update_cur_sifted_state+25E↑j
.text:000000000000FEB2                 mov     rax, [rsp+0D8h+var_C8]
.text:000000000000FEB7                 mov     rdi, [rsp+0D8h+var_B8]
.text:000000000000FEBC                 mov     rax, [rax+10h]
.text:000000000000FEC0                 mov     r14, [rax+rdi*8]
.text:000000000000FEC4                 mov     rax, r14
.text:000000000000FEC7                 shl     rax, 4
.text:000000000000FECB                 add     rax, [r12]
.text:000000000000FECF                 cmp     r14, [r15+10h]
.text:000000000000FED3                 movzx   eax, byte ptr [rax+8]
.text:000000000000FED7                 jnz     short loc_FE90
.text:000000000000FED9                 cmp     rbp, [r15+18h]
.text:000000000000FEDD                 jnz     short loc_FE90
.text:000000000000FEDF                 jmp     short loc_FE98
.text:000000000000FEDF ; ---------------------------------------------------------------------------
.text:000000000000FEE1                 align 8
.text:000000000000FEE8
.text:000000000000FEE8 loc_FEE8:                               ; CODE XREF: update_cur_sifted_state+63↑j
.text:000000000000FEE8                 lea     r14, ds:0[rbp*8]
.text:000000000000FEF0                 add     r14, [rsi]
.text:000000000000FEF3                 test    rcx, rcx
.text:000000000000FEF6                 jnz     loc_FFB0
.text:000000000000FEFC                 mov     qword ptr [r14], 0
.text:000000000000FF03                 xor     eax, eax
.text:000000000000FF05                 jmp     loc_FCC8
.text:000000000000FF05 ; ---------------------------------------------------------------------------
.text:000000000000FF0A                 align 10h
.text:000000000000FF10
.text:000000000000FF10 loc_FF10:                               ; CODE XREF: update_cur_sifted_state+1E6↑j
.text:000000000000FF10                                         ; update_cur_sifted_state+20E↑j ...
.text:000000000000FF10                 xor     eax, eax
.text:000000000000FF12                 jmp     loc_FCC8
.text:000000000000FF17 ; ---------------------------------------------------------------------------
.text:000000000000FF17
.text:000000000000FF17 loc_FF17:                               ; CODE XREF: update_cur_sifted_state+1AD↑j
.text:000000000000FF17                 mov     r8, rcx
.text:000000000000FF1A                 mov     rcx, rdx
.text:000000000000FF1D                 nop     dword ptr [rax]
.text:000000000000FF20
.text:000000000000FF20 loc_FF20:                               ; CODE XREF: update_cur_sifted_state+1D5↑j
.text:000000000000FF20                 lea     rbx, [r8+1]
.text:000000000000FF24                 mov     rdx, rcx
.text:000000000000FF27                 jmp     loc_FDB0
.text:000000000000FF27 ; ---------------------------------------------------------------------------
.text:000000000000FF2C                 align 10h
.text:000000000000FF30
.text:000000000000FF30 loc_FF30:                               ; CODE XREF: update_cur_sifted_state+F6↑j
.text:000000000000FF30                 mov     rdi, [rbx+8]
.text:000000000000FF34                 mov     qword ptr [rdx+40h], 0
.text:000000000000FF3C                 mov     [rsp+0D8h+var_B8], rdx
.text:000000000000FF41                 mov     [rdx+38h], rdi
.text:000000000000FF45                 shl     rdi, 3          ; size
.text:000000000000FF49                 call    _malloc
.text:000000000000FF4E                 mov     rdx, [rsp+0D8h+var_B8]
.text:000000000000FF53                 test    rax, rax
.text:000000000000FF56                 mov     [rdx+48h], rax
.text:000000000000FF5A                 jz      short loc_FFA3
.text:000000000000FF5C                 cmp     qword ptr [rbx+8], 0
.text:000000000000FF61                 mov     dword ptr [rsp+0D8h+var_78], 0
.text:000000000000FF69                 jg      short loc_FF7E
.text:000000000000FF6B                 jmp     loc_FD2C
.text:000000000000FF70 ; ---------------------------------------------------------------------------
.text:000000000000FF70
.text:000000000000FF70 loc_FF70:                               ; CODE XREF: update_cur_sifted_state+371↓j
.text:000000000000FF70                 add     r15, 1
.text:000000000000FF74                 cmp     r15, [rbx+8]
.text:000000000000FF78                 jge     loc_FD2C
.text:000000000000FF7E
.text:000000000000FF7E loc_FF7E:                               ; CODE XREF: update_cur_sifted_state+339↑j
.text:000000000000FF7E                 mov     rax, [rbx+10h]
.text:000000000000FF82                 mov     rdi, r14
.text:000000000000FF85                 mov     rax, [rax+r15*8]
.text:000000000000FF89                 lea     rdx, [rax+rax*2]
.text:000000000000FF8D                 mov     rax, [r12+38h]
.text:000000000000FF92                 lea     rsi, [rax+rdx*8]
.text:000000000000FF96                 call    re_node_set_merge
.text:000000000000FF9B                 test    eax, eax
.text:000000000000FF9D                 mov     dword ptr [rsp+0D8h+var_78], eax
.text:000000000000FFA1                 jz      short loc_FF70
.text:000000000000FFA3
.text:000000000000FFA3 loc_FFA3:                               ; CODE XREF: update_cur_sifted_state+32A↑j
.text:000000000000FFA3                 mov     eax, 0Ch
.text:000000000000FFA8                 jmp     loc_FCC8
.text:000000000000FFA8 ; ---------------------------------------------------------------------------
.text:000000000000FFAD                 align 10h
.text:000000000000FFB0
.text:000000000000FFB0 loc_FFB0:                               ; CODE XREF: update_cur_sifted_state+2C6↑j
.text:000000000000FFB0                 mov     [rsp+0D8h+var_C8], 0
.text:000000000000FFB9                 jmp     loc_FD58
.text:000000000000FFB9 ; ---------------------------------------------------------------------------
.text:000000000000FFBE                 align 20h
.text:000000000000FFC0
.text:000000000000FFC0 loc_FFC0:                               ; CODE XREF: update_cur_sifted_state+119↑j
.text:000000000000FFC0                 mov     rax, [rsp+0D8h+var_D0]
.text:000000000000FFC5                 mov     rax, [rax+0D8h]
.text:000000000000FFCC                 mov     [rsp+0D8h+var_B8], rax
.text:000000000000FFD1                 jle     loc_100AB
.text:000000000000FFD7                 xor     r15d, r15d
.text:000000000000FFDA                 nop     word ptr [rax+rax+00h]
.text:000000000000FFE0
.text:000000000000FFE0 loc_FFE0:                               ; CODE XREF: update_cur_sifted_state+475↓j
.text:000000000000FFE0                 mov     rax, [r13+30h]
.text:000000000000FFE4                 mov     rdi, [rsp+0D8h+var_B8]
.text:000000000000FFE9                 mov     rax, [rax+r15*8]
.text:000000000000FFED                 lea     rax, [rax+rax*4]
.text:000000000000FFF1                 lea     rdx, [rdi+rax*8]
.text:000000000000FFF5                 cmp     rbp, [rdx+10h]
.text:000000000000FFF9                 jle     loc_1009D
.text:000000000000FFFF                 cmp     rbp, [rdx+8]
.text:0000000000010003                 jg      loc_1009D
.text:0000000000010009                 mov     rcx, [rdx]
.text:000000000001000C                 mov     rax, [r12]
.text:0000000000010010                 mov     rsi, [rbx+8]
.text:0000000000010014                 shl     rcx, 4
.text:0000000000010018                 cmp     rbp, [rdx+18h]
.text:000000000001001C                 mov     r8, [rax+rcx]
.text:0000000000010020                 jz      loc_100C0
.text:0000000000010026                 xor     r14d, r14d
.text:0000000000010029                 test    rsi, rsi
.text:000000000001002C                 jle     short loc_1009D
.text:000000000001002E                 mov     [rsp+0D8h+var_B0], rbp
.text:0000000000010033                 mov     rbp, r8
.text:0000000000010036                 jmp     short loc_1004E
.text:0000000000010036 ; ---------------------------------------------------------------------------
.text:0000000000010038                 align 20h
.text:0000000000010040
.text:0000000000010040 loc_10040:                              ; CODE XREF: update_cur_sifted_state+43A↓j
.text:0000000000010040                                         ; update_cur_sifted_state+43F↓j
.text:0000000000010040                 add     r14, 1
.text:0000000000010044                 cmp     r14, [rbx+8]
.text:0000000000010048                 jge     short loc_10098
.text:000000000001004A
.text:000000000001004A loc_1004A:                              ; CODE XREF: update_cur_sifted_state+461↓j
.text:000000000001004A                 mov     rax, [r12]
.text:000000000001004E
.text:000000000001004E loc_1004E:                              ; CODE XREF: update_cur_sifted_state+406↑j
.text:000000000001004E                 mov     rdx, [rbx+10h]
.text:0000000000010052                 mov     rsi, [rdx+r14*8]
.text:0000000000010056                 mov     rdx, rsi
.text:0000000000010059                 shl     rdx, 4
.text:000000000001005D                 add     rax, rdx
.text:0000000000010060                 movzx   edx, byte ptr [rax+8]
.text:0000000000010064                 sub     edx, 8
.text:0000000000010067                 cmp     edx, 1
.text:000000000001006A                 ja      short loc_10040
.text:000000000001006C                 cmp     rbp, [rax]
.text:000000000001006F                 jnz     short loc_10040
.text:0000000000010071                 mov     rcx, [rsp+0D8h+var_C8]
.text:0000000000010076                 mov     rdx, rbx
.text:0000000000010079                 mov     rdi, r12
.text:000000000001007C                 call    _sub_epsilon_src_nodes
.text:0000000000010081                 test    eax, eax
.text:0000000000010083                 jnz     loc_FCC8
.text:0000000000010089                 add     r14, 1
.text:000000000001008D                 cmp     r14, [rbx+8]
.text:0000000000010091                 jl      short loc_1004A
.text:0000000000010093                 nop     dword ptr [rax+rax+00h]
.text:0000000000010098
.text:0000000000010098 loc_10098:                              ; CODE XREF: update_cur_sifted_state+418↑j
.text:0000000000010098                 mov     rbp, [rsp+0D8h+var_B0]
.text:000000000001009D
.text:000000000001009D loc_1009D:                              ; CODE XREF: update_cur_sifted_state+3C9↑j
.text:000000000001009D                                         ; update_cur_sifted_state+3D3↑j ...
.text:000000000001009D                 add     r15, 1
.text:00000000000100A1                 cmp     r15, [r13+28h]
.text:00000000000100A5                 jl      loc_FFE0
.text:00000000000100AB
.text:00000000000100AB loc_100AB:                              ; CODE XREF: update_cur_sifted_state+3A1↑j
.text:00000000000100AB                 mov     [rsp+0D8h+var_7C], 0
.text:00000000000100B3                 jmp     loc_FD4F
.text:00000000000100B3 ; ---------------------------------------------------------------------------
.text:00000000000100B8                 align 20h
.text:00000000000100C0
.text:00000000000100C0 loc_100C0:                              ; CODE XREF: update_cur_sifted_state+3F0↑j
.text:00000000000100C0                 test    rsi, rsi
.text:00000000000100C3                 jle     short loc_1009D
.text:00000000000100C5                 mov     r10, [rbx+10h]
.text:00000000000100C9                 mov     r9, 0FFFFFFFFFFFFFFFFh
.text:00000000000100D0                 lea     r11, [r10+rsi*8]
.text:00000000000100D4                 mov     rcx, r10
.text:00000000000100D7                 mov     rsi, r9
.text:00000000000100DA                 jmp     short loc_100F6
.text:00000000000100DA ; ---------------------------------------------------------------------------
.text:00000000000100DC                 align 20h
.text:00000000000100E0
.text:00000000000100E0 loc_100E0:                              ; CODE XREF: update_cur_sifted_state+4DC↓j
.text:00000000000100E0                 cmp     r14d, 9
.text:00000000000100E4                 jnz     short loc_100ED
.text:00000000000100E6                 cmp     r8, [rdx]
.text:00000000000100E9                 cmovz   r9, rdi
.text:00000000000100ED
.text:00000000000100ED loc_100ED:                              ; CODE XREF: update_cur_sifted_state+4B4↑j
.text:00000000000100ED                 add     rcx, 8
.text:00000000000100F1                 cmp     r11, rcx
.text:00000000000100F4                 jz      short loc_1011E
.text:00000000000100F6
.text:00000000000100F6 loc_100F6:                              ; CODE XREF: update_cur_sifted_state+4AA↑j
.text:00000000000100F6                                         ; update_cur_sifted_state+4EC↓j
.text:00000000000100F6                 mov     rdi, [rcx]
.text:00000000000100F9                 mov     rdx, rdi
.text:00000000000100FC                 shl     rdx, 4
.text:0000000000010100                 add     rdx, rax
.text:0000000000010103                 movzx   r14d, byte ptr [rdx+8]
.text:0000000000010108                 cmp     r14d, 8
.text:000000000001010C                 jnz     short loc_100E0
.text:000000000001010E                 cmp     r8, [rdx]
.text:0000000000010111                 cmovz   rsi, rdi
.text:0000000000010115                 add     rcx, 8
.text:0000000000010119                 cmp     r11, rcx
.text:000000000001011C                 jnz     short loc_100F6
.text:000000000001011E
.text:000000000001011E loc_1011E:                              ; CODE XREF: update_cur_sifted_state+4C4↑j
.text:000000000001011E                 test    rsi, rsi
.text:0000000000010121                 mov     r14, r9
.text:0000000000010124                 mov     [rsp+0D8h+var_B0], r9
.text:0000000000010129                 js      loc_101F0
.text:000000000001012F                 mov     rcx, [rsp+0D8h+var_C8]
.text:0000000000010134                 mov     rdx, rbx
.text:0000000000010137                 mov     rdi, r12
.text:000000000001013A                 call    _sub_epsilon_src_nodes
.text:000000000001013F                 test    eax, eax
.text:0000000000010141                 jnz     loc_FCC8
.text:0000000000010147                 test    r14, r14
.text:000000000001014A                 js      loc_1009D
.text:0000000000010150                 cmp     qword ptr [rbx+8], 0
.text:0000000000010155                 jle     loc_1009D
.text:000000000001015B                 mov     r10, [rbx+10h]
.text:000000000001015F
.text:000000000001015F loc_1015F:                              ; CODE XREF: update_cur_sifted_state+5C6↓j
.text:000000000001015F                 xor     r14d, r14d
.text:0000000000010162                 mov     [rsp+0D8h+var_A8], rbp
.text:0000000000010167                 mov     rbp, r14
.text:000000000001016A                 mov     r14, [rsp+0D8h+var_B0]
.text:000000000001016F                 jmp     short loc_1018A
.text:000000000001016F ; ---------------------------------------------------------------------------
.text:0000000000010171                 align 8
.text:0000000000010178
.text:0000000000010178 loc_10178:                              ; CODE XREF: update_cur_sifted_state+581↓j
.text:0000000000010178                                         ; update_cur_sifted_state+598↓j ...
.text:0000000000010178                 add     rbp, 1
.text:000000000001017C                 cmp     rbp, [rbx+8]
.text:0000000000010180                 jge     loc_10208
.text:0000000000010186                 mov     r10, [rbx+10h]
.text:000000000001018A
.text:000000000001018A loc_1018A:                              ; CODE XREF: update_cur_sifted_state+53F↑j
.text:000000000001018A                 mov     r10, [r10+rbp*8]
.text:000000000001018E                 mov     rax, [r12+38h]
.text:0000000000010193                 mov     rdx, r14
.text:0000000000010196                 lea     r9, [r10+r10*2]
.text:000000000001019A                 shl     r9, 3
.text:000000000001019E                 add     rax, r9
.text:00000000000101A1                 mov     rdi, [rax+8]
.text:00000000000101A5                 lea     rsi, [rax+10h]
.text:00000000000101A9                 call    re_node_set_contains_isra_3
.text:00000000000101AE                 test    rax, rax
.text:00000000000101B1                 jnz     short loc_10178
.text:00000000000101B3                 add     r9, [r12+30h]
.text:00000000000101B8                 mov     rdi, [r9+8]
.text:00000000000101BC                 lea     rsi, [r9+10h]
.text:00000000000101C0                 call    re_node_set_contains_isra_3
.text:00000000000101C5                 test    rax, rax
.text:00000000000101C8                 jnz     short loc_10178
.text:00000000000101CA                 mov     rcx, [rsp+0D8h+var_C8]
.text:00000000000101CF                 mov     rdx, rbx
.text:00000000000101D2                 mov     rsi, r10
.text:00000000000101D5                 mov     rdi, r12
.text:00000000000101D8                 call    _sub_epsilon_src_nodes
.text:00000000000101DD                 test    eax, eax
.text:00000000000101DF                 jnz     loc_FCC8
.text:00000000000101E5                 sub     rbp, 1
.text:00000000000101E9                 jmp     short loc_10178
.text:00000000000101E9 ; ---------------------------------------------------------------------------
.text:00000000000101EB                 align 10h
.text:00000000000101F0
.text:00000000000101F0 loc_101F0:                              ; CODE XREF: update_cur_sifted_state+4F9↑j
.text:00000000000101F0                 cmp     [rsp+0D8h+var_B0], 0
.text:00000000000101F6                 jns     loc_1015F
.text:00000000000101FC                 jmp     loc_1009D
.text:00000000000101FC ; ---------------------------------------------------------------------------
.text:0000000000010201                 align 8
.text:0000000000010208
.text:0000000000010208 loc_10208:                              ; CODE XREF: update_cur_sifted_state+550↑j
.text:0000000000010208                 mov     rbp, [rsp+0D8h+var_A8]
.text:000000000001020D                 jmp     loc_1009D
.text:000000000001020D ; ---------------------------------------------------------------------------
.text:0000000000010212                 align 8
.text:0000000000010218
.text:0000000000010218 loc_10218:                              ; CODE XREF: update_cur_sifted_state+262↑j
.text:0000000000010218                 mov     rax, [rsp+0D8h+var_D0]
.text:000000000001021D                 mov     r13, [rsp+0D8h+var_98]
.text:0000000000010222                 mov     rbx, [rsp+0D8h+var_90]
.text:0000000000010227                 add     r13, [rax+0D8h]
.text:000000000001022E                 lea     rax, [r14+r14*2]
.text:0000000000010232                 shl     rax, 3
.text:0000000000010236                 mov     [rsp+0D8h+var_A8], rax
.text:000000000001023B                 lea     rax, ds:0[r14*8]
.text:0000000000010243                 mov     [rsp+0D8h+var_B0], rax
.text:0000000000010248                 mov     rax, r15
.text:000000000001024B                 mov     r15, r13
.text:000000000001024E                 mov     r13, rbx
.text:0000000000010251                 mov     rbx, rax
.text:0000000000010254                 jmp     loc_103BE
.text:0000000000010254 ; ---------------------------------------------------------------------------
.text:0000000000010259                 align 20h
.text:0000000000010260
.text:0000000000010260 loc_10260:                              ; CODE XREF: update_cur_sifted_state+791↓j
.text:0000000000010260                 mov     rax, [r15+18h]
.text:0000000000010264                 sub     rax, [r15+10h]
.text:0000000000010268                 test    rax, rax
.text:000000000001026B                 lea     r9, [rbp+rax+0]
.text:0000000000010270                 jz      loc_103D0
.text:0000000000010276                 mov     rax, [r12+18h]
.text:000000000001027B                 mov     rsi, [rsp+0D8h+var_B0]
.text:0000000000010280                 mov     r10, [rax+rsi]
.text:0000000000010284
.text:0000000000010284 loc_10284:                              ; CODE XREF: update_cur_sifted_state+7B2↓j
.text:0000000000010284                 cmp     r9, [rbx+18h]
.text:0000000000010288                 jg      loc_103C7
.text:000000000001028E                 mov     rax, [rbx]
.text:0000000000010291                 mov     rax, [rax+r9*8]
.text:0000000000010295                 test    rax, rax
.text:0000000000010298                 jz      loc_103C7
.text:000000000001029E                 mov     rdi, [rax+10h]
.text:00000000000102A2                 lea     rsi, [rax+18h]
.text:00000000000102A6                 mov     rdx, r10
.text:00000000000102A9                 call    re_node_set_contains_isra_3
.text:00000000000102AE                 test    rax, rax
.text:00000000000102B1                 jz      loc_103C7
.text:00000000000102B7                 sub     rsp, 8
.text:00000000000102BB                 lea     rdx, [rbx+30h]
.text:00000000000102BF                 lea     rsi, [rbx+28h]
.text:00000000000102C3                 push    r9
.text:00000000000102C5                 mov     rdi, [rsp+0E8h+var_D0]
.text:00000000000102CA                 mov     rcx, r14
.text:00000000000102CD                 mov     r9, r10
.text:00000000000102D0                 mov     r8, rbp
.text:00000000000102D3                 call    check_dst_limits_isra_13
.text:00000000000102D8                 test    al, al
.text:00000000000102DA                 pop     rdx
.text:00000000000102DB                 pop     rcx
.text:00000000000102DC                 jnz     loc_103C7
.text:00000000000102E2                 cmp     qword ptr [rsp+0D8h+var_78], 0
.text:00000000000102E8                 jz      loc_103F8
.text:00000000000102EE
.text:00000000000102EE loc_102EE:                              ; CODE XREF: update_cur_sifted_state+808↓j
.text:00000000000102EE                 mov     rax, [rsp+0D8h+var_A0]
.text:00000000000102F3                 mov     rsi, r13
.text:00000000000102F6                 mov     qword ptr [rsp+0D8h+var_68], r14
.text:00000000000102FB                 mov     qword ptr [rsp+0D8h+var_68+8], rbp
.text:0000000000010300                 lea     rdi, [rax+20h]
.text:0000000000010304                 call    re_node_set_insert
.text:0000000000010309                 test    al, al
.text:000000000001030B                 jz      loc_10464
.text:0000000000010311                 mov     rdi, [rsp+0D8h+var_C0]
.text:0000000000010316                 mov     rax, qword ptr [rsp+0D8h+var_78]
.text:000000000001031B                 mov     rsi, [rsp+0D8h+var_A0]
.text:0000000000010320                 mov     r15, [rax+rdi]
.text:0000000000010324                 mov     rdi, [rsp+0D8h+var_D0]
.text:0000000000010329                 call    sift_states_backward
.text:000000000001032E                 test    eax, eax
.text:0000000000010330                 jnz     loc_1043E
.text:0000000000010336                 mov     rsi, [rbx+8]
.text:000000000001033A                 mov     rdx, qword ptr [rsp+0D8h+var_78]
.text:000000000001033F                 test    rsi, rsi
.text:0000000000010342                 jz      short loc_1035D
.text:0000000000010344                 lea     rcx, [rbp+1]
.text:0000000000010348                 mov     rdi, r12
.text:000000000001034B                 call    merge_state_array
.text:0000000000010350                 test    eax, eax
.text:0000000000010352                 jnz     loc_1043E
.text:0000000000010358                 mov     rdx, qword ptr [rsp+0D8h+var_78]
.text:000000000001035D
.text:000000000001035D loc_1035D:                              ; CODE XREF: update_cur_sifted_state+712↑j
.text:000000000001035D                 mov     r11, [rsp+0D8h+var_A0]
.text:0000000000010362                 mov     rax, [rsp+0D8h+var_C0]
.text:0000000000010367                 mov     rdi, [rsp+0D8h+var_50]
.text:000000000001036F                 lea     r9, [r11+30h]
.text:0000000000010373                 mov     [rdx+rax], r15
.text:0000000000010377                 mov     rdx, r13
.text:000000000001037A                 mov     rsi, r9
.text:000000000001037D                 call    re_node_set_contains_isra_3
.text:0000000000010382                 sub     rax, 1
.text:0000000000010386                 mov     rdx, rax
.text:0000000000010389                 js      short loc_10397
.text:000000000001038B                 lea     rdi, [r11+28h]
.text:000000000001038F                 mov     rsi, r9
.text:0000000000010392                 call    re_node_set_remove_at_isra_4_part_5
.text:0000000000010397
.text:0000000000010397 loc_10397:                              ; CODE XREF: update_cur_sifted_state+759↑j
.text:0000000000010397                 mov     rcx, [rsp+0D8h+var_D0]
.text:000000000001039C                 lea     rax, [r13+r13*4+0]
.text:00000000000103A1                 mov     rdx, [rcx+0D8h]
.text:00000000000103A8                 lea     rax, [rdx+rax*8]
.text:00000000000103AC                 nop     dword ptr [rax+00h]
.text:00000000000103B0
.text:00000000000103B0 loc_103B0:                              ; CODE XREF: update_cur_sifted_state+79A↓j
.text:00000000000103B0                 add     r13, 1
.text:00000000000103B4                 cmp     byte ptr [rax+20h], 0
.text:00000000000103B8                 lea     r15, [rax+28h]
.text:00000000000103BC                 jz      short loc_103F0
.text:00000000000103BE
.text:00000000000103BE loc_103BE:                              ; CODE XREF: update_cur_sifted_state+624↑j
.text:00000000000103BE                 cmp     r14, [r15]
.text:00000000000103C1                 jz      loc_10260
.text:00000000000103C7
.text:00000000000103C7 loc_103C7:                              ; CODE XREF: update_cur_sifted_state+658↑j
.text:00000000000103C7                                         ; update_cur_sifted_state+668↑j ...
.text:00000000000103C7                 mov     rax, r15
.text:00000000000103CA                 jmp     short loc_103B0
.text:00000000000103CA ; ---------------------------------------------------------------------------
.text:00000000000103CC                 align 10h
.text:00000000000103D0
.text:00000000000103D0 loc_103D0:                              ; CODE XREF: update_cur_sifted_state+640↑j
.text:00000000000103D0                 mov     rax, [r12+28h]
.text:00000000000103D5                 mov     rdi, [rsp+0D8h+var_A8]
.text:00000000000103DA                 mov     rax, [rax+rdi+10h]
.text:00000000000103DF                 mov     r10, [rax]
.text:00000000000103E2                 jmp     loc_10284
.text:00000000000103E2 ; ---------------------------------------------------------------------------
.text:00000000000103E7                 align 10h
.text:00000000000103F0
.text:00000000000103F0 loc_103F0:                              ; CODE XREF: update_cur_sifted_state+78C↑j
.text:00000000000103F0                 mov     r15, rbx
.text:00000000000103F3                 jmp     loc_FE98
.text:00000000000103F8 ; ---------------------------------------------------------------------------
.text:00000000000103F8
.text:00000000000103F8 loc_103F8:                              ; CODE XREF: update_cur_sifted_state+6B8↑j
.text:00000000000103F8                 mov     rax, [rbx+30h]
.text:00000000000103FC                 lea     rsi, [rbx+20h]
.text:0000000000010400                 movdqa  xmm0, xmmword ptr [rbx]
.text:0000000000010404                 mov     [rsp+0D8h+ptr], rax
.text:000000000001040C                 mov     rax, [rsp+0D8h+var_A0]
.text:0000000000010411                 movaps  [rsp+0D8h+var_78], xmm0
.text:0000000000010416                 lea     rdi, [rax+20h]
.text:000000000001041A                 movdqa  xmm0, xmmword ptr [rbx+10h]
.text:000000000001041F                 movaps  [rsp+0D8h+var_68], xmm0
.text:0000000000010424                 movdqa  xmm0, xmmword ptr [rbx+20h]
.text:0000000000010429                 movaps  xmmword ptr [rsp+80h], xmm0
.text:0000000000010431                 call    re_node_set_init_copy
.text:0000000000010436                 test    eax, eax
.text:0000000000010438                 jz      loc_102EE
.text:000000000001043E
.text:000000000001043E loc_1043E:                              ; CODE XREF: update_cur_sifted_state+700↑j
.text:000000000001043E                                         ; update_cur_sifted_state+722↑j ...
.text:000000000001043E                 cmp     qword ptr [rsp+0D8h+var_78], 0
.text:0000000000010444                 jz      loc_FCC8
.text:000000000001044A
.text:000000000001044A loc_1044A:                              ; CODE XREF: update_cur_sifted_state+849↓j
.text:000000000001044A                 mov     rdi, [rsp+0D8h+ptr] ; ptr
.text:0000000000010452                 mov     dword ptr [rsp+0D8h+var_D0], eax
.text:0000000000010456                 call    _free
.text:000000000001045B                 mov     eax, dword ptr [rsp+0D8h+var_D0]
.text:000000000001045F                 jmp     loc_FCC8
.text:0000000000010464 ; ---------------------------------------------------------------------------
.text:0000000000010464
.text:0000000000010464 loc_10464:                              ; CODE XREF: update_cur_sifted_state+6DB↑j
.text:0000000000010464                 mov     eax, 0Ch
.text:0000000000010469                 jmp     short loc_1043E
.text:000000000001046B ; ---------------------------------------------------------------------------
.text:000000000001046B
.text:000000000001046B loc_1046B:                              ; CODE XREF: update_cur_sifted_state+27C↑j
.text:000000000001046B                 cmp     qword ptr [rsp+0D8h+var_78], 0
.text:0000000000010471                 jz      loc_FF10
.text:0000000000010477                 xor     eax, eax
.text:0000000000010479                 jmp     short loc_1044A
.text:000000000001047B ; ---------------------------------------------------------------------------
.text:000000000001047B
.text:000000000001047B loc_1047B:                              ; CODE XREF: update_cur_sifted_state+A9↑j
.text:000000000001047B                 call    ___stack_chk_fail
.text:000000000001047B ; } // starts at FC30
.text:000000000001047B update_cur_sifted_state endp
.text:000000000001047B
.text:0000000000010480
.text:0000000000010480 ; =============== S U B R O U T I N E =======================================
.text:0000000000010480
.text:0000000000010480
.text:0000000000010480 parse_bracket_element_constprop_37 proc near
.text:0000000000010480                                         ; CODE XREF: parse_expression+90F↓p
.text:0000000000010480                                         ; parse_expression+E67↓p
.text:0000000000010480
.text:0000000000010480 var_40          = byte ptr -40h
.text:0000000000010480 var_30          = qword ptr -30h
.text:0000000000010480
.text:0000000000010480 ; __unwind {
.text:0000000000010480                 push    r14
.text:0000000000010482                 push    r13
.text:0000000000010484                 mov     r10, rsi
.text:0000000000010487                 push    r12
.text:0000000000010489                 push    rbp
.text:000000000001048A                 movsxd  r11, ecx
.text:000000000001048D                 push    rbx
.text:000000000001048E                 mov     rbp, rdx
.text:0000000000010491                 mov     rbx, rdi
.text:0000000000010494                 sub     rsp, 20h
.text:0000000000010498                 mov     r12, [rsi+48h]
.text:000000000001049C                 mov     rax, fs:28h
.text:00000000000104A5                 mov     [rsp+48h+var_30], rax
.text:00000000000104AA                 xor     eax, eax
.text:00000000000104AC                 cmp     dword ptr [rsi+90h], 1
.text:00000000000104B3                 jz      short loc_10508
.text:00000000000104B5                 mov     rsi, r12
.text:00000000000104B8                 mov     rdi, r10
.text:00000000000104BB                 call    re_string_char_size_at_part_0
.text:00000000000104C0                 cmp     eax, 1
.text:00000000000104C3                 jle     short loc_10508
.text:00000000000104C5                 mov     rdx, [r10+10h]
.text:00000000000104C9                 cdqe
.text:00000000000104CB                 mov     dword ptr [rbx], 1
.text:00000000000104D1                 add     rax, r12
.text:00000000000104D4                 mov     edx, [rdx+r12*4]
.text:00000000000104D8                 mov     [rbx+8], edx
.text:00000000000104DB                 mov     [r10+48h], rax
.text:00000000000104DF                 xor     eax, eax
.text:00000000000104E1
.text:00000000000104E1 loc_104E1:                              ; CODE XREF: parse_bracket_element_constprop_37+BD↓j
.text:00000000000104E1                                         ; parse_bracket_element_constprop_37+161↓j ...
.text:00000000000104E1                 mov     rcx, [rsp+48h+var_30]
.text:00000000000104E6                 xor     rcx, fs:28h
.text:00000000000104EF                 jnz     loc_106D8
.text:00000000000104F5                 add     rsp, 20h
.text:00000000000104F9                 pop     rbx
.text:00000000000104FA                 pop     rbp
.text:00000000000104FB                 pop     r12
.text:00000000000104FD                 pop     r13
.text:00000000000104FF                 pop     r14
.text:0000000000010501                 retn
.text:0000000000010501 ; ---------------------------------------------------------------------------
.text:0000000000010502                 align 8
.text:0000000000010508
.text:0000000000010508 loc_10508:                              ; CODE XREF: parse_bracket_element_constprop_37+33↑j
.text:0000000000010508                                         ; parse_bracket_element_constprop_37+43↑j
.text:0000000000010508                 movzx   eax, byte ptr [rbp+8]
.text:000000000001050C                 add     r11, r12
.text:000000000001050F                 mov     [r10+48h], r11
.text:0000000000010513                 mov     edx, eax
.text:0000000000010515                 and     edx, 0FFFFFFFBh
.text:0000000000010518                 cmp     dl, 1Ah
.text:000000000001051B                 jz      short loc_10540
.text:000000000001051D                 cmp     al, 1Ch
.text:000000000001051F                 jz      short loc_10540
.text:0000000000010521                 cmp     al, 16h
.text:0000000000010523                 jnz     short loc_1052E
.text:0000000000010525                 test    r9b, r9b
.text:0000000000010528                 jz      loc_10672
.text:000000000001052E
.text:000000000001052E loc_1052E:                              ; CODE XREF: parse_bracket_element_constprop_37+A3↑j
.text:000000000001052E                                         ; parse_bracket_element_constprop_37+20A↓j
.text:000000000001052E                 movzx   eax, byte ptr [rbp+0]
.text:0000000000010532                 mov     dword ptr [rbx], 0
.text:0000000000010538                 mov     [rbx+8], al
.text:000000000001053B                 xor     eax, eax
.text:000000000001053D                 jmp     short loc_104E1
.text:000000000001053D ; ---------------------------------------------------------------------------
.text:000000000001053F                 align 20h
.text:0000000000010540
.text:0000000000010540 loc_10540:                              ; CODE XREF: parse_bracket_element_constprop_37+9B↑j
.text:0000000000010540                                         ; parse_bracket_element_constprop_37+9F↑j
.text:0000000000010540                 mov     r12, [r10+68h]
.text:0000000000010544                 cmp     r11, r12
.text:0000000000010547                 jge     loc_10668
.text:000000000001054D                 movzx   r13d, byte ptr [rbp+0]
.text:0000000000010552                 xor     r8d, r8d
.text:0000000000010555                 jmp     short loc_10582
.text:0000000000010555 ; ---------------------------------------------------------------------------
.text:0000000000010557                 align 20h
.text:0000000000010560
.text:0000000000010560 loc_10560:                              ; CODE XREF: parse_bracket_element_constprop_37+126↓j
.text:0000000000010560                                         ; parse_bracket_element_constprop_37+130↓j
.text:0000000000010560                 mov     rax, [rbx+8]
.text:0000000000010564                 mov     [rax+r8], r9b
.text:0000000000010568                 add     r8, 1
.text:000000000001056C                 cmp     r8, 20h ; ' '
.text:0000000000010570                 jz      loc_10668
.text:0000000000010576                 movzx   eax, byte ptr [rbp+8]
.text:000000000001057A                 mov     r11, [r10+48h]
.text:000000000001057E                 mov     r12, [r10+68h]
.text:0000000000010582
.text:0000000000010582 loc_10582:                              ; CODE XREF: parse_bracket_element_constprop_37+D5↑j
.text:0000000000010582                 cmp     al, 1Eh
.text:0000000000010584                 movsxd  r14, r8d
.text:0000000000010587                 jz      short loc_105F0
.text:0000000000010589
.text:0000000000010589 loc_10589:                              ; CODE XREF: parse_bracket_element_constprop_37+178↓j
.text:0000000000010589                                         ; parse_bracket_element_constprop_37+197↓j ...
.text:0000000000010589                 mov     rdx, [r10+8]
.text:000000000001058D                 lea     rax, [r11+1]
.text:0000000000010591                 mov     [r10+48h], rax
.text:0000000000010595                 movzx   r9d, byte ptr [rdx+r11]
.text:000000000001059A
.text:000000000001059A loc_1059A:                              ; CODE XREF: parse_bracket_element_constprop_37+1DD↓j
.text:000000000001059A                                         ; parse_bracket_element_constprop_37+22C↓j
.text:000000000001059A                 cmp     rax, r12
.text:000000000001059D                 jge     loc_10668
.text:00000000000105A3                 cmp     r13b, r9b
.text:00000000000105A6                 jnz     short loc_10560
.text:00000000000105A8                 mov     rdx, [r10+8]
.text:00000000000105AC                 cmp     byte ptr [rdx+rax], 5Dh ; ']'
.text:00000000000105B0                 jnz     short loc_10560
.text:00000000000105B2                 add     rax, 1
.text:00000000000105B6                 mov     [r10+48h], rax
.text:00000000000105BA                 mov     rax, [rbx+8]
.text:00000000000105BE                 mov     byte ptr [rax+r14], 0
.text:00000000000105C3                 movzx   eax, byte ptr [rbp+8]
.text:00000000000105C7                 cmp     al, 1Ch
.text:00000000000105C9                 jz      loc_106CB
.text:00000000000105CF                 cmp     al, 1Eh
.text:00000000000105D1                 jz      loc_106BE
.text:00000000000105D7                 cmp     al, 1Ah
.text:00000000000105D9                 jz      loc_106B1
.text:00000000000105DF                 xor     eax, eax
.text:00000000000105E1                 jmp     loc_104E1
.text:00000000000105E1 ; ---------------------------------------------------------------------------
.text:00000000000105E6                 align 10h
.text:00000000000105F0
.text:00000000000105F0 loc_105F0:                              ; CODE XREF: parse_bracket_element_constprop_37+107↑j
.text:00000000000105F0                 cmp     byte ptr [r10+8Bh], 0
.text:00000000000105F8                 jz      short loc_10589
.text:00000000000105FA                 cmp     byte ptr [r10+8Ch], 0
.text:0000000000010602                 jz      loc_10698
.text:0000000000010608                 cmp     r11, [r10+30h]
.text:000000000001060C                 jz      short loc_1061D
.text:000000000001060E                 mov     rax, [r10+10h]
.text:0000000000010612                 cmp     dword ptr [rax+r11*4], 0FFFFFFFFh
.text:0000000000010617                 jz      loc_10589
.text:000000000001061D
.text:000000000001061D loc_1061D:                              ; CODE XREF: parse_bracket_element_constprop_37+18C↑j
.text:000000000001061D                 mov     rax, [r10+18h]
.text:0000000000010621                 mov     rax, [rax+r11*8]
.text:0000000000010625                 add     rax, [r10]
.text:0000000000010628                 add     rax, [r10+28h]
.text:000000000001062C                 movzx   r9d, byte ptr [rax]
.text:0000000000010630                 test    r9b, 80h
.text:0000000000010634                 jnz     loc_10589
.text:000000000001063A                 cmp     dword ptr [r10+90h], 1
.text:0000000000010642                 mov     eax, 1
.text:0000000000010647                 jz      short loc_10656
.text:0000000000010649                 mov     rsi, r11
.text:000000000001064C                 mov     rdi, r10
.text:000000000001064F                 call    re_string_char_size_at_part_0
.text:0000000000010654                 cdqe
.text:0000000000010656
.text:0000000000010656 loc_10656:                              ; CODE XREF: parse_bracket_element_constprop_37+1C7↑j
.text:0000000000010656                 add     rax, r11
.text:0000000000010659                 mov     [r10+48h], rax
.text:000000000001065D                 jmp     loc_1059A
.text:000000000001065D ; ---------------------------------------------------------------------------
.text:0000000000010662                 align 8
.text:0000000000010668
.text:0000000000010668 loc_10668:                              ; CODE XREF: parse_bracket_element_constprop_37+C7↑j
.text:0000000000010668                                         ; parse_bracket_element_constprop_37+F0↑j ...
.text:0000000000010668                 mov     eax, 7
.text:000000000001066D                 jmp     loc_104E1
.text:0000000000010672 ; ---------------------------------------------------------------------------
.text:0000000000010672
.text:0000000000010672 loc_10672:                              ; CODE XREF: parse_bracket_element_constprop_37+A8↑j
.text:0000000000010672                 mov     rdi, rsp
.text:0000000000010675                 mov     rdx, r8
.text:0000000000010678                 mov     rsi, r10
.text:000000000001067B                 call    peek_token_bracket
.text:0000000000010680                 cmp     [rsp+48h+var_40], 15h
.text:0000000000010685                 mov     eax, 0Bh
.text:000000000001068A                 jz      loc_1052E
.text:0000000000010690                 jmp     loc_104E1
.text:0000000000010690 ; ---------------------------------------------------------------------------
.text:0000000000010695                 align 8
.text:0000000000010698
.text:0000000000010698 loc_10698:                              ; CODE XREF: parse_bracket_element_constprop_37+182↑j
.text:0000000000010698                 lea     rax, [r11+1]
.text:000000000001069C                 add     r11, [r10]
.text:000000000001069F                 mov     rdx, [r10+28h]
.text:00000000000106A3                 mov     [r10+48h], rax
.text:00000000000106A7                 movzx   r9d, byte ptr [r11+rdx]
.text:00000000000106AC                 jmp     loc_1059A
.text:00000000000106B1 ; ---------------------------------------------------------------------------
.text:00000000000106B1
.text:00000000000106B1 loc_106B1:                              ; CODE XREF: parse_bracket_element_constprop_37+159↑j
.text:00000000000106B1                 mov     dword ptr [rbx], 3
.text:00000000000106B7                 xor     eax, eax
.text:00000000000106B9                 jmp     loc_104E1
.text:00000000000106BE ; ---------------------------------------------------------------------------
.text:00000000000106BE
.text:00000000000106BE loc_106BE:                              ; CODE XREF: parse_bracket_element_constprop_37+151↑j
.text:00000000000106BE                 mov     dword ptr [rbx], 4
.text:00000000000106C4                 xor     eax, eax
.text:00000000000106C6                 jmp     loc_104E1
.text:00000000000106CB ; ---------------------------------------------------------------------------
.text:00000000000106CB
.text:00000000000106CB loc_106CB:                              ; CODE XREF: parse_bracket_element_constprop_37+149↑j
.text:00000000000106CB                 mov     dword ptr [rbx], 2
.text:00000000000106D1                 xor     eax, eax
.text:00000000000106D3                 jmp     loc_104E1
.text:00000000000106D8 ; ---------------------------------------------------------------------------
.text:00000000000106D8
.text:00000000000106D8 loc_106D8:                              ; CODE XREF: parse_bracket_element_constprop_37+6F↑j
.text:00000000000106D8                 call    ___stack_chk_fail
.text:00000000000106D8 ; } // starts at 10480
.text:00000000000106D8 parse_bracket_element_constprop_37 endp
.text:00000000000106D8
.text:00000000000106D8 ; ---------------------------------------------------------------------------
.text:00000000000106DD                 align 20h
.text:00000000000106E0
.text:00000000000106E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000106E0
.text:00000000000106E0
.text:00000000000106E0 peek_token      proc near               ; CODE XREF: peek_token+6BA↓p
.text:00000000000106E0                                         ; fetch_number+29↓p ...
.text:00000000000106E0
.text:00000000000106E0 var_68          = qword ptr -68h
.text:00000000000106E0 var_60          = qword ptr -60h
.text:00000000000106E0 var_58          = byte ptr -58h
.text:00000000000106E0 var_50          = byte ptr -50h
.text:00000000000106E0 var_40          = qword ptr -40h
.text:00000000000106E0
.text:00000000000106E0 ; __unwind {
.text:00000000000106E0                 push    r15
.text:00000000000106E2                 push    r14
.text:00000000000106E4                 push    r13
.text:00000000000106E6                 push    r12
.text:00000000000106E8                 push    rbp
.text:00000000000106E9                 push    rbx
.text:00000000000106EA                 mov     rbp, rdi
.text:00000000000106ED                 sub     rsp, 38h
.text:00000000000106F1                 mov     r14, [rsi+48h]
.text:00000000000106F5                 mov     rax, fs:28h
.text:00000000000106FE                 mov     [rsp+68h+var_40], rax
.text:0000000000010703                 xor     eax, eax
.text:0000000000010705                 cmp     [rsi+68h], r14
.text:0000000000010709                 jle     loc_107A0
.text:000000000001070F                 movzx   r13d, byte ptr [rdi+0Ah]
.text:0000000000010714                 mov     r15, rdx
.text:0000000000010717                 mov     rdx, [rsi+8]
.text:000000000001071B                 mov     rbx, rsi
.text:000000000001071E                 movzx   r12d, byte ptr [rdx+r14]
.text:0000000000010723                 and     r13d, 0FFFFFF9Fh
.text:0000000000010727                 mov     [rdi+0Ah], r13b
.text:000000000001072B                 mov     eax, [rsi+90h]
.text:0000000000010731                 mov     [rdi], r12b
.text:0000000000010734                 cmp     eax, 1
.text:0000000000010737                 jle     loc_107D0
.text:000000000001073D                 cmp     r14, [rsi+30h]
.text:0000000000010741                 jz      loc_108E0
.text:0000000000010747                 mov     rcx, [rsi+10h]
.text:000000000001074B                 mov     ecx, [rcx+r14*4]
.text:000000000001074F                 cmp     ecx, 0FFFFFFFFh
.text:0000000000010752                 jz      loc_10830
.text:0000000000010758                 cmp     r12b, 5Ch ; '\'
.text:000000000001075C                 jz      loc_10850
.text:0000000000010762                 mov     byte ptr [rdi+8], 1
.text:0000000000010766
.text:0000000000010766 loc_10766:                              ; CODE XREF: peek_token+216↓j
.text:0000000000010766                 mov     edi, ecx        ; wc
.text:0000000000010768                 mov     [rsp+68h+var_60], rdx
.text:000000000001076D                 mov     dword ptr [rsp+68h+var_68], ecx
.text:0000000000010770                 call    _iswalnum
.text:0000000000010775                 mov     ecx, dword ptr [rsp+68h+var_68]
.text:0000000000010778                 test    eax, eax
.text:000000000001077A                 setnz   al
.text:000000000001077D                 cmp     ecx, 5Fh ; '_'
.text:0000000000010780                 setz    cl
.text:0000000000010783                 or      eax, ecx
.text:0000000000010785                 shl     eax, 6
.text:0000000000010788                 or      r13d, eax
.text:000000000001078B                 mov     [rbp+0Ah], r13b
.text:000000000001078F                 mov     rdx, [rsp+68h+var_60]
.text:0000000000010794                 jmp     short loc_1080C
.text:0000000000010794 ; ---------------------------------------------------------------------------
.text:0000000000010796                 align 20h
.text:00000000000107A0
.text:00000000000107A0 loc_107A0:                              ; CODE XREF: peek_token+29↑j
.text:00000000000107A0                 mov     byte ptr [rdi+8], 2
.text:00000000000107A4
.text:00000000000107A4 loc_107A4:                              ; CODE XREF: peek_token+161↓j
.text:00000000000107A4                                         ; peek_token+229↓j ...
.text:00000000000107A4                 mov     rdi, [rsp+68h+var_40]
.text:00000000000107A9                 xor     rdi, fs:28h
.text:00000000000107B2                 jnz     loc_10DD8
.text:00000000000107B8                 add     rsp, 38h
.text:00000000000107BC                 pop     rbx
.text:00000000000107BD                 pop     rbp
.text:00000000000107BE                 pop     r12
.text:00000000000107C0                 pop     r13
.text:00000000000107C2                 pop     r14
.text:00000000000107C4                 pop     r15
.text:00000000000107C6                 retn
.text:00000000000107C6 ; ---------------------------------------------------------------------------
.text:00000000000107C7                 align 10h
.text:00000000000107D0
.text:00000000000107D0 loc_107D0:                              ; CODE XREF: peek_token+57↑j
.text:00000000000107D0                 cmp     r12b, 5Ch ; '\'
.text:00000000000107D4                 jz      short loc_10850
.text:00000000000107D6                 mov     byte ptr [rbp+8], 1
.text:00000000000107DA                 mov     [rsp+68h+var_68], rdx
.text:00000000000107DE                 call    ___ctype_b_loc
.text:00000000000107E3                 mov     rsi, [rax]
.text:00000000000107E6                 movzx   ecx, r12b
.text:00000000000107EA                 movzx   eax, word ptr [rsi+rcx*2]
.text:00000000000107EE                 shr     ax, 3
.text:00000000000107F2                 and     eax, 1
.text:00000000000107F5                 cmp     r12b, 5Fh ; '_'
.text:00000000000107F9                 setz    cl
.text:00000000000107FC                 or      eax, ecx
.text:00000000000107FE                 shl     eax, 6
.text:0000000000010801                 or      r13d, eax
.text:0000000000010804                 mov     [rbp+0Ah], r13b
.text:0000000000010808                 mov     rdx, [rsp+68h+var_68]
.text:000000000001080C
.text:000000000001080C loc_1080C:                              ; CODE XREF: peek_token+B4↑j
.text:000000000001080C                 sub     r12d, 0Ah       ; switch 116 cases
.text:0000000000010810                 cmp     r12b, 73h
.text:0000000000010814                 ja      def_1082C       ; jumptable 000000000001082C default case, cases 11-35,37-39,44,45,47-62,64-90,92,93,95-122
.text:000000000001081A                 lea     rcx, jpt_1082C
.text:0000000000010821                 movzx   r12d, r12b
.text:0000000000010825                 movsxd  rax, ds:(jpt_1082C - 15994h)[rcx+r12*4]
.text:0000000000010829                 add     rax, rcx
.text:000000000001082C                 jmp     rax             ; switch jump
.text:000000000001082C ; ---------------------------------------------------------------------------
.text:000000000001082E                 align 10h
.text:0000000000010830
.text:0000000000010830 loc_10830:                              ; CODE XREF: peek_token+72↑j
.text:0000000000010830                 or      r13d, 20h
.text:0000000000010834                 mov     byte ptr [rdi+8], 1
.text:0000000000010838                 mov     eax, 1
.text:000000000001083D                 mov     [rdi+0Ah], r13b
.text:0000000000010841                 jmp     loc_107A4
.text:0000000000010841 ; ---------------------------------------------------------------------------
.text:0000000000010846                 align 10h
.text:0000000000010850
.text:0000000000010850 loc_10850:                              ; CODE XREF: peek_token+7C↑j
.text:0000000000010850                                         ; peek_token+F4↑j ...
.text:0000000000010850                 lea     rsi, [r14+1]
.text:0000000000010854                 cmp     rsi, [rbx+58h]
.text:0000000000010858                 jge     loc_10900
.text:000000000001085E                 cmp     byte ptr [rbx+8Bh], 0
.text:0000000000010865                 jnz     loc_10CF0
.text:000000000001086B
.text:000000000001086B loc_1086B:                              ; CODE XREF: peek_token+66F↓j
.text:000000000001086B                 movzx   edi, byte ptr [rdx+r14+1]
.text:0000000000010871                 mov     r12d, edi
.text:0000000000010874                 mov     dword ptr [rsp+68h+var_60], edi
.text:0000000000010878
.text:0000000000010878 loc_10878:                              ; CODE XREF: peek_token+675↓j
.text:0000000000010878                                         ; peek_token+6A6↓j
.text:0000000000010878                 cmp     eax, 1
.text:000000000001087B                 mov     [rbp+0], r12b
.text:000000000001087F                 mov     byte ptr [rbp+8], 1
.text:0000000000010883                 jle     loc_10CD0
.text:0000000000010889                 mov     rax, [rbx+10h]
.text:000000000001088D                 mov     r8d, [rax+rsi*4]
.text:0000000000010891
.text:0000000000010891 loc_10891:                              ; CODE XREF: peek_token+6F3↓j
.text:0000000000010891                 mov     edi, r8d        ; wc
.text:0000000000010894                 mov     dword ptr [rsp+68h+var_68], r8d
.text:0000000000010898                 call    _iswalnum
.text:000000000001089D                 mov     r8d, dword ptr [rsp+68h+var_68]
.text:00000000000108A1                 test    eax, eax
.text:00000000000108A3                 setnz   al
.text:00000000000108A6                 cmp     r8d, 5Fh ; '_'
.text:00000000000108AA
.text:00000000000108AA loc_108AA:                              ; CODE XREF: peek_token+60B↓j
.text:00000000000108AA                 setz    dl
.text:00000000000108AD                 lea     ecx, [r12-27h]  ; switch 87 cases
.text:00000000000108B2                 or      eax, edx
.text:00000000000108B4                 shl     eax, 6
.text:00000000000108B7                 or      r13d, eax
.text:00000000000108BA                 cmp     cl, 56h
.text:00000000000108BD                 mov     [rbp+0Ah], r13b
.text:00000000000108C1                 ja      def_108D8       ; jumptable 00000000000108D8 default case, cases 42,44-48,58,59,61,64,65,67-82,84-86,88-95,97,99-114,116-118,120-122
.text:00000000000108C7                 lea     rdx, jpt_108D8
.text:00000000000108CE                 movzx   ecx, cl
.text:00000000000108D1                 movsxd  rax, ds:(jpt_108D8 - 15B64h)[rdx+rcx*4]
.text:00000000000108D5                 add     rax, rdx
.text:00000000000108D8                 jmp     rax             ; switch jump
.text:00000000000108D8 ; ---------------------------------------------------------------------------
.text:00000000000108DA                 align 20h
.text:00000000000108E0
.text:00000000000108E0 loc_108E0:                              ; CODE XREF: peek_token+61↑j
.text:00000000000108E0                 cmp     r12b, 5Ch ; '\'
.text:00000000000108E4                 jz      loc_10850
.text:00000000000108EA                 mov     rax, [rbx+10h]
.text:00000000000108EE                 mov     byte ptr [rbp+8], 1
.text:00000000000108F2                 mov     ecx, [rax+r14*4]
.text:00000000000108F6                 jmp     loc_10766
.text:00000000000108F6 ; ---------------------------------------------------------------------------
.text:00000000000108FB                 align 20h
.text:0000000000010900
.text:0000000000010900 loc_10900:                              ; CODE XREF: peek_token+178↑j
.text:0000000000010900                 mov     byte ptr [rbp+8], 24h ; '$'
.text:0000000000010904                 mov     eax, 1
.text:0000000000010909                 jmp     loc_107A4
.text:0000000000010909 ; ---------------------------------------------------------------------------
.text:000000000001090E                 align 10h
.text:0000000000010910
.text:0000000000010910 loc_10910:                              ; CODE XREF: peek_token+14C↑j
.text:0000000000010910                                         ; DATA XREF: .rodata:jpt_1082C↓o
.text:0000000000010910                 and     r15d, 1200h     ; jumptable 000000000001082C case 125
.text:0000000000010917                 mov     eax, 1
.text:000000000001091C                 cmp     r15, 1200h
.text:0000000000010923                 jnz     loc_107A4
.text:0000000000010929
.text:0000000000010929 loc_10929:                              ; CODE XREF: peek_token+451↓j
.text:0000000000010929                 mov     byte ptr [rbp+8], 18h
.text:000000000001092D                 jmp     loc_107A4
.text:000000000001092D ; ---------------------------------------------------------------------------
.text:0000000000010932                 align 8
.text:0000000000010938
.text:0000000000010938 loc_10938:                              ; CODE XREF: peek_token+14C↑j
.text:0000000000010938                                         ; DATA XREF: .rodata:jpt_1082C↓o
.text:0000000000010938                 and     r15d, 8400h     ; jumptable 000000000001082C case 124
.text:000000000001093F                 cmp     r15, 8000h
.text:0000000000010946                 jz      loc_10A22
.text:000000000001094C
.text:000000000001094C def_1082C:                              ; CODE XREF: peek_token+134↑j
.text:000000000001094C                                         ; peek_token+14C↑j ...
.text:000000000001094C                 mov     eax, 1          ; jumptable 000000000001082C default case, cases 11-35,37-39,44,45,47-62,64-90,92,93,95-122
.text:0000000000010951                 jmp     loc_107A4
.text:0000000000010951 ; ---------------------------------------------------------------------------
.text:0000000000010956                 align 20h
.text:0000000000010960
.text:0000000000010960 loc_10960:                              ; CODE XREF: peek_token+14C↑j
.text:0000000000010960                                         ; DATA XREF: .rodata:jpt_1082C↓o
.text:0000000000010960                 and     r15d, 1200h     ; jumptable 000000000001082C case 123
.text:0000000000010967                 mov     eax, 1
.text:000000000001096C                 cmp     r15, 1200h
.text:0000000000010973                 jnz     loc_107A4
.text:0000000000010979
.text:0000000000010979 loc_10979:                              ; CODE XREF: peek_token+3FD↓j
.text:0000000000010979                 mov     byte ptr [rbp+8], 17h
.text:000000000001097D                 jmp     loc_107A4
.text:000000000001097D ; ---------------------------------------------------------------------------
.text:0000000000010982                 align 8
.text:0000000000010988
.text:0000000000010988 loc_10988:                              ; CODE XREF: peek_token+14C↑j
.text:0000000000010988                                         ; DATA XREF: .rodata:jpt_1082C↓o
.text:0000000000010988                 test    r15d, 800008h   ; jumptable 000000000001082C case 94
.text:000000000001098F                 jnz     short loc_1099A
.text:0000000000010991                 test    r14, r14
.text:0000000000010994                 jnz     loc_10D5A
.text:000000000001099A
.text:000000000001099A loc_1099A:                              ; CODE XREF: peek_token+2AF↑j
.text:000000000001099A                                         ; peek_token+693↓j
.text:000000000001099A                 mov     byte ptr [rbp+8], 0Ch
.text:000000000001099E                 mov     dword ptr [rbp+0], 10h
.text:00000000000109A5                 mov     eax, 1
.text:00000000000109AA                 jmp     loc_107A4
.text:00000000000109AA ; ---------------------------------------------------------------------------
.text:00000000000109AF                 align 10h
.text:00000000000109B0
.text:00000000000109B0 loc_109B0:                              ; CODE XREF: peek_token+14C↑j
.text:00000000000109B0                                         ; DATA XREF: .rodata:jpt_1082C↓o
.text:00000000000109B0                 mov     byte ptr [rbp+8], 14h ; jumptable 000000000001082C case 91
.text:00000000000109B4                 mov     eax, 1
.text:00000000000109B9                 jmp     loc_107A4
.text:00000000000109B9 ; ---------------------------------------------------------------------------
.text:00000000000109BE                 align 20h
.text:00000000000109C0
.text:00000000000109C0 loc_109C0:                              ; CODE XREF: peek_token+14C↑j
.text:00000000000109C0                                         ; DATA XREF: .rodata:jpt_1082C↓o
.text:00000000000109C0                 test    r15d, 402h      ; jumptable 000000000001082C case 63
.text:00000000000109C7                 mov     eax, 1
.text:00000000000109CC                 jnz     loc_107A4
.text:00000000000109D2
.text:00000000000109D2 loc_109D2:                              ; CODE XREF: peek_token+508↓j
.text:00000000000109D2                 mov     byte ptr [rbp+8], 13h
.text:00000000000109D6                 jmp     loc_107A4
.text:00000000000109D6 ; ---------------------------------------------------------------------------
.text:00000000000109DB                 align 20h
.text:00000000000109E0
.text:00000000000109E0 loc_109E0:                              ; CODE XREF: peek_token+14C↑j
.text:00000000000109E0                                         ; DATA XREF: .rodata:jpt_1082C↓o
.text:00000000000109E0                 mov     byte ptr [rbp+8], 5 ; jumptable 000000000001082C case 46
.text:00000000000109E4                 mov     eax, 1
.text:00000000000109E9                 jmp     loc_107A4
.text:00000000000109E9 ; ---------------------------------------------------------------------------
.text:00000000000109EE                 align 10h
.text:00000000000109F0
.text:00000000000109F0 loc_109F0:                              ; CODE XREF: peek_token+14C↑j
.text:00000000000109F0                                         ; DATA XREF: .rodata:jpt_1082C↓o
.text:00000000000109F0                 test    r15d, 402h      ; jumptable 000000000001082C case 43
.text:00000000000109F7                 mov     eax, 1
.text:00000000000109FC                 jnz     loc_107A4
.text:0000000000010A02
.text:0000000000010A02 loc_10A02:                              ; CODE XREF: peek_token+590↓j
.text:0000000000010A02                 mov     byte ptr [rbp+8], 12h
.text:0000000000010A06                 jmp     loc_107A4
.text:0000000000010A06 ; ---------------------------------------------------------------------------
.text:0000000000010A0B                 align 10h
.text:0000000000010A10
.text:0000000000010A10 loc_10A10:                              ; CODE XREF: peek_token+14C↑j
.text:0000000000010A10                                         ; DATA XREF: .rodata:jpt_1082C↓o
.text:0000000000010A10                 test    r15d, 800h      ; jumptable 000000000001082C case 10
.text:0000000000010A17                 mov     eax, 1
.text:0000000000010A1C                 jz      loc_107A4
.text:0000000000010A22
.text:0000000000010A22 loc_10A22:                              ; CODE XREF: peek_token+266↑j
.text:0000000000010A22                 mov     byte ptr [rbp+8], 0Ah
.text:0000000000010A26                 mov     eax, 1
.text:0000000000010A2B                 jmp     loc_107A4
.text:0000000000010A30 ; ---------------------------------------------------------------------------
.text:0000000000010A30
.text:0000000000010A30 loc_10A30:                              ; CODE XREF: peek_token+14C↑j
.text:0000000000010A30                                         ; DATA XREF: .rodata:jpt_1082C↓o
.text:0000000000010A30                 mov     byte ptr [rbp+8], 0Bh ; jumptable 000000000001082C case 42
.text:0000000000010A34                 mov     eax, 1
.text:0000000000010A39                 jmp     loc_107A4
.text:0000000000010A39 ; ---------------------------------------------------------------------------
.text:0000000000010A3E                 align 20h
.text:0000000000010A40
.text:0000000000010A40 loc_10A40:                              ; CODE XREF: peek_token+14C↑j
.text:0000000000010A40                                         ; DATA XREF: .rodata:jpt_1082C↓o
.text:0000000000010A40                 test    r15d, 2000h     ; jumptable 000000000001082C case 41
.text:0000000000010A47                 mov     eax, 1
.text:0000000000010A4C                 jz      loc_107A4
.text:0000000000010A52
.text:0000000000010A52 loc_10A52:                              ; CODE XREF: peek_token+5A7↓j
.text:0000000000010A52                 mov     byte ptr [rbp+8], 9
.text:0000000000010A56                 jmp     loc_107A4
.text:0000000000010A56 ; ---------------------------------------------------------------------------
.text:0000000000010A5B                 align 20h
.text:0000000000010A60
.text:0000000000010A60 loc_10A60:                              ; CODE XREF: peek_token+14C↑j
.text:0000000000010A60                                         ; DATA XREF: .rodata:jpt_1082C↓o
.text:0000000000010A60                 test    r15d, 2000h     ; jumptable 000000000001082C case 40
.text:0000000000010A67                 mov     eax, 1
.text:0000000000010A6C                 jz      loc_107A4
.text:0000000000010A72
.text:0000000000010A72 loc_10A72:                              ; CODE XREF: peek_token+5BE↓j
.text:0000000000010A72                 mov     byte ptr [rbp+8], 8
.text:0000000000010A76                 jmp     loc_107A4
.text:0000000000010A76 ; ---------------------------------------------------------------------------
.text:0000000000010A7B                 align 20h
.text:0000000000010A80
.text:0000000000010A80 loc_10A80:                              ; CODE XREF: peek_token+14C↑j
.text:0000000000010A80                                         ; DATA XREF: .rodata:jpt_1082C↓o
.text:0000000000010A80                 test    r15b, 8         ; jumptable 000000000001082C case 36
.text:0000000000010A84                 jnz     short loc_10A94
.text:0000000000010A86                 add     r14, 1
.text:0000000000010A8A                 cmp     r14, [rbx+58h]
.text:0000000000010A8E                 jnz     loc_10D8B
.text:0000000000010A94
.text:0000000000010A94 loc_10A94:                              ; CODE XREF: peek_token+3A4↑j
.text:0000000000010A94                                         ; peek_token+6DA↓j
.text:0000000000010A94                 mov     byte ptr [rbp+8], 0Ch
.text:0000000000010A98                 mov     dword ptr [rbp+0], 20h ; ' '
.text:0000000000010A9F                 mov     eax, 1
.text:0000000000010AA4                 jmp     loc_107A4
.text:0000000000010AA9 ; ---------------------------------------------------------------------------
.text:0000000000010AA9
.text:0000000000010AA9 loc_10AA9:                              ; CODE XREF: peek_token+1F8↑j
.text:0000000000010AA9                                         ; DATA XREF: .rodata:jpt_108D8↓o
.text:0000000000010AA9                 test    r15d, 8400h     ; jumptable 00000000000108D8 case 124
.text:0000000000010AB0                 mov     eax, 2
.text:0000000000010AB5                 jnz     loc_107A4
.text:0000000000010ABB                 mov     byte ptr [rbp+8], 0Ah
.text:0000000000010ABF                 jmp     loc_107A4
.text:0000000000010AC4 ; ---------------------------------------------------------------------------
.text:0000000000010AC4
.text:0000000000010AC4 loc_10AC4:                              ; CODE XREF: peek_token+1F8↑j
.text:0000000000010AC4                                         ; DATA XREF: .rodata:jpt_108D8↓o
.text:0000000000010AC4                 and     r15d, 1200h     ; jumptable 00000000000108D8 case 123
.text:0000000000010ACB                 mov     eax, 2
.text:0000000000010AD0                 cmp     r15, 200h
.text:0000000000010AD7                 jnz     loc_107A4
.text:0000000000010ADD                 jmp     loc_10979
.text:0000000000010AE2 ; ---------------------------------------------------------------------------
.text:0000000000010AE2
.text:0000000000010AE2 loc_10AE2:                              ; CODE XREF: peek_token+1F8↑j
.text:0000000000010AE2                                         ; DATA XREF: .rodata:jpt_108D8↓o
.text:0000000000010AE2                 test    r15d, 80000h    ; jumptable 00000000000108D8 case 119
.text:0000000000010AE9                 mov     eax, 2
.text:0000000000010AEE                 jnz     loc_107A4
.text:0000000000010AF4                 mov     byte ptr [rbp+8], 20h ; ' '
.text:0000000000010AF8                 jmp     loc_107A4
.text:0000000000010AFD ; ---------------------------------------------------------------------------
.text:0000000000010AFD
.text:0000000000010AFD loc_10AFD:                              ; CODE XREF: peek_token+1F8↑j
.text:0000000000010AFD                                         ; DATA XREF: .rodata:jpt_108D8↓o
.text:0000000000010AFD                 test    r15d, 80000h    ; jumptable 00000000000108D8 case 115
.text:0000000000010B04                 mov     eax, 2
.text:0000000000010B09                 jnz     loc_107A4
.text:0000000000010B0F                 mov     byte ptr [rbp+8], 22h ; '"'
.text:0000000000010B13                 jmp     loc_107A4
.text:0000000000010B18 ; ---------------------------------------------------------------------------
.text:0000000000010B18
.text:0000000000010B18 loc_10B18:                              ; CODE XREF: peek_token+1F8↑j
.text:0000000000010B18                                         ; DATA XREF: .rodata:jpt_108D8↓o
.text:0000000000010B18                 and     r15d, 1200h     ; jumptable 00000000000108D8 case 125
.text:0000000000010B1F                 mov     eax, 2
.text:0000000000010B24                 cmp     r15, 200h
.text:0000000000010B2B                 jnz     loc_107A4
.text:0000000000010B31                 jmp     loc_10929
.text:0000000000010B36 ; ---------------------------------------------------------------------------
.text:0000000000010B36
.text:0000000000010B36 loc_10B36:                              ; CODE XREF: peek_token+1F8↑j
.text:0000000000010B36                                         ; DATA XREF: .rodata:jpt_108D8↓o
.text:0000000000010B36                 test    r15d, 80000h    ; jumptable 00000000000108D8 case 98
.text:0000000000010B3D                 mov     eax, 2
.text:0000000000010B42                 jnz     loc_107A4
.text:0000000000010B48                 mov     byte ptr [rbp+8], 0Ch
.text:0000000000010B4C                 mov     dword ptr [rbp+0], 100h
.text:0000000000010B53                 jmp     loc_107A4
.text:0000000000010B58 ; ---------------------------------------------------------------------------
.text:0000000000010B58
.text:0000000000010B58 loc_10B58:                              ; CODE XREF: peek_token+1F8↑j
.text:0000000000010B58                                         ; DATA XREF: .rodata:jpt_108D8↓o
.text:0000000000010B58                 test    r15d, 80000h    ; jumptable 00000000000108D8 case 96
.text:0000000000010B5F                 mov     eax, 2
.text:0000000000010B64                 jnz     loc_107A4
.text:0000000000010B6A                 mov     byte ptr [rbp+8], 0Ch
.text:0000000000010B6E                 mov     dword ptr [rbp+0], 40h ; '@'
.text:0000000000010B75                 jmp     loc_107A4
.text:0000000000010B7A ; ---------------------------------------------------------------------------
.text:0000000000010B7A
.text:0000000000010B7A loc_10B7A:                              ; CODE XREF: peek_token+1F8↑j
.text:0000000000010B7A                                         ; DATA XREF: .rodata:jpt_108D8↓o
.text:0000000000010B7A                 test    r15d, 80000h    ; jumptable 00000000000108D8 case 87
.text:0000000000010B81                 mov     eax, 2
.text:0000000000010B86                 jnz     loc_107A4
.text:0000000000010B8C                 mov     byte ptr [rbp+8], 21h ; '!'
.text:0000000000010B90                 jmp     loc_107A4
.text:0000000000010B95 ; ---------------------------------------------------------------------------
.text:0000000000010B95
.text:0000000000010B95 loc_10B95:                              ; CODE XREF: peek_token+1F8↑j
.text:0000000000010B95                                         ; DATA XREF: .rodata:jpt_108D8↓o
.text:0000000000010B95                 test    r15d, 80000h    ; jumptable 00000000000108D8 case 83
.text:0000000000010B9C                 mov     eax, 2
.text:0000000000010BA1                 jnz     loc_107A4
.text:0000000000010BA7                 mov     byte ptr [rbp+8], 23h ; '#'
.text:0000000000010BAB                 jmp     loc_107A4
.text:0000000000010BB0 ; ---------------------------------------------------------------------------
.text:0000000000010BB0
.text:0000000000010BB0 loc_10BB0:                              ; CODE XREF: peek_token+1F8↑j
.text:0000000000010BB0                                         ; DATA XREF: .rodata:jpt_108D8↓o
.text:0000000000010BB0                 test    r15d, 80000h    ; jumptable 00000000000108D8 case 66
.text:0000000000010BB7                 mov     eax, 2
.text:0000000000010BBC                 jnz     loc_107A4
.text:0000000000010BC2                 mov     byte ptr [rbp+8], 0Ch
.text:0000000000010BC6                 mov     dword ptr [rbp+0], 200h
.text:0000000000010BCD                 jmp     loc_107A4
.text:0000000000010BD2 ; ---------------------------------------------------------------------------
.text:0000000000010BD2
.text:0000000000010BD2 loc_10BD2:                              ; CODE XREF: peek_token+1F8↑j
.text:0000000000010BD2                                         ; DATA XREF: .rodata:jpt_108D8↓o
.text:0000000000010BD2                 and     r15d, 402h      ; jumptable 00000000000108D8 case 63
.text:0000000000010BD9                 mov     eax, 2
.text:0000000000010BDE                 cmp     r15, 2
.text:0000000000010BE2                 jnz     loc_107A4
.text:0000000000010BE8                 jmp     loc_109D2
.text:0000000000010BED ; ---------------------------------------------------------------------------
.text:0000000000010BED
.text:0000000000010BED loc_10BED:                              ; CODE XREF: peek_token+1F8↑j
.text:0000000000010BED                                         ; DATA XREF: .rodata:jpt_108D8↓o
.text:0000000000010BED                 test    r15d, 80000h    ; jumptable 00000000000108D8 case 62
.text:0000000000010BF4                 mov     eax, 2
.text:0000000000010BF9                 jnz     loc_107A4
.text:0000000000010BFF                 mov     byte ptr [rbp+8], 0Ch
.text:0000000000010C03                 mov     dword ptr [rbp+0], 9
.text:0000000000010C0A                 jmp     loc_107A4
.text:0000000000010C0F ; ---------------------------------------------------------------------------
.text:0000000000010C0F
.text:0000000000010C0F loc_10C0F:                              ; CODE XREF: peek_token+1F8↑j
.text:0000000000010C0F                                         ; DATA XREF: .rodata:jpt_108D8↓o
.text:0000000000010C0F                 test    r15d, 80000h    ; jumptable 00000000000108D8 case 60
.text:0000000000010C16                 mov     eax, 2
.text:0000000000010C1B                 jnz     loc_107A4
.text:0000000000010C21                 mov     byte ptr [rbp+8], 0Ch
.text:0000000000010C25                 mov     dword ptr [rbp+0], 6
.text:0000000000010C2C                 jmp     loc_107A4
.text:0000000000010C31 ; ---------------------------------------------------------------------------
.text:0000000000010C31
.text:0000000000010C31 loc_10C31:                              ; CODE XREF: peek_token+1F8↑j
.text:0000000000010C31                                         ; DATA XREF: .rodata:jpt_108D8↓o
.text:0000000000010C31                 test    r15d, 4000h     ; jumptable 00000000000108D8 cases 49-57
.text:0000000000010C38                 mov     eax, 2
.text:0000000000010C3D                 jnz     loc_107A4
.text:0000000000010C43                 mov     edx, dword ptr [rsp+68h+var_60]
.text:0000000000010C47                 mov     byte ptr [rbp+8], 4
.text:0000000000010C4B                 sub     edx, 31h ; '1'
.text:0000000000010C4E                 movsxd  rdx, edx
.text:0000000000010C51                 mov     [rbp+0], rdx
.text:0000000000010C55                 jmp     loc_107A4
.text:0000000000010C5A ; ---------------------------------------------------------------------------
.text:0000000000010C5A
.text:0000000000010C5A loc_10C5A:                              ; CODE XREF: peek_token+1F8↑j
.text:0000000000010C5A                                         ; DATA XREF: .rodata:jpt_108D8↓o
.text:0000000000010C5A                 and     r15d, 402h      ; jumptable 00000000000108D8 case 43
.text:0000000000010C61                 mov     eax, 2
.text:0000000000010C66                 cmp     r15, 2
.text:0000000000010C6A                 jnz     loc_107A4
.text:0000000000010C70                 jmp     loc_10A02
.text:0000000000010C75 ; ---------------------------------------------------------------------------
.text:0000000000010C75
.text:0000000000010C75 loc_10C75:                              ; CODE XREF: peek_token+1F8↑j
.text:0000000000010C75                                         ; DATA XREF: .rodata:jpt_108D8↓o
.text:0000000000010C75                 test    r15d, 2000h     ; jumptable 00000000000108D8 case 41
.text:0000000000010C7C                 mov     eax, 2
.text:0000000000010C81                 jnz     loc_107A4
.text:0000000000010C87                 jmp     loc_10A52
.text:0000000000010C8C ; ---------------------------------------------------------------------------
.text:0000000000010C8C
.text:0000000000010C8C loc_10C8C:                              ; CODE XREF: peek_token+1F8↑j
.text:0000000000010C8C                                         ; DATA XREF: .rodata:jpt_108D8↓o
.text:0000000000010C8C                 test    r15d, 2000h     ; jumptable 00000000000108D8 case 40
.text:0000000000010C93                 mov     eax, 2
.text:0000000000010C98                 jnz     loc_107A4
.text:0000000000010C9E                 jmp     loc_10A72
.text:0000000000010CA3 ; ---------------------------------------------------------------------------
.text:0000000000010CA3
.text:0000000000010CA3 loc_10CA3:                              ; CODE XREF: peek_token+1F8↑j
.text:0000000000010CA3                                         ; DATA XREF: .rodata:jpt_108D8↓o
.text:0000000000010CA3                 test    r15d, 80000h    ; jumptable 00000000000108D8 case 39
.text:0000000000010CAA                 mov     eax, 2
.text:0000000000010CAF                 jnz     loc_107A4
.text:0000000000010CB5                 mov     byte ptr [rbp+8], 0Ch
.text:0000000000010CB9                 mov     dword ptr [rbp+0], 80h
.text:0000000000010CC0                 jmp     loc_107A4
.text:0000000000010CC5 ; ---------------------------------------------------------------------------
.text:0000000000010CC5
.text:0000000000010CC5 def_108D8:                              ; CODE XREF: peek_token+1E1↑j
.text:0000000000010CC5                                         ; peek_token+1F8↑j
.text:0000000000010CC5                                         ; DATA XREF: ...
.text:0000000000010CC5                 mov     eax, 2          ; jumptable 00000000000108D8 default case, cases 42,44-48,58,59,61,64,65,67-82,84-86,88-95,97,99-114,116-118,120-122
.text:0000000000010CCA                 jmp     loc_107A4
.text:0000000000010CCA ; ---------------------------------------------------------------------------
.text:0000000000010CCF                 align 10h
.text:0000000000010CD0
.text:0000000000010CD0 loc_10CD0:                              ; CODE XREF: peek_token+1A3↑j
.text:0000000000010CD0                 call    ___ctype_b_loc
.text:0000000000010CD5                 mov     rsi, [rax]
.text:0000000000010CD8                 movzx   edx, r12b
.text:0000000000010CDC                 movzx   eax, word ptr [rsi+rdx*2]
.text:0000000000010CE0                 shr     ax, 3
.text:0000000000010CE4                 and     eax, 1
.text:0000000000010CE7                 cmp     r12b, 5Fh ; '_'
.text:0000000000010CEB                 jmp     loc_108AA
.text:0000000000010CF0 ; ---------------------------------------------------------------------------
.text:0000000000010CF0
.text:0000000000010CF0 loc_10CF0:                              ; CODE XREF: peek_token+185↑j
.text:0000000000010CF0                 cmp     eax, 1
.text:0000000000010CF3                 jle     short loc_10D24
.text:0000000000010CF5                 mov     rcx, [rbx+10h]
.text:0000000000010CF9                 lea     rdi, ds:0[rsi*4]
.text:0000000000010D01                 mov     r8d, [rcx+rsi*4]
.text:0000000000010D05                 cmp     r8d, 0FFFFFFFFh
.text:0000000000010D09                 jz      loc_10DBF
.text:0000000000010D0F                 lea     r9, [r14+2]
.text:0000000000010D13                 cmp     [rbx+30h], r9
.text:0000000000010D17                 jz      short loc_10D24
.text:0000000000010D19                 cmp     dword ptr [rcx+rdi+4], 0FFFFFFFFh
.text:0000000000010D1E                 jz      loc_10DBF
.text:0000000000010D24
.text:0000000000010D24 loc_10D24:                              ; CODE XREF: peek_token+613↑j
.text:0000000000010D24                                         ; peek_token+637↑j
.text:0000000000010D24                 cmp     byte ptr [rbx+8Ch], 0
.text:0000000000010D2B                 mov     rcx, [rbx]
.text:0000000000010D2E                 mov     rdi, [rbx+28h]
.text:0000000000010D32                 jz      short loc_10D78
.text:0000000000010D34                 mov     r8, [rbx+18h]
.text:0000000000010D38                 add     rcx, rdi
.text:0000000000010D3B                 add     rcx, [r8+rsi*8]
.text:0000000000010D3F                 movzx   edi, byte ptr [rcx]
.text:0000000000010D42                 mov     r12d, edi
.text:0000000000010D45                 mov     dword ptr [rsp+68h+var_60], edi
.text:0000000000010D49                 and     edi, 80h
.text:0000000000010D4F                 jnz     loc_1086B
.text:0000000000010D55                 jmp     loc_10878
.text:0000000000010D5A ; ---------------------------------------------------------------------------
.text:0000000000010D5A
.text:0000000000010D5A loc_10D5A:                              ; CODE XREF: peek_token+2B4↑j
.text:0000000000010D5A                 cmp     byte ptr [rdx+r14-1], 0Ah
.text:0000000000010D60                 jnz     def_1082C       ; jumptable 000000000001082C default case, cases 11-35,37-39,44,45,47-62,64-90,92,93,95-122
.text:0000000000010D66                 test    r15d, 800h
.text:0000000000010D6D                 jz      def_1082C       ; jumptable 000000000001082C default case, cases 11-35,37-39,44,45,47-62,64-90,92,93,95-122
.text:0000000000010D73                 jmp     loc_1099A
.text:0000000000010D78 ; ---------------------------------------------------------------------------
.text:0000000000010D78
.text:0000000000010D78 loc_10D78:                              ; CODE XREF: peek_token+652↑j
.text:0000000000010D78                 add     rcx, rsi
.text:0000000000010D7B                 movzx   edi, byte ptr [rcx+rdi]
.text:0000000000010D7F                 mov     r12d, edi
.text:0000000000010D82                 mov     dword ptr [rsp+68h+var_60], edi
.text:0000000000010D86                 jmp     loc_10878
.text:0000000000010D8B ; ---------------------------------------------------------------------------
.text:0000000000010D8B
.text:0000000000010D8B loc_10D8B:                              ; CODE XREF: peek_token+3AE↑j
.text:0000000000010D8B                 lea     rdi, [rsp+68h+var_58]
.text:0000000000010D90                 mov     rdx, r15
.text:0000000000010D93                 mov     [rbx+48h], r14
.text:0000000000010D97                 mov     rsi, rbx
.text:0000000000010D9A                 call    peek_token
.text:0000000000010D9F                 movzx   eax, [rsp+68h+var_50]
.text:0000000000010DA4                 sub     qword ptr [rbx+48h], 1
.text:0000000000010DA9                 lea     edx, [rax-9]
.text:0000000000010DAC                 mov     eax, 1
.text:0000000000010DB1                 cmp     dl, 1
.text:0000000000010DB4                 ja      loc_107A4
.text:0000000000010DBA                 jmp     loc_10A94
.text:0000000000010DBF ; ---------------------------------------------------------------------------
.text:0000000000010DBF
.text:0000000000010DBF loc_10DBF:                              ; CODE XREF: peek_token+629↑j
.text:0000000000010DBF                                         ; peek_token+63E↑j
.text:0000000000010DBF                 movzx   eax, byte ptr [rdx+r14+1]
.text:0000000000010DC5                 mov     byte ptr [rbp+8], 1
.text:0000000000010DC9                 mov     r12d, eax
.text:0000000000010DCC                 mov     [rbp+0], al
.text:0000000000010DCF                 mov     dword ptr [rsp+68h+var_60], eax
.text:0000000000010DD3                 jmp     loc_10891
.text:0000000000010DD8 ; ---------------------------------------------------------------------------
.text:0000000000010DD8
.text:0000000000010DD8 loc_10DD8:                              ; CODE XREF: peek_token+D2↑j
.text:0000000000010DD8                 call    ___stack_chk_fail
.text:0000000000010DD8 ; } // starts at 106E0
.text:0000000000010DD8 peek_token      endp
.text:0000000000010DD8
.text:0000000000010DD8 ; ---------------------------------------------------------------------------
.text:0000000000010DDD                 align 20h
.text:0000000000010DE0
.text:0000000000010DE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000010DE0
.text:0000000000010DE0
.text:0000000000010DE0 fetch_number    proc near               ; CODE XREF: parse_expression+527↓p
.text:0000000000010DE0                                         ; parse_expression+611↓p
.text:0000000000010DE0 ; __unwind {
.text:0000000000010DE0                 push    r14
.text:0000000000010DE2                 mov     r14, rdi
.text:0000000000010DE5                 push    r13
.text:0000000000010DE7                 mov     r13, rsi
.text:0000000000010DEA                 push    r12
.text:0000000000010DEC                 mov     r12, 0FFFFFFFFFFFFFFFEh
.text:0000000000010DF3                 push    rbp
.text:0000000000010DF4                 mov     rbp, rdx
.text:0000000000010DF7                 push    rbx
.text:0000000000010DF8                 mov     rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000010DFF                 nop
.text:0000000000010E00
.text:0000000000010E00 loc_10E00:                              ; CODE XREF: fetch_number+52↓j
.text:0000000000010E00                                         ; fetch_number+87↓j ...
.text:0000000000010E00                 mov     rdx, rbp
.text:0000000000010E03                 mov     rsi, r14
.text:0000000000010E06                 mov     rdi, r13
.text:0000000000010E09                 call    peek_token
.text:0000000000010E0E                 cdqe
.text:0000000000010E10                 add     [r14+48h], rax
.text:0000000000010E14                 movzx   eax, byte ptr [r13+8]
.text:0000000000010E19                 movzx   edx, byte ptr [r13+0]
.text:0000000000010E1E                 cmp     al, 2
.text:0000000000010E20                 jz      short loc_10E70
.text:0000000000010E22                 cmp     al, 18h
.text:0000000000010E24                 jz      short loc_10E77
.text:0000000000010E26                 cmp     dl, 2Ch ; ','
.text:0000000000010E29                 jz      short loc_10E77
.text:0000000000010E2B                 cmp     al, 1
.text:0000000000010E2D                 jz      short loc_10E38
.text:0000000000010E2F
.text:0000000000010E2F loc_10E2F:                              ; CODE XREF: fetch_number+5D↓j
.text:0000000000010E2F                                         ; fetch_number+63↓j
.text:0000000000010E2F                 mov     rbx, r12
.text:0000000000010E32                 jmp     short loc_10E00
.text:0000000000010E32 ; ---------------------------------------------------------------------------
.text:0000000000010E34                 align 8
.text:0000000000010E38
.text:0000000000010E38 loc_10E38:                              ; CODE XREF: fetch_number+4D↑j
.text:0000000000010E38                 lea     eax, [rdx-30h]
.text:0000000000010E3B                 cmp     al, 9
.text:0000000000010E3D                 ja      short loc_10E2F
.text:0000000000010E3F                 cmp     rbx, 0FFFFFFFFFFFFFFFEh
.text:0000000000010E43                 jz      short loc_10E2F
.text:0000000000010E45                 cmp     rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000010E49                 jz      short loc_10E88
.text:0000000000010E4B                 lea     rax, [rbx+rbx*4]
.text:0000000000010E4F                 lea     rbx, [rdx+rax*2]
.text:0000000000010E53                 mov     eax, 8030h
.text:0000000000010E58                 cmp     rbx, 8030h
.text:0000000000010E5F                 cmovg   rbx, rax
.text:0000000000010E63                 sub     rbx, 30h ; '0'
.text:0000000000010E67                 jmp     short loc_10E00
.text:0000000000010E67 ; ---------------------------------------------------------------------------
.text:0000000000010E69                 align 10h
.text:0000000000010E70
.text:0000000000010E70 loc_10E70:                              ; CODE XREF: fetch_number+40↑j
.text:0000000000010E70                 mov     rbx, 0FFFFFFFFFFFFFFFEh
.text:0000000000010E77
.text:0000000000010E77 loc_10E77:                              ; CODE XREF: fetch_number+44↑j
.text:0000000000010E77                                         ; fetch_number+49↑j
.text:0000000000010E77                 mov     rax, rbx
.text:0000000000010E7A                 pop     rbx
.text:0000000000010E7B                 pop     rbp
.text:0000000000010E7C                 pop     r12
.text:0000000000010E7E                 pop     r13
.text:0000000000010E80                 pop     r14
.text:0000000000010E82                 retn
.text:0000000000010E82 ; ---------------------------------------------------------------------------
.text:0000000000010E83                 align 8
.text:0000000000010E88
.text:0000000000010E88 loc_10E88:                              ; CODE XREF: fetch_number+69↑j
.text:0000000000010E88                 movzx   ebx, dl
.text:0000000000010E8B                 sub     ebx, 30h ; '0'
.text:0000000000010E8E                 movsxd  rbx, ebx
.text:0000000000010E91                 jmp     loc_10E00
.text:0000000000010E91 ; } // starts at 10DE0
.text:0000000000010E91 fetch_number    endp
.text:0000000000010E91
.text:0000000000010E91 ; ---------------------------------------------------------------------------
.text:0000000000010E96                 align 20h
.text:0000000000010EA0
.text:0000000000010EA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000010EA0
.text:0000000000010EA0
.text:0000000000010EA0 parse_expression proc near              ; CODE XREF: parse_expression+FFA↓p
.text:0000000000010EA0                                         ; parse_branch+39↓p ...
.text:0000000000010EA0
.text:0000000000010EA0 var_158         = qword ptr -158h
.text:0000000000010EA0 var_148         = qword ptr -148h
.text:0000000000010EA0 var_140         = qword ptr -140h
.text:0000000000010EA0 var_138         = qword ptr -138h
.text:0000000000010EA0 var_130         = qword ptr -130h
.text:0000000000010EA0 var_128         = xmmword ptr -128h
.text:0000000000010EA0 var_118         = qword ptr -118h
.text:0000000000010EA0 var_110         = qword ptr -110h
.text:0000000000010EA0 var_101         = byte ptr -101h
.text:0000000000010EA0 var_100         = qword ptr -100h
.text:0000000000010EA0 var_F8          = qword ptr -0F8h
.text:0000000000010EA0 var_F0          = qword ptr -0F0h
.text:0000000000010EA0 var_E8          = qword ptr -0E8h
.text:0000000000010EA0 ptr             = qword ptr -0E0h
.text:0000000000010EA0 size            = qword ptr -0D8h
.text:0000000000010EA0 var_D0          = dword ptr -0D0h
.text:0000000000010EA0 var_CC          = dword ptr -0CCh
.text:0000000000010EA0 var_C0          = qword ptr -0C0h
.text:0000000000010EA0 var_B8          = dword ptr -0B8h
.text:0000000000010EA0 var_B0          = qword ptr -0B0h
.text:0000000000010EA0 var_A8          = qword ptr -0A8h
.text:0000000000010EA0 var_A0          = qword ptr -0A0h
.text:0000000000010EA0 var_98          = byte ptr -98h
.text:0000000000010EA0 var_90          = byte ptr -90h
.text:0000000000010EA0 var_88          = byte ptr -88h
.text:0000000000010EA0 var_68          = byte ptr -68h
.text:0000000000010EA0 var_40          = qword ptr -40h
.text:0000000000010EA0
.text:0000000000010EA0 ; __unwind {
.text:0000000000010EA0                 push    r15
.text:0000000000010EA2                 push    r14
.text:0000000000010EA4                 push    r13
.text:0000000000010EA6                 push    r12
.text:0000000000010EA8                 push    rbp
.text:0000000000010EA9                 push    rbx
.text:0000000000010EAA                 sub     rsp, 128h
.text:0000000000010EB1                 mov     [rsp+158h+var_138], rcx
.text:0000000000010EB6                 movzx   ecx, byte ptr [rdx+8]
.text:0000000000010EBA                 mov     rax, fs:28h
.text:0000000000010EC3                 mov     [rsp+158h+var_40], rax
.text:0000000000010ECB                 xor     eax, eax
.text:0000000000010ECD                 mov     rax, [rsi]
.text:0000000000010ED0                 mov     [rsp+158h+var_140], rdx
.text:0000000000010ED5                 mov     [rsp+158h+var_118], r9
.text:0000000000010EDA                 cmp     cl, 24h         ; switch 37 cases
.text:0000000000010EDD                 mov     [rsp+158h+var_148], rax
.text:0000000000010EE2                 ja      def_10EFF       ; jumptable 0000000000010EFF default case, cases 0,2,3,6,7,10,13-17,21,22,25-31
.text:0000000000010EE8                 mov     rbp, rsi
.text:0000000000010EEB                 lea     rsi, jpt_10EFF
.text:0000000000010EF2                 movzx   edx, cl
.text:0000000000010EF5                 mov     r14, rdi
.text:0000000000010EF8                 movsxd  rax, ds:(jpt_10EFF - 15CC0h)[rsi+rdx*4]
.text:0000000000010EFC                 add     rax, rsi
.text:0000000000010EFF                 jmp     rax             ; switch jump
.text:0000000000010F01 ; ---------------------------------------------------------------------------
.text:0000000000010F01
.text:0000000000010F01 loc_10F01:                              ; CODE XREF: parse_expression+5F↑j
.text:0000000000010F01                                         ; DATA XREF: .rodata:jpt_10EFF↓o
.text:0000000000010F01                 mov     rbx, [rbp+30h]  ; jumptable 0000000000010EFF case 8
.text:0000000000010F05                 mov     r15, [rsp+158h+var_138]
.text:0000000000010F0A                 mov     rsi, rdi
.text:0000000000010F0D                 mov     r13, [rsp+158h+var_140]
.text:0000000000010F12                 mov     [rsp+158h+var_158], r8
.text:0000000000010F16                 lea     rax, [rbx+1]
.text:0000000000010F1A                 mov     rdx, r15
.text:0000000000010F1D                 or      rdx, 800000h
.text:0000000000010F24                 mov     rdi, r13
.text:0000000000010F27                 mov     [rbp+30h], rax
.text:0000000000010F2B                 call    peek_token
.text:0000000000010F30                 cdqe
.text:0000000000010F32                 add     [r14+48h], rax
.text:0000000000010F36                 xor     eax, eax
.text:0000000000010F38                 cmp     byte ptr [r13+8], 9
.text:0000000000010F3D                 mov     rdx, r13
.text:0000000000010F40                 jz      loc_11A40
.text:0000000000010F46                 mov     r13, [rsp+158h+var_118]
.text:0000000000010F4B                 mov     r8, [rsp+158h+var_158]
.text:0000000000010F4F                 mov     rcx, r15
.text:0000000000010F52                 mov     rsi, rbp
.text:0000000000010F55                 mov     rdi, r14
.text:0000000000010F58                 add     r8, 1
.text:0000000000010F5C                 mov     r9, r13
.text:0000000000010F5F                 call    parse_reg_exp
.text:0000000000010F64                 mov     r11d, [r13+0]
.text:0000000000010F68                 test    r11d, r11d
.text:0000000000010F6B                 jnz     short def_10EFF ; jumptable 0000000000010EFF default case, cases 0,2,3,6,7,10,13-17,21,22,25-31
.text:0000000000010F6D                 mov     rdx, [rsp+158h+var_140]
.text:0000000000010F72                 cmp     byte ptr [rdx+8], 9
.text:0000000000010F76                 jz      loc_11A40
.text:0000000000010F7C                 test    rax, rax
.text:0000000000010F7F                 jz      short loc_10F92
.text:0000000000010F81                 lea     rsi, free_tree
.text:0000000000010F88                 xor     edx, edx
.text:0000000000010F8A                 mov     rdi, rax
.text:0000000000010F8D                 call    postorder
.text:0000000000010F92
.text:0000000000010F92 loc_10F92:                              ; CODE XREF: parse_expression+DF↑j
.text:0000000000010F92                 mov     rax, [rsp+158h+var_118]
.text:0000000000010F97                 mov     dword ptr [rax], 8
.text:0000000000010F9D                 nop     dword ptr [rax]
.text:0000000000010FA0
.text:0000000000010FA0 def_10EFF:                              ; CODE XREF: parse_expression+42↑j
.text:0000000000010FA0                                         ; parse_expression+5F↑j ...
.text:0000000000010FA0                 mov     [rsp+158h+var_130], 0 ; jumptable 0000000000010EFF default case, cases 0,2,3,6,7,10,13-17,21,22,25-31
.text:0000000000010FA9                 nop     dword ptr [rax+00000000h]
.text:0000000000010FB0
.text:0000000000010FB0 loc_10FB0:                              ; CODE XREF: parse_expression+1CA↓j
.text:0000000000010FB0                                         ; parse_expression+1DE↓j ...
.text:0000000000010FB0                 mov     rdi, [rsp+158h+var_40]
.text:0000000000010FB8                 xor     rdi, fs:28h
.text:0000000000010FC1                 mov     rax, [rsp+158h+var_130]
.text:0000000000010FC6                 jnz     loc_1233E
.text:0000000000010FCC                 add     rsp, 128h
.text:0000000000010FD3                 pop     rbx
.text:0000000000010FD4                 pop     rbp
.text:0000000000010FD5                 pop     r12
.text:0000000000010FD7                 pop     r13
.text:0000000000010FD9                 pop     r14
.text:0000000000010FDB                 pop     r15
.text:0000000000010FDD                 retn
.text:0000000000010FDE ; ---------------------------------------------------------------------------
.text:0000000000010FDE
.text:0000000000010FDE loc_10FDE:                              ; CODE XREF: parse_expression+5F↑j
.text:0000000000010FDE                                         ; DATA XREF: .rodata:jpt_10EFF↓o
.text:0000000000010FDE                 test    [rsp+158h+var_138], 1000000h ; jumptable 0000000000010EFF case 23
.text:0000000000010FE7                 jnz     loc_1123D
.text:0000000000010FED
.text:0000000000010FED loc_10FED:                              ; CODE XREF: parse_expression+5F↑j
.text:0000000000010FED                                         ; DATA XREF: .rodata:jpt_10EFF↓o
.text:0000000000010FED                 mov     rax, [rsp+158h+var_138] ; jumptable 0000000000010EFF cases 11,18,19
.text:0000000000010FF2                 test    al, 20h
.text:0000000000010FF4                 jnz     loc_1123D
.text:0000000000010FFA                 test    al, 10h
.text:0000000000010FFC                 jnz     loc_11E65
.text:0000000000011002                 cmp     cl, 9
.text:0000000000011005                 jz      loc_11A18       ; jumptable 0000000000010EFF case 9
.text:000000000001100B
.text:000000000001100B loc_1100B:                              ; CODE XREF: parse_expression+5F↑j
.text:000000000001100B                                         ; parse_expression+B81↓j
.text:000000000001100B                                         ; DATA XREF: ...
.text:000000000001100B                 mov     rax, [rsp+158h+var_148] ; jumptable 0000000000010EFF case 24
.text:0000000000011010                 mov     r8, [rsp+158h+var_140]
.text:0000000000011015                 xor     ecx, ecx
.text:0000000000011017                 xor     edx, edx
.text:0000000000011019                 lea     rsi, [rax+80h]
.text:0000000000011020                 lea     rdi, [rax+70h]
.text:0000000000011024                 mov     byte ptr [r8+8], 1
.text:0000000000011029                 call    create_token_tree_isra_16
.text:000000000001102E                 test    rax, rax
.text:0000000000011031                 mov     [rsp+158h+var_130], rax
.text:0000000000011036                 jz      loc_11A08
.text:000000000001103C
.text:000000000001103C loc_1103C:                              ; CODE XREF: parse_expression+9A0↓j
.text:000000000001103C                                         ; parse_expression+9A9↓j ...
.text:000000000001103C                 mov     rbx, [rsp+158h+var_140]
.text:0000000000011041                 mov     rdx, [rsp+158h+var_138]
.text:0000000000011046                 mov     rsi, r14
.text:0000000000011049                 lea     r15, [rsp+158h+var_98]
.text:0000000000011051                 mov     rdi, rbx
.text:0000000000011054                 call    peek_token
.text:0000000000011059                 cdqe
.text:000000000001105B                 add     [r14+48h], rax
.text:000000000001105F                 movzx   eax, byte ptr [rbx+8]
.text:0000000000011063                 nop     dword ptr [rax+rax+00h]
.text:0000000000011068
.text:0000000000011068 loc_11068:                              ; CODE XREF: parse_expression+370↓j
.text:0000000000011068                                         ; parse_expression+37C↓j
.text:0000000000011068                 cmp     al, 17h
.text:000000000001106A                 ja      loc_10FB0
.text:0000000000011070                 cmp     al, 12h
.text:0000000000011072                 mov     ecx, 8C0800h
.text:0000000000011077                 setz    bl
.text:000000000001107A                 bt      rcx, rax
.text:000000000001107E                 jnb     loc_10FB0
.text:0000000000011084                 mov     rcx, [rsp+158h+var_140]
.text:0000000000011089                 cmp     al, 17h
.text:000000000001108B                 mov     rbp, [r14+48h]
.text:000000000001108F                 movdqa  xmm0, xmmword ptr [rcx]
.text:0000000000011093                 jz      loc_113B8
.text:0000000000011099                 cmp     al, 13h
.text:000000000001109B                 movzx   ebx, bl
.text:000000000001109E                 jz      loc_11350
.text:00000000000110A4                 mov     rdx, [rsp+158h+var_138]
.text:00000000000110A9                 mov     rdi, [rsp+158h+var_140]
.text:00000000000110AE                 mov     rsi, r14
.text:00000000000110B1                 call    peek_token
.text:00000000000110B6                 cdqe
.text:00000000000110B8                 add     [r14+48h], rax
.text:00000000000110BC                 cmp     [rsp+158h+var_130], 0
.text:00000000000110C2                 jz      loc_11450
.text:00000000000110C8                 mov     [rsp+158h+var_158], 0FFFFFFFFFFFFFFFFh
.text:00000000000110D0
.text:00000000000110D0 loc_110D0:                              ; CODE XREF: parse_expression+4E3↓j
.text:00000000000110D0                 test    rbx, rbx
.text:00000000000110D3                 mov     rbp, [rsp+158h+var_130]
.text:00000000000110D8                 mov     qword ptr [rsp+158h+var_128], 0
.text:00000000000110E1                 jg      loc_11260
.text:00000000000110E7
.text:00000000000110E7 loc_110E7:                              ; CODE XREF: parse_expression+471↓j
.text:00000000000110E7                 cmp     byte ptr [rbp+30h], 11h
.text:00000000000110EB                 jz      loc_11430
.text:00000000000110F1
.text:00000000000110F1 loc_110F1:                              ; CODE XREF: parse_expression+5A3↓j
.text:00000000000110F1                 cmp     [rsp+158h+var_158], 0FFFFFFFFFFFFFFFFh
.text:00000000000110F6                 mov     rdx, rbp
.text:00000000000110F9                 mov     r8, r15
.text:00000000000110FC                 setz    al
.text:00000000000110FF                 xor     ecx, ecx
.text:0000000000011101                 add     eax, 0Ah
.text:0000000000011104                 mov     [rsp+158h+var_90], al
.text:000000000001110B                 mov     rax, [rsp+158h+var_148]
.text:0000000000011110                 lea     r12, [rax+70h]
.text:0000000000011114                 lea     r13, [rax+80h]
.text:000000000001111B                 mov     rdi, r12
.text:000000000001111E                 mov     rsi, r13
.text:0000000000011121                 call    create_token_tree_isra_16
.text:0000000000011126                 test    rax, rax
.text:0000000000011129                 mov     rdx, rax
.text:000000000001112C                 jz      loc_11320
.text:0000000000011132                 add     rbx, 2
.text:0000000000011136                 cmp     rbx, [rsp+158h+var_158]
.text:000000000001113A                 jg      short loc_111BB
.text:000000000001113C                 mov     [rsp+158h+var_110], r14
.text:0000000000011141                 mov     r14, rax
.text:0000000000011144
.text:0000000000011144 loc_11144:                              ; CODE XREF: parse_expression+311↓j
.text:0000000000011144                 mov     rsi, [rsp+158h+var_148]
.text:0000000000011149                 mov     rdi, rbp
.text:000000000001114C                 call    duplicate_tree
.text:0000000000011151                 mov     r8, r15
.text:0000000000011154                 mov     rbp, rax
.text:0000000000011157                 mov     rcx, rax
.text:000000000001115A                 mov     rdx, r14
.text:000000000001115D                 mov     rsi, r13
.text:0000000000011160                 mov     rdi, r12
.text:0000000000011163                 mov     [rsp+158h+var_90], 10h
.text:000000000001116B                 call    create_token_tree_isra_16
.text:0000000000011170                 test    rbp, rbp
.text:0000000000011173                 jz      loc_11320
.text:0000000000011179                 test    rax, rax
.text:000000000001117C                 jz      loc_11320
.text:0000000000011182                 xor     ecx, ecx
.text:0000000000011184                 mov     r8, r15
.text:0000000000011187                 mov     rdx, rax
.text:000000000001118A                 mov     rsi, r13
.text:000000000001118D                 mov     rdi, r12
.text:0000000000011190                 mov     [rsp+158h+var_90], 0Ah
.text:0000000000011198                 call    create_token_tree_isra_16
.text:000000000001119D                 test    rax, rax
.text:00000000000111A0                 mov     r14, rax
.text:00000000000111A3                 jz      loc_11320
.text:00000000000111A9                 add     rbx, 1
.text:00000000000111AD                 cmp     rbx, [rsp+158h+var_158]
.text:00000000000111B1                 jle     short loc_11144
.text:00000000000111B3                 mov     r14, [rsp+158h+var_110]
.text:00000000000111B8                 mov     rdx, rax
.text:00000000000111BB
.text:00000000000111BB loc_111BB:                              ; CODE XREF: parse_expression+29A↑j
.text:00000000000111BB                 mov     rax, qword ptr [rsp+158h+var_128]
.text:00000000000111C0                 test    rax, rax
.text:00000000000111C3                 jz      loc_11470
.text:00000000000111C9                 mov     rcx, rdx
.text:00000000000111CC                 mov     r8, r15
.text:00000000000111CF                 mov     rdx, rax
.text:00000000000111D2                 mov     rsi, r13
.text:00000000000111D5                 mov     rdi, r12
.text:00000000000111D8                 mov     [rsp+158h+var_90], 10h
.text:00000000000111E0                 call    create_token_tree_isra_16
.text:00000000000111E5
.text:00000000000111E5 loc_111E5:                              ; CODE XREF: parse_expression+581↓j
.text:00000000000111E5                 mov     rdi, [rsp+158h+var_118]
.text:00000000000111EA                 mov     edx, [rdi]
.text:00000000000111EC                 test    edx, edx
.text:00000000000111EE                 jz      short loc_111F9
.text:00000000000111F0                 test    rax, rax
.text:00000000000111F3                 jz      loc_1154B
.text:00000000000111F9
.text:00000000000111F9 loc_111F9:                              ; CODE XREF: parse_expression+34E↑j
.text:00000000000111F9                 mov     [rsp+158h+var_130], rax
.text:00000000000111FE
.text:00000000000111FE loc_111FE:                              ; CODE XREF: parse_expression+510↓j
.text:00000000000111FE                                         ; parse_expression+5D5↓j
.text:00000000000111FE                 test    [rsp+158h+var_138], 1000000h
.text:0000000000011207                 mov     rax, [rsp+158h+var_140]
.text:000000000001120C                 movzx   eax, byte ptr [rax+8]
.text:0000000000011210                 jz      loc_11068
.text:0000000000011216                 cmp     al, 0Bh
.text:0000000000011218                 jz      short loc_11222
.text:000000000001121A                 cmp     al, 17h
.text:000000000001121C                 jnz     loc_11068
.text:0000000000011222
.text:0000000000011222 loc_11222:                              ; CODE XREF: parse_expression+378↑j
.text:0000000000011222                 mov     rax, [rsp+158h+var_130]
.text:0000000000011227                 test    rax, rax
.text:000000000001122A                 jz      short loc_1123D
.text:000000000001122C                 lea     rsi, free_tree
.text:0000000000011233                 xor     edx, edx
.text:0000000000011235                 mov     rdi, rax
.text:0000000000011238                 call    postorder
.text:000000000001123D
.text:000000000001123D loc_1123D:                              ; CODE XREF: parse_expression+147↑j
.text:000000000001123D                                         ; parse_expression+154↑j ...
.text:000000000001123D                 mov     rax, [rsp+158h+var_118]
.text:0000000000011242                 mov     [rsp+158h+var_130], 0
.text:000000000001124B                 mov     dword ptr [rax], 0Dh
.text:0000000000011251                 jmp     loc_10FB0
.text:0000000000011251 ; ---------------------------------------------------------------------------
.text:0000000000011256                 align 20h
.text:0000000000011260
.text:0000000000011260 loc_11260:                              ; CODE XREF: parse_expression+241↑j
.text:0000000000011260                 cmp     rbx, 1
.text:0000000000011264                 jz      loc_11A9C
.text:000000000001126A                 mov     rax, [rsp+158h+var_148]
.text:000000000001126F                 mov     r13, rbp
.text:0000000000011272                 mov     [rsp+158h+var_110], r14
.text:0000000000011277                 lea     r12, [rax+80h]
.text:000000000001127E                 lea     rdi, [rax+70h]
.text:0000000000011282                 mov     rax, rbp
.text:0000000000011285                 mov     r14, rax
.text:0000000000011288                 mov     ebp, 2
.text:000000000001128D                 mov     rsi, r12
.text:0000000000011290                 mov     qword ptr [rsp+158h+var_128], rdi
.text:0000000000011295                 mov     r12, r13
.text:0000000000011298                 mov     r13, rbx
.text:000000000001129B                 mov     rbx, rsi
.text:000000000001129E                 xchg    ax, ax
.text:00000000000112A0
.text:00000000000112A0 loc_112A0:                              ; CODE XREF: parse_expression+442↓j
.text:00000000000112A0                 mov     rsi, [rsp+158h+var_148]
.text:00000000000112A5                 mov     rdi, r12
.text:00000000000112A8                 call    duplicate_tree
.text:00000000000112AD                 mov     rdi, qword ptr [rsp+158h+var_128]
.text:00000000000112B2                 mov     r12, rax
.text:00000000000112B5                 mov     rdx, r14
.text:00000000000112B8                 mov     r8, r15
.text:00000000000112BB                 mov     rcx, rax
.text:00000000000112BE                 mov     rsi, rbx
.text:00000000000112C1                 mov     [rsp+158h+var_90], 10h
.text:00000000000112C9                 call    create_token_tree_isra_16
.text:00000000000112CE                 test    r12, r12
.text:00000000000112D1                 mov     r14, rax
.text:00000000000112D4                 jz      short loc_11320
.text:00000000000112D6                 test    rax, rax
.text:00000000000112D9                 jz      short loc_11320
.text:00000000000112DB                 add     rbp, 1
.text:00000000000112DF                 cmp     rbp, r13
.text:00000000000112E2                 jle     short loc_112A0
.text:00000000000112E4                 mov     r14, [rsp+158h+var_110]
.text:00000000000112E9                 mov     rbx, r13
.text:00000000000112EC                 mov     qword ptr [rsp+158h+var_128], rax
.text:00000000000112F1                 mov     r13, r12
.text:00000000000112F4
.text:00000000000112F4 loc_112F4:                              ; CODE XREF: parse_expression+C06↓j
.text:00000000000112F4                 cmp     [rsp+158h+var_158], rbx
.text:00000000000112F8                 jz      loc_11464
.text:00000000000112FE                 mov     rsi, [rsp+158h+var_148]
.text:0000000000011303                 mov     rdi, r13
.text:0000000000011306                 call    duplicate_tree
.text:000000000001130B                 test    rax, rax
.text:000000000001130E                 mov     rbp, rax
.text:0000000000011311                 jnz     loc_110E7
.text:0000000000011317                 nop     word ptr [rax+rax+00000000h]
.text:0000000000011320
.text:0000000000011320 loc_11320:                              ; CODE XREF: parse_expression+28C↑j
.text:0000000000011320                                         ; parse_expression+2D3↑j ...
.text:0000000000011320                 mov     rax, [rsp+158h+var_118]
.text:0000000000011325                 mov     dword ptr [rax], 0Ch
.text:000000000001132B
.text:000000000001132B loc_1132B:                              ; CODE XREF: parse_expression+505↓j
.text:000000000001132B                                         ; parse_expression+6B1↓j
.text:000000000001132B                 mov     rdi, [rsp+158h+var_130]
.text:0000000000011330                 lea     rsi, free_tree
.text:0000000000011337                 xor     edx, edx
.text:0000000000011339                 call    postorder
.text:000000000001133E                 mov     [rsp+158h+var_130], 0
.text:0000000000011347                 jmp     loc_10FB0
.text:0000000000011347 ; ---------------------------------------------------------------------------
.text:000000000001134C                 align 10h
.text:0000000000011350
.text:0000000000011350 loc_11350:                              ; CODE XREF: parse_expression+1FE↑j
.text:0000000000011350                 mov     [rsp+158h+var_158], 1
.text:0000000000011358
.text:0000000000011358 loc_11358:                              ; CODE XREF: parse_expression+65A↓j
.text:0000000000011358                 mov     rdx, [rsp+158h+var_138]
.text:000000000001135D                 mov     rdi, [rsp+158h+var_140]
.text:0000000000011362                 mov     rsi, r14
.text:0000000000011365                 call    peek_token
.text:000000000001136A                 cdqe
.text:000000000001136C                 add     [r14+48h], rax
.text:0000000000011370                 cmp     [rsp+158h+var_130], 0
.text:0000000000011376                 jz      loc_11450
.text:000000000001137C                 mov     rax, [rsp+158h+var_158]
.text:0000000000011380                 or      rax, rbx
.text:0000000000011383                 jnz     loc_110D0
.text:0000000000011389                 mov     rdi, [rsp+158h+var_130]
.text:000000000001138E                 lea     rsi, free_tree
.text:0000000000011395                 xor     edx, edx
.text:0000000000011397                 call    postorder
.text:000000000001139C                 mov     rax, [rsp+158h+var_118]
.text:00000000000113A1                 mov     esi, [rax]
.text:00000000000113A3                 test    esi, esi
.text:00000000000113A5                 jnz     short loc_1132B
.text:00000000000113A7
.text:00000000000113A7 loc_113A7:                              ; CODE XREF: parse_expression+5B9↓j
.text:00000000000113A7                 mov     [rsp+158h+var_130], 0
.text:00000000000113B0                 jmp     loc_111FE
.text:00000000000113B0 ; ---------------------------------------------------------------------------
.text:00000000000113B5                 align 8
.text:00000000000113B8
.text:00000000000113B8 loc_113B8:                              ; CODE XREF: parse_expression+1F3↑j
.text:00000000000113B8                 mov     rdx, [rsp+158h+var_138]
.text:00000000000113BD                 mov     rsi, rcx
.text:00000000000113C0                 mov     rdi, r14
.text:00000000000113C3                 movaps  xmmword ptr [rsp+158h+var_158], xmm0
.text:00000000000113C7                 call    fetch_number
.text:00000000000113CC                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000113D0                 mov     rbx, rax
.text:00000000000113D3                 movdqa  xmm0, xmmword ptr [rsp+158h+var_158]
.text:00000000000113D8                 jz      loc_11480
.text:00000000000113DE                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:00000000000113E2                 jz      short loc_113FD
.text:00000000000113E4                 mov     rax, [rsp+158h+var_140]
.text:00000000000113E9                 movzx   eax, byte ptr [rax+8]
.text:00000000000113ED                 cmp     al, 18h
.text:00000000000113EF                 jz      loc_11510
.text:00000000000113F5                 cmp     al, 1
.text:00000000000113F7                 jz      loc_11523
.text:00000000000113FD
.text:00000000000113FD loc_113FD:                              ; CODE XREF: parse_expression+542↑j
.text:00000000000113FD                                         ; parse_expression+624↓j
.text:00000000000113FD                 test    [rsp+158h+var_138], 200000h
.text:0000000000011406                 jz      loc_12343
.text:000000000001140C
.text:000000000001140C loc_1140C:                              ; CODE XREF: parse_expression+69A↓j
.text:000000000001140C                 mov     rax, [rsp+158h+var_140]
.text:0000000000011411                 mov     [r14+48h], rbp
.text:0000000000011415                 movaps  xmmword ptr [rax], xmm0
.text:0000000000011418                 mov     byte ptr [rax+8], 1
.text:000000000001141C                 mov     rax, [rsp+158h+var_130]
.text:0000000000011421                 jmp     loc_111E5
.text:0000000000011421 ; ---------------------------------------------------------------------------
.text:0000000000011426                 align 10h
.text:0000000000011430
.text:0000000000011430 loc_11430:                              ; CODE XREF: parse_expression+24B↑j
.text:0000000000011430                 mov     rdx, [rbp+28h]
.text:0000000000011434                 lea     rsi, mark_opt_subexp
.text:000000000001143B                 mov     rdi, rbp
.text:000000000001143E                 call    postorder
.text:0000000000011443                 jmp     loc_110F1
.text:0000000000011443 ; ---------------------------------------------------------------------------
.text:0000000000011448                 align 10h
.text:0000000000011450
.text:0000000000011450 loc_11450:                              ; CODE XREF: parse_expression+222↑j
.text:0000000000011450                                         ; parse_expression+4D6↑j
.text:0000000000011450                 mov     rax, [rsp+158h+var_118]
.text:0000000000011455                 mov     ecx, [rax]
.text:0000000000011457                 test    ecx, ecx
.text:0000000000011459                 jz      loc_113A7
.text:000000000001145F                 jmp     def_10EFF       ; jumptable 0000000000010EFF default case, cases 0,2,3,6,7,10,13-17,21,22,25-31
.text:0000000000011464 ; ---------------------------------------------------------------------------
.text:0000000000011464
.text:0000000000011464 loc_11464:                              ; CODE XREF: parse_expression+458↑j
.text:0000000000011464                 mov     rdx, qword ptr [rsp+158h+var_128]
.text:0000000000011469                 nop     dword ptr [rax+00000000h]
.text:0000000000011470
.text:0000000000011470 loc_11470:                              ; CODE XREF: parse_expression+323↑j
.text:0000000000011470                 mov     [rsp+158h+var_130], rdx
.text:0000000000011475                 jmp     loc_111FE
.text:0000000000011475 ; ---------------------------------------------------------------------------
.text:000000000001147A                 align 20h
.text:0000000000011480
.text:0000000000011480 loc_11480:                              ; CODE XREF: parse_expression+538↑j
.text:0000000000011480                 mov     rax, [rsp+158h+var_140]
.text:0000000000011485                 cmp     byte ptr [rax+8], 1
.text:0000000000011489                 jnz     loc_11540
.text:000000000001148F                 mov     rax, [rsp+158h+var_140]
.text:0000000000011494                 cmp     byte ptr [rax], 2Ch ; ','
.text:0000000000011497                 jnz     loc_11540
.text:000000000001149D                 xor     ebx, ebx
.text:000000000001149F
.text:000000000001149F loc_1149F:                              ; CODE XREF: parse_expression+68B↓j
.text:000000000001149F                 mov     rdx, [rsp+158h+var_138]
.text:00000000000114A4                 mov     rsi, [rsp+158h+var_140]
.text:00000000000114A9                 mov     rdi, r14
.text:00000000000114AC                 movaps  [rsp+158h+var_128], xmm0
.text:00000000000114B1                 call    fetch_number
.text:00000000000114B6                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:00000000000114BA                 mov     [rsp+158h+var_158], rax
.text:00000000000114BE                 movdqa  xmm0, [rsp+158h+var_128]
.text:00000000000114C4                 jz      loc_113FD
.text:00000000000114CA                 mov     rax, [rsp+158h+var_158]
.text:00000000000114CE                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000114D2                 jz      short loc_114D9
.text:00000000000114D4                 cmp     rax, rbx
.text:00000000000114D7                 jl      short loc_11540
.text:00000000000114D9
.text:00000000000114D9 loc_114D9:                              ; CODE XREF: parse_expression+632↑j
.text:00000000000114D9                 mov     rax, [rsp+158h+var_140]
.text:00000000000114DE                 cmp     byte ptr [rax+8], 18h
.text:00000000000114E2                 jnz     short loc_11540
.text:00000000000114E4                 cmp     [rsp+158h+var_158], 0FFFFFFFFFFFFFFFFh
.text:00000000000114E9                 jnz     short loc_11514
.text:00000000000114EB                 xor     eax, eax
.text:00000000000114ED                 cmp     rbx, 7FFFh
.text:00000000000114F4                 setnle  al
.text:00000000000114F7
.text:00000000000114F7 loc_114F7:                              ; CODE XREF: parse_expression+681↓j
.text:00000000000114F7                 test    rax, rax
.text:00000000000114FA                 jz      loc_11358
.text:0000000000011500                 mov     rax, [rsp+158h+var_118]
.text:0000000000011505                 mov     dword ptr [rax], 0Fh
.text:000000000001150B                 jmp     short loc_1154B
.text:000000000001150B ; ---------------------------------------------------------------------------
.text:000000000001150D                 align 10h
.text:0000000000011510
.text:0000000000011510 loc_11510:                              ; CODE XREF: parse_expression+54F↑j
.text:0000000000011510                 mov     [rsp+158h+var_158], rbx
.text:0000000000011514
.text:0000000000011514 loc_11514:                              ; CODE XREF: parse_expression+649↑j
.text:0000000000011514                 xor     eax, eax
.text:0000000000011516                 cmp     [rsp+158h+var_158], 7FFFh
.text:000000000001151E                 setnle  al
.text:0000000000011521                 jmp     short loc_114F7
.text:0000000000011523 ; ---------------------------------------------------------------------------
.text:0000000000011523
.text:0000000000011523 loc_11523:                              ; CODE XREF: parse_expression+557↑j
.text:0000000000011523                 mov     rax, [rsp+158h+var_140]
.text:0000000000011528                 cmp     byte ptr [rax], 2Ch ; ','
.text:000000000001152B                 jz      loc_1149F
.text:0000000000011531                 test    [rsp+158h+var_138], 200000h
.text:000000000001153A                 jnz     loc_1140C
.text:0000000000011540
.text:0000000000011540 loc_11540:                              ; CODE XREF: parse_expression+5E9↑j
.text:0000000000011540                                         ; parse_expression+5F7↑j ...
.text:0000000000011540                 mov     rax, [rsp+158h+var_118]
.text:0000000000011545                 mov     dword ptr [rax], 0Ah
.text:000000000001154B
.text:000000000001154B loc_1154B:                              ; CODE XREF: parse_expression+353↑j
.text:000000000001154B                                         ; parse_expression+66B↑j ...
.text:000000000001154B                 cmp     [rsp+158h+var_130], 0
.text:0000000000011551                 jnz     loc_1132B
.text:0000000000011557                 jmp     def_10EFF       ; jumptable 0000000000010EFF default case, cases 0,2,3,6,7,10,13-17,21,22,25-31
.text:0000000000011557 ; ---------------------------------------------------------------------------
.text:000000000001155C                 align 20h
.text:0000000000011560
.text:0000000000011560 loc_11560:                              ; CODE XREF: parse_expression+5F↑j
.text:0000000000011560                                         ; DATA XREF: .rodata:jpt_10EFF↓o
.text:0000000000011560                 mov     rax, [rsp+158h+var_140] ; jumptable 0000000000010EFF case 12
.text:0000000000011565                 mov     ebp, [rax]
.text:0000000000011567                 test    ebp, 30Fh
.text:000000000001156D                 jz      short loc_115D1
.text:000000000001156F                 mov     rax, [rsp+158h+var_148]
.text:0000000000011574                 movzx   eax, byte ptr [rax+0B0h]
.text:000000000001157B                 test    al, 10h
.text:000000000001157D                 jnz     short loc_115D1
.text:000000000001157F                 mov     rdi, [rsp+158h+var_148]
.text:0000000000011584                 or      eax, 10h
.text:0000000000011587                 test    al, 8
.text:0000000000011589                 mov     [rdi+0B0h], al
.text:000000000001158F                 jnz     loc_12193
.text:0000000000011595                 mov     rdx, 3FF000000000000h
.text:000000000001159F                 test    al, 4
.text:00000000000115A1                 mov     [rdi+0B8h], rdx
.text:00000000000115A8                 mov     rdx, 7FFFFFE87FFFFFEh
.text:00000000000115B2                 mov     [rdi+0C0h], rdx
.text:00000000000115B9                 jz      loc_12118
.text:00000000000115BF                 pxor    xmm0, xmm0
.text:00000000000115C3                 mov     rax, [rsp+158h+var_140]
.text:00000000000115C8                 movups  xmmword ptr [rdi+0C8h], xmm0
.text:00000000000115CF                 mov     ebp, [rax]
.text:00000000000115D1
.text:00000000000115D1 loc_115D1:                              ; CODE XREF: parse_expression+6CD↑j
.text:00000000000115D1                                         ; parse_expression+6DD↑j ...
.text:00000000000115D1                 mov     rax, [rsp+158h+var_148]
.text:00000000000115D6                 lea     rbx, [rax+70h]
.text:00000000000115DA                 lea     r12, [rax+80h]
.text:00000000000115E1                 lea     eax, [rbp-100h]
.text:00000000000115E7                 test    eax, 0FFFFFEFFh
.text:00000000000115EC                 jnz     loc_11C5A
.text:00000000000115F2                 cmp     ebp, 100h
.text:00000000000115F8                 mov     r15, [rsp+158h+var_140]
.text:00000000000115FD                 jz      loc_11C32
.text:0000000000011603                 mov     dword ptr [r15], 5
.text:000000000001160A                 mov     r8, r15
.text:000000000001160D                 xor     ecx, ecx
.text:000000000001160F                 xor     edx, edx
.text:0000000000011611                 mov     rsi, r12
.text:0000000000011614                 mov     rdi, rbx
.text:0000000000011617                 call    create_token_tree_isra_16
.text:000000000001161C                 mov     dword ptr [r15], 0Ah
.text:0000000000011623                 mov     rbp, rax
.text:0000000000011626
.text:0000000000011626 loc_11626:                              ; CODE XREF: parse_expression+DB5↓j
.text:0000000000011626                 mov     r8, [rsp+158h+var_140]
.text:000000000001162B                 xor     ecx, ecx
.text:000000000001162D                 xor     edx, edx
.text:000000000001162F                 mov     rsi, r12
.text:0000000000011632                 mov     rdi, rbx
.text:0000000000011635                 call    create_token_tree_isra_16
.text:000000000001163A                 lea     r8, [rsp+158h+var_98]
.text:0000000000011642                 mov     rdx, rbp
.text:0000000000011645                 mov     rdi, rbx
.text:0000000000011648                 mov     rcx, rax
.text:000000000001164B                 mov     rsi, r12
.text:000000000001164E                 mov     r13, rax
.text:0000000000011651                 mov     [rsp+158h+var_90], 0Ah
.text:0000000000011659                 call    create_token_tree_isra_16
.text:000000000001165E                 test    rbp, rbp
.text:0000000000011661                 mov     rdi, rax
.text:0000000000011664                 mov     [rsp+158h+var_130], rax
.text:0000000000011669                 setz    dl
.text:000000000001166C                 test    r13, r13
.text:000000000001166F                 setz    al
.text:0000000000011672                 or      dl, al
.text:0000000000011674                 jnz     loc_11A08
.text:000000000001167A                 test    rdi, rdi
.text:000000000001167D                 jz      loc_11A08
.text:0000000000011683
.text:0000000000011683 loc_11683:                              ; CODE XREF: parse_expression+DD6↓j
.text:0000000000011683                 mov     rdx, [rsp+158h+var_138]
.text:0000000000011688                 mov     rdi, [rsp+158h+var_140]
.text:000000000001168D                 mov     rsi, r14
.text:0000000000011690                 call    peek_token
.text:0000000000011695                 cdqe
.text:0000000000011697                 add     [r14+48h], rax
.text:000000000001169B                 jmp     loc_10FB0
.text:00000000000116A0 ; ---------------------------------------------------------------------------
.text:00000000000116A0
.text:00000000000116A0 loc_116A0:                              ; CODE XREF: parse_expression+5F↑j
.text:00000000000116A0                                         ; DATA XREF: .rodata:jpt_10EFF↓o
.text:00000000000116A0                 mov     esi, 1          ; jumptable 0000000000010EFF case 20
.text:00000000000116A5                 mov     edi, 20h ; ' '  ; nmemb
.text:00000000000116AA                 mov     [rsp+158h+var_C0], 0
.text:00000000000116B6                 call    _calloc
.text:00000000000116BB                 mov     esi, 1          ; size
.text:00000000000116C0                 mov     r12, rax
.text:00000000000116C3                 mov     edi, 50h ; 'P'  ; nmemb
.text:00000000000116C8                 call    _calloc
.text:00000000000116CD                 test    r12, r12
.text:00000000000116D0                 mov     r13, rax
.text:00000000000116D3                 setz    dl
.text:00000000000116D6                 test    rax, rax
.text:00000000000116D9                 setz    al
.text:00000000000116DC                 or      dl, al
.text:00000000000116DE                 jnz     loc_11EB9
.text:00000000000116E4                 mov     r10, [rsp+158h+var_140]
.text:00000000000116E9                 mov     rdx, [rsp+158h+var_138]
.text:00000000000116EE                 mov     rsi, r14
.text:00000000000116F1                 mov     rdi, r10
.text:00000000000116F4                 call    peek_token_bracket
.text:00000000000116F9                 movsxd  rbx, eax
.text:00000000000116FC                 movzx   eax, byte ptr [r10+8]
.text:0000000000011701                 cmp     al, 2
.text:0000000000011703                 jz      loc_11EA9
.text:0000000000011709                 cmp     al, 19h
.text:000000000001170B                 mov     [rsp+158h+var_101], 0
.text:0000000000011710                 jz      loc_11BDA
.text:0000000000011716
.text:0000000000011716 loc_11716:                              ; CODE XREF: parse_expression+D7F↓j
.text:0000000000011716                 cmp     al, 15h
.text:0000000000011718                 jz      loc_11C24
.text:000000000001171E
.text:000000000001171E loc_1171E:                              ; CODE XREF: parse_expression+D8D↓j
.text:000000000001171E                 lea     rax, [rsp+158h+var_88]
.text:0000000000011726                 mov     r15, [rsp+158h+var_140]
.text:000000000001172B                 lea     rbp, jpt_11806
.text:0000000000011732                 mov     [rsp+158h+var_110], 0
.text:000000000001173B                 mov     r9d, 1
.text:0000000000011741                 mov     qword ptr [rsp+158h+var_128], 0
.text:000000000001174A                 mov     [rsp+158h+var_130], rax
.text:000000000001174F                 lea     rax, [rsp+158h+var_B8]
.text:0000000000011757                 mov     [rsp+158h+var_158], rax
.text:000000000001175B                 lea     rax, [rsp+158h+var_C0]
.text:0000000000011763                 mov     [rsp+158h+var_100], rax
.text:0000000000011768                 lea     rax, [rsp+158h+var_98]
.text:0000000000011770                 mov     [rsp+158h+var_F8], rax
.text:0000000000011775                 lea     rax, [rsp+158h+var_68]
.text:000000000001177D                 mov     [rsp+158h+var_F0], rax
.text:0000000000011782
.text:0000000000011782 loc_11782:                              ; CODE XREF: parse_expression+C58↓j
.text:0000000000011782                 mov     rax, [rsp+158h+var_130]
.text:0000000000011787                 mov     r8, [rsp+158h+var_138]
.text:000000000001178C                 and     r9d, 1
.text:0000000000011790                 mov     rdi, [rsp+158h+var_158]
.text:0000000000011794                 mov     ecx, ebx
.text:0000000000011796                 mov     rdx, r15
.text:0000000000011799                 mov     rsi, r14
.text:000000000001179C                 mov     [rsp+158h+var_B8], 3
.text:00000000000117A7                 mov     [rsp+158h+var_B0], rax
.text:00000000000117AF                 call    parse_bracket_element_constprop_37
.text:00000000000117B4                 test    eax, eax
.text:00000000000117B6                 jnz     loc_11C9B
.text:00000000000117BC                 mov     rdx, [rsp+158h+var_138]
.text:00000000000117C1                 mov     rsi, r14
.text:00000000000117C4                 mov     rdi, r15
.text:00000000000117C7                 call    peek_token_bracket
.text:00000000000117CC                 movsxd  rbx, eax
.text:00000000000117CF                 mov     eax, [rsp+158h+var_B8]
.text:00000000000117D6                 lea     edx, [rax-2]
.text:00000000000117D9                 and     edx, 0FFFFFFFDh
.text:00000000000117DC                 jz      short loc_117F5
.text:00000000000117DE                 movzx   edx, byte ptr [r15+8]
.text:00000000000117E3                 cmp     dl, 2
.text:00000000000117E6                 jz      loc_11C81
.text:00000000000117EC                 cmp     dl, 16h
.text:00000000000117EF                 jz      loc_11CA7
.text:00000000000117F5
.text:00000000000117F5 loc_117F5:                              ; CODE XREF: parse_expression+93C↑j
.text:00000000000117F5                                         ; parse_expression+105D↓j
.text:00000000000117F5                 cmp     eax, 4          ; switch 5 cases
.text:00000000000117F8                 ja      def_11806       ; jumptable 0000000000011806 default case
.text:00000000000117FE                 movsxd  rax, ss:(jpt_11806 - 15D54h)[rbp+rax*4]
.text:0000000000011803                 add     rax, rbp
.text:0000000000011806                 jmp     rax             ; switch jump
.text:0000000000011808 ; ---------------------------------------------------------------------------
.text:0000000000011808
.text:0000000000011808 loc_11808:                              ; CODE XREF: parse_expression+5F↑j
.text:0000000000011808                                         ; DATA XREF: .rodata:jpt_10EFF↓o
.text:0000000000011808                 mov     rbx, [rsp+158h+var_118] ; jumptable 0000000000010EFF cases 34,35
.text:000000000001180D                 cmp     cl, 23h ; '#'
.text:0000000000011810                 mov     rsi, [rdi+78h]
.text:0000000000011814                 setz    r8b
.text:0000000000011818                 lea     rcx, locale
.text:000000000001181F                 lea     rdx, aSpace     ; "space"
.text:0000000000011826                 movzx   r8d, r8b
.text:000000000001182A                 mov     r9, rbx
.text:000000000001182D
.text:000000000001182D loc_1182D:                              ; CODE XREF: parse_expression+9DD↓j
.text:000000000001182D                 mov     rdi, [rsp+158h+var_148]
.text:0000000000011832                 call    build_charclass_op
.text:0000000000011837                 mov     edi, [rbx]
.text:0000000000011839                 mov     [rsp+158h+var_130], rax
.text:000000000001183E                 test    edi, edi
.text:0000000000011840                 jz      loc_1103C
.text:0000000000011846                 test    rax, rax
.text:0000000000011849                 jnz     loc_1103C
.text:000000000001184F                 jmp     def_10EFF       ; jumptable 0000000000010EFF default case, cases 0,2,3,6,7,10,13-17,21,22,25-31
.text:000000000001184F ; ---------------------------------------------------------------------------
.text:0000000000011854                 align 8
.text:0000000000011858
.text:0000000000011858 loc_11858:                              ; CODE XREF: parse_expression+5F↑j
.text:0000000000011858                                         ; DATA XREF: .rodata:jpt_10EFF↓o
.text:0000000000011858                 mov     rbx, [rsp+158h+var_118] ; jumptable 0000000000010EFF cases 32,33
.text:000000000001185D                 cmp     cl, 21h ; '!'
.text:0000000000011860                 mov     rsi, [rdi+78h]
.text:0000000000011864                 setz    r8b
.text:0000000000011868                 lea     rcx, aEn+2      ; "_"
.text:000000000001186F                 lea     rdx, aAlnum     ; "alnum"
.text:0000000000011876                 movzx   r8d, r8b
.text:000000000001187A                 mov     r9, rbx
.text:000000000001187D                 jmp     short loc_1182D
.text:000000000001187F ; ---------------------------------------------------------------------------
.text:000000000001187F
.text:000000000001187F loc_1187F:                              ; CODE XREF: parse_expression+5F↑j
.text:000000000001187F                                         ; DATA XREF: .rodata:jpt_10EFF↓o
.text:000000000001187F                 mov     rax, [rsp+158h+var_140] ; jumptable 0000000000010EFF case 4
.text:0000000000011884                 mov     rdi, [rsp+158h+var_148]
.text:0000000000011889                 mov     rcx, [rax]
.text:000000000001188C                 mov     eax, 1
.text:0000000000011891                 shl     eax, cl
.text:0000000000011893                 cdqe
.text:0000000000011895                 test    [rdi+0A8h], rax
.text:000000000001189C                 jz      loc_11ECE
.text:00000000000118A2                 mov     rbx, [rsp+158h+var_148]
.text:00000000000118A7                 mov     r8, [rsp+158h+var_140]
.text:00000000000118AC                 xor     ecx, ecx
.text:00000000000118AE                 xor     edx, edx
.text:00000000000118B0                 or      [rbx+0A0h], rax
.text:00000000000118B7                 lea     rsi, [rbx+80h]
.text:00000000000118BE                 lea     rdi, [rbx+70h]
.text:00000000000118C2                 call    create_token_tree_isra_16
.text:00000000000118C7                 test    rax, rax
.text:00000000000118CA                 mov     [rsp+158h+var_130], rax
.text:00000000000118CF                 jz      loc_11A08
.text:00000000000118D5                 add     qword ptr [rbx+98h], 1
.text:00000000000118DD                 or      byte ptr [rbx+0B0h], 2
.text:00000000000118E4                 jmp     loc_1103C
.text:00000000000118E9 ; ---------------------------------------------------------------------------
.text:00000000000118E9
.text:00000000000118E9 loc_118E9:                              ; CODE XREF: parse_expression+5F↑j
.text:00000000000118E9                                         ; DATA XREF: .rodata:jpt_10EFF↓o
.text:00000000000118E9                 mov     rbx, [rsp+158h+var_148] ; jumptable 0000000000010EFF case 5
.text:00000000000118EE                 mov     r8, [rsp+158h+var_140]
.text:00000000000118F3                 xor     ecx, ecx
.text:00000000000118F5                 xor     edx, edx
.text:00000000000118F7                 lea     rsi, [rbx+80h]
.text:00000000000118FE                 lea     rdi, [rbx+70h]
.text:0000000000011902                 call    create_token_tree_isra_16
.text:0000000000011907                 test    rax, rax
.text:000000000001190A                 mov     [rsp+158h+var_130], rax
.text:000000000001190F                 jz      loc_11A08
.text:0000000000011915                 cmp     dword ptr [rbx+0B4h], 1
.text:000000000001191C                 jle     loc_1103C
.text:0000000000011922                 or      byte ptr [rbx+0B0h], 2
.text:0000000000011929                 jmp     loc_1103C
.text:000000000001192E ; ---------------------------------------------------------------------------
.text:000000000001192E
.text:000000000001192E loc_1192E:                              ; CODE XREF: parse_expression+5F↑j
.text:000000000001192E                                         ; DATA XREF: .rodata:jpt_10EFF↓o
.text:000000000001192E                 mov     rax, [rsp+158h+var_148] ; jumptable 0000000000010EFF case 1
.text:0000000000011933                 mov     r8, [rsp+158h+var_140]
.text:0000000000011938                 xor     ecx, ecx
.text:000000000001193A                 xor     edx, edx
.text:000000000001193C                 lea     rbx, [rax+70h]
.text:0000000000011940                 lea     rbp, [rax+80h]
.text:0000000000011947                 mov     rdi, rbx
.text:000000000001194A                 mov     rsi, rbp
.text:000000000001194D                 call    create_token_tree_isra_16
.text:0000000000011952                 test    rax, rax
.text:0000000000011955                 mov     [rsp+158h+var_130], rax
.text:000000000001195A                 jz      loc_11A08
.text:0000000000011960                 mov     rax, [rsp+158h+var_148]
.text:0000000000011965                 lea     r12, [rsp+158h+var_98]
.text:000000000001196D                 mov     r15, [rsp+158h+var_130]
.text:0000000000011972                 cmp     dword ptr [rax+0B4h], 1
.text:0000000000011979                 jle     loc_1103C
.text:000000000001197F
.text:000000000001197F loc_1197F:                              ; CODE XREF: parse_expression+B62↓j
.text:000000000001197F                 mov     rax, [r14+48h]
.text:0000000000011983                 cmp     [r14+68h], rax
.text:0000000000011987                 jle     loc_11C91
.text:000000000001198D                 cmp     rax, [r14+30h]
.text:0000000000011991                 jz      loc_11C91
.text:0000000000011997                 mov     rdx, [r14+10h]
.text:000000000001199B                 cmp     dword ptr [rdx+rax*4], 0FFFFFFFFh
.text:000000000001199F                 jnz     loc_11C91
.text:00000000000119A5                 mov     r13, [rsp+158h+var_140]
.text:00000000000119AA                 mov     rdx, [rsp+158h+var_138]
.text:00000000000119AF                 mov     rsi, r14
.text:00000000000119B2                 mov     rdi, r13
.text:00000000000119B5                 call    peek_token
.text:00000000000119BA                 cdqe
.text:00000000000119BC                 add     [r14+48h], rax
.text:00000000000119C0                 mov     r8, r13
.text:00000000000119C3                 xor     ecx, ecx
.text:00000000000119C5                 xor     edx, edx
.text:00000000000119C7                 mov     rsi, rbp
.text:00000000000119CA                 mov     rdi, rbx
.text:00000000000119CD                 call    create_token_tree_isra_16
.text:00000000000119D2                 mov     rdx, r15
.text:00000000000119D5                 mov     r13, rax
.text:00000000000119D8                 mov     r8, r12
.text:00000000000119DB                 mov     rcx, rax
.text:00000000000119DE                 mov     rsi, rbp
.text:00000000000119E1                 mov     rdi, rbx
.text:00000000000119E4                 mov     [rsp+158h+var_90], 10h
.text:00000000000119EC                 call    create_token_tree_isra_16
.text:00000000000119F1                 test    r13, r13
.text:00000000000119F4                 mov     r15, rax
.text:00000000000119F7                 setz    dl
.text:00000000000119FA                 test    rax, rax
.text:00000000000119FD                 setz    al
.text:0000000000011A00                 or      dl, al
.text:0000000000011A02                 jz      loc_1197F
.text:0000000000011A08
.text:0000000000011A08 loc_11A08:                              ; CODE XREF: parse_expression+196↑j
.text:0000000000011A08                                         ; parse_expression+7D4↑j ...
.text:0000000000011A08                 mov     rax, [rsp+158h+var_118]
.text:0000000000011A0D                 mov     dword ptr [rax], 0Ch
.text:0000000000011A13                 jmp     def_10EFF       ; jumptable 0000000000010EFF default case, cases 0,2,3,6,7,10,13-17,21,22,25-31
.text:0000000000011A18 ; ---------------------------------------------------------------------------
.text:0000000000011A18
.text:0000000000011A18 loc_11A18:                              ; CODE XREF: parse_expression+5F↑j
.text:0000000000011A18                                         ; parse_expression+165↑j
.text:0000000000011A18                                         ; DATA XREF: ...
.text:0000000000011A18                 test    [rsp+158h+var_138], 20000h ; jumptable 0000000000010EFF case 9
.text:0000000000011A21                 jnz     loc_1100B       ; jumptable 0000000000010EFF case 24
.text:0000000000011A27                 mov     rax, [rsp+158h+var_118]
.text:0000000000011A2C                 mov     [rsp+158h+var_130], 0
.text:0000000000011A35                 mov     dword ptr [rax], 10h
.text:0000000000011A3B                 jmp     loc_10FB0
.text:0000000000011A40 ; ---------------------------------------------------------------------------
.text:0000000000011A40
.text:0000000000011A40 loc_11A40:                              ; CODE XREF: parse_expression+A0↑j
.text:0000000000011A40                                         ; parse_expression+D6↑j
.text:0000000000011A40                 cmp     rbx, 8
.text:0000000000011A44                 jbe     short loc_11AAB
.text:0000000000011A46
.text:0000000000011A46 loc_11A46:                              ; CODE XREF: parse_expression+C23↓j
.text:0000000000011A46                 mov     rdi, [rsp+158h+var_148]
.text:0000000000011A4B                 lea     r8, [rsp+158h+var_98]
.text:0000000000011A53                 xor     ecx, ecx
.text:0000000000011A55                 mov     rdx, rax
.text:0000000000011A58                 mov     [rsp+158h+var_90], 11h
.text:0000000000011A60                 lea     rsi, [rdi+80h]
.text:0000000000011A67                 add     rdi, 70h ; 'p'
.text:0000000000011A6B                 call    create_token_tree_isra_16
.text:0000000000011A70                 test    rax, rax
.text:0000000000011A73                 mov     [rsp+158h+var_130], rax
.text:0000000000011A78                 jz      short loc_11A08
.text:0000000000011A7A                 mov     [rax+28h], rbx
.text:0000000000011A7E                 jmp     loc_1103C
.text:0000000000011A83 ; ---------------------------------------------------------------------------
.text:0000000000011A83
.text:0000000000011A83 loc_11A83:                              ; CODE XREF: parse_expression+5F↑j
.text:0000000000011A83                                         ; DATA XREF: .rodata:jpt_10EFF↓o
.text:0000000000011A83                 mov     rax, [rsp+158h+var_118] ; jumptable 0000000000010EFF case 36
.text:0000000000011A88                 mov     [rsp+158h+var_130], 0
.text:0000000000011A91                 mov     dword ptr [rax], 5
.text:0000000000011A97                 jmp     loc_10FB0
.text:0000000000011A9C ; ---------------------------------------------------------------------------
.text:0000000000011A9C
.text:0000000000011A9C loc_11A9C:                              ; CODE XREF: parse_expression+3C4↑j
.text:0000000000011A9C                 mov     r13, [rsp+158h+var_130]
.text:0000000000011AA1                 mov     qword ptr [rsp+158h+var_128], r13
.text:0000000000011AA6                 jmp     loc_112F4
.text:0000000000011AAB ; ---------------------------------------------------------------------------
.text:0000000000011AAB
.text:0000000000011AAB loc_11AAB:                              ; CODE XREF: parse_expression+BA4↑j
.text:0000000000011AAB                 mov     rsi, [rsp+158h+var_148]
.text:0000000000011AB0                 mov     edx, 1
.text:0000000000011AB5                 mov     ecx, ebx
.text:0000000000011AB7                 shl     edx, cl
.text:0000000000011AB9                 movsxd  rdx, edx
.text:0000000000011ABC                 or      [rsi+0A8h], rdx
.text:0000000000011AC3                 jmp     short loc_11A46
.text:0000000000011AC5 ; ---------------------------------------------------------------------------
.text:0000000000011AC5
.text:0000000000011AC5 loc_11AC5:                              ; CODE XREF: parse_expression+966↑j
.text:0000000000011AC5                                         ; DATA XREF: .rodata:jpt_11806↓o
.text:0000000000011AC5                 mov     rsi, [rsp+158h+var_B0] ; jumptable 0000000000011806 case 3
.text:0000000000011ACD                 mov     rdi, r12
.text:0000000000011AD0                 call    build_equiv_class_isra_27
.text:0000000000011AD5                 mov     rdx, [rsp+158h+var_118]
.text:0000000000011ADA                 test    eax, eax
.text:0000000000011ADC                 mov     [rdx], eax
.text:0000000000011ADE                 jnz     short loc_11B18
.text:0000000000011AE0
.text:0000000000011AE0 loc_11AE0:                              ; CODE XREF: parse_expression+C76↓j
.text:0000000000011AE0                                         ; parse_expression+CCC↓j ...
.text:0000000000011AE0                 movzx   eax, byte ptr [r15+8]
.text:0000000000011AE5                 cmp     al, 2
.text:0000000000011AE7                 jz      loc_11C81
.text:0000000000011AED                 cmp     al, 15h
.text:0000000000011AEF                 jz      loc_11F02
.text:0000000000011AF5                 xor     r9d, r9d
.text:0000000000011AF8                 jmp     loc_11782
.text:0000000000011AFD ; ---------------------------------------------------------------------------
.text:0000000000011AFD
.text:0000000000011AFD loc_11AFD:                              ; CODE XREF: parse_expression+966↑j
.text:0000000000011AFD                                         ; DATA XREF: .rodata:jpt_11806↓o
.text:0000000000011AFD                 mov     rsi, [rsp+158h+var_B0] ; jumptable 0000000000011806 case 2
.text:0000000000011B05                 mov     rdi, r12
.text:0000000000011B08                 call    build_equiv_class_isra_27
.text:0000000000011B0D                 mov     rdx, [rsp+158h+var_118]
.text:0000000000011B12                 test    eax, eax
.text:0000000000011B14                 mov     [rdx], eax
.text:0000000000011B16                 jz      short loc_11AE0
.text:0000000000011B18
.text:0000000000011B18 loc_11B18:                              ; CODE XREF: parse_expression+C3E↑j
.text:0000000000011B18                                         ; parse_expression+D35↓j ...
.text:0000000000011B18                 mov     rdi, r12        ; ptr
.text:0000000000011B1B                 call    _free
.text:0000000000011B20                 mov     rdi, r13        ; ptr
.text:0000000000011B23                 call    isl_union_flow_free_0
.text:0000000000011B28                 mov     rax, [rsp+158h+var_118]
.text:0000000000011B2D                 mov     r8d, [rax]
.text:0000000000011B30                 test    r8d, r8d
.text:0000000000011B33                 jnz     def_10EFF       ; jumptable 0000000000010EFF default case, cases 0,2,3,6,7,10,13-17,21,22,25-31
.text:0000000000011B39                 mov     [rsp+158h+var_130], 0
.text:0000000000011B42                 jmp     loc_1103C
.text:0000000000011B47 ; ---------------------------------------------------------------------------
.text:0000000000011B47
.text:0000000000011B47 loc_11B47:                              ; CODE XREF: parse_expression+966↑j
.text:0000000000011B47                                         ; DATA XREF: .rodata:jpt_11806↓o
.text:0000000000011B47                 mov     rdx, [r13+28h]  ; jumptable 0000000000011806 case 1
.text:0000000000011B4B                 cmp     rdx, qword ptr [rsp+158h+var_128]
.text:0000000000011B50                 mov     rax, [r13+0]
.text:0000000000011B54                 jz      loc_1204E
.text:0000000000011B5A
.text:0000000000011B5A loc_11B5A:                              ; CODE XREF: parse_expression+11DE↓j
.text:0000000000011B5A                 lea     rcx, [rdx+1]
.text:0000000000011B5E                 mov     [r13+28h], rcx
.text:0000000000011B62                 mov     ecx, dword ptr [rsp+158h+var_B0]
.text:0000000000011B69                 mov     [rax+rdx*4], ecx
.text:0000000000011B6C                 jmp     loc_11AE0
.text:0000000000011B71 ; ---------------------------------------------------------------------------
.text:0000000000011B71
.text:0000000000011B71 loc_11B71:                              ; CODE XREF: parse_expression+966↑j
.text:0000000000011B71                                         ; DATA XREF: .rodata:jpt_11806↓o
.text:0000000000011B71                 movzx   edx, byte ptr [rsp+158h+var_B0] ; jumptable 0000000000011806 case 0
.text:0000000000011B79                 mov     esi, 1
.text:0000000000011B7E                 mov     rax, rdx
.text:0000000000011B81                 and     edx, 3Fh
.text:0000000000011B84                 shr     rax, 3
.text:0000000000011B88                 mov     ecx, edx
.text:0000000000011B8A                 and     eax, 18h
.text:0000000000011B8D                 shl     rsi, cl
.text:0000000000011B90                 or      [r12+rax], rsi
.text:0000000000011B94                 jmp     loc_11AE0
.text:0000000000011B99 ; ---------------------------------------------------------------------------
.text:0000000000011B99
.text:0000000000011B99 loc_11B99:                              ; CODE XREF: parse_expression+966↑j
.text:0000000000011B99                                         ; DATA XREF: .rodata:jpt_11806↓o
.text:0000000000011B99                 sub     rsp, 8          ; jumptable 0000000000011806 case 4
.text:0000000000011B9D                 mov     rdi, [r14+78h]
.text:0000000000011BA1                 lea     rdx, [r13+18h]
.text:0000000000011BA5                 push    [rsp+160h+var_138]
.text:0000000000011BA9                 mov     r9, [rsp+168h+var_B0]
.text:0000000000011BB1                 lea     rcx, [r13+48h]
.text:0000000000011BB5                 mov     r8, [rsp+168h+var_100]
.text:0000000000011BBA                 mov     rsi, r12
.text:0000000000011BBD                 call    build_charclass_isra_29
.text:0000000000011BC2                 mov     rdx, [rsp+168h+var_118]
.text:0000000000011BC7                 test    eax, eax
.text:0000000000011BC9                 mov     [rdx], eax
.text:0000000000011BCB                 pop     r9
.text:0000000000011BCD                 pop     r10
.text:0000000000011BCF                 jz      loc_11AE0
.text:0000000000011BD5                 jmp     loc_11B18
.text:0000000000011BDA ; ---------------------------------------------------------------------------
.text:0000000000011BDA
.text:0000000000011BDA loc_11BDA:                              ; CODE XREF: parse_expression+870↑j
.text:0000000000011BDA                 or      byte ptr [r13+20h], 1
.text:0000000000011BDF                 test    [rsp+158h+var_138], 100h
.text:0000000000011BE8                 jz      short loc_11BF2
.text:0000000000011BEA                 or      qword ptr [r12], 400h
.text:0000000000011BF2
.text:0000000000011BF2 loc_11BF2:                              ; CODE XREF: parse_expression+D48↑j
.text:0000000000011BF2                 add     [r14+48h], rbx
.text:0000000000011BF6                 mov     r11, [rsp+158h+var_140]
.text:0000000000011BFB                 mov     rsi, r14
.text:0000000000011BFE                 mov     rdx, [rsp+158h+var_138]
.text:0000000000011C03                 mov     rdi, r11
.text:0000000000011C06                 call    peek_token_bracket
.text:0000000000011C0B                 mov     ebx, eax
.text:0000000000011C0D                 movzx   eax, byte ptr [r11+8]
.text:0000000000011C12                 cmp     al, 2
.text:0000000000011C14                 jz      loc_11EA9
.text:0000000000011C1A                 mov     [rsp+158h+var_101], 1
.text:0000000000011C1F                 jmp     loc_11716
.text:0000000000011C24 ; ---------------------------------------------------------------------------
.text:0000000000011C24
.text:0000000000011C24 loc_11C24:                              ; CODE XREF: parse_expression+878↑j
.text:0000000000011C24                 mov     rax, [rsp+158h+var_140]
.text:0000000000011C29                 mov     byte ptr [rax+8], 1
.text:0000000000011C2D                 jmp     loc_1171E
.text:0000000000011C32 ; ---------------------------------------------------------------------------
.text:0000000000011C32
.text:0000000000011C32 loc_11C32:                              ; CODE XREF: parse_expression+75D↑j
.text:0000000000011C32                 mov     dword ptr [r15], 6
.text:0000000000011C39                 mov     r8, r15
.text:0000000000011C3C                 xor     ecx, ecx
.text:0000000000011C3E                 xor     edx, edx
.text:0000000000011C40                 mov     rsi, r12
.text:0000000000011C43                 mov     rdi, rbx
.text:0000000000011C46                 call    create_token_tree_isra_16
.text:0000000000011C4B                 mov     dword ptr [r15], 9
.text:0000000000011C52                 mov     rbp, rax
.text:0000000000011C55                 jmp     loc_11626
.text:0000000000011C5A ; ---------------------------------------------------------------------------
.text:0000000000011C5A
.text:0000000000011C5A loc_11C5A:                              ; CODE XREF: parse_expression+74C↑j
.text:0000000000011C5A                 mov     r8, [rsp+158h+var_140]
.text:0000000000011C5F                 xor     ecx, ecx
.text:0000000000011C61                 xor     edx, edx
.text:0000000000011C63                 mov     rsi, r12
.text:0000000000011C66                 mov     rdi, rbx
.text:0000000000011C69                 call    create_token_tree_isra_16
.text:0000000000011C6E                 test    rax, rax
.text:0000000000011C71                 mov     [rsp+158h+var_130], rax
.text:0000000000011C76                 jnz     loc_11683
.text:0000000000011C7C                 jmp     loc_11A08
.text:0000000000011C81 ; ---------------------------------------------------------------------------
.text:0000000000011C81
.text:0000000000011C81 loc_11C81:                              ; CODE XREF: parse_expression+946↑j
.text:0000000000011C81                                         ; parse_expression+C47↑j ...
.text:0000000000011C81                 mov     rax, [rsp+158h+var_118]
.text:0000000000011C86                 mov     dword ptr [rax], 7
.text:0000000000011C8C                 jmp     loc_11B18
.text:0000000000011C91 ; ---------------------------------------------------------------------------
.text:0000000000011C91
.text:0000000000011C91 loc_11C91:                              ; CODE XREF: parse_expression+AE7↑j
.text:0000000000011C91                                         ; parse_expression+AF1↑j ...
.text:0000000000011C91                 mov     [rsp+158h+var_130], r15
.text:0000000000011C96                 jmp     loc_1103C
.text:0000000000011C9B ; ---------------------------------------------------------------------------
.text:0000000000011C9B
.text:0000000000011C9B loc_11C9B:                              ; CODE XREF: parse_expression+916↑j
.text:0000000000011C9B                                         ; parse_expression+E6E↓j
.text:0000000000011C9B                 mov     rdx, [rsp+158h+var_118]
.text:0000000000011CA0                 mov     [rdx], eax
.text:0000000000011CA2                 jmp     loc_11B18
.text:0000000000011CA7 ; ---------------------------------------------------------------------------
.text:0000000000011CA7
.text:0000000000011CA7 loc_11CA7:                              ; CODE XREF: parse_expression+94F↑j
.text:0000000000011CA7                 movsxd  rax, ebx
.text:0000000000011CAA                 mov     r11, [rsp+158h+var_138]
.text:0000000000011CAF                 add     [r14+48h], rax
.text:0000000000011CB3                 mov     r10, [rsp+158h+var_F8]
.text:0000000000011CB8                 mov     rdx, r11
.text:0000000000011CBB                 mov     rdi, r10
.text:0000000000011CBE                 call    peek_token_bracket
.text:0000000000011CC3                 movzx   edx, [rsp+158h+var_90]
.text:0000000000011CCB                 cmp     dl, 2
.text:0000000000011CCE                 jz      short loc_11C81
.text:0000000000011CD0                 cmp     dl, 15h
.text:0000000000011CD3                 jz      loc_11EE7
.text:0000000000011CD9                 mov     rdx, [rsp+158h+var_F0]
.text:0000000000011CDE                 lea     rdi, [rsp+158h+var_A8]
.text:0000000000011CE6                 mov     r9d, 1
.text:0000000000011CEC                 mov     r8, r11
.text:0000000000011CEF                 mov     ecx, eax
.text:0000000000011CF1                 mov     dword ptr [rsp+158h+var_A8], 3
.text:0000000000011CFC                 mov     [rsp+158h+var_A0], rdx
.text:0000000000011D04                 mov     rdx, r10
.text:0000000000011D07                 call    parse_bracket_element_constprop_37
.text:0000000000011D0C                 test    eax, eax
.text:0000000000011D0E                 jnz     short loc_11C9B
.text:0000000000011D10                 mov     rdx, [rsp+158h+var_138]
.text:0000000000011D15                 mov     rsi, r14
.text:0000000000011D18                 mov     rdi, r15
.text:0000000000011D1B                 call    peek_token_bracket
.text:0000000000011D20                 movsxd  rbx, eax
.text:0000000000011D23                 mov     rax, [rsp+158h+var_148]
.text:0000000000011D28                 mov     esi, [rsp+158h+var_B8]
.text:0000000000011D2F                 mov     r9d, 0
.text:0000000000011D35                 cmp     dword ptr [rax+0B4h], 1
.text:0000000000011D3C                 lea     eax, [rsi-2]
.text:0000000000011D3F                 cmovg   r9, r13
.text:0000000000011D43                 and     eax, 0FFFFFFFDh
.text:0000000000011D46                 jz      loc_121B9
.text:0000000000011D4C                 mov     r10d, dword ptr [rsp+158h+var_A8]
.text:0000000000011D54                 lea     eax, [r10-2]
.text:0000000000011D58                 and     eax, 0FFFFFFFDh
.text:0000000000011D5B                 jz      loc_121B9
.text:0000000000011D61                 cmp     esi, 3
.text:0000000000011D64                 setz    r11b
.text:0000000000011D68                 jz      loc_121FD
.text:0000000000011D6E
.text:0000000000011D6E loc_11D6E:                              ; CODE XREF: parse_expression+137B↓j
.text:0000000000011D6E                 cmp     r10d, 3
.text:0000000000011D72                 jz      loc_121C9
.text:0000000000011D78
.text:0000000000011D78 loc_11D78:                              ; CODE XREF: parse_expression+1347↓j
.text:0000000000011D78                 test    esi, esi
.text:0000000000011D7A                 jnz     loc_120E9
.text:0000000000011D80                 movzx   edx, byte ptr [rsp+158h+var_B0]
.text:0000000000011D88
.text:0000000000011D88 loc_11D88:                              ; CODE XREF: parse_expression+124E↓j
.text:0000000000011D88                                         ; parse_expression+125F↓j
.text:0000000000011D88                 test    r10d, r10d
.text:0000000000011D8B                 jnz     loc_120CD
.text:0000000000011D91                 movzx   r8d, byte ptr [rsp+158h+var_A0]
.text:0000000000011D9A
.text:0000000000011D9A loc_11D9A:                              ; CODE XREF: parse_expression+14CE↓j
.text:0000000000011D9A                 test    esi, esi
.text:0000000000011D9C                 jz      loc_12086
.text:0000000000011DA2                 test    r11b, r11b
.text:0000000000011DA5                 jnz     loc_12086
.text:0000000000011DAB                 test    r9, r9
.text:0000000000011DAE                 mov     edx, dword ptr [rsp+158h+var_B0]
.text:0000000000011DB5                 jz      short loc_11DD4
.text:0000000000011DB7
.text:0000000000011DB7 loc_11DB7:                              ; CODE XREF: parse_expression+1212↓j
.text:0000000000011DB7                                         ; parse_expression+121A↓j
.text:0000000000011DB7                 mov     edi, r8d        ; c
.text:0000000000011DBA                 mov     dword ptr [rsp+158h+ptr], edx
.text:0000000000011DBE                 mov     [rsp+158h+var_E8], r9
.text:0000000000011DC3                 call    _btowc
.text:0000000000011DC8                 mov     r9, [rsp+158h+var_E8]
.text:0000000000011DCD                 mov     edx, dword ptr [rsp+158h+ptr]
.text:0000000000011DD1                 mov     r8d, eax
.text:0000000000011DD4
.text:0000000000011DD4 loc_11DD4:                              ; CODE XREF: parse_expression+F15↑j
.text:0000000000011DD4                                         ; parse_expression+1228↓j
.text:0000000000011DD4                 cmp     edx, 0FFFFFFFFh
.text:0000000000011DD7                 jz      loc_121ED
.text:0000000000011DDD                 cmp     r8d, 0FFFFFFFFh
.text:0000000000011DE1                 jz      loc_121ED
.text:0000000000011DE7
.text:0000000000011DE7 loc_11DE7:                              ; CODE XREF: parse_expression+1267↓j
.text:0000000000011DE7                                         ; parse_expression+1273↓j
.text:0000000000011DE7                 test    [rsp+158h+var_138], 10000h
.text:0000000000011DF0                 jz      short loc_11DFB
.text:0000000000011DF2                 cmp     r8d, edx
.text:0000000000011DF5                 jb      loc_121B9
.text:0000000000011DFB
.text:0000000000011DFB loc_11DFB:                              ; CODE XREF: parse_expression+F50↑j
.text:0000000000011DFB                 test    r9, r9
.text:0000000000011DFE                 jz      short loc_11E26
.text:0000000000011E00                 mov     rax, [r9+40h]
.text:0000000000011E04                 cmp     rax, [rsp+158h+var_110]
.text:0000000000011E09                 mov     rcx, [r9+8]
.text:0000000000011E0D                 jz      loc_12223
.text:0000000000011E13
.text:0000000000011E13 loc_11E13:                              ; CODE XREF: parse_expression+1410↓j
.text:0000000000011E13                 mov     [rcx+rax*4], edx
.text:0000000000011E16                 mov     rcx, [r9+10h]
.text:0000000000011E1A                 lea     rsi, [rax+1]
.text:0000000000011E1E                 mov     [r9+40h], rsi
.text:0000000000011E22                 mov     [rcx+rax*4], r8d
.text:0000000000011E26
.text:0000000000011E26 loc_11E26:                              ; CODE XREF: parse_expression+F5E↑j
.text:0000000000011E26                 xor     eax, eax
.text:0000000000011E28                 mov     edi, 1
.text:0000000000011E2D
.text:0000000000011E2D loc_11E2D:                              ; CODE XREF: parse_expression+FB3↓j
.text:0000000000011E2D                 cmp     edx, eax
.text:0000000000011E2F                 mov     ecx, eax
.text:0000000000011E31                 ja      short loc_11E49
.text:0000000000011E33                 cmp     r8d, eax
.text:0000000000011E36                 jb      short loc_11E49
.text:0000000000011E38                 mov     rsi, rax
.text:0000000000011E3B                 mov     r11, rdi
.text:0000000000011E3E                 sar     rsi, 6
.text:0000000000011E42                 shl     r11, cl
.text:0000000000011E45                 or      [r12+rsi*8], r11
.text:0000000000011E49
.text:0000000000011E49 loc_11E49:                              ; CODE XREF: parse_expression+F91↑j
.text:0000000000011E49                                         ; parse_expression+F96↑j
.text:0000000000011E49                 add     rax, 1
.text:0000000000011E4D                 cmp     rax, 100h
.text:0000000000011E53                 jnz     short loc_11E2D
.text:0000000000011E55                 mov     rax, [rsp+158h+var_118]
.text:0000000000011E5A                 mov     dword ptr [rax], 0
.text:0000000000011E60                 jmp     loc_11AE0
.text:0000000000011E65 ; ---------------------------------------------------------------------------
.text:0000000000011E65
.text:0000000000011E65 loc_11E65:                              ; CODE XREF: parse_expression+15C↑j
.text:0000000000011E65                 mov     rbx, [rsp+158h+var_140]
.text:0000000000011E6A                 mov     rdx, rax
.text:0000000000011E6D                 mov     rsi, r14
.text:0000000000011E70                 mov     [rsp+158h+var_158], r8
.text:0000000000011E74                 mov     r15, rax
.text:0000000000011E77                 mov     rdi, rbx
.text:0000000000011E7A                 call    peek_token
.text:0000000000011E7F                 cdqe
.text:0000000000011E81                 add     [r14+48h], rax
.text:0000000000011E85                 mov     r9, [rsp+158h+var_118]
.text:0000000000011E8A                 mov     r8, [rsp+158h+var_158]
.text:0000000000011E8E                 mov     rcx, r15
.text:0000000000011E91                 mov     rdx, rbx
.text:0000000000011E94                 mov     rsi, rbp
.text:0000000000011E97                 mov     rdi, r14
.text:0000000000011E9A                 call    parse_expression
.text:0000000000011E9F                 mov     [rsp+158h+var_130], rax
.text:0000000000011EA4                 jmp     loc_10FB0
.text:0000000000011EA9 ; ---------------------------------------------------------------------------
.text:0000000000011EA9
.text:0000000000011EA9 loc_11EA9:                              ; CODE XREF: parse_expression+863↑j
.text:0000000000011EA9                                         ; parse_expression+D74↑j
.text:0000000000011EA9                 mov     rax, [rsp+158h+var_118]
.text:0000000000011EAE                 mov     dword ptr [rax], 2
.text:0000000000011EB4                 jmp     loc_11B18
.text:0000000000011EB9 ; ---------------------------------------------------------------------------
.text:0000000000011EB9
.text:0000000000011EB9 loc_11EB9:                              ; CODE XREF: parse_expression+83E↑j
.text:0000000000011EB9                 mov     rdi, r12        ; ptr
.text:0000000000011EBC                 call    _free
.text:0000000000011EC1                 mov     rdi, r13        ; ptr
.text:0000000000011EC4                 call    _free
.text:0000000000011EC9                 jmp     loc_11A08
.text:0000000000011ECE ; ---------------------------------------------------------------------------
.text:0000000000011ECE
.text:0000000000011ECE loc_11ECE:                              ; CODE XREF: parse_expression+9FC↑j
.text:0000000000011ECE                 mov     rax, [rsp+158h+var_118]
.text:0000000000011ED3                 mov     [rsp+158h+var_130], 0
.text:0000000000011EDC                 mov     dword ptr [rax], 6
.text:0000000000011EE2                 jmp     loc_10FB0
.text:0000000000011EE7 ; ---------------------------------------------------------------------------
.text:0000000000011EE7
.text:0000000000011EE7 loc_11EE7:                              ; CODE XREF: parse_expression+E33↑j
.text:0000000000011EE7                 mov     eax, ebx
.text:0000000000011EE9                 neg     eax
.text:0000000000011EEB                 cdqe
.text:0000000000011EED                 add     [r14+48h], rax
.text:0000000000011EF1                 mov     byte ptr [r15+8], 1
.text:0000000000011EF6                 mov     eax, [rsp+158h+var_B8]
.text:0000000000011EFD                 jmp     loc_117F5
.text:0000000000011F02 ; ---------------------------------------------------------------------------
.text:0000000000011F02
.text:0000000000011F02 loc_11F02:                              ; CODE XREF: parse_expression+C4F↑j
.text:0000000000011F02                 add     [r14+48h], rbx
.text:0000000000011F06                 cmp     [rsp+158h+var_101], 0
.text:0000000000011F0B                 jz      short loc_11F21
.text:0000000000011F0D                 lea     rdx, [r12+20h]
.text:0000000000011F12                 mov     rax, r12
.text:0000000000011F15
.text:0000000000011F15 loc_11F15:                              ; CODE XREF: parse_expression+107F↓j
.text:0000000000011F15                 not     qword ptr [rax]
.text:0000000000011F18                 add     rax, 8
.text:0000000000011F1C                 cmp     rdx, rax
.text:0000000000011F1F                 jnz     short loc_11F15
.text:0000000000011F21
.text:0000000000011F21 loc_11F21:                              ; CODE XREF: parse_expression+106B↑j
.text:0000000000011F21                 mov     rax, [rsp+158h+var_148]
.text:0000000000011F26                 mov     edx, [rax+0B4h]
.text:0000000000011F2C                 cmp     edx, 1
.text:0000000000011F2F                 jle     short loc_11F49
.text:0000000000011F31                 mov     rcx, [rax+78h]
.text:0000000000011F35                 xor     eax, eax
.text:0000000000011F37
.text:0000000000011F37 loc_11F37:                              ; CODE XREF: parse_expression+10A7↓j
.text:0000000000011F37                 mov     rsi, [rcx+rax]
.text:0000000000011F3B                 and     [r12+rax], rsi
.text:0000000000011F3F                 add     rax, 8
.text:0000000000011F43                 cmp     rax, 20h ; ' '
.text:0000000000011F47                 jnz     short loc_11F37
.text:0000000000011F49
.text:0000000000011F49 loc_11F49:                              ; CODE XREF: parse_expression+108F↑j
.text:0000000000011F49                 cmp     qword ptr [r13+28h], 0
.text:0000000000011F4E                 jnz     loc_11FD8
.text:0000000000011F54                 cmp     qword ptr [r13+30h], 0
.text:0000000000011F59                 jnz     short loc_11FD8
.text:0000000000011F5B                 cmp     qword ptr [r13+38h], 0
.text:0000000000011F60                 jnz     short loc_11FD8
.text:0000000000011F62                 cmp     qword ptr [r13+40h], 0
.text:0000000000011F67                 jnz     short loc_11FD8
.text:0000000000011F69                 sub     edx, 1
.text:0000000000011F6C                 jle     short loc_11F7C
.text:0000000000011F6E                 cmp     qword ptr [r13+48h], 0
.text:0000000000011F73                 jnz     short loc_11FD8
.text:0000000000011F75                 test    byte ptr [r13+20h], 1
.text:0000000000011F7A                 jnz     short loc_11FD8
.text:0000000000011F7C
.text:0000000000011F7C loc_11F7C:                              ; CODE XREF: parse_expression+10CC↑j
.text:0000000000011F7C                 mov     rdi, r13        ; ptr
.text:0000000000011F7F                 call    isl_union_flow_free_0
.text:0000000000011F84                 mov     rax, [rsp+158h+var_148]
.text:0000000000011F89                 lea     r8, [rsp+158h+var_A8]
.text:0000000000011F91                 xor     ecx, ecx
.text:0000000000011F93                 xor     edx, edx
.text:0000000000011F95                 mov     byte ptr [rsp+158h+var_A0], 3
.text:0000000000011F9D                 mov     [rsp+158h+var_A8], r12
.text:0000000000011FA5                 lea     rsi, [rax+80h]
.text:0000000000011FAC                 lea     rdi, [rax+70h]
.text:0000000000011FB0                 call    create_token_tree_isra_16
.text:0000000000011FB5                 test    rax, rax
.text:0000000000011FB8                 mov     [rsp+158h+var_130], rax
.text:0000000000011FBD                 jnz     loc_1103C
.text:0000000000011FC3
.text:0000000000011FC3 loc_11FC3:                              ; CODE XREF: parse_expression+118C↓j
.text:0000000000011FC3                                         ; parse_expression+11D0↓j ...
.text:0000000000011FC3                 mov     rax, [rsp+158h+var_118]
.text:0000000000011FC8                 mov     dword ptr [rax], 0Ch
.text:0000000000011FCE                 jmp     loc_11B18
.text:0000000000011FCE ; ---------------------------------------------------------------------------
.text:0000000000011FD3                 align 8
.text:0000000000011FD8
.text:0000000000011FD8 loc_11FD8:                              ; CODE XREF: parse_expression+10AE↑j
.text:0000000000011FD8                                         ; parse_expression+10B9↑j ...
.text:0000000000011FD8                 mov     rax, [rsp+158h+var_148]
.text:0000000000011FDD                 lea     r15, [rsp+158h+var_A8]
.text:0000000000011FE5                 xor     edx, edx
.text:0000000000011FE7                 xor     ecx, ecx
.text:0000000000011FE9                 mov     r8, r15
.text:0000000000011FEC                 or      byte ptr [rax+0B0h], 2
.text:0000000000011FF3                 lea     rbx, [rax+70h]
.text:0000000000011FF7                 lea     rbp, [rax+80h]
.text:0000000000011FFE                 mov     byte ptr [rsp+158h+var_A0], 6
.text:0000000000012006                 mov     [rsp+158h+var_A8], r13
.text:000000000001200E                 mov     rdi, rbx
.text:0000000000012011                 mov     rsi, rbp
.text:0000000000012014                 call    create_token_tree_isra_16
.text:0000000000012019                 mov     rdi, rax
.text:000000000001201C                 mov     [rsp+158h+var_130], rax
.text:0000000000012021                 lea     rdx, [r12+20h]
.text:0000000000012026                 test    rdi, rdi
.text:0000000000012029                 mov     rax, r12
.text:000000000001202C                 jz      short loc_11FC3
.text:000000000001202E
.text:000000000001202E loc_1202E:                              ; CODE XREF: parse_expression+119F↓j
.text:000000000001202E                 cmp     qword ptr [rax], 0
.text:0000000000012032                 jnz     loc_122DD
.text:0000000000012038                 add     rax, 8
.text:000000000001203C                 cmp     rdx, rax
.text:000000000001203F                 jnz     short loc_1202E
.text:0000000000012041                 mov     rdi, r12        ; ptr
.text:0000000000012044                 call    _free
.text:0000000000012049                 jmp     loc_1103C
.text:000000000001204E ; ---------------------------------------------------------------------------
.text:000000000001204E
.text:000000000001204E loc_1204E:                              ; CODE XREF: parse_expression+CB4↑j
.text:000000000001204E                 mov     rdx, qword ptr [rsp+158h+var_128]
.text:0000000000012053                 lea     rdi, [rdx+rdx+1]
.text:0000000000012058                 lea     rsi, ds:0[rdi*4] ; size
.text:0000000000012060                 mov     qword ptr [rsp+158h+var_128], rdi
.text:0000000000012065                 mov     rdi, rax        ; ptr
.text:0000000000012068                 call    _realloc
.text:000000000001206D                 test    rax, rax
.text:0000000000012070                 jz      loc_11FC3
.text:0000000000012076                 mov     [r13+0], rax
.text:000000000001207A                 mov     rdx, [r13+28h]
.text:000000000001207E                 jmp     loc_11B5A
.text:0000000000012083 ; ---------------------------------------------------------------------------
.text:0000000000012083
.text:0000000000012083 loc_12083:                              ; CODE XREF: parse_expression+1239↓j
.text:0000000000012083                                         ; parse_expression+123E↓j
.text:0000000000012083                 xor     r8d, r8d
.text:0000000000012086
.text:0000000000012086 loc_12086:                              ; CODE XREF: parse_expression+EFC↑j
.text:0000000000012086                                         ; parse_expression+F05↑j
.text:0000000000012086                 test    r9, r9
.text:0000000000012089                 jz      short loc_12104
.text:000000000001208B                 mov     edi, edx        ; c
.text:000000000001208D                 mov     dword ptr [rsp+158h+ptr], r8d
.text:0000000000012092                 mov     [rsp+158h+var_E8], r9
.text:0000000000012097                 call    _btowc
.text:000000000001209C                 mov     edx, eax
.text:000000000001209E                 mov     eax, dword ptr [rsp+158h+var_A8]
.text:00000000000120A5                 mov     r9, [rsp+158h+var_E8]
.text:00000000000120AA                 mov     r8d, dword ptr [rsp+158h+ptr]
.text:00000000000120AF                 cmp     eax, 3
.text:00000000000120B2                 jz      loc_11DB7
.text:00000000000120B8                 test    eax, eax
.text:00000000000120BA                 jz      loc_11DB7
.text:00000000000120C0
.text:00000000000120C0 loc_120C0:                              ; CODE XREF: parse_expression+1247↓j
.text:00000000000120C0                                         ; parse_expression+1271↓j
.text:00000000000120C0                 mov     r8d, dword ptr [rsp+158h+var_A0]
.text:00000000000120C8                 jmp     loc_11DD4
.text:00000000000120CD ; ---------------------------------------------------------------------------
.text:00000000000120CD
.text:00000000000120CD loc_120CD:                              ; CODE XREF: parse_expression+EEB↑j
.text:00000000000120CD                 cmp     r10d, 3
.text:00000000000120D1                 jz      loc_12362
.text:00000000000120D7                 test    esi, esi
.text:00000000000120D9                 jz      short loc_12083
.text:00000000000120DB                 test    r11b, r11b
.text:00000000000120DE                 jnz     short loc_12083
.text:00000000000120E0                 mov     edx, dword ptr [rsp+158h+var_B0]
.text:00000000000120E7                 jmp     short loc_120C0
.text:00000000000120E9 ; ---------------------------------------------------------------------------
.text:00000000000120E9
.text:00000000000120E9 loc_120E9:                              ; CODE XREF: parse_expression+EDA↑j
.text:00000000000120E9                 xor     edx, edx
.text:00000000000120EB                 cmp     esi, 3
.text:00000000000120EE                 jnz     loc_11D88
.text:00000000000120F4                 mov     rax, [rsp+158h+var_B0]
.text:00000000000120FC                 movzx   edx, byte ptr [rax]
.text:00000000000120FF                 jmp     loc_11D88
.text:0000000000012104 ; ---------------------------------------------------------------------------
.text:0000000000012104
.text:0000000000012104 loc_12104:                              ; CODE XREF: parse_expression+11E9↑j
.text:0000000000012104                 test    r10d, r10d
.text:0000000000012107                 jz      loc_11DE7
.text:000000000001210D                 cmp     r10d, 3
.text:0000000000012111                 jnz     short loc_120C0
.text:0000000000012113                 jmp     loc_11DE7
.text:0000000000012118 ; ---------------------------------------------------------------------------
.text:0000000000012118
.text:0000000000012118 loc_12118:                              ; CODE XREF: parse_expression+719↑j
.text:0000000000012118                 mov     ebx, 80h
.text:000000000001211D                 mov     r12d, 2
.text:0000000000012123
.text:0000000000012123 loc_12123:                              ; CODE XREF: parse_expression+12F8↓j
.text:0000000000012123                 call    ___ctype_b_loc
.text:0000000000012128                 movsxd  rdx, ebx
.text:000000000001212B                 movsxd  r9, r12d
.text:000000000001212E                 mov     r8d, 1
.text:0000000000012134                 add     rdx, rdx
.text:0000000000012137                 add     rdx, [rax]
.text:000000000001213A                 mov     rax, [rsp+158h+var_148]
.text:000000000001213F                 lea     rdi, [rax+r9*8]
.text:0000000000012143
.text:0000000000012143 loc_12143:                              ; CODE XREF: parse_expression+12EC↓j
.text:0000000000012143                 xor     eax, eax
.text:0000000000012145                 jmp     short loc_12162
.text:0000000000012145 ; ---------------------------------------------------------------------------
.text:0000000000012147                 align 10h
.text:0000000000012150
.text:0000000000012150 loc_12150:                              ; CODE XREF: parse_expression+12C8↓j
.text:0000000000012150                 lea     esi, [rbx+rax]
.text:0000000000012153                 cmp     esi, 5Fh ; '_'
.text:0000000000012156                 jz      short loc_1216A
.text:0000000000012158
.text:0000000000012158 loc_12158:                              ; CODE XREF: parse_expression+12D7↓j
.text:0000000000012158                 add     rax, 1
.text:000000000001215C                 cmp     rax, 40h ; '@'
.text:0000000000012160                 jz      short loc_12179
.text:0000000000012162
.text:0000000000012162 loc_12162:                              ; CODE XREF: parse_expression+12A5↑j
.text:0000000000012162                 test    byte ptr [rdx+rax*2], 8
.text:0000000000012166                 mov     ecx, eax
.text:0000000000012168                 jz      short loc_12150
.text:000000000001216A
.text:000000000001216A loc_1216A:                              ; CODE XREF: parse_expression+12B6↑j
.text:000000000001216A                 mov     rsi, r8
.text:000000000001216D                 shl     rsi, cl
.text:0000000000012170                 or      [rdi+0B8h], rsi
.text:0000000000012177                 jmp     short loc_12158
.text:0000000000012179 ; ---------------------------------------------------------------------------
.text:0000000000012179
.text:0000000000012179 loc_12179:                              ; CODE XREF: parse_expression+12C0↑j
.text:0000000000012179                 add     r9, 1
.text:000000000001217D                 add     ebx, 40h ; '@'
.text:0000000000012180                 sub     rdx, 0FFFFFFFFFFFFFF80h
.text:0000000000012184                 add     rdi, 8
.text:0000000000012188                 cmp     r9d, 3
.text:000000000001218C                 jle     short loc_12143
.text:000000000001218E                 jmp     loc_115D1
.text:0000000000012193 ; ---------------------------------------------------------------------------
.text:0000000000012193
.text:0000000000012193 loc_12193:                              ; CODE XREF: parse_expression+6EF↑j
.text:0000000000012193                 xor     ebx, ebx
.text:0000000000012195                 xor     r12d, r12d
.text:0000000000012198                 jmp     short loc_12123
.text:000000000001219A ; ---------------------------------------------------------------------------
.text:000000000001219A
.text:000000000001219A def_11806:                              ; CODE XREF: parse_expression+958↑j
.text:000000000001219A                 lea     rcx, __PRETTY_FUNCTION___7327 ; jumptable 0000000000011806 default case
.text:00000000000121A1                 lea     rsi, aCoreutils831Li_1 ; "../coreutils-8.31/lib/regcomp.c"
.text:00000000000121A8                 lea     rdi, aNum0+7    ; assertion
.text:00000000000121AF                 mov     edx, 0CEDh      ; line
.text:00000000000121B4                 call    ___assert_fail
.text:00000000000121B9 ; ---------------------------------------------------------------------------
.text:00000000000121B9
.text:00000000000121B9 loc_121B9:                              ; CODE XREF: parse_expression+EA6↑j
.text:00000000000121B9                                         ; parse_expression+EBB↑j ...
.text:00000000000121B9                 mov     rax, [rsp+158h+var_118]
.text:00000000000121BE                 mov     dword ptr [rax], 0Bh
.text:00000000000121C4                 jmp     loc_11B18
.text:00000000000121C9 ; ---------------------------------------------------------------------------
.text:00000000000121C9
.text:00000000000121C9 loc_121C9:                              ; CODE XREF: parse_expression+ED2↑j
.text:00000000000121C9                 mov     rdi, [rsp+158h+var_A0]
.text:00000000000121D1                 xor     eax, eax
.text:00000000000121D3                 or      rcx, 0FFFFFFFFFFFFFFFFh
.text:00000000000121D7                 repne scasb
.text:00000000000121D9                 mov     rax, rcx
.text:00000000000121DC                 not     rax
.text:00000000000121DF                 sub     rax, 1
.text:00000000000121E3                 cmp     rax, 1
.text:00000000000121E7                 jbe     loc_11D78
.text:00000000000121ED
.text:00000000000121ED loc_121ED:                              ; CODE XREF: parse_expression+F37↑j
.text:00000000000121ED                                         ; parse_expression+F41↑j ...
.text:00000000000121ED                 mov     rax, [rsp+158h+var_118]
.text:00000000000121F2                 mov     dword ptr [rax], 3
.text:00000000000121F8                 jmp     loc_11B18
.text:00000000000121FD ; ---------------------------------------------------------------------------
.text:00000000000121FD
.text:00000000000121FD loc_121FD:                              ; CODE XREF: parse_expression+EC8↑j
.text:00000000000121FD                 mov     rdi, [rsp+158h+var_B0]
.text:0000000000012205                 xor     eax, eax
.text:0000000000012207                 or      rcx, 0FFFFFFFFFFFFFFFFh
.text:000000000001220B                 repne scasb
.text:000000000001220D                 mov     rax, rcx
.text:0000000000012210                 not     rax
.text:0000000000012213                 sub     rax, 1
.text:0000000000012217                 cmp     rax, 1
.text:000000000001221B                 jbe     loc_11D6E
.text:0000000000012221                 jmp     short loc_121ED
.text:0000000000012223 ; ---------------------------------------------------------------------------
.text:0000000000012223
.text:0000000000012223 loc_12223:                              ; CODE XREF: parse_expression+F6D↑j
.text:0000000000012223                 mov     rax, [rsp+158h+var_110]
.text:0000000000012228                 mov     rdi, rcx        ; ptr
.text:000000000001222B                 mov     [rsp+158h+var_CC], r8d
.text:0000000000012233                 mov     [rsp+158h+var_D0], edx
.text:000000000001223A                 mov     [rsp+158h+var_E8], r9
.text:000000000001223F                 add     rax, rax
.text:0000000000012242                 add     rax, 1
.text:0000000000012246                 lea     r10, ds:0[rax*4]
.text:000000000001224E                 mov     [rsp+158h+var_110], rax
.text:0000000000012253                 mov     rsi, r10        ; size
.text:0000000000012256                 mov     [rsp+158h+size], r10
.text:000000000001225E                 call    _realloc
.text:0000000000012263                 mov     r9, [rsp+158h+var_E8]
.text:0000000000012268                 mov     r10, [rsp+158h+size]
.text:0000000000012270                 mov     [rsp+158h+ptr], rax
.text:0000000000012275                 mov     rdi, [r9+10h]   ; ptr
.text:0000000000012279                 mov     rsi, r10        ; size
.text:000000000001227C                 call    _realloc
.text:0000000000012281                 mov     rcx, [rsp+158h+ptr]
.text:0000000000012286                 test    rcx, rcx
.text:0000000000012289                 jz      short loc_122B5
.text:000000000001228B                 test    rax, rax
.text:000000000001228E                 mov     r9, [rsp+158h+var_E8]
.text:0000000000012293                 mov     edx, [rsp+158h+var_D0]
.text:000000000001229A                 mov     r8d, [rsp+158h+var_CC]
.text:00000000000122A2                 jz      short loc_122B5
.text:00000000000122A4                 mov     [r9+10h], rax
.text:00000000000122A8                 mov     [r9+8], rcx
.text:00000000000122AC                 mov     rax, [r9+40h]
.text:00000000000122B0                 jmp     loc_11E13
.text:00000000000122B5 ; ---------------------------------------------------------------------------
.text:00000000000122B5
.text:00000000000122B5 loc_122B5:                              ; CODE XREF: parse_expression+13E9↑j
.text:00000000000122B5                                         ; parse_expression+1402↑j
.text:00000000000122B5                 mov     rdi, rcx        ; ptr
.text:00000000000122B8                 mov     [rsp+158h+var_158], rax
.text:00000000000122BC                 call    _free
.text:00000000000122C1                 mov     rax, [rsp+158h+var_158]
.text:00000000000122C5                 mov     rdi, rax        ; ptr
.text:00000000000122C8                 call    _free
.text:00000000000122CD                 mov     rax, [rsp+158h+var_118]
.text:00000000000122D2                 mov     dword ptr [rax], 0Ch
.text:00000000000122D8                 jmp     loc_11B18
.text:00000000000122DD ; ---------------------------------------------------------------------------
.text:00000000000122DD
.text:00000000000122DD loc_122DD:                              ; CODE XREF: parse_expression+1192↑j
.text:00000000000122DD                 xor     ecx, ecx
.text:00000000000122DF                 xor     edx, edx
.text:00000000000122E1                 mov     r8, r15
.text:00000000000122E4                 mov     rsi, rbp
.text:00000000000122E7                 mov     rdi, rbx
.text:00000000000122EA                 mov     byte ptr [rsp+158h+var_A0], 3
.text:00000000000122F2                 mov     [rsp+158h+var_A8], r12
.text:00000000000122FA                 call    create_token_tree_isra_16
.text:00000000000122FF                 test    rax, rax
.text:0000000000012302                 jz      loc_11FC3
.text:0000000000012308                 mov     rcx, [rsp+158h+var_130]
.text:000000000001230D                 lea     r8, [rsp+158h+var_98]
.text:0000000000012315                 mov     rdx, rax
.text:0000000000012318                 mov     rsi, rbp
.text:000000000001231B                 mov     rdi, rbx
.text:000000000001231E                 mov     [rsp+158h+var_90], 0Ah
.text:0000000000012326                 call    create_token_tree_isra_16
.text:000000000001232B                 test    rax, rax
.text:000000000001232E                 mov     [rsp+158h+var_130], rax
.text:0000000000012333                 jnz     loc_1103C
.text:0000000000012339                 jmp     loc_11FC3
.text:000000000001233E ; ---------------------------------------------------------------------------
.text:000000000001233E
.text:000000000001233E loc_1233E:                              ; CODE XREF: parse_expression+126↑j
.text:000000000001233E                 call    ___stack_chk_fail
.text:0000000000012343 ; ---------------------------------------------------------------------------
.text:0000000000012343
.text:0000000000012343 loc_12343:                              ; CODE XREF: parse_expression+566↑j
.text:0000000000012343                 mov     rax, [rsp+158h+var_140]
.text:0000000000012348                 cmp     byte ptr [rax+8], 2
.text:000000000001234C                 jnz     loc_11540
.text:0000000000012352                 mov     rax, [rsp+158h+var_118]
.text:0000000000012357                 mov     dword ptr [rax], 9
.text:000000000001235D                 jmp     loc_1154B
.text:0000000000012362 ; ---------------------------------------------------------------------------
.text:0000000000012362
.text:0000000000012362 loc_12362:                              ; CODE XREF: parse_expression+1231↑j
.text:0000000000012362                 mov     rax, [rsp+158h+var_A0]
.text:000000000001236A                 movzx   r8d, byte ptr [rax]
.text:000000000001236E                 jmp     loc_11D9A
.text:000000000001236E ; } // starts at 10EA0
.text:000000000001236E parse_expression endp
.text:000000000001236E
.text:000000000001236E ; ---------------------------------------------------------------------------
.text:0000000000012373                 align 20h
.text:0000000000012380
.text:0000000000012380 ; =============== S U B R O U T I N E =======================================
.text:0000000000012380
.text:0000000000012380
.text:0000000000012380 parse_branch    proc near               ; CODE XREF: parse_reg_exp+43↓p
.text:0000000000012380                                         ; parse_reg_exp+AE↓p
.text:0000000000012380
.text:0000000000012380 var_78          = qword ptr -78h
.text:0000000000012380 var_70          = qword ptr -70h
.text:0000000000012380 var_68          = qword ptr -68h
.text:0000000000012380 var_60          = qword ptr -60h
.text:0000000000012380 var_58          = byte ptr -58h
.text:0000000000012380 var_50          = byte ptr -50h
.text:0000000000012380 var_40          = qword ptr -40h
.text:0000000000012380
.text:0000000000012380 ; __unwind {
.text:0000000000012380                 push    r15
.text:0000000000012382                 push    r14
.text:0000000000012384                 mov     r15, rcx
.text:0000000000012387                 push    r13
.text:0000000000012389                 push    r12
.text:000000000001238B                 mov     r13, rsi
.text:000000000001238E                 push    rbp
.text:000000000001238F                 push    rbx
.text:0000000000012390                 mov     rbx, r9
.text:0000000000012393                 mov     rbp, rdx
.text:0000000000012396                 mov     r12, r8
.text:0000000000012399                 sub     rsp, 48h
.text:000000000001239D                 mov     rax, fs:28h
.text:00000000000123A6                 mov     [rsp+78h+var_40], rax
.text:00000000000123AB                 xor     eax, eax
.text:00000000000123AD                 mov     rax, [rsi]
.text:00000000000123B0                 mov     [rsp+78h+var_78], rdi
.text:00000000000123B4                 mov     [rsp+78h+var_68], rax
.text:00000000000123B9                 call    parse_expression
.text:00000000000123BE                 mov     edx, [rbx]
.text:00000000000123C0                 mov     r14, rax
.text:00000000000123C3                 test    edx, edx
.text:00000000000123C5                 jz      short loc_123D0
.text:00000000000123C7                 test    rax, rax
.text:00000000000123CA                 jz      loc_124CA
.text:00000000000123D0
.text:00000000000123D0 loc_123D0:                              ; CODE XREF: parse_branch+45↑j
.text:00000000000123D0                 lea     rax, [rsp+78h+var_58]
.text:00000000000123D5                 mov     [rsp+78h+var_60], rax
.text:00000000000123DA                 nop     word ptr [rax+rax+00h]
.text:00000000000123E0
.text:00000000000123E0 loc_123E0:                              ; CODE XREF: parse_branch+12F↓j
.text:00000000000123E0                 movzx   eax, byte ptr [rbp+8]
.text:00000000000123E4                 mov     edx, eax
.text:00000000000123E6                 and     edx, 0FFFFFFF7h
.text:00000000000123E9                 cmp     dl, 2
.text:00000000000123EC                 jz      loc_12480
.text:00000000000123F2
.text:00000000000123F2 loc_123F2:                              ; CODE XREF: parse_branch+F6↓j
.text:00000000000123F2                 cmp     al, 9
.text:00000000000123F4                 jnz     short loc_123FF
.text:00000000000123F6                 test    r12, r12
.text:00000000000123F9                 jnz     loc_12480
.text:00000000000123FF
.text:00000000000123FF loc_123FF:                              ; CODE XREF: parse_branch+74↑j
.text:00000000000123FF                 mov     rdi, [rsp+78h+var_78]
.text:0000000000012403                 mov     r9, rbx
.text:0000000000012406                 mov     r8, r12
.text:0000000000012409                 mov     rcx, r15
.text:000000000001240C                 mov     rdx, rbp
.text:000000000001240F                 mov     rsi, r13
.text:0000000000012412                 call    parse_expression
.text:0000000000012417                 mov     r9, rax
.text:000000000001241A                 mov     eax, [rbx]
.text:000000000001241C                 test    eax, eax
.text:000000000001241E                 jz      short loc_12429
.text:0000000000012420                 test    r9, r9
.text:0000000000012423                 jz      loc_124B4
.text:0000000000012429
.text:0000000000012429 loc_12429:                              ; CODE XREF: parse_branch+9E↑j
.text:0000000000012429                 test    r14, r14
.text:000000000001242C                 jz      short loc_124A8
.text:000000000001242E                 test    r9, r9
.text:0000000000012431                 jz      short loc_124A8
.text:0000000000012433                 mov     rax, [rsp+78h+var_68]
.text:0000000000012438                 mov     r8, [rsp+78h+var_60]
.text:000000000001243D                 mov     rcx, r9
.text:0000000000012440                 mov     rdx, r14
.text:0000000000012443                 mov     [rsp+78h+var_70], r9
.text:0000000000012448                 mov     [rsp+78h+var_50], 10h
.text:000000000001244D                 lea     rsi, [rax+80h]
.text:0000000000012454                 lea     rdi, [rax+70h]
.text:0000000000012458                 call    create_token_tree_isra_16
.text:000000000001245D                 test    rax, rax
.text:0000000000012460                 mov     r9, [rsp+78h+var_70]
.text:0000000000012465                 jz      short loc_124D0
.text:0000000000012467                 mov     r14, rax
.text:000000000001246A                 movzx   eax, byte ptr [rbp+8]
.text:000000000001246E                 mov     edx, eax
.text:0000000000012470                 and     edx, 0FFFFFFF7h
.text:0000000000012473                 cmp     dl, 2
.text:0000000000012476                 jnz     loc_123F2
.text:000000000001247C                 nop     dword ptr [rax+00h]
.text:0000000000012480
.text:0000000000012480 loc_12480:                              ; CODE XREF: parse_branch+6C↑j
.text:0000000000012480                                         ; parse_branch+79↑j ...
.text:0000000000012480                 mov     rcx, [rsp+78h+var_40]
.text:0000000000012485                 xor     rcx, fs:28h
.text:000000000001248E                 mov     rax, r14
.text:0000000000012491                 jnz     short loc_124FD
.text:0000000000012493                 add     rsp, 48h
.text:0000000000012497                 pop     rbx
.text:0000000000012498                 pop     rbp
.text:0000000000012499                 pop     r12
.text:000000000001249B                 pop     r13
.text:000000000001249D                 pop     r14
.text:000000000001249F                 pop     r15
.text:00000000000124A1                 retn
.text:00000000000124A1 ; ---------------------------------------------------------------------------
.text:00000000000124A2                 align 8
.text:00000000000124A8
.text:00000000000124A8 loc_124A8:                              ; CODE XREF: parse_branch+AC↑j
.text:00000000000124A8                                         ; parse_branch+B1↑j
.text:00000000000124A8                 test    r14, r14
.text:00000000000124AB                 cmovz   r14, r9
.text:00000000000124AF                 jmp     loc_123E0
.text:00000000000124B4 ; ---------------------------------------------------------------------------
.text:00000000000124B4
.text:00000000000124B4 loc_124B4:                              ; CODE XREF: parse_branch+A3↑j
.text:00000000000124B4                 test    r14, r14
.text:00000000000124B7                 jz      short loc_124CA
.text:00000000000124B9                 lea     rsi, free_tree
.text:00000000000124C0                 xor     edx, edx
.text:00000000000124C2                 mov     rdi, r14
.text:00000000000124C5                 call    postorder
.text:00000000000124CA
.text:00000000000124CA loc_124CA:                              ; CODE XREF: parse_branch+4A↑j
.text:00000000000124CA                                         ; parse_branch+137↑j
.text:00000000000124CA                 xor     r14d, r14d
.text:00000000000124CD                 jmp     short loc_12480
.text:00000000000124CD ; ---------------------------------------------------------------------------
.text:00000000000124CF                 align 10h
.text:00000000000124D0
.text:00000000000124D0 loc_124D0:                              ; CODE XREF: parse_branch+E5↑j
.text:00000000000124D0                 lea     rsi, free_tree
.text:00000000000124D7                 mov     rdi, r9
.text:00000000000124DA                 xor     edx, edx
.text:00000000000124DC                 call    postorder
.text:00000000000124E1                 lea     rsi, free_tree
.text:00000000000124E8                 mov     rdi, r14
.text:00000000000124EB                 xor     edx, edx
.text:00000000000124ED                 xor     r14d, r14d
.text:00000000000124F0                 call    postorder
.text:00000000000124F5                 mov     dword ptr [rbx], 0Ch
.text:00000000000124FB                 jmp     short loc_12480
.text:00000000000124FD ; ---------------------------------------------------------------------------
.text:00000000000124FD
.text:00000000000124FD loc_124FD:                              ; CODE XREF: parse_branch+111↑j
.text:00000000000124FD                 call    ___stack_chk_fail
.text:00000000000124FD ; } // starts at 12380
.text:00000000000124FD parse_branch    endp
.text:00000000000124FD
.text:00000000000124FD ; ---------------------------------------------------------------------------
.text:0000000000012502                 align 10h
.text:0000000000012510
.text:0000000000012510 ; =============== S U B R O U T I N E =======================================
.text:0000000000012510
.text:0000000000012510
.text:0000000000012510 parse_reg_exp   proc near               ; CODE XREF: parse_expression+BF↑p
.text:0000000000012510                                         ; re_compile_internal+4B3↓p
.text:0000000000012510
.text:0000000000012510 var_80          = qword ptr -80h
.text:0000000000012510 var_78          = qword ptr -78h
.text:0000000000012510 var_70          = qword ptr -70h
.text:0000000000012510 var_68          = qword ptr -68h
.text:0000000000012510 var_60          = qword ptr -60h
.text:0000000000012510 var_58          = byte ptr -58h
.text:0000000000012510 var_50          = byte ptr -50h
.text:0000000000012510 var_40          = qword ptr -40h
.text:0000000000012510
.text:0000000000012510 ; __unwind {
.text:0000000000012510                 push    r15
.text:0000000000012512                 push    r14
.text:0000000000012514                 mov     r14, rcx
.text:0000000000012517                 push    r13
.text:0000000000012519                 push    r12
.text:000000000001251B                 mov     r13, r9
.text:000000000001251E                 push    rbp
.text:000000000001251F                 push    rbx
.text:0000000000012520                 mov     rbp, rdx
.text:0000000000012523                 mov     r12, rdi
.text:0000000000012526                 sub     rsp, 58h
.text:000000000001252A                 mov     rbx, [rsi]
.text:000000000001252D                 mov     rax, fs:28h
.text:0000000000012536                 mov     [rsp+88h+var_40], rax
.text:000000000001253B                 xor     eax, eax
.text:000000000001253D                 mov     [rsp+88h+var_60], rsi
.text:0000000000012542                 mov     [rsp+88h+var_78], r8
.text:0000000000012547                 mov     rax, [rbx+0A8h]
.text:000000000001254E                 mov     [rsp+88h+var_68], rax
.text:0000000000012553                 call    parse_branch
.text:0000000000012558                 mov     edx, [r13+0]
.text:000000000001255C                 mov     r15, rax
.text:000000000001255F                 test    edx, edx
.text:0000000000012561                 jz      short loc_1256C
.text:0000000000012563                 test    rax, rax
.text:0000000000012566                 jz      loc_12652
.text:000000000001256C
.text:000000000001256C loc_1256C:                              ; CODE XREF: parse_reg_exp+51↑j
.text:000000000001256C                 lea     rax, [rsp+88h+var_58]
.text:0000000000012571                 mov     [rsp+88h+var_80], rax
.text:0000000000012576                 jmp     loc_12604
.text:0000000000012576 ; ---------------------------------------------------------------------------
.text:000000000001257B                 align 20h
.text:0000000000012580
.text:0000000000012580 loc_12580:                              ; CODE XREF: parse_reg_exp+122↓j
.text:0000000000012580                 cmp     al, 9
.text:0000000000012582                 jnz     short loc_12590
.text:0000000000012584                 cmp     [rsp+88h+var_78], 0
.text:000000000001258A                 jnz     loc_12638
.text:0000000000012590
.text:0000000000012590 loc_12590:                              ; CODE XREF: parse_reg_exp+72↑j
.text:0000000000012590                 mov     rax, [rbx+0A8h]
.text:0000000000012597                 mov     r8, [rsp+88h+var_78]
.text:000000000001259C                 mov     rcx, r14
.text:000000000001259F                 mov     rsi, [rsp+88h+var_60]
.text:00000000000125A4                 mov     r9, r13
.text:00000000000125A7                 mov     rdx, rbp
.text:00000000000125AA                 mov     rdi, r12
.text:00000000000125AD                 mov     [rsp+88h+var_70], rax
.text:00000000000125B2                 mov     rax, [rsp+88h+var_68]
.text:00000000000125B7                 mov     [rbx+0A8h], rax
.text:00000000000125BE                 call    parse_branch
.text:00000000000125C3                 mov     rcx, rax
.text:00000000000125C6                 mov     eax, [r13+0]
.text:00000000000125CA                 test    eax, eax
.text:00000000000125CC                 jz      short loc_125D3
.text:00000000000125CE                 test    rcx, rcx
.text:00000000000125D1                 jz      short loc_1263C
.text:00000000000125D3
.text:00000000000125D3 loc_125D3:                              ; CODE XREF: parse_reg_exp+BC↑j
.text:00000000000125D3                 mov     rax, [rsp+88h+var_70]
.text:00000000000125D8                 or      [rbx+0A8h], rax
.text:00000000000125DF
.text:00000000000125DF loc_125DF:                              ; CODE XREF: parse_reg_exp+12A↓j
.text:00000000000125DF                 mov     r8, [rsp+88h+var_80]
.text:00000000000125E4                 lea     rsi, [rbx+80h]
.text:00000000000125EB                 lea     rdi, [rbx+70h]
.text:00000000000125EF                 mov     rdx, r15
.text:00000000000125F2                 mov     [rsp+88h+var_50], 0Ah
.text:00000000000125F7                 call    create_token_tree_isra_16
.text:00000000000125FC                 test    rax, rax
.text:00000000000125FF                 mov     r15, rax
.text:0000000000012602                 jz      short loc_12680
.text:0000000000012604
.text:0000000000012604 loc_12604:                              ; CODE XREF: parse_reg_exp+66↑j
.text:0000000000012604                 cmp     byte ptr [rbp+8], 0Ah
.text:0000000000012608                 jnz     short loc_12658
.text:000000000001260A                 mov     rdx, r14
.text:000000000001260D                 mov     rsi, r12
.text:0000000000012610                 mov     rdi, rbp
.text:0000000000012613                 or      rdx, 800000h
.text:000000000001261A                 call    peek_token
.text:000000000001261F                 cdqe
.text:0000000000012621                 add     [r12+48h], rax
.text:0000000000012626                 movzx   eax, byte ptr [rbp+8]
.text:000000000001262A                 mov     edx, eax
.text:000000000001262C                 and     edx, 0FFFFFFF7h
.text:000000000001262F                 cmp     dl, 2
.text:0000000000012632                 jnz     loc_12580
.text:0000000000012638
.text:0000000000012638 loc_12638:                              ; CODE XREF: parse_reg_exp+7A↑j
.text:0000000000012638                 xor     ecx, ecx
.text:000000000001263A                 jmp     short loc_125DF
.text:000000000001263C ; ---------------------------------------------------------------------------
.text:000000000001263C
.text:000000000001263C loc_1263C:                              ; CODE XREF: parse_reg_exp+C1↑j
.text:000000000001263C                 test    r15, r15
.text:000000000001263F                 jz      short loc_12652
.text:0000000000012641                 lea     rsi, free_tree
.text:0000000000012648                 xor     edx, edx
.text:000000000001264A                 mov     rdi, r15
.text:000000000001264D                 call    postorder
.text:0000000000012652
.text:0000000000012652 loc_12652:                              ; CODE XREF: parse_reg_exp+56↑j
.text:0000000000012652                                         ; parse_reg_exp+12F↑j
.text:0000000000012652                 xor     r15d, r15d
.text:0000000000012655                 nop     dword ptr [rax]
.text:0000000000012658
.text:0000000000012658 loc_12658:                              ; CODE XREF: parse_reg_exp+F8↑j
.text:0000000000012658                                         ; parse_reg_exp+178↓j
.text:0000000000012658                 mov     rcx, [rsp+88h+var_40]
.text:000000000001265D                 xor     rcx, fs:28h
.text:0000000000012666                 mov     rax, r15
.text:0000000000012669                 jnz     short loc_1268A
.text:000000000001266B                 add     rsp, 58h
.text:000000000001266F                 pop     rbx
.text:0000000000012670                 pop     rbp
.text:0000000000012671                 pop     r12
.text:0000000000012673                 pop     r13
.text:0000000000012675                 pop     r14
.text:0000000000012677                 pop     r15
.text:0000000000012679                 retn
.text:0000000000012679 ; ---------------------------------------------------------------------------
.text:000000000001267A                 align 20h
.text:0000000000012680
.text:0000000000012680 loc_12680:                              ; CODE XREF: parse_reg_exp+F2↑j
.text:0000000000012680                 mov     dword ptr [r13+0], 0Ch
.text:0000000000012688                 jmp     short loc_12658
.text:000000000001268A ; ---------------------------------------------------------------------------
.text:000000000001268A
.text:000000000001268A loc_1268A:                              ; CODE XREF: parse_reg_exp+159↑j
.text:000000000001268A                 call    ___stack_chk_fail
.text:000000000001268A ; } // starts at 12510
.text:000000000001268A parse_reg_exp   endp
.text:000000000001268A
.text:000000000001268A ; ---------------------------------------------------------------------------
.text:000000000001268F                 align 10h
.text:0000000000012690
.text:0000000000012690 ; =============== S U B R O U T I N E =======================================
.text:0000000000012690
.text:0000000000012690
.text:0000000000012690 re_compile_internal proc near           ; CODE XREF: rpl_re_compile_pattern+35↓p
.text:0000000000012690                                         ; rpl_regcomp+A4↓p
.text:0000000000012690
.text:0000000000012690 size            = qword ptr -158h
.text:0000000000012690 var_150         = qword ptr -150h
.text:0000000000012690 var_148         = qword ptr -148h
.text:0000000000012690 var_140         = qword ptr -140h
.text:0000000000012690 var_138         = qword ptr -138h
.text:0000000000012690 var_130         = qword ptr -130h
.text:0000000000012690 var_128         = qword ptr -128h
.text:0000000000012690 var_120         = qword ptr -120h
.text:0000000000012690 var_10C         = dword ptr -10Ch
.text:0000000000012690 var_108         = dword ptr -108h
.text:0000000000012690 var_F8          = byte ptr -0F8h
.text:0000000000012690 var_F0          = qword ptr -0F0h
.text:0000000000012690 ptr             = qword ptr -0E8h
.text:0000000000012690 var_D8          = qword ptr -0D8h
.text:0000000000012690 var_D0          = qword ptr -0D0h
.text:0000000000012690 var_B0          = qword ptr -0B0h
.text:0000000000012690 var_A8          = qword ptr -0A8h
.text:0000000000012690 var_A0          = qword ptr -0A0h
.text:0000000000012690 var_98          = qword ptr -98h
.text:0000000000012690 var_90          = qword ptr -90h
.text:0000000000012690 var_88          = qword ptr -88h
.text:0000000000012690 var_80          = qword ptr -80h
.text:0000000000012690 var_78          = qword ptr -78h
.text:0000000000012690 var_70          = qword ptr -70h
.text:0000000000012690 var_60          = qword ptr -60h
.text:0000000000012690 var_50          = byte ptr -50h
.text:0000000000012690 var_4F          = byte ptr -4Fh
.text:0000000000012690 var_4E          = byte ptr -4Eh
.text:0000000000012690 var_4D          = byte ptr -4Dh
.text:0000000000012690 var_48          = dword ptr -48h
.text:0000000000012690 var_40          = qword ptr -40h
.text:0000000000012690
.text:0000000000012690 ; __unwind {
.text:0000000000012690                 push    r15
.text:0000000000012692                 push    r14
.text:0000000000012694                 push    r13
.text:0000000000012696                 push    r12
.text:0000000000012698                 push    rbp
.text:0000000000012699                 push    rbx
.text:000000000001269A                 sub     rsp, 128h
.text:00000000000126A1                 mov     [rdi+18h], rcx
.text:00000000000126A5                 mov     qword ptr [rdi+10h], 0
.text:00000000000126AD                 mov     rax, fs:28h
.text:00000000000126B6                 mov     [rsp+158h+var_40], rax
.text:00000000000126BE                 xor     eax, eax
.text:00000000000126C0                 movzx   eax, byte ptr [rdi+38h]
.text:00000000000126C4                 mov     [rsp+158h+var_150], rdi
.text:00000000000126C9                 mov     [rsp+158h+var_148], rsi
.text:00000000000126CE                 mov     [rsp+158h+size], rdx
.text:00000000000126D2                 mov     [rsp+158h+var_140], rcx
.text:00000000000126D7                 mov     [rsp+158h+var_10C], 0
.text:00000000000126DF                 mov     qword ptr [rdi+30h], 0
.text:00000000000126E7                 mov     rbx, [rdi]
.text:00000000000126EA                 mov     byte ptr [rsp+158h+var_138], al
.text:00000000000126EE                 and     eax, 0FFFFFF90h
.text:00000000000126F1                 cmp     qword ptr [rdi+8], 0E7h
.text:00000000000126F9                 mov     [rdi+38h], al
.text:00000000000126FC                 jbe     loc_134F6
.text:0000000000012702
.text:0000000000012702 loc_12702:                              ; CODE XREF: re_compile_internal+E8F↓j
.text:0000000000012702                 lea     rdi, [rbx+8]
.text:0000000000012706                 mov     rax, [rsp+158h+var_150]
.text:000000000001270B                 mov     rcx, rbx
.text:000000000001270E                 and     rdi, 0FFFFFFFFFFFFFFF8h
.text:0000000000012712                 sub     rcx, rdi
.text:0000000000012715                 mov     qword ptr [rax+10h], 0E8h
.text:000000000001271D                 xor     eax, eax
.text:000000000001271F                 add     ecx, 0E8h
.text:0000000000012725                 mov     qword ptr [rbx], 0
.text:000000000001272C                 mov     qword ptr [rbx+0E0h], 0
.text:0000000000012737                 shr     ecx, 3
.text:000000000001273A                 rep stosq
.text:000000000001273D                 mov     rax, 555555555555554h
.text:0000000000012747                 mov     dword ptr [rbx+80h], 0Fh
.text:0000000000012751                 cmp     [rsp+158h+size], rax
.text:0000000000012755                 ja      loc_12D96
.text:000000000001275B                 mov     r14, [rsp+158h+size]
.text:000000000001275F                 lea     rax, [r14+1]
.text:0000000000012763                 mov     rdi, rax
.text:0000000000012766                 mov     [rbx+8], rax
.text:000000000001276A                 mov     [rsp+158h+var_130], rax
.text:000000000001276F                 shl     rdi, 4          ; size
.text:0000000000012773                 call    _malloc
.text:0000000000012778                 test    r14, r14
.text:000000000001277B                 mov     [rbx], rax
.text:000000000001277E                 jz      loc_13465
.text:0000000000012784                 mov     esi, 1
.text:0000000000012789                 nop     dword ptr [rax+00000000h]
.text:0000000000012790
.text:0000000000012790 loc_12790:                              ; CODE XREF: re_compile_internal+107↓j
.text:0000000000012790                 add     rsi, rsi        ; size
.text:0000000000012793                 cmp     [rsp+158h+size], rsi
.text:0000000000012797                 jnb     short loc_12790
.text:0000000000012799                 lea     rbp, [rsi-1]
.text:000000000001279D
.text:000000000001279D loc_1279D:                              ; CODE XREF: re_compile_internal+DDC↓j
.text:000000000001279D                 mov     edi, 18h        ; nmemb
.text:00000000000127A2                 call    _calloc
.text:00000000000127A7                 mov     [rbx+88h], rbp
.text:00000000000127AE                 mov     [rbx+40h], rax
.text:00000000000127B2                 call    ___ctype_get_mb_cur_max
.text:00000000000127B7                 mov     edi, 0Eh        ; item
.text:00000000000127BC                 mov     [rbx+0B4h], eax
.text:00000000000127C2                 call    _nl_langinfo
.text:00000000000127C7                 movzx   edx, byte ptr [rax]
.text:00000000000127CA                 and     edx, 0FFFFFFDFh
.text:00000000000127CD                 cmp     dl, 55h ; 'U'
.text:00000000000127D0                 jnz     short loc_12820
.text:00000000000127D2                 movzx   edx, byte ptr [rax+1]
.text:00000000000127D6                 and     edx, 0FFFFFFDFh
.text:00000000000127D9                 cmp     dl, 54h ; 'T'
.text:00000000000127DC                 jnz     short loc_12820
.text:00000000000127DE                 movzx   edx, byte ptr [rax+2]
.text:00000000000127E2                 and     edx, 0FFFFFFDFh
.text:00000000000127E5                 cmp     dl, 46h ; 'F'
.text:00000000000127E8                 jnz     short loc_12820
.text:00000000000127EA                 xor     edx, edx
.text:00000000000127EC                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:00000000000127F0                 lea     rdi, a8         ; "8"
.text:00000000000127F7                 mov     ecx, 2
.text:00000000000127FC                 setz    dl
.text:00000000000127FF                 lea     rsi, [rax+rdx+3]
.text:0000000000012804                 repe cmpsb
.text:0000000000012806                 setnbe  al
.text:0000000000012809                 sbb     al, 0
.text:000000000001280B                 test    al, al
.text:000000000001280D                 jnz     short loc_12820
.text:000000000001280F                 or      byte ptr [rbx+0B0h], 4
.text:0000000000012816                 db      2Eh
.text:0000000000012816                 nop     word ptr [rax+rax+00000000h]
.text:0000000000012820
.text:0000000000012820 loc_12820:                              ; CODE XREF: re_compile_internal+140↑j
.text:0000000000012820                                         ; re_compile_internal+14C↑j ...
.text:0000000000012820                 movzx   eax, byte ptr [rbx+0B0h]
.text:0000000000012827                 mov     edx, eax
.text:0000000000012829                 and     edx, 0FFFFFFF7h
.text:000000000001282C                 cmp     dword ptr [rbx+0B4h], 1
.text:0000000000012833                 mov     [rbx+0B0h], dl
.text:0000000000012839                 jle     short loc_1284E
.text:000000000001283B                 test    al, 4
.text:000000000001283D                 jz      loc_12DA3
.text:0000000000012843                 lea     rax, utf8_sb_map
.text:000000000001284A                 mov     [rbx+78h], rax
.text:000000000001284E
.text:000000000001284E loc_1284E:                              ; CODE XREF: re_compile_internal+1A9↑j
.text:000000000001284E                                         ; re_compile_internal+793↓j
.text:000000000001284E                 cmp     qword ptr [rbx], 0
.text:0000000000012852                 jz      loc_12D96
.text:0000000000012858                 cmp     qword ptr [rbx+40h], 0
.text:000000000001285D                 jz      loc_12D96
.text:0000000000012863                 mov     rax, [rsp+158h+var_140]
.text:0000000000012868                 lea     rbp, [rsp+158h+var_D8]
.text:0000000000012870                 mov     ecx, 12h
.text:0000000000012875                 mov     [rsp+158h+var_10C], 0
.text:000000000001287D                 lea     r8, [rbp+8]
.text:0000000000012881                 and     eax, 400000h
.text:0000000000012886                 mov     [rsp+158h+var_138], rax
.text:000000000001288B                 mov     rax, [rsp+158h+var_150]
.text:0000000000012890                 setnz   dl
.text:0000000000012893                 mov     rdi, r8
.text:0000000000012896                 mov     rsi, [rax+28h]
.text:000000000001289A                 xor     eax, eax
.text:000000000001289C                 rep stosq
.text:000000000001289F                 mov     rax, [rsp+158h+var_148]
.text:00000000000128A4                 mov     rdi, [rsp+158h+size]
.text:00000000000128A8                 test    rsi, rsi
.text:00000000000128AB                 mov     [rsp+158h+var_50], dl
.text:00000000000128B2                 mov     ecx, [rbx+0B4h]
.text:00000000000128B8                 setnz   r12b
.text:00000000000128BC                 mov     [rsp+158h+var_60], rsi
.text:00000000000128C4                 mov     [rsp+158h+var_D8], rax
.text:00000000000128CC                 movzx   eax, byte ptr [rbx+0B0h]
.text:00000000000128D3                 or      r12d, edx
.text:00000000000128D6                 mov     [rsp+158h+var_80], rdi
.text:00000000000128DE                 mov     [rsp+158h+var_88], rdi
.text:00000000000128E6                 mov     esi, r12d
.text:00000000000128E9                 mov     [rsp+158h+var_4D], r12b
.text:00000000000128F1                 mov     [rsp+158h+var_48], ecx
.text:00000000000128F8                 mov     [rsp+158h+var_70], rdi
.text:0000000000012900                 mov     [rsp+158h+var_78], rdi
.text:0000000000012908                 mov     edx, eax
.text:000000000001290A                 shr     al, 3
.text:000000000001290D                 shr     dl, 2
.text:0000000000012910                 and     eax, 1
.text:0000000000012913                 and     edx, 1
.text:0000000000012916                 test    rdi, rdi
.text:0000000000012919                 mov     [rsp+158h+var_4E], al
.text:0000000000012920                 mov     [rsp+158h+var_4F], dl
.text:0000000000012927                 jnz     loc_12D65
.text:000000000001292D                 test    sil, sil
.text:0000000000012930                 jz      short loc_1293F
.text:0000000000012932
.text:0000000000012932 loc_12932:                              ; CODE XREF: re_compile_internal+701↓j
.text:0000000000012932                 mov     rax, [rsp+158h+var_D0]
.text:000000000001293A                 mov     [rsp+158h+var_148], rax
.text:000000000001293F
.text:000000000001293F loc_1293F:                              ; CODE XREF: re_compile_internal+2A0↑j
.text:000000000001293F                                         ; re_compile_internal+6FB↓j
.text:000000000001293F                 cmp     [rsp+158h+var_138], 0
.text:0000000000012945                 mov     rax, [rsp+158h+var_148]
.text:000000000001294A                 mov     [rsp+158h+var_D0], rax
.text:0000000000012952                 jz      loc_12A55
.text:0000000000012958                 cmp     ecx, 1
.text:000000000001295B                 jle     loc_1354D
.text:0000000000012961
.text:0000000000012961 loc_12961:                              ; CODE XREF: re_compile_internal+31C↓j
.text:0000000000012961                 mov     rdi, rbp
.text:0000000000012964                 call    build_wcs_upper_buffer
.text:0000000000012969                 test    eax, eax
.text:000000000001296B                 jnz     short loc_129B0
.text:000000000001296D                 mov     rax, [rsp+158h+size]
.text:0000000000012971                 cmp     rax, [rsp+158h+var_A0]
.text:0000000000012979                 jle     loc_13530
.text:000000000001297F                 movsxd  rax, dword ptr [rbx+0B4h]
.text:0000000000012986                 mov     rsi, [rsp+158h+var_98]
.text:000000000001298E                 add     rax, [rsp+158h+var_A8]
.text:0000000000012996                 cmp     rsi, rax
.text:0000000000012999                 jg      loc_13530
.text:000000000001299F                 add     rsi, rsi
.text:00000000000129A2                 mov     rdi, rbp
.text:00000000000129A5                 call    re_string_realloc_buffers
.text:00000000000129AA                 test    eax, eax
.text:00000000000129AC                 jz      short loc_12961
.text:00000000000129AE                 xchg    ax, ax
.text:00000000000129B0
.text:00000000000129B0 loc_129B0:                              ; CODE XREF: re_compile_internal+2DB↑j
.text:00000000000129B0                                         ; re_compile_internal+674↓j ...
.text:00000000000129B0                 mov     [rsp+158h+var_10C], eax
.text:00000000000129B4                 mov     rax, [rsp+158h+var_150]
.text:00000000000129B9                 mov     r13, [rax]
.text:00000000000129BC
.text:00000000000129BC loc_129BC:                              ; CODE XREF: re_compile_internal+D75↓j
.text:00000000000129BC                                         ; re_compile_internal+EE2↓j ...
.text:00000000000129BC                 mov     rdi, [r13+70h]  ; ptr
.text:00000000000129C0                 test    rdi, rdi
.text:00000000000129C3                 jz      short loc_129D8
.text:00000000000129C5                 nop     dword ptr [rax]
.text:00000000000129C8
.text:00000000000129C8 loc_129C8:                              ; CODE XREF: re_compile_internal+346↓j
.text:00000000000129C8                 mov     r12, [rdi]
.text:00000000000129CB                 call    _free
.text:00000000000129D0                 test    r12, r12
.text:00000000000129D3                 mov     rdi, r12
.text:00000000000129D6                 jnz     short loc_129C8
.text:00000000000129D8
.text:00000000000129D8 loc_129D8:                              ; CODE XREF: re_compile_internal+333↑j
.text:00000000000129D8                 mov     rdi, [r13+20h]  ; ptr
.text:00000000000129DC                 mov     qword ptr [r13+70h], 0
.text:00000000000129E4                 mov     dword ptr [r13+80h], 0Fh
.text:00000000000129EF                 mov     qword ptr [r13+68h], 0
.text:00000000000129F7                 call    _free
.text:00000000000129FC                 mov     qword ptr [r13+20h], 0
.text:0000000000012A04                 mov     rdi, rbp
.text:0000000000012A07                 call    re_string_destruct
.text:0000000000012A0C
.text:0000000000012A0C loc_12A0C:                              ; CODE XREF: re_compile_internal+70E↓j
.text:0000000000012A0C                                         ; re_compile_internal+D68↓j
.text:0000000000012A0C                 mov     rdi, rbx        ; ptr
.text:0000000000012A0F                 call    free_dfa_content
.text:0000000000012A14                 mov     rax, [rsp+158h+var_150]
.text:0000000000012A19                 mov     qword ptr [rax], 0
.text:0000000000012A20                 mov     qword ptr [rax+8], 0
.text:0000000000012A28                 mov     eax, [rsp+158h+var_10C]
.text:0000000000012A2C
.text:0000000000012A2C loc_12A2C:                              ; CODE XREF: re_compile_internal+D62↓j
.text:0000000000012A2C                                         ; re_compile_internal+1016↓j
.text:0000000000012A2C                 mov     rbx, [rsp+158h+var_40]
.text:0000000000012A34                 xor     rbx, fs:28h
.text:0000000000012A3D                 jnz     loc_13780
.text:0000000000012A43                 add     rsp, 128h
.text:0000000000012A4A                 pop     rbx
.text:0000000000012A4B                 pop     rbp
.text:0000000000012A4C                 pop     r12
.text:0000000000012A4E                 pop     r13
.text:0000000000012A50                 pop     r14
.text:0000000000012A52                 pop     r15
.text:0000000000012A54                 retn
.text:0000000000012A55 ; ---------------------------------------------------------------------------
.text:0000000000012A55
.text:0000000000012A55 loc_12A55:                              ; CODE XREF: re_compile_internal+2C2↑j
.text:0000000000012A55                 cmp     ecx, 1
.text:0000000000012A58                 jg      loc_1340A
.text:0000000000012A5E                 test    r12b, r12b
.text:0000000000012A61                 mov     rsi, [rsp+158h+var_98]
.text:0000000000012A69                 jz      loc_13084
.text:0000000000012A6F                 cmp     [rsp+158h+var_80], rsi
.text:0000000000012A77                 mov     rax, [rsp+158h+var_A8]
.text:0000000000012A7F                 cmovle  rsi, [rsp+158h+var_80]
.text:0000000000012A88                 cmp     rsi, rax
.text:0000000000012A8B                 jg      short loc_12A9D
.text:0000000000012A8D                 jmp     short loc_12AD0
.text:0000000000012A8D ; ---------------------------------------------------------------------------
.text:0000000000012A8F                 align 10h
.text:0000000000012A90
.text:0000000000012A90 loc_12A90:                              ; CODE XREF: re_compile_internal+43E↓j
.text:0000000000012A90                 mov     rdx, [rsp+158h+var_D0]
.text:0000000000012A98                 mov     [rsp+158h+var_148], rdx
.text:0000000000012A9D
.text:0000000000012A9D loc_12A9D:                              ; CODE XREF: re_compile_internal+3FB↑j
.text:0000000000012A9D                 mov     rdx, [rsp+158h+var_D8]
.text:0000000000012AA5                 mov     rcx, [rsp+158h+var_60]
.text:0000000000012AAD                 add     rdx, rax
.text:0000000000012AB0                 add     rdx, [rsp+158h+var_B0]
.text:0000000000012AB8                 movzx   edx, byte ptr [rdx]
.text:0000000000012ABB                 movzx   edx, byte ptr [rcx+rdx]
.text:0000000000012ABF                 mov     rcx, [rsp+158h+var_148]
.text:0000000000012AC4                 mov     [rcx+rax], dl
.text:0000000000012AC7                 add     rax, 1
.text:0000000000012ACB                 cmp     rsi, rax
.text:0000000000012ACE                 jnz     short loc_12A90
.text:0000000000012AD0
.text:0000000000012AD0 loc_12AD0:                              ; CODE XREF: re_compile_internal+3FD↑j
.text:0000000000012AD0                 mov     [rsp+158h+var_A8], rax
.text:0000000000012AD8                 mov     [rsp+158h+var_A0], rax
.text:0000000000012AE0                 mov     [rsp+158h+var_10C], 0
.text:0000000000012AE8
.text:0000000000012AE8 loc_12AE8:                              ; CODE XREF: re_compile_internal+A0C↓j
.text:0000000000012AE8                                         ; re_compile_internal+D8A↓j ...
.text:0000000000012AE8                 mov     r12, [rsp+158h+var_150]
.text:0000000000012AED                 mov     r14, [rsp+158h+var_140]
.text:0000000000012AF2                 lea     r13, [rsp+158h+var_108]
.text:0000000000012AF7                 mov     rsi, rbp
.text:0000000000012AFA                 mov     rdi, r13
.text:0000000000012AFD                 mov     [rsp+158h+var_130], r13
.text:0000000000012B02                 mov     r15, [r12]
.text:0000000000012B06                 mov     rdx, r14
.text:0000000000012B09                 mov     qword ptr [r12+30h], 0
.text:0000000000012B12                 or      rdx, 800000h
.text:0000000000012B19                 mov     [r15+0D8h], r14
.text:0000000000012B20                 call    peek_token
.text:0000000000012B25                 lea     r9, [rsp+158h+var_10C]
.text:0000000000012B2A                 xor     r8d, r8d
.text:0000000000012B2D                 mov     rcx, r14
.text:0000000000012B30                 mov     rdx, r13
.text:0000000000012B33                 mov     rsi, r12
.text:0000000000012B36                 mov     rdi, rbp
.text:0000000000012B39                 cdqe
.text:0000000000012B3B                 add     [rsp+158h+var_90], rax
.text:0000000000012B43                 call    parse_reg_exp
.text:0000000000012B48                 mov     ecx, [rsp+158h+var_10C]
.text:0000000000012B4C                 test    ecx, ecx
.text:0000000000012B4E                 jnz     loc_13577
.text:0000000000012B54                 lea     r13, [r15+70h]
.text:0000000000012B58                 lea     r12, [rsp+158h+var_F8]
.text:0000000000012B5D                 sub     r15, 0FFFFFFFFFFFFFF80h
.text:0000000000012B61                 xor     edx, edx
.text:0000000000012B63                 xor     ecx, ecx
.text:0000000000012B65                 mov     rsi, r15
.text:0000000000012B68                 mov     r8, r12
.text:0000000000012B6B                 mov     rdi, r13
.text:0000000000012B6E                 mov     [rsp+158h+size], rax
.text:0000000000012B72                 mov     byte ptr [rsp+158h+var_F0], 2
.text:0000000000012B77                 call    create_token_tree_isra_16
.text:0000000000012B7C                 mov     r9, [rsp+158h+size]
.text:0000000000012B80                 mov     r11, rax
.text:0000000000012B83                 mov     rdx, rax
.text:0000000000012B86                 test    r9, r9
.text:0000000000012B89                 jz      short loc_12BB2
.text:0000000000012B8B
.text:0000000000012B8B loc_12B8B:                              ; CODE XREF: re_compile_internal+F1F↓j
.text:0000000000012B8B                 mov     rcx, r11
.text:0000000000012B8E                 mov     rdx, r9
.text:0000000000012B91                 mov     r8, r12
.text:0000000000012B94                 mov     rsi, r15
.text:0000000000012B97                 mov     rdi, r13
.text:0000000000012B9A                 mov     [rsp+158h+size], r11
.text:0000000000012B9E                 mov     byte ptr [rsp+158h+var_F0], 10h
.text:0000000000012BA3                 call    create_token_tree_isra_16
.text:0000000000012BA8                 mov     r11, [rsp+158h+size]
.text:0000000000012BAC                 mov     rdx, r11
.text:0000000000012BAF                 mov     r11, rax
.text:0000000000012BB2
.text:0000000000012BB2 loc_12BB2:                              ; CODE XREF: re_compile_internal+4F9↑j
.text:0000000000012BB2                 test    rdx, rdx
.text:0000000000012BB5                 mov     rcx, [rsp+158h+var_150]
.text:0000000000012BBA                 setz    dl
.text:0000000000012BBD                 test    r11, r11
.text:0000000000012BC0                 setz    al
.text:0000000000012BC3                 or      dl, al
.text:0000000000012BC5                 mov     r13, [rcx]
.text:0000000000012BC8                 jnz     loc_13562
.text:0000000000012BCE                 mov     r15, [r13+8]
.text:0000000000012BD2                 mov     [rbx+68h], r11
.text:0000000000012BD6                 lea     rcx, ds:0[r15*8]
.text:0000000000012BDE                 lea     r15, [r15+r15*2]
.text:0000000000012BE2                 mov     rdi, rcx        ; size
.text:0000000000012BE5                 mov     [rsp+158h+size], rcx
.text:0000000000012BE9                 shl     r15, 3
.text:0000000000012BED                 call    _malloc
.text:0000000000012BF2                 mov     rcx, [rsp+158h+size]
.text:0000000000012BF6                 mov     [r13+18h], rax
.text:0000000000012BFA                 mov     [rsp+158h+var_140], rax
.text:0000000000012BFF                 mov     rdi, rcx        ; size
.text:0000000000012C02                 call    _malloc
.text:0000000000012C07                 mov     rdi, r15        ; size
.text:0000000000012C0A                 mov     [r13+20h], rax
.text:0000000000012C0E                 mov     [rsp+158h+var_148], rax
.text:0000000000012C13                 call    _malloc
.text:0000000000012C18                 mov     rdi, r15        ; size
.text:0000000000012C1B                 mov     [r13+28h], rax
.text:0000000000012C1F                 mov     [rsp+158h+size], rax
.text:0000000000012C23                 call    _malloc
.text:0000000000012C28                 mov     rdx, [rsp+158h+var_140]
.text:0000000000012C2D                 mov     [r13+30h], rax
.text:0000000000012C31                 mov     rsi, [rsp+158h+size]
.text:0000000000012C35                 mov     rcx, [rsp+158h+var_148]
.text:0000000000012C3A                 test    rdx, rdx
.text:0000000000012C3D                 jz      loc_133FD
.text:0000000000012C43                 test    rcx, rcx
.text:0000000000012C46                 jz      loc_133FD
.text:0000000000012C4C                 test    rsi, rsi
.text:0000000000012C4F                 jz      loc_133FD
.text:0000000000012C55                 test    rax, rax
.text:0000000000012C58                 jz      loc_133FD
.text:0000000000012C5E                 mov     rax, [rsp+158h+var_150]
.text:0000000000012C63                 mov     r15, [rax+30h]
.text:0000000000012C67                 lea     rdi, ds:0[r15*8] ; size
.text:0000000000012C6F                 call    _malloc
.text:0000000000012C74                 test    rax, rax
.text:0000000000012C77                 mov     [r13+0E0h], rax
.text:0000000000012C7E                 jz      short loc_12CED
.text:0000000000012C80                 test    r15, r15
.text:0000000000012C83                 jz      short loc_12C9D
.text:0000000000012C85                 xor     edx, edx
.text:0000000000012C87                 nop     word ptr [rax+rax+00000000h]
.text:0000000000012C90
.text:0000000000012C90 loc_12C90:                              ; CODE XREF: re_compile_internal+60B↓j
.text:0000000000012C90                 mov     [rax+rdx*8], rdx
.text:0000000000012C94                 add     rdx, 1
.text:0000000000012C98                 cmp     rdx, r15
.text:0000000000012C9B                 jnz     short loc_12C90
.text:0000000000012C9D
.text:0000000000012C9D loc_12C9D:                              ; CODE XREF: re_compile_internal+5F3↑j
.text:0000000000012C9D                 mov     rdi, [r13+68h]
.text:0000000000012CA1                 lea     rsi, optimize_subexps
.text:0000000000012CA8                 mov     rdx, r13
.text:0000000000012CAB                 call    preorder
.text:0000000000012CB0                 mov     rax, [rsp+158h+var_150]
.text:0000000000012CB5                 mov     rdi, [r13+0E0h] ; ptr
.text:0000000000012CBC                 mov     rdx, [rax+30h]
.text:0000000000012CC0                 test    rdx, rdx
.text:0000000000012CC3                 jz      loc_135B4
.text:0000000000012CC9                 mov     rax, [rdi]
.text:0000000000012CCC                 test    rax, rax
.text:0000000000012CCF                 jz      short loc_12CDE
.text:0000000000012CD1                 jmp     short loc_12CED
.text:0000000000012CD1 ; ---------------------------------------------------------------------------
.text:0000000000012CD3                 align 8
.text:0000000000012CD8
.text:0000000000012CD8 loc_12CD8:                              ; CODE XREF: re_compile_internal+655↓j
.text:0000000000012CD8                 cmp     [rdi+rax*8], rax
.text:0000000000012CDC                 jnz     short loc_12CED
.text:0000000000012CDE
.text:0000000000012CDE loc_12CDE:                              ; CODE XREF: re_compile_internal+63F↑j
.text:0000000000012CDE                 add     rax, 1
.text:0000000000012CE2                 cmp     rdx, rax
.text:0000000000012CE5                 ja      short loc_12CD8
.text:0000000000012CE7                 jz      loc_135B4
.text:0000000000012CED
.text:0000000000012CED loc_12CED:                              ; CODE XREF: re_compile_internal+5EE↑j
.text:0000000000012CED                                         ; re_compile_internal+641↑j ...
.text:0000000000012CED                 mov     rdi, [r13+68h]
.text:0000000000012CF1                 mov     rdx, [rsp+158h+var_150]
.text:0000000000012CF6                 lea     rsi, lower_subexps
.text:0000000000012CFD                 call    postorder
.text:0000000000012D02                 test    eax, eax
.text:0000000000012D04                 jnz     loc_129B0
.text:0000000000012D0A                 mov     rdi, [r13+68h]
.text:0000000000012D0E                 lea     rsi, calc_first
.text:0000000000012D15                 mov     rdx, r13
.text:0000000000012D18                 call    postorder
.text:0000000000012D1D                 test    eax, eax
.text:0000000000012D1F                 jnz     loc_129B0
.text:0000000000012D25                 mov     rdi, [r13+68h]
.text:0000000000012D29                 lea     rsi, calc_next
.text:0000000000012D30                 mov     rdx, r13
.text:0000000000012D33                 call    preorder
.text:0000000000012D38                 mov     rdx, [r13+68h]
.text:0000000000012D3C                 lea     rsi, jpt_12D63
.text:0000000000012D43                 nop     dword ptr [rax+rax+00h]
.text:0000000000012D48
.text:0000000000012D48 loc_12D48:                              ; CODE XREF: re_compile_internal+7BF↓j
.text:0000000000012D48                 movzx   ecx, byte ptr [rdx+30h]
.text:0000000000012D4C                 mov     rdi, [rdx+38h]
.text:0000000000012D50                 cmp     cl, 10h         ; switch 17 cases
.text:0000000000012D53                 ja      def_12D63       ; jumptable 0000000000012D63 default case, cases 0,1,3,5-7,13-15
.text:0000000000012D59                 movzx   eax, cl
.text:0000000000012D5C                 movsxd  rax, ds:(jpt_12D63 - 15D68h)[rsi+rax*4]
.text:0000000000012D60                 add     rax, rsi
.text:0000000000012D63                 jmp     rax             ; switch jump
.text:0000000000012D65 ; ---------------------------------------------------------------------------
.text:0000000000012D65
.text:0000000000012D65 loc_12D65:                              ; CODE XREF: re_compile_internal+297↑j
.text:0000000000012D65                 mov     rsi, [rsp+158h+var_130]
.text:0000000000012D6A                 mov     rdi, rbp
.text:0000000000012D6D                 call    re_string_realloc_buffers
.text:0000000000012D72                 test    eax, eax
.text:0000000000012D74                 jnz     loc_129B0
.text:0000000000012D7A                 movzx   esi, [rsp+158h+var_4D]
.text:0000000000012D82                 mov     ecx, [rbx+0B4h]
.text:0000000000012D88                 test    sil, sil
.text:0000000000012D8B                 jz      loc_1293F
.text:0000000000012D91                 jmp     loc_12932
.text:0000000000012D96 ; ---------------------------------------------------------------------------
.text:0000000000012D96
.text:0000000000012D96 loc_12D96:                              ; CODE XREF: re_compile_internal+C5↑j
.text:0000000000012D96                                         ; re_compile_internal+1C2↑j ...
.text:0000000000012D96                 mov     [rsp+158h+var_10C], 0Ch
.text:0000000000012D9E                 jmp     loc_12A0C
.text:0000000000012DA3 ; ---------------------------------------------------------------------------
.text:0000000000012DA3
.text:0000000000012DA3 loc_12DA3:                              ; CODE XREF: re_compile_internal+1AD↑j
.text:0000000000012DA3                 mov     esi, 1          ; size
.text:0000000000012DA8                 mov     edi, 20h ; ' '  ; nmemb
.text:0000000000012DAD                 call    _calloc
.text:0000000000012DB2                 test    rax, rax
.text:0000000000012DB5                 mov     [rbx+78h], rax
.text:0000000000012DB9                 jz      short loc_12D96
.text:0000000000012DBB                 xor     r12d, r12d
.text:0000000000012DBE                 xor     ebp, ebp
.text:0000000000012DC0                 mov     r13d, 1
.text:0000000000012DC6
.text:0000000000012DC6 loc_12DC6:                              ; CODE XREF: re_compile_internal+791↓j
.text:0000000000012DC6                 xor     r15d, r15d
.text:0000000000012DC9                 nop     dword ptr [rax+00000000h]
.text:0000000000012DD0
.text:0000000000012DD0 loc_12DD0:                              ; CODE XREF: re_compile_internal+782↓j
.text:0000000000012DD0                 lea     r14d, [rbp+r15+0]
.text:0000000000012DD5                 mov     edi, r14d       ; c
.text:0000000000012DD8                 call    _btowc
.text:0000000000012DDD                 cmp     eax, 0FFFFFFFFh
.text:0000000000012DE0                 jz      short loc_12DF5
.text:0000000000012DE2                 mov     rsi, [rbx+78h]
.text:0000000000012DE6                 mov     rdi, r13
.text:0000000000012DE9                 mov     ecx, r15d
.text:0000000000012DEC                 shl     rdi, cl
.text:0000000000012DEF                 add     rsi, r12
.text:0000000000012DF2                 or      [rsi], rdi
.text:0000000000012DF5
.text:0000000000012DF5 loc_12DF5:                              ; CODE XREF: re_compile_internal+750↑j
.text:0000000000012DF5                 test    r14d, 0FFFFFF80h
.text:0000000000012DFC                 jnz     short loc_12E0A
.text:0000000000012DFE                 cmp     eax, r14d
.text:0000000000012E01                 jz      short loc_12E0A
.text:0000000000012E03                 or      byte ptr [rbx+0B0h], 8
.text:0000000000012E0A
.text:0000000000012E0A loc_12E0A:                              ; CODE XREF: re_compile_internal+76C↑j
.text:0000000000012E0A                                         ; re_compile_internal+771↑j
.text:0000000000012E0A                 add     r15, 1
.text:0000000000012E0E                 cmp     r15, 40h ; '@'
.text:0000000000012E12                 jnz     short loc_12DD0
.text:0000000000012E14                 add     ebp, 40h ; '@'
.text:0000000000012E17                 add     r12, 8
.text:0000000000012E1B                 cmp     ebp, 100h
.text:0000000000012E21                 jnz     short loc_12DC6
.text:0000000000012E23                 jmp     loc_1284E
.text:0000000000012E28 ; ---------------------------------------------------------------------------
.text:0000000000012E28
.text:0000000000012E28 def_12D63:                              ; CODE XREF: re_compile_internal+6C3↑j
.text:0000000000012E28                                         ; re_compile_internal+6D3↑j
.text:0000000000012E28                                         ; DATA XREF: ...
.text:0000000000012E28                 and     ecx, 8          ; jumptable 0000000000012D63 default case, cases 0,1,3,5-7,13-15
.text:0000000000012E2B                 jnz     loc_13742
.text:0000000000012E31                 mov     rax, [rdx+20h]
.text:0000000000012E35                 mov     rcx, [rax+38h]
.text:0000000000012E39                 mov     rax, [r13+18h]
.text:0000000000012E3D                 mov     [rax+rdi*8], rcx
.text:0000000000012E41
.text:0000000000012E41 loc_12E41:                              ; CODE XREF: re_compile_internal+6D3↑j
.text:0000000000012E41                                         ; re_compile_internal+955↓j ...
.text:0000000000012E41                 mov     r15, [rdx+8]    ; jumptable 0000000000012D63 case 16
.text:0000000000012E45
.text:0000000000012E45 loc_12E45:                              ; CODE XREF: re_compile_internal+8F3↓j
.text:0000000000012E45                                         ; re_compile_internal+94B↓j ...
.text:0000000000012E45                 xor     edi, edi
.text:0000000000012E47                 test    r15, r15
.text:0000000000012E4A                 jz      short loc_12E5B
.text:0000000000012E4C
.text:0000000000012E4C loc_12E4C:                              ; CODE XREF: re_compile_internal+7E1↓j
.text:0000000000012E4C                 mov     rdx, r15
.text:0000000000012E4F                 jmp     loc_12D48
.text:0000000000012E4F ; ---------------------------------------------------------------------------
.text:0000000000012E54                 align 8
.text:0000000000012E58
.text:0000000000012E58 loc_12E58:                              ; CODE XREF: re_compile_internal+7EC↓j
.text:0000000000012E58                 mov     rdx, rax
.text:0000000000012E5B
.text:0000000000012E5B loc_12E5B:                              ; CODE XREF: re_compile_internal+7BA↑j
.text:0000000000012E5B                 mov     r15, [rdx+10h]
.text:0000000000012E5F                 test    r15, r15
.text:0000000000012E62                 setz    cl
.text:0000000000012E65                 cmp     r15, rdi
.text:0000000000012E68                 setz    al
.text:0000000000012E6B                 or      cl, al
.text:0000000000012E6D                 mov     byte ptr [rsp+158h+var_148], cl
.text:0000000000012E71                 jz      short loc_12E4C
.text:0000000000012E73                 mov     rax, [rdx]
.text:0000000000012E76                 mov     rdi, rdx
.text:0000000000012E79                 test    rax, rax
.text:0000000000012E7C                 jnz     short loc_12E58
.text:0000000000012E7E                 xor     r14d, r14d
.text:0000000000012E81                 xor     r15d, r15d
.text:0000000000012E84                 nop     dword ptr [rax+00h]
.text:0000000000012E88
.text:0000000000012E88 loc_12E88:                              ; CODE XREF: re_compile_internal+A49↓j
.text:0000000000012E88                 mov     rdx, [r13+10h]
.text:0000000000012E8C                 cmp     rdx, r15
.text:0000000000012E8F                 jz      short loc_12EB6
.text:0000000000012E91
.text:0000000000012E91 loc_12E91:                              ; CODE XREF: re_compile_internal+824↓j
.text:0000000000012E91                                         ; re_compile_internal+835↓j ...
.text:0000000000012E91                 lea     r10, [r15+r15*2]
.text:0000000000012E95                 mov     rax, [r13+30h]
.text:0000000000012E99                 shl     r10, 3
.text:0000000000012E9D                 cmp     qword ptr [rax+r10+8], 0
.text:0000000000012EA3                 jz      loc_130A8
.text:0000000000012EA9                 mov     rdx, [r13+10h]
.text:0000000000012EAD                 add     r15, 1
.text:0000000000012EB1                 cmp     rdx, r15
.text:0000000000012EB4                 jnz     short loc_12E91
.text:0000000000012EB6
.text:0000000000012EB6 loc_12EB6:                              ; CODE XREF: re_compile_internal+7FF↑j
.text:0000000000012EB6                 test    r14b, r14b
.text:0000000000012EB9                 jz      loc_130FE
.text:0000000000012EBF
.text:0000000000012EBF loc_12EBF:                              ; CODE XREF: re_compile_internal+A5D↓j
.text:0000000000012EBF                 xor     r14d, r14d
.text:0000000000012EC2                 xor     r15d, r15d
.text:0000000000012EC5                 jmp     short loc_12E91
.text:0000000000012EC7 ; ---------------------------------------------------------------------------
.text:0000000000012EC7
.text:0000000000012EC7 loc_12EC7:                              ; CODE XREF: re_compile_internal+6D3↑j
.text:0000000000012EC7                                         ; DATA XREF: .rodata:jpt_12D63↓o
.text:0000000000012EC7                 or      byte ptr [r13+0B0h], 1 ; jumptable 0000000000012D63 cases 10,11
.text:0000000000012ECF                 mov     r15, [rdx+8]
.text:0000000000012ED3                 test    r15, r15
.text:0000000000012ED6                 jz      loc_134E9
.text:0000000000012EDC                 mov     rax, [r15+18h]
.text:0000000000012EE0                 mov     rcx, [rax+38h]
.text:0000000000012EE4
.text:0000000000012EE4 loc_12EE4:                              ; CODE XREF: re_compile_internal+E61↓j
.text:0000000000012EE4                 mov     rax, [rdx+10h]
.text:0000000000012EE8                 test    rax, rax
.text:0000000000012EEB                 jz      loc_134DC
.text:0000000000012EF1                 mov     rax, [rax+18h]
.text:0000000000012EF5                 mov     r9, [rax+38h]
.text:0000000000012EF9
.text:0000000000012EF9 loc_12EF9:                              ; CODE XREF: re_compile_internal+E54↓j
.text:0000000000012EF9                 test    rcx, rcx
.text:0000000000012EFC                 js      loc_13761
.text:0000000000012F02                 test    r9, r9
.text:0000000000012F05                 js      loc_13723
.text:0000000000012F0B                 mov     rax, [r13+28h]
.text:0000000000012F0F                 lea     rdi, [rdi+rdi*2]
.text:0000000000012F13                 mov     [rsp+158h+var_120], rsi
.text:0000000000012F18                 mov     [rsp+158h+var_128], r9
.text:0000000000012F1D                 mov     [rsp+158h+var_140], rcx
.text:0000000000012F22                 mov     [rsp+158h+var_148], rdx
.text:0000000000012F27                 lea     r10, [rax+rdi*8]
.text:0000000000012F2B                 mov     edi, 10h        ; size
.text:0000000000012F30                 mov     qword ptr [r10], 2
.text:0000000000012F37                 mov     [rsp+158h+size], r10
.text:0000000000012F3B                 call    _malloc
.text:0000000000012F40                 mov     r10, [rsp+158h+size]
.text:0000000000012F44                 test    rax, rax
.text:0000000000012F47                 mov     rdx, [rsp+158h+var_148]
.text:0000000000012F4C                 mov     rcx, [rsp+158h+var_140]
.text:0000000000012F51                 mov     r9, [rsp+158h+var_128]
.text:0000000000012F56                 mov     rsi, [rsp+158h+var_120]
.text:0000000000012F5B                 mov     [r10+10h], rax
.text:0000000000012F5F                 jz      loc_131FA
.text:0000000000012F65                 cmp     rcx, r9
.text:0000000000012F68                 jz      loc_1353D
.text:0000000000012F6E                 mov     qword ptr [r10+8], 2
.text:0000000000012F76                 jl      loc_13524
.text:0000000000012F7C                 mov     [rax], r9
.text:0000000000012F7F                 mov     [rax+8], rcx
.text:0000000000012F83                 jmp     loc_12E45
.text:0000000000012F88 ; ---------------------------------------------------------------------------
.text:0000000000012F88
.text:0000000000012F88 loc_12F88:                              ; CODE XREF: re_compile_internal+6D3↑j
.text:0000000000012F88                                         ; DATA XREF: .rodata:jpt_12D63↓o
.text:0000000000012F88                 mov     rax, [rdx+20h]  ; jumptable 0000000000012D63 cases 8,9,12
.text:0000000000012F8C                 lea     rcx, [rdi+rdi*2]
.text:0000000000012F90                 mov     edi, 8          ; size
.text:0000000000012F95                 mov     [rsp+158h+var_148], rsi
.text:0000000000012F9A                 mov     [rsp+158h+size], rdx
.text:0000000000012F9E                 mov     r14, [rax+38h]
.text:0000000000012FA2                 mov     rax, [r13+28h]
.text:0000000000012FA6                 lea     r15, [rax+rcx*8]
.text:0000000000012FAA                 mov     qword ptr [r15], 1
.text:0000000000012FB1                 mov     qword ptr [r15+8], 1
.text:0000000000012FB9                 call    _malloc
.text:0000000000012FBE                 test    rax, rax
.text:0000000000012FC1                 mov     [r15+10h], rax
.text:0000000000012FC5                 mov     rdx, [rsp+158h+size]
.text:0000000000012FC9                 mov     rsi, [rsp+158h+var_148]
.text:0000000000012FCE                 jz      loc_13678
.text:0000000000012FD4                 mov     [rax], r14
.text:0000000000012FD7                 mov     r15, [rdx+8]
.text:0000000000012FDB                 jmp     loc_12E45
.text:0000000000012FE0 ; ---------------------------------------------------------------------------
.text:0000000000012FE0
.text:0000000000012FE0 loc_12FE0:                              ; CODE XREF: re_compile_internal+6D3↑j
.text:0000000000012FE0                                         ; DATA XREF: .rodata:jpt_12D63↓o
.text:0000000000012FE0                 cmp     qword ptr [rdx+20h], 0 ; jumptable 0000000000012D63 case 2
.text:0000000000012FE5                 jz      loc_12E41       ; jumptable 0000000000012D63 case 16
.text:0000000000012FEB                 lea     rcx, __PRETTY_FUNCTION___6981 ; "link_nfa_nodes"
.text:0000000000012FF2                 lea     rsi, aCoreutils831Li_1 ; "../coreutils-8.31/lib/regcomp.c"
.text:0000000000012FF9                 lea     rdi, aNodeNextNull ; "node->next == NULL"
.text:0000000000013000                 mov     edx, 59Fh       ; line
.text:0000000000013005                 call    ___assert_fail
.text:0000000000013005 ; ---------------------------------------------------------------------------
.text:000000000001300A                 align 10h
.text:0000000000013010
.text:0000000000013010 loc_13010:                              ; CODE XREF: re_compile_internal+6D3↑j
.text:0000000000013010                                         ; DATA XREF: .rodata:jpt_12D63↓o
.text:0000000000013010                 mov     rax, [rdx+20h]  ; jumptable 0000000000012D63 case 4
.text:0000000000013014                 mov     r15, [rax+38h]
.text:0000000000013018                 mov     rax, [r13+18h]
.text:000000000001301C                 mov     [rax+rdi*8], r15
.text:0000000000013020                 cmp     byte ptr [rdx+30h], 4
.text:0000000000013024                 jnz     loc_12E41       ; jumptable 0000000000012D63 case 16
.text:000000000001302A                 mov     rax, [r13+28h]
.text:000000000001302E                 lea     rcx, [rdi+rdi*2]
.text:0000000000013032                 mov     edi, 8          ; size
.text:0000000000013037                 mov     [rsp+158h+var_140], rsi
.text:000000000001303C                 mov     [rsp+158h+var_148], rdx
.text:0000000000013041                 lea     rcx, [rax+rcx*8]
.text:0000000000013045                 mov     qword ptr [rcx], 1
.text:000000000001304C                 mov     qword ptr [rcx+8], 1
.text:0000000000013054                 mov     [rsp+158h+size], rcx
.text:0000000000013058                 call    _malloc
.text:000000000001305D                 mov     rcx, [rsp+158h+size]
.text:0000000000013061                 test    rax, rax
.text:0000000000013064                 mov     rdx, [rsp+158h+var_148]
.text:0000000000013069                 mov     rsi, [rsp+158h+var_140]
.text:000000000001306E                 mov     [rcx+10h], rax
.text:0000000000013072                 jz      loc_136C0
.text:0000000000013078                 mov     [rax], r15
.text:000000000001307B                 mov     r15, [rdx+8]
.text:000000000001307F                 jmp     loc_12E45
.text:0000000000013084 ; ---------------------------------------------------------------------------
.text:0000000000013084
.text:0000000000013084 loc_13084:                              ; CODE XREF: re_compile_internal+3D9↑j
.text:0000000000013084                 mov     [rsp+158h+var_A8], rsi
.text:000000000001308C                 mov     [rsp+158h+var_A0], rsi
.text:0000000000013094                 mov     [rsp+158h+var_10C], 0
.text:000000000001309C                 jmp     loc_12AE8
.text:000000000001309C ; ---------------------------------------------------------------------------
.text:00000000000130A1                 align 8
.text:00000000000130A8
.text:00000000000130A8 loc_130A8:                              ; CODE XREF: re_compile_internal+813↑j
.text:00000000000130A8                 mov     ecx, 1
.text:00000000000130AD                 mov     rdx, r15
.text:00000000000130B0                 mov     rsi, r13
.text:00000000000130B3                 mov     rdi, r12
.text:00000000000130B6                 mov     [rsp+158h+size], r10
.text:00000000000130BA                 call    calc_eclosure_iter
.text:00000000000130BF                 test    eax, eax
.text:00000000000130C1                 jnz     loc_129B0
.text:00000000000130C7                 mov     rax, [r13+30h]
.text:00000000000130CB                 mov     r10, [rsp+158h+size]
.text:00000000000130CF                 add     r15, 1
.text:00000000000130D3                 cmp     qword ptr [rax+r10+8], 0
.text:00000000000130D9                 jnz     loc_12E88
.text:00000000000130DF                 mov     rdi, [rsp+158h+ptr] ; ptr
.text:00000000000130E4                 call    _free
.text:00000000000130E9                 cmp     [r13+10h], r15
.text:00000000000130ED                 jz      loc_12EBF
.text:00000000000130F3                 movzx   r14d, byte ptr [rsp+158h+var_148]
.text:00000000000130F9                 jmp     loc_12E91
.text:00000000000130FE ; ---------------------------------------------------------------------------
.text:00000000000130FE
.text:00000000000130FE loc_130FE:                              ; CODE XREF: re_compile_internal+829↑j
.text:00000000000130FE                 mov     rax, [rsp+158h+var_150]
.text:0000000000013103                 test    byte ptr [rax+38h], 10h
.text:0000000000013107                 jnz     short loc_1311A
.text:0000000000013109                 cmp     qword ptr [rax+30h], 0
.text:000000000001310E                 jz      short loc_1311A
.text:0000000000013110                 test    byte ptr [r13+0B0h], 1
.text:0000000000013118                 jnz     short loc_13128
.text:000000000001311A
.text:000000000001311A loc_1311A:                              ; CODE XREF: re_compile_internal+A77↑j
.text:000000000001311A                                         ; re_compile_internal+A7E↑j
.text:000000000001311A                 cmp     qword ptr [r13+98h], 0
.text:0000000000013122                 jz      loc_1321B
.text:0000000000013128
.text:0000000000013128 loc_13128:                              ; CODE XREF: re_compile_internal+A88↑j
.text:0000000000013128                 lea     rdi, [rdx+rdx*2]
.text:000000000001312C                 mov     [rsp+158h+size], rdx
.text:0000000000013130                 shl     rdi, 3          ; size
.text:0000000000013134                 call    _malloc
.text:0000000000013139                 test    rax, rax
.text:000000000001313C                 mov     [r13+38h], rax
.text:0000000000013140                 jz      loc_1368C
.text:0000000000013146                 mov     rdx, [rsp+158h+size]
.text:000000000001314A                 xor     esi, esi
.text:000000000001314C                 xor     ecx, ecx
.text:000000000001314E                 test    rdx, rdx
.text:0000000000013151                 jnz     short loc_13164
.text:0000000000013153                 jmp     loc_1321B
.text:0000000000013153 ; ---------------------------------------------------------------------------
.text:0000000000013158                 align 20h
.text:0000000000013160
.text:0000000000013160 loc_13160:                              ; CODE XREF: re_compile_internal+AF5↓j
.text:0000000000013160                 mov     rax, [r13+38h]
.text:0000000000013164
.text:0000000000013164 loc_13164:                              ; CODE XREF: re_compile_internal+AC1↑j
.text:0000000000013164                 pxor    xmm0, xmm0
.text:0000000000013168                 add     rax, rsi
.text:000000000001316B                 add     rcx, 1
.text:000000000001316F                 mov     qword ptr [rax+10h], 0
.text:0000000000013177                 add     rsi, 18h
.text:000000000001317B                 movups  xmmword ptr [rax], xmm0
.text:000000000001317E                 mov     rax, [r13+10h]
.text:0000000000013182                 cmp     rcx, rax
.text:0000000000013185                 jb      short loc_13160
.text:0000000000013187                 test    rax, rax
.text:000000000001318A                 jz      loc_1321B
.text:0000000000013190                 mov     rax, [r13+30h]
.text:0000000000013194                 mov     [rsp+158h+var_140], 0
.text:000000000001319D                 mov     [rsp+158h+var_148], 0
.text:00000000000131A6
.text:00000000000131A6 loc_131A6:                              ; CODE XREF: re_compile_internal+B89↓j
.text:00000000000131A6                 mov     rcx, [rsp+158h+var_140]
.text:00000000000131AB                 lea     rdx, [rax+rcx]
.text:00000000000131AF                 cmp     qword ptr [rdx+8], 0
.text:00000000000131B4                 mov     rcx, [rdx+10h]
.text:00000000000131B8                 jle     short loc_13204
.text:00000000000131BA                 xor     r15d, r15d
.text:00000000000131BD                 jmp     short loc_131D8
.text:00000000000131BD ; ---------------------------------------------------------------------------
.text:00000000000131BF                 align 20h
.text:00000000000131C0
.text:00000000000131C0 loc_131C0:                              ; CODE XREF: re_compile_internal+B68↓j
.text:00000000000131C0                 mov     rax, [r13+30h]
.text:00000000000131C4                 mov     rdx, [rsp+158h+var_140]
.text:00000000000131C9                 add     r15, 1
.text:00000000000131CD                 mov     rcx, [rsp+158h+size]
.text:00000000000131D1                 cmp     r15, [rax+rdx+8]
.text:00000000000131D6                 jge     short loc_13204
.text:00000000000131D8
.text:00000000000131D8 loc_131D8:                              ; CODE XREF: re_compile_internal+B2D↑j
.text:00000000000131D8                 mov     rax, [rcx+r15*8]
.text:00000000000131DC                 mov     [rsp+158h+size], rcx
.text:00000000000131E0                 lea     rsi, [rax+rax*2]
.text:00000000000131E4                 mov     rax, [r13+38h]
.text:00000000000131E8                 lea     rdi, [rax+rsi*8]
.text:00000000000131EC                 mov     rsi, [rsp+158h+var_148]
.text:00000000000131F1                 call    re_node_set_insert_last
.text:00000000000131F6                 test    al, al
.text:00000000000131F8                 jnz     short loc_131C0
.text:00000000000131FA
.text:00000000000131FA loc_131FA:                              ; CODE XREF: re_compile_internal+8CF↑j
.text:00000000000131FA                                         ; re_compile_internal+FF7↓j
.text:00000000000131FA                 mov     eax, 0Ch
.text:00000000000131FF                 jmp     loc_129B0
.text:0000000000013204 ; ---------------------------------------------------------------------------
.text:0000000000013204
.text:0000000000013204 loc_13204:                              ; CODE XREF: re_compile_internal+B28↑j
.text:0000000000013204                                         ; re_compile_internal+B46↑j
.text:0000000000013204                 add     [rsp+158h+var_148], 1
.text:000000000001320A                 add     [rsp+158h+var_140], 18h
.text:0000000000013210                 mov     rdx, [rsp+158h+var_148]
.text:0000000000013215                 cmp     rdx, [r13+10h]
.text:0000000000013219                 jb      short loc_131A6
.text:000000000001321B
.text:000000000001321B loc_1321B:                              ; CODE XREF: re_compile_internal+A92↑j
.text:000000000001321B                                         ; re_compile_internal+AC3↑j ...
.text:000000000001321B                 movzx   eax, byte ptr [rbx+0B0h]
.text:0000000000013222                 mov     [rsp+158h+var_10C], 0
.text:000000000001322A                 shr     al, 2
.text:000000000001322D                 cmp     [rsp+158h+var_138], 0
.text:0000000000013233                 setz    dl
.text:0000000000013236                 and     al, dl
.text:0000000000013238                 jnz     loc_1341F
.text:000000000001323E
.text:000000000001323E loc_1323E:                              ; CODE XREF: re_compile_internal+D99↓j
.text:000000000001323E                                         ; re_compile_internal+DD3↓j ...
.text:000000000001323E                 mov     rax, [rbx+68h]  ; jumptable 0000000000013463 case 6
.text:0000000000013242                 mov     rdi, r12
.text:0000000000013245                 mov     rax, [rax+18h]
.text:0000000000013249                 mov     rax, [rax+38h]
.text:000000000001324D                 lea     rdx, [rax+rax*2]
.text:0000000000013251                 mov     [rbx+90h], rax
.text:0000000000013258                 mov     rax, [rbx+30h]
.text:000000000001325C                 lea     rsi, [rax+rdx*8]
.text:0000000000013260                 call    re_node_set_init_copy
.text:0000000000013265                 test    eax, eax
.text:0000000000013267                 mov     r15d, eax
.text:000000000001326A                 mov     [rsp+158h+var_108], eax
.text:000000000001326E                 jnz     loc_1338F
.text:0000000000013274                 cmp     qword ptr [rbx+98h], 0
.text:000000000001327C                 jle     loc_13350
.text:0000000000013282                 mov     r9, [rsp+158h+var_F0]
.text:0000000000013287                 test    r9, r9
.text:000000000001328A                 jle     loc_13350
.text:0000000000013290                 xor     r10d, r10d
.text:0000000000013293                 lea     r13, [r12+10h]
.text:0000000000013298                 jmp     short loc_132AD
.text:0000000000013298 ; ---------------------------------------------------------------------------
.text:000000000001329A                 align 20h
.text:00000000000132A0
.text:00000000000132A0 loc_132A0:                              ; CODE XREF: re_compile_internal+C37↓j
.text:00000000000132A0                                         ; re_compile_internal+C47↓j ...
.text:00000000000132A0                 add     r10, 1
.text:00000000000132A4                 cmp     r9, r10
.text:00000000000132A7                 jle     loc_13350
.text:00000000000132AD
.text:00000000000132AD loc_132AD:                              ; CODE XREF: re_compile_internal+C08↑j
.text:00000000000132AD                                         ; re_compile_internal+CB2↓j
.text:00000000000132AD                 mov     rcx, [rsp+158h+ptr]
.text:00000000000132B2                 mov     rsi, [rbx]
.text:00000000000132B5                 mov     r8, [rcx+r10*8]
.text:00000000000132B9                 mov     rdi, r8
.text:00000000000132BC                 shl     rdi, 4
.text:00000000000132C0                 add     rdi, rsi
.text:00000000000132C3                 cmp     byte ptr [rdi+8], 4
.text:00000000000132C7                 jnz     short loc_132A0
.text:00000000000132C9                 xor     edx, edx
.text:00000000000132CB                 jmp     short loc_132D9
.text:00000000000132CB ; ---------------------------------------------------------------------------
.text:00000000000132CD                 align 10h
.text:00000000000132D0
.text:00000000000132D0 loc_132D0:                              ; CODE XREF: re_compile_internal+C58↓j
.text:00000000000132D0                                         ; re_compile_internal+C60↓j
.text:00000000000132D0                 add     rdx, 1
.text:00000000000132D4                 cmp     r9, rdx
.text:00000000000132D7                 jz      short loc_132A0
.text:00000000000132D9
.text:00000000000132D9 loc_132D9:                              ; CODE XREF: re_compile_internal+C3B↑j
.text:00000000000132D9                 mov     rax, [rcx+rdx*8]
.text:00000000000132DD                 shl     rax, 4
.text:00000000000132E1                 add     rax, rsi
.text:00000000000132E4                 cmp     byte ptr [rax+8], 9
.text:00000000000132E8                 jnz     short loc_132D0
.text:00000000000132EA                 mov     r11, [rdi]
.text:00000000000132ED                 cmp     [rax], r11
.text:00000000000132F0                 jnz     short loc_132D0
.text:00000000000132F2                 mov     rdx, [rbx+28h]
.text:00000000000132F6                 lea     rax, [r8+r8*2]
.text:00000000000132FA                 mov     rsi, r13
.text:00000000000132FD                 mov     rdi, r9
.text:0000000000013300                 lea     rax, [rdx+rax*8]
.text:0000000000013304                 mov     rax, [rax+10h]
.text:0000000000013308                 mov     r11, [rax]
.text:000000000001330B                 mov     rdx, r11
.text:000000000001330E                 call    re_node_set_contains_isra_3
.text:0000000000013313                 test    rax, rax
.text:0000000000013316                 jnz     short loc_132A0
.text:0000000000013318                 mov     rax, [rbx+30h]
.text:000000000001331C                 lea     rdx, [r11+r11*2]
.text:0000000000013320                 mov     rdi, r12
.text:0000000000013323                 lea     rsi, [rax+rdx*8]
.text:0000000000013327                 call    re_node_set_merge
.text:000000000001332C                 test    eax, eax
.text:000000000001332E                 jnz     loc_13670
.text:0000000000013334                 mov     r9, [rsp+158h+var_F0]
.text:0000000000013339                 mov     r10d, 1
.text:000000000001333F                 cmp     r9, r10
.text:0000000000013342                 jg      loc_132AD
.text:0000000000013348                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000013350
.text:0000000000013350 loc_13350:                              ; CODE XREF: re_compile_internal+BEC↑j
.text:0000000000013350                                         ; re_compile_internal+BFA↑j ...
.text:0000000000013350                 mov     rdi, [rsp+158h+var_130]
.text:0000000000013355                 xor     ecx, ecx
.text:0000000000013357                 mov     rdx, r12
.text:000000000001335A                 mov     rsi, rbx
.text:000000000001335D                 call    re_acquire_state_context
.text:0000000000013362                 test    rax, rax
.text:0000000000013365                 mov     [rbx+48h], rax
.text:0000000000013369                 jz      loc_134D2
.text:000000000001336F                 cmp     byte ptr [rax+68h], 0
.text:0000000000013373                 js      loc_13471
.text:0000000000013379                 mov     [rbx+60h], rax
.text:000000000001337D                 mov     [rbx+58h], rax
.text:0000000000013381                 mov     [rbx+50h], rax
.text:0000000000013385
.text:0000000000013385 loc_13385:                              ; CODE XREF: re_compile_internal+E3C↓j
.text:0000000000013385                 mov     rdi, [rsp+158h+ptr] ; ptr
.text:000000000001338A                 call    _free
.text:000000000001338F
.text:000000000001338F loc_1338F:                              ; CODE XREF: re_compile_internal+BDE↑j
.text:000000000001338F                                         ; re_compile_internal+E47↓j ...
.text:000000000001338F                 mov     rax, [rsp+158h+var_150]
.text:0000000000013394                 mov     [rsp+158h+var_10C], r15d
.text:0000000000013399                 mov     r13, [rax]
.text:000000000001339C                 mov     rdi, [r13+70h]  ; ptr
.text:00000000000133A0                 test    rdi, rdi
.text:00000000000133A3                 jz      short loc_133B8
.text:00000000000133A5                 nop     dword ptr [rax]
.text:00000000000133A8
.text:00000000000133A8 loc_133A8:                              ; CODE XREF: re_compile_internal+D26↓j
.text:00000000000133A8                 mov     r12, [rdi]
.text:00000000000133AB                 call    _free
.text:00000000000133B0                 test    r12, r12
.text:00000000000133B3                 mov     rdi, r12
.text:00000000000133B6                 jnz     short loc_133A8
.text:00000000000133B8
.text:00000000000133B8 loc_133B8:                              ; CODE XREF: re_compile_internal+D13↑j
.text:00000000000133B8                 mov     rdi, [r13+20h]  ; ptr
.text:00000000000133BC                 mov     qword ptr [r13+70h], 0
.text:00000000000133C4                 mov     dword ptr [r13+80h], 0Fh
.text:00000000000133CF                 mov     qword ptr [r13+68h], 0
.text:00000000000133D7                 call    _free
.text:00000000000133DC                 mov     qword ptr [r13+20h], 0
.text:00000000000133E4                 mov     rdi, rbp
.text:00000000000133E7                 call    re_string_destruct
.text:00000000000133EC                 mov     eax, [rsp+158h+var_10C]
.text:00000000000133F0                 test    eax, eax
.text:00000000000133F2                 jz      loc_12A2C
.text:00000000000133F8                 jmp     loc_12A0C
.text:00000000000133FD ; ---------------------------------------------------------------------------
.text:00000000000133FD
.text:00000000000133FD loc_133FD:                              ; CODE XREF: re_compile_internal+5AD↑j
.text:00000000000133FD                                         ; re_compile_internal+5B6↑j ...
.text:00000000000133FD                 mov     [rsp+158h+var_10C], 0Ch
.text:0000000000013405                 jmp     loc_129BC
.text:000000000001340A ; ---------------------------------------------------------------------------
.text:000000000001340A
.text:000000000001340A loc_1340A:                              ; CODE XREF: re_compile_internal+3C8↑j
.text:000000000001340A                 mov     rdi, rbp
.text:000000000001340D                 call    build_wcs_buffer
.text:0000000000013412                 mov     [rsp+158h+var_10C], 0
.text:000000000001341A                 jmp     loc_12AE8
.text:000000000001341F ; ---------------------------------------------------------------------------
.text:000000000001341F
.text:000000000001341F loc_1341F:                              ; CODE XREF: re_compile_internal+BA8↑j
.text:000000000001341F                 mov     rcx, [rsp+158h+var_150]
.text:0000000000013424                 cmp     qword ptr [rcx+28h], 0
.text:0000000000013429                 jnz     loc_1323E       ; jumptable 0000000000013463 case 6
.text:000000000001342F                 mov     r10, [rbx+10h]
.text:0000000000013433                 test    r10, r10
.text:0000000000013436                 jz      loc_136EA
.text:000000000001343C                 mov     rsi, [rbx]
.text:000000000001343F                 lea     r9, jpt_13463
.text:0000000000013446                 xor     r8d, r8d
.text:0000000000013449                 xor     edx, edx
.text:000000000001344B                 mov     rcx, rsi
.text:000000000001344E
.text:000000000001344E loc_1344E:                              ; CODE XREF: re_compile_internal+F47↓j
.text:000000000001344E                 cmp     byte ptr [rcx+8], 0Ch ; switch 13 cases
.text:0000000000013452                 ja      def_13463       ; jumptable 0000000000013463 default case, cases 0,7
.text:0000000000013458                 movzx   edi, byte ptr [rcx+8]
.text:000000000001345C                 movsxd  rdi, ds:(jpt_13463 - 15DACh)[r9+rdi*4]
.text:0000000000013460                 add     rdi, r9
.text:0000000000013463                 jmp     rdi             ; switch jump
.text:0000000000013465 ; ---------------------------------------------------------------------------
.text:0000000000013465
.text:0000000000013465 loc_13465:                              ; CODE XREF: re_compile_internal+EE↑j
.text:0000000000013465                 xor     ebp, ebp
.text:0000000000013467                 mov     esi, 1
.text:000000000001346C                 jmp     loc_1279D
.text:0000000000013471 ; ---------------------------------------------------------------------------
.text:0000000000013471
.text:0000000000013471 loc_13471:                              ; CODE XREF: re_compile_internal+CE3↑j
.text:0000000000013471                 mov     r14, [rsp+158h+var_130]
.text:0000000000013476                 mov     ecx, 1
.text:000000000001347B                 mov     rdx, r12
.text:000000000001347E                 mov     rsi, rbx
.text:0000000000013481                 mov     rdi, r14
.text:0000000000013484                 call    re_acquire_state_context
.text:0000000000013489                 mov     ecx, 2
.text:000000000001348E                 mov     rdx, r12
.text:0000000000013491                 mov     rsi, rbx
.text:0000000000013494                 mov     rdi, r14
.text:0000000000013497                 mov     [rbx+50h], rax
.text:000000000001349B                 call    re_acquire_state_context
.text:00000000000134A0                 mov     ecx, 6
.text:00000000000134A5                 mov     [rbx+58h], rax
.text:00000000000134A9                 mov     rdx, r12
.text:00000000000134AC                 mov     rsi, rbx
.text:00000000000134AF                 mov     rdi, r14
.text:00000000000134B2                 call    re_acquire_state_context
.text:00000000000134B7                 cmp     qword ptr [rbx+50h], 0
.text:00000000000134BC                 mov     [rbx+60h], rax
.text:00000000000134C0                 jz      short loc_134D2
.text:00000000000134C2                 cmp     qword ptr [rbx+58h], 0
.text:00000000000134C7                 jz      short loc_134D2
.text:00000000000134C9                 test    rax, rax
.text:00000000000134CC                 jnz     loc_13385
.text:00000000000134D2
.text:00000000000134D2 loc_134D2:                              ; CODE XREF: re_compile_internal+CD9↑j
.text:00000000000134D2                                         ; re_compile_internal+E30↑j ...
.text:00000000000134D2                 mov     r15d, [rsp+158h+var_108]
.text:00000000000134D7                 jmp     loc_1338F
.text:00000000000134DC ; ---------------------------------------------------------------------------
.text:00000000000134DC
.text:00000000000134DC loc_134DC:                              ; CODE XREF: re_compile_internal+85B↑j
.text:00000000000134DC                 mov     rax, [rdx+20h]
.text:00000000000134E0                 mov     r9, [rax+38h]
.text:00000000000134E4                 jmp     loc_12EF9
.text:00000000000134E9 ; ---------------------------------------------------------------------------
.text:00000000000134E9
.text:00000000000134E9 loc_134E9:                              ; CODE XREF: re_compile_internal+846↑j
.text:00000000000134E9                 mov     rax, [rdx+20h]
.text:00000000000134ED                 mov     rcx, [rax+38h]
.text:00000000000134F1                 jmp     loc_12EE4
.text:00000000000134F6 ; ---------------------------------------------------------------------------
.text:00000000000134F6
.text:00000000000134F6 loc_134F6:                              ; CODE XREF: re_compile_internal+6C↑j
.text:00000000000134F6                 mov     rdi, rbx        ; ptr
.text:00000000000134F9                 mov     esi, 0E8h       ; size
.text:00000000000134FE                 call    _realloc
.text:0000000000013503                 test    rax, rax
.text:0000000000013506                 mov     rbx, rax
.text:0000000000013509                 jz      loc_136A1
.text:000000000001350F                 mov     rax, [rsp+158h+var_150]
.text:0000000000013514                 mov     qword ptr [rax+8], 0E8h
.text:000000000001351C                 mov     [rax], rbx
.text:000000000001351F                 jmp     loc_12702
.text:0000000000013524 ; ---------------------------------------------------------------------------
.text:0000000000013524
.text:0000000000013524 loc_13524:                              ; CODE XREF: re_compile_internal+8E6↑j
.text:0000000000013524                 mov     [rax], rcx
.text:0000000000013527                 mov     [rax+8], r9
.text:000000000001352B                 jmp     loc_12E45
.text:0000000000013530 ; ---------------------------------------------------------------------------
.text:0000000000013530
.text:0000000000013530 loc_13530:                              ; CODE XREF: re_compile_internal+2E9↑j
.text:0000000000013530                                         ; re_compile_internal+309↑j
.text:0000000000013530                 mov     [rsp+158h+var_10C], 0
.text:0000000000013538                 jmp     loc_12AE8
.text:000000000001353D ; ---------------------------------------------------------------------------
.text:000000000001353D
.text:000000000001353D loc_1353D:                              ; CODE XREF: re_compile_internal+8D8↑j
.text:000000000001353D                 mov     qword ptr [r10+8], 1
.text:0000000000013545                 mov     [rax], rcx
.text:0000000000013548                 jmp     loc_12E45
.text:000000000001354D ; ---------------------------------------------------------------------------
.text:000000000001354D
.text:000000000001354D loc_1354D:                              ; CODE XREF: re_compile_internal+2CB↑j
.text:000000000001354D                 mov     rdi, rbp
.text:0000000000013550                 call    build_upper_buffer
.text:0000000000013555                 mov     [rsp+158h+var_10C], 0
.text:000000000001355D                 jmp     loc_12AE8
.text:0000000000013562 ; ---------------------------------------------------------------------------
.text:0000000000013562
.text:0000000000013562 loc_13562:                              ; CODE XREF: re_compile_internal+538↑j
.text:0000000000013562                 mov     [rsp+158h+var_10C], 0Ch
.text:000000000001356A                 mov     qword ptr [rbx+68h], 0
.text:0000000000013572                 jmp     loc_129BC
.text:0000000000013577 ; ---------------------------------------------------------------------------
.text:0000000000013577
.text:0000000000013577 loc_13577:                              ; CODE XREF: re_compile_internal+4BE↑j
.text:0000000000013577                 test    rax, rax
.text:000000000001357A                 jz      loc_136AB
.text:0000000000013580                 lea     r13, [r15+70h]
.text:0000000000013584                 lea     r12, [rsp+158h+var_F8]
.text:0000000000013589                 sub     r15, 0FFFFFFFFFFFFFF80h
.text:000000000001358D                 xor     ecx, ecx
.text:000000000001358F                 xor     edx, edx
.text:0000000000013591                 mov     rsi, r15
.text:0000000000013594                 mov     r8, r12
.text:0000000000013597                 mov     rdi, r13
.text:000000000001359A                 mov     [rsp+158h+size], rax
.text:000000000001359E                 mov     byte ptr [rsp+158h+var_F0], 2
.text:00000000000135A3                 call    create_token_tree_isra_16
.text:00000000000135A8                 mov     r9, [rsp+158h+size]
.text:00000000000135AC                 mov     r11, rax
.text:00000000000135AF                 jmp     loc_12B8B
.text:00000000000135B4 ; ---------------------------------------------------------------------------
.text:00000000000135B4
.text:00000000000135B4 loc_135B4:                              ; CODE XREF: re_compile_internal+633↑j
.text:00000000000135B4                                         ; re_compile_internal+657↑j
.text:00000000000135B4                 call    _free
.text:00000000000135B9                 mov     qword ptr [r13+0E0h], 0
.text:00000000000135C4                 jmp     loc_12CED
.text:00000000000135C9 ; ---------------------------------------------------------------------------
.text:00000000000135C9
.text:00000000000135C9 loc_135C9:                              ; CODE XREF: re_compile_internal+DD3↑j
.text:00000000000135C9                                         ; DATA XREF: .rodata:jpt_13463↓o
.text:00000000000135C9                 mov     r8d, eax        ; jumptable 0000000000013463 case 5
.text:00000000000135CC
.text:00000000000135CC loc_135CC:                              ; CODE XREF: re_compile_internal+DD3↑j
.text:00000000000135CC                                         ; re_compile_internal+F97↓j ...
.text:00000000000135CC                 add     rdx, 1          ; jumptable 0000000000013463 cases 2,4,8-11
.text:00000000000135D0                 add     rcx, 10h
.text:00000000000135D4                 cmp     rdx, r10
.text:00000000000135D7                 jnz     loc_1344E
.text:00000000000135DD                 or      r14b, r8b
.text:00000000000135E0                 jz      loc_136EA
.text:00000000000135E6                 mov     rax, rdx
.text:00000000000135E9                 shl     rax, 4
.text:00000000000135ED                 add     rax, rsi
.text:00000000000135F0                 jmp     short loc_13608
.text:00000000000135F2 ; ---------------------------------------------------------------------------
.text:00000000000135F2
.text:00000000000135F2 loc_135F2:                              ; CODE XREF: re_compile_internal+F7F↓j
.text:00000000000135F2                 cmp     dl, 5
.text:00000000000135F5                 jnz     short loc_135FB
.text:00000000000135F7                 mov     byte ptr [rsi+8], 7
.text:00000000000135FB
.text:00000000000135FB loc_135FB:                              ; CODE XREF: re_compile_internal+F65↑j
.text:00000000000135FB                                         ; re_compile_internal+F84↓j ...
.text:00000000000135FB                 add     rsi, 10h
.text:00000000000135FF                 cmp     rax, rsi
.text:0000000000013602                 jz      loc_136E7
.text:0000000000013608
.text:0000000000013608 loc_13608:                              ; CODE XREF: re_compile_internal+F60↑j
.text:0000000000013608                 movzx   edx, byte ptr [rsi+8]
.text:000000000001360C                 cmp     dl, 1
.text:000000000001360F                 jnz     short loc_135F2
.text:0000000000013611                 cmp     byte ptr [rsi], 0
.text:0000000000013614                 jns     short loc_135FB
.text:0000000000013616                 and     byte ptr [rsi+0Ah], 0DFh
.text:000000000001361A                 jmp     short loc_135FB
.text:000000000001361A ; ---------------------------------------------------------------------------
.text:000000000001361C                 align 20h
.text:0000000000013620
.text:0000000000013620 loc_13620:                              ; CODE XREF: re_compile_internal+DD3↑j
.text:0000000000013620                                         ; DATA XREF: .rodata:jpt_13463↓o
.text:0000000000013620                 cmp     byte ptr [rcx], 0 ; jumptable 0000000000013463 case 1
.text:0000000000013623                 cmovs   r14d, eax
.text:0000000000013627                 jmp     short loc_135CC ; jumptable 0000000000013463 cases 2,4,8-11
.text:0000000000013629 ; ---------------------------------------------------------------------------
.text:0000000000013629
.text:0000000000013629 loc_13629:                              ; CODE XREF: re_compile_internal+DD3↑j
.text:0000000000013629                                         ; DATA XREF: .rodata:jpt_13463↓o
.text:0000000000013629                 mov     edi, [rcx]      ; jumptable 0000000000013463 case 12
.text:000000000001362B                 cmp     edi, 20h ; ' '
.text:000000000001362E                 jz      short loc_135CC ; jumptable 0000000000013463 cases 2,4,8-11
.text:0000000000013630                 jbe     loc_136D9
.text:0000000000013636                 cmp     edi, 40h ; '@'
.text:0000000000013639                 jz      short loc_135CC ; jumptable 0000000000013463 cases 2,4,8-11
.text:000000000001363B                 add     edi, 0FFFFFF80h
.text:000000000001363E                 jz      short loc_135CC ; jumptable 0000000000013463 cases 2,4,8-11
.text:0000000000013640                 jmp     loc_1323E       ; jumptable 0000000000013463 case 6
.text:0000000000013640 ; ---------------------------------------------------------------------------
.text:0000000000013645                 align 8
.text:0000000000013648
.text:0000000000013648 loc_13648:                              ; CODE XREF: re_compile_internal+DD3↑j
.text:0000000000013648                                         ; DATA XREF: .rodata:jpt_13463↓o
.text:0000000000013648                 mov     rdi, [rcx]      ; jumptable 0000000000013463 case 3
.text:000000000001364B                 cmp     qword ptr [rdi+10h], 0
.text:0000000000013650                 jnz     loc_1323E       ; jumptable 0000000000013463 case 6
.text:0000000000013656                 cmp     qword ptr [rdi+18h], 0
.text:000000000001365B                 jz      loc_135CC       ; jumptable 0000000000013463 cases 2,4,8-11
.text:0000000000013661                 jmp     loc_1323E       ; jumptable 0000000000013463 case 6
.text:0000000000013661 ; ---------------------------------------------------------------------------
.text:0000000000013666                 align 10h
.text:0000000000013670
.text:0000000000013670 loc_13670:                              ; CODE XREF: re_compile_internal+C9E↑j
.text:0000000000013670                 mov     r15d, eax
.text:0000000000013673                 jmp     loc_1338F
.text:0000000000013678 ; ---------------------------------------------------------------------------
.text:0000000000013678
.text:0000000000013678 loc_13678:                              ; CODE XREF: re_compile_internal+93E↑j
.text:0000000000013678                 mov     qword ptr [r15+8], 0
.text:0000000000013680                 mov     qword ptr [r15], 0
.text:0000000000013687                 jmp     loc_131FA
.text:000000000001368C ; ---------------------------------------------------------------------------
.text:000000000001368C
.text:000000000001368C loc_1368C:                              ; CODE XREF: re_compile_internal+AB0↑j
.text:000000000001368C                 mov     rax, [rsp+158h+var_150]
.text:0000000000013691                 mov     [rsp+158h+var_10C], 0Ch
.text:0000000000013699                 mov     r13, [rax]
.text:000000000001369C                 jmp     loc_129BC
.text:00000000000136A1 ; ---------------------------------------------------------------------------
.text:00000000000136A1
.text:00000000000136A1 loc_136A1:                              ; CODE XREF: re_compile_internal+E79↑j
.text:00000000000136A1                 mov     eax, 0Ch
.text:00000000000136A6                 jmp     loc_12A2C
.text:00000000000136AB ; ---------------------------------------------------------------------------
.text:00000000000136AB
.text:00000000000136AB loc_136AB:                              ; CODE XREF: re_compile_internal+EEA↑j
.text:00000000000136AB                 mov     rax, [rsp+158h+var_150]
.text:00000000000136B0                 mov     qword ptr [rbx+68h], 0
.text:00000000000136B8                 mov     r13, [rax]
.text:00000000000136BB                 jmp     loc_129BC
.text:00000000000136C0 ; ---------------------------------------------------------------------------
.text:00000000000136C0
.text:00000000000136C0 loc_136C0:                              ; CODE XREF: re_compile_internal+9E2↑j
.text:00000000000136C0                 mov     qword ptr [rcx+8], 0
.text:00000000000136C8                 mov     qword ptr [rcx], 0
.text:00000000000136CF                 mov     eax, 0Ch
.text:00000000000136D4                 jmp     loc_129B0
.text:00000000000136D9 ; ---------------------------------------------------------------------------
.text:00000000000136D9
.text:00000000000136D9 loc_136D9:                              ; CODE XREF: re_compile_internal+FA0↑j
.text:00000000000136D9                 cmp     edi, 10h
.text:00000000000136DC                 jz      loc_135CC       ; jumptable 0000000000013463 cases 2,4,8-11
.text:00000000000136E2                 jmp     loc_1323E       ; jumptable 0000000000013463 case 6
.text:00000000000136E7 ; ---------------------------------------------------------------------------
.text:00000000000136E7
.text:00000000000136E7 loc_136E7:                              ; CODE XREF: re_compile_internal+F72↑j
.text:00000000000136E7                 mov     r14d, r8d
.text:00000000000136EA
.text:00000000000136EA loc_136EA:                              ; CODE XREF: re_compile_internal+DA6↑j
.text:00000000000136EA                                         ; re_compile_internal+F50↑j
.text:00000000000136EA                 cmp     qword ptr [rbx+98h], 0
.text:00000000000136F2                 movzx   edx, byte ptr [rbx+0B0h]
.text:00000000000136F9                 mov     dword ptr [rbx+0B4h], 1
.text:0000000000013703                 setnle  al
.text:0000000000013706                 and     edx, 0FFFFFFF9h
.text:0000000000013709                 or      eax, r14d
.text:000000000001370C                 and     eax, 1
.text:000000000001370F                 add     eax, eax
.text:0000000000013711                 or      eax, edx
.text:0000000000013713                 mov     [rbx+0B0h], al
.text:0000000000013719                 jmp     loc_1323E       ; jumptable 0000000000013463 case 6
.text:000000000001371E ; ---------------------------------------------------------------------------
.text:000000000001371E
.text:000000000001371E def_13463:                              ; CODE XREF: re_compile_internal+DC2↑j
.text:000000000001371E                                         ; re_compile_internal+DD3↑j
.text:000000000001371E                                         ; DATA XREF: ...
.text:000000000001371E                 call    _abort          ; jumptable 0000000000013463 default case, cases 0,7
.text:0000000000013723 ; ---------------------------------------------------------------------------
.text:0000000000013723
.text:0000000000013723 loc_13723:                              ; CODE XREF: re_compile_internal+875↑j
.text:0000000000013723                 lea     rcx, __PRETTY_FUNCTION___6981 ; "link_nfa_nodes"
.text:000000000001372A                 lea     rsi, aCoreutils831Li_1 ; "../coreutils-8.31/lib/regcomp.c"
.text:0000000000013731                 lea     rdi, aRight1    ; "right > -1"
.text:0000000000013738                 mov     edx, 5B0h       ; line
.text:000000000001373D                 call    ___assert_fail
.text:0000000000013742 ; ---------------------------------------------------------------------------
.text:0000000000013742
.text:0000000000013742 loc_13742:                              ; CODE XREF: re_compile_internal+79B↑j
.text:0000000000013742                 lea     rcx, __PRETTY_FUNCTION___6981 ; "link_nfa_nodes"
.text:0000000000013749                 lea     rsi, aCoreutils831Li_1 ; "../coreutils-8.31/lib/regcomp.c"
.text:0000000000013750                 lea     rdi, aIsEpsilonNodeN ; "!IS_EPSILON_NODE (node->token.type)"
.text:0000000000013757                 mov     edx, 5C2h       ; line
.text:000000000001375C                 call    ___assert_fail
.text:0000000000013761 ; ---------------------------------------------------------------------------
.text:0000000000013761
.text:0000000000013761 loc_13761:                              ; CODE XREF: re_compile_internal+86C↑j
.text:0000000000013761                 lea     rcx, __PRETTY_FUNCTION___6981 ; "link_nfa_nodes"
.text:0000000000013768                 lea     rsi, aCoreutils831Li_1 ; "../coreutils-8.31/lib/regcomp.c"
.text:000000000001376F                 lea     rdi, aLeft1     ; "left > -1"
.text:0000000000013776                 mov     edx, 5AFh       ; line
.text:000000000001377B                 call    ___assert_fail
.text:0000000000013780 ; ---------------------------------------------------------------------------
.text:0000000000013780
.text:0000000000013780 loc_13780:                              ; CODE XREF: re_compile_internal+3AD↑j
.text:0000000000013780                 call    ___stack_chk_fail
.text:0000000000013780 ; } // starts at 12690
.text:0000000000013780 re_compile_internal endp
.text:0000000000013780
.text:0000000000013780 ; ---------------------------------------------------------------------------
.text:0000000000013785                 align 10h
.text:0000000000013790
.text:0000000000013790 ; =============== S U B R O U T I N E =======================================
.text:0000000000013790
.text:0000000000013790
.text:0000000000013790                 public rpl_re_compile_pattern
.text:0000000000013790 rpl_re_compile_pattern proc near        ; CODE XREF: build_type_arg+6D↑p
.text:0000000000013790 ; __unwind {
.text:0000000000013790                 sub     rsp, 8
.text:0000000000013794                 mov     rcx, cs:rpl_re_syntax_options
.text:000000000001379B                 mov     r8, rdi
.text:000000000001379E                 mov     rdi, rdx
.text:00000000000137A1                 mov     rax, rcx
.text:00000000000137A4                 shr     rax, 19h
.text:00000000000137A8                 and     eax, 1
.text:00000000000137AB                 shl     eax, 4
.text:00000000000137AE                 mov     edx, eax
.text:00000000000137B0                 movzx   eax, byte ptr [rdi+38h]
.text:00000000000137B4                 and     eax, 0FFFFFFEFh
.text:00000000000137B7                 or      eax, edx
.text:00000000000137B9                 mov     rdx, rsi
.text:00000000000137BC                 mov     rsi, r8
.text:00000000000137BF                 or      eax, 0FFFFFF80h
.text:00000000000137C2                 mov     [rdi+38h], al
.text:00000000000137C5                 call    re_compile_internal
.text:00000000000137CA                 test    eax, eax
.text:00000000000137CC                 jz      short loc_137F8
.text:00000000000137CE                 lea     rdx, __re_error_msgid_idx
.text:00000000000137D5                 cdqe
.text:00000000000137D7                 lea     rsi, __re_error_msgid ; "Success"
.text:00000000000137DE                 xor     edi, edi        ; domainname
.text:00000000000137E0                 add     rsi, [rdx+rax*8] ; msgid
.text:00000000000137E4                 mov     edx, 5          ; category
.text:00000000000137E9                 add     rsp, 8
.text:00000000000137ED                 jmp     _dcgettext
.text:00000000000137ED ; ---------------------------------------------------------------------------
.text:00000000000137F2                 align 8
.text:00000000000137F8
.text:00000000000137F8 loc_137F8:                              ; CODE XREF: rpl_re_compile_pattern+3C↑j
.text:00000000000137F8                 xor     eax, eax
.text:00000000000137FA                 add     rsp, 8
.text:00000000000137FE                 retn
.text:00000000000137FE ; } // starts at 13790
.text:00000000000137FE rpl_re_compile_pattern endp
.text:00000000000137FE
.text:00000000000137FE ; ---------------------------------------------------------------------------
.text:00000000000137FF                 align 20h
.text:0000000000013800
.text:0000000000013800 ; =============== S U B R O U T I N E =======================================
.text:0000000000013800
.text:0000000000013800
.text:0000000000013800                 public rpl_re_set_syntax
.text:0000000000013800 rpl_re_set_syntax proc near
.text:0000000000013800 ; __unwind {
.text:0000000000013800                 mov     rax, cs:rpl_re_syntax_options
.text:0000000000013807                 mov     cs:rpl_re_syntax_options, rdi
.text:000000000001380E                 retn
.text:000000000001380E ; } // starts at 13800
.text:000000000001380E rpl_re_set_syntax endp
.text:000000000001380E
.text:000000000001380E ; ---------------------------------------------------------------------------
.text:000000000001380F                 align 10h
.text:0000000000013810
.text:0000000000013810 ; =============== S U B R O U T I N E =======================================
.text:0000000000013810
.text:0000000000013810
.text:0000000000013810                 public rpl_re_compile_fastmap
.text:0000000000013810 rpl_re_compile_fastmap proc near        ; CODE XREF: re_search_stub+297↓p
.text:0000000000013810                                         ; rpl_regcomp+B7↓p
.text:0000000000013810 ; __unwind {
.text:0000000000013810                 push    r12
.text:0000000000013812                 push    rbp
.text:0000000000013813                 xor     eax, eax
.text:0000000000013815                 push    rbx
.text:0000000000013816                 mov     rbp, [rdi+20h]
.text:000000000001381A                 mov     rbx, rdi
.text:000000000001381D                 mov     r12, [rdi]
.text:0000000000013820                 lea     rdi, [rbp+8]
.text:0000000000013824                 mov     rcx, rbp
.text:0000000000013827                 mov     qword ptr [rbp+0], 0
.text:000000000001382F                 mov     qword ptr [rbp+0F8h], 0
.text:000000000001383A                 and     rdi, 0FFFFFFFFFFFFFFF8h
.text:000000000001383E                 sub     rcx, rdi
.text:0000000000013841                 add     ecx, 100h
.text:0000000000013847                 shr     ecx, 3
.text:000000000001384A                 rep stosq
.text:000000000001384D                 mov     rcx, rbp
.text:0000000000013850                 mov     rdi, rbx
.text:0000000000013853                 mov     rsi, [r12+48h]
.text:0000000000013858                 lea     rdx, [rsi+18h]
.text:000000000001385C                 add     rsi, 10h
.text:0000000000013860                 call    re_compile_fastmap_iter_isra_30
.text:0000000000013865                 mov     rax, [r12+50h]
.text:000000000001386A                 cmp     [r12+48h], rax
.text:000000000001386F                 jz      short loc_13889
.text:0000000000013871                 lea     rdx, [rax+18h]
.text:0000000000013875                 lea     rsi, [rax+10h]
.text:0000000000013879                 mov     rcx, rbp
.text:000000000001387C                 mov     rdi, rbx
.text:000000000001387F                 call    re_compile_fastmap_iter_isra_30
.text:0000000000013884                 mov     rax, [r12+48h]
.text:0000000000013889
.text:0000000000013889 loc_13889:                              ; CODE XREF: rpl_re_compile_fastmap+5F↑j
.text:0000000000013889                 mov     rsi, [r12+58h]
.text:000000000001388E                 cmp     rsi, rax
.text:0000000000013891                 jz      short loc_138AB
.text:0000000000013893                 lea     rdx, [rsi+18h]
.text:0000000000013897                 mov     rcx, rbp
.text:000000000001389A                 add     rsi, 10h
.text:000000000001389E                 mov     rdi, rbx
.text:00000000000138A1                 call    re_compile_fastmap_iter_isra_30
.text:00000000000138A6                 mov     rax, [r12+48h]
.text:00000000000138AB
.text:00000000000138AB loc_138AB:                              ; CODE XREF: rpl_re_compile_fastmap+81↑j
.text:00000000000138AB                 mov     rsi, [r12+60h]
.text:00000000000138B0                 cmp     rsi, rax
.text:00000000000138B3                 jz      short loc_138C8
.text:00000000000138B5                 lea     rdx, [rsi+18h]
.text:00000000000138B9                 mov     rcx, rbp
.text:00000000000138BC                 add     rsi, 10h
.text:00000000000138C0                 mov     rdi, rbx
.text:00000000000138C3                 call    re_compile_fastmap_iter_isra_30
.text:00000000000138C8
.text:00000000000138C8 loc_138C8:                              ; CODE XREF: rpl_re_compile_fastmap+A3↑j
.text:00000000000138C8                 or      byte ptr [rbx+38h], 8
.text:00000000000138CC                 xor     eax, eax
.text:00000000000138CE                 pop     rbx
.text:00000000000138CF                 pop     rbp
.text:00000000000138D0                 pop     r12
.text:00000000000138D2                 retn
.text:00000000000138D2 ; } // starts at 13810
.text:00000000000138D2 rpl_re_compile_fastmap endp
.text:00000000000138D2
.text:00000000000138D2 ; ---------------------------------------------------------------------------
.text:00000000000138D3                 align 20h
.text:00000000000138E0
.text:00000000000138E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000138E0
.text:00000000000138E0
.text:00000000000138E0 re_search_stub  proc near               ; CODE XREF: re_search_2_stub+88↓p
.text:00000000000138E0                                         ; rpl_re_match+E↓p ...
.text:00000000000138E0
.text:00000000000138E0 size            = qword ptr -60h
.text:00000000000138E0 ptr             = qword ptr -58h
.text:00000000000138E0 var_50          = qword ptr -50h
.text:00000000000138E0 var_48          = qword ptr -48h
.text:00000000000138E0 var_40          = dword ptr -40h
.text:00000000000138E0 var_3C          = dword ptr -3Ch
.text:00000000000138E0 arg_0           = qword ptr  8
.text:00000000000138E0 arg_8           = dword ptr  10h
.text:00000000000138E0
.text:00000000000138E0 ; __unwind {
.text:00000000000138E0                 push    r15
.text:00000000000138E2                 push    r14
.text:00000000000138E4                 mov     rax, r8
.text:00000000000138E7                 push    r13
.text:00000000000138E9                 push    r12
.text:00000000000138EB                 add     r8, rcx
.text:00000000000138EE                 push    rbp
.text:00000000000138EF                 push    rbx
.text:00000000000138F0                 sub     rsp, 38h
.text:00000000000138F4                 test    rcx, rcx
.text:00000000000138F7                 mov     ebx, [rsp+68h+arg_8]
.text:00000000000138FB                 mov     r12, [rsp+68h+arg_0]
.text:0000000000013900                 mov     [rsp+68h+var_40], ebx
.text:0000000000013904                 js      loc_13C40
.text:000000000001390A                 cmp     rcx, rdx
.text:000000000001390D                 jg      loc_13C40
.text:0000000000013913                 cmp     r8, rdx
.text:0000000000013916                 mov     rbx, rcx
.text:0000000000013919                 mov     r15, rdi
.text:000000000001391C                 jg      loc_13BA0
.text:0000000000013922                 test    rax, rax
.text:0000000000013925                 js      short loc_13930
.text:0000000000013927                 cmp     rcx, r8
.text:000000000001392A                 jg      loc_13BA0
.text:0000000000013930
.text:0000000000013930 loc_13930:                              ; CODE XREF: re_search_stub+45↑j
.text:0000000000013930                 test    r8, r8
.text:0000000000013933                 js      loc_13C18
.text:0000000000013939                 test    rax, rax
.text:000000000001393C                 jns     short loc_13947
.text:000000000001393E                 cmp     rbx, r8
.text:0000000000013941                 jle     loc_13C18
.text:0000000000013947
.text:0000000000013947 loc_13947:                              ; CODE XREF: re_search_stub+5C↑j
.text:0000000000013947                                         ; re_search_stub+2C3↓j
.text:0000000000013947                 movzx   eax, byte ptr [r15+38h]
.text:000000000001394C                 mov     r13d, eax
.text:000000000001394F                 shr     r13b, 5
.text:0000000000013953                 mov     edi, r13d
.text:0000000000013956                 and     edi, 3
.text:0000000000013959                 cmp     r8, rbx
.text:000000000001395C                 mov     [rsp+68h+var_3C], edi
.text:0000000000013960                 jle     short loc_13971
.text:0000000000013962                 cmp     qword ptr [r15+20h], 0
.text:0000000000013967                 jz      short loc_13971
.text:0000000000013969                 test    al, 8
.text:000000000001396B                 jz      loc_13B60
.text:0000000000013971
.text:0000000000013971 loc_13971:                              ; CODE XREF: re_search_stub+80↑j
.text:0000000000013971                                         ; re_search_stub+87↑j ...
.text:0000000000013971                 test    al, 10h
.text:0000000000013973                 jnz     loc_13B40
.text:0000000000013979                 test    r12, r12
.text:000000000001397C                 jz      loc_13B40
.text:0000000000013982                 and     eax, 6
.text:0000000000013985                 mov     rcx, [r15+30h]
.text:0000000000013989                 cmp     al, 4
.text:000000000001398B                 jz      loc_13B20
.text:0000000000013991
.text:0000000000013991 loc_13991:                              ; CODE XREF: re_search_stub+247↓j
.text:0000000000013991                 lea     r14, [rcx+1]
.text:0000000000013995                 mov     r13, r14
.text:0000000000013998
.text:0000000000013998 loc_13998:                              ; CODE XREF: re_search_stub+253↓j
.text:0000000000013998                 mov     rdi, r14
.text:000000000001399B                 shl     rdi, 4          ; size
.text:000000000001399F
.text:000000000001399F loc_1399F:                              ; CODE XREF: re_search_stub+274↓j
.text:000000000001399F                 mov     [rsp+68h+var_48], r9
.text:00000000000139A4                 mov     [rsp+68h+var_50], rdx
.text:00000000000139A9                 mov     [rsp+68h+ptr], rsi
.text:00000000000139AE                 mov     [rsp+68h+size], r8
.text:00000000000139B3                 call    _malloc
.text:00000000000139B8                 test    rax, rax
.text:00000000000139BB                 mov     rbp, rax
.text:00000000000139BE                 jz      loc_13C50
.text:00000000000139C4                 sub     rsp, 8
.text:00000000000139C8                 mov     rcx, rbx
.text:00000000000139CB                 mov     rdi, r15
.text:00000000000139CE                 mov     eax, [rsp+70h+var_3C]
.text:00000000000139D2                 push    rax
.text:00000000000139D3                 push    rbp
.text:00000000000139D4                 push    r14
.text:00000000000139D6                 mov     r9, [rsp+88h+var_48]
.text:00000000000139DB                 mov     r8, [rsp+88h+size]
.text:00000000000139E0                 mov     rdx, [rsp+88h+var_50]
.text:00000000000139E5                 mov     rsi, [rsp+88h+ptr]
.text:00000000000139EA                 call    re_search_internal
.text:00000000000139EF                 add     rsp, 20h
.text:00000000000139F3                 test    eax, eax
.text:00000000000139F5                 jz      short loc_13A28
.text:00000000000139F7                 cmp     eax, 1
.text:00000000000139FA                 mov     r12, 0FFFFFFFFFFFFFFFFh
.text:0000000000013A01                 jz      short loc_13A0A
.text:0000000000013A03
.text:0000000000013A03 loc_13A03:                              ; CODE XREF: re_search_stub+212↓j
.text:0000000000013A03                 mov     r12, 0FFFFFFFFFFFFFFFEh
.text:0000000000013A0A
.text:0000000000013A0A loc_13A0A:                              ; CODE XREF: re_search_stub+121↑j
.text:0000000000013A0A                                         ; re_search_stub+221↓j ...
.text:0000000000013A0A                 mov     rdi, rbp        ; ptr
.text:0000000000013A0D                 call    _free
.text:0000000000013A12
.text:0000000000013A12 loc_13A12:                              ; CODE XREF: re_search_stub+367↓j
.text:0000000000013A12                                         ; re_search_stub+377↓j
.text:0000000000013A12                 add     rsp, 38h
.text:0000000000013A16                 mov     rax, r12
.text:0000000000013A19                 pop     rbx
.text:0000000000013A1A                 pop     rbp
.text:0000000000013A1B                 pop     r12
.text:0000000000013A1D                 pop     r13
.text:0000000000013A1F                 pop     r14
.text:0000000000013A21                 pop     r15
.text:0000000000013A23                 retn
.text:0000000000013A23 ; ---------------------------------------------------------------------------
.text:0000000000013A24                 align 8
.text:0000000000013A28
.text:0000000000013A28 loc_13A28:                              ; CODE XREF: re_search_stub+115↑j
.text:0000000000013A28                 test    r12, r12
.text:0000000000013A2B                 jz      loc_13AF8
.text:0000000000013A31                 movzx   eax, byte ptr [r15+38h]
.text:0000000000013A36                 lea     rdx, [r13+1]
.text:0000000000013A3A                 shr     al, 1
.text:0000000000013A3C                 and     eax, 3
.text:0000000000013A3F                 jz      loc_13BB0
.text:0000000000013A45                 cmp     eax, 1
.text:0000000000013A48                 jz      loc_13C60
.text:0000000000013A4E                 cmp     eax, 2
.text:0000000000013A51                 jnz     loc_13D40
.text:0000000000013A57                 cmp     r14, [r12]
.text:0000000000013A5B                 ja      loc_13D21
.text:0000000000013A61                 mov     r9d, 2
.text:0000000000013A67
.text:0000000000013A67 loc_13A67:                              ; CODE XREF: re_search_stub+32C↓j
.text:0000000000013A67                                         ; re_search_stub+38A↓j ...
.text:0000000000013A67                 test    r13, r13
.text:0000000000013A6A                 jle     loc_13CD8
.text:0000000000013A70                 mov     r8, [r12+8]
.text:0000000000013A75                 mov     rdi, [r12+10h]
.text:0000000000013A7A                 lea     rsi, ds:0[r13*8]
.text:0000000000013A82                 mov     rdx, r13
.text:0000000000013A85                 xor     eax, eax
.text:0000000000013A87                 nop     word ptr [rax+rax+00000000h]
.text:0000000000013A90
.text:0000000000013A90 loc_13A90:                              ; CODE XREF: re_search_stub+1C9↓j
.text:0000000000013A90                 mov     rcx, [rbp+rax*2+0]
.text:0000000000013A95                 mov     [r8+rax], rcx
.text:0000000000013A99                 mov     rcx, [rbp+rax*2+8]
.text:0000000000013A9E                 mov     [rdi+rax], rcx
.text:0000000000013AA2                 add     rax, 8
.text:0000000000013AA6                 cmp     rsi, rax
.text:0000000000013AA9                 jnz     short loc_13A90
.text:0000000000013AAB
.text:0000000000013AAB loc_13AAB:                              ; CODE XREF: re_search_stub+3FD↓j
.text:0000000000013AAB                 cmp     [r12], rdx
.text:0000000000013AAF                 jbe     short loc_13ADD
.text:0000000000013AB1                 mov     rsi, [r12+10h]
.text:0000000000013AB6                 mov     rcx, [r12+8]
.text:0000000000013ABB                 mov     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000013AC2                 nop     word ptr [rax+rax+00h]
.text:0000000000013AC8
.text:0000000000013AC8 loc_13AC8:                              ; CODE XREF: re_search_stub+1FB↓j
.text:0000000000013AC8                 mov     [rsi+rdx*8], rax
.text:0000000000013ACC                 add     r13, 1
.text:0000000000013AD0                 mov     [rcx+rdx*8], rax
.text:0000000000013AD4                 cmp     r13, [r12]
.text:0000000000013AD8                 mov     rdx, r13
.text:0000000000013ADB                 jb      short loc_13AC8
.text:0000000000013ADD
.text:0000000000013ADD loc_13ADD:                              ; CODE XREF: re_search_stub+1CF↑j
.text:0000000000013ADD                                         ; re_search_stub+40D↓j ...
.text:0000000000013ADD                 movzx   eax, byte ptr [r15+38h]
.text:0000000000013AE2                 lea     r13d, [r9+r9]
.text:0000000000013AE6                 and     eax, 0FFFFFFF9h
.text:0000000000013AE9                 or      eax, r13d
.text:0000000000013AEC                 test    al, 6
.text:0000000000013AEE                 mov     [r15+38h], al
.text:0000000000013AF2                 jz      loc_13A03
.text:0000000000013AF8
.text:0000000000013AF8 loc_13AF8:                              ; CODE XREF: re_search_stub+14B↑j
.text:0000000000013AF8                 cmp     byte ptr [rsp+68h+var_40], 0
.text:0000000000013AFD                 mov     r12, [rbp+0]
.text:0000000000013B01                 jz      loc_13A0A
.text:0000000000013B07                 cmp     r12, rbx
.text:0000000000013B0A                 jnz     loc_13D02
.text:0000000000013B10                 mov     r12, [rbp+8]
.text:0000000000013B14                 sub     r12, rbx
.text:0000000000013B17                 jmp     loc_13A0A
.text:0000000000013B17 ; ---------------------------------------------------------------------------
.text:0000000000013B1C                 align 20h
.text:0000000000013B20
.text:0000000000013B20 loc_13B20:                              ; CODE XREF: re_search_stub+AB↑j
.text:0000000000013B20                 mov     r14, [r12]
.text:0000000000013B24                 cmp     r14, rcx
.text:0000000000013B27                 ja      loc_13991
.text:0000000000013B2D                 test    r14, r14
.text:0000000000013B30                 mov     r13, r14
.text:0000000000013B33                 jg      loc_13998
.text:0000000000013B39                 nop     dword ptr [rax+00000000h]
.text:0000000000013B40
.text:0000000000013B40 loc_13B40:                              ; CODE XREF: re_search_stub+93↑j
.text:0000000000013B40                                         ; re_search_stub+9C↑j
.text:0000000000013B40                 mov     edi, 10h
.text:0000000000013B45                 mov     r14d, 1
.text:0000000000013B4B                 mov     r13d, 1
.text:0000000000013B51                 xor     r12d, r12d
.text:0000000000013B54                 jmp     loc_1399F
.text:0000000000013B54 ; ---------------------------------------------------------------------------
.text:0000000000013B59                 align 20h
.text:0000000000013B60
.text:0000000000013B60 loc_13B60:                              ; CODE XREF: re_search_stub+8B↑j
.text:0000000000013B60                 mov     rdi, r15
.text:0000000000013B63                 mov     [rsp+68h+var_48], r9
.text:0000000000013B68                 mov     [rsp+68h+var_50], rdx
.text:0000000000013B6D                 mov     [rsp+68h+ptr], rsi
.text:0000000000013B72                 mov     [rsp+68h+size], r8
.text:0000000000013B77                 call    rpl_re_compile_fastmap
.text:0000000000013B7C                 movzx   eax, byte ptr [r15+38h]
.text:0000000000013B81                 mov     r9, [rsp+68h+var_48]
.text:0000000000013B86                 mov     rdx, [rsp+68h+var_50]
.text:0000000000013B8B                 mov     rsi, [rsp+68h+ptr]
.text:0000000000013B90                 mov     r8, [rsp+68h+size]
.text:0000000000013B95                 jmp     loc_13971
.text:0000000000013B95 ; ---------------------------------------------------------------------------
.text:0000000000013B9A                 align 20h
.text:0000000000013BA0
.text:0000000000013BA0 loc_13BA0:                              ; CODE XREF: re_search_stub+3C↑j
.text:0000000000013BA0                                         ; re_search_stub+4A↑j
.text:0000000000013BA0                 mov     r8, rdx
.text:0000000000013BA3                 jmp     loc_13947
.text:0000000000013BA3 ; ---------------------------------------------------------------------------
.text:0000000000013BA8                 align 10h
.text:0000000000013BB0
.text:0000000000013BB0 loc_13BB0:                              ; CODE XREF: re_search_stub+15F↑j
.text:0000000000013BB0                 lea     r14, ds:0[rdx*8]
.text:0000000000013BB8                 mov     [rsp+68h+size], rdx
.text:0000000000013BBD                 mov     rdi, r14        ; size
.text:0000000000013BC0                 call    _malloc
.text:0000000000013BC5                 test    rax, rax
.text:0000000000013BC8                 mov     [r12+8], rax
.text:0000000000013BCD                 mov     rdx, [rsp+68h+size]
.text:0000000000013BD2                 jz      loc_13CEA
.text:0000000000013BD8                 mov     rdi, r14        ; size
.text:0000000000013BDB                 mov     [rsp+68h+size], rdx
.text:0000000000013BE0                 mov     [rsp+68h+ptr], rax
.text:0000000000013BE5                 call    _malloc
.text:0000000000013BEA                 test    rax, rax
.text:0000000000013BED                 mov     [r12+10h], rax
.text:0000000000013BF2                 mov     rdx, [rsp+68h+size]
.text:0000000000013BF7                 mov     rcx, [rsp+68h+ptr]
.text:0000000000013BFC                 jz      loc_13CE2
.text:0000000000013C02                 mov     [r12], rdx
.text:0000000000013C06                 mov     r9d, 1
.text:0000000000013C0C                 jmp     loc_13A67
.text:0000000000013C0C ; ---------------------------------------------------------------------------
.text:0000000000013C11                 align 8
.text:0000000000013C18
.text:0000000000013C18 loc_13C18:                              ; CODE XREF: re_search_stub+53↑j
.text:0000000000013C18                                         ; re_search_stub+61↑j
.text:0000000000013C18                 movzx   eax, byte ptr [r15+38h]
.text:0000000000013C1D                 xor     r8d, r8d
.text:0000000000013C20                 mov     r13d, eax
.text:0000000000013C23                 shr     r13b, 5
.text:0000000000013C27                 mov     edi, r13d
.text:0000000000013C2A                 and     edi, 3
.text:0000000000013C2D                 mov     [rsp+68h+var_3C], edi
.text:0000000000013C31                 jmp     loc_13971
.text:0000000000013C31 ; ---------------------------------------------------------------------------
.text:0000000000013C36                 align 20h
.text:0000000000013C40
.text:0000000000013C40 loc_13C40:                              ; CODE XREF: re_search_stub+24↑j
.text:0000000000013C40                                         ; re_search_stub+2D↑j
.text:0000000000013C40                 mov     r12, 0FFFFFFFFFFFFFFFFh
.text:0000000000013C47                 jmp     loc_13A12
.text:0000000000013C47 ; ---------------------------------------------------------------------------
.text:0000000000013C4C                 align 10h
.text:0000000000013C50
.text:0000000000013C50 loc_13C50:                              ; CODE XREF: re_search_stub+DE↑j
.text:0000000000013C50                 mov     r12, 0FFFFFFFFFFFFFFFEh
.text:0000000000013C57                 jmp     loc_13A12
.text:0000000000013C57 ; ---------------------------------------------------------------------------
.text:0000000000013C5C                 align 20h
.text:0000000000013C60
.text:0000000000013C60 loc_13C60:                              ; CODE XREF: re_search_stub+168↑j
.text:0000000000013C60                 cmp     [r12], rdx
.text:0000000000013C64                 mov     r9d, 1
.text:0000000000013C6A                 jnb     loc_13A67
.text:0000000000013C70                 lea     rcx, ds:0[rdx*8]
.text:0000000000013C78                 mov     rdi, [r12+8]    ; ptr
.text:0000000000013C7D                 mov     byte ptr [rsp+68h+var_50], r9b
.text:0000000000013C82                 mov     [rsp+68h+ptr], rdx
.text:0000000000013C87                 mov     rsi, rcx        ; size
.text:0000000000013C8A                 mov     [rsp+68h+size], rcx
.text:0000000000013C8F                 call    _realloc
.text:0000000000013C94                 test    rax, rax
.text:0000000000013C97                 mov     r14, rax
.text:0000000000013C9A                 jz      short loc_13CEA
.text:0000000000013C9C                 mov     rcx, [rsp+68h+size]
.text:0000000000013CA1                 mov     rdi, [r12+10h]  ; ptr
.text:0000000000013CA6                 mov     rsi, rcx        ; size
.text:0000000000013CA9                 call    _realloc
.text:0000000000013CAE                 test    rax, rax
.text:0000000000013CB1                 mov     rdx, [rsp+68h+ptr]
.text:0000000000013CB6                 movzx   r9d, byte ptr [rsp+68h+var_50]
.text:0000000000013CBC                 jz      short loc_13CF2
.text:0000000000013CBE                 mov     [r12+8], r14
.text:0000000000013CC3                 mov     [r12+10h], rax
.text:0000000000013CC8                 mov     [r12], rdx
.text:0000000000013CCC                 jmp     loc_13A67
.text:0000000000013CCC ; ---------------------------------------------------------------------------
.text:0000000000013CD1                 align 8
.text:0000000000013CD8
.text:0000000000013CD8 loc_13CD8:                              ; CODE XREF: re_search_stub+18A↑j
.text:0000000000013CD8                 xor     edx, edx
.text:0000000000013CDA                 xor     r13d, r13d
.text:0000000000013CDD                 jmp     loc_13AAB
.text:0000000000013CE2 ; ---------------------------------------------------------------------------
.text:0000000000013CE2
.text:0000000000013CE2 loc_13CE2:                              ; CODE XREF: re_search_stub+31C↑j
.text:0000000000013CE2                 mov     rdi, rcx        ; ptr
.text:0000000000013CE5                 call    _free
.text:0000000000013CEA
.text:0000000000013CEA loc_13CEA:                              ; CODE XREF: re_search_stub+2F2↑j
.text:0000000000013CEA                                         ; re_search_stub+3BA↑j
.text:0000000000013CEA                 xor     r9d, r9d
.text:0000000000013CED                 jmp     loc_13ADD
.text:0000000000013CF2 ; ---------------------------------------------------------------------------
.text:0000000000013CF2
.text:0000000000013CF2 loc_13CF2:                              ; CODE XREF: re_search_stub+3DC↑j
.text:0000000000013CF2                 mov     rdi, r14        ; ptr
.text:0000000000013CF5                 call    _free
.text:0000000000013CFA                 xor     r9d, r9d
.text:0000000000013CFD                 jmp     loc_13ADD
.text:0000000000013D02 ; ---------------------------------------------------------------------------
.text:0000000000013D02
.text:0000000000013D02 loc_13D02:                              ; CODE XREF: re_search_stub+22A↑j
.text:0000000000013D02                 lea     rcx, __PRETTY_FUNCTION___7847 ; "re_search_stub"
.text:0000000000013D09                 lea     rsi, aCoreutils831Li_0 ; "../coreutils-8.31/lib/regexec.c"
.text:0000000000013D10                 lea     rdi, aPmatch0RmSoSta ; "pmatch[0].rm_so == start"
.text:0000000000013D17                 mov     edx, 1BEh       ; line
.text:0000000000013D1C                 call    ___assert_fail
.text:0000000000013D21 ; ---------------------------------------------------------------------------
.text:0000000000013D21
.text:0000000000013D21 loc_13D21:                              ; CODE XREF: re_search_stub+17B↑j
.text:0000000000013D21                 lea     rcx, __PRETTY_FUNCTION___7859 ; "re_copy_regs"
.text:0000000000013D28                 lea     rsi, aCoreutils831Li_0 ; "../coreutils-8.31/lib/regexec.c"
.text:0000000000013D2F                 lea     rdi, aRegsNumRegsNre ; "regs->num_regs >= nregs"
.text:0000000000013D36                 mov     edx, 1FBh       ; line
.text:0000000000013D3B                 call    ___assert_fail
.text:0000000000013D40 ; ---------------------------------------------------------------------------
.text:0000000000013D40
.text:0000000000013D40 loc_13D40:                              ; CODE XREF: re_search_stub+171↑j
.text:0000000000013D40                 lea     rcx, __PRETTY_FUNCTION___7859 ; "re_copy_regs"
.text:0000000000013D47                 lea     rsi, aCoreutils831Li_0 ; "../coreutils-8.31/lib/regexec.c"
.text:0000000000013D4E                 lea     rdi, aRegsAllocatedR ; "regs_allocated == REGS_FIXED"
.text:0000000000013D55                 mov     edx, 1F9h       ; line
.text:0000000000013D5A                 call    ___assert_fail
.text:0000000000013D5A ; } // starts at 138E0
.text:0000000000013D5A re_search_stub  endp
.text:0000000000013D5A
.text:0000000000013D5A ; ---------------------------------------------------------------------------
.text:0000000000013D5F                 align 20h
.text:0000000000013D60
.text:0000000000013D60 ; =============== S U B R O U T I N E =======================================
.text:0000000000013D60
.text:0000000000013D60
.text:0000000000013D60 re_search_2_stub proc near              ; CODE XREF: rpl_re_match_2+10↓p
.text:0000000000013D60                                         ; rpl_re_search_2+12↓p
.text:0000000000013D60
.text:0000000000013D60 src             = qword ptr -50h
.text:0000000000013D60 var_48          = qword ptr -48h
.text:0000000000013D60 var_3C          = dword ptr -3Ch
.text:0000000000013D60 arg_0           = qword ptr  8
.text:0000000000013D60 arg_8           = qword ptr  10h
.text:0000000000013D60 arg_10          = qword ptr  18h
.text:0000000000013D60 arg_18          = dword ptr  20h
.text:0000000000013D60
.text:0000000000013D60 ; __unwind {
.text:0000000000013D60                 push    r15
.text:0000000000013D62                 push    r14
.text:0000000000013D64                 push    r13
.text:0000000000013D66                 push    r12
.text:0000000000013D68                 mov     r12, rdi
.text:0000000000013D6B                 push    rbp
.text:0000000000013D6C                 push    rbx
.text:0000000000013D6D                 mov     rbp, r8
.text:0000000000013D70                 mov     rbx, rdx
.text:0000000000013D73                 mov     rdx, rbp
.text:0000000000013D76                 sub     rsp, 28h
.text:0000000000013D7A                 shr     rdx, 3Fh
.text:0000000000013D7E                 mov     rax, [rsp+58h+arg_10]
.text:0000000000013D83                 mov     edi, edx
.text:0000000000013D85                 mov     r8d, [rsp+58h+arg_18]
.text:0000000000013D8A                 shr     rax, 3Fh
.text:0000000000013D8E                 or      dil, al
.text:0000000000013D91                 jnz     loc_13E60
.text:0000000000013D97                 test    rbx, rbx
.text:0000000000013D9A                 js      loc_13E60
.text:0000000000013DA0                 mov     r15, rbx
.text:0000000000013DA3                 add     r15, rbp
.text:0000000000013DA6                 jo      loc_13E60
.text:0000000000013DAC                 test    rbp, rbp
.text:0000000000013DAF                 mov     r14, rcx
.text:0000000000013DB2                 mov     rcx, r9
.text:0000000000013DB5                 jz      loc_13E70
.text:0000000000013DBB                 xor     r13d, r13d
.text:0000000000013DBE                 test    rbx, rbx
.text:0000000000013DC1                 mov     [rsp+58h+src], rsi
.text:0000000000013DC6                 jnz     short loc_13E10
.text:0000000000013DC8
.text:0000000000013DC8 loc_13DC8:                              ; CODE XREF: re_search_2_stub+F7↓j
.text:0000000000013DC8                                         ; re_search_2_stub+116↓j
.text:0000000000013DC8                 movzx   r8d, r8b
.text:0000000000013DCC                 mov     rdx, r15
.text:0000000000013DCF                 mov     rsi, r14
.text:0000000000013DD2                 push    r8
.text:0000000000013DD4                 push    [rsp+60h+arg_8]
.text:0000000000013DD8                 mov     rdi, r12
.text:0000000000013DDB                 mov     r9, [rsp+68h+arg_10]
.text:0000000000013DE3                 mov     r8, [rsp+68h+arg_0]
.text:0000000000013DE8                 call    re_search_stub
.text:0000000000013DED                 mov     rdi, r13        ; ptr
.text:0000000000013DF0                 mov     rbx, rax
.text:0000000000013DF3                 call    _free
.text:0000000000013DF8                 pop     rax
.text:0000000000013DF9                 pop     rdx
.text:0000000000013DFA
.text:0000000000013DFA loc_13DFA:                              ; CODE XREF: re_search_2_stub+107↓j
.text:0000000000013DFA                 add     rsp, 28h
.text:0000000000013DFE                 mov     rax, rbx
.text:0000000000013E01                 pop     rbx
.text:0000000000013E02                 pop     rbp
.text:0000000000013E03                 pop     r12
.text:0000000000013E05                 pop     r13
.text:0000000000013E07                 pop     r14
.text:0000000000013E09                 pop     r15
.text:0000000000013E0B                 retn
.text:0000000000013E0B ; ---------------------------------------------------------------------------
.text:0000000000013E0C                 align 10h
.text:0000000000013E10
.text:0000000000013E10 loc_13E10:                              ; CODE XREF: re_search_2_stub+66↑j
.text:0000000000013E10                 mov     rdi, r15        ; size
.text:0000000000013E13                 mov     [rsp+58h+var_3C], r8d
.text:0000000000013E18                 mov     [rsp+58h+var_48], r9
.text:0000000000013E1D                 call    _malloc
.text:0000000000013E22                 test    rax, rax
.text:0000000000013E25                 mov     r13, rax
.text:0000000000013E28                 jz      short loc_13E60
.text:0000000000013E2A                 mov     rsi, [rsp+58h+src] ; src
.text:0000000000013E2F                 mov     rdx, rbx        ; n
.text:0000000000013E32                 mov     rdi, rax        ; dest
.text:0000000000013E35                 call    _memcpy
.text:0000000000013E3A                 lea     rdi, [r13+rbx+0] ; dest
.text:0000000000013E3F                 mov     rsi, r14        ; src
.text:0000000000013E42                 mov     rdx, rbp        ; n
.text:0000000000013E45                 mov     r14, r13
.text:0000000000013E48                 call    _memcpy
.text:0000000000013E4D                 mov     rcx, [rsp+58h+var_48]
.text:0000000000013E52                 mov     r8d, [rsp+58h+var_3C]
.text:0000000000013E57                 jmp     loc_13DC8
.text:0000000000013E57 ; ---------------------------------------------------------------------------
.text:0000000000013E5C                 align 20h
.text:0000000000013E60
.text:0000000000013E60 loc_13E60:                              ; CODE XREF: re_search_2_stub+31↑j
.text:0000000000013E60                                         ; re_search_2_stub+3A↑j ...
.text:0000000000013E60                 mov     rbx, 0FFFFFFFFFFFFFFFEh
.text:0000000000013E67                 jmp     short loc_13DFA
.text:0000000000013E67 ; ---------------------------------------------------------------------------
.text:0000000000013E69                 align 10h
.text:0000000000013E70
.text:0000000000013E70 loc_13E70:                              ; CODE XREF: re_search_2_stub+55↑j
.text:0000000000013E70                 mov     r14, rsi
.text:0000000000013E73                 xor     r13d, r13d
.text:0000000000013E76                 jmp     loc_13DC8
.text:0000000000013E76 ; } // starts at 13D60
.text:0000000000013E76 re_search_2_stub endp
.text:0000000000013E76
.text:0000000000013E76 ; ---------------------------------------------------------------------------
.text:0000000000013E7B                 align 20h
.text:0000000000013E80
.text:0000000000013E80 ; =============== S U B R O U T I N E =======================================
.text:0000000000013E80
.text:0000000000013E80
.text:0000000000013E80                 public rpl_regcomp
.text:0000000000013E80 rpl_regcomp     proc near
.text:0000000000013E80 ; __unwind {
.text:0000000000013E80                 mov     eax, edx
.text:0000000000013E82                 push    r14
.text:0000000000013E84                 push    r13
.text:0000000000013E86                 and     eax, 1
.text:0000000000013E89                 push    r12
.text:0000000000013E8B                 push    rbp
.text:0000000000013E8C                 cmp     eax, 1
.text:0000000000013E8F                 push    rbx
.text:0000000000013E90                 mov     rbx, rdi
.text:0000000000013E93                 sbb     r14, r14
.text:0000000000013E96                 mov     qword ptr [rdi], 0
.text:0000000000013E9D                 mov     qword ptr [rdi+8], 0
.text:0000000000013EA5                 and     r14d, 0FD4FCAh
.text:0000000000013EAC                 mov     qword ptr [rdi+10h], 0
.text:0000000000013EB4                 mov     edi, 100h       ; size
.text:0000000000013EB9                 mov     r12, rsi
.text:0000000000013EBC                 mov     ebp, edx
.text:0000000000013EBE                 add     r14, 3B2FCh
.text:0000000000013EC5                 call    _malloc
.text:0000000000013ECA                 test    rax, rax
.text:0000000000013ECD                 mov     [rbx+20h], rax
.text:0000000000013ED1                 jz      loc_13F80
.text:0000000000013ED7                 mov     r13, rbp
.text:0000000000013EDA                 shl     r13, 15h
.text:0000000000013EDE                 and     r13d, 400000h
.text:0000000000013EE5                 or      r13, r14
.text:0000000000013EE8                 test    bpl, 4
.text:0000000000013EEC                 jnz     short loc_13F50
.text:0000000000013EEE                 and     byte ptr [rbx+38h], 7Fh
.text:0000000000013EF2
.text:0000000000013EF2 loc_13EF2:                              ; CODE XREF: rpl_regcomp+DF↓j
.text:0000000000013EF2                 movzx   edx, byte ptr [rbx+38h]
.text:0000000000013EF6                 shr     ebp, 3
.text:0000000000013EF9                 mov     rdi, r12        ; s
.text:0000000000013EFC                 and     ebp, 1
.text:0000000000013EFF                 mov     qword ptr [rbx+28h], 0
.text:0000000000013F07                 shl     ebp, 4
.text:0000000000013F0A                 and     edx, 0FFFFFFEFh
.text:0000000000013F0D                 or      ebp, edx
.text:0000000000013F0F                 mov     [rbx+38h], bpl
.text:0000000000013F13                 call    _strlen
.text:0000000000013F18                 mov     rcx, r13
.text:0000000000013F1B                 mov     rdx, rax
.text:0000000000013F1E                 mov     rsi, r12
.text:0000000000013F21                 mov     rdi, rbx
.text:0000000000013F24                 call    re_compile_internal
.text:0000000000013F29                 cmp     eax, 10h
.text:0000000000013F2C                 mov     ebp, eax
.text:0000000000013F2E                 jz      short loc_13F68
.text:0000000000013F30                 test    eax, eax
.text:0000000000013F32                 jnz     short loc_13F6D
.text:0000000000013F34                 mov     rdi, rbx
.text:0000000000013F37                 call    rpl_re_compile_fastmap
.text:0000000000013F3C
.text:0000000000013F3C loc_13F3C:                              ; CODE XREF: rpl_regcomp+FE↓j
.text:0000000000013F3C                 pop     rbx
.text:0000000000013F3D                 mov     eax, ebp
.text:0000000000013F3F                 pop     rbp
.text:0000000000013F40                 pop     r12
.text:0000000000013F42                 pop     r13
.text:0000000000013F44                 pop     r14
.text:0000000000013F46                 retn
.text:0000000000013F46 ; ---------------------------------------------------------------------------
.text:0000000000013F47                 align 10h
.text:0000000000013F50
.text:0000000000013F50 loc_13F50:                              ; CODE XREF: rpl_regcomp+6C↑j
.text:0000000000013F50                 and     r13, 0FFFFFFFFFFFFFFBFh
.text:0000000000013F54                 or      byte ptr [rbx+38h], 80h
.text:0000000000013F58                 or      r13, 100h
.text:0000000000013F5F                 jmp     short loc_13EF2
.text:0000000000013F5F ; ---------------------------------------------------------------------------
.text:0000000000013F61                 align 8
.text:0000000000013F68
.text:0000000000013F68 loc_13F68:                              ; CODE XREF: rpl_regcomp+AE↑j
.text:0000000000013F68                 mov     ebp, 8
.text:0000000000013F6D
.text:0000000000013F6D loc_13F6D:                              ; CODE XREF: rpl_regcomp+B2↑j
.text:0000000000013F6D                 mov     rdi, [rbx+20h]  ; ptr
.text:0000000000013F71                 call    _free
.text:0000000000013F76                 mov     qword ptr [rbx+20h], 0
.text:0000000000013F7E                 jmp     short loc_13F3C
.text:0000000000013F80 ; ---------------------------------------------------------------------------
.text:0000000000013F80
.text:0000000000013F80 loc_13F80:                              ; CODE XREF: rpl_regcomp+51↑j
.text:0000000000013F80                 mov     ebp, 0Ch
.text:0000000000013F85                 pop     rbx
.text:0000000000013F86                 mov     eax, ebp
.text:0000000000013F88                 pop     rbp
.text:0000000000013F89                 pop     r12
.text:0000000000013F8B                 pop     r13
.text:0000000000013F8D                 pop     r14
.text:0000000000013F8F                 retn
.text:0000000000013F8F ; } // starts at 13E80
.text:0000000000013F8F rpl_regcomp     endp
.text:0000000000013F8F
.text:0000000000013F90
.text:0000000000013F90 ; =============== S U B R O U T I N E =======================================
.text:0000000000013F90
.text:0000000000013F90
.text:0000000000013F90                 public rpl_regerror
.text:0000000000013F90 rpl_regerror    proc near
.text:0000000000013F90 ; __unwind {
.text:0000000000013F90                 push    r13
.text:0000000000013F92                 push    r12
.text:0000000000013F94                 push    rbp
.text:0000000000013F95                 push    rbx
.text:0000000000013F96                 sub     rsp, 8
.text:0000000000013F9A                 cmp     edi, 10h
.text:0000000000013F9D                 ja      short loc_14000
.text:0000000000013F9F                 lea     rax, __re_error_msgid_idx
.text:0000000000013FA6                 movsxd  rdi, edi
.text:0000000000013FA9                 lea     rsi, __re_error_msgid ; "Success"
.text:0000000000013FB0                 mov     rbp, rdx
.text:0000000000013FB3                 mov     edx, 5          ; category
.text:0000000000013FB8                 mov     r12, rcx
.text:0000000000013FBB                 add     rsi, [rax+rdi*8] ; msgid
.text:0000000000013FBF                 xor     edi, edi        ; domainname
.text:0000000000013FC1                 call    _dcgettext
.text:0000000000013FC6                 mov     rdi, rax        ; s
.text:0000000000013FC9                 mov     r13, rax
.text:0000000000013FCC                 call    _strlen
.text:0000000000013FD1                 test    r12, r12
.text:0000000000013FD4                 lea     rbx, [rax+1]
.text:0000000000013FD8                 jz      short loc_13FED
.text:0000000000013FDA                 cmp     rbx, r12
.text:0000000000013FDD                 mov     rdx, rbx        ; n
.text:0000000000013FE0                 ja      short loc_14008
.text:0000000000013FE2
.text:0000000000013FE2 loc_13FE2:                              ; CODE XREF: rpl_regerror+83↓j
.text:0000000000013FE2                 mov     rsi, r13        ; src
.text:0000000000013FE5                 mov     rdi, rbp        ; dest
.text:0000000000013FE8                 call    _memcpy
.text:0000000000013FED
.text:0000000000013FED loc_13FED:                              ; CODE XREF: rpl_regerror+48↑j
.text:0000000000013FED                 add     rsp, 8
.text:0000000000013FF1                 mov     rax, rbx
.text:0000000000013FF4                 pop     rbx
.text:0000000000013FF5                 pop     rbp
.text:0000000000013FF6                 pop     r12
.text:0000000000013FF8                 pop     r13
.text:0000000000013FFA                 retn
.text:0000000000013FFA ; ---------------------------------------------------------------------------
.text:0000000000013FFB                 align 20h
.text:0000000000014000
.text:0000000000014000 loc_14000:                              ; CODE XREF: rpl_regerror+D↑j
.text:0000000000014000                 call    _abort
.text:0000000000014000 ; ---------------------------------------------------------------------------
.text:0000000000014005                 align 8
.text:0000000000014008
.text:0000000000014008 loc_14008:                              ; CODE XREF: rpl_regerror+50↑j
.text:0000000000014008                 lea     rdx, [r12-1]
.text:000000000001400D                 mov     byte ptr [rbp+r12-1], 0
.text:0000000000014013                 jmp     short loc_13FE2
.text:0000000000014013 ; } // starts at 13F90
.text:0000000000014013 rpl_regerror    endp
.text:0000000000014013
.text:0000000000014013 ; ---------------------------------------------------------------------------
.text:0000000000014015                 align 20h
.text:0000000000014020
.text:0000000000014020 ; =============== S U B R O U T I N E =======================================
.text:0000000000014020
.text:0000000000014020 ; Attributes: info_from_lumina
.text:0000000000014020
.text:0000000000014020                 public regfree
.text:0000000000014020 regfree         proc near
.text:0000000000014020 ; __unwind {
.text:0000000000014020                 push    rbx
.text:0000000000014021                 mov     rbx, rdi
.text:0000000000014024                 mov     rdi, [rdi]      ; ptr
.text:0000000000014027                 test    rdi, rdi
.text:000000000001402A                 jz      short loc_14031
.text:000000000001402C                 call    free_dfa_content
.text:0000000000014031
.text:0000000000014031 loc_14031:                              ; CODE XREF: regfree+A↑j
.text:0000000000014031                 mov     rdi, [rbx+20h]  ; ptr
.text:0000000000014035                 mov     qword ptr [rbx], 0
.text:000000000001403C                 mov     qword ptr [rbx+8], 0
.text:0000000000014044                 call    _free
.text:0000000000014049                 mov     rdi, [rbx+28h]  ; ptr
.text:000000000001404D                 mov     qword ptr [rbx+20h], 0
.text:0000000000014055                 call    _free
.text:000000000001405A                 mov     qword ptr [rbx+28h], 0
.text:0000000000014062                 pop     rbx
.text:0000000000014063                 retn
.text:0000000000014063 ; } // starts at 14020
.text:0000000000014063 regfree         endp
.text:0000000000014063
.text:0000000000014063 ; ---------------------------------------------------------------------------
.text:0000000000014064                 align 10h
.text:0000000000014070
.text:0000000000014070 ; =============== S U B R O U T I N E =======================================
.text:0000000000014070
.text:0000000000014070
.text:0000000000014070                 public rpl_regexec
.text:0000000000014070 rpl_regexec     proc near
.text:0000000000014070
.text:0000000000014070 var_30          = qword ptr -30h
.text:0000000000014070
.text:0000000000014070 ; __unwind {
.text:0000000000014070                 test    r8d, 0FFFFFFF8h
.text:0000000000014077                 jnz     loc_14108
.text:000000000001407D                 push    r13
.text:000000000001407F                 push    r12
.text:0000000000014081                 mov     r13, rdx
.text:0000000000014084                 push    rbp
.text:0000000000014085                 push    rbx
.text:0000000000014086                 mov     r12, rcx
.text:0000000000014089                 mov     ebx, r8d
.text:000000000001408C                 mov     rbp, rdi
.text:000000000001408F                 sub     rsp, 18h
.text:0000000000014093                 test    r8b, 4
.text:0000000000014097                 jnz     short loc_140E8
.text:0000000000014099                 mov     rdi, rsi        ; s
.text:000000000001409C                 mov     [rsp+38h+var_30], rsi
.text:00000000000140A1                 call    _strlen
.text:00000000000140A6                 xor     ecx, ecx
.text:00000000000140A8                 test    byte ptr [rbp+38h], 10h
.text:00000000000140AC                 mov     rdx, rax
.text:00000000000140AF                 mov     rsi, [rsp+38h+var_30]
.text:00000000000140B4                 jz      short loc_140F6
.text:00000000000140B6
.text:00000000000140B6 loc_140B6:                              ; CODE XREF: rpl_regexec+84↓j
.text:00000000000140B6                 sub     rsp, 8
.text:00000000000140BA                 push    rbx
.text:00000000000140BB                 push    0
.text:00000000000140BD                 push    0
.text:00000000000140BF
.text:00000000000140BF loc_140BF:                              ; CODE XREF: rpl_regexec+8F↓j
.text:00000000000140BF                 mov     rdi, rbp
.text:00000000000140C2                 mov     r9, rdx
.text:00000000000140C5                 mov     r8, rdx
.text:00000000000140C8                 call    re_search_internal
.text:00000000000140CD                 add     rsp, 20h
.text:00000000000140D1                 test    eax, eax
.text:00000000000140D3                 setnz   al
.text:00000000000140D6                 add     rsp, 18h
.text:00000000000140DA                 pop     rbx
.text:00000000000140DB                 movzx   eax, al
.text:00000000000140DE                 pop     rbp
.text:00000000000140DF                 pop     r12
.text:00000000000140E1                 pop     r13
.text:00000000000140E3                 retn
.text:00000000000140E3 ; ---------------------------------------------------------------------------
.text:00000000000140E4                 align 8
.text:00000000000140E8
.text:00000000000140E8 loc_140E8:                              ; CODE XREF: rpl_regexec+27↑j
.text:00000000000140E8                 test    byte ptr [rbp+38h], 10h
.text:00000000000140EC                 mov     rcx, [rcx]
.text:00000000000140EF                 mov     rdx, [r12+8]
.text:00000000000140F4                 jnz     short loc_140B6
.text:00000000000140F6
.text:00000000000140F6 loc_140F6:                              ; CODE XREF: rpl_regexec+44↑j
.text:00000000000140F6                 sub     rsp, 8
.text:00000000000140FA                 push    rbx
.text:00000000000140FB                 push    r12
.text:00000000000140FD                 push    r13
.text:00000000000140FF                 jmp     short loc_140BF
.text:00000000000140FF ; ---------------------------------------------------------------------------
.text:0000000000014101                 align 8
.text:0000000000014108
.text:0000000000014108 loc_14108:                              ; CODE XREF: rpl_regexec+7↑j
.text:0000000000014108                 mov     eax, 2
.text:000000000001410D                 retn
.text:000000000001410D ; } // starts at 14070
.text:000000000001410D rpl_regexec     endp
.text:000000000001410D
.text:000000000001410D ; ---------------------------------------------------------------------------
.text:000000000001410E                 align 10h
.text:0000000000014110
.text:0000000000014110 ; =============== S U B R O U T I N E =======================================
.text:0000000000014110
.text:0000000000014110
.text:0000000000014110                 public rpl_re_match
.text:0000000000014110 rpl_re_match    proc near
.text:0000000000014110 ; __unwind {
.text:0000000000014110                 sub     rsp, 8
.text:0000000000014114                 mov     r9, rdx
.text:0000000000014117                 push    1
.text:0000000000014119                 push    r8
.text:000000000001411B                 xor     r8d, r8d
.text:000000000001411E                 call    re_search_stub
.text:0000000000014123                 add     rsp, 18h
.text:0000000000014127                 retn
.text:0000000000014127 ; } // starts at 14110
.text:0000000000014127 rpl_re_match    endp
.text:0000000000014127
.text:0000000000014127 ; ---------------------------------------------------------------------------
.text:0000000000014128                 align 10h
.text:0000000000014130
.text:0000000000014130 ; =============== S U B R O U T I N E =======================================
.text:0000000000014130
.text:0000000000014130
.text:0000000000014130                 public rpl_re_search
.text:0000000000014130 rpl_re_search   proc near               ; CODE XREF: nl_file+2B9↑p
.text:0000000000014130 ; __unwind {
.text:0000000000014130                 sub     rsp, 8
.text:0000000000014134                 push    0
.text:0000000000014136                 push    r9
.text:0000000000014138                 mov     r9, rdx
.text:000000000001413B                 call    re_search_stub
.text:0000000000014140                 add     rsp, 18h
.text:0000000000014144                 retn
.text:0000000000014144 ; } // starts at 14130
.text:0000000000014144 rpl_re_search   endp
.text:0000000000014144
.text:0000000000014144 ; ---------------------------------------------------------------------------
.text:0000000000014145                 align 10h
.text:0000000000014150
.text:0000000000014150 ; =============== S U B R O U T I N E =======================================
.text:0000000000014150
.text:0000000000014150
.text:0000000000014150                 public rpl_re_match_2
.text:0000000000014150 rpl_re_match_2  proc near
.text:0000000000014150
.text:0000000000014150 arg_0           = qword ptr  8
.text:0000000000014150 arg_8           = qword ptr  10h
.text:0000000000014150
.text:0000000000014150 ; __unwind {
.text:0000000000014150                 sub     rsp, 8
.text:0000000000014154                 push    1
.text:0000000000014156                 push    [rsp+10h+arg_8]
.text:000000000001415A                 push    [rsp+18h+arg_0]
.text:000000000001415E                 push    0
.text:0000000000014160                 call    re_search_2_stub
.text:0000000000014165                 add     rsp, 28h
.text:0000000000014169                 retn
.text:0000000000014169 ; } // starts at 14150
.text:0000000000014169 rpl_re_match_2  endp
.text:0000000000014169
.text:0000000000014169 ; ---------------------------------------------------------------------------
.text:000000000001416A                 align 10h
.text:0000000000014170
.text:0000000000014170 ; =============== S U B R O U T I N E =======================================
.text:0000000000014170
.text:0000000000014170
.text:0000000000014170                 public rpl_re_search_2
.text:0000000000014170 rpl_re_search_2 proc near
.text:0000000000014170
.text:0000000000014170 arg_0           = qword ptr  8
.text:0000000000014170 arg_8           = qword ptr  10h
.text:0000000000014170 arg_10          = qword ptr  18h
.text:0000000000014170
.text:0000000000014170 ; __unwind {
.text:0000000000014170                 sub     rsp, 8
.text:0000000000014174                 push    0
.text:0000000000014176                 push    [rsp+10h+arg_10]
.text:000000000001417A                 push    [rsp+18h+arg_8]
.text:000000000001417E                 push    [rsp+20h+arg_0]
.text:0000000000014182                 call    re_search_2_stub
.text:0000000000014187                 add     rsp, 28h
.text:000000000001418B                 retn
.text:000000000001418B ; } // starts at 14170
.text:000000000001418B rpl_re_search_2 endp
.text:000000000001418B
.text:000000000001418B ; ---------------------------------------------------------------------------
.text:000000000001418C                 align 10h
.text:0000000000014190
.text:0000000000014190 ; =============== S U B R O U T I N E =======================================
.text:0000000000014190
.text:0000000000014190
.text:0000000000014190                 public rpl_re_set_registers
.text:0000000000014190 rpl_re_set_registers proc near
.text:0000000000014190 ; __unwind {
.text:0000000000014190                 test    rdx, rdx
.text:0000000000014193                 jnz     short loc_141B8
.text:0000000000014195                 and     byte ptr [rdi+38h], 0F9h
.text:0000000000014199                 mov     qword ptr [rsi], 0
.text:00000000000141A0                 mov     qword ptr [rsi+10h], 0
.text:00000000000141A8                 mov     qword ptr [rsi+8], 0
.text:00000000000141B0                 retn
.text:00000000000141B0 ; ---------------------------------------------------------------------------
.text:00000000000141B1                 align 8
.text:00000000000141B8
.text:00000000000141B8 loc_141B8:                              ; CODE XREF: rpl_re_set_registers+3↑j
.text:00000000000141B8                 movzx   eax, byte ptr [rdi+38h]
.text:00000000000141BC                 and     eax, 0FFFFFFF9h
.text:00000000000141BF                 or      eax, 2
.text:00000000000141C2                 mov     [rdi+38h], al
.text:00000000000141C5                 mov     [rsi], rdx
.text:00000000000141C8                 mov     [rsi+8], rcx
.text:00000000000141CC                 mov     [rsi+10h], r8
.text:00000000000141D0                 retn
.text:00000000000141D0 ; } // starts at 14190
.text:00000000000141D0 rpl_re_set_registers endp
.text:00000000000141D0
.text:00000000000141D0 ; ---------------------------------------------------------------------------
.text:00000000000141D1                 align 20h
.text:00000000000141E0
.text:00000000000141E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000141E0
.text:00000000000141E0 ; Attributes: info_from_lumina
.text:00000000000141E0
.text:00000000000141E0 ; int __fastcall close_stream(FILE *stream)
.text:00000000000141E0                 public close_stream
.text:00000000000141E0 close_stream    proc near               ; CODE XREF: close_stdout+D↑p
.text:00000000000141E0                                         ; close_stdout+33↑p
.text:00000000000141E0 ; __unwind {
.text:00000000000141E0                 push    r12
.text:00000000000141E2                 push    rbp
.text:00000000000141E3                 mov     rbp, rdi
.text:00000000000141E6                 push    rbx
.text:00000000000141E7                 call    ___fpending
.text:00000000000141EC                 mov     ebx, [rbp+0]
.text:00000000000141EF                 mov     rdi, rbp        ; stream
.text:00000000000141F2                 mov     r12, rax
.text:00000000000141F5                 call    rpl_fclose
.text:00000000000141FA                 and     ebx, 20h
.text:00000000000141FD                 test    ebx, ebx
.text:00000000000141FF                 jnz     short loc_14218
.text:0000000000014201                 test    eax, eax
.text:0000000000014203                 jz      short loc_1420F
.text:0000000000014205                 test    r12, r12
.text:0000000000014208                 mov     eax, 0FFFFFFFFh
.text:000000000001420D                 jz      short loc_14248
.text:000000000001420F
.text:000000000001420F loc_1420F:                              ; CODE XREF: close_stream+23↑j
.text:000000000001420F                 pop     rbx
.text:0000000000014210                 pop     rbp
.text:0000000000014211                 pop     r12
.text:0000000000014213                 retn
.text:0000000000014213 ; ---------------------------------------------------------------------------
.text:0000000000014214                 align 8
.text:0000000000014218
.text:0000000000014218 loc_14218:                              ; CODE XREF: close_stream+1F↑j
.text:0000000000014218                 test    eax, eax
.text:000000000001421A                 jnz     short loc_14238
.text:000000000001421C                 call    ___errno_location
.text:0000000000014221                 mov     dword ptr [rax], 0
.text:0000000000014227                 mov     eax, 0FFFFFFFFh
.text:000000000001422C                 pop     rbx
.text:000000000001422D                 pop     rbp
.text:000000000001422E                 pop     r12
.text:0000000000014230                 retn
.text:0000000000014230 ; ---------------------------------------------------------------------------
.text:0000000000014231                 align 8
.text:0000000000014238
.text:0000000000014238 loc_14238:                              ; CODE XREF: close_stream+3A↑j
.text:0000000000014238                 pop     rbx
.text:0000000000014239                 mov     eax, 0FFFFFFFFh
.text:000000000001423E                 pop     rbp
.text:000000000001423F                 pop     r12
.text:0000000000014241                 retn
.text:0000000000014241 ; ---------------------------------------------------------------------------
.text:0000000000014242                 align 8
.text:0000000000014248
.text:0000000000014248 loc_14248:                              ; CODE XREF: close_stream+2D↑j
.text:0000000000014248                 call    ___errno_location
.text:000000000001424D                 cmp     dword ptr [rax], 9
.text:0000000000014250                 pop     rbx
.text:0000000000014251                 pop     rbp
.text:0000000000014252                 pop     r12
.text:0000000000014254                 setnz   al
.text:0000000000014257                 movzx   eax, al
.text:000000000001425A                 neg     eax
.text:000000000001425C                 retn
.text:000000000001425C ; } // starts at 141E0
.text:000000000001425C close_stream    endp
.text:000000000001425C
.text:000000000001425C ; ---------------------------------------------------------------------------
.text:000000000001425D                 align 20h
.text:0000000000014260
.text:0000000000014260 ; =============== S U B R O U T I N E =======================================
.text:0000000000014260
.text:0000000000014260
.text:0000000000014260                 public hard_locale
.text:0000000000014260 hard_locale     proc near               ; CODE XREF: rpl_mbrtowc+47↑p
.text:0000000000014260 ; __unwind {
.text:0000000000014260                 sub     rsp, 8
.text:0000000000014264                 xor     esi, esi        ; locale
.text:0000000000014266                 call    _setlocale
.text:000000000001426B                 mov     rdx, rax
.text:000000000001426E                 mov     eax, 1
.text:0000000000014273                 test    rdx, rdx
.text:0000000000014276                 jz      short loc_14295
.text:0000000000014278                 lea     rdi, unk_160B0
.text:000000000001427F                 mov     ecx, 2
.text:0000000000014284                 mov     rsi, rdx
.text:0000000000014287                 repe cmpsb
.text:0000000000014289                 setnbe  cl
.text:000000000001428C                 sbb     cl, 0
.text:000000000001428F                 xor     eax, eax
.text:0000000000014291                 test    cl, cl
.text:0000000000014293                 jnz     short loc_142A0
.text:0000000000014295
.text:0000000000014295 loc_14295:                              ; CODE XREF: hard_locale+16↑j
.text:0000000000014295                 add     rsp, 8
.text:0000000000014299                 retn
.text:0000000000014299 ; ---------------------------------------------------------------------------
.text:000000000001429A                 align 20h
.text:00000000000142A0
.text:00000000000142A0 loc_142A0:                              ; CODE XREF: hard_locale+33↑j
.text:00000000000142A0                 lea     rdi, aPosix     ; "POSIX"
.text:00000000000142A7                 mov     ecx, 6
.text:00000000000142AC                 mov     rsi, rdx
.text:00000000000142AF                 repe cmpsb
.text:00000000000142B1                 setnbe  al
.text:00000000000142B4                 sbb     al, 0
.text:00000000000142B6                 test    al, al
.text:00000000000142B8                 setnz   al
.text:00000000000142BB                 add     rsp, 8
.text:00000000000142BF                 retn
.text:00000000000142BF ; } // starts at 14260
.text:00000000000142BF hard_locale     endp
.text:00000000000142BF
.text:00000000000142C0
.text:00000000000142C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000142C0
.text:00000000000142C0
.text:00000000000142C0                 public locale_charset
.text:00000000000142C0 locale_charset  proc near               ; CODE XREF: gettext_quote+B↑p
.text:00000000000142C0 ; __unwind {
.text:00000000000142C0                 sub     rsp, 8
.text:00000000000142C4                 mov     edi, 0Eh        ; item
.text:00000000000142C9                 call    _nl_langinfo
.text:00000000000142CE                 test    rax, rax
.text:00000000000142D1                 jz      short loc_142F0
.text:00000000000142D3                 cmp     byte ptr [rax], 0
.text:00000000000142D6                 lea     rdx, aAscii     ; "ASCII"
.text:00000000000142DD                 cmovz   rax, rdx
.text:00000000000142E1                 add     rsp, 8
.text:00000000000142E5                 retn
.text:00000000000142E5 ; ---------------------------------------------------------------------------
.text:00000000000142E6                 align 10h
.text:00000000000142F0
.text:00000000000142F0 loc_142F0:                              ; CODE XREF: locale_charset+11↑j
.text:00000000000142F0                 lea     rax, aAscii     ; "ASCII"
.text:00000000000142F7                 add     rsp, 8
.text:00000000000142FB                 retn
.text:00000000000142FB ; } // starts at 142C0
.text:00000000000142FB locale_charset  endp
.text:00000000000142FB
.text:00000000000142FB ; ---------------------------------------------------------------------------
.text:00000000000142FC                 align 20h
.text:0000000000014300
.text:0000000000014300 ; =============== S U B R O U T I N E =======================================
.text:0000000000014300
.text:0000000000014300 ; Attributes: info_from_lumina
.text:0000000000014300
.text:0000000000014300 ; void _libc_csu_init(void)
.text:0000000000014300                 public __libc_csu_init
.text:0000000000014300 __libc_csu_init proc near               ; DATA XREF: start+16↑o
.text:0000000000014300 ; __unwind {
.text:0000000000014300                 push    r15
.text:0000000000014302                 push    r14
.text:0000000000014304                 mov     r15, rdx
.text:0000000000014307                 push    r13
.text:0000000000014309                 push    r12
.text:000000000001430B                 lea     r12, __frame_dummy_init_array_entry
.text:0000000000014312                 push    rbp
.text:0000000000014313                 lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:000000000001431A                 push    rbx
.text:000000000001431B                 mov     r13d, edi
.text:000000000001431E                 mov     r14, rsi
.text:0000000000014321                 sub     rbp, r12
.text:0000000000014324                 sub     rsp, 8
.text:0000000000014328                 sar     rbp, 3
.text:000000000001432C                 call    _init_proc
.text:0000000000014331                 test    rbp, rbp
.text:0000000000014334                 jz      short loc_14356
.text:0000000000014336                 xor     ebx, ebx
.text:0000000000014338                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000014340
.text:0000000000014340 loc_14340:                              ; CODE XREF: __libc_csu_init+54↓j
.text:0000000000014340                 mov     rdx, r15
.text:0000000000014343                 mov     rsi, r14
.text:0000000000014346                 mov     edi, r13d
.text:0000000000014349                 call    ds:(__frame_dummy_init_array_entry - 2189B0h)[r12+rbx*8]
.text:000000000001434D                 add     rbx, 1
.text:0000000000014351                 cmp     rbp, rbx
.text:0000000000014354                 jnz     short loc_14340
.text:0000000000014356
.text:0000000000014356 loc_14356:                              ; CODE XREF: __libc_csu_init+34↑j
.text:0000000000014356                 add     rsp, 8
.text:000000000001435A                 pop     rbx
.text:000000000001435B                 pop     rbp
.text:000000000001435C                 pop     r12
.text:000000000001435E                 pop     r13
.text:0000000000014360                 pop     r14
.text:0000000000014362                 pop     r15
.text:0000000000014364                 retn
.text:0000000000014364 ; } // starts at 14300
.text:0000000000014364 __libc_csu_init endp
.text:0000000000014364
.text:0000000000014364 ; ---------------------------------------------------------------------------
.text:0000000000014365                 align 10h
.text:0000000000014370
.text:0000000000014370 ; =============== S U B R O U T I N E =======================================
.text:0000000000014370
.text:0000000000014370
.text:0000000000014370 ; void _libc_csu_fini(void)
.text:0000000000014370                 public __libc_csu_fini
.text:0000000000014370 __libc_csu_fini proc near               ; DATA XREF: start+F↑o
.text:0000000000014370 ; __unwind {
.text:0000000000014370                 rep retn
.text:0000000000014370 ; } // starts at 14370
.text:0000000000014370 __libc_csu_fini endp
.text:0000000000014370
.text:0000000000014370 ; ---------------------------------------------------------------------------
.text:0000000000014372                 align 20h
.text:0000000000014380
.text:0000000000014380 ; =============== S U B R O U T I N E =======================================
.text:0000000000014380
.text:0000000000014380
.text:0000000000014380 atexit          proc near               ; CODE XREF: main+6D↑p
.text:0000000000014380 ; __unwind {
.text:0000000000014380                 mov     rdx, cs:__dso_handle ; lpdso_handle
.text:0000000000014387                 xor     esi, esi        ; obj
.text:0000000000014389                 jmp     ___cxa_atexit
.text:0000000000014389 ; } // starts at 14380
.text:0000000000014389 atexit          endp
.text:0000000000014389
.text:0000000000014389 _text           ends
.text:0000000000014389
LOAD:000000000001438E ; ===========================================================================
LOAD:000000000001438E
LOAD:000000000001438E ; Segment type: Pure code
LOAD:000000000001438E ; Segment permissions: Read/Execute
LOAD:000000000001438E LOAD            segment byte public 'CODE' use64
LOAD:000000000001438E                 assume cs:LOAD
LOAD:000000000001438E                 ;org 1438Eh
LOAD:000000000001438E                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000001438E                 align 10h
LOAD:000000000001438E LOAD            ends
LOAD:000000000001438E
.fini:0000000000014390 ; ===========================================================================
.fini:0000000000014390
.fini:0000000000014390 ; Segment type: Pure code
.fini:0000000000014390 ; Segment permissions: Read/Execute
.fini:0000000000014390 _fini           segment dword public 'CODE' use64
.fini:0000000000014390                 assume cs:_fini
.fini:0000000000014390                 ;org 14390h
.fini:0000000000014390                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:0000000000014390
.fini:0000000000014390 ; =============== S U B R O U T I N E =======================================
.fini:0000000000014390
.fini:0000000000014390
.fini:0000000000014390                 public _term_proc
.fini:0000000000014390 _term_proc      proc near
.fini:0000000000014390                 sub     rsp, 8          ; _fini
.fini:0000000000014394                 add     rsp, 8
.fini:0000000000014398                 retn
.fini:0000000000014398 _term_proc      endp
.fini:0000000000014398
.fini:0000000000014398 _fini           ends
.fini:0000000000014398
LOAD:0000000000014399 ; ===========================================================================
LOAD:0000000000014399
LOAD:0000000000014399 ; Segment type: Pure code
LOAD:0000000000014399 ; Segment permissions: Read/Execute
LOAD:0000000000014399 LOAD            segment byte public 'CODE' use64
LOAD:0000000000014399                 assume cs:LOAD
LOAD:0000000000014399                 ;org 14399h
LOAD:0000000000014399                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000014399                 align 20h
LOAD:0000000000014399 LOAD            ends
LOAD:0000000000014399
.rodata:00000000000143A0 ; ===========================================================================
.rodata:00000000000143A0
.rodata:00000000000143A0 ; Segment type: Pure data
.rodata:00000000000143A0 ; Segment permissions: Read
.rodata:00000000000143A0 _rodata         segment align_32 public 'CONST' use64
.rodata:00000000000143A0                 assume cs:_rodata
.rodata:00000000000143A0                 ;org 143A0h
.rodata:00000000000143A0                 public _IO_stdin_used
.rodata:00000000000143A0 _IO_stdin_used  db    1
.rodata:00000000000143A1                 db    0
.rodata:00000000000143A2                 db    2
.rodata:00000000000143A3                 db    0
.rodata:00000000000143A4 ; const char aLineNumberOver[]
.rodata:00000000000143A4 aLineNumberOver db 'line number overflow',0
.rodata:00000000000143A4                                         ; DATA XREF: print_lineno:loc_252D↑o
.rodata:00000000000143B9 aNl             db 'nl',0               ; DATA XREF: main+194↑o
.rodata:00000000000143B9                                         ; usage+20F↑o ...
.rodata:00000000000143BC asc_143BC       db '[',0                ; DATA XREF: usage+21B↑o
.rodata:00000000000143BE aTestInvocation db 'test invocation',0  ; DATA XREF: usage+242↑o
.rodata:00000000000143CE aMultiCallInvoc db 'Multi-call invocation',0
.rodata:00000000000143CE                                         ; DATA XREF: usage+272↑o
.rodata:00000000000143CE                                         ; usage+36C↑o ...
.rodata:00000000000143E4 aSha224sum      db 'sha224sum',0        ; DATA XREF: usage+283↑o
.rodata:00000000000143EE aSha2Utilities  db 'sha2 utilities',0   ; DATA XREF: usage+28F↑o
.rodata:00000000000143FD aSha256sum      db 'sha256sum',0        ; DATA XREF: usage+222↑o
.rodata:0000000000014407 aSha384sum      db 'sha384sum',0        ; DATA XREF: usage+24E↑o
.rodata:0000000000014411 aSha512sum      db 'sha512sum',0        ; DATA XREF: usage+266↑o
.rodata:000000000001441B ; const char aSOnlineHelpS[]
.rodata:000000000001441B aSOnlineHelpS   db 0Ah                  ; DATA XREF: usage+2DA↑o
.rodata:000000000001441B                 db '%s online help: <%s>',0Ah,0
.rodata:0000000000014432 unk_14432       db  47h ; G             ; DATA XREF: main+18D↑o
.rodata:0000000000014432                                         ; usage+2F6↑o ...
.rodata:0000000000014433                 db  4Eh ; N
.rodata:0000000000014434                 db  55h ; U
.rodata:0000000000014435                 db  20h
.rodata:0000000000014436 ; const char domainname[]
.rodata:0000000000014436 domainname      db 'coreutils',0        ; DATA XREF: main+4E↑o
.rodata:0000000000014436                                         ; main+5A↑o ...
.rodata:0000000000014440 ; const char aEn[]
.rodata:0000000000014440 aEn             db 'en_',0              ; DATA XREF: usage+31D↑o
.rodata:0000000000014440                                         ; usage+3DE↑o ...
.rodata:0000000000014444 ; const char aFullDocumentat[]
.rodata:0000000000014444 aFullDocumentat db 'Full documentation <%s%s>',0Ah,0
.rodata:0000000000014444                                         ; DATA XREF: usage:loc_2CA9↑o
.rodata:0000000000014444                                         ; usage:loc_2D66↑o
.rodata:000000000001445F ; const char dirname[]
.rodata:000000000001445F dirname         db '/usr/local/share/locale',0
.rodata:000000000001445F                                         ; DATA XREF: main+47↑o
.rodata:0000000000014477 ; const char aInvalidStartin[]
.rodata:0000000000014477 aInvalidStartin db 'invalid starting line number',0
.rodata:0000000000014477                                         ; DATA XREF: main:loc_1F28↑o
.rodata:0000000000014494 ; const char aInvalidLineNum_0[]
.rodata:0000000000014494 aInvalidLineNum_0 db 'invalid line number increment',0
.rodata:0000000000014494                                         ; DATA XREF: main:loc_1F78↑o
.rodata:00000000000144B2 aLn             db 'ln',0               ; DATA XREF: main+F↑o
.rodata:00000000000144B2                                         ; .data:footer_type↓o ...
.rodata:00000000000144B5 ; const char s2[]
.rodata:00000000000144B5 s2              db 'rn',0               ; DATA XREF: main:loc_207F↑o
.rodata:00000000000144B8 ; const char aRz[]
.rodata:00000000000144B8 aRz             db 'rz',0               ; DATA XREF: main+40E↑o
.rodata:00000000000144BB aDavidMackenzie db 'David MacKenzie',0  ; DATA XREF: main+17F↑o
.rodata:00000000000144CB aScottBartram   db 'Scott Bartram',0    ; DATA XREF: main+186↑o
.rodata:00000000000144D9 ; const char shortopts[]
.rodata:00000000000144D9 shortopts       db 'h:b:f:v:i:pl:s:w:n:d:',0
.rodata:00000000000144D9                                         ; DATA XREF: main:loc_1D10↑o
.rodata:00000000000144EF aHeaderNumberin db 'header-numbering',0 ; DATA XREF: .data.rel.ro:longopts↓o
.rodata:0000000000014500 aBodyNumbering  db 'body-numbering',0   ; DATA XREF: .data.rel.ro:00000000002189E0↓o
.rodata:000000000001450F aFooterNumberin db 'footer-numbering',0 ; DATA XREF: .data.rel.ro:0000000000218A00↓o
.rodata:0000000000014520 aStartingLineNu db 'starting-line-number',0
.rodata:0000000000014520                                         ; DATA XREF: .data.rel.ro:0000000000218A20↓o
.rodata:0000000000014535 aLineIncrement  db 'line-increment',0   ; DATA XREF: .data.rel.ro:0000000000218A40↓o
.rodata:0000000000014544 aNoRenumber     db 'no-renumber',0      ; DATA XREF: .data.rel.ro:0000000000218A60↓o
.rodata:0000000000014550 aJoinBlankLines db 'join-blank-lines',0 ; DATA XREF: .data.rel.ro:0000000000218A80↓o
.rodata:0000000000014561 aNumberSeparato db 'number-separator',0 ; DATA XREF: .data.rel.ro:0000000000218AA0↓o
.rodata:0000000000014572 aNumberWidth    db 'number-width',0     ; DATA XREF: .data.rel.ro:0000000000218AC0↓o
.rodata:000000000001457F aNumberFormat   db 'number-format',0    ; DATA XREF: .data.rel.ro:0000000000218AE0↓o
.rodata:000000000001457F                                         ; .data:body_type↓o
.rodata:000000000001458D aSectionDelimit db 'section-delimiter',0
.rodata:000000000001458D                                         ; DATA XREF: .data.rel.ro:0000000000218B00↓o
.rodata:000000000001459F aHelp           db 'help',0             ; DATA XREF: .data.rel.ro:0000000000218B20↓o
.rodata:00000000000145A4 aVersion        db 'version',0          ; DATA XREF: .data.rel.ro:0000000000218B40↓o
.rodata:00000000000145AC unk_145AC       db    9                 ; DATA XREF: .data:separator_str↓o
.rodata:00000000000145AD ; const char locale[3]
.rodata:00000000000145AD locale          db 3 dup(0)             ; DATA XREF: main+36↑o
.rodata:00000000000145AD                                         ; main+26A↑o ...
.rodata:00000000000145B0 ; const char aErrorInRegular[]
.rodata:00000000000145B0 aErrorInRegular db 'error in regular expression search',0
.rodata:00000000000145B0                                         ; DATA XREF: nl_file:loc_293C↑o
.rodata:00000000000145D3                 align 8
.rodata:00000000000145D8 ; const char aTrySHelpForMor[]
.rodata:00000000000145D8 aTrySHelpForMor db 'Try ',27h,'%s --help',27h,' for more information.',0Ah,0
.rodata:00000000000145D8                                         ; DATA XREF: usage+2F↑o
.rodata:00000000000145FF                 align 20h
.rodata:0000000000014600 ; const char aUsageSOptionFi[]
.rodata:0000000000014600 aUsageSOptionFi db 'Usage: %s [OPTION]... [FILE]...',0Ah,0
.rodata:0000000000014600                                         ; DATA XREF: usage:loc_29CD↑o
.rodata:0000000000014621                 align 8
.rodata:0000000000014628 ; const char aWriteEachFileT[]
.rodata:0000000000014628 aWriteEachFileT db 'Write each FILE to standard output, with line numbers added.',0Ah
.rodata:0000000000014628                                         ; DATA XREF: usage+84↑o
.rodata:0000000000014628                 db 0
.rodata:0000000000014666                 align 8
.rodata:0000000000014668 ; const char aWithNoFileOrWh[]
.rodata:0000000000014668 aWithNoFileOrWh db 0Ah                  ; DATA XREF: usage+A9↑o
.rodata:0000000000014668                 db 'With no FILE, or when FILE is -, read standard input.',0Ah,0
.rodata:00000000000146A0 ; const char aMandatoryArgum[]
.rodata:00000000000146A0 aMandatoryArgum db 0Ah                  ; DATA XREF: usage+CE↑o
.rodata:00000000000146A0                 db 'Mandatory arguments to long options are mandatory for short optio'
.rodata:00000000000146A0                 db 'ns too.',0Ah,0
.rodata:00000000000146EB                 align 10h
.rodata:00000000000146F0 ; const char aBBodyNumbering[]
.rodata:00000000000146F0 aBBodyNumbering db '  -b, --body-numbering=STYLE      use STYLE for numbering body li'
.rodata:00000000000146F0                                         ; DATA XREF: usage+F3↑o
.rodata:00000000000146F0                 db 'nes',0Ah
.rodata:00000000000146F0                 db '  -d, --section-delimiter=CC      use CC for logical page delimit'
.rodata:00000000000146F0                 db 'ers',0Ah
.rodata:00000000000146F0                 db '  -f, --footer-numbering=STYLE    use STYLE for numbering footer '
.rodata:00000000000146F0                 db 'lines',0Ah,0
.rodata:00000000000147C2                 align 8
.rodata:00000000000147C8 ; const char aHHeaderNumberi[]
.rodata:00000000000147C8 aHHeaderNumberi db '  -h, --header-numbering=STYLE    use STYLE for numbering header '
.rodata:00000000000147C8                                         ; DATA XREF: usage+118↑o
.rodata:00000000000147C8                 db 'lines',0Ah
.rodata:00000000000147C8                 db '  -i, --line-increment=NUMBER     line number increment at each l'
.rodata:00000000000147C8                 db 'ine',0Ah
.rodata:00000000000147C8                 db '  -l, --join-blank-lines=NUMBER   group of NUMBER empty lines cou'
.rodata:00000000000147C8                 db 'nted as one',0Ah
.rodata:00000000000147C8                 db '  -n, --number-format=FORMAT      insert line numbers according t'
.rodata:00000000000147C8                 db 'o FORMAT',0Ah
.rodata:00000000000147C8                 db '  -p, --no-renumber               do not reset line numbers for e'
.rodata:00000000000147C8                 db 'ach section',0Ah
.rodata:00000000000147C8                 db '  -s, --number-separator=STRING   add STRING after (possible) lin'
.rodata:00000000000147C8                 db 'e number',0Ah,0
.rodata:0000000000014983                 align 8
.rodata:0000000000014988 ; const char aVStartingLineN[]
.rodata:0000000000014988 aVStartingLineN db '  -v, --starting-line-number=NUMBER  first line number for each s'
.rodata:0000000000014988                                         ; DATA XREF: usage+13D↑o
.rodata:0000000000014988                 db 'ection',0Ah
.rodata:0000000000014988                 db '  -w, --number-width=NUMBER       use NUMBER columns for line num'
.rodata:0000000000014988                 db 'bers',0Ah,0
.rodata:0000000000014A17                 align 8
.rodata:0000000000014A18 ; const char aHelpDisplayThi[]
.rodata:0000000000014A18 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.rodata:0000000000014A18                                         ; DATA XREF: usage+162↑o
.rodata:0000000000014A45                 align 8
.rodata:0000000000014A48 ; const char aVersionOutputV[]
.rodata:0000000000014A48 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.rodata:0000000000014A48                                         ; DATA XREF: usage+187↑o
.rodata:0000000000014A7E                 align 20h
.rodata:0000000000014A80 ; const char aDefaultOptions[]
.rodata:0000000000014A80 aDefaultOptions db 0Ah                  ; DATA XREF: usage+1AC↑o
.rodata:0000000000014A80                 db 'Default options are: -bt -d',27h,'\:',27h,' -fn -hn -i1 -l1 -n',27h
.rodata:0000000000014A80                 db 'rn',27h,' -s<TAB> -v1 -w6',0Ah
.rodata:0000000000014A80                 db 0Ah
.rodata:0000000000014A80                 db 'CC are two delimiter characters used to construct logical page de'
.rodata:0000000000014A80                 db 'limiters;',0Ah
.rodata:0000000000014A80                 db 'a missing second character implies ',27h,':',27h,'.',0Ah,0
.rodata:0000000000014B3D                 align 20h
.rodata:0000000000014B40 ; const char aStyleIsOneOfAN[]
.rodata:0000000000014B40 aStyleIsOneOfAN db 0Ah                  ; DATA XREF: usage+1D1↑o
.rodata:0000000000014B40                 db 'STYLE is one of:',0Ah
.rodata:0000000000014B40                 db 0Ah
.rodata:0000000000014B40                 db '  a      number all lines',0Ah
.rodata:0000000000014B40                 db '  t      number only nonempty lines',0Ah
.rodata:0000000000014B40                 db '  n      number no lines',0Ah
.rodata:0000000000014B40                 db '  pBRE   number only lines that contain a match for the basic reg'
.rodata:0000000000014B40                 db 'ular',0Ah
.rodata:0000000000014B40                 db '         expression, BRE',0Ah,0
.rodata:0000000000014C0A                 align 10h
.rodata:0000000000014C10 ; const char aFormatIsOneOfL[]
.rodata:0000000000014C10 aFormatIsOneOfL db 0Ah                  ; DATA XREF: usage+1F6↑o
.rodata:0000000000014C10                 db 'FORMAT is one of:',0Ah
.rodata:0000000000014C10                 db 0Ah
.rodata:0000000000014C10                 db '  ln     left justified, no leading zeros',0Ah
.rodata:0000000000014C10                 db '  rn     right justified, no leading zeros',0Ah
.rodata:0000000000014C10                 db '  rz     right justified, leading zeros',0Ah
.rodata:0000000000014C10                 db 0Ah,0
.rodata:0000000000014CA3                 align 8
.rodata:0000000000014CA8 aHttpsWwwGnuOrg db 'https://www.gnu.org/software/coreutils/',0
.rodata:0000000000014CA8                                         ; DATA XREF: usage+2EF↑o
.rodata:0000000000014CA8                                         ; usage+353↑o ...
.rodata:0000000000014CD0 ; const char aReportAnyTrans[]
.rodata:0000000000014CD0 aReportAnyTrans db 'Report any translation bugs to <https://translationproject.org/te'
.rodata:0000000000014CD0                                         ; DATA XREF: usage+447↑o
.rodata:0000000000014CD0                 db 'am/>',0Ah,0
.rodata:0000000000014D17                 align 8
.rodata:0000000000014D18 ; const char aOrAvailableLoc[]
.rodata:0000000000014D18 aOrAvailableLoc db 'or available locally via: info ',27h,'(coreutils) %s%s',27h,0Ah,0
.rodata:0000000000014D18                                         ; DATA XREF: usage:loc_2CEE↑o
.rodata:0000000000014D4B                 align 10h
.rodata:0000000000014D50 aInvalidHeaderN db 'invalid header numbering style: %s',0
.rodata:0000000000014D50                                         ; DATA XREF: main+1F6↑o
.rodata:0000000000014D73                 align 8
.rodata:0000000000014D78 ; const char aInvalidBodyNum[]
.rodata:0000000000014D78 aInvalidBodyNum db 'invalid body numbering style: %s',0
.rodata:0000000000014D78                                         ; DATA XREF: main+376↑o
.rodata:0000000000014D99                 align 20h
.rodata:0000000000014DA0 aInvalidFooterN db 'invalid footer numbering style: %s',0
.rodata:0000000000014DA0                                         ; DATA XREF: main+23E↑o
.rodata:0000000000014DC3                 align 8
.rodata:0000000000014DC8 ; const char aInvalidLineNum_1[]
.rodata:0000000000014DC8 aInvalidLineNum_1 db 'invalid line number of blank lines',0
.rodata:0000000000014DC8                                         ; DATA XREF: main:loc_2038↑o
.rodata:0000000000014DEB                 align 10h
.rodata:0000000000014DF0 ; const char msgid[]
.rodata:0000000000014DF0 msgid           db 'invalid line number field width',0
.rodata:0000000000014DF0                                         ; DATA XREF: main:loc_1EE0↑o
.rodata:0000000000014E10 aInvalidLineNum_2 db 'invalid line numbering format: %s',0
.rodata:0000000000014E10                                         ; DATA XREF: main+64A↑o
.rodata:0000000000014E32                 align 8
.rodata:0000000000014E38 DEFAULT_SECTION_DELIMITERS db '\:',0    ; DATA XREF: .data:section_del↓o
.rodata:0000000000014E3B                 align 20h
.rodata:0000000000014E40 FORMAT_LEFT     db '%-*ld%s',0          ; DATA XREF: main+147↑o
.rodata:0000000000014E48 FORMAT_RIGHT_LZ db '%0*ld%s',0          ; DATA XREF: main+42D↑o
.rodata:0000000000014E50 FORMAT_RIGHT_NOLZ db '%*ld%s',0         ; DATA XREF: main+4↑o
.rodata:0000000000014E50                                         ; .data:lineno_format↓o
.rodata:0000000000014E57 a831            db '8.31',0             ; DATA XREF: .data:Version↓o
.rodata:0000000000014E5C ; const char aWriteError[]
.rodata:0000000000014E5C aWriteError     db 'write error',0      ; DATA XREF: close_stdout:loc_2E43↑o
.rodata:0000000000014E68 ; const char aS[4]
.rodata:0000000000014E68 aS              db '%s: '               ; DATA XREF: close_stdout+6C↑o
.rodata:0000000000014E68                                         ; xnumtoimax+7F↑o
.rodata:0000000000014E6C ; const char format[]
.rodata:0000000000014E6C format          dd offset loc_7325      ; DATA XREF: build_type_arg:loc_24BD↑o
.rodata:0000000000014E6C                                         ; nl_file+3B8↑o ...
.rodata:0000000000014E70 aANullArgv0WasP db 'A NULL argv[0] was passed through an exec system call.',0Ah,0
.rodata:0000000000014E70                                         ; DATA XREF: set_program_name+84↑o
.rodata:0000000000014EA8 aLibs           db '/.libs/',0          ; DATA XREF: set_program_name+2C↑o
.rodata:0000000000014EB0 aLt             db 'lt-',0              ; DATA XREF: set_program_name+44↑o
.rodata:0000000000014EB0                                         ; main+627↑o ...
.rodata:0000000000014EB4 unk_14EB4       db 0E2h                 ; DATA XREF: gettext_quote+CE↑o
.rodata:0000000000014EB5                 db  80h
.rodata:0000000000014EB6                 db  98h
.rodata:0000000000014EB7                 db    0
.rodata:0000000000014EB8 unk_14EB8       db 0E2h                 ; DATA XREF: gettext_quote+D5↑o
.rodata:0000000000014EB9                 db  80h
.rodata:0000000000014EBA                 db  99h
.rodata:0000000000014EBB                 db    0
.rodata:0000000000014EBC unk_14EBC       db 0A1h                 ; DATA XREF: gettext_quote+74↑o
.rodata:0000000000014EBD                 db    7
.rodata:0000000000014EBE                 db  65h ; e
.rodata:0000000000014EBF                 db    0
.rodata:0000000000014EC0 unk_14EC0       db 0A1h                 ; DATA XREF: gettext_quote+7B↑o
.rodata:0000000000014EC1                 db 0AFh
.rodata:0000000000014EC2                 db    0
.rodata:0000000000014EC3 unk_14EC3       db  22h ; "             ; DATA XREF: gettext_quote:loc_30F0↑o
.rodata:0000000000014EC3                                         ; quotearg_buffer_restyled:loc_3EAB↑o ...
.rodata:0000000000014EC4                 db    0
.rodata:0000000000014EC5 ; const char asc_14EC5[2]
.rodata:0000000000014EC5 asc_14EC5       db 27h,0                ; DATA XREF: gettext_quote+27↑o
.rodata:0000000000014EC5                                         ; quotearg_buffer_restyled:loc_3273↑o ...
.rodata:0000000000014EC7 ; const char asc_14EC7[2]
.rodata:0000000000014EC7 asc_14EC7       db '`',0                ; DATA XREF: quotearg_buffer_restyled+D9B↑o
.rodata:0000000000014EC7                                         ; quotearg_buffer_restyled+DB6↑o
.rodata:0000000000014EC9 aLiteral        db 'literal',0          ; DATA XREF: .data.rel.ro:quoting_style_args↓o
.rodata:0000000000014ED1 aShell          db 'shell',0            ; DATA XREF: .data.rel.ro:0000000000218B88↓o
.rodata:0000000000014ED7 aShellAlways    db 'shell-always',0     ; DATA XREF: .data.rel.ro:0000000000218B90↓o
.rodata:0000000000014EE4 aShellEscape    db 'shell-escape',0     ; DATA XREF: .data.rel.ro:0000000000218B98↓o
.rodata:0000000000014EE4                                         ; .data.rel.ro:0000000000218BB8↓o
.rodata:0000000000014EF1 aShellEscapeAlw db 'shell-escape-always',0
.rodata:0000000000014EF1                                         ; DATA XREF: .data.rel.ro:0000000000218BA0↓o
.rodata:0000000000014F05 aC_0            db 'c',0                ; DATA XREF: .data.rel.ro:0000000000218BA8↓o
.rodata:0000000000014F07 aCMaybe         db 'c-maybe',0          ; DATA XREF: .data.rel.ro:0000000000218BB0↓o
.rodata:0000000000014F0F aClocale        db 'clocale',0          ; DATA XREF: .data.rel.ro:0000000000218BC8↓o
.rodata:0000000000014F17                 align 20h
.rodata:0000000000014F20 jpt_3251        dd offset loc_3FFA - 14F20h
.rodata:0000000000014F20                                         ; DATA XREF: quotearg_buffer_restyled+80↑o
.rodata:0000000000014F20                                         ; quotearg_buffer_restyled+8A↑r
.rodata:0000000000014F20                 dd offset loc_3253 - 14F20h ; jump table for switch statement
.rodata:0000000000014F20                 dd offset loc_4228 - 14F20h
.rodata:0000000000014F20                 dd offset loc_4034 - 14F20h
.rodata:0000000000014F20                 dd offset loc_3E24 - 14F20h
.rodata:0000000000014F20                 dd offset loc_3E80 - 14F20h
.rodata:0000000000014F20                 dd offset loc_3ED5 - 14F20h
.rodata:0000000000014F20                 dd offset loc_3F1A - 14F20h
.rodata:0000000000014F20                 dd offset loc_3F54 - 14F20h
.rodata:0000000000014F20                 dd offset loc_3F54 - 14F20h
.rodata:0000000000014F20                 dd offset loc_3F54 - 14F20h
.rodata:0000000000014F4C jpt_33AE        dd offset loc_35D0 - 14F4Ch, offset def_33AE - 14F4Ch
.rodata:0000000000014F4C                                         ; DATA XREF: quotearg_buffer_restyled+1DD↑o
.rodata:0000000000014F4C                                         ; quotearg_buffer_restyled+1E7↑r
.rodata:0000000000014F4C                 dd offset def_33AE - 14F4Ch, offset def_33AE - 14F4Ch ; jump table for switch statement
.rodata:0000000000014F4C                 dd offset def_33AE - 14F4Ch, offset def_33AE - 14F4Ch
.rodata:0000000000014F4C                 dd offset def_33AE - 14F4Ch, offset loc_3610 - 14F4Ch
.rodata:0000000000014F4C                 dd offset loc_3518 - 14F4Ch, offset loc_34D8 - 14F4Ch
.rodata:0000000000014F4C                 dd offset loc_36A0 - 14F4Ch, offset loc_3690 - 14F4Ch
.rodata:0000000000014F4C                 dd offset loc_3680 - 14F4Ch, offset loc_3670 - 14F4Ch
.rodata:0000000000014F4C                 dd offset def_33AE - 14F4Ch, offset def_33AE - 14F4Ch
.rodata:0000000000014F4C                 dd offset def_33AE - 14F4Ch, offset def_33AE - 14F4Ch
.rodata:0000000000014F4C                 dd offset def_33AE - 14F4Ch, offset def_33AE - 14F4Ch
.rodata:0000000000014F4C                 dd offset def_33AE - 14F4Ch, offset def_33AE - 14F4Ch
.rodata:0000000000014F4C                 dd offset def_33AE - 14F4Ch, offset def_33AE - 14F4Ch
.rodata:0000000000014F4C                 dd offset def_33AE - 14F4Ch, offset def_33AE - 14F4Ch
.rodata:0000000000014F4C                 dd offset def_33AE - 14F4Ch, offset def_33AE - 14F4Ch
.rodata:0000000000014F4C                 dd offset def_33AE - 14F4Ch, offset def_33AE - 14F4Ch
.rodata:0000000000014F4C                 dd offset def_33AE - 14F4Ch, offset def_33AE - 14F4Ch
.rodata:0000000000014F4C                 dd offset loc_3660 - 14F4Ch, offset loc_3650 - 14F4Ch
.rodata:0000000000014F4C                 dd offset loc_3650 - 14F4Ch, offset loc_3620 - 14F4Ch
.rodata:0000000000014F4C                 dd offset loc_3650 - 14F4Ch, offset loc_35F8 - 14F4Ch
.rodata:0000000000014F4C                 dd offset loc_3650 - 14F4Ch, offset loc_34B3 - 14F4Ch
.rodata:0000000000014F4C                 dd offset loc_3650 - 14F4Ch, offset loc_3650 - 14F4Ch
.rodata:0000000000014F4C                 dd offset loc_3650 - 14F4Ch, offset loc_35F8 - 14F4Ch
.rodata:0000000000014F4C                 dd offset loc_35F8 - 14F4Ch, offset loc_35F8 - 14F4Ch
.rodata:0000000000014F4C                 dd offset loc_35F8 - 14F4Ch, offset loc_35F8 - 14F4Ch
.rodata:0000000000014F4C                 dd offset loc_35F8 - 14F4Ch, offset loc_35F8 - 14F4Ch
.rodata:0000000000014F4C                 dd offset loc_35F8 - 14F4Ch, offset loc_35F8 - 14F4Ch
.rodata:0000000000014F4C                 dd offset loc_35F8 - 14F4Ch, offset loc_35F8 - 14F4Ch
.rodata:0000000000014F4C                 dd offset loc_35F8 - 14F4Ch, offset loc_35F8 - 14F4Ch
.rodata:0000000000014F4C                 dd offset loc_35F8 - 14F4Ch, offset loc_35F8 - 14F4Ch
.rodata:0000000000014F4C                 dd offset loc_35F8 - 14F4Ch, offset loc_3650 - 14F4Ch
.rodata:0000000000014F4C                 dd offset loc_3650 - 14F4Ch, offset loc_3650 - 14F4Ch
.rodata:0000000000014F4C                 dd offset loc_3650 - 14F4Ch, offset loc_3483 - 14F4Ch
.rodata:0000000000014F4C                 dd offset def_33AE - 14F4Ch, offset loc_35F8 - 14F4Ch
.rodata:0000000000014F4C                 dd offset loc_35F8 - 14F4Ch, offset loc_35F8 - 14F4Ch
.rodata:0000000000014F4C                 dd offset loc_35F8 - 14F4Ch, offset loc_35F8 - 14F4Ch
.rodata:0000000000014F4C                 dd offset loc_35F8 - 14F4Ch, offset loc_35F8 - 14F4Ch
.rodata:0000000000014F4C                 dd offset loc_35F8 - 14F4Ch, offset loc_35F8 - 14F4Ch
.rodata:0000000000014F4C                 dd offset loc_35F8 - 14F4Ch, offset loc_35F8 - 14F4Ch
.rodata:0000000000014F4C                 dd offset loc_35F8 - 14F4Ch, offset loc_35F8 - 14F4Ch
.rodata:0000000000014F4C                 dd offset loc_35F8 - 14F4Ch, offset loc_35F8 - 14F4Ch
.rodata:0000000000014F4C                 dd offset loc_35F8 - 14F4Ch, offset loc_35F8 - 14F4Ch
.rodata:0000000000014F4C                 dd offset loc_35F8 - 14F4Ch, offset loc_35F8 - 14F4Ch
.rodata:0000000000014F4C                 dd offset loc_35F8 - 14F4Ch, offset loc_35F8 - 14F4Ch
.rodata:0000000000014F4C                 dd offset loc_35F8 - 14F4Ch, offset loc_35F8 - 14F4Ch
.rodata:0000000000014F4C                 dd offset loc_35F8 - 14F4Ch, offset loc_35F8 - 14F4Ch
.rodata:0000000000014F4C                 dd offset loc_35F8 - 14F4Ch, offset loc_3650 - 14F4Ch
.rodata:0000000000014F4C                 dd offset loc_3528 - 14F4Ch, offset loc_35F8 - 14F4Ch
.rodata:0000000000014F4C                 dd offset loc_3650 - 14F4Ch, offset loc_35F8 - 14F4Ch
.rodata:0000000000014F4C                 dd offset loc_3650 - 14F4Ch, offset loc_35F8 - 14F4Ch
.rodata:0000000000014F4C                 dd offset loc_35F8 - 14F4Ch, offset loc_35F8 - 14F4Ch
.rodata:0000000000014F4C                 dd offset loc_35F8 - 14F4Ch, offset loc_35F8 - 14F4Ch
.rodata:0000000000014F4C                 dd offset loc_35F8 - 14F4Ch, offset loc_35F8 - 14F4Ch
.rodata:0000000000014F4C                 dd offset loc_35F8 - 14F4Ch, offset loc_35F8 - 14F4Ch
.rodata:0000000000014F4C                 dd offset loc_35F8 - 14F4Ch, offset loc_35F8 - 14F4Ch
.rodata:0000000000014F4C                 dd offset loc_35F8 - 14F4Ch, offset loc_35F8 - 14F4Ch
.rodata:0000000000014F4C                 dd offset loc_35F8 - 14F4Ch, offset loc_35F8 - 14F4Ch
.rodata:0000000000014F4C                 dd offset loc_35F8 - 14F4Ch, offset loc_35F8 - 14F4Ch
.rodata:0000000000014F4C                 dd offset loc_35F8 - 14F4Ch, offset loc_35F8 - 14F4Ch
.rodata:0000000000014F4C                 dd offset loc_35F8 - 14F4Ch, offset loc_35F8 - 14F4Ch
.rodata:0000000000014F4C                 dd offset loc_35F8 - 14F4Ch, offset loc_35F8 - 14F4Ch
.rodata:0000000000014F4C                 dd offset loc_35F8 - 14F4Ch, offset loc_35F8 - 14F4Ch
.rodata:0000000000014F4C                 dd offset loc_35F8 - 14F4Ch, offset loc_33B3 - 14F4Ch
.rodata:0000000000014F4C                 dd offset loc_3650 - 14F4Ch, offset loc_33B3 - 14F4Ch
.rodata:0000000000014F4C                 dd offset loc_3620 - 14F4Ch
.rodata:0000000000015148 jpt_373A        dd offset loc_37A0 - 15148h, offset def_373A - 15148h
.rodata:0000000000015148                                         ; DATA XREF: quotearg_buffer_restyled+569↑o
.rodata:0000000000015148                                         ; quotearg_buffer_restyled+573↑r
.rodata:0000000000015148                 dd offset def_373A - 15148h, offset def_373A - 15148h ; jump table for switch statement
.rodata:0000000000015148                 dd offset def_373A - 15148h, offset def_373A - 15148h
.rodata:0000000000015148                 dd offset def_373A - 15148h, offset loc_3790 - 15148h
.rodata:0000000000015148                 dd offset loc_38E0 - 15148h, offset loc_38C8 - 15148h
.rodata:0000000000015148                 dd offset loc_3778 - 15148h, offset loc_38B8 - 15148h
.rodata:0000000000015148                 dd offset loc_3760 - 15148h, offset loc_38A0 - 15148h
.rodata:0000000000015148                 dd offset def_373A - 15148h, offset def_373A - 15148h
.rodata:0000000000015148                 dd offset def_373A - 15148h, offset def_373A - 15148h
.rodata:0000000000015148                 dd offset def_373A - 15148h, offset def_373A - 15148h
.rodata:0000000000015148                 dd offset def_373A - 15148h, offset def_373A - 15148h
.rodata:0000000000015148                 dd offset def_373A - 15148h, offset def_373A - 15148h
.rodata:0000000000015148                 dd offset def_373A - 15148h, offset def_373A - 15148h
.rodata:0000000000015148                 dd offset def_373A - 15148h, offset def_373A - 15148h
.rodata:0000000000015148                 dd offset def_373A - 15148h, offset def_373A - 15148h
.rodata:0000000000015148                 dd offset def_373A - 15148h, offset def_373A - 15148h
.rodata:0000000000015148                 dd offset loc_3888 - 15148h, offset loc_3870 - 15148h
.rodata:0000000000015148                 dd offset loc_3870 - 15148h, offset loc_3858 - 15148h
.rodata:0000000000015148                 dd offset loc_3870 - 15148h, offset loc_3840 - 15148h
.rodata:0000000000015148                 dd offset loc_3870 - 15148h, offset loc_34B0 - 15148h
.rodata:0000000000015148                 dd offset loc_3870 - 15148h, offset loc_3870 - 15148h
.rodata:0000000000015148                 dd offset loc_3870 - 15148h, offset loc_3840 - 15148h
.rodata:0000000000015148                 dd offset loc_3840 - 15148h, offset loc_3840 - 15148h
.rodata:0000000000015148                 dd offset loc_3840 - 15148h, offset loc_3840 - 15148h
.rodata:0000000000015148                 dd offset loc_3840 - 15148h, offset loc_3840 - 15148h
.rodata:0000000000015148                 dd offset loc_3840 - 15148h, offset loc_3840 - 15148h
.rodata:0000000000015148                 dd offset loc_3840 - 15148h, offset loc_3840 - 15148h
.rodata:0000000000015148                 dd offset loc_3840 - 15148h, offset loc_3840 - 15148h
.rodata:0000000000015148                 dd offset loc_3840 - 15148h, offset loc_3840 - 15148h
.rodata:0000000000015148                 dd offset loc_3840 - 15148h, offset loc_3870 - 15148h
.rodata:0000000000015148                 dd offset loc_3870 - 15148h, offset loc_3870 - 15148h
.rodata:0000000000015148                 dd offset loc_3870 - 15148h, offset loc_3480 - 15148h
.rodata:0000000000015148                 dd offset def_373A - 15148h, offset loc_3840 - 15148h
.rodata:0000000000015148                 dd offset loc_3840 - 15148h, offset loc_3840 - 15148h
.rodata:0000000000015148                 dd offset loc_3840 - 15148h, offset loc_3840 - 15148h
.rodata:0000000000015148                 dd offset loc_3840 - 15148h, offset loc_3840 - 15148h
.rodata:0000000000015148                 dd offset loc_3840 - 15148h, offset loc_3840 - 15148h
.rodata:0000000000015148                 dd offset loc_3840 - 15148h, offset loc_3840 - 15148h
.rodata:0000000000015148                 dd offset loc_3840 - 15148h, offset loc_3840 - 15148h
.rodata:0000000000015148                 dd offset loc_3840 - 15148h, offset loc_3840 - 15148h
.rodata:0000000000015148                 dd offset loc_3840 - 15148h, offset loc_3840 - 15148h
.rodata:0000000000015148                 dd offset loc_3840 - 15148h, offset loc_3840 - 15148h
.rodata:0000000000015148                 dd offset loc_3840 - 15148h, offset loc_3840 - 15148h
.rodata:0000000000015148                 dd offset loc_3840 - 15148h, offset loc_3840 - 15148h
.rodata:0000000000015148                 dd offset loc_3840 - 15148h, offset loc_3840 - 15148h
.rodata:0000000000015148                 dd offset loc_3840 - 15148h, offset loc_3870 - 15148h
.rodata:0000000000015148                 dd offset loc_3740 - 15148h, offset loc_3840 - 15148h
.rodata:0000000000015148                 dd offset loc_3870 - 15148h, offset loc_3840 - 15148h
.rodata:0000000000015148                 dd offset loc_3870 - 15148h, offset loc_3840 - 15148h
.rodata:0000000000015148                 dd offset loc_3840 - 15148h, offset loc_3840 - 15148h
.rodata:0000000000015148                 dd offset loc_3840 - 15148h, offset loc_3840 - 15148h
.rodata:0000000000015148                 dd offset loc_3840 - 15148h, offset loc_3840 - 15148h
.rodata:0000000000015148                 dd offset loc_3840 - 15148h, offset loc_3840 - 15148h
.rodata:0000000000015148                 dd offset loc_3840 - 15148h, offset loc_3840 - 15148h
.rodata:0000000000015148                 dd offset loc_3840 - 15148h, offset loc_3840 - 15148h
.rodata:0000000000015148                 dd offset loc_3840 - 15148h, offset loc_3840 - 15148h
.rodata:0000000000015148                 dd offset loc_3840 - 15148h, offset loc_3840 - 15148h
.rodata:0000000000015148                 dd offset loc_3840 - 15148h, offset loc_3840 - 15148h
.rodata:0000000000015148                 dd offset loc_3840 - 15148h, offset loc_3840 - 15148h
.rodata:0000000000015148                 dd offset loc_3840 - 15148h, offset loc_3840 - 15148h
.rodata:0000000000015148                 dd offset loc_3840 - 15148h, offset loc_3840 - 15148h
.rodata:0000000000015148                 dd offset loc_3840 - 15148h, offset loc_33B0 - 15148h
.rodata:0000000000015148                 dd offset loc_3870 - 15148h, offset loc_33B0 - 15148h
.rodata:0000000000015148                 dd offset loc_3858 - 15148h
.rodata:0000000000015344                 align 20h
.rodata:0000000000015360                 public quoting_style_vals
.rodata:0000000000015360 quoting_style_vals db    0
.rodata:0000000000015361                 db    0
.rodata:0000000000015362                 db    0
.rodata:0000000000015363                 db    0
.rodata:0000000000015364                 db    1
.rodata:0000000000015365                 db    0
.rodata:0000000000015366                 db    0
.rodata:0000000000015367                 db    0
.rodata:0000000000015368                 db    2
.rodata:0000000000015369                 db    0
.rodata:000000000001536A                 db    0
.rodata:000000000001536B                 db    0
.rodata:000000000001536C                 db    3
.rodata:000000000001536D                 db    0
.rodata:000000000001536E                 db    0
.rodata:000000000001536F                 db    0
.rodata:0000000000015370                 db    4
.rodata:0000000000015371                 db    0
.rodata:0000000000015372                 db    0
.rodata:0000000000015373                 db    0
.rodata:0000000000015374                 db    5
.rodata:0000000000015375                 db    0
.rodata:0000000000015376                 db    0
.rodata:0000000000015377                 db    0
.rodata:0000000000015378                 db    6
.rodata:0000000000015379                 db    0
.rodata:000000000001537A                 db    0
.rodata:000000000001537B                 db    0
.rodata:000000000001537C                 db    7
.rodata:000000000001537D                 db    0
.rodata:000000000001537E                 db    0
.rodata:000000000001537F                 db    0
.rodata:0000000000015380                 db    8
.rodata:0000000000015381                 db    0
.rodata:0000000000015382                 db    0
.rodata:0000000000015383                 db    0
.rodata:0000000000015384                 db    9
.rodata:0000000000015385                 db    0
.rodata:0000000000015386                 db    0
.rodata:0000000000015387                 db    0
.rodata:0000000000015388 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: version_etc_arn+23↑o
.rodata:0000000000015394 aSS             db '%s %s',0Ah,0        ; DATA XREF: version_etc_arn+13E↑o
.rodata:000000000001539B ; const char aC[]
.rodata:000000000001539B aC              db '(C)',0              ; DATA XREF: version_etc_arn:loc_4D9C↑o
.rodata:000000000001539F ; const char aWrittenByS[]
.rodata:000000000001539F aWrittenByS     db 'Written by %s.',0Ah,0
.rodata:000000000001539F                                         ; DATA XREF: version_etc_arn+1BB↑o
.rodata:00000000000153AF ; const char aWrittenBySAndS[]
.rodata:00000000000153AF aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.rodata:00000000000153AF                                         ; DATA XREF: version_etc_arn+1FC↑o
.rodata:00000000000153C6 ; const char aWrittenBySSAnd[]
.rodata:00000000000153C6 aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.rodata:00000000000153C6                                         ; DATA XREF: version_etc_arn+248↑o
.rodata:00000000000153E2 ; const char aReportBugsToS[]
.rodata:00000000000153E2 aReportBugsToS  db 0Ah                  ; DATA XREF: emit_bug_reporting_address+1↑o
.rodata:00000000000153E2                 db 'Report bugs to: %s',0Ah,0
.rodata:00000000000153F7 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.rodata:00000000000153F7                                         ; DATA XREF: emit_bug_reporting_address+14↑o
.rodata:000000000001540D ; const char aSHomePageS[]
.rodata:000000000001540D aSHomePageS     db '%s home page: <%s>',0Ah,0
.rodata:000000000001540D                                         ; DATA XREF: emit_bug_reporting_address+2A↑o
.rodata:0000000000015421                 align 8
.rodata:0000000000015428 ; const char aLicenseGplv3Gn[]
.rodata:0000000000015428 aLicenseGplv3Gn db 0Ah                  ; DATA XREF: version_etc_arn+6E↑o
.rodata:0000000000015428                 db 'License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licen'
.rodata:0000000000015428                 db 'ses/gpl.html>.',0Ah
.rodata:0000000000015428                 db 'This is free software: you are free to change and redistribute it'
.rodata:0000000000015428                 db '.',0Ah
.rodata:0000000000015428                 db 'There is NO WARRANTY, to the extent permitted by law.',0Ah
.rodata:0000000000015428                 db 0Ah,0
.rodata:00000000000154F4                 align 8
.rodata:00000000000154F8 ; const char aWrittenBySSSAn[]
.rodata:00000000000154F8 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000154F8                                         ; DATA XREF: version_etc_arn:loc_4FF0↑o
.rodata:00000000000154F8                 db 'and %s.',0Ah,0
.rodata:0000000000015518 ; const char aWrittenBySSSSA[]
.rodata:0000000000015518 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000015518                                         ; DATA XREF: version_etc_arn+2EC↑o
.rodata:0000000000015518                 db '%s, and %s.',0Ah,0
.rodata:000000000001553C                 align 20h
.rodata:0000000000015540 ; const char aWrittenBySSSSS_1[]
.rodata:0000000000015540 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000015540                                         ; DATA XREF: version_etc_arn+320↑o
.rodata:0000000000015540                 db '%s, %s, and %s.',0Ah,0
.rodata:0000000000015568 ; const char aWrittenBySSSSS_2[]
.rodata:0000000000015568 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000015568                                         ; DATA XREF: version_etc_arn+388↑o
.rodata:0000000000015568                 db '%s, %s, %s, and %s.',0Ah,0
.rodata:0000000000015594                 align 8
.rodata:0000000000015598 ; const char aWrittenBySSSSS[]
.rodata:0000000000015598 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000015598                                         ; DATA XREF: version_etc_arn+B8↑o
.rodata:0000000000015598                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000015598                 db 'and %s.',0Ah,0
.rodata:00000000000155C8 ; const char aWrittenBySSSSS_0[]
.rodata:00000000000155C8 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000155C8                                         ; DATA XREF: version_etc_arn+168↑o
.rodata:00000000000155C8                 db '%s, %s, %s, %s,',0Ah
.rodata:00000000000155C8                 db '%s, and %s.',0Ah,0
.rodata:00000000000155FC                 align 20h
.rodata:0000000000015600 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000015600                                         ; DATA XREF: version_etc_arn+3E5↑o
.rodata:0000000000015600                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000015600                 db '%s, %s, and others.',0Ah,0
.rodata:000000000001563C                 align 20h
.rodata:0000000000015640 ; const char aGeneralHelpUsi[]
.rodata:0000000000015640 aGeneralHelpUsi db 'General help using GNU software: <https://www.gnu.org/gethelp/>',0Ah
.rodata:0000000000015640                                         ; DATA XREF: emit_bug_reporting_address+61↑o
.rodata:0000000000015640                 db 0
.rodata:0000000000015681                 align 4
.rodata:0000000000015684 jpt_4E04        dd offset loc_4E86 - 15684h
.rodata:0000000000015684                                         ; DATA XREF: version_etc_arn+96↑o
.rodata:0000000000015684                                         ; version_etc_arn+9D↑r
.rodata:0000000000015684                 dd offset loc_4F18 - 15684h ; jump table for switch statement
.rodata:0000000000015684                 dd offset loc_4F58 - 15684h
.rodata:0000000000015684                 dd offset loc_4FA0 - 15684h
.rodata:0000000000015684                 dd offset loc_4FF0 - 15684h
.rodata:0000000000015684                 dd offset loc_5048 - 15684h
.rodata:0000000000015684                 dd offset loc_5078 - 15684h
.rodata:0000000000015684                 dd offset loc_50E0 - 15684h
.rodata:0000000000015684                 dd offset loc_4E10 - 15684h
.rodata:0000000000015684                 dd offset loc_4EC0 - 15684h
.rodata:00000000000156AC                 align 20h
.rodata:00000000000156C0                 public version_etc_copyright
.rodata:00000000000156C0 version_etc_copyright db 'Copyright %s %d Free Software Foundation, Inc.',0
.rodata:00000000000156C0                                         ; DATA XREF: version_etc_arn+4F↑o
.rodata:00000000000156EF ; const char aMemoryExhauste[]
.rodata:00000000000156EF aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: xalloc_die↑o
.rodata:0000000000015700 ; const char file[]
.rodata:0000000000015700 file            db '../coreutils-8.31/lib/xstrtol.c',0
.rodata:0000000000015700                                         ; DATA XREF: xstrtoimax+696↑o
.rodata:0000000000015720 ; const char assertion[]
.rodata:0000000000015720 assertion       db '0 <= strtol_base && strtol_base <= 36',0
.rodata:0000000000015720                                         ; DATA XREF: xstrtoimax+69D↑o
.rodata:0000000000015746                 align 8
.rodata:0000000000015748 jpt_590E        dd offset loc_5C40 - 15748h, offset def_590E - 15748h
.rodata:0000000000015748                                         ; DATA XREF: xstrtoimax+19C↑o
.rodata:0000000000015748                                         ; xstrtoimax+1A7↑r
.rodata:0000000000015748                 dd offset def_590E - 15748h, offset loc_5B70 - 15748h ; jump table for switch statement
.rodata:0000000000015748                 dd offset def_590E - 15748h, offset loc_5B10 - 15748h
.rodata:0000000000015748                 dd offset def_590E - 15748h, offset def_590E - 15748h
.rodata:0000000000015748                 dd offset def_590E - 15748h, offset loc_5AD0 - 15748h
.rodata:0000000000015748                 dd offset def_590E - 15748h, offset loc_5910 - 15748h
.rodata:0000000000015748                 dd offset def_590E - 15748h, offset def_590E - 15748h
.rodata:0000000000015748                 dd offset loc_5BD8 - 15748h, offset def_590E - 15748h
.rodata:0000000000015748                 dd offset def_590E - 15748h, offset def_590E - 15748h
.rodata:0000000000015748                 dd offset loc_5C70 - 15748h, offset def_590E - 15748h
.rodata:0000000000015748                 dd offset def_590E - 15748h, offset def_590E - 15748h
.rodata:0000000000015748                 dd offset def_590E - 15748h, offset loc_5A60 - 15748h
.rodata:0000000000015748                 dd offset loc_59F0 - 15748h, offset def_590E - 15748h
.rodata:0000000000015748                 dd offset def_590E - 15748h, offset def_590E - 15748h
.rodata:0000000000015748                 dd offset def_590E - 15748h, offset def_590E - 15748h
.rodata:0000000000015748                 dd offset def_590E - 15748h, offset def_590E - 15748h
.rodata:0000000000015748                 dd offset loc_59C0 - 15748h, offset loc_5970 - 15748h
.rodata:0000000000015748                 dd offset def_590E - 15748h, offset def_590E - 15748h
.rodata:0000000000015748                 dd offset def_590E - 15748h, offset loc_5B10 - 15748h
.rodata:0000000000015748                 dd offset def_590E - 15748h, offset def_590E - 15748h
.rodata:0000000000015748                 dd offset def_590E - 15748h, offset loc_5AD0 - 15748h
.rodata:0000000000015748                 dd offset def_590E - 15748h, offset loc_5910 - 15748h
.rodata:0000000000015748                 dd offset def_590E - 15748h, offset def_590E - 15748h
.rodata:0000000000015748                 dd offset def_590E - 15748h, offset def_590E - 15748h
.rodata:0000000000015748                 dd offset def_590E - 15748h, offset def_590E - 15748h
.rodata:0000000000015748                 dd offset loc_5C70 - 15748h, offset def_590E - 15748h
.rodata:0000000000015748                 dd offset def_590E - 15748h, offset loc_5990 - 15748h
.rodata:0000000000015820 ; const char _PRETTY_FUNCTION___4162[]
.rodata:0000000000015820 __PRETTY_FUNCTION___4162 db 'xstrtoimax',0
.rodata:0000000000015820                                         ; DATA XREF: xstrtoimax:loc_5DEF↑o
.rodata:000000000001582B                 align 10h
.rodata:0000000000015830 ; const char aCoreutils831Li_0[]
.rodata:0000000000015830 aCoreutils831Li_0 db '../coreutils-8.31/lib/regexec.c',0
.rodata:0000000000015830                                         ; DATA XREF: pop_fail_stack_isra_25+7C↑o
.rodata:0000000000015830                                         ; re_search_internal+1034↑o ...
.rodata:0000000000015850 ; const char aCoreutils831Li_1[]
.rodata:0000000000015850 aCoreutils831Li_1 db '../coreutils-8.31/lib/regcomp.c',0
.rodata:0000000000015850                                         ; DATA XREF: parse_expression+1301↑o
.rodata:0000000000015850                                         ; re_compile_internal+962↑o ...
.rodata:0000000000015870 ; const char aIsEpsilonNodeN[]
.rodata:0000000000015870 aIsEpsilonNodeN db '!IS_EPSILON_NODE (node->token.type)',0
.rodata:0000000000015870                                         ; DATA XREF: re_compile_internal+10C0↑o
.rodata:0000000000015894                 align 8
.rodata:0000000000015898 ; const char aNum0[]
.rodata:0000000000015898 aNum0           db 'num >= 0',0         ; DATA XREF: pop_fail_stack_isra_25+83↑o
.rodata:0000000000015898                                         ; parse_expression+1308↑o
.rodata:00000000000158A1 aAlpha          db 'alpha',0            ; DATA XREF: build_charclass_isra_29+41↑o
.rodata:00000000000158A1                                         ; build_charclass_isra_29+152↑o ...
.rodata:00000000000158A7 aUpper          db 'upper',0            ; DATA XREF: build_charclass_isra_29+23↑o
.rodata:00000000000158A7                                         ; build_charclass_isra_29:loc_B72C↑o
.rodata:00000000000158AD aLower          db 'lower',0            ; DATA XREF: build_charclass_isra_29:loc_B416↑o
.rodata:00000000000158AD                                         ; build_charclass_isra_29:loc_B488↑o
.rodata:00000000000158B3 aAlnum          db 'alnum',0            ; DATA XREF: build_charclass_isra_29+6C↑o
.rodata:00000000000158B3                                         ; parse_expression+9CF↑o
.rodata:00000000000158B9 aCntrl          db 'cntrl',0            ; DATA XREF: build_charclass_isra_29+8A↑o
.rodata:00000000000158BF aSpace          db 'space',0            ; DATA XREF: build_charclass_isra_29+1C2↑o
.rodata:00000000000158BF                                         ; parse_expression+97F↑o
.rodata:00000000000158C5 aPrint          db 'print',0            ; DATA XREF: build_charclass_isra_29:loc_B693↑o
.rodata:00000000000158CB aBlank          db 'blank',0            ; DATA XREF: build_charclass_isra_29:loc_B792↑o
.rodata:00000000000158D1 ; const char aGraph[]
.rodata:00000000000158D1 aGraph          db 'graph',0            ; DATA XREF: build_charclass_isra_29:loc_B89E↑o
.rodata:00000000000158D7 ; const char aPunct[]
.rodata:00000000000158D7 aPunct          db 'punct',0            ; DATA XREF: build_charclass_isra_29:loc_B92A↑o
.rodata:00000000000158DD ; const char asc_158DD[1]
.rodata:00000000000158DD asc_158DD       db 'x'                  ; DATA XREF: build_charclass_isra_29:loc_B9B4↑o
.rodata:00000000000158DE aDigit          db 'digit',0            ; DATA XREF: build_charclass_isra_29+290↑o
.rodata:00000000000158E4 ; const char aErrRegEspace[]
.rodata:00000000000158E4 aErrRegEspace   db 'err == REG_ESPACE',0
.rodata:00000000000158E4                                         ; DATA XREF: re_search_internal+103B↑o
.rodata:00000000000158E4                                         ; re_search_internal+153F↑o
.rodata:00000000000158F6 a8              db '8',0                ; DATA XREF: re_compile_internal+160↑o
.rodata:00000000000158F8 ; const char aNodeNextNull[]
.rodata:00000000000158F8 aNodeNextNull   db 'node->next == NULL',0
.rodata:00000000000158F8                                         ; DATA XREF: re_compile_internal+969↑o
.rodata:000000000001590B ; const char aLeft1[]
.rodata:000000000001590B aLeft1          db 'left > -1',0        ; DATA XREF: re_compile_internal+10DF↑o
.rodata:0000000000015915 ; const char aRight1[]
.rodata:0000000000015915 aRight1         db 'right > -1',0       ; DATA XREF: re_compile_internal+10A1↑o
.rodata:0000000000015920 ; const char aRegsAllocatedR[]
.rodata:0000000000015920 aRegsAllocatedR db 'regs_allocated == REGS_FIXED',0
.rodata:0000000000015920                                         ; DATA XREF: re_search_stub+46E↑o
.rodata:000000000001593D ; const char aRegsNumRegsNre[]
.rodata:000000000001593D aRegsNumRegsNre db 'regs->num_regs >= nregs',0
.rodata:000000000001593D                                         ; DATA XREF: re_search_stub+44F↑o
.rodata:0000000000015955 ; const char aPmatch0RmSoSta[]
.rodata:0000000000015955 aPmatch0RmSoSta db 'pmatch[0].rm_so == start',0
.rodata:0000000000015955                                         ; DATA XREF: re_search_stub+430↑o
.rodata:000000000001596E                 align 20h
.rodata:0000000000015980 jpt_E9F6        dd offset loc_EFC4 - 15980h
.rodata:0000000000015980                                         ; DATA XREF: re_search_internal+4E8↑o
.rodata:0000000000015980                                         ; re_search_internal+4EF↑r
.rodata:0000000000015980                 dd offset loc_EFC4 - 15980h ; jump table for switch statement
.rodata:0000000000015980                 dd offset loc_EA2E - 15980h
.rodata:0000000000015980                 dd offset loc_EF52 - 15980h
.rodata:0000000000015980                 dd offset loc_EAD8 - 15980h
.rodata:0000000000015994 jpt_1082C       dd offset loc_10A10 - 15994h, offset def_1082C - 15994h
.rodata:0000000000015994                                         ; DATA XREF: peek_token+13A↑o
.rodata:0000000000015994                                         ; peek_token+145↑r
.rodata:0000000000015994                 dd offset def_1082C - 15994h, offset def_1082C - 15994h ; jump table for switch statement
.rodata:0000000000015994                 dd offset def_1082C - 15994h, offset def_1082C - 15994h
.rodata:0000000000015994                 dd offset def_1082C - 15994h, offset def_1082C - 15994h
.rodata:0000000000015994                 dd offset def_1082C - 15994h, offset def_1082C - 15994h
.rodata:0000000000015994                 dd offset def_1082C - 15994h, offset def_1082C - 15994h
.rodata:0000000000015994                 dd offset def_1082C - 15994h, offset def_1082C - 15994h
.rodata:0000000000015994                 dd offset def_1082C - 15994h, offset def_1082C - 15994h
.rodata:0000000000015994                 dd offset def_1082C - 15994h, offset def_1082C - 15994h
.rodata:0000000000015994                 dd offset def_1082C - 15994h, offset def_1082C - 15994h
.rodata:0000000000015994                 dd offset def_1082C - 15994h, offset def_1082C - 15994h
.rodata:0000000000015994                 dd offset def_1082C - 15994h, offset def_1082C - 15994h
.rodata:0000000000015994                 dd offset def_1082C - 15994h, offset def_1082C - 15994h
.rodata:0000000000015994                 dd offset loc_10A80 - 15994h, offset def_1082C - 15994h
.rodata:0000000000015994                 dd offset def_1082C - 15994h, offset def_1082C - 15994h
.rodata:0000000000015994                 dd offset loc_10A60 - 15994h, offset loc_10A40 - 15994h
.rodata:0000000000015994                 dd offset loc_10A30 - 15994h, offset loc_109F0 - 15994h
.rodata:0000000000015994                 dd offset def_1082C - 15994h, offset def_1082C - 15994h
.rodata:0000000000015994                 dd offset loc_109E0 - 15994h, offset def_1082C - 15994h
.rodata:0000000000015994                 dd offset def_1082C - 15994h, offset def_1082C - 15994h
.rodata:0000000000015994                 dd offset def_1082C - 15994h, offset def_1082C - 15994h
.rodata:0000000000015994                 dd offset def_1082C - 15994h, offset def_1082C - 15994h
.rodata:0000000000015994                 dd offset def_1082C - 15994h, offset def_1082C - 15994h
.rodata:0000000000015994                 dd offset def_1082C - 15994h, offset def_1082C - 15994h
.rodata:0000000000015994                 dd offset def_1082C - 15994h, offset def_1082C - 15994h
.rodata:0000000000015994                 dd offset def_1082C - 15994h, offset def_1082C - 15994h
.rodata:0000000000015994                 dd offset def_1082C - 15994h, offset loc_109C0 - 15994h
.rodata:0000000000015994                 dd offset def_1082C - 15994h, offset def_1082C - 15994h
.rodata:0000000000015994                 dd offset def_1082C - 15994h, offset def_1082C - 15994h
.rodata:0000000000015994                 dd offset def_1082C - 15994h, offset def_1082C - 15994h
.rodata:0000000000015994                 dd offset def_1082C - 15994h, offset def_1082C - 15994h
.rodata:0000000000015994                 dd offset def_1082C - 15994h, offset def_1082C - 15994h
.rodata:0000000000015994                 dd offset def_1082C - 15994h, offset def_1082C - 15994h
.rodata:0000000000015994                 dd offset def_1082C - 15994h, offset def_1082C - 15994h
.rodata:0000000000015994                 dd offset def_1082C - 15994h, offset def_1082C - 15994h
.rodata:0000000000015994                 dd offset def_1082C - 15994h, offset def_1082C - 15994h
.rodata:0000000000015994                 dd offset def_1082C - 15994h, offset def_1082C - 15994h
.rodata:0000000000015994                 dd offset def_1082C - 15994h, offset def_1082C - 15994h
.rodata:0000000000015994                 dd offset def_1082C - 15994h, offset def_1082C - 15994h
.rodata:0000000000015994                 dd offset def_1082C - 15994h, offset def_1082C - 15994h
.rodata:0000000000015994                 dd offset def_1082C - 15994h, offset loc_109B0 - 15994h
.rodata:0000000000015994                 dd offset def_1082C - 15994h, offset def_1082C - 15994h
.rodata:0000000000015994                 dd offset loc_10988 - 15994h, offset def_1082C - 15994h
.rodata:0000000000015994                 dd offset def_1082C - 15994h, offset def_1082C - 15994h
.rodata:0000000000015994                 dd offset def_1082C - 15994h, offset def_1082C - 15994h
.rodata:0000000000015994                 dd offset def_1082C - 15994h, offset def_1082C - 15994h
.rodata:0000000000015994                 dd offset def_1082C - 15994h, offset def_1082C - 15994h
.rodata:0000000000015994                 dd offset def_1082C - 15994h, offset def_1082C - 15994h
.rodata:0000000000015994                 dd offset def_1082C - 15994h, offset def_1082C - 15994h
.rodata:0000000000015994                 dd offset def_1082C - 15994h, offset def_1082C - 15994h
.rodata:0000000000015994                 dd offset def_1082C - 15994h, offset def_1082C - 15994h
.rodata:0000000000015994                 dd offset def_1082C - 15994h, offset def_1082C - 15994h
.rodata:0000000000015994                 dd offset def_1082C - 15994h, offset def_1082C - 15994h
.rodata:0000000000015994                 dd offset def_1082C - 15994h, offset def_1082C - 15994h
.rodata:0000000000015994                 dd offset def_1082C - 15994h, offset def_1082C - 15994h
.rodata:0000000000015994                 dd offset def_1082C - 15994h, offset def_1082C - 15994h
.rodata:0000000000015994                 dd offset def_1082C - 15994h, offset loc_10960 - 15994h
.rodata:0000000000015994                 dd offset loc_10938 - 15994h, offset loc_10910 - 15994h
.rodata:0000000000015B64 jpt_108D8       dd offset loc_10CA3 - 15B64h, offset loc_10C8C - 15B64h
.rodata:0000000000015B64                                         ; DATA XREF: peek_token+1E7↑o
.rodata:0000000000015B64                                         ; peek_token+1F1↑r
.rodata:0000000000015B64                 dd offset loc_10C75 - 15B64h, offset def_108D8 - 15B64h ; jump table for switch statement
.rodata:0000000000015B64                 dd offset loc_10C5A - 15B64h, offset def_108D8 - 15B64h
.rodata:0000000000015B64                 dd offset def_108D8 - 15B64h, offset def_108D8 - 15B64h
.rodata:0000000000015B64                 dd offset def_108D8 - 15B64h, offset def_108D8 - 15B64h
.rodata:0000000000015B64                 dd offset loc_10C31 - 15B64h, offset loc_10C31 - 15B64h
.rodata:0000000000015B64                 dd offset loc_10C31 - 15B64h, offset loc_10C31 - 15B64h
.rodata:0000000000015B64                 dd offset loc_10C31 - 15B64h, offset loc_10C31 - 15B64h
.rodata:0000000000015B64                 dd offset loc_10C31 - 15B64h, offset loc_10C31 - 15B64h
.rodata:0000000000015B64                 dd offset loc_10C31 - 15B64h, offset def_108D8 - 15B64h
.rodata:0000000000015B64                 dd offset def_108D8 - 15B64h, offset loc_10C0F - 15B64h
.rodata:0000000000015B64                 dd offset def_108D8 - 15B64h, offset loc_10BED - 15B64h
.rodata:0000000000015B64                 dd offset loc_10BD2 - 15B64h, offset def_108D8 - 15B64h
.rodata:0000000000015B64                 dd offset def_108D8 - 15B64h, offset loc_10BB0 - 15B64h
.rodata:0000000000015B64                 dd offset def_108D8 - 15B64h, offset def_108D8 - 15B64h
.rodata:0000000000015B64                 dd offset def_108D8 - 15B64h, offset def_108D8 - 15B64h
.rodata:0000000000015B64                 dd offset def_108D8 - 15B64h, offset def_108D8 - 15B64h
.rodata:0000000000015B64                 dd offset def_108D8 - 15B64h, offset def_108D8 - 15B64h
.rodata:0000000000015B64                 dd offset def_108D8 - 15B64h, offset def_108D8 - 15B64h
.rodata:0000000000015B64                 dd offset def_108D8 - 15B64h, offset def_108D8 - 15B64h
.rodata:0000000000015B64                 dd offset def_108D8 - 15B64h, offset def_108D8 - 15B64h
.rodata:0000000000015B64                 dd offset def_108D8 - 15B64h, offset def_108D8 - 15B64h
.rodata:0000000000015B64                 dd offset loc_10B95 - 15B64h, offset def_108D8 - 15B64h
.rodata:0000000000015B64                 dd offset def_108D8 - 15B64h, offset def_108D8 - 15B64h
.rodata:0000000000015B64                 dd offset loc_10B7A - 15B64h, offset def_108D8 - 15B64h
.rodata:0000000000015B64                 dd offset def_108D8 - 15B64h, offset def_108D8 - 15B64h
.rodata:0000000000015B64                 dd offset def_108D8 - 15B64h, offset def_108D8 - 15B64h
.rodata:0000000000015B64                 dd offset def_108D8 - 15B64h, offset def_108D8 - 15B64h
.rodata:0000000000015B64                 dd offset def_108D8 - 15B64h, offset loc_10B58 - 15B64h
.rodata:0000000000015B64                 dd offset def_108D8 - 15B64h, offset loc_10B36 - 15B64h
.rodata:0000000000015B64                 dd offset def_108D8 - 15B64h, offset def_108D8 - 15B64h
.rodata:0000000000015B64                 dd offset def_108D8 - 15B64h, offset def_108D8 - 15B64h
.rodata:0000000000015B64                 dd offset def_108D8 - 15B64h, offset def_108D8 - 15B64h
.rodata:0000000000015B64                 dd offset def_108D8 - 15B64h, offset def_108D8 - 15B64h
.rodata:0000000000015B64                 dd offset def_108D8 - 15B64h, offset def_108D8 - 15B64h
.rodata:0000000000015B64                 dd offset def_108D8 - 15B64h, offset def_108D8 - 15B64h
.rodata:0000000000015B64                 dd offset def_108D8 - 15B64h, offset def_108D8 - 15B64h
.rodata:0000000000015B64                 dd offset def_108D8 - 15B64h, offset def_108D8 - 15B64h
.rodata:0000000000015B64                 dd offset loc_10AFD - 15B64h, offset def_108D8 - 15B64h
.rodata:0000000000015B64                 dd offset def_108D8 - 15B64h, offset def_108D8 - 15B64h
.rodata:0000000000015B64                 dd offset loc_10AE2 - 15B64h, offset def_108D8 - 15B64h
.rodata:0000000000015B64                 dd offset def_108D8 - 15B64h, offset def_108D8 - 15B64h
.rodata:0000000000015B64                 dd offset loc_10AC4 - 15B64h, offset loc_10AA9 - 15B64h
.rodata:0000000000015B64                 dd offset loc_10B18 - 15B64h
.rodata:0000000000015CC0 jpt_10EFF       dd offset def_10EFF - 15CC0h
.rodata:0000000000015CC0                                         ; DATA XREF: parse_expression+4B↑o
.rodata:0000000000015CC0                                         ; parse_expression+58↑r
.rodata:0000000000015CC0                 dd offset loc_1192E - 15CC0h ; jump table for switch statement
.rodata:0000000000015CC0                 dd offset def_10EFF - 15CC0h
.rodata:0000000000015CC0                 dd offset def_10EFF - 15CC0h
.rodata:0000000000015CC0                 dd offset loc_1187F - 15CC0h
.rodata:0000000000015CC0                 dd offset loc_118E9 - 15CC0h
.rodata:0000000000015CC0                 dd offset def_10EFF - 15CC0h
.rodata:0000000000015CC0                 dd offset def_10EFF - 15CC0h
.rodata:0000000000015CC0                 dd offset loc_10F01 - 15CC0h
.rodata:0000000000015CC0                 dd offset loc_11A18 - 15CC0h
.rodata:0000000000015CC0                 dd offset def_10EFF - 15CC0h
.rodata:0000000000015CC0                 dd offset loc_10FED - 15CC0h
.rodata:0000000000015CC0                 dd offset loc_11560 - 15CC0h
.rodata:0000000000015CC0                 dd offset def_10EFF - 15CC0h
.rodata:0000000000015CC0                 dd offset def_10EFF - 15CC0h
.rodata:0000000000015CC0                 dd offset def_10EFF - 15CC0h
.rodata:0000000000015CC0                 dd offset def_10EFF - 15CC0h
.rodata:0000000000015CC0                 dd offset def_10EFF - 15CC0h
.rodata:0000000000015CC0                 dd offset loc_10FED - 15CC0h
.rodata:0000000000015CC0                 dd offset loc_10FED - 15CC0h
.rodata:0000000000015CC0                 dd offset loc_116A0 - 15CC0h
.rodata:0000000000015CC0                 dd offset def_10EFF - 15CC0h
.rodata:0000000000015CC0                 dd offset def_10EFF - 15CC0h
.rodata:0000000000015CC0                 dd offset loc_10FDE - 15CC0h
.rodata:0000000000015CC0                 dd offset loc_1100B - 15CC0h
.rodata:0000000000015CC0                 dd offset def_10EFF - 15CC0h
.rodata:0000000000015CC0                 dd offset def_10EFF - 15CC0h
.rodata:0000000000015CC0                 dd offset def_10EFF - 15CC0h
.rodata:0000000000015CC0                 dd offset def_10EFF - 15CC0h
.rodata:0000000000015CC0                 dd offset def_10EFF - 15CC0h
.rodata:0000000000015CC0                 dd offset def_10EFF - 15CC0h
.rodata:0000000000015CC0                 dd offset def_10EFF - 15CC0h
.rodata:0000000000015CC0                 dd offset loc_11858 - 15CC0h
.rodata:0000000000015CC0                 dd offset loc_11858 - 15CC0h
.rodata:0000000000015CC0                 dd offset loc_11808 - 15CC0h
.rodata:0000000000015CC0                 dd offset loc_11808 - 15CC0h
.rodata:0000000000015CC0                 dd offset loc_11A83 - 15CC0h
.rodata:0000000000015D54 jpt_11806       dd offset loc_11B71 - 15D54h
.rodata:0000000000015D54                                         ; DATA XREF: parse_expression+88B↑o
.rodata:0000000000015D54                                         ; parse_expression+95E↑r
.rodata:0000000000015D54                 dd offset loc_11B47 - 15D54h ; jump table for switch statement
.rodata:0000000000015D54                 dd offset loc_11AFD - 15D54h
.rodata:0000000000015D54                 dd offset loc_11AC5 - 15D54h
.rodata:0000000000015D54                 dd offset loc_11B99 - 15D54h
.rodata:0000000000015D68 jpt_12D63       dd offset def_12D63 - 15D68h
.rodata:0000000000015D68                                         ; DATA XREF: re_compile_internal+6AC↑o
.rodata:0000000000015D68                                         ; re_compile_internal+6CC↑r
.rodata:0000000000015D68                 dd offset def_12D63 - 15D68h ; jump table for switch statement
.rodata:0000000000015D68                 dd offset loc_12FE0 - 15D68h
.rodata:0000000000015D68                 dd offset def_12D63 - 15D68h
.rodata:0000000000015D68                 dd offset loc_13010 - 15D68h
.rodata:0000000000015D68                 dd offset def_12D63 - 15D68h
.rodata:0000000000015D68                 dd offset def_12D63 - 15D68h
.rodata:0000000000015D68                 dd offset def_12D63 - 15D68h
.rodata:0000000000015D68                 dd offset loc_12F88 - 15D68h
.rodata:0000000000015D68                 dd offset loc_12F88 - 15D68h
.rodata:0000000000015D68                 dd offset loc_12EC7 - 15D68h
.rodata:0000000000015D68                 dd offset loc_12EC7 - 15D68h
.rodata:0000000000015D68                 dd offset loc_12F88 - 15D68h
.rodata:0000000000015D68                 dd offset def_12D63 - 15D68h
.rodata:0000000000015D68                 dd offset def_12D63 - 15D68h
.rodata:0000000000015D68                 dd offset def_12D63 - 15D68h
.rodata:0000000000015D68                 dd offset loc_12E41 - 15D68h
.rodata:0000000000015DAC jpt_13463       dd offset def_13463 - 15DACh
.rodata:0000000000015DAC                                         ; DATA XREF: re_compile_internal+DAF↑o
.rodata:0000000000015DAC                                         ; re_compile_internal+DCC↑r
.rodata:0000000000015DAC                 dd offset loc_13620 - 15DACh ; jump table for switch statement
.rodata:0000000000015DAC                 dd offset loc_135CC - 15DACh
.rodata:0000000000015DAC                 dd offset loc_13648 - 15DACh
.rodata:0000000000015DAC                 dd offset loc_135CC - 15DACh
.rodata:0000000000015DAC                 dd offset loc_135C9 - 15DACh
.rodata:0000000000015DAC                 dd offset loc_1323E - 15DACh
.rodata:0000000000015DAC                 dd offset def_13463 - 15DACh
.rodata:0000000000015DAC                 dd offset loc_135CC - 15DACh
.rodata:0000000000015DAC                 dd offset loc_135CC - 15DACh
.rodata:0000000000015DAC                 dd offset loc_135CC - 15DACh
.rodata:0000000000015DAC                 dd offset loc_135CC - 15DACh
.rodata:0000000000015DAC                 dd offset loc_13629 - 15DACh
.rodata:0000000000015DE0 ; const char _PRETTY_FUNCTION___7859[]
.rodata:0000000000015DE0 __PRETTY_FUNCTION___7859 db 're_copy_regs',0
.rodata:0000000000015DE0                                         ; DATA XREF: re_search_stub:loc_13D21↑o
.rodata:0000000000015DE0                                         ; re_search_stub:loc_13D40↑o
.rodata:0000000000015DED                 align 10h
.rodata:0000000000015DF0 ; const char _PRETTY_FUNCTION___7847[]
.rodata:0000000000015DF0 __PRETTY_FUNCTION___7847 db 're_search_stub',0
.rodata:0000000000015DF0                                         ; DATA XREF: re_search_stub:loc_13D02↑o
.rodata:0000000000015DFF                 align 20h
.rodata:0000000000015E00 ; const char _PRETTY_FUNCTION___8040[]
.rodata:0000000000015E00 __PRETTY_FUNCTION___8040 db 'pop_fail_stack',0
.rodata:0000000000015E00                                         ; DATA XREF: pop_fail_stack_isra_25:loc_B265↑o
.rodata:0000000000015E0F                 align 10h
.rodata:0000000000015E10 ; const char _PRETTY_FUNCTION___7972[]
.rodata:0000000000015E10 __PRETTY_FUNCTION___7972 db 'check_matching',0
.rodata:0000000000015E10                                         ; DATA XREF: re_search_internal+102D↑o
.rodata:0000000000015E10                                         ; re_search_internal+1531↑o
.rodata:0000000000015E1F                 align 20h
.rodata:0000000000015E20 ; const char _PRETTY_FUNCTION___6981[]
.rodata:0000000000015E20 __PRETTY_FUNCTION___6981 db 'link_nfa_nodes',0
.rodata:0000000000015E20                                         ; DATA XREF: re_compile_internal+95B↑o
.rodata:0000000000015E20                                         ; re_compile_internal:loc_13723↑o ...
.rodata:0000000000015E2F                 align 10h
.rodata:0000000000015E30 ; const char _PRETTY_FUNCTION___7327[]
.rodata:0000000000015E30 __PRETTY_FUNCTION___7327 db 'parse_bracket_exp',0
.rodata:0000000000015E30                                         ; DATA XREF: parse_expression:def_11806↑o
.rodata:0000000000015E42                 align 20h
.rodata:0000000000015E60 utf8_sb_map     db 0FFh                 ; DATA XREF: free_dfa_content+131↑o
.rodata:0000000000015E60                                         ; re_compile_internal+1B3↑o
.rodata:0000000000015E61                 db 0FFh
.rodata:0000000000015E62                 db 0FFh
.rodata:0000000000015E63                 db 0FFh
.rodata:0000000000015E64                 db 0FFh
.rodata:0000000000015E65                 db 0FFh
.rodata:0000000000015E66                 db 0FFh
.rodata:0000000000015E67                 db 0FFh
.rodata:0000000000015E68                 db 0FFh
.rodata:0000000000015E69                 db 0FFh
.rodata:0000000000015E6A                 db 0FFh
.rodata:0000000000015E6B                 db 0FFh
.rodata:0000000000015E6C                 db 0FFh
.rodata:0000000000015E6D                 db 0FFh
.rodata:0000000000015E6E                 db 0FFh
.rodata:0000000000015E6F                 db 0FFh
.rodata:0000000000015E70                 db    0
.rodata:0000000000015E71                 db    0
.rodata:0000000000015E72                 db    0
.rodata:0000000000015E73                 db    0
.rodata:0000000000015E74                 db    0
.rodata:0000000000015E75                 db    0
.rodata:0000000000015E76                 db    0
.rodata:0000000000015E77                 db    0
.rodata:0000000000015E78                 db    0
.rodata:0000000000015E79                 db    0
.rodata:0000000000015E7A                 db    0
.rodata:0000000000015E7B                 db    0
.rodata:0000000000015E7C                 db    0
.rodata:0000000000015E7D                 db    0
.rodata:0000000000015E7E                 db    0
.rodata:0000000000015E7F                 db    0
.rodata:0000000000015E80 __re_error_msgid_idx db    0            ; DATA XREF: rpl_re_compile_pattern+3E↑o
.rodata:0000000000015E80                                         ; rpl_regerror+F↑o
.rodata:0000000000015E81                 db    0
.rodata:0000000000015E82                 db    0
.rodata:0000000000015E83                 db    0
.rodata:0000000000015E84                 db    0
.rodata:0000000000015E85                 db    0
.rodata:0000000000015E86                 db    0
.rodata:0000000000015E87                 db    0
.rodata:0000000000015E88                 db    8
.rodata:0000000000015E89                 db    0
.rodata:0000000000015E8A                 db    0
.rodata:0000000000015E8B                 db    0
.rodata:0000000000015E8C                 db    0
.rodata:0000000000015E8D                 db    0
.rodata:0000000000015E8E                 db    0
.rodata:0000000000015E8F                 db    0
.rodata:0000000000015E90                 db  11h
.rodata:0000000000015E91                 db    0
.rodata:0000000000015E92                 db    0
.rodata:0000000000015E93                 db    0
.rodata:0000000000015E94                 db    0
.rodata:0000000000015E95                 db    0
.rodata:0000000000015E96                 db    0
.rodata:0000000000015E97                 db    0
.rodata:0000000000015E98                 db  2Ch ; ,
.rodata:0000000000015E99                 db    0
.rodata:0000000000015E9A                 db    0
.rodata:0000000000015E9B                 db    0
.rodata:0000000000015E9C                 db    0
.rodata:0000000000015E9D                 db    0
.rodata:0000000000015E9E                 db    0
.rodata:0000000000015E9F                 db    0
.rodata:0000000000015EA0                 db  48h ; H
.rodata:0000000000015EA1                 db    0
.rodata:0000000000015EA2                 db    0
.rodata:0000000000015EA3                 db    0
.rodata:0000000000015EA4                 db    0
.rodata:0000000000015EA5                 db    0
.rodata:0000000000015EA6                 db    0
.rodata:0000000000015EA7                 db    0
.rodata:0000000000015EA8                 db  65h ; e
.rodata:0000000000015EA9                 db    0
.rodata:0000000000015EAA                 db    0
.rodata:0000000000015EAB                 db    0
.rodata:0000000000015EAC                 db    0
.rodata:0000000000015EAD                 db    0
.rodata:0000000000015EAE                 db    0
.rodata:0000000000015EAF                 db    0
.rodata:0000000000015EB0                 db  78h ; x
.rodata:0000000000015EB1                 db    0
.rodata:0000000000015EB2                 db    0
.rodata:0000000000015EB3                 db    0
.rodata:0000000000015EB4                 db    0
.rodata:0000000000015EB5                 db    0
.rodata:0000000000015EB6                 db    0
.rodata:0000000000015EB7                 db    0
.rodata:0000000000015EB8                 db  8Fh
.rodata:0000000000015EB9                 db    0
.rodata:0000000000015EBA                 db    0
.rodata:0000000000015EBB                 db    0
.rodata:0000000000015EBC                 db    0
.rodata:0000000000015EBD                 db    0
.rodata:0000000000015EBE                 db    0
.rodata:0000000000015EBF                 db    0
.rodata:0000000000015EC0                 db 0AEh
.rodata:0000000000015EC1                 db    0
.rodata:0000000000015EC2                 db    0
.rodata:0000000000015EC3                 db    0
.rodata:0000000000015EC4                 db    0
.rodata:0000000000015EC5                 db    0
.rodata:0000000000015EC6                 db    0
.rodata:0000000000015EC7                 db    0
.rodata:0000000000015EC8                 db 0C0h
.rodata:0000000000015EC9                 db    0
.rodata:0000000000015ECA                 db    0
.rodata:0000000000015ECB                 db    0
.rodata:0000000000015ECC                 db    0
.rodata:0000000000015ECD                 db    0
.rodata:0000000000015ECE                 db    0
.rodata:0000000000015ECF                 db    0
.rodata:0000000000015ED0                 db 0CDh
.rodata:0000000000015ED1                 db    0
.rodata:0000000000015ED2                 db    0
.rodata:0000000000015ED3                 db    0
.rodata:0000000000015ED4                 db    0
.rodata:0000000000015ED5                 db    0
.rodata:0000000000015ED6                 db    0
.rodata:0000000000015ED7                 db    0
.rodata:0000000000015ED8                 db 0E5h
.rodata:0000000000015ED9                 db    0
.rodata:0000000000015EDA                 db    0
.rodata:0000000000015EDB                 db    0
.rodata:0000000000015EDC                 db    0
.rodata:0000000000015EDD                 db    0
.rodata:0000000000015EDE                 db    0
.rodata:0000000000015EDF                 db    0
.rodata:0000000000015EE0                 db 0F7h
.rodata:0000000000015EE1                 db    0
.rodata:0000000000015EE2                 db    0
.rodata:0000000000015EE3                 db    0
.rodata:0000000000015EE4                 db    0
.rodata:0000000000015EE5                 db    0
.rodata:0000000000015EE6                 db    0
.rodata:0000000000015EE7                 db    0
.rodata:0000000000015EE8                 db    8
.rodata:0000000000015EE9                 db    1
.rodata:0000000000015EEA                 db    0
.rodata:0000000000015EEB                 db    0
.rodata:0000000000015EEC                 db    0
.rodata:0000000000015EED                 db    0
.rodata:0000000000015EEE                 db    0
.rodata:0000000000015EEF                 db    0
.rodata:0000000000015EF0                 db  2Dh ; -
.rodata:0000000000015EF1                 db    1
.rodata:0000000000015EF2                 db    0
.rodata:0000000000015EF3                 db    0
.rodata:0000000000015EF4                 db    0
.rodata:0000000000015EF5                 db    0
.rodata:0000000000015EF6                 db    0
.rodata:0000000000015EF7                 db    0
.rodata:0000000000015EF8                 db  51h ; Q
.rodata:0000000000015EF9                 db    1
.rodata:0000000000015EFA                 db    0
.rodata:0000000000015EFB                 db    0
.rodata:0000000000015EFC                 db    0
.rodata:0000000000015EFD                 db    0
.rodata:0000000000015EFE                 db    0
.rodata:0000000000015EFF                 db    0
.rodata:0000000000015F00                 db  6Ch ; l
.rodata:0000000000015F01                 db    1
.rodata:0000000000015F02                 db    0
.rodata:0000000000015F03                 db    0
.rodata:0000000000015F04                 db    0
.rodata:0000000000015F05                 db    0
.rodata:0000000000015F06                 db    0
.rodata:0000000000015F07                 db    0
.rodata:0000000000015F08                 db    0
.rodata:0000000000015F09                 db    0
.rodata:0000000000015F0A                 db    0
.rodata:0000000000015F0B                 db    0
.rodata:0000000000015F0C                 db    0
.rodata:0000000000015F0D                 db    0
.rodata:0000000000015F0E                 db    0
.rodata:0000000000015F0F                 db    0
.rodata:0000000000015F10                 db    0
.rodata:0000000000015F11                 db    0
.rodata:0000000000015F12                 db    0
.rodata:0000000000015F13                 db    0
.rodata:0000000000015F14                 db    0
.rodata:0000000000015F15                 db    0
.rodata:0000000000015F16                 db    0
.rodata:0000000000015F17                 db    0
.rodata:0000000000015F18                 db    0
.rodata:0000000000015F19                 db    0
.rodata:0000000000015F1A                 db    0
.rodata:0000000000015F1B                 db    0
.rodata:0000000000015F1C                 db    0
.rodata:0000000000015F1D                 db    0
.rodata:0000000000015F1E                 db    0
.rodata:0000000000015F1F                 db    0
.rodata:0000000000015F20 __re_error_msgid db 'Success',0         ; DATA XREF: rpl_re_compile_pattern+47↑o
.rodata:0000000000015F20                                         ; rpl_regerror+19↑o
.rodata:0000000000015F28 aNoMatch        db 'No match',0
.rodata:0000000000015F31 aInvalidRegular db 'Invalid regular expression',0
.rodata:0000000000015F4C aInvalidCollati db 'Invalid collation character',0
.rodata:0000000000015F68 aInvalidCharact db 'Invalid character class name',0
.rodata:0000000000015F85 aTrailingBacksl db 'Trailing backslash',0
.rodata:0000000000015F98 aInvalidBackRef db 'Invalid back reference',0
.rodata:0000000000015FAF aUnmatchedOr    db 'Unmatched [, [^, [:, [., or [=',0
.rodata:0000000000015FCE aUnmatchedOr_0  db 'Unmatched ( or \(',0
.rodata:0000000000015FE0 aUnmatched      db 'Unmatched \{',0
.rodata:0000000000015FED aInvalidContent db 'Invalid content of \{\}',0
.rodata:0000000000016005 aInvalidRangeEn db 'Invalid range end',0
.rodata:0000000000016017 aMemoryExhauste_0 db 'Memory exhausted',0
.rodata:0000000000016028 aInvalidPrecedi db 'Invalid preceding regular expression',0
.rodata:000000000001604D aPrematureEndOf db 'Premature end of regular expression',0
.rodata:0000000000016071 aRegularExpress db 'Regular expression too big',0
.rodata:000000000001608C aUnmatchedOr_1  db 'Unmatched ) or \)',0
.rodata:000000000001609E                 align 20h
.rodata:00000000000160A0 xmmword_160A0   xmmword 1010101010101010101010101010101h
.rodata:00000000000160A0                                         ; DATA XREF: re_compile_fastmap_iter_isra_30:loc_C174↑r
.rodata:00000000000160A0                                         ; re_compile_fastmap_iter_isra_30:loc_C214↑r
.rodata:00000000000160B0 unk_160B0       db  43h ; C             ; DATA XREF: hard_locale+18↑o
.rodata:00000000000160B1                 db    0
.rodata:00000000000160B2 aPosix          db 'POSIX',0            ; DATA XREF: hard_locale:loc_142A0↑o
.rodata:00000000000160B8 aAscii          db 'ASCII',0            ; DATA XREF: locale_charset+16↑o
.rodata:00000000000160B8                                         ; locale_charset:loc_142F0↑o
.rodata:00000000000160B8 _rodata         ends
.rodata:00000000000160B8
LOAD:00000000000160BE ; ===========================================================================
LOAD:00000000000160BE
LOAD:00000000000160BE ; Segment type: Pure code
LOAD:00000000000160BE ; Segment permissions: Read/Execute
LOAD:00000000000160BE LOAD            segment byte public 'CODE' use64
LOAD:00000000000160BE                 assume cs:LOAD
LOAD:00000000000160BE                 ;org 160BEh
LOAD:00000000000160BE                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000160BE                 align 20h
LOAD:00000000000160BE LOAD            ends
LOAD:00000000000160BE
.eh_frame_hdr:00000000000160C0 ; ===========================================================================
.eh_frame_hdr:00000000000160C0
.eh_frame_hdr:00000000000160C0 ; Segment type: Pure data
.eh_frame_hdr:00000000000160C0 ; Segment permissions: Read
.eh_frame_hdr:00000000000160C0 _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:00000000000160C0                 assume cs:_eh_frame_hdr
.eh_frame_hdr:00000000000160C0                 ;org 160C0h
.eh_frame_hdr:00000000000160C0 __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000000001A0↑o
.eh_frame_hdr:00000000000160C1                 db  1Bh
.eh_frame_hdr:00000000000160C2                 db    3
.eh_frame_hdr:00000000000160C3                 db  3Bh ; ;
.eh_frame_hdr:00000000000160C4                 db  74h ; t
.eh_frame_hdr:00000000000160C5                 db    5
.eh_frame_hdr:00000000000160C6                 db    0
.eh_frame_hdr:00000000000160C7                 db    0
.eh_frame_hdr:00000000000160C8                 db 0ADh
.eh_frame_hdr:00000000000160C9                 db    0
.eh_frame_hdr:00000000000160CA                 db    0
.eh_frame_hdr:00000000000160CB                 db    0
.eh_frame_hdr:00000000000160CC                 db 0E0h
.eh_frame_hdr:00000000000160CD                 db 0B7h
.eh_frame_hdr:00000000000160CE                 db 0FEh
.eh_frame_hdr:00000000000160CF                 db 0FFh
.eh_frame_hdr:00000000000160D0                 db 0C0h
.eh_frame_hdr:00000000000160D1                 db    5
.eh_frame_hdr:00000000000160D2                 db    0
.eh_frame_hdr:00000000000160D3                 db    0
.eh_frame_hdr:00000000000160D4                 db 0C0h
.eh_frame_hdr:00000000000160D5                 db 0BBh
.eh_frame_hdr:00000000000160D6                 db 0FEh
.eh_frame_hdr:00000000000160D7                 db 0FFh
.eh_frame_hdr:00000000000160D8                 db 0E8h
.eh_frame_hdr:00000000000160D9                 db    5
.eh_frame_hdr:00000000000160DA                 db    0
.eh_frame_hdr:00000000000160DB                 db    0
.eh_frame_hdr:00000000000160DC                 db 0D0h
.eh_frame_hdr:00000000000160DD                 db 0BBh
.eh_frame_hdr:00000000000160DE                 db 0FEh
.eh_frame_hdr:00000000000160DF                 db 0FFh
.eh_frame_hdr:00000000000160E0                 db 0FCh
.eh_frame_hdr:00000000000160E1                 db    6
.eh_frame_hdr:00000000000160E2                 db    0
.eh_frame_hdr:00000000000160E3                 db    0
.eh_frame_hdr:00000000000160E4                 db  50h ; P
.eh_frame_hdr:00000000000160E5                 db 0C2h
.eh_frame_hdr:00000000000160E6                 db 0FEh
.eh_frame_hdr:00000000000160E7                 db 0FFh
.eh_frame_hdr:00000000000160E8                 db  90h
.eh_frame_hdr:00000000000160E9                 db    5
.eh_frame_hdr:00000000000160EA                 db    0
.eh_frame_hdr:00000000000160EB                 db    0
.eh_frame_hdr:00000000000160EC                 db  60h ; `
.eh_frame_hdr:00000000000160ED                 db 0C3h
.eh_frame_hdr:00000000000160EE                 db 0FEh
.eh_frame_hdr:00000000000160EF                 db 0FFh
.eh_frame_hdr:00000000000160F0                 db    0
.eh_frame_hdr:00000000000160F1                 db    6
.eh_frame_hdr:00000000000160F2                 db    0
.eh_frame_hdr:00000000000160F3                 db    0
.eh_frame_hdr:00000000000160F4                 db  20h
.eh_frame_hdr:00000000000160F5                 db 0C4h
.eh_frame_hdr:00000000000160F6                 db 0FEh
.eh_frame_hdr:00000000000160F7                 db 0FFh
.eh_frame_hdr:00000000000160F8                 db  34h ; 4
.eh_frame_hdr:00000000000160F9                 db    6
.eh_frame_hdr:00000000000160FA                 db    0
.eh_frame_hdr:00000000000160FB                 db    0
.eh_frame_hdr:00000000000160FC                 db 0A0h
.eh_frame_hdr:00000000000160FD                 db 0C4h
.eh_frame_hdr:00000000000160FE                 db 0FEh
.eh_frame_hdr:00000000000160FF                 db 0FFh
.eh_frame_hdr:0000000000016100                 db  50h ; P
.eh_frame_hdr:0000000000016101                 db    6
.eh_frame_hdr:0000000000016102                 db    0
.eh_frame_hdr:0000000000016103                 db    0
.eh_frame_hdr:0000000000016104                 db 0B0h
.eh_frame_hdr:0000000000016105                 db 0C8h
.eh_frame_hdr:0000000000016106                 db 0FEh
.eh_frame_hdr:0000000000016107                 db 0FFh
.eh_frame_hdr:0000000000016108                 db 0D0h
.eh_frame_hdr:0000000000016109                 db    6
.eh_frame_hdr:000000000001610A                 db    0
.eh_frame_hdr:000000000001610B                 db    0
.eh_frame_hdr:000000000001610C                 db  20h
.eh_frame_hdr:000000000001610D                 db 0CDh
.eh_frame_hdr:000000000001610E                 db 0FEh
.eh_frame_hdr:000000000001610F                 db 0FFh
.eh_frame_hdr:0000000000016110                 db  58h ; X
.eh_frame_hdr:0000000000016111                 db    7
.eh_frame_hdr:0000000000016112                 db    0
.eh_frame_hdr:0000000000016113                 db    0
.eh_frame_hdr:0000000000016114                 db  30h ; 0
.eh_frame_hdr:0000000000016115                 db 0CDh
.eh_frame_hdr:0000000000016116                 db 0FEh
.eh_frame_hdr:0000000000016117                 db 0FFh
.eh_frame_hdr:0000000000016118                 db  6Ch ; l
.eh_frame_hdr:0000000000016119                 db    7
.eh_frame_hdr:000000000001611A                 db    0
.eh_frame_hdr:000000000001611B                 db    0
.eh_frame_hdr:000000000001611C                 db  40h ; @
.eh_frame_hdr:000000000001611D                 db 0CDh
.eh_frame_hdr:000000000001611E                 db 0FEh
.eh_frame_hdr:000000000001611F                 db 0FFh
.eh_frame_hdr:0000000000016120                 db  80h
.eh_frame_hdr:0000000000016121                 db    7
.eh_frame_hdr:0000000000016122                 db    0
.eh_frame_hdr:0000000000016123                 db    0
.eh_frame_hdr:0000000000016124                 db 0F0h
.eh_frame_hdr:0000000000016125                 db 0CDh
.eh_frame_hdr:0000000000016126                 db 0FEh
.eh_frame_hdr:0000000000016127                 db 0FFh
.eh_frame_hdr:0000000000016128                 db 0B0h
.eh_frame_hdr:0000000000016129                 db    7
.eh_frame_hdr:000000000001612A                 db    0
.eh_frame_hdr:000000000001612B                 db    0
.eh_frame_hdr:000000000001612C                 db    0
.eh_frame_hdr:000000000001612D                 db 0CEh
.eh_frame_hdr:000000000001612E                 db 0FEh
.eh_frame_hdr:000000000001612F                 db 0FFh
.eh_frame_hdr:0000000000016130                 db 0C4h
.eh_frame_hdr:0000000000016131                 db    7
.eh_frame_hdr:0000000000016132                 db    0
.eh_frame_hdr:0000000000016133                 db    0
.eh_frame_hdr:0000000000016134                 db  30h ; 0
.eh_frame_hdr:0000000000016135                 db 0CEh
.eh_frame_hdr:0000000000016136                 db 0FEh
.eh_frame_hdr:0000000000016137                 db 0FFh
.eh_frame_hdr:0000000000016138                 db 0E0h
.eh_frame_hdr:0000000000016139                 db    7
.eh_frame_hdr:000000000001613A                 db    0
.eh_frame_hdr:000000000001613B                 db    0
.eh_frame_hdr:000000000001613C                 db  40h ; @
.eh_frame_hdr:000000000001613D                 db 0CEh
.eh_frame_hdr:000000000001613E                 db 0FEh
.eh_frame_hdr:000000000001613F                 db 0FFh
.eh_frame_hdr:0000000000016140                 db 0F4h
.eh_frame_hdr:0000000000016141                 db    7
.eh_frame_hdr:0000000000016142                 db    0
.eh_frame_hdr:0000000000016143                 db    0
.eh_frame_hdr:0000000000016144                 db  50h ; P
.eh_frame_hdr:0000000000016145                 db 0CFh
.eh_frame_hdr:0000000000016146                 db 0FEh
.eh_frame_hdr:0000000000016147                 db 0FFh
.eh_frame_hdr:0000000000016148                 db  58h ; X
.eh_frame_hdr:0000000000016149                 db    8
.eh_frame_hdr:000000000001614A                 db    0
.eh_frame_hdr:000000000001614B                 db    0
.eh_frame_hdr:000000000001614C                 db  60h ; `
.eh_frame_hdr:000000000001614D                 db 0CFh
.eh_frame_hdr:000000000001614E                 db 0FEh
.eh_frame_hdr:000000000001614F                 db 0FFh
.eh_frame_hdr:0000000000016150                 db  6Ch ; l
.eh_frame_hdr:0000000000016151                 db    8
.eh_frame_hdr:0000000000016152                 db    0
.eh_frame_hdr:0000000000016153                 db    0
.eh_frame_hdr:0000000000016154                 db  70h ; p
.eh_frame_hdr:0000000000016155                 db 0CFh
.eh_frame_hdr:0000000000016156                 db 0FEh
.eh_frame_hdr:0000000000016157                 db 0FFh
.eh_frame_hdr:0000000000016158                 db  80h
.eh_frame_hdr:0000000000016159                 db    8
.eh_frame_hdr:000000000001615A                 db    0
.eh_frame_hdr:000000000001615B                 db    0
.eh_frame_hdr:000000000001615C                 db  10h
.eh_frame_hdr:000000000001615D                 db 0D0h
.eh_frame_hdr:000000000001615E                 db 0FEh
.eh_frame_hdr:000000000001615F                 db 0FFh
.eh_frame_hdr:0000000000016160                 db 0A0h
.eh_frame_hdr:0000000000016161                 db    8
.eh_frame_hdr:0000000000016162                 db    0
.eh_frame_hdr:0000000000016163                 db    0
.eh_frame_hdr:0000000000016164                 db    0
.eh_frame_hdr:0000000000016165                 db 0D1h
.eh_frame_hdr:0000000000016166                 db 0FEh
.eh_frame_hdr:0000000000016167                 db 0FFh
.eh_frame_hdr:0000000000016168                 db 0E4h
.eh_frame_hdr:0000000000016169                 db    8
.eh_frame_hdr:000000000001616A                 db    0
.eh_frame_hdr:000000000001616B                 db    0
.eh_frame_hdr:000000000001616C                 db  40h ; @
.eh_frame_hdr:000000000001616D                 db 0E3h
.eh_frame_hdr:000000000001616E                 db 0FEh
.eh_frame_hdr:000000000001616F                 db 0FFh
.eh_frame_hdr:0000000000016170                 db  5Ch ; \
.eh_frame_hdr:0000000000016171                 db    9
.eh_frame_hdr:0000000000016172                 db    0
.eh_frame_hdr:0000000000016173                 db    0
.eh_frame_hdr:0000000000016174                 db 0F0h
.eh_frame_hdr:0000000000016175                 db 0E4h
.eh_frame_hdr:0000000000016176                 db 0FEh
.eh_frame_hdr:0000000000016177                 db 0FFh
.eh_frame_hdr:0000000000016178                 db 0C8h
.eh_frame_hdr:0000000000016179                 db    9
.eh_frame_hdr:000000000001617A                 db    0
.eh_frame_hdr:000000000001617B                 db    0
.eh_frame_hdr:000000000001617C                 db  30h ; 0
.eh_frame_hdr:000000000001617D                 db 0E5h
.eh_frame_hdr:000000000001617E                 db 0FEh
.eh_frame_hdr:000000000001617F                 db 0FFh
.eh_frame_hdr:0000000000016180                 db 0F4h
.eh_frame_hdr:0000000000016181                 db    9
.eh_frame_hdr:0000000000016182                 db    0
.eh_frame_hdr:0000000000016183                 db    0
.eh_frame_hdr:0000000000016184                 db  50h ; P
.eh_frame_hdr:0000000000016185                 db 0E5h
.eh_frame_hdr:0000000000016186                 db 0FEh
.eh_frame_hdr:0000000000016187                 db 0FFh
.eh_frame_hdr:0000000000016188                 db    8
.eh_frame_hdr:0000000000016189                 db  0Ah
.eh_frame_hdr:000000000001618A                 db    0
.eh_frame_hdr:000000000001618B                 db    0
.eh_frame_hdr:000000000001618C                 db  70h ; p
.eh_frame_hdr:000000000001618D                 db 0E5h
.eh_frame_hdr:000000000001618E                 db 0FEh
.eh_frame_hdr:000000000001618F                 db 0FFh
.eh_frame_hdr:0000000000016190                 db  1Ch
.eh_frame_hdr:0000000000016191                 db  0Ah
.eh_frame_hdr:0000000000016192                 db    0
.eh_frame_hdr:0000000000016193                 db    0
.eh_frame_hdr:0000000000016194                 db 0B0h
.eh_frame_hdr:0000000000016195                 db 0E5h
.eh_frame_hdr:0000000000016196                 db 0FEh
.eh_frame_hdr:0000000000016197                 db 0FFh
.eh_frame_hdr:0000000000016198                 db  30h ; 0
.eh_frame_hdr:0000000000016199                 db  0Ah
.eh_frame_hdr:000000000001619A                 db    0
.eh_frame_hdr:000000000001619B                 db    0
.eh_frame_hdr:000000000001619C                 db 0D0h
.eh_frame_hdr:000000000001619D                 db 0E5h
.eh_frame_hdr:000000000001619E                 db 0FEh
.eh_frame_hdr:000000000001619F                 db 0FFh
.eh_frame_hdr:00000000000161A0                 db  44h ; D
.eh_frame_hdr:00000000000161A1                 db  0Ah
.eh_frame_hdr:00000000000161A2                 db    0
.eh_frame_hdr:00000000000161A3                 db    0
.eh_frame_hdr:00000000000161A4                 db    0
.eh_frame_hdr:00000000000161A5                 db 0E6h
.eh_frame_hdr:00000000000161A6                 db 0FEh
.eh_frame_hdr:00000000000161A7                 db 0FFh
.eh_frame_hdr:00000000000161A8                 db  58h ; X
.eh_frame_hdr:00000000000161A9                 db  0Ah
.eh_frame_hdr:00000000000161AA                 db    0
.eh_frame_hdr:00000000000161AB                 db    0
.eh_frame_hdr:00000000000161AC                 db  80h
.eh_frame_hdr:00000000000161AD                 db 0E6h
.eh_frame_hdr:00000000000161AE                 db 0FEh
.eh_frame_hdr:00000000000161AF                 db 0FFh
.eh_frame_hdr:00000000000161B0                 db 0ACh
.eh_frame_hdr:00000000000161B1                 db  0Ah
.eh_frame_hdr:00000000000161B2                 db    0
.eh_frame_hdr:00000000000161B3                 db    0
.eh_frame_hdr:00000000000161B4                 db  70h ; p
.eh_frame_hdr:00000000000161B5                 db 0E7h
.eh_frame_hdr:00000000000161B6                 db 0FEh
.eh_frame_hdr:00000000000161B7                 db 0FFh
.eh_frame_hdr:00000000000161B8                 db  18h
.eh_frame_hdr:00000000000161B9                 db  0Bh
.eh_frame_hdr:00000000000161BA                 db    0
.eh_frame_hdr:00000000000161BB                 db    0
.eh_frame_hdr:00000000000161BC                 db  80h
.eh_frame_hdr:00000000000161BD                 db 0E7h
.eh_frame_hdr:00000000000161BE                 db 0FEh
.eh_frame_hdr:00000000000161BF                 db 0FFh
.eh_frame_hdr:00000000000161C0                 db  2Ch ; ,
.eh_frame_hdr:00000000000161C1                 db  0Bh
.eh_frame_hdr:00000000000161C2                 db    0
.eh_frame_hdr:00000000000161C3                 db    0
.eh_frame_hdr:00000000000161C4                 db  20h
.eh_frame_hdr:00000000000161C5                 db 0E8h
.eh_frame_hdr:00000000000161C6                 db 0FEh
.eh_frame_hdr:00000000000161C7                 db 0FFh
.eh_frame_hdr:00000000000161C8                 db  58h ; X
.eh_frame_hdr:00000000000161C9                 db  0Bh
.eh_frame_hdr:00000000000161CA                 db    0
.eh_frame_hdr:00000000000161CB                 db    0
.eh_frame_hdr:00000000000161CC                 db  40h ; @
.eh_frame_hdr:00000000000161CD                 db 0E8h
.eh_frame_hdr:00000000000161CE                 db 0FEh
.eh_frame_hdr:00000000000161CF                 db 0FFh
.eh_frame_hdr:00000000000161D0                 db  6Ch ; l
.eh_frame_hdr:00000000000161D1                 db  0Bh
.eh_frame_hdr:00000000000161D2                 db    0
.eh_frame_hdr:00000000000161D3                 db    0
.eh_frame_hdr:00000000000161D4                 db  50h ; P
.eh_frame_hdr:00000000000161D5                 db 0E8h
.eh_frame_hdr:00000000000161D6                 db 0FEh
.eh_frame_hdr:00000000000161D7                 db 0FFh
.eh_frame_hdr:00000000000161D8                 db  80h
.eh_frame_hdr:00000000000161D9                 db  0Bh
.eh_frame_hdr:00000000000161DA                 db    0
.eh_frame_hdr:00000000000161DB                 db    0
.eh_frame_hdr:00000000000161DC                 db  70h ; p
.eh_frame_hdr:00000000000161DD                 db 0E8h
.eh_frame_hdr:00000000000161DE                 db 0FEh
.eh_frame_hdr:00000000000161DF                 db 0FFh
.eh_frame_hdr:00000000000161E0                 db  94h
.eh_frame_hdr:00000000000161E1                 db  0Bh
.eh_frame_hdr:00000000000161E2                 db    0
.eh_frame_hdr:00000000000161E3                 db    0
.eh_frame_hdr:00000000000161E4                 db  90h
.eh_frame_hdr:00000000000161E5                 db 0E8h
.eh_frame_hdr:00000000000161E6                 db 0FEh
.eh_frame_hdr:00000000000161E7                 db 0FFh
.eh_frame_hdr:00000000000161E8                 db 0A8h
.eh_frame_hdr:00000000000161E9                 db  0Bh
.eh_frame_hdr:00000000000161EA                 db    0
.eh_frame_hdr:00000000000161EB                 db    0
.eh_frame_hdr:00000000000161EC                 db  20h
.eh_frame_hdr:00000000000161ED                 db 0E9h
.eh_frame_hdr:00000000000161EE                 db 0FEh
.eh_frame_hdr:00000000000161EF                 db 0FFh
.eh_frame_hdr:00000000000161F0                 db 0C4h
.eh_frame_hdr:00000000000161F1                 db  0Bh
.eh_frame_hdr:00000000000161F2                 db    0
.eh_frame_hdr:00000000000161F3                 db    0
.eh_frame_hdr:00000000000161F4                 db 0B0h
.eh_frame_hdr:00000000000161F5                 db 0E9h
.eh_frame_hdr:00000000000161F6                 db 0FEh
.eh_frame_hdr:00000000000161F7                 db 0FFh
.eh_frame_hdr:00000000000161F8                 db 0E0h
.eh_frame_hdr:00000000000161F9                 db  0Bh
.eh_frame_hdr:00000000000161FA                 db    0
.eh_frame_hdr:00000000000161FB                 db    0
.eh_frame_hdr:00000000000161FC                 db 0C0h
.eh_frame_hdr:00000000000161FD                 db 0E9h
.eh_frame_hdr:00000000000161FE                 db 0FEh
.eh_frame_hdr:00000000000161FF                 db 0FFh
.eh_frame_hdr:0000000000016200                 db 0F4h
.eh_frame_hdr:0000000000016201                 db  0Bh
.eh_frame_hdr:0000000000016202                 db    0
.eh_frame_hdr:0000000000016203                 db    0
.eh_frame_hdr:0000000000016204                 db 0D0h
.eh_frame_hdr:0000000000016205                 db 0E9h
.eh_frame_hdr:0000000000016206                 db 0FEh
.eh_frame_hdr:0000000000016207                 db 0FFh
.eh_frame_hdr:0000000000016208                 db    8
.eh_frame_hdr:0000000000016209                 db  0Ch
.eh_frame_hdr:000000000001620A                 db    0
.eh_frame_hdr:000000000001620B                 db    0
.eh_frame_hdr:000000000001620C                 db  70h ; p
.eh_frame_hdr:000000000001620D                 db 0EAh
.eh_frame_hdr:000000000001620E                 db 0FEh
.eh_frame_hdr:000000000001620F                 db 0FFh
.eh_frame_hdr:0000000000016210                 db  24h ; $
.eh_frame_hdr:0000000000016211                 db  0Ch
.eh_frame_hdr:0000000000016212                 db    0
.eh_frame_hdr:0000000000016213                 db    0
.eh_frame_hdr:0000000000016214                 db  80h
.eh_frame_hdr:0000000000016215                 db 0EAh
.eh_frame_hdr:0000000000016216                 db 0FEh
.eh_frame_hdr:0000000000016217                 db 0FFh
.eh_frame_hdr:0000000000016218                 db  38h ; 8
.eh_frame_hdr:0000000000016219                 db  0Ch
.eh_frame_hdr:000000000001621A                 db    0
.eh_frame_hdr:000000000001621B                 db    0
.eh_frame_hdr:000000000001621C                 db 0A0h
.eh_frame_hdr:000000000001621D                 db 0EAh
.eh_frame_hdr:000000000001621E                 db 0FEh
.eh_frame_hdr:000000000001621F                 db 0FFh
.eh_frame_hdr:0000000000016220                 db  4Ch ; L
.eh_frame_hdr:0000000000016221                 db  0Ch
.eh_frame_hdr:0000000000016222                 db    0
.eh_frame_hdr:0000000000016223                 db    0
.eh_frame_hdr:0000000000016224                 db 0B0h
.eh_frame_hdr:0000000000016225                 db 0EAh
.eh_frame_hdr:0000000000016226                 db 0FEh
.eh_frame_hdr:0000000000016227                 db 0FFh
.eh_frame_hdr:0000000000016228                 db  60h ; `
.eh_frame_hdr:0000000000016229                 db  0Ch
.eh_frame_hdr:000000000001622A                 db    0
.eh_frame_hdr:000000000001622B                 db    0
.eh_frame_hdr:000000000001622C                 db  40h ; @
.eh_frame_hdr:000000000001622D                 db 0EBh
.eh_frame_hdr:000000000001622E                 db 0FEh
.eh_frame_hdr:000000000001622F                 db 0FFh
.eh_frame_hdr:0000000000016230                 db  7Ch ; |
.eh_frame_hdr:0000000000016231                 db  0Ch
.eh_frame_hdr:0000000000016232                 db    0
.eh_frame_hdr:0000000000016233                 db    0
.eh_frame_hdr:0000000000016234                 db 0E0h
.eh_frame_hdr:0000000000016235                 db 0EBh
.eh_frame_hdr:0000000000016236                 db 0FEh
.eh_frame_hdr:0000000000016237                 db 0FFh
.eh_frame_hdr:0000000000016238                 db  98h
.eh_frame_hdr:0000000000016239                 db  0Ch
.eh_frame_hdr:000000000001623A                 db    0
.eh_frame_hdr:000000000001623B                 db    0
.eh_frame_hdr:000000000001623C                 db 0F0h
.eh_frame_hdr:000000000001623D                 db 0EBh
.eh_frame_hdr:000000000001623E                 db 0FEh
.eh_frame_hdr:000000000001623F                 db 0FFh
.eh_frame_hdr:0000000000016240                 db 0ACh
.eh_frame_hdr:0000000000016241                 db  0Ch
.eh_frame_hdr:0000000000016242                 db    0
.eh_frame_hdr:0000000000016243                 db    0
.eh_frame_hdr:0000000000016244                 db  10h
.eh_frame_hdr:0000000000016245                 db 0ECh
.eh_frame_hdr:0000000000016246                 db 0FEh
.eh_frame_hdr:0000000000016247                 db 0FFh
.eh_frame_hdr:0000000000016248                 db 0C0h
.eh_frame_hdr:0000000000016249                 db  0Ch
.eh_frame_hdr:000000000001624A                 db    0
.eh_frame_hdr:000000000001624B                 db    0
.eh_frame_hdr:000000000001624C                 db  30h ; 0
.eh_frame_hdr:000000000001624D                 db 0ECh
.eh_frame_hdr:000000000001624E                 db 0FEh
.eh_frame_hdr:000000000001624F                 db 0FFh
.eh_frame_hdr:0000000000016250                 db 0D4h
.eh_frame_hdr:0000000000016251                 db  0Ch
.eh_frame_hdr:0000000000016252                 db    0
.eh_frame_hdr:0000000000016253                 db    0
.eh_frame_hdr:0000000000016254                 db  40h ; @
.eh_frame_hdr:0000000000016255                 db 0ECh
.eh_frame_hdr:0000000000016256                 db 0FEh
.eh_frame_hdr:0000000000016257                 db 0FFh
.eh_frame_hdr:0000000000016258                 db 0E8h
.eh_frame_hdr:0000000000016259                 db  0Ch
.eh_frame_hdr:000000000001625A                 db    0
.eh_frame_hdr:000000000001625B                 db    0
.eh_frame_hdr:000000000001625C                 db  60h ; `
.eh_frame_hdr:000000000001625D                 db 0ECh
.eh_frame_hdr:000000000001625E                 db 0FEh
.eh_frame_hdr:000000000001625F                 db 0FFh
.eh_frame_hdr:0000000000016260                 db 0FCh
.eh_frame_hdr:0000000000016261                 db  0Ch
.eh_frame_hdr:0000000000016262                 db    0
.eh_frame_hdr:0000000000016263                 db    0
.eh_frame_hdr:0000000000016264                 db  80h
.eh_frame_hdr:0000000000016265                 db 0ECh
.eh_frame_hdr:0000000000016266                 db 0FEh
.eh_frame_hdr:0000000000016267                 db 0FFh
.eh_frame_hdr:0000000000016268                 db  10h
.eh_frame_hdr:0000000000016269                 db  0Dh
.eh_frame_hdr:000000000001626A                 db    0
.eh_frame_hdr:000000000001626B                 db    0
.eh_frame_hdr:000000000001626C                 db 0A0h
.eh_frame_hdr:000000000001626D                 db 0ECh
.eh_frame_hdr:000000000001626E                 db 0FEh
.eh_frame_hdr:000000000001626F                 db 0FFh
.eh_frame_hdr:0000000000016270                 db  28h ; (
.eh_frame_hdr:0000000000016271                 db  0Dh
.eh_frame_hdr:0000000000016272                 db    0
.eh_frame_hdr:0000000000016273                 db    0
.eh_frame_hdr:0000000000016274                 db 0C0h
.eh_frame_hdr:0000000000016275                 db 0F0h
.eh_frame_hdr:0000000000016276                 db 0FEh
.eh_frame_hdr:0000000000016277                 db 0FFh
.eh_frame_hdr:0000000000016278                 db  3Ch ; <
.eh_frame_hdr:0000000000016279                 db  0Eh
.eh_frame_hdr:000000000001627A                 db    0
.eh_frame_hdr:000000000001627B                 db    0
.eh_frame_hdr:000000000001627C                 db 0E0h
.eh_frame_hdr:000000000001627D                 db 0F0h
.eh_frame_hdr:000000000001627E                 db 0FEh
.eh_frame_hdr:000000000001627F                 db 0FFh
.eh_frame_hdr:0000000000016280                 db  50h ; P
.eh_frame_hdr:0000000000016281                 db  0Eh
.eh_frame_hdr:0000000000016282                 db    0
.eh_frame_hdr:0000000000016283                 db    0
.eh_frame_hdr:0000000000016284                 db  60h ; `
.eh_frame_hdr:0000000000016285                 db 0F1h
.eh_frame_hdr:0000000000016286                 db 0FEh
.eh_frame_hdr:0000000000016287                 db 0FFh
.eh_frame_hdr:0000000000016288                 db  6Ch ; l
.eh_frame_hdr:0000000000016289                 db  0Eh
.eh_frame_hdr:000000000001628A                 db    0
.eh_frame_hdr:000000000001628B                 db    0
.eh_frame_hdr:000000000001628C                 db  40h ; @
.eh_frame_hdr:000000000001628D                 db 0F2h
.eh_frame_hdr:000000000001628E                 db 0FEh
.eh_frame_hdr:000000000001628F                 db 0FFh
.eh_frame_hdr:0000000000016290                 db  98h
.eh_frame_hdr:0000000000016291                 db  0Eh
.eh_frame_hdr:0000000000016292                 db    0
.eh_frame_hdr:0000000000016293                 db    0
.eh_frame_hdr:0000000000016294                 db 0C0h
.eh_frame_hdr:0000000000016295                 db 0F2h
.eh_frame_hdr:0000000000016296                 db 0FEh
.eh_frame_hdr:0000000000016297                 db 0FFh
.eh_frame_hdr:0000000000016298                 db 0B8h
.eh_frame_hdr:0000000000016299                 db  0Eh
.eh_frame_hdr:000000000001629A                 db    0
.eh_frame_hdr:000000000001629B                 db    0
.eh_frame_hdr:000000000001629C                 db 0E0h
.eh_frame_hdr:000000000001629D                 db 0F2h
.eh_frame_hdr:000000000001629E                 db 0FEh
.eh_frame_hdr:000000000001629F                 db 0FFh
.eh_frame_hdr:00000000000162A0                 db 0D4h
.eh_frame_hdr:00000000000162A1                 db  0Eh
.eh_frame_hdr:00000000000162A2                 db    0
.eh_frame_hdr:00000000000162A3                 db    0
.eh_frame_hdr:00000000000162A4                 db  10h
.eh_frame_hdr:00000000000162A5                 db 0F3h
.eh_frame_hdr:00000000000162A6                 db 0FEh
.eh_frame_hdr:00000000000162A7                 db 0FFh
.eh_frame_hdr:00000000000162A8                 db 0E8h
.eh_frame_hdr:00000000000162A9                 db  0Eh
.eh_frame_hdr:00000000000162AA                 db    0
.eh_frame_hdr:00000000000162AB                 db    0
.eh_frame_hdr:00000000000162AC                 db  20h
.eh_frame_hdr:00000000000162AD                 db 0F3h
.eh_frame_hdr:00000000000162AE                 db 0FEh
.eh_frame_hdr:00000000000162AF                 db 0FFh
.eh_frame_hdr:00000000000162B0                 db 0FCh
.eh_frame_hdr:00000000000162B1                 db  0Eh
.eh_frame_hdr:00000000000162B2                 db    0
.eh_frame_hdr:00000000000162B3                 db    0
.eh_frame_hdr:00000000000162B4                 db  60h ; `
.eh_frame_hdr:00000000000162B5                 db 0F3h
.eh_frame_hdr:00000000000162B6                 db 0FEh
.eh_frame_hdr:00000000000162B7                 db 0FFh
.eh_frame_hdr:00000000000162B8                 db  20h
.eh_frame_hdr:00000000000162B9                 db  0Fh
.eh_frame_hdr:00000000000162BA                 db    0
.eh_frame_hdr:00000000000162BB                 db    0
.eh_frame_hdr:00000000000162BC                 db  90h
.eh_frame_hdr:00000000000162BD                 db 0F3h
.eh_frame_hdr:00000000000162BE                 db 0FEh
.eh_frame_hdr:00000000000162BF                 db 0FFh
.eh_frame_hdr:00000000000162C0                 db  34h ; 4
.eh_frame_hdr:00000000000162C1                 db  0Fh
.eh_frame_hdr:00000000000162C2                 db    0
.eh_frame_hdr:00000000000162C3                 db    0
.eh_frame_hdr:00000000000162C4                 db  20h
.eh_frame_hdr:00000000000162C5                 db 0F4h
.eh_frame_hdr:00000000000162C6                 db 0FEh
.eh_frame_hdr:00000000000162C7                 db 0FFh
.eh_frame_hdr:00000000000162C8                 db  4Ch ; L
.eh_frame_hdr:00000000000162C9                 db  0Fh
.eh_frame_hdr:00000000000162CA                 db    0
.eh_frame_hdr:00000000000162CB                 db    0
.eh_frame_hdr:00000000000162CC                 db  70h ; p
.eh_frame_hdr:00000000000162CD                 db 0F4h
.eh_frame_hdr:00000000000162CE                 db 0FEh
.eh_frame_hdr:00000000000162CF                 db 0FFh
.eh_frame_hdr:00000000000162D0                 db  64h ; d
.eh_frame_hdr:00000000000162D1                 db  0Fh
.eh_frame_hdr:00000000000162D2                 db    0
.eh_frame_hdr:00000000000162D3                 db    0
.eh_frame_hdr:00000000000162D4                 db  90h
.eh_frame_hdr:00000000000162D5                 db 0F4h
.eh_frame_hdr:00000000000162D6                 db 0FEh
.eh_frame_hdr:00000000000162D7                 db 0FFh
.eh_frame_hdr:00000000000162D8                 db  80h
.eh_frame_hdr:00000000000162D9                 db  0Fh
.eh_frame_hdr:00000000000162DA                 db    0
.eh_frame_hdr:00000000000162DB                 db    0
.eh_frame_hdr:00000000000162DC                 db 0C0h
.eh_frame_hdr:00000000000162DD                 db 0F4h
.eh_frame_hdr:00000000000162DE                 db 0FEh
.eh_frame_hdr:00000000000162DF                 db 0FFh
.eh_frame_hdr:00000000000162E0                 db  9Ch
.eh_frame_hdr:00000000000162E1                 db  0Fh
.eh_frame_hdr:00000000000162E2                 db    0
.eh_frame_hdr:00000000000162E3                 db    0
.eh_frame_hdr:00000000000162E4                 db 0F0h
.eh_frame_hdr:00000000000162E5                 db 0F4h
.eh_frame_hdr:00000000000162E6                 db 0FEh
.eh_frame_hdr:00000000000162E7                 db 0FFh
.eh_frame_hdr:00000000000162E8                 db 0C4h
.eh_frame_hdr:00000000000162E9                 db  0Fh
.eh_frame_hdr:00000000000162EA                 db    0
.eh_frame_hdr:00000000000162EB                 db    0
.eh_frame_hdr:00000000000162EC                 db  10h
.eh_frame_hdr:00000000000162ED                 db 0F5h
.eh_frame_hdr:00000000000162EE                 db 0FEh
.eh_frame_hdr:00000000000162EF                 db 0FFh
.eh_frame_hdr:00000000000162F0                 db 0E0h
.eh_frame_hdr:00000000000162F1                 db  0Fh
.eh_frame_hdr:00000000000162F2                 db    0
.eh_frame_hdr:00000000000162F3                 db    0
.eh_frame_hdr:00000000000162F4                 db  50h ; P
.eh_frame_hdr:00000000000162F5                 db 0F5h
.eh_frame_hdr:00000000000162F6                 db 0FEh
.eh_frame_hdr:00000000000162F7                 db 0FFh
.eh_frame_hdr:00000000000162F8                 db 0F8h
.eh_frame_hdr:00000000000162F9                 db  0Fh
.eh_frame_hdr:00000000000162FA                 db    0
.eh_frame_hdr:00000000000162FB                 db    0
.eh_frame_hdr:00000000000162FC                 db  70h ; p
.eh_frame_hdr:00000000000162FD                 db 0F6h
.eh_frame_hdr:00000000000162FE                 db 0FEh
.eh_frame_hdr:00000000000162FF                 db 0FFh
.eh_frame_hdr:0000000000016300                 db  44h ; D
.eh_frame_hdr:0000000000016301                 db  10h
.eh_frame_hdr:0000000000016302                 db    0
.eh_frame_hdr:0000000000016303                 db    0
.eh_frame_hdr:0000000000016304                 db 0A0h
.eh_frame_hdr:0000000000016305                 db 0F6h
.eh_frame_hdr:0000000000016306                 db 0FEh
.eh_frame_hdr:0000000000016307                 db 0FFh
.eh_frame_hdr:0000000000016308                 db  60h ; `
.eh_frame_hdr:0000000000016309                 db  10h
.eh_frame_hdr:000000000001630A                 db    0
.eh_frame_hdr:000000000001630B                 db    0
.eh_frame_hdr:000000000001630C                 db  60h ; `
.eh_frame_hdr:000000000001630D                 db 0FDh
.eh_frame_hdr:000000000001630E                 db 0FEh
.eh_frame_hdr:000000000001630F                 db 0FFh
.eh_frame_hdr:0000000000016310                 db 0B0h
.eh_frame_hdr:0000000000016311                 db  10h
.eh_frame_hdr:0000000000016312                 db    0
.eh_frame_hdr:0000000000016313                 db    0
.eh_frame_hdr:0000000000016314                 db 0E0h
.eh_frame_hdr:0000000000016315                 db 0FDh
.eh_frame_hdr:0000000000016316                 db 0FEh
.eh_frame_hdr:0000000000016317                 db 0FFh
.eh_frame_hdr:0000000000016318                 db 0E8h
.eh_frame_hdr:0000000000016319                 db  10h
.eh_frame_hdr:000000000001631A                 db    0
.eh_frame_hdr:000000000001631B                 db    0
.eh_frame_hdr:000000000001631C                 db  20h
.eh_frame_hdr:000000000001631D                 db 0FEh
.eh_frame_hdr:000000000001631E                 db 0FEh
.eh_frame_hdr:000000000001631F                 db 0FFh
.eh_frame_hdr:0000000000016320                 db    8
.eh_frame_hdr:0000000000016321                 db  11h
.eh_frame_hdr:0000000000016322                 db    0
.eh_frame_hdr:0000000000016323                 db    0
.eh_frame_hdr:0000000000016324                 db  80h
.eh_frame_hdr:0000000000016325                 db 0FEh
.eh_frame_hdr:0000000000016326                 db 0FEh
.eh_frame_hdr:0000000000016327                 db 0FFh
.eh_frame_hdr:0000000000016328                 db  38h ; 8
.eh_frame_hdr:0000000000016329                 db  11h
.eh_frame_hdr:000000000001632A                 db    0
.eh_frame_hdr:000000000001632B                 db    0
.eh_frame_hdr:000000000001632C                 db  10h
.eh_frame_hdr:000000000001632D                 db 0FFh
.eh_frame_hdr:000000000001632E                 db 0FEh
.eh_frame_hdr:000000000001632F                 db 0FFh
.eh_frame_hdr:0000000000016330                 db  78h ; x
.eh_frame_hdr:0000000000016331                 db  11h
.eh_frame_hdr:0000000000016332                 db    0
.eh_frame_hdr:0000000000016333                 db    0
.eh_frame_hdr:0000000000016334                 db  40h ; @
.eh_frame_hdr:0000000000016335                 db    0
.eh_frame_hdr:0000000000016336                 db 0FFh
.eh_frame_hdr:0000000000016337                 db 0FFh
.eh_frame_hdr:0000000000016338                 db  8Ch
.eh_frame_hdr:0000000000016339                 db  11h
.eh_frame_hdr:000000000001633A                 db    0
.eh_frame_hdr:000000000001633B                 db    0
.eh_frame_hdr:000000000001633C                 db  60h ; `
.eh_frame_hdr:000000000001633D                 db    0
.eh_frame_hdr:000000000001633E                 db 0FFh
.eh_frame_hdr:000000000001633F                 db 0FFh
.eh_frame_hdr:0000000000016340                 db 0A0h
.eh_frame_hdr:0000000000016341                 db  11h
.eh_frame_hdr:0000000000016342                 db    0
.eh_frame_hdr:0000000000016343                 db    0
.eh_frame_hdr:0000000000016344                 db  90h
.eh_frame_hdr:0000000000016345                 db    2
.eh_frame_hdr:0000000000016346                 db 0FFh
.eh_frame_hdr:0000000000016347                 db 0FFh
.eh_frame_hdr:0000000000016348                 db  34h ; 4
.eh_frame_hdr:0000000000016349                 db  12h
.eh_frame_hdr:000000000001634A                 db    0
.eh_frame_hdr:000000000001634B                 db    0
.eh_frame_hdr:000000000001634C                 db    0
.eh_frame_hdr:000000000001634D                 db    3
.eh_frame_hdr:000000000001634E                 db 0FFh
.eh_frame_hdr:000000000001634F                 db 0FFh
.eh_frame_hdr:0000000000016350                 db  48h ; H
.eh_frame_hdr:0000000000016351                 db  12h
.eh_frame_hdr:0000000000016352                 db    0
.eh_frame_hdr:0000000000016353                 db    0
.eh_frame_hdr:0000000000016354                 db  70h ; p
.eh_frame_hdr:0000000000016355                 db    3
.eh_frame_hdr:0000000000016356                 db 0FFh
.eh_frame_hdr:0000000000016357                 db 0FFh
.eh_frame_hdr:0000000000016358                 db  74h ; t
.eh_frame_hdr:0000000000016359                 db  12h
.eh_frame_hdr:000000000001635A                 db    0
.eh_frame_hdr:000000000001635B                 db    0
.eh_frame_hdr:000000000001635C                 db 0D0h
.eh_frame_hdr:000000000001635D                 db    3
.eh_frame_hdr:000000000001635E                 db 0FFh
.eh_frame_hdr:000000000001635F                 db 0FFh
.eh_frame_hdr:0000000000016360                 db 0A0h
.eh_frame_hdr:0000000000016361                 db  12h
.eh_frame_hdr:0000000000016362                 db    0
.eh_frame_hdr:0000000000016363                 db    0
.eh_frame_hdr:0000000000016364                 db  70h ; p
.eh_frame_hdr:0000000000016365                 db    4
.eh_frame_hdr:0000000000016366                 db 0FFh
.eh_frame_hdr:0000000000016367                 db 0FFh
.eh_frame_hdr:0000000000016368                 db 0D4h
.eh_frame_hdr:0000000000016369                 db  12h
.eh_frame_hdr:000000000001636A                 db    0
.eh_frame_hdr:000000000001636B                 db    0
.eh_frame_hdr:000000000001636C                 db 0E0h
.eh_frame_hdr:000000000001636D                 db    4
.eh_frame_hdr:000000000001636E                 db 0FFh
.eh_frame_hdr:000000000001636F                 db 0FFh
.eh_frame_hdr:0000000000016370                 db    0
.eh_frame_hdr:0000000000016371                 db  13h
.eh_frame_hdr:0000000000016372                 db    0
.eh_frame_hdr:0000000000016373                 db    0
.eh_frame_hdr:0000000000016374                 db  10h
.eh_frame_hdr:0000000000016375                 db    6
.eh_frame_hdr:0000000000016376                 db 0FFh
.eh_frame_hdr:0000000000016377                 db 0FFh
.eh_frame_hdr:0000000000016378                 db  38h ; 8
.eh_frame_hdr:0000000000016379                 db  13h
.eh_frame_hdr:000000000001637A                 db    0
.eh_frame_hdr:000000000001637B                 db    0
.eh_frame_hdr:000000000001637C                 db    0
.eh_frame_hdr:000000000001637D                 db    7
.eh_frame_hdr:000000000001637E                 db 0FFh
.eh_frame_hdr:000000000001637F                 db 0FFh
.eh_frame_hdr:0000000000016380                 db  88h
.eh_frame_hdr:0000000000016381                 db  13h
.eh_frame_hdr:0000000000016382                 db    0
.eh_frame_hdr:0000000000016383                 db    0
.eh_frame_hdr:0000000000016384                 db  70h ; p
.eh_frame_hdr:0000000000016385                 db    7
.eh_frame_hdr:0000000000016386                 db 0FFh
.eh_frame_hdr:0000000000016387                 db 0FFh
.eh_frame_hdr:0000000000016388                 db 0B8h
.eh_frame_hdr:0000000000016389                 db  13h
.eh_frame_hdr:000000000001638A                 db    0
.eh_frame_hdr:000000000001638B                 db    0
.eh_frame_hdr:000000000001638C                 db  40h ; @
.eh_frame_hdr:000000000001638D                 db    9
.eh_frame_hdr:000000000001638E                 db 0FFh
.eh_frame_hdr:000000000001638F                 db 0FFh
.eh_frame_hdr:0000000000016390                 db    4
.eh_frame_hdr:0000000000016391                 db  14h
.eh_frame_hdr:0000000000016392                 db    0
.eh_frame_hdr:0000000000016393                 db    0
.eh_frame_hdr:0000000000016394                 db  60h ; `
.eh_frame_hdr:0000000000016395                 db  0Fh
.eh_frame_hdr:0000000000016396                 db 0FFh
.eh_frame_hdr:0000000000016397                 db 0FFh
.eh_frame_hdr:0000000000016398                 db  50h ; P
.eh_frame_hdr:0000000000016399                 db  14h
.eh_frame_hdr:000000000001639A                 db    0
.eh_frame_hdr:000000000001639B                 db    0
.eh_frame_hdr:000000000001639C                 db 0B0h
.eh_frame_hdr:000000000001639D                 db  10h
.eh_frame_hdr:000000000001639E                 db 0FFh
.eh_frame_hdr:000000000001639F                 db 0FFh
.eh_frame_hdr:00000000000163A0                 db 0ACh
.eh_frame_hdr:00000000000163A1                 db  14h
.eh_frame_hdr:00000000000163A2                 db    0
.eh_frame_hdr:00000000000163A3                 db    0
.eh_frame_hdr:00000000000163A4                 db  40h ; @
.eh_frame_hdr:00000000000163A5                 db  11h
.eh_frame_hdr:00000000000163A6                 db 0FFh
.eh_frame_hdr:00000000000163A7                 db 0FFh
.eh_frame_hdr:00000000000163A8                 db 0D8h
.eh_frame_hdr:00000000000163A9                 db  14h
.eh_frame_hdr:00000000000163AA                 db    0
.eh_frame_hdr:00000000000163AB                 db    0
.eh_frame_hdr:00000000000163AC                 db  70h ; p
.eh_frame_hdr:00000000000163AD                 db  11h
.eh_frame_hdr:00000000000163AE                 db 0FFh
.eh_frame_hdr:00000000000163AF                 db 0FFh
.eh_frame_hdr:00000000000163B0                 db 0F4h
.eh_frame_hdr:00000000000163B1                 db  14h
.eh_frame_hdr:00000000000163B2                 db    0
.eh_frame_hdr:00000000000163B3                 db    0
.eh_frame_hdr:00000000000163B4                 db 0A0h
.eh_frame_hdr:00000000000163B5                 db  11h
.eh_frame_hdr:00000000000163B6                 db 0FFh
.eh_frame_hdr:00000000000163B7                 db 0FFh
.eh_frame_hdr:00000000000163B8                 db    8
.eh_frame_hdr:00000000000163B9                 db  15h
.eh_frame_hdr:00000000000163BA                 db    0
.eh_frame_hdr:00000000000163BB                 db    0
.eh_frame_hdr:00000000000163BC                 db 0C0h
.eh_frame_hdr:00000000000163BD                 db  11h
.eh_frame_hdr:00000000000163BE                 db 0FFh
.eh_frame_hdr:00000000000163BF                 db 0FFh
.eh_frame_hdr:00000000000163C0                 db  20h
.eh_frame_hdr:00000000000163C1                 db  15h
.eh_frame_hdr:00000000000163C2                 db    0
.eh_frame_hdr:00000000000163C3                 db    0
.eh_frame_hdr:00000000000163C4                 db  90h
.eh_frame_hdr:00000000000163C5                 db  13h
.eh_frame_hdr:00000000000163C6                 db 0FFh
.eh_frame_hdr:00000000000163C7                 db 0FFh
.eh_frame_hdr:00000000000163C8                 db  6Ch ; l
.eh_frame_hdr:00000000000163C9                 db  15h
.eh_frame_hdr:00000000000163CA                 db    0
.eh_frame_hdr:00000000000163CB                 db    0
.eh_frame_hdr:00000000000163CC                 db  30h ; 0
.eh_frame_hdr:00000000000163CD                 db  14h
.eh_frame_hdr:00000000000163CE                 db 0FFh
.eh_frame_hdr:00000000000163CF                 db 0FFh
.eh_frame_hdr:00000000000163D0                 db 0A4h
.eh_frame_hdr:00000000000163D1                 db  15h
.eh_frame_hdr:00000000000163D2                 db    0
.eh_frame_hdr:00000000000163D3                 db    0
.eh_frame_hdr:00000000000163D4                 db 0B0h
.eh_frame_hdr:00000000000163D5                 db  16h
.eh_frame_hdr:00000000000163D6                 db 0FFh
.eh_frame_hdr:00000000000163D7                 db 0FFh
.eh_frame_hdr:00000000000163D8                 db 0F0h
.eh_frame_hdr:00000000000163D9                 db  15h
.eh_frame_hdr:00000000000163DA                 db    0
.eh_frame_hdr:00000000000163DB                 db    0
.eh_frame_hdr:00000000000163DC                 db  10h
.eh_frame_hdr:00000000000163DD                 db  17h
.eh_frame_hdr:00000000000163DE                 db 0FFh
.eh_frame_hdr:00000000000163DF                 db 0FFh
.eh_frame_hdr:00000000000163E0                 db  0Ch
.eh_frame_hdr:00000000000163E1                 db  16h
.eh_frame_hdr:00000000000163E2                 db    0
.eh_frame_hdr:00000000000163E3                 db    0
.eh_frame_hdr:00000000000163E4                 db  50h ; P
.eh_frame_hdr:00000000000163E5                 db  17h
.eh_frame_hdr:00000000000163E6                 db 0FFh
.eh_frame_hdr:00000000000163E7                 db 0FFh
.eh_frame_hdr:00000000000163E8                 db  2Ch ; ,
.eh_frame_hdr:00000000000163E9                 db  16h
.eh_frame_hdr:00000000000163EA                 db    0
.eh_frame_hdr:00000000000163EB                 db    0
.eh_frame_hdr:00000000000163EC                 db 0B0h
.eh_frame_hdr:00000000000163ED                 db  18h
.eh_frame_hdr:00000000000163EE                 db 0FFh
.eh_frame_hdr:00000000000163EF                 db 0FFh
.eh_frame_hdr:00000000000163F0                 db  68h ; h
.eh_frame_hdr:00000000000163F1                 db  16h
.eh_frame_hdr:00000000000163F2                 db    0
.eh_frame_hdr:00000000000163F3                 db    0
.eh_frame_hdr:00000000000163F4                 db  70h ; p
.eh_frame_hdr:00000000000163F5                 db  19h
.eh_frame_hdr:00000000000163F6                 db 0FFh
.eh_frame_hdr:00000000000163F7                 db 0FFh
.eh_frame_hdr:00000000000163F8                 db 0A4h
.eh_frame_hdr:00000000000163F9                 db  16h
.eh_frame_hdr:00000000000163FA                 db    0
.eh_frame_hdr:00000000000163FB                 db    0
.eh_frame_hdr:00000000000163FC                 db 0C0h
.eh_frame_hdr:00000000000163FD                 db  19h
.eh_frame_hdr:00000000000163FE                 db 0FFh
.eh_frame_hdr:00000000000163FF                 db 0FFh
.eh_frame_hdr:0000000000016400                 db 0B8h
.eh_frame_hdr:0000000000016401                 db  16h
.eh_frame_hdr:0000000000016402                 db    0
.eh_frame_hdr:0000000000016403                 db    0
.eh_frame_hdr:0000000000016404                 db  20h
.eh_frame_hdr:0000000000016405                 db  1Ah
.eh_frame_hdr:0000000000016406                 db 0FFh
.eh_frame_hdr:0000000000016407                 db 0FFh
.eh_frame_hdr:0000000000016408                 db 0CCh
.eh_frame_hdr:0000000000016409                 db  16h
.eh_frame_hdr:000000000001640A                 db    0
.eh_frame_hdr:000000000001640B                 db    0
.eh_frame_hdr:000000000001640C                 db 0A0h
.eh_frame_hdr:000000000001640D                 db  1Ah
.eh_frame_hdr:000000000001640E                 db 0FFh
.eh_frame_hdr:000000000001640F                 db 0FFh
.eh_frame_hdr:0000000000016410                 db 0E0h
.eh_frame_hdr:0000000000016411                 db  16h
.eh_frame_hdr:0000000000016412                 db    0
.eh_frame_hdr:0000000000016413                 db    0
.eh_frame_hdr:0000000000016414                 db 0A0h
.eh_frame_hdr:0000000000016415                 db  1Bh
.eh_frame_hdr:0000000000016416                 db 0FFh
.eh_frame_hdr:0000000000016417                 db 0FFh
.eh_frame_hdr:0000000000016418                 db  44h ; D
.eh_frame_hdr:0000000000016419                 db  17h
.eh_frame_hdr:000000000001641A                 db    0
.eh_frame_hdr:000000000001641B                 db    0
.eh_frame_hdr:000000000001641C                 db 0E0h
.eh_frame_hdr:000000000001641D                 db  1Bh
.eh_frame_hdr:000000000001641E                 db 0FFh
.eh_frame_hdr:000000000001641F                 db 0FFh
.eh_frame_hdr:0000000000016420                 db  58h ; X
.eh_frame_hdr:0000000000016421                 db  17h
.eh_frame_hdr:0000000000016422                 db    0
.eh_frame_hdr:0000000000016423                 db    0
.eh_frame_hdr:0000000000016424                 db  70h ; p
.eh_frame_hdr:0000000000016425                 db  1Ch
.eh_frame_hdr:0000000000016426                 db 0FFh
.eh_frame_hdr:0000000000016427                 db 0FFh
.eh_frame_hdr:0000000000016428                 db  6Ch ; l
.eh_frame_hdr:0000000000016429                 db  17h
.eh_frame_hdr:000000000001642A                 db    0
.eh_frame_hdr:000000000001642B                 db    0
.eh_frame_hdr:000000000001642C                 db 0D0h
.eh_frame_hdr:000000000001642D                 db  1Ch
.eh_frame_hdr:000000000001642E                 db 0FFh
.eh_frame_hdr:000000000001642F                 db 0FFh
.eh_frame_hdr:0000000000016430                 db  80h
.eh_frame_hdr:0000000000016431                 db  17h
.eh_frame_hdr:0000000000016432                 db    0
.eh_frame_hdr:0000000000016433                 db    0
.eh_frame_hdr:0000000000016434                 db  40h ; @
.eh_frame_hdr:0000000000016435                 db  1Fh
.eh_frame_hdr:0000000000016436                 db 0FFh
.eh_frame_hdr:0000000000016437                 db 0FFh
.eh_frame_hdr:0000000000016438                 db 0D0h
.eh_frame_hdr:0000000000016439                 db  17h
.eh_frame_hdr:000000000001643A                 db    0
.eh_frame_hdr:000000000001643B                 db    0
.eh_frame_hdr:000000000001643C                 db  20h
.eh_frame_hdr:000000000001643D                 db  21h ; !
.eh_frame_hdr:000000000001643E                 db 0FFh
.eh_frame_hdr:000000000001643F                 db 0FFh
.eh_frame_hdr:0000000000016440                 db    8
.eh_frame_hdr:0000000000016441                 db  18h
.eh_frame_hdr:0000000000016442                 db    0
.eh_frame_hdr:0000000000016443                 db    0
.eh_frame_hdr:0000000000016444                 db 0D0h
.eh_frame_hdr:0000000000016445                 db  23h ; #
.eh_frame_hdr:0000000000016446                 db 0FFh
.eh_frame_hdr:0000000000016447                 db 0FFh
.eh_frame_hdr:0000000000016448                 db  58h ; X
.eh_frame_hdr:0000000000016449                 db  18h
.eh_frame_hdr:000000000001644A                 db    0
.eh_frame_hdr:000000000001644B                 db    0
.eh_frame_hdr:000000000001644C                 db  30h ; 0
.eh_frame_hdr:000000000001644D                 db  25h ; %
.eh_frame_hdr:000000000001644E                 db 0FFh
.eh_frame_hdr:000000000001644F                 db 0FFh
.eh_frame_hdr:0000000000016450                 db 0A4h
.eh_frame_hdr:0000000000016451                 db  18h
.eh_frame_hdr:0000000000016452                 db    0
.eh_frame_hdr:0000000000016453                 db    0
.eh_frame_hdr:0000000000016454                 db 0E0h
.eh_frame_hdr:0000000000016455                 db  26h ; &
.eh_frame_hdr:0000000000016456                 db 0FFh
.eh_frame_hdr:0000000000016457                 db 0FFh
.eh_frame_hdr:0000000000016458                 db 0F4h
.eh_frame_hdr:0000000000016459                 db  18h
.eh_frame_hdr:000000000001645A                 db    0
.eh_frame_hdr:000000000001645B                 db    0
.eh_frame_hdr:000000000001645C                 db 0C0h
.eh_frame_hdr:000000000001645D                 db  27h ; '
.eh_frame_hdr:000000000001645E                 db 0FFh
.eh_frame_hdr:000000000001645F                 db 0FFh
.eh_frame_hdr:0000000000016460                 db  18h
.eh_frame_hdr:0000000000016461                 db  19h
.eh_frame_hdr:0000000000016462                 db    0
.eh_frame_hdr:0000000000016463                 db    0
.eh_frame_hdr:0000000000016464                 db 0A0h
.eh_frame_hdr:0000000000016465                 db  28h ; (
.eh_frame_hdr:0000000000016466                 db 0FFh
.eh_frame_hdr:0000000000016467                 db 0FFh
.eh_frame_hdr:0000000000016468                 db  5Ch ; \
.eh_frame_hdr:0000000000016469                 db  19h
.eh_frame_hdr:000000000001646A                 db    0
.eh_frame_hdr:000000000001646B                 db    0
.eh_frame_hdr:000000000001646C                 db 0E0h
.eh_frame_hdr:000000000001646D                 db  2Ah ; *
.eh_frame_hdr:000000000001646E                 db 0FFh
.eh_frame_hdr:000000000001646F                 db 0FFh
.eh_frame_hdr:0000000000016470                 db 0ACh
.eh_frame_hdr:0000000000016471                 db  19h
.eh_frame_hdr:0000000000016472                 db    0
.eh_frame_hdr:0000000000016473                 db    0
.eh_frame_hdr:0000000000016474                 db  80h
.eh_frame_hdr:0000000000016475                 db  2Bh ; +
.eh_frame_hdr:0000000000016476                 db 0FFh
.eh_frame_hdr:0000000000016477                 db 0FFh
.eh_frame_hdr:0000000000016478                 db 0D8h
.eh_frame_hdr:0000000000016479                 db  19h
.eh_frame_hdr:000000000001647A                 db    0
.eh_frame_hdr:000000000001647B                 db    0
.eh_frame_hdr:000000000001647C                 db  10h
.eh_frame_hdr:000000000001647D                 db  2Ch ; ,
.eh_frame_hdr:000000000001647E                 db 0FFh
.eh_frame_hdr:000000000001647F                 db 0FFh
.eh_frame_hdr:0000000000016480                 db  14h
.eh_frame_hdr:0000000000016481                 db  1Ah
.eh_frame_hdr:0000000000016482                 db    0
.eh_frame_hdr:0000000000016483                 db    0
.eh_frame_hdr:0000000000016484                 db  70h ; p
.eh_frame_hdr:0000000000016485                 db  2Dh ; -
.eh_frame_hdr:0000000000016486                 db 0FFh
.eh_frame_hdr:0000000000016487                 db 0FFh
.eh_frame_hdr:0000000000016488                 db  78h ; x
.eh_frame_hdr:0000000000016489                 db  1Ah
.eh_frame_hdr:000000000001648A                 db    0
.eh_frame_hdr:000000000001648B                 db    0
.eh_frame_hdr:000000000001648C                 db  30h ; 0
.eh_frame_hdr:000000000001648D                 db  30h ; 0
.eh_frame_hdr:000000000001648E                 db 0FFh
.eh_frame_hdr:000000000001648F                 db 0FFh
.eh_frame_hdr:0000000000016490                 db 0C4h
.eh_frame_hdr:0000000000016491                 db  1Ah
.eh_frame_hdr:0000000000016492                 db    0
.eh_frame_hdr:0000000000016493                 db    0
.eh_frame_hdr:0000000000016494                 db  30h ; 0
.eh_frame_hdr:0000000000016495                 db  32h ; 2
.eh_frame_hdr:0000000000016496                 db 0FFh
.eh_frame_hdr:0000000000016497                 db 0FFh
.eh_frame_hdr:0000000000016498                 db  10h
.eh_frame_hdr:0000000000016499                 db  1Bh
.eh_frame_hdr:000000000001649A                 db    0
.eh_frame_hdr:000000000001649B                 db    0
.eh_frame_hdr:000000000001649C                 db  10h
.eh_frame_hdr:000000000001649D                 db  33h ; 3
.eh_frame_hdr:000000000001649E                 db 0FFh
.eh_frame_hdr:000000000001649F                 db 0FFh
.eh_frame_hdr:00000000000164A0                 db  5Ch ; \
.eh_frame_hdr:00000000000164A1                 db  1Bh
.eh_frame_hdr:00000000000164A2                 db    0
.eh_frame_hdr:00000000000164A3                 db    0
.eh_frame_hdr:00000000000164A4                 db 0B0h
.eh_frame_hdr:00000000000164A5                 db  36h ; 6
.eh_frame_hdr:00000000000164A6                 db 0FFh
.eh_frame_hdr:00000000000164A7                 db 0FFh
.eh_frame_hdr:00000000000164A8                 db 0A8h
.eh_frame_hdr:00000000000164A9                 db  1Bh
.eh_frame_hdr:00000000000164AA                 db    0
.eh_frame_hdr:00000000000164AB                 db    0
.eh_frame_hdr:00000000000164AC                 db    0
.eh_frame_hdr:00000000000164AD                 db  38h ; 8
.eh_frame_hdr:00000000000164AE                 db 0FFh
.eh_frame_hdr:00000000000164AF                 db 0FFh
.eh_frame_hdr:00000000000164B0                 db 0F4h
.eh_frame_hdr:00000000000164B1                 db  1Bh
.eh_frame_hdr:00000000000164B2                 db    0
.eh_frame_hdr:00000000000164B3                 db    0
.eh_frame_hdr:00000000000164B4                 db 0F0h
.eh_frame_hdr:00000000000164B5                 db  38h ; 8
.eh_frame_hdr:00000000000164B6                 db 0FFh
.eh_frame_hdr:00000000000164B7                 db 0FFh
.eh_frame_hdr:00000000000164B8                 db  38h ; 8
.eh_frame_hdr:00000000000164B9                 db  1Ch
.eh_frame_hdr:00000000000164BA                 db    0
.eh_frame_hdr:00000000000164BB                 db    0
.eh_frame_hdr:00000000000164BC                 db    0
.eh_frame_hdr:00000000000164BD                 db  3Ah ; :
.eh_frame_hdr:00000000000164BE                 db 0FFh
.eh_frame_hdr:00000000000164BF                 db 0FFh
.eh_frame_hdr:00000000000164C0                 db  60h ; `
.eh_frame_hdr:00000000000164C1                 db  1Ch
.eh_frame_hdr:00000000000164C2                 db    0
.eh_frame_hdr:00000000000164C3                 db    0
.eh_frame_hdr:00000000000164C4                 db 0D0h
.eh_frame_hdr:00000000000164C5                 db  3Ah ; :
.eh_frame_hdr:00000000000164C6                 db 0FFh
.eh_frame_hdr:00000000000164C7                 db 0FFh
.eh_frame_hdr:00000000000164C8                 db  98h
.eh_frame_hdr:00000000000164C9                 db  1Ch
.eh_frame_hdr:00000000000164CA                 db    0
.eh_frame_hdr:00000000000164CB                 db    0
.eh_frame_hdr:00000000000164CC                 db  70h ; p
.eh_frame_hdr:00000000000164CD                 db  42h ; B
.eh_frame_hdr:00000000000164CE                 db 0FFh
.eh_frame_hdr:00000000000164CF                 db 0FFh
.eh_frame_hdr:00000000000164D0                 db 0E8h
.eh_frame_hdr:00000000000164D1                 db  1Ch
.eh_frame_hdr:00000000000164D2                 db    0
.eh_frame_hdr:00000000000164D3                 db    0
.eh_frame_hdr:00000000000164D4                 db 0B0h
.eh_frame_hdr:00000000000164D5                 db  44h ; D
.eh_frame_hdr:00000000000164D6                 db 0FFh
.eh_frame_hdr:00000000000164D7                 db 0FFh
.eh_frame_hdr:00000000000164D8                 db  38h ; 8
.eh_frame_hdr:00000000000164D9                 db  1Dh
.eh_frame_hdr:00000000000164DA                 db    0
.eh_frame_hdr:00000000000164DB                 db    0
.eh_frame_hdr:00000000000164DC                 db  50h ; P
.eh_frame_hdr:00000000000164DD                 db  50h ; P
.eh_frame_hdr:00000000000164DE                 db 0FFh
.eh_frame_hdr:00000000000164DF                 db 0FFh
.eh_frame_hdr:00000000000164E0                 db  88h
.eh_frame_hdr:00000000000164E1                 db  1Dh
.eh_frame_hdr:00000000000164E2                 db    0
.eh_frame_hdr:00000000000164E3                 db    0
.eh_frame_hdr:00000000000164E4                 db 0E0h
.eh_frame_hdr:00000000000164E5                 db  50h ; P
.eh_frame_hdr:00000000000164E6                 db 0FFh
.eh_frame_hdr:00000000000164E7                 db 0FFh
.eh_frame_hdr:00000000000164E8                 db 0BCh
.eh_frame_hdr:00000000000164E9                 db  1Dh
.eh_frame_hdr:00000000000164EA                 db    0
.eh_frame_hdr:00000000000164EB                 db    0
.eh_frame_hdr:00000000000164EC                 db  30h ; 0
.eh_frame_hdr:00000000000164ED                 db  51h ; Q
.eh_frame_hdr:00000000000164EE                 db 0FFh
.eh_frame_hdr:00000000000164EF                 db 0FFh
.eh_frame_hdr:00000000000164F0                 db 0E8h
.eh_frame_hdr:00000000000164F1                 db  1Dh
.eh_frame_hdr:00000000000164F2                 db    0
.eh_frame_hdr:00000000000164F3                 db    0
.eh_frame_hdr:00000000000164F4                 db 0D0h
.eh_frame_hdr:00000000000164F5                 db  51h ; Q
.eh_frame_hdr:00000000000164F6                 db 0FFh
.eh_frame_hdr:00000000000164F7                 db 0FFh
.eh_frame_hdr:00000000000164F8                 db  18h
.eh_frame_hdr:00000000000164F9                 db  1Eh
.eh_frame_hdr:00000000000164FA                 db    0
.eh_frame_hdr:00000000000164FB                 db    0
.eh_frame_hdr:00000000000164FC                 db  20h
.eh_frame_hdr:00000000000164FD                 db  52h ; R
.eh_frame_hdr:00000000000164FE                 db 0FFh
.eh_frame_hdr:00000000000164FF                 db 0FFh
.eh_frame_hdr:0000000000016500                 db  4Ch ; L
.eh_frame_hdr:0000000000016501                 db  1Eh
.eh_frame_hdr:0000000000016502                 db    0
.eh_frame_hdr:0000000000016503                 db    0
.eh_frame_hdr:0000000000016504                 db  30h ; 0
.eh_frame_hdr:0000000000016505                 db  5Ah ; Z
.eh_frame_hdr:0000000000016506                 db 0FFh
.eh_frame_hdr:0000000000016507                 db 0FFh
.eh_frame_hdr:0000000000016508                 db  90h
.eh_frame_hdr:0000000000016509                 db  1Eh
.eh_frame_hdr:000000000001650A                 db    0
.eh_frame_hdr:000000000001650B                 db    0
.eh_frame_hdr:000000000001650C                 db 0A0h
.eh_frame_hdr:000000000001650D                 db  5Ch ; \
.eh_frame_hdr:000000000001650E                 db 0FFh
.eh_frame_hdr:000000000001650F                 db 0FFh
.eh_frame_hdr:0000000000016510                 db 0F0h
.eh_frame_hdr:0000000000016511                 db  1Eh
.eh_frame_hdr:0000000000016512                 db    0
.eh_frame_hdr:0000000000016513                 db    0
.eh_frame_hdr:0000000000016514                 db 0D0h
.eh_frame_hdr:0000000000016515                 db  61h ; a
.eh_frame_hdr:0000000000016516                 db 0FFh
.eh_frame_hdr:0000000000016517                 db 0FFh
.eh_frame_hdr:0000000000016518                 db  40h ; @
.eh_frame_hdr:0000000000016519                 db  1Fh
.eh_frame_hdr:000000000001651A                 db    0
.eh_frame_hdr:000000000001651B                 db    0
.eh_frame_hdr:000000000001651C                 db  30h ; 0
.eh_frame_hdr:000000000001651D                 db  64h ; d
.eh_frame_hdr:000000000001651E                 db 0FFh
.eh_frame_hdr:000000000001651F                 db 0FFh
.eh_frame_hdr:0000000000016520                 db  7Ch ; |
.eh_frame_hdr:0000000000016521                 db  1Fh
.eh_frame_hdr:0000000000016522                 db    0
.eh_frame_hdr:0000000000016523                 db    0
.eh_frame_hdr:0000000000016524                 db  90h
.eh_frame_hdr:0000000000016525                 db  6Bh ; k
.eh_frame_hdr:0000000000016526                 db 0FFh
.eh_frame_hdr:0000000000016527                 db 0FFh
.eh_frame_hdr:0000000000016528                 db 0CCh
.eh_frame_hdr:0000000000016529                 db  1Fh
.eh_frame_hdr:000000000001652A                 db    0
.eh_frame_hdr:000000000001652B                 db    0
.eh_frame_hdr:000000000001652C                 db  80h
.eh_frame_hdr:000000000001652D                 db  74h ; t
.eh_frame_hdr:000000000001652E                 db 0FFh
.eh_frame_hdr:000000000001652F                 db 0FFh
.eh_frame_hdr:0000000000016530                 db 0FCh
.eh_frame_hdr:0000000000016531                 db  1Fh
.eh_frame_hdr:0000000000016532                 db    0
.eh_frame_hdr:0000000000016533                 db    0
.eh_frame_hdr:0000000000016534                 db  20h
.eh_frame_hdr:0000000000016535                 db  76h ; v
.eh_frame_hdr:0000000000016536                 db 0FFh
.eh_frame_hdr:0000000000016537                 db 0FFh
.eh_frame_hdr:0000000000016538                 db  68h ; h
.eh_frame_hdr:0000000000016539                 db  20h
.eh_frame_hdr:000000000001653A                 db    0
.eh_frame_hdr:000000000001653B                 db    0
.eh_frame_hdr:000000000001653C                 db  10h
.eh_frame_hdr:000000000001653D                 db  7Fh ; 
.eh_frame_hdr:000000000001653E                 db 0FFh
.eh_frame_hdr:000000000001653F                 db 0FFh
.eh_frame_hdr:0000000000016540                 db 0C8h
.eh_frame_hdr:0000000000016541                 db  20h
.eh_frame_hdr:0000000000016542                 db    0
.eh_frame_hdr:0000000000016543                 db    0
.eh_frame_hdr:0000000000016544                 db    0
.eh_frame_hdr:0000000000016545                 db  81h
.eh_frame_hdr:0000000000016546                 db 0FFh
.eh_frame_hdr:0000000000016547                 db 0FFh
.eh_frame_hdr:0000000000016548                 db  14h
.eh_frame_hdr:0000000000016549                 db  21h ; !
.eh_frame_hdr:000000000001654A                 db    0
.eh_frame_hdr:000000000001654B                 db    0
.eh_frame_hdr:000000000001654C                 db  40h ; @
.eh_frame_hdr:000000000001654D                 db  84h
.eh_frame_hdr:000000000001654E                 db 0FFh
.eh_frame_hdr:000000000001654F                 db 0FFh
.eh_frame_hdr:0000000000016550                 db  74h ; t
.eh_frame_hdr:0000000000016551                 db  21h ; !
.eh_frame_hdr:0000000000016552                 db    0
.eh_frame_hdr:0000000000016553                 db    0
.eh_frame_hdr:0000000000016554                 db  70h ; p
.eh_frame_hdr:0000000000016555                 db  9Bh
.eh_frame_hdr:0000000000016556                 db 0FFh
.eh_frame_hdr:0000000000016557                 db 0FFh
.eh_frame_hdr:0000000000016558                 db 0C4h
.eh_frame_hdr:0000000000016559                 db  21h ; !
.eh_frame_hdr:000000000001655A                 db    0
.eh_frame_hdr:000000000001655B                 db    0
.eh_frame_hdr:000000000001655C                 db 0C0h
.eh_frame_hdr:000000000001655D                 db 0A3h
.eh_frame_hdr:000000000001655E                 db 0FFh
.eh_frame_hdr:000000000001655F                 db 0FFh
.eh_frame_hdr:0000000000016560                 db  24h ; $
.eh_frame_hdr:0000000000016561                 db  22h ; "
.eh_frame_hdr:0000000000016562                 db    0
.eh_frame_hdr:0000000000016563                 db    0
.eh_frame_hdr:0000000000016564                 db  20h
.eh_frame_hdr:0000000000016565                 db 0A6h
.eh_frame_hdr:0000000000016566                 db 0FFh
.eh_frame_hdr:0000000000016567                 db 0FFh
.eh_frame_hdr:0000000000016568                 db  68h ; h
.eh_frame_hdr:0000000000016569                 db  22h ; "
.eh_frame_hdr:000000000001656A                 db    0
.eh_frame_hdr:000000000001656B                 db    0
.eh_frame_hdr:000000000001656C                 db  20h
.eh_frame_hdr:000000000001656D                 db 0ADh
.eh_frame_hdr:000000000001656E                 db 0FFh
.eh_frame_hdr:000000000001656F                 db 0FFh
.eh_frame_hdr:0000000000016570                 db 0B4h
.eh_frame_hdr:0000000000016571                 db  22h ; "
.eh_frame_hdr:0000000000016572                 db    0
.eh_frame_hdr:0000000000016573                 db    0
.eh_frame_hdr:0000000000016574                 db 0E0h
.eh_frame_hdr:0000000000016575                 db 0ADh
.eh_frame_hdr:0000000000016576                 db 0FFh
.eh_frame_hdr:0000000000016577                 db 0FFh
.eh_frame_hdr:0000000000016578                 db 0F4h
.eh_frame_hdr:0000000000016579                 db  22h ; "
.eh_frame_hdr:000000000001657A                 db    0
.eh_frame_hdr:000000000001657B                 db    0
.eh_frame_hdr:000000000001657C                 db 0C0h
.eh_frame_hdr:000000000001657D                 db 0C2h
.eh_frame_hdr:000000000001657E                 db 0FFh
.eh_frame_hdr:000000000001657F                 db 0FFh
.eh_frame_hdr:0000000000016580                 db  54h ; T
.eh_frame_hdr:0000000000016581                 db  23h ; #
.eh_frame_hdr:0000000000016582                 db    0
.eh_frame_hdr:0000000000016583                 db    0
.eh_frame_hdr:0000000000016584                 db  50h ; P
.eh_frame_hdr:0000000000016585                 db 0C4h
.eh_frame_hdr:0000000000016586                 db 0FFh
.eh_frame_hdr:0000000000016587                 db 0FFh
.eh_frame_hdr:0000000000016588                 db 0A0h
.eh_frame_hdr:0000000000016589                 db  23h ; #
.eh_frame_hdr:000000000001658A                 db    0
.eh_frame_hdr:000000000001658B                 db    0
.eh_frame_hdr:000000000001658C                 db 0D0h
.eh_frame_hdr:000000000001658D                 db 0C5h
.eh_frame_hdr:000000000001658E                 db 0FFh
.eh_frame_hdr:000000000001658F                 db 0FFh
.eh_frame_hdr:0000000000016590                 db 0F0h
.eh_frame_hdr:0000000000016591                 db  23h ; #
.eh_frame_hdr:0000000000016592                 db    0
.eh_frame_hdr:0000000000016593                 db    0
.eh_frame_hdr:0000000000016594                 db 0D0h
.eh_frame_hdr:0000000000016595                 db 0D6h
.eh_frame_hdr:0000000000016596                 db 0FFh
.eh_frame_hdr:0000000000016597                 db 0FFh
.eh_frame_hdr:0000000000016598                 db  40h ; @
.eh_frame_hdr:0000000000016599                 db  24h ; $
.eh_frame_hdr:000000000001659A                 db    0
.eh_frame_hdr:000000000001659B                 db    0
.eh_frame_hdr:000000000001659C                 db  40h ; @
.eh_frame_hdr:000000000001659D                 db 0D7h
.eh_frame_hdr:000000000001659E                 db 0FFh
.eh_frame_hdr:000000000001659F                 db 0FFh
.eh_frame_hdr:00000000000165A0                 db  60h ; `
.eh_frame_hdr:00000000000165A1                 db  24h ; $
.eh_frame_hdr:00000000000165A2                 db    0
.eh_frame_hdr:00000000000165A3                 db    0
.eh_frame_hdr:00000000000165A4                 db  50h ; P
.eh_frame_hdr:00000000000165A5                 db 0D7h
.eh_frame_hdr:00000000000165A6                 db 0FFh
.eh_frame_hdr:00000000000165A7                 db 0FFh
.eh_frame_hdr:00000000000165A8                 db  74h ; t
.eh_frame_hdr:00000000000165A9                 db  24h ; $
.eh_frame_hdr:00000000000165AA                 db    0
.eh_frame_hdr:00000000000165AB                 db    0
.eh_frame_hdr:00000000000165AC                 db  20h
.eh_frame_hdr:00000000000165AD                 db 0D8h
.eh_frame_hdr:00000000000165AE                 db 0FFh
.eh_frame_hdr:00000000000165AF                 db 0FFh
.eh_frame_hdr:00000000000165B0                 db 0A0h
.eh_frame_hdr:00000000000165B1                 db  24h ; $
.eh_frame_hdr:00000000000165B2                 db    0
.eh_frame_hdr:00000000000165B3                 db    0
.eh_frame_hdr:00000000000165B4                 db 0A0h
.eh_frame_hdr:00000000000165B5                 db 0DCh
.eh_frame_hdr:00000000000165B6                 db 0FFh
.eh_frame_hdr:00000000000165B7                 db 0FFh
.eh_frame_hdr:00000000000165B8                 db    0
.eh_frame_hdr:00000000000165B9                 db  25h ; %
.eh_frame_hdr:00000000000165BA                 db    0
.eh_frame_hdr:00000000000165BB                 db    0
.eh_frame_hdr:00000000000165BC                 db 0C0h
.eh_frame_hdr:00000000000165BD                 db 0DDh
.eh_frame_hdr:00000000000165BE                 db 0FFh
.eh_frame_hdr:00000000000165BF                 db 0FFh
.eh_frame_hdr:00000000000165C0                 db  58h ; X
.eh_frame_hdr:00000000000165C1                 db  25h ; %
.eh_frame_hdr:00000000000165C2                 db    0
.eh_frame_hdr:00000000000165C3                 db    0
.eh_frame_hdr:00000000000165C4                 db 0D0h
.eh_frame_hdr:00000000000165C5                 db 0DEh
.eh_frame_hdr:00000000000165C6                 db 0FFh
.eh_frame_hdr:00000000000165C7                 db 0FFh
.eh_frame_hdr:00000000000165C8                 db 0A4h
.eh_frame_hdr:00000000000165C9                 db  25h ; %
.eh_frame_hdr:00000000000165CA                 db    0
.eh_frame_hdr:00000000000165CB                 db    0
.eh_frame_hdr:00000000000165CC                 db  60h ; `
.eh_frame_hdr:00000000000165CD                 db 0DFh
.eh_frame_hdr:00000000000165CE                 db 0FFh
.eh_frame_hdr:00000000000165CF                 db 0FFh
.eh_frame_hdr:00000000000165D0                 db 0E0h
.eh_frame_hdr:00000000000165D1                 db  25h ; %
.eh_frame_hdr:00000000000165D2                 db    0
.eh_frame_hdr:00000000000165D3                 db    0
.eh_frame_hdr:00000000000165D4                 db 0B0h
.eh_frame_hdr:00000000000165D5                 db 0DFh
.eh_frame_hdr:00000000000165D6                 db 0FFh
.eh_frame_hdr:00000000000165D7                 db 0FFh
.eh_frame_hdr:00000000000165D8                 db 0FCh
.eh_frame_hdr:00000000000165D9                 db  25h ; %
.eh_frame_hdr:00000000000165DA                 db    0
.eh_frame_hdr:00000000000165DB                 db    0
.eh_frame_hdr:00000000000165DC                 db  50h ; P
.eh_frame_hdr:00000000000165DD                 db 0E0h
.eh_frame_hdr:00000000000165DE                 db 0FFh
.eh_frame_hdr:00000000000165DF                 db 0FFh
.eh_frame_hdr:00000000000165E0                 db  58h ; X
.eh_frame_hdr:00000000000165E1                 db  26h ; &
.eh_frame_hdr:00000000000165E2                 db    0
.eh_frame_hdr:00000000000165E3                 db    0
.eh_frame_hdr:00000000000165E4                 db  70h ; p
.eh_frame_hdr:00000000000165E5                 db 0E0h
.eh_frame_hdr:00000000000165E6                 db 0FFh
.eh_frame_hdr:00000000000165E7                 db 0FFh
.eh_frame_hdr:00000000000165E8                 db  78h ; x
.eh_frame_hdr:00000000000165E9                 db  26h ; &
.eh_frame_hdr:00000000000165EA                 db    0
.eh_frame_hdr:00000000000165EB                 db    0
.eh_frame_hdr:00000000000165EC                 db  90h
.eh_frame_hdr:00000000000165ED                 db 0E0h
.eh_frame_hdr:00000000000165EE                 db 0FFh
.eh_frame_hdr:00000000000165EF                 db 0FFh
.eh_frame_hdr:00000000000165F0                 db  98h
.eh_frame_hdr:00000000000165F1                 db  26h ; &
.eh_frame_hdr:00000000000165F2                 db    0
.eh_frame_hdr:00000000000165F3                 db    0
.eh_frame_hdr:00000000000165F4                 db 0B0h
.eh_frame_hdr:00000000000165F5                 db 0E0h
.eh_frame_hdr:00000000000165F6                 db 0FFh
.eh_frame_hdr:00000000000165F7                 db 0FFh
.eh_frame_hdr:00000000000165F8                 db 0BCh
.eh_frame_hdr:00000000000165F9                 db  26h ; &
.eh_frame_hdr:00000000000165FA                 db    0
.eh_frame_hdr:00000000000165FB                 db    0
.eh_frame_hdr:00000000000165FC                 db 0D0h
.eh_frame_hdr:00000000000165FD                 db 0E0h
.eh_frame_hdr:00000000000165FE                 db 0FFh
.eh_frame_hdr:00000000000165FF                 db 0FFh
.eh_frame_hdr:0000000000016600                 db 0E0h
.eh_frame_hdr:0000000000016601                 db  26h ; &
.eh_frame_hdr:0000000000016602                 db    0
.eh_frame_hdr:0000000000016603                 db    0
.eh_frame_hdr:0000000000016604                 db  20h
.eh_frame_hdr:0000000000016605                 db 0E1h
.eh_frame_hdr:0000000000016606                 db 0FFh
.eh_frame_hdr:0000000000016607                 db 0FFh
.eh_frame_hdr:0000000000016608                 db 0F8h
.eh_frame_hdr:0000000000016609                 db  26h ; &
.eh_frame_hdr:000000000001660A                 db    0
.eh_frame_hdr:000000000001660B                 db    0
.eh_frame_hdr:000000000001660C                 db 0A0h
.eh_frame_hdr:000000000001660D                 db 0E1h
.eh_frame_hdr:000000000001660E                 db 0FFh
.eh_frame_hdr:000000000001660F                 db 0FFh
.eh_frame_hdr:0000000000016610                 db  48h ; H
.eh_frame_hdr:0000000000016611                 db  27h ; '
.eh_frame_hdr:0000000000016612                 db    0
.eh_frame_hdr:0000000000016613                 db    0
.eh_frame_hdr:0000000000016614                 db    0
.eh_frame_hdr:0000000000016615                 db 0E2h
.eh_frame_hdr:0000000000016616                 db 0FFh
.eh_frame_hdr:0000000000016617                 db 0FFh
.eh_frame_hdr:0000000000016618                 db  68h ; h
.eh_frame_hdr:0000000000016619                 db  27h ; '
.eh_frame_hdr:000000000001661A                 db    0
.eh_frame_hdr:000000000001661B                 db    0
.eh_frame_hdr:000000000001661C                 db  40h ; @
.eh_frame_hdr:000000000001661D                 db 0E2h
.eh_frame_hdr:000000000001661E                 db 0FFh
.eh_frame_hdr:000000000001661F                 db 0FFh
.eh_frame_hdr:0000000000016620                 db  88h
.eh_frame_hdr:0000000000016621                 db  27h ; '
.eh_frame_hdr:0000000000016622                 db    0
.eh_frame_hdr:0000000000016623                 db    0
.eh_frame_hdr:0000000000016624                 db 0B0h
.eh_frame_hdr:0000000000016625                 db 0E2h
.eh_frame_hdr:0000000000016626                 db 0FFh
.eh_frame_hdr:0000000000016627                 db 0FFh
.eh_frame_hdr:0000000000016628                 db 0D0h
.eh_frame_hdr:0000000000016629                 db  27h ; '
.eh_frame_hdr:000000000001662A                 db    0
.eh_frame_hdr:000000000001662B                 db    0
.eh_frame_hdr:000000000001662C                 db 0C0h
.eh_frame_hdr:000000000001662D                 db 0E2h
.eh_frame_hdr:000000000001662E                 db 0FFh
.eh_frame_hdr:000000000001662F                 db 0FFh
.eh_frame_hdr:0000000000016630                 db 0E8h
.eh_frame_hdr:0000000000016631                 db  27h ; '
.eh_frame_hdr:0000000000016632                 db    0
.eh_frame_hdr:0000000000016633                 db    0
.eh_frame_hdr:0000000000016633 _eh_frame_hdr   ends
.eh_frame_hdr:0000000000016633
LOAD:0000000000016634 ; ===========================================================================
LOAD:0000000000016634
LOAD:0000000000016634 ; Segment type: Pure code
LOAD:0000000000016634 ; Segment permissions: Read/Execute
LOAD:0000000000016634 LOAD            segment byte public 'CODE' use64
LOAD:0000000000016634                 assume cs:LOAD
LOAD:0000000000016634                 ;org 16634h
LOAD:0000000000016634                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000016634                 align 8
LOAD:0000000000016634 LOAD            ends
LOAD:0000000000016634
.eh_frame:0000000000016638 ; ===========================================================================
.eh_frame:0000000000016638
.eh_frame:0000000000016638 ; Segment type: Pure data
.eh_frame:0000000000016638 ; Segment permissions: Read
.eh_frame:0000000000016638 _eh_frame       segment qword public 'CONST' use64
.eh_frame:0000000000016638                 assume cs:_eh_frame
.eh_frame:0000000000016638                 ;org 16638h
.eh_frame:0000000000016638                 db  14h
.eh_frame:0000000000016639                 db    0
.eh_frame:000000000001663A                 db    0
.eh_frame:000000000001663B                 db    0
.eh_frame:000000000001663C                 db    0
.eh_frame:000000000001663D                 db    0
.eh_frame:000000000001663E                 db    0
.eh_frame:000000000001663F                 db    0
.eh_frame:0000000000016640                 db    1
.eh_frame:0000000000016641                 db  7Ah ; z
.eh_frame:0000000000016642                 db  52h ; R
.eh_frame:0000000000016643                 db    0
.eh_frame:0000000000016644                 db    1
.eh_frame:0000000000016645                 db  78h ; x
.eh_frame:0000000000016646                 db  10h
.eh_frame:0000000000016647                 db    1
.eh_frame:0000000000016648                 db  1Bh
.eh_frame:0000000000016649                 db  0Ch
.eh_frame:000000000001664A                 db    7
.eh_frame:000000000001664B                 db    8
.eh_frame:000000000001664C                 db  90h
.eh_frame:000000000001664D                 db    1
.eh_frame:000000000001664E                 db    7
.eh_frame:000000000001664F                 db  10h
.eh_frame:0000000000016650                 db  14h
.eh_frame:0000000000016651                 db    0
.eh_frame:0000000000016652                 db    0
.eh_frame:0000000000016653                 db    0
.eh_frame:0000000000016654                 db  1Ch
.eh_frame:0000000000016655                 db    0
.eh_frame:0000000000016656                 db    0
.eh_frame:0000000000016657                 db    0
.eh_frame:0000000000016658                 db 0B8h
.eh_frame:0000000000016659                 db 0BCh
.eh_frame:000000000001665A                 db 0FEh
.eh_frame:000000000001665B                 db 0FFh
.eh_frame:000000000001665C                 db  2Bh ; +
.eh_frame:000000000001665D                 db    0
.eh_frame:000000000001665E                 db    0
.eh_frame:000000000001665F                 db    0
.eh_frame:0000000000016660                 db    0
.eh_frame:0000000000016661                 db    0
.eh_frame:0000000000016662                 db    0
.eh_frame:0000000000016663                 db    0
.eh_frame:0000000000016664                 db    0
.eh_frame:0000000000016665                 db    0
.eh_frame:0000000000016666                 db    0
.eh_frame:0000000000016667                 db    0
.eh_frame:0000000000016668                 db  14h
.eh_frame:0000000000016669                 db    0
.eh_frame:000000000001666A                 db    0
.eh_frame:000000000001666B                 db    0
.eh_frame:000000000001666C                 db    0
.eh_frame:000000000001666D                 db    0
.eh_frame:000000000001666E                 db    0
.eh_frame:000000000001666F                 db    0
.eh_frame:0000000000016670                 db    1
.eh_frame:0000000000016671                 db  7Ah ; z
.eh_frame:0000000000016672                 db  52h ; R
.eh_frame:0000000000016673                 db    0
.eh_frame:0000000000016674                 db    1
.eh_frame:0000000000016675                 db  78h ; x
.eh_frame:0000000000016676                 db  10h
.eh_frame:0000000000016677                 db    1
.eh_frame:0000000000016678                 db  1Bh
.eh_frame:0000000000016679                 db  0Ch
.eh_frame:000000000001667A                 db    7
.eh_frame:000000000001667B                 db    8
.eh_frame:000000000001667C                 db  90h
.eh_frame:000000000001667D                 db    1
.eh_frame:000000000001667E                 db    0
.eh_frame:000000000001667F                 db    0
.eh_frame:0000000000016680                 db  24h ; $
.eh_frame:0000000000016681                 db    0
.eh_frame:0000000000016682                 db    0
.eh_frame:0000000000016683                 db    0
.eh_frame:0000000000016684                 db  1Ch
.eh_frame:0000000000016685                 db    0
.eh_frame:0000000000016686                 db    0
.eh_frame:0000000000016687                 db    0
.eh_frame:0000000000016688                 db  18h
.eh_frame:0000000000016689                 db 0B2h
.eh_frame:000000000001668A                 db 0FEh
.eh_frame:000000000001668B                 db 0FFh
.eh_frame:000000000001668C                 db 0E0h
.eh_frame:000000000001668D                 db    3
.eh_frame:000000000001668E                 db    0
.eh_frame:000000000001668F                 db    0
.eh_frame:0000000000016690                 db    0
.eh_frame:0000000000016691                 db  0Eh
.eh_frame:0000000000016692                 db  10h
.eh_frame:0000000000016693                 db  46h ; F
.eh_frame:0000000000016694                 db  0Eh
.eh_frame:0000000000016695                 db  18h
.eh_frame:0000000000016696                 db  4Ah ; J
.eh_frame:0000000000016697                 db  0Fh
.eh_frame:0000000000016698                 db  0Bh
.eh_frame:0000000000016699                 db  77h ; w
.eh_frame:000000000001669A                 db    8
.eh_frame:000000000001669B                 db  80h
.eh_frame:000000000001669C                 db    0
.eh_frame:000000000001669D                 db  3Fh ; ?
.eh_frame:000000000001669E                 db  1Ah
.eh_frame:000000000001669F                 db  3Bh ; ;
.eh_frame:00000000000166A0                 db  2Ah ; *
.eh_frame:00000000000166A1                 db  33h ; 3
.eh_frame:00000000000166A2                 db  24h ; $
.eh_frame:00000000000166A3                 db  22h ; "
.eh_frame:00000000000166A4                 db    0
.eh_frame:00000000000166A5                 db    0
.eh_frame:00000000000166A6                 db    0
.eh_frame:00000000000166A7                 db    0
.eh_frame:00000000000166A8                 db  14h
.eh_frame:00000000000166A9                 db    0
.eh_frame:00000000000166AA                 db    0
.eh_frame:00000000000166AB                 db    0
.eh_frame:00000000000166AC                 db  44h ; D
.eh_frame:00000000000166AD                 db    0
.eh_frame:00000000000166AE                 db    0
.eh_frame:00000000000166AF                 db    0
.eh_frame:00000000000166B0                 db 0D0h
.eh_frame:00000000000166B1                 db 0B5h
.eh_frame:00000000000166B2                 db 0FEh
.eh_frame:00000000000166B3                 db 0FFh
.eh_frame:00000000000166B4                 db    8
.eh_frame:00000000000166B5                 db    0
.eh_frame:00000000000166B6                 db    0
.eh_frame:00000000000166B7                 db    0
.eh_frame:00000000000166B8                 db    0
.eh_frame:00000000000166B9                 db    0
.eh_frame:00000000000166BA                 db    0
.eh_frame:00000000000166BB                 db    0
.eh_frame:00000000000166BC                 db    0
.eh_frame:00000000000166BD                 db    0
.eh_frame:00000000000166BE                 db    0
.eh_frame:00000000000166BF                 db    0
.eh_frame:00000000000166C0                 db  30h ; 0
.eh_frame:00000000000166C1                 db    0
.eh_frame:00000000000166C2                 db    0
.eh_frame:00000000000166C3                 db    0
.eh_frame:00000000000166C4                 db  5Ch ; \
.eh_frame:00000000000166C5                 db    0
.eh_frame:00000000000166C6                 db    0
.eh_frame:00000000000166C7                 db    0
.eh_frame:00000000000166C8                 db  58h ; X
.eh_frame:00000000000166C9                 db 0BDh
.eh_frame:00000000000166CA                 db 0FEh
.eh_frame:00000000000166CB                 db 0FFh
.eh_frame:00000000000166CC                 db 0B5h
.eh_frame:00000000000166CD                 db    0
.eh_frame:00000000000166CE                 db    0
.eh_frame:00000000000166CF                 db    0
.eh_frame:00000000000166D0                 db    0
.eh_frame:00000000000166D1                 db  59h ; Y
.eh_frame:00000000000166D2                 db  0Eh
.eh_frame:00000000000166D3                 db  10h
.eh_frame:00000000000166D4                 db  86h
.eh_frame:00000000000166D5                 db    2
.eh_frame:00000000000166D6                 db  45h ; E
.eh_frame:00000000000166D7                 db  0Eh
.eh_frame:00000000000166D8                 db  18h
.eh_frame:00000000000166D9                 db  83h
.eh_frame:00000000000166DA                 db    3
.eh_frame:00000000000166DB                 db  47h ; G
.eh_frame:00000000000166DC                 db  0Eh
.eh_frame:00000000000166DD                 db  20h
.eh_frame:00000000000166DE                 db    2
.eh_frame:00000000000166DF                 db  56h ; V
.eh_frame:00000000000166E0                 db  0Eh
.eh_frame:00000000000166E1                 db  18h
.eh_frame:00000000000166E2                 db  46h ; F
.eh_frame:00000000000166E3                 db  0Eh
.eh_frame:00000000000166E4                 db  10h
.eh_frame:00000000000166E5                 db  41h ; A
.eh_frame:00000000000166E6                 db  0Eh
.eh_frame:00000000000166E7                 db    8
.eh_frame:00000000000166E8                 db  46h ; F
.eh_frame:00000000000166E9                 db 0C3h
.eh_frame:00000000000166EA                 db 0C6h
.eh_frame:00000000000166EB                 db  55h ; U
.eh_frame:00000000000166EC                 db  0Eh
.eh_frame:00000000000166ED                 db  20h
.eh_frame:00000000000166EE                 db  83h
.eh_frame:00000000000166EF                 db    3
.eh_frame:00000000000166F0                 db  86h
.eh_frame:00000000000166F1                 db    2
.eh_frame:00000000000166F2                 db    0
.eh_frame:00000000000166F3                 db    0
.eh_frame:00000000000166F4                 db  18h
.eh_frame:00000000000166F5                 db    0
.eh_frame:00000000000166F6                 db    0
.eh_frame:00000000000166F7                 db    0
.eh_frame:00000000000166F8                 db  90h
.eh_frame:00000000000166F9                 db    0
.eh_frame:00000000000166FA                 db    0
.eh_frame:00000000000166FB                 db    0
.eh_frame:00000000000166FC                 db 0E4h
.eh_frame:00000000000166FD                 db 0BDh
.eh_frame:00000000000166FE                 db 0FEh
.eh_frame:00000000000166FF                 db 0FFh
.eh_frame:0000000000016700                 db  71h ; q
.eh_frame:0000000000016701                 db    0
.eh_frame:0000000000016702                 db    0
.eh_frame:0000000000016703                 db    0
.eh_frame:0000000000016704                 db    0
.eh_frame:0000000000016705                 db  44h ; D
.eh_frame:0000000000016706                 db  0Eh
.eh_frame:0000000000016707                 db  10h
.eh_frame:0000000000016708                 db    2
.eh_frame:0000000000016709                 db  48h ; H
.eh_frame:000000000001670A                 db  0Ah
.eh_frame:000000000001670B                 db  0Eh
.eh_frame:000000000001670C                 db    8
.eh_frame:000000000001670D                 db  41h ; A
.eh_frame:000000000001670E                 db  0Bh
.eh_frame:000000000001670F                 db    0
.eh_frame:0000000000016710                 db  7Ch ; |
.eh_frame:0000000000016711                 db    0
.eh_frame:0000000000016712                 db    0
.eh_frame:0000000000016713                 db    0
.eh_frame:0000000000016714                 db 0ACh
.eh_frame:0000000000016715                 db    0
.eh_frame:0000000000016716                 db    0
.eh_frame:0000000000016717                 db    0
.eh_frame:0000000000016718                 db  48h ; H
.eh_frame:0000000000016719                 db 0BEh
.eh_frame:000000000001671A                 db 0FEh
.eh_frame:000000000001671B                 db 0FFh
.eh_frame:000000000001671C                 db    8
.eh_frame:000000000001671D                 db    4
.eh_frame:000000000001671E                 db    0
.eh_frame:000000000001671F                 db    0
.eh_frame:0000000000016720                 db    0
.eh_frame:0000000000016721                 db  42h ; B
.eh_frame:0000000000016722                 db  0Eh
.eh_frame:0000000000016723                 db  10h
.eh_frame:0000000000016724                 db  8Fh
.eh_frame:0000000000016725                 db    2
.eh_frame:0000000000016726                 db  42h ; B
.eh_frame:0000000000016727                 db  0Eh
.eh_frame:0000000000016728                 db  18h
.eh_frame:0000000000016729                 db  8Eh
.eh_frame:000000000001672A                 db    3
.eh_frame:000000000001672B                 db  45h ; E
.eh_frame:000000000001672C                 db  0Eh
.eh_frame:000000000001672D                 db  20h
.eh_frame:000000000001672E                 db  8Dh
.eh_frame:000000000001672F                 db    4
.eh_frame:0000000000016730                 db  42h ; B
.eh_frame:0000000000016731                 db  0Eh
.eh_frame:0000000000016732                 db  28h ; (
.eh_frame:0000000000016733                 db  8Ch
.eh_frame:0000000000016734                 db    5
.eh_frame:0000000000016735                 db  46h ; F
.eh_frame:0000000000016736                 db  0Eh
.eh_frame:0000000000016737                 db  30h ; 0
.eh_frame:0000000000016738                 db  86h
.eh_frame:0000000000016739                 db    6
.eh_frame:000000000001673A                 db  41h ; A
.eh_frame:000000000001673B                 db  0Eh
.eh_frame:000000000001673C                 db  38h ; 8
.eh_frame:000000000001673D                 db  83h
.eh_frame:000000000001673E                 db    7
.eh_frame:000000000001673F                 db  44h ; D
.eh_frame:0000000000016740                 db  0Eh
.eh_frame:0000000000016741                 db  50h ; P
.eh_frame:0000000000016742                 db    3
.eh_frame:0000000000016743                 db  75h ; u
.eh_frame:0000000000016744                 db    1
.eh_frame:0000000000016745                 db  0Ah
.eh_frame:0000000000016746                 db  0Eh
.eh_frame:0000000000016747                 db  38h ; 8
.eh_frame:0000000000016748                 db  41h ; A
.eh_frame:0000000000016749                 db  0Eh
.eh_frame:000000000001674A                 db  30h ; 0
.eh_frame:000000000001674B                 db  41h ; A
.eh_frame:000000000001674C                 db  0Eh
.eh_frame:000000000001674D                 db  28h ; (
.eh_frame:000000000001674E                 db  42h ; B
.eh_frame:000000000001674F                 db  0Eh
.eh_frame:0000000000016750                 db  20h
.eh_frame:0000000000016751                 db  42h ; B
.eh_frame:0000000000016752                 db  0Eh
.eh_frame:0000000000016753                 db  18h
.eh_frame:0000000000016754                 db  42h ; B
.eh_frame:0000000000016755                 db  0Eh
.eh_frame:0000000000016756                 db  10h
.eh_frame:0000000000016757                 db  42h ; B
.eh_frame:0000000000016758                 db  0Eh
.eh_frame:0000000000016759                 db    8
.eh_frame:000000000001675A                 db  4Bh ; K
.eh_frame:000000000001675B                 db  0Bh
.eh_frame:000000000001675C                 db    3
.eh_frame:000000000001675D                 db 0CBh
.eh_frame:000000000001675E                 db    1
.eh_frame:000000000001675F                 db  0Ah
.eh_frame:0000000000016760                 db  0Eh
.eh_frame:0000000000016761                 db  38h ; 8
.eh_frame:0000000000016762                 db  46h ; F
.eh_frame:0000000000016763                 db  0Eh
.eh_frame:0000000000016764                 db  30h ; 0
.eh_frame:0000000000016765                 db  41h ; A
.eh_frame:0000000000016766                 db  0Eh
.eh_frame:0000000000016767                 db  28h ; (
.eh_frame:0000000000016768                 db  42h ; B
.eh_frame:0000000000016769                 db  0Eh
.eh_frame:000000000001676A                 db  20h
.eh_frame:000000000001676B                 db  42h ; B
.eh_frame:000000000001676C                 db  0Eh
.eh_frame:000000000001676D                 db  18h
.eh_frame:000000000001676E                 db  42h ; B
.eh_frame:000000000001676F                 db  0Eh
.eh_frame:0000000000016770                 db  10h
.eh_frame:0000000000016771                 db  42h ; B
.eh_frame:0000000000016772                 db  0Eh
.eh_frame:0000000000016773                 db    8
.eh_frame:0000000000016774                 db  46h ; F
.eh_frame:0000000000016775                 db  0Bh
.eh_frame:0000000000016776                 db    2
.eh_frame:0000000000016777                 db  4Fh ; O
.eh_frame:0000000000016778                 db  0Ah
.eh_frame:0000000000016779                 db  0Eh
.eh_frame:000000000001677A                 db  38h ; 8
.eh_frame:000000000001677B                 db  43h ; C
.eh_frame:000000000001677C                 db  0Eh
.eh_frame:000000000001677D                 db  30h ; 0
.eh_frame:000000000001677E                 db  41h ; A
.eh_frame:000000000001677F                 db  0Eh
.eh_frame:0000000000016780                 db  28h ; (
.eh_frame:0000000000016781                 db  42h ; B
.eh_frame:0000000000016782                 db  0Eh
.eh_frame:0000000000016783                 db  20h
.eh_frame:0000000000016784                 db  42h ; B
.eh_frame:0000000000016785                 db  0Eh
.eh_frame:0000000000016786                 db  18h
.eh_frame:0000000000016787                 db  42h ; B
.eh_frame:0000000000016788                 db  0Eh
.eh_frame:0000000000016789                 db  10h
.eh_frame:000000000001678A                 db  42h ; B
.eh_frame:000000000001678B                 db  0Eh
.eh_frame:000000000001678C                 db    8
.eh_frame:000000000001678D                 db  41h ; A
.eh_frame:000000000001678E                 db  0Bh
.eh_frame:000000000001678F                 db    0
.eh_frame:0000000000016790                 db  28h ; (
.eh_frame:0000000000016791                 db    0
.eh_frame:0000000000016792                 db    0
.eh_frame:0000000000016793                 db    0
.eh_frame:0000000000016794                 db  2Ch ; ,
.eh_frame:0000000000016795                 db    1
.eh_frame:0000000000016796                 db    0
.eh_frame:0000000000016797                 db    0
.eh_frame:0000000000016798                 db 0D8h
.eh_frame:0000000000016799                 db 0C1h
.eh_frame:000000000001679A                 db 0FEh
.eh_frame:000000000001679B                 db 0FFh
.eh_frame:000000000001679C                 db  6Ah ; j
.eh_frame:000000000001679D                 db    4
.eh_frame:000000000001679E                 db    0
.eh_frame:000000000001679F                 db    0
.eh_frame:00000000000167A0                 db    0
.eh_frame:00000000000167A1                 db  42h ; B
.eh_frame:00000000000167A2                 db  0Eh
.eh_frame:00000000000167A3                 db  10h
.eh_frame:00000000000167A4                 db  8Dh
.eh_frame:00000000000167A5                 db    2
.eh_frame:00000000000167A6                 db  42h ; B
.eh_frame:00000000000167A7                 db  0Eh
.eh_frame:00000000000167A8                 db  18h
.eh_frame:00000000000167A9                 db  8Ch
.eh_frame:00000000000167AA                 db    3
.eh_frame:00000000000167AB                 db  46h ; F
.eh_frame:00000000000167AC                 db  0Eh
.eh_frame:00000000000167AD                 db  20h
.eh_frame:00000000000167AE                 db  86h
.eh_frame:00000000000167AF                 db    4
.eh_frame:00000000000167B0                 db  41h ; A
.eh_frame:00000000000167B1                 db  0Eh
.eh_frame:00000000000167B2                 db  28h ; (
.eh_frame:00000000000167B3                 db  83h
.eh_frame:00000000000167B4                 db    5
.eh_frame:00000000000167B5                 db  49h ; I
.eh_frame:00000000000167B6                 db  0Eh
.eh_frame:00000000000167B7                 db 0B0h
.eh_frame:00000000000167B8                 db    1
.eh_frame:00000000000167B9                 db    0
.eh_frame:00000000000167BA                 db    0
.eh_frame:00000000000167BB                 db    0
.eh_frame:00000000000167BC                 db  58h ; X
.eh_frame:00000000000167BD                 db    0
.eh_frame:00000000000167BE                 db    0
.eh_frame:00000000000167BF                 db    0
.eh_frame:00000000000167C0                 db  58h ; X
.eh_frame:00000000000167C1                 db    1
.eh_frame:00000000000167C2                 db    0
.eh_frame:00000000000167C3                 db    0
.eh_frame:00000000000167C4                 db 0CCh
.eh_frame:00000000000167C5                 db 0B4h
.eh_frame:00000000000167C6                 db 0FEh
.eh_frame:00000000000167C7                 db 0FFh
.eh_frame:00000000000167C8                 db  74h ; t
.eh_frame:00000000000167C9                 db    6
.eh_frame:00000000000167CA                 db    0
.eh_frame:00000000000167CB                 db    0
.eh_frame:00000000000167CC                 db    0
.eh_frame:00000000000167CD                 db  42h ; B
.eh_frame:00000000000167CE                 db  0Eh
.eh_frame:00000000000167CF                 db  10h
.eh_frame:00000000000167D0                 db  8Fh
.eh_frame:00000000000167D1                 db    2
.eh_frame:00000000000167D2                 db  42h ; B
.eh_frame:00000000000167D3                 db  0Eh
.eh_frame:00000000000167D4                 db  18h
.eh_frame:00000000000167D5                 db  8Eh
.eh_frame:00000000000167D6                 db    3
.eh_frame:00000000000167D7                 db  49h ; I
.eh_frame:00000000000167D8                 db  0Eh
.eh_frame:00000000000167D9                 db  20h
.eh_frame:00000000000167DA                 db  8Dh
.eh_frame:00000000000167DB                 db    4
.eh_frame:00000000000167DC                 db  42h ; B
.eh_frame:00000000000167DD                 db  0Eh
.eh_frame:00000000000167DE                 db  28h ; (
.eh_frame:00000000000167DF                 db  8Ch
.eh_frame:00000000000167E0                 db    5
.eh_frame:00000000000167E1                 db  48h ; H
.eh_frame:00000000000167E2                 db  0Eh
.eh_frame:00000000000167E3                 db  30h ; 0
.eh_frame:00000000000167E4                 db  86h
.eh_frame:00000000000167E5                 db    6
.eh_frame:00000000000167E6                 db  41h ; A
.eh_frame:00000000000167E7                 db  0Eh
.eh_frame:00000000000167E8                 db  38h ; 8
.eh_frame:00000000000167E9                 db  83h
.eh_frame:00000000000167EA                 db    7
.eh_frame:00000000000167EB                 db  56h ; V
.eh_frame:00000000000167EC                 db  0Eh
.eh_frame:00000000000167ED                 db  50h ; P
.eh_frame:00000000000167EE                 db    3
.eh_frame:00000000000167EF                 db  41h ; A
.eh_frame:00000000000167F0                 db    1
.eh_frame:00000000000167F1                 db  0Ah
.eh_frame:00000000000167F2                 db  0Eh
.eh_frame:00000000000167F3                 db  58h ; X
.eh_frame:00000000000167F4                 db  50h ; P
.eh_frame:00000000000167F5                 db  0Eh
.eh_frame:00000000000167F6                 db  60h ; `
.eh_frame:00000000000167F7                 db  71h ; q
.eh_frame:00000000000167F8                 db  0Bh
.eh_frame:00000000000167F9                 db    3
.eh_frame:00000000000167FA                 db  2Eh ; .
.eh_frame:00000000000167FB                 db    4
.eh_frame:00000000000167FC                 db  0Ah
.eh_frame:00000000000167FD                 db  0Eh
.eh_frame:00000000000167FE                 db  38h ; 8
.eh_frame:00000000000167FF                 db  45h ; E
.eh_frame:0000000000016800                 db  0Eh
.eh_frame:0000000000016801                 db  30h ; 0
.eh_frame:0000000000016802                 db  45h ; E
.eh_frame:0000000000016803                 db  0Eh
.eh_frame:0000000000016804                 db  28h ; (
.eh_frame:0000000000016805                 db  42h ; B
.eh_frame:0000000000016806                 db  0Eh
.eh_frame:0000000000016807                 db  20h
.eh_frame:0000000000016808                 db  42h ; B
.eh_frame:0000000000016809                 db  0Eh
.eh_frame:000000000001680A                 db  18h
.eh_frame:000000000001680B                 db  42h ; B
.eh_frame:000000000001680C                 db  0Eh
.eh_frame:000000000001680D                 db  10h
.eh_frame:000000000001680E                 db  42h ; B
.eh_frame:000000000001680F                 db  0Eh
.eh_frame:0000000000016810                 db    8
.eh_frame:0000000000016811                 db  41h ; A
.eh_frame:0000000000016812                 db  0Bh
.eh_frame:0000000000016813                 db    0
.eh_frame:0000000000016814                 db    0
.eh_frame:0000000000016815                 db    0
.eh_frame:0000000000016816                 db    0
.eh_frame:0000000000016817                 db    0
.eh_frame:0000000000016818                 db  10h
.eh_frame:0000000000016819                 db    0
.eh_frame:000000000001681A                 db    0
.eh_frame:000000000001681B                 db    0
.eh_frame:000000000001681C                 db 0B4h
.eh_frame:000000000001681D                 db    1
.eh_frame:000000000001681E                 db    0
.eh_frame:000000000001681F                 db    0
.eh_frame:0000000000016820                 db 0C0h
.eh_frame:0000000000016821                 db 0C5h
.eh_frame:0000000000016822                 db 0FEh
.eh_frame:0000000000016823                 db 0FFh
.eh_frame:0000000000016824                 db    8
.eh_frame:0000000000016825                 db    0
.eh_frame:0000000000016826                 db    0
.eh_frame:0000000000016827                 db    0
.eh_frame:0000000000016828                 db    0
.eh_frame:0000000000016829                 db    0
.eh_frame:000000000001682A                 db    0
.eh_frame:000000000001682B                 db    0
.eh_frame:000000000001682C                 db  10h
.eh_frame:000000000001682D                 db    0
.eh_frame:000000000001682E                 db    0
.eh_frame:000000000001682F                 db    0
.eh_frame:0000000000016830                 db 0C8h
.eh_frame:0000000000016831                 db    1
.eh_frame:0000000000016832                 db    0
.eh_frame:0000000000016833                 db    0
.eh_frame:0000000000016834                 db 0BCh
.eh_frame:0000000000016835                 db 0C5h
.eh_frame:0000000000016836                 db 0FEh
.eh_frame:0000000000016837                 db 0FFh
.eh_frame:0000000000016838                 db    8
.eh_frame:0000000000016839                 db    0
.eh_frame:000000000001683A                 db    0
.eh_frame:000000000001683B                 db    0
.eh_frame:000000000001683C                 db    0
.eh_frame:000000000001683D                 db    0
.eh_frame:000000000001683E                 db    0
.eh_frame:000000000001683F                 db    0
.eh_frame:0000000000016840                 db  2Ch ; ,
.eh_frame:0000000000016841                 db    0
.eh_frame:0000000000016842                 db    0
.eh_frame:0000000000016843                 db    0
.eh_frame:0000000000016844                 db 0DCh
.eh_frame:0000000000016845                 db    1
.eh_frame:0000000000016846                 db    0
.eh_frame:0000000000016847                 db    0
.eh_frame:0000000000016848                 db 0B8h
.eh_frame:0000000000016849                 db 0C5h
.eh_frame:000000000001684A                 db 0FEh
.eh_frame:000000000001684B                 db 0FFh
.eh_frame:000000000001684C                 db 0A4h
.eh_frame:000000000001684D                 db    0
.eh_frame:000000000001684E                 db    0
.eh_frame:000000000001684F                 db    0
.eh_frame:0000000000016850                 db    0
.eh_frame:0000000000016851                 db  41h ; A
.eh_frame:0000000000016852                 db  0Eh
.eh_frame:0000000000016853                 db  10h
.eh_frame:0000000000016854                 db  86h
.eh_frame:0000000000016855                 db    2
.eh_frame:0000000000016856                 db  41h ; A
.eh_frame:0000000000016857                 db  0Eh
.eh_frame:0000000000016858                 db  18h
.eh_frame:0000000000016859                 db  83h
.eh_frame:000000000001685A                 db    3
.eh_frame:000000000001685B                 db  44h ; D
.eh_frame:000000000001685C                 db  0Eh
.eh_frame:000000000001685D                 db  20h
.eh_frame:000000000001685E                 db  7Ah ; z
.eh_frame:000000000001685F                 db  0Ah
.eh_frame:0000000000016860                 db  0Eh
.eh_frame:0000000000016861                 db  18h
.eh_frame:0000000000016862                 db  41h ; A
.eh_frame:0000000000016863                 db  0Eh
.eh_frame:0000000000016864                 db  10h
.eh_frame:0000000000016865                 db  41h ; A
.eh_frame:0000000000016866                 db  0Eh
.eh_frame:0000000000016867                 db    8
.eh_frame:0000000000016868                 db  41h ; A
.eh_frame:0000000000016869                 db  0Bh
.eh_frame:000000000001686A                 db    0
.eh_frame:000000000001686B                 db    0
.eh_frame:000000000001686C                 db    0
.eh_frame:000000000001686D                 db    0
.eh_frame:000000000001686E                 db    0
.eh_frame:000000000001686F                 db    0
.eh_frame:0000000000016870                 db  10h
.eh_frame:0000000000016871                 db    0
.eh_frame:0000000000016872                 db    0
.eh_frame:0000000000016873                 db    0
.eh_frame:0000000000016874                 db  0Ch
.eh_frame:0000000000016875                 db    2
.eh_frame:0000000000016876                 db    0
.eh_frame:0000000000016877                 db    0
.eh_frame:0000000000016878                 db  38h ; 8
.eh_frame:0000000000016879                 db 0C6h
.eh_frame:000000000001687A                 db 0FEh
.eh_frame:000000000001687B                 db 0FFh
.eh_frame:000000000001687C                 db    5
.eh_frame:000000000001687D                 db    0
.eh_frame:000000000001687E                 db    0
.eh_frame:000000000001687F                 db    0
.eh_frame:0000000000016880                 db    0
.eh_frame:0000000000016881                 db    0
.eh_frame:0000000000016882                 db    0
.eh_frame:0000000000016883                 db    0
.eh_frame:0000000000016884                 db  18h
.eh_frame:0000000000016885                 db    0
.eh_frame:0000000000016886                 db    0
.eh_frame:0000000000016887                 db    0
.eh_frame:0000000000016888                 db  20h
.eh_frame:0000000000016889                 db    2
.eh_frame:000000000001688A                 db    0
.eh_frame:000000000001688B                 db    0
.eh_frame:000000000001688C                 db  34h ; 4
.eh_frame:000000000001688D                 db 0C6h
.eh_frame:000000000001688E                 db 0FEh
.eh_frame:000000000001688F                 db 0FFh
.eh_frame:0000000000016890                 db  22h ; "
.eh_frame:0000000000016891                 db    0
.eh_frame:0000000000016892                 db    0
.eh_frame:0000000000016893                 db    0
.eh_frame:0000000000016894                 db    0
.eh_frame:0000000000016895                 db  46h ; F
.eh_frame:0000000000016896                 db  0Eh
.eh_frame:0000000000016897                 db  10h
.eh_frame:0000000000016898                 db  83h
.eh_frame:0000000000016899                 db    2
.eh_frame:000000000001689A                 db  4Eh ; N
.eh_frame:000000000001689B                 db 0C3h
.eh_frame:000000000001689C                 db  0Eh
.eh_frame:000000000001689D                 db    8
.eh_frame:000000000001689E                 db    0
.eh_frame:000000000001689F                 db    0
.eh_frame:00000000000168A0                 db  10h
.eh_frame:00000000000168A1                 db    0
.eh_frame:00000000000168A2                 db    0
.eh_frame:00000000000168A3                 db    0
.eh_frame:00000000000168A4                 db  3Ch ; <
.eh_frame:00000000000168A5                 db    2
.eh_frame:00000000000168A6                 db    0
.eh_frame:00000000000168A7                 db    0
.eh_frame:00000000000168A8                 db  48h ; H
.eh_frame:00000000000168A9                 db 0C6h
.eh_frame:00000000000168AA                 db 0FEh
.eh_frame:00000000000168AB                 db 0FFh
.eh_frame:00000000000168AC                 db  10h
.eh_frame:00000000000168AD                 db    0
.eh_frame:00000000000168AE                 db    0
.eh_frame:00000000000168AF                 db    0
.eh_frame:00000000000168B0                 db    0
.eh_frame:00000000000168B1                 db    0
.eh_frame:00000000000168B2                 db    0
.eh_frame:00000000000168B3                 db    0
.eh_frame:00000000000168B4                 db  60h ; `
.eh_frame:00000000000168B5                 db    0
.eh_frame:00000000000168B6                 db    0
.eh_frame:00000000000168B7                 db    0
.eh_frame:00000000000168B8                 db  50h ; P
.eh_frame:00000000000168B9                 db    2
.eh_frame:00000000000168BA                 db    0
.eh_frame:00000000000168BB                 db    0
.eh_frame:00000000000168BC                 db  44h ; D
.eh_frame:00000000000168BD                 db 0C6h
.eh_frame:00000000000168BE                 db 0FEh
.eh_frame:00000000000168BF                 db 0FFh
.eh_frame:00000000000168C0                 db    8
.eh_frame:00000000000168C1                 db    1
.eh_frame:00000000000168C2                 db    0
.eh_frame:00000000000168C3                 db    0
.eh_frame:00000000000168C4                 db    0
.eh_frame:00000000000168C5                 db  42h ; B
.eh_frame:00000000000168C6                 db  0Eh
.eh_frame:00000000000168C7                 db  10h
.eh_frame:00000000000168C8                 db  8Fh
.eh_frame:00000000000168C9                 db    2
.eh_frame:00000000000168CA                 db  42h ; B
.eh_frame:00000000000168CB                 db  0Eh
.eh_frame:00000000000168CC                 db  18h
.eh_frame:00000000000168CD                 db  8Eh
.eh_frame:00000000000168CE                 db    3
.eh_frame:00000000000168CF                 db  42h ; B
.eh_frame:00000000000168D0                 db  0Eh
.eh_frame:00000000000168D1                 db  20h
.eh_frame:00000000000168D2                 db  8Dh
.eh_frame:00000000000168D3                 db    4
.eh_frame:00000000000168D4                 db  42h ; B
.eh_frame:00000000000168D5                 db  0Eh
.eh_frame:00000000000168D6                 db  28h ; (
.eh_frame:00000000000168D7                 db  8Ch
.eh_frame:00000000000168D8                 db    5
.eh_frame:00000000000168D9                 db  41h ; A
.eh_frame:00000000000168DA                 db  0Eh
.eh_frame:00000000000168DB                 db  30h ; 0
.eh_frame:00000000000168DC                 db  86h
.eh_frame:00000000000168DD                 db    6
.eh_frame:00000000000168DE                 db  41h ; A
.eh_frame:00000000000168DF                 db  0Eh
.eh_frame:00000000000168E0                 db  38h ; 8
.eh_frame:00000000000168E1                 db  83h
.eh_frame:00000000000168E2                 db    7
.eh_frame:00000000000168E3                 db  44h ; D
.eh_frame:00000000000168E4                 db  0Eh
.eh_frame:00000000000168E5                 db  50h ; P
.eh_frame:00000000000168E6                 db    2
.eh_frame:00000000000168E7                 db  96h
.eh_frame:00000000000168E8                 db  0Ah
.eh_frame:00000000000168E9                 db  0Eh
.eh_frame:00000000000168EA                 db  38h ; 8
.eh_frame:00000000000168EB                 db  41h ; A
.eh_frame:00000000000168EC                 db  0Eh
.eh_frame:00000000000168ED                 db  30h ; 0
.eh_frame:00000000000168EE                 db  41h ; A
.eh_frame:00000000000168EF                 db  0Eh
.eh_frame:00000000000168F0                 db  28h ; (
.eh_frame:00000000000168F1                 db  42h ; B
.eh_frame:00000000000168F2                 db  0Eh
.eh_frame:00000000000168F3                 db  20h
.eh_frame:00000000000168F4                 db  42h ; B
.eh_frame:00000000000168F5                 db  0Eh
.eh_frame:00000000000168F6                 db  18h
.eh_frame:00000000000168F7                 db  42h ; B
.eh_frame:00000000000168F8                 db  0Eh
.eh_frame:00000000000168F9                 db  10h
.eh_frame:00000000000168FA                 db  42h ; B
.eh_frame:00000000000168FB                 db  0Eh
.eh_frame:00000000000168FC                 db    8
.eh_frame:00000000000168FD                 db  42h ; B
.eh_frame:00000000000168FE                 db  0Bh
.eh_frame:00000000000168FF                 db    2
.eh_frame:0000000000016900                 db  44h ; D
.eh_frame:0000000000016901                 db  0Ah
.eh_frame:0000000000016902                 db  0Eh
.eh_frame:0000000000016903                 db  38h ; 8
.eh_frame:0000000000016904                 db  43h ; C
.eh_frame:0000000000016905                 db  0Eh
.eh_frame:0000000000016906                 db  30h ; 0
.eh_frame:0000000000016907                 db  41h ; A
.eh_frame:0000000000016908                 db  0Eh
.eh_frame:0000000000016909                 db  28h ; (
.eh_frame:000000000001690A                 db  42h ; B
.eh_frame:000000000001690B                 db  0Eh
.eh_frame:000000000001690C                 db  20h
.eh_frame:000000000001690D                 db  42h ; B
.eh_frame:000000000001690E                 db  0Eh
.eh_frame:000000000001690F                 db  18h
.eh_frame:0000000000016910                 db  42h ; B
.eh_frame:0000000000016911                 db  0Eh
.eh_frame:0000000000016912                 db  10h
.eh_frame:0000000000016913                 db  42h ; B
.eh_frame:0000000000016914                 db  0Eh
.eh_frame:0000000000016915                 db    8
.eh_frame:0000000000016916                 db  41h ; A
.eh_frame:0000000000016917                 db  0Bh
.eh_frame:0000000000016918                 db  10h
.eh_frame:0000000000016919                 db    0
.eh_frame:000000000001691A                 db    0
.eh_frame:000000000001691B                 db    0
.eh_frame:000000000001691C                 db 0B4h
.eh_frame:000000000001691D                 db    2
.eh_frame:000000000001691E                 db    0
.eh_frame:000000000001691F                 db    0
.eh_frame:0000000000016920                 db 0F0h
.eh_frame:0000000000016921                 db 0C6h
.eh_frame:0000000000016922                 db 0FEh
.eh_frame:0000000000016923                 db 0FFh
.eh_frame:0000000000016924                 db  0Ah
.eh_frame:0000000000016925                 db    0
.eh_frame:0000000000016926                 db    0
.eh_frame:0000000000016927                 db    0
.eh_frame:0000000000016928                 db    0
.eh_frame:0000000000016929                 db    0
.eh_frame:000000000001692A                 db    0
.eh_frame:000000000001692B                 db    0
.eh_frame:000000000001692C                 db  10h
.eh_frame:000000000001692D                 db    0
.eh_frame:000000000001692E                 db    0
.eh_frame:000000000001692F                 db    0
.eh_frame:0000000000016930                 db 0C8h
.eh_frame:0000000000016931                 db    2
.eh_frame:0000000000016932                 db    0
.eh_frame:0000000000016933                 db    0
.eh_frame:0000000000016934                 db 0ECh
.eh_frame:0000000000016935                 db 0C6h
.eh_frame:0000000000016936                 db 0FEh
.eh_frame:0000000000016937                 db 0FFh
.eh_frame:0000000000016938                 db    9
.eh_frame:0000000000016939                 db    0
.eh_frame:000000000001693A                 db    0
.eh_frame:000000000001693B                 db    0
.eh_frame:000000000001693C                 db    0
.eh_frame:000000000001693D                 db    0
.eh_frame:000000000001693E                 db    0
.eh_frame:000000000001693F                 db    0
.eh_frame:0000000000016940                 db  1Ch
.eh_frame:0000000000016941                 db    0
.eh_frame:0000000000016942                 db    0
.eh_frame:0000000000016943                 db    0
.eh_frame:0000000000016944                 db 0DCh
.eh_frame:0000000000016945                 db    2
.eh_frame:0000000000016946                 db    0
.eh_frame:0000000000016947                 db    0
.eh_frame:0000000000016948                 db 0E8h
.eh_frame:0000000000016949                 db 0C6h
.eh_frame:000000000001694A                 db 0FEh
.eh_frame:000000000001694B                 db 0FFh
.eh_frame:000000000001694C                 db  9Fh
.eh_frame:000000000001694D                 db    0
.eh_frame:000000000001694E                 db    0
.eh_frame:000000000001694F                 db    0
.eh_frame:0000000000016950                 db    0
.eh_frame:0000000000016951                 db  44h ; D
.eh_frame:0000000000016952                 db  0Eh
.eh_frame:0000000000016953                 db  10h
.eh_frame:0000000000016954                 db  83h
.eh_frame:0000000000016955                 db    2
.eh_frame:0000000000016956                 db    2
.eh_frame:0000000000016957                 db  78h ; x
.eh_frame:0000000000016958                 db  0Ah
.eh_frame:0000000000016959                 db  0Eh
.eh_frame:000000000001695A                 db    8
.eh_frame:000000000001695B                 db  41h ; A
.eh_frame:000000000001695C                 db  0Bh
.eh_frame:000000000001695D                 db    0
.eh_frame:000000000001695E                 db    0
.eh_frame:000000000001695F                 db    0
.eh_frame:0000000000016960                 db  40h ; @
.eh_frame:0000000000016961                 db    0
.eh_frame:0000000000016962                 db    0
.eh_frame:0000000000016963                 db    0
.eh_frame:0000000000016964                 db 0FCh
.eh_frame:0000000000016965                 db    2
.eh_frame:0000000000016966                 db    0
.eh_frame:0000000000016967                 db    0
.eh_frame:0000000000016968                 db  68h ; h
.eh_frame:0000000000016969                 db 0C7h
.eh_frame:000000000001696A                 db 0FEh
.eh_frame:000000000001696B                 db 0FFh
.eh_frame:000000000001696C                 db 0E7h
.eh_frame:000000000001696D                 db    0
.eh_frame:000000000001696E                 db    0
.eh_frame:000000000001696F                 db    0
.eh_frame:0000000000016970                 db    0
.eh_frame:0000000000016971                 db  41h ; A
.eh_frame:0000000000016972                 db  0Eh
.eh_frame:0000000000016973                 db  10h
.eh_frame:0000000000016974                 db  86h
.eh_frame:0000000000016975                 db    2
.eh_frame:0000000000016976                 db  41h ; A
.eh_frame:0000000000016977                 db  0Eh
.eh_frame:0000000000016978                 db  18h
.eh_frame:0000000000016979                 db  83h
.eh_frame:000000000001697A                 db    3
.eh_frame:000000000001697B                 db  49h ; I
.eh_frame:000000000001697C                 db  0Eh
.eh_frame:000000000001697D                 db  20h
.eh_frame:000000000001697E                 db  6Eh ; n
.eh_frame:000000000001697F                 db  0Ah
.eh_frame:0000000000016980                 db  0Eh
.eh_frame:0000000000016981                 db  18h
.eh_frame:0000000000016982                 db  41h ; A
.eh_frame:0000000000016983                 db  0Eh
.eh_frame:0000000000016984                 db  10h
.eh_frame:0000000000016985                 db  41h ; A
.eh_frame:0000000000016986                 db  0Eh
.eh_frame:0000000000016987                 db    8
.eh_frame:0000000000016988                 db  45h ; E
.eh_frame:0000000000016989                 db  0Bh
.eh_frame:000000000001698A                 db    2
.eh_frame:000000000001698B                 db  4Ah ; J
.eh_frame:000000000001698C                 db  0Ah
.eh_frame:000000000001698D                 db  0Eh
.eh_frame:000000000001698E                 db  18h
.eh_frame:000000000001698F                 db  41h ; A
.eh_frame:0000000000016990                 db  0Eh
.eh_frame:0000000000016991                 db  10h
.eh_frame:0000000000016992                 db  41h ; A
.eh_frame:0000000000016993                 db  0Eh
.eh_frame:0000000000016994                 db    8
.eh_frame:0000000000016995                 db  44h ; D
.eh_frame:0000000000016996                 db  0Bh
.eh_frame:0000000000016997                 db    2
.eh_frame:0000000000016998                 db  54h ; T
.eh_frame:0000000000016999                 db  0Eh
.eh_frame:000000000001699A                 db  18h
.eh_frame:000000000001699B                 db  41h ; A
.eh_frame:000000000001699C                 db  0Eh
.eh_frame:000000000001699D                 db  10h
.eh_frame:000000000001699E                 db  41h ; A
.eh_frame:000000000001699F                 db  0Eh
.eh_frame:00000000000169A0                 db    8
.eh_frame:00000000000169A1                 db    0
.eh_frame:00000000000169A2                 db    0
.eh_frame:00000000000169A3                 db    0
.eh_frame:00000000000169A4                 db  74h ; t
.eh_frame:00000000000169A5                 db    0
.eh_frame:00000000000169A6                 db    0
.eh_frame:00000000000169A7                 db    0
.eh_frame:00000000000169A8                 db  40h ; @
.eh_frame:00000000000169A9                 db    3
.eh_frame:00000000000169AA                 db    0
.eh_frame:00000000000169AB                 db    0
.eh_frame:00000000000169AC                 db  14h
.eh_frame:00000000000169AD                 db 0C8h
.eh_frame:00000000000169AE                 db 0FEh
.eh_frame:00000000000169AF                 db 0FFh
.eh_frame:00000000000169B0                 db  34h ; 4
.eh_frame:00000000000169B1                 db  12h
.eh_frame:00000000000169B2                 db    0
.eh_frame:00000000000169B3                 db    0
.eh_frame:00000000000169B4                 db    0
.eh_frame:00000000000169B5                 db  42h ; B
.eh_frame:00000000000169B6                 db  0Eh
.eh_frame:00000000000169B7                 db  10h
.eh_frame:00000000000169B8                 db  8Fh
.eh_frame:00000000000169B9                 db    2
.eh_frame:00000000000169BA                 db  42h ; B
.eh_frame:00000000000169BB                 db  0Eh
.eh_frame:00000000000169BC                 db  18h
.eh_frame:00000000000169BD                 db  8Eh
.eh_frame:00000000000169BE                 db    3
.eh_frame:00000000000169BF                 db  45h ; E
.eh_frame:00000000000169C0                 db  0Eh
.eh_frame:00000000000169C1                 db  20h
.eh_frame:00000000000169C2                 db  8Dh
.eh_frame:00000000000169C3                 db    4
.eh_frame:00000000000169C4                 db  42h ; B
.eh_frame:00000000000169C5                 db  0Eh
.eh_frame:00000000000169C6                 db  28h ; (
.eh_frame:00000000000169C7                 db  8Ch
.eh_frame:00000000000169C8                 db    5
.eh_frame:00000000000169C9                 db  44h ; D
.eh_frame:00000000000169CA                 db  0Eh
.eh_frame:00000000000169CB                 db  30h ; 0
.eh_frame:00000000000169CC                 db  86h
.eh_frame:00000000000169CD                 db    6
.eh_frame:00000000000169CE                 db  41h ; A
.eh_frame:00000000000169CF                 db  0Eh
.eh_frame:00000000000169D0                 db  38h ; 8
.eh_frame:00000000000169D1                 db  83h
.eh_frame:00000000000169D2                 db    7
.eh_frame:00000000000169D3                 db  53h ; S
.eh_frame:00000000000169D4                 db  0Eh
.eh_frame:00000000000169D5                 db 0F0h
.eh_frame:00000000000169D6                 db    1
.eh_frame:00000000000169D7                 db    3
.eh_frame:00000000000169D8                 db  81h
.eh_frame:00000000000169D9                 db  0Bh
.eh_frame:00000000000169DA                 db  0Eh
.eh_frame:00000000000169DB                 db 0F8h
.eh_frame:00000000000169DC                 db    1
.eh_frame:00000000000169DD                 db  4Ah ; J
.eh_frame:00000000000169DE                 db  0Eh
.eh_frame:00000000000169DF                 db  80h
.eh_frame:00000000000169E0                 db    2
.eh_frame:00000000000169E1                 db  44h ; D
.eh_frame:00000000000169E2                 db  0Eh
.eh_frame:00000000000169E3                 db  88h
.eh_frame:00000000000169E4                 db    2
.eh_frame:00000000000169E5                 db  45h ; E
.eh_frame:00000000000169E6                 db  0Eh
.eh_frame:00000000000169E7                 db  90h
.eh_frame:00000000000169E8                 db    2
.eh_frame:00000000000169E9                 db  5Fh ; _
.eh_frame:00000000000169EA                 db  0Eh
.eh_frame:00000000000169EB                 db 0F0h
.eh_frame:00000000000169EC                 db    1
.eh_frame:00000000000169ED                 db  64h ; d
.eh_frame:00000000000169EE                 db  0Ah
.eh_frame:00000000000169EF                 db  0Eh
.eh_frame:00000000000169F0                 db  38h ; 8
.eh_frame:00000000000169F1                 db  41h ; A
.eh_frame:00000000000169F2                 db  0Eh
.eh_frame:00000000000169F3                 db  30h ; 0
.eh_frame:00000000000169F4                 db  41h ; A
.eh_frame:00000000000169F5                 db  0Eh
.eh_frame:00000000000169F6                 db  28h ; (
.eh_frame:00000000000169F7                 db  42h ; B
.eh_frame:00000000000169F8                 db  0Eh
.eh_frame:00000000000169F9                 db  20h
.eh_frame:00000000000169FA                 db  42h ; B
.eh_frame:00000000000169FB                 db  0Eh
.eh_frame:00000000000169FC                 db  18h
.eh_frame:00000000000169FD                 db  42h ; B
.eh_frame:00000000000169FE                 db  0Eh
.eh_frame:00000000000169FF                 db  10h
.eh_frame:0000000000016A00                 db  42h ; B
.eh_frame:0000000000016A01                 db  0Eh
.eh_frame:0000000000016A02                 db    8
.eh_frame:0000000000016A03                 db  44h ; D
.eh_frame:0000000000016A04                 db  0Bh
.eh_frame:0000000000016A05                 db    3
.eh_frame:0000000000016A06                 db  99h
.eh_frame:0000000000016A07                 db    5
.eh_frame:0000000000016A08                 db  0Eh
.eh_frame:0000000000016A09                 db 0F8h
.eh_frame:0000000000016A0A                 db    1
.eh_frame:0000000000016A0B                 db  4Dh ; M
.eh_frame:0000000000016A0C                 db  0Eh
.eh_frame:0000000000016A0D                 db  80h
.eh_frame:0000000000016A0E                 db    2
.eh_frame:0000000000016A0F                 db  44h ; D
.eh_frame:0000000000016A10                 db  0Eh
.eh_frame:0000000000016A11                 db  88h
.eh_frame:0000000000016A12                 db    2
.eh_frame:0000000000016A13                 db  47h ; G
.eh_frame:0000000000016A14                 db  0Eh
.eh_frame:0000000000016A15                 db  90h
.eh_frame:0000000000016A16                 db    2
.eh_frame:0000000000016A17                 db  5Bh ; [
.eh_frame:0000000000016A18                 db  0Eh
.eh_frame:0000000000016A19                 db 0F0h
.eh_frame:0000000000016A1A                 db    1
.eh_frame:0000000000016A1B                 db    0
.eh_frame:0000000000016A1C                 db  68h ; h
.eh_frame:0000000000016A1D                 db    0
.eh_frame:0000000000016A1E                 db    0
.eh_frame:0000000000016A1F                 db    0
.eh_frame:0000000000016A20                 db 0B8h
.eh_frame:0000000000016A21                 db    3
.eh_frame:0000000000016A22                 db    0
.eh_frame:0000000000016A23                 db    0
.eh_frame:0000000000016A24                 db 0DCh
.eh_frame:0000000000016A25                 db 0D9h
.eh_frame:0000000000016A26                 db 0FEh
.eh_frame:0000000000016A27                 db 0FFh
.eh_frame:0000000000016A28                 db 0ABh
.eh_frame:0000000000016A29                 db    1
.eh_frame:0000000000016A2A                 db    0
.eh_frame:0000000000016A2B                 db    0
.eh_frame:0000000000016A2C                 db    0
.eh_frame:0000000000016A2D                 db  42h ; B
.eh_frame:0000000000016A2E                 db  0Eh
.eh_frame:0000000000016A2F                 db  10h
.eh_frame:0000000000016A30                 db  8Fh
.eh_frame:0000000000016A31                 db    2
.eh_frame:0000000000016A32                 db  42h ; B
.eh_frame:0000000000016A33                 db  0Eh
.eh_frame:0000000000016A34                 db  18h
.eh_frame:0000000000016A35                 db  8Eh
.eh_frame:0000000000016A36                 db    3
.eh_frame:0000000000016A37                 db  45h ; E
.eh_frame:0000000000016A38                 db  0Eh
.eh_frame:0000000000016A39                 db  20h
.eh_frame:0000000000016A3A                 db  8Dh
.eh_frame:0000000000016A3B                 db    4
.eh_frame:0000000000016A3C                 db  42h ; B
.eh_frame:0000000000016A3D                 db  0Eh
.eh_frame:0000000000016A3E                 db  28h ; (
.eh_frame:0000000000016A3F                 db  8Ch
.eh_frame:0000000000016A40                 db    5
.eh_frame:0000000000016A41                 db  44h ; D
.eh_frame:0000000000016A42                 db  0Eh
.eh_frame:0000000000016A43                 db  30h ; 0
.eh_frame:0000000000016A44                 db  86h
.eh_frame:0000000000016A45                 db    6
.eh_frame:0000000000016A46                 db  41h ; A
.eh_frame:0000000000016A47                 db  0Eh
.eh_frame:0000000000016A48                 db  38h ; 8
.eh_frame:0000000000016A49                 db  83h
.eh_frame:0000000000016A4A                 db    7
.eh_frame:0000000000016A4B                 db  47h ; G
.eh_frame:0000000000016A4C                 db  0Eh
.eh_frame:0000000000016A4D                 db  60h ; `
.eh_frame:0000000000016A4E                 db    2
.eh_frame:0000000000016A4F                 db  99h
.eh_frame:0000000000016A50                 db  0Eh
.eh_frame:0000000000016A51                 db  68h ; h
.eh_frame:0000000000016A52                 db  5Fh ; _
.eh_frame:0000000000016A53                 db  0Eh
.eh_frame:0000000000016A54                 db  70h ; p
.eh_frame:0000000000016A55                 db  46h ; F
.eh_frame:0000000000016A56                 db  0Eh
.eh_frame:0000000000016A57                 db  78h ; x
.eh_frame:0000000000016A58                 db  42h ; B
.eh_frame:0000000000016A59                 db  0Eh
.eh_frame:0000000000016A5A                 db  80h
.eh_frame:0000000000016A5B                 db    1
.eh_frame:0000000000016A5C                 db  59h ; Y
.eh_frame:0000000000016A5D                 db  0Eh
.eh_frame:0000000000016A5E                 db  60h ; `
.eh_frame:0000000000016A5F                 db    2
.eh_frame:0000000000016A60                 db  40h ; @
.eh_frame:0000000000016A61                 db  0Eh
.eh_frame:0000000000016A62                 db  68h ; h
.eh_frame:0000000000016A63                 db  4Bh ; K
.eh_frame:0000000000016A64                 db  0Eh
.eh_frame:0000000000016A65                 db  70h ; p
.eh_frame:0000000000016A66                 db  43h ; C
.eh_frame:0000000000016A67                 db  0Eh
.eh_frame:0000000000016A68                 db  78h ; x
.eh_frame:0000000000016A69                 db  45h ; E
.eh_frame:0000000000016A6A                 db  0Eh
.eh_frame:0000000000016A6B                 db  80h
.eh_frame:0000000000016A6C                 db    1
.eh_frame:0000000000016A6D                 db  5Eh ; ^
.eh_frame:0000000000016A6E                 db  0Eh
.eh_frame:0000000000016A6F                 db  60h ; `
.eh_frame:0000000000016A70                 db  4Ch ; L
.eh_frame:0000000000016A71                 db  0Ah
.eh_frame:0000000000016A72                 db  0Eh
.eh_frame:0000000000016A73                 db  38h ; 8
.eh_frame:0000000000016A74                 db  44h ; D
.eh_frame:0000000000016A75                 db  0Eh
.eh_frame:0000000000016A76                 db  30h ; 0
.eh_frame:0000000000016A77                 db  41h ; A
.eh_frame:0000000000016A78                 db  0Eh
.eh_frame:0000000000016A79                 db  28h ; (
.eh_frame:0000000000016A7A                 db  42h ; B
.eh_frame:0000000000016A7B                 db  0Eh
.eh_frame:0000000000016A7C                 db  20h
.eh_frame:0000000000016A7D                 db  42h ; B
.eh_frame:0000000000016A7E                 db  0Eh
.eh_frame:0000000000016A7F                 db  18h
.eh_frame:0000000000016A80                 db  42h ; B
.eh_frame:0000000000016A81                 db  0Eh
.eh_frame:0000000000016A82                 db  10h
.eh_frame:0000000000016A83                 db  42h ; B
.eh_frame:0000000000016A84                 db  0Eh
.eh_frame:0000000000016A85                 db    8
.eh_frame:0000000000016A86                 db  46h ; F
.eh_frame:0000000000016A87                 db  0Bh
.eh_frame:0000000000016A88                 db  28h ; (
.eh_frame:0000000000016A89                 db    0
.eh_frame:0000000000016A8A                 db    0
.eh_frame:0000000000016A8B                 db    0
.eh_frame:0000000000016A8C                 db  24h ; $
.eh_frame:0000000000016A8D                 db    4
.eh_frame:0000000000016A8E                 db    0
.eh_frame:0000000000016A8F                 db    0
.eh_frame:0000000000016A90                 db  20h
.eh_frame:0000000000016A91                 db 0DBh
.eh_frame:0000000000016A92                 db 0FEh
.eh_frame:0000000000016A93                 db 0FFh
.eh_frame:0000000000016A94                 db  36h ; 6
.eh_frame:0000000000016A95                 db    0
.eh_frame:0000000000016A96                 db    0
.eh_frame:0000000000016A97                 db    0
.eh_frame:0000000000016A98                 db    0
.eh_frame:0000000000016A99                 db  42h ; B
.eh_frame:0000000000016A9A                 db  0Eh
.eh_frame:0000000000016A9B                 db  10h
.eh_frame:0000000000016A9C                 db  8Ch
.eh_frame:0000000000016A9D                 db    2
.eh_frame:0000000000016A9E                 db  41h ; A
.eh_frame:0000000000016A9F                 db  0Eh
.eh_frame:0000000000016AA0                 db  18h
.eh_frame:0000000000016AA1                 db  86h
.eh_frame:0000000000016AA2                 db    3
.eh_frame:0000000000016AA3                 db  41h ; A
.eh_frame:0000000000016AA4                 db  0Eh
.eh_frame:0000000000016AA5                 db  20h
.eh_frame:0000000000016AA6                 db  83h
.eh_frame:0000000000016AA7                 db    4
.eh_frame:0000000000016AA8                 db  6Eh ; n
.eh_frame:0000000000016AA9                 db  0Eh
.eh_frame:0000000000016AAA                 db  18h
.eh_frame:0000000000016AAB                 db  41h ; A
.eh_frame:0000000000016AAC                 db  0Eh
.eh_frame:0000000000016AAD                 db  10h
.eh_frame:0000000000016AAE                 db  42h ; B
.eh_frame:0000000000016AAF                 db  0Eh
.eh_frame:0000000000016AB0                 db    8
.eh_frame:0000000000016AB1                 db    0
.eh_frame:0000000000016AB2                 db    0
.eh_frame:0000000000016AB3                 db    0
.eh_frame:0000000000016AB4                 db  10h
.eh_frame:0000000000016AB5                 db    0
.eh_frame:0000000000016AB6                 db    0
.eh_frame:0000000000016AB7                 db    0
.eh_frame:0000000000016AB8                 db  50h ; P
.eh_frame:0000000000016AB9                 db    4
.eh_frame:0000000000016ABA                 db    0
.eh_frame:0000000000016ABB                 db    0
.eh_frame:0000000000016ABC                 db  34h ; 4
.eh_frame:0000000000016ABD                 db 0DBh
.eh_frame:0000000000016ABE                 db 0FEh
.eh_frame:0000000000016ABF                 db 0FFh
.eh_frame:0000000000016AC0                 db  11h
.eh_frame:0000000000016AC1                 db    0
.eh_frame:0000000000016AC2                 db    0
.eh_frame:0000000000016AC3                 db    0
.eh_frame:0000000000016AC4                 db    0
.eh_frame:0000000000016AC5                 db    0
.eh_frame:0000000000016AC6                 db    0
.eh_frame:0000000000016AC7                 db    0
.eh_frame:0000000000016AC8                 db  10h
.eh_frame:0000000000016AC9                 db    0
.eh_frame:0000000000016ACA                 db    0
.eh_frame:0000000000016ACB                 db    0
.eh_frame:0000000000016ACC                 db  64h ; d
.eh_frame:0000000000016ACD                 db    4
.eh_frame:0000000000016ACE                 db    0
.eh_frame:0000000000016ACF                 db    0
.eh_frame:0000000000016AD0                 db  40h ; @
.eh_frame:0000000000016AD1                 db 0DBh
.eh_frame:0000000000016AD2                 db 0FEh
.eh_frame:0000000000016AD3                 db 0FFh
.eh_frame:0000000000016AD4                 db  11h
.eh_frame:0000000000016AD5                 db    0
.eh_frame:0000000000016AD6                 db    0
.eh_frame:0000000000016AD7                 db    0
.eh_frame:0000000000016AD8                 db    0
.eh_frame:0000000000016AD9                 db    0
.eh_frame:0000000000016ADA                 db    0
.eh_frame:0000000000016ADB                 db    0
.eh_frame:0000000000016ADC                 db  10h
.eh_frame:0000000000016ADD                 db    0
.eh_frame:0000000000016ADE                 db    0
.eh_frame:0000000000016ADF                 db    0
.eh_frame:0000000000016AE0                 db  78h ; x
.eh_frame:0000000000016AE1                 db    4
.eh_frame:0000000000016AE2                 db    0
.eh_frame:0000000000016AE3                 db    0
.eh_frame:0000000000016AE4                 db  4Ch ; L
.eh_frame:0000000000016AE5                 db 0DBh
.eh_frame:0000000000016AE6                 db 0FEh
.eh_frame:0000000000016AE7                 db 0FFh
.eh_frame:0000000000016AE8                 db  35h ; 5
.eh_frame:0000000000016AE9                 db    0
.eh_frame:0000000000016AEA                 db    0
.eh_frame:0000000000016AEB                 db    0
.eh_frame:0000000000016AEC                 db    0
.eh_frame:0000000000016AED                 db    0
.eh_frame:0000000000016AEE                 db    0
.eh_frame:0000000000016AEF                 db    0
.eh_frame:0000000000016AF0                 db  10h
.eh_frame:0000000000016AF1                 db    0
.eh_frame:0000000000016AF2                 db    0
.eh_frame:0000000000016AF3                 db    0
.eh_frame:0000000000016AF4                 db  8Ch
.eh_frame:0000000000016AF5                 db    4
.eh_frame:0000000000016AF6                 db    0
.eh_frame:0000000000016AF7                 db    0
.eh_frame:0000000000016AF8                 db  78h ; x
.eh_frame:0000000000016AF9                 db 0DBh
.eh_frame:0000000000016AFA                 db 0FEh
.eh_frame:0000000000016AFB                 db 0FFh
.eh_frame:0000000000016AFC                 db  15h
.eh_frame:0000000000016AFD                 db    0
.eh_frame:0000000000016AFE                 db    0
.eh_frame:0000000000016AFF                 db    0
.eh_frame:0000000000016B00                 db    0
.eh_frame:0000000000016B01                 db    0
.eh_frame:0000000000016B02                 db    0
.eh_frame:0000000000016B03                 db    0
.eh_frame:0000000000016B04                 db  10h
.eh_frame:0000000000016B05                 db    0
.eh_frame:0000000000016B06                 db    0
.eh_frame:0000000000016B07                 db    0
.eh_frame:0000000000016B08                 db 0A0h
.eh_frame:0000000000016B09                 db    4
.eh_frame:0000000000016B0A                 db    0
.eh_frame:0000000000016B0B                 db    0
.eh_frame:0000000000016B0C                 db  84h
.eh_frame:0000000000016B0D                 db 0DBh
.eh_frame:0000000000016B0E                 db 0FEh
.eh_frame:0000000000016B0F                 db 0FFh
.eh_frame:0000000000016B10                 db  30h ; 0
.eh_frame:0000000000016B11                 db    0
.eh_frame:0000000000016B12                 db    0
.eh_frame:0000000000016B13                 db    0
.eh_frame:0000000000016B14                 db    0
.eh_frame:0000000000016B15                 db  6Bh ; k
.eh_frame:0000000000016B16                 db  0Eh
.eh_frame:0000000000016B17                 db  10h
.eh_frame:0000000000016B18                 db  50h ; P
.eh_frame:0000000000016B19                 db    0
.eh_frame:0000000000016B1A                 db    0
.eh_frame:0000000000016B1B                 db    0
.eh_frame:0000000000016B1C                 db 0B4h
.eh_frame:0000000000016B1D                 db    4
.eh_frame:0000000000016B1E                 db    0
.eh_frame:0000000000016B1F                 db    0
.eh_frame:0000000000016B20                 db 0A0h
.eh_frame:0000000000016B21                 db 0DBh
.eh_frame:0000000000016B22                 db 0FEh
.eh_frame:0000000000016B23                 db 0FFh
.eh_frame:0000000000016B24                 db  74h ; t
.eh_frame:0000000000016B25                 db    0
.eh_frame:0000000000016B26                 db    0
.eh_frame:0000000000016B27                 db    0
.eh_frame:0000000000016B28                 db    0
.eh_frame:0000000000016B29                 db  42h ; B
.eh_frame:0000000000016B2A                 db  0Eh
.eh_frame:0000000000016B2B                 db  10h
.eh_frame:0000000000016B2C                 db  8Fh
.eh_frame:0000000000016B2D                 db    2
.eh_frame:0000000000016B2E                 db  42h ; B
.eh_frame:0000000000016B2F                 db  0Eh
.eh_frame:0000000000016B30                 db  18h
.eh_frame:0000000000016B31                 db  8Eh
.eh_frame:0000000000016B32                 db    3
.eh_frame:0000000000016B33                 db  49h ; I
.eh_frame:0000000000016B34                 db  0Eh
.eh_frame:0000000000016B35                 db  20h
.eh_frame:0000000000016B36                 db  8Dh
.eh_frame:0000000000016B37                 db    4
.eh_frame:0000000000016B38                 db  42h ; B
.eh_frame:0000000000016B39                 db  0Eh
.eh_frame:0000000000016B3A                 db  28h ; (
.eh_frame:0000000000016B3B                 db  8Ch
.eh_frame:0000000000016B3C                 db    5
.eh_frame:0000000000016B3D                 db  44h ; D
.eh_frame:0000000000016B3E                 db  0Eh
.eh_frame:0000000000016B3F                 db  30h ; 0
.eh_frame:0000000000016B40                 db  86h
.eh_frame:0000000000016B41                 db    6
.eh_frame:0000000000016B42                 db  41h ; A
.eh_frame:0000000000016B43                 db  0Eh
.eh_frame:0000000000016B44                 db  38h ; 8
.eh_frame:0000000000016B45                 db  83h
.eh_frame:0000000000016B46                 db    7
.eh_frame:0000000000016B47                 db  4Dh ; M
.eh_frame:0000000000016B48                 db  0Eh
.eh_frame:0000000000016B49                 db  50h ; P
.eh_frame:0000000000016B4A                 db  5Fh ; _
.eh_frame:0000000000016B4B                 db  0Eh
.eh_frame:0000000000016B4C                 db  58h ; X
.eh_frame:0000000000016B4D                 db  47h ; G
.eh_frame:0000000000016B4E                 db  0Eh
.eh_frame:0000000000016B4F                 db  60h ; `
.eh_frame:0000000000016B50                 db  46h ; F
.eh_frame:0000000000016B51                 db  0Eh
.eh_frame:0000000000016B52                 db  68h ; h
.eh_frame:0000000000016B53                 db  44h ; D
.eh_frame:0000000000016B54                 db  0Eh
.eh_frame:0000000000016B55                 db  70h ; p
.eh_frame:0000000000016B56                 db  58h ; X
.eh_frame:0000000000016B57                 db  0Eh
.eh_frame:0000000000016B58                 db  38h ; 8
.eh_frame:0000000000016B59                 db  41h ; A
.eh_frame:0000000000016B5A                 db  0Eh
.eh_frame:0000000000016B5B                 db  30h ; 0
.eh_frame:0000000000016B5C                 db  41h ; A
.eh_frame:0000000000016B5D                 db  0Eh
.eh_frame:0000000000016B5E                 db  28h ; (
.eh_frame:0000000000016B5F                 db  42h ; B
.eh_frame:0000000000016B60                 db  0Eh
.eh_frame:0000000000016B61                 db  20h
.eh_frame:0000000000016B62                 db  42h ; B
.eh_frame:0000000000016B63                 db  0Eh
.eh_frame:0000000000016B64                 db  18h
.eh_frame:0000000000016B65                 db  42h ; B
.eh_frame:0000000000016B66                 db  0Eh
.eh_frame:0000000000016B67                 db  10h
.eh_frame:0000000000016B68                 db  42h ; B
.eh_frame:0000000000016B69                 db  0Eh
.eh_frame:0000000000016B6A                 db    8
.eh_frame:0000000000016B6B                 db    0
.eh_frame:0000000000016B6C                 db  68h ; h
.eh_frame:0000000000016B6D                 db    0
.eh_frame:0000000000016B6E                 db    0
.eh_frame:0000000000016B6F                 db    0
.eh_frame:0000000000016B70                 db    8
.eh_frame:0000000000016B71                 db    5
.eh_frame:0000000000016B72                 db    0
.eh_frame:0000000000016B73                 db    0
.eh_frame:0000000000016B74                 db 0CCh
.eh_frame:0000000000016B75                 db 0DBh
.eh_frame:0000000000016B76                 db 0FEh
.eh_frame:0000000000016B77                 db 0FFh
.eh_frame:0000000000016B78                 db 0E3h
.eh_frame:0000000000016B79                 db    0
.eh_frame:0000000000016B7A                 db    0
.eh_frame:0000000000016B7B                 db    0
.eh_frame:0000000000016B7C                 db    0
.eh_frame:0000000000016B7D                 db  42h ; B
.eh_frame:0000000000016B7E                 db  0Eh
.eh_frame:0000000000016B7F                 db  10h
.eh_frame:0000000000016B80                 db  8Fh
.eh_frame:0000000000016B81                 db    2
.eh_frame:0000000000016B82                 db  42h ; B
.eh_frame:0000000000016B83                 db  0Eh
.eh_frame:0000000000016B84                 db  18h
.eh_frame:0000000000016B85                 db  8Eh
.eh_frame:0000000000016B86                 db    3
.eh_frame:0000000000016B87                 db  49h ; I
.eh_frame:0000000000016B88                 db  0Eh
.eh_frame:0000000000016B89                 db  20h
.eh_frame:0000000000016B8A                 db  8Dh
.eh_frame:0000000000016B8B                 db    4
.eh_frame:0000000000016B8C                 db  42h ; B
.eh_frame:0000000000016B8D                 db  0Eh
.eh_frame:0000000000016B8E                 db  28h ; (
.eh_frame:0000000000016B8F                 db  8Ch
.eh_frame:0000000000016B90                 db    5
.eh_frame:0000000000016B91                 db  44h ; D
.eh_frame:0000000000016B92                 db  0Eh
.eh_frame:0000000000016B93                 db  30h ; 0
.eh_frame:0000000000016B94                 db  86h
.eh_frame:0000000000016B95                 db    6
.eh_frame:0000000000016B96                 db  41h ; A
.eh_frame:0000000000016B97                 db  0Eh
.eh_frame:0000000000016B98                 db  38h ; 8
.eh_frame:0000000000016B99                 db  83h
.eh_frame:0000000000016B9A                 db    7
.eh_frame:0000000000016B9B                 db  4Dh ; M
.eh_frame:0000000000016B9C                 db  0Eh
.eh_frame:0000000000016B9D                 db  70h ; p
.eh_frame:0000000000016B9E                 db  65h ; e
.eh_frame:0000000000016B9F                 db  0Eh
.eh_frame:0000000000016BA0                 db  78h ; x
.eh_frame:0000000000016BA1                 db  4Dh ; M
.eh_frame:0000000000016BA2                 db  0Eh
.eh_frame:0000000000016BA3                 db  80h
.eh_frame:0000000000016BA4                 db    1
.eh_frame:0000000000016BA5                 db  46h ; F
.eh_frame:0000000000016BA6                 db  0Eh
.eh_frame:0000000000016BA7                 db  88h
.eh_frame:0000000000016BA8                 db    1
.eh_frame:0000000000016BA9                 db  42h ; B
.eh_frame:0000000000016BAA                 db  0Eh
.eh_frame:0000000000016BAB                 db  90h
.eh_frame:0000000000016BAC                 db    1
.eh_frame:0000000000016BAD                 db  5Eh ; ^
.eh_frame:0000000000016BAE                 db  0Eh
.eh_frame:0000000000016BAF                 db  70h ; p
.eh_frame:0000000000016BB0                 db  56h ; V
.eh_frame:0000000000016BB1                 db  0Eh
.eh_frame:0000000000016BB2                 db  78h ; x
.eh_frame:0000000000016BB3                 db  43h ; C
.eh_frame:0000000000016BB4                 db  0Eh
.eh_frame:0000000000016BB5                 db  80h
.eh_frame:0000000000016BB6                 db    1
.eh_frame:0000000000016BB7                 db  43h ; C
.eh_frame:0000000000016BB8                 db  0Eh
.eh_frame:0000000000016BB9                 db  88h
.eh_frame:0000000000016BBA                 db    1
.eh_frame:0000000000016BBB                 db  56h ; V
.eh_frame:0000000000016BBC                 db  0Eh
.eh_frame:0000000000016BBD                 db  90h
.eh_frame:0000000000016BBE                 db    1
.eh_frame:0000000000016BBF                 db  52h ; R
.eh_frame:0000000000016BC0                 db  0Eh
.eh_frame:0000000000016BC1                 db  70h ; p
.eh_frame:0000000000016BC2                 db  5Bh ; [
.eh_frame:0000000000016BC3                 db  0Eh
.eh_frame:0000000000016BC4                 db  38h ; 8
.eh_frame:0000000000016BC5                 db  41h ; A
.eh_frame:0000000000016BC6                 db  0Eh
.eh_frame:0000000000016BC7                 db  30h ; 0
.eh_frame:0000000000016BC8                 db  41h ; A
.eh_frame:0000000000016BC9                 db  0Eh
.eh_frame:0000000000016BCA                 db  28h ; (
.eh_frame:0000000000016BCB                 db  42h ; B
.eh_frame:0000000000016BCC                 db  0Eh
.eh_frame:0000000000016BCD                 db  20h
.eh_frame:0000000000016BCE                 db  42h ; B
.eh_frame:0000000000016BCF                 db  0Eh
.eh_frame:0000000000016BD0                 db  18h
.eh_frame:0000000000016BD1                 db  42h ; B
.eh_frame:0000000000016BD2                 db  0Eh
.eh_frame:0000000000016BD3                 db  10h
.eh_frame:0000000000016BD4                 db  42h ; B
.eh_frame:0000000000016BD5                 db  0Eh
.eh_frame:0000000000016BD6                 db    8
.eh_frame:0000000000016BD7                 db    0
.eh_frame:0000000000016BD8                 db  10h
.eh_frame:0000000000016BD9                 db    0
.eh_frame:0000000000016BDA                 db    0
.eh_frame:0000000000016BDB                 db    0
.eh_frame:0000000000016BDC                 db  74h ; t
.eh_frame:0000000000016BDD                 db    5
.eh_frame:0000000000016BDE                 db    0
.eh_frame:0000000000016BDF                 db    0
.eh_frame:0000000000016BE0                 db  50h ; P
.eh_frame:0000000000016BE1                 db 0DCh
.eh_frame:0000000000016BE2                 db 0FEh
.eh_frame:0000000000016BE3                 db 0FFh
.eh_frame:0000000000016BE4                 db  0Ah
.eh_frame:0000000000016BE5                 db    0
.eh_frame:0000000000016BE6                 db    0
.eh_frame:0000000000016BE7                 db    0
.eh_frame:0000000000016BE8                 db    0
.eh_frame:0000000000016BE9                 db    0
.eh_frame:0000000000016BEA                 db    0
.eh_frame:0000000000016BEB                 db    0
.eh_frame:0000000000016BEC                 db  28h ; (
.eh_frame:0000000000016BED                 db    0
.eh_frame:0000000000016BEE                 db    0
.eh_frame:0000000000016BEF                 db    0
.eh_frame:0000000000016BF0                 db  88h
.eh_frame:0000000000016BF1                 db    5
.eh_frame:0000000000016BF2                 db    0
.eh_frame:0000000000016BF3                 db    0
.eh_frame:0000000000016BF4                 db  4Ch ; L
.eh_frame:0000000000016BF5                 db 0DCh
.eh_frame:0000000000016BF6                 db 0FEh
.eh_frame:0000000000016BF7                 db 0FFh
.eh_frame:0000000000016BF8                 db  93h
.eh_frame:0000000000016BF9                 db    0
.eh_frame:0000000000016BFA                 db    0
.eh_frame:0000000000016BFB                 db    0
.eh_frame:0000000000016BFC                 db    0
.eh_frame:0000000000016BFD                 db  48h ; H
.eh_frame:0000000000016BFE                 db  0Eh
.eh_frame:0000000000016BFF                 db  10h
.eh_frame:0000000000016C00                 db  8Ch
.eh_frame:0000000000016C01                 db    2
.eh_frame:0000000000016C02                 db  48h ; H
.eh_frame:0000000000016C03                 db  0Eh
.eh_frame:0000000000016C04                 db  18h
.eh_frame:0000000000016C05                 db  86h
.eh_frame:0000000000016C06                 db    3
.eh_frame:0000000000016C07                 db  41h ; A
.eh_frame:0000000000016C08                 db  0Eh
.eh_frame:0000000000016C09                 db  20h
.eh_frame:0000000000016C0A                 db  83h
.eh_frame:0000000000016C0B                 db    4
.eh_frame:0000000000016C0C                 db    2
.eh_frame:0000000000016C0D                 db  74h ; t
.eh_frame:0000000000016C0E                 db  0Eh
.eh_frame:0000000000016C0F                 db  18h
.eh_frame:0000000000016C10                 db  4Bh ; K
.eh_frame:0000000000016C11                 db  0Eh
.eh_frame:0000000000016C12                 db  10h
.eh_frame:0000000000016C13                 db  42h ; B
.eh_frame:0000000000016C14                 db  0Eh
.eh_frame:0000000000016C15                 db    8
.eh_frame:0000000000016C16                 db    0
.eh_frame:0000000000016C17                 db    0
.eh_frame:0000000000016C18                 db  10h
.eh_frame:0000000000016C19                 db    0
.eh_frame:0000000000016C1A                 db    0
.eh_frame:0000000000016C1B                 db    0
.eh_frame:0000000000016C1C                 db 0B4h
.eh_frame:0000000000016C1D                 db    5
.eh_frame:0000000000016C1E                 db    0
.eh_frame:0000000000016C1F                 db    0
.eh_frame:0000000000016C20                 db 0C0h
.eh_frame:0000000000016C21                 db 0DCh
.eh_frame:0000000000016C22                 db 0FEh
.eh_frame:0000000000016C23                 db 0FFh
.eh_frame:0000000000016C24                 db  13h
.eh_frame:0000000000016C25                 db    0
.eh_frame:0000000000016C26                 db    0
.eh_frame:0000000000016C27                 db    0
.eh_frame:0000000000016C28                 db    0
.eh_frame:0000000000016C29                 db    0
.eh_frame:0000000000016C2A                 db    0
.eh_frame:0000000000016C2B                 db    0
.eh_frame:0000000000016C2C                 db  10h
.eh_frame:0000000000016C2D                 db    0
.eh_frame:0000000000016C2E                 db    0
.eh_frame:0000000000016C2F                 db    0
.eh_frame:0000000000016C30                 db 0C8h
.eh_frame:0000000000016C31                 db    5
.eh_frame:0000000000016C32                 db    0
.eh_frame:0000000000016C33                 db    0
.eh_frame:0000000000016C34                 db 0CCh
.eh_frame:0000000000016C35                 db 0DCh
.eh_frame:0000000000016C36                 db 0FEh
.eh_frame:0000000000016C37                 db 0FFh
.eh_frame:0000000000016C38                 db  0Ch
.eh_frame:0000000000016C39                 db    0
.eh_frame:0000000000016C3A                 db    0
.eh_frame:0000000000016C3B                 db    0
.eh_frame:0000000000016C3C                 db    0
.eh_frame:0000000000016C3D                 db    0
.eh_frame:0000000000016C3E                 db    0
.eh_frame:0000000000016C3F                 db    0
.eh_frame:0000000000016C40                 db  10h
.eh_frame:0000000000016C41                 db    0
.eh_frame:0000000000016C42                 db    0
.eh_frame:0000000000016C43                 db    0
.eh_frame:0000000000016C44                 db 0DCh
.eh_frame:0000000000016C45                 db    5
.eh_frame:0000000000016C46                 db    0
.eh_frame:0000000000016C47                 db    0
.eh_frame:0000000000016C48                 db 0C8h
.eh_frame:0000000000016C49                 db 0DCh
.eh_frame:0000000000016C4A                 db 0FEh
.eh_frame:0000000000016C4B                 db 0FFh
.eh_frame:0000000000016C4C                 db  18h
.eh_frame:0000000000016C4D                 db    0
.eh_frame:0000000000016C4E                 db    0
.eh_frame:0000000000016C4F                 db    0
.eh_frame:0000000000016C50                 db    0
.eh_frame:0000000000016C51                 db    0
.eh_frame:0000000000016C52                 db    0
.eh_frame:0000000000016C53                 db    0
.eh_frame:0000000000016C54                 db  10h
.eh_frame:0000000000016C55                 db    0
.eh_frame:0000000000016C56                 db    0
.eh_frame:0000000000016C57                 db    0
.eh_frame:0000000000016C58                 db 0F0h
.eh_frame:0000000000016C59                 db    5
.eh_frame:0000000000016C5A                 db    0
.eh_frame:0000000000016C5B                 db    0
.eh_frame:0000000000016C5C                 db 0D4h
.eh_frame:0000000000016C5D                 db 0DCh
.eh_frame:0000000000016C5E                 db 0FEh
.eh_frame:0000000000016C5F                 db 0FFh
.eh_frame:0000000000016C60                 db  14h
.eh_frame:0000000000016C61                 db    0
.eh_frame:0000000000016C62                 db    0
.eh_frame:0000000000016C63                 db    0
.eh_frame:0000000000016C64                 db    0
.eh_frame:0000000000016C65                 db    0
.eh_frame:0000000000016C66                 db    0
.eh_frame:0000000000016C67                 db    0
.eh_frame:0000000000016C68                 db  18h
.eh_frame:0000000000016C69                 db    0
.eh_frame:0000000000016C6A                 db    0
.eh_frame:0000000000016C6B                 db    0
.eh_frame:0000000000016C6C                 db    4
.eh_frame:0000000000016C6D                 db    6
.eh_frame:0000000000016C6E                 db    0
.eh_frame:0000000000016C6F                 db    0
.eh_frame:0000000000016C70                 db 0E0h
.eh_frame:0000000000016C71                 db 0DCh
.eh_frame:0000000000016C72                 db 0FEh
.eh_frame:0000000000016C73                 db 0FFh
.eh_frame:0000000000016C74                 db  8Eh
.eh_frame:0000000000016C75                 db    0
.eh_frame:0000000000016C76                 db    0
.eh_frame:0000000000016C77                 db    0
.eh_frame:0000000000016C78                 db    0
.eh_frame:0000000000016C79                 db  44h ; D
.eh_frame:0000000000016C7A                 db  0Eh
.eh_frame:0000000000016C7B                 db  50h ; P
.eh_frame:0000000000016C7C                 db    2
.eh_frame:0000000000016C7D                 db  7Fh ; 
.eh_frame:0000000000016C7E                 db  0Ah
.eh_frame:0000000000016C7F                 db  0Eh
.eh_frame:0000000000016C80                 db    8
.eh_frame:0000000000016C81                 db  41h ; A
.eh_frame:0000000000016C82                 db  0Bh
.eh_frame:0000000000016C83                 db    0
.eh_frame:0000000000016C84                 db  18h
.eh_frame:0000000000016C85                 db    0
.eh_frame:0000000000016C86                 db    0
.eh_frame:0000000000016C87                 db    0
.eh_frame:0000000000016C88                 db  20h
.eh_frame:0000000000016C89                 db    6
.eh_frame:0000000000016C8A                 db    0
.eh_frame:0000000000016C8B                 db    0
.eh_frame:0000000000016C8C                 db  54h ; T
.eh_frame:0000000000016C8D                 db 0DDh
.eh_frame:0000000000016C8E                 db 0FEh
.eh_frame:0000000000016C8F                 db 0FFh
.eh_frame:0000000000016C90                 db  8Ah
.eh_frame:0000000000016C91                 db    0
.eh_frame:0000000000016C92                 db    0
.eh_frame:0000000000016C93                 db    0
.eh_frame:0000000000016C94                 db    0
.eh_frame:0000000000016C95                 db  44h ; D
.eh_frame:0000000000016C96                 db  0Eh
.eh_frame:0000000000016C97                 db  50h ; P
.eh_frame:0000000000016C98                 db    2
.eh_frame:0000000000016C99                 db  7Bh ; {
.eh_frame:0000000000016C9A                 db  0Ah
.eh_frame:0000000000016C9B                 db  0Eh
.eh_frame:0000000000016C9C                 db    8
.eh_frame:0000000000016C9D                 db  41h ; A
.eh_frame:0000000000016C9E                 db  0Bh
.eh_frame:0000000000016C9F                 db    0
.eh_frame:0000000000016CA0                 db  10h
.eh_frame:0000000000016CA1                 db    0
.eh_frame:0000000000016CA2                 db    0
.eh_frame:0000000000016CA3                 db    0
.eh_frame:0000000000016CA4                 db  3Ch ; <
.eh_frame:0000000000016CA5                 db    6
.eh_frame:0000000000016CA6                 db    0
.eh_frame:0000000000016CA7                 db    0
.eh_frame:0000000000016CA8                 db 0C8h
.eh_frame:0000000000016CA9                 db 0DDh
.eh_frame:0000000000016CAA                 db 0FEh
.eh_frame:0000000000016CAB                 db 0FFh
.eh_frame:0000000000016CAC                 db  0Ch
.eh_frame:0000000000016CAD                 db    0
.eh_frame:0000000000016CAE                 db    0
.eh_frame:0000000000016CAF                 db    0
.eh_frame:0000000000016CB0                 db    0
.eh_frame:0000000000016CB1                 db    0
.eh_frame:0000000000016CB2                 db    0
.eh_frame:0000000000016CB3                 db    0
.eh_frame:0000000000016CB4                 db  10h
.eh_frame:0000000000016CB5                 db    0
.eh_frame:0000000000016CB6                 db    0
.eh_frame:0000000000016CB7                 db    0
.eh_frame:0000000000016CB8                 db  50h ; P
.eh_frame:0000000000016CB9                 db    6
.eh_frame:0000000000016CBA                 db    0
.eh_frame:0000000000016CBB                 db    0
.eh_frame:0000000000016CBC                 db 0C4h
.eh_frame:0000000000016CBD                 db 0DDh
.eh_frame:0000000000016CBE                 db 0FEh
.eh_frame:0000000000016CBF                 db 0FFh
.eh_frame:0000000000016CC0                 db  0Fh
.eh_frame:0000000000016CC1                 db    0
.eh_frame:0000000000016CC2                 db    0
.eh_frame:0000000000016CC3                 db    0
.eh_frame:0000000000016CC4                 db    0
.eh_frame:0000000000016CC5                 db    0
.eh_frame:0000000000016CC6                 db    0
.eh_frame:0000000000016CC7                 db    0
.eh_frame:0000000000016CC8                 db  18h
.eh_frame:0000000000016CC9                 db    0
.eh_frame:0000000000016CCA                 db    0
.eh_frame:0000000000016CCB                 db    0
.eh_frame:0000000000016CCC                 db  64h ; d
.eh_frame:0000000000016CCD                 db    6
.eh_frame:0000000000016CCE                 db    0
.eh_frame:0000000000016CCF                 db    0
.eh_frame:0000000000016CD0                 db 0C0h
.eh_frame:0000000000016CD1                 db 0DDh
.eh_frame:0000000000016CD2                 db 0FEh
.eh_frame:0000000000016CD3                 db 0FFh
.eh_frame:0000000000016CD4                 db  98h
.eh_frame:0000000000016CD5                 db    0
.eh_frame:0000000000016CD6                 db    0
.eh_frame:0000000000016CD7                 db    0
.eh_frame:0000000000016CD8                 db    0
.eh_frame:0000000000016CD9                 db  44h ; D
.eh_frame:0000000000016CDA                 db  0Eh
.eh_frame:0000000000016CDB                 db  50h ; P
.eh_frame:0000000000016CDC                 db    2
.eh_frame:0000000000016CDD                 db  8Eh
.eh_frame:0000000000016CDE                 db  0Ah
.eh_frame:0000000000016CDF                 db  0Eh
.eh_frame:0000000000016CE0                 db    8
.eh_frame:0000000000016CE1                 db  41h ; A
.eh_frame:0000000000016CE2                 db  0Bh
.eh_frame:0000000000016CE3                 db    0
.eh_frame:0000000000016CE4                 db  10h
.eh_frame:0000000000016CE5                 db    0
.eh_frame:0000000000016CE6                 db    0
.eh_frame:0000000000016CE7                 db    0
.eh_frame:0000000000016CE8                 db  80h
.eh_frame:0000000000016CE9                 db    6
.eh_frame:0000000000016CEA                 db    0
.eh_frame:0000000000016CEB                 db    0
.eh_frame:0000000000016CEC                 db  44h ; D
.eh_frame:0000000000016CED                 db 0DEh
.eh_frame:0000000000016CEE                 db 0FEh
.eh_frame:0000000000016CEF                 db 0FFh
.eh_frame:0000000000016CF0                 db  10h
.eh_frame:0000000000016CF1                 db    0
.eh_frame:0000000000016CF2                 db    0
.eh_frame:0000000000016CF3                 db    0
.eh_frame:0000000000016CF4                 db    0
.eh_frame:0000000000016CF5                 db    0
.eh_frame:0000000000016CF6                 db    0
.eh_frame:0000000000016CF7                 db    0
.eh_frame:0000000000016CF8                 db  10h
.eh_frame:0000000000016CF9                 db    0
.eh_frame:0000000000016CFA                 db    0
.eh_frame:0000000000016CFB                 db    0
.eh_frame:0000000000016CFC                 db  94h
.eh_frame:0000000000016CFD                 db    6
.eh_frame:0000000000016CFE                 db    0
.eh_frame:0000000000016CFF                 db    0
.eh_frame:0000000000016D00                 db  40h ; @
.eh_frame:0000000000016D01                 db 0DEh
.eh_frame:0000000000016D02                 db 0FEh
.eh_frame:0000000000016D03                 db 0FFh
.eh_frame:0000000000016D04                 db  11h
.eh_frame:0000000000016D05                 db    0
.eh_frame:0000000000016D06                 db    0
.eh_frame:0000000000016D07                 db    0
.eh_frame:0000000000016D08                 db    0
.eh_frame:0000000000016D09                 db    0
.eh_frame:0000000000016D0A                 db    0
.eh_frame:0000000000016D0B                 db    0
.eh_frame:0000000000016D0C                 db  10h
.eh_frame:0000000000016D0D                 db    0
.eh_frame:0000000000016D0E                 db    0
.eh_frame:0000000000016D0F                 db    0
.eh_frame:0000000000016D10                 db 0A8h
.eh_frame:0000000000016D11                 db    6
.eh_frame:0000000000016D12                 db    0
.eh_frame:0000000000016D13                 db    0
.eh_frame:0000000000016D14                 db  4Ch ; L
.eh_frame:0000000000016D15                 db 0DEh
.eh_frame:0000000000016D16                 db 0FEh
.eh_frame:0000000000016D17                 db 0FFh
.eh_frame:0000000000016D18                 db  0Ah
.eh_frame:0000000000016D19                 db    0
.eh_frame:0000000000016D1A                 db    0
.eh_frame:0000000000016D1B                 db    0
.eh_frame:0000000000016D1C                 db    0
.eh_frame:0000000000016D1D                 db    0
.eh_frame:0000000000016D1E                 db    0
.eh_frame:0000000000016D1F                 db    0
.eh_frame:0000000000016D20                 db  18h
.eh_frame:0000000000016D21                 db    0
.eh_frame:0000000000016D22                 db    0
.eh_frame:0000000000016D23                 db    0
.eh_frame:0000000000016D24                 db 0BCh
.eh_frame:0000000000016D25                 db    6
.eh_frame:0000000000016D26                 db    0
.eh_frame:0000000000016D27                 db    0
.eh_frame:0000000000016D28                 db  48h ; H
.eh_frame:0000000000016D29                 db 0DEh
.eh_frame:0000000000016D2A                 db 0FEh
.eh_frame:0000000000016D2B                 db 0FFh
.eh_frame:0000000000016D2C                 db  8Eh
.eh_frame:0000000000016D2D                 db    0
.eh_frame:0000000000016D2E                 db    0
.eh_frame:0000000000016D2F                 db    0
.eh_frame:0000000000016D30                 db    0
.eh_frame:0000000000016D31                 db  44h ; D
.eh_frame:0000000000016D32                 db  0Eh
.eh_frame:0000000000016D33                 db  50h ; P
.eh_frame:0000000000016D34                 db    2
.eh_frame:0000000000016D35                 db  7Fh ; 
.eh_frame:0000000000016D36                 db  0Ah
.eh_frame:0000000000016D37                 db  0Eh
.eh_frame:0000000000016D38                 db    8
.eh_frame:0000000000016D39                 db  41h ; A
.eh_frame:0000000000016D3A                 db  0Bh
.eh_frame:0000000000016D3B                 db    0
.eh_frame:0000000000016D3C                 db  18h
.eh_frame:0000000000016D3D                 db    0
.eh_frame:0000000000016D3E                 db    0
.eh_frame:0000000000016D3F                 db    0
.eh_frame:0000000000016D40                 db 0D8h
.eh_frame:0000000000016D41                 db    6
.eh_frame:0000000000016D42                 db    0
.eh_frame:0000000000016D43                 db    0
.eh_frame:0000000000016D44                 db 0BCh
.eh_frame:0000000000016D45                 db 0DEh
.eh_frame:0000000000016D46                 db 0FEh
.eh_frame:0000000000016D47                 db 0FFh
.eh_frame:0000000000016D48                 db  91h
.eh_frame:0000000000016D49                 db    0
.eh_frame:0000000000016D4A                 db    0
.eh_frame:0000000000016D4B                 db    0
.eh_frame:0000000000016D4C                 db    0
.eh_frame:0000000000016D4D                 db  44h ; D
.eh_frame:0000000000016D4E                 db  0Eh
.eh_frame:0000000000016D4F                 db  50h ; P
.eh_frame:0000000000016D50                 db    2
.eh_frame:0000000000016D51                 db  82h
.eh_frame:0000000000016D52                 db  0Ah
.eh_frame:0000000000016D53                 db  0Eh
.eh_frame:0000000000016D54                 db    8
.eh_frame:0000000000016D55                 db  41h ; A
.eh_frame:0000000000016D56                 db  0Bh
.eh_frame:0000000000016D57                 db    0
.eh_frame:0000000000016D58                 db  10h
.eh_frame:0000000000016D59                 db    0
.eh_frame:0000000000016D5A                 db    0
.eh_frame:0000000000016D5B                 db    0
.eh_frame:0000000000016D5C                 db 0F4h
.eh_frame:0000000000016D5D                 db    6
.eh_frame:0000000000016D5E                 db    0
.eh_frame:0000000000016D5F                 db    0
.eh_frame:0000000000016D60                 db  40h ; @
.eh_frame:0000000000016D61                 db 0DFh
.eh_frame:0000000000016D62                 db 0FEh
.eh_frame:0000000000016D63                 db 0FFh
.eh_frame:0000000000016D64                 db  0Ch
.eh_frame:0000000000016D65                 db    0
.eh_frame:0000000000016D66                 db    0
.eh_frame:0000000000016D67                 db    0
.eh_frame:0000000000016D68                 db    0
.eh_frame:0000000000016D69                 db    0
.eh_frame:0000000000016D6A                 db    0
.eh_frame:0000000000016D6B                 db    0
.eh_frame:0000000000016D6C                 db  10h
.eh_frame:0000000000016D6D                 db    0
.eh_frame:0000000000016D6E                 db    0
.eh_frame:0000000000016D6F                 db    0
.eh_frame:0000000000016D70                 db    8
.eh_frame:0000000000016D71                 db    7
.eh_frame:0000000000016D72                 db    0
.eh_frame:0000000000016D73                 db    0
.eh_frame:0000000000016D74                 db  3Ch ; <
.eh_frame:0000000000016D75                 db 0DFh
.eh_frame:0000000000016D76                 db 0FEh
.eh_frame:0000000000016D77                 db 0FFh
.eh_frame:0000000000016D78                 db  17h
.eh_frame:0000000000016D79                 db    0
.eh_frame:0000000000016D7A                 db    0
.eh_frame:0000000000016D7B                 db    0
.eh_frame:0000000000016D7C                 db    0
.eh_frame:0000000000016D7D                 db    0
.eh_frame:0000000000016D7E                 db    0
.eh_frame:0000000000016D7F                 db    0
.eh_frame:0000000000016D80                 db  10h
.eh_frame:0000000000016D81                 db    0
.eh_frame:0000000000016D82                 db    0
.eh_frame:0000000000016D83                 db    0
.eh_frame:0000000000016D84                 db  1Ch
.eh_frame:0000000000016D85                 db    7
.eh_frame:0000000000016D86                 db    0
.eh_frame:0000000000016D87                 db    0
.eh_frame:0000000000016D88                 db  48h ; H
.eh_frame:0000000000016D89                 db 0DFh
.eh_frame:0000000000016D8A                 db 0FEh
.eh_frame:0000000000016D8B                 db 0FFh
.eh_frame:0000000000016D8C                 db  13h
.eh_frame:0000000000016D8D                 db    0
.eh_frame:0000000000016D8E                 db    0
.eh_frame:0000000000016D8F                 db    0
.eh_frame:0000000000016D90                 db    0
.eh_frame:0000000000016D91                 db    0
.eh_frame:0000000000016D92                 db    0
.eh_frame:0000000000016D93                 db    0
.eh_frame:0000000000016D94                 db  10h
.eh_frame:0000000000016D95                 db    0
.eh_frame:0000000000016D96                 db    0
.eh_frame:0000000000016D97                 db    0
.eh_frame:0000000000016D98                 db  30h ; 0
.eh_frame:0000000000016D99                 db    7
.eh_frame:0000000000016D9A                 db    0
.eh_frame:0000000000016D9B                 db    0
.eh_frame:0000000000016D9C                 db  54h ; T
.eh_frame:0000000000016D9D                 db 0DFh
.eh_frame:0000000000016D9E                 db 0FEh
.eh_frame:0000000000016D9F                 db 0FFh
.eh_frame:0000000000016DA0                 db  0Ch
.eh_frame:0000000000016DA1                 db    0
.eh_frame:0000000000016DA2                 db    0
.eh_frame:0000000000016DA3                 db    0
.eh_frame:0000000000016DA4                 db    0
.eh_frame:0000000000016DA5                 db    0
.eh_frame:0000000000016DA6                 db    0
.eh_frame:0000000000016DA7                 db    0
.eh_frame:0000000000016DA8                 db  10h
.eh_frame:0000000000016DA9                 db    0
.eh_frame:0000000000016DAA                 db    0
.eh_frame:0000000000016DAB                 db    0
.eh_frame:0000000000016DAC                 db  44h ; D
.eh_frame:0000000000016DAD                 db    7
.eh_frame:0000000000016DAE                 db    0
.eh_frame:0000000000016DAF                 db    0
.eh_frame:0000000000016DB0                 db  50h ; P
.eh_frame:0000000000016DB1                 db 0DFh
.eh_frame:0000000000016DB2                 db 0FEh
.eh_frame:0000000000016DB3                 db 0FFh
.eh_frame:0000000000016DB4                 db  14h
.eh_frame:0000000000016DB5                 db    0
.eh_frame:0000000000016DB6                 db    0
.eh_frame:0000000000016DB7                 db    0
.eh_frame:0000000000016DB8                 db    0
.eh_frame:0000000000016DB9                 db    0
.eh_frame:0000000000016DBA                 db    0
.eh_frame:0000000000016DBB                 db    0
.eh_frame:0000000000016DBC                 db  10h
.eh_frame:0000000000016DBD                 db    0
.eh_frame:0000000000016DBE                 db    0
.eh_frame:0000000000016DBF                 db    0
.eh_frame:0000000000016DC0                 db  58h ; X
.eh_frame:0000000000016DC1                 db    7
.eh_frame:0000000000016DC2                 db    0
.eh_frame:0000000000016DC3                 db    0
.eh_frame:0000000000016DC4                 db  5Ch ; \
.eh_frame:0000000000016DC5                 db 0DFh
.eh_frame:0000000000016DC6                 db 0FEh
.eh_frame:0000000000016DC7                 db 0FFh
.eh_frame:0000000000016DC8                 db  13h
.eh_frame:0000000000016DC9                 db    0
.eh_frame:0000000000016DCA                 db    0
.eh_frame:0000000000016DCB                 db    0
.eh_frame:0000000000016DCC                 db    0
.eh_frame:0000000000016DCD                 db    0
.eh_frame:0000000000016DCE                 db    0
.eh_frame:0000000000016DCF                 db    0
.eh_frame:0000000000016DD0                 db  14h
.eh_frame:0000000000016DD1                 db    0
.eh_frame:0000000000016DD2                 db    0
.eh_frame:0000000000016DD3                 db    0
.eh_frame:0000000000016DD4                 db  6Ch ; l
.eh_frame:0000000000016DD5                 db    7
.eh_frame:0000000000016DD6                 db    0
.eh_frame:0000000000016DD7                 db    0
.eh_frame:0000000000016DD8                 db  68h ; h
.eh_frame:0000000000016DD9                 db 0DFh
.eh_frame:0000000000016DDA                 db 0FEh
.eh_frame:0000000000016DDB                 db 0FFh
.eh_frame:0000000000016DDC                 db  18h
.eh_frame:0000000000016DDD                 db    0
.eh_frame:0000000000016DDE                 db    0
.eh_frame:0000000000016DDF                 db    0
.eh_frame:0000000000016DE0                 db    0
.eh_frame:0000000000016DE1                 db    0
.eh_frame:0000000000016DE2                 db    0
.eh_frame:0000000000016DE3                 db    0
.eh_frame:0000000000016DE4                 db    0
.eh_frame:0000000000016DE5                 db    0
.eh_frame:0000000000016DE6                 db    0
.eh_frame:0000000000016DE7                 db    0
.eh_frame:0000000000016DE8                 db  10h
.eh_frame:0000000000016DE9                 db    1
.eh_frame:0000000000016DEA                 db    0
.eh_frame:0000000000016DEB                 db    0
.eh_frame:0000000000016DEC                 db  84h
.eh_frame:0000000000016DED                 db    7
.eh_frame:0000000000016DEE                 db    0
.eh_frame:0000000000016DEF                 db    0
.eh_frame:0000000000016DF0                 db  70h ; p
.eh_frame:0000000000016DF1                 db 0DFh
.eh_frame:0000000000016DF2                 db 0FEh
.eh_frame:0000000000016DF3                 db 0FFh
.eh_frame:0000000000016DF4                 db  17h
.eh_frame:0000000000016DF5                 db    4
.eh_frame:0000000000016DF6                 db    0
.eh_frame:0000000000016DF7                 db    0
.eh_frame:0000000000016DF8                 db    0
.eh_frame:0000000000016DF9                 db  42h ; B
.eh_frame:0000000000016DFA                 db  0Eh
.eh_frame:0000000000016DFB                 db  10h
.eh_frame:0000000000016DFC                 db  8Fh
.eh_frame:0000000000016DFD                 db    2
.eh_frame:0000000000016DFE                 db  42h ; B
.eh_frame:0000000000016DFF                 db  0Eh
.eh_frame:0000000000016E00                 db  18h
.eh_frame:0000000000016E01                 db  8Eh
.eh_frame:0000000000016E02                 db    3
.eh_frame:0000000000016E03                 db  42h ; B
.eh_frame:0000000000016E04                 db  0Eh
.eh_frame:0000000000016E05                 db  20h
.eh_frame:0000000000016E06                 db  8Dh
.eh_frame:0000000000016E07                 db    4
.eh_frame:0000000000016E08                 db  42h ; B
.eh_frame:0000000000016E09                 db  0Eh
.eh_frame:0000000000016E0A                 db  28h ; (
.eh_frame:0000000000016E0B                 db  8Ch
.eh_frame:0000000000016E0C                 db    5
.eh_frame:0000000000016E0D                 db  44h ; D
.eh_frame:0000000000016E0E                 db  0Eh
.eh_frame:0000000000016E0F                 db  30h ; 0
.eh_frame:0000000000016E10                 db  86h
.eh_frame:0000000000016E11                 db    6
.eh_frame:0000000000016E12                 db  41h ; A
.eh_frame:0000000000016E13                 db  0Eh
.eh_frame:0000000000016E14                 db  38h ; 8
.eh_frame:0000000000016E15                 db  83h
.eh_frame:0000000000016E16                 db    7
.eh_frame:0000000000016E17                 db  4Ah ; J
.eh_frame:0000000000016E18                 db  0Eh
.eh_frame:0000000000016E19                 db  60h ; `
.eh_frame:0000000000016E1A                 db    2
.eh_frame:0000000000016E1B                 db 0DDh
.eh_frame:0000000000016E1C                 db  0Eh
.eh_frame:0000000000016E1D                 db  68h ; h
.eh_frame:0000000000016E1E                 db  57h ; W
.eh_frame:0000000000016E1F                 db  0Eh
.eh_frame:0000000000016E20                 db  70h ; p
.eh_frame:0000000000016E21                 db  42h ; B
.eh_frame:0000000000016E22                 db  0Eh
.eh_frame:0000000000016E23                 db  78h ; x
.eh_frame:0000000000016E24                 db  42h ; B
.eh_frame:0000000000016E25                 db  0Eh
.eh_frame:0000000000016E26                 db  80h
.eh_frame:0000000000016E27                 db    1
.eh_frame:0000000000016E28                 db  42h ; B
.eh_frame:0000000000016E29                 db  0Eh
.eh_frame:0000000000016E2A                 db  88h
.eh_frame:0000000000016E2B                 db    1
.eh_frame:0000000000016E2C                 db  42h ; B
.eh_frame:0000000000016E2D                 db  0Eh
.eh_frame:0000000000016E2E                 db  90h
.eh_frame:0000000000016E2F                 db    1
.eh_frame:0000000000016E30                 db  53h ; S
.eh_frame:0000000000016E31                 db  0Eh
.eh_frame:0000000000016E32                 db  60h ; `
.eh_frame:0000000000016E33                 db  44h ; D
.eh_frame:0000000000016E34                 db  0Ah
.eh_frame:0000000000016E35                 db  0Eh
.eh_frame:0000000000016E36                 db  38h ; 8
.eh_frame:0000000000016E37                 db  41h ; A
.eh_frame:0000000000016E38                 db  0Eh
.eh_frame:0000000000016E39                 db  30h ; 0
.eh_frame:0000000000016E3A                 db  41h ; A
.eh_frame:0000000000016E3B                 db  0Eh
.eh_frame:0000000000016E3C                 db  28h ; (
.eh_frame:0000000000016E3D                 db  42h ; B
.eh_frame:0000000000016E3E                 db  0Eh
.eh_frame:0000000000016E3F                 db  20h
.eh_frame:0000000000016E40                 db  42h ; B
.eh_frame:0000000000016E41                 db  0Eh
.eh_frame:0000000000016E42                 db  18h
.eh_frame:0000000000016E43                 db  42h ; B
.eh_frame:0000000000016E44                 db  0Eh
.eh_frame:0000000000016E45                 db  10h
.eh_frame:0000000000016E46                 db  42h ; B
.eh_frame:0000000000016E47                 db  0Eh
.eh_frame:0000000000016E48                 db    8
.eh_frame:0000000000016E49                 db  44h ; D
.eh_frame:0000000000016E4A                 db  0Bh
.eh_frame:0000000000016E4B                 db    2
.eh_frame:0000000000016E4C                 db  78h ; x
.eh_frame:0000000000016E4D                 db  0Ah
.eh_frame:0000000000016E4E                 db  0Eh
.eh_frame:0000000000016E4F                 db  68h ; h
.eh_frame:0000000000016E50                 db  48h ; H
.eh_frame:0000000000016E51                 db  0Bh
.eh_frame:0000000000016E52                 db  5Ah ; Z
.eh_frame:0000000000016E53                 db  0Ah
.eh_frame:0000000000016E54                 db  0Eh
.eh_frame:0000000000016E55                 db  38h ; 8
.eh_frame:0000000000016E56                 db  47h ; G
.eh_frame:0000000000016E57                 db  0Eh
.eh_frame:0000000000016E58                 db  30h ; 0
.eh_frame:0000000000016E59                 db  41h ; A
.eh_frame:0000000000016E5A                 db  0Eh
.eh_frame:0000000000016E5B                 db  28h ; (
.eh_frame:0000000000016E5C                 db  42h ; B
.eh_frame:0000000000016E5D                 db  0Eh
.eh_frame:0000000000016E5E                 db  20h
.eh_frame:0000000000016E5F                 db  42h ; B
.eh_frame:0000000000016E60                 db  0Eh
.eh_frame:0000000000016E61                 db  18h
.eh_frame:0000000000016E62                 db  42h ; B
.eh_frame:0000000000016E63                 db  0Eh
.eh_frame:0000000000016E64                 db  10h
.eh_frame:0000000000016E65                 db  42h ; B
.eh_frame:0000000000016E66                 db  0Eh
.eh_frame:0000000000016E67                 db    8
.eh_frame:0000000000016E68                 db  56h ; V
.eh_frame:0000000000016E69                 db  0Bh
.eh_frame:0000000000016E6A                 db  5Eh ; ^
.eh_frame:0000000000016E6B                 db  0Ah
.eh_frame:0000000000016E6C                 db  0Eh
.eh_frame:0000000000016E6D                 db  38h ; 8
.eh_frame:0000000000016E6E                 db  52h ; R
.eh_frame:0000000000016E6F                 db  0Eh
.eh_frame:0000000000016E70                 db  30h ; 0
.eh_frame:0000000000016E71                 db  41h ; A
.eh_frame:0000000000016E72                 db  0Eh
.eh_frame:0000000000016E73                 db  28h ; (
.eh_frame:0000000000016E74                 db  42h ; B
.eh_frame:0000000000016E75                 db  0Eh
.eh_frame:0000000000016E76                 db  20h
.eh_frame:0000000000016E77                 db  42h ; B
.eh_frame:0000000000016E78                 db  0Eh
.eh_frame:0000000000016E79                 db  18h
.eh_frame:0000000000016E7A                 db  42h ; B
.eh_frame:0000000000016E7B                 db  0Eh
.eh_frame:0000000000016E7C                 db  10h
.eh_frame:0000000000016E7D                 db  42h ; B
.eh_frame:0000000000016E7E                 db  0Eh
.eh_frame:0000000000016E7F                 db    8
.eh_frame:0000000000016E80                 db  4Fh ; O
.eh_frame:0000000000016E81                 db  0Bh
.eh_frame:0000000000016E82                 db  62h ; b
.eh_frame:0000000000016E83                 db  0Ah
.eh_frame:0000000000016E84                 db  0Eh
.eh_frame:0000000000016E85                 db  38h ; 8
.eh_frame:0000000000016E86                 db  50h ; P
.eh_frame:0000000000016E87                 db  0Eh
.eh_frame:0000000000016E88                 db  30h ; 0
.eh_frame:0000000000016E89                 db  41h ; A
.eh_frame:0000000000016E8A                 db  0Eh
.eh_frame:0000000000016E8B                 db  28h ; (
.eh_frame:0000000000016E8C                 db  42h ; B
.eh_frame:0000000000016E8D                 db  0Eh
.eh_frame:0000000000016E8E                 db  20h
.eh_frame:0000000000016E8F                 db  42h ; B
.eh_frame:0000000000016E90                 db  0Eh
.eh_frame:0000000000016E91                 db  18h
.eh_frame:0000000000016E92                 db  42h ; B
.eh_frame:0000000000016E93                 db  0Eh
.eh_frame:0000000000016E94                 db  10h
.eh_frame:0000000000016E95                 db  42h ; B
.eh_frame:0000000000016E96                 db  0Eh
.eh_frame:0000000000016E97                 db    8
.eh_frame:0000000000016E98                 db  55h ; U
.eh_frame:0000000000016E99                 db  0Bh
.eh_frame:0000000000016E9A                 db  66h ; f
.eh_frame:0000000000016E9B                 db  0Eh
.eh_frame:0000000000016E9C                 db  68h ; h
.eh_frame:0000000000016E9D                 db  42h ; B
.eh_frame:0000000000016E9E                 db  0Eh
.eh_frame:0000000000016E9F                 db  70h ; p
.eh_frame:0000000000016EA0                 db  5Ch ; \
.eh_frame:0000000000016EA1                 db  0Eh
.eh_frame:0000000000016EA2                 db  68h ; h
.eh_frame:0000000000016EA3                 db  41h ; A
.eh_frame:0000000000016EA4                 db  0Eh
.eh_frame:0000000000016EA5                 db  60h ; `
.eh_frame:0000000000016EA6                 db  44h ; D
.eh_frame:0000000000016EA7                 db  0Ah
.eh_frame:0000000000016EA8                 db  0Eh
.eh_frame:0000000000016EA9                 db  38h ; 8
.eh_frame:0000000000016EAA                 db  41h ; A
.eh_frame:0000000000016EAB                 db  0Eh
.eh_frame:0000000000016EAC                 db  30h ; 0
.eh_frame:0000000000016EAD                 db  41h ; A
.eh_frame:0000000000016EAE                 db  0Eh
.eh_frame:0000000000016EAF                 db  28h ; (
.eh_frame:0000000000016EB0                 db  42h ; B
.eh_frame:0000000000016EB1                 db  0Eh
.eh_frame:0000000000016EB2                 db  20h
.eh_frame:0000000000016EB3                 db  42h ; B
.eh_frame:0000000000016EB4                 db  0Eh
.eh_frame:0000000000016EB5                 db  18h
.eh_frame:0000000000016EB6                 db  42h ; B
.eh_frame:0000000000016EB7                 db  0Eh
.eh_frame:0000000000016EB8                 db  10h
.eh_frame:0000000000016EB9                 db  42h ; B
.eh_frame:0000000000016EBA                 db  0Eh
.eh_frame:0000000000016EBB                 db    8
.eh_frame:0000000000016EBC                 db  45h ; E
.eh_frame:0000000000016EBD                 db  0Bh
.eh_frame:0000000000016EBE                 db  68h ; h
.eh_frame:0000000000016EBF                 db  0Ah
.eh_frame:0000000000016EC0                 db  0Eh
.eh_frame:0000000000016EC1                 db  68h ; h
.eh_frame:0000000000016EC2                 db  48h ; H
.eh_frame:0000000000016EC3                 db  0Bh
.eh_frame:0000000000016EC4                 db  72h ; r
.eh_frame:0000000000016EC5                 db  0Eh
.eh_frame:0000000000016EC6                 db  68h ; h
.eh_frame:0000000000016EC7                 db  45h ; E
.eh_frame:0000000000016EC8                 db  0Eh
.eh_frame:0000000000016EC9                 db  70h ; p
.eh_frame:0000000000016ECA                 db  42h ; B
.eh_frame:0000000000016ECB                 db  0Eh
.eh_frame:0000000000016ECC                 db  78h ; x
.eh_frame:0000000000016ECD                 db  42h ; B
.eh_frame:0000000000016ECE                 db  0Eh
.eh_frame:0000000000016ECF                 db  80h
.eh_frame:0000000000016ED0                 db    1
.eh_frame:0000000000016ED1                 db  5Eh ; ^
.eh_frame:0000000000016ED2                 db  0Eh
.eh_frame:0000000000016ED3                 db  60h ; `
.eh_frame:0000000000016ED4                 db  44h ; D
.eh_frame:0000000000016ED5                 db  0Ah
.eh_frame:0000000000016ED6                 db  0Eh
.eh_frame:0000000000016ED7                 db  38h ; 8
.eh_frame:0000000000016ED8                 db  41h ; A
.eh_frame:0000000000016ED9                 db  0Eh
.eh_frame:0000000000016EDA                 db  30h ; 0
.eh_frame:0000000000016EDB                 db  41h ; A
.eh_frame:0000000000016EDC                 db  0Eh
.eh_frame:0000000000016EDD                 db  28h ; (
.eh_frame:0000000000016EDE                 db  42h ; B
.eh_frame:0000000000016EDF                 db  0Eh
.eh_frame:0000000000016EE0                 db  20h
.eh_frame:0000000000016EE1                 db  42h ; B
.eh_frame:0000000000016EE2                 db  0Eh
.eh_frame:0000000000016EE3                 db  18h
.eh_frame:0000000000016EE4                 db  42h ; B
.eh_frame:0000000000016EE5                 db  0Eh
.eh_frame:0000000000016EE6                 db  10h
.eh_frame:0000000000016EE7                 db  42h ; B
.eh_frame:0000000000016EE8                 db  0Eh
.eh_frame:0000000000016EE9                 db    8
.eh_frame:0000000000016EEA                 db  41h ; A
.eh_frame:0000000000016EEB                 db  0Bh
.eh_frame:0000000000016EEC                 db  79h ; y
.eh_frame:0000000000016EED                 db  0Ah
.eh_frame:0000000000016EEE                 db  0Eh
.eh_frame:0000000000016EEF                 db  68h ; h
.eh_frame:0000000000016EF0                 db  42h ; B
.eh_frame:0000000000016EF1                 db  0Eh
.eh_frame:0000000000016EF2                 db  70h ; p
.eh_frame:0000000000016EF3                 db  42h ; B
.eh_frame:0000000000016EF4                 db  0Eh
.eh_frame:0000000000016EF5                 db  78h ; x
.eh_frame:0000000000016EF6                 db  42h ; B
.eh_frame:0000000000016EF7                 db  0Eh
.eh_frame:0000000000016EF8                 db  80h
.eh_frame:0000000000016EF9                 db    1
.eh_frame:0000000000016EFA                 db  51h ; Q
.eh_frame:0000000000016EFB                 db  0Bh
.eh_frame:0000000000016EFC                 db  10h
.eh_frame:0000000000016EFD                 db    0
.eh_frame:0000000000016EFE                 db    0
.eh_frame:0000000000016EFF                 db    0
.eh_frame:0000000000016F00                 db  98h
.eh_frame:0000000000016F01                 db    8
.eh_frame:0000000000016F02                 db    0
.eh_frame:0000000000016F03                 db    0
.eh_frame:0000000000016F04                 db  7Ch ; |
.eh_frame:0000000000016F05                 db 0E2h
.eh_frame:0000000000016F06                 db 0FEh
.eh_frame:0000000000016F07                 db 0FFh
.eh_frame:0000000000016F08                 db  20h
.eh_frame:0000000000016F09                 db    0
.eh_frame:0000000000016F0A                 db    0
.eh_frame:0000000000016F0B                 db    0
.eh_frame:0000000000016F0C                 db    0
.eh_frame:0000000000016F0D                 db    0
.eh_frame:0000000000016F0E                 db    0
.eh_frame:0000000000016F0F                 db    0
.eh_frame:0000000000016F10                 db  18h
.eh_frame:0000000000016F11                 db    0
.eh_frame:0000000000016F12                 db    0
.eh_frame:0000000000016F13                 db    0
.eh_frame:0000000000016F14                 db 0ACh
.eh_frame:0000000000016F15                 db    8
.eh_frame:0000000000016F16                 db    0
.eh_frame:0000000000016F17                 db    0
.eh_frame:0000000000016F18                 db  88h
.eh_frame:0000000000016F19                 db 0E2h
.eh_frame:0000000000016F1A                 db 0FEh
.eh_frame:0000000000016F1B                 db 0FFh
.eh_frame:0000000000016F1C                 db  78h ; x
.eh_frame:0000000000016F1D                 db    0
.eh_frame:0000000000016F1E                 db    0
.eh_frame:0000000000016F1F                 db    0
.eh_frame:0000000000016F20                 db    0
.eh_frame:0000000000016F21                 db  44h ; D
.eh_frame:0000000000016F22                 db  0Eh
.eh_frame:0000000000016F23                 db  70h ; p
.eh_frame:0000000000016F24                 db    2
.eh_frame:0000000000016F25                 db  60h ; `
.eh_frame:0000000000016F26                 db  0Ah
.eh_frame:0000000000016F27                 db  0Eh
.eh_frame:0000000000016F28                 db    8
.eh_frame:0000000000016F29                 db  41h ; A
.eh_frame:0000000000016F2A                 db  0Bh
.eh_frame:0000000000016F2B                 db    0
.eh_frame:0000000000016F2C                 db  28h ; (
.eh_frame:0000000000016F2D                 db    0
.eh_frame:0000000000016F2E                 db    0
.eh_frame:0000000000016F2F                 db    0
.eh_frame:0000000000016F30                 db 0C8h
.eh_frame:0000000000016F31                 db    8
.eh_frame:0000000000016F32                 db    0
.eh_frame:0000000000016F33                 db    0
.eh_frame:0000000000016F34                 db 0ECh
.eh_frame:0000000000016F35                 db 0E2h
.eh_frame:0000000000016F36                 db 0FEh
.eh_frame:0000000000016F37                 db 0FFh
.eh_frame:0000000000016F38                 db 0D5h
.eh_frame:0000000000016F39                 db    0
.eh_frame:0000000000016F3A                 db    0
.eh_frame:0000000000016F3B                 db    0
.eh_frame:0000000000016F3C                 db    0
.eh_frame:0000000000016F3D                 db  41h ; A
.eh_frame:0000000000016F3E                 db  0Eh
.eh_frame:0000000000016F3F                 db  10h
.eh_frame:0000000000016F40                 db  86h
.eh_frame:0000000000016F41                 db    2
.eh_frame:0000000000016F42                 db  41h ; A
.eh_frame:0000000000016F43                 db  0Eh
.eh_frame:0000000000016F44                 db  18h
.eh_frame:0000000000016F45                 db  83h
.eh_frame:0000000000016F46                 db    3
.eh_frame:0000000000016F47                 db  50h ; P
.eh_frame:0000000000016F48                 db  0Eh
.eh_frame:0000000000016F49                 db 0D0h
.eh_frame:0000000000016F4A                 db    1
.eh_frame:0000000000016F4B                 db    2
.eh_frame:0000000000016F4C                 db 0ABh
.eh_frame:0000000000016F4D                 db  0Ah
.eh_frame:0000000000016F4E                 db  0Eh
.eh_frame:0000000000016F4F                 db  18h
.eh_frame:0000000000016F50                 db  41h ; A
.eh_frame:0000000000016F51                 db  0Eh
.eh_frame:0000000000016F52                 db  10h
.eh_frame:0000000000016F53                 db  41h ; A
.eh_frame:0000000000016F54                 db  0Eh
.eh_frame:0000000000016F55                 db    8
.eh_frame:0000000000016F56                 db  41h ; A
.eh_frame:0000000000016F57                 db  0Bh
.eh_frame:0000000000016F58                 db  1Ch
.eh_frame:0000000000016F59                 db    0
.eh_frame:0000000000016F5A                 db    0
.eh_frame:0000000000016F5B                 db    0
.eh_frame:0000000000016F5C                 db 0F4h
.eh_frame:0000000000016F5D                 db    8
.eh_frame:0000000000016F5E                 db    0
.eh_frame:0000000000016F5F                 db    0
.eh_frame:0000000000016F60                 db 0A0h
.eh_frame:0000000000016F61                 db 0E3h
.eh_frame:0000000000016F62                 db 0FEh
.eh_frame:0000000000016F63                 db 0FFh
.eh_frame:0000000000016F64                 db  80h
.eh_frame:0000000000016F65                 db    0
.eh_frame:0000000000016F66                 db    0
.eh_frame:0000000000016F67                 db    0
.eh_frame:0000000000016F68                 db    0
.eh_frame:0000000000016F69                 db  41h ; A
.eh_frame:0000000000016F6A                 db  0Eh
.eh_frame:0000000000016F6B                 db  10h
.eh_frame:0000000000016F6C                 db  83h
.eh_frame:0000000000016F6D                 db    2
.eh_frame:0000000000016F6E                 db    2
.eh_frame:0000000000016F6F                 db  7Ah ; z
.eh_frame:0000000000016F70                 db  0Eh
.eh_frame:0000000000016F71                 db    8
.eh_frame:0000000000016F72                 db    0
.eh_frame:0000000000016F73                 db    0
.eh_frame:0000000000016F74                 db    0
.eh_frame:0000000000016F75                 db    0
.eh_frame:0000000000016F76                 db    0
.eh_frame:0000000000016F77                 db    0
.eh_frame:0000000000016F78                 db  18h
.eh_frame:0000000000016F79                 db    0
.eh_frame:0000000000016F7A                 db    0
.eh_frame:0000000000016F7B                 db    0
.eh_frame:0000000000016F7C                 db  14h
.eh_frame:0000000000016F7D                 db    9
.eh_frame:0000000000016F7E                 db    0
.eh_frame:0000000000016F7F                 db    0
.eh_frame:0000000000016F80                 db    0
.eh_frame:0000000000016F81                 db 0E4h
.eh_frame:0000000000016F82                 db 0FEh
.eh_frame:0000000000016F83                 db 0FFh
.eh_frame:0000000000016F84                 db  1Ah
.eh_frame:0000000000016F85                 db    0
.eh_frame:0000000000016F86                 db    0
.eh_frame:0000000000016F87                 db    0
.eh_frame:0000000000016F88                 db    0
.eh_frame:0000000000016F89                 db  41h ; A
.eh_frame:0000000000016F8A                 db  0Eh
.eh_frame:0000000000016F8B                 db  10h
.eh_frame:0000000000016F8C                 db  83h
.eh_frame:0000000000016F8D                 db    2
.eh_frame:0000000000016F8E                 db  53h ; S
.eh_frame:0000000000016F8F                 db  0Ah
.eh_frame:0000000000016F90                 db  0Eh
.eh_frame:0000000000016F91                 db    8
.eh_frame:0000000000016F92                 db  41h ; A
.eh_frame:0000000000016F93                 db  0Bh
.eh_frame:0000000000016F94                 db  10h
.eh_frame:0000000000016F95                 db    0
.eh_frame:0000000000016F96                 db    0
.eh_frame:0000000000016F97                 db    0
.eh_frame:0000000000016F98                 db  30h ; 0
.eh_frame:0000000000016F99                 db    9
.eh_frame:0000000000016F9A                 db    0
.eh_frame:0000000000016F9B                 db    0
.eh_frame:0000000000016F9C                 db    4
.eh_frame:0000000000016F9D                 db 0E4h
.eh_frame:0000000000016F9E                 db 0FEh
.eh_frame:0000000000016F9F                 db 0FFh
.eh_frame:0000000000016FA0                 db  24h ; $
.eh_frame:0000000000016FA1                 db    0
.eh_frame:0000000000016FA2                 db    0
.eh_frame:0000000000016FA3                 db    0
.eh_frame:0000000000016FA4                 db    0
.eh_frame:0000000000016FA5                 db  5Fh ; _
.eh_frame:0000000000016FA6                 db  0Eh
.eh_frame:0000000000016FA7                 db  10h
.eh_frame:0000000000016FA8                 db  10h
.eh_frame:0000000000016FA9                 db    0
.eh_frame:0000000000016FAA                 db    0
.eh_frame:0000000000016FAB                 db    0
.eh_frame:0000000000016FAC                 db  44h ; D
.eh_frame:0000000000016FAD                 db    9
.eh_frame:0000000000016FAE                 db    0
.eh_frame:0000000000016FAF                 db    0
.eh_frame:0000000000016FB0                 db  20h
.eh_frame:0000000000016FB1                 db 0E4h
.eh_frame:0000000000016FB2                 db 0FEh
.eh_frame:0000000000016FB3                 db 0FFh
.eh_frame:0000000000016FB4                 db    2
.eh_frame:0000000000016FB5                 db    0
.eh_frame:0000000000016FB6                 db    0
.eh_frame:0000000000016FB7                 db    0
.eh_frame:0000000000016FB8                 db    0
.eh_frame:0000000000016FB9                 db    0
.eh_frame:0000000000016FBA                 db    0
.eh_frame:0000000000016FBB                 db    0
.eh_frame:0000000000016FBC                 db  20h
.eh_frame:0000000000016FBD                 db    0
.eh_frame:0000000000016FBE                 db    0
.eh_frame:0000000000016FBF                 db    0
.eh_frame:0000000000016FC0                 db  58h ; X
.eh_frame:0000000000016FC1                 db    9
.eh_frame:0000000000016FC2                 db    0
.eh_frame:0000000000016FC3                 db    0
.eh_frame:0000000000016FC4                 db  1Ch
.eh_frame:0000000000016FC5                 db 0E4h
.eh_frame:0000000000016FC6                 db 0FEh
.eh_frame:0000000000016FC7                 db 0FFh
.eh_frame:0000000000016FC8                 db  36h ; 6
.eh_frame:0000000000016FC9                 db    0
.eh_frame:0000000000016FCA                 db    0
.eh_frame:0000000000016FCB                 db    0
.eh_frame:0000000000016FCC                 db    0
.eh_frame:0000000000016FCD                 db  44h ; D
.eh_frame:0000000000016FCE                 db  0Eh
.eh_frame:0000000000016FCF                 db  10h
.eh_frame:0000000000016FD0                 db  83h
.eh_frame:0000000000016FD1                 db    2
.eh_frame:0000000000016FD2                 db  5Dh ; ]
.eh_frame:0000000000016FD3                 db  0Ah
.eh_frame:0000000000016FD4                 db  0Eh
.eh_frame:0000000000016FD5                 db    8
.eh_frame:0000000000016FD6                 db  47h ; G
.eh_frame:0000000000016FD7                 db  0Bh
.eh_frame:0000000000016FD8                 db  48h ; H
.eh_frame:0000000000016FD9                 db  0Ah
.eh_frame:0000000000016FDA                 db  0Eh
.eh_frame:0000000000016FDB                 db    8
.eh_frame:0000000000016FDC                 db  41h ; A
.eh_frame:0000000000016FDD                 db  0Bh
.eh_frame:0000000000016FDE                 db    0
.eh_frame:0000000000016FDF                 db    0
.eh_frame:0000000000016FE0                 db  10h
.eh_frame:0000000000016FE1                 db    0
.eh_frame:0000000000016FE2                 db    0
.eh_frame:0000000000016FE3                 db    0
.eh_frame:0000000000016FE4                 db  7Ch ; |
.eh_frame:0000000000016FE5                 db    9
.eh_frame:0000000000016FE6                 db    0
.eh_frame:0000000000016FE7                 db    0
.eh_frame:0000000000016FE8                 db  38h ; 8
.eh_frame:0000000000016FE9                 db 0E4h
.eh_frame:0000000000016FEA                 db 0FEh
.eh_frame:0000000000016FEB                 db 0FFh
.eh_frame:0000000000016FEC                 db  24h ; $
.eh_frame:0000000000016FED                 db    0
.eh_frame:0000000000016FEE                 db    0
.eh_frame:0000000000016FEF                 db    0
.eh_frame:0000000000016FF0                 db    0
.eh_frame:0000000000016FF1                 db  5Fh ; _
.eh_frame:0000000000016FF2                 db  0Eh
.eh_frame:0000000000016FF3                 db  10h
.eh_frame:0000000000016FF4                 db  14h
.eh_frame:0000000000016FF5                 db    0
.eh_frame:0000000000016FF6                 db    0
.eh_frame:0000000000016FF7                 db    0
.eh_frame:0000000000016FF8                 db  90h
.eh_frame:0000000000016FF9                 db    9
.eh_frame:0000000000016FFA                 db    0
.eh_frame:0000000000016FFB                 db    0
.eh_frame:0000000000016FFC                 db  54h ; T
.eh_frame:0000000000016FFD                 db 0E4h
.eh_frame:0000000000016FFE                 db 0FEh
.eh_frame:0000000000016FFF                 db 0FFh
.eh_frame:0000000000017000                 db  82h
.eh_frame:0000000000017001                 db    0
.eh_frame:0000000000017002                 db    0
.eh_frame:0000000000017003                 db    0
.eh_frame:0000000000017004                 db    0
.eh_frame:0000000000017005                 db    2
.eh_frame:0000000000017006                 db  5Fh ; _
.eh_frame:0000000000017007                 db  0Eh
.eh_frame:0000000000017008                 db  10h
.eh_frame:0000000000017009                 db  49h ; I
.eh_frame:000000000001700A                 db  0Eh
.eh_frame:000000000001700B                 db    8
.eh_frame:000000000001700C                 db  14h
.eh_frame:000000000001700D                 db    0
.eh_frame:000000000001700E                 db    0
.eh_frame:000000000001700F                 db    0
.eh_frame:0000000000017010                 db 0A8h
.eh_frame:0000000000017011                 db    9
.eh_frame:0000000000017012                 db    0
.eh_frame:0000000000017013                 db    0
.eh_frame:0000000000017014                 db 0CCh
.eh_frame:0000000000017015                 db 0E4h
.eh_frame:0000000000017016                 db 0FEh
.eh_frame:0000000000017017                 db 0FFh
.eh_frame:0000000000017018                 db  4Ah ; J
.eh_frame:0000000000017019                 db    0
.eh_frame:000000000001701A                 db    0
.eh_frame:000000000001701B                 db    0
.eh_frame:000000000001701C                 db    0
.eh_frame:000000000001701D                 db    2
.eh_frame:000000000001701E                 db  45h ; E
.eh_frame:000000000001701F                 db  0Eh
.eh_frame:0000000000017020                 db  10h
.eh_frame:0000000000017021                 db    0
.eh_frame:0000000000017022                 db    0
.eh_frame:0000000000017023                 db    0
.eh_frame:0000000000017024                 db  18h
.eh_frame:0000000000017025                 db    0
.eh_frame:0000000000017026                 db    0
.eh_frame:0000000000017027                 db    0
.eh_frame:0000000000017028                 db 0C0h
.eh_frame:0000000000017029                 db    9
.eh_frame:000000000001702A                 db    0
.eh_frame:000000000001702B                 db    0
.eh_frame:000000000001702C                 db    4
.eh_frame:000000000001702D                 db 0E5h
.eh_frame:000000000001702E                 db 0FEh
.eh_frame:000000000001702F                 db 0FFh
.eh_frame:0000000000017030                 db  17h
.eh_frame:0000000000017031                 db    0
.eh_frame:0000000000017032                 db    0
.eh_frame:0000000000017033                 db    0
.eh_frame:0000000000017034                 db    0
.eh_frame:0000000000017035                 db  41h ; A
.eh_frame:0000000000017036                 db  0Eh
.eh_frame:0000000000017037                 db  10h
.eh_frame:0000000000017038                 db  83h
.eh_frame:0000000000017039                 db    2
.eh_frame:000000000001703A                 db  51h ; Q
.eh_frame:000000000001703B                 db  0Eh
.eh_frame:000000000001703C                 db    8
.eh_frame:000000000001703D                 db    0
.eh_frame:000000000001703E                 db    0
.eh_frame:000000000001703F                 db    0
.eh_frame:0000000000017040                 db  18h
.eh_frame:0000000000017041                 db    0
.eh_frame:0000000000017042                 db    0
.eh_frame:0000000000017043                 db    0
.eh_frame:0000000000017044                 db 0DCh
.eh_frame:0000000000017045                 db    9
.eh_frame:0000000000017046                 db    0
.eh_frame:0000000000017047                 db    0
.eh_frame:0000000000017048                 db    8
.eh_frame:0000000000017049                 db 0E5h
.eh_frame:000000000001704A                 db 0FEh
.eh_frame:000000000001704B                 db 0FFh
.eh_frame:000000000001704C                 db  2Eh ; .
.eh_frame:000000000001704D                 db    0
.eh_frame:000000000001704E                 db    0
.eh_frame:000000000001704F                 db    0
.eh_frame:0000000000017050                 db    0
.eh_frame:0000000000017051                 db  47h ; G
.eh_frame:0000000000017052                 db  0Eh
.eh_frame:0000000000017053                 db  10h
.eh_frame:0000000000017054                 db  61h ; a
.eh_frame:0000000000017055                 db  0Ah
.eh_frame:0000000000017056                 db  0Eh
.eh_frame:0000000000017057                 db    8
.eh_frame:0000000000017058                 db  41h ; A
.eh_frame:0000000000017059                 db  0Bh
.eh_frame:000000000001705A                 db    0
.eh_frame:000000000001705B                 db    0
.eh_frame:000000000001705C                 db  24h ; $
.eh_frame:000000000001705D                 db    0
.eh_frame:000000000001705E                 db    0
.eh_frame:000000000001705F                 db    0
.eh_frame:0000000000017060                 db 0F8h
.eh_frame:0000000000017061                 db    9
.eh_frame:0000000000017062                 db    0
.eh_frame:0000000000017063                 db    0
.eh_frame:0000000000017064                 db  1Ch
.eh_frame:0000000000017065                 db 0E5h
.eh_frame:0000000000017066                 db 0FEh
.eh_frame:0000000000017067                 db 0FFh
.eh_frame:0000000000017068                 db  28h ; (
.eh_frame:0000000000017069                 db    0
.eh_frame:000000000001706A                 db    0
.eh_frame:000000000001706B                 db    0
.eh_frame:000000000001706C                 db    0
.eh_frame:000000000001706D                 db  41h ; A
.eh_frame:000000000001706E                 db  0Eh
.eh_frame:000000000001706F                 db  10h
.eh_frame:0000000000017070                 db  86h
.eh_frame:0000000000017071                 db    2
.eh_frame:0000000000017072                 db  41h ; A
.eh_frame:0000000000017073                 db  0Eh
.eh_frame:0000000000017074                 db  18h
.eh_frame:0000000000017075                 db  83h
.eh_frame:0000000000017076                 db    3
.eh_frame:0000000000017077                 db  4Dh ; M
.eh_frame:0000000000017078                 db  0Eh
.eh_frame:0000000000017079                 db  20h
.eh_frame:000000000001707A                 db  49h ; I
.eh_frame:000000000001707B                 db  0Eh
.eh_frame:000000000001707C                 db  18h
.eh_frame:000000000001707D                 db  47h ; G
.eh_frame:000000000001707E                 db  0Eh
.eh_frame:000000000001707F                 db  10h
.eh_frame:0000000000017080                 db  41h ; A
.eh_frame:0000000000017081                 db  0Eh
.eh_frame:0000000000017082                 db    8
.eh_frame:0000000000017083                 db    0
.eh_frame:0000000000017084                 db  18h
.eh_frame:0000000000017085                 db    0
.eh_frame:0000000000017086                 db    0
.eh_frame:0000000000017087                 db    0
.eh_frame:0000000000017088                 db  20h
.eh_frame:0000000000017089                 db  0Ah
.eh_frame:000000000001708A                 db    0
.eh_frame:000000000001708B                 db    0
.eh_frame:000000000001708C                 db  24h ; $
.eh_frame:000000000001708D                 db 0E5h
.eh_frame:000000000001708E                 db 0FEh
.eh_frame:000000000001708F                 db 0FFh
.eh_frame:0000000000017090                 db  13h
.eh_frame:0000000000017091                 db    0
.eh_frame:0000000000017092                 db    0
.eh_frame:0000000000017093                 db    0
.eh_frame:0000000000017094                 db    0
.eh_frame:0000000000017095                 db  41h ; A
.eh_frame:0000000000017096                 db  0Eh
.eh_frame:0000000000017097                 db  10h
.eh_frame:0000000000017098                 db  83h
.eh_frame:0000000000017099                 db    2
.eh_frame:000000000001709A                 db  50h ; P
.eh_frame:000000000001709B                 db  0Eh
.eh_frame:000000000001709C                 db    8
.eh_frame:000000000001709D                 db    0
.eh_frame:000000000001709E                 db    0
.eh_frame:000000000001709F                 db    0
.eh_frame:00000000000170A0                 db  14h
.eh_frame:00000000000170A1                 db    0
.eh_frame:00000000000170A2                 db    0
.eh_frame:00000000000170A3                 db    0
.eh_frame:00000000000170A4                 db  3Ch ; <
.eh_frame:00000000000170A5                 db  0Ah
.eh_frame:00000000000170A6                 db    0
.eh_frame:00000000000170A7                 db    0
.eh_frame:00000000000170A8                 db  28h ; (
.eh_frame:00000000000170A9                 db 0E5h
.eh_frame:00000000000170AA                 db 0FEh
.eh_frame:00000000000170AB                 db 0FFh
.eh_frame:00000000000170AC                 db  35h ; 5
.eh_frame:00000000000170AD                 db    0
.eh_frame:00000000000170AE                 db    0
.eh_frame:00000000000170AF                 db    0
.eh_frame:00000000000170B0                 db    0
.eh_frame:00000000000170B1                 db  4Bh ; K
.eh_frame:00000000000170B2                 db  0Eh
.eh_frame:00000000000170B3                 db  10h
.eh_frame:00000000000170B4                 db    0
.eh_frame:00000000000170B5                 db    0
.eh_frame:00000000000170B6                 db    0
.eh_frame:00000000000170B7                 db    0
.eh_frame:00000000000170B8                 db  48h ; H
.eh_frame:00000000000170B9                 db    0
.eh_frame:00000000000170BA                 db    0
.eh_frame:00000000000170BB                 db    0
.eh_frame:00000000000170BC                 db  54h ; T
.eh_frame:00000000000170BD                 db  0Ah
.eh_frame:00000000000170BE                 db    0
.eh_frame:00000000000170BF                 db    0
.eh_frame:00000000000170C0                 db  50h ; P
.eh_frame:00000000000170C1                 db 0E5h
.eh_frame:00000000000170C2                 db 0FEh
.eh_frame:00000000000170C3                 db 0FFh
.eh_frame:00000000000170C4                 db  11h
.eh_frame:00000000000170C5                 db    1
.eh_frame:00000000000170C6                 db    0
.eh_frame:00000000000170C7                 db    0
.eh_frame:00000000000170C8                 db    0
.eh_frame:00000000000170C9                 db  42h ; B
.eh_frame:00000000000170CA                 db  0Eh
.eh_frame:00000000000170CB                 db  10h
.eh_frame:00000000000170CC                 db  8Fh
.eh_frame:00000000000170CD                 db    2
.eh_frame:00000000000170CE                 db  42h ; B
.eh_frame:00000000000170CF                 db  0Eh
.eh_frame:00000000000170D0                 db  18h
.eh_frame:00000000000170D1                 db  8Eh
.eh_frame:00000000000170D2                 db    3
.eh_frame:00000000000170D3                 db  45h ; E
.eh_frame:00000000000170D4                 db  0Eh
.eh_frame:00000000000170D5                 db  20h
.eh_frame:00000000000170D6                 db  8Dh
.eh_frame:00000000000170D7                 db    4
.eh_frame:00000000000170D8                 db  42h ; B
.eh_frame:00000000000170D9                 db  0Eh
.eh_frame:00000000000170DA                 db  28h ; (
.eh_frame:00000000000170DB                 db  8Ch
.eh_frame:00000000000170DC                 db    5
.eh_frame:00000000000170DD                 db  44h ; D
.eh_frame:00000000000170DE                 db  0Eh
.eh_frame:00000000000170DF                 db  30h ; 0
.eh_frame:00000000000170E0                 db  86h
.eh_frame:00000000000170E1                 db    6
.eh_frame:00000000000170E2                 db  41h ; A
.eh_frame:00000000000170E3                 db  0Eh
.eh_frame:00000000000170E4                 db  38h ; 8
.eh_frame:00000000000170E5                 db  83h
.eh_frame:00000000000170E6                 db    7
.eh_frame:00000000000170E7                 db  4Eh ; N
.eh_frame:00000000000170E8                 db  0Eh
.eh_frame:00000000000170E9                 db  50h ; P
.eh_frame:00000000000170EA                 db    2
.eh_frame:00000000000170EB                 db  9Fh
.eh_frame:00000000000170EC                 db  0Ah
.eh_frame:00000000000170ED                 db  0Eh
.eh_frame:00000000000170EE                 db  38h ; 8
.eh_frame:00000000000170EF                 db  41h ; A
.eh_frame:00000000000170F0                 db  0Eh
.eh_frame:00000000000170F1                 db  30h ; 0
.eh_frame:00000000000170F2                 db  41h ; A
.eh_frame:00000000000170F3                 db  0Eh
.eh_frame:00000000000170F4                 db  28h ; (
.eh_frame:00000000000170F5                 db  42h ; B
.eh_frame:00000000000170F6                 db  0Eh
.eh_frame:00000000000170F7                 db  20h
.eh_frame:00000000000170F8                 db  42h ; B
.eh_frame:00000000000170F9                 db  0Eh
.eh_frame:00000000000170FA                 db  18h
.eh_frame:00000000000170FB                 db  42h ; B
.eh_frame:00000000000170FC                 db  0Eh
.eh_frame:00000000000170FD                 db  10h
.eh_frame:00000000000170FE                 db  42h ; B
.eh_frame:00000000000170FF                 db  0Eh
.eh_frame:0000000000017100                 db    8
.eh_frame:0000000000017101                 db  49h ; I
.eh_frame:0000000000017102                 db  0Bh
.eh_frame:0000000000017103                 db    0
.eh_frame:0000000000017104                 db  18h
.eh_frame:0000000000017105                 db    0
.eh_frame:0000000000017106                 db    0
.eh_frame:0000000000017107                 db    0
.eh_frame:0000000000017108                 db 0A0h
.eh_frame:0000000000017109                 db  0Ah
.eh_frame:000000000001710A                 db    0
.eh_frame:000000000001710B                 db    0
.eh_frame:000000000001710C                 db  24h ; $
.eh_frame:000000000001710D                 db 0E6h
.eh_frame:000000000001710E                 db 0FEh
.eh_frame:000000000001710F                 db 0FFh
.eh_frame:0000000000017110                 db  21h ; !
.eh_frame:0000000000017111                 db    0
.eh_frame:0000000000017112                 db    0
.eh_frame:0000000000017113                 db    0
.eh_frame:0000000000017114                 db    0
.eh_frame:0000000000017115                 db  44h ; D
.eh_frame:0000000000017116                 db  0Eh
.eh_frame:0000000000017117                 db  18h
.eh_frame:0000000000017118                 db  42h ; B
.eh_frame:0000000000017119                 db  0Eh
.eh_frame:000000000001711A                 db  20h
.eh_frame:000000000001711B                 db  5Ah ; Z
.eh_frame:000000000001711C                 db  0Eh
.eh_frame:000000000001711D                 db    8
.eh_frame:000000000001711E                 db    0
.eh_frame:000000000001711F                 db    0
.eh_frame:0000000000017120                 db  4Ch ; L
.eh_frame:0000000000017121                 db    0
.eh_frame:0000000000017122                 db    0
.eh_frame:0000000000017123                 db    0
.eh_frame:0000000000017124                 db 0BCh
.eh_frame:0000000000017125                 db  0Ah
.eh_frame:0000000000017126                 db    0
.eh_frame:0000000000017127                 db    0
.eh_frame:0000000000017128                 db  38h ; 8
.eh_frame:0000000000017129                 db 0E6h
.eh_frame:000000000001712A                 db 0FEh
.eh_frame:000000000001712B                 db 0FFh
.eh_frame:000000000001712C                 db 0B3h
.eh_frame:000000000001712D                 db    6
.eh_frame:000000000001712E                 db    0
.eh_frame:000000000001712F                 db    0
.eh_frame:0000000000017130                 db    0
.eh_frame:0000000000017131                 db  42h ; B
.eh_frame:0000000000017132                 db  0Eh
.eh_frame:0000000000017133                 db  10h
.eh_frame:0000000000017134                 db  8Fh
.eh_frame:0000000000017135                 db    2
.eh_frame:0000000000017136                 db  42h ; B
.eh_frame:0000000000017137                 db  0Eh
.eh_frame:0000000000017138                 db  18h
.eh_frame:0000000000017139                 db  8Eh
.eh_frame:000000000001713A                 db    3
.eh_frame:000000000001713B                 db  42h ; B
.eh_frame:000000000001713C                 db  0Eh
.eh_frame:000000000001713D                 db  20h
.eh_frame:000000000001713E                 db  8Dh
.eh_frame:000000000001713F                 db    4
.eh_frame:0000000000017140                 db  42h ; B
.eh_frame:0000000000017141                 db  0Eh
.eh_frame:0000000000017142                 db  28h ; (
.eh_frame:0000000000017143                 db  8Ch
.eh_frame:0000000000017144                 db    5
.eh_frame:0000000000017145                 db  41h ; A
.eh_frame:0000000000017146                 db  0Eh
.eh_frame:0000000000017147                 db  30h ; 0
.eh_frame:0000000000017148                 db  86h
.eh_frame:0000000000017149                 db    6
.eh_frame:000000000001714A                 db  41h ; A
.eh_frame:000000000001714B                 db  0Eh
.eh_frame:000000000001714C                 db  38h ; 8
.eh_frame:000000000001714D                 db  83h
.eh_frame:000000000001714E                 db    7
.eh_frame:000000000001714F                 db  44h ; D
.eh_frame:0000000000017150                 db  0Eh
.eh_frame:0000000000017151                 db  60h ; `
.eh_frame:0000000000017152                 db    2
.eh_frame:0000000000017153                 db  96h
.eh_frame:0000000000017154                 db  0Ah
.eh_frame:0000000000017155                 db  0Eh
.eh_frame:0000000000017156                 db  38h ; 8
.eh_frame:0000000000017157                 db  41h ; A
.eh_frame:0000000000017158                 db  0Eh
.eh_frame:0000000000017159                 db  30h ; 0
.eh_frame:000000000001715A                 db  41h ; A
.eh_frame:000000000001715B                 db  0Eh
.eh_frame:000000000001715C                 db  28h ; (
.eh_frame:000000000001715D                 db  42h ; B
.eh_frame:000000000001715E                 db  0Eh
.eh_frame:000000000001715F                 db  20h
.eh_frame:0000000000017160                 db  42h ; B
.eh_frame:0000000000017161                 db  0Eh
.eh_frame:0000000000017162                 db  18h
.eh_frame:0000000000017163                 db  42h ; B
.eh_frame:0000000000017164                 db  0Eh
.eh_frame:0000000000017165                 db  10h
.eh_frame:0000000000017166                 db  42h ; B
.eh_frame:0000000000017167                 db  0Eh
.eh_frame:0000000000017168                 db    8
.eh_frame:0000000000017169                 db  42h ; B
.eh_frame:000000000001716A                 db  0Bh
.eh_frame:000000000001716B                 db    0
.eh_frame:000000000001716C                 db    0
.eh_frame:000000000001716D                 db    0
.eh_frame:000000000001716E                 db    0
.eh_frame:000000000001716F                 db    0
.eh_frame:0000000000017170                 db  34h ; 4
.eh_frame:0000000000017171                 db    0
.eh_frame:0000000000017172                 db    0
.eh_frame:0000000000017173                 db    0
.eh_frame:0000000000017174                 db  0Ch
.eh_frame:0000000000017175                 db  0Bh
.eh_frame:0000000000017176                 db    0
.eh_frame:0000000000017177                 db    0
.eh_frame:0000000000017178                 db 0A8h
.eh_frame:0000000000017179                 db 0ECh
.eh_frame:000000000001717A                 db 0FEh
.eh_frame:000000000001717B                 db 0FFh
.eh_frame:000000000001717C                 db  7Bh ; {
.eh_frame:000000000001717D                 db    0
.eh_frame:000000000001717E                 db    0
.eh_frame:000000000001717F                 db    0
.eh_frame:0000000000017180                 db    0
.eh_frame:0000000000017181                 db  42h ; B
.eh_frame:0000000000017182                 db  0Eh
.eh_frame:0000000000017183                 db  10h
.eh_frame:0000000000017184                 db  8Ch
.eh_frame:0000000000017185                 db    2
.eh_frame:0000000000017186                 db  41h ; A
.eh_frame:0000000000017187                 db  0Eh
.eh_frame:0000000000017188                 db  18h
.eh_frame:0000000000017189                 db  86h
.eh_frame:000000000001718A                 db    3
.eh_frame:000000000001718B                 db  41h ; A
.eh_frame:000000000001718C                 db  0Eh
.eh_frame:000000000001718D                 db  20h
.eh_frame:000000000001718E                 db  83h
.eh_frame:000000000001718F                 db    4
.eh_frame:0000000000017190                 db  7Dh ; }
.eh_frame:0000000000017191                 db  0Ah
.eh_frame:0000000000017192                 db  0Eh
.eh_frame:0000000000017193                 db  18h
.eh_frame:0000000000017194                 db  41h ; A
.eh_frame:0000000000017195                 db  0Eh
.eh_frame:0000000000017196                 db  10h
.eh_frame:0000000000017197                 db  42h ; B
.eh_frame:0000000000017198                 db  0Eh
.eh_frame:0000000000017199                 db    8
.eh_frame:000000000001719A                 db  44h ; D
.eh_frame:000000000001719B                 db  0Bh
.eh_frame:000000000001719C                 db  60h ; `
.eh_frame:000000000001719D                 db  0Ah
.eh_frame:000000000001719E                 db  0Eh
.eh_frame:000000000001719F                 db  18h
.eh_frame:00000000000171A0                 db  41h ; A
.eh_frame:00000000000171A1                 db  0Eh
.eh_frame:00000000000171A2                 db  10h
.eh_frame:00000000000171A3                 db  42h ; B
.eh_frame:00000000000171A4                 db  0Eh
.eh_frame:00000000000171A5                 db    8
.eh_frame:00000000000171A6                 db  45h ; E
.eh_frame:00000000000171A7                 db  0Bh
.eh_frame:00000000000171A8                 db  1Ch
.eh_frame:00000000000171A9                 db    0
.eh_frame:00000000000171AA                 db    0
.eh_frame:00000000000171AB                 db    0
.eh_frame:00000000000171AC                 db  44h ; D
.eh_frame:00000000000171AD                 db  0Bh
.eh_frame:00000000000171AE                 db    0
.eh_frame:00000000000171AF                 db    0
.eh_frame:00000000000171B0                 db 0F0h
.eh_frame:00000000000171B1                 db 0ECh
.eh_frame:00000000000171B2                 db 0FEh
.eh_frame:00000000000171B3                 db 0FFh
.eh_frame:00000000000171B4                 db  40h ; @
.eh_frame:00000000000171B5                 db    0
.eh_frame:00000000000171B6                 db    0
.eh_frame:00000000000171B7                 db    0
.eh_frame:00000000000171B8                 db    0
.eh_frame:00000000000171B9                 db  44h ; D
.eh_frame:00000000000171BA                 db  0Eh
.eh_frame:00000000000171BB                 db  10h
.eh_frame:00000000000171BC                 db  83h
.eh_frame:00000000000171BD                 db    2
.eh_frame:00000000000171BE                 db  5Ah ; Z
.eh_frame:00000000000171BF                 db  0Ah
.eh_frame:00000000000171C0                 db  0Eh
.eh_frame:00000000000171C1                 db    8
.eh_frame:00000000000171C2                 db  4Ah ; J
.eh_frame:00000000000171C3                 db  0Bh
.eh_frame:00000000000171C4                 db  53h ; S
.eh_frame:00000000000171C5                 db  0Eh
.eh_frame:00000000000171C6                 db    8
.eh_frame:00000000000171C7                 db    0
.eh_frame:00000000000171C8                 db  2Ch ; ,
.eh_frame:00000000000171C9                 db    0
.eh_frame:00000000000171CA                 db    0
.eh_frame:00000000000171CB                 db    0
.eh_frame:00000000000171CC                 db  64h ; d
.eh_frame:00000000000171CD                 db  0Bh
.eh_frame:00000000000171CE                 db    0
.eh_frame:00000000000171CF                 db    0
.eh_frame:00000000000171D0                 db  10h
.eh_frame:00000000000171D1                 db 0EDh
.eh_frame:00000000000171D2                 db 0FEh
.eh_frame:00000000000171D3                 db 0FFh
.eh_frame:00000000000171D4                 db  57h ; W
.eh_frame:00000000000171D5                 db    0
.eh_frame:00000000000171D6                 db    0
.eh_frame:00000000000171D7                 db    0
.eh_frame:00000000000171D8                 db    0
.eh_frame:00000000000171D9                 db  63h ; c
.eh_frame:00000000000171DA                 db  0Eh
.eh_frame:00000000000171DB                 db  10h
.eh_frame:00000000000171DC                 db  8Ch
.eh_frame:00000000000171DD                 db    2
.eh_frame:00000000000171DE                 db  41h ; A
.eh_frame:00000000000171DF                 db  0Eh
.eh_frame:00000000000171E0                 db  18h
.eh_frame:00000000000171E1                 db  86h
.eh_frame:00000000000171E2                 db    3
.eh_frame:00000000000171E3                 db  44h ; D
.eh_frame:00000000000171E4                 db  0Eh
.eh_frame:00000000000171E5                 db  20h
.eh_frame:00000000000171E6                 db  83h
.eh_frame:00000000000171E7                 db    4
.eh_frame:00000000000171E8                 db  6Bh ; k
.eh_frame:00000000000171E9                 db  0Eh
.eh_frame:00000000000171EA                 db  18h
.eh_frame:00000000000171EB                 db  41h ; A
.eh_frame:00000000000171EC                 db  0Eh
.eh_frame:00000000000171ED                 db  10h
.eh_frame:00000000000171EE                 db  42h ; B
.eh_frame:00000000000171EF                 db  0Eh
.eh_frame:00000000000171F0                 db    8
.eh_frame:00000000000171F1                 db    0
.eh_frame:00000000000171F2                 db    0
.eh_frame:00000000000171F3                 db    0
.eh_frame:00000000000171F4                 db    0
.eh_frame:00000000000171F5                 db    0
.eh_frame:00000000000171F6                 db    0
.eh_frame:00000000000171F7                 db    0
.eh_frame:00000000000171F8                 db  3Ch ; <
.eh_frame:00000000000171F9                 db    0
.eh_frame:00000000000171FA                 db    0
.eh_frame:00000000000171FB                 db    0
.eh_frame:00000000000171FC                 db  94h
.eh_frame:00000000000171FD                 db  0Bh
.eh_frame:00000000000171FE                 db    0
.eh_frame:00000000000171FF                 db    0
.eh_frame:0000000000017200                 db  40h ; @
.eh_frame:0000000000017201                 db 0EDh
.eh_frame:0000000000017202                 db 0FEh
.eh_frame:0000000000017203                 db 0FFh
.eh_frame:0000000000017204                 db  83h
.eh_frame:0000000000017205                 db    0
.eh_frame:0000000000017206                 db    0
.eh_frame:0000000000017207                 db    0
.eh_frame:0000000000017208                 db    0
.eh_frame:0000000000017209                 db  42h ; B
.eh_frame:000000000001720A                 db  0Eh
.eh_frame:000000000001720B                 db  10h
.eh_frame:000000000001720C                 db  8Dh
.eh_frame:000000000001720D                 db    2
.eh_frame:000000000001720E                 db  42h ; B
.eh_frame:000000000001720F                 db  0Eh
.eh_frame:0000000000017210                 db  18h
.eh_frame:0000000000017211                 db  8Ch
.eh_frame:0000000000017212                 db    3
.eh_frame:0000000000017213                 db  44h ; D
.eh_frame:0000000000017214                 db  0Eh
.eh_frame:0000000000017215                 db  20h
.eh_frame:0000000000017216                 db  86h
.eh_frame:0000000000017217                 db    4
.eh_frame:0000000000017218                 db  41h ; A
.eh_frame:0000000000017219                 db  0Eh
.eh_frame:000000000001721A                 db  28h ; (
.eh_frame:000000000001721B                 db  83h
.eh_frame:000000000001721C                 db    5
.eh_frame:000000000001721D                 db  4Ah ; J
.eh_frame:000000000001721E                 db  0Eh
.eh_frame:000000000001721F                 db  40h ; @
.eh_frame:0000000000017220                 db    2
.eh_frame:0000000000017221                 db  64h ; d
.eh_frame:0000000000017222                 db  0Ah
.eh_frame:0000000000017223                 db  0Eh
.eh_frame:0000000000017224                 db  28h ; (
.eh_frame:0000000000017225                 db  41h ; A
.eh_frame:0000000000017226                 db  0Eh
.eh_frame:0000000000017227                 db  20h
.eh_frame:0000000000017228                 db  41h ; A
.eh_frame:0000000000017229                 db  0Eh
.eh_frame:000000000001722A                 db  18h
.eh_frame:000000000001722B                 db  42h ; B
.eh_frame:000000000001722C                 db  0Eh
.eh_frame:000000000001722D                 db  10h
.eh_frame:000000000001722E                 db  42h ; B
.eh_frame:000000000001722F                 db  0Eh
.eh_frame:0000000000017230                 db    8
.eh_frame:0000000000017231                 db  41h ; A
.eh_frame:0000000000017232                 db  0Bh
.eh_frame:0000000000017233                 db    0
.eh_frame:0000000000017234                 db    0
.eh_frame:0000000000017235                 db    0
.eh_frame:0000000000017236                 db    0
.eh_frame:0000000000017237                 db    0
.eh_frame:0000000000017238                 db  10h
.eh_frame:0000000000017239                 db    0
.eh_frame:000000000001723A                 db    0
.eh_frame:000000000001723B                 db    0
.eh_frame:000000000001723C                 db 0D4h
.eh_frame:000000000001723D                 db  0Bh
.eh_frame:000000000001723E                 db    0
.eh_frame:000000000001723F                 db    0
.eh_frame:0000000000017240                 db  90h
.eh_frame:0000000000017241                 db 0EDh
.eh_frame:0000000000017242                 db 0FEh
.eh_frame:0000000000017243                 db 0FFh
.eh_frame:0000000000017244                 db  2Fh ; /
.eh_frame:0000000000017245                 db    1
.eh_frame:0000000000017246                 db    0
.eh_frame:0000000000017247                 db    0
.eh_frame:0000000000017248                 db    0
.eh_frame:0000000000017249                 db    0
.eh_frame:000000000001724A                 db    0
.eh_frame:000000000001724B                 db    0
.eh_frame:000000000001724C                 db  10h
.eh_frame:000000000001724D                 db    0
.eh_frame:000000000001724E                 db    0
.eh_frame:000000000001724F                 db    0
.eh_frame:0000000000017250                 db 0E8h
.eh_frame:0000000000017251                 db  0Bh
.eh_frame:0000000000017252                 db    0
.eh_frame:0000000000017253                 db    0
.eh_frame:0000000000017254                 db 0ACh
.eh_frame:0000000000017255                 db 0EEh
.eh_frame:0000000000017256                 db 0FEh
.eh_frame:0000000000017257                 db 0FFh
.eh_frame:0000000000017258                 db  1Dh
.eh_frame:0000000000017259                 db    0
.eh_frame:000000000001725A                 db    0
.eh_frame:000000000001725B                 db    0
.eh_frame:000000000001725C                 db    0
.eh_frame:000000000001725D                 db    0
.eh_frame:000000000001725E                 db    0
.eh_frame:000000000001725F                 db    0
.eh_frame:0000000000017260                 db  90h
.eh_frame:0000000000017261                 db    0
.eh_frame:0000000000017262                 db    0
.eh_frame:0000000000017263                 db    0
.eh_frame:0000000000017264                 db 0FCh
.eh_frame:0000000000017265                 db  0Bh
.eh_frame:0000000000017266                 db    0
.eh_frame:0000000000017267                 db    0
.eh_frame:0000000000017268                 db 0B8h
.eh_frame:0000000000017269                 db 0EEh
.eh_frame:000000000001726A                 db 0FEh
.eh_frame:000000000001726B                 db 0FFh
.eh_frame:000000000001726C                 db  2Ch ; ,
.eh_frame:000000000001726D                 db    2
.eh_frame:000000000001726E                 db    0
.eh_frame:000000000001726F                 db    0
.eh_frame:0000000000017270                 db    0
.eh_frame:0000000000017271                 db  42h ; B
.eh_frame:0000000000017272                 db  0Eh
.eh_frame:0000000000017273                 db  10h
.eh_frame:0000000000017274                 db  8Fh
.eh_frame:0000000000017275                 db    2
.eh_frame:0000000000017276                 db  42h ; B
.eh_frame:0000000000017277                 db  0Eh
.eh_frame:0000000000017278                 db  18h
.eh_frame:0000000000017279                 db  8Eh
.eh_frame:000000000001727A                 db    3
.eh_frame:000000000001727B                 db  45h ; E
.eh_frame:000000000001727C                 db  0Eh
.eh_frame:000000000001727D                 db  20h
.eh_frame:000000000001727E                 db  8Dh
.eh_frame:000000000001727F                 db    4
.eh_frame:0000000000017280                 db  42h ; B
.eh_frame:0000000000017281                 db  0Eh
.eh_frame:0000000000017282                 db  28h ; (
.eh_frame:0000000000017283                 db  8Ch
.eh_frame:0000000000017284                 db    5
.eh_frame:0000000000017285                 db  45h ; E
.eh_frame:0000000000017286                 db  0Eh
.eh_frame:0000000000017287                 db  30h ; 0
.eh_frame:0000000000017288                 db  86h
.eh_frame:0000000000017289                 db    6
.eh_frame:000000000001728A                 db  41h ; A
.eh_frame:000000000001728B                 db  0Eh
.eh_frame:000000000001728C                 db  38h ; 8
.eh_frame:000000000001728D                 db  83h
.eh_frame:000000000001728E                 db    7
.eh_frame:000000000001728F                 db  47h ; G
.eh_frame:0000000000017290                 db  0Eh
.eh_frame:0000000000017291                 db  80h
.eh_frame:0000000000017292                 db    1
.eh_frame:0000000000017293                 db    2
.eh_frame:0000000000017294                 db 0BAh
.eh_frame:0000000000017295                 db  0Ah
.eh_frame:0000000000017296                 db  0Eh
.eh_frame:0000000000017297                 db  38h ; 8
.eh_frame:0000000000017298                 db  46h ; F
.eh_frame:0000000000017299                 db  0Eh
.eh_frame:000000000001729A                 db  30h ; 0
.eh_frame:000000000001729B                 db  41h ; A
.eh_frame:000000000001729C                 db  0Eh
.eh_frame:000000000001729D                 db  28h ; (
.eh_frame:000000000001729E                 db  42h ; B
.eh_frame:000000000001729F                 db  0Eh
.eh_frame:00000000000172A0                 db  20h
.eh_frame:00000000000172A1                 db  42h ; B
.eh_frame:00000000000172A2                 db  0Eh
.eh_frame:00000000000172A3                 db  18h
.eh_frame:00000000000172A4                 db  42h ; B
.eh_frame:00000000000172A5                 db  0Eh
.eh_frame:00000000000172A6                 db  10h
.eh_frame:00000000000172A7                 db  42h ; B
.eh_frame:00000000000172A8                 db  0Eh
.eh_frame:00000000000172A9                 db    8
.eh_frame:00000000000172AA                 db  47h ; G
.eh_frame:00000000000172AB                 db  0Bh
.eh_frame:00000000000172AC                 db    2
.eh_frame:00000000000172AD                 db 0E1h
.eh_frame:00000000000172AE                 db  0Ah
.eh_frame:00000000000172AF                 db  0Eh
.eh_frame:00000000000172B0                 db  38h ; 8
.eh_frame:00000000000172B1                 db  44h ; D
.eh_frame:00000000000172B2                 db  0Eh
.eh_frame:00000000000172B3                 db  30h ; 0
.eh_frame:00000000000172B4                 db  43h ; C
.eh_frame:00000000000172B5                 db  0Eh
.eh_frame:00000000000172B6                 db  28h ; (
.eh_frame:00000000000172B7                 db  42h ; B
.eh_frame:00000000000172B8                 db  0Eh
.eh_frame:00000000000172B9                 db  20h
.eh_frame:00000000000172BA                 db  42h ; B
.eh_frame:00000000000172BB                 db  0Eh
.eh_frame:00000000000172BC                 db  18h
.eh_frame:00000000000172BD                 db  42h ; B
.eh_frame:00000000000172BE                 db  0Eh
.eh_frame:00000000000172BF                 db  10h
.eh_frame:00000000000172C0                 db  42h ; B
.eh_frame:00000000000172C1                 db  0Eh
.eh_frame:00000000000172C2                 db    8
.eh_frame:00000000000172C3                 db  48h ; H
.eh_frame:00000000000172C4                 db  0Bh
.eh_frame:00000000000172C5                 db  59h ; Y
.eh_frame:00000000000172C6                 db  0Ah
.eh_frame:00000000000172C7                 db  0Eh
.eh_frame:00000000000172C8                 db  38h ; 8
.eh_frame:00000000000172C9                 db  43h ; C
.eh_frame:00000000000172CA                 db  0Eh
.eh_frame:00000000000172CB                 db  30h ; 0
.eh_frame:00000000000172CC                 db  41h ; A
.eh_frame:00000000000172CD                 db  0Eh
.eh_frame:00000000000172CE                 db  28h ; (
.eh_frame:00000000000172CF                 db  42h ; B
.eh_frame:00000000000172D0                 db  0Eh
.eh_frame:00000000000172D1                 db  20h
.eh_frame:00000000000172D2                 db  42h ; B
.eh_frame:00000000000172D3                 db  0Eh
.eh_frame:00000000000172D4                 db  18h
.eh_frame:00000000000172D5                 db  42h ; B
.eh_frame:00000000000172D6                 db  0Eh
.eh_frame:00000000000172D7                 db  10h
.eh_frame:00000000000172D8                 db  42h ; B
.eh_frame:00000000000172D9                 db  0Eh
.eh_frame:00000000000172DA                 db    8
.eh_frame:00000000000172DB                 db  4Bh ; K
.eh_frame:00000000000172DC                 db  0Bh
.eh_frame:00000000000172DD                 db  49h ; I
.eh_frame:00000000000172DE                 db  0Eh
.eh_frame:00000000000172DF                 db  38h ; 8
.eh_frame:00000000000172E0                 db  41h ; A
.eh_frame:00000000000172E1                 db  0Eh
.eh_frame:00000000000172E2                 db  30h ; 0
.eh_frame:00000000000172E3                 db  41h ; A
.eh_frame:00000000000172E4                 db  0Eh
.eh_frame:00000000000172E5                 db  28h ; (
.eh_frame:00000000000172E6                 db  48h ; H
.eh_frame:00000000000172E7                 db  0Eh
.eh_frame:00000000000172E8                 db  20h
.eh_frame:00000000000172E9                 db  44h ; D
.eh_frame:00000000000172EA                 db  0Eh
.eh_frame:00000000000172EB                 db  18h
.eh_frame:00000000000172EC                 db  42h ; B
.eh_frame:00000000000172ED                 db  0Eh
.eh_frame:00000000000172EE                 db  10h
.eh_frame:00000000000172EF                 db  42h ; B
.eh_frame:00000000000172F0                 db  0Eh
.eh_frame:00000000000172F1                 db    8
.eh_frame:00000000000172F2                 db    0
.eh_frame:00000000000172F3                 db    0
.eh_frame:00000000000172F4                 db  10h
.eh_frame:00000000000172F5                 db    0
.eh_frame:00000000000172F6                 db    0
.eh_frame:00000000000172F7                 db    0
.eh_frame:00000000000172F8                 db  90h
.eh_frame:00000000000172F9                 db  0Ch
.eh_frame:00000000000172FA                 db    0
.eh_frame:00000000000172FB                 db    0
.eh_frame:00000000000172FC                 db  54h ; T
.eh_frame:00000000000172FD                 db 0F0h
.eh_frame:00000000000172FE                 db 0FEh
.eh_frame:00000000000172FF                 db 0FFh
.eh_frame:0000000000017300                 db  66h ; f
.eh_frame:0000000000017301                 db    0
.eh_frame:0000000000017302                 db    0
.eh_frame:0000000000017303                 db    0
.eh_frame:0000000000017304                 db    0
.eh_frame:0000000000017305                 db    0
.eh_frame:0000000000017306                 db    0
.eh_frame:0000000000017307                 db    0
.eh_frame:0000000000017308                 db  28h ; (
.eh_frame:0000000000017309                 db    0
.eh_frame:000000000001730A                 db    0
.eh_frame:000000000001730B                 db    0
.eh_frame:000000000001730C                 db 0A4h
.eh_frame:000000000001730D                 db  0Ch
.eh_frame:000000000001730E                 db    0
.eh_frame:000000000001730F                 db    0
.eh_frame:0000000000017310                 db 0B0h
.eh_frame:0000000000017311                 db 0F0h
.eh_frame:0000000000017312                 db 0FEh
.eh_frame:0000000000017313                 db 0FFh
.eh_frame:0000000000017314                 db  6Bh ; k
.eh_frame:0000000000017315                 db    0
.eh_frame:0000000000017316                 db    0
.eh_frame:0000000000017317                 db    0
.eh_frame:0000000000017318                 db    0
.eh_frame:0000000000017319                 db  42h ; B
.eh_frame:000000000001731A                 db  0Eh
.eh_frame:000000000001731B                 db  10h
.eh_frame:000000000001731C                 db  8Ch
.eh_frame:000000000001731D                 db    2
.eh_frame:000000000001731E                 db  44h ; D
.eh_frame:000000000001731F                 db  0Eh
.eh_frame:0000000000017320                 db  18h
.eh_frame:0000000000017321                 db  86h
.eh_frame:0000000000017322                 db    3
.eh_frame:0000000000017323                 db  44h ; D
.eh_frame:0000000000017324                 db  0Eh
.eh_frame:0000000000017325                 db  20h
.eh_frame:0000000000017326                 db  83h
.eh_frame:0000000000017327                 db    4
.eh_frame:0000000000017328                 db    2
.eh_frame:0000000000017329                 db  5Dh ; ]
.eh_frame:000000000001732A                 db  0Eh
.eh_frame:000000000001732B                 db  18h
.eh_frame:000000000001732C                 db  41h ; A
.eh_frame:000000000001732D                 db  0Eh
.eh_frame:000000000001732E                 db  10h
.eh_frame:000000000001732F                 db  42h ; B
.eh_frame:0000000000017330                 db  0Eh
.eh_frame:0000000000017331                 db    8
.eh_frame:0000000000017332                 db    0
.eh_frame:0000000000017333                 db    0
.eh_frame:0000000000017334                 db  28h ; (
.eh_frame:0000000000017335                 db    0
.eh_frame:0000000000017336                 db    0
.eh_frame:0000000000017337                 db    0
.eh_frame:0000000000017338                 db 0D0h
.eh_frame:0000000000017339                 db  0Ch
.eh_frame:000000000001733A                 db    0
.eh_frame:000000000001733B                 db    0
.eh_frame:000000000001733C                 db 0F4h
.eh_frame:000000000001733D                 db 0F0h
.eh_frame:000000000001733E                 db 0FEh
.eh_frame:000000000001733F                 db 0FFh
.eh_frame:0000000000017340                 db  51h ; Q
.eh_frame:0000000000017341                 db    0
.eh_frame:0000000000017342                 db    0
.eh_frame:0000000000017343                 db    0
.eh_frame:0000000000017344                 db    0
.eh_frame:0000000000017345                 db  42h ; B
.eh_frame:0000000000017346                 db  0Eh
.eh_frame:0000000000017347                 db  10h
.eh_frame:0000000000017348                 db  8Ch
.eh_frame:0000000000017349                 db    2
.eh_frame:000000000001734A                 db  44h ; D
.eh_frame:000000000001734B                 db  0Eh
.eh_frame:000000000001734C                 db  18h
.eh_frame:000000000001734D                 db  86h
.eh_frame:000000000001734E                 db    3
.eh_frame:000000000001734F                 db  44h ; D
.eh_frame:0000000000017350                 db  0Eh
.eh_frame:0000000000017351                 db  20h
.eh_frame:0000000000017352                 db  83h
.eh_frame:0000000000017353                 db    4
.eh_frame:0000000000017354                 db    2
.eh_frame:0000000000017355                 db  43h ; C
.eh_frame:0000000000017356                 db  0Eh
.eh_frame:0000000000017357                 db  18h
.eh_frame:0000000000017358                 db  41h ; A
.eh_frame:0000000000017359                 db  0Eh
.eh_frame:000000000001735A                 db  10h
.eh_frame:000000000001735B                 db  42h ; B
.eh_frame:000000000001735C                 db  0Eh
.eh_frame:000000000001735D                 db    8
.eh_frame:000000000001735E                 db    0
.eh_frame:000000000001735F                 db    0
.eh_frame:0000000000017360                 db  30h ; 0
.eh_frame:0000000000017361                 db    0
.eh_frame:0000000000017362                 db    0
.eh_frame:0000000000017363                 db    0
.eh_frame:0000000000017364                 db 0FCh
.eh_frame:0000000000017365                 db  0Ch
.eh_frame:0000000000017366                 db    0
.eh_frame:0000000000017367                 db    0
.eh_frame:0000000000017368                 db  28h ; (
.eh_frame:0000000000017369                 db 0F1h
.eh_frame:000000000001736A                 db 0FEh
.eh_frame:000000000001736B                 db 0FFh
.eh_frame:000000000001736C                 db  9Ch
.eh_frame:000000000001736D                 db    0
.eh_frame:000000000001736E                 db    0
.eh_frame:000000000001736F                 db    0
.eh_frame:0000000000017370                 db    0
.eh_frame:0000000000017371                 db  41h ; A
.eh_frame:0000000000017372                 db  0Eh
.eh_frame:0000000000017373                 db  10h
.eh_frame:0000000000017374                 db  86h
.eh_frame:0000000000017375                 db    2
.eh_frame:0000000000017376                 db  41h ; A
.eh_frame:0000000000017377                 db  0Eh
.eh_frame:0000000000017378                 db  18h
.eh_frame:0000000000017379                 db  83h
.eh_frame:000000000001737A                 db    3
.eh_frame:000000000001737B                 db  4Ah ; J
.eh_frame:000000000001737C                 db  0Eh
.eh_frame:000000000001737D                 db  20h
.eh_frame:000000000001737E                 db    2
.eh_frame:000000000001737F                 db  62h ; b
.eh_frame:0000000000017380                 db  0Ah
.eh_frame:0000000000017381                 db  0Eh
.eh_frame:0000000000017382                 db  18h
.eh_frame:0000000000017383                 db  43h ; C
.eh_frame:0000000000017384                 db  0Eh
.eh_frame:0000000000017385                 db  10h
.eh_frame:0000000000017386                 db  41h ; A
.eh_frame:0000000000017387                 db  0Eh
.eh_frame:0000000000017388                 db    8
.eh_frame:0000000000017389                 db  46h ; F
.eh_frame:000000000001738A                 db  0Bh
.eh_frame:000000000001738B                 db  5Ch ; \
.eh_frame:000000000001738C                 db  0Eh
.eh_frame:000000000001738D                 db  18h
.eh_frame:000000000001738E                 db  46h ; F
.eh_frame:000000000001738F                 db  0Eh
.eh_frame:0000000000017390                 db  10h
.eh_frame:0000000000017391                 db  41h ; A
.eh_frame:0000000000017392                 db  0Eh
.eh_frame:0000000000017393                 db    8
.eh_frame:0000000000017394                 db  28h ; (
.eh_frame:0000000000017395                 db    0
.eh_frame:0000000000017396                 db    0
.eh_frame:0000000000017397                 db    0
.eh_frame:0000000000017398                 db  30h ; 0
.eh_frame:0000000000017399                 db  0Dh
.eh_frame:000000000001739A                 db    0
.eh_frame:000000000001739B                 db    0
.eh_frame:000000000001739C                 db  94h
.eh_frame:000000000001739D                 db 0F1h
.eh_frame:000000000001739E                 db 0FEh
.eh_frame:000000000001739F                 db 0FFh
.eh_frame:00000000000173A0                 db  64h ; d
.eh_frame:00000000000173A1                 db    0
.eh_frame:00000000000173A2                 db    0
.eh_frame:00000000000173A3                 db    0
.eh_frame:00000000000173A4                 db    0
.eh_frame:00000000000173A5                 db  41h ; A
.eh_frame:00000000000173A6                 db  0Eh
.eh_frame:00000000000173A7                 db  10h
.eh_frame:00000000000173A8                 db  86h
.eh_frame:00000000000173A9                 db    2
.eh_frame:00000000000173AA                 db  41h ; A
.eh_frame:00000000000173AB                 db  0Eh
.eh_frame:00000000000173AC                 db  18h
.eh_frame:00000000000173AD                 db  83h
.eh_frame:00000000000173AE                 db    3
.eh_frame:00000000000173AF                 db  4Ah ; J
.eh_frame:00000000000173B0                 db  0Eh
.eh_frame:00000000000173B1                 db  20h
.eh_frame:00000000000173B2                 db  62h ; b
.eh_frame:00000000000173B3                 db  0Ah
.eh_frame:00000000000173B4                 db  0Eh
.eh_frame:00000000000173B5                 db  18h
.eh_frame:00000000000173B6                 db  41h ; A
.eh_frame:00000000000173B7                 db  0Eh
.eh_frame:00000000000173B8                 db  10h
.eh_frame:00000000000173B9                 db  41h ; A
.eh_frame:00000000000173BA                 db  0Eh
.eh_frame:00000000000173BB                 db    8
.eh_frame:00000000000173BC                 db  48h ; H
.eh_frame:00000000000173BD                 db  0Bh
.eh_frame:00000000000173BE                 db    0
.eh_frame:00000000000173BF                 db    0
.eh_frame:00000000000173C0                 db  34h ; 4
.eh_frame:00000000000173C1                 db    0
.eh_frame:00000000000173C2                 db    0
.eh_frame:00000000000173C3                 db    0
.eh_frame:00000000000173C4                 db  5Ch ; \
.eh_frame:00000000000173C5                 db  0Dh
.eh_frame:00000000000173C6                 db    0
.eh_frame:00000000000173C7                 db    0
.eh_frame:00000000000173C8                 db 0D8h
.eh_frame:00000000000173C9                 db 0F1h
.eh_frame:00000000000173CA                 db 0FEh
.eh_frame:00000000000173CB                 db 0FFh
.eh_frame:00000000000173CC                 db  2Ch ; ,
.eh_frame:00000000000173CD                 db    1
.eh_frame:00000000000173CE                 db    0
.eh_frame:00000000000173CF                 db    0
.eh_frame:00000000000173D0                 db    0
.eh_frame:00000000000173D1                 db  41h ; A
.eh_frame:00000000000173D2                 db  0Eh
.eh_frame:00000000000173D3                 db  10h
.eh_frame:00000000000173D4                 db  86h
.eh_frame:00000000000173D5                 db    2
.eh_frame:00000000000173D6                 db  41h ; A
.eh_frame:00000000000173D7                 db  0Eh
.eh_frame:00000000000173D8                 db  18h
.eh_frame:00000000000173D9                 db  83h
.eh_frame:00000000000173DA                 db    3
.eh_frame:00000000000173DB                 db  4Ah ; J
.eh_frame:00000000000173DC                 db  0Eh
.eh_frame:00000000000173DD                 db  20h
.eh_frame:00000000000173DE                 db  66h ; f
.eh_frame:00000000000173DF                 db  0Ah
.eh_frame:00000000000173E0                 db  0Eh
.eh_frame:00000000000173E1                 db  18h
.eh_frame:00000000000173E2                 db  41h ; A
.eh_frame:00000000000173E3                 db  0Eh
.eh_frame:00000000000173E4                 db  10h
.eh_frame:00000000000173E5                 db  41h ; A
.eh_frame:00000000000173E6                 db  0Eh
.eh_frame:00000000000173E7                 db    8
.eh_frame:00000000000173E8                 db  44h ; D
.eh_frame:00000000000173E9                 db  0Bh
.eh_frame:00000000000173EA                 db  6Dh ; m
.eh_frame:00000000000173EB                 db  0Ah
.eh_frame:00000000000173EC                 db  0Eh
.eh_frame:00000000000173ED                 db  18h
.eh_frame:00000000000173EE                 db  46h ; F
.eh_frame:00000000000173EF                 db  0Eh
.eh_frame:00000000000173F0                 db  10h
.eh_frame:00000000000173F1                 db  41h ; A
.eh_frame:00000000000173F2                 db  0Eh
.eh_frame:00000000000173F3                 db    8
.eh_frame:00000000000173F4                 db  44h ; D
.eh_frame:00000000000173F5                 db  0Bh
.eh_frame:00000000000173F6                 db    0
.eh_frame:00000000000173F7                 db    0
.eh_frame:00000000000173F8                 db  4Ch ; L
.eh_frame:00000000000173F9                 db    0
.eh_frame:00000000000173FA                 db    0
.eh_frame:00000000000173FB                 db    0
.eh_frame:00000000000173FC                 db  94h
.eh_frame:00000000000173FD                 db  0Dh
.eh_frame:00000000000173FE                 db    0
.eh_frame:00000000000173FF                 db    0
.eh_frame:0000000000017400                 db 0D0h
.eh_frame:0000000000017401                 db 0F2h
.eh_frame:0000000000017402                 db 0FEh
.eh_frame:0000000000017403                 db 0FFh
.eh_frame:0000000000017404                 db 0ECh
.eh_frame:0000000000017405                 db    0
.eh_frame:0000000000017406                 db    0
.eh_frame:0000000000017407                 db    0
.eh_frame:0000000000017408                 db    0
.eh_frame:0000000000017409                 db  42h ; B
.eh_frame:000000000001740A                 db  0Eh
.eh_frame:000000000001740B                 db  10h
.eh_frame:000000000001740C                 db  8Eh
.eh_frame:000000000001740D                 db    2
.eh_frame:000000000001740E                 db  42h ; B
.eh_frame:000000000001740F                 db  0Eh
.eh_frame:0000000000017410                 db  18h
.eh_frame:0000000000017411                 db  8Dh
.eh_frame:0000000000017412                 db    3
.eh_frame:0000000000017413                 db  45h ; E
.eh_frame:0000000000017414                 db  0Eh
.eh_frame:0000000000017415                 db  20h
.eh_frame:0000000000017416                 db  8Ch
.eh_frame:0000000000017417                 db    4
.eh_frame:0000000000017418                 db  41h ; A
.eh_frame:0000000000017419                 db  0Eh
.eh_frame:000000000001741A                 db  28h ; (
.eh_frame:000000000001741B                 db  86h
.eh_frame:000000000001741C                 db    5
.eh_frame:000000000001741D                 db  44h ; D
.eh_frame:000000000001741E                 db  0Eh
.eh_frame:000000000001741F                 db  30h ; 0
.eh_frame:0000000000017420                 db  83h
.eh_frame:0000000000017421                 db    6
.eh_frame:0000000000017422                 db    2
.eh_frame:0000000000017423                 db  71h ; q
.eh_frame:0000000000017424                 db  0Ah
.eh_frame:0000000000017425                 db  0Eh
.eh_frame:0000000000017426                 db  28h ; (
.eh_frame:0000000000017427                 db  46h ; F
.eh_frame:0000000000017428                 db  0Eh
.eh_frame:0000000000017429                 db  20h
.eh_frame:000000000001742A                 db  42h ; B
.eh_frame:000000000001742B                 db  0Eh
.eh_frame:000000000001742C                 db  18h
.eh_frame:000000000001742D                 db  42h ; B
.eh_frame:000000000001742E                 db  0Eh
.eh_frame:000000000001742F                 db  10h
.eh_frame:0000000000017430                 db  42h ; B
.eh_frame:0000000000017431                 db  0Eh
.eh_frame:0000000000017432                 db    8
.eh_frame:0000000000017433                 db  45h ; E
.eh_frame:0000000000017434                 db  0Bh
.eh_frame:0000000000017435                 db  6Eh ; n
.eh_frame:0000000000017436                 db  0Ah
.eh_frame:0000000000017437                 db  0Eh
.eh_frame:0000000000017438                 db  28h ; (
.eh_frame:0000000000017439                 db  41h ; A
.eh_frame:000000000001743A                 db  0Eh
.eh_frame:000000000001743B                 db  20h
.eh_frame:000000000001743C                 db  42h ; B
.eh_frame:000000000001743D                 db  0Eh
.eh_frame:000000000001743E                 db  18h
.eh_frame:000000000001743F                 db  42h ; B
.eh_frame:0000000000017440                 db  0Eh
.eh_frame:0000000000017441                 db  10h
.eh_frame:0000000000017442                 db  42h ; B
.eh_frame:0000000000017443                 db  0Eh
.eh_frame:0000000000017444                 db    8
.eh_frame:0000000000017445                 db  41h ; A
.eh_frame:0000000000017446                 db  0Bh
.eh_frame:0000000000017447                 db    0
.eh_frame:0000000000017448                 db  2Ch ; ,
.eh_frame:0000000000017449                 db    0
.eh_frame:000000000001744A                 db    0
.eh_frame:000000000001744B                 db    0
.eh_frame:000000000001744C                 db 0E4h
.eh_frame:000000000001744D                 db  0Dh
.eh_frame:000000000001744E                 db    0
.eh_frame:000000000001744F                 db    0
.eh_frame:0000000000017450                 db  70h ; p
.eh_frame:0000000000017451                 db 0F3h
.eh_frame:0000000000017452                 db 0FEh
.eh_frame:0000000000017453                 db 0FFh
.eh_frame:0000000000017454                 db  6Eh ; n
.eh_frame:0000000000017455                 db    0
.eh_frame:0000000000017456                 db    0
.eh_frame:0000000000017457                 db    0
.eh_frame:0000000000017458                 db    0
.eh_frame:0000000000017459                 db  42h ; B
.eh_frame:000000000001745A                 db  0Eh
.eh_frame:000000000001745B                 db  10h
.eh_frame:000000000001745C                 db  8Ch
.eh_frame:000000000001745D                 db    2
.eh_frame:000000000001745E                 db  49h ; I
.eh_frame:000000000001745F                 db  0Eh
.eh_frame:0000000000017460                 db  18h
.eh_frame:0000000000017461                 db  86h
.eh_frame:0000000000017462                 db    3
.eh_frame:0000000000017463                 db  49h ; I
.eh_frame:0000000000017464                 db  0Eh
.eh_frame:0000000000017465                 db  20h
.eh_frame:0000000000017466                 db  83h
.eh_frame:0000000000017467                 db    4
.eh_frame:0000000000017468                 db    2
.eh_frame:0000000000017469                 db  4Ah ; J
.eh_frame:000000000001746A                 db  0Ah
.eh_frame:000000000001746B                 db  0Eh
.eh_frame:000000000001746C                 db  18h
.eh_frame:000000000001746D                 db  41h ; A
.eh_frame:000000000001746E                 db  0Eh
.eh_frame:000000000001746F                 db  10h
.eh_frame:0000000000017470                 db  42h ; B
.eh_frame:0000000000017471                 db  0Eh
.eh_frame:0000000000017472                 db    8
.eh_frame:0000000000017473                 db  47h ; G
.eh_frame:0000000000017474                 db  0Bh
.eh_frame:0000000000017475                 db    0
.eh_frame:0000000000017476                 db    0
.eh_frame:0000000000017477                 db    0
.eh_frame:0000000000017478                 db  48h ; H
.eh_frame:0000000000017479                 db    0
.eh_frame:000000000001747A                 db    0
.eh_frame:000000000001747B                 db    0
.eh_frame:000000000001747C                 db  14h
.eh_frame:000000000001747D                 db  0Eh
.eh_frame:000000000001747E                 db    0
.eh_frame:000000000001747F                 db    0
.eh_frame:0000000000017480                 db 0B0h
.eh_frame:0000000000017481                 db 0F3h
.eh_frame:0000000000017482                 db 0FEh
.eh_frame:0000000000017483                 db 0FFh
.eh_frame:0000000000017484                 db 0C3h
.eh_frame:0000000000017485                 db    1
.eh_frame:0000000000017486                 db    0
.eh_frame:0000000000017487                 db    0
.eh_frame:0000000000017488                 db    0
.eh_frame:0000000000017489                 db  42h ; B
.eh_frame:000000000001748A                 db  0Eh
.eh_frame:000000000001748B                 db  10h
.eh_frame:000000000001748C                 db  8Fh
.eh_frame:000000000001748D                 db    2
.eh_frame:000000000001748E                 db  42h ; B
.eh_frame:000000000001748F                 db  0Eh
.eh_frame:0000000000017490                 db  18h
.eh_frame:0000000000017491                 db  8Eh
.eh_frame:0000000000017492                 db    3
.eh_frame:0000000000017493                 db  42h ; B
.eh_frame:0000000000017494                 db  0Eh
.eh_frame:0000000000017495                 db  20h
.eh_frame:0000000000017496                 db  8Dh
.eh_frame:0000000000017497                 db    4
.eh_frame:0000000000017498                 db  42h ; B
.eh_frame:0000000000017499                 db  0Eh
.eh_frame:000000000001749A                 db  28h ; (
.eh_frame:000000000001749B                 db  8Ch
.eh_frame:000000000001749C                 db    5
.eh_frame:000000000001749D                 db  41h ; A
.eh_frame:000000000001749E                 db  0Eh
.eh_frame:000000000001749F                 db  30h ; 0
.eh_frame:00000000000174A0                 db  86h
.eh_frame:00000000000174A1                 db    6
.eh_frame:00000000000174A2                 db  41h ; A
.eh_frame:00000000000174A3                 db  0Eh
.eh_frame:00000000000174A4                 db  38h ; 8
.eh_frame:00000000000174A5                 db  83h
.eh_frame:00000000000174A6                 db    7
.eh_frame:00000000000174A7                 db  47h ; G
.eh_frame:00000000000174A8                 db  0Eh
.eh_frame:00000000000174A9                 db 0A0h
.eh_frame:00000000000174AA                 db    1
.eh_frame:00000000000174AB                 db    2
.eh_frame:00000000000174AC                 db 0D3h
.eh_frame:00000000000174AD                 db  0Ah
.eh_frame:00000000000174AE                 db  0Eh
.eh_frame:00000000000174AF                 db  38h ; 8
.eh_frame:00000000000174B0                 db  41h ; A
.eh_frame:00000000000174B1                 db  0Eh
.eh_frame:00000000000174B2                 db  30h ; 0
.eh_frame:00000000000174B3                 db  41h ; A
.eh_frame:00000000000174B4                 db  0Eh
.eh_frame:00000000000174B5                 db  28h ; (
.eh_frame:00000000000174B6                 db  42h ; B
.eh_frame:00000000000174B7                 db  0Eh
.eh_frame:00000000000174B8                 db  20h
.eh_frame:00000000000174B9                 db  42h ; B
.eh_frame:00000000000174BA                 db  0Eh
.eh_frame:00000000000174BB                 db  18h
.eh_frame:00000000000174BC                 db  42h ; B
.eh_frame:00000000000174BD                 db  0Eh
.eh_frame:00000000000174BE                 db  10h
.eh_frame:00000000000174BF                 db  42h ; B
.eh_frame:00000000000174C0                 db  0Eh
.eh_frame:00000000000174C1                 db    8
.eh_frame:00000000000174C2                 db  42h ; B
.eh_frame:00000000000174C3                 db  0Bh
.eh_frame:00000000000174C4                 db  48h ; H
.eh_frame:00000000000174C5                 db    0
.eh_frame:00000000000174C6                 db    0
.eh_frame:00000000000174C7                 db    0
.eh_frame:00000000000174C8                 db  60h ; `
.eh_frame:00000000000174C9                 db  0Eh
.eh_frame:00000000000174CA                 db    0
.eh_frame:00000000000174CB                 db    0
.eh_frame:00000000000174CC                 db  34h ; 4
.eh_frame:00000000000174CD                 db 0F5h
.eh_frame:00000000000174CE                 db 0FEh
.eh_frame:00000000000174CF                 db 0FFh
.eh_frame:00000000000174D0                 db  15h
.eh_frame:00000000000174D1                 db    6
.eh_frame:00000000000174D2                 db    0
.eh_frame:00000000000174D3                 db    0
.eh_frame:00000000000174D4                 db    0
.eh_frame:00000000000174D5                 db  42h ; B
.eh_frame:00000000000174D6                 db  0Eh
.eh_frame:00000000000174D7                 db  10h
.eh_frame:00000000000174D8                 db  8Fh
.eh_frame:00000000000174D9                 db    2
.eh_frame:00000000000174DA                 db  42h ; B
.eh_frame:00000000000174DB                 db  0Eh
.eh_frame:00000000000174DC                 db  18h
.eh_frame:00000000000174DD                 db  8Eh
.eh_frame:00000000000174DE                 db    3
.eh_frame:00000000000174DF                 db  45h ; E
.eh_frame:00000000000174E0                 db  0Eh
.eh_frame:00000000000174E1                 db  20h
.eh_frame:00000000000174E2                 db  8Dh
.eh_frame:00000000000174E3                 db    4
.eh_frame:00000000000174E4                 db  42h ; B
.eh_frame:00000000000174E5                 db  0Eh
.eh_frame:00000000000174E6                 db  28h ; (
.eh_frame:00000000000174E7                 db  8Ch
.eh_frame:00000000000174E8                 db    5
.eh_frame:00000000000174E9                 db  41h ; A
.eh_frame:00000000000174EA                 db  0Eh
.eh_frame:00000000000174EB                 db  30h ; 0
.eh_frame:00000000000174EC                 db  86h
.eh_frame:00000000000174ED                 db    6
.eh_frame:00000000000174EE                 db  41h ; A
.eh_frame:00000000000174EF                 db  0Eh
.eh_frame:00000000000174F0                 db  38h ; 8
.eh_frame:00000000000174F1                 db  83h
.eh_frame:00000000000174F2                 db    7
.eh_frame:00000000000174F3                 db  47h ; G
.eh_frame:00000000000174F4                 db  0Eh
.eh_frame:00000000000174F5                 db 0E0h
.eh_frame:00000000000174F6                 db    1
.eh_frame:00000000000174F7                 db    2
.eh_frame:00000000000174F8                 db  69h ; i
.eh_frame:00000000000174F9                 db  0Ah
.eh_frame:00000000000174FA                 db  0Eh
.eh_frame:00000000000174FB                 db  38h ; 8
.eh_frame:00000000000174FC                 db  41h ; A
.eh_frame:00000000000174FD                 db  0Eh
.eh_frame:00000000000174FE                 db  30h ; 0
.eh_frame:00000000000174FF                 db  41h ; A
.eh_frame:0000000000017500                 db  0Eh
.eh_frame:0000000000017501                 db  28h ; (
.eh_frame:0000000000017502                 db  42h ; B
.eh_frame:0000000000017503                 db  0Eh
.eh_frame:0000000000017504                 db  20h
.eh_frame:0000000000017505                 db  42h ; B
.eh_frame:0000000000017506                 db  0Eh
.eh_frame:0000000000017507                 db  18h
.eh_frame:0000000000017508                 db  42h ; B
.eh_frame:0000000000017509                 db  0Eh
.eh_frame:000000000001750A                 db  10h
.eh_frame:000000000001750B                 db  42h ; B
.eh_frame:000000000001750C                 db  0Eh
.eh_frame:000000000001750D                 db    8
.eh_frame:000000000001750E                 db  49h ; I
.eh_frame:000000000001750F                 db  0Bh
.eh_frame:0000000000017510                 db  58h ; X
.eh_frame:0000000000017511                 db    0
.eh_frame:0000000000017512                 db    0
.eh_frame:0000000000017513                 db    0
.eh_frame:0000000000017514                 db 0ACh
.eh_frame:0000000000017515                 db  0Eh
.eh_frame:0000000000017516                 db    0
.eh_frame:0000000000017517                 db    0
.eh_frame:0000000000017518                 db    8
.eh_frame:0000000000017519                 db 0FBh
.eh_frame:000000000001751A                 db 0FEh
.eh_frame:000000000001751B                 db 0FFh
.eh_frame:000000000001751C                 db  4Eh ; N
.eh_frame:000000000001751D                 db    1
.eh_frame:000000000001751E                 db    0
.eh_frame:000000000001751F                 db    0
.eh_frame:0000000000017520                 db    0
.eh_frame:0000000000017521                 db  41h ; A
.eh_frame:0000000000017522                 db  0Eh
.eh_frame:0000000000017523                 db  10h
.eh_frame:0000000000017524                 db  86h
.eh_frame:0000000000017525                 db    2
.eh_frame:0000000000017526                 db  41h ; A
.eh_frame:0000000000017527                 db  0Eh
.eh_frame:0000000000017528                 db  18h
.eh_frame:0000000000017529                 db  83h
.eh_frame:000000000001752A                 db    3
.eh_frame:000000000001752B                 db  4Eh ; N
.eh_frame:000000000001752C                 db  0Eh
.eh_frame:000000000001752D                 db  20h
.eh_frame:000000000001752E                 db    2
.eh_frame:000000000001752F                 db  83h
.eh_frame:0000000000017530                 db  0Ah
.eh_frame:0000000000017531                 db  0Eh
.eh_frame:0000000000017532                 db  18h
.eh_frame:0000000000017533                 db  41h ; A
.eh_frame:0000000000017534                 db  0Eh
.eh_frame:0000000000017535                 db  10h
.eh_frame:0000000000017536                 db  41h ; A
.eh_frame:0000000000017537                 db  0Eh
.eh_frame:0000000000017538                 db    8
.eh_frame:0000000000017539                 db  4Bh ; K
.eh_frame:000000000001753A                 db  0Bh
.eh_frame:000000000001753B                 db    2
.eh_frame:000000000001753C                 db  61h ; a
.eh_frame:000000000001753D                 db  0Ah
.eh_frame:000000000001753E                 db  0Eh
.eh_frame:000000000001753F                 db  18h
.eh_frame:0000000000017540                 db  43h ; C
.eh_frame:0000000000017541                 db  0Eh
.eh_frame:0000000000017542                 db  10h
.eh_frame:0000000000017543                 db  41h ; A
.eh_frame:0000000000017544                 db  0Eh
.eh_frame:0000000000017545                 db    8
.eh_frame:0000000000017546                 db  4Bh ; K
.eh_frame:0000000000017547                 db  0Bh
.eh_frame:0000000000017548                 db  4Ch ; L
.eh_frame:0000000000017549                 db  0Ah
.eh_frame:000000000001754A                 db  0Eh
.eh_frame:000000000001754B                 db  18h
.eh_frame:000000000001754C                 db  43h ; C
.eh_frame:000000000001754D                 db  0Eh
.eh_frame:000000000001754E                 db  10h
.eh_frame:000000000001754F                 db  41h ; A
.eh_frame:0000000000017550                 db  0Eh
.eh_frame:0000000000017551                 db    8
.eh_frame:0000000000017552                 db  48h ; H
.eh_frame:0000000000017553                 db  0Bh
.eh_frame:0000000000017554                 db  49h ; I
.eh_frame:0000000000017555                 db  0Ah
.eh_frame:0000000000017556                 db  0Eh
.eh_frame:0000000000017557                 db  18h
.eh_frame:0000000000017558                 db  43h ; C
.eh_frame:0000000000017559                 db  0Eh
.eh_frame:000000000001755A                 db  10h
.eh_frame:000000000001755B                 db  41h ; A
.eh_frame:000000000001755C                 db  0Eh
.eh_frame:000000000001755D                 db    8
.eh_frame:000000000001755E                 db  4Bh ; K
.eh_frame:000000000001755F                 db  0Bh
.eh_frame:0000000000017560                 db  49h ; I
.eh_frame:0000000000017561                 db  0Eh
.eh_frame:0000000000017562                 db  18h
.eh_frame:0000000000017563                 db  43h ; C
.eh_frame:0000000000017564                 db  0Eh
.eh_frame:0000000000017565                 db  10h
.eh_frame:0000000000017566                 db  41h ; A
.eh_frame:0000000000017567                 db  0Eh
.eh_frame:0000000000017568                 db    8
.eh_frame:0000000000017569                 db    0
.eh_frame:000000000001756A                 db    0
.eh_frame:000000000001756B                 db    0
.eh_frame:000000000001756C                 db  28h ; (
.eh_frame:000000000001756D                 db    0
.eh_frame:000000000001756E                 db    0
.eh_frame:000000000001756F                 db    0
.eh_frame:0000000000017570                 db    8
.eh_frame:0000000000017571                 db  0Fh
.eh_frame:0000000000017572                 db    0
.eh_frame:0000000000017573                 db    0
.eh_frame:0000000000017574                 db 0FCh
.eh_frame:0000000000017575                 db 0FBh
.eh_frame:0000000000017576                 db 0FEh
.eh_frame:0000000000017577                 db 0FFh
.eh_frame:0000000000017578                 db  86h
.eh_frame:0000000000017579                 db    0
.eh_frame:000000000001757A                 db    0
.eh_frame:000000000001757B                 db    0
.eh_frame:000000000001757C                 db    0
.eh_frame:000000000001757D                 db  42h ; B
.eh_frame:000000000001757E                 db  0Eh
.eh_frame:000000000001757F                 db  10h
.eh_frame:0000000000017580                 db  8Ch
.eh_frame:0000000000017581                 db    2
.eh_frame:0000000000017582                 db  41h ; A
.eh_frame:0000000000017583                 db  0Eh
.eh_frame:0000000000017584                 db  18h
.eh_frame:0000000000017585                 db  86h
.eh_frame:0000000000017586                 db    3
.eh_frame:0000000000017587                 db  44h ; D
.eh_frame:0000000000017588                 db  0Eh
.eh_frame:0000000000017589                 db  20h
.eh_frame:000000000001758A                 db  83h
.eh_frame:000000000001758B                 db    4
.eh_frame:000000000001758C                 db  70h ; p
.eh_frame:000000000001758D                 db  0Ah
.eh_frame:000000000001758E                 db  0Eh
.eh_frame:000000000001758F                 db  18h
.eh_frame:0000000000017590                 db  41h ; A
.eh_frame:0000000000017591                 db  0Eh
.eh_frame:0000000000017592                 db  10h
.eh_frame:0000000000017593                 db  42h ; B
.eh_frame:0000000000017594                 db  0Eh
.eh_frame:0000000000017595                 db    8
.eh_frame:0000000000017596                 db  46h ; F
.eh_frame:0000000000017597                 db  0Bh
.eh_frame:0000000000017598                 db  18h
.eh_frame:0000000000017599                 db    0
.eh_frame:000000000001759A                 db    0
.eh_frame:000000000001759B                 db    0
.eh_frame:000000000001759C                 db  34h ; 4
.eh_frame:000000000001759D                 db  0Fh
.eh_frame:000000000001759E                 db    0
.eh_frame:000000000001759F                 db    0
.eh_frame:00000000000175A0                 db  60h ; `
.eh_frame:00000000000175A1                 db 0FCh
.eh_frame:00000000000175A2                 db 0FEh
.eh_frame:00000000000175A3                 db 0FFh
.eh_frame:00000000000175A4                 db  30h ; 0
.eh_frame:00000000000175A5                 db    0
.eh_frame:00000000000175A6                 db    0
.eh_frame:00000000000175A7                 db    0
.eh_frame:00000000000175A8                 db    0
.eh_frame:00000000000175A9                 db  41h ; A
.eh_frame:00000000000175AA                 db  0Eh
.eh_frame:00000000000175AB                 db  10h
.eh_frame:00000000000175AC                 db  83h
.eh_frame:00000000000175AD                 db    2
.eh_frame:00000000000175AE                 db  6Ah ; j
.eh_frame:00000000000175AF                 db  0Eh
.eh_frame:00000000000175B0                 db    8
.eh_frame:00000000000175B1                 db    0
.eh_frame:00000000000175B2                 db    0
.eh_frame:00000000000175B3                 db    0
.eh_frame:00000000000175B4                 db  10h
.eh_frame:00000000000175B5                 db    0
.eh_frame:00000000000175B6                 db    0
.eh_frame:00000000000175B7                 db    0
.eh_frame:00000000000175B8                 db  50h ; P
.eh_frame:00000000000175B9                 db  0Fh
.eh_frame:00000000000175BA                 db    0
.eh_frame:00000000000175BB                 db    0
.eh_frame:00000000000175BC                 db  74h ; t
.eh_frame:00000000000175BD                 db 0FCh
.eh_frame:00000000000175BE                 db 0FEh
.eh_frame:00000000000175BF                 db 0FFh
.eh_frame:00000000000175C0                 db  25h ; %
.eh_frame:00000000000175C1                 db    0
.eh_frame:00000000000175C2                 db    0
.eh_frame:00000000000175C3                 db    0
.eh_frame:00000000000175C4                 db    0
.eh_frame:00000000000175C5                 db    0
.eh_frame:00000000000175C6                 db    0
.eh_frame:00000000000175C7                 db    0
.eh_frame:00000000000175C8                 db  14h
.eh_frame:00000000000175C9                 db    0
.eh_frame:00000000000175CA                 db    0
.eh_frame:00000000000175CB                 db    0
.eh_frame:00000000000175CC                 db  64h ; d
.eh_frame:00000000000175CD                 db  0Fh
.eh_frame:00000000000175CE                 db    0
.eh_frame:00000000000175CF                 db    0
.eh_frame:00000000000175D0                 db  90h
.eh_frame:00000000000175D1                 db 0FCh
.eh_frame:00000000000175D2                 db 0FEh
.eh_frame:00000000000175D3                 db 0FFh
.eh_frame:00000000000175D4                 db  14h
.eh_frame:00000000000175D5                 db    0
.eh_frame:00000000000175D6                 db    0
.eh_frame:00000000000175D7                 db    0
.eh_frame:00000000000175D8                 db    0
.eh_frame:00000000000175D9                 db  48h ; H
.eh_frame:00000000000175DA                 db  0Eh
.eh_frame:00000000000175DB                 db  10h
.eh_frame:00000000000175DC                 db  4Bh ; K
.eh_frame:00000000000175DD                 db  0Eh
.eh_frame:00000000000175DE                 db    8
.eh_frame:00000000000175DF                 db    0
.eh_frame:00000000000175E0                 db  48h ; H
.eh_frame:00000000000175E1                 db    0
.eh_frame:00000000000175E2                 db    0
.eh_frame:00000000000175E3                 db    0
.eh_frame:00000000000175E4                 db  7Ch ; |
.eh_frame:00000000000175E5                 db  0Fh
.eh_frame:00000000000175E6                 db    0
.eh_frame:00000000000175E7                 db    0
.eh_frame:00000000000175E8                 db  98h
.eh_frame:00000000000175E9                 db 0FCh
.eh_frame:00000000000175EA                 db 0FEh
.eh_frame:00000000000175EB                 db 0FFh
.eh_frame:00000000000175EC                 db 0CEh
.eh_frame:00000000000175ED                 db    1
.eh_frame:00000000000175EE                 db    0
.eh_frame:00000000000175EF                 db    0
.eh_frame:00000000000175F0                 db    0
.eh_frame:00000000000175F1                 db  42h ; B
.eh_frame:00000000000175F2                 db  0Eh
.eh_frame:00000000000175F3                 db  10h
.eh_frame:00000000000175F4                 db  8Fh
.eh_frame:00000000000175F5                 db    2
.eh_frame:00000000000175F6                 db  42h ; B
.eh_frame:00000000000175F7                 db  0Eh
.eh_frame:00000000000175F8                 db  18h
.eh_frame:00000000000175F9                 db  8Eh
.eh_frame:00000000000175FA                 db    3
.eh_frame:00000000000175FB                 db  45h ; E
.eh_frame:00000000000175FC                 db  0Eh
.eh_frame:00000000000175FD                 db  20h
.eh_frame:00000000000175FE                 db  8Dh
.eh_frame:00000000000175FF                 db    4
.eh_frame:0000000000017600                 db  42h ; B
.eh_frame:0000000000017601                 db  0Eh
.eh_frame:0000000000017602                 db  28h ; (
.eh_frame:0000000000017603                 db  8Ch
.eh_frame:0000000000017604                 db    5
.eh_frame:0000000000017605                 db  41h ; A
.eh_frame:0000000000017606                 db  0Eh
.eh_frame:0000000000017607                 db  30h ; 0
.eh_frame:0000000000017608                 db  86h
.eh_frame:0000000000017609                 db    6
.eh_frame:000000000001760A                 db  41h ; A
.eh_frame:000000000001760B                 db  0Eh
.eh_frame:000000000001760C                 db  38h ; 8
.eh_frame:000000000001760D                 db  83h
.eh_frame:000000000001760E                 db    7
.eh_frame:000000000001760F                 db  47h ; G
.eh_frame:0000000000017610                 db  0Eh
.eh_frame:0000000000017611                 db  50h ; P
.eh_frame:0000000000017612                 db    2
.eh_frame:0000000000017613                 db 0ACh
.eh_frame:0000000000017614                 db  0Ah
.eh_frame:0000000000017615                 db  0Eh
.eh_frame:0000000000017616                 db  38h ; 8
.eh_frame:0000000000017617                 db  41h ; A
.eh_frame:0000000000017618                 db  0Eh
.eh_frame:0000000000017619                 db  30h ; 0
.eh_frame:000000000001761A                 db  41h ; A
.eh_frame:000000000001761B                 db  0Eh
.eh_frame:000000000001761C                 db  28h ; (
.eh_frame:000000000001761D                 db  42h ; B
.eh_frame:000000000001761E                 db  0Eh
.eh_frame:000000000001761F                 db  20h
.eh_frame:0000000000017620                 db  42h ; B
.eh_frame:0000000000017621                 db  0Eh
.eh_frame:0000000000017622                 db  18h
.eh_frame:0000000000017623                 db  42h ; B
.eh_frame:0000000000017624                 db  0Eh
.eh_frame:0000000000017625                 db  10h
.eh_frame:0000000000017626                 db  42h ; B
.eh_frame:0000000000017627                 db  0Eh
.eh_frame:0000000000017628                 db    8
.eh_frame:0000000000017629                 db  46h ; F
.eh_frame:000000000001762A                 db  0Bh
.eh_frame:000000000001762B                 db    0
.eh_frame:000000000001762C                 db  34h ; 4
.eh_frame:000000000001762D                 db    0
.eh_frame:000000000001762E                 db    0
.eh_frame:000000000001762F                 db    0
.eh_frame:0000000000017630                 db 0C8h
.eh_frame:0000000000017631                 db  0Fh
.eh_frame:0000000000017632                 db    0
.eh_frame:0000000000017633                 db    0
.eh_frame:0000000000017634                 db  1Ch
.eh_frame:0000000000017635                 db 0FEh
.eh_frame:0000000000017636                 db 0FEh
.eh_frame:0000000000017637                 db 0FFh
.eh_frame:0000000000017638                 db  9Fh
.eh_frame:0000000000017639                 db    0
.eh_frame:000000000001763A                 db    0
.eh_frame:000000000001763B                 db    0
.eh_frame:000000000001763C                 db    0
.eh_frame:000000000001763D                 db  42h ; B
.eh_frame:000000000001763E                 db  0Eh
.eh_frame:000000000001763F                 db  10h
.eh_frame:0000000000017640                 db  8Dh
.eh_frame:0000000000017641                 db    2
.eh_frame:0000000000017642                 db  42h ; B
.eh_frame:0000000000017643                 db  0Eh
.eh_frame:0000000000017644                 db  18h
.eh_frame:0000000000017645                 db  8Ch
.eh_frame:0000000000017646                 db    3
.eh_frame:0000000000017647                 db  44h ; D
.eh_frame:0000000000017648                 db  0Eh
.eh_frame:0000000000017649                 db  20h
.eh_frame:000000000001764A                 db  86h
.eh_frame:000000000001764B                 db    4
.eh_frame:000000000001764C                 db  41h ; A
.eh_frame:000000000001764D                 db  0Eh
.eh_frame:000000000001764E                 db  28h ; (
.eh_frame:000000000001764F                 db  83h
.eh_frame:0000000000017650                 db    5
.eh_frame:0000000000017651                 db  51h ; Q
.eh_frame:0000000000017652                 db  0Eh
.eh_frame:0000000000017653                 db  30h ; 0
.eh_frame:0000000000017654                 db    2
.eh_frame:0000000000017655                 db  7Eh ; ~
.eh_frame:0000000000017656                 db  0Eh
.eh_frame:0000000000017657                 db  28h ; (
.eh_frame:0000000000017658                 db  41h ; A
.eh_frame:0000000000017659                 db  0Eh
.eh_frame:000000000001765A                 db  20h
.eh_frame:000000000001765B                 db  41h ; A
.eh_frame:000000000001765C                 db  0Eh
.eh_frame:000000000001765D                 db  18h
.eh_frame:000000000001765E                 db  42h ; B
.eh_frame:000000000001765F                 db  0Eh
.eh_frame:0000000000017660                 db  10h
.eh_frame:0000000000017661                 db  42h ; B
.eh_frame:0000000000017662                 db  0Eh
.eh_frame:0000000000017663                 db    8
.eh_frame:0000000000017664                 db  48h ; H
.eh_frame:0000000000017665                 db    0
.eh_frame:0000000000017666                 db    0
.eh_frame:0000000000017667                 db    0
.eh_frame:0000000000017668                 db    0
.eh_frame:0000000000017669                 db  10h
.eh_frame:000000000001766A                 db    0
.eh_frame:000000000001766B                 db    0
.eh_frame:000000000001766C                 db  84h
.eh_frame:000000000001766D                 db 0FEh
.eh_frame:000000000001766E                 db 0FEh
.eh_frame:000000000001766F                 db 0FFh
.eh_frame:0000000000017670                 db  75h ; u
.eh_frame:0000000000017671                 db    2
.eh_frame:0000000000017672                 db    0
.eh_frame:0000000000017673                 db    0
.eh_frame:0000000000017674                 db    0
.eh_frame:0000000000017675                 db  42h ; B
.eh_frame:0000000000017676                 db  0Eh
.eh_frame:0000000000017677                 db  10h
.eh_frame:0000000000017678                 db  8Fh
.eh_frame:0000000000017679                 db    2
.eh_frame:000000000001767A                 db  42h ; B
.eh_frame:000000000001767B                 db  0Eh
.eh_frame:000000000001767C                 db  18h
.eh_frame:000000000001767D                 db  8Eh
.eh_frame:000000000001767E                 db    3
.eh_frame:000000000001767F                 db  45h ; E
.eh_frame:0000000000017680                 db  0Eh
.eh_frame:0000000000017681                 db  20h
.eh_frame:0000000000017682                 db  8Dh
.eh_frame:0000000000017683                 db    4
.eh_frame:0000000000017684                 db  42h ; B
.eh_frame:0000000000017685                 db  0Eh
.eh_frame:0000000000017686                 db  28h ; (
.eh_frame:0000000000017687                 db  8Ch
.eh_frame:0000000000017688                 db    5
.eh_frame:0000000000017689                 db  44h ; D
.eh_frame:000000000001768A                 db  0Eh
.eh_frame:000000000001768B                 db  30h ; 0
.eh_frame:000000000001768C                 db  86h
.eh_frame:000000000001768D                 db    6
.eh_frame:000000000001768E                 db  41h ; A
.eh_frame:000000000001768F                 db  0Eh
.eh_frame:0000000000017690                 db  38h ; 8
.eh_frame:0000000000017691                 db  83h
.eh_frame:0000000000017692                 db    7
.eh_frame:0000000000017693                 db  4Ah ; J
.eh_frame:0000000000017694                 db  0Eh
.eh_frame:0000000000017695                 db  50h ; P
.eh_frame:0000000000017696                 db    3
.eh_frame:0000000000017697                 db  1Ah
.eh_frame:0000000000017698                 db    1
.eh_frame:0000000000017699                 db  0Ah
.eh_frame:000000000001769A                 db  0Eh
.eh_frame:000000000001769B                 db  38h ; 8
.eh_frame:000000000001769C                 db  41h ; A
.eh_frame:000000000001769D                 db  0Eh
.eh_frame:000000000001769E                 db  30h ; 0
.eh_frame:000000000001769F                 db  41h ; A
.eh_frame:00000000000176A0                 db  0Eh
.eh_frame:00000000000176A1                 db  28h ; (
.eh_frame:00000000000176A2                 db  42h ; B
.eh_frame:00000000000176A3                 db  0Eh
.eh_frame:00000000000176A4                 db  20h
.eh_frame:00000000000176A5                 db  42h ; B
.eh_frame:00000000000176A6                 db  0Eh
.eh_frame:00000000000176A7                 db  18h
.eh_frame:00000000000176A8                 db  42h ; B
.eh_frame:00000000000176A9                 db  0Eh
.eh_frame:00000000000176AA                 db  10h
.eh_frame:00000000000176AB                 db  42h ; B
.eh_frame:00000000000176AC                 db  0Eh
.eh_frame:00000000000176AD                 db    8
.eh_frame:00000000000176AE                 db  42h ; B
.eh_frame:00000000000176AF                 db  0Bh
.eh_frame:00000000000176B0                 db  18h
.eh_frame:00000000000176B1                 db    0
.eh_frame:00000000000176B2                 db    0
.eh_frame:00000000000176B3                 db    0
.eh_frame:00000000000176B4                 db  4Ch ; L
.eh_frame:00000000000176B5                 db  10h
.eh_frame:00000000000176B6                 db    0
.eh_frame:00000000000176B7                 db    0
.eh_frame:00000000000176B8                 db 0B8h
.eh_frame:00000000000176B9                 db    0
.eh_frame:00000000000176BA                 db 0FFh
.eh_frame:00000000000176BB                 db 0FFh
.eh_frame:00000000000176BC                 db  59h ; Y
.eh_frame:00000000000176BD                 db    0
.eh_frame:00000000000176BE                 db    0
.eh_frame:00000000000176BF                 db    0
.eh_frame:00000000000176C0                 db    0
.eh_frame:00000000000176C1                 db  41h ; A
.eh_frame:00000000000176C2                 db  0Eh
.eh_frame:00000000000176C3                 db  10h
.eh_frame:00000000000176C4                 db  83h
.eh_frame:00000000000176C5                 db    2
.eh_frame:00000000000176C6                 db    2
.eh_frame:00000000000176C7                 db  53h ; S
.eh_frame:00000000000176C8                 db  0Eh
.eh_frame:00000000000176C9                 db    8
.eh_frame:00000000000176CA                 db    0
.eh_frame:00000000000176CB                 db    0
.eh_frame:00000000000176CC                 db  1Ch
.eh_frame:00000000000176CD                 db    0
.eh_frame:00000000000176CE                 db    0
.eh_frame:00000000000176CF                 db    0
.eh_frame:00000000000176D0                 db  68h ; h
.eh_frame:00000000000176D1                 db  10h
.eh_frame:00000000000176D2                 db    0
.eh_frame:00000000000176D3                 db    0
.eh_frame:00000000000176D4                 db 0FCh
.eh_frame:00000000000176D5                 db    0
.eh_frame:00000000000176D6                 db 0FFh
.eh_frame:00000000000176D7                 db 0FFh
.eh_frame:00000000000176D8                 db  32h ; 2
.eh_frame:00000000000176D9                 db    0
.eh_frame:00000000000176DA                 db    0
.eh_frame:00000000000176DB                 db    0
.eh_frame:00000000000176DC                 db    0
.eh_frame:00000000000176DD                 db  41h ; A
.eh_frame:00000000000176DE                 db  0Eh
.eh_frame:00000000000176DF                 db  10h
.eh_frame:00000000000176E0                 db  83h
.eh_frame:00000000000176E1                 db    2
.eh_frame:00000000000176E2                 db  5Fh ; _
.eh_frame:00000000000176E3                 db  0Ah
.eh_frame:00000000000176E4                 db  0Eh
.eh_frame:00000000000176E5                 db    8
.eh_frame:00000000000176E6                 db  48h ; H
.eh_frame:00000000000176E7                 db  0Bh
.eh_frame:00000000000176E8                 db  45h ; E
.eh_frame:00000000000176E9                 db  0Eh
.eh_frame:00000000000176EA                 db    8
.eh_frame:00000000000176EB                 db    0
.eh_frame:00000000000176EC                 db  38h ; 8
.eh_frame:00000000000176ED                 db    0
.eh_frame:00000000000176EE                 db    0
.eh_frame:00000000000176EF                 db    0
.eh_frame:00000000000176F0                 db  88h
.eh_frame:00000000000176F1                 db  10h
.eh_frame:00000000000176F2                 db    0
.eh_frame:00000000000176F3                 db    0
.eh_frame:00000000000176F4                 db  1Ch
.eh_frame:00000000000176F5                 db    1
.eh_frame:00000000000176F6                 db 0FFh
.eh_frame:00000000000176F7                 db 0FFh
.eh_frame:00000000000176F8                 db  5Fh ; _
.eh_frame:00000000000176F9                 db    1
.eh_frame:00000000000176FA                 db    0
.eh_frame:00000000000176FB                 db    0
.eh_frame:00000000000176FC                 db    0
.eh_frame:00000000000176FD                 db  42h ; B
.eh_frame:00000000000176FE                 db  0Eh
.eh_frame:00000000000176FF                 db  10h
.eh_frame:0000000000017700                 db  8Eh
.eh_frame:0000000000017701                 db    2
.eh_frame:0000000000017702                 db  42h ; B
.eh_frame:0000000000017703                 db  0Eh
.eh_frame:0000000000017704                 db  18h
.eh_frame:0000000000017705                 db  8Dh
.eh_frame:0000000000017706                 db    3
.eh_frame:0000000000017707                 db  42h ; B
.eh_frame:0000000000017708                 db  0Eh
.eh_frame:0000000000017709                 db  20h
.eh_frame:000000000001770A                 db  8Ch
.eh_frame:000000000001770B                 db    4
.eh_frame:000000000001770C                 db  44h ; D
.eh_frame:000000000001770D                 db  0Eh
.eh_frame:000000000001770E                 db  28h ; (
.eh_frame:000000000001770F                 db  86h
.eh_frame:0000000000017710                 db    5
.eh_frame:0000000000017711                 db  41h ; A
.eh_frame:0000000000017712                 db  0Eh
.eh_frame:0000000000017713                 db  30h ; 0
.eh_frame:0000000000017714                 db  83h
.eh_frame:0000000000017715                 db    6
.eh_frame:0000000000017716                 db    3
.eh_frame:0000000000017717                 db  45h ; E
.eh_frame:0000000000017718                 db    1
.eh_frame:0000000000017719                 db  0Eh
.eh_frame:000000000001771A                 db  28h ; (
.eh_frame:000000000001771B                 db  44h ; D
.eh_frame:000000000001771C                 db  0Eh
.eh_frame:000000000001771D                 db  20h
.eh_frame:000000000001771E                 db  42h ; B
.eh_frame:000000000001771F                 db  0Eh
.eh_frame:0000000000017720                 db  18h
.eh_frame:0000000000017721                 db  42h ; B
.eh_frame:0000000000017722                 db  0Eh
.eh_frame:0000000000017723                 db  10h
.eh_frame:0000000000017724                 db  42h ; B
.eh_frame:0000000000017725                 db  0Eh
.eh_frame:0000000000017726                 db    8
.eh_frame:0000000000017727                 db    0
.eh_frame:0000000000017728                 db  38h ; 8
.eh_frame:0000000000017729                 db    0
.eh_frame:000000000001772A                 db    0
.eh_frame:000000000001772B                 db    0
.eh_frame:000000000001772C                 db 0C4h
.eh_frame:000000000001772D                 db  10h
.eh_frame:000000000001772E                 db    0
.eh_frame:000000000001772F                 db    0
.eh_frame:0000000000017730                 db  40h ; @
.eh_frame:0000000000017731                 db    2
.eh_frame:0000000000017732                 db 0FFh
.eh_frame:0000000000017733                 db 0FFh
.eh_frame:0000000000017734                 db 0B8h
.eh_frame:0000000000017735                 db    0
.eh_frame:0000000000017736                 db    0
.eh_frame:0000000000017737                 db    0
.eh_frame:0000000000017738                 db    0
.eh_frame:0000000000017739                 db  42h ; B
.eh_frame:000000000001773A                 db  0Eh
.eh_frame:000000000001773B                 db  10h
.eh_frame:000000000001773C                 db  8Eh
.eh_frame:000000000001773D                 db    2
.eh_frame:000000000001773E                 db  42h ; B
.eh_frame:000000000001773F                 db  0Eh
.eh_frame:0000000000017740                 db  18h
.eh_frame:0000000000017741                 db  8Dh
.eh_frame:0000000000017742                 db    3
.eh_frame:0000000000017743                 db  45h ; E
.eh_frame:0000000000017744                 db  0Eh
.eh_frame:0000000000017745                 db  20h
.eh_frame:0000000000017746                 db  8Ch
.eh_frame:0000000000017747                 db    4
.eh_frame:0000000000017748                 db  41h ; A
.eh_frame:0000000000017749                 db  0Eh
.eh_frame:000000000001774A                 db  28h ; (
.eh_frame:000000000001774B                 db  86h
.eh_frame:000000000001774C                 db    5
.eh_frame:000000000001774D                 db  41h ; A
.eh_frame:000000000001774E                 db  0Eh
.eh_frame:000000000001774F                 db  30h ; 0
.eh_frame:0000000000017750                 db  83h
.eh_frame:0000000000017751                 db    6
.eh_frame:0000000000017752                 db    2
.eh_frame:0000000000017753                 db  8Fh
.eh_frame:0000000000017754                 db  0Eh
.eh_frame:0000000000017755                 db  28h ; (
.eh_frame:0000000000017756                 db  57h ; W
.eh_frame:0000000000017757                 db  0Eh
.eh_frame:0000000000017758                 db  20h
.eh_frame:0000000000017759                 db  42h ; B
.eh_frame:000000000001775A                 db  0Eh
.eh_frame:000000000001775B                 db  18h
.eh_frame:000000000001775C                 db  42h ; B
.eh_frame:000000000001775D                 db  0Eh
.eh_frame:000000000001775E                 db  10h
.eh_frame:000000000001775F                 db  42h ; B
.eh_frame:0000000000017760                 db  0Eh
.eh_frame:0000000000017761                 db    8
.eh_frame:0000000000017762                 db    0
.eh_frame:0000000000017763                 db    0
.eh_frame:0000000000017764                 db  10h
.eh_frame:0000000000017765                 db    0
.eh_frame:0000000000017766                 db    0
.eh_frame:0000000000017767                 db    0
.eh_frame:0000000000017768                 db    0
.eh_frame:0000000000017769                 db  11h
.eh_frame:000000000001776A                 db    0
.eh_frame:000000000001776B                 db    0
.eh_frame:000000000001776C                 db 0C4h
.eh_frame:000000000001776D                 db    2
.eh_frame:000000000001776E                 db 0FFh
.eh_frame:000000000001776F                 db 0FFh
.eh_frame:0000000000017770                 db  4Fh ; O
.eh_frame:0000000000017771                 db    0
.eh_frame:0000000000017772                 db    0
.eh_frame:0000000000017773                 db    0
.eh_frame:0000000000017774                 db    0
.eh_frame:0000000000017775                 db    0
.eh_frame:0000000000017776                 db    0
.eh_frame:0000000000017777                 db    0
.eh_frame:0000000000017778                 db  10h
.eh_frame:0000000000017779                 db    0
.eh_frame:000000000001777A                 db    0
.eh_frame:000000000001777B                 db    0
.eh_frame:000000000001777C                 db  14h
.eh_frame:000000000001777D                 db  11h
.eh_frame:000000000001777E                 db    0
.eh_frame:000000000001777F                 db    0
.eh_frame:0000000000017780                 db    0
.eh_frame:0000000000017781                 db    3
.eh_frame:0000000000017782                 db 0FFh
.eh_frame:0000000000017783                 db 0FFh
.eh_frame:0000000000017784                 db  53h ; S
.eh_frame:0000000000017785                 db    0
.eh_frame:0000000000017786                 db    0
.eh_frame:0000000000017787                 db    0
.eh_frame:0000000000017788                 db    0
.eh_frame:0000000000017789                 db    0
.eh_frame:000000000001778A                 db    0
.eh_frame:000000000001778B                 db    0
.eh_frame:000000000001778C                 db  10h
.eh_frame:000000000001778D                 db    0
.eh_frame:000000000001778E                 db    0
.eh_frame:000000000001778F                 db    0
.eh_frame:0000000000017790                 db  28h ; (
.eh_frame:0000000000017791                 db  11h
.eh_frame:0000000000017792                 db    0
.eh_frame:0000000000017793                 db    0
.eh_frame:0000000000017794                 db  4Ch ; L
.eh_frame:0000000000017795                 db    3
.eh_frame:0000000000017796                 db 0FFh
.eh_frame:0000000000017797                 db 0FFh
.eh_frame:0000000000017798                 db  75h ; u
.eh_frame:0000000000017799                 db    0
.eh_frame:000000000001779A                 db    0
.eh_frame:000000000001779B                 db    0
.eh_frame:000000000001779C                 db    0
.eh_frame:000000000001779D                 db    0
.eh_frame:000000000001779E                 db    0
.eh_frame:000000000001779F                 db    0
.eh_frame:00000000000177A0                 db  60h ; `
.eh_frame:00000000000177A1                 db    0
.eh_frame:00000000000177A2                 db    0
.eh_frame:00000000000177A3                 db    0
.eh_frame:00000000000177A4                 db  3Ch ; <
.eh_frame:00000000000177A5                 db  11h
.eh_frame:00000000000177A6                 db    0
.eh_frame:00000000000177A7                 db    0
.eh_frame:00000000000177A8                 db 0B8h
.eh_frame:00000000000177A9                 db    3
.eh_frame:00000000000177AA                 db 0FFh
.eh_frame:00000000000177AB                 db 0FFh
.eh_frame:00000000000177AC                 db 0F5h
.eh_frame:00000000000177AD                 db    0
.eh_frame:00000000000177AE                 db    0
.eh_frame:00000000000177AF                 db    0
.eh_frame:00000000000177B0                 db    0
.eh_frame:00000000000177B1                 db  42h ; B
.eh_frame:00000000000177B2                 db  0Eh
.eh_frame:00000000000177B3                 db  10h
.eh_frame:00000000000177B4                 db  8Fh
.eh_frame:00000000000177B5                 db    2
.eh_frame:00000000000177B6                 db  42h ; B
.eh_frame:00000000000177B7                 db  0Eh
.eh_frame:00000000000177B8                 db  18h
.eh_frame:00000000000177B9                 db  8Eh
.eh_frame:00000000000177BA                 db    3
.eh_frame:00000000000177BB                 db  46h ; F
.eh_frame:00000000000177BC                 db  0Eh
.eh_frame:00000000000177BD                 db  20h
.eh_frame:00000000000177BE                 db  8Dh
.eh_frame:00000000000177BF                 db    4
.eh_frame:00000000000177C0                 db  42h ; B
.eh_frame:00000000000177C1                 db  0Eh
.eh_frame:00000000000177C2                 db  28h ; (
.eh_frame:00000000000177C3                 db  8Ch
.eh_frame:00000000000177C4                 db    5
.eh_frame:00000000000177C5                 db  44h ; D
.eh_frame:00000000000177C6                 db  0Eh
.eh_frame:00000000000177C7                 db  30h ; 0
.eh_frame:00000000000177C8                 db  86h
.eh_frame:00000000000177C9                 db    6
.eh_frame:00000000000177CA                 db  41h ; A
.eh_frame:00000000000177CB                 db  0Eh
.eh_frame:00000000000177CC                 db  38h ; 8
.eh_frame:00000000000177CD                 db  83h
.eh_frame:00000000000177CE                 db    7
.eh_frame:00000000000177CF                 db  50h ; P
.eh_frame:00000000000177D0                 db  0Eh
.eh_frame:00000000000177D1                 db  40h ; @
.eh_frame:00000000000177D2                 db    2
.eh_frame:00000000000177D3                 db  85h
.eh_frame:00000000000177D4                 db  0Ah
.eh_frame:00000000000177D5                 db  0Eh
.eh_frame:00000000000177D6                 db  38h ; 8
.eh_frame:00000000000177D7                 db  41h ; A
.eh_frame:00000000000177D8                 db  0Eh
.eh_frame:00000000000177D9                 db  30h ; 0
.eh_frame:00000000000177DA                 db  41h ; A
.eh_frame:00000000000177DB                 db  0Eh
.eh_frame:00000000000177DC                 db  28h ; (
.eh_frame:00000000000177DD                 db  42h ; B
.eh_frame:00000000000177DE                 db  0Eh
.eh_frame:00000000000177DF                 db  20h
.eh_frame:00000000000177E0                 db  42h ; B
.eh_frame:00000000000177E1                 db  0Eh
.eh_frame:00000000000177E2                 db  18h
.eh_frame:00000000000177E3                 db  42h ; B
.eh_frame:00000000000177E4                 db  0Eh
.eh_frame:00000000000177E5                 db  10h
.eh_frame:00000000000177E6                 db  42h ; B
.eh_frame:00000000000177E7                 db  0Eh
.eh_frame:00000000000177E8                 db    8
.eh_frame:00000000000177E9                 db  48h ; H
.eh_frame:00000000000177EA                 db  0Bh
.eh_frame:00000000000177EB                 db  44h ; D
.eh_frame:00000000000177EC                 db  0Ah
.eh_frame:00000000000177ED                 db  0Eh
.eh_frame:00000000000177EE                 db  38h ; 8
.eh_frame:00000000000177EF                 db  46h ; F
.eh_frame:00000000000177F0                 db  0Eh
.eh_frame:00000000000177F1                 db  30h ; 0
.eh_frame:00000000000177F2                 db  41h ; A
.eh_frame:00000000000177F3                 db  0Eh
.eh_frame:00000000000177F4                 db  28h ; (
.eh_frame:00000000000177F5                 db  42h ; B
.eh_frame:00000000000177F6                 db  0Eh
.eh_frame:00000000000177F7                 db  20h
.eh_frame:00000000000177F8                 db  42h ; B
.eh_frame:00000000000177F9                 db  0Eh
.eh_frame:00000000000177FA                 db  18h
.eh_frame:00000000000177FB                 db  42h ; B
.eh_frame:00000000000177FC                 db  0Eh
.eh_frame:00000000000177FD                 db  10h
.eh_frame:00000000000177FE                 db  42h ; B
.eh_frame:00000000000177FF                 db  0Eh
.eh_frame:0000000000017800                 db    8
.eh_frame:0000000000017801                 db  45h ; E
.eh_frame:0000000000017802                 db  0Bh
.eh_frame:0000000000017803                 db    0
.eh_frame:0000000000017804                 db  10h
.eh_frame:0000000000017805                 db    0
.eh_frame:0000000000017806                 db    0
.eh_frame:0000000000017807                 db    0
.eh_frame:0000000000017808                 db 0A0h
.eh_frame:0000000000017809                 db  11h
.eh_frame:000000000001780A                 db    0
.eh_frame:000000000001780B                 db    0
.eh_frame:000000000001780C                 db  54h ; T
.eh_frame:000000000001780D                 db    4
.eh_frame:000000000001780E                 db 0FFh
.eh_frame:000000000001780F                 db 0FFh
.eh_frame:0000000000017810                 db  34h ; 4
.eh_frame:0000000000017811                 db    0
.eh_frame:0000000000017812                 db    0
.eh_frame:0000000000017813                 db    0
.eh_frame:0000000000017814                 db    0
.eh_frame:0000000000017815                 db    0
.eh_frame:0000000000017816                 db    0
.eh_frame:0000000000017817                 db    0
.eh_frame:0000000000017818                 db  10h
.eh_frame:0000000000017819                 db    0
.eh_frame:000000000001781A                 db    0
.eh_frame:000000000001781B                 db    0
.eh_frame:000000000001781C                 db 0B4h
.eh_frame:000000000001781D                 db  11h
.eh_frame:000000000001781E                 db    0
.eh_frame:000000000001781F                 db    0
.eh_frame:0000000000017820                 db  80h
.eh_frame:0000000000017821                 db    4
.eh_frame:0000000000017822                 db 0FFh
.eh_frame:0000000000017823                 db 0FFh
.eh_frame:0000000000017824                 db  8Bh
.eh_frame:0000000000017825                 db    0
.eh_frame:0000000000017826                 db    0
.eh_frame:0000000000017827                 db    0
.eh_frame:0000000000017828                 db    0
.eh_frame:0000000000017829                 db    0
.eh_frame:000000000001782A                 db    0
.eh_frame:000000000001782B                 db    0
.eh_frame:000000000001782C                 db  10h
.eh_frame:000000000001782D                 db    0
.eh_frame:000000000001782E                 db    0
.eh_frame:000000000001782F                 db    0
.eh_frame:0000000000017830                 db 0C8h
.eh_frame:0000000000017831                 db  11h
.eh_frame:0000000000017832                 db    0
.eh_frame:0000000000017833                 db    0
.eh_frame:0000000000017834                 db 0FCh
.eh_frame:0000000000017835                 db    4
.eh_frame:0000000000017836                 db 0FFh
.eh_frame:0000000000017837                 db 0FFh
.eh_frame:0000000000017838                 db  57h ; W
.eh_frame:0000000000017839                 db    0
.eh_frame:000000000001783A                 db    0
.eh_frame:000000000001783B                 db    0
.eh_frame:000000000001783C                 db    0
.eh_frame:000000000001783D                 db    0
.eh_frame:000000000001783E                 db    0
.eh_frame:000000000001783F                 db    0
.eh_frame:0000000000017840                 db  4Ch ; L
.eh_frame:0000000000017841                 db    0
.eh_frame:0000000000017842                 db    0
.eh_frame:0000000000017843                 db    0
.eh_frame:0000000000017844                 db 0DCh
.eh_frame:0000000000017845                 db  11h
.eh_frame:0000000000017846                 db    0
.eh_frame:0000000000017847                 db    0
.eh_frame:0000000000017848                 db  48h ; H
.eh_frame:0000000000017849                 db    5
.eh_frame:000000000001784A                 db 0FFh
.eh_frame:000000000001784B                 db 0FFh
.eh_frame:000000000001784C                 db  69h ; i
.eh_frame:000000000001784D                 db    2
.eh_frame:000000000001784E                 db    0
.eh_frame:000000000001784F                 db    0
.eh_frame:0000000000017850                 db    0
.eh_frame:0000000000017851                 db  42h ; B
.eh_frame:0000000000017852                 db  0Eh
.eh_frame:0000000000017853                 db  10h
.eh_frame:0000000000017854                 db  8Fh
.eh_frame:0000000000017855                 db    2
.eh_frame:0000000000017856                 db  42h ; B
.eh_frame:0000000000017857                 db  0Eh
.eh_frame:0000000000017858                 db  18h
.eh_frame:0000000000017859                 db  8Eh
.eh_frame:000000000001785A                 db    3
.eh_frame:000000000001785B                 db  42h ; B
.eh_frame:000000000001785C                 db  0Eh
.eh_frame:000000000001785D                 db  20h
.eh_frame:000000000001785E                 db  8Dh
.eh_frame:000000000001785F                 db    4
.eh_frame:0000000000017860                 db  42h ; B
.eh_frame:0000000000017861                 db  0Eh
.eh_frame:0000000000017862                 db  28h ; (
.eh_frame:0000000000017863                 db  8Ch
.eh_frame:0000000000017864                 db    5
.eh_frame:0000000000017865                 db  41h ; A
.eh_frame:0000000000017866                 db  0Eh
.eh_frame:0000000000017867                 db  30h ; 0
.eh_frame:0000000000017868                 db  86h
.eh_frame:0000000000017869                 db    6
.eh_frame:000000000001786A                 db  41h ; A
.eh_frame:000000000001786B                 db  0Eh
.eh_frame:000000000001786C                 db  38h ; 8
.eh_frame:000000000001786D                 db  83h
.eh_frame:000000000001786E                 db    7
.eh_frame:000000000001786F                 db  46h ; F
.eh_frame:0000000000017870                 db  0Eh
.eh_frame:0000000000017871                 db  80h
.eh_frame:0000000000017872                 db    1
.eh_frame:0000000000017873                 db    3
.eh_frame:0000000000017874                 db 0D2h
.eh_frame:0000000000017875                 db    1
.eh_frame:0000000000017876                 db  0Ah
.eh_frame:0000000000017877                 db  0Eh
.eh_frame:0000000000017878                 db  38h ; 8
.eh_frame:0000000000017879                 db  41h ; A
.eh_frame:000000000001787A                 db  0Eh
.eh_frame:000000000001787B                 db  30h ; 0
.eh_frame:000000000001787C                 db  41h ; A
.eh_frame:000000000001787D                 db  0Eh
.eh_frame:000000000001787E                 db  28h ; (
.eh_frame:000000000001787F                 db  42h ; B
.eh_frame:0000000000017880                 db  0Eh
.eh_frame:0000000000017881                 db  20h
.eh_frame:0000000000017882                 db  42h ; B
.eh_frame:0000000000017883                 db  0Eh
.eh_frame:0000000000017884                 db  18h
.eh_frame:0000000000017885                 db  42h ; B
.eh_frame:0000000000017886                 db  0Eh
.eh_frame:0000000000017887                 db  10h
.eh_frame:0000000000017888                 db  42h ; B
.eh_frame:0000000000017889                 db  0Eh
.eh_frame:000000000001788A                 db    8
.eh_frame:000000000001788B                 db  44h ; D
.eh_frame:000000000001788C                 db  0Bh
.eh_frame:000000000001788D                 db    0
.eh_frame:000000000001788E                 db    0
.eh_frame:000000000001788F                 db    0
.eh_frame:0000000000017890                 db  34h ; 4
.eh_frame:0000000000017891                 db    0
.eh_frame:0000000000017892                 db    0
.eh_frame:0000000000017893                 db    0
.eh_frame:0000000000017894                 db  2Ch ; ,
.eh_frame:0000000000017895                 db  12h
.eh_frame:0000000000017896                 db    0
.eh_frame:0000000000017897                 db    0
.eh_frame:0000000000017898                 db  68h ; h
.eh_frame:0000000000017899                 db    7
.eh_frame:000000000001789A                 db 0FFh
.eh_frame:000000000001789B                 db 0FFh
.eh_frame:000000000001789C                 db 0DEh
.eh_frame:000000000001789D                 db    1
.eh_frame:000000000001789E                 db    0
.eh_frame:000000000001789F                 db    0
.eh_frame:00000000000178A0                 db    0
.eh_frame:00000000000178A1                 db  58h ; X
.eh_frame:00000000000178A2                 db  0Eh
.eh_frame:00000000000178A3                 db  10h
.eh_frame:00000000000178A4                 db  8Ch
.eh_frame:00000000000178A5                 db    2
.eh_frame:00000000000178A6                 db  41h ; A
.eh_frame:00000000000178A7                 db  0Eh
.eh_frame:00000000000178A8                 db  18h
.eh_frame:00000000000178A9                 db  86h
.eh_frame:00000000000178AA                 db    3
.eh_frame:00000000000178AB                 db  44h ; D
.eh_frame:00000000000178AC                 db  0Eh
.eh_frame:00000000000178AD                 db  20h
.eh_frame:00000000000178AE                 db  83h
.eh_frame:00000000000178AF                 db    4
.eh_frame:00000000000178B0                 db    2
.eh_frame:00000000000178B1                 db 0D0h
.eh_frame:00000000000178B2                 db  0Eh
.eh_frame:00000000000178B3                 db  18h
.eh_frame:00000000000178B4                 db  41h ; A
.eh_frame:00000000000178B5                 db  0Eh
.eh_frame:00000000000178B6                 db  10h
.eh_frame:00000000000178B7                 db  42h ; B
.eh_frame:00000000000178B8                 db  0Eh
.eh_frame:00000000000178B9                 db    8
.eh_frame:00000000000178BA                 db  48h ; H
.eh_frame:00000000000178BB                 db 0C3h
.eh_frame:00000000000178BC                 db 0C6h
.eh_frame:00000000000178BD                 db 0CCh
.eh_frame:00000000000178BE                 db  48h ; H
.eh_frame:00000000000178BF                 db  0Eh
.eh_frame:00000000000178C0                 db  20h
.eh_frame:00000000000178C1                 db  83h
.eh_frame:00000000000178C2                 db    4
.eh_frame:00000000000178C3                 db  86h
.eh_frame:00000000000178C4                 db    3
.eh_frame:00000000000178C5                 db  8Ch
.eh_frame:00000000000178C6                 db    2
.eh_frame:00000000000178C7                 db    0
.eh_frame:00000000000178C8                 db  4Ch ; L
.eh_frame:00000000000178C9                 db    0
.eh_frame:00000000000178CA                 db    0
.eh_frame:00000000000178CB                 db    0
.eh_frame:00000000000178CC                 db  64h ; d
.eh_frame:00000000000178CD                 db  12h
.eh_frame:00000000000178CE                 db    0
.eh_frame:00000000000178CF                 db    0
.eh_frame:00000000000178D0                 db  10h
.eh_frame:00000000000178D1                 db    9
.eh_frame:00000000000178D2                 db 0FFh
.eh_frame:00000000000178D3                 db 0FFh
.eh_frame:00000000000178D4                 db 0AFh
.eh_frame:00000000000178D5                 db    2
.eh_frame:00000000000178D6                 db    0
.eh_frame:00000000000178D7                 db    0
.eh_frame:00000000000178D8                 db    0
.eh_frame:00000000000178D9                 db  42h ; B
.eh_frame:00000000000178DA                 db  0Eh
.eh_frame:00000000000178DB                 db  10h
.eh_frame:00000000000178DC                 db  8Fh
.eh_frame:00000000000178DD                 db    2
.eh_frame:00000000000178DE                 db  42h ; B
.eh_frame:00000000000178DF                 db  0Eh
.eh_frame:00000000000178E0                 db  18h
.eh_frame:00000000000178E1                 db  8Eh
.eh_frame:00000000000178E2                 db    3
.eh_frame:00000000000178E3                 db  45h ; E
.eh_frame:00000000000178E4                 db  0Eh
.eh_frame:00000000000178E5                 db  20h
.eh_frame:00000000000178E6                 db  8Dh
.eh_frame:00000000000178E7                 db    4
.eh_frame:00000000000178E8                 db  42h ; B
.eh_frame:00000000000178E9                 db  0Eh
.eh_frame:00000000000178EA                 db  28h ; (
.eh_frame:00000000000178EB                 db  8Ch
.eh_frame:00000000000178EC                 db    5
.eh_frame:00000000000178ED                 db  41h ; A
.eh_frame:00000000000178EE                 db  0Eh
.eh_frame:00000000000178EF                 db  30h ; 0
.eh_frame:00000000000178F0                 db  86h
.eh_frame:00000000000178F1                 db    6
.eh_frame:00000000000178F2                 db  41h ; A
.eh_frame:00000000000178F3                 db  0Eh
.eh_frame:00000000000178F4                 db  38h ; 8
.eh_frame:00000000000178F5                 db  83h
.eh_frame:00000000000178F6                 db    7
.eh_frame:00000000000178F7                 db  4Bh ; K
.eh_frame:00000000000178F8                 db  0Eh
.eh_frame:00000000000178F9                 db 0A0h
.eh_frame:00000000000178FA                 db    1
.eh_frame:00000000000178FB                 db    3
.eh_frame:00000000000178FC                 db 0A6h
.eh_frame:00000000000178FD                 db    1
.eh_frame:00000000000178FE                 db  0Ah
.eh_frame:00000000000178FF                 db  0Eh
.eh_frame:0000000000017900                 db  38h ; 8
.eh_frame:0000000000017901                 db  41h ; A
.eh_frame:0000000000017902                 db  0Eh
.eh_frame:0000000000017903                 db  30h ; 0
.eh_frame:0000000000017904                 db  41h ; A
.eh_frame:0000000000017905                 db  0Eh
.eh_frame:0000000000017906                 db  28h ; (
.eh_frame:0000000000017907                 db  42h ; B
.eh_frame:0000000000017908                 db  0Eh
.eh_frame:0000000000017909                 db  20h
.eh_frame:000000000001790A                 db  42h ; B
.eh_frame:000000000001790B                 db  0Eh
.eh_frame:000000000001790C                 db  18h
.eh_frame:000000000001790D                 db  42h ; B
.eh_frame:000000000001790E                 db  0Eh
.eh_frame:000000000001790F                 db  10h
.eh_frame:0000000000017910                 db  42h ; B
.eh_frame:0000000000017911                 db  0Eh
.eh_frame:0000000000017912                 db    8
.eh_frame:0000000000017913                 db  48h ; H
.eh_frame:0000000000017914                 db  0Bh
.eh_frame:0000000000017915                 db    0
.eh_frame:0000000000017916                 db    0
.eh_frame:0000000000017917                 db    0
.eh_frame:0000000000017918                 db  48h ; H
.eh_frame:0000000000017919                 db    0
.eh_frame:000000000001791A                 db    0
.eh_frame:000000000001791B                 db    0
.eh_frame:000000000001791C                 db 0B4h
.eh_frame:000000000001791D                 db  12h
.eh_frame:000000000001791E                 db    0
.eh_frame:000000000001791F                 db    0
.eh_frame:0000000000017920                 db  70h ; p
.eh_frame:0000000000017921                 db  0Bh
.eh_frame:0000000000017922                 db 0FFh
.eh_frame:0000000000017923                 db 0FFh
.eh_frame:0000000000017924                 db  59h ; Y
.eh_frame:0000000000017925                 db    1
.eh_frame:0000000000017926                 db    0
.eh_frame:0000000000017927                 db    0
.eh_frame:0000000000017928                 db    0
.eh_frame:0000000000017929                 db  42h ; B
.eh_frame:000000000001792A                 db  0Eh
.eh_frame:000000000001792B                 db  10h
.eh_frame:000000000001792C                 db  8Fh
.eh_frame:000000000001792D                 db    2
.eh_frame:000000000001792E                 db  42h ; B
.eh_frame:000000000001792F                 db  0Eh
.eh_frame:0000000000017930                 db  18h
.eh_frame:0000000000017931                 db  8Eh
.eh_frame:0000000000017932                 db    3
.eh_frame:0000000000017933                 db  45h ; E
.eh_frame:0000000000017934                 db  0Eh
.eh_frame:0000000000017935                 db  20h
.eh_frame:0000000000017936                 db  8Dh
.eh_frame:0000000000017937                 db    4
.eh_frame:0000000000017938                 db  42h ; B
.eh_frame:0000000000017939                 db  0Eh
.eh_frame:000000000001793A                 db  28h ; (
.eh_frame:000000000001793B                 db  8Ch
.eh_frame:000000000001793C                 db    5
.eh_frame:000000000001793D                 db  44h ; D
.eh_frame:000000000001793E                 db  0Eh
.eh_frame:000000000001793F                 db  30h ; 0
.eh_frame:0000000000017940                 db  86h
.eh_frame:0000000000017941                 db    6
.eh_frame:0000000000017942                 db  41h ; A
.eh_frame:0000000000017943                 db  0Eh
.eh_frame:0000000000017944                 db  38h ; 8
.eh_frame:0000000000017945                 db  83h
.eh_frame:0000000000017946                 db    7
.eh_frame:0000000000017947                 db  49h ; I
.eh_frame:0000000000017948                 db  0Eh
.eh_frame:0000000000017949                 db  70h ; p
.eh_frame:000000000001794A                 db    3
.eh_frame:000000000001794B                 db  29h ; )
.eh_frame:000000000001794C                 db    1
.eh_frame:000000000001794D                 db  0Ah
.eh_frame:000000000001794E                 db  0Eh
.eh_frame:000000000001794F                 db  38h ; 8
.eh_frame:0000000000017950                 db  41h ; A
.eh_frame:0000000000017951                 db  0Eh
.eh_frame:0000000000017952                 db  30h ; 0
.eh_frame:0000000000017953                 db  41h ; A
.eh_frame:0000000000017954                 db  0Eh
.eh_frame:0000000000017955                 db  28h ; (
.eh_frame:0000000000017956                 db  42h ; B
.eh_frame:0000000000017957                 db  0Eh
.eh_frame:0000000000017958                 db  20h
.eh_frame:0000000000017959                 db  42h ; B
.eh_frame:000000000001795A                 db  0Eh
.eh_frame:000000000001795B                 db  18h
.eh_frame:000000000001795C                 db  42h ; B
.eh_frame:000000000001795D                 db  0Eh
.eh_frame:000000000001795E                 db  10h
.eh_frame:000000000001795F                 db  42h ; B
.eh_frame:0000000000017960                 db  0Eh
.eh_frame:0000000000017961                 db    8
.eh_frame:0000000000017962                 db  41h ; A
.eh_frame:0000000000017963                 db  0Bh
.eh_frame:0000000000017964                 db  4Ch ; L
.eh_frame:0000000000017965                 db    0
.eh_frame:0000000000017966                 db    0
.eh_frame:0000000000017967                 db    0
.eh_frame:0000000000017968                 db    0
.eh_frame:0000000000017969                 db  13h
.eh_frame:000000000001796A                 db    0
.eh_frame:000000000001796B                 db    0
.eh_frame:000000000001796C                 db  84h
.eh_frame:000000000001796D                 db  0Ch
.eh_frame:000000000001796E                 db 0FFh
.eh_frame:000000000001796F                 db 0FFh
.eh_frame:0000000000017970                 db 0A8h
.eh_frame:0000000000017971                 db    1
.eh_frame:0000000000017972                 db    0
.eh_frame:0000000000017973                 db    0
.eh_frame:0000000000017974                 db    0
.eh_frame:0000000000017975                 db  5Eh ; ^
.eh_frame:0000000000017976                 db  0Eh
.eh_frame:0000000000017977                 db  10h
.eh_frame:0000000000017978                 db  8Dh
.eh_frame:0000000000017979                 db    2
.eh_frame:000000000001797A                 db  42h ; B
.eh_frame:000000000001797B                 db  0Eh
.eh_frame:000000000001797C                 db  18h
.eh_frame:000000000001797D                 db  8Ch
.eh_frame:000000000001797E                 db    3
.eh_frame:000000000001797F                 db  45h ; E
.eh_frame:0000000000017980                 db  0Eh
.eh_frame:0000000000017981                 db  20h
.eh_frame:0000000000017982                 db  86h
.eh_frame:0000000000017983                 db    4
.eh_frame:0000000000017984                 db  41h ; A
.eh_frame:0000000000017985                 db  0Eh
.eh_frame:0000000000017986                 db  28h ; (
.eh_frame:0000000000017987                 db  83h
.eh_frame:0000000000017988                 db    5
.eh_frame:0000000000017989                 db  4Dh ; M
.eh_frame:000000000001798A                 db  0Eh
.eh_frame:000000000001798B                 db  30h ; 0
.eh_frame:000000000001798C                 db    2
.eh_frame:000000000001798D                 db  95h
.eh_frame:000000000001798E                 db  0Eh
.eh_frame:000000000001798F                 db    8
.eh_frame:0000000000017990                 db 0C3h
.eh_frame:0000000000017991                 db 0C6h
.eh_frame:0000000000017992                 db 0CCh
.eh_frame:0000000000017993                 db 0CDh
.eh_frame:0000000000017994                 db  48h ; H
.eh_frame:0000000000017995                 db  0Eh
.eh_frame:0000000000017996                 db  30h ; 0
.eh_frame:0000000000017997                 db  83h
.eh_frame:0000000000017998                 db    5
.eh_frame:0000000000017999                 db  86h
.eh_frame:000000000001799A                 db    4
.eh_frame:000000000001799B                 db  8Ch
.eh_frame:000000000001799C                 db    3
.eh_frame:000000000001799D                 db  8Dh
.eh_frame:000000000001799E                 db    2
.eh_frame:000000000001799F                 db    2
.eh_frame:00000000000179A0                 db  90h
.eh_frame:00000000000179A1                 db  0Ah
.eh_frame:00000000000179A2                 db  0Eh
.eh_frame:00000000000179A3                 db  28h ; (
.eh_frame:00000000000179A4                 db  41h ; A
.eh_frame:00000000000179A5                 db  0Eh
.eh_frame:00000000000179A6                 db  20h
.eh_frame:00000000000179A7                 db  41h ; A
.eh_frame:00000000000179A8                 db  0Eh
.eh_frame:00000000000179A9                 db  18h
.eh_frame:00000000000179AA                 db  42h ; B
.eh_frame:00000000000179AB                 db  0Eh
.eh_frame:00000000000179AC                 db  10h
.eh_frame:00000000000179AD                 db  42h ; B
.eh_frame:00000000000179AE                 db  0Eh
.eh_frame:00000000000179AF                 db    8
.eh_frame:00000000000179B0                 db  4Ah ; J
.eh_frame:00000000000179B1                 db  0Bh
.eh_frame:00000000000179B2                 db    0
.eh_frame:00000000000179B3                 db    0
.eh_frame:00000000000179B4                 db  20h
.eh_frame:00000000000179B5                 db    0
.eh_frame:00000000000179B6                 db    0
.eh_frame:00000000000179B7                 db    0
.eh_frame:00000000000179B8                 db  50h ; P
.eh_frame:00000000000179B9                 db  13h
.eh_frame:00000000000179BA                 db    0
.eh_frame:00000000000179BB                 db    0
.eh_frame:00000000000179BC                 db 0E4h
.eh_frame:00000000000179BD                 db  0Dh
.eh_frame:00000000000179BE                 db 0FFh
.eh_frame:00000000000179BF                 db 0FFh
.eh_frame:00000000000179C0                 db 0E0h
.eh_frame:00000000000179C1                 db    0
.eh_frame:00000000000179C2                 db    0
.eh_frame:00000000000179C3                 db    0
.eh_frame:00000000000179C4                 db    0
.eh_frame:00000000000179C5                 db  41h ; A
.eh_frame:00000000000179C6                 db  0Eh
.eh_frame:00000000000179C7                 db  10h
.eh_frame:00000000000179C8                 db  83h
.eh_frame:00000000000179C9                 db    2
.eh_frame:00000000000179CA                 db  47h ; G
.eh_frame:00000000000179CB                 db  0Eh
.eh_frame:00000000000179CC                 db  30h ; 0
.eh_frame:00000000000179CD                 db    2
.eh_frame:00000000000179CE                 db  77h ; w
.eh_frame:00000000000179CF                 db  0Ah
.eh_frame:00000000000179D0                 db  0Eh
.eh_frame:00000000000179D1                 db  10h
.eh_frame:00000000000179D2                 db  41h ; A
.eh_frame:00000000000179D3                 db  0Eh
.eh_frame:00000000000179D4                 db    8
.eh_frame:00000000000179D5                 db  48h ; H
.eh_frame:00000000000179D6                 db  0Bh
.eh_frame:00000000000179D7                 db    0
.eh_frame:00000000000179D8                 db  40h ; @
.eh_frame:00000000000179D9                 db    0
.eh_frame:00000000000179DA                 db    0
.eh_frame:00000000000179DB                 db    0
.eh_frame:00000000000179DC                 db  74h ; t
.eh_frame:00000000000179DD                 db  13h
.eh_frame:00000000000179DE                 db    0
.eh_frame:00000000000179DF                 db    0
.eh_frame:00000000000179E0                 db 0A0h
.eh_frame:00000000000179E1                 db  0Eh
.eh_frame:00000000000179E2                 db 0FFh
.eh_frame:00000000000179E3                 db 0FFh
.eh_frame:00000000000179E4                 db 0D1h
.eh_frame:00000000000179E5                 db    0
.eh_frame:00000000000179E6                 db    0
.eh_frame:00000000000179E7                 db    0
.eh_frame:00000000000179E8                 db    0
.eh_frame:00000000000179E9                 db  42h ; B
.eh_frame:00000000000179EA                 db  0Eh
.eh_frame:00000000000179EB                 db  10h
.eh_frame:00000000000179EC                 db  8Eh
.eh_frame:00000000000179ED                 db    2
.eh_frame:00000000000179EE                 db  42h ; B
.eh_frame:00000000000179EF                 db  0Eh
.eh_frame:00000000000179F0                 db  18h
.eh_frame:00000000000179F1                 db  8Dh
.eh_frame:00000000000179F2                 db    3
.eh_frame:00000000000179F3                 db  46h ; F
.eh_frame:00000000000179F4                 db  0Eh
.eh_frame:00000000000179F5                 db  20h
.eh_frame:00000000000179F6                 db  8Ch
.eh_frame:00000000000179F7                 db    4
.eh_frame:00000000000179F8                 db  41h ; A
.eh_frame:00000000000179F9                 db  0Eh
.eh_frame:00000000000179FA                 db  28h ; (
.eh_frame:00000000000179FB                 db  86h
.eh_frame:00000000000179FC                 db    5
.eh_frame:00000000000179FD                 db  48h ; H
.eh_frame:00000000000179FE                 db  0Eh
.eh_frame:00000000000179FF                 db  30h ; 0
.eh_frame:0000000000017A00                 db  83h
.eh_frame:0000000000017A01                 db    6
.eh_frame:0000000000017A02                 db  47h ; G
.eh_frame:0000000000017A03                 db  0Eh
.eh_frame:0000000000017A04                 db  40h ; @
.eh_frame:0000000000017A05                 db    2
.eh_frame:0000000000017A06                 db  96h
.eh_frame:0000000000017A07                 db  0Ah
.eh_frame:0000000000017A08                 db  0Eh
.eh_frame:0000000000017A09                 db  30h ; 0
.eh_frame:0000000000017A0A                 db  41h ; A
.eh_frame:0000000000017A0B                 db  0Eh
.eh_frame:0000000000017A0C                 db  28h ; (
.eh_frame:0000000000017A0D                 db  41h ; A
.eh_frame:0000000000017A0E                 db  0Eh
.eh_frame:0000000000017A0F                 db  20h
.eh_frame:0000000000017A10                 db  42h ; B
.eh_frame:0000000000017A11                 db  0Eh
.eh_frame:0000000000017A12                 db  18h
.eh_frame:0000000000017A13                 db  42h ; B
.eh_frame:0000000000017A14                 db  0Eh
.eh_frame:0000000000017A15                 db  10h
.eh_frame:0000000000017A16                 db  42h ; B
.eh_frame:0000000000017A17                 db  0Eh
.eh_frame:0000000000017A18                 db    8
.eh_frame:0000000000017A19                 db  48h ; H
.eh_frame:0000000000017A1A                 db  0Bh
.eh_frame:0000000000017A1B                 db    0
.eh_frame:0000000000017A1C                 db  4Ch ; L
.eh_frame:0000000000017A1D                 db    0
.eh_frame:0000000000017A1E                 db    0
.eh_frame:0000000000017A1F                 db    0
.eh_frame:0000000000017A20                 db 0B8h
.eh_frame:0000000000017A21                 db  13h
.eh_frame:0000000000017A22                 db    0
.eh_frame:0000000000017A23                 db    0
.eh_frame:0000000000017A24                 db  3Ch ; <
.eh_frame:0000000000017A25                 db  0Fh
.eh_frame:0000000000017A26                 db 0FFh
.eh_frame:0000000000017A27                 db 0FFh
.eh_frame:0000000000017A28                 db  37h ; 7
.eh_frame:0000000000017A29                 db    2
.eh_frame:0000000000017A2A                 db    0
.eh_frame:0000000000017A2B                 db    0
.eh_frame:0000000000017A2C                 db    0
.eh_frame:0000000000017A2D                 db  42h ; B
.eh_frame:0000000000017A2E                 db  0Eh
.eh_frame:0000000000017A2F                 db  10h
.eh_frame:0000000000017A30                 db  8Fh
.eh_frame:0000000000017A31                 db    2
.eh_frame:0000000000017A32                 db  42h ; B
.eh_frame:0000000000017A33                 db  0Eh
.eh_frame:0000000000017A34                 db  18h
.eh_frame:0000000000017A35                 db  8Eh
.eh_frame:0000000000017A36                 db    3
.eh_frame:0000000000017A37                 db  42h ; B
.eh_frame:0000000000017A38                 db  0Eh
.eh_frame:0000000000017A39                 db  20h
.eh_frame:0000000000017A3A                 db  8Dh
.eh_frame:0000000000017A3B                 db    4
.eh_frame:0000000000017A3C                 db  42h ; B
.eh_frame:0000000000017A3D                 db  0Eh
.eh_frame:0000000000017A3E                 db  28h ; (
.eh_frame:0000000000017A3F                 db  8Ch
.eh_frame:0000000000017A40                 db    5
.eh_frame:0000000000017A41                 db  44h ; D
.eh_frame:0000000000017A42                 db  0Eh
.eh_frame:0000000000017A43                 db  30h ; 0
.eh_frame:0000000000017A44                 db  86h
.eh_frame:0000000000017A45                 db    6
.eh_frame:0000000000017A46                 db  41h ; A
.eh_frame:0000000000017A47                 db  0Eh
.eh_frame:0000000000017A48                 db  38h ; 8
.eh_frame:0000000000017A49                 db  83h
.eh_frame:0000000000017A4A                 db    7
.eh_frame:0000000000017A4B                 db  44h ; D
.eh_frame:0000000000017A4C                 db  0Eh
.eh_frame:0000000000017A4D                 db  80h
.eh_frame:0000000000017A4E                 db    1
.eh_frame:0000000000017A4F                 db    3
.eh_frame:0000000000017A50                 db  87h
.eh_frame:0000000000017A51                 db    1
.eh_frame:0000000000017A52                 db  0Ah
.eh_frame:0000000000017A53                 db  0Eh
.eh_frame:0000000000017A54                 db  38h ; 8
.eh_frame:0000000000017A55                 db  41h ; A
.eh_frame:0000000000017A56                 db  0Eh
.eh_frame:0000000000017A57                 db  30h ; 0
.eh_frame:0000000000017A58                 db  41h ; A
.eh_frame:0000000000017A59                 db  0Eh
.eh_frame:0000000000017A5A                 db  28h ; (
.eh_frame:0000000000017A5B                 db  42h ; B
.eh_frame:0000000000017A5C                 db  0Eh
.eh_frame:0000000000017A5D                 db  20h
.eh_frame:0000000000017A5E                 db  42h ; B
.eh_frame:0000000000017A5F                 db  0Eh
.eh_frame:0000000000017A60                 db  18h
.eh_frame:0000000000017A61                 db  42h ; B
.eh_frame:0000000000017A62                 db  0Eh
.eh_frame:0000000000017A63                 db  10h
.eh_frame:0000000000017A64                 db  42h ; B
.eh_frame:0000000000017A65                 db  0Eh
.eh_frame:0000000000017A66                 db    8
.eh_frame:0000000000017A67                 db  46h ; F
.eh_frame:0000000000017A68                 db  0Bh
.eh_frame:0000000000017A69                 db    0
.eh_frame:0000000000017A6A                 db    0
.eh_frame:0000000000017A6B                 db    0
.eh_frame:0000000000017A6C                 db  28h ; (
.eh_frame:0000000000017A6D                 db    0
.eh_frame:0000000000017A6E                 db    0
.eh_frame:0000000000017A6F                 db    0
.eh_frame:0000000000017A70                 db    8
.eh_frame:0000000000017A71                 db  14h
.eh_frame:0000000000017A72                 db    0
.eh_frame:0000000000017A73                 db    0
.eh_frame:0000000000017A74                 db  2Ch ; ,
.eh_frame:0000000000017A75                 db  11h
.eh_frame:0000000000017A76                 db 0FFh
.eh_frame:0000000000017A77                 db 0FFh
.eh_frame:0000000000017A78                 db 0A0h
.eh_frame:0000000000017A79                 db    0
.eh_frame:0000000000017A7A                 db    0
.eh_frame:0000000000017A7B                 db    0
.eh_frame:0000000000017A7C                 db    0
.eh_frame:0000000000017A7D                 db  41h ; A
.eh_frame:0000000000017A7E                 db  0Eh
.eh_frame:0000000000017A7F                 db  10h
.eh_frame:0000000000017A80                 db  86h
.eh_frame:0000000000017A81                 db    2
.eh_frame:0000000000017A82                 db  41h ; A
.eh_frame:0000000000017A83                 db  0Eh
.eh_frame:0000000000017A84                 db  18h
.eh_frame:0000000000017A85                 db  83h
.eh_frame:0000000000017A86                 db    3
.eh_frame:0000000000017A87                 db  4Ah ; J
.eh_frame:0000000000017A88                 db  0Eh
.eh_frame:0000000000017A89                 db  30h ; 0
.eh_frame:0000000000017A8A                 db    2
.eh_frame:0000000000017A8B                 db  4Eh ; N
.eh_frame:0000000000017A8C                 db  0Ah
.eh_frame:0000000000017A8D                 db  0Eh
.eh_frame:0000000000017A8E                 db  18h
.eh_frame:0000000000017A8F                 db  41h ; A
.eh_frame:0000000000017A90                 db  0Eh
.eh_frame:0000000000017A91                 db  10h
.eh_frame:0000000000017A92                 db  41h ; A
.eh_frame:0000000000017A93                 db  0Eh
.eh_frame:0000000000017A94                 db    8
.eh_frame:0000000000017A95                 db  44h ; D
.eh_frame:0000000000017A96                 db  0Bh
.eh_frame:0000000000017A97                 db    0
.eh_frame:0000000000017A98                 db  38h ; 8
.eh_frame:0000000000017A99                 db    0
.eh_frame:0000000000017A9A                 db    0
.eh_frame:0000000000017A9B                 db    0
.eh_frame:0000000000017A9C                 db  34h ; 4
.eh_frame:0000000000017A9D                 db  14h
.eh_frame:0000000000017A9E                 db    0
.eh_frame:0000000000017A9F                 db    0
.eh_frame:0000000000017AA0                 db 0A0h
.eh_frame:0000000000017AA1                 db  11h
.eh_frame:0000000000017AA2                 db 0FFh
.eh_frame:0000000000017AA3                 db 0FFh
.eh_frame:0000000000017AA4                 db  86h
.eh_frame:0000000000017AA5                 db    0
.eh_frame:0000000000017AA6                 db    0
.eh_frame:0000000000017AA7                 db    0
.eh_frame:0000000000017AA8                 db    0
.eh_frame:0000000000017AA9                 db  42h ; B
.eh_frame:0000000000017AAA                 db  0Eh
.eh_frame:0000000000017AAB                 db  10h
.eh_frame:0000000000017AAC                 db  8Ch
.eh_frame:0000000000017AAD                 db    2
.eh_frame:0000000000017AAE                 db  41h ; A
.eh_frame:0000000000017AAF                 db  0Eh
.eh_frame:0000000000017AB0                 db  18h
.eh_frame:0000000000017AB1                 db  86h
.eh_frame:0000000000017AB2                 db    3
.eh_frame:0000000000017AB3                 db  41h ; A
.eh_frame:0000000000017AB4                 db  0Eh
.eh_frame:0000000000017AB5                 db  20h
.eh_frame:0000000000017AB6                 db  83h
.eh_frame:0000000000017AB7                 db    4
.eh_frame:0000000000017AB8                 db    2
.eh_frame:0000000000017AB9                 db  47h ; G
.eh_frame:0000000000017ABA                 db  0Ah
.eh_frame:0000000000017ABB                 db  0Eh
.eh_frame:0000000000017ABC                 db  18h
.eh_frame:0000000000017ABD                 db  41h ; A
.eh_frame:0000000000017ABE                 db  0Eh
.eh_frame:0000000000017ABF                 db  10h
.eh_frame:0000000000017AC0                 db  42h ; B
.eh_frame:0000000000017AC1                 db  0Eh
.eh_frame:0000000000017AC2                 db    8
.eh_frame:0000000000017AC3                 db  42h ; B
.eh_frame:0000000000017AC4                 db  0Bh
.eh_frame:0000000000017AC5                 db  52h ; R
.eh_frame:0000000000017AC6                 db  0Ah
.eh_frame:0000000000017AC7                 db  0Eh
.eh_frame:0000000000017AC8                 db  18h
.eh_frame:0000000000017AC9                 db  41h ; A
.eh_frame:0000000000017ACA                 db  0Eh
.eh_frame:0000000000017ACB                 db  10h
.eh_frame:0000000000017ACC                 db  42h ; B
.eh_frame:0000000000017ACD                 db  0Eh
.eh_frame:0000000000017ACE                 db    8
.eh_frame:0000000000017ACF                 db  4Bh ; K
.eh_frame:0000000000017AD0                 db  0Bh
.eh_frame:0000000000017AD1                 db    0
.eh_frame:0000000000017AD2                 db    0
.eh_frame:0000000000017AD3                 db    0
.eh_frame:0000000000017AD4                 db  60h ; `
.eh_frame:0000000000017AD5                 db    0
.eh_frame:0000000000017AD6                 db    0
.eh_frame:0000000000017AD7                 db    0
.eh_frame:0000000000017AD8                 db  70h ; p
.eh_frame:0000000000017AD9                 db  14h
.eh_frame:0000000000017ADA                 db    0
.eh_frame:0000000000017ADB                 db    0
.eh_frame:0000000000017ADC                 db 0F4h
.eh_frame:0000000000017ADD                 db  11h
.eh_frame:0000000000017ADE                 db 0FFh
.eh_frame:0000000000017ADF                 db 0FFh
.eh_frame:0000000000017AE0                 db  52h ; R
.eh_frame:0000000000017AE1                 db    1
.eh_frame:0000000000017AE2                 db    0
.eh_frame:0000000000017AE3                 db    0
.eh_frame:0000000000017AE4                 db    0
.eh_frame:0000000000017AE5                 db  45h ; E
.eh_frame:0000000000017AE6                 db  0Eh
.eh_frame:0000000000017AE7                 db  10h
.eh_frame:0000000000017AE8                 db  8Eh
.eh_frame:0000000000017AE9                 db    2
.eh_frame:0000000000017AEA                 db  42h ; B
.eh_frame:0000000000017AEB                 db  0Eh
.eh_frame:0000000000017AEC                 db  18h
.eh_frame:0000000000017AED                 db  8Dh
.eh_frame:0000000000017AEE                 db    3
.eh_frame:0000000000017AEF                 db  42h ; B
.eh_frame:0000000000017AF0                 db  0Eh
.eh_frame:0000000000017AF1                 db  20h
.eh_frame:0000000000017AF2                 db  8Ch
.eh_frame:0000000000017AF3                 db    4
.eh_frame:0000000000017AF4                 db  41h ; A
.eh_frame:0000000000017AF5                 db  0Eh
.eh_frame:0000000000017AF6                 db  28h ; (
.eh_frame:0000000000017AF7                 db  86h
.eh_frame:0000000000017AF8                 db    5
.eh_frame:0000000000017AF9                 db  41h ; A
.eh_frame:0000000000017AFA                 db  0Eh
.eh_frame:0000000000017AFB                 db  30h ; 0
.eh_frame:0000000000017AFC                 db  83h
.eh_frame:0000000000017AFD                 db    6
.eh_frame:0000000000017AFE                 db    2
.eh_frame:0000000000017AFF                 db 0C8h
.eh_frame:0000000000017B00                 db  0Ah
.eh_frame:0000000000017B01                 db  0Eh
.eh_frame:0000000000017B02                 db  28h ; (
.eh_frame:0000000000017B03                 db  41h ; A
.eh_frame:0000000000017B04                 db  0Eh
.eh_frame:0000000000017B05                 db  20h
.eh_frame:0000000000017B06                 db  42h ; B
.eh_frame:0000000000017B07                 db  0Eh
.eh_frame:0000000000017B08                 db  18h
.eh_frame:0000000000017B09                 db  42h ; B
.eh_frame:0000000000017B0A                 db  0Eh
.eh_frame:0000000000017B0B                 db  10h
.eh_frame:0000000000017B0C                 db  42h ; B
.eh_frame:0000000000017B0D                 db  0Eh
.eh_frame:0000000000017B0E                 db    8
.eh_frame:0000000000017B0F                 db  46h ; F
.eh_frame:0000000000017B10                 db  0Bh
.eh_frame:0000000000017B11                 db  44h ; D
.eh_frame:0000000000017B12                 db  0Ah
.eh_frame:0000000000017B13                 db  0Eh
.eh_frame:0000000000017B14                 db  28h ; (
.eh_frame:0000000000017B15                 db  41h ; A
.eh_frame:0000000000017B16                 db  0Eh
.eh_frame:0000000000017B17                 db  20h
.eh_frame:0000000000017B18                 db  42h ; B
.eh_frame:0000000000017B19                 db  0Eh
.eh_frame:0000000000017B1A                 db  18h
.eh_frame:0000000000017B1B                 db  42h ; B
.eh_frame:0000000000017B1C                 db  0Eh
.eh_frame:0000000000017B1D                 db  10h
.eh_frame:0000000000017B1E                 db  42h ; B
.eh_frame:0000000000017B1F                 db  0Eh
.eh_frame:0000000000017B20                 db    8
.eh_frame:0000000000017B21                 db  45h ; E
.eh_frame:0000000000017B22                 db  0Bh
.eh_frame:0000000000017B23                 db  4Dh ; M
.eh_frame:0000000000017B24                 db  0Ah
.eh_frame:0000000000017B25                 db  0Eh
.eh_frame:0000000000017B26                 db  28h ; (
.eh_frame:0000000000017B27                 db  41h ; A
.eh_frame:0000000000017B28                 db  0Eh
.eh_frame:0000000000017B29                 db  20h
.eh_frame:0000000000017B2A                 db  42h ; B
.eh_frame:0000000000017B2B                 db  0Eh
.eh_frame:0000000000017B2C                 db  18h
.eh_frame:0000000000017B2D                 db  42h ; B
.eh_frame:0000000000017B2E                 db  0Eh
.eh_frame:0000000000017B2F                 db  10h
.eh_frame:0000000000017B30                 db  42h ; B
.eh_frame:0000000000017B31                 db  0Eh
.eh_frame:0000000000017B32                 db    8
.eh_frame:0000000000017B33                 db  44h ; D
.eh_frame:0000000000017B34                 db  0Bh
.eh_frame:0000000000017B35                 db    0
.eh_frame:0000000000017B36                 db    0
.eh_frame:0000000000017B37                 db    0
.eh_frame:0000000000017B38                 db  48h ; H
.eh_frame:0000000000017B39                 db    0
.eh_frame:0000000000017B3A                 db    0
.eh_frame:0000000000017B3B                 db    0
.eh_frame:0000000000017B3C                 db 0D4h
.eh_frame:0000000000017B3D                 db  14h
.eh_frame:0000000000017B3E                 db    0
.eh_frame:0000000000017B3F                 db    0
.eh_frame:0000000000017B40                 db 0F0h
.eh_frame:0000000000017B41                 db  12h
.eh_frame:0000000000017B42                 db 0FFh
.eh_frame:0000000000017B43                 db 0FFh
.eh_frame:0000000000017B44                 db 0BAh
.eh_frame:0000000000017B45                 db    2
.eh_frame:0000000000017B46                 db    0
.eh_frame:0000000000017B47                 db    0
.eh_frame:0000000000017B48                 db    0
.eh_frame:0000000000017B49                 db  42h ; B
.eh_frame:0000000000017B4A                 db  0Eh
.eh_frame:0000000000017B4B                 db  10h
.eh_frame:0000000000017B4C                 db  8Fh
.eh_frame:0000000000017B4D                 db    2
.eh_frame:0000000000017B4E                 db  42h ; B
.eh_frame:0000000000017B4F                 db  0Eh
.eh_frame:0000000000017B50                 db  18h
.eh_frame:0000000000017B51                 db  8Eh
.eh_frame:0000000000017B52                 db    3
.eh_frame:0000000000017B53                 db  42h ; B
.eh_frame:0000000000017B54                 db  0Eh
.eh_frame:0000000000017B55                 db  20h
.eh_frame:0000000000017B56                 db  8Dh
.eh_frame:0000000000017B57                 db    4
.eh_frame:0000000000017B58                 db  42h ; B
.eh_frame:0000000000017B59                 db  0Eh
.eh_frame:0000000000017B5A                 db  28h ; (
.eh_frame:0000000000017B5B                 db  8Ch
.eh_frame:0000000000017B5C                 db    5
.eh_frame:0000000000017B5D                 db  41h ; A
.eh_frame:0000000000017B5E                 db  0Eh
.eh_frame:0000000000017B5F                 db  30h ; 0
.eh_frame:0000000000017B60                 db  86h
.eh_frame:0000000000017B61                 db    6
.eh_frame:0000000000017B62                 db  41h ; A
.eh_frame:0000000000017B63                 db  0Eh
.eh_frame:0000000000017B64                 db  38h ; 8
.eh_frame:0000000000017B65                 db  83h
.eh_frame:0000000000017B66                 db    7
.eh_frame:0000000000017B67                 db  44h ; D
.eh_frame:0000000000017B68                 db  0Eh
.eh_frame:0000000000017B69                 db  60h ; `
.eh_frame:0000000000017B6A                 db    2
.eh_frame:0000000000017B6B                 db 0A2h
.eh_frame:0000000000017B6C                 db  0Ah
.eh_frame:0000000000017B6D                 db  0Eh
.eh_frame:0000000000017B6E                 db  38h ; 8
.eh_frame:0000000000017B6F                 db  44h ; D
.eh_frame:0000000000017B70                 db  0Eh
.eh_frame:0000000000017B71                 db  30h ; 0
.eh_frame:0000000000017B72                 db  41h ; A
.eh_frame:0000000000017B73                 db  0Eh
.eh_frame:0000000000017B74                 db  28h ; (
.eh_frame:0000000000017B75                 db  42h ; B
.eh_frame:0000000000017B76                 db  0Eh
.eh_frame:0000000000017B77                 db  20h
.eh_frame:0000000000017B78                 db  42h ; B
.eh_frame:0000000000017B79                 db  0Eh
.eh_frame:0000000000017B7A                 db  18h
.eh_frame:0000000000017B7B                 db  42h ; B
.eh_frame:0000000000017B7C                 db  0Eh
.eh_frame:0000000000017B7D                 db  10h
.eh_frame:0000000000017B7E                 db  42h ; B
.eh_frame:0000000000017B7F                 db  0Eh
.eh_frame:0000000000017B80                 db    8
.eh_frame:0000000000017B81                 db  43h ; C
.eh_frame:0000000000017B82                 db  0Bh
.eh_frame:0000000000017B83                 db    0
.eh_frame:0000000000017B84                 db  48h ; H
.eh_frame:0000000000017B85                 db    0
.eh_frame:0000000000017B86                 db    0
.eh_frame:0000000000017B87                 db    0
.eh_frame:0000000000017B88                 db  20h
.eh_frame:0000000000017B89                 db  15h
.eh_frame:0000000000017B8A                 db    0
.eh_frame:0000000000017B8B                 db    0
.eh_frame:0000000000017B8C                 db  64h ; d
.eh_frame:0000000000017B8D                 db  15h
.eh_frame:0000000000017B8E                 db 0FFh
.eh_frame:0000000000017B8F                 db 0FFh
.eh_frame:0000000000017B90                 db 0FAh
.eh_frame:0000000000017B91                 db    1
.eh_frame:0000000000017B92                 db    0
.eh_frame:0000000000017B93                 db    0
.eh_frame:0000000000017B94                 db    0
.eh_frame:0000000000017B95                 db  42h ; B
.eh_frame:0000000000017B96                 db  0Eh
.eh_frame:0000000000017B97                 db  10h
.eh_frame:0000000000017B98                 db  8Fh
.eh_frame:0000000000017B99                 db    2
.eh_frame:0000000000017B9A                 db  42h ; B
.eh_frame:0000000000017B9B                 db  0Eh
.eh_frame:0000000000017B9C                 db  18h
.eh_frame:0000000000017B9D                 db  8Eh
.eh_frame:0000000000017B9E                 db    3
.eh_frame:0000000000017B9F                 db  42h ; B
.eh_frame:0000000000017BA0                 db  0Eh
.eh_frame:0000000000017BA1                 db  20h
.eh_frame:0000000000017BA2                 db  8Dh
.eh_frame:0000000000017BA3                 db    4
.eh_frame:0000000000017BA4                 db  42h ; B
.eh_frame:0000000000017BA5                 db  0Eh
.eh_frame:0000000000017BA6                 db  28h ; (
.eh_frame:0000000000017BA7                 db  8Ch
.eh_frame:0000000000017BA8                 db    5
.eh_frame:0000000000017BA9                 db  41h ; A
.eh_frame:0000000000017BAA                 db  0Eh
.eh_frame:0000000000017BAB                 db  30h ; 0
.eh_frame:0000000000017BAC                 db  86h
.eh_frame:0000000000017BAD                 db    6
.eh_frame:0000000000017BAE                 db  41h ; A
.eh_frame:0000000000017BAF                 db  0Eh
.eh_frame:0000000000017BB0                 db  38h ; 8
.eh_frame:0000000000017BB1                 db  83h
.eh_frame:0000000000017BB2                 db    7
.eh_frame:0000000000017BB3                 db  44h ; D
.eh_frame:0000000000017BB4                 db  0Eh
.eh_frame:0000000000017BB5                 db  40h ; @
.eh_frame:0000000000017BB6                 db    3
.eh_frame:0000000000017BB7                 db  85h
.eh_frame:0000000000017BB8                 db    1
.eh_frame:0000000000017BB9                 db  0Ah
.eh_frame:0000000000017BBA                 db  0Eh
.eh_frame:0000000000017BBB                 db  38h ; 8
.eh_frame:0000000000017BBC                 db  44h ; D
.eh_frame:0000000000017BBD                 db  0Eh
.eh_frame:0000000000017BBE                 db  30h ; 0
.eh_frame:0000000000017BBF                 db  41h ; A
.eh_frame:0000000000017BC0                 db  0Eh
.eh_frame:0000000000017BC1                 db  28h ; (
.eh_frame:0000000000017BC2                 db  42h ; B
.eh_frame:0000000000017BC3                 db  0Eh
.eh_frame:0000000000017BC4                 db  20h
.eh_frame:0000000000017BC5                 db  42h ; B
.eh_frame:0000000000017BC6                 db  0Eh
.eh_frame:0000000000017BC7                 db  18h
.eh_frame:0000000000017BC8                 db  42h ; B
.eh_frame:0000000000017BC9                 db  0Eh
.eh_frame:0000000000017BCA                 db  10h
.eh_frame:0000000000017BCB                 db  42h ; B
.eh_frame:0000000000017BCC                 db  0Eh
.eh_frame:0000000000017BCD                 db    8
.eh_frame:0000000000017BCE                 db  48h ; H
.eh_frame:0000000000017BCF                 db  0Bh
.eh_frame:0000000000017BD0                 db  48h ; H
.eh_frame:0000000000017BD1                 db    0
.eh_frame:0000000000017BD2                 db    0
.eh_frame:0000000000017BD3                 db    0
.eh_frame:0000000000017BD4                 db  6Ch ; l
.eh_frame:0000000000017BD5                 db  15h
.eh_frame:0000000000017BD6                 db    0
.eh_frame:0000000000017BD7                 db    0
.eh_frame:0000000000017BD8                 db  18h
.eh_frame:0000000000017BD9                 db  17h
.eh_frame:0000000000017BDA                 db 0FFh
.eh_frame:0000000000017BDB                 db 0FFh
.eh_frame:0000000000017BDC                 db 0DCh
.eh_frame:0000000000017BDD                 db    0
.eh_frame:0000000000017BDE                 db    0
.eh_frame:0000000000017BDF                 db    0
.eh_frame:0000000000017BE0                 db    0
.eh_frame:0000000000017BE1                 db  42h ; B
.eh_frame:0000000000017BE2                 db  0Eh
.eh_frame:0000000000017BE3                 db  10h
.eh_frame:0000000000017BE4                 db  8Fh
.eh_frame:0000000000017BE5                 db    2
.eh_frame:0000000000017BE6                 db  42h ; B
.eh_frame:0000000000017BE7                 db  0Eh
.eh_frame:0000000000017BE8                 db  18h
.eh_frame:0000000000017BE9                 db  8Eh
.eh_frame:0000000000017BEA                 db    3
.eh_frame:0000000000017BEB                 db  42h ; B
.eh_frame:0000000000017BEC                 db  0Eh
.eh_frame:0000000000017BED                 db  20h
.eh_frame:0000000000017BEE                 db  8Dh
.eh_frame:0000000000017BEF                 db    4
.eh_frame:0000000000017BF0                 db  42h ; B
.eh_frame:0000000000017BF1                 db  0Eh
.eh_frame:0000000000017BF2                 db  28h ; (
.eh_frame:0000000000017BF3                 db  8Ch
.eh_frame:0000000000017BF4                 db    5
.eh_frame:0000000000017BF5                 db  41h ; A
.eh_frame:0000000000017BF6                 db  0Eh
.eh_frame:0000000000017BF7                 db  30h ; 0
.eh_frame:0000000000017BF8                 db  86h
.eh_frame:0000000000017BF9                 db    6
.eh_frame:0000000000017BFA                 db  41h ; A
.eh_frame:0000000000017BFB                 db  0Eh
.eh_frame:0000000000017BFC                 db  38h ; 8
.eh_frame:0000000000017BFD                 db  83h
.eh_frame:0000000000017BFE                 db    7
.eh_frame:0000000000017BFF                 db  44h ; D
.eh_frame:0000000000017C00                 db  0Eh
.eh_frame:0000000000017C01                 db  80h
.eh_frame:0000000000017C02                 db    1
.eh_frame:0000000000017C03                 db    2
.eh_frame:0000000000017C04                 db 0BEh
.eh_frame:0000000000017C05                 db  0Ah
.eh_frame:0000000000017C06                 db  0Eh
.eh_frame:0000000000017C07                 db  38h ; 8
.eh_frame:0000000000017C08                 db  41h ; A
.eh_frame:0000000000017C09                 db  0Eh
.eh_frame:0000000000017C0A                 db  30h ; 0
.eh_frame:0000000000017C0B                 db  41h ; A
.eh_frame:0000000000017C0C                 db  0Eh
.eh_frame:0000000000017C0D                 db  28h ; (
.eh_frame:0000000000017C0E                 db  42h ; B
.eh_frame:0000000000017C0F                 db  0Eh
.eh_frame:0000000000017C10                 db  20h
.eh_frame:0000000000017C11                 db  42h ; B
.eh_frame:0000000000017C12                 db  0Eh
.eh_frame:0000000000017C13                 db  18h
.eh_frame:0000000000017C14                 db  42h ; B
.eh_frame:0000000000017C15                 db  0Eh
.eh_frame:0000000000017C16                 db  10h
.eh_frame:0000000000017C17                 db  42h ; B
.eh_frame:0000000000017C18                 db  0Eh
.eh_frame:0000000000017C19                 db    8
.eh_frame:0000000000017C1A                 db  41h ; A
.eh_frame:0000000000017C1B                 db  0Bh
.eh_frame:0000000000017C1C                 db  48h ; H
.eh_frame:0000000000017C1D                 db    0
.eh_frame:0000000000017C1E                 db    0
.eh_frame:0000000000017C1F                 db    0
.eh_frame:0000000000017C20                 db 0B8h
.eh_frame:0000000000017C21                 db  15h
.eh_frame:0000000000017C22                 db    0
.eh_frame:0000000000017C23                 db    0
.eh_frame:0000000000017C24                 db 0ACh
.eh_frame:0000000000017C25                 db  17h
.eh_frame:0000000000017C26                 db 0FFh
.eh_frame:0000000000017C27                 db 0FFh
.eh_frame:0000000000017C28                 db  9Eh
.eh_frame:0000000000017C29                 db    3
.eh_frame:0000000000017C2A                 db    0
.eh_frame:0000000000017C2B                 db    0
.eh_frame:0000000000017C2C                 db    0
.eh_frame:0000000000017C2D                 db  42h ; B
.eh_frame:0000000000017C2E                 db  0Eh
.eh_frame:0000000000017C2F                 db  10h
.eh_frame:0000000000017C30                 db  8Fh
.eh_frame:0000000000017C31                 db    2
.eh_frame:0000000000017C32                 db  42h ; B
.eh_frame:0000000000017C33                 db  0Eh
.eh_frame:0000000000017C34                 db  18h
.eh_frame:0000000000017C35                 db  8Eh
.eh_frame:0000000000017C36                 db    3
.eh_frame:0000000000017C37                 db  42h ; B
.eh_frame:0000000000017C38                 db  0Eh
.eh_frame:0000000000017C39                 db  20h
.eh_frame:0000000000017C3A                 db  8Dh
.eh_frame:0000000000017C3B                 db    4
.eh_frame:0000000000017C3C                 db  42h ; B
.eh_frame:0000000000017C3D                 db  0Eh
.eh_frame:0000000000017C3E                 db  28h ; (
.eh_frame:0000000000017C3F                 db  8Ch
.eh_frame:0000000000017C40                 db    5
.eh_frame:0000000000017C41                 db  44h ; D
.eh_frame:0000000000017C42                 db  0Eh
.eh_frame:0000000000017C43                 db  30h ; 0
.eh_frame:0000000000017C44                 db  86h
.eh_frame:0000000000017C45                 db    6
.eh_frame:0000000000017C46                 db  41h ; A
.eh_frame:0000000000017C47                 db  0Eh
.eh_frame:0000000000017C48                 db  38h ; 8
.eh_frame:0000000000017C49                 db  83h
.eh_frame:0000000000017C4A                 db    7
.eh_frame:0000000000017C4B                 db  4Ch ; L
.eh_frame:0000000000017C4C                 db  0Eh
.eh_frame:0000000000017C4D                 db 0B0h
.eh_frame:0000000000017C4E                 db    1
.eh_frame:0000000000017C4F                 db    2
.eh_frame:0000000000017C50                 db 0BEh
.eh_frame:0000000000017C51                 db  0Ah
.eh_frame:0000000000017C52                 db  0Eh
.eh_frame:0000000000017C53                 db  38h ; 8
.eh_frame:0000000000017C54                 db  41h ; A
.eh_frame:0000000000017C55                 db  0Eh
.eh_frame:0000000000017C56                 db  30h ; 0
.eh_frame:0000000000017C57                 db  41h ; A
.eh_frame:0000000000017C58                 db  0Eh
.eh_frame:0000000000017C59                 db  28h ; (
.eh_frame:0000000000017C5A                 db  42h ; B
.eh_frame:0000000000017C5B                 db  0Eh
.eh_frame:0000000000017C5C                 db  20h
.eh_frame:0000000000017C5D                 db  42h ; B
.eh_frame:0000000000017C5E                 db  0Eh
.eh_frame:0000000000017C5F                 db  18h
.eh_frame:0000000000017C60                 db  42h ; B
.eh_frame:0000000000017C61                 db  0Eh
.eh_frame:0000000000017C62                 db  10h
.eh_frame:0000000000017C63                 db  42h ; B
.eh_frame:0000000000017C64                 db  0Eh
.eh_frame:0000000000017C65                 db    8
.eh_frame:0000000000017C66                 db  47h ; G
.eh_frame:0000000000017C67                 db  0Bh
.eh_frame:0000000000017C68                 db  48h ; H
.eh_frame:0000000000017C69                 db    0
.eh_frame:0000000000017C6A                 db    0
.eh_frame:0000000000017C6B                 db    0
.eh_frame:0000000000017C6C                 db    4
.eh_frame:0000000000017C6D                 db  16h
.eh_frame:0000000000017C6E                 db    0
.eh_frame:0000000000017C6F                 db    0
.eh_frame:0000000000017C70                 db    0
.eh_frame:0000000000017C71                 db  1Bh
.eh_frame:0000000000017C72                 db 0FFh
.eh_frame:0000000000017C73                 db 0FFh
.eh_frame:0000000000017C74                 db  41h ; A
.eh_frame:0000000000017C75                 db    1
.eh_frame:0000000000017C76                 db    0
.eh_frame:0000000000017C77                 db    0
.eh_frame:0000000000017C78                 db    0
.eh_frame:0000000000017C79                 db  42h ; B
.eh_frame:0000000000017C7A                 db  0Eh
.eh_frame:0000000000017C7B                 db  10h
.eh_frame:0000000000017C7C                 db  8Fh
.eh_frame:0000000000017C7D                 db    2
.eh_frame:0000000000017C7E                 db  42h ; B
.eh_frame:0000000000017C7F                 db  0Eh
.eh_frame:0000000000017C80                 db  18h
.eh_frame:0000000000017C81                 db  8Eh
.eh_frame:0000000000017C82                 db    3
.eh_frame:0000000000017C83                 db  42h ; B
.eh_frame:0000000000017C84                 db  0Eh
.eh_frame:0000000000017C85                 db  20h
.eh_frame:0000000000017C86                 db  8Dh
.eh_frame:0000000000017C87                 db    4
.eh_frame:0000000000017C88                 db  42h ; B
.eh_frame:0000000000017C89                 db  0Eh
.eh_frame:0000000000017C8A                 db  28h ; (
.eh_frame:0000000000017C8B                 db  8Ch
.eh_frame:0000000000017C8C                 db    5
.eh_frame:0000000000017C8D                 db  41h ; A
.eh_frame:0000000000017C8E                 db  0Eh
.eh_frame:0000000000017C8F                 db  30h ; 0
.eh_frame:0000000000017C90                 db  86h
.eh_frame:0000000000017C91                 db    6
.eh_frame:0000000000017C92                 db  41h ; A
.eh_frame:0000000000017C93                 db  0Eh
.eh_frame:0000000000017C94                 db  38h ; 8
.eh_frame:0000000000017C95                 db  83h
.eh_frame:0000000000017C96                 db    7
.eh_frame:0000000000017C97                 db  44h ; D
.eh_frame:0000000000017C98                 db  0Eh
.eh_frame:0000000000017C99                 db  60h ; `
.eh_frame:0000000000017C9A                 db    2
.eh_frame:0000000000017C9B                 db 0D8h
.eh_frame:0000000000017C9C                 db  0Ah
.eh_frame:0000000000017C9D                 db  0Eh
.eh_frame:0000000000017C9E                 db  38h ; 8
.eh_frame:0000000000017C9F                 db  41h ; A
.eh_frame:0000000000017CA0                 db  0Eh
.eh_frame:0000000000017CA1                 db  30h ; 0
.eh_frame:0000000000017CA2                 db  41h ; A
.eh_frame:0000000000017CA3                 db  0Eh
.eh_frame:0000000000017CA4                 db  28h ; (
.eh_frame:0000000000017CA5                 db  42h ; B
.eh_frame:0000000000017CA6                 db  0Eh
.eh_frame:0000000000017CA7                 db  20h
.eh_frame:0000000000017CA8                 db  42h ; B
.eh_frame:0000000000017CA9                 db  0Eh
.eh_frame:0000000000017CAA                 db  18h
.eh_frame:0000000000017CAB                 db  42h ; B
.eh_frame:0000000000017CAC                 db  0Eh
.eh_frame:0000000000017CAD                 db  10h
.eh_frame:0000000000017CAE                 db  42h ; B
.eh_frame:0000000000017CAF                 db  0Eh
.eh_frame:0000000000017CB0                 db    8
.eh_frame:0000000000017CB1                 db  41h ; A
.eh_frame:0000000000017CB2                 db  0Bh
.eh_frame:0000000000017CB3                 db    0
.eh_frame:0000000000017CB4                 db  40h ; @
.eh_frame:0000000000017CB5                 db    0
.eh_frame:0000000000017CB6                 db    0
.eh_frame:0000000000017CB7                 db    0
.eh_frame:0000000000017CB8                 db  50h ; P
.eh_frame:0000000000017CB9                 db  16h
.eh_frame:0000000000017CBA                 db    0
.eh_frame:0000000000017CBB                 db    0
.eh_frame:0000000000017CBC                 db    4
.eh_frame:0000000000017CBD                 db  1Ch
.eh_frame:0000000000017CBE                 db 0FFh
.eh_frame:0000000000017CBF                 db 0FFh
.eh_frame:0000000000017CC0                 db 0E6h
.eh_frame:0000000000017CC1                 db    0
.eh_frame:0000000000017CC2                 db    0
.eh_frame:0000000000017CC3                 db    0
.eh_frame:0000000000017CC4                 db    0
.eh_frame:0000000000017CC5                 db  41h ; A
.eh_frame:0000000000017CC6                 db  0Eh
.eh_frame:0000000000017CC7                 db  10h
.eh_frame:0000000000017CC8                 db  86h
.eh_frame:0000000000017CC9                 db    2
.eh_frame:0000000000017CCA                 db  41h ; A
.eh_frame:0000000000017CCB                 db  0Eh
.eh_frame:0000000000017CCC                 db  18h
.eh_frame:0000000000017CCD                 db  83h
.eh_frame:0000000000017CCE                 db    3
.eh_frame:0000000000017CCF                 db  47h ; G
.eh_frame:0000000000017CD0                 db  0Eh
.eh_frame:0000000000017CD1                 db  20h
.eh_frame:0000000000017CD2                 db    2
.eh_frame:0000000000017CD3                 db  4Dh ; M
.eh_frame:0000000000017CD4                 db  0Ah
.eh_frame:0000000000017CD5                 db  0Eh
.eh_frame:0000000000017CD6                 db  18h
.eh_frame:0000000000017CD7                 db  41h ; A
.eh_frame:0000000000017CD8                 db  0Eh
.eh_frame:0000000000017CD9                 db  10h
.eh_frame:0000000000017CDA                 db  41h ; A
.eh_frame:0000000000017CDB                 db  0Eh
.eh_frame:0000000000017CDC                 db    8
.eh_frame:0000000000017CDD                 db  48h ; H
.eh_frame:0000000000017CDE                 db  0Bh
.eh_frame:0000000000017CDF                 db  47h ; G
.eh_frame:0000000000017CE0                 db  0Ah
.eh_frame:0000000000017CE1                 db  0Eh
.eh_frame:0000000000017CE2                 db  18h
.eh_frame:0000000000017CE3                 db  41h ; A
.eh_frame:0000000000017CE4                 db  0Eh
.eh_frame:0000000000017CE5                 db  10h
.eh_frame:0000000000017CE6                 db  41h ; A
.eh_frame:0000000000017CE7                 db  0Eh
.eh_frame:0000000000017CE8                 db    8
.eh_frame:0000000000017CE9                 db  47h ; G
.eh_frame:0000000000017CEA                 db  0Bh
.eh_frame:0000000000017CEB                 db  7Ch ; |
.eh_frame:0000000000017CEC                 db  0Ah
.eh_frame:0000000000017CED                 db  0Eh
.eh_frame:0000000000017CEE                 db  18h
.eh_frame:0000000000017CEF                 db  43h ; C
.eh_frame:0000000000017CF0                 db  0Eh
.eh_frame:0000000000017CF1                 db  10h
.eh_frame:0000000000017CF2                 db  41h ; A
.eh_frame:0000000000017CF3                 db  0Eh
.eh_frame:0000000000017CF4                 db    8
.eh_frame:0000000000017CF5                 db  48h ; H
.eh_frame:0000000000017CF6                 db  0Bh
.eh_frame:0000000000017CF7                 db    0
.eh_frame:0000000000017CF8                 db  24h ; $
.eh_frame:0000000000017CF9                 db    0
.eh_frame:0000000000017CFA                 db    0
.eh_frame:0000000000017CFB                 db    0
.eh_frame:0000000000017CFC                 db  94h
.eh_frame:0000000000017CFD                 db  16h
.eh_frame:0000000000017CFE                 db    0
.eh_frame:0000000000017CFF                 db    0
.eh_frame:0000000000017D00                 db 0B0h
.eh_frame:0000000000017D01                 db  1Ch
.eh_frame:0000000000017D02                 db 0FFh
.eh_frame:0000000000017D03                 db 0FFh
.eh_frame:0000000000017D04                 db  10h
.eh_frame:0000000000017D05                 db    1
.eh_frame:0000000000017D06                 db    0
.eh_frame:0000000000017D07                 db    0
.eh_frame:0000000000017D08                 db    0
.eh_frame:0000000000017D09                 db    2
.eh_frame:0000000000017D0A                 db  51h ; Q
.eh_frame:0000000000017D0B                 db  0Eh
.eh_frame:0000000000017D0C                 db  10h
.eh_frame:0000000000017D0D                 db  83h
.eh_frame:0000000000017D0E                 db    2
.eh_frame:0000000000017D0F                 db    2
.eh_frame:0000000000017D10                 db  5Ch ; \
.eh_frame:0000000000017D11                 db  0Eh
.eh_frame:0000000000017D12                 db    8
.eh_frame:0000000000017D13                 db  43h ; C
.eh_frame:0000000000017D14                 db 0C3h
.eh_frame:0000000000017D15                 db  78h ; x
.eh_frame:0000000000017D16                 db  0Eh
.eh_frame:0000000000017D17                 db  10h
.eh_frame:0000000000017D18                 db  83h
.eh_frame:0000000000017D19                 db    2
.eh_frame:0000000000017D1A                 db  4Ch ; L
.eh_frame:0000000000017D1B                 db  0Eh
.eh_frame:0000000000017D1C                 db    8
.eh_frame:0000000000017D1D                 db  44h ; D
.eh_frame:0000000000017D1E                 db 0C3h
.eh_frame:0000000000017D1F                 db    0
.eh_frame:0000000000017D20                 db  34h ; 4
.eh_frame:0000000000017D21                 db    0
.eh_frame:0000000000017D22                 db    0
.eh_frame:0000000000017D23                 db    0
.eh_frame:0000000000017D24                 db 0BCh
.eh_frame:0000000000017D25                 db  16h
.eh_frame:0000000000017D26                 db    0
.eh_frame:0000000000017D27                 db    0
.eh_frame:0000000000017D28                 db  98h
.eh_frame:0000000000017D29                 db  1Dh
.eh_frame:0000000000017D2A                 db 0FFh
.eh_frame:0000000000017D2B                 db 0FFh
.eh_frame:0000000000017D2C                 db 0CFh
.eh_frame:0000000000017D2D                 db    0
.eh_frame:0000000000017D2E                 db    0
.eh_frame:0000000000017D2F                 db    0
.eh_frame:0000000000017D30                 db    0
.eh_frame:0000000000017D31                 db  42h ; B
.eh_frame:0000000000017D32                 db  0Eh
.eh_frame:0000000000017D33                 db  10h
.eh_frame:0000000000017D34                 db  8Ch
.eh_frame:0000000000017D35                 db    2
.eh_frame:0000000000017D36                 db  44h ; D
.eh_frame:0000000000017D37                 db  0Eh
.eh_frame:0000000000017D38                 db  18h
.eh_frame:0000000000017D39                 db  86h
.eh_frame:0000000000017D3A                 db    3
.eh_frame:0000000000017D3B                 db  41h ; A
.eh_frame:0000000000017D3C                 db  0Eh
.eh_frame:0000000000017D3D                 db  20h
.eh_frame:0000000000017D3E                 db  83h
.eh_frame:0000000000017D3F                 db    4
.eh_frame:0000000000017D40                 db    2
.eh_frame:0000000000017D41                 db  9Fh
.eh_frame:0000000000017D42                 db  0Ah
.eh_frame:0000000000017D43                 db  0Eh
.eh_frame:0000000000017D44                 db  18h
.eh_frame:0000000000017D45                 db  41h ; A
.eh_frame:0000000000017D46                 db  0Eh
.eh_frame:0000000000017D47                 db  10h
.eh_frame:0000000000017D48                 db  42h ; B
.eh_frame:0000000000017D49                 db  0Eh
.eh_frame:0000000000017D4A                 db    8
.eh_frame:0000000000017D4B                 db  47h ; G
.eh_frame:0000000000017D4C                 db  0Bh
.eh_frame:0000000000017D4D                 db  59h ; Y
.eh_frame:0000000000017D4E                 db  0Eh
.eh_frame:0000000000017D4F                 db  18h
.eh_frame:0000000000017D50                 db  43h ; C
.eh_frame:0000000000017D51                 db  0Eh
.eh_frame:0000000000017D52                 db  10h
.eh_frame:0000000000017D53                 db  42h ; B
.eh_frame:0000000000017D54                 db  0Eh
.eh_frame:0000000000017D55                 db    8
.eh_frame:0000000000017D56                 db    0
.eh_frame:0000000000017D57                 db    0
.eh_frame:0000000000017D58                 db  4Ch ; L
.eh_frame:0000000000017D59                 db    0
.eh_frame:0000000000017D5A                 db    0
.eh_frame:0000000000017D5B                 db    0
.eh_frame:0000000000017D5C                 db 0F4h
.eh_frame:0000000000017D5D                 db  16h
.eh_frame:0000000000017D5E                 db    0
.eh_frame:0000000000017D5F                 db    0
.eh_frame:0000000000017D60                 db  30h ; 0
.eh_frame:0000000000017D61                 db  1Eh
.eh_frame:0000000000017D62                 db 0FFh
.eh_frame:0000000000017D63                 db 0FFh
.eh_frame:0000000000017D64                 db  9Fh
.eh_frame:0000000000017D65                 db    7
.eh_frame:0000000000017D66                 db    0
.eh_frame:0000000000017D67                 db    0
.eh_frame:0000000000017D68                 db    0
.eh_frame:0000000000017D69                 db  42h ; B
.eh_frame:0000000000017D6A                 db  0Eh
.eh_frame:0000000000017D6B                 db  10h
.eh_frame:0000000000017D6C                 db  8Fh
.eh_frame:0000000000017D6D                 db    2
.eh_frame:0000000000017D6E                 db  42h ; B
.eh_frame:0000000000017D6F                 db  0Eh
.eh_frame:0000000000017D70                 db  18h
.eh_frame:0000000000017D71                 db  8Eh
.eh_frame:0000000000017D72                 db    3
.eh_frame:0000000000017D73                 db  45h ; E
.eh_frame:0000000000017D74                 db  0Eh
.eh_frame:0000000000017D75                 db  20h
.eh_frame:0000000000017D76                 db  8Dh
.eh_frame:0000000000017D77                 db    4
.eh_frame:0000000000017D78                 db  42h ; B
.eh_frame:0000000000017D79                 db  0Eh
.eh_frame:0000000000017D7A                 db  28h ; (
.eh_frame:0000000000017D7B                 db  8Ch
.eh_frame:0000000000017D7C                 db    5
.eh_frame:0000000000017D7D                 db  44h ; D
.eh_frame:0000000000017D7E                 db  0Eh
.eh_frame:0000000000017D7F                 db  30h ; 0
.eh_frame:0000000000017D80                 db  86h
.eh_frame:0000000000017D81                 db    6
.eh_frame:0000000000017D82                 db  41h ; A
.eh_frame:0000000000017D83                 db  0Eh
.eh_frame:0000000000017D84                 db  38h ; 8
.eh_frame:0000000000017D85                 db  83h
.eh_frame:0000000000017D86                 db    7
.eh_frame:0000000000017D87                 db  4Ah ; J
.eh_frame:0000000000017D88                 db  0Eh
.eh_frame:0000000000017D89                 db  80h
.eh_frame:0000000000017D8A                 db    1
.eh_frame:0000000000017D8B                 db    3
.eh_frame:0000000000017D8C                 db  3Bh ; ;
.eh_frame:0000000000017D8D                 db    1
.eh_frame:0000000000017D8E                 db  0Ah
.eh_frame:0000000000017D8F                 db  0Eh
.eh_frame:0000000000017D90                 db  38h ; 8
.eh_frame:0000000000017D91                 db  41h ; A
.eh_frame:0000000000017D92                 db  0Eh
.eh_frame:0000000000017D93                 db  30h ; 0
.eh_frame:0000000000017D94                 db  41h ; A
.eh_frame:0000000000017D95                 db  0Eh
.eh_frame:0000000000017D96                 db  28h ; (
.eh_frame:0000000000017D97                 db  42h ; B
.eh_frame:0000000000017D98                 db  0Eh
.eh_frame:0000000000017D99                 db  20h
.eh_frame:0000000000017D9A                 db  42h ; B
.eh_frame:0000000000017D9B                 db  0Eh
.eh_frame:0000000000017D9C                 db  18h
.eh_frame:0000000000017D9D                 db  42h ; B
.eh_frame:0000000000017D9E                 db  0Eh
.eh_frame:0000000000017D9F                 db  10h
.eh_frame:0000000000017DA0                 db  42h ; B
.eh_frame:0000000000017DA1                 db  0Eh
.eh_frame:0000000000017DA2                 db    8
.eh_frame:0000000000017DA3                 db  41h ; A
.eh_frame:0000000000017DA4                 db  0Bh
.eh_frame:0000000000017DA5                 db    0
.eh_frame:0000000000017DA6                 db    0
.eh_frame:0000000000017DA7                 db    0
.eh_frame:0000000000017DA8                 db  4Ch ; L
.eh_frame:0000000000017DA9                 db    0
.eh_frame:0000000000017DAA                 db    0
.eh_frame:0000000000017DAB                 db    0
.eh_frame:0000000000017DAC                 db  44h ; D
.eh_frame:0000000000017DAD                 db  17h
.eh_frame:0000000000017DAE                 db    0
.eh_frame:0000000000017DAF                 db    0
.eh_frame:0000000000017DB0                 db  80h
.eh_frame:0000000000017DB1                 db  25h ; %
.eh_frame:0000000000017DB2                 db 0FFh
.eh_frame:0000000000017DB3                 db 0FFh
.eh_frame:0000000000017DB4                 db  3Bh ; ;
.eh_frame:0000000000017DB5                 db    2
.eh_frame:0000000000017DB6                 db    0
.eh_frame:0000000000017DB7                 db    0
.eh_frame:0000000000017DB8                 db    0
.eh_frame:0000000000017DB9                 db  42h ; B
.eh_frame:0000000000017DBA                 db  0Eh
.eh_frame:0000000000017DBB                 db  10h
.eh_frame:0000000000017DBC                 db  8Fh
.eh_frame:0000000000017DBD                 db    2
.eh_frame:0000000000017DBE                 db  42h ; B
.eh_frame:0000000000017DBF                 db  0Eh
.eh_frame:0000000000017DC0                 db  18h
.eh_frame:0000000000017DC1                 db  8Eh
.eh_frame:0000000000017DC2                 db    3
.eh_frame:0000000000017DC3                 db  45h ; E
.eh_frame:0000000000017DC4                 db  0Eh
.eh_frame:0000000000017DC5                 db  20h
.eh_frame:0000000000017DC6                 db  8Dh
.eh_frame:0000000000017DC7                 db    4
.eh_frame:0000000000017DC8                 db  42h ; B
.eh_frame:0000000000017DC9                 db  0Eh
.eh_frame:0000000000017DCA                 db  28h ; (
.eh_frame:0000000000017DCB                 db  8Ch
.eh_frame:0000000000017DCC                 db    5
.eh_frame:0000000000017DCD                 db  45h ; E
.eh_frame:0000000000017DCE                 db  0Eh
.eh_frame:0000000000017DCF                 db  30h ; 0
.eh_frame:0000000000017DD0                 db  86h
.eh_frame:0000000000017DD1                 db    6
.eh_frame:0000000000017DD2                 db  41h ; A
.eh_frame:0000000000017DD3                 db  0Eh
.eh_frame:0000000000017DD4                 db  38h ; 8
.eh_frame:0000000000017DD5                 db  83h
.eh_frame:0000000000017DD6                 db    7
.eh_frame:0000000000017DD7                 db  48h ; H
.eh_frame:0000000000017DD8                 db  0Eh
.eh_frame:0000000000017DD9                 db  80h
.eh_frame:0000000000017DDA                 db    1
.eh_frame:0000000000017DDB                 db    3
.eh_frame:0000000000017DDC                 db 0F3h
.eh_frame:0000000000017DDD                 db    1
.eh_frame:0000000000017DDE                 db  0Ah
.eh_frame:0000000000017DDF                 db  0Eh
.eh_frame:0000000000017DE0                 db  38h ; 8
.eh_frame:0000000000017DE1                 db  41h ; A
.eh_frame:0000000000017DE2                 db  0Eh
.eh_frame:0000000000017DE3                 db  30h ; 0
.eh_frame:0000000000017DE4                 db  41h ; A
.eh_frame:0000000000017DE5                 db  0Eh
.eh_frame:0000000000017DE6                 db  28h ; (
.eh_frame:0000000000017DE7                 db  42h ; B
.eh_frame:0000000000017DE8                 db  0Eh
.eh_frame:0000000000017DE9                 db  20h
.eh_frame:0000000000017DEA                 db  42h ; B
.eh_frame:0000000000017DEB                 db  0Eh
.eh_frame:0000000000017DEC                 db  18h
.eh_frame:0000000000017DED                 db  42h ; B
.eh_frame:0000000000017DEE                 db  0Eh
.eh_frame:0000000000017DEF                 db  10h
.eh_frame:0000000000017DF0                 db  42h ; B
.eh_frame:0000000000017DF1                 db  0Eh
.eh_frame:0000000000017DF2                 db    8
.eh_frame:0000000000017DF3                 db  4Ah ; J
.eh_frame:0000000000017DF4                 db  0Bh
.eh_frame:0000000000017DF5                 db    0
.eh_frame:0000000000017DF6                 db    0
.eh_frame:0000000000017DF7                 db    0
.eh_frame:0000000000017DF8                 db  4Ch ; L
.eh_frame:0000000000017DF9                 db    0
.eh_frame:0000000000017DFA                 db    0
.eh_frame:0000000000017DFB                 db    0
.eh_frame:0000000000017DFC                 db  94h
.eh_frame:0000000000017DFD                 db  17h
.eh_frame:0000000000017DFE                 db    0
.eh_frame:0000000000017DFF                 db    0
.eh_frame:0000000000017E00                 db  70h ; p
.eh_frame:0000000000017E01                 db  27h ; '
.eh_frame:0000000000017E02                 db 0FFh
.eh_frame:0000000000017E03                 db 0FFh
.eh_frame:0000000000017E04                 db  91h
.eh_frame:0000000000017E05                 db  0Bh
.eh_frame:0000000000017E06                 db    0
.eh_frame:0000000000017E07                 db    0
.eh_frame:0000000000017E08                 db    0
.eh_frame:0000000000017E09                 db  42h ; B
.eh_frame:0000000000017E0A                 db  0Eh
.eh_frame:0000000000017E0B                 db  10h
.eh_frame:0000000000017E0C                 db  8Fh
.eh_frame:0000000000017E0D                 db    2
.eh_frame:0000000000017E0E                 db  42h ; B
.eh_frame:0000000000017E0F                 db  0Eh
.eh_frame:0000000000017E10                 db  18h
.eh_frame:0000000000017E11                 db  8Eh
.eh_frame:0000000000017E12                 db    3
.eh_frame:0000000000017E13                 db  45h ; E
.eh_frame:0000000000017E14                 db  0Eh
.eh_frame:0000000000017E15                 db  20h
.eh_frame:0000000000017E16                 db  8Dh
.eh_frame:0000000000017E17                 db    4
.eh_frame:0000000000017E18                 db  42h ; B
.eh_frame:0000000000017E19                 db  0Eh
.eh_frame:0000000000017E1A                 db  28h ; (
.eh_frame:0000000000017E1B                 db  8Ch
.eh_frame:0000000000017E1C                 db    5
.eh_frame:0000000000017E1D                 db  46h ; F
.eh_frame:0000000000017E1E                 db  0Eh
.eh_frame:0000000000017E1F                 db  30h ; 0
.eh_frame:0000000000017E20                 db  86h
.eh_frame:0000000000017E21                 db    6
.eh_frame:0000000000017E22                 db  41h ; A
.eh_frame:0000000000017E23                 db  0Eh
.eh_frame:0000000000017E24                 db  38h ; 8
.eh_frame:0000000000017E25                 db  83h
.eh_frame:0000000000017E26                 db    7
.eh_frame:0000000000017E27                 db  47h ; G
.eh_frame:0000000000017E28                 db  0Eh
.eh_frame:0000000000017E29                 db 0C0h
.eh_frame:0000000000017E2A                 db    2
.eh_frame:0000000000017E2B                 db    3
.eh_frame:0000000000017E2C                 db  17h
.eh_frame:0000000000017E2D                 db    4
.eh_frame:0000000000017E2E                 db  0Ah
.eh_frame:0000000000017E2F                 db  0Eh
.eh_frame:0000000000017E30                 db  38h ; 8
.eh_frame:0000000000017E31                 db  41h ; A
.eh_frame:0000000000017E32                 db  0Eh
.eh_frame:0000000000017E33                 db  30h ; 0
.eh_frame:0000000000017E34                 db  41h ; A
.eh_frame:0000000000017E35                 db  0Eh
.eh_frame:0000000000017E36                 db  28h ; (
.eh_frame:0000000000017E37                 db  42h ; B
.eh_frame:0000000000017E38                 db  0Eh
.eh_frame:0000000000017E39                 db  20h
.eh_frame:0000000000017E3A                 db  42h ; B
.eh_frame:0000000000017E3B                 db  0Eh
.eh_frame:0000000000017E3C                 db  18h
.eh_frame:0000000000017E3D                 db  42h ; B
.eh_frame:0000000000017E3E                 db  0Eh
.eh_frame:0000000000017E3F                 db  10h
.eh_frame:0000000000017E40                 db  42h ; B
.eh_frame:0000000000017E41                 db  0Eh
.eh_frame:0000000000017E42                 db    8
.eh_frame:0000000000017E43                 db  46h ; F
.eh_frame:0000000000017E44                 db  0Bh
.eh_frame:0000000000017E45                 db    0
.eh_frame:0000000000017E46                 db    0
.eh_frame:0000000000017E47                 db    0
.eh_frame:0000000000017E48                 db  30h ; 0
.eh_frame:0000000000017E49                 db    0
.eh_frame:0000000000017E4A                 db    0
.eh_frame:0000000000017E4B                 db    0
.eh_frame:0000000000017E4C                 db 0E4h
.eh_frame:0000000000017E4D                 db  17h
.eh_frame:0000000000017E4E                 db    0
.eh_frame:0000000000017E4F                 db    0
.eh_frame:0000000000017E50                 db 0C0h
.eh_frame:0000000000017E51                 db  32h ; 2
.eh_frame:0000000000017E52                 db 0FFh
.eh_frame:0000000000017E53                 db 0FFh
.eh_frame:0000000000017E54                 db  87h
.eh_frame:0000000000017E55                 db    0
.eh_frame:0000000000017E56                 db    0
.eh_frame:0000000000017E57                 db    0
.eh_frame:0000000000017E58                 db    0
.eh_frame:0000000000017E59                 db  47h ; G
.eh_frame:0000000000017E5A                 db  0Eh
.eh_frame:0000000000017E5B                 db  10h
.eh_frame:0000000000017E5C                 db  86h
.eh_frame:0000000000017E5D                 db    2
.eh_frame:0000000000017E5E                 db  41h ; A
.eh_frame:0000000000017E5F                 db  0Eh
.eh_frame:0000000000017E60                 db  18h
.eh_frame:0000000000017E61                 db  83h
.eh_frame:0000000000017E62                 db    3
.eh_frame:0000000000017E63                 db  4Ah ; J
.eh_frame:0000000000017E64                 db  0Eh
.eh_frame:0000000000017E65                 db  20h
.eh_frame:0000000000017E66                 db    2
.eh_frame:0000000000017E67                 db  4Eh ; N
.eh_frame:0000000000017E68                 db  0Eh
.eh_frame:0000000000017E69                 db  18h
.eh_frame:0000000000017E6A                 db  41h ; A
.eh_frame:0000000000017E6B                 db  0Eh
.eh_frame:0000000000017E6C                 db  10h
.eh_frame:0000000000017E6D                 db  41h ; A
.eh_frame:0000000000017E6E                 db  0Eh
.eh_frame:0000000000017E6F                 db    8
.eh_frame:0000000000017E70                 db  46h ; F
.eh_frame:0000000000017E71                 db 0C3h
.eh_frame:0000000000017E72                 db 0C6h
.eh_frame:0000000000017E73                 db  58h ; X
.eh_frame:0000000000017E74                 db  0Eh
.eh_frame:0000000000017E75                 db  20h
.eh_frame:0000000000017E76                 db  83h
.eh_frame:0000000000017E77                 db    3
.eh_frame:0000000000017E78                 db  86h
.eh_frame:0000000000017E79                 db    2
.eh_frame:0000000000017E7A                 db    0
.eh_frame:0000000000017E7B                 db    0
.eh_frame:0000000000017E7C                 db  28h ; (
.eh_frame:0000000000017E7D                 db    0
.eh_frame:0000000000017E7E                 db    0
.eh_frame:0000000000017E7F                 db    0
.eh_frame:0000000000017E80                 db  18h
.eh_frame:0000000000017E81                 db  18h
.eh_frame:0000000000017E82                 db    0
.eh_frame:0000000000017E83                 db    0
.eh_frame:0000000000017E84                 db  1Ch
.eh_frame:0000000000017E85                 db  33h ; 3
.eh_frame:0000000000017E86                 db 0FFh
.eh_frame:0000000000017E87                 db 0FFh
.eh_frame:0000000000017E88                 db  4Fh ; O
.eh_frame:0000000000017E89                 db    0
.eh_frame:0000000000017E8A                 db    0
.eh_frame:0000000000017E8B                 db    0
.eh_frame:0000000000017E8C                 db    0
.eh_frame:0000000000017E8D                 db  42h ; B
.eh_frame:0000000000017E8E                 db  0Eh
.eh_frame:0000000000017E8F                 db  10h
.eh_frame:0000000000017E90                 db  8Ch
.eh_frame:0000000000017E91                 db    2
.eh_frame:0000000000017E92                 db  41h ; A
.eh_frame:0000000000017E93                 db  0Eh
.eh_frame:0000000000017E94                 db  18h
.eh_frame:0000000000017E95                 db  86h
.eh_frame:0000000000017E96                 db    3
.eh_frame:0000000000017E97                 db  44h ; D
.eh_frame:0000000000017E98                 db  0Eh
.eh_frame:0000000000017E99                 db  20h
.eh_frame:0000000000017E9A                 db  83h
.eh_frame:0000000000017E9B                 db    4
.eh_frame:0000000000017E9C                 db  7Ch ; |
.eh_frame:0000000000017E9D                 db  0Eh
.eh_frame:0000000000017E9E                 db  18h
.eh_frame:0000000000017E9F                 db  45h ; E
.eh_frame:0000000000017EA0                 db  0Eh
.eh_frame:0000000000017EA1                 db  10h
.eh_frame:0000000000017EA2                 db  42h ; B
.eh_frame:0000000000017EA3                 db  0Eh
.eh_frame:0000000000017EA4                 db    8
.eh_frame:0000000000017EA5                 db    0
.eh_frame:0000000000017EA6                 db    0
.eh_frame:0000000000017EA7                 db    0
.eh_frame:0000000000017EA8                 db  2Ch ; ,
.eh_frame:0000000000017EA9                 db    0
.eh_frame:0000000000017EAA                 db    0
.eh_frame:0000000000017EAB                 db    0
.eh_frame:0000000000017EAC                 db  44h ; D
.eh_frame:0000000000017EAD                 db  18h
.eh_frame:0000000000017EAE                 db    0
.eh_frame:0000000000017EAF                 db    0
.eh_frame:0000000000017EB0                 db  40h ; @
.eh_frame:0000000000017EB1                 db  33h ; 3
.eh_frame:0000000000017EB2                 db 0FFh
.eh_frame:0000000000017EB3                 db 0FFh
.eh_frame:0000000000017EB4                 db  94h
.eh_frame:0000000000017EB5                 db    0
.eh_frame:0000000000017EB6                 db    0
.eh_frame:0000000000017EB7                 db    0
.eh_frame:0000000000017EB8                 db    0
.eh_frame:0000000000017EB9                 db  42h ; B
.eh_frame:0000000000017EBA                 db  0Eh
.eh_frame:0000000000017EBB                 db  10h
.eh_frame:0000000000017EBC                 db  8Ch
.eh_frame:0000000000017EBD                 db    2
.eh_frame:0000000000017EBE                 db  41h ; A
.eh_frame:0000000000017EBF                 db  0Eh
.eh_frame:0000000000017EC0                 db  18h
.eh_frame:0000000000017EC1                 db  86h
.eh_frame:0000000000017EC2                 db    3
.eh_frame:0000000000017EC3                 db  41h ; A
.eh_frame:0000000000017EC4                 db  0Eh
.eh_frame:0000000000017EC5                 db  20h
.eh_frame:0000000000017EC6                 db  83h
.eh_frame:0000000000017EC7                 db    4
.eh_frame:0000000000017EC8                 db    2
.eh_frame:0000000000017EC9                 db  6Dh ; m
.eh_frame:0000000000017ECA                 db  0Ah
.eh_frame:0000000000017ECB                 db  0Eh
.eh_frame:0000000000017ECC                 db  18h
.eh_frame:0000000000017ECD                 db  41h ; A
.eh_frame:0000000000017ECE                 db  0Eh
.eh_frame:0000000000017ECF                 db  10h
.eh_frame:0000000000017ED0                 db  42h ; B
.eh_frame:0000000000017ED1                 db  0Eh
.eh_frame:0000000000017ED2                 db    8
.eh_frame:0000000000017ED3                 db  41h ; A
.eh_frame:0000000000017ED4                 db  0Bh
.eh_frame:0000000000017ED5                 db    0
.eh_frame:0000000000017ED6                 db    0
.eh_frame:0000000000017ED7                 db    0
.eh_frame:0000000000017ED8                 db  30h ; 0
.eh_frame:0000000000017ED9                 db    0
.eh_frame:0000000000017EDA                 db    0
.eh_frame:0000000000017EDB                 db    0
.eh_frame:0000000000017EDC                 db  74h ; t
.eh_frame:0000000000017EDD                 db  18h
.eh_frame:0000000000017EDE                 db    0
.eh_frame:0000000000017EDF                 db    0
.eh_frame:0000000000017EE0                 db 0B0h
.eh_frame:0000000000017EE1                 db  33h ; 3
.eh_frame:0000000000017EE2                 db 0FFh
.eh_frame:0000000000017EE3                 db 0FFh
.eh_frame:0000000000017EE4                 db  4Ch ; L
.eh_frame:0000000000017EE5                 db    0
.eh_frame:0000000000017EE6                 db    0
.eh_frame:0000000000017EE7                 db    0
.eh_frame:0000000000017EE8                 db    0
.eh_frame:0000000000017EE9                 db  41h ; A
.eh_frame:0000000000017EEA                 db  0Eh
.eh_frame:0000000000017EEB                 db  10h
.eh_frame:0000000000017EEC                 db  86h
.eh_frame:0000000000017EED                 db    2
.eh_frame:0000000000017EEE                 db  41h ; A
.eh_frame:0000000000017EEF                 db  0Eh
.eh_frame:0000000000017EF0                 db  18h
.eh_frame:0000000000017EF1                 db  83h
.eh_frame:0000000000017EF2                 db    3
.eh_frame:0000000000017EF3                 db  4Dh ; M
.eh_frame:0000000000017EF4                 db  0Eh
.eh_frame:0000000000017EF5                 db  20h
.eh_frame:0000000000017EF6                 db  67h ; g
.eh_frame:0000000000017EF7                 db  0Ah
.eh_frame:0000000000017EF8                 db  0Eh
.eh_frame:0000000000017EF9                 db  18h
.eh_frame:0000000000017EFA                 db  43h ; C
.eh_frame:0000000000017EFB                 db  0Eh
.eh_frame:0000000000017EFC                 db  10h
.eh_frame:0000000000017EFD                 db  41h ; A
.eh_frame:0000000000017EFE                 db  0Eh
.eh_frame:0000000000017EFF                 db    8
.eh_frame:0000000000017F00                 db  46h ; F
.eh_frame:0000000000017F01                 db  0Bh
.eh_frame:0000000000017F02                 db  44h ; D
.eh_frame:0000000000017F03                 db  0Eh
.eh_frame:0000000000017F04                 db  18h
.eh_frame:0000000000017F05                 db  46h ; F
.eh_frame:0000000000017F06                 db  0Eh
.eh_frame:0000000000017F07                 db  10h
.eh_frame:0000000000017F08                 db  41h ; A
.eh_frame:0000000000017F09                 db  0Eh
.eh_frame:0000000000017F0A                 db    8
.eh_frame:0000000000017F0B                 db    0
.eh_frame:0000000000017F0C                 db  40h ; @
.eh_frame:0000000000017F0D                 db    0
.eh_frame:0000000000017F0E                 db    0
.eh_frame:0000000000017F0F                 db    0
.eh_frame:0000000000017F10                 db 0A8h
.eh_frame:0000000000017F11                 db  18h
.eh_frame:0000000000017F12                 db    0
.eh_frame:0000000000017F13                 db    0
.eh_frame:0000000000017F14                 db 0CCh
.eh_frame:0000000000017F15                 db  33h ; 3
.eh_frame:0000000000017F16                 db 0FFh
.eh_frame:0000000000017F17                 db 0FFh
.eh_frame:0000000000017F18                 db  0Dh
.eh_frame:0000000000017F19                 db    8
.eh_frame:0000000000017F1A                 db    0
.eh_frame:0000000000017F1B                 db    0
.eh_frame:0000000000017F1C                 db    0
.eh_frame:0000000000017F1D                 db  42h ; B
.eh_frame:0000000000017F1E                 db  0Eh
.eh_frame:0000000000017F1F                 db  10h
.eh_frame:0000000000017F20                 db  8Eh
.eh_frame:0000000000017F21                 db    2
.eh_frame:0000000000017F22                 db  42h ; B
.eh_frame:0000000000017F23                 db  0Eh
.eh_frame:0000000000017F24                 db  18h
.eh_frame:0000000000017F25                 db  8Dh
.eh_frame:0000000000017F26                 db    3
.eh_frame:0000000000017F27                 db  45h ; E
.eh_frame:0000000000017F28                 db  0Eh
.eh_frame:0000000000017F29                 db  20h
.eh_frame:0000000000017F2A                 db  8Ch
.eh_frame:0000000000017F2B                 db    4
.eh_frame:0000000000017F2C                 db  41h ; A
.eh_frame:0000000000017F2D                 db  0Eh
.eh_frame:0000000000017F2E                 db  28h ; (
.eh_frame:0000000000017F2F                 db  86h
.eh_frame:0000000000017F30                 db    5
.eh_frame:0000000000017F31                 db  44h ; D
.eh_frame:0000000000017F32                 db  0Eh
.eh_frame:0000000000017F33                 db  30h ; 0
.eh_frame:0000000000017F34                 db  83h
.eh_frame:0000000000017F35                 db    6
.eh_frame:0000000000017F36                 db  4Ah ; J
.eh_frame:0000000000017F37                 db  0Eh
.eh_frame:0000000000017F38                 db  40h ; @
.eh_frame:0000000000017F39                 db    2
.eh_frame:0000000000017F3A                 db 0D2h
.eh_frame:0000000000017F3B                 db  0Ah
.eh_frame:0000000000017F3C                 db  0Eh
.eh_frame:0000000000017F3D                 db  30h ; 0
.eh_frame:0000000000017F3E                 db  41h ; A
.eh_frame:0000000000017F3F                 db  0Eh
.eh_frame:0000000000017F40                 db  28h ; (
.eh_frame:0000000000017F41                 db  41h ; A
.eh_frame:0000000000017F42                 db  0Eh
.eh_frame:0000000000017F43                 db  20h
.eh_frame:0000000000017F44                 db  42h ; B
.eh_frame:0000000000017F45                 db  0Eh
.eh_frame:0000000000017F46                 db  18h
.eh_frame:0000000000017F47                 db  42h ; B
.eh_frame:0000000000017F48                 db  0Eh
.eh_frame:0000000000017F49                 db  10h
.eh_frame:0000000000017F4A                 db  42h ; B
.eh_frame:0000000000017F4B                 db  0Eh
.eh_frame:0000000000017F4C                 db    8
.eh_frame:0000000000017F4D                 db  46h ; F
.eh_frame:0000000000017F4E                 db  0Bh
.eh_frame:0000000000017F4F                 db    0
.eh_frame:0000000000017F50                 db  5Ch ; \
.eh_frame:0000000000017F51                 db    0
.eh_frame:0000000000017F52                 db    0
.eh_frame:0000000000017F53                 db    0
.eh_frame:0000000000017F54                 db 0ECh
.eh_frame:0000000000017F55                 db  18h
.eh_frame:0000000000017F56                 db    0
.eh_frame:0000000000017F57                 db    0
.eh_frame:0000000000017F58                 db  98h
.eh_frame:0000000000017F59                 db  3Bh ; ;
.eh_frame:0000000000017F5A                 db 0FFh
.eh_frame:0000000000017F5B                 db 0FFh
.eh_frame:0000000000017F5C                 db  6Ah ; j
.eh_frame:0000000000017F5D                 db    2
.eh_frame:0000000000017F5E                 db    0
.eh_frame:0000000000017F5F                 db    0
.eh_frame:0000000000017F60                 db    0
.eh_frame:0000000000017F61                 db  42h ; B
.eh_frame:0000000000017F62                 db  0Eh
.eh_frame:0000000000017F63                 db  10h
.eh_frame:0000000000017F64                 db  8Fh
.eh_frame:0000000000017F65                 db    2
.eh_frame:0000000000017F66                 db  42h ; B
.eh_frame:0000000000017F67                 db  0Eh
.eh_frame:0000000000017F68                 db  18h
.eh_frame:0000000000017F69                 db  8Eh
.eh_frame:0000000000017F6A                 db    3
.eh_frame:0000000000017F6B                 db  45h ; E
.eh_frame:0000000000017F6C                 db  0Eh
.eh_frame:0000000000017F6D                 db  20h
.eh_frame:0000000000017F6E                 db  8Dh
.eh_frame:0000000000017F6F                 db    4
.eh_frame:0000000000017F70                 db  42h ; B
.eh_frame:0000000000017F71                 db  0Eh
.eh_frame:0000000000017F72                 db  28h ; (
.eh_frame:0000000000017F73                 db  8Ch
.eh_frame:0000000000017F74                 db    5
.eh_frame:0000000000017F75                 db  44h ; D
.eh_frame:0000000000017F76                 db  0Eh
.eh_frame:0000000000017F77                 db  30h ; 0
.eh_frame:0000000000017F78                 db  86h
.eh_frame:0000000000017F79                 db    6
.eh_frame:0000000000017F7A                 db  41h ; A
.eh_frame:0000000000017F7B                 db  0Eh
.eh_frame:0000000000017F7C                 db  38h ; 8
.eh_frame:0000000000017F7D                 db  83h
.eh_frame:0000000000017F7E                 db    7
.eh_frame:0000000000017F7F                 db  4Fh ; O
.eh_frame:0000000000017F80                 db  0Eh
.eh_frame:0000000000017F81                 db  90h
.eh_frame:0000000000017F82                 db    1
.eh_frame:0000000000017F83                 db    2
.eh_frame:0000000000017F84                 db  5Bh ; [
.eh_frame:0000000000017F85                 db  0Eh
.eh_frame:0000000000017F86                 db  98h
.eh_frame:0000000000017F87                 db    1
.eh_frame:0000000000017F88                 db  45h ; E
.eh_frame:0000000000017F89                 db  0Eh
.eh_frame:0000000000017F8A                 db 0A0h
.eh_frame:0000000000017F8B                 db    1
.eh_frame:0000000000017F8C                 db  6Ch ; l
.eh_frame:0000000000017F8D                 db  0Eh
.eh_frame:0000000000017F8E                 db  98h
.eh_frame:0000000000017F8F                 db    1
.eh_frame:0000000000017F90                 db  41h ; A
.eh_frame:0000000000017F91                 db  0Eh
.eh_frame:0000000000017F92                 db  90h
.eh_frame:0000000000017F93                 db    1
.eh_frame:0000000000017F94                 db    3
.eh_frame:0000000000017F95                 db  31h ; 1
.eh_frame:0000000000017F96                 db    1
.eh_frame:0000000000017F97                 db  0Ah
.eh_frame:0000000000017F98                 db  0Eh
.eh_frame:0000000000017F99                 db  38h ; 8
.eh_frame:0000000000017F9A                 db  41h ; A
.eh_frame:0000000000017F9B                 db  0Eh
.eh_frame:0000000000017F9C                 db  30h ; 0
.eh_frame:0000000000017F9D                 db  41h ; A
.eh_frame:0000000000017F9E                 db  0Eh
.eh_frame:0000000000017F9F                 db  28h ; (
.eh_frame:0000000000017FA0                 db  42h ; B
.eh_frame:0000000000017FA1                 db  0Eh
.eh_frame:0000000000017FA2                 db  20h
.eh_frame:0000000000017FA3                 db  42h ; B
.eh_frame:0000000000017FA4                 db  0Eh
.eh_frame:0000000000017FA5                 db  18h
.eh_frame:0000000000017FA6                 db  42h ; B
.eh_frame:0000000000017FA7                 db  0Eh
.eh_frame:0000000000017FA8                 db  10h
.eh_frame:0000000000017FA9                 db  42h ; B
.eh_frame:0000000000017FAA                 db  0Eh
.eh_frame:0000000000017FAB                 db    8
.eh_frame:0000000000017FAC                 db  49h ; I
.eh_frame:0000000000017FAD                 db  0Bh
.eh_frame:0000000000017FAE                 db    0
.eh_frame:0000000000017FAF                 db    0
.eh_frame:0000000000017FB0                 db  4Ch ; L
.eh_frame:0000000000017FB1                 db    0
.eh_frame:0000000000017FB2                 db    0
.eh_frame:0000000000017FB3                 db    0
.eh_frame:0000000000017FB4                 db  4Ch ; L
.eh_frame:0000000000017FB5                 db  19h
.eh_frame:0000000000017FB6                 db    0
.eh_frame:0000000000017FB7                 db    0
.eh_frame:0000000000017FB8                 db 0A8h
.eh_frame:0000000000017FB9                 db  3Dh ; =
.eh_frame:0000000000017FBA                 db 0FFh
.eh_frame:0000000000017FBB                 db 0FFh
.eh_frame:0000000000017FBC                 db  27h ; '
.eh_frame:0000000000017FBD                 db    5
.eh_frame:0000000000017FBE                 db    0
.eh_frame:0000000000017FBF                 db    0
.eh_frame:0000000000017FC0                 db    0
.eh_frame:0000000000017FC1                 db  42h ; B
.eh_frame:0000000000017FC2                 db  0Eh
.eh_frame:0000000000017FC3                 db  10h
.eh_frame:0000000000017FC4                 db  8Fh
.eh_frame:0000000000017FC5                 db    2
.eh_frame:0000000000017FC6                 db  42h ; B
.eh_frame:0000000000017FC7                 db  0Eh
.eh_frame:0000000000017FC8                 db  18h
.eh_frame:0000000000017FC9                 db  8Eh
.eh_frame:0000000000017FCA                 db    3
.eh_frame:0000000000017FCB                 db  45h ; E
.eh_frame:0000000000017FCC                 db  0Eh
.eh_frame:0000000000017FCD                 db  20h
.eh_frame:0000000000017FCE                 db  8Dh
.eh_frame:0000000000017FCF                 db    4
.eh_frame:0000000000017FD0                 db  42h ; B
.eh_frame:0000000000017FD1                 db  0Eh
.eh_frame:0000000000017FD2                 db  28h ; (
.eh_frame:0000000000017FD3                 db  8Ch
.eh_frame:0000000000017FD4                 db    5
.eh_frame:0000000000017FD5                 db  41h ; A
.eh_frame:0000000000017FD6                 db  0Eh
.eh_frame:0000000000017FD7                 db  30h ; 0
.eh_frame:0000000000017FD8                 db  86h
.eh_frame:0000000000017FD9                 db    6
.eh_frame:0000000000017FDA                 db  41h ; A
.eh_frame:0000000000017FDB                 db  0Eh
.eh_frame:0000000000017FDC                 db  38h ; 8
.eh_frame:0000000000017FDD                 db  83h
.eh_frame:0000000000017FDE                 db    7
.eh_frame:0000000000017FDF                 db  4Ch ; L
.eh_frame:0000000000017FE0                 db  0Eh
.eh_frame:0000000000017FE1                 db 0B0h
.eh_frame:0000000000017FE2                 db    3
.eh_frame:0000000000017FE3                 db    3
.eh_frame:0000000000017FE4                 db  82h
.eh_frame:0000000000017FE5                 db    4
.eh_frame:0000000000017FE6                 db  0Ah
.eh_frame:0000000000017FE7                 db  0Eh
.eh_frame:0000000000017FE8                 db  38h ; 8
.eh_frame:0000000000017FE9                 db  41h ; A
.eh_frame:0000000000017FEA                 db  0Eh
.eh_frame:0000000000017FEB                 db  30h ; 0
.eh_frame:0000000000017FEC                 db  41h ; A
.eh_frame:0000000000017FED                 db  0Eh
.eh_frame:0000000000017FEE                 db  28h ; (
.eh_frame:0000000000017FEF                 db  42h ; B
.eh_frame:0000000000017FF0                 db  0Eh
.eh_frame:0000000000017FF1                 db  20h
.eh_frame:0000000000017FF2                 db  42h ; B
.eh_frame:0000000000017FF3                 db  0Eh
.eh_frame:0000000000017FF4                 db  18h
.eh_frame:0000000000017FF5                 db  42h ; B
.eh_frame:0000000000017FF6                 db  0Eh
.eh_frame:0000000000017FF7                 db  10h
.eh_frame:0000000000017FF8                 db  42h ; B
.eh_frame:0000000000017FF9                 db  0Eh
.eh_frame:0000000000017FFA                 db    8
.eh_frame:0000000000017FFB                 db  41h ; A
.eh_frame:0000000000017FFC                 db  0Bh
.eh_frame:0000000000017FFD                 db    0
.eh_frame:0000000000017FFE                 db    0
.eh_frame:0000000000017FFF                 db    0
.eh_frame:0000000000018000                 db  38h ; 8
.eh_frame:0000000000018001                 db    0
.eh_frame:0000000000018002                 db    0
.eh_frame:0000000000018003                 db    0
.eh_frame:0000000000018004                 db  9Ch
.eh_frame:0000000000018005                 db  19h
.eh_frame:0000000000018006                 db    0
.eh_frame:0000000000018007                 db    0
.eh_frame:0000000000018008                 db  88h
.eh_frame:0000000000018009                 db  42h ; B
.eh_frame:000000000001800A                 db 0FFh
.eh_frame:000000000001800B                 db 0FFh
.eh_frame:000000000001800C                 db  54h ; T
.eh_frame:000000000001800D                 db    2
.eh_frame:000000000001800E                 db    0
.eh_frame:000000000001800F                 db    0
.eh_frame:0000000000018010                 db    0
.eh_frame:0000000000018011                 db  46h ; F
.eh_frame:0000000000018012                 db  0Eh
.eh_frame:0000000000018013                 db  10h
.eh_frame:0000000000018014                 db  8Dh
.eh_frame:0000000000018015                 db    2
.eh_frame:0000000000018016                 db  42h ; B
.eh_frame:0000000000018017                 db  0Eh
.eh_frame:0000000000018018                 db  18h
.eh_frame:0000000000018019                 db  8Ch
.eh_frame:000000000001801A                 db    3
.eh_frame:000000000001801B                 db  45h ; E
.eh_frame:000000000001801C                 db  0Eh
.eh_frame:000000000001801D                 db  20h
.eh_frame:000000000001801E                 db  86h
.eh_frame:000000000001801F                 db    4
.eh_frame:0000000000018020                 db  41h ; A
.eh_frame:0000000000018021                 db  0Eh
.eh_frame:0000000000018022                 db  28h ; (
.eh_frame:0000000000018023                 db  83h
.eh_frame:0000000000018024                 db    5
.eh_frame:0000000000018025                 db  44h ; D
.eh_frame:0000000000018026                 db  0Eh
.eh_frame:0000000000018027                 db  30h ; 0
.eh_frame:0000000000018028                 db    2
.eh_frame:0000000000018029                 db 0E4h
.eh_frame:000000000001802A                 db  0Ah
.eh_frame:000000000001802B                 db  0Eh
.eh_frame:000000000001802C                 db  28h ; (
.eh_frame:000000000001802D                 db  43h ; C
.eh_frame:000000000001802E                 db  0Eh
.eh_frame:000000000001802F                 db  20h
.eh_frame:0000000000018030                 db  41h ; A
.eh_frame:0000000000018031                 db  0Eh
.eh_frame:0000000000018032                 db  18h
.eh_frame:0000000000018033                 db  42h ; B
.eh_frame:0000000000018034                 db  0Eh
.eh_frame:0000000000018035                 db  10h
.eh_frame:0000000000018036                 db  42h ; B
.eh_frame:0000000000018037                 db  0Eh
.eh_frame:0000000000018038                 db    8
.eh_frame:0000000000018039                 db  42h ; B
.eh_frame:000000000001803A                 db  0Bh
.eh_frame:000000000001803B                 db    0
.eh_frame:000000000001803C                 db  4Ch ; L
.eh_frame:000000000001803D                 db    0
.eh_frame:000000000001803E                 db    0
.eh_frame:000000000001803F                 db    0
.eh_frame:0000000000018040                 db 0D8h
.eh_frame:0000000000018041                 db  19h
.eh_frame:0000000000018042                 db    0
.eh_frame:0000000000018043                 db    0
.eh_frame:0000000000018044                 db 0ACh
.eh_frame:0000000000018045                 db  44h ; D
.eh_frame:0000000000018046                 db 0FFh
.eh_frame:0000000000018047                 db 0FFh
.eh_frame:0000000000018048                 db  51h ; Q
.eh_frame:0000000000018049                 db    7
.eh_frame:000000000001804A                 db    0
.eh_frame:000000000001804B                 db    0
.eh_frame:000000000001804C                 db    0
.eh_frame:000000000001804D                 db  42h ; B
.eh_frame:000000000001804E                 db  0Eh
.eh_frame:000000000001804F                 db  10h
.eh_frame:0000000000018050                 db  8Fh
.eh_frame:0000000000018051                 db    2
.eh_frame:0000000000018052                 db  42h ; B
.eh_frame:0000000000018053                 db  0Eh
.eh_frame:0000000000018054                 db  18h
.eh_frame:0000000000018055                 db  8Eh
.eh_frame:0000000000018056                 db    3
.eh_frame:0000000000018057                 db  45h ; E
.eh_frame:0000000000018058                 db  0Eh
.eh_frame:0000000000018059                 db  20h
.eh_frame:000000000001805A                 db  8Dh
.eh_frame:000000000001805B                 db    4
.eh_frame:000000000001805C                 db  42h ; B
.eh_frame:000000000001805D                 db  0Eh
.eh_frame:000000000001805E                 db  28h ; (
.eh_frame:000000000001805F                 db  8Ch
.eh_frame:0000000000018060                 db    5
.eh_frame:0000000000018061                 db  41h ; A
.eh_frame:0000000000018062                 db  0Eh
.eh_frame:0000000000018063                 db  30h ; 0
.eh_frame:0000000000018064                 db  86h
.eh_frame:0000000000018065                 db    6
.eh_frame:0000000000018066                 db  41h ; A
.eh_frame:0000000000018067                 db  0Eh
.eh_frame:0000000000018068                 db  38h ; 8
.eh_frame:0000000000018069                 db  83h
.eh_frame:000000000001806A                 db    7
.eh_frame:000000000001806B                 db  4Dh ; M
.eh_frame:000000000001806C                 db  0Eh
.eh_frame:000000000001806D                 db  90h
.eh_frame:000000000001806E                 db    2
.eh_frame:000000000001806F                 db    3
.eh_frame:0000000000018070                 db  88h
.eh_frame:0000000000018071                 db    5
.eh_frame:0000000000018072                 db  0Ah
.eh_frame:0000000000018073                 db  0Eh
.eh_frame:0000000000018074                 db  38h ; 8
.eh_frame:0000000000018075                 db  41h ; A
.eh_frame:0000000000018076                 db  0Eh
.eh_frame:0000000000018077                 db  30h ; 0
.eh_frame:0000000000018078                 db  41h ; A
.eh_frame:0000000000018079                 db  0Eh
.eh_frame:000000000001807A                 db  28h ; (
.eh_frame:000000000001807B                 db  42h ; B
.eh_frame:000000000001807C                 db  0Eh
.eh_frame:000000000001807D                 db  20h
.eh_frame:000000000001807E                 db  42h ; B
.eh_frame:000000000001807F                 db  0Eh
.eh_frame:0000000000018080                 db  18h
.eh_frame:0000000000018081                 db  42h ; B
.eh_frame:0000000000018082                 db  0Eh
.eh_frame:0000000000018083                 db  10h
.eh_frame:0000000000018084                 db  42h ; B
.eh_frame:0000000000018085                 db  0Eh
.eh_frame:0000000000018086                 db    8
.eh_frame:0000000000018087                 db  44h ; D
.eh_frame:0000000000018088                 db  0Bh
.eh_frame:0000000000018089                 db    0
.eh_frame:000000000001808A                 db    0
.eh_frame:000000000001808B                 db    0
.eh_frame:000000000001808C                 db  2Ch ; ,
.eh_frame:000000000001808D                 db    0
.eh_frame:000000000001808E                 db    0
.eh_frame:000000000001808F                 db    0
.eh_frame:0000000000018090                 db  28h ; (
.eh_frame:0000000000018091                 db  1Ah
.eh_frame:0000000000018092                 db    0
.eh_frame:0000000000018093                 db    0
.eh_frame:0000000000018094                 db 0BCh
.eh_frame:0000000000018095                 db  4Bh ; K
.eh_frame:0000000000018096                 db 0FFh
.eh_frame:0000000000018097                 db 0FFh
.eh_frame:0000000000018098                 db 0EAh
.eh_frame:0000000000018099                 db    8
.eh_frame:000000000001809A                 db    0
.eh_frame:000000000001809B                 db    0
.eh_frame:000000000001809C                 db    0
.eh_frame:000000000001809D                 db  41h ; A
.eh_frame:000000000001809E                 db  0Eh
.eh_frame:000000000001809F                 db  10h
.eh_frame:00000000000180A0                 db  86h
.eh_frame:00000000000180A1                 db    2
.eh_frame:00000000000180A2                 db  43h ; C
.eh_frame:00000000000180A3                 db  0Dh
.eh_frame:00000000000180A4                 db    6
.eh_frame:00000000000180A5                 db  48h ; H
.eh_frame:00000000000180A6                 db  8Fh
.eh_frame:00000000000180A7                 db    3
.eh_frame:00000000000180A8                 db  8Eh
.eh_frame:00000000000180A9                 db    4
.eh_frame:00000000000180AA                 db  8Dh
.eh_frame:00000000000180AB                 db    5
.eh_frame:00000000000180AC                 db  8Ch
.eh_frame:00000000000180AD                 db    6
.eh_frame:00000000000180AE                 db  4Eh ; N
.eh_frame:00000000000180AF                 db  83h
.eh_frame:00000000000180B0                 db    7
.eh_frame:00000000000180B1                 db    3
.eh_frame:00000000000180B2                 db  20h
.eh_frame:00000000000180B3                 db    7
.eh_frame:00000000000180B4                 db  0Ah
.eh_frame:00000000000180B5                 db  0Ch
.eh_frame:00000000000180B6                 db    7
.eh_frame:00000000000180B7                 db    8
.eh_frame:00000000000180B8                 db  41h ; A
.eh_frame:00000000000180B9                 db  0Bh
.eh_frame:00000000000180BA                 db    0
.eh_frame:00000000000180BB                 db    0
.eh_frame:00000000000180BC                 db  68h ; h
.eh_frame:00000000000180BD                 db    0
.eh_frame:00000000000180BE                 db    0
.eh_frame:00000000000180BF                 db    0
.eh_frame:00000000000180C0                 db  58h ; X
.eh_frame:00000000000180C1                 db  1Ah
.eh_frame:00000000000180C2                 db    0
.eh_frame:00000000000180C3                 db    0
.eh_frame:00000000000180C4                 db  7Ch ; |
.eh_frame:00000000000180C5                 db  54h ; T
.eh_frame:00000000000180C6                 db 0FFh
.eh_frame:00000000000180C7                 db 0FFh
.eh_frame:00000000000180C8                 db  96h
.eh_frame:00000000000180C9                 db    1
.eh_frame:00000000000180CA                 db    0
.eh_frame:00000000000180CB                 db    0
.eh_frame:00000000000180CC                 db    0
.eh_frame:00000000000180CD                 db  42h ; B
.eh_frame:00000000000180CE                 db  0Eh
.eh_frame:00000000000180CF                 db  10h
.eh_frame:00000000000180D0                 db  8Fh
.eh_frame:00000000000180D1                 db    2
.eh_frame:00000000000180D2                 db  42h ; B
.eh_frame:00000000000180D3                 db  0Eh
.eh_frame:00000000000180D4                 db  18h
.eh_frame:00000000000180D5                 db  8Eh
.eh_frame:00000000000180D6                 db    3
.eh_frame:00000000000180D7                 db  45h ; E
.eh_frame:00000000000180D8                 db  0Eh
.eh_frame:00000000000180D9                 db  20h
.eh_frame:00000000000180DA                 db  8Dh
.eh_frame:00000000000180DB                 db    4
.eh_frame:00000000000180DC                 db  42h ; B
.eh_frame:00000000000180DD                 db  0Eh
.eh_frame:00000000000180DE                 db  28h ; (
.eh_frame:00000000000180DF                 db  8Ch
.eh_frame:00000000000180E0                 db    5
.eh_frame:00000000000180E1                 db  44h ; D
.eh_frame:00000000000180E2                 db  0Eh
.eh_frame:00000000000180E3                 db  30h ; 0
.eh_frame:00000000000180E4                 db  86h
.eh_frame:00000000000180E5                 db    6
.eh_frame:00000000000180E6                 db  41h ; A
.eh_frame:00000000000180E7                 db  0Eh
.eh_frame:00000000000180E8                 db  38h ; 8
.eh_frame:00000000000180E9                 db  83h
.eh_frame:00000000000180EA                 db    7
.eh_frame:00000000000180EB                 db  51h ; Q
.eh_frame:00000000000180EC                 db  0Eh
.eh_frame:00000000000180ED                 db  58h ; X
.eh_frame:00000000000180EE                 db  49h ; I
.eh_frame:00000000000180EF                 db  0Eh
.eh_frame:00000000000180F0                 db  60h ; `
.eh_frame:00000000000180F1                 db  4Eh ; N
.eh_frame:00000000000180F2                 db  0Eh
.eh_frame:00000000000180F3                 db  58h ; X
.eh_frame:00000000000180F4                 db  41h ; A
.eh_frame:00000000000180F5                 db  0Eh
.eh_frame:00000000000180F6                 db  50h ; P
.eh_frame:00000000000180F7                 db  46h ; F
.eh_frame:00000000000180F8                 db  0Ah
.eh_frame:00000000000180F9                 db  0Eh
.eh_frame:00000000000180FA                 db  38h ; 8
.eh_frame:00000000000180FB                 db  41h ; A
.eh_frame:00000000000180FC                 db  0Eh
.eh_frame:00000000000180FD                 db  30h ; 0
.eh_frame:00000000000180FE                 db  41h ; A
.eh_frame:00000000000180FF                 db  0Eh
.eh_frame:0000000000018100                 db  28h ; (
.eh_frame:0000000000018101                 db  42h ; B
.eh_frame:0000000000018102                 db  0Eh
.eh_frame:0000000000018103                 db  20h
.eh_frame:0000000000018104                 db  42h ; B
.eh_frame:0000000000018105                 db  0Eh
.eh_frame:0000000000018106                 db  18h
.eh_frame:0000000000018107                 db  42h ; B
.eh_frame:0000000000018108                 db  0Eh
.eh_frame:0000000000018109                 db  10h
.eh_frame:000000000001810A                 db  42h ; B
.eh_frame:000000000001810B                 db  0Eh
.eh_frame:000000000001810C                 db    8
.eh_frame:000000000001810D                 db  47h ; G
.eh_frame:000000000001810E                 db  0Bh
.eh_frame:000000000001810F                 db    2
.eh_frame:0000000000018110                 db  97h
.eh_frame:0000000000018111                 db  0Ah
.eh_frame:0000000000018112                 db  0Eh
.eh_frame:0000000000018113                 db  38h ; 8
.eh_frame:0000000000018114                 db  44h ; D
.eh_frame:0000000000018115                 db  0Eh
.eh_frame:0000000000018116                 db  30h ; 0
.eh_frame:0000000000018117                 db  41h ; A
.eh_frame:0000000000018118                 db  0Eh
.eh_frame:0000000000018119                 db  28h ; (
.eh_frame:000000000001811A                 db  42h ; B
.eh_frame:000000000001811B                 db  0Eh
.eh_frame:000000000001811C                 db  20h
.eh_frame:000000000001811D                 db  42h ; B
.eh_frame:000000000001811E                 db  0Eh
.eh_frame:000000000001811F                 db  18h
.eh_frame:0000000000018120                 db  42h ; B
.eh_frame:0000000000018121                 db  0Eh
.eh_frame:0000000000018122                 db  10h
.eh_frame:0000000000018123                 db  42h ; B
.eh_frame:0000000000018124                 db  0Eh
.eh_frame:0000000000018125                 db    8
.eh_frame:0000000000018126                 db  4Ch ; L
.eh_frame:0000000000018127                 db  0Bh
.eh_frame:0000000000018128                 db  5Ch ; \
.eh_frame:0000000000018129                 db    0
.eh_frame:000000000001812A                 db    0
.eh_frame:000000000001812B                 db    0
.eh_frame:000000000001812C                 db 0C4h
.eh_frame:000000000001812D                 db  1Ah
.eh_frame:000000000001812E                 db    0
.eh_frame:000000000001812F                 db    0
.eh_frame:0000000000018130                 db 0B0h
.eh_frame:0000000000018131                 db  55h ; U
.eh_frame:0000000000018132                 db 0FFh
.eh_frame:0000000000018133                 db 0FFh
.eh_frame:0000000000018134                 db 0E1h
.eh_frame:0000000000018135                 db    8
.eh_frame:0000000000018136                 db    0
.eh_frame:0000000000018137                 db    0
.eh_frame:0000000000018138                 db    0
.eh_frame:0000000000018139                 db  42h ; B
.eh_frame:000000000001813A                 db  0Eh
.eh_frame:000000000001813B                 db  10h
.eh_frame:000000000001813C                 db  8Fh
.eh_frame:000000000001813D                 db    2
.eh_frame:000000000001813E                 db  42h ; B
.eh_frame:000000000001813F                 db  0Eh
.eh_frame:0000000000018140                 db  18h
.eh_frame:0000000000018141                 db  8Eh
.eh_frame:0000000000018142                 db    3
.eh_frame:0000000000018143                 db  42h ; B
.eh_frame:0000000000018144                 db  0Eh
.eh_frame:0000000000018145                 db  20h
.eh_frame:0000000000018146                 db  8Dh
.eh_frame:0000000000018147                 db    4
.eh_frame:0000000000018148                 db  42h ; B
.eh_frame:0000000000018149                 db  0Eh
.eh_frame:000000000001814A                 db  28h ; (
.eh_frame:000000000001814B                 db  8Ch
.eh_frame:000000000001814C                 db    5
.eh_frame:000000000001814D                 db  41h ; A
.eh_frame:000000000001814E                 db  0Eh
.eh_frame:000000000001814F                 db  30h ; 0
.eh_frame:0000000000018150                 db  86h
.eh_frame:0000000000018151                 db    6
.eh_frame:0000000000018152                 db  41h ; A
.eh_frame:0000000000018153                 db  0Eh
.eh_frame:0000000000018154                 db  38h ; 8
.eh_frame:0000000000018155                 db  83h
.eh_frame:0000000000018156                 db    7
.eh_frame:0000000000018157                 db  47h ; G
.eh_frame:0000000000018158                 db  0Eh
.eh_frame:0000000000018159                 db 0F0h
.eh_frame:000000000001815A                 db    1
.eh_frame:000000000001815B                 db    3
.eh_frame:000000000001815C                 db  85h
.eh_frame:000000000001815D                 db    3
.eh_frame:000000000001815E                 db  0Ah
.eh_frame:000000000001815F                 db  0Eh
.eh_frame:0000000000018160                 db  38h ; 8
.eh_frame:0000000000018161                 db  41h ; A
.eh_frame:0000000000018162                 db  0Eh
.eh_frame:0000000000018163                 db  30h ; 0
.eh_frame:0000000000018164                 db  41h ; A
.eh_frame:0000000000018165                 db  0Eh
.eh_frame:0000000000018166                 db  28h ; (
.eh_frame:0000000000018167                 db  42h ; B
.eh_frame:0000000000018168                 db  0Eh
.eh_frame:0000000000018169                 db  20h
.eh_frame:000000000001816A                 db  42h ; B
.eh_frame:000000000001816B                 db  0Eh
.eh_frame:000000000001816C                 db  18h
.eh_frame:000000000001816D                 db  42h ; B
.eh_frame:000000000001816E                 db  0Eh
.eh_frame:000000000001816F                 db  10h
.eh_frame:0000000000018170                 db  42h ; B
.eh_frame:0000000000018171                 db  0Eh
.eh_frame:0000000000018172                 db    8
.eh_frame:0000000000018173                 db  48h ; H
.eh_frame:0000000000018174                 db  0Bh
.eh_frame:0000000000018175                 db    3
.eh_frame:0000000000018176                 db 0D8h
.eh_frame:0000000000018177                 db    2
.eh_frame:0000000000018178                 db  0Eh
.eh_frame:0000000000018179                 db 0F8h
.eh_frame:000000000001817A                 db    1
.eh_frame:000000000001817B                 db  42h ; B
.eh_frame:000000000001817C                 db  0Eh
.eh_frame:000000000001817D                 db  80h
.eh_frame:000000000001817E                 db    2
.eh_frame:000000000001817F                 db  4Fh ; O
.eh_frame:0000000000018180                 db  0Eh
.eh_frame:0000000000018181                 db 0F8h
.eh_frame:0000000000018182                 db    1
.eh_frame:0000000000018183                 db  44h ; D
.eh_frame:0000000000018184                 db  0Eh
.eh_frame:0000000000018185                 db 0F0h
.eh_frame:0000000000018186                 db    1
.eh_frame:0000000000018187                 db    0
.eh_frame:0000000000018188                 db  48h ; H
.eh_frame:0000000000018189                 db    0
.eh_frame:000000000001818A                 db    0
.eh_frame:000000000001818B                 db    0
.eh_frame:000000000001818C                 db  24h ; $
.eh_frame:000000000001818D                 db  1Bh
.eh_frame:000000000001818E                 db    0
.eh_frame:000000000001818F                 db    0
.eh_frame:0000000000018190                 db  40h ; @
.eh_frame:0000000000018191                 db  5Eh ; ^
.eh_frame:0000000000018192                 db 0FFh
.eh_frame:0000000000018193                 db 0FFh
.eh_frame:0000000000018194                 db 0ECh
.eh_frame:0000000000018195                 db    1
.eh_frame:0000000000018196                 db    0
.eh_frame:0000000000018197                 db    0
.eh_frame:0000000000018198                 db    0
.eh_frame:0000000000018199                 db  42h ; B
.eh_frame:000000000001819A                 db  0Eh
.eh_frame:000000000001819B                 db  10h
.eh_frame:000000000001819C                 db  8Fh
.eh_frame:000000000001819D                 db    2
.eh_frame:000000000001819E                 db  42h ; B
.eh_frame:000000000001819F                 db  0Eh
.eh_frame:00000000000181A0                 db  18h
.eh_frame:00000000000181A1                 db  8Eh
.eh_frame:00000000000181A2                 db    3
.eh_frame:00000000000181A3                 db  42h ; B
.eh_frame:00000000000181A4                 db  0Eh
.eh_frame:00000000000181A5                 db  20h
.eh_frame:00000000000181A6                 db  8Dh
.eh_frame:00000000000181A7                 db    4
.eh_frame:00000000000181A8                 db  42h ; B
.eh_frame:00000000000181A9                 db  0Eh
.eh_frame:00000000000181AA                 db  28h ; (
.eh_frame:00000000000181AB                 db  8Ch
.eh_frame:00000000000181AC                 db    5
.eh_frame:00000000000181AD                 db  44h ; D
.eh_frame:00000000000181AE                 db  0Eh
.eh_frame:00000000000181AF                 db  30h ; 0
.eh_frame:00000000000181B0                 db  86h
.eh_frame:00000000000181B1                 db    6
.eh_frame:00000000000181B2                 db  41h ; A
.eh_frame:00000000000181B3                 db  0Eh
.eh_frame:00000000000181B4                 db  38h ; 8
.eh_frame:00000000000181B5                 db  83h
.eh_frame:00000000000181B6                 db    7
.eh_frame:00000000000181B7                 db  47h ; G
.eh_frame:00000000000181B8                 db  0Eh
.eh_frame:00000000000181B9                 db  70h ; p
.eh_frame:00000000000181BA                 db    2
.eh_frame:00000000000181BB                 db  6Ch ; l
.eh_frame:00000000000181BC                 db  0Ah
.eh_frame:00000000000181BD                 db  0Eh
.eh_frame:00000000000181BE                 db  38h ; 8
.eh_frame:00000000000181BF                 db  41h ; A
.eh_frame:00000000000181C0                 db  0Eh
.eh_frame:00000000000181C1                 db  30h ; 0
.eh_frame:00000000000181C2                 db  41h ; A
.eh_frame:00000000000181C3                 db  0Eh
.eh_frame:00000000000181C4                 db  28h ; (
.eh_frame:00000000000181C5                 db  42h ; B
.eh_frame:00000000000181C6                 db  0Eh
.eh_frame:00000000000181C7                 db  20h
.eh_frame:00000000000181C8                 db  42h ; B
.eh_frame:00000000000181C9                 db  0Eh
.eh_frame:00000000000181CA                 db  18h
.eh_frame:00000000000181CB                 db  42h ; B
.eh_frame:00000000000181CC                 db  0Eh
.eh_frame:00000000000181CD                 db  10h
.eh_frame:00000000000181CE                 db  42h ; B
.eh_frame:00000000000181CF                 db  0Eh
.eh_frame:00000000000181D0                 db    8
.eh_frame:00000000000181D1                 db  46h ; F
.eh_frame:00000000000181D2                 db  0Bh
.eh_frame:00000000000181D3                 db    0
.eh_frame:00000000000181D4                 db  5Ch ; \
.eh_frame:00000000000181D5                 db    0
.eh_frame:00000000000181D6                 db    0
.eh_frame:00000000000181D7                 db    0
.eh_frame:00000000000181D8                 db  70h ; p
.eh_frame:00000000000181D9                 db  1Bh
.eh_frame:00000000000181DA                 db    0
.eh_frame:00000000000181DB                 db    0
.eh_frame:00000000000181DC                 db 0E4h
.eh_frame:00000000000181DD                 db  5Fh ; _
.eh_frame:00000000000181DE                 db 0FFh
.eh_frame:00000000000181DF                 db 0FFh
.eh_frame:00000000000181E0                 db  40h ; @
.eh_frame:00000000000181E1                 db    3
.eh_frame:00000000000181E2                 db    0
.eh_frame:00000000000181E3                 db    0
.eh_frame:00000000000181E4                 db    0
.eh_frame:00000000000181E5                 db  42h ; B
.eh_frame:00000000000181E6                 db  0Eh
.eh_frame:00000000000181E7                 db  10h
.eh_frame:00000000000181E8                 db  8Fh
.eh_frame:00000000000181E9                 db    2
.eh_frame:00000000000181EA                 db  42h ; B
.eh_frame:00000000000181EB                 db  0Eh
.eh_frame:00000000000181EC                 db  18h
.eh_frame:00000000000181ED                 db  8Eh
.eh_frame:00000000000181EE                 db    3
.eh_frame:00000000000181EF                 db  45h ; E
.eh_frame:00000000000181F0                 db  0Eh
.eh_frame:00000000000181F1                 db  20h
.eh_frame:00000000000181F2                 db  8Dh
.eh_frame:00000000000181F3                 db    4
.eh_frame:00000000000181F4                 db  42h ; B
.eh_frame:00000000000181F5                 db  0Eh
.eh_frame:00000000000181F6                 db  28h ; (
.eh_frame:00000000000181F7                 db  8Ch
.eh_frame:00000000000181F8                 db    5
.eh_frame:00000000000181F9                 db  44h ; D
.eh_frame:00000000000181FA                 db  0Eh
.eh_frame:00000000000181FB                 db  30h ; 0
.eh_frame:00000000000181FC                 db  86h
.eh_frame:00000000000181FD                 db    6
.eh_frame:00000000000181FE                 db  41h ; A
.eh_frame:00000000000181FF                 db  0Eh
.eh_frame:0000000000018200                 db  38h ; 8
.eh_frame:0000000000018201                 db  83h
.eh_frame:0000000000018202                 db    7
.eh_frame:0000000000018203                 db  44h ; D
.eh_frame:0000000000018204                 db  0Eh
.eh_frame:0000000000018205                 db 0A0h
.eh_frame:0000000000018206                 db    1
.eh_frame:0000000000018207                 db    3
.eh_frame:0000000000018208                 db  5Dh ; ]
.eh_frame:0000000000018209                 db    1
.eh_frame:000000000001820A                 db  0Eh
.eh_frame:000000000001820B                 db 0A8h
.eh_frame:000000000001820C                 db    1
.eh_frame:000000000001820D                 db  51h ; Q
.eh_frame:000000000001820E                 db  0Eh
.eh_frame:000000000001820F                 db 0B0h
.eh_frame:0000000000018210                 db    1
.eh_frame:0000000000018211                 db  52h ; R
.eh_frame:0000000000018212                 db  0Eh
.eh_frame:0000000000018213                 db 0A8h
.eh_frame:0000000000018214                 db    1
.eh_frame:0000000000018215                 db  41h ; A
.eh_frame:0000000000018216                 db  0Eh
.eh_frame:0000000000018217                 db 0A0h
.eh_frame:0000000000018218                 db    1
.eh_frame:0000000000018219                 db    3
.eh_frame:000000000001821A                 db  94h
.eh_frame:000000000001821B                 db    1
.eh_frame:000000000001821C                 db  0Ah
.eh_frame:000000000001821D                 db  0Eh
.eh_frame:000000000001821E                 db  38h ; 8
.eh_frame:000000000001821F                 db  41h ; A
.eh_frame:0000000000018220                 db  0Eh
.eh_frame:0000000000018221                 db  30h ; 0
.eh_frame:0000000000018222                 db  41h ; A
.eh_frame:0000000000018223                 db  0Eh
.eh_frame:0000000000018224                 db  28h ; (
.eh_frame:0000000000018225                 db  42h ; B
.eh_frame:0000000000018226                 db  0Eh
.eh_frame:0000000000018227                 db  20h
.eh_frame:0000000000018228                 db  42h ; B
.eh_frame:0000000000018229                 db  0Eh
.eh_frame:000000000001822A                 db  18h
.eh_frame:000000000001822B                 db  42h ; B
.eh_frame:000000000001822C                 db  0Eh
.eh_frame:000000000001822D                 db  10h
.eh_frame:000000000001822E                 db  42h ; B
.eh_frame:000000000001822F                 db  0Eh
.eh_frame:0000000000018230                 db    8
.eh_frame:0000000000018231                 db  41h ; A
.eh_frame:0000000000018232                 db  0Bh
.eh_frame:0000000000018233                 db    0
.eh_frame:0000000000018234                 db  4Ch ; L
.eh_frame:0000000000018235                 db    0
.eh_frame:0000000000018236                 db    0
.eh_frame:0000000000018237                 db    0
.eh_frame:0000000000018238                 db 0D0h
.eh_frame:0000000000018239                 db  1Bh
.eh_frame:000000000001823A                 db    0
.eh_frame:000000000001823B                 db    0
.eh_frame:000000000001823C                 db 0C4h
.eh_frame:000000000001823D                 db  62h ; b
.eh_frame:000000000001823E                 db 0FFh
.eh_frame:000000000001823F                 db 0FFh
.eh_frame:0000000000018240                 db  30h ; 0
.eh_frame:0000000000018241                 db  17h
.eh_frame:0000000000018242                 db    0
.eh_frame:0000000000018243                 db    0
.eh_frame:0000000000018244                 db    0
.eh_frame:0000000000018245                 db  42h ; B
.eh_frame:0000000000018246                 db  0Eh
.eh_frame:0000000000018247                 db  10h
.eh_frame:0000000000018248                 db  8Fh
.eh_frame:0000000000018249                 db    2
.eh_frame:000000000001824A                 db  42h ; B
.eh_frame:000000000001824B                 db  0Eh
.eh_frame:000000000001824C                 db  18h
.eh_frame:000000000001824D                 db  8Eh
.eh_frame:000000000001824E                 db    3
.eh_frame:000000000001824F                 db  42h ; B
.eh_frame:0000000000018250                 db  0Eh
.eh_frame:0000000000018251                 db  20h
.eh_frame:0000000000018252                 db  8Dh
.eh_frame:0000000000018253                 db    4
.eh_frame:0000000000018254                 db  42h ; B
.eh_frame:0000000000018255                 db  0Eh
.eh_frame:0000000000018256                 db  28h ; (
.eh_frame:0000000000018257                 db  8Ch
.eh_frame:0000000000018258                 db    5
.eh_frame:0000000000018259                 db  44h ; D
.eh_frame:000000000001825A                 db  0Eh
.eh_frame:000000000001825B                 db  30h ; 0
.eh_frame:000000000001825C                 db  86h
.eh_frame:000000000001825D                 db    6
.eh_frame:000000000001825E                 db  41h ; A
.eh_frame:000000000001825F                 db  0Eh
.eh_frame:0000000000018260                 db  38h ; 8
.eh_frame:0000000000018261                 db  83h
.eh_frame:0000000000018262                 db    7
.eh_frame:0000000000018263                 db  52h ; R
.eh_frame:0000000000018264                 db  0Eh
.eh_frame:0000000000018265                 db 0F0h
.eh_frame:0000000000018266                 db    4
.eh_frame:0000000000018267                 db    3
.eh_frame:0000000000018268                 db  7Ch ; |
.eh_frame:0000000000018269                 db  0Bh
.eh_frame:000000000001826A                 db  0Ah
.eh_frame:000000000001826B                 db  0Eh
.eh_frame:000000000001826C                 db  38h ; 8
.eh_frame:000000000001826D                 db  41h ; A
.eh_frame:000000000001826E                 db  0Eh
.eh_frame:000000000001826F                 db  30h ; 0
.eh_frame:0000000000018270                 db  41h ; A
.eh_frame:0000000000018271                 db  0Eh
.eh_frame:0000000000018272                 db  28h ; (
.eh_frame:0000000000018273                 db  42h ; B
.eh_frame:0000000000018274                 db  0Eh
.eh_frame:0000000000018275                 db  20h
.eh_frame:0000000000018276                 db  42h ; B
.eh_frame:0000000000018277                 db  0Eh
.eh_frame:0000000000018278                 db  18h
.eh_frame:0000000000018279                 db  42h ; B
.eh_frame:000000000001827A                 db  0Eh
.eh_frame:000000000001827B                 db  10h
.eh_frame:000000000001827C                 db  42h ; B
.eh_frame:000000000001827D                 db  0Eh
.eh_frame:000000000001827E                 db    8
.eh_frame:000000000001827F                 db  4Bh ; K
.eh_frame:0000000000018280                 db  0Bh
.eh_frame:0000000000018281                 db    0
.eh_frame:0000000000018282                 db    0
.eh_frame:0000000000018283                 db    0
.eh_frame:0000000000018284                 db  5Ch ; \
.eh_frame:0000000000018285                 db    0
.eh_frame:0000000000018286                 db    0
.eh_frame:0000000000018287                 db    0
.eh_frame:0000000000018288                 db  20h
.eh_frame:0000000000018289                 db  1Ch
.eh_frame:000000000001828A                 db    0
.eh_frame:000000000001828B                 db    0
.eh_frame:000000000001828C                 db 0A4h
.eh_frame:000000000001828D                 db  79h ; y
.eh_frame:000000000001828E                 db 0FFh
.eh_frame:000000000001828F                 db 0FFh
.eh_frame:0000000000018290                 db  50h ; P
.eh_frame:0000000000018291                 db    8
.eh_frame:0000000000018292                 db    0
.eh_frame:0000000000018293                 db    0
.eh_frame:0000000000018294                 db    0
.eh_frame:0000000000018295                 db  42h ; B
.eh_frame:0000000000018296                 db  0Eh
.eh_frame:0000000000018297                 db  10h
.eh_frame:0000000000018298                 db  8Fh
.eh_frame:0000000000018299                 db    2
.eh_frame:000000000001829A                 db  42h ; B
.eh_frame:000000000001829B                 db  0Eh
.eh_frame:000000000001829C                 db  18h
.eh_frame:000000000001829D                 db  8Eh
.eh_frame:000000000001829E                 db    3
.eh_frame:000000000001829F                 db  45h ; E
.eh_frame:00000000000182A0                 db  0Eh
.eh_frame:00000000000182A1                 db  20h
.eh_frame:00000000000182A2                 db  8Dh
.eh_frame:00000000000182A3                 db    4
.eh_frame:00000000000182A4                 db  42h ; B
.eh_frame:00000000000182A5                 db  0Eh
.eh_frame:00000000000182A6                 db  28h ; (
.eh_frame:00000000000182A7                 db  8Ch
.eh_frame:00000000000182A8                 db    5
.eh_frame:00000000000182A9                 db  44h ; D
.eh_frame:00000000000182AA                 db  0Eh
.eh_frame:00000000000182AB                 db  30h ; 0
.eh_frame:00000000000182AC                 db  86h
.eh_frame:00000000000182AD                 db    6
.eh_frame:00000000000182AE                 db  41h ; A
.eh_frame:00000000000182AF                 db  0Eh
.eh_frame:00000000000182B0                 db  38h ; 8
.eh_frame:00000000000182B1                 db  83h
.eh_frame:00000000000182B2                 db    7
.eh_frame:00000000000182B3                 db  55h ; U
.eh_frame:00000000000182B4                 db  0Eh
.eh_frame:00000000000182B5                 db 0E0h
.eh_frame:00000000000182B6                 db    1
.eh_frame:00000000000182B7                 db    2
.eh_frame:00000000000182B8                 db  91h
.eh_frame:00000000000182B9                 db  0Ah
.eh_frame:00000000000182BA                 db  0Eh
.eh_frame:00000000000182BB                 db  38h ; 8
.eh_frame:00000000000182BC                 db  41h ; A
.eh_frame:00000000000182BD                 db  0Eh
.eh_frame:00000000000182BE                 db  30h ; 0
.eh_frame:00000000000182BF                 db  41h ; A
.eh_frame:00000000000182C0                 db  0Eh
.eh_frame:00000000000182C1                 db  28h ; (
.eh_frame:00000000000182C2                 db  42h ; B
.eh_frame:00000000000182C3                 db  0Eh
.eh_frame:00000000000182C4                 db  20h
.eh_frame:00000000000182C5                 db  42h ; B
.eh_frame:00000000000182C6                 db  0Eh
.eh_frame:00000000000182C7                 db  18h
.eh_frame:00000000000182C8                 db  42h ; B
.eh_frame:00000000000182C9                 db  0Eh
.eh_frame:00000000000182CA                 db  10h
.eh_frame:00000000000182CB                 db  42h ; B
.eh_frame:00000000000182CC                 db  0Eh
.eh_frame:00000000000182CD                 db    8
.eh_frame:00000000000182CE                 db  48h ; H
.eh_frame:00000000000182CF                 db  0Bh
.eh_frame:00000000000182D0                 db    3
.eh_frame:00000000000182D1                 db 0C3h
.eh_frame:00000000000182D2                 db    5
.eh_frame:00000000000182D3                 db  0Eh
.eh_frame:00000000000182D4                 db 0E8h
.eh_frame:00000000000182D5                 db    1
.eh_frame:00000000000182D6                 db  4Ah ; J
.eh_frame:00000000000182D7                 db  0Eh
.eh_frame:00000000000182D8                 db 0F0h
.eh_frame:00000000000182D9                 db    1
.eh_frame:00000000000182DA                 db  56h ; V
.eh_frame:00000000000182DB                 db  0Eh
.eh_frame:00000000000182DC                 db 0E8h
.eh_frame:00000000000182DD                 db    1
.eh_frame:00000000000182DE                 db  41h ; A
.eh_frame:00000000000182DF                 db  0Eh
.eh_frame:00000000000182E0                 db 0E0h
.eh_frame:00000000000182E1                 db    1
.eh_frame:00000000000182E2                 db    0
.eh_frame:00000000000182E3                 db    0
.eh_frame:00000000000182E4                 db  40h ; @
.eh_frame:00000000000182E5                 db    0
.eh_frame:00000000000182E6                 db    0
.eh_frame:00000000000182E7                 db    0
.eh_frame:00000000000182E8                 db  80h
.eh_frame:00000000000182E9                 db  1Ch
.eh_frame:00000000000182EA                 db    0
.eh_frame:00000000000182EB                 db    0
.eh_frame:00000000000182EC                 db  94h
.eh_frame:00000000000182ED                 db  81h
.eh_frame:00000000000182EE                 db 0FFh
.eh_frame:00000000000182EF                 db 0FFh
.eh_frame:00000000000182F0                 db  5Dh ; ]
.eh_frame:00000000000182F1                 db    2
.eh_frame:00000000000182F2                 db    0
.eh_frame:00000000000182F3                 db    0
.eh_frame:00000000000182F4                 db    0
.eh_frame:00000000000182F5                 db  42h ; B
.eh_frame:00000000000182F6                 db  0Eh
.eh_frame:00000000000182F7                 db  10h
.eh_frame:00000000000182F8                 db  8Eh
.eh_frame:00000000000182F9                 db    2
.eh_frame:00000000000182FA                 db  42h ; B
.eh_frame:00000000000182FB                 db  0Eh
.eh_frame:00000000000182FC                 db  18h
.eh_frame:00000000000182FD                 db  8Dh
.eh_frame:00000000000182FE                 db    3
.eh_frame:00000000000182FF                 db  45h ; E
.eh_frame:0000000000018300                 db  0Eh
.eh_frame:0000000000018301                 db  20h
.eh_frame:0000000000018302                 db  8Ch
.eh_frame:0000000000018303                 db    4
.eh_frame:0000000000018304                 db  41h ; A
.eh_frame:0000000000018305                 db  0Eh
.eh_frame:0000000000018306                 db  28h ; (
.eh_frame:0000000000018307                 db  86h
.eh_frame:0000000000018308                 db    5
.eh_frame:0000000000018309                 db  44h ; D
.eh_frame:000000000001830A                 db  0Eh
.eh_frame:000000000001830B                 db  30h ; 0
.eh_frame:000000000001830C                 db  83h
.eh_frame:000000000001830D                 db    6
.eh_frame:000000000001830E                 db  4Ah ; J
.eh_frame:000000000001830F                 db  0Eh
.eh_frame:0000000000018310                 db  50h ; P
.eh_frame:0000000000018311                 db    2
.eh_frame:0000000000018312                 db  61h ; a
.eh_frame:0000000000018313                 db  0Ah
.eh_frame:0000000000018314                 db  0Eh
.eh_frame:0000000000018315                 db  30h ; 0
.eh_frame:0000000000018316                 db  41h ; A
.eh_frame:0000000000018317                 db  0Eh
.eh_frame:0000000000018318                 db  28h ; (
.eh_frame:0000000000018319                 db  41h ; A
.eh_frame:000000000001831A                 db  0Eh
.eh_frame:000000000001831B                 db  20h
.eh_frame:000000000001831C                 db  42h ; B
.eh_frame:000000000001831D                 db  0Eh
.eh_frame:000000000001831E                 db  18h
.eh_frame:000000000001831F                 db  42h ; B
.eh_frame:0000000000018320                 db  0Eh
.eh_frame:0000000000018321                 db  10h
.eh_frame:0000000000018322                 db  42h ; B
.eh_frame:0000000000018323                 db  0Eh
.eh_frame:0000000000018324                 db    8
.eh_frame:0000000000018325                 db  47h ; G
.eh_frame:0000000000018326                 db  0Bh
.eh_frame:0000000000018327                 db    0
.eh_frame:0000000000018328                 db  48h ; H
.eh_frame:0000000000018329                 db    0
.eh_frame:000000000001832A                 db    0
.eh_frame:000000000001832B                 db    0
.eh_frame:000000000001832C                 db 0C4h
.eh_frame:000000000001832D                 db  1Ch
.eh_frame:000000000001832E                 db    0
.eh_frame:000000000001832F                 db    0
.eh_frame:0000000000018330                 db 0B0h
.eh_frame:0000000000018331                 db  83h
.eh_frame:0000000000018332                 db 0FFh
.eh_frame:0000000000018333                 db 0FFh
.eh_frame:0000000000018334                 db 0FDh
.eh_frame:0000000000018335                 db    6
.eh_frame:0000000000018336                 db    0
.eh_frame:0000000000018337                 db    0
.eh_frame:0000000000018338                 db    0
.eh_frame:0000000000018339                 db  42h ; B
.eh_frame:000000000001833A                 db  0Eh
.eh_frame:000000000001833B                 db  10h
.eh_frame:000000000001833C                 db  8Fh
.eh_frame:000000000001833D                 db    2
.eh_frame:000000000001833E                 db  42h ; B
.eh_frame:000000000001833F                 db  0Eh
.eh_frame:0000000000018340                 db  18h
.eh_frame:0000000000018341                 db  8Eh
.eh_frame:0000000000018342                 db    3
.eh_frame:0000000000018343                 db  42h ; B
.eh_frame:0000000000018344                 db  0Eh
.eh_frame:0000000000018345                 db  20h
.eh_frame:0000000000018346                 db  8Dh
.eh_frame:0000000000018347                 db    4
.eh_frame:0000000000018348                 db  42h ; B
.eh_frame:0000000000018349                 db  0Eh
.eh_frame:000000000001834A                 db  28h ; (
.eh_frame:000000000001834B                 db  8Ch
.eh_frame:000000000001834C                 db    5
.eh_frame:000000000001834D                 db  41h ; A
.eh_frame:000000000001834E                 db  0Eh
.eh_frame:000000000001834F                 db  30h ; 0
.eh_frame:0000000000018350                 db  86h
.eh_frame:0000000000018351                 db    6
.eh_frame:0000000000018352                 db  41h ; A
.eh_frame:0000000000018353                 db  0Eh
.eh_frame:0000000000018354                 db  38h ; 8
.eh_frame:0000000000018355                 db  83h
.eh_frame:0000000000018356                 db    7
.eh_frame:0000000000018357                 db  47h ; G
.eh_frame:0000000000018358                 db  0Eh
.eh_frame:0000000000018359                 db  70h ; p
.eh_frame:000000000001835A                 db    2
.eh_frame:000000000001835B                 db 0CBh
.eh_frame:000000000001835C                 db  0Ah
.eh_frame:000000000001835D                 db  0Eh
.eh_frame:000000000001835E                 db  38h ; 8
.eh_frame:000000000001835F                 db  41h ; A
.eh_frame:0000000000018360                 db  0Eh
.eh_frame:0000000000018361                 db  30h ; 0
.eh_frame:0000000000018362                 db  41h ; A
.eh_frame:0000000000018363                 db  0Eh
.eh_frame:0000000000018364                 db  28h ; (
.eh_frame:0000000000018365                 db  42h ; B
.eh_frame:0000000000018366                 db  0Eh
.eh_frame:0000000000018367                 db  20h
.eh_frame:0000000000018368                 db  42h ; B
.eh_frame:0000000000018369                 db  0Eh
.eh_frame:000000000001836A                 db  18h
.eh_frame:000000000001836B                 db  42h ; B
.eh_frame:000000000001836C                 db  0Eh
.eh_frame:000000000001836D                 db  10h
.eh_frame:000000000001836E                 db  42h ; B
.eh_frame:000000000001836F                 db  0Eh
.eh_frame:0000000000018370                 db    8
.eh_frame:0000000000018371                 db  4Ah ; J
.eh_frame:0000000000018372                 db  0Bh
.eh_frame:0000000000018373                 db    0
.eh_frame:0000000000018374                 db  3Ch ; <
.eh_frame:0000000000018375                 db    0
.eh_frame:0000000000018376                 db    0
.eh_frame:0000000000018377                 db    0
.eh_frame:0000000000018378                 db  10h
.eh_frame:0000000000018379                 db  1Dh
.eh_frame:000000000001837A                 db    0
.eh_frame:000000000001837B                 db    0
.eh_frame:000000000001837C                 db  64h ; d
.eh_frame:000000000001837D                 db  8Ah
.eh_frame:000000000001837E                 db 0FFh
.eh_frame:000000000001837F                 db 0FFh
.eh_frame:0000000000018380                 db 0B6h
.eh_frame:0000000000018381                 db    0
.eh_frame:0000000000018382                 db    0
.eh_frame:0000000000018383                 db    0
.eh_frame:0000000000018384                 db    0
.eh_frame:0000000000018385                 db  42h ; B
.eh_frame:0000000000018386                 db  0Eh
.eh_frame:0000000000018387                 db  10h
.eh_frame:0000000000018388                 db  8Eh
.eh_frame:0000000000018389                 db    2
.eh_frame:000000000001838A                 db  45h ; E
.eh_frame:000000000001838B                 db  0Eh
.eh_frame:000000000001838C                 db  18h
.eh_frame:000000000001838D                 db  8Dh
.eh_frame:000000000001838E                 db    3
.eh_frame:000000000001838F                 db  45h ; E
.eh_frame:0000000000018390                 db  0Eh
.eh_frame:0000000000018391                 db  20h
.eh_frame:0000000000018392                 db  8Ch
.eh_frame:0000000000018393                 db    4
.eh_frame:0000000000018394                 db  48h ; H
.eh_frame:0000000000018395                 db  0Eh
.eh_frame:0000000000018396                 db  28h ; (
.eh_frame:0000000000018397                 db  86h
.eh_frame:0000000000018398                 db    5
.eh_frame:0000000000018399                 db  44h ; D
.eh_frame:000000000001839A                 db  0Eh
.eh_frame:000000000001839B                 db  30h ; 0
.eh_frame:000000000001839C                 db  83h
.eh_frame:000000000001839D                 db    6
.eh_frame:000000000001839E                 db    2
.eh_frame:000000000001839F                 db  83h
.eh_frame:00000000000183A0                 db  0Ah
.eh_frame:00000000000183A1                 db  0Eh
.eh_frame:00000000000183A2                 db  28h ; (
.eh_frame:00000000000183A3                 db  41h ; A
.eh_frame:00000000000183A4                 db  0Eh
.eh_frame:00000000000183A5                 db  20h
.eh_frame:00000000000183A6                 db  42h ; B
.eh_frame:00000000000183A7                 db  0Eh
.eh_frame:00000000000183A8                 db  18h
.eh_frame:00000000000183A9                 db  42h ; B
.eh_frame:00000000000183AA                 db  0Eh
.eh_frame:00000000000183AB                 db  10h
.eh_frame:00000000000183AC                 db  42h ; B
.eh_frame:00000000000183AD                 db  0Eh
.eh_frame:00000000000183AE                 db    8
.eh_frame:00000000000183AF                 db  46h ; F
.eh_frame:00000000000183B0                 db  0Bh
.eh_frame:00000000000183B1                 db    0
.eh_frame:00000000000183B2                 db    0
.eh_frame:00000000000183B3                 db    0
.eh_frame:00000000000183B4                 db  5Ch ; \
.eh_frame:00000000000183B5                 db    0
.eh_frame:00000000000183B6                 db    0
.eh_frame:00000000000183B7                 db    0
.eh_frame:00000000000183B8                 db  50h ; P
.eh_frame:00000000000183B9                 db  1Dh
.eh_frame:00000000000183BA                 db    0
.eh_frame:00000000000183BB                 db    0
.eh_frame:00000000000183BC                 db 0E4h
.eh_frame:00000000000183BD                 db  8Ah
.eh_frame:00000000000183BE                 db 0FFh
.eh_frame:00000000000183BF                 db 0FFh
.eh_frame:00000000000183C0                 db 0D3h
.eh_frame:00000000000183C1                 db  14h
.eh_frame:00000000000183C2                 db    0
.eh_frame:00000000000183C3                 db    0
.eh_frame:00000000000183C4                 db    0
.eh_frame:00000000000183C5                 db  42h ; B
.eh_frame:00000000000183C6                 db  0Eh
.eh_frame:00000000000183C7                 db  10h
.eh_frame:00000000000183C8                 db  8Fh
.eh_frame:00000000000183C9                 db    2
.eh_frame:00000000000183CA                 db  42h ; B
.eh_frame:00000000000183CB                 db  0Eh
.eh_frame:00000000000183CC                 db  18h
.eh_frame:00000000000183CD                 db  8Eh
.eh_frame:00000000000183CE                 db    3
.eh_frame:00000000000183CF                 db  42h ; B
.eh_frame:00000000000183D0                 db  0Eh
.eh_frame:00000000000183D1                 db  20h
.eh_frame:00000000000183D2                 db  8Dh
.eh_frame:00000000000183D3                 db    4
.eh_frame:00000000000183D4                 db  42h ; B
.eh_frame:00000000000183D5                 db  0Eh
.eh_frame:00000000000183D6                 db  28h ; (
.eh_frame:00000000000183D7                 db  8Ch
.eh_frame:00000000000183D8                 db    5
.eh_frame:00000000000183D9                 db  41h ; A
.eh_frame:00000000000183DA                 db  0Eh
.eh_frame:00000000000183DB                 db  30h ; 0
.eh_frame:00000000000183DC                 db  86h
.eh_frame:00000000000183DD                 db    6
.eh_frame:00000000000183DE                 db  41h ; A
.eh_frame:00000000000183DF                 db  0Eh
.eh_frame:00000000000183E0                 db  38h ; 8
.eh_frame:00000000000183E1                 db  83h
.eh_frame:00000000000183E2                 db    7
.eh_frame:00000000000183E3                 db  47h ; G
.eh_frame:00000000000183E4                 db  0Eh
.eh_frame:00000000000183E5                 db 0E0h
.eh_frame:00000000000183E6                 db    2
.eh_frame:00000000000183E7                 db    3
.eh_frame:00000000000183E8                 db  22h ; "
.eh_frame:00000000000183E9                 db    1
.eh_frame:00000000000183EA                 db  0Ah
.eh_frame:00000000000183EB                 db  0Eh
.eh_frame:00000000000183EC                 db  38h ; 8
.eh_frame:00000000000183ED                 db  41h ; A
.eh_frame:00000000000183EE                 db  0Eh
.eh_frame:00000000000183EF                 db  30h ; 0
.eh_frame:00000000000183F0                 db  41h ; A
.eh_frame:00000000000183F1                 db  0Eh
.eh_frame:00000000000183F2                 db  28h ; (
.eh_frame:00000000000183F3                 db  42h ; B
.eh_frame:00000000000183F4                 db  0Eh
.eh_frame:00000000000183F5                 db  20h
.eh_frame:00000000000183F6                 db  42h ; B
.eh_frame:00000000000183F7                 db  0Eh
.eh_frame:00000000000183F8                 db  18h
.eh_frame:00000000000183F9                 db  42h ; B
.eh_frame:00000000000183FA                 db  0Eh
.eh_frame:00000000000183FB                 db  10h
.eh_frame:00000000000183FC                 db  42h ; B
.eh_frame:00000000000183FD                 db  0Eh
.eh_frame:00000000000183FE                 db    8
.eh_frame:00000000000183FF                 db  41h ; A
.eh_frame:0000000000018400                 db  0Bh
.eh_frame:0000000000018401                 db    3
.eh_frame:0000000000018402                 db 0BFh
.eh_frame:0000000000018403                 db  0Bh
.eh_frame:0000000000018404                 db  0Eh
.eh_frame:0000000000018405                 db 0E8h
.eh_frame:0000000000018406                 db    2
.eh_frame:0000000000018407                 db  4Ch ; L
.eh_frame:0000000000018408                 db  0Eh
.eh_frame:0000000000018409                 db 0F0h
.eh_frame:000000000001840A                 db    2
.eh_frame:000000000001840B                 db  64h ; d
.eh_frame:000000000001840C                 db  0Eh
.eh_frame:000000000001840D                 db 0E8h
.eh_frame:000000000001840E                 db    2
.eh_frame:000000000001840F                 db  42h ; B
.eh_frame:0000000000018410                 db  0Eh
.eh_frame:0000000000018411                 db 0E0h
.eh_frame:0000000000018412                 db    2
.eh_frame:0000000000018413                 db    0
.eh_frame:0000000000018414                 db  48h ; H
.eh_frame:0000000000018415                 db    0
.eh_frame:0000000000018416                 db    0
.eh_frame:0000000000018417                 db    0
.eh_frame:0000000000018418                 db 0B0h
.eh_frame:0000000000018419                 db  1Dh
.eh_frame:000000000001841A                 db    0
.eh_frame:000000000001841B                 db    0
.eh_frame:000000000001841C                 db  64h ; d
.eh_frame:000000000001841D                 db  9Fh
.eh_frame:000000000001841E                 db 0FFh
.eh_frame:000000000001841F                 db 0FFh
.eh_frame:0000000000018420                 db  82h
.eh_frame:0000000000018421                 db    1
.eh_frame:0000000000018422                 db    0
.eh_frame:0000000000018423                 db    0
.eh_frame:0000000000018424                 db    0
.eh_frame:0000000000018425                 db  42h ; B
.eh_frame:0000000000018426                 db  0Eh
.eh_frame:0000000000018427                 db  10h
.eh_frame:0000000000018428                 db  8Fh
.eh_frame:0000000000018429                 db    2
.eh_frame:000000000001842A                 db  42h ; B
.eh_frame:000000000001842B                 db  0Eh
.eh_frame:000000000001842C                 db  18h
.eh_frame:000000000001842D                 db  8Eh
.eh_frame:000000000001842E                 db    3
.eh_frame:000000000001842F                 db  45h ; E
.eh_frame:0000000000018430                 db  0Eh
.eh_frame:0000000000018431                 db  20h
.eh_frame:0000000000018432                 db  8Dh
.eh_frame:0000000000018433                 db    4
.eh_frame:0000000000018434                 db  42h ; B
.eh_frame:0000000000018435                 db  0Eh
.eh_frame:0000000000018436                 db  28h ; (
.eh_frame:0000000000018437                 db  8Ch
.eh_frame:0000000000018438                 db    5
.eh_frame:0000000000018439                 db  44h ; D
.eh_frame:000000000001843A                 db  0Eh
.eh_frame:000000000001843B                 db  30h ; 0
.eh_frame:000000000001843C                 db  86h
.eh_frame:000000000001843D                 db    6
.eh_frame:000000000001843E                 db  41h ; A
.eh_frame:000000000001843F                 db  0Eh
.eh_frame:0000000000018440                 db  38h ; 8
.eh_frame:0000000000018441                 db  83h
.eh_frame:0000000000018442                 db    7
.eh_frame:0000000000018443                 db  4Dh ; M
.eh_frame:0000000000018444                 db  0Eh
.eh_frame:0000000000018445                 db  80h
.eh_frame:0000000000018446                 db    1
.eh_frame:0000000000018447                 db    2
.eh_frame:0000000000018448                 db 0FAh
.eh_frame:0000000000018449                 db  0Ah
.eh_frame:000000000001844A                 db  0Eh
.eh_frame:000000000001844B                 db  38h ; 8
.eh_frame:000000000001844C                 db  41h ; A
.eh_frame:000000000001844D                 db  0Eh
.eh_frame:000000000001844E                 db  30h ; 0
.eh_frame:000000000001844F                 db  41h ; A
.eh_frame:0000000000018450                 db  0Eh
.eh_frame:0000000000018451                 db  28h ; (
.eh_frame:0000000000018452                 db  42h ; B
.eh_frame:0000000000018453                 db  0Eh
.eh_frame:0000000000018454                 db  20h
.eh_frame:0000000000018455                 db  42h ; B
.eh_frame:0000000000018456                 db  0Eh
.eh_frame:0000000000018457                 db  18h
.eh_frame:0000000000018458                 db  42h ; B
.eh_frame:0000000000018459                 db  0Eh
.eh_frame:000000000001845A                 db  10h
.eh_frame:000000000001845B                 db  42h ; B
.eh_frame:000000000001845C                 db  0Eh
.eh_frame:000000000001845D                 db    8
.eh_frame:000000000001845E                 db  47h ; G
.eh_frame:000000000001845F                 db  0Bh
.eh_frame:0000000000018460                 db  4Ch ; L
.eh_frame:0000000000018461                 db    0
.eh_frame:0000000000018462                 db    0
.eh_frame:0000000000018463                 db    0
.eh_frame:0000000000018464                 db 0FCh
.eh_frame:0000000000018465                 db  1Dh
.eh_frame:0000000000018466                 db    0
.eh_frame:0000000000018467                 db    0
.eh_frame:0000000000018468                 db 0A8h
.eh_frame:0000000000018469                 db 0A0h
.eh_frame:000000000001846A                 db 0FFh
.eh_frame:000000000001846B                 db 0FFh
.eh_frame:000000000001846C                 db  7Fh ; 
.eh_frame:000000000001846D                 db    1
.eh_frame:000000000001846E                 db    0
.eh_frame:000000000001846F                 db    0
.eh_frame:0000000000018470                 db    0
.eh_frame:0000000000018471                 db  42h ; B
.eh_frame:0000000000018472                 db  0Eh
.eh_frame:0000000000018473                 db  10h
.eh_frame:0000000000018474                 db  8Fh
.eh_frame:0000000000018475                 db    2
.eh_frame:0000000000018476                 db  42h ; B
.eh_frame:0000000000018477                 db  0Eh
.eh_frame:0000000000018478                 db  18h
.eh_frame:0000000000018479                 db  8Eh
.eh_frame:000000000001847A                 db    3
.eh_frame:000000000001847B                 db  45h ; E
.eh_frame:000000000001847C                 db  0Eh
.eh_frame:000000000001847D                 db  20h
.eh_frame:000000000001847E                 db  8Dh
.eh_frame:000000000001847F                 db    4
.eh_frame:0000000000018480                 db  42h ; B
.eh_frame:0000000000018481                 db  0Eh
.eh_frame:0000000000018482                 db  28h ; (
.eh_frame:0000000000018483                 db  8Ch
.eh_frame:0000000000018484                 db    5
.eh_frame:0000000000018485                 db  44h ; D
.eh_frame:0000000000018486                 db  0Eh
.eh_frame:0000000000018487                 db  30h ; 0
.eh_frame:0000000000018488                 db  86h
.eh_frame:0000000000018489                 db    6
.eh_frame:000000000001848A                 db  41h ; A
.eh_frame:000000000001848B                 db  0Eh
.eh_frame:000000000001848C                 db  38h ; 8
.eh_frame:000000000001848D                 db  83h
.eh_frame:000000000001848E                 db    7
.eh_frame:000000000001848F                 db  4Ah ; J
.eh_frame:0000000000018490                 db  0Eh
.eh_frame:0000000000018491                 db  90h
.eh_frame:0000000000018492                 db    1
.eh_frame:0000000000018493                 db    3
.eh_frame:0000000000018494                 db  45h ; E
.eh_frame:0000000000018495                 db    1
.eh_frame:0000000000018496                 db  0Ah
.eh_frame:0000000000018497                 db  0Eh
.eh_frame:0000000000018498                 db  38h ; 8
.eh_frame:0000000000018499                 db  41h ; A
.eh_frame:000000000001849A                 db  0Eh
.eh_frame:000000000001849B                 db  30h ; 0
.eh_frame:000000000001849C                 db  41h ; A
.eh_frame:000000000001849D                 db  0Eh
.eh_frame:000000000001849E                 db  28h ; (
.eh_frame:000000000001849F                 db  42h ; B
.eh_frame:00000000000184A0                 db  0Eh
.eh_frame:00000000000184A1                 db  20h
.eh_frame:00000000000184A2                 db  42h ; B
.eh_frame:00000000000184A3                 db  0Eh
.eh_frame:00000000000184A4                 db  18h
.eh_frame:00000000000184A5                 db  42h ; B
.eh_frame:00000000000184A6                 db  0Eh
.eh_frame:00000000000184A7                 db  10h
.eh_frame:00000000000184A8                 db  42h ; B
.eh_frame:00000000000184A9                 db  0Eh
.eh_frame:00000000000184AA                 db    8
.eh_frame:00000000000184AB                 db  47h ; G
.eh_frame:00000000000184AC                 db  0Bh
.eh_frame:00000000000184AD                 db    0
.eh_frame:00000000000184AE                 db    0
.eh_frame:00000000000184AF                 db    0
.eh_frame:00000000000184B0                 db  4Ch ; L
.eh_frame:00000000000184B1                 db    0
.eh_frame:00000000000184B2                 db    0
.eh_frame:00000000000184B3                 db    0
.eh_frame:00000000000184B4                 db  4Ch ; L
.eh_frame:00000000000184B5                 db  1Eh
.eh_frame:00000000000184B6                 db    0
.eh_frame:00000000000184B7                 db    0
.eh_frame:00000000000184B8                 db 0D8h
.eh_frame:00000000000184B9                 db 0A1h
.eh_frame:00000000000184BA                 db 0FFh
.eh_frame:00000000000184BB                 db 0FFh
.eh_frame:00000000000184BC                 db 0F5h
.eh_frame:00000000000184BD                 db  10h
.eh_frame:00000000000184BE                 db    0
.eh_frame:00000000000184BF                 db    0
.eh_frame:00000000000184C0                 db    0
.eh_frame:00000000000184C1                 db  42h ; B
.eh_frame:00000000000184C2                 db  0Eh
.eh_frame:00000000000184C3                 db  10h
.eh_frame:00000000000184C4                 db  8Fh
.eh_frame:00000000000184C5                 db    2
.eh_frame:00000000000184C6                 db  42h ; B
.eh_frame:00000000000184C7                 db  0Eh
.eh_frame:00000000000184C8                 db  18h
.eh_frame:00000000000184C9                 db  8Eh
.eh_frame:00000000000184CA                 db    3
.eh_frame:00000000000184CB                 db  42h ; B
.eh_frame:00000000000184CC                 db  0Eh
.eh_frame:00000000000184CD                 db  20h
.eh_frame:00000000000184CE                 db  8Dh
.eh_frame:00000000000184CF                 db    4
.eh_frame:00000000000184D0                 db  42h ; B
.eh_frame:00000000000184D1                 db  0Eh
.eh_frame:00000000000184D2                 db  28h ; (
.eh_frame:00000000000184D3                 db  8Ch
.eh_frame:00000000000184D4                 db    5
.eh_frame:00000000000184D5                 db  41h ; A
.eh_frame:00000000000184D6                 db  0Eh
.eh_frame:00000000000184D7                 db  30h ; 0
.eh_frame:00000000000184D8                 db  86h
.eh_frame:00000000000184D9                 db    6
.eh_frame:00000000000184DA                 db  41h ; A
.eh_frame:00000000000184DB                 db  0Eh
.eh_frame:00000000000184DC                 db  38h ; 8
.eh_frame:00000000000184DD                 db  83h
.eh_frame:00000000000184DE                 db    7
.eh_frame:00000000000184DF                 db  47h ; G
.eh_frame:00000000000184E0                 db  0Eh
.eh_frame:00000000000184E1                 db 0E0h
.eh_frame:00000000000184E2                 db    2
.eh_frame:00000000000184E3                 db    3
.eh_frame:00000000000184E4                 db 0A9h
.eh_frame:00000000000184E5                 db    3
.eh_frame:00000000000184E6                 db  0Ah
.eh_frame:00000000000184E7                 db  0Eh
.eh_frame:00000000000184E8                 db  38h ; 8
.eh_frame:00000000000184E9                 db  41h ; A
.eh_frame:00000000000184EA                 db  0Eh
.eh_frame:00000000000184EB                 db  30h ; 0
.eh_frame:00000000000184EC                 db  41h ; A
.eh_frame:00000000000184ED                 db  0Eh
.eh_frame:00000000000184EE                 db  28h ; (
.eh_frame:00000000000184EF                 db  42h ; B
.eh_frame:00000000000184F0                 db  0Eh
.eh_frame:00000000000184F1                 db  20h
.eh_frame:00000000000184F2                 db  42h ; B
.eh_frame:00000000000184F3                 db  0Eh
.eh_frame:00000000000184F4                 db  18h
.eh_frame:00000000000184F5                 db  42h ; B
.eh_frame:00000000000184F6                 db  0Eh
.eh_frame:00000000000184F7                 db  10h
.eh_frame:00000000000184F8                 db  42h ; B
.eh_frame:00000000000184F9                 db  0Eh
.eh_frame:00000000000184FA                 db    8
.eh_frame:00000000000184FB                 db  41h ; A
.eh_frame:00000000000184FC                 db  0Bh
.eh_frame:00000000000184FD                 db    0
.eh_frame:00000000000184FE                 db    0
.eh_frame:00000000000184FF                 db    0
.eh_frame:0000000000018500                 db  1Ch
.eh_frame:0000000000018501                 db    0
.eh_frame:0000000000018502                 db    0
.eh_frame:0000000000018503                 db    0
.eh_frame:0000000000018504                 db  9Ch
.eh_frame:0000000000018505                 db  1Eh
.eh_frame:0000000000018506                 db    0
.eh_frame:0000000000018507                 db    0
.eh_frame:0000000000018508                 db  88h
.eh_frame:0000000000018509                 db 0B2h
.eh_frame:000000000001850A                 db 0FFh
.eh_frame:000000000001850B                 db 0FFh
.eh_frame:000000000001850C                 db  6Fh ; o
.eh_frame:000000000001850D                 db    0
.eh_frame:000000000001850E                 db    0
.eh_frame:000000000001850F                 db    0
.eh_frame:0000000000018510                 db    0
.eh_frame:0000000000018511                 db  44h ; D
.eh_frame:0000000000018512                 db  0Eh
.eh_frame:0000000000018513                 db  10h
.eh_frame:0000000000018514                 db    2
.eh_frame:0000000000018515                 db  59h ; Y
.eh_frame:0000000000018516                 db  0Ah
.eh_frame:0000000000018517                 db  0Eh
.eh_frame:0000000000018518                 db    8
.eh_frame:0000000000018519                 db  4Bh ; K
.eh_frame:000000000001851A                 db  0Bh
.eh_frame:000000000001851B                 db  46h ; F
.eh_frame:000000000001851C                 db  0Eh
.eh_frame:000000000001851D                 db    8
.eh_frame:000000000001851E                 db    0
.eh_frame:000000000001851F                 db    0
.eh_frame:0000000000018520                 db  10h
.eh_frame:0000000000018521                 db    0
.eh_frame:0000000000018522                 db    0
.eh_frame:0000000000018523                 db    0
.eh_frame:0000000000018524                 db 0BCh
.eh_frame:0000000000018525                 db  1Eh
.eh_frame:0000000000018526                 db    0
.eh_frame:0000000000018527                 db    0
.eh_frame:0000000000018528                 db 0D8h
.eh_frame:0000000000018529                 db 0B2h
.eh_frame:000000000001852A                 db 0FFh
.eh_frame:000000000001852B                 db 0FFh
.eh_frame:000000000001852C                 db  0Fh
.eh_frame:000000000001852D                 db    0
.eh_frame:000000000001852E                 db    0
.eh_frame:000000000001852F                 db    0
.eh_frame:0000000000018530                 db    0
.eh_frame:0000000000018531                 db    0
.eh_frame:0000000000018532                 db    0
.eh_frame:0000000000018533                 db    0
.eh_frame:0000000000018534                 db  28h ; (
.eh_frame:0000000000018535                 db    0
.eh_frame:0000000000018536                 db    0
.eh_frame:0000000000018537                 db    0
.eh_frame:0000000000018538                 db 0D0h
.eh_frame:0000000000018539                 db  1Eh
.eh_frame:000000000001853A                 db    0
.eh_frame:000000000001853B                 db    0
.eh_frame:000000000001853C                 db 0D4h
.eh_frame:000000000001853D                 db 0B2h
.eh_frame:000000000001853E                 db 0FFh
.eh_frame:000000000001853F                 db 0FFh
.eh_frame:0000000000018540                 db 0C3h
.eh_frame:0000000000018541                 db    0
.eh_frame:0000000000018542                 db    0
.eh_frame:0000000000018543                 db    0
.eh_frame:0000000000018544                 db    0
.eh_frame:0000000000018545                 db  42h ; B
.eh_frame:0000000000018546                 db  0Eh
.eh_frame:0000000000018547                 db  10h
.eh_frame:0000000000018548                 db  8Ch
.eh_frame:0000000000018549                 db    2
.eh_frame:000000000001854A                 db  41h ; A
.eh_frame:000000000001854B                 db  0Eh
.eh_frame:000000000001854C                 db  18h
.eh_frame:000000000001854D                 db  86h
.eh_frame:000000000001854E                 db    3
.eh_frame:000000000001854F                 db  43h ; C
.eh_frame:0000000000018550                 db  0Eh
.eh_frame:0000000000018551                 db  20h
.eh_frame:0000000000018552                 db  83h
.eh_frame:0000000000018553                 db    4
.eh_frame:0000000000018554                 db    2
.eh_frame:0000000000018555                 db 0B9h
.eh_frame:0000000000018556                 db  0Eh
.eh_frame:0000000000018557                 db  18h
.eh_frame:0000000000018558                 db  41h ; A
.eh_frame:0000000000018559                 db  0Eh
.eh_frame:000000000001855A                 db  10h
.eh_frame:000000000001855B                 db  42h ; B
.eh_frame:000000000001855C                 db  0Eh
.eh_frame:000000000001855D                 db    8
.eh_frame:000000000001855E                 db    0
.eh_frame:000000000001855F                 db    0
.eh_frame:0000000000018560                 db  5Ch ; \
.eh_frame:0000000000018561                 db    0
.eh_frame:0000000000018562                 db    0
.eh_frame:0000000000018563                 db    0
.eh_frame:0000000000018564                 db 0FCh
.eh_frame:0000000000018565                 db  1Eh
.eh_frame:0000000000018566                 db    0
.eh_frame:0000000000018567                 db    0
.eh_frame:0000000000018568                 db  78h ; x
.eh_frame:0000000000018569                 db 0B3h
.eh_frame:000000000001856A                 db 0FFh
.eh_frame:000000000001856B                 db 0FFh
.eh_frame:000000000001856C                 db  7Fh ; 
.eh_frame:000000000001856D                 db    4
.eh_frame:000000000001856E                 db    0
.eh_frame:000000000001856F                 db    0
.eh_frame:0000000000018570                 db    0
.eh_frame:0000000000018571                 db  42h ; B
.eh_frame:0000000000018572                 db  0Eh
.eh_frame:0000000000018573                 db  10h
.eh_frame:0000000000018574                 db  8Fh
.eh_frame:0000000000018575                 db    2
.eh_frame:0000000000018576                 db  42h ; B
.eh_frame:0000000000018577                 db  0Eh
.eh_frame:0000000000018578                 db  18h
.eh_frame:0000000000018579                 db  8Eh
.eh_frame:000000000001857A                 db    3
.eh_frame:000000000001857B                 db  45h ; E
.eh_frame:000000000001857C                 db  0Eh
.eh_frame:000000000001857D                 db  20h
.eh_frame:000000000001857E                 db  8Dh
.eh_frame:000000000001857F                 db    4
.eh_frame:0000000000018580                 db  42h ; B
.eh_frame:0000000000018581                 db  0Eh
.eh_frame:0000000000018582                 db  28h ; (
.eh_frame:0000000000018583                 db  8Ch
.eh_frame:0000000000018584                 db    5
.eh_frame:0000000000018585                 db  44h ; D
.eh_frame:0000000000018586                 db  0Eh
.eh_frame:0000000000018587                 db  30h ; 0
.eh_frame:0000000000018588                 db  86h
.eh_frame:0000000000018589                 db    6
.eh_frame:000000000001858A                 db  41h ; A
.eh_frame:000000000001858B                 db  0Eh
.eh_frame:000000000001858C                 db  38h ; 8
.eh_frame:000000000001858D                 db  83h
.eh_frame:000000000001858E                 db    7
.eh_frame:000000000001858F                 db  44h ; D
.eh_frame:0000000000018590                 db  0Eh
.eh_frame:0000000000018591                 db  70h ; p
.eh_frame:0000000000018592                 db    2
.eh_frame:0000000000018593                 db 0D4h
.eh_frame:0000000000018594                 db  0Eh
.eh_frame:0000000000018595                 db  78h ; x
.eh_frame:0000000000018596                 db  4Bh ; K
.eh_frame:0000000000018597                 db  0Eh
.eh_frame:0000000000018598                 db  80h
.eh_frame:0000000000018599                 db    1
.eh_frame:000000000001859A                 db  41h ; A
.eh_frame:000000000001859B                 db  0Eh
.eh_frame:000000000001859C                 db  88h
.eh_frame:000000000001859D                 db    1
.eh_frame:000000000001859E                 db  42h ; B
.eh_frame:000000000001859F                 db  0Eh
.eh_frame:00000000000185A0                 db  90h
.eh_frame:00000000000185A1                 db    1
.eh_frame:00000000000185A2                 db  5Dh ; ]
.eh_frame:00000000000185A3                 db  0Eh
.eh_frame:00000000000185A4                 db  70h ; p
.eh_frame:00000000000185A5                 db  63h ; c
.eh_frame:00000000000185A6                 db  0Ah
.eh_frame:00000000000185A7                 db  0Eh
.eh_frame:00000000000185A8                 db  38h ; 8
.eh_frame:00000000000185A9                 db  44h ; D
.eh_frame:00000000000185AA                 db  0Eh
.eh_frame:00000000000185AB                 db  30h ; 0
.eh_frame:00000000000185AC                 db  41h ; A
.eh_frame:00000000000185AD                 db  0Eh
.eh_frame:00000000000185AE                 db  28h ; (
.eh_frame:00000000000185AF                 db  42h ; B
.eh_frame:00000000000185B0                 db  0Eh
.eh_frame:00000000000185B1                 db  20h
.eh_frame:00000000000185B2                 db  42h ; B
.eh_frame:00000000000185B3                 db  0Eh
.eh_frame:00000000000185B4                 db  18h
.eh_frame:00000000000185B5                 db  42h ; B
.eh_frame:00000000000185B6                 db  0Eh
.eh_frame:00000000000185B7                 db  10h
.eh_frame:00000000000185B8                 db  42h ; B
.eh_frame:00000000000185B9                 db  0Eh
.eh_frame:00000000000185BA                 db    8
.eh_frame:00000000000185BB                 db  45h ; E
.eh_frame:00000000000185BC                 db  0Bh
.eh_frame:00000000000185BD                 db    0
.eh_frame:00000000000185BE                 db    0
.eh_frame:00000000000185BF                 db    0
.eh_frame:00000000000185C0                 db  54h ; T
.eh_frame:00000000000185C1                 db    0
.eh_frame:00000000000185C2                 db    0
.eh_frame:00000000000185C3                 db    0
.eh_frame:00000000000185C4                 db  5Ch ; \
.eh_frame:00000000000185C5                 db  1Fh
.eh_frame:00000000000185C6                 db    0
.eh_frame:00000000000185C7                 db    0
.eh_frame:00000000000185C8                 db  98h
.eh_frame:00000000000185C9                 db 0B7h
.eh_frame:00000000000185CA                 db 0FFh
.eh_frame:00000000000185CB                 db 0FFh
.eh_frame:00000000000185CC                 db  1Bh
.eh_frame:00000000000185CD                 db    1
.eh_frame:00000000000185CE                 db    0
.eh_frame:00000000000185CF                 db    0
.eh_frame:00000000000185D0                 db    0
.eh_frame:00000000000185D1                 db  42h ; B
.eh_frame:00000000000185D2                 db  0Eh
.eh_frame:00000000000185D3                 db  10h
.eh_frame:00000000000185D4                 db  8Fh
.eh_frame:00000000000185D5                 db    2
.eh_frame:00000000000185D6                 db  42h ; B
.eh_frame:00000000000185D7                 db  0Eh
.eh_frame:00000000000185D8                 db  18h
.eh_frame:00000000000185D9                 db  8Eh
.eh_frame:00000000000185DA                 db    3
.eh_frame:00000000000185DB                 db  42h ; B
.eh_frame:00000000000185DC                 db  0Eh
.eh_frame:00000000000185DD                 db  20h
.eh_frame:00000000000185DE                 db  8Dh
.eh_frame:00000000000185DF                 db    4
.eh_frame:00000000000185E0                 db  42h ; B
.eh_frame:00000000000185E1                 db  0Eh
.eh_frame:00000000000185E2                 db  28h ; (
.eh_frame:00000000000185E3                 db  8Ch
.eh_frame:00000000000185E4                 db    5
.eh_frame:00000000000185E5                 db  44h ; D
.eh_frame:00000000000185E6                 db  0Eh
.eh_frame:00000000000185E7                 db  30h ; 0
.eh_frame:00000000000185E8                 db  86h
.eh_frame:00000000000185E9                 db    6
.eh_frame:00000000000185EA                 db  41h ; A
.eh_frame:00000000000185EB                 db  0Eh
.eh_frame:00000000000185EC                 db  38h ; 8
.eh_frame:00000000000185ED                 db  83h
.eh_frame:00000000000185EE                 db    7
.eh_frame:00000000000185EF                 db  4Dh ; M
.eh_frame:00000000000185F0                 db  0Eh
.eh_frame:00000000000185F1                 db  60h ; `
.eh_frame:00000000000185F2                 db    2
.eh_frame:00000000000185F3                 db  5Ah ; Z
.eh_frame:00000000000185F4                 db  0Eh
.eh_frame:00000000000185F5                 db  68h ; h
.eh_frame:00000000000185F6                 db  44h ; D
.eh_frame:00000000000185F7                 db  0Eh
.eh_frame:00000000000185F8                 db  70h ; p
.eh_frame:00000000000185F9                 db  61h ; a
.eh_frame:00000000000185FA                 db  0Eh
.eh_frame:00000000000185FB                 db  68h ; h
.eh_frame:00000000000185FC                 db  41h ; A
.eh_frame:00000000000185FD                 db  0Eh
.eh_frame:00000000000185FE                 db  60h ; `
.eh_frame:00000000000185FF                 db  44h ; D
.eh_frame:0000000000018600                 db  0Ah
.eh_frame:0000000000018601                 db  0Eh
.eh_frame:0000000000018602                 db  38h ; 8
.eh_frame:0000000000018603                 db  44h ; D
.eh_frame:0000000000018604                 db  0Eh
.eh_frame:0000000000018605                 db  30h ; 0
.eh_frame:0000000000018606                 db  41h ; A
.eh_frame:0000000000018607                 db  0Eh
.eh_frame:0000000000018608                 db  28h ; (
.eh_frame:0000000000018609                 db  42h ; B
.eh_frame:000000000001860A                 db  0Eh
.eh_frame:000000000001860B                 db  20h
.eh_frame:000000000001860C                 db  42h ; B
.eh_frame:000000000001860D                 db  0Eh
.eh_frame:000000000001860E                 db  18h
.eh_frame:000000000001860F                 db  42h ; B
.eh_frame:0000000000018610                 db  0Eh
.eh_frame:0000000000018611                 db  10h
.eh_frame:0000000000018612                 db  42h ; B
.eh_frame:0000000000018613                 db  0Eh
.eh_frame:0000000000018614                 db    8
.eh_frame:0000000000018615                 db  45h ; E
.eh_frame:0000000000018616                 db  0Bh
.eh_frame:0000000000018617                 db    0
.eh_frame:0000000000018618                 db  48h ; H
.eh_frame:0000000000018619                 db    0
.eh_frame:000000000001861A                 db    0
.eh_frame:000000000001861B                 db    0
.eh_frame:000000000001861C                 db 0B4h
.eh_frame:000000000001861D                 db  1Fh
.eh_frame:000000000001861E                 db    0
.eh_frame:000000000001861F                 db    0
.eh_frame:0000000000018620                 db  60h ; `
.eh_frame:0000000000018621                 db 0B8h
.eh_frame:0000000000018622                 db 0FFh
.eh_frame:0000000000018623                 db 0FFh
.eh_frame:0000000000018624                 db  10h
.eh_frame:0000000000018625                 db    1
.eh_frame:0000000000018626                 db    0
.eh_frame:0000000000018627                 db    0
.eh_frame:0000000000018628                 db    0
.eh_frame:0000000000018629                 db  44h ; D
.eh_frame:000000000001862A                 db  0Eh
.eh_frame:000000000001862B                 db  10h
.eh_frame:000000000001862C                 db  8Eh
.eh_frame:000000000001862D                 db    2
.eh_frame:000000000001862E                 db  42h ; B
.eh_frame:000000000001862F                 db  0Eh
.eh_frame:0000000000018630                 db  18h
.eh_frame:0000000000018631                 db  8Dh
.eh_frame:0000000000018632                 db    3
.eh_frame:0000000000018633                 db  45h ; E
.eh_frame:0000000000018634                 db  0Eh
.eh_frame:0000000000018635                 db  20h
.eh_frame:0000000000018636                 db  8Ch
.eh_frame:0000000000018637                 db    4
.eh_frame:0000000000018638                 db  41h ; A
.eh_frame:0000000000018639                 db  0Eh
.eh_frame:000000000001863A                 db  28h ; (
.eh_frame:000000000001863B                 db  86h
.eh_frame:000000000001863C                 db    5
.eh_frame:000000000001863D                 db  44h ; D
.eh_frame:000000000001863E                 db  0Eh
.eh_frame:000000000001863F                 db  30h ; 0
.eh_frame:0000000000018640                 db  83h
.eh_frame:0000000000018641                 db    6
.eh_frame:0000000000018642                 db    2
.eh_frame:0000000000018643                 db 0ADh
.eh_frame:0000000000018644                 db  0Ah
.eh_frame:0000000000018645                 db  0Eh
.eh_frame:0000000000018646                 db  28h ; (
.eh_frame:0000000000018647                 db  43h ; C
.eh_frame:0000000000018648                 db  0Eh
.eh_frame:0000000000018649                 db  20h
.eh_frame:000000000001864A                 db  42h ; B
.eh_frame:000000000001864B                 db  0Eh
.eh_frame:000000000001864C                 db  18h
.eh_frame:000000000001864D                 db  42h ; B
.eh_frame:000000000001864E                 db  0Eh
.eh_frame:000000000001864F                 db  10h
.eh_frame:0000000000018650                 db  42h ; B
.eh_frame:0000000000018651                 db  0Eh
.eh_frame:0000000000018652                 db    8
.eh_frame:0000000000018653                 db  4Ah ; J
.eh_frame:0000000000018654                 db  0Bh
.eh_frame:0000000000018655                 db  76h ; v
.eh_frame:0000000000018656                 db  0Eh
.eh_frame:0000000000018657                 db  28h ; (
.eh_frame:0000000000018658                 db  43h ; C
.eh_frame:0000000000018659                 db  0Eh
.eh_frame:000000000001865A                 db  20h
.eh_frame:000000000001865B                 db  42h ; B
.eh_frame:000000000001865C                 db  0Eh
.eh_frame:000000000001865D                 db  18h
.eh_frame:000000000001865E                 db  42h ; B
.eh_frame:000000000001865F                 db  0Eh
.eh_frame:0000000000018660                 db  10h
.eh_frame:0000000000018661                 db  42h ; B
.eh_frame:0000000000018662                 db  0Eh
.eh_frame:0000000000018663                 db    8
.eh_frame:0000000000018664                 db  38h ; 8
.eh_frame:0000000000018665                 db    0
.eh_frame:0000000000018666                 db    0
.eh_frame:0000000000018667                 db    0
.eh_frame:0000000000018668                 db    0
.eh_frame:0000000000018669                 db  20h
.eh_frame:000000000001866A                 db    0
.eh_frame:000000000001866B                 db    0
.eh_frame:000000000001866C                 db  24h ; $
.eh_frame:000000000001866D                 db 0B9h
.eh_frame:000000000001866E                 db 0FFh
.eh_frame:000000000001866F                 db 0FFh
.eh_frame:0000000000018670                 db  85h
.eh_frame:0000000000018671                 db    0
.eh_frame:0000000000018672                 db    0
.eh_frame:0000000000018673                 db    0
.eh_frame:0000000000018674                 db    0
.eh_frame:0000000000018675                 db  42h ; B
.eh_frame:0000000000018676                 db  0Eh
.eh_frame:0000000000018677                 db  10h
.eh_frame:0000000000018678                 db  8Dh
.eh_frame:0000000000018679                 db    2
.eh_frame:000000000001867A                 db  42h ; B
.eh_frame:000000000001867B                 db  0Eh
.eh_frame:000000000001867C                 db  18h
.eh_frame:000000000001867D                 db  8Ch
.eh_frame:000000000001867E                 db    3
.eh_frame:000000000001867F                 db  41h ; A
.eh_frame:0000000000018680                 db  0Eh
.eh_frame:0000000000018681                 db  20h
.eh_frame:0000000000018682                 db  86h
.eh_frame:0000000000018683                 db    4
.eh_frame:0000000000018684                 db  41h ; A
.eh_frame:0000000000018685                 db  0Eh
.eh_frame:0000000000018686                 db  28h ; (
.eh_frame:0000000000018687                 db  83h
.eh_frame:0000000000018688                 db    5
.eh_frame:0000000000018689                 db  44h ; D
.eh_frame:000000000001868A                 db  0Eh
.eh_frame:000000000001868B                 db  30h ; 0
.eh_frame:000000000001868C                 db    2
.eh_frame:000000000001868D                 db  57h ; W
.eh_frame:000000000001868E                 db  0Ah
.eh_frame:000000000001868F                 db  0Eh
.eh_frame:0000000000018690                 db  28h ; (
.eh_frame:0000000000018691                 db  44h ; D
.eh_frame:0000000000018692                 db  0Eh
.eh_frame:0000000000018693                 db  20h
.eh_frame:0000000000018694                 db  41h ; A
.eh_frame:0000000000018695                 db  0Eh
.eh_frame:0000000000018696                 db  18h
.eh_frame:0000000000018697                 db  42h ; B
.eh_frame:0000000000018698                 db  0Eh
.eh_frame:0000000000018699                 db  10h
.eh_frame:000000000001869A                 db  42h ; B
.eh_frame:000000000001869B                 db  0Eh
.eh_frame:000000000001869C                 db    8
.eh_frame:000000000001869D                 db  46h ; F
.eh_frame:000000000001869E                 db  0Bh
.eh_frame:000000000001869F                 db    0
.eh_frame:00000000000186A0                 db  18h
.eh_frame:00000000000186A1                 db    0
.eh_frame:00000000000186A2                 db    0
.eh_frame:00000000000186A3                 db    0
.eh_frame:00000000000186A4                 db  3Ch ; <
.eh_frame:00000000000186A5                 db  20h
.eh_frame:00000000000186A6                 db    0
.eh_frame:00000000000186A7                 db    0
.eh_frame:00000000000186A8                 db  78h ; x
.eh_frame:00000000000186A9                 db 0B9h
.eh_frame:00000000000186AA                 db 0FFh
.eh_frame:00000000000186AB                 db 0FFh
.eh_frame:00000000000186AC                 db  44h ; D
.eh_frame:00000000000186AD                 db    0
.eh_frame:00000000000186AE                 db    0
.eh_frame:00000000000186AF                 db    0
.eh_frame:00000000000186B0                 db    0
.eh_frame:00000000000186B1                 db  41h ; A
.eh_frame:00000000000186B2                 db  0Eh
.eh_frame:00000000000186B3                 db  10h
.eh_frame:00000000000186B4                 db  83h
.eh_frame:00000000000186B5                 db    2
.eh_frame:00000000000186B6                 db    2
.eh_frame:00000000000186B7                 db  42h ; B
.eh_frame:00000000000186B8                 db  0Eh
.eh_frame:00000000000186B9                 db    8
.eh_frame:00000000000186BA                 db    0
.eh_frame:00000000000186BB                 db    0
.eh_frame:00000000000186BC                 db  58h ; X
.eh_frame:00000000000186BD                 db    0
.eh_frame:00000000000186BE                 db    0
.eh_frame:00000000000186BF                 db    0
.eh_frame:00000000000186C0                 db  58h ; X
.eh_frame:00000000000186C1                 db  20h
.eh_frame:00000000000186C2                 db    0
.eh_frame:00000000000186C3                 db    0
.eh_frame:00000000000186C4                 db 0ACh
.eh_frame:00000000000186C5                 db 0B9h
.eh_frame:00000000000186C6                 db 0FFh
.eh_frame:00000000000186C7                 db 0FFh
.eh_frame:00000000000186C8                 db  9Eh
.eh_frame:00000000000186C9                 db    0
.eh_frame:00000000000186CA                 db    0
.eh_frame:00000000000186CB                 db    0
.eh_frame:00000000000186CC                 db    0
.eh_frame:00000000000186CD                 db  4Fh ; O
.eh_frame:00000000000186CE                 db  0Eh
.eh_frame:00000000000186CF                 db  10h
.eh_frame:00000000000186D0                 db  8Dh
.eh_frame:00000000000186D1                 db    2
.eh_frame:00000000000186D2                 db  42h ; B
.eh_frame:00000000000186D3                 db  0Eh
.eh_frame:00000000000186D4                 db  18h
.eh_frame:00000000000186D5                 db  8Ch
.eh_frame:00000000000186D6                 db    3
.eh_frame:00000000000186D7                 db  44h ; D
.eh_frame:00000000000186D8                 db  0Eh
.eh_frame:00000000000186D9                 db  20h
.eh_frame:00000000000186DA                 db  86h
.eh_frame:00000000000186DB                 db    4
.eh_frame:00000000000186DC                 db  41h ; A
.eh_frame:00000000000186DD                 db  0Eh
.eh_frame:00000000000186DE                 db  28h ; (
.eh_frame:00000000000186DF                 db  83h
.eh_frame:00000000000186E0                 db    5
.eh_frame:00000000000186E1                 db  4Dh ; M
.eh_frame:00000000000186E2                 db  0Eh
.eh_frame:00000000000186E3                 db  40h ; @
.eh_frame:00000000000186E4                 db  67h ; g
.eh_frame:00000000000186E5                 db  0Eh
.eh_frame:00000000000186E6                 db  48h ; H
.eh_frame:00000000000186E7                 db  41h ; A
.eh_frame:00000000000186E8                 db  0Eh
.eh_frame:00000000000186E9                 db  50h ; P
.eh_frame:00000000000186EA                 db  42h ; B
.eh_frame:00000000000186EB                 db  0Eh
.eh_frame:00000000000186EC                 db  58h ; X
.eh_frame:00000000000186ED                 db  42h ; B
.eh_frame:00000000000186EE                 db  0Eh
.eh_frame:00000000000186EF                 db  60h ; `
.eh_frame:00000000000186F0                 db  52h ; R
.eh_frame:00000000000186F1                 db  0Eh
.eh_frame:00000000000186F2                 db  40h ; @
.eh_frame:00000000000186F3                 db  49h ; I
.eh_frame:00000000000186F4                 db  0Ah
.eh_frame:00000000000186F5                 db  0Eh
.eh_frame:00000000000186F6                 db  28h ; (
.eh_frame:00000000000186F7                 db  41h ; A
.eh_frame:00000000000186F8                 db  0Eh
.eh_frame:00000000000186F9                 db  20h
.eh_frame:00000000000186FA                 db  44h ; D
.eh_frame:00000000000186FB                 db  0Eh
.eh_frame:00000000000186FC                 db  18h
.eh_frame:00000000000186FD                 db  42h ; B
.eh_frame:00000000000186FE                 db  0Eh
.eh_frame:00000000000186FF                 db  10h
.eh_frame:0000000000018700                 db  42h ; B
.eh_frame:0000000000018701                 db  0Eh
.eh_frame:0000000000018702                 db    8
.eh_frame:0000000000018703                 db  45h ; E
.eh_frame:0000000000018704                 db  0Bh
.eh_frame:0000000000018705                 db  52h ; R
.eh_frame:0000000000018706                 db  0Eh
.eh_frame:0000000000018707                 db  48h ; H
.eh_frame:0000000000018708                 db  41h ; A
.eh_frame:0000000000018709                 db  0Eh
.eh_frame:000000000001870A                 db  50h ; P
.eh_frame:000000000001870B                 db  42h ; B
.eh_frame:000000000001870C                 db  0Eh
.eh_frame:000000000001870D                 db  58h ; X
.eh_frame:000000000001870E                 db  42h ; B
.eh_frame:000000000001870F                 db  0Eh
.eh_frame:0000000000018710                 db  60h ; `
.eh_frame:0000000000018711                 db  49h ; I
.eh_frame:0000000000018712                 db  0Eh
.eh_frame:0000000000018713                 db    8
.eh_frame:0000000000018714                 db 0C3h
.eh_frame:0000000000018715                 db 0C6h
.eh_frame:0000000000018716                 db 0CCh
.eh_frame:0000000000018717                 db 0CDh
.eh_frame:0000000000018718                 db  1Ch
.eh_frame:0000000000018719                 db    0
.eh_frame:000000000001871A                 db    0
.eh_frame:000000000001871B                 db    0
.eh_frame:000000000001871C                 db 0B4h
.eh_frame:000000000001871D                 db  20h
.eh_frame:000000000001871E                 db    0
.eh_frame:000000000001871F                 db    0
.eh_frame:0000000000018720                 db 0F0h
.eh_frame:0000000000018721                 db 0B9h
.eh_frame:0000000000018722                 db 0FFh
.eh_frame:0000000000018723                 db 0FFh
.eh_frame:0000000000018724                 db  18h
.eh_frame:0000000000018725                 db    0
.eh_frame:0000000000018726                 db    0
.eh_frame:0000000000018727                 db    0
.eh_frame:0000000000018728                 db    0
.eh_frame:0000000000018729                 db  44h ; D
.eh_frame:000000000001872A                 db  0Eh
.eh_frame:000000000001872B                 db  10h
.eh_frame:000000000001872C                 db  45h ; E
.eh_frame:000000000001872D                 db  0Eh
.eh_frame:000000000001872E                 db  18h
.eh_frame:000000000001872F                 db  42h ; B
.eh_frame:0000000000018730                 db  0Eh
.eh_frame:0000000000018731                 db  20h
.eh_frame:0000000000018732                 db  4Ch ; L
.eh_frame:0000000000018733                 db  0Eh
.eh_frame:0000000000018734                 db    8
.eh_frame:0000000000018735                 db    0
.eh_frame:0000000000018736                 db    0
.eh_frame:0000000000018737                 db    0
.eh_frame:0000000000018738                 db  1Ch
.eh_frame:0000000000018739                 db    0
.eh_frame:000000000001873A                 db    0
.eh_frame:000000000001873B                 db    0
.eh_frame:000000000001873C                 db 0D4h
.eh_frame:000000000001873D                 db  20h
.eh_frame:000000000001873E                 db    0
.eh_frame:000000000001873F                 db    0
.eh_frame:0000000000018740                 db 0F0h
.eh_frame:0000000000018741                 db 0B9h
.eh_frame:0000000000018742                 db 0FFh
.eh_frame:0000000000018743                 db 0FFh
.eh_frame:0000000000018744                 db  15h
.eh_frame:0000000000018745                 db    0
.eh_frame:0000000000018746                 db    0
.eh_frame:0000000000018747                 db    0
.eh_frame:0000000000018748                 db    0
.eh_frame:0000000000018749                 db  44h ; D
.eh_frame:000000000001874A                 db  0Eh
.eh_frame:000000000001874B                 db  10h
.eh_frame:000000000001874C                 db  42h ; B
.eh_frame:000000000001874D                 db  0Eh
.eh_frame:000000000001874E                 db  18h
.eh_frame:000000000001874F                 db  42h ; B
.eh_frame:0000000000018750                 db  0Eh
.eh_frame:0000000000018751                 db  20h
.eh_frame:0000000000018752                 db  4Ch ; L
.eh_frame:0000000000018753                 db  0Eh
.eh_frame:0000000000018754                 db    8
.eh_frame:0000000000018755                 db    0
.eh_frame:0000000000018756                 db    0
.eh_frame:0000000000018757                 db    0
.eh_frame:0000000000018758                 db  20h
.eh_frame:0000000000018759                 db    0
.eh_frame:000000000001875A                 db    0
.eh_frame:000000000001875B                 db    0
.eh_frame:000000000001875C                 db 0F4h
.eh_frame:000000000001875D                 db  20h
.eh_frame:000000000001875E                 db    0
.eh_frame:000000000001875F                 db    0
.eh_frame:0000000000018760                 db 0F0h
.eh_frame:0000000000018761                 db 0B9h
.eh_frame:0000000000018762                 db 0FFh
.eh_frame:0000000000018763                 db 0FFh
.eh_frame:0000000000018764                 db  1Ah
.eh_frame:0000000000018765                 db    0
.eh_frame:0000000000018766                 db    0
.eh_frame:0000000000018767                 db    0
.eh_frame:0000000000018768                 db    0
.eh_frame:0000000000018769                 db  44h ; D
.eh_frame:000000000001876A                 db  0Eh
.eh_frame:000000000001876B                 db  10h
.eh_frame:000000000001876C                 db  42h ; B
.eh_frame:000000000001876D                 db  0Eh
.eh_frame:000000000001876E                 db  18h
.eh_frame:000000000001876F                 db  44h ; D
.eh_frame:0000000000018770                 db  0Eh
.eh_frame:0000000000018771                 db  20h
.eh_frame:0000000000018772                 db  44h ; D
.eh_frame:0000000000018773                 db  0Eh
.eh_frame:0000000000018774                 db  28h ; (
.eh_frame:0000000000018775                 db  42h ; B
.eh_frame:0000000000018776                 db  0Eh
.eh_frame:0000000000018777                 db  30h ; 0
.eh_frame:0000000000018778                 db  49h ; I
.eh_frame:0000000000018779                 db  0Eh
.eh_frame:000000000001877A                 db    8
.eh_frame:000000000001877B                 db    0
.eh_frame:000000000001877C                 db  20h
.eh_frame:000000000001877D                 db    0
.eh_frame:000000000001877E                 db    0
.eh_frame:000000000001877F                 db    0
.eh_frame:0000000000018780                 db  18h
.eh_frame:0000000000018781                 db  21h ; !
.eh_frame:0000000000018782                 db    0
.eh_frame:0000000000018783                 db    0
.eh_frame:0000000000018784                 db 0ECh
.eh_frame:0000000000018785                 db 0B9h
.eh_frame:0000000000018786                 db 0FFh
.eh_frame:0000000000018787                 db 0FFh
.eh_frame:0000000000018788                 db  1Ch
.eh_frame:0000000000018789                 db    0
.eh_frame:000000000001878A                 db    0
.eh_frame:000000000001878B                 db    0
.eh_frame:000000000001878C                 db    0
.eh_frame:000000000001878D                 db  44h ; D
.eh_frame:000000000001878E                 db  0Eh
.eh_frame:000000000001878F                 db  10h
.eh_frame:0000000000018790                 db  42h ; B
.eh_frame:0000000000018791                 db  0Eh
.eh_frame:0000000000018792                 db  18h
.eh_frame:0000000000018793                 db  44h ; D
.eh_frame:0000000000018794                 db  0Eh
.eh_frame:0000000000018795                 db  20h
.eh_frame:0000000000018796                 db  44h ; D
.eh_frame:0000000000018797                 db  0Eh
.eh_frame:0000000000018798                 db  28h ; (
.eh_frame:0000000000018799                 db  44h ; D
.eh_frame:000000000001879A                 db  0Eh
.eh_frame:000000000001879B                 db  30h ; 0
.eh_frame:000000000001879C                 db  49h ; I
.eh_frame:000000000001879D                 db  0Eh
.eh_frame:000000000001879E                 db    8
.eh_frame:000000000001879F                 db    0
.eh_frame:00000000000187A0                 db  14h
.eh_frame:00000000000187A1                 db    0
.eh_frame:00000000000187A2                 db    0
.eh_frame:00000000000187A3                 db    0
.eh_frame:00000000000187A4                 db  3Ch ; <
.eh_frame:00000000000187A5                 db  21h ; !
.eh_frame:00000000000187A6                 db    0
.eh_frame:00000000000187A7                 db    0
.eh_frame:00000000000187A8                 db 0E8h
.eh_frame:00000000000187A9                 db 0B9h
.eh_frame:00000000000187AA                 db 0FFh
.eh_frame:00000000000187AB                 db 0FFh
.eh_frame:00000000000187AC                 db  41h ; A
.eh_frame:00000000000187AD                 db    0
.eh_frame:00000000000187AE                 db    0
.eh_frame:00000000000187AF                 db    0
.eh_frame:00000000000187B0                 db    0
.eh_frame:00000000000187B1                 db    0
.eh_frame:00000000000187B2                 db    0
.eh_frame:00000000000187B3                 db    0
.eh_frame:00000000000187B4                 db    0
.eh_frame:00000000000187B5                 db    0
.eh_frame:00000000000187B6                 db    0
.eh_frame:00000000000187B7                 db    0
.eh_frame:00000000000187B8                 db  4Ch ; L
.eh_frame:00000000000187B9                 db    0
.eh_frame:00000000000187BA                 db    0
.eh_frame:00000000000187BB                 db    0
.eh_frame:00000000000187BC                 db  54h ; T
.eh_frame:00000000000187BD                 db  21h ; !
.eh_frame:00000000000187BE                 db    0
.eh_frame:00000000000187BF                 db    0
.eh_frame:00000000000187C0                 db  20h
.eh_frame:00000000000187C1                 db 0BAh
.eh_frame:00000000000187C2                 db 0FFh
.eh_frame:00000000000187C3                 db 0FFh
.eh_frame:00000000000187C4                 db  7Dh ; }
.eh_frame:00000000000187C5                 db    0
.eh_frame:00000000000187C6                 db    0
.eh_frame:00000000000187C7                 db    0
.eh_frame:00000000000187C8                 db    0
.eh_frame:00000000000187C9                 db  42h ; B
.eh_frame:00000000000187CA                 db  0Eh
.eh_frame:00000000000187CB                 db  10h
.eh_frame:00000000000187CC                 db  8Ch
.eh_frame:00000000000187CD                 db    2
.eh_frame:00000000000187CE                 db  41h ; A
.eh_frame:00000000000187CF                 db  0Eh
.eh_frame:00000000000187D0                 db  18h
.eh_frame:00000000000187D1                 db  86h
.eh_frame:00000000000187D2                 db    3
.eh_frame:00000000000187D3                 db  44h ; D
.eh_frame:00000000000187D4                 db  0Eh
.eh_frame:00000000000187D5                 db  20h
.eh_frame:00000000000187D6                 db  83h
.eh_frame:00000000000187D7                 db    4
.eh_frame:00000000000187D8                 db  69h ; i
.eh_frame:00000000000187D9                 db  0Ah
.eh_frame:00000000000187DA                 db  0Eh
.eh_frame:00000000000187DB                 db  18h
.eh_frame:00000000000187DC                 db  41h ; A
.eh_frame:00000000000187DD                 db  0Eh
.eh_frame:00000000000187DE                 db  10h
.eh_frame:00000000000187DF                 db  42h ; B
.eh_frame:00000000000187E0                 db  0Eh
.eh_frame:00000000000187E1                 db    8
.eh_frame:00000000000187E2                 db  45h ; E
.eh_frame:00000000000187E3                 db  0Bh
.eh_frame:00000000000187E4                 db  55h ; U
.eh_frame:00000000000187E5                 db  0Ah
.eh_frame:00000000000187E6                 db  0Eh
.eh_frame:00000000000187E7                 db  18h
.eh_frame:00000000000187E8                 db  41h ; A
.eh_frame:00000000000187E9                 db  0Eh
.eh_frame:00000000000187EA                 db  10h
.eh_frame:00000000000187EB                 db  42h ; B
.eh_frame:00000000000187EC                 db  0Eh
.eh_frame:00000000000187ED                 db    8
.eh_frame:00000000000187EE                 db  48h ; H
.eh_frame:00000000000187EF                 db  0Bh
.eh_frame:00000000000187F0                 db  41h ; A
.eh_frame:00000000000187F1                 db  0Ah
.eh_frame:00000000000187F2                 db  0Eh
.eh_frame:00000000000187F3                 db  18h
.eh_frame:00000000000187F4                 db  46h ; F
.eh_frame:00000000000187F5                 db  0Eh
.eh_frame:00000000000187F6                 db  10h
.eh_frame:00000000000187F7                 db  42h ; B
.eh_frame:00000000000187F8                 db  0Eh
.eh_frame:00000000000187F9                 db    8
.eh_frame:00000000000187FA                 db  47h ; G
.eh_frame:00000000000187FB                 db  0Bh
.eh_frame:00000000000187FC                 db  49h ; I
.eh_frame:00000000000187FD                 db  0Eh
.eh_frame:00000000000187FE                 db  18h
.eh_frame:00000000000187FF                 db  41h ; A
.eh_frame:0000000000018800                 db  0Eh
.eh_frame:0000000000018801                 db  10h
.eh_frame:0000000000018802                 db  42h ; B
.eh_frame:0000000000018803                 db  0Eh
.eh_frame:0000000000018804                 db    8
.eh_frame:0000000000018805                 db    0
.eh_frame:0000000000018806                 db    0
.eh_frame:0000000000018807                 db    0
.eh_frame:0000000000018808                 db  1Ch
.eh_frame:0000000000018809                 db    0
.eh_frame:000000000001880A                 db    0
.eh_frame:000000000001880B                 db    0
.eh_frame:000000000001880C                 db 0A4h
.eh_frame:000000000001880D                 db  21h ; !
.eh_frame:000000000001880E                 db    0
.eh_frame:000000000001880F                 db    0
.eh_frame:0000000000018810                 db  50h ; P
.eh_frame:0000000000018811                 db 0BAh
.eh_frame:0000000000018812                 db 0FFh
.eh_frame:0000000000018813                 db 0FFh
.eh_frame:0000000000018814                 db  60h ; `
.eh_frame:0000000000018815                 db    0
.eh_frame:0000000000018816                 db    0
.eh_frame:0000000000018817                 db    0
.eh_frame:0000000000018818                 db    0
.eh_frame:0000000000018819                 db  44h ; D
.eh_frame:000000000001881A                 db  0Eh
.eh_frame:000000000001881B                 db  10h
.eh_frame:000000000001881C                 db  75h ; u
.eh_frame:000000000001881D                 db  0Ah
.eh_frame:000000000001881E                 db  0Eh
.eh_frame:000000000001881F                 db    8
.eh_frame:0000000000018820                 db  47h ; G
.eh_frame:0000000000018821                 db  0Bh
.eh_frame:0000000000018822                 db  5Fh ; _
.eh_frame:0000000000018823                 db  0Eh
.eh_frame:0000000000018824                 db    8
.eh_frame:0000000000018825                 db    0
.eh_frame:0000000000018826                 db    0
.eh_frame:0000000000018827                 db    0
.eh_frame:0000000000018828                 db  1Ch
.eh_frame:0000000000018829                 db    0
.eh_frame:000000000001882A                 db    0
.eh_frame:000000000001882B                 db    0
.eh_frame:000000000001882C                 db 0C4h
.eh_frame:000000000001882D                 db  21h ; !
.eh_frame:000000000001882E                 db    0
.eh_frame:000000000001882F                 db    0
.eh_frame:0000000000018830                 db  90h
.eh_frame:0000000000018831                 db 0BAh
.eh_frame:0000000000018832                 db 0FFh
.eh_frame:0000000000018833                 db 0FFh
.eh_frame:0000000000018834                 db  3Ch ; <
.eh_frame:0000000000018835                 db    0
.eh_frame:0000000000018836                 db    0
.eh_frame:0000000000018837                 db    0
.eh_frame:0000000000018838                 db    0
.eh_frame:0000000000018839                 db  44h ; D
.eh_frame:000000000001883A                 db  0Eh
.eh_frame:000000000001883B                 db  10h
.eh_frame:000000000001883C                 db  61h ; a
.eh_frame:000000000001883D                 db  0Ah
.eh_frame:000000000001883E                 db  0Eh
.eh_frame:000000000001883F                 db    8
.eh_frame:0000000000018840                 db  4Bh ; K
.eh_frame:0000000000018841                 db  0Bh
.eh_frame:0000000000018842                 db  4Bh ; K
.eh_frame:0000000000018843                 db  0Eh
.eh_frame:0000000000018844                 db    8
.eh_frame:0000000000018845                 db    0
.eh_frame:0000000000018846                 db    0
.eh_frame:0000000000018847                 db    0
.eh_frame:0000000000018848                 db  44h ; D
.eh_frame:0000000000018849                 db    0
.eh_frame:000000000001884A                 db    0
.eh_frame:000000000001884B                 db    0
.eh_frame:000000000001884C                 db 0E4h
.eh_frame:000000000001884D                 db  21h ; !
.eh_frame:000000000001884E                 db    0
.eh_frame:000000000001884F                 db    0
.eh_frame:0000000000018850                 db 0B0h
.eh_frame:0000000000018851                 db 0BAh
.eh_frame:0000000000018852                 db 0FFh
.eh_frame:0000000000018853                 db 0FFh
.eh_frame:0000000000018854                 db  65h ; e
.eh_frame:0000000000018855                 db    0
.eh_frame:0000000000018856                 db    0
.eh_frame:0000000000018857                 db    0
.eh_frame:0000000000018858                 db    0
.eh_frame:0000000000018859                 db  42h ; B
.eh_frame:000000000001885A                 db  0Eh
.eh_frame:000000000001885B                 db  10h
.eh_frame:000000000001885C                 db  8Fh
.eh_frame:000000000001885D                 db    2
.eh_frame:000000000001885E                 db  42h ; B
.eh_frame:000000000001885F                 db  0Eh
.eh_frame:0000000000018860                 db  18h
.eh_frame:0000000000018861                 db  8Eh
.eh_frame:0000000000018862                 db    3
.eh_frame:0000000000018863                 db  45h ; E
.eh_frame:0000000000018864                 db  0Eh
.eh_frame:0000000000018865                 db  20h
.eh_frame:0000000000018866                 db  8Dh
.eh_frame:0000000000018867                 db    4
.eh_frame:0000000000018868                 db  42h ; B
.eh_frame:0000000000018869                 db  0Eh
.eh_frame:000000000001886A                 db  28h ; (
.eh_frame:000000000001886B                 db  8Ch
.eh_frame:000000000001886C                 db    5
.eh_frame:000000000001886D                 db  48h ; H
.eh_frame:000000000001886E                 db  0Eh
.eh_frame:000000000001886F                 db  30h ; 0
.eh_frame:0000000000018870                 db  86h
.eh_frame:0000000000018871                 db    6
.eh_frame:0000000000018872                 db  48h ; H
.eh_frame:0000000000018873                 db  0Eh
.eh_frame:0000000000018874                 db  38h ; 8
.eh_frame:0000000000018875                 db  83h
.eh_frame:0000000000018876                 db    7
.eh_frame:0000000000018877                 db  4Dh ; M
.eh_frame:0000000000018878                 db  0Eh
.eh_frame:0000000000018879                 db  40h ; @
.eh_frame:000000000001887A                 db  72h ; r
.eh_frame:000000000001887B                 db  0Eh
.eh_frame:000000000001887C                 db  38h ; 8
.eh_frame:000000000001887D                 db  41h ; A
.eh_frame:000000000001887E                 db  0Eh
.eh_frame:000000000001887F                 db  30h ; 0
.eh_frame:0000000000018880                 db  41h ; A
.eh_frame:0000000000018881                 db  0Eh
.eh_frame:0000000000018882                 db  28h ; (
.eh_frame:0000000000018883                 db  42h ; B
.eh_frame:0000000000018884                 db  0Eh
.eh_frame:0000000000018885                 db  20h
.eh_frame:0000000000018886                 db  42h ; B
.eh_frame:0000000000018887                 db  0Eh
.eh_frame:0000000000018888                 db  18h
.eh_frame:0000000000018889                 db  42h ; B
.eh_frame:000000000001888A                 db  0Eh
.eh_frame:000000000001888B                 db  10h
.eh_frame:000000000001888C                 db  42h ; B
.eh_frame:000000000001888D                 db  0Eh
.eh_frame:000000000001888E                 db    8
.eh_frame:000000000001888F                 db    0
.eh_frame:0000000000018890                 db  14h
.eh_frame:0000000000018891                 db    0
.eh_frame:0000000000018892                 db    0
.eh_frame:0000000000018893                 db    0
.eh_frame:0000000000018894                 db  2Ch ; ,
.eh_frame:0000000000018895                 db  22h ; "
.eh_frame:0000000000018896                 db    0
.eh_frame:0000000000018897                 db    0
.eh_frame:0000000000018898                 db 0D8h
.eh_frame:0000000000018899                 db 0BAh
.eh_frame:000000000001889A                 db 0FFh
.eh_frame:000000000001889B                 db 0FFh
.eh_frame:000000000001889C                 db    2
.eh_frame:000000000001889D                 db    0
.eh_frame:000000000001889E                 db    0
.eh_frame:000000000001889F                 db    0
.eh_frame:00000000000188A0                 db    0
.eh_frame:00000000000188A1                 db    0
.eh_frame:00000000000188A2                 db    0
.eh_frame:00000000000188A3                 db    0
.eh_frame:00000000000188A4                 db    0
.eh_frame:00000000000188A5                 db    0
.eh_frame:00000000000188A6                 db    0
.eh_frame:00000000000188A7                 db    0
.eh_frame:00000000000188A8                 db  10h
.eh_frame:00000000000188A9                 db    0
.eh_frame:00000000000188AA                 db    0
.eh_frame:00000000000188AB                 db    0
.eh_frame:00000000000188AC                 db  44h ; D
.eh_frame:00000000000188AD                 db  22h ; "
.eh_frame:00000000000188AE                 db    0
.eh_frame:00000000000188AF                 db    0
.eh_frame:00000000000188B0                 db 0D0h
.eh_frame:00000000000188B1                 db 0BAh
.eh_frame:00000000000188B2                 db 0FFh
.eh_frame:00000000000188B3                 db 0FFh
.eh_frame:00000000000188B4                 db  0Eh
.eh_frame:00000000000188B5                 db    0
.eh_frame:00000000000188B6                 db    0
.eh_frame:00000000000188B7                 db    0
.eh_frame:00000000000188B8                 db    0
.eh_frame:00000000000188B9                 db    0
.eh_frame:00000000000188BA                 db    0
.eh_frame:00000000000188BB                 db    0
.eh_frame:00000000000188BC __FRAME_END__   db    0
.eh_frame:00000000000188BD                 db    0
.eh_frame:00000000000188BE                 db    0
.eh_frame:00000000000188BF                 db    0
.eh_frame:00000000000188BF _eh_frame       ends
.eh_frame:00000000000188BF
.init_array:00000000002189B0 ; ELF Initialization Function Table
.init_array:00000000002189B0 ; ===========================================================================
.init_array:00000000002189B0
.init_array:00000000002189B0 ; Segment type: Pure data
.init_array:00000000002189B0 ; Segment permissions: Read/Write
.init_array:00000000002189B0 _init_array     segment qword public 'DATA' use64
.init_array:00000000002189B0                 assume cs:_init_array
.init_array:00000000002189B0                 ;org 2189B0h
.init_array:00000000002189B0 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:00000000002189B0                                         ; DATA XREF: LOAD:00000000000000F8↑o
.init_array:00000000002189B0                                         ; LOAD:0000000000000210↑o ...
.init_array:00000000002189B0 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:00000000002189B0
.fini_array:00000000002189B8 ; ELF Termination Function Table
.fini_array:00000000002189B8 ; ===========================================================================
.fini_array:00000000002189B8
.fini_array:00000000002189B8 ; Segment type: Pure data
.fini_array:00000000002189B8 ; Segment permissions: Read/Write
.fini_array:00000000002189B8 _fini_array     segment qword public 'DATA' use64
.fini_array:00000000002189B8                 assume cs:_fini_array
.fini_array:00000000002189B8                 ;org 2189B8h
.fini_array:00000000002189B8 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:00000000002189B8                                         ; DATA XREF: __libc_csu_init+13↑o
.fini_array:00000000002189B8 _fini_array     ends                    ; Alternative name is '__init_array_end'
.fini_array:00000000002189B8
.data.rel.ro:00000000002189C0 ; ===========================================================================
.data.rel.ro:00000000002189C0
.data.rel.ro:00000000002189C0 ; Segment type: Pure data
.data.rel.ro:00000000002189C0 ; Segment permissions: Read/Write
.data.rel.ro:00000000002189C0 _data_rel_ro    segment align_32 public 'DATA' use64
.data.rel.ro:00000000002189C0                 assume cs:_data_rel_ro
.data.rel.ro:00000000002189C0                 ;org 2189C0h
.data.rel.ro:00000000002189C0 ; struct option longopts
.data.rel.ro:00000000002189C0 longopts        dq offset aHeaderNumberin; name
.data.rel.ro:00000000002189C0                                         ; DATA XREF: main+1D↑o
.data.rel.ro:00000000002189C0                 dd 1                    ; has_arg ; "header-numbering"
.data.rel.ro:00000000002189C0                 db 4 dup(0)
.data.rel.ro:00000000002189C0                 dq 0                    ; flag
.data.rel.ro:00000000002189C0                 dd 68h                  ; val
.data.rel.ro:00000000002189C0                 db 4 dup(0)
.data.rel.ro:00000000002189E0                 dq offset aBodyNumbering ; "body-numbering"
.data.rel.ro:00000000002189E8                 db    1
.data.rel.ro:00000000002189E9                 db    0
.data.rel.ro:00000000002189EA                 db    0
.data.rel.ro:00000000002189EB                 db    0
.data.rel.ro:00000000002189EC                 db    0
.data.rel.ro:00000000002189ED                 db    0
.data.rel.ro:00000000002189EE                 db    0
.data.rel.ro:00000000002189EF                 db    0
.data.rel.ro:00000000002189F0                 db    0
.data.rel.ro:00000000002189F1                 db    0
.data.rel.ro:00000000002189F2                 db    0
.data.rel.ro:00000000002189F3                 db    0
.data.rel.ro:00000000002189F4                 db    0
.data.rel.ro:00000000002189F5                 db    0
.data.rel.ro:00000000002189F6                 db    0
.data.rel.ro:00000000002189F7                 db    0
.data.rel.ro:00000000002189F8                 db  62h ; b
.data.rel.ro:00000000002189F9                 db    0
.data.rel.ro:00000000002189FA                 db    0
.data.rel.ro:00000000002189FB                 db    0
.data.rel.ro:00000000002189FC                 db    0
.data.rel.ro:00000000002189FD                 db    0
.data.rel.ro:00000000002189FE                 db    0
.data.rel.ro:00000000002189FF                 db    0
.data.rel.ro:0000000000218A00                 dq offset aFooterNumberin ; "footer-numbering"
.data.rel.ro:0000000000218A08                 db    1
.data.rel.ro:0000000000218A09                 db    0
.data.rel.ro:0000000000218A0A                 db    0
.data.rel.ro:0000000000218A0B                 db    0
.data.rel.ro:0000000000218A0C                 db    0
.data.rel.ro:0000000000218A0D                 db    0
.data.rel.ro:0000000000218A0E                 db    0
.data.rel.ro:0000000000218A0F                 db    0
.data.rel.ro:0000000000218A10                 db    0
.data.rel.ro:0000000000218A11                 db    0
.data.rel.ro:0000000000218A12                 db    0
.data.rel.ro:0000000000218A13                 db    0
.data.rel.ro:0000000000218A14                 db    0
.data.rel.ro:0000000000218A15                 db    0
.data.rel.ro:0000000000218A16                 db    0
.data.rel.ro:0000000000218A17                 db    0
.data.rel.ro:0000000000218A18                 db  66h ; f
.data.rel.ro:0000000000218A19                 db    0
.data.rel.ro:0000000000218A1A                 db    0
.data.rel.ro:0000000000218A1B                 db    0
.data.rel.ro:0000000000218A1C                 db    0
.data.rel.ro:0000000000218A1D                 db    0
.data.rel.ro:0000000000218A1E                 db    0
.data.rel.ro:0000000000218A1F                 db    0
.data.rel.ro:0000000000218A20                 dq offset aStartingLineNu ; "starting-line-number"
.data.rel.ro:0000000000218A28                 db    1
.data.rel.ro:0000000000218A29                 db    0
.data.rel.ro:0000000000218A2A                 db    0
.data.rel.ro:0000000000218A2B                 db    0
.data.rel.ro:0000000000218A2C                 db    0
.data.rel.ro:0000000000218A2D                 db    0
.data.rel.ro:0000000000218A2E                 db    0
.data.rel.ro:0000000000218A2F                 db    0
.data.rel.ro:0000000000218A30                 db    0
.data.rel.ro:0000000000218A31                 db    0
.data.rel.ro:0000000000218A32                 db    0
.data.rel.ro:0000000000218A33                 db    0
.data.rel.ro:0000000000218A34                 db    0
.data.rel.ro:0000000000218A35                 db    0
.data.rel.ro:0000000000218A36                 db    0
.data.rel.ro:0000000000218A37                 db    0
.data.rel.ro:0000000000218A38                 db  76h ; v
.data.rel.ro:0000000000218A39                 db    0
.data.rel.ro:0000000000218A3A                 db    0
.data.rel.ro:0000000000218A3B                 db    0
.data.rel.ro:0000000000218A3C                 db    0
.data.rel.ro:0000000000218A3D                 db    0
.data.rel.ro:0000000000218A3E                 db    0
.data.rel.ro:0000000000218A3F                 db    0
.data.rel.ro:0000000000218A40                 dq offset aLineIncrement ; "line-increment"
.data.rel.ro:0000000000218A48                 db    1
.data.rel.ro:0000000000218A49                 db    0
.data.rel.ro:0000000000218A4A                 db    0
.data.rel.ro:0000000000218A4B                 db    0
.data.rel.ro:0000000000218A4C                 db    0
.data.rel.ro:0000000000218A4D                 db    0
.data.rel.ro:0000000000218A4E                 db    0
.data.rel.ro:0000000000218A4F                 db    0
.data.rel.ro:0000000000218A50                 db    0
.data.rel.ro:0000000000218A51                 db    0
.data.rel.ro:0000000000218A52                 db    0
.data.rel.ro:0000000000218A53                 db    0
.data.rel.ro:0000000000218A54                 db    0
.data.rel.ro:0000000000218A55                 db    0
.data.rel.ro:0000000000218A56                 db    0
.data.rel.ro:0000000000218A57                 db    0
.data.rel.ro:0000000000218A58                 db  69h ; i
.data.rel.ro:0000000000218A59                 db    0
.data.rel.ro:0000000000218A5A                 db    0
.data.rel.ro:0000000000218A5B                 db    0
.data.rel.ro:0000000000218A5C                 db    0
.data.rel.ro:0000000000218A5D                 db    0
.data.rel.ro:0000000000218A5E                 db    0
.data.rel.ro:0000000000218A5F                 db    0
.data.rel.ro:0000000000218A60                 dq offset aNoRenumber   ; "no-renumber"
.data.rel.ro:0000000000218A68                 db    0
.data.rel.ro:0000000000218A69                 db    0
.data.rel.ro:0000000000218A6A                 db    0
.data.rel.ro:0000000000218A6B                 db    0
.data.rel.ro:0000000000218A6C                 db    0
.data.rel.ro:0000000000218A6D                 db    0
.data.rel.ro:0000000000218A6E                 db    0
.data.rel.ro:0000000000218A6F                 db    0
.data.rel.ro:0000000000218A70                 db    0
.data.rel.ro:0000000000218A71                 db    0
.data.rel.ro:0000000000218A72                 db    0
.data.rel.ro:0000000000218A73                 db    0
.data.rel.ro:0000000000218A74                 db    0
.data.rel.ro:0000000000218A75                 db    0
.data.rel.ro:0000000000218A76                 db    0
.data.rel.ro:0000000000218A77                 db    0
.data.rel.ro:0000000000218A78                 db  70h ; p
.data.rel.ro:0000000000218A79                 db    0
.data.rel.ro:0000000000218A7A                 db    0
.data.rel.ro:0000000000218A7B                 db    0
.data.rel.ro:0000000000218A7C                 db    0
.data.rel.ro:0000000000218A7D                 db    0
.data.rel.ro:0000000000218A7E                 db    0
.data.rel.ro:0000000000218A7F                 db    0
.data.rel.ro:0000000000218A80                 dq offset aJoinBlankLines ; "join-blank-lines"
.data.rel.ro:0000000000218A88                 db    1
.data.rel.ro:0000000000218A89                 db    0
.data.rel.ro:0000000000218A8A                 db    0
.data.rel.ro:0000000000218A8B                 db    0
.data.rel.ro:0000000000218A8C                 db    0
.data.rel.ro:0000000000218A8D                 db    0
.data.rel.ro:0000000000218A8E                 db    0
.data.rel.ro:0000000000218A8F                 db    0
.data.rel.ro:0000000000218A90                 db    0
.data.rel.ro:0000000000218A91                 db    0
.data.rel.ro:0000000000218A92                 db    0
.data.rel.ro:0000000000218A93                 db    0
.data.rel.ro:0000000000218A94                 db    0
.data.rel.ro:0000000000218A95                 db    0
.data.rel.ro:0000000000218A96                 db    0
.data.rel.ro:0000000000218A97                 db    0
.data.rel.ro:0000000000218A98                 db  6Ch ; l
.data.rel.ro:0000000000218A99                 db    0
.data.rel.ro:0000000000218A9A                 db    0
.data.rel.ro:0000000000218A9B                 db    0
.data.rel.ro:0000000000218A9C                 db    0
.data.rel.ro:0000000000218A9D                 db    0
.data.rel.ro:0000000000218A9E                 db    0
.data.rel.ro:0000000000218A9F                 db    0
.data.rel.ro:0000000000218AA0                 dq offset aNumberSeparato ; "number-separator"
.data.rel.ro:0000000000218AA8                 db    1
.data.rel.ro:0000000000218AA9                 db    0
.data.rel.ro:0000000000218AAA                 db    0
.data.rel.ro:0000000000218AAB                 db    0
.data.rel.ro:0000000000218AAC                 db    0
.data.rel.ro:0000000000218AAD                 db    0
.data.rel.ro:0000000000218AAE                 db    0
.data.rel.ro:0000000000218AAF                 db    0
.data.rel.ro:0000000000218AB0                 db    0
.data.rel.ro:0000000000218AB1                 db    0
.data.rel.ro:0000000000218AB2                 db    0
.data.rel.ro:0000000000218AB3                 db    0
.data.rel.ro:0000000000218AB4                 db    0
.data.rel.ro:0000000000218AB5                 db    0
.data.rel.ro:0000000000218AB6                 db    0
.data.rel.ro:0000000000218AB7                 db    0
.data.rel.ro:0000000000218AB8                 db  73h ; s
.data.rel.ro:0000000000218AB9                 db    0
.data.rel.ro:0000000000218ABA                 db    0
.data.rel.ro:0000000000218ABB                 db    0
.data.rel.ro:0000000000218ABC                 db    0
.data.rel.ro:0000000000218ABD                 db    0
.data.rel.ro:0000000000218ABE                 db    0
.data.rel.ro:0000000000218ABF                 db    0
.data.rel.ro:0000000000218AC0                 dq offset aNumberWidth  ; "number-width"
.data.rel.ro:0000000000218AC8                 db    1
.data.rel.ro:0000000000218AC9                 db    0
.data.rel.ro:0000000000218ACA                 db    0
.data.rel.ro:0000000000218ACB                 db    0
.data.rel.ro:0000000000218ACC                 db    0
.data.rel.ro:0000000000218ACD                 db    0
.data.rel.ro:0000000000218ACE                 db    0
.data.rel.ro:0000000000218ACF                 db    0
.data.rel.ro:0000000000218AD0                 db    0
.data.rel.ro:0000000000218AD1                 db    0
.data.rel.ro:0000000000218AD2                 db    0
.data.rel.ro:0000000000218AD3                 db    0
.data.rel.ro:0000000000218AD4                 db    0
.data.rel.ro:0000000000218AD5                 db    0
.data.rel.ro:0000000000218AD6                 db    0
.data.rel.ro:0000000000218AD7                 db    0
.data.rel.ro:0000000000218AD8                 db  77h ; w
.data.rel.ro:0000000000218AD9                 db    0
.data.rel.ro:0000000000218ADA                 db    0
.data.rel.ro:0000000000218ADB                 db    0
.data.rel.ro:0000000000218ADC                 db    0
.data.rel.ro:0000000000218ADD                 db    0
.data.rel.ro:0000000000218ADE                 db    0
.data.rel.ro:0000000000218ADF                 db    0
.data.rel.ro:0000000000218AE0                 dq offset aNumberFormat ; "number-format"
.data.rel.ro:0000000000218AE8                 db    1
.data.rel.ro:0000000000218AE9                 db    0
.data.rel.ro:0000000000218AEA                 db    0
.data.rel.ro:0000000000218AEB                 db    0
.data.rel.ro:0000000000218AEC                 db    0
.data.rel.ro:0000000000218AED                 db    0
.data.rel.ro:0000000000218AEE                 db    0
.data.rel.ro:0000000000218AEF                 db    0
.data.rel.ro:0000000000218AF0                 db    0
.data.rel.ro:0000000000218AF1                 db    0
.data.rel.ro:0000000000218AF2                 db    0
.data.rel.ro:0000000000218AF3                 db    0
.data.rel.ro:0000000000218AF4                 db    0
.data.rel.ro:0000000000218AF5                 db    0
.data.rel.ro:0000000000218AF6                 db    0
.data.rel.ro:0000000000218AF7                 db    0
.data.rel.ro:0000000000218AF8                 db  6Eh ; n
.data.rel.ro:0000000000218AF9                 db    0
.data.rel.ro:0000000000218AFA                 db    0
.data.rel.ro:0000000000218AFB                 db    0
.data.rel.ro:0000000000218AFC                 db    0
.data.rel.ro:0000000000218AFD                 db    0
.data.rel.ro:0000000000218AFE                 db    0
.data.rel.ro:0000000000218AFF                 db    0
.data.rel.ro:0000000000218B00                 dq offset aSectionDelimit ; "section-delimiter"
.data.rel.ro:0000000000218B08                 db    1
.data.rel.ro:0000000000218B09                 db    0
.data.rel.ro:0000000000218B0A                 db    0
.data.rel.ro:0000000000218B0B                 db    0
.data.rel.ro:0000000000218B0C                 db    0
.data.rel.ro:0000000000218B0D                 db    0
.data.rel.ro:0000000000218B0E                 db    0
.data.rel.ro:0000000000218B0F                 db    0
.data.rel.ro:0000000000218B10                 db    0
.data.rel.ro:0000000000218B11                 db    0
.data.rel.ro:0000000000218B12                 db    0
.data.rel.ro:0000000000218B13                 db    0
.data.rel.ro:0000000000218B14                 db    0
.data.rel.ro:0000000000218B15                 db    0
.data.rel.ro:0000000000218B16                 db    0
.data.rel.ro:0000000000218B17                 db    0
.data.rel.ro:0000000000218B18                 db  64h ; d
.data.rel.ro:0000000000218B19                 db    0
.data.rel.ro:0000000000218B1A                 db    0
.data.rel.ro:0000000000218B1B                 db    0
.data.rel.ro:0000000000218B1C                 db    0
.data.rel.ro:0000000000218B1D                 db    0
.data.rel.ro:0000000000218B1E                 db    0
.data.rel.ro:0000000000218B1F                 db    0
.data.rel.ro:0000000000218B20                 dq offset aHelp         ; "help"
.data.rel.ro:0000000000218B28                 db    0
.data.rel.ro:0000000000218B29                 db    0
.data.rel.ro:0000000000218B2A                 db    0
.data.rel.ro:0000000000218B2B                 db    0
.data.rel.ro:0000000000218B2C                 db    0
.data.rel.ro:0000000000218B2D                 db    0
.data.rel.ro:0000000000218B2E                 db    0
.data.rel.ro:0000000000218B2F                 db    0
.data.rel.ro:0000000000218B30                 db    0
.data.rel.ro:0000000000218B31                 db    0
.data.rel.ro:0000000000218B32                 db    0
.data.rel.ro:0000000000218B33                 db    0
.data.rel.ro:0000000000218B34                 db    0
.data.rel.ro:0000000000218B35                 db    0
.data.rel.ro:0000000000218B36                 db    0
.data.rel.ro:0000000000218B37                 db    0
.data.rel.ro:0000000000218B38                 db  7Eh ; ~
.data.rel.ro:0000000000218B39                 db 0FFh
.data.rel.ro:0000000000218B3A                 db 0FFh
.data.rel.ro:0000000000218B3B                 db 0FFh
.data.rel.ro:0000000000218B3C                 db    0
.data.rel.ro:0000000000218B3D                 db    0
.data.rel.ro:0000000000218B3E                 db    0
.data.rel.ro:0000000000218B3F                 db    0
.data.rel.ro:0000000000218B40                 dq offset aVersion      ; "version"
.data.rel.ro:0000000000218B48                 db    0
.data.rel.ro:0000000000218B49                 db    0
.data.rel.ro:0000000000218B4A                 db    0
.data.rel.ro:0000000000218B4B                 db    0
.data.rel.ro:0000000000218B4C                 db    0
.data.rel.ro:0000000000218B4D                 db    0
.data.rel.ro:0000000000218B4E                 db    0
.data.rel.ro:0000000000218B4F                 db    0
.data.rel.ro:0000000000218B50                 db    0
.data.rel.ro:0000000000218B51                 db    0
.data.rel.ro:0000000000218B52                 db    0
.data.rel.ro:0000000000218B53                 db    0
.data.rel.ro:0000000000218B54                 db    0
.data.rel.ro:0000000000218B55                 db    0
.data.rel.ro:0000000000218B56                 db    0
.data.rel.ro:0000000000218B57                 db    0
.data.rel.ro:0000000000218B58                 db  7Dh ; }
.data.rel.ro:0000000000218B59                 db 0FFh
.data.rel.ro:0000000000218B5A                 db 0FFh
.data.rel.ro:0000000000218B5B                 db 0FFh
.data.rel.ro:0000000000218B5C                 db    0
.data.rel.ro:0000000000218B5D                 db    0
.data.rel.ro:0000000000218B5E                 db    0
.data.rel.ro:0000000000218B5F                 db    0
.data.rel.ro:0000000000218B60                 db    0
.data.rel.ro:0000000000218B61                 db    0
.data.rel.ro:0000000000218B62                 db    0
.data.rel.ro:0000000000218B63                 db    0
.data.rel.ro:0000000000218B64                 db    0
.data.rel.ro:0000000000218B65                 db    0
.data.rel.ro:0000000000218B66                 db    0
.data.rel.ro:0000000000218B67                 db    0
.data.rel.ro:0000000000218B68                 db    0
.data.rel.ro:0000000000218B69                 db    0
.data.rel.ro:0000000000218B6A                 db    0
.data.rel.ro:0000000000218B6B                 db    0
.data.rel.ro:0000000000218B6C                 db    0
.data.rel.ro:0000000000218B6D                 db    0
.data.rel.ro:0000000000218B6E                 db    0
.data.rel.ro:0000000000218B6F                 db    0
.data.rel.ro:0000000000218B70                 db    0
.data.rel.ro:0000000000218B71                 db    0
.data.rel.ro:0000000000218B72                 db    0
.data.rel.ro:0000000000218B73                 db    0
.data.rel.ro:0000000000218B74                 db    0
.data.rel.ro:0000000000218B75                 db    0
.data.rel.ro:0000000000218B76                 db    0
.data.rel.ro:0000000000218B77                 db    0
.data.rel.ro:0000000000218B78                 db    0
.data.rel.ro:0000000000218B79                 db    0
.data.rel.ro:0000000000218B7A                 db    0
.data.rel.ro:0000000000218B7B                 db    0
.data.rel.ro:0000000000218B7C                 db    0
.data.rel.ro:0000000000218B7D                 db    0
.data.rel.ro:0000000000218B7E                 db    0
.data.rel.ro:0000000000218B7F                 db    0
.data.rel.ro:0000000000218B80                 public quoting_style_args
.data.rel.ro:0000000000218B80 quoting_style_args dq offset aLiteral   ; "literal"
.data.rel.ro:0000000000218B88                 dq offset aShell        ; "shell"
.data.rel.ro:0000000000218B90                 dq offset aShellAlways  ; "shell-always"
.data.rel.ro:0000000000218B98                 dq offset aShellEscape  ; "shell-escape"
.data.rel.ro:0000000000218BA0                 dq offset aShellEscapeAlw ; "shell-escape-always"
.data.rel.ro:0000000000218BA8                 dq offset aC_0          ; "c"
.data.rel.ro:0000000000218BB0                 dq offset aCMaybe       ; "c-maybe"
.data.rel.ro:0000000000218BB8                 dq offset aShellEscape+6 ; "escape"
.data.rel.ro:0000000000218BC0                 dq offset dirname+11h   ; "locale"
.data.rel.ro:0000000000218BC8                 dq offset aClocale      ; "clocale"
.data.rel.ro:0000000000218BD0                 db    0
.data.rel.ro:0000000000218BD1                 db    0
.data.rel.ro:0000000000218BD2                 db    0
.data.rel.ro:0000000000218BD3                 db    0
.data.rel.ro:0000000000218BD4                 db    0
.data.rel.ro:0000000000218BD5                 db    0
.data.rel.ro:0000000000218BD6                 db    0
.data.rel.ro:0000000000218BD7                 db    0
.data.rel.ro:0000000000218BD7 _data_rel_ro    ends
.data.rel.ro:0000000000218BD7
LOAD:0000000000218BD8 ; ELF Dynamic Information
LOAD:0000000000218BD8 ; ===========================================================================
LOAD:0000000000218BD8
LOAD:0000000000218BD8 ; Segment type: Pure data
LOAD:0000000000218BD8 ; Segment permissions: Read/Write
LOAD:0000000000218BD8 LOAD            segment byte public 'DATA' use64
LOAD:0000000000218BD8                 assume cs:LOAD
LOAD:0000000000218BD8                 ;org 218BD8h
LOAD:0000000000218BD8 _DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000000130↑o
LOAD:0000000000218BD8                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:0000000000218BD8                                         ; DT_NEEDED libc.so.6
LOAD:0000000000218BE8                 Elf64_Dyn <0Ch, 1888h>  ; DT_INIT
LOAD:0000000000218BF8                 Elf64_Dyn <0Dh, 14390h> ; DT_FINI
LOAD:0000000000218C08                 Elf64_Dyn <19h, 2189B0h> ; DT_INIT_ARRAY
LOAD:0000000000218C18                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:0000000000218C28                 Elf64_Dyn <1Ah, 2189B8h> ; DT_FINI_ARRAY
LOAD:0000000000218C38                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:0000000000218C48                 Elf64_Dyn <6FFFFEF5h, 298h> ; DT_GNU_HASH
LOAD:0000000000218C58                 Elf64_Dyn <5, 0A00h>    ; DT_STRTAB
LOAD:0000000000218C68                 Elf64_Dyn <6, 2E0h>     ; DT_SYMTAB
LOAD:0000000000218C78                 Elf64_Dyn <0Ah, 36Ch>   ; DT_STRSZ
LOAD:0000000000218C88                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:0000000000218C98                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:0000000000218CA8                 Elf64_Dyn <3, 218DC8h>  ; DT_PLTGOT
LOAD:0000000000218CB8                 Elf64_Dyn <2, 5B8h>     ; DT_PLTRELSZ
LOAD:0000000000218CC8                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:0000000000218CD8                 Elf64_Dyn <17h, 12D0h>  ; DT_JMPREL
LOAD:0000000000218CE8                 Elf64_Dyn <7, 0E68h>    ; DT_RELA
LOAD:0000000000218CF8                 Elf64_Dyn <8, 468h>     ; DT_RELASZ
LOAD:0000000000218D08                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:0000000000218D18                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:0000000000218D28                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:0000000000218D38                 Elf64_Dyn <6FFFFFFEh, 0E08h> ; DT_VERNEED
LOAD:0000000000218D48                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:0000000000218D58                 Elf64_Dyn <6FFFFFF0h, 0D6Ch> ; DT_VERSYM
LOAD:0000000000218D68                 Elf64_Dyn <6FFFFFF9h, 23h> ; DT_RELACOUNT
LOAD:0000000000218D78                 Elf64_Dyn <0>           ; DT_NULL
LOAD:0000000000218D88                 db    0
LOAD:0000000000218D89                 db    0
LOAD:0000000000218D8A                 db    0
LOAD:0000000000218D8B                 db    0
LOAD:0000000000218D8C                 db    0
LOAD:0000000000218D8D                 db    0
LOAD:0000000000218D8E                 db    0
LOAD:0000000000218D8F                 db    0
LOAD:0000000000218D90                 db    0
LOAD:0000000000218D91                 db    0
LOAD:0000000000218D92                 db    0
LOAD:0000000000218D93                 db    0
LOAD:0000000000218D94                 db    0
LOAD:0000000000218D95                 db    0
LOAD:0000000000218D96                 db    0
LOAD:0000000000218D97                 db    0
LOAD:0000000000218D98                 db    0
LOAD:0000000000218D99                 db    0
LOAD:0000000000218D9A                 db    0
LOAD:0000000000218D9B                 db    0
LOAD:0000000000218D9C                 db    0
LOAD:0000000000218D9D                 db    0
LOAD:0000000000218D9E                 db    0
LOAD:0000000000218D9F                 db    0
LOAD:0000000000218DA0                 db    0
LOAD:0000000000218DA1                 db    0
LOAD:0000000000218DA2                 db    0
LOAD:0000000000218DA3                 db    0
LOAD:0000000000218DA4                 db    0
LOAD:0000000000218DA5                 db    0
LOAD:0000000000218DA6                 db    0
LOAD:0000000000218DA7                 db    0
LOAD:0000000000218DA8                 db    0
LOAD:0000000000218DA9                 db    0
LOAD:0000000000218DAA                 db    0
LOAD:0000000000218DAB                 db    0
LOAD:0000000000218DAC                 db    0
LOAD:0000000000218DAD                 db    0
LOAD:0000000000218DAE                 db    0
LOAD:0000000000218DAF                 db    0
LOAD:0000000000218DB0                 db    0
LOAD:0000000000218DB1                 db    0
LOAD:0000000000218DB2                 db    0
LOAD:0000000000218DB3                 db    0
LOAD:0000000000218DB4                 db    0
LOAD:0000000000218DB5                 db    0
LOAD:0000000000218DB6                 db    0
LOAD:0000000000218DB7                 db    0
LOAD:0000000000218DB8                 db    0
LOAD:0000000000218DB9                 db    0
LOAD:0000000000218DBA                 db    0
LOAD:0000000000218DBB                 db    0
LOAD:0000000000218DBC                 db    0
LOAD:0000000000218DBD                 db    0
LOAD:0000000000218DBE                 db    0
LOAD:0000000000218DBF                 db    0
LOAD:0000000000218DC0                 db    0
LOAD:0000000000218DC1                 db    0
LOAD:0000000000218DC2                 db    0
LOAD:0000000000218DC3                 db    0
LOAD:0000000000218DC4                 db    0
LOAD:0000000000218DC5                 db    0
LOAD:0000000000218DC6                 db    0
LOAD:0000000000218DC7                 db    0
LOAD:0000000000218DC7 LOAD            ends
LOAD:0000000000218DC7
.got:0000000000218DC8 ; ===========================================================================
.got:0000000000218DC8
.got:0000000000218DC8 ; Segment type: Pure data
.got:0000000000218DC8 ; Segment permissions: Read/Write
.got:0000000000218DC8 _got            segment qword public 'DATA' use64
.got:0000000000218DC8                 assume cs:_got
.got:0000000000218DC8                 ;org 218DC8h
.got:0000000000218DC8 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:0000000000218DD0 qword_218DD0    dq 0                    ; DATA XREF: sub_18A0↑r
.got:0000000000218DD8 qword_218DD8    dq 0                    ; DATA XREF: sub_18A0+6↑r
.got:0000000000218DE0 __ctype_toupper_loc_ptr dq offset __ctype_toupper_loc
.got:0000000000218DE0                                         ; DATA XREF: ___ctype_toupper_loc↑r
.got:0000000000218DE8 __uflow_ptr     dq offset __uflow       ; DATA XREF: ___uflow↑r
.got:0000000000218DF0 free_ptr        dq offset free          ; DATA XREF: _free↑r
.got:0000000000218DF8 abort_ptr       dq offset abort         ; DATA XREF: _abort↑r
.got:0000000000218E00 __errno_location_ptr dq offset __errno_location
.got:0000000000218E00                                         ; DATA XREF: ___errno_location↑r
.got:0000000000218E08 strncmp_ptr     dq offset strncmp       ; DATA XREF: _strncmp↑r
.got:0000000000218E10 _exit_ptr       dq offset _exit         ; DATA XREF: __exit↑r
.got:0000000000218E18 strcpy_ptr      dq offset strcpy        ; DATA XREF: _strcpy↑r
.got:0000000000218E20 __fpending_ptr  dq offset __fpending    ; DATA XREF: ___fpending↑r
.got:0000000000218E28 clearerr_unlocked_ptr dq offset clearerr_unlocked
.got:0000000000218E28                                         ; DATA XREF: _clearerr_unlocked↑r
.got:0000000000218E30 textdomain_ptr  dq offset textdomain    ; DATA XREF: _textdomain↑r
.got:0000000000218E38 __strtol_internal_ptr dq offset __strtol_internal
.got:0000000000218E38                                         ; DATA XREF: ___strtol_internal↑r
.got:0000000000218E40 iswctype_ptr    dq offset iswctype      ; DATA XREF: _iswctype↑r
.got:0000000000218E48 fclose_ptr      dq offset fclose        ; DATA XREF: _fclose↑r
.got:0000000000218E50 bindtextdomain_ptr dq offset bindtextdomain
.got:0000000000218E50                                         ; DATA XREF: _bindtextdomain↑r
.got:0000000000218E58 stpcpy_ptr      dq offset stpcpy        ; DATA XREF: _stpcpy↑r
.got:0000000000218E60 dcgettext_ptr   dq offset dcgettext     ; DATA XREF: _dcgettext↑r
.got:0000000000218E68 __ctype_get_mb_cur_max_ptr dq offset __ctype_get_mb_cur_max
.got:0000000000218E68                                         ; DATA XREF: ___ctype_get_mb_cur_max↑r
.got:0000000000218E70 strlen_ptr      dq offset strlen        ; DATA XREF: _strlen↑r
.got:0000000000218E78 __stack_chk_fail_ptr dq offset __stack_chk_fail
.got:0000000000218E78                                         ; DATA XREF: ___stack_chk_fail↑r
.got:0000000000218E80 getopt_long_ptr dq offset getopt_long   ; DATA XREF: _getopt_long↑r
.got:0000000000218E88 mbrtowc_ptr     dq offset mbrtowc       ; DATA XREF: _mbrtowc↑r
.got:0000000000218E90 strchr_ptr      dq offset strchr        ; DATA XREF: _strchr↑r
.got:0000000000218E98 __overflow_ptr  dq offset __overflow    ; DATA XREF: ___overflow↑r
.got:0000000000218EA0 strrchr_ptr     dq offset strrchr       ; DATA XREF: _strrchr↑r
.got:0000000000218EA8 lseek_ptr       dq offset lseek         ; DATA XREF: _lseek↑r
.got:0000000000218EB0 __assert_fail_ptr dq offset __assert_fail
.got:0000000000218EB0                                         ; DATA XREF: ___assert_fail↑r
.got:0000000000218EB8 memset_ptr      dq offset memset        ; DATA XREF: _memset↑r
.got:0000000000218EC0 posix_fadvise_ptr dq offset posix_fadvise
.got:0000000000218EC0                                         ; DATA XREF: _posix_fadvise↑r
.got:0000000000218EC8 memcmp_ptr      dq offset memcmp        ; DATA XREF: _memcmp↑r
.got:0000000000218ED0 wctype_ptr      dq offset wctype        ; DATA XREF: _wctype↑r
.got:0000000000218ED8 fputs_unlocked_ptr dq offset fputs_unlocked
.got:0000000000218ED8                                         ; DATA XREF: _fputs_unlocked↑r
.got:0000000000218EE0 calloc_ptr      dq offset calloc        ; DATA XREF: _calloc↑r
.got:0000000000218EE8 strcmp_ptr      dq offset strcmp        ; DATA XREF: _strcmp↑r
.got:0000000000218EF0 memcpy_ptr      dq offset memcpy        ; DATA XREF: _memcpy↑r
.got:0000000000218EF8 fileno_ptr      dq offset fileno        ; DATA XREF: _fileno↑r
.got:0000000000218F00 iswalnum_ptr    dq offset iswalnum      ; DATA XREF: _iswalnum↑r
.got:0000000000218F08 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc↑r
.got:0000000000218F10 wcrtomb_ptr     dq offset wcrtomb       ; DATA XREF: _wcrtomb↑r
.got:0000000000218F18 fflush_ptr      dq offset fflush        ; DATA XREF: _fflush↑r
.got:0000000000218F20 nl_langinfo_ptr dq offset nl_langinfo   ; DATA XREF: _nl_langinfo↑r
.got:0000000000218F28 __freading_ptr  dq offset __freading    ; DATA XREF: ___freading↑r
.got:0000000000218F30 fwrite_unlocked_ptr dq offset fwrite_unlocked
.got:0000000000218F30                                         ; DATA XREF: _fwrite_unlocked↑r
.got:0000000000218F38 realloc_ptr     dq offset realloc       ; DATA XREF: _realloc↑r
.got:0000000000218F40 setlocale_ptr   dq offset setlocale     ; DATA XREF: _setlocale↑r
.got:0000000000218F48 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk↑r
.got:0000000000218F50 btowc_ptr       dq offset btowc         ; DATA XREF: _btowc↑r
.got:0000000000218F58 memmove_ptr     dq offset memmove       ; DATA XREF: _memmove↑r
.got:0000000000218F60 error_ptr       dq offset error         ; DATA XREF: _error↑r
.got:0000000000218F68 fseeko_ptr      dq offset fseeko        ; DATA XREF: _fseeko↑r
.got:0000000000218F70 fopen_ptr       dq offset fopen         ; DATA XREF: _fopen↑r
.got:0000000000218F78 towlower_ptr    dq offset towlower      ; DATA XREF: _towlower↑r
.got:0000000000218F80 towupper_ptr    dq offset towupper      ; DATA XREF: _towupper↑r
.got:0000000000218F88 __cxa_atexit_ptr dq offset __cxa_atexit ; DATA XREF: ___cxa_atexit↑r
.got:0000000000218F90 exit_ptr        dq offset exit          ; DATA XREF: _exit↑r
.got:0000000000218F98 fwrite_ptr      dq offset fwrite        ; DATA XREF: _fwrite↑r
.got:0000000000218FA0 __fprintf_chk_ptr dq offset __fprintf_chk
.got:0000000000218FA0                                         ; DATA XREF: ___fprintf_chk↑r
.got:0000000000218FA8 mbsinit_ptr     dq offset mbsinit       ; DATA XREF: _mbsinit↑r
.got:0000000000218FB0 iswprint_ptr    dq offset iswprint      ; DATA XREF: _iswprint↑r
.got:0000000000218FB8 __ctype_tolower_loc_ptr dq offset __ctype_tolower_loc
.got:0000000000218FB8                                         ; DATA XREF: ___ctype_tolower_loc↑r
.got:0000000000218FC0 __ctype_b_loc_ptr dq offset __ctype_b_loc
.got:0000000000218FC0                                         ; DATA XREF: ___ctype_b_loc↑r
.got:0000000000218FC8 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:0000000000218FC8                                         ; DATA XREF: deregister_tm_clones+17↑r
.got:0000000000218FD0 __libc_start_main_ptr dq offset __libc_start_main
.got:0000000000218FD0                                         ; DATA XREF: start+24↑r
.got:0000000000218FD8 __gmon_start___ptr dq offset __gmon_start__
.got:0000000000218FD8                                         ; DATA XREF: _init_proc+4↑r
.got:0000000000218FE0 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:0000000000218FE0                                         ; DATA XREF: register_tm_clones+28↑r
.got:0000000000218FE8 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:0000000000218FE8                                         ; DATA XREF: __cxa_finalize↑r
.got:0000000000218FE8                                         ; __do_global_dtors_aux+9↑r
.got:0000000000218FE8 _got            ends
.got:0000000000218FE8
LOAD:0000000000218FF0 ; ===========================================================================
LOAD:0000000000218FF0
LOAD:0000000000218FF0 ; Segment type: Pure data
LOAD:0000000000218FF0 ; Segment permissions: Read/Write
LOAD:0000000000218FF0 LOAD            segment byte public 'DATA' use64
LOAD:0000000000218FF0                 assume cs:LOAD
LOAD:0000000000218FF0                 ;org 218FF0h
LOAD:0000000000218FF0                 align 20h
LOAD:0000000000218FF0 LOAD            ends
LOAD:0000000000218FF0
.data:0000000000219000 ; ===========================================================================
.data:0000000000219000
.data:0000000000219000 ; Segment type: Pure data
.data:0000000000219000 ; Segment permissions: Read/Write
.data:0000000000219000 _data           segment align_32 public 'DATA' use64
.data:0000000000219000                 assume cs:_data
.data:0000000000219000                 ;org 219000h
.data:0000000000219000                 public __data_start ; weak
.data:0000000000219000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:0000000000219000                                         ; data_start
.data:0000000000219001                 db    0
.data:0000000000219002                 db    0
.data:0000000000219003                 db    0
.data:0000000000219004                 db    0
.data:0000000000219005                 db    0
.data:0000000000219006                 db    0
.data:0000000000219007                 db    0
.data:0000000000219008                 public __dso_handle
.data:0000000000219008 ; void *_dso_handle
.data:0000000000219008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+17↑r
.data:0000000000219008                                         ; atexit↑r ...
.data:0000000000219010 lineno_width    dd 6                    ; DATA XREF: main+286↑w
.data:0000000000219010                                         ; main+532↑r ...
.data:0000000000219014                 align 8
.data:0000000000219018 blank_join      dq 1                    ; DATA XREF: main+3E3↑w
.data:0000000000219018                                         ; nl_file+318↑r
.data:0000000000219020 reset_numbers   db 1                    ; DATA XREF: main:loc_1E40↑w
.data:0000000000219020                                         ; nl_file+E6↑r ...
.data:0000000000219021                 align 8
.data:0000000000219028 page_incr       dq 1                    ; DATA XREF: main+323↑w
.data:0000000000219028                                         ; print_lineno+32↑r
.data:0000000000219030 starting_line_number dq 1               ; DATA XREF: main+2D8↑w
.data:0000000000219030                                         ; main+576↑r ...
.data:0000000000219038 lineno_format   dq offset FORMAT_RIGHT_NOLZ
.data:0000000000219038                                         ; DATA XREF: main+14E↑w
.data:0000000000219038                                         ; main+434↑w ...
.data:0000000000219038                                         ; "%*ld%s"
.data:0000000000219040 ; char *section_del
.data:0000000000219040 section_del     dq offset DEFAULT_SECTION_DELIMITERS
.data:0000000000219040                                         ; DATA XREF: main+109↑w
.data:0000000000219040                                         ; main+449↑r ...
.data:0000000000219040                                         ; "\\:"
.data:0000000000219048 separator_str   dq offset unk_145AC     ; DATA XREF: main+337↑w
.data:0000000000219048                                         ; main+524↑r ...
.data:0000000000219050 footer_type     dq offset aLn+1         ; DATA XREF: main+216↑o
.data:0000000000219050                                         ; nl_file+ED↑r
.data:0000000000219050                                         ; "n"
.data:0000000000219058 header_type     dq offset aLn+1         ; DATA XREF: main+1CE↑o
.data:0000000000219058                                         ; nl_file+21A↑r
.data:0000000000219058                                         ; "n"
.data:0000000000219060 body_type       dq offset aNumberFormat+0Ch
.data:0000000000219060                                         ; DATA XREF: main+356↑o
.data:0000000000219060                                         ; main+584↑r ...
.data:0000000000219060                                         ; "t"
.data:0000000000219068                 public Version
.data:0000000000219068 Version         dq offset a831          ; DATA XREF: main+176↑r
.data:0000000000219068                                         ; "8.31"
.data:0000000000219070                 public exit_failure
.data:0000000000219070 ; int exit_failure
.data:0000000000219070 exit_failure    dd 1                    ; DATA XREF: close_stdout:loc_2E82↑r
.data:0000000000219070                                         ; xalloc_die+17↑r
.data:0000000000219074                 align 20h
.data:0000000000219080                 public quote_quoting_options
.data:0000000000219080 quote_quoting_options db    8           ; DATA XREF: quote_n_mem↑o
.data:0000000000219080                                         ; quote_mem↑o ...
.data:0000000000219081                 db    0
.data:0000000000219082                 db    0
.data:0000000000219083                 db    0
.data:0000000000219084                 db    0
.data:0000000000219085                 db    0
.data:0000000000219086                 db    0
.data:0000000000219087                 db    0
.data:0000000000219088                 db    0
.data:0000000000219089                 db    0
.data:000000000021908A                 db    0
.data:000000000021908B                 db    0
.data:000000000021908C                 db    0
.data:000000000021908D                 db    0
.data:000000000021908E                 db    0
.data:000000000021908F                 db    0
.data:0000000000219090                 db    0
.data:0000000000219091                 db    0
.data:0000000000219092                 db    0
.data:0000000000219093                 db    0
.data:0000000000219094                 db    0
.data:0000000000219095                 db    0
.data:0000000000219096                 db    0
.data:0000000000219097                 db    0
.data:0000000000219098                 db    0
.data:0000000000219099                 db    0
.data:000000000021909A                 db    0
.data:000000000021909B                 db    0
.data:000000000021909C                 db    0
.data:000000000021909D                 db    0
.data:000000000021909E                 db    0
.data:000000000021909F                 db    0
.data:00000000002190A0                 db    0
.data:00000000002190A1                 db    0
.data:00000000002190A2                 db    0
.data:00000000002190A3                 db    0
.data:00000000002190A4                 db    0
.data:00000000002190A5                 db    0
.data:00000000002190A6                 db    0
.data:00000000002190A7                 db    0
.data:00000000002190A8                 db    0
.data:00000000002190A9                 db    0
.data:00000000002190AA                 db    0
.data:00000000002190AB                 db    0
.data:00000000002190AC                 db    0
.data:00000000002190AD                 db    0
.data:00000000002190AE                 db    0
.data:00000000002190AF                 db    0
.data:00000000002190B0                 db    0
.data:00000000002190B1                 db    0
.data:00000000002190B2                 db    0
.data:00000000002190B3                 db    0
.data:00000000002190B4                 db    0
.data:00000000002190B5                 db    0
.data:00000000002190B6                 db    0
.data:00000000002190B7                 db    0
.data:00000000002190B8 nslots          dd 1                    ; DATA XREF: quotearg_n_options+3A↑r
.data:00000000002190B8                                         ; quotearg_n_options:loc_447D↑r ...
.data:00000000002190BC                 align 20h
.data:00000000002190C0 ; void *slotvec
.data:00000000002190C0 slotvec         dq offset slotvec0      ; DATA XREF: quotearg_n_options+29↑r
.data:00000000002190C0                                         ; quotearg_n_options+76↑w ...
.data:00000000002190C8                 align 10h
.data:00000000002190D0 slotvec0        dq offset qword_100     ; DATA XREF: quotearg_n_options+54↑o
.data:00000000002190D0                                         ; quotearg_n_options+187↑r ...
.data:00000000002190D8 off_2190D8      dq offset slot0         ; DATA XREF: quotearg_free+62↑w
.data:00000000002190D8 _data           ends
.data:00000000002190D8
.bss:00000000002190E0 ; ===========================================================================
.bss:00000000002190E0
.bss:00000000002190E0 ; Segment type: Uninitialized
.bss:00000000002190E0 ; Segment permissions: Read/Write
.bss:00000000002190E0 _bss            segment align_32 public 'BSS' use64
.bss:00000000002190E0                 assume cs:_bss
.bss:00000000002190E0                 ;org 2190E0h
.bss:00000000002190E0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00000000002190E0                 public __bss_start ; weak
.bss:00000000002190E0 __bss_start     dq ?                    ; DATA XREF: LOAD:0000000000000940↑o
.bss:00000000002190E0                                         ; LOAD:00000000000009A0↑o ...
.bss:00000000002190E0                                         ; Alternative name is '__TMC_END__'
.bss:00000000002190E0                                         ; program_invocation_short_name@@GLIBC_2.2.5
.bss:00000000002190E0                                         ; _edata
.bss:00000000002190E0                                         ; Copy of shared data
.bss:00000000002190E8                 public stdout@@GLIBC_2_2_5
.bss:00000000002190E8 ; FILE *stdout
.bss:00000000002190E8 stdout@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000928↑o
.bss:00000000002190E8                                         ; main+16F↑r ...
.bss:00000000002190E8                                         ; Alternative name is 'stdout'
.bss:00000000002190E8                                         ; Copy of shared data
.bss:00000000002190F0                 public stdin@@GLIBC_2_2_5
.bss:00000000002190F0 ; FILE *stdin
.bss:00000000002190F0 stdin@@GLIBC_2_2_5 dq ?                 ; DATA XREF: LOAD:0000000000000958↑o
.bss:00000000002190F0                                         ; main:loc_229F↑r ...
.bss:00000000002190F0                                         ; Alternative name is 'stdin'
.bss:00000000002190F0                                         ; Copy of shared data
.bss:00000000002190F8                 public optind@@GLIBC_2_2_5
.bss:00000000002190F8 optind@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:00000000000009D0↑o
.bss:00000000002190F8                                         ; main+5A0↑r ...
.bss:00000000002190F8                                         ; Alternative name is 'optind'
.bss:00000000002190F8                                         ; Copy of shared data
.bss:00000000002190FC                 align 20h
.bss:0000000000219100                 public optarg@@GLIBC_2_2_5
.bss:0000000000219100 ; char *optarg
.bss:0000000000219100 optarg@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:00000000000009E8↑o
.bss:0000000000219100                                         ; main+102↑r ...
.bss:0000000000219100                                         ; Alternative name is 'optarg'
.bss:0000000000219100                                         ; Copy of shared data
.bss:0000000000219108                 public program_invocation_name@@GLIBC_2_2_5 ; weak
.bss:0000000000219108 program_invocation_name@@GLIBC_2_2_5 dq ?
.bss:0000000000219108                                         ; DATA XREF: LOAD:0000000000000970↑o
.bss:0000000000219108                                         ; LOAD:0000000000000988↑o ...
.bss:0000000000219108                                         ; Alternative name is '__progname_full@@GLIBC_2.2.5'
.bss:0000000000219108                                         ; Copy of shared data
.bss:0000000000219110                 align 20h
.bss:0000000000219120                 public stderr@@GLIBC_2_2_5
.bss:0000000000219120 ; FILE *stderr
.bss:0000000000219120 stderr@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:00000000000009B8↑o
.bss:0000000000219120                                         ; usage+3D↑r ...
.bss:0000000000219120                                         ; Alternative name is 'stderr'
.bss:0000000000219120                                         ; Copy of shared data
.bss:0000000000219128 completed_7697  db ?                    ; DATA XREF: __do_global_dtors_aux↑r
.bss:0000000000219128                                         ; __do_global_dtors_aux+28↑w
.bss:0000000000219129                 align 20h
.bss:0000000000219140 blank_lines_7093 dq ?                   ; DATA XREF: nl_file+32F↑r
.bss:0000000000219140                                         ; nl_file+33D↑w ...
.bss:0000000000219148 have_read_stdin db ?                    ; DATA XREF: main+72↑w
.bss:0000000000219148                                         ; main:loc_2261↑r ...
.bss:0000000000219149                 align 10h
.bss:0000000000219150 line_no         dq ?                    ; DATA XREF: main+57D↑w
.bss:0000000000219150                                         ; print_lineno+11↑r ...
.bss:0000000000219158 ; char *print_no_line_fmt
.bss:0000000000219158 print_no_line_fmt dq ?                  ; DATA XREF: main+550↑w
.bss:0000000000219158                                         ; nl_file+2D9↑r
.bss:0000000000219160 line_buf        db    ? ;               ; DATA XREF: main+50F↑o
.bss:0000000000219160                                         ; nl_file:loc_259F↑o
.bss:0000000000219161                 db    ? ;
.bss:0000000000219162                 db    ? ;
.bss:0000000000219163                 db    ? ;
.bss:0000000000219164                 db    ? ;
.bss:0000000000219165                 db    ? ;
.bss:0000000000219166                 db    ? ;
.bss:0000000000219167                 db    ? ;
.bss:0000000000219168 ; size_t n
.bss:0000000000219168 n               dq ?                    ; DATA XREF: nl_file:loc_25D4↑r
.bss:0000000000219168                                         ; nl_file+1D3↑r ...
.bss:0000000000219170 ; void *s1
.bss:0000000000219170 s1              dq ?                    ; DATA XREF: nl_file+90↑r
.bss:0000000000219170                                         ; nl_file+1E1↑r ...
.bss:0000000000219178 footer_del_len  dq ?                    ; DATA XREF: main+4ED↑w
.bss:0000000000219178                                         ; nl_file:loc_261F↑r
.bss:0000000000219180 ; void *footer_del
.bss:0000000000219180 footer_del      dq ?                    ; DATA XREF: main+503↑w
.bss:0000000000219180                                         ; nl_file+CC↑r
.bss:0000000000219188 body_del_len    dq ?                    ; DATA XREF: main+4B6↑w
.bss:0000000000219188                                         ; nl_file:loc_2612↑r
.bss:0000000000219190 ; void *body_del
.bss:0000000000219190 body_del        dq ?                    ; DATA XREF: main+4D0↑w
.bss:0000000000219190                                         ; nl_file:loc_27B0↑r
.bss:0000000000219198 header_del_len  dq ?                    ; DATA XREF: main+473↑w
.bss:0000000000219198                                         ; nl_file+A5↑r
.bss:00000000002191A0 ; void *header_del
.bss:00000000002191A0 header_del      dq ?                    ; DATA XREF: main+48D↑w
.bss:00000000002191A0                                         ; nl_file:loc_2760↑r
.bss:00000000002191A8 current_regex   dq ?                    ; DATA XREF: main+599↑w
.bss:00000000002191A8                                         ; nl_file+F4↑w ...
.bss:00000000002191B0                 align 20h
.bss:00000000002191C0 footer_fastmap  db    ? ;               ; DATA XREF: main:loc_1E98↑o
.bss:00000000002191C1                 db    ? ;
.bss:00000000002191C2                 db    ? ;
.bss:00000000002191C3                 db    ? ;
.bss:00000000002191C4                 db    ? ;
.bss:00000000002191C5                 db    ? ;
.bss:00000000002191C6                 db    ? ;
.bss:00000000002191C7                 db    ? ;
.bss:00000000002191C8                 db    ? ;
.bss:00000000002191C9                 db    ? ;
.bss:00000000002191CA                 db    ? ;
.bss:00000000002191CB                 db    ? ;
.bss:00000000002191CC                 db    ? ;
.bss:00000000002191CD                 db    ? ;
.bss:00000000002191CE                 db    ? ;
.bss:00000000002191CF                 db    ? ;
.bss:00000000002191D0                 db    ? ;
.bss:00000000002191D1                 db    ? ;
.bss:00000000002191D2                 db    ? ;
.bss:00000000002191D3                 db    ? ;
.bss:00000000002191D4                 db    ? ;
.bss:00000000002191D5                 db    ? ;
.bss:00000000002191D6                 db    ? ;
.bss:00000000002191D7                 db    ? ;
.bss:00000000002191D8                 db    ? ;
.bss:00000000002191D9                 db    ? ;
.bss:00000000002191DA                 db    ? ;
.bss:00000000002191DB                 db    ? ;
.bss:00000000002191DC                 db    ? ;
.bss:00000000002191DD                 db    ? ;
.bss:00000000002191DE                 db    ? ;
.bss:00000000002191DF                 db    ? ;
.bss:00000000002191E0                 db    ? ;
.bss:00000000002191E1                 db    ? ;
.bss:00000000002191E2                 db    ? ;
.bss:00000000002191E3                 db    ? ;
.bss:00000000002191E4                 db    ? ;
.bss:00000000002191E5                 db    ? ;
.bss:00000000002191E6                 db    ? ;
.bss:00000000002191E7                 db    ? ;
.bss:00000000002191E8                 db    ? ;
.bss:00000000002191E9                 db    ? ;
.bss:00000000002191EA                 db    ? ;
.bss:00000000002191EB                 db    ? ;
.bss:00000000002191EC                 db    ? ;
.bss:00000000002191ED                 db    ? ;
.bss:00000000002191EE                 db    ? ;
.bss:00000000002191EF                 db    ? ;
.bss:00000000002191F0                 db    ? ;
.bss:00000000002191F1                 db    ? ;
.bss:00000000002191F2                 db    ? ;
.bss:00000000002191F3                 db    ? ;
.bss:00000000002191F4                 db    ? ;
.bss:00000000002191F5                 db    ? ;
.bss:00000000002191F6                 db    ? ;
.bss:00000000002191F7                 db    ? ;
.bss:00000000002191F8                 db    ? ;
.bss:00000000002191F9                 db    ? ;
.bss:00000000002191FA                 db    ? ;
.bss:00000000002191FB                 db    ? ;
.bss:00000000002191FC                 db    ? ;
.bss:00000000002191FD                 db    ? ;
.bss:00000000002191FE                 db    ? ;
.bss:00000000002191FF                 db    ? ;
.bss:0000000000219200                 db    ? ;
.bss:0000000000219201                 db    ? ;
.bss:0000000000219202                 db    ? ;
.bss:0000000000219203                 db    ? ;
.bss:0000000000219204                 db    ? ;
.bss:0000000000219205                 db    ? ;
.bss:0000000000219206                 db    ? ;
.bss:0000000000219207                 db    ? ;
.bss:0000000000219208                 db    ? ;
.bss:0000000000219209                 db    ? ;
.bss:000000000021920A                 db    ? ;
.bss:000000000021920B                 db    ? ;
.bss:000000000021920C                 db    ? ;
.bss:000000000021920D                 db    ? ;
.bss:000000000021920E                 db    ? ;
.bss:000000000021920F                 db    ? ;
.bss:0000000000219210                 db    ? ;
.bss:0000000000219211                 db    ? ;
.bss:0000000000219212                 db    ? ;
.bss:0000000000219213                 db    ? ;
.bss:0000000000219214                 db    ? ;
.bss:0000000000219215                 db    ? ;
.bss:0000000000219216                 db    ? ;
.bss:0000000000219217                 db    ? ;
.bss:0000000000219218                 db    ? ;
.bss:0000000000219219                 db    ? ;
.bss:000000000021921A                 db    ? ;
.bss:000000000021921B                 db    ? ;
.bss:000000000021921C                 db    ? ;
.bss:000000000021921D                 db    ? ;
.bss:000000000021921E                 db    ? ;
.bss:000000000021921F                 db    ? ;
.bss:0000000000219220                 db    ? ;
.bss:0000000000219221                 db    ? ;
.bss:0000000000219222                 db    ? ;
.bss:0000000000219223                 db    ? ;
.bss:0000000000219224                 db    ? ;
.bss:0000000000219225                 db    ? ;
.bss:0000000000219226                 db    ? ;
.bss:0000000000219227                 db    ? ;
.bss:0000000000219228                 db    ? ;
.bss:0000000000219229                 db    ? ;
.bss:000000000021922A                 db    ? ;
.bss:000000000021922B                 db    ? ;
.bss:000000000021922C                 db    ? ;
.bss:000000000021922D                 db    ? ;
.bss:000000000021922E                 db    ? ;
.bss:000000000021922F                 db    ? ;
.bss:0000000000219230                 db    ? ;
.bss:0000000000219231                 db    ? ;
.bss:0000000000219232                 db    ? ;
.bss:0000000000219233                 db    ? ;
.bss:0000000000219234                 db    ? ;
.bss:0000000000219235                 db    ? ;
.bss:0000000000219236                 db    ? ;
.bss:0000000000219237                 db    ? ;
.bss:0000000000219238                 db    ? ;
.bss:0000000000219239                 db    ? ;
.bss:000000000021923A                 db    ? ;
.bss:000000000021923B                 db    ? ;
.bss:000000000021923C                 db    ? ;
.bss:000000000021923D                 db    ? ;
.bss:000000000021923E                 db    ? ;
.bss:000000000021923F                 db    ? ;
.bss:0000000000219240                 db    ? ;
.bss:0000000000219241                 db    ? ;
.bss:0000000000219242                 db    ? ;
.bss:0000000000219243                 db    ? ;
.bss:0000000000219244                 db    ? ;
.bss:0000000000219245                 db    ? ;
.bss:0000000000219246                 db    ? ;
.bss:0000000000219247                 db    ? ;
.bss:0000000000219248                 db    ? ;
.bss:0000000000219249                 db    ? ;
.bss:000000000021924A                 db    ? ;
.bss:000000000021924B                 db    ? ;
.bss:000000000021924C                 db    ? ;
.bss:000000000021924D                 db    ? ;
.bss:000000000021924E                 db    ? ;
.bss:000000000021924F                 db    ? ;
.bss:0000000000219250                 db    ? ;
.bss:0000000000219251                 db    ? ;
.bss:0000000000219252                 db    ? ;
.bss:0000000000219253                 db    ? ;
.bss:0000000000219254                 db    ? ;
.bss:0000000000219255                 db    ? ;
.bss:0000000000219256                 db    ? ;
.bss:0000000000219257                 db    ? ;
.bss:0000000000219258                 db    ? ;
.bss:0000000000219259                 db    ? ;
.bss:000000000021925A                 db    ? ;
.bss:000000000021925B                 db    ? ;
.bss:000000000021925C                 db    ? ;
.bss:000000000021925D                 db    ? ;
.bss:000000000021925E                 db    ? ;
.bss:000000000021925F                 db    ? ;
.bss:0000000000219260                 db    ? ;
.bss:0000000000219261                 db    ? ;
.bss:0000000000219262                 db    ? ;
.bss:0000000000219263                 db    ? ;
.bss:0000000000219264                 db    ? ;
.bss:0000000000219265                 db    ? ;
.bss:0000000000219266                 db    ? ;
.bss:0000000000219267                 db    ? ;
.bss:0000000000219268                 db    ? ;
.bss:0000000000219269                 db    ? ;
.bss:000000000021926A                 db    ? ;
.bss:000000000021926B                 db    ? ;
.bss:000000000021926C                 db    ? ;
.bss:000000000021926D                 db    ? ;
.bss:000000000021926E                 db    ? ;
.bss:000000000021926F                 db    ? ;
.bss:0000000000219270                 db    ? ;
.bss:0000000000219271                 db    ? ;
.bss:0000000000219272                 db    ? ;
.bss:0000000000219273                 db    ? ;
.bss:0000000000219274                 db    ? ;
.bss:0000000000219275                 db    ? ;
.bss:0000000000219276                 db    ? ;
.bss:0000000000219277                 db    ? ;
.bss:0000000000219278                 db    ? ;
.bss:0000000000219279                 db    ? ;
.bss:000000000021927A                 db    ? ;
.bss:000000000021927B                 db    ? ;
.bss:000000000021927C                 db    ? ;
.bss:000000000021927D                 db    ? ;
.bss:000000000021927E                 db    ? ;
.bss:000000000021927F                 db    ? ;
.bss:0000000000219280                 db    ? ;
.bss:0000000000219281                 db    ? ;
.bss:0000000000219282                 db    ? ;
.bss:0000000000219283                 db    ? ;
.bss:0000000000219284                 db    ? ;
.bss:0000000000219285                 db    ? ;
.bss:0000000000219286                 db    ? ;
.bss:0000000000219287                 db    ? ;
.bss:0000000000219288                 db    ? ;
.bss:0000000000219289                 db    ? ;
.bss:000000000021928A                 db    ? ;
.bss:000000000021928B                 db    ? ;
.bss:000000000021928C                 db    ? ;
.bss:000000000021928D                 db    ? ;
.bss:000000000021928E                 db    ? ;
.bss:000000000021928F                 db    ? ;
.bss:0000000000219290                 db    ? ;
.bss:0000000000219291                 db    ? ;
.bss:0000000000219292                 db    ? ;
.bss:0000000000219293                 db    ? ;
.bss:0000000000219294                 db    ? ;
.bss:0000000000219295                 db    ? ;
.bss:0000000000219296                 db    ? ;
.bss:0000000000219297                 db    ? ;
.bss:0000000000219298                 db    ? ;
.bss:0000000000219299                 db    ? ;
.bss:000000000021929A                 db    ? ;
.bss:000000000021929B                 db    ? ;
.bss:000000000021929C                 db    ? ;
.bss:000000000021929D                 db    ? ;
.bss:000000000021929E                 db    ? ;
.bss:000000000021929F                 db    ? ;
.bss:00000000002192A0                 db    ? ;
.bss:00000000002192A1                 db    ? ;
.bss:00000000002192A2                 db    ? ;
.bss:00000000002192A3                 db    ? ;
.bss:00000000002192A4                 db    ? ;
.bss:00000000002192A5                 db    ? ;
.bss:00000000002192A6                 db    ? ;
.bss:00000000002192A7                 db    ? ;
.bss:00000000002192A8                 db    ? ;
.bss:00000000002192A9                 db    ? ;
.bss:00000000002192AA                 db    ? ;
.bss:00000000002192AB                 db    ? ;
.bss:00000000002192AC                 db    ? ;
.bss:00000000002192AD                 db    ? ;
.bss:00000000002192AE                 db    ? ;
.bss:00000000002192AF                 db    ? ;
.bss:00000000002192B0                 db    ? ;
.bss:00000000002192B1                 db    ? ;
.bss:00000000002192B2                 db    ? ;
.bss:00000000002192B3                 db    ? ;
.bss:00000000002192B4                 db    ? ;
.bss:00000000002192B5                 db    ? ;
.bss:00000000002192B6                 db    ? ;
.bss:00000000002192B7                 db    ? ;
.bss:00000000002192B8                 db    ? ;
.bss:00000000002192B9                 db    ? ;
.bss:00000000002192BA                 db    ? ;
.bss:00000000002192BB                 db    ? ;
.bss:00000000002192BC                 db    ? ;
.bss:00000000002192BD                 db    ? ;
.bss:00000000002192BE                 db    ? ;
.bss:00000000002192BF                 db    ? ;
.bss:00000000002192C0 header_fastmap  db    ? ;               ; DATA XREF: main:loc_1E50↑o
.bss:00000000002192C1                 db    ? ;
.bss:00000000002192C2                 db    ? ;
.bss:00000000002192C3                 db    ? ;
.bss:00000000002192C4                 db    ? ;
.bss:00000000002192C5                 db    ? ;
.bss:00000000002192C6                 db    ? ;
.bss:00000000002192C7                 db    ? ;
.bss:00000000002192C8                 db    ? ;
.bss:00000000002192C9                 db    ? ;
.bss:00000000002192CA                 db    ? ;
.bss:00000000002192CB                 db    ? ;
.bss:00000000002192CC                 db    ? ;
.bss:00000000002192CD                 db    ? ;
.bss:00000000002192CE                 db    ? ;
.bss:00000000002192CF                 db    ? ;
.bss:00000000002192D0                 db    ? ;
.bss:00000000002192D1                 db    ? ;
.bss:00000000002192D2                 db    ? ;
.bss:00000000002192D3                 db    ? ;
.bss:00000000002192D4                 db    ? ;
.bss:00000000002192D5                 db    ? ;
.bss:00000000002192D6                 db    ? ;
.bss:00000000002192D7                 db    ? ;
.bss:00000000002192D8                 db    ? ;
.bss:00000000002192D9                 db    ? ;
.bss:00000000002192DA                 db    ? ;
.bss:00000000002192DB                 db    ? ;
.bss:00000000002192DC                 db    ? ;
.bss:00000000002192DD                 db    ? ;
.bss:00000000002192DE                 db    ? ;
.bss:00000000002192DF                 db    ? ;
.bss:00000000002192E0                 db    ? ;
.bss:00000000002192E1                 db    ? ;
.bss:00000000002192E2                 db    ? ;
.bss:00000000002192E3                 db    ? ;
.bss:00000000002192E4                 db    ? ;
.bss:00000000002192E5                 db    ? ;
.bss:00000000002192E6                 db    ? ;
.bss:00000000002192E7                 db    ? ;
.bss:00000000002192E8                 db    ? ;
.bss:00000000002192E9                 db    ? ;
.bss:00000000002192EA                 db    ? ;
.bss:00000000002192EB                 db    ? ;
.bss:00000000002192EC                 db    ? ;
.bss:00000000002192ED                 db    ? ;
.bss:00000000002192EE                 db    ? ;
.bss:00000000002192EF                 db    ? ;
.bss:00000000002192F0                 db    ? ;
.bss:00000000002192F1                 db    ? ;
.bss:00000000002192F2                 db    ? ;
.bss:00000000002192F3                 db    ? ;
.bss:00000000002192F4                 db    ? ;
.bss:00000000002192F5                 db    ? ;
.bss:00000000002192F6                 db    ? ;
.bss:00000000002192F7                 db    ? ;
.bss:00000000002192F8                 db    ? ;
.bss:00000000002192F9                 db    ? ;
.bss:00000000002192FA                 db    ? ;
.bss:00000000002192FB                 db    ? ;
.bss:00000000002192FC                 db    ? ;
.bss:00000000002192FD                 db    ? ;
.bss:00000000002192FE                 db    ? ;
.bss:00000000002192FF                 db    ? ;
.bss:0000000000219300                 db    ? ;
.bss:0000000000219301                 db    ? ;
.bss:0000000000219302                 db    ? ;
.bss:0000000000219303                 db    ? ;
.bss:0000000000219304                 db    ? ;
.bss:0000000000219305                 db    ? ;
.bss:0000000000219306                 db    ? ;
.bss:0000000000219307                 db    ? ;
.bss:0000000000219308                 db    ? ;
.bss:0000000000219309                 db    ? ;
.bss:000000000021930A                 db    ? ;
.bss:000000000021930B                 db    ? ;
.bss:000000000021930C                 db    ? ;
.bss:000000000021930D                 db    ? ;
.bss:000000000021930E                 db    ? ;
.bss:000000000021930F                 db    ? ;
.bss:0000000000219310                 db    ? ;
.bss:0000000000219311                 db    ? ;
.bss:0000000000219312                 db    ? ;
.bss:0000000000219313                 db    ? ;
.bss:0000000000219314                 db    ? ;
.bss:0000000000219315                 db    ? ;
.bss:0000000000219316                 db    ? ;
.bss:0000000000219317                 db    ? ;
.bss:0000000000219318                 db    ? ;
.bss:0000000000219319                 db    ? ;
.bss:000000000021931A                 db    ? ;
.bss:000000000021931B                 db    ? ;
.bss:000000000021931C                 db    ? ;
.bss:000000000021931D                 db    ? ;
.bss:000000000021931E                 db    ? ;
.bss:000000000021931F                 db    ? ;
.bss:0000000000219320                 db    ? ;
.bss:0000000000219321                 db    ? ;
.bss:0000000000219322                 db    ? ;
.bss:0000000000219323                 db    ? ;
.bss:0000000000219324                 db    ? ;
.bss:0000000000219325                 db    ? ;
.bss:0000000000219326                 db    ? ;
.bss:0000000000219327                 db    ? ;
.bss:0000000000219328                 db    ? ;
.bss:0000000000219329                 db    ? ;
.bss:000000000021932A                 db    ? ;
.bss:000000000021932B                 db    ? ;
.bss:000000000021932C                 db    ? ;
.bss:000000000021932D                 db    ? ;
.bss:000000000021932E                 db    ? ;
.bss:000000000021932F                 db    ? ;
.bss:0000000000219330                 db    ? ;
.bss:0000000000219331                 db    ? ;
.bss:0000000000219332                 db    ? ;
.bss:0000000000219333                 db    ? ;
.bss:0000000000219334                 db    ? ;
.bss:0000000000219335                 db    ? ;
.bss:0000000000219336                 db    ? ;
.bss:0000000000219337                 db    ? ;
.bss:0000000000219338                 db    ? ;
.bss:0000000000219339                 db    ? ;
.bss:000000000021933A                 db    ? ;
.bss:000000000021933B                 db    ? ;
.bss:000000000021933C                 db    ? ;
.bss:000000000021933D                 db    ? ;
.bss:000000000021933E                 db    ? ;
.bss:000000000021933F                 db    ? ;
.bss:0000000000219340                 db    ? ;
.bss:0000000000219341                 db    ? ;
.bss:0000000000219342                 db    ? ;
.bss:0000000000219343                 db    ? ;
.bss:0000000000219344                 db    ? ;
.bss:0000000000219345                 db    ? ;
.bss:0000000000219346                 db    ? ;
.bss:0000000000219347                 db    ? ;
.bss:0000000000219348                 db    ? ;
.bss:0000000000219349                 db    ? ;
.bss:000000000021934A                 db    ? ;
.bss:000000000021934B                 db    ? ;
.bss:000000000021934C                 db    ? ;
.bss:000000000021934D                 db    ? ;
.bss:000000000021934E                 db    ? ;
.bss:000000000021934F                 db    ? ;
.bss:0000000000219350                 db    ? ;
.bss:0000000000219351                 db    ? ;
.bss:0000000000219352                 db    ? ;
.bss:0000000000219353                 db    ? ;
.bss:0000000000219354                 db    ? ;
.bss:0000000000219355                 db    ? ;
.bss:0000000000219356                 db    ? ;
.bss:0000000000219357                 db    ? ;
.bss:0000000000219358                 db    ? ;
.bss:0000000000219359                 db    ? ;
.bss:000000000021935A                 db    ? ;
.bss:000000000021935B                 db    ? ;
.bss:000000000021935C                 db    ? ;
.bss:000000000021935D                 db    ? ;
.bss:000000000021935E                 db    ? ;
.bss:000000000021935F                 db    ? ;
.bss:0000000000219360                 db    ? ;
.bss:0000000000219361                 db    ? ;
.bss:0000000000219362                 db    ? ;
.bss:0000000000219363                 db    ? ;
.bss:0000000000219364                 db    ? ;
.bss:0000000000219365                 db    ? ;
.bss:0000000000219366                 db    ? ;
.bss:0000000000219367                 db    ? ;
.bss:0000000000219368                 db    ? ;
.bss:0000000000219369                 db    ? ;
.bss:000000000021936A                 db    ? ;
.bss:000000000021936B                 db    ? ;
.bss:000000000021936C                 db    ? ;
.bss:000000000021936D                 db    ? ;
.bss:000000000021936E                 db    ? ;
.bss:000000000021936F                 db    ? ;
.bss:0000000000219370                 db    ? ;
.bss:0000000000219371                 db    ? ;
.bss:0000000000219372                 db    ? ;
.bss:0000000000219373                 db    ? ;
.bss:0000000000219374                 db    ? ;
.bss:0000000000219375                 db    ? ;
.bss:0000000000219376                 db    ? ;
.bss:0000000000219377                 db    ? ;
.bss:0000000000219378                 db    ? ;
.bss:0000000000219379                 db    ? ;
.bss:000000000021937A                 db    ? ;
.bss:000000000021937B                 db    ? ;
.bss:000000000021937C                 db    ? ;
.bss:000000000021937D                 db    ? ;
.bss:000000000021937E                 db    ? ;
.bss:000000000021937F                 db    ? ;
.bss:0000000000219380                 db    ? ;
.bss:0000000000219381                 db    ? ;
.bss:0000000000219382                 db    ? ;
.bss:0000000000219383                 db    ? ;
.bss:0000000000219384                 db    ? ;
.bss:0000000000219385                 db    ? ;
.bss:0000000000219386                 db    ? ;
.bss:0000000000219387                 db    ? ;
.bss:0000000000219388                 db    ? ;
.bss:0000000000219389                 db    ? ;
.bss:000000000021938A                 db    ? ;
.bss:000000000021938B                 db    ? ;
.bss:000000000021938C                 db    ? ;
.bss:000000000021938D                 db    ? ;
.bss:000000000021938E                 db    ? ;
.bss:000000000021938F                 db    ? ;
.bss:0000000000219390                 db    ? ;
.bss:0000000000219391                 db    ? ;
.bss:0000000000219392                 db    ? ;
.bss:0000000000219393                 db    ? ;
.bss:0000000000219394                 db    ? ;
.bss:0000000000219395                 db    ? ;
.bss:0000000000219396                 db    ? ;
.bss:0000000000219397                 db    ? ;
.bss:0000000000219398                 db    ? ;
.bss:0000000000219399                 db    ? ;
.bss:000000000021939A                 db    ? ;
.bss:000000000021939B                 db    ? ;
.bss:000000000021939C                 db    ? ;
.bss:000000000021939D                 db    ? ;
.bss:000000000021939E                 db    ? ;
.bss:000000000021939F                 db    ? ;
.bss:00000000002193A0                 db    ? ;
.bss:00000000002193A1                 db    ? ;
.bss:00000000002193A2                 db    ? ;
.bss:00000000002193A3                 db    ? ;
.bss:00000000002193A4                 db    ? ;
.bss:00000000002193A5                 db    ? ;
.bss:00000000002193A6                 db    ? ;
.bss:00000000002193A7                 db    ? ;
.bss:00000000002193A8                 db    ? ;
.bss:00000000002193A9                 db    ? ;
.bss:00000000002193AA                 db    ? ;
.bss:00000000002193AB                 db    ? ;
.bss:00000000002193AC                 db    ? ;
.bss:00000000002193AD                 db    ? ;
.bss:00000000002193AE                 db    ? ;
.bss:00000000002193AF                 db    ? ;
.bss:00000000002193B0                 db    ? ;
.bss:00000000002193B1                 db    ? ;
.bss:00000000002193B2                 db    ? ;
.bss:00000000002193B3                 db    ? ;
.bss:00000000002193B4                 db    ? ;
.bss:00000000002193B5                 db    ? ;
.bss:00000000002193B6                 db    ? ;
.bss:00000000002193B7                 db    ? ;
.bss:00000000002193B8                 db    ? ;
.bss:00000000002193B9                 db    ? ;
.bss:00000000002193BA                 db    ? ;
.bss:00000000002193BB                 db    ? ;
.bss:00000000002193BC                 db    ? ;
.bss:00000000002193BD                 db    ? ;
.bss:00000000002193BE                 db    ? ;
.bss:00000000002193BF                 db    ? ;
.bss:00000000002193C0 body_fastmap    db    ? ;               ; DATA XREF: main:loc_1FD8↑o
.bss:00000000002193C1                 db    ? ;
.bss:00000000002193C2                 db    ? ;
.bss:00000000002193C3                 db    ? ;
.bss:00000000002193C4                 db    ? ;
.bss:00000000002193C5                 db    ? ;
.bss:00000000002193C6                 db    ? ;
.bss:00000000002193C7                 db    ? ;
.bss:00000000002193C8                 db    ? ;
.bss:00000000002193C9                 db    ? ;
.bss:00000000002193CA                 db    ? ;
.bss:00000000002193CB                 db    ? ;
.bss:00000000002193CC                 db    ? ;
.bss:00000000002193CD                 db    ? ;
.bss:00000000002193CE                 db    ? ;
.bss:00000000002193CF                 db    ? ;
.bss:00000000002193D0                 db    ? ;
.bss:00000000002193D1                 db    ? ;
.bss:00000000002193D2                 db    ? ;
.bss:00000000002193D3                 db    ? ;
.bss:00000000002193D4                 db    ? ;
.bss:00000000002193D5                 db    ? ;
.bss:00000000002193D6                 db    ? ;
.bss:00000000002193D7                 db    ? ;
.bss:00000000002193D8                 db    ? ;
.bss:00000000002193D9                 db    ? ;
.bss:00000000002193DA                 db    ? ;
.bss:00000000002193DB                 db    ? ;
.bss:00000000002193DC                 db    ? ;
.bss:00000000002193DD                 db    ? ;
.bss:00000000002193DE                 db    ? ;
.bss:00000000002193DF                 db    ? ;
.bss:00000000002193E0                 db    ? ;
.bss:00000000002193E1                 db    ? ;
.bss:00000000002193E2                 db    ? ;
.bss:00000000002193E3                 db    ? ;
.bss:00000000002193E4                 db    ? ;
.bss:00000000002193E5                 db    ? ;
.bss:00000000002193E6                 db    ? ;
.bss:00000000002193E7                 db    ? ;
.bss:00000000002193E8                 db    ? ;
.bss:00000000002193E9                 db    ? ;
.bss:00000000002193EA                 db    ? ;
.bss:00000000002193EB                 db    ? ;
.bss:00000000002193EC                 db    ? ;
.bss:00000000002193ED                 db    ? ;
.bss:00000000002193EE                 db    ? ;
.bss:00000000002193EF                 db    ? ;
.bss:00000000002193F0                 db    ? ;
.bss:00000000002193F1                 db    ? ;
.bss:00000000002193F2                 db    ? ;
.bss:00000000002193F3                 db    ? ;
.bss:00000000002193F4                 db    ? ;
.bss:00000000002193F5                 db    ? ;
.bss:00000000002193F6                 db    ? ;
.bss:00000000002193F7                 db    ? ;
.bss:00000000002193F8                 db    ? ;
.bss:00000000002193F9                 db    ? ;
.bss:00000000002193FA                 db    ? ;
.bss:00000000002193FB                 db    ? ;
.bss:00000000002193FC                 db    ? ;
.bss:00000000002193FD                 db    ? ;
.bss:00000000002193FE                 db    ? ;
.bss:00000000002193FF                 db    ? ;
.bss:0000000000219400                 db    ? ;
.bss:0000000000219401                 db    ? ;
.bss:0000000000219402                 db    ? ;
.bss:0000000000219403                 db    ? ;
.bss:0000000000219404                 db    ? ;
.bss:0000000000219405                 db    ? ;
.bss:0000000000219406                 db    ? ;
.bss:0000000000219407                 db    ? ;
.bss:0000000000219408                 db    ? ;
.bss:0000000000219409                 db    ? ;
.bss:000000000021940A                 db    ? ;
.bss:000000000021940B                 db    ? ;
.bss:000000000021940C                 db    ? ;
.bss:000000000021940D                 db    ? ;
.bss:000000000021940E                 db    ? ;
.bss:000000000021940F                 db    ? ;
.bss:0000000000219410                 db    ? ;
.bss:0000000000219411                 db    ? ;
.bss:0000000000219412                 db    ? ;
.bss:0000000000219413                 db    ? ;
.bss:0000000000219414                 db    ? ;
.bss:0000000000219415                 db    ? ;
.bss:0000000000219416                 db    ? ;
.bss:0000000000219417                 db    ? ;
.bss:0000000000219418                 db    ? ;
.bss:0000000000219419                 db    ? ;
.bss:000000000021941A                 db    ? ;
.bss:000000000021941B                 db    ? ;
.bss:000000000021941C                 db    ? ;
.bss:000000000021941D                 db    ? ;
.bss:000000000021941E                 db    ? ;
.bss:000000000021941F                 db    ? ;
.bss:0000000000219420                 db    ? ;
.bss:0000000000219421                 db    ? ;
.bss:0000000000219422                 db    ? ;
.bss:0000000000219423                 db    ? ;
.bss:0000000000219424                 db    ? ;
.bss:0000000000219425                 db    ? ;
.bss:0000000000219426                 db    ? ;
.bss:0000000000219427                 db    ? ;
.bss:0000000000219428                 db    ? ;
.bss:0000000000219429                 db    ? ;
.bss:000000000021942A                 db    ? ;
.bss:000000000021942B                 db    ? ;
.bss:000000000021942C                 db    ? ;
.bss:000000000021942D                 db    ? ;
.bss:000000000021942E                 db    ? ;
.bss:000000000021942F                 db    ? ;
.bss:0000000000219430                 db    ? ;
.bss:0000000000219431                 db    ? ;
.bss:0000000000219432                 db    ? ;
.bss:0000000000219433                 db    ? ;
.bss:0000000000219434                 db    ? ;
.bss:0000000000219435                 db    ? ;
.bss:0000000000219436                 db    ? ;
.bss:0000000000219437                 db    ? ;
.bss:0000000000219438                 db    ? ;
.bss:0000000000219439                 db    ? ;
.bss:000000000021943A                 db    ? ;
.bss:000000000021943B                 db    ? ;
.bss:000000000021943C                 db    ? ;
.bss:000000000021943D                 db    ? ;
.bss:000000000021943E                 db    ? ;
.bss:000000000021943F                 db    ? ;
.bss:0000000000219440                 db    ? ;
.bss:0000000000219441                 db    ? ;
.bss:0000000000219442                 db    ? ;
.bss:0000000000219443                 db    ? ;
.bss:0000000000219444                 db    ? ;
.bss:0000000000219445                 db    ? ;
.bss:0000000000219446                 db    ? ;
.bss:0000000000219447                 db    ? ;
.bss:0000000000219448                 db    ? ;
.bss:0000000000219449                 db    ? ;
.bss:000000000021944A                 db    ? ;
.bss:000000000021944B                 db    ? ;
.bss:000000000021944C                 db    ? ;
.bss:000000000021944D                 db    ? ;
.bss:000000000021944E                 db    ? ;
.bss:000000000021944F                 db    ? ;
.bss:0000000000219450                 db    ? ;
.bss:0000000000219451                 db    ? ;
.bss:0000000000219452                 db    ? ;
.bss:0000000000219453                 db    ? ;
.bss:0000000000219454                 db    ? ;
.bss:0000000000219455                 db    ? ;
.bss:0000000000219456                 db    ? ;
.bss:0000000000219457                 db    ? ;
.bss:0000000000219458                 db    ? ;
.bss:0000000000219459                 db    ? ;
.bss:000000000021945A                 db    ? ;
.bss:000000000021945B                 db    ? ;
.bss:000000000021945C                 db    ? ;
.bss:000000000021945D                 db    ? ;
.bss:000000000021945E                 db    ? ;
.bss:000000000021945F                 db    ? ;
.bss:0000000000219460                 db    ? ;
.bss:0000000000219461                 db    ? ;
.bss:0000000000219462                 db    ? ;
.bss:0000000000219463                 db    ? ;
.bss:0000000000219464                 db    ? ;
.bss:0000000000219465                 db    ? ;
.bss:0000000000219466                 db    ? ;
.bss:0000000000219467                 db    ? ;
.bss:0000000000219468                 db    ? ;
.bss:0000000000219469                 db    ? ;
.bss:000000000021946A                 db    ? ;
.bss:000000000021946B                 db    ? ;
.bss:000000000021946C                 db    ? ;
.bss:000000000021946D                 db    ? ;
.bss:000000000021946E                 db    ? ;
.bss:000000000021946F                 db    ? ;
.bss:0000000000219470                 db    ? ;
.bss:0000000000219471                 db    ? ;
.bss:0000000000219472                 db    ? ;
.bss:0000000000219473                 db    ? ;
.bss:0000000000219474                 db    ? ;
.bss:0000000000219475                 db    ? ;
.bss:0000000000219476                 db    ? ;
.bss:0000000000219477                 db    ? ;
.bss:0000000000219478                 db    ? ;
.bss:0000000000219479                 db    ? ;
.bss:000000000021947A                 db    ? ;
.bss:000000000021947B                 db    ? ;
.bss:000000000021947C                 db    ? ;
.bss:000000000021947D                 db    ? ;
.bss:000000000021947E                 db    ? ;
.bss:000000000021947F                 db    ? ;
.bss:0000000000219480                 db    ? ;
.bss:0000000000219481                 db    ? ;
.bss:0000000000219482                 db    ? ;
.bss:0000000000219483                 db    ? ;
.bss:0000000000219484                 db    ? ;
.bss:0000000000219485                 db    ? ;
.bss:0000000000219486                 db    ? ;
.bss:0000000000219487                 db    ? ;
.bss:0000000000219488                 db    ? ;
.bss:0000000000219489                 db    ? ;
.bss:000000000021948A                 db    ? ;
.bss:000000000021948B                 db    ? ;
.bss:000000000021948C                 db    ? ;
.bss:000000000021948D                 db    ? ;
.bss:000000000021948E                 db    ? ;
.bss:000000000021948F                 db    ? ;
.bss:0000000000219490                 db    ? ;
.bss:0000000000219491                 db    ? ;
.bss:0000000000219492                 db    ? ;
.bss:0000000000219493                 db    ? ;
.bss:0000000000219494                 db    ? ;
.bss:0000000000219495                 db    ? ;
.bss:0000000000219496                 db    ? ;
.bss:0000000000219497                 db    ? ;
.bss:0000000000219498                 db    ? ;
.bss:0000000000219499                 db    ? ;
.bss:000000000021949A                 db    ? ;
.bss:000000000021949B                 db    ? ;
.bss:000000000021949C                 db    ? ;
.bss:000000000021949D                 db    ? ;
.bss:000000000021949E                 db    ? ;
.bss:000000000021949F                 db    ? ;
.bss:00000000002194A0                 db    ? ;
.bss:00000000002194A1                 db    ? ;
.bss:00000000002194A2                 db    ? ;
.bss:00000000002194A3                 db    ? ;
.bss:00000000002194A4                 db    ? ;
.bss:00000000002194A5                 db    ? ;
.bss:00000000002194A6                 db    ? ;
.bss:00000000002194A7                 db    ? ;
.bss:00000000002194A8                 db    ? ;
.bss:00000000002194A9                 db    ? ;
.bss:00000000002194AA                 db    ? ;
.bss:00000000002194AB                 db    ? ;
.bss:00000000002194AC                 db    ? ;
.bss:00000000002194AD                 db    ? ;
.bss:00000000002194AE                 db    ? ;
.bss:00000000002194AF                 db    ? ;
.bss:00000000002194B0                 db    ? ;
.bss:00000000002194B1                 db    ? ;
.bss:00000000002194B2                 db    ? ;
.bss:00000000002194B3                 db    ? ;
.bss:00000000002194B4                 db    ? ;
.bss:00000000002194B5                 db    ? ;
.bss:00000000002194B6                 db    ? ;
.bss:00000000002194B7                 db    ? ;
.bss:00000000002194B8                 db    ? ;
.bss:00000000002194B9                 db    ? ;
.bss:00000000002194BA                 db    ? ;
.bss:00000000002194BB                 db    ? ;
.bss:00000000002194BC                 db    ? ;
.bss:00000000002194BD                 db    ? ;
.bss:00000000002194BE                 db    ? ;
.bss:00000000002194BF                 db    ? ;
.bss:00000000002194C0 footer_regex    db    ? ;               ; DATA XREF: main+20F↑o
.bss:00000000002194C0                                         ; nl_file+46↑o
.bss:00000000002194C1                 db    ? ;
.bss:00000000002194C2                 db    ? ;
.bss:00000000002194C3                 db    ? ;
.bss:00000000002194C4                 db    ? ;
.bss:00000000002194C5                 db    ? ;
.bss:00000000002194C6                 db    ? ;
.bss:00000000002194C7                 db    ? ;
.bss:00000000002194C8                 db    ? ;
.bss:00000000002194C9                 db    ? ;
.bss:00000000002194CA                 db    ? ;
.bss:00000000002194CB                 db    ? ;
.bss:00000000002194CC                 db    ? ;
.bss:00000000002194CD                 db    ? ;
.bss:00000000002194CE                 db    ? ;
.bss:00000000002194CF                 db    ? ;
.bss:00000000002194D0                 db    ? ;
.bss:00000000002194D1                 db    ? ;
.bss:00000000002194D2                 db    ? ;
.bss:00000000002194D3                 db    ? ;
.bss:00000000002194D4                 db    ? ;
.bss:00000000002194D5                 db    ? ;
.bss:00000000002194D6                 db    ? ;
.bss:00000000002194D7                 db    ? ;
.bss:00000000002194D8                 db    ? ;
.bss:00000000002194D9                 db    ? ;
.bss:00000000002194DA                 db    ? ;
.bss:00000000002194DB                 db    ? ;
.bss:00000000002194DC                 db    ? ;
.bss:00000000002194DD                 db    ? ;
.bss:00000000002194DE                 db    ? ;
.bss:00000000002194DF                 db    ? ;
.bss:00000000002194E0                 db    ? ;
.bss:00000000002194E1                 db    ? ;
.bss:00000000002194E2                 db    ? ;
.bss:00000000002194E3                 db    ? ;
.bss:00000000002194E4                 db    ? ;
.bss:00000000002194E5                 db    ? ;
.bss:00000000002194E6                 db    ? ;
.bss:00000000002194E7                 db    ? ;
.bss:00000000002194E8                 db    ? ;
.bss:00000000002194E9                 db    ? ;
.bss:00000000002194EA                 db    ? ;
.bss:00000000002194EB                 db    ? ;
.bss:00000000002194EC                 db    ? ;
.bss:00000000002194ED                 db    ? ;
.bss:00000000002194EE                 db    ? ;
.bss:00000000002194EF                 db    ? ;
.bss:00000000002194F0                 db    ? ;
.bss:00000000002194F1                 db    ? ;
.bss:00000000002194F2                 db    ? ;
.bss:00000000002194F3                 db    ? ;
.bss:00000000002194F4                 db    ? ;
.bss:00000000002194F5                 db    ? ;
.bss:00000000002194F6                 db    ? ;
.bss:00000000002194F7                 db    ? ;
.bss:00000000002194F8                 db    ? ;
.bss:00000000002194F9                 db    ? ;
.bss:00000000002194FA                 db    ? ;
.bss:00000000002194FB                 db    ? ;
.bss:00000000002194FC                 db    ? ;
.bss:00000000002194FD                 db    ? ;
.bss:00000000002194FE                 db    ? ;
.bss:00000000002194FF                 db    ? ;
.bss:0000000000219500 header_regex    db    ? ;               ; DATA XREF: main+1C7↑o
.bss:0000000000219500                                         ; nl_file+22F↑o
.bss:0000000000219501                 db    ? ;
.bss:0000000000219502                 db    ? ;
.bss:0000000000219503                 db    ? ;
.bss:0000000000219504                 db    ? ;
.bss:0000000000219505                 db    ? ;
.bss:0000000000219506                 db    ? ;
.bss:0000000000219507                 db    ? ;
.bss:0000000000219508                 db    ? ;
.bss:0000000000219509                 db    ? ;
.bss:000000000021950A                 db    ? ;
.bss:000000000021950B                 db    ? ;
.bss:000000000021950C                 db    ? ;
.bss:000000000021950D                 db    ? ;
.bss:000000000021950E                 db    ? ;
.bss:000000000021950F                 db    ? ;
.bss:0000000000219510                 db    ? ;
.bss:0000000000219511                 db    ? ;
.bss:0000000000219512                 db    ? ;
.bss:0000000000219513                 db    ? ;
.bss:0000000000219514                 db    ? ;
.bss:0000000000219515                 db    ? ;
.bss:0000000000219516                 db    ? ;
.bss:0000000000219517                 db    ? ;
.bss:0000000000219518                 db    ? ;
.bss:0000000000219519                 db    ? ;
.bss:000000000021951A                 db    ? ;
.bss:000000000021951B                 db    ? ;
.bss:000000000021951C                 db    ? ;
.bss:000000000021951D                 db    ? ;
.bss:000000000021951E                 db    ? ;
.bss:000000000021951F                 db    ? ;
.bss:0000000000219520                 db    ? ;
.bss:0000000000219521                 db    ? ;
.bss:0000000000219522                 db    ? ;
.bss:0000000000219523                 db    ? ;
.bss:0000000000219524                 db    ? ;
.bss:0000000000219525                 db    ? ;
.bss:0000000000219526                 db    ? ;
.bss:0000000000219527                 db    ? ;
.bss:0000000000219528                 db    ? ;
.bss:0000000000219529                 db    ? ;
.bss:000000000021952A                 db    ? ;
.bss:000000000021952B                 db    ? ;
.bss:000000000021952C                 db    ? ;
.bss:000000000021952D                 db    ? ;
.bss:000000000021952E                 db    ? ;
.bss:000000000021952F                 db    ? ;
.bss:0000000000219530                 db    ? ;
.bss:0000000000219531                 db    ? ;
.bss:0000000000219532                 db    ? ;
.bss:0000000000219533                 db    ? ;
.bss:0000000000219534                 db    ? ;
.bss:0000000000219535                 db    ? ;
.bss:0000000000219536                 db    ? ;
.bss:0000000000219537                 db    ? ;
.bss:0000000000219538                 db    ? ;
.bss:0000000000219539                 db    ? ;
.bss:000000000021953A                 db    ? ;
.bss:000000000021953B                 db    ? ;
.bss:000000000021953C                 db    ? ;
.bss:000000000021953D                 db    ? ;
.bss:000000000021953E                 db    ? ;
.bss:000000000021953F                 db    ? ;
.bss:0000000000219540 body_regex      db    ? ;               ; DATA XREF: main+34F↑o
.bss:0000000000219540                                         ; main+592↑o ...
.bss:0000000000219541                 db    ? ;
.bss:0000000000219542                 db    ? ;
.bss:0000000000219543                 db    ? ;
.bss:0000000000219544                 db    ? ;
.bss:0000000000219545                 db    ? ;
.bss:0000000000219546                 db    ? ;
.bss:0000000000219547                 db    ? ;
.bss:0000000000219548                 db    ? ;
.bss:0000000000219549                 db    ? ;
.bss:000000000021954A                 db    ? ;
.bss:000000000021954B                 db    ? ;
.bss:000000000021954C                 db    ? ;
.bss:000000000021954D                 db    ? ;
.bss:000000000021954E                 db    ? ;
.bss:000000000021954F                 db    ? ;
.bss:0000000000219550                 db    ? ;
.bss:0000000000219551                 db    ? ;
.bss:0000000000219552                 db    ? ;
.bss:0000000000219553                 db    ? ;
.bss:0000000000219554                 db    ? ;
.bss:0000000000219555                 db    ? ;
.bss:0000000000219556                 db    ? ;
.bss:0000000000219557                 db    ? ;
.bss:0000000000219558                 db    ? ;
.bss:0000000000219559                 db    ? ;
.bss:000000000021955A                 db    ? ;
.bss:000000000021955B                 db    ? ;
.bss:000000000021955C                 db    ? ;
.bss:000000000021955D                 db    ? ;
.bss:000000000021955E                 db    ? ;
.bss:000000000021955F                 db    ? ;
.bss:0000000000219560                 db    ? ;
.bss:0000000000219561                 db    ? ;
.bss:0000000000219562                 db    ? ;
.bss:0000000000219563                 db    ? ;
.bss:0000000000219564                 db    ? ;
.bss:0000000000219565                 db    ? ;
.bss:0000000000219566                 db    ? ;
.bss:0000000000219567                 db    ? ;
.bss:0000000000219568                 db    ? ;
.bss:0000000000219569                 db    ? ;
.bss:000000000021956A                 db    ? ;
.bss:000000000021956B                 db    ? ;
.bss:000000000021956C                 db    ? ;
.bss:000000000021956D                 db    ? ;
.bss:000000000021956E                 db    ? ;
.bss:000000000021956F                 db    ? ;
.bss:0000000000219570                 db    ? ;
.bss:0000000000219571                 db    ? ;
.bss:0000000000219572                 db    ? ;
.bss:0000000000219573                 db    ? ;
.bss:0000000000219574                 db    ? ;
.bss:0000000000219575                 db    ? ;
.bss:0000000000219576                 db    ? ;
.bss:0000000000219577                 db    ? ;
.bss:0000000000219578                 db    ? ;
.bss:0000000000219579                 db    ? ;
.bss:000000000021957A                 db    ? ;
.bss:000000000021957B                 db    ? ;
.bss:000000000021957C                 db    ? ;
.bss:000000000021957D                 db    ? ;
.bss:000000000021957E                 db    ? ;
.bss:000000000021957F                 db    ? ;
.bss:0000000000219580 current_type    dq ?                    ; DATA XREF: main+58B↑w
.bss:0000000000219580                                         ; nl_file+FB↑w ...
.bss:0000000000219588 ignore_EPIPE    db ?                    ; DATA XREF: close_stdout_set_ignore_EPIPE↑w
.bss:0000000000219588                                         ; close_stdout+1B↑r
.bss:0000000000219589                 align 10h
.bss:0000000000219590 file_name       dq ?                    ; DATA XREF: close_stdout_set_file_name↑w
.bss:0000000000219590                                         ; close_stdout+56↑r
.bss:0000000000219598                 public program_name
.bss:0000000000219598 program_name    dq ?                    ; DATA XREF: usage+14↑r
.bss:0000000000219598                                         ; set_program_name:loc_309D↑w
.bss:00000000002195A0 slot0           db    ? ;               ; DATA XREF: quotearg_n_options+FE↑o
.bss:00000000002195A0                                         ; quotearg_free+46↑o ...
.bss:00000000002195A1                 db    ? ;
.bss:00000000002195A2                 db    ? ;
.bss:00000000002195A3                 db    ? ;
.bss:00000000002195A4                 db    ? ;
.bss:00000000002195A5                 db    ? ;
.bss:00000000002195A6                 db    ? ;
.bss:00000000002195A7                 db    ? ;
.bss:00000000002195A8                 db    ? ;
.bss:00000000002195A9                 db    ? ;
.bss:00000000002195AA                 db    ? ;
.bss:00000000002195AB                 db    ? ;
.bss:00000000002195AC                 db    ? ;
.bss:00000000002195AD                 db    ? ;
.bss:00000000002195AE                 db    ? ;
.bss:00000000002195AF                 db    ? ;
.bss:00000000002195B0                 db    ? ;
.bss:00000000002195B1                 db    ? ;
.bss:00000000002195B2                 db    ? ;
.bss:00000000002195B3                 db    ? ;
.bss:00000000002195B4                 db    ? ;
.bss:00000000002195B5                 db    ? ;
.bss:00000000002195B6                 db    ? ;
.bss:00000000002195B7                 db    ? ;
.bss:00000000002195B8                 db    ? ;
.bss:00000000002195B9                 db    ? ;
.bss:00000000002195BA                 db    ? ;
.bss:00000000002195BB                 db    ? ;
.bss:00000000002195BC                 db    ? ;
.bss:00000000002195BD                 db    ? ;
.bss:00000000002195BE                 db    ? ;
.bss:00000000002195BF                 db    ? ;
.bss:00000000002195C0                 db    ? ;
.bss:00000000002195C1                 db    ? ;
.bss:00000000002195C2                 db    ? ;
.bss:00000000002195C3                 db    ? ;
.bss:00000000002195C4                 db    ? ;
.bss:00000000002195C5                 db    ? ;
.bss:00000000002195C6                 db    ? ;
.bss:00000000002195C7                 db    ? ;
.bss:00000000002195C8                 db    ? ;
.bss:00000000002195C9                 db    ? ;
.bss:00000000002195CA                 db    ? ;
.bss:00000000002195CB                 db    ? ;
.bss:00000000002195CC                 db    ? ;
.bss:00000000002195CD                 db    ? ;
.bss:00000000002195CE                 db    ? ;
.bss:00000000002195CF                 db    ? ;
.bss:00000000002195D0                 db    ? ;
.bss:00000000002195D1                 db    ? ;
.bss:00000000002195D2                 db    ? ;
.bss:00000000002195D3                 db    ? ;
.bss:00000000002195D4                 db    ? ;
.bss:00000000002195D5                 db    ? ;
.bss:00000000002195D6                 db    ? ;
.bss:00000000002195D7                 db    ? ;
.bss:00000000002195D8                 db    ? ;
.bss:00000000002195D9                 db    ? ;
.bss:00000000002195DA                 db    ? ;
.bss:00000000002195DB                 db    ? ;
.bss:00000000002195DC                 db    ? ;
.bss:00000000002195DD                 db    ? ;
.bss:00000000002195DE                 db    ? ;
.bss:00000000002195DF                 db    ? ;
.bss:00000000002195E0                 db    ? ;
.bss:00000000002195E1                 db    ? ;
.bss:00000000002195E2                 db    ? ;
.bss:00000000002195E3                 db    ? ;
.bss:00000000002195E4                 db    ? ;
.bss:00000000002195E5                 db    ? ;
.bss:00000000002195E6                 db    ? ;
.bss:00000000002195E7                 db    ? ;
.bss:00000000002195E8                 db    ? ;
.bss:00000000002195E9                 db    ? ;
.bss:00000000002195EA                 db    ? ;
.bss:00000000002195EB                 db    ? ;
.bss:00000000002195EC                 db    ? ;
.bss:00000000002195ED                 db    ? ;
.bss:00000000002195EE                 db    ? ;
.bss:00000000002195EF                 db    ? ;
.bss:00000000002195F0                 db    ? ;
.bss:00000000002195F1                 db    ? ;
.bss:00000000002195F2                 db    ? ;
.bss:00000000002195F3                 db    ? ;
.bss:00000000002195F4                 db    ? ;
.bss:00000000002195F5                 db    ? ;
.bss:00000000002195F6                 db    ? ;
.bss:00000000002195F7                 db    ? ;
.bss:00000000002195F8                 db    ? ;
.bss:00000000002195F9                 db    ? ;
.bss:00000000002195FA                 db    ? ;
.bss:00000000002195FB                 db    ? ;
.bss:00000000002195FC                 db    ? ;
.bss:00000000002195FD                 db    ? ;
.bss:00000000002195FE                 db    ? ;
.bss:00000000002195FF                 db    ? ;
.bss:0000000000219600                 db    ? ;
.bss:0000000000219601                 db    ? ;
.bss:0000000000219602                 db    ? ;
.bss:0000000000219603                 db    ? ;
.bss:0000000000219604                 db    ? ;
.bss:0000000000219605                 db    ? ;
.bss:0000000000219606                 db    ? ;
.bss:0000000000219607                 db    ? ;
.bss:0000000000219608                 db    ? ;
.bss:0000000000219609                 db    ? ;
.bss:000000000021960A                 db    ? ;
.bss:000000000021960B                 db    ? ;
.bss:000000000021960C                 db    ? ;
.bss:000000000021960D                 db    ? ;
.bss:000000000021960E                 db    ? ;
.bss:000000000021960F                 db    ? ;
.bss:0000000000219610                 db    ? ;
.bss:0000000000219611                 db    ? ;
.bss:0000000000219612                 db    ? ;
.bss:0000000000219613                 db    ? ;
.bss:0000000000219614                 db    ? ;
.bss:0000000000219615                 db    ? ;
.bss:0000000000219616                 db    ? ;
.bss:0000000000219617                 db    ? ;
.bss:0000000000219618                 db    ? ;
.bss:0000000000219619                 db    ? ;
.bss:000000000021961A                 db    ? ;
.bss:000000000021961B                 db    ? ;
.bss:000000000021961C                 db    ? ;
.bss:000000000021961D                 db    ? ;
.bss:000000000021961E                 db    ? ;
.bss:000000000021961F                 db    ? ;
.bss:0000000000219620                 db    ? ;
.bss:0000000000219621                 db    ? ;
.bss:0000000000219622                 db    ? ;
.bss:0000000000219623                 db    ? ;
.bss:0000000000219624                 db    ? ;
.bss:0000000000219625                 db    ? ;
.bss:0000000000219626                 db    ? ;
.bss:0000000000219627                 db    ? ;
.bss:0000000000219628                 db    ? ;
.bss:0000000000219629                 db    ? ;
.bss:000000000021962A                 db    ? ;
.bss:000000000021962B                 db    ? ;
.bss:000000000021962C                 db    ? ;
.bss:000000000021962D                 db    ? ;
.bss:000000000021962E                 db    ? ;
.bss:000000000021962F                 db    ? ;
.bss:0000000000219630                 db    ? ;
.bss:0000000000219631                 db    ? ;
.bss:0000000000219632                 db    ? ;
.bss:0000000000219633                 db    ? ;
.bss:0000000000219634                 db    ? ;
.bss:0000000000219635                 db    ? ;
.bss:0000000000219636                 db    ? ;
.bss:0000000000219637                 db    ? ;
.bss:0000000000219638                 db    ? ;
.bss:0000000000219639                 db    ? ;
.bss:000000000021963A                 db    ? ;
.bss:000000000021963B                 db    ? ;
.bss:000000000021963C                 db    ? ;
.bss:000000000021963D                 db    ? ;
.bss:000000000021963E                 db    ? ;
.bss:000000000021963F                 db    ? ;
.bss:0000000000219640                 db    ? ;
.bss:0000000000219641                 db    ? ;
.bss:0000000000219642                 db    ? ;
.bss:0000000000219643                 db    ? ;
.bss:0000000000219644                 db    ? ;
.bss:0000000000219645                 db    ? ;
.bss:0000000000219646                 db    ? ;
.bss:0000000000219647                 db    ? ;
.bss:0000000000219648                 db    ? ;
.bss:0000000000219649                 db    ? ;
.bss:000000000021964A                 db    ? ;
.bss:000000000021964B                 db    ? ;
.bss:000000000021964C                 db    ? ;
.bss:000000000021964D                 db    ? ;
.bss:000000000021964E                 db    ? ;
.bss:000000000021964F                 db    ? ;
.bss:0000000000219650                 db    ? ;
.bss:0000000000219651                 db    ? ;
.bss:0000000000219652                 db    ? ;
.bss:0000000000219653                 db    ? ;
.bss:0000000000219654                 db    ? ;
.bss:0000000000219655                 db    ? ;
.bss:0000000000219656                 db    ? ;
.bss:0000000000219657                 db    ? ;
.bss:0000000000219658                 db    ? ;
.bss:0000000000219659                 db    ? ;
.bss:000000000021965A                 db    ? ;
.bss:000000000021965B                 db    ? ;
.bss:000000000021965C                 db    ? ;
.bss:000000000021965D                 db    ? ;
.bss:000000000021965E                 db    ? ;
.bss:000000000021965F                 db    ? ;
.bss:0000000000219660                 db    ? ;
.bss:0000000000219661                 db    ? ;
.bss:0000000000219662                 db    ? ;
.bss:0000000000219663                 db    ? ;
.bss:0000000000219664                 db    ? ;
.bss:0000000000219665                 db    ? ;
.bss:0000000000219666                 db    ? ;
.bss:0000000000219667                 db    ? ;
.bss:0000000000219668                 db    ? ;
.bss:0000000000219669                 db    ? ;
.bss:000000000021966A                 db    ? ;
.bss:000000000021966B                 db    ? ;
.bss:000000000021966C                 db    ? ;
.bss:000000000021966D                 db    ? ;
.bss:000000000021966E                 db    ? ;
.bss:000000000021966F                 db    ? ;
.bss:0000000000219670                 db    ? ;
.bss:0000000000219671                 db    ? ;
.bss:0000000000219672                 db    ? ;
.bss:0000000000219673                 db    ? ;
.bss:0000000000219674                 db    ? ;
.bss:0000000000219675                 db    ? ;
.bss:0000000000219676                 db    ? ;
.bss:0000000000219677                 db    ? ;
.bss:0000000000219678                 db    ? ;
.bss:0000000000219679                 db    ? ;
.bss:000000000021967A                 db    ? ;
.bss:000000000021967B                 db    ? ;
.bss:000000000021967C                 db    ? ;
.bss:000000000021967D                 db    ? ;
.bss:000000000021967E                 db    ? ;
.bss:000000000021967F                 db    ? ;
.bss:0000000000219680                 db    ? ;
.bss:0000000000219681                 db    ? ;
.bss:0000000000219682                 db    ? ;
.bss:0000000000219683                 db    ? ;
.bss:0000000000219684                 db    ? ;
.bss:0000000000219685                 db    ? ;
.bss:0000000000219686                 db    ? ;
.bss:0000000000219687                 db    ? ;
.bss:0000000000219688                 db    ? ;
.bss:0000000000219689                 db    ? ;
.bss:000000000021968A                 db    ? ;
.bss:000000000021968B                 db    ? ;
.bss:000000000021968C                 db    ? ;
.bss:000000000021968D                 db    ? ;
.bss:000000000021968E                 db    ? ;
.bss:000000000021968F                 db    ? ;
.bss:0000000000219690                 db    ? ;
.bss:0000000000219691                 db    ? ;
.bss:0000000000219692                 db    ? ;
.bss:0000000000219693                 db    ? ;
.bss:0000000000219694                 db    ? ;
.bss:0000000000219695                 db    ? ;
.bss:0000000000219696                 db    ? ;
.bss:0000000000219697                 db    ? ;
.bss:0000000000219698                 db    ? ;
.bss:0000000000219699                 db    ? ;
.bss:000000000021969A                 db    ? ;
.bss:000000000021969B                 db    ? ;
.bss:000000000021969C                 db    ? ;
.bss:000000000021969D                 db    ? ;
.bss:000000000021969E                 db    ? ;
.bss:000000000021969F                 db    ? ;
.bss:00000000002196A0 default_quoting_options xmmword ?       ; DATA XREF: clone_quoting_options+12↑o
.bss:00000000002196A0                                         ; get_quoting_style↑o ...
.bss:00000000002196B0 xmmword_2196B0  xmmword ?               ; DATA XREF: quotearg_char_mem+41↑r
.bss:00000000002196B0                                         ; quotearg_n_custom_mem+39↑r
.bss:00000000002196C0 xmmword_2196C0  xmmword ?               ; DATA XREF: quotearg_char_mem+4E↑r
.bss:00000000002196C0                                         ; quotearg_n_custom_mem+46↑r
.bss:00000000002196D0 qword_2196D0    dq ?                    ; DATA XREF: quotearg_char_mem+16↑r
.bss:00000000002196D0                                         ; quotearg_n_custom_mem+7↑r
.bss:00000000002196D8                 public rpl_re_syntax_options
.bss:00000000002196D8 rpl_re_syntax_options dq ?              ; DATA XREF: build_type_arg+51↑w
.bss:00000000002196D8                                         ; rpl_re_compile_pattern+4↑r ...
.bss:00000000002196D8 _bss            ends
.bss:00000000002196D8
.prgend:00000000002196E0 ; ===========================================================================
.prgend:00000000002196E0
.prgend:00000000002196E0 ; Segment type: Zero-length
.prgend:00000000002196E0 _prgend         segment byte public '' use64
.prgend:00000000002196E0 _end            label byte
.prgend:00000000002196E0 _prgend         ends
.prgend:00000000002196E0
extern:00000000002196E8 ; ===========================================================================
extern:00000000002196E8
extern:00000000002196E8 ; Segment type: Externs
extern:00000000002196E8 ; extern
extern:00000000002196E8 ; const __int32_t **_ctype_toupper_loc(void)
extern:00000000002196E8                 extrn __ctype_toupper_loc:near
extern:00000000002196E8                                         ; CODE XREF: ___ctype_toupper_loc↑j
extern:00000000002196E8                                         ; DATA XREF: .got:__ctype_toupper_loc_ptr↑o
extern:00000000002196F0 ; int _uflow(_IO_FILE *)
extern:00000000002196F0                 extrn __uflow:near      ; CODE XREF: ___uflow↑j
extern:00000000002196F0                                         ; DATA XREF: .got:__uflow_ptr↑o
extern:00000000002196F8 ; void free(void *ptr)
extern:00000000002196F8                 extrn free:near         ; CODE XREF: _free↑j
extern:00000000002196F8                                         ; DATA XREF: .got:free_ptr↑o
extern:0000000000219700 ; void __noreturn abort(void)
extern:0000000000219700                 extrn abort:near        ; CODE XREF: _abort↑j
extern:0000000000219700                                         ; DATA XREF: .got:abort_ptr↑o
extern:0000000000219708 ; int *_errno_location(void)
extern:0000000000219708                 extrn __errno_location:near
extern:0000000000219708                                         ; CODE XREF: ___errno_location↑j
extern:0000000000219708                                         ; DATA XREF: .got:__errno_location_ptr↑o
extern:0000000000219710 ; int strncmp(const char *s1, const char *s2, size_t n)
extern:0000000000219710                 extrn strncmp:near      ; CODE XREF: _strncmp↑j
extern:0000000000219710                                         ; DATA XREF: .got:strncmp_ptr↑o
extern:0000000000219718 ; void __noreturn exit(int status)
extern:0000000000219718                 extrn _exit:near        ; CODE XREF: __exit↑j
extern:0000000000219718                                         ; DATA XREF: .got:_exit_ptr↑o
extern:0000000000219720 ; char *strcpy(char *dest, const char *src)
extern:0000000000219720                 extrn strcpy:near       ; CODE XREF: _strcpy↑j
extern:0000000000219720                                         ; DATA XREF: .got:strcpy_ptr↑o
extern:0000000000219728 ; size_t _fpending(FILE *fp)
extern:0000000000219728                 extrn __fpending:near   ; CODE XREF: ___fpending↑j
extern:0000000000219728                                         ; DATA XREF: .got:__fpending_ptr↑o
extern:0000000000219730 ; void clearerr_unlocked(FILE *stream)
extern:0000000000219730                 extrn clearerr_unlocked:near
extern:0000000000219730                                         ; CODE XREF: _clearerr_unlocked↑j
extern:0000000000219730                                         ; DATA XREF: .got:clearerr_unlocked_ptr↑o
extern:0000000000219738 ; char *textdomain(const char *domainname)
extern:0000000000219738                 extrn textdomain:near   ; CODE XREF: _textdomain↑j
extern:0000000000219738                                         ; DATA XREF: .got:textdomain_ptr↑o
extern:0000000000219740 ; __int64 _strtol_internal(const char *nptr, char **endptr, int base, int group)
extern:0000000000219740                 extrn __strtol_internal:near
extern:0000000000219740                                         ; CODE XREF: ___strtol_internal↑j
extern:0000000000219740                                         ; DATA XREF: .got:__strtol_internal_ptr↑o
extern:0000000000219748 ; int iswctype(wint_t wc, wctype_t desc)
extern:0000000000219748                 extrn iswctype:near     ; CODE XREF: _iswctype↑j
extern:0000000000219748                                         ; DATA XREF: .got:iswctype_ptr↑o
extern:0000000000219750 ; int fclose(FILE *stream)
extern:0000000000219750                 extrn fclose:near       ; CODE XREF: _fclose↑j
extern:0000000000219750                                         ; DATA XREF: .got:fclose_ptr↑o
extern:0000000000219758 ; char *bindtextdomain(const char *domainname, const char *dirname)
extern:0000000000219758                 extrn bindtextdomain:near
extern:0000000000219758                                         ; CODE XREF: _bindtextdomain↑j
extern:0000000000219758                                         ; DATA XREF: .got:bindtextdomain_ptr↑o
extern:0000000000219760 ; char *stpcpy(char *dest, const char *src)
extern:0000000000219760                 extrn stpcpy:near       ; CODE XREF: _stpcpy↑j
extern:0000000000219760                                         ; DATA XREF: .got:stpcpy_ptr↑o
extern:0000000000219768 ; char *dcgettext(const char *domainname, const char *msgid, int category)
extern:0000000000219768                 extrn dcgettext:near    ; CODE XREF: _dcgettext↑j
extern:0000000000219768                                         ; DATA XREF: .got:dcgettext_ptr↑o
extern:0000000000219770 ; size_t _ctype_get_mb_cur_max(void)
extern:0000000000219770                 extrn __ctype_get_mb_cur_max:near
extern:0000000000219770                                         ; CODE XREF: ___ctype_get_mb_cur_max↑j
extern:0000000000219770                                         ; DATA XREF: .got:__ctype_get_mb_cur_max_ptr↑o
extern:0000000000219778 ; size_t strlen(const char *s)
extern:0000000000219778                 extrn strlen:near       ; CODE XREF: _strlen↑j
extern:0000000000219778                                         ; DATA XREF: .got:strlen_ptr↑o
extern:0000000000219780                 extrn __stack_chk_fail:near
extern:0000000000219780                                         ; CODE XREF: ___stack_chk_fail↑j
extern:0000000000219780                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:0000000000219788 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
extern:0000000000219788                 extrn getopt_long:near  ; CODE XREF: _getopt_long↑j
extern:0000000000219788                                         ; DATA XREF: .got:getopt_long_ptr↑o
extern:0000000000219790 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
extern:0000000000219790                 extrn mbrtowc:near      ; CODE XREF: _mbrtowc↑j
extern:0000000000219790                                         ; DATA XREF: .got:mbrtowc_ptr↑o
extern:0000000000219798 ; char *strchr(const char *s, int c)
extern:0000000000219798                 extrn strchr:near       ; CODE XREF: _strchr↑j
extern:0000000000219798                                         ; DATA XREF: .got:strchr_ptr↑o
extern:00000000002197A0 ; int _overflow(_IO_FILE *, int)
extern:00000000002197A0                 extrn __overflow:near   ; CODE XREF: ___overflow↑j
extern:00000000002197A0                                         ; DATA XREF: .got:__overflow_ptr↑o
extern:00000000002197A8 ; char *strrchr(const char *s, int c)
extern:00000000002197A8                 extrn strrchr:near      ; CODE XREF: _strrchr↑j
extern:00000000002197A8                                         ; DATA XREF: .got:strrchr_ptr↑o
extern:00000000002197B0 ; __off_t lseek(int fd, __off_t offset, int whence)
extern:00000000002197B0                 extrn lseek:near        ; CODE XREF: _lseek↑j
extern:00000000002197B0                                         ; DATA XREF: .got:lseek_ptr↑o
extern:00000000002197B8 ; void __noreturn _assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
extern:00000000002197B8                 extrn __assert_fail:near
extern:00000000002197B8                                         ; CODE XREF: ___assert_fail↑j
extern:00000000002197B8                                         ; DATA XREF: .got:__assert_fail_ptr↑o
extern:00000000002197C0 ; void *memset(void *s, int c, size_t n)
extern:00000000002197C0                 extrn memset:near       ; CODE XREF: _memset↑j
extern:00000000002197C0                                         ; DATA XREF: .got:memset_ptr↑o
extern:00000000002197C8 ; int posix_fadvise(int fd, off_t offset, off_t len, int advise)
extern:00000000002197C8                 extrn posix_fadvise:near
extern:00000000002197C8                                         ; CODE XREF: _posix_fadvise↑j
extern:00000000002197C8                                         ; DATA XREF: .got:posix_fadvise_ptr↑o
extern:00000000002197D0 ; int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:00000000002197D0                 extrn __libc_start_main:near
extern:00000000002197D0                                         ; CODE XREF: start+24↑p
extern:00000000002197D0                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:00000000002197D8 ; int memcmp(const void *s1, const void *s2, size_t n)
extern:00000000002197D8                 extrn memcmp:near       ; CODE XREF: _memcmp↑j
extern:00000000002197D8                                         ; DATA XREF: .got:memcmp_ptr↑o
extern:00000000002197E0 ; wctype_t wctype(const char *property)
extern:00000000002197E0                 extrn wctype:near       ; CODE XREF: _wctype↑j
extern:00000000002197E0                                         ; DATA XREF: .got:wctype_ptr↑o
extern:00000000002197E8 ; int fputs_unlocked(const char *s, FILE *stream)
extern:00000000002197E8                 extrn fputs_unlocked:near
extern:00000000002197E8                                         ; CODE XREF: _fputs_unlocked↑j
extern:00000000002197E8                                         ; DATA XREF: .got:fputs_unlocked_ptr↑o
extern:00000000002197F0 ; void *calloc(size_t nmemb, size_t size)
extern:00000000002197F0                 extrn calloc:near       ; CODE XREF: _calloc↑j
extern:00000000002197F0                                         ; DATA XREF: .got:calloc_ptr↑o
extern:00000000002197F8 ; int strcmp(const char *s1, const char *s2)
extern:00000000002197F8                 extrn strcmp:near       ; CODE XREF: _strcmp↑j
extern:00000000002197F8                                         ; DATA XREF: .got:strcmp_ptr↑o
extern:0000000000219800 ; void *memcpy(void *dest, const void *src, size_t n)
extern:0000000000219800                 extrn memcpy:near       ; CODE XREF: _memcpy↑j
extern:0000000000219800                                         ; DATA XREF: .got:memcpy_ptr↑o
extern:0000000000219808 ; int fileno(FILE *stream)
extern:0000000000219808                 extrn fileno:near       ; CODE XREF: _fileno↑j
extern:0000000000219808                                         ; DATA XREF: .got:fileno_ptr↑o
extern:0000000000219810 ; int iswalnum(wint_t wc)
extern:0000000000219810                 extrn iswalnum:near     ; CODE XREF: _iswalnum↑j
extern:0000000000219810                                         ; DATA XREF: .got:iswalnum_ptr↑o
extern:0000000000219818 ; void *malloc(size_t size)
extern:0000000000219818                 extrn malloc:near       ; CODE XREF: _malloc↑j
extern:0000000000219818                                         ; DATA XREF: .got:malloc_ptr↑o
extern:0000000000219820 ; size_t wcrtomb(char *s, wchar_t wc, mbstate_t *ps)
extern:0000000000219820                 extrn wcrtomb:near      ; CODE XREF: _wcrtomb↑j
extern:0000000000219820                                         ; DATA XREF: .got:wcrtomb_ptr↑o
extern:0000000000219828 ; int fflush(FILE *stream)
extern:0000000000219828                 extrn fflush:near       ; CODE XREF: _fflush↑j
extern:0000000000219828                                         ; DATA XREF: .got:fflush_ptr↑o
extern:0000000000219830 ; char *nl_langinfo(nl_item item)
extern:0000000000219830                 extrn nl_langinfo:near  ; CODE XREF: _nl_langinfo↑j
extern:0000000000219830                                         ; DATA XREF: .got:nl_langinfo_ptr↑o
extern:0000000000219838 ; int _freading(FILE *fp)
extern:0000000000219838                 extrn __freading:near   ; CODE XREF: ___freading↑j
extern:0000000000219838                                         ; DATA XREF: .got:__freading_ptr↑o
extern:0000000000219840 ; size_t fwrite_unlocked(const void *ptr, size_t size, size_t n, FILE *stream)
extern:0000000000219840                 extrn fwrite_unlocked:near
extern:0000000000219840                                         ; CODE XREF: _fwrite_unlocked↑j
extern:0000000000219840                                         ; DATA XREF: .got:fwrite_unlocked_ptr↑o
extern:0000000000219848 ; void *realloc(void *ptr, size_t size)
extern:0000000000219848                 extrn realloc:near      ; CODE XREF: _realloc↑j
extern:0000000000219848                                         ; DATA XREF: .got:realloc_ptr↑o
extern:0000000000219850 ; char *setlocale(int category, const char *locale)
extern:0000000000219850                 extrn setlocale:near    ; CODE XREF: _setlocale↑j
extern:0000000000219850                                         ; DATA XREF: .got:setlocale_ptr↑o
extern:0000000000219858                 extrn __printf_chk:near ; CODE XREF: ___printf_chk↑j
extern:0000000000219858                                         ; DATA XREF: .got:__printf_chk_ptr↑o
extern:0000000000219860 ; wint_t btowc(int c)
extern:0000000000219860                 extrn btowc:near        ; CODE XREF: _btowc↑j
extern:0000000000219860                                         ; DATA XREF: .got:btowc_ptr↑o
extern:0000000000219868 ; void *memmove(void *dest, const void *src, size_t n)
extern:0000000000219868                 extrn memmove:near      ; CODE XREF: _memmove↑j
extern:0000000000219868                                         ; DATA XREF: .got:memmove_ptr↑o
extern:0000000000219870 ; void error(int status, int errnum, const char *format, ...)
extern:0000000000219870                 extrn error:near        ; CODE XREF: _error↑j
extern:0000000000219870                                         ; DATA XREF: .got:error_ptr↑o
extern:0000000000219878 ; int fseeko(FILE *stream, __off_t off, int whence)
extern:0000000000219878                 extrn fseeko:near       ; CODE XREF: _fseeko↑j
extern:0000000000219878                                         ; DATA XREF: .got:fseeko_ptr↑o
extern:0000000000219880 ; FILE *fopen(const char *filename, const char *modes)
extern:0000000000219880                 extrn fopen:near        ; CODE XREF: _fopen↑j
extern:0000000000219880                                         ; DATA XREF: .got:fopen_ptr↑o
extern:0000000000219888 ; wint_t towlower(wint_t wc)
extern:0000000000219888                 extrn towlower:near     ; CODE XREF: _towlower↑j
extern:0000000000219888                                         ; DATA XREF: .got:towlower_ptr↑o
extern:0000000000219890 ; wint_t towupper(wint_t wc)
extern:0000000000219890                 extrn towupper:near     ; CODE XREF: _towupper↑j
extern:0000000000219890                                         ; DATA XREF: .got:towupper_ptr↑o
extern:0000000000219898 ; int __fastcall _cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
extern:0000000000219898                 extrn __cxa_atexit:near ; CODE XREF: ___cxa_atexit↑j
extern:0000000000219898                                         ; DATA XREF: .got:__cxa_atexit_ptr↑o
extern:00000000002198A0 ; void __noreturn exit(int status)
extern:00000000002198A0                 extrn exit:near         ; CODE XREF: _exit↑j
extern:00000000002198A0                                         ; DATA XREF: .got:exit_ptr↑o
extern:00000000002198A8 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
extern:00000000002198A8                 extrn fwrite:near       ; CODE XREF: _fwrite↑j
extern:00000000002198A8                                         ; DATA XREF: .got:fwrite_ptr↑o
extern:00000000002198B0                 extrn __fprintf_chk:near
extern:00000000002198B0                                         ; CODE XREF: ___fprintf_chk↑j
extern:00000000002198B0                                         ; DATA XREF: .got:__fprintf_chk_ptr↑o
extern:00000000002198B8 ; int mbsinit(const mbstate_t *ps)
extern:00000000002198B8                 extrn mbsinit:near      ; CODE XREF: _mbsinit↑j
extern:00000000002198B8                                         ; DATA XREF: .got:mbsinit_ptr↑o
extern:00000000002198C0 ; int iswprint(wint_t wc)
extern:00000000002198C0                 extrn iswprint:near     ; CODE XREF: _iswprint↑j
extern:00000000002198C0                                         ; DATA XREF: .got:iswprint_ptr↑o
extern:00000000002198C8 ; int __fastcall __cxa_finalize(void *)
extern:00000000002198C8                 extrn __imp___cxa_finalize:near ; weak
extern:00000000002198C8                                         ; CODE XREF: __cxa_finalize↑j
extern:00000000002198C8                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:00000000002198D0 ; const __int32_t **_ctype_tolower_loc(void)
extern:00000000002198D0                 extrn __ctype_tolower_loc:near
extern:00000000002198D0                                         ; CODE XREF: ___ctype_tolower_loc↑j
extern:00000000002198D0                                         ; DATA XREF: .got:__ctype_tolower_loc_ptr↑o
extern:00000000002198D8 ; const unsigned __int16 **_ctype_b_loc(void)
extern:00000000002198D8                 extrn __ctype_b_loc:near
extern:00000000002198D8                                         ; CODE XREF: ___ctype_b_loc↑j
extern:00000000002198D8                                         ; DATA XREF: .got:__ctype_b_loc_ptr↑o
extern:00000000002198E0                 extrn _ITM_deregisterTMCloneTable ; weak
extern:00000000002198E0                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:00000000002198E8                 extrn __gmon_start__:near ; weak
extern:00000000002198E8                                         ; CODE XREF: _init_proc+10↑p
extern:00000000002198E8                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:00000000002198F0                 extrn _ITM_registerTMCloneTable ; weak
extern:00000000002198F0                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:00000000002198F0
extern:00000000002198F0
extern:00000000002198F0                 end start
