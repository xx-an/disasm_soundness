LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                      License info: 48-357D-7BC4-C6                      |
LOAD:0000000000000000 ; |                              Virginia Tech                              |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : 22A5E5FB87ACD8FEB48345007612B33B3FA399C37B04503D1286EC0C20FFB14E
LOAD:0000000000000000 ; Input MD5    : 879051045CB12F281E18D895D8ADE010
LOAD:0000000000000000 ; Input CRC32  : 2314F5AD
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/[
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'lbracket.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000 ; Source File : 'version.c'
LOAD:0000000000000000 ; Source File : 'closeout.c'
LOAD:0000000000000000 ; Source File : 'exitfail.c'
LOAD:0000000000000000 ; Source File : 'umaxtostr.c'
LOAD:0000000000000000 ; Source File : 'progname.c'
LOAD:0000000000000000 ; Source File : 'quotearg.c'
LOAD:0000000000000000 ; Source File : 'strintcmp.c'
LOAD:0000000000000000 ; Source File : 'verror.c'
LOAD:0000000000000000 ; Source File : 'version-etc.c'
LOAD:0000000000000000 ; Source File : 'version-etc-fsf.c'
LOAD:0000000000000000 ; Source File : 'xmalloc.c'
LOAD:0000000000000000 ; Source File : 'xalloc-die.c'
LOAD:0000000000000000 ; Source File : 'xvasprintf.c'
LOAD:0000000000000000 ; Source File : 'mbrtowc.c'
LOAD:0000000000000000 ; Source File : 'vasprintf.c'
LOAD:0000000000000000 ; Source File : 'close-stream.c'
LOAD:0000000000000000 ; Source File : 'hard-locale.c'
LOAD:0000000000000000 ; Source File : 'localcharset.c'
LOAD:0000000000000000 ; Source File : 'fclose.c'
LOAD:0000000000000000 ; Source File : 'fflush.c'
LOAD:0000000000000000 ; Source File : 'fseeko.c'
LOAD:0000000000000000 ; Source File : 'vasnprintf.c'
LOAD:0000000000000000 ; Source File : 'printf-args.c'
LOAD:0000000000000000 ; Source File : 'printf-parse.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure code
LOAD:0000000000000000 ; Segment permissions: Read/Execute
LOAD:0000000000000000 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000002F0↓o
LOAD:0000000000000000                                         ; LOAD:0000000000000308↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset start         ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 36F18h               ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 9                    ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 25h                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 24h                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 1F8h                 ; Size in file image
LOAD:0000000000000068                 dq 1F8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 238h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 238h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 5                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 0AF28h               ; Size in file image
LOAD:00000000000000D8                 dq 0AF28h               ; Size in memory image
LOAD:00000000000000E0                 dq 200000h              ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 6                    ; Flags
LOAD:00000000000000F0                 dq 0BBD0h               ; File offset
LOAD:00000000000000F8                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000100 qword_100       dq 20BBD0h              ; DATA XREF: .data:slotvec0↓o
LOAD:0000000000000100                                         ; Physical address
LOAD:0000000000000108                 dq 4B0h                 ; Size in file image
LOAD:0000000000000110                 dq 648h                 ; Size in memory image
LOAD:0000000000000118                 dq 200000h              ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000124                 dd 6                    ; Flags
LOAD:0000000000000128                 dq 0BC38h               ; File offset
LOAD:0000000000000130                 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000000138                 dq 20BC38h              ; Physical address
LOAD:0000000000000140                 dq 1F0h                 ; Size in file image
LOAD:0000000000000148                 dq 1F0h                 ; Size in memory image
LOAD:0000000000000150                 dq 8                    ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 4                    ; Type: NOTE
LOAD:000000000000015C                 dd 4                    ; Flags
LOAD:0000000000000160                 dq 254h                 ; File offset
LOAD:0000000000000168                 dq offset dword_254     ; Virtual address
LOAD:0000000000000170                 dq 254h                 ; Physical address
LOAD:0000000000000178                 dq 44h                  ; Size in file image
LOAD:0000000000000180                 dq 44h                  ; Size in memory image
LOAD:0000000000000188                 dq 4                    ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000194                 dd 4                    ; Flags
LOAD:0000000000000198                 dq 9E4Ch                ; File offset
LOAD:00000000000001A0                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000000001A8                 dq 9E4Ch                ; Physical address
LOAD:00000000000001B0                 dq 2E4h                 ; Size in file image
LOAD:00000000000001B8                 dq 2E4h                 ; Size in memory image
LOAD:00000000000001C0                 dq 4                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000001CC                 dd 6                    ; Flags
LOAD:00000000000001D0                 dq 0                    ; File offset
LOAD:00000000000001D8                 dq 0                    ; Virtual address
LOAD:00000000000001E0                 dq 0                    ; Physical address
LOAD:00000000000001E8                 dq 0                    ; Size in file image
LOAD:00000000000001F0                 dq 0                    ; Size in memory image
LOAD:00000000000001F8                 dq 10h                  ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 6474E552h            ; Type: RO-AFTER
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 0BBD0h               ; File offset
LOAD:0000000000000210                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000218                 dq 20BBD0h              ; Physical address
LOAD:0000000000000220                 dq 430h                 ; Size in file image
LOAD:0000000000000228                 dq 430h                 ; Size in memory image
LOAD:0000000000000230                 dq 1                    ; Alignment
LOAD:0000000000000238 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000238                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000254 ; ELF Note Entry
LOAD:0000000000000254 dword_254       dd 4                    ; DATA XREF: LOAD:0000000000000168↑o
LOAD:0000000000000254                                         ; Name Size
LOAD:0000000000000258                 dd 10h                  ; Desc Size
LOAD:000000000000025C                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000260 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000264                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:0000000000000274 ; ELF Note Entry
LOAD:0000000000000274                 dd 4                    ; Name Size
LOAD:0000000000000278                 dd 14h                  ; Desc Size
LOAD:000000000000027C                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000280 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000284                 db 45h, 77h, 8Fh, 86h, 0Bh, 94h, 4Bh, 0BFh, 88h, 2Eh, 90h ; Desc
LOAD:0000000000000284                 db 0BAh, 0ECh, 0B8h, 84h, 40h, 0F8h, 0CFh, 0Fh, 2Ah
LOAD:0000000000000298 ; ELF GNU Hash Table
LOAD:0000000000000298 elf_gnu_hash_nbuckets dd 3
LOAD:000000000000029C elf_gnu_hash_symbias dd 36h
LOAD:00000000000002A0 elf_gnu_hash_bitmask_nwords dd 1
LOAD:00000000000002A4 elf_gnu_hash_shift dd 6
LOAD:00000000000002A8 elf_gnu_hash_indexes dq 1218012000404904h
LOAD:00000000000002B0 elf_gnu_hash_bucket dd 36h, 37h, 0
LOAD:00000000000002BC elf_gnu_hash_chain dd 1C8C1D29h, 9E7650BCh, 9789A096h, 72632CCEh, 0F54162E4h
LOAD:00000000000002BC                 dd 1C8BF239h, 0
LOAD:00000000000002D8 ; ELF Symbol Table
LOAD:00000000000002D8                 Elf64_Sym <0>
LOAD:00000000000002F0                 Elf64_Sym <offset aSnprintfChk - offset byte_878, 12h, 0, 0, \ ; "__snprintf_chk"
LOAD:00000000000002F0                            offset dword_0, 0>
LOAD:0000000000000308                 Elf64_Sym <offset aFree - offset byte_878, 12h, 0, 0, offset dword_0, \ ; "free"
LOAD:0000000000000308                            0>
LOAD:0000000000000320                 Elf64_Sym <offset aAbort - offset byte_878, 12h, 0, 0, offset dword_0,\ ; "abort"
LOAD:0000000000000320                            0>
LOAD:0000000000000338                 Elf64_Sym <offset aErrnoLocation - offset byte_878, 12h, 0, 0, \ ; "__errno_location"
LOAD:0000000000000338                            offset dword_0, 0>
LOAD:0000000000000350                 Elf64_Sym <offset aErrorAtLine - offset byte_878, 12h, 0, 0, \ ; "error_at_line"
LOAD:0000000000000350                            offset dword_0, 0>
LOAD:0000000000000368                 Elf64_Sym <offset aStrncmp - offset byte_878, 12h, 0, 0, \ ; "strncmp"
LOAD:0000000000000368                            offset dword_0, 0>
LOAD:0000000000000380                 Elf64_Sym <offset aItmDeregistert - offset byte_878, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:0000000000000380                            offset dword_0, 0>
LOAD:0000000000000398                 Elf64_Sym <offset aExit - offset byte_878, 12h, 0, 0, offset dword_0, \ ; "_exit"
LOAD:0000000000000398                            0>
LOAD:00000000000003B0                 Elf64_Sym <offset aFpending - offset byte_878, 12h, 0, 0, \ ; "__fpending"
LOAD:00000000000003B0                            offset dword_0, 0>
LOAD:00000000000003C8                 Elf64_Sym <offset aIsatty - offset byte_878, 12h, 0, 0, \ ; "isatty"
LOAD:00000000000003C8                            offset dword_0, 0>
LOAD:00000000000003E0                 Elf64_Sym <offset aBindtextdomain+4 - offset byte_878, 12h, 0, 0, \ ; "textdomain"
LOAD:00000000000003E0                            offset dword_0, 0>
LOAD:00000000000003F8                 Elf64_Sym <offset aFclose - offset byte_878, 12h, 0, 0, \ ; "fclose"
LOAD:00000000000003F8                            offset dword_0, 0>
LOAD:0000000000000410                 Elf64_Sym <offset aBindtextdomain - offset byte_878, 12h, 0, 0, \ ; "bindtextdomain"
LOAD:0000000000000410                            offset dword_0, 0>
LOAD:0000000000000428                 Elf64_Sym <offset aDcgettext - offset byte_878, 12h, 0, 0, \ ; "dcgettext"
LOAD:0000000000000428                            offset dword_0, 0>
LOAD:0000000000000440                 Elf64_Sym <offset aCtypeGetMbCurM - offset byte_878, 12h, 0, 0, \ ; "__ctype_get_mb_cur_max"
LOAD:0000000000000440                            offset dword_0, 0>
LOAD:0000000000000458                 Elf64_Sym <offset aStrlen - offset byte_878, 12h, 0, 0, \ ; "strlen"
LOAD:0000000000000458                            offset dword_0, 0>
LOAD:0000000000000470                 Elf64_Sym <offset aLxstat - offset byte_878, 12h, 0, 0, \ ; "__lxstat"
LOAD:0000000000000470                            offset dword_0, 0>
LOAD:0000000000000488                 Elf64_Sym <offset aStackChkFail - offset byte_878, 12h, 0, 0, \ ; "__stack_chk_fail"
LOAD:0000000000000488                            offset dword_0, 0>
LOAD:00000000000004A0                 Elf64_Sym <offset aMbrtowc - offset byte_878, 12h, 0, 0, \ ; "mbrtowc"
LOAD:00000000000004A0                            offset dword_0, 0>
LOAD:00000000000004B8                 Elf64_Sym <offset aStrrchr - offset byte_878, 12h, 0, 0, \ ; "strrchr"
LOAD:00000000000004B8                            offset dword_0, 0>
LOAD:00000000000004D0                 Elf64_Sym <offset aLseek - offset byte_878, 12h, 0, 0, offset dword_0,\ ; "lseek"
LOAD:00000000000004D0                            0>
LOAD:00000000000004E8                 Elf64_Sym <offset aMemset - offset byte_878, 12h, 0, 0, \ ; "memset"
LOAD:00000000000004E8                            offset dword_0, 0>
LOAD:0000000000000500                 Elf64_Sym <offset aGeteuid - offset byte_878, 12h, 0, 0, \ ; "geteuid"
LOAD:0000000000000500                            offset dword_0, 0>
LOAD:0000000000000518                 Elf64_Sym <offset aLibcStartMain - offset byte_878, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:0000000000000518                            offset dword_0, 0>
LOAD:0000000000000530                 Elf64_Sym <offset aMemcmp - offset byte_878, 12h, 0, 0, \ ; "memcmp"
LOAD:0000000000000530                            offset dword_0, 0>
LOAD:0000000000000548                 Elf64_Sym <offset aFputsUnlocked - offset byte_878, 12h, 0, 0, \ ; "fputs_unlocked"
LOAD:0000000000000548                            offset dword_0, 0>
LOAD:0000000000000560                 Elf64_Sym <offset aCalloc - offset byte_878, 12h, 0, 0, \ ; "calloc"
LOAD:0000000000000560                            offset dword_0, 0>
LOAD:0000000000000578                 Elf64_Sym <offset aStrcmp - offset byte_878, 12h, 0, 0, \ ; "strcmp"
LOAD:0000000000000578                            offset dword_0, 0>
LOAD:0000000000000590                 Elf64_Sym <offset aGmonStart - offset byte_878, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:0000000000000590                            offset dword_0, 0>
LOAD:00000000000005A8                 Elf64_Sym <offset aStrtol - offset byte_878, 12h, 0, 0, \ ; "strtol"
LOAD:00000000000005A8                            offset dword_0, 0>
LOAD:00000000000005C0                 Elf64_Sym <offset aMemcpy - offset byte_878, 12h, 0, 0, \ ; "memcpy"
LOAD:00000000000005C0                            offset dword_0, 0>
LOAD:00000000000005D8                 Elf64_Sym <offset aFileno - offset byte_878, 12h, 0, 0, \ ; "fileno"
LOAD:00000000000005D8                            offset dword_0, 0>
LOAD:00000000000005F0                 Elf64_Sym <offset aXstat - offset byte_878, 12h, 0, 0, offset dword_0,\ ; "__xstat"
LOAD:00000000000005F0                            0>
LOAD:0000000000000608                 Elf64_Sym <offset aMalloc - offset byte_878, 12h, 0, 0, \ ; "malloc"
LOAD:0000000000000608                            offset dword_0, 0>
LOAD:0000000000000620                 Elf64_Sym <offset aFflush - offset byte_878, 12h, 0, 0, \ ; "fflush"
LOAD:0000000000000620                            offset dword_0, 0>
LOAD:0000000000000638                 Elf64_Sym <offset aNlLanginfo - offset byte_878, 12h, 0, 0, \ ; "nl_langinfo"
LOAD:0000000000000638                            offset dword_0, 0>
LOAD:0000000000000650                 Elf64_Sym <offset aGetegid - offset byte_878, 12h, 0, 0, \ ; "getegid"
LOAD:0000000000000650                            offset dword_0, 0>
LOAD:0000000000000668                 Elf64_Sym <offset aFreading - offset byte_878, 12h, 0, 0, \ ; "__freading"
LOAD:0000000000000668                            offset dword_0, 0>
LOAD:0000000000000680                 Elf64_Sym <offset aRealloc - offset byte_878, 12h, 0, 0, \ ; "realloc"
LOAD:0000000000000680                            offset dword_0, 0>
LOAD:0000000000000698                 Elf64_Sym <offset aSetlocale - offset byte_878, 12h, 0, 0, \ ; "setlocale"
LOAD:0000000000000698                            offset dword_0, 0>
LOAD:00000000000006B0                 Elf64_Sym <offset aPrintfChk - offset byte_878, 12h, 0, 0, \ ; "__printf_chk"
LOAD:00000000000006B0                            offset dword_0, 0>
LOAD:00000000000006C8                 Elf64_Sym <offset aError - offset byte_878, 12h, 0, 0, offset dword_0,\ ; "error"
LOAD:00000000000006C8                            0>
LOAD:00000000000006E0                 Elf64_Sym <offset aFseeko - offset byte_878, 12h, 0, 0, \ ; "fseeko"
LOAD:00000000000006E0                            offset dword_0, 0>
LOAD:00000000000006F8                 Elf64_Sym <offset aEuidaccess - offset byte_878, 12h, 0, 0, \ ; "euidaccess"
LOAD:00000000000006F8                            offset dword_0, 0>
LOAD:0000000000000710                 Elf64_Sym <offset aCxaAtexit - offset byte_878, 12h, 0, 0, \ ; "__cxa_atexit"
LOAD:0000000000000710                            offset dword_0, 0>
LOAD:0000000000000728                 Elf64_Sym <offset aExit+1 - offset byte_878, 12h, 0, 0, \ ; "exit"
LOAD:0000000000000728                            offset dword_0, 0>
LOAD:0000000000000740                 Elf64_Sym <offset aFwrite - offset byte_878, 12h, 0, 0, \ ; "fwrite"
LOAD:0000000000000740                            offset dword_0, 0>
LOAD:0000000000000758                 Elf64_Sym <offset aFprintfChk - offset byte_878, 12h, 0, 0, \ ; "__fprintf_chk"
LOAD:0000000000000758                            offset dword_0, 0>
LOAD:0000000000000770                 Elf64_Sym <offset aItmRegistertmc - offset byte_878, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:0000000000000770                            offset dword_0, 0>
LOAD:0000000000000788                 Elf64_Sym <offset aMbsinit - offset byte_878, 12h, 0, 0, \ ; "mbsinit"
LOAD:0000000000000788                            offset dword_0, 0>
LOAD:00000000000007A0                 Elf64_Sym <offset aIswprint - offset byte_878, 12h, 0, 0, \ ; "iswprint"
LOAD:00000000000007A0                            offset dword_0, 0>
LOAD:00000000000007B8                 Elf64_Sym <offset aCxaFinalize - offset byte_878, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:00000000000007B8                            offset dword_0, 0>
LOAD:00000000000007D0                 Elf64_Sym <offset aCtypeBLoc - offset byte_878, 12h, 0, 0, \ ; "__ctype_b_loc"
LOAD:00000000000007D0                            offset dword_0, 0>
LOAD:00000000000007E8                 Elf64_Sym <offset aStdout - offset byte_878, 11h, 0, 19h, \ ; "stdout"
LOAD:00000000000007E8                            offset stdout@@GLIBC_2_2_5, 8>
LOAD:0000000000000800                 Elf64_Sym <offset aProgname - offset byte_878, 11h, 0, 19h, \ ; "__progname"
LOAD:0000000000000800                            offset __bss_start, 8>
LOAD:0000000000000818                 Elf64_Sym <offset aProgramInvocat - offset byte_878, 21h, 0, 19h, \ ; "program_invocation_name"
LOAD:0000000000000818                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000830                 Elf64_Sym <offset aPrognameFull - offset byte_878, 11h, 0, 19h, \ ; "__progname_full"
LOAD:0000000000000830                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000848                 Elf64_Sym <offset aProgramInvocat_0 - offset byte_878, 21h, 0, 19h, \ ; "program_invocation_short_name"
LOAD:0000000000000848                            offset __bss_start, 8>
LOAD:0000000000000860                 Elf64_Sym <offset aStderr - offset byte_878, 11h, 0, 19h, \ ; "stderr"
LOAD:0000000000000860                            offset stderr@@GLIBC_2_2_5, 8>
LOAD:0000000000000878 ; ELF String Table
LOAD:0000000000000878 byte_878        db 0                    ; DATA XREF: LOAD:00000000000002F0↑o
LOAD:0000000000000878                                         ; LOAD:0000000000000308↑o ...
LOAD:0000000000000879 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000000BB8↓o
LOAD:0000000000000883 aFflush         db 'fflush',0           ; DATA XREF: LOAD:0000000000000620↑o
LOAD:000000000000088A aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:00000000000006B0↑o
LOAD:0000000000000897 aSetlocale      db 'setlocale',0        ; DATA XREF: LOAD:0000000000000698↑o
LOAD:00000000000008A1 aMbrtowc        db 'mbrtowc',0          ; DATA XREF: LOAD:00000000000004A0↑o
LOAD:00000000000008A9 aStrncmp        db 'strncmp',0          ; DATA XREF: LOAD:0000000000000368↑o
LOAD:00000000000008B1 aStrrchr        db 'strrchr',0          ; DATA XREF: LOAD:00000000000004B8↑o
LOAD:00000000000008B9 aDcgettext      db 'dcgettext',0        ; DATA XREF: LOAD:0000000000000428↑o
LOAD:00000000000008C3 aError          db 'error',0            ; DATA XREF: LOAD:00000000000006C8↑o
LOAD:00000000000008C9 aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:0000000000000488↑o
LOAD:00000000000008DA aLxstat         db '__lxstat',0         ; DATA XREF: LOAD:0000000000000470↑o
LOAD:00000000000008E3 aIswprint       db 'iswprint',0         ; DATA XREF: LOAD:00000000000007A0↑o
LOAD:00000000000008EC aRealloc        db 'realloc',0          ; DATA XREF: LOAD:0000000000000680↑o
LOAD:00000000000008F4 aAbort          db 'abort',0            ; DATA XREF: LOAD:0000000000000320↑o
LOAD:00000000000008FA aExit           db '_exit',0            ; DATA XREF: LOAD:0000000000000398↑o
LOAD:00000000000008FA                                         ; LOAD:0000000000000728↑o
LOAD:0000000000000900 aProgramInvocat db 'program_invocation_name',0
LOAD:0000000000000900                                         ; DATA XREF: LOAD:0000000000000818↑o
LOAD:0000000000000918 aErrorAtLine    db 'error_at_line',0    ; DATA XREF: LOAD:0000000000000350↑o
LOAD:0000000000000926 aCtypeGetMbCurM db '__ctype_get_mb_cur_max',0
LOAD:0000000000000926                                         ; DATA XREF: LOAD:0000000000000440↑o
LOAD:000000000000093D aStrtol         db 'strtol',0           ; DATA XREF: LOAD:00000000000005A8↑o
LOAD:0000000000000944 aIsatty         db 'isatty',0           ; DATA XREF: LOAD:00000000000003C8↑o
LOAD:000000000000094B aCalloc         db 'calloc',0           ; DATA XREF: LOAD:0000000000000560↑o
LOAD:0000000000000952 aStrlen         db 'strlen',0           ; DATA XREF: LOAD:0000000000000458↑o
LOAD:0000000000000959 aMemset         db 'memset',0           ; DATA XREF: LOAD:00000000000004E8↑o
LOAD:0000000000000960 aErrnoLocation  db '__errno_location',0 ; DATA XREF: LOAD:0000000000000338↑o
LOAD:0000000000000971 aMemcmp         db 'memcmp',0           ; DATA XREF: LOAD:0000000000000530↑o
LOAD:0000000000000978 aFprintfChk     db '__fprintf_chk',0    ; DATA XREF: LOAD:0000000000000758↑o
LOAD:0000000000000986 aStdout         db 'stdout',0           ; DATA XREF: LOAD:00000000000007E8↑o
LOAD:000000000000098D aLseek          db 'lseek',0            ; DATA XREF: LOAD:00000000000004D0↑o
LOAD:0000000000000993 aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:00000000000005C0↑o
LOAD:000000000000099A aFclose         db 'fclose',0           ; DATA XREF: LOAD:00000000000003F8↑o
LOAD:00000000000009A1 aEuidaccess     db 'euidaccess',0       ; DATA XREF: LOAD:00000000000006F8↑o
LOAD:00000000000009AC aMalloc         db 'malloc',0           ; DATA XREF: LOAD:0000000000000608↑o
LOAD:00000000000009B3 aMbsinit        db 'mbsinit',0          ; DATA XREF: LOAD:0000000000000788↑o
LOAD:00000000000009BB aNlLanginfo     db 'nl_langinfo',0      ; DATA XREF: LOAD:0000000000000638↑o
LOAD:00000000000009C7 aCtypeBLoc      db '__ctype_b_loc',0    ; DATA XREF: LOAD:00000000000007D0↑o
LOAD:00000000000009D5 aFreading       db '__freading',0       ; DATA XREF: LOAD:0000000000000668↑o
LOAD:00000000000009E0 aStderr         db 'stderr',0           ; DATA XREF: LOAD:0000000000000860↑o
LOAD:00000000000009E7 aSnprintfChk    db '__snprintf_chk',0   ; DATA XREF: LOAD:00000000000002F0↑o
LOAD:00000000000009F6 aGetegid        db 'getegid',0          ; DATA XREF: LOAD:0000000000000650↑o
LOAD:00000000000009FE aFileno         db 'fileno',0           ; DATA XREF: LOAD:00000000000005D8↑o
LOAD:0000000000000A05 aFwrite         db 'fwrite',0           ; DATA XREF: LOAD:0000000000000740↑o
LOAD:0000000000000A0C aGeteuid        db 'geteuid',0          ; DATA XREF: LOAD:0000000000000500↑o
LOAD:0000000000000A14 aFpending       db '__fpending',0       ; DATA XREF: LOAD:00000000000003B0↑o
LOAD:0000000000000A1F aProgramInvocat_0 db 'program_invocation_short_name',0
LOAD:0000000000000A1F                                         ; DATA XREF: LOAD:0000000000000848↑o
LOAD:0000000000000A3D aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:00000000000007B8↑o
LOAD:0000000000000A4C aXstat          db '__xstat',0          ; DATA XREF: LOAD:00000000000005F0↑o
LOAD:0000000000000A54 aBindtextdomain db 'bindtextdomain',0   ; DATA XREF: LOAD:0000000000000410↑o
LOAD:0000000000000A54                                         ; LOAD:00000000000003E0↑o
LOAD:0000000000000A63 aStrcmp         db 'strcmp',0           ; DATA XREF: LOAD:0000000000000578↑o
LOAD:0000000000000A6A aLibcStartMain  db '__libc_start_main',0
LOAD:0000000000000A6A                                         ; DATA XREF: LOAD:0000000000000518↑o
LOAD:0000000000000A7C aFseeko         db 'fseeko',0           ; DATA XREF: LOAD:00000000000006E0↑o
LOAD:0000000000000A83 aFputsUnlocked  db 'fputs_unlocked',0   ; DATA XREF: LOAD:0000000000000548↑o
LOAD:0000000000000A92 aFree           db 'free',0             ; DATA XREF: LOAD:0000000000000308↑o
LOAD:0000000000000A97 aProgname       db '__progname',0       ; DATA XREF: LOAD:0000000000000800↑o
LOAD:0000000000000AA2 aPrognameFull   db '__progname_full',0  ; DATA XREF: LOAD:0000000000000830↑o
LOAD:0000000000000AB2 aCxaAtexit      db '__cxa_atexit',0     ; DATA XREF: LOAD:0000000000000710↑o
LOAD:0000000000000ABF aGlibc23        db 'GLIBC_2.3',0        ; DATA XREF: LOAD:0000000000000BC8↓o
LOAD:0000000000000AC9 aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:0000000000000BD8↓o
LOAD:0000000000000AD4 aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000000BE8↓o
LOAD:0000000000000ADE aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000000BF8↓o
LOAD:0000000000000AEA aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000000C08↓o
LOAD:0000000000000AF6 aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:0000000000000AF6                                         ; DATA XREF: LOAD:0000000000000380↑o
LOAD:0000000000000B12 aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:0000000000000590↑o
LOAD:0000000000000B21 aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:0000000000000B21                                         ; DATA XREF: LOAD:0000000000000770↑o
LOAD:0000000000000B3B                 align 4
LOAD:0000000000000B3C ; ELF GNU Symbol Version Table
LOAD:0000000000000B3C                 dw 0
LOAD:0000000000000B3E                 dw 3                    ; __snprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000B40                 dw 2                    ; free@@GLIBC_2.2.5
LOAD:0000000000000B42                 dw 2                    ; abort@@GLIBC_2.2.5
LOAD:0000000000000B44                 dw 2                    ; __errno_location@@GLIBC_2.2.5
LOAD:0000000000000B46                 dw 2                    ; error_at_line@@GLIBC_2.2.5
LOAD:0000000000000B48                 dw 2                    ; strncmp@@GLIBC_2.2.5
LOAD:0000000000000B4A                 dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
LOAD:0000000000000B4C                 dw 2                    ; _exit@@GLIBC_2.2.5
LOAD:0000000000000B4E                 dw 2                    ; __fpending@@GLIBC_2.2.5
LOAD:0000000000000B50                 dw 2                    ; isatty@@GLIBC_2.2.5
LOAD:0000000000000B52                 dw 2                    ; textdomain@@GLIBC_2.2.5
LOAD:0000000000000B54                 dw 2                    ; fclose@@GLIBC_2.2.5
LOAD:0000000000000B56                 dw 2                    ; bindtextdomain@@GLIBC_2.2.5
LOAD:0000000000000B58                 dw 2                    ; dcgettext@@GLIBC_2.2.5
LOAD:0000000000000B5A                 dw 2                    ; __ctype_get_mb_cur_max@@GLIBC_2.2.5
LOAD:0000000000000B5C                 dw 2                    ; strlen@@GLIBC_2.2.5
LOAD:0000000000000B5E                 dw 2                    ; __lxstat@@GLIBC_2.2.5
LOAD:0000000000000B60                 dw 4                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:0000000000000B62                 dw 2                    ; mbrtowc@@GLIBC_2.2.5
LOAD:0000000000000B64                 dw 2                    ; strrchr@@GLIBC_2.2.5
LOAD:0000000000000B66                 dw 2                    ; lseek@@GLIBC_2.2.5
LOAD:0000000000000B68                 dw 2                    ; memset@@GLIBC_2.2.5
LOAD:0000000000000B6A                 dw 2                    ; geteuid@@GLIBC_2.2.5
LOAD:0000000000000B6C                 dw 2                    ; __libc_start_main@@GLIBC_2.2.5
LOAD:0000000000000B6E                 dw 2                    ; memcmp@@GLIBC_2.2.5
LOAD:0000000000000B70                 dw 2                    ; fputs_unlocked@@GLIBC_2.2.5
LOAD:0000000000000B72                 dw 2                    ; calloc@@GLIBC_2.2.5
LOAD:0000000000000B74                 dw 2                    ; strcmp@@GLIBC_2.2.5
LOAD:0000000000000B76                 dw 0                    ; local  symbol: __gmon_start__
LOAD:0000000000000B78                 dw 2                    ; strtol@@GLIBC_2.2.5
LOAD:0000000000000B7A                 dw 5                    ; memcpy@@GLIBC_2.14
LOAD:0000000000000B7C                 dw 2                    ; fileno@@GLIBC_2.2.5
LOAD:0000000000000B7E                 dw 2                    ; __xstat@@GLIBC_2.2.5
LOAD:0000000000000B80                 dw 2                    ; malloc@@GLIBC_2.2.5
LOAD:0000000000000B82                 dw 2                    ; fflush@@GLIBC_2.2.5
LOAD:0000000000000B84                 dw 2                    ; nl_langinfo@@GLIBC_2.2.5
LOAD:0000000000000B86                 dw 2                    ; getegid@@GLIBC_2.2.5
LOAD:0000000000000B88                 dw 2                    ; __freading@@GLIBC_2.2.5
LOAD:0000000000000B8A                 dw 2                    ; realloc@@GLIBC_2.2.5
LOAD:0000000000000B8C                 dw 2                    ; setlocale@@GLIBC_2.2.5
LOAD:0000000000000B8E                 dw 3                    ; __printf_chk@@GLIBC_2.3.4
LOAD:0000000000000B90                 dw 2                    ; error@@GLIBC_2.2.5
LOAD:0000000000000B92                 dw 2                    ; fseeko@@GLIBC_2.2.5
LOAD:0000000000000B94                 dw 2                    ; euidaccess@@GLIBC_2.2.5
LOAD:0000000000000B96                 dw 2                    ; __cxa_atexit@@GLIBC_2.2.5
LOAD:0000000000000B98                 dw 2                    ; exit@@GLIBC_2.2.5
LOAD:0000000000000B9A                 dw 2                    ; fwrite@@GLIBC_2.2.5
LOAD:0000000000000B9C                 dw 3                    ; __fprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000B9E                 dw 0                    ; local  symbol: _ITM_registerTMCloneTable
LOAD:0000000000000BA0                 dw 2                    ; mbsinit@@GLIBC_2.2.5
LOAD:0000000000000BA2                 dw 2                    ; iswprint@@GLIBC_2.2.5
LOAD:0000000000000BA4                 dw 2                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:0000000000000BA6                 dw 6                    ; __ctype_b_loc@@GLIBC_2.3
LOAD:0000000000000BA8                 dw 2                    ; stdout@@GLIBC_2.2.5
LOAD:0000000000000BAA                 dw 2                    ; __progname@@GLIBC_2.2.5
LOAD:0000000000000BAC                 dw 2                    ; program_invocation_name@@GLIBC_2.2.5
LOAD:0000000000000BAE                 dw 2                    ; __progname_full@@GLIBC_2.2.5
LOAD:0000000000000BB0                 dw 2                    ; program_invocation_short_name@@GLIBC_2.2.5
LOAD:0000000000000BB2                 dw 2                    ; stderr@@GLIBC_2.2.5
LOAD:0000000000000BB4                 dw 0
LOAD:0000000000000BB6                 dw 0
LOAD:0000000000000BB8 ; ELF GNU Symbol Version Requirements
LOAD:0000000000000BB8                 Elf64_Verneed <1, 5, offset aLibcSo6 - offset byte_878, 10h, 0> ; "libc.so.6"
LOAD:0000000000000BC8                 Elf64_Vernaux <0D696913h, 0, 6, offset aGlibc23 - offset byte_878, \ ; "GLIBC_2.3"
LOAD:0000000000000BC8                                10h>
LOAD:0000000000000BD8                 Elf64_Vernaux <6969194h, 0, 5, offset aGlibc214 - offset byte_878, \ ; "GLIBC_2.14"
LOAD:0000000000000BD8                                10h>
LOAD:0000000000000BE8                 Elf64_Vernaux <0D696914h, 0, 4, offset aGlibc24 - offset byte_878, \ ; "GLIBC_2.4"
LOAD:0000000000000BE8                                10h>
LOAD:0000000000000BF8                 Elf64_Vernaux <9691974h, 0, 3, offset aGlibc234 - offset byte_878, \ ; "GLIBC_2.3.4"
LOAD:0000000000000BF8                                10h>
LOAD:0000000000000C08                 Elf64_Vernaux <9691A75h, 0, 2, offset aGlibc225 - offset byte_878, 0> ; "GLIBC_2.2.5"
LOAD:0000000000000C18 ; ELF RELA Relocation Table
LOAD:0000000000000C18                 Elf64_Rela <20BBD0h, 8, 18F0h> ; R_X86_64_RELATIVE +18F0h
LOAD:0000000000000C30                 Elf64_Rela <20BBD8h, 8, 18B0h> ; R_X86_64_RELATIVE +18B0h
LOAD:0000000000000C48                 Elf64_Rela <20BBE0h, 8, 93A9h> ; R_X86_64_RELATIVE +93A9h
LOAD:0000000000000C60                 Elf64_Rela <20BBE8h, 8, 93B1h> ; R_X86_64_RELATIVE +93B1h
LOAD:0000000000000C78                 Elf64_Rela <20BBF0h, 8, 93B7h> ; R_X86_64_RELATIVE +93B7h
LOAD:0000000000000C90                 Elf64_Rela <20BBF8h, 8, 93C4h> ; R_X86_64_RELATIVE +93C4h
LOAD:0000000000000CA8                 Elf64_Rela <20BC00h, 8, 93D1h> ; R_X86_64_RELATIVE +93D1h
LOAD:0000000000000CC0                 Elf64_Rela <20BC08h, 8, 93E5h> ; R_X86_64_RELATIVE +93E5h
LOAD:0000000000000CD8                 Elf64_Rela <20BC10h, 8, 93E7h> ; R_X86_64_RELATIVE +93E7h
LOAD:0000000000000CF0                 Elf64_Rela <20BC18h, 8, 93CAh> ; R_X86_64_RELATIVE +93CAh
LOAD:0000000000000D08                 Elf64_Rela <20BC20h, 8, 8494h> ; R_X86_64_RELATIVE +8494h
LOAD:0000000000000D20                 Elf64_Rela <20BC28h, 8, 93EFh> ; R_X86_64_RELATIVE +93EFh
LOAD:0000000000000D38                 Elf64_Rela <20C008h, 8, 20C008h> ; R_X86_64_RELATIVE +20C008h
LOAD:0000000000000D50                 Elf64_Rela <20C010h, 8, 9333h> ; R_X86_64_RELATIVE +9333h
LOAD:0000000000000D68                 Elf64_Rela <20C060h, 8, 20C070h> ; R_X86_64_RELATIVE +20C070h
LOAD:0000000000000D80                 Elf64_Rela <20C078h, 8, 20C0E0h> ; R_X86_64_RELATIVE +20C0E0h
LOAD:0000000000000D98                 Elf64_Rela <20BFC0h, 700000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:0000000000000DB0                 Elf64_Rela <20BFC8h, 1800000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:0000000000000DC8                 Elf64_Rela <20BFD0h, 1D00000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:0000000000000DE0                 Elf64_Rela <20BFD8h, 3100000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:0000000000000DF8                 Elf64_Rela <20BFE0h, 3400000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:0000000000000E10                 Elf64_Rela <20C080h, 3700000005h, 0> ; R_X86_64_COPY __progname
LOAD:0000000000000E28                 Elf64_Rela <20C088h, 3600000005h, 0> ; R_X86_64_COPY stdout
LOAD:0000000000000E40                 Elf64_Rela <20C090h, 3900000005h, 0> ; R_X86_64_COPY __progname_full
LOAD:0000000000000E58                 Elf64_Rela <20C0A0h, 3B00000005h, 0> ; R_X86_64_COPY stderr
LOAD:0000000000000E70 ; ELF JMPREL Relocation Table
LOAD:0000000000000E70                 Elf64_Rela <20BE40h, 100000007h, 0> ; R_X86_64_JUMP_SLOT __snprintf_chk
LOAD:0000000000000E88                 Elf64_Rela <20BE48h, 200000007h, 0> ; R_X86_64_JUMP_SLOT free
LOAD:0000000000000EA0                 Elf64_Rela <20BE50h, 300000007h, 0> ; R_X86_64_JUMP_SLOT abort
LOAD:0000000000000EB8                 Elf64_Rela <20BE58h, 400000007h, 0> ; R_X86_64_JUMP_SLOT __errno_location
LOAD:0000000000000ED0                 Elf64_Rela <20BE60h, 500000007h, 0> ; R_X86_64_JUMP_SLOT error_at_line
LOAD:0000000000000EE8                 Elf64_Rela <20BE68h, 600000007h, 0> ; R_X86_64_JUMP_SLOT strncmp
LOAD:0000000000000F00                 Elf64_Rela <20BE70h, 800000007h, 0> ; R_X86_64_JUMP_SLOT _exit
LOAD:0000000000000F18                 Elf64_Rela <20BE78h, 900000007h, 0> ; R_X86_64_JUMP_SLOT __fpending
LOAD:0000000000000F30                 Elf64_Rela <20BE80h, 0A00000007h, 0> ; R_X86_64_JUMP_SLOT isatty
LOAD:0000000000000F48                 Elf64_Rela <20BE88h, 0B00000007h, 0> ; R_X86_64_JUMP_SLOT textdomain
LOAD:0000000000000F60                 Elf64_Rela <20BE90h, 0C00000007h, 0> ; R_X86_64_JUMP_SLOT fclose
LOAD:0000000000000F78                 Elf64_Rela <20BE98h, 0D00000007h, 0> ; R_X86_64_JUMP_SLOT bindtextdomain
LOAD:0000000000000F90                 Elf64_Rela <20BEA0h, 0E00000007h, 0> ; R_X86_64_JUMP_SLOT dcgettext
LOAD:0000000000000FA8                 Elf64_Rela <20BEA8h, 0F00000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_get_mb_cur_max
LOAD:0000000000000FC0                 Elf64_Rela <20BEB0h, 1000000007h, 0> ; R_X86_64_JUMP_SLOT strlen
LOAD:0000000000000FD8                 Elf64_Rela <20BEB8h, 1100000007h, 0> ; R_X86_64_JUMP_SLOT __lxstat
LOAD:0000000000000FF0                 Elf64_Rela <20BEC0h, 1200000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
LOAD:0000000000001008                 Elf64_Rela <20BEC8h, 1300000007h, 0> ; R_X86_64_JUMP_SLOT mbrtowc
LOAD:0000000000001020                 Elf64_Rela <20BED0h, 1400000007h, 0> ; R_X86_64_JUMP_SLOT strrchr
LOAD:0000000000001038                 Elf64_Rela <20BED8h, 1500000007h, 0> ; R_X86_64_JUMP_SLOT lseek
LOAD:0000000000001050                 Elf64_Rela <20BEE0h, 1600000007h, 0> ; R_X86_64_JUMP_SLOT memset
LOAD:0000000000001068                 Elf64_Rela <20BEE8h, 1700000007h, 0> ; R_X86_64_JUMP_SLOT geteuid
LOAD:0000000000001080                 Elf64_Rela <20BEF0h, 1900000007h, 0> ; R_X86_64_JUMP_SLOT memcmp
LOAD:0000000000001098                 Elf64_Rela <20BEF8h, 1A00000007h, 0> ; R_X86_64_JUMP_SLOT fputs_unlocked
LOAD:00000000000010B0                 Elf64_Rela <20BF00h, 1B00000007h, 0> ; R_X86_64_JUMP_SLOT calloc
LOAD:00000000000010C8                 Elf64_Rela <20BF08h, 1C00000007h, 0> ; R_X86_64_JUMP_SLOT strcmp
LOAD:00000000000010E0                 Elf64_Rela <20BF10h, 1E00000007h, 0> ; R_X86_64_JUMP_SLOT strtol
LOAD:00000000000010F8                 Elf64_Rela <20BF18h, 1F00000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
LOAD:0000000000001110                 Elf64_Rela <20BF20h, 2000000007h, 0> ; R_X86_64_JUMP_SLOT fileno
LOAD:0000000000001128                 Elf64_Rela <20BF28h, 2100000007h, 0> ; R_X86_64_JUMP_SLOT __xstat
LOAD:0000000000001140                 Elf64_Rela <20BF30h, 2200000007h, 0> ; R_X86_64_JUMP_SLOT malloc
LOAD:0000000000001158                 Elf64_Rela <20BF38h, 2300000007h, 0> ; R_X86_64_JUMP_SLOT fflush
LOAD:0000000000001170                 Elf64_Rela <20BF40h, 2400000007h, 0> ; R_X86_64_JUMP_SLOT nl_langinfo
LOAD:0000000000001188                 Elf64_Rela <20BF48h, 2500000007h, 0> ; R_X86_64_JUMP_SLOT getegid
LOAD:00000000000011A0                 Elf64_Rela <20BF50h, 2600000007h, 0> ; R_X86_64_JUMP_SLOT __freading
LOAD:00000000000011B8                 Elf64_Rela <20BF58h, 2700000007h, 0> ; R_X86_64_JUMP_SLOT realloc
LOAD:00000000000011D0                 Elf64_Rela <20BF60h, 2800000007h, 0> ; R_X86_64_JUMP_SLOT setlocale
LOAD:00000000000011E8                 Elf64_Rela <20BF68h, 2900000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
LOAD:0000000000001200                 Elf64_Rela <20BF70h, 2A00000007h, 0> ; R_X86_64_JUMP_SLOT error
LOAD:0000000000001218                 Elf64_Rela <20BF78h, 2B00000007h, 0> ; R_X86_64_JUMP_SLOT fseeko
LOAD:0000000000001230                 Elf64_Rela <20BF80h, 2C00000007h, 0> ; R_X86_64_JUMP_SLOT euidaccess
LOAD:0000000000001248                 Elf64_Rela <20BF88h, 2D00000007h, 0> ; R_X86_64_JUMP_SLOT __cxa_atexit
LOAD:0000000000001260                 Elf64_Rela <20BF90h, 2E00000007h, 0> ; R_X86_64_JUMP_SLOT exit
LOAD:0000000000001278                 Elf64_Rela <20BF98h, 2F00000007h, 0> ; R_X86_64_JUMP_SLOT fwrite
LOAD:0000000000001290                 Elf64_Rela <20BFA0h, 3000000007h, 0> ; R_X86_64_JUMP_SLOT __fprintf_chk
LOAD:00000000000012A8                 Elf64_Rela <20BFA8h, 3200000007h, 0> ; R_X86_64_JUMP_SLOT mbsinit
LOAD:00000000000012C0                 Elf64_Rela <20BFB0h, 3300000007h, 0> ; R_X86_64_JUMP_SLOT iswprint
LOAD:00000000000012D8                 Elf64_Rela <20BFB8h, 3500000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_b_loc
LOAD:00000000000012D8 LOAD            ends
LOAD:00000000000012D8
.init:00000000000012F0 ; ===========================================================================
.init:00000000000012F0
.init:00000000000012F0 ; Segment type: Pure code
.init:00000000000012F0 ; Segment permissions: Read/Execute
.init:00000000000012F0 _init           segment dword public 'CODE' use64
.init:00000000000012F0                 assume cs:_init
.init:00000000000012F0                 ;org 12F0h
.init:00000000000012F0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:00000000000012F0
.init:00000000000012F0 ; =============== S U B R O U T I N E =======================================
.init:00000000000012F0
.init:00000000000012F0
.init:00000000000012F0                 public _init_proc
.init:00000000000012F0 _init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
.init:00000000000012F0                 sub     rsp, 8          ; _init
.init:00000000000012F4                 mov     rax, cs:__gmon_start___ptr
.init:00000000000012FB                 test    rax, rax
.init:00000000000012FE                 jz      short loc_1302
.init:0000000000001300                 call    rax ; __gmon_start__
.init:0000000000001302
.init:0000000000001302 loc_1302:                               ; CODE XREF: _init_proc+E↑j
.init:0000000000001302                 add     rsp, 8
.init:0000000000001306                 retn
.init:0000000000001306 _init_proc      endp
.init:0000000000001306
.init:0000000000001306 _init           ends
.init:0000000000001306
LOAD:0000000000001307 ; ===========================================================================
LOAD:0000000000001307
LOAD:0000000000001307 ; Segment type: Pure code
LOAD:0000000000001307 ; Segment permissions: Read/Execute
LOAD:0000000000001307 LOAD            segment byte public 'CODE' use64
LOAD:0000000000001307                 assume cs:LOAD
LOAD:0000000000001307                 ;org 1307h
LOAD:0000000000001307                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000001307                 align 10h
LOAD:0000000000001307 LOAD            ends
LOAD:0000000000001307
.plt:0000000000001310 ; ===========================================================================
.plt:0000000000001310
.plt:0000000000001310 ; Segment type: Pure code
.plt:0000000000001310 ; Segment permissions: Read/Execute
.plt:0000000000001310 _plt            segment para public 'CODE' use64
.plt:0000000000001310                 assume cs:_plt
.plt:0000000000001310                 ;org 1310h
.plt:0000000000001310                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:0000000000001310
.plt:0000000000001310 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001310
.plt:0000000000001310
.plt:0000000000001310 sub_1310        proc near               ; CODE XREF: .plt:000000000000132B↓j
.plt:0000000000001310                                         ; .plt:000000000000133B↓j ...
.plt:0000000000001310 ; __unwind {
.plt:0000000000001310                 push    cs:qword_20BE30
.plt:0000000000001316                 jmp     cs:qword_20BE38
.plt:0000000000001316 sub_1310        endp
.plt:0000000000001316
.plt:0000000000001316 ; ---------------------------------------------------------------------------
.plt:000000000000131C                 align 20h
.plt:0000000000001320
.plt:0000000000001320 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001320
.plt:0000000000001320 ; Attributes: thunk
.plt:0000000000001320
.plt:0000000000001320 ___snprintf_chk proc near               ; CODE XREF: vasnprintf+5B8↓p
.plt:0000000000001320                                         ; vasnprintf+6F0↓p ...
.plt:0000000000001320                 jmp     cs:__snprintf_chk_ptr
.plt:0000000000001320 ___snprintf_chk endp
.plt:0000000000001320
.plt:0000000000001326 ; ---------------------------------------------------------------------------
.plt:0000000000001326                 push    0
.plt:000000000000132B                 jmp     sub_1310
.plt:0000000000001330
.plt:0000000000001330 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001330
.plt:0000000000001330 ; Attributes: thunk
.plt:0000000000001330
.plt:0000000000001330 ; void free(void *ptr)
.plt:0000000000001330 _free           proc near               ; CODE XREF: quotearg_n_options+115↓p
.plt:0000000000001330                                         ; quotearg_free+37↓p ...
.plt:0000000000001330                 jmp     cs:free_ptr
.plt:0000000000001330 _free           endp
.plt:0000000000001330
.plt:0000000000001336 ; ---------------------------------------------------------------------------
.plt:0000000000001336                 push    1
.plt:000000000000133B                 jmp     sub_1310
.plt:0000000000001340
.plt:0000000000001340 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001340
.plt:0000000000001340 ; Attributes: noreturn thunk
.plt:0000000000001340
.plt:0000000000001340 ; void __noreturn abort(void)
.plt:0000000000001340 _abort          proc near               ; CODE XREF: binary_operator:loc_219D↓p
.plt:0000000000001340                                         ; set_program_name+9A↓p ...
.plt:0000000000001340                 jmp     cs:abort_ptr
.plt:0000000000001340 _abort          endp
.plt:0000000000001340
.plt:0000000000001346 ; ---------------------------------------------------------------------------
.plt:0000000000001346                 push    2
.plt:000000000000134B                 jmp     sub_1310
.plt:0000000000001350
.plt:0000000000001350 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001350
.plt:0000000000001350 ; Attributes: thunk
.plt:0000000000001350
.plt:0000000000001350 ; int *__errno_location(void)
.plt:0000000000001350 ___errno_location proc near             ; CODE XREF: unary_operator+111↓p
.plt:0000000000001350                                         ; unary_operator+536↓p ...
.plt:0000000000001350                 jmp     cs:__errno_location_ptr
.plt:0000000000001350 ___errno_location endp
.plt:0000000000001350
.plt:0000000000001356 ; ---------------------------------------------------------------------------
.plt:0000000000001356                 push    3
.plt:000000000000135B                 jmp     sub_1310
.plt:0000000000001360
.plt:0000000000001360 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001360
.plt:0000000000001360 ; Attributes: thunk
.plt:0000000000001360
.plt:0000000000001360 ; void error_at_line(int status, int errnum, const char *fname, unsigned int lineno, const char *format, ...)
.plt:0000000000001360 _error_at_line  proc near               ; CODE XREF: verror_at_line+44↓p
.plt:0000000000001360                 jmp     cs:error_at_line_ptr
.plt:0000000000001360 _error_at_line  endp
.plt:0000000000001360
.plt:0000000000001366 ; ---------------------------------------------------------------------------
.plt:0000000000001366                 push    4
.plt:000000000000136B                 jmp     sub_1310
.plt:0000000000001370
.plt:0000000000001370 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001370
.plt:0000000000001370 ; Attributes: thunk
.plt:0000000000001370
.plt:0000000000001370 ; int strncmp(const char *s1, const char *s2, size_t n)
.plt:0000000000001370 _strncmp        proc near               ; CODE XREF: usage+31F↓p
.plt:0000000000001370                 jmp     cs:strncmp_ptr
.plt:0000000000001370 _strncmp        endp
.plt:0000000000001370
.plt:0000000000001376 ; ---------------------------------------------------------------------------
.plt:0000000000001376                 push    5
.plt:000000000000137B                 jmp     sub_1310
.plt:0000000000001380
.plt:0000000000001380 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001380
.plt:0000000000001380 ; Attributes: noreturn thunk
.plt:0000000000001380
.plt:0000000000001380 ; void __noreturn _exit(int status)
.plt:0000000000001380 __exit          proc near               ; CODE XREF: close_stdout+88↓p
.plt:0000000000001380                 jmp     cs:_exit_ptr
.plt:0000000000001380 __exit          endp
.plt:0000000000001380
.plt:0000000000001386 ; ---------------------------------------------------------------------------
.plt:0000000000001386                 push    6
.plt:000000000000138B                 jmp     sub_1310
.plt:0000000000001390
.plt:0000000000001390 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001390
.plt:0000000000001390 ; Attributes: thunk
.plt:0000000000001390
.plt:0000000000001390 ; size_t __fpending(FILE *fp)
.plt:0000000000001390 ___fpending     proc near               ; CODE XREF: close_stream+7↓p
.plt:0000000000001390                 jmp     cs:__fpending_ptr
.plt:0000000000001390 ___fpending     endp
.plt:0000000000001390
.plt:0000000000001396 ; ---------------------------------------------------------------------------
.plt:0000000000001396                 push    7
.plt:000000000000139B                 jmp     sub_1310
.plt:00000000000013A0
.plt:00000000000013A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013A0
.plt:00000000000013A0 ; Attributes: thunk
.plt:00000000000013A0
.plt:00000000000013A0 ; int isatty(int fd)
.plt:00000000000013A0 _isatty         proc near               ; CODE XREF: unary_operator+149↓p
.plt:00000000000013A0                 jmp     cs:isatty_ptr
.plt:00000000000013A0 _isatty         endp
.plt:00000000000013A0
.plt:00000000000013A6 ; ---------------------------------------------------------------------------
.plt:00000000000013A6                 push    8
.plt:00000000000013AB                 jmp     sub_1310
.plt:00000000000013B0
.plt:00000000000013B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013B0
.plt:00000000000013B0 ; Attributes: thunk
.plt:00000000000013B0
.plt:00000000000013B0 ; char *textdomain(const char *domainname)
.plt:00000000000013B0 _textdomain     proc near               ; CODE XREF: main+3E↓p
.plt:00000000000013B0                 jmp     cs:textdomain_ptr
.plt:00000000000013B0 _textdomain     endp
.plt:00000000000013B0
.plt:00000000000013B6 ; ---------------------------------------------------------------------------
.plt:00000000000013B6                 push    9
.plt:00000000000013BB                 jmp     sub_1310
.plt:00000000000013C0
.plt:00000000000013C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013C0
.plt:00000000000013C0 ; Attributes: thunk
.plt:00000000000013C0
.plt:00000000000013C0 ; int fclose(FILE *stream)
.plt:00000000000013C0 _fclose         proc near               ; CODE XREF: rpl_fclose+36↓p
.plt:00000000000013C0                                         ; rpl_fclose+6B↓j
.plt:00000000000013C0                 jmp     cs:fclose_ptr
.plt:00000000000013C0 _fclose         endp
.plt:00000000000013C0
.plt:00000000000013C6 ; ---------------------------------------------------------------------------
.plt:00000000000013C6                 push    0Ah
.plt:00000000000013CB                 jmp     sub_1310
.plt:00000000000013D0
.plt:00000000000013D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013D0
.plt:00000000000013D0 ; Attributes: thunk
.plt:00000000000013D0
.plt:00000000000013D0 ; char *bindtextdomain(const char *domainname, const char *dirname)
.plt:00000000000013D0 _bindtextdomain proc near               ; CODE XREF: main+32↓p
.plt:00000000000013D0                 jmp     cs:bindtextdomain_ptr
.plt:00000000000013D0 _bindtextdomain endp
.plt:00000000000013D0
.plt:00000000000013D6 ; ---------------------------------------------------------------------------
.plt:00000000000013D6                 push    0Bh
.plt:00000000000013DB                 jmp     sub_1310
.plt:00000000000013E0
.plt:00000000000013E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013E0
.plt:00000000000013E0 ; Attributes: thunk
.plt:00000000000013E0
.plt:00000000000013E0 ; char *dcgettext(const char *domainname, const char *msgid, int category)
.plt:00000000000013E0 _dcgettext      proc near               ; CODE XREF: main+180↓p
.plt:00000000000013E0                                         ; find_int+C2↓p ...
.plt:00000000000013E0                 jmp     cs:dcgettext_ptr
.plt:00000000000013E0 _dcgettext      endp
.plt:00000000000013E0
.plt:00000000000013E6 ; ---------------------------------------------------------------------------
.plt:00000000000013E6                 push    0Ch
.plt:00000000000013EB                 jmp     sub_1310
.plt:00000000000013F0
.plt:00000000000013F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013F0
.plt:00000000000013F0 ; Attributes: thunk
.plt:00000000000013F0
.plt:00000000000013F0 ; size_t __ctype_get_mb_cur_max(void)
.plt:00000000000013F0 ___ctype_get_mb_cur_max proc near       ; CODE XREF: quotearg_buffer_restyled+6C↓p
.plt:00000000000013F0                 jmp     cs:__ctype_get_mb_cur_max_ptr
.plt:00000000000013F0 ___ctype_get_mb_cur_max endp
.plt:00000000000013F0
.plt:00000000000013F6 ; ---------------------------------------------------------------------------
.plt:00000000000013F6                 push    0Dh
.plt:00000000000013FB                 jmp     sub_1310
.plt:0000000000001400
.plt:0000000000001400 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001400
.plt:0000000000001400 ; Attributes: thunk
.plt:0000000000001400
.plt:0000000000001400 ; size_t strlen(const char *s)
.plt:0000000000001400 _strlen         proc near               ; CODE XREF: binary_operator+33E↓p
.plt:0000000000001400                                         ; binary_operator:loc_20F0↓p ...
.plt:0000000000001400                 jmp     cs:strlen_ptr
.plt:0000000000001400 _strlen         endp
.plt:0000000000001400
.plt:0000000000001406 ; ---------------------------------------------------------------------------
.plt:0000000000001406                 push    0Eh
.plt:000000000000140B                 jmp     sub_1310
.plt:0000000000001410
.plt:0000000000001410 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001410
.plt:0000000000001410 ; Attributes: thunk
.plt:0000000000001410
.plt:0000000000001410 ; int __lxstat(int ver, const char *filename, struct stat *stat_buf)
.plt:0000000000001410 ___lxstat       proc near               ; CODE XREF: unary_operator+4E1↓p
.plt:0000000000001410                 jmp     cs:__lxstat_ptr
.plt:0000000000001410 ___lxstat       endp
.plt:0000000000001410
.plt:0000000000001416 ; ---------------------------------------------------------------------------
.plt:0000000000001416                 push    0Fh
.plt:000000000000141B                 jmp     sub_1310
.plt:0000000000001420
.plt:0000000000001420 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001420
.plt:0000000000001420 ; Attributes: noreturn thunk
.plt:0000000000001420
.plt:0000000000001420 ___stack_chk_fail proc near             ; CODE XREF: binary_operator:loc_2198↓p
.plt:0000000000001420                                         ; unary_operator:loc_27AC↓p ...
.plt:0000000000001420                 jmp     cs:__stack_chk_fail_ptr
.plt:0000000000001420 ___stack_chk_fail endp
.plt:0000000000001420
.plt:0000000000001426 ; ---------------------------------------------------------------------------
.plt:0000000000001426                 push    10h
.plt:000000000000142B                 jmp     sub_1310
.plt:0000000000001430
.plt:0000000000001430 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001430
.plt:0000000000001430 ; Attributes: thunk
.plt:0000000000001430
.plt:0000000000001430 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
.plt:0000000000001430 _mbrtowc        proc near               ; CODE XREF: rpl_mbrtowc+32↓p
.plt:0000000000001430                 jmp     cs:mbrtowc_ptr
.plt:0000000000001430 _mbrtowc        endp
.plt:0000000000001430
.plt:0000000000001436 ; ---------------------------------------------------------------------------
.plt:0000000000001436                 push    11h
.plt:000000000000143B                 jmp     sub_1310
.plt:0000000000001440
.plt:0000000000001440 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001440
.plt:0000000000001440 ; Attributes: thunk
.plt:0000000000001440
.plt:0000000000001440 ; char *strrchr(const char *s, int c)
.plt:0000000000001440 _strrchr        proc near               ; CODE XREF: set_program_name+E↓p
.plt:0000000000001440                 jmp     cs:strrchr_ptr
.plt:0000000000001440 _strrchr        endp
.plt:0000000000001440
.plt:0000000000001446 ; ---------------------------------------------------------------------------
.plt:0000000000001446                 push    12h
.plt:000000000000144B                 jmp     sub_1310
.plt:0000000000001450
.plt:0000000000001450 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001450
.plt:0000000000001450 ; Attributes: thunk
.plt:0000000000001450
.plt:0000000000001450 ; __off_t lseek(int fd, __off_t offset, int whence)
.plt:0000000000001450 _lseek          proc near               ; CODE XREF: rpl_fclose+59↓p
.plt:0000000000001450                                         ; rpl_fseeko+3B↓p
.plt:0000000000001450                 jmp     cs:lseek_ptr
.plt:0000000000001450 _lseek          endp
.plt:0000000000001450
.plt:0000000000001456 ; ---------------------------------------------------------------------------
.plt:0000000000001456                 push    13h
.plt:000000000000145B                 jmp     sub_1310
.plt:0000000000001460
.plt:0000000000001460 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001460
.plt:0000000000001460 ; Attributes: thunk
.plt:0000000000001460
.plt:0000000000001460 ; void *memset(void *s, int c, size_t n)
.plt:0000000000001460 _memset         proc near               ; CODE XREF: quotearg_n_options+99↓p
.plt:0000000000001460                                         ; xzalloc+12↓j
.plt:0000000000001460                 jmp     cs:memset_ptr
.plt:0000000000001460 _memset         endp
.plt:0000000000001460
.plt:0000000000001466 ; ---------------------------------------------------------------------------
.plt:0000000000001466                 push    14h
.plt:000000000000146B                 jmp     sub_1310
.plt:0000000000001470
.plt:0000000000001470 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001470
.plt:0000000000001470 ; Attributes: thunk
.plt:0000000000001470
.plt:0000000000001470 ; __uid_t geteuid(void)
.plt:0000000000001470 _geteuid        proc near               ; CODE XREF: unary_operator+56E↓p
.plt:0000000000001470                 jmp     cs:geteuid_ptr
.plt:0000000000001470 _geteuid        endp
.plt:0000000000001470
.plt:0000000000001476 ; ---------------------------------------------------------------------------
.plt:0000000000001476                 push    15h
.plt:000000000000147B                 jmp     sub_1310
.plt:0000000000001480
.plt:0000000000001480 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001480
.plt:0000000000001480 ; Attributes: thunk
.plt:0000000000001480
.plt:0000000000001480 ; int memcmp(const void *s1, const void *s2, size_t n)
.plt:0000000000001480 _memcmp         proc near               ; CODE XREF: quotearg_buffer_restyled+19A↓p
.plt:0000000000001480                 jmp     cs:memcmp_ptr
.plt:0000000000001480 _memcmp         endp
.plt:0000000000001480
.plt:0000000000001486 ; ---------------------------------------------------------------------------
.plt:0000000000001486                 push    16h
.plt:000000000000148B                 jmp     sub_1310
.plt:0000000000001490
.plt:0000000000001490 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001490
.plt:0000000000001490 ; Attributes: thunk
.plt:0000000000001490
.plt:0000000000001490 ; int fputs_unlocked(const char *s, FILE *stream)
.plt:0000000000001490 _fputs_unlocked proc near               ; CODE XREF: usage+64↓p
.plt:0000000000001490                                         ; usage+89↓p ...
.plt:0000000000001490                 jmp     cs:fputs_unlocked_ptr
.plt:0000000000001490 _fputs_unlocked endp
.plt:0000000000001490
.plt:0000000000001496 ; ---------------------------------------------------------------------------
.plt:0000000000001496                 push    17h
.plt:000000000000149B                 jmp     sub_1310
.plt:00000000000014A0
.plt:00000000000014A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014A0
.plt:00000000000014A0 ; Attributes: thunk
.plt:00000000000014A0
.plt:00000000000014A0 ; void *calloc(size_t nmemb, size_t size)
.plt:00000000000014A0 _calloc         proc near               ; CODE XREF: xcalloc+1A↓p
.plt:00000000000014A0                 jmp     cs:calloc_ptr
.plt:00000000000014A0 _calloc         endp
.plt:00000000000014A0
.plt:00000000000014A6 ; ---------------------------------------------------------------------------
.plt:00000000000014A6                 push    18h
.plt:00000000000014AB                 jmp     sub_1310
.plt:00000000000014B0
.plt:00000000000014B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014B0
.plt:00000000000014B0 ; Attributes: thunk
.plt:00000000000014B0
.plt:00000000000014B0 ; int strcmp(const char *s1, const char *s2)
.plt:00000000000014B0 _strcmp         proc near               ; CODE XREF: main+7D↓p
.plt:00000000000014B0                                         ; main+D5↓p ...
.plt:00000000000014B0                 jmp     cs:strcmp_ptr
.plt:00000000000014B0 _strcmp         endp
.plt:00000000000014B0
.plt:00000000000014B6 ; ---------------------------------------------------------------------------
.plt:00000000000014B6                 push    19h
.plt:00000000000014BB                 jmp     sub_1310
.plt:00000000000014C0
.plt:00000000000014C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014C0
.plt:00000000000014C0 ; Attributes: thunk
.plt:00000000000014C0
.plt:00000000000014C0 ; __int64 strtol(const char *nptr, char **endptr, int base)
.plt:00000000000014C0 _strtol         proc near               ; CODE XREF: unary_operator+129↓p
.plt:00000000000014C0                 jmp     cs:strtol_ptr
.plt:00000000000014C0 _strtol         endp
.plt:00000000000014C0
.plt:00000000000014C6 ; ---------------------------------------------------------------------------
.plt:00000000000014C6                 push    1Ah
.plt:00000000000014CB                 jmp     sub_1310
.plt:00000000000014D0
.plt:00000000000014D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014D0
.plt:00000000000014D0 ; Attributes: thunk
.plt:00000000000014D0
.plt:00000000000014D0 ; void *memcpy(void *dest, const void *src, size_t n)
.plt:00000000000014D0 _memcpy         proc near               ; CODE XREF: xmemdup+23↓j
.plt:00000000000014D0                                         ; xstrcat+BA↓p ...
.plt:00000000000014D0                 jmp     cs:memcpy_ptr
.plt:00000000000014D0 _memcpy         endp
.plt:00000000000014D0
.plt:00000000000014D6 ; ---------------------------------------------------------------------------
.plt:00000000000014D6                 push    1Bh
.plt:00000000000014DB                 jmp     sub_1310
.plt:00000000000014E0
.plt:00000000000014E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014E0
.plt:00000000000014E0 ; Attributes: thunk
.plt:00000000000014E0
.plt:00000000000014E0 ; int fileno(FILE *stream)
.plt:00000000000014E0 _fileno         proc near               ; CODE XREF: rpl_fclose+7↓p
.plt:00000000000014E0                                         ; rpl_fclose+4B↓p ...
.plt:00000000000014E0                 jmp     cs:fileno_ptr
.plt:00000000000014E0 _fileno         endp
.plt:00000000000014E0
.plt:00000000000014E6 ; ---------------------------------------------------------------------------
.plt:00000000000014E6                 push    1Ch
.plt:00000000000014EB                 jmp     sub_1310
.plt:00000000000014F0
.plt:00000000000014F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014F0
.plt:00000000000014F0 ; Attributes: thunk
.plt:00000000000014F0
.plt:00000000000014F0 ; int __xstat(int ver, const char *filename, struct stat *stat_buf)
.plt:00000000000014F0 ___xstat        proc near               ; CODE XREF: binary_operator+1EA↓p
.plt:00000000000014F0                                         ; binary_operator+217↓p ...
.plt:00000000000014F0                 jmp     cs:__xstat_ptr
.plt:00000000000014F0 ___xstat        endp
.plt:00000000000014F0
.plt:00000000000014F6 ; ---------------------------------------------------------------------------
.plt:00000000000014F6                 push    1Dh
.plt:00000000000014FB                 jmp     sub_1310
.plt:0000000000001500
.plt:0000000000001500 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001500
.plt:0000000000001500 ; Attributes: thunk
.plt:0000000000001500
.plt:0000000000001500 ; void *malloc(size_t size)
.plt:0000000000001500 _malloc         proc near               ; CODE XREF: xmalloc+4↓p
.plt:0000000000001500                                         ; vasnprintf+D2↓p ...
.plt:0000000000001500                 jmp     cs:malloc_ptr
.plt:0000000000001500 _malloc         endp
.plt:0000000000001500
.plt:0000000000001506 ; ---------------------------------------------------------------------------
.plt:0000000000001506                 push    1Eh
.plt:000000000000150B                 jmp     sub_1310
.plt:0000000000001510
.plt:0000000000001510 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001510
.plt:0000000000001510 ; Attributes: thunk
.plt:0000000000001510
.plt:0000000000001510 ; int fflush(FILE *stream)
.plt:0000000000001510 _fflush         proc near               ; CODE XREF: rpl_fflush+1E↓j
.plt:0000000000001510                                         ; rpl_fflush+3B↓j
.plt:0000000000001510                 jmp     cs:fflush_ptr
.plt:0000000000001510 _fflush         endp
.plt:0000000000001510
.plt:0000000000001516 ; ---------------------------------------------------------------------------
.plt:0000000000001516                 push    1Fh
.plt:000000000000151B                 jmp     sub_1310
.plt:0000000000001520
.plt:0000000000001520 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001520
.plt:0000000000001520 ; Attributes: thunk
.plt:0000000000001520
.plt:0000000000001520 ; char *nl_langinfo(nl_item item)
.plt:0000000000001520 _nl_langinfo    proc near               ; CODE XREF: locale_charset+9↓p
.plt:0000000000001520                 jmp     cs:nl_langinfo_ptr
.plt:0000000000001520 _nl_langinfo    endp
.plt:0000000000001520
.plt:0000000000001526 ; ---------------------------------------------------------------------------
.plt:0000000000001526                 push    20h ; ' '
.plt:000000000000152B                 jmp     sub_1310
.plt:0000000000001530
.plt:0000000000001530 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001530
.plt:0000000000001530 ; Attributes: thunk
.plt:0000000000001530
.plt:0000000000001530 ; __gid_t getegid(void)
.plt:0000000000001530 _getegid        proc near               ; CODE XREF: unary_operator+544↓p
.plt:0000000000001530                 jmp     cs:getegid_ptr
.plt:0000000000001530 _getegid        endp
.plt:0000000000001530
.plt:0000000000001536 ; ---------------------------------------------------------------------------
.plt:0000000000001536                 push    21h ; '!'
.plt:000000000000153B                 jmp     sub_1310
.plt:0000000000001540
.plt:0000000000001540 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001540
.plt:0000000000001540 ; Attributes: thunk
.plt:0000000000001540
.plt:0000000000001540 ; int __freading(FILE *fp)
.plt:0000000000001540 ___freading     proc near               ; CODE XREF: rpl_fclose+13↓p
.plt:0000000000001540                                         ; rpl_fflush+9↓p
.plt:0000000000001540                 jmp     cs:__freading_ptr
.plt:0000000000001540 ___freading     endp
.plt:0000000000001540
.plt:0000000000001546 ; ---------------------------------------------------------------------------
.plt:0000000000001546                 push    22h ; '"'
.plt:000000000000154B                 jmp     sub_1310
.plt:0000000000001550
.plt:0000000000001550 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001550
.plt:0000000000001550 ; Attributes: thunk
.plt:0000000000001550
.plt:0000000000001550 ; void *realloc(void *ptr, size_t size)
.plt:0000000000001550 _realloc        proc near               ; CODE XREF: xrealloc+11↓p
.plt:0000000000001550                                         ; vasnprintf+285↓p ...
.plt:0000000000001550                 jmp     cs:realloc_ptr
.plt:0000000000001550 _realloc        endp
.plt:0000000000001550
.plt:0000000000001556 ; ---------------------------------------------------------------------------
.plt:0000000000001556                 push    23h ; '#'
.plt:000000000000155B                 jmp     sub_1310
.plt:0000000000001560
.plt:0000000000001560 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001560
.plt:0000000000001560 ; Attributes: thunk
.plt:0000000000001560
.plt:0000000000001560 ; char *setlocale(int category, const char *locale)
.plt:0000000000001560 _setlocale      proc near               ; CODE XREF: main+1F↓p
.plt:0000000000001560                                         ; usage+306↓p ...
.plt:0000000000001560                 jmp     cs:setlocale_ptr
.plt:0000000000001560 _setlocale      endp
.plt:0000000000001560
.plt:0000000000001566 ; ---------------------------------------------------------------------------
.plt:0000000000001566                 push    24h ; '$'
.plt:000000000000156B                 jmp     sub_1310
.plt:0000000000001570
.plt:0000000000001570 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001570
.plt:0000000000001570 ; Attributes: thunk
.plt:0000000000001570
.plt:0000000000001570 ___printf_chk   proc near               ; CODE XREF: usage+2CA↓p
.plt:0000000000001570                                         ; usage+2FA↓p ...
.plt:0000000000001570                 jmp     cs:__printf_chk_ptr
.plt:0000000000001570 ___printf_chk   endp
.plt:0000000000001570
.plt:0000000000001576 ; ---------------------------------------------------------------------------
.plt:0000000000001576                 push    25h ; '%'
.plt:000000000000157B                 jmp     sub_1310
.plt:0000000000001580
.plt:0000000000001580 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001580
.plt:0000000000001580 ; Attributes: thunk
.plt:0000000000001580
.plt:0000000000001580 ; void error(int status, int errnum, const char *format, ...)
.plt:0000000000001580 _error          proc near               ; CODE XREF: close_stdout+7D↓p
.plt:0000000000001580                                         ; close_stdout+9D↓p ...
.plt:0000000000001580                 jmp     cs:error_ptr
.plt:0000000000001580 _error          endp
.plt:0000000000001580
.plt:0000000000001586 ; ---------------------------------------------------------------------------
.plt:0000000000001586                 push    26h ; '&'
.plt:000000000000158B                 jmp     sub_1310
.plt:0000000000001590
.plt:0000000000001590 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001590
.plt:0000000000001590 ; Attributes: thunk
.plt:0000000000001590
.plt:0000000000001590 ; int fseeko(FILE *stream, __off_t off, int whence)
.plt:0000000000001590 _fseeko         proc near               ; CODE XREF: rpl_fseeko:loc_61FA↓j
.plt:0000000000001590                 jmp     cs:fseeko_ptr
.plt:0000000000001590 _fseeko         endp
.plt:0000000000001590
.plt:0000000000001596 ; ---------------------------------------------------------------------------
.plt:0000000000001596                 push    27h ; '''
.plt:000000000000159B                 jmp     sub_1310
.plt:00000000000015A0
.plt:00000000000015A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015A0
.plt:00000000000015A0 ; Attributes: thunk
.plt:00000000000015A0
.plt:00000000000015A0 ; int euidaccess(const char *name, int type)
.plt:00000000000015A0 _euidaccess     proc near               ; CODE XREF: unary_operator+AE↓p
.plt:00000000000015A0                                         ; unary_operator+176↓p ...
.plt:00000000000015A0                 jmp     cs:euidaccess_ptr
.plt:00000000000015A0 _euidaccess     endp
.plt:00000000000015A0
.plt:00000000000015A6 ; ---------------------------------------------------------------------------
.plt:00000000000015A6                 push    28h ; '('
.plt:00000000000015AB                 jmp     sub_1310
.plt:00000000000015B0
.plt:00000000000015B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015B0
.plt:00000000000015B0 ; Attributes: thunk
.plt:00000000000015B0
.plt:00000000000015B0 ; int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
.plt:00000000000015B0 ___cxa_atexit   proc near               ; CODE XREF: atexit+9↓j
.plt:00000000000015B0                 jmp     cs:__cxa_atexit_ptr
.plt:00000000000015B0 ___cxa_atexit   endp
.plt:00000000000015B0
.plt:00000000000015B6 ; ---------------------------------------------------------------------------
.plt:00000000000015B6                 push    29h ; ')'
.plt:00000000000015BB                 jmp     sub_1310
.plt:00000000000015C0
.plt:00000000000015C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015C0
.plt:00000000000015C0 ; Attributes: noreturn thunk
.plt:00000000000015C0
.plt:00000000000015C0 ; void __noreturn exit(int status)
.plt:00000000000015C0 _exit           proc near               ; CODE XREF: test_syntax_error+A5↓p
.plt:00000000000015C0                                         ; usage+3F↓p
.plt:00000000000015C0                 jmp     cs:exit_ptr
.plt:00000000000015C0 _exit           endp
.plt:00000000000015C0
.plt:00000000000015C6 ; ---------------------------------------------------------------------------
.plt:00000000000015C6                 push    2Ah ; '*'
.plt:00000000000015CB                 jmp     sub_1310
.plt:00000000000015D0
.plt:00000000000015D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015D0
.plt:00000000000015D0 ; Attributes: thunk
.plt:00000000000015D0
.plt:00000000000015D0 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
.plt:00000000000015D0 _fwrite         proc near               ; CODE XREF: set_program_name+95↓p
.plt:00000000000015D0                 jmp     cs:fwrite_ptr
.plt:00000000000015D0 _fwrite         endp
.plt:00000000000015D0
.plt:00000000000015D6 ; ---------------------------------------------------------------------------
.plt:00000000000015D6                 push    2Bh ; '+'
.plt:00000000000015DB                 jmp     sub_1310
.plt:00000000000015E0
.plt:00000000000015E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015E0
.plt:00000000000015E0 ; Attributes: thunk
.plt:00000000000015E0
.plt:00000000000015E0 ___fprintf_chk  proc near               ; CODE XREF: usage+38↓p
.plt:00000000000015E0                                         ; version_etc_arn+37↓p ...
.plt:00000000000015E0                 jmp     cs:__fprintf_chk_ptr
.plt:00000000000015E0 ___fprintf_chk  endp
.plt:00000000000015E0
.plt:00000000000015E6 ; ---------------------------------------------------------------------------
.plt:00000000000015E6                 push    2Ch ; ','
.plt:00000000000015EB                 jmp     sub_1310
.plt:00000000000015F0
.plt:00000000000015F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015F0
.plt:00000000000015F0 ; Attributes: thunk
.plt:00000000000015F0
.plt:00000000000015F0 ; int mbsinit(const mbstate_t *ps)
.plt:00000000000015F0 _mbsinit        proc near               ; CODE XREF: quotearg_buffer_restyled+9A8↓p
.plt:00000000000015F0                 jmp     cs:mbsinit_ptr
.plt:00000000000015F0 _mbsinit        endp
.plt:00000000000015F0
.plt:00000000000015F6 ; ---------------------------------------------------------------------------
.plt:00000000000015F6                 push    2Dh ; '-'
.plt:00000000000015FB                 jmp     sub_1310
.plt:0000000000001600
.plt:0000000000001600 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001600
.plt:0000000000001600 ; Attributes: thunk
.plt:0000000000001600
.plt:0000000000001600 ; int iswprint(wint_t wc)
.plt:0000000000001600 _iswprint       proc near               ; CODE XREF: quotearg_buffer_restyled+990↓p
.plt:0000000000001600                 jmp     cs:iswprint_ptr
.plt:0000000000001600 _iswprint       endp
.plt:0000000000001600
.plt:0000000000001606 ; ---------------------------------------------------------------------------
.plt:0000000000001606                 push    2Eh ; '.'
.plt:000000000000160B                 jmp     sub_1310
.plt:0000000000001610
.plt:0000000000001610 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001610
.plt:0000000000001610 ; Attributes: thunk
.plt:0000000000001610
.plt:0000000000001610 ; const unsigned __int16 **__ctype_b_loc(void)
.plt:0000000000001610 ___ctype_b_loc  proc near               ; CODE XREF: find_int+4↓p
.plt:0000000000001610                                         ; quotearg_buffer_restyled+513↓p
.plt:0000000000001610                 jmp     cs:__ctype_b_loc_ptr
.plt:0000000000001610 ___ctype_b_loc  endp
.plt:0000000000001610
.plt:0000000000001616 ; ---------------------------------------------------------------------------
.plt:0000000000001616                 push    2Fh ; '/'
.plt:000000000000161B                 jmp     sub_1310
.plt:000000000000161B ; } // starts at 1310
.plt:000000000000161B _plt            ends
.plt:000000000000161B
.plt.got:0000000000001620 ; ===========================================================================
.plt.got:0000000000001620
.plt.got:0000000000001620 ; Segment type: Pure code
.plt.got:0000000000001620 ; Segment permissions: Read/Execute
.plt.got:0000000000001620 _plt_got        segment qword public 'CODE' use64
.plt.got:0000000000001620                 assume cs:_plt_got
.plt.got:0000000000001620                 ;org 1620h
.plt.got:0000000000001620                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:0000000000001620
.plt.got:0000000000001620 ; =============== S U B R O U T I N E =======================================
.plt.got:0000000000001620
.plt.got:0000000000001620 ; Attributes: thunk
.plt.got:0000000000001620
.plt.got:0000000000001620 ; int __fastcall _cxa_finalize(void *)
.plt.got:0000000000001620 __cxa_finalize  proc near               ; CODE XREF: __do_global_dtors_aux+1E↓p
.plt.got:0000000000001620 ; __unwind {
.plt.got:0000000000001620                 jmp     cs:__cxa_finalize_ptr
.plt.got:0000000000001620 __cxa_finalize  endp
.plt.got:0000000000001620
.plt.got:0000000000001620 ; ---------------------------------------------------------------------------
.plt.got:0000000000001626                 align 8
.plt.got:0000000000001626 ; } // starts at 1620
.plt.got:0000000000001626 _plt_got        ends
.plt.got:0000000000001626
LOAD:0000000000001628 ; ===========================================================================
LOAD:0000000000001628
LOAD:0000000000001628 ; Segment type: Pure code
LOAD:0000000000001628 ; Segment permissions: Read/Execute
LOAD:0000000000001628 LOAD            segment byte public 'CODE' use64
LOAD:0000000000001628                 assume cs:LOAD
LOAD:0000000000001628                 ;org 1628h
LOAD:0000000000001628                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000001628                 align 10h
LOAD:0000000000001628 LOAD            ends
LOAD:0000000000001628
.text:0000000000001630 ; ===========================================================================
.text:0000000000001630
.text:0000000000001630 ; Segment type: Pure code
.text:0000000000001630 ; Segment permissions: Read/Execute
.text:0000000000001630 _text           segment para public 'CODE' use64
.text:0000000000001630                 assume cs:_text
.text:0000000000001630                 ;org 1630h
.text:0000000000001630                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:0000000000001630
.text:0000000000001630 ; =============== S U B R O U T I N E =======================================
.text:0000000000001630
.text:0000000000001630
.text:0000000000001630 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:0000000000001630                 public main
.text:0000000000001630 main            proc near               ; DATA XREF: start+1D↓o
.text:0000000000001630 ; __unwind {
.text:0000000000001630                 push    rbp
.text:0000000000001631                 push    rbx
.text:0000000000001632                 mov     ebx, edi
.text:0000000000001634                 mov     rbp, rsi
.text:0000000000001637                 sub     rsp, 8
.text:000000000000163B                 mov     rdi, [rsi]
.text:000000000000163E                 call    set_program_name
.text:0000000000001643                 lea     rsi, aWrittenBySSAnd+1Bh ; locale
.text:000000000000164A                 mov     edi, 6          ; category
.text:000000000000164F                 call    _setlocale
.text:0000000000001654                 lea     rsi, dirname    ; "/usr/local/share/locale"
.text:000000000000165B                 lea     rdi, domainname ; "coreutils"
.text:0000000000001662                 call    _bindtextdomain
.text:0000000000001667                 lea     rdi, domainname ; "coreutils"
.text:000000000000166E                 call    _textdomain
.text:0000000000001673                 lea     rdi, close_stdout
.text:000000000000167A                 mov     cs:exit_failure, 2
.text:0000000000001684                 call    atexit
.text:0000000000001689                 cmp     ebx, 2
.text:000000000000168C                 mov     cs:argv, rbp
.text:0000000000001693                 jz      short loc_16F7
.text:0000000000001695                 cmp     ebx, 1
.text:0000000000001698                 jle     loc_1793
.text:000000000000169E                 movsxd  rax, ebx
.text:00000000000016A1                 lea     rsi, s2         ; "]"
.text:00000000000016A8                 mov     rdi, [rbp+rax*8-8] ; s1
.text:00000000000016AD                 call    _strcmp
.text:00000000000016B2                 test    eax, eax
.text:00000000000016B4                 jnz     loc_1793
.text:00000000000016BA                 lea     eax, [rbx-1]
.text:00000000000016BD                 lea     edi, [rbx-2]
.text:00000000000016C0                 mov     cs:pos, 1
.text:00000000000016CA                 mov     cs:argc, eax
.text:00000000000016D0                 call    posixtest
.text:00000000000016D5                 movsxd  rdx, cs:pos
.text:00000000000016DC                 cmp     edx, cs:argc
.text:00000000000016E2                 jnz     loc_17C2
.text:00000000000016E8                 xor     eax, 1
.text:00000000000016EB                 movzx   ebx, al
.text:00000000000016EE
.text:00000000000016EE loc_16EE:                               ; CODE XREF: main+123↓j
.text:00000000000016EE                                         ; main+15E↓j
.text:00000000000016EE                 add     rsp, 8
.text:00000000000016F2                 mov     eax, ebx
.text:00000000000016F4                 pop     rbx
.text:00000000000016F5                 pop     rbp
.text:00000000000016F6                 retn
.text:00000000000016F7 ; ---------------------------------------------------------------------------
.text:00000000000016F7
.text:00000000000016F7 loc_16F7:                               ; CODE XREF: main+63↑j
.text:00000000000016F7                 mov     rbp, [rbp+8]
.text:00000000000016FB                 lea     rsi, aHelp      ; "--help"
.text:0000000000001702                 mov     rdi, rbp        ; s1
.text:0000000000001705                 call    _strcmp
.text:000000000000170A                 test    eax, eax
.text:000000000000170C                 jz      loc_17E3
.text:0000000000001712                 lea     rsi, aVersion   ; "--version"
.text:0000000000001719                 mov     rdi, rbp        ; s1
.text:000000000000171C                 call    _strcmp
.text:0000000000001721                 test    eax, eax
.text:0000000000001723                 mov     ebx, eax
.text:0000000000001725                 jz      short loc_1755
.text:0000000000001727                 lea     rsi, s2         ; "]"
.text:000000000000172E                 mov     rdi, rbp        ; s1
.text:0000000000001731                 call    _strcmp
.text:0000000000001736                 test    eax, eax
.text:0000000000001738                 jnz     short loc_1793
.text:000000000000173A                 mov     cs:argc, 1
.text:0000000000001744                 mov     cs:pos, 1
.text:000000000000174E                 mov     ebx, 1
.text:0000000000001753                 jmp     short loc_16EE
.text:0000000000001755 ; ---------------------------------------------------------------------------
.text:0000000000001755
.text:0000000000001755 loc_1755:                               ; CODE XREF: main+F5↑j
.text:0000000000001755                 sub     rsp, 8
.text:0000000000001759                 mov     rcx, cs:Version
.text:0000000000001760                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:0000000000001767                 push    0
.text:0000000000001769                 lea     rdx, unk_8446
.text:0000000000001770                 lea     r9, aMatthewBradbur ; "Matthew Bradburn"
.text:0000000000001777                 lea     r8, aKevinBraunsdor ; "Kevin Braunsdorf"
.text:000000000000177E                 lea     rsi, aTestAndOr+0Ch ; "["
.text:0000000000001785                 xor     eax, eax
.text:0000000000001787                 call    version_etc
.text:000000000000178C                 pop     rax
.text:000000000000178D                 pop     rdx
.text:000000000000178E                 jmp     loc_16EE
.text:0000000000001793 ; ---------------------------------------------------------------------------
.text:0000000000001793
.text:0000000000001793 loc_1793:                               ; CODE XREF: main+68↑j
.text:0000000000001793                                         ; main+84↑j ...
.text:0000000000001793                 lea     rdi, s2         ; "]"
.text:000000000000179A                 call    quote
.text:000000000000179F                 lea     rsi, msgid      ; "missing %s"
.text:00000000000017A6                 mov     rbx, rax
.text:00000000000017A9                 mov     edx, 5          ; category
.text:00000000000017AE
.text:00000000000017AE loc_17AE:                               ; CODE XREF: main+1B1↓j
.text:00000000000017AE                 xor     edi, edi        ; domainname
.text:00000000000017B0                 call    _dcgettext
.text:00000000000017B5                 mov     rsi, rbx
.text:00000000000017B8                 mov     rdi, rax
.text:00000000000017BB                 xor     eax, eax
.text:00000000000017BD                 call    test_syntax_error
.text:00000000000017C2 ; ---------------------------------------------------------------------------
.text:00000000000017C2
.text:00000000000017C2 loc_17C2:                               ; CODE XREF: main+B2↑j
.text:00000000000017C2                 mov     rax, cs:argv
.text:00000000000017C9                 mov     rdi, [rax+rdx*8]
.text:00000000000017CD                 call    quote
.text:00000000000017D2                 mov     edx, 5
.text:00000000000017D7                 mov     rbx, rax
.text:00000000000017DA                 lea     rsi, aExtraArgumentS ; "extra argument %s"
.text:00000000000017E1                 jmp     short loc_17AE
.text:00000000000017E3 ; ---------------------------------------------------------------------------
.text:00000000000017E3
.text:00000000000017E3 loc_17E3:                               ; CODE XREF: main+DC↑j
.text:00000000000017E3                 xor     edi, edi        ; status
.text:00000000000017E5                 call    usage
.text:00000000000017E5 ; } // starts at 1630
.text:00000000000017E5 main            endp
.text:00000000000017E5
.text:00000000000017E5 ; ---------------------------------------------------------------------------
.text:00000000000017EA                 align 10h
.text:00000000000017F0
.text:00000000000017F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000017F0
.text:00000000000017F0 ; Attributes: noreturn fuzzy-sp info_from_lumina
.text:00000000000017F0
.text:00000000000017F0 ; void __fastcall __noreturn start(__int64, __int64, void (*)(void))
.text:00000000000017F0                 public start
.text:00000000000017F0 start           proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:00000000000017F0 ; __unwind {
.text:00000000000017F0                 xor     ebp, ebp
.text:00000000000017F2                 mov     r9, rdx         ; rtld_fini
.text:00000000000017F5                 pop     rsi             ; argc
.text:00000000000017F6                 mov     rdx, rsp        ; ubp_av
.text:00000000000017F9                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:00000000000017FD                 push    rax
.text:00000000000017FE                 push    rsp             ; stack_end
.text:00000000000017FF                 lea     r8, __libc_csu_fini ; fini
.text:0000000000001806                 lea     rcx, __libc_csu_init ; init
.text:000000000000180D                 lea     rdi, main       ; main
.text:0000000000001814                 call    cs:__libc_start_main_ptr
.text:000000000000181A                 hlt
.text:000000000000181A ; } // starts at 17F0
.text:000000000000181A start           endp
.text:000000000000181A
.text:000000000000181A ; ---------------------------------------------------------------------------
.text:000000000000181B                 align 20h
.text:0000000000001820
.text:0000000000001820 ; =============== S U B R O U T I N E =======================================
.text:0000000000001820
.text:0000000000001820 ; Attributes: bp-based frame info_from_lumina
.text:0000000000001820
.text:0000000000001820 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_18D3↓p
.text:0000000000001820                 lea     rdi, __bss_start
.text:0000000000001827                 push    rbp
.text:0000000000001828                 lea     rax, __bss_start
.text:000000000000182F                 cmp     rax, rdi
.text:0000000000001832                 mov     rbp, rsp
.text:0000000000001835                 jz      short loc_1850
.text:0000000000001837                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:000000000000183E                 test    rax, rax
.text:0000000000001841                 jz      short loc_1850
.text:0000000000001843                 pop     rbp
.text:0000000000001844                 jmp     rax
.text:0000000000001844 ; ---------------------------------------------------------------------------
.text:0000000000001846                 align 10h
.text:0000000000001850
.text:0000000000001850 loc_1850:                               ; CODE XREF: deregister_tm_clones+15↑j
.text:0000000000001850                                         ; deregister_tm_clones+21↑j
.text:0000000000001850                 pop     rbp
.text:0000000000001851                 retn
.text:0000000000001851 deregister_tm_clones endp
.text:0000000000001851
.text:0000000000001851 ; ---------------------------------------------------------------------------
.text:0000000000001852                 align 20h
.text:0000000000001860
.text:0000000000001860 ; =============== S U B R O U T I N E =======================================
.text:0000000000001860
.text:0000000000001860 ; Attributes: bp-based frame info_from_lumina
.text:0000000000001860
.text:0000000000001860 register_tm_clones proc near            ; CODE XREF: frame_dummy+5↓j
.text:0000000000001860                 lea     rdi, __bss_start
.text:0000000000001867                 lea     rsi, __bss_start
.text:000000000000186E                 push    rbp
.text:000000000000186F                 sub     rsi, rdi
.text:0000000000001872                 mov     rbp, rsp
.text:0000000000001875                 sar     rsi, 3
.text:0000000000001879                 mov     rax, rsi
.text:000000000000187C                 shr     rax, 3Fh
.text:0000000000001880                 add     rsi, rax
.text:0000000000001883                 sar     rsi, 1
.text:0000000000001886                 jz      short loc_18A0
.text:0000000000001888                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:000000000000188F                 test    rax, rax
.text:0000000000001892                 jz      short loc_18A0
.text:0000000000001894                 pop     rbp
.text:0000000000001895                 jmp     rax
.text:0000000000001895 ; ---------------------------------------------------------------------------
.text:0000000000001897                 align 20h
.text:00000000000018A0
.text:00000000000018A0 loc_18A0:                               ; CODE XREF: register_tm_clones+26↑j
.text:00000000000018A0                                         ; register_tm_clones+32↑j
.text:00000000000018A0                 pop     rbp
.text:00000000000018A1                 retn
.text:00000000000018A1 register_tm_clones endp
.text:00000000000018A1
.text:00000000000018A1 ; ---------------------------------------------------------------------------
.text:00000000000018A2                 align 10h
.text:00000000000018B0
.text:00000000000018B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000018B0
.text:00000000000018B0 ; Attributes: info_from_lumina
.text:00000000000018B0
.text:00000000000018B0 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:00000000000018B0                 cmp     cs:completed_7697, 0
.text:00000000000018B7                 jnz     short locret_18E8
.text:00000000000018B9                 cmp     cs:__cxa_finalize_ptr, 0
.text:00000000000018C1                 push    rbp
.text:00000000000018C2                 mov     rbp, rsp
.text:00000000000018C5                 jz      short loc_18D3
.text:00000000000018C7                 mov     rdi, cs:__dso_handle ; void *
.text:00000000000018CE                 call    __cxa_finalize
.text:00000000000018D3
.text:00000000000018D3 loc_18D3:                               ; CODE XREF: __do_global_dtors_aux+15↑j
.text:00000000000018D3                 call    deregister_tm_clones
.text:00000000000018D8                 mov     cs:completed_7697, 1
.text:00000000000018DF                 pop     rbp
.text:00000000000018E0                 retn
.text:00000000000018E0 ; ---------------------------------------------------------------------------
.text:00000000000018E1                 align 8
.text:00000000000018E8
.text:00000000000018E8 locret_18E8:                            ; CODE XREF: __do_global_dtors_aux+7↑j
.text:00000000000018E8                 rep retn
.text:00000000000018E8 __do_global_dtors_aux endp
.text:00000000000018E8
.text:00000000000018E8 ; ---------------------------------------------------------------------------
.text:00000000000018EA                 align 10h
.text:00000000000018F0
.text:00000000000018F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000018F0
.text:00000000000018F0 ; Attributes: bp-based frame
.text:00000000000018F0
.text:00000000000018F0 frame_dummy     proc near               ; CODE XREF: __libc_csu_init+49↓p
.text:00000000000018F0                                         ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:00000000000018F0                 push    rbp
.text:00000000000018F1                 mov     rbp, rsp
.text:00000000000018F4                 pop     rbp
.text:00000000000018F5                 jmp     register_tm_clones
.text:00000000000018F5 frame_dummy     endp
.text:00000000000018F5
.text:00000000000018F5 ; ---------------------------------------------------------------------------
.text:00000000000018FA                 align 20h
.text:0000000000001900
.text:0000000000001900 ; =============== S U B R O U T I N E =======================================
.text:0000000000001900
.text:0000000000001900
.text:0000000000001900 binop           proc near               ; CODE XREF: or+232↓p
.text:0000000000001900                                         ; or+244↓p ...
.text:0000000000001900 ; __unwind {
.text:0000000000001900                 mov     r8, rdi
.text:0000000000001903                 lea     rdi, unk_8305
.text:000000000000190A                 mov     ecx, 2
.text:000000000000190F                 mov     rsi, r8
.text:0000000000001912                 mov     eax, 1
.text:0000000000001917                 repe cmpsb
.text:0000000000001919                 setnbe  dl
.text:000000000000191C                 sbb     dl, 0
.text:000000000000191F                 test    dl, dl
.text:0000000000001921                 jz      locret_1A68
.text:0000000000001927                 lea     rdi, unk_8304
.text:000000000000192E                 mov     ecx, 3
.text:0000000000001933                 mov     rsi, r8
.text:0000000000001936                 repe cmpsb
.text:0000000000001938                 setnbe  dl
.text:000000000000193B                 sbb     dl, 0
.text:000000000000193E                 test    dl, dl
.text:0000000000001940                 jz      locret_1A68
.text:0000000000001946                 lea     rdi, unk_8307
.text:000000000000194D                 mov     ecx, 3
.text:0000000000001952                 mov     rsi, r8
.text:0000000000001955                 repe cmpsb
.text:0000000000001957                 setnbe  dl
.text:000000000000195A                 sbb     dl, 0
.text:000000000000195D                 test    dl, dl
.text:000000000000195F                 jz      locret_1A68
.text:0000000000001965                 lea     rdi, unk_830A
.text:000000000000196C                 mov     ecx, 4
.text:0000000000001971                 mov     rsi, r8
.text:0000000000001974                 repe cmpsb
.text:0000000000001976                 setnbe  dl
.text:0000000000001979                 sbb     dl, 0
.text:000000000000197C                 test    dl, dl
.text:000000000000197E                 jz      locret_1A68
.text:0000000000001984                 lea     rdi, unk_830E
.text:000000000000198B                 mov     ecx, 4
.text:0000000000001990                 mov     rsi, r8
.text:0000000000001993                 repe cmpsb
.text:0000000000001995                 setnbe  dl
.text:0000000000001998                 sbb     dl, 0
.text:000000000000199B                 test    dl, dl
.text:000000000000199D                 jz      locret_1A68
.text:00000000000019A3                 lea     rdi, unk_8312
.text:00000000000019AA                 mov     ecx, 4
.text:00000000000019AF                 mov     rsi, r8
.text:00000000000019B2                 repe cmpsb
.text:00000000000019B4                 setnbe  dl
.text:00000000000019B7                 sbb     dl, 0
.text:00000000000019BA                 test    dl, dl
.text:00000000000019BC                 jz      locret_1A68
.text:00000000000019C2                 lea     rdi, unk_8316
.text:00000000000019C9                 mov     ecx, 4
.text:00000000000019CE                 mov     rsi, r8
.text:00000000000019D1                 repe cmpsb
.text:00000000000019D3                 setnbe  dl
.text:00000000000019D6                 sbb     dl, 0
.text:00000000000019D9                 test    dl, dl
.text:00000000000019DB                 jz      locret_1A68
.text:00000000000019E1                 lea     rdi, unk_831A
.text:00000000000019E8                 mov     ecx, 4
.text:00000000000019ED                 mov     rsi, r8
.text:00000000000019F0                 repe cmpsb
.text:00000000000019F2                 setnbe  dl
.text:00000000000019F5                 sbb     dl, 0
.text:00000000000019F8                 test    dl, dl
.text:00000000000019FA                 jz      short locret_1A68
.text:00000000000019FC                 lea     rdi, unk_831E
.text:0000000000001A03                 mov     ecx, 4
.text:0000000000001A08                 mov     rsi, r8
.text:0000000000001A0B                 repe cmpsb
.text:0000000000001A0D                 setnbe  dl
.text:0000000000001A10                 sbb     dl, 0
.text:0000000000001A13                 test    dl, dl
.text:0000000000001A15                 jz      short locret_1A68
.text:0000000000001A17                 lea     rdi, unk_8322
.text:0000000000001A1E                 mov     ecx, 4
.text:0000000000001A23                 mov     rsi, r8
.text:0000000000001A26                 repe cmpsb
.text:0000000000001A28                 setnbe  dl
.text:0000000000001A2B                 sbb     dl, 0
.text:0000000000001A2E                 test    dl, dl
.text:0000000000001A30                 jz      short locret_1A68
.text:0000000000001A32                 lea     rdi, unk_8326
.text:0000000000001A39                 mov     ecx, 4
.text:0000000000001A3E                 mov     rsi, r8
.text:0000000000001A41                 repe cmpsb
.text:0000000000001A43                 setnbe  dl
.text:0000000000001A46                 sbb     dl, 0
.text:0000000000001A49                 test    dl, dl
.text:0000000000001A4B                 jz      short locret_1A68
.text:0000000000001A4D                 lea     rdi, unk_832A
.text:0000000000001A54                 mov     ecx, 4
.text:0000000000001A59                 mov     rsi, r8
.text:0000000000001A5C                 repe cmpsb
.text:0000000000001A5E                 setnbe  al
.text:0000000000001A61                 sbb     al, 0
.text:0000000000001A63                 test    al, al
.text:0000000000001A65                 setz    al
.text:0000000000001A68
.text:0000000000001A68 locret_1A68:                            ; CODE XREF: binop+21↑j
.text:0000000000001A68                                         ; binop+40↑j ...
.text:0000000000001A68                 rep retn
.text:0000000000001A68 ; } // starts at 1900
.text:0000000000001A68 binop           endp
.text:0000000000001A68
.text:0000000000001A68 ; ---------------------------------------------------------------------------
.text:0000000000001A6A                 align 10h
.text:0000000000001A70
.text:0000000000001A70 ; =============== S U B R O U T I N E =======================================
.text:0000000000001A70
.text:0000000000001A70 ; Attributes: noreturn
.text:0000000000001A70
.text:0000000000001A70 test_syntax_error proc near             ; CODE XREF: main+18D↑p
.text:0000000000001A70                                         ; find_int+CF↓p ...
.text:0000000000001A70
.text:0000000000001A70 var_D8          = dword ptr -0D8h
.text:0000000000001A70 var_D4          = dword ptr -0D4h
.text:0000000000001A70 var_D0          = qword ptr -0D0h
.text:0000000000001A70 var_C8          = qword ptr -0C8h
.text:0000000000001A70 var_C0          = qword ptr -0C0h
.text:0000000000001A70 var_B8          = byte ptr -0B8h
.text:0000000000001A70 var_B0          = qword ptr -0B0h
.text:0000000000001A70 var_A8          = qword ptr -0A8h
.text:0000000000001A70 var_A0          = qword ptr -0A0h
.text:0000000000001A70 var_98          = qword ptr -98h
.text:0000000000001A70 var_90          = qword ptr -90h
.text:0000000000001A70 var_88          = xmmword ptr -88h
.text:0000000000001A70 var_78          = xmmword ptr -78h
.text:0000000000001A70 var_68          = xmmword ptr -68h
.text:0000000000001A70 var_58          = xmmword ptr -58h
.text:0000000000001A70 var_48          = xmmword ptr -48h
.text:0000000000001A70 var_38          = xmmword ptr -38h
.text:0000000000001A70 var_28          = xmmword ptr -28h
.text:0000000000001A70 var_18          = xmmword ptr -18h
.text:0000000000001A70 arg_0           = byte ptr  8
.text:0000000000001A70
.text:0000000000001A70 ; __unwind {
.text:0000000000001A70                 sub     rsp, 0D8h
.text:0000000000001A77                 test    al, al
.text:0000000000001A79                 mov     [rsp+0D8h+var_B0], rsi
.text:0000000000001A7E                 mov     [rsp+0D8h+var_A8], rdx
.text:0000000000001A83                 mov     [rsp+0D8h+var_A0], rcx
.text:0000000000001A88                 mov     [rsp+0D8h+var_98], r8
.text:0000000000001A8D                 mov     [rsp+0D8h+var_90], r9
.text:0000000000001A92                 jz      short loc_1ACB
.text:0000000000001A94                 movaps  [rsp+0D8h+var_88], xmm0
.text:0000000000001A99                 movaps  [rsp+0D8h+var_78], xmm1
.text:0000000000001A9E                 movaps  [rsp+0D8h+var_68], xmm2
.text:0000000000001AA3                 movaps  [rsp+0D8h+var_58], xmm3
.text:0000000000001AAB                 movaps  [rsp+0D8h+var_48], xmm4
.text:0000000000001AB3                 movaps  [rsp+0D8h+var_38], xmm5
.text:0000000000001ABB                 movaps  [rsp+0D8h+var_28], xmm6
.text:0000000000001AC3                 movaps  [rsp+0D8h+var_18], xmm7
.text:0000000000001ACB
.text:0000000000001ACB loc_1ACB:                               ; CODE XREF: test_syntax_error+22↑j
.text:0000000000001ACB                 mov     rax, fs:28h
.text:0000000000001AD4                 mov     [rsp+0D8h+var_C0], rax
.text:0000000000001AD9                 xor     eax, eax
.text:0000000000001ADB                 lea     rax, [rsp+0D8h+arg_0]
.text:0000000000001AE3                 mov     rdx, rdi
.text:0000000000001AE6                 mov     rcx, rsp
.text:0000000000001AE9                 xor     edi, edi
.text:0000000000001AEB                 xor     esi, esi
.text:0000000000001AED                 mov     [rsp+0D8h+var_D0], rax
.text:0000000000001AF2                 lea     rax, [rsp+0D8h+var_B8]
.text:0000000000001AF7                 mov     [rsp+0D8h+var_D8], 8
.text:0000000000001AFE                 mov     [rsp+0D8h+var_D4], 30h ; '0'
.text:0000000000001B06                 mov     [rsp+0D8h+var_C8], rax
.text:0000000000001B0B                 call    verror
.text:0000000000001B10                 mov     edi, 2          ; status
.text:0000000000001B15                 call    _exit
.text:0000000000001B15 ; } // starts at 1A70
.text:0000000000001B15 test_syntax_error endp
.text:0000000000001B15
.text:0000000000001B15 ; ---------------------------------------------------------------------------
.text:0000000000001B1A                 align 20h
.text:0000000000001B20
.text:0000000000001B20 ; =============== S U B R O U T I N E =======================================
.text:0000000000001B20
.text:0000000000001B20
.text:0000000000001B20 find_int        proc near               ; CODE XREF: binary_operator+321↓p
.text:0000000000001B20                                         ; binary_operator+4A5↓p ...
.text:0000000000001B20 ; __unwind {
.text:0000000000001B20                 push    rbx
.text:0000000000001B21                 mov     rbx, rdi
.text:0000000000001B24                 call    ___ctype_b_loc
.text:0000000000001B29                 mov     r8, [rax]
.text:0000000000001B2C                 mov     rax, rbx
.text:0000000000001B2F
.text:0000000000001B2F loc_1B2F:                               ; CODE XREF: find_int+94↓j
.text:0000000000001B2F                 movzx   ecx, byte ptr [rax]
.text:0000000000001B32                 test    byte ptr [r8+rcx*2], 1
.text:0000000000001B37                 mov     rdx, rcx
.text:0000000000001B3A                 jnz     short loc_1BB0
.text:0000000000001B3C                 cmp     cl, 2Bh ; '+'
.text:0000000000001B3F                 jz      short loc_1BC0
.text:0000000000001B41                 xor     ecx, ecx
.text:0000000000001B43                 cmp     dl, 2Dh ; '-'
.text:0000000000001B46                 setz    cl
.text:0000000000001B49                 add     rcx, rax
.text:0000000000001B4C
.text:0000000000001B4C loc_1B4C:                               ; CODE XREF: find_int+A7↓j
.text:0000000000001B4C                 movsx   esi, byte ptr [rcx]
.text:0000000000001B4F                 lea     rdx, [rcx+1]
.text:0000000000001B53                 sub     esi, 30h ; '0'
.text:0000000000001B56                 cmp     esi, 9
.text:0000000000001B59                 ja      short loc_1BC9
.text:0000000000001B5B                 movsx   esi, byte ptr [rcx+1]
.text:0000000000001B5F                 mov     ecx, esi
.text:0000000000001B61                 sub     esi, 30h ; '0'
.text:0000000000001B64                 cmp     esi, 9
.text:0000000000001B67                 ja      short loc_1B81
.text:0000000000001B69                 nop     dword ptr [rax+00000000h]
.text:0000000000001B70
.text:0000000000001B70 loc_1B70:                               ; CODE XREF: find_int+5F↓j
.text:0000000000001B70                 add     rdx, 1
.text:0000000000001B74                 movsx   esi, byte ptr [rdx]
.text:0000000000001B77                 mov     ecx, esi
.text:0000000000001B79                 sub     esi, 30h ; '0'
.text:0000000000001B7C                 cmp     esi, 9
.text:0000000000001B7F                 jbe     short loc_1B70
.text:0000000000001B81
.text:0000000000001B81 loc_1B81:                               ; CODE XREF: find_int+47↑j
.text:0000000000001B81                 movzx   esi, cl
.text:0000000000001B84                 test    byte ptr [r8+rsi*2], 1
.text:0000000000001B89                 jz      short loc_1BA1
.text:0000000000001B8B                 nop     dword ptr [rax+rax+00h]
.text:0000000000001B90
.text:0000000000001B90 loc_1B90:                               ; CODE XREF: find_int+7F↓j
.text:0000000000001B90                 add     rdx, 1
.text:0000000000001B94                 movzx   esi, byte ptr [rdx]
.text:0000000000001B97                 test    byte ptr [r8+rsi*2], 1
.text:0000000000001B9C                 mov     rcx, rsi
.text:0000000000001B9F                 jnz     short loc_1B90
.text:0000000000001BA1
.text:0000000000001BA1 loc_1BA1:                               ; CODE XREF: find_int+69↑j
.text:0000000000001BA1                 test    cl, cl
.text:0000000000001BA3                 jnz     short loc_1BC9
.text:0000000000001BA5                 pop     rbx
.text:0000000000001BA6                 retn
.text:0000000000001BA6 ; ---------------------------------------------------------------------------
.text:0000000000001BA7                 align 10h
.text:0000000000001BB0
.text:0000000000001BB0 loc_1BB0:                               ; CODE XREF: find_int+1A↑j
.text:0000000000001BB0                 add     rax, 1
.text:0000000000001BB4                 jmp     loc_1B2F
.text:0000000000001BB4 ; ---------------------------------------------------------------------------
.text:0000000000001BB9                 align 20h
.text:0000000000001BC0
.text:0000000000001BC0 loc_1BC0:                               ; CODE XREF: find_int+1F↑j
.text:0000000000001BC0                 lea     rcx, [rax+1]
.text:0000000000001BC4                 mov     rax, rcx
.text:0000000000001BC7                 jmp     short loc_1B4C
.text:0000000000001BC9 ; ---------------------------------------------------------------------------
.text:0000000000001BC9
.text:0000000000001BC9 loc_1BC9:                               ; CODE XREF: find_int+39↑j
.text:0000000000001BC9                                         ; find_int+83↑j
.text:0000000000001BC9                 mov     rdi, rbx
.text:0000000000001BCC                 call    quote
.text:0000000000001BD1                 lea     rsi, aInvalidInteger ; "invalid integer %s"
.text:0000000000001BD8                 mov     rbx, rax
.text:0000000000001BDB                 xor     edi, edi        ; domainname
.text:0000000000001BDD                 mov     edx, 5          ; category
.text:0000000000001BE2                 call    _dcgettext
.text:0000000000001BE7                 mov     rsi, rbx
.text:0000000000001BEA                 mov     rdi, rax
.text:0000000000001BED                 xor     eax, eax
.text:0000000000001BEF                 call    test_syntax_error
.text:0000000000001BEF ; } // starts at 1B20
.text:0000000000001BEF find_int        endp
.text:0000000000001BEF
.text:0000000000001BEF ; ---------------------------------------------------------------------------
.text:0000000000001BF4                 align 20h
.text:0000000000001C00
.text:0000000000001C00 ; =============== S U B R O U T I N E =======================================
.text:0000000000001C00
.text:0000000000001C00 ; Attributes: noreturn
.text:0000000000001C00
.text:0000000000001C00 beyond          proc near               ; CODE XREF: unary_advance+25↓p
.text:0000000000001C00                                         ; two_arguments+6B↓p ...
.text:0000000000001C00 ; __unwind {
.text:0000000000001C00                 movsxd  rdx, cs:argc
.text:0000000000001C07                 mov     rax, cs:argv
.text:0000000000001C0E                 push    rbx
.text:0000000000001C0F                 mov     rdi, [rax+rdx*8-8]
.text:0000000000001C14                 call    quote
.text:0000000000001C19                 lea     rsi, aMissingArgumen ; "missing argument after %s"
.text:0000000000001C20                 mov     rbx, rax
.text:0000000000001C23                 xor     edi, edi        ; domainname
.text:0000000000001C25                 mov     edx, 5          ; category
.text:0000000000001C2A                 call    _dcgettext
.text:0000000000001C2F                 mov     rsi, rbx
.text:0000000000001C32                 mov     rdi, rax
.text:0000000000001C35                 xor     eax, eax
.text:0000000000001C37                 call    test_syntax_error
.text:0000000000001C37 ; } // starts at 1C00
.text:0000000000001C37 beyond          endp
.text:0000000000001C37
.text:0000000000001C37 ; ---------------------------------------------------------------------------
.text:0000000000001C3C                 align 20h
.text:0000000000001C40
.text:0000000000001C40 ; =============== S U B R O U T I N E =======================================
.text:0000000000001C40
.text:0000000000001C40
.text:0000000000001C40 unary_advance   proc near               ; CODE XREF: unary_operator:loc_2230↓p
.text:0000000000001C40                                         ; unary_operator:loc_2278↓p ...
.text:0000000000001C40 ; __unwind {
.text:0000000000001C40                 mov     eax, cs:pos
.text:0000000000001C46                 lea     edx, [rax+1]
.text:0000000000001C49                 cmp     edx, cs:argc
.text:0000000000001C4F                 mov     cs:pos, edx
.text:0000000000001C55                 jge     short loc_1C61
.text:0000000000001C57                 add     eax, 2
.text:0000000000001C5A                 mov     cs:pos, eax
.text:0000000000001C60                 retn
.text:0000000000001C61 ; ---------------------------------------------------------------------------
.text:0000000000001C61
.text:0000000000001C61 loc_1C61:                               ; CODE XREF: unary_advance+15↑j
.text:0000000000001C61                 sub     rsp, 8
.text:0000000000001C65                 call    beyond
.text:0000000000001C65 ; } // starts at 1C40
.text:0000000000001C65 unary_advance   endp
.text:0000000000001C65
.text:0000000000001C65 ; ---------------------------------------------------------------------------
.text:0000000000001C6A                 align 10h
.text:0000000000001C70
.text:0000000000001C70 ; =============== S U B R O U T I N E =======================================
.text:0000000000001C70
.text:0000000000001C70
.text:0000000000001C70 binary_operator proc near               ; CODE XREF: or+302↓p
.text:0000000000001C70                                         ; or+31F↓p ...
.text:0000000000001C70
.text:0000000000001C70 var_1A0         = qword ptr -1A0h
.text:0000000000001C70 var_198         = stat ptr -198h
.text:0000000000001C70 stat_buf        = stat ptr -108h
.text:0000000000001C70 var_78          = byte ptr -78h
.text:0000000000001C70 var_58          = byte ptr -58h
.text:0000000000001C70 var_40          = qword ptr -40h
.text:0000000000001C70
.text:0000000000001C70 ; __unwind {
.text:0000000000001C70                 push    r15
.text:0000000000001C72                 push    r14
.text:0000000000001C74                 mov     eax, edi
.text:0000000000001C76                 push    r13
.text:0000000000001C78                 push    r12
.text:0000000000001C7A                 push    rbp
.text:0000000000001C7B                 push    rbx
.text:0000000000001C7C                 sub     rsp, 178h
.text:0000000000001C83                 mov     ecx, cs:pos
.text:0000000000001C89                 mov     rbx, fs:28h
.text:0000000000001C92                 mov     [rsp+1A8h+var_40], rbx
.text:0000000000001C9A                 xor     ebx, ebx
.text:0000000000001C9C                 test    dil, dil
.text:0000000000001C9F                 lea     edx, [rcx+1]
.text:0000000000001CA2                 jz      short loc_1CAD
.text:0000000000001CA4                 mov     cs:pos, edx
.text:0000000000001CAA                 lea     edx, [rcx+2]
.text:0000000000001CAD
.text:0000000000001CAD loc_1CAD:                               ; CODE XREF: binary_operator+32↑j
.text:0000000000001CAD                 mov     edi, cs:argc
.text:0000000000001CB3                 xor     r13d, r13d
.text:0000000000001CB6                 mov     rbx, cs:argv
.text:0000000000001CBD                 movsxd  r14, edx
.text:0000000000001CC0                 lea     ecx, [rdi-2]
.text:0000000000001CC3                 cmp     ecx, edx
.text:0000000000001CC5                 jle     short loc_1CE8
.text:0000000000001CC7                 mov     rsi, [rbx+r14*8+8]
.text:0000000000001CCC                 lea     rdi, aEfDoesNotAccep+14h ; "-l"
.text:0000000000001CD3                 mov     ecx, 3
.text:0000000000001CD8                 repe cmpsb
.text:0000000000001CDA                 setnbe  cl
.text:0000000000001CDD                 sbb     cl, 0
.text:0000000000001CE0                 test    cl, cl
.text:0000000000001CE2                 jz      loc_1D80
.text:0000000000001CE8
.text:0000000000001CE8 loc_1CE8:                               ; CODE XREF: binary_operator+55↑j
.text:0000000000001CE8                                         ; binary_operator+11C↓j
.text:0000000000001CE8                 mov     rsi, [rbx+r14*8]
.text:0000000000001CEC                 lea     r15, ds:0[r14*8]
.text:0000000000001CF4                 movzx   edx, byte ptr [rsi]
.text:0000000000001CF7                 cmp     dl, 2Dh ; '-'
.text:0000000000001CFA                 jz      loc_1DF0
.text:0000000000001D00                 cmp     dl, 3Dh ; '='
.text:0000000000001D03                 jz      loc_1D98
.text:0000000000001D09
.text:0000000000001D09 loc_1D09:                               ; CODE XREF: binary_operator+132↓j
.text:0000000000001D09                                         ; binary_operator+13C↓j
.text:0000000000001D09                 lea     rdi, unk_8304
.text:0000000000001D10                 mov     ecx, 3
.text:0000000000001D15                 repe cmpsb
.text:0000000000001D17                 setnbe  al
.text:0000000000001D1A                 sbb     al, 0
.text:0000000000001D1C                 test    al, al
.text:0000000000001D1E                 jnz     loc_219D
.text:0000000000001D24                 movsxd  rax, cs:pos
.text:0000000000001D2B                 mov     rbp, rax
.text:0000000000001D2E                 add     rax, 2
.text:0000000000001D32                 mov     rsi, [rbx+rax*8] ; s2
.text:0000000000001D36                 mov     rdi, [rbx+rax*8-10h] ; s1
.text:0000000000001D3B                 call    _strcmp
.text:0000000000001D40                 test    eax, eax
.text:0000000000001D42                 setnz   r13b
.text:0000000000001D46                 add     ebp, 3
.text:0000000000001D49                 mov     cs:pos, ebp
.text:0000000000001D4F
.text:0000000000001D4F loc_1D4F:                               ; CODE XREF: binary_operator+173↓j
.text:0000000000001D4F                                         ; binary_operator+21E↓j ...
.text:0000000000001D4F                 mov     rbx, [rsp+1A8h+var_40]
.text:0000000000001D57                 xor     rbx, fs:28h
.text:0000000000001D60                 mov     eax, r13d
.text:0000000000001D63                 jnz     loc_2198
.text:0000000000001D69                 add     rsp, 178h
.text:0000000000001D70                 pop     rbx
.text:0000000000001D71                 pop     rbp
.text:0000000000001D72                 pop     r12
.text:0000000000001D74                 pop     r13
.text:0000000000001D76                 pop     r14
.text:0000000000001D78                 pop     r15
.text:0000000000001D7A                 retn
.text:0000000000001D7A ; ---------------------------------------------------------------------------
.text:0000000000001D7B                 align 20h
.text:0000000000001D80
.text:0000000000001D80 loc_1D80:                               ; CODE XREF: binary_operator+72↑j
.text:0000000000001D80                 mov     cs:pos, edx
.text:0000000000001D86                 mov     r13d, 1
.text:0000000000001D8C                 jmp     loc_1CE8
.text:0000000000001D8C ; ---------------------------------------------------------------------------
.text:0000000000001D91                 align 8
.text:0000000000001D98
.text:0000000000001D98 loc_1D98:                               ; CODE XREF: binary_operator+93↑j
.text:0000000000001D98                 movzx   eax, byte ptr [rsi+1]
.text:0000000000001D9C                 test    al, al
.text:0000000000001D9E                 jz      short loc_1DB8
.text:0000000000001DA0                 cmp     al, 3Dh ; '='
.text:0000000000001DA2                 jnz     loc_1D09
.text:0000000000001DA8                 cmp     byte ptr [rsi+2], 0
.text:0000000000001DAC                 jnz     loc_1D09
.text:0000000000001DB2                 nop     word ptr [rax+rax+00h]
.text:0000000000001DB8
.text:0000000000001DB8 loc_1DB8:                               ; CODE XREF: binary_operator+12E↑j
.text:0000000000001DB8                 movsxd  rax, cs:pos
.text:0000000000001DBF                 mov     rbp, rax
.text:0000000000001DC2                 add     rax, 2
.text:0000000000001DC6                 mov     rsi, [rbx+rax*8] ; s2
.text:0000000000001DCA                 mov     rdi, [rbx+rax*8-10h] ; s1
.text:0000000000001DCF                 call    _strcmp
.text:0000000000001DD4                 test    eax, eax
.text:0000000000001DD6                 setz    r13b
.text:0000000000001DDA                 add     ebp, 3
.text:0000000000001DDD                 mov     cs:pos, ebp
.text:0000000000001DE3                 jmp     loc_1D4F
.text:0000000000001DE3 ; ---------------------------------------------------------------------------
.text:0000000000001DE8                 align 10h
.text:0000000000001DF0
.text:0000000000001DF0 loc_1DF0:                               ; CODE XREF: binary_operator+8A↑j
.text:0000000000001DF0                 movzx   edx, byte ptr [rsi+1]
.text:0000000000001DF4                 cmp     dl, 6Ch ; 'l'
.text:0000000000001DF7                 jz      loc_1F68
.text:0000000000001DFD                 cmp     dl, 67h ; 'g'
.text:0000000000001E00                 jz      loc_1F68
.text:0000000000001E06
.text:0000000000001E06 loc_1E06:                               ; CODE XREF: binary_operator+304↓j
.text:0000000000001E06                 cmp     dl, 65h ; 'e'
.text:0000000000001E09                 jz      loc_1ED0
.text:0000000000001E0F                 cmp     dl, 6Eh ; 'n'
.text:0000000000001E12                 jz      loc_2010
.text:0000000000001E18
.text:0000000000001E18 loc_1E18:                               ; CODE XREF: binary_operator+473↓j
.text:0000000000001E18                 cmp     dl, 6Fh ; 'o'
.text:0000000000001E1B                 jnz     loc_2170
.text:0000000000001E21                 cmp     byte ptr [rsi+2], 74h ; 't'
.text:0000000000001E25                 jnz     loc_209A
.text:0000000000001E2B                 cmp     byte ptr [rsi+3], 0
.text:0000000000001E2F                 jnz     loc_209A
.text:0000000000001E35                 add     cs:pos, 3
.text:0000000000001E3C                 or      r13b, al
.text:0000000000001E3F                 jnz     loc_21A2
.text:0000000000001E45                 lea     r14, [rsp+1A8h+stat_buf]
.text:0000000000001E4D                 mov     rsi, [rbx+r15-8] ; filename
.text:0000000000001E52                 mov     edi, 1          ; ver
.text:0000000000001E57                 mov     rdx, r14        ; stat_buf
.text:0000000000001E5A                 call    ___xstat
.text:0000000000001E5F                 test    eax, eax
.text:0000000000001E61                 mov     ebp, eax
.text:0000000000001E63                 jnz     short loc_1E7A
.text:0000000000001E65                 mov     rax, [rsp+1A8h+stat_buf.st_mtim.tv_nsec]
.text:0000000000001E6D                 mov     r12, [rsp+1A8h+stat_buf.st_mtim.tv_sec]
.text:0000000000001E75                 mov     [rsp+1A8h+var_1A0], rax
.text:0000000000001E7A
.text:0000000000001E7A loc_1E7A:                               ; CODE XREF: binary_operator+1F3↑j
.text:0000000000001E7A                 mov     rsi, [rbx+r15+8] ; filename
.text:0000000000001E7F                 mov     rdx, r14        ; stat_buf
.text:0000000000001E82                 mov     edi, 1          ; ver
.text:0000000000001E87                 call    ___xstat
.text:0000000000001E8C                 test    eax, eax
.text:0000000000001E8E                 jnz     loc_1D4F
.text:0000000000001E94                 mov     rdx, [rsp+1A8h+stat_buf.st_mtim.tv_sec]
.text:0000000000001E9C                 test    ebp, ebp
.text:0000000000001E9E                 mov     rsi, [rsp+1A8h+stat_buf.st_mtim.tv_nsec]
.text:0000000000001EA6                 setnz   r13b
.text:0000000000001EAA                 cmp     r12, rdx
.text:0000000000001EAD                 setl    al
.text:0000000000001EB0                 or      r13b, al
.text:0000000000001EB3                 jnz     loc_1D4F
.text:0000000000001EB9                 mov     ebp, dword ptr [rsp+1A8h+var_1A0]
.text:0000000000001EBD                 sub     ebp, esi
.text:0000000000001EBF                 shr     ebp, 1Fh
.text:0000000000001EC2                 cmp     r12, rdx
.text:0000000000001EC5                 cmovle  r13d, ebp
.text:0000000000001EC9                 jmp     loc_1D4F
.text:0000000000001EC9 ; ---------------------------------------------------------------------------
.text:0000000000001ECE                 align 10h
.text:0000000000001ED0
.text:0000000000001ED0 loc_1ED0:                               ; CODE XREF: binary_operator+199↑j
.text:0000000000001ED0                 movzx   edx, byte ptr [rsi+2]
.text:0000000000001ED4                 cmp     dl, 71h ; 'q'
.text:0000000000001ED7                 jz      loc_2090
.text:0000000000001EDD
.text:0000000000001EDD loc_1EDD:                               ; CODE XREF: binary_operator+50D↓j
.text:0000000000001EDD                 cmp     dl, 66h ; 'f'
.text:0000000000001EE0                 jnz     loc_209A
.text:0000000000001EE6                 cmp     byte ptr [rsi+3], 0
.text:0000000000001EEA                 jnz     loc_209A
.text:0000000000001EF0                 add     cs:pos, 3
.text:0000000000001EF7                 or      r13b, al
.text:0000000000001EFA                 jnz     loc_21C1
.text:0000000000001F00                 mov     rsi, [rbx+r15-8] ; filename
.text:0000000000001F05                 lea     rdx, [rsp+1A8h+var_198] ; stat_buf
.text:0000000000001F0A                 mov     edi, 1          ; ver
.text:0000000000001F0F                 call    ___xstat
.text:0000000000001F14                 test    eax, eax
.text:0000000000001F16                 jnz     loc_1D4F
.text:0000000000001F1C                 mov     rsi, [rbx+r15+8] ; filename
.text:0000000000001F21                 lea     rdx, [rsp+1A8h+stat_buf] ; stat_buf
.text:0000000000001F29                 mov     edi, 1          ; ver
.text:0000000000001F2E                 call    ___xstat
.text:0000000000001F33                 test    eax, eax
.text:0000000000001F35                 jnz     loc_1D4F
.text:0000000000001F3B                 mov     rax, [rsp+1A8h+stat_buf.st_dev]
.text:0000000000001F43                 cmp     [rsp+1A8h+var_198.st_dev], rax
.text:0000000000001F48                 jnz     loc_1D4F
.text:0000000000001F4E                 mov     rax, [rsp+1A8h+stat_buf.st_ino]
.text:0000000000001F56                 cmp     [rsp+1A8h+var_198.st_ino], rax
.text:0000000000001F5B                 setz    r13b
.text:0000000000001F5F                 jmp     loc_1D4F
.text:0000000000001F5F ; ---------------------------------------------------------------------------
.text:0000000000001F64                 align 8
.text:0000000000001F68
.text:0000000000001F68 loc_1F68:                               ; CODE XREF: binary_operator+187↑j
.text:0000000000001F68                                         ; binary_operator+190↑j
.text:0000000000001F68                 movzx   ecx, byte ptr [rsi+2]
.text:0000000000001F6C                 cmp     cl, 65h ; 'e'
.text:0000000000001F6F                 jz      short loc_1F7A
.text:0000000000001F71                 cmp     cl, 74h ; 't'
.text:0000000000001F74                 jnz     loc_1E06
.text:0000000000001F7A
.text:0000000000001F7A loc_1F7A:                               ; CODE XREF: binary_operator+2FF↑j
.text:0000000000001F7A                 cmp     byte ptr [rsi+3], 0
.text:0000000000001F7E                 jnz     loc_20E0
.text:0000000000001F84
.text:0000000000001F84 loc_1F84:                               ; CODE XREF: binary_operator+424↓j
.text:0000000000001F84                 test    al, al
.text:0000000000001F86                 mov     rdi, [rbx+r15-8] ; s
.text:0000000000001F8B                 jnz     loc_20F0
.text:0000000000001F91                 call    find_int
.text:0000000000001F96                 mov     rbx, rax
.text:0000000000001F99
.text:0000000000001F99 loc_1F99:                               ; CODE XREF: binary_operator+498↓j
.text:0000000000001F99                 test    r13b, r13b
.text:0000000000001F9C                 mov     rax, cs:argv
.text:0000000000001FA3                 jz      loc_2110
.text:0000000000001FA9                 mov     rdi, [rax+r15+10h] ; s
.text:0000000000001FAE                 call    _strlen
.text:0000000000001FB3                 lea     rsi, [rsp+1A8h+var_58]
.text:0000000000001FBB                 mov     rdi, rax
.text:0000000000001FBE                 call    umaxtostr
.text:0000000000001FC3
.text:0000000000001FC3 loc_1FC3:                               ; CODE XREF: binary_operator+4AA↓j
.text:0000000000001FC3                 mov     rsi, rax
.text:0000000000001FC6                 mov     rdi, rbx
.text:0000000000001FC9                 call    strintcmp
.text:0000000000001FCE                 mov     rdx, cs:argv
.text:0000000000001FD5                 mov     rcx, [rdx+r14*8]
.text:0000000000001FD9                 cmp     byte ptr [rcx+2], 65h ; 'e'
.text:0000000000001FDD                 movzx   ecx, byte ptr [rcx+1]
.text:0000000000001FE1                 setz    dl
.text:0000000000001FE4                 add     cs:pos, 3
.text:0000000000001FEB                 cmp     cl, 6Ch ; 'l'
.text:0000000000001FEE                 jz      loc_2158
.text:0000000000001FF4                 cmp     cl, 67h ; 'g'
.text:0000000000001FF7                 jz      loc_2188
.text:0000000000001FFD                 test    eax, eax
.text:0000000000001FFF                 setnz   al
.text:0000000000002002                 cmp     al, dl
.text:0000000000002004                 setz    r13b
.text:0000000000002008                 jmp     loc_1D4F
.text:0000000000002008 ; ---------------------------------------------------------------------------
.text:000000000000200D                 align 10h
.text:0000000000002010
.text:0000000000002010 loc_2010:                               ; CODE XREF: binary_operator+1A2↑j
.text:0000000000002010                 movzx   ecx, byte ptr [rsi+2]
.text:0000000000002014                 cmp     cl, 65h ; 'e'
.text:0000000000002017                 jz      short loc_2090
.text:0000000000002019
.text:0000000000002019 loc_2019:                               ; CODE XREF: binary_operator+479↓j
.text:0000000000002019                 cmp     cl, 74h ; 't'
.text:000000000000201C                 jnz     short loc_209A
.text:000000000000201E                 cmp     byte ptr [rsi+3], 0
.text:0000000000002022                 jnz     short loc_209A
.text:0000000000002024                 add     cs:pos, 3
.text:000000000000202B                 or      r13b, al
.text:000000000000202E                 jnz     loc_21CF
.text:0000000000002034                 lea     rbp, [rsp+1A8h+stat_buf]
.text:000000000000203C                 mov     rsi, [rbx+r15-8] ; filename
.text:0000000000002041                 mov     edi, 1          ; ver
.text:0000000000002046                 mov     rdx, rbp        ; stat_buf
.text:0000000000002049                 call    ___xstat
.text:000000000000204E                 test    eax, eax
.text:0000000000002050                 lea     rcx, [rbx+r15+8]
.text:0000000000002055                 jnz     short loc_20C8
.text:0000000000002057                 mov     rsi, [rcx]      ; filename
.text:000000000000205A                 mov     rdx, rbp        ; stat_buf
.text:000000000000205D                 mov     edi, 1          ; ver
.text:0000000000002062                 mov     rbx, [rsp+1A8h+stat_buf.st_mtim.tv_sec]
.text:000000000000206A                 mov     r12, [rsp+1A8h+stat_buf.st_mtim.tv_nsec]
.text:0000000000002072                 call    ___xstat
.text:0000000000002077                 test    eax, eax
.text:0000000000002079                 jz      loc_2120
.text:000000000000207F                 mov     r13d, 1
.text:0000000000002085                 jmp     loc_1D4F
.text:0000000000002085 ; ---------------------------------------------------------------------------
.text:000000000000208A                 align 10h
.text:0000000000002090
.text:0000000000002090 loc_2090:                               ; CODE XREF: binary_operator+267↑j
.text:0000000000002090                                         ; binary_operator+3A7↑j
.text:0000000000002090                 cmp     byte ptr [rsi+3], 0
.text:0000000000002094                 jz      loc_1F84
.text:000000000000209A
.text:000000000000209A loc_209A:                               ; CODE XREF: binary_operator+1B5↑j
.text:000000000000209A                                         ; binary_operator+1BF↑j ...
.text:000000000000209A                 mov     rdi, rsi
.text:000000000000209D                 call    quote
.text:00000000000020A2                 lea     rsi, aSUnknownBinary ; "%s: unknown binary operator"
.text:00000000000020A9                 mov     rbx, rax
.text:00000000000020AC                 xor     edi, edi        ; domainname
.text:00000000000020AE                 mov     edx, 5          ; category
.text:00000000000020B3                 call    _dcgettext
.text:00000000000020B8                 mov     rsi, rbx
.text:00000000000020BB                 mov     rdi, rax
.text:00000000000020BE                 xor     eax, eax
.text:00000000000020C0                 call    test_syntax_error
.text:00000000000020C0 ; ---------------------------------------------------------------------------
.text:00000000000020C5                 align 8
.text:00000000000020C8
.text:00000000000020C8 loc_20C8:                               ; CODE XREF: binary_operator+3E5↑j
.text:00000000000020C8                 mov     rsi, [rcx]      ; filename
.text:00000000000020CB                 mov     rdx, rbp        ; stat_buf
.text:00000000000020CE                 mov     edi, 1          ; ver
.text:00000000000020D3                 call    ___xstat
.text:00000000000020D8                 jmp     loc_1D4F
.text:00000000000020D8 ; ---------------------------------------------------------------------------
.text:00000000000020DD                 align 20h
.text:00000000000020E0
.text:00000000000020E0 loc_20E0:                               ; CODE XREF: binary_operator+30E↑j
.text:00000000000020E0                 cmp     dl, 6Eh ; 'n'
.text:00000000000020E3                 jnz     loc_1E18
.text:00000000000020E9                 jmp     loc_2019
.text:00000000000020E9 ; ---------------------------------------------------------------------------
.text:00000000000020EE                 align 10h
.text:00000000000020F0
.text:00000000000020F0 loc_20F0:                               ; CODE XREF: binary_operator+31B↑j
.text:00000000000020F0                 call    _strlen
.text:00000000000020F5                 lea     rsi, [rsp+1A8h+var_78]
.text:00000000000020FD                 mov     rdi, rax
.text:0000000000002100                 call    umaxtostr
.text:0000000000002105                 mov     rbx, rax
.text:0000000000002108                 jmp     loc_1F99
.text:0000000000002108 ; ---------------------------------------------------------------------------
.text:000000000000210D                 align 10h
.text:0000000000002110
.text:0000000000002110 loc_2110:                               ; CODE XREF: binary_operator+333↑j
.text:0000000000002110                 mov     rdi, [rax+r15+8]
.text:0000000000002115                 call    find_int
.text:000000000000211A                 jmp     loc_1FC3
.text:000000000000211A ; ---------------------------------------------------------------------------
.text:000000000000211F                 align 20h
.text:0000000000002120
.text:0000000000002120 loc_2120:                               ; CODE XREF: binary_operator+409↑j
.text:0000000000002120                 cmp     rbx, [rsp+1A8h+stat_buf.st_mtim.tv_sec]
.text:0000000000002128                 mov     rax, [rsp+1A8h+stat_buf.st_mtim.tv_nsec]
.text:0000000000002130                 jl      loc_1D4F
.text:0000000000002136                 mov     r13d, 1
.text:000000000000213C                 jg      loc_1D4F
.text:0000000000002142                 sub     r12d, eax
.text:0000000000002145                 test    r12d, r12d
.text:0000000000002148                 setnle  r13b
.text:000000000000214C                 jmp     loc_1D4F
.text:000000000000214C ; ---------------------------------------------------------------------------
.text:0000000000002151                 align 8
.text:0000000000002158
.text:0000000000002158 loc_2158:                               ; CODE XREF: binary_operator+37E↑j
.text:0000000000002158                 movzx   edx, dl
.text:000000000000215B                 cmp     edx, eax
.text:000000000000215D                 setnle  r13b
.text:0000000000002161                 jmp     loc_1D4F
.text:0000000000002161 ; ---------------------------------------------------------------------------
.text:0000000000002166                 align 10h
.text:0000000000002170
.text:0000000000002170 loc_2170:                               ; CODE XREF: binary_operator+1AB↑j
.text:0000000000002170                 cmp     dl, 65h ; 'e'
.text:0000000000002173                 jnz     loc_209A
.text:0000000000002179                 movzx   edx, byte ptr [rsi+2]
.text:000000000000217D                 jmp     loc_1EDD
.text:000000000000217D ; ---------------------------------------------------------------------------
.text:0000000000002182                 align 8
.text:0000000000002188
.text:0000000000002188 loc_2188:                               ; CODE XREF: binary_operator+387↑j
.text:0000000000002188                 movzx   edx, dl
.text:000000000000218B                 neg     edx
.text:000000000000218D                 cmp     edx, eax
.text:000000000000218F                 setl    r13b
.text:0000000000002193                 jmp     loc_1D4F
.text:0000000000002198 ; ---------------------------------------------------------------------------
.text:0000000000002198
.text:0000000000002198 loc_2198:                               ; CODE XREF: binary_operator+F3↑j
.text:0000000000002198                 call    ___stack_chk_fail
.text:000000000000219D ; ---------------------------------------------------------------------------
.text:000000000000219D
.text:000000000000219D loc_219D:                               ; CODE XREF: binary_operator+AE↑j
.text:000000000000219D                 call    _abort
.text:00000000000021A2 ; ---------------------------------------------------------------------------
.text:00000000000021A2
.text:00000000000021A2 loc_21A2:                               ; CODE XREF: binary_operator+1CF↑j
.text:00000000000021A2                 lea     rsi, aOtDoesNotAccep ; "-ot does not accept -l"
.text:00000000000021A9                 mov     edx, 5          ; category
.text:00000000000021AE
.text:00000000000021AE loc_21AE:                               ; CODE XREF: binary_operator+55D↓j
.text:00000000000021AE                                         ; binary_operator+56B↓j
.text:00000000000021AE                 xor     edi, edi        ; domainname
.text:00000000000021B0                 call    _dcgettext
.text:00000000000021B5                 xor     esi, esi
.text:00000000000021B7                 mov     rdi, rax
.text:00000000000021BA                 xor     eax, eax
.text:00000000000021BC                 call    test_syntax_error
.text:00000000000021C1 ; ---------------------------------------------------------------------------
.text:00000000000021C1
.text:00000000000021C1 loc_21C1:                               ; CODE XREF: binary_operator+28A↑j
.text:00000000000021C1                 mov     edx, 5
.text:00000000000021C6                 lea     rsi, aEfDoesNotAccep ; "-ef does not accept -l"
.text:00000000000021CD                 jmp     short loc_21AE
.text:00000000000021CF ; ---------------------------------------------------------------------------
.text:00000000000021CF
.text:00000000000021CF loc_21CF:                               ; CODE XREF: binary_operator+3BE↑j
.text:00000000000021CF                 mov     edx, 5
.text:00000000000021D4                 lea     rsi, aNtDoesNotAccep ; "-nt does not accept -l"
.text:00000000000021DB                 jmp     short loc_21AE
.text:00000000000021DB ; } // starts at 1C70
.text:00000000000021DB binary_operator endp
.text:00000000000021DB
.text:00000000000021DB ; ---------------------------------------------------------------------------
.text:00000000000021DD                 align 20h
.text:00000000000021E0
.text:00000000000021E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000021E0
.text:00000000000021E0
.text:00000000000021E0 unary_operator  proc near               ; CODE XREF: two_arguments+48↓j
.text:00000000000021E0                                         ; or+2A6↓p
.text:00000000000021E0
.text:00000000000021E0 var_A0          = dword ptr -0A0h
.text:00000000000021E0 var_9C          = dword ptr -9Ch
.text:00000000000021E0 var_98          = dword ptr -98h
.text:00000000000021E0 var_88          = qword ptr -88h
.text:00000000000021E0 var_70          = qword ptr -70h
.text:00000000000021E0 var_68          = qword ptr -68h
.text:00000000000021E0 var_60          = qword ptr -60h
.text:00000000000021E0 var_58          = qword ptr -58h
.text:00000000000021E0 var_20          = qword ptr -20h
.text:00000000000021E0
.text:00000000000021E0 ; __unwind {
.text:00000000000021E0                 push    rbp
.text:00000000000021E1                 push    rbx
.text:00000000000021E2                 sub     rsp, 0A8h
.text:00000000000021E9                 mov     rbx, cs:argv
.text:00000000000021F0                 mov     rax, fs:28h
.text:00000000000021F9                 mov     [rsp+0B8h+var_20], rax
.text:0000000000002201                 xor     eax, eax
.text:0000000000002203                 movsxd  rax, cs:pos
.text:000000000000220A                 mov     rdi, [rbx+rax*8]
.text:000000000000220E                 movzx   eax, byte ptr [rdi+1]
.text:0000000000002212                 sub     eax, 47h ; 'G'  ; switch 52 cases
.text:0000000000002215                 cmp     al, 33h
.text:0000000000002217                 ja      def_222E        ; jumptable 000000000000222E default case, cases 72-75,77,80-82,84-97,105,106,108,109,111,113,118,121
.text:000000000000221D                 lea     rdx, jpt_222E
.text:0000000000002224                 movzx   eax, al
.text:0000000000002227                 movsxd  rax, ds:(jpt_222E - 84F0h)[rdx+rax*4]
.text:000000000000222B                 add     rax, rdx
.text:000000000000222E                 jmp     rax             ; switch jump
.text:0000000000002230 ; ---------------------------------------------------------------------------
.text:0000000000002230
.text:0000000000002230 loc_2230:                               ; CODE XREF: unary_operator+4E↑j
.text:0000000000002230                                         ; DATA XREF: .rodata:jpt_222E↓o
.text:0000000000002230                 call    unary_advance   ; jumptable 000000000000222E case 122
.text:0000000000002235                 movsxd  rax, cs:pos
.text:000000000000223C                 mov     rax, [rbx+rax*8-8]
.text:0000000000002241                 cmp     byte ptr [rax], 0
.text:0000000000002244                 setz    al
.text:0000000000002247                 nop     word ptr [rax+rax+00000000h]
.text:0000000000002250
.text:0000000000002250 loc_2250:                               ; CODE XREF: unary_operator+B8↓j
.text:0000000000002250                                         ; unary_operator+E4↓j ...
.text:0000000000002250                 mov     rcx, [rsp+0B8h+var_20]
.text:0000000000002258                 xor     rcx, fs:28h
.text:0000000000002261                 jnz     loc_27AC
.text:0000000000002267                 add     rsp, 0A8h
.text:000000000000226E                 pop     rbx
.text:000000000000226F                 pop     rbp
.text:0000000000002270                 retn
.text:0000000000002270 ; ---------------------------------------------------------------------------
.text:0000000000002271                 align 8
.text:0000000000002278
.text:0000000000002278 loc_2278:                               ; CODE XREF: unary_operator+4E↑j
.text:0000000000002278                                         ; DATA XREF: .rodata:jpt_222E↓o
.text:0000000000002278                 call    unary_advance   ; jumptable 000000000000222E case 120
.text:000000000000227D                 movsxd  rax, cs:pos
.text:0000000000002284                 mov     esi, 1          ; type
.text:0000000000002289                 mov     rdi, [rbx+rax*8-8] ; name
.text:000000000000228E                 call    _euidaccess
.text:0000000000002293                 test    eax, eax
.text:0000000000002295                 setz    al
.text:0000000000002298                 jmp     short loc_2250
.text:0000000000002298 ; ---------------------------------------------------------------------------
.text:000000000000229A                 align 20h
.text:00000000000022A0
.text:00000000000022A0 loc_22A0:                               ; CODE XREF: unary_operator+4E↑j
.text:00000000000022A0                                         ; DATA XREF: .rodata:jpt_222E↓o
.text:00000000000022A0                 call    unary_advance   ; jumptable 000000000000222E case 117
.text:00000000000022A5                 movsxd  rax, cs:pos
.text:00000000000022AC                 mov     rdx, rsp        ; stat_buf
.text:00000000000022AF                 mov     edi, 1          ; ver
.text:00000000000022B4                 mov     rsi, [rbx+rax*8-8] ; filename
.text:00000000000022B9                 call    ___xstat
.text:00000000000022BE                 mov     edx, eax
.text:00000000000022C0                 xor     eax, eax
.text:00000000000022C2                 test    edx, edx
.text:00000000000022C4                 jnz     short loc_2250
.text:00000000000022C6                 mov     eax, [rsp+0B8h+var_A0]
.text:00000000000022CA                 shr     eax, 0Bh
.text:00000000000022CD                 and     eax, 1
.text:00000000000022D0                 jmp     loc_2250
.text:00000000000022D0 ; ---------------------------------------------------------------------------
.text:00000000000022D5                 align 8
.text:00000000000022D8
.text:00000000000022D8 loc_22D8:                               ; CODE XREF: unary_operator+4E↑j
.text:00000000000022D8                                         ; DATA XREF: .rodata:jpt_222E↓o
.text:00000000000022D8                 call    unary_advance   ; jumptable 000000000000222E case 116
.text:00000000000022DD                 movsxd  rax, cs:pos
.text:00000000000022E4                 mov     rdi, [rbx+rax*8-8]
.text:00000000000022E9                 call    find_int
.text:00000000000022EE                 mov     rbp, rax
.text:00000000000022F1                 call    ___errno_location
.text:00000000000022F6                 xor     esi, esi        ; endptr
.text:00000000000022F8                 mov     rbx, rax
.text:00000000000022FB                 mov     rdi, rbp        ; nptr
.text:00000000000022FE                 mov     dword ptr [rax], 0
.text:0000000000002304                 mov     edx, 0Ah        ; base
.text:0000000000002309                 call    _strtol
.text:000000000000230E                 mov     rdi, rax        ; fd
.text:0000000000002311                 xor     eax, eax
.text:0000000000002313                 cmp     dword ptr [rbx], 22h ; '"'
.text:0000000000002316                 jz      loc_2250
.text:000000000000231C                 cmp     rdi, 7FFFFFFFh
.text:0000000000002323                 ja      loc_2250
.text:0000000000002329                 call    _isatty
.text:000000000000232E                 test    eax, eax
.text:0000000000002330                 setnz   al
.text:0000000000002333                 jmp     loc_2250
.text:0000000000002333 ; ---------------------------------------------------------------------------
.text:0000000000002338                 align 20h
.text:0000000000002340
.text:0000000000002340 loc_2340:                               ; CODE XREF: unary_operator+4E↑j
.text:0000000000002340                                         ; DATA XREF: .rodata:jpt_222E↓o
.text:0000000000002340                 call    unary_advance   ; jumptable 000000000000222E case 119
.text:0000000000002345                 movsxd  rax, cs:pos
.text:000000000000234C                 mov     esi, 2          ; type
.text:0000000000002351                 mov     rdi, [rbx+rax*8-8] ; name
.text:0000000000002356                 call    _euidaccess
.text:000000000000235B                 test    eax, eax
.text:000000000000235D                 setz    al
.text:0000000000002360                 jmp     loc_2250
.text:0000000000002360 ; ---------------------------------------------------------------------------
.text:0000000000002365                 align 8
.text:0000000000002368
.text:0000000000002368 loc_2368:                               ; CODE XREF: unary_operator+4E↑j
.text:0000000000002368                                         ; DATA XREF: .rodata:jpt_222E↓o
.text:0000000000002368                 call    unary_advance   ; jumptable 000000000000222E case 115
.text:000000000000236D                 movsxd  rax, cs:pos
.text:0000000000002374                 mov     rdx, rsp        ; stat_buf
.text:0000000000002377                 mov     edi, 1          ; ver
.text:000000000000237C                 mov     rsi, [rbx+rax*8-8] ; filename
.text:0000000000002381                 call    ___xstat
.text:0000000000002386                 mov     edx, eax
.text:0000000000002388                 xor     eax, eax
.text:000000000000238A                 test    edx, edx
.text:000000000000238C                 jnz     loc_2250
.text:0000000000002392                 cmp     [rsp+0B8h+var_88], 0
.text:0000000000002398                 setnle  al
.text:000000000000239B                 jmp     loc_2250
.text:00000000000023A0 ; ---------------------------------------------------------------------------
.text:00000000000023A0
.text:00000000000023A0 loc_23A0:                               ; CODE XREF: unary_operator+4E↑j
.text:00000000000023A0                                         ; DATA XREF: .rodata:jpt_222E↓o
.text:00000000000023A0                 call    unary_advance   ; jumptable 000000000000222E case 114
.text:00000000000023A5                 movsxd  rax, cs:pos
.text:00000000000023AC                 mov     esi, 4          ; type
.text:00000000000023B1                 mov     rdi, [rbx+rax*8-8] ; name
.text:00000000000023B6                 call    _euidaccess
.text:00000000000023BB                 test    eax, eax
.text:00000000000023BD                 setz    al
.text:00000000000023C0                 jmp     loc_2250
.text:00000000000023C0 ; ---------------------------------------------------------------------------
.text:00000000000023C5                 align 8
.text:00000000000023C8
.text:00000000000023C8 loc_23C8:                               ; CODE XREF: unary_operator+4E↑j
.text:00000000000023C8                                         ; DATA XREF: .rodata:jpt_222E↓o
.text:00000000000023C8                 call    unary_advance   ; jumptable 000000000000222E case 112
.text:00000000000023CD                 movsxd  rax, cs:pos
.text:00000000000023D4                 mov     rdx, rsp        ; stat_buf
.text:00000000000023D7                 mov     edi, 1          ; ver
.text:00000000000023DC                 mov     rsi, [rbx+rax*8-8] ; filename
.text:00000000000023E1                 call    ___xstat
.text:00000000000023E6                 mov     edx, eax
.text:00000000000023E8                 xor     eax, eax
.text:00000000000023EA                 test    edx, edx
.text:00000000000023EC                 jnz     loc_2250
.text:00000000000023F2                 mov     eax, [rsp+0B8h+var_A0]
.text:00000000000023F6                 and     eax, 0F000h
.text:00000000000023FB                 cmp     eax, 1000h
.text:0000000000002400                 setz    al
.text:0000000000002403                 jmp     loc_2250
.text:0000000000002403 ; ---------------------------------------------------------------------------
.text:0000000000002408                 align 10h
.text:0000000000002410
.text:0000000000002410 loc_2410:                               ; CODE XREF: unary_operator+4E↑j
.text:0000000000002410                                         ; DATA XREF: .rodata:jpt_222E↓o
.text:0000000000002410                 call    unary_advance   ; jumptable 000000000000222E case 110
.text:0000000000002415                 movsxd  rax, cs:pos
.text:000000000000241C                 mov     rax, [rbx+rax*8-8]
.text:0000000000002421                 cmp     byte ptr [rax], 0
.text:0000000000002424                 setnz   al
.text:0000000000002427                 jmp     loc_2250
.text:0000000000002427 ; ---------------------------------------------------------------------------
.text:000000000000242C                 align 10h
.text:0000000000002430
.text:0000000000002430 loc_2430:                               ; CODE XREF: unary_operator+4E↑j
.text:0000000000002430                                         ; DATA XREF: .rodata:jpt_222E↓o
.text:0000000000002430                 call    unary_advance   ; jumptable 000000000000222E case 107
.text:0000000000002435                 movsxd  rax, cs:pos
.text:000000000000243C                 mov     rdx, rsp        ; stat_buf
.text:000000000000243F                 mov     edi, 1          ; ver
.text:0000000000002444                 mov     rsi, [rbx+rax*8-8] ; filename
.text:0000000000002449                 call    ___xstat
.text:000000000000244E                 mov     edx, eax
.text:0000000000002450                 xor     eax, eax
.text:0000000000002452                 test    edx, edx
.text:0000000000002454                 jnz     loc_2250
.text:000000000000245A                 mov     eax, [rsp+0B8h+var_A0]
.text:000000000000245E                 shr     eax, 9
.text:0000000000002461                 and     eax, 1
.text:0000000000002464                 jmp     loc_2250
.text:0000000000002464 ; ---------------------------------------------------------------------------
.text:0000000000002469                 align 10h
.text:0000000000002470
.text:0000000000002470 loc_2470:                               ; CODE XREF: unary_operator+4E↑j
.text:0000000000002470                                         ; DATA XREF: .rodata:jpt_222E↓o
.text:0000000000002470                 call    unary_advance   ; jumptable 000000000000222E case 103
.text:0000000000002475                 movsxd  rax, cs:pos
.text:000000000000247C                 mov     rdx, rsp        ; stat_buf
.text:000000000000247F                 mov     edi, 1          ; ver
.text:0000000000002484                 mov     rsi, [rbx+rax*8-8] ; filename
.text:0000000000002489                 call    ___xstat
.text:000000000000248E                 mov     edx, eax
.text:0000000000002490                 xor     eax, eax
.text:0000000000002492                 test    edx, edx
.text:0000000000002494                 jnz     loc_2250
.text:000000000000249A                 mov     eax, [rsp+0B8h+var_A0]
.text:000000000000249E                 shr     eax, 0Ah
.text:00000000000024A1                 and     eax, 1
.text:00000000000024A4                 jmp     loc_2250
.text:00000000000024A4 ; ---------------------------------------------------------------------------
.text:00000000000024A9                 align 10h
.text:00000000000024B0
.text:00000000000024B0 loc_24B0:                               ; CODE XREF: unary_operator+4E↑j
.text:00000000000024B0                                         ; DATA XREF: .rodata:jpt_222E↓o
.text:00000000000024B0                 call    unary_advance   ; jumptable 000000000000222E case 102
.text:00000000000024B5                 movsxd  rax, cs:pos
.text:00000000000024BC                 mov     rdx, rsp        ; stat_buf
.text:00000000000024BF                 mov     edi, 1          ; ver
.text:00000000000024C4                 mov     rsi, [rbx+rax*8-8] ; filename
.text:00000000000024C9                 call    ___xstat
.text:00000000000024CE                 mov     edx, eax
.text:00000000000024D0                 xor     eax, eax
.text:00000000000024D2                 test    edx, edx
.text:00000000000024D4                 jnz     loc_2250
.text:00000000000024DA                 mov     eax, [rsp+0B8h+var_A0]
.text:00000000000024DE                 and     eax, 0F000h
.text:00000000000024E3                 cmp     eax, 8000h
.text:00000000000024E8                 setz    al
.text:00000000000024EB                 jmp     loc_2250
.text:00000000000024F0 ; ---------------------------------------------------------------------------
.text:00000000000024F0
.text:00000000000024F0 loc_24F0:                               ; CODE XREF: unary_operator+4E↑j
.text:00000000000024F0                                         ; DATA XREF: .rodata:jpt_222E↓o
.text:00000000000024F0                 call    unary_advance   ; jumptable 000000000000222E case 101
.text:00000000000024F5                 movsxd  rax, cs:pos
.text:00000000000024FC                 mov     rdx, rsp        ; stat_buf
.text:00000000000024FF                 mov     edi, 1          ; ver
.text:0000000000002504                 mov     rsi, [rbx+rax*8-8] ; filename
.text:0000000000002509                 call    ___xstat
.text:000000000000250E                 test    eax, eax
.text:0000000000002510                 setz    al
.text:0000000000002513                 jmp     loc_2250
.text:0000000000002513 ; ---------------------------------------------------------------------------
.text:0000000000002518                 align 20h
.text:0000000000002520
.text:0000000000002520 loc_2520:                               ; CODE XREF: unary_operator+4E↑j
.text:0000000000002520                                         ; DATA XREF: .rodata:jpt_222E↓o
.text:0000000000002520                 call    unary_advance   ; jumptable 000000000000222E case 100
.text:0000000000002525                 movsxd  rax, cs:pos
.text:000000000000252C                 mov     rdx, rsp        ; stat_buf
.text:000000000000252F                 mov     edi, 1          ; ver
.text:0000000000002534                 mov     rsi, [rbx+rax*8-8] ; filename
.text:0000000000002539                 call    ___xstat
.text:000000000000253E                 mov     edx, eax
.text:0000000000002540                 xor     eax, eax
.text:0000000000002542                 test    edx, edx
.text:0000000000002544                 jnz     loc_2250
.text:000000000000254A                 mov     eax, [rsp+0B8h+var_A0]
.text:000000000000254E                 and     eax, 0F000h
.text:0000000000002553                 cmp     eax, 4000h
.text:0000000000002558                 setz    al
.text:000000000000255B                 jmp     loc_2250
.text:0000000000002560 ; ---------------------------------------------------------------------------
.text:0000000000002560
.text:0000000000002560 loc_2560:                               ; CODE XREF: unary_operator+4E↑j
.text:0000000000002560                                         ; DATA XREF: .rodata:jpt_222E↓o
.text:0000000000002560                 call    unary_advance   ; jumptable 000000000000222E case 99
.text:0000000000002565                 movsxd  rax, cs:pos
.text:000000000000256C                 mov     rdx, rsp        ; stat_buf
.text:000000000000256F                 mov     edi, 1          ; ver
.text:0000000000002574                 mov     rsi, [rbx+rax*8-8] ; filename
.text:0000000000002579                 call    ___xstat
.text:000000000000257E                 mov     edx, eax
.text:0000000000002580                 xor     eax, eax
.text:0000000000002582                 test    edx, edx
.text:0000000000002584                 jnz     loc_2250
.text:000000000000258A                 mov     eax, [rsp+0B8h+var_A0]
.text:000000000000258E                 and     eax, 0F000h
.text:0000000000002593                 cmp     eax, 2000h
.text:0000000000002598                 setz    al
.text:000000000000259B                 jmp     loc_2250
.text:00000000000025A0 ; ---------------------------------------------------------------------------
.text:00000000000025A0
.text:00000000000025A0 loc_25A0:                               ; CODE XREF: unary_operator+4E↑j
.text:00000000000025A0                                         ; DATA XREF: .rodata:jpt_222E↓o
.text:00000000000025A0                 call    unary_advance   ; jumptable 000000000000222E case 98
.text:00000000000025A5                 movsxd  rax, cs:pos
.text:00000000000025AC                 mov     rdx, rsp        ; stat_buf
.text:00000000000025AF                 mov     edi, 1          ; ver
.text:00000000000025B4                 mov     rsi, [rbx+rax*8-8] ; filename
.text:00000000000025B9                 call    ___xstat
.text:00000000000025BE                 mov     edx, eax
.text:00000000000025C0                 xor     eax, eax
.text:00000000000025C2                 test    edx, edx
.text:00000000000025C4                 jnz     loc_2250
.text:00000000000025CA                 mov     eax, [rsp+0B8h+var_A0]
.text:00000000000025CE                 and     eax, 0F000h
.text:00000000000025D3                 cmp     eax, 6000h
.text:00000000000025D8                 setz    al
.text:00000000000025DB                 jmp     loc_2250
.text:00000000000025E0 ; ---------------------------------------------------------------------------
.text:00000000000025E0
.text:00000000000025E0 loc_25E0:                               ; CODE XREF: unary_operator+4E↑j
.text:00000000000025E0                                         ; DATA XREF: .rodata:jpt_222E↓o
.text:00000000000025E0                 call    unary_advance   ; jumptable 000000000000222E case 83
.text:00000000000025E5                 movsxd  rax, cs:pos
.text:00000000000025EC                 mov     rdx, rsp        ; stat_buf
.text:00000000000025EF                 mov     edi, 1          ; ver
.text:00000000000025F4                 mov     rsi, [rbx+rax*8-8] ; filename
.text:00000000000025F9                 call    ___xstat
.text:00000000000025FE                 mov     edx, eax
.text:0000000000002600                 xor     eax, eax
.text:0000000000002602                 test    edx, edx
.text:0000000000002604                 jnz     loc_2250
.text:000000000000260A                 mov     eax, [rsp+0B8h+var_A0]
.text:000000000000260E                 and     eax, 0F000h
.text:0000000000002613                 cmp     eax, 0C000h
.text:0000000000002618                 setz    al
.text:000000000000261B                 jmp     loc_2250
.text:0000000000002620 ; ---------------------------------------------------------------------------
.text:0000000000002620
.text:0000000000002620 loc_2620:                               ; CODE XREF: unary_operator+4E↑j
.text:0000000000002620                                         ; DATA XREF: .rodata:jpt_222E↓o
.text:0000000000002620                 call    unary_advance   ; jumptable 000000000000222E case 79
.text:0000000000002625                 movsxd  rax, cs:pos
.text:000000000000262C                 mov     rdx, rsp        ; stat_buf
.text:000000000000262F                 mov     edi, 1          ; ver
.text:0000000000002634                 mov     rsi, [rbx+rax*8-8] ; filename
.text:0000000000002639                 call    ___xstat
.text:000000000000263E                 test    eax, eax
.text:0000000000002640                 jz      loc_2740
.text:0000000000002646
.text:0000000000002646 loc_2646:                               ; CODE XREF: unary_operator+490↓j
.text:0000000000002646                                         ; unary_operator+530↓j
.text:0000000000002646                 xor     eax, eax
.text:0000000000002648                 jmp     loc_2250
.text:0000000000002648 ; ---------------------------------------------------------------------------
.text:000000000000264D                 align 10h
.text:0000000000002650
.text:0000000000002650 loc_2650:                               ; CODE XREF: unary_operator+4E↑j
.text:0000000000002650                                         ; DATA XREF: .rodata:jpt_222E↓o
.text:0000000000002650                 call    unary_advance   ; jumptable 000000000000222E case 78
.text:0000000000002655                 movsxd  rax, cs:pos
.text:000000000000265C                 mov     rdx, rsp        ; stat_buf
.text:000000000000265F                 mov     edi, 1          ; ver
.text:0000000000002664                 mov     rsi, [rbx+rax*8-8] ; filename
.text:0000000000002669                 call    ___xstat
.text:000000000000266E                 test    eax, eax
.text:0000000000002670                 jnz     short loc_2646
.text:0000000000002672                 xor     eax, eax
.text:0000000000002674                 mov     rsi, [rsp+0B8h+var_60]
.text:0000000000002679                 cmp     [rsp+0B8h+var_70], rsi
.text:000000000000267E                 mov     rcx, [rsp+0B8h+var_68]
.text:0000000000002683                 mov     rdx, [rsp+0B8h+var_58]
.text:0000000000002688                 jg      loc_2250
.text:000000000000268E                 mov     eax, 1
.text:0000000000002693                 jl      loc_2250
.text:0000000000002699                 sub     edx, ecx
.text:000000000000269B                 test    edx, edx
.text:000000000000269D                 setnle  al
.text:00000000000026A0                 jmp     loc_2250
.text:00000000000026A0 ; ---------------------------------------------------------------------------
.text:00000000000026A5                 align 8
.text:00000000000026A8
.text:00000000000026A8 loc_26A8:                               ; CODE XREF: unary_operator+4E↑j
.text:00000000000026A8                                         ; DATA XREF: .rodata:jpt_222E↓o
.text:00000000000026A8                 call    unary_advance   ; jumptable 000000000000222E cases 76,104
.text:00000000000026AD                 movsxd  rax, cs:pos
.text:00000000000026B4                 mov     rdx, rsp        ; stat_buf
.text:00000000000026B7                 mov     edi, 1          ; ver
.text:00000000000026BC                 mov     rsi, [rbx+rax*8-8] ; filename
.text:00000000000026C1                 call    ___lxstat
.text:00000000000026C6                 mov     edx, eax
.text:00000000000026C8                 xor     eax, eax
.text:00000000000026CA                 test    edx, edx
.text:00000000000026CC                 jnz     loc_2250
.text:00000000000026D2                 mov     eax, [rsp+0B8h+var_A0]
.text:00000000000026D6                 and     eax, 0F000h
.text:00000000000026DB                 cmp     eax, 0A000h
.text:00000000000026E0                 setz    al
.text:00000000000026E3                 jmp     loc_2250
.text:00000000000026E3 ; ---------------------------------------------------------------------------
.text:00000000000026E8                 align 10h
.text:00000000000026F0
.text:00000000000026F0 loc_26F0:                               ; CODE XREF: unary_operator+4E↑j
.text:00000000000026F0                                         ; DATA XREF: .rodata:jpt_222E↓o
.text:00000000000026F0                 call    unary_advance   ; jumptable 000000000000222E case 71
.text:00000000000026F5                 movsxd  rax, cs:pos
.text:00000000000026FC                 mov     rdx, rsp        ; stat_buf
.text:00000000000026FF                 mov     edi, 1          ; ver
.text:0000000000002704                 mov     rsi, [rbx+rax*8-8] ; filename
.text:0000000000002709                 call    ___xstat
.text:000000000000270E                 test    eax, eax
.text:0000000000002710                 jnz     loc_2646
.text:0000000000002716                 call    ___errno_location
.text:000000000000271B                 mov     dword ptr [rax], 0
.text:0000000000002721                 mov     rbx, rax
.text:0000000000002724                 call    _getegid
.text:0000000000002729                 cmp     eax, 0FFFFFFFFh
.text:000000000000272C                 mov     edx, eax
.text:000000000000272E                 jz      short loc_279E
.text:0000000000002730
.text:0000000000002730 loc_2730:                               ; CODE XREF: unary_operator+5CA↓j
.text:0000000000002730                 cmp     [rsp+0B8h+var_98], edx
.text:0000000000002734                 setz    al
.text:0000000000002737                 jmp     loc_2250
.text:0000000000002737 ; ---------------------------------------------------------------------------
.text:000000000000273C                 align 20h
.text:0000000000002740
.text:0000000000002740 loc_2740:                               ; CODE XREF: unary_operator+460↑j
.text:0000000000002740                 call    ___errno_location
.text:0000000000002745                 mov     dword ptr [rax], 0
.text:000000000000274B                 mov     rbx, rax
.text:000000000000274E                 call    _geteuid
.text:0000000000002753                 cmp     eax, 0FFFFFFFFh
.text:0000000000002756                 mov     edx, eax
.text:0000000000002758                 jz      short loc_2790
.text:000000000000275A
.text:000000000000275A loc_275A:                               ; CODE XREF: unary_operator+5BC↓j
.text:000000000000275A                 cmp     [rsp+0B8h+var_9C], edx
.text:000000000000275E                 setz    al
.text:0000000000002761                 jmp     loc_2250
.text:0000000000002766 ; ---------------------------------------------------------------------------
.text:0000000000002766
.text:0000000000002766 def_222E:                               ; CODE XREF: unary_operator+37↑j
.text:0000000000002766                                         ; unary_operator+4E↑j
.text:0000000000002766                                         ; DATA XREF: ...
.text:0000000000002766                 call    quote           ; jumptable 000000000000222E default case, cases 72-75,77,80-82,84-97,105,106,108,109,111,113,118,121
.text:000000000000276B                 lea     rsi, aSUnaryOperator ; "%s: unary operator expected"
.text:0000000000002772                 mov     rbx, rax
.text:0000000000002775                 xor     edi, edi        ; domainname
.text:0000000000002777                 mov     edx, 5          ; category
.text:000000000000277C                 call    _dcgettext
.text:0000000000002781                 mov     rsi, rbx
.text:0000000000002784                 mov     rdi, rax
.text:0000000000002787                 xor     eax, eax
.text:0000000000002789                 call    test_syntax_error
.text:0000000000002789 ; ---------------------------------------------------------------------------
.text:000000000000278E                 align 10h
.text:0000000000002790
.text:0000000000002790 loc_2790:                               ; CODE XREF: unary_operator+578↑j
.text:0000000000002790                 mov     esi, [rbx]
.text:0000000000002792                 xor     eax, eax
.text:0000000000002794                 test    esi, esi
.text:0000000000002796                 jnz     loc_2250
.text:000000000000279C                 jmp     short loc_275A
.text:000000000000279E ; ---------------------------------------------------------------------------
.text:000000000000279E
.text:000000000000279E loc_279E:                               ; CODE XREF: unary_operator+54E↑j
.text:000000000000279E                 mov     ecx, [rbx]
.text:00000000000027A0                 xor     eax, eax
.text:00000000000027A2                 test    ecx, ecx
.text:00000000000027A4                 jnz     loc_2250
.text:00000000000027AA                 jmp     short loc_2730
.text:00000000000027AC ; ---------------------------------------------------------------------------
.text:00000000000027AC
.text:00000000000027AC loc_27AC:                               ; CODE XREF: unary_operator+81↑j
.text:00000000000027AC                 call    ___stack_chk_fail
.text:00000000000027AC ; } // starts at 21E0
.text:00000000000027AC unary_operator  endp
.text:00000000000027AC
.text:00000000000027AC ; ---------------------------------------------------------------------------
.text:00000000000027B1                 align 20h
.text:00000000000027C0
.text:00000000000027C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000027C0
.text:00000000000027C0
.text:00000000000027C0 two_arguments   proc near               ; CODE XREF: posixtest+DC↓j
.text:00000000000027C0                                         ; posixtest+129↓p ...
.text:00000000000027C0 ; __unwind {
.text:00000000000027C0                 movsxd  rax, cs:pos
.text:00000000000027C7                 mov     r9, cs:argv
.text:00000000000027CE                 lea     rdi, asc_83D8   ; "!"
.text:00000000000027D5                 mov     ecx, 2
.text:00000000000027DA                 mov     rdx, [r9+rax*8]
.text:00000000000027DE                 mov     r8, rax
.text:00000000000027E1                 lea     r10, ds:0[rax*8]
.text:00000000000027E9                 mov     rsi, rdx
.text:00000000000027EC                 repe cmpsb
.text:00000000000027EE                 setnbe  al
.text:00000000000027F1                 sbb     al, 0
.text:00000000000027F3                 test    al, al
.text:00000000000027F5                 jz      short loc_2810
.text:00000000000027F7                 cmp     byte ptr [rdx], 2Dh ; '-'
.text:00000000000027FA                 jnz     short loc_2827
.text:00000000000027FC                 cmp     byte ptr [rdx+1], 0
.text:0000000000002800                 jz      short loc_2827
.text:0000000000002802                 cmp     byte ptr [rdx+2], 0
.text:0000000000002806                 jnz     short loc_2827
.text:0000000000002808                 jmp     unary_operator
.text:0000000000002808 ; ---------------------------------------------------------------------------
.text:000000000000280D                 align 10h
.text:0000000000002810
.text:0000000000002810 loc_2810:                               ; CODE XREF: two_arguments+35↑j
.text:0000000000002810                 mov     rax, [r9+r10+8]
.text:0000000000002815                 add     r8d, 2
.text:0000000000002819                 mov     cs:pos, r8d
.text:0000000000002820                 cmp     byte ptr [rax], 0
.text:0000000000002823                 setz    al
.text:0000000000002826                 retn
.text:0000000000002827 ; ---------------------------------------------------------------------------
.text:0000000000002827
.text:0000000000002827 loc_2827:                               ; CODE XREF: two_arguments+3A↑j
.text:0000000000002827                                         ; two_arguments+40↑j ...
.text:0000000000002827                 sub     rsp, 8
.text:000000000000282B                 call    beyond
.text:000000000000282B ; } // starts at 27C0
.text:000000000000282B two_arguments   endp
.text:000000000000282B
.text:0000000000002830
.text:0000000000002830 ; =============== S U B R O U T I N E =======================================
.text:0000000000002830
.text:0000000000002830
.text:0000000000002830 posixtest       proc near               ; CODE XREF: main+A0↑p
.text:0000000000002830                                         ; or+15B↓p
.text:0000000000002830 ; __unwind {
.text:0000000000002830                 sub     rsp, 8
.text:0000000000002834                 cmp     edi, 2
.text:0000000000002837                 jz      loc_2908
.text:000000000000283D                 jle     loc_28C0
.text:0000000000002843                 cmp     edi, 3
.text:0000000000002846                 jz      short loc_28B0
.text:0000000000002848                 cmp     edi, 4
.text:000000000000284B                 jnz     loc_28F0
.text:0000000000002851                 movsxd  rdx, cs:pos
.text:0000000000002858                 mov     r9, cs:argv
.text:000000000000285F                 lea     rdi, asc_83D8   ; "!"
.text:0000000000002866                 mov     ecx, 2
.text:000000000000286B                 mov     r8, [r9+rdx*8]
.text:000000000000286F                 mov     rax, rdx
.text:0000000000002872                 lea     r10, ds:0[rdx*8]
.text:000000000000287A                 mov     rsi, r8
.text:000000000000287D                 repe cmpsb
.text:000000000000287F                 setnbe  dl
.text:0000000000002882                 sbb     dl, 0
.text:0000000000002885                 test    dl, dl
.text:0000000000002887                 jnz     loc_2918
.text:000000000000288D                 add     eax, 1
.text:0000000000002890                 cmp     eax, cs:argc
.text:0000000000002896                 mov     cs:pos, eax
.text:000000000000289C                 jge     loc_296A
.text:00000000000028A2                 call    three_arguments
.text:00000000000028A7                 add     rsp, 8
.text:00000000000028AB                 xor     eax, 1
.text:00000000000028AE                 retn
.text:00000000000028AE ; ---------------------------------------------------------------------------
.text:00000000000028AF                 align 10h
.text:00000000000028B0
.text:00000000000028B0 loc_28B0:                               ; CODE XREF: posixtest+16↑j
.text:00000000000028B0                 add     rsp, 8
.text:00000000000028B4                 jmp     three_arguments
.text:00000000000028B4 ; ---------------------------------------------------------------------------
.text:00000000000028B9                 align 20h
.text:00000000000028C0
.text:00000000000028C0 loc_28C0:                               ; CODE XREF: posixtest+D↑j
.text:00000000000028C0                 cmp     edi, 1
.text:00000000000028C3                 jnz     short loc_28F0
.text:00000000000028C5                 movsxd  rax, cs:pos
.text:00000000000028CC                 lea     edx, [rax+1]
.text:00000000000028CF                 mov     cs:pos, edx
.text:00000000000028D5                 mov     rdx, cs:argv
.text:00000000000028DC                 mov     rax, [rdx+rax*8]
.text:00000000000028E0                 cmp     byte ptr [rax], 0
.text:00000000000028E3                 setnz   al
.text:00000000000028E6
.text:00000000000028E6 loc_28E6:                               ; CODE XREF: posixtest+135↓j
.text:00000000000028E6                 add     rsp, 8
.text:00000000000028EA                 retn
.text:00000000000028EA ; ---------------------------------------------------------------------------
.text:00000000000028EB                 align 10h
.text:00000000000028F0
.text:00000000000028F0 loc_28F0:                               ; CODE XREF: posixtest+1B↑j
.text:00000000000028F0                                         ; posixtest+93↑j
.text:00000000000028F0                 mov     eax, cs:pos
.text:00000000000028F6
.text:00000000000028F6 loc_28F6:                               ; CODE XREF: posixtest+101↓j
.text:00000000000028F6                                         ; posixtest+11E↓j
.text:00000000000028F6                 cmp     eax, cs:argc
.text:00000000000028FC                 jge     short loc_296A
.text:00000000000028FE                 add     rsp, 8
.text:0000000000002902                 jmp     short or
.text:0000000000002902 ; ---------------------------------------------------------------------------
.text:0000000000002904                 align 8
.text:0000000000002908
.text:0000000000002908 loc_2908:                               ; CODE XREF: posixtest+7↑j
.text:0000000000002908                 add     rsp, 8
.text:000000000000290C                 jmp     two_arguments
.text:000000000000290C ; ---------------------------------------------------------------------------
.text:0000000000002911                 align 8
.text:0000000000002918
.text:0000000000002918 loc_2918:                               ; CODE XREF: posixtest+57↑j
.text:0000000000002918                 lea     rdi, asc_83DA   ; "("
.text:000000000000291F                 mov     ecx, 2
.text:0000000000002924                 mov     rsi, r8
.text:0000000000002927                 repe cmpsb
.text:0000000000002929                 setnbe  dl
.text:000000000000292C                 sbb     dl, 0
.text:000000000000292F                 test    dl, dl
.text:0000000000002931                 jnz     short loc_28F6
.text:0000000000002933                 mov     rsi, [r9+r10+18h]
.text:0000000000002938                 lea     rdi, aC_0+2     ; ")"
.text:000000000000293F                 mov     ecx, 2
.text:0000000000002944                 repe cmpsb
.text:0000000000002946                 setnbe  dl
.text:0000000000002949                 sbb     dl, 0
.text:000000000000294C                 test    dl, dl
.text:000000000000294E                 jnz     short loc_28F6
.text:0000000000002950                 add     eax, 1
.text:0000000000002953                 mov     cs:pos, eax
.text:0000000000002959                 call    two_arguments
.text:000000000000295E                 add     cs:pos, 1
.text:0000000000002965                 jmp     loc_28E6
.text:000000000000296A ; ---------------------------------------------------------------------------
.text:000000000000296A
.text:000000000000296A loc_296A:                               ; CODE XREF: posixtest+6C↑j
.text:000000000000296A                                         ; posixtest+CC↑j
.text:000000000000296A                 call    beyond
.text:000000000000296A ; } // starts at 2830
.text:000000000000296A posixtest       endp
.text:000000000000296A
.text:000000000000296A ; ---------------------------------------------------------------------------
.text:000000000000296F                 align 10h
.text:0000000000002970
.text:0000000000002970 ; =============== S U B R O U T I N E =======================================
.text:0000000000002970
.text:0000000000002970
.text:0000000000002970 or              proc near               ; CODE XREF: posixtest+D2↑j
.text:0000000000002970                                         ; three_arguments+106↓j
.text:0000000000002970
.text:0000000000002970 var_39          = byte ptr -39h
.text:0000000000002970
.text:0000000000002970 ; __unwind {
.text:0000000000002970                 push    r15
.text:0000000000002972                 push    r14
.text:0000000000002974                 push    r13
.text:0000000000002976                 push    r12
.text:0000000000002978                 push    rbp
.text:0000000000002979                 push    rbx
.text:000000000000297A                 sub     rsp, 18h
.text:000000000000297E                 mov     r11d, cs:pos
.text:0000000000002985                 mov     r12d, cs:argc
.text:000000000000298C                 mov     [rsp+48h+var_39], 0
.text:0000000000002991                 nop     dword ptr [rax+00000000h]
.text:0000000000002998
.text:0000000000002998 loc_2998:                               ; CODE XREF: or+2E7↓j
.text:0000000000002998                 cmp     r11d, r12d
.text:000000000000299B                 mov     ebx, 1
.text:00000000000029A0                 lea     rbp, aA         ; "-a"
.text:00000000000029A7                 jge     loc_2B5E
.text:00000000000029AD                 nop     dword ptr [rax]
.text:00000000000029B0
.text:00000000000029B0 loc_29B0:                               ; CODE XREF: or+1E8↓j
.text:00000000000029B0                 mov     r15, cs:argv
.text:00000000000029B7                 movsxd  r9, r11d
.text:00000000000029BA                 mov     r10, [r15+r9*8]
.text:00000000000029BE                 movzx   r13d, byte ptr [r10]
.text:00000000000029C2                 cmp     r13b, 21h ; '!'
.text:00000000000029C6                 jnz     loc_2CA7
.text:00000000000029CC                 cmp     byte ptr [r10+1], 0
.text:00000000000029D1                 jnz     loc_2CAF
.text:00000000000029D7                 lea     r9d, [r11+1]
.text:00000000000029DB                 cmp     r9d, r12d
.text:00000000000029DE                 mov     cs:pos, r9d
.text:00000000000029E5                 jge     loc_2B5E
.text:00000000000029EB                 lea     eax, [r12-2]
.text:00000000000029F0                 movsxd  r9, r9d
.text:00000000000029F3                 xor     ecx, ecx
.text:00000000000029F5                 mov     r14d, 1
.text:00000000000029FB                 sub     eax, r11d
.text:00000000000029FE                 lea     rsi, [r9+rax+1]
.text:0000000000002A03                 jmp     short loc_2A2D
.text:0000000000002A03 ; ---------------------------------------------------------------------------
.text:0000000000002A05                 align 8
.text:0000000000002A08
.text:0000000000002A08 loc_2A08:                               ; CODE XREF: or+CA↓j
.text:0000000000002A08                 cmp     byte ptr [r10+1], 0
.text:0000000000002A0D                 jnz     loc_2B68
.text:0000000000002A13                 lea     eax, [r9+1]
.text:0000000000002A17                 add     r9, 1
.text:0000000000002A1B                 cmp     r9, rsi
.text:0000000000002A1E                 jz      loc_2CCE
.text:0000000000002A24                 xor     r14d, 1
.text:0000000000002A28                 mov     ecx, 1
.text:0000000000002A2D
.text:0000000000002A2D loc_2A2D:                               ; CODE XREF: or+93↑j
.text:0000000000002A2D                 mov     r10, [r15+r9*8]
.text:0000000000002A31                 mov     r11d, r9d
.text:0000000000002A34                 movzx   eax, byte ptr [r10]
.text:0000000000002A38                 cmp     al, 21h ; '!'
.text:0000000000002A3A                 jz      short loc_2A08
.text:0000000000002A3C                 test    cl, cl
.text:0000000000002A3E                 jnz     loc_2CC2
.text:0000000000002A44
.text:0000000000002A44 loc_2A44:                               ; CODE XREF: or+359↓j
.text:0000000000002A44                 mov     r13d, eax
.text:0000000000002A47
.text:0000000000002A47 loc_2A47:                               ; CODE XREF: or+33A↓j
.text:0000000000002A47                 cmp     r13b, 28h ; '('
.text:0000000000002A4B                 jnz     loc_2B78
.text:0000000000002A51                 cmp     byte ptr [r10+1], 0
.text:0000000000002A56                 jnz     loc_2B78
.text:0000000000002A5C                 lea     r9d, [r11+1]
.text:0000000000002A60                 cmp     r9d, r12d
.text:0000000000002A63                 mov     cs:pos, r9d
.text:0000000000002A6A                 jge     loc_2B5E
.text:0000000000002A70                 lea     eax, [r11+2]
.text:0000000000002A74                 cmp     eax, r12d
.text:0000000000002A77                 jge     loc_2CB7
.text:0000000000002A7D                 cdqe
.text:0000000000002A7F                 mov     r8d, 1
.text:0000000000002A85                 lea     r10, [r15+rax*8]
.text:0000000000002A89                 lea     eax, [r12-1]
.text:0000000000002A8E                 sub     eax, r11d
.text:0000000000002A91                 mov     r11d, eax
.text:0000000000002A94
.text:0000000000002A94 loc_2A94:                               ; CODE XREF: or+153↓j
.text:0000000000002A94                 mov     rsi, [r10]
.text:0000000000002A97                 lea     rdi, aC_0+2     ; ")"
.text:0000000000002A9E                 mov     ecx, 2
.text:0000000000002AA3                 repe cmpsb
.text:0000000000002AA5                 setnbe  al
.text:0000000000002AA8                 sbb     al, 0
.text:0000000000002AAA                 test    al, al
.text:0000000000002AAC                 jz      short loc_2AC8
.text:0000000000002AAE                 cmp     r8d, 4
.text:0000000000002AB2                 jz      loc_2C60
.text:0000000000002AB8                 add     r8d, 1
.text:0000000000002ABC                 add     r10, 8
.text:0000000000002AC0                 cmp     r11d, r8d
.text:0000000000002AC3                 jnz     short loc_2A94
.text:0000000000002AC5                 nop     dword ptr [rax]
.text:0000000000002AC8
.text:0000000000002AC8 loc_2AC8:                               ; CODE XREF: or+13C↑j
.text:0000000000002AC8                                         ; or+2F6↓j ...
.text:0000000000002AC8                 mov     edi, r8d
.text:0000000000002ACB                 call    posixtest
.text:0000000000002AD0                 movsxd  rcx, cs:pos
.text:0000000000002AD7                 mov     rdx, cs:argv
.text:0000000000002ADE                 mov     rsi, [rdx+rcx*8]
.text:0000000000002AE2                 mov     r11, rcx
.text:0000000000002AE5                 test    rsi, rsi
.text:0000000000002AE8                 jz      loc_2D1A
.text:0000000000002AEE                 cmp     byte ptr [rsi], 29h ; ')'
.text:0000000000002AF1                 jnz     loc_2CD9
.text:0000000000002AF7                 cmp     byte ptr [rsi+1], 0
.text:0000000000002AFB                 jnz     loc_2CD9
.text:0000000000002B01                 mov     r12d, cs:argc
.text:0000000000002B08                 add     r11d, 1
.text:0000000000002B0C                 mov     cs:pos, r11d
.text:0000000000002B13
.text:0000000000002B13 loc_2B13:                               ; CODE XREF: or+2B9↓j
.text:0000000000002B13                                         ; or+315↓j ...
.text:0000000000002B13                 xor     r14d, eax
.text:0000000000002B16                 and     ebx, r14d
.text:0000000000002B19                 cmp     r12d, r11d
.text:0000000000002B1C                 jle     loc_2BE7
.text:0000000000002B22
.text:0000000000002B22 loc_2B22:                               ; CODE XREF: or+271↓j
.text:0000000000002B22                 mov     rcx, cs:argv
.text:0000000000002B29                 movsxd  rax, r11d
.text:0000000000002B2C                 mov     rdi, rbp
.text:0000000000002B2F                 mov     r8, [rcx+rax*8]
.text:0000000000002B33                 mov     ecx, 3
.text:0000000000002B38                 mov     rsi, r8
.text:0000000000002B3B                 repe cmpsb
.text:0000000000002B3D                 setnbe  al
.text:0000000000002B40                 sbb     al, 0
.text:0000000000002B42                 test    al, al
.text:0000000000002B44                 jnz     loc_2C2E
.text:0000000000002B4A                 add     r11d, 1
.text:0000000000002B4E                 cmp     r11d, r12d
.text:0000000000002B51                 mov     cs:pos, r11d
.text:0000000000002B58                 jl      loc_29B0
.text:0000000000002B5E
.text:0000000000002B5E loc_2B5E:                               ; CODE XREF: or+37↑j
.text:0000000000002B5E                                         ; or+75↑j ...
.text:0000000000002B5E                 call    beyond
.text:0000000000002B5E ; ---------------------------------------------------------------------------
.text:0000000000002B63                 align 8
.text:0000000000002B68
.text:0000000000002B68 loc_2B68:                               ; CODE XREF: or+9D↑j
.text:0000000000002B68                 test    cl, cl
.text:0000000000002B6A                 jz      short loc_2B78
.text:0000000000002B6C                 mov     cs:pos, r9d
.text:0000000000002B73                 nop     dword ptr [rax+rax+00h]
.text:0000000000002B78
.text:0000000000002B78 loc_2B78:                               ; CODE XREF: or+DB↑j
.text:0000000000002B78                                         ; or+E6↑j ...
.text:0000000000002B78                 mov     eax, r12d
.text:0000000000002B7B                 sub     eax, r11d
.text:0000000000002B7E                 cmp     eax, 3
.text:0000000000002B81                 jle     short loc_2C00
.text:0000000000002B83                 lea     rdi, aEfDoesNotAccep+14h ; "-l"
.text:0000000000002B8A                 mov     ecx, 3
.text:0000000000002B8F                 mov     rsi, r10
.text:0000000000002B92                 repe cmpsb
.text:0000000000002B94                 setnbe  al
.text:0000000000002B97                 sbb     al, 0
.text:0000000000002B99                 test    al, al
.text:0000000000002B9B                 jnz     short loc_2BAF
.text:0000000000002B9D                 mov     rdi, [r15+r9*8+10h]
.text:0000000000002BA2                 call    binop
.text:0000000000002BA7                 test    al, al
.text:0000000000002BA9                 jnz     loc_2C8A
.text:0000000000002BAF
.text:0000000000002BAF loc_2BAF:                               ; CODE XREF: or+22B↑j
.text:0000000000002BAF                                         ; or:loc_2C00↓j
.text:0000000000002BAF                 mov     rdi, [r15+r9*8+8]
.text:0000000000002BB4                 call    binop
.text:0000000000002BB9                 test    al, al
.text:0000000000002BBB                 jnz     loc_2C70
.text:0000000000002BC1                 cmp     r13b, 2Dh ; '-'
.text:0000000000002BC5                 jz      short loc_2C08
.text:0000000000002BC7
.text:0000000000002BC7 loc_2BC7:                               ; CODE XREF: or+296↓j
.text:0000000000002BC7                                         ; or+29D↓j ...
.text:0000000000002BC7                 test    r13b, r13b
.text:0000000000002BCA                 setnz   al
.text:0000000000002BCD                 add     r11d, 1
.text:0000000000002BD1                 xor     r14d, eax
.text:0000000000002BD4                 mov     cs:pos, r11d
.text:0000000000002BDB                 and     ebx, r14d
.text:0000000000002BDE                 cmp     r12d, r11d
.text:0000000000002BE1                 jg      loc_2B22
.text:0000000000002BE7
.text:0000000000002BE7 loc_2BE7:                               ; CODE XREF: or+1AC↑j
.text:0000000000002BE7                 or      [rsp+48h+var_39], bl
.text:0000000000002BEB
.text:0000000000002BEB loc_2BEB:                               ; CODE XREF: or+2DA↓j
.text:0000000000002BEB                 movzx   eax, [rsp+48h+var_39]
.text:0000000000002BF0                 add     rsp, 18h
.text:0000000000002BF4                 pop     rbx
.text:0000000000002BF5                 pop     rbp
.text:0000000000002BF6                 pop     r12
.text:0000000000002BF8                 pop     r13
.text:0000000000002BFA                 pop     r14
.text:0000000000002BFC                 pop     r15
.text:0000000000002BFE                 retn
.text:0000000000002BFE ; ---------------------------------------------------------------------------
.text:0000000000002BFF                 align 20h
.text:0000000000002C00
.text:0000000000002C00 loc_2C00:                               ; CODE XREF: or+211↑j
.text:0000000000002C00                 jz      short loc_2BAF
.text:0000000000002C02                 cmp     r13b, 2Dh ; '-'
.text:0000000000002C06                 jnz     short loc_2BC7
.text:0000000000002C08
.text:0000000000002C08 loc_2C08:                               ; CODE XREF: or+255↑j
.text:0000000000002C08                 cmp     byte ptr [r10+1], 0
.text:0000000000002C0D                 jz      short loc_2BC7
.text:0000000000002C0F                 cmp     byte ptr [r10+2], 0
.text:0000000000002C14                 jnz     short loc_2BC7
.text:0000000000002C16                 call    unary_operator
.text:0000000000002C1B                 mov     r11d, cs:pos
.text:0000000000002C22                 mov     r12d, cs:argc
.text:0000000000002C29                 jmp     loc_2B13
.text:0000000000002C2E ; ---------------------------------------------------------------------------
.text:0000000000002C2E
.text:0000000000002C2E loc_2C2E:                               ; CODE XREF: or+1D4↑j
.text:0000000000002C2E                 lea     rdi, aO         ; "-o"
.text:0000000000002C35                 mov     ecx, 3
.text:0000000000002C3A                 mov     rsi, r8
.text:0000000000002C3D                 or      [rsp+48h+var_39], bl
.text:0000000000002C41                 repe cmpsb
.text:0000000000002C43                 setnbe  al
.text:0000000000002C46                 sbb     al, 0
.text:0000000000002C48                 test    al, al
.text:0000000000002C4A                 jnz     short loc_2BEB
.text:0000000000002C4C                 add     r11d, 1
.text:0000000000002C50                 mov     cs:pos, r11d
.text:0000000000002C57                 jmp     loc_2998
.text:0000000000002C57 ; ---------------------------------------------------------------------------
.text:0000000000002C5C                 align 20h
.text:0000000000002C60
.text:0000000000002C60 loc_2C60:                               ; CODE XREF: or+142↑j
.text:0000000000002C60                 mov     r8d, r12d
.text:0000000000002C63                 sub     r8d, r9d
.text:0000000000002C66                 jmp     loc_2AC8
.text:0000000000002C66 ; ---------------------------------------------------------------------------
.text:0000000000002C6B                 align 10h
.text:0000000000002C70
.text:0000000000002C70 loc_2C70:                               ; CODE XREF: or+24B↑j
.text:0000000000002C70                 xor     edi, edi
.text:0000000000002C72                 call    binary_operator
.text:0000000000002C77                 mov     r11d, cs:pos
.text:0000000000002C7E                 mov     r12d, cs:argc
.text:0000000000002C85                 jmp     loc_2B13
.text:0000000000002C8A ; ---------------------------------------------------------------------------
.text:0000000000002C8A
.text:0000000000002C8A loc_2C8A:                               ; CODE XREF: or+239↑j
.text:0000000000002C8A                 mov     edi, 1
.text:0000000000002C8F                 call    binary_operator
.text:0000000000002C94                 mov     r11d, cs:pos
.text:0000000000002C9B                 mov     r12d, cs:argc
.text:0000000000002CA2                 jmp     loc_2B13
.text:0000000000002CA7 ; ---------------------------------------------------------------------------
.text:0000000000002CA7
.text:0000000000002CA7 loc_2CA7:                               ; CODE XREF: or+56↑j
.text:0000000000002CA7                 xor     r14d, r14d
.text:0000000000002CAA                 jmp     loc_2A47
.text:0000000000002CAF ; ---------------------------------------------------------------------------
.text:0000000000002CAF
.text:0000000000002CAF loc_2CAF:                               ; CODE XREF: or+61↑j
.text:0000000000002CAF                 xor     r14d, r14d
.text:0000000000002CB2                 jmp     loc_2B78
.text:0000000000002CB7 ; ---------------------------------------------------------------------------
.text:0000000000002CB7
.text:0000000000002CB7 loc_2CB7:                               ; CODE XREF: or+107↑j
.text:0000000000002CB7                 mov     r8d, 1
.text:0000000000002CBD                 jmp     loc_2AC8
.text:0000000000002CC2 ; ---------------------------------------------------------------------------
.text:0000000000002CC2
.text:0000000000002CC2 loc_2CC2:                               ; CODE XREF: or+CE↑j
.text:0000000000002CC2                 mov     cs:pos, r9d
.text:0000000000002CC9                 jmp     loc_2A44
.text:0000000000002CCE ; ---------------------------------------------------------------------------
.text:0000000000002CCE
.text:0000000000002CCE loc_2CCE:                               ; CODE XREF: or+AE↑j
.text:0000000000002CCE                 mov     cs:pos, eax
.text:0000000000002CD4                 jmp     loc_2B5E
.text:0000000000002CD9 ; ---------------------------------------------------------------------------
.text:0000000000002CD9
.text:0000000000002CD9 loc_2CD9:                               ; CODE XREF: or+181↑j
.text:0000000000002CD9                                         ; or+18B↑j
.text:0000000000002CD9                 mov     edi, 1
.text:0000000000002CDE                 call    quote_n
.text:0000000000002CE3                 lea     rsi, aC_0+2     ; ")"
.text:0000000000002CEA                 xor     edi, edi
.text:0000000000002CEC                 mov     rbp, rax
.text:0000000000002CEF                 call    quote_n
.text:0000000000002CF4                 lea     rsi, aSExpectedFound ; "%s expected, found %s"
.text:0000000000002CFB                 mov     rbx, rax
.text:0000000000002CFE                 mov     edx, 5          ; category
.text:0000000000002D03                 xor     edi, edi        ; domainname
.text:0000000000002D05                 call    _dcgettext
.text:0000000000002D0A                 mov     rdx, rbp
.text:0000000000002D0D                 mov     rdi, rax
.text:0000000000002D10                 mov     rsi, rbx
.text:0000000000002D13                 xor     eax, eax
.text:0000000000002D15                 call    test_syntax_error
.text:0000000000002D1A ; ---------------------------------------------------------------------------
.text:0000000000002D1A
.text:0000000000002D1A loc_2D1A:                               ; CODE XREF: or+178↑j
.text:0000000000002D1A                 lea     rdi, aC_0+2     ; ")"
.text:0000000000002D21                 call    quote
.text:0000000000002D26                 lea     rsi, aSExpected ; "%s expected"
.text:0000000000002D2D                 mov     rbx, rax
.text:0000000000002D30                 xor     edi, edi        ; domainname
.text:0000000000002D32                 mov     edx, 5          ; category
.text:0000000000002D37                 call    _dcgettext
.text:0000000000002D3C                 mov     rsi, rbx
.text:0000000000002D3F                 mov     rdi, rax
.text:0000000000002D42                 xor     eax, eax
.text:0000000000002D44                 call    test_syntax_error
.text:0000000000002D44 ; } // starts at 2970
.text:0000000000002D44 or              endp
.text:0000000000002D44
.text:0000000000002D44 ; ---------------------------------------------------------------------------
.text:0000000000002D49                 align 10h
.text:0000000000002D50
.text:0000000000002D50 ; =============== S U B R O U T I N E =======================================
.text:0000000000002D50
.text:0000000000002D50
.text:0000000000002D50 three_arguments proc near               ; CODE XREF: posixtest+72↑p
.text:0000000000002D50                                         ; posixtest+84↑j
.text:0000000000002D50 ; __unwind {
.text:0000000000002D50                 movsxd  rax, cs:pos
.text:0000000000002D57                 mov     r10, cs:argv
.text:0000000000002D5E                 push    rbx
.text:0000000000002D5F                 mov     r9, rax
.text:0000000000002D62                 add     rax, 1
.text:0000000000002D66                 mov     r11, [r10+rax*8]
.text:0000000000002D6A                 lea     rbx, ds:0[rax*8]
.text:0000000000002D72                 mov     rdi, r11
.text:0000000000002D75                 call    binop
.text:0000000000002D7A                 test    al, al
.text:0000000000002D7C                 jnz     loc_2E60
.text:0000000000002D82                 mov     rdx, [r10+rbx-8]
.text:0000000000002D87                 lea     rdi, asc_83D8   ; "!"
.text:0000000000002D8E                 mov     ecx, 2
.text:0000000000002D93                 mov     rsi, rdx
.text:0000000000002D96                 repe cmpsb
.text:0000000000002D98                 setnbe  al
.text:0000000000002D9B                 sbb     al, 0
.text:0000000000002D9D                 test    al, al
.text:0000000000002D9F                 jnz     short loc_2DC8
.text:0000000000002DA1                 add     r9d, 1
.text:0000000000002DA5                 cmp     r9d, cs:argc
.text:0000000000002DAC                 mov     cs:pos, r9d
.text:0000000000002DB3                 jge     loc_2E93
.text:0000000000002DB9                 call    two_arguments
.text:0000000000002DBE                 pop     rbx
.text:0000000000002DBF                 xor     eax, 1
.text:0000000000002DC2                 retn
.text:0000000000002DC2 ; ---------------------------------------------------------------------------
.text:0000000000002DC3                 align 8
.text:0000000000002DC8
.text:0000000000002DC8 loc_2DC8:                               ; CODE XREF: three_arguments+4F↑j
.text:0000000000002DC8                 lea     rdi, asc_83DA   ; "("
.text:0000000000002DCF                 mov     ecx, 2
.text:0000000000002DD4                 mov     rsi, rdx
.text:0000000000002DD7                 repe cmpsb
.text:0000000000002DD9                 setnbe  al
.text:0000000000002DDC                 sbb     al, 0
.text:0000000000002DDE                 test    al, al
.text:0000000000002DE0                 jnz     short loc_2E18
.text:0000000000002DE2                 mov     rsi, [r10+rbx+8]
.text:0000000000002DE7                 lea     rdi, aC_0+2     ; ")"
.text:0000000000002DEE                 mov     ecx, 2
.text:0000000000002DF3                 repe cmpsb
.text:0000000000002DF5                 setnbe  al
.text:0000000000002DF8                 sbb     al, 0
.text:0000000000002DFA                 test    al, al
.text:0000000000002DFC                 jnz     short loc_2E18
.text:0000000000002DFE                 cmp     byte ptr [r11], 0
.text:0000000000002E02                 pop     rbx
.text:0000000000002E03                 setnz   al
.text:0000000000002E06                 add     r9d, 3
.text:0000000000002E0A                 mov     cs:pos, r9d
.text:0000000000002E11                 retn
.text:0000000000002E11 ; ---------------------------------------------------------------------------
.text:0000000000002E12                 align 8
.text:0000000000002E18
.text:0000000000002E18 loc_2E18:                               ; CODE XREF: three_arguments+90↑j
.text:0000000000002E18                                         ; three_arguments+AC↑j
.text:0000000000002E18                 lea     rdi, aA         ; "-a"
.text:0000000000002E1F                 mov     ecx, 3
.text:0000000000002E24                 mov     rsi, r11
.text:0000000000002E27                 repe cmpsb
.text:0000000000002E29                 setnbe  al
.text:0000000000002E2C                 sbb     al, 0
.text:0000000000002E2E                 test    al, al
.text:0000000000002E30                 jz      short loc_2E4C
.text:0000000000002E32                 lea     rdi, aO         ; "-o"
.text:0000000000002E39                 mov     ecx, 3
.text:0000000000002E3E                 mov     rsi, r11
.text:0000000000002E41                 repe cmpsb
.text:0000000000002E43                 setnbe  al
.text:0000000000002E46                 sbb     al, 0
.text:0000000000002E48                 test    al, al
.text:0000000000002E4A                 jnz     short loc_2E68
.text:0000000000002E4C
.text:0000000000002E4C loc_2E4C:                               ; CODE XREF: three_arguments+E0↑j
.text:0000000000002E4C                 cmp     r9d, cs:argc
.text:0000000000002E53                 jge     short loc_2E93
.text:0000000000002E55                 pop     rbx
.text:0000000000002E56                 jmp     or
.text:0000000000002E56 ; ---------------------------------------------------------------------------
.text:0000000000002E5B                 align 20h
.text:0000000000002E60
.text:0000000000002E60 loc_2E60:                               ; CODE XREF: three_arguments+2C↑j
.text:0000000000002E60                 pop     rbx
.text:0000000000002E61                 xor     edi, edi
.text:0000000000002E63                 jmp     binary_operator
.text:0000000000002E68 ; ---------------------------------------------------------------------------
.text:0000000000002E68
.text:0000000000002E68 loc_2E68:                               ; CODE XREF: three_arguments+FA↑j
.text:0000000000002E68                 mov     rdi, r11
.text:0000000000002E6B                 call    quote
.text:0000000000002E70                 lea     rsi, aSBinaryOperato ; "%s: binary operator expected"
.text:0000000000002E77                 mov     rbx, rax
.text:0000000000002E7A                 xor     edi, edi        ; domainname
.text:0000000000002E7C                 mov     edx, 5          ; category
.text:0000000000002E81                 call    _dcgettext
.text:0000000000002E86                 mov     rsi, rbx
.text:0000000000002E89                 mov     rdi, rax
.text:0000000000002E8C                 xor     eax, eax
.text:0000000000002E8E                 call    test_syntax_error
.text:0000000000002E93 ; ---------------------------------------------------------------------------
.text:0000000000002E93
.text:0000000000002E93 loc_2E93:                               ; CODE XREF: three_arguments+63↑j
.text:0000000000002E93                                         ; three_arguments+103↑j
.text:0000000000002E93                 call    beyond
.text:0000000000002E93 ; } // starts at 2D50
.text:0000000000002E93 three_arguments endp
.text:0000000000002E93
.text:0000000000002E93 ; ---------------------------------------------------------------------------
.text:0000000000002E98                 align 20h
.text:0000000000002EA0
.text:0000000000002EA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000002EA0
.text:0000000000002EA0 ; Attributes: noreturn
.text:0000000000002EA0
.text:0000000000002EA0 ; void __fastcall __noreturn usage(int status)
.text:0000000000002EA0                 public usage
.text:0000000000002EA0 usage           proc near               ; CODE XREF: main+1B5↑p
.text:0000000000002EA0 ; __unwind {
.text:0000000000002EA0                 test    edi, edi
.text:0000000000002EA2                 push    r12
.text:0000000000002EA4                 push    rbp
.text:0000000000002EA5                 push    rbx
.text:0000000000002EA6                 mov     ebx, edi
.text:0000000000002EA8                 jz      short loc_2EE4
.text:0000000000002EAA                 lea     rsi, aTrySHelpForMor ; "Try '%s --help' for more information.\n"
.text:0000000000002EB1                 mov     rbp, cs:program_name
.text:0000000000002EB8                 mov     edx, 5          ; category
.text:0000000000002EBD                 xor     edi, edi        ; domainname
.text:0000000000002EBF                 call    _dcgettext
.text:0000000000002EC4                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000002ECB                 mov     rdx, rax
.text:0000000000002ECE                 mov     rcx, rbp
.text:0000000000002ED1                 mov     esi, 1
.text:0000000000002ED6                 xor     eax, eax
.text:0000000000002ED8                 call    ___fprintf_chk
.text:0000000000002EDD
.text:0000000000002EDD loc_2EDD:                               ; CODE XREF: usage+3A7↓j
.text:0000000000002EDD                 mov     edi, ebx        ; status
.text:0000000000002EDF                 call    _exit
.text:0000000000002EE4 ; ---------------------------------------------------------------------------
.text:0000000000002EE4
.text:0000000000002EE4 loc_2EE4:                               ; CODE XREF: usage+8↑j
.text:0000000000002EE4                 mov     rbp, cs:stdout@@GLIBC_2_2_5
.text:0000000000002EEB                 lea     rsi, aUsageTestExpre ; "Usage: test EXPRESSION\n  or:  test\n  "...
.text:0000000000002EF2                 mov     edx, 5          ; category
.text:0000000000002EF7                 xor     edi, edi        ; domainname
.text:0000000000002EF9                 call    _dcgettext
.text:0000000000002EFE                 mov     rsi, rbp        ; stream
.text:0000000000002F01                 mov     rdi, rax        ; s
.text:0000000000002F04                 call    _fputs_unlocked
.text:0000000000002F09                 mov     rbp, cs:stdout@@GLIBC_2_2_5
.text:0000000000002F10                 lea     rsi, aExitWithTheSta ; "Exit with the status determined by EXPR"...
.text:0000000000002F17                 mov     edx, 5          ; category
.text:0000000000002F1C                 xor     edi, edi        ; domainname
.text:0000000000002F1E                 call    _dcgettext
.text:0000000000002F23                 mov     rsi, rbp        ; stream
.text:0000000000002F26                 mov     rdi, rax        ; s
.text:0000000000002F29                 call    _fputs_unlocked
.text:0000000000002F2E                 mov     rbp, cs:stdout@@GLIBC_2_2_5
.text:0000000000002F35                 lea     rsi, aHelpDisplayThi ; "      --help     display this help and "...
.text:0000000000002F3C                 mov     edx, 5          ; category
.text:0000000000002F41                 xor     edi, edi        ; domainname
.text:0000000000002F43                 call    _dcgettext
.text:0000000000002F48                 mov     rsi, rbp        ; stream
.text:0000000000002F4B                 mov     rdi, rax        ; s
.text:0000000000002F4E                 call    _fputs_unlocked
.text:0000000000002F53                 mov     rbp, cs:stdout@@GLIBC_2_2_5
.text:0000000000002F5A                 lea     rsi, aVersionOutputV ; "      --version  output version informa"...
.text:0000000000002F61                 mov     edx, 5          ; category
.text:0000000000002F66                 xor     edi, edi        ; domainname
.text:0000000000002F68                 call    _dcgettext
.text:0000000000002F6D                 mov     rsi, rbp        ; stream
.text:0000000000002F70                 mov     rdi, rax        ; s
.text:0000000000002F73                 call    _fputs_unlocked
.text:0000000000002F78                 mov     rbp, cs:stdout@@GLIBC_2_2_5
.text:0000000000002F7F                 lea     rsi, aAnOmittedExpre ; "\nAn omitted EXPRESSION defaults to fal"...
.text:0000000000002F86                 mov     edx, 5          ; category
.text:0000000000002F8B                 xor     edi, edi        ; domainname
.text:0000000000002F8D                 call    _dcgettext
.text:0000000000002F92                 mov     rsi, rbp        ; stream
.text:0000000000002F95                 mov     rdi, rax        ; s
.text:0000000000002F98                 call    _fputs_unlocked
.text:0000000000002F9D                 mov     rbp, cs:stdout@@GLIBC_2_2_5
.text:0000000000002FA4                 lea     rsi, aExpressionExpr ; "\n  ( EXPRESSION )               EXPRES"...
.text:0000000000002FAB                 mov     edx, 5          ; category
.text:0000000000002FB0                 xor     edi, edi        ; domainname
.text:0000000000002FB2                 call    _dcgettext
.text:0000000000002FB7                 mov     rsi, rbp        ; stream
.text:0000000000002FBA                 mov     rdi, rax        ; s
.text:0000000000002FBD                 call    _fputs_unlocked
.text:0000000000002FC2                 mov     rbp, cs:stdout@@GLIBC_2_2_5
.text:0000000000002FC9                 lea     rsi, aNStringTheLeng ; "\n  -n STRING            the length of "...
.text:0000000000002FD0                 mov     edx, 5          ; category
.text:0000000000002FD5                 xor     edi, edi        ; domainname
.text:0000000000002FD7                 call    _dcgettext
.text:0000000000002FDC                 mov     rsi, rbp        ; stream
.text:0000000000002FDF                 mov     rdi, rax        ; s
.text:0000000000002FE2                 call    _fputs_unlocked
.text:0000000000002FE7                 mov     rbp, cs:stdout@@GLIBC_2_2_5
.text:0000000000002FEE                 lea     rsi, aInteger1EqInte ; "\n  INTEGER1 -eq INTEGER2   INTEGER1 is"...
.text:0000000000002FF5                 mov     edx, 5          ; category
.text:0000000000002FFA                 xor     edi, edi        ; domainname
.text:0000000000002FFC                 call    _dcgettext
.text:0000000000003001                 mov     rsi, rbp        ; stream
.text:0000000000003004                 mov     rdi, rax        ; s
.text:0000000000003007                 call    _fputs_unlocked
.text:000000000000300C                 mov     rbp, cs:stdout@@GLIBC_2_2_5
.text:0000000000003013                 lea     rsi, aFile1EfFile2Fi ; "\n  FILE1 -ef FILE2   FILE1 and FILE2 h"...
.text:000000000000301A                 mov     edx, 5          ; category
.text:000000000000301F                 xor     edi, edi        ; domainname
.text:0000000000003021                 call    _dcgettext
.text:0000000000003026                 mov     rsi, rbp        ; stream
.text:0000000000003029                 mov     rdi, rax        ; s
.text:000000000000302C                 call    _fputs_unlocked
.text:0000000000003031                 mov     rbp, cs:stdout@@GLIBC_2_2_5
.text:0000000000003038                 lea     rsi, aBFileFileExist ; "\n  -b FILE     FILE exists and is bloc"...
.text:000000000000303F                 mov     edx, 5          ; category
.text:0000000000003044                 xor     edi, edi        ; domainname
.text:0000000000003046                 call    _dcgettext
.text:000000000000304B                 mov     rsi, rbp        ; stream
.text:000000000000304E                 mov     rdi, rax        ; s
.text:0000000000003051                 call    _fputs_unlocked
.text:0000000000003056                 mov     rbp, cs:stdout@@GLIBC_2_2_5
.text:000000000000305D                 lea     rsi, aFFileFileExist ; "  -f FILE     FILE exists and is a regu"...
.text:0000000000003064                 mov     edx, 5          ; category
.text:0000000000003069                 xor     edi, edi        ; domainname
.text:000000000000306B                 call    _dcgettext
.text:0000000000003070                 mov     rsi, rbp        ; stream
.text:0000000000003073                 mov     rdi, rax        ; s
.text:0000000000003076                 call    _fputs_unlocked
.text:000000000000307B                 mov     rbp, cs:stdout@@GLIBC_2_2_5
.text:0000000000003082                 lea     rsi, aLFileFileExist ; "  -L FILE     FILE exists and is a symb"...
.text:0000000000003089                 mov     edx, 5          ; category
.text:000000000000308E                 xor     edi, edi        ; domainname
.text:0000000000003090                 call    _dcgettext
.text:0000000000003095                 mov     rsi, rbp        ; stream
.text:0000000000003098                 mov     rdi, rax        ; s
.text:000000000000309B                 call    _fputs_unlocked
.text:00000000000030A0                 mov     rbp, cs:stdout@@GLIBC_2_2_5
.text:00000000000030A7                 lea     rsi, aSFileFileExist ; "  -S FILE     FILE exists and is a sock"...
.text:00000000000030AE                 mov     edx, 5          ; category
.text:00000000000030B3                 xor     edi, edi        ; domainname
.text:00000000000030B5                 call    _dcgettext
.text:00000000000030BA                 mov     rsi, rbp        ; stream
.text:00000000000030BD                 mov     rdi, rax        ; s
.text:00000000000030C0                 call    _fputs_unlocked
.text:00000000000030C5                 mov     rbp, cs:stdout@@GLIBC_2_2_5
.text:00000000000030CC                 lea     rsi, aExceptForHAndL ; "\nExcept for -h and -L, all FILE-relate"...
.text:00000000000030D3                 mov     edx, 5          ; category
.text:00000000000030D8                 xor     edi, edi        ; domainname
.text:00000000000030DA                 call    _dcgettext
.text:00000000000030DF                 mov     rsi, rbp        ; stream
.text:00000000000030E2                 mov     rdi, rax        ; s
.text:00000000000030E5                 call    _fputs_unlocked
.text:00000000000030EA                 mov     rbp, cs:stdout@@GLIBC_2_2_5
.text:00000000000030F1                 lea     rsi, aNoteBinaryAAnd ; "\nNOTE: Binary -a and -o are inherently"...
.text:00000000000030F8                 mov     edx, 5          ; category
.text:00000000000030FD                 xor     edi, edi        ; domainname
.text:00000000000030FF                 call    _dcgettext
.text:0000000000003104                 mov     rsi, rbp        ; stream
.text:0000000000003107                 mov     rdi, rax        ; s
.text:000000000000310A                 call    _fputs_unlocked
.text:000000000000310F                 mov     rbp, cs:stdout@@GLIBC_2_2_5
.text:0000000000003116                 lea     rsi, aNoteHonorsTheH ; "\nNOTE: [ honors the --help and --versi"...
.text:000000000000311D                 mov     edx, 5          ; category
.text:0000000000003122                 xor     edi, edi        ; domainname
.text:0000000000003124                 call    _dcgettext
.text:0000000000003129                 mov     rsi, rbp        ; stream
.text:000000000000312C                 mov     rdi, rax        ; s
.text:000000000000312F                 call    _fputs_unlocked
.text:0000000000003134                 lea     rsi, aTestAndOr ; "test and/or ["
.text:000000000000313B                 xor     edi, edi        ; domainname
.text:000000000000313D                 mov     edx, 5          ; category
.text:0000000000003142                 call    _dcgettext
.text:0000000000003147                 lea     rsi, aNoteYourShellM ; "\nNOTE: your shell may have its own ver"...
.text:000000000000314E                 xor     edi, edi        ; domainname
.text:0000000000003150                 mov     rbp, rax
.text:0000000000003153                 mov     edx, 5          ; category
.text:0000000000003158                 call    _dcgettext
.text:000000000000315D                 mov     rdx, rbp
.text:0000000000003160                 mov     rsi, rax
.text:0000000000003163                 mov     edi, 1
.text:0000000000003168                 xor     eax, eax
.text:000000000000316A                 call    ___printf_chk
.text:000000000000316F                 lea     rsi, aSOnlineHelpS ; "\n%s online help: <%s>\n"
.text:0000000000003176                 xor     edi, edi        ; domainname
.text:0000000000003178                 mov     edx, 5          ; category
.text:000000000000317D                 call    _dcgettext
.text:0000000000003182                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000003189                 lea     rdx, unk_8446
.text:0000000000003190                 mov     rsi, rax
.text:0000000000003193                 mov     edi, 1
.text:0000000000003198                 xor     eax, eax
.text:000000000000319A                 call    ___printf_chk
.text:000000000000319F                 xor     esi, esi        ; locale
.text:00000000000031A1                 mov     edi, 5          ; category
.text:00000000000031A6                 call    _setlocale
.text:00000000000031AB                 test    rax, rax
.text:00000000000031AE                 jz      short loc_31CC
.text:00000000000031B0                 lea     rsi, aEn        ; "en_"
.text:00000000000031B7                 mov     edx, 3          ; n
.text:00000000000031BC                 mov     rdi, rax        ; s1
.text:00000000000031BF                 call    _strncmp
.text:00000000000031C4                 test    eax, eax
.text:00000000000031C6                 jnz     loc_324C
.text:00000000000031CC
.text:00000000000031CC loc_31CC:                               ; CODE XREF: usage+30E↑j
.text:00000000000031CC                                         ; usage+3D1↓j
.text:00000000000031CC                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:00000000000031D3                 xor     edi, edi        ; domainname
.text:00000000000031D5                 mov     edx, 5          ; category
.text:00000000000031DA                 lea     r12, aTestInvocation ; "test invocation"
.text:00000000000031E1                 lea     rbp, aTestInvocation+4 ; " invocation"
.text:00000000000031E8                 call    _dcgettext
.text:00000000000031ED                 lea     rcx, aTestAndOr+0Ch ; "["
.text:00000000000031F4                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000031FB                 mov     rsi, rax
.text:00000000000031FE                 mov     edi, 1
.text:0000000000003203                 xor     eax, eax
.text:0000000000003205                 call    ___printf_chk
.text:000000000000320A                 lea     rax, aTestAndOr+0Ch ; "["
.text:0000000000003211                 lea     rcx, aWrittenBySSAnd+1Bh ; ""
.text:0000000000003218                 lea     rsi, aOrAvailableLoc ; "or available locally via: info '(coreut"...
.text:000000000000321F                 mov     edx, 5          ; category
.text:0000000000003224                 cmp     r12, rax
.text:0000000000003227                 cmovnz  rbp, rcx
.text:000000000000322B                 xor     edi, edi        ; domainname
.text:000000000000322D                 call    _dcgettext
.text:0000000000003232                 mov     rcx, rbp
.text:0000000000003235                 mov     rsi, rax
.text:0000000000003238                 mov     rdx, r12
.text:000000000000323B                 mov     edi, 1
.text:0000000000003240                 xor     eax, eax
.text:0000000000003242                 call    ___printf_chk
.text:0000000000003247                 jmp     loc_2EDD
.text:000000000000324C ; ---------------------------------------------------------------------------
.text:000000000000324C
.text:000000000000324C loc_324C:                               ; CODE XREF: usage+326↑j
.text:000000000000324C                 mov     rbp, cs:stdout@@GLIBC_2_2_5
.text:0000000000003253                 lea     rsi, aReportAnyTrans ; "Report any translation bugs to <https:/"...
.text:000000000000325A                 xor     edi, edi        ; domainname
.text:000000000000325C                 mov     edx, 5          ; category
.text:0000000000003261                 call    _dcgettext
.text:0000000000003266                 mov     rsi, rbp        ; stream
.text:0000000000003269                 mov     rdi, rax        ; s
.text:000000000000326C                 call    _fputs_unlocked
.text:0000000000003271                 jmp     loc_31CC
.text:0000000000003271 ; } // starts at 2EA0
.text:0000000000003271 usage           endp
.text:0000000000003271
.text:0000000000003271 ; ---------------------------------------------------------------------------
.text:0000000000003276                 align 20h
.text:0000000000003280
.text:0000000000003280 ; =============== S U B R O U T I N E =======================================
.text:0000000000003280
.text:0000000000003280
.text:0000000000003280                 public close_stdout_set_file_name
.text:0000000000003280 close_stdout_set_file_name proc near
.text:0000000000003280 ; __unwind {
.text:0000000000003280                 mov     cs:file_name, rdi
.text:0000000000003287                 retn
.text:0000000000003287 ; } // starts at 3280
.text:0000000000003287 close_stdout_set_file_name endp
.text:0000000000003287
.text:0000000000003287 ; ---------------------------------------------------------------------------
.text:0000000000003288                 align 10h
.text:0000000000003290
.text:0000000000003290 ; =============== S U B R O U T I N E =======================================
.text:0000000000003290
.text:0000000000003290
.text:0000000000003290                 public close_stdout_set_ignore_EPIPE
.text:0000000000003290 close_stdout_set_ignore_EPIPE proc near
.text:0000000000003290 ; __unwind {
.text:0000000000003290                 mov     cs:ignore_EPIPE, dil
.text:0000000000003297                 retn
.text:0000000000003297 ; } // starts at 3290
.text:0000000000003297 close_stdout_set_ignore_EPIPE endp
.text:0000000000003297
.text:0000000000003297 ; ---------------------------------------------------------------------------
.text:0000000000003298                 align 20h
.text:00000000000032A0
.text:00000000000032A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000032A0
.text:00000000000032A0 ; Attributes: info_from_lumina
.text:00000000000032A0
.text:00000000000032A0 ; void __cdecl close_stdout()
.text:00000000000032A0                 public close_stdout
.text:00000000000032A0 close_stdout    proc near               ; DATA XREF: main+43↑o
.text:00000000000032A0 ; __unwind {
.text:00000000000032A0                 push    rbp
.text:00000000000032A1                 push    rbx
.text:00000000000032A2                 sub     rsp, 8
.text:00000000000032A6                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:00000000000032AD                 call    close_stream
.text:00000000000032B2                 test    eax, eax
.text:00000000000032B4                 jz      short loc_32CC
.text:00000000000032B6                 call    ___errno_location
.text:00000000000032BB                 cmp     cs:ignore_EPIPE, 0
.text:00000000000032C2                 mov     rbx, rax
.text:00000000000032C5                 jz      short loc_32E3
.text:00000000000032C7                 cmp     dword ptr [rax], 20h ; ' '
.text:00000000000032CA                 jnz     short loc_32E3
.text:00000000000032CC
.text:00000000000032CC loc_32CC:                               ; CODE XREF: close_stdout+14↑j
.text:00000000000032CC                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:00000000000032D3                 call    close_stream
.text:00000000000032D8                 test    eax, eax
.text:00000000000032DA                 jnz     short loc_3322
.text:00000000000032DC                 add     rsp, 8
.text:00000000000032E0                 pop     rbx
.text:00000000000032E1                 pop     rbp
.text:00000000000032E2                 retn
.text:00000000000032E3 ; ---------------------------------------------------------------------------
.text:00000000000032E3
.text:00000000000032E3 loc_32E3:                               ; CODE XREF: close_stdout+25↑j
.text:00000000000032E3                                         ; close_stdout+2A↑j
.text:00000000000032E3                 lea     rsi, aWriteError ; "write error"
.text:00000000000032EA                 xor     edi, edi        ; domainname
.text:00000000000032EC                 mov     edx, 5          ; category
.text:00000000000032F1                 call    _dcgettext
.text:00000000000032F6                 mov     rdi, cs:file_name
.text:00000000000032FD                 mov     rbp, rax
.text:0000000000003300                 test    rdi, rdi
.text:0000000000003303                 jz      short loc_332D
.text:0000000000003305                 call    quotearg_colon
.text:000000000000330A                 mov     esi, [rbx]      ; errnum
.text:000000000000330C                 lea     rdx, format     ; "%s: %s"
.text:0000000000003313                 mov     rcx, rax
.text:0000000000003316                 mov     r8, rbp
.text:0000000000003319                 xor     edi, edi        ; status
.text:000000000000331B                 xor     eax, eax
.text:000000000000331D                 call    _error
.text:0000000000003322
.text:0000000000003322 loc_3322:                               ; CODE XREF: close_stdout+3A↑j
.text:0000000000003322                                         ; close_stdout+A2↓j
.text:0000000000003322                 mov     edi, cs:exit_failure ; status
.text:0000000000003328                 call    __exit
.text:000000000000332D ; ---------------------------------------------------------------------------
.text:000000000000332D
.text:000000000000332D loc_332D:                               ; CODE XREF: close_stdout+63↑j
.text:000000000000332D                 mov     esi, [rbx]      ; errnum
.text:000000000000332F                 lea     rdx, format+4   ; format
.text:0000000000003336                 mov     rcx, rax
.text:0000000000003339                 xor     edi, edi        ; status
.text:000000000000333B                 xor     eax, eax
.text:000000000000333D                 call    _error
.text:0000000000003342                 jmp     short loc_3322
.text:0000000000003342 ; } // starts at 32A0
.text:0000000000003342 close_stdout    endp
.text:0000000000003342
.text:0000000000003342 ; ---------------------------------------------------------------------------
.text:0000000000003344                 align 10h
.text:0000000000003350
.text:0000000000003350 ; =============== S U B R O U T I N E =======================================
.text:0000000000003350
.text:0000000000003350 ; Attributes: info_from_lumina
.text:0000000000003350
.text:0000000000003350 ; char *__fastcall umaxtostr(uintmax_t i, char *buf)
.text:0000000000003350                 public umaxtostr
.text:0000000000003350 umaxtostr       proc near               ; CODE XREF: binary_operator+34E↑p
.text:0000000000003350                                         ; binary_operator+490↑p
.text:0000000000003350 ; __unwind {
.text:0000000000003350                 lea     rcx, [rsi+14h]
.text:0000000000003354                 mov     byte ptr [rsi+14h], 0
.text:0000000000003358                 mov     rsi, 0CCCCCCCCCCCCCCCDh
.text:0000000000003362                 nop     word ptr [rax+rax+00h]
.text:0000000000003368
.text:0000000000003368 loc_3368:                               ; CODE XREF: umaxtostr+3C↓j
.text:0000000000003368                 mov     rax, rdi
.text:000000000000336B                 sub     rcx, 1
.text:000000000000336F                 mul     rsi
.text:0000000000003372                 shr     rdx, 3
.text:0000000000003376                 lea     rax, [rdx+rdx*4]
.text:000000000000337A                 add     rax, rax
.text:000000000000337D                 sub     rdi, rax
.text:0000000000003380                 add     edi, 30h ; '0'
.text:0000000000003383                 test    rdx, rdx
.text:0000000000003386                 mov     [rcx], dil
.text:0000000000003389                 mov     rdi, rdx
.text:000000000000338C                 jnz     short loc_3368
.text:000000000000338E                 mov     rax, rcx
.text:0000000000003391                 retn
.text:0000000000003391 ; } // starts at 3350
.text:0000000000003391 umaxtostr       endp
.text:0000000000003391
.text:0000000000003391 ; ---------------------------------------------------------------------------
.text:0000000000003392                 align 20h
.text:00000000000033A0
.text:00000000000033A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000033A0
.text:00000000000033A0
.text:00000000000033A0                 public set_program_name
.text:00000000000033A0 set_program_name proc near              ; CODE XREF: main+E↑p
.text:00000000000033A0 ; __unwind {
.text:00000000000033A0                 test    rdi, rdi
.text:00000000000033A3                 push    rbx
.text:00000000000033A4                 jz      short loc_341D
.text:00000000000033A6                 mov     esi, 2Fh ; '/'  ; c
.text:00000000000033AB                 mov     rbx, rdi
.text:00000000000033AE                 call    _strrchr
.text:00000000000033B3                 test    rax, rax
.text:00000000000033B6                 jz      short loc_340D
.text:00000000000033B8                 lea     r8, [rax+1]
.text:00000000000033BC                 mov     rdx, r8
.text:00000000000033BF                 sub     rdx, rbx
.text:00000000000033C2                 cmp     rdx, 6
.text:00000000000033C6                 jle     short loc_340D
.text:00000000000033C8                 lea     rsi, [rax-6]
.text:00000000000033CC                 lea     rdi, aLibs      ; "/.libs/"
.text:00000000000033D3                 mov     ecx, 7
.text:00000000000033D8                 repe cmpsb
.text:00000000000033DA                 setnbe  dl
.text:00000000000033DD                 sbb     dl, 0
.text:00000000000033E0                 test    dl, dl
.text:00000000000033E2                 jnz     short loc_340D
.text:00000000000033E4                 lea     rdi, aLt        ; "lt-"
.text:00000000000033EB                 mov     ecx, 3
.text:00000000000033F0                 mov     rsi, r8
.text:00000000000033F3                 mov     rbx, r8
.text:00000000000033F6                 repe cmpsb
.text:00000000000033F8                 setnbe  dl
.text:00000000000033FB                 sbb     dl, 0
.text:00000000000033FE                 test    dl, dl
.text:0000000000003400                 jnz     short loc_340D
.text:0000000000003402                 lea     rbx, [rax+4]
.text:0000000000003406                 mov     cs:__bss_start, rbx
.text:000000000000340D
.text:000000000000340D loc_340D:                               ; CODE XREF: set_program_name+16↑j
.text:000000000000340D                                         ; set_program_name+26↑j ...
.text:000000000000340D                 mov     cs:program_name, rbx
.text:0000000000003414                 mov     cs:program_invocation_name@@GLIBC_2_2_5, rbx
.text:000000000000341B                 pop     rbx
.text:000000000000341C                 retn
.text:000000000000341D ; ---------------------------------------------------------------------------
.text:000000000000341D
.text:000000000000341D loc_341D:                               ; CODE XREF: set_program_name+4↑j
.text:000000000000341D                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:0000000000003424                 lea     rdi, aANullArgv0WasP ; "A NULL argv[0] was passed through an ex"...
.text:000000000000342B                 mov     edx, 37h ; '7'  ; n
.text:0000000000003430                 mov     esi, 1          ; size
.text:0000000000003435                 call    _fwrite
.text:000000000000343A                 call    _abort
.text:000000000000343A ; } // starts at 33A0
.text:000000000000343A set_program_name endp
.text:000000000000343A
.text:000000000000343A ; ---------------------------------------------------------------------------
.text:000000000000343F                 align 20h
.text:0000000000003440
.text:0000000000003440 ; =============== S U B R O U T I N E =======================================
.text:0000000000003440
.text:0000000000003440 ; Attributes: info_from_lumina
.text:0000000000003440
.text:0000000000003440 ; const char *__fastcall gettext_quote(const char *msgid, quoting_style s)
.text:0000000000003440 gettext_quote   proc near               ; CODE XREF: quotearg_buffer_restyled+1165↓p
.text:0000000000003440                                         ; quotearg_buffer_restyled+117B↓p
.text:0000000000003440 ; __unwind {
.text:0000000000003440                 push    rbp
.text:0000000000003441                 push    rbx
.text:0000000000003442                 mov     rbp, rdi
.text:0000000000003445                 mov     ebx, esi
.text:0000000000003447                 sub     rsp, 8
.text:000000000000344B                 call    locale_charset
.text:0000000000003450                 movzx   edx, byte ptr [rax]
.text:0000000000003453                 and     edx, 0FFFFFFDFh
.text:0000000000003456                 cmp     dl, 55h ; 'U'
.text:0000000000003459                 jz      short loc_34D0
.text:000000000000345B                 cmp     dl, 47h ; 'G'
.text:000000000000345E                 jz      short loc_3480
.text:0000000000003460
.text:0000000000003460 loc_3460:                               ; CODE XREF: gettext_quote+4A↓j
.text:0000000000003460                                         ; gettext_quote+50↓j ...
.text:0000000000003460                 lea     rax, unk_93A3
.text:0000000000003467                 lea     rdx, asc_93A5   ; "'"
.text:000000000000346E                 cmp     ebx, 9
.text:0000000000003471                 cmovnz  rax, rdx
.text:0000000000003475                 add     rsp, 8
.text:0000000000003479                 pop     rbx
.text:000000000000347A                 pop     rbp
.text:000000000000347B                 retn
.text:000000000000347B ; ---------------------------------------------------------------------------
.text:000000000000347C                 align 20h
.text:0000000000003480
.text:0000000000003480 loc_3480:                               ; CODE XREF: gettext_quote+1E↑j
.text:0000000000003480                 movzx   edx, byte ptr [rax+1]
.text:0000000000003484                 and     edx, 0FFFFFFDFh
.text:0000000000003487                 cmp     dl, 42h ; 'B'
.text:000000000000348A                 jnz     short loc_3460
.text:000000000000348C                 cmp     byte ptr [rax+2], 31h ; '1'
.text:0000000000003490                 jnz     short loc_3460
.text:0000000000003492                 cmp     byte ptr [rax+3], 38h ; '8'
.text:0000000000003496                 jnz     short loc_3460
.text:0000000000003498                 cmp     byte ptr [rax+4], 30h ; '0'
.text:000000000000349C                 jnz     short loc_3460
.text:000000000000349E                 cmp     byte ptr [rax+5], 33h ; '3'
.text:00000000000034A2                 jnz     short loc_3460
.text:00000000000034A4                 cmp     byte ptr [rax+6], 30h ; '0'
.text:00000000000034A8                 jnz     short loc_3460
.text:00000000000034AA                 cmp     byte ptr [rax+7], 0
.text:00000000000034AE                 jnz     short loc_3460
.text:00000000000034B0                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:00000000000034B4                 lea     rax, unk_939C
.text:00000000000034BB                 lea     rdx, unk_93A0
.text:00000000000034C2                 cmovnz  rax, rdx
.text:00000000000034C6                 add     rsp, 8
.text:00000000000034CA                 pop     rbx
.text:00000000000034CB                 pop     rbp
.text:00000000000034CC                 retn
.text:00000000000034CC ; ---------------------------------------------------------------------------
.text:00000000000034CD                 align 10h
.text:00000000000034D0
.text:00000000000034D0 loc_34D0:                               ; CODE XREF: gettext_quote+19↑j
.text:00000000000034D0                 movzx   edx, byte ptr [rax+1]
.text:00000000000034D4                 and     edx, 0FFFFFFDFh
.text:00000000000034D7                 cmp     dl, 54h ; 'T'
.text:00000000000034DA                 jnz     short loc_3460
.text:00000000000034DC                 movzx   edx, byte ptr [rax+2]
.text:00000000000034E0                 and     edx, 0FFFFFFDFh
.text:00000000000034E3                 cmp     dl, 46h ; 'F'
.text:00000000000034E6                 jnz     loc_3460
.text:00000000000034EC                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:00000000000034F0                 jnz     loc_3460
.text:00000000000034F6                 cmp     byte ptr [rax+4], 38h ; '8'
.text:00000000000034FA                 jnz     loc_3460
.text:0000000000003500                 cmp     byte ptr [rax+5], 0
.text:0000000000003504                 jnz     loc_3460
.text:000000000000350A                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:000000000000350E                 lea     rax, unk_9394
.text:0000000000003515                 lea     rdx, unk_9398
.text:000000000000351C                 cmovnz  rax, rdx
.text:0000000000003520                 add     rsp, 8
.text:0000000000003524                 pop     rbx
.text:0000000000003525                 pop     rbp
.text:0000000000003526                 retn
.text:0000000000003526 ; } // starts at 3440
.text:0000000000003526 gettext_quote   endp
.text:0000000000003526
.text:0000000000003526 ; ---------------------------------------------------------------------------
.text:0000000000003527                 align 10h
.text:0000000000003530
.text:0000000000003530 ; =============== S U B R O U T I N E =======================================
.text:0000000000003530
.text:0000000000003530 ; Attributes: info_from_lumina
.text:0000000000003530
.text:0000000000003530 ; size_t __fastcall quotearg_buffer_restyled(char *buffer, size_t buffersize, const char *arg, size_t argsize, quoting_style quoting_style, int flags, const unsigned int *quote_these_too, const char *left_quote, const char *right_quote)
.text:0000000000003530 quotearg_buffer_restyled proc near      ; CODE XREF: quotearg_buffer_restyled+BCD↓p
.text:0000000000003530                                         ; quotearg_buffer_restyled+11CB↓p ...
.text:0000000000003530
.text:0000000000003530 var_E0          = dword ptr -0E0h
.text:0000000000003530 var_DB          = byte ptr -0DBh
.text:0000000000003530 var_DA          = byte ptr -0DAh
.text:0000000000003530 var_D9          = byte ptr -0D9h
.text:0000000000003530 s               = qword ptr -0D8h
.text:0000000000003530 n               = qword ptr -0D0h
.text:0000000000003530 var_C8          = qword ptr -0C8h
.text:0000000000003530 ps              = qword ptr -0C0h
.text:0000000000003530 var_B8          = qword ptr -0B8h
.text:0000000000003530 var_B0          = qword ptr -0B0h
.text:0000000000003530 var_A8          = qword ptr -0A8h
.text:0000000000003530 s2              = qword ptr -0A0h
.text:0000000000003530 var_98          = qword ptr -98h
.text:0000000000003530 var_90          = qword ptr -90h
.text:0000000000003530 var_88          = qword ptr -88h
.text:0000000000003530 var_80          = qword ptr -80h
.text:0000000000003530 var_78          = qword ptr -78h
.text:0000000000003530 var_70          = dword ptr -70h
.text:0000000000003530 var_6C          = byte ptr -6Ch
.text:0000000000003530 var_6B          = byte ptr -6Bh
.text:0000000000003530 var_6A          = byte ptr -6Ah
.text:0000000000003530 var_69          = byte ptr -69h
.text:0000000000003530 var_68          = qword ptr -68h
.text:0000000000003530 var_60          = qword ptr -60h
.text:0000000000003530 wc              = dword ptr -4Ch
.text:0000000000003530 var_48          = qword ptr -48h
.text:0000000000003530 var_40          = qword ptr -40h
.text:0000000000003530 arg_0           = qword ptr  8
.text:0000000000003530 arg_8           = qword ptr  10h
.text:0000000000003530 arg_10          = qword ptr  18h
.text:0000000000003530
.text:0000000000003530 ; __unwind {
.text:0000000000003530                 push    r15
.text:0000000000003532                 push    r14
.text:0000000000003534                 mov     r15d, r8d
.text:0000000000003537                 push    r13
.text:0000000000003539                 push    r12
.text:000000000000353B                 mov     r14, rdi
.text:000000000000353E                 push    rbp
.text:000000000000353F                 push    rbx
.text:0000000000003540                 mov     ebx, r9d
.text:0000000000003543                 mov     r13, rsi
.text:0000000000003546                 mov     rbp, rcx
.text:0000000000003549                 and     ebx, 2
.text:000000000000354C                 sub     rsp, 0B8h
.text:0000000000003553                 mov     rax, [rsp+0E8h+arg_0]
.text:000000000000355B                 mov     [rsp+0E8h+s], rdx
.text:0000000000003560                 mov     [rsp+0E8h+var_E0], r8d
.text:0000000000003565                 mov     [rsp+0E8h+var_70], r9d
.text:000000000000356A                 mov     [rsp+0E8h+var_C8], rax
.text:000000000000356F                 mov     rax, [rsp+0E8h+arg_8]
.text:0000000000003577                 mov     [rsp+0E8h+var_80], rax
.text:000000000000357C                 mov     rax, [rsp+0E8h+arg_10]
.text:0000000000003584                 mov     [rsp+0E8h+var_88], rax
.text:0000000000003589                 mov     rax, fs:28h
.text:0000000000003592                 mov     [rsp+0E8h+var_40], rax
.text:000000000000359A                 xor     eax, eax
.text:000000000000359C                 call    ___ctype_get_mb_cur_max
.text:00000000000035A1                 cmp     r15d, 0Ah       ; switch 11 cases
.text:00000000000035A5                 mov     [rsp+0E8h+var_90], rax
.text:00000000000035AA                 ja      def_35C1        ; jumptable 00000000000121F1 default case
.text:00000000000035B0                 lea     rcx, jpt_35C1
.text:00000000000035B7                 mov     edx, r15d
.text:00000000000035BA                 movsxd  rax, ds:(jpt_35C1 - 9400h)[rcx+rdx*4]
.text:00000000000035BE                 add     rax, rcx
.text:00000000000035C1                 jmp     rax             ; switch jump
.text:00000000000035C3 ; ---------------------------------------------------------------------------
.text:00000000000035C3
.text:00000000000035C3 loc_35C3:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000035C3                                         ; quotearg_buffer_restyled+C66↓j
.text:00000000000035C3                                         ; DATA XREF: ...
.text:00000000000035C3                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 1
.text:00000000000035C8                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000035CD                 xor     r12d, r12d
.text:00000000000035D0                 mov     [rsp+0E8h+var_98], 0
.text:00000000000035D9                 mov     [rsp+0E8h+var_D9], 1
.text:00000000000035DE                 mov     [rsp+0E8h+var_DB], 0
.text:00000000000035E3
.text:00000000000035E3 loc_35E3:                               ; CODE XREF: quotearg_buffer_restyled+E94↓j
.text:00000000000035E3                 lea     rax, asc_93A5   ; "'"
.text:00000000000035EA                 mov     [rsp+0E8h+n], 1
.text:00000000000035F3                 xor     r15d, r15d
.text:00000000000035F6                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000035FE                 mov     [rsp+0E8h+s2], rax
.text:0000000000003603
.text:0000000000003603 loc_3603:                               ; CODE XREF: quotearg_buffer_restyled+7F4↓j
.text:0000000000003603                                         ; quotearg_buffer_restyled+CB8↓j ...
.text:0000000000003603                 xor     r11d, r11d
.text:0000000000003606                 mov     rax, rbp
.text:0000000000003609                 mov     r8d, r12d
.text:000000000000360C                 mov     rbp, r11
.text:000000000000360F                 mov     r11, rax
.text:0000000000003612                 nop     word ptr [rax+rax+00h]
.text:0000000000003618
.text:0000000000003618 loc_3618:                               ; CODE XREF: quotearg_buffer_restyled+2B2↓j
.text:0000000000003618                                         ; quotearg_buffer_restyled+42C↓j
.text:0000000000003618                 cmp     r11, rbp
.text:000000000000361B                 setnz   r12b
.text:000000000000361F                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000003623                 jnz     short loc_3632
.text:0000000000003625                 mov     rax, [rsp+0E8h+s]
.text:000000000000362A                 cmp     byte ptr [rax+rbp], 0
.text:000000000000362E                 setnz   r12b
.text:0000000000003632
.text:0000000000003632 loc_3632:                               ; CODE XREF: quotearg_buffer_restyled+F3↑j
.text:0000000000003632                 test    r12b, r12b
.text:0000000000003635                 jz      loc_3C90
.text:000000000000363B                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003640                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000003645                 lea     r9, [rdi+rbp]
.text:0000000000003649                 setnz   al
.text:000000000000364C                 and     al, [rsp+0E8h+var_DB]
.text:0000000000003650                 mov     r10d, eax
.text:0000000000003653                 jz      loc_3700
.text:0000000000003659                 mov     rax, [rsp+0E8h+n]
.text:000000000000365E                 test    rax, rax
.text:0000000000003661                 jz      loc_3A90
.text:0000000000003667                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:000000000000366B                 lea     rbx, [rbp+rax+0]
.text:0000000000003670                 jnz     short loc_36A0
.text:0000000000003672                 cmp     rax, 1
.text:0000000000003676                 jbe     short loc_36A0
.text:0000000000003678                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:000000000000367D                 mov     byte ptr [rsp+0E8h+var_B8], r10b
.text:0000000000003682                 mov     [rsp+0E8h+ps], r9
.text:0000000000003687                 call    _strlen
.text:000000000000368C                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000003692                 movzx   r10d, byte ptr [rsp+0E8h+var_B8]
.text:0000000000003698                 mov     r11, rax
.text:000000000000369B                 mov     r9, [rsp+0E8h+ps]
.text:00000000000036A0
.text:00000000000036A0 loc_36A0:                               ; CODE XREF: quotearg_buffer_restyled+140↑j
.text:00000000000036A0                                         ; quotearg_buffer_restyled+146↑j
.text:00000000000036A0                 cmp     rbx, r11
.text:00000000000036A3                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:00000000000036A8                 ja      loc_3C60
.text:00000000000036AE                 mov     rdx, [rsp+0E8h+n] ; n
.text:00000000000036B3                 mov     rsi, [rsp+0E8h+s2] ; s2
.text:00000000000036B8                 mov     rdi, r9         ; s1
.text:00000000000036BB                 mov     [rsp+0E8h+var_A8], r11
.text:00000000000036C0                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:00000000000036C5                 mov     [rsp+0E8h+var_B8], r9
.text:00000000000036CA                 call    _memcmp
.text:00000000000036CF                 test    eax, eax
.text:00000000000036D1                 mov     r9, [rsp+0E8h+var_B8]
.text:00000000000036D6                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:00000000000036DC                 mov     r11, [rsp+0E8h+var_A8]
.text:00000000000036E1                 jnz     loc_3C60
.text:00000000000036E7                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000036EC                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:00000000000036F2                 jnz     loc_4675
.text:00000000000036F8                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000003700
.text:0000000000003700 loc_3700:                               ; CODE XREF: quotearg_buffer_restyled+123↑j
.text:0000000000003700                                         ; quotearg_buffer_restyled+733↓j
.text:0000000000003700                 movzx   ebx, byte ptr [r9]
.text:0000000000003704                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000003707                 ja      def_371E        ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:000000000000370D                 lea     rcx, jpt_371E
.text:0000000000003714                 movzx   edx, bl
.text:0000000000003717                 movsxd  rax, ds:(jpt_371E - 942Ch)[rcx+rdx*4]
.text:000000000000371B                 add     rax, rcx
.text:000000000000371E                 jmp     rax             ; switch jump
.text:0000000000003720 ; ---------------------------------------------------------------------------
.text:0000000000003720
.text:0000000000003720 loc_3720:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000003720                                         ; DATA XREF: .rodata:jpt_3AAA↓o
.text:0000000000003720                 xor     r10d, r10d      ; jumptable 00000000000126DA cases 123,125
.text:0000000000003723
.text:0000000000003723 loc_3723:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003723                                         ; DATA XREF: .rodata:jpt_371E↓o
.text:0000000000003723                 cmp     r11, 1          ; jumptable 000000000001234E cases 123,125
.text:0000000000003727                 setnz   al
.text:000000000000372A                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:000000000000372E                 jnz     short loc_373C
.text:0000000000003730                 mov     rax, [rsp+0E8h+s]
.text:0000000000003735                 cmp     byte ptr [rax+1], 0
.text:0000000000003739                 setnz   al
.text:000000000000373C
.text:000000000000373C loc_373C:                               ; CODE XREF: quotearg_buffer_restyled+1FE↑j
.text:000000000000373C                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003741                 setz    dl
.text:0000000000003744                 test    al, al
.text:0000000000003746                 jz      loc_3998
.text:000000000000374C
.text:000000000000374C loc_374C:                               ; CODE XREF: quotearg_buffer_restyled+46B↓j
.text:000000000000374C                 xor     r12d, r12d
.text:000000000000374F                 xor     eax, eax
.text:0000000000003751                 nop     dword ptr [rax+00000000h]
.text:0000000000003758
.text:0000000000003758 loc_3758:                               ; CODE XREF: quotearg_buffer_restyled+2E9↓j
.text:0000000000003758                                         ; quotearg_buffer_restyled+30C↓j ...
.text:0000000000003758                 cmp     [rsp+0E8h+var_DB], 1
.text:000000000000375D                 jnz     loc_3872
.text:0000000000003763                 test    dl, dl
.text:0000000000003765                 jnz     loc_3872
.text:000000000000376B
.text:000000000000376B loc_376B:                               ; CODE XREF: quotearg_buffer_restyled+347↓j
.text:000000000000376B                 mov     rsi, [rsp+0E8h+var_C8]
.text:0000000000003770                 test    rsi, rsi
.text:0000000000003773                 jz      short loc_3789
.text:0000000000003775                 mov     edx, ebx
.text:0000000000003777                 shr     dl, 5
.text:000000000000377A                 movzx   edx, dl
.text:000000000000377D                 mov     edx, [rsi+rdx*4]
.text:0000000000003780                 bt      edx, ebx
.text:0000000000003783                 jb      loc_38D3
.text:0000000000003789
.text:0000000000003789 loc_3789:                               ; CODE XREF: quotearg_buffer_restyled+243↑j
.text:0000000000003789                                         ; quotearg_buffer_restyled+34D↓j ...
.text:0000000000003789                 test    r10b, r10b
.text:000000000000378C                 jnz     loc_38D3
.text:0000000000003792                 xor     eax, 1
.text:0000000000003795                 add     rbp, 1
.text:0000000000003799                 and     eax, r8d
.text:000000000000379C
.text:000000000000379C loc_379C:                               ; CODE XREF: quotearg_buffer_restyled+75A↓j
.text:000000000000379C                                         ; quotearg_buffer_restyled+AE8↓j
.text:000000000000379C                 test    al, al
.text:000000000000379E                 jz      short loc_37C0
.text:00000000000037A0                 cmp     r13, r15
.text:00000000000037A3                 jbe     short loc_37AA
.text:00000000000037A5                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000037AA
.text:00000000000037AA loc_37AA:                               ; CODE XREF: quotearg_buffer_restyled+273↑j
.text:00000000000037AA                 lea     rax, [r15+1]
.text:00000000000037AE                 cmp     r13, rax
.text:00000000000037B1                 jbe     short loc_37B9
.text:00000000000037B3                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:00000000000037B9
.text:00000000000037B9 loc_37B9:                               ; CODE XREF: quotearg_buffer_restyled+281↑j
.text:00000000000037B9                 add     r15, 2
.text:00000000000037BD                 xor     r8d, r8d
.text:00000000000037C0
.text:00000000000037C0 loc_37C0:                               ; CODE XREF: quotearg_buffer_restyled+26E↑j
.text:00000000000037C0                                         ; quotearg_buffer_restyled+403↓j ...
.text:00000000000037C0                 cmp     r15, r13
.text:00000000000037C3                 jnb     short loc_37C9
.text:00000000000037C5                 mov     [r14+r15], bl
.text:00000000000037C9
.text:00000000000037C9 loc_37C9:                               ; CODE XREF: quotearg_buffer_restyled+293↑j
.text:00000000000037C9                 movzx   edi, [rsp+0E8h+var_DA]
.text:00000000000037CE                 add     r15, 1
.text:00000000000037D2                 mov     eax, 0
.text:00000000000037D7                 test    r12b, r12b
.text:00000000000037DA                 cmovz   edi, eax
.text:00000000000037DD                 mov     [rsp+0E8h+var_DA], dil
.text:00000000000037E2                 jmp     loc_3618
.text:00000000000037E2 ; ---------------------------------------------------------------------------
.text:00000000000037E7                 align 10h
.text:00000000000037F0
.text:00000000000037F0 loc_37F0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:00000000000037F0                                         ; DATA XREF: .rodata:jpt_3AAA↓o
.text:00000000000037F0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 63
.text:00000000000037F3
.text:00000000000037F3 loc_37F3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000037F3                                         ; DATA XREF: .rodata:jpt_371E↓o
.text:00000000000037F3                 mov     eax, [rsp+0E8h+var_E0] ; jumptable 000000000001234E case 63
.text:00000000000037F7                 cmp     eax, 2
.text:00000000000037FA                 jz      loc_3DB8
.text:0000000000003800                 cmp     eax, 5
.text:0000000000003803                 jz      loc_3D78
.text:0000000000003809                 cmp     eax, 2
.text:000000000000380C                 mov     ebx, 3Fh ; '?'
.text:0000000000003811                 setz    dl
.text:0000000000003814                 xor     r12d, r12d
.text:0000000000003817                 xor     eax, eax
.text:0000000000003819                 jmp     loc_3758
.text:0000000000003819 ; ---------------------------------------------------------------------------
.text:000000000000381E                 align 20h
.text:0000000000003820
.text:0000000000003820 loc_3820:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000003820                                         ; DATA XREF: .rodata:jpt_3AAA↓o
.text:0000000000003820                 xor     r10d, r10d      ; jumptable 00000000000126DA case 39
.text:0000000000003823
.text:0000000000003823 loc_3823:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003823                                         ; DATA XREF: .rodata:jpt_371E↓o
.text:0000000000003823                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 39
.text:0000000000003828                 jz      loc_3D30
.text:000000000000382E                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000003833                 xor     edx, edx
.text:0000000000003835                 xor     eax, eax
.text:0000000000003837                 mov     ebx, 27h ; '''
.text:000000000000383C                 jmp     loc_3758
.text:000000000000383C ; ---------------------------------------------------------------------------
.text:0000000000003841                 align 8
.text:0000000000003848
.text:0000000000003848 loc_3848:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003848                                         ; DATA XREF: .rodata:jpt_371E↓o
.text:0000000000003848                 mov     edx, 9          ; jumptable 000000000001234E case 9
.text:000000000000384D                 mov     ebx, 74h ; 't'
.text:0000000000003852
.text:0000000000003852 loc_3852:                               ; CODE XREF: quotearg_buffer_restyled+4BA↓j
.text:0000000000003852                                         ; quotearg_buffer_restyled+4EA↓j ...
.text:0000000000003852                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003857                 setz    al
.text:000000000000385A                 and     al, [rsp+0E8h+var_D9]
.text:000000000000385E                 jnz     loc_39AE
.text:0000000000003864
.text:0000000000003864 loc_3864:                               ; CODE XREF: quotearg_buffer_restyled+362↓j
.text:0000000000003864                                         ; quotearg_buffer_restyled+45A↓j ...
.text:0000000000003864                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000003869                 jnz     short loc_38D0
.text:000000000000386B
.text:000000000000386B loc_386B:                               ; CODE XREF: quotearg_buffer_restyled+422↓j
.text:000000000000386B                 mov     ebx, edx
.text:000000000000386D                 xor     r12d, r12d
.text:0000000000003870                 xor     eax, eax
.text:0000000000003872
.text:0000000000003872 loc_3872:                               ; CODE XREF: quotearg_buffer_restyled+22D↑j
.text:0000000000003872                                         ; quotearg_buffer_restyled+235↑j
.text:0000000000003872                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003877                 jnz     loc_376B
.text:000000000000387D                 jmp     loc_3789
.text:000000000000387D ; ---------------------------------------------------------------------------
.text:0000000000003882                 align 8
.text:0000000000003888
.text:0000000000003888 loc_3888:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003888                                         ; DATA XREF: .rodata:jpt_371E↓o
.text:0000000000003888                 mov     edx, 8          ; jumptable 000000000001234E case 8
.text:000000000000388D                 mov     ebx, 62h ; 'b'
.text:0000000000003892                 jmp     short loc_3864
.text:0000000000003892 ; ---------------------------------------------------------------------------
.text:0000000000003894                 align 8
.text:0000000000003898
.text:0000000000003898 loc_3898:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003898                                         ; DATA XREF: .rodata:jpt_371E↓o
.text:0000000000003898                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 92
.text:000000000000389D                 jz      loc_3C70
.text:00000000000038A3                 cmp     [rsp+0E8h+var_DB], 0
.text:00000000000038A8                 jz      loc_3AC0
.text:00000000000038AE
.text:00000000000038AE loc_38AE:                               ; CODE XREF: quotearg_buffer_restyled+588↓j
.text:00000000000038AE                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000038B3                 jz      loc_3AC0
.text:00000000000038B9                 cmp     [rsp+0E8h+n], 0
.text:00000000000038BF                 jnz     loc_3C7B
.text:00000000000038C5                 mov     ebx, 5Ch ; '\'
.text:00000000000038CA                 nop     word ptr [rax+rax+00h]
.text:00000000000038D0
.text:00000000000038D0 loc_38D0:                               ; CODE XREF: quotearg_buffer_restyled+339↑j
.text:00000000000038D0                                         ; quotearg_buffer_restyled+5D5↓j ...
.text:00000000000038D0                 xor     r12d, r12d
.text:00000000000038D3
.text:00000000000038D3 loc_38D3:                               ; CODE XREF: quotearg_buffer_restyled+253↑j
.text:00000000000038D3                                         ; quotearg_buffer_restyled+25C↑j
.text:00000000000038D3                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000038D8                 setz    dl
.text:00000000000038DB                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000038E0                 mov     eax, edx
.text:00000000000038E2                 jnz     loc_4138
.text:00000000000038E8                 mov     eax, r8d
.text:00000000000038EB                 xor     eax, 1
.text:00000000000038EE                 and     al, dl
.text:00000000000038F0                 jz      short loc_3921
.text:00000000000038F2                 cmp     r13, r15
.text:00000000000038F5                 jbe     short loc_38FC
.text:00000000000038F7                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000038FC
.text:00000000000038FC loc_38FC:                               ; CODE XREF: quotearg_buffer_restyled+3C5↑j
.text:00000000000038FC                 lea     rdx, [r15+1]
.text:0000000000003900                 cmp     r13, rdx
.text:0000000000003903                 jbe     short loc_390B
.text:0000000000003905                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:000000000000390B
.text:000000000000390B loc_390B:                               ; CODE XREF: quotearg_buffer_restyled+3D3↑j
.text:000000000000390B                 lea     rdx, [r15+2]
.text:000000000000390F                 cmp     r13, rdx
.text:0000000000003912                 jbe     short loc_391A
.text:0000000000003914                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000391A
.text:000000000000391A loc_391A:                               ; CODE XREF: quotearg_buffer_restyled+3E2↑j
.text:000000000000391A                 add     r15, 3
.text:000000000000391E                 mov     r8d, eax
.text:0000000000003921
.text:0000000000003921 loc_3921:                               ; CODE XREF: quotearg_buffer_restyled+3C0↑j
.text:0000000000003921                 cmp     r13, r15
.text:0000000000003924                 jbe     short loc_392B
.text:0000000000003926                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:000000000000392B
.text:000000000000392B loc_392B:                               ; CODE XREF: quotearg_buffer_restyled+3F4↑j
.text:000000000000392B                 add     r15, 1
.text:000000000000392F                 add     rbp, 1
.text:0000000000003933                 jmp     loc_37C0
.text:0000000000003933 ; ---------------------------------------------------------------------------
.text:0000000000003938                 align 20h
.text:0000000000003940
.text:0000000000003940 loc_3940:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003940                                         ; DATA XREF: .rodata:jpt_371E↓o
.text:0000000000003940                 cmp     [rsp+0E8h+var_DB], 0 ; jumptable 000000000001234E case 0
.text:0000000000003945                 jnz     loc_3B13
.text:000000000000394B                 xor     edx, edx
.text:000000000000394D                 test    byte ptr [rsp+0E8h+var_70], 1
.text:0000000000003952                 jz      loc_386B
.text:0000000000003958                 add     rbp, 1
.text:000000000000395C                 jmp     loc_3618
.text:000000000000395C ; ---------------------------------------------------------------------------
.text:0000000000003961                 align 8
.text:0000000000003968
.text:0000000000003968 loc_3968:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003968                                         ; DATA XREF: .rodata:jpt_371E↓o
.text:0000000000003968                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 37,43-58,65-90,93,95,97-122
.text:000000000000396D                 setz    dl
.text:0000000000003970                 xor     eax, eax
.text:0000000000003972                 jmp     loc_3758
.text:0000000000003972 ; ---------------------------------------------------------------------------
.text:0000000000003977                 align 20h
.text:0000000000003980
.text:0000000000003980 loc_3980:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003980                                         ; DATA XREF: .rodata:jpt_371E↓o
.text:0000000000003980                 mov     edx, 7          ; jumptable 000000000001234E case 7
.text:0000000000003985                 mov     ebx, 61h ; 'a'
.text:000000000000398A                 jmp     loc_3864
.text:000000000000398A ; ---------------------------------------------------------------------------
.text:000000000000398F                 align 10h
.text:0000000000003990
.text:0000000000003990 loc_3990:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003990                                         ; DATA XREF: .rodata:jpt_371E↓o
.text:0000000000003990                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 35,126
.text:0000000000003995                 setz    dl
.text:0000000000003998
.text:0000000000003998 loc_3998:                               ; CODE XREF: quotearg_buffer_restyled+216↑j
.text:0000000000003998                                         ; quotearg_buffer_restyled+6A3↓j
.text:0000000000003998                 test    rbp, rbp
.text:000000000000399B                 jnz     loc_374C
.text:00000000000039A1
.text:00000000000039A1 loc_39A1:                               ; CODE XREF: quotearg_buffer_restyled+49B↓j
.text:00000000000039A1                                         ; quotearg_buffer_restyled+4AD↓j ...
.text:00000000000039A1                 movzx   eax, [rsp+0E8h+var_D9]
.text:00000000000039A6                 and     al, dl
.text:00000000000039A8                 jz      loc_3758
.text:00000000000039AE
.text:00000000000039AE loc_39AE:                               ; CODE XREF: quotearg_buffer_restyled+32E↑j
.text:00000000000039AE                 mov     rbp, r11
.text:00000000000039B1                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000039B9                 jmp     loc_40B9
.text:00000000000039B9 ; ---------------------------------------------------------------------------
.text:00000000000039BE                 align 20h
.text:00000000000039C0
.text:00000000000039C0 loc_39C0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000039C0                                         ; DATA XREF: .rodata:jpt_371E↓o
.text:00000000000039C0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:00000000000039C5                 setz    dl
.text:00000000000039C8                 xor     r12d, r12d
.text:00000000000039CB                 jmp     short loc_39A1
.text:00000000000039CB ; ---------------------------------------------------------------------------
.text:00000000000039CD                 align 10h
.text:00000000000039D0
.text:00000000000039D0 loc_39D0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000039D0                                         ; DATA XREF: .rodata:jpt_371E↓o
.text:00000000000039D0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 32
.text:00000000000039D5                 mov     ebx, 20h ; ' '
.text:00000000000039DA                 setz    dl
.text:00000000000039DD                 jmp     short loc_39A1
.text:00000000000039DD ; ---------------------------------------------------------------------------
.text:00000000000039DF                 align 20h
.text:00000000000039E0
.text:00000000000039E0 loc_39E0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000039E0                                         ; DATA XREF: .rodata:jpt_371E↓o
.text:00000000000039E0                 mov     edx, 0Dh        ; jumptable 000000000001234E case 13
.text:00000000000039E5                 mov     ebx, 72h ; 'r'
.text:00000000000039EA                 jmp     loc_3852
.text:00000000000039EA ; ---------------------------------------------------------------------------
.text:00000000000039EF                 align 10h
.text:00000000000039F0
.text:00000000000039F0 loc_39F0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000039F0                                         ; DATA XREF: .rodata:jpt_371E↓o
.text:00000000000039F0                 mov     edx, 0Ch        ; jumptable 000000000001234E case 12
.text:00000000000039F5                 mov     ebx, 66h ; 'f'
.text:00000000000039FA                 jmp     loc_3864
.text:00000000000039FA ; ---------------------------------------------------------------------------
.text:00000000000039FF                 align 20h
.text:0000000000003A00
.text:0000000000003A00 loc_3A00:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003A00                                         ; DATA XREF: .rodata:jpt_371E↓o
.text:0000000000003A00                 mov     edx, 0Bh        ; jumptable 000000000001234E case 11
.text:0000000000003A05                 mov     ebx, 76h ; 'v'
.text:0000000000003A0A                 jmp     loc_3864
.text:0000000000003A0A ; ---------------------------------------------------------------------------
.text:0000000000003A0F                 align 10h
.text:0000000000003A10
.text:0000000000003A10 loc_3A10:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003A10                                         ; DATA XREF: .rodata:jpt_371E↓o
.text:0000000000003A10                 mov     edx, 0Ah        ; jumptable 000000000001234E case 10
.text:0000000000003A15                 mov     ebx, 6Eh ; 'n'
.text:0000000000003A1A                 jmp     loc_3852
.text:0000000000003A1A ; ---------------------------------------------------------------------------
.text:0000000000003A1F                 align 20h
.text:0000000000003A20
.text:0000000000003A20 def_3AAA:                               ; CODE XREF: quotearg_buffer_restyled+567↓j
.text:0000000000003A20                                         ; quotearg_buffer_restyled+57A↓j
.text:0000000000003A20                                         ; DATA XREF: ...
.text:0000000000003A20                 xor     r10d, r10d      ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000003A23                 nop     dword ptr [rax+rax+00h]
.text:0000000000003A28
.text:0000000000003A28 def_371E:                               ; CODE XREF: quotearg_buffer_restyled+1D7↑j
.text:0000000000003A28                                         ; quotearg_buffer_restyled+1EE↑j
.text:0000000000003A28                                         ; DATA XREF: ...
.text:0000000000003A28                 cmp     [rsp+0E8h+var_90], 1 ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:0000000000003A2E                 jnz     loc_3DD8
.text:0000000000003A34                 mov     [rsp+0E8h+var_B0], r11
.text:0000000000003A39                 mov     byte ptr [rsp+0E8h+var_B8], r8b
.text:0000000000003A3E                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000003A43                 call    ___ctype_b_loc
.text:0000000000003A48                 mov     rcx, [rax]
.text:0000000000003A4B                 movzx   edx, bl
.text:0000000000003A4E                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000003A54                 movzx   r8d, byte ptr [rsp+0E8h+var_B8]
.text:0000000000003A5A                 mov     r11, [rsp+0E8h+var_B0]
.text:0000000000003A5F                 mov     edi, 1
.text:0000000000003A64                 movzx   eax, word ptr [rcx+rdx*2]
.text:0000000000003A68                 and     ax, 4000h
.text:0000000000003A6C                 setnz   r12b
.text:0000000000003A70                 setz    al
.text:0000000000003A73                 and     al, [rsp+0E8h+var_DB]
.text:0000000000003A77
.text:0000000000003A77 loc_3A77:                               ; CODE XREF: quotearg_buffer_restyled+FED↓j
.text:0000000000003A77                 test    al, al
.text:0000000000003A79                 jnz     loc_4411
.text:0000000000003A7F                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003A84                 setz    dl
.text:0000000000003A87                 jmp     loc_3758
.text:0000000000003A87 ; ---------------------------------------------------------------------------
.text:0000000000003A8C                 align 10h
.text:0000000000003A90
.text:0000000000003A90 loc_3A90:                               ; CODE XREF: quotearg_buffer_restyled+131↑j
.text:0000000000003A90                 movzx   ebx, byte ptr [r9]
.text:0000000000003A94                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000003A97                 ja      short def_3AAA  ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000003A99                 lea     rcx, jpt_3AAA
.text:0000000000003AA0                 movzx   edx, bl
.text:0000000000003AA3                 movsxd  rax, ds:(jpt_3AAA - 9628h)[rcx+rdx*4]
.text:0000000000003AA7                 add     rax, rcx
.text:0000000000003AAA                 jmp     rax             ; switch jump
.text:0000000000003AAA ; ---------------------------------------------------------------------------
.text:0000000000003AAC                 align 10h
.text:0000000000003AB0
.text:0000000000003AB0 loc_3AB0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003AB0                                         ; DATA XREF: .rodata:jpt_3AAA↓o
.text:0000000000003AB0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 92
.text:0000000000003AB3                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000003AB8                 jnz     loc_38AE
.text:0000000000003ABE                 xchg    ax, ax
.text:0000000000003AC0
.text:0000000000003AC0 loc_3AC0:                               ; CODE XREF: quotearg_buffer_restyled+378↑j
.text:0000000000003AC0                                         ; quotearg_buffer_restyled+383↑j
.text:0000000000003AC0                 mov     edx, 5Ch ; '\'
.text:0000000000003AC5                 mov     ebx, 5Ch ; '\'
.text:0000000000003ACA                 jmp     loc_3864
.text:0000000000003ACA ; ---------------------------------------------------------------------------
.text:0000000000003ACF                 align 10h
.text:0000000000003AD0
.text:0000000000003AD0 loc_3AD0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003AD0                                         ; DATA XREF: .rodata:jpt_3AAA↓o
.text:0000000000003AD0                 mov     edx, 0Ch        ; jumptable 00000000000126DA case 12
.text:0000000000003AD5                 xor     r10d, r10d
.text:0000000000003AD8                 mov     ebx, 66h ; 'f'
.text:0000000000003ADD                 jmp     loc_3864
.text:0000000000003ADD ; ---------------------------------------------------------------------------
.text:0000000000003AE2                 align 8
.text:0000000000003AE8
.text:0000000000003AE8 loc_3AE8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003AE8                                         ; DATA XREF: .rodata:jpt_3AAA↓o
.text:0000000000003AE8                 mov     edx, 0Ah        ; jumptable 00000000000126DA case 10
.text:0000000000003AED                 xor     r10d, r10d
.text:0000000000003AF0                 mov     ebx, 6Eh ; 'n'
.text:0000000000003AF5                 jmp     loc_3852
.text:0000000000003AF5 ; ---------------------------------------------------------------------------
.text:0000000000003AFA                 align 20h
.text:0000000000003B00
.text:0000000000003B00 loc_3B00:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003B00                                         ; DATA XREF: .rodata:jpt_3AAA↓o
.text:0000000000003B00                 mov     ebx, 61h ; 'a'  ; jumptable 00000000000126DA case 7
.text:0000000000003B05                 jmp     loc_38D0
.text:0000000000003B05 ; ---------------------------------------------------------------------------
.text:0000000000003B0A                 align 10h
.text:0000000000003B10
.text:0000000000003B10 loc_3B10:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003B10                                         ; DATA XREF: .rodata:jpt_3AAA↓o
.text:0000000000003B10                 xor     r10d, r10d      ; jumptable 00000000000126DA case 0
.text:0000000000003B13
.text:0000000000003B13 loc_3B13:                               ; CODE XREF: quotearg_buffer_restyled+415↑j
.text:0000000000003B13                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003B18                 setz    dl
.text:0000000000003B1B                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003B20                 jnz     loc_46BA
.text:0000000000003B26                 mov     eax, r8d
.text:0000000000003B29                 mov     rcx, r15
.text:0000000000003B2C                 xor     eax, 1
.text:0000000000003B2F                 and     al, dl
.text:0000000000003B31                 jz      short loc_3B60
.text:0000000000003B33                 cmp     r13, r15
.text:0000000000003B36                 jbe     short loc_3B3D
.text:0000000000003B38                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000003B3D
.text:0000000000003B3D loc_3B3D:                               ; CODE XREF: quotearg_buffer_restyled+606↑j
.text:0000000000003B3D                 lea     rcx, [r15+1]
.text:0000000000003B41                 cmp     r13, rcx
.text:0000000000003B44                 jbe     short loc_3B4C
.text:0000000000003B46                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000003B4C
.text:0000000000003B4C loc_3B4C:                               ; CODE XREF: quotearg_buffer_restyled+614↑j
.text:0000000000003B4C                 lea     rcx, [r15+2]
.text:0000000000003B50                 cmp     r13, rcx
.text:0000000000003B53                 ja      loc_4189
.text:0000000000003B59
.text:0000000000003B59 loc_3B59:                               ; CODE XREF: quotearg_buffer_restyled+C5F↓j
.text:0000000000003B59                 lea     rcx, [r15+3]
.text:0000000000003B5D                 mov     r8d, eax
.text:0000000000003B60
.text:0000000000003B60 loc_3B60:                               ; CODE XREF: quotearg_buffer_restyled+601↑j
.text:0000000000003B60                 cmp     r13, rcx
.text:0000000000003B63                 jbe     short loc_3B6A
.text:0000000000003B65                 mov     byte ptr [r14+rcx], 5Ch ; '\'
.text:0000000000003B6A
.text:0000000000003B6A loc_3B6A:                               ; CODE XREF: quotearg_buffer_restyled+633↑j
.text:0000000000003B6A                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003B6F                 lea     r15, [rcx+1]
.text:0000000000003B73                 jz      loc_4179
.text:0000000000003B79                 lea     rax, [rbp+1]
.text:0000000000003B7D                 cmp     rax, r11
.text:0000000000003B80                 jnb     short loc_3B9B
.text:0000000000003B82                 mov     rax, [rsp+0E8h+s]
.text:0000000000003B87                 movzx   eax, byte ptr [rax+rbp+1]
.text:0000000000003B8C                 mov     byte ptr [rsp+0E8h+ps], al
.text:0000000000003B90                 sub     eax, 30h ; '0'
.text:0000000000003B93                 cmp     al, 9
.text:0000000000003B95                 jbe     loc_43C9
.text:0000000000003B9B
.text:0000000000003B9B loc_3B9B:                               ; CODE XREF: quotearg_buffer_restyled+650↑j
.text:0000000000003B9B                 mov     eax, r12d
.text:0000000000003B9E                 mov     ebx, 30h ; '0'
.text:0000000000003BA3                 xor     r12d, r12d
.text:0000000000003BA6                 jmp     loc_3758
.text:0000000000003BA6 ; ---------------------------------------------------------------------------
.text:0000000000003BAB                 align 10h
.text:0000000000003BB0
.text:0000000000003BB0 loc_3BB0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003BB0                                         ; DATA XREF: .rodata:jpt_3AAA↓o
.text:0000000000003BB0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 37,43-58,65-90,93,95,97-122
.text:0000000000003BB5                 mov     r12d, r10d
.text:0000000000003BB8                 setz    dl
.text:0000000000003BBB                 xor     r10d, r10d
.text:0000000000003BBE                 xor     eax, eax
.text:0000000000003BC0                 jmp     loc_3758
.text:0000000000003BC0 ; ---------------------------------------------------------------------------
.text:0000000000003BC5                 align 8
.text:0000000000003BC8
.text:0000000000003BC8 loc_3BC8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003BC8                                         ; DATA XREF: .rodata:jpt_3AAA↓o
.text:0000000000003BC8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 35,126
.text:0000000000003BCD                 setz    dl
.text:0000000000003BD0                 xor     r10d, r10d
.text:0000000000003BD3                 jmp     loc_3998
.text:0000000000003BD3 ; ---------------------------------------------------------------------------
.text:0000000000003BD8                 align 20h
.text:0000000000003BE0
.text:0000000000003BE0 loc_3BE0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003BE0                                         ; DATA XREF: .rodata:jpt_3AAA↓o
.text:0000000000003BE0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000003BE5                 setz    dl
.text:0000000000003BE8                 xor     r10d, r10d
.text:0000000000003BEB                 xor     r12d, r12d
.text:0000000000003BEE                 jmp     loc_39A1
.text:0000000000003BEE ; ---------------------------------------------------------------------------
.text:0000000000003BF3                 align 8
.text:0000000000003BF8
.text:0000000000003BF8 loc_3BF8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003BF8                                         ; DATA XREF: .rodata:jpt_3AAA↓o
.text:0000000000003BF8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA case 32
.text:0000000000003BFD                 mov     r12d, r10d
.text:0000000000003C00                 mov     ebx, 20h ; ' '
.text:0000000000003C05                 setz    dl
.text:0000000000003C08                 xor     r10d, r10d
.text:0000000000003C0B                 jmp     loc_39A1
.text:0000000000003C10 ; ---------------------------------------------------------------------------
.text:0000000000003C10
.text:0000000000003C10 loc_3C10:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003C10                                         ; DATA XREF: .rodata:jpt_3AAA↓o
.text:0000000000003C10                 mov     edx, 0Dh        ; jumptable 00000000000126DA case 13
.text:0000000000003C15                 xor     r10d, r10d
.text:0000000000003C18                 mov     ebx, 72h ; 'r'
.text:0000000000003C1D                 jmp     loc_3852
.text:0000000000003C1D ; ---------------------------------------------------------------------------
.text:0000000000003C22                 align 8
.text:0000000000003C28
.text:0000000000003C28 loc_3C28:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003C28                                         ; DATA XREF: .rodata:jpt_3AAA↓o
.text:0000000000003C28                 mov     ebx, 76h ; 'v'  ; jumptable 00000000000126DA case 11
.text:0000000000003C2D                 jmp     loc_38D0
.text:0000000000003C2D ; ---------------------------------------------------------------------------
.text:0000000000003C32                 align 8
.text:0000000000003C38
.text:0000000000003C38 loc_3C38:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003C38                                         ; DATA XREF: .rodata:jpt_3AAA↓o
.text:0000000000003C38                 mov     edx, 9          ; jumptable 00000000000126DA case 9
.text:0000000000003C3D                 xor     r10d, r10d
.text:0000000000003C40                 mov     ebx, 74h ; 't'
.text:0000000000003C45                 jmp     loc_3852
.text:0000000000003C45 ; ---------------------------------------------------------------------------
.text:0000000000003C4A                 align 10h
.text:0000000000003C50
.text:0000000000003C50 loc_3C50:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003C50                                         ; DATA XREF: .rodata:jpt_3AAA↓o
.text:0000000000003C50                 mov     ebx, 62h ; 'b'  ; jumptable 00000000000126DA case 8
.text:0000000000003C55                 jmp     loc_38D0
.text:0000000000003C55 ; ---------------------------------------------------------------------------
.text:0000000000003C5A                 align 20h
.text:0000000000003C60
.text:0000000000003C60 loc_3C60:                               ; CODE XREF: quotearg_buffer_restyled+178↑j
.text:0000000000003C60                                         ; quotearg_buffer_restyled+1B1↑j
.text:0000000000003C60                 xor     r10d, r10d
.text:0000000000003C63                 jmp     loc_3700
.text:0000000000003C63 ; ---------------------------------------------------------------------------
.text:0000000000003C68                 align 10h
.text:0000000000003C70
.text:0000000000003C70 loc_3C70:                               ; CODE XREF: quotearg_buffer_restyled+36D↑j
.text:0000000000003C70                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003C75                 jnz     loc_45E0
.text:0000000000003C7B
.text:0000000000003C7B loc_3C7B:                               ; CODE XREF: quotearg_buffer_restyled+38F↑j
.text:0000000000003C7B                 add     rbp, 1
.text:0000000000003C7F                 mov     eax, r8d
.text:0000000000003C82                 xor     r12d, r12d
.text:0000000000003C85                 mov     ebx, 5Ch ; '\'
.text:0000000000003C8A                 jmp     loc_379C
.text:0000000000003C8A ; ---------------------------------------------------------------------------
.text:0000000000003C8F                 align 10h
.text:0000000000003C90
.text:0000000000003C90 loc_3C90:                               ; CODE XREF: quotearg_buffer_restyled+105↑j
.text:0000000000003C90                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003C95                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000003C9A                 mov     r12d, r8d
.text:0000000000003C9D                 mov     rbp, r11
.text:0000000000003CA0                 setz    dl
.text:0000000000003CA3                 mov     eax, ebx
.text:0000000000003CA5                 test    r15, r15
.text:0000000000003CA8                 setz    cl
.text:0000000000003CAB                 and     eax, edx
.text:0000000000003CAD                 and     al, cl
.text:0000000000003CAF                 jnz     loc_4716
.text:0000000000003CB5                 mov     eax, ebx
.text:0000000000003CB7                 xor     eax, 1
.text:0000000000003CBA                 and     dl, al
.text:0000000000003CBC                 jz      loc_462C
.text:0000000000003CC2                 cmp     [rsp+0E8h+var_6C], 0
.text:0000000000003CC7                 jz      loc_462A
.text:0000000000003CCD                 cmp     [rsp+0E8h+var_DA], 0
.text:0000000000003CD2                 jnz     loc_46CD
.text:0000000000003CD8                 test    r13, r13
.text:0000000000003CDB                 setz    al
.text:0000000000003CDE                 cmp     [rsp+0E8h+var_98], 0
.text:0000000000003CE4                 setnz   dl
.text:0000000000003CE7                 and     al, dl
.text:0000000000003CE9                 jz      loc_470C
.text:0000000000003CEF                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000003CF4
.text:0000000000003CF4 loc_3CF4:                               ; CODE XREF: quotearg_buffer_restyled+121D↓j
.text:0000000000003CF4                 lea     rbx, asc_93A5   ; "'"
.text:0000000000003CFB                 mov     byte ptr [r14], 27h ; '''
.text:0000000000003CFF                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003D07                 mov     r15d, 1
.text:0000000000003D0D                 mov     [rsp+0E8h+n], 1
.text:0000000000003D16                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000003D1B                 mov     [rsp+0E8h+s2], rbx
.text:0000000000003D20                 mov     [rsp+0E8h+var_6C], al
.text:0000000000003D24                 jmp     loc_3603
.text:0000000000003D24 ; ---------------------------------------------------------------------------
.text:0000000000003D29                 align 10h
.text:0000000000003D30
.text:0000000000003D30 loc_3D30:                               ; CODE XREF: quotearg_buffer_restyled+2F8↑j
.text:0000000000003D30                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003D35                 jnz     loc_45E0
.text:0000000000003D3B                 test    r13, r13
.text:0000000000003D3E                 jz      loc_4140
.text:0000000000003D44                 xor     edx, edx
.text:0000000000003D46                 cmp     [rsp+0E8h+var_98], 0
.text:0000000000003D4C                 jnz     loc_4140
.text:0000000000003D52
.text:0000000000003D52 loc_3D52:                               ; CODE XREF: quotearg_buffer_restyled+C44↓j
.text:0000000000003D52                                         ; quotearg_buffer_restyled+122A↓j
.text:0000000000003D52                 mov     [rsp+0E8h+var_98], r13
.text:0000000000003D57                 add     r15, 3
.text:0000000000003D5B                 xor     eax, eax
.text:0000000000003D5D                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000003D62                 xor     r8d, r8d
.text:0000000000003D65                 mov     r13, rdx
.text:0000000000003D68                 mov     ebx, 27h ; '''
.text:0000000000003D6D                 jmp     loc_3789
.text:0000000000003D6D ; ---------------------------------------------------------------------------
.text:0000000000003D72                 align 8
.text:0000000000003D78
.text:0000000000003D78 loc_3D78:                               ; CODE XREF: quotearg_buffer_restyled+2D3↑j
.text:0000000000003D78                 test    byte ptr [rsp+0E8h+var_70], 4
.text:0000000000003D7D                 jz      short loc_3DA0
.text:0000000000003D7F                 lea     rcx, [rbp+2]
.text:0000000000003D83                 cmp     rcx, r11
.text:0000000000003D86                 jnb     short loc_3DA0
.text:0000000000003D88                 mov     rax, [rsp+0E8h+s]
.text:0000000000003D8D                 cmp     byte ptr [rax+rbp+1], 3Fh ; '?'
.text:0000000000003D92                 jz      loc_4522
.text:0000000000003D98                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000003DA0
.text:0000000000003DA0 loc_3DA0:                               ; CODE XREF: quotearg_buffer_restyled+84D↑j
.text:0000000000003DA0                                         ; quotearg_buffer_restyled+856↑j ...
.text:0000000000003DA0                 xor     edx, edx
.text:0000000000003DA2                 xor     r12d, r12d
.text:0000000000003DA5                 xor     eax, eax
.text:0000000000003DA7                 mov     ebx, 3Fh ; '?'
.text:0000000000003DAC                 jmp     loc_3758
.text:0000000000003DAC ; ---------------------------------------------------------------------------
.text:0000000000003DB1                 align 8
.text:0000000000003DB8
.text:0000000000003DB8 loc_3DB8:                               ; CODE XREF: quotearg_buffer_restyled+2CA↑j
.text:0000000000003DB8                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003DBD                 jnz     loc_45E0
.text:0000000000003DC3                 xor     r12d, r12d
.text:0000000000003DC6                 xor     eax, eax
.text:0000000000003DC8                 mov     ebx, 3Fh ; '?'
.text:0000000000003DCD                 jmp     loc_3789
.text:0000000000003DCD ; ---------------------------------------------------------------------------
.text:0000000000003DD2                 align 8
.text:0000000000003DD8
.text:0000000000003DD8 loc_3DD8:                               ; CODE XREF: quotearg_buffer_restyled+4FE↑j
.text:0000000000003DD8                 lea     rax, [rsp+0E8h+var_48]
.text:0000000000003DE0                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000003DE4                 mov     [rsp+0E8h+var_48], 0
.text:0000000000003DF0                 mov     [rsp+0E8h+ps], rax
.text:0000000000003DF5                 jnz     short loc_3E24
.text:0000000000003DF7                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000003DFC                 mov     byte ptr [rsp+0E8h+var_A8], r8b
.text:0000000000003E01                 mov     byte ptr [rsp+0E8h+var_B0], r10b
.text:0000000000003E06                 mov     [rsp+0E8h+var_B8], r9
.text:0000000000003E0B                 call    _strlen
.text:0000000000003E10                 movzx   r8d, byte ptr [rsp+0E8h+var_A8]
.text:0000000000003E16                 movzx   r10d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000003E1C                 mov     r11, rax
.text:0000000000003E1F                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000003E24
.text:0000000000003E24 loc_3E24:                               ; CODE XREF: quotearg_buffer_restyled+8C5↑j
.text:0000000000003E24                 lea     rax, [rsp+0E8h+wc]
.text:0000000000003E2C                 xor     ecx, ecx
.text:0000000000003E2E                 mov     [rsp+0E8h+var_6A], bl
.text:0000000000003E32                 mov     [rsp+0E8h+var_6B], r8b
.text:0000000000003E37                 mov     rbx, rcx
.text:0000000000003E3A                 mov     [rsp+0E8h+var_60], r9
.text:0000000000003E42                 mov     [rsp+0E8h+var_B0], rax
.text:0000000000003E47                 mov     [rsp+0E8h+var_69], r10b
.text:0000000000003E4C                 mov     [rsp+0E8h+var_68], r15
.text:0000000000003E54                 mov     [rsp+0E8h+var_A8], r14
.text:0000000000003E59                 mov     [rsp+0E8h+var_78], r13
.text:0000000000003E5E                 mov     [rsp+0E8h+var_B8], r11
.text:0000000000003E63
.text:0000000000003E63 loc_3E63:                               ; CODE XREF: quotearg_buffer_restyled+9AF↓j
.text:0000000000003E63                 mov     rax, [rsp+0E8h+s]
.text:0000000000003E68                 lea     r14, [rbp+rbx+0]
.text:0000000000003E6D                 mov     rdx, [rsp+0E8h+var_B8]
.text:0000000000003E72                 mov     rcx, [rsp+0E8h+ps]
.text:0000000000003E77                 mov     rdi, [rsp+0E8h+var_B0]
.text:0000000000003E7C                 lea     r13, [rax+r14]
.text:0000000000003E80                 sub     rdx, r14
.text:0000000000003E83                 mov     rsi, r13
.text:0000000000003E86                 call    rpl_mbrtowc
.text:0000000000003E8B                 test    rax, rax
.text:0000000000003E8E                 mov     r15, rax
.text:0000000000003E91                 jz      short loc_3EE1
.text:0000000000003E93                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000003E97                 jz      loc_44B5
.text:0000000000003E9D                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000003EA1                 jz      loc_4441
.text:0000000000003EA7                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003EAC                 setz    al
.text:0000000000003EAF                 and     al, [rsp+0E8h+var_D9]
.text:0000000000003EB3                 jnz     loc_4050
.text:0000000000003EB9
.text:0000000000003EB9 loc_3EB9:                               ; CODE XREF: quotearg_buffer_restyled+B24↓j
.text:0000000000003EB9                                         ; quotearg_buffer_restyled+B47↓j
.text:0000000000003EB9                 mov     edi, [rsp+0E8h+wc] ; wc
.text:0000000000003EC0                 call    _iswprint
.text:0000000000003EC5                 mov     rdi, [rsp+0E8h+ps] ; ps
.text:0000000000003ECA                 test    eax, eax
.text:0000000000003ECC                 mov     eax, 0
.text:0000000000003ED1                 cmovz   r12d, eax
.text:0000000000003ED5                 add     rbx, r15
.text:0000000000003ED8                 call    _mbsinit
.text:0000000000003EDD                 test    eax, eax
.text:0000000000003EDF                 jz      short loc_3E63
.text:0000000000003EE1
.text:0000000000003EE1 loc_3EE1:                               ; CODE XREF: quotearg_buffer_restyled+961↑j
.text:0000000000003EE1                 mov     edx, r12d
.text:0000000000003EE4                 mov     rdi, rbx
.text:0000000000003EE7                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000003EED                 xor     edx, 1
.text:0000000000003EF0                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000003EF5                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000003EFB                 and     dl, [rsp+0E8h+var_DB]
.text:0000000000003EFF                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000003F07                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000003F0C                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000003F11                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000003F16
.text:0000000000003F16 loc_3F16:                               ; CODE XREF: quotearg_buffer_restyled+F80↓j
.text:0000000000003F16                                         ; quotearg_buffer_restyled+FB8↓j
.text:0000000000003F16                 cmp     rdi, 1
.text:0000000000003F1A                 jbe     loc_451B
.text:0000000000003F20
.text:0000000000003F20 loc_3F20:                               ; CODE XREF: quotearg_buffer_restyled+EE9↓j
.text:0000000000003F20                 mov     rcx, rdi
.text:0000000000003F23                 xor     esi, esi
.text:0000000000003F25                 movzx   r9d, [rsp+0E8h+var_D9]
.text:0000000000003F2B                 add     rcx, rbp
.text:0000000000003F2E                 mov     rdi, [rsp+0E8h+s]
.text:0000000000003F33                 jmp     loc_3FEE
.text:0000000000003F33 ; ---------------------------------------------------------------------------
.text:0000000000003F38                 align 20h
.text:0000000000003F40
.text:0000000000003F40 loc_3F40:                               ; CODE XREF: quotearg_buffer_restyled+AC0↓j
.text:0000000000003F40                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003F45                 setz    al
.text:0000000000003F48                 test    r9b, r9b
.text:0000000000003F4B                 jnz     loc_4400
.text:0000000000003F51                 mov     esi, r8d
.text:0000000000003F54                 xor     esi, 1
.text:0000000000003F57                 and     al, sil
.text:0000000000003F5A                 jz      short loc_3F8B
.text:0000000000003F5C                 cmp     r13, r15
.text:0000000000003F5F                 jbe     short loc_3F66
.text:0000000000003F61                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000003F66
.text:0000000000003F66 loc_3F66:                               ; CODE XREF: quotearg_buffer_restyled+A2F↑j
.text:0000000000003F66                 lea     rsi, [r15+1]
.text:0000000000003F6A                 cmp     r13, rsi
.text:0000000000003F6D                 jbe     short loc_3F75
.text:0000000000003F6F                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000003F75
.text:0000000000003F75 loc_3F75:                               ; CODE XREF: quotearg_buffer_restyled+A3D↑j
.text:0000000000003F75                 lea     rsi, [r15+2]
.text:0000000000003F79                 cmp     r13, rsi
.text:0000000000003F7C                 jbe     short loc_3F84
.text:0000000000003F7E                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000003F84
.text:0000000000003F84 loc_3F84:                               ; CODE XREF: quotearg_buffer_restyled+A4C↑j
.text:0000000000003F84                 add     r15, 3
.text:0000000000003F88                 mov     r8d, eax
.text:0000000000003F8B
.text:0000000000003F8B loc_3F8B:                               ; CODE XREF: quotearg_buffer_restyled+A2A↑j
.text:0000000000003F8B                 cmp     r13, r15
.text:0000000000003F8E                 jbe     short loc_3F95
.text:0000000000003F90                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000003F95
.text:0000000000003F95 loc_3F95:                               ; CODE XREF: quotearg_buffer_restyled+A5E↑j
.text:0000000000003F95                 lea     rax, [r15+1]
.text:0000000000003F99                 cmp     r13, rax
.text:0000000000003F9C                 jbe     short loc_3FAB
.text:0000000000003F9E                 mov     eax, ebx
.text:0000000000003FA0                 shr     al, 6
.text:0000000000003FA3                 add     eax, 30h ; '0'
.text:0000000000003FA6                 mov     [r14+r15+1], al
.text:0000000000003FAB
.text:0000000000003FAB loc_3FAB:                               ; CODE XREF: quotearg_buffer_restyled+A6C↑j
.text:0000000000003FAB                 lea     rax, [r15+2]
.text:0000000000003FAF                 cmp     r13, rax
.text:0000000000003FB2                 jbe     short loc_3FC4
.text:0000000000003FB4                 mov     eax, ebx
.text:0000000000003FB6                 shr     al, 3
.text:0000000000003FB9                 and     eax, 7
.text:0000000000003FBC                 add     eax, 30h ; '0'
.text:0000000000003FBF                 mov     [r14+r15+2], al
.text:0000000000003FC4
.text:0000000000003FC4 loc_3FC4:                               ; CODE XREF: quotearg_buffer_restyled+A82↑j
.text:0000000000003FC4                 and     ebx, 7
.text:0000000000003FC7                 add     rbp, 1
.text:0000000000003FCB                 add     r15, 3
.text:0000000000003FCF                 add     ebx, 30h ; '0'
.text:0000000000003FD2                 cmp     rbp, rcx
.text:0000000000003FD5                 jnb     loc_37C0
.text:0000000000003FDB                 mov     esi, edx
.text:0000000000003FDD
.text:0000000000003FDD loc_3FDD:                               ; CODE XREF: quotearg_buffer_restyled+B19↓j
.text:0000000000003FDD                                         ; quotearg_buffer_restyled+EF1↓j
.text:0000000000003FDD                 cmp     r13, r15
.text:0000000000003FE0                 jbe     short loc_3FE6
.text:0000000000003FE2                 mov     [r14+r15], bl
.text:0000000000003FE6
.text:0000000000003FE6 loc_3FE6:                               ; CODE XREF: quotearg_buffer_restyled+AB0↑j
.text:0000000000003FE6                 movzx   ebx, byte ptr [rdi+rbp]
.text:0000000000003FEA                 add     r15, 1
.text:0000000000003FEE
.text:0000000000003FEE loc_3FEE:                               ; CODE XREF: quotearg_buffer_restyled+A03↑j
.text:0000000000003FEE                 test    dl, dl
.text:0000000000003FF0                 jnz     loc_3F40
.text:0000000000003FF6                 mov     eax, esi
.text:0000000000003FF8                 xor     eax, 1
.text:0000000000003FFB                 and     eax, r8d
.text:0000000000003FFE                 test    r10b, r10b
.text:0000000000004001                 jz      short loc_4011
.text:0000000000004003                 cmp     r13, r15
.text:0000000000004006                 jbe     short loc_400D
.text:0000000000004008                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:000000000000400D
.text:000000000000400D loc_400D:                               ; CODE XREF: quotearg_buffer_restyled+AD6↑j
.text:000000000000400D                 add     r15, 1
.text:0000000000004011
.text:0000000000004011 loc_4011:                               ; CODE XREF: quotearg_buffer_restyled+AD1↑j
.text:0000000000004011                 add     rbp, 1
.text:0000000000004015                 cmp     rbp, rcx
.text:0000000000004018                 jnb     loc_379C
.text:000000000000401E                 test    al, al
.text:0000000000004020                 jz      loc_441E
.text:0000000000004026                 cmp     r13, r15
.text:0000000000004029                 jbe     short loc_4030
.text:000000000000402B                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000004030
.text:0000000000004030 loc_4030:                               ; CODE XREF: quotearg_buffer_restyled+AF9↑j
.text:0000000000004030                 lea     rax, [r15+1]
.text:0000000000004034                 cmp     r13, rax
.text:0000000000004037                 jbe     short loc_403F
.text:0000000000004039                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:000000000000403F
.text:000000000000403F loc_403F:                               ; CODE XREF: quotearg_buffer_restyled+B07↑j
.text:000000000000403F                 add     r15, 2
.text:0000000000004043                 xor     r10d, r10d
.text:0000000000004046                 xor     r8d, r8d
.text:0000000000004049                 jmp     short loc_3FDD
.text:0000000000004049 ; ---------------------------------------------------------------------------
.text:000000000000404B                 align 10h
.text:0000000000004050
.text:0000000000004050 loc_4050:                               ; CODE XREF: quotearg_buffer_restyled+983↑j
.text:0000000000004050                 cmp     r15, 1
.text:0000000000004054                 jz      loc_3EB9
.text:000000000000405A                 mov     rdi, [rsp+0E8h+s]
.text:000000000000405F                 lea     rcx, [rdi+r15]
.text:0000000000004063                 lea     rdx, [rdi+r14+1]
.text:0000000000004068                 lea     r8, [rcx+r14]
.text:000000000000406C                 jmp     short loc_407D
.text:000000000000406C ; ---------------------------------------------------------------------------
.text:000000000000406E                 align 10h
.text:0000000000004070
.text:0000000000004070 loc_4070:                               ; CODE XREF: quotearg_buffer_restyled+B56↓j
.text:0000000000004070                                         ; quotearg_buffer_restyled+B70↓j
.text:0000000000004070                 add     rdx, 1
.text:0000000000004074                 cmp     r8, rdx
.text:0000000000004077                 jz      loc_3EB9
.text:000000000000407D
.text:000000000000407D loc_407D:                               ; CODE XREF: quotearg_buffer_restyled+B3C↑j
.text:000000000000407D                 movzx   ecx, byte ptr [rdx]
.text:0000000000004080                 sub     ecx, 5Bh ; '['
.text:0000000000004083                 cmp     cl, 21h ; '!'
.text:0000000000004086                 ja      short loc_4070
.text:0000000000004088                 mov     esi, 1
.text:000000000000408D                 shl     rsi, cl
.text:0000000000004090                 mov     rcx, rsi
.text:0000000000004093                 mov     rsi, 20000002Bh
.text:000000000000409D                 test    rcx, rsi
.text:00000000000040A0                 jz      short loc_4070
.text:00000000000040A2                 mov     r14, [rsp+0E8h+var_A8]
.text:00000000000040A7                 mov     r13, [rsp+0E8h+var_78]
.text:00000000000040AC                 mov     rbp, [rsp+0E8h+var_B8]
.text:00000000000040B1                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000040B9
.text:00000000000040B9 loc_40B9:                               ; CODE XREF: quotearg_buffer_restyled+489↑j
.text:00000000000040B9                                         ; quotearg_buffer_restyled+C0B↓j ...
.text:00000000000040B9                 cmp     [rsp+0E8h+var_DB], 0
.text:00000000000040BE                 jz      short loc_40D0
.text:00000000000040C0                 test    al, al
.text:00000000000040C2                 mov     eax, 4
.text:00000000000040C7                 cmovz   eax, [rsp+0E8h+var_E0]
.text:00000000000040CC                 mov     [rsp+0E8h+var_E0], eax
.text:00000000000040D0
.text:00000000000040D0 loc_40D0:                               ; CODE XREF: quotearg_buffer_restyled+B8E↑j
.text:00000000000040D0                                         ; quotearg_buffer_restyled+1205↓j
.text:00000000000040D0                 sub     rsp, 8
.text:00000000000040D4                 mov     rcx, rbp
.text:00000000000040D7                 mov     rsi, r13
.text:00000000000040DA                 push    [rsp+0F0h+var_88]
.text:00000000000040DE                 push    [rsp+0F8h+var_80]
.text:00000000000040E2                 mov     rdi, r14
.text:00000000000040E5                 push    0
.text:00000000000040E7                 mov     r9d, [rsp+108h+var_70]
.text:00000000000040EF                 mov     r8d, [rsp+108h+var_E0]
.text:00000000000040F4                 mov     rdx, [rsp+108h+s]
.text:00000000000040F9                 and     r9d, 0FFFFFFFDh
.text:00000000000040FD                 call    quotearg_buffer_restyled
.text:0000000000004102                 add     rsp, 20h
.text:0000000000004106                 mov     r15, rax
.text:0000000000004109
.text:0000000000004109 loc_4109:                               ; CODE XREF: quotearg_buffer_restyled+1135↓j
.text:0000000000004109                                         ; quotearg_buffer_restyled+1140↓j ...
.text:0000000000004109                 mov     rbx, [rsp+0E8h+var_40]
.text:0000000000004111                 xor     rbx, fs:28h
.text:000000000000411A                 mov     rax, r15
.text:000000000000411D                 jnz     loc_4723
.text:0000000000004123                 add     rsp, 0B8h
.text:000000000000412A                 pop     rbx
.text:000000000000412B                 pop     rbp
.text:000000000000412C                 pop     r12
.text:000000000000412E                 pop     r13
.text:0000000000004130                 pop     r14
.text:0000000000004132                 pop     r15
.text:0000000000004134                 retn
.text:0000000000004134 ; ---------------------------------------------------------------------------
.text:0000000000004135                 align 8
.text:0000000000004138
.text:0000000000004138 loc_4138:                               ; CODE XREF: quotearg_buffer_restyled+3B2↑j
.text:0000000000004138                 mov     rbp, r11
.text:000000000000413B                 jmp     loc_40B9
.text:0000000000004140 ; ---------------------------------------------------------------------------
.text:0000000000004140
.text:0000000000004140 loc_4140:                               ; CODE XREF: quotearg_buffer_restyled+80E↑j
.text:0000000000004140                                         ; quotearg_buffer_restyled+81C↑j
.text:0000000000004140                 cmp     r13, r15
.text:0000000000004143                 jbe     short loc_414A
.text:0000000000004145                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000414A
.text:000000000000414A loc_414A:                               ; CODE XREF: quotearg_buffer_restyled+C13↑j
.text:000000000000414A                 lea     rax, [r15+1]
.text:000000000000414E                 cmp     r13, rax
.text:0000000000004151                 jbe     short loc_4159
.text:0000000000004153                 mov     byte ptr [r14+r15+1], 5Ch ; '\'
.text:0000000000004159
.text:0000000000004159 loc_4159:                               ; CODE XREF: quotearg_buffer_restyled+C21↑j
.text:0000000000004159                 lea     rax, [r15+2]
.text:000000000000415D                 cmp     r13, rax
.text:0000000000004160                 jbe     loc_4752
.text:0000000000004166                 mov     rdx, r13
.text:0000000000004169                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000416F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000004174                 jmp     loc_3D52
.text:0000000000004179 ; ---------------------------------------------------------------------------
.text:0000000000004179
.text:0000000000004179 loc_4179:                               ; CODE XREF: quotearg_buffer_restyled+643↑j
.text:0000000000004179                 mov     eax, r12d
.text:000000000000417C                 mov     ebx, 30h ; '0'
.text:0000000000004181                 xor     r12d, r12d
.text:0000000000004184                 jmp     loc_3789
.text:0000000000004189 ; ---------------------------------------------------------------------------
.text:0000000000004189
.text:0000000000004189 loc_4189:                               ; CODE XREF: quotearg_buffer_restyled+623↑j
.text:0000000000004189                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000418F                 jmp     loc_3B59
.text:0000000000004194 ; ---------------------------------------------------------------------------
.text:0000000000004194
.text:0000000000004194 loc_4194:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004194                                         ; DATA XREF: .rodata:jpt_35C1↓o
.text:0000000000004194                 test    ebx, ebx        ; jumptable 00000000000121F1 case 4
.text:0000000000004196                 jnz     loc_35C3        ; jumptable 00000000000121F1 case 1
.text:000000000000419C                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000041A1
.text:00000000000041A1 loc_41A1:                               ; CODE XREF: quotearg_buffer_restyled+11FD↓j
.text:00000000000041A1                 test    r13, r13
.text:00000000000041A4                 jnz     loc_473A
.text:00000000000041AA                 lea     rax, asc_93A5   ; "'"
.text:00000000000041B1                 mov     [rsp+0E8h+var_98], 0
.text:00000000000041BA                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000041BF                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000041C4                 xor     r12d, r12d
.text:00000000000041C7                 mov     [rsp+0E8h+var_D9], 0
.text:00000000000041CC                 mov     [rsp+0E8h+n], 1
.text:00000000000041D5                 mov     [rsp+0E8h+s2], rax
.text:00000000000041DA                 mov     r15d, 1
.text:00000000000041E0                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000041E8                 jmp     loc_3603
.text:00000000000041E8 ; ---------------------------------------------------------------------------
.text:00000000000041ED                 align 10h
.text:00000000000041F0
.text:00000000000041F0 loc_41F0:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000041F0                                         ; DATA XREF: .rodata:jpt_35C1↓o
.text:00000000000041F0                 test    ebx, ebx        ; jumptable 00000000000121F1 case 5
.text:00000000000041F2                 jnz     loc_45ED
.text:00000000000041F8                 test    r13, r13
.text:00000000000041FB                 jz      loc_4426
.text:0000000000004201                 mov     byte ptr [r14], 22h ; '"'
.text:0000000000004205                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000420A                 xor     r12d, r12d
.text:000000000000420D                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004212                 mov     [rsp+0E8h+var_98], 0
.text:000000000000421B
.text:000000000000421B loc_421B:                               ; CODE XREF: quotearg_buffer_restyled+F0C↓j
.text:000000000000421B                 lea     rax, unk_93A3
.text:0000000000004222                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000004227                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000422C                 mov     [rsp+0E8h+n], 1
.text:0000000000004235                 mov     r15d, 1
.text:000000000000423B                 mov     [rsp+0E8h+s2], rax
.text:0000000000004240                 jmp     loc_3603
.text:0000000000004245 ; ---------------------------------------------------------------------------
.text:0000000000004245
.text:0000000000004245 loc_4245:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004245                                         ; DATA XREF: .rodata:jpt_35C1↓o
.text:0000000000004245                 lea     rax, unk_93A3   ; jumptable 00000000000121F1 case 6
.text:000000000000424C                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000004251                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004256                 xor     r12d, r12d
.text:0000000000004259                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004262                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000004267                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000426C                 mov     [rsp+0E8h+n], 1
.text:0000000000004275                 xor     r15d, r15d
.text:0000000000004278                 mov     [rsp+0E8h+s2], rax
.text:000000000000427D                 mov     [rsp+0E8h+var_E0], 5
.text:0000000000004285                 jmp     loc_3603
.text:000000000000428A ; ---------------------------------------------------------------------------
.text:000000000000428A
.text:000000000000428A loc_428A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000428A                                         ; DATA XREF: .rodata:jpt_35C1↓o
.text:000000000000428A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 7
.text:000000000000428F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004294                 xor     r12d, r12d
.text:0000000000004297                 mov     [rsp+0E8h+var_98], 0
.text:00000000000042A0                 mov     [rsp+0E8h+var_D9], 0
.text:00000000000042A5                 xor     r15d, r15d
.text:00000000000042A8                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000042AD                 mov     [rsp+0E8h+n], 0
.text:00000000000042B6                 mov     [rsp+0E8h+s2], 0
.text:00000000000042BF                 jmp     loc_3603
.text:00000000000042C4 ; ---------------------------------------------------------------------------
.text:00000000000042C4
.text:00000000000042C4 loc_42C4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000042C4                                         ; DATA XREF: .rodata:jpt_35C1↓o
.text:00000000000042C4                 cmp     [rsp+0E8h+var_E0], 0Ah ; jumptable 00000000000121F1 cases 8-10
.text:00000000000042C9                 jz      short loc_4321
.text:00000000000042CB                 lea     rsi, asc_93A7   ; "`"
.text:00000000000042D2                 xor     edi, edi        ; domainname
.text:00000000000042D4                 mov     edx, 5          ; category
.text:00000000000042D9                 call    _dcgettext
.text:00000000000042DE                 mov     rcx, rax
.text:00000000000042E1                 mov     [rsp+0E8h+var_80], rax
.text:00000000000042E6                 lea     rax, asc_93A7   ; "`"
.text:00000000000042ED                 cmp     rcx, rax
.text:00000000000042F0                 jz      loc_468E
.text:00000000000042F6
.text:00000000000042F6 loc_42F6:                               ; CODE XREF: quotearg_buffer_restyled+116F↓j
.text:00000000000042F6                 lea     rsi, asc_93A5   ; "'"
.text:00000000000042FD                 xor     edi, edi        ; domainname
.text:00000000000042FF                 mov     edx, 5          ; category
.text:0000000000004304                 call    _dcgettext
.text:0000000000004309                 mov     rcx, rax
.text:000000000000430C                 mov     [rsp+0E8h+var_88], rax
.text:0000000000004311                 lea     rax, asc_93A5   ; "'"
.text:0000000000004318                 cmp     rcx, rax
.text:000000000000431B                 jz      loc_46A4
.text:0000000000004321
.text:0000000000004321 loc_4321:                               ; CODE XREF: quotearg_buffer_restyled+D99↑j
.text:0000000000004321                                         ; quotearg_buffer_restyled+1185↓j
.text:0000000000004321                 xor     r15d, r15d
.text:0000000000004324                 test    ebx, ebx
.text:0000000000004326                 jz      loc_44ED
.text:000000000000432C
.text:000000000000432C loc_432C:                               ; CODE XREF: quotearg_buffer_restyled+FC7↓j
.text:000000000000432C                                         ; quotearg_buffer_restyled+FE6↓j
.text:000000000000432C                 test    ebx, ebx
.text:000000000000432E                 mov     rbx, [rsp+0E8h+var_88]
.text:0000000000004333                 setnz   [rsp+0E8h+var_D9]
.text:0000000000004338                 xor     r12d, r12d
.text:000000000000433B                 mov     rdi, rbx        ; s
.text:000000000000433E                 call    _strlen
.text:0000000000004343                 mov     [rsp+0E8h+s2], rbx
.text:0000000000004348                 mov     [rsp+0E8h+n], rax
.text:000000000000434D                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000004352                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004357                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004360                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000004365                 jmp     loc_3603
.text:000000000000436A ; ---------------------------------------------------------------------------
.text:000000000000436A
.text:000000000000436A loc_436A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000436A                                         ; DATA XREF: .rodata:jpt_35C1↓o
.text:000000000000436A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 0
.text:000000000000436F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004374                 xor     r12d, r12d
.text:0000000000004377                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004380                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000004385                 xor     r15d, r15d
.text:0000000000004388                 mov     [rsp+0E8h+var_DB], 0
.text:000000000000438D                 mov     [rsp+0E8h+n], 0
.text:0000000000004396                 mov     [rsp+0E8h+s2], 0
.text:000000000000439F                 jmp     loc_3603
.text:00000000000043A4 ; ---------------------------------------------------------------------------
.text:00000000000043A4
.text:00000000000043A4 loc_43A4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000043A4                                         ; DATA XREF: .rodata:jpt_35C1↓o
.text:00000000000043A4                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 3
.text:00000000000043A9                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000043AE                 xor     r12d, r12d
.text:00000000000043B1                 mov     [rsp+0E8h+var_98], 0
.text:00000000000043BA                 mov     [rsp+0E8h+var_D9], 1
.text:00000000000043BF                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000043C4                 jmp     loc_35E3
.text:00000000000043C9 ; ---------------------------------------------------------------------------
.text:00000000000043C9
.text:00000000000043C9 loc_43C9:                               ; CODE XREF: quotearg_buffer_restyled+665↑j
.text:00000000000043C9                 cmp     r13, r15
.text:00000000000043CC                 jbe     short loc_43D3
.text:00000000000043CE                 mov     byte ptr [r14+r15], 30h ; '0'
.text:00000000000043D3
.text:00000000000043D3 loc_43D3:                               ; CODE XREF: quotearg_buffer_restyled+E9C↑j
.text:00000000000043D3                 lea     rax, [rcx+2]
.text:00000000000043D7                 cmp     r13, rax
.text:00000000000043DA                 jbe     short loc_43E2
.text:00000000000043DC                 mov     byte ptr [r14+rcx+2], 30h ; '0'
.text:00000000000043E2
.text:00000000000043E2 loc_43E2:                               ; CODE XREF: quotearg_buffer_restyled+EAA↑j
.text:00000000000043E2                 mov     eax, r12d
.text:00000000000043E5                 lea     r15, [rcx+3]
.text:00000000000043E9                 xor     r12d, r12d
.text:00000000000043EC                 mov     ebx, 30h ; '0'
.text:00000000000043F1                 jmp     loc_3758
.text:00000000000043F1 ; ---------------------------------------------------------------------------
.text:00000000000043F6                 align 20h
.text:0000000000004400
.text:0000000000004400 loc_4400:                               ; CODE XREF: quotearg_buffer_restyled+A1B↑j
.text:0000000000004400                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000004405                 mov     rbp, r11
.text:0000000000004408                 mov     [rsp+0E8h+var_DB], bl
.text:000000000000440C                 jmp     loc_40B9
.text:0000000000004411 ; ---------------------------------------------------------------------------
.text:0000000000004411
.text:0000000000004411 loc_4411:                               ; CODE XREF: quotearg_buffer_restyled+549↑j
.text:0000000000004411                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000004416                 xor     r12d, r12d
.text:0000000000004419                 jmp     loc_3F20
.text:000000000000441E ; ---------------------------------------------------------------------------
.text:000000000000441E
.text:000000000000441E loc_441E:                               ; CODE XREF: quotearg_buffer_restyled+AF0↑j
.text:000000000000441E                 xor     r10d, r10d
.text:0000000000004421                 jmp     loc_3FDD
.text:0000000000004426 ; ---------------------------------------------------------------------------
.text:0000000000004426
.text:0000000000004426 loc_4426:                               ; CODE XREF: quotearg_buffer_restyled+CCB↑j
.text:0000000000004426                 mov     [rsp+0E8h+var_98], 0
.text:000000000000442F                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000004434                 xor     r12d, r12d
.text:0000000000004437                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000443C                 jmp     loc_421B
.text:0000000000004441 ; ---------------------------------------------------------------------------
.text:0000000000004441
.text:0000000000004441 loc_4441:                               ; CODE XREF: quotearg_buffer_restyled+971↑j
.text:0000000000004441                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000004446                 mov     rsi, r14
.text:0000000000004449                 mov     rcx, r13
.text:000000000000444C                 mov     rax, rbx
.text:000000000000444F                 mov     rdi, rbx
.text:0000000000004452                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000004458                 movzx   ebx, [rsp+0E8h+var_6A]
.text:000000000000445D                 mov     r9, [rsp+0E8h+var_60]
.text:0000000000004465                 cmp     rsi, r11
.text:0000000000004468                 movzx   r10d, [rsp+0E8h+var_69]
.text:000000000000446E                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000004476                 mov     r14, [rsp+0E8h+var_A8]
.text:000000000000447B                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000004480                 jnb     short loc_44A8
.text:0000000000004482                 cmp     byte ptr [rcx], 0
.text:0000000000004485                 jnz     short loc_4497
.text:0000000000004487                 jmp     short loc_44A8
.text:0000000000004487 ; ---------------------------------------------------------------------------
.text:0000000000004489                 align 10h
.text:0000000000004490
.text:0000000000004490 loc_4490:                               ; CODE XREF: quotearg_buffer_restyled+F73↓j
.text:0000000000004490                 cmp     byte ptr [r9+rax], 0
.text:0000000000004495                 jz      short loc_44A5
.text:0000000000004497
.text:0000000000004497 loc_4497:                               ; CODE XREF: quotearg_buffer_restyled+F55↑j
.text:0000000000004497                 add     rax, 1
.text:000000000000449B                 lea     rdx, [rbp+rax+0]
.text:00000000000044A0                 cmp     r11, rdx
.text:00000000000044A3                 ja      short loc_4490
.text:00000000000044A5
.text:00000000000044A5 loc_44A5:                               ; CODE XREF: quotearg_buffer_restyled+F65↑j
.text:00000000000044A5                 mov     rdi, rax
.text:00000000000044A8
.text:00000000000044A8 loc_44A8:                               ; CODE XREF: quotearg_buffer_restyled+F50↑j
.text:00000000000044A8                                         ; quotearg_buffer_restyled+F57↑j
.text:00000000000044A8                 movzx   edx, [rsp+0E8h+var_DB]
.text:00000000000044AD                 xor     r12d, r12d
.text:00000000000044B0                 jmp     loc_3F16
.text:00000000000044B5 ; ---------------------------------------------------------------------------
.text:00000000000044B5
.text:00000000000044B5 loc_44B5:                               ; CODE XREF: quotearg_buffer_restyled+967↑j
.text:00000000000044B5                 mov     rdi, rbx
.text:00000000000044B8                 movzx   r8d, [rsp+0E8h+var_6B]
.text:00000000000044BE                 movzx   ebx, [rsp+0E8h+var_6A]
.text:00000000000044C3                 movzx   r10d, [rsp+0E8h+var_69]
.text:00000000000044C9                 mov     r15, [rsp+0E8h+var_68]
.text:00000000000044D1                 xor     r12d, r12d
.text:00000000000044D4                 mov     r14, [rsp+0E8h+var_A8]
.text:00000000000044D9                 mov     r13, [rsp+0E8h+var_78]
.text:00000000000044DE                 mov     r11, [rsp+0E8h+var_B8]
.text:00000000000044E3                 movzx   edx, [rsp+0E8h+var_DB]
.text:00000000000044E8                 jmp     loc_3F16
.text:00000000000044ED ; ---------------------------------------------------------------------------
.text:00000000000044ED
.text:00000000000044ED loc_44ED:                               ; CODE XREF: quotearg_buffer_restyled+DF6↑j
.text:00000000000044ED                 mov     rdx, [rsp+0E8h+var_80]
.text:00000000000044F2                 movzx   eax, byte ptr [rdx]
.text:00000000000044F5                 test    al, al
.text:00000000000044F7                 jz      loc_432C
.text:00000000000044FD                 nop     dword ptr [rax]
.text:0000000000004500
.text:0000000000004500 loc_4500:                               ; CODE XREF: quotearg_buffer_restyled+FE4↓j
.text:0000000000004500                 cmp     r13, r15
.text:0000000000004503                 jbe     short loc_4509
.text:0000000000004505                 mov     [r14+r15], al
.text:0000000000004509
.text:0000000000004509 loc_4509:                               ; CODE XREF: quotearg_buffer_restyled+FD3↑j
.text:0000000000004509                 add     r15, 1
.text:000000000000450D                 movzx   eax, byte ptr [rdx+r15]
.text:0000000000004512                 test    al, al
.text:0000000000004514                 jnz     short loc_4500
.text:0000000000004516                 jmp     loc_432C
.text:000000000000451B ; ---------------------------------------------------------------------------
.text:000000000000451B
.text:000000000000451B loc_451B:                               ; CODE XREF: quotearg_buffer_restyled+9EA↑j
.text:000000000000451B                 mov     eax, edx
.text:000000000000451D                 jmp     loc_3A77
.text:0000000000004522 ; ---------------------------------------------------------------------------
.text:0000000000004522
.text:0000000000004522 loc_4522:                               ; CODE XREF: quotearg_buffer_restyled+862↑j
.text:0000000000004522                 movzx   ebx, byte ptr [rax+rcx]
.text:0000000000004526                 cmp     bl, 3Eh ; '>'
.text:0000000000004529                 ja      loc_3DA0
.text:000000000000452F                 mov     rax, 7000A38200000000h
.text:0000000000004539                 bt      rax, rbx
.text:000000000000453D                 jnb     loc_3DA0
.text:0000000000004543                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000004548                 jnz     loc_4732
.text:000000000000454E                 cmp     r13, r15
.text:0000000000004551                 jbe     short loc_4558
.text:0000000000004553                 mov     byte ptr [r14+r15], 3Fh ; '?'
.text:0000000000004558
.text:0000000000004558 loc_4558:                               ; CODE XREF: quotearg_buffer_restyled+1021↑j
.text:0000000000004558                 lea     rax, [r15+1]
.text:000000000000455C                 cmp     r13, rax
.text:000000000000455F                 jbe     short loc_4567
.text:0000000000004561                 mov     byte ptr [r14+r15+1], 22h ; '"'
.text:0000000000004567
.text:0000000000004567 loc_4567:                               ; CODE XREF: quotearg_buffer_restyled+102F↑j
.text:0000000000004567                 lea     rax, [r15+2]
.text:000000000000456B                 cmp     r13, rax
.text:000000000000456E                 jbe     short loc_4576
.text:0000000000004570                 mov     byte ptr [r14+r15+2], 22h ; '"'
.text:0000000000004576
.text:0000000000004576 loc_4576:                               ; CODE XREF: quotearg_buffer_restyled+103E↑j
.text:0000000000004576                 lea     rax, [r15+3]
.text:000000000000457A                 cmp     r13, rax
.text:000000000000457D                 jbe     short loc_4585
.text:000000000000457F                 mov     byte ptr [r14+r15+3], 3Fh ; '?'
.text:0000000000004585
.text:0000000000004585 loc_4585:                               ; CODE XREF: quotearg_buffer_restyled+104D↑j
.text:0000000000004585                 add     r15, 4
.text:0000000000004589                 xor     edx, edx
.text:000000000000458B                 xor     r12d, r12d
.text:000000000000458E                 xor     eax, eax
.text:0000000000004590                 mov     rbp, rcx
.text:0000000000004593                 jmp     loc_3758
.text:0000000000004598 ; ---------------------------------------------------------------------------
.text:0000000000004598
.text:0000000000004598 loc_4598:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004598                                         ; DATA XREF: .rodata:jpt_35C1↓o
.text:0000000000004598                 test    ebx, ebx        ; jumptable 00000000000121F1 case 2
.text:000000000000459A                 jz      loc_4728
.text:00000000000045A0                 lea     rax, asc_93A5   ; "'"
.text:00000000000045A7                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000045AC                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000045B1                 xor     r12d, r12d
.text:00000000000045B4                 mov     [rsp+0E8h+var_98], 0
.text:00000000000045BD                 mov     [rsp+0E8h+var_D9], 1
.text:00000000000045C2                 mov     [rsp+0E8h+var_DB], 0
.text:00000000000045C7                 mov     [rsp+0E8h+n], 1
.text:00000000000045D0                 xor     r15d, r15d
.text:00000000000045D3                 mov     [rsp+0E8h+s2], rax
.text:00000000000045D8                 jmp     loc_3603
.text:00000000000045D8 ; ---------------------------------------------------------------------------
.text:00000000000045DD                 align 20h
.text:00000000000045E0
.text:00000000000045E0 loc_45E0:                               ; CODE XREF: quotearg_buffer_restyled+745↑j
.text:00000000000045E0                                         ; quotearg_buffer_restyled+805↑j ...
.text:00000000000045E0                 mov     rbp, r11
.text:00000000000045E3                 movzx   eax, [rsp+0E8h+var_D9]
.text:00000000000045E8                 jmp     loc_40B9
.text:00000000000045ED ; ---------------------------------------------------------------------------
.text:00000000000045ED
.text:00000000000045ED loc_45ED:                               ; CODE XREF: quotearg_buffer_restyled+CC2↑j
.text:00000000000045ED                 lea     rax, unk_93A3
.text:00000000000045F4                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000045F9                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000045FE                 xor     r12d, r12d
.text:0000000000004601                 mov     [rsp+0E8h+var_98], 0
.text:000000000000460A                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000460F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000004614                 mov     [rsp+0E8h+n], 1
.text:000000000000461D                 xor     r15d, r15d
.text:0000000000004620                 mov     [rsp+0E8h+s2], rax
.text:0000000000004625                 jmp     loc_3603
.text:000000000000462A ; ---------------------------------------------------------------------------
.text:000000000000462A
.text:000000000000462A loc_462A:                               ; CODE XREF: quotearg_buffer_restyled+797↑j
.text:000000000000462A                 mov     eax, edx
.text:000000000000462C
.text:000000000000462C loc_462C:                               ; CODE XREF: quotearg_buffer_restyled+78C↑j
.text:000000000000462C                                         ; quotearg_buffer_restyled+11E1↓j
.text:000000000000462C                 mov     rbx, [rsp+0E8h+s2]
.text:0000000000004631                 test    rbx, rbx
.text:0000000000004634                 jz      short loc_4662
.text:0000000000004636                 test    al, al
.text:0000000000004638                 jz      short loc_4662
.text:000000000000463A                 movzx   ecx, byte ptr [rbx]
.text:000000000000463D                 mov     rax, rbx
.text:0000000000004640                 test    cl, cl
.text:0000000000004642                 jz      short loc_4662
.text:0000000000004644                 mov     rdx, r15
.text:0000000000004647                 sub     rax, r15
.text:000000000000464A
.text:000000000000464A loc_464A:                               ; CODE XREF: quotearg_buffer_restyled+112D↓j
.text:000000000000464A                 cmp     r13, rdx
.text:000000000000464D                 jbe     short loc_4653
.text:000000000000464F                 mov     [r14+rdx], cl
.text:0000000000004653
.text:0000000000004653 loc_4653:                               ; CODE XREF: quotearg_buffer_restyled+111D↑j
.text:0000000000004653                 add     rdx, 1
.text:0000000000004657                 movzx   ecx, byte ptr [rax+rdx]
.text:000000000000465B                 test    cl, cl
.text:000000000000465D                 jnz     short loc_464A
.text:000000000000465F                 mov     r15, rdx
.text:0000000000004662
.text:0000000000004662 loc_4662:                               ; CODE XREF: quotearg_buffer_restyled+1104↑j
.text:0000000000004662                                         ; quotearg_buffer_restyled+1108↑j ...
.text:0000000000004662                 cmp     r13, r15
.text:0000000000004665                 jbe     loc_4109
.text:000000000000466B                 mov     byte ptr [r14+r15], 0
.text:0000000000004670                 jmp     loc_4109
.text:0000000000004675 ; ---------------------------------------------------------------------------
.text:0000000000004675
.text:0000000000004675 loc_4675:                               ; CODE XREF: quotearg_buffer_restyled+1C2↑j
.text:0000000000004675                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000467A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000467F                 mov     rbp, r11
.text:0000000000004682                 setz    al
.text:0000000000004685                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000004689                 jmp     loc_40B9
.text:000000000000468E ; ---------------------------------------------------------------------------
.text:000000000000468E
.text:000000000000468E loc_468E:                               ; CODE XREF: quotearg_buffer_restyled+DC0↑j
.text:000000000000468E                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000004692                 mov     rdi, rcx
.text:0000000000004695                 call    gettext_quote
.text:000000000000469A                 mov     [rsp+0E8h+var_80], rax
.text:000000000000469F                 jmp     loc_42F6
.text:00000000000046A4 ; ---------------------------------------------------------------------------
.text:00000000000046A4
.text:00000000000046A4 loc_46A4:                               ; CODE XREF: quotearg_buffer_restyled+DEB↑j
.text:00000000000046A4                 mov     esi, [rsp+0E8h+var_E0]
.text:00000000000046A8                 mov     rdi, rcx
.text:00000000000046AB                 call    gettext_quote
.text:00000000000046B0                 mov     [rsp+0E8h+var_88], rax
.text:00000000000046B5                 jmp     loc_4321
.text:00000000000046BA ; ---------------------------------------------------------------------------
.text:00000000000046BA
.text:00000000000046BA loc_46BA:                               ; CODE XREF: quotearg_buffer_restyled+5F0↑j
.text:00000000000046BA                 movzx   ebx, [rsp+0E8h+var_D9]
.text:00000000000046BF                 mov     rbp, r11
.text:00000000000046C2                 mov     eax, edx
.text:00000000000046C4                 mov     [rsp+0E8h+var_DB], bl
.text:00000000000046C8                 jmp     loc_40B9
.text:00000000000046CD ; ---------------------------------------------------------------------------
.text:00000000000046CD
.text:00000000000046CD loc_46CD:                               ; CODE XREF: quotearg_buffer_restyled+7A2↑j
.text:00000000000046CD                 sub     rsp, 8
.text:00000000000046D1                 mov     r8d, 5
.text:00000000000046D7                 mov     rcx, r11
.text:00000000000046DA                 push    [rsp+0F0h+var_88]
.text:00000000000046DE                 push    [rsp+0F8h+var_80]
.text:00000000000046E2                 mov     rdi, r14
.text:00000000000046E5                 push    [rsp+100h+var_C8]
.text:00000000000046E9                 mov     r9d, [rsp+108h+var_70]
.text:00000000000046F1                 mov     rdx, [rsp+108h+s]
.text:00000000000046F6                 mov     rsi, [rsp+108h+var_98]
.text:00000000000046FB                 call    quotearg_buffer_restyled
.text:0000000000004700                 add     rsp, 20h
.text:0000000000004704                 mov     r15, rax
.text:0000000000004707                 jmp     loc_4109
.text:000000000000470C ; ---------------------------------------------------------------------------
.text:000000000000470C
.text:000000000000470C loc_470C:                               ; CODE XREF: quotearg_buffer_restyled+7B9↑j
.text:000000000000470C                 movzx   eax, [rsp+0E8h+var_6C]
.text:0000000000004711                 jmp     loc_462C
.text:0000000000004716 ; ---------------------------------------------------------------------------
.text:0000000000004716
.text:0000000000004716 loc_4716:                               ; CODE XREF: quotearg_buffer_restyled+77F↑j
.text:0000000000004716                 mov     [rsp+0E8h+var_E0], 2
.text:000000000000471E                 jmp     loc_40B9
.text:0000000000004723 ; ---------------------------------------------------------------------------
.text:0000000000004723
.text:0000000000004723 loc_4723:                               ; CODE XREF: quotearg_buffer_restyled+BED↑j
.text:0000000000004723                 call    ___stack_chk_fail
.text:0000000000004728 ; ---------------------------------------------------------------------------
.text:0000000000004728
.text:0000000000004728 loc_4728:                               ; CODE XREF: quotearg_buffer_restyled+106A↑j
.text:0000000000004728                 mov     [rsp+0E8h+var_DB], 0
.text:000000000000472D                 jmp     loc_41A1
.text:0000000000004732 ; ---------------------------------------------------------------------------
.text:0000000000004732
.text:0000000000004732 loc_4732:                               ; CODE XREF: quotearg_buffer_restyled+1018↑j
.text:0000000000004732                 mov     rbp, r11
.text:0000000000004735                 jmp     loc_40D0
.text:000000000000473A ; ---------------------------------------------------------------------------
.text:000000000000473A
.text:000000000000473A loc_473A:                               ; CODE XREF: quotearg_buffer_restyled+C74↑j
.text:000000000000473A                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000473F                 xor     eax, eax
.text:0000000000004741                 xor     r12d, r12d
.text:0000000000004744                 mov     [rsp+0E8h+var_98], 0
.text:000000000000474D                 jmp     loc_3CF4
.text:0000000000004752 ; ---------------------------------------------------------------------------
.text:0000000000004752
.text:0000000000004752 loc_4752:                               ; CODE XREF: quotearg_buffer_restyled+C30↑j
.text:0000000000004752                 mov     rdx, r13
.text:0000000000004755                 mov     r13, [rsp+0E8h+var_98]
.text:000000000000475A                 jmp     loc_3D52
.text:000000000000475F ; ---------------------------------------------------------------------------
.text:000000000000475F
.text:000000000000475F def_35C1:                               ; CODE XREF: quotearg_buffer_restyled+7A↑j
.text:000000000000475F                 call    _abort          ; jumptable 00000000000121F1 default case
.text:000000000000475F ; } // starts at 3530
.text:000000000000475F quotearg_buffer_restyled endp
.text:000000000000475F
.text:000000000000475F ; ---------------------------------------------------------------------------
.text:0000000000004764                 align 10h
.text:0000000000004770
.text:0000000000004770 ; =============== S U B R O U T I N E =======================================
.text:0000000000004770
.text:0000000000004770
.text:0000000000004770 quotearg_n_options proc near            ; CODE XREF: quotearg_n+E↓j
.text:0000000000004770                                         ; quotearg_n_mem+7↓j ...
.text:0000000000004770
.text:0000000000004770 var_50          = qword ptr -50h
.text:0000000000004770 var_48          = qword ptr -48h
.text:0000000000004770 var_40          = dword ptr -40h
.text:0000000000004770 var_3C          = dword ptr -3Ch
.text:0000000000004770
.text:0000000000004770 ; __unwind {
.text:0000000000004770                 push    r15
.text:0000000000004772                 push    r14
.text:0000000000004774                 movsxd  r15, edi
.text:0000000000004777                 push    r13
.text:0000000000004779                 push    r12
.text:000000000000477B                 mov     r14, rdx
.text:000000000000477E                 push    rbp
.text:000000000000477F                 push    rbx
.text:0000000000004780                 mov     rbp, rcx
.text:0000000000004783                 sub     rsp, 28h
.text:0000000000004787                 mov     [rsp+58h+var_50], rsi
.text:000000000000478C                 call    ___errno_location
.text:0000000000004791                 mov     r13, rax
.text:0000000000004794                 mov     eax, [rax]
.text:0000000000004796                 test    r15d, r15d
.text:0000000000004799                 mov     rbx, cs:slotvec
.text:00000000000047A0                 mov     [rsp+58h+var_40], eax
.text:00000000000047A4                 js      loc_4911
.text:00000000000047AA                 cmp     cs:nslots, r15d
.text:00000000000047B1                 jg      short loc_4815
.text:00000000000047B3                 cmp     r15d, 7FFFFFFFh
.text:00000000000047BA                 jz      loc_4916
.text:00000000000047C0                 lea     r12d, [r15+1]
.text:00000000000047C4                 lea     rax, slotvec0
.text:00000000000047CB                 movsxd  rsi, r12d
.text:00000000000047CE                 shl     rsi, 4
.text:00000000000047D2                 cmp     rbx, rax
.text:00000000000047D5                 jz      loc_48F0
.text:00000000000047DB                 mov     rdi, rbx
.text:00000000000047DE                 call    xrealloc
.text:00000000000047E3                 mov     rbx, rax
.text:00000000000047E6                 mov     cs:slotvec, rax
.text:00000000000047ED
.text:00000000000047ED loc_47ED:                               ; CODE XREF: quotearg_n_options+19C↓j
.text:00000000000047ED                 movsxd  rdi, cs:nslots
.text:00000000000047F4                 mov     edx, r12d
.text:00000000000047F7                 xor     esi, esi        ; c
.text:00000000000047F9                 sub     edx, edi
.text:00000000000047FB                 shl     rdi, 4
.text:00000000000047FF                 movsxd  rdx, edx
.text:0000000000004802                 add     rdi, rbx        ; s
.text:0000000000004805                 shl     rdx, 4          ; n
.text:0000000000004809                 call    _memset
.text:000000000000480E                 mov     cs:nslots, r12d
.text:0000000000004815
.text:0000000000004815 loc_4815:                               ; CODE XREF: quotearg_n_options+41↑j
.text:0000000000004815                 mov     eax, [rbp+4]
.text:0000000000004818                 shl     r15, 4
.text:000000000000481C                 sub     rsp, 8
.text:0000000000004820                 add     rbx, r15
.text:0000000000004823                 lea     r15, [rbp+8]
.text:0000000000004827                 mov     r8d, [rbp+0]
.text:000000000000482B                 mov     r11, [rbx]
.text:000000000000482E                 mov     r12, [rbx+8]
.text:0000000000004832                 mov     rcx, r14
.text:0000000000004835                 or      eax, 1
.text:0000000000004838                 mov     [rsp+60h+var_3C], eax
.text:000000000000483C                 push    qword ptr [rbp+30h]
.text:000000000000483F                 mov     r9d, eax
.text:0000000000004842                 push    qword ptr [rbp+28h]
.text:0000000000004845                 push    r15
.text:0000000000004847                 mov     rsi, r11
.text:000000000000484A                 mov     rdx, [rsp+78h+var_50]
.text:000000000000484F                 mov     rdi, r12
.text:0000000000004852                 mov     [rsp+78h+var_48], r11
.text:0000000000004857                 call    quotearg_buffer_restyled
.text:000000000000485C                 add     rsp, 20h
.text:0000000000004860                 mov     r11, [rsp+58h+var_48]
.text:0000000000004865                 cmp     r11, rax
.text:0000000000004868                 ja      short loc_48D1
.text:000000000000486A                 lea     rsi, [rax+1]
.text:000000000000486E                 lea     rax, slot0
.text:0000000000004875                 cmp     r12, rax
.text:0000000000004878                 mov     [rbx], rsi
.text:000000000000487B                 jz      short loc_488F
.text:000000000000487D                 mov     rdi, r12        ; ptr
.text:0000000000004880                 mov     [rsp+58h+var_48], rsi
.text:0000000000004885                 call    _free
.text:000000000000488A                 mov     rsi, [rsp+58h+var_48]
.text:000000000000488F
.text:000000000000488F loc_488F:                               ; CODE XREF: quotearg_n_options+10B↑j
.text:000000000000488F                 mov     rdi, rsi
.text:0000000000004892                 mov     [rsp+58h+var_48], rsi
.text:0000000000004897                 call    xmalloc
.text:000000000000489C                 sub     rsp, 8
.text:00000000000048A0                 mov     [rbx+8], rax
.text:00000000000048A4                 mov     r8d, [rbp+0]
.text:00000000000048A8                 push    qword ptr [rbp+30h]
.text:00000000000048AB                 push    qword ptr [rbp+28h]
.text:00000000000048AE                 mov     rcx, r14
.text:00000000000048B1                 push    r15
.text:00000000000048B3                 mov     r9d, [rsp+78h+var_3C]
.text:00000000000048B8                 mov     rdi, rax
.text:00000000000048BB                 mov     rdx, [rsp+78h+var_50]
.text:00000000000048C0                 mov     rsi, [rsp+78h+var_48]
.text:00000000000048C5                 mov     r12, rax
.text:00000000000048C8                 call    quotearg_buffer_restyled
.text:00000000000048CD                 add     rsp, 20h
.text:00000000000048D1
.text:00000000000048D1 loc_48D1:                               ; CODE XREF: quotearg_n_options+F8↑j
.text:00000000000048D1                 mov     eax, [rsp+58h+var_40]
.text:00000000000048D5                 mov     [r13+0], eax
.text:00000000000048D9                 add     rsp, 28h
.text:00000000000048DD                 mov     rax, r12
.text:00000000000048E0                 pop     rbx
.text:00000000000048E1                 pop     rbp
.text:00000000000048E2                 pop     r12
.text:00000000000048E4                 pop     r13
.text:00000000000048E6                 pop     r14
.text:00000000000048E8                 pop     r15
.text:00000000000048EA                 retn
.text:00000000000048EA ; ---------------------------------------------------------------------------
.text:00000000000048EB                 align 10h
.text:00000000000048F0
.text:00000000000048F0 loc_48F0:                               ; CODE XREF: quotearg_n_options+65↑j
.text:00000000000048F0                 xor     edi, edi
.text:00000000000048F2                 call    xrealloc
.text:00000000000048F7                 movdqa  xmm0, xmmword ptr cs:slotvec0
.text:00000000000048FF                 mov     rbx, rax
.text:0000000000004902                 mov     cs:slotvec, rax
.text:0000000000004909                 movups  xmmword ptr [rax], xmm0
.text:000000000000490C                 jmp     loc_47ED
.text:0000000000004911 ; ---------------------------------------------------------------------------
.text:0000000000004911
.text:0000000000004911 loc_4911:                               ; CODE XREF: quotearg_n_options+34↑j
.text:0000000000004911                 call    _abort
.text:0000000000004916 ; ---------------------------------------------------------------------------
.text:0000000000004916
.text:0000000000004916 loc_4916:                               ; CODE XREF: quotearg_n_options+4A↑j
.text:0000000000004916                 call    xalloc_die
.text:0000000000004916 ; } // starts at 4770
.text:0000000000004916 quotearg_n_options endp
.text:0000000000004916
.text:0000000000004916 ; ---------------------------------------------------------------------------
.text:000000000000491B                 align 20h
.text:0000000000004920
.text:0000000000004920 ; =============== S U B R O U T I N E =======================================
.text:0000000000004920
.text:0000000000004920 ; Attributes: info_from_lumina
.text:0000000000004920
.text:0000000000004920 ; quoting_options *__fastcall clone_quoting_options(quoting_options *o)
.text:0000000000004920                 public clone_quoting_options
.text:0000000000004920 clone_quoting_options proc near
.text:0000000000004920 ; __unwind {
.text:0000000000004920                 push    r12
.text:0000000000004922                 push    rbp
.text:0000000000004923                 push    rbx
.text:0000000000004924                 mov     rbx, rdi
.text:0000000000004927                 call    ___errno_location
.text:000000000000492C                 mov     r12d, [rax]
.text:000000000000492F                 mov     rbp, rax
.text:0000000000004932                 lea     rax, default_quoting_options
.text:0000000000004939                 test    rbx, rbx
.text:000000000000493C                 mov     esi, 38h ; '8'  ; n
.text:0000000000004941                 cmovz   rbx, rax
.text:0000000000004945                 mov     rdi, rbx        ; src
.text:0000000000004948                 call    xmemdup
.text:000000000000494D                 mov     [rbp+0], r12d
.text:0000000000004951                 pop     rbx
.text:0000000000004952                 pop     rbp
.text:0000000000004953                 pop     r12
.text:0000000000004955                 retn
.text:0000000000004955 ; } // starts at 4920
.text:0000000000004955 clone_quoting_options endp
.text:0000000000004955
.text:0000000000004955 ; ---------------------------------------------------------------------------
.text:0000000000004956                 align 20h
.text:0000000000004960
.text:0000000000004960 ; =============== S U B R O U T I N E =======================================
.text:0000000000004960
.text:0000000000004960
.text:0000000000004960                 public get_quoting_style
.text:0000000000004960 get_quoting_style proc near
.text:0000000000004960 ; __unwind {
.text:0000000000004960                 lea     rax, default_quoting_options
.text:0000000000004967                 test    rdi, rdi
.text:000000000000496A                 cmovz   rdi, rax
.text:000000000000496E                 mov     eax, [rdi]
.text:0000000000004970                 retn
.text:0000000000004970 ; } // starts at 4960
.text:0000000000004970 get_quoting_style endp
.text:0000000000004970
.text:0000000000004970 ; ---------------------------------------------------------------------------
.text:0000000000004971                 align 20h
.text:0000000000004980
.text:0000000000004980 ; =============== S U B R O U T I N E =======================================
.text:0000000000004980
.text:0000000000004980
.text:0000000000004980                 public set_quoting_style
.text:0000000000004980 set_quoting_style proc near
.text:0000000000004980 ; __unwind {
.text:0000000000004980                 lea     rax, default_quoting_options
.text:0000000000004987                 test    rdi, rdi
.text:000000000000498A                 cmovz   rdi, rax
.text:000000000000498E                 mov     [rdi], esi
.text:0000000000004990                 retn
.text:0000000000004990 ; } // starts at 4980
.text:0000000000004990 set_quoting_style endp
.text:0000000000004990
.text:0000000000004990 ; ---------------------------------------------------------------------------
.text:0000000000004991                 align 20h
.text:00000000000049A0
.text:00000000000049A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000049A0
.text:00000000000049A0 ; Attributes: info_from_lumina
.text:00000000000049A0
.text:00000000000049A0 ; int __fastcall set_char_quoting(quoting_options *o, char c, int i)
.text:00000000000049A0                 public set_char_quoting
.text:00000000000049A0 set_char_quoting proc near
.text:00000000000049A0 ; __unwind {
.text:00000000000049A0                 lea     rax, default_quoting_options
.text:00000000000049A7                 test    rdi, rdi
.text:00000000000049AA                 mov     ecx, esi
.text:00000000000049AC                 cmovz   rdi, rax
.text:00000000000049B0                 mov     eax, esi
.text:00000000000049B2                 and     ecx, 1Fh
.text:00000000000049B5                 shr     al, 5
.text:00000000000049B8                 movzx   eax, al
.text:00000000000049BB                 lea     rdi, [rdi+rax*4+8]
.text:00000000000049C0                 mov     esi, [rdi]
.text:00000000000049C2                 mov     eax, esi
.text:00000000000049C4                 shr     eax, cl
.text:00000000000049C6                 xor     edx, eax
.text:00000000000049C8                 and     eax, 1
.text:00000000000049CB                 and     edx, 1
.text:00000000000049CE                 shl     edx, cl
.text:00000000000049D0                 xor     edx, esi
.text:00000000000049D2                 mov     [rdi], edx
.text:00000000000049D4                 retn
.text:00000000000049D4 ; } // starts at 49A0
.text:00000000000049D4 set_char_quoting endp
.text:00000000000049D4
.text:00000000000049D4 ; ---------------------------------------------------------------------------
.text:00000000000049D5                 align 20h
.text:00000000000049E0
.text:00000000000049E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000049E0
.text:00000000000049E0
.text:00000000000049E0                 public set_quoting_flags
.text:00000000000049E0 set_quoting_flags proc near
.text:00000000000049E0 ; __unwind {
.text:00000000000049E0                 lea     rax, default_quoting_options
.text:00000000000049E7                 test    rdi, rdi
.text:00000000000049EA                 cmovz   rdi, rax
.text:00000000000049EE                 mov     eax, [rdi+4]
.text:00000000000049F1                 mov     [rdi+4], esi
.text:00000000000049F4                 retn
.text:00000000000049F4 ; } // starts at 49E0
.text:00000000000049F4 set_quoting_flags endp
.text:00000000000049F4
.text:00000000000049F4 ; ---------------------------------------------------------------------------
.text:00000000000049F5                 align 20h
.text:0000000000004A00
.text:0000000000004A00 ; =============== S U B R O U T I N E =======================================
.text:0000000000004A00
.text:0000000000004A00 ; Attributes: info_from_lumina
.text:0000000000004A00
.text:0000000000004A00 ; void __fastcall set_custom_quoting(quoting_options *o, const char *left_quote, const char *right_quote)
.text:0000000000004A00                 public set_custom_quoting
.text:0000000000004A00 set_custom_quoting proc near
.text:0000000000004A00 ; __unwind {
.text:0000000000004A00                 lea     rax, default_quoting_options
.text:0000000000004A07                 test    rdi, rdi
.text:0000000000004A0A                 cmovz   rdi, rax
.text:0000000000004A0E                 test    rsi, rsi
.text:0000000000004A11                 mov     dword ptr [rdi], 0Ah
.text:0000000000004A17                 jz      short loc_4A27
.text:0000000000004A19                 test    rdx, rdx
.text:0000000000004A1C                 jz      short loc_4A27
.text:0000000000004A1E                 mov     [rdi+28h], rsi
.text:0000000000004A22                 mov     [rdi+30h], rdx
.text:0000000000004A26                 retn
.text:0000000000004A27 ; ---------------------------------------------------------------------------
.text:0000000000004A27
.text:0000000000004A27 loc_4A27:                               ; CODE XREF: set_custom_quoting+17↑j
.text:0000000000004A27                                         ; set_custom_quoting+1C↑j
.text:0000000000004A27                 sub     rsp, 8
.text:0000000000004A2B                 call    _abort
.text:0000000000004A2B ; } // starts at 4A00
.text:0000000000004A2B set_custom_quoting endp
.text:0000000000004A2B
.text:0000000000004A30
.text:0000000000004A30 ; =============== S U B R O U T I N E =======================================
.text:0000000000004A30
.text:0000000000004A30 ; Attributes: info_from_lumina
.text:0000000000004A30
.text:0000000000004A30 ; size_t __fastcall quotearg_buffer(char *buffer, size_t buffersize, const char *arg, size_t argsize, const quoting_options *o)
.text:0000000000004A30                 public quotearg_buffer
.text:0000000000004A30 quotearg_buffer proc near
.text:0000000000004A30
.text:0000000000004A30 var_40          = qword ptr -40h
.text:0000000000004A30
.text:0000000000004A30 ; __unwind {
.text:0000000000004A30                 push    r15
.text:0000000000004A32                 push    r14
.text:0000000000004A34                 lea     rax, default_quoting_options
.text:0000000000004A3B                 push    r13
.text:0000000000004A3D                 push    r12
.text:0000000000004A3F                 mov     r13, rdi
.text:0000000000004A42                 push    rbp
.text:0000000000004A43                 push    rbx
.text:0000000000004A44                 mov     rbx, r8
.text:0000000000004A47                 mov     r14, rsi
.text:0000000000004A4A                 mov     r15, rdx
.text:0000000000004A4D                 sub     rsp, 18h
.text:0000000000004A51                 test    r8, r8
.text:0000000000004A54                 cmovz   rbx, rax
.text:0000000000004A58                 mov     [rsp+48h+var_40], rcx
.text:0000000000004A5D                 call    ___errno_location
.text:0000000000004A62                 mov     r12d, [rax]
.text:0000000000004A65                 mov     rbp, rax
.text:0000000000004A68                 lea     rax, [rbx+8]
.text:0000000000004A6C                 sub     rsp, 8
.text:0000000000004A70                 mov     r9d, [rbx+4]
.text:0000000000004A74                 push    qword ptr [rbx+30h]
.text:0000000000004A77                 mov     r8d, [rbx]
.text:0000000000004A7A                 push    qword ptr [rbx+28h]
.text:0000000000004A7D                 mov     rdx, r15
.text:0000000000004A80                 push    rax
.text:0000000000004A81                 mov     rcx, [rsp+68h+var_40]
.text:0000000000004A86                 mov     rsi, r14
.text:0000000000004A89                 mov     rdi, r13
.text:0000000000004A8C                 call    quotearg_buffer_restyled
.text:0000000000004A91                 mov     [rbp+0], r12d
.text:0000000000004A95                 add     rsp, 38h
.text:0000000000004A99                 pop     rbx
.text:0000000000004A9A                 pop     rbp
.text:0000000000004A9B                 pop     r12
.text:0000000000004A9D                 pop     r13
.text:0000000000004A9F                 pop     r14
.text:0000000000004AA1                 pop     r15
.text:0000000000004AA3                 retn
.text:0000000000004AA3 ; } // starts at 4A30
.text:0000000000004AA3 quotearg_buffer endp
.text:0000000000004AA3
.text:0000000000004AA3 ; ---------------------------------------------------------------------------
.text:0000000000004AA4                 align 10h
.text:0000000000004AB0
.text:0000000000004AB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004AB0
.text:0000000000004AB0 ; Attributes: info_from_lumina
.text:0000000000004AB0
.text:0000000000004AB0 ; char *__fastcall quotearg_alloc_mem(const char *arg, size_t argsize, size_t *size, const quoting_options *o)
.text:0000000000004AB0                 public quotearg_alloc_mem
.text:0000000000004AB0 quotearg_alloc_mem proc near            ; CODE XREF: quotearg_alloc+5↓j
.text:0000000000004AB0
.text:0000000000004AB0 var_5C          = dword ptr -5Ch
.text:0000000000004AB0 var_58          = qword ptr -58h
.text:0000000000004AB0 var_50          = qword ptr -50h
.text:0000000000004AB0 var_48          = qword ptr -48h
.text:0000000000004AB0 var_40          = qword ptr -40h
.text:0000000000004AB0
.text:0000000000004AB0 ; __unwind {
.text:0000000000004AB0                 push    r15
.text:0000000000004AB2                 push    r14
.text:0000000000004AB4                 lea     rax, default_quoting_options
.text:0000000000004ABB                 push    r13
.text:0000000000004ABD                 push    r12
.text:0000000000004ABF                 mov     r12, rdx
.text:0000000000004AC2                 push    rbp
.text:0000000000004AC3                 push    rbx
.text:0000000000004AC4                 mov     rbx, rcx
.text:0000000000004AC7                 mov     r14, rdi
.text:0000000000004ACA                 mov     r15, rsi
.text:0000000000004ACD                 sub     rsp, 38h
.text:0000000000004AD1                 test    rcx, rcx
.text:0000000000004AD4                 cmovz   rbx, rax
.text:0000000000004AD8                 xor     ebp, ebp
.text:0000000000004ADA                 call    ___errno_location
.text:0000000000004ADF                 test    r12, r12
.text:0000000000004AE2                 mov     r13, rax
.text:0000000000004AE5                 mov     eax, [rax]
.text:0000000000004AE7                 setz    bpl
.text:0000000000004AEB                 or      ebp, [rbx+4]
.text:0000000000004AEE                 lea     r10, [rbx+8]
.text:0000000000004AF2                 sub     rsp, 8
.text:0000000000004AF6                 mov     r8d, [rbx]
.text:0000000000004AF9                 mov     rcx, r15
.text:0000000000004AFC                 mov     [rsp+70h+var_5C], eax
.text:0000000000004B00                 push    qword ptr [rbx+30h]
.text:0000000000004B03                 mov     rdx, r14
.text:0000000000004B06                 push    qword ptr [rbx+28h]
.text:0000000000004B09                 push    r10
.text:0000000000004B0B                 xor     esi, esi
.text:0000000000004B0D                 mov     r9d, ebp
.text:0000000000004B10                 xor     edi, edi
.text:0000000000004B12                 mov     [rsp+88h+var_48], r10
.text:0000000000004B17                 call    quotearg_buffer_restyled
.text:0000000000004B1C                 lea     rsi, [rax+1]
.text:0000000000004B20                 mov     [rsp+88h+var_40], rax
.text:0000000000004B25                 add     rsp, 20h
.text:0000000000004B29                 mov     rdi, rsi
.text:0000000000004B2C                 mov     [rsp+68h+var_50], rsi
.text:0000000000004B31                 call    xmalloc
.text:0000000000004B36                 mov     [rsp+68h+var_58], rax
.text:0000000000004B3B                 sub     rsp, 8
.text:0000000000004B3F                 push    qword ptr [rbx+30h]
.text:0000000000004B42                 push    qword ptr [rbx+28h]
.text:0000000000004B45                 mov     r10, [rsp+80h+var_48]
.text:0000000000004B4A                 mov     r9d, ebp
.text:0000000000004B4D                 mov     r8d, [rbx]
.text:0000000000004B50                 mov     rcx, r15
.text:0000000000004B53                 mov     rdx, r14
.text:0000000000004B56                 mov     rdi, rax
.text:0000000000004B59                 push    r10
.text:0000000000004B5B                 mov     rsi, [rsp+88h+var_50]
.text:0000000000004B60                 call    quotearg_buffer_restyled
.text:0000000000004B65                 mov     eax, [rsp+88h+var_5C]
.text:0000000000004B69                 add     rsp, 20h
.text:0000000000004B6D                 test    r12, r12
.text:0000000000004B70                 mov     [r13+0], eax
.text:0000000000004B74                 jz      short loc_4B7F
.text:0000000000004B76                 mov     r11, [rsp+68h+var_40]
.text:0000000000004B7B                 mov     [r12], r11
.text:0000000000004B7F
.text:0000000000004B7F loc_4B7F:                               ; CODE XREF: quotearg_alloc_mem+C4↑j
.text:0000000000004B7F                 mov     rax, [rsp+68h+var_58]
.text:0000000000004B84                 add     rsp, 38h
.text:0000000000004B88                 pop     rbx
.text:0000000000004B89                 pop     rbp
.text:0000000000004B8A                 pop     r12
.text:0000000000004B8C                 pop     r13
.text:0000000000004B8E                 pop     r14
.text:0000000000004B90                 pop     r15
.text:0000000000004B92                 retn
.text:0000000000004B92 ; } // starts at 4AB0
.text:0000000000004B92 quotearg_alloc_mem endp
.text:0000000000004B92
.text:0000000000004B92 ; ---------------------------------------------------------------------------
.text:0000000000004B93                 align 20h
.text:0000000000004BA0
.text:0000000000004BA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004BA0
.text:0000000000004BA0
.text:0000000000004BA0                 public quotearg_alloc
.text:0000000000004BA0 quotearg_alloc  proc near
.text:0000000000004BA0 ; __unwind {
.text:0000000000004BA0                 mov     rcx, rdx
.text:0000000000004BA3                 xor     edx, edx
.text:0000000000004BA5                 jmp     quotearg_alloc_mem
.text:0000000000004BA5 ; } // starts at 4BA0
.text:0000000000004BA5 quotearg_alloc  endp
.text:0000000000004BA5
.text:0000000000004BA5 ; ---------------------------------------------------------------------------
.text:0000000000004BAA                 align 10h
.text:0000000000004BB0
.text:0000000000004BB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004BB0
.text:0000000000004BB0 ; Attributes: info_from_lumina
.text:0000000000004BB0
.text:0000000000004BB0 ; void __cdecl quotearg_free()
.text:0000000000004BB0                 public quotearg_free
.text:0000000000004BB0 quotearg_free   proc near
.text:0000000000004BB0 ; __unwind {
.text:0000000000004BB0                 mov     eax, cs:nslots
.text:0000000000004BB6                 push    r12
.text:0000000000004BB8                 mov     r12, cs:slotvec
.text:0000000000004BBF                 push    rbp
.text:0000000000004BC0                 push    rbx
.text:0000000000004BC1                 cmp     eax, 1
.text:0000000000004BC4                 jle     short loc_4BF1
.text:0000000000004BC6                 sub     eax, 2
.text:0000000000004BC9                 lea     rbx, [r12+18h]
.text:0000000000004BCE                 shl     rax, 4
.text:0000000000004BD2                 lea     rbp, [r12+rax+28h]
.text:0000000000004BD7                 nop     word ptr [rax+rax+00000000h]
.text:0000000000004BE0
.text:0000000000004BE0 loc_4BE0:                               ; CODE XREF: quotearg_free+3F↓j
.text:0000000000004BE0                 mov     rdi, [rbx]      ; ptr
.text:0000000000004BE3                 add     rbx, 10h
.text:0000000000004BE7                 call    _free
.text:0000000000004BEC                 cmp     rbx, rbp
.text:0000000000004BEF                 jnz     short loc_4BE0
.text:0000000000004BF1
.text:0000000000004BF1 loc_4BF1:                               ; CODE XREF: quotearg_free+14↑j
.text:0000000000004BF1                 mov     rdi, [r12+8]    ; ptr
.text:0000000000004BF6                 lea     rbx, slot0
.text:0000000000004BFD                 cmp     rdi, rbx
.text:0000000000004C00                 jz      short loc_4C19
.text:0000000000004C02                 call    _free
.text:0000000000004C07                 mov     cs:slotvec0, 100h
.text:0000000000004C12                 mov     cs:off_20C078, rbx
.text:0000000000004C19
.text:0000000000004C19 loc_4C19:                               ; CODE XREF: quotearg_free+50↑j
.text:0000000000004C19                 lea     rbx, slotvec0
.text:0000000000004C20                 cmp     r12, rbx
.text:0000000000004C23                 jz      short loc_4C34
.text:0000000000004C25                 mov     rdi, r12        ; ptr
.text:0000000000004C28                 call    _free
.text:0000000000004C2D                 mov     cs:slotvec, rbx
.text:0000000000004C34
.text:0000000000004C34 loc_4C34:                               ; CODE XREF: quotearg_free+73↑j
.text:0000000000004C34                 pop     rbx
.text:0000000000004C35                 mov     cs:nslots, 1
.text:0000000000004C3F                 pop     rbp
.text:0000000000004C40                 pop     r12
.text:0000000000004C42                 retn
.text:0000000000004C42 ; } // starts at 4BB0
.text:0000000000004C42 quotearg_free   endp
.text:0000000000004C42
.text:0000000000004C42 ; ---------------------------------------------------------------------------
.text:0000000000004C43                 align 10h
.text:0000000000004C50
.text:0000000000004C50 ; =============== S U B R O U T I N E =======================================
.text:0000000000004C50
.text:0000000000004C50
.text:0000000000004C50                 public quotearg_n
.text:0000000000004C50 quotearg_n      proc near
.text:0000000000004C50 ; __unwind {
.text:0000000000004C50                 lea     rcx, default_quoting_options
.text:0000000000004C57                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004C5E                 jmp     quotearg_n_options
.text:0000000000004C5E ; } // starts at 4C50
.text:0000000000004C5E quotearg_n      endp
.text:0000000000004C5E
.text:0000000000004C5E ; ---------------------------------------------------------------------------
.text:0000000000004C63                 align 10h
.text:0000000000004C70
.text:0000000000004C70 ; =============== S U B R O U T I N E =======================================
.text:0000000000004C70
.text:0000000000004C70
.text:0000000000004C70                 public quotearg_n_mem
.text:0000000000004C70 quotearg_n_mem  proc near
.text:0000000000004C70 ; __unwind {
.text:0000000000004C70                 lea     rcx, default_quoting_options
.text:0000000000004C77                 jmp     quotearg_n_options
.text:0000000000004C77 ; } // starts at 4C70
.text:0000000000004C77 quotearg_n_mem  endp
.text:0000000000004C77
.text:0000000000004C77 ; ---------------------------------------------------------------------------
.text:0000000000004C7C                 align 20h
.text:0000000000004C80
.text:0000000000004C80 ; =============== S U B R O U T I N E =======================================
.text:0000000000004C80
.text:0000000000004C80
.text:0000000000004C80                 public quotearg
.text:0000000000004C80 quotearg        proc near
.text:0000000000004C80 ; __unwind {
.text:0000000000004C80                 lea     rcx, default_quoting_options
.text:0000000000004C87                 mov     rsi, rdi
.text:0000000000004C8A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004C91                 xor     edi, edi
.text:0000000000004C93                 jmp     quotearg_n_options
.text:0000000000004C93 ; } // starts at 4C80
.text:0000000000004C93 quotearg        endp
.text:0000000000004C93
.text:0000000000004C93 ; ---------------------------------------------------------------------------
.text:0000000000004C98                 align 20h
.text:0000000000004CA0
.text:0000000000004CA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004CA0
.text:0000000000004CA0
.text:0000000000004CA0                 public quotearg_mem
.text:0000000000004CA0 quotearg_mem    proc near
.text:0000000000004CA0 ; __unwind {
.text:0000000000004CA0                 lea     rcx, default_quoting_options
.text:0000000000004CA7                 mov     rdx, rsi
.text:0000000000004CAA                 mov     rsi, rdi
.text:0000000000004CAD                 xor     edi, edi
.text:0000000000004CAF                 jmp     quotearg_n_options
.text:0000000000004CAF ; } // starts at 4CA0
.text:0000000000004CAF quotearg_mem    endp
.text:0000000000004CAF
.text:0000000000004CAF ; ---------------------------------------------------------------------------
.text:0000000000004CB4                 align 20h
.text:0000000000004CC0
.text:0000000000004CC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004CC0
.text:0000000000004CC0 ; Attributes: info_from_lumina
.text:0000000000004CC0
.text:0000000000004CC0 ; char *__fastcall quotearg_n_style(int n, quoting_style s, const char *arg)
.text:0000000000004CC0                 public quotearg_n_style
.text:0000000000004CC0 quotearg_n_style proc near              ; CODE XREF: quotearg_style+7↓j
.text:0000000000004CC0
.text:0000000000004CC0 var_48          = dword ptr -48h
.text:0000000000004CC0 var_44          = qword ptr -44h
.text:0000000000004CC0 var_3C          = qword ptr -3Ch
.text:0000000000004CC0 var_34          = qword ptr -34h
.text:0000000000004CC0 var_2C          = qword ptr -2Ch
.text:0000000000004CC0 var_24          = qword ptr -24h
.text:0000000000004CC0 var_1C          = qword ptr -1Ch
.text:0000000000004CC0 var_14          = dword ptr -14h
.text:0000000000004CC0 var_10          = qword ptr -10h
.text:0000000000004CC0
.text:0000000000004CC0 ; __unwind {
.text:0000000000004CC0                 sub     rsp, 48h
.text:0000000000004CC4                 mov     rax, rdx
.text:0000000000004CC7                 mov     rdx, fs:28h
.text:0000000000004CD0                 mov     [rsp+48h+var_10], rdx
.text:0000000000004CD5                 xor     edx, edx
.text:0000000000004CD7                 cmp     esi, 0Ah
.text:0000000000004CDA                 jz      short loc_4D44
.text:0000000000004CDC                 mov     [rsp+48h+var_48], esi
.text:0000000000004CDF                 mov     rcx, rsp
.text:0000000000004CE2                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004CE9                 mov     rsi, rax
.text:0000000000004CEC                 mov     [rsp+48h+var_44], 0
.text:0000000000004CF5                 mov     [rsp+48h+var_3C], 0
.text:0000000000004CFE                 mov     [rsp+48h+var_34], 0
.text:0000000000004D07                 mov     [rsp+48h+var_2C], 0
.text:0000000000004D10                 mov     [rsp+48h+var_24], 0
.text:0000000000004D19                 mov     [rsp+48h+var_1C], 0
.text:0000000000004D22                 mov     [rsp+48h+var_14], 0
.text:0000000000004D2A                 call    quotearg_n_options
.text:0000000000004D2F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000004D34                 xor     rcx, fs:28h
.text:0000000000004D3D                 jnz     short loc_4D49
.text:0000000000004D3F                 add     rsp, 48h
.text:0000000000004D43                 retn
.text:0000000000004D44 ; ---------------------------------------------------------------------------
.text:0000000000004D44
.text:0000000000004D44 loc_4D44:                               ; CODE XREF: quotearg_n_style+1A↑j
.text:0000000000004D44                 call    _abort
.text:0000000000004D49 ; ---------------------------------------------------------------------------
.text:0000000000004D49
.text:0000000000004D49 loc_4D49:                               ; CODE XREF: quotearg_n_style+7D↑j
.text:0000000000004D49                 call    ___stack_chk_fail
.text:0000000000004D49 ; } // starts at 4CC0
.text:0000000000004D49 quotearg_n_style endp
.text:0000000000004D49
.text:0000000000004D49 ; ---------------------------------------------------------------------------
.text:0000000000004D4E                 align 10h
.text:0000000000004D50
.text:0000000000004D50 ; =============== S U B R O U T I N E =======================================
.text:0000000000004D50
.text:0000000000004D50 ; Attributes: info_from_lumina
.text:0000000000004D50
.text:0000000000004D50 ; char *__fastcall quotearg_n_style_mem(int n, quoting_style s, const char *arg, size_t argsize)
.text:0000000000004D50                 public quotearg_n_style_mem
.text:0000000000004D50 quotearg_n_style_mem proc near          ; CODE XREF: quotearg_style_mem+A↓j
.text:0000000000004D50
.text:0000000000004D50 var_48          = dword ptr -48h
.text:0000000000004D50 var_44          = qword ptr -44h
.text:0000000000004D50 var_3C          = qword ptr -3Ch
.text:0000000000004D50 var_34          = qword ptr -34h
.text:0000000000004D50 var_2C          = qword ptr -2Ch
.text:0000000000004D50 var_24          = qword ptr -24h
.text:0000000000004D50 var_1C          = qword ptr -1Ch
.text:0000000000004D50 var_14          = dword ptr -14h
.text:0000000000004D50 var_10          = qword ptr -10h
.text:0000000000004D50
.text:0000000000004D50 ; __unwind {
.text:0000000000004D50                 sub     rsp, 48h
.text:0000000000004D54                 mov     rax, rdx
.text:0000000000004D57                 mov     rdx, rcx
.text:0000000000004D5A                 mov     rcx, fs:28h
.text:0000000000004D63                 mov     [rsp+48h+var_10], rcx
.text:0000000000004D68                 xor     ecx, ecx
.text:0000000000004D6A                 cmp     esi, 0Ah
.text:0000000000004D6D                 jz      short loc_4DD0
.text:0000000000004D6F                 mov     [rsp+48h+var_48], esi
.text:0000000000004D72                 mov     rcx, rsp
.text:0000000000004D75                 mov     rsi, rax
.text:0000000000004D78                 mov     [rsp+48h+var_44], 0
.text:0000000000004D81                 mov     [rsp+48h+var_3C], 0
.text:0000000000004D8A                 mov     [rsp+48h+var_34], 0
.text:0000000000004D93                 mov     [rsp+48h+var_2C], 0
.text:0000000000004D9C                 mov     [rsp+48h+var_24], 0
.text:0000000000004DA5                 mov     [rsp+48h+var_1C], 0
.text:0000000000004DAE                 mov     [rsp+48h+var_14], 0
.text:0000000000004DB6                 call    quotearg_n_options
.text:0000000000004DBB                 mov     rdx, [rsp+48h+var_10]
.text:0000000000004DC0                 xor     rdx, fs:28h
.text:0000000000004DC9                 jnz     short loc_4DD5
.text:0000000000004DCB                 add     rsp, 48h
.text:0000000000004DCF                 retn
.text:0000000000004DD0 ; ---------------------------------------------------------------------------
.text:0000000000004DD0
.text:0000000000004DD0 loc_4DD0:                               ; CODE XREF: quotearg_n_style_mem+1D↑j
.text:0000000000004DD0                 call    _abort
.text:0000000000004DD5 ; ---------------------------------------------------------------------------
.text:0000000000004DD5
.text:0000000000004DD5 loc_4DD5:                               ; CODE XREF: quotearg_n_style_mem+79↑j
.text:0000000000004DD5                 call    ___stack_chk_fail
.text:0000000000004DD5 ; } // starts at 4D50
.text:0000000000004DD5 quotearg_n_style_mem endp
.text:0000000000004DD5
.text:0000000000004DD5 ; ---------------------------------------------------------------------------
.text:0000000000004DDA                 align 20h
.text:0000000000004DE0
.text:0000000000004DE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004DE0
.text:0000000000004DE0
.text:0000000000004DE0                 public quotearg_style
.text:0000000000004DE0 quotearg_style  proc near
.text:0000000000004DE0 ; __unwind {
.text:0000000000004DE0                 mov     rdx, rsi
.text:0000000000004DE3                 mov     esi, edi
.text:0000000000004DE5                 xor     edi, edi
.text:0000000000004DE7                 jmp     quotearg_n_style
.text:0000000000004DE7 ; } // starts at 4DE0
.text:0000000000004DE7 quotearg_style  endp
.text:0000000000004DE7
.text:0000000000004DE7 ; ---------------------------------------------------------------------------
.text:0000000000004DEC                 align 10h
.text:0000000000004DF0
.text:0000000000004DF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004DF0
.text:0000000000004DF0
.text:0000000000004DF0                 public quotearg_style_mem
.text:0000000000004DF0 quotearg_style_mem proc near
.text:0000000000004DF0 ; __unwind {
.text:0000000000004DF0                 mov     rcx, rdx
.text:0000000000004DF3                 mov     rdx, rsi
.text:0000000000004DF6                 mov     esi, edi
.text:0000000000004DF8                 xor     edi, edi
.text:0000000000004DFA                 jmp     quotearg_n_style_mem
.text:0000000000004DFA ; } // starts at 4DF0
.text:0000000000004DFA quotearg_style_mem endp
.text:0000000000004DFA
.text:0000000000004DFA ; ---------------------------------------------------------------------------
.text:0000000000004DFF                 align 20h
.text:0000000000004E00
.text:0000000000004E00 ; =============== S U B R O U T I N E =======================================
.text:0000000000004E00
.text:0000000000004E00 ; Attributes: info_from_lumina
.text:0000000000004E00
.text:0000000000004E00 ; char *__fastcall quotearg_char_mem(const char *arg, size_t argsize, char ch_0)
.text:0000000000004E00                 public quotearg_char_mem
.text:0000000000004E00 quotearg_char_mem proc near             ; CODE XREF: quotearg_char+B↓j
.text:0000000000004E00                                         ; quotearg_colon+C↓j ...
.text:0000000000004E00
.text:0000000000004E00 var_48          = xmmword ptr -48h
.text:0000000000004E00 var_38          = xmmword ptr -38h
.text:0000000000004E00 var_28          = xmmword ptr -28h
.text:0000000000004E00 var_18          = qword ptr -18h
.text:0000000000004E00 var_10          = qword ptr -10h
.text:0000000000004E00
.text:0000000000004E00 ; __unwind {
.text:0000000000004E00                 sub     rsp, 48h
.text:0000000000004E04                 mov     ecx, edx
.text:0000000000004E06                 mov     rax, fs:28h
.text:0000000000004E0F                 mov     [rsp+48h+var_10], rax
.text:0000000000004E14                 xor     eax, eax
.text:0000000000004E16                 mov     rax, cs:qword_20C210
.text:0000000000004E1D                 mov     r8, rsp
.text:0000000000004E20                 and     ecx, 1Fh
.text:0000000000004E23                 movdqa  xmm0, cs:default_quoting_options
.text:0000000000004E2B                 mov     [rsp+48h+var_18], rax
.text:0000000000004E30                 mov     eax, edx
.text:0000000000004E32                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000004E36                 shr     al, 5
.text:0000000000004E39                 movzx   eax, al
.text:0000000000004E3C                 lea     r9, [r8+rax*4+8]
.text:0000000000004E41                 movdqa  xmm0, cs:xmmword_20C1F0
.text:0000000000004E49                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000004E4E                 movdqa  xmm0, cs:xmmword_20C200
.text:0000000000004E56                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000004E5B                 mov     edx, [r9]
.text:0000000000004E5E                 mov     eax, edx
.text:0000000000004E60                 shr     eax, cl
.text:0000000000004E62                 not     eax
.text:0000000000004E64                 and     eax, 1
.text:0000000000004E67                 shl     eax, cl
.text:0000000000004E69                 mov     rcx, r8
.text:0000000000004E6C                 xor     eax, edx
.text:0000000000004E6E                 mov     rdx, rsi
.text:0000000000004E71                 mov     rsi, rdi
.text:0000000000004E74                 mov     [r9], eax
.text:0000000000004E77                 xor     edi, edi
.text:0000000000004E79                 call    quotearg_n_options
.text:0000000000004E7E                 mov     rsi, [rsp+48h+var_10]
.text:0000000000004E83                 xor     rsi, fs:28h
.text:0000000000004E8C                 jnz     short loc_4E93
.text:0000000000004E8E                 add     rsp, 48h
.text:0000000000004E92                 retn
.text:0000000000004E93 ; ---------------------------------------------------------------------------
.text:0000000000004E93
.text:0000000000004E93 loc_4E93:                               ; CODE XREF: quotearg_char_mem+8C↑j
.text:0000000000004E93                 call    ___stack_chk_fail
.text:0000000000004E93 ; } // starts at 4E00
.text:0000000000004E93 quotearg_char_mem endp
.text:0000000000004E93
.text:0000000000004E93 ; ---------------------------------------------------------------------------
.text:0000000000004E98                 align 20h
.text:0000000000004EA0
.text:0000000000004EA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004EA0
.text:0000000000004EA0
.text:0000000000004EA0                 public quotearg_char
.text:0000000000004EA0 quotearg_char   proc near
.text:0000000000004EA0 ; __unwind {
.text:0000000000004EA0                 movsx   edx, sil
.text:0000000000004EA4                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:0000000000004EAB                 jmp     quotearg_char_mem
.text:0000000000004EAB ; } // starts at 4EA0
.text:0000000000004EAB quotearg_char   endp
.text:0000000000004EAB
.text:0000000000004EB0
.text:0000000000004EB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004EB0
.text:0000000000004EB0
.text:0000000000004EB0                 public quotearg_colon
.text:0000000000004EB0 quotearg_colon  proc near               ; CODE XREF: close_stdout+65↑p
.text:0000000000004EB0 ; __unwind {
.text:0000000000004EB0                 mov     edx, 3Ah ; ':'
.text:0000000000004EB5                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:0000000000004EBC                 jmp     quotearg_char_mem
.text:0000000000004EBC ; } // starts at 4EB0
.text:0000000000004EBC quotearg_colon  endp
.text:0000000000004EBC
.text:0000000000004EBC ; ---------------------------------------------------------------------------
.text:0000000000004EC1                 align 10h
.text:0000000000004ED0
.text:0000000000004ED0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004ED0
.text:0000000000004ED0
.text:0000000000004ED0                 public quotearg_colon_mem
.text:0000000000004ED0 quotearg_colon_mem proc near
.text:0000000000004ED0 ; __unwind {
.text:0000000000004ED0                 mov     edx, 3Ah ; ':'
.text:0000000000004ED5                 jmp     quotearg_char_mem
.text:0000000000004ED5 ; } // starts at 4ED0
.text:0000000000004ED5 quotearg_colon_mem endp
.text:0000000000004ED5
.text:0000000000004ED5 ; ---------------------------------------------------------------------------
.text:0000000000004EDA                 align 20h
.text:0000000000004EE0
.text:0000000000004EE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004EE0
.text:0000000000004EE0 ; Attributes: info_from_lumina
.text:0000000000004EE0
.text:0000000000004EE0 ; char *__fastcall quotearg_n_style_colon(int n, quoting_style s, const char *arg)
.text:0000000000004EE0                 public quotearg_n_style_colon
.text:0000000000004EE0 quotearg_n_style_colon proc near
.text:0000000000004EE0
.text:0000000000004EE0 var_48          = dword ptr -48h
.text:0000000000004EE0 var_44          = qword ptr -44h
.text:0000000000004EE0 var_3C          = qword ptr -3Ch
.text:0000000000004EE0 var_34          = qword ptr -34h
.text:0000000000004EE0 var_2C          = qword ptr -2Ch
.text:0000000000004EE0 var_24          = qword ptr -24h
.text:0000000000004EE0 var_1C          = qword ptr -1Ch
.text:0000000000004EE0 var_14          = dword ptr -14h
.text:0000000000004EE0 var_10          = qword ptr -10h
.text:0000000000004EE0
.text:0000000000004EE0 ; __unwind {
.text:0000000000004EE0                 sub     rsp, 48h
.text:0000000000004EE4                 mov     rax, rdx
.text:0000000000004EE7                 mov     rdx, fs:28h
.text:0000000000004EF0                 mov     [rsp+48h+var_10], rdx
.text:0000000000004EF5                 xor     edx, edx
.text:0000000000004EF7                 cmp     esi, 0Ah
.text:0000000000004EFA                 jz      short loc_4F64
.text:0000000000004EFC                 mov     [rsp+48h+var_48], esi
.text:0000000000004EFF                 mov     rcx, rsp
.text:0000000000004F02                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004F09                 mov     rsi, rax
.text:0000000000004F0C                 mov     [rsp+48h+var_44], 0
.text:0000000000004F15                 mov     [rsp+48h+var_3C], 4000000h
.text:0000000000004F1E                 mov     [rsp+48h+var_34], 0
.text:0000000000004F27                 mov     [rsp+48h+var_2C], 0
.text:0000000000004F30                 mov     [rsp+48h+var_24], 0
.text:0000000000004F39                 mov     [rsp+48h+var_1C], 0
.text:0000000000004F42                 mov     [rsp+48h+var_14], 0
.text:0000000000004F4A                 call    quotearg_n_options
.text:0000000000004F4F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000004F54                 xor     rcx, fs:28h
.text:0000000000004F5D                 jnz     short loc_4F69
.text:0000000000004F5F                 add     rsp, 48h
.text:0000000000004F63                 retn
.text:0000000000004F64 ; ---------------------------------------------------------------------------
.text:0000000000004F64
.text:0000000000004F64 loc_4F64:                               ; CODE XREF: quotearg_n_style_colon+1A↑j
.text:0000000000004F64                 call    _abort
.text:0000000000004F69 ; ---------------------------------------------------------------------------
.text:0000000000004F69
.text:0000000000004F69 loc_4F69:                               ; CODE XREF: quotearg_n_style_colon+7D↑j
.text:0000000000004F69                 call    ___stack_chk_fail
.text:0000000000004F69 ; } // starts at 4EE0
.text:0000000000004F69 quotearg_n_style_colon endp
.text:0000000000004F69
.text:0000000000004F69 ; ---------------------------------------------------------------------------
.text:0000000000004F6E                 align 10h
.text:0000000000004F70
.text:0000000000004F70 ; =============== S U B R O U T I N E =======================================
.text:0000000000004F70
.text:0000000000004F70 ; Attributes: info_from_lumina
.text:0000000000004F70
.text:0000000000004F70 ; char *__fastcall quotearg_n_custom_mem(int n, const char *left_quote, const char *right_quote, const char *arg, size_t argsize)
.text:0000000000004F70                 public quotearg_n_custom_mem
.text:0000000000004F70 quotearg_n_custom_mem proc near         ; CODE XREF: quotearg_n_custom+7↓j
.text:0000000000004F70                                         ; quotearg_custom+12↓j ...
.text:0000000000004F70
.text:0000000000004F70 var_48          = xmmword ptr -48h
.text:0000000000004F70 var_38          = xmmword ptr -38h
.text:0000000000004F70 var_28          = xmmword ptr -28h
.text:0000000000004F70 var_18          = qword ptr -18h
.text:0000000000004F70 var_10          = qword ptr -10h
.text:0000000000004F70
.text:0000000000004F70 ; __unwind {
.text:0000000000004F70                 sub     rsp, 48h
.text:0000000000004F74                 mov     r9, rcx
.text:0000000000004F77                 mov     rcx, cs:qword_20C210
.text:0000000000004F7E                 movdqa  xmm0, cs:default_quoting_options
.text:0000000000004F86                 mov     rax, fs:28h
.text:0000000000004F8F                 mov     [rsp+48h+var_10], rax
.text:0000000000004F94                 xor     eax, eax
.text:0000000000004F96                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000004F9A                 test    rsi, rsi
.text:0000000000004F9D                 mov     [rsp+48h+var_18], rcx
.text:0000000000004FA2                 mov     dword ptr [rsp+48h+var_48], 0Ah
.text:0000000000004FA9                 movdqa  xmm0, cs:xmmword_20C1F0
.text:0000000000004FB1                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000004FB6                 movdqa  xmm0, cs:xmmword_20C200
.text:0000000000004FBE                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000004FC3                 jz      short loc_4FF7
.text:0000000000004FC5                 test    rdx, rdx
.text:0000000000004FC8                 jz      short loc_4FF7
.text:0000000000004FCA                 mov     qword ptr [rsp+48h+var_28+8], rsi
.text:0000000000004FCF                 mov     [rsp+48h+var_18], rdx
.text:0000000000004FD4                 mov     rcx, rsp
.text:0000000000004FD7                 mov     rdx, r8
.text:0000000000004FDA                 mov     rsi, r9
.text:0000000000004FDD                 call    quotearg_n_options
.text:0000000000004FE2                 mov     rdi, [rsp+48h+var_10]
.text:0000000000004FE7                 xor     rdi, fs:28h
.text:0000000000004FF0                 jnz     short loc_4FFC
.text:0000000000004FF2                 add     rsp, 48h
.text:0000000000004FF6                 retn
.text:0000000000004FF7 ; ---------------------------------------------------------------------------
.text:0000000000004FF7
.text:0000000000004FF7 loc_4FF7:                               ; CODE XREF: quotearg_n_custom_mem+53↑j
.text:0000000000004FF7                                         ; quotearg_n_custom_mem+58↑j
.text:0000000000004FF7                 call    _abort
.text:0000000000004FFC ; ---------------------------------------------------------------------------
.text:0000000000004FFC
.text:0000000000004FFC loc_4FFC:                               ; CODE XREF: quotearg_n_custom_mem+80↑j
.text:0000000000004FFC                 call    ___stack_chk_fail
.text:0000000000004FFC ; } // starts at 4F70
.text:0000000000004FFC quotearg_n_custom_mem endp
.text:0000000000004FFC
.text:0000000000004FFC ; ---------------------------------------------------------------------------
.text:0000000000005001                 align 10h
.text:0000000000005010
.text:0000000000005010 ; =============== S U B R O U T I N E =======================================
.text:0000000000005010
.text:0000000000005010
.text:0000000000005010                 public quotearg_n_custom
.text:0000000000005010 quotearg_n_custom proc near
.text:0000000000005010 ; __unwind {
.text:0000000000005010                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000005017                 jmp     quotearg_n_custom_mem
.text:0000000000005017 ; } // starts at 5010
.text:0000000000005017 quotearg_n_custom endp
.text:0000000000005017
.text:0000000000005017 ; ---------------------------------------------------------------------------
.text:000000000000501C                 align 20h
.text:0000000000005020
.text:0000000000005020 ; =============== S U B R O U T I N E =======================================
.text:0000000000005020
.text:0000000000005020
.text:0000000000005020                 public quotearg_custom
.text:0000000000005020 quotearg_custom proc near
.text:0000000000005020 ; __unwind {
.text:0000000000005020                 mov     rcx, rdx
.text:0000000000005023                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:000000000000502A                 mov     rdx, rsi
.text:000000000000502D                 mov     rsi, rdi
.text:0000000000005030                 xor     edi, edi
.text:0000000000005032                 jmp     quotearg_n_custom_mem
.text:0000000000005032 ; } // starts at 5020
.text:0000000000005032 quotearg_custom endp
.text:0000000000005032
.text:0000000000005032 ; ---------------------------------------------------------------------------
.text:0000000000005037                 align 20h
.text:0000000000005040
.text:0000000000005040 ; =============== S U B R O U T I N E =======================================
.text:0000000000005040
.text:0000000000005040
.text:0000000000005040                 public quotearg_custom_mem
.text:0000000000005040 quotearg_custom_mem proc near
.text:0000000000005040 ; __unwind {
.text:0000000000005040                 mov     r8, rcx
.text:0000000000005043                 mov     rcx, rdx
.text:0000000000005046                 mov     rdx, rsi
.text:0000000000005049                 mov     rsi, rdi
.text:000000000000504C                 xor     edi, edi
.text:000000000000504E                 jmp     quotearg_n_custom_mem
.text:000000000000504E ; } // starts at 5040
.text:000000000000504E quotearg_custom_mem endp
.text:000000000000504E
.text:000000000000504E ; ---------------------------------------------------------------------------
.text:0000000000005053                 align 20h
.text:0000000000005060
.text:0000000000005060 ; =============== S U B R O U T I N E =======================================
.text:0000000000005060
.text:0000000000005060
.text:0000000000005060                 public quote_n_mem
.text:0000000000005060 quote_n_mem     proc near
.text:0000000000005060 ; __unwind {
.text:0000000000005060                 lea     rcx, quote_quoting_options
.text:0000000000005067                 jmp     quotearg_n_options
.text:0000000000005067 ; } // starts at 5060
.text:0000000000005067 quote_n_mem     endp
.text:0000000000005067
.text:0000000000005067 ; ---------------------------------------------------------------------------
.text:000000000000506C                 align 10h
.text:0000000000005070
.text:0000000000005070 ; =============== S U B R O U T I N E =======================================
.text:0000000000005070
.text:0000000000005070
.text:0000000000005070                 public quote_mem
.text:0000000000005070 quote_mem       proc near
.text:0000000000005070 ; __unwind {
.text:0000000000005070                 lea     rcx, quote_quoting_options
.text:0000000000005077                 mov     rdx, rsi
.text:000000000000507A                 mov     rsi, rdi
.text:000000000000507D                 xor     edi, edi
.text:000000000000507F                 jmp     quotearg_n_options
.text:000000000000507F ; } // starts at 5070
.text:000000000000507F quote_mem       endp
.text:000000000000507F
.text:000000000000507F ; ---------------------------------------------------------------------------
.text:0000000000005084                 align 10h
.text:0000000000005090
.text:0000000000005090 ; =============== S U B R O U T I N E =======================================
.text:0000000000005090
.text:0000000000005090
.text:0000000000005090                 public quote_n
.text:0000000000005090 quote_n         proc near               ; CODE XREF: or+36E↑p
.text:0000000000005090                                         ; or+37F↑p
.text:0000000000005090 ; __unwind {
.text:0000000000005090                 lea     rcx, quote_quoting_options
.text:0000000000005097                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000509E                 jmp     quotearg_n_options
.text:000000000000509E ; } // starts at 5090
.text:000000000000509E quote_n         endp
.text:000000000000509E
.text:000000000000509E ; ---------------------------------------------------------------------------
.text:00000000000050A3                 align 10h
.text:00000000000050B0
.text:00000000000050B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000050B0
.text:00000000000050B0
.text:00000000000050B0                 public quote
.text:00000000000050B0 quote           proc near               ; CODE XREF: main+16A↑p
.text:00000000000050B0                                         ; main+19D↑p ...
.text:00000000000050B0 ; __unwind {
.text:00000000000050B0                 lea     rcx, quote_quoting_options
.text:00000000000050B7                 mov     rsi, rdi
.text:00000000000050BA                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000050C1                 xor     edi, edi
.text:00000000000050C3                 jmp     quotearg_n_options
.text:00000000000050C3 ; } // starts at 50B0
.text:00000000000050C3 quote           endp
.text:00000000000050C3
.text:00000000000050C3 ; ---------------------------------------------------------------------------
.text:00000000000050C8                 align 10h
.text:00000000000050D0
.text:00000000000050D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000050D0
.text:00000000000050D0
.text:00000000000050D0                 public strintcmp
.text:00000000000050D0 strintcmp       proc near               ; CODE XREF: binary_operator+359↑p
.text:00000000000050D0 ; __unwind {
.text:00000000000050D0                 movzx   r8d, byte ptr [rdi]
.text:00000000000050D4                 movzx   edx, byte ptr [rsi]
.text:00000000000050D7                 cmp     r8b, 2Dh ; '-'
.text:00000000000050DB                 jz      loc_5180
.text:00000000000050E1                 cmp     dl, 2Dh ; '-'
.text:00000000000050E4                 jz      loc_51C8
.text:00000000000050EA                 nop     word ptr [rax+rax+00h]
.text:00000000000050F0
.text:00000000000050F0 loc_50F0:                               ; CODE XREF: strintcmp+1C0↓j
.text:00000000000050F0                 cmp     r8b, 30h ; '0'
.text:00000000000050F4                 jz      loc_5288
.text:00000000000050FA
.text:00000000000050FA loc_50FA:                               ; CODE XREF: strintcmp+1AF↓j
.text:00000000000050FA                 cmp     dl, 30h ; '0'
.text:00000000000050FD                 jz      loc_5278
.text:0000000000005103                 movzx   eax, dl
.text:0000000000005106                 cmp     dl, r8b
.text:0000000000005109                 lea     ecx, [rax-30h]
.text:000000000000510C                 jnz     loc_52A8
.text:0000000000005112                 cmp     ecx, 9
.text:0000000000005115                 ja      loc_5340
.text:000000000000511B
.text:000000000000511B loc_511B:                               ; CODE XREF: strintcmp+6B↓j
.text:000000000000511B                 add     rdi, 1
.text:000000000000511F                 add     rsi, 1
.text:0000000000005123                 movzx   eax, byte ptr [rsi]
.text:0000000000005126                 movzx   r8d, byte ptr [rdi]
.text:000000000000512A                 mov     edx, eax
.text:000000000000512C                 lea     ecx, [rax-30h]
.text:000000000000512F                 cmp     r8b, al
.text:0000000000005132                 jnz     loc_52A8
.text:0000000000005138                 cmp     ecx, 9
.text:000000000000513B                 jbe     short loc_511B
.text:000000000000513D                 movzx   edx, r8b
.text:0000000000005141
.text:0000000000005141 loc_5141:                               ; CODE XREF: strintcmp+1E2↓j
.text:0000000000005141                 xor     r9d, r9d
.text:0000000000005144                 cmp     ecx, 9
.text:0000000000005147                 ja      loc_5340
.text:000000000000514D                 nop     dword ptr [rax]
.text:0000000000005150
.text:0000000000005150 loc_5150:                               ; CODE XREF: strintcmp+205↓j
.text:0000000000005150                 xor     ecx, ecx
.text:0000000000005152                 nop     word ptr [rax+rax+00h]
.text:0000000000005158
.text:0000000000005158 loc_5158:                               ; CODE XREF: strintcmp+97↓j
.text:0000000000005158                 movzx   eax, byte ptr [rsi+rcx+1]
.text:000000000000515D                 add     rcx, 1
.text:0000000000005161                 sub     eax, 30h ; '0'
.text:0000000000005164                 cmp     eax, 9
.text:0000000000005167                 jbe     short loc_5158
.text:0000000000005169                 cmp     r9, rcx
.text:000000000000516C                 jz      loc_5343
.text:0000000000005172                 sbb     eax, eax
.text:0000000000005174                 or      eax, 1
.text:0000000000005177                 retn
.text:0000000000005177 ; ---------------------------------------------------------------------------
.text:0000000000005178                 align 20h
.text:0000000000005180
.text:0000000000005180 loc_5180:                               ; CODE XREF: strintcmp+B↑j
.text:0000000000005180                                         ; strintcmp+BA↓j
.text:0000000000005180                 add     rdi, 1
.text:0000000000005184                 movzx   ecx, byte ptr [rdi]
.text:0000000000005187                 cmp     cl, 30h ; '0'
.text:000000000000518A                 jz      short loc_5180
.text:000000000000518C                 movzx   eax, cl
.text:000000000000518F                 cmp     dl, 2Dh ; '-'
.text:0000000000005192                 lea     r8d, [rax-30h]
.text:0000000000005196                 jz      short loc_5200
.text:0000000000005198                 cmp     r8d, 9
.text:000000000000519C                 jbe     loc_536E
.text:00000000000051A2                 nop     word ptr [rax+rax+00h]
.text:00000000000051A8
.text:00000000000051A8 loc_51A8:                               ; CODE XREF: strintcmp+1CF↓j
.text:00000000000051A8                 cmp     dl, 30h ; '0'
.text:00000000000051AB                 jz      loc_5298
.text:00000000000051B1                 sub     edx, 30h ; '0'
.text:00000000000051B4                 xor     r9d, r9d
.text:00000000000051B7                 cmp     edx, 9
.text:00000000000051BA                 setbe   r9b
.text:00000000000051BE                 mov     eax, r9d
.text:00000000000051C1                 neg     eax
.text:00000000000051C3                 retn
.text:00000000000051C3 ; ---------------------------------------------------------------------------
.text:00000000000051C4                 align 8
.text:00000000000051C8
.text:00000000000051C8 loc_51C8:                               ; CODE XREF: strintcmp+14↑j
.text:00000000000051C8                                         ; strintcmp+101↓j
.text:00000000000051C8                 add     rsi, 1
.text:00000000000051CC                 movzx   eax, byte ptr [rsi]
.text:00000000000051CF                 cmp     al, 30h ; '0'
.text:00000000000051D1                 jz      short loc_51C8
.text:00000000000051D3                 lea     edx, [rax-30h]
.text:00000000000051D6                 mov     eax, 1
.text:00000000000051DB                 cmp     edx, 9
.text:00000000000051DE                 jbe     locret_52E3
.text:00000000000051E4
.text:00000000000051E4 loc_51E4:                               ; CODE XREF: strintcmp+220↓j
.text:00000000000051E4                 cmp     r8b, 30h ; '0'
.text:00000000000051E8                 jz      loc_52E8
.text:00000000000051EE                 sub     r8d, 30h ; '0'
.text:00000000000051F2                 xor     eax, eax
.text:00000000000051F4                 cmp     r8d, 9
.text:00000000000051F8                 setbe   al
.text:00000000000051FB                 retn
.text:00000000000051FB ; ---------------------------------------------------------------------------
.text:00000000000051FC                 align 20h
.text:0000000000005200
.text:0000000000005200 loc_5200:                               ; CODE XREF: strintcmp+C6↑j
.text:0000000000005200                                         ; strintcmp+13C↓j
.text:0000000000005200                 add     rsi, 1
.text:0000000000005204                 movzx   r9d, byte ptr [rsi]
.text:0000000000005208                 cmp     r9b, 30h ; '0'
.text:000000000000520C                 jz      short loc_5200
.text:000000000000520E                 cmp     cl, r9b
.text:0000000000005211                 jnz     loc_5354
.text:0000000000005217                 cmp     r8d, 9
.text:000000000000521B                 lea     edx, [rax-30h]
.text:000000000000521E                 ja      short loc_5241
.text:0000000000005220
.text:0000000000005220 loc_5220:                               ; CODE XREF: strintcmp+16F↓j
.text:0000000000005220                 add     rdi, 1
.text:0000000000005224                 add     rsi, 1
.text:0000000000005228                 movzx   eax, byte ptr [rsi]
.text:000000000000522B                 movzx   ecx, byte ptr [rdi]
.text:000000000000522E                 mov     r9d, eax
.text:0000000000005231                 lea     edx, [rax-30h]
.text:0000000000005234                 cmp     cl, al
.text:0000000000005236                 jnz     loc_52F8
.text:000000000000523C                 cmp     edx, 9
.text:000000000000523F                 jbe     short loc_5220
.text:0000000000005241
.text:0000000000005241 loc_5241:                               ; CODE XREF: strintcmp+14E↑j
.text:0000000000005241                                         ; strintcmp+234↓j
.text:0000000000005241                 xor     r10d, r10d
.text:0000000000005244                 cmp     edx, 9
.text:0000000000005247                 ja      loc_5340
.text:000000000000524D
.text:000000000000524D loc_524D:                               ; CODE XREF: strintcmp+255↓j
.text:000000000000524D                 xor     edx, edx
.text:000000000000524F                 nop
.text:0000000000005250
.text:0000000000005250 loc_5250:                               ; CODE XREF: strintcmp+18F↓j
.text:0000000000005250                 movzx   eax, byte ptr [rsi+rdx+1]
.text:0000000000005255                 add     rdx, 1
.text:0000000000005259                 sub     eax, 30h ; '0'
.text:000000000000525C                 cmp     eax, 9
.text:000000000000525F                 jbe     short loc_5250
.text:0000000000005261                 cmp     r10, rdx
.text:0000000000005264                 jz      loc_535D
.text:000000000000526A                 sbb     eax, eax
.text:000000000000526C                 and     eax, 2
.text:000000000000526F                 sub     eax, 1
.text:0000000000005272                 retn
.text:0000000000005272 ; ---------------------------------------------------------------------------
.text:0000000000005273                 align 8
.text:0000000000005278
.text:0000000000005278 loc_5278:                               ; CODE XREF: strintcmp+2D↑j
.text:0000000000005278                 add     rsi, 1
.text:000000000000527C                 movzx   edx, byte ptr [rsi]
.text:000000000000527F                 jmp     loc_50FA
.text:000000000000527F ; ---------------------------------------------------------------------------
.text:0000000000005284                 align 8
.text:0000000000005288
.text:0000000000005288 loc_5288:                               ; CODE XREF: strintcmp+24↑j
.text:0000000000005288                 add     rdi, 1
.text:000000000000528C                 movzx   r8d, byte ptr [rdi]
.text:0000000000005290                 jmp     loc_50F0
.text:0000000000005290 ; ---------------------------------------------------------------------------
.text:0000000000005295                 align 8
.text:0000000000005298
.text:0000000000005298 loc_5298:                               ; CODE XREF: strintcmp+DB↑j
.text:0000000000005298                 add     rsi, 1
.text:000000000000529C                 movzx   edx, byte ptr [rsi]
.text:000000000000529F                 jmp     loc_51A8
.text:000000000000529F ; ---------------------------------------------------------------------------
.text:00000000000052A4                 align 8
.text:00000000000052A8
.text:00000000000052A8 loc_52A8:                               ; CODE XREF: strintcmp+3C↑j
.text:00000000000052A8                                         ; strintcmp+62↑j
.text:00000000000052A8                 movzx   eax, r8b
.text:00000000000052AC                 sub     eax, 30h ; '0'
.text:00000000000052AF                 cmp     eax, 9
.text:00000000000052B2                 ja      loc_5141
.text:00000000000052B8                 xor     r9d, r9d
.text:00000000000052BB                 nop     dword ptr [rax+rax+00h]
.text:00000000000052C0
.text:00000000000052C0 loc_52C0:                               ; CODE XREF: strintcmp+200↓j
.text:00000000000052C0                 movzx   eax, byte ptr [rdi+r9+1]
.text:00000000000052C6                 add     r9, 1
.text:00000000000052CA                 sub     eax, 30h ; '0'
.text:00000000000052CD                 cmp     eax, 9
.text:00000000000052D0                 jbe     short loc_52C0
.text:00000000000052D2                 cmp     ecx, 9
.text:00000000000052D5                 jbe     loc_5150
.text:00000000000052DB                 xor     eax, eax
.text:00000000000052DD                 test    r9, r9
.text:00000000000052E0                 setnz   al
.text:00000000000052E3
.text:00000000000052E3 locret_52E3:                            ; CODE XREF: strintcmp+10E↑j
.text:00000000000052E3                                         ; strintcmp+278↓j ...
.text:00000000000052E3                 rep retn
.text:00000000000052E3 ; ---------------------------------------------------------------------------
.text:00000000000052E5                 align 8
.text:00000000000052E8
.text:00000000000052E8 loc_52E8:                               ; CODE XREF: strintcmp+118↑j
.text:00000000000052E8                 add     rdi, 1
.text:00000000000052EC                 movzx   r8d, byte ptr [rdi]
.text:00000000000052F0                 jmp     loc_51E4
.text:00000000000052F0 ; ---------------------------------------------------------------------------
.text:00000000000052F5                 align 8
.text:00000000000052F8
.text:00000000000052F8 loc_52F8:                               ; CODE XREF: strintcmp+166↑j
.text:00000000000052F8                 movzx   r8d, cl
.text:00000000000052FC                 sub     r8d, 30h ; '0'
.text:0000000000005300
.text:0000000000005300 loc_5300:                               ; CODE XREF: strintcmp+28B↓j
.text:0000000000005300                 cmp     r8d, 9
.text:0000000000005304                 ja      loc_5241
.text:000000000000530A                 xor     r10d, r10d
.text:000000000000530D                 nop     dword ptr [rax]
.text:0000000000005310
.text:0000000000005310 loc_5310:                               ; CODE XREF: strintcmp+250↓j
.text:0000000000005310                 movzx   eax, byte ptr [rdi+r10+1]
.text:0000000000005316                 add     r10, 1
.text:000000000000531A                 sub     eax, 30h ; '0'
.text:000000000000531D                 cmp     eax, 9
.text:0000000000005320                 jbe     short loc_5310
.text:0000000000005322                 cmp     edx, 9
.text:0000000000005325                 jbe     loc_524D
.text:000000000000532B                 xor     eax, eax
.text:000000000000532D                 test    r10, r10
.text:0000000000005330                 setnz   al
.text:0000000000005333                 neg     eax
.text:0000000000005335                 retn
.text:0000000000005335 ; ---------------------------------------------------------------------------
.text:0000000000005336                 align 20h
.text:0000000000005340
.text:0000000000005340 loc_5340:                               ; CODE XREF: strintcmp+45↑j
.text:0000000000005340                                         ; strintcmp+77↑j ...
.text:0000000000005340                 xor     eax, eax
.text:0000000000005342                 retn
.text:0000000000005343 ; ---------------------------------------------------------------------------
.text:0000000000005343
.text:0000000000005343 loc_5343:                               ; CODE XREF: strintcmp+9C↑j
.text:0000000000005343                 xor     eax, eax
.text:0000000000005345                 test    r9, r9
.text:0000000000005348                 jz      short locret_52E3
.text:000000000000534A                 movzx   r9d, r8b
.text:000000000000534E                 mov     eax, r9d
.text:0000000000005351                 sub     eax, edx
.text:0000000000005353                 retn
.text:0000000000005354 ; ---------------------------------------------------------------------------
.text:0000000000005354
.text:0000000000005354 loc_5354:                               ; CODE XREF: strintcmp+141↑j
.text:0000000000005354                 movzx   eax, r9b
.text:0000000000005358                 lea     edx, [rax-30h]
.text:000000000000535B                 jmp     short loc_5300
.text:000000000000535D ; ---------------------------------------------------------------------------
.text:000000000000535D
.text:000000000000535D loc_535D:                               ; CODE XREF: strintcmp+194↑j
.text:000000000000535D                 xor     eax, eax
.text:000000000000535F                 test    r10, r10
.text:0000000000005362                 jz      locret_52E3
.text:0000000000005368                 mov     eax, r9d
.text:000000000000536B                 sub     eax, ecx
.text:000000000000536D                 retn
.text:000000000000536E ; ---------------------------------------------------------------------------
.text:000000000000536E
.text:000000000000536E loc_536E:                               ; CODE XREF: strintcmp+CC↑j
.text:000000000000536E                 mov     eax, 0FFFFFFFFh
.text:0000000000005373                 retn
.text:0000000000005373 ; } // starts at 50D0
.text:0000000000005373 strintcmp       endp
.text:0000000000005373
.text:0000000000005373 ; ---------------------------------------------------------------------------
.text:0000000000005374                 align 20h
.text:0000000000005380
.text:0000000000005380 ; =============== S U B R O U T I N E =======================================
.text:0000000000005380
.text:0000000000005380
.text:0000000000005380 ; __int64 __fastcall verror_at_line(int status, int errnum, char *fname, unsigned int lineno)
.text:0000000000005380                 public verror_at_line
.text:0000000000005380 verror_at_line  proc near               ; CODE XREF: verror+A↓j
.text:0000000000005380 ; __unwind {
.text:0000000000005380                 push    r14
.text:0000000000005382                 push    r13
.text:0000000000005384                 mov     r13d, esi
.text:0000000000005387                 push    r12
.text:0000000000005389                 push    rbp
.text:000000000000538A                 mov     r12d, edi
.text:000000000000538D                 push    rbx
.text:000000000000538E                 mov     rsi, r9
.text:0000000000005391                 mov     rdi, r8
.text:0000000000005394                 mov     rbp, rdx
.text:0000000000005397                 mov     r14d, ecx
.text:000000000000539A                 call    xvasprintf
.text:000000000000539F                 test    rax, rax
.text:00000000000053A2                 jz      short loc_5407
.text:00000000000053A4                 test    rbp, rbp
.text:00000000000053A7                 mov     rbx, rax
.text:00000000000053AA                 jz      short loc_53E0
.text:00000000000053AC                 lea     r8, format+4    ; format
.text:00000000000053B3                 mov     edi, r12d       ; status
.text:00000000000053B6                 mov     r9, rax
.text:00000000000053B9                 mov     ecx, r14d       ; lineno
.text:00000000000053BC                 mov     rdx, rbp        ; fname
.text:00000000000053BF                 mov     esi, r13d       ; errnum
.text:00000000000053C2                 xor     eax, eax
.text:00000000000053C4                 call    _error_at_line
.text:00000000000053C9                 mov     rdi, rbx        ; ptr
.text:00000000000053CC                 pop     rbx
.text:00000000000053CD                 pop     rbp
.text:00000000000053CE                 pop     r12
.text:00000000000053D0                 pop     r13
.text:00000000000053D2                 pop     r14
.text:00000000000053D4                 jmp     _free
.text:00000000000053D4 ; ---------------------------------------------------------------------------
.text:00000000000053D9                 align 20h
.text:00000000000053E0
.text:00000000000053E0 loc_53E0:                               ; CODE XREF: verror_at_line+2A↑j
.text:00000000000053E0                 lea     rdx, format+4   ; format
.text:00000000000053E7                 mov     edi, r12d       ; status
.text:00000000000053EA                 mov     rcx, rax
.text:00000000000053ED                 mov     esi, r13d       ; errnum
.text:00000000000053F0                 xor     eax, eax
.text:00000000000053F2                 call    _error
.text:00000000000053F7                 mov     rdi, rbx        ; ptr
.text:00000000000053FA                 pop     rbx
.text:00000000000053FB                 pop     rbp
.text:00000000000053FC                 pop     r12
.text:00000000000053FE                 pop     r13
.text:0000000000005400                 pop     r14
.text:0000000000005402                 jmp     _free
.text:0000000000005407 ; ---------------------------------------------------------------------------
.text:0000000000005407
.text:0000000000005407 loc_5407:                               ; CODE XREF: verror_at_line+22↑j
.text:0000000000005407                 lea     rsi, aUnableToDispla ; "unable to display error message"
.text:000000000000540E                 mov     edx, 5          ; category
.text:0000000000005413                 xor     edi, edi        ; domainname
.text:0000000000005415                 call    _dcgettext
.text:000000000000541A                 mov     rbx, rax
.text:000000000000541D                 call    ___errno_location
.text:0000000000005422                 mov     esi, [rax]      ; errnum
.text:0000000000005424                 mov     rdx, rbx        ; format
.text:0000000000005427                 xor     edi, edi        ; status
.text:0000000000005429                 xor     eax, eax
.text:000000000000542B                 call    _error
.text:0000000000005430                 call    _abort
.text:0000000000005430 ; } // starts at 5380
.text:0000000000005430 verror_at_line  endp
.text:0000000000005430
.text:0000000000005430 ; ---------------------------------------------------------------------------
.text:0000000000005435                 align 20h
.text:0000000000005440
.text:0000000000005440 ; =============== S U B R O U T I N E =======================================
.text:0000000000005440
.text:0000000000005440
.text:0000000000005440                 public verror
.text:0000000000005440 verror          proc near               ; CODE XREF: test_syntax_error+9B↑p
.text:0000000000005440 ; __unwind {
.text:0000000000005440                 mov     r8, rdx
.text:0000000000005443                 mov     r9, rcx
.text:0000000000005446                 xor     edx, edx        ; fname
.text:0000000000005448                 xor     ecx, ecx        ; lineno
.text:000000000000544A                 jmp     verror_at_line
.text:000000000000544A ; } // starts at 5440
.text:000000000000544A verror          endp
.text:000000000000544A
.text:000000000000544A ; ---------------------------------------------------------------------------
.text:000000000000544F                 align 10h
.text:0000000000005450
.text:0000000000005450 ; =============== S U B R O U T I N E =======================================
.text:0000000000005450
.text:0000000000005450
.text:0000000000005450 ; __int64 __fastcall version_etc_arn(FILE *stream)
.text:0000000000005450                 public version_etc_arn
.text:0000000000005450 version_etc_arn proc near               ; CODE XREF: version_etc_ar:loc_588B↓j
.text:0000000000005450                                         ; version_etc_va:loc_58DB↓p ...
.text:0000000000005450
.text:0000000000005450 var_58          = qword ptr -58h
.text:0000000000005450 var_50          = qword ptr -50h
.text:0000000000005450 var_48          = qword ptr -48h
.text:0000000000005450 var_40          = qword ptr -40h
.text:0000000000005450
.text:0000000000005450 ; __unwind {
.text:0000000000005450                 push    r15
.text:0000000000005452                 push    r14
.text:0000000000005454                 push    r13
.text:0000000000005456                 push    r12
.text:0000000000005458                 mov     r12, r9
.text:000000000000545B                 push    rbp
.text:000000000000545C                 push    rbx
.text:000000000000545D                 mov     rbp, rdi
.text:0000000000005460                 mov     rbx, r8
.text:0000000000005463                 sub     rsp, 28h
.text:0000000000005467                 test    rsi, rsi
.text:000000000000546A                 jz      loc_5588
.text:0000000000005470                 mov     r8, rdx
.text:0000000000005473                 lea     rdx, aSSS       ; "%s (%s) %s\n"
.text:000000000000547A                 mov     r9, rcx
.text:000000000000547D                 xor     eax, eax
.text:000000000000547F                 mov     rcx, rsi
.text:0000000000005482                 mov     esi, 1
.text:0000000000005487                 call    ___fprintf_chk
.text:000000000000548C
.text:000000000000548C loc_548C:                               ; CODE XREF: version_etc_arn+151↓j
.text:000000000000548C                 lea     rsi, aC_0       ; "(C)"
.text:0000000000005493                 xor     edi, edi        ; domainname
.text:0000000000005495                 mov     edx, 5          ; category
.text:000000000000549A                 call    _dcgettext
.text:000000000000549F                 lea     rdx, version_etc_copyright ; "Copyright %s %d Free Software Foundatio"...
.text:00000000000054A6                 mov     rcx, rax
.text:00000000000054A9                 mov     r8d, 7E3h
.text:00000000000054AF                 mov     esi, 1
.text:00000000000054B4                 mov     rdi, rbp
.text:00000000000054B7                 xor     eax, eax
.text:00000000000054B9                 call    ___fprintf_chk
.text:00000000000054BE                 lea     rsi, aLicenseGplv3Gn ; "\nLicense GPLv3+: GNU GPL version 3 or "...
.text:00000000000054C5                 xor     edi, edi        ; domainname
.text:00000000000054C7                 mov     edx, 5          ; category
.text:00000000000054CC                 call    _dcgettext
.text:00000000000054D1                 mov     rsi, rbp        ; stream
.text:00000000000054D4                 mov     rdi, rax        ; s
.text:00000000000054D7                 call    _fputs_unlocked
.text:00000000000054DC                 cmp     r12, 9          ; switch 10 cases
.text:00000000000054E0                 ja      def_54F4        ; jumptable 00000000000054F4 default case
.text:00000000000054E6                 lea     rdx, jpt_54F4
.text:00000000000054ED                 movsxd  rax, ds:(jpt_54F4 - 9B88h)[rdx+r12*4]
.text:00000000000054F1                 add     rax, rdx
.text:00000000000054F4                 jmp     rax             ; switch jump
.text:00000000000054F4 ; ---------------------------------------------------------------------------
.text:00000000000054F6                 align 20h
.text:0000000000005500
.text:0000000000005500 loc_5500:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005500                                         ; DATA XREF: .rodata:jpt_54F4↓o
.text:0000000000005500                 mov     r9, [rbx+38h]   ; jumptable 00000000000054F4 case 8
.text:0000000000005504                 mov     rax, [rbx+10h]
.text:0000000000005508                 lea     rsi, aWrittenBySSSSS ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000550F                 mov     r8, [rbx+8]
.text:0000000000005513                 mov     edx, 5          ; category
.text:0000000000005518                 xor     edi, edi        ; domainname
.text:000000000000551A                 mov     r13, [rbx+30h]
.text:000000000000551E                 mov     r12, [rbx+28h]
.text:0000000000005522                 mov     [rsp+58h+var_48], r9
.text:0000000000005527                 mov     r15, [rbx+20h]
.text:000000000000552B                 mov     r14, [rbx+18h]
.text:000000000000552F                 mov     [rsp+58h+var_58], rax
.text:0000000000005533                 mov     [rsp+58h+var_50], r8
.text:0000000000005538                 mov     rbx, [rbx]
.text:000000000000553B                 call    _dcgettext
.text:0000000000005540                 sub     rsp, 8
.text:0000000000005544
.text:0000000000005544 loc_5544:                               ; CODE XREF: version_etc_arn+1B0↓j
.text:0000000000005544                 mov     r9, [rsp+60h+var_48]
.text:0000000000005549                 mov     rdx, rax
.text:000000000000554C                 mov     rcx, rbx
.text:000000000000554F                 mov     esi, 1
.text:0000000000005554                 mov     rdi, rbp
.text:0000000000005557                 xor     eax, eax
.text:0000000000005559                 push    r9
.text:000000000000555B                 push    r13
.text:000000000000555D                 push    r12
.text:000000000000555F                 push    r15
.text:0000000000005561                 push    r14
.text:0000000000005563                 mov     r9, [rsp+88h+var_58]
.text:0000000000005568                 mov     r8, [rsp+88h+var_50]
.text:000000000000556D                 call    ___fprintf_chk
.text:0000000000005572                 add     rsp, 30h
.text:0000000000005576
.text:0000000000005576 loc_5576:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005576                                         ; DATA XREF: .rodata:jpt_54F4↓o
.text:0000000000005576                 add     rsp, 28h        ; jumptable 00000000000054F4 case 0
.text:000000000000557A                 pop     rbx
.text:000000000000557B                 pop     rbp
.text:000000000000557C                 pop     r12
.text:000000000000557E                 pop     r13
.text:0000000000005580                 pop     r14
.text:0000000000005582                 pop     r15
.text:0000000000005584                 retn
.text:0000000000005584 ; ---------------------------------------------------------------------------
.text:0000000000005585                 align 8
.text:0000000000005588
.text:0000000000005588 loc_5588:                               ; CODE XREF: version_etc_arn+1A↑j
.text:0000000000005588                 mov     r8, rcx
.text:000000000000558B                 mov     rcx, rdx
.text:000000000000558E                 lea     rdx, aSS_0      ; "%s %s\n"
.text:0000000000005595                 mov     esi, 1
.text:000000000000559A                 xor     eax, eax
.text:000000000000559C                 call    ___fprintf_chk
.text:00000000000055A1                 jmp     loc_548C
.text:00000000000055A1 ; ---------------------------------------------------------------------------
.text:00000000000055A6                 align 10h
.text:00000000000055B0
.text:00000000000055B0 loc_55B0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000055B0                                         ; DATA XREF: .rodata:jpt_54F4↓o
.text:00000000000055B0                 mov     r10, [rbx+40h]  ; jumptable 00000000000054F4 case 9
.text:00000000000055B4                 mov     r9, [rbx+38h]
.text:00000000000055B8                 lea     rsi, aWrittenBySSSSS_0 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:00000000000055BF                 mov     rax, [rbx+10h]
.text:00000000000055C3                 mov     r8, [rbx+8]
.text:00000000000055C7                 mov     edx, 5          ; category
.text:00000000000055CC                 mov     r13, [rbx+30h]
.text:00000000000055D0                 mov     r12, [rbx+28h]
.text:00000000000055D4                 mov     r15, [rbx+20h]
.text:00000000000055D8                 mov     r14, [rbx+18h]
.text:00000000000055DC                 mov     rbx, [rbx]
.text:00000000000055DF                 mov     [rsp+58h+var_40], r10
.text:00000000000055E4                 mov     [rsp+58h+var_48], r9
.text:00000000000055E9                 mov     [rsp+58h+var_58], rax
.text:00000000000055ED                 mov     [rsp+58h+var_50], r8
.text:00000000000055F2
.text:00000000000055F2 loc_55F2:                               ; CODE XREF: version_etc_arn+412↓j
.text:00000000000055F2                 xor     edi, edi        ; domainname
.text:00000000000055F4                 call    _dcgettext
.text:00000000000055F9                 mov     r10, [rsp+58h+var_40]
.text:00000000000055FE                 push    r10
.text:0000000000005600                 jmp     loc_5544
.text:0000000000005600 ; ---------------------------------------------------------------------------
.text:0000000000005605                 align 8
.text:0000000000005608
.text:0000000000005608 loc_5608:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005608                                         ; DATA XREF: .rodata:jpt_54F4↓o
.text:0000000000005608                 mov     rbx, [rbx]      ; jumptable 00000000000054F4 case 1
.text:000000000000560B                 lea     rsi, aWrittenByS ; "Written by %s.\n"
.text:0000000000005612                 mov     edx, 5          ; category
.text:0000000000005617                 xor     edi, edi        ; domainname
.text:0000000000005619                 call    _dcgettext
.text:000000000000561E                 add     rsp, 28h
.text:0000000000005622                 mov     rcx, rbx
.text:0000000000005625                 mov     rdi, rbp
.text:0000000000005628                 pop     rbx
.text:0000000000005629                 pop     rbp
.text:000000000000562A                 pop     r12
.text:000000000000562C                 pop     r13
.text:000000000000562E                 pop     r14
.text:0000000000005630                 pop     r15
.text:0000000000005632                 mov     rdx, rax
.text:0000000000005635                 mov     esi, 1
.text:000000000000563A                 xor     eax, eax
.text:000000000000563C                 jmp     ___fprintf_chk
.text:000000000000563C ; ---------------------------------------------------------------------------
.text:0000000000005641                 align 8
.text:0000000000005648
.text:0000000000005648 loc_5648:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005648                                         ; DATA XREF: .rodata:jpt_54F4↓o
.text:0000000000005648                 mov     r12, [rbx+8]    ; jumptable 00000000000054F4 case 2
.text:000000000000564C                 lea     rsi, aWrittenBySAndS ; "Written by %s and %s.\n"
.text:0000000000005653                 mov     rbx, [rbx]
.text:0000000000005656                 mov     edx, 5          ; category
.text:000000000000565B                 xor     edi, edi        ; domainname
.text:000000000000565D                 call    _dcgettext
.text:0000000000005662                 add     rsp, 28h
.text:0000000000005666                 mov     r8, r12
.text:0000000000005669                 mov     rcx, rbx
.text:000000000000566C                 mov     rdi, rbp
.text:000000000000566F                 mov     rdx, rax
.text:0000000000005672                 mov     esi, 1
.text:0000000000005677                 pop     rbx
.text:0000000000005678                 pop     rbp
.text:0000000000005679                 pop     r12
.text:000000000000567B                 pop     r13
.text:000000000000567D                 pop     r14
.text:000000000000567F                 pop     r15
.text:0000000000005681                 xor     eax, eax
.text:0000000000005683                 jmp     ___fprintf_chk
.text:0000000000005683 ; ---------------------------------------------------------------------------
.text:0000000000005688                 align 10h
.text:0000000000005690
.text:0000000000005690 loc_5690:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005690                                         ; DATA XREF: .rodata:jpt_54F4↓o
.text:0000000000005690                 mov     r13, [rbx+10h]  ; jumptable 00000000000054F4 case 3
.text:0000000000005694                 mov     r12, [rbx+8]
.text:0000000000005698                 lea     rsi, aWrittenBySSAnd ; "Written by %s, %s, and %s.\n"
.text:000000000000569F                 mov     rbx, [rbx]
.text:00000000000056A2                 mov     edx, 5          ; category
.text:00000000000056A7                 xor     edi, edi        ; domainname
.text:00000000000056A9                 call    _dcgettext
.text:00000000000056AE                 add     rsp, 28h
.text:00000000000056B2                 mov     r9, r13
.text:00000000000056B5                 mov     r8, r12
.text:00000000000056B8                 mov     rcx, rbx
.text:00000000000056BB                 mov     rdi, rbp
.text:00000000000056BE                 mov     rdx, rax
.text:00000000000056C1                 pop     rbx
.text:00000000000056C2                 pop     rbp
.text:00000000000056C3                 pop     r12
.text:00000000000056C5                 pop     r13
.text:00000000000056C7                 pop     r14
.text:00000000000056C9                 pop     r15
.text:00000000000056CB                 mov     esi, 1
.text:00000000000056D0                 xor     eax, eax
.text:00000000000056D2                 jmp     ___fprintf_chk
.text:00000000000056D2 ; ---------------------------------------------------------------------------
.text:00000000000056D7                 align 20h
.text:00000000000056E0
.text:00000000000056E0 loc_56E0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000056E0                                         ; DATA XREF: .rodata:jpt_54F4↓o
.text:00000000000056E0                 lea     rsi, aWrittenBySSSAn ; jumptable 00000000000054F4 case 4
.text:00000000000056E7                 mov     edx, 5          ; category
.text:00000000000056EC                 xor     edi, edi        ; domainname
.text:00000000000056EE                 mov     r14, [rbx+18h]
.text:00000000000056F2                 mov     r13, [rbx+10h]
.text:00000000000056F6                 mov     r12, [rbx+8]
.text:00000000000056FA                 mov     rbx, [rbx]
.text:00000000000056FD                 call    _dcgettext
.text:0000000000005702                 sub     rsp, 8
.text:0000000000005706
.text:0000000000005706 loc_5706:                               ; CODE XREF: version_etc_arn+310↓j
.text:0000000000005706                 push    r14
.text:0000000000005708                 mov     rdx, rax
.text:000000000000570B                 mov     r9, r13
.text:000000000000570E                 mov     r8, r12
.text:0000000000005711                 mov     rcx, rbx
.text:0000000000005714                 mov     rdi, rbp
.text:0000000000005717                 mov     esi, 1
.text:000000000000571C                 xor     eax, eax
.text:000000000000571E                 call    ___fprintf_chk
.text:0000000000005723                 pop     rax
.text:0000000000005724                 pop     rdx
.text:0000000000005725                 add     rsp, 28h
.text:0000000000005729                 pop     rbx
.text:000000000000572A                 pop     rbp
.text:000000000000572B                 pop     r12
.text:000000000000572D                 pop     r13
.text:000000000000572F                 pop     r14
.text:0000000000005731                 pop     r15
.text:0000000000005733                 retn
.text:0000000000005733 ; ---------------------------------------------------------------------------
.text:0000000000005734                 align 8
.text:0000000000005738
.text:0000000000005738 loc_5738:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005738                                         ; DATA XREF: .rodata:jpt_54F4↓o
.text:0000000000005738                 mov     r15, [rbx+20h]  ; jumptable 00000000000054F4 case 5
.text:000000000000573C                 lea     rsi, aWrittenBySSSSA ; "Written by %s, %s, %s,\n%s, and %s.\n"
.text:0000000000005743                 mov     edx, 5          ; category
.text:0000000000005748                 xor     edi, edi        ; domainname
.text:000000000000574A                 mov     r14, [rbx+18h]
.text:000000000000574E                 mov     r13, [rbx+10h]
.text:0000000000005752                 mov     r12, [rbx+8]
.text:0000000000005756                 mov     rbx, [rbx]
.text:0000000000005759                 call    _dcgettext
.text:000000000000575E                 push    r15
.text:0000000000005760                 jmp     short loc_5706
.text:0000000000005760 ; ---------------------------------------------------------------------------
.text:0000000000005762                 align 8
.text:0000000000005768
.text:0000000000005768 loc_5768:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005768                                         ; DATA XREF: .rodata:jpt_54F4↓o
.text:0000000000005768                 mov     r8, [rbx+8]     ; jumptable 00000000000054F4 case 6
.text:000000000000576C                 mov     r12, [rbx+28h]
.text:0000000000005770                 lea     rsi, aWrittenBySSSSS_1 ; "Written by %s, %s, %s,\n%s, %s, and %s."...
.text:0000000000005777                 mov     r15, [rbx+20h]
.text:000000000000577B                 mov     r14, [rbx+18h]
.text:000000000000577F                 mov     edx, 5          ; category
.text:0000000000005784                 mov     r13, [rbx+10h]
.text:0000000000005788                 xor     edi, edi        ; domainname
.text:000000000000578A                 mov     rbx, [rbx]
.text:000000000000578D                 mov     [rsp+58h+var_58], r8
.text:0000000000005791                 call    _dcgettext
.text:0000000000005796                 sub     rsp, 8
.text:000000000000579A                 mov     r9, r13
.text:000000000000579D                 push    r12
.text:000000000000579F                 push    r15
.text:00000000000057A1                 push    r14
.text:00000000000057A3
.text:00000000000057A3 loc_57A3:                               ; CODE XREF: version_etc_arn+3C4↓j
.text:00000000000057A3                 mov     r8, [rsp+78h+var_58]
.text:00000000000057A8                 mov     rcx, rbx
.text:00000000000057AB                 mov     rdx, rax
.text:00000000000057AE                 mov     rdi, rbp
.text:00000000000057B1                 mov     esi, 1
.text:00000000000057B6                 xor     eax, eax
.text:00000000000057B8                 call    ___fprintf_chk
.text:00000000000057BD                 add     rsp, 20h
.text:00000000000057C1                 add     rsp, 28h
.text:00000000000057C5                 pop     rbx
.text:00000000000057C6                 pop     rbp
.text:00000000000057C7                 pop     r12
.text:00000000000057C9                 pop     r13
.text:00000000000057CB                 pop     r14
.text:00000000000057CD                 pop     r15
.text:00000000000057CF                 retn
.text:00000000000057D0 ; ---------------------------------------------------------------------------
.text:00000000000057D0
.text:00000000000057D0 loc_57D0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000057D0                                         ; DATA XREF: .rodata:jpt_54F4↓o
.text:00000000000057D0                 mov     r9, [rbx+10h]   ; jumptable 00000000000054F4 case 7
.text:00000000000057D4                 mov     r13, [rbx+30h]
.text:00000000000057D8                 lea     rsi, aWrittenBySSSSS_2 ; "Written by %s, %s, %s,\n%s, %s, %s, and"...
.text:00000000000057DF                 mov     r12, [rbx+28h]
.text:00000000000057E3                 mov     r15, [rbx+20h]
.text:00000000000057E7                 mov     edx, 5          ; category
.text:00000000000057EC                 mov     r14, [rbx+18h]
.text:00000000000057F0                 mov     r8, [rbx+8]
.text:00000000000057F4                 xor     edi, edi        ; domainname
.text:00000000000057F6                 mov     [rsp+58h+var_50], r9
.text:00000000000057FB                 mov     rbx, [rbx]
.text:00000000000057FE                 mov     [rsp+58h+var_58], r8
.text:0000000000005802                 call    _dcgettext
.text:0000000000005807                 push    r13
.text:0000000000005809                 push    r12
.text:000000000000580B                 push    r15
.text:000000000000580D                 push    r14
.text:000000000000580F                 mov     r9, [rsp+78h+var_50]
.text:0000000000005814                 jmp     short loc_57A3
.text:0000000000005814 ; ---------------------------------------------------------------------------
.text:0000000000005816                 align 20h
.text:0000000000005820
.text:0000000000005820 def_54F4:                               ; CODE XREF: version_etc_arn+90↑j
.text:0000000000005820                 mov     r10, [rbx+40h]  ; jumptable 00000000000054F4 default case
.text:0000000000005824                 mov     r9, [rbx+38h]
.text:0000000000005828                 mov     edx, 5
.text:000000000000582D                 mov     rax, [rbx+10h]
.text:0000000000005831                 mov     r8, [rbx+8]
.text:0000000000005835                 lea     rsi, aWrittenBySSSSS_3 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000583C                 mov     r13, [rbx+30h]
.text:0000000000005840                 mov     r12, [rbx+28h]
.text:0000000000005844                 mov     r15, [rbx+20h]
.text:0000000000005848                 mov     r14, [rbx+18h]
.text:000000000000584C                 mov     [rsp+58h+var_40], r10
.text:0000000000005851                 mov     [rsp+58h+var_48], r9
.text:0000000000005856                 mov     [rsp+58h+var_58], rax
.text:000000000000585A                 mov     [rsp+58h+var_50], r8
.text:000000000000585F                 mov     rbx, [rbx]
.text:0000000000005862                 jmp     loc_55F2
.text:0000000000005862 ; } // starts at 5450
.text:0000000000005862 version_etc_arn endp
.text:0000000000005862
.text:0000000000005862 ; ---------------------------------------------------------------------------
.text:0000000000005867                 align 10h
.text:0000000000005870
.text:0000000000005870 ; =============== S U B R O U T I N E =======================================
.text:0000000000005870
.text:0000000000005870 ; Attributes: info_from_lumina
.text:0000000000005870
.text:0000000000005870 ; void __fastcall version_etc_ar(FILE *stream, const char *command_name, const char *package, const char *version, const char *const *authors)
.text:0000000000005870                 public version_etc_ar
.text:0000000000005870 version_etc_ar  proc near
.text:0000000000005870 ; __unwind {
.text:0000000000005870                 xor     r9d, r9d
.text:0000000000005873                 cmp     qword ptr [r8], 0
.text:0000000000005877                 jz      short loc_588B
.text:0000000000005879                 nop     dword ptr [rax+00000000h]
.text:0000000000005880
.text:0000000000005880 loc_5880:                               ; CODE XREF: version_etc_ar+19↓j
.text:0000000000005880                 add     r9, 1
.text:0000000000005884                 cmp     qword ptr [r8+r9*8], 0
.text:0000000000005889                 jnz     short loc_5880
.text:000000000000588B
.text:000000000000588B loc_588B:                               ; CODE XREF: version_etc_ar+7↑j
.text:000000000000588B                 jmp     version_etc_arn
.text:000000000000588B ; } // starts at 5870
.text:000000000000588B version_etc_ar  endp
.text:000000000000588B
.text:0000000000005890
.text:0000000000005890 ; =============== S U B R O U T I N E =======================================
.text:0000000000005890
.text:0000000000005890 ; Attributes: info_from_lumina
.text:0000000000005890
.text:0000000000005890 ; void __fastcall version_etc_va(FILE *stream, const char *command_name, const char *package, const char *version, __va_list_tag *authors)
.text:0000000000005890                 public version_etc_va
.text:0000000000005890 version_etc_va  proc near
.text:0000000000005890
.text:0000000000005890 authtab         = qword ptr -68h
.text:0000000000005890 var_10          = qword ptr -10h
.text:0000000000005890
.text:0000000000005890 ; __unwind {
.text:0000000000005890                 sub     rsp, 68h
.text:0000000000005894                 mov     r10, r8
.text:0000000000005897                 xor     r9d, r9d
.text:000000000000589A                 mov     rax, fs:28h
.text:00000000000058A3                 mov     [rsp+68h+var_10], rax
.text:00000000000058A8                 xor     eax, eax
.text:00000000000058AA                 mov     r8, rsp
.text:00000000000058AD                 nop     dword ptr [rax]
.text:00000000000058B0
.text:00000000000058B0 loc_58B0:                               ; CODE XREF: version_etc_va+49↓j
.text:00000000000058B0                 mov     eax, [r10]
.text:00000000000058B3                 cmp     eax, 2Fh ; '/'
.text:00000000000058B6                 ja      short loc_58FA
.text:00000000000058B8                 mov     r11d, eax
.text:00000000000058BB                 add     r11, [r10+10h]
.text:00000000000058BF                 add     eax, 8
.text:00000000000058C2                 mov     [r10], eax
.text:00000000000058C5
.text:00000000000058C5 loc_58C5:                               ; CODE XREF: version_etc_va+76↓j
.text:00000000000058C5                 mov     rax, [r11]
.text:00000000000058C8                 test    rax, rax
.text:00000000000058CB                 mov     [r8+r9*8], rax
.text:00000000000058CF                 jz      short loc_58DB
.text:00000000000058D1                 add     r9, 1
.text:00000000000058D5                 cmp     r9, 0Ah
.text:00000000000058D9                 jnz     short loc_58B0
.text:00000000000058DB
.text:00000000000058DB loc_58DB:                               ; CODE XREF: version_etc_va+3F↑j
.text:00000000000058DB                 call    version_etc_arn
.text:00000000000058E0                 mov     rax, [rsp+68h+var_10]
.text:00000000000058E5                 xor     rax, fs:28h
.text:00000000000058EE                 jnz     short loc_58F5
.text:00000000000058F0                 add     rsp, 68h
.text:00000000000058F4                 retn
.text:00000000000058F5 ; ---------------------------------------------------------------------------
.text:00000000000058F5
.text:00000000000058F5 loc_58F5:                               ; CODE XREF: version_etc_va+5E↑j
.text:00000000000058F5                 call    ___stack_chk_fail
.text:00000000000058FA ; ---------------------------------------------------------------------------
.text:00000000000058FA
.text:00000000000058FA loc_58FA:                               ; CODE XREF: version_etc_va+26↑j
.text:00000000000058FA                 mov     r11, [r10+8]
.text:00000000000058FE                 lea     rax, [r11+8]
.text:0000000000005902                 mov     [r10+8], rax
.text:0000000000005906                 jmp     short loc_58C5
.text:0000000000005906 ; } // starts at 5890
.text:0000000000005906 version_etc_va  endp
.text:0000000000005906
.text:0000000000005906 ; ---------------------------------------------------------------------------
.text:0000000000005908                 align 10h
.text:0000000000005910
.text:0000000000005910 ; =============== S U B R O U T I N E =======================================
.text:0000000000005910
.text:0000000000005910 ; Attributes: info_from_lumina
.text:0000000000005910
.text:0000000000005910 ; void version_etc(FILE *stream, const char *command_name, const char *package, const char *version, ...)
.text:0000000000005910                 public version_etc
.text:0000000000005910 version_etc     proc near               ; CODE XREF: main+157↑p
.text:0000000000005910
.text:0000000000005910 var_C0          = dword ptr -0C0h
.text:0000000000005910 var_B8          = qword ptr -0B8h
.text:0000000000005910 var_B0          = qword ptr -0B0h
.text:0000000000005910 var_A8          = byte ptr -0A8h
.text:0000000000005910 var_50          = qword ptr -50h
.text:0000000000005910 var_48          = byte ptr -48h
.text:0000000000005910 var_28          = qword ptr -28h
.text:0000000000005910 var_20          = qword ptr -20h
.text:0000000000005910 arg_0           = byte ptr  8
.text:0000000000005910
.text:0000000000005910 ; __unwind {
.text:0000000000005910                 push    rbp
.text:0000000000005911                 push    rbx
.text:0000000000005912                 mov     r10d, 20h ; ' '
.text:0000000000005918                 xor     r11d, r11d
.text:000000000000591B                 sub     rsp, 0B8h
.text:0000000000005922                 mov     rax, fs:28h
.text:000000000000592B                 mov     [rsp+0C8h+var_50], rax
.text:0000000000005930                 xor     eax, eax
.text:0000000000005932                 lea     rax, [rsp+0C8h+arg_0]
.text:000000000000593A                 mov     [rsp+0C8h+var_28], r8
.text:0000000000005942                 lea     rbx, [rsp+0C8h+arg_0]
.text:000000000000594A                 lea     r8, [rsp+0C8h+var_A8]
.text:000000000000594F                 mov     [rsp+0C8h+var_20], r9
.text:0000000000005957                 mov     [rsp+0C8h+var_C0], 20h ; ' '
.text:000000000000595F                 mov     [rsp+0C8h+var_B8], rax
.text:0000000000005964                 lea     rax, [rsp+0C8h+var_48]
.text:000000000000596C                 xor     r9d, r9d
.text:000000000000596F                 mov     [rsp+0C8h+var_B0], rax
.text:0000000000005974                 mov     rbp, rax
.text:0000000000005977                 nop     word ptr [rax+rax+00000000h]
.text:0000000000005980
.text:0000000000005980 loc_5980:                               ; CODE XREF: version_etc+9A↓j
.text:0000000000005980                 cmp     r10d, 2Fh ; '/'
.text:0000000000005984                 ja      short loc_59DC
.text:0000000000005986                 mov     eax, r10d
.text:0000000000005989                 mov     r11d, 1
.text:000000000000598F                 add     r10d, 8
.text:0000000000005993                 add     rax, rbp
.text:0000000000005996
.text:0000000000005996 loc_5996:                               ; CODE XREF: version_etc+D3↓j
.text:0000000000005996                 mov     rax, [rax]
.text:0000000000005999                 test    rax, rax
.text:000000000000599C                 mov     [r8+r9*8], rax
.text:00000000000059A0                 jz      short loc_59AC
.text:00000000000059A2                 add     r9, 1
.text:00000000000059A6                 cmp     r9, 0Ah
.text:00000000000059AA                 jnz     short loc_5980
.text:00000000000059AC
.text:00000000000059AC loc_59AC:                               ; CODE XREF: version_etc+90↑j
.text:00000000000059AC                 test    r11b, r11b
.text:00000000000059AF                 jnz     short loc_59D5
.text:00000000000059B1
.text:00000000000059B1 loc_59B1:                               ; CODE XREF: version_etc+CA↓j
.text:00000000000059B1                 call    version_etc_arn
.text:00000000000059B6                 mov     rax, [rsp+0C8h+var_50]
.text:00000000000059BB                 xor     rax, fs:28h
.text:00000000000059C4                 jnz     short loc_59D0
.text:00000000000059C6                 add     rsp, 0B8h
.text:00000000000059CD                 pop     rbx
.text:00000000000059CE                 pop     rbp
.text:00000000000059CF                 retn
.text:00000000000059D0 ; ---------------------------------------------------------------------------
.text:00000000000059D0
.text:00000000000059D0 loc_59D0:                               ; CODE XREF: version_etc+B4↑j
.text:00000000000059D0                 call    ___stack_chk_fail
.text:00000000000059D5 ; ---------------------------------------------------------------------------
.text:00000000000059D5
.text:00000000000059D5 loc_59D5:                               ; CODE XREF: version_etc+9F↑j
.text:00000000000059D5                 mov     [rsp+0C8h+var_C0], r10d
.text:00000000000059DA                 jmp     short loc_59B1
.text:00000000000059DC ; ---------------------------------------------------------------------------
.text:00000000000059DC
.text:00000000000059DC loc_59DC:                               ; CODE XREF: version_etc+74↑j
.text:00000000000059DC                 mov     rax, rbx
.text:00000000000059DF                 add     rbx, 8
.text:00000000000059E3                 jmp     short loc_5996
.text:00000000000059E3 ; } // starts at 5910
.text:00000000000059E3 version_etc     endp
.text:00000000000059E3
.text:00000000000059E3 ; ---------------------------------------------------------------------------
.text:00000000000059E5                 align 10h
.text:00000000000059F0
.text:00000000000059F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000059F0
.text:00000000000059F0 ; Attributes: info_from_lumina
.text:00000000000059F0
.text:00000000000059F0 ; void __cdecl emit_bug_reporting_address()
.text:00000000000059F0                 public emit_bug_reporting_address
.text:00000000000059F0 emit_bug_reporting_address proc near
.text:00000000000059F0 ; __unwind {
.text:00000000000059F0                 push    rbx
.text:00000000000059F1                 lea     rsi, aReportBugsToS ; "\nReport bugs to: %s\n"
.text:00000000000059F8                 mov     edx, 5          ; category
.text:00000000000059FD                 xor     edi, edi        ; domainname
.text:00000000000059FF                 call    _dcgettext
.text:0000000000005A04                 lea     rdx, aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:0000000000005A0B                 mov     rsi, rax
.text:0000000000005A0E                 mov     edi, 1
.text:0000000000005A13                 xor     eax, eax
.text:0000000000005A15                 call    ___printf_chk
.text:0000000000005A1A                 lea     rsi, aSHomePageS ; "%s home page: <%s>\n"
.text:0000000000005A21                 mov     edx, 5          ; category
.text:0000000000005A26                 xor     edi, edi        ; domainname
.text:0000000000005A28                 call    _dcgettext
.text:0000000000005A2D                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000005A34                 lea     rdx, unk_8446
.text:0000000000005A3B                 mov     rsi, rax
.text:0000000000005A3E                 mov     edi, 1
.text:0000000000005A43                 xor     eax, eax
.text:0000000000005A45                 call    ___printf_chk
.text:0000000000005A4A                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000005A51                 lea     rsi, aGeneralHelpUsi ; "General help using GNU software: <https"...
.text:0000000000005A58                 xor     edi, edi        ; domainname
.text:0000000000005A5A                 mov     edx, 5          ; category
.text:0000000000005A5F                 call    _dcgettext
.text:0000000000005A64                 mov     rsi, rbx        ; stream
.text:0000000000005A67                 mov     rdi, rax        ; s
.text:0000000000005A6A                 pop     rbx
.text:0000000000005A6B                 jmp     _fputs_unlocked
.text:0000000000005A6B ; } // starts at 59F0
.text:0000000000005A6B emit_bug_reporting_address endp
.text:0000000000005A6B
.text:0000000000005A70
.text:0000000000005A70 ; =============== S U B R O U T I N E =======================================
.text:0000000000005A70
.text:0000000000005A70
.text:0000000000005A70                 public xmalloc
.text:0000000000005A70 xmalloc         proc near               ; CODE XREF: quotearg_n_options+127↑p
.text:0000000000005A70                                         ; quotearg_alloc_mem+81↑p ...
.text:0000000000005A70 ; __unwind {
.text:0000000000005A70                 push    rbx
.text:0000000000005A71                 mov     rbx, rdi
.text:0000000000005A74                 call    _malloc
.text:0000000000005A79                 test    rax, rax
.text:0000000000005A7C                 jnz     short loc_5A83
.text:0000000000005A7E                 test    rbx, rbx
.text:0000000000005A81                 jnz     short loc_5A85
.text:0000000000005A83
.text:0000000000005A83 loc_5A83:                               ; CODE XREF: xmalloc+C↑j
.text:0000000000005A83                 pop     rbx
.text:0000000000005A84                 retn
.text:0000000000005A85 ; ---------------------------------------------------------------------------
.text:0000000000005A85
.text:0000000000005A85 loc_5A85:                               ; CODE XREF: xmalloc+11↑j
.text:0000000000005A85                 call    xalloc_die
.text:0000000000005A85 ; } // starts at 5A70
.text:0000000000005A85 xmalloc         endp
.text:0000000000005A85
.text:0000000000005A85 ; ---------------------------------------------------------------------------
.text:0000000000005A8A                 align 10h
.text:0000000000005A90
.text:0000000000005A90 ; =============== S U B R O U T I N E =======================================
.text:0000000000005A90
.text:0000000000005A90 ; Attributes: info_from_lumina
.text:0000000000005A90
.text:0000000000005A90 ; void *__fastcall xnmalloc(size_t n, size_t s)
.text:0000000000005A90                 public xnmalloc
.text:0000000000005A90 xnmalloc        proc near
.text:0000000000005A90 ; __unwind {
.text:0000000000005A90                 mov     rax, rdi
.text:0000000000005A93                 mul     rsi
.text:0000000000005A96                 mov     rdi, rax
.text:0000000000005A99                 seto    al
.text:0000000000005A9C                 test    rdi, rdi
.text:0000000000005A9F                 js      short loc_5AAB
.text:0000000000005AA1                 movzx   eax, al
.text:0000000000005AA4                 test    rax, rax
.text:0000000000005AA7                 jnz     short loc_5AAB
.text:0000000000005AA9                 jmp     short xmalloc
.text:0000000000005AAB ; ---------------------------------------------------------------------------
.text:0000000000005AAB
.text:0000000000005AAB loc_5AAB:                               ; CODE XREF: xnmalloc+F↑j
.text:0000000000005AAB                                         ; xnmalloc+17↑j
.text:0000000000005AAB                 sub     rsp, 8
.text:0000000000005AAF                 call    xalloc_die
.text:0000000000005AAF ; } // starts at 5A90
.text:0000000000005AAF xnmalloc        endp
.text:0000000000005AAF
.text:0000000000005AAF ; ---------------------------------------------------------------------------
.text:0000000000005AB4                 align 20h
.text:0000000000005AC0
.text:0000000000005AC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005AC0
.text:0000000000005AC0
.text:0000000000005AC0                 public xcharalloc
.text:0000000000005AC0 xcharalloc      proc near
.text:0000000000005AC0 ; __unwind {
.text:0000000000005AC0                 jmp     short xmalloc
.text:0000000000005AC0 ; } // starts at 5AC0
.text:0000000000005AC0 xcharalloc      endp
.text:0000000000005AC0
.text:0000000000005AC0 ; ---------------------------------------------------------------------------
.text:0000000000005AC2                 align 10h
.text:0000000000005AD0
.text:0000000000005AD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005AD0
.text:0000000000005AD0 ; Attributes: info_from_lumina
.text:0000000000005AD0
.text:0000000000005AD0 ; void *__fastcall xrealloc(void *p, size_t n)
.text:0000000000005AD0                 public xrealloc
.text:0000000000005AD0 xrealloc        proc near               ; CODE XREF: quotearg_n_options+6E↑p
.text:0000000000005AD0                                         ; quotearg_n_options+182↑p ...
.text:0000000000005AD0 ; __unwind {
.text:0000000000005AD0                 test    rsi, rsi
.text:0000000000005AD3                 push    rbx
.text:0000000000005AD4                 mov     rbx, rsi
.text:0000000000005AD7                 jnz     short loc_5ADE
.text:0000000000005AD9                 test    rdi, rdi
.text:0000000000005ADC                 jnz     short loc_5AF8
.text:0000000000005ADE
.text:0000000000005ADE loc_5ADE:                               ; CODE XREF: xrealloc+7↑j
.text:0000000000005ADE                 mov     rsi, rbx        ; size
.text:0000000000005AE1                 call    _realloc
.text:0000000000005AE6                 test    rax, rax
.text:0000000000005AE9                 jnz     short loc_5AF0
.text:0000000000005AEB                 test    rbx, rbx
.text:0000000000005AEE                 jnz     short loc_5B01
.text:0000000000005AF0
.text:0000000000005AF0 loc_5AF0:                               ; CODE XREF: xrealloc+19↑j
.text:0000000000005AF0                 pop     rbx
.text:0000000000005AF1                 retn
.text:0000000000005AF1 ; ---------------------------------------------------------------------------
.text:0000000000005AF2                 align 8
.text:0000000000005AF8
.text:0000000000005AF8 loc_5AF8:                               ; CODE XREF: xrealloc+C↑j
.text:0000000000005AF8                 call    _free
.text:0000000000005AFD                 xor     eax, eax
.text:0000000000005AFF                 pop     rbx
.text:0000000000005B00                 retn
.text:0000000000005B01 ; ---------------------------------------------------------------------------
.text:0000000000005B01
.text:0000000000005B01 loc_5B01:                               ; CODE XREF: xrealloc+1E↑j
.text:0000000000005B01                 call    xalloc_die
.text:0000000000005B01 ; } // starts at 5AD0
.text:0000000000005B01 xrealloc        endp
.text:0000000000005B01
.text:0000000000005B01 ; ---------------------------------------------------------------------------
.text:0000000000005B06                 align 10h
.text:0000000000005B10
.text:0000000000005B10 ; =============== S U B R O U T I N E =======================================
.text:0000000000005B10
.text:0000000000005B10 ; Attributes: info_from_lumina
.text:0000000000005B10
.text:0000000000005B10 ; void *__fastcall xnrealloc(void *p, size_t n, size_t s)
.text:0000000000005B10                 public xnrealloc
.text:0000000000005B10 xnrealloc       proc near
.text:0000000000005B10 ; __unwind {
.text:0000000000005B10                 mov     rax, rsi
.text:0000000000005B13                 mul     rdx
.text:0000000000005B16                 mov     rsi, rax
.text:0000000000005B19                 seto    al
.text:0000000000005B1C                 test    rsi, rsi
.text:0000000000005B1F                 js      short loc_5B2B
.text:0000000000005B21                 movzx   eax, al
.text:0000000000005B24                 test    rax, rax
.text:0000000000005B27                 jnz     short loc_5B2B
.text:0000000000005B29                 jmp     short xrealloc
.text:0000000000005B2B ; ---------------------------------------------------------------------------
.text:0000000000005B2B
.text:0000000000005B2B loc_5B2B:                               ; CODE XREF: xnrealloc+F↑j
.text:0000000000005B2B                                         ; xnrealloc+17↑j
.text:0000000000005B2B                 sub     rsp, 8
.text:0000000000005B2F                 call    xalloc_die
.text:0000000000005B2F ; } // starts at 5B10
.text:0000000000005B2F xnrealloc       endp
.text:0000000000005B2F
.text:0000000000005B2F ; ---------------------------------------------------------------------------
.text:0000000000005B34                 align 20h
.text:0000000000005B40
.text:0000000000005B40 ; =============== S U B R O U T I N E =======================================
.text:0000000000005B40
.text:0000000000005B40 ; Attributes: info_from_lumina
.text:0000000000005B40
.text:0000000000005B40 ; void *__fastcall x2nrealloc(void *p, size_t *pn, size_t s)
.text:0000000000005B40                 public x2nrealloc
.text:0000000000005B40 x2nrealloc      proc near
.text:0000000000005B40 ; __unwind {
.text:0000000000005B40                 test    rdi, rdi
.text:0000000000005B43                 mov     r9, rdx
.text:0000000000005B46                 mov     rcx, [rsi]
.text:0000000000005B49                 jz      short loc_5B80
.text:0000000000005B4B                 xor     edx, edx
.text:0000000000005B4D                 mov     rax, 5555555555555554h
.text:0000000000005B57                 div     r9
.text:0000000000005B5A                 cmp     rax, rcx
.text:0000000000005B5D                 jbe     short loc_5B9B
.text:0000000000005B5F                 mov     rax, rcx
.text:0000000000005B62                 shr     rax, 1
.text:0000000000005B65                 lea     rcx, [rax+rcx+1]
.text:0000000000005B6A
.text:0000000000005B6A loc_5B6A:                               ; CODE XREF: x2nrealloc+59↓j
.text:0000000000005B6A                 mov     [rsi], rcx
.text:0000000000005B6D                 imul    rcx, r9
.text:0000000000005B71                 mov     rsi, rcx
.text:0000000000005B74                 jmp     xrealloc
.text:0000000000005B74 ; ---------------------------------------------------------------------------
.text:0000000000005B79                 align 20h
.text:0000000000005B80
.text:0000000000005B80 loc_5B80:                               ; CODE XREF: x2nrealloc+9↑j
.text:0000000000005B80                 test    rcx, rcx
.text:0000000000005B83                 jz      short loc_5BA8
.text:0000000000005B85
.text:0000000000005B85 loc_5B85:                               ; CODE XREF: x2nrealloc+80↓j
.text:0000000000005B85                 mov     rax, rcx
.text:0000000000005B88                 mul     r9
.text:0000000000005B8B                 seto    dl
.text:0000000000005B8E                 test    rax, rax
.text:0000000000005B91                 movzx   edx, dl
.text:0000000000005B94                 js      short loc_5B9B
.text:0000000000005B96                 test    rdx, rdx
.text:0000000000005B99                 jz      short loc_5B6A
.text:0000000000005B9B
.text:0000000000005B9B loc_5B9B:                               ; CODE XREF: x2nrealloc+1D↑j
.text:0000000000005B9B                                         ; x2nrealloc+54↑j
.text:0000000000005B9B                 sub     rsp, 8
.text:0000000000005B9F                 call    xalloc_die
.text:0000000000005B9F ; ---------------------------------------------------------------------------
.text:0000000000005BA4                 align 8
.text:0000000000005BA8
.text:0000000000005BA8 loc_5BA8:                               ; CODE XREF: x2nrealloc+43↑j
.text:0000000000005BA8                 xor     edx, edx
.text:0000000000005BAA                 mov     eax, 80h
.text:0000000000005BAF                 xor     r8d, r8d
.text:0000000000005BB2                 div     r9
.text:0000000000005BB5                 test    rax, rax
.text:0000000000005BB8                 setz    r8b
.text:0000000000005BBC                 lea     rcx, [r8+rax]
.text:0000000000005BC0                 jmp     short loc_5B85
.text:0000000000005BC0 ; } // starts at 5B40
.text:0000000000005BC0 x2nrealloc      endp
.text:0000000000005BC0
.text:0000000000005BC0 ; ---------------------------------------------------------------------------
.text:0000000000005BC2                 align 10h
.text:0000000000005BD0
.text:0000000000005BD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005BD0
.text:0000000000005BD0 ; Attributes: info_from_lumina
.text:0000000000005BD0
.text:0000000000005BD0 ; void *__fastcall x2realloc(void *p, size_t *pn)
.text:0000000000005BD0                 public x2realloc
.text:0000000000005BD0 x2realloc       proc near
.text:0000000000005BD0 ; __unwind {
.text:0000000000005BD0                 test    rdi, rdi
.text:0000000000005BD3                 mov     rax, [rsi]
.text:0000000000005BD6                 jz      short loc_5C00
.text:0000000000005BD8                 mov     rdx, 5555555555555553h
.text:0000000000005BE2                 cmp     rax, rdx
.text:0000000000005BE5                 ja      short loc_5C11
.text:0000000000005BE7                 mov     rdx, rax
.text:0000000000005BEA                 shr     rdx, 1
.text:0000000000005BED                 lea     rax, [rdx+rax+1]
.text:0000000000005BF2
.text:0000000000005BF2 loc_5BF2:                               ; CODE XREF: x2realloc+3F↓j
.text:0000000000005BF2                 mov     [rsi], rax
.text:0000000000005BF5                 mov     rsi, rax
.text:0000000000005BF8                 jmp     xrealloc
.text:0000000000005BF8 ; ---------------------------------------------------------------------------
.text:0000000000005BFD                 align 20h
.text:0000000000005C00
.text:0000000000005C00 loc_5C00:                               ; CODE XREF: x2realloc+6↑j
.text:0000000000005C00                 test    rax, rax
.text:0000000000005C03                 mov     edx, 80h
.text:0000000000005C08                 cmovz   rax, rdx
.text:0000000000005C0C                 test    rax, rax
.text:0000000000005C0F                 jns     short loc_5BF2
.text:0000000000005C11
.text:0000000000005C11 loc_5C11:                               ; CODE XREF: x2realloc+15↑j
.text:0000000000005C11                 sub     rsp, 8
.text:0000000000005C15                 call    xalloc_die
.text:0000000000005C15 ; } // starts at 5BD0
.text:0000000000005C15 x2realloc       endp
.text:0000000000005C15
.text:0000000000005C15 ; ---------------------------------------------------------------------------
.text:0000000000005C1A                 align 20h
.text:0000000000005C20
.text:0000000000005C20 ; =============== S U B R O U T I N E =======================================
.text:0000000000005C20
.text:0000000000005C20
.text:0000000000005C20 ; __int64 __fastcall xzalloc(size_t n)
.text:0000000000005C20                 public xzalloc
.text:0000000000005C20 xzalloc         proc near
.text:0000000000005C20 ; __unwind {
.text:0000000000005C20                 push    rbx
.text:0000000000005C21                 mov     rbx, rdi
.text:0000000000005C24                 call    xmalloc
.text:0000000000005C29                 mov     rdx, rbx        ; n
.text:0000000000005C2C                 xor     esi, esi        ; c
.text:0000000000005C2E                 mov     rdi, rax        ; s
.text:0000000000005C31                 pop     rbx
.text:0000000000005C32                 jmp     _memset
.text:0000000000005C32 ; } // starts at 5C20
.text:0000000000005C32 xzalloc         endp
.text:0000000000005C32
.text:0000000000005C32 ; ---------------------------------------------------------------------------
.text:0000000000005C37                 align 20h
.text:0000000000005C40
.text:0000000000005C40 ; =============== S U B R O U T I N E =======================================
.text:0000000000005C40
.text:0000000000005C40 ; Attributes: info_from_lumina
.text:0000000000005C40
.text:0000000000005C40 ; void *__fastcall xcalloc(size_t n, size_t s)
.text:0000000000005C40                 public xcalloc
.text:0000000000005C40 xcalloc         proc near
.text:0000000000005C40 ; __unwind {
.text:0000000000005C40                 mov     rax, rdi
.text:0000000000005C43                 sub     rsp, 8
.text:0000000000005C47                 mul     rsi
.text:0000000000005C4A                 seto    dl
.text:0000000000005C4D                 test    rax, rax
.text:0000000000005C50                 js      short loc_5C69
.text:0000000000005C52                 movzx   edx, dl
.text:0000000000005C55                 test    rdx, rdx
.text:0000000000005C58                 jnz     short loc_5C69
.text:0000000000005C5A                 call    _calloc
.text:0000000000005C5F                 test    rax, rax
.text:0000000000005C62                 jz      short loc_5C69
.text:0000000000005C64                 add     rsp, 8
.text:0000000000005C68                 retn
.text:0000000000005C69 ; ---------------------------------------------------------------------------
.text:0000000000005C69
.text:0000000000005C69 loc_5C69:                               ; CODE XREF: xcalloc+10↑j
.text:0000000000005C69                                         ; xcalloc+18↑j ...
.text:0000000000005C69                 call    xalloc_die
.text:0000000000005C69 ; } // starts at 5C40
.text:0000000000005C69 xcalloc         endp
.text:0000000000005C69
.text:0000000000005C69 ; ---------------------------------------------------------------------------
.text:0000000000005C6E                 align 10h
.text:0000000000005C70
.text:0000000000005C70 ; =============== S U B R O U T I N E =======================================
.text:0000000000005C70
.text:0000000000005C70 ; Attributes: info_from_lumina
.text:0000000000005C70
.text:0000000000005C70 ; void *__fastcall xmemdup(const void *p, size_t s)
.text:0000000000005C70                 public xmemdup
.text:0000000000005C70 xmemdup         proc near               ; CODE XREF: clone_quoting_options+28↑p
.text:0000000000005C70                                         ; xstrdup+11↓j
.text:0000000000005C70 ; __unwind {
.text:0000000000005C70                 push    rbp
.text:0000000000005C71                 push    rbx
.text:0000000000005C72                 mov     rbp, rdi
.text:0000000000005C75                 mov     rdi, rsi
.text:0000000000005C78                 mov     rbx, rsi
.text:0000000000005C7B                 sub     rsp, 8
.text:0000000000005C7F                 call    xmalloc
.text:0000000000005C84                 add     rsp, 8
.text:0000000000005C88                 mov     rdx, rbx        ; n
.text:0000000000005C8B                 mov     rsi, rbp        ; src
.text:0000000000005C8E                 pop     rbx
.text:0000000000005C8F                 pop     rbp
.text:0000000000005C90                 mov     rdi, rax        ; dest
.text:0000000000005C93                 jmp     _memcpy
.text:0000000000005C93 ; } // starts at 5C70
.text:0000000000005C93 xmemdup         endp
.text:0000000000005C93
.text:0000000000005C93 ; ---------------------------------------------------------------------------
.text:0000000000005C98                 align 20h
.text:0000000000005CA0
.text:0000000000005CA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005CA0
.text:0000000000005CA0
.text:0000000000005CA0 ; __int64 __fastcall xstrdup(void *src)
.text:0000000000005CA0                 public xstrdup
.text:0000000000005CA0 xstrdup         proc near
.text:0000000000005CA0 ; __unwind {
.text:0000000000005CA0                 push    rbx
.text:0000000000005CA1                 mov     rbx, rdi
.text:0000000000005CA4                 call    _strlen
.text:0000000000005CA9                 mov     rdi, rbx        ; src
.text:0000000000005CAC                 lea     rsi, [rax+1]    ; n
.text:0000000000005CB0                 pop     rbx
.text:0000000000005CB1                 jmp     short xmemdup
.text:0000000000005CB1 ; } // starts at 5CA0
.text:0000000000005CB1 xstrdup         endp
.text:0000000000005CB1
.text:0000000000005CB1 ; ---------------------------------------------------------------------------
.text:0000000000005CB3                 align 20h
.text:0000000000005CC0
.text:0000000000005CC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005CC0
.text:0000000000005CC0 ; Attributes: noreturn info_from_lumina
.text:0000000000005CC0
.text:0000000000005CC0 ; void __cdecl xalloc_die()
.text:0000000000005CC0                 public xalloc_die
.text:0000000000005CC0 xalloc_die      proc near               ; CODE XREF: quotearg_n_options:loc_4916↑p
.text:0000000000005CC0                                         ; xmalloc:loc_5A85↑p ...
.text:0000000000005CC0 ; __unwind {
.text:0000000000005CC0                 lea     rsi, aMemoryExhauste ; "memory exhausted"
.text:0000000000005CC7                 sub     rsp, 8
.text:0000000000005CCB                 mov     edx, 5          ; category
.text:0000000000005CD0                 xor     edi, edi        ; domainname
.text:0000000000005CD2                 call    _dcgettext
.text:0000000000005CD7                 mov     edi, cs:exit_failure ; status
.text:0000000000005CDD                 lea     rdx, format+4   ; format
.text:0000000000005CE4                 mov     rcx, rax
.text:0000000000005CE7                 xor     esi, esi        ; errnum
.text:0000000000005CE9                 xor     eax, eax
.text:0000000000005CEB                 call    _error
.text:0000000000005CF0                 call    _abort
.text:0000000000005CF0 ; } // starts at 5CC0
.text:0000000000005CF0 xalloc_die      endp
.text:0000000000005CF0
.text:0000000000005CF0 ; ---------------------------------------------------------------------------
.text:0000000000005CF5                 align 20h
.text:0000000000005D00
.text:0000000000005D00 ; =============== S U B R O U T I N E =======================================
.text:0000000000005D00
.text:0000000000005D00
.text:0000000000005D00 xstrcat         proc near               ; CODE XREF: xvasprintf:loc_5E9A↓p
.text:0000000000005D00
.text:0000000000005D00 var_58          = xmmword ptr -58h
.text:0000000000005D00 var_48          = qword ptr -48h
.text:0000000000005D00 var_40          = qword ptr -40h
.text:0000000000005D00
.text:0000000000005D00 ; __unwind {
.text:0000000000005D00                 push    r15
.text:0000000000005D02                 push    r14
.text:0000000000005D04                 push    r13
.text:0000000000005D06                 push    r12
.text:0000000000005D08                 push    rbp
.text:0000000000005D09                 push    rbx
.text:0000000000005D0A                 sub     rsp, 28h
.text:0000000000005D0E                 mov     rax, fs:28h
.text:0000000000005D17                 mov     [rsp+58h+var_40], rax
.text:0000000000005D1C                 xor     eax, eax
.text:0000000000005D1E                 test    rdi, rdi
.text:0000000000005D21                 movdqu  xmm0, xmmword ptr [rsi]
.text:0000000000005D25                 movups  [rsp+58h+var_58], xmm0
.text:0000000000005D29                 mov     r14, [rsi+10h]
.text:0000000000005D2D                 mov     [rsp+58h+var_48], r14
.text:0000000000005D32                 jz      loc_5DE0
.text:0000000000005D38                 mov     r12, rdi
.text:0000000000005D3B                 mov     r15, rsi
.text:0000000000005D3E                 mov     rbp, rdi
.text:0000000000005D41                 xor     ebx, ebx
.text:0000000000005D43                 mov     r13, 0FFFFFFFFFFFFFFFFh
.text:0000000000005D4A
.text:0000000000005D4A loc_5D4A:                               ; CODE XREF: xstrcat+74↓j
.text:0000000000005D4A                 mov     edx, dword ptr [rsp+58h+var_58]
.text:0000000000005D4D                 cmp     edx, 2Fh ; '/'
.text:0000000000005D50                 ja      loc_5E30
.text:0000000000005D56                 mov     eax, edx
.text:0000000000005D58                 add     edx, 8
.text:0000000000005D5B                 add     rax, r14
.text:0000000000005D5E                 mov     dword ptr [rsp+58h+var_58], edx
.text:0000000000005D61
.text:0000000000005D61 loc_5D61:                               ; CODE XREF: xstrcat+13E↓j
.text:0000000000005D61                 mov     rdi, [rax]      ; s
.text:0000000000005D64                 call    _strlen
.text:0000000000005D69                 add     rbx, rax
.text:0000000000005D6C                 cmovb   rbx, r13
.text:0000000000005D70                 sub     rbp, 1
.text:0000000000005D74                 jnz     short loc_5D4A
.text:0000000000005D76                 cmp     rbx, 7FFFFFFFh
.text:0000000000005D7D                 ja      loc_5E20
.text:0000000000005D83                 lea     rdi, [rbx+1]
.text:0000000000005D87                 call    xmalloc
.text:0000000000005D8C                 mov     r14, rax
.text:0000000000005D8F                 mov     rbx, rax
.text:0000000000005D92                 jmp     short loc_5DC5
.text:0000000000005D94 ; ---------------------------------------------------------------------------
.text:0000000000005D94
.text:0000000000005D94 loc_5D94:                               ; CODE XREF: xstrcat+CB↓j
.text:0000000000005D94                 mov     eax, edx
.text:0000000000005D96                 add     rax, [r15+10h]
.text:0000000000005D9A                 add     edx, 8
.text:0000000000005D9D                 mov     [r15], edx
.text:0000000000005DA0
.text:0000000000005DA0 loc_5DA0:                               ; CODE XREF: xstrcat+D9↓j
.text:0000000000005DA0                 mov     r13, [rax]
.text:0000000000005DA3                 mov     rdi, r13        ; s
.text:0000000000005DA6                 call    _strlen
.text:0000000000005DAB                 mov     rdi, rbx        ; dest
.text:0000000000005DAE                 mov     rbp, rax
.text:0000000000005DB1                 mov     rdx, rax        ; n
.text:0000000000005DB4                 mov     rsi, r13        ; src
.text:0000000000005DB7                 add     rbx, rbp
.text:0000000000005DBA                 call    _memcpy
.text:0000000000005DBF                 sub     r12, 1
.text:0000000000005DC3                 jz      short loc_5DF0
.text:0000000000005DC5
.text:0000000000005DC5 loc_5DC5:                               ; CODE XREF: xstrcat+92↑j
.text:0000000000005DC5                 mov     edx, [r15]
.text:0000000000005DC8                 cmp     edx, 2Fh ; '/'
.text:0000000000005DCB                 jbe     short loc_5D94
.text:0000000000005DCD                 mov     rax, [r15+8]
.text:0000000000005DD1                 lea     rdx, [rax+8]
.text:0000000000005DD5                 mov     [r15+8], rdx
.text:0000000000005DD9                 jmp     short loc_5DA0
.text:0000000000005DD9 ; ---------------------------------------------------------------------------
.text:0000000000005DDB                 align 20h
.text:0000000000005DE0
.text:0000000000005DE0 loc_5DE0:                               ; CODE XREF: xstrcat+32↑j
.text:0000000000005DE0                 mov     edi, 1
.text:0000000000005DE5                 call    xmalloc
.text:0000000000005DEA                 mov     rbx, rax
.text:0000000000005DED                 mov     r14, rax
.text:0000000000005DF0
.text:0000000000005DF0 loc_5DF0:                               ; CODE XREF: xstrcat+C3↑j
.text:0000000000005DF0                 mov     byte ptr [rbx], 0
.text:0000000000005DF3
.text:0000000000005DF3 loc_5DF3:                               ; CODE XREF: xstrcat+12E↓j
.text:0000000000005DF3                 mov     rcx, [rsp+58h+var_40]
.text:0000000000005DF8                 xor     rcx, fs:28h
.text:0000000000005E01                 mov     rax, r14
.text:0000000000005E04                 jnz     short loc_5E15
.text:0000000000005E06                 add     rsp, 28h
.text:0000000000005E0A                 pop     rbx
.text:0000000000005E0B                 pop     rbp
.text:0000000000005E0C                 pop     r12
.text:0000000000005E0E                 pop     r13
.text:0000000000005E10                 pop     r14
.text:0000000000005E12                 pop     r15
.text:0000000000005E14                 retn
.text:0000000000005E15 ; ---------------------------------------------------------------------------
.text:0000000000005E15
.text:0000000000005E15 loc_5E15:                               ; CODE XREF: xstrcat+104↑j
.text:0000000000005E15                 call    ___stack_chk_fail
.text:0000000000005E15 ; ---------------------------------------------------------------------------
.text:0000000000005E1A                 align 20h
.text:0000000000005E20
.text:0000000000005E20 loc_5E20:                               ; CODE XREF: xstrcat+7D↑j
.text:0000000000005E20                 call    ___errno_location
.text:0000000000005E25                 xor     r14d, r14d
.text:0000000000005E28                 mov     dword ptr [rax], 4Bh ; 'K'
.text:0000000000005E2E                 jmp     short loc_5DF3
.text:0000000000005E30 ; ---------------------------------------------------------------------------
.text:0000000000005E30
.text:0000000000005E30 loc_5E30:                               ; CODE XREF: xstrcat+50↑j
.text:0000000000005E30                 mov     rax, qword ptr [rsp+58h+var_58+8]
.text:0000000000005E35                 lea     rdx, [rax+8]
.text:0000000000005E39                 mov     qword ptr [rsp+58h+var_58+8], rdx
.text:0000000000005E3E                 jmp     loc_5D61
.text:0000000000005E3E ; } // starts at 5D00
.text:0000000000005E3E xstrcat         endp
.text:0000000000005E3E
.text:0000000000005E3E ; ---------------------------------------------------------------------------
.text:0000000000005E43                 align 10h
.text:0000000000005E50
.text:0000000000005E50 ; =============== S U B R O U T I N E =======================================
.text:0000000000005E50
.text:0000000000005E50
.text:0000000000005E50                 public xvasprintf
.text:0000000000005E50 xvasprintf      proc near               ; CODE XREF: verror_at_line+1A↑p
.text:0000000000005E50
.text:0000000000005E50 var_18          = qword ptr -18h
.text:0000000000005E50 var_10          = qword ptr -10h
.text:0000000000005E50
.text:0000000000005E50 ; __unwind {
.text:0000000000005E50                 sub     rsp, 18h
.text:0000000000005E54                 mov     rax, fs:28h
.text:0000000000005E5D                 mov     [rsp+18h+var_10], rax
.text:0000000000005E62                 xor     eax, eax
.text:0000000000005E64                 movzx   eax, byte ptr [rdi]
.text:0000000000005E67                 test    al, al
.text:0000000000005E69                 jz      short loc_5EE6
.text:0000000000005E6B                 cmp     al, 25h ; '%'
.text:0000000000005E6D                 mov     r8, rdi
.text:0000000000005E70                 jnz     short loc_5EA8
.text:0000000000005E72                 cmp     byte ptr [rdi+1], 73h ; 's'
.text:0000000000005E76                 jnz     short loc_5EA8
.text:0000000000005E78                 xor     edi, edi
.text:0000000000005E7A                 jmp     short loc_5E8D
.text:0000000000005E7A ; ---------------------------------------------------------------------------
.text:0000000000005E7C                 align 20h
.text:0000000000005E80
.text:0000000000005E80 loc_5E80:                               ; CODE XREF: xvasprintf+48↓j
.text:0000000000005E80                 cmp     cl, 25h ; '%'
.text:0000000000005E83                 jnz     short loc_5EA8
.text:0000000000005E85                 cmp     byte ptr [r8+rdi*2+1], 73h ; 's'
.text:0000000000005E8B                 jnz     short loc_5EA8
.text:0000000000005E8D
.text:0000000000005E8D loc_5E8D:                               ; CODE XREF: xvasprintf+2A↑j
.text:0000000000005E8D                 add     rdi, 1
.text:0000000000005E91                 movzx   ecx, byte ptr [r8+rdi*2]
.text:0000000000005E96                 test    cl, cl
.text:0000000000005E98                 jnz     short loc_5E80
.text:0000000000005E9A
.text:0000000000005E9A loc_5E9A:                               ; CODE XREF: xvasprintf+98↓j
.text:0000000000005E9A                 call    xstrcat
.text:0000000000005E9F                 jmp     short loc_5EBE
.text:0000000000005E9F ; ---------------------------------------------------------------------------
.text:0000000000005EA1                 align 8
.text:0000000000005EA8
.text:0000000000005EA8 loc_5EA8:                               ; CODE XREF: xvasprintf+20↑j
.text:0000000000005EA8                                         ; xvasprintf+26↑j ...
.text:0000000000005EA8                 mov     rdx, rsi
.text:0000000000005EAB                 mov     rdi, rsp
.text:0000000000005EAE                 mov     rsi, r8
.text:0000000000005EB1                 call    u16_u16_vasprintf
.text:0000000000005EB6                 test    eax, eax
.text:0000000000005EB8                 js      short loc_5ED8
.text:0000000000005EBA                 mov     rax, [rsp+18h+var_18]
.text:0000000000005EBE
.text:0000000000005EBE loc_5EBE:                               ; CODE XREF: xvasprintf+4F↑j
.text:0000000000005EBE                                         ; xvasprintf+94↓j
.text:0000000000005EBE                 mov     rdx, [rsp+18h+var_10]
.text:0000000000005EC3                 xor     rdx, fs:28h
.text:0000000000005ECC                 jnz     short loc_5EEA
.text:0000000000005ECE                 add     rsp, 18h
.text:0000000000005ED2                 retn
.text:0000000000005ED2 ; ---------------------------------------------------------------------------
.text:0000000000005ED3                 align 8
.text:0000000000005ED8
.text:0000000000005ED8 loc_5ED8:                               ; CODE XREF: xvasprintf+68↑j
.text:0000000000005ED8                 call    ___errno_location
.text:0000000000005EDD                 cmp     dword ptr [rax], 0Ch
.text:0000000000005EE0                 jz      short loc_5EEF
.text:0000000000005EE2                 xor     eax, eax
.text:0000000000005EE4                 jmp     short loc_5EBE
.text:0000000000005EE6 ; ---------------------------------------------------------------------------
.text:0000000000005EE6
.text:0000000000005EE6 loc_5EE6:                               ; CODE XREF: xvasprintf+19↑j
.text:0000000000005EE6                 xor     edi, edi
.text:0000000000005EE8                 jmp     short loc_5E9A
.text:0000000000005EEA ; ---------------------------------------------------------------------------
.text:0000000000005EEA
.text:0000000000005EEA loc_5EEA:                               ; CODE XREF: xvasprintf+7C↑j
.text:0000000000005EEA                 call    ___stack_chk_fail
.text:0000000000005EEF ; ---------------------------------------------------------------------------
.text:0000000000005EEF
.text:0000000000005EEF loc_5EEF:                               ; CODE XREF: xvasprintf+90↑j
.text:0000000000005EEF                 call    xalloc_die
.text:0000000000005EEF ; } // starts at 5E50
.text:0000000000005EEF xvasprintf      endp
.text:0000000000005EEF
.text:0000000000005EEF ; ---------------------------------------------------------------------------
.text:0000000000005EF4                 align 20h
.text:0000000000005F00
.text:0000000000005F00 ; =============== S U B R O U T I N E =======================================
.text:0000000000005F00
.text:0000000000005F00 ; Attributes: info_from_lumina
.text:0000000000005F00
.text:0000000000005F00 ; size_t __fastcall rpl_mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
.text:0000000000005F00                 public rpl_mbrtowc
.text:0000000000005F00 rpl_mbrtowc     proc near               ; CODE XREF: quotearg_buffer_restyled+956↑p
.text:0000000000005F00
.text:0000000000005F00 pwc             = dword ptr -34h
.text:0000000000005F00 var_30          = qword ptr -30h
.text:0000000000005F00
.text:0000000000005F00 ; __unwind {
.text:0000000000005F00                 push    r13
.text:0000000000005F02                 push    r12
.text:0000000000005F04                 mov     r13, rsi
.text:0000000000005F07                 push    rbp
.text:0000000000005F08                 push    rbx
.text:0000000000005F09                 mov     rbx, rdi
.text:0000000000005F0C                 mov     r12, rdx
.text:0000000000005F0F                 sub     rsp, 18h
.text:0000000000005F13                 mov     rax, fs:28h
.text:0000000000005F1C                 mov     [rsp+38h+var_30], rax
.text:0000000000005F21                 xor     eax, eax
.text:0000000000005F23                 lea     rax, [rsp+38h+pwc]
.text:0000000000005F28                 test    rdi, rdi
.text:0000000000005F2B                 cmovz   rbx, rax
.text:0000000000005F2F                 mov     rdi, rbx        ; pwc
.text:0000000000005F32                 call    _mbrtowc
.text:0000000000005F37                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:0000000000005F3B                 mov     rbp, rax
.text:0000000000005F3E                 jbe     short loc_5F60
.text:0000000000005F40                 test    r12, r12
.text:0000000000005F43                 jz      short loc_5F60
.text:0000000000005F45                 xor     edi, edi
.text:0000000000005F47                 call    hard_locale
.text:0000000000005F4C                 test    al, al
.text:0000000000005F4E                 jnz     short loc_5F60
.text:0000000000005F50                 movzx   eax, byte ptr [r13+0]
.text:0000000000005F55                 mov     ebp, 1
.text:0000000000005F5A                 mov     [rbx], eax
.text:0000000000005F5C                 nop     dword ptr [rax+00h]
.text:0000000000005F60
.text:0000000000005F60 loc_5F60:                               ; CODE XREF: rpl_mbrtowc+3E↑j
.text:0000000000005F60                                         ; rpl_mbrtowc+43↑j ...
.text:0000000000005F60                 mov     rdx, [rsp+38h+var_30]
.text:0000000000005F65                 xor     rdx, fs:28h
.text:0000000000005F6E                 mov     rax, rbp
.text:0000000000005F71                 jnz     short loc_5F7E
.text:0000000000005F73                 add     rsp, 18h
.text:0000000000005F77                 pop     rbx
.text:0000000000005F78                 pop     rbp
.text:0000000000005F79                 pop     r12
.text:0000000000005F7B                 pop     r13
.text:0000000000005F7D                 retn
.text:0000000000005F7E ; ---------------------------------------------------------------------------
.text:0000000000005F7E
.text:0000000000005F7E loc_5F7E:                               ; CODE XREF: rpl_mbrtowc+71↑j
.text:0000000000005F7E                 call    ___stack_chk_fail
.text:0000000000005F7E ; } // starts at 5F00
.text:0000000000005F7E rpl_mbrtowc     endp
.text:0000000000005F7E
.text:0000000000005F7E ; ---------------------------------------------------------------------------
.text:0000000000005F83                 align 10h
.text:0000000000005F90
.text:0000000000005F90 ; =============== S U B R O U T I N E =======================================
.text:0000000000005F90
.text:0000000000005F90 ; Attributes: info_from_lumina
.text:0000000000005F90
.text:0000000000005F90                 public u16_u16_vasprintf
.text:0000000000005F90 u16_u16_vasprintf proc near             ; CODE XREF: xvasprintf+61↑p
.text:0000000000005F90
.text:0000000000005F90 var_18          = qword ptr -18h
.text:0000000000005F90 var_10          = qword ptr -10h
.text:0000000000005F90
.text:0000000000005F90 ; __unwind {
.text:0000000000005F90                 push    rbx
.text:0000000000005F91                 mov     rax, rsi
.text:0000000000005F94                 mov     rbx, rdi
.text:0000000000005F97                 xor     edi, edi
.text:0000000000005F99                 sub     rsp, 10h
.text:0000000000005F9D                 mov     rcx, fs:28h
.text:0000000000005FA6                 mov     [rsp+18h+var_10], rcx
.text:0000000000005FAB                 xor     ecx, ecx
.text:0000000000005FAD                 mov     rsi, rsp
.text:0000000000005FB0                 mov     rcx, rdx
.text:0000000000005FB3                 mov     rdx, rax
.text:0000000000005FB6                 call    vasnprintf
.text:0000000000005FBB                 test    rax, rax
.text:0000000000005FBE                 jz      short loc_6002
.text:0000000000005FC0                 mov     rdx, [rsp+18h+var_18]
.text:0000000000005FC4                 cmp     rdx, 7FFFFFFFh
.text:0000000000005FCB                 ja      short loc_5FE8
.text:0000000000005FCD                 mov     [rbx], rax
.text:0000000000005FD0                 mov     eax, edx
.text:0000000000005FD2
.text:0000000000005FD2 loc_5FD2:                               ; CODE XREF: u16_u16_vasprintf+70↓j
.text:0000000000005FD2                                         ; u16_u16_vasprintf+77↓j
.text:0000000000005FD2                 mov     rbx, [rsp+18h+var_10]
.text:0000000000005FD7                 xor     rbx, fs:28h
.text:0000000000005FE0                 jnz     short loc_6009
.text:0000000000005FE2                 add     rsp, 10h
.text:0000000000005FE6                 pop     rbx
.text:0000000000005FE7                 retn
.text:0000000000005FE8 ; ---------------------------------------------------------------------------
.text:0000000000005FE8
.text:0000000000005FE8 loc_5FE8:                               ; CODE XREF: u16_u16_vasprintf+3B↑j
.text:0000000000005FE8                 mov     rdi, rax        ; ptr
.text:0000000000005FEB                 call    _free
.text:0000000000005FF0                 call    ___errno_location
.text:0000000000005FF5                 mov     dword ptr [rax], 4Bh ; 'K'
.text:0000000000005FFB                 mov     eax, 0FFFFFFFFh
.text:0000000000006000                 jmp     short loc_5FD2
.text:0000000000006002 ; ---------------------------------------------------------------------------
.text:0000000000006002
.text:0000000000006002 loc_6002:                               ; CODE XREF: u16_u16_vasprintf+2E↑j
.text:0000000000006002                 mov     eax, 0FFFFFFFFh
.text:0000000000006007                 jmp     short loc_5FD2
.text:0000000000006009 ; ---------------------------------------------------------------------------
.text:0000000000006009
.text:0000000000006009 loc_6009:                               ; CODE XREF: u16_u16_vasprintf+50↑j
.text:0000000000006009                 call    ___stack_chk_fail
.text:0000000000006009 ; } // starts at 5F90
.text:0000000000006009 u16_u16_vasprintf endp
.text:0000000000006009
.text:0000000000006009 ; ---------------------------------------------------------------------------
.text:000000000000600E                 align 10h
.text:0000000000006010
.text:0000000000006010 ; =============== S U B R O U T I N E =======================================
.text:0000000000006010
.text:0000000000006010 ; Attributes: info_from_lumina
.text:0000000000006010
.text:0000000000006010 ; int __fastcall close_stream(FILE *stream)
.text:0000000000006010                 public close_stream
.text:0000000000006010 close_stream    proc near               ; CODE XREF: close_stdout+D↑p
.text:0000000000006010                                         ; close_stdout+33↑p
.text:0000000000006010 ; __unwind {
.text:0000000000006010                 push    r12
.text:0000000000006012                 push    rbp
.text:0000000000006013                 mov     rbp, rdi
.text:0000000000006016                 push    rbx
.text:0000000000006017                 call    ___fpending
.text:000000000000601C                 mov     ebx, [rbp+0]
.text:000000000000601F                 mov     rdi, rbp        ; stream
.text:0000000000006022                 mov     r12, rax
.text:0000000000006025                 call    rpl_fclose
.text:000000000000602A                 and     ebx, 20h
.text:000000000000602D                 test    ebx, ebx
.text:000000000000602F                 jnz     short loc_6048
.text:0000000000006031                 test    eax, eax
.text:0000000000006033                 jz      short loc_603F
.text:0000000000006035                 test    r12, r12
.text:0000000000006038                 mov     eax, 0FFFFFFFFh
.text:000000000000603D                 jz      short loc_6078
.text:000000000000603F
.text:000000000000603F loc_603F:                               ; CODE XREF: close_stream+23↑j
.text:000000000000603F                 pop     rbx
.text:0000000000006040                 pop     rbp
.text:0000000000006041                 pop     r12
.text:0000000000006043                 retn
.text:0000000000006043 ; ---------------------------------------------------------------------------
.text:0000000000006044                 align 8
.text:0000000000006048
.text:0000000000006048 loc_6048:                               ; CODE XREF: close_stream+1F↑j
.text:0000000000006048                 test    eax, eax
.text:000000000000604A                 jnz     short loc_6068
.text:000000000000604C                 call    ___errno_location
.text:0000000000006051                 mov     dword ptr [rax], 0
.text:0000000000006057                 mov     eax, 0FFFFFFFFh
.text:000000000000605C                 pop     rbx
.text:000000000000605D                 pop     rbp
.text:000000000000605E                 pop     r12
.text:0000000000006060                 retn
.text:0000000000006060 ; ---------------------------------------------------------------------------
.text:0000000000006061                 align 8
.text:0000000000006068
.text:0000000000006068 loc_6068:                               ; CODE XREF: close_stream+3A↑j
.text:0000000000006068                 pop     rbx
.text:0000000000006069                 mov     eax, 0FFFFFFFFh
.text:000000000000606E                 pop     rbp
.text:000000000000606F                 pop     r12
.text:0000000000006071                 retn
.text:0000000000006071 ; ---------------------------------------------------------------------------
.text:0000000000006072                 align 8
.text:0000000000006078
.text:0000000000006078 loc_6078:                               ; CODE XREF: close_stream+2D↑j
.text:0000000000006078                 call    ___errno_location
.text:000000000000607D                 cmp     dword ptr [rax], 9
.text:0000000000006080                 pop     rbx
.text:0000000000006081                 pop     rbp
.text:0000000000006082                 pop     r12
.text:0000000000006084                 setnz   al
.text:0000000000006087                 movzx   eax, al
.text:000000000000608A                 neg     eax
.text:000000000000608C                 retn
.text:000000000000608C ; } // starts at 6010
.text:000000000000608C close_stream    endp
.text:000000000000608C
.text:000000000000608C ; ---------------------------------------------------------------------------
.text:000000000000608D                 align 10h
.text:0000000000006090
.text:0000000000006090 ; =============== S U B R O U T I N E =======================================
.text:0000000000006090
.text:0000000000006090
.text:0000000000006090                 public hard_locale
.text:0000000000006090 hard_locale     proc near               ; CODE XREF: rpl_mbrtowc+47↑p
.text:0000000000006090 ; __unwind {
.text:0000000000006090                 sub     rsp, 8
.text:0000000000006094                 xor     esi, esi        ; locale
.text:0000000000006096                 call    _setlocale
.text:000000000000609B                 mov     rdx, rax
.text:000000000000609E                 mov     eax, 1
.text:00000000000060A3                 test    rdx, rdx
.text:00000000000060A6                 jz      short loc_60C5
.text:00000000000060A8                 lea     rdi, aC         ; "C"
.text:00000000000060AF                 mov     ecx, 2
.text:00000000000060B4                 mov     rsi, rdx
.text:00000000000060B7                 repe cmpsb
.text:00000000000060B9                 setnbe  cl
.text:00000000000060BC                 sbb     cl, 0
.text:00000000000060BF                 xor     eax, eax
.text:00000000000060C1                 test    cl, cl
.text:00000000000060C3                 jnz     short loc_60D0
.text:00000000000060C5
.text:00000000000060C5 loc_60C5:                               ; CODE XREF: hard_locale+16↑j
.text:00000000000060C5                 add     rsp, 8
.text:00000000000060C9                 retn
.text:00000000000060C9 ; ---------------------------------------------------------------------------
.text:00000000000060CA                 align 10h
.text:00000000000060D0
.text:00000000000060D0 loc_60D0:                               ; CODE XREF: hard_locale+33↑j
.text:00000000000060D0                 lea     rdi, aPosix     ; "POSIX"
.text:00000000000060D7                 mov     ecx, 6
.text:00000000000060DC                 mov     rsi, rdx
.text:00000000000060DF                 repe cmpsb
.text:00000000000060E1                 setnbe  al
.text:00000000000060E4                 sbb     al, 0
.text:00000000000060E6                 test    al, al
.text:00000000000060E8                 setnz   al
.text:00000000000060EB                 add     rsp, 8
.text:00000000000060EF                 retn
.text:00000000000060EF ; } // starts at 6090
.text:00000000000060EF hard_locale     endp
.text:00000000000060EF
.text:00000000000060F0
.text:00000000000060F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000060F0
.text:00000000000060F0
.text:00000000000060F0                 public locale_charset
.text:00000000000060F0 locale_charset  proc near               ; CODE XREF: gettext_quote+B↑p
.text:00000000000060F0 ; __unwind {
.text:00000000000060F0                 sub     rsp, 8
.text:00000000000060F4                 mov     edi, 0Eh        ; item
.text:00000000000060F9                 call    _nl_langinfo
.text:00000000000060FE                 test    rax, rax
.text:0000000000006101                 jz      short loc_6120
.text:0000000000006103                 cmp     byte ptr [rax], 0
.text:0000000000006106                 lea     rdx, aAscii     ; "ASCII"
.text:000000000000610D                 cmovz   rax, rdx
.text:0000000000006111                 add     rsp, 8
.text:0000000000006115                 retn
.text:0000000000006115 ; ---------------------------------------------------------------------------
.text:0000000000006116                 align 20h
.text:0000000000006120
.text:0000000000006120 loc_6120:                               ; CODE XREF: locale_charset+11↑j
.text:0000000000006120                 lea     rax, aAscii     ; "ASCII"
.text:0000000000006127                 add     rsp, 8
.text:000000000000612B                 retn
.text:000000000000612B ; } // starts at 60F0
.text:000000000000612B locale_charset  endp
.text:000000000000612B
.text:000000000000612B ; ---------------------------------------------------------------------------
.text:000000000000612C                 align 10h
.text:0000000000006130
.text:0000000000006130 ; =============== S U B R O U T I N E =======================================
.text:0000000000006130
.text:0000000000006130 ; Attributes: info_from_lumina
.text:0000000000006130
.text:0000000000006130 ; int __fastcall rpl_fclose(FILE *fp)
.text:0000000000006130                 public rpl_fclose
.text:0000000000006130 rpl_fclose      proc near               ; CODE XREF: close_stream+15↑p
.text:0000000000006130 ; __unwind {
.text:0000000000006130                 push    r12
.text:0000000000006132                 push    rbp
.text:0000000000006133                 push    rbx
.text:0000000000006134                 mov     rbx, rdi
.text:0000000000006137                 call    _fileno
.text:000000000000613C                 test    eax, eax
.text:000000000000613E                 mov     rdi, rbx        ; fp
.text:0000000000006141                 js      short loc_6197
.text:0000000000006143                 call    ___freading
.text:0000000000006148                 test    eax, eax
.text:000000000000614A                 jnz     short loc_6178
.text:000000000000614C
.text:000000000000614C loc_614C:                               ; CODE XREF: rpl_fclose+62↓j
.text:000000000000614C                 mov     rdi, rbx        ; stream
.text:000000000000614F                 call    rpl_fflush
.text:0000000000006154                 test    eax, eax
.text:0000000000006156                 jz      short loc_6194
.text:0000000000006158                 call    ___errno_location
.text:000000000000615D                 mov     r12d, [rax]
.text:0000000000006160                 mov     rdi, rbx        ; stream
.text:0000000000006163                 mov     rbp, rax
.text:0000000000006166                 call    _fclose
.text:000000000000616B                 test    r12d, r12d
.text:000000000000616E                 jnz     short loc_61A0
.text:0000000000006170
.text:0000000000006170 loc_6170:                               ; CODE XREF: rpl_fclose+79↓j
.text:0000000000006170                 pop     rbx
.text:0000000000006171                 pop     rbp
.text:0000000000006172                 pop     r12
.text:0000000000006174                 retn
.text:0000000000006174 ; ---------------------------------------------------------------------------
.text:0000000000006175                 align 8
.text:0000000000006178
.text:0000000000006178 loc_6178:                               ; CODE XREF: rpl_fclose+1A↑j
.text:0000000000006178                 mov     rdi, rbx        ; stream
.text:000000000000617B                 call    _fileno
.text:0000000000006180                 xor     esi, esi        ; offset
.text:0000000000006182                 mov     edx, 1          ; whence
.text:0000000000006187                 mov     edi, eax        ; fd
.text:0000000000006189                 call    _lseek
.text:000000000000618E                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000006192                 jnz     short loc_614C
.text:0000000000006194
.text:0000000000006194 loc_6194:                               ; CODE XREF: rpl_fclose+26↑j
.text:0000000000006194                 mov     rdi, rbx        ; stream
.text:0000000000006197
.text:0000000000006197 loc_6197:                               ; CODE XREF: rpl_fclose+11↑j
.text:0000000000006197                 pop     rbx
.text:0000000000006198                 pop     rbp
.text:0000000000006199                 pop     r12
.text:000000000000619B                 jmp     _fclose
.text:00000000000061A0 ; ---------------------------------------------------------------------------
.text:00000000000061A0
.text:00000000000061A0 loc_61A0:                               ; CODE XREF: rpl_fclose+3E↑j
.text:00000000000061A0                 mov     [rbp+0], r12d
.text:00000000000061A4                 mov     eax, 0FFFFFFFFh
.text:00000000000061A9                 jmp     short loc_6170
.text:00000000000061A9 ; } // starts at 6130
.text:00000000000061A9 rpl_fclose      endp
.text:00000000000061A9
.text:00000000000061A9 ; ---------------------------------------------------------------------------
.text:00000000000061AB                 align 10h
.text:00000000000061B0
.text:00000000000061B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000061B0
.text:00000000000061B0 ; Attributes: info_from_lumina
.text:00000000000061B0
.text:00000000000061B0 ; int __fastcall rpl_fflush(FILE *stream)
.text:00000000000061B0                 public rpl_fflush
.text:00000000000061B0 rpl_fflush      proc near               ; CODE XREF: rpl_fclose+1F↑p
.text:00000000000061B0 ; __unwind {
.text:00000000000061B0                 test    rdi, rdi
.text:00000000000061B3                 push    rbx
.text:00000000000061B4                 mov     rbx, rdi
.text:00000000000061B7                 jz      short loc_61CA
.text:00000000000061B9                 call    ___freading
.text:00000000000061BE                 test    eax, eax
.text:00000000000061C0                 jz      short loc_61CA
.text:00000000000061C2                 test    dword ptr [rbx], 100h
.text:00000000000061C8                 jnz     short loc_61D8
.text:00000000000061CA
.text:00000000000061CA loc_61CA:                               ; CODE XREF: rpl_fflush+7↑j
.text:00000000000061CA                                         ; rpl_fflush+10↑j
.text:00000000000061CA                 mov     rdi, rbx        ; stream
.text:00000000000061CD                 pop     rbx
.text:00000000000061CE                 jmp     _fflush
.text:00000000000061CE ; ---------------------------------------------------------------------------
.text:00000000000061D3                 align 8
.text:00000000000061D8
.text:00000000000061D8 loc_61D8:                               ; CODE XREF: rpl_fflush+18↑j
.text:00000000000061D8                 mov     rdi, rbx
.text:00000000000061DB                 mov     edx, 1
.text:00000000000061E0                 xor     esi, esi
.text:00000000000061E2                 call    rpl_fseeko
.text:00000000000061E7                 mov     rdi, rbx        ; stream
.text:00000000000061EA                 pop     rbx
.text:00000000000061EB                 jmp     _fflush
.text:00000000000061EB ; } // starts at 61B0
.text:00000000000061EB rpl_fflush      endp
.text:00000000000061EB
.text:00000000000061F0
.text:00000000000061F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000061F0
.text:00000000000061F0 ; Attributes: info_from_lumina
.text:00000000000061F0
.text:00000000000061F0 ; int __fastcall rpl_fseeko(FILE *fp, off_t offset, int whence)
.text:00000000000061F0                 public rpl_fseeko
.text:00000000000061F0 rpl_fseeko      proc near               ; CODE XREF: rpl_fflush+32↑p
.text:00000000000061F0 ; __unwind {
.text:00000000000061F0                 mov     rax, [rdi+8]
.text:00000000000061F4                 cmp     [rdi+10h], rax
.text:00000000000061F8                 jz      short loc_6200
.text:00000000000061FA
.text:00000000000061FA loc_61FA:                               ; CODE XREF: rpl_fseeko+18↓j
.text:00000000000061FA                                         ; rpl_fseeko+1F↓j
.text:00000000000061FA                 jmp     _fseeko
.text:00000000000061FA ; ---------------------------------------------------------------------------
.text:00000000000061FF                 align 20h
.text:0000000000006200
.text:0000000000006200 loc_6200:                               ; CODE XREF: rpl_fseeko+8↑j
.text:0000000000006200                 mov     rax, [rdi+20h]
.text:0000000000006204                 cmp     [rdi+28h], rax
.text:0000000000006208                 jnz     short loc_61FA
.text:000000000000620A                 cmp     qword ptr [rdi+48h], 0
.text:000000000000620F                 jnz     short loc_61FA
.text:0000000000006211                 push    r12
.text:0000000000006213                 push    rbp
.text:0000000000006214                 mov     r12d, edx
.text:0000000000006217                 push    rbx
.text:0000000000006218                 mov     rbp, rsi
.text:000000000000621B                 mov     rbx, rdi
.text:000000000000621E                 call    _fileno
.text:0000000000006223                 mov     edx, r12d       ; whence
.text:0000000000006226                 mov     rsi, rbp        ; offset
.text:0000000000006229                 mov     edi, eax        ; fd
.text:000000000000622B                 call    _lseek
.text:0000000000006230                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000006234                 jz      short loc_6242
.text:0000000000006236                 and     dword ptr [rbx], 0FFFFFFEFh
.text:0000000000006239                 mov     [rbx+90h], rax
.text:0000000000006240                 xor     eax, eax
.text:0000000000006242
.text:0000000000006242 loc_6242:                               ; CODE XREF: rpl_fseeko+44↑j
.text:0000000000006242                 pop     rbx
.text:0000000000006243                 pop     rbp
.text:0000000000006244                 pop     r12
.text:0000000000006246                 retn
.text:0000000000006246 ; } // starts at 61F0
.text:0000000000006246 rpl_fseeko      endp
.text:0000000000006246
.text:0000000000006246 ; ---------------------------------------------------------------------------
.text:0000000000006247                 align 10h
.text:0000000000006250
.text:0000000000006250 ; =============== S U B R O U T I N E =======================================
.text:0000000000006250
.text:0000000000006250 ; Attributes: bp-based frame
.text:0000000000006250
.text:0000000000006250                 public vasnprintf
.text:0000000000006250 vasnprintf      proc near               ; CODE XREF: u16_u16_vasprintf+26↑p
.text:0000000000006250
.text:0000000000006250 var_450         = tbyte ptr -450h
.text:0000000000006250 var_440         = tbyte ptr -440h
.text:0000000000006250 var_430         = qword ptr -430h
.text:0000000000006250 var_421         = byte ptr -421h
.text:0000000000006250 ptr             = qword ptr -420h
.text:0000000000006250 var_418         = qword ptr -418h
.text:0000000000006250 var_410         = qword ptr -410h
.text:0000000000006250 var_408         = qword ptr -408h
.text:0000000000006250 var_400         = qword ptr -400h
.text:0000000000006250 var_3F8         = qword ptr -3F8h
.text:0000000000006250 var_3F0         = qword ptr -3F0h
.text:0000000000006250 src             = qword ptr -3E8h
.text:0000000000006250 var_3E0         = qword ptr -3E0h
.text:0000000000006250 var_3D8         = qword ptr -3D8h
.text:0000000000006250 var_3D0         = qword ptr -3D0h
.text:0000000000006250 n               = qword ptr -3C8h
.text:0000000000006250 var_3BC         = dword ptr -3BCh
.text:0000000000006250 var_3B8         = dword ptr -3B8h
.text:0000000000006250 var_3B4         = dword ptr -3B4h
.text:0000000000006250 var_3B0         = byte ptr -3B0h
.text:0000000000006250 var_3A8         = qword ptr -3A8h
.text:0000000000006250 var_2C0         = qword ptr -2C0h
.text:0000000000006250 var_2B8         = qword ptr -2B8h
.text:0000000000006250 var_2B0         = qword ptr -2B0h
.text:0000000000006250 var_2A8         = qword ptr -2A8h
.text:0000000000006250 var_38          = qword ptr -38h
.text:0000000000006250
.text:0000000000006250 ; __unwind {
.text:0000000000006250                 push    rbp
.text:0000000000006251                 mov     rbp, rsp
.text:0000000000006254                 push    r15
.text:0000000000006256                 push    r14
.text:0000000000006258                 push    r13
.text:000000000000625A                 push    r12
.text:000000000000625C                 lea     r14, [rbp+var_3B0]
.text:0000000000006263                 push    rbx
.text:0000000000006264                 mov     rbx, rdx
.text:0000000000006267                 mov     r12, rcx
.text:000000000000626A                 mov     rdx, r14
.text:000000000000626D                 sub     rsp, 408h
.text:0000000000006274                 mov     [rbp+var_418], rsi
.text:000000000000627B                 lea     rsi, [rbp+var_2C0]
.text:0000000000006282                 mov     [rbp+src], rdi
.text:0000000000006289                 mov     rdi, rbx
.text:000000000000628C                 mov     [rbp+var_410], r14
.text:0000000000006293                 mov     rax, fs:28h
.text:000000000000629C                 mov     [rbp+var_38], rax
.text:00000000000062A0                 xor     eax, eax
.text:00000000000062A2                 mov     [rbp+var_408], rsi
.text:00000000000062A9                 call    printf_parse
.text:00000000000062AE                 test    eax, eax
.text:00000000000062B0                 js      loc_7118
.text:00000000000062B6                 mov     rsi, r14
.text:00000000000062B9                 mov     rdi, r12
.text:00000000000062BC                 call    printf_fetchargs
.text:00000000000062C1                 test    eax, eax
.text:00000000000062C3                 js      loc_7180
.text:00000000000062C9                 mov     rax, [rbp+var_2B0]
.text:00000000000062D0                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000062D7                 add     rax, 7
.text:00000000000062DB                 cmp     rax, 6
.text:00000000000062DF                 cmovbe  rax, rdx
.text:00000000000062E3                 add     rax, [rbp+var_2A8]
.text:00000000000062EA                 jb      loc_6D18
.text:00000000000062F0                 mov     rdi, rax
.text:00000000000062F3                 xor     r8d, r8d
.text:00000000000062F6                 add     rdi, 6          ; size
.text:00000000000062FA                 setb    r8b
.text:00000000000062FE                 jb      loc_6D18
.text:0000000000006304                 cmp     rdi, 0F9Fh
.text:000000000000630B                 jbe     loc_6458
.text:0000000000006311                 cmp     rdi, 0FFFFFFFFFFFFFFFFh
.text:0000000000006315                 mov     [rbp+n], r8
.text:000000000000631C                 jz      loc_6D18
.text:0000000000006322                 call    _malloc
.text:0000000000006327                 test    rax, rax
.text:000000000000632A                 mov     [rbp+var_3D8], rax
.text:0000000000006331                 jz      loc_6D18
.text:0000000000006337                 mov     r8, [rbp+n]
.text:000000000000633E                 mov     [rbp+ptr], rax
.text:0000000000006345
.text:0000000000006345 loc_6345:                               ; CODE XREF: vasnprintf+22E↓j
.text:0000000000006345                 xor     r12d, r12d
.text:0000000000006348                 cmp     [rbp+src], 0
.text:0000000000006350                 jz      short loc_635C
.text:0000000000006352                 mov     rax, [rbp+var_418]
.text:0000000000006359                 mov     r12, [rax]
.text:000000000000635C
.text:000000000000635C loc_635C:                               ; CODE XREF: vasnprintf+100↑j
.text:000000000000635C                 mov     r13, [rbp+var_2B8]
.text:0000000000006363                 lea     rax, [rbp+var_3BC]
.text:000000000000636A                 mov     r15, [rbp+src]
.text:0000000000006371                 mov     [rbp+var_400], 0
.text:000000000000637C                 mov     [rbp+var_3F0], rax
.text:0000000000006383                 mov     rax, rbx
.text:0000000000006386                 mov     rbx, r8
.text:0000000000006389                 mov     rcx, [r13+0]
.text:000000000000638D                 mov     r8, rax
.text:0000000000006390                 cmp     rcx, r8
.text:0000000000006393                 jz      loc_6D01
.text:0000000000006399
.text:0000000000006399 loc_6399:                               ; CODE XREF: vasnprintf+AAB↓j
.text:0000000000006399                 sub     rcx, r8
.text:000000000000639C                 mov     rax, rbx
.text:000000000000639F                 add     rax, rcx
.text:00000000000063A2                 mov     r14, rax
.text:00000000000063A5                 jnb     loc_6488
.text:00000000000063AB                 cmp     r12, 0FFFFFFFFFFFFFFFFh
.text:00000000000063AF                 jz      loc_6E80
.text:00000000000063B5
.text:00000000000063B5 loc_63B5:                               ; CODE XREF: vasnprintf+4E2↓j
.text:00000000000063B5                                         ; vasnprintf+A86↓j ...
.text:00000000000063B5                 call    ___errno_location
.text:00000000000063BA                 mov     [rbp+n], rax
.text:00000000000063C1
.text:00000000000063C1 loc_63C1:                               ; CODE XREF: vasnprintf+640↓j
.text:00000000000063C1                                         ; vasnprintf+652↓j ...
.text:00000000000063C1                 cmp     r15, [rbp+src]
.text:00000000000063C8                 jz      short loc_63D3
.text:00000000000063CA                 test    r15, r15
.text:00000000000063CD                 jnz     loc_6EB0
.text:00000000000063D3
.text:00000000000063D3 loc_63D3:                               ; CODE XREF: vasnprintf+178↑j
.text:00000000000063D3                                         ; vasnprintf+C68↓j
.text:00000000000063D3                 mov     rax, [rbp+ptr]
.text:00000000000063DA                 test    rax, rax
.text:00000000000063DD                 jz      short loc_63E7
.text:00000000000063DF                 mov     rdi, rax        ; ptr
.text:00000000000063E2                 call    _free
.text:00000000000063E7
.text:00000000000063E7 loc_63E7:                               ; CODE XREF: vasnprintf+18D↑j
.text:00000000000063E7                                         ; vasnprintf+AD4↓j
.text:00000000000063E7                 mov     rax, [rbp+var_408]
.text:00000000000063EE                 mov     rdi, [rbp+var_2B8] ; ptr
.text:00000000000063F5                 add     rax, 20h ; ' '
.text:00000000000063F9                 cmp     rdi, rax
.text:00000000000063FC                 jz      short loc_6403
.text:00000000000063FE                 call    _free
.text:0000000000006403
.text:0000000000006403 loc_6403:                               ; CODE XREF: vasnprintf+1AC↑j
.text:0000000000006403                 mov     rax, [rbp+var_410]
.text:000000000000640A                 mov     rdi, [rbp+var_3A8] ; ptr
.text:0000000000006411                 add     rax, 10h
.text:0000000000006415                 cmp     rdi, rax
.text:0000000000006418                 jz      short loc_641F
.text:000000000000641A                 call    _free
.text:000000000000641F
.text:000000000000641F loc_641F:                               ; CODE XREF: vasnprintf+1C8↑j
.text:000000000000641F                 mov     rax, [rbp+n]
.text:0000000000006426                 xor     r15d, r15d
.text:0000000000006429                 mov     dword ptr [rax], 0Ch
.text:000000000000642F
.text:000000000000642F loc_642F:                               ; CODE XREF: vasnprintf+7BA↓j
.text:000000000000642F                                         ; vasnprintf+EBE↓j ...
.text:000000000000642F                 mov     rdi, [rbp+var_38]
.text:0000000000006433                 xor     rdi, fs:28h
.text:000000000000643C                 mov     rax, r15
.text:000000000000643F                 jnz     loc_7347
.text:0000000000006445                 lea     rsp, [rbp-28h]
.text:0000000000006449                 pop     rbx
.text:000000000000644A                 pop     r12
.text:000000000000644C                 pop     r13
.text:000000000000644E                 pop     r14
.text:0000000000006450                 pop     r15
.text:0000000000006452                 pop     rbp
.text:0000000000006453                 retn
.text:0000000000006453 ; ---------------------------------------------------------------------------
.text:0000000000006454                 align 8
.text:0000000000006458
.text:0000000000006458 loc_6458:                               ; CODE XREF: vasnprintf+BB↑j
.text:0000000000006458                 add     rax, 24h ; '$'
.text:000000000000645C                 mov     [rbp+ptr], 0
.text:0000000000006467                 and     rax, 0FFFFFFFFFFFFFFF0h
.text:000000000000646B                 sub     rsp, rax
.text:000000000000646E                 lea     rax, [rsp+430h+var_421]
.text:0000000000006473                 and     rax, 0FFFFFFFFFFFFFFF0h
.text:0000000000006477                 mov     [rbp+var_3D8], rax
.text:000000000000647E                 jmp     loc_6345
.text:000000000000647E ; ---------------------------------------------------------------------------
.text:0000000000006483                 align 8
.text:0000000000006488
.text:0000000000006488 loc_6488:                               ; CODE XREF: vasnprintf+155↑j
.text:0000000000006488                 cmp     r12, rax
.text:000000000000648B                 jnb     short loc_64F4
.text:000000000000648D                 test    r12, r12
.text:0000000000006490                 jnz     loc_6DC0
.text:0000000000006496                 cmp     rax, 0Ch
.text:000000000000649A                 ja      loc_6DD2
.text:00000000000064A0                 mov     r12d, 0Ch
.text:00000000000064A6
.text:00000000000064A6 loc_64A6:                               ; CODE XREF: vasnprintf+B7C↓j
.text:00000000000064A6                 cmp     r15, [rbp+src]
.text:00000000000064AD                 setz    dl
.text:00000000000064B0                 test    r15, r15
.text:00000000000064B3                 jz      loc_6DF8
.text:00000000000064B9
.text:00000000000064B9 loc_64B9:                               ; CODE XREF: vasnprintf+B9C↓j
.text:00000000000064B9                 test    dl, dl
.text:00000000000064BB                 jnz     loc_6DF8
.text:00000000000064C1                 mov     rsi, r12        ; size
.text:00000000000064C4                 mov     rdi, r15        ; ptr
.text:00000000000064C7                 mov     [rbp+var_3D0], r8
.text:00000000000064CE                 mov     [rbp+n], rcx
.text:00000000000064D5                 call    _realloc
.text:00000000000064DA                 test    rax, rax
.text:00000000000064DD                 mov     rcx, [rbp+n]
.text:00000000000064E4                 mov     r8, [rbp+var_3D0]
.text:00000000000064EB                 jz      loc_6E9B
.text:00000000000064F1                 mov     r15, rax
.text:00000000000064F4
.text:00000000000064F4 loc_64F4:                               ; CODE XREF: vasnprintf+23B↑j
.text:00000000000064F4                                         ; vasnprintf+C23↓j ...
.text:00000000000064F4                 lea     rdi, [r15+rbx]  ; dest
.text:00000000000064F8                 mov     rdx, rcx        ; n
.text:00000000000064FB                 mov     rsi, r8         ; src
.text:00000000000064FE                 call    _memcpy
.text:0000000000006503
.text:0000000000006503 loc_6503:                               ; CODE XREF: vasnprintf+AB4↓j
.text:0000000000006503                 mov     rax, [rbp+var_400]
.text:000000000000650A                 cmp     [rbp+var_2C0], rax
.text:0000000000006511                 jz      loc_71CB
.text:0000000000006517                 movzx   edx, byte ptr [r13+48h]
.text:000000000000651C                 mov     rax, [r13+50h]
.text:0000000000006520                 cmp     dl, 25h ; '%'
.text:0000000000006523                 jz      loc_6CB8
.text:0000000000006529                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000652D                 jz      def_67AB        ; jumptable 00000000000067AB default case, case 0
.text:000000000000652D                                         ; jumptable 0000000000006D50 default case
.text:0000000000006533                 mov     r8, [rbp+var_3A8]
.text:000000000000653A                 shl     rax, 5
.text:000000000000653E                 add     rax, r8
.text:0000000000006541                 cmp     dl, 6Eh ; 'n'
.text:0000000000006544                 mov     edi, [rax]
.text:0000000000006546                 mov     dword ptr [rbp+var_3D0], edi
.text:000000000000654C                 jz      loc_6D30
.text:0000000000006552                 mov     eax, [r13+10h]
.text:0000000000006556                 mov     rdi, [rbp+var_3D8]
.text:000000000000655D                 test    al, 1
.text:000000000000655F                 mov     byte ptr [rdi], 25h ; '%'
.text:0000000000006562                 lea     rbx, [rdi+1]
.text:0000000000006566                 jz      short loc_6577
.text:0000000000006568                 mov     rdi, [rbp+var_3D8]
.text:000000000000656F                 lea     rbx, [rdi+2]
.text:0000000000006573                 mov     byte ptr [rdi+1], 27h ; '''
.text:0000000000006577
.text:0000000000006577 loc_6577:                               ; CODE XREF: vasnprintf+316↑j
.text:0000000000006577                 test    al, 2
.text:0000000000006579                 jz      short loc_6582
.text:000000000000657B                 mov     byte ptr [rbx], 2Dh ; '-'
.text:000000000000657E                 add     rbx, 1
.text:0000000000006582
.text:0000000000006582 loc_6582:                               ; CODE XREF: vasnprintf+329↑j
.text:0000000000006582                 test    al, 4
.text:0000000000006584                 jz      short loc_658D
.text:0000000000006586                 mov     byte ptr [rbx], 2Bh ; '+'
.text:0000000000006589                 add     rbx, 1
.text:000000000000658D
.text:000000000000658D loc_658D:                               ; CODE XREF: vasnprintf+334↑j
.text:000000000000658D                 test    al, 8
.text:000000000000658F                 jz      short loc_6598
.text:0000000000006591                 mov     byte ptr [rbx], 20h ; ' '
.text:0000000000006594                 add     rbx, 1
.text:0000000000006598
.text:0000000000006598 loc_6598:                               ; CODE XREF: vasnprintf+33F↑j
.text:0000000000006598                 test    al, 10h
.text:000000000000659A                 jz      short loc_65A3
.text:000000000000659C                 mov     byte ptr [rbx], 23h ; '#'
.text:000000000000659F                 add     rbx, 1
.text:00000000000065A3
.text:00000000000065A3 loc_65A3:                               ; CODE XREF: vasnprintf+34A↑j
.text:00000000000065A3                 test    al, 40h
.text:00000000000065A5                 jz      short loc_65AE
.text:00000000000065A7                 mov     byte ptr [rbx], 49h ; 'I'
.text:00000000000065AA                 add     rbx, 1
.text:00000000000065AE
.text:00000000000065AE loc_65AE:                               ; CODE XREF: vasnprintf+355↑j
.text:00000000000065AE                 test    al, 20h
.text:00000000000065B0                 jz      short loc_65B9
.text:00000000000065B2                 mov     byte ptr [rbx], 30h ; '0'
.text:00000000000065B5                 add     rbx, 1
.text:00000000000065B9
.text:00000000000065B9 loc_65B9:                               ; CODE XREF: vasnprintf+360↑j
.text:00000000000065B9                 mov     rsi, [r13+18h]  ; src
.text:00000000000065BD                 mov     rdx, [r13+20h]
.text:00000000000065C1                 cmp     rsi, rdx
.text:00000000000065C4                 jz      short loc_65F6
.text:00000000000065C6                 mov     rcx, rdx
.text:00000000000065C9                 mov     rdi, rbx        ; dest
.text:00000000000065CC                 mov     [rbp+var_3E0], r8
.text:00000000000065D3                 sub     rcx, rsi
.text:00000000000065D6                 mov     rdx, rcx        ; n
.text:00000000000065D9                 mov     [rbp+n], rcx
.text:00000000000065E0                 call    _memcpy
.text:00000000000065E5                 mov     rcx, [rbp+n]
.text:00000000000065EC                 mov     r8, [rbp+var_3E0]
.text:00000000000065F3                 add     rbx, rcx
.text:00000000000065F6
.text:00000000000065F6 loc_65F6:                               ; CODE XREF: vasnprintf+374↑j
.text:00000000000065F6                 mov     rsi, [r13+30h]  ; src
.text:00000000000065FA                 mov     rdx, [r13+38h]
.text:00000000000065FE                 cmp     rsi, rdx
.text:0000000000006601                 jz      short loc_6633
.text:0000000000006603                 mov     rcx, rdx
.text:0000000000006606                 mov     rdi, rbx        ; dest
.text:0000000000006609                 mov     [rbp+var_3E0], r8
.text:0000000000006610                 sub     rcx, rsi
.text:0000000000006613                 mov     rdx, rcx        ; n
.text:0000000000006616                 mov     [rbp+n], rcx
.text:000000000000661D                 call    _memcpy
.text:0000000000006622                 mov     rcx, [rbp+n]
.text:0000000000006629                 mov     r8, [rbp+var_3E0]
.text:0000000000006630                 add     rbx, rcx
.text:0000000000006633
.text:0000000000006633 loc_6633:                               ; CODE XREF: vasnprintf+3B1↑j
.text:0000000000006633                 mov     edi, dword ptr [rbp+var_3D0]
.text:0000000000006639                 cmp     edi, 10h
.text:000000000000663C                 ja      short loc_666B
.text:000000000000663E                 mov     eax, 1
.text:0000000000006643                 mov     ecx, edi
.text:0000000000006645                 shl     rax, cl
.text:0000000000006648                 test    eax, 14180h
.text:000000000000664D                 jnz     short loc_6664
.text:000000000000664F                 test    ah, 10h
.text:0000000000006652                 jnz     loc_6FB0
.text:0000000000006658                 test    ah, 6
.text:000000000000665B                 jz      short loc_666B
.text:000000000000665D                 mov     byte ptr [rbx], 6Ch ; 'l'
.text:0000000000006660                 add     rbx, 1
.text:0000000000006664
.text:0000000000006664 loc_6664:                               ; CODE XREF: vasnprintf+3FD↑j
.text:0000000000006664                 mov     byte ptr [rbx], 6Ch ; 'l'
.text:0000000000006667                 add     rbx, 1
.text:000000000000666B
.text:000000000000666B loc_666B:                               ; CODE XREF: vasnprintf+3EC↑j
.text:000000000000666B                                         ; vasnprintf+40B↑j ...
.text:000000000000666B                 movzx   eax, byte ptr [r13+48h]
.text:0000000000006670                 mov     byte ptr [rbx+1], 0
.text:0000000000006674                 mov     [rbx], al
.text:0000000000006676                 mov     rax, [r13+28h]
.text:000000000000667A                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000667E                 jz      loc_6DB0
.text:0000000000006684                 shl     rax, 5
.text:0000000000006688                 add     rax, r8
.text:000000000000668B                 cmp     dword ptr [rax], 5
.text:000000000000668E                 jnz     def_67AB        ; jumptable 00000000000067AB default case, case 0
.text:000000000000668E                                         ; jumptable 0000000000006D50 default case
.text:0000000000006694                 mov     eax, [rax+10h]
.text:0000000000006697                 mov     dword ptr [rbp+var_3E0], 1
.text:00000000000066A1                 mov     [rbp+var_3B8], eax
.text:00000000000066A7
.text:00000000000066A7 loc_66A7:                               ; CODE XREF: vasnprintf+B6A↓j
.text:00000000000066A7                 mov     rax, [r13+40h]
.text:00000000000066AB                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000066AF                 jz      short loc_66DC
.text:00000000000066B1                 shl     rax, 5
.text:00000000000066B5                 add     r8, rax
.text:00000000000066B8                 cmp     dword ptr [r8], 5
.text:00000000000066BC                 jnz     def_67AB        ; jumptable 00000000000067AB default case, case 0
.text:00000000000066BC                                         ; jumptable 0000000000006D50 default case
.text:00000000000066C2                 mov     eax, dword ptr [rbp+var_3E0]
.text:00000000000066C8                 mov     edx, [r8+10h]
.text:00000000000066CC                 mov     [rbp+rax*4+var_3B8], edx
.text:00000000000066D3                 lea     eax, [rax+1]
.text:00000000000066D6                 mov     dword ptr [rbp+var_3E0], eax
.text:00000000000066DC
.text:00000000000066DC loc_66DC:                               ; CODE XREF: vasnprintf+45F↑j
.text:00000000000066DC                 mov     rax, r14
.text:00000000000066DF                 xor     edx, edx
.text:00000000000066E1                 add     rax, 2
.text:00000000000066E5                 jb      loc_734C
.text:00000000000066EB                 cmp     r12, rax
.text:00000000000066EE                 jnb     short loc_673B
.text:00000000000066F0                 test    r12, r12
.text:00000000000066F3                 jnz     loc_6F18
.text:00000000000066F9                 cmp     rax, 0Ch
.text:00000000000066FD                 ja      loc_6F30
.text:0000000000006703                 mov     r12d, 0Ch
.text:0000000000006709
.text:0000000000006709 loc_6709:                               ; CODE XREF: vasnprintf+CD4↓j
.text:0000000000006709                 cmp     r15, [rbp+src]
.text:0000000000006710                 setz    dl
.text:0000000000006713                 test    r15, r15
.text:0000000000006716                 jz      loc_6F60
.text:000000000000671C
.text:000000000000671C loc_671C:                               ; CODE XREF: vasnprintf+D03↓j
.text:000000000000671C                 test    dl, dl
.text:000000000000671E                 jnz     loc_6F60
.text:0000000000006724                 mov     rsi, r12        ; size
.text:0000000000006727                 mov     rdi, r15        ; ptr
.text:000000000000672A                 call    _realloc
.text:000000000000672F                 test    rax, rax
.text:0000000000006732                 jz      loc_63B5
.text:0000000000006738                 mov     r15, rax
.text:000000000000673B
.text:000000000000673B loc_673B:                               ; CODE XREF: vasnprintf+49E↑j
.text:000000000000673B                                         ; vasnprintf+D53↓j ...
.text:000000000000673B                 mov     byte ptr [r15+r14], 0
.text:0000000000006740                 call    ___errno_location
.text:0000000000006745                 mov     [rbp+n], rax
.text:000000000000674C                 mov     eax, [rax]
.text:000000000000674E                 mov     [rbp+var_3F8], rbx
.text:0000000000006755                 mov     [rbp-424h], eax
.text:000000000000675B                 nop     dword ptr [rax+rax+00h]
.text:0000000000006760
.text:0000000000006760 loc_6760:                               ; CODE XREF: vasnprintf+637↓j
.text:0000000000006760                                         ; vasnprintf+68D↓j ...
.text:0000000000006760                 mov     rax, [rbp+n]
.text:0000000000006767                 mov     rbx, r12
.text:000000000000676A                 mov     r10d, 7FFFFFFFh
.text:0000000000006770                 sub     rbx, r14
.text:0000000000006773                 mov     [rbp+var_3BC], 0FFFFFFFFh
.text:000000000000677D                 cmp     rbx, 7FFFFFFFh
.text:0000000000006784                 mov     dword ptr [rax], 0
.text:000000000000678A                 mov     eax, dword ptr [rbp+var_3D0]
.text:0000000000006790                 cmovbe  r10, rbx
.text:0000000000006794                 cmp     eax, 11h        ; switch 18 cases
.text:0000000000006797                 ja      def_67AB        ; jumptable 00000000000067AB default case, case 0
.text:0000000000006797                                         ; jumptable 0000000000006D50 default case
.text:000000000000679D                 lea     rsi, jpt_67AB
.text:00000000000067A4                 movsxd  rax, ds:(jpt_67AB - 9C10h)[rsi+rax*4]
.text:00000000000067A8                 add     rax, rsi
.text:00000000000067AB                 jmp     rax             ; switch jump
.text:00000000000067AB ; ---------------------------------------------------------------------------
.text:00000000000067AD                 align 10h
.text:00000000000067B0
.text:00000000000067B0 loc_67B0:                               ; CODE XREF: vasnprintf+55B↑j
.text:00000000000067B0                                         ; DATA XREF: .rodata:jpt_67AB↓o
.text:00000000000067B0                 mov     rax, [r13+50h]  ; jumptable 00000000000067AB cases 7-10,15-17
.text:00000000000067B4                 lea     rdi, [r15+r14]
.text:00000000000067B8                 shl     rax, 5
.text:00000000000067BC                 add     rax, [rbp+var_3A8]
.text:00000000000067C3                 mov     r9, [rax+10h]
.text:00000000000067C7                 mov     eax, dword ptr [rbp+var_3E0]
.text:00000000000067CD                 cmp     eax, 1
.text:00000000000067D0                 jz      loc_6C98
.text:00000000000067D6                 cmp     eax, 2
.text:00000000000067D9                 jz      loc_6C80
.text:00000000000067DF                 sub     rsp, 8
.text:00000000000067E3                 push    [rbp+var_3F0]
.text:00000000000067E9
.text:00000000000067E9 loc_67E9:                               ; CODE XREF: vasnprintf+CBE↓j
.text:00000000000067E9                 mov     r8, [rbp+var_3D8]
.text:00000000000067F0                 mov     rsi, r10
.text:00000000000067F3                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:00000000000067FA                 mov     edx, 1
.text:00000000000067FF                 xor     eax, eax
.text:0000000000006801                 mov     [rbp+var_430], r10
.text:0000000000006808                 call    ___snprintf_chk
.text:000000000000680D                 pop     rsi
.text:000000000000680E                 pop     rdi
.text:000000000000680F                 mov     r10, [rbp+var_430]
.text:0000000000006816
.text:0000000000006816 loc_6816:                               ; CODE XREF: vasnprintf+83D↓j
.text:0000000000006816                                         ; vasnprintf+8BE↓j ...
.text:0000000000006816                 mov     ecx, [rbp+var_3BC]
.text:000000000000681C                 test    ecx, ecx
.text:000000000000681E                 js      loc_695C
.text:0000000000006824
.text:0000000000006824 loc_6824:                               ; CODE XREF: vasnprintf+706↓j
.text:0000000000006824                 movsxd  rdx, ecx
.text:0000000000006827                 cmp     rdx, r10
.text:000000000000682A                 jnb     short loc_683A
.text:000000000000682C                 add     rdx, r15
.text:000000000000682F                 cmp     byte ptr [rdx+r14], 0
.text:0000000000006834                 jnz     def_67AB        ; jumptable 00000000000067AB default case, case 0
.text:0000000000006834                                         ; jumptable 0000000000006D50 default case
.text:000000000000683A
.text:000000000000683A loc_683A:                               ; CODE XREF: vasnprintf+5DA↑j
.text:000000000000683A                 cmp     ecx, eax
.text:000000000000683C                 jge     short loc_6846
.text:000000000000683E
.text:000000000000683E loc_683E:                               ; CODE XREF: vasnprintf+71F↓j
.text:000000000000683E                 mov     [rbp+var_3BC], eax
.text:0000000000006844                 mov     ecx, eax
.text:0000000000006846
.text:0000000000006846 loc_6846:                               ; CODE XREF: vasnprintf+5EC↑j
.text:0000000000006846                 lea     eax, [rcx+1]
.text:0000000000006849                 cmp     rax, r10
.text:000000000000684C                 jb      loc_7080
.text:0000000000006852                 cmp     rbx, 7FFFFFFEh
.text:0000000000006859                 ja      loc_70A0
.text:000000000000685F                 lea     rsi, [r12+r12]
.text:0000000000006863                 lea     edx, [rcx+2]
.text:0000000000006866                 test    r12, r12
.text:0000000000006869                 mov     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000006870                 cmovns  rax, rsi
.text:0000000000006874                 add     rdx, r14
.text:0000000000006877                 jb      loc_7338
.text:000000000000687D                 cmp     rax, rdx
.text:0000000000006880                 cmovb   rax, rdx
.text:0000000000006884                 cmp     r12, rax
.text:0000000000006887                 jnb     loc_6760
.text:000000000000688D                 test    r12, r12
.text:0000000000006890                 js      loc_63C1
.text:0000000000006896                 cmp     rsi, rax
.text:0000000000006899                 mov     r12, rsi
.text:000000000000689C                 jnb     short loc_68AB
.text:000000000000689E                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000068A2                 jz      loc_63C1
.text:00000000000068A8                 mov     r12, rax
.text:00000000000068AB
.text:00000000000068AB loc_68AB:                               ; CODE XREF: vasnprintf+64C↑j
.text:00000000000068AB                 cmp     r15, [rbp+src]
.text:00000000000068B2                 setz    bl
.text:00000000000068B5                 test    r15, r15
.text:00000000000068B8                 jz      loc_6C40
.text:00000000000068BE                 test    bl, bl
.text:00000000000068C0                 jnz     loc_6C40
.text:00000000000068C6                 mov     rsi, r12        ; size
.text:00000000000068C9                 mov     rdi, r15        ; ptr
.text:00000000000068CC                 call    _realloc
.text:00000000000068D1                 test    rax, rax
.text:00000000000068D4                 jz      loc_63C1
.text:00000000000068DA                 mov     r15, rax
.text:00000000000068DD                 jmp     loc_6760
.text:00000000000068DD ; ---------------------------------------------------------------------------
.text:00000000000068E2                 align 8
.text:00000000000068E8
.text:00000000000068E8 loc_68E8:                               ; CODE XREF: vasnprintf+55B↑j
.text:00000000000068E8                                         ; DATA XREF: .rodata:jpt_67AB↓o
.text:00000000000068E8                 mov     rax, [r13+50h]  ; jumptable 00000000000067AB cases 5,6,13,14
.text:00000000000068EC                 lea     rdi, [r15+r14]
.text:00000000000068F0                 shl     rax, 5
.text:00000000000068F4                 add     rax, [rbp+var_3A8]
.text:00000000000068FB                 mov     r9d, [rax+10h]
.text:00000000000068FF                 mov     eax, dword ptr [rbp+var_3E0]
.text:0000000000006905                 cmp     eax, 1
.text:0000000000006908                 jz      loc_6B40
.text:000000000000690E
.text:000000000000690E loc_690E:                               ; CODE XREF: vasnprintf+8E9↓j
.text:000000000000690E                                         ; vasnprintf+9B1↓j ...
.text:000000000000690E                 cmp     eax, 2
.text:0000000000006911                 jz      loc_6B88
.text:0000000000006917
.text:0000000000006917 loc_6917:                               ; CODE XREF: vasnprintf+92E↓j
.text:0000000000006917                 sub     rsp, 8
.text:000000000000691B                 push    [rbp+var_3F0]
.text:0000000000006921
.text:0000000000006921 loc_6921:                               ; CODE XREF: vasnprintf+8FF↓j
.text:0000000000006921                 mov     r8, [rbp+var_3D8]
.text:0000000000006928                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:000000000000692F                 mov     edx, 1
.text:0000000000006934                 mov     rsi, r10
.text:0000000000006937                 xor     eax, eax
.text:0000000000006939                 mov     [rbp+var_430], r10
.text:0000000000006940                 call    ___snprintf_chk
.text:0000000000006945                 pop     rdx
.text:0000000000006946                 pop     rcx
.text:0000000000006947                 mov     ecx, [rbp+var_3BC]
.text:000000000000694D                 mov     r10, [rbp+var_430]
.text:0000000000006954                 test    ecx, ecx
.text:0000000000006956                 jns     loc_6824
.text:000000000000695C
.text:000000000000695C loc_695C:                               ; CODE XREF: vasnprintf+5CE↑j
.text:000000000000695C                 mov     rdi, [rbp+var_3F8]
.text:0000000000006963                 cmp     byte ptr [rdi+1], 0
.text:0000000000006967                 jnz     loc_6CA8
.text:000000000000696D                 test    eax, eax
.text:000000000000696F                 jns     loc_683E
.text:0000000000006975                 mov     rax, [rbp+n]
.text:000000000000697C                 mov     ebx, [rax]
.text:000000000000697E                 test    ebx, ebx
.text:0000000000006980                 jnz     short loc_69A0
.text:0000000000006982                 movzx   eax, byte ptr [r13+48h]
.text:0000000000006987                 mov     ebx, 16h
.text:000000000000698C                 and     eax, 0FFFFFFEFh
.text:000000000000698F                 cmp     al, 63h ; 'c'
.text:0000000000006991                 mov     eax, 54h ; 'T'
.text:0000000000006996                 cmovz   ebx, eax
.text:0000000000006999                 nop     dword ptr [rax+00000000h]
.text:00000000000069A0
.text:00000000000069A0 loc_69A0:                               ; CODE XREF: vasnprintf+730↑j
.text:00000000000069A0                 cmp     r15, [rbp+src]
.text:00000000000069A7                 jz      short loc_69B2
.text:00000000000069A9                 test    r15, r15
.text:00000000000069AC                 jnz     loc_715C
.text:00000000000069B2
.text:00000000000069B2 loc_69B2:                               ; CODE XREF: vasnprintf+757↑j
.text:00000000000069B2                                         ; vasnprintf+F14↓j
.text:00000000000069B2                 mov     rax, [rbp+ptr]
.text:00000000000069B9                 test    rax, rax
.text:00000000000069BC                 jz      short loc_69C6
.text:00000000000069BE                 mov     rdi, rax        ; ptr
.text:00000000000069C1                 call    _free
.text:00000000000069C6
.text:00000000000069C6 loc_69C6:                               ; CODE XREF: vasnprintf+76C↑j
.text:00000000000069C6                 mov     rax, [rbp+var_408]
.text:00000000000069CD                 mov     rdi, [rbp+var_2B8] ; ptr
.text:00000000000069D4                 add     rax, 20h ; ' '
.text:00000000000069D8                 cmp     rdi, rax
.text:00000000000069DB                 jz      short loc_69E2
.text:00000000000069DD                 call    _free
.text:00000000000069E2
.text:00000000000069E2 loc_69E2:                               ; CODE XREF: vasnprintf+78B↑j
.text:00000000000069E2                 mov     rax, [rbp+var_410]
.text:00000000000069E9                 mov     rdi, [rbp+var_3A8] ; ptr
.text:00000000000069F0                 add     rax, 10h
.text:00000000000069F4                 cmp     rdi, rax
.text:00000000000069F7                 jz      short loc_69FE
.text:00000000000069F9                 call    _free
.text:00000000000069FE
.text:00000000000069FE loc_69FE:                               ; CODE XREF: vasnprintf+7A7↑j
.text:00000000000069FE                 mov     rax, [rbp+n]
.text:0000000000006A05                 xor     r15d, r15d
.text:0000000000006A08                 mov     [rax], ebx
.text:0000000000006A0A                 jmp     loc_642F
.text:0000000000006A0A ; ---------------------------------------------------------------------------
.text:0000000000006A0F                 align 10h
.text:0000000000006A10
.text:0000000000006A10 loc_6A10:                               ; CODE XREF: vasnprintf+55B↑j
.text:0000000000006A10                                         ; DATA XREF: .rodata:jpt_67AB↓o
.text:0000000000006A10                 mov     rax, [r13+50h]  ; jumptable 00000000000067AB case 12
.text:0000000000006A14                 lea     rdi, [r15+r14]
.text:0000000000006A18                 shl     rax, 5
.text:0000000000006A1C                 add     rax, [rbp+var_3A8]
.text:0000000000006A23                 fld     tbyte ptr [rax+10h]
.text:0000000000006A26                 mov     eax, dword ptr [rbp+var_3E0]
.text:0000000000006A2C                 cmp     eax, 1
.text:0000000000006A2F                 jz      loc_7060
.text:0000000000006A35                 cmp     eax, 2
.text:0000000000006A38                 jnz     loc_6F00
.text:0000000000006A3E                 mov     eax, [rbp+var_3B4]
.text:0000000000006A44                 sub     rsp, 8
.text:0000000000006A48                 push    [rbp+var_3F0]
.text:0000000000006A4E                 mov     r9d, [rbp+var_3B8]
.text:0000000000006A55                 mov     r8, [rbp+var_3D8]
.text:0000000000006A5C                 mov     rsi, r10
.text:0000000000006A5F                 sub     rsp, 18h
.text:0000000000006A63                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:0000000000006A6A                 mov     edx, 1
.text:0000000000006A6F                 fstp    [rsp+458h+var_450]
.text:0000000000006A73                 push    rax
.text:0000000000006A74                 xor     eax, eax
.text:0000000000006A76                 mov     [rbp+var_430], r10
.text:0000000000006A7D                 call    ___snprintf_chk
.text:0000000000006A82                 add     rsp, 30h
.text:0000000000006A86                 mov     r10, [rbp+var_430]
.text:0000000000006A8D                 jmp     loc_6816
.text:0000000000006A8D ; ---------------------------------------------------------------------------
.text:0000000000006A92                 align 8
.text:0000000000006A98
.text:0000000000006A98 loc_6A98:                               ; CODE XREF: vasnprintf+55B↑j
.text:0000000000006A98                                         ; DATA XREF: .rodata:jpt_67AB↓o
.text:0000000000006A98                 mov     rax, [r13+50h]  ; jumptable 00000000000067AB case 11
.text:0000000000006A9C                 lea     rdi, [r15+r14]
.text:0000000000006AA0                 shl     rax, 5
.text:0000000000006AA4                 add     rax, [rbp+var_3A8]
.text:0000000000006AAB                 movsd   xmm0, qword ptr [rax+10h]
.text:0000000000006AB0                 mov     eax, dword ptr [rbp+var_3E0]
.text:0000000000006AB6                 cmp     eax, 1
.text:0000000000006AB9                 jz      loc_7050
.text:0000000000006ABF                 cmp     eax, 2
.text:0000000000006AC2                 jnz     loc_6EC0
.text:0000000000006AC8                 mov     eax, [rbp+var_3B4]
.text:0000000000006ACE                 push    [rbp+var_3F0]
.text:0000000000006AD4                 push    rax
.text:0000000000006AD5
.text:0000000000006AD5 loc_6AD5:                               ; CODE XREF: vasnprintf+E0A↓j
.text:0000000000006AD5                 mov     r9d, [rbp+var_3B8]
.text:0000000000006ADC                 mov     r8, [rbp+var_3D8]
.text:0000000000006AE3                 mov     rsi, r10
.text:0000000000006AE6                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:0000000000006AED                 mov     edx, 1
.text:0000000000006AF2                 mov     eax, 1
.text:0000000000006AF7                 mov     [rbp+var_430], r10
.text:0000000000006AFE                 call    ___snprintf_chk
.text:0000000000006B03                 pop     r8
.text:0000000000006B05                 mov     r10, [rbp+var_430]
.text:0000000000006B0C                 pop     r9
.text:0000000000006B0E                 jmp     loc_6816
.text:0000000000006B0E ; ---------------------------------------------------------------------------
.text:0000000000006B13                 align 8
.text:0000000000006B18
.text:0000000000006B18 loc_6B18:                               ; CODE XREF: vasnprintf+55B↑j
.text:0000000000006B18                                         ; DATA XREF: .rodata:jpt_67AB↓o
.text:0000000000006B18                 mov     rax, [r13+50h]  ; jumptable 00000000000067AB case 4
.text:0000000000006B1C                 lea     rdi, [r15+r14]
.text:0000000000006B20                 shl     rax, 5
.text:0000000000006B24                 add     rax, [rbp+var_3A8]
.text:0000000000006B2B                 movzx   r9d, word ptr [rax+10h]
.text:0000000000006B30                 mov     eax, dword ptr [rbp+var_3E0]
.text:0000000000006B36                 cmp     eax, 1
.text:0000000000006B39                 jnz     loc_690E
.text:0000000000006B3F                 nop
.text:0000000000006B40
.text:0000000000006B40 loc_6B40:                               ; CODE XREF: vasnprintf+6B8↑j
.text:0000000000006B40                                         ; vasnprintf+929↓j ...
.text:0000000000006B40                 push    [rbp+var_3F0]
.text:0000000000006B46                 push    r9
.text:0000000000006B48
.text:0000000000006B48 loc_6B48:                               ; CODE XREF: vasnprintf+A50↓j
.text:0000000000006B48                 mov     r9d, [rbp+var_3B8]
.text:0000000000006B4F                 jmp     loc_6921
.text:0000000000006B4F ; ---------------------------------------------------------------------------
.text:0000000000006B54                 align 8
.text:0000000000006B58
.text:0000000000006B58 loc_6B58:                               ; CODE XREF: vasnprintf+55B↑j
.text:0000000000006B58                                         ; DATA XREF: .rodata:jpt_67AB↓o
.text:0000000000006B58                 mov     rax, [r13+50h]  ; jumptable 00000000000067AB case 3
.text:0000000000006B5C                 lea     rdi, [r15+r14]
.text:0000000000006B60                 shl     rax, 5
.text:0000000000006B64                 add     rax, [rbp+var_3A8]
.text:0000000000006B6B                 movsx   r9d, word ptr [rax+10h]
.text:0000000000006B70                 mov     eax, dword ptr [rbp+var_3E0]
.text:0000000000006B76                 cmp     eax, 1
.text:0000000000006B79                 jz      short loc_6B40
.text:0000000000006B7B                 cmp     eax, 2
.text:0000000000006B7E                 jnz     loc_6917
.text:0000000000006B84                 nop     dword ptr [rax+00h]
.text:0000000000006B88
.text:0000000000006B88 loc_6B88:                               ; CODE XREF: vasnprintf+6C1↑j
.text:0000000000006B88                 sub     rsp, 8
.text:0000000000006B8C                 push    [rbp+var_3F0]
.text:0000000000006B92                 push    r9
.text:0000000000006B94
.text:0000000000006B94 loc_6B94:                               ; CODE XREF: vasnprintf+A3C↓j
.text:0000000000006B94                 mov     eax, [rbp+var_3B4]
.text:0000000000006B9A                 push    rax
.text:0000000000006B9B
.text:0000000000006B9B loc_6B9B:                               ; CODE XREF: vasnprintf+E21↓j
.text:0000000000006B9B                 mov     r9d, [rbp+var_3B8]
.text:0000000000006BA2                 mov     r8, [rbp+var_3D8]
.text:0000000000006BA9                 mov     rsi, r10
.text:0000000000006BAC                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:0000000000006BB3                 mov     edx, 1
.text:0000000000006BB8                 xor     eax, eax
.text:0000000000006BBA                 mov     [rbp+var_430], r10
.text:0000000000006BC1                 call    ___snprintf_chk
.text:0000000000006BC6                 add     rsp, 20h
.text:0000000000006BCA                 mov     r10, [rbp+var_430]
.text:0000000000006BD1                 jmp     loc_6816
.text:0000000000006BD1 ; ---------------------------------------------------------------------------
.text:0000000000006BD6                 align 20h
.text:0000000000006BE0
.text:0000000000006BE0 loc_6BE0:                               ; CODE XREF: vasnprintf+55B↑j
.text:0000000000006BE0                                         ; DATA XREF: .rodata:jpt_67AB↓o
.text:0000000000006BE0                 mov     rax, [r13+50h]  ; jumptable 00000000000067AB case 2
.text:0000000000006BE4                 lea     rdi, [r15+r14]
.text:0000000000006BE8                 shl     rax, 5
.text:0000000000006BEC                 add     rax, [rbp+var_3A8]
.text:0000000000006BF3                 movzx   r9d, byte ptr [rax+10h]
.text:0000000000006BF8                 mov     eax, dword ptr [rbp+var_3E0]
.text:0000000000006BFE                 cmp     eax, 1
.text:0000000000006C01                 jnz     loc_690E
.text:0000000000006C07                 jmp     loc_6B40
.text:0000000000006C07 ; ---------------------------------------------------------------------------
.text:0000000000006C0C                 align 10h
.text:0000000000006C10
.text:0000000000006C10 loc_6C10:                               ; CODE XREF: vasnprintf+55B↑j
.text:0000000000006C10                                         ; DATA XREF: .rodata:jpt_67AB↓o
.text:0000000000006C10                 mov     rax, [r13+50h]  ; jumptable 00000000000067AB case 1
.text:0000000000006C14                 lea     rdi, [r15+r14]
.text:0000000000006C18                 shl     rax, 5
.text:0000000000006C1C                 add     rax, [rbp+var_3A8]
.text:0000000000006C23                 movsx   r9d, byte ptr [rax+10h]
.text:0000000000006C28                 mov     eax, dword ptr [rbp+var_3E0]
.text:0000000000006C2E                 cmp     eax, 1
.text:0000000000006C31                 jnz     loc_690E
.text:0000000000006C37                 jmp     loc_6B40
.text:0000000000006C37 ; ---------------------------------------------------------------------------
.text:0000000000006C3C                 align 20h
.text:0000000000006C40
.text:0000000000006C40 loc_6C40:                               ; CODE XREF: vasnprintf+668↑j
.text:0000000000006C40                                         ; vasnprintf+670↑j
.text:0000000000006C40                 mov     rdi, r12        ; size
.text:0000000000006C43                 call    _malloc
.text:0000000000006C48                 test    rax, rax
.text:0000000000006C4B                 mov     rcx, rax
.text:0000000000006C4E                 jz      loc_63C1
.text:0000000000006C54                 test    r14, r14
.text:0000000000006C57                 jz      loc_6D10
.text:0000000000006C5D                 test    bl, bl
.text:0000000000006C5F                 jz      loc_6D10
.text:0000000000006C65                 mov     rsi, r15        ; src
.text:0000000000006C68                 mov     rdx, r14        ; n
.text:0000000000006C6B                 mov     rdi, rax        ; dest
.text:0000000000006C6E                 call    _memcpy
.text:0000000000006C73                 mov     r15, rax
.text:0000000000006C76                 jmp     loc_6760
.text:0000000000006C76 ; ---------------------------------------------------------------------------
.text:0000000000006C7B                 align 20h
.text:0000000000006C80
.text:0000000000006C80 loc_6C80:                               ; CODE XREF: vasnprintf+589↑j
.text:0000000000006C80                 sub     rsp, 8
.text:0000000000006C84                 push    [rbp+var_3F0]
.text:0000000000006C8A                 push    r9
.text:0000000000006C8C                 jmp     loc_6B94
.text:0000000000006C8C ; ---------------------------------------------------------------------------
.text:0000000000006C91                 align 8
.text:0000000000006C98
.text:0000000000006C98 loc_6C98:                               ; CODE XREF: vasnprintf+580↑j
.text:0000000000006C98                 push    [rbp+var_3F0]
.text:0000000000006C9E                 push    r9
.text:0000000000006CA0                 jmp     loc_6B48
.text:0000000000006CA0 ; ---------------------------------------------------------------------------
.text:0000000000006CA5                 align 8
.text:0000000000006CA8
.text:0000000000006CA8 loc_6CA8:                               ; CODE XREF: vasnprintf+717↑j
.text:0000000000006CA8                 mov     byte ptr [rdi+1], 0
.text:0000000000006CAC                 jmp     loc_6760
.text:0000000000006CAC ; ---------------------------------------------------------------------------
.text:0000000000006CB1                 align 8
.text:0000000000006CB8
.text:0000000000006CB8 loc_6CB8:                               ; CODE XREF: vasnprintf+2D3↑j
.text:0000000000006CB8                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000006CBC                 jnz     def_67AB        ; jumptable 00000000000067AB default case, case 0
.text:0000000000006CBC                                         ; jumptable 0000000000006D50 default case
.text:0000000000006CC2                 mov     rax, r14
.text:0000000000006CC5                 add     rax, 1
.text:0000000000006CC9                 mov     rbx, rax
.text:0000000000006CCC                 jnb     loc_6D58
.text:0000000000006CD2                 cmp     r12, 0FFFFFFFFFFFFFFFFh
.text:0000000000006CD6                 jnz     loc_63B5
.text:0000000000006CDC                 mov     rbx, r12
.text:0000000000006CDF
.text:0000000000006CDF loc_6CDF:                               ; CODE XREF: vasnprintf+B0B↓j
.text:0000000000006CDF                                         ; vasnprintf+B58↓j ...
.text:0000000000006CDF                 mov     byte ptr [r15+r14], 25h ; '%'
.text:0000000000006CE4
.text:0000000000006CE4 loc_6CE4:                               ; CODE XREF: vasnprintf+C46↓j
.text:0000000000006CE4                                         ; vasnprintf+D76↓j ...
.text:0000000000006CE4                 mov     r8, [r13+8]
.text:0000000000006CE8                 add     r13, 58h ; 'X'
.text:0000000000006CEC                 mov     rcx, [r13+0]
.text:0000000000006CF0                 add     [rbp+var_400], 1
.text:0000000000006CF8                 cmp     rcx, r8
.text:0000000000006CFB                 jnz     loc_6399
.text:0000000000006D01
.text:0000000000006D01 loc_6D01:                               ; CODE XREF: vasnprintf+143↑j
.text:0000000000006D01                 mov     r14, rbx
.text:0000000000006D04                 jmp     loc_6503
.text:0000000000006D04 ; ---------------------------------------------------------------------------
.text:0000000000006D09                 align 10h
.text:0000000000006D10
.text:0000000000006D10 loc_6D10:                               ; CODE XREF: vasnprintf+A07↑j
.text:0000000000006D10                                         ; vasnprintf+A0F↑j
.text:0000000000006D10                 mov     r15, rcx
.text:0000000000006D13                 jmp     loc_6760
.text:0000000000006D18 ; ---------------------------------------------------------------------------
.text:0000000000006D18
.text:0000000000006D18 loc_6D18:                               ; CODE XREF: vasnprintf+9A↑j
.text:0000000000006D18                                         ; vasnprintf+AE↑j ...
.text:0000000000006D18                 call    ___errno_location
.text:0000000000006D1D                 mov     [rbp+n], rax
.text:0000000000006D24                 jmp     loc_63E7
.text:0000000000006D24 ; ---------------------------------------------------------------------------
.text:0000000000006D29                 align 10h
.text:0000000000006D30
.text:0000000000006D30 loc_6D30:                               ; CODE XREF: vasnprintf+2FC↑j
.text:0000000000006D30                 mov     edx, edi
.text:0000000000006D32                 sub     edx, 12h        ; switch 5 cases
.text:0000000000006D35                 cmp     edx, 4
.text:0000000000006D38                 ja      def_67AB        ; jumptable 00000000000067AB default case, case 0
.text:0000000000006D38                                         ; jumptable 0000000000006D50 default case
.text:0000000000006D3E                 lea     rdi, jpt_6D50
.text:0000000000006D45                 mov     rax, [rax+10h]
.text:0000000000006D49                 movsxd  rdx, ds:(jpt_6D50 - 9C58h)[rdi+rdx*4]
.text:0000000000006D4D                 add     rdx, rdi
.text:0000000000006D50                 jmp     rdx             ; switch jump
.text:0000000000006D50 ; ---------------------------------------------------------------------------
.text:0000000000006D52                 align 8
.text:0000000000006D58
.text:0000000000006D58 loc_6D58:                               ; CODE XREF: vasnprintf+A7C↑j
.text:0000000000006D58                 cmp     r12, rax
.text:0000000000006D5B                 jnb     short loc_6CDF
.text:0000000000006D5D                 test    r12, r12
.text:0000000000006D60                 jnz     loc_7130
.text:0000000000006D66                 cmp     rax, 0Ch
.text:0000000000006D6A                 ja      loc_7142
.text:0000000000006D70                 mov     r12d, 0Ch
.text:0000000000006D76
.text:0000000000006D76 loc_6D76:                               ; CODE XREF: vasnprintf+EEC↓j
.text:0000000000006D76                                         ; vasnprintf+EFF↓j
.text:0000000000006D76                 cmp     r15, [rbp+src]
.text:0000000000006D7D                 setz    dl
.text:0000000000006D80                 test    r15, r15
.text:0000000000006D83                 jz      loc_6FF0
.text:0000000000006D89                 test    dl, dl
.text:0000000000006D8B                 jnz     loc_6FF0
.text:0000000000006D91                 mov     rsi, r12        ; size
.text:0000000000006D94                 mov     rdi, r15        ; ptr
.text:0000000000006D97                 call    _realloc
.text:0000000000006D9C                 test    rax, rax
.text:0000000000006D9F                 jz      loc_6E9B
.text:0000000000006DA5                 mov     r15, rax
.text:0000000000006DA8                 jmp     loc_6CDF
.text:0000000000006DA8 ; ---------------------------------------------------------------------------
.text:0000000000006DAD                 align 10h
.text:0000000000006DB0
.text:0000000000006DB0 loc_6DB0:                               ; CODE XREF: vasnprintf+42E↑j
.text:0000000000006DB0                 mov     dword ptr [rbp+var_3E0], 0
.text:0000000000006DBA                 jmp     loc_66A7
.text:0000000000006DBA ; ---------------------------------------------------------------------------
.text:0000000000006DBF                 align 20h
.text:0000000000006DC0
.text:0000000000006DC0 loc_6DC0:                               ; CODE XREF: vasnprintf+240↑j
.text:0000000000006DC0                 js      loc_63B5
.text:0000000000006DC6                 add     r12, r12
.text:0000000000006DC9                 cmp     r12, rax
.text:0000000000006DCC                 jnb     loc_64A6
.text:0000000000006DD2
.text:0000000000006DD2 loc_6DD2:                               ; CODE XREF: vasnprintf+24A↑j
.text:0000000000006DD2                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000006DD6                 jz      loc_63B5
.text:0000000000006DDC                 cmp     r15, [rbp+src]
.text:0000000000006DE3                 mov     r12, rax
.text:0000000000006DE6                 setz    dl
.text:0000000000006DE9                 test    r15, r15
.text:0000000000006DEC                 jnz     loc_64B9
.text:0000000000006DF2                 nop     word ptr [rax+rax+00h]
.text:0000000000006DF8
.text:0000000000006DF8 loc_6DF8:                               ; CODE XREF: vasnprintf+263↑j
.text:0000000000006DF8                                         ; vasnprintf+26B↑j
.text:0000000000006DF8                 mov     rdi, r12        ; size
.text:0000000000006DFB                 mov     [rbp+var_3E0], r8
.text:0000000000006E02                 mov     byte ptr [rbp+var_3D0], dl
.text:0000000000006E08                 mov     [rbp+n], rcx
.text:0000000000006E0F                 call    _malloc
.text:0000000000006E14                 test    rax, rax
.text:0000000000006E17                 mov     r9, rax
.text:0000000000006E1A                 mov     rcx, [rbp+n]
.text:0000000000006E21                 movzx   edx, byte ptr [rbp+var_3D0]
.text:0000000000006E28                 mov     r8, [rbp+var_3E0]
.text:0000000000006E2F                 jz      loc_63B5
.text:0000000000006E35                 test    rbx, rbx
.text:0000000000006E38                 jz      loc_7040
.text:0000000000006E3E                 test    dl, dl
.text:0000000000006E40                 jz      loc_7040
.text:0000000000006E46                 mov     rsi, r15        ; src
.text:0000000000006E49                 mov     rdx, rbx        ; n
.text:0000000000006E4C                 mov     rdi, rax        ; dest
.text:0000000000006E4F                 mov     [rbp+var_3D0], r8
.text:0000000000006E56                 mov     [rbp+n], rcx
.text:0000000000006E5D                 call    _memcpy
.text:0000000000006E62                 mov     rcx, [rbp+n]
.text:0000000000006E69                 mov     r15, rax
.text:0000000000006E6C                 mov     r8, [rbp+var_3D0]
.text:0000000000006E73                 jmp     loc_64F4
.text:0000000000006E73 ; ---------------------------------------------------------------------------
.text:0000000000006E78                 align 20h
.text:0000000000006E80
.text:0000000000006E80 loc_6E80:                               ; CODE XREF: vasnprintf+15F↑j
.text:0000000000006E80                 mov     r14, r12
.text:0000000000006E83                 jmp     loc_64F4
.text:0000000000006E83 ; ---------------------------------------------------------------------------
.text:0000000000006E88                 align 10h
.text:0000000000006E90
.text:0000000000006E90 loc_6E90:                               ; CODE XREF: vasnprintf+B00↑j
.text:0000000000006E90                                         ; DATA XREF: .rodata:jpt_6D50↓o
.text:0000000000006E90                 mov     [rax], r14      ; jumptable 0000000000006D50 cases 21,22
.text:0000000000006E93                 mov     rbx, r14
.text:0000000000006E96                 jmp     loc_6CE4
.text:0000000000006E9B ; ---------------------------------------------------------------------------
.text:0000000000006E9B
.text:0000000000006E9B loc_6E9B:                               ; CODE XREF: vasnprintf+29B↑j
.text:0000000000006E9B                                         ; vasnprintf+B4F↑j ...
.text:0000000000006E9B                 call    ___errno_location
.text:0000000000006EA0                 mov     [rbp+n], rax
.text:0000000000006EA7                 nop     word ptr [rax+rax+00000000h]
.text:0000000000006EB0
.text:0000000000006EB0 loc_6EB0:                               ; CODE XREF: vasnprintf+17D↑j
.text:0000000000006EB0                 mov     rdi, r15        ; ptr
.text:0000000000006EB3                 call    _free
.text:0000000000006EB8                 jmp     loc_63D3
.text:0000000000006EB8 ; ---------------------------------------------------------------------------
.text:0000000000006EBD                 align 20h
.text:0000000000006EC0
.text:0000000000006EC0 loc_6EC0:                               ; CODE XREF: vasnprintf+872↑j
.text:0000000000006EC0                 mov     r9, [rbp+var_3F0]
.text:0000000000006EC7                 mov     r8, [rbp+var_3D8]
.text:0000000000006ECE                 mov     rsi, r10
.text:0000000000006ED1                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:0000000000006ED8                 mov     edx, 1
.text:0000000000006EDD                 mov     eax, 1
.text:0000000000006EE2                 mov     [rbp+var_430], r10
.text:0000000000006EE9                 call    ___snprintf_chk
.text:0000000000006EEE                 mov     r10, [rbp+var_430]
.text:0000000000006EF5                 jmp     loc_6816
.text:0000000000006EF5 ; ---------------------------------------------------------------------------
.text:0000000000006EFA                 align 20h
.text:0000000000006F00
.text:0000000000006F00 loc_6F00:                               ; CODE XREF: vasnprintf+7E8↑j
.text:0000000000006F00                 sub     rsp, 10h
.text:0000000000006F04                 mov     r9, [rbp+var_3F0]
.text:0000000000006F0B                 fstp    [rsp+440h+var_440]
.text:0000000000006F0E                 jmp     loc_67E9
.text:0000000000006F0E ; ---------------------------------------------------------------------------
.text:0000000000006F13                 align 8
.text:0000000000006F18
.text:0000000000006F18 loc_6F18:                               ; CODE XREF: vasnprintf+4A3↑j
.text:0000000000006F18                 js      loc_63B5
.text:0000000000006F1E                 add     r12, r12
.text:0000000000006F21                 cmp     r12, rax
.text:0000000000006F24                 jnb     loc_6709
.text:0000000000006F2A                 nop     word ptr [rax+rax+00h]
.text:0000000000006F30
.text:0000000000006F30 loc_6F30:                               ; CODE XREF: vasnprintf+4AD↑j
.text:0000000000006F30                                         ; vasnprintf+1114↓j
.text:0000000000006F30                 test    rdx, rdx
.text:0000000000006F33                 jnz     loc_63B5
.text:0000000000006F39                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000006F3D                 jz      loc_63B5
.text:0000000000006F43                 cmp     r15, [rbp+src]
.text:0000000000006F4A                 mov     r12, rax
.text:0000000000006F4D                 setz    dl
.text:0000000000006F50                 test    r15, r15
.text:0000000000006F53                 jnz     loc_671C
.text:0000000000006F59                 nop     dword ptr [rax+00000000h]
.text:0000000000006F60
.text:0000000000006F60 loc_6F60:                               ; CODE XREF: vasnprintf+4C6↑j
.text:0000000000006F60                                         ; vasnprintf+4CE↑j
.text:0000000000006F60                 mov     rdi, r12        ; size
.text:0000000000006F63                 mov     byte ptr [rbp+n], dl
.text:0000000000006F69                 call    _malloc
.text:0000000000006F6E                 test    rax, rax
.text:0000000000006F71                 mov     rcx, rax
.text:0000000000006F74                 movzx   edx, byte ptr [rbp+n]
.text:0000000000006F7B                 jz      loc_63B5
.text:0000000000006F81                 test    r14, r14
.text:0000000000006F84                 jz      loc_7120
.text:0000000000006F8A                 test    dl, dl
.text:0000000000006F8C                 jz      loc_7120
.text:0000000000006F92                 mov     rsi, r15        ; src
.text:0000000000006F95                 mov     rdx, r14        ; n
.text:0000000000006F98                 mov     rdi, rax        ; dest
.text:0000000000006F9B                 call    _memcpy
.text:0000000000006FA0                 mov     r15, rax
.text:0000000000006FA3                 jmp     loc_673B
.text:0000000000006FA3 ; ---------------------------------------------------------------------------
.text:0000000000006FA8                 align 10h
.text:0000000000006FB0
.text:0000000000006FB0 loc_6FB0:                               ; CODE XREF: vasnprintf+402↑j
.text:0000000000006FB0                 mov     byte ptr [rbx], 4Ch ; 'L'
.text:0000000000006FB3                 add     rbx, 1
.text:0000000000006FB7                 jmp     loc_666B
.text:0000000000006FB7 ; ---------------------------------------------------------------------------
.text:0000000000006FBC                 align 20h
.text:0000000000006FC0
.text:0000000000006FC0 loc_6FC0:                               ; CODE XREF: vasnprintf+B00↑j
.text:0000000000006FC0                                         ; DATA XREF: .rodata:jpt_6D50↓o
.text:0000000000006FC0                 mov     [rax], r14b     ; jumptable 0000000000006D50 case 18
.text:0000000000006FC3                 mov     rbx, r14
.text:0000000000006FC6                 jmp     loc_6CE4
.text:0000000000006FC6 ; ---------------------------------------------------------------------------
.text:0000000000006FCB                 align 10h
.text:0000000000006FD0
.text:0000000000006FD0 loc_6FD0:                               ; CODE XREF: vasnprintf+B00↑j
.text:0000000000006FD0                                         ; DATA XREF: .rodata:jpt_6D50↓o
.text:0000000000006FD0                 mov     [rax], r14d     ; jumptable 0000000000006D50 case 20
.text:0000000000006FD3                 mov     rbx, r14
.text:0000000000006FD6                 jmp     loc_6CE4
.text:0000000000006FD6 ; ---------------------------------------------------------------------------
.text:0000000000006FDB                 align 20h
.text:0000000000006FE0
.text:0000000000006FE0 loc_6FE0:                               ; CODE XREF: vasnprintf+B00↑j
.text:0000000000006FE0                                         ; DATA XREF: .rodata:jpt_6D50↓o
.text:0000000000006FE0                 mov     [rax], r14w     ; jumptable 0000000000006D50 case 19
.text:0000000000006FE4                 mov     rbx, r14
.text:0000000000006FE7                 jmp     loc_6CE4
.text:0000000000006FE7 ; ---------------------------------------------------------------------------
.text:0000000000006FEC                 align 10h
.text:0000000000006FF0
.text:0000000000006FF0 loc_6FF0:                               ; CODE XREF: vasnprintf+B33↑j
.text:0000000000006FF0                                         ; vasnprintf+B3B↑j
.text:0000000000006FF0                 mov     rdi, r12        ; size
.text:0000000000006FF3                 mov     byte ptr [rbp+n], dl
.text:0000000000006FF9                 call    _malloc
.text:0000000000006FFE                 test    rax, rax
.text:0000000000007001                 mov     rcx, rax
.text:0000000000007004                 movzx   edx, byte ptr [rbp+n]
.text:000000000000700B                 jz      loc_63B5
.text:0000000000007011                 test    r14, r14
.text:0000000000007014                 jz      loc_7154
.text:000000000000701A                 test    dl, dl
.text:000000000000701C                 jz      loc_7154
.text:0000000000007022                 mov     rsi, r15        ; src
.text:0000000000007025                 mov     rdx, r14        ; n
.text:0000000000007028                 mov     rdi, rax        ; dest
.text:000000000000702B                 call    _memcpy
.text:0000000000007030                 mov     r15, rax
.text:0000000000007033                 jmp     loc_6CDF
.text:0000000000007033 ; ---------------------------------------------------------------------------
.text:0000000000007038                 align 20h
.text:0000000000007040
.text:0000000000007040 loc_7040:                               ; CODE XREF: vasnprintf+BE8↑j
.text:0000000000007040                                         ; vasnprintf+BF0↑j
.text:0000000000007040                 mov     r15, r9
.text:0000000000007043                 jmp     loc_64F4
.text:0000000000007043 ; ---------------------------------------------------------------------------
.text:0000000000007048                 align 10h
.text:0000000000007050
.text:0000000000007050 loc_7050:                               ; CODE XREF: vasnprintf+869↑j
.text:0000000000007050                 sub     rsp, 8
.text:0000000000007054                 push    [rbp+var_3F0]
.text:000000000000705A                 jmp     loc_6AD5
.text:000000000000705A ; ---------------------------------------------------------------------------
.text:000000000000705F                 align 20h
.text:0000000000007060
.text:0000000000007060 loc_7060:                               ; CODE XREF: vasnprintf+7DF↑j
.text:0000000000007060                 sub     rsp, 8
.text:0000000000007064                 push    [rbp+var_3F0]
.text:000000000000706A                 sub     rsp, 10h
.text:000000000000706E                 fstp    [rsp+450h+var_450]
.text:0000000000007071                 jmp     loc_6B9B
.text:0000000000007071 ; ---------------------------------------------------------------------------
.text:0000000000007076                 align 20h
.text:0000000000007080
.text:0000000000007080 loc_7080:                               ; CODE XREF: vasnprintf+5FC↑j
.text:0000000000007080                 mov     rax, [rbp+n]
.text:0000000000007087                 mov     edi, [rbp-424h]
.text:000000000000708D                 movsxd  rbx, ecx
.text:0000000000007090                 add     rbx, r14
.text:0000000000007093                 mov     [rax], edi
.text:0000000000007095                 jmp     loc_6CE4
.text:0000000000007095 ; ---------------------------------------------------------------------------
.text:000000000000709A                 align 20h
.text:00000000000070A0
.text:00000000000070A0 loc_70A0:                               ; CODE XREF: vasnprintf+609↑j
.text:00000000000070A0                 cmp     r15, [rbp+src]
.text:00000000000070A7                 jz      short loc_70B2
.text:00000000000070A9                 test    r15, r15
.text:00000000000070AC                 jnz     loc_7169
.text:00000000000070B2
.text:00000000000070B2 loc_70B2:                               ; CODE XREF: vasnprintf+E57↑j
.text:00000000000070B2                                         ; vasnprintf+F21↓j
.text:00000000000070B2                 mov     rax, [rbp+ptr]
.text:00000000000070B9                 test    rax, rax
.text:00000000000070BC                 jz      short loc_70C6
.text:00000000000070BE                 mov     rdi, rax        ; ptr
.text:00000000000070C1                 call    _free
.text:00000000000070C6
.text:00000000000070C6 loc_70C6:                               ; CODE XREF: vasnprintf+E6C↑j
.text:00000000000070C6                 mov     rax, [rbp+var_408]
.text:00000000000070CD                 mov     rdi, [rbp+var_2B8] ; ptr
.text:00000000000070D4                 add     rax, 20h ; ' '
.text:00000000000070D8                 cmp     rdi, rax
.text:00000000000070DB                 jz      short loc_70E2
.text:00000000000070DD                 call    _free
.text:00000000000070E2
.text:00000000000070E2 loc_70E2:                               ; CODE XREF: vasnprintf+E8B↑j
.text:00000000000070E2                 mov     rax, [rbp+var_410]
.text:00000000000070E9                 mov     rdi, [rbp+var_3A8] ; ptr
.text:00000000000070F0                 add     rax, 10h
.text:00000000000070F4                 cmp     rdi, rax
.text:00000000000070F7                 jz      short loc_70FE
.text:00000000000070F9                 call    _free
.text:00000000000070FE
.text:00000000000070FE loc_70FE:                               ; CODE XREF: vasnprintf+EA7↑j
.text:00000000000070FE                 mov     rax, [rbp+n]
.text:0000000000007105                 xor     r15d, r15d
.text:0000000000007108                 mov     dword ptr [rax], 4Bh ; 'K'
.text:000000000000710E                 jmp     loc_642F
.text:000000000000710E ; ---------------------------------------------------------------------------
.text:0000000000007113                 align 8
.text:0000000000007118
.text:0000000000007118 loc_7118:                               ; CODE XREF: vasnprintf+60↑j
.text:0000000000007118                 xor     r15d, r15d
.text:000000000000711B                 jmp     loc_642F
.text:0000000000007120 ; ---------------------------------------------------------------------------
.text:0000000000007120
.text:0000000000007120 loc_7120:                               ; CODE XREF: vasnprintf+D34↑j
.text:0000000000007120                                         ; vasnprintf+D3C↑j
.text:0000000000007120                 mov     r15, rcx
.text:0000000000007123                 jmp     loc_673B
.text:0000000000007123 ; ---------------------------------------------------------------------------
.text:0000000000007128                 align 10h
.text:0000000000007130
.text:0000000000007130 loc_7130:                               ; CODE XREF: vasnprintf+B10↑j
.text:0000000000007130                 js      loc_63B5
.text:0000000000007136                 add     r12, r12
.text:0000000000007139                 cmp     r12, rax
.text:000000000000713C                 jnb     loc_6D76
.text:0000000000007142
.text:0000000000007142 loc_7142:                               ; CODE XREF: vasnprintf+B1A↑j
.text:0000000000007142                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000007146                 jz      loc_63B5
.text:000000000000714C                 mov     r12, rax
.text:000000000000714F                 jmp     loc_6D76
.text:0000000000007154 ; ---------------------------------------------------------------------------
.text:0000000000007154
.text:0000000000007154 loc_7154:                               ; CODE XREF: vasnprintf+DC4↑j
.text:0000000000007154                                         ; vasnprintf+DCC↑j
.text:0000000000007154                 mov     r15, rcx
.text:0000000000007157                 jmp     loc_6CDF
.text:000000000000715C ; ---------------------------------------------------------------------------
.text:000000000000715C
.text:000000000000715C loc_715C:                               ; CODE XREF: vasnprintf+75C↑j
.text:000000000000715C                 mov     rdi, r15        ; ptr
.text:000000000000715F                 call    _free
.text:0000000000007164                 jmp     loc_69B2
.text:0000000000007169 ; ---------------------------------------------------------------------------
.text:0000000000007169
.text:0000000000007169 loc_7169:                               ; CODE XREF: vasnprintf+E5C↑j
.text:0000000000007169                 mov     rdi, r15        ; ptr
.text:000000000000716C                 call    _free
.text:0000000000007171                 jmp     loc_70B2
.text:0000000000007176 ; ---------------------------------------------------------------------------
.text:0000000000007176
.text:0000000000007176 def_67AB:                               ; CODE XREF: vasnprintf+2DD↑j
.text:0000000000007176                                         ; vasnprintf+43E↑j ...
.text:0000000000007176                 call    _abort          ; jumptable 00000000000067AB default case, case 0
.text:0000000000007176                                         ; jumptable 0000000000006D50 default case
.text:0000000000007176 ; ---------------------------------------------------------------------------
.text:000000000000717B                 align 20h
.text:0000000000007180
.text:0000000000007180 loc_7180:                               ; CODE XREF: vasnprintf+73↑j
.text:0000000000007180                 mov     rax, [rbp+var_408]
.text:0000000000007187                 mov     rdi, [rbp+var_2B8] ; ptr
.text:000000000000718E                 add     rax, 20h ; ' '
.text:0000000000007192                 cmp     rdi, rax
.text:0000000000007195                 jz      short loc_719C
.text:0000000000007197                 call    _free
.text:000000000000719C
.text:000000000000719C loc_719C:                               ; CODE XREF: vasnprintf+F45↑j
.text:000000000000719C                 mov     rax, [rbp+var_410]
.text:00000000000071A3                 mov     rdi, [rbp+var_3A8] ; ptr
.text:00000000000071AA                 add     rax, 10h
.text:00000000000071AE                 cmp     rdi, rax
.text:00000000000071B1                 jz      short loc_71B8
.text:00000000000071B3                 call    _free
.text:00000000000071B8
.text:00000000000071B8 loc_71B8:                               ; CODE XREF: vasnprintf+F61↑j
.text:00000000000071B8                 call    ___errno_location
.text:00000000000071BD                 xor     r15d, r15d
.text:00000000000071C0                 mov     dword ptr [rax], 16h
.text:00000000000071C6                 jmp     loc_642F
.text:00000000000071CB ; ---------------------------------------------------------------------------
.text:00000000000071CB
.text:00000000000071CB loc_71CB:                               ; CODE XREF: vasnprintf+2C1↑j
.text:00000000000071CB                 mov     rbx, r14
.text:00000000000071CE                 xor     eax, eax
.text:00000000000071D0                 add     rbx, 1
.text:00000000000071D4                 jb      loc_72E0
.text:00000000000071DA                 cmp     r12, rbx
.text:00000000000071DD                 jnb     short loc_722C
.text:00000000000071DF                 test    r12, r12
.text:00000000000071E2                 jnz     loc_7319
.text:00000000000071E8                 cmp     rbx, 0Ch
.text:00000000000071EC                 ja      loc_72FE
.text:00000000000071F2                 mov     r12d, 0Ch
.text:00000000000071F8
.text:00000000000071F8 loc_71F8:                               ; CODE XREF: vasnprintf+10C4↓j
.text:00000000000071F8                                         ; vasnprintf+10D5↓j
.text:00000000000071F8                 cmp     r15, [rbp+src]
.text:00000000000071FF                 setz    r13b
.text:0000000000007203                 test    r15, r15
.text:0000000000007206                 jz      loc_72AC
.text:000000000000720C                 test    r13b, r13b
.text:000000000000720F                 jnz     loc_72AC
.text:0000000000007215                 mov     rsi, r12        ; size
.text:0000000000007218                 mov     rdi, r15        ; ptr
.text:000000000000721B                 call    _realloc
.text:0000000000007220                 test    rax, rax
.text:0000000000007223                 jz      loc_6E9B
.text:0000000000007229                 mov     r15, rax
.text:000000000000722C
.text:000000000000722C loc_722C:                               ; CODE XREF: vasnprintf+F8D↑j
.text:000000000000722C                                         ; vasnprintf+108B↓j ...
.text:000000000000722C                 cmp     r15, [rbp+src]
.text:0000000000007233                 mov     byte ptr [r15+r14], 0
.text:0000000000007238                 jz      short loc_7251
.text:000000000000723A                 cmp     r12, rbx
.text:000000000000723D                 jbe     short loc_7251
.text:000000000000723F                 mov     rdi, r15        ; ptr
.text:0000000000007242                 mov     rsi, rbx        ; size
.text:0000000000007245                 call    _realloc
.text:000000000000724A                 test    rax, rax
.text:000000000000724D                 cmovnz  r15, rax
.text:0000000000007251
.text:0000000000007251 loc_7251:                               ; CODE XREF: vasnprintf+FE8↑j
.text:0000000000007251                                         ; vasnprintf+FED↑j
.text:0000000000007251                 mov     rax, [rbp+ptr]
.text:0000000000007258                 test    rax, rax
.text:000000000000725B                 jz      short loc_7265
.text:000000000000725D                 mov     rdi, rax        ; ptr
.text:0000000000007260                 call    _free
.text:0000000000007265
.text:0000000000007265 loc_7265:                               ; CODE XREF: vasnprintf+100B↑j
.text:0000000000007265                 mov     rax, [rbp+var_408]
.text:000000000000726C                 mov     rdi, [rbp+var_2B8] ; ptr
.text:0000000000007273                 add     rax, 20h ; ' '
.text:0000000000007277                 cmp     rdi, rax
.text:000000000000727A                 jz      short loc_7281
.text:000000000000727C                 call    _free
.text:0000000000007281
.text:0000000000007281 loc_7281:                               ; CODE XREF: vasnprintf+102A↑j
.text:0000000000007281                 mov     rax, [rbp+var_410]
.text:0000000000007288                 mov     rdi, [rbp+var_3A8] ; ptr
.text:000000000000728F                 add     rax, 10h
.text:0000000000007293                 cmp     rdi, rax
.text:0000000000007296                 jz      short loc_729D
.text:0000000000007298                 call    _free
.text:000000000000729D
.text:000000000000729D loc_729D:                               ; CODE XREF: vasnprintf+1046↑j
.text:000000000000729D                 mov     rax, [rbp+var_418]
.text:00000000000072A4                 mov     [rax], r14
.text:00000000000072A7                 jmp     loc_642F
.text:00000000000072AC ; ---------------------------------------------------------------------------
.text:00000000000072AC
.text:00000000000072AC loc_72AC:                               ; CODE XREF: vasnprintf+FB6↑j
.text:00000000000072AC                                         ; vasnprintf+FBF↑j
.text:00000000000072AC                 mov     rdi, r12        ; size
.text:00000000000072AF                 call    _malloc
.text:00000000000072B4                 test    rax, rax
.text:00000000000072B7                 mov     rcx, rax
.text:00000000000072BA                 jz      loc_63B5
.text:00000000000072C0                 test    r14, r14
.text:00000000000072C3                 jz      short loc_7330
.text:00000000000072C5                 test    r13b, r13b
.text:00000000000072C8                 jz      short loc_7330
.text:00000000000072CA                 mov     rsi, r15        ; src
.text:00000000000072CD                 mov     rdx, r14        ; n
.text:00000000000072D0                 mov     rdi, rax        ; dest
.text:00000000000072D3                 call    _memcpy
.text:00000000000072D8                 mov     r15, rax
.text:00000000000072DB                 jmp     loc_722C
.text:00000000000072E0 ; ---------------------------------------------------------------------------
.text:00000000000072E0
.text:00000000000072E0 loc_72E0:                               ; CODE XREF: vasnprintf+F84↑j
.text:00000000000072E0                 cmp     r12, 0FFFFFFFFFFFFFFFFh
.text:00000000000072E4                 mov     eax, 1
.text:00000000000072E9                 jz      loc_722C
.text:00000000000072EF                 test    r12, r12
.text:00000000000072F2                 jz      loc_63B5
.text:00000000000072F8                 js      loc_63B5
.text:00000000000072FE
.text:00000000000072FE loc_72FE:                               ; CODE XREF: vasnprintf+F9C↑j
.text:00000000000072FE                                         ; vasnprintf+10DB↓j
.text:00000000000072FE                 test    rax, rax
.text:0000000000007301                 jnz     loc_63B5
.text:0000000000007307                 cmp     rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000000730B                 jz      loc_63B5
.text:0000000000007311                 mov     r12, rbx
.text:0000000000007314                 jmp     loc_71F8
.text:0000000000007319 ; ---------------------------------------------------------------------------
.text:0000000000007319
.text:0000000000007319 loc_7319:                               ; CODE XREF: vasnprintf+F92↑j
.text:0000000000007319                 js      loc_63B5
.text:000000000000731F                 add     r12, r12
.text:0000000000007322                 cmp     r12, rbx
.text:0000000000007325                 jnb     loc_71F8
.text:000000000000732B                 jmp     short loc_72FE
.text:000000000000732B ; ---------------------------------------------------------------------------
.text:000000000000732D                 align 10h
.text:0000000000007330
.text:0000000000007330 loc_7330:                               ; CODE XREF: vasnprintf+1073↑j
.text:0000000000007330                                         ; vasnprintf+1078↑j
.text:0000000000007330                 mov     r15, rcx
.text:0000000000007333                 jmp     loc_722C
.text:0000000000007338 ; ---------------------------------------------------------------------------
.text:0000000000007338
.text:0000000000007338 loc_7338:                               ; CODE XREF: vasnprintf+627↑j
.text:0000000000007338                 cmp     r12, 0FFFFFFFFFFFFFFFFh
.text:000000000000733C                 jz      loc_6760
.text:0000000000007342                 jmp     loc_63C1
.text:0000000000007347 ; ---------------------------------------------------------------------------
.text:0000000000007347
.text:0000000000007347 loc_7347:                               ; CODE XREF: vasnprintf+1EF↑j
.text:0000000000007347                 call    ___stack_chk_fail
.text:000000000000734C ; ---------------------------------------------------------------------------
.text:000000000000734C
.text:000000000000734C loc_734C:                               ; CODE XREF: vasnprintf+495↑j
.text:000000000000734C                 cmp     r12, 0FFFFFFFFFFFFFFFFh
.text:0000000000007350                 mov     edx, 1
.text:0000000000007355                 jz      loc_673B
.text:000000000000735B                 test    r12, r12
.text:000000000000735E                 jz      loc_63B5
.text:0000000000007364                 jns     loc_6F30
.text:000000000000736A                 jmp     loc_63B5
.text:000000000000736A ; } // starts at 6250
.text:000000000000736A vasnprintf      endp
.text:000000000000736A
.text:000000000000736A ; ---------------------------------------------------------------------------
.text:000000000000736F                 align 10h
.text:0000000000007370
.text:0000000000007370 ; =============== S U B R O U T I N E =======================================
.text:0000000000007370
.text:0000000000007370
.text:0000000000007370                 public printf_fetchargs
.text:0000000000007370 printf_fetchargs proc near              ; CODE XREF: vasnprintf+6C↑p
.text:0000000000007370 ; __unwind {
.text:0000000000007370                 cmp     qword ptr [rsi], 0
.text:0000000000007374                 mov     rax, [rsi+8]
.text:0000000000007378                 jz      short loc_73DD
.text:000000000000737A                 lea     r8, jpt_73A6
.text:0000000000007381                 lea     r10, wide_null_string_2696
.text:0000000000007388                 lea     r9, aNull       ; "(NULL)"
.text:000000000000738F                 xor     ecx, ecx
.text:0000000000007391                 nop     dword ptr [rax+00000000h]
.text:0000000000007398
.text:0000000000007398 loc_7398:                               ; CODE XREF: printf_fetchargs+6B↓j
.text:0000000000007398                 cmp     dword ptr [rax], 16h ; switch 23 cases
.text:000000000000739B                 ja      short def_73A6  ; jumptable 00000000000073A6 default case, case 0
.text:000000000000739D                 mov     edx, [rax]
.text:000000000000739F                 movsxd  rdx, ds:(jpt_73A6 - 9C80h)[r8+rdx*4]
.text:00000000000073A3                 add     rdx, r8
.text:00000000000073A6                 jmp     rdx             ; switch jump
.text:00000000000073A6 ; ---------------------------------------------------------------------------
.text:00000000000073A8                 align 10h
.text:00000000000073B0
.text:00000000000073B0 loc_73B0:                               ; CODE XREF: printf_fetchargs+36↑j
.text:00000000000073B0                                         ; DATA XREF: .rodata:jpt_73A6↓o
.text:00000000000073B0                 mov     rdx, [rdi+8]    ; jumptable 00000000000073A6 case 12
.text:00000000000073B4                 add     rdx, 0Fh
.text:00000000000073B8                 and     rdx, 0FFFFFFFFFFFFFFF0h
.text:00000000000073BC                 lea     r11, [rdx+10h]
.text:00000000000073C0                 mov     [rdi+8], r11
.text:00000000000073C4                 fld     tbyte ptr [rdx]
.text:00000000000073C6                 fstp    tbyte ptr [rax+10h]
.text:00000000000073C9                 nop     dword ptr [rax+00000000h]
.text:00000000000073D0
.text:00000000000073D0 loc_73D0:                               ; CODE XREF: printf_fetchargs+98↓j
.text:00000000000073D0                                         ; printf_fetchargs+BA↓j ...
.text:00000000000073D0                 add     rcx, 1
.text:00000000000073D4                 add     rax, 20h ; ' '
.text:00000000000073D8                 cmp     [rsi], rcx
.text:00000000000073DB                 ja      short loc_7398
.text:00000000000073DD
.text:00000000000073DD loc_73DD:                               ; CODE XREF: printf_fetchargs+8↑j
.text:00000000000073DD                 xor     eax, eax
.text:00000000000073DF                 retn
.text:00000000000073E0 ; ---------------------------------------------------------------------------
.text:00000000000073E0
.text:00000000000073E0 def_73A6:                               ; CODE XREF: printf_fetchargs+2B↑j
.text:00000000000073E0                                         ; printf_fetchargs+36↑j
.text:00000000000073E0                                         ; DATA XREF: ...
.text:00000000000073E0                 mov     eax, 0FFFFFFFFh ; jumptable 00000000000073A6 default case, case 0
.text:00000000000073E5                 retn
.text:00000000000073E6 ; ---------------------------------------------------------------------------
.text:00000000000073E6
.text:00000000000073E6 loc_73E6:                               ; CODE XREF: printf_fetchargs+36↑j
.text:00000000000073E6                                         ; DATA XREF: .rodata:jpt_73A6↓o
.text:00000000000073E6                 mov     r11d, [rdi]     ; jumptable 00000000000073A6 cases 7-10,17-22
.text:00000000000073E9                 cmp     r11d, 2Fh ; '/'
.text:00000000000073ED                 ja      loc_752A
.text:00000000000073F3                 mov     edx, r11d
.text:00000000000073F6                 add     rdx, [rdi+10h]
.text:00000000000073FA                 add     r11d, 8
.text:00000000000073FE                 mov     [rdi], r11d
.text:0000000000007401
.text:0000000000007401 loc_7401:                               ; CODE XREF: printf_fetchargs+1C6↓j
.text:0000000000007401                 mov     rdx, [rdx]
.text:0000000000007404                 mov     [rax+10h], rdx
.text:0000000000007408                 jmp     short loc_73D0
.text:000000000000740A ; ---------------------------------------------------------------------------
.text:000000000000740A
.text:000000000000740A loc_740A:                               ; CODE XREF: printf_fetchargs+36↑j
.text:000000000000740A                                         ; DATA XREF: .rodata:jpt_73A6↓o
.text:000000000000740A                 mov     r11d, [rdi]     ; jumptable 00000000000073A6 cases 5,6,13,14
.text:000000000000740D                 cmp     r11d, 2Fh ; '/'
.text:0000000000007411                 ja      loc_754C
.text:0000000000007417                 mov     edx, r11d
.text:000000000000741A                 add     rdx, [rdi+10h]
.text:000000000000741E                 add     r11d, 8
.text:0000000000007422                 mov     [rdi], r11d
.text:0000000000007425
.text:0000000000007425 loc_7425:                               ; CODE XREF: printf_fetchargs+1E8↓j
.text:0000000000007425                 mov     edx, [rdx]
.text:0000000000007427                 mov     [rax+10h], edx
.text:000000000000742A                 jmp     short loc_73D0
.text:000000000000742C ; ---------------------------------------------------------------------------
.text:000000000000742C
.text:000000000000742C loc_742C:                               ; CODE XREF: printf_fetchargs+36↑j
.text:000000000000742C                                         ; DATA XREF: .rodata:jpt_73A6↓o
.text:000000000000742C                 mov     r11d, [rdi]     ; jumptable 00000000000073A6 cases 1,2
.text:000000000000742F                 cmp     r11d, 2Fh ; '/'
.text:0000000000007433                 ja      loc_753B
.text:0000000000007439                 mov     edx, r11d
.text:000000000000743C                 add     rdx, [rdi+10h]
.text:0000000000007440                 add     r11d, 8
.text:0000000000007444                 mov     [rdi], r11d
.text:0000000000007447
.text:0000000000007447 loc_7447:                               ; CODE XREF: printf_fetchargs+1D7↓j
.text:0000000000007447                 mov     edx, [rdx]
.text:0000000000007449                 mov     [rax+10h], dl
.text:000000000000744C                 jmp     short loc_73D0
.text:000000000000744E ; ---------------------------------------------------------------------------
.text:000000000000744E
.text:000000000000744E loc_744E:                               ; CODE XREF: printf_fetchargs+36↑j
.text:000000000000744E                                         ; DATA XREF: .rodata:jpt_73A6↓o
.text:000000000000744E                 mov     r11d, [rdi]     ; jumptable 00000000000073A6 cases 3,4
.text:0000000000007451                 cmp     r11d, 2Fh ; '/'
.text:0000000000007455                 ja      loc_74FA
.text:000000000000745B                 mov     edx, r11d
.text:000000000000745E                 add     rdx, [rdi+10h]
.text:0000000000007462                 add     r11d, 8
.text:0000000000007466                 mov     [rdi], r11d
.text:0000000000007469
.text:0000000000007469 loc_7469:                               ; CODE XREF: printf_fetchargs+196↓j
.text:0000000000007469                 mov     edx, [rdx]
.text:000000000000746B                 mov     [rax+10h], dx
.text:000000000000746F                 jmp     loc_73D0
.text:0000000000007474 ; ---------------------------------------------------------------------------
.text:0000000000007474
.text:0000000000007474 loc_7474:                               ; CODE XREF: printf_fetchargs+36↑j
.text:0000000000007474                                         ; DATA XREF: .rodata:jpt_73A6↓o
.text:0000000000007474                 mov     r11d, [rdi]     ; jumptable 00000000000073A6 case 15
.text:0000000000007477                 cmp     r11d, 2Fh ; '/'
.text:000000000000747B                 ja      loc_750B
.text:0000000000007481                 mov     edx, r11d
.text:0000000000007484                 add     rdx, [rdi+10h]
.text:0000000000007488                 add     r11d, 8
.text:000000000000748C                 mov     [rdi], r11d
.text:000000000000748F
.text:000000000000748F loc_748F:                               ; CODE XREF: printf_fetchargs+1A7↓j
.text:000000000000748F                 mov     rdx, [rdx]
.text:0000000000007492                 test    rdx, rdx
.text:0000000000007495                 cmovz   rdx, r9
.text:0000000000007499                 mov     [rax+10h], rdx
.text:000000000000749D                 jmp     loc_73D0
.text:00000000000074A2 ; ---------------------------------------------------------------------------
.text:00000000000074A2
.text:00000000000074A2 loc_74A2:                               ; CODE XREF: printf_fetchargs+36↑j
.text:00000000000074A2                                         ; DATA XREF: .rodata:jpt_73A6↓o
.text:00000000000074A2                 mov     r11d, [rdi+4]   ; jumptable 00000000000073A6 case 11
.text:00000000000074A6                 cmp     r11d, 0AFh
.text:00000000000074AD                 ja      loc_755D
.text:00000000000074B3                 mov     edx, r11d
.text:00000000000074B6                 add     rdx, [rdi+10h]
.text:00000000000074BA                 add     r11d, 10h
.text:00000000000074BE                 mov     [rdi+4], r11d
.text:00000000000074C2
.text:00000000000074C2 loc_74C2:                               ; CODE XREF: printf_fetchargs+1F9↓j
.text:00000000000074C2                 movsd   xmm0, qword ptr [rdx]
.text:00000000000074C6                 movsd   qword ptr [rax+10h], xmm0
.text:00000000000074CB                 jmp     loc_73D0
.text:00000000000074D0 ; ---------------------------------------------------------------------------
.text:00000000000074D0
.text:00000000000074D0 loc_74D0:                               ; CODE XREF: printf_fetchargs+36↑j
.text:00000000000074D0                                         ; DATA XREF: .rodata:jpt_73A6↓o
.text:00000000000074D0                 mov     r11d, [rdi]     ; jumptable 00000000000073A6 case 16
.text:00000000000074D3                 cmp     r11d, 2Fh ; '/'
.text:00000000000074D7                 ja      short loc_751C
.text:00000000000074D9                 mov     edx, r11d
.text:00000000000074DC                 add     rdx, [rdi+10h]
.text:00000000000074E0                 add     r11d, 8
.text:00000000000074E4                 mov     [rdi], r11d
.text:00000000000074E7
.text:00000000000074E7 loc_74E7:                               ; CODE XREF: printf_fetchargs+1B8↓j
.text:00000000000074E7                 mov     rdx, [rdx]
.text:00000000000074EA                 test    rdx, rdx
.text:00000000000074ED                 cmovz   rdx, r10
.text:00000000000074F1                 mov     [rax+10h], rdx
.text:00000000000074F5                 jmp     loc_73D0
.text:00000000000074FA ; ---------------------------------------------------------------------------
.text:00000000000074FA
.text:00000000000074FA loc_74FA:                               ; CODE XREF: printf_fetchargs+E5↑j
.text:00000000000074FA                 mov     rdx, [rdi+8]
.text:00000000000074FE                 lea     r11, [rdx+8]
.text:0000000000007502                 mov     [rdi+8], r11
.text:0000000000007506                 jmp     loc_7469
.text:000000000000750B ; ---------------------------------------------------------------------------
.text:000000000000750B
.text:000000000000750B loc_750B:                               ; CODE XREF: printf_fetchargs+10B↑j
.text:000000000000750B                 mov     rdx, [rdi+8]
.text:000000000000750F                 lea     r11, [rdx+8]
.text:0000000000007513                 mov     [rdi+8], r11
.text:0000000000007517                 jmp     loc_748F
.text:000000000000751C ; ---------------------------------------------------------------------------
.text:000000000000751C
.text:000000000000751C loc_751C:                               ; CODE XREF: printf_fetchargs+167↑j
.text:000000000000751C                 mov     rdx, [rdi+8]
.text:0000000000007520                 lea     r11, [rdx+8]
.text:0000000000007524                 mov     [rdi+8], r11
.text:0000000000007528                 jmp     short loc_74E7
.text:000000000000752A ; ---------------------------------------------------------------------------
.text:000000000000752A
.text:000000000000752A loc_752A:                               ; CODE XREF: printf_fetchargs+7D↑j
.text:000000000000752A                 mov     rdx, [rdi+8]
.text:000000000000752E                 lea     r11, [rdx+8]
.text:0000000000007532                 mov     [rdi+8], r11
.text:0000000000007536                 jmp     loc_7401
.text:000000000000753B ; ---------------------------------------------------------------------------
.text:000000000000753B
.text:000000000000753B loc_753B:                               ; CODE XREF: printf_fetchargs+C3↑j
.text:000000000000753B                 mov     rdx, [rdi+8]
.text:000000000000753F                 lea     r11, [rdx+8]
.text:0000000000007543                 mov     [rdi+8], r11
.text:0000000000007547                 jmp     loc_7447
.text:000000000000754C ; ---------------------------------------------------------------------------
.text:000000000000754C
.text:000000000000754C loc_754C:                               ; CODE XREF: printf_fetchargs+A1↑j
.text:000000000000754C                 mov     rdx, [rdi+8]
.text:0000000000007550                 lea     r11, [rdx+8]
.text:0000000000007554                 mov     [rdi+8], r11
.text:0000000000007558                 jmp     loc_7425
.text:000000000000755D ; ---------------------------------------------------------------------------
.text:000000000000755D
.text:000000000000755D loc_755D:                               ; CODE XREF: printf_fetchargs+13D↑j
.text:000000000000755D                 mov     rdx, [rdi+8]
.text:0000000000007561                 lea     r11, [rdx+8]
.text:0000000000007565                 mov     [rdi+8], r11
.text:0000000000007569                 jmp     loc_74C2
.text:0000000000007569 ; } // starts at 7370
.text:0000000000007569 printf_fetchargs endp
.text:0000000000007569
.text:0000000000007569 ; ---------------------------------------------------------------------------
.text:000000000000756E                 align 10h
.text:0000000000007570 ; File Name   : /home/ig/disk_vd/vdtests/input/x64_upacks_151/9b7ebdf6382e17b3d79a9c42c370bb6b
.text:0000000000007570 ; Format      : ELF64 for x86-64 (Relocatable)
.text:0000000000007570 ;
.text:0000000000007570 ; Source File : 'printf-parse.c'
.text:0000000000007570
.text:0000000000007570 ; =============== S U B R O U T I N E =======================================
.text:0000000000007570
.text:0000000000007570 ; Attributes: info_from_lumina
.text:0000000000007570
.text:0000000000007570 ; int __fastcall printf_parse(const char *format, char_directives *d, arguments *a)
.text:0000000000007570                 public printf_parse
.text:0000000000007570 printf_parse    proc near               ; CODE XREF: vasnprintf+59↑p
.text:0000000000007570
.text:0000000000007570 src             = qword ptr -80h
.text:0000000000007570 var_78          = qword ptr -78h
.text:0000000000007570 var_70          = qword ptr -70h
.text:0000000000007570 var_68          = qword ptr -68h
.text:0000000000007570 var_60          = qword ptr -60h
.text:0000000000007570 var_58          = qword ptr -58h
.text:0000000000007570 var_50          = qword ptr -50h
.text:0000000000007570 var_48          = qword ptr -48h
.text:0000000000007570 var_40          = qword ptr -40h
.text:0000000000007570
.text:0000000000007570 ; __unwind {
.text:0000000000007570                 push    r15
.text:0000000000007572                 push    r14
.text:0000000000007574                 lea     rcx, [rsi+20h]
.text:0000000000007578                 push    r13
.text:000000000000757A                 push    r12
.text:000000000000757C                 lea     rax, [rdx+10h]
.text:0000000000007580                 push    rbp
.text:0000000000007581                 push    rbx
.text:0000000000007582                 mov     r14, rsi
.text:0000000000007585                 mov     r15, rdx
.text:0000000000007588                 xor     ebx, ebx
.text:000000000000758A                 mov     r9d, 7
.text:0000000000007590                 sub     rsp, 58h
.text:0000000000007594                 mov     r10d, 7
.text:000000000000759A                 mov     qword ptr [rsi], 0
.text:00000000000075A1                 mov     [rsi+8], rcx
.text:00000000000075A5                 mov     [rsp+88h+var_60], rcx
.text:00000000000075AA                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:00000000000075B1                 mov     qword ptr [rdx], 0
.text:00000000000075B8                 mov     [rsp+88h+src], rax
.text:00000000000075BD                 mov     [rdx+8], rax
.text:00000000000075C1                 mov     [rsp+88h+var_70], 0
.text:00000000000075CA                 mov     [rsp+88h+var_78], 0
.text:00000000000075D3                 mov     [rsp+88h+var_68], 0
.text:00000000000075DC                 jmp     short loc_75EB
.text:00000000000075DC ; ---------------------------------------------------------------------------
.text:00000000000075DE                 align 20h
.text:00000000000075E0
.text:00000000000075E0 loc_75E0:                               ; CODE XREF: printf_parse+80↓j
.text:00000000000075E0                 cmp     al, 25h ; '%'
.text:00000000000075E2                 lea     rbp, [rdi+1]
.text:00000000000075E6                 jz      short loc_7628
.text:00000000000075E8
.text:00000000000075E8 loc_75E8:                               ; CODE XREF: printf_parse+35B↓j
.text:00000000000075E8                                         ; printf_parse+364↓j
.text:00000000000075E8                 mov     rdi, rbp
.text:00000000000075EB
.text:00000000000075EB loc_75EB:                               ; CODE XREF: printf_parse+6C↑j
.text:00000000000075EB                 movzx   eax, byte ptr [rdi]
.text:00000000000075EE                 test    al, al
.text:00000000000075F0                 jnz     short loc_75E0
.text:00000000000075F2                 lea     rax, [rbx+rbx*4]
.text:00000000000075F6                 lea     rax, [rbx+rax*2]
.text:00000000000075FA                 mov     [rcx+rax*8], rdi
.text:00000000000075FE                 mov     rax, [rsp+88h+var_78]
.text:0000000000007603                 mov     [r14+10h], rax
.text:0000000000007607                 mov     rax, [rsp+88h+var_70]
.text:000000000000760C                 mov     [r14+18h], rax
.text:0000000000007610                 xor     eax, eax
.text:0000000000007612
.text:0000000000007612 loc_7612:                               ; CODE XREF: printf_parse+87E↓j
.text:0000000000007612                                         ; printf_parse+B1C↓j
.text:0000000000007612                 add     rsp, 58h
.text:0000000000007616                 pop     rbx
.text:0000000000007617                 pop     rbp
.text:0000000000007618                 pop     r12
.text:000000000000761A                 pop     r13
.text:000000000000761C                 pop     r14
.text:000000000000761E                 pop     r15
.text:0000000000007620                 retn
.text:0000000000007620 ; ---------------------------------------------------------------------------
.text:0000000000007621                 align 8
.text:0000000000007628
.text:0000000000007628 loc_7628:                               ; CODE XREF: printf_parse+76↑j
.text:0000000000007628                 lea     rax, [rbx+rbx*4]
.text:000000000000762C                 mov     r13, r8
.text:000000000000762F                 lea     rax, [rbx+rax*2]
.text:0000000000007633                 lea     r12, [rcx+rax*8]
.text:0000000000007637                 mov     [r12], rdi
.text:000000000000763B                 mov     dword ptr [r12+10h], 0
.text:0000000000007644                 mov     qword ptr [r12+18h], 0
.text:000000000000764D                 mov     qword ptr [r12+20h], 0
.text:0000000000007656                 mov     [r12+28h], r8
.text:000000000000765B                 mov     qword ptr [r12+30h], 0
.text:0000000000007664                 mov     qword ptr [r12+38h], 0
.text:000000000000766D                 mov     [r12+40h], r8
.text:0000000000007672                 mov     [r12+50h], r8
.text:0000000000007677                 movzx   ebx, byte ptr [rdi+1]
.text:000000000000767B                 lea     eax, [rbx-30h]
.text:000000000000767E                 cmp     al, 9
.text:0000000000007680                 ja      short loc_76BE
.text:0000000000007682                 jmp     loc_7ABA
.text:0000000000007682 ; ---------------------------------------------------------------------------
.text:0000000000007687                 align 10h
.text:0000000000007690
.text:0000000000007690 loc_7690:                               ; CODE XREF: printf_parse+158↓j
.text:0000000000007690                 cmp     bl, 2Dh ; '-'
.text:0000000000007693                 jz      short loc_76D8
.text:0000000000007695                 cmp     bl, 2Bh ; '+'
.text:0000000000007698                 jz      short loc_76E0
.text:000000000000769A                 cmp     bl, 20h ; ' '
.text:000000000000769D                 jz      short loc_76F0
.text:000000000000769F                 cmp     bl, 23h ; '#'
.text:00000000000076A2                 jz      short loc_7700
.text:00000000000076A4                 cmp     bl, 30h ; '0'
.text:00000000000076A7                 jz      short loc_7710
.text:00000000000076A9                 cmp     bl, 49h ; 'I'
.text:00000000000076AC                 jnz     short loc_7720
.text:00000000000076AE                 or      dword ptr [r12+10h], 40h
.text:00000000000076B4                 nop     dword ptr [rax+00h]
.text:00000000000076B8
.text:00000000000076B8 loc_76B8:                               ; CODE XREF: printf_parse+160↓j
.text:00000000000076B8                                         ; printf_parse+16E↓j ...
.text:00000000000076B8                 movzx   ebx, byte ptr [rax]
.text:00000000000076BB                 mov     rbp, rax
.text:00000000000076BE
.text:00000000000076BE loc_76BE:                               ; CODE XREF: printf_parse+110↑j
.text:00000000000076BE                                         ; printf_parse+565↓j ...
.text:00000000000076BE                 lea     rax, [rbp+1]
.text:00000000000076C2                 cmp     bl, 27h ; '''
.text:00000000000076C5                 mov     rdx, rax
.text:00000000000076C8                 jnz     short loc_7690
.text:00000000000076CA                 or      dword ptr [r12+10h], 1
.text:00000000000076D0                 jmp     short loc_76B8
.text:00000000000076D0 ; ---------------------------------------------------------------------------
.text:00000000000076D2                 align 8
.text:00000000000076D8
.text:00000000000076D8 loc_76D8:                               ; CODE XREF: printf_parse+123↑j
.text:00000000000076D8                 or      dword ptr [r12+10h], 2
.text:00000000000076DE                 jmp     short loc_76B8
.text:00000000000076E0 ; ---------------------------------------------------------------------------
.text:00000000000076E0
.text:00000000000076E0 loc_76E0:                               ; CODE XREF: printf_parse+128↑j
.text:00000000000076E0                 or      dword ptr [r12+10h], 4
.text:00000000000076E6                 jmp     short loc_76B8
.text:00000000000076E6 ; ---------------------------------------------------------------------------
.text:00000000000076E8                 align 10h
.text:00000000000076F0
.text:00000000000076F0 loc_76F0:                               ; CODE XREF: printf_parse+12D↑j
.text:00000000000076F0                 or      dword ptr [r12+10h], 8
.text:00000000000076F6                 jmp     short loc_76B8
.text:00000000000076F6 ; ---------------------------------------------------------------------------
.text:00000000000076F8                 align 20h
.text:0000000000007700
.text:0000000000007700 loc_7700:                               ; CODE XREF: printf_parse+132↑j
.text:0000000000007700                 or      dword ptr [r12+10h], 10h
.text:0000000000007706                 jmp     short loc_76B8
.text:0000000000007706 ; ---------------------------------------------------------------------------
.text:0000000000007708                 align 10h
.text:0000000000007710
.text:0000000000007710 loc_7710:                               ; CODE XREF: printf_parse+137↑j
.text:0000000000007710                 or      dword ptr [r12+10h], 20h
.text:0000000000007716                 jmp     short loc_76B8
.text:0000000000007716 ; ---------------------------------------------------------------------------
.text:0000000000007718                 align 20h
.text:0000000000007720
.text:0000000000007720 loc_7720:                               ; CODE XREF: printf_parse+13C↑j
.text:0000000000007720                 cmp     bl, 2Ah ; '*'
.text:0000000000007723                 jz      loc_78D9
.text:0000000000007729                 lea     ecx, [rbx-30h]
.text:000000000000772C                 cmp     cl, 9
.text:000000000000772F                 jbe     loc_7B47
.text:0000000000007735
.text:0000000000007735 loc_7735:                               ; CODE XREF: printf_parse+629↓j
.text:0000000000007735                                         ; printf_parse+96C↓j
.text:0000000000007735                 cmp     bl, 2Eh ; '.'
.text:0000000000007738                 jz      loc_7A0F
.text:000000000000773E
.text:000000000000773E loc_773E:                               ; CODE XREF: printf_parse+499↓j
.text:000000000000773E                                         ; printf_parse+545↓j ...
.text:000000000000773E                 xor     eax, eax
.text:0000000000007740                 mov     esi, 1
.text:0000000000007745                 jmp     short loc_7777
.text:0000000000007745 ; ---------------------------------------------------------------------------
.text:0000000000007747                 align 10h
.text:0000000000007750
.text:0000000000007750 loc_7750:                               ; CODE XREF: printf_parse+20E↓j
.text:0000000000007750                 cmp     bl, 4Ch ; 'L'
.text:0000000000007753                 jz      short loc_7790
.text:0000000000007755                 cmp     bl, 6Ch ; 'l'
.text:0000000000007758                 jz      short loc_7770
.text:000000000000775A                 cmp     bl, 6Ah ; 'j'
.text:000000000000775D                 jz      short loc_7770
.text:000000000000775F                 mov     edx, ebx
.text:0000000000007761                 and     edx, 0FFFFFFDFh
.text:0000000000007764                 cmp     dl, 5Ah ; 'Z'
.text:0000000000007767                 jz      short loc_7770
.text:0000000000007769                 cmp     bl, 74h ; 't'
.text:000000000000776C                 jnz     short loc_7798
.text:000000000000776E                 xchg    ax, ax
.text:0000000000007770
.text:0000000000007770 loc_7770:                               ; CODE XREF: printf_parse+1E8↑j
.text:0000000000007770                                         ; printf_parse+1ED↑j ...
.text:0000000000007770                 add     eax, 8
.text:0000000000007773
.text:0000000000007773 loc_7773:                               ; CODE XREF: printf_parse+21B↓j
.text:0000000000007773                                         ; printf_parse+223↓j
.text:0000000000007773                 movzx   ebx, byte ptr [rbp+0]
.text:0000000000007777
.text:0000000000007777 loc_7777:                               ; CODE XREF: printf_parse+1D5↑j
.text:0000000000007777                 add     rbp, 1
.text:000000000000777B                 cmp     bl, 68h ; 'h'
.text:000000000000777E                 jnz     short loc_7750
.text:0000000000007780                 mov     ecx, eax
.text:0000000000007782                 mov     edx, esi
.text:0000000000007784                 and     ecx, 1
.text:0000000000007787                 shl     edx, cl
.text:0000000000007789                 or      eax, edx
.text:000000000000778B                 jmp     short loc_7773
.text:000000000000778B ; ---------------------------------------------------------------------------
.text:000000000000778D                 align 10h
.text:0000000000007790
.text:0000000000007790 loc_7790:                               ; CODE XREF: printf_parse+1E3↑j
.text:0000000000007790                 or      eax, 4
.text:0000000000007793                 jmp     short loc_7773
.text:0000000000007793 ; ---------------------------------------------------------------------------
.text:0000000000007795                 align 8
.text:0000000000007798
.text:0000000000007798 loc_7798:                               ; CODE XREF: printf_parse+1FC↑j
.text:0000000000007798                 lea     edx, [rbx-25h]  ; switch 84 cases
.text:000000000000779B                 cmp     dl, 53h
.text:000000000000779E                 ja      def_77B5        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:00000000000077A4                 lea     rcx, jpt_77B5
.text:00000000000077AB                 movzx   edx, dl
.text:00000000000077AE                 movsxd  rdx, ds:(jpt_77B5 - 9CFCh)[rcx+rdx*4]
.text:00000000000077B2                 add     rdx, rcx
.text:00000000000077B5                 jmp     rdx             ; switch jump
.text:00000000000077B7 ; ---------------------------------------------------------------------------
.text:00000000000077B7
.text:00000000000077B7 loc_77B7:                               ; CODE XREF: printf_parse+245↑j
.text:00000000000077B7                                         ; DATA XREF: .rodata:jpt_77B5↓o
.text:00000000000077B7                 mov     r11d, 10h       ; jumptable 0000000000000245 case 83
.text:00000000000077BD                 mov     ebx, 73h ; 's'
.text:00000000000077C2                 nop     word ptr [rax+rax+00h]
.text:00000000000077C8
.text:00000000000077C8 loc_77C8:                               ; CODE XREF: printf_parse+705↓j
.text:00000000000077C8                                         ; printf_parse+70D↓j ...
.text:00000000000077C8                 cmp     r13, 0FFFFFFFFFFFFFFFFh
.text:00000000000077CC                 jz      loc_7E87
.text:00000000000077D2                 mov     [r12+50h], r13
.text:00000000000077D7
.text:00000000000077D7 loc_77D7:                               ; CODE XREF: printf_parse+939↓j
.text:00000000000077D7                 cmp     r9, r13
.text:00000000000077DA                 mov     rcx, [r15+8]
.text:00000000000077DE                 jbe     loc_7E00
.text:00000000000077E4
.text:00000000000077E4 loc_77E4:                               ; CODE XREF: printf_parse+912↓j
.text:00000000000077E4                 mov     rax, [r15]
.text:00000000000077E7                 mov     rdx, rax
.text:00000000000077EA                 shl     rdx, 5
.text:00000000000077EE                 add     rdx, rcx
.text:00000000000077F1                 cmp     rax, r13
.text:00000000000077F4                 ja      short loc_7816
.text:00000000000077F6                 db      2Eh
.text:00000000000077F6                 nop     word ptr [rax+rax+00000000h]
.text:0000000000007800
.text:0000000000007800 loc_7800:                               ; CODE XREF: printf_parse+2A1↓j
.text:0000000000007800                 add     rax, 1
.text:0000000000007804                 mov     dword ptr [rdx], 0
.text:000000000000780A                 add     rdx, 20h ; ' '
.text:000000000000780E                 cmp     rax, r13
.text:0000000000007811                 jbe     short loc_7800
.text:0000000000007813                 mov     [r15], rax
.text:0000000000007816
.text:0000000000007816 loc_7816:                               ; CODE XREF: printf_parse+284↑j
.text:0000000000007816                 shl     r13, 5
.text:000000000000781A                 lea     rax, [rcx+r13]
.text:000000000000781E                 mov     edx, [rax]
.text:0000000000007820                 test    edx, edx
.text:0000000000007822                 jnz     loc_7DF3
.text:0000000000007828                 mov     [rax], r11d
.text:000000000000782B
.text:000000000000782B loc_782B:                               ; CODE XREF: printf_parse+245↑j
.text:000000000000782B                                         ; printf_parse+886↓j
.text:000000000000782B                                         ; DATA XREF: ...
.text:000000000000782B                 mov     [r12+48h], bl   ; jumptable 0000000000000245 case 37
.text:0000000000007830                 mov     rax, [r14]
.text:0000000000007833                 mov     [r12+8], rbp
.text:0000000000007838                 lea     rbx, [rax+1]
.text:000000000000783C                 cmp     r10, rbx
.text:000000000000783F                 mov     [r14], rbx
.text:0000000000007842                 ja      loc_78D0
.text:0000000000007848                 test    r10, r10
.text:000000000000784B                 js      loc_81F7
.text:0000000000007851                 add     r10, r10
.text:0000000000007854                 mov     rax, 2E8BA2E8BA2E8BAh
.text:000000000000785E                 cmp     r10, rax
.text:0000000000007861                 ja      loc_81F7
.text:0000000000007867                 lea     rax, [r10+r10*4]
.text:000000000000786B                 mov     rdi, [r14+8]    ; ptr
.text:000000000000786F                 cmp     [rsp+88h+var_60], rdi
.text:0000000000007874                 mov     [rsp+88h+var_48], r9
.text:0000000000007879                 mov     [rsp+88h+var_50], r10
.text:000000000000787E                 lea     rax, [r10+rax*2]
.text:0000000000007882                 mov     [rsp+88h+var_58], r8
.text:0000000000007887                 lea     rsi, ds:0[rax*8] ; size
.text:000000000000788F                 jz      loc_7F4D
.text:0000000000007895                 call    _realloc        ; PIC mode
.text:000000000000789A                 test    rax, rax
.text:000000000000789D                 mov     rcx, rax
.text:00000000000078A0                 mov     r8, [rsp+88h+var_58]
.text:00000000000078A5                 mov     r10, [rsp+88h+var_50]
.text:00000000000078AA                 mov     r9, [rsp+88h+var_48]
.text:00000000000078AF                 jz      loc_81F7
.text:00000000000078B5                 mov     rax, [rsp+88h+var_60]
.text:00000000000078BA                 cmp     rax, [r14+8]
.text:00000000000078BE                 mov     rbx, [r14]
.text:00000000000078C1                 jz      loc_7F70
.text:00000000000078C7
.text:00000000000078C7 loc_78C7:                               ; CODE XREF: printf_parse+A3D↓j
.text:00000000000078C7                 mov     [r14+8], rcx
.text:00000000000078CB                 jmp     loc_75E8
.text:00000000000078D0 ; ---------------------------------------------------------------------------
.text:00000000000078D0
.text:00000000000078D0 loc_78D0:                               ; CODE XREF: printf_parse+2D2↑j
.text:00000000000078D0                 mov     rcx, [r14+8]
.text:00000000000078D4                 jmp     loc_75E8
.text:00000000000078D9 ; ---------------------------------------------------------------------------
.text:00000000000078D9
.text:00000000000078D9 loc_78D9:                               ; CODE XREF: printf_parse+1B3↑j
.text:00000000000078D9                 mov     rsi, [rsp+88h+var_78]
.text:00000000000078DE                 mov     ecx, 1
.text:00000000000078E3                 mov     [r12+18h], rbp
.text:00000000000078E8                 mov     [r12+20h], rax
.text:00000000000078ED                 test    rsi, rsi
.text:00000000000078F0                 cmovnz  rcx, rsi
.text:00000000000078F4                 mov     [rsp+88h+var_78], rcx
.text:00000000000078F9                 movzx   ecx, byte ptr [rbp+1]
.text:00000000000078FD                 lea     esi, [rcx-30h]
.text:0000000000007900                 cmp     sil, 9
.text:0000000000007904                 jbe     loc_7BE5
.text:000000000000790A
.text:000000000000790A loc_790A:                               ; CODE XREF: printf_parse+68D↓j
.text:000000000000790A                 mov     rsi, [rsp+88h+var_68]
.text:000000000000790F                 cmp     rsi, 0FFFFFFFFFFFFFFFFh
.text:0000000000007913                 lea     rdx, [rsi+1]
.text:0000000000007917                 mov     [r12+28h], rsi
.text:000000000000791C                 jz      def_77B5        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:0000000000007922                 mov     rbx, [rsp+88h+var_68]
.text:0000000000007927                 mov     rbp, rax
.text:000000000000792A                 mov     [rsp+88h+var_68], rdx
.text:000000000000792F
.text:000000000000792F loc_792F:                               ; CODE XREF: printf_parse+6F7↓j
.text:000000000000792F                 cmp     r9, rbx
.text:0000000000007932                 mov     rcx, [r15+8]
.text:0000000000007936                 ja      loc_7FB2
.text:000000000000793C                 add     r9, r9
.text:000000000000793F                 lea     rax, [rbx+1]
.text:0000000000007943                 cmp     r9, rbx
.text:0000000000007946                 cmovbe  r9, rax
.text:000000000000794A                 mov     rax, 7FFFFFFFFFFFFFFh
.text:0000000000007954                 cmp     r9, rax
.text:0000000000007957                 ja      loc_81FB
.text:000000000000795D                 mov     rsi, r9
.text:0000000000007960                 mov     [rsp+88h+var_48], r9
.text:0000000000007965                 mov     [rsp+88h+var_50], r10
.text:000000000000796A                 shl     rsi, 5          ; size
.text:000000000000796E                 cmp     [rsp+88h+src], rcx
.text:0000000000007973                 mov     [rsp+88h+var_58], r8
.text:0000000000007978                 jz      loc_8091
.text:000000000000797E                 mov     rdi, rcx        ; ptr
.text:0000000000007981                 call    _realloc        ; PIC mode
.text:0000000000007986                 mov     rdx, [r15+8]
.text:000000000000798A                 mov     r8, [rsp+88h+var_58]
.text:000000000000798F                 mov     rcx, rax
.text:0000000000007992                 mov     r10, [rsp+88h+var_50]
.text:0000000000007997                 mov     r9, [rsp+88h+var_48]
.text:000000000000799C
.text:000000000000799C loc_799C:                               ; CODE XREF: printf_parse+B40↓j
.text:000000000000799C                 test    rcx, rcx
.text:000000000000799F                 jz      loc_8257
.text:00000000000079A5                 cmp     [rsp+88h+src], rdx
.text:00000000000079AA                 mov     rax, [r15]
.text:00000000000079AD                 jz      loc_816B
.text:00000000000079B3
.text:00000000000079B3 loc_79B3:                               ; CODE XREF: printf_parse+C33↓j
.text:00000000000079B3                 mov     [r15+8], rcx
.text:00000000000079B7
.text:00000000000079B7 loc_79B7:                               ; CODE XREF: printf_parse+A45↓j
.text:00000000000079B7                 mov     rdx, rax
.text:00000000000079BA                 shl     rdx, 5
.text:00000000000079BE                 add     rdx, rcx
.text:00000000000079C1                 cmp     rax, rbx
.text:00000000000079C4                 ja      short loc_79E6
.text:00000000000079C6                 db      2Eh
.text:00000000000079C6                 nop     word ptr [rax+rax+00000000h]
.text:00000000000079D0
.text:00000000000079D0 loc_79D0:                               ; CODE XREF: printf_parse+471↓j
.text:00000000000079D0                 add     rax, 1
.text:00000000000079D4                 mov     dword ptr [rdx], 0
.text:00000000000079DA                 add     rdx, 20h ; ' '
.text:00000000000079DE                 cmp     rax, rbx
.text:00000000000079E1                 jbe     short loc_79D0
.text:00000000000079E3                 mov     [r15], rax
.text:00000000000079E6
.text:00000000000079E6 loc_79E6:                               ; CODE XREF: printf_parse+454↑j
.text:00000000000079E6                 shl     rbx, 5
.text:00000000000079EA                 lea     rax, [rcx+rbx]
.text:00000000000079EE                 mov     edx, [rax]
.text:00000000000079F0                 test    edx, edx
.text:00000000000079F2                 jnz     loc_7ECB
.text:00000000000079F8                 mov     dword ptr [rax], 5
.text:00000000000079FE                 movzx   ebx, byte ptr [rbp+0]
.text:0000000000007A02                 lea     rdx, [rbp+1]
.text:0000000000007A06                 cmp     bl, 2Eh ; '.'
.text:0000000000007A09                 jnz     loc_773E
.text:0000000000007A0F
.text:0000000000007A0F loc_7A0F:                               ; CODE XREF: printf_parse+1C8↑j
.text:0000000000007A0F                 cmp     byte ptr [rbp+1], 2Ah ; '*'
.text:0000000000007A13                 mov     [r12+30h], rbp
.text:0000000000007A18                 jnz     loc_7B9E
.text:0000000000007A1E                 mov     rsi, [rsp+88h+var_70]
.text:0000000000007A23                 lea     r11, [rbp+2]
.text:0000000000007A27                 mov     eax, 2
.text:0000000000007A2C                 mov     [r12+38h], r11
.text:0000000000007A31                 cmp     rsi, 2
.text:0000000000007A35                 cmovnb  rax, rsi
.text:0000000000007A39                 mov     [rsp+88h+var_70], rax
.text:0000000000007A3E                 movsx   eax, byte ptr [rbp+2]
.text:0000000000007A42                 lea     edx, [rax-30h]
.text:0000000000007A45                 cmp     dl, 9
.text:0000000000007A48                 jbe     loc_80DC
.text:0000000000007A4E
.text:0000000000007A4E loc_7A4E:                               ; CODE XREF: printf_parse+B82↓j
.text:0000000000007A4E                 mov     rbx, [r12+40h]
.text:0000000000007A53                 cmp     rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000007A57                 jz      loc_80B5
.text:0000000000007A5D
.text:0000000000007A5D loc_7A5D:                               ; CODE XREF: printf_parse+B67↓j
.text:0000000000007A5D                                         ; printf_parse+C59↓j
.text:0000000000007A5D                 cmp     r9, rbx
.text:0000000000007A60                 mov     rcx, [r15+8]
.text:0000000000007A64                 jbe     loc_7FCF
.text:0000000000007A6A                 mov     rax, [r15]
.text:0000000000007A6D
.text:0000000000007A6D loc_7A6D:                               ; CODE XREF: printf_parse+AE4↓j
.text:0000000000007A6D                 mov     rdx, rax
.text:0000000000007A70                 shl     rdx, 5
.text:0000000000007A74                 add     rdx, rcx
.text:0000000000007A77                 cmp     rax, rbx
.text:0000000000007A7A                 ja      short loc_7A96
.text:0000000000007A7C                 nop     dword ptr [rax+00h]
.text:0000000000007A80
.text:0000000000007A80 loc_7A80:                               ; CODE XREF: printf_parse+521↓j
.text:0000000000007A80                 add     rax, 1
.text:0000000000007A84                 mov     dword ptr [rdx], 0
.text:0000000000007A8A                 add     rdx, 20h ; ' '
.text:0000000000007A8E                 cmp     rax, rbx
.text:0000000000007A91                 jbe     short loc_7A80
.text:0000000000007A93                 mov     [r15], rax
.text:0000000000007A96
.text:0000000000007A96 loc_7A96:                               ; CODE XREF: printf_parse+50A↑j
.text:0000000000007A96                 shl     rbx, 5
.text:0000000000007A9A                 lea     rax, [rcx+rbx]
.text:0000000000007A9E                 mov     edx, [rax]
.text:0000000000007AA0                 test    edx, edx
.text:0000000000007AA2                 jnz     loc_7FBA
.text:0000000000007AA8                 mov     dword ptr [rax], 5
.text:0000000000007AAE                 mov     rbp, r11
.text:0000000000007AB1                 movzx   ebx, byte ptr [r11]
.text:0000000000007AB5                 jmp     loc_773E
.text:0000000000007ABA ; ---------------------------------------------------------------------------
.text:0000000000007ABA
.text:0000000000007ABA loc_7ABA:                               ; CODE XREF: printf_parse+112↑j
.text:0000000000007ABA                 mov     rax, rbp
.text:0000000000007ABD                 nop     dword ptr [rax]
.text:0000000000007AC0
.text:0000000000007AC0 loc_7AC0:                               ; CODE XREF: printf_parse+55D↓j
.text:0000000000007AC0                 add     rax, 1
.text:0000000000007AC4                 movzx   edx, byte ptr [rax]
.text:0000000000007AC7                 lea     ecx, [rdx-30h]
.text:0000000000007ACA                 cmp     cl, 9
.text:0000000000007ACD                 jbe     short loc_7AC0
.text:0000000000007ACF                 cmp     dl, 24h ; '$'
.text:0000000000007AD2                 mov     r13, r8
.text:0000000000007AD5                 jnz     loc_76BE
.text:0000000000007ADB                 xor     edx, edx
.text:0000000000007ADD
.text:0000000000007ADD loc_7ADD:                               ; CODE XREF: printf_parse+5B7↓j
.text:0000000000007ADD                 movsx   eax, bl
.text:0000000000007AE0                 mov     rdi, 1999999999999999h
.text:0000000000007AEA                 mov     rsi, r8
.text:0000000000007AED                 sub     eax, 30h ; '0'
.text:0000000000007AF0                 cmp     rdx, rdi
.text:0000000000007AF3                 cdqe
.text:0000000000007AF5                 ja      short loc_7AFE
.text:0000000000007AF7                 lea     rsi, [rdx+rdx*4]
.text:0000000000007AFB                 add     rsi, rsi
.text:0000000000007AFE
.text:0000000000007AFE loc_7AFE:                               ; CODE XREF: printf_parse+585↑j
.text:0000000000007AFE                 mov     rcx, rbp
.text:0000000000007B01
.text:0000000000007B01 loc_7B01:                               ; CODE XREF: printf_parse+956↓j
.text:0000000000007B01                 add     rax, rsi
.text:0000000000007B04                 movzx   ebx, byte ptr [rbp+1]
.text:0000000000007B08                 setb    sil
.text:0000000000007B0C                 add     rbp, 1
.text:0000000000007B10                 mov     rdx, rax
.text:0000000000007B13                 movzx   esi, sil
.text:0000000000007B17                 test    rsi, rsi
.text:0000000000007B1A                 lea     edi, [rbx-30h]
.text:0000000000007B1D                 jnz     loc_7EAE
.text:0000000000007B23                 cmp     dil, 9
.text:0000000000007B27                 jbe     short loc_7ADD
.text:0000000000007B29                 mov     r13, rax
.text:0000000000007B2C                 sub     r13, 1
.text:0000000000007B30                 cmp     r13, 0FFFFFFFFFFFFFFFDh
.text:0000000000007B34                 ja      def_77B5        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:0000000000007B3A                 lea     rbp, [rcx+2]
.text:0000000000007B3E                 movzx   ebx, byte ptr [rcx+2]
.text:0000000000007B42                 jmp     loc_76BE
.text:0000000000007B47 ; ---------------------------------------------------------------------------
.text:0000000000007B47
.text:0000000000007B47 loc_7B47:                               ; CODE XREF: printf_parse+1BF↑j
.text:0000000000007B47                 mov     [r12+18h], rbp
.text:0000000000007B4C                 movzx   edi, byte ptr [rbp+0]
.text:0000000000007B50                 mov     rsi, rbp
.text:0000000000007B53                 lea     ecx, [rdi-30h]
.text:0000000000007B56                 cmp     cl, 9
.text:0000000000007B59                 jbe     short loc_7B67
.text:0000000000007B5B                 jmp     short loc_7B90
.text:0000000000007B5B ; ---------------------------------------------------------------------------
.text:0000000000007B5D                 align 20h
.text:0000000000007B60
.text:0000000000007B60 loc_7B60:                               ; CODE XREF: printf_parse+600↓j
.text:0000000000007B60                 mov     rbp, rax
.text:0000000000007B63                 add     rax, 1
.text:0000000000007B67
.text:0000000000007B67 loc_7B67:                               ; CODE XREF: printf_parse+5E9↑j
.text:0000000000007B67                 movzx   edi, byte ptr [rax]
.text:0000000000007B6A                 lea     edx, [rdi-30h]
.text:0000000000007B6D                 cmp     dl, 9
.text:0000000000007B70                 jbe     short loc_7B60
.text:0000000000007B72                 mov     rcx, rax
.text:0000000000007B75                 lea     rdx, [rbp+2]
.text:0000000000007B79                 mov     rbp, rax
.text:0000000000007B7C                 sub     rcx, rsi
.text:0000000000007B7F                 mov     rsi, [rsp+88h+var_78]
.text:0000000000007B84                 cmp     rsi, rcx
.text:0000000000007B87                 cmovnb  rcx, rsi
.text:0000000000007B8B                 mov     [rsp+88h+var_78], rcx
.text:0000000000007B90
.text:0000000000007B90 loc_7B90:                               ; CODE XREF: printf_parse+5EB↑j
.text:0000000000007B90                 mov     [r12+20h], rbp
.text:0000000000007B95                 movzx   ebx, byte ptr [rbp+0]
.text:0000000000007B99                 jmp     loc_7735
.text:0000000000007B9E ; ---------------------------------------------------------------------------
.text:0000000000007B9E
.text:0000000000007B9E loc_7B9E:                               ; CODE XREF: printf_parse+4A8↑j
.text:0000000000007B9E                 movzx   eax, byte ptr [rbp+1]
.text:0000000000007BA2                 sub     eax, 30h ; '0'
.text:0000000000007BA5                 cmp     al, 9
.text:0000000000007BA7                 ja      short loc_7BBE
.text:0000000000007BA9                 nop     dword ptr [rax+00000000h]
.text:0000000000007BB0
.text:0000000000007BB0 loc_7BB0:                               ; CODE XREF: printf_parse+64C↓j
.text:0000000000007BB0                 add     rdx, 1
.text:0000000000007BB4                 movzx   eax, byte ptr [rdx]
.text:0000000000007BB7                 sub     eax, 30h ; '0'
.text:0000000000007BBA                 cmp     al, 9
.text:0000000000007BBC                 jbe     short loc_7BB0
.text:0000000000007BBE
.text:0000000000007BBE loc_7BBE:                               ; CODE XREF: printf_parse+637↑j
.text:0000000000007BBE                 mov     rsi, [rsp+88h+var_70]
.text:0000000000007BC3                 mov     rax, rdx
.text:0000000000007BC6                 mov     [r12+38h], rdx
.text:0000000000007BCB                 sub     rax, rbp
.text:0000000000007BCE                 movzx   ebx, byte ptr [rdx]
.text:0000000000007BD1                 mov     rbp, rdx
.text:0000000000007BD4                 cmp     rsi, rax
.text:0000000000007BD7                 cmovnb  rax, rsi
.text:0000000000007BDB                 mov     [rsp+88h+var_70], rax
.text:0000000000007BE0                 jmp     loc_773E
.text:0000000000007BE5 ; ---------------------------------------------------------------------------
.text:0000000000007BE5
.text:0000000000007BE5 loc_7BE5:                               ; CODE XREF: printf_parse+394↑j
.text:0000000000007BE5                 mov     rsi, rax
.text:0000000000007BE8
.text:0000000000007BE8 loc_7BE8:                               ; CODE XREF: printf_parse+687↓j
.text:0000000000007BE8                 add     rsi, 1
.text:0000000000007BEC                 movzx   edi, byte ptr [rsi]
.text:0000000000007BEF                 lea     r11d, [rdi-30h]
.text:0000000000007BF3                 cmp     r11b, 9
.text:0000000000007BF7                 jbe     short loc_7BE8
.text:0000000000007BF9                 cmp     dil, 24h ; '$'
.text:0000000000007BFD                 jnz     loc_790A
.text:0000000000007C03                 xor     esi, esi
.text:0000000000007C05
.text:0000000000007C05 loc_7C05:                               ; CODE XREF: printf_parse+6DE↓j
.text:0000000000007C05                 movsx   eax, cl
.text:0000000000007C08                 mov     rdi, 1999999999999999h
.text:0000000000007C12                 mov     rcx, r8
.text:0000000000007C15                 sub     eax, 30h ; '0'
.text:0000000000007C18                 cmp     rsi, rdi
.text:0000000000007C1B                 cdqe
.text:0000000000007C1D                 ja      short loc_7C26
.text:0000000000007C1F                 lea     rcx, [rsi+rsi*4]
.text:0000000000007C23                 add     rcx, rcx
.text:0000000000007C26
.text:0000000000007C26 loc_7C26:                               ; CODE XREF: printf_parse+6AD↑j
.text:0000000000007C26                 mov     rbp, rdx
.text:0000000000007C29
.text:0000000000007C29 loc_7C29:                               ; CODE XREF: printf_parse+BF6↓j
.text:0000000000007C29                 xor     r11d, r11d
.text:0000000000007C2C                 add     rax, rcx
.text:0000000000007C2F                 movzx   ecx, byte ptr [rdx+1]
.text:0000000000007C33                 setb    r11b
.text:0000000000007C37                 add     rdx, 1
.text:0000000000007C3B                 mov     rsi, rax
.text:0000000000007C3E                 test    r11, r11
.text:0000000000007C41                 lea     edi, [rcx-30h]
.text:0000000000007C44                 jnz     loc_814E
.text:0000000000007C4A                 cmp     dil, 9
.text:0000000000007C4E                 jbe     short loc_7C05
.text:0000000000007C50                 lea     rbx, [rax-1]
.text:0000000000007C54                 cmp     rbx, 0FFFFFFFFFFFFFFFDh
.text:0000000000007C58                 ja      def_77B5        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:0000000000007C5E                 mov     [r12+28h], rbx
.text:0000000000007C63                 add     rbp, 2
.text:0000000000007C67                 jmp     loc_792F
.text:0000000000007C6C ; ---------------------------------------------------------------------------
.text:0000000000007C6C
.text:0000000000007C6C loc_7C6C:                               ; CODE XREF: printf_parse+245↑j
.text:0000000000007C6C                                         ; DATA XREF: .rodata:jpt_77B5↓o
.text:0000000000007C6C                 cmp     eax, 0Fh        ; jumptable 0000000000000245 case 110
.text:0000000000007C6F                 mov     r11d, 16h
.text:0000000000007C75                 jg      loc_77C8
.text:0000000000007C7B                 test    al, 4
.text:0000000000007C7D                 jnz     loc_77C8
.text:0000000000007C83                 cmp     eax, 7
.text:0000000000007C86                 mov     r11d, 15h
.text:0000000000007C8C                 jg      loc_77C8
.text:0000000000007C92                 test    al, 2
.text:0000000000007C94                 mov     r11d, 12h
.text:0000000000007C9A                 jnz     loc_77C8
.text:0000000000007CA0                 xor     r11d, r11d
.text:0000000000007CA3                 test    al, 1
.text:0000000000007CA5                 setz    r11b
.text:0000000000007CA9                 add     r11d, 13h
.text:0000000000007CAD                 jmp     loc_77C8
.text:0000000000007CAD ; ---------------------------------------------------------------------------
.text:0000000000007CB2                 align 8
.text:0000000000007CB8
.text:0000000000007CB8 loc_7CB8:                               ; CODE XREF: printf_parse+245↑j
.text:0000000000007CB8                                         ; DATA XREF: .rodata:jpt_77B5↓o
.text:0000000000007CB8                 xor     r11d, r11d      ; jumptable 0000000000000245 case 99
.text:0000000000007CBB                 cmp     eax, 7
.text:0000000000007CBE                 setnle  r11b
.text:0000000000007CC2                 add     r11d, 0Dh
.text:0000000000007CC6                 jmp     loc_77C8
.text:0000000000007CCB ; ---------------------------------------------------------------------------
.text:0000000000007CCB
.text:0000000000007CCB loc_7CCB:                               ; CODE XREF: printf_parse+245↑j
.text:0000000000007CCB                                         ; DATA XREF: .rodata:jpt_77B5↓o
.text:0000000000007CCB                 cmp     eax, 0Fh        ; jumptable 0000000000000245 cases 100,105
.text:0000000000007CCE                 mov     r11d, 9
.text:0000000000007CD4                 jg      loc_77C8
.text:0000000000007CDA                 test    al, 4
.text:0000000000007CDC                 jnz     loc_77C8
.text:0000000000007CE2                 cmp     eax, 7
.text:0000000000007CE5                 mov     r11d, 7
.text:0000000000007CEB                 jg      loc_77C8
.text:0000000000007CF1                 test    al, 2
.text:0000000000007CF3                 mov     r11d, 1
.text:0000000000007CF9                 jnz     loc_77C8
.text:0000000000007CFF                 and     eax, 1
.text:0000000000007D02                 cmp     eax, 1
.text:0000000000007D05                 sbb     r11d, r11d
.text:0000000000007D08                 and     r11d, 2
.text:0000000000007D0C                 add     r11d, 3
.text:0000000000007D10                 jmp     loc_77C8
.text:0000000000007D10 ; ---------------------------------------------------------------------------
.text:0000000000007D15                 align 8
.text:0000000000007D18
.text:0000000000007D18 loc_7D18:                               ; CODE XREF: printf_parse+245↑j
.text:0000000000007D18                                         ; DATA XREF: .rodata:jpt_77B5↓o
.text:0000000000007D18                 xor     r11d, r11d      ; jumptable 0000000000000245 case 115
.text:0000000000007D1B                 cmp     eax, 7
.text:0000000000007D1E                 setnle  r11b
.text:0000000000007D22                 add     r11d, 0Fh
.text:0000000000007D26                 jmp     loc_77C8
.text:0000000000007D2B ; ---------------------------------------------------------------------------
.text:0000000000007D2B
.text:0000000000007D2B loc_7D2B:                               ; CODE XREF: printf_parse+245↑j
.text:0000000000007D2B                                         ; DATA XREF: .rodata:jpt_77B5↓o
.text:0000000000007D2B                 cmp     eax, 0Fh        ; jumptable 0000000000000245 cases 65,69-71,97,101-103
.text:0000000000007D2E                 mov     r11d, 0Ch
.text:0000000000007D34                 jg      loc_77C8
.text:0000000000007D3A                 xor     r11d, r11d
.text:0000000000007D3D                 test    al, 4
.text:0000000000007D3F                 setnz   r11b
.text:0000000000007D43                 add     r11d, 0Bh
.text:0000000000007D47                 jmp     loc_77C8
.text:0000000000007D4C ; ---------------------------------------------------------------------------
.text:0000000000007D4C
.text:0000000000007D4C loc_7D4C:                               ; CODE XREF: printf_parse+245↑j
.text:0000000000007D4C                                         ; DATA XREF: .rodata:jpt_77B5↓o
.text:0000000000007D4C                 mov     r11d, 0Eh       ; jumptable 0000000000000245 case 67
.text:0000000000007D52                 mov     ebx, 63h ; 'c'
.text:0000000000007D57                 jmp     loc_77C8
.text:0000000000007D5C ; ---------------------------------------------------------------------------
.text:0000000000007D5C
.text:0000000000007D5C loc_7D5C:                               ; CODE XREF: printf_parse+245↑j
.text:0000000000007D5C                                         ; DATA XREF: .rodata:jpt_77B5↓o
.text:0000000000007D5C                 cmp     eax, 0Fh        ; jumptable 0000000000000245 cases 88,111,117,120
.text:0000000000007D5F                 mov     r11d, 0Ah
.text:0000000000007D65                 jg      loc_77C8
.text:0000000000007D6B                 test    al, 4
.text:0000000000007D6D                 jnz     loc_77C8
.text:0000000000007D73                 cmp     eax, 7
.text:0000000000007D76                 mov     r11d, 8
.text:0000000000007D7C                 jg      loc_77C8
.text:0000000000007D82                 test    al, 2
.text:0000000000007D84                 mov     r11d, 2
.text:0000000000007D8A                 jnz     loc_77C8
.text:0000000000007D90                 and     eax, 1
.text:0000000000007D93                 cmp     eax, 1
.text:0000000000007D96                 sbb     r11d, r11d
.text:0000000000007D99                 and     r11d, 2
.text:0000000000007D9D                 add     r11d, 4
.text:0000000000007DA1                 jmp     loc_77C8
.text:0000000000007DA1 ; ---------------------------------------------------------------------------
.text:0000000000007DA6                 align 10h
.text:0000000000007DB0
.text:0000000000007DB0 loc_7DB0:                               ; CODE XREF: printf_parse+245↑j
.text:0000000000007DB0                                         ; DATA XREF: .rodata:jpt_77B5↓o
.text:0000000000007DB0                 mov     r11d, 11h       ; jumptable 0000000000000245 case 112
.text:0000000000007DB6                 jmp     loc_77C8
.text:0000000000007DBB ; ---------------------------------------------------------------------------
.text:0000000000007DBB
.text:0000000000007DBB def_77B5:                               ; CODE XREF: printf_parse+22E↑j
.text:0000000000007DBB                                         ; printf_parse+245↑j ...
.text:0000000000007DBB                 mov     rcx, [r15+8]    ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:0000000000007DBF
.text:0000000000007DBF loc_7DBF:                               ; CODE XREF: printf_parse+88C↓j
.text:0000000000007DBF                                         ; printf_parse+95E↓j ...
.text:0000000000007DBF                 cmp     [rsp+88h+src], rcx
.text:0000000000007DC4                 jz      short loc_7DCE
.text:0000000000007DC6                 mov     rdi, rcx        ; ptr
.text:0000000000007DC9                 call    _free           ; PIC mode
.text:0000000000007DCE
.text:0000000000007DCE loc_7DCE:                               ; CODE XREF: printf_parse+854↑j
.text:0000000000007DCE                 mov     rdi, [r14+8]    ; ptr
.text:0000000000007DD2                 cmp     [rsp+88h+var_60], rdi
.text:0000000000007DD7                 jz      short loc_7DDE
.text:0000000000007DD9                 call    _free           ; PIC mode
.text:0000000000007DDE
.text:0000000000007DDE loc_7DDE:                               ; CODE XREF: printf_parse+867↑j
.text:0000000000007DDE                 call    ___errno_location ; PIC mode
.text:0000000000007DE3                 mov     dword ptr [rax], 16h
.text:0000000000007DE9                 mov     eax, 0FFFFFFFFh
.text:0000000000007DEE                 jmp     loc_7612
.text:0000000000007DF3 ; ---------------------------------------------------------------------------
.text:0000000000007DF3
.text:0000000000007DF3 loc_7DF3:                               ; CODE XREF: printf_parse+2B2↑j
.text:0000000000007DF3                 cmp     edx, r11d
.text:0000000000007DF6                 jz      loc_782B        ; jumptable 0000000000000245 case 37
.text:0000000000007DFC                 jmp     short loc_7DBF
.text:0000000000007DFC ; ---------------------------------------------------------------------------
.text:0000000000007DFE                 align 20h
.text:0000000000007E00
.text:0000000000007E00 loc_7E00:                               ; CODE XREF: printf_parse+26E↑j
.text:0000000000007E00                 add     r9, r9
.text:0000000000007E03                 lea     rax, [r13+1]
.text:0000000000007E07                 cmp     r9, r13
.text:0000000000007E0A                 cmovbe  r9, rax
.text:0000000000007E0E                 mov     rax, 7FFFFFFFFFFFFFFh
.text:0000000000007E18                 cmp     r9, rax
.text:0000000000007E1B                 ja      loc_81FB
.text:0000000000007E21                 mov     rsi, r9
.text:0000000000007E24                 mov     [rsp+88h+var_40], r9
.text:0000000000007E29                 mov     [rsp+88h+var_48], r10
.text:0000000000007E2E                 shl     rsi, 5          ; size
.text:0000000000007E32                 cmp     [rsp+88h+src], rcx
.text:0000000000007E37                 mov     [rsp+88h+var_50], r8
.text:0000000000007E3C                 mov     dword ptr [rsp+88h+var_58], r11d
.text:0000000000007E41                 jz      loc_7EE1
.text:0000000000007E47                 mov     rdi, rcx        ; ptr
.text:0000000000007E4A                 call    _realloc        ; PIC mode
.text:0000000000007E4F                 test    rax, rax
.text:0000000000007E52                 mov     rcx, rax
.text:0000000000007E55                 mov     r11d, dword ptr [rsp+88h+var_58]
.text:0000000000007E5A                 mov     r8, [rsp+88h+var_50]
.text:0000000000007E5F                 mov     r10, [rsp+88h+var_48]
.text:0000000000007E64                 mov     r9, [rsp+88h+var_40]
.text:0000000000007E69                 jz      loc_81F7
.text:0000000000007E6F                 mov     rax, [rsp+88h+src]
.text:0000000000007E74                 cmp     rax, [r15+8]
.text:0000000000007E78                 jz      loc_7F09
.text:0000000000007E7E
.text:0000000000007E7E loc_7E7E:                               ; CODE XREF: printf_parse+9D8↓j
.text:0000000000007E7E                 mov     [r15+8], rcx
.text:0000000000007E82                 jmp     loc_77E4
.text:0000000000007E87 ; ---------------------------------------------------------------------------
.text:0000000000007E87
.text:0000000000007E87 loc_7E87:                               ; CODE XREF: printf_parse+25C↑j
.text:0000000000007E87                 mov     rsi, [rsp+88h+var_68]
.text:0000000000007E8C                 cmp     rsi, 0FFFFFFFFFFFFFFFFh
.text:0000000000007E90                 lea     rax, [rsi+1]
.text:0000000000007E94                 mov     [r12+50h], rsi
.text:0000000000007E99                 jz      def_77B5        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:0000000000007E9F                 mov     r13, [rsp+88h+var_68]
.text:0000000000007EA4                 mov     [rsp+88h+var_68], rax
.text:0000000000007EA9                 jmp     loc_77D7
.text:0000000000007EAE ; ---------------------------------------------------------------------------
.text:0000000000007EAE
.text:0000000000007EAE loc_7EAE:                               ; CODE XREF: printf_parse+5AD↑j
.text:0000000000007EAE                 cmp     dil, 9
.text:0000000000007EB2                 ja      def_77B5        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:0000000000007EB8                 movsx   eax, bl
.text:0000000000007EBB                 mov     rsi, r8
.text:0000000000007EBE                 mov     rcx, rbp
.text:0000000000007EC1                 sub     eax, 30h ; '0'
.text:0000000000007EC4                 cdqe
.text:0000000000007EC6                 jmp     loc_7B01
.text:0000000000007ECB ; ---------------------------------------------------------------------------
.text:0000000000007ECB
.text:0000000000007ECB loc_7ECB:                               ; CODE XREF: printf_parse+482↑j
.text:0000000000007ECB                 cmp     edx, 5
.text:0000000000007ECE                 jnz     loc_7DBF
.text:0000000000007ED4                 movzx   ebx, byte ptr [rbp+0]
.text:0000000000007ED8                 lea     rdx, [rbp+1]
.text:0000000000007EDC                 jmp     loc_7735
.text:0000000000007EE1 ; ---------------------------------------------------------------------------
.text:0000000000007EE1
.text:0000000000007EE1 loc_7EE1:                               ; CODE XREF: printf_parse+8D1↑j
.text:0000000000007EE1                 mov     rdi, rsi        ; size
.text:0000000000007EE4                 call    _malloc         ; PIC mode
.text:0000000000007EE9                 test    rax, rax
.text:0000000000007EEC                 mov     rcx, rax
.text:0000000000007EEF                 mov     r11d, dword ptr [rsp+88h+var_58]
.text:0000000000007EF4                 mov     r8, [rsp+88h+var_50]
.text:0000000000007EF9                 mov     r10, [rsp+88h+var_48]
.text:0000000000007EFE                 mov     r9, [rsp+88h+var_40]
.text:0000000000007F03                 jz      loc_806C
.text:0000000000007F09
.text:0000000000007F09 loc_7F09:                               ; CODE XREF: printf_parse+908↑j
.text:0000000000007F09                 mov     rdx, [r15]
.text:0000000000007F0C                 mov     rsi, [rsp+88h+src] ; src
.text:0000000000007F11                 mov     rdi, rcx        ; dest
.text:0000000000007F14                 mov     [rsp+88h+var_40], r9
.text:0000000000007F19                 mov     [rsp+88h+var_48], r10
.text:0000000000007F1E                 mov     [rsp+88h+var_50], r8
.text:0000000000007F23                 mov     dword ptr [rsp+88h+var_58], r11d
.text:0000000000007F28                 shl     rdx, 5          ; n
.text:0000000000007F2C                 call    _memcpy         ; PIC mode
.text:0000000000007F31                 mov     r9, [rsp+88h+var_40]
.text:0000000000007F36                 mov     r10, [rsp+88h+var_48]
.text:0000000000007F3B                 mov     rcx, rax
.text:0000000000007F3E                 mov     r8, [rsp+88h+var_50]
.text:0000000000007F43                 mov     r11d, dword ptr [rsp+88h+var_58]
.text:0000000000007F48                 jmp     loc_7E7E
.text:0000000000007F4D ; ---------------------------------------------------------------------------
.text:0000000000007F4D
.text:0000000000007F4D loc_7F4D:                               ; CODE XREF: printf_parse+31F↑j
.text:0000000000007F4D                 mov     rdi, rsi        ; size
.text:0000000000007F50                 call    _malloc         ; PIC mode
.text:0000000000007F55                 test    rax, rax
.text:0000000000007F58                 mov     rcx, rax
.text:0000000000007F5B                 mov     r8, [rsp+88h+var_58]
.text:0000000000007F60                 mov     r10, [rsp+88h+var_50]
.text:0000000000007F65                 mov     r9, [rsp+88h+var_48]
.text:0000000000007F6A                 jz      loc_8059
.text:0000000000007F70
.text:0000000000007F70 loc_7F70:                               ; CODE XREF: printf_parse+351↑j
.text:0000000000007F70                 lea     rax, [rbx+rbx*4]
.text:0000000000007F74                 mov     rsi, [rsp+88h+var_60] ; src
.text:0000000000007F79                 mov     rdi, rcx        ; dest
.text:0000000000007F7C                 mov     [rsp+88h+var_48], r9
.text:0000000000007F81                 mov     [rsp+88h+var_50], r10
.text:0000000000007F86                 lea     rdx, [rbx+rax*2]
.text:0000000000007F8A                 mov     [rsp+88h+var_58], r8
.text:0000000000007F8F                 shl     rdx, 3          ; n
.text:0000000000007F93                 call    _memcpy         ; PIC mode
.text:0000000000007F98                 mov     rbx, [r14]
.text:0000000000007F9B                 mov     rcx, rax
.text:0000000000007F9E                 mov     r9, [rsp+88h+var_48]
.text:0000000000007FA3                 mov     r10, [rsp+88h+var_50]
.text:0000000000007FA8                 mov     r8, [rsp+88h+var_58]
.text:0000000000007FAD                 jmp     loc_78C7
.text:0000000000007FB2 ; ---------------------------------------------------------------------------
.text:0000000000007FB2
.text:0000000000007FB2 loc_7FB2:                               ; CODE XREF: printf_parse+3C6↑j
.text:0000000000007FB2                 mov     rax, [r15]
.text:0000000000007FB5                 jmp     loc_79B7
.text:0000000000007FBA ; ---------------------------------------------------------------------------
.text:0000000000007FBA
.text:0000000000007FBA loc_7FBA:                               ; CODE XREF: printf_parse+532↑j
.text:0000000000007FBA                 cmp     edx, 5
.text:0000000000007FBD                 jnz     loc_7DBF
.text:0000000000007FC3                 movzx   ebx, byte ptr [r11]
.text:0000000000007FC7                 mov     rbp, r11
.text:0000000000007FCA                 jmp     loc_773E
.text:0000000000007FCF ; ---------------------------------------------------------------------------
.text:0000000000007FCF
.text:0000000000007FCF loc_7FCF:                               ; CODE XREF: printf_parse+4F4↑j
.text:0000000000007FCF                 add     r9, r9
.text:0000000000007FD2                 lea     rax, [rbx+1]
.text:0000000000007FD6                 cmp     r9, rbx
.text:0000000000007FD9                 cmovbe  r9, rax
.text:0000000000007FDD                 mov     rax, 7FFFFFFFFFFFFFFh
.text:0000000000007FE7                 cmp     r9, rax
.text:0000000000007FEA                 ja      loc_81FB
.text:0000000000007FF0                 mov     rsi, r9
.text:0000000000007FF3                 mov     [rsp+88h+var_40], r9
.text:0000000000007FF8                 mov     [rsp+88h+var_48], r10
.text:0000000000007FFD                 shl     rsi, 5          ; size
.text:0000000000008001                 cmp     [rsp+88h+src], rcx
.text:0000000000008006                 mov     [rsp+88h+var_50], r8
.text:000000000000800B                 mov     [rsp+88h+var_58], r11
.text:0000000000008010                 jz      loc_81CE
.text:0000000000008016                 mov     rdi, rcx        ; ptr
.text:0000000000008019                 call    _realloc        ; PIC mode
.text:000000000000801E                 mov     rdx, [r15+8]
.text:0000000000008022                 mov     r11, [rsp+88h+var_58]
.text:0000000000008027                 mov     rcx, rax
.text:000000000000802A                 mov     r8, [rsp+88h+var_50]
.text:000000000000802F                 mov     r10, [rsp+88h+var_48]
.text:0000000000008034                 mov     r9, [rsp+88h+var_40]
.text:0000000000008039
.text:0000000000008039 loc_8039:                               ; CODE XREF: printf_parse+C82↓j
.text:0000000000008039                 test    rcx, rcx
.text:000000000000803C                 jz      loc_8257
.text:0000000000008042                 cmp     [rsp+88h+src], rdx
.text:0000000000008047                 mov     rax, [r15]
.text:000000000000804A                 jz      loc_8210
.text:0000000000008050
.text:0000000000008050 loc_8050:                               ; CODE XREF: printf_parse+CE2↓j
.text:0000000000008050                 mov     [r15+8], rcx
.text:0000000000008054                 jmp     loc_7A6D
.text:0000000000008059 ; ---------------------------------------------------------------------------
.text:0000000000008059
.text:0000000000008059 loc_8059:                               ; CODE XREF: printf_parse+9FA↑j
.text:0000000000008059                 mov     rcx, [r15+8]
.text:000000000000805D                 cmp     [rsp+88h+src], rcx
.text:0000000000008062                 jz      short loc_807C
.text:0000000000008064
.text:0000000000008064 loc_8064:                               ; CODE XREF: printf_parse+C90↓j
.text:0000000000008064                 mov     rdi, rcx        ; ptr
.text:0000000000008067                 call    _free           ; PIC mode
.text:000000000000806C
.text:000000000000806C loc_806C:                               ; CODE XREF: printf_parse+993↑j
.text:000000000000806C                                         ; printf_parse+C96↓j
.text:000000000000806C                 mov     rdi, [r14+8]    ; ptr
.text:0000000000008070                 cmp     [rsp+88h+var_60], rdi
.text:0000000000008075                 jz      short loc_807C
.text:0000000000008077                 call    _free           ; PIC mode
.text:000000000000807C
.text:000000000000807C loc_807C:                               ; CODE XREF: printf_parse+AF2↑j
.text:000000000000807C                                         ; printf_parse+B05↑j
.text:000000000000807C                 call    ___errno_location ; PIC mode
.text:0000000000008081                 mov     dword ptr [rax], 0Ch
.text:0000000000008087                 mov     eax, 0FFFFFFFFh
.text:000000000000808C                 jmp     loc_7612
.text:0000000000008091 ; ---------------------------------------------------------------------------
.text:0000000000008091
.text:0000000000008091 loc_8091:                               ; CODE XREF: printf_parse+408↑j
.text:0000000000008091                 mov     rdi, rsi        ; size
.text:0000000000008094                 call    _malloc         ; PIC mode
.text:0000000000008099                 mov     rdx, [rsp+88h+src]
.text:000000000000809E                 mov     rcx, rax
.text:00000000000080A1                 mov     r9, [rsp+88h+var_48]
.text:00000000000080A6                 mov     r10, [rsp+88h+var_50]
.text:00000000000080AB                 mov     r8, [rsp+88h+var_58]
.text:00000000000080B0                 jmp     loc_799C
.text:00000000000080B5 ; ---------------------------------------------------------------------------
.text:00000000000080B5
.text:00000000000080B5 loc_80B5:                               ; CODE XREF: printf_parse+4E7↑j
.text:00000000000080B5                 mov     rsi, [rsp+88h+var_68]
.text:00000000000080BA                 cmp     rsi, 0FFFFFFFFFFFFFFFFh
.text:00000000000080BE                 lea     rax, [rsi+1]
.text:00000000000080C2                 mov     [r12+40h], rsi
.text:00000000000080C7                 jz      def_77B5        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:00000000000080CD                 mov     rbx, [rsp+88h+var_68]
.text:00000000000080D2                 mov     [rsp+88h+var_68], rax
.text:00000000000080D7                 jmp     loc_7A5D
.text:00000000000080DC ; ---------------------------------------------------------------------------
.text:00000000000080DC
.text:00000000000080DC loc_80DC:                               ; CODE XREF: printf_parse+4D8↑j
.text:00000000000080DC                 mov     rdx, r11
.text:00000000000080DF
.text:00000000000080DF loc_80DF:                               ; CODE XREF: printf_parse+B7D↓j
.text:00000000000080DF                 add     rdx, 1
.text:00000000000080E3                 movzx   ecx, byte ptr [rdx]
.text:00000000000080E6                 lea     esi, [rcx-30h]
.text:00000000000080E9                 cmp     sil, 9
.text:00000000000080ED                 jbe     short loc_80DF
.text:00000000000080EF                 cmp     cl, 24h ; '$'
.text:00000000000080F2                 jnz     loc_7A4E
.text:00000000000080F8                 xor     ecx, ecx
.text:00000000000080FA
.text:00000000000080FA loc_80FA:                               ; CODE XREF: printf_parse+C3C↓j
.text:00000000000080FA                 mov     rsi, 1999999999999999h
.text:0000000000008104                 sub     eax, 30h ; '0'
.text:0000000000008107                 mov     rdx, r8
.text:000000000000810A                 cmp     rcx, rsi
.text:000000000000810D                 cdqe
.text:000000000000810F                 ja      short loc_8118
.text:0000000000008111                 lea     rdx, [rcx+rcx*4]
.text:0000000000008115                 add     rdx, rdx
.text:0000000000008118
.text:0000000000008118 loc_8118:                               ; CODE XREF: printf_parse+B9F↑j
.text:0000000000008118                 mov     rsi, r11
.text:000000000000811B
.text:000000000000811B loc_811B:                               ; CODE XREF: printf_parse+BDC↓j
.text:000000000000811B                 xor     ebx, ebx
.text:000000000000811D                 add     rdx, rax
.text:0000000000008120                 movsx   eax, byte ptr [r11+1]
.text:0000000000008125                 setb    bl
.text:0000000000008128                 add     r11, 1
.text:000000000000812C                 mov     rcx, rdx
.text:000000000000812F                 test    rbx, rbx
.text:0000000000008132                 lea     edi, [rax-30h]
.text:0000000000008135                 jz      short loc_81A8
.text:0000000000008137                 cmp     dil, 9
.text:000000000000813B                 ja      def_77B5        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:0000000000008141                 sub     eax, 30h ; '0'
.text:0000000000008144                 mov     rdx, r8
.text:0000000000008147                 mov     rsi, r11
.text:000000000000814A                 cdqe
.text:000000000000814C                 jmp     short loc_811B
.text:000000000000814E ; ---------------------------------------------------------------------------
.text:000000000000814E
.text:000000000000814E loc_814E:                               ; CODE XREF: printf_parse+6D4↑j
.text:000000000000814E                 cmp     dil, 9
.text:0000000000008152                 ja      def_77B5        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:0000000000008158                 movsx   eax, cl
.text:000000000000815B                 mov     rbp, rdx
.text:000000000000815E                 mov     rcx, r8
.text:0000000000008161                 sub     eax, 30h ; '0'
.text:0000000000008164                 cdqe
.text:0000000000008166                 jmp     loc_7C29
.text:000000000000816B ; ---------------------------------------------------------------------------
.text:000000000000816B
.text:000000000000816B loc_816B:                               ; CODE XREF: printf_parse+43D↑j
.text:000000000000816B                 mov     rsi, [rsp+88h+src] ; src
.text:0000000000008170                 shl     rax, 5
.text:0000000000008174                 mov     rdi, rcx        ; dest
.text:0000000000008177                 mov     rdx, rax        ; n
.text:000000000000817A                 mov     [rsp+88h+var_48], r9
.text:000000000000817F                 mov     [rsp+88h+var_50], r10
.text:0000000000008184                 mov     [rsp+88h+var_58], r8
.text:0000000000008189                 call    _memcpy         ; PIC mode
.text:000000000000818E                 mov     r9, [rsp+88h+var_48]
.text:0000000000008193                 mov     rcx, rax
.text:0000000000008196                 mov     r10, [rsp+88h+var_50]
.text:000000000000819B                 mov     rax, [r15]
.text:000000000000819E                 mov     r8, [rsp+88h+var_58]
.text:00000000000081A3                 jmp     loc_79B3
.text:00000000000081A8 ; ---------------------------------------------------------------------------
.text:00000000000081A8
.text:00000000000081A8 loc_81A8:                               ; CODE XREF: printf_parse+BC5↑j
.text:00000000000081A8                 cmp     dil, 9
.text:00000000000081AC                 jbe     loc_80FA
.text:00000000000081B2                 lea     rbx, [rdx-1]
.text:00000000000081B6                 cmp     rbx, 0FFFFFFFFFFFFFFFDh
.text:00000000000081BA                 ja      def_77B5        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:00000000000081C0                 mov     [r12+40h], rbx
.text:00000000000081C5                 lea     r11, [rsi+2]
.text:00000000000081C9                 jmp     loc_7A5D
.text:00000000000081CE ; ---------------------------------------------------------------------------
.text:00000000000081CE
.text:00000000000081CE loc_81CE:                               ; CODE XREF: printf_parse+AA0↑j
.text:00000000000081CE                 mov     rdi, rsi        ; size
.text:00000000000081D1                 call    _malloc         ; PIC mode
.text:00000000000081D6                 mov     rdx, [rsp+88h+src]
.text:00000000000081DB                 mov     rcx, rax
.text:00000000000081DE                 mov     r9, [rsp+88h+var_40]
.text:00000000000081E3                 mov     r10, [rsp+88h+var_48]
.text:00000000000081E8                 mov     r8, [rsp+88h+var_50]
.text:00000000000081ED                 mov     r11, [rsp+88h+var_58]
.text:00000000000081F2                 jmp     loc_8039
.text:00000000000081F7 ; ---------------------------------------------------------------------------
.text:00000000000081F7
.text:00000000000081F7 loc_81F7:                               ; CODE XREF: printf_parse+2DB↑j
.text:00000000000081F7                                         ; printf_parse+2F1↑j ...
.text:00000000000081F7                 mov     rcx, [r15+8]
.text:00000000000081FB
.text:00000000000081FB loc_81FB:                               ; CODE XREF: printf_parse+3E7↑j
.text:00000000000081FB                                         ; printf_parse+8AB↑j ...
.text:00000000000081FB                 cmp     [rsp+88h+src], rcx
.text:0000000000008200                 jnz     loc_8064
.text:0000000000008206                 jmp     loc_806C
.text:0000000000008206 ; ---------------------------------------------------------------------------
.text:000000000000820B                 align 10h
.text:0000000000008210
.text:0000000000008210 loc_8210:                               ; CODE XREF: printf_parse+ADA↑j
.text:0000000000008210                 mov     rsi, [rsp+88h+src] ; src
.text:0000000000008215                 shl     rax, 5
.text:0000000000008219                 mov     rdi, rcx        ; dest
.text:000000000000821C                 mov     rdx, rax        ; n
.text:000000000000821F                 mov     [rsp+88h+var_40], r9
.text:0000000000008224                 mov     [rsp+88h+var_48], r10
.text:0000000000008229                 mov     [rsp+88h+var_50], r8
.text:000000000000822E                 mov     [rsp+88h+var_58], r11
.text:0000000000008233                 call    _memcpy         ; PIC mode
.text:0000000000008238                 mov     r9, [rsp+88h+var_40]
.text:000000000000823D                 mov     rcx, rax
.text:0000000000008240                 mov     r10, [rsp+88h+var_48]
.text:0000000000008245                 mov     rax, [r15]
.text:0000000000008248                 mov     r8, [rsp+88h+var_50]
.text:000000000000824D                 mov     r11, [rsp+88h+var_58]
.text:0000000000008252                 jmp     loc_8050
.text:0000000000008257 ; ---------------------------------------------------------------------------
.text:0000000000008257
.text:0000000000008257 loc_8257:                               ; CODE XREF: printf_parse+42F↑j
.text:0000000000008257                                         ; printf_parse+ACC↑j
.text:0000000000008257                 mov     rcx, rdx
.text:000000000000825A                 jmp     short loc_81FB
.text:000000000000825A ; } // starts at 7570
.text:000000000000825A printf_parse    endp
.text:000000000000825A
.text:000000000000825A ; ---------------------------------------------------------------------------
.text:000000000000825C                 align 20h
.text:0000000000008260
.text:0000000000008260 ; =============== S U B R O U T I N E =======================================
.text:0000000000008260
.text:0000000000008260 ; Attributes: info_from_lumina
.text:0000000000008260
.text:0000000000008260 ; void _libc_csu_init(void)
.text:0000000000008260                 public __libc_csu_init
.text:0000000000008260 __libc_csu_init proc near               ; DATA XREF: start+16↑o
.text:0000000000008260 ; __unwind {
.text:0000000000008260                 push    r15
.text:0000000000008262                 push    r14
.text:0000000000008264                 mov     r15, rdx
.text:0000000000008267                 push    r13
.text:0000000000008269                 push    r12
.text:000000000000826B                 lea     r12, __frame_dummy_init_array_entry
.text:0000000000008272                 push    rbp
.text:0000000000008273                 lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:000000000000827A                 push    rbx
.text:000000000000827B                 mov     r13d, edi
.text:000000000000827E                 mov     r14, rsi
.text:0000000000008281                 sub     rbp, r12
.text:0000000000008284                 sub     rsp, 8
.text:0000000000008288                 sar     rbp, 3
.text:000000000000828C                 call    _init_proc
.text:0000000000008291                 test    rbp, rbp
.text:0000000000008294                 jz      short loc_82B6
.text:0000000000008296                 xor     ebx, ebx
.text:0000000000008298                 nop     dword ptr [rax+rax+00000000h]
.text:00000000000082A0
.text:00000000000082A0 loc_82A0:                               ; CODE XREF: __libc_csu_init+54↓j
.text:00000000000082A0                 mov     rdx, r15
.text:00000000000082A3                 mov     rsi, r14
.text:00000000000082A6                 mov     edi, r13d
.text:00000000000082A9                 call    ds:(__frame_dummy_init_array_entry - 20BBD0h)[r12+rbx*8]
.text:00000000000082AD                 add     rbx, 1
.text:00000000000082B1                 cmp     rbp, rbx
.text:00000000000082B4                 jnz     short loc_82A0
.text:00000000000082B6
.text:00000000000082B6 loc_82B6:                               ; CODE XREF: __libc_csu_init+34↑j
.text:00000000000082B6                 add     rsp, 8
.text:00000000000082BA                 pop     rbx
.text:00000000000082BB                 pop     rbp
.text:00000000000082BC                 pop     r12
.text:00000000000082BE                 pop     r13
.text:00000000000082C0                 pop     r14
.text:00000000000082C2                 pop     r15
.text:00000000000082C4                 retn
.text:00000000000082C4 ; } // starts at 8260
.text:00000000000082C4 __libc_csu_init endp
.text:00000000000082C4
.text:00000000000082C4 ; ---------------------------------------------------------------------------
.text:00000000000082C5                 align 10h
.text:00000000000082D0
.text:00000000000082D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000082D0
.text:00000000000082D0
.text:00000000000082D0 ; void _libc_csu_fini(void)
.text:00000000000082D0                 public __libc_csu_fini
.text:00000000000082D0 __libc_csu_fini proc near               ; DATA XREF: start+F↑o
.text:00000000000082D0 ; __unwind {
.text:00000000000082D0                 rep retn
.text:00000000000082D0 ; } // starts at 82D0
.text:00000000000082D0 __libc_csu_fini endp
.text:00000000000082D0
.text:00000000000082D0 ; ---------------------------------------------------------------------------
.text:00000000000082D2                 align 20h
.text:00000000000082E0
.text:00000000000082E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000082E0
.text:00000000000082E0
.text:00000000000082E0 atexit          proc near               ; CODE XREF: main+54↑p
.text:00000000000082E0 ; __unwind {
.text:00000000000082E0                 mov     rdx, cs:__dso_handle ; lpdso_handle
.text:00000000000082E7                 xor     esi, esi        ; obj
.text:00000000000082E9                 jmp     ___cxa_atexit
.text:00000000000082E9 ; } // starts at 82E0
.text:00000000000082E9 atexit          endp
.text:00000000000082E9
.text:00000000000082E9 _text           ends
.text:00000000000082E9
LOAD:00000000000082EE ; ===========================================================================
LOAD:00000000000082EE
LOAD:00000000000082EE ; Segment type: Pure code
LOAD:00000000000082EE ; Segment permissions: Read/Execute
LOAD:00000000000082EE LOAD            segment byte public 'CODE' use64
LOAD:00000000000082EE                 assume cs:LOAD
LOAD:00000000000082EE                 ;org 82EEh
LOAD:00000000000082EE                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000082EE                 align 10h
LOAD:00000000000082EE LOAD            ends
LOAD:00000000000082EE
.fini:00000000000082F0 ; ===========================================================================
.fini:00000000000082F0
.fini:00000000000082F0 ; Segment type: Pure code
.fini:00000000000082F0 ; Segment permissions: Read/Execute
.fini:00000000000082F0 _fini           segment dword public 'CODE' use64
.fini:00000000000082F0                 assume cs:_fini
.fini:00000000000082F0                 ;org 82F0h
.fini:00000000000082F0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:00000000000082F0
.fini:00000000000082F0 ; =============== S U B R O U T I N E =======================================
.fini:00000000000082F0
.fini:00000000000082F0
.fini:00000000000082F0                 public _term_proc
.fini:00000000000082F0 _term_proc      proc near
.fini:00000000000082F0                 sub     rsp, 8          ; _fini
.fini:00000000000082F4                 add     rsp, 8
.fini:00000000000082F8                 retn
.fini:00000000000082F8 _term_proc      endp
.fini:00000000000082F8
.fini:00000000000082F8 _fini           ends
.fini:00000000000082F8
LOAD:00000000000082F9 ; ===========================================================================
LOAD:00000000000082F9
LOAD:00000000000082F9 ; Segment type: Pure code
LOAD:00000000000082F9 ; Segment permissions: Read/Execute
LOAD:00000000000082F9 LOAD            segment byte public 'CODE' use64
LOAD:00000000000082F9                 assume cs:LOAD
LOAD:00000000000082F9                 ;org 82F9h
LOAD:00000000000082F9                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000082F9                 align 20h
LOAD:00000000000082F9 LOAD            ends
LOAD:00000000000082F9
.rodata:0000000000008300 ; ===========================================================================
.rodata:0000000000008300
.rodata:0000000000008300 ; Segment type: Pure data
.rodata:0000000000008300 ; Segment permissions: Read
.rodata:0000000000008300 _rodata         segment align_32 public 'CONST' use64
.rodata:0000000000008300                 assume cs:_rodata
.rodata:0000000000008300                 ;org 8300h
.rodata:0000000000008300                 public _IO_stdin_used
.rodata:0000000000008300 _IO_stdin_used  db    1
.rodata:0000000000008301                 db    0
.rodata:0000000000008302                 db    2
.rodata:0000000000008303                 db    0
.rodata:0000000000008304 unk_8304        db  21h ; !             ; DATA XREF: binop+27↑o
.rodata:0000000000008304                                         ; binary_operator:loc_1D09↑o
.rodata:0000000000008305 unk_8305        db  3Dh ; =             ; DATA XREF: binop+3↑o
.rodata:0000000000008306                 db    0
.rodata:0000000000008307 unk_8307        db  3Dh ; =             ; DATA XREF: binop+46↑o
.rodata:0000000000008308                 db  3Dh ; =
.rodata:0000000000008309                 db    0
.rodata:000000000000830A unk_830A        db  2Dh ; -             ; DATA XREF: binop+65↑o
.rodata:000000000000830B                 db  6Eh ; n
.rodata:000000000000830C                 db  74h ; t
.rodata:000000000000830D                 db    0
.rodata:000000000000830E unk_830E        db  2Dh ; -             ; DATA XREF: binop+84↑o
.rodata:000000000000830F                 db  6Fh ; o
.rodata:0000000000008310                 db  74h ; t
.rodata:0000000000008311                 db    0
.rodata:0000000000008312 unk_8312        db  2Dh ; -             ; DATA XREF: binop+A3↑o
.rodata:0000000000008313                 db  65h ; e
.rodata:0000000000008314                 db  66h ; f
.rodata:0000000000008315                 db    0
.rodata:0000000000008316 unk_8316        db  2Dh ; -             ; DATA XREF: binop+C2↑o
.rodata:0000000000008317                 db  65h ; e
.rodata:0000000000008318                 db  71h ; q
.rodata:0000000000008319                 db    0
.rodata:000000000000831A unk_831A        db  2Dh ; -             ; DATA XREF: binop+E1↑o
.rodata:000000000000831B                 db  6Eh ; n
.rodata:000000000000831C                 db  65h ; e
.rodata:000000000000831D                 db    0
.rodata:000000000000831E unk_831E        db  2Dh ; -             ; DATA XREF: binop+FC↑o
.rodata:000000000000831F                 db  6Ch ; l
.rodata:0000000000008320                 db  74h ; t
.rodata:0000000000008321                 db    0
.rodata:0000000000008322 unk_8322        db  2Dh ; -             ; DATA XREF: binop+117↑o
.rodata:0000000000008323                 db  6Ch ; l
.rodata:0000000000008324                 db  65h ; e
.rodata:0000000000008325                 db    0
.rodata:0000000000008326 unk_8326        db  2Dh ; -             ; DATA XREF: binop+132↑o
.rodata:0000000000008327                 db  67h ; g
.rodata:0000000000008328                 db  74h ; t
.rodata:0000000000008329                 db    0
.rodata:000000000000832A unk_832A        db  2Dh ; -             ; DATA XREF: binop+14D↑o
.rodata:000000000000832B                 db  67h ; g
.rodata:000000000000832C                 db  65h ; e
.rodata:000000000000832D                 db    0
.rodata:000000000000832E ; const char aInvalidInteger[]
.rodata:000000000000832E aInvalidInteger db 'invalid integer %s',0
.rodata:000000000000832E                                         ; DATA XREF: find_int+B1↑o
.rodata:0000000000008341 ; const char aMissingArgumen[]
.rodata:0000000000008341 aMissingArgumen db 'missing argument after %s',0
.rodata:0000000000008341                                         ; DATA XREF: beyond+19↑o
.rodata:000000000000835B aNtDoesNotAccep db '-nt does not accept -l',0
.rodata:000000000000835B                                         ; DATA XREF: binary_operator+564↑o
.rodata:0000000000008372 aEfDoesNotAccep db '-ef does not accept -l',0
.rodata:0000000000008372                                         ; DATA XREF: binary_operator+556↑o
.rodata:0000000000008389 ; const char aOtDoesNotAccep[]
.rodata:0000000000008389 aOtDoesNotAccep db '-ot does not accept -l',0
.rodata:0000000000008389                                         ; DATA XREF: binary_operator:loc_21A2↑o
.rodata:00000000000083A0 ; const char aSUnknownBinary[]
.rodata:00000000000083A0 aSUnknownBinary db '%s: unknown binary operator',0
.rodata:00000000000083A0                                         ; DATA XREF: binary_operator+432↑o
.rodata:00000000000083BC ; const char aSUnaryOperator[]
.rodata:00000000000083BC aSUnaryOperator db '%s: unary operator expected',0
.rodata:00000000000083BC                                         ; DATA XREF: unary_operator+58B↑o
.rodata:00000000000083D8 asc_83D8        db '!',0                ; DATA XREF: two_arguments+E↑o
.rodata:00000000000083D8                                         ; posixtest+2F↑o ...
.rodata:00000000000083DA asc_83DA        db '(',0                ; DATA XREF: posixtest:loc_2918↑o
.rodata:00000000000083DA                                         ; three_arguments:loc_2DC8↑o
.rodata:00000000000083DC ; const char aSExpected[]
.rodata:00000000000083DC aSExpected      db '%s expected',0      ; DATA XREF: or+3B6↑o
.rodata:00000000000083E8 ; const char aSExpectedFound[]
.rodata:00000000000083E8 aSExpectedFound db '%s expected, found %s',0
.rodata:00000000000083E8                                         ; DATA XREF: or+384↑o
.rodata:00000000000083FE aA              db '-a',0               ; DATA XREF: or+30↑o
.rodata:00000000000083FE                                         ; three_arguments:loc_2E18↑o
.rodata:0000000000008401 aO              db '-o',0               ; DATA XREF: or:loc_2C2E↑o
.rodata:0000000000008401                                         ; three_arguments+E2↑o
.rodata:0000000000008404 ; const char aSBinaryOperato[]
.rodata:0000000000008404 aSBinaryOperato db '%s: binary operator expected',0
.rodata:0000000000008404                                         ; DATA XREF: three_arguments+120↑o
.rodata:0000000000008421 ; const char aTestAndOr[]
.rodata:0000000000008421 aTestAndOr      db 'test and/or [',0    ; DATA XREF: usage+294↑o
.rodata:0000000000008421                                         ; main+14E↑o ...
.rodata:000000000000842F ; const char aSOnlineHelpS[]
.rodata:000000000000842F aSOnlineHelpS   db 0Ah                  ; DATA XREF: usage+2CF↑o
.rodata:000000000000842F                 db '%s online help: <%s>',0Ah,0
.rodata:0000000000008446 unk_8446        db  47h ; G             ; DATA XREF: main+139↑o
.rodata:0000000000008446                                         ; usage+2E9↑o ...
.rodata:0000000000008447                 db  4Eh ; N
.rodata:0000000000008448                 db  55h ; U
.rodata:0000000000008449                 db  20h
.rodata:000000000000844A ; const char domainname[]
.rodata:000000000000844A domainname      db 'coreutils',0        ; DATA XREF: main+2B↑o
.rodata:000000000000844A                                         ; main+37↑o
.rodata:0000000000008454 ; const char aEn[]
.rodata:0000000000008454 aEn             db 'en_',0              ; DATA XREF: usage+310↑o
.rodata:0000000000008458 ; const char aFullDocumentat[]
.rodata:0000000000008458 aFullDocumentat db 'Full documentation <%s%s>',0Ah,0
.rodata:0000000000008458                                         ; DATA XREF: usage:loc_31CC↑o
.rodata:0000000000008473 aTestInvocation db 'test invocation',0  ; DATA XREF: usage+33A↑o
.rodata:0000000000008473                                         ; usage+341↑o
.rodata:0000000000008483 ; const char dirname[]
.rodata:0000000000008483 dirname         db '/usr/local/share/locale',0
.rodata:0000000000008483                                         ; DATA XREF: main+24↑o
.rodata:000000000000849B ; const char aHelp[]
.rodata:000000000000849B aHelp           db '--help',0           ; DATA XREF: main+CB↑o
.rodata:00000000000084A2 ; const char aVersion[]
.rodata:00000000000084A2 aVersion        db '--version',0        ; DATA XREF: main+E2↑o
.rodata:00000000000084AC aMatthewBradbur db 'Matthew Bradburn',0 ; DATA XREF: main+140↑o
.rodata:00000000000084BD aKevinBraunsdor db 'Kevin Braunsdorf',0 ; DATA XREF: main+147↑o
.rodata:00000000000084CE ; const char s2[]
.rodata:00000000000084CE s2              db ']',0                ; DATA XREF: main+71↑o
.rodata:00000000000084CE                                         ; main+F7↑o ...
.rodata:00000000000084D0 ; const char msgid[]
.rodata:00000000000084D0 msgid           db 'missing %s',0       ; DATA XREF: main+16F↑o
.rodata:00000000000084DB aExtraArgumentS db 'extra argument %s',0
.rodata:00000000000084DB                                         ; DATA XREF: main+1AA↑o
.rodata:00000000000084ED                 align 10h
.rodata:00000000000084F0 jpt_222E        dd offset loc_26F0 - 84F0h, offset def_222E - 84F0h, offset def_222E - 84F0h
.rodata:00000000000084F0                                         ; DATA XREF: unary_operator+3D↑o
.rodata:00000000000084F0                                         ; unary_operator+47↑r
.rodata:00000000000084F0                 dd offset def_222E - 84F0h, offset def_222E - 84F0h, offset loc_26A8 - 84F0h ; jump table for switch statement
.rodata:00000000000084F0                 dd offset def_222E - 84F0h, offset loc_2650 - 84F0h, offset loc_2620 - 84F0h
.rodata:00000000000084F0                 dd offset def_222E - 84F0h, offset def_222E - 84F0h, offset def_222E - 84F0h
.rodata:00000000000084F0                 dd offset loc_25E0 - 84F0h, offset def_222E - 84F0h, offset def_222E - 84F0h
.rodata:00000000000084F0                 dd offset def_222E - 84F0h, offset def_222E - 84F0h, offset def_222E - 84F0h
.rodata:00000000000084F0                 dd offset def_222E - 84F0h, offset def_222E - 84F0h, offset def_222E - 84F0h
.rodata:00000000000084F0                 dd offset def_222E - 84F0h, offset def_222E - 84F0h, offset def_222E - 84F0h
.rodata:00000000000084F0                 dd offset def_222E - 84F0h, offset def_222E - 84F0h, offset def_222E - 84F0h
.rodata:00000000000084F0                 dd offset loc_25A0 - 84F0h, offset loc_2560 - 84F0h, offset loc_2520 - 84F0h
.rodata:00000000000084F0                 dd offset loc_24F0 - 84F0h, offset loc_24B0 - 84F0h, offset loc_2470 - 84F0h
.rodata:00000000000084F0                 dd offset loc_26A8 - 84F0h, offset def_222E - 84F0h, offset def_222E - 84F0h
.rodata:00000000000084F0                 dd offset loc_2430 - 84F0h, offset def_222E - 84F0h, offset def_222E - 84F0h
.rodata:00000000000084F0                 dd offset loc_2410 - 84F0h, offset def_222E - 84F0h, offset loc_23C8 - 84F0h
.rodata:00000000000084F0                 dd offset def_222E - 84F0h, offset loc_23A0 - 84F0h, offset loc_2368 - 84F0h
.rodata:00000000000084F0                 dd offset loc_22D8 - 84F0h, offset loc_22A0 - 84F0h, offset def_222E - 84F0h
.rodata:00000000000084F0                 dd offset loc_2340 - 84F0h, offset loc_2278 - 84F0h, offset def_222E - 84F0h
.rodata:00000000000084F0                 dd offset loc_2230 - 84F0h
.rodata:00000000000085C0 ; const char aTrySHelpForMor[]
.rodata:00000000000085C0 aTrySHelpForMor db 'Try ',27h,'%s --help',27h,' for more information.',0Ah,0
.rodata:00000000000085C0                                         ; DATA XREF: usage+A↑o
.rodata:00000000000085E7                 align 8
.rodata:00000000000085E8 ; const char aUsageTestExpre[]
.rodata:00000000000085E8 aUsageTestExpre db 'Usage: test EXPRESSION',0Ah
.rodata:00000000000085E8                                         ; DATA XREF: usage+4B↑o
.rodata:00000000000085E8                 db '  or:  test',0Ah
.rodata:00000000000085E8                 db '  or:  [ EXPRESSION ]',0Ah
.rodata:00000000000085E8                 db '  or:  [ ]',0Ah
.rodata:00000000000085E8                 db '  or:  [ OPTION',0Ah,0
.rodata:000000000000863D                 align 20h
.rodata:0000000000008640 ; const char aExitWithTheSta[]
.rodata:0000000000008640 aExitWithTheSta db 'Exit with the status determined by EXPRESSION.',0Ah
.rodata:0000000000008640                                         ; DATA XREF: usage+70↑o
.rodata:0000000000008640                 db 0Ah,0
.rodata:0000000000008671                 align 8
.rodata:0000000000008678 ; const char aHelpDisplayThi[]
.rodata:0000000000008678 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.rodata:0000000000008678                                         ; DATA XREF: usage+95↑o
.rodata:00000000000086A5                 align 8
.rodata:00000000000086A8 ; const char aVersionOutputV[]
.rodata:00000000000086A8 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.rodata:00000000000086A8                                         ; DATA XREF: usage+BA↑o
.rodata:00000000000086DE                 align 20h
.rodata:00000000000086E0 ; const char aAnOmittedExpre[]
.rodata:00000000000086E0 aAnOmittedExpre db 0Ah                  ; DATA XREF: usage+DF↑o
.rodata:00000000000086E0                 db 'An omitted EXPRESSION defaults to false.  Otherwise,',0Ah
.rodata:00000000000086E0                 db 'EXPRESSION is true or false and sets exit status.  It is one of:',0Ah
.rodata:00000000000086E0                 db 0
.rodata:0000000000008758 ; const char aExpressionExpr[]
.rodata:0000000000008758 aExpressionExpr db 0Ah                  ; DATA XREF: usage+104↑o
.rodata:0000000000008758                 db '  ( EXPRESSION )               EXPRESSION is true',0Ah
.rodata:0000000000008758                 db '  ! EXPRESSION                 EXPRESSION is false',0Ah
.rodata:0000000000008758                 db '  EXPRESSION1 -a EXPRESSION2   both EXPRESSION1 and EXPRESSION2 a'
.rodata:0000000000008758                 db 're true',0Ah
.rodata:0000000000008758                 db '  EXPRESSION1 -o EXPRESSION2   either EXPRESSION1 or EXPRESSION2 '
.rodata:0000000000008758                 db 'is true',0Ah,0
.rodata:0000000000008851                 align 8
.rodata:0000000000008858 ; const char aNStringTheLeng[]
.rodata:0000000000008858 aNStringTheLeng db 0Ah                  ; DATA XREF: usage+129↑o
.rodata:0000000000008858                 db '  -n STRING            the length of STRING is nonzero',0Ah
.rodata:0000000000008858                 db '  STRING               equivalent to -n STRING',0Ah
.rodata:0000000000008858                 db '  -z STRING            the length of STRING is zero',0Ah
.rodata:0000000000008858                 db '  STRING1 = STRING2    the strings are equal',0Ah
.rodata:0000000000008858                 db '  STRING1 != STRING2   the strings are not equal',0Ah,0
.rodata:0000000000008952                 align 8
.rodata:0000000000008958 ; const char aInteger1EqInte[]
.rodata:0000000000008958 aInteger1EqInte db 0Ah                  ; DATA XREF: usage+14E↑o
.rodata:0000000000008958                 db '  INTEGER1 -eq INTEGER2   INTEGER1 is equal to INTEGER2',0Ah
.rodata:0000000000008958                 db '  INTEGER1 -ge INTEGER2   INTEGER1 is greater than or equal to IN'
.rodata:0000000000008958                 db 'TEGER2',0Ah
.rodata:0000000000008958                 db '  INTEGER1 -gt INTEGER2   INTEGER1 is greater than INTEGER2',0Ah
.rodata:0000000000008958                 db '  INTEGER1 -le INTEGER2   INTEGER1 is less than or equal to INTEG'
.rodata:0000000000008958                 db 'ER2',0Ah
.rodata:0000000000008958                 db '  INTEGER1 -lt INTEGER2   INTEGER1 is less than INTEGER2',0Ah
.rodata:0000000000008958                 db '  INTEGER1 -ne INTEGER2   INTEGER1 is not equal to INTEGER2',0Ah,0
.rodata:0000000000008AD0 ; const char aFile1EfFile2Fi[]
.rodata:0000000000008AD0 aFile1EfFile2Fi db 0Ah                  ; DATA XREF: usage+173↑o
.rodata:0000000000008AD0                 db '  FILE1 -ef FILE2   FILE1 and FILE2 have the same device and inod'
.rodata:0000000000008AD0                 db 'e numbers',0Ah
.rodata:0000000000008AD0                 db '  FILE1 -nt FILE2   FILE1 is newer (modification date) than FILE2'
.rodata:0000000000008AD0                 db 0Ah
.rodata:0000000000008AD0                 db '  FILE1 -ot FILE2   FILE1 is older than FILE2',0Ah,0
.rodata:0000000000008B8D                 align 10h
.rodata:0000000000008B90 ; const char aBFileFileExist[]
.rodata:0000000000008B90 aBFileFileExist db 0Ah                  ; DATA XREF: usage+198↑o
.rodata:0000000000008B90                 db '  -b FILE     FILE exists and is block special',0Ah
.rodata:0000000000008B90                 db '  -c FILE     FILE exists and is character special',0Ah
.rodata:0000000000008B90                 db '  -d FILE     FILE exists and is a directory',0Ah
.rodata:0000000000008B90                 db '  -e FILE     FILE exists',0Ah,0
.rodata:0000000000008C3B                 align 20h
.rodata:0000000000008C40 ; const char aFFileFileExist[]
.rodata:0000000000008C40 aFFileFileExist db '  -f FILE     FILE exists and is a regular file',0Ah
.rodata:0000000000008C40                                         ; DATA XREF: usage+1BD↑o
.rodata:0000000000008C40                 db '  -g FILE     FILE exists and is set-group-ID',0Ah
.rodata:0000000000008C40                 db '  -G FILE     FILE exists and is owned by the effective group ID',0Ah
.rodata:0000000000008C40                 db '  -h FILE     FILE exists and is a symbolic link (same as -L)',0Ah
.rodata:0000000000008C40                 db '  -k FILE     FILE exists and has its sticky bit set',0Ah,0
.rodata:0000000000008D53                 align 8
.rodata:0000000000008D58 ; const char aLFileFileExist[]
.rodata:0000000000008D58 aLFileFileExist db '  -L FILE     FILE exists and is a symbolic link (same as -h)',0Ah
.rodata:0000000000008D58                                         ; DATA XREF: usage+1E2↑o
.rodata:0000000000008D58                 db '  -N FILE     FILE exists and has been modified since it was last'
.rodata:0000000000008D58                 db ' read',0Ah
.rodata:0000000000008D58                 db '  -O FILE     FILE exists and is owned by the effective user ID',0Ah
.rodata:0000000000008D58                 db '  -p FILE     FILE exists and is a named pipe',0Ah
.rodata:0000000000008D58                 db '  -r FILE     FILE exists and read permission is granted',0Ah
.rodata:0000000000008D58                 db '  -s FILE     FILE exists and has a size greater than zero',0Ah,0
.rodata:0000000000008EC0 ; const char aSFileFileExist[]
.rodata:0000000000008EC0 aSFileFileExist db '  -S FILE     FILE exists and is a socket',0Ah
.rodata:0000000000008EC0                                         ; DATA XREF: usage+207↑o
.rodata:0000000000008EC0                 db '  -t FD       file descriptor FD is opened on a terminal',0Ah
.rodata:0000000000008EC0                 db '  -u FILE     FILE exists and its set-user-ID bit is set',0Ah
.rodata:0000000000008EC0                 db '  -w FILE     FILE exists and write permission is granted',0Ah
.rodata:0000000000008EC0                 db '  -x FILE     FILE exists and execute (or search) permission is g'
.rodata:0000000000008EC0                 db 'ranted',0Ah,0
.rodata:0000000000008FDF                 align 20h
.rodata:0000000000008FE0 ; const char aExceptForHAndL[]
.rodata:0000000000008FE0 aExceptForHAndL db 0Ah                  ; DATA XREF: usage+22C↑o
.rodata:0000000000008FE0                 db 'Except for -h and -L, all FILE-related tests dereference symbolic'
.rodata:0000000000008FE0                 db ' links.',0Ah
.rodata:0000000000008FE0                 db 'Beware that parentheses need to be escaped (e.g., by backslashes)'
.rodata:0000000000008FE0                 db ' for shells.',0Ah
.rodata:0000000000008FE0                 db 'INTEGER may also be -l STRING, which evaluates to the length of S'
.rodata:0000000000008FE0                 db 'TRING.',0Ah,0
.rodata:00000000000090C1                 align 8
.rodata:00000000000090C8 ; const char aNoteBinaryAAnd[]
.rodata:00000000000090C8 aNoteBinaryAAnd db 0Ah                  ; DATA XREF: usage+251↑o
.rodata:00000000000090C8                 db 'NOTE: Binary -a and -o are inherently ambiguous.  Use ',27h,'test'
.rodata:00000000000090C8                 db ' EXPR1 && test',0Ah
.rodata:00000000000090C8                 db 'EXPR2',27h,' or ',27h,'test EXPR1 || test EXPR2',27h,' instead.',0Ah
.rodata:00000000000090C8                 db 0
.rodata:0000000000009142                 align 8
.rodata:0000000000009148 ; const char aNoteHonorsTheH[]
.rodata:0000000000009148 aNoteHonorsTheH db 0Ah                  ; DATA XREF: usage+276↑o
.rodata:0000000000009148                 db 'NOTE: [ honors the --help and --version options, but test does no'
.rodata:0000000000009148                 db 't.',0Ah
.rodata:0000000000009148                 db 'test treats each of those as it treats any other nonempty STRING.'
.rodata:0000000000009148                 db 0Ah,0
.rodata:00000000000091D0 ; const char aNoteYourShellM[]
.rodata:00000000000091D0 aNoteYourShellM db 0Ah                  ; DATA XREF: usage+2A7↑o
.rodata:00000000000091D0                 db 'NOTE: your shell may have its own version of %s, which usually su'
.rodata:00000000000091D0                 db 'persedes',0Ah
.rodata:00000000000091D0                 db 'the version described here.  Please refer to your shell',27h,'s d'
.rodata:00000000000091D0                 db 'ocumentation',0Ah
.rodata:00000000000091D0                 db 'for details about the options it supports.',0Ah,0
.rodata:000000000000928F                 align 10h
.rodata:0000000000009290 aHttpsWwwGnuOrg db 'https://www.gnu.org/software/coreutils/',0
.rodata:0000000000009290                                         ; DATA XREF: usage+2E2↑o
.rodata:0000000000009290                                         ; usage+354↑o ...
.rodata:00000000000092B8 ; const char aReportAnyTrans[]
.rodata:00000000000092B8 aReportAnyTrans db 'Report any translation bugs to <https://translationproject.org/te'
.rodata:00000000000092B8                                         ; DATA XREF: usage+3B3↑o
.rodata:00000000000092B8                 db 'am/>',0Ah,0
.rodata:00000000000092FF                 align 20h
.rodata:0000000000009300 ; const char aOrAvailableLoc[]
.rodata:0000000000009300 aOrAvailableLoc db 'or available locally via: info ',27h,'(coreutils) %s%s',27h,0Ah,0
.rodata:0000000000009300                                         ; DATA XREF: usage+378↑o
.rodata:0000000000009333 a831            db '8.31',0             ; DATA XREF: .data:Version↓o
.rodata:0000000000009338 ; const char aWriteError[]
.rodata:0000000000009338 aWriteError     db 'write error',0      ; DATA XREF: close_stdout:loc_32E3↑o
.rodata:0000000000009344 ; const char format[]
.rodata:0000000000009344 format          db '%s: %s',0           ; DATA XREF: close_stdout+6C↑o
.rodata:0000000000009344                                         ; close_stdout+8F↑o ...
.rodata:000000000000934B                 align 10h
.rodata:0000000000009350 aANullArgv0WasP db 'A NULL argv[0] was passed through an exec system call.',0Ah,0
.rodata:0000000000009350                                         ; DATA XREF: set_program_name+84↑o
.rodata:0000000000009388 aLibs           db '/.libs/',0          ; DATA XREF: set_program_name+2C↑o
.rodata:0000000000009390 aLt             db 'lt-',0              ; DATA XREF: set_program_name+44↑o
.rodata:0000000000009394 unk_9394        db 0E2h                 ; DATA XREF: gettext_quote+CE↑o
.rodata:0000000000009395                 db  80h
.rodata:0000000000009396                 db  98h
.rodata:0000000000009397                 db    0
.rodata:0000000000009398 unk_9398        db 0E2h                 ; DATA XREF: gettext_quote+D5↑o
.rodata:0000000000009399                 db  80h
.rodata:000000000000939A                 db  99h
.rodata:000000000000939B                 db    0
.rodata:000000000000939C unk_939C        db 0A1h                 ; DATA XREF: gettext_quote+74↑o
.rodata:000000000000939D                 db    7
.rodata:000000000000939E                 db  65h ; e
.rodata:000000000000939F                 db    0
.rodata:00000000000093A0 unk_93A0        db 0A1h                 ; DATA XREF: gettext_quote+7B↑o
.rodata:00000000000093A1                 db 0AFh
.rodata:00000000000093A2                 db    0
.rodata:00000000000093A3 unk_93A3        db  22h ; "             ; DATA XREF: gettext_quote:loc_3460↑o
.rodata:00000000000093A3                                         ; quotearg_buffer_restyled:loc_421B↑o ...
.rodata:00000000000093A4                 db    0
.rodata:00000000000093A5 ; const char asc_93A5[2]
.rodata:00000000000093A5 asc_93A5        db 27h,0                ; DATA XREF: gettext_quote+27↑o
.rodata:00000000000093A5                                         ; quotearg_buffer_restyled:loc_35E3↑o ...
.rodata:00000000000093A7 ; const char asc_93A7[2]
.rodata:00000000000093A7 asc_93A7        db '`',0                ; DATA XREF: quotearg_buffer_restyled+D9B↑o
.rodata:00000000000093A7                                         ; quotearg_buffer_restyled+DB6↑o
.rodata:00000000000093A9 aLiteral        db 'literal',0          ; DATA XREF: .data.rel.ro:quoting_style_args↓o
.rodata:00000000000093B1 aShell          db 'shell',0            ; DATA XREF: .data.rel.ro:000000000020BBE8↓o
.rodata:00000000000093B7 aShellAlways    db 'shell-always',0     ; DATA XREF: .data.rel.ro:000000000020BBF0↓o
.rodata:00000000000093C4 aShellEscape    db 'shell-escape',0     ; DATA XREF: .data.rel.ro:000000000020BBF8↓o
.rodata:00000000000093C4                                         ; .data.rel.ro:000000000020BC18↓o
.rodata:00000000000093D1 aShellEscapeAlw db 'shell-escape-always',0
.rodata:00000000000093D1                                         ; DATA XREF: .data.rel.ro:000000000020BC00↓o
.rodata:00000000000093E5 aC_1            db 'c',0                ; DATA XREF: .data.rel.ro:000000000020BC08↓o
.rodata:00000000000093E7 aCMaybe         db 'c-maybe',0          ; DATA XREF: .data.rel.ro:000000000020BC10↓o
.rodata:00000000000093EF aClocale        db 'clocale',0          ; DATA XREF: .data.rel.ro:000000000020BC28↓o
.rodata:00000000000093F7                 align 20h
.rodata:0000000000009400 jpt_35C1        dd offset loc_436A - 9400h
.rodata:0000000000009400                                         ; DATA XREF: quotearg_buffer_restyled+80↑o
.rodata:0000000000009400                                         ; quotearg_buffer_restyled+8A↑r
.rodata:0000000000009400                 dd offset loc_35C3 - 9400h ; jump table for switch statement
.rodata:0000000000009400                 dd offset loc_4598 - 9400h
.rodata:0000000000009400                 dd offset loc_43A4 - 9400h
.rodata:0000000000009400                 dd offset loc_4194 - 9400h
.rodata:0000000000009400                 dd offset loc_41F0 - 9400h
.rodata:0000000000009400                 dd offset loc_4245 - 9400h
.rodata:0000000000009400                 dd offset loc_428A - 9400h
.rodata:0000000000009400                 dd offset loc_42C4 - 9400h
.rodata:0000000000009400                 dd offset loc_42C4 - 9400h
.rodata:0000000000009400                 dd offset loc_42C4 - 9400h
.rodata:000000000000942C jpt_371E        dd offset loc_3940 - 942Ch, offset def_371E - 942Ch, offset def_371E - 942Ch
.rodata:000000000000942C                                         ; DATA XREF: quotearg_buffer_restyled+1DD↑o
.rodata:000000000000942C                                         ; quotearg_buffer_restyled+1E7↑r
.rodata:000000000000942C                 dd offset def_371E - 942Ch, offset def_371E - 942Ch, offset def_371E - 942Ch ; jump table for switch statement
.rodata:000000000000942C                 dd offset def_371E - 942Ch, offset loc_3980 - 942Ch, offset loc_3888 - 942Ch
.rodata:000000000000942C                 dd offset loc_3848 - 942Ch, offset loc_3A10 - 942Ch, offset loc_3A00 - 942Ch
.rodata:000000000000942C                 dd offset loc_39F0 - 942Ch, offset loc_39E0 - 942Ch, offset def_371E - 942Ch
.rodata:000000000000942C                 dd offset def_371E - 942Ch, offset def_371E - 942Ch, offset def_371E - 942Ch
.rodata:000000000000942C                 dd offset def_371E - 942Ch, offset def_371E - 942Ch, offset def_371E - 942Ch
.rodata:000000000000942C                 dd offset def_371E - 942Ch, offset def_371E - 942Ch, offset def_371E - 942Ch
.rodata:000000000000942C                 dd offset def_371E - 942Ch, offset def_371E - 942Ch, offset def_371E - 942Ch
.rodata:000000000000942C                 dd offset def_371E - 942Ch, offset def_371E - 942Ch, offset def_371E - 942Ch
.rodata:000000000000942C                 dd offset def_371E - 942Ch, offset def_371E - 942Ch, offset loc_39D0 - 942Ch
.rodata:000000000000942C                 dd offset loc_39C0 - 942Ch, offset loc_39C0 - 942Ch, offset loc_3990 - 942Ch
.rodata:000000000000942C                 dd offset loc_39C0 - 942Ch, offset loc_3968 - 942Ch, offset loc_39C0 - 942Ch
.rodata:000000000000942C                 dd offset loc_3823 - 942Ch, offset loc_39C0 - 942Ch, offset loc_39C0 - 942Ch
.rodata:000000000000942C                 dd offset loc_39C0 - 942Ch, offset loc_3968 - 942Ch, offset loc_3968 - 942Ch
.rodata:000000000000942C                 dd offset loc_3968 - 942Ch, offset loc_3968 - 942Ch, offset loc_3968 - 942Ch
.rodata:000000000000942C                 dd offset loc_3968 - 942Ch, offset loc_3968 - 942Ch, offset loc_3968 - 942Ch
.rodata:000000000000942C                 dd offset loc_3968 - 942Ch, offset loc_3968 - 942Ch, offset loc_3968 - 942Ch
.rodata:000000000000942C                 dd offset loc_3968 - 942Ch, offset loc_3968 - 942Ch, offset loc_3968 - 942Ch
.rodata:000000000000942C                 dd offset loc_3968 - 942Ch, offset loc_3968 - 942Ch, offset loc_39C0 - 942Ch
.rodata:000000000000942C                 dd offset loc_39C0 - 942Ch, offset loc_39C0 - 942Ch, offset loc_39C0 - 942Ch
.rodata:000000000000942C                 dd offset loc_37F3 - 942Ch, offset def_371E - 942Ch, offset loc_3968 - 942Ch
.rodata:000000000000942C                 dd offset loc_3968 - 942Ch, offset loc_3968 - 942Ch, offset loc_3968 - 942Ch
.rodata:000000000000942C                 dd offset loc_3968 - 942Ch, offset loc_3968 - 942Ch, offset loc_3968 - 942Ch
.rodata:000000000000942C                 dd offset loc_3968 - 942Ch, offset loc_3968 - 942Ch, offset loc_3968 - 942Ch
.rodata:000000000000942C                 dd offset loc_3968 - 942Ch, offset loc_3968 - 942Ch, offset loc_3968 - 942Ch
.rodata:000000000000942C                 dd offset loc_3968 - 942Ch, offset loc_3968 - 942Ch, offset loc_3968 - 942Ch
.rodata:000000000000942C                 dd offset loc_3968 - 942Ch, offset loc_3968 - 942Ch, offset loc_3968 - 942Ch
.rodata:000000000000942C                 dd offset loc_3968 - 942Ch, offset loc_3968 - 942Ch, offset loc_3968 - 942Ch
.rodata:000000000000942C                 dd offset loc_3968 - 942Ch, offset loc_3968 - 942Ch, offset loc_3968 - 942Ch
.rodata:000000000000942C                 dd offset loc_3968 - 942Ch, offset loc_39C0 - 942Ch, offset loc_3898 - 942Ch
.rodata:000000000000942C                 dd offset loc_3968 - 942Ch, offset loc_39C0 - 942Ch, offset loc_3968 - 942Ch
.rodata:000000000000942C                 dd offset loc_39C0 - 942Ch, offset loc_3968 - 942Ch, offset loc_3968 - 942Ch
.rodata:000000000000942C                 dd offset loc_3968 - 942Ch, offset loc_3968 - 942Ch, offset loc_3968 - 942Ch
.rodata:000000000000942C                 dd offset loc_3968 - 942Ch, offset loc_3968 - 942Ch, offset loc_3968 - 942Ch
.rodata:000000000000942C                 dd offset loc_3968 - 942Ch, offset loc_3968 - 942Ch, offset loc_3968 - 942Ch
.rodata:000000000000942C                 dd offset loc_3968 - 942Ch, offset loc_3968 - 942Ch, offset loc_3968 - 942Ch
.rodata:000000000000942C                 dd offset loc_3968 - 942Ch, offset loc_3968 - 942Ch, offset loc_3968 - 942Ch
.rodata:000000000000942C                 dd offset loc_3968 - 942Ch, offset loc_3968 - 942Ch, offset loc_3968 - 942Ch
.rodata:000000000000942C                 dd offset loc_3968 - 942Ch, offset loc_3968 - 942Ch, offset loc_3968 - 942Ch
.rodata:000000000000942C                 dd offset loc_3968 - 942Ch, offset loc_3968 - 942Ch, offset loc_3968 - 942Ch
.rodata:000000000000942C                 dd offset loc_3723 - 942Ch, offset loc_39C0 - 942Ch, offset loc_3723 - 942Ch
.rodata:000000000000942C                 dd offset loc_3990 - 942Ch
.rodata:0000000000009628 jpt_3AAA        dd offset loc_3B10 - 9628h, offset def_3AAA - 9628h, offset def_3AAA - 9628h
.rodata:0000000000009628                                         ; DATA XREF: quotearg_buffer_restyled+569↑o
.rodata:0000000000009628                                         ; quotearg_buffer_restyled+573↑r
.rodata:0000000000009628                 dd offset def_3AAA - 9628h, offset def_3AAA - 9628h, offset def_3AAA - 9628h ; jump table for switch statement
.rodata:0000000000009628                 dd offset def_3AAA - 9628h, offset loc_3B00 - 9628h, offset loc_3C50 - 9628h
.rodata:0000000000009628                 dd offset loc_3C38 - 9628h, offset loc_3AE8 - 9628h, offset loc_3C28 - 9628h
.rodata:0000000000009628                 dd offset loc_3AD0 - 9628h, offset loc_3C10 - 9628h, offset def_3AAA - 9628h
.rodata:0000000000009628                 dd offset def_3AAA - 9628h, offset def_3AAA - 9628h, offset def_3AAA - 9628h
.rodata:0000000000009628                 dd offset def_3AAA - 9628h, offset def_3AAA - 9628h, offset def_3AAA - 9628h
.rodata:0000000000009628                 dd offset def_3AAA - 9628h, offset def_3AAA - 9628h, offset def_3AAA - 9628h
.rodata:0000000000009628                 dd offset def_3AAA - 9628h, offset def_3AAA - 9628h, offset def_3AAA - 9628h
.rodata:0000000000009628                 dd offset def_3AAA - 9628h, offset def_3AAA - 9628h, offset def_3AAA - 9628h
.rodata:0000000000009628                 dd offset def_3AAA - 9628h, offset def_3AAA - 9628h, offset loc_3BF8 - 9628h
.rodata:0000000000009628                 dd offset loc_3BE0 - 9628h, offset loc_3BE0 - 9628h, offset loc_3BC8 - 9628h
.rodata:0000000000009628                 dd offset loc_3BE0 - 9628h, offset loc_3BB0 - 9628h, offset loc_3BE0 - 9628h
.rodata:0000000000009628                 dd offset loc_3820 - 9628h, offset loc_3BE0 - 9628h, offset loc_3BE0 - 9628h
.rodata:0000000000009628                 dd offset loc_3BE0 - 9628h, offset loc_3BB0 - 9628h, offset loc_3BB0 - 9628h
.rodata:0000000000009628                 dd offset loc_3BB0 - 9628h, offset loc_3BB0 - 9628h, offset loc_3BB0 - 9628h
.rodata:0000000000009628                 dd offset loc_3BB0 - 9628h, offset loc_3BB0 - 9628h, offset loc_3BB0 - 9628h
.rodata:0000000000009628                 dd offset loc_3BB0 - 9628h, offset loc_3BB0 - 9628h, offset loc_3BB0 - 9628h
.rodata:0000000000009628                 dd offset loc_3BB0 - 9628h, offset loc_3BB0 - 9628h, offset loc_3BB0 - 9628h
.rodata:0000000000009628                 dd offset loc_3BB0 - 9628h, offset loc_3BB0 - 9628h, offset loc_3BE0 - 9628h
.rodata:0000000000009628                 dd offset loc_3BE0 - 9628h, offset loc_3BE0 - 9628h, offset loc_3BE0 - 9628h
.rodata:0000000000009628                 dd offset loc_37F0 - 9628h, offset def_3AAA - 9628h, offset loc_3BB0 - 9628h
.rodata:0000000000009628                 dd offset loc_3BB0 - 9628h, offset loc_3BB0 - 9628h, offset loc_3BB0 - 9628h
.rodata:0000000000009628                 dd offset loc_3BB0 - 9628h, offset loc_3BB0 - 9628h, offset loc_3BB0 - 9628h
.rodata:0000000000009628                 dd offset loc_3BB0 - 9628h, offset loc_3BB0 - 9628h, offset loc_3BB0 - 9628h
.rodata:0000000000009628                 dd offset loc_3BB0 - 9628h, offset loc_3BB0 - 9628h, offset loc_3BB0 - 9628h
.rodata:0000000000009628                 dd offset loc_3BB0 - 9628h, offset loc_3BB0 - 9628h, offset loc_3BB0 - 9628h
.rodata:0000000000009628                 dd offset loc_3BB0 - 9628h, offset loc_3BB0 - 9628h, offset loc_3BB0 - 9628h
.rodata:0000000000009628                 dd offset loc_3BB0 - 9628h, offset loc_3BB0 - 9628h, offset loc_3BB0 - 9628h
.rodata:0000000000009628                 dd offset loc_3BB0 - 9628h, offset loc_3BB0 - 9628h, offset loc_3BB0 - 9628h
.rodata:0000000000009628                 dd offset loc_3BB0 - 9628h, offset loc_3BE0 - 9628h, offset loc_3AB0 - 9628h
.rodata:0000000000009628                 dd offset loc_3BB0 - 9628h, offset loc_3BE0 - 9628h, offset loc_3BB0 - 9628h
.rodata:0000000000009628                 dd offset loc_3BE0 - 9628h, offset loc_3BB0 - 9628h, offset loc_3BB0 - 9628h
.rodata:0000000000009628                 dd offset loc_3BB0 - 9628h, offset loc_3BB0 - 9628h, offset loc_3BB0 - 9628h
.rodata:0000000000009628                 dd offset loc_3BB0 - 9628h, offset loc_3BB0 - 9628h, offset loc_3BB0 - 9628h
.rodata:0000000000009628                 dd offset loc_3BB0 - 9628h, offset loc_3BB0 - 9628h, offset loc_3BB0 - 9628h
.rodata:0000000000009628                 dd offset loc_3BB0 - 9628h, offset loc_3BB0 - 9628h, offset loc_3BB0 - 9628h
.rodata:0000000000009628                 dd offset loc_3BB0 - 9628h, offset loc_3BB0 - 9628h, offset loc_3BB0 - 9628h
.rodata:0000000000009628                 dd offset loc_3BB0 - 9628h, offset loc_3BB0 - 9628h, offset loc_3BB0 - 9628h
.rodata:0000000000009628                 dd offset loc_3BB0 - 9628h, offset loc_3BB0 - 9628h, offset loc_3BB0 - 9628h
.rodata:0000000000009628                 dd offset loc_3BB0 - 9628h, offset loc_3BB0 - 9628h, offset loc_3BB0 - 9628h
.rodata:0000000000009628                 dd offset loc_3720 - 9628h, offset loc_3BE0 - 9628h, offset loc_3720 - 9628h
.rodata:0000000000009628                 dd offset loc_3BC8 - 9628h
.rodata:0000000000009824                 align 20h
.rodata:0000000000009840                 public quoting_style_vals
.rodata:0000000000009840 quoting_style_vals db    0
.rodata:0000000000009841                 db    0
.rodata:0000000000009842                 db    0
.rodata:0000000000009843                 db    0
.rodata:0000000000009844                 db    1
.rodata:0000000000009845                 db    0
.rodata:0000000000009846                 db    0
.rodata:0000000000009847                 db    0
.rodata:0000000000009848                 db    2
.rodata:0000000000009849                 db    0
.rodata:000000000000984A                 db    0
.rodata:000000000000984B                 db    0
.rodata:000000000000984C                 db    3
.rodata:000000000000984D                 db    0
.rodata:000000000000984E                 db    0
.rodata:000000000000984F                 db    0
.rodata:0000000000009850                 db    4
.rodata:0000000000009851                 db    0
.rodata:0000000000009852                 db    0
.rodata:0000000000009853                 db    0
.rodata:0000000000009854                 db    5
.rodata:0000000000009855                 db    0
.rodata:0000000000009856                 db    0
.rodata:0000000000009857                 db    0
.rodata:0000000000009858                 db    6
.rodata:0000000000009859                 db    0
.rodata:000000000000985A                 db    0
.rodata:000000000000985B                 db    0
.rodata:000000000000985C                 db    7
.rodata:000000000000985D                 db    0
.rodata:000000000000985E                 db    0
.rodata:000000000000985F                 db    0
.rodata:0000000000009860                 db    8
.rodata:0000000000009861                 db    0
.rodata:0000000000009862                 db    0
.rodata:0000000000009863                 db    0
.rodata:0000000000009864                 db    9
.rodata:0000000000009865                 db    0
.rodata:0000000000009866                 db    0
.rodata:0000000000009867                 db    0
.rodata:0000000000009868 ; const char aUnableToDispla[]
.rodata:0000000000009868 aUnableToDispla db 'unable to display error message',0
.rodata:0000000000009868                                         ; DATA XREF: verror_at_line:loc_5407↑o
.rodata:0000000000009888 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: version_etc_arn+23↑o
.rodata:0000000000009894 aSS_0           db '%s %s',0Ah,0        ; DATA XREF: version_etc_arn+13E↑o
.rodata:000000000000989B ; const char aC_0[]
.rodata:000000000000989B aC_0            db '(C)',0              ; DATA XREF: version_etc_arn:loc_548C↑o
.rodata:000000000000989B                                         ; posixtest+108↑o ...
.rodata:000000000000989F ; const char aWrittenByS[]
.rodata:000000000000989F aWrittenByS     db 'Written by %s.',0Ah,0
.rodata:000000000000989F                                         ; DATA XREF: version_etc_arn+1BB↑o
.rodata:00000000000098AF ; const char aWrittenBySAndS[]
.rodata:00000000000098AF aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.rodata:00000000000098AF                                         ; DATA XREF: version_etc_arn+1FC↑o
.rodata:00000000000098C6 ; const char aWrittenBySSAnd[]
.rodata:00000000000098C6 aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.rodata:00000000000098C6                                         ; DATA XREF: version_etc_arn+248↑o
.rodata:00000000000098E2 ; const char aReportBugsToS[]
.rodata:00000000000098E2 aReportBugsToS  db 0Ah                  ; DATA XREF: emit_bug_reporting_address+1↑o
.rodata:00000000000098E2                 db 'Report bugs to: %s',0Ah,0
.rodata:00000000000098F7 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.rodata:00000000000098F7                                         ; DATA XREF: emit_bug_reporting_address+14↑o
.rodata:000000000000990D ; const char aSHomePageS[]
.rodata:000000000000990D aSHomePageS     db '%s home page: <%s>',0Ah,0
.rodata:000000000000990D                                         ; DATA XREF: emit_bug_reporting_address+2A↑o
.rodata:0000000000009921                 align 8
.rodata:0000000000009928 ; const char aLicenseGplv3Gn[]
.rodata:0000000000009928 aLicenseGplv3Gn db 0Ah                  ; DATA XREF: version_etc_arn+6E↑o
.rodata:0000000000009928                 db 'License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licen'
.rodata:0000000000009928                 db 'ses/gpl.html>.',0Ah
.rodata:0000000000009928                 db 'This is free software: you are free to change and redistribute it'
.rodata:0000000000009928                 db '.',0Ah
.rodata:0000000000009928                 db 'There is NO WARRANTY, to the extent permitted by law.',0Ah
.rodata:0000000000009928                 db 0Ah,0
.rodata:00000000000099F4                 align 8
.rodata:00000000000099F8 ; const char aWrittenBySSSAn[]
.rodata:00000000000099F8 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000099F8                                         ; DATA XREF: version_etc_arn:loc_56E0↑o
.rodata:00000000000099F8                 db 'and %s.',0Ah,0
.rodata:0000000000009A18 ; const char aWrittenBySSSSA[]
.rodata:0000000000009A18 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000009A18                                         ; DATA XREF: version_etc_arn+2EC↑o
.rodata:0000000000009A18                 db '%s, and %s.',0Ah,0
.rodata:0000000000009A3C                 align 20h
.rodata:0000000000009A40 ; const char aWrittenBySSSSS_1[]
.rodata:0000000000009A40 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000009A40                                         ; DATA XREF: version_etc_arn+320↑o
.rodata:0000000000009A40                 db '%s, %s, and %s.',0Ah,0
.rodata:0000000000009A68 ; const char aWrittenBySSSSS_2[]
.rodata:0000000000009A68 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000009A68                                         ; DATA XREF: version_etc_arn+388↑o
.rodata:0000000000009A68                 db '%s, %s, %s, and %s.',0Ah,0
.rodata:0000000000009A94                 align 8
.rodata:0000000000009A98 ; const char aWrittenBySSSSS[]
.rodata:0000000000009A98 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000009A98                                         ; DATA XREF: version_etc_arn+B8↑o
.rodata:0000000000009A98                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000009A98                 db 'and %s.',0Ah,0
.rodata:0000000000009AC8 ; const char aWrittenBySSSSS_0[]
.rodata:0000000000009AC8 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000009AC8                                         ; DATA XREF: version_etc_arn+168↑o
.rodata:0000000000009AC8                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000009AC8                 db '%s, and %s.',0Ah,0
.rodata:0000000000009AFC                 align 20h
.rodata:0000000000009B00 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000009B00                                         ; DATA XREF: version_etc_arn+3E5↑o
.rodata:0000000000009B00                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000009B00                 db '%s, %s, and others.',0Ah,0
.rodata:0000000000009B3C                 align 20h
.rodata:0000000000009B40 ; const char aGeneralHelpUsi[]
.rodata:0000000000009B40 aGeneralHelpUsi db 'General help using GNU software: <https://www.gnu.org/gethelp/>',0Ah
.rodata:0000000000009B40                                         ; DATA XREF: emit_bug_reporting_address+61↑o
.rodata:0000000000009B40                 db 0
.rodata:0000000000009B81                 align 8
.rodata:0000000000009B88 jpt_54F4        dd offset loc_5576 - 9B88h
.rodata:0000000000009B88                                         ; DATA XREF: version_etc_arn+96↑o
.rodata:0000000000009B88                                         ; version_etc_arn+9D↑r
.rodata:0000000000009B88                 dd offset loc_5608 - 9B88h ; jump table for switch statement
.rodata:0000000000009B88                 dd offset loc_5648 - 9B88h
.rodata:0000000000009B88                 dd offset loc_5690 - 9B88h
.rodata:0000000000009B88                 dd offset loc_56E0 - 9B88h
.rodata:0000000000009B88                 dd offset loc_5738 - 9B88h
.rodata:0000000000009B88                 dd offset loc_5768 - 9B88h
.rodata:0000000000009B88                 dd offset loc_57D0 - 9B88h
.rodata:0000000000009B88                 dd offset loc_5500 - 9B88h
.rodata:0000000000009B88                 dd offset loc_55B0 - 9B88h
.rodata:0000000000009BB0                 align 20h
.rodata:0000000000009BC0                 public version_etc_copyright
.rodata:0000000000009BC0 version_etc_copyright db 'Copyright %s %d Free Software Foundation, Inc.',0
.rodata:0000000000009BC0                                         ; DATA XREF: version_etc_arn+4F↑o
.rodata:0000000000009BEF ; const char aMemoryExhauste[]
.rodata:0000000000009BEF aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: xalloc_die↑o
.rodata:0000000000009C00 aC              db 'C',0                ; DATA XREF: hard_locale+18↑o
.rodata:0000000000009C02 aPosix          db 'POSIX',0            ; DATA XREF: hard_locale:loc_60D0↑o
.rodata:0000000000009C08 aAscii          db 'ASCII',0            ; DATA XREF: locale_charset+16↑o
.rodata:0000000000009C08                                         ; locale_charset:loc_6120↑o
.rodata:0000000000009C0E                 align 10h
.rodata:0000000000009C10 jpt_67AB        dd offset def_67AB - 9C10h
.rodata:0000000000009C10                                         ; DATA XREF: vasnprintf+54D↑o
.rodata:0000000000009C10                                         ; vasnprintf+554↑r
.rodata:0000000000009C10                 dd offset loc_6C10 - 9C10h ; jump table for switch statement
.rodata:0000000000009C10                 dd offset loc_6BE0 - 9C10h
.rodata:0000000000009C10                 dd offset loc_6B58 - 9C10h
.rodata:0000000000009C10                 dd offset loc_6B18 - 9C10h
.rodata:0000000000009C10                 dd offset loc_68E8 - 9C10h
.rodata:0000000000009C10                 dd offset loc_68E8 - 9C10h
.rodata:0000000000009C10                 dd offset loc_67B0 - 9C10h
.rodata:0000000000009C10                 dd offset loc_67B0 - 9C10h
.rodata:0000000000009C10                 dd offset loc_67B0 - 9C10h
.rodata:0000000000009C10                 dd offset loc_67B0 - 9C10h
.rodata:0000000000009C10                 dd offset loc_6A98 - 9C10h
.rodata:0000000000009C10                 dd offset loc_6A10 - 9C10h
.rodata:0000000000009C10                 dd offset loc_68E8 - 9C10h
.rodata:0000000000009C10                 dd offset loc_68E8 - 9C10h
.rodata:0000000000009C10                 dd offset loc_67B0 - 9C10h
.rodata:0000000000009C10                 dd offset loc_67B0 - 9C10h
.rodata:0000000000009C10                 dd offset loc_67B0 - 9C10h
.rodata:0000000000009C58 jpt_6D50        dd offset loc_6FC0 - 9C58h
.rodata:0000000000009C58                                         ; DATA XREF: vasnprintf+AEE↑o
.rodata:0000000000009C58                                         ; vasnprintf+AF9↑r
.rodata:0000000000009C58                 dd offset loc_6FE0 - 9C58h ; jump table for switch statement
.rodata:0000000000009C58                 dd offset loc_6FD0 - 9C58h
.rodata:0000000000009C58                 dd offset loc_6E90 - 9C58h
.rodata:0000000000009C58                 dd offset loc_6E90 - 9C58h
.rodata:0000000000009C6C aNull           db '(NULL)',0           ; DATA XREF: printf_fetchargs+18↑o
.rodata:0000000000009C73                 align 20h
.rodata:0000000000009C80 jpt_73A6        dd offset def_73A6 - 9C80h
.rodata:0000000000009C80                                         ; DATA XREF: printf_fetchargs+A↑o
.rodata:0000000000009C80                                         ; printf_fetchargs+2F↑r
.rodata:0000000000009C80                 dd offset loc_742C - 9C80h ; jump table for switch statement
.rodata:0000000000009C80                 dd offset loc_742C - 9C80h
.rodata:0000000000009C80                 dd offset loc_744E - 9C80h
.rodata:0000000000009C80                 dd offset loc_744E - 9C80h
.rodata:0000000000009C80                 dd offset loc_740A - 9C80h
.rodata:0000000000009C80                 dd offset loc_740A - 9C80h
.rodata:0000000000009C80                 dd offset loc_73E6 - 9C80h
.rodata:0000000000009C80                 dd offset loc_73E6 - 9C80h
.rodata:0000000000009C80                 dd offset loc_73E6 - 9C80h
.rodata:0000000000009C80                 dd offset loc_73E6 - 9C80h
.rodata:0000000000009C80                 dd offset loc_74A2 - 9C80h
.rodata:0000000000009C80                 dd offset loc_73B0 - 9C80h
.rodata:0000000000009C80                 dd offset loc_740A - 9C80h
.rodata:0000000000009C80                 dd offset loc_740A - 9C80h
.rodata:0000000000009C80                 dd offset loc_7474 - 9C80h
.rodata:0000000000009C80                 dd offset loc_74D0 - 9C80h
.rodata:0000000000009C80                 dd offset loc_73E6 - 9C80h
.rodata:0000000000009C80                 dd offset loc_73E6 - 9C80h
.rodata:0000000000009C80                 dd offset loc_73E6 - 9C80h
.rodata:0000000000009C80                 dd offset loc_73E6 - 9C80h
.rodata:0000000000009C80                 dd offset loc_73E6 - 9C80h
.rodata:0000000000009C80                 dd offset loc_73E6 - 9C80h
.rodata:0000000000009CDC                 align 20h
.rodata:0000000000009CE0 wide_null_string_2696 db  28h ; (       ; DATA XREF: printf_fetchargs+11↑o
.rodata:0000000000009CE1                 db    0
.rodata:0000000000009CE2                 db    0
.rodata:0000000000009CE3                 db    0
.rodata:0000000000009CE4                 db  4Eh ; N
.rodata:0000000000009CE5                 db    0
.rodata:0000000000009CE6                 db    0
.rodata:0000000000009CE7                 db    0
.rodata:0000000000009CE8                 db  55h ; U
.rodata:0000000000009CE9                 db    0
.rodata:0000000000009CEA                 db    0
.rodata:0000000000009CEB                 db    0
.rodata:0000000000009CEC                 db  4Ch ; L
.rodata:0000000000009CED                 db    0
.rodata:0000000000009CEE                 db    0
.rodata:0000000000009CEF                 db    0
.rodata:0000000000009CF0                 db  4Ch ; L
.rodata:0000000000009CF1                 db    0
.rodata:0000000000009CF2                 db    0
.rodata:0000000000009CF3                 db    0
.rodata:0000000000009CF4                 db  29h ; )
.rodata:0000000000009CF5                 db    0
.rodata:0000000000009CF6                 db    0
.rodata:0000000000009CF7                 db    0
.rodata:0000000000009CF8                 db    0
.rodata:0000000000009CF9                 db    0
.rodata:0000000000009CFA                 db    0
.rodata:0000000000009CFB                 db    0
.rodata:0000000000009CFC jpt_77B5        dd offset loc_782B - 9CFCh, offset def_77B5 - 9CFCh, offset def_77B5 - 9CFCh
.rodata:0000000000009CFC                                         ; DATA XREF: printf_parse+234↑o
.rodata:0000000000009CFC                                         ; printf_parse+23E↑r
.rodata:0000000000009CFC                 dd offset def_77B5 - 9CFCh, offset def_77B5 - 9CFCh, offset def_77B5 - 9CFCh ; jump table for switch statement
.rodata:0000000000009CFC                 dd offset def_77B5 - 9CFCh, offset def_77B5 - 9CFCh, offset def_77B5 - 9CFCh
.rodata:0000000000009CFC                 dd offset def_77B5 - 9CFCh, offset def_77B5 - 9CFCh, offset def_77B5 - 9CFCh
.rodata:0000000000009CFC                 dd offset def_77B5 - 9CFCh, offset def_77B5 - 9CFCh, offset def_77B5 - 9CFCh
.rodata:0000000000009CFC                 dd offset def_77B5 - 9CFCh, offset def_77B5 - 9CFCh, offset def_77B5 - 9CFCh
.rodata:0000000000009CFC                 dd offset def_77B5 - 9CFCh, offset def_77B5 - 9CFCh, offset def_77B5 - 9CFCh
.rodata:0000000000009CFC                 dd offset def_77B5 - 9CFCh, offset def_77B5 - 9CFCh, offset def_77B5 - 9CFCh
.rodata:0000000000009CFC                 dd offset def_77B5 - 9CFCh, offset def_77B5 - 9CFCh, offset def_77B5 - 9CFCh
.rodata:0000000000009CFC                 dd offset def_77B5 - 9CFCh, offset loc_7D2B - 9CFCh, offset def_77B5 - 9CFCh
.rodata:0000000000009CFC                 dd offset loc_7D4C - 9CFCh, offset def_77B5 - 9CFCh, offset loc_7D2B - 9CFCh
.rodata:0000000000009CFC                 dd offset loc_7D2B - 9CFCh, offset loc_7D2B - 9CFCh, offset def_77B5 - 9CFCh
.rodata:0000000000009CFC                 dd offset def_77B5 - 9CFCh, offset def_77B5 - 9CFCh, offset def_77B5 - 9CFCh
.rodata:0000000000009CFC                 dd offset def_77B5 - 9CFCh, offset def_77B5 - 9CFCh, offset def_77B5 - 9CFCh
.rodata:0000000000009CFC                 dd offset def_77B5 - 9CFCh, offset def_77B5 - 9CFCh, offset def_77B5 - 9CFCh
.rodata:0000000000009CFC                 dd offset def_77B5 - 9CFCh, offset loc_77B7 - 9CFCh, offset def_77B5 - 9CFCh
.rodata:0000000000009CFC                 dd offset def_77B5 - 9CFCh, offset def_77B5 - 9CFCh, offset def_77B5 - 9CFCh
.rodata:0000000000009CFC                 dd offset loc_7D5C - 9CFCh, offset def_77B5 - 9CFCh, offset def_77B5 - 9CFCh
.rodata:0000000000009CFC                 dd offset def_77B5 - 9CFCh, offset def_77B5 - 9CFCh, offset def_77B5 - 9CFCh
.rodata:0000000000009CFC                 dd offset def_77B5 - 9CFCh, offset def_77B5 - 9CFCh, offset def_77B5 - 9CFCh
.rodata:0000000000009CFC                 dd offset loc_7D2B - 9CFCh, offset def_77B5 - 9CFCh, offset loc_7CB8 - 9CFCh
.rodata:0000000000009CFC                 dd offset loc_7CCB - 9CFCh, offset loc_7D2B - 9CFCh, offset loc_7D2B - 9CFCh
.rodata:0000000000009CFC                 dd offset loc_7D2B - 9CFCh, offset def_77B5 - 9CFCh, offset loc_7CCB - 9CFCh
.rodata:0000000000009CFC                 dd offset def_77B5 - 9CFCh, offset def_77B5 - 9CFCh, offset def_77B5 - 9CFCh
.rodata:0000000000009CFC                 dd offset def_77B5 - 9CFCh, offset loc_7C6C - 9CFCh, offset loc_7D5C - 9CFCh
.rodata:0000000000009CFC                 dd offset loc_7DB0 - 9CFCh, offset def_77B5 - 9CFCh, offset def_77B5 - 9CFCh
.rodata:0000000000009CFC                 dd offset loc_7D18 - 9CFCh, offset def_77B5 - 9CFCh, offset loc_7D5C - 9CFCh
.rodata:0000000000009CFC                 dd offset def_77B5 - 9CFCh, offset def_77B5 - 9CFCh, offset loc_7D5C - 9CFCh
.rodata:0000000000009CFC _rodata         ends
.rodata:0000000000009CFC
.eh_frame_hdr:0000000000009E4C ; ===========================================================================
.eh_frame_hdr:0000000000009E4C
.eh_frame_hdr:0000000000009E4C ; Segment type: Pure data
.eh_frame_hdr:0000000000009E4C ; Segment permissions: Read
.eh_frame_hdr:0000000000009E4C _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:0000000000009E4C                 assume cs:_eh_frame_hdr
.eh_frame_hdr:0000000000009E4C                 ;org 9E4Ch
.eh_frame_hdr:0000000000009E4C __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000000001A0↑o
.eh_frame_hdr:0000000000009E4D                 db  1Bh
.eh_frame_hdr:0000000000009E4E                 db    3
.eh_frame_hdr:0000000000009E4F                 db  3Bh ; ;
.eh_frame_hdr:0000000000009E50                 db 0E0h
.eh_frame_hdr:0000000000009E51                 db    2
.eh_frame_hdr:0000000000009E52                 db    0
.eh_frame_hdr:0000000000009E53                 db    0
.eh_frame_hdr:0000000000009E54                 db  5Bh ; [
.eh_frame_hdr:0000000000009E55                 db    0
.eh_frame_hdr:0000000000009E56                 db    0
.eh_frame_hdr:0000000000009E57                 db    0
.eh_frame_hdr:0000000000009E58                 db 0C4h
.eh_frame_hdr:0000000000009E59                 db  74h ; t
.eh_frame_hdr:0000000000009E5A                 db 0FFh
.eh_frame_hdr:0000000000009E5B                 db 0FFh
.eh_frame_hdr:0000000000009E5C                 db  2Ch ; ,
.eh_frame_hdr:0000000000009E5D                 db    3
.eh_frame_hdr:0000000000009E5E                 db    0
.eh_frame_hdr:0000000000009E5F                 db    0
.eh_frame_hdr:0000000000009E60                 db 0D4h
.eh_frame_hdr:0000000000009E61                 db  77h ; w
.eh_frame_hdr:0000000000009E62                 db 0FFh
.eh_frame_hdr:0000000000009E63                 db 0FFh
.eh_frame_hdr:0000000000009E64                 db  54h ; T
.eh_frame_hdr:0000000000009E65                 db    3
.eh_frame_hdr:0000000000009E66                 db    0
.eh_frame_hdr:0000000000009E67                 db    0
.eh_frame_hdr:0000000000009E68                 db 0E4h
.eh_frame_hdr:0000000000009E69                 db  77h ; w
.eh_frame_hdr:0000000000009E6A                 db 0FFh
.eh_frame_hdr:0000000000009E6B                 db 0FFh
.eh_frame_hdr:0000000000009E6C                 db  44h ; D
.eh_frame_hdr:0000000000009E6D                 db    5
.eh_frame_hdr:0000000000009E6E                 db    0
.eh_frame_hdr:0000000000009E6F                 db    0
.eh_frame_hdr:0000000000009E70                 db 0A4h
.eh_frame_hdr:0000000000009E71                 db  79h ; y
.eh_frame_hdr:0000000000009E72                 db 0FFh
.eh_frame_hdr:0000000000009E73                 db 0FFh
.eh_frame_hdr:0000000000009E74                 db 0FCh
.eh_frame_hdr:0000000000009E75                 db    2
.eh_frame_hdr:0000000000009E76                 db    0
.eh_frame_hdr:0000000000009E77                 db    0
.eh_frame_hdr:0000000000009E78                 db 0B4h
.eh_frame_hdr:0000000000009E79                 db  7Ah ; z
.eh_frame_hdr:0000000000009E7A                 db 0FFh
.eh_frame_hdr:0000000000009E7B                 db 0FFh
.eh_frame_hdr:0000000000009E7C                 db  6Ch ; l
.eh_frame_hdr:0000000000009E7D                 db    3
.eh_frame_hdr:0000000000009E7E                 db    0
.eh_frame_hdr:0000000000009E7F                 db    0
.eh_frame_hdr:0000000000009E80                 db  24h ; $
.eh_frame_hdr:0000000000009E81                 db  7Ch ; |
.eh_frame_hdr:0000000000009E82                 db 0FFh
.eh_frame_hdr:0000000000009E83                 db 0FFh
.eh_frame_hdr:0000000000009E84                 db  80h
.eh_frame_hdr:0000000000009E85                 db    3
.eh_frame_hdr:0000000000009E86                 db    0
.eh_frame_hdr:0000000000009E87                 db    0
.eh_frame_hdr:0000000000009E88                 db 0D4h
.eh_frame_hdr:0000000000009E89                 db  7Ch ; |
.eh_frame_hdr:0000000000009E8A                 db 0FFh
.eh_frame_hdr:0000000000009E8B                 db 0FFh
.eh_frame_hdr:0000000000009E8C                 db  98h
.eh_frame_hdr:0000000000009E8D                 db    3
.eh_frame_hdr:0000000000009E8E                 db    0
.eh_frame_hdr:0000000000009E8F                 db    0
.eh_frame_hdr:0000000000009E90                 db 0B4h
.eh_frame_hdr:0000000000009E91                 db  7Dh ; }
.eh_frame_hdr:0000000000009E92                 db 0FFh
.eh_frame_hdr:0000000000009E93                 db 0FFh
.eh_frame_hdr:0000000000009E94                 db 0B8h
.eh_frame_hdr:0000000000009E95                 db    3
.eh_frame_hdr:0000000000009E96                 db    0
.eh_frame_hdr:0000000000009E97                 db    0
.eh_frame_hdr:0000000000009E98                 db 0F4h
.eh_frame_hdr:0000000000009E99                 db  7Dh ; }
.eh_frame_hdr:0000000000009E9A                 db 0FFh
.eh_frame_hdr:0000000000009E9B                 db 0FFh
.eh_frame_hdr:0000000000009E9C                 db 0D0h
.eh_frame_hdr:0000000000009E9D                 db    3
.eh_frame_hdr:0000000000009E9E                 db    0
.eh_frame_hdr:0000000000009E9F                 db    0
.eh_frame_hdr:0000000000009EA0                 db  24h ; $
.eh_frame_hdr:0000000000009EA1                 db  7Eh ; ~
.eh_frame_hdr:0000000000009EA2                 db 0FFh
.eh_frame_hdr:0000000000009EA3                 db 0FFh
.eh_frame_hdr:0000000000009EA4                 db 0E4h
.eh_frame_hdr:0000000000009EA5                 db    3
.eh_frame_hdr:0000000000009EA6                 db    0
.eh_frame_hdr:0000000000009EA7                 db    0
.eh_frame_hdr:0000000000009EA8                 db  94h
.eh_frame_hdr:0000000000009EA9                 db  83h
.eh_frame_hdr:0000000000009EAA                 db 0FFh
.eh_frame_hdr:0000000000009EAB                 db 0FFh
.eh_frame_hdr:0000000000009EAC                 db  30h ; 0
.eh_frame_hdr:0000000000009EAD                 db    4
.eh_frame_hdr:0000000000009EAE                 db    0
.eh_frame_hdr:0000000000009EAF                 db    0
.eh_frame_hdr:0000000000009EB0                 db  74h ; t
.eh_frame_hdr:0000000000009EB1                 db  89h
.eh_frame_hdr:0000000000009EB2                 db 0FFh
.eh_frame_hdr:0000000000009EB3                 db 0FFh
.eh_frame_hdr:0000000000009EB4                 db  5Ch ; \
.eh_frame_hdr:0000000000009EB5                 db    4
.eh_frame_hdr:0000000000009EB6                 db    0
.eh_frame_hdr:0000000000009EB7                 db    0
.eh_frame_hdr:0000000000009EB8                 db 0E4h
.eh_frame_hdr:0000000000009EB9                 db  89h
.eh_frame_hdr:0000000000009EBA                 db 0FFh
.eh_frame_hdr:0000000000009EBB                 db 0FFh
.eh_frame_hdr:0000000000009EBC                 db  74h ; t
.eh_frame_hdr:0000000000009EBD                 db    4
.eh_frame_hdr:0000000000009EBE                 db    0
.eh_frame_hdr:0000000000009EBF                 db    0
.eh_frame_hdr:0000000000009EC0                 db  24h ; $
.eh_frame_hdr:0000000000009EC1                 db  8Bh
.eh_frame_hdr:0000000000009EC2                 db 0FFh
.eh_frame_hdr:0000000000009EC3                 db 0FFh
.eh_frame_hdr:0000000000009EC4                 db 0A8h
.eh_frame_hdr:0000000000009EC5                 db    4
.eh_frame_hdr:0000000000009EC6                 db    0
.eh_frame_hdr:0000000000009EC7                 db    0
.eh_frame_hdr:0000000000009EC8                 db    4
.eh_frame_hdr:0000000000009EC9                 db  8Fh
.eh_frame_hdr:0000000000009ECA                 db 0FFh
.eh_frame_hdr:0000000000009ECB                 db 0FFh
.eh_frame_hdr:0000000000009ECC                 db 0F4h
.eh_frame_hdr:0000000000009ECD                 db    4
.eh_frame_hdr:0000000000009ECE                 db    0
.eh_frame_hdr:0000000000009ECF                 db    0
.eh_frame_hdr:0000000000009ED0                 db  54h ; T
.eh_frame_hdr:0000000000009ED1                 db  90h
.eh_frame_hdr:0000000000009ED2                 db 0FFh
.eh_frame_hdr:0000000000009ED3                 db 0FFh
.eh_frame_hdr:0000000000009ED4                 db  24h ; $
.eh_frame_hdr:0000000000009ED5                 db    5
.eh_frame_hdr:0000000000009ED6                 db    0
.eh_frame_hdr:0000000000009ED7                 db    0
.eh_frame_hdr:0000000000009ED8                 db  34h ; 4
.eh_frame_hdr:0000000000009ED9                 db  94h
.eh_frame_hdr:0000000000009EDA                 db 0FFh
.eh_frame_hdr:0000000000009EDB                 db 0FFh
.eh_frame_hdr:0000000000009EDC                 db  7Ch ; |
.eh_frame_hdr:0000000000009EDD                 db    5
.eh_frame_hdr:0000000000009EDE                 db    0
.eh_frame_hdr:0000000000009EDF                 db    0
.eh_frame_hdr:0000000000009EE0                 db  44h ; D
.eh_frame_hdr:0000000000009EE1                 db  94h
.eh_frame_hdr:0000000000009EE2                 db 0FFh
.eh_frame_hdr:0000000000009EE3                 db 0FFh
.eh_frame_hdr:0000000000009EE4                 db  90h
.eh_frame_hdr:0000000000009EE5                 db    5
.eh_frame_hdr:0000000000009EE6                 db    0
.eh_frame_hdr:0000000000009EE7                 db    0
.eh_frame_hdr:0000000000009EE8                 db  54h ; T
.eh_frame_hdr:0000000000009EE9                 db  94h
.eh_frame_hdr:0000000000009EEA                 db 0FFh
.eh_frame_hdr:0000000000009EEB                 db 0FFh
.eh_frame_hdr:0000000000009EEC                 db 0A4h
.eh_frame_hdr:0000000000009EED                 db    5
.eh_frame_hdr:0000000000009EEE                 db    0
.eh_frame_hdr:0000000000009EEF                 db    0
.eh_frame_hdr:0000000000009EF0                 db    4
.eh_frame_hdr:0000000000009EF1                 db  95h
.eh_frame_hdr:0000000000009EF2                 db 0FFh
.eh_frame_hdr:0000000000009EF3                 db 0FFh
.eh_frame_hdr:0000000000009EF4                 db 0D4h
.eh_frame_hdr:0000000000009EF5                 db    5
.eh_frame_hdr:0000000000009EF6                 db    0
.eh_frame_hdr:0000000000009EF7                 db    0
.eh_frame_hdr:0000000000009EF8                 db  54h ; T
.eh_frame_hdr:0000000000009EF9                 db  95h
.eh_frame_hdr:0000000000009EFA                 db 0FFh
.eh_frame_hdr:0000000000009EFB                 db 0FFh
.eh_frame_hdr:0000000000009EFC                 db 0ECh
.eh_frame_hdr:0000000000009EFD                 db    5
.eh_frame_hdr:0000000000009EFE                 db    0
.eh_frame_hdr:0000000000009EFF                 db    0
.eh_frame_hdr:0000000000009F00                 db 0F4h
.eh_frame_hdr:0000000000009F01                 db  95h
.eh_frame_hdr:0000000000009F02                 db 0FFh
.eh_frame_hdr:0000000000009F03                 db 0FFh
.eh_frame_hdr:0000000000009F04                 db  0Ch
.eh_frame_hdr:0000000000009F05                 db    6
.eh_frame_hdr:0000000000009F06                 db    0
.eh_frame_hdr:0000000000009F07                 db    0
.eh_frame_hdr:0000000000009F08                 db 0E4h
.eh_frame_hdr:0000000000009F09                 db  96h
.eh_frame_hdr:0000000000009F0A                 db 0FFh
.eh_frame_hdr:0000000000009F0B                 db 0FFh
.eh_frame_hdr:0000000000009F0C                 db  50h ; P
.eh_frame_hdr:0000000000009F0D                 db    6
.eh_frame_hdr:0000000000009F0E                 db    0
.eh_frame_hdr:0000000000009F0F                 db    0
.eh_frame_hdr:0000000000009F10                 db  24h ; $
.eh_frame_hdr:0000000000009F11                 db 0A9h
.eh_frame_hdr:0000000000009F12                 db 0FFh
.eh_frame_hdr:0000000000009F13                 db 0FFh
.eh_frame_hdr:0000000000009F14                 db 0C8h
.eh_frame_hdr:0000000000009F15                 db    6
.eh_frame_hdr:0000000000009F16                 db    0
.eh_frame_hdr:0000000000009F17                 db    0
.eh_frame_hdr:0000000000009F18                 db 0D4h
.eh_frame_hdr:0000000000009F19                 db 0AAh
.eh_frame_hdr:0000000000009F1A                 db 0FFh
.eh_frame_hdr:0000000000009F1B                 db 0FFh
.eh_frame_hdr:0000000000009F1C                 db  34h ; 4
.eh_frame_hdr:0000000000009F1D                 db    7
.eh_frame_hdr:0000000000009F1E                 db    0
.eh_frame_hdr:0000000000009F1F                 db    0
.eh_frame_hdr:0000000000009F20                 db  14h
.eh_frame_hdr:0000000000009F21                 db 0ABh
.eh_frame_hdr:0000000000009F22                 db 0FFh
.eh_frame_hdr:0000000000009F23                 db 0FFh
.eh_frame_hdr:0000000000009F24                 db  60h ; `
.eh_frame_hdr:0000000000009F25                 db    7
.eh_frame_hdr:0000000000009F26                 db    0
.eh_frame_hdr:0000000000009F27                 db    0
.eh_frame_hdr:0000000000009F28                 db  34h ; 4
.eh_frame_hdr:0000000000009F29                 db 0ABh
.eh_frame_hdr:0000000000009F2A                 db 0FFh
.eh_frame_hdr:0000000000009F2B                 db 0FFh
.eh_frame_hdr:0000000000009F2C                 db  74h ; t
.eh_frame_hdr:0000000000009F2D                 db    7
.eh_frame_hdr:0000000000009F2E                 db    0
.eh_frame_hdr:0000000000009F2F                 db    0
.eh_frame_hdr:0000000000009F30                 db  54h ; T
.eh_frame_hdr:0000000000009F31                 db 0ABh
.eh_frame_hdr:0000000000009F32                 db 0FFh
.eh_frame_hdr:0000000000009F33                 db 0FFh
.eh_frame_hdr:0000000000009F34                 db  88h
.eh_frame_hdr:0000000000009F35                 db    7
.eh_frame_hdr:0000000000009F36                 db    0
.eh_frame_hdr:0000000000009F37                 db    0
.eh_frame_hdr:0000000000009F38                 db  94h
.eh_frame_hdr:0000000000009F39                 db 0ABh
.eh_frame_hdr:0000000000009F3A                 db 0FFh
.eh_frame_hdr:0000000000009F3B                 db 0FFh
.eh_frame_hdr:0000000000009F3C                 db  9Ch
.eh_frame_hdr:0000000000009F3D                 db    7
.eh_frame_hdr:0000000000009F3E                 db    0
.eh_frame_hdr:0000000000009F3F                 db    0
.eh_frame_hdr:0000000000009F40                 db 0B4h
.eh_frame_hdr:0000000000009F41                 db 0ABh
.eh_frame_hdr:0000000000009F42                 db 0FFh
.eh_frame_hdr:0000000000009F43                 db 0FFh
.eh_frame_hdr:0000000000009F44                 db 0B0h
.eh_frame_hdr:0000000000009F45                 db    7
.eh_frame_hdr:0000000000009F46                 db    0
.eh_frame_hdr:0000000000009F47                 db    0
.eh_frame_hdr:0000000000009F48                 db 0E4h
.eh_frame_hdr:0000000000009F49                 db 0ABh
.eh_frame_hdr:0000000000009F4A                 db 0FFh
.eh_frame_hdr:0000000000009F4B                 db 0FFh
.eh_frame_hdr:0000000000009F4C                 db 0C4h
.eh_frame_hdr:0000000000009F4D                 db    7
.eh_frame_hdr:0000000000009F4E                 db    0
.eh_frame_hdr:0000000000009F4F                 db    0
.eh_frame_hdr:0000000000009F50                 db  64h ; d
.eh_frame_hdr:0000000000009F51                 db 0ACh
.eh_frame_hdr:0000000000009F52                 db 0FFh
.eh_frame_hdr:0000000000009F53                 db 0FFh
.eh_frame_hdr:0000000000009F54                 db  18h
.eh_frame_hdr:0000000000009F55                 db    8
.eh_frame_hdr:0000000000009F56                 db    0
.eh_frame_hdr:0000000000009F57                 db    0
.eh_frame_hdr:0000000000009F58                 db  54h ; T
.eh_frame_hdr:0000000000009F59                 db 0ADh
.eh_frame_hdr:0000000000009F5A                 db 0FFh
.eh_frame_hdr:0000000000009F5B                 db 0FFh
.eh_frame_hdr:0000000000009F5C                 db  84h
.eh_frame_hdr:0000000000009F5D                 db    8
.eh_frame_hdr:0000000000009F5E                 db    0
.eh_frame_hdr:0000000000009F5F                 db    0
.eh_frame_hdr:0000000000009F60                 db  64h ; d
.eh_frame_hdr:0000000000009F61                 db 0ADh
.eh_frame_hdr:0000000000009F62                 db 0FFh
.eh_frame_hdr:0000000000009F63                 db 0FFh
.eh_frame_hdr:0000000000009F64                 db  98h
.eh_frame_hdr:0000000000009F65                 db    8
.eh_frame_hdr:0000000000009F66                 db    0
.eh_frame_hdr:0000000000009F67                 db    0
.eh_frame_hdr:0000000000009F68                 db    4
.eh_frame_hdr:0000000000009F69                 db 0AEh
.eh_frame_hdr:0000000000009F6A                 db 0FFh
.eh_frame_hdr:0000000000009F6B                 db 0FFh
.eh_frame_hdr:0000000000009F6C                 db 0C4h
.eh_frame_hdr:0000000000009F6D                 db    8
.eh_frame_hdr:0000000000009F6E                 db    0
.eh_frame_hdr:0000000000009F6F                 db    0
.eh_frame_hdr:0000000000009F70                 db  24h ; $
.eh_frame_hdr:0000000000009F71                 db 0AEh
.eh_frame_hdr:0000000000009F72                 db 0FFh
.eh_frame_hdr:0000000000009F73                 db 0FFh
.eh_frame_hdr:0000000000009F74                 db 0D8h
.eh_frame_hdr:0000000000009F75                 db    8
.eh_frame_hdr:0000000000009F76                 db    0
.eh_frame_hdr:0000000000009F77                 db    0
.eh_frame_hdr:0000000000009F78                 db  34h ; 4
.eh_frame_hdr:0000000000009F79                 db 0AEh
.eh_frame_hdr:0000000000009F7A                 db 0FFh
.eh_frame_hdr:0000000000009F7B                 db 0FFh
.eh_frame_hdr:0000000000009F7C                 db 0ECh
.eh_frame_hdr:0000000000009F7D                 db    8
.eh_frame_hdr:0000000000009F7E                 db    0
.eh_frame_hdr:0000000000009F7F                 db    0
.eh_frame_hdr:0000000000009F80                 db  54h ; T
.eh_frame_hdr:0000000000009F81                 db 0AEh
.eh_frame_hdr:0000000000009F82                 db 0FFh
.eh_frame_hdr:0000000000009F83                 db 0FFh
.eh_frame_hdr:0000000000009F84                 db    0
.eh_frame_hdr:0000000000009F85                 db    9
.eh_frame_hdr:0000000000009F86                 db    0
.eh_frame_hdr:0000000000009F87                 db    0
.eh_frame_hdr:0000000000009F88                 db  74h ; t
.eh_frame_hdr:0000000000009F89                 db 0AEh
.eh_frame_hdr:0000000000009F8A                 db 0FFh
.eh_frame_hdr:0000000000009F8B                 db 0FFh
.eh_frame_hdr:0000000000009F8C                 db  14h
.eh_frame_hdr:0000000000009F8D                 db    9
.eh_frame_hdr:0000000000009F8E                 db    0
.eh_frame_hdr:0000000000009F8F                 db    0
.eh_frame_hdr:0000000000009F90                 db    4
.eh_frame_hdr:0000000000009F91                 db 0AFh
.eh_frame_hdr:0000000000009F92                 db 0FFh
.eh_frame_hdr:0000000000009F93                 db 0FFh
.eh_frame_hdr:0000000000009F94                 db  30h ; 0
.eh_frame_hdr:0000000000009F95                 db    9
.eh_frame_hdr:0000000000009F96                 db    0
.eh_frame_hdr:0000000000009F97                 db    0
.eh_frame_hdr:0000000000009F98                 db  94h
.eh_frame_hdr:0000000000009F99                 db 0AFh
.eh_frame_hdr:0000000000009F9A                 db 0FFh
.eh_frame_hdr:0000000000009F9B                 db 0FFh
.eh_frame_hdr:0000000000009F9C                 db  4Ch ; L
.eh_frame_hdr:0000000000009F9D                 db    9
.eh_frame_hdr:0000000000009F9E                 db    0
.eh_frame_hdr:0000000000009F9F                 db    0
.eh_frame_hdr:0000000000009FA0                 db 0A4h
.eh_frame_hdr:0000000000009FA1                 db 0AFh
.eh_frame_hdr:0000000000009FA2                 db 0FFh
.eh_frame_hdr:0000000000009FA3                 db 0FFh
.eh_frame_hdr:0000000000009FA4                 db  60h ; `
.eh_frame_hdr:0000000000009FA5                 db    9
.eh_frame_hdr:0000000000009FA6                 db    0
.eh_frame_hdr:0000000000009FA7                 db    0
.eh_frame_hdr:0000000000009FA8                 db 0B4h
.eh_frame_hdr:0000000000009FA9                 db 0AFh
.eh_frame_hdr:0000000000009FAA                 db 0FFh
.eh_frame_hdr:0000000000009FAB                 db 0FFh
.eh_frame_hdr:0000000000009FAC                 db  74h ; t
.eh_frame_hdr:0000000000009FAD                 db    9
.eh_frame_hdr:0000000000009FAE                 db    0
.eh_frame_hdr:0000000000009FAF                 db    0
.eh_frame_hdr:0000000000009FB0                 db  54h ; T
.eh_frame_hdr:0000000000009FB1                 db 0B0h
.eh_frame_hdr:0000000000009FB2                 db 0FFh
.eh_frame_hdr:0000000000009FB3                 db 0FFh
.eh_frame_hdr:0000000000009FB4                 db  90h
.eh_frame_hdr:0000000000009FB5                 db    9
.eh_frame_hdr:0000000000009FB6                 db    0
.eh_frame_hdr:0000000000009FB7                 db    0
.eh_frame_hdr:0000000000009FB8                 db  64h ; d
.eh_frame_hdr:0000000000009FB9                 db 0B0h
.eh_frame_hdr:0000000000009FBA                 db 0FFh
.eh_frame_hdr:0000000000009FBB                 db 0FFh
.eh_frame_hdr:0000000000009FBC                 db 0A4h
.eh_frame_hdr:0000000000009FBD                 db    9
.eh_frame_hdr:0000000000009FBE                 db    0
.eh_frame_hdr:0000000000009FBF                 db    0
.eh_frame_hdr:0000000000009FC0                 db  84h
.eh_frame_hdr:0000000000009FC1                 db 0B0h
.eh_frame_hdr:0000000000009FC2                 db 0FFh
.eh_frame_hdr:0000000000009FC3                 db 0FFh
.eh_frame_hdr:0000000000009FC4                 db 0B8h
.eh_frame_hdr:0000000000009FC5                 db    9
.eh_frame_hdr:0000000000009FC6                 db    0
.eh_frame_hdr:0000000000009FC7                 db    0
.eh_frame_hdr:0000000000009FC8                 db  94h
.eh_frame_hdr:0000000000009FC9                 db 0B0h
.eh_frame_hdr:0000000000009FCA                 db 0FFh
.eh_frame_hdr:0000000000009FCB                 db 0FFh
.eh_frame_hdr:0000000000009FCC                 db 0CCh
.eh_frame_hdr:0000000000009FCD                 db    9
.eh_frame_hdr:0000000000009FCE                 db    0
.eh_frame_hdr:0000000000009FCF                 db    0
.eh_frame_hdr:0000000000009FD0                 db  24h ; $
.eh_frame_hdr:0000000000009FD1                 db 0B1h
.eh_frame_hdr:0000000000009FD2                 db 0FFh
.eh_frame_hdr:0000000000009FD3                 db 0FFh
.eh_frame_hdr:0000000000009FD4                 db 0E8h
.eh_frame_hdr:0000000000009FD5                 db    9
.eh_frame_hdr:0000000000009FD6                 db    0
.eh_frame_hdr:0000000000009FD7                 db    0
.eh_frame_hdr:0000000000009FD8                 db 0C4h
.eh_frame_hdr:0000000000009FD9                 db 0B1h
.eh_frame_hdr:0000000000009FDA                 db 0FFh
.eh_frame_hdr:0000000000009FDB                 db 0FFh
.eh_frame_hdr:0000000000009FDC                 db    4
.eh_frame_hdr:0000000000009FDD                 db  0Ah
.eh_frame_hdr:0000000000009FDE                 db    0
.eh_frame_hdr:0000000000009FDF                 db    0
.eh_frame_hdr:0000000000009FE0                 db 0D4h
.eh_frame_hdr:0000000000009FE1                 db 0B1h
.eh_frame_hdr:0000000000009FE2                 db 0FFh
.eh_frame_hdr:0000000000009FE3                 db 0FFh
.eh_frame_hdr:0000000000009FE4                 db  18h
.eh_frame_hdr:0000000000009FE5                 db  0Ah
.eh_frame_hdr:0000000000009FE6                 db    0
.eh_frame_hdr:0000000000009FE7                 db    0
.eh_frame_hdr:0000000000009FE8                 db 0F4h
.eh_frame_hdr:0000000000009FE9                 db 0B1h
.eh_frame_hdr:0000000000009FEA                 db 0FFh
.eh_frame_hdr:0000000000009FEB                 db 0FFh
.eh_frame_hdr:0000000000009FEC                 db  2Ch ; ,
.eh_frame_hdr:0000000000009FED                 db  0Ah
.eh_frame_hdr:0000000000009FEE                 db    0
.eh_frame_hdr:0000000000009FEF                 db    0
.eh_frame_hdr:0000000000009FF0                 db  14h
.eh_frame_hdr:0000000000009FF1                 db 0B2h
.eh_frame_hdr:0000000000009FF2                 db 0FFh
.eh_frame_hdr:0000000000009FF3                 db 0FFh
.eh_frame_hdr:0000000000009FF4                 db  40h ; @
.eh_frame_hdr:0000000000009FF5                 db  0Ah
.eh_frame_hdr:0000000000009FF6                 db    0
.eh_frame_hdr:0000000000009FF7                 db    0
.eh_frame_hdr:0000000000009FF8                 db  24h ; $
.eh_frame_hdr:0000000000009FF9                 db 0B2h
.eh_frame_hdr:0000000000009FFA                 db 0FFh
.eh_frame_hdr:0000000000009FFB                 db 0FFh
.eh_frame_hdr:0000000000009FFC                 db  54h ; T
.eh_frame_hdr:0000000000009FFD                 db  0Ah
.eh_frame_hdr:0000000000009FFE                 db    0
.eh_frame_hdr:0000000000009FFF                 db    0
.eh_frame_hdr:000000000000A000                 db  44h ; D
.eh_frame_hdr:000000000000A001                 db 0B2h
.eh_frame_hdr:000000000000A002                 db 0FFh
.eh_frame_hdr:000000000000A003                 db 0FFh
.eh_frame_hdr:000000000000A004                 db  68h ; h
.eh_frame_hdr:000000000000A005                 db  0Ah
.eh_frame_hdr:000000000000A006                 db    0
.eh_frame_hdr:000000000000A007                 db    0
.eh_frame_hdr:000000000000A008                 db  64h ; d
.eh_frame_hdr:000000000000A009                 db 0B2h
.eh_frame_hdr:000000000000A00A                 db 0FFh
.eh_frame_hdr:000000000000A00B                 db 0FFh
.eh_frame_hdr:000000000000A00C                 db  7Ch ; |
.eh_frame_hdr:000000000000A00D                 db  0Ah
.eh_frame_hdr:000000000000A00E                 db    0
.eh_frame_hdr:000000000000A00F                 db    0
.eh_frame_hdr:000000000000A010                 db  84h
.eh_frame_hdr:000000000000A011                 db 0B2h
.eh_frame_hdr:000000000000A012                 db 0FFh
.eh_frame_hdr:000000000000A013                 db 0FFh
.eh_frame_hdr:000000000000A014                 db  94h
.eh_frame_hdr:000000000000A015                 db  0Ah
.eh_frame_hdr:000000000000A016                 db    0
.eh_frame_hdr:000000000000A017                 db    0
.eh_frame_hdr:000000000000A018                 db  34h ; 4
.eh_frame_hdr:000000000000A019                 db 0B5h
.eh_frame_hdr:000000000000A01A                 db 0FFh
.eh_frame_hdr:000000000000A01B                 db 0FFh
.eh_frame_hdr:000000000000A01C                 db 0ACh
.eh_frame_hdr:000000000000A01D                 db  0Ah
.eh_frame_hdr:000000000000A01E                 db    0
.eh_frame_hdr:000000000000A01F                 db    0
.eh_frame_hdr:000000000000A020                 db 0F4h
.eh_frame_hdr:000000000000A021                 db 0B5h
.eh_frame_hdr:000000000000A022                 db 0FFh
.eh_frame_hdr:000000000000A023                 db 0FFh
.eh_frame_hdr:000000000000A024                 db 0FCh
.eh_frame_hdr:000000000000A025                 db  0Ah
.eh_frame_hdr:000000000000A026                 db    0
.eh_frame_hdr:000000000000A027                 db    0
.eh_frame_hdr:000000000000A028                 db    4
.eh_frame_hdr:000000000000A029                 db 0B6h
.eh_frame_hdr:000000000000A02A                 db 0FFh
.eh_frame_hdr:000000000000A02B                 db 0FFh
.eh_frame_hdr:000000000000A02C                 db  14h
.eh_frame_hdr:000000000000A02D                 db  0Bh
.eh_frame_hdr:000000000000A02E                 db    0
.eh_frame_hdr:000000000000A02F                 db    0
.eh_frame_hdr:000000000000A030                 db  24h ; $
.eh_frame_hdr:000000000000A031                 db 0BAh
.eh_frame_hdr:000000000000A032                 db 0FFh
.eh_frame_hdr:000000000000A033                 db 0FFh
.eh_frame_hdr:000000000000A034                 db  28h ; (
.eh_frame_hdr:000000000000A035                 db  0Ch
.eh_frame_hdr:000000000000A036                 db    0
.eh_frame_hdr:000000000000A037                 db    0
.eh_frame_hdr:000000000000A038                 db  44h ; D
.eh_frame_hdr:000000000000A039                 db 0BAh
.eh_frame_hdr:000000000000A03A                 db 0FFh
.eh_frame_hdr:000000000000A03B                 db 0FFh
.eh_frame_hdr:000000000000A03C                 db  3Ch ; <
.eh_frame_hdr:000000000000A03D                 db  0Ch
.eh_frame_hdr:000000000000A03E                 db    0
.eh_frame_hdr:000000000000A03F                 db    0
.eh_frame_hdr:000000000000A040                 db 0C4h
.eh_frame_hdr:000000000000A041                 db 0BAh
.eh_frame_hdr:000000000000A042                 db 0FFh
.eh_frame_hdr:000000000000A043                 db 0FFh
.eh_frame_hdr:000000000000A044                 db  58h ; X
.eh_frame_hdr:000000000000A045                 db  0Ch
.eh_frame_hdr:000000000000A046                 db    0
.eh_frame_hdr:000000000000A047                 db    0
.eh_frame_hdr:000000000000A048                 db 0A4h
.eh_frame_hdr:000000000000A049                 db 0BBh
.eh_frame_hdr:000000000000A04A                 db 0FFh
.eh_frame_hdr:000000000000A04B                 db 0FFh
.eh_frame_hdr:000000000000A04C                 db  84h
.eh_frame_hdr:000000000000A04D                 db  0Ch
.eh_frame_hdr:000000000000A04E                 db    0
.eh_frame_hdr:000000000000A04F                 db    0
.eh_frame_hdr:000000000000A050                 db  24h ; $
.eh_frame_hdr:000000000000A051                 db 0BCh
.eh_frame_hdr:000000000000A052                 db 0FFh
.eh_frame_hdr:000000000000A053                 db 0FFh
.eh_frame_hdr:000000000000A054                 db 0A4h
.eh_frame_hdr:000000000000A055                 db  0Ch
.eh_frame_hdr:000000000000A056                 db    0
.eh_frame_hdr:000000000000A057                 db    0
.eh_frame_hdr:000000000000A058                 db  44h ; D
.eh_frame_hdr:000000000000A059                 db 0BCh
.eh_frame_hdr:000000000000A05A                 db 0FFh
.eh_frame_hdr:000000000000A05B                 db 0FFh
.eh_frame_hdr:000000000000A05C                 db 0C0h
.eh_frame_hdr:000000000000A05D                 db  0Ch
.eh_frame_hdr:000000000000A05E                 db    0
.eh_frame_hdr:000000000000A05F                 db    0
.eh_frame_hdr:000000000000A060                 db  74h ; t
.eh_frame_hdr:000000000000A061                 db 0BCh
.eh_frame_hdr:000000000000A062                 db 0FFh
.eh_frame_hdr:000000000000A063                 db 0FFh
.eh_frame_hdr:000000000000A064                 db 0D4h
.eh_frame_hdr:000000000000A065                 db  0Ch
.eh_frame_hdr:000000000000A066                 db    0
.eh_frame_hdr:000000000000A067                 db    0
.eh_frame_hdr:000000000000A068                 db  84h
.eh_frame_hdr:000000000000A069                 db 0BCh
.eh_frame_hdr:000000000000A06A                 db 0FFh
.eh_frame_hdr:000000000000A06B                 db 0FFh
.eh_frame_hdr:000000000000A06C                 db 0E8h
.eh_frame_hdr:000000000000A06D                 db  0Ch
.eh_frame_hdr:000000000000A06E                 db    0
.eh_frame_hdr:000000000000A06F                 db    0
.eh_frame_hdr:000000000000A070                 db 0C4h
.eh_frame_hdr:000000000000A071                 db 0BCh
.eh_frame_hdr:000000000000A072                 db 0FFh
.eh_frame_hdr:000000000000A073                 db 0FFh
.eh_frame_hdr:000000000000A074                 db  0Ch
.eh_frame_hdr:000000000000A075                 db  0Dh
.eh_frame_hdr:000000000000A076                 db    0
.eh_frame_hdr:000000000000A077                 db    0
.eh_frame_hdr:000000000000A078                 db 0F4h
.eh_frame_hdr:000000000000A079                 db 0BCh
.eh_frame_hdr:000000000000A07A                 db 0FFh
.eh_frame_hdr:000000000000A07B                 db 0FFh
.eh_frame_hdr:000000000000A07C                 db  20h
.eh_frame_hdr:000000000000A07D                 db  0Dh
.eh_frame_hdr:000000000000A07E                 db    0
.eh_frame_hdr:000000000000A07F                 db    0
.eh_frame_hdr:000000000000A080                 db  84h
.eh_frame_hdr:000000000000A081                 db 0BDh
.eh_frame_hdr:000000000000A082                 db 0FFh
.eh_frame_hdr:000000000000A083                 db 0FFh
.eh_frame_hdr:000000000000A084                 db  38h ; 8
.eh_frame_hdr:000000000000A085                 db  0Dh
.eh_frame_hdr:000000000000A086                 db    0
.eh_frame_hdr:000000000000A087                 db    0
.eh_frame_hdr:000000000000A088                 db 0D4h
.eh_frame_hdr:000000000000A089                 db 0BDh
.eh_frame_hdr:000000000000A08A                 db 0FFh
.eh_frame_hdr:000000000000A08B                 db 0FFh
.eh_frame_hdr:000000000000A08C                 db  50h ; P
.eh_frame_hdr:000000000000A08D                 db  0Dh
.eh_frame_hdr:000000000000A08E                 db    0
.eh_frame_hdr:000000000000A08F                 db    0
.eh_frame_hdr:000000000000A090                 db 0F4h
.eh_frame_hdr:000000000000A091                 db 0BDh
.eh_frame_hdr:000000000000A092                 db 0FFh
.eh_frame_hdr:000000000000A093                 db 0FFh
.eh_frame_hdr:000000000000A094                 db  6Ch ; l
.eh_frame_hdr:000000000000A095                 db  0Dh
.eh_frame_hdr:000000000000A096                 db    0
.eh_frame_hdr:000000000000A097                 db    0
.eh_frame_hdr:000000000000A098                 db  24h ; $
.eh_frame_hdr:000000000000A099                 db 0BEh
.eh_frame_hdr:000000000000A09A                 db 0FFh
.eh_frame_hdr:000000000000A09B                 db 0FFh
.eh_frame_hdr:000000000000A09C                 db  88h
.eh_frame_hdr:000000000000A09D                 db  0Dh
.eh_frame_hdr:000000000000A09E                 db    0
.eh_frame_hdr:000000000000A09F                 db    0
.eh_frame_hdr:000000000000A0A0                 db  54h ; T
.eh_frame_hdr:000000000000A0A1                 db 0BEh
.eh_frame_hdr:000000000000A0A2                 db 0FFh
.eh_frame_hdr:000000000000A0A3                 db 0FFh
.eh_frame_hdr:000000000000A0A4                 db 0B0h
.eh_frame_hdr:000000000000A0A5                 db  0Dh
.eh_frame_hdr:000000000000A0A6                 db    0
.eh_frame_hdr:000000000000A0A7                 db    0
.eh_frame_hdr:000000000000A0A8                 db  74h ; t
.eh_frame_hdr:000000000000A0A9                 db 0BEh
.eh_frame_hdr:000000000000A0AA                 db 0FFh
.eh_frame_hdr:000000000000A0AB                 db 0FFh
.eh_frame_hdr:000000000000A0AC                 db 0CCh
.eh_frame_hdr:000000000000A0AD                 db  0Dh
.eh_frame_hdr:000000000000A0AE                 db    0
.eh_frame_hdr:000000000000A0AF                 db    0
.eh_frame_hdr:000000000000A0B0                 db 0B4h
.eh_frame_hdr:000000000000A0B1                 db 0BEh
.eh_frame_hdr:000000000000A0B2                 db 0FFh
.eh_frame_hdr:000000000000A0B3                 db 0FFh
.eh_frame_hdr:000000000000A0B4                 db 0E4h
.eh_frame_hdr:000000000000A0B5                 db  0Dh
.eh_frame_hdr:000000000000A0B6                 db    0
.eh_frame_hdr:000000000000A0B7                 db    0
.eh_frame_hdr:000000000000A0B8                 db    4
.eh_frame_hdr:000000000000A0B9                 db 0C0h
.eh_frame_hdr:000000000000A0BA                 db 0FFh
.eh_frame_hdr:000000000000A0BB                 db 0FFh
.eh_frame_hdr:000000000000A0BC                 db  30h ; 0
.eh_frame_hdr:000000000000A0BD                 db  0Eh
.eh_frame_hdr:000000000000A0BE                 db    0
.eh_frame_hdr:000000000000A0BF                 db    0
.eh_frame_hdr:000000000000A0C0                 db 0B4h
.eh_frame_hdr:000000000000A0C1                 db 0C0h
.eh_frame_hdr:000000000000A0C2                 db 0FFh
.eh_frame_hdr:000000000000A0C3                 db 0FFh
.eh_frame_hdr:000000000000A0C4                 db  4Ch ; L
.eh_frame_hdr:000000000000A0C5                 db  0Eh
.eh_frame_hdr:000000000000A0C6                 db    0
.eh_frame_hdr:000000000000A0C7                 db    0
.eh_frame_hdr:000000000000A0C8                 db  44h ; D
.eh_frame_hdr:000000000000A0C9                 db 0C1h
.eh_frame_hdr:000000000000A0CA                 db 0FFh
.eh_frame_hdr:000000000000A0CB                 db 0FFh
.eh_frame_hdr:000000000000A0CC                 db  8Ch
.eh_frame_hdr:000000000000A0CD                 db  0Eh
.eh_frame_hdr:000000000000A0CE                 db    0
.eh_frame_hdr:000000000000A0CF                 db    0
.eh_frame_hdr:000000000000A0D0                 db 0C4h
.eh_frame_hdr:000000000000A0D1                 db 0C1h
.eh_frame_hdr:000000000000A0D2                 db 0FFh
.eh_frame_hdr:000000000000A0D3                 db 0FFh
.eh_frame_hdr:000000000000A0D4                 db 0B4h
.eh_frame_hdr:000000000000A0D5                 db  0Eh
.eh_frame_hdr:000000000000A0D6                 db    0
.eh_frame_hdr:000000000000A0D7                 db    0
.eh_frame_hdr:000000000000A0D8                 db  44h ; D
.eh_frame_hdr:000000000000A0D9                 db 0C2h
.eh_frame_hdr:000000000000A0DA                 db 0FFh
.eh_frame_hdr:000000000000A0DB                 db 0FFh
.eh_frame_hdr:000000000000A0DC                 db    4
.eh_frame_hdr:000000000000A0DD                 db  0Fh
.eh_frame_hdr:000000000000A0DE                 db    0
.eh_frame_hdr:000000000000A0DF                 db    0
.eh_frame_hdr:000000000000A0E0                 db 0A4h
.eh_frame_hdr:000000000000A0E1                 db 0C2h
.eh_frame_hdr:000000000000A0E2                 db 0FFh
.eh_frame_hdr:000000000000A0E3                 db 0FFh
.eh_frame_hdr:000000000000A0E4                 db  24h ; $
.eh_frame_hdr:000000000000A0E5                 db  0Fh
.eh_frame_hdr:000000000000A0E6                 db    0
.eh_frame_hdr:000000000000A0E7                 db    0
.eh_frame_hdr:000000000000A0E8                 db 0E4h
.eh_frame_hdr:000000000000A0E9                 db 0C2h
.eh_frame_hdr:000000000000A0EA                 db 0FFh
.eh_frame_hdr:000000000000A0EB                 db 0FFh
.eh_frame_hdr:000000000000A0EC                 db  44h ; D
.eh_frame_hdr:000000000000A0ED                 db  0Fh
.eh_frame_hdr:000000000000A0EE                 db    0
.eh_frame_hdr:000000000000A0EF                 db    0
.eh_frame_hdr:000000000000A0F0                 db  64h ; d
.eh_frame_hdr:000000000000A0F1                 db 0C3h
.eh_frame_hdr:000000000000A0F2                 db 0FFh
.eh_frame_hdr:000000000000A0F3                 db 0FFh
.eh_frame_hdr:000000000000A0F4                 db  7Ch ; |
.eh_frame_hdr:000000000000A0F5                 db  0Fh
.eh_frame_hdr:000000000000A0F6                 db    0
.eh_frame_hdr:000000000000A0F7                 db    0
.eh_frame_hdr:000000000000A0F8                 db 0A4h
.eh_frame_hdr:000000000000A0F9                 db 0C3h
.eh_frame_hdr:000000000000A0FA                 db 0FFh
.eh_frame_hdr:000000000000A0FB                 db 0FFh
.eh_frame_hdr:000000000000A0FC                 db  9Ch
.eh_frame_hdr:000000000000A0FD                 db  0Fh
.eh_frame_hdr:000000000000A0FE                 db    0
.eh_frame_hdr:000000000000A0FF                 db    0
.eh_frame_hdr:000000000000A100                 db    4
.eh_frame_hdr:000000000000A101                 db 0C4h
.eh_frame_hdr:000000000000A102                 db 0FFh
.eh_frame_hdr:000000000000A103                 db 0FFh
.eh_frame_hdr:000000000000A104                 db 0CCh
.eh_frame_hdr:000000000000A105                 db  0Fh
.eh_frame_hdr:000000000000A106                 db    0
.eh_frame_hdr:000000000000A107                 db    0
.eh_frame_hdr:000000000000A108                 db  24h ; $
.eh_frame_hdr:000000000000A109                 db 0D5h
.eh_frame_hdr:000000000000A10A                 db 0FFh
.eh_frame_hdr:000000000000A10B                 db 0FFh
.eh_frame_hdr:000000000000A10C                 db 0FCh
.eh_frame_hdr:000000000000A10D                 db  0Fh
.eh_frame_hdr:000000000000A10E                 db    0
.eh_frame_hdr:000000000000A10F                 db    0
.eh_frame_hdr:000000000000A110                 db  24h ; $
.eh_frame_hdr:000000000000A111                 db 0D7h
.eh_frame_hdr:000000000000A112                 db 0FFh
.eh_frame_hdr:000000000000A113                 db 0FFh
.eh_frame_hdr:000000000000A114                 db  14h
.eh_frame_hdr:000000000000A115                 db  10h
.eh_frame_hdr:000000000000A116                 db    0
.eh_frame_hdr:000000000000A117                 db    0
.eh_frame_hdr:000000000000A118                 db  14h
.eh_frame_hdr:000000000000A119                 db 0E4h
.eh_frame_hdr:000000000000A11A                 db 0FFh
.eh_frame_hdr:000000000000A11B                 db 0FFh
.eh_frame_hdr:000000000000A11C                 db  64h ; d
.eh_frame_hdr:000000000000A11D                 db  10h
.eh_frame_hdr:000000000000A11E                 db    0
.eh_frame_hdr:000000000000A11F                 db    0
.eh_frame_hdr:000000000000A120                 db  84h
.eh_frame_hdr:000000000000A121                 db 0E4h
.eh_frame_hdr:000000000000A122                 db 0FFh
.eh_frame_hdr:000000000000A123                 db 0FFh
.eh_frame_hdr:000000000000A124                 db 0ACh
.eh_frame_hdr:000000000000A125                 db  10h
.eh_frame_hdr:000000000000A126                 db    0
.eh_frame_hdr:000000000000A127                 db    0
.eh_frame_hdr:000000000000A128                 db  94h
.eh_frame_hdr:000000000000A129                 db 0E4h
.eh_frame_hdr:000000000000A12A                 db 0FFh
.eh_frame_hdr:000000000000A12B                 db 0FFh
.eh_frame_hdr:000000000000A12C                 db 0C4h
.eh_frame_hdr:000000000000A12D                 db  10h
.eh_frame_hdr:000000000000A12E                 db    0
.eh_frame_hdr:000000000000A12F                 db    0
.eh_frame_hdr:000000000000A12F _eh_frame_hdr   ends
.eh_frame_hdr:000000000000A12F
.eh_frame:000000000000A130 ; ===========================================================================
.eh_frame:000000000000A130
.eh_frame:000000000000A130 ; Segment type: Pure data
.eh_frame:000000000000A130 ; Segment permissions: Read
.eh_frame:000000000000A130 _eh_frame       segment qword public 'CONST' use64
.eh_frame:000000000000A130                 assume cs:_eh_frame
.eh_frame:000000000000A130                 ;org 0A130h
.eh_frame:000000000000A130                 db  14h
.eh_frame:000000000000A131                 db    0
.eh_frame:000000000000A132                 db    0
.eh_frame:000000000000A133                 db    0
.eh_frame:000000000000A134                 db    0
.eh_frame:000000000000A135                 db    0
.eh_frame:000000000000A136                 db    0
.eh_frame:000000000000A137                 db    0
.eh_frame:000000000000A138                 db    1
.eh_frame:000000000000A139                 db  7Ah ; z
.eh_frame:000000000000A13A                 db  52h ; R
.eh_frame:000000000000A13B                 db    0
.eh_frame:000000000000A13C                 db    1
.eh_frame:000000000000A13D                 db  78h ; x
.eh_frame:000000000000A13E                 db  10h
.eh_frame:000000000000A13F                 db    1
.eh_frame:000000000000A140                 db  1Bh
.eh_frame:000000000000A141                 db  0Ch
.eh_frame:000000000000A142                 db    7
.eh_frame:000000000000A143                 db    8
.eh_frame:000000000000A144                 db  90h
.eh_frame:000000000000A145                 db    1
.eh_frame:000000000000A146                 db    7
.eh_frame:000000000000A147                 db  10h
.eh_frame:000000000000A148                 db  14h
.eh_frame:000000000000A149                 db    0
.eh_frame:000000000000A14A                 db    0
.eh_frame:000000000000A14B                 db    0
.eh_frame:000000000000A14C                 db  1Ch
.eh_frame:000000000000A14D                 db    0
.eh_frame:000000000000A14E                 db    0
.eh_frame:000000000000A14F                 db    0
.eh_frame:000000000000A150                 db 0A0h
.eh_frame:000000000000A151                 db  76h ; v
.eh_frame:000000000000A152                 db 0FFh
.eh_frame:000000000000A153                 db 0FFh
.eh_frame:000000000000A154                 db  2Bh ; +
.eh_frame:000000000000A155                 db    0
.eh_frame:000000000000A156                 db    0
.eh_frame:000000000000A157                 db    0
.eh_frame:000000000000A158                 db    0
.eh_frame:000000000000A159                 db    0
.eh_frame:000000000000A15A                 db    0
.eh_frame:000000000000A15B                 db    0
.eh_frame:000000000000A15C                 db    0
.eh_frame:000000000000A15D                 db    0
.eh_frame:000000000000A15E                 db    0
.eh_frame:000000000000A15F                 db    0
.eh_frame:000000000000A160                 db  14h
.eh_frame:000000000000A161                 db    0
.eh_frame:000000000000A162                 db    0
.eh_frame:000000000000A163                 db    0
.eh_frame:000000000000A164                 db    0
.eh_frame:000000000000A165                 db    0
.eh_frame:000000000000A166                 db    0
.eh_frame:000000000000A167                 db    0
.eh_frame:000000000000A168                 db    1
.eh_frame:000000000000A169                 db  7Ah ; z
.eh_frame:000000000000A16A                 db  52h ; R
.eh_frame:000000000000A16B                 db    0
.eh_frame:000000000000A16C                 db    1
.eh_frame:000000000000A16D                 db  78h ; x
.eh_frame:000000000000A16E                 db  10h
.eh_frame:000000000000A16F                 db    1
.eh_frame:000000000000A170                 db  1Bh
.eh_frame:000000000000A171                 db  0Ch
.eh_frame:000000000000A172                 db    7
.eh_frame:000000000000A173                 db    8
.eh_frame:000000000000A174                 db  90h
.eh_frame:000000000000A175                 db    1
.eh_frame:000000000000A176                 db    0
.eh_frame:000000000000A177                 db    0
.eh_frame:000000000000A178                 db  24h ; $
.eh_frame:000000000000A179                 db    0
.eh_frame:000000000000A17A                 db    0
.eh_frame:000000000000A17B                 db    0
.eh_frame:000000000000A17C                 db  1Ch
.eh_frame:000000000000A17D                 db    0
.eh_frame:000000000000A17E                 db    0
.eh_frame:000000000000A17F                 db    0
.eh_frame:000000000000A180                 db  90h
.eh_frame:000000000000A181                 db  71h ; q
.eh_frame:000000000000A182                 db 0FFh
.eh_frame:000000000000A183                 db 0FFh
.eh_frame:000000000000A184                 db  10h
.eh_frame:000000000000A185                 db    3
.eh_frame:000000000000A186                 db    0
.eh_frame:000000000000A187                 db    0
.eh_frame:000000000000A188                 db    0
.eh_frame:000000000000A189                 db  0Eh
.eh_frame:000000000000A18A                 db  10h
.eh_frame:000000000000A18B                 db  46h ; F
.eh_frame:000000000000A18C                 db  0Eh
.eh_frame:000000000000A18D                 db  18h
.eh_frame:000000000000A18E                 db  4Ah ; J
.eh_frame:000000000000A18F                 db  0Fh
.eh_frame:000000000000A190                 db  0Bh
.eh_frame:000000000000A191                 db  77h ; w
.eh_frame:000000000000A192                 db    8
.eh_frame:000000000000A193                 db  80h
.eh_frame:000000000000A194                 db    0
.eh_frame:000000000000A195                 db  3Fh ; ?
.eh_frame:000000000000A196                 db  1Ah
.eh_frame:000000000000A197                 db  3Bh ; ;
.eh_frame:000000000000A198                 db  2Ah ; *
.eh_frame:000000000000A199                 db  33h ; 3
.eh_frame:000000000000A19A                 db  24h ; $
.eh_frame:000000000000A19B                 db  22h ; "
.eh_frame:000000000000A19C                 db    0
.eh_frame:000000000000A19D                 db    0
.eh_frame:000000000000A19E                 db    0
.eh_frame:000000000000A19F                 db    0
.eh_frame:000000000000A1A0                 db  14h
.eh_frame:000000000000A1A1                 db    0
.eh_frame:000000000000A1A2                 db    0
.eh_frame:000000000000A1A3                 db    0
.eh_frame:000000000000A1A4                 db  44h ; D
.eh_frame:000000000000A1A5                 db    0
.eh_frame:000000000000A1A6                 db    0
.eh_frame:000000000000A1A7                 db    0
.eh_frame:000000000000A1A8                 db  78h ; x
.eh_frame:000000000000A1A9                 db  74h ; t
.eh_frame:000000000000A1AA                 db 0FFh
.eh_frame:000000000000A1AB                 db 0FFh
.eh_frame:000000000000A1AC                 db    8
.eh_frame:000000000000A1AD                 db    0
.eh_frame:000000000000A1AE                 db    0
.eh_frame:000000000000A1AF                 db    0
.eh_frame:000000000000A1B0                 db    0
.eh_frame:000000000000A1B1                 db    0
.eh_frame:000000000000A1B2                 db    0
.eh_frame:000000000000A1B3                 db    0
.eh_frame:000000000000A1B4                 db    0
.eh_frame:000000000000A1B5                 db    0
.eh_frame:000000000000A1B6                 db    0
.eh_frame:000000000000A1B7                 db    0
.eh_frame:000000000000A1B8                 db  10h
.eh_frame:000000000000A1B9                 db    0
.eh_frame:000000000000A1BA                 db    0
.eh_frame:000000000000A1BB                 db    0
.eh_frame:000000000000A1BC                 db  5Ch ; \
.eh_frame:000000000000A1BD                 db    0
.eh_frame:000000000000A1BE                 db    0
.eh_frame:000000000000A1BF                 db    0
.eh_frame:000000000000A1C0                 db  40h ; @
.eh_frame:000000000000A1C1                 db  77h ; w
.eh_frame:000000000000A1C2                 db 0FFh
.eh_frame:000000000000A1C3                 db 0FFh
.eh_frame:000000000000A1C4                 db  6Ah ; j
.eh_frame:000000000000A1C5                 db    1
.eh_frame:000000000000A1C6                 db    0
.eh_frame:000000000000A1C7                 db    0
.eh_frame:000000000000A1C8                 db    0
.eh_frame:000000000000A1C9                 db    0
.eh_frame:000000000000A1CA                 db    0
.eh_frame:000000000000A1CB                 db    0
.eh_frame:000000000000A1CC                 db  14h
.eh_frame:000000000000A1CD                 db    0
.eh_frame:000000000000A1CE                 db    0
.eh_frame:000000000000A1CF                 db    0
.eh_frame:000000000000A1D0                 db  70h ; p
.eh_frame:000000000000A1D1                 db    0
.eh_frame:000000000000A1D2                 db    0
.eh_frame:000000000000A1D3                 db    0
.eh_frame:000000000000A1D4                 db  9Ch
.eh_frame:000000000000A1D5                 db  78h ; x
.eh_frame:000000000000A1D6                 db 0FFh
.eh_frame:000000000000A1D7                 db 0FFh
.eh_frame:000000000000A1D8                 db 0AAh
.eh_frame:000000000000A1D9                 db    0
.eh_frame:000000000000A1DA                 db    0
.eh_frame:000000000000A1DB                 db    0
.eh_frame:000000000000A1DC                 db    0
.eh_frame:000000000000A1DD                 db  47h ; G
.eh_frame:000000000000A1DE                 db  0Eh
.eh_frame:000000000000A1DF                 db 0E0h
.eh_frame:000000000000A1E0                 db    1
.eh_frame:000000000000A1E1                 db    0
.eh_frame:000000000000A1E2                 db    0
.eh_frame:000000000000A1E3                 db    0
.eh_frame:000000000000A1E4                 db  1Ch
.eh_frame:000000000000A1E5                 db    0
.eh_frame:000000000000A1E6                 db    0
.eh_frame:000000000000A1E7                 db    0
.eh_frame:000000000000A1E8                 db  88h
.eh_frame:000000000000A1E9                 db    0
.eh_frame:000000000000A1EA                 db    0
.eh_frame:000000000000A1EB                 db    0
.eh_frame:000000000000A1EC                 db  34h ; 4
.eh_frame:000000000000A1ED                 db  79h ; y
.eh_frame:000000000000A1EE                 db 0FFh
.eh_frame:000000000000A1EF                 db 0FFh
.eh_frame:000000000000A1F0                 db 0D4h
.eh_frame:000000000000A1F1                 db    0
.eh_frame:000000000000A1F2                 db    0
.eh_frame:000000000000A1F3                 db    0
.eh_frame:000000000000A1F4                 db    0
.eh_frame:000000000000A1F5                 db  41h ; A
.eh_frame:000000000000A1F6                 db  0Eh
.eh_frame:000000000000A1F7                 db  10h
.eh_frame:000000000000A1F8                 db  83h
.eh_frame:000000000000A1F9                 db    2
.eh_frame:000000000000A1FA                 db    2
.eh_frame:000000000000A1FB                 db  85h
.eh_frame:000000000000A1FC                 db  0Ah
.eh_frame:000000000000A1FD                 db  0Eh
.eh_frame:000000000000A1FE                 db    8
.eh_frame:000000000000A1FF                 db  4Ah ; J
.eh_frame:000000000000A200                 db  0Bh
.eh_frame:000000000000A201                 db    0
.eh_frame:000000000000A202                 db    0
.eh_frame:000000000000A203                 db    0
.eh_frame:000000000000A204                 db  14h
.eh_frame:000000000000A205                 db    0
.eh_frame:000000000000A206                 db    0
.eh_frame:000000000000A207                 db    0
.eh_frame:000000000000A208                 db 0A8h
.eh_frame:000000000000A209                 db    0
.eh_frame:000000000000A20A                 db    0
.eh_frame:000000000000A20B                 db    0
.eh_frame:000000000000A20C                 db 0F4h
.eh_frame:000000000000A20D                 db  79h ; y
.eh_frame:000000000000A20E                 db 0FFh
.eh_frame:000000000000A20F                 db 0FFh
.eh_frame:000000000000A210                 db  3Ch ; <
.eh_frame:000000000000A211                 db    0
.eh_frame:000000000000A212                 db    0
.eh_frame:000000000000A213                 db    0
.eh_frame:000000000000A214                 db    0
.eh_frame:000000000000A215                 db  4Fh ; O
.eh_frame:000000000000A216                 db  0Eh
.eh_frame:000000000000A217                 db  10h
.eh_frame:000000000000A218                 db  83h
.eh_frame:000000000000A219                 db    2
.eh_frame:000000000000A21A                 db    0
.eh_frame:000000000000A21B                 db    0
.eh_frame:000000000000A21C                 db  10h
.eh_frame:000000000000A21D                 db    0
.eh_frame:000000000000A21E                 db    0
.eh_frame:000000000000A21F                 db    0
.eh_frame:000000000000A220                 db 0C0h
.eh_frame:000000000000A221                 db    0
.eh_frame:000000000000A222                 db    0
.eh_frame:000000000000A223                 db    0
.eh_frame:000000000000A224                 db  1Ch
.eh_frame:000000000000A225                 db  7Ah ; z
.eh_frame:000000000000A226                 db 0FFh
.eh_frame:000000000000A227                 db 0FFh
.eh_frame:000000000000A228                 db  2Ah ; *
.eh_frame:000000000000A229                 db    0
.eh_frame:000000000000A22A                 db    0
.eh_frame:000000000000A22B                 db    0
.eh_frame:000000000000A22C                 db    0
.eh_frame:000000000000A22D                 db  65h ; e
.eh_frame:000000000000A22E                 db  0Eh
.eh_frame:000000000000A22F                 db  10h
.eh_frame:000000000000A230                 db  48h ; H
.eh_frame:000000000000A231                 db    0
.eh_frame:000000000000A232                 db    0
.eh_frame:000000000000A233                 db    0
.eh_frame:000000000000A234                 db 0D4h
.eh_frame:000000000000A235                 db    0
.eh_frame:000000000000A236                 db    0
.eh_frame:000000000000A237                 db    0
.eh_frame:000000000000A238                 db  38h ; 8
.eh_frame:000000000000A239                 db  7Ah ; z
.eh_frame:000000000000A23A                 db 0FFh
.eh_frame:000000000000A23B                 db 0FFh
.eh_frame:000000000000A23C                 db  6Dh ; m
.eh_frame:000000000000A23D                 db    5
.eh_frame:000000000000A23E                 db    0
.eh_frame:000000000000A23F                 db    0
.eh_frame:000000000000A240                 db    0
.eh_frame:000000000000A241                 db  42h ; B
.eh_frame:000000000000A242                 db  0Eh
.eh_frame:000000000000A243                 db  10h
.eh_frame:000000000000A244                 db  8Fh
.eh_frame:000000000000A245                 db    2
.eh_frame:000000000000A246                 db  42h ; B
.eh_frame:000000000000A247                 db  0Eh
.eh_frame:000000000000A248                 db  18h
.eh_frame:000000000000A249                 db  8Eh
.eh_frame:000000000000A24A                 db    3
.eh_frame:000000000000A24B                 db  44h ; D
.eh_frame:000000000000A24C                 db  0Eh
.eh_frame:000000000000A24D                 db  20h
.eh_frame:000000000000A24E                 db  8Dh
.eh_frame:000000000000A24F                 db    4
.eh_frame:000000000000A250                 db  42h ; B
.eh_frame:000000000000A251                 db  0Eh
.eh_frame:000000000000A252                 db  28h ; (
.eh_frame:000000000000A253                 db  8Ch
.eh_frame:000000000000A254                 db    5
.eh_frame:000000000000A255                 db  41h ; A
.eh_frame:000000000000A256                 db  0Eh
.eh_frame:000000000000A257                 db  30h ; 0
.eh_frame:000000000000A258                 db  86h
.eh_frame:000000000000A259                 db    6
.eh_frame:000000000000A25A                 db  41h ; A
.eh_frame:000000000000A25B                 db  0Eh
.eh_frame:000000000000A25C                 db  38h ; 8
.eh_frame:000000000000A25D                 db  83h
.eh_frame:000000000000A25E                 db    7
.eh_frame:000000000000A25F                 db  47h ; G
.eh_frame:000000000000A260                 db  0Eh
.eh_frame:000000000000A261                 db 0B0h
.eh_frame:000000000000A262                 db    3
.eh_frame:000000000000A263                 db    2
.eh_frame:000000000000A264                 db 0EDh
.eh_frame:000000000000A265                 db  0Ah
.eh_frame:000000000000A266                 db  0Eh
.eh_frame:000000000000A267                 db  38h ; 8
.eh_frame:000000000000A268                 db  41h ; A
.eh_frame:000000000000A269                 db  0Eh
.eh_frame:000000000000A26A                 db  30h ; 0
.eh_frame:000000000000A26B                 db  41h ; A
.eh_frame:000000000000A26C                 db  0Eh
.eh_frame:000000000000A26D                 db  28h ; (
.eh_frame:000000000000A26E                 db  42h ; B
.eh_frame:000000000000A26F                 db  0Eh
.eh_frame:000000000000A270                 db  20h
.eh_frame:000000000000A271                 db  42h ; B
.eh_frame:000000000000A272                 db  0Eh
.eh_frame:000000000000A273                 db  18h
.eh_frame:000000000000A274                 db  42h ; B
.eh_frame:000000000000A275                 db  0Eh
.eh_frame:000000000000A276                 db  10h
.eh_frame:000000000000A277                 db  42h ; B
.eh_frame:000000000000A278                 db  0Eh
.eh_frame:000000000000A279                 db    8
.eh_frame:000000000000A27A                 db  46h ; F
.eh_frame:000000000000A27B                 db  0Bh
.eh_frame:000000000000A27C                 db  28h ; (
.eh_frame:000000000000A27D                 db    0
.eh_frame:000000000000A27E                 db    0
.eh_frame:000000000000A27F                 db    0
.eh_frame:000000000000A280                 db  20h
.eh_frame:000000000000A281                 db    1
.eh_frame:000000000000A282                 db    0
.eh_frame:000000000000A283                 db    0
.eh_frame:000000000000A284                 db  5Ch ; \
.eh_frame:000000000000A285                 db  7Fh ; 
.eh_frame:000000000000A286                 db 0FFh
.eh_frame:000000000000A287                 db 0FFh
.eh_frame:000000000000A288                 db 0D1h
.eh_frame:000000000000A289                 db    5
.eh_frame:000000000000A28A                 db    0
.eh_frame:000000000000A28B                 db    0
.eh_frame:000000000000A28C                 db    0
.eh_frame:000000000000A28D                 db  41h ; A
.eh_frame:000000000000A28E                 db  0Eh
.eh_frame:000000000000A28F                 db  10h
.eh_frame:000000000000A290                 db  86h
.eh_frame:000000000000A291                 db    2
.eh_frame:000000000000A292                 db  41h ; A
.eh_frame:000000000000A293                 db  0Eh
.eh_frame:000000000000A294                 db  18h
.eh_frame:000000000000A295                 db  83h
.eh_frame:000000000000A296                 db    3
.eh_frame:000000000000A297                 db  47h ; G
.eh_frame:000000000000A298                 db  0Eh
.eh_frame:000000000000A299                 db 0C0h
.eh_frame:000000000000A29A                 db    1
.eh_frame:000000000000A29B                 db    2
.eh_frame:000000000000A29C                 db  85h
.eh_frame:000000000000A29D                 db  0Ah
.eh_frame:000000000000A29E                 db  0Eh
.eh_frame:000000000000A29F                 db  18h
.eh_frame:000000000000A2A0                 db  41h ; A
.eh_frame:000000000000A2A1                 db  0Eh
.eh_frame:000000000000A2A2                 db  10h
.eh_frame:000000000000A2A3                 db  41h ; A
.eh_frame:000000000000A2A4                 db  0Eh
.eh_frame:000000000000A2A5                 db    8
.eh_frame:000000000000A2A6                 db  48h ; H
.eh_frame:000000000000A2A7                 db  0Bh
.eh_frame:000000000000A2A8                 db  14h
.eh_frame:000000000000A2A9                 db    0
.eh_frame:000000000000A2AA                 db    0
.eh_frame:000000000000A2AB                 db    0
.eh_frame:000000000000A2AC                 db  4Ch ; L
.eh_frame:000000000000A2AD                 db    1
.eh_frame:000000000000A2AE                 db    0
.eh_frame:000000000000A2AF                 db    0
.eh_frame:000000000000A2B0                 db  10h
.eh_frame:000000000000A2B1                 db  85h
.eh_frame:000000000000A2B2                 db 0FFh
.eh_frame:000000000000A2B3                 db 0FFh
.eh_frame:000000000000A2B4                 db  70h ; p
.eh_frame:000000000000A2B5                 db    0
.eh_frame:000000000000A2B6                 db    0
.eh_frame:000000000000A2B7                 db    0
.eh_frame:000000000000A2B8                 db    0
.eh_frame:000000000000A2B9                 db    2
.eh_frame:000000000000A2BA                 db  6Bh ; k
.eh_frame:000000000000A2BB                 db  0Eh
.eh_frame:000000000000A2BC                 db  10h
.eh_frame:000000000000A2BD                 db    0
.eh_frame:000000000000A2BE                 db    0
.eh_frame:000000000000A2BF                 db    0
.eh_frame:000000000000A2C0                 db  30h ; 0
.eh_frame:000000000000A2C1                 db    0
.eh_frame:000000000000A2C2                 db    0
.eh_frame:000000000000A2C3                 db    0
.eh_frame:000000000000A2C4                 db  64h ; d
.eh_frame:000000000000A2C5                 db    1
.eh_frame:000000000000A2C6                 db    0
.eh_frame:000000000000A2C7                 db    0
.eh_frame:000000000000A2C8                 db  68h ; h
.eh_frame:000000000000A2C9                 db  85h
.eh_frame:000000000000A2CA                 db 0FFh
.eh_frame:000000000000A2CB                 db 0FFh
.eh_frame:000000000000A2CC                 db  3Fh ; ?
.eh_frame:000000000000A2CD                 db    1
.eh_frame:000000000000A2CE                 db    0
.eh_frame:000000000000A2CF                 db    0
.eh_frame:000000000000A2D0                 db    0
.eh_frame:000000000000A2D1                 db  44h ; D
.eh_frame:000000000000A2D2                 db  0Eh
.eh_frame:000000000000A2D3                 db  10h
.eh_frame:000000000000A2D4                 db    2
.eh_frame:000000000000A2D5                 db  77h ; w
.eh_frame:000000000000A2D6                 db  0Ah
.eh_frame:000000000000A2D7                 db  0Eh
.eh_frame:000000000000A2D8                 db    8
.eh_frame:000000000000A2D9                 db  45h ; E
.eh_frame:000000000000A2DA                 db  0Bh
.eh_frame:000000000000A2DB                 db  44h ; D
.eh_frame:000000000000A2DC                 db  0Ah
.eh_frame:000000000000A2DD                 db  0Eh
.eh_frame:000000000000A2DE                 db    8
.eh_frame:000000000000A2DF                 db  4Ch ; L
.eh_frame:000000000000A2E0                 db  0Bh
.eh_frame:000000000000A2E1                 db  6Ah ; j
.eh_frame:000000000000A2E2                 db  0Ah
.eh_frame:000000000000A2E3                 db  0Eh
.eh_frame:000000000000A2E4                 db    8
.eh_frame:000000000000A2E5                 db  46h ; F
.eh_frame:000000000000A2E6                 db  0Bh
.eh_frame:000000000000A2E7                 db  52h ; R
.eh_frame:000000000000A2E8                 db  0Ah
.eh_frame:000000000000A2E9                 db  0Eh
.eh_frame:000000000000A2EA                 db    8
.eh_frame:000000000000A2EB                 db  46h ; F
.eh_frame:000000000000A2EC                 db  0Bh
.eh_frame:000000000000A2ED                 db  44h ; D
.eh_frame:000000000000A2EE                 db  0Ah
.eh_frame:000000000000A2EF                 db  0Eh
.eh_frame:000000000000A2F0                 db    8
.eh_frame:000000000000A2F1                 db  4Ch ; L
.eh_frame:000000000000A2F2                 db  0Bh
.eh_frame:000000000000A2F3                 db    0
.eh_frame:000000000000A2F4                 db  48h ; H
.eh_frame:000000000000A2F5                 db    0
.eh_frame:000000000000A2F6                 db    0
.eh_frame:000000000000A2F7                 db    0
.eh_frame:000000000000A2F8                 db  98h
.eh_frame:000000000000A2F9                 db    1
.eh_frame:000000000000A2FA                 db    0
.eh_frame:000000000000A2FB                 db    0
.eh_frame:000000000000A2FC                 db  74h ; t
.eh_frame:000000000000A2FD                 db  86h
.eh_frame:000000000000A2FE                 db 0FFh
.eh_frame:000000000000A2FF                 db 0FFh
.eh_frame:000000000000A300                 db 0D9h
.eh_frame:000000000000A301                 db    3
.eh_frame:000000000000A302                 db    0
.eh_frame:000000000000A303                 db    0
.eh_frame:000000000000A304                 db    0
.eh_frame:000000000000A305                 db  42h ; B
.eh_frame:000000000000A306                 db  0Eh
.eh_frame:000000000000A307                 db  10h
.eh_frame:000000000000A308                 db  8Fh
.eh_frame:000000000000A309                 db    2
.eh_frame:000000000000A30A                 db  42h ; B
.eh_frame:000000000000A30B                 db  0Eh
.eh_frame:000000000000A30C                 db  18h
.eh_frame:000000000000A30D                 db  8Eh
.eh_frame:000000000000A30E                 db    3
.eh_frame:000000000000A30F                 db  42h ; B
.eh_frame:000000000000A310                 db  0Eh
.eh_frame:000000000000A311                 db  20h
.eh_frame:000000000000A312                 db  8Dh
.eh_frame:000000000000A313                 db    4
.eh_frame:000000000000A314                 db  42h ; B
.eh_frame:000000000000A315                 db  0Eh
.eh_frame:000000000000A316                 db  28h ; (
.eh_frame:000000000000A317                 db  8Ch
.eh_frame:000000000000A318                 db    5
.eh_frame:000000000000A319                 db  41h ; A
.eh_frame:000000000000A31A                 db  0Eh
.eh_frame:000000000000A31B                 db  30h ; 0
.eh_frame:000000000000A31C                 db  86h
.eh_frame:000000000000A31D                 db    6
.eh_frame:000000000000A31E                 db  41h ; A
.eh_frame:000000000000A31F                 db  0Eh
.eh_frame:000000000000A320                 db  38h ; 8
.eh_frame:000000000000A321                 db  83h
.eh_frame:000000000000A322                 db    7
.eh_frame:000000000000A323                 db  44h ; D
.eh_frame:000000000000A324                 db  0Eh
.eh_frame:000000000000A325                 db  50h ; P
.eh_frame:000000000000A326                 db    3
.eh_frame:000000000000A327                 db  76h ; v
.eh_frame:000000000000A328                 db    2
.eh_frame:000000000000A329                 db  0Ah
.eh_frame:000000000000A32A                 db  0Eh
.eh_frame:000000000000A32B                 db  38h ; 8
.eh_frame:000000000000A32C                 db  41h ; A
.eh_frame:000000000000A32D                 db  0Eh
.eh_frame:000000000000A32E                 db  30h ; 0
.eh_frame:000000000000A32F                 db  41h ; A
.eh_frame:000000000000A330                 db  0Eh
.eh_frame:000000000000A331                 db  28h ; (
.eh_frame:000000000000A332                 db  42h ; B
.eh_frame:000000000000A333                 db  0Eh
.eh_frame:000000000000A334                 db  20h
.eh_frame:000000000000A335                 db  42h ; B
.eh_frame:000000000000A336                 db  0Eh
.eh_frame:000000000000A337                 db  18h
.eh_frame:000000000000A338                 db  42h ; B
.eh_frame:000000000000A339                 db  0Eh
.eh_frame:000000000000A33A                 db  10h
.eh_frame:000000000000A33B                 db  42h ; B
.eh_frame:000000000000A33C                 db  0Eh
.eh_frame:000000000000A33D                 db    8
.eh_frame:000000000000A33E                 db  42h ; B
.eh_frame:000000000000A33F                 db  0Bh
.eh_frame:000000000000A340                 db  2Ch ; ,
.eh_frame:000000000000A341                 db    0
.eh_frame:000000000000A342                 db    0
.eh_frame:000000000000A343                 db    0
.eh_frame:000000000000A344                 db 0E4h
.eh_frame:000000000000A345                 db    1
.eh_frame:000000000000A346                 db    0
.eh_frame:000000000000A347                 db    0
.eh_frame:000000000000A348                 db    8
.eh_frame:000000000000A349                 db  8Ah
.eh_frame:000000000000A34A                 db 0FFh
.eh_frame:000000000000A34B                 db 0FFh
.eh_frame:000000000000A34C                 db  48h ; H
.eh_frame:000000000000A34D                 db    1
.eh_frame:000000000000A34E                 db    0
.eh_frame:000000000000A34F                 db    0
.eh_frame:000000000000A350                 db    0
.eh_frame:000000000000A351                 db  4Fh ; O
.eh_frame:000000000000A352                 db  0Eh
.eh_frame:000000000000A353                 db  10h
.eh_frame:000000000000A354                 db  83h
.eh_frame:000000000000A355                 db    2
.eh_frame:000000000000A356                 db    2
.eh_frame:000000000000A357                 db  60h ; `
.eh_frame:000000000000A358                 db  0Ah
.eh_frame:000000000000A359                 db  0Eh
.eh_frame:000000000000A35A                 db    8
.eh_frame:000000000000A35B                 db  49h ; I
.eh_frame:000000000000A35C                 db  0Bh
.eh_frame:000000000000A35D                 db  7Bh ; {
.eh_frame:000000000000A35E                 db  0Ah
.eh_frame:000000000000A35F                 db  0Eh
.eh_frame:000000000000A360                 db    8
.eh_frame:000000000000A361                 db  55h ; U
.eh_frame:000000000000A362                 db  0Bh
.eh_frame:000000000000A363                 db  7Eh ; ~
.eh_frame:000000000000A364                 db  0Ah
.eh_frame:000000000000A365                 db  0Eh
.eh_frame:000000000000A366                 db    8
.eh_frame:000000000000A367                 db  4Ah ; J
.eh_frame:000000000000A368                 db  0Bh
.eh_frame:000000000000A369                 db  41h ; A
.eh_frame:000000000000A36A                 db  0Ah
.eh_frame:000000000000A36B                 db  0Eh
.eh_frame:000000000000A36C                 db    8
.eh_frame:000000000000A36D                 db  47h ; G
.eh_frame:000000000000A36E                 db  0Bh
.eh_frame:000000000000A36F                 db    0
.eh_frame:000000000000A370                 db  1Ch
.eh_frame:000000000000A371                 db    0
.eh_frame:000000000000A372                 db    0
.eh_frame:000000000000A373                 db    0
.eh_frame:000000000000A374                 db  14h
.eh_frame:000000000000A375                 db    2
.eh_frame:000000000000A376                 db    0
.eh_frame:000000000000A377                 db    0
.eh_frame:000000000000A378                 db  28h ; (
.eh_frame:000000000000A379                 db  8Bh
.eh_frame:000000000000A37A                 db 0FFh
.eh_frame:000000000000A37B                 db 0FFh
.eh_frame:000000000000A37C                 db 0D6h
.eh_frame:000000000000A37D                 db    3
.eh_frame:000000000000A37E                 db    0
.eh_frame:000000000000A37F                 db    0
.eh_frame:000000000000A380                 db    0
.eh_frame:000000000000A381                 db  44h ; D
.eh_frame:000000000000A382                 db  0Eh
.eh_frame:000000000000A383                 db  10h
.eh_frame:000000000000A384                 db  8Ch
.eh_frame:000000000000A385                 db    2
.eh_frame:000000000000A386                 db  41h ; A
.eh_frame:000000000000A387                 db  0Eh
.eh_frame:000000000000A388                 db  18h
.eh_frame:000000000000A389                 db  86h
.eh_frame:000000000000A38A                 db    3
.eh_frame:000000000000A38B                 db  41h ; A
.eh_frame:000000000000A38C                 db  0Eh
.eh_frame:000000000000A38D                 db  20h
.eh_frame:000000000000A38E                 db  83h
.eh_frame:000000000000A38F                 db    4
.eh_frame:000000000000A390                 db  34h ; 4
.eh_frame:000000000000A391                 db    0
.eh_frame:000000000000A392                 db    0
.eh_frame:000000000000A393                 db    0
.eh_frame:000000000000A394                 db  34h ; 4
.eh_frame:000000000000A395                 db    2
.eh_frame:000000000000A396                 db    0
.eh_frame:000000000000A397                 db    0
.eh_frame:000000000000A398                 db  98h
.eh_frame:000000000000A399                 db  72h ; r
.eh_frame:000000000000A39A                 db 0FFh
.eh_frame:000000000000A39B                 db 0FFh
.eh_frame:000000000000A39C                 db 0BAh
.eh_frame:000000000000A39D                 db    1
.eh_frame:000000000000A39E                 db    0
.eh_frame:000000000000A39F                 db    0
.eh_frame:000000000000A3A0                 db    0
.eh_frame:000000000000A3A1                 db  41h ; A
.eh_frame:000000000000A3A2                 db  0Eh
.eh_frame:000000000000A3A3                 db  10h
.eh_frame:000000000000A3A4                 db  86h
.eh_frame:000000000000A3A5                 db    2
.eh_frame:000000000000A3A6                 db  41h ; A
.eh_frame:000000000000A3A7                 db  0Eh
.eh_frame:000000000000A3A8                 db  18h
.eh_frame:000000000000A3A9                 db  83h
.eh_frame:000000000000A3AA                 db    3
.eh_frame:000000000000A3AB                 db  49h ; I
.eh_frame:000000000000A3AC                 db  0Eh
.eh_frame:000000000000A3AD                 db  20h
.eh_frame:000000000000A3AE                 db    2
.eh_frame:000000000000A3AF                 db 0B7h
.eh_frame:000000000000A3B0                 db  0Ah
.eh_frame:000000000000A3B1                 db  0Eh
.eh_frame:000000000000A3B2                 db  18h
.eh_frame:000000000000A3B3                 db  43h ; C
.eh_frame:000000000000A3B4                 db  0Eh
.eh_frame:000000000000A3B5                 db  10h
.eh_frame:000000000000A3B6                 db  41h ; A
.eh_frame:000000000000A3B7                 db  0Eh
.eh_frame:000000000000A3B8                 db    8
.eh_frame:000000000000A3B9                 db  41h ; A
.eh_frame:000000000000A3BA                 db  0Bh
.eh_frame:000000000000A3BB                 db    2
.eh_frame:000000000000A3BC                 db  62h ; b
.eh_frame:000000000000A3BD                 db  0Eh
.eh_frame:000000000000A3BE                 db  28h ; (
.eh_frame:000000000000A3BF                 db  50h ; P
.eh_frame:000000000000A3C0                 db  0Eh
.eh_frame:000000000000A3C1                 db  30h ; 0
.eh_frame:000000000000A3C2                 db  64h ; d
.eh_frame:000000000000A3C3                 db  0Eh
.eh_frame:000000000000A3C4                 db  28h ; (
.eh_frame:000000000000A3C5                 db  41h ; A
.eh_frame:000000000000A3C6                 db  0Eh
.eh_frame:000000000000A3C7                 db  20h
.eh_frame:000000000000A3C8                 db  10h
.eh_frame:000000000000A3C9                 db    0
.eh_frame:000000000000A3CA                 db    0
.eh_frame:000000000000A3CB                 db    0
.eh_frame:000000000000A3CC                 db  6Ch ; l
.eh_frame:000000000000A3CD                 db    2
.eh_frame:000000000000A3CE                 db    0
.eh_frame:000000000000A3CF                 db    0
.eh_frame:000000000000A3D0                 db 0B0h
.eh_frame:000000000000A3D1                 db  8Eh
.eh_frame:000000000000A3D2                 db 0FFh
.eh_frame:000000000000A3D3                 db 0FFh
.eh_frame:000000000000A3D4                 db    8
.eh_frame:000000000000A3D5                 db    0
.eh_frame:000000000000A3D6                 db    0
.eh_frame:000000000000A3D7                 db    0
.eh_frame:000000000000A3D8                 db    0
.eh_frame:000000000000A3D9                 db    0
.eh_frame:000000000000A3DA                 db    0
.eh_frame:000000000000A3DB                 db    0
.eh_frame:000000000000A3DC                 db  10h
.eh_frame:000000000000A3DD                 db    0
.eh_frame:000000000000A3DE                 db    0
.eh_frame:000000000000A3DF                 db    0
.eh_frame:000000000000A3E0                 db  80h
.eh_frame:000000000000A3E1                 db    2
.eh_frame:000000000000A3E2                 db    0
.eh_frame:000000000000A3E3                 db    0
.eh_frame:000000000000A3E4                 db 0ACh
.eh_frame:000000000000A3E5                 db  8Eh
.eh_frame:000000000000A3E6                 db 0FFh
.eh_frame:000000000000A3E7                 db 0FFh
.eh_frame:000000000000A3E8                 db    8
.eh_frame:000000000000A3E9                 db    0
.eh_frame:000000000000A3EA                 db    0
.eh_frame:000000000000A3EB                 db    0
.eh_frame:000000000000A3EC                 db    0
.eh_frame:000000000000A3ED                 db    0
.eh_frame:000000000000A3EE                 db    0
.eh_frame:000000000000A3EF                 db    0
.eh_frame:000000000000A3F0                 db  2Ch ; ,
.eh_frame:000000000000A3F1                 db    0
.eh_frame:000000000000A3F2                 db    0
.eh_frame:000000000000A3F3                 db    0
.eh_frame:000000000000A3F4                 db  94h
.eh_frame:000000000000A3F5                 db    2
.eh_frame:000000000000A3F6                 db    0
.eh_frame:000000000000A3F7                 db    0
.eh_frame:000000000000A3F8                 db 0A8h
.eh_frame:000000000000A3F9                 db  8Eh
.eh_frame:000000000000A3FA                 db 0FFh
.eh_frame:000000000000A3FB                 db 0FFh
.eh_frame:000000000000A3FC                 db 0A4h
.eh_frame:000000000000A3FD                 db    0
.eh_frame:000000000000A3FE                 db    0
.eh_frame:000000000000A3FF                 db    0
.eh_frame:000000000000A400                 db    0
.eh_frame:000000000000A401                 db  41h ; A
.eh_frame:000000000000A402                 db  0Eh
.eh_frame:000000000000A403                 db  10h
.eh_frame:000000000000A404                 db  86h
.eh_frame:000000000000A405                 db    2
.eh_frame:000000000000A406                 db  41h ; A
.eh_frame:000000000000A407                 db  0Eh
.eh_frame:000000000000A408                 db  18h
.eh_frame:000000000000A409                 db  83h
.eh_frame:000000000000A40A                 db    3
.eh_frame:000000000000A40B                 db  44h ; D
.eh_frame:000000000000A40C                 db  0Eh
.eh_frame:000000000000A40D                 db  20h
.eh_frame:000000000000A40E                 db  7Ah ; z
.eh_frame:000000000000A40F                 db  0Ah
.eh_frame:000000000000A410                 db  0Eh
.eh_frame:000000000000A411                 db  18h
.eh_frame:000000000000A412                 db  41h ; A
.eh_frame:000000000000A413                 db  0Eh
.eh_frame:000000000000A414                 db  10h
.eh_frame:000000000000A415                 db  41h ; A
.eh_frame:000000000000A416                 db  0Eh
.eh_frame:000000000000A417                 db    8
.eh_frame:000000000000A418                 db  41h ; A
.eh_frame:000000000000A419                 db  0Bh
.eh_frame:000000000000A41A                 db    0
.eh_frame:000000000000A41B                 db    0
.eh_frame:000000000000A41C                 db    0
.eh_frame:000000000000A41D                 db    0
.eh_frame:000000000000A41E                 db    0
.eh_frame:000000000000A41F                 db    0
.eh_frame:000000000000A420                 db  14h
.eh_frame:000000000000A421                 db    0
.eh_frame:000000000000A422                 db    0
.eh_frame:000000000000A423                 db    0
.eh_frame:000000000000A424                 db 0C4h
.eh_frame:000000000000A425                 db    2
.eh_frame:000000000000A426                 db    0
.eh_frame:000000000000A427                 db    0
.eh_frame:000000000000A428                 db  28h ; (
.eh_frame:000000000000A429                 db  8Fh
.eh_frame:000000000000A42A                 db 0FFh
.eh_frame:000000000000A42B                 db 0FFh
.eh_frame:000000000000A42C                 db  42h ; B
.eh_frame:000000000000A42D                 db    0
.eh_frame:000000000000A42E                 db    0
.eh_frame:000000000000A42F                 db    0
.eh_frame:000000000000A430                 db    0
.eh_frame:000000000000A431                 db    0
.eh_frame:000000000000A432                 db    0
.eh_frame:000000000000A433                 db    0
.eh_frame:000000000000A434                 db    0
.eh_frame:000000000000A435                 db    0
.eh_frame:000000000000A436                 db    0
.eh_frame:000000000000A437                 db    0
.eh_frame:000000000000A438                 db  1Ch
.eh_frame:000000000000A439                 db    0
.eh_frame:000000000000A43A                 db    0
.eh_frame:000000000000A43B                 db    0
.eh_frame:000000000000A43C                 db 0DCh
.eh_frame:000000000000A43D                 db    2
.eh_frame:000000000000A43E                 db    0
.eh_frame:000000000000A43F                 db    0
.eh_frame:000000000000A440                 db  60h ; `
.eh_frame:000000000000A441                 db  8Fh
.eh_frame:000000000000A442                 db 0FFh
.eh_frame:000000000000A443                 db 0FFh
.eh_frame:000000000000A444                 db  9Fh
.eh_frame:000000000000A445                 db    0
.eh_frame:000000000000A446                 db    0
.eh_frame:000000000000A447                 db    0
.eh_frame:000000000000A448                 db    0
.eh_frame:000000000000A449                 db  44h ; D
.eh_frame:000000000000A44A                 db  0Eh
.eh_frame:000000000000A44B                 db  10h
.eh_frame:000000000000A44C                 db  83h
.eh_frame:000000000000A44D                 db    2
.eh_frame:000000000000A44E                 db    2
.eh_frame:000000000000A44F                 db  78h ; x
.eh_frame:000000000000A450                 db  0Ah
.eh_frame:000000000000A451                 db  0Eh
.eh_frame:000000000000A452                 db    8
.eh_frame:000000000000A453                 db  41h ; A
.eh_frame:000000000000A454                 db  0Bh
.eh_frame:000000000000A455                 db    0
.eh_frame:000000000000A456                 db    0
.eh_frame:000000000000A457                 db    0
.eh_frame:000000000000A458                 db  40h ; @
.eh_frame:000000000000A459                 db    0
.eh_frame:000000000000A45A                 db    0
.eh_frame:000000000000A45B                 db    0
.eh_frame:000000000000A45C                 db 0FCh
.eh_frame:000000000000A45D                 db    2
.eh_frame:000000000000A45E                 db    0
.eh_frame:000000000000A45F                 db    0
.eh_frame:000000000000A460                 db 0E0h
.eh_frame:000000000000A461                 db  8Fh
.eh_frame:000000000000A462                 db 0FFh
.eh_frame:000000000000A463                 db 0FFh
.eh_frame:000000000000A464                 db 0E7h
.eh_frame:000000000000A465                 db    0
.eh_frame:000000000000A466                 db    0
.eh_frame:000000000000A467                 db    0
.eh_frame:000000000000A468                 db    0
.eh_frame:000000000000A469                 db  41h ; A
.eh_frame:000000000000A46A                 db  0Eh
.eh_frame:000000000000A46B                 db  10h
.eh_frame:000000000000A46C                 db  86h
.eh_frame:000000000000A46D                 db    2
.eh_frame:000000000000A46E                 db  41h ; A
.eh_frame:000000000000A46F                 db  0Eh
.eh_frame:000000000000A470                 db  18h
.eh_frame:000000000000A471                 db  83h
.eh_frame:000000000000A472                 db    3
.eh_frame:000000000000A473                 db  49h ; I
.eh_frame:000000000000A474                 db  0Eh
.eh_frame:000000000000A475                 db  20h
.eh_frame:000000000000A476                 db  6Eh ; n
.eh_frame:000000000000A477                 db  0Ah
.eh_frame:000000000000A478                 db  0Eh
.eh_frame:000000000000A479                 db  18h
.eh_frame:000000000000A47A                 db  41h ; A
.eh_frame:000000000000A47B                 db  0Eh
.eh_frame:000000000000A47C                 db  10h
.eh_frame:000000000000A47D                 db  41h ; A
.eh_frame:000000000000A47E                 db  0Eh
.eh_frame:000000000000A47F                 db    8
.eh_frame:000000000000A480                 db  45h ; E
.eh_frame:000000000000A481                 db  0Bh
.eh_frame:000000000000A482                 db    2
.eh_frame:000000000000A483                 db  4Ah ; J
.eh_frame:000000000000A484                 db  0Ah
.eh_frame:000000000000A485                 db  0Eh
.eh_frame:000000000000A486                 db  18h
.eh_frame:000000000000A487                 db  41h ; A
.eh_frame:000000000000A488                 db  0Eh
.eh_frame:000000000000A489                 db  10h
.eh_frame:000000000000A48A                 db  41h ; A
.eh_frame:000000000000A48B                 db  0Eh
.eh_frame:000000000000A48C                 db    8
.eh_frame:000000000000A48D                 db  44h ; D
.eh_frame:000000000000A48E                 db  0Bh
.eh_frame:000000000000A48F                 db    2
.eh_frame:000000000000A490                 db  54h ; T
.eh_frame:000000000000A491                 db  0Eh
.eh_frame:000000000000A492                 db  18h
.eh_frame:000000000000A493                 db  41h ; A
.eh_frame:000000000000A494                 db  0Eh
.eh_frame:000000000000A495                 db  10h
.eh_frame:000000000000A496                 db  41h ; A
.eh_frame:000000000000A497                 db  0Eh
.eh_frame:000000000000A498                 db    8
.eh_frame:000000000000A499                 db    0
.eh_frame:000000000000A49A                 db    0
.eh_frame:000000000000A49B                 db    0
.eh_frame:000000000000A49C                 db  74h ; t
.eh_frame:000000000000A49D                 db    0
.eh_frame:000000000000A49E                 db    0
.eh_frame:000000000000A49F                 db    0
.eh_frame:000000000000A4A0                 db  40h ; @
.eh_frame:000000000000A4A1                 db    3
.eh_frame:000000000000A4A2                 db    0
.eh_frame:000000000000A4A3                 db    0
.eh_frame:000000000000A4A4                 db  8Ch
.eh_frame:000000000000A4A5                 db  90h
.eh_frame:000000000000A4A6                 db 0FFh
.eh_frame:000000000000A4A7                 db 0FFh
.eh_frame:000000000000A4A8                 db  34h ; 4
.eh_frame:000000000000A4A9                 db  12h
.eh_frame:000000000000A4AA                 db    0
.eh_frame:000000000000A4AB                 db    0
.eh_frame:000000000000A4AC                 db    0
.eh_frame:000000000000A4AD                 db  42h ; B
.eh_frame:000000000000A4AE                 db  0Eh
.eh_frame:000000000000A4AF                 db  10h
.eh_frame:000000000000A4B0                 db  8Fh
.eh_frame:000000000000A4B1                 db    2
.eh_frame:000000000000A4B2                 db  42h ; B
.eh_frame:000000000000A4B3                 db  0Eh
.eh_frame:000000000000A4B4                 db  18h
.eh_frame:000000000000A4B5                 db  8Eh
.eh_frame:000000000000A4B6                 db    3
.eh_frame:000000000000A4B7                 db  45h ; E
.eh_frame:000000000000A4B8                 db  0Eh
.eh_frame:000000000000A4B9                 db  20h
.eh_frame:000000000000A4BA                 db  8Dh
.eh_frame:000000000000A4BB                 db    4
.eh_frame:000000000000A4BC                 db  42h ; B
.eh_frame:000000000000A4BD                 db  0Eh
.eh_frame:000000000000A4BE                 db  28h ; (
.eh_frame:000000000000A4BF                 db  8Ch
.eh_frame:000000000000A4C0                 db    5
.eh_frame:000000000000A4C1                 db  44h ; D
.eh_frame:000000000000A4C2                 db  0Eh
.eh_frame:000000000000A4C3                 db  30h ; 0
.eh_frame:000000000000A4C4                 db  86h
.eh_frame:000000000000A4C5                 db    6
.eh_frame:000000000000A4C6                 db  41h ; A
.eh_frame:000000000000A4C7                 db  0Eh
.eh_frame:000000000000A4C8                 db  38h ; 8
.eh_frame:000000000000A4C9                 db  83h
.eh_frame:000000000000A4CA                 db    7
.eh_frame:000000000000A4CB                 db  53h ; S
.eh_frame:000000000000A4CC                 db  0Eh
.eh_frame:000000000000A4CD                 db 0F0h
.eh_frame:000000000000A4CE                 db    1
.eh_frame:000000000000A4CF                 db    3
.eh_frame:000000000000A4D0                 db  81h
.eh_frame:000000000000A4D1                 db  0Bh
.eh_frame:000000000000A4D2                 db  0Eh
.eh_frame:000000000000A4D3                 db 0F8h
.eh_frame:000000000000A4D4                 db    1
.eh_frame:000000000000A4D5                 db  4Ah ; J
.eh_frame:000000000000A4D6                 db  0Eh
.eh_frame:000000000000A4D7                 db  80h
.eh_frame:000000000000A4D8                 db    2
.eh_frame:000000000000A4D9                 db  44h ; D
.eh_frame:000000000000A4DA                 db  0Eh
.eh_frame:000000000000A4DB                 db  88h
.eh_frame:000000000000A4DC                 db    2
.eh_frame:000000000000A4DD                 db  45h ; E
.eh_frame:000000000000A4DE                 db  0Eh
.eh_frame:000000000000A4DF                 db  90h
.eh_frame:000000000000A4E0                 db    2
.eh_frame:000000000000A4E1                 db  5Fh ; _
.eh_frame:000000000000A4E2                 db  0Eh
.eh_frame:000000000000A4E3                 db 0F0h
.eh_frame:000000000000A4E4                 db    1
.eh_frame:000000000000A4E5                 db  64h ; d
.eh_frame:000000000000A4E6                 db  0Ah
.eh_frame:000000000000A4E7                 db  0Eh
.eh_frame:000000000000A4E8                 db  38h ; 8
.eh_frame:000000000000A4E9                 db  41h ; A
.eh_frame:000000000000A4EA                 db  0Eh
.eh_frame:000000000000A4EB                 db  30h ; 0
.eh_frame:000000000000A4EC                 db  41h ; A
.eh_frame:000000000000A4ED                 db  0Eh
.eh_frame:000000000000A4EE                 db  28h ; (
.eh_frame:000000000000A4EF                 db  42h ; B
.eh_frame:000000000000A4F0                 db  0Eh
.eh_frame:000000000000A4F1                 db  20h
.eh_frame:000000000000A4F2                 db  42h ; B
.eh_frame:000000000000A4F3                 db  0Eh
.eh_frame:000000000000A4F4                 db  18h
.eh_frame:000000000000A4F5                 db  42h ; B
.eh_frame:000000000000A4F6                 db  0Eh
.eh_frame:000000000000A4F7                 db  10h
.eh_frame:000000000000A4F8                 db  42h ; B
.eh_frame:000000000000A4F9                 db  0Eh
.eh_frame:000000000000A4FA                 db    8
.eh_frame:000000000000A4FB                 db  44h ; D
.eh_frame:000000000000A4FC                 db  0Bh
.eh_frame:000000000000A4FD                 db    3
.eh_frame:000000000000A4FE                 db  99h
.eh_frame:000000000000A4FF                 db    5
.eh_frame:000000000000A500                 db  0Eh
.eh_frame:000000000000A501                 db 0F8h
.eh_frame:000000000000A502                 db    1
.eh_frame:000000000000A503                 db  4Dh ; M
.eh_frame:000000000000A504                 db  0Eh
.eh_frame:000000000000A505                 db  80h
.eh_frame:000000000000A506                 db    2
.eh_frame:000000000000A507                 db  44h ; D
.eh_frame:000000000000A508                 db  0Eh
.eh_frame:000000000000A509                 db  88h
.eh_frame:000000000000A50A                 db    2
.eh_frame:000000000000A50B                 db  47h ; G
.eh_frame:000000000000A50C                 db  0Eh
.eh_frame:000000000000A50D                 db  90h
.eh_frame:000000000000A50E                 db    2
.eh_frame:000000000000A50F                 db  5Bh ; [
.eh_frame:000000000000A510                 db  0Eh
.eh_frame:000000000000A511                 db 0F0h
.eh_frame:000000000000A512                 db    1
.eh_frame:000000000000A513                 db    0
.eh_frame:000000000000A514                 db  68h ; h
.eh_frame:000000000000A515                 db    0
.eh_frame:000000000000A516                 db    0
.eh_frame:000000000000A517                 db    0
.eh_frame:000000000000A518                 db 0B8h
.eh_frame:000000000000A519                 db    3
.eh_frame:000000000000A51A                 db    0
.eh_frame:000000000000A51B                 db    0
.eh_frame:000000000000A51C                 db  54h ; T
.eh_frame:000000000000A51D                 db 0A2h
.eh_frame:000000000000A51E                 db 0FFh
.eh_frame:000000000000A51F                 db 0FFh
.eh_frame:000000000000A520                 db 0ABh
.eh_frame:000000000000A521                 db    1
.eh_frame:000000000000A522                 db    0
.eh_frame:000000000000A523                 db    0
.eh_frame:000000000000A524                 db    0
.eh_frame:000000000000A525                 db  42h ; B
.eh_frame:000000000000A526                 db  0Eh
.eh_frame:000000000000A527                 db  10h
.eh_frame:000000000000A528                 db  8Fh
.eh_frame:000000000000A529                 db    2
.eh_frame:000000000000A52A                 db  42h ; B
.eh_frame:000000000000A52B                 db  0Eh
.eh_frame:000000000000A52C                 db  18h
.eh_frame:000000000000A52D                 db  8Eh
.eh_frame:000000000000A52E                 db    3
.eh_frame:000000000000A52F                 db  45h ; E
.eh_frame:000000000000A530                 db  0Eh
.eh_frame:000000000000A531                 db  20h
.eh_frame:000000000000A532                 db  8Dh
.eh_frame:000000000000A533                 db    4
.eh_frame:000000000000A534                 db  42h ; B
.eh_frame:000000000000A535                 db  0Eh
.eh_frame:000000000000A536                 db  28h ; (
.eh_frame:000000000000A537                 db  8Ch
.eh_frame:000000000000A538                 db    5
.eh_frame:000000000000A539                 db  44h ; D
.eh_frame:000000000000A53A                 db  0Eh
.eh_frame:000000000000A53B                 db  30h ; 0
.eh_frame:000000000000A53C                 db  86h
.eh_frame:000000000000A53D                 db    6
.eh_frame:000000000000A53E                 db  41h ; A
.eh_frame:000000000000A53F                 db  0Eh
.eh_frame:000000000000A540                 db  38h ; 8
.eh_frame:000000000000A541                 db  83h
.eh_frame:000000000000A542                 db    7
.eh_frame:000000000000A543                 db  47h ; G
.eh_frame:000000000000A544                 db  0Eh
.eh_frame:000000000000A545                 db  60h ; `
.eh_frame:000000000000A546                 db    2
.eh_frame:000000000000A547                 db  99h
.eh_frame:000000000000A548                 db  0Eh
.eh_frame:000000000000A549                 db  68h ; h
.eh_frame:000000000000A54A                 db  5Fh ; _
.eh_frame:000000000000A54B                 db  0Eh
.eh_frame:000000000000A54C                 db  70h ; p
.eh_frame:000000000000A54D                 db  46h ; F
.eh_frame:000000000000A54E                 db  0Eh
.eh_frame:000000000000A54F                 db  78h ; x
.eh_frame:000000000000A550                 db  42h ; B
.eh_frame:000000000000A551                 db  0Eh
.eh_frame:000000000000A552                 db  80h
.eh_frame:000000000000A553                 db    1
.eh_frame:000000000000A554                 db  59h ; Y
.eh_frame:000000000000A555                 db  0Eh
.eh_frame:000000000000A556                 db  60h ; `
.eh_frame:000000000000A557                 db    2
.eh_frame:000000000000A558                 db  40h ; @
.eh_frame:000000000000A559                 db  0Eh
.eh_frame:000000000000A55A                 db  68h ; h
.eh_frame:000000000000A55B                 db  4Bh ; K
.eh_frame:000000000000A55C                 db  0Eh
.eh_frame:000000000000A55D                 db  70h ; p
.eh_frame:000000000000A55E                 db  43h ; C
.eh_frame:000000000000A55F                 db  0Eh
.eh_frame:000000000000A560                 db  78h ; x
.eh_frame:000000000000A561                 db  45h ; E
.eh_frame:000000000000A562                 db  0Eh
.eh_frame:000000000000A563                 db  80h
.eh_frame:000000000000A564                 db    1
.eh_frame:000000000000A565                 db  5Eh ; ^
.eh_frame:000000000000A566                 db  0Eh
.eh_frame:000000000000A567                 db  60h ; `
.eh_frame:000000000000A568                 db  4Ch ; L
.eh_frame:000000000000A569                 db  0Ah
.eh_frame:000000000000A56A                 db  0Eh
.eh_frame:000000000000A56B                 db  38h ; 8
.eh_frame:000000000000A56C                 db  44h ; D
.eh_frame:000000000000A56D                 db  0Eh
.eh_frame:000000000000A56E                 db  30h ; 0
.eh_frame:000000000000A56F                 db  41h ; A
.eh_frame:000000000000A570                 db  0Eh
.eh_frame:000000000000A571                 db  28h ; (
.eh_frame:000000000000A572                 db  42h ; B
.eh_frame:000000000000A573                 db  0Eh
.eh_frame:000000000000A574                 db  20h
.eh_frame:000000000000A575                 db  42h ; B
.eh_frame:000000000000A576                 db  0Eh
.eh_frame:000000000000A577                 db  18h
.eh_frame:000000000000A578                 db  42h ; B
.eh_frame:000000000000A579                 db  0Eh
.eh_frame:000000000000A57A                 db  10h
.eh_frame:000000000000A57B                 db  42h ; B
.eh_frame:000000000000A57C                 db  0Eh
.eh_frame:000000000000A57D                 db    8
.eh_frame:000000000000A57E                 db  46h ; F
.eh_frame:000000000000A57F                 db  0Bh
.eh_frame:000000000000A580                 db  28h ; (
.eh_frame:000000000000A581                 db    0
.eh_frame:000000000000A582                 db    0
.eh_frame:000000000000A583                 db    0
.eh_frame:000000000000A584                 db  24h ; $
.eh_frame:000000000000A585                 db    4
.eh_frame:000000000000A586                 db    0
.eh_frame:000000000000A587                 db    0
.eh_frame:000000000000A588                 db  98h
.eh_frame:000000000000A589                 db 0A3h
.eh_frame:000000000000A58A                 db 0FFh
.eh_frame:000000000000A58B                 db 0FFh
.eh_frame:000000000000A58C                 db  36h ; 6
.eh_frame:000000000000A58D                 db    0
.eh_frame:000000000000A58E                 db    0
.eh_frame:000000000000A58F                 db    0
.eh_frame:000000000000A590                 db    0
.eh_frame:000000000000A591                 db  42h ; B
.eh_frame:000000000000A592                 db  0Eh
.eh_frame:000000000000A593                 db  10h
.eh_frame:000000000000A594                 db  8Ch
.eh_frame:000000000000A595                 db    2
.eh_frame:000000000000A596                 db  41h ; A
.eh_frame:000000000000A597                 db  0Eh
.eh_frame:000000000000A598                 db  18h
.eh_frame:000000000000A599                 db  86h
.eh_frame:000000000000A59A                 db    3
.eh_frame:000000000000A59B                 db  41h ; A
.eh_frame:000000000000A59C                 db  0Eh
.eh_frame:000000000000A59D                 db  20h
.eh_frame:000000000000A59E                 db  83h
.eh_frame:000000000000A59F                 db    4
.eh_frame:000000000000A5A0                 db  6Eh ; n
.eh_frame:000000000000A5A1                 db  0Eh
.eh_frame:000000000000A5A2                 db  18h
.eh_frame:000000000000A5A3                 db  41h ; A
.eh_frame:000000000000A5A4                 db  0Eh
.eh_frame:000000000000A5A5                 db  10h
.eh_frame:000000000000A5A6                 db  42h ; B
.eh_frame:000000000000A5A7                 db  0Eh
.eh_frame:000000000000A5A8                 db    8
.eh_frame:000000000000A5A9                 db    0
.eh_frame:000000000000A5AA                 db    0
.eh_frame:000000000000A5AB                 db    0
.eh_frame:000000000000A5AC                 db  10h
.eh_frame:000000000000A5AD                 db    0
.eh_frame:000000000000A5AE                 db    0
.eh_frame:000000000000A5AF                 db    0
.eh_frame:000000000000A5B0                 db  50h ; P
.eh_frame:000000000000A5B1                 db    4
.eh_frame:000000000000A5B2                 db    0
.eh_frame:000000000000A5B3                 db    0
.eh_frame:000000000000A5B4                 db 0ACh
.eh_frame:000000000000A5B5                 db 0A3h
.eh_frame:000000000000A5B6                 db 0FFh
.eh_frame:000000000000A5B7                 db 0FFh
.eh_frame:000000000000A5B8                 db  11h
.eh_frame:000000000000A5B9                 db    0
.eh_frame:000000000000A5BA                 db    0
.eh_frame:000000000000A5BB                 db    0
.eh_frame:000000000000A5BC                 db    0
.eh_frame:000000000000A5BD                 db    0
.eh_frame:000000000000A5BE                 db    0
.eh_frame:000000000000A5BF                 db    0
.eh_frame:000000000000A5C0                 db  10h
.eh_frame:000000000000A5C1                 db    0
.eh_frame:000000000000A5C2                 db    0
.eh_frame:000000000000A5C3                 db    0
.eh_frame:000000000000A5C4                 db  64h ; d
.eh_frame:000000000000A5C5                 db    4
.eh_frame:000000000000A5C6                 db    0
.eh_frame:000000000000A5C7                 db    0
.eh_frame:000000000000A5C8                 db 0B8h
.eh_frame:000000000000A5C9                 db 0A3h
.eh_frame:000000000000A5CA                 db 0FFh
.eh_frame:000000000000A5CB                 db 0FFh
.eh_frame:000000000000A5CC                 db  11h
.eh_frame:000000000000A5CD                 db    0
.eh_frame:000000000000A5CE                 db    0
.eh_frame:000000000000A5CF                 db    0
.eh_frame:000000000000A5D0                 db    0
.eh_frame:000000000000A5D1                 db    0
.eh_frame:000000000000A5D2                 db    0
.eh_frame:000000000000A5D3                 db    0
.eh_frame:000000000000A5D4                 db  10h
.eh_frame:000000000000A5D5                 db    0
.eh_frame:000000000000A5D6                 db    0
.eh_frame:000000000000A5D7                 db    0
.eh_frame:000000000000A5D8                 db  78h ; x
.eh_frame:000000000000A5D9                 db    4
.eh_frame:000000000000A5DA                 db    0
.eh_frame:000000000000A5DB                 db    0
.eh_frame:000000000000A5DC                 db 0C4h
.eh_frame:000000000000A5DD                 db 0A3h
.eh_frame:000000000000A5DE                 db 0FFh
.eh_frame:000000000000A5DF                 db 0FFh
.eh_frame:000000000000A5E0                 db  35h ; 5
.eh_frame:000000000000A5E1                 db    0
.eh_frame:000000000000A5E2                 db    0
.eh_frame:000000000000A5E3                 db    0
.eh_frame:000000000000A5E4                 db    0
.eh_frame:000000000000A5E5                 db    0
.eh_frame:000000000000A5E6                 db    0
.eh_frame:000000000000A5E7                 db    0
.eh_frame:000000000000A5E8                 db  10h
.eh_frame:000000000000A5E9                 db    0
.eh_frame:000000000000A5EA                 db    0
.eh_frame:000000000000A5EB                 db    0
.eh_frame:000000000000A5EC                 db  8Ch
.eh_frame:000000000000A5ED                 db    4
.eh_frame:000000000000A5EE                 db    0
.eh_frame:000000000000A5EF                 db    0
.eh_frame:000000000000A5F0                 db 0F0h
.eh_frame:000000000000A5F1                 db 0A3h
.eh_frame:000000000000A5F2                 db 0FFh
.eh_frame:000000000000A5F3                 db 0FFh
.eh_frame:000000000000A5F4                 db  15h
.eh_frame:000000000000A5F5                 db    0
.eh_frame:000000000000A5F6                 db    0
.eh_frame:000000000000A5F7                 db    0
.eh_frame:000000000000A5F8                 db    0
.eh_frame:000000000000A5F9                 db    0
.eh_frame:000000000000A5FA                 db    0
.eh_frame:000000000000A5FB                 db    0
.eh_frame:000000000000A5FC                 db  10h
.eh_frame:000000000000A5FD                 db    0
.eh_frame:000000000000A5FE                 db    0
.eh_frame:000000000000A5FF                 db    0
.eh_frame:000000000000A600                 db 0A0h
.eh_frame:000000000000A601                 db    4
.eh_frame:000000000000A602                 db    0
.eh_frame:000000000000A603                 db    0
.eh_frame:000000000000A604                 db 0FCh
.eh_frame:000000000000A605                 db 0A3h
.eh_frame:000000000000A606                 db 0FFh
.eh_frame:000000000000A607                 db 0FFh
.eh_frame:000000000000A608                 db  30h ; 0
.eh_frame:000000000000A609                 db    0
.eh_frame:000000000000A60A                 db    0
.eh_frame:000000000000A60B                 db    0
.eh_frame:000000000000A60C                 db    0
.eh_frame:000000000000A60D                 db  6Bh ; k
.eh_frame:000000000000A60E                 db  0Eh
.eh_frame:000000000000A60F                 db  10h
.eh_frame:000000000000A610                 db  50h ; P
.eh_frame:000000000000A611                 db    0
.eh_frame:000000000000A612                 db    0
.eh_frame:000000000000A613                 db    0
.eh_frame:000000000000A614                 db 0B4h
.eh_frame:000000000000A615                 db    4
.eh_frame:000000000000A616                 db    0
.eh_frame:000000000000A617                 db    0
.eh_frame:000000000000A618                 db  18h
.eh_frame:000000000000A619                 db 0A4h
.eh_frame:000000000000A61A                 db 0FFh
.eh_frame:000000000000A61B                 db 0FFh
.eh_frame:000000000000A61C                 db  74h ; t
.eh_frame:000000000000A61D                 db    0
.eh_frame:000000000000A61E                 db    0
.eh_frame:000000000000A61F                 db    0
.eh_frame:000000000000A620                 db    0
.eh_frame:000000000000A621                 db  42h ; B
.eh_frame:000000000000A622                 db  0Eh
.eh_frame:000000000000A623                 db  10h
.eh_frame:000000000000A624                 db  8Fh
.eh_frame:000000000000A625                 db    2
.eh_frame:000000000000A626                 db  42h ; B
.eh_frame:000000000000A627                 db  0Eh
.eh_frame:000000000000A628                 db  18h
.eh_frame:000000000000A629                 db  8Eh
.eh_frame:000000000000A62A                 db    3
.eh_frame:000000000000A62B                 db  49h ; I
.eh_frame:000000000000A62C                 db  0Eh
.eh_frame:000000000000A62D                 db  20h
.eh_frame:000000000000A62E                 db  8Dh
.eh_frame:000000000000A62F                 db    4
.eh_frame:000000000000A630                 db  42h ; B
.eh_frame:000000000000A631                 db  0Eh
.eh_frame:000000000000A632                 db  28h ; (
.eh_frame:000000000000A633                 db  8Ch
.eh_frame:000000000000A634                 db    5
.eh_frame:000000000000A635                 db  44h ; D
.eh_frame:000000000000A636                 db  0Eh
.eh_frame:000000000000A637                 db  30h ; 0
.eh_frame:000000000000A638                 db  86h
.eh_frame:000000000000A639                 db    6
.eh_frame:000000000000A63A                 db  41h ; A
.eh_frame:000000000000A63B                 db  0Eh
.eh_frame:000000000000A63C                 db  38h ; 8
.eh_frame:000000000000A63D                 db  83h
.eh_frame:000000000000A63E                 db    7
.eh_frame:000000000000A63F                 db  4Dh ; M
.eh_frame:000000000000A640                 db  0Eh
.eh_frame:000000000000A641                 db  50h ; P
.eh_frame:000000000000A642                 db  5Fh ; _
.eh_frame:000000000000A643                 db  0Eh
.eh_frame:000000000000A644                 db  58h ; X
.eh_frame:000000000000A645                 db  47h ; G
.eh_frame:000000000000A646                 db  0Eh
.eh_frame:000000000000A647                 db  60h ; `
.eh_frame:000000000000A648                 db  46h ; F
.eh_frame:000000000000A649                 db  0Eh
.eh_frame:000000000000A64A                 db  68h ; h
.eh_frame:000000000000A64B                 db  44h ; D
.eh_frame:000000000000A64C                 db  0Eh
.eh_frame:000000000000A64D                 db  70h ; p
.eh_frame:000000000000A64E                 db  58h ; X
.eh_frame:000000000000A64F                 db  0Eh
.eh_frame:000000000000A650                 db  38h ; 8
.eh_frame:000000000000A651                 db  41h ; A
.eh_frame:000000000000A652                 db  0Eh
.eh_frame:000000000000A653                 db  30h ; 0
.eh_frame:000000000000A654                 db  41h ; A
.eh_frame:000000000000A655                 db  0Eh
.eh_frame:000000000000A656                 db  28h ; (
.eh_frame:000000000000A657                 db  42h ; B
.eh_frame:000000000000A658                 db  0Eh
.eh_frame:000000000000A659                 db  20h
.eh_frame:000000000000A65A                 db  42h ; B
.eh_frame:000000000000A65B                 db  0Eh
.eh_frame:000000000000A65C                 db  18h
.eh_frame:000000000000A65D                 db  42h ; B
.eh_frame:000000000000A65E                 db  0Eh
.eh_frame:000000000000A65F                 db  10h
.eh_frame:000000000000A660                 db  42h ; B
.eh_frame:000000000000A661                 db  0Eh
.eh_frame:000000000000A662                 db    8
.eh_frame:000000000000A663                 db    0
.eh_frame:000000000000A664                 db  68h ; h
.eh_frame:000000000000A665                 db    0
.eh_frame:000000000000A666                 db    0
.eh_frame:000000000000A667                 db    0
.eh_frame:000000000000A668                 db    8
.eh_frame:000000000000A669                 db    5
.eh_frame:000000000000A66A                 db    0
.eh_frame:000000000000A66B                 db    0
.eh_frame:000000000000A66C                 db  44h ; D
.eh_frame:000000000000A66D                 db 0A4h
.eh_frame:000000000000A66E                 db 0FFh
.eh_frame:000000000000A66F                 db 0FFh
.eh_frame:000000000000A670                 db 0E3h
.eh_frame:000000000000A671                 db    0
.eh_frame:000000000000A672                 db    0
.eh_frame:000000000000A673                 db    0
.eh_frame:000000000000A674                 db    0
.eh_frame:000000000000A675                 db  42h ; B
.eh_frame:000000000000A676                 db  0Eh
.eh_frame:000000000000A677                 db  10h
.eh_frame:000000000000A678                 db  8Fh
.eh_frame:000000000000A679                 db    2
.eh_frame:000000000000A67A                 db  42h ; B
.eh_frame:000000000000A67B                 db  0Eh
.eh_frame:000000000000A67C                 db  18h
.eh_frame:000000000000A67D                 db  8Eh
.eh_frame:000000000000A67E                 db    3
.eh_frame:000000000000A67F                 db  49h ; I
.eh_frame:000000000000A680                 db  0Eh
.eh_frame:000000000000A681                 db  20h
.eh_frame:000000000000A682                 db  8Dh
.eh_frame:000000000000A683                 db    4
.eh_frame:000000000000A684                 db  42h ; B
.eh_frame:000000000000A685                 db  0Eh
.eh_frame:000000000000A686                 db  28h ; (
.eh_frame:000000000000A687                 db  8Ch
.eh_frame:000000000000A688                 db    5
.eh_frame:000000000000A689                 db  44h ; D
.eh_frame:000000000000A68A                 db  0Eh
.eh_frame:000000000000A68B                 db  30h ; 0
.eh_frame:000000000000A68C                 db  86h
.eh_frame:000000000000A68D                 db    6
.eh_frame:000000000000A68E                 db  41h ; A
.eh_frame:000000000000A68F                 db  0Eh
.eh_frame:000000000000A690                 db  38h ; 8
.eh_frame:000000000000A691                 db  83h
.eh_frame:000000000000A692                 db    7
.eh_frame:000000000000A693                 db  4Dh ; M
.eh_frame:000000000000A694                 db  0Eh
.eh_frame:000000000000A695                 db  70h ; p
.eh_frame:000000000000A696                 db  65h ; e
.eh_frame:000000000000A697                 db  0Eh
.eh_frame:000000000000A698                 db  78h ; x
.eh_frame:000000000000A699                 db  4Dh ; M
.eh_frame:000000000000A69A                 db  0Eh
.eh_frame:000000000000A69B                 db  80h
.eh_frame:000000000000A69C                 db    1
.eh_frame:000000000000A69D                 db  46h ; F
.eh_frame:000000000000A69E                 db  0Eh
.eh_frame:000000000000A69F                 db  88h
.eh_frame:000000000000A6A0                 db    1
.eh_frame:000000000000A6A1                 db  42h ; B
.eh_frame:000000000000A6A2                 db  0Eh
.eh_frame:000000000000A6A3                 db  90h
.eh_frame:000000000000A6A4                 db    1
.eh_frame:000000000000A6A5                 db  5Eh ; ^
.eh_frame:000000000000A6A6                 db  0Eh
.eh_frame:000000000000A6A7                 db  70h ; p
.eh_frame:000000000000A6A8                 db  56h ; V
.eh_frame:000000000000A6A9                 db  0Eh
.eh_frame:000000000000A6AA                 db  78h ; x
.eh_frame:000000000000A6AB                 db  43h ; C
.eh_frame:000000000000A6AC                 db  0Eh
.eh_frame:000000000000A6AD                 db  80h
.eh_frame:000000000000A6AE                 db    1
.eh_frame:000000000000A6AF                 db  43h ; C
.eh_frame:000000000000A6B0                 db  0Eh
.eh_frame:000000000000A6B1                 db  88h
.eh_frame:000000000000A6B2                 db    1
.eh_frame:000000000000A6B3                 db  56h ; V
.eh_frame:000000000000A6B4                 db  0Eh
.eh_frame:000000000000A6B5                 db  90h
.eh_frame:000000000000A6B6                 db    1
.eh_frame:000000000000A6B7                 db  52h ; R
.eh_frame:000000000000A6B8                 db  0Eh
.eh_frame:000000000000A6B9                 db  70h ; p
.eh_frame:000000000000A6BA                 db  5Bh ; [
.eh_frame:000000000000A6BB                 db  0Eh
.eh_frame:000000000000A6BC                 db  38h ; 8
.eh_frame:000000000000A6BD                 db  41h ; A
.eh_frame:000000000000A6BE                 db  0Eh
.eh_frame:000000000000A6BF                 db  30h ; 0
.eh_frame:000000000000A6C0                 db  41h ; A
.eh_frame:000000000000A6C1                 db  0Eh
.eh_frame:000000000000A6C2                 db  28h ; (
.eh_frame:000000000000A6C3                 db  42h ; B
.eh_frame:000000000000A6C4                 db  0Eh
.eh_frame:000000000000A6C5                 db  20h
.eh_frame:000000000000A6C6                 db  42h ; B
.eh_frame:000000000000A6C7                 db  0Eh
.eh_frame:000000000000A6C8                 db  18h
.eh_frame:000000000000A6C9                 db  42h ; B
.eh_frame:000000000000A6CA                 db  0Eh
.eh_frame:000000000000A6CB                 db  10h
.eh_frame:000000000000A6CC                 db  42h ; B
.eh_frame:000000000000A6CD                 db  0Eh
.eh_frame:000000000000A6CE                 db    8
.eh_frame:000000000000A6CF                 db    0
.eh_frame:000000000000A6D0                 db  10h
.eh_frame:000000000000A6D1                 db    0
.eh_frame:000000000000A6D2                 db    0
.eh_frame:000000000000A6D3                 db    0
.eh_frame:000000000000A6D4                 db  74h ; t
.eh_frame:000000000000A6D5                 db    5
.eh_frame:000000000000A6D6                 db    0
.eh_frame:000000000000A6D7                 db    0
.eh_frame:000000000000A6D8                 db 0C8h
.eh_frame:000000000000A6D9                 db 0A4h
.eh_frame:000000000000A6DA                 db 0FFh
.eh_frame:000000000000A6DB                 db 0FFh
.eh_frame:000000000000A6DC                 db  0Ah
.eh_frame:000000000000A6DD                 db    0
.eh_frame:000000000000A6DE                 db    0
.eh_frame:000000000000A6DF                 db    0
.eh_frame:000000000000A6E0                 db    0
.eh_frame:000000000000A6E1                 db    0
.eh_frame:000000000000A6E2                 db    0
.eh_frame:000000000000A6E3                 db    0
.eh_frame:000000000000A6E4                 db  28h ; (
.eh_frame:000000000000A6E5                 db    0
.eh_frame:000000000000A6E6                 db    0
.eh_frame:000000000000A6E7                 db    0
.eh_frame:000000000000A6E8                 db  88h
.eh_frame:000000000000A6E9                 db    5
.eh_frame:000000000000A6EA                 db    0
.eh_frame:000000000000A6EB                 db    0
.eh_frame:000000000000A6EC                 db 0C4h
.eh_frame:000000000000A6ED                 db 0A4h
.eh_frame:000000000000A6EE                 db 0FFh
.eh_frame:000000000000A6EF                 db 0FFh
.eh_frame:000000000000A6F0                 db  93h
.eh_frame:000000000000A6F1                 db    0
.eh_frame:000000000000A6F2                 db    0
.eh_frame:000000000000A6F3                 db    0
.eh_frame:000000000000A6F4                 db    0
.eh_frame:000000000000A6F5                 db  48h ; H
.eh_frame:000000000000A6F6                 db  0Eh
.eh_frame:000000000000A6F7                 db  10h
.eh_frame:000000000000A6F8                 db  8Ch
.eh_frame:000000000000A6F9                 db    2
.eh_frame:000000000000A6FA                 db  48h ; H
.eh_frame:000000000000A6FB                 db  0Eh
.eh_frame:000000000000A6FC                 db  18h
.eh_frame:000000000000A6FD                 db  86h
.eh_frame:000000000000A6FE                 db    3
.eh_frame:000000000000A6FF                 db  41h ; A
.eh_frame:000000000000A700                 db  0Eh
.eh_frame:000000000000A701                 db  20h
.eh_frame:000000000000A702                 db  83h
.eh_frame:000000000000A703                 db    4
.eh_frame:000000000000A704                 db    2
.eh_frame:000000000000A705                 db  74h ; t
.eh_frame:000000000000A706                 db  0Eh
.eh_frame:000000000000A707                 db  18h
.eh_frame:000000000000A708                 db  4Bh ; K
.eh_frame:000000000000A709                 db  0Eh
.eh_frame:000000000000A70A                 db  10h
.eh_frame:000000000000A70B                 db  42h ; B
.eh_frame:000000000000A70C                 db  0Eh
.eh_frame:000000000000A70D                 db    8
.eh_frame:000000000000A70E                 db    0
.eh_frame:000000000000A70F                 db    0
.eh_frame:000000000000A710                 db  10h
.eh_frame:000000000000A711                 db    0
.eh_frame:000000000000A712                 db    0
.eh_frame:000000000000A713                 db    0
.eh_frame:000000000000A714                 db 0B4h
.eh_frame:000000000000A715                 db    5
.eh_frame:000000000000A716                 db    0
.eh_frame:000000000000A717                 db    0
.eh_frame:000000000000A718                 db  38h ; 8
.eh_frame:000000000000A719                 db 0A5h
.eh_frame:000000000000A71A                 db 0FFh
.eh_frame:000000000000A71B                 db 0FFh
.eh_frame:000000000000A71C                 db  13h
.eh_frame:000000000000A71D                 db    0
.eh_frame:000000000000A71E                 db    0
.eh_frame:000000000000A71F                 db    0
.eh_frame:000000000000A720                 db    0
.eh_frame:000000000000A721                 db    0
.eh_frame:000000000000A722                 db    0
.eh_frame:000000000000A723                 db    0
.eh_frame:000000000000A724                 db  10h
.eh_frame:000000000000A725                 db    0
.eh_frame:000000000000A726                 db    0
.eh_frame:000000000000A727                 db    0
.eh_frame:000000000000A728                 db 0C8h
.eh_frame:000000000000A729                 db    5
.eh_frame:000000000000A72A                 db    0
.eh_frame:000000000000A72B                 db    0
.eh_frame:000000000000A72C                 db  44h ; D
.eh_frame:000000000000A72D                 db 0A5h
.eh_frame:000000000000A72E                 db 0FFh
.eh_frame:000000000000A72F                 db 0FFh
.eh_frame:000000000000A730                 db  0Ch
.eh_frame:000000000000A731                 db    0
.eh_frame:000000000000A732                 db    0
.eh_frame:000000000000A733                 db    0
.eh_frame:000000000000A734                 db    0
.eh_frame:000000000000A735                 db    0
.eh_frame:000000000000A736                 db    0
.eh_frame:000000000000A737                 db    0
.eh_frame:000000000000A738                 db  10h
.eh_frame:000000000000A739                 db    0
.eh_frame:000000000000A73A                 db    0
.eh_frame:000000000000A73B                 db    0
.eh_frame:000000000000A73C                 db 0DCh
.eh_frame:000000000000A73D                 db    5
.eh_frame:000000000000A73E                 db    0
.eh_frame:000000000000A73F                 db    0
.eh_frame:000000000000A740                 db  40h ; @
.eh_frame:000000000000A741                 db 0A5h
.eh_frame:000000000000A742                 db 0FFh
.eh_frame:000000000000A743                 db 0FFh
.eh_frame:000000000000A744                 db  18h
.eh_frame:000000000000A745                 db    0
.eh_frame:000000000000A746                 db    0
.eh_frame:000000000000A747                 db    0
.eh_frame:000000000000A748                 db    0
.eh_frame:000000000000A749                 db    0
.eh_frame:000000000000A74A                 db    0
.eh_frame:000000000000A74B                 db    0
.eh_frame:000000000000A74C                 db  10h
.eh_frame:000000000000A74D                 db    0
.eh_frame:000000000000A74E                 db    0
.eh_frame:000000000000A74F                 db    0
.eh_frame:000000000000A750                 db 0F0h
.eh_frame:000000000000A751                 db    5
.eh_frame:000000000000A752                 db    0
.eh_frame:000000000000A753                 db    0
.eh_frame:000000000000A754                 db  4Ch ; L
.eh_frame:000000000000A755                 db 0A5h
.eh_frame:000000000000A756                 db 0FFh
.eh_frame:000000000000A757                 db 0FFh
.eh_frame:000000000000A758                 db  14h
.eh_frame:000000000000A759                 db    0
.eh_frame:000000000000A75A                 db    0
.eh_frame:000000000000A75B                 db    0
.eh_frame:000000000000A75C                 db    0
.eh_frame:000000000000A75D                 db    0
.eh_frame:000000000000A75E                 db    0
.eh_frame:000000000000A75F                 db    0
.eh_frame:000000000000A760                 db  18h
.eh_frame:000000000000A761                 db    0
.eh_frame:000000000000A762                 db    0
.eh_frame:000000000000A763                 db    0
.eh_frame:000000000000A764                 db    4
.eh_frame:000000000000A765                 db    6
.eh_frame:000000000000A766                 db    0
.eh_frame:000000000000A767                 db    0
.eh_frame:000000000000A768                 db  58h ; X
.eh_frame:000000000000A769                 db 0A5h
.eh_frame:000000000000A76A                 db 0FFh
.eh_frame:000000000000A76B                 db 0FFh
.eh_frame:000000000000A76C                 db  8Eh
.eh_frame:000000000000A76D                 db    0
.eh_frame:000000000000A76E                 db    0
.eh_frame:000000000000A76F                 db    0
.eh_frame:000000000000A770                 db    0
.eh_frame:000000000000A771                 db  44h ; D
.eh_frame:000000000000A772                 db  0Eh
.eh_frame:000000000000A773                 db  50h ; P
.eh_frame:000000000000A774                 db    2
.eh_frame:000000000000A775                 db  7Fh ; 
.eh_frame:000000000000A776                 db  0Ah
.eh_frame:000000000000A777                 db  0Eh
.eh_frame:000000000000A778                 db    8
.eh_frame:000000000000A779                 db  41h ; A
.eh_frame:000000000000A77A                 db  0Bh
.eh_frame:000000000000A77B                 db    0
.eh_frame:000000000000A77C                 db  18h
.eh_frame:000000000000A77D                 db    0
.eh_frame:000000000000A77E                 db    0
.eh_frame:000000000000A77F                 db    0
.eh_frame:000000000000A780                 db  20h
.eh_frame:000000000000A781                 db    6
.eh_frame:000000000000A782                 db    0
.eh_frame:000000000000A783                 db    0
.eh_frame:000000000000A784                 db 0CCh
.eh_frame:000000000000A785                 db 0A5h
.eh_frame:000000000000A786                 db 0FFh
.eh_frame:000000000000A787                 db 0FFh
.eh_frame:000000000000A788                 db  8Ah
.eh_frame:000000000000A789                 db    0
.eh_frame:000000000000A78A                 db    0
.eh_frame:000000000000A78B                 db    0
.eh_frame:000000000000A78C                 db    0
.eh_frame:000000000000A78D                 db  44h ; D
.eh_frame:000000000000A78E                 db  0Eh
.eh_frame:000000000000A78F                 db  50h ; P
.eh_frame:000000000000A790                 db    2
.eh_frame:000000000000A791                 db  7Bh ; {
.eh_frame:000000000000A792                 db  0Ah
.eh_frame:000000000000A793                 db  0Eh
.eh_frame:000000000000A794                 db    8
.eh_frame:000000000000A795                 db  41h ; A
.eh_frame:000000000000A796                 db  0Bh
.eh_frame:000000000000A797                 db    0
.eh_frame:000000000000A798                 db  10h
.eh_frame:000000000000A799                 db    0
.eh_frame:000000000000A79A                 db    0
.eh_frame:000000000000A79B                 db    0
.eh_frame:000000000000A79C                 db  3Ch ; <
.eh_frame:000000000000A79D                 db    6
.eh_frame:000000000000A79E                 db    0
.eh_frame:000000000000A79F                 db    0
.eh_frame:000000000000A7A0                 db  40h ; @
.eh_frame:000000000000A7A1                 db 0A6h
.eh_frame:000000000000A7A2                 db 0FFh
.eh_frame:000000000000A7A3                 db 0FFh
.eh_frame:000000000000A7A4                 db  0Ch
.eh_frame:000000000000A7A5                 db    0
.eh_frame:000000000000A7A6                 db    0
.eh_frame:000000000000A7A7                 db    0
.eh_frame:000000000000A7A8                 db    0
.eh_frame:000000000000A7A9                 db    0
.eh_frame:000000000000A7AA                 db    0
.eh_frame:000000000000A7AB                 db    0
.eh_frame:000000000000A7AC                 db  10h
.eh_frame:000000000000A7AD                 db    0
.eh_frame:000000000000A7AE                 db    0
.eh_frame:000000000000A7AF                 db    0
.eh_frame:000000000000A7B0                 db  50h ; P
.eh_frame:000000000000A7B1                 db    6
.eh_frame:000000000000A7B2                 db    0
.eh_frame:000000000000A7B3                 db    0
.eh_frame:000000000000A7B4                 db  3Ch ; <
.eh_frame:000000000000A7B5                 db 0A6h
.eh_frame:000000000000A7B6                 db 0FFh
.eh_frame:000000000000A7B7                 db 0FFh
.eh_frame:000000000000A7B8                 db  0Fh
.eh_frame:000000000000A7B9                 db    0
.eh_frame:000000000000A7BA                 db    0
.eh_frame:000000000000A7BB                 db    0
.eh_frame:000000000000A7BC                 db    0
.eh_frame:000000000000A7BD                 db    0
.eh_frame:000000000000A7BE                 db    0
.eh_frame:000000000000A7BF                 db    0
.eh_frame:000000000000A7C0                 db  18h
.eh_frame:000000000000A7C1                 db    0
.eh_frame:000000000000A7C2                 db    0
.eh_frame:000000000000A7C3                 db    0
.eh_frame:000000000000A7C4                 db  64h ; d
.eh_frame:000000000000A7C5                 db    6
.eh_frame:000000000000A7C6                 db    0
.eh_frame:000000000000A7C7                 db    0
.eh_frame:000000000000A7C8                 db  38h ; 8
.eh_frame:000000000000A7C9                 db 0A6h
.eh_frame:000000000000A7CA                 db 0FFh
.eh_frame:000000000000A7CB                 db 0FFh
.eh_frame:000000000000A7CC                 db  98h
.eh_frame:000000000000A7CD                 db    0
.eh_frame:000000000000A7CE                 db    0
.eh_frame:000000000000A7CF                 db    0
.eh_frame:000000000000A7D0                 db    0
.eh_frame:000000000000A7D1                 db  44h ; D
.eh_frame:000000000000A7D2                 db  0Eh
.eh_frame:000000000000A7D3                 db  50h ; P
.eh_frame:000000000000A7D4                 db    2
.eh_frame:000000000000A7D5                 db  8Eh
.eh_frame:000000000000A7D6                 db  0Ah
.eh_frame:000000000000A7D7                 db  0Eh
.eh_frame:000000000000A7D8                 db    8
.eh_frame:000000000000A7D9                 db  41h ; A
.eh_frame:000000000000A7DA                 db  0Bh
.eh_frame:000000000000A7DB                 db    0
.eh_frame:000000000000A7DC                 db  10h
.eh_frame:000000000000A7DD                 db    0
.eh_frame:000000000000A7DE                 db    0
.eh_frame:000000000000A7DF                 db    0
.eh_frame:000000000000A7E0                 db  80h
.eh_frame:000000000000A7E1                 db    6
.eh_frame:000000000000A7E2                 db    0
.eh_frame:000000000000A7E3                 db    0
.eh_frame:000000000000A7E4                 db 0BCh
.eh_frame:000000000000A7E5                 db 0A6h
.eh_frame:000000000000A7E6                 db 0FFh
.eh_frame:000000000000A7E7                 db 0FFh
.eh_frame:000000000000A7E8                 db  10h
.eh_frame:000000000000A7E9                 db    0
.eh_frame:000000000000A7EA                 db    0
.eh_frame:000000000000A7EB                 db    0
.eh_frame:000000000000A7EC                 db    0
.eh_frame:000000000000A7ED                 db    0
.eh_frame:000000000000A7EE                 db    0
.eh_frame:000000000000A7EF                 db    0
.eh_frame:000000000000A7F0                 db  10h
.eh_frame:000000000000A7F1                 db    0
.eh_frame:000000000000A7F2                 db    0
.eh_frame:000000000000A7F3                 db    0
.eh_frame:000000000000A7F4                 db  94h
.eh_frame:000000000000A7F5                 db    6
.eh_frame:000000000000A7F6                 db    0
.eh_frame:000000000000A7F7                 db    0
.eh_frame:000000000000A7F8                 db 0B8h
.eh_frame:000000000000A7F9                 db 0A6h
.eh_frame:000000000000A7FA                 db 0FFh
.eh_frame:000000000000A7FB                 db 0FFh
.eh_frame:000000000000A7FC                 db  11h
.eh_frame:000000000000A7FD                 db    0
.eh_frame:000000000000A7FE                 db    0
.eh_frame:000000000000A7FF                 db    0
.eh_frame:000000000000A800                 db    0
.eh_frame:000000000000A801                 db    0
.eh_frame:000000000000A802                 db    0
.eh_frame:000000000000A803                 db    0
.eh_frame:000000000000A804                 db  10h
.eh_frame:000000000000A805                 db    0
.eh_frame:000000000000A806                 db    0
.eh_frame:000000000000A807                 db    0
.eh_frame:000000000000A808                 db 0A8h
.eh_frame:000000000000A809                 db    6
.eh_frame:000000000000A80A                 db    0
.eh_frame:000000000000A80B                 db    0
.eh_frame:000000000000A80C                 db 0C4h
.eh_frame:000000000000A80D                 db 0A6h
.eh_frame:000000000000A80E                 db 0FFh
.eh_frame:000000000000A80F                 db 0FFh
.eh_frame:000000000000A810                 db  0Ah
.eh_frame:000000000000A811                 db    0
.eh_frame:000000000000A812                 db    0
.eh_frame:000000000000A813                 db    0
.eh_frame:000000000000A814                 db    0
.eh_frame:000000000000A815                 db    0
.eh_frame:000000000000A816                 db    0
.eh_frame:000000000000A817                 db    0
.eh_frame:000000000000A818                 db  18h
.eh_frame:000000000000A819                 db    0
.eh_frame:000000000000A81A                 db    0
.eh_frame:000000000000A81B                 db    0
.eh_frame:000000000000A81C                 db 0BCh
.eh_frame:000000000000A81D                 db    6
.eh_frame:000000000000A81E                 db    0
.eh_frame:000000000000A81F                 db    0
.eh_frame:000000000000A820                 db 0C0h
.eh_frame:000000000000A821                 db 0A6h
.eh_frame:000000000000A822                 db 0FFh
.eh_frame:000000000000A823                 db 0FFh
.eh_frame:000000000000A824                 db  8Eh
.eh_frame:000000000000A825                 db    0
.eh_frame:000000000000A826                 db    0
.eh_frame:000000000000A827                 db    0
.eh_frame:000000000000A828                 db    0
.eh_frame:000000000000A829                 db  44h ; D
.eh_frame:000000000000A82A                 db  0Eh
.eh_frame:000000000000A82B                 db  50h ; P
.eh_frame:000000000000A82C                 db    2
.eh_frame:000000000000A82D                 db  7Fh ; 
.eh_frame:000000000000A82E                 db  0Ah
.eh_frame:000000000000A82F                 db  0Eh
.eh_frame:000000000000A830                 db    8
.eh_frame:000000000000A831                 db  41h ; A
.eh_frame:000000000000A832                 db  0Bh
.eh_frame:000000000000A833                 db    0
.eh_frame:000000000000A834                 db  18h
.eh_frame:000000000000A835                 db    0
.eh_frame:000000000000A836                 db    0
.eh_frame:000000000000A837                 db    0
.eh_frame:000000000000A838                 db 0D8h
.eh_frame:000000000000A839                 db    6
.eh_frame:000000000000A83A                 db    0
.eh_frame:000000000000A83B                 db    0
.eh_frame:000000000000A83C                 db  34h ; 4
.eh_frame:000000000000A83D                 db 0A7h
.eh_frame:000000000000A83E                 db 0FFh
.eh_frame:000000000000A83F                 db 0FFh
.eh_frame:000000000000A840                 db  91h
.eh_frame:000000000000A841                 db    0
.eh_frame:000000000000A842                 db    0
.eh_frame:000000000000A843                 db    0
.eh_frame:000000000000A844                 db    0
.eh_frame:000000000000A845                 db  44h ; D
.eh_frame:000000000000A846                 db  0Eh
.eh_frame:000000000000A847                 db  50h ; P
.eh_frame:000000000000A848                 db    2
.eh_frame:000000000000A849                 db  82h
.eh_frame:000000000000A84A                 db  0Ah
.eh_frame:000000000000A84B                 db  0Eh
.eh_frame:000000000000A84C                 db    8
.eh_frame:000000000000A84D                 db  41h ; A
.eh_frame:000000000000A84E                 db  0Bh
.eh_frame:000000000000A84F                 db    0
.eh_frame:000000000000A850                 db  10h
.eh_frame:000000000000A851                 db    0
.eh_frame:000000000000A852                 db    0
.eh_frame:000000000000A853                 db    0
.eh_frame:000000000000A854                 db 0F4h
.eh_frame:000000000000A855                 db    6
.eh_frame:000000000000A856                 db    0
.eh_frame:000000000000A857                 db    0
.eh_frame:000000000000A858                 db 0B8h
.eh_frame:000000000000A859                 db 0A7h
.eh_frame:000000000000A85A                 db 0FFh
.eh_frame:000000000000A85B                 db 0FFh
.eh_frame:000000000000A85C                 db  0Ch
.eh_frame:000000000000A85D                 db    0
.eh_frame:000000000000A85E                 db    0
.eh_frame:000000000000A85F                 db    0
.eh_frame:000000000000A860                 db    0
.eh_frame:000000000000A861                 db    0
.eh_frame:000000000000A862                 db    0
.eh_frame:000000000000A863                 db    0
.eh_frame:000000000000A864                 db  10h
.eh_frame:000000000000A865                 db    0
.eh_frame:000000000000A866                 db    0
.eh_frame:000000000000A867                 db    0
.eh_frame:000000000000A868                 db    8
.eh_frame:000000000000A869                 db    7
.eh_frame:000000000000A86A                 db    0
.eh_frame:000000000000A86B                 db    0
.eh_frame:000000000000A86C                 db 0B4h
.eh_frame:000000000000A86D                 db 0A7h
.eh_frame:000000000000A86E                 db 0FFh
.eh_frame:000000000000A86F                 db 0FFh
.eh_frame:000000000000A870                 db  17h
.eh_frame:000000000000A871                 db    0
.eh_frame:000000000000A872                 db    0
.eh_frame:000000000000A873                 db    0
.eh_frame:000000000000A874                 db    0
.eh_frame:000000000000A875                 db    0
.eh_frame:000000000000A876                 db    0
.eh_frame:000000000000A877                 db    0
.eh_frame:000000000000A878                 db  10h
.eh_frame:000000000000A879                 db    0
.eh_frame:000000000000A87A                 db    0
.eh_frame:000000000000A87B                 db    0
.eh_frame:000000000000A87C                 db  1Ch
.eh_frame:000000000000A87D                 db    7
.eh_frame:000000000000A87E                 db    0
.eh_frame:000000000000A87F                 db    0
.eh_frame:000000000000A880                 db 0C0h
.eh_frame:000000000000A881                 db 0A7h
.eh_frame:000000000000A882                 db 0FFh
.eh_frame:000000000000A883                 db 0FFh
.eh_frame:000000000000A884                 db  13h
.eh_frame:000000000000A885                 db    0
.eh_frame:000000000000A886                 db    0
.eh_frame:000000000000A887                 db    0
.eh_frame:000000000000A888                 db    0
.eh_frame:000000000000A889                 db    0
.eh_frame:000000000000A88A                 db    0
.eh_frame:000000000000A88B                 db    0
.eh_frame:000000000000A88C                 db  10h
.eh_frame:000000000000A88D                 db    0
.eh_frame:000000000000A88E                 db    0
.eh_frame:000000000000A88F                 db    0
.eh_frame:000000000000A890                 db  30h ; 0
.eh_frame:000000000000A891                 db    7
.eh_frame:000000000000A892                 db    0
.eh_frame:000000000000A893                 db    0
.eh_frame:000000000000A894                 db 0CCh
.eh_frame:000000000000A895                 db 0A7h
.eh_frame:000000000000A896                 db 0FFh
.eh_frame:000000000000A897                 db 0FFh
.eh_frame:000000000000A898                 db  0Ch
.eh_frame:000000000000A899                 db    0
.eh_frame:000000000000A89A                 db    0
.eh_frame:000000000000A89B                 db    0
.eh_frame:000000000000A89C                 db    0
.eh_frame:000000000000A89D                 db    0
.eh_frame:000000000000A89E                 db    0
.eh_frame:000000000000A89F                 db    0
.eh_frame:000000000000A8A0                 db  10h
.eh_frame:000000000000A8A1                 db    0
.eh_frame:000000000000A8A2                 db    0
.eh_frame:000000000000A8A3                 db    0
.eh_frame:000000000000A8A4                 db  44h ; D
.eh_frame:000000000000A8A5                 db    7
.eh_frame:000000000000A8A6                 db    0
.eh_frame:000000000000A8A7                 db    0
.eh_frame:000000000000A8A8                 db 0C8h
.eh_frame:000000000000A8A9                 db 0A7h
.eh_frame:000000000000A8AA                 db 0FFh
.eh_frame:000000000000A8AB                 db 0FFh
.eh_frame:000000000000A8AC                 db  14h
.eh_frame:000000000000A8AD                 db    0
.eh_frame:000000000000A8AE                 db    0
.eh_frame:000000000000A8AF                 db    0
.eh_frame:000000000000A8B0                 db    0
.eh_frame:000000000000A8B1                 db    0
.eh_frame:000000000000A8B2                 db    0
.eh_frame:000000000000A8B3                 db    0
.eh_frame:000000000000A8B4                 db  10h
.eh_frame:000000000000A8B5                 db    0
.eh_frame:000000000000A8B6                 db    0
.eh_frame:000000000000A8B7                 db    0
.eh_frame:000000000000A8B8                 db  58h ; X
.eh_frame:000000000000A8B9                 db    7
.eh_frame:000000000000A8BA                 db    0
.eh_frame:000000000000A8BB                 db    0
.eh_frame:000000000000A8BC                 db 0D4h
.eh_frame:000000000000A8BD                 db 0A7h
.eh_frame:000000000000A8BE                 db 0FFh
.eh_frame:000000000000A8BF                 db 0FFh
.eh_frame:000000000000A8C0                 db  13h
.eh_frame:000000000000A8C1                 db    0
.eh_frame:000000000000A8C2                 db    0
.eh_frame:000000000000A8C3                 db    0
.eh_frame:000000000000A8C4                 db    0
.eh_frame:000000000000A8C5                 db    0
.eh_frame:000000000000A8C6                 db    0
.eh_frame:000000000000A8C7                 db    0
.eh_frame:000000000000A8C8                 db  14h
.eh_frame:000000000000A8C9                 db    0
.eh_frame:000000000000A8CA                 db    0
.eh_frame:000000000000A8CB                 db    0
.eh_frame:000000000000A8CC                 db  6Ch ; l
.eh_frame:000000000000A8CD                 db    7
.eh_frame:000000000000A8CE                 db    0
.eh_frame:000000000000A8CF                 db    0
.eh_frame:000000000000A8D0                 db 0E0h
.eh_frame:000000000000A8D1                 db 0A7h
.eh_frame:000000000000A8D2                 db 0FFh
.eh_frame:000000000000A8D3                 db 0FFh
.eh_frame:000000000000A8D4                 db  18h
.eh_frame:000000000000A8D5                 db    0
.eh_frame:000000000000A8D6                 db    0
.eh_frame:000000000000A8D7                 db    0
.eh_frame:000000000000A8D8                 db    0
.eh_frame:000000000000A8D9                 db    0
.eh_frame:000000000000A8DA                 db    0
.eh_frame:000000000000A8DB                 db    0
.eh_frame:000000000000A8DC                 db    0
.eh_frame:000000000000A8DD                 db    0
.eh_frame:000000000000A8DE                 db    0
.eh_frame:000000000000A8DF                 db    0
.eh_frame:000000000000A8E0                 db  14h
.eh_frame:000000000000A8E1                 db    0
.eh_frame:000000000000A8E2                 db    0
.eh_frame:000000000000A8E3                 db    0
.eh_frame:000000000000A8E4                 db  84h
.eh_frame:000000000000A8E5                 db    7
.eh_frame:000000000000A8E6                 db    0
.eh_frame:000000000000A8E7                 db    0
.eh_frame:000000000000A8E8                 db 0E8h
.eh_frame:000000000000A8E9                 db 0A7h
.eh_frame:000000000000A8EA                 db 0FFh
.eh_frame:000000000000A8EB                 db 0FFh
.eh_frame:000000000000A8EC                 db 0A4h
.eh_frame:000000000000A8ED                 db    2
.eh_frame:000000000000A8EE                 db    0
.eh_frame:000000000000A8EF                 db    0
.eh_frame:000000000000A8F0                 db    0
.eh_frame:000000000000A8F1                 db    0
.eh_frame:000000000000A8F2                 db    0
.eh_frame:000000000000A8F3                 db    0
.eh_frame:000000000000A8F4                 db    0
.eh_frame:000000000000A8F5                 db    0
.eh_frame:000000000000A8F6                 db    0
.eh_frame:000000000000A8F7                 db    0
.eh_frame:000000000000A8F8                 db  4Ch ; L
.eh_frame:000000000000A8F9                 db    0
.eh_frame:000000000000A8FA                 db    0
.eh_frame:000000000000A8FB                 db    0
.eh_frame:000000000000A8FC                 db  9Ch
.eh_frame:000000000000A8FD                 db    7
.eh_frame:000000000000A8FE                 db    0
.eh_frame:000000000000A8FF                 db    0
.eh_frame:000000000000A900                 db  80h
.eh_frame:000000000000A901                 db 0AAh
.eh_frame:000000000000A902                 db 0FFh
.eh_frame:000000000000A903                 db 0FFh
.eh_frame:000000000000A904                 db 0B5h
.eh_frame:000000000000A905                 db    0
.eh_frame:000000000000A906                 db    0
.eh_frame:000000000000A907                 db    0
.eh_frame:000000000000A908                 db    0
.eh_frame:000000000000A909                 db  42h ; B
.eh_frame:000000000000A90A                 db  0Eh
.eh_frame:000000000000A90B                 db  10h
.eh_frame:000000000000A90C                 db  8Eh
.eh_frame:000000000000A90D                 db    2
.eh_frame:000000000000A90E                 db  42h ; B
.eh_frame:000000000000A90F                 db  0Eh
.eh_frame:000000000000A910                 db  18h
.eh_frame:000000000000A911                 db  8Dh
.eh_frame:000000000000A912                 db    3
.eh_frame:000000000000A913                 db  45h ; E
.eh_frame:000000000000A914                 db  0Eh
.eh_frame:000000000000A915                 db  20h
.eh_frame:000000000000A916                 db  8Ch
.eh_frame:000000000000A917                 db    4
.eh_frame:000000000000A918                 db  41h ; A
.eh_frame:000000000000A919                 db  0Eh
.eh_frame:000000000000A91A                 db  28h ; (
.eh_frame:000000000000A91B                 db  86h
.eh_frame:000000000000A91C                 db    5
.eh_frame:000000000000A91D                 db  44h ; D
.eh_frame:000000000000A91E                 db  0Eh
.eh_frame:000000000000A91F                 db  30h ; 0
.eh_frame:000000000000A920                 db  83h
.eh_frame:000000000000A921                 db    6
.eh_frame:000000000000A922                 db  7Fh ; 
.eh_frame:000000000000A923                 db  0Ah
.eh_frame:000000000000A924                 db  0Eh
.eh_frame:000000000000A925                 db  28h ; (
.eh_frame:000000000000A926                 db  41h ; A
.eh_frame:000000000000A927                 db  0Eh
.eh_frame:000000000000A928                 db  20h
.eh_frame:000000000000A929                 db  42h ; B
.eh_frame:000000000000A92A                 db  0Eh
.eh_frame:000000000000A92B                 db  18h
.eh_frame:000000000000A92C                 db  42h ; B
.eh_frame:000000000000A92D                 db  0Eh
.eh_frame:000000000000A92E                 db  10h
.eh_frame:000000000000A92F                 db  42h ; B
.eh_frame:000000000000A930                 db  0Eh
.eh_frame:000000000000A931                 db    8
.eh_frame:000000000000A932                 db  4Ch ; L
.eh_frame:000000000000A933                 db  0Bh
.eh_frame:000000000000A934                 db  5Bh ; [
.eh_frame:000000000000A935                 db  0Ah
.eh_frame:000000000000A936                 db  0Eh
.eh_frame:000000000000A937                 db  28h ; (
.eh_frame:000000000000A938                 db  41h ; A
.eh_frame:000000000000A939                 db  0Eh
.eh_frame:000000000000A93A                 db  20h
.eh_frame:000000000000A93B                 db  42h ; B
.eh_frame:000000000000A93C                 db  0Eh
.eh_frame:000000000000A93D                 db  18h
.eh_frame:000000000000A93E                 db  42h ; B
.eh_frame:000000000000A93F                 db  0Eh
.eh_frame:000000000000A940                 db  10h
.eh_frame:000000000000A941                 db  42h ; B
.eh_frame:000000000000A942                 db  0Eh
.eh_frame:000000000000A943                 db    8
.eh_frame:000000000000A944                 db  45h ; E
.eh_frame:000000000000A945                 db  0Bh
.eh_frame:000000000000A946                 db    0
.eh_frame:000000000000A947                 db    0
.eh_frame:000000000000A948                 db  14h
.eh_frame:000000000000A949                 db    0
.eh_frame:000000000000A94A                 db    0
.eh_frame:000000000000A94B                 db    0
.eh_frame:000000000000A94C                 db 0ECh
.eh_frame:000000000000A94D                 db    7
.eh_frame:000000000000A94E                 db    0
.eh_frame:000000000000A94F                 db    0
.eh_frame:000000000000A950                 db 0F0h
.eh_frame:000000000000A951                 db 0AAh
.eh_frame:000000000000A952                 db 0FFh
.eh_frame:000000000000A953                 db 0FFh
.eh_frame:000000000000A954                 db  0Fh
.eh_frame:000000000000A955                 db    0
.eh_frame:000000000000A956                 db    0
.eh_frame:000000000000A957                 db    0
.eh_frame:000000000000A958                 db    0
.eh_frame:000000000000A959                 db    0
.eh_frame:000000000000A95A                 db    0
.eh_frame:000000000000A95B                 db    0
.eh_frame:000000000000A95C                 db    0
.eh_frame:000000000000A95D                 db    0
.eh_frame:000000000000A95E                 db    0
.eh_frame:000000000000A95F                 db    0
.eh_frame:000000000000A960                 db  10h
.eh_frame:000000000000A961                 db    1
.eh_frame:000000000000A962                 db    0
.eh_frame:000000000000A963                 db    0
.eh_frame:000000000000A964                 db    4
.eh_frame:000000000000A965                 db    8
.eh_frame:000000000000A966                 db    0
.eh_frame:000000000000A967                 db    0
.eh_frame:000000000000A968                 db 0E8h
.eh_frame:000000000000A969                 db 0AAh
.eh_frame:000000000000A96A                 db 0FFh
.eh_frame:000000000000A96B                 db 0FFh
.eh_frame:000000000000A96C                 db  17h
.eh_frame:000000000000A96D                 db    4
.eh_frame:000000000000A96E                 db    0
.eh_frame:000000000000A96F                 db    0
.eh_frame:000000000000A970                 db    0
.eh_frame:000000000000A971                 db  42h ; B
.eh_frame:000000000000A972                 db  0Eh
.eh_frame:000000000000A973                 db  10h
.eh_frame:000000000000A974                 db  8Fh
.eh_frame:000000000000A975                 db    2
.eh_frame:000000000000A976                 db  42h ; B
.eh_frame:000000000000A977                 db  0Eh
.eh_frame:000000000000A978                 db  18h
.eh_frame:000000000000A979                 db  8Eh
.eh_frame:000000000000A97A                 db    3
.eh_frame:000000000000A97B                 db  42h ; B
.eh_frame:000000000000A97C                 db  0Eh
.eh_frame:000000000000A97D                 db  20h
.eh_frame:000000000000A97E                 db  8Dh
.eh_frame:000000000000A97F                 db    4
.eh_frame:000000000000A980                 db  42h ; B
.eh_frame:000000000000A981                 db  0Eh
.eh_frame:000000000000A982                 db  28h ; (
.eh_frame:000000000000A983                 db  8Ch
.eh_frame:000000000000A984                 db    5
.eh_frame:000000000000A985                 db  44h ; D
.eh_frame:000000000000A986                 db  0Eh
.eh_frame:000000000000A987                 db  30h ; 0
.eh_frame:000000000000A988                 db  86h
.eh_frame:000000000000A989                 db    6
.eh_frame:000000000000A98A                 db  41h ; A
.eh_frame:000000000000A98B                 db  0Eh
.eh_frame:000000000000A98C                 db  38h ; 8
.eh_frame:000000000000A98D                 db  83h
.eh_frame:000000000000A98E                 db    7
.eh_frame:000000000000A98F                 db  4Ah ; J
.eh_frame:000000000000A990                 db  0Eh
.eh_frame:000000000000A991                 db  60h ; `
.eh_frame:000000000000A992                 db    2
.eh_frame:000000000000A993                 db 0DDh
.eh_frame:000000000000A994                 db  0Eh
.eh_frame:000000000000A995                 db  68h ; h
.eh_frame:000000000000A996                 db  57h ; W
.eh_frame:000000000000A997                 db  0Eh
.eh_frame:000000000000A998                 db  70h ; p
.eh_frame:000000000000A999                 db  42h ; B
.eh_frame:000000000000A99A                 db  0Eh
.eh_frame:000000000000A99B                 db  78h ; x
.eh_frame:000000000000A99C                 db  42h ; B
.eh_frame:000000000000A99D                 db  0Eh
.eh_frame:000000000000A99E                 db  80h
.eh_frame:000000000000A99F                 db    1
.eh_frame:000000000000A9A0                 db  42h ; B
.eh_frame:000000000000A9A1                 db  0Eh
.eh_frame:000000000000A9A2                 db  88h
.eh_frame:000000000000A9A3                 db    1
.eh_frame:000000000000A9A4                 db  42h ; B
.eh_frame:000000000000A9A5                 db  0Eh
.eh_frame:000000000000A9A6                 db  90h
.eh_frame:000000000000A9A7                 db    1
.eh_frame:000000000000A9A8                 db  53h ; S
.eh_frame:000000000000A9A9                 db  0Eh
.eh_frame:000000000000A9AA                 db  60h ; `
.eh_frame:000000000000A9AB                 db  44h ; D
.eh_frame:000000000000A9AC                 db  0Ah
.eh_frame:000000000000A9AD                 db  0Eh
.eh_frame:000000000000A9AE                 db  38h ; 8
.eh_frame:000000000000A9AF                 db  41h ; A
.eh_frame:000000000000A9B0                 db  0Eh
.eh_frame:000000000000A9B1                 db  30h ; 0
.eh_frame:000000000000A9B2                 db  41h ; A
.eh_frame:000000000000A9B3                 db  0Eh
.eh_frame:000000000000A9B4                 db  28h ; (
.eh_frame:000000000000A9B5                 db  42h ; B
.eh_frame:000000000000A9B6                 db  0Eh
.eh_frame:000000000000A9B7                 db  20h
.eh_frame:000000000000A9B8                 db  42h ; B
.eh_frame:000000000000A9B9                 db  0Eh
.eh_frame:000000000000A9BA                 db  18h
.eh_frame:000000000000A9BB                 db  42h ; B
.eh_frame:000000000000A9BC                 db  0Eh
.eh_frame:000000000000A9BD                 db  10h
.eh_frame:000000000000A9BE                 db  42h ; B
.eh_frame:000000000000A9BF                 db  0Eh
.eh_frame:000000000000A9C0                 db    8
.eh_frame:000000000000A9C1                 db  44h ; D
.eh_frame:000000000000A9C2                 db  0Bh
.eh_frame:000000000000A9C3                 db    2
.eh_frame:000000000000A9C4                 db  78h ; x
.eh_frame:000000000000A9C5                 db  0Ah
.eh_frame:000000000000A9C6                 db  0Eh
.eh_frame:000000000000A9C7                 db  68h ; h
.eh_frame:000000000000A9C8                 db  48h ; H
.eh_frame:000000000000A9C9                 db  0Bh
.eh_frame:000000000000A9CA                 db  5Ah ; Z
.eh_frame:000000000000A9CB                 db  0Ah
.eh_frame:000000000000A9CC                 db  0Eh
.eh_frame:000000000000A9CD                 db  38h ; 8
.eh_frame:000000000000A9CE                 db  47h ; G
.eh_frame:000000000000A9CF                 db  0Eh
.eh_frame:000000000000A9D0                 db  30h ; 0
.eh_frame:000000000000A9D1                 db  41h ; A
.eh_frame:000000000000A9D2                 db  0Eh
.eh_frame:000000000000A9D3                 db  28h ; (
.eh_frame:000000000000A9D4                 db  42h ; B
.eh_frame:000000000000A9D5                 db  0Eh
.eh_frame:000000000000A9D6                 db  20h
.eh_frame:000000000000A9D7                 db  42h ; B
.eh_frame:000000000000A9D8                 db  0Eh
.eh_frame:000000000000A9D9                 db  18h
.eh_frame:000000000000A9DA                 db  42h ; B
.eh_frame:000000000000A9DB                 db  0Eh
.eh_frame:000000000000A9DC                 db  10h
.eh_frame:000000000000A9DD                 db  42h ; B
.eh_frame:000000000000A9DE                 db  0Eh
.eh_frame:000000000000A9DF                 db    8
.eh_frame:000000000000A9E0                 db  56h ; V
.eh_frame:000000000000A9E1                 db  0Bh
.eh_frame:000000000000A9E2                 db  5Eh ; ^
.eh_frame:000000000000A9E3                 db  0Ah
.eh_frame:000000000000A9E4                 db  0Eh
.eh_frame:000000000000A9E5                 db  38h ; 8
.eh_frame:000000000000A9E6                 db  52h ; R
.eh_frame:000000000000A9E7                 db  0Eh
.eh_frame:000000000000A9E8                 db  30h ; 0
.eh_frame:000000000000A9E9                 db  41h ; A
.eh_frame:000000000000A9EA                 db  0Eh
.eh_frame:000000000000A9EB                 db  28h ; (
.eh_frame:000000000000A9EC                 db  42h ; B
.eh_frame:000000000000A9ED                 db  0Eh
.eh_frame:000000000000A9EE                 db  20h
.eh_frame:000000000000A9EF                 db  42h ; B
.eh_frame:000000000000A9F0                 db  0Eh
.eh_frame:000000000000A9F1                 db  18h
.eh_frame:000000000000A9F2                 db  42h ; B
.eh_frame:000000000000A9F3                 db  0Eh
.eh_frame:000000000000A9F4                 db  10h
.eh_frame:000000000000A9F5                 db  42h ; B
.eh_frame:000000000000A9F6                 db  0Eh
.eh_frame:000000000000A9F7                 db    8
.eh_frame:000000000000A9F8                 db  4Fh ; O
.eh_frame:000000000000A9F9                 db  0Bh
.eh_frame:000000000000A9FA                 db  62h ; b
.eh_frame:000000000000A9FB                 db  0Ah
.eh_frame:000000000000A9FC                 db  0Eh
.eh_frame:000000000000A9FD                 db  38h ; 8
.eh_frame:000000000000A9FE                 db  50h ; P
.eh_frame:000000000000A9FF                 db  0Eh
.eh_frame:000000000000AA00                 db  30h ; 0
.eh_frame:000000000000AA01                 db  41h ; A
.eh_frame:000000000000AA02                 db  0Eh
.eh_frame:000000000000AA03                 db  28h ; (
.eh_frame:000000000000AA04                 db  42h ; B
.eh_frame:000000000000AA05                 db  0Eh
.eh_frame:000000000000AA06                 db  20h
.eh_frame:000000000000AA07                 db  42h ; B
.eh_frame:000000000000AA08                 db  0Eh
.eh_frame:000000000000AA09                 db  18h
.eh_frame:000000000000AA0A                 db  42h ; B
.eh_frame:000000000000AA0B                 db  0Eh
.eh_frame:000000000000AA0C                 db  10h
.eh_frame:000000000000AA0D                 db  42h ; B
.eh_frame:000000000000AA0E                 db  0Eh
.eh_frame:000000000000AA0F                 db    8
.eh_frame:000000000000AA10                 db  55h ; U
.eh_frame:000000000000AA11                 db  0Bh
.eh_frame:000000000000AA12                 db  66h ; f
.eh_frame:000000000000AA13                 db  0Eh
.eh_frame:000000000000AA14                 db  68h ; h
.eh_frame:000000000000AA15                 db  42h ; B
.eh_frame:000000000000AA16                 db  0Eh
.eh_frame:000000000000AA17                 db  70h ; p
.eh_frame:000000000000AA18                 db  5Ch ; \
.eh_frame:000000000000AA19                 db  0Eh
.eh_frame:000000000000AA1A                 db  68h ; h
.eh_frame:000000000000AA1B                 db  41h ; A
.eh_frame:000000000000AA1C                 db  0Eh
.eh_frame:000000000000AA1D                 db  60h ; `
.eh_frame:000000000000AA1E                 db  44h ; D
.eh_frame:000000000000AA1F                 db  0Ah
.eh_frame:000000000000AA20                 db  0Eh
.eh_frame:000000000000AA21                 db  38h ; 8
.eh_frame:000000000000AA22                 db  41h ; A
.eh_frame:000000000000AA23                 db  0Eh
.eh_frame:000000000000AA24                 db  30h ; 0
.eh_frame:000000000000AA25                 db  41h ; A
.eh_frame:000000000000AA26                 db  0Eh
.eh_frame:000000000000AA27                 db  28h ; (
.eh_frame:000000000000AA28                 db  42h ; B
.eh_frame:000000000000AA29                 db  0Eh
.eh_frame:000000000000AA2A                 db  20h
.eh_frame:000000000000AA2B                 db  42h ; B
.eh_frame:000000000000AA2C                 db  0Eh
.eh_frame:000000000000AA2D                 db  18h
.eh_frame:000000000000AA2E                 db  42h ; B
.eh_frame:000000000000AA2F                 db  0Eh
.eh_frame:000000000000AA30                 db  10h
.eh_frame:000000000000AA31                 db  42h ; B
.eh_frame:000000000000AA32                 db  0Eh
.eh_frame:000000000000AA33                 db    8
.eh_frame:000000000000AA34                 db  45h ; E
.eh_frame:000000000000AA35                 db  0Bh
.eh_frame:000000000000AA36                 db  68h ; h
.eh_frame:000000000000AA37                 db  0Ah
.eh_frame:000000000000AA38                 db  0Eh
.eh_frame:000000000000AA39                 db  68h ; h
.eh_frame:000000000000AA3A                 db  48h ; H
.eh_frame:000000000000AA3B                 db  0Bh
.eh_frame:000000000000AA3C                 db  72h ; r
.eh_frame:000000000000AA3D                 db  0Eh
.eh_frame:000000000000AA3E                 db  68h ; h
.eh_frame:000000000000AA3F                 db  45h ; E
.eh_frame:000000000000AA40                 db  0Eh
.eh_frame:000000000000AA41                 db  70h ; p
.eh_frame:000000000000AA42                 db  42h ; B
.eh_frame:000000000000AA43                 db  0Eh
.eh_frame:000000000000AA44                 db  78h ; x
.eh_frame:000000000000AA45                 db  42h ; B
.eh_frame:000000000000AA46                 db  0Eh
.eh_frame:000000000000AA47                 db  80h
.eh_frame:000000000000AA48                 db    1
.eh_frame:000000000000AA49                 db  5Eh ; ^
.eh_frame:000000000000AA4A                 db  0Eh
.eh_frame:000000000000AA4B                 db  60h ; `
.eh_frame:000000000000AA4C                 db  44h ; D
.eh_frame:000000000000AA4D                 db  0Ah
.eh_frame:000000000000AA4E                 db  0Eh
.eh_frame:000000000000AA4F                 db  38h ; 8
.eh_frame:000000000000AA50                 db  41h ; A
.eh_frame:000000000000AA51                 db  0Eh
.eh_frame:000000000000AA52                 db  30h ; 0
.eh_frame:000000000000AA53                 db  41h ; A
.eh_frame:000000000000AA54                 db  0Eh
.eh_frame:000000000000AA55                 db  28h ; (
.eh_frame:000000000000AA56                 db  42h ; B
.eh_frame:000000000000AA57                 db  0Eh
.eh_frame:000000000000AA58                 db  20h
.eh_frame:000000000000AA59                 db  42h ; B
.eh_frame:000000000000AA5A                 db  0Eh
.eh_frame:000000000000AA5B                 db  18h
.eh_frame:000000000000AA5C                 db  42h ; B
.eh_frame:000000000000AA5D                 db  0Eh
.eh_frame:000000000000AA5E                 db  10h
.eh_frame:000000000000AA5F                 db  42h ; B
.eh_frame:000000000000AA60                 db  0Eh
.eh_frame:000000000000AA61                 db    8
.eh_frame:000000000000AA62                 db  41h ; A
.eh_frame:000000000000AA63                 db  0Bh
.eh_frame:000000000000AA64                 db  79h ; y
.eh_frame:000000000000AA65                 db  0Ah
.eh_frame:000000000000AA66                 db  0Eh
.eh_frame:000000000000AA67                 db  68h ; h
.eh_frame:000000000000AA68                 db  42h ; B
.eh_frame:000000000000AA69                 db  0Eh
.eh_frame:000000000000AA6A                 db  70h ; p
.eh_frame:000000000000AA6B                 db  42h ; B
.eh_frame:000000000000AA6C                 db  0Eh
.eh_frame:000000000000AA6D                 db  78h ; x
.eh_frame:000000000000AA6E                 db  42h ; B
.eh_frame:000000000000AA6F                 db  0Eh
.eh_frame:000000000000AA70                 db  80h
.eh_frame:000000000000AA71                 db    1
.eh_frame:000000000000AA72                 db  51h ; Q
.eh_frame:000000000000AA73                 db  0Bh
.eh_frame:000000000000AA74                 db  10h
.eh_frame:000000000000AA75                 db    0
.eh_frame:000000000000AA76                 db    0
.eh_frame:000000000000AA77                 db    0
.eh_frame:000000000000AA78                 db  18h
.eh_frame:000000000000AA79                 db    9
.eh_frame:000000000000AA7A                 db    0
.eh_frame:000000000000AA7B                 db    0
.eh_frame:000000000000AA7C                 db 0F4h
.eh_frame:000000000000AA7D                 db 0ADh
.eh_frame:000000000000AA7E                 db 0FFh
.eh_frame:000000000000AA7F                 db 0FFh
.eh_frame:000000000000AA80                 db  20h
.eh_frame:000000000000AA81                 db    0
.eh_frame:000000000000AA82                 db    0
.eh_frame:000000000000AA83                 db    0
.eh_frame:000000000000AA84                 db    0
.eh_frame:000000000000AA85                 db    0
.eh_frame:000000000000AA86                 db    0
.eh_frame:000000000000AA87                 db    0
.eh_frame:000000000000AA88                 db  18h
.eh_frame:000000000000AA89                 db    0
.eh_frame:000000000000AA8A                 db    0
.eh_frame:000000000000AA8B                 db    0
.eh_frame:000000000000AA8C                 db  2Ch ; ,
.eh_frame:000000000000AA8D                 db    9
.eh_frame:000000000000AA8E                 db    0
.eh_frame:000000000000AA8F                 db    0
.eh_frame:000000000000AA90                 db    0
.eh_frame:000000000000AA91                 db 0AEh
.eh_frame:000000000000AA92                 db 0FFh
.eh_frame:000000000000AA93                 db 0FFh
.eh_frame:000000000000AA94                 db  78h ; x
.eh_frame:000000000000AA95                 db    0
.eh_frame:000000000000AA96                 db    0
.eh_frame:000000000000AA97                 db    0
.eh_frame:000000000000AA98                 db    0
.eh_frame:000000000000AA99                 db  44h ; D
.eh_frame:000000000000AA9A                 db  0Eh
.eh_frame:000000000000AA9B                 db  70h ; p
.eh_frame:000000000000AA9C                 db    2
.eh_frame:000000000000AA9D                 db  60h ; `
.eh_frame:000000000000AA9E                 db  0Ah
.eh_frame:000000000000AA9F                 db  0Eh
.eh_frame:000000000000AAA0                 db    8
.eh_frame:000000000000AAA1                 db  41h ; A
.eh_frame:000000000000AAA2                 db  0Bh
.eh_frame:000000000000AAA3                 db    0
.eh_frame:000000000000AAA4                 db  28h ; (
.eh_frame:000000000000AAA5                 db    0
.eh_frame:000000000000AAA6                 db    0
.eh_frame:000000000000AAA7                 db    0
.eh_frame:000000000000AAA8                 db  48h ; H
.eh_frame:000000000000AAA9                 db    9
.eh_frame:000000000000AAAA                 db    0
.eh_frame:000000000000AAAB                 db    0
.eh_frame:000000000000AAAC                 db  64h ; d
.eh_frame:000000000000AAAD                 db 0AEh
.eh_frame:000000000000AAAE                 db 0FFh
.eh_frame:000000000000AAAF                 db 0FFh
.eh_frame:000000000000AAB0                 db 0D5h
.eh_frame:000000000000AAB1                 db    0
.eh_frame:000000000000AAB2                 db    0
.eh_frame:000000000000AAB3                 db    0
.eh_frame:000000000000AAB4                 db    0
.eh_frame:000000000000AAB5                 db  41h ; A
.eh_frame:000000000000AAB6                 db  0Eh
.eh_frame:000000000000AAB7                 db  10h
.eh_frame:000000000000AAB8                 db  86h
.eh_frame:000000000000AAB9                 db    2
.eh_frame:000000000000AABA                 db  41h ; A
.eh_frame:000000000000AABB                 db  0Eh
.eh_frame:000000000000AABC                 db  18h
.eh_frame:000000000000AABD                 db  83h
.eh_frame:000000000000AABE                 db    3
.eh_frame:000000000000AABF                 db  50h ; P
.eh_frame:000000000000AAC0                 db  0Eh
.eh_frame:000000000000AAC1                 db 0D0h
.eh_frame:000000000000AAC2                 db    1
.eh_frame:000000000000AAC3                 db    2
.eh_frame:000000000000AAC4                 db 0ABh
.eh_frame:000000000000AAC5                 db  0Ah
.eh_frame:000000000000AAC6                 db  0Eh
.eh_frame:000000000000AAC7                 db  18h
.eh_frame:000000000000AAC8                 db  41h ; A
.eh_frame:000000000000AAC9                 db  0Eh
.eh_frame:000000000000AACA                 db  10h
.eh_frame:000000000000AACB                 db  41h ; A
.eh_frame:000000000000AACC                 db  0Eh
.eh_frame:000000000000AACD                 db    8
.eh_frame:000000000000AACE                 db  41h ; A
.eh_frame:000000000000AACF                 db  0Bh
.eh_frame:000000000000AAD0                 db  1Ch
.eh_frame:000000000000AAD1                 db    0
.eh_frame:000000000000AAD2                 db    0
.eh_frame:000000000000AAD3                 db    0
.eh_frame:000000000000AAD4                 db  74h ; t
.eh_frame:000000000000AAD5                 db    9
.eh_frame:000000000000AAD6                 db    0
.eh_frame:000000000000AAD7                 db    0
.eh_frame:000000000000AAD8                 db  18h
.eh_frame:000000000000AAD9                 db 0AFh
.eh_frame:000000000000AADA                 db 0FFh
.eh_frame:000000000000AADB                 db 0FFh
.eh_frame:000000000000AADC                 db  80h
.eh_frame:000000000000AADD                 db    0
.eh_frame:000000000000AADE                 db    0
.eh_frame:000000000000AADF                 db    0
.eh_frame:000000000000AAE0                 db    0
.eh_frame:000000000000AAE1                 db  41h ; A
.eh_frame:000000000000AAE2                 db  0Eh
.eh_frame:000000000000AAE3                 db  10h
.eh_frame:000000000000AAE4                 db  83h
.eh_frame:000000000000AAE5                 db    2
.eh_frame:000000000000AAE6                 db    2
.eh_frame:000000000000AAE7                 db  7Ah ; z
.eh_frame:000000000000AAE8                 db  0Eh
.eh_frame:000000000000AAE9                 db    8
.eh_frame:000000000000AAEA                 db    0
.eh_frame:000000000000AAEB                 db    0
.eh_frame:000000000000AAEC                 db    0
.eh_frame:000000000000AAED                 db    0
.eh_frame:000000000000AAEE                 db    0
.eh_frame:000000000000AAEF                 db    0
.eh_frame:000000000000AAF0                 db  18h
.eh_frame:000000000000AAF1                 db    0
.eh_frame:000000000000AAF2                 db    0
.eh_frame:000000000000AAF3                 db    0
.eh_frame:000000000000AAF4                 db  94h
.eh_frame:000000000000AAF5                 db    9
.eh_frame:000000000000AAF6                 db    0
.eh_frame:000000000000AAF7                 db    0
.eh_frame:000000000000AAF8                 db  78h ; x
.eh_frame:000000000000AAF9                 db 0AFh
.eh_frame:000000000000AAFA                 db 0FFh
.eh_frame:000000000000AAFB                 db 0FFh
.eh_frame:000000000000AAFC                 db  1Ah
.eh_frame:000000000000AAFD                 db    0
.eh_frame:000000000000AAFE                 db    0
.eh_frame:000000000000AAFF                 db    0
.eh_frame:000000000000AB00                 db    0
.eh_frame:000000000000AB01                 db  41h ; A
.eh_frame:000000000000AB02                 db  0Eh
.eh_frame:000000000000AB03                 db  10h
.eh_frame:000000000000AB04                 db  83h
.eh_frame:000000000000AB05                 db    2
.eh_frame:000000000000AB06                 db  53h ; S
.eh_frame:000000000000AB07                 db  0Ah
.eh_frame:000000000000AB08                 db  0Eh
.eh_frame:000000000000AB09                 db    8
.eh_frame:000000000000AB0A                 db  41h ; A
.eh_frame:000000000000AB0B                 db  0Bh
.eh_frame:000000000000AB0C                 db  10h
.eh_frame:000000000000AB0D                 db    0
.eh_frame:000000000000AB0E                 db    0
.eh_frame:000000000000AB0F                 db    0
.eh_frame:000000000000AB10                 db 0B0h
.eh_frame:000000000000AB11                 db    9
.eh_frame:000000000000AB12                 db    0
.eh_frame:000000000000AB13                 db    0
.eh_frame:000000000000AB14                 db  7Ch ; |
.eh_frame:000000000000AB15                 db 0AFh
.eh_frame:000000000000AB16                 db 0FFh
.eh_frame:000000000000AB17                 db 0FFh
.eh_frame:000000000000AB18                 db  24h ; $
.eh_frame:000000000000AB19                 db    0
.eh_frame:000000000000AB1A                 db    0
.eh_frame:000000000000AB1B                 db    0
.eh_frame:000000000000AB1C                 db    0
.eh_frame:000000000000AB1D                 db  5Fh ; _
.eh_frame:000000000000AB1E                 db  0Eh
.eh_frame:000000000000AB1F                 db  10h
.eh_frame:000000000000AB20                 db  10h
.eh_frame:000000000000AB21                 db    0
.eh_frame:000000000000AB22                 db    0
.eh_frame:000000000000AB23                 db    0
.eh_frame:000000000000AB24                 db 0C4h
.eh_frame:000000000000AB25                 db    9
.eh_frame:000000000000AB26                 db    0
.eh_frame:000000000000AB27                 db    0
.eh_frame:000000000000AB28                 db  98h
.eh_frame:000000000000AB29                 db 0AFh
.eh_frame:000000000000AB2A                 db 0FFh
.eh_frame:000000000000AB2B                 db 0FFh
.eh_frame:000000000000AB2C                 db    2
.eh_frame:000000000000AB2D                 db    0
.eh_frame:000000000000AB2E                 db    0
.eh_frame:000000000000AB2F                 db    0
.eh_frame:000000000000AB30                 db    0
.eh_frame:000000000000AB31                 db    0
.eh_frame:000000000000AB32                 db    0
.eh_frame:000000000000AB33                 db    0
.eh_frame:000000000000AB34                 db  20h
.eh_frame:000000000000AB35                 db    0
.eh_frame:000000000000AB36                 db    0
.eh_frame:000000000000AB37                 db    0
.eh_frame:000000000000AB38                 db 0D8h
.eh_frame:000000000000AB39                 db    9
.eh_frame:000000000000AB3A                 db    0
.eh_frame:000000000000AB3B                 db    0
.eh_frame:000000000000AB3C                 db  94h
.eh_frame:000000000000AB3D                 db 0AFh
.eh_frame:000000000000AB3E                 db 0FFh
.eh_frame:000000000000AB3F                 db 0FFh
.eh_frame:000000000000AB40                 db  36h ; 6
.eh_frame:000000000000AB41                 db    0
.eh_frame:000000000000AB42                 db    0
.eh_frame:000000000000AB43                 db    0
.eh_frame:000000000000AB44                 db    0
.eh_frame:000000000000AB45                 db  44h ; D
.eh_frame:000000000000AB46                 db  0Eh
.eh_frame:000000000000AB47                 db  10h
.eh_frame:000000000000AB48                 db  83h
.eh_frame:000000000000AB49                 db    2
.eh_frame:000000000000AB4A                 db  5Dh ; ]
.eh_frame:000000000000AB4B                 db  0Ah
.eh_frame:000000000000AB4C                 db  0Eh
.eh_frame:000000000000AB4D                 db    8
.eh_frame:000000000000AB4E                 db  47h ; G
.eh_frame:000000000000AB4F                 db  0Bh
.eh_frame:000000000000AB50                 db  48h ; H
.eh_frame:000000000000AB51                 db  0Ah
.eh_frame:000000000000AB52                 db  0Eh
.eh_frame:000000000000AB53                 db    8
.eh_frame:000000000000AB54                 db  41h ; A
.eh_frame:000000000000AB55                 db  0Bh
.eh_frame:000000000000AB56                 db    0
.eh_frame:000000000000AB57                 db    0
.eh_frame:000000000000AB58                 db  10h
.eh_frame:000000000000AB59                 db    0
.eh_frame:000000000000AB5A                 db    0
.eh_frame:000000000000AB5B                 db    0
.eh_frame:000000000000AB5C                 db 0FCh
.eh_frame:000000000000AB5D                 db    9
.eh_frame:000000000000AB5E                 db    0
.eh_frame:000000000000AB5F                 db    0
.eh_frame:000000000000AB60                 db 0B0h
.eh_frame:000000000000AB61                 db 0AFh
.eh_frame:000000000000AB62                 db 0FFh
.eh_frame:000000000000AB63                 db 0FFh
.eh_frame:000000000000AB64                 db  24h ; $
.eh_frame:000000000000AB65                 db    0
.eh_frame:000000000000AB66                 db    0
.eh_frame:000000000000AB67                 db    0
.eh_frame:000000000000AB68                 db    0
.eh_frame:000000000000AB69                 db  5Fh ; _
.eh_frame:000000000000AB6A                 db  0Eh
.eh_frame:000000000000AB6B                 db  10h
.eh_frame:000000000000AB6C                 db  14h
.eh_frame:000000000000AB6D                 db    0
.eh_frame:000000000000AB6E                 db    0
.eh_frame:000000000000AB6F                 db    0
.eh_frame:000000000000AB70                 db  10h
.eh_frame:000000000000AB71                 db  0Ah
.eh_frame:000000000000AB72                 db    0
.eh_frame:000000000000AB73                 db    0
.eh_frame:000000000000AB74                 db 0CCh
.eh_frame:000000000000AB75                 db 0AFh
.eh_frame:000000000000AB76                 db 0FFh
.eh_frame:000000000000AB77                 db 0FFh
.eh_frame:000000000000AB78                 db  82h
.eh_frame:000000000000AB79                 db    0
.eh_frame:000000000000AB7A                 db    0
.eh_frame:000000000000AB7B                 db    0
.eh_frame:000000000000AB7C                 db    0
.eh_frame:000000000000AB7D                 db    2
.eh_frame:000000000000AB7E                 db  5Fh ; _
.eh_frame:000000000000AB7F                 db  0Eh
.eh_frame:000000000000AB80                 db  10h
.eh_frame:000000000000AB81                 db  49h ; I
.eh_frame:000000000000AB82                 db  0Eh
.eh_frame:000000000000AB83                 db    8
.eh_frame:000000000000AB84                 db  14h
.eh_frame:000000000000AB85                 db    0
.eh_frame:000000000000AB86                 db    0
.eh_frame:000000000000AB87                 db    0
.eh_frame:000000000000AB88                 db  28h ; (
.eh_frame:000000000000AB89                 db  0Ah
.eh_frame:000000000000AB8A                 db    0
.eh_frame:000000000000AB8B                 db    0
.eh_frame:000000000000AB8C                 db  44h ; D
.eh_frame:000000000000AB8D                 db 0B0h
.eh_frame:000000000000AB8E                 db 0FFh
.eh_frame:000000000000AB8F                 db 0FFh
.eh_frame:000000000000AB90                 db  4Ah ; J
.eh_frame:000000000000AB91                 db    0
.eh_frame:000000000000AB92                 db    0
.eh_frame:000000000000AB93                 db    0
.eh_frame:000000000000AB94                 db    0
.eh_frame:000000000000AB95                 db    2
.eh_frame:000000000000AB96                 db  45h ; E
.eh_frame:000000000000AB97                 db  0Eh
.eh_frame:000000000000AB98                 db  10h
.eh_frame:000000000000AB99                 db    0
.eh_frame:000000000000AB9A                 db    0
.eh_frame:000000000000AB9B                 db    0
.eh_frame:000000000000AB9C                 db  18h
.eh_frame:000000000000AB9D                 db    0
.eh_frame:000000000000AB9E                 db    0
.eh_frame:000000000000AB9F                 db    0
.eh_frame:000000000000ABA0                 db  40h ; @
.eh_frame:000000000000ABA1                 db  0Ah
.eh_frame:000000000000ABA2                 db    0
.eh_frame:000000000000ABA3                 db    0
.eh_frame:000000000000ABA4                 db  7Ch ; |
.eh_frame:000000000000ABA5                 db 0B0h
.eh_frame:000000000000ABA6                 db 0FFh
.eh_frame:000000000000ABA7                 db 0FFh
.eh_frame:000000000000ABA8                 db  17h
.eh_frame:000000000000ABA9                 db    0
.eh_frame:000000000000ABAA                 db    0
.eh_frame:000000000000ABAB                 db    0
.eh_frame:000000000000ABAC                 db    0
.eh_frame:000000000000ABAD                 db  41h ; A
.eh_frame:000000000000ABAE                 db  0Eh
.eh_frame:000000000000ABAF                 db  10h
.eh_frame:000000000000ABB0                 db  83h
.eh_frame:000000000000ABB1                 db    2
.eh_frame:000000000000ABB2                 db  51h ; Q
.eh_frame:000000000000ABB3                 db  0Eh
.eh_frame:000000000000ABB4                 db    8
.eh_frame:000000000000ABB5                 db    0
.eh_frame:000000000000ABB6                 db    0
.eh_frame:000000000000ABB7                 db    0
.eh_frame:000000000000ABB8                 db  18h
.eh_frame:000000000000ABB9                 db    0
.eh_frame:000000000000ABBA                 db    0
.eh_frame:000000000000ABBB                 db    0
.eh_frame:000000000000ABBC                 db  5Ch ; \
.eh_frame:000000000000ABBD                 db  0Ah
.eh_frame:000000000000ABBE                 db    0
.eh_frame:000000000000ABBF                 db    0
.eh_frame:000000000000ABC0                 db  80h
.eh_frame:000000000000ABC1                 db 0B0h
.eh_frame:000000000000ABC2                 db 0FFh
.eh_frame:000000000000ABC3                 db 0FFh
.eh_frame:000000000000ABC4                 db  2Eh ; .
.eh_frame:000000000000ABC5                 db    0
.eh_frame:000000000000ABC6                 db    0
.eh_frame:000000000000ABC7                 db    0
.eh_frame:000000000000ABC8                 db    0
.eh_frame:000000000000ABC9                 db  47h ; G
.eh_frame:000000000000ABCA                 db  0Eh
.eh_frame:000000000000ABCB                 db  10h
.eh_frame:000000000000ABCC                 db  61h ; a
.eh_frame:000000000000ABCD                 db  0Ah
.eh_frame:000000000000ABCE                 db  0Eh
.eh_frame:000000000000ABCF                 db    8
.eh_frame:000000000000ABD0                 db  41h ; A
.eh_frame:000000000000ABD1                 db  0Bh
.eh_frame:000000000000ABD2                 db    0
.eh_frame:000000000000ABD3                 db    0
.eh_frame:000000000000ABD4                 db  24h ; $
.eh_frame:000000000000ABD5                 db    0
.eh_frame:000000000000ABD6                 db    0
.eh_frame:000000000000ABD7                 db    0
.eh_frame:000000000000ABD8                 db  78h ; x
.eh_frame:000000000000ABD9                 db  0Ah
.eh_frame:000000000000ABDA                 db    0
.eh_frame:000000000000ABDB                 db    0
.eh_frame:000000000000ABDC                 db  94h
.eh_frame:000000000000ABDD                 db 0B0h
.eh_frame:000000000000ABDE                 db 0FFh
.eh_frame:000000000000ABDF                 db 0FFh
.eh_frame:000000000000ABE0                 db  28h ; (
.eh_frame:000000000000ABE1                 db    0
.eh_frame:000000000000ABE2                 db    0
.eh_frame:000000000000ABE3                 db    0
.eh_frame:000000000000ABE4                 db    0
.eh_frame:000000000000ABE5                 db  41h ; A
.eh_frame:000000000000ABE6                 db  0Eh
.eh_frame:000000000000ABE7                 db  10h
.eh_frame:000000000000ABE8                 db  86h
.eh_frame:000000000000ABE9                 db    2
.eh_frame:000000000000ABEA                 db  41h ; A
.eh_frame:000000000000ABEB                 db  0Eh
.eh_frame:000000000000ABEC                 db  18h
.eh_frame:000000000000ABED                 db  83h
.eh_frame:000000000000ABEE                 db    3
.eh_frame:000000000000ABEF                 db  4Dh ; M
.eh_frame:000000000000ABF0                 db  0Eh
.eh_frame:000000000000ABF1                 db  20h
.eh_frame:000000000000ABF2                 db  49h ; I
.eh_frame:000000000000ABF3                 db  0Eh
.eh_frame:000000000000ABF4                 db  18h
.eh_frame:000000000000ABF5                 db  47h ; G
.eh_frame:000000000000ABF6                 db  0Eh
.eh_frame:000000000000ABF7                 db  10h
.eh_frame:000000000000ABF8                 db  41h ; A
.eh_frame:000000000000ABF9                 db  0Eh
.eh_frame:000000000000ABFA                 db    8
.eh_frame:000000000000ABFB                 db    0
.eh_frame:000000000000ABFC                 db  18h
.eh_frame:000000000000ABFD                 db    0
.eh_frame:000000000000ABFE                 db    0
.eh_frame:000000000000ABFF                 db    0
.eh_frame:000000000000AC00                 db 0A0h
.eh_frame:000000000000AC01                 db  0Ah
.eh_frame:000000000000AC02                 db    0
.eh_frame:000000000000AC03                 db    0
.eh_frame:000000000000AC04                 db  9Ch
.eh_frame:000000000000AC05                 db 0B0h
.eh_frame:000000000000AC06                 db 0FFh
.eh_frame:000000000000AC07                 db 0FFh
.eh_frame:000000000000AC08                 db  13h
.eh_frame:000000000000AC09                 db    0
.eh_frame:000000000000AC0A                 db    0
.eh_frame:000000000000AC0B                 db    0
.eh_frame:000000000000AC0C                 db    0
.eh_frame:000000000000AC0D                 db  41h ; A
.eh_frame:000000000000AC0E                 db  0Eh
.eh_frame:000000000000AC0F                 db  10h
.eh_frame:000000000000AC10                 db  83h
.eh_frame:000000000000AC11                 db    2
.eh_frame:000000000000AC12                 db  50h ; P
.eh_frame:000000000000AC13                 db  0Eh
.eh_frame:000000000000AC14                 db    8
.eh_frame:000000000000AC15                 db    0
.eh_frame:000000000000AC16                 db    0
.eh_frame:000000000000AC17                 db    0
.eh_frame:000000000000AC18                 db  14h
.eh_frame:000000000000AC19                 db    0
.eh_frame:000000000000AC1A                 db    0
.eh_frame:000000000000AC1B                 db    0
.eh_frame:000000000000AC1C                 db 0BCh
.eh_frame:000000000000AC1D                 db  0Ah
.eh_frame:000000000000AC1E                 db    0
.eh_frame:000000000000AC1F                 db    0
.eh_frame:000000000000AC20                 db 0A0h
.eh_frame:000000000000AC21                 db 0B0h
.eh_frame:000000000000AC22                 db 0FFh
.eh_frame:000000000000AC23                 db 0FFh
.eh_frame:000000000000AC24                 db  35h ; 5
.eh_frame:000000000000AC25                 db    0
.eh_frame:000000000000AC26                 db    0
.eh_frame:000000000000AC27                 db    0
.eh_frame:000000000000AC28                 db    0
.eh_frame:000000000000AC29                 db  4Bh ; K
.eh_frame:000000000000AC2A                 db  0Eh
.eh_frame:000000000000AC2B                 db  10h
.eh_frame:000000000000AC2C                 db    0
.eh_frame:000000000000AC2D                 db    0
.eh_frame:000000000000AC2E                 db    0
.eh_frame:000000000000AC2F                 db    0
.eh_frame:000000000000AC30                 db  48h ; H
.eh_frame:000000000000AC31                 db    0
.eh_frame:000000000000AC32                 db    0
.eh_frame:000000000000AC33                 db    0
.eh_frame:000000000000AC34                 db 0D4h
.eh_frame:000000000000AC35                 db  0Ah
.eh_frame:000000000000AC36                 db    0
.eh_frame:000000000000AC37                 db    0
.eh_frame:000000000000AC38                 db 0C8h
.eh_frame:000000000000AC39                 db 0B0h
.eh_frame:000000000000AC3A                 db 0FFh
.eh_frame:000000000000AC3B                 db 0FFh
.eh_frame:000000000000AC3C                 db  43h ; C
.eh_frame:000000000000AC3D                 db    1
.eh_frame:000000000000AC3E                 db    0
.eh_frame:000000000000AC3F                 db    0
.eh_frame:000000000000AC40                 db    0
.eh_frame:000000000000AC41                 db  42h ; B
.eh_frame:000000000000AC42                 db  0Eh
.eh_frame:000000000000AC43                 db  10h
.eh_frame:000000000000AC44                 db  8Fh
.eh_frame:000000000000AC45                 db    2
.eh_frame:000000000000AC46                 db  42h ; B
.eh_frame:000000000000AC47                 db  0Eh
.eh_frame:000000000000AC48                 db  18h
.eh_frame:000000000000AC49                 db  8Eh
.eh_frame:000000000000AC4A                 db    3
.eh_frame:000000000000AC4B                 db  42h ; B
.eh_frame:000000000000AC4C                 db  0Eh
.eh_frame:000000000000AC4D                 db  20h
.eh_frame:000000000000AC4E                 db  8Dh
.eh_frame:000000000000AC4F                 db    4
.eh_frame:000000000000AC50                 db  42h ; B
.eh_frame:000000000000AC51                 db  0Eh
.eh_frame:000000000000AC52                 db  28h ; (
.eh_frame:000000000000AC53                 db  8Ch
.eh_frame:000000000000AC54                 db    5
.eh_frame:000000000000AC55                 db  41h ; A
.eh_frame:000000000000AC56                 db  0Eh
.eh_frame:000000000000AC57                 db  30h ; 0
.eh_frame:000000000000AC58                 db  86h
.eh_frame:000000000000AC59                 db    6
.eh_frame:000000000000AC5A                 db  41h ; A
.eh_frame:000000000000AC5B                 db  0Eh
.eh_frame:000000000000AC5C                 db  38h ; 8
.eh_frame:000000000000AC5D                 db  83h
.eh_frame:000000000000AC5E                 db    7
.eh_frame:000000000000AC5F                 db  44h ; D
.eh_frame:000000000000AC60                 db  0Eh
.eh_frame:000000000000AC61                 db  60h ; `
.eh_frame:000000000000AC62                 db    2
.eh_frame:000000000000AC63                 db 0FCh
.eh_frame:000000000000AC64                 db  0Ah
.eh_frame:000000000000AC65                 db  0Eh
.eh_frame:000000000000AC66                 db  38h ; 8
.eh_frame:000000000000AC67                 db  41h ; A
.eh_frame:000000000000AC68                 db  0Eh
.eh_frame:000000000000AC69                 db  30h ; 0
.eh_frame:000000000000AC6A                 db  41h ; A
.eh_frame:000000000000AC6B                 db  0Eh
.eh_frame:000000000000AC6C                 db  28h ; (
.eh_frame:000000000000AC6D                 db  42h ; B
.eh_frame:000000000000AC6E                 db  0Eh
.eh_frame:000000000000AC6F                 db  20h
.eh_frame:000000000000AC70                 db  42h ; B
.eh_frame:000000000000AC71                 db  0Eh
.eh_frame:000000000000AC72                 db  18h
.eh_frame:000000000000AC73                 db  42h ; B
.eh_frame:000000000000AC74                 db  0Eh
.eh_frame:000000000000AC75                 db  10h
.eh_frame:000000000000AC76                 db  42h ; B
.eh_frame:000000000000AC77                 db  0Eh
.eh_frame:000000000000AC78                 db    8
.eh_frame:000000000000AC79                 db  41h ; A
.eh_frame:000000000000AC7A                 db  0Bh
.eh_frame:000000000000AC7B                 db    0
.eh_frame:000000000000AC7C                 db  18h
.eh_frame:000000000000AC7D                 db    0
.eh_frame:000000000000AC7E                 db    0
.eh_frame:000000000000AC7F                 db    0
.eh_frame:000000000000AC80                 db  20h
.eh_frame:000000000000AC81                 db  0Bh
.eh_frame:000000000000AC82                 db    0
.eh_frame:000000000000AC83                 db    0
.eh_frame:000000000000AC84                 db 0CCh
.eh_frame:000000000000AC85                 db 0B1h
.eh_frame:000000000000AC86                 db 0FFh
.eh_frame:000000000000AC87                 db 0FFh
.eh_frame:000000000000AC88                 db 0A4h
.eh_frame:000000000000AC89                 db    0
.eh_frame:000000000000AC8A                 db    0
.eh_frame:000000000000AC8B                 db    0
.eh_frame:000000000000AC8C                 db    0
.eh_frame:000000000000AC8D                 db  44h ; D
.eh_frame:000000000000AC8E                 db  0Eh
.eh_frame:000000000000AC8F                 db  20h
.eh_frame:000000000000AC90                 db    2
.eh_frame:000000000000AC91                 db  7Eh ; ~
.eh_frame:000000000000AC92                 db  0Ah
.eh_frame:000000000000AC93                 db  0Eh
.eh_frame:000000000000AC94                 db    8
.eh_frame:000000000000AC95                 db  46h ; F
.eh_frame:000000000000AC96                 db  0Bh
.eh_frame:000000000000AC97                 db    0
.eh_frame:000000000000AC98                 db  3Ch ; <
.eh_frame:000000000000AC99                 db    0
.eh_frame:000000000000AC9A                 db    0
.eh_frame:000000000000AC9B                 db    0
.eh_frame:000000000000AC9C                 db  3Ch ; <
.eh_frame:000000000000AC9D                 db  0Bh
.eh_frame:000000000000AC9E                 db    0
.eh_frame:000000000000AC9F                 db    0
.eh_frame:000000000000ACA0                 db  60h ; `
.eh_frame:000000000000ACA1                 db 0B2h
.eh_frame:000000000000ACA2                 db 0FFh
.eh_frame:000000000000ACA3                 db 0FFh
.eh_frame:000000000000ACA4                 db  83h
.eh_frame:000000000000ACA5                 db    0
.eh_frame:000000000000ACA6                 db    0
.eh_frame:000000000000ACA7                 db    0
.eh_frame:000000000000ACA8                 db    0
.eh_frame:000000000000ACA9                 db  42h ; B
.eh_frame:000000000000ACAA                 db  0Eh
.eh_frame:000000000000ACAB                 db  10h
.eh_frame:000000000000ACAC                 db  8Dh
.eh_frame:000000000000ACAD                 db    2
.eh_frame:000000000000ACAE                 db  42h ; B
.eh_frame:000000000000ACAF                 db  0Eh
.eh_frame:000000000000ACB0                 db  18h
.eh_frame:000000000000ACB1                 db  8Ch
.eh_frame:000000000000ACB2                 db    3
.eh_frame:000000000000ACB3                 db  44h ; D
.eh_frame:000000000000ACB4                 db  0Eh
.eh_frame:000000000000ACB5                 db  20h
.eh_frame:000000000000ACB6                 db  86h
.eh_frame:000000000000ACB7                 db    4
.eh_frame:000000000000ACB8                 db  41h ; A
.eh_frame:000000000000ACB9                 db  0Eh
.eh_frame:000000000000ACBA                 db  28h ; (
.eh_frame:000000000000ACBB                 db  83h
.eh_frame:000000000000ACBC                 db    5
.eh_frame:000000000000ACBD                 db  4Ah ; J
.eh_frame:000000000000ACBE                 db  0Eh
.eh_frame:000000000000ACBF                 db  40h ; @
.eh_frame:000000000000ACC0                 db    2
.eh_frame:000000000000ACC1                 db  64h ; d
.eh_frame:000000000000ACC2                 db  0Ah
.eh_frame:000000000000ACC3                 db  0Eh
.eh_frame:000000000000ACC4                 db  28h ; (
.eh_frame:000000000000ACC5                 db  41h ; A
.eh_frame:000000000000ACC6                 db  0Eh
.eh_frame:000000000000ACC7                 db  20h
.eh_frame:000000000000ACC8                 db  41h ; A
.eh_frame:000000000000ACC9                 db  0Eh
.eh_frame:000000000000ACCA                 db  18h
.eh_frame:000000000000ACCB                 db  42h ; B
.eh_frame:000000000000ACCC                 db  0Eh
.eh_frame:000000000000ACCD                 db  10h
.eh_frame:000000000000ACCE                 db  42h ; B
.eh_frame:000000000000ACCF                 db  0Eh
.eh_frame:000000000000ACD0                 db    8
.eh_frame:000000000000ACD1                 db  41h ; A
.eh_frame:000000000000ACD2                 db  0Bh
.eh_frame:000000000000ACD3                 db    0
.eh_frame:000000000000ACD4                 db    0
.eh_frame:000000000000ACD5                 db    0
.eh_frame:000000000000ACD6                 db    0
.eh_frame:000000000000ACD7                 db    0
.eh_frame:000000000000ACD8                 db  24h ; $
.eh_frame:000000000000ACD9                 db    0
.eh_frame:000000000000ACDA                 db    0
.eh_frame:000000000000ACDB                 db    0
.eh_frame:000000000000ACDC                 db  7Ch ; |
.eh_frame:000000000000ACDD                 db  0Bh
.eh_frame:000000000000ACDE                 db    0
.eh_frame:000000000000ACDF                 db    0
.eh_frame:000000000000ACE0                 db 0B0h
.eh_frame:000000000000ACE1                 db 0B2h
.eh_frame:000000000000ACE2                 db 0FFh
.eh_frame:000000000000ACE3                 db 0FFh
.eh_frame:000000000000ACE4                 db  7Eh ; ~
.eh_frame:000000000000ACE5                 db    0
.eh_frame:000000000000ACE6                 db    0
.eh_frame:000000000000ACE7                 db    0
.eh_frame:000000000000ACE8                 db    0
.eh_frame:000000000000ACE9                 db  41h ; A
.eh_frame:000000000000ACEA                 db  0Eh
.eh_frame:000000000000ACEB                 db  10h
.eh_frame:000000000000ACEC                 db  83h
.eh_frame:000000000000ACED                 db    2
.eh_frame:000000000000ACEE                 db  4Ch ; L
.eh_frame:000000000000ACEF                 db  0Eh
.eh_frame:000000000000ACF0                 db  20h
.eh_frame:000000000000ACF1                 db    2
.eh_frame:000000000000ACF2                 db  49h ; I
.eh_frame:000000000000ACF3                 db  0Ah
.eh_frame:000000000000ACF4                 db  0Eh
.eh_frame:000000000000ACF5                 db  10h
.eh_frame:000000000000ACF6                 db  41h ; A
.eh_frame:000000000000ACF7                 db  0Eh
.eh_frame:000000000000ACF8                 db    8
.eh_frame:000000000000ACF9                 db  41h ; A
.eh_frame:000000000000ACFA                 db  0Bh
.eh_frame:000000000000ACFB                 db    0
.eh_frame:000000000000ACFC                 db    0
.eh_frame:000000000000ACFD                 db    0
.eh_frame:000000000000ACFE                 db    0
.eh_frame:000000000000ACFF                 db    0
.eh_frame:000000000000AD00                 db  4Ch ; L
.eh_frame:000000000000AD01                 db    0
.eh_frame:000000000000AD02                 db    0
.eh_frame:000000000000AD03                 db    0
.eh_frame:000000000000AD04                 db 0A4h
.eh_frame:000000000000AD05                 db  0Bh
.eh_frame:000000000000AD06                 db    0
.eh_frame:000000000000AD07                 db    0
.eh_frame:000000000000AD08                 db    8
.eh_frame:000000000000AD09                 db 0B3h
.eh_frame:000000000000AD0A                 db 0FFh
.eh_frame:000000000000AD0B                 db 0FFh
.eh_frame:000000000000AD0C                 db  7Dh ; }
.eh_frame:000000000000AD0D                 db    0
.eh_frame:000000000000AD0E                 db    0
.eh_frame:000000000000AD0F                 db    0
.eh_frame:000000000000AD10                 db    0
.eh_frame:000000000000AD11                 db  42h ; B
.eh_frame:000000000000AD12                 db  0Eh
.eh_frame:000000000000AD13                 db  10h
.eh_frame:000000000000AD14                 db  8Ch
.eh_frame:000000000000AD15                 db    2
.eh_frame:000000000000AD16                 db  41h ; A
.eh_frame:000000000000AD17                 db  0Eh
.eh_frame:000000000000AD18                 db  18h
.eh_frame:000000000000AD19                 db  86h
.eh_frame:000000000000AD1A                 db    3
.eh_frame:000000000000AD1B                 db  44h ; D
.eh_frame:000000000000AD1C                 db  0Eh
.eh_frame:000000000000AD1D                 db  20h
.eh_frame:000000000000AD1E                 db  83h
.eh_frame:000000000000AD1F                 db    4
.eh_frame:000000000000AD20                 db  69h ; i
.eh_frame:000000000000AD21                 db  0Ah
.eh_frame:000000000000AD22                 db  0Eh
.eh_frame:000000000000AD23                 db  18h
.eh_frame:000000000000AD24                 db  41h ; A
.eh_frame:000000000000AD25                 db  0Eh
.eh_frame:000000000000AD26                 db  10h
.eh_frame:000000000000AD27                 db  42h ; B
.eh_frame:000000000000AD28                 db  0Eh
.eh_frame:000000000000AD29                 db    8
.eh_frame:000000000000AD2A                 db  45h ; E
.eh_frame:000000000000AD2B                 db  0Bh
.eh_frame:000000000000AD2C                 db  55h ; U
.eh_frame:000000000000AD2D                 db  0Ah
.eh_frame:000000000000AD2E                 db  0Eh
.eh_frame:000000000000AD2F                 db  18h
.eh_frame:000000000000AD30                 db  41h ; A
.eh_frame:000000000000AD31                 db  0Eh
.eh_frame:000000000000AD32                 db  10h
.eh_frame:000000000000AD33                 db  42h ; B
.eh_frame:000000000000AD34                 db  0Eh
.eh_frame:000000000000AD35                 db    8
.eh_frame:000000000000AD36                 db  48h ; H
.eh_frame:000000000000AD37                 db  0Bh
.eh_frame:000000000000AD38                 db  41h ; A
.eh_frame:000000000000AD39                 db  0Ah
.eh_frame:000000000000AD3A                 db  0Eh
.eh_frame:000000000000AD3B                 db  18h
.eh_frame:000000000000AD3C                 db  46h ; F
.eh_frame:000000000000AD3D                 db  0Eh
.eh_frame:000000000000AD3E                 db  10h
.eh_frame:000000000000AD3F                 db  42h ; B
.eh_frame:000000000000AD40                 db  0Eh
.eh_frame:000000000000AD41                 db    8
.eh_frame:000000000000AD42                 db  47h ; G
.eh_frame:000000000000AD43                 db  0Bh
.eh_frame:000000000000AD44                 db  49h ; I
.eh_frame:000000000000AD45                 db  0Eh
.eh_frame:000000000000AD46                 db  18h
.eh_frame:000000000000AD47                 db  41h ; A
.eh_frame:000000000000AD48                 db  0Eh
.eh_frame:000000000000AD49                 db  10h
.eh_frame:000000000000AD4A                 db  42h ; B
.eh_frame:000000000000AD4B                 db  0Eh
.eh_frame:000000000000AD4C                 db    8
.eh_frame:000000000000AD4D                 db    0
.eh_frame:000000000000AD4E                 db    0
.eh_frame:000000000000AD4F                 db    0
.eh_frame:000000000000AD50                 db  1Ch
.eh_frame:000000000000AD51                 db    0
.eh_frame:000000000000AD52                 db    0
.eh_frame:000000000000AD53                 db    0
.eh_frame:000000000000AD54                 db 0F4h
.eh_frame:000000000000AD55                 db  0Bh
.eh_frame:000000000000AD56                 db    0
.eh_frame:000000000000AD57                 db    0
.eh_frame:000000000000AD58                 db  38h ; 8
.eh_frame:000000000000AD59                 db 0B3h
.eh_frame:000000000000AD5A                 db 0FFh
.eh_frame:000000000000AD5B                 db 0FFh
.eh_frame:000000000000AD5C                 db  60h ; `
.eh_frame:000000000000AD5D                 db    0
.eh_frame:000000000000AD5E                 db    0
.eh_frame:000000000000AD5F                 db    0
.eh_frame:000000000000AD60                 db    0
.eh_frame:000000000000AD61                 db  44h ; D
.eh_frame:000000000000AD62                 db  0Eh
.eh_frame:000000000000AD63                 db  10h
.eh_frame:000000000000AD64                 db  75h ; u
.eh_frame:000000000000AD65                 db  0Ah
.eh_frame:000000000000AD66                 db  0Eh
.eh_frame:000000000000AD67                 db    8
.eh_frame:000000000000AD68                 db  47h ; G
.eh_frame:000000000000AD69                 db  0Bh
.eh_frame:000000000000AD6A                 db  5Fh ; _
.eh_frame:000000000000AD6B                 db  0Eh
.eh_frame:000000000000AD6C                 db    8
.eh_frame:000000000000AD6D                 db    0
.eh_frame:000000000000AD6E                 db    0
.eh_frame:000000000000AD6F                 db    0
.eh_frame:000000000000AD70                 db  1Ch
.eh_frame:000000000000AD71                 db    0
.eh_frame:000000000000AD72                 db    0
.eh_frame:000000000000AD73                 db    0
.eh_frame:000000000000AD74                 db  14h
.eh_frame:000000000000AD75                 db  0Ch
.eh_frame:000000000000AD76                 db    0
.eh_frame:000000000000AD77                 db    0
.eh_frame:000000000000AD78                 db  78h ; x
.eh_frame:000000000000AD79                 db 0B3h
.eh_frame:000000000000AD7A                 db 0FFh
.eh_frame:000000000000AD7B                 db 0FFh
.eh_frame:000000000000AD7C                 db  3Ch ; <
.eh_frame:000000000000AD7D                 db    0
.eh_frame:000000000000AD7E                 db    0
.eh_frame:000000000000AD7F                 db    0
.eh_frame:000000000000AD80                 db    0
.eh_frame:000000000000AD81                 db  44h ; D
.eh_frame:000000000000AD82                 db  0Eh
.eh_frame:000000000000AD83                 db  10h
.eh_frame:000000000000AD84                 db  61h ; a
.eh_frame:000000000000AD85                 db  0Ah
.eh_frame:000000000000AD86                 db  0Eh
.eh_frame:000000000000AD87                 db    8
.eh_frame:000000000000AD88                 db  4Bh ; K
.eh_frame:000000000000AD89                 db  0Bh
.eh_frame:000000000000AD8A                 db  4Bh ; K
.eh_frame:000000000000AD8B                 db  0Eh
.eh_frame:000000000000AD8C                 db    8
.eh_frame:000000000000AD8D                 db    0
.eh_frame:000000000000AD8E                 db    0
.eh_frame:000000000000AD8F                 db    0
.eh_frame:000000000000AD90                 db  34h ; 4
.eh_frame:000000000000AD91                 db    0
.eh_frame:000000000000AD92                 db    0
.eh_frame:000000000000AD93                 db    0
.eh_frame:000000000000AD94                 db  34h ; 4
.eh_frame:000000000000AD95                 db  0Ch
.eh_frame:000000000000AD96                 db    0
.eh_frame:000000000000AD97                 db    0
.eh_frame:000000000000AD98                 db  98h
.eh_frame:000000000000AD99                 db 0B3h
.eh_frame:000000000000AD9A                 db 0FFh
.eh_frame:000000000000AD9B                 db 0FFh
.eh_frame:000000000000AD9C                 db  7Bh ; {
.eh_frame:000000000000AD9D                 db    0
.eh_frame:000000000000AD9E                 db    0
.eh_frame:000000000000AD9F                 db    0
.eh_frame:000000000000ADA0                 db    0
.eh_frame:000000000000ADA1                 db  42h ; B
.eh_frame:000000000000ADA2                 db  0Eh
.eh_frame:000000000000ADA3                 db  10h
.eh_frame:000000000000ADA4                 db  8Ch
.eh_frame:000000000000ADA5                 db    2
.eh_frame:000000000000ADA6                 db  41h ; A
.eh_frame:000000000000ADA7                 db  0Eh
.eh_frame:000000000000ADA8                 db  18h
.eh_frame:000000000000ADA9                 db  86h
.eh_frame:000000000000ADAA                 db    3
.eh_frame:000000000000ADAB                 db  41h ; A
.eh_frame:000000000000ADAC                 db  0Eh
.eh_frame:000000000000ADAD                 db  20h
.eh_frame:000000000000ADAE                 db  83h
.eh_frame:000000000000ADAF                 db    4
.eh_frame:000000000000ADB0                 db  7Dh ; }
.eh_frame:000000000000ADB1                 db  0Ah
.eh_frame:000000000000ADB2                 db  0Eh
.eh_frame:000000000000ADB3                 db  18h
.eh_frame:000000000000ADB4                 db  41h ; A
.eh_frame:000000000000ADB5                 db  0Eh
.eh_frame:000000000000ADB6                 db  10h
.eh_frame:000000000000ADB7                 db  42h ; B
.eh_frame:000000000000ADB8                 db  0Eh
.eh_frame:000000000000ADB9                 db    8
.eh_frame:000000000000ADBA                 db  44h ; D
.eh_frame:000000000000ADBB                 db  0Bh
.eh_frame:000000000000ADBC                 db  60h ; `
.eh_frame:000000000000ADBD                 db  0Ah
.eh_frame:000000000000ADBE                 db  0Eh
.eh_frame:000000000000ADBF                 db  18h
.eh_frame:000000000000ADC0                 db  41h ; A
.eh_frame:000000000000ADC1                 db  0Eh
.eh_frame:000000000000ADC2                 db  10h
.eh_frame:000000000000ADC3                 db  42h ; B
.eh_frame:000000000000ADC4                 db  0Eh
.eh_frame:000000000000ADC5                 db    8
.eh_frame:000000000000ADC6                 db  45h ; E
.eh_frame:000000000000ADC7                 db  0Bh
.eh_frame:000000000000ADC8                 db  1Ch
.eh_frame:000000000000ADC9                 db    0
.eh_frame:000000000000ADCA                 db    0
.eh_frame:000000000000ADCB                 db    0
.eh_frame:000000000000ADCC                 db  6Ch ; l
.eh_frame:000000000000ADCD                 db  0Ch
.eh_frame:000000000000ADCE                 db    0
.eh_frame:000000000000ADCF                 db    0
.eh_frame:000000000000ADD0                 db 0E0h
.eh_frame:000000000000ADD1                 db 0B3h
.eh_frame:000000000000ADD2                 db 0FFh
.eh_frame:000000000000ADD3                 db 0FFh
.eh_frame:000000000000ADD4                 db  40h ; @
.eh_frame:000000000000ADD5                 db    0
.eh_frame:000000000000ADD6                 db    0
.eh_frame:000000000000ADD7                 db    0
.eh_frame:000000000000ADD8                 db    0
.eh_frame:000000000000ADD9                 db  44h ; D
.eh_frame:000000000000ADDA                 db  0Eh
.eh_frame:000000000000ADDB                 db  10h
.eh_frame:000000000000ADDC                 db  83h
.eh_frame:000000000000ADDD                 db    2
.eh_frame:000000000000ADDE                 db  5Ah ; Z
.eh_frame:000000000000ADDF                 db  0Ah
.eh_frame:000000000000ADE0                 db  0Eh
.eh_frame:000000000000ADE1                 db    8
.eh_frame:000000000000ADE2                 db  4Ah ; J
.eh_frame:000000000000ADE3                 db  0Bh
.eh_frame:000000000000ADE4                 db  53h ; S
.eh_frame:000000000000ADE5                 db  0Eh
.eh_frame:000000000000ADE6                 db    8
.eh_frame:000000000000ADE7                 db    0
.eh_frame:000000000000ADE8                 db  2Ch ; ,
.eh_frame:000000000000ADE9                 db    0
.eh_frame:000000000000ADEA                 db    0
.eh_frame:000000000000ADEB                 db    0
.eh_frame:000000000000ADEC                 db  8Ch
.eh_frame:000000000000ADED                 db  0Ch
.eh_frame:000000000000ADEE                 db    0
.eh_frame:000000000000ADEF                 db    0
.eh_frame:000000000000ADF0                 db    0
.eh_frame:000000000000ADF1                 db 0B4h
.eh_frame:000000000000ADF2                 db 0FFh
.eh_frame:000000000000ADF3                 db 0FFh
.eh_frame:000000000000ADF4                 db  57h ; W
.eh_frame:000000000000ADF5                 db    0
.eh_frame:000000000000ADF6                 db    0
.eh_frame:000000000000ADF7                 db    0
.eh_frame:000000000000ADF8                 db    0
.eh_frame:000000000000ADF9                 db  63h ; c
.eh_frame:000000000000ADFA                 db  0Eh
.eh_frame:000000000000ADFB                 db  10h
.eh_frame:000000000000ADFC                 db  8Ch
.eh_frame:000000000000ADFD                 db    2
.eh_frame:000000000000ADFE                 db  41h ; A
.eh_frame:000000000000ADFF                 db  0Eh
.eh_frame:000000000000AE00                 db  18h
.eh_frame:000000000000AE01                 db  86h
.eh_frame:000000000000AE02                 db    3
.eh_frame:000000000000AE03                 db  44h ; D
.eh_frame:000000000000AE04                 db  0Eh
.eh_frame:000000000000AE05                 db  20h
.eh_frame:000000000000AE06                 db  83h
.eh_frame:000000000000AE07                 db    4
.eh_frame:000000000000AE08                 db  6Bh ; k
.eh_frame:000000000000AE09                 db  0Eh
.eh_frame:000000000000AE0A                 db  18h
.eh_frame:000000000000AE0B                 db  41h ; A
.eh_frame:000000000000AE0C                 db  0Eh
.eh_frame:000000000000AE0D                 db  10h
.eh_frame:000000000000AE0E                 db  42h ; B
.eh_frame:000000000000AE0F                 db  0Eh
.eh_frame:000000000000AE10                 db    8
.eh_frame:000000000000AE11                 db    0
.eh_frame:000000000000AE12                 db    0
.eh_frame:000000000000AE13                 db    0
.eh_frame:000000000000AE14                 db    0
.eh_frame:000000000000AE15                 db    0
.eh_frame:000000000000AE16                 db    0
.eh_frame:000000000000AE17                 db    0
.eh_frame:000000000000AE18                 db  2Ch ; ,
.eh_frame:000000000000AE19                 db    0
.eh_frame:000000000000AE1A                 db    0
.eh_frame:000000000000AE1B                 db    0
.eh_frame:000000000000AE1C                 db 0BCh
.eh_frame:000000000000AE1D                 db  0Ch
.eh_frame:000000000000AE1E                 db    0
.eh_frame:000000000000AE1F                 db    0
.eh_frame:000000000000AE20                 db  30h ; 0
.eh_frame:000000000000AE21                 db 0B4h
.eh_frame:000000000000AE22                 db 0FFh
.eh_frame:000000000000AE23                 db 0FFh
.eh_frame:000000000000AE24                 db  1Fh
.eh_frame:000000000000AE25                 db  11h
.eh_frame:000000000000AE26                 db    0
.eh_frame:000000000000AE27                 db    0
.eh_frame:000000000000AE28                 db    0
.eh_frame:000000000000AE29                 db  41h ; A
.eh_frame:000000000000AE2A                 db  0Eh
.eh_frame:000000000000AE2B                 db  10h
.eh_frame:000000000000AE2C                 db  86h
.eh_frame:000000000000AE2D                 db    2
.eh_frame:000000000000AE2E                 db  43h ; C
.eh_frame:000000000000AE2F                 db  0Dh
.eh_frame:000000000000AE30                 db    6
.eh_frame:000000000000AE31                 db  48h ; H
.eh_frame:000000000000AE32                 db  8Fh
.eh_frame:000000000000AE33                 db    3
.eh_frame:000000000000AE34                 db  8Eh
.eh_frame:000000000000AE35                 db    4
.eh_frame:000000000000AE36                 db  8Dh
.eh_frame:000000000000AE37                 db    5
.eh_frame:000000000000AE38                 db  8Ch
.eh_frame:000000000000AE39                 db    6
.eh_frame:000000000000AE3A                 db  48h ; H
.eh_frame:000000000000AE3B                 db  83h
.eh_frame:000000000000AE3C                 db    7
.eh_frame:000000000000AE3D                 db    3
.eh_frame:000000000000AE3E                 db 0EFh
.eh_frame:000000000000AE3F                 db    1
.eh_frame:000000000000AE40                 db  0Ah
.eh_frame:000000000000AE41                 db  0Ch
.eh_frame:000000000000AE42                 db    7
.eh_frame:000000000000AE43                 db    8
.eh_frame:000000000000AE44                 db  45h ; E
.eh_frame:000000000000AE45                 db  0Bh
.eh_frame:000000000000AE46                 db    0
.eh_frame:000000000000AE47                 db    0
.eh_frame:000000000000AE48                 db  14h
.eh_frame:000000000000AE49                 db    0
.eh_frame:000000000000AE4A                 db    0
.eh_frame:000000000000AE4B                 db    0
.eh_frame:000000000000AE4C                 db 0ECh
.eh_frame:000000000000AE4D                 db  0Ch
.eh_frame:000000000000AE4E                 db    0
.eh_frame:000000000000AE4F                 db    0
.eh_frame:000000000000AE50                 db  20h
.eh_frame:000000000000AE51                 db 0C5h
.eh_frame:000000000000AE52                 db 0FFh
.eh_frame:000000000000AE53                 db 0FFh
.eh_frame:000000000000AE54                 db 0FEh
.eh_frame:000000000000AE55                 db    1
.eh_frame:000000000000AE56                 db    0
.eh_frame:000000000000AE57                 db    0
.eh_frame:000000000000AE58                 db    0
.eh_frame:000000000000AE59                 db    0
.eh_frame:000000000000AE5A                 db    0
.eh_frame:000000000000AE5B                 db    0
.eh_frame:000000000000AE5C                 db    0
.eh_frame:000000000000AE5D                 db    0
.eh_frame:000000000000AE5E                 db    0
.eh_frame:000000000000AE5F                 db    0
.eh_frame:000000000000AE60                 db  4Ch ; L
.eh_frame:000000000000AE61                 db    0
.eh_frame:000000000000AE62                 db    0
.eh_frame:000000000000AE63                 db    0
.eh_frame:000000000000AE64                 db    4
.eh_frame:000000000000AE65                 db  0Dh
.eh_frame:000000000000AE66                 db    0
.eh_frame:000000000000AE67                 db    0
.eh_frame:000000000000AE68                 db    8
.eh_frame:000000000000AE69                 db 0C7h
.eh_frame:000000000000AE6A                 db 0FFh
.eh_frame:000000000000AE6B                 db 0FFh
.eh_frame:000000000000AE6C                 db 0ECh
.eh_frame:000000000000AE6D                 db  0Ch
.eh_frame:000000000000AE6E                 db    0
.eh_frame:000000000000AE6F                 db    0
.eh_frame:000000000000AE70                 db    0
.eh_frame:000000000000AE71                 db  42h ; B
.eh_frame:000000000000AE72                 db  0Eh
.eh_frame:000000000000AE73                 db  10h
.eh_frame:000000000000AE74                 db  8Fh
.eh_frame:000000000000AE75                 db    2
.eh_frame:000000000000AE76                 db  42h ; B
.eh_frame:000000000000AE77                 db  0Eh
.eh_frame:000000000000AE78                 db  18h
.eh_frame:000000000000AE79                 db  8Eh
.eh_frame:000000000000AE7A                 db    3
.eh_frame:000000000000AE7B                 db  46h ; F
.eh_frame:000000000000AE7C                 db  0Eh
.eh_frame:000000000000AE7D                 db  20h
.eh_frame:000000000000AE7E                 db  8Dh
.eh_frame:000000000000AE7F                 db    4
.eh_frame:000000000000AE80                 db  42h ; B
.eh_frame:000000000000AE81                 db  0Eh
.eh_frame:000000000000AE82                 db  28h ; (
.eh_frame:000000000000AE83                 db  8Ch
.eh_frame:000000000000AE84                 db    5
.eh_frame:000000000000AE85                 db  45h ; E
.eh_frame:000000000000AE86                 db  0Eh
.eh_frame:000000000000AE87                 db  30h ; 0
.eh_frame:000000000000AE88                 db  86h
.eh_frame:000000000000AE89                 db    6
.eh_frame:000000000000AE8A                 db  41h ; A
.eh_frame:000000000000AE8B                 db  0Eh
.eh_frame:000000000000AE8C                 db  38h ; 8
.eh_frame:000000000000AE8D                 db  83h
.eh_frame:000000000000AE8E                 db    7
.eh_frame:000000000000AE8F                 db  52h ; R
.eh_frame:000000000000AE90                 db  0Eh
.eh_frame:000000000000AE91                 db  90h
.eh_frame:000000000000AE92                 db    1
.eh_frame:000000000000AE93                 db    2
.eh_frame:000000000000AE94                 db  82h
.eh_frame:000000000000AE95                 db  0Ah
.eh_frame:000000000000AE96                 db  0Eh
.eh_frame:000000000000AE97                 db  38h ; 8
.eh_frame:000000000000AE98                 db  41h ; A
.eh_frame:000000000000AE99                 db  0Eh
.eh_frame:000000000000AE9A                 db  30h ; 0
.eh_frame:000000000000AE9B                 db  41h ; A
.eh_frame:000000000000AE9C                 db  0Eh
.eh_frame:000000000000AE9D                 db  28h ; (
.eh_frame:000000000000AE9E                 db  42h ; B
.eh_frame:000000000000AE9F                 db  0Eh
.eh_frame:000000000000AEA0                 db  20h
.eh_frame:000000000000AEA1                 db  42h ; B
.eh_frame:000000000000AEA2                 db  0Eh
.eh_frame:000000000000AEA3                 db  18h
.eh_frame:000000000000AEA4                 db  42h ; B
.eh_frame:000000000000AEA5                 db  0Eh
.eh_frame:000000000000AEA6                 db  10h
.eh_frame:000000000000AEA7                 db  42h ; B
.eh_frame:000000000000AEA8                 db  0Eh
.eh_frame:000000000000AEA9                 db    8
.eh_frame:000000000000AEAA                 db  48h ; H
.eh_frame:000000000000AEAB                 db  0Bh
.eh_frame:000000000000AEAC                 db    0
.eh_frame:000000000000AEAD                 db    0
.eh_frame:000000000000AEAE                 db    0
.eh_frame:000000000000AEAF                 db    0
.eh_frame:000000000000AEB0                 db  44h ; D
.eh_frame:000000000000AEB1                 db    0
.eh_frame:000000000000AEB2                 db    0
.eh_frame:000000000000AEB3                 db    0
.eh_frame:000000000000AEB4                 db  54h ; T
.eh_frame:000000000000AEB5                 db  0Dh
.eh_frame:000000000000AEB6                 db    0
.eh_frame:000000000000AEB7                 db    0
.eh_frame:000000000000AEB8                 db 0A8h
.eh_frame:000000000000AEB9                 db 0D3h
.eh_frame:000000000000AEBA                 db 0FFh
.eh_frame:000000000000AEBB                 db 0FFh
.eh_frame:000000000000AEBC                 db  65h ; e
.eh_frame:000000000000AEBD                 db    0
.eh_frame:000000000000AEBE                 db    0
.eh_frame:000000000000AEBF                 db    0
.eh_frame:000000000000AEC0                 db    0
.eh_frame:000000000000AEC1                 db  42h ; B
.eh_frame:000000000000AEC2                 db  0Eh
.eh_frame:000000000000AEC3                 db  10h
.eh_frame:000000000000AEC4                 db  8Fh
.eh_frame:000000000000AEC5                 db    2
.eh_frame:000000000000AEC6                 db  42h ; B
.eh_frame:000000000000AEC7                 db  0Eh
.eh_frame:000000000000AEC8                 db  18h
.eh_frame:000000000000AEC9                 db  8Eh
.eh_frame:000000000000AECA                 db    3
.eh_frame:000000000000AECB                 db  45h ; E
.eh_frame:000000000000AECC                 db  0Eh
.eh_frame:000000000000AECD                 db  20h
.eh_frame:000000000000AECE                 db  8Dh
.eh_frame:000000000000AECF                 db    4
.eh_frame:000000000000AED0                 db  42h ; B
.eh_frame:000000000000AED1                 db  0Eh
.eh_frame:000000000000AED2                 db  28h ; (
.eh_frame:000000000000AED3                 db  8Ch
.eh_frame:000000000000AED4                 db    5
.eh_frame:000000000000AED5                 db  48h ; H
.eh_frame:000000000000AED6                 db  0Eh
.eh_frame:000000000000AED7                 db  30h ; 0
.eh_frame:000000000000AED8                 db  86h
.eh_frame:000000000000AED9                 db    6
.eh_frame:000000000000AEDA                 db  48h ; H
.eh_frame:000000000000AEDB                 db  0Eh
.eh_frame:000000000000AEDC                 db  38h ; 8
.eh_frame:000000000000AEDD                 db  83h
.eh_frame:000000000000AEDE                 db    7
.eh_frame:000000000000AEDF                 db  4Dh ; M
.eh_frame:000000000000AEE0                 db  0Eh
.eh_frame:000000000000AEE1                 db  40h ; @
.eh_frame:000000000000AEE2                 db  72h ; r
.eh_frame:000000000000AEE3                 db  0Eh
.eh_frame:000000000000AEE4                 db  38h ; 8
.eh_frame:000000000000AEE5                 db  41h ; A
.eh_frame:000000000000AEE6                 db  0Eh
.eh_frame:000000000000AEE7                 db  30h ; 0
.eh_frame:000000000000AEE8                 db  41h ; A
.eh_frame:000000000000AEE9                 db  0Eh
.eh_frame:000000000000AEEA                 db  28h ; (
.eh_frame:000000000000AEEB                 db  42h ; B
.eh_frame:000000000000AEEC                 db  0Eh
.eh_frame:000000000000AEED                 db  20h
.eh_frame:000000000000AEEE                 db  42h ; B
.eh_frame:000000000000AEEF                 db  0Eh
.eh_frame:000000000000AEF0                 db  18h
.eh_frame:000000000000AEF1                 db  42h ; B
.eh_frame:000000000000AEF2                 db  0Eh
.eh_frame:000000000000AEF3                 db  10h
.eh_frame:000000000000AEF4                 db  42h ; B
.eh_frame:000000000000AEF5                 db  0Eh
.eh_frame:000000000000AEF6                 db    8
.eh_frame:000000000000AEF7                 db    0
.eh_frame:000000000000AEF8                 db  14h
.eh_frame:000000000000AEF9                 db    0
.eh_frame:000000000000AEFA                 db    0
.eh_frame:000000000000AEFB                 db    0
.eh_frame:000000000000AEFC                 db  9Ch
.eh_frame:000000000000AEFD                 db  0Dh
.eh_frame:000000000000AEFE                 db    0
.eh_frame:000000000000AEFF                 db    0
.eh_frame:000000000000AF00                 db 0D0h
.eh_frame:000000000000AF01                 db 0D3h
.eh_frame:000000000000AF02                 db 0FFh
.eh_frame:000000000000AF03                 db 0FFh
.eh_frame:000000000000AF04                 db    2
.eh_frame:000000000000AF05                 db    0
.eh_frame:000000000000AF06                 db    0
.eh_frame:000000000000AF07                 db    0
.eh_frame:000000000000AF08                 db    0
.eh_frame:000000000000AF09                 db    0
.eh_frame:000000000000AF0A                 db    0
.eh_frame:000000000000AF0B                 db    0
.eh_frame:000000000000AF0C                 db    0
.eh_frame:000000000000AF0D                 db    0
.eh_frame:000000000000AF0E                 db    0
.eh_frame:000000000000AF0F                 db    0
.eh_frame:000000000000AF10                 db  10h
.eh_frame:000000000000AF11                 db    0
.eh_frame:000000000000AF12                 db    0
.eh_frame:000000000000AF13                 db    0
.eh_frame:000000000000AF14                 db 0B4h
.eh_frame:000000000000AF15                 db  0Dh
.eh_frame:000000000000AF16                 db    0
.eh_frame:000000000000AF17                 db    0
.eh_frame:000000000000AF18                 db 0C8h
.eh_frame:000000000000AF19                 db 0D3h
.eh_frame:000000000000AF1A                 db 0FFh
.eh_frame:000000000000AF1B                 db 0FFh
.eh_frame:000000000000AF1C                 db  0Eh
.eh_frame:000000000000AF1D                 db    0
.eh_frame:000000000000AF1E                 db    0
.eh_frame:000000000000AF1F                 db    0
.eh_frame:000000000000AF20                 db    0
.eh_frame:000000000000AF21                 db    0
.eh_frame:000000000000AF22                 db    0
.eh_frame:000000000000AF23                 db    0
.eh_frame:000000000000AF24 __FRAME_END__   db    0
.eh_frame:000000000000AF25                 db    0
.eh_frame:000000000000AF26                 db    0
.eh_frame:000000000000AF27                 db    0
.eh_frame:000000000000AF27 _eh_frame       ends
.eh_frame:000000000000AF27
.init_array:000000000020BBD0 ; ELF Initialization Function Table
.init_array:000000000020BBD0 ; ===========================================================================
.init_array:000000000020BBD0
.init_array:000000000020BBD0 ; Segment type: Pure data
.init_array:000000000020BBD0 ; Segment permissions: Read/Write
.init_array:000000000020BBD0 _init_array     segment qword public 'DATA' use64
.init_array:000000000020BBD0                 assume cs:_init_array
.init_array:000000000020BBD0                 ;org 20BBD0h
.init_array:000000000020BBD0 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:000000000020BBD0                                         ; DATA XREF: LOAD:00000000000000F8↑o
.init_array:000000000020BBD0                                         ; LOAD:0000000000000210↑o ...
.init_array:000000000020BBD0 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:000000000020BBD0
.fini_array:000000000020BBD8 ; ELF Termination Function Table
.fini_array:000000000020BBD8 ; ===========================================================================
.fini_array:000000000020BBD8
.fini_array:000000000020BBD8 ; Segment type: Pure data
.fini_array:000000000020BBD8 ; Segment permissions: Read/Write
.fini_array:000000000020BBD8 _fini_array     segment qword public 'DATA' use64
.fini_array:000000000020BBD8                 assume cs:_fini_array
.fini_array:000000000020BBD8                 ;org 20BBD8h
.fini_array:000000000020BBD8 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:000000000020BBD8                                         ; DATA XREF: __libc_csu_init+13↑o
.fini_array:000000000020BBD8 _fini_array     ends                    ; Alternative name is '__init_array_end'
.fini_array:000000000020BBD8
.data.rel.ro:000000000020BBE0 ; ===========================================================================
.data.rel.ro:000000000020BBE0
.data.rel.ro:000000000020BBE0 ; Segment type: Pure data
.data.rel.ro:000000000020BBE0 ; Segment permissions: Read/Write
.data.rel.ro:000000000020BBE0 _data_rel_ro    segment align_32 public 'DATA' use64
.data.rel.ro:000000000020BBE0                 assume cs:_data_rel_ro
.data.rel.ro:000000000020BBE0                 ;org 20BBE0h
.data.rel.ro:000000000020BBE0                 public quoting_style_args
.data.rel.ro:000000000020BBE0 quoting_style_args dq offset aLiteral   ; "literal"
.data.rel.ro:000000000020BBE8                 dq offset aShell        ; "shell"
.data.rel.ro:000000000020BBF0                 dq offset aShellAlways  ; "shell-always"
.data.rel.ro:000000000020BBF8                 dq offset aShellEscape  ; "shell-escape"
.data.rel.ro:000000000020BC00                 dq offset aShellEscapeAlw ; "shell-escape-always"
.data.rel.ro:000000000020BC08                 dq offset aC_1          ; "c"
.data.rel.ro:000000000020BC10                 dq offset aCMaybe       ; "c-maybe"
.data.rel.ro:000000000020BC18                 dq offset aShellEscape+6 ; "escape"
.data.rel.ro:000000000020BC20                 dq offset dirname+11h   ; "locale"
.data.rel.ro:000000000020BC28                 dq offset aClocale      ; "clocale"
.data.rel.ro:000000000020BC30                 db    0
.data.rel.ro:000000000020BC31                 db    0
.data.rel.ro:000000000020BC32                 db    0
.data.rel.ro:000000000020BC33                 db    0
.data.rel.ro:000000000020BC34                 db    0
.data.rel.ro:000000000020BC35                 db    0
.data.rel.ro:000000000020BC36                 db    0
.data.rel.ro:000000000020BC37                 db    0
.data.rel.ro:000000000020BC37 _data_rel_ro    ends
.data.rel.ro:000000000020BC37
LOAD:000000000020BC38 ; ELF Dynamic Information
LOAD:000000000020BC38 ; ===========================================================================
LOAD:000000000020BC38
LOAD:000000000020BC38 ; Segment type: Pure data
LOAD:000000000020BC38 ; Segment permissions: Read/Write
LOAD:000000000020BC38 LOAD            segment byte public 'DATA' use64
LOAD:000000000020BC38                 assume cs:LOAD
LOAD:000000000020BC38                 ;org 20BC38h
LOAD:000000000020BC38 _DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000000130↑o
LOAD:000000000020BC38                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:000000000020BC38                                         ; DT_NEEDED libc.so.6
LOAD:000000000020BC48                 Elf64_Dyn <0Ch, 12F0h>  ; DT_INIT
LOAD:000000000020BC58                 Elf64_Dyn <0Dh, 82F0h>  ; DT_FINI
LOAD:000000000020BC68                 Elf64_Dyn <19h, 20BBD0h> ; DT_INIT_ARRAY
LOAD:000000000020BC78                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:000000000020BC88                 Elf64_Dyn <1Ah, 20BBD8h> ; DT_FINI_ARRAY
LOAD:000000000020BC98                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:000000000020BCA8                 Elf64_Dyn <6FFFFEF5h, 298h> ; DT_GNU_HASH
LOAD:000000000020BCB8                 Elf64_Dyn <5, 878h>     ; DT_STRTAB
LOAD:000000000020BCC8                 Elf64_Dyn <6, 2D8h>     ; DT_SYMTAB
LOAD:000000000020BCD8                 Elf64_Dyn <0Ah, 2C3h>   ; DT_STRSZ
LOAD:000000000020BCE8                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:000000000020BCF8                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:000000000020BD08                 Elf64_Dyn <3, 20BE28h>  ; DT_PLTGOT
LOAD:000000000020BD18                 Elf64_Dyn <2, 480h>     ; DT_PLTRELSZ
LOAD:000000000020BD28                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:000000000020BD38                 Elf64_Dyn <17h, 0E70h>  ; DT_JMPREL
LOAD:000000000020BD48                 Elf64_Dyn <7, 0C18h>    ; DT_RELA
LOAD:000000000020BD58                 Elf64_Dyn <8, 258h>     ; DT_RELASZ
LOAD:000000000020BD68                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:000000000020BD78                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:000000000020BD88                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:000000000020BD98                 Elf64_Dyn <6FFFFFFEh, 0BB8h> ; DT_VERNEED
LOAD:000000000020BDA8                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:000000000020BDB8                 Elf64_Dyn <6FFFFFF0h, 0B3Ch> ; DT_VERSYM
LOAD:000000000020BDC8                 Elf64_Dyn <6FFFFFF9h, 10h> ; DT_RELACOUNT
LOAD:000000000020BDD8                 Elf64_Dyn <0>           ; DT_NULL
LOAD:000000000020BDE8                 db    0
LOAD:000000000020BDE9                 db    0
LOAD:000000000020BDEA                 db    0
LOAD:000000000020BDEB                 db    0
LOAD:000000000020BDEC                 db    0
LOAD:000000000020BDED                 db    0
LOAD:000000000020BDEE                 db    0
LOAD:000000000020BDEF                 db    0
LOAD:000000000020BDF0                 db    0
LOAD:000000000020BDF1                 db    0
LOAD:000000000020BDF2                 db    0
LOAD:000000000020BDF3                 db    0
LOAD:000000000020BDF4                 db    0
LOAD:000000000020BDF5                 db    0
LOAD:000000000020BDF6                 db    0
LOAD:000000000020BDF7                 db    0
LOAD:000000000020BDF8                 db    0
LOAD:000000000020BDF9                 db    0
LOAD:000000000020BDFA                 db    0
LOAD:000000000020BDFB                 db    0
LOAD:000000000020BDFC                 db    0
LOAD:000000000020BDFD                 db    0
LOAD:000000000020BDFE                 db    0
LOAD:000000000020BDFF                 db    0
LOAD:000000000020BE00                 db    0
LOAD:000000000020BE01                 db    0
LOAD:000000000020BE02                 db    0
LOAD:000000000020BE03                 db    0
LOAD:000000000020BE04                 db    0
LOAD:000000000020BE05                 db    0
LOAD:000000000020BE06                 db    0
LOAD:000000000020BE07                 db    0
LOAD:000000000020BE08                 db    0
LOAD:000000000020BE09                 db    0
LOAD:000000000020BE0A                 db    0
LOAD:000000000020BE0B                 db    0
LOAD:000000000020BE0C                 db    0
LOAD:000000000020BE0D                 db    0
LOAD:000000000020BE0E                 db    0
LOAD:000000000020BE0F                 db    0
LOAD:000000000020BE10                 db    0
LOAD:000000000020BE11                 db    0
LOAD:000000000020BE12                 db    0
LOAD:000000000020BE13                 db    0
LOAD:000000000020BE14                 db    0
LOAD:000000000020BE15                 db    0
LOAD:000000000020BE16                 db    0
LOAD:000000000020BE17                 db    0
LOAD:000000000020BE18                 db    0
LOAD:000000000020BE19                 db    0
LOAD:000000000020BE1A                 db    0
LOAD:000000000020BE1B                 db    0
LOAD:000000000020BE1C                 db    0
LOAD:000000000020BE1D                 db    0
LOAD:000000000020BE1E                 db    0
LOAD:000000000020BE1F                 db    0
LOAD:000000000020BE20                 db    0
LOAD:000000000020BE21                 db    0
LOAD:000000000020BE22                 db    0
LOAD:000000000020BE23                 db    0
LOAD:000000000020BE24                 db    0
LOAD:000000000020BE25                 db    0
LOAD:000000000020BE26                 db    0
LOAD:000000000020BE27                 db    0
LOAD:000000000020BE27 LOAD            ends
LOAD:000000000020BE27
.got:000000000020BE28 ; ===========================================================================
.got:000000000020BE28
.got:000000000020BE28 ; Segment type: Pure data
.got:000000000020BE28 ; Segment permissions: Read/Write
.got:000000000020BE28 _got            segment qword public 'DATA' use64
.got:000000000020BE28                 assume cs:_got
.got:000000000020BE28                 ;org 20BE28h
.got:000000000020BE28 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:000000000020BE30 qword_20BE30    dq 0                    ; DATA XREF: sub_1310↑r
.got:000000000020BE38 qword_20BE38    dq 0                    ; DATA XREF: sub_1310+6↑r
.got:000000000020BE40 __snprintf_chk_ptr dq offset __snprintf_chk
.got:000000000020BE40                                         ; DATA XREF: ___snprintf_chk↑r
.got:000000000020BE48 free_ptr        dq offset free          ; DATA XREF: _free↑r
.got:000000000020BE50 abort_ptr       dq offset abort         ; DATA XREF: _abort↑r
.got:000000000020BE58 __errno_location_ptr dq offset __errno_location
.got:000000000020BE58                                         ; DATA XREF: ___errno_location↑r
.got:000000000020BE60 error_at_line_ptr dq offset error_at_line
.got:000000000020BE60                                         ; DATA XREF: _error_at_line↑r
.got:000000000020BE68 strncmp_ptr     dq offset strncmp       ; DATA XREF: _strncmp↑r
.got:000000000020BE70 _exit_ptr       dq offset _exit         ; DATA XREF: __exit↑r
.got:000000000020BE78 __fpending_ptr  dq offset __fpending    ; DATA XREF: ___fpending↑r
.got:000000000020BE80 isatty_ptr      dq offset isatty        ; DATA XREF: _isatty↑r
.got:000000000020BE88 textdomain_ptr  dq offset textdomain    ; DATA XREF: _textdomain↑r
.got:000000000020BE90 fclose_ptr      dq offset fclose        ; DATA XREF: _fclose↑r
.got:000000000020BE98 bindtextdomain_ptr dq offset bindtextdomain
.got:000000000020BE98                                         ; DATA XREF: _bindtextdomain↑r
.got:000000000020BEA0 dcgettext_ptr   dq offset dcgettext     ; DATA XREF: _dcgettext↑r
.got:000000000020BEA8 __ctype_get_mb_cur_max_ptr dq offset __ctype_get_mb_cur_max
.got:000000000020BEA8                                         ; DATA XREF: ___ctype_get_mb_cur_max↑r
.got:000000000020BEB0 strlen_ptr      dq offset strlen        ; DATA XREF: _strlen↑r
.got:000000000020BEB8 __lxstat_ptr    dq offset __lxstat      ; DATA XREF: ___lxstat↑r
.got:000000000020BEC0 __stack_chk_fail_ptr dq offset __stack_chk_fail
.got:000000000020BEC0                                         ; DATA XREF: ___stack_chk_fail↑r
.got:000000000020BEC8 mbrtowc_ptr     dq offset mbrtowc       ; DATA XREF: _mbrtowc↑r
.got:000000000020BED0 strrchr_ptr     dq offset strrchr       ; DATA XREF: _strrchr↑r
.got:000000000020BED8 lseek_ptr       dq offset lseek         ; DATA XREF: _lseek↑r
.got:000000000020BEE0 memset_ptr      dq offset memset        ; DATA XREF: _memset↑r
.got:000000000020BEE8 geteuid_ptr     dq offset geteuid       ; DATA XREF: _geteuid↑r
.got:000000000020BEF0 memcmp_ptr      dq offset memcmp        ; DATA XREF: _memcmp↑r
.got:000000000020BEF8 fputs_unlocked_ptr dq offset fputs_unlocked
.got:000000000020BEF8                                         ; DATA XREF: _fputs_unlocked↑r
.got:000000000020BF00 calloc_ptr      dq offset calloc        ; DATA XREF: _calloc↑r
.got:000000000020BF08 strcmp_ptr      dq offset strcmp        ; DATA XREF: _strcmp↑r
.got:000000000020BF10 strtol_ptr      dq offset strtol        ; DATA XREF: _strtol↑r
.got:000000000020BF18 memcpy_ptr      dq offset memcpy        ; DATA XREF: _memcpy↑r
.got:000000000020BF20 fileno_ptr      dq offset fileno        ; DATA XREF: _fileno↑r
.got:000000000020BF28 __xstat_ptr     dq offset __xstat       ; DATA XREF: ___xstat↑r
.got:000000000020BF30 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc↑r
.got:000000000020BF38 fflush_ptr      dq offset fflush        ; DATA XREF: _fflush↑r
.got:000000000020BF40 nl_langinfo_ptr dq offset nl_langinfo   ; DATA XREF: _nl_langinfo↑r
.got:000000000020BF48 getegid_ptr     dq offset getegid       ; DATA XREF: _getegid↑r
.got:000000000020BF50 __freading_ptr  dq offset __freading    ; DATA XREF: ___freading↑r
.got:000000000020BF58 realloc_ptr     dq offset realloc       ; DATA XREF: _realloc↑r
.got:000000000020BF60 setlocale_ptr   dq offset setlocale     ; DATA XREF: _setlocale↑r
.got:000000000020BF68 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk↑r
.got:000000000020BF70 error_ptr       dq offset error         ; DATA XREF: _error↑r
.got:000000000020BF78 fseeko_ptr      dq offset fseeko        ; DATA XREF: _fseeko↑r
.got:000000000020BF80 euidaccess_ptr  dq offset euidaccess    ; DATA XREF: _euidaccess↑r
.got:000000000020BF88 __cxa_atexit_ptr dq offset __cxa_atexit ; DATA XREF: ___cxa_atexit↑r
.got:000000000020BF90 exit_ptr        dq offset exit          ; DATA XREF: _exit↑r
.got:000000000020BF98 fwrite_ptr      dq offset fwrite        ; DATA XREF: _fwrite↑r
.got:000000000020BFA0 __fprintf_chk_ptr dq offset __fprintf_chk
.got:000000000020BFA0                                         ; DATA XREF: ___fprintf_chk↑r
.got:000000000020BFA8 mbsinit_ptr     dq offset mbsinit       ; DATA XREF: _mbsinit↑r
.got:000000000020BFB0 iswprint_ptr    dq offset iswprint      ; DATA XREF: _iswprint↑r
.got:000000000020BFB8 __ctype_b_loc_ptr dq offset __ctype_b_loc
.got:000000000020BFB8                                         ; DATA XREF: ___ctype_b_loc↑r
.got:000000000020BFC0 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:000000000020BFC0                                         ; DATA XREF: deregister_tm_clones+17↑r
.got:000000000020BFC8 __libc_start_main_ptr dq offset __libc_start_main
.got:000000000020BFC8                                         ; DATA XREF: start+24↑r
.got:000000000020BFD0 __gmon_start___ptr dq offset __gmon_start__
.got:000000000020BFD0                                         ; DATA XREF: _init_proc+4↑r
.got:000000000020BFD8 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:000000000020BFD8                                         ; DATA XREF: register_tm_clones+28↑r
.got:000000000020BFE0 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:000000000020BFE0                                         ; DATA XREF: __cxa_finalize↑r
.got:000000000020BFE0                                         ; __do_global_dtors_aux+9↑r
.got:000000000020BFE0 _got            ends
.got:000000000020BFE0
LOAD:000000000020BFE8 ; ===========================================================================
LOAD:000000000020BFE8
LOAD:000000000020BFE8 ; Segment type: Pure data
LOAD:000000000020BFE8 ; Segment permissions: Read/Write
LOAD:000000000020BFE8 LOAD            segment byte public 'DATA' use64
LOAD:000000000020BFE8                 assume cs:LOAD
LOAD:000000000020BFE8                 ;org 20BFE8h
LOAD:000000000020BFE8                 align 20h
LOAD:000000000020BFE8 LOAD            ends
LOAD:000000000020BFE8
.data:000000000020C000 ; ===========================================================================
.data:000000000020C000
.data:000000000020C000 ; Segment type: Pure data
.data:000000000020C000 ; Segment permissions: Read/Write
.data:000000000020C000 _data           segment align_32 public 'DATA' use64
.data:000000000020C000                 assume cs:_data
.data:000000000020C000                 ;org 20C000h
.data:000000000020C000                 public __data_start ; weak
.data:000000000020C000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:000000000020C000                                         ; data_start
.data:000000000020C001                 db    0
.data:000000000020C002                 db    0
.data:000000000020C003                 db    0
.data:000000000020C004                 db    0
.data:000000000020C005                 db    0
.data:000000000020C006                 db    0
.data:000000000020C007                 db    0
.data:000000000020C008                 public __dso_handle
.data:000000000020C008 ; void *_dso_handle
.data:000000000020C008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+17↑r
.data:000000000020C008                                         ; atexit↑r ...
.data:000000000020C010                 public Version
.data:000000000020C010 Version         dq offset a831          ; DATA XREF: main+129↑r
.data:000000000020C010                                         ; "8.31"
.data:000000000020C018                 public exit_failure
.data:000000000020C018 ; int exit_failure
.data:000000000020C018 exit_failure    dd 1                    ; DATA XREF: main+4A↑w
.data:000000000020C018                                         ; close_stdout:loc_3322↑r ...
.data:000000000020C01C                 align 20h
.data:000000000020C020                 public quote_quoting_options
.data:000000000020C020 quote_quoting_options db    8           ; DATA XREF: quote_n_mem↑o
.data:000000000020C020                                         ; quote_mem↑o ...
.data:000000000020C021                 db    0
.data:000000000020C022                 db    0
.data:000000000020C023                 db    0
.data:000000000020C024                 db    0
.data:000000000020C025                 db    0
.data:000000000020C026                 db    0
.data:000000000020C027                 db    0
.data:000000000020C028                 db    0
.data:000000000020C029                 db    0
.data:000000000020C02A                 db    0
.data:000000000020C02B                 db    0
.data:000000000020C02C                 db    0
.data:000000000020C02D                 db    0
.data:000000000020C02E                 db    0
.data:000000000020C02F                 db    0
.data:000000000020C030                 db    0
.data:000000000020C031                 db    0
.data:000000000020C032                 db    0
.data:000000000020C033                 db    0
.data:000000000020C034                 db    0
.data:000000000020C035                 db    0
.data:000000000020C036                 db    0
.data:000000000020C037                 db    0
.data:000000000020C038                 db    0
.data:000000000020C039                 db    0
.data:000000000020C03A                 db    0
.data:000000000020C03B                 db    0
.data:000000000020C03C                 db    0
.data:000000000020C03D                 db    0
.data:000000000020C03E                 db    0
.data:000000000020C03F                 db    0
.data:000000000020C040                 db    0
.data:000000000020C041                 db    0
.data:000000000020C042                 db    0
.data:000000000020C043                 db    0
.data:000000000020C044                 db    0
.data:000000000020C045                 db    0
.data:000000000020C046                 db    0
.data:000000000020C047                 db    0
.data:000000000020C048                 db    0
.data:000000000020C049                 db    0
.data:000000000020C04A                 db    0
.data:000000000020C04B                 db    0
.data:000000000020C04C                 db    0
.data:000000000020C04D                 db    0
.data:000000000020C04E                 db    0
.data:000000000020C04F                 db    0
.data:000000000020C050                 db    0
.data:000000000020C051                 db    0
.data:000000000020C052                 db    0
.data:000000000020C053                 db    0
.data:000000000020C054                 db    0
.data:000000000020C055                 db    0
.data:000000000020C056                 db    0
.data:000000000020C057                 db    0
.data:000000000020C058 nslots          dd 1                    ; DATA XREF: quotearg_n_options+3A↑r
.data:000000000020C058                                         ; quotearg_n_options:loc_47ED↑r ...
.data:000000000020C05C                 align 20h
.data:000000000020C060 ; void *slotvec
.data:000000000020C060 slotvec         dq offset slotvec0      ; DATA XREF: quotearg_n_options+29↑r
.data:000000000020C060                                         ; quotearg_n_options+76↑w ...
.data:000000000020C068                 align 10h
.data:000000000020C070 slotvec0        dq offset qword_100     ; DATA XREF: quotearg_n_options+54↑o
.data:000000000020C070                                         ; quotearg_n_options+187↑r ...
.data:000000000020C078 off_20C078      dq offset slot0         ; DATA XREF: quotearg_free+62↑w
.data:000000000020C078 _data           ends
.data:000000000020C078
.bss:000000000020C080 ; ===========================================================================
.bss:000000000020C080
.bss:000000000020C080 ; Segment type: Uninitialized
.bss:000000000020C080 ; Segment permissions: Read/Write
.bss:000000000020C080 _bss            segment align_32 public 'BSS' use64
.bss:000000000020C080                 assume cs:_bss
.bss:000000000020C080                 ;org 20C080h
.bss:000000000020C080                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:000000000020C080                 public __bss_start ; weak
.bss:000000000020C080 __bss_start     dq ?                    ; DATA XREF: LOAD:0000000000000800↑o
.bss:000000000020C080                                         ; LOAD:0000000000000848↑o ...
.bss:000000000020C080                                         ; Alternative name is '__TMC_END__'
.bss:000000000020C080                                         ; program_invocation_short_name@@GLIBC_2.2.5
.bss:000000000020C080                                         ; _edata
.bss:000000000020C080                                         ; Copy of shared data
.bss:000000000020C088                 public stdout@@GLIBC_2_2_5
.bss:000000000020C088 ; FILE *stdout
.bss:000000000020C088 stdout@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:00000000000007E8↑o
.bss:000000000020C088                                         ; main+130↑r ...
.bss:000000000020C088                                         ; Alternative name is 'stdout'
.bss:000000000020C088                                         ; Copy of shared data
.bss:000000000020C090                 public program_invocation_name@@GLIBC_2_2_5 ; weak
.bss:000000000020C090 program_invocation_name@@GLIBC_2_2_5 dq ?
.bss:000000000020C090                                         ; DATA XREF: LOAD:0000000000000818↑o
.bss:000000000020C090                                         ; LOAD:0000000000000830↑o ...
.bss:000000000020C090                                         ; Alternative name is '__progname_full@@GLIBC_2.2.5'
.bss:000000000020C090                                         ; Copy of shared data
.bss:000000000020C098                 align 20h
.bss:000000000020C0A0                 public stderr@@GLIBC_2_2_5
.bss:000000000020C0A0 ; FILE *stderr
.bss:000000000020C0A0 stderr@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000860↑o
.bss:000000000020C0A0                                         ; usage+24↑r ...
.bss:000000000020C0A0                                         ; Alternative name is 'stderr'
.bss:000000000020C0A0                                         ; Copy of shared data
.bss:000000000020C0A8 completed_7697  db ?                    ; DATA XREF: __do_global_dtors_aux↑r
.bss:000000000020C0A8                                         ; __do_global_dtors_aux+28↑w
.bss:000000000020C0A9                 align 10h
.bss:000000000020C0B0 argv            dq ?                    ; DATA XREF: main+5C↑w
.bss:000000000020C0B0                                         ; main:loc_17C2↑r ...
.bss:000000000020C0B8 argc            dd ?                    ; DATA XREF: main+9A↑w
.bss:000000000020C0B8                                         ; main+AC↑r ...
.bss:000000000020C0BC pos             dd ?                    ; DATA XREF: main+90↑w
.bss:000000000020C0BC                                         ; main+A5↑r ...
.bss:000000000020C0C0 ignore_EPIPE    db ?                    ; DATA XREF: close_stdout_set_ignore_EPIPE↑w
.bss:000000000020C0C0                                         ; close_stdout+1B↑r
.bss:000000000020C0C1                 align 8
.bss:000000000020C0C8 file_name       dq ?                    ; DATA XREF: close_stdout_set_file_name↑w
.bss:000000000020C0C8                                         ; close_stdout+56↑r
.bss:000000000020C0D0                 public program_name
.bss:000000000020C0D0 program_name    dq ?                    ; DATA XREF: usage+11↑r
.bss:000000000020C0D0                                         ; set_program_name:loc_340D↑w
.bss:000000000020C0D8                 align 20h
.bss:000000000020C0E0 slot0           db    ? ;               ; DATA XREF: quotearg_n_options+FE↑o
.bss:000000000020C0E0                                         ; quotearg_free+46↑o ...
.bss:000000000020C0E1                 db    ? ;
.bss:000000000020C0E2                 db    ? ;
.bss:000000000020C0E3                 db    ? ;
.bss:000000000020C0E4                 db    ? ;
.bss:000000000020C0E5                 db    ? ;
.bss:000000000020C0E6                 db    ? ;
.bss:000000000020C0E7                 db    ? ;
.bss:000000000020C0E8                 db    ? ;
.bss:000000000020C0E9                 db    ? ;
.bss:000000000020C0EA                 db    ? ;
.bss:000000000020C0EB                 db    ? ;
.bss:000000000020C0EC                 db    ? ;
.bss:000000000020C0ED                 db    ? ;
.bss:000000000020C0EE                 db    ? ;
.bss:000000000020C0EF                 db    ? ;
.bss:000000000020C0F0                 db    ? ;
.bss:000000000020C0F1                 db    ? ;
.bss:000000000020C0F2                 db    ? ;
.bss:000000000020C0F3                 db    ? ;
.bss:000000000020C0F4                 db    ? ;
.bss:000000000020C0F5                 db    ? ;
.bss:000000000020C0F6                 db    ? ;
.bss:000000000020C0F7                 db    ? ;
.bss:000000000020C0F8                 db    ? ;
.bss:000000000020C0F9                 db    ? ;
.bss:000000000020C0FA                 db    ? ;
.bss:000000000020C0FB                 db    ? ;
.bss:000000000020C0FC                 db    ? ;
.bss:000000000020C0FD                 db    ? ;
.bss:000000000020C0FE                 db    ? ;
.bss:000000000020C0FF                 db    ? ;
.bss:000000000020C100                 db    ? ;
.bss:000000000020C101                 db    ? ;
.bss:000000000020C102                 db    ? ;
.bss:000000000020C103                 db    ? ;
.bss:000000000020C104                 db    ? ;
.bss:000000000020C105                 db    ? ;
.bss:000000000020C106                 db    ? ;
.bss:000000000020C107                 db    ? ;
.bss:000000000020C108                 db    ? ;
.bss:000000000020C109                 db    ? ;
.bss:000000000020C10A                 db    ? ;
.bss:000000000020C10B                 db    ? ;
.bss:000000000020C10C                 db    ? ;
.bss:000000000020C10D                 db    ? ;
.bss:000000000020C10E                 db    ? ;
.bss:000000000020C10F                 db    ? ;
.bss:000000000020C110                 db    ? ;
.bss:000000000020C111                 db    ? ;
.bss:000000000020C112                 db    ? ;
.bss:000000000020C113                 db    ? ;
.bss:000000000020C114                 db    ? ;
.bss:000000000020C115                 db    ? ;
.bss:000000000020C116                 db    ? ;
.bss:000000000020C117                 db    ? ;
.bss:000000000020C118                 db    ? ;
.bss:000000000020C119                 db    ? ;
.bss:000000000020C11A                 db    ? ;
.bss:000000000020C11B                 db    ? ;
.bss:000000000020C11C                 db    ? ;
.bss:000000000020C11D                 db    ? ;
.bss:000000000020C11E                 db    ? ;
.bss:000000000020C11F                 db    ? ;
.bss:000000000020C120                 db    ? ;
.bss:000000000020C121                 db    ? ;
.bss:000000000020C122                 db    ? ;
.bss:000000000020C123                 db    ? ;
.bss:000000000020C124                 db    ? ;
.bss:000000000020C125                 db    ? ;
.bss:000000000020C126                 db    ? ;
.bss:000000000020C127                 db    ? ;
.bss:000000000020C128                 db    ? ;
.bss:000000000020C129                 db    ? ;
.bss:000000000020C12A                 db    ? ;
.bss:000000000020C12B                 db    ? ;
.bss:000000000020C12C                 db    ? ;
.bss:000000000020C12D                 db    ? ;
.bss:000000000020C12E                 db    ? ;
.bss:000000000020C12F                 db    ? ;
.bss:000000000020C130                 db    ? ;
.bss:000000000020C131                 db    ? ;
.bss:000000000020C132                 db    ? ;
.bss:000000000020C133                 db    ? ;
.bss:000000000020C134                 db    ? ;
.bss:000000000020C135                 db    ? ;
.bss:000000000020C136                 db    ? ;
.bss:000000000020C137                 db    ? ;
.bss:000000000020C138                 db    ? ;
.bss:000000000020C139                 db    ? ;
.bss:000000000020C13A                 db    ? ;
.bss:000000000020C13B                 db    ? ;
.bss:000000000020C13C                 db    ? ;
.bss:000000000020C13D                 db    ? ;
.bss:000000000020C13E                 db    ? ;
.bss:000000000020C13F                 db    ? ;
.bss:000000000020C140                 db    ? ;
.bss:000000000020C141                 db    ? ;
.bss:000000000020C142                 db    ? ;
.bss:000000000020C143                 db    ? ;
.bss:000000000020C144                 db    ? ;
.bss:000000000020C145                 db    ? ;
.bss:000000000020C146                 db    ? ;
.bss:000000000020C147                 db    ? ;
.bss:000000000020C148                 db    ? ;
.bss:000000000020C149                 db    ? ;
.bss:000000000020C14A                 db    ? ;
.bss:000000000020C14B                 db    ? ;
.bss:000000000020C14C                 db    ? ;
.bss:000000000020C14D                 db    ? ;
.bss:000000000020C14E                 db    ? ;
.bss:000000000020C14F                 db    ? ;
.bss:000000000020C150                 db    ? ;
.bss:000000000020C151                 db    ? ;
.bss:000000000020C152                 db    ? ;
.bss:000000000020C153                 db    ? ;
.bss:000000000020C154                 db    ? ;
.bss:000000000020C155                 db    ? ;
.bss:000000000020C156                 db    ? ;
.bss:000000000020C157                 db    ? ;
.bss:000000000020C158                 db    ? ;
.bss:000000000020C159                 db    ? ;
.bss:000000000020C15A                 db    ? ;
.bss:000000000020C15B                 db    ? ;
.bss:000000000020C15C                 db    ? ;
.bss:000000000020C15D                 db    ? ;
.bss:000000000020C15E                 db    ? ;
.bss:000000000020C15F                 db    ? ;
.bss:000000000020C160                 db    ? ;
.bss:000000000020C161                 db    ? ;
.bss:000000000020C162                 db    ? ;
.bss:000000000020C163                 db    ? ;
.bss:000000000020C164                 db    ? ;
.bss:000000000020C165                 db    ? ;
.bss:000000000020C166                 db    ? ;
.bss:000000000020C167                 db    ? ;
.bss:000000000020C168                 db    ? ;
.bss:000000000020C169                 db    ? ;
.bss:000000000020C16A                 db    ? ;
.bss:000000000020C16B                 db    ? ;
.bss:000000000020C16C                 db    ? ;
.bss:000000000020C16D                 db    ? ;
.bss:000000000020C16E                 db    ? ;
.bss:000000000020C16F                 db    ? ;
.bss:000000000020C170                 db    ? ;
.bss:000000000020C171                 db    ? ;
.bss:000000000020C172                 db    ? ;
.bss:000000000020C173                 db    ? ;
.bss:000000000020C174                 db    ? ;
.bss:000000000020C175                 db    ? ;
.bss:000000000020C176                 db    ? ;
.bss:000000000020C177                 db    ? ;
.bss:000000000020C178                 db    ? ;
.bss:000000000020C179                 db    ? ;
.bss:000000000020C17A                 db    ? ;
.bss:000000000020C17B                 db    ? ;
.bss:000000000020C17C                 db    ? ;
.bss:000000000020C17D                 db    ? ;
.bss:000000000020C17E                 db    ? ;
.bss:000000000020C17F                 db    ? ;
.bss:000000000020C180                 db    ? ;
.bss:000000000020C181                 db    ? ;
.bss:000000000020C182                 db    ? ;
.bss:000000000020C183                 db    ? ;
.bss:000000000020C184                 db    ? ;
.bss:000000000020C185                 db    ? ;
.bss:000000000020C186                 db    ? ;
.bss:000000000020C187                 db    ? ;
.bss:000000000020C188                 db    ? ;
.bss:000000000020C189                 db    ? ;
.bss:000000000020C18A                 db    ? ;
.bss:000000000020C18B                 db    ? ;
.bss:000000000020C18C                 db    ? ;
.bss:000000000020C18D                 db    ? ;
.bss:000000000020C18E                 db    ? ;
.bss:000000000020C18F                 db    ? ;
.bss:000000000020C190                 db    ? ;
.bss:000000000020C191                 db    ? ;
.bss:000000000020C192                 db    ? ;
.bss:000000000020C193                 db    ? ;
.bss:000000000020C194                 db    ? ;
.bss:000000000020C195                 db    ? ;
.bss:000000000020C196                 db    ? ;
.bss:000000000020C197                 db    ? ;
.bss:000000000020C198                 db    ? ;
.bss:000000000020C199                 db    ? ;
.bss:000000000020C19A                 db    ? ;
.bss:000000000020C19B                 db    ? ;
.bss:000000000020C19C                 db    ? ;
.bss:000000000020C19D                 db    ? ;
.bss:000000000020C19E                 db    ? ;
.bss:000000000020C19F                 db    ? ;
.bss:000000000020C1A0                 db    ? ;
.bss:000000000020C1A1                 db    ? ;
.bss:000000000020C1A2                 db    ? ;
.bss:000000000020C1A3                 db    ? ;
.bss:000000000020C1A4                 db    ? ;
.bss:000000000020C1A5                 db    ? ;
.bss:000000000020C1A6                 db    ? ;
.bss:000000000020C1A7                 db    ? ;
.bss:000000000020C1A8                 db    ? ;
.bss:000000000020C1A9                 db    ? ;
.bss:000000000020C1AA                 db    ? ;
.bss:000000000020C1AB                 db    ? ;
.bss:000000000020C1AC                 db    ? ;
.bss:000000000020C1AD                 db    ? ;
.bss:000000000020C1AE                 db    ? ;
.bss:000000000020C1AF                 db    ? ;
.bss:000000000020C1B0                 db    ? ;
.bss:000000000020C1B1                 db    ? ;
.bss:000000000020C1B2                 db    ? ;
.bss:000000000020C1B3                 db    ? ;
.bss:000000000020C1B4                 db    ? ;
.bss:000000000020C1B5                 db    ? ;
.bss:000000000020C1B6                 db    ? ;
.bss:000000000020C1B7                 db    ? ;
.bss:000000000020C1B8                 db    ? ;
.bss:000000000020C1B9                 db    ? ;
.bss:000000000020C1BA                 db    ? ;
.bss:000000000020C1BB                 db    ? ;
.bss:000000000020C1BC                 db    ? ;
.bss:000000000020C1BD                 db    ? ;
.bss:000000000020C1BE                 db    ? ;
.bss:000000000020C1BF                 db    ? ;
.bss:000000000020C1C0                 db    ? ;
.bss:000000000020C1C1                 db    ? ;
.bss:000000000020C1C2                 db    ? ;
.bss:000000000020C1C3                 db    ? ;
.bss:000000000020C1C4                 db    ? ;
.bss:000000000020C1C5                 db    ? ;
.bss:000000000020C1C6                 db    ? ;
.bss:000000000020C1C7                 db    ? ;
.bss:000000000020C1C8                 db    ? ;
.bss:000000000020C1C9                 db    ? ;
.bss:000000000020C1CA                 db    ? ;
.bss:000000000020C1CB                 db    ? ;
.bss:000000000020C1CC                 db    ? ;
.bss:000000000020C1CD                 db    ? ;
.bss:000000000020C1CE                 db    ? ;
.bss:000000000020C1CF                 db    ? ;
.bss:000000000020C1D0                 db    ? ;
.bss:000000000020C1D1                 db    ? ;
.bss:000000000020C1D2                 db    ? ;
.bss:000000000020C1D3                 db    ? ;
.bss:000000000020C1D4                 db    ? ;
.bss:000000000020C1D5                 db    ? ;
.bss:000000000020C1D6                 db    ? ;
.bss:000000000020C1D7                 db    ? ;
.bss:000000000020C1D8                 db    ? ;
.bss:000000000020C1D9                 db    ? ;
.bss:000000000020C1DA                 db    ? ;
.bss:000000000020C1DB                 db    ? ;
.bss:000000000020C1DC                 db    ? ;
.bss:000000000020C1DD                 db    ? ;
.bss:000000000020C1DE                 db    ? ;
.bss:000000000020C1DF                 db    ? ;
.bss:000000000020C1E0 default_quoting_options xmmword ?       ; DATA XREF: clone_quoting_options+12↑o
.bss:000000000020C1E0                                         ; get_quoting_style↑o ...
.bss:000000000020C1F0 xmmword_20C1F0  xmmword ?               ; DATA XREF: quotearg_char_mem+41↑r
.bss:000000000020C1F0                                         ; quotearg_n_custom_mem+39↑r
.bss:000000000020C200 xmmword_20C200  xmmword ?               ; DATA XREF: quotearg_char_mem+4E↑r
.bss:000000000020C200                                         ; quotearg_n_custom_mem+46↑r
.bss:000000000020C210 qword_20C210    dq ?                    ; DATA XREF: quotearg_char_mem+16↑r
.bss:000000000020C210                                         ; quotearg_n_custom_mem+7↑r
.bss:000000000020C210 _bss            ends
.bss:000000000020C210
.prgend:000000000020C218 ; ===========================================================================
.prgend:000000000020C218
.prgend:000000000020C218 ; Segment type: Zero-length
.prgend:000000000020C218 _prgend         segment byte public '' use64
.prgend:000000000020C218 _end            label byte
.prgend:000000000020C218 _prgend         ends
.prgend:000000000020C218
extern:000000000020C220 ; ===========================================================================
extern:000000000020C220
extern:000000000020C220 ; Segment type: Externs
extern:000000000020C220 ; extern
extern:000000000020C220                 extrn __snprintf_chk:near
extern:000000000020C220                                         ; CODE XREF: ___snprintf_chk↑j
extern:000000000020C220                                         ; DATA XREF: .got:__snprintf_chk_ptr↑o
extern:000000000020C228 ; void free(void *ptr)
extern:000000000020C228                 extrn free:near         ; CODE XREF: _free↑j
extern:000000000020C228                                         ; DATA XREF: .got:free_ptr↑o
extern:000000000020C230 ; void __noreturn abort(void)
extern:000000000020C230                 extrn abort:near        ; CODE XREF: _abort↑j
extern:000000000020C230                                         ; DATA XREF: .got:abort_ptr↑o
extern:000000000020C238 ; int *_errno_location(void)
extern:000000000020C238                 extrn __errno_location:near
extern:000000000020C238                                         ; CODE XREF: ___errno_location↑j
extern:000000000020C238                                         ; DATA XREF: .got:__errno_location_ptr↑o
extern:000000000020C240 ; void error_at_line(int status, int errnum, const char *fname, unsigned int lineno, const char *format, ...)
extern:000000000020C240                 extrn error_at_line:near
extern:000000000020C240                                         ; CODE XREF: _error_at_line↑j
extern:000000000020C240                                         ; DATA XREF: .got:error_at_line_ptr↑o
extern:000000000020C248 ; int strncmp(const char *s1, const char *s2, size_t n)
extern:000000000020C248                 extrn strncmp:near      ; CODE XREF: _strncmp↑j
extern:000000000020C248                                         ; DATA XREF: .got:strncmp_ptr↑o
extern:000000000020C250 ; void __noreturn exit(int status)
extern:000000000020C250                 extrn _exit:near        ; CODE XREF: __exit↑j
extern:000000000020C250                                         ; DATA XREF: .got:_exit_ptr↑o
extern:000000000020C258 ; size_t _fpending(FILE *fp)
extern:000000000020C258                 extrn __fpending:near   ; CODE XREF: ___fpending↑j
extern:000000000020C258                                         ; DATA XREF: .got:__fpending_ptr↑o
extern:000000000020C260 ; int isatty(int fd)
extern:000000000020C260                 extrn isatty:near       ; CODE XREF: _isatty↑j
extern:000000000020C260                                         ; DATA XREF: .got:isatty_ptr↑o
extern:000000000020C268 ; char *textdomain(const char *domainname)
extern:000000000020C268                 extrn textdomain:near   ; CODE XREF: _textdomain↑j
extern:000000000020C268                                         ; DATA XREF: .got:textdomain_ptr↑o
extern:000000000020C270 ; int fclose(FILE *stream)
extern:000000000020C270                 extrn fclose:near       ; CODE XREF: _fclose↑j
extern:000000000020C270                                         ; DATA XREF: .got:fclose_ptr↑o
extern:000000000020C278 ; char *bindtextdomain(const char *domainname, const char *dirname)
extern:000000000020C278                 extrn bindtextdomain:near
extern:000000000020C278                                         ; CODE XREF: _bindtextdomain↑j
extern:000000000020C278                                         ; DATA XREF: .got:bindtextdomain_ptr↑o
extern:000000000020C280 ; char *dcgettext(const char *domainname, const char *msgid, int category)
extern:000000000020C280                 extrn dcgettext:near    ; CODE XREF: _dcgettext↑j
extern:000000000020C280                                         ; DATA XREF: .got:dcgettext_ptr↑o
extern:000000000020C288 ; size_t _ctype_get_mb_cur_max(void)
extern:000000000020C288                 extrn __ctype_get_mb_cur_max:near
extern:000000000020C288                                         ; CODE XREF: ___ctype_get_mb_cur_max↑j
extern:000000000020C288                                         ; DATA XREF: .got:__ctype_get_mb_cur_max_ptr↑o
extern:000000000020C290 ; size_t strlen(const char *s)
extern:000000000020C290                 extrn strlen:near       ; CODE XREF: _strlen↑j
extern:000000000020C290                                         ; DATA XREF: .got:strlen_ptr↑o
extern:000000000020C298 ; int _lxstat(int ver, const char *filename, struct stat *stat_buf)
extern:000000000020C298                 extrn __lxstat:near     ; CODE XREF: ___lxstat↑j
extern:000000000020C298                                         ; DATA XREF: .got:__lxstat_ptr↑o
extern:000000000020C2A0                 extrn __stack_chk_fail:near
extern:000000000020C2A0                                         ; CODE XREF: ___stack_chk_fail↑j
extern:000000000020C2A0                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:000000000020C2A8 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
extern:000000000020C2A8                 extrn mbrtowc:near      ; CODE XREF: _mbrtowc↑j
extern:000000000020C2A8                                         ; DATA XREF: .got:mbrtowc_ptr↑o
extern:000000000020C2B0 ; char *strrchr(const char *s, int c)
extern:000000000020C2B0                 extrn strrchr:near      ; CODE XREF: _strrchr↑j
extern:000000000020C2B0                                         ; DATA XREF: .got:strrchr_ptr↑o
extern:000000000020C2B8 ; __off_t lseek(int fd, __off_t offset, int whence)
extern:000000000020C2B8                 extrn lseek:near        ; CODE XREF: _lseek↑j
extern:000000000020C2B8                                         ; DATA XREF: .got:lseek_ptr↑o
extern:000000000020C2C0 ; void *memset(void *s, int c, size_t n)
extern:000000000020C2C0                 extrn memset:near       ; CODE XREF: _memset↑j
extern:000000000020C2C0                                         ; DATA XREF: .got:memset_ptr↑o
extern:000000000020C2C8 ; __uid_t geteuid(void)
extern:000000000020C2C8                 extrn geteuid:near      ; CODE XREF: _geteuid↑j
extern:000000000020C2C8                                         ; DATA XREF: .got:geteuid_ptr↑o
extern:000000000020C2D0 ; int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:000000000020C2D0                 extrn __libc_start_main:near
extern:000000000020C2D0                                         ; CODE XREF: start+24↑p
extern:000000000020C2D0                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:000000000020C2D8 ; int memcmp(const void *s1, const void *s2, size_t n)
extern:000000000020C2D8                 extrn memcmp:near       ; CODE XREF: _memcmp↑j
extern:000000000020C2D8                                         ; DATA XREF: .got:memcmp_ptr↑o
extern:000000000020C2E0 ; int fputs_unlocked(const char *s, FILE *stream)
extern:000000000020C2E0                 extrn fputs_unlocked:near
extern:000000000020C2E0                                         ; CODE XREF: _fputs_unlocked↑j
extern:000000000020C2E0                                         ; DATA XREF: .got:fputs_unlocked_ptr↑o
extern:000000000020C2E8 ; void *calloc(size_t nmemb, size_t size)
extern:000000000020C2E8                 extrn calloc:near       ; CODE XREF: _calloc↑j
extern:000000000020C2E8                                         ; DATA XREF: .got:calloc_ptr↑o
extern:000000000020C2F0 ; int strcmp(const char *s1, const char *s2)
extern:000000000020C2F0                 extrn strcmp:near       ; CODE XREF: _strcmp↑j
extern:000000000020C2F0                                         ; DATA XREF: .got:strcmp_ptr↑o
extern:000000000020C2F8 ; __int64 strtol(const char *nptr, char **endptr, int base)
extern:000000000020C2F8                 extrn strtol:near       ; CODE XREF: _strtol↑j
extern:000000000020C2F8                                         ; DATA XREF: .got:strtol_ptr↑o
extern:000000000020C300 ; void *memcpy(void *dest, const void *src, size_t n)
extern:000000000020C300                 extrn memcpy:near       ; CODE XREF: _memcpy↑j
extern:000000000020C300                                         ; DATA XREF: .got:memcpy_ptr↑o
extern:000000000020C308 ; int fileno(FILE *stream)
extern:000000000020C308                 extrn fileno:near       ; CODE XREF: _fileno↑j
extern:000000000020C308                                         ; DATA XREF: .got:fileno_ptr↑o
extern:000000000020C310 ; int _xstat(int ver, const char *filename, struct stat *stat_buf)
extern:000000000020C310                 extrn __xstat:near      ; CODE XREF: ___xstat↑j
extern:000000000020C310                                         ; DATA XREF: .got:__xstat_ptr↑o
extern:000000000020C318 ; void *malloc(size_t size)
extern:000000000020C318                 extrn malloc:near       ; CODE XREF: _malloc↑j
extern:000000000020C318                                         ; DATA XREF: .got:malloc_ptr↑o
extern:000000000020C320 ; int fflush(FILE *stream)
extern:000000000020C320                 extrn fflush:near       ; CODE XREF: _fflush↑j
extern:000000000020C320                                         ; DATA XREF: .got:fflush_ptr↑o
extern:000000000020C328 ; char *nl_langinfo(nl_item item)
extern:000000000020C328                 extrn nl_langinfo:near  ; CODE XREF: _nl_langinfo↑j
extern:000000000020C328                                         ; DATA XREF: .got:nl_langinfo_ptr↑o
extern:000000000020C330 ; __gid_t getegid(void)
extern:000000000020C330                 extrn getegid:near      ; CODE XREF: _getegid↑j
extern:000000000020C330                                         ; DATA XREF: .got:getegid_ptr↑o
extern:000000000020C338 ; int _freading(FILE *fp)
extern:000000000020C338                 extrn __freading:near   ; CODE XREF: ___freading↑j
extern:000000000020C338                                         ; DATA XREF: .got:__freading_ptr↑o
extern:000000000020C340 ; void *realloc(void *ptr, size_t size)
extern:000000000020C340                 extrn realloc:near      ; CODE XREF: _realloc↑j
extern:000000000020C340                                         ; DATA XREF: .got:realloc_ptr↑o
extern:000000000020C348 ; char *setlocale(int category, const char *locale)
extern:000000000020C348                 extrn setlocale:near    ; CODE XREF: _setlocale↑j
extern:000000000020C348                                         ; DATA XREF: .got:setlocale_ptr↑o
extern:000000000020C350                 extrn __printf_chk:near ; CODE XREF: ___printf_chk↑j
extern:000000000020C350                                         ; DATA XREF: .got:__printf_chk_ptr↑o
extern:000000000020C358 ; void error(int status, int errnum, const char *format, ...)
extern:000000000020C358                 extrn error:near        ; CODE XREF: _error↑j
extern:000000000020C358                                         ; DATA XREF: .got:error_ptr↑o
extern:000000000020C360 ; int fseeko(FILE *stream, __off_t off, int whence)
extern:000000000020C360                 extrn fseeko:near       ; CODE XREF: _fseeko↑j
extern:000000000020C360                                         ; DATA XREF: .got:fseeko_ptr↑o
extern:000000000020C368 ; int euidaccess(const char *name, int type)
extern:000000000020C368                 extrn euidaccess:near   ; CODE XREF: _euidaccess↑j
extern:000000000020C368                                         ; DATA XREF: .got:euidaccess_ptr↑o
extern:000000000020C370 ; int __fastcall _cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
extern:000000000020C370                 extrn __cxa_atexit:near ; CODE XREF: ___cxa_atexit↑j
extern:000000000020C370                                         ; DATA XREF: .got:__cxa_atexit_ptr↑o
extern:000000000020C378 ; void __noreturn exit(int status)
extern:000000000020C378                 extrn exit:near         ; CODE XREF: _exit↑j
extern:000000000020C378                                         ; DATA XREF: .got:exit_ptr↑o
extern:000000000020C380 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
extern:000000000020C380                 extrn fwrite:near       ; CODE XREF: _fwrite↑j
extern:000000000020C380                                         ; DATA XREF: .got:fwrite_ptr↑o
extern:000000000020C388                 extrn __fprintf_chk:near
extern:000000000020C388                                         ; CODE XREF: ___fprintf_chk↑j
extern:000000000020C388                                         ; DATA XREF: .got:__fprintf_chk_ptr↑o
extern:000000000020C390 ; int mbsinit(const mbstate_t *ps)
extern:000000000020C390                 extrn mbsinit:near      ; CODE XREF: _mbsinit↑j
extern:000000000020C390                                         ; DATA XREF: .got:mbsinit_ptr↑o
extern:000000000020C398 ; int iswprint(wint_t wc)
extern:000000000020C398                 extrn iswprint:near     ; CODE XREF: _iswprint↑j
extern:000000000020C398                                         ; DATA XREF: .got:iswprint_ptr↑o
extern:000000000020C3A0 ; int __fastcall __cxa_finalize(void *)
extern:000000000020C3A0                 extrn __imp___cxa_finalize:near ; weak
extern:000000000020C3A0                                         ; CODE XREF: __cxa_finalize↑j
extern:000000000020C3A0                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:000000000020C3A8 ; const unsigned __int16 **_ctype_b_loc(void)
extern:000000000020C3A8                 extrn __ctype_b_loc:near
extern:000000000020C3A8                                         ; CODE XREF: ___ctype_b_loc↑j
extern:000000000020C3A8                                         ; DATA XREF: .got:__ctype_b_loc_ptr↑o
extern:000000000020C3B0                 extrn _ITM_deregisterTMCloneTable ; weak
extern:000000000020C3B0                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:000000000020C3B8                 extrn __gmon_start__:near ; weak
extern:000000000020C3B8                                         ; CODE XREF: _init_proc+10↑p
extern:000000000020C3B8                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:000000000020C3C0                 extrn _ITM_registerTMCloneTable ; weak
extern:000000000020C3C0                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:000000000020C3C0
extern:000000000020C3C0
extern:000000000020C3C0                 end start
