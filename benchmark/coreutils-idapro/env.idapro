LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                      License info: 48-357D-7BC4-C6                      |
LOAD:0000000000000000 ; |                              Virginia Tech                              |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : 85A93B42B4F195FB220ED13A4147E9BDD005F97252CBAD6B653DF7D940C08931
LOAD:0000000000000000 ; Input MD5    : 86926D19FA39EF4FA6F4AD17E7D86537
LOAD:0000000000000000 ; Input CRC32  : E21A3546
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/env
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'env.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000 ; Source File : 'operand2sig.c'
LOAD:0000000000000000 ; Source File : 'version.c'
LOAD:0000000000000000 ; Source File : 'closeout.c'
LOAD:0000000000000000 ; Source File : 'exitfail.c'
LOAD:0000000000000000 ; Source File : 'progname.c'
LOAD:0000000000000000 ; Source File : 'quotearg.c'
LOAD:0000000000000000 ; Source File : 'version-etc.c'
LOAD:0000000000000000 ; Source File : 'version-etc-fsf.c'
LOAD:0000000000000000 ; Source File : 'xmalloc.c'
LOAD:0000000000000000 ; Source File : 'xalloc-die.c'
LOAD:0000000000000000 ; Source File : 'mbrtowc.c'
LOAD:0000000000000000 ; Source File : 'sig2str.c'
LOAD:0000000000000000 ; Source File : 'close-stream.c'
LOAD:0000000000000000 ; Source File : 'hard-locale.c'
LOAD:0000000000000000 ; Source File : 'localcharset.c'
LOAD:0000000000000000 ; Source File : 'fclose.c'
LOAD:0000000000000000 ; Source File : 'fflush.c'
LOAD:0000000000000000 ; Source File : 'fseeko.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure code
LOAD:0000000000000000 ; Segment permissions: Read/Execute
LOAD:0000000000000000 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:0000000000000300↓o
LOAD:0000000000000000                                         ; LOAD:0000000000000318↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset start         ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 2ECC0h               ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 9                    ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 25h                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 24h                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 1F8h                 ; Size in file image
LOAD:0000000000000068                 dq 1F8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 238h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 238h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 5                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 8F40h                ; Size in file image
LOAD:00000000000000D8                 dq 8F40h                ; Size in memory image
LOAD:00000000000000E0                 dq 200000h              ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 6                    ; Flags
LOAD:00000000000000F0                 dq 99D0h                ; File offset
LOAD:00000000000000F8                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000100 qword_100       dq 2099D0h              ; DATA XREF: .data:slotvec0↓o
LOAD:0000000000000100                                         ; Physical address
LOAD:0000000000000108                 dq 854h                 ; Size in file image
LOAD:0000000000000110                 dq 0B88h                ; Size in memory image
LOAD:0000000000000118                 dq 200000h              ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000124                 dd 6                    ; Flags
LOAD:0000000000000128                 dq 9BD8h                ; File offset
LOAD:0000000000000130                 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000000138                 dq 209BD8h              ; Physical address
LOAD:0000000000000140                 dq 1F0h                 ; Size in file image
LOAD:0000000000000148                 dq 1F0h                 ; Size in memory image
LOAD:0000000000000150                 dq 8                    ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 4                    ; Type: NOTE
LOAD:000000000000015C                 dd 4                    ; Flags
LOAD:0000000000000160                 dq 254h                 ; File offset
LOAD:0000000000000168                 dq offset dword_254     ; Virtual address
LOAD:0000000000000170                 dq 254h                 ; Physical address
LOAD:0000000000000178                 dq 44h                  ; Size in file image
LOAD:0000000000000180                 dq 44h                  ; Size in memory image
LOAD:0000000000000188                 dq 4                    ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000194                 dd 4                    ; Flags
LOAD:0000000000000198                 dq 7FE0h                ; File offset
LOAD:00000000000001A0                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000000001A8                 dq 7FE0h                ; Physical address
LOAD:00000000000001B0                 dq 274h                 ; Size in file image
LOAD:00000000000001B8                 dq 274h                 ; Size in memory image
LOAD:00000000000001C0                 dq 4                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000001CC                 dd 6                    ; Flags
LOAD:00000000000001D0                 dq 0                    ; File offset
LOAD:00000000000001D8                 dq 0                    ; Virtual address
LOAD:00000000000001E0                 dq 0                    ; Physical address
LOAD:00000000000001E8                 dq 0                    ; Size in file image
LOAD:00000000000001F0                 dq 0                    ; Size in memory image
LOAD:00000000000001F8                 dq 10h                  ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 6474E552h            ; Type: RO-AFTER
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 99D0h                ; File offset
LOAD:0000000000000210                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000218                 dq 2099D0h              ; Physical address
LOAD:0000000000000220                 dq 630h                 ; Size in file image
LOAD:0000000000000228                 dq 630h                 ; Size in memory image
LOAD:0000000000000230                 dq 1                    ; Alignment
LOAD:0000000000000238 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000238                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000254 ; ELF Note Entry
LOAD:0000000000000254 dword_254       dd 4                    ; DATA XREF: LOAD:0000000000000168↑o
LOAD:0000000000000254                                         ; Name Size
LOAD:0000000000000258                 dd 10h                  ; Desc Size
LOAD:000000000000025C                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000260 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000264                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:0000000000000274 ; ELF Note Entry
LOAD:0000000000000274                 dd 4                    ; Name Size
LOAD:0000000000000278                 dd 14h                  ; Desc Size
LOAD:000000000000027C                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000280 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000284                 db 0F8h, 0B3h, 0F0h, 5Bh, 0D7h, 0F8h, 0FEh, 48h, 0A9h ; Desc
LOAD:0000000000000284                 db 66h, 0DDh, 98h, 57h, 8, 1Ah, 97h, 0F6h, 32h, 6Eh, 44h
LOAD:0000000000000298 ; ELF GNU Hash Table
LOAD:0000000000000298 elf_gnu_hash_nbuckets dd 3
LOAD:000000000000029C elf_gnu_hash_symbias dd 44h
LOAD:00000000000002A0 elf_gnu_hash_bitmask_nwords dd 1
LOAD:00000000000002A4 elf_gnu_hash_shift dd 6
LOAD:00000000000002A8 elf_gnu_hash_indexes dq 125C01E000414D34h
LOAD:00000000000002B0 elf_gnu_hash_bucket dd 44h, 47h, 4Dh
LOAD:00000000000002BC elf_gnu_hash_chain dd 1C8C1D28h, 900589C4h, 6BA3DDA7h, 9E7650BCh, 9789A096h
LOAD:00000000000002BC                 dd 72632CCEh, 409CB9C4h, 0F54162E4h, 1C8BF239h, 12F7C432h
LOAD:00000000000002BC                 dd 12F7A2B3h
LOAD:00000000000002E8 ; ELF Symbol Table
LOAD:00000000000002E8                 Elf64_Sym <0>
LOAD:0000000000000300                 Elf64_Sym <offset aGetenv - offset byte_A50, 12h, 0, 0, \ ; "getenv"
LOAD:0000000000000300                            offset dword_0, 0>
LOAD:0000000000000318                 Elf64_Sym <offset aSigprocmask - offset byte_A50, 12h, 0, 0, \ ; "sigprocmask"
LOAD:0000000000000318                            offset dword_0, 0>
LOAD:0000000000000330                 Elf64_Sym <offset aFree - offset byte_A50, 12h, 0, 0, offset dword_0, \ ; "free"
LOAD:0000000000000330                            0>
LOAD:0000000000000348                 Elf64_Sym <offset aAbort - offset byte_A50, 12h, 0, 0, offset dword_0,\ ; "abort"
LOAD:0000000000000348                            0>
LOAD:0000000000000360                 Elf64_Sym <offset aErrnoLocation - offset byte_A50, 12h, 0, 0, \ ; "__errno_location"
LOAD:0000000000000360                            offset dword_0, 0>
LOAD:0000000000000378                 Elf64_Sym <offset aStrncmp - offset byte_A50, 12h, 0, 0, \ ; "strncmp"
LOAD:0000000000000378                            offset dword_0, 0>
LOAD:0000000000000390                 Elf64_Sym <offset aItmDeregistert - offset byte_A50, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:0000000000000390                            offset dword_0, 0>
LOAD:00000000000003A8                 Elf64_Sym <offset aExit - offset byte_A50, 12h, 0, 0, offset dword_0, \ ; "_exit"
LOAD:00000000000003A8                            0>
LOAD:00000000000003C0                 Elf64_Sym <offset aStrcpy - offset byte_A50, 12h, 0, 0, \ ; "strcpy"
LOAD:00000000000003C0                            offset dword_0, 0>
LOAD:00000000000003D8                 Elf64_Sym <offset aFpending - offset byte_A50, 12h, 0, 0, \ ; "__fpending"
LOAD:00000000000003D8                            offset dword_0, 0>
LOAD:00000000000003F0                 Elf64_Sym <offset aSigaction - offset byte_A50, 12h, 0, 0, \ ; "sigaction"
LOAD:00000000000003F0                            offset dword_0, 0>
LOAD:0000000000000408                 Elf64_Sym <offset aBindtextdomain+4 - offset byte_A50, 12h, 0, 0, \ ; "textdomain"
LOAD:0000000000000408                            offset dword_0, 0>
LOAD:0000000000000420                 Elf64_Sym <offset aFclose - offset byte_A50, 12h, 0, 0, \ ; "fclose"
LOAD:0000000000000420                            offset dword_0, 0>
LOAD:0000000000000438                 Elf64_Sym <offset aBindtextdomain - offset byte_A50, 12h, 0, 0, \ ; "bindtextdomain"
LOAD:0000000000000438                            offset dword_0, 0>
LOAD:0000000000000450                 Elf64_Sym <offset aStpcpy - offset byte_A50, 12h, 0, 0, \ ; "stpcpy"
LOAD:0000000000000450                            offset dword_0, 0>
LOAD:0000000000000468                 Elf64_Sym <offset aDcgettext - offset byte_A50, 12h, 0, 0, \ ; "dcgettext"
LOAD:0000000000000468                            offset dword_0, 0>
LOAD:0000000000000480                 Elf64_Sym <offset aCtypeGetMbCurM - offset byte_A50, 12h, 0, 0, \ ; "__ctype_get_mb_cur_max"
LOAD:0000000000000480                            offset dword_0, 0>
LOAD:0000000000000498                 Elf64_Sym <offset aStrlen - offset byte_A50, 12h, 0, 0, \ ; "strlen"
LOAD:0000000000000498                            offset dword_0, 0>
LOAD:00000000000004B0                 Elf64_Sym <offset aChdir - offset byte_A50, 12h, 0, 0, offset dword_0,\ ; "chdir"
LOAD:00000000000004B0                            0>
LOAD:00000000000004C8                 Elf64_Sym <offset aStackChkFail - offset byte_A50, 12h, 0, 0, \ ; "__stack_chk_fail"
LOAD:00000000000004C8                            offset dword_0, 0>
LOAD:00000000000004E0                 Elf64_Sym <offset aGetoptLong - offset byte_A50, 12h, 0, 0, \ ; "getopt_long"
LOAD:00000000000004E0                            offset dword_0, 0>
LOAD:00000000000004F8                 Elf64_Sym <offset aMbrtowc - offset byte_A50, 12h, 0, 0, \ ; "mbrtowc"
LOAD:00000000000004F8                            offset dword_0, 0>
LOAD:0000000000000510                 Elf64_Sym <offset aStrchr - offset byte_A50, 12h, 0, 0, \ ; "strchr"
LOAD:0000000000000510                            offset dword_0, 0>
LOAD:0000000000000528                 Elf64_Sym <offset aStrrchr - offset byte_A50, 12h, 0, 0, \ ; "strrchr"
LOAD:0000000000000528                            offset dword_0, 0>
LOAD:0000000000000540                 Elf64_Sym <offset aLseek - offset byte_A50, 12h, 0, 0, offset dword_0,\ ; "lseek"
LOAD:0000000000000540                            0>
LOAD:0000000000000558                 Elf64_Sym <offset aAssertFail - offset byte_A50, 12h, 0, 0, \ ; "__assert_fail"
LOAD:0000000000000558                            offset dword_0, 0>
LOAD:0000000000000570                 Elf64_Sym <offset aMemset - offset byte_A50, 12h, 0, 0, \ ; "memset"
LOAD:0000000000000570                            offset dword_0, 0>
LOAD:0000000000000588                 Elf64_Sym <offset aStrspn - offset byte_A50, 12h, 0, 0, \ ; "strspn"
LOAD:0000000000000588                            offset dword_0, 0>
LOAD:00000000000005A0                 Elf64_Sym <offset aLibcStartMain - offset byte_A50, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:00000000000005A0                            offset dword_0, 0>
LOAD:00000000000005B8                 Elf64_Sym <offset aMemcmp - offset byte_A50, 12h, 0, 0, \ ; "memcmp"
LOAD:00000000000005B8                            offset dword_0, 0>
LOAD:00000000000005D0                 Elf64_Sym <offset aFputsUnlocked - offset byte_A50, 12h, 0, 0, \ ; "fputs_unlocked"
LOAD:00000000000005D0                            offset dword_0, 0>
LOAD:00000000000005E8                 Elf64_Sym <offset aCalloc - offset byte_A50, 12h, 0, 0, \ ; "calloc"
LOAD:00000000000005E8                            offset dword_0, 0>
LOAD:0000000000000600                 Elf64_Sym <offset aPutenv - offset byte_A50, 12h, 0, 0, \ ; "putenv"
LOAD:0000000000000600                            offset dword_0, 0>
LOAD:0000000000000618                 Elf64_Sym <offset aStrcmp - offset byte_A50, 12h, 0, 0, \ ; "strcmp"
LOAD:0000000000000618                            offset dword_0, 0>
LOAD:0000000000000630                 Elf64_Sym <offset aSigemptyset - offset byte_A50, 12h, 0, 0, \ ; "sigemptyset"
LOAD:0000000000000630                            offset dword_0, 0>
LOAD:0000000000000648                 Elf64_Sym <offset aGmonStart - offset byte_A50, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:0000000000000648                            offset dword_0, 0>
LOAD:0000000000000660                 Elf64_Sym <offset aStrtol - offset byte_A50, 12h, 0, 0, \ ; "strtol"
LOAD:0000000000000660                            offset dword_0, 0>
LOAD:0000000000000678                 Elf64_Sym <offset aSigfillset - offset byte_A50, 12h, 0, 0, \ ; "sigfillset"
LOAD:0000000000000678                            offset dword_0, 0>
LOAD:0000000000000690                 Elf64_Sym <offset aMemcpy - offset byte_A50, 12h, 0, 0, \ ; "memcpy"
LOAD:0000000000000690                            offset dword_0, 0>
LOAD:00000000000006A8                 Elf64_Sym <offset aFileno - offset byte_A50, 12h, 0, 0, \ ; "fileno"
LOAD:00000000000006A8                            offset dword_0, 0>
LOAD:00000000000006C0                 Elf64_Sym <offset aMalloc - offset byte_A50, 12h, 0, 0, \ ; "malloc"
LOAD:00000000000006C0                            offset dword_0, 0>
LOAD:00000000000006D8                 Elf64_Sym <offset aFflush - offset byte_A50, 12h, 0, 0, \ ; "fflush"
LOAD:00000000000006D8                            offset dword_0, 0>
LOAD:00000000000006F0                 Elf64_Sym <offset aNlLanginfo - offset byte_A50, 12h, 0, 0, \ ; "nl_langinfo"
LOAD:00000000000006F0                            offset dword_0, 0>
LOAD:0000000000000708                 Elf64_Sym <offset aFreading - offset byte_A50, 12h, 0, 0, \ ; "__freading"
LOAD:0000000000000708                            offset dword_0, 0>
LOAD:0000000000000720                 Elf64_Sym <offset aRealloc - offset byte_A50, 12h, 0, 0, \ ; "realloc"
LOAD:0000000000000720                            offset dword_0, 0>
LOAD:0000000000000738                 Elf64_Sym <offset aSetlocale - offset byte_A50, 12h, 0, 0, \ ; "setlocale"
LOAD:0000000000000738                            offset dword_0, 0>
LOAD:0000000000000750                 Elf64_Sym <offset aPrintfChk - offset byte_A50, 12h, 0, 0, \ ; "__printf_chk"
LOAD:0000000000000750                            offset dword_0, 0>
LOAD:0000000000000768                 Elf64_Sym <offset aError - offset byte_A50, 12h, 0, 0, offset dword_0,\ ; "error"
LOAD:0000000000000768                            0>
LOAD:0000000000000780                 Elf64_Sym <offset aFseeko - offset byte_A50, 12h, 0, 0, \ ; "fseeko"
LOAD:0000000000000780                            offset dword_0, 0>
LOAD:0000000000000798                 Elf64_Sym <offset aSigdelset - offset byte_A50, 12h, 0, 0, \ ; "sigdelset"
LOAD:0000000000000798                            offset dword_0, 0>
LOAD:00000000000007B0                 Elf64_Sym <offset aStrtok - offset byte_A50, 12h, 0, 0, \ ; "strtok"
LOAD:00000000000007B0                            offset dword_0, 0>
LOAD:00000000000007C8                 Elf64_Sym <offset aUnsetenv - offset byte_A50, 12h, 0, 0, \ ; "unsetenv"
LOAD:00000000000007C8                            offset dword_0, 0>
LOAD:00000000000007E0                 Elf64_Sym <offset aExecvp - offset byte_A50, 12h, 0, 0, \ ; "execvp"
LOAD:00000000000007E0                            offset dword_0, 0>
LOAD:00000000000007F8                 Elf64_Sym <offset aCxaAtexit - offset byte_A50, 12h, 0, 0, \ ; "__cxa_atexit"
LOAD:00000000000007F8                            offset dword_0, 0>
LOAD:0000000000000810                 Elf64_Sym <offset aLibcCurrentSig_0 - offset byte_A50, 12h, 0, 0, \ ; "__libc_current_sigrtmin"
LOAD:0000000000000810                            offset dword_0, 0>
LOAD:0000000000000828                 Elf64_Sym <offset aSigismember - offset byte_A50, 12h, 0, 0, \ ; "sigismember"
LOAD:0000000000000828                            offset dword_0, 0>
LOAD:0000000000000840                 Elf64_Sym <offset aExit+1 - offset byte_A50, 12h, 0, 0, \ ; "exit"
LOAD:0000000000000840                            offset dword_0, 0>
LOAD:0000000000000858                 Elf64_Sym <offset aFwrite - offset byte_A50, 12h, 0, 0, \ ; "fwrite"
LOAD:0000000000000858                            offset dword_0, 0>
LOAD:0000000000000870                 Elf64_Sym <offset aFprintfChk - offset byte_A50, 12h, 0, 0, \ ; "__fprintf_chk"
LOAD:0000000000000870                            offset dword_0, 0>
LOAD:0000000000000888                 Elf64_Sym <offset aLibcCurrentSig - offset byte_A50, 12h, 0, 0, \ ; "__libc_current_sigrtmax"
LOAD:0000000000000888                            offset dword_0, 0>
LOAD:00000000000008A0                 Elf64_Sym <offset aItmRegistertmc - offset byte_A50, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:00000000000008A0                            offset dword_0, 0>
LOAD:00000000000008B8                 Elf64_Sym <offset aMbsinit - offset byte_A50, 12h, 0, 0, \ ; "mbsinit"
LOAD:00000000000008B8                            offset dword_0, 0>
LOAD:00000000000008D0                 Elf64_Sym <offset aIswprint - offset byte_A50, 12h, 0, 0, \ ; "iswprint"
LOAD:00000000000008D0                            offset dword_0, 0>
LOAD:00000000000008E8                 Elf64_Sym <offset aCxaFinalize - offset byte_A50, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:00000000000008E8                            offset dword_0, 0>
LOAD:0000000000000900                 Elf64_Sym <offset aSigaddset - offset byte_A50, 12h, 0, 0, \ ; "sigaddset"
LOAD:0000000000000900                            offset dword_0, 0>
LOAD:0000000000000918                 Elf64_Sym <offset aCtypeBLoc - offset byte_A50, 12h, 0, 0, \ ; "__ctype_b_loc"
LOAD:0000000000000918                            offset dword_0, 0>
LOAD:0000000000000930                 Elf64_Sym <offset aSprintfChk - offset byte_A50, 12h, 0, 0, \ ; "__sprintf_chk"
LOAD:0000000000000930                            offset dword_0, 0>
LOAD:0000000000000948                 Elf64_Sym <offset aStdout - offset byte_A50, 11h, 0, 19h, \ ; "stdout"
LOAD:0000000000000948                            offset stdout@@GLIBC_2_2_5, 8>
LOAD:0000000000000960                 Elf64_Sym <offset aEnviron+1 - offset byte_A50, 21h, 0, 19h, \ ; "_environ"
LOAD:0000000000000960                            offset environ@@GLIBC_2_2_5, 8>
LOAD:0000000000000978                 Elf64_Sym <offset aEnviron+2 - offset byte_A50, 21h, 0, 19h, \ ; "environ"
LOAD:0000000000000978                            offset environ@@GLIBC_2_2_5, 8>
LOAD:0000000000000990                 Elf64_Sym <offset aProgname - offset byte_A50, 11h, 0, 19h, \ ; "__progname"
LOAD:0000000000000990                            offset program_invocation_short_name@@GLIBC_2_2_5, 8>
LOAD:00000000000009A8                 Elf64_Sym <offset aProgramInvocat - offset byte_A50, 21h, 0, 19h, \ ; "program_invocation_name"
LOAD:00000000000009A8                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:00000000000009C0                 Elf64_Sym <offset aPrognameFull - offset byte_A50, 11h, 0, 19h, \ ; "__progname_full"
LOAD:00000000000009C0                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:00000000000009D8                 Elf64_Sym <offset aEnviron - offset byte_A50, 11h, 0, 19h, \ ; "__environ"
LOAD:00000000000009D8                            offset environ@@GLIBC_2_2_5, 8>
LOAD:00000000000009F0                 Elf64_Sym <offset aProgramInvocat_0 - offset byte_A50, 21h, 0, 19h, \ ; "program_invocation_short_name"
LOAD:00000000000009F0                            offset program_invocation_short_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000A08                 Elf64_Sym <offset aStderr - offset byte_A50, 11h, 0, 19h, \ ; "stderr"
LOAD:0000000000000A08                            offset stderr@@GLIBC_2_2_5, 8>
LOAD:0000000000000A20                 Elf64_Sym <offset aOptind - offset byte_A50, 11h, 0, 19h, \ ; "optind"
LOAD:0000000000000A20                            offset optind@@GLIBC_2_2_5, 4>
LOAD:0000000000000A38                 Elf64_Sym <offset aOptarg - offset byte_A50, 11h, 0, 19h, \ ; "optarg"
LOAD:0000000000000A38                            offset optarg@@GLIBC_2_2_5, 8>
LOAD:0000000000000A50 ; ELF String Table
LOAD:0000000000000A50 byte_A50        db 0                    ; DATA XREF: LOAD:0000000000000300↑o
LOAD:0000000000000A50                                         ; LOAD:0000000000000318↑o ...
LOAD:0000000000000A51 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000000E68↓o
LOAD:0000000000000A5B aFflush         db 'fflush',0           ; DATA XREF: LOAD:00000000000006D8↑o
LOAD:0000000000000A62 aStrcpy         db 'strcpy',0           ; DATA XREF: LOAD:00000000000003C0↑o
LOAD:0000000000000A69 aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:0000000000000750↑o
LOAD:0000000000000A76 aSetlocale      db 'setlocale',0        ; DATA XREF: LOAD:0000000000000738↑o
LOAD:0000000000000A80 aMbrtowc        db 'mbrtowc',0          ; DATA XREF: LOAD:00000000000004F8↑o
LOAD:0000000000000A88 aStrncmp        db 'strncmp',0          ; DATA XREF: LOAD:0000000000000378↑o
LOAD:0000000000000A90 aOptind         db 'optind',0           ; DATA XREF: LOAD:0000000000000A20↑o
LOAD:0000000000000A97 aStrrchr        db 'strrchr',0          ; DATA XREF: LOAD:0000000000000528↑o
LOAD:0000000000000A9F aDcgettext      db 'dcgettext',0        ; DATA XREF: LOAD:0000000000000468↑o
LOAD:0000000000000AA9 aError          db 'error',0            ; DATA XREF: LOAD:0000000000000768↑o
LOAD:0000000000000AAF aSigprocmask    db 'sigprocmask',0      ; DATA XREF: LOAD:0000000000000318↑o
LOAD:0000000000000ABB aSigfillset     db 'sigfillset',0       ; DATA XREF: LOAD:0000000000000678↑o
LOAD:0000000000000AC6 aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:00000000000004C8↑o
LOAD:0000000000000AD7 aIswprint       db 'iswprint',0         ; DATA XREF: LOAD:00000000000008D0↑o
LOAD:0000000000000AE0 aRealloc        db 'realloc',0          ; DATA XREF: LOAD:0000000000000720↑o
LOAD:0000000000000AE8 aAbort          db 'abort',0            ; DATA XREF: LOAD:0000000000000348↑o
LOAD:0000000000000AEE aExit           db '_exit',0            ; DATA XREF: LOAD:00000000000003A8↑o
LOAD:0000000000000AEE                                         ; LOAD:0000000000000840↑o
LOAD:0000000000000AF4 aStrspn         db 'strspn',0           ; DATA XREF: LOAD:0000000000000588↑o
LOAD:0000000000000AFB aProgramInvocat db 'program_invocation_name',0
LOAD:0000000000000AFB                                         ; DATA XREF: LOAD:00000000000009A8↑o
LOAD:0000000000000B13 aAssertFail     db '__assert_fail',0    ; DATA XREF: LOAD:0000000000000558↑o
LOAD:0000000000000B21 aCtypeGetMbCurM db '__ctype_get_mb_cur_max',0
LOAD:0000000000000B21                                         ; DATA XREF: LOAD:0000000000000480↑o
LOAD:0000000000000B38 aStrtok         db 'strtok',0           ; DATA XREF: LOAD:00000000000007B0↑o
LOAD:0000000000000B3F aStrtol         db 'strtol',0           ; DATA XREF: LOAD:0000000000000660↑o
LOAD:0000000000000B46 aCalloc         db 'calloc',0           ; DATA XREF: LOAD:00000000000005E8↑o
LOAD:0000000000000B4D aStrlen         db 'strlen',0           ; DATA XREF: LOAD:0000000000000498↑o
LOAD:0000000000000B54 aSigemptyset    db 'sigemptyset',0      ; DATA XREF: LOAD:0000000000000630↑o
LOAD:0000000000000B60 aMemset         db 'memset',0           ; DATA XREF: LOAD:0000000000000570↑o
LOAD:0000000000000B67 aErrnoLocation  db '__errno_location',0 ; DATA XREF: LOAD:0000000000000360↑o
LOAD:0000000000000B78 aChdir          db 'chdir',0            ; DATA XREF: LOAD:00000000000004B0↑o
LOAD:0000000000000B7E aMemcmp         db 'memcmp',0           ; DATA XREF: LOAD:00000000000005B8↑o
LOAD:0000000000000B85 aUnsetenv       db 'unsetenv',0         ; DATA XREF: LOAD:00000000000007C8↑o
LOAD:0000000000000B8E aFprintfChk     db '__fprintf_chk',0    ; DATA XREF: LOAD:0000000000000870↑o
LOAD:0000000000000B9C aSigaddset      db 'sigaddset',0        ; DATA XREF: LOAD:0000000000000900↑o
LOAD:0000000000000BA6 aPutenv         db 'putenv',0           ; DATA XREF: LOAD:0000000000000600↑o
LOAD:0000000000000BAD aStdout         db 'stdout',0           ; DATA XREF: LOAD:0000000000000948↑o
LOAD:0000000000000BB4 aLseek          db 'lseek',0            ; DATA XREF: LOAD:0000000000000540↑o
LOAD:0000000000000BBA aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:0000000000000690↑o
LOAD:0000000000000BC1 aFclose         db 'fclose',0           ; DATA XREF: LOAD:0000000000000420↑o
LOAD:0000000000000BC8 aMalloc         db 'malloc',0           ; DATA XREF: LOAD:00000000000006C0↑o
LOAD:0000000000000BCF aMbsinit        db 'mbsinit',0          ; DATA XREF: LOAD:00000000000008B8↑o
LOAD:0000000000000BD7 aNlLanginfo     db 'nl_langinfo',0      ; DATA XREF: LOAD:00000000000006F0↑o
LOAD:0000000000000BE3 aLibcCurrentSig db '__libc_current_sigrtmax',0
LOAD:0000000000000BE3                                         ; DATA XREF: LOAD:0000000000000888↑o
LOAD:0000000000000BFB aCtypeBLoc      db '__ctype_b_loc',0    ; DATA XREF: LOAD:0000000000000918↑o
LOAD:0000000000000C09 aGetenv         db 'getenv',0           ; DATA XREF: LOAD:0000000000000300↑o
LOAD:0000000000000C10 aOptarg         db 'optarg',0           ; DATA XREF: LOAD:0000000000000A38↑o
LOAD:0000000000000C17 aFreading       db '__freading',0       ; DATA XREF: LOAD:0000000000000708↑o
LOAD:0000000000000C22 aStderr         db 'stderr',0           ; DATA XREF: LOAD:0000000000000A08↑o
LOAD:0000000000000C29 aSigdelset      db 'sigdelset',0        ; DATA XREF: LOAD:0000000000000798↑o
LOAD:0000000000000C33 aGetoptLong     db 'getopt_long',0      ; DATA XREF: LOAD:00000000000004E0↑o
LOAD:0000000000000C3F aExecvp         db 'execvp',0           ; DATA XREF: LOAD:00000000000007E0↑o
LOAD:0000000000000C46 aFileno         db 'fileno',0           ; DATA XREF: LOAD:00000000000006A8↑o
LOAD:0000000000000C4D aFwrite         db 'fwrite',0           ; DATA XREF: LOAD:0000000000000858↑o
LOAD:0000000000000C54 aSigaction      db 'sigaction',0        ; DATA XREF: LOAD:00000000000003F0↑o
LOAD:0000000000000C5E aSigismember    db 'sigismember',0      ; DATA XREF: LOAD:0000000000000828↑o
LOAD:0000000000000C6A aFpending       db '__fpending',0       ; DATA XREF: LOAD:00000000000003D8↑o
LOAD:0000000000000C75 aStrchr         db 'strchr',0           ; DATA XREF: LOAD:0000000000000510↑o
LOAD:0000000000000C7C aProgramInvocat_0 db 'program_invocation_short_name',0
LOAD:0000000000000C7C                                         ; DATA XREF: LOAD:00000000000009F0↑o
LOAD:0000000000000C9A aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:00000000000008E8↑o
LOAD:0000000000000CA9 aLibcCurrentSig_0 db '__libc_current_sigrtmin',0
LOAD:0000000000000CA9                                         ; DATA XREF: LOAD:0000000000000810↑o
LOAD:0000000000000CC1 aSprintfChk     db '__sprintf_chk',0    ; DATA XREF: LOAD:0000000000000930↑o
LOAD:0000000000000CCF aBindtextdomain db 'bindtextdomain',0   ; DATA XREF: LOAD:0000000000000438↑o
LOAD:0000000000000CCF                                         ; LOAD:0000000000000408↑o
LOAD:0000000000000CDE aStrcmp         db 'strcmp',0           ; DATA XREF: LOAD:0000000000000618↑o
LOAD:0000000000000CE5 aLibcStartMain  db '__libc_start_main',0
LOAD:0000000000000CE5                                         ; DATA XREF: LOAD:00000000000005A0↑o
LOAD:0000000000000CF7 aStpcpy         db 'stpcpy',0           ; DATA XREF: LOAD:0000000000000450↑o
LOAD:0000000000000CFE aFseeko         db 'fseeko',0           ; DATA XREF: LOAD:0000000000000780↑o
LOAD:0000000000000D05 aFputsUnlocked  db 'fputs_unlocked',0   ; DATA XREF: LOAD:00000000000005D0↑o
LOAD:0000000000000D14 aFree           db 'free',0             ; DATA XREF: LOAD:0000000000000330↑o
LOAD:0000000000000D19 aProgname       db '__progname',0       ; DATA XREF: LOAD:0000000000000990↑o
LOAD:0000000000000D24 aEnviron        db '__environ',0        ; DATA XREF: LOAD:00000000000009D8↑o
LOAD:0000000000000D24                                         ; LOAD:0000000000000960↑o ...
LOAD:0000000000000D2E aPrognameFull   db '__progname_full',0  ; DATA XREF: LOAD:00000000000009C0↑o
LOAD:0000000000000D3E aCxaAtexit      db '__cxa_atexit',0     ; DATA XREF: LOAD:00000000000007F8↑o
LOAD:0000000000000D4B aGlibc23        db 'GLIBC_2.3',0        ; DATA XREF: LOAD:0000000000000E78↓o
LOAD:0000000000000D55 aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000000E88↓o
LOAD:0000000000000D61 aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:0000000000000E98↓o
LOAD:0000000000000D6C aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000000EA8↓o
LOAD:0000000000000D76 aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000000EB8↓o
LOAD:0000000000000D82 aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:0000000000000D82                                         ; DATA XREF: LOAD:0000000000000390↑o
LOAD:0000000000000D9E aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:0000000000000648↑o
LOAD:0000000000000DAD aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:0000000000000DAD                                         ; DATA XREF: LOAD:00000000000008A0↑o
LOAD:0000000000000DC7                 align 8
LOAD:0000000000000DC8 ; ELF GNU Symbol Version Table
LOAD:0000000000000DC8                 dw 0
LOAD:0000000000000DCA                 dw 2                    ; getenv@@GLIBC_2.2.5
LOAD:0000000000000DCC                 dw 2                    ; sigprocmask@@GLIBC_2.2.5
LOAD:0000000000000DCE                 dw 2                    ; free@@GLIBC_2.2.5
LOAD:0000000000000DD0                 dw 2                    ; abort@@GLIBC_2.2.5
LOAD:0000000000000DD2                 dw 2                    ; __errno_location@@GLIBC_2.2.5
LOAD:0000000000000DD4                 dw 2                    ; strncmp@@GLIBC_2.2.5
LOAD:0000000000000DD6                 dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
LOAD:0000000000000DD8                 dw 2                    ; _exit@@GLIBC_2.2.5
LOAD:0000000000000DDA                 dw 2                    ; strcpy@@GLIBC_2.2.5
LOAD:0000000000000DDC                 dw 2                    ; __fpending@@GLIBC_2.2.5
LOAD:0000000000000DDE                 dw 2                    ; sigaction@@GLIBC_2.2.5
LOAD:0000000000000DE0                 dw 2                    ; textdomain@@GLIBC_2.2.5
LOAD:0000000000000DE2                 dw 2                    ; fclose@@GLIBC_2.2.5
LOAD:0000000000000DE4                 dw 2                    ; bindtextdomain@@GLIBC_2.2.5
LOAD:0000000000000DE6                 dw 2                    ; stpcpy@@GLIBC_2.2.5
LOAD:0000000000000DE8                 dw 2                    ; dcgettext@@GLIBC_2.2.5
LOAD:0000000000000DEA                 dw 2                    ; __ctype_get_mb_cur_max@@GLIBC_2.2.5
LOAD:0000000000000DEC                 dw 2                    ; strlen@@GLIBC_2.2.5
LOAD:0000000000000DEE                 dw 2                    ; chdir@@GLIBC_2.2.5
LOAD:0000000000000DF0                 dw 3                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:0000000000000DF2                 dw 2                    ; getopt_long@@GLIBC_2.2.5
LOAD:0000000000000DF4                 dw 2                    ; mbrtowc@@GLIBC_2.2.5
LOAD:0000000000000DF6                 dw 2                    ; strchr@@GLIBC_2.2.5
LOAD:0000000000000DF8                 dw 2                    ; strrchr@@GLIBC_2.2.5
LOAD:0000000000000DFA                 dw 2                    ; lseek@@GLIBC_2.2.5
LOAD:0000000000000DFC                 dw 2                    ; __assert_fail@@GLIBC_2.2.5
LOAD:0000000000000DFE                 dw 2                    ; memset@@GLIBC_2.2.5
LOAD:0000000000000E00                 dw 2                    ; strspn@@GLIBC_2.2.5
LOAD:0000000000000E02                 dw 2                    ; __libc_start_main@@GLIBC_2.2.5
LOAD:0000000000000E04                 dw 2                    ; memcmp@@GLIBC_2.2.5
LOAD:0000000000000E06                 dw 2                    ; fputs_unlocked@@GLIBC_2.2.5
LOAD:0000000000000E08                 dw 2                    ; calloc@@GLIBC_2.2.5
LOAD:0000000000000E0A                 dw 2                    ; putenv@@GLIBC_2.2.5
LOAD:0000000000000E0C                 dw 2                    ; strcmp@@GLIBC_2.2.5
LOAD:0000000000000E0E                 dw 2                    ; sigemptyset@@GLIBC_2.2.5
LOAD:0000000000000E10                 dw 0                    ; local  symbol: __gmon_start__
LOAD:0000000000000E12                 dw 2                    ; strtol@@GLIBC_2.2.5
LOAD:0000000000000E14                 dw 2                    ; sigfillset@@GLIBC_2.2.5
LOAD:0000000000000E16                 dw 4                    ; memcpy@@GLIBC_2.14
LOAD:0000000000000E18                 dw 2                    ; fileno@@GLIBC_2.2.5
LOAD:0000000000000E1A                 dw 2                    ; malloc@@GLIBC_2.2.5
LOAD:0000000000000E1C                 dw 2                    ; fflush@@GLIBC_2.2.5
LOAD:0000000000000E1E                 dw 2                    ; nl_langinfo@@GLIBC_2.2.5
LOAD:0000000000000E20                 dw 2                    ; __freading@@GLIBC_2.2.5
LOAD:0000000000000E22                 dw 2                    ; realloc@@GLIBC_2.2.5
LOAD:0000000000000E24                 dw 2                    ; setlocale@@GLIBC_2.2.5
LOAD:0000000000000E26                 dw 5                    ; __printf_chk@@GLIBC_2.3.4
LOAD:0000000000000E28                 dw 2                    ; error@@GLIBC_2.2.5
LOAD:0000000000000E2A                 dw 2                    ; fseeko@@GLIBC_2.2.5
LOAD:0000000000000E2C                 dw 2                    ; sigdelset@@GLIBC_2.2.5
LOAD:0000000000000E2E                 dw 2                    ; strtok@@GLIBC_2.2.5
LOAD:0000000000000E30                 dw 2                    ; unsetenv@@GLIBC_2.2.5
LOAD:0000000000000E32                 dw 2                    ; execvp@@GLIBC_2.2.5
LOAD:0000000000000E34                 dw 2                    ; __cxa_atexit@@GLIBC_2.2.5
LOAD:0000000000000E36                 dw 2                    ; __libc_current_sigrtmin@@GLIBC_2.2.5
LOAD:0000000000000E38                 dw 2                    ; sigismember@@GLIBC_2.2.5
LOAD:0000000000000E3A                 dw 2                    ; exit@@GLIBC_2.2.5
LOAD:0000000000000E3C                 dw 2                    ; fwrite@@GLIBC_2.2.5
LOAD:0000000000000E3E                 dw 5                    ; __fprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000E40                 dw 2                    ; __libc_current_sigrtmax@@GLIBC_2.2.5
LOAD:0000000000000E42                 dw 0                    ; local  symbol: _ITM_registerTMCloneTable
LOAD:0000000000000E44                 dw 2                    ; mbsinit@@GLIBC_2.2.5
LOAD:0000000000000E46                 dw 2                    ; iswprint@@GLIBC_2.2.5
LOAD:0000000000000E48                 dw 2                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:0000000000000E4A                 dw 2                    ; sigaddset@@GLIBC_2.2.5
LOAD:0000000000000E4C                 dw 6                    ; __ctype_b_loc@@GLIBC_2.3
LOAD:0000000000000E4E                 dw 5                    ; __sprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000E50                 dw 2                    ; stdout@@GLIBC_2.2.5
LOAD:0000000000000E52                 dw 2                    ; _environ@@GLIBC_2.2.5
LOAD:0000000000000E54                 dw 2                    ; environ@@GLIBC_2.2.5
LOAD:0000000000000E56                 dw 2                    ; __progname@@GLIBC_2.2.5
LOAD:0000000000000E58                 dw 2                    ; program_invocation_name@@GLIBC_2.2.5
LOAD:0000000000000E5A                 dw 2                    ; __progname_full@@GLIBC_2.2.5
LOAD:0000000000000E5C                 dw 2                    ; __environ@@GLIBC_2.2.5
LOAD:0000000000000E5E                 dw 2                    ; program_invocation_short_name@@GLIBC_2.2.5
LOAD:0000000000000E60                 dw 2                    ; stderr@@GLIBC_2.2.5
LOAD:0000000000000E62                 dw 2                    ; optind@@GLIBC_2.2.5
LOAD:0000000000000E64                 dw 2                    ; optarg@@GLIBC_2.2.5
LOAD:0000000000000E66                 dw 0
LOAD:0000000000000E68 ; ELF GNU Symbol Version Requirements
LOAD:0000000000000E68                 Elf64_Verneed <1, 5, offset aLibcSo6 - offset byte_A50, 10h, 0> ; "libc.so.6"
LOAD:0000000000000E78                 Elf64_Vernaux <0D696913h, 0, 6, offset aGlibc23 - offset byte_A50, \ ; "GLIBC_2.3"
LOAD:0000000000000E78                                10h>
LOAD:0000000000000E88                 Elf64_Vernaux <9691974h, 0, 5, offset aGlibc234 - offset byte_A50, \ ; "GLIBC_2.3.4"
LOAD:0000000000000E88                                10h>
LOAD:0000000000000E98                 Elf64_Vernaux <6969194h, 0, 4, offset aGlibc214 - offset byte_A50, \ ; "GLIBC_2.14"
LOAD:0000000000000E98                                10h>
LOAD:0000000000000EA8                 Elf64_Vernaux <0D696914h, 0, 3, offset aGlibc24 - offset byte_A50, \ ; "GLIBC_2.4"
LOAD:0000000000000EA8                                10h>
LOAD:0000000000000EB8                 Elf64_Vernaux <9691A75h, 0, 2, offset aGlibc225 - offset byte_A50, 0> ; "GLIBC_2.2.5"
LOAD:0000000000000EC8 ; ELF RELA Relocation Table
LOAD:0000000000000EC8                 Elf64_Rela <2099D0h, 8, 31E0h> ; R_X86_64_RELATIVE +31E0h
LOAD:0000000000000EE0                 Elf64_Rela <2099D8h, 8, 31A0h> ; R_X86_64_RELATIVE +31A0h
LOAD:0000000000000EF8                 Elf64_Rela <2099E0h, 8, 6DF7h> ; R_X86_64_RELATIVE +6DF7h
LOAD:0000000000000F10                 Elf64_Rela <209A00h, 8, 6E0Ah> ; R_X86_64_RELATIVE +6E0Ah
LOAD:0000000000000F28                 Elf64_Rela <209A20h, 8, 6E0Fh> ; R_X86_64_RELATIVE +6E0Fh
LOAD:0000000000000F40                 Elf64_Rela <209A40h, 8, 6E15h> ; R_X86_64_RELATIVE +6E15h
LOAD:0000000000000F58                 Elf64_Rela <209A60h, 8, 6E1Bh> ; R_X86_64_RELATIVE +6E1Bh
LOAD:0000000000000F70                 Elf64_Rela <209A80h, 8, 6E2Ah> ; R_X86_64_RELATIVE +6E2Ah
LOAD:0000000000000F88                 Elf64_Rela <209AA0h, 8, 6E38h> ; R_X86_64_RELATIVE +6E38h
LOAD:0000000000000FA0                 Elf64_Rela <209AC0h, 8, 6E45h> ; R_X86_64_RELATIVE +6E45h
LOAD:0000000000000FB8                 Elf64_Rela <209AE0h, 8, 6E5Ah> ; R_X86_64_RELATIVE +6E5Ah
LOAD:0000000000000FD0                 Elf64_Rela <209B00h, 8, 6E60h> ; R_X86_64_RELATIVE +6E60h
LOAD:0000000000000FE8                 Elf64_Rela <209B20h, 8, 6E6Dh> ; R_X86_64_RELATIVE +6E6Dh
LOAD:0000000000001000                 Elf64_Rela <209B40h, 8, 6E72h> ; R_X86_64_RELATIVE +6E72h
LOAD:0000000000001018                 Elf64_Rela <209B80h, 8, 778Fh> ; R_X86_64_RELATIVE +778Fh
LOAD:0000000000001030                 Elf64_Rela <209B88h, 8, 7797h> ; R_X86_64_RELATIVE +7797h
LOAD:0000000000001048                 Elf64_Rela <209B90h, 8, 779Dh> ; R_X86_64_RELATIVE +779Dh
LOAD:0000000000001060                 Elf64_Rela <209B98h, 8, 77AAh> ; R_X86_64_RELATIVE +77AAh
LOAD:0000000000001078                 Elf64_Rela <209BA0h, 8, 77B7h> ; R_X86_64_RELATIVE +77B7h
LOAD:0000000000001090                 Elf64_Rela <209BA8h, 8, 6D8Ch> ; R_X86_64_RELATIVE +6D8Ch
LOAD:00000000000010A8                 Elf64_Rela <209BB0h, 8, 77CBh> ; R_X86_64_RELATIVE +77CBh
LOAD:00000000000010C0                 Elf64_Rela <209BB8h, 8, 77B0h> ; R_X86_64_RELATIVE +77B0h
LOAD:00000000000010D8                 Elf64_Rela <209BC0h, 8, 6C7Fh> ; R_X86_64_RELATIVE +6C7Fh
LOAD:00000000000010F0                 Elf64_Rela <209BC8h, 8, 77D3h> ; R_X86_64_RELATIVE +77D3h
LOAD:0000000000001108                 Elf64_Rela <20A008h, 8, 20A008h> ; R_X86_64_RELATIVE +20A008h
LOAD:0000000000001120                 Elf64_Rela <20A010h, 8, 7720h> ; R_X86_64_RELATIVE +7720h
LOAD:0000000000001138                 Elf64_Rela <20A060h, 8, 20A070h> ; R_X86_64_RELATIVE +20A070h
LOAD:0000000000001150                 Elf64_Rela <20A078h, 8, 20A420h> ; R_X86_64_RELATIVE +20A420h
LOAD:0000000000001168                 Elf64_Rela <209FD0h, 700000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:0000000000001180                 Elf64_Rela <209FD8h, 1D00000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:0000000000001198                 Elf64_Rela <209FE0h, 2400000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:00000000000011B0                 Elf64_Rela <209FE8h, 3D00000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:00000000000011C8                 Elf64_Rela <209FF0h, 4000000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:00000000000011E0                 Elf64_Rela <20A240h, 4700000005h, 0> ; R_X86_64_COPY __progname
LOAD:00000000000011F8                 Elf64_Rela <20A248h, 4400000005h, 0> ; R_X86_64_COPY stdout
LOAD:0000000000001210                 Elf64_Rela <20A250h, 4D00000005h, 0> ; R_X86_64_COPY optind
LOAD:0000000000001228                 Elf64_Rela <20A258h, 4A00000005h, 0> ; R_X86_64_COPY __environ
LOAD:0000000000001240                 Elf64_Rela <20A260h, 4E00000005h, 0> ; R_X86_64_COPY optarg
LOAD:0000000000001258                 Elf64_Rela <20A268h, 4900000005h, 0> ; R_X86_64_COPY __progname_full
LOAD:0000000000001270                 Elf64_Rela <20A280h, 4C00000005h, 0> ; R_X86_64_COPY stderr
LOAD:0000000000001288 ; ELF JMPREL Relocation Table
LOAD:0000000000001288                 Elf64_Rela <209DE0h, 100000007h, 0> ; R_X86_64_JUMP_SLOT getenv
LOAD:00000000000012A0                 Elf64_Rela <209DE8h, 200000007h, 0> ; R_X86_64_JUMP_SLOT sigprocmask
LOAD:00000000000012B8                 Elf64_Rela <209DF0h, 300000007h, 0> ; R_X86_64_JUMP_SLOT free
LOAD:00000000000012D0                 Elf64_Rela <209DF8h, 400000007h, 0> ; R_X86_64_JUMP_SLOT abort
LOAD:00000000000012E8                 Elf64_Rela <209E00h, 500000007h, 0> ; R_X86_64_JUMP_SLOT __errno_location
LOAD:0000000000001300                 Elf64_Rela <209E08h, 600000007h, 0> ; R_X86_64_JUMP_SLOT strncmp
LOAD:0000000000001318                 Elf64_Rela <209E10h, 800000007h, 0> ; R_X86_64_JUMP_SLOT _exit
LOAD:0000000000001330                 Elf64_Rela <209E18h, 900000007h, 0> ; R_X86_64_JUMP_SLOT strcpy
LOAD:0000000000001348                 Elf64_Rela <209E20h, 0A00000007h, 0> ; R_X86_64_JUMP_SLOT __fpending
LOAD:0000000000001360                 Elf64_Rela <209E28h, 0B00000007h, 0> ; R_X86_64_JUMP_SLOT sigaction
LOAD:0000000000001378                 Elf64_Rela <209E30h, 0C00000007h, 0> ; R_X86_64_JUMP_SLOT textdomain
LOAD:0000000000001390                 Elf64_Rela <209E38h, 0D00000007h, 0> ; R_X86_64_JUMP_SLOT fclose
LOAD:00000000000013A8                 Elf64_Rela <209E40h, 0E00000007h, 0> ; R_X86_64_JUMP_SLOT bindtextdomain
LOAD:00000000000013C0                 Elf64_Rela <209E48h, 0F00000007h, 0> ; R_X86_64_JUMP_SLOT stpcpy
LOAD:00000000000013D8                 Elf64_Rela <209E50h, 1000000007h, 0> ; R_X86_64_JUMP_SLOT dcgettext
LOAD:00000000000013F0                 Elf64_Rela <209E58h, 1100000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_get_mb_cur_max
LOAD:0000000000001408                 Elf64_Rela <209E60h, 1200000007h, 0> ; R_X86_64_JUMP_SLOT strlen
LOAD:0000000000001420                 Elf64_Rela <209E68h, 1300000007h, 0> ; R_X86_64_JUMP_SLOT chdir
LOAD:0000000000001438                 Elf64_Rela <209E70h, 1400000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
LOAD:0000000000001450                 Elf64_Rela <209E78h, 1500000007h, 0> ; R_X86_64_JUMP_SLOT getopt_long
LOAD:0000000000001468                 Elf64_Rela <209E80h, 1600000007h, 0> ; R_X86_64_JUMP_SLOT mbrtowc
LOAD:0000000000001480                 Elf64_Rela <209E88h, 1700000007h, 0> ; R_X86_64_JUMP_SLOT strchr
LOAD:0000000000001498                 Elf64_Rela <209E90h, 1800000007h, 0> ; R_X86_64_JUMP_SLOT strrchr
LOAD:00000000000014B0                 Elf64_Rela <209E98h, 1900000007h, 0> ; R_X86_64_JUMP_SLOT lseek
LOAD:00000000000014C8                 Elf64_Rela <209EA0h, 1A00000007h, 0> ; R_X86_64_JUMP_SLOT __assert_fail
LOAD:00000000000014E0                 Elf64_Rela <209EA8h, 1B00000007h, 0> ; R_X86_64_JUMP_SLOT memset
LOAD:00000000000014F8                 Elf64_Rela <209EB0h, 1C00000007h, 0> ; R_X86_64_JUMP_SLOT strspn
LOAD:0000000000001510                 Elf64_Rela <209EB8h, 1E00000007h, 0> ; R_X86_64_JUMP_SLOT memcmp
LOAD:0000000000001528                 Elf64_Rela <209EC0h, 1F00000007h, 0> ; R_X86_64_JUMP_SLOT fputs_unlocked
LOAD:0000000000001540                 Elf64_Rela <209EC8h, 2000000007h, 0> ; R_X86_64_JUMP_SLOT calloc
LOAD:0000000000001558                 Elf64_Rela <209ED0h, 2100000007h, 0> ; R_X86_64_JUMP_SLOT putenv
LOAD:0000000000001570                 Elf64_Rela <209ED8h, 2200000007h, 0> ; R_X86_64_JUMP_SLOT strcmp
LOAD:0000000000001588                 Elf64_Rela <209EE0h, 2300000007h, 0> ; R_X86_64_JUMP_SLOT sigemptyset
LOAD:00000000000015A0                 Elf64_Rela <209EE8h, 2500000007h, 0> ; R_X86_64_JUMP_SLOT strtol
LOAD:00000000000015B8                 Elf64_Rela <209EF0h, 2600000007h, 0> ; R_X86_64_JUMP_SLOT sigfillset
LOAD:00000000000015D0                 Elf64_Rela <209EF8h, 2700000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
LOAD:00000000000015E8                 Elf64_Rela <209F00h, 2800000007h, 0> ; R_X86_64_JUMP_SLOT fileno
LOAD:0000000000001600                 Elf64_Rela <209F08h, 2900000007h, 0> ; R_X86_64_JUMP_SLOT malloc
LOAD:0000000000001618                 Elf64_Rela <209F10h, 2A00000007h, 0> ; R_X86_64_JUMP_SLOT fflush
LOAD:0000000000001630                 Elf64_Rela <209F18h, 2B00000007h, 0> ; R_X86_64_JUMP_SLOT nl_langinfo
LOAD:0000000000001648                 Elf64_Rela <209F20h, 2C00000007h, 0> ; R_X86_64_JUMP_SLOT __freading
LOAD:0000000000001660                 Elf64_Rela <209F28h, 2D00000007h, 0> ; R_X86_64_JUMP_SLOT realloc
LOAD:0000000000001678                 Elf64_Rela <209F30h, 2E00000007h, 0> ; R_X86_64_JUMP_SLOT setlocale
LOAD:0000000000001690                 Elf64_Rela <209F38h, 2F00000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
LOAD:00000000000016A8                 Elf64_Rela <209F40h, 3000000007h, 0> ; R_X86_64_JUMP_SLOT error
LOAD:00000000000016C0                 Elf64_Rela <209F48h, 3100000007h, 0> ; R_X86_64_JUMP_SLOT fseeko
LOAD:00000000000016D8                 Elf64_Rela <209F50h, 3200000007h, 0> ; R_X86_64_JUMP_SLOT sigdelset
LOAD:00000000000016F0                 Elf64_Rela <209F58h, 3300000007h, 0> ; R_X86_64_JUMP_SLOT strtok
LOAD:0000000000001708                 Elf64_Rela <209F60h, 3400000007h, 0> ; R_X86_64_JUMP_SLOT unsetenv
LOAD:0000000000001720                 Elf64_Rela <209F68h, 3500000007h, 0> ; R_X86_64_JUMP_SLOT execvp
LOAD:0000000000001738                 Elf64_Rela <209F70h, 3600000007h, 0> ; R_X86_64_JUMP_SLOT __cxa_atexit
LOAD:0000000000001750                 Elf64_Rela <209F78h, 3700000007h, 0> ; R_X86_64_JUMP_SLOT __libc_current_sigrtmin
LOAD:0000000000001768                 Elf64_Rela <209F80h, 3800000007h, 0> ; R_X86_64_JUMP_SLOT sigismember
LOAD:0000000000001780                 Elf64_Rela <209F88h, 3900000007h, 0> ; R_X86_64_JUMP_SLOT exit
LOAD:0000000000001798                 Elf64_Rela <209F90h, 3A00000007h, 0> ; R_X86_64_JUMP_SLOT fwrite
LOAD:00000000000017B0                 Elf64_Rela <209F98h, 3B00000007h, 0> ; R_X86_64_JUMP_SLOT __fprintf_chk
LOAD:00000000000017C8                 Elf64_Rela <209FA0h, 3C00000007h, 0> ; R_X86_64_JUMP_SLOT __libc_current_sigrtmax
LOAD:00000000000017E0                 Elf64_Rela <209FA8h, 3E00000007h, 0> ; R_X86_64_JUMP_SLOT mbsinit
LOAD:00000000000017F8                 Elf64_Rela <209FB0h, 3F00000007h, 0> ; R_X86_64_JUMP_SLOT iswprint
LOAD:0000000000001810                 Elf64_Rela <209FB8h, 4100000007h, 0> ; R_X86_64_JUMP_SLOT sigaddset
LOAD:0000000000001828                 Elf64_Rela <209FC0h, 4200000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_b_loc
LOAD:0000000000001840                 Elf64_Rela <209FC8h, 4300000007h, 0> ; R_X86_64_JUMP_SLOT __sprintf_chk
LOAD:0000000000001840 LOAD            ends
LOAD:0000000000001840
.init:0000000000001858 ; ===========================================================================
.init:0000000000001858
.init:0000000000001858 ; Segment type: Pure code
.init:0000000000001858 ; Segment permissions: Read/Execute
.init:0000000000001858 _init           segment dword public 'CODE' use64
.init:0000000000001858                 assume cs:_init
.init:0000000000001858                 ;org 1858h
.init:0000000000001858                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:0000000000001858
.init:0000000000001858 ; =============== S U B R O U T I N E =======================================
.init:0000000000001858
.init:0000000000001858
.init:0000000000001858                 public _init_proc
.init:0000000000001858 _init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
.init:0000000000001858                 sub     rsp, 8          ; _init
.init:000000000000185C                 mov     rax, cs:__gmon_start___ptr
.init:0000000000001863                 test    rax, rax
.init:0000000000001866                 jz      short loc_186A
.init:0000000000001868                 call    rax ; __gmon_start__
.init:000000000000186A
.init:000000000000186A loc_186A:                               ; CODE XREF: _init_proc+E↑j
.init:000000000000186A                 add     rsp, 8
.init:000000000000186E                 retn
.init:000000000000186E _init_proc      endp
.init:000000000000186E
.init:000000000000186E _init           ends
.init:000000000000186E
LOAD:000000000000186F ; ===========================================================================
LOAD:000000000000186F
LOAD:000000000000186F ; Segment type: Pure code
LOAD:000000000000186F ; Segment permissions: Read/Execute
LOAD:000000000000186F LOAD            segment byte public 'CODE' use64
LOAD:000000000000186F                 assume cs:LOAD
LOAD:000000000000186F                 ;org 186Fh
LOAD:000000000000186F                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000186F                 align 10h
LOAD:000000000000186F LOAD            ends
LOAD:000000000000186F
.plt:0000000000001870 ; ===========================================================================
.plt:0000000000001870
.plt:0000000000001870 ; Segment type: Pure code
.plt:0000000000001870 ; Segment permissions: Read/Execute
.plt:0000000000001870 _plt            segment para public 'CODE' use64
.plt:0000000000001870                 assume cs:_plt
.plt:0000000000001870                 ;org 1870h
.plt:0000000000001870                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:0000000000001870
.plt:0000000000001870 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001870
.plt:0000000000001870
.plt:0000000000001870 sub_1870        proc near               ; CODE XREF: .plt:000000000000188B↓j
.plt:0000000000001870                                         ; .plt:000000000000189B↓j ...
.plt:0000000000001870 ; __unwind {
.plt:0000000000001870                 push    cs:qword_209DD0
.plt:0000000000001876                 jmp     cs:qword_209DD8
.plt:0000000000001876 sub_1870        endp
.plt:0000000000001876
.plt:0000000000001876 ; ---------------------------------------------------------------------------
.plt:000000000000187C                 align 20h
.plt:0000000000001880
.plt:0000000000001880 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001880
.plt:0000000000001880 ; Attributes: thunk
.plt:0000000000001880
.plt:0000000000001880 ; char *getenv(const char *name)
.plt:0000000000001880 _getenv         proc near               ; CODE XREF: main+6C4↓p
.plt:0000000000001880                                         ; main+78E↓p
.plt:0000000000001880                 jmp     cs:getenv_ptr
.plt:0000000000001880 _getenv         endp
.plt:0000000000001880
.plt:0000000000001886 ; ---------------------------------------------------------------------------
.plt:0000000000001886                 push    0
.plt:000000000000188B                 jmp     sub_1870
.plt:0000000000001890
.plt:0000000000001890 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001890
.plt:0000000000001890 ; Attributes: thunk
.plt:0000000000001890
.plt:0000000000001890 ; int sigprocmask(int how, const sigset_t *set, sigset_t *oset)
.plt:0000000000001890 _sigprocmask    proc near               ; CODE XREF: main+10A7↓p
.plt:0000000000001890                                         ; main+116E↓p ...
.plt:0000000000001890                 jmp     cs:sigprocmask_ptr
.plt:0000000000001890 _sigprocmask    endp
.plt:0000000000001890
.plt:0000000000001896 ; ---------------------------------------------------------------------------
.plt:0000000000001896                 push    1
.plt:000000000000189B                 jmp     sub_1870
.plt:00000000000018A0
.plt:00000000000018A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018A0
.plt:00000000000018A0 ; Attributes: thunk
.plt:00000000000018A0
.plt:00000000000018A0 ; void free(void *ptr)
.plt:00000000000018A0 _free           proc near               ; CODE XREF: parse_signal_action_params+F7↓j
.plt:00000000000018A0                                         ; parse_block_signal_params+14F↓j ...
.plt:00000000000018A0                 jmp     cs:free_ptr
.plt:00000000000018A0 _free           endp
.plt:00000000000018A0
.plt:00000000000018A6 ; ---------------------------------------------------------------------------
.plt:00000000000018A6                 push    2
.plt:00000000000018AB                 jmp     sub_1870
.plt:00000000000018B0
.plt:00000000000018B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018B0
.plt:00000000000018B0 ; Attributes: noreturn thunk
.plt:00000000000018B0
.plt:00000000000018B0 ; void __noreturn abort(void)
.plt:00000000000018B0 _abort          proc near               ; CODE XREF: set_program_name+9A↓p
.plt:00000000000018B0                                         ; quotearg_buffer_restyled:def_41A1↓p ...
.plt:00000000000018B0                 jmp     cs:abort_ptr
.plt:00000000000018B0 _abort          endp
.plt:00000000000018B0
.plt:00000000000018B6 ; ---------------------------------------------------------------------------
.plt:00000000000018B6                 push    3
.plt:00000000000018BB                 jmp     sub_1870
.plt:00000000000018C0
.plt:00000000000018C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018C0
.plt:00000000000018C0 ; Attributes: thunk
.plt:00000000000018C0
.plt:00000000000018C0 ; int *__errno_location(void)
.plt:00000000000018C0 ___errno_location proc near             ; CODE XREF: main:loc_2908↓p
.plt:00000000000018C0                                         ; main+124A↓p ...
.plt:00000000000018C0                 jmp     cs:__errno_location_ptr
.plt:00000000000018C0 ___errno_location endp
.plt:00000000000018C0
.plt:00000000000018C6 ; ---------------------------------------------------------------------------
.plt:00000000000018C6                 push    4
.plt:00000000000018CB                 jmp     sub_1870
.plt:00000000000018D0
.plt:00000000000018D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018D0
.plt:00000000000018D0 ; Attributes: thunk
.plt:00000000000018D0
.plt:00000000000018D0 ; int strncmp(const char *s1, const char *s2, size_t n)
.plt:00000000000018D0 _strncmp        proc near               ; CODE XREF: usage+39C↓p
.plt:00000000000018D0                                         ; usage+45D↓p
.plt:00000000000018D0                 jmp     cs:strncmp_ptr
.plt:00000000000018D0 _strncmp        endp
.plt:00000000000018D0
.plt:00000000000018D6 ; ---------------------------------------------------------------------------
.plt:00000000000018D6                 push    5
.plt:00000000000018DB                 jmp     sub_1870
.plt:00000000000018E0
.plt:00000000000018E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018E0
.plt:00000000000018E0 ; Attributes: noreturn thunk
.plt:00000000000018E0
.plt:00000000000018E0 ; void __noreturn _exit(int status)
.plt:00000000000018E0 __exit          proc near               ; CODE XREF: close_stdout+88↓p
.plt:00000000000018E0                 jmp     cs:_exit_ptr
.plt:00000000000018E0 __exit          endp
.plt:00000000000018E0
.plt:00000000000018E6 ; ---------------------------------------------------------------------------
.plt:00000000000018E6                 push    6
.plt:00000000000018EB                 jmp     sub_1870
.plt:00000000000018F0
.plt:00000000000018F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018F0
.plt:00000000000018F0 ; Attributes: thunk
.plt:00000000000018F0
.plt:00000000000018F0 ; char *strcpy(char *dest, const char *src)
.plt:00000000000018F0 _strcpy         proc near               ; CODE XREF: sig2str+39↓p
.plt:00000000000018F0                 jmp     cs:strcpy_ptr
.plt:00000000000018F0 _strcpy         endp
.plt:00000000000018F0
.plt:00000000000018F6 ; ---------------------------------------------------------------------------
.plt:00000000000018F6                 push    7
.plt:00000000000018FB                 jmp     sub_1870
.plt:0000000000001900
.plt:0000000000001900 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001900
.plt:0000000000001900 ; Attributes: thunk
.plt:0000000000001900
.plt:0000000000001900 ; size_t __fpending(FILE *fp)
.plt:0000000000001900 ___fpending     proc near               ; CODE XREF: close_stream+7↓p
.plt:0000000000001900                 jmp     cs:__fpending_ptr
.plt:0000000000001900 ___fpending     endp
.plt:0000000000001900
.plt:0000000000001906 ; ---------------------------------------------------------------------------
.plt:0000000000001906                 push    8
.plt:000000000000190B                 jmp     sub_1870
.plt:0000000000001910
.plt:0000000000001910 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001910
.plt:0000000000001910 ; Attributes: thunk
.plt:0000000000001910
.plt:0000000000001910 ; int sigaction(int sig, const struct sigaction *act, struct sigaction *oact)
.plt:0000000000001910 _sigaction      proc near               ; CODE XREF: main+B9F↓p
.plt:0000000000001910                                         ; main+BCD↓p ...
.plt:0000000000001910                 jmp     cs:sigaction_ptr
.plt:0000000000001910 _sigaction      endp
.plt:0000000000001910
.plt:0000000000001916 ; ---------------------------------------------------------------------------
.plt:0000000000001916                 push    9
.plt:000000000000191B                 jmp     sub_1870
.plt:0000000000001920
.plt:0000000000001920 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001920
.plt:0000000000001920 ; Attributes: thunk
.plt:0000000000001920
.plt:0000000000001920 ; char *textdomain(const char *domainname)
.plt:0000000000001920 _textdomain     proc near               ; CODE XREF: main+5E↓p
.plt:0000000000001920                 jmp     cs:textdomain_ptr
.plt:0000000000001920 _textdomain     endp
.plt:0000000000001920
.plt:0000000000001926 ; ---------------------------------------------------------------------------
.plt:0000000000001926                 push    0Ah
.plt:000000000000192B                 jmp     sub_1870
.plt:0000000000001930
.plt:0000000000001930 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001930
.plt:0000000000001930 ; Attributes: thunk
.plt:0000000000001930
.plt:0000000000001930 ; int fclose(FILE *stream)
.plt:0000000000001930 _fclose         proc near               ; CODE XREF: rpl_fclose+36↓p
.plt:0000000000001930                                         ; rpl_fclose+6B↓j
.plt:0000000000001930                 jmp     cs:fclose_ptr
.plt:0000000000001930 _fclose         endp
.plt:0000000000001930
.plt:0000000000001936 ; ---------------------------------------------------------------------------
.plt:0000000000001936                 push    0Bh
.plt:000000000000193B                 jmp     sub_1870
.plt:0000000000001940
.plt:0000000000001940 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001940
.plt:0000000000001940 ; Attributes: thunk
.plt:0000000000001940
.plt:0000000000001940 ; char *bindtextdomain(const char *domainname, const char *dirname)
.plt:0000000000001940 _bindtextdomain proc near               ; CODE XREF: main+52↓p
.plt:0000000000001940                 jmp     cs:bindtextdomain_ptr
.plt:0000000000001940 _bindtextdomain endp
.plt:0000000000001940
.plt:0000000000001946 ; ---------------------------------------------------------------------------
.plt:0000000000001946                 push    0Ch
.plt:000000000000194B                 jmp     sub_1870
.plt:0000000000001950
.plt:0000000000001950 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001950
.plt:0000000000001950 ; Attributes: thunk
.plt:0000000000001950
.plt:0000000000001950 ; char *stpcpy(char *dest, const char *src)
.plt:0000000000001950 _stpcpy         proc near               ; CODE XREF: main+7F9↓p
.plt:0000000000001950                 jmp     cs:stpcpy_ptr
.plt:0000000000001950 _stpcpy         endp
.plt:0000000000001950
.plt:0000000000001956 ; ---------------------------------------------------------------------------
.plt:0000000000001956                 push    0Dh
.plt:000000000000195B                 jmp     sub_1870
.plt:0000000000001960
.plt:0000000000001960 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001960
.plt:0000000000001960 ; Attributes: thunk
.plt:0000000000001960
.plt:0000000000001960 ; char *dcgettext(const char *domainname, const char *msgid, int category)
.plt:0000000000001960 _dcgettext      proc near               ; CODE XREF: main+2B3↓p
.plt:0000000000001960                                         ; main+E54↓p ...
.plt:0000000000001960                 jmp     cs:dcgettext_ptr
.plt:0000000000001960 _dcgettext      endp
.plt:0000000000001960
.plt:0000000000001966 ; ---------------------------------------------------------------------------
.plt:0000000000001966                 push    0Eh
.plt:000000000000196B                 jmp     sub_1870
.plt:0000000000001970
.plt:0000000000001970 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001970
.plt:0000000000001970 ; Attributes: thunk
.plt:0000000000001970
.plt:0000000000001970 ; size_t __ctype_get_mb_cur_max(void)
.plt:0000000000001970 ___ctype_get_mb_cur_max proc near       ; CODE XREF: quotearg_buffer_restyled+6C↓p
.plt:0000000000001970                 jmp     cs:__ctype_get_mb_cur_max_ptr
.plt:0000000000001970 ___ctype_get_mb_cur_max endp
.plt:0000000000001970
.plt:0000000000001976 ; ---------------------------------------------------------------------------
.plt:0000000000001976                 push    0Fh
.plt:000000000000197B                 jmp     sub_1870
.plt:0000000000001980
.plt:0000000000001980 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001980
.plt:0000000000001980 ; Attributes: thunk
.plt:0000000000001980
.plt:0000000000001980 ; size_t strlen(const char *s)
.plt:0000000000001980 _strlen         proc near               ; CODE XREF: quotearg_buffer_restyled+157↓p
.plt:0000000000001980                                         ; quotearg_buffer_restyled+8DB↓p ...
.plt:0000000000001980                 jmp     cs:strlen_ptr
.plt:0000000000001980 _strlen         endp
.plt:0000000000001980
.plt:0000000000001986 ; ---------------------------------------------------------------------------
.plt:0000000000001986                 push    10h
.plt:000000000000198B                 jmp     sub_1870
.plt:0000000000001990
.plt:0000000000001990 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001990
.plt:0000000000001990 ; Attributes: thunk
.plt:0000000000001990
.plt:0000000000001990 ; int chdir(const char *path)
.plt:0000000000001990 _chdir          proc near               ; CODE XREF: main+CDC↓p
.plt:0000000000001990                 jmp     cs:chdir_ptr
.plt:0000000000001990 _chdir          endp
.plt:0000000000001990
.plt:0000000000001996 ; ---------------------------------------------------------------------------
.plt:0000000000001996                 push    11h
.plt:000000000000199B                 jmp     sub_1870
.plt:00000000000019A0
.plt:00000000000019A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019A0
.plt:00000000000019A0 ; Attributes: noreturn thunk
.plt:00000000000019A0
.plt:00000000000019A0 ___stack_chk_fail proc near             ; CODE XREF: main:loc_2FF5↓p
.plt:00000000000019A0                                         ; list_signal_handling:loc_3481↓p ...
.plt:00000000000019A0                 jmp     cs:__stack_chk_fail_ptr
.plt:00000000000019A0 ___stack_chk_fail endp
.plt:00000000000019A0
.plt:00000000000019A6 ; ---------------------------------------------------------------------------
.plt:00000000000019A6                 push    12h
.plt:00000000000019AB                 jmp     sub_1870
.plt:00000000000019B0
.plt:00000000000019B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019B0
.plt:00000000000019B0 ; Attributes: thunk
.plt:00000000000019B0
.plt:00000000000019B0 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
.plt:00000000000019B0 _getopt_long    proc near               ; CODE XREF: main+D8↓p
.plt:00000000000019B0                 jmp     cs:getopt_long_ptr
.plt:00000000000019B0 _getopt_long    endp
.plt:00000000000019B0
.plt:00000000000019B6 ; ---------------------------------------------------------------------------
.plt:00000000000019B6                 push    13h
.plt:00000000000019BB                 jmp     sub_1870
.plt:00000000000019C0
.plt:00000000000019C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019C0
.plt:00000000000019C0 ; Attributes: thunk
.plt:00000000000019C0
.plt:00000000000019C0 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
.plt:00000000000019C0 _mbrtowc        proc near               ; CODE XREF: rpl_mbrtowc+32↓p
.plt:00000000000019C0                 jmp     cs:mbrtowc_ptr
.plt:00000000000019C0 _mbrtowc        endp
.plt:00000000000019C0
.plt:00000000000019C6 ; ---------------------------------------------------------------------------
.plt:00000000000019C6                 push    14h
.plt:00000000000019CB                 jmp     sub_1870
.plt:00000000000019D0
.plt:00000000000019D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019D0
.plt:00000000000019D0 ; Attributes: thunk
.plt:00000000000019D0
.plt:00000000000019D0 ; char *strchr(const char *s, int c)
.plt:00000000000019D0 _strchr         proc near               ; CODE XREF: main+831↓p
.plt:00000000000019D0                                         ; main+9C1↓p ...
.plt:00000000000019D0                 jmp     cs:strchr_ptr
.plt:00000000000019D0 _strchr         endp
.plt:00000000000019D0
.plt:00000000000019D6 ; ---------------------------------------------------------------------------
.plt:00000000000019D6                 push    15h
.plt:00000000000019DB                 jmp     sub_1870
.plt:00000000000019E0
.plt:00000000000019E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019E0
.plt:00000000000019E0 ; Attributes: thunk
.plt:00000000000019E0
.plt:00000000000019E0 ; char *strrchr(const char *s, int c)
.plt:00000000000019E0 _strrchr        proc near               ; CODE XREF: set_program_name+E↓p
.plt:00000000000019E0                 jmp     cs:strrchr_ptr
.plt:00000000000019E0 _strrchr        endp
.plt:00000000000019E0
.plt:00000000000019E6 ; ---------------------------------------------------------------------------
.plt:00000000000019E6                 push    16h
.plt:00000000000019EB                 jmp     sub_1870
.plt:00000000000019F0
.plt:00000000000019F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019F0
.plt:00000000000019F0 ; Attributes: thunk
.plt:00000000000019F0
.plt:00000000000019F0 ; __off_t lseek(int fd, __off_t offset, int whence)
.plt:00000000000019F0 _lseek          proc near               ; CODE XREF: rpl_fclose+59↓p
.plt:00000000000019F0                                         ; rpl_fseeko+3B↓p
.plt:00000000000019F0                 jmp     cs:lseek_ptr
.plt:00000000000019F0 _lseek          endp
.plt:00000000000019F0
.plt:00000000000019F6 ; ---------------------------------------------------------------------------
.plt:00000000000019F6                 push    17h
.plt:00000000000019FB                 jmp     sub_1870
.plt:0000000000001A00
.plt:0000000000001A00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A00
.plt:0000000000001A00 ; Attributes: noreturn thunk
.plt:0000000000001A00
.plt:0000000000001A00 ; void __noreturn __assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
.plt:0000000000001A00 ___assert_fail  proc near               ; CODE XREF: main+12E5↓p
.plt:0000000000001A00                                         ; main+1304↓p ...
.plt:0000000000001A00                 jmp     cs:__assert_fail_ptr
.plt:0000000000001A00 ___assert_fail  endp
.plt:0000000000001A00
.plt:0000000000001A06 ; ---------------------------------------------------------------------------
.plt:0000000000001A06                 push    18h
.plt:0000000000001A0B                 jmp     sub_1870
.plt:0000000000001A10
.plt:0000000000001A10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A10
.plt:0000000000001A10 ; Attributes: thunk
.plt:0000000000001A10
.plt:0000000000001A10 ; void *memset(void *s, int c, size_t n)
.plt:0000000000001A10 _memset         proc near               ; CODE XREF: quotearg_n_options+99↓p
.plt:0000000000001A10                                         ; xzalloc+12↓j
.plt:0000000000001A10                 jmp     cs:memset_ptr
.plt:0000000000001A10 _memset         endp
.plt:0000000000001A10
.plt:0000000000001A16 ; ---------------------------------------------------------------------------
.plt:0000000000001A16                 push    19h
.plt:0000000000001A1B                 jmp     sub_1870
.plt:0000000000001A20
.plt:0000000000001A20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A20
.plt:0000000000001A20 ; Attributes: thunk
.plt:0000000000001A20
.plt:0000000000001A20 ; size_t strspn(const char *s, const char *accept)
.plt:0000000000001A20 _strspn         proc near               ; CODE XREF: main+732↓p
.plt:0000000000001A20                 jmp     cs:strspn_ptr
.plt:0000000000001A20 _strspn         endp
.plt:0000000000001A20
.plt:0000000000001A26 ; ---------------------------------------------------------------------------
.plt:0000000000001A26                 push    1Ah
.plt:0000000000001A2B                 jmp     sub_1870
.plt:0000000000001A30
.plt:0000000000001A30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A30
.plt:0000000000001A30 ; Attributes: thunk
.plt:0000000000001A30
.plt:0000000000001A30 ; int memcmp(const void *s1, const void *s2, size_t n)
.plt:0000000000001A30 _memcmp         proc near               ; CODE XREF: quotearg_buffer_restyled+19A↓p
.plt:0000000000001A30                 jmp     cs:memcmp_ptr
.plt:0000000000001A30 _memcmp         endp
.plt:0000000000001A30
.plt:0000000000001A36 ; ---------------------------------------------------------------------------
.plt:0000000000001A36                 push    1Bh
.plt:0000000000001A3B                 jmp     sub_1870
.plt:0000000000001A40
.plt:0000000000001A40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A40
.plt:0000000000001A40 ; Attributes: thunk
.plt:0000000000001A40
.plt:0000000000001A40 ; int fputs_unlocked(const char *s, FILE *stream)
.plt:0000000000001A40 _fputs_unlocked proc near               ; CODE XREF: usage+9D↓p
.plt:0000000000001A40                                         ; usage+C2↓p ...
.plt:0000000000001A40                 jmp     cs:fputs_unlocked_ptr
.plt:0000000000001A40 _fputs_unlocked endp
.plt:0000000000001A40
.plt:0000000000001A46 ; ---------------------------------------------------------------------------
.plt:0000000000001A46                 push    1Ch
.plt:0000000000001A4B                 jmp     sub_1870
.plt:0000000000001A50
.plt:0000000000001A50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A50
.plt:0000000000001A50 ; Attributes: thunk
.plt:0000000000001A50
.plt:0000000000001A50 ; void *calloc(size_t nmemb, size_t size)
.plt:0000000000001A50 _calloc         proc near               ; CODE XREF: xcalloc+1A↓p
.plt:0000000000001A50                 jmp     cs:calloc_ptr
.plt:0000000000001A50 _calloc         endp
.plt:0000000000001A50
.plt:0000000000001A56 ; ---------------------------------------------------------------------------
.plt:0000000000001A56                 push    1Dh
.plt:0000000000001A5B                 jmp     sub_1870
.plt:0000000000001A60
.plt:0000000000001A60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A60
.plt:0000000000001A60 ; Attributes: thunk
.plt:0000000000001A60
.plt:0000000000001A60 ; int putenv(char *string)
.plt:0000000000001A60 _putenv         proc near               ; CODE XREF: main+98B↓p
.plt:0000000000001A60                 jmp     cs:putenv_ptr
.plt:0000000000001A60 _putenv         endp
.plt:0000000000001A60
.plt:0000000000001A66 ; ---------------------------------------------------------------------------
.plt:0000000000001A66                 push    1Eh
.plt:0000000000001A6B                 jmp     sub_1870
.plt:0000000000001A70
.plt:0000000000001A70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A70
.plt:0000000000001A70 ; Attributes: thunk
.plt:0000000000001A70
.plt:0000000000001A70 ; int strcmp(const char *s1, const char *s2)
.plt:0000000000001A70 _strcmp         proc near               ; CODE XREF: main+A4D↓p
.plt:0000000000001A70                                         ; str2sig+52↓p
.plt:0000000000001A70                 jmp     cs:strcmp_ptr
.plt:0000000000001A70 _strcmp         endp
.plt:0000000000001A70
.plt:0000000000001A76 ; ---------------------------------------------------------------------------
.plt:0000000000001A76                 push    1Fh
.plt:0000000000001A7B                 jmp     sub_1870
.plt:0000000000001A80
.plt:0000000000001A80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A80
.plt:0000000000001A80 ; Attributes: thunk
.plt:0000000000001A80
.plt:0000000000001A80 ; int sigemptyset(sigset_t *set)
.plt:0000000000001A80 _sigemptyset    proc near               ; CODE XREF: main+109B↓p
.plt:0000000000001A80                                         ; list_signal_handling+31↓p ...
.plt:0000000000001A80                 jmp     cs:sigemptyset_ptr
.plt:0000000000001A80 _sigemptyset    endp
.plt:0000000000001A80
.plt:0000000000001A86 ; ---------------------------------------------------------------------------
.plt:0000000000001A86                 push    20h ; ' '
.plt:0000000000001A8B                 jmp     sub_1870
.plt:0000000000001A90
.plt:0000000000001A90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A90
.plt:0000000000001A90 ; Attributes: thunk
.plt:0000000000001A90
.plt:0000000000001A90 ; __int64 strtol(const char *nptr, char **endptr, int base)
.plt:0000000000001A90 _strtol         proc near               ; CODE XREF: operand2sig+4E↓p
.plt:0000000000001A90                                         ; str2sig+98↓p ...
.plt:0000000000001A90                 jmp     cs:strtol_ptr
.plt:0000000000001A90 _strtol         endp
.plt:0000000000001A90
.plt:0000000000001A96 ; ---------------------------------------------------------------------------
.plt:0000000000001A96                 push    21h ; '!'
.plt:0000000000001A9B                 jmp     sub_1870
.plt:0000000000001AA0
.plt:0000000000001AA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AA0
.plt:0000000000001AA0 ; Attributes: thunk
.plt:0000000000001AA0
.plt:0000000000001AA0 ; int sigfillset(sigset_t *set)
.plt:0000000000001AA0 _sigfillset     proc near               ; CODE XREF: parse_block_signal_params+184↓p
.plt:0000000000001AA0                                         ; parse_block_signal_params+1C7↓p
.plt:0000000000001AA0                 jmp     cs:sigfillset_ptr
.plt:0000000000001AA0 _sigfillset     endp
.plt:0000000000001AA0
.plt:0000000000001AA6 ; ---------------------------------------------------------------------------
.plt:0000000000001AA6                 push    22h ; '"'
.plt:0000000000001AAB                 jmp     sub_1870
.plt:0000000000001AB0
.plt:0000000000001AB0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AB0
.plt:0000000000001AB0 ; Attributes: thunk
.plt:0000000000001AB0
.plt:0000000000001AB0 ; void *memcpy(void *dest, const void *src, size_t n)
.plt:0000000000001AB0 _memcpy         proc near               ; CODE XREF: extract_varname+94↓p
.plt:0000000000001AB0                                         ; xmemdup+23↓j
.plt:0000000000001AB0                 jmp     cs:memcpy_ptr
.plt:0000000000001AB0 _memcpy         endp
.plt:0000000000001AB0
.plt:0000000000001AB6 ; ---------------------------------------------------------------------------
.plt:0000000000001AB6                 push    23h ; '#'
.plt:0000000000001ABB                 jmp     sub_1870
.plt:0000000000001AC0
.plt:0000000000001AC0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AC0
.plt:0000000000001AC0 ; Attributes: thunk
.plt:0000000000001AC0
.plt:0000000000001AC0 ; int fileno(FILE *stream)
.plt:0000000000001AC0 _fileno         proc near               ; CODE XREF: rpl_fclose+7↓p
.plt:0000000000001AC0                                         ; rpl_fclose+4B↓p ...
.plt:0000000000001AC0                 jmp     cs:fileno_ptr
.plt:0000000000001AC0 _fileno         endp
.plt:0000000000001AC0
.plt:0000000000001AC6 ; ---------------------------------------------------------------------------
.plt:0000000000001AC6                 push    24h ; '$'
.plt:0000000000001ACB                 jmp     sub_1870
.plt:0000000000001AD0
.plt:0000000000001AD0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AD0
.plt:0000000000001AD0 ; Attributes: thunk
.plt:0000000000001AD0
.plt:0000000000001AD0 ; void *malloc(size_t size)
.plt:0000000000001AD0 _malloc         proc near               ; CODE XREF: xmalloc+4↓p
.plt:0000000000001AD0                 jmp     cs:malloc_ptr
.plt:0000000000001AD0 _malloc         endp
.plt:0000000000001AD0
.plt:0000000000001AD6 ; ---------------------------------------------------------------------------
.plt:0000000000001AD6                 push    25h ; '%'
.plt:0000000000001ADB                 jmp     sub_1870
.plt:0000000000001AE0
.plt:0000000000001AE0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AE0
.plt:0000000000001AE0 ; Attributes: thunk
.plt:0000000000001AE0
.plt:0000000000001AE0 ; int fflush(FILE *stream)
.plt:0000000000001AE0 _fflush         proc near               ; CODE XREF: rpl_fflush+1E↓j
.plt:0000000000001AE0                                         ; rpl_fflush+3B↓j
.plt:0000000000001AE0                 jmp     cs:fflush_ptr
.plt:0000000000001AE0 _fflush         endp
.plt:0000000000001AE0
.plt:0000000000001AE6 ; ---------------------------------------------------------------------------
.plt:0000000000001AE6                 push    26h ; '&'
.plt:0000000000001AEB                 jmp     sub_1870
.plt:0000000000001AF0
.plt:0000000000001AF0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AF0
.plt:0000000000001AF0 ; Attributes: thunk
.plt:0000000000001AF0
.plt:0000000000001AF0 ; char *nl_langinfo(nl_item item)
.plt:0000000000001AF0 _nl_langinfo    proc near               ; CODE XREF: locale_charset+9↓p
.plt:0000000000001AF0                 jmp     cs:nl_langinfo_ptr
.plt:0000000000001AF0 _nl_langinfo    endp
.plt:0000000000001AF0
.plt:0000000000001AF6 ; ---------------------------------------------------------------------------
.plt:0000000000001AF6                 push    27h ; '''
.plt:0000000000001AFB                 jmp     sub_1870
.plt:0000000000001B00
.plt:0000000000001B00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B00
.plt:0000000000001B00 ; Attributes: thunk
.plt:0000000000001B00
.plt:0000000000001B00 ; int __freading(FILE *fp)
.plt:0000000000001B00 ___freading     proc near               ; CODE XREF: rpl_fclose+13↓p
.plt:0000000000001B00                                         ; rpl_fflush+9↓p
.plt:0000000000001B00                 jmp     cs:__freading_ptr
.plt:0000000000001B00 ___freading     endp
.plt:0000000000001B00
.plt:0000000000001B06 ; ---------------------------------------------------------------------------
.plt:0000000000001B06                 push    28h ; '('
.plt:0000000000001B0B                 jmp     sub_1870
.plt:0000000000001B10
.plt:0000000000001B10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B10
.plt:0000000000001B10 ; Attributes: thunk
.plt:0000000000001B10
.plt:0000000000001B10 ; void *realloc(void *ptr, size_t size)
.plt:0000000000001B10 _realloc        proc near               ; CODE XREF: xrealloc+11↓p
.plt:0000000000001B10                 jmp     cs:realloc_ptr
.plt:0000000000001B10 _realloc        endp
.plt:0000000000001B10
.plt:0000000000001B16 ; ---------------------------------------------------------------------------
.plt:0000000000001B16                 push    29h ; ')'
.plt:0000000000001B1B                 jmp     sub_1870
.plt:0000000000001B20
.plt:0000000000001B20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B20
.plt:0000000000001B20 ; Attributes: thunk
.plt:0000000000001B20
.plt:0000000000001B20 ; char *setlocale(int category, const char *locale)
.plt:0000000000001B20 _setlocale      proc near               ; CODE XREF: main+3F↓p
.plt:0000000000001B20                                         ; usage+383↓p ...
.plt:0000000000001B20                 jmp     cs:setlocale_ptr
.plt:0000000000001B20 _setlocale      endp
.plt:0000000000001B20
.plt:0000000000001B26 ; ---------------------------------------------------------------------------
.plt:0000000000001B26                 push    2Ah ; '*'
.plt:0000000000001B2B                 jmp     sub_1870
.plt:0000000000001B30
.plt:0000000000001B30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B30
.plt:0000000000001B30 ; Attributes: thunk
.plt:0000000000001B30
.plt:0000000000001B30 ___printf_chk   proc near               ; CODE XREF: main+B08↓p
.plt:0000000000001B30                                         ; usage+78↓p ...
.plt:0000000000001B30                 jmp     cs:__printf_chk_ptr
.plt:0000000000001B30 ___printf_chk   endp
.plt:0000000000001B30
.plt:0000000000001B36 ; ---------------------------------------------------------------------------
.plt:0000000000001B36                 push    2Bh ; '+'
.plt:0000000000001B3B                 jmp     sub_1870
.plt:0000000000001B40
.plt:0000000000001B40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B40
.plt:0000000000001B40 ; Attributes: thunk
.plt:0000000000001B40
.plt:0000000000001B40 ; void error(int status, int errnum, const char *format, ...)
.plt:0000000000001B40 _error          proc near               ; CODE XREF: main+2C8↓p
.plt:0000000000001B40                                         ; main+D3F↓p ...
.plt:0000000000001B40                 jmp     cs:error_ptr
.plt:0000000000001B40 _error          endp
.plt:0000000000001B40
.plt:0000000000001B46 ; ---------------------------------------------------------------------------
.plt:0000000000001B46                 push    2Ch ; ','
.plt:0000000000001B4B                 jmp     sub_1870
.plt:0000000000001B50
.plt:0000000000001B50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B50
.plt:0000000000001B50 ; Attributes: thunk
.plt:0000000000001B50
.plt:0000000000001B50 ; int fseeko(FILE *stream, __off_t off, int whence)
.plt:0000000000001B50 _fseeko         proc near               ; CODE XREF: rpl_fseeko:loc_6A4A↓j
.plt:0000000000001B50                 jmp     cs:fseeko_ptr
.plt:0000000000001B50 _fseeko         endp
.plt:0000000000001B50
.plt:0000000000001B56 ; ---------------------------------------------------------------------------
.plt:0000000000001B56                 push    2Dh ; '-'
.plt:0000000000001B5B                 jmp     sub_1870
.plt:0000000000001B60
.plt:0000000000001B60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B60
.plt:0000000000001B60 ; Attributes: thunk
.plt:0000000000001B60
.plt:0000000000001B60 ; int sigdelset(sigset_t *set, int signo)
.plt:0000000000001B60 _sigdelset      proc near               ; CODE XREF: main+1120↓p
.plt:0000000000001B60                                         ; parse_block_signal_params+9F↓p
.plt:0000000000001B60                 jmp     cs:sigdelset_ptr
.plt:0000000000001B60 _sigdelset      endp
.plt:0000000000001B60
.plt:0000000000001B66 ; ---------------------------------------------------------------------------
.plt:0000000000001B66                 push    2Eh ; '.'
.plt:0000000000001B6B                 jmp     sub_1870
.plt:0000000000001B70
.plt:0000000000001B70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B70
.plt:0000000000001B70 ; Attributes: thunk
.plt:0000000000001B70
.plt:0000000000001B70 ; char *strtok(char *s, const char *delim)
.plt:0000000000001B70 _strtok         proc near               ; CODE XREF: parse_signal_action_params+39↓p
.plt:0000000000001B70                                         ; parse_signal_action_params+7B↓p ...
.plt:0000000000001B70                 jmp     cs:strtok_ptr
.plt:0000000000001B70 _strtok         endp
.plt:0000000000001B70
.plt:0000000000001B76 ; ---------------------------------------------------------------------------
.plt:0000000000001B76                 push    2Fh ; '/'
.plt:0000000000001B7B                 jmp     sub_1870
.plt:0000000000001B80
.plt:0000000000001B80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B80
.plt:0000000000001B80 ; Attributes: thunk
.plt:0000000000001B80
.plt:0000000000001B80 ; int unsetenv(const char *name)
.plt:0000000000001B80 _unsetenv       proc near               ; CODE XREF: main+D7D↓p
.plt:0000000000001B80                 jmp     cs:unsetenv_ptr
.plt:0000000000001B80 _unsetenv       endp
.plt:0000000000001B80
.plt:0000000000001B86 ; ---------------------------------------------------------------------------
.plt:0000000000001B86                 push    30h ; '0'
.plt:0000000000001B8B                 jmp     sub_1870
.plt:0000000000001B90
.plt:0000000000001B90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B90
.plt:0000000000001B90 ; Attributes: thunk
.plt:0000000000001B90
.plt:0000000000001B90 ; int execvp(const char *file, char *const argv[])
.plt:0000000000001B90 _execvp         proc near               ; CODE XREF: main+D07↓p
.plt:0000000000001B90                 jmp     cs:execvp_ptr
.plt:0000000000001B90 _execvp         endp
.plt:0000000000001B90
.plt:0000000000001B96 ; ---------------------------------------------------------------------------
.plt:0000000000001B96                 push    31h ; '1'
.plt:0000000000001B9B                 jmp     sub_1870
.plt:0000000000001BA0
.plt:0000000000001BA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BA0
.plt:0000000000001BA0 ; Attributes: thunk
.plt:0000000000001BA0
.plt:0000000000001BA0 ; int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
.plt:0000000000001BA0 ___cxa_atexit   proc near               ; CODE XREF: atexit+9↓j
.plt:0000000000001BA0                 jmp     cs:__cxa_atexit_ptr
.plt:0000000000001BA0 ___cxa_atexit   endp
.plt:0000000000001BA0
.plt:0000000000001BA6 ; ---------------------------------------------------------------------------
.plt:0000000000001BA6                 push    32h ; '2'
.plt:0000000000001BAB                 jmp     sub_1870
.plt:0000000000001BB0
.plt:0000000000001BB0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BB0
.plt:0000000000001BB0 ; Attributes: thunk
.plt:0000000000001BB0
.plt:0000000000001BB0 ; int __libc_current_sigrtmin(void)
.plt:0000000000001BB0 ___libc_current_sigrtmin proc near      ; CODE XREF: str2sig:loc_66B0↓p
.plt:0000000000001BB0                                         ; sig2str+55↓p
.plt:0000000000001BB0                 jmp     cs:__libc_current_sigrtmin_ptr
.plt:0000000000001BB0 ___libc_current_sigrtmin endp
.plt:0000000000001BB0
.plt:0000000000001BB6 ; ---------------------------------------------------------------------------
.plt:0000000000001BB6                 push    33h ; '3'
.plt:0000000000001BBB                 jmp     sub_1870
.plt:0000000000001BC0
.plt:0000000000001BC0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BC0
.plt:0000000000001BC0 ; Attributes: thunk
.plt:0000000000001BC0
.plt:0000000000001BC0 ; int sigismember(const sigset_t *set, int signo)
.plt:0000000000001BC0 _sigismember    proc near               ; CODE XREF: main+10F9↓p
.plt:0000000000001BC0                                         ; main+110B↓p ...
.plt:0000000000001BC0                 jmp     cs:sigismember_ptr
.plt:0000000000001BC0 _sigismember    endp
.plt:0000000000001BC0
.plt:0000000000001BC6 ; ---------------------------------------------------------------------------
.plt:0000000000001BC6                 push    34h ; '4'
.plt:0000000000001BCB                 jmp     sub_1870
.plt:0000000000001BD0
.plt:0000000000001BD0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BD0
.plt:0000000000001BD0 ; Attributes: noreturn thunk
.plt:0000000000001BD0
.plt:0000000000001BD0 ; void __noreturn exit(int status)
.plt:0000000000001BD0 _exit           proc near               ; CODE XREF: main+3D8↓p
.plt:0000000000001BD0                                         ; usage+58↓p
.plt:0000000000001BD0                 jmp     cs:exit_ptr
.plt:0000000000001BD0 _exit           endp
.plt:0000000000001BD0
.plt:0000000000001BD6 ; ---------------------------------------------------------------------------
.plt:0000000000001BD6                 push    35h ; '5'
.plt:0000000000001BDB                 jmp     sub_1870
.plt:0000000000001BE0
.plt:0000000000001BE0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BE0
.plt:0000000000001BE0 ; Attributes: thunk
.plt:0000000000001BE0
.plt:0000000000001BE0 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
.plt:0000000000001BE0 _fwrite         proc near               ; CODE XREF: main+94B↓p
.plt:0000000000001BE0                                         ; set_program_name+95↓p
.plt:0000000000001BE0                 jmp     cs:fwrite_ptr
.plt:0000000000001BE0 _fwrite         endp
.plt:0000000000001BE0
.plt:0000000000001BE6 ; ---------------------------------------------------------------------------
.plt:0000000000001BE6                 push    36h ; '6'
.plt:0000000000001BEB                 jmp     sub_1870
.plt:0000000000001BF0
.plt:0000000000001BF0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BF0
.plt:0000000000001BF0 ; Attributes: thunk
.plt:0000000000001BF0
.plt:0000000000001BF0 ___fprintf_chk  proc near               ; CODE XREF: main+559↓p
.plt:0000000000001BF0                                         ; main+9EF↓p ...
.plt:0000000000001BF0                 jmp     cs:__fprintf_chk_ptr
.plt:0000000000001BF0 ___fprintf_chk  endp
.plt:0000000000001BF0
.plt:0000000000001BF6 ; ---------------------------------------------------------------------------
.plt:0000000000001BF6                 push    37h ; '7'
.plt:0000000000001BFB                 jmp     sub_1870
.plt:0000000000001C00
.plt:0000000000001C00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C00
.plt:0000000000001C00 ; Attributes: thunk
.plt:0000000000001C00
.plt:0000000000001C00 ; int __libc_current_sigrtmax(void)
.plt:0000000000001C00 ___libc_current_sigrtmax proc near      ; CODE XREF: str2sig+C7↓p
.plt:0000000000001C00                                         ; sig2str+5C↓p
.plt:0000000000001C00                 jmp     cs:__libc_current_sigrtmax_ptr
.plt:0000000000001C00 ___libc_current_sigrtmax endp
.plt:0000000000001C00
.plt:0000000000001C06 ; ---------------------------------------------------------------------------
.plt:0000000000001C06                 push    38h ; '8'
.plt:0000000000001C0B                 jmp     sub_1870
.plt:0000000000001C10
.plt:0000000000001C10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C10
.plt:0000000000001C10 ; Attributes: thunk
.plt:0000000000001C10
.plt:0000000000001C10 ; int mbsinit(const mbstate_t *ps)
.plt:0000000000001C10 _mbsinit        proc near               ; CODE XREF: quotearg_buffer_restyled+9A8↓p
.plt:0000000000001C10                 jmp     cs:mbsinit_ptr
.plt:0000000000001C10 _mbsinit        endp
.plt:0000000000001C10
.plt:0000000000001C16 ; ---------------------------------------------------------------------------
.plt:0000000000001C16                 push    39h ; '9'
.plt:0000000000001C1B                 jmp     sub_1870
.plt:0000000000001C20
.plt:0000000000001C20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C20
.plt:0000000000001C20 ; Attributes: thunk
.plt:0000000000001C20
.plt:0000000000001C20 ; int iswprint(wint_t wc)
.plt:0000000000001C20 _iswprint       proc near               ; CODE XREF: quotearg_buffer_restyled+990↓p
.plt:0000000000001C20                 jmp     cs:iswprint_ptr
.plt:0000000000001C20 _iswprint       endp
.plt:0000000000001C20
.plt:0000000000001C26 ; ---------------------------------------------------------------------------
.plt:0000000000001C26                 push    3Ah ; ':'
.plt:0000000000001C2B                 jmp     sub_1870
.plt:0000000000001C30
.plt:0000000000001C30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C30
.plt:0000000000001C30 ; Attributes: thunk
.plt:0000000000001C30
.plt:0000000000001C30 ; int sigaddset(sigset_t *set, int signo)
.plt:0000000000001C30 _sigaddset      proc near               ; CODE XREF: main+10DE↓p
.plt:0000000000001C30                                         ; parse_block_signal_params+95↓p ...
.plt:0000000000001C30                 jmp     cs:sigaddset_ptr
.plt:0000000000001C30 _sigaddset      endp
.plt:0000000000001C30
.plt:0000000000001C36 ; ---------------------------------------------------------------------------
.plt:0000000000001C36                 push    3Bh ; ';'
.plt:0000000000001C3B                 jmp     sub_1870
.plt:0000000000001C40
.plt:0000000000001C40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C40
.plt:0000000000001C40 ; Attributes: thunk
.plt:0000000000001C40
.plt:0000000000001C40 ; const unsigned __int16 **__ctype_b_loc(void)
.plt:0000000000001C40 ___ctype_b_loc  proc near               ; CODE XREF: main:loc_1E00↓p
.plt:0000000000001C40                                         ; quotearg_buffer_restyled+513↓p
.plt:0000000000001C40                 jmp     cs:__ctype_b_loc_ptr
.plt:0000000000001C40 ___ctype_b_loc  endp
.plt:0000000000001C40
.plt:0000000000001C46 ; ---------------------------------------------------------------------------
.plt:0000000000001C46                 push    3Ch ; '<'
.plt:0000000000001C4B                 jmp     sub_1870
.plt:0000000000001C50
.plt:0000000000001C50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C50
.plt:0000000000001C50 ; Attributes: thunk
.plt:0000000000001C50
.plt:0000000000001C50 ___sprintf_chk  proc near               ; CODE XREF: sig2str+AD↓p
.plt:0000000000001C50                 jmp     cs:__sprintf_chk_ptr
.plt:0000000000001C50 ___sprintf_chk  endp
.plt:0000000000001C50
.plt:0000000000001C56 ; ---------------------------------------------------------------------------
.plt:0000000000001C56                 push    3Dh ; '='
.plt:0000000000001C5B                 jmp     sub_1870
.plt:0000000000001C5B ; } // starts at 1870
.plt:0000000000001C5B _plt            ends
.plt:0000000000001C5B
.plt.got:0000000000001C60 ; ===========================================================================
.plt.got:0000000000001C60
.plt.got:0000000000001C60 ; Segment type: Pure code
.plt.got:0000000000001C60 ; Segment permissions: Read/Execute
.plt.got:0000000000001C60 _plt_got        segment qword public 'CODE' use64
.plt.got:0000000000001C60                 assume cs:_plt_got
.plt.got:0000000000001C60                 ;org 1C60h
.plt.got:0000000000001C60                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:0000000000001C60
.plt.got:0000000000001C60 ; =============== S U B R O U T I N E =======================================
.plt.got:0000000000001C60
.plt.got:0000000000001C60 ; Attributes: thunk
.plt.got:0000000000001C60
.plt.got:0000000000001C60 ; int __fastcall _cxa_finalize(void *)
.plt.got:0000000000001C60 __cxa_finalize  proc near               ; CODE XREF: __do_global_dtors_aux+1E↓p
.plt.got:0000000000001C60 ; __unwind {
.plt.got:0000000000001C60                 jmp     cs:__cxa_finalize_ptr
.plt.got:0000000000001C60 __cxa_finalize  endp
.plt.got:0000000000001C60
.plt.got:0000000000001C60 ; ---------------------------------------------------------------------------
.plt.got:0000000000001C66                 align 8
.plt.got:0000000000001C66 ; } // starts at 1C60
.plt.got:0000000000001C66 _plt_got        ends
.plt.got:0000000000001C66
LOAD:0000000000001C68 ; ===========================================================================
LOAD:0000000000001C68
LOAD:0000000000001C68 ; Segment type: Pure code
LOAD:0000000000001C68 ; Segment permissions: Read/Execute
LOAD:0000000000001C68 LOAD            segment byte public 'CODE' use64
LOAD:0000000000001C68                 assume cs:LOAD
LOAD:0000000000001C68                 ;org 1C68h
LOAD:0000000000001C68                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000001C68                 align 10h
LOAD:0000000000001C68 LOAD            ends
LOAD:0000000000001C68
.text:0000000000001C70 ; ===========================================================================
.text:0000000000001C70
.text:0000000000001C70 ; Segment type: Pure code
.text:0000000000001C70 ; Segment permissions: Read/Execute
.text:0000000000001C70 _text           segment para public 'CODE' use64
.text:0000000000001C70                 assume cs:_text
.text:0000000000001C70                 ;org 1C70h
.text:0000000000001C70                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:0000000000001C70
.text:0000000000001C70 ; =============== S U B R O U T I N E =======================================
.text:0000000000001C70
.text:0000000000001C70
.text:0000000000001C70 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:0000000000001C70                 public main
.text:0000000000001C70 main            proc near               ; DATA XREF: start+1D↓o
.text:0000000000001C70
.text:0000000000001C70 path            = qword ptr -140h
.text:0000000000001C70 var_138         = qword ptr -138h
.text:0000000000001C70 var_130         = qword ptr -130h
.text:0000000000001C70 src             = qword ptr -128h
.text:0000000000001C70 var_120         = qword ptr -120h
.text:0000000000001C70 var_118         = qword ptr -118h
.text:0000000000001C70 s               = qword ptr -110h
.text:0000000000001C70 var_108         = qword ptr -108h
.text:0000000000001C70 argc            = dword ptr -100h
.text:0000000000001C70 var_F9          = byte ptr -0F9h
.text:0000000000001C70 set             = sigset_t ptr -0F8h
.text:0000000000001C70 var_58          = byte ptr -58h
.text:0000000000001C70 var_40          = qword ptr -40h
.text:0000000000001C70
.text:0000000000001C70 ; __unwind {
.text:0000000000001C70                 push    r15
.text:0000000000001C72                 push    r14
.text:0000000000001C74                 mov     r15, rsi
.text:0000000000001C77                 push    r13
.text:0000000000001C79                 push    r12
.text:0000000000001C7B                 push    rbp
.text:0000000000001C7C                 push    rbx
.text:0000000000001C7D                 sub     rsp, 118h
.text:0000000000001C84                 mov     [rsp+148h+argc], edi
.text:0000000000001C88                 mov     rdi, [rsi]
.text:0000000000001C8B                 mov     rax, fs:28h
.text:0000000000001C94                 mov     [rsp+148h+var_40], rax
.text:0000000000001C9C                 xor     eax, eax
.text:0000000000001C9E                 call    set_program_name
.text:0000000000001CA3                 lea     rsi, accept+2   ; locale
.text:0000000000001CAA                 mov     edi, 6          ; category
.text:0000000000001CAF                 call    _setlocale
.text:0000000000001CB4                 lea     rsi, dirname    ; "/usr/local/share/locale"
.text:0000000000001CBB                 lea     rdi, domainname ; "coreutils"
.text:0000000000001CC2                 call    _bindtextdomain
.text:0000000000001CC7                 lea     rdi, domainname ; "coreutils"
.text:0000000000001CCE                 call    _textdomain
.text:0000000000001CD3                 lea     rdi, close_stdout
.text:0000000000001CDA                 mov     cs:exit_failure, 7Dh ; '}'
.text:0000000000001CE4                 call    atexit
.text:0000000000001CE9                 mov     edi, 104h
.text:0000000000001CEE                 call    xmalloc
.text:0000000000001CF3                 lea     rdx, [rax+104h]
.text:0000000000001CFA                 mov     cs:signals, rax
.text:0000000000001D01                 nop     dword ptr [rax+00000000h]
.text:0000000000001D08
.text:0000000000001D08 loc_1D08:                               ; CODE XREF: main+A5↓j
.text:0000000000001D08                 mov     dword ptr [rax], 0
.text:0000000000001D0E                 add     rax, 4
.text:0000000000001D12                 cmp     rdx, rax
.text:0000000000001D15                 jnz     short loc_1D08
.text:0000000000001D17                 mov     [rsp+148h+path], 0
.text:0000000000001D20                 mov     byte ptr [rsp+148h+var_138], 0
.text:0000000000001D25                 mov     byte ptr [rsp+148h+var_130], 0
.text:0000000000001D2A                 nop     word ptr [rax+rax+00h]
.text:0000000000001D30
.text:0000000000001D30 loc_1D30:                               ; CODE XREF: main+125↓j
.text:0000000000001D30                                         ; main+15D↓j ...
.text:0000000000001D30                 mov     edi, [rsp+148h+argc] ; argc
.text:0000000000001D34                 lea     rcx, longopts   ; longopts
.text:0000000000001D3B                 lea     rdx, shortopts  ; "+C:iS:u:v0 \t"
.text:0000000000001D42                 xor     r8d, r8d        ; longind
.text:0000000000001D45                 mov     rsi, r15        ; argv
.text:0000000000001D48                 call    _getopt_long
.text:0000000000001D4D                 cmp     eax, 0FFFFFFFFh
.text:0000000000001D50                 jz      loc_257D
.text:0000000000001D56                 cmp     eax, 53h ; 'S'
.text:0000000000001D59                 jz      loc_1E00
.text:0000000000001D5F                 jle     short loc_1DA0
.text:0000000000001D61                 cmp     eax, 80h
.text:0000000000001D66                 jz      loc_1F40
.text:0000000000001D6C                 jg      short loc_1DD8
.text:0000000000001D6E                 cmp     eax, 75h ; 'u'
.text:0000000000001D71                 jz      loc_1FB0
.text:0000000000001D77                 cmp     eax, 76h ; 'v'
.text:0000000000001D7A                 jz      loc_1FA0
.text:0000000000001D80                 cmp     eax, 69h ; 'i'
.text:0000000000001D83                 jz      short loc_1D90
.text:0000000000001D85
.text:0000000000001D85 loc_1D85:                               ; CODE XREF: main+17E↓j
.text:0000000000001D85                                         ; main+E67↓j ...
.text:0000000000001D85                 mov     edi, 7Dh ; '}'  ; status
.text:0000000000001D8A                 call    usage
.text:0000000000001D8A ; ---------------------------------------------------------------------------
.text:0000000000001D8F                 align 10h
.text:0000000000001D90
.text:0000000000001D90 loc_1D90:                               ; CODE XREF: main+113↑j
.text:0000000000001D90                 mov     byte ptr [rsp+148h+var_130], 1
.text:0000000000001D95                 jmp     short loc_1D30
.text:0000000000001D95 ; ---------------------------------------------------------------------------
.text:0000000000001D97                 align 20h
.text:0000000000001DA0
.text:0000000000001DA0 loc_1DA0:                               ; CODE XREF: main+EF↑j
.text:0000000000001DA0                 cmp     eax, 9
.text:0000000000001DA3                 jz      loc_2E3A
.text:0000000000001DA9                 jle     loc_2000
.text:0000000000001DAF                 cmp     eax, 30h ; '0'
.text:0000000000001DB2                 jz      loc_1FF0
.text:0000000000001DB8                 cmp     eax, 43h ; 'C'
.text:0000000000001DBB                 jnz     loc_2E97
.text:0000000000001DC1                 mov     rax, cs:optarg@@GLIBC_2_2_5
.text:0000000000001DC8                 mov     [rsp+148h+path], rax
.text:0000000000001DCD                 jmp     loc_1D30
.text:0000000000001DCD ; ---------------------------------------------------------------------------
.text:0000000000001DD2                 align 8
.text:0000000000001DD8
.text:0000000000001DD8 loc_1DD8:                               ; CODE XREF: main+FC↑j
.text:0000000000001DD8                 cmp     eax, 82h
.text:0000000000001DDD                 jz      loc_1F80
.text:0000000000001DE3                 jl      loc_1F68
.text:0000000000001DE9                 cmp     eax, 83h
.text:0000000000001DEE                 jnz     short loc_1D85
.text:0000000000001DF0                 mov     cs:report_signal_handling, 1
.text:0000000000001DF7                 jmp     loc_1D30
.text:0000000000001DF7 ; ---------------------------------------------------------------------------
.text:0000000000001DFC                 align 20h
.text:0000000000001E00
.text:0000000000001E00 loc_1E00:                               ; CODE XREF: main+E9↑j
.text:0000000000001E00                 call    ___ctype_b_loc
.text:0000000000001E05                 mov     r12, cs:optarg@@GLIBC_2_2_5
.text:0000000000001E0C                 mov     r11, rax
.text:0000000000001E0F                 mov     r8, [rax]
.text:0000000000001E12                 jmp     short loc_1E1C
.text:0000000000001E12 ; ---------------------------------------------------------------------------
.text:0000000000001E14                 align 8
.text:0000000000001E18
.text:0000000000001E18 loc_1E18:                               ; CODE XREF: main+1BA↓j
.text:0000000000001E18                 add     r12, 1
.text:0000000000001E1C
.text:0000000000001E1C loc_1E1C:                               ; CODE XREF: main+1A2↑j
.text:0000000000001E1C                 movsx   rsi, byte ptr [r12]
.text:0000000000001E21                 test    byte ptr [r8+rsi*2+1], 20h
.text:0000000000001E27                 mov     rdx, rsi
.text:0000000000001E2A                 jnz     short loc_1E18
.text:0000000000001E2C                 test    sil, sil
.text:0000000000001E2F                 jz      loc_1D30
.text:0000000000001E35                 mov     eax, [rsp+148h+argc]
.text:0000000000001E39                 sub     eax, cs:optind@@GLIBC_2_2_5
.text:0000000000001E3F                 or      r9, 0FFFFFFFFFFFFFFFFh
.text:0000000000001E43                 mov     rdi, r12
.text:0000000000001E46                 mov     rcx, r9
.text:0000000000001E49                 mov     ebx, 1
.text:0000000000001E4E                 xor     r10d, r10d
.text:0000000000001E51                 mov     r13, r12
.text:0000000000001E54                 xor     r14d, r14d
.text:0000000000001E57                 xor     ebp, ebp
.text:0000000000001E59                 mov     dword ptr [rsp+148h+var_118], eax
.text:0000000000001E5D                 xor     eax, eax
.text:0000000000001E5F                 repne scasb
.text:0000000000001E61                 mov     [rsp+148h+s], r12
.text:0000000000001E66                 mov     [rsp+148h+var_108], r15
.text:0000000000001E6B                 mov     r12d, r10d
.text:0000000000001E6E                 not     rcx
.text:0000000000001E71                 mov     r15d, ebx
.text:0000000000001E74                 mov     [rsp+148h+var_120], r9
.text:0000000000001E79                 mov     [rsp+148h+src], rcx
.text:0000000000001E7E                 mov     rbx, r11
.text:0000000000001E81                 nop     dword ptr [rax+00000000h]
.text:0000000000001E88
.text:0000000000001E88 loc_1E88:                               ; CODE XREF: main+41C↓j
.text:0000000000001E88                 test    byte ptr [r8+rsi*2+1], 20h
.text:0000000000001E8E                 movzx   eax, byte ptr [r13+1]
.text:0000000000001E93                 jz      loc_2050
.text:0000000000001E99                 mov     ecx, r14d
.text:0000000000001E9C                 or      cl, bpl
.text:0000000000001E9F                 jnz     loc_2050
.text:0000000000001EA5                 cmp     dl, 24h ; '$'
.text:0000000000001EA8                 mov     r12d, 1
.text:0000000000001EAE                 jz      loc_22AB
.text:0000000000001EB4                 jle     loc_2300
.text:0000000000001EBA                 cmp     dl, 27h ; '''
.text:0000000000001EBD                 jz      loc_2288
.text:0000000000001EC3                 cmp     dl, 5Ch ; '\'
.text:0000000000001EC6                 jnz     loc_2309
.text:0000000000001ECC
.text:0000000000001ECC loc_1ECC:                               ; CODE XREF: main+402↓j
.text:0000000000001ECC                 cmp     al, 63h ; 'c'
.text:0000000000001ECE                 setz    sil
.text:0000000000001ED2                 test    sil, sil
.text:0000000000001ED5                 mov     edx, esi
.text:0000000000001ED7                 jz      short loc_1EE2
.text:0000000000001ED9                 test    bpl, bpl
.text:0000000000001EDC                 jnz     loc_306F
.text:0000000000001EE2
.text:0000000000001EE2 loc_1EE2:                               ; CODE XREF: main+267↑j
.text:0000000000001EE2                 test    al, al
.text:0000000000001EE4                 jz      loc_2F17
.text:0000000000001EEA                 lea     ecx, [rax-66h]
.text:0000000000001EED                 cmp     cl, 10h
.text:0000000000001EF0                 ja      short loc_1EFF
.text:0000000000001EF2                 mov     edx, 15101h
.text:0000000000001EF7                 shr     rdx, cl
.text:0000000000001EFA                 and     edx, 1
.text:0000000000001EFD                 or      edx, esi
.text:0000000000001EFF
.text:0000000000001EFF loc_1EFF:                               ; CODE XREF: main+280↑j
.text:0000000000001EFF                 test    dl, dl
.text:0000000000001F01                 jnz     loc_22E0
.text:0000000000001F07                 lea     edx, [rax-22h]
.text:0000000000001F0A                 cmp     dl, 3Dh ; '='
.text:0000000000001F0D                 jbe     loc_22C3
.text:0000000000001F13
.text:0000000000001F13 loc_1F13:                               ; CODE XREF: main+661↓j
.text:0000000000001F13                 lea     rsi, msgid      ; "invalid sequence '\\%c' in -S"
.text:0000000000001F1A                 mov     ebp, eax
.text:0000000000001F1C                 mov     edx, 5          ; category
.text:0000000000001F21                 xor     edi, edi        ; domainname
.text:0000000000001F23                 call    _dcgettext
.text:0000000000001F28                 movsx   ecx, bpl
.text:0000000000001F2C                 mov     rdx, rax        ; format
.text:0000000000001F2F                 xor     esi, esi        ; errnum
.text:0000000000001F31                 mov     edi, 7Dh ; '}'  ; status
.text:0000000000001F36                 xor     eax, eax
.text:0000000000001F38                 call    _error
.text:0000000000001F3D                 nop     dword ptr [rax]
.text:0000000000001F40
.text:0000000000001F40 loc_1F40:                               ; CODE XREF: main+F6↑j
.text:0000000000001F40                 mov     rdi, cs:optarg@@GLIBC_2_2_5
.text:0000000000001F47                 mov     esi, 1
.text:0000000000001F4C                 call    parse_signal_action_params
.text:0000000000001F51                 mov     rdi, cs:optarg@@GLIBC_2_2_5 ; src
.text:0000000000001F58                 xor     esi, esi
.text:0000000000001F5A                 call    parse_block_signal_params
.text:0000000000001F5F                 jmp     loc_1D30
.text:0000000000001F5F ; ---------------------------------------------------------------------------
.text:0000000000001F64                 align 8
.text:0000000000001F68
.text:0000000000001F68 loc_1F68:                               ; CODE XREF: main+173↑j
.text:0000000000001F68                 mov     rdi, cs:optarg@@GLIBC_2_2_5
.text:0000000000001F6F                 xor     esi, esi
.text:0000000000001F71                 call    parse_signal_action_params
.text:0000000000001F76                 jmp     loc_1D30
.text:0000000000001F76 ; ---------------------------------------------------------------------------
.text:0000000000001F7B                 align 20h
.text:0000000000001F80
.text:0000000000001F80 loc_1F80:                               ; CODE XREF: main+16D↑j
.text:0000000000001F80                 mov     rdi, cs:optarg@@GLIBC_2_2_5 ; src
.text:0000000000001F87                 mov     esi, 1
.text:0000000000001F8C                 call    parse_block_signal_params
.text:0000000000001F91                 jmp     loc_1D30
.text:0000000000001F91 ; ---------------------------------------------------------------------------
.text:0000000000001F96                 align 20h
.text:0000000000001FA0
.text:0000000000001FA0 loc_1FA0:                               ; CODE XREF: main+10A↑j
.text:0000000000001FA0                 mov     cs:dev_debug, 1
.text:0000000000001FA7                 jmp     loc_1D30
.text:0000000000001FA7 ; ---------------------------------------------------------------------------
.text:0000000000001FAC                 align 10h
.text:0000000000001FB0
.text:0000000000001FB0 loc_1FB0:                               ; CODE XREF: main+101↑j
.text:0000000000001FB0                 mov     rcx, cs:usvars_used
.text:0000000000001FB7                 cmp     rcx, cs:usvars_alloc
.text:0000000000001FBE                 mov     rbx, cs:optarg@@GLIBC_2_2_5
.text:0000000000001FC5                 mov     rax, rcx
.text:0000000000001FC8                 jz      loc_26DA
.text:0000000000001FCE
.text:0000000000001FCE loc_1FCE:                               ; CODE XREF: main+ABA↓j
.text:0000000000001FCE                 lea     rdx, [rax+1]
.text:0000000000001FD2                 mov     cs:usvars_used, rdx
.text:0000000000001FD9                 mov     rdx, cs:usvars
.text:0000000000001FE0                 mov     [rdx+rax*8], rbx
.text:0000000000001FE4                 jmp     loc_1D30
.text:0000000000001FE4 ; ---------------------------------------------------------------------------
.text:0000000000001FE9                 align 10h
.text:0000000000001FF0
.text:0000000000001FF0 loc_1FF0:                               ; CODE XREF: main+142↑j
.text:0000000000001FF0                 mov     byte ptr [rsp+148h+var_138], 1
.text:0000000000001FF5                 jmp     loc_1D30
.text:0000000000001FF5 ; ---------------------------------------------------------------------------
.text:0000000000001FFA                 align 20h
.text:0000000000002000
.text:0000000000002000 loc_2000:                               ; CODE XREF: main+139↑j
.text:0000000000002000                 cmp     eax, 0FFFFFF7Dh
.text:0000000000002005                 jnz     loc_2E28
.text:000000000000200B                 lea     rax, aAssafGordon ; "Assaf Gordon"
.text:0000000000002012                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:0000000000002019                 mov     rcx, cs:Version
.text:0000000000002020                 push    0
.text:0000000000002022                 lea     r9, aDavidMackenzie ; "David MacKenzie"
.text:0000000000002029                 lea     r8, aRichardMlynari ; "Richard Mlynarik"
.text:0000000000002030                 push    rax
.text:0000000000002031                 lea     rdx, unk_6C0B
.text:0000000000002038                 lea     rsi, aEnv       ; "env"
.text:000000000000203F                 xor     eax, eax
.text:0000000000002041                 call    version_etc
.text:0000000000002046                 xor     edi, edi        ; status
.text:0000000000002048                 call    _exit
.text:0000000000002048 ; ---------------------------------------------------------------------------
.text:000000000000204D                 align 10h
.text:0000000000002050
.text:0000000000002050 loc_2050:                               ; CODE XREF: main+223↑j
.text:0000000000002050                                         ; main+22F↑j
.text:0000000000002050                 cmp     r12b, 1
.text:0000000000002054                 sbb     r15d, 0FFFFFFFFh
.text:0000000000002058                 cmp     dl, 24h ; '$'
.text:000000000000205B                 jz      loc_22A8
.text:0000000000002061                 jle     short loc_2098
.text:0000000000002063                 xor     r12d, r12d
.text:0000000000002066                 cmp     dl, 27h ; '''
.text:0000000000002069                 jz      loc_2288
.text:000000000000206F                 cmp     dl, 5Ch ; '\'
.text:0000000000002072                 jz      loc_1ECC
.text:0000000000002078
.text:0000000000002078 loc_2078:                               ; CODE XREF: main+42B↓j
.text:0000000000002078                 mov     edx, eax
.text:000000000000207A                 xor     r12d, r12d
.text:000000000000207D
.text:000000000000207D loc_207D:                               ; CODE XREF: main+62F↓j
.text:000000000000207D                                         ; main+684↓j ...
.text:000000000000207D                 add     r13, 1
.text:0000000000002081                 test    dl, dl
.text:0000000000002083                 jz      short loc_20B9
.text:0000000000002085
.text:0000000000002085 loc_2085:                               ; CODE XREF: main+447↓j
.text:0000000000002085                 mov     r8, [rbx]
.text:0000000000002088
.text:0000000000002088 loc_2088:                               ; CODE XREF: main+64E↓j
.text:0000000000002088                 movsx   rsi, dl
.text:000000000000208C                 jmp     loc_1E88
.text:000000000000208C ; ---------------------------------------------------------------------------
.text:0000000000002091                 align 8
.text:0000000000002098
.text:0000000000002098 loc_2098:                               ; CODE XREF: main+3F1↑j
.text:0000000000002098                 cmp     dl, 22h ; '"'
.text:000000000000209B                 jnz     short loc_2078
.text:000000000000209D                 mov     r12d, r14d
.text:00000000000020A0                 and     r12b, bpl
.text:00000000000020A3                 jnz     loc_2F3B
.text:00000000000020A9
.text:00000000000020A9 loc_20A9:                               ; CODE XREF: main+693↓j
.text:00000000000020A9                 or      ebp, r14d
.text:00000000000020AC                 mov     edx, eax
.text:00000000000020AE                 add     r13, 1
.text:00000000000020B2                 xor     ebp, 1
.text:00000000000020B5                 test    dl, dl
.text:00000000000020B7                 jnz     short loc_2085
.text:00000000000020B9
.text:00000000000020B9 loc_20B9:                               ; CODE XREF: main+413↑j
.text:00000000000020B9                 or      bpl, r14b
.text:00000000000020BC                 mov     ebx, r15d
.text:00000000000020BF                 mov     r12, [rsp+148h+s]
.text:00000000000020C4                 mov     r15, [rsp+148h+var_108]
.text:00000000000020C9                 jnz     loc_2F79
.text:00000000000020CF                 mov     rdi, [rsp+148h+src]
.text:00000000000020D4                 add     rdi, 7
.text:00000000000020D8                 call    xmalloc
.text:00000000000020DD                 mov     rbp, rax
.text:00000000000020E0                 mov     eax, dword ptr [rsp+148h+var_118]
.text:00000000000020E4                 lea     edi, [rax+rbx+2]
.text:00000000000020E8                 mov     rbx, r12
.text:00000000000020EB                 movsxd  rdi, edi
.text:00000000000020EE                 shl     rdi, 3
.text:00000000000020F2                 call    xmalloc
.text:00000000000020F7                 lea     r14, [rax+8]
.text:00000000000020FB                 mov     dword ptr [rbp+0], 4D4D5544h
.text:0000000000002102                 mov     word ptr [rbp+4], 59h ; 'Y'
.text:0000000000002108                 mov     [rax], rbp
.text:000000000000210B                 mov     r10, rax
.text:000000000000210E                 add     rbp, 6
.text:0000000000002112                 mov     r13, r14
.text:0000000000002115                 xor     r9d, r9d
.text:0000000000002118                 xor     r11d, r11d
.text:000000000000211B                 mov     r8d, 1
.text:0000000000002121
.text:0000000000002121 loc_2121:                               ; CODE XREF: main+74B↓j
.text:0000000000002121                                         ; main+851↓j ...
.text:0000000000002121                 movzx   eax, byte ptr [rbx]
.text:0000000000002124                 test    al, al
.text:0000000000002126                 jz      short loc_217E
.text:0000000000002128
.text:0000000000002128 loc_2128:                               ; CODE XREF: main+50C↓j
.text:0000000000002128                 cmp     al, 23h ; '#'
.text:000000000000212A                 jz      loc_2528
.text:0000000000002130                 jle     loc_2370
.text:0000000000002136                 cmp     al, 27h ; '''
.text:0000000000002138                 jz      loc_24F4
.text:000000000000213E                 cmp     al, 5Ch ; '\'
.text:0000000000002140                 jz      loc_24C6
.text:0000000000002146                 cmp     al, 24h ; '$'
.text:0000000000002148                 jz      loc_23CE
.text:000000000000214E
.text:000000000000214E loc_214E:                               ; CODE XREF: main+70E↓j
.text:000000000000214E                 mov     rcx, rbx
.text:0000000000002151
.text:0000000000002151 loc_2151:                               ; CODE XREF: main+71D↓j
.text:0000000000002151                                         ; main+764↓j ...
.text:0000000000002151                 test    r8b, r8b
.text:0000000000002154                 lea     rdx, [rbp+1]
.text:0000000000002158                 jz      loc_23C0
.text:000000000000215E                 mov     byte ptr [rbp+0], 0
.text:0000000000002162                 mov     [r13+0], rdx
.text:0000000000002166                 add     rbp, 2
.text:000000000000216A                 add     r13, 8
.text:000000000000216E
.text:000000000000216E loc_216E:                               ; CODE XREF: main+759↓j
.text:000000000000216E                                         ; main+8CB↓j
.text:000000000000216E                 lea     rbx, [rcx+1]
.text:0000000000002172                 mov     [rdx], al
.text:0000000000002174                 xor     r8d, r8d
.text:0000000000002177                 movzx   eax, byte ptr [rbx]
.text:000000000000217A                 test    al, al
.text:000000000000217C                 jnz     short loc_2128
.text:000000000000217E
.text:000000000000217E loc_217E:                               ; CODE XREF: main+4B6↑j
.text:000000000000217E                                         ; main+8BB↓j ...
.text:000000000000217E                 cmp     cs:dev_debug, 0
.text:0000000000002185                 mov     qword ptr [r13+0], 0
.text:000000000000218D                 mov     rax, [r15]
.text:0000000000002190                 mov     byte ptr [rbp+0], 0
.text:0000000000002194                 mov     [r10], rax
.text:0000000000002197                 jz      loc_268F
.text:000000000000219D                 cmp     qword ptr [r10+8], 0
.text:00000000000021A2                 jz      short loc_2200
.text:00000000000021A4                 mov     rdi, r12
.text:00000000000021A7                 mov     [rsp+148h+src], r10
.text:00000000000021AC                 call    quote
.text:00000000000021B1                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:00000000000021B8                 lea     rdx, aSplitSS   ; "split -S:  %s\n"
.text:00000000000021BF                 mov     rcx, rax
.text:00000000000021C2                 mov     esi, 1
.text:00000000000021C7                 xor     eax, eax
.text:00000000000021C9                 call    ___fprintf_chk
.text:00000000000021CE                 cmp     cs:dev_debug, 0
.text:00000000000021D5                 mov     r10, [rsp+148h+src]
.text:00000000000021DA                 jnz     loc_2C4E
.text:00000000000021E0                 mov     rbx, r10
.text:00000000000021E3
.text:00000000000021E3 loc_21E3:                               ; CODE XREF: main+DEB↓j
.text:00000000000021E3                                         ; main+1010↓j
.text:00000000000021E3                 mov     rdi, [r14]
.text:00000000000021E6                 movzx   eax, cs:dev_debug
.text:00000000000021ED                 jmp     short loc_21F8
.text:00000000000021ED ; ---------------------------------------------------------------------------
.text:00000000000021EF                 align 10h
.text:00000000000021F0
.text:00000000000021F0 loc_21F0:                               ; CODE XREF: main+58B↓j
.text:00000000000021F0                 test    al, al
.text:00000000000021F2                 jnz     loc_2A35
.text:00000000000021F8
.text:00000000000021F8 loc_21F8:                               ; CODE XREF: main+57D↑j
.text:00000000000021F8                 test    rdi, rdi
.text:00000000000021FB                 jnz     short loc_21F0
.text:00000000000021FD                 mov     r10, rbx
.text:0000000000002200
.text:0000000000002200 loc_2200:                               ; CODE XREF: main+532↑j
.text:0000000000002200                                         ; main+A24↓j ...
.text:0000000000002200                 movsxd  rax, cs:optind@@GLIBC_2_2_5
.text:0000000000002207                 mov     ecx, [rsp+148h+argc]
.text:000000000000220B                 cmp     eax, ecx
.text:000000000000220D                 jge     short loc_2244
.text:000000000000220F                 mov     edi, eax
.text:0000000000002211                 not     edi
.text:0000000000002213                 lea     edx, [rdi+rcx]
.text:0000000000002216                 lea     rcx, [r15+rax*8]
.text:000000000000221A                 xor     eax, eax
.text:000000000000221C                 lea     rsi, ds:8[rdx*8]
.text:0000000000002224                 nop     dword ptr [rax+00h]
.text:0000000000002228
.text:0000000000002228 loc_2228:                               ; CODE XREF: main+5C7↓j
.text:0000000000002228                 mov     rdx, [rcx+rax]
.text:000000000000222C                 mov     [r14+rax], rdx
.text:0000000000002230                 add     rax, 8
.text:0000000000002234                 cmp     rsi, rax
.text:0000000000002237                 jnz     short loc_2228
.text:0000000000002239                 mov     eax, [rsp+148h+argc]
.text:000000000000223D                 add     eax, edi
.text:000000000000223F                 lea     r14, [r14+rax*8+8]
.text:0000000000002244
.text:0000000000002244 loc_2244:                               ; CODE XREF: main+59D↑j
.text:0000000000002244                 mov     qword ptr [r14], 0
.text:000000000000224B                 cmp     qword ptr [r10], 0
.text:000000000000224F                 jz      loc_2B21
.text:0000000000002255                 mov     rax, r10
.text:0000000000002258                 xor     edx, edx
.text:000000000000225A                 nop     word ptr [rax+rax+00h]
.text:0000000000002260
.text:0000000000002260 loc_2260:                               ; CODE XREF: main+5FB↓j
.text:0000000000002260                 add     rax, 8
.text:0000000000002264                 add     edx, 1
.text:0000000000002267                 cmp     qword ptr [rax], 0
.text:000000000000226B                 jnz     short loc_2260
.text:000000000000226D                 mov     [rsp+148h+argc], edx
.text:0000000000002271
.text:0000000000002271 loc_2271:                               ; CODE XREF: main+EB9↓j
.text:0000000000002271                 mov     cs:optind@@GLIBC_2_2_5, 0
.text:000000000000227B                 mov     r15, r10
.text:000000000000227E                 jmp     loc_1D30
.text:000000000000227E ; ---------------------------------------------------------------------------
.text:0000000000002283                 align 8
.text:0000000000002288
.text:0000000000002288 loc_2288:                               ; CODE XREF: main+24D↑j
.text:0000000000002288                                         ; main+3F9↑j
.text:0000000000002288                 test    r14b, r14b
.text:000000000000228B                 jz      short loc_2296
.text:000000000000228D                 test    bpl, bpl
.text:0000000000002290                 jnz     loc_2F5A
.text:0000000000002296
.text:0000000000002296 loc_2296:                               ; CODE XREF: main+61B↑j
.text:0000000000002296                 or      r14d, ebp
.text:0000000000002299                 mov     edx, eax
.text:000000000000229B                 xor     r14d, 1
.text:000000000000229F                 jmp     loc_207D
.text:000000000000229F ; ---------------------------------------------------------------------------
.text:00000000000022A4                 align 8
.text:00000000000022A8
.text:00000000000022A8 loc_22A8:                               ; CODE XREF: main+3EB↑j
.text:00000000000022A8                 xor     r12d, r12d
.text:00000000000022AB
.text:00000000000022AB loc_22AB:                               ; CODE XREF: main+23E↑j
.text:00000000000022AB                 test    r14b, r14b
.text:00000000000022AE                 jz      short loc_2320
.text:00000000000022B0                 add     r13, 1
.text:00000000000022B4                 test    al, al
.text:00000000000022B6                 jz      loc_2F79
.text:00000000000022BC                 mov     edx, eax
.text:00000000000022BE                 jmp     loc_2088
.text:00000000000022C3 ; ---------------------------------------------------------------------------
.text:00000000000022C3
.text:00000000000022C3 loc_22C3:                               ; CODE XREF: main+29D↑j
.text:00000000000022C3                 mov     rcx, 2400000000000027h
.text:00000000000022CD                 bt      rcx, rdx
.text:00000000000022D1                 jnb     loc_1F13
.text:00000000000022D7                 nop     word ptr [rax+rax+00000000h]
.text:00000000000022E0
.text:00000000000022E0 loc_22E0:                               ; CODE XREF: main+291↑j
.text:00000000000022E0                 cmp     al, 5Fh ; '_'
.text:00000000000022E2                 movzx   edx, byte ptr [r13+2]
.text:00000000000022E7                 setz    al
.text:00000000000022EA                 add     r13, 1
.text:00000000000022EE                 movzx   eax, al
.text:00000000000022F1                 add     r15d, eax
.text:00000000000022F4                 jmp     loc_207D
.text:00000000000022F4 ; ---------------------------------------------------------------------------
.text:00000000000022F9                 align 20h
.text:0000000000002300
.text:0000000000002300 loc_2300:                               ; CODE XREF: main+244↑j
.text:0000000000002300                 cmp     dl, 22h ; '"'
.text:0000000000002303                 jz      loc_20A9
.text:0000000000002309
.text:0000000000002309 loc_2309:                               ; CODE XREF: main+256↑j
.text:0000000000002309                 mov     edx, eax
.text:000000000000230B                 xor     r14d, r14d
.text:000000000000230E                 xor     ebp, ebp
.text:0000000000002310                 mov     r12d, 1
.text:0000000000002316                 jmp     loc_207D
.text:0000000000002316 ; ---------------------------------------------------------------------------
.text:000000000000231B                 align 20h
.text:0000000000002320
.text:0000000000002320 loc_2320:                               ; CODE XREF: main+63E↑j
.text:0000000000002320                 mov     rdi, r13
.text:0000000000002323                 call    extract_varname
.text:0000000000002328                 test    rax, rax
.text:000000000000232B                 jz      loc_2E70
.text:0000000000002331                 mov     rdi, rax        ; name
.text:0000000000002334                 call    _getenv
.text:0000000000002339                 test    rax, rax
.text:000000000000233C                 mov     rdi, rax
.text:000000000000233F                 jz      short loc_235D
.text:0000000000002341                 mov     rcx, [rsp+148h+var_120]
.text:0000000000002346                 mov     eax, r14d
.text:0000000000002349                 repne scasb
.text:000000000000234B                 mov     rax, [rsp+148h+src]
.text:0000000000002350                 not     rcx
.text:0000000000002353                 lea     rax, [rax+rcx-1]
.text:0000000000002358                 mov     [rsp+148h+src], rax
.text:000000000000235D
.text:000000000000235D loc_235D:                               ; CODE XREF: main+6CF↑j
.text:000000000000235D                 movzx   edx, byte ptr [r13+1]
.text:0000000000002362                 jmp     loc_207D
.text:0000000000002362 ; ---------------------------------------------------------------------------
.text:0000000000002367                 align 10h
.text:0000000000002370
.text:0000000000002370 loc_2370:                               ; CODE XREF: main+4C0↑j
.text:0000000000002370                 cmp     al, 20h ; ' '
.text:0000000000002372                 jz      short loc_2384
.text:0000000000002374                 cmp     al, 22h ; '"'
.text:0000000000002376                 jz      loc_2540
.text:000000000000237C                 cmp     al, 9
.text:000000000000237E                 jnz     loc_214E
.text:0000000000002384
.text:0000000000002384 loc_2384:                               ; CODE XREF: main+702↑j
.text:0000000000002384                 mov     edi, r11d
.text:0000000000002387                 mov     rcx, rbx
.text:000000000000238A                 or      dil, r9b
.text:000000000000238D                 jnz     loc_2151
.text:0000000000002393                 lea     rsi, accept     ; " \t"
.text:000000000000239A                 mov     rdi, rbx        ; s
.text:000000000000239D                 mov     [rsp+148h+src], r10
.text:00000000000023A2                 call    _strspn
.text:00000000000023A7                 xor     r9d, r9d
.text:00000000000023AA                 add     rbx, rax
.text:00000000000023AD                 xor     r11d, r11d
.text:00000000000023B0                 mov     r8d, 1
.text:00000000000023B6                 mov     r10, [rsp+148h+src]
.text:00000000000023BB                 jmp     loc_2121
.text:00000000000023C0 ; ---------------------------------------------------------------------------
.text:00000000000023C0
.text:00000000000023C0 loc_23C0:                               ; CODE XREF: main+4E8↑j
.text:00000000000023C0                 mov     rsi, rdx
.text:00000000000023C3                 mov     rdx, rbp
.text:00000000000023C6                 mov     rbp, rsi
.text:00000000000023C9                 jmp     loc_216E
.text:00000000000023CE ; ---------------------------------------------------------------------------
.text:00000000000023CE
.text:00000000000023CE loc_23CE:                               ; CODE XREF: main+4D8↑j
.text:00000000000023CE                 test    r9b, r9b
.text:00000000000023D1                 mov     rcx, rbx
.text:00000000000023D4                 jnz     loc_2151
.text:00000000000023DA                 mov     rdi, rbx
.text:00000000000023DD                 mov     [rsp+148h+var_F9], r11b
.text:00000000000023E2                 mov     [rsp+148h+var_108], r10
.text:00000000000023E7                 mov     byte ptr [rsp+148h+s], r9b
.text:00000000000023EC                 mov     byte ptr [rsp+148h+var_118], r8b
.text:00000000000023F1                 call    extract_varname
.text:00000000000023F6                 mov     rdi, rax        ; name
.text:00000000000023F9                 mov     [rsp+148h+var_120], rax
.text:00000000000023FE                 call    _getenv
.text:0000000000002403                 test    rax, rax
.text:0000000000002406                 mov     [rsp+148h+src], rax
.text:000000000000240B                 mov     rcx, [rsp+148h+var_120]
.text:0000000000002410                 movzx   r8d, byte ptr [rsp+148h+var_118]
.text:0000000000002416                 movzx   r9d, byte ptr [rsp+148h+s]
.text:000000000000241C                 mov     r10, [rsp+148h+var_108]
.text:0000000000002421                 movzx   r11d, [rsp+148h+var_F9]
.text:0000000000002427                 jz      loc_2B2E
.text:000000000000242D                 test    r8b, r8b
.text:0000000000002430                 jz      short loc_2445
.text:0000000000002432                 lea     rax, [rbp+1]
.text:0000000000002436                 mov     byte ptr [rbp+0], 0
.text:000000000000243A                 add     r13, 8
.text:000000000000243E                 mov     [r13-8], rax
.text:0000000000002442                 mov     rbp, rax
.text:0000000000002445
.text:0000000000002445 loc_2445:                               ; CODE XREF: main+7C0↑j
.text:0000000000002445                 cmp     cs:dev_debug, 0
.text:000000000000244C                 jnz     loc_2BF8
.text:0000000000002452
.text:0000000000002452 loc_2452:                               ; CODE XREF: main+FD9↓j
.text:0000000000002452                 mov     rsi, [rsp+148h+src] ; src
.text:0000000000002457                 mov     rdi, rbp        ; dest
.text:000000000000245A                 mov     byte ptr [rsp+148h+s], r11b
.text:000000000000245F                 mov     [rsp+148h+var_118], r10
.text:0000000000002464                 mov     byte ptr [rsp+148h+var_120], r9b
.text:0000000000002469                 call    _stpcpy
.text:000000000000246E                 movzx   r9d, byte ptr [rsp+148h+var_120]
.text:0000000000002474                 movzx   r11d, byte ptr [rsp+148h+s]
.text:000000000000247A                 mov     rbp, rax
.text:000000000000247D                 mov     r10, [rsp+148h+var_118]
.text:0000000000002482                 xor     r8d, r8d
.text:0000000000002485
.text:0000000000002485 loc_2485:                               ; CODE XREF: main+EC5↓j
.text:0000000000002485                                         ; main+F10↓j
.text:0000000000002485                 mov     rdi, rbx        ; s
.text:0000000000002488                 mov     esi, 7Dh ; '}'  ; c
.text:000000000000248D                 mov     byte ptr [rsp+148h+s], r11b
.text:0000000000002492                 mov     [rsp+148h+var_118], r10
.text:0000000000002497                 mov     byte ptr [rsp+148h+var_120], r9b
.text:000000000000249C                 mov     byte ptr [rsp+148h+src], r8b
.text:00000000000024A1                 call    _strchr
.text:00000000000024A6                 movzx   r8d, byte ptr [rsp+148h+src]
.text:00000000000024AC                 lea     rbx, [rax+1]
.text:00000000000024B0                 movzx   r9d, byte ptr [rsp+148h+var_120]
.text:00000000000024B6                 mov     r10, [rsp+148h+var_118]
.text:00000000000024BB                 movzx   r11d, byte ptr [rsp+148h+s]
.text:00000000000024C1                 jmp     loc_2121
.text:00000000000024C6 ; ---------------------------------------------------------------------------
.text:00000000000024C6
.text:00000000000024C6 loc_24C6:                               ; CODE XREF: main+4D0↑j
.text:00000000000024C6                 test    r9b, r9b
.text:00000000000024C9                 lea     rcx, [rbx+1]
.text:00000000000024CD                 movzx   edx, byte ptr [rbx+1]
.text:00000000000024D1                 jz      loc_2557
.text:00000000000024D7                 cmp     dl, 5Ch ; '\'
.text:00000000000024DA                 jz      loc_2151
.text:00000000000024E0                 cmp     dl, 27h ; '''
.text:00000000000024E3                 mov     esi, 27h ; '''
.text:00000000000024E8                 cmovz   eax, esi
.text:00000000000024EB                 cmovnz  rcx, rbx
.text:00000000000024EF                 jmp     loc_2151
.text:00000000000024F4 ; ---------------------------------------------------------------------------
.text:00000000000024F4
.text:00000000000024F4 loc_24F4:                               ; CODE XREF: main+4C8↑j
.text:00000000000024F4                 test    r11b, r11b
.text:00000000000024F7                 mov     rcx, rbx
.text:00000000000024FA                 jnz     loc_2151
.text:0000000000002500                 xor     r9d, 1
.text:0000000000002504                 test    r8b, r8b
.text:0000000000002507                 jz      short loc_251C
.text:0000000000002509
.text:0000000000002509 loc_2509:                               ; CODE XREF: main+8E5↓j
.text:0000000000002509                 lea     rax, [rbp+1]
.text:000000000000250D                 mov     byte ptr [rbp+0], 0
.text:0000000000002511                 add     r13, 8
.text:0000000000002515                 mov     [r13-8], rax
.text:0000000000002519                 mov     rbp, rax
.text:000000000000251C
.text:000000000000251C loc_251C:                               ; CODE XREF: main+897↑j
.text:000000000000251C                                         ; main+8E3↓j
.text:000000000000251C                 add     rbx, 1
.text:0000000000002520                 xor     r8d, r8d
.text:0000000000002523                 jmp     loc_2121
.text:0000000000002528 ; ---------------------------------------------------------------------------
.text:0000000000002528
.text:0000000000002528 loc_2528:                               ; CODE XREF: main+4BA↑j
.text:0000000000002528                 test    r8b, r8b
.text:000000000000252B                 jnz     loc_217E
.text:0000000000002531                 mov     rdx, rbp
.text:0000000000002534                 mov     rcx, rbx
.text:0000000000002537                 add     rbp, 1
.text:000000000000253B                 jmp     loc_216E
.text:0000000000002540 ; ---------------------------------------------------------------------------
.text:0000000000002540
.text:0000000000002540 loc_2540:                               ; CODE XREF: main+706↑j
.text:0000000000002540                 test    r9b, r9b
.text:0000000000002543                 mov     rcx, rbx
.text:0000000000002546                 jnz     loc_2151
.text:000000000000254C                 xor     r11d, 1
.text:0000000000002550                 test    r8b, r8b
.text:0000000000002553                 jz      short loc_251C
.text:0000000000002555                 jmp     short loc_2509
.text:0000000000002557 ; ---------------------------------------------------------------------------
.text:0000000000002557
.text:0000000000002557 loc_2557:                               ; CODE XREF: main+861↑j
.text:0000000000002557                 lea     eax, [rdx-22h]
.text:000000000000255A                 cmp     al, 3Ah ; ':'
.text:000000000000255C                 ja      loc_2666
.text:0000000000002562                 mov     rbx, 400000000000027h
.text:000000000000256C                 bt      rbx, rax
.text:0000000000002570                 jnb     loc_28D4
.text:0000000000002576                 mov     eax, edx
.text:0000000000002578                 jmp     loc_2151
.text:000000000000257D ; ---------------------------------------------------------------------------
.text:000000000000257D
.text:000000000000257D loc_257D:                               ; CODE XREF: main+E0↑j
.text:000000000000257D                 mov     r13d, cs:optind@@GLIBC_2_2_5
.text:0000000000002584                 cmp     r13d, [rsp+148h+argc]
.text:0000000000002589                 jl      loc_26AF
.text:000000000000258F
.text:000000000000258F loc_258F:                               ; CODE XREF: main+A54↓j
.text:000000000000258F                 cmp     byte ptr [rsp+148h+var_130], 0
.text:0000000000002594                 jz      loc_29BE
.text:000000000000259A
.text:000000000000259A loc_259A:                               ; CODE XREF: main+A65↓j
.text:000000000000259A                 cmp     cs:dev_debug, 0
.text:00000000000025A1                 jz      short loc_25C0
.text:00000000000025A3                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:00000000000025AA                 lea     rdi, aCleaningEnviro ; "cleaning environ\n"
.text:00000000000025B1                 mov     edx, 11h        ; n
.text:00000000000025B6                 mov     esi, 1          ; size
.text:00000000000025BB                 call    _fwrite
.text:00000000000025C0
.text:00000000000025C0 loc_25C0:                               ; CODE XREF: main+931↑j
.text:00000000000025C0                 lea     rax, dummy_environ_7817
.text:00000000000025C7                 mov     r13d, cs:optind@@GLIBC_2_2_5
.text:00000000000025CE                 mov     cs:environ@@GLIBC_2_2_5, rax
.text:00000000000025D5
.text:00000000000025D5 loc_25D5:                               ; CODE XREF: main+D56↓j
.text:00000000000025D5                                         ; main+DF7↓j
.text:00000000000025D5                 mov     r14d, [rsp+148h+argc]
.text:00000000000025DA                 cmp     r13d, r14d
.text:00000000000025DD                 jge     loc_272F
.text:00000000000025E3                 lea     rbp, aSetenvS   ; "setenv:   %s\n"
.text:00000000000025EA                 jmp     short loc_2622
.text:00000000000025EA ; ---------------------------------------------------------------------------
.text:00000000000025EC                 align 10h
.text:00000000000025F0
.text:00000000000025F0 loc_25F0:                               ; CODE XREF: main+9D9↓j
.text:00000000000025F0                                         ; main+9F4↓j
.text:00000000000025F0                 movsxd  rax, cs:optind@@GLIBC_2_2_5
.text:00000000000025F7                 mov     rdi, [r15+rax*8] ; string
.text:00000000000025FB                 call    _putenv
.text:0000000000002600                 test    eax, eax
.text:0000000000002602                 jnz     loc_302A
.text:0000000000002608                 mov     eax, cs:optind@@GLIBC_2_2_5
.text:000000000000260E                 lea     r13d, [rax+1]
.text:0000000000002612                 cmp     r13d, r14d
.text:0000000000002615                 mov     cs:optind@@GLIBC_2_2_5, r13d
.text:000000000000261C                 jge     loc_272F
.text:0000000000002622
.text:0000000000002622 loc_2622:                               ; CODE XREF: main+97A↑j
.text:0000000000002622                 movsxd  rax, r13d
.text:0000000000002625                 mov     esi, 3Dh ; '='  ; c
.text:000000000000262A                 mov     r12, [r15+rax*8]
.text:000000000000262E                 mov     rdi, r12        ; s
.text:0000000000002631                 call    _strchr
.text:0000000000002636                 test    rax, rax
.text:0000000000002639                 mov     rbx, rax
.text:000000000000263C                 jz      loc_27B0
.text:0000000000002642                 cmp     cs:dev_debug, 0
.text:0000000000002649                 jz      short loc_25F0
.text:000000000000264B                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000002652                 mov     rcx, r12
.text:0000000000002655                 mov     rdx, rbp
.text:0000000000002658                 mov     esi, 1
.text:000000000000265D                 xor     eax, eax
.text:000000000000265F                 call    ___fprintf_chk
.text:0000000000002664                 jmp     short loc_25F0
.text:0000000000002666 ; ---------------------------------------------------------------------------
.text:0000000000002666
.text:0000000000002666 loc_2666:                               ; CODE XREF: main+8EC↑j
.text:0000000000002666                 cmp     dl, 5Fh ; '_'
.text:0000000000002669                 jnz     loc_28D4
.text:000000000000266F                 test    r11b, r11b
.text:0000000000002672                 mov     eax, 20h ; ' '
.text:0000000000002677                 jnz     loc_2151
.text:000000000000267D                 add     rbx, 2
.text:0000000000002681                 mov     r9d, r11d
.text:0000000000002684                 mov     r8d, 1
.text:000000000000268A                 jmp     loc_2121
.text:000000000000268F ; ---------------------------------------------------------------------------
.text:000000000000268F
.text:000000000000268F loc_268F:                               ; CODE XREF: main+527↑j
.text:000000000000268F                 cmp     qword ptr [r10+8], 0
.text:0000000000002694                 jz      loc_2200
.text:000000000000269A                 nop     word ptr [rax+rax+00h]
.text:00000000000026A0
.text:00000000000026A0 loc_26A0:                               ; CODE XREF: main+A38↓j
.text:00000000000026A0                 add     r14, 8
.text:00000000000026A4                 cmp     qword ptr [r14], 0
.text:00000000000026A8                 jnz     short loc_26A0
.text:00000000000026AA                 jmp     loc_2200
.text:00000000000026AF ; ---------------------------------------------------------------------------
.text:00000000000026AF
.text:00000000000026AF loc_26AF:                               ; CODE XREF: main+919↑j
.text:00000000000026AF                 movsxd  rax, r13d
.text:00000000000026B2                 lea     rsi, aLt+2      ; s2
.text:00000000000026B9                 mov     rdi, [r15+rax*8] ; s1
.text:00000000000026BD                 call    _strcmp
.text:00000000000026C2                 test    eax, eax
.text:00000000000026C4                 jnz     loc_258F
.text:00000000000026CA                 add     r13d, 1
.text:00000000000026CE                 mov     cs:optind@@GLIBC_2_2_5, r13d
.text:00000000000026D5                 jmp     loc_259A
.text:00000000000026DA ; ---------------------------------------------------------------------------
.text:00000000000026DA
.text:00000000000026DA loc_26DA:                               ; CODE XREF: main+358↑j
.text:00000000000026DA                 mov     rdi, cs:usvars
.text:00000000000026E1                 test    rdi, rdi
.text:00000000000026E4                 jz      loc_2A6C
.text:00000000000026EA                 mov     rax, 0AAAAAAAAAAAAAA9h
.text:00000000000026F4                 cmp     rcx, rax
.text:00000000000026F7                 ja      loc_2A99
.text:00000000000026FD                 mov     rax, rcx
.text:0000000000002700                 shr     rax, 1
.text:0000000000002703                 lea     rcx, [rcx+rax+1]
.text:0000000000002708
.text:0000000000002708 loc_2708:                               ; CODE XREF: main+E23↓j
.text:0000000000002708                 lea     rsi, ds:0[rcx*8]
.text:0000000000002710                 mov     cs:usvars_alloc, rcx
.text:0000000000002717                 call    xrealloc
.text:000000000000271C                 mov     cs:usvars, rax
.text:0000000000002723                 mov     rax, cs:usvars_used
.text:000000000000272A                 jmp     loc_1FCE
.text:000000000000272F ; ---------------------------------------------------------------------------
.text:000000000000272F
.text:000000000000272F loc_272F:                               ; CODE XREF: main+96D↑j
.text:000000000000272F                                         ; main+9AC↑j
.text:000000000000272F                 cmp     [rsp+148h+path], 0
.text:0000000000002735                 jz      short loc_2742
.text:0000000000002737                 cmp     r13d, [rsp+148h+argc]
.text:000000000000273C                 jge     loc_2FFA
.text:0000000000002742
.text:0000000000002742 loc_2742:                               ; CODE XREF: main+AC5↑j
.text:0000000000002742                 mov     rbx, cs:environ@@GLIBC_2_2_5
.text:0000000000002749                 mov     rdx, [rbx]
.text:000000000000274C                 test    rdx, rdx
.text:000000000000274F                 jz      short loc_2785
.text:0000000000002751                 cmp     byte ptr [rsp+148h+var_138], 1
.text:0000000000002756                 lea     r12, aSC        ; "%s%c"
.text:000000000000275D                 sbb     ebp, ebp
.text:000000000000275F                 and     ebp, 0Ah
.text:0000000000002762                 nop     word ptr [rax+rax+00h]
.text:0000000000002768
.text:0000000000002768 loc_2768:                               ; CODE XREF: main+B13↓j
.text:0000000000002768                 add     rbx, 8
.text:000000000000276C                 xor     eax, eax
.text:000000000000276E                 mov     ecx, ebp
.text:0000000000002770                 mov     rsi, r12
.text:0000000000002773                 mov     edi, 1
.text:0000000000002778                 call    ___printf_chk
.text:000000000000277D                 mov     rdx, [rbx]
.text:0000000000002780                 test    rdx, rdx
.text:0000000000002783                 jnz     short loc_2768
.text:0000000000002785
.text:0000000000002785 loc_2785:                               ; CODE XREF: main+ADF↑j
.text:0000000000002785                 xor     eax, eax
.text:0000000000002787
.text:0000000000002787 loc_2787:                               ; CODE XREF: main+D49↓j
.text:0000000000002787                                         ; main+F83↓j ...
.text:0000000000002787                 mov     rcx, [rsp+148h+var_40]
.text:000000000000278F                 xor     rcx, fs:28h
.text:0000000000002798                 jnz     loc_2FF5
.text:000000000000279E                 add     rsp, 118h
.text:00000000000027A5                 pop     rbx
.text:00000000000027A6                 pop     rbp
.text:00000000000027A7                 pop     r12
.text:00000000000027A9                 pop     r13
.text:00000000000027AB                 pop     r14
.text:00000000000027AD                 pop     r15
.text:00000000000027AF                 retn
.text:00000000000027B0 ; ---------------------------------------------------------------------------
.text:00000000000027B0
.text:00000000000027B0 loc_27B0:                               ; CODE XREF: main+9CC↑j
.text:00000000000027B0                 cmp     r13d, [rsp+148h+argc]
.text:00000000000027B5                 jge     short loc_27C2
.text:00000000000027B7                 cmp     byte ptr [rsp+148h+var_138], 0
.text:00000000000027BC                 jnz     loc_2AB6
.text:00000000000027C2
.text:00000000000027C2 loc_27C2:                               ; CODE XREF: main+B45↑j
.text:00000000000027C2                 mov     r13d, 4
.text:00000000000027C8                 mov     r12d, 1
.text:00000000000027CE                 mov     [rsp+148h+var_138], r15
.text:00000000000027D3                 jmp     short loc_27EA
.text:00000000000027D3 ; ---------------------------------------------------------------------------
.text:00000000000027D5                 align 8
.text:00000000000027D8
.text:00000000000027D8 loc_27D8:                               ; CODE XREF: main+B87↓j
.text:00000000000027D8                                         ; main+BE8↓j ...
.text:00000000000027D8                 add     r12d, 1
.text:00000000000027DC                 add     r13, 4
.text:00000000000027E0                 cmp     r12d, 41h ; 'A'
.text:00000000000027E4                 jz      loc_2908
.text:00000000000027EA
.text:00000000000027EA loc_27EA:                               ; CODE XREF: main+B63↑j
.text:00000000000027EA                 mov     rax, cs:signals
.text:00000000000027F1                 mov     eax, [rax+r13]
.text:00000000000027F5                 test    eax, eax
.text:00000000000027F7                 jz      short loc_27D8
.text:00000000000027F9                 lea     r15, [rsp+148h+set]
.text:00000000000027FE                 lea     ebp, [rax-2]
.text:0000000000002801                 xor     esi, esi        ; act
.text:0000000000002803                 mov     edi, r12d       ; sig
.text:0000000000002806                 lea     ebx, [rax-1]
.text:0000000000002809                 mov     rdx, r15        ; oact
.text:000000000000280C                 and     ebp, 0FFFFFFFDh
.text:000000000000280F                 call    _sigaction
.text:0000000000002814                 test    eax, eax
.text:0000000000002816                 mov     r14d, eax
.text:0000000000002819                 jz      short loc_2823
.text:000000000000281B                 test    ebp, ebp
.text:000000000000281D                 jnz     loc_2FC6
.text:0000000000002823
.text:0000000000002823 loc_2823:                               ; CODE XREF: main+BA9↑j
.text:0000000000002823                 test    r14d, r14d
.text:0000000000002826                 jnz     short loc_2851
.text:0000000000002828                 xor     eax, eax
.text:000000000000282A                 cmp     ebx, 1
.text:000000000000282D                 mov     rsi, r15        ; act
.text:0000000000002830                 setnbe  al
.text:0000000000002833                 mov     edi, r12d       ; sig
.text:0000000000002836                 xor     edx, edx        ; oact
.text:0000000000002838                 mov     [rsp+148h+set.__val], rax
.text:000000000000283D                 call    _sigaction
.text:0000000000002842                 test    eax, eax
.text:0000000000002844                 mov     r14d, eax
.text:0000000000002847                 jz      short loc_2851
.text:0000000000002849                 test    ebp, ebp
.text:000000000000284B                 jnz     loc_2EA4
.text:0000000000002851
.text:0000000000002851 loc_2851:                               ; CODE XREF: main+BB6↑j
.text:0000000000002851                                         ; main+BD7↑j
.text:0000000000002851                 cmp     cs:dev_debug, 0
.text:0000000000002858                 jz      loc_27D8
.text:000000000000285E                 lea     rbp, [rsp+148h+var_58]
.text:0000000000002866                 mov     edi, r12d
.text:0000000000002869                 mov     rsi, rbp
.text:000000000000286C                 call    sig2str
.text:0000000000002871                 cmp     cs:dev_debug, 0
.text:0000000000002878                 jz      loc_27D8
.text:000000000000287E                 lea     rcx, accept+2   ; ""
.text:0000000000002885                 lea     rax, aFailureIgnored ; " (failure ignored)"
.text:000000000000288C                 test    r14d, r14d
.text:000000000000288F                 lea     r9, aDefault    ; "DEFAULT"
.text:0000000000002896                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:000000000000289D                 lea     rdx, aResetSignalSDT ; "Reset signal %s (%d) to %s%s\n"
.text:00000000000028A4                 cmovz   rax, rcx
.text:00000000000028A8                 cmp     ebx, 1
.text:00000000000028AB                 lea     rbx, aIgnore    ; "IGNORE"
.text:00000000000028B2                 mov     r8d, r12d
.text:00000000000028B5                 mov     rcx, rbp
.text:00000000000028B8                 mov     esi, 1
.text:00000000000028BD                 cmova   r9, rbx
.text:00000000000028C1                 sub     rsp, 8
.text:00000000000028C5                 push    rax
.text:00000000000028C6                 xor     eax, eax
.text:00000000000028C8                 call    ___fprintf_chk
.text:00000000000028CD                 pop     rax
.text:00000000000028CE                 pop     rdx
.text:00000000000028CF                 jmp     loc_27D8
.text:00000000000028D4 ; ---------------------------------------------------------------------------
.text:00000000000028D4
.text:00000000000028D4 loc_28D4:                               ; CODE XREF: main+900↑j
.text:00000000000028D4                                         ; main+9F9↑j
.text:00000000000028D4                 cmp     dl, 63h ; 'c'
.text:00000000000028D7                 jz      loc_217E
.text:00000000000028DD                 cmp     dl, 72h ; 'r'
.text:00000000000028E0                 jz      loc_2E14
.text:00000000000028E6                 jg      loc_2A9E
.text:00000000000028EC                 cmp     dl, 66h ; 'f'
.text:00000000000028EF                 jz      loc_2ADC
.text:00000000000028F5                 cmp     dl, 6Eh ; 'n'
.text:00000000000028F8                 jnz     loc_300B
.text:00000000000028FE                 mov     eax, 0Ah
.text:0000000000002903                 jmp     loc_2151
.text:0000000000002908 ; ---------------------------------------------------------------------------
.text:0000000000002908
.text:0000000000002908 loc_2908:                               ; CODE XREF: main+B74↑j
.text:0000000000002908                 call    ___errno_location
.text:000000000000290D                 cmp     cs:sig_mask_changed, 0
.text:0000000000002914                 mov     r15, [rsp+148h+var_138]
.text:0000000000002919                 mov     [rsp+148h+var_138], rax
.text:000000000000291E                 jnz     loc_2CFE
.text:0000000000002924
.text:0000000000002924 loc_2924:                               ; CODE XREF: main+1175↓j
.text:0000000000002924                 cmp     cs:report_signal_handling, 0
.text:000000000000292B                 jz      short loc_2932
.text:000000000000292D                 call    list_signal_handling
.text:0000000000002932
.text:0000000000002932 loc_2932:                               ; CODE XREF: main+CBB↑j
.text:0000000000002932                 cmp     [rsp+148h+path], 0
.text:0000000000002938                 jz      short loc_2959
.text:000000000000293A                 cmp     cs:dev_debug, 0
.text:0000000000002941                 jnz     loc_2AE6
.text:0000000000002947
.text:0000000000002947 loc_2947:                               ; CODE XREF: main+EA2↓j
.text:0000000000002947                 mov     rdi, [rsp+148h+path] ; path
.text:000000000000294C                 call    _chdir
.text:0000000000002951                 test    eax, eax
.text:0000000000002953                 jnz     loc_3093
.text:0000000000002959
.text:0000000000002959 loc_2959:                               ; CODE XREF: main+CC8↑j
.text:0000000000002959                 cmp     cs:dev_debug, 0
.text:0000000000002960                 jnz     loc_2C85
.text:0000000000002966
.text:0000000000002966 loc_2966:                               ; CODE XREF: main+1089↓j
.text:0000000000002966                 movsxd  rax, cs:optind@@GLIBC_2_2_5
.text:000000000000296D                 lea     rax, [r15+rax*8]
.text:0000000000002971                 mov     rdi, [rax]      ; file
.text:0000000000002974                 mov     rsi, rax        ; argv
.text:0000000000002977                 call    _execvp
.text:000000000000297C                 mov     rax, [rsp+148h+var_138]
.text:0000000000002981                 cmp     dword ptr [rax], 2
.text:0000000000002984                 jz      loc_2B85
.text:000000000000298A                 movsxd  rax, cs:optind@@GLIBC_2_2_5
.text:0000000000002991                 mov     rdi, [r15+rax*8]
.text:0000000000002995                 call    quote
.text:000000000000299A                 mov     rcx, rax
.text:000000000000299D                 mov     rax, [rsp+148h+var_138]
.text:00000000000029A2                 lea     rdx, format+4   ; format
.text:00000000000029A9                 xor     edi, edi        ; status
.text:00000000000029AB                 mov     esi, [rax]      ; errnum
.text:00000000000029AD                 xor     eax, eax
.text:00000000000029AF                 call    _error
.text:00000000000029B4                 mov     eax, 7Eh ; '~'
.text:00000000000029B9                 jmp     loc_2787
.text:00000000000029BE ; ---------------------------------------------------------------------------
.text:00000000000029BE
.text:00000000000029BE loc_29BE:                               ; CODE XREF: main+924↑j
.text:00000000000029BE                 cmp     cs:usvars_used, 0
.text:00000000000029C6                 jz      loc_25D5
.text:00000000000029CC                 mov     r13, cs:usvars
.text:00000000000029D3                 xor     r12d, r12d
.text:00000000000029D6                 lea     rbp, aUnsetS    ; "unset:    %s\n"
.text:00000000000029DD                 jmp     short loc_2A07
.text:00000000000029DD ; ---------------------------------------------------------------------------
.text:00000000000029DF                 align 20h
.text:00000000000029E0
.text:00000000000029E0 loc_29E0:                               ; CODE XREF: main+DA6↓j
.text:00000000000029E0                                         ; main+DC3↓j
.text:00000000000029E0                 mov     r13, cs:usvars
.text:00000000000029E7                 add     rbx, r13
.text:00000000000029EA                 mov     rdi, [rbx]      ; name
.text:00000000000029ED                 call    _unsetenv
.text:00000000000029F2                 test    eax, eax
.text:00000000000029F4                 jnz     loc_2EDD
.text:00000000000029FA                 add     r12, 1
.text:00000000000029FE                 cmp     r12, cs:usvars_used
.text:0000000000002A05                 jnb     short loc_2A60
.text:0000000000002A07
.text:0000000000002A07 loc_2A07:                               ; CODE XREF: main+D6D↑j
.text:0000000000002A07                 cmp     cs:dev_debug, 0
.text:0000000000002A0E                 lea     rbx, ds:0[r12*8]
.text:0000000000002A16                 jz      short loc_29E0
.text:0000000000002A18                 mov     rcx, [r13+r12*8+0]
.text:0000000000002A1D                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000002A24                 mov     rdx, rbp
.text:0000000000002A27                 mov     esi, 1
.text:0000000000002A2C                 xor     eax, eax
.text:0000000000002A2E                 call    ___fprintf_chk
.text:0000000000002A33                 jmp     short loc_29E0
.text:0000000000002A35 ; ---------------------------------------------------------------------------
.text:0000000000002A35
.text:0000000000002A35 loc_2A35:                               ; CODE XREF: main+582↑j
.text:0000000000002A35                 call    quote
.text:0000000000002A3A                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000002A41                 lea     rdx, aS         ; "     &    %s\n"
.text:0000000000002A48                 mov     rcx, rax
.text:0000000000002A4B                 mov     esi, 1
.text:0000000000002A50                 xor     eax, eax
.text:0000000000002A52                 add     r14, 8
.text:0000000000002A56                 call    ___fprintf_chk
.text:0000000000002A5B                 jmp     loc_21E3
.text:0000000000002A60 ; ---------------------------------------------------------------------------
.text:0000000000002A60
.text:0000000000002A60 loc_2A60:                               ; CODE XREF: main+D95↑j
.text:0000000000002A60                 mov     r13d, cs:optind@@GLIBC_2_2_5
.text:0000000000002A67                 jmp     loc_25D5
.text:0000000000002A6C ; ---------------------------------------------------------------------------
.text:0000000000002A6C
.text:0000000000002A6C loc_2A6C:                               ; CODE XREF: main+A74↑j
.text:0000000000002A6C                 test    rcx, rcx
.text:0000000000002A6F                 mov     eax, 10h
.text:0000000000002A74                 mov     edx, 8
.text:0000000000002A79                 cmovz   rcx, rax
.text:0000000000002A7D                 mov     rax, rdx
.text:0000000000002A80                 xor     esi, esi
.text:0000000000002A82                 mul     rcx
.text:0000000000002A85                 jo      loc_2ED3
.text:0000000000002A8B
.text:0000000000002A8B loc_2A8B:                               ; CODE XREF: main+1268↓j
.text:0000000000002A8B                 test    rax, rax
.text:0000000000002A8E                 js      short loc_2A99
.text:0000000000002A90                 test    rsi, rsi
.text:0000000000002A93                 jz      loc_2708
.text:0000000000002A99
.text:0000000000002A99 loc_2A99:                               ; CODE XREF: main+A87↑j
.text:0000000000002A99                                         ; main+E1E↑j
.text:0000000000002A99                 call    xalloc_die
.text:0000000000002A9E ; ---------------------------------------------------------------------------
.text:0000000000002A9E
.text:0000000000002A9E loc_2A9E:                               ; CODE XREF: main+C76↑j
.text:0000000000002A9E                 cmp     dl, 74h ; 't'
.text:0000000000002AA1                 jz      short loc_2B17
.text:0000000000002AA3                 cmp     dl, 76h ; 'v'
.text:0000000000002AA6                 jnz     loc_300B
.text:0000000000002AAC                 mov     eax, 0Bh
.text:0000000000002AB1                 jmp     loc_2151
.text:0000000000002AB6 ; ---------------------------------------------------------------------------
.text:0000000000002AB6
.text:0000000000002AB6 loc_2AB6:                               ; CODE XREF: main+B4C↑j
.text:0000000000002AB6                 lea     rsi, aCannotSpecifyN ; "cannot specify --null (-0) with command"
.text:0000000000002ABD                 mov     edx, 5          ; category
.text:0000000000002AC2
.text:0000000000002AC2 loc_2AC2:                               ; CODE XREF: main+11FB↓j
.text:0000000000002AC2                                         ; main+1396↓j
.text:0000000000002AC2                 xor     edi, edi        ; domainname
.text:0000000000002AC4                 call    _dcgettext
.text:0000000000002AC9                 xor     esi, esi        ; errnum
.text:0000000000002ACB                 mov     rdx, rax        ; format
.text:0000000000002ACE                 xor     edi, edi        ; status
.text:0000000000002AD0                 xor     eax, eax
.text:0000000000002AD2                 call    _error
.text:0000000000002AD7                 jmp     loc_1D85
.text:0000000000002ADC ; ---------------------------------------------------------------------------
.text:0000000000002ADC
.text:0000000000002ADC loc_2ADC:                               ; CODE XREF: main+C7F↑j
.text:0000000000002ADC                 mov     eax, 0Ch
.text:0000000000002AE1                 jmp     loc_2151
.text:0000000000002AE6 ; ---------------------------------------------------------------------------
.text:0000000000002AE6
.text:0000000000002AE6 loc_2AE6:                               ; CODE XREF: main+CD1↑j
.text:0000000000002AE6                 mov     rsi, [rsp+148h+path]
.text:0000000000002AEB                 mov     edi, 4
.text:0000000000002AF0                 call    quotearg_style
.text:0000000000002AF5                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000002AFC                 lea     rdx, aChdirS    ; "chdir:    %s\n"
.text:0000000000002B03                 mov     rcx, rax
.text:0000000000002B06                 mov     esi, 1
.text:0000000000002B0B                 xor     eax, eax
.text:0000000000002B0D                 call    ___fprintf_chk
.text:0000000000002B12                 jmp     loc_2947
.text:0000000000002B17 ; ---------------------------------------------------------------------------
.text:0000000000002B17
.text:0000000000002B17 loc_2B17:                               ; CODE XREF: main+E31↑j
.text:0000000000002B17                 mov     eax, 9
.text:0000000000002B1C                 jmp     loc_2151
.text:0000000000002B21 ; ---------------------------------------------------------------------------
.text:0000000000002B21
.text:0000000000002B21 loc_2B21:                               ; CODE XREF: main+5DF↑j
.text:0000000000002B21                 mov     [rsp+148h+argc], 0
.text:0000000000002B29                 jmp     loc_2271
.text:0000000000002B2E ; ---------------------------------------------------------------------------
.text:0000000000002B2E
.text:0000000000002B2E loc_2B2E:                               ; CODE XREF: main+7B7↑j
.text:0000000000002B2E                 cmp     cs:dev_debug, 0
.text:0000000000002B35                 jz      loc_2485
.text:0000000000002B3B                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000002B42                 lea     rdx, aReplacingSWith ; "replacing ${%s} with null string\n"
.text:0000000000002B49                 mov     esi, 1
.text:0000000000002B4E                 xor     eax, eax
.text:0000000000002B50                 mov     byte ptr [rsp+148h+s], r11b
.text:0000000000002B55                 mov     [rsp+148h+var_118], r10
.text:0000000000002B5A                 mov     byte ptr [rsp+148h+var_120], r9b
.text:0000000000002B5F                 mov     byte ptr [rsp+148h+src], r8b
.text:0000000000002B64                 call    ___fprintf_chk
.text:0000000000002B69                 movzx   r11d, byte ptr [rsp+148h+s]
.text:0000000000002B6F                 mov     r10, [rsp+148h+var_118]
.text:0000000000002B74                 movzx   r9d, byte ptr [rsp+148h+var_120]
.text:0000000000002B7A                 movzx   r8d, byte ptr [rsp+148h+src]
.text:0000000000002B80                 jmp     loc_2485
.text:0000000000002B85 ; ---------------------------------------------------------------------------
.text:0000000000002B85
.text:0000000000002B85 loc_2B85:                               ; CODE XREF: main+D14↑j
.text:0000000000002B85                 movsxd  rax, cs:optind@@GLIBC_2_2_5
.text:0000000000002B8C                 mov     rdi, [r15+rax*8]
.text:0000000000002B90                 call    quote
.text:0000000000002B95                 mov     rcx, rax
.text:0000000000002B98                 mov     rax, [rsp+148h+var_138]
.text:0000000000002B9D                 lea     rdx, format+4   ; format
.text:0000000000002BA4                 xor     edi, edi        ; status
.text:0000000000002BA6                 mov     esi, [rax]      ; errnum
.text:0000000000002BA8                 xor     eax, eax
.text:0000000000002BAA                 call    _error
.text:0000000000002BAF                 movsxd  rax, cs:optind@@GLIBC_2_2_5
.text:0000000000002BB6                 mov     esi, 20h ; ' '  ; c
.text:0000000000002BBB                 mov     rdi, [r15+rax*8] ; s
.text:0000000000002BBF                 call    _strchr
.text:0000000000002BC4                 test    rax, rax
.text:0000000000002BC7                 jz      loc_2E1E
.text:0000000000002BCD                 lea     rsi, aUseVSToPassOpt ; "use -[v]S to pass options in shebang li"...
.text:0000000000002BD4                 mov     edx, 5          ; category
.text:0000000000002BD9                 xor     edi, edi        ; domainname
.text:0000000000002BDB                 call    _dcgettext
.text:0000000000002BE0                 xor     esi, esi        ; errnum
.text:0000000000002BE2                 mov     rdx, rax        ; format
.text:0000000000002BE5                 xor     edi, edi        ; status
.text:0000000000002BE7                 xor     eax, eax
.text:0000000000002BE9                 call    _error
.text:0000000000002BEE                 mov     eax, 7Fh
.text:0000000000002BF3                 jmp     loc_2787
.text:0000000000002BF8 ; ---------------------------------------------------------------------------
.text:0000000000002BF8
.text:0000000000002BF8 loc_2BF8:                               ; CODE XREF: main+7DC↑j
.text:0000000000002BF8                 mov     rdi, [rsp+148h+src]
.text:0000000000002BFD                 mov     byte ptr [rsp+148h+var_108], r11b
.text:0000000000002C02                 mov     [rsp+148h+s], r10
.text:0000000000002C07                 mov     byte ptr [rsp+148h+var_118], r9b
.text:0000000000002C0C                 mov     [rsp+148h+var_120], rcx
.text:0000000000002C11                 call    quote
.text:0000000000002C16                 mov     rcx, [rsp+148h+var_120]
.text:0000000000002C1B                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000002C22                 lea     rdx, aExpandingSInto ; "expanding ${%s} into %s\n"
.text:0000000000002C29                 mov     r8, rax
.text:0000000000002C2C                 mov     esi, 1
.text:0000000000002C31                 xor     eax, eax
.text:0000000000002C33                 call    ___fprintf_chk
.text:0000000000002C38                 movzx   r11d, byte ptr [rsp+148h+var_108]
.text:0000000000002C3E                 mov     r10, [rsp+148h+s]
.text:0000000000002C43                 movzx   r9d, byte ptr [rsp+148h+var_118]
.text:0000000000002C49                 jmp     loc_2452
.text:0000000000002C4E ; ---------------------------------------------------------------------------
.text:0000000000002C4E
.text:0000000000002C4E loc_2C4E:                               ; CODE XREF: main+56A↑j
.text:0000000000002C4E                 mov     rdi, [r10+8]
.text:0000000000002C52                 lea     r14, [r10+10h]
.text:0000000000002C56                 call    quote
.text:0000000000002C5B                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000002C62                 lea     rdx, aIntoS     ; " into:    %s\n"
.text:0000000000002C69                 mov     rcx, rax
.text:0000000000002C6C                 mov     esi, 1
.text:0000000000002C71                 xor     eax, eax
.text:0000000000002C73                 call    ___fprintf_chk
.text:0000000000002C78                 mov     r10, [rsp+148h+src]
.text:0000000000002C7D                 mov     rbx, r10
.text:0000000000002C80                 jmp     loc_21E3
.text:0000000000002C85 ; ---------------------------------------------------------------------------
.text:0000000000002C85
.text:0000000000002C85 loc_2C85:                               ; CODE XREF: main+CF0↑j
.text:0000000000002C85                 movsxd  rax, cs:optind@@GLIBC_2_2_5
.text:0000000000002C8C                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000002C93                 lea     rdx, aExecutingS ; "executing: %s\n"
.text:0000000000002C9A                 mov     esi, 1
.text:0000000000002C9F                 lea     r12, aArgDS     ; "   arg[%d]= %s\n"
.text:0000000000002CA6                 mov     rcx, [r15+rax*8]
.text:0000000000002CAA                 xor     eax, eax
.text:0000000000002CAC                 call    ___fprintf_chk
.text:0000000000002CB1                 movsxd  rbx, cs:optind@@GLIBC_2_2_5
.text:0000000000002CB8                 jmp     short loc_2CF1
.text:0000000000002CBA ; ---------------------------------------------------------------------------
.text:0000000000002CBA
.text:0000000000002CBA loc_2CBA:                               ; CODE XREF: main+1087↓j
.text:0000000000002CBA                 cmp     cs:dev_debug, 0
.text:0000000000002CC1                 jz      short loc_2CED
.text:0000000000002CC3                 mov     rdi, [r15+rbx*8]
.text:0000000000002CC7                 call    quote
.text:0000000000002CCC                 mov     ecx, ebp
.text:0000000000002CCE                 sub     ecx, cs:optind@@GLIBC_2_2_5
.text:0000000000002CD4                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000002CDB                 mov     r8, rax
.text:0000000000002CDE                 mov     rdx, r12
.text:0000000000002CE1                 mov     esi, 1
.text:0000000000002CE6                 xor     eax, eax
.text:0000000000002CE8                 call    ___fprintf_chk
.text:0000000000002CED
.text:0000000000002CED loc_2CED:                               ; CODE XREF: main+1051↑j
.text:0000000000002CED                 add     rbx, 1
.text:0000000000002CF1
.text:0000000000002CF1 loc_2CF1:                               ; CODE XREF: main+1048↑j
.text:0000000000002CF1                 cmp     ebx, [rsp+148h+argc]
.text:0000000000002CF5                 mov     ebp, ebx
.text:0000000000002CF7                 jl      short loc_2CBA
.text:0000000000002CF9                 jmp     loc_2966
.text:0000000000002CFE ; ---------------------------------------------------------------------------
.text:0000000000002CFE
.text:0000000000002CFE loc_2CFE:                               ; CODE XREF: main+CAE↑j
.text:0000000000002CFE                 lea     r12, [rsp+148h+set]
.text:0000000000002D03                 mov     ebx, 1
.text:0000000000002D08                 mov     rdi, r12        ; set
.text:0000000000002D0B                 call    _sigemptyset
.text:0000000000002D10                 xor     esi, esi        ; set
.text:0000000000002D12                 xor     edi, edi        ; how
.text:0000000000002D14                 mov     rdx, r12        ; oset
.text:0000000000002D17                 call    _sigprocmask
.text:0000000000002D1C                 test    eax, eax
.text:0000000000002D1E                 jnz     loc_2F9D
.text:0000000000002D24                 lea     rbp, block_signals
.text:0000000000002D2B                 lea     r14, [rsp+148h+var_58]
.text:0000000000002D33                 lea     r13, aBlock     ; "BLOCK"
.text:0000000000002D3A                 mov     [rsp+148h+var_130], r15
.text:0000000000002D3F                 jmp     short loc_2D64
.text:0000000000002D3F ; ---------------------------------------------------------------------------
.text:0000000000002D41                 align 8
.text:0000000000002D48
.text:0000000000002D48 loc_2D48:                               ; CODE XREF: main+1102↓j
.text:0000000000002D48                 mov     rdi, r12        ; set
.text:0000000000002D4B                 mov     r15, r13
.text:0000000000002D4E                 call    _sigaddset
.text:0000000000002D53
.text:0000000000002D53 loc_2D53:                               ; CODE XREF: main+1125↓j
.text:0000000000002D53                 cmp     cs:dev_debug, 0
.text:0000000000002D5A                 jnz     short loc_2D97
.text:0000000000002D5C
.text:0000000000002D5C loc_2D5C:                               ; CODE XREF: main+1112↓j
.text:0000000000002D5C                                         ; main+1138↓j ...
.text:0000000000002D5C                 add     ebx, 1
.text:0000000000002D5F                 cmp     ebx, 41h ; 'A'
.text:0000000000002D62                 jz      short loc_2DCF
.text:0000000000002D64
.text:0000000000002D64 loc_2D64:                               ; CODE XREF: main+10CF↑j
.text:0000000000002D64                 mov     esi, ebx        ; signo
.text:0000000000002D66                 mov     rdi, rbp        ; set
.text:0000000000002D69                 call    _sigismember
.text:0000000000002D6E                 test    eax, eax
.text:0000000000002D70                 mov     esi, ebx        ; signo
.text:0000000000002D72                 jnz     short loc_2D48
.text:0000000000002D74                 lea     rdi, unblock_signals ; set
.text:0000000000002D7B                 call    _sigismember
.text:0000000000002D80                 test    eax, eax
.text:0000000000002D82                 jz      short loc_2D5C
.text:0000000000002D84                 mov     esi, ebx        ; signo
.text:0000000000002D86                 mov     rdi, r12        ; set
.text:0000000000002D89                 lea     r15, unk_6C66
.text:0000000000002D90                 call    _sigdelset
.text:0000000000002D95                 jmp     short loc_2D53
.text:0000000000002D97 ; ---------------------------------------------------------------------------
.text:0000000000002D97
.text:0000000000002D97 loc_2D97:                               ; CODE XREF: main+10EA↑j
.text:0000000000002D97                 mov     rsi, r14
.text:0000000000002D9A                 mov     edi, ebx
.text:0000000000002D9C                 call    sig2str
.text:0000000000002DA1                 cmp     cs:dev_debug, 0
.text:0000000000002DA8                 jz      short loc_2D5C
.text:0000000000002DAA                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000002DB1                 lea     rdx, aSignalSDMaskSe ; "signal %s (%d) mask set to %s\n"
.text:0000000000002DB8                 mov     r9, r15
.text:0000000000002DBB                 mov     r8d, ebx
.text:0000000000002DBE                 mov     rcx, r14
.text:0000000000002DC1                 mov     esi, 1
.text:0000000000002DC6                 xor     eax, eax
.text:0000000000002DC8                 call    ___fprintf_chk
.text:0000000000002DCD                 jmp     short loc_2D5C
.text:0000000000002DCF ; ---------------------------------------------------------------------------
.text:0000000000002DCF
.text:0000000000002DCF loc_2DCF:                               ; CODE XREF: main+10F2↑j
.text:0000000000002DCF                 xor     edx, edx        ; oset
.text:0000000000002DD1                 mov     rsi, r12        ; set
.text:0000000000002DD4                 mov     edi, 2          ; how
.text:0000000000002DD9                 mov     r15, [rsp+148h+var_130]
.text:0000000000002DDE                 call    _sigprocmask
.text:0000000000002DE3                 test    eax, eax
.text:0000000000002DE5                 jz      loc_2924
.text:0000000000002DEB                 lea     rsi, aFailedToSetSig ; "failed to set signal process mask"
.text:0000000000002DF2                 mov     edx, 5          ; category
.text:0000000000002DF7                 xor     edi, edi        ; domainname
.text:0000000000002DF9                 call    _dcgettext
.text:0000000000002DFE                 mov     rdx, rax        ; format
.text:0000000000002E01                 mov     rax, [rsp+148h+var_138]
.text:0000000000002E06                 mov     edi, 7Dh ; '}'  ; status
.text:0000000000002E0B                 mov     esi, [rax]      ; errnum
.text:0000000000002E0D                 xor     eax, eax
.text:0000000000002E0F                 call    _error
.text:0000000000002E14
.text:0000000000002E14 loc_2E14:                               ; CODE XREF: main+C70↑j
.text:0000000000002E14                 mov     eax, 0Dh
.text:0000000000002E19                 jmp     loc_2151
.text:0000000000002E1E ; ---------------------------------------------------------------------------
.text:0000000000002E1E
.text:0000000000002E1E loc_2E1E:                               ; CODE XREF: main+F57↑j
.text:0000000000002E1E                 mov     eax, 7Fh
.text:0000000000002E23                 jmp     loc_2787
.text:0000000000002E28 ; ---------------------------------------------------------------------------
.text:0000000000002E28
.text:0000000000002E28 loc_2E28:                               ; CODE XREF: main+395↑j
.text:0000000000002E28                 cmp     eax, 0FFFFFF7Eh
.text:0000000000002E2D                 jnz     loc_1D85
.text:0000000000002E33                 xor     edi, edi        ; status
.text:0000000000002E35                 call    usage
.text:0000000000002E3A ; ---------------------------------------------------------------------------
.text:0000000000002E3A
.text:0000000000002E3A loc_2E3A:                               ; CODE XREF: main+133↑j
.text:0000000000002E3A                 mov     ebx, eax
.text:0000000000002E3C
.text:0000000000002E3C loc_2E3C:                               ; CODE XREF: main+1232↓j
.text:0000000000002E3C                 lea     rsi, aInvalidOptionC ; "invalid option -- '%c'"
.text:0000000000002E43                 mov     edx, 5          ; category
.text:0000000000002E48                 xor     edi, edi        ; domainname
.text:0000000000002E4A                 call    _dcgettext
.text:0000000000002E4F                 xor     esi, esi        ; errnum
.text:0000000000002E51                 mov     rdx, rax        ; format
.text:0000000000002E54                 mov     ecx, ebx
.text:0000000000002E56                 xor     edi, edi        ; status
.text:0000000000002E58                 xor     eax, eax
.text:0000000000002E5A                 call    _error
.text:0000000000002E5F                 mov     edx, 5
.text:0000000000002E64                 lea     rsi, aUseVSToPassOpt ; "use -[v]S to pass options in shebang li"...
.text:0000000000002E6B                 jmp     loc_2AC2
.text:0000000000002E70 ; ---------------------------------------------------------------------------
.text:0000000000002E70
.text:0000000000002E70 loc_2E70:                               ; CODE XREF: main+6BB↑j
.text:0000000000002E70                 lea     rsi, aOnlyVarnameExp ; "only ${VARNAME} expansion is supported,"...
.text:0000000000002E77                 mov     edx, 5          ; category
.text:0000000000002E7C                 xor     edi, edi        ; domainname
.text:0000000000002E7E                 call    _dcgettext
.text:0000000000002E83                 mov     rcx, r13
.text:0000000000002E86                 mov     rdx, rax        ; format
.text:0000000000002E89                 xor     esi, esi        ; errnum
.text:0000000000002E8B                 mov     edi, 7Dh ; '}'  ; status
.text:0000000000002E90                 xor     eax, eax
.text:0000000000002E92                 call    _error
.text:0000000000002E97
.text:0000000000002E97 loc_2E97:                               ; CODE XREF: main+14B↑j
.text:0000000000002E97                 cmp     eax, 20h ; ' '
.text:0000000000002E9A                 mov     ebx, eax
.text:0000000000002E9C                 jnz     loc_1D85
.text:0000000000002EA2                 jmp     short loc_2E3C
.text:0000000000002EA4 ; ---------------------------------------------------------------------------
.text:0000000000002EA4
.text:0000000000002EA4 loc_2EA4:                               ; CODE XREF: main+BDB↑j
.text:0000000000002EA4                 lea     rsi, aFailedToSetSig_0 ; "failed to set signal action for signal "...
.text:0000000000002EAB                 mov     edx, 5          ; category
.text:0000000000002EB0                 xor     edi, edi        ; domainname
.text:0000000000002EB2                 call    _dcgettext
.text:0000000000002EB7                 mov     rbx, rax
.text:0000000000002EBA                 call    ___errno_location
.text:0000000000002EBF                 mov     esi, [rax]      ; errnum
.text:0000000000002EC1                 mov     ecx, r12d
.text:0000000000002EC4                 mov     rdx, rbx        ; format
.text:0000000000002EC7                 mov     edi, 7Dh ; '}'  ; status
.text:0000000000002ECC                 xor     eax, eax
.text:0000000000002ECE                 call    _error
.text:0000000000002ED3
.text:0000000000002ED3 loc_2ED3:                               ; CODE XREF: main+E15↑j
.text:0000000000002ED3                 mov     esi, 1
.text:0000000000002ED8                 jmp     loc_2A8B
.text:0000000000002EDD ; ---------------------------------------------------------------------------
.text:0000000000002EDD
.text:0000000000002EDD loc_2EDD:                               ; CODE XREF: main+D84↑j
.text:0000000000002EDD                 mov     rdi, [rbx]
.text:0000000000002EE0                 call    quote
.text:0000000000002EE5                 lea     rsi, aCannotUnsetS ; "cannot unset %s"
.text:0000000000002EEC                 mov     edx, 5          ; category
.text:0000000000002EF1                 xor     edi, edi        ; domainname
.text:0000000000002EF3                 mov     rbp, rax
.text:0000000000002EF6                 call    _dcgettext
.text:0000000000002EFB                 mov     rbx, rax
.text:0000000000002EFE                 call    ___errno_location
.text:0000000000002F03                 mov     esi, [rax]      ; errnum
.text:0000000000002F05                 mov     rcx, rbp
.text:0000000000002F08                 mov     rdx, rbx        ; format
.text:0000000000002F0B                 mov     edi, 7Dh ; '}'  ; status
.text:0000000000002F10                 xor     eax, eax
.text:0000000000002F12                 call    _error
.text:0000000000002F17
.text:0000000000002F17 loc_2F17:                               ; CODE XREF: main+274↑j
.text:0000000000002F17                 lea     rsi, aInvalidBacksla ; "invalid backslash at end of string in -"...
.text:0000000000002F1E                 mov     edx, 5          ; category
.text:0000000000002F23                 xor     edi, edi        ; domainname
.text:0000000000002F25                 call    _dcgettext
.text:0000000000002F2A                 xor     esi, esi        ; errnum
.text:0000000000002F2C                 mov     rdx, rax        ; format
.text:0000000000002F2F                 mov     edi, 7Dh ; '}'  ; status
.text:0000000000002F34                 xor     eax, eax
.text:0000000000002F36                 call    _error
.text:0000000000002F3B
.text:0000000000002F3B loc_2F3B:                               ; CODE XREF: main+433↑j
.text:0000000000002F3B                 lea     rcx, __PRETTY_FUNCTION___7637 ; "validate_split_str"
.text:0000000000002F42                 lea     rsi, file       ; "../coreutils-8.31/src/env.c"
.text:0000000000002F49                 lea     rdi, assertion  ; "!(sq && dq)"
.text:0000000000002F50                 mov     edx, 134h       ; line
.text:0000000000002F55                 call    ___assert_fail
.text:0000000000002F5A ; ---------------------------------------------------------------------------
.text:0000000000002F5A
.text:0000000000002F5A loc_2F5A:                               ; CODE XREF: main+620↑j
.text:0000000000002F5A                 lea     rcx, __PRETTY_FUNCTION___7637 ; "validate_split_str"
.text:0000000000002F61                 lea     rsi, file       ; "../coreutils-8.31/src/env.c"
.text:0000000000002F68                 lea     rdi, assertion  ; "!(sq && dq)"
.text:0000000000002F6F                 mov     edx, 12Fh       ; line
.text:0000000000002F74                 call    ___assert_fail
.text:0000000000002F79 ; ---------------------------------------------------------------------------
.text:0000000000002F79
.text:0000000000002F79 loc_2F79:                               ; CODE XREF: main+459↑j
.text:0000000000002F79                                         ; main+646↑j
.text:0000000000002F79                 lea     rsi, aNoTerminatingQ ; "no terminating quote in -S string"
.text:0000000000002F80                 mov     edx, 5          ; category
.text:0000000000002F85                 xor     edi, edi        ; domainname
.text:0000000000002F87                 call    _dcgettext
.text:0000000000002F8C                 xor     esi, esi        ; errnum
.text:0000000000002F8E                 mov     rdx, rax        ; format
.text:0000000000002F91                 mov     edi, 7Dh ; '}'  ; status
.text:0000000000002F96                 xor     eax, eax
.text:0000000000002F98                 call    _error
.text:0000000000002F9D
.text:0000000000002F9D loc_2F9D:                               ; CODE XREF: main+10AE↑j
.text:0000000000002F9D                 lea     rsi, aFailedToGetSig ; "failed to get signal process mask"
.text:0000000000002FA4                 mov     edx, 5          ; category
.text:0000000000002FA9                 xor     edi, edi        ; domainname
.text:0000000000002FAB                 call    _dcgettext
.text:0000000000002FB0                 mov     rdx, rax        ; format
.text:0000000000002FB3                 mov     rax, [rsp+148h+var_138]
.text:0000000000002FB8                 mov     edi, 7Dh ; '}'  ; status
.text:0000000000002FBD                 mov     esi, [rax]      ; errnum
.text:0000000000002FBF                 xor     eax, eax
.text:0000000000002FC1                 call    _error
.text:0000000000002FC6
.text:0000000000002FC6 loc_2FC6:                               ; CODE XREF: main+BAD↑j
.text:0000000000002FC6                 lea     rsi, aFailedToGetSig_0 ; "failed to get signal action for signal "...
.text:0000000000002FCD                 mov     edx, 5          ; category
.text:0000000000002FD2                 xor     edi, edi        ; domainname
.text:0000000000002FD4                 call    _dcgettext
.text:0000000000002FD9                 mov     rbx, rax
.text:0000000000002FDC                 call    ___errno_location
.text:0000000000002FE1                 mov     esi, [rax]      ; errnum
.text:0000000000002FE3                 mov     ecx, r12d
.text:0000000000002FE6                 mov     rdx, rbx        ; format
.text:0000000000002FE9                 mov     edi, 7Dh ; '}'  ; status
.text:0000000000002FEE                 xor     eax, eax
.text:0000000000002FF0                 call    _error
.text:0000000000002FF5
.text:0000000000002FF5 loc_2FF5:                               ; CODE XREF: main+B28↑j
.text:0000000000002FF5                 call    ___stack_chk_fail
.text:0000000000002FFA ; ---------------------------------------------------------------------------
.text:0000000000002FFA
.text:0000000000002FFA loc_2FFA:                               ; CODE XREF: main+ACC↑j
.text:0000000000002FFA                 mov     edx, 5
.text:0000000000002FFF                 lea     rsi, aMustSpecifyCom ; "must specify command with --chdir (-C)"
.text:0000000000003006                 jmp     loc_2AC2
.text:000000000000300B ; ---------------------------------------------------------------------------
.text:000000000000300B
.text:000000000000300B loc_300B:                               ; CODE XREF: main+C88↑j
.text:000000000000300B                                         ; main+E36↑j
.text:000000000000300B                 lea     rcx, __PRETTY_FUNCTION___7612 ; "escape_char"
.text:0000000000003012                 lea     rsi, file       ; "../coreutils-8.31/src/env.c"
.text:0000000000003019                 lea     rdi, a0         ; "0"
.text:0000000000003020                 mov     edx, 0D2h       ; line
.text:0000000000003025                 call    ___assert_fail
.text:000000000000302A ; ---------------------------------------------------------------------------
.text:000000000000302A
.text:000000000000302A loc_302A:                               ; CODE XREF: main+992↑j
.text:000000000000302A                 mov     byte ptr [rbx], 0
.text:000000000000302D                 movsxd  rax, cs:optind@@GLIBC_2_2_5
.text:0000000000003034                 mov     rdi, [r15+rax*8]
.text:0000000000003038                 call    quote
.text:000000000000303D                 lea     rsi, aCannotSetS ; "cannot set %s"
.text:0000000000003044                 mov     edx, 5          ; category
.text:0000000000003049                 xor     edi, edi        ; domainname
.text:000000000000304B                 mov     rbp, rax
.text:000000000000304E                 call    _dcgettext
.text:0000000000003053                 mov     rbx, rax
.text:0000000000003056                 call    ___errno_location
.text:000000000000305B                 mov     esi, [rax]      ; errnum
.text:000000000000305D                 mov     rcx, rbp
.text:0000000000003060                 mov     rdx, rbx        ; format
.text:0000000000003063                 mov     edi, 7Dh ; '}'  ; status
.text:0000000000003068                 xor     eax, eax
.text:000000000000306A                 call    _error
.text:000000000000306F
.text:000000000000306F loc_306F:                               ; CODE XREF: main+26C↑j
.text:000000000000306F                 lea     rsi, aCMustNotAppear ; "'\\c' must not appear in double-quoted "...
.text:0000000000003076                 mov     edx, 5          ; category
.text:000000000000307B                 xor     edi, edi        ; domainname
.text:000000000000307D                 call    _dcgettext
.text:0000000000003082                 xor     esi, esi        ; errnum
.text:0000000000003084                 mov     rdx, rax        ; format
.text:0000000000003087                 mov     edi, 7Dh ; '}'  ; status
.text:000000000000308C                 xor     eax, eax
.text:000000000000308E                 call    _error
.text:0000000000003093
.text:0000000000003093 loc_3093:                               ; CODE XREF: main+CE3↑j
.text:0000000000003093                 mov     rsi, [rsp+148h+path]
.text:0000000000003098                 mov     edi, 4
.text:000000000000309D                 call    quotearg_style
.text:00000000000030A2                 lea     rsi, aCannotChangeDi ; "cannot change directory to %s"
.text:00000000000030A9                 mov     edx, 5          ; category
.text:00000000000030AE                 xor     edi, edi        ; domainname
.text:00000000000030B0                 mov     rbx, rax
.text:00000000000030B3                 call    _dcgettext
.text:00000000000030B8                 mov     rdx, rax        ; format
.text:00000000000030BB                 mov     rax, [rsp+148h+var_138]
.text:00000000000030C0                 mov     rcx, rbx
.text:00000000000030C3                 mov     edi, 7Dh ; '}'  ; status
.text:00000000000030C8                 mov     esi, [rax]      ; errnum
.text:00000000000030CA                 xor     eax, eax
.text:00000000000030CC                 call    _error
.text:00000000000030CC ; } // starts at 1C70
.text:00000000000030D1                 db      2Eh
.text:00000000000030D1                 nop     word ptr [rax+rax+00000000h]
.text:00000000000030DB                 nop     dword ptr [rax+rax+00h]
.text:00000000000030DB main            endp ; sp-analysis failed
.text:00000000000030DB
.text:00000000000030E0
.text:00000000000030E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000030E0
.text:00000000000030E0 ; Attributes: noreturn fuzzy-sp info_from_lumina
.text:00000000000030E0
.text:00000000000030E0 ; void __fastcall __noreturn start(__int64, __int64, void (*)(void))
.text:00000000000030E0                 public start
.text:00000000000030E0 start           proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:00000000000030E0 ; __unwind {
.text:00000000000030E0                 xor     ebp, ebp
.text:00000000000030E2                 mov     r9, rdx         ; rtld_fini
.text:00000000000030E5                 pop     rsi             ; argc
.text:00000000000030E6                 mov     rdx, rsp        ; ubp_av
.text:00000000000030E9                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:00000000000030ED                 push    rax
.text:00000000000030EE                 push    rsp             ; stack_end
.text:00000000000030EF                 lea     r8, __libc_csu_fini ; fini
.text:00000000000030F6                 lea     rcx, __libc_csu_init ; init
.text:00000000000030FD                 lea     rdi, main       ; main
.text:0000000000003104                 call    cs:__libc_start_main_ptr
.text:000000000000310A                 hlt
.text:000000000000310A ; } // starts at 30E0
.text:000000000000310A start           endp
.text:000000000000310A
.text:000000000000310A ; ---------------------------------------------------------------------------
.text:000000000000310B                 align 10h
.text:0000000000003110
.text:0000000000003110 ; =============== S U B R O U T I N E =======================================
.text:0000000000003110
.text:0000000000003110 ; Attributes: bp-based frame info_from_lumina
.text:0000000000003110
.text:0000000000003110 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_31C3↓p
.text:0000000000003110                 lea     rdi, __TMC_END__
.text:0000000000003117                 push    rbp
.text:0000000000003118                 lea     rax, __TMC_END__
.text:000000000000311F                 cmp     rax, rdi
.text:0000000000003122                 mov     rbp, rsp
.text:0000000000003125                 jz      short loc_3140
.text:0000000000003127                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:000000000000312E                 test    rax, rax
.text:0000000000003131                 jz      short loc_3140
.text:0000000000003133                 pop     rbp
.text:0000000000003134                 jmp     rax
.text:0000000000003134 ; ---------------------------------------------------------------------------
.text:0000000000003136                 align 20h
.text:0000000000003140
.text:0000000000003140 loc_3140:                               ; CODE XREF: deregister_tm_clones+15↑j
.text:0000000000003140                                         ; deregister_tm_clones+21↑j
.text:0000000000003140                 pop     rbp
.text:0000000000003141                 retn
.text:0000000000003141 deregister_tm_clones endp
.text:0000000000003141
.text:0000000000003141 ; ---------------------------------------------------------------------------
.text:0000000000003142                 align 10h
.text:0000000000003150
.text:0000000000003150 ; =============== S U B R O U T I N E =======================================
.text:0000000000003150
.text:0000000000003150 ; Attributes: bp-based frame info_from_lumina
.text:0000000000003150
.text:0000000000003150 register_tm_clones proc near            ; CODE XREF: frame_dummy+5↓j
.text:0000000000003150                 lea     rdi, __TMC_END__
.text:0000000000003157                 lea     rsi, __TMC_END__
.text:000000000000315E                 push    rbp
.text:000000000000315F                 sub     rsi, rdi
.text:0000000000003162                 mov     rbp, rsp
.text:0000000000003165                 sar     rsi, 3
.text:0000000000003169                 mov     rax, rsi
.text:000000000000316C                 shr     rax, 3Fh
.text:0000000000003170                 add     rsi, rax
.text:0000000000003173                 sar     rsi, 1
.text:0000000000003176                 jz      short loc_3190
.text:0000000000003178                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:000000000000317F                 test    rax, rax
.text:0000000000003182                 jz      short loc_3190
.text:0000000000003184                 pop     rbp
.text:0000000000003185                 jmp     rax
.text:0000000000003185 ; ---------------------------------------------------------------------------
.text:0000000000003187                 align 10h
.text:0000000000003190
.text:0000000000003190 loc_3190:                               ; CODE XREF: register_tm_clones+26↑j
.text:0000000000003190                                         ; register_tm_clones+32↑j
.text:0000000000003190                 pop     rbp
.text:0000000000003191                 retn
.text:0000000000003191 register_tm_clones endp
.text:0000000000003191
.text:0000000000003191 ; ---------------------------------------------------------------------------
.text:0000000000003192                 align 20h
.text:00000000000031A0
.text:00000000000031A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000031A0
.text:00000000000031A0 ; Attributes: info_from_lumina
.text:00000000000031A0
.text:00000000000031A0 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:00000000000031A0                 cmp     cs:completed_7697, 0
.text:00000000000031A7                 jnz     short locret_31D8
.text:00000000000031A9                 cmp     cs:__cxa_finalize_ptr, 0
.text:00000000000031B1                 push    rbp
.text:00000000000031B2                 mov     rbp, rsp
.text:00000000000031B5                 jz      short loc_31C3
.text:00000000000031B7                 mov     rdi, cs:__dso_handle ; void *
.text:00000000000031BE                 call    __cxa_finalize
.text:00000000000031C3
.text:00000000000031C3 loc_31C3:                               ; CODE XREF: __do_global_dtors_aux+15↑j
.text:00000000000031C3                 call    deregister_tm_clones
.text:00000000000031C8                 mov     cs:completed_7697, 1
.text:00000000000031CF                 pop     rbp
.text:00000000000031D0                 retn
.text:00000000000031D0 ; ---------------------------------------------------------------------------
.text:00000000000031D1                 align 8
.text:00000000000031D8
.text:00000000000031D8 locret_31D8:                            ; CODE XREF: __do_global_dtors_aux+7↑j
.text:00000000000031D8                 rep retn
.text:00000000000031D8 __do_global_dtors_aux endp
.text:00000000000031D8
.text:00000000000031D8 ; ---------------------------------------------------------------------------
.text:00000000000031DA                 align 20h
.text:00000000000031E0
.text:00000000000031E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000031E0
.text:00000000000031E0 ; Attributes: bp-based frame
.text:00000000000031E0
.text:00000000000031E0 frame_dummy     proc near               ; CODE XREF: __libc_csu_init+49↓p
.text:00000000000031E0                                         ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:00000000000031E0                 push    rbp
.text:00000000000031E1                 mov     rbp, rsp
.text:00000000000031E4                 pop     rbp
.text:00000000000031E5                 jmp     register_tm_clones
.text:00000000000031E5 frame_dummy     endp
.text:00000000000031E5
.text:00000000000031E5 ; ---------------------------------------------------------------------------
.text:00000000000031EA                 align 10h
.text:00000000000031F0
.text:00000000000031F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000031F0
.text:00000000000031F0
.text:00000000000031F0 extract_varname proc near               ; CODE XREF: main+6B3↑p
.text:00000000000031F0                                         ; main+781↑p
.text:00000000000031F0
.text:00000000000031F0 var_20          = qword ptr -20h
.text:00000000000031F0
.text:00000000000031F0 ; __unwind {
.text:00000000000031F0                 push    rbp
.text:00000000000031F1                 push    rbx
.text:00000000000031F2                 sub     rsp, 18h
.text:00000000000031F6                 test    rdi, rdi
.text:00000000000031F9                 jz      loc_32F9
.text:00000000000031FF                 cmp     byte ptr [rdi], 24h ; '$'
.text:0000000000003202                 mov     rbp, rdi
.text:0000000000003205                 jnz     loc_32F9
.text:000000000000320B                 cmp     byte ptr [rdi+1], 7Bh ; '{'
.text:000000000000320F                 jnz     loc_32BD
.text:0000000000003215                 movsx   eax, byte ptr [rdi+2]
.text:0000000000003219                 mov     edx, eax
.text:000000000000321B                 sub     eax, 41h ; 'A'
.text:000000000000321E                 cmp     eax, 39h ; '9'
.text:0000000000003221                 jbe     short loc_32A0
.text:0000000000003223                 cmp     dl, 5Fh ; '_'
.text:0000000000003226                 jnz     loc_32BD
.text:000000000000322C
.text:000000000000322C loc_322C:                               ; CODE XREF: extract_varname+BE↓j
.text:000000000000322C                                         ; extract_varname+C7↓j
.text:000000000000322C                 lea     rdx, [rbp+3]
.text:0000000000003230                 jmp     short loc_324C
.text:0000000000003230 ; ---------------------------------------------------------------------------
.text:0000000000003232                 align 8
.text:0000000000003238
.text:0000000000003238 loc_3238:                               ; CODE XREF: extract_varname+61↓j
.text:0000000000003238                 cmp     al, 41h ; 'A'
.text:000000000000323A                 jge     short loc_3248
.text:000000000000323C                 lea     ecx, [rax-30h]
.text:000000000000323F                 cmp     cl, 9
.text:0000000000003242                 jbe     short loc_3248
.text:0000000000003244                 cmp     al, 5Fh ; '_'
.text:0000000000003246                 jnz     short loc_325F
.text:0000000000003248
.text:0000000000003248 loc_3248:                               ; CODE XREF: extract_varname+4A↑j
.text:0000000000003248                                         ; extract_varname+52↑j ...
.text:0000000000003248                 add     rdx, 1
.text:000000000000324C
.text:000000000000324C loc_324C:                               ; CODE XREF: extract_varname+40↑j
.text:000000000000324C                 movzx   eax, byte ptr [rdx]
.text:000000000000324F                 cmp     al, 5Ah ; 'Z'
.text:0000000000003251                 jle     short loc_3238
.text:0000000000003253                 lea     ecx, [rax-61h]
.text:0000000000003256                 cmp     cl, 19h
.text:0000000000003259                 jbe     short loc_3248
.text:000000000000325B                 cmp     al, 5Fh ; '_'
.text:000000000000325D                 jz      short loc_3248
.text:000000000000325F
.text:000000000000325F loc_325F:                               ; CODE XREF: extract_varname+56↑j
.text:000000000000325F                 cmp     al, 7Dh ; '}'
.text:0000000000003261                 jnz     short loc_32BD
.text:0000000000003263                 mov     rbx, rdx
.text:0000000000003266                 mov     rcx, cs:varname
.text:000000000000326D                 sub     rbx, rbp
.text:0000000000003270                 lea     rdx, [rbx-2]    ; n
.text:0000000000003274                 cmp     rdx, cs:vnlen
.text:000000000000327B                 jnb     short loc_32D0
.text:000000000000327D
.text:000000000000327D loc_327D:                               ; CODE XREF: extract_varname+107↓j
.text:000000000000327D                 lea     rsi, [rbp+2]    ; src
.text:0000000000003281                 mov     rdi, rcx        ; dest
.text:0000000000003284                 call    _memcpy
.text:0000000000003289                 mov     byte ptr [rax+rbx-2], 0
.text:000000000000328E                 mov     rcx, rax
.text:0000000000003291                 add     rsp, 18h
.text:0000000000003295                 mov     rax, rcx
.text:0000000000003298                 pop     rbx
.text:0000000000003299                 pop     rbp
.text:000000000000329A                 retn
.text:000000000000329A ; ---------------------------------------------------------------------------
.text:000000000000329B                 align 20h
.text:00000000000032A0
.text:00000000000032A0 loc_32A0:                               ; CODE XREF: extract_varname+31↑j
.text:00000000000032A0                 mov     rcx, 3FFFFFF03FFFFFFh
.text:00000000000032AA                 bt      rcx, rax
.text:00000000000032AE                 jb      loc_322C
.text:00000000000032B4                 cmp     dl, 5Fh ; '_'
.text:00000000000032B7                 jz      loc_322C
.text:00000000000032BD
.text:00000000000032BD loc_32BD:                               ; CODE XREF: extract_varname+1F↑j
.text:00000000000032BD                                         ; extract_varname+36↑j ...
.text:00000000000032BD                 add     rsp, 18h
.text:00000000000032C1                 xor     ecx, ecx
.text:00000000000032C3                 mov     rax, rcx
.text:00000000000032C6                 pop     rbx
.text:00000000000032C7                 pop     rbp
.text:00000000000032C8                 retn
.text:00000000000032C8 ; ---------------------------------------------------------------------------
.text:00000000000032C9                 align 10h
.text:00000000000032D0
.text:00000000000032D0 loc_32D0:                               ; CODE XREF: extract_varname+8B↑j
.text:00000000000032D0                 lea     rsi, [rbx-1]
.text:00000000000032D4                 mov     rdi, rcx
.text:00000000000032D7                 mov     [rsp+28h+var_20], rdx
.text:00000000000032DC                 mov     cs:vnlen, rsi
.text:00000000000032E3                 call    xrealloc
.text:00000000000032E8                 mov     rdx, [rsp+28h+var_20]
.text:00000000000032ED                 mov     rcx, rax
.text:00000000000032F0                 mov     cs:varname, rax
.text:00000000000032F7                 jmp     short loc_327D
.text:00000000000032F9 ; ---------------------------------------------------------------------------
.text:00000000000032F9
.text:00000000000032F9 loc_32F9:                               ; CODE XREF: extract_varname+9↑j
.text:00000000000032F9                                         ; extract_varname+15↑j
.text:00000000000032F9                 lea     rcx, __PRETTY_FUNCTION___7616 ; "scan_varname"
.text:0000000000003300                 lea     rsi, file       ; "../coreutils-8.31/src/env.c"
.text:0000000000003307                 lea     rdi, aStrStr    ; "str && *str == '$'"
.text:000000000000330E                 mov     edx, 0DDh       ; line
.text:0000000000003313                 call    ___assert_fail
.text:0000000000003313 ; } // starts at 31F0
.text:0000000000003313 extract_varname endp
.text:0000000000003313
.text:0000000000003313 ; ---------------------------------------------------------------------------
.text:0000000000003318                 align 20h
.text:0000000000003320
.text:0000000000003320 ; =============== S U B R O U T I N E =======================================
.text:0000000000003320
.text:0000000000003320
.text:0000000000003320 list_signal_handling proc near          ; CODE XREF: main+CBD↑p
.text:0000000000003320
.text:0000000000003320 var_180         = qword ptr -180h
.text:0000000000003320 set             = sigset_t ptr -178h
.text:0000000000003320 var_F8          = qword ptr -0F8h
.text:0000000000003320 var_58          = byte ptr -58h
.text:0000000000003320 var_40          = qword ptr -40h
.text:0000000000003320
.text:0000000000003320 ; __unwind {
.text:0000000000003320                 push    r15
.text:0000000000003322                 push    r14
.text:0000000000003324                 push    r13
.text:0000000000003326                 push    r12
.text:0000000000003328                 push    rbp
.text:0000000000003329                 push    rbx
.text:000000000000332A                 sub     rsp, 158h
.text:0000000000003331                 lea     rbx, [rsp+188h+set]
.text:0000000000003336                 mov     rax, fs:28h
.text:000000000000333F                 mov     [rsp+188h+var_40], rax
.text:0000000000003347                 xor     eax, eax
.text:0000000000003349                 mov     rdi, rbx        ; set
.text:000000000000334C                 mov     [rsp+188h+var_180], rbx
.text:0000000000003351                 call    _sigemptyset
.text:0000000000003356                 xor     esi, esi        ; set
.text:0000000000003358                 xor     edi, edi        ; how
.text:000000000000335A                 mov     rdx, rbx        ; oset
.text:000000000000335D                 call    _sigprocmask
.text:0000000000003362                 test    eax, eax
.text:0000000000003364                 jnz     loc_3455
.text:000000000000336A                 mov     ebx, 1
.text:000000000000336F                 lea     rbp, [rsp+188h+var_F8]
.text:0000000000003377                 jmp     short loc_33DD
.text:0000000000003377 ; ---------------------------------------------------------------------------
.text:0000000000003379                 align 20h
.text:0000000000003380
.text:0000000000003380 loc_3380:                               ; CODE XREF: list_signal_handling+DD↓j
.text:0000000000003380                 call    _sigismember
.text:0000000000003385                 test    eax, eax
.text:0000000000003387                 jz      short loc_33D5
.text:0000000000003389                 lea     r13, accept+2   ; ""
.text:0000000000003390                 lea     r15, aBlock     ; "BLOCK"
.text:0000000000003397                 mov     r12, r13
.text:000000000000339A
.text:000000000000339A loc_339A:                               ; CODE XREF: list_signal_handling+FB↓j
.text:000000000000339A                                         ; list_signal_handling+10B↓j
.text:000000000000339A                 lea     r14, [rsp+188h+var_58]
.text:00000000000033A2                 mov     edi, ebx
.text:00000000000033A4                 mov     rsi, r14
.text:00000000000033A7                 call    sig2str
.text:00000000000033AC                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:00000000000033B3                 push    r13
.text:00000000000033B5                 lea     rdx, a10s2dSSS  ; "%-10s (%2d): %s%s%s\n"
.text:00000000000033BC                 push    r12
.text:00000000000033BE                 mov     r9, r15
.text:00000000000033C1                 mov     r8d, ebx
.text:00000000000033C4                 mov     rcx, r14
.text:00000000000033C7                 mov     esi, 1
.text:00000000000033CC                 xor     eax, eax
.text:00000000000033CE                 call    ___fprintf_chk
.text:00000000000033D3                 pop     rax
.text:00000000000033D4                 pop     rdx
.text:00000000000033D5
.text:00000000000033D5 loc_33D5:                               ; CODE XREF: list_signal_handling+67↑j
.text:00000000000033D5                                         ; list_signal_handling+CB↓j
.text:00000000000033D5                 add     ebx, 1
.text:00000000000033D8                 cmp     ebx, 41h ; 'A'
.text:00000000000033DB                 jz      short loc_3430
.text:00000000000033DD
.text:00000000000033DD loc_33DD:                               ; CODE XREF: list_signal_handling+57↑j
.text:00000000000033DD                 xor     esi, esi        ; act
.text:00000000000033DF                 mov     rdx, rbp        ; oact
.text:00000000000033E2                 mov     edi, ebx        ; sig
.text:00000000000033E4                 call    _sigaction
.text:00000000000033E9                 test    eax, eax
.text:00000000000033EB                 jnz     short loc_33D5
.text:00000000000033ED                 cmp     [rsp+188h+var_F8], 1
.text:00000000000033F6                 mov     esi, ebx        ; signo
.text:00000000000033F8                 mov     rdi, [rsp+188h+var_180] ; set
.text:00000000000033FD                 jnz     short loc_3380
.text:00000000000033FF                 call    _sigismember
.text:0000000000003404                 test    eax, eax
.text:0000000000003406                 lea     r13, aIgnore    ; "IGNORE"
.text:000000000000340D                 lea     r12, delim      ; ","
.text:0000000000003414                 lea     r15, aBlock     ; "BLOCK"
.text:000000000000341B                 jnz     loc_339A
.text:0000000000003421                 lea     r12, accept+2   ; ""
.text:0000000000003428                 mov     r15, r12
.text:000000000000342B                 jmp     loc_339A
.text:0000000000003430 ; ---------------------------------------------------------------------------
.text:0000000000003430
.text:0000000000003430 loc_3430:                               ; CODE XREF: list_signal_handling+BB↑j
.text:0000000000003430                 mov     rax, [rsp+188h+var_40]
.text:0000000000003438                 xor     rax, fs:28h
.text:0000000000003441                 jnz     short loc_3481
.text:0000000000003443                 add     rsp, 158h
.text:000000000000344A                 pop     rbx
.text:000000000000344B                 pop     rbp
.text:000000000000344C                 pop     r12
.text:000000000000344E                 pop     r13
.text:0000000000003450                 pop     r14
.text:0000000000003452                 pop     r15
.text:0000000000003454                 retn
.text:0000000000003455 ; ---------------------------------------------------------------------------
.text:0000000000003455
.text:0000000000003455 loc_3455:                               ; CODE XREF: list_signal_handling+44↑j
.text:0000000000003455                 lea     rsi, aFailedToGetSig ; "failed to get signal process mask"
.text:000000000000345C                 mov     edx, 5          ; category
.text:0000000000003461                 xor     edi, edi        ; domainname
.text:0000000000003463                 call    _dcgettext
.text:0000000000003468                 mov     rbx, rax
.text:000000000000346B                 call    ___errno_location
.text:0000000000003470                 mov     esi, [rax]      ; errnum
.text:0000000000003472                 mov     rdx, rbx        ; format
.text:0000000000003475                 mov     edi, 7Dh ; '}'  ; status
.text:000000000000347A                 xor     eax, eax
.text:000000000000347C                 call    _error
.text:0000000000003481
.text:0000000000003481 loc_3481:                               ; CODE XREF: list_signal_handling+121↑j
.text:0000000000003481                 call    ___stack_chk_fail
.text:0000000000003481 ; } // starts at 3320
.text:0000000000003481 list_signal_handling endp
.text:0000000000003481
.text:0000000000003481 ; ---------------------------------------------------------------------------
.text:0000000000003486                 align 10h
.text:0000000000003490
.text:0000000000003490 ; =============== S U B R O U T I N E =======================================
.text:0000000000003490
.text:0000000000003490 ; Attributes: noreturn
.text:0000000000003490
.text:0000000000003490 ; void __fastcall __noreturn usage(int status)
.text:0000000000003490                 public usage
.text:0000000000003490 usage           proc near               ; CODE XREF: main+11A↑p
.text:0000000000003490                                         ; main+11C5↑p ...
.text:0000000000003490
.text:0000000000003490 var_A8          = qword ptr -0A8h
.text:0000000000003490 var_A0          = qword ptr -0A0h
.text:0000000000003490 var_98          = qword ptr -98h
.text:0000000000003490 var_90          = qword ptr -90h
.text:0000000000003490 var_88          = qword ptr -88h
.text:0000000000003490 var_80          = qword ptr -80h
.text:0000000000003490 var_78          = qword ptr -78h
.text:0000000000003490 var_70          = qword ptr -70h
.text:0000000000003490 var_68          = qword ptr -68h
.text:0000000000003490 var_60          = qword ptr -60h
.text:0000000000003490 var_58          = qword ptr -58h
.text:0000000000003490 var_50          = qword ptr -50h
.text:0000000000003490 var_48          = qword ptr -48h
.text:0000000000003490 var_40          = qword ptr -40h
.text:0000000000003490 var_30          = qword ptr -30h
.text:0000000000003490
.text:0000000000003490 ; __unwind {
.text:0000000000003490                 push    r13
.text:0000000000003492                 push    r12
.text:0000000000003494                 mov     edx, 5          ; category
.text:0000000000003499                 push    rbp
.text:000000000000349A                 push    rbx
.text:000000000000349B                 mov     ebp, edi
.text:000000000000349D                 sub     rsp, 88h
.text:00000000000034A4                 mov     rbx, cs:program_name
.text:00000000000034AB                 mov     rax, fs:28h
.text:00000000000034B4                 mov     [rsp+0A8h+var_30], rax
.text:00000000000034B9                 xor     eax, eax
.text:00000000000034BB                 test    edi, edi
.text:00000000000034BD                 jz      short loc_34ED
.text:00000000000034BF                 lea     rsi, aTrySHelpForMor ; "Try '%s --help' for more information.\n"
.text:00000000000034C6                 xor     edi, edi        ; domainname
.text:00000000000034C8                 call    _dcgettext
.text:00000000000034CD                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:00000000000034D4                 mov     rdx, rax
.text:00000000000034D7                 mov     rcx, rbx
.text:00000000000034DA                 mov     esi, 1
.text:00000000000034DF                 xor     eax, eax
.text:00000000000034E1                 call    ___fprintf_chk
.text:00000000000034E6
.text:00000000000034E6 loc_34E6:                               ; CODE XREF: usage+416↓j
.text:00000000000034E6                 mov     edi, ebp        ; status
.text:00000000000034E8                 call    _exit
.text:00000000000034ED ; ---------------------------------------------------------------------------
.text:00000000000034ED
.text:00000000000034ED loc_34ED:                               ; CODE XREF: usage+2D↑j
.text:00000000000034ED                 lea     rsi, aUsageSOptionNa ; "Usage: %s [OPTION]... [-] [NAME=VALUE]."...
.text:00000000000034F4                 xor     edi, edi        ; domainname
.text:00000000000034F6                 call    _dcgettext
.text:00000000000034FB                 mov     rdx, rbx
.text:00000000000034FE                 mov     rsi, rax
.text:0000000000003501                 mov     edi, 1
.text:0000000000003506                 xor     eax, eax
.text:0000000000003508                 call    ___printf_chk
.text:000000000000350D                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000003514                 lea     rsi, aSetEachNameToV ; "Set each NAME to VALUE in the environme"...
.text:000000000000351B                 mov     edx, 5          ; category
.text:0000000000003520                 xor     edi, edi        ; domainname
.text:0000000000003522                 call    _dcgettext
.text:0000000000003527                 mov     rsi, rbx        ; stream
.text:000000000000352A                 mov     rdi, rax        ; s
.text:000000000000352D                 call    _fputs_unlocked
.text:0000000000003532                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000003539                 lea     rsi, aMandatoryArgum ; "\nMandatory arguments to long options a"...
.text:0000000000003540                 mov     edx, 5          ; category
.text:0000000000003545                 xor     edi, edi        ; domainname
.text:0000000000003547                 call    _dcgettext
.text:000000000000354C                 mov     rsi, rbx        ; stream
.text:000000000000354F                 mov     rdi, rax        ; s
.text:0000000000003552                 call    _fputs_unlocked
.text:0000000000003557                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000355E                 lea     rsi, aIIgnoreEnviron ; "  -i, --ignore-environment  start with "...
.text:0000000000003565                 mov     edx, 5          ; category
.text:000000000000356A                 xor     edi, edi        ; domainname
.text:000000000000356C                 call    _dcgettext
.text:0000000000003571                 mov     rsi, rbx        ; stream
.text:0000000000003574                 mov     rdi, rax        ; s
.text:0000000000003577                 call    _fputs_unlocked
.text:000000000000357C                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000003583                 lea     rsi, aCChdirDirChang ; "  -C, --chdir=DIR      change working d"...
.text:000000000000358A                 mov     edx, 5          ; category
.text:000000000000358F                 xor     edi, edi        ; domainname
.text:0000000000003591                 call    _dcgettext
.text:0000000000003596                 mov     rsi, rbx        ; stream
.text:0000000000003599                 mov     rdi, rax        ; s
.text:000000000000359C                 call    _fputs_unlocked
.text:00000000000035A1                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000035A8                 lea     rsi, aSSplitStringSP ; "  -S, --split-string=S  process and spl"...
.text:00000000000035AF                 mov     edx, 5          ; category
.text:00000000000035B4                 xor     edi, edi        ; domainname
.text:00000000000035B6                 call    _dcgettext
.text:00000000000035BB                 mov     rsi, rbx        ; stream
.text:00000000000035BE                 mov     rdi, rax        ; s
.text:00000000000035C1                 call    _fputs_unlocked
.text:00000000000035C6                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000035CD                 lea     rsi, aBlockSignalSig ; "      --block-signal[=SIG]    block del"...
.text:00000000000035D4                 mov     edx, 5          ; category
.text:00000000000035D9                 xor     edi, edi        ; domainname
.text:00000000000035DB                 call    _dcgettext
.text:00000000000035E0                 mov     rsi, rbx        ; stream
.text:00000000000035E3                 mov     rdi, rax        ; s
.text:00000000000035E6                 call    _fputs_unlocked
.text:00000000000035EB                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000035F2                 lea     rsi, aDefaultSignalS ; "      --default-signal[=SIG]  reset han"...
.text:00000000000035F9                 mov     edx, 5          ; category
.text:00000000000035FE                 xor     edi, edi        ; domainname
.text:0000000000003600                 call    _dcgettext
.text:0000000000003605                 mov     rsi, rbx        ; stream
.text:0000000000003608                 mov     rdi, rax        ; s
.text:000000000000360B                 call    _fputs_unlocked
.text:0000000000003610                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000003617                 lea     rsi, aIgnoreSignalSi ; "      --ignore-signal[=SIG]   set handl"...
.text:000000000000361E                 mov     edx, 5          ; category
.text:0000000000003623                 xor     edi, edi        ; domainname
.text:0000000000003625                 call    _dcgettext
.text:000000000000362A                 mov     rsi, rbx        ; stream
.text:000000000000362D                 mov     rdi, rax        ; s
.text:0000000000003630                 call    _fputs_unlocked
.text:0000000000003635                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000363C                 lea     rsi, aListSignalHand ; "      --list-signal-handling  list non "...
.text:0000000000003643                 mov     edx, 5          ; category
.text:0000000000003648                 xor     edi, edi        ; domainname
.text:000000000000364A                 call    _dcgettext
.text:000000000000364F                 mov     rsi, rbx        ; stream
.text:0000000000003652                 mov     rdi, rax        ; s
.text:0000000000003655                 call    _fputs_unlocked
.text:000000000000365A                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000003661                 lea     rsi, aVDebugPrintVer ; "  -v, --debug          print verbose in"...
.text:0000000000003668                 mov     edx, 5          ; category
.text:000000000000366D                 xor     edi, edi        ; domainname
.text:000000000000366F                 call    _dcgettext
.text:0000000000003674                 mov     rsi, rbx        ; stream
.text:0000000000003677                 mov     rdi, rax        ; s
.text:000000000000367A                 call    _fputs_unlocked
.text:000000000000367F                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000003686                 lea     rsi, aHelpDisplayThi ; "      --help     display this help and "...
.text:000000000000368D                 mov     edx, 5          ; category
.text:0000000000003692                 xor     edi, edi        ; domainname
.text:0000000000003694                 call    _dcgettext
.text:0000000000003699                 mov     rsi, rbx        ; stream
.text:000000000000369C                 mov     rdi, rax        ; s
.text:000000000000369F                 call    _fputs_unlocked
.text:00000000000036A4                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000036AB                 lea     rsi, aVersionOutputV ; "      --version  output version informa"...
.text:00000000000036B2                 mov     edx, 5          ; category
.text:00000000000036B7                 xor     edi, edi        ; domainname
.text:00000000000036B9                 call    _dcgettext
.text:00000000000036BE                 mov     rsi, rbx        ; stream
.text:00000000000036C1                 mov     rdi, rax        ; s
.text:00000000000036C4                 call    _fputs_unlocked
.text:00000000000036C9                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000036D0                 lea     rsi, aAMereImpliesII ; "\nA mere - implies -i.  If no COMMAND, "...
.text:00000000000036D7                 mov     edx, 5          ; category
.text:00000000000036DC                 xor     edi, edi        ; domainname
.text:00000000000036DE                 call    _dcgettext
.text:00000000000036E3                 mov     rsi, rbx        ; stream
.text:00000000000036E6                 mov     rdi, rax        ; s
.text:00000000000036E9                 call    _fputs_unlocked
.text:00000000000036EE                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000036F5                 lea     rsi, aSigMayBeASigna ; "\nSIG may be a signal name like 'PIPE',"...
.text:00000000000036FC                 mov     edx, 5          ; category
.text:0000000000003701                 xor     edi, edi        ; domainname
.text:0000000000003703                 call    _dcgettext
.text:0000000000003708                 mov     rsi, rbx        ; stream
.text:000000000000370B                 mov     rdi, rax        ; s
.text:000000000000370E                 lea     rbx, aEnv       ; "env"
.text:0000000000003715                 call    _fputs_unlocked
.text:000000000000371A                 lea     rax, asc_6B95   ; "["
.text:0000000000003721                 lea     rcx, aSha256sum ; "sha256sum"
.text:0000000000003728                 mov     [rsp+0A8h+var_48], 0
.text:0000000000003731                 mov     [rsp+0A8h+var_40], 0
.text:000000000000373A                 mov     rdx, rsp
.text:000000000000373D                 mov     [rsp+0A8h+var_A8], rax
.text:0000000000003741                 lea     rax, aTestInvocation ; "test invocation"
.text:0000000000003748                 mov     [rsp+0A8h+var_78], rcx
.text:000000000000374D                 lea     rcx, aSha384sum ; "sha384sum"
.text:0000000000003754                 mov     [rsp+0A8h+var_A0], rax
.text:0000000000003759                 lea     rax, domainname ; "coreutils"
.text:0000000000003760                 mov     [rsp+0A8h+var_68], rcx
.text:0000000000003765                 lea     rcx, aSha512sum ; "sha512sum"
.text:000000000000376C                 mov     [rsp+0A8h+var_98], rax
.text:0000000000003771                 lea     rax, aMultiCallInvoc ; "Multi-call invocation"
.text:0000000000003778                 mov     [rsp+0A8h+var_58], rcx
.text:000000000000377D                 mov     [rsp+0A8h+var_90], rax
.text:0000000000003782                 lea     rax, aSha224sum ; "sha224sum"
.text:0000000000003789                 mov     [rsp+0A8h+var_88], rax
.text:000000000000378E                 lea     rax, aSha2Utilities ; "sha2 utilities"
.text:0000000000003795                 mov     [rsp+0A8h+var_80], rax
.text:000000000000379A                 mov     [rsp+0A8h+var_70], rax
.text:000000000000379F                 mov     [rsp+0A8h+var_60], rax
.text:00000000000037A4                 mov     [rsp+0A8h+var_50], rax
.text:00000000000037A9                 nop     dword ptr [rax+00000000h]
.text:00000000000037B0
.text:00000000000037B0 loc_37B0:                               ; CODE XREF: usage+33D↓j
.text:00000000000037B0                 add     rdx, 10h
.text:00000000000037B4                 mov     rdi, [rdx]
.text:00000000000037B7                 test    rdi, rdi
.text:00000000000037BA                 jz      short loc_37CF
.text:00000000000037BC                 mov     ecx, 4
.text:00000000000037C1                 mov     rsi, rbx
.text:00000000000037C4                 repe cmpsb
.text:00000000000037C6                 setnbe  al
.text:00000000000037C9                 sbb     al, 0
.text:00000000000037CB                 test    al, al
.text:00000000000037CD                 jnz     short loc_37B0
.text:00000000000037CF
.text:00000000000037CF loc_37CF:                               ; CODE XREF: usage+32A↑j
.text:00000000000037CF                 mov     r12, [rdx+8]
.text:00000000000037D3                 xor     edi, edi        ; domainname
.text:00000000000037D5                 mov     edx, 5          ; category
.text:00000000000037DA                 lea     rsi, aSOnlineHelpS ; "\n%s online help: <%s>\n"
.text:00000000000037E1                 test    r12, r12
.text:00000000000037E4                 jz      loc_38AB
.text:00000000000037EA                 call    _dcgettext
.text:00000000000037EF                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000037F6                 lea     rdx, unk_6C0B
.text:00000000000037FD                 mov     rsi, rax
.text:0000000000003800                 mov     edi, 1
.text:0000000000003805                 xor     eax, eax
.text:0000000000003807                 call    ___printf_chk
.text:000000000000380C                 xor     esi, esi        ; locale
.text:000000000000380E                 mov     edi, 5          ; category
.text:0000000000003813                 call    _setlocale
.text:0000000000003818                 test    rax, rax
.text:000000000000381B                 jz      short loc_3839
.text:000000000000381D                 lea     rsi, s2         ; "en_"
.text:0000000000003824                 mov     edx, 3          ; n
.text:0000000000003829                 mov     rdi, rax        ; s1
.text:000000000000382C                 call    _strncmp
.text:0000000000003831                 test    eax, eax
.text:0000000000003833                 jnz     loc_3940
.text:0000000000003839
.text:0000000000003839 loc_3839:                               ; CODE XREF: usage+38B↑j
.text:0000000000003839                                         ; usage+4D5↓j
.text:0000000000003839                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000003840                 xor     edi, edi        ; domainname
.text:0000000000003842                 mov     edx, 5          ; category
.text:0000000000003847                 call    _dcgettext
.text:000000000000384C                 lea     rcx, aEnv       ; "env"
.text:0000000000003853                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:000000000000385A                 mov     rsi, rax
.text:000000000000385D                 mov     edi, 1
.text:0000000000003862                 xor     eax, eax
.text:0000000000003864                 call    ___printf_chk
.text:0000000000003869                 cmp     r12, rbx
.text:000000000000386C                 lea     rcx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000003873                 lea     rbx, accept+2   ; ""
.text:000000000000387A                 cmovz   rbx, rcx
.text:000000000000387E
.text:000000000000387E loc_387E:                               ; CODE XREF: usage+4A4↓j
.text:000000000000387E                 lea     rsi, aOrAvailableLoc ; "or available locally via: info '(coreut"...
.text:0000000000003885                 xor     edi, edi        ; domainname
.text:0000000000003887                 mov     edx, 5          ; category
.text:000000000000388C                 call    _dcgettext
.text:0000000000003891                 mov     rcx, rbx
.text:0000000000003894                 mov     rsi, rax
.text:0000000000003897                 mov     rdx, r12
.text:000000000000389A                 mov     edi, 1
.text:000000000000389F                 xor     eax, eax
.text:00000000000038A1                 call    ___printf_chk
.text:00000000000038A6                 jmp     loc_34E6
.text:00000000000038AB ; ---------------------------------------------------------------------------
.text:00000000000038AB
.text:00000000000038AB loc_38AB:                               ; CODE XREF: usage+354↑j
.text:00000000000038AB                 call    _dcgettext
.text:00000000000038B0                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000038B7                 lea     rdx, unk_6C0B
.text:00000000000038BE                 mov     rsi, rax
.text:00000000000038C1                 mov     edi, 1
.text:00000000000038C6                 xor     eax, eax
.text:00000000000038C8                 call    ___printf_chk
.text:00000000000038CD                 xor     esi, esi        ; locale
.text:00000000000038CF                 mov     edi, 5          ; category
.text:00000000000038D4                 call    _setlocale
.text:00000000000038D9                 test    rax, rax
.text:00000000000038DC                 jz      short loc_38F6
.text:00000000000038DE                 lea     rsi, s2         ; "en_"
.text:00000000000038E5                 mov     edx, 3          ; n
.text:00000000000038EA                 mov     rdi, rax        ; s1
.text:00000000000038ED                 call    _strncmp
.text:00000000000038F2                 test    eax, eax
.text:00000000000038F4                 jnz     short loc_3939
.text:00000000000038F6
.text:00000000000038F6 loc_38F6:                               ; CODE XREF: usage+44C↑j
.text:00000000000038F6                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:00000000000038FD                 mov     edx, 5          ; category
.text:0000000000003902                 xor     edi, edi        ; domainname
.text:0000000000003904                 lea     r12, aEnv       ; "env"
.text:000000000000390B                 lea     rbx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000003912                 call    _dcgettext
.text:0000000000003917                 lea     rcx, aEnv       ; "env"
.text:000000000000391E                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000003925                 mov     rsi, rax
.text:0000000000003928                 mov     edi, 1
.text:000000000000392D                 xor     eax, eax
.text:000000000000392F                 call    ___printf_chk
.text:0000000000003934                 jmp     loc_387E
.text:0000000000003939 ; ---------------------------------------------------------------------------
.text:0000000000003939
.text:0000000000003939 loc_3939:                               ; CODE XREF: usage+464↑j
.text:0000000000003939                 lea     r12, aEnv       ; "env"
.text:0000000000003940
.text:0000000000003940 loc_3940:                               ; CODE XREF: usage+3A3↑j
.text:0000000000003940                 mov     r13, cs:stdout@@GLIBC_2_2_5
.text:0000000000003947                 lea     rsi, aReportAnyTrans ; "Report any translation bugs to <https:/"...
.text:000000000000394E                 xor     edi, edi        ; domainname
.text:0000000000003950                 mov     edx, 5          ; category
.text:0000000000003955                 call    _dcgettext
.text:000000000000395A                 mov     rsi, r13        ; stream
.text:000000000000395D                 mov     rdi, rax        ; s
.text:0000000000003960                 call    _fputs_unlocked
.text:0000000000003965                 jmp     loc_3839
.text:0000000000003965 ; } // starts at 3490
.text:0000000000003965 usage           endp
.text:0000000000003965
.text:0000000000003965 ; ---------------------------------------------------------------------------
.text:000000000000396A                 align 10h
.text:0000000000003970
.text:0000000000003970 ; =============== S U B R O U T I N E =======================================
.text:0000000000003970
.text:0000000000003970
.text:0000000000003970 parse_signal_action_params proc near    ; CODE XREF: main+2DC↑p
.text:0000000000003970                                         ; main+301↑p
.text:0000000000003970
.text:0000000000003970 var_30          = qword ptr -30h
.text:0000000000003970
.text:0000000000003970 ; __unwind {
.text:0000000000003970                 push    r14
.text:0000000000003972                 push    r13
.text:0000000000003974                 push    r12
.text:0000000000003976                 push    rbp
.text:0000000000003977                 push    rbx
.text:0000000000003978                 mov     ebx, esi
.text:000000000000397A                 sub     rsp, 20h
.text:000000000000397E                 mov     rax, fs:28h
.text:0000000000003987                 mov     [rsp+48h+var_30], rax
.text:000000000000398C                 xor     eax, eax
.text:000000000000398E                 test    rdi, rdi
.text:0000000000003991                 jz      loc_3A70
.text:0000000000003997                 call    xstrdup
.text:000000000000399C                 lea     rsi, delim      ; ","
.text:00000000000039A3                 mov     rdi, rax        ; s
.text:00000000000039A6                 mov     r13, rax
.text:00000000000039A9                 call    _strtok
.text:00000000000039AE                 test    rax, rax
.text:00000000000039B1                 mov     r14, rax
.text:00000000000039B4                 jz      loc_3A48
.text:00000000000039BA                 cmp     bl, 1
.text:00000000000039BD                 mov     r12, rsp
.text:00000000000039C0                 lea     rbp, delim      ; ","
.text:00000000000039C7                 sbb     ebx, ebx
.text:00000000000039C9                 and     ebx, 2
.text:00000000000039CC                 add     ebx, 1
.text:00000000000039CF                 jmp     short loc_39F8
.text:00000000000039CF ; ---------------------------------------------------------------------------
.text:00000000000039D1                 align 8
.text:00000000000039D8
.text:00000000000039D8 loc_39D8:                               ; CODE XREF: parse_signal_action_params+96↓j
.text:00000000000039D8                 jle     short loc_3A37
.text:00000000000039DA                 mov     rdx, cs:signals
.text:00000000000039E1                 cdqe
.text:00000000000039E3                 xor     edi, edi        ; s
.text:00000000000039E5                 mov     rsi, rbp        ; delim
.text:00000000000039E8                 mov     [rdx+rax*4], ebx
.text:00000000000039EB                 call    _strtok
.text:00000000000039F0                 test    rax, rax
.text:00000000000039F3                 mov     r14, rax
.text:00000000000039F6                 jz      short loc_3A48
.text:00000000000039F8
.text:00000000000039F8 loc_39F8:                               ; CODE XREF: parse_signal_action_params+5F↑j
.text:00000000000039F8                 mov     rsi, r12
.text:00000000000039FB                 mov     rdi, r14        ; nptr
.text:00000000000039FE                 call    operand2sig
.text:0000000000003A03                 cmp     eax, 0
.text:0000000000003A06                 jnz     short loc_39D8
.text:0000000000003A08                 mov     rdi, r14
.text:0000000000003A0B                 call    quote
.text:0000000000003A10                 lea     rsi, aSInvalidSignal ; "%s: invalid signal"
.text:0000000000003A17                 mov     rbx, rax
.text:0000000000003A1A                 mov     edx, 5          ; category
.text:0000000000003A1F                 xor     edi, edi        ; domainname
.text:0000000000003A21                 call    _dcgettext
.text:0000000000003A26                 mov     rcx, rbx
.text:0000000000003A29                 mov     rdx, rax        ; format
.text:0000000000003A2C                 xor     esi, esi        ; errnum
.text:0000000000003A2E                 xor     edi, edi        ; status
.text:0000000000003A30                 xor     eax, eax
.text:0000000000003A32                 call    _error
.text:0000000000003A37
.text:0000000000003A37 loc_3A37:                               ; CODE XREF: parse_signal_action_params:loc_39D8↑j
.text:0000000000003A37                 mov     edi, cs:exit_failure ; status
.text:0000000000003A3D                 call    usage
.text:0000000000003A3D ; ---------------------------------------------------------------------------
.text:0000000000003A42                 align 8
.text:0000000000003A48
.text:0000000000003A48 loc_3A48:                               ; CODE XREF: parse_signal_action_params+44↑j
.text:0000000000003A48                                         ; parse_signal_action_params+86↑j
.text:0000000000003A48                 mov     rax, [rsp+48h+var_30]
.text:0000000000003A4D                 xor     rax, fs:28h
.text:0000000000003A56                 jnz     short loc_3AD2
.text:0000000000003A58                 add     rsp, 20h
.text:0000000000003A5C                 mov     rdi, r13        ; ptr
.text:0000000000003A5F                 pop     rbx
.text:0000000000003A60                 pop     rbp
.text:0000000000003A61                 pop     r12
.text:0000000000003A63                 pop     r13
.text:0000000000003A65                 pop     r14
.text:0000000000003A67                 jmp     _free
.text:0000000000003A67 ; ---------------------------------------------------------------------------
.text:0000000000003A6C                 align 10h
.text:0000000000003A70
.text:0000000000003A70 loc_3A70:                               ; CODE XREF: parse_signal_action_params+21↑j
.text:0000000000003A70                 cmp     sil, 1
.text:0000000000003A74                 mov     ebp, 4
.text:0000000000003A79                 mov     ebx, 1
.text:0000000000003A7E                 sbb     r13d, r13d
.text:0000000000003A81                 mov     r12, rsp
.text:0000000000003A84                 and     r13d, 2
.text:0000000000003A88                 add     r13d, 2
.text:0000000000003A8C                 nop     dword ptr [rax+00h]
.text:0000000000003A90
.text:0000000000003A90 loc_3A90:                               ; CODE XREF: parse_signal_action_params+143↓j
.text:0000000000003A90                 mov     rsi, r12
.text:0000000000003A93                 mov     edi, ebx
.text:0000000000003A95                 call    sig2str
.text:0000000000003A9A                 test    eax, eax
.text:0000000000003A9C                 jnz     short loc_3AA9
.text:0000000000003A9E                 mov     rax, cs:signals
.text:0000000000003AA5                 mov     [rax+rbp], r13d
.text:0000000000003AA9
.text:0000000000003AA9 loc_3AA9:                               ; CODE XREF: parse_signal_action_params+12C↑j
.text:0000000000003AA9                 add     ebx, 1
.text:0000000000003AAC                 add     rbp, 4
.text:0000000000003AB0                 cmp     ebx, 41h ; 'A'
.text:0000000000003AB3                 jnz     short loc_3A90
.text:0000000000003AB5                 mov     rax, [rsp+48h+var_30]
.text:0000000000003ABA                 xor     rax, fs:28h
.text:0000000000003AC3                 jnz     short loc_3AD2
.text:0000000000003AC5                 add     rsp, 20h
.text:0000000000003AC9                 pop     rbx
.text:0000000000003ACA                 pop     rbp
.text:0000000000003ACB                 pop     r12
.text:0000000000003ACD                 pop     r13
.text:0000000000003ACF                 pop     r14
.text:0000000000003AD1                 retn
.text:0000000000003AD2 ; ---------------------------------------------------------------------------
.text:0000000000003AD2
.text:0000000000003AD2 loc_3AD2:                               ; CODE XREF: parse_signal_action_params+E6↑j
.text:0000000000003AD2                                         ; parse_signal_action_params+153↑j
.text:0000000000003AD2                 call    ___stack_chk_fail
.text:0000000000003AD2 ; } // starts at 3970
.text:0000000000003AD2 parse_signal_action_params endp
.text:0000000000003AD2
.text:0000000000003AD2 ; ---------------------------------------------------------------------------
.text:0000000000003AD7                 align 20h
.text:0000000000003AE0
.text:0000000000003AE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003AE0
.text:0000000000003AE0
.text:0000000000003AE0 ; __int64 __fastcall parse_block_signal_params(void *src)
.text:0000000000003AE0 parse_block_signal_params proc near     ; CODE XREF: main+2EA↑p
.text:0000000000003AE0                                         ; main+31C↑p
.text:0000000000003AE0
.text:0000000000003AE0 ptr             = qword ptr -60h
.text:0000000000003AE0 var_58          = byte ptr -58h
.text:0000000000003AE0 var_40          = qword ptr -40h
.text:0000000000003AE0
.text:0000000000003AE0 ; __unwind {
.text:0000000000003AE0                 push    r15
.text:0000000000003AE2                 push    r14
.text:0000000000003AE4                 push    r13
.text:0000000000003AE6                 push    r12
.text:0000000000003AE8                 push    rbp
.text:0000000000003AE9                 push    rbx
.text:0000000000003AEA                 mov     ebx, esi
.text:0000000000003AEC                 sub     rsp, 38h
.text:0000000000003AF0                 mov     rax, fs:28h
.text:0000000000003AF9                 mov     [rsp+68h+var_40], rax
.text:0000000000003AFE                 xor     eax, eax
.text:0000000000003B00                 test    rdi, rdi
.text:0000000000003B03                 jz      loc_3C58
.text:0000000000003B09                 cmp     cs:sig_mask_changed, 0
.text:0000000000003B10                 mov     rbp, rdi
.text:0000000000003B13                 mov     r12d, esi
.text:0000000000003B16                 jz      loc_3C38
.text:0000000000003B1C
.text:0000000000003B1C loc_3B1C:                               ; CODE XREF: parse_block_signal_params+170↓j
.text:0000000000003B1C                 mov     rdi, rbp        ; src
.text:0000000000003B1F                 mov     cs:sig_mask_changed, 1
.text:0000000000003B26                 call    xstrdup
.text:0000000000003B2B                 lea     rsi, delim      ; ","
.text:0000000000003B32                 mov     rdi, rax        ; s
.text:0000000000003B35                 mov     [rsp+68h+ptr], rax
.text:0000000000003B3A                 call    _strtok
.text:0000000000003B3F                 test    rax, rax
.text:0000000000003B42                 mov     r15, rax
.text:0000000000003B45                 jz      loc_3C08
.text:0000000000003B4B                 lea     r14, block_signals
.text:0000000000003B52                 lea     rbp, unblock_signals
.text:0000000000003B59                 test    bl, bl
.text:0000000000003B5B                 lea     r13, [rsp+68h+var_58]
.text:0000000000003B60                 cmovz   rbp, r14
.text:0000000000003B64                 jmp     short loc_3B9A
.text:0000000000003B64 ; ---------------------------------------------------------------------------
.text:0000000000003B66                 align 10h
.text:0000000000003B70
.text:0000000000003B70 loc_3B70:                               ; CODE XREF: parse_block_signal_params+D1↓j
.text:0000000000003B70                 mov     esi, eax        ; signo
.text:0000000000003B72                 mov     rdi, r14        ; set
.text:0000000000003B75                 call    _sigaddset
.text:0000000000003B7A
.text:0000000000003B7A loc_3B7A:                               ; CODE XREF: parse_block_signal_params+E1↓j
.text:0000000000003B7A                 mov     esi, ebx        ; signo
.text:0000000000003B7C                 mov     rdi, rbp        ; set
.text:0000000000003B7F                 call    _sigdelset
.text:0000000000003B84                 lea     rsi, delim      ; ","
.text:0000000000003B8B                 xor     edi, edi        ; s
.text:0000000000003B8D                 call    _strtok
.text:0000000000003B92                 test    rax, rax
.text:0000000000003B95                 mov     r15, rax
.text:0000000000003B98                 jz      short loc_3C08
.text:0000000000003B9A
.text:0000000000003B9A loc_3B9A:                               ; CODE XREF: parse_block_signal_params+84↑j
.text:0000000000003B9A                 mov     rsi, r13
.text:0000000000003B9D                 mov     rdi, r15        ; nptr
.text:0000000000003BA0                 call    operand2sig
.text:0000000000003BA5                 cmp     eax, 0
.text:0000000000003BA8                 mov     ebx, eax
.text:0000000000003BAA                 jz      short loc_3BC8
.text:0000000000003BAC                 jle     short loc_3BF7
.text:0000000000003BAE                 test    r12b, r12b
.text:0000000000003BB1                 jnz     short loc_3B70
.text:0000000000003BB3                 lea     rdi, unblock_signals ; set
.text:0000000000003BBA                 mov     esi, eax        ; signo
.text:0000000000003BBC                 call    _sigaddset
.text:0000000000003BC1                 jmp     short loc_3B7A
.text:0000000000003BC1 ; ---------------------------------------------------------------------------
.text:0000000000003BC3                 align 8
.text:0000000000003BC8
.text:0000000000003BC8 loc_3BC8:                               ; CODE XREF: parse_block_signal_params+CA↑j
.text:0000000000003BC8                 mov     rdi, r15
.text:0000000000003BCB                 call    quote
.text:0000000000003BD0                 lea     rsi, aSInvalidSignal ; "%s: invalid signal"
.text:0000000000003BD7                 mov     rbx, rax
.text:0000000000003BDA                 mov     edx, 5          ; category
.text:0000000000003BDF                 xor     edi, edi        ; domainname
.text:0000000000003BE1                 call    _dcgettext
.text:0000000000003BE6                 mov     rcx, rbx
.text:0000000000003BE9                 mov     rdx, rax        ; format
.text:0000000000003BEC                 xor     esi, esi        ; errnum
.text:0000000000003BEE                 xor     edi, edi        ; status
.text:0000000000003BF0                 xor     eax, eax
.text:0000000000003BF2                 call    _error
.text:0000000000003BF7
.text:0000000000003BF7 loc_3BF7:                               ; CODE XREF: parse_block_signal_params+CC↑j
.text:0000000000003BF7                 mov     edi, cs:exit_failure ; status
.text:0000000000003BFD                 call    usage
.text:0000000000003BFD ; ---------------------------------------------------------------------------
.text:0000000000003C02                 align 8
.text:0000000000003C08
.text:0000000000003C08 loc_3C08:                               ; CODE XREF: parse_block_signal_params+65↑j
.text:0000000000003C08                                         ; parse_block_signal_params+B8↑j
.text:0000000000003C08                 mov     rax, [rsp+68h+var_40]
.text:0000000000003C0D                 xor     rax, fs:28h
.text:0000000000003C16                 jnz     loc_3CB5
.text:0000000000003C1C                 mov     rdi, [rsp+68h+ptr] ; ptr
.text:0000000000003C21                 add     rsp, 38h
.text:0000000000003C25                 pop     rbx
.text:0000000000003C26                 pop     rbp
.text:0000000000003C27                 pop     r12
.text:0000000000003C29                 pop     r13
.text:0000000000003C2B                 pop     r14
.text:0000000000003C2D                 pop     r15
.text:0000000000003C2F                 jmp     _free
.text:0000000000003C2F ; ---------------------------------------------------------------------------
.text:0000000000003C34                 align 8
.text:0000000000003C38
.text:0000000000003C38 loc_3C38:                               ; CODE XREF: parse_block_signal_params+36↑j
.text:0000000000003C38                 lea     rdi, block_signals ; set
.text:0000000000003C3F                 call    _sigemptyset
.text:0000000000003C44                 lea     rdi, unblock_signals ; set
.text:0000000000003C4B                 call    _sigemptyset
.text:0000000000003C50                 jmp     loc_3B1C
.text:0000000000003C50 ; ---------------------------------------------------------------------------
.text:0000000000003C55                 align 8
.text:0000000000003C58
.text:0000000000003C58 loc_3C58:                               ; CODE XREF: parse_block_signal_params+23↑j
.text:0000000000003C58                 test    sil, sil
.text:0000000000003C5B                 jz      short loc_3CA0
.text:0000000000003C5D                 lea     rdi, block_signals ; set
.text:0000000000003C64                 call    _sigfillset
.text:0000000000003C69                 lea     rdi, unblock_signals ; set
.text:0000000000003C70
.text:0000000000003C70 loc_3C70:                               ; CODE XREF: parse_block_signal_params+1D3↓j
.text:0000000000003C70                 call    _sigemptyset
.text:0000000000003C75                 mov     rax, [rsp+68h+var_40]
.text:0000000000003C7A                 xor     rax, fs:28h
.text:0000000000003C83                 mov     cs:sig_mask_changed, 1
.text:0000000000003C8A                 jnz     short loc_3CB5
.text:0000000000003C8C                 add     rsp, 38h
.text:0000000000003C90                 pop     rbx
.text:0000000000003C91                 pop     rbp
.text:0000000000003C92                 pop     r12
.text:0000000000003C94                 pop     r13
.text:0000000000003C96                 pop     r14
.text:0000000000003C98                 pop     r15
.text:0000000000003C9A                 retn
.text:0000000000003C9A ; ---------------------------------------------------------------------------
.text:0000000000003C9B                 align 20h
.text:0000000000003CA0
.text:0000000000003CA0 loc_3CA0:                               ; CODE XREF: parse_block_signal_params+17B↑j
.text:0000000000003CA0                 lea     rdi, unblock_signals ; set
.text:0000000000003CA7                 call    _sigfillset
.text:0000000000003CAC                 lea     rdi, block_signals
.text:0000000000003CB3                 jmp     short loc_3C70
.text:0000000000003CB5 ; ---------------------------------------------------------------------------
.text:0000000000003CB5
.text:0000000000003CB5 loc_3CB5:                               ; CODE XREF: parse_block_signal_params+136↑j
.text:0000000000003CB5                                         ; parse_block_signal_params+1AA↑j
.text:0000000000003CB5                 call    ___stack_chk_fail
.text:0000000000003CB5 ; } // starts at 3AE0
.text:0000000000003CB5 parse_block_signal_params endp
.text:0000000000003CB5
.text:0000000000003CB5 ; ---------------------------------------------------------------------------
.text:0000000000003CBA                 align 20h
.text:0000000000003CC0
.text:0000000000003CC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003CC0
.text:0000000000003CC0
.text:0000000000003CC0 ; __int64 __fastcall operand2sig(char *nptr)
.text:0000000000003CC0                 public operand2sig
.text:0000000000003CC0 operand2sig     proc near               ; CODE XREF: parse_signal_action_params+8E↑p
.text:0000000000003CC0                                         ; parse_block_signal_params+C0↑p
.text:0000000000003CC0
.text:0000000000003CC0 var_4C          = dword ptr -4Ch
.text:0000000000003CC0 endptr          = qword ptr -48h
.text:0000000000003CC0 var_40          = qword ptr -40h
.text:0000000000003CC0
.text:0000000000003CC0 ; __unwind {
.text:0000000000003CC0                 push    r15
.text:0000000000003CC2                 push    r14
.text:0000000000003CC4                 mov     r14, rsi
.text:0000000000003CC7                 push    r13
.text:0000000000003CC9                 push    r12
.text:0000000000003CCB                 push    rbp
.text:0000000000003CCC                 push    rbx
.text:0000000000003CCD                 mov     rbp, rdi
.text:0000000000003CD0                 sub     rsp, 28h
.text:0000000000003CD4                 mov     rax, fs:28h
.text:0000000000003CDD                 mov     [rsp+58h+var_40], rax
.text:0000000000003CE2                 xor     eax, eax
.text:0000000000003CE4                 movsx   eax, byte ptr [rdi]
.text:0000000000003CE7                 sub     eax, 30h ; '0'
.text:0000000000003CEA                 cmp     eax, 9
.text:0000000000003CED                 ja      loc_3D80
.text:0000000000003CF3                 call    ___errno_location
.text:0000000000003CF8                 lea     rsi, [rsp+58h+endptr] ; endptr
.text:0000000000003CFD                 mov     edx, 0Ah        ; base
.text:0000000000003D02                 mov     dword ptr [rax], 0
.text:0000000000003D08                 mov     rdi, rbp        ; nptr
.text:0000000000003D0B                 mov     rbx, rax
.text:0000000000003D0E                 call    _strtol
.text:0000000000003D13                 mov     rdx, [rsp+58h+endptr]
.text:0000000000003D18                 cmp     rdx, rbp
.text:0000000000003D1B                 jz      short loc_3D38
.text:0000000000003D1D                 cmp     byte ptr [rdx], 0
.text:0000000000003D20                 jnz     short loc_3D38
.text:0000000000003D22                 mov     edx, [rbx]
.text:0000000000003D24                 test    edx, edx
.text:0000000000003D26                 jnz     short loc_3D38
.text:0000000000003D28                 movsxd  rdx, eax
.text:0000000000003D2B                 cmp     rdx, rax
.text:0000000000003D2E                 jz      loc_3E70
.text:0000000000003D34                 nop     dword ptr [rax+00h]
.text:0000000000003D38
.text:0000000000003D38 loc_3D38:                               ; CODE XREF: operand2sig+5B↑j
.text:0000000000003D38                                         ; operand2sig+60↑j ...
.text:0000000000003D38                 mov     [rsp+58h+var_4C], 0FFFFFFFFh
.text:0000000000003D40
.text:0000000000003D40 loc_3D40:                               ; CODE XREF: operand2sig+124↓j
.text:0000000000003D40                                         ; operand2sig+136↓j ...
.text:0000000000003D40                 mov     rdi, rbp
.text:0000000000003D43                 call    quote
.text:0000000000003D48                 lea     rsi, aSInvalidSignal ; "%s: invalid signal"
.text:0000000000003D4F                 mov     rbx, rax
.text:0000000000003D52                 mov     edx, 5          ; category
.text:0000000000003D57                 xor     edi, edi        ; domainname
.text:0000000000003D59                 call    _dcgettext
.text:0000000000003D5E                 mov     rcx, rbx
.text:0000000000003D61                 mov     rdx, rax        ; format
.text:0000000000003D64                 xor     esi, esi        ; errnum
.text:0000000000003D66                 xor     eax, eax
.text:0000000000003D68                 xor     edi, edi        ; src
.text:0000000000003D6A                 call    _error
.text:0000000000003D6F                 mov     eax, 0FFFFFFFFh
.text:0000000000003D74                 jmp     loc_3E00
.text:0000000000003D74 ; ---------------------------------------------------------------------------
.text:0000000000003D79                 align 20h
.text:0000000000003D80
.text:0000000000003D80 loc_3D80:                               ; CODE XREF: operand2sig+2D↑j
.text:0000000000003D80                 call    xstrdup
.text:0000000000003D85                 movzx   ebx, byte ptr [rax]
.text:0000000000003D88                 mov     r13, rax
.text:0000000000003D8B                 test    bl, bl
.text:0000000000003D8D                 jz      short loc_3DC2
.text:0000000000003D8F                 lea     r12, s          ; "abcdefghijklmnopqrstuvwxyz"
.text:0000000000003D96                 mov     r15, rax
.text:0000000000003D99                 nop     dword ptr [rax+00000000h]
.text:0000000000003DA0
.text:0000000000003DA0 loc_3DA0:                               ; CODE XREF: operand2sig+100↓j
.text:0000000000003DA0                 movsx   esi, bl         ; c
.text:0000000000003DA3                 mov     rdi, r12        ; s
.text:0000000000003DA6                 call    _strchr
.text:0000000000003DAB                 test    rax, rax
.text:0000000000003DAE                 jz      short loc_3DB6
.text:0000000000003DB0                 sub     ebx, 20h ; ' '
.text:0000000000003DB3                 mov     [r15], bl
.text:0000000000003DB6
.text:0000000000003DB6 loc_3DB6:                               ; CODE XREF: operand2sig+EE↑j
.text:0000000000003DB6                 add     r15, 1
.text:0000000000003DBA                 movzx   ebx, byte ptr [r15]
.text:0000000000003DBE                 test    bl, bl
.text:0000000000003DC0                 jnz     short loc_3DA0
.text:0000000000003DC2
.text:0000000000003DC2 loc_3DC2:                               ; CODE XREF: operand2sig+CD↑j
.text:0000000000003DC2                 lea     rbx, [rsp+58h+var_4C]
.text:0000000000003DC7                 mov     rdi, r13        ; s2
.text:0000000000003DCA                 mov     rsi, rbx
.text:0000000000003DCD                 call    str2sig
.text:0000000000003DD2                 test    eax, eax
.text:0000000000003DD4                 jnz     short loc_3E28
.text:0000000000003DD6
.text:0000000000003DD6 loc_3DD6:                               ; CODE XREF: operand2sig+1A6↓j
.text:0000000000003DD6                 mov     ebx, [rsp+58h+var_4C]
.text:0000000000003DDA                 mov     rdi, r13        ; ptr
.text:0000000000003DDD                 call    _free
.text:0000000000003DE2                 test    ebx, ebx
.text:0000000000003DE4                 js      loc_3D40
.text:0000000000003DEA
.text:0000000000003DEA loc_3DEA:                               ; CODE XREF: operand2sig+1CE↓j
.text:0000000000003DEA                 mov     rsi, r14
.text:0000000000003DED                 mov     edi, ebx
.text:0000000000003DEF                 call    sig2str
.text:0000000000003DF4                 test    eax, eax
.text:0000000000003DF6                 jnz     loc_3D40
.text:0000000000003DFC                 mov     eax, [rsp+58h+var_4C]
.text:0000000000003E00
.text:0000000000003E00 loc_3E00:                               ; CODE XREF: operand2sig+B4↑j
.text:0000000000003E00                 mov     rcx, [rsp+58h+var_40]
.text:0000000000003E05                 xor     rcx, fs:28h
.text:0000000000003E0E                 jnz     loc_3E9C
.text:0000000000003E14                 add     rsp, 28h
.text:0000000000003E18                 pop     rbx
.text:0000000000003E19                 pop     rbp
.text:0000000000003E1A                 pop     r12
.text:0000000000003E1C                 pop     r13
.text:0000000000003E1E                 pop     r14
.text:0000000000003E20                 pop     r15
.text:0000000000003E22                 retn
.text:0000000000003E22 ; ---------------------------------------------------------------------------
.text:0000000000003E23                 align 8
.text:0000000000003E28
.text:0000000000003E28 loc_3E28:                               ; CODE XREF: operand2sig+114↑j
.text:0000000000003E28                 cmp     byte ptr [r13+0], 53h ; 'S'
.text:0000000000003E2D                 jz      short loc_3E48
.text:0000000000003E2F
.text:0000000000003E2F loc_3E2F:                               ; CODE XREF: operand2sig+18D↓j
.text:0000000000003E2F                                         ; operand2sig+194↓j ...
.text:0000000000003E2F                 mov     rdi, r13        ; ptr
.text:0000000000003E32                 mov     [rsp+58h+var_4C], 0FFFFFFFFh
.text:0000000000003E3A                 call    _free
.text:0000000000003E3F                 jmp     loc_3D40
.text:0000000000003E3F ; ---------------------------------------------------------------------------
.text:0000000000003E44                 align 8
.text:0000000000003E48
.text:0000000000003E48 loc_3E48:                               ; CODE XREF: operand2sig+16D↑j
.text:0000000000003E48                 cmp     byte ptr [r13+1], 49h ; 'I'
.text:0000000000003E4D                 jnz     short loc_3E2F
.text:0000000000003E4F                 cmp     byte ptr [r13+2], 47h ; 'G'
.text:0000000000003E54                 jnz     short loc_3E2F
.text:0000000000003E56                 lea     rdi, [r13+3]    ; s2
.text:0000000000003E5A                 mov     rsi, rbx
.text:0000000000003E5D                 call    str2sig
.text:0000000000003E62                 test    eax, eax
.text:0000000000003E64                 jnz     short loc_3E2F
.text:0000000000003E66                 jmp     loc_3DD6
.text:0000000000003E66 ; ---------------------------------------------------------------------------
.text:0000000000003E6B                 align 10h
.text:0000000000003E70
.text:0000000000003E70 loc_3E70:                               ; CODE XREF: operand2sig+6E↑j
.text:0000000000003E70                 cmp     edx, 0FFFFFFFFh
.text:0000000000003E73                 jz      short loc_3E93
.text:0000000000003E75                 cmp     edx, 0FFh
.text:0000000000003E7B                 mov     eax, 7Fh
.text:0000000000003E80                 mov     ebx, 0FFh
.text:0000000000003E85                 cmovl   ebx, eax
.text:0000000000003E88                 and     ebx, edx
.text:0000000000003E8A                 mov     [rsp+58h+var_4C], ebx
.text:0000000000003E8E                 jmp     loc_3DEA
.text:0000000000003E93 ; ---------------------------------------------------------------------------
.text:0000000000003E93
.text:0000000000003E93 loc_3E93:                               ; CODE XREF: operand2sig+1B3↑j
.text:0000000000003E93                 mov     [rsp+58h+var_4C], edx
.text:0000000000003E97                 jmp     loc_3D40
.text:0000000000003E9C ; ---------------------------------------------------------------------------
.text:0000000000003E9C
.text:0000000000003E9C loc_3E9C:                               ; CODE XREF: operand2sig+14E↑j
.text:0000000000003E9C                 call    ___stack_chk_fail
.text:0000000000003E9C ; } // starts at 3CC0
.text:0000000000003E9C operand2sig     endp
.text:0000000000003E9C
.text:0000000000003E9C ; ---------------------------------------------------------------------------
.text:0000000000003EA1                 align 10h
.text:0000000000003EB0
.text:0000000000003EB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003EB0
.text:0000000000003EB0
.text:0000000000003EB0                 public close_stdout_set_file_name
.text:0000000000003EB0 close_stdout_set_file_name proc near
.text:0000000000003EB0 ; __unwind {
.text:0000000000003EB0                 mov     cs:file_name, rdi
.text:0000000000003EB7                 retn
.text:0000000000003EB7 ; } // starts at 3EB0
.text:0000000000003EB7 close_stdout_set_file_name endp
.text:0000000000003EB7
.text:0000000000003EB7 ; ---------------------------------------------------------------------------
.text:0000000000003EB8                 align 20h
.text:0000000000003EC0
.text:0000000000003EC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003EC0
.text:0000000000003EC0
.text:0000000000003EC0                 public close_stdout_set_ignore_EPIPE
.text:0000000000003EC0 close_stdout_set_ignore_EPIPE proc near
.text:0000000000003EC0 ; __unwind {
.text:0000000000003EC0                 mov     cs:ignore_EPIPE, dil
.text:0000000000003EC7                 retn
.text:0000000000003EC7 ; } // starts at 3EC0
.text:0000000000003EC7 close_stdout_set_ignore_EPIPE endp
.text:0000000000003EC7
.text:0000000000003EC7 ; ---------------------------------------------------------------------------
.text:0000000000003EC8                 align 10h
.text:0000000000003ED0
.text:0000000000003ED0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003ED0
.text:0000000000003ED0 ; Attributes: info_from_lumina
.text:0000000000003ED0
.text:0000000000003ED0 ; void __cdecl close_stdout()
.text:0000000000003ED0                 public close_stdout
.text:0000000000003ED0 close_stdout    proc near               ; DATA XREF: main+63↑o
.text:0000000000003ED0 ; __unwind {
.text:0000000000003ED0                 push    rbp
.text:0000000000003ED1                 push    rbx
.text:0000000000003ED2                 sub     rsp, 8
.text:0000000000003ED6                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000003EDD                 call    close_stream
.text:0000000000003EE2                 test    eax, eax
.text:0000000000003EE4                 jz      short loc_3EFC
.text:0000000000003EE6                 call    ___errno_location
.text:0000000000003EEB                 cmp     cs:ignore_EPIPE, 0
.text:0000000000003EF2                 mov     rbx, rax
.text:0000000000003EF5                 jz      short loc_3F13
.text:0000000000003EF7                 cmp     dword ptr [rax], 20h ; ' '
.text:0000000000003EFA                 jnz     short loc_3F13
.text:0000000000003EFC
.text:0000000000003EFC loc_3EFC:                               ; CODE XREF: close_stdout+14↑j
.text:0000000000003EFC                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:0000000000003F03                 call    close_stream
.text:0000000000003F08                 test    eax, eax
.text:0000000000003F0A                 jnz     short loc_3F52
.text:0000000000003F0C                 add     rsp, 8
.text:0000000000003F10                 pop     rbx
.text:0000000000003F11                 pop     rbp
.text:0000000000003F12                 retn
.text:0000000000003F13 ; ---------------------------------------------------------------------------
.text:0000000000003F13
.text:0000000000003F13 loc_3F13:                               ; CODE XREF: close_stdout+25↑j
.text:0000000000003F13                                         ; close_stdout+2A↑j
.text:0000000000003F13                 lea     rsi, aWriteError ; "write error"
.text:0000000000003F1A                 xor     edi, edi        ; domainname
.text:0000000000003F1C                 mov     edx, 5          ; category
.text:0000000000003F21                 call    _dcgettext
.text:0000000000003F26                 mov     rdi, cs:file_name
.text:0000000000003F2D                 mov     rbp, rax
.text:0000000000003F30                 test    rdi, rdi
.text:0000000000003F33                 jz      short loc_3F5D
.text:0000000000003F35                 call    quotearg_colon
.text:0000000000003F3A                 mov     esi, [rbx]      ; errnum
.text:0000000000003F3C                 lea     rdx, format     ; "%s: %s"
.text:0000000000003F43                 mov     rcx, rax
.text:0000000000003F46                 mov     r8, rbp
.text:0000000000003F49                 xor     edi, edi        ; status
.text:0000000000003F4B                 xor     eax, eax
.text:0000000000003F4D                 call    _error
.text:0000000000003F52
.text:0000000000003F52 loc_3F52:                               ; CODE XREF: close_stdout+3A↑j
.text:0000000000003F52                                         ; close_stdout+A2↓j
.text:0000000000003F52                 mov     edi, cs:exit_failure ; status
.text:0000000000003F58                 call    __exit
.text:0000000000003F5D ; ---------------------------------------------------------------------------
.text:0000000000003F5D
.text:0000000000003F5D loc_3F5D:                               ; CODE XREF: close_stdout+63↑j
.text:0000000000003F5D                 mov     esi, [rbx]      ; errnum
.text:0000000000003F5F                 lea     rdx, format+4   ; format
.text:0000000000003F66                 mov     rcx, rax
.text:0000000000003F69                 xor     edi, edi        ; status
.text:0000000000003F6B                 xor     eax, eax
.text:0000000000003F6D                 call    _error
.text:0000000000003F72                 jmp     short loc_3F52
.text:0000000000003F72 ; } // starts at 3ED0
.text:0000000000003F72 close_stdout    endp
.text:0000000000003F72
.text:0000000000003F72 ; ---------------------------------------------------------------------------
.text:0000000000003F74                 align 20h
.text:0000000000003F80
.text:0000000000003F80 ; =============== S U B R O U T I N E =======================================
.text:0000000000003F80
.text:0000000000003F80
.text:0000000000003F80                 public set_program_name
.text:0000000000003F80 set_program_name proc near              ; CODE XREF: main+2E↑p
.text:0000000000003F80 ; __unwind {
.text:0000000000003F80                 test    rdi, rdi
.text:0000000000003F83                 push    rbx
.text:0000000000003F84                 jz      short loc_3FFD
.text:0000000000003F86                 mov     esi, 2Fh ; '/'  ; c
.text:0000000000003F8B                 mov     rbx, rdi
.text:0000000000003F8E                 call    _strrchr
.text:0000000000003F93                 test    rax, rax
.text:0000000000003F96                 jz      short loc_3FED
.text:0000000000003F98                 lea     r8, [rax+1]
.text:0000000000003F9C                 mov     rdx, r8
.text:0000000000003F9F                 sub     rdx, rbx
.text:0000000000003FA2                 cmp     rdx, 6
.text:0000000000003FA6                 jle     short loc_3FED
.text:0000000000003FA8                 lea     rsi, [rax-6]
.text:0000000000003FAC                 lea     rdi, aLibs      ; "/.libs/"
.text:0000000000003FB3                 mov     ecx, 7
.text:0000000000003FB8                 repe cmpsb
.text:0000000000003FBA                 setnbe  dl
.text:0000000000003FBD                 sbb     dl, 0
.text:0000000000003FC0                 test    dl, dl
.text:0000000000003FC2                 jnz     short loc_3FED
.text:0000000000003FC4                 lea     rdi, aLt        ; "lt-"
.text:0000000000003FCB                 mov     ecx, 3
.text:0000000000003FD0                 mov     rsi, r8
.text:0000000000003FD3                 mov     rbx, r8
.text:0000000000003FD6                 repe cmpsb
.text:0000000000003FD8                 setnbe  dl
.text:0000000000003FDB                 sbb     dl, 0
.text:0000000000003FDE                 test    dl, dl
.text:0000000000003FE0                 jnz     short loc_3FED
.text:0000000000003FE2                 lea     rbx, [rax+4]
.text:0000000000003FE6                 mov     cs:program_invocation_short_name@@GLIBC_2_2_5, rbx
.text:0000000000003FED
.text:0000000000003FED loc_3FED:                               ; CODE XREF: set_program_name+16↑j
.text:0000000000003FED                                         ; set_program_name+26↑j ...
.text:0000000000003FED                 mov     cs:program_name, rbx
.text:0000000000003FF4                 mov     cs:program_invocation_name@@GLIBC_2_2_5, rbx
.text:0000000000003FFB                 pop     rbx
.text:0000000000003FFC                 retn
.text:0000000000003FFD ; ---------------------------------------------------------------------------
.text:0000000000003FFD
.text:0000000000003FFD loc_3FFD:                               ; CODE XREF: set_program_name+4↑j
.text:0000000000003FFD                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:0000000000004004                 lea     rdi, aANullArgv0WasP ; "A NULL argv[0] was passed through an ex"...
.text:000000000000400B                 mov     edx, 37h ; '7'  ; n
.text:0000000000004010                 mov     esi, 1          ; size
.text:0000000000004015                 call    _fwrite
.text:000000000000401A                 call    _abort
.text:000000000000401A ; } // starts at 3F80
.text:000000000000401A set_program_name endp
.text:000000000000401A
.text:000000000000401A ; ---------------------------------------------------------------------------
.text:000000000000401F                 align 20h
.text:0000000000004020
.text:0000000000004020 ; =============== S U B R O U T I N E =======================================
.text:0000000000004020
.text:0000000000004020 ; Attributes: info_from_lumina
.text:0000000000004020
.text:0000000000004020 ; const char *__fastcall gettext_quote(const char *msgid, quoting_style s)
.text:0000000000004020 gettext_quote   proc near               ; CODE XREF: quotearg_buffer_restyled+1165↓p
.text:0000000000004020                                         ; quotearg_buffer_restyled+117B↓p
.text:0000000000004020 ; __unwind {
.text:0000000000004020                 push    rbp
.text:0000000000004021                 push    rbx
.text:0000000000004022                 mov     rbp, rdi
.text:0000000000004025                 mov     ebx, esi
.text:0000000000004027                 sub     rsp, 8
.text:000000000000402B                 call    locale_charset
.text:0000000000004030                 movzx   edx, byte ptr [rax]
.text:0000000000004033                 and     edx, 0FFFFFFDFh
.text:0000000000004036                 cmp     dl, 55h ; 'U'
.text:0000000000004039                 jz      short loc_40B0
.text:000000000000403B                 cmp     dl, 47h ; 'G'
.text:000000000000403E                 jz      short loc_4060
.text:0000000000004040
.text:0000000000004040 loc_4040:                               ; CODE XREF: gettext_quote+4A↓j
.text:0000000000004040                                         ; gettext_quote+50↓j ...
.text:0000000000004040                 lea     rax, unk_778B
.text:0000000000004047                 lea     rdx, aStrStr+11h ; "'"
.text:000000000000404E                 cmp     ebx, 9
.text:0000000000004051                 cmovnz  rax, rdx
.text:0000000000004055                 add     rsp, 8
.text:0000000000004059                 pop     rbx
.text:000000000000405A                 pop     rbp
.text:000000000000405B                 retn
.text:000000000000405B ; ---------------------------------------------------------------------------
.text:000000000000405C                 align 20h
.text:0000000000004060
.text:0000000000004060 loc_4060:                               ; CODE XREF: gettext_quote+1E↑j
.text:0000000000004060                 movzx   edx, byte ptr [rax+1]
.text:0000000000004064                 and     edx, 0FFFFFFDFh
.text:0000000000004067                 cmp     dl, 42h ; 'B'
.text:000000000000406A                 jnz     short loc_4040
.text:000000000000406C                 cmp     byte ptr [rax+2], 31h ; '1'
.text:0000000000004070                 jnz     short loc_4040
.text:0000000000004072                 cmp     byte ptr [rax+3], 38h ; '8'
.text:0000000000004076                 jnz     short loc_4040
.text:0000000000004078                 cmp     byte ptr [rax+4], 30h ; '0'
.text:000000000000407C                 jnz     short loc_4040
.text:000000000000407E                 cmp     byte ptr [rax+5], 33h ; '3'
.text:0000000000004082                 jnz     short loc_4040
.text:0000000000004084                 cmp     byte ptr [rax+6], 30h ; '0'
.text:0000000000004088                 jnz     short loc_4040
.text:000000000000408A                 cmp     byte ptr [rax+7], 0
.text:000000000000408E                 jnz     short loc_4040
.text:0000000000004090                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000004094                 lea     rax, unk_7784
.text:000000000000409B                 lea     rdx, unk_7788
.text:00000000000040A2                 cmovnz  rax, rdx
.text:00000000000040A6                 add     rsp, 8
.text:00000000000040AA                 pop     rbx
.text:00000000000040AB                 pop     rbp
.text:00000000000040AC                 retn
.text:00000000000040AC ; ---------------------------------------------------------------------------
.text:00000000000040AD                 align 10h
.text:00000000000040B0
.text:00000000000040B0 loc_40B0:                               ; CODE XREF: gettext_quote+19↑j
.text:00000000000040B0                 movzx   edx, byte ptr [rax+1]
.text:00000000000040B4                 and     edx, 0FFFFFFDFh
.text:00000000000040B7                 cmp     dl, 54h ; 'T'
.text:00000000000040BA                 jnz     short loc_4040
.text:00000000000040BC                 movzx   edx, byte ptr [rax+2]
.text:00000000000040C0                 and     edx, 0FFFFFFDFh
.text:00000000000040C3                 cmp     dl, 46h ; 'F'
.text:00000000000040C6                 jnz     loc_4040
.text:00000000000040CC                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:00000000000040D0                 jnz     loc_4040
.text:00000000000040D6                 cmp     byte ptr [rax+4], 38h ; '8'
.text:00000000000040DA                 jnz     loc_4040
.text:00000000000040E0                 cmp     byte ptr [rax+5], 0
.text:00000000000040E4                 jnz     loc_4040
.text:00000000000040EA                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:00000000000040EE                 lea     rax, unk_777C
.text:00000000000040F5                 lea     rdx, unk_7780
.text:00000000000040FC                 cmovnz  rax, rdx
.text:0000000000004100                 add     rsp, 8
.text:0000000000004104                 pop     rbx
.text:0000000000004105                 pop     rbp
.text:0000000000004106                 retn
.text:0000000000004106 ; } // starts at 4020
.text:0000000000004106 gettext_quote   endp
.text:0000000000004106
.text:0000000000004106 ; ---------------------------------------------------------------------------
.text:0000000000004107                 align 10h
.text:0000000000004110
.text:0000000000004110 ; =============== S U B R O U T I N E =======================================
.text:0000000000004110
.text:0000000000004110 ; Attributes: info_from_lumina
.text:0000000000004110
.text:0000000000004110 ; size_t __fastcall quotearg_buffer_restyled(char *buffer, size_t buffersize, const char *arg, size_t argsize, quoting_style quoting_style, int flags, const unsigned int *quote_these_too, const char *left_quote, const char *right_quote)
.text:0000000000004110 quotearg_buffer_restyled proc near      ; CODE XREF: quotearg_buffer_restyled+BCD↓p
.text:0000000000004110                                         ; quotearg_buffer_restyled+11CB↓p ...
.text:0000000000004110
.text:0000000000004110 var_E0          = dword ptr -0E0h
.text:0000000000004110 var_DB          = byte ptr -0DBh
.text:0000000000004110 var_DA          = byte ptr -0DAh
.text:0000000000004110 var_D9          = byte ptr -0D9h
.text:0000000000004110 s               = qword ptr -0D8h
.text:0000000000004110 n               = qword ptr -0D0h
.text:0000000000004110 var_C8          = qword ptr -0C8h
.text:0000000000004110 ps              = qword ptr -0C0h
.text:0000000000004110 var_B8          = qword ptr -0B8h
.text:0000000000004110 var_B0          = qword ptr -0B0h
.text:0000000000004110 var_A8          = qword ptr -0A8h
.text:0000000000004110 s2              = qword ptr -0A0h
.text:0000000000004110 var_98          = qword ptr -98h
.text:0000000000004110 var_90          = qword ptr -90h
.text:0000000000004110 var_88          = qword ptr -88h
.text:0000000000004110 var_80          = qword ptr -80h
.text:0000000000004110 var_78          = qword ptr -78h
.text:0000000000004110 var_70          = dword ptr -70h
.text:0000000000004110 var_6C          = byte ptr -6Ch
.text:0000000000004110 var_6B          = byte ptr -6Bh
.text:0000000000004110 var_6A          = byte ptr -6Ah
.text:0000000000004110 var_69          = byte ptr -69h
.text:0000000000004110 var_68          = qword ptr -68h
.text:0000000000004110 var_60          = qword ptr -60h
.text:0000000000004110 wc              = dword ptr -4Ch
.text:0000000000004110 var_48          = qword ptr -48h
.text:0000000000004110 var_40          = qword ptr -40h
.text:0000000000004110 arg_0           = qword ptr  8
.text:0000000000004110 arg_8           = qword ptr  10h
.text:0000000000004110 arg_10          = qword ptr  18h
.text:0000000000004110
.text:0000000000004110 ; __unwind {
.text:0000000000004110                 push    r15
.text:0000000000004112                 push    r14
.text:0000000000004114                 mov     r15d, r8d
.text:0000000000004117                 push    r13
.text:0000000000004119                 push    r12
.text:000000000000411B                 mov     r14, rdi
.text:000000000000411E                 push    rbp
.text:000000000000411F                 push    rbx
.text:0000000000004120                 mov     ebx, r9d
.text:0000000000004123                 mov     r13, rsi
.text:0000000000004126                 mov     rbp, rcx
.text:0000000000004129                 and     ebx, 2
.text:000000000000412C                 sub     rsp, 0B8h
.text:0000000000004133                 mov     rax, [rsp+0E8h+arg_0]
.text:000000000000413B                 mov     [rsp+0E8h+s], rdx
.text:0000000000004140                 mov     [rsp+0E8h+var_E0], r8d
.text:0000000000004145                 mov     [rsp+0E8h+var_70], r9d
.text:000000000000414A                 mov     [rsp+0E8h+var_C8], rax
.text:000000000000414F                 mov     rax, [rsp+0E8h+arg_8]
.text:0000000000004157                 mov     [rsp+0E8h+var_80], rax
.text:000000000000415C                 mov     rax, [rsp+0E8h+arg_10]
.text:0000000000004164                 mov     [rsp+0E8h+var_88], rax
.text:0000000000004169                 mov     rax, fs:28h
.text:0000000000004172                 mov     [rsp+0E8h+var_40], rax
.text:000000000000417A                 xor     eax, eax
.text:000000000000417C                 call    ___ctype_get_mb_cur_max
.text:0000000000004181                 cmp     r15d, 0Ah       ; switch 11 cases
.text:0000000000004185                 mov     [rsp+0E8h+var_90], rax
.text:000000000000418A                 ja      def_41A1        ; jumptable 00000000000121F1 default case
.text:0000000000004190                 lea     rcx, jpt_41A1
.text:0000000000004197                 mov     edx, r15d
.text:000000000000419A                 movsxd  rax, ds:(jpt_41A1 - 77E0h)[rcx+rdx*4]
.text:000000000000419E                 add     rax, rcx
.text:00000000000041A1                 jmp     rax             ; switch jump
.text:00000000000041A3 ; ---------------------------------------------------------------------------
.text:00000000000041A3
.text:00000000000041A3 loc_41A3:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000041A3                                         ; quotearg_buffer_restyled+C66↓j
.text:00000000000041A3                                         ; DATA XREF: ...
.text:00000000000041A3                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 1
.text:00000000000041A8                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000041AD                 xor     r12d, r12d
.text:00000000000041B0                 mov     [rsp+0E8h+var_98], 0
.text:00000000000041B9                 mov     [rsp+0E8h+var_D9], 1
.text:00000000000041BE                 mov     [rsp+0E8h+var_DB], 0
.text:00000000000041C3
.text:00000000000041C3 loc_41C3:                               ; CODE XREF: quotearg_buffer_restyled+E94↓j
.text:00000000000041C3                 lea     rax, aStrStr+11h ; "'"
.text:00000000000041CA                 mov     [rsp+0E8h+n], 1
.text:00000000000041D3                 xor     r15d, r15d
.text:00000000000041D6                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000041DE                 mov     [rsp+0E8h+s2], rax
.text:00000000000041E3
.text:00000000000041E3 loc_41E3:                               ; CODE XREF: quotearg_buffer_restyled+7F4↓j
.text:00000000000041E3                                         ; quotearg_buffer_restyled+CB8↓j ...
.text:00000000000041E3                 xor     r11d, r11d
.text:00000000000041E6                 mov     rax, rbp
.text:00000000000041E9                 mov     r8d, r12d
.text:00000000000041EC                 mov     rbp, r11
.text:00000000000041EF                 mov     r11, rax
.text:00000000000041F2                 nop     word ptr [rax+rax+00h]
.text:00000000000041F8
.text:00000000000041F8 loc_41F8:                               ; CODE XREF: quotearg_buffer_restyled+2B2↓j
.text:00000000000041F8                                         ; quotearg_buffer_restyled+42C↓j
.text:00000000000041F8                 cmp     r11, rbp
.text:00000000000041FB                 setnz   r12b
.text:00000000000041FF                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000004203                 jnz     short loc_4212
.text:0000000000004205                 mov     rax, [rsp+0E8h+s]
.text:000000000000420A                 cmp     byte ptr [rax+rbp], 0
.text:000000000000420E                 setnz   r12b
.text:0000000000004212
.text:0000000000004212 loc_4212:                               ; CODE XREF: quotearg_buffer_restyled+F3↑j
.text:0000000000004212                 test    r12b, r12b
.text:0000000000004215                 jz      loc_4870
.text:000000000000421B                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000004220                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000004225                 lea     r9, [rdi+rbp]
.text:0000000000004229                 setnz   al
.text:000000000000422C                 and     al, [rsp+0E8h+var_DB]
.text:0000000000004230                 mov     r10d, eax
.text:0000000000004233                 jz      loc_42E0
.text:0000000000004239                 mov     rax, [rsp+0E8h+n]
.text:000000000000423E                 test    rax, rax
.text:0000000000004241                 jz      loc_4670
.text:0000000000004247                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:000000000000424B                 lea     rbx, [rbp+rax+0]
.text:0000000000004250                 jnz     short loc_4280
.text:0000000000004252                 cmp     rax, 1
.text:0000000000004256                 jbe     short loc_4280
.text:0000000000004258                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:000000000000425D                 mov     byte ptr [rsp+0E8h+var_B8], r10b
.text:0000000000004262                 mov     [rsp+0E8h+ps], r9
.text:0000000000004267                 call    _strlen
.text:000000000000426C                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000004272                 movzx   r10d, byte ptr [rsp+0E8h+var_B8]
.text:0000000000004278                 mov     r11, rax
.text:000000000000427B                 mov     r9, [rsp+0E8h+ps]
.text:0000000000004280
.text:0000000000004280 loc_4280:                               ; CODE XREF: quotearg_buffer_restyled+140↑j
.text:0000000000004280                                         ; quotearg_buffer_restyled+146↑j
.text:0000000000004280                 cmp     rbx, r11
.text:0000000000004283                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000004288                 ja      loc_4840
.text:000000000000428E                 mov     rdx, [rsp+0E8h+n] ; n
.text:0000000000004293                 mov     rsi, [rsp+0E8h+s2] ; s2
.text:0000000000004298                 mov     rdi, r9         ; s1
.text:000000000000429B                 mov     [rsp+0E8h+var_A8], r11
.text:00000000000042A0                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:00000000000042A5                 mov     [rsp+0E8h+var_B8], r9
.text:00000000000042AA                 call    _memcmp
.text:00000000000042AF                 test    eax, eax
.text:00000000000042B1                 mov     r9, [rsp+0E8h+var_B8]
.text:00000000000042B6                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:00000000000042BC                 mov     r11, [rsp+0E8h+var_A8]
.text:00000000000042C1                 jnz     loc_4840
.text:00000000000042C7                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000042CC                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:00000000000042D2                 jnz     loc_5255
.text:00000000000042D8                 nop     dword ptr [rax+rax+00000000h]
.text:00000000000042E0
.text:00000000000042E0 loc_42E0:                               ; CODE XREF: quotearg_buffer_restyled+123↑j
.text:00000000000042E0                                         ; quotearg_buffer_restyled+733↓j
.text:00000000000042E0                 movzx   ebx, byte ptr [r9]
.text:00000000000042E4                 cmp     bl, 7Eh         ; switch 127 cases
.text:00000000000042E7                 ja      def_42FE        ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:00000000000042ED                 lea     rcx, jpt_42FE
.text:00000000000042F4                 movzx   edx, bl
.text:00000000000042F7                 movsxd  rax, ds:(jpt_42FE - 780Ch)[rcx+rdx*4]
.text:00000000000042FB                 add     rax, rcx
.text:00000000000042FE                 jmp     rax             ; switch jump
.text:0000000000004300 ; ---------------------------------------------------------------------------
.text:0000000000004300
.text:0000000000004300 loc_4300:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000004300                                         ; DATA XREF: .rodata:jpt_468A↓o
.text:0000000000004300                 xor     r10d, r10d      ; jumptable 00000000000126DA cases 123,125
.text:0000000000004303
.text:0000000000004303 loc_4303:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004303                                         ; DATA XREF: .rodata:jpt_42FE↓o
.text:0000000000004303                 cmp     r11, 1          ; jumptable 000000000001234E cases 123,125
.text:0000000000004307                 setnz   al
.text:000000000000430A                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:000000000000430E                 jnz     short loc_431C
.text:0000000000004310                 mov     rax, [rsp+0E8h+s]
.text:0000000000004315                 cmp     byte ptr [rax+1], 0
.text:0000000000004319                 setnz   al
.text:000000000000431C
.text:000000000000431C loc_431C:                               ; CODE XREF: quotearg_buffer_restyled+1FE↑j
.text:000000000000431C                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000004321                 setz    dl
.text:0000000000004324                 test    al, al
.text:0000000000004326                 jz      loc_4578
.text:000000000000432C
.text:000000000000432C loc_432C:                               ; CODE XREF: quotearg_buffer_restyled+46B↓j
.text:000000000000432C                 xor     r12d, r12d
.text:000000000000432F                 xor     eax, eax
.text:0000000000004331                 nop     dword ptr [rax+00000000h]
.text:0000000000004338
.text:0000000000004338 loc_4338:                               ; CODE XREF: quotearg_buffer_restyled+2E9↓j
.text:0000000000004338                                         ; quotearg_buffer_restyled+30C↓j ...
.text:0000000000004338                 cmp     [rsp+0E8h+var_DB], 1
.text:000000000000433D                 jnz     loc_4452
.text:0000000000004343                 test    dl, dl
.text:0000000000004345                 jnz     loc_4452
.text:000000000000434B
.text:000000000000434B loc_434B:                               ; CODE XREF: quotearg_buffer_restyled+347↓j
.text:000000000000434B                 mov     rsi, [rsp+0E8h+var_C8]
.text:0000000000004350                 test    rsi, rsi
.text:0000000000004353                 jz      short loc_4369
.text:0000000000004355                 mov     edx, ebx
.text:0000000000004357                 shr     dl, 5
.text:000000000000435A                 movzx   edx, dl
.text:000000000000435D                 mov     edx, [rsi+rdx*4]
.text:0000000000004360                 bt      edx, ebx
.text:0000000000004363                 jb      loc_44B3
.text:0000000000004369
.text:0000000000004369 loc_4369:                               ; CODE XREF: quotearg_buffer_restyled+243↑j
.text:0000000000004369                                         ; quotearg_buffer_restyled+34D↓j ...
.text:0000000000004369                 test    r10b, r10b
.text:000000000000436C                 jnz     loc_44B3
.text:0000000000004372                 xor     eax, 1
.text:0000000000004375                 add     rbp, 1
.text:0000000000004379                 and     eax, r8d
.text:000000000000437C
.text:000000000000437C loc_437C:                               ; CODE XREF: quotearg_buffer_restyled+75A↓j
.text:000000000000437C                                         ; quotearg_buffer_restyled+AE8↓j
.text:000000000000437C                 test    al, al
.text:000000000000437E                 jz      short loc_43A0
.text:0000000000004380                 cmp     r13, r15
.text:0000000000004383                 jbe     short loc_438A
.text:0000000000004385                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000438A
.text:000000000000438A loc_438A:                               ; CODE XREF: quotearg_buffer_restyled+273↑j
.text:000000000000438A                 lea     rax, [r15+1]
.text:000000000000438E                 cmp     r13, rax
.text:0000000000004391                 jbe     short loc_4399
.text:0000000000004393                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000004399
.text:0000000000004399 loc_4399:                               ; CODE XREF: quotearg_buffer_restyled+281↑j
.text:0000000000004399                 add     r15, 2
.text:000000000000439D                 xor     r8d, r8d
.text:00000000000043A0
.text:00000000000043A0 loc_43A0:                               ; CODE XREF: quotearg_buffer_restyled+26E↑j
.text:00000000000043A0                                         ; quotearg_buffer_restyled+403↓j ...
.text:00000000000043A0                 cmp     r15, r13
.text:00000000000043A3                 jnb     short loc_43A9
.text:00000000000043A5                 mov     [r14+r15], bl
.text:00000000000043A9
.text:00000000000043A9 loc_43A9:                               ; CODE XREF: quotearg_buffer_restyled+293↑j
.text:00000000000043A9                 movzx   edi, [rsp+0E8h+var_DA]
.text:00000000000043AE                 add     r15, 1
.text:00000000000043B2                 mov     eax, 0
.text:00000000000043B7                 test    r12b, r12b
.text:00000000000043BA                 cmovz   edi, eax
.text:00000000000043BD                 mov     [rsp+0E8h+var_DA], dil
.text:00000000000043C2                 jmp     loc_41F8
.text:00000000000043C2 ; ---------------------------------------------------------------------------
.text:00000000000043C7                 align 10h
.text:00000000000043D0
.text:00000000000043D0 loc_43D0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:00000000000043D0                                         ; DATA XREF: .rodata:jpt_468A↓o
.text:00000000000043D0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 63
.text:00000000000043D3
.text:00000000000043D3 loc_43D3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000043D3                                         ; DATA XREF: .rodata:jpt_42FE↓o
.text:00000000000043D3                 mov     eax, [rsp+0E8h+var_E0] ; jumptable 000000000001234E case 63
.text:00000000000043D7                 cmp     eax, 2
.text:00000000000043DA                 jz      loc_4998
.text:00000000000043E0                 cmp     eax, 5
.text:00000000000043E3                 jz      loc_4958
.text:00000000000043E9                 cmp     eax, 2
.text:00000000000043EC                 mov     ebx, 3Fh ; '?'
.text:00000000000043F1                 setz    dl
.text:00000000000043F4                 xor     r12d, r12d
.text:00000000000043F7                 xor     eax, eax
.text:00000000000043F9                 jmp     loc_4338
.text:00000000000043F9 ; ---------------------------------------------------------------------------
.text:00000000000043FE                 align 20h
.text:0000000000004400
.text:0000000000004400 loc_4400:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000004400                                         ; DATA XREF: .rodata:jpt_468A↓o
.text:0000000000004400                 xor     r10d, r10d      ; jumptable 00000000000126DA case 39
.text:0000000000004403
.text:0000000000004403 loc_4403:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004403                                         ; DATA XREF: .rodata:jpt_42FE↓o
.text:0000000000004403                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 39
.text:0000000000004408                 jz      loc_4910
.text:000000000000440E                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000004413                 xor     edx, edx
.text:0000000000004415                 xor     eax, eax
.text:0000000000004417                 mov     ebx, 27h ; '''
.text:000000000000441C                 jmp     loc_4338
.text:000000000000441C ; ---------------------------------------------------------------------------
.text:0000000000004421                 align 8
.text:0000000000004428
.text:0000000000004428 loc_4428:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004428                                         ; DATA XREF: .rodata:jpt_42FE↓o
.text:0000000000004428                 mov     edx, 9          ; jumptable 000000000001234E case 9
.text:000000000000442D                 mov     ebx, 74h ; 't'
.text:0000000000004432
.text:0000000000004432 loc_4432:                               ; CODE XREF: quotearg_buffer_restyled+4BA↓j
.text:0000000000004432                                         ; quotearg_buffer_restyled+4EA↓j ...
.text:0000000000004432                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000004437                 setz    al
.text:000000000000443A                 and     al, [rsp+0E8h+var_D9]
.text:000000000000443E                 jnz     loc_458E
.text:0000000000004444
.text:0000000000004444 loc_4444:                               ; CODE XREF: quotearg_buffer_restyled+362↓j
.text:0000000000004444                                         ; quotearg_buffer_restyled+45A↓j ...
.text:0000000000004444                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000004449                 jnz     short loc_44B0
.text:000000000000444B
.text:000000000000444B loc_444B:                               ; CODE XREF: quotearg_buffer_restyled+422↓j
.text:000000000000444B                 mov     ebx, edx
.text:000000000000444D                 xor     r12d, r12d
.text:0000000000004450                 xor     eax, eax
.text:0000000000004452
.text:0000000000004452 loc_4452:                               ; CODE XREF: quotearg_buffer_restyled+22D↑j
.text:0000000000004452                                         ; quotearg_buffer_restyled+235↑j
.text:0000000000004452                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000004457                 jnz     loc_434B
.text:000000000000445D                 jmp     loc_4369
.text:000000000000445D ; ---------------------------------------------------------------------------
.text:0000000000004462                 align 8
.text:0000000000004468
.text:0000000000004468 loc_4468:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004468                                         ; DATA XREF: .rodata:jpt_42FE↓o
.text:0000000000004468                 mov     edx, 8          ; jumptable 000000000001234E case 8
.text:000000000000446D                 mov     ebx, 62h ; 'b'
.text:0000000000004472                 jmp     short loc_4444
.text:0000000000004472 ; ---------------------------------------------------------------------------
.text:0000000000004474                 align 8
.text:0000000000004478
.text:0000000000004478 loc_4478:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004478                                         ; DATA XREF: .rodata:jpt_42FE↓o
.text:0000000000004478                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 92
.text:000000000000447D                 jz      loc_4850
.text:0000000000004483                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000004488                 jz      loc_46A0
.text:000000000000448E
.text:000000000000448E loc_448E:                               ; CODE XREF: quotearg_buffer_restyled+588↓j
.text:000000000000448E                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000004493                 jz      loc_46A0
.text:0000000000004499                 cmp     [rsp+0E8h+n], 0
.text:000000000000449F                 jnz     loc_485B
.text:00000000000044A5                 mov     ebx, 5Ch ; '\'
.text:00000000000044AA                 nop     word ptr [rax+rax+00h]
.text:00000000000044B0
.text:00000000000044B0 loc_44B0:                               ; CODE XREF: quotearg_buffer_restyled+339↑j
.text:00000000000044B0                                         ; quotearg_buffer_restyled+5D5↓j ...
.text:00000000000044B0                 xor     r12d, r12d
.text:00000000000044B3
.text:00000000000044B3 loc_44B3:                               ; CODE XREF: quotearg_buffer_restyled+253↑j
.text:00000000000044B3                                         ; quotearg_buffer_restyled+25C↑j
.text:00000000000044B3                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000044B8                 setz    dl
.text:00000000000044BB                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000044C0                 mov     eax, edx
.text:00000000000044C2                 jnz     loc_4D18
.text:00000000000044C8                 mov     eax, r8d
.text:00000000000044CB                 xor     eax, 1
.text:00000000000044CE                 and     al, dl
.text:00000000000044D0                 jz      short loc_4501
.text:00000000000044D2                 cmp     r13, r15
.text:00000000000044D5                 jbe     short loc_44DC
.text:00000000000044D7                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000044DC
.text:00000000000044DC loc_44DC:                               ; CODE XREF: quotearg_buffer_restyled+3C5↑j
.text:00000000000044DC                 lea     rdx, [r15+1]
.text:00000000000044E0                 cmp     r13, rdx
.text:00000000000044E3                 jbe     short loc_44EB
.text:00000000000044E5                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:00000000000044EB
.text:00000000000044EB loc_44EB:                               ; CODE XREF: quotearg_buffer_restyled+3D3↑j
.text:00000000000044EB                 lea     rdx, [r15+2]
.text:00000000000044EF                 cmp     r13, rdx
.text:00000000000044F2                 jbe     short loc_44FA
.text:00000000000044F4                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:00000000000044FA
.text:00000000000044FA loc_44FA:                               ; CODE XREF: quotearg_buffer_restyled+3E2↑j
.text:00000000000044FA                 add     r15, 3
.text:00000000000044FE                 mov     r8d, eax
.text:0000000000004501
.text:0000000000004501 loc_4501:                               ; CODE XREF: quotearg_buffer_restyled+3C0↑j
.text:0000000000004501                 cmp     r13, r15
.text:0000000000004504                 jbe     short loc_450B
.text:0000000000004506                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:000000000000450B
.text:000000000000450B loc_450B:                               ; CODE XREF: quotearg_buffer_restyled+3F4↑j
.text:000000000000450B                 add     r15, 1
.text:000000000000450F                 add     rbp, 1
.text:0000000000004513                 jmp     loc_43A0
.text:0000000000004513 ; ---------------------------------------------------------------------------
.text:0000000000004518                 align 20h
.text:0000000000004520
.text:0000000000004520 loc_4520:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004520                                         ; DATA XREF: .rodata:jpt_42FE↓o
.text:0000000000004520                 cmp     [rsp+0E8h+var_DB], 0 ; jumptable 000000000001234E case 0
.text:0000000000004525                 jnz     loc_46F3
.text:000000000000452B                 xor     edx, edx
.text:000000000000452D                 test    byte ptr [rsp+0E8h+var_70], 1
.text:0000000000004532                 jz      loc_444B
.text:0000000000004538                 add     rbp, 1
.text:000000000000453C                 jmp     loc_41F8
.text:000000000000453C ; ---------------------------------------------------------------------------
.text:0000000000004541                 align 8
.text:0000000000004548
.text:0000000000004548 loc_4548:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004548                                         ; DATA XREF: .rodata:jpt_42FE↓o
.text:0000000000004548                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 37,43-58,65-90,93,95,97-122
.text:000000000000454D                 setz    dl
.text:0000000000004550                 xor     eax, eax
.text:0000000000004552                 jmp     loc_4338
.text:0000000000004552 ; ---------------------------------------------------------------------------
.text:0000000000004557                 align 20h
.text:0000000000004560
.text:0000000000004560 loc_4560:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004560                                         ; DATA XREF: .rodata:jpt_42FE↓o
.text:0000000000004560                 mov     edx, 7          ; jumptable 000000000001234E case 7
.text:0000000000004565                 mov     ebx, 61h ; 'a'
.text:000000000000456A                 jmp     loc_4444
.text:000000000000456A ; ---------------------------------------------------------------------------
.text:000000000000456F                 align 10h
.text:0000000000004570
.text:0000000000004570 loc_4570:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004570                                         ; DATA XREF: .rodata:jpt_42FE↓o
.text:0000000000004570                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 35,126
.text:0000000000004575                 setz    dl
.text:0000000000004578
.text:0000000000004578 loc_4578:                               ; CODE XREF: quotearg_buffer_restyled+216↑j
.text:0000000000004578                                         ; quotearg_buffer_restyled+6A3↓j
.text:0000000000004578                 test    rbp, rbp
.text:000000000000457B                 jnz     loc_432C
.text:0000000000004581
.text:0000000000004581 loc_4581:                               ; CODE XREF: quotearg_buffer_restyled+49B↓j
.text:0000000000004581                                         ; quotearg_buffer_restyled+4AD↓j ...
.text:0000000000004581                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000004586                 and     al, dl
.text:0000000000004588                 jz      loc_4338
.text:000000000000458E
.text:000000000000458E loc_458E:                               ; CODE XREF: quotearg_buffer_restyled+32E↑j
.text:000000000000458E                 mov     rbp, r11
.text:0000000000004591                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000004599                 jmp     loc_4C99
.text:0000000000004599 ; ---------------------------------------------------------------------------
.text:000000000000459E                 align 20h
.text:00000000000045A0
.text:00000000000045A0 loc_45A0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000045A0                                         ; DATA XREF: .rodata:jpt_42FE↓o
.text:00000000000045A0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:00000000000045A5                 setz    dl
.text:00000000000045A8                 xor     r12d, r12d
.text:00000000000045AB                 jmp     short loc_4581
.text:00000000000045AB ; ---------------------------------------------------------------------------
.text:00000000000045AD                 align 10h
.text:00000000000045B0
.text:00000000000045B0 loc_45B0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000045B0                                         ; DATA XREF: .rodata:jpt_42FE↓o
.text:00000000000045B0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 32
.text:00000000000045B5                 mov     ebx, 20h ; ' '
.text:00000000000045BA                 setz    dl
.text:00000000000045BD                 jmp     short loc_4581
.text:00000000000045BD ; ---------------------------------------------------------------------------
.text:00000000000045BF                 align 20h
.text:00000000000045C0
.text:00000000000045C0 loc_45C0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000045C0                                         ; DATA XREF: .rodata:jpt_42FE↓o
.text:00000000000045C0                 mov     edx, 0Dh        ; jumptable 000000000001234E case 13
.text:00000000000045C5                 mov     ebx, 72h ; 'r'
.text:00000000000045CA                 jmp     loc_4432
.text:00000000000045CA ; ---------------------------------------------------------------------------
.text:00000000000045CF                 align 10h
.text:00000000000045D0
.text:00000000000045D0 loc_45D0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000045D0                                         ; DATA XREF: .rodata:jpt_42FE↓o
.text:00000000000045D0                 mov     edx, 0Ch        ; jumptable 000000000001234E case 12
.text:00000000000045D5                 mov     ebx, 66h ; 'f'
.text:00000000000045DA                 jmp     loc_4444
.text:00000000000045DA ; ---------------------------------------------------------------------------
.text:00000000000045DF                 align 20h
.text:00000000000045E0
.text:00000000000045E0 loc_45E0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000045E0                                         ; DATA XREF: .rodata:jpt_42FE↓o
.text:00000000000045E0                 mov     edx, 0Bh        ; jumptable 000000000001234E case 11
.text:00000000000045E5                 mov     ebx, 76h ; 'v'
.text:00000000000045EA                 jmp     loc_4444
.text:00000000000045EA ; ---------------------------------------------------------------------------
.text:00000000000045EF                 align 10h
.text:00000000000045F0
.text:00000000000045F0 loc_45F0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000045F0                                         ; DATA XREF: .rodata:jpt_42FE↓o
.text:00000000000045F0                 mov     edx, 0Ah        ; jumptable 000000000001234E case 10
.text:00000000000045F5                 mov     ebx, 6Eh ; 'n'
.text:00000000000045FA                 jmp     loc_4432
.text:00000000000045FA ; ---------------------------------------------------------------------------
.text:00000000000045FF                 align 20h
.text:0000000000004600
.text:0000000000004600 def_468A:                               ; CODE XREF: quotearg_buffer_restyled+567↓j
.text:0000000000004600                                         ; quotearg_buffer_restyled+57A↓j
.text:0000000000004600                                         ; DATA XREF: ...
.text:0000000000004600                 xor     r10d, r10d      ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000004603                 nop     dword ptr [rax+rax+00h]
.text:0000000000004608
.text:0000000000004608 def_42FE:                               ; CODE XREF: quotearg_buffer_restyled+1D7↑j
.text:0000000000004608                                         ; quotearg_buffer_restyled+1EE↑j
.text:0000000000004608                                         ; DATA XREF: ...
.text:0000000000004608                 cmp     [rsp+0E8h+var_90], 1 ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:000000000000460E                 jnz     loc_49B8
.text:0000000000004614                 mov     [rsp+0E8h+var_B0], r11
.text:0000000000004619                 mov     byte ptr [rsp+0E8h+var_B8], r8b
.text:000000000000461E                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000004623                 call    ___ctype_b_loc
.text:0000000000004628                 mov     rcx, [rax]
.text:000000000000462B                 movzx   edx, bl
.text:000000000000462E                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000004634                 movzx   r8d, byte ptr [rsp+0E8h+var_B8]
.text:000000000000463A                 mov     r11, [rsp+0E8h+var_B0]
.text:000000000000463F                 mov     edi, 1
.text:0000000000004644                 movzx   eax, word ptr [rcx+rdx*2]
.text:0000000000004648                 and     ax, 4000h
.text:000000000000464C                 setnz   r12b
.text:0000000000004650                 setz    al
.text:0000000000004653                 and     al, [rsp+0E8h+var_DB]
.text:0000000000004657
.text:0000000000004657 loc_4657:                               ; CODE XREF: quotearg_buffer_restyled+FED↓j
.text:0000000000004657                 test    al, al
.text:0000000000004659                 jnz     loc_4FF1
.text:000000000000465F                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000004664                 setz    dl
.text:0000000000004667                 jmp     loc_4338
.text:0000000000004667 ; ---------------------------------------------------------------------------
.text:000000000000466C                 align 10h
.text:0000000000004670
.text:0000000000004670 loc_4670:                               ; CODE XREF: quotearg_buffer_restyled+131↑j
.text:0000000000004670                 movzx   ebx, byte ptr [r9]
.text:0000000000004674                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000004677                 ja      short def_468A  ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000004679                 lea     rcx, jpt_468A
.text:0000000000004680                 movzx   edx, bl
.text:0000000000004683                 movsxd  rax, ds:(jpt_468A - 7A08h)[rcx+rdx*4]
.text:0000000000004687                 add     rax, rcx
.text:000000000000468A                 jmp     rax             ; switch jump
.text:000000000000468A ; ---------------------------------------------------------------------------
.text:000000000000468C                 align 10h
.text:0000000000004690
.text:0000000000004690 loc_4690:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004690                                         ; DATA XREF: .rodata:jpt_468A↓o
.text:0000000000004690                 xor     r10d, r10d      ; jumptable 00000000000126DA case 92
.text:0000000000004693                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000004698                 jnz     loc_448E
.text:000000000000469E                 xchg    ax, ax
.text:00000000000046A0
.text:00000000000046A0 loc_46A0:                               ; CODE XREF: quotearg_buffer_restyled+378↑j
.text:00000000000046A0                                         ; quotearg_buffer_restyled+383↑j
.text:00000000000046A0                 mov     edx, 5Ch ; '\'
.text:00000000000046A5                 mov     ebx, 5Ch ; '\'
.text:00000000000046AA                 jmp     loc_4444
.text:00000000000046AA ; ---------------------------------------------------------------------------
.text:00000000000046AF                 align 10h
.text:00000000000046B0
.text:00000000000046B0 loc_46B0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000046B0                                         ; DATA XREF: .rodata:jpt_468A↓o
.text:00000000000046B0                 mov     edx, 0Ch        ; jumptable 00000000000126DA case 12
.text:00000000000046B5                 xor     r10d, r10d
.text:00000000000046B8                 mov     ebx, 66h ; 'f'
.text:00000000000046BD                 jmp     loc_4444
.text:00000000000046BD ; ---------------------------------------------------------------------------
.text:00000000000046C2                 align 8
.text:00000000000046C8
.text:00000000000046C8 loc_46C8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000046C8                                         ; DATA XREF: .rodata:jpt_468A↓o
.text:00000000000046C8                 mov     edx, 0Ah        ; jumptable 00000000000126DA case 10
.text:00000000000046CD                 xor     r10d, r10d
.text:00000000000046D0                 mov     ebx, 6Eh ; 'n'
.text:00000000000046D5                 jmp     loc_4432
.text:00000000000046D5 ; ---------------------------------------------------------------------------
.text:00000000000046DA                 align 20h
.text:00000000000046E0
.text:00000000000046E0 loc_46E0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000046E0                                         ; DATA XREF: .rodata:jpt_468A↓o
.text:00000000000046E0                 mov     ebx, 61h ; 'a'  ; jumptable 00000000000126DA case 7
.text:00000000000046E5                 jmp     loc_44B0
.text:00000000000046E5 ; ---------------------------------------------------------------------------
.text:00000000000046EA                 align 10h
.text:00000000000046F0
.text:00000000000046F0 loc_46F0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000046F0                                         ; DATA XREF: .rodata:jpt_468A↓o
.text:00000000000046F0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 0
.text:00000000000046F3
.text:00000000000046F3 loc_46F3:                               ; CODE XREF: quotearg_buffer_restyled+415↑j
.text:00000000000046F3                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000046F8                 setz    dl
.text:00000000000046FB                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000004700                 jnz     loc_529A
.text:0000000000004706                 mov     eax, r8d
.text:0000000000004709                 mov     rcx, r15
.text:000000000000470C                 xor     eax, 1
.text:000000000000470F                 and     al, dl
.text:0000000000004711                 jz      short loc_4740
.text:0000000000004713                 cmp     r13, r15
.text:0000000000004716                 jbe     short loc_471D
.text:0000000000004718                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000471D
.text:000000000000471D loc_471D:                               ; CODE XREF: quotearg_buffer_restyled+606↑j
.text:000000000000471D                 lea     rcx, [r15+1]
.text:0000000000004721                 cmp     r13, rcx
.text:0000000000004724                 jbe     short loc_472C
.text:0000000000004726                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:000000000000472C
.text:000000000000472C loc_472C:                               ; CODE XREF: quotearg_buffer_restyled+614↑j
.text:000000000000472C                 lea     rcx, [r15+2]
.text:0000000000004730                 cmp     r13, rcx
.text:0000000000004733                 ja      loc_4D69
.text:0000000000004739
.text:0000000000004739 loc_4739:                               ; CODE XREF: quotearg_buffer_restyled+C5F↓j
.text:0000000000004739                 lea     rcx, [r15+3]
.text:000000000000473D                 mov     r8d, eax
.text:0000000000004740
.text:0000000000004740 loc_4740:                               ; CODE XREF: quotearg_buffer_restyled+601↑j
.text:0000000000004740                 cmp     r13, rcx
.text:0000000000004743                 jbe     short loc_474A
.text:0000000000004745                 mov     byte ptr [r14+rcx], 5Ch ; '\'
.text:000000000000474A
.text:000000000000474A loc_474A:                               ; CODE XREF: quotearg_buffer_restyled+633↑j
.text:000000000000474A                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000474F                 lea     r15, [rcx+1]
.text:0000000000004753                 jz      loc_4D59
.text:0000000000004759                 lea     rax, [rbp+1]
.text:000000000000475D                 cmp     rax, r11
.text:0000000000004760                 jnb     short loc_477B
.text:0000000000004762                 mov     rax, [rsp+0E8h+s]
.text:0000000000004767                 movzx   eax, byte ptr [rax+rbp+1]
.text:000000000000476C                 mov     byte ptr [rsp+0E8h+ps], al
.text:0000000000004770                 sub     eax, 30h ; '0'
.text:0000000000004773                 cmp     al, 9
.text:0000000000004775                 jbe     loc_4FA9
.text:000000000000477B
.text:000000000000477B loc_477B:                               ; CODE XREF: quotearg_buffer_restyled+650↑j
.text:000000000000477B                 mov     eax, r12d
.text:000000000000477E                 mov     ebx, 30h ; '0'
.text:0000000000004783                 xor     r12d, r12d
.text:0000000000004786                 jmp     loc_4338
.text:0000000000004786 ; ---------------------------------------------------------------------------
.text:000000000000478B                 align 10h
.text:0000000000004790
.text:0000000000004790 loc_4790:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004790                                         ; DATA XREF: .rodata:jpt_468A↓o
.text:0000000000004790                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 37,43-58,65-90,93,95,97-122
.text:0000000000004795                 mov     r12d, r10d
.text:0000000000004798                 setz    dl
.text:000000000000479B                 xor     r10d, r10d
.text:000000000000479E                 xor     eax, eax
.text:00000000000047A0                 jmp     loc_4338
.text:00000000000047A0 ; ---------------------------------------------------------------------------
.text:00000000000047A5                 align 8
.text:00000000000047A8
.text:00000000000047A8 loc_47A8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000047A8                                         ; DATA XREF: .rodata:jpt_468A↓o
.text:00000000000047A8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 35,126
.text:00000000000047AD                 setz    dl
.text:00000000000047B0                 xor     r10d, r10d
.text:00000000000047B3                 jmp     loc_4578
.text:00000000000047B3 ; ---------------------------------------------------------------------------
.text:00000000000047B8                 align 20h
.text:00000000000047C0
.text:00000000000047C0 loc_47C0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000047C0                                         ; DATA XREF: .rodata:jpt_468A↓o
.text:00000000000047C0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:00000000000047C5                 setz    dl
.text:00000000000047C8                 xor     r10d, r10d
.text:00000000000047CB                 xor     r12d, r12d
.text:00000000000047CE                 jmp     loc_4581
.text:00000000000047CE ; ---------------------------------------------------------------------------
.text:00000000000047D3                 align 8
.text:00000000000047D8
.text:00000000000047D8 loc_47D8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000047D8                                         ; DATA XREF: .rodata:jpt_468A↓o
.text:00000000000047D8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA case 32
.text:00000000000047DD                 mov     r12d, r10d
.text:00000000000047E0                 mov     ebx, 20h ; ' '
.text:00000000000047E5                 setz    dl
.text:00000000000047E8                 xor     r10d, r10d
.text:00000000000047EB                 jmp     loc_4581
.text:00000000000047F0 ; ---------------------------------------------------------------------------
.text:00000000000047F0
.text:00000000000047F0 loc_47F0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000047F0                                         ; DATA XREF: .rodata:jpt_468A↓o
.text:00000000000047F0                 mov     edx, 0Dh        ; jumptable 00000000000126DA case 13
.text:00000000000047F5                 xor     r10d, r10d
.text:00000000000047F8                 mov     ebx, 72h ; 'r'
.text:00000000000047FD                 jmp     loc_4432
.text:00000000000047FD ; ---------------------------------------------------------------------------
.text:0000000000004802                 align 8
.text:0000000000004808
.text:0000000000004808 loc_4808:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004808                                         ; DATA XREF: .rodata:jpt_468A↓o
.text:0000000000004808                 mov     ebx, 76h ; 'v'  ; jumptable 00000000000126DA case 11
.text:000000000000480D                 jmp     loc_44B0
.text:000000000000480D ; ---------------------------------------------------------------------------
.text:0000000000004812                 align 8
.text:0000000000004818
.text:0000000000004818 loc_4818:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004818                                         ; DATA XREF: .rodata:jpt_468A↓o
.text:0000000000004818                 mov     edx, 9          ; jumptable 00000000000126DA case 9
.text:000000000000481D                 xor     r10d, r10d
.text:0000000000004820                 mov     ebx, 74h ; 't'
.text:0000000000004825                 jmp     loc_4432
.text:0000000000004825 ; ---------------------------------------------------------------------------
.text:000000000000482A                 align 10h
.text:0000000000004830
.text:0000000000004830 loc_4830:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004830                                         ; DATA XREF: .rodata:jpt_468A↓o
.text:0000000000004830                 mov     ebx, 62h ; 'b'  ; jumptable 00000000000126DA case 8
.text:0000000000004835                 jmp     loc_44B0
.text:0000000000004835 ; ---------------------------------------------------------------------------
.text:000000000000483A                 align 20h
.text:0000000000004840
.text:0000000000004840 loc_4840:                               ; CODE XREF: quotearg_buffer_restyled+178↑j
.text:0000000000004840                                         ; quotearg_buffer_restyled+1B1↑j
.text:0000000000004840                 xor     r10d, r10d
.text:0000000000004843                 jmp     loc_42E0
.text:0000000000004843 ; ---------------------------------------------------------------------------
.text:0000000000004848                 align 10h
.text:0000000000004850
.text:0000000000004850 loc_4850:                               ; CODE XREF: quotearg_buffer_restyled+36D↑j
.text:0000000000004850                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000004855                 jnz     loc_51C0
.text:000000000000485B
.text:000000000000485B loc_485B:                               ; CODE XREF: quotearg_buffer_restyled+38F↑j
.text:000000000000485B                 add     rbp, 1
.text:000000000000485F                 mov     eax, r8d
.text:0000000000004862                 xor     r12d, r12d
.text:0000000000004865                 mov     ebx, 5Ch ; '\'
.text:000000000000486A                 jmp     loc_437C
.text:000000000000486A ; ---------------------------------------------------------------------------
.text:000000000000486F                 align 10h
.text:0000000000004870
.text:0000000000004870 loc_4870:                               ; CODE XREF: quotearg_buffer_restyled+105↑j
.text:0000000000004870                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000004875                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000487A                 mov     r12d, r8d
.text:000000000000487D                 mov     rbp, r11
.text:0000000000004880                 setz    dl
.text:0000000000004883                 mov     eax, ebx
.text:0000000000004885                 test    r15, r15
.text:0000000000004888                 setz    cl
.text:000000000000488B                 and     eax, edx
.text:000000000000488D                 and     al, cl
.text:000000000000488F                 jnz     loc_52F6
.text:0000000000004895                 mov     eax, ebx
.text:0000000000004897                 xor     eax, 1
.text:000000000000489A                 and     dl, al
.text:000000000000489C                 jz      loc_520C
.text:00000000000048A2                 cmp     [rsp+0E8h+var_6C], 0
.text:00000000000048A7                 jz      loc_520A
.text:00000000000048AD                 cmp     [rsp+0E8h+var_DA], 0
.text:00000000000048B2                 jnz     loc_52AD
.text:00000000000048B8                 test    r13, r13
.text:00000000000048BB                 setz    al
.text:00000000000048BE                 cmp     [rsp+0E8h+var_98], 0
.text:00000000000048C4                 setnz   dl
.text:00000000000048C7                 and     al, dl
.text:00000000000048C9                 jz      loc_52EC
.text:00000000000048CF                 mov     r13, [rsp+0E8h+var_98]
.text:00000000000048D4
.text:00000000000048D4 loc_48D4:                               ; CODE XREF: quotearg_buffer_restyled+121D↓j
.text:00000000000048D4                 lea     rbx, aStrStr+11h ; "'"
.text:00000000000048DB                 mov     byte ptr [r14], 27h ; '''
.text:00000000000048DF                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000048E7                 mov     r15d, 1
.text:00000000000048ED                 mov     [rsp+0E8h+n], 1
.text:00000000000048F6                 mov     [rsp+0E8h+var_D9], 0
.text:00000000000048FB                 mov     [rsp+0E8h+s2], rbx
.text:0000000000004900                 mov     [rsp+0E8h+var_6C], al
.text:0000000000004904                 jmp     loc_41E3
.text:0000000000004904 ; ---------------------------------------------------------------------------
.text:0000000000004909                 align 10h
.text:0000000000004910
.text:0000000000004910 loc_4910:                               ; CODE XREF: quotearg_buffer_restyled+2F8↑j
.text:0000000000004910                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000004915                 jnz     loc_51C0
.text:000000000000491B                 test    r13, r13
.text:000000000000491E                 jz      loc_4D20
.text:0000000000004924                 xor     edx, edx
.text:0000000000004926                 cmp     [rsp+0E8h+var_98], 0
.text:000000000000492C                 jnz     loc_4D20
.text:0000000000004932
.text:0000000000004932 loc_4932:                               ; CODE XREF: quotearg_buffer_restyled+C44↓j
.text:0000000000004932                                         ; quotearg_buffer_restyled+122A↓j
.text:0000000000004932                 mov     [rsp+0E8h+var_98], r13
.text:0000000000004937                 add     r15, 3
.text:000000000000493B                 xor     eax, eax
.text:000000000000493D                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000004942                 xor     r8d, r8d
.text:0000000000004945                 mov     r13, rdx
.text:0000000000004948                 mov     ebx, 27h ; '''
.text:000000000000494D                 jmp     loc_4369
.text:000000000000494D ; ---------------------------------------------------------------------------
.text:0000000000004952                 align 8
.text:0000000000004958
.text:0000000000004958 loc_4958:                               ; CODE XREF: quotearg_buffer_restyled+2D3↑j
.text:0000000000004958                 test    byte ptr [rsp+0E8h+var_70], 4
.text:000000000000495D                 jz      short loc_4980
.text:000000000000495F                 lea     rcx, [rbp+2]
.text:0000000000004963                 cmp     rcx, r11
.text:0000000000004966                 jnb     short loc_4980
.text:0000000000004968                 mov     rax, [rsp+0E8h+s]
.text:000000000000496D                 cmp     byte ptr [rax+rbp+1], 3Fh ; '?'
.text:0000000000004972                 jz      loc_5102
.text:0000000000004978                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000004980
.text:0000000000004980 loc_4980:                               ; CODE XREF: quotearg_buffer_restyled+84D↑j
.text:0000000000004980                                         ; quotearg_buffer_restyled+856↑j ...
.text:0000000000004980                 xor     edx, edx
.text:0000000000004982                 xor     r12d, r12d
.text:0000000000004985                 xor     eax, eax
.text:0000000000004987                 mov     ebx, 3Fh ; '?'
.text:000000000000498C                 jmp     loc_4338
.text:000000000000498C ; ---------------------------------------------------------------------------
.text:0000000000004991                 align 8
.text:0000000000004998
.text:0000000000004998 loc_4998:                               ; CODE XREF: quotearg_buffer_restyled+2CA↑j
.text:0000000000004998                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000499D                 jnz     loc_51C0
.text:00000000000049A3                 xor     r12d, r12d
.text:00000000000049A6                 xor     eax, eax
.text:00000000000049A8                 mov     ebx, 3Fh ; '?'
.text:00000000000049AD                 jmp     loc_4369
.text:00000000000049AD ; ---------------------------------------------------------------------------
.text:00000000000049B2                 align 8
.text:00000000000049B8
.text:00000000000049B8 loc_49B8:                               ; CODE XREF: quotearg_buffer_restyled+4FE↑j
.text:00000000000049B8                 lea     rax, [rsp+0E8h+var_48]
.text:00000000000049C0                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:00000000000049C4                 mov     [rsp+0E8h+var_48], 0
.text:00000000000049D0                 mov     [rsp+0E8h+ps], rax
.text:00000000000049D5                 jnz     short loc_4A04
.text:00000000000049D7                 mov     rdi, [rsp+0E8h+s] ; s
.text:00000000000049DC                 mov     byte ptr [rsp+0E8h+var_A8], r8b
.text:00000000000049E1                 mov     byte ptr [rsp+0E8h+var_B0], r10b
.text:00000000000049E6                 mov     [rsp+0E8h+var_B8], r9
.text:00000000000049EB                 call    _strlen
.text:00000000000049F0                 movzx   r8d, byte ptr [rsp+0E8h+var_A8]
.text:00000000000049F6                 movzx   r10d, byte ptr [rsp+0E8h+var_B0]
.text:00000000000049FC                 mov     r11, rax
.text:00000000000049FF                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000004A04
.text:0000000000004A04 loc_4A04:                               ; CODE XREF: quotearg_buffer_restyled+8C5↑j
.text:0000000000004A04                 lea     rax, [rsp+0E8h+wc]
.text:0000000000004A0C                 xor     ecx, ecx
.text:0000000000004A0E                 mov     [rsp+0E8h+var_6A], bl
.text:0000000000004A12                 mov     [rsp+0E8h+var_6B], r8b
.text:0000000000004A17                 mov     rbx, rcx
.text:0000000000004A1A                 mov     [rsp+0E8h+var_60], r9
.text:0000000000004A22                 mov     [rsp+0E8h+var_B0], rax
.text:0000000000004A27                 mov     [rsp+0E8h+var_69], r10b
.text:0000000000004A2C                 mov     [rsp+0E8h+var_68], r15
.text:0000000000004A34                 mov     [rsp+0E8h+var_A8], r14
.text:0000000000004A39                 mov     [rsp+0E8h+var_78], r13
.text:0000000000004A3E                 mov     [rsp+0E8h+var_B8], r11
.text:0000000000004A43
.text:0000000000004A43 loc_4A43:                               ; CODE XREF: quotearg_buffer_restyled+9AF↓j
.text:0000000000004A43                 mov     rax, [rsp+0E8h+s]
.text:0000000000004A48                 lea     r14, [rbp+rbx+0]
.text:0000000000004A4D                 mov     rdx, [rsp+0E8h+var_B8]
.text:0000000000004A52                 mov     rcx, [rsp+0E8h+ps]
.text:0000000000004A57                 mov     rdi, [rsp+0E8h+var_B0]
.text:0000000000004A5C                 lea     r13, [rax+r14]
.text:0000000000004A60                 sub     rdx, r14
.text:0000000000004A63                 mov     rsi, r13
.text:0000000000004A66                 call    rpl_mbrtowc
.text:0000000000004A6B                 test    rax, rax
.text:0000000000004A6E                 mov     r15, rax
.text:0000000000004A71                 jz      short loc_4AC1
.text:0000000000004A73                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000004A77                 jz      loc_5095
.text:0000000000004A7D                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000004A81                 jz      loc_5021
.text:0000000000004A87                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000004A8C                 setz    al
.text:0000000000004A8F                 and     al, [rsp+0E8h+var_D9]
.text:0000000000004A93                 jnz     loc_4C30
.text:0000000000004A99
.text:0000000000004A99 loc_4A99:                               ; CODE XREF: quotearg_buffer_restyled+B24↓j
.text:0000000000004A99                                         ; quotearg_buffer_restyled+B47↓j
.text:0000000000004A99                 mov     edi, [rsp+0E8h+wc] ; wc
.text:0000000000004AA0                 call    _iswprint
.text:0000000000004AA5                 mov     rdi, [rsp+0E8h+ps] ; ps
.text:0000000000004AAA                 test    eax, eax
.text:0000000000004AAC                 mov     eax, 0
.text:0000000000004AB1                 cmovz   r12d, eax
.text:0000000000004AB5                 add     rbx, r15
.text:0000000000004AB8                 call    _mbsinit
.text:0000000000004ABD                 test    eax, eax
.text:0000000000004ABF                 jz      short loc_4A43
.text:0000000000004AC1
.text:0000000000004AC1 loc_4AC1:                               ; CODE XREF: quotearg_buffer_restyled+961↑j
.text:0000000000004AC1                 mov     edx, r12d
.text:0000000000004AC4                 mov     rdi, rbx
.text:0000000000004AC7                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000004ACD                 xor     edx, 1
.text:0000000000004AD0                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000004AD5                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000004ADB                 and     dl, [rsp+0E8h+var_DB]
.text:0000000000004ADF                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000004AE7                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000004AEC                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000004AF1                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000004AF6
.text:0000000000004AF6 loc_4AF6:                               ; CODE XREF: quotearg_buffer_restyled+F80↓j
.text:0000000000004AF6                                         ; quotearg_buffer_restyled+FB8↓j
.text:0000000000004AF6                 cmp     rdi, 1
.text:0000000000004AFA                 jbe     loc_50FB
.text:0000000000004B00
.text:0000000000004B00 loc_4B00:                               ; CODE XREF: quotearg_buffer_restyled+EE9↓j
.text:0000000000004B00                 mov     rcx, rdi
.text:0000000000004B03                 xor     esi, esi
.text:0000000000004B05                 movzx   r9d, [rsp+0E8h+var_D9]
.text:0000000000004B0B                 add     rcx, rbp
.text:0000000000004B0E                 mov     rdi, [rsp+0E8h+s]
.text:0000000000004B13                 jmp     loc_4BCE
.text:0000000000004B13 ; ---------------------------------------------------------------------------
.text:0000000000004B18                 align 20h
.text:0000000000004B20
.text:0000000000004B20 loc_4B20:                               ; CODE XREF: quotearg_buffer_restyled+AC0↓j
.text:0000000000004B20                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000004B25                 setz    al
.text:0000000000004B28                 test    r9b, r9b
.text:0000000000004B2B                 jnz     loc_4FE0
.text:0000000000004B31                 mov     esi, r8d
.text:0000000000004B34                 xor     esi, 1
.text:0000000000004B37                 and     al, sil
.text:0000000000004B3A                 jz      short loc_4B6B
.text:0000000000004B3C                 cmp     r13, r15
.text:0000000000004B3F                 jbe     short loc_4B46
.text:0000000000004B41                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000004B46
.text:0000000000004B46 loc_4B46:                               ; CODE XREF: quotearg_buffer_restyled+A2F↑j
.text:0000000000004B46                 lea     rsi, [r15+1]
.text:0000000000004B4A                 cmp     r13, rsi
.text:0000000000004B4D                 jbe     short loc_4B55
.text:0000000000004B4F                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000004B55
.text:0000000000004B55 loc_4B55:                               ; CODE XREF: quotearg_buffer_restyled+A3D↑j
.text:0000000000004B55                 lea     rsi, [r15+2]
.text:0000000000004B59                 cmp     r13, rsi
.text:0000000000004B5C                 jbe     short loc_4B64
.text:0000000000004B5E                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000004B64
.text:0000000000004B64 loc_4B64:                               ; CODE XREF: quotearg_buffer_restyled+A4C↑j
.text:0000000000004B64                 add     r15, 3
.text:0000000000004B68                 mov     r8d, eax
.text:0000000000004B6B
.text:0000000000004B6B loc_4B6B:                               ; CODE XREF: quotearg_buffer_restyled+A2A↑j
.text:0000000000004B6B                 cmp     r13, r15
.text:0000000000004B6E                 jbe     short loc_4B75
.text:0000000000004B70                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000004B75
.text:0000000000004B75 loc_4B75:                               ; CODE XREF: quotearg_buffer_restyled+A5E↑j
.text:0000000000004B75                 lea     rax, [r15+1]
.text:0000000000004B79                 cmp     r13, rax
.text:0000000000004B7C                 jbe     short loc_4B8B
.text:0000000000004B7E                 mov     eax, ebx
.text:0000000000004B80                 shr     al, 6
.text:0000000000004B83                 add     eax, 30h ; '0'
.text:0000000000004B86                 mov     [r14+r15+1], al
.text:0000000000004B8B
.text:0000000000004B8B loc_4B8B:                               ; CODE XREF: quotearg_buffer_restyled+A6C↑j
.text:0000000000004B8B                 lea     rax, [r15+2]
.text:0000000000004B8F                 cmp     r13, rax
.text:0000000000004B92                 jbe     short loc_4BA4
.text:0000000000004B94                 mov     eax, ebx
.text:0000000000004B96                 shr     al, 3
.text:0000000000004B99                 and     eax, 7
.text:0000000000004B9C                 add     eax, 30h ; '0'
.text:0000000000004B9F                 mov     [r14+r15+2], al
.text:0000000000004BA4
.text:0000000000004BA4 loc_4BA4:                               ; CODE XREF: quotearg_buffer_restyled+A82↑j
.text:0000000000004BA4                 and     ebx, 7
.text:0000000000004BA7                 add     rbp, 1
.text:0000000000004BAB                 add     r15, 3
.text:0000000000004BAF                 add     ebx, 30h ; '0'
.text:0000000000004BB2                 cmp     rbp, rcx
.text:0000000000004BB5                 jnb     loc_43A0
.text:0000000000004BBB                 mov     esi, edx
.text:0000000000004BBD
.text:0000000000004BBD loc_4BBD:                               ; CODE XREF: quotearg_buffer_restyled+B19↓j
.text:0000000000004BBD                                         ; quotearg_buffer_restyled+EF1↓j
.text:0000000000004BBD                 cmp     r13, r15
.text:0000000000004BC0                 jbe     short loc_4BC6
.text:0000000000004BC2                 mov     [r14+r15], bl
.text:0000000000004BC6
.text:0000000000004BC6 loc_4BC6:                               ; CODE XREF: quotearg_buffer_restyled+AB0↑j
.text:0000000000004BC6                 movzx   ebx, byte ptr [rdi+rbp]
.text:0000000000004BCA                 add     r15, 1
.text:0000000000004BCE
.text:0000000000004BCE loc_4BCE:                               ; CODE XREF: quotearg_buffer_restyled+A03↑j
.text:0000000000004BCE                 test    dl, dl
.text:0000000000004BD0                 jnz     loc_4B20
.text:0000000000004BD6                 mov     eax, esi
.text:0000000000004BD8                 xor     eax, 1
.text:0000000000004BDB                 and     eax, r8d
.text:0000000000004BDE                 test    r10b, r10b
.text:0000000000004BE1                 jz      short loc_4BF1
.text:0000000000004BE3                 cmp     r13, r15
.text:0000000000004BE6                 jbe     short loc_4BED
.text:0000000000004BE8                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000004BED
.text:0000000000004BED loc_4BED:                               ; CODE XREF: quotearg_buffer_restyled+AD6↑j
.text:0000000000004BED                 add     r15, 1
.text:0000000000004BF1
.text:0000000000004BF1 loc_4BF1:                               ; CODE XREF: quotearg_buffer_restyled+AD1↑j
.text:0000000000004BF1                 add     rbp, 1
.text:0000000000004BF5                 cmp     rbp, rcx
.text:0000000000004BF8                 jnb     loc_437C
.text:0000000000004BFE                 test    al, al
.text:0000000000004C00                 jz      loc_4FFE
.text:0000000000004C06                 cmp     r13, r15
.text:0000000000004C09                 jbe     short loc_4C10
.text:0000000000004C0B                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000004C10
.text:0000000000004C10 loc_4C10:                               ; CODE XREF: quotearg_buffer_restyled+AF9↑j
.text:0000000000004C10                 lea     rax, [r15+1]
.text:0000000000004C14                 cmp     r13, rax
.text:0000000000004C17                 jbe     short loc_4C1F
.text:0000000000004C19                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000004C1F
.text:0000000000004C1F loc_4C1F:                               ; CODE XREF: quotearg_buffer_restyled+B07↑j
.text:0000000000004C1F                 add     r15, 2
.text:0000000000004C23                 xor     r10d, r10d
.text:0000000000004C26                 xor     r8d, r8d
.text:0000000000004C29                 jmp     short loc_4BBD
.text:0000000000004C29 ; ---------------------------------------------------------------------------
.text:0000000000004C2B                 align 10h
.text:0000000000004C30
.text:0000000000004C30 loc_4C30:                               ; CODE XREF: quotearg_buffer_restyled+983↑j
.text:0000000000004C30                 cmp     r15, 1
.text:0000000000004C34                 jz      loc_4A99
.text:0000000000004C3A                 mov     rdi, [rsp+0E8h+s]
.text:0000000000004C3F                 lea     rcx, [rdi+r15]
.text:0000000000004C43                 lea     rdx, [rdi+r14+1]
.text:0000000000004C48                 lea     r8, [rcx+r14]
.text:0000000000004C4C                 jmp     short loc_4C5D
.text:0000000000004C4C ; ---------------------------------------------------------------------------
.text:0000000000004C4E                 align 10h
.text:0000000000004C50
.text:0000000000004C50 loc_4C50:                               ; CODE XREF: quotearg_buffer_restyled+B56↓j
.text:0000000000004C50                                         ; quotearg_buffer_restyled+B70↓j
.text:0000000000004C50                 add     rdx, 1
.text:0000000000004C54                 cmp     r8, rdx
.text:0000000000004C57                 jz      loc_4A99
.text:0000000000004C5D
.text:0000000000004C5D loc_4C5D:                               ; CODE XREF: quotearg_buffer_restyled+B3C↑j
.text:0000000000004C5D                 movzx   ecx, byte ptr [rdx]
.text:0000000000004C60                 sub     ecx, 5Bh ; '['
.text:0000000000004C63                 cmp     cl, 21h ; '!'
.text:0000000000004C66                 ja      short loc_4C50
.text:0000000000004C68                 mov     esi, 1
.text:0000000000004C6D                 shl     rsi, cl
.text:0000000000004C70                 mov     rcx, rsi
.text:0000000000004C73                 mov     rsi, 20000002Bh
.text:0000000000004C7D                 test    rcx, rsi
.text:0000000000004C80                 jz      short loc_4C50
.text:0000000000004C82                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000004C87                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000004C8C                 mov     rbp, [rsp+0E8h+var_B8]
.text:0000000000004C91                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000004C99
.text:0000000000004C99 loc_4C99:                               ; CODE XREF: quotearg_buffer_restyled+489↑j
.text:0000000000004C99                                         ; quotearg_buffer_restyled+C0B↓j ...
.text:0000000000004C99                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000004C9E                 jz      short loc_4CB0
.text:0000000000004CA0                 test    al, al
.text:0000000000004CA2                 mov     eax, 4
.text:0000000000004CA7                 cmovz   eax, [rsp+0E8h+var_E0]
.text:0000000000004CAC                 mov     [rsp+0E8h+var_E0], eax
.text:0000000000004CB0
.text:0000000000004CB0 loc_4CB0:                               ; CODE XREF: quotearg_buffer_restyled+B8E↑j
.text:0000000000004CB0                                         ; quotearg_buffer_restyled+1205↓j
.text:0000000000004CB0                 sub     rsp, 8
.text:0000000000004CB4                 mov     rcx, rbp
.text:0000000000004CB7                 mov     rsi, r13
.text:0000000000004CBA                 push    [rsp+0F0h+var_88]
.text:0000000000004CBE                 push    [rsp+0F8h+var_80]
.text:0000000000004CC2                 mov     rdi, r14
.text:0000000000004CC5                 push    0
.text:0000000000004CC7                 mov     r9d, [rsp+108h+var_70]
.text:0000000000004CCF                 mov     r8d, [rsp+108h+var_E0]
.text:0000000000004CD4                 mov     rdx, [rsp+108h+s]
.text:0000000000004CD9                 and     r9d, 0FFFFFFFDh
.text:0000000000004CDD                 call    quotearg_buffer_restyled
.text:0000000000004CE2                 add     rsp, 20h
.text:0000000000004CE6                 mov     r15, rax
.text:0000000000004CE9
.text:0000000000004CE9 loc_4CE9:                               ; CODE XREF: quotearg_buffer_restyled+1135↓j
.text:0000000000004CE9                                         ; quotearg_buffer_restyled+1140↓j ...
.text:0000000000004CE9                 mov     rbx, [rsp+0E8h+var_40]
.text:0000000000004CF1                 xor     rbx, fs:28h
.text:0000000000004CFA                 mov     rax, r15
.text:0000000000004CFD                 jnz     loc_5303
.text:0000000000004D03                 add     rsp, 0B8h
.text:0000000000004D0A                 pop     rbx
.text:0000000000004D0B                 pop     rbp
.text:0000000000004D0C                 pop     r12
.text:0000000000004D0E                 pop     r13
.text:0000000000004D10                 pop     r14
.text:0000000000004D12                 pop     r15
.text:0000000000004D14                 retn
.text:0000000000004D14 ; ---------------------------------------------------------------------------
.text:0000000000004D15                 align 8
.text:0000000000004D18
.text:0000000000004D18 loc_4D18:                               ; CODE XREF: quotearg_buffer_restyled+3B2↑j
.text:0000000000004D18                 mov     rbp, r11
.text:0000000000004D1B                 jmp     loc_4C99
.text:0000000000004D20 ; ---------------------------------------------------------------------------
.text:0000000000004D20
.text:0000000000004D20 loc_4D20:                               ; CODE XREF: quotearg_buffer_restyled+80E↑j
.text:0000000000004D20                                         ; quotearg_buffer_restyled+81C↑j
.text:0000000000004D20                 cmp     r13, r15
.text:0000000000004D23                 jbe     short loc_4D2A
.text:0000000000004D25                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000004D2A
.text:0000000000004D2A loc_4D2A:                               ; CODE XREF: quotearg_buffer_restyled+C13↑j
.text:0000000000004D2A                 lea     rax, [r15+1]
.text:0000000000004D2E                 cmp     r13, rax
.text:0000000000004D31                 jbe     short loc_4D39
.text:0000000000004D33                 mov     byte ptr [r14+r15+1], 5Ch ; '\'
.text:0000000000004D39
.text:0000000000004D39 loc_4D39:                               ; CODE XREF: quotearg_buffer_restyled+C21↑j
.text:0000000000004D39                 lea     rax, [r15+2]
.text:0000000000004D3D                 cmp     r13, rax
.text:0000000000004D40                 jbe     loc_5332
.text:0000000000004D46                 mov     rdx, r13
.text:0000000000004D49                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000004D4F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000004D54                 jmp     loc_4932
.text:0000000000004D59 ; ---------------------------------------------------------------------------
.text:0000000000004D59
.text:0000000000004D59 loc_4D59:                               ; CODE XREF: quotearg_buffer_restyled+643↑j
.text:0000000000004D59                 mov     eax, r12d
.text:0000000000004D5C                 mov     ebx, 30h ; '0'
.text:0000000000004D61                 xor     r12d, r12d
.text:0000000000004D64                 jmp     loc_4369
.text:0000000000004D69 ; ---------------------------------------------------------------------------
.text:0000000000004D69
.text:0000000000004D69 loc_4D69:                               ; CODE XREF: quotearg_buffer_restyled+623↑j
.text:0000000000004D69                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000004D6F                 jmp     loc_4739
.text:0000000000004D74 ; ---------------------------------------------------------------------------
.text:0000000000004D74
.text:0000000000004D74 loc_4D74:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004D74                                         ; DATA XREF: .rodata:jpt_41A1↓o
.text:0000000000004D74                 test    ebx, ebx        ; jumptable 00000000000121F1 case 4
.text:0000000000004D76                 jnz     loc_41A3        ; jumptable 00000000000121F1 case 1
.text:0000000000004D7C                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000004D81
.text:0000000000004D81 loc_4D81:                               ; CODE XREF: quotearg_buffer_restyled+11FD↓j
.text:0000000000004D81                 test    r13, r13
.text:0000000000004D84                 jnz     loc_531A
.text:0000000000004D8A                 lea     rax, aStrStr+11h ; "'"
.text:0000000000004D91                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004D9A                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000004D9F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004DA4                 xor     r12d, r12d
.text:0000000000004DA7                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000004DAC                 mov     [rsp+0E8h+n], 1
.text:0000000000004DB5                 mov     [rsp+0E8h+s2], rax
.text:0000000000004DBA                 mov     r15d, 1
.text:0000000000004DC0                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000004DC8                 jmp     loc_41E3
.text:0000000000004DC8 ; ---------------------------------------------------------------------------
.text:0000000000004DCD                 align 10h
.text:0000000000004DD0
.text:0000000000004DD0 loc_4DD0:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004DD0                                         ; DATA XREF: .rodata:jpt_41A1↓o
.text:0000000000004DD0                 test    ebx, ebx        ; jumptable 00000000000121F1 case 5
.text:0000000000004DD2                 jnz     loc_51CD
.text:0000000000004DD8                 test    r13, r13
.text:0000000000004DDB                 jz      loc_5006
.text:0000000000004DE1                 mov     byte ptr [r14], 22h ; '"'
.text:0000000000004DE5                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000004DEA                 xor     r12d, r12d
.text:0000000000004DED                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004DF2                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004DFB
.text:0000000000004DFB loc_4DFB:                               ; CODE XREF: quotearg_buffer_restyled+F0C↓j
.text:0000000000004DFB                 lea     rax, unk_778B
.text:0000000000004E02                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000004E07                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000004E0C                 mov     [rsp+0E8h+n], 1
.text:0000000000004E15                 mov     r15d, 1
.text:0000000000004E1B                 mov     [rsp+0E8h+s2], rax
.text:0000000000004E20                 jmp     loc_41E3
.text:0000000000004E25 ; ---------------------------------------------------------------------------
.text:0000000000004E25
.text:0000000000004E25 loc_4E25:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004E25                                         ; DATA XREF: .rodata:jpt_41A1↓o
.text:0000000000004E25                 lea     rax, unk_778B   ; jumptable 00000000000121F1 case 6
.text:0000000000004E2C                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000004E31                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004E36                 xor     r12d, r12d
.text:0000000000004E39                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004E42                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000004E47                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000004E4C                 mov     [rsp+0E8h+n], 1
.text:0000000000004E55                 xor     r15d, r15d
.text:0000000000004E58                 mov     [rsp+0E8h+s2], rax
.text:0000000000004E5D                 mov     [rsp+0E8h+var_E0], 5
.text:0000000000004E65                 jmp     loc_41E3
.text:0000000000004E6A ; ---------------------------------------------------------------------------
.text:0000000000004E6A
.text:0000000000004E6A loc_4E6A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004E6A                                         ; DATA XREF: .rodata:jpt_41A1↓o
.text:0000000000004E6A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 7
.text:0000000000004E6F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004E74                 xor     r12d, r12d
.text:0000000000004E77                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004E80                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000004E85                 xor     r15d, r15d
.text:0000000000004E88                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000004E8D                 mov     [rsp+0E8h+n], 0
.text:0000000000004E96                 mov     [rsp+0E8h+s2], 0
.text:0000000000004E9F                 jmp     loc_41E3
.text:0000000000004EA4 ; ---------------------------------------------------------------------------
.text:0000000000004EA4
.text:0000000000004EA4 loc_4EA4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004EA4                                         ; DATA XREF: .rodata:jpt_41A1↓o
.text:0000000000004EA4                 cmp     [rsp+0E8h+var_E0], 0Ah ; jumptable 00000000000121F1 cases 8-10
.text:0000000000004EA9                 jz      short loc_4F01
.text:0000000000004EAB                 lea     rsi, asc_778D   ; "`"
.text:0000000000004EB2                 xor     edi, edi        ; domainname
.text:0000000000004EB4                 mov     edx, 5          ; category
.text:0000000000004EB9                 call    _dcgettext
.text:0000000000004EBE                 mov     rcx, rax
.text:0000000000004EC1                 mov     [rsp+0E8h+var_80], rax
.text:0000000000004EC6                 lea     rax, asc_778D   ; "`"
.text:0000000000004ECD                 cmp     rcx, rax
.text:0000000000004ED0                 jz      loc_526E
.text:0000000000004ED6
.text:0000000000004ED6 loc_4ED6:                               ; CODE XREF: quotearg_buffer_restyled+116F↓j
.text:0000000000004ED6                 lea     rsi, aStrStr+11h ; msgid
.text:0000000000004EDD                 xor     edi, edi        ; domainname
.text:0000000000004EDF                 mov     edx, 5          ; category
.text:0000000000004EE4                 call    _dcgettext
.text:0000000000004EE9                 mov     rcx, rax
.text:0000000000004EEC                 mov     [rsp+0E8h+var_88], rax
.text:0000000000004EF1                 lea     rax, aStrStr+11h ; "'"
.text:0000000000004EF8                 cmp     rcx, rax
.text:0000000000004EFB                 jz      loc_5284
.text:0000000000004F01
.text:0000000000004F01 loc_4F01:                               ; CODE XREF: quotearg_buffer_restyled+D99↑j
.text:0000000000004F01                                         ; quotearg_buffer_restyled+1185↓j
.text:0000000000004F01                 xor     r15d, r15d
.text:0000000000004F04                 test    ebx, ebx
.text:0000000000004F06                 jz      loc_50CD
.text:0000000000004F0C
.text:0000000000004F0C loc_4F0C:                               ; CODE XREF: quotearg_buffer_restyled+FC7↓j
.text:0000000000004F0C                                         ; quotearg_buffer_restyled+FE6↓j
.text:0000000000004F0C                 test    ebx, ebx
.text:0000000000004F0E                 mov     rbx, [rsp+0E8h+var_88]
.text:0000000000004F13                 setnz   [rsp+0E8h+var_D9]
.text:0000000000004F18                 xor     r12d, r12d
.text:0000000000004F1B                 mov     rdi, rbx        ; s
.text:0000000000004F1E                 call    _strlen
.text:0000000000004F23                 mov     [rsp+0E8h+s2], rbx
.text:0000000000004F28                 mov     [rsp+0E8h+n], rax
.text:0000000000004F2D                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000004F32                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004F37                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004F40                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000004F45                 jmp     loc_41E3
.text:0000000000004F4A ; ---------------------------------------------------------------------------
.text:0000000000004F4A
.text:0000000000004F4A loc_4F4A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004F4A                                         ; DATA XREF: .rodata:jpt_41A1↓o
.text:0000000000004F4A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 0
.text:0000000000004F4F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004F54                 xor     r12d, r12d
.text:0000000000004F57                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004F60                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000004F65                 xor     r15d, r15d
.text:0000000000004F68                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000004F6D                 mov     [rsp+0E8h+n], 0
.text:0000000000004F76                 mov     [rsp+0E8h+s2], 0
.text:0000000000004F7F                 jmp     loc_41E3
.text:0000000000004F84 ; ---------------------------------------------------------------------------
.text:0000000000004F84
.text:0000000000004F84 loc_4F84:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004F84                                         ; DATA XREF: .rodata:jpt_41A1↓o
.text:0000000000004F84                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 3
.text:0000000000004F89                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004F8E                 xor     r12d, r12d
.text:0000000000004F91                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004F9A                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000004F9F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000004FA4                 jmp     loc_41C3
.text:0000000000004FA9 ; ---------------------------------------------------------------------------
.text:0000000000004FA9
.text:0000000000004FA9 loc_4FA9:                               ; CODE XREF: quotearg_buffer_restyled+665↑j
.text:0000000000004FA9                 cmp     r13, r15
.text:0000000000004FAC                 jbe     short loc_4FB3
.text:0000000000004FAE                 mov     byte ptr [r14+r15], 30h ; '0'
.text:0000000000004FB3
.text:0000000000004FB3 loc_4FB3:                               ; CODE XREF: quotearg_buffer_restyled+E9C↑j
.text:0000000000004FB3                 lea     rax, [rcx+2]
.text:0000000000004FB7                 cmp     r13, rax
.text:0000000000004FBA                 jbe     short loc_4FC2
.text:0000000000004FBC                 mov     byte ptr [r14+rcx+2], 30h ; '0'
.text:0000000000004FC2
.text:0000000000004FC2 loc_4FC2:                               ; CODE XREF: quotearg_buffer_restyled+EAA↑j
.text:0000000000004FC2                 mov     eax, r12d
.text:0000000000004FC5                 lea     r15, [rcx+3]
.text:0000000000004FC9                 xor     r12d, r12d
.text:0000000000004FCC                 mov     ebx, 30h ; '0'
.text:0000000000004FD1                 jmp     loc_4338
.text:0000000000004FD1 ; ---------------------------------------------------------------------------
.text:0000000000004FD6                 align 20h
.text:0000000000004FE0
.text:0000000000004FE0 loc_4FE0:                               ; CODE XREF: quotearg_buffer_restyled+A1B↑j
.text:0000000000004FE0                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000004FE5                 mov     rbp, r11
.text:0000000000004FE8                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000004FEC                 jmp     loc_4C99
.text:0000000000004FF1 ; ---------------------------------------------------------------------------
.text:0000000000004FF1
.text:0000000000004FF1 loc_4FF1:                               ; CODE XREF: quotearg_buffer_restyled+549↑j
.text:0000000000004FF1                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000004FF6                 xor     r12d, r12d
.text:0000000000004FF9                 jmp     loc_4B00
.text:0000000000004FFE ; ---------------------------------------------------------------------------
.text:0000000000004FFE
.text:0000000000004FFE loc_4FFE:                               ; CODE XREF: quotearg_buffer_restyled+AF0↑j
.text:0000000000004FFE                 xor     r10d, r10d
.text:0000000000005001                 jmp     loc_4BBD
.text:0000000000005006 ; ---------------------------------------------------------------------------
.text:0000000000005006
.text:0000000000005006 loc_5006:                               ; CODE XREF: quotearg_buffer_restyled+CCB↑j
.text:0000000000005006                 mov     [rsp+0E8h+var_98], 0
.text:000000000000500F                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000005014                 xor     r12d, r12d
.text:0000000000005017                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000501C                 jmp     loc_4DFB
.text:0000000000005021 ; ---------------------------------------------------------------------------
.text:0000000000005021
.text:0000000000005021 loc_5021:                               ; CODE XREF: quotearg_buffer_restyled+971↑j
.text:0000000000005021                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000005026                 mov     rsi, r14
.text:0000000000005029                 mov     rcx, r13
.text:000000000000502C                 mov     rax, rbx
.text:000000000000502F                 mov     rdi, rbx
.text:0000000000005032                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000005038                 movzx   ebx, [rsp+0E8h+var_6A]
.text:000000000000503D                 mov     r9, [rsp+0E8h+var_60]
.text:0000000000005045                 cmp     rsi, r11
.text:0000000000005048                 movzx   r10d, [rsp+0E8h+var_69]
.text:000000000000504E                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000005056                 mov     r14, [rsp+0E8h+var_A8]
.text:000000000000505B                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000005060                 jnb     short loc_5088
.text:0000000000005062                 cmp     byte ptr [rcx], 0
.text:0000000000005065                 jnz     short loc_5077
.text:0000000000005067                 jmp     short loc_5088
.text:0000000000005067 ; ---------------------------------------------------------------------------
.text:0000000000005069                 align 10h
.text:0000000000005070
.text:0000000000005070 loc_5070:                               ; CODE XREF: quotearg_buffer_restyled+F73↓j
.text:0000000000005070                 cmp     byte ptr [r9+rax], 0
.text:0000000000005075                 jz      short loc_5085
.text:0000000000005077
.text:0000000000005077 loc_5077:                               ; CODE XREF: quotearg_buffer_restyled+F55↑j
.text:0000000000005077                 add     rax, 1
.text:000000000000507B                 lea     rdx, [rbp+rax+0]
.text:0000000000005080                 cmp     r11, rdx
.text:0000000000005083                 ja      short loc_5070
.text:0000000000005085
.text:0000000000005085 loc_5085:                               ; CODE XREF: quotearg_buffer_restyled+F65↑j
.text:0000000000005085                 mov     rdi, rax
.text:0000000000005088
.text:0000000000005088 loc_5088:                               ; CODE XREF: quotearg_buffer_restyled+F50↑j
.text:0000000000005088                                         ; quotearg_buffer_restyled+F57↑j
.text:0000000000005088                 movzx   edx, [rsp+0E8h+var_DB]
.text:000000000000508D                 xor     r12d, r12d
.text:0000000000005090                 jmp     loc_4AF6
.text:0000000000005095 ; ---------------------------------------------------------------------------
.text:0000000000005095
.text:0000000000005095 loc_5095:                               ; CODE XREF: quotearg_buffer_restyled+967↑j
.text:0000000000005095                 mov     rdi, rbx
.text:0000000000005098                 movzx   r8d, [rsp+0E8h+var_6B]
.text:000000000000509E                 movzx   ebx, [rsp+0E8h+var_6A]
.text:00000000000050A3                 movzx   r10d, [rsp+0E8h+var_69]
.text:00000000000050A9                 mov     r15, [rsp+0E8h+var_68]
.text:00000000000050B1                 xor     r12d, r12d
.text:00000000000050B4                 mov     r14, [rsp+0E8h+var_A8]
.text:00000000000050B9                 mov     r13, [rsp+0E8h+var_78]
.text:00000000000050BE                 mov     r11, [rsp+0E8h+var_B8]
.text:00000000000050C3                 movzx   edx, [rsp+0E8h+var_DB]
.text:00000000000050C8                 jmp     loc_4AF6
.text:00000000000050CD ; ---------------------------------------------------------------------------
.text:00000000000050CD
.text:00000000000050CD loc_50CD:                               ; CODE XREF: quotearg_buffer_restyled+DF6↑j
.text:00000000000050CD                 mov     rdx, [rsp+0E8h+var_80]
.text:00000000000050D2                 movzx   eax, byte ptr [rdx]
.text:00000000000050D5                 test    al, al
.text:00000000000050D7                 jz      loc_4F0C
.text:00000000000050DD                 nop     dword ptr [rax]
.text:00000000000050E0
.text:00000000000050E0 loc_50E0:                               ; CODE XREF: quotearg_buffer_restyled+FE4↓j
.text:00000000000050E0                 cmp     r13, r15
.text:00000000000050E3                 jbe     short loc_50E9
.text:00000000000050E5                 mov     [r14+r15], al
.text:00000000000050E9
.text:00000000000050E9 loc_50E9:                               ; CODE XREF: quotearg_buffer_restyled+FD3↑j
.text:00000000000050E9                 add     r15, 1
.text:00000000000050ED                 movzx   eax, byte ptr [rdx+r15]
.text:00000000000050F2                 test    al, al
.text:00000000000050F4                 jnz     short loc_50E0
.text:00000000000050F6                 jmp     loc_4F0C
.text:00000000000050FB ; ---------------------------------------------------------------------------
.text:00000000000050FB
.text:00000000000050FB loc_50FB:                               ; CODE XREF: quotearg_buffer_restyled+9EA↑j
.text:00000000000050FB                 mov     eax, edx
.text:00000000000050FD                 jmp     loc_4657
.text:0000000000005102 ; ---------------------------------------------------------------------------
.text:0000000000005102
.text:0000000000005102 loc_5102:                               ; CODE XREF: quotearg_buffer_restyled+862↑j
.text:0000000000005102                 movzx   ebx, byte ptr [rax+rcx]
.text:0000000000005106                 cmp     bl, 3Eh ; '>'
.text:0000000000005109                 ja      loc_4980
.text:000000000000510F                 mov     rax, 7000A38200000000h
.text:0000000000005119                 bt      rax, rbx
.text:000000000000511D                 jnb     loc_4980
.text:0000000000005123                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000005128                 jnz     loc_5312
.text:000000000000512E                 cmp     r13, r15
.text:0000000000005131                 jbe     short loc_5138
.text:0000000000005133                 mov     byte ptr [r14+r15], 3Fh ; '?'
.text:0000000000005138
.text:0000000000005138 loc_5138:                               ; CODE XREF: quotearg_buffer_restyled+1021↑j
.text:0000000000005138                 lea     rax, [r15+1]
.text:000000000000513C                 cmp     r13, rax
.text:000000000000513F                 jbe     short loc_5147
.text:0000000000005141                 mov     byte ptr [r14+r15+1], 22h ; '"'
.text:0000000000005147
.text:0000000000005147 loc_5147:                               ; CODE XREF: quotearg_buffer_restyled+102F↑j
.text:0000000000005147                 lea     rax, [r15+2]
.text:000000000000514B                 cmp     r13, rax
.text:000000000000514E                 jbe     short loc_5156
.text:0000000000005150                 mov     byte ptr [r14+r15+2], 22h ; '"'
.text:0000000000005156
.text:0000000000005156 loc_5156:                               ; CODE XREF: quotearg_buffer_restyled+103E↑j
.text:0000000000005156                 lea     rax, [r15+3]
.text:000000000000515A                 cmp     r13, rax
.text:000000000000515D                 jbe     short loc_5165
.text:000000000000515F                 mov     byte ptr [r14+r15+3], 3Fh ; '?'
.text:0000000000005165
.text:0000000000005165 loc_5165:                               ; CODE XREF: quotearg_buffer_restyled+104D↑j
.text:0000000000005165                 add     r15, 4
.text:0000000000005169                 xor     edx, edx
.text:000000000000516B                 xor     r12d, r12d
.text:000000000000516E                 xor     eax, eax
.text:0000000000005170                 mov     rbp, rcx
.text:0000000000005173                 jmp     loc_4338
.text:0000000000005178 ; ---------------------------------------------------------------------------
.text:0000000000005178
.text:0000000000005178 loc_5178:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000005178                                         ; DATA XREF: .rodata:jpt_41A1↓o
.text:0000000000005178                 test    ebx, ebx        ; jumptable 00000000000121F1 case 2
.text:000000000000517A                 jz      loc_5308
.text:0000000000005180                 lea     rax, aStrStr+11h ; "'"
.text:0000000000005187                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000518C                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000005191                 xor     r12d, r12d
.text:0000000000005194                 mov     [rsp+0E8h+var_98], 0
.text:000000000000519D                 mov     [rsp+0E8h+var_D9], 1
.text:00000000000051A2                 mov     [rsp+0E8h+var_DB], 0
.text:00000000000051A7                 mov     [rsp+0E8h+n], 1
.text:00000000000051B0                 xor     r15d, r15d
.text:00000000000051B3                 mov     [rsp+0E8h+s2], rax
.text:00000000000051B8                 jmp     loc_41E3
.text:00000000000051B8 ; ---------------------------------------------------------------------------
.text:00000000000051BD                 align 20h
.text:00000000000051C0
.text:00000000000051C0 loc_51C0:                               ; CODE XREF: quotearg_buffer_restyled+745↑j
.text:00000000000051C0                                         ; quotearg_buffer_restyled+805↑j ...
.text:00000000000051C0                 mov     rbp, r11
.text:00000000000051C3                 movzx   eax, [rsp+0E8h+var_D9]
.text:00000000000051C8                 jmp     loc_4C99
.text:00000000000051CD ; ---------------------------------------------------------------------------
.text:00000000000051CD
.text:00000000000051CD loc_51CD:                               ; CODE XREF: quotearg_buffer_restyled+CC2↑j
.text:00000000000051CD                 lea     rax, unk_778B
.text:00000000000051D4                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000051D9                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000051DE                 xor     r12d, r12d
.text:00000000000051E1                 mov     [rsp+0E8h+var_98], 0
.text:00000000000051EA                 mov     [rsp+0E8h+var_D9], 1
.text:00000000000051EF                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000051F4                 mov     [rsp+0E8h+n], 1
.text:00000000000051FD                 xor     r15d, r15d
.text:0000000000005200                 mov     [rsp+0E8h+s2], rax
.text:0000000000005205                 jmp     loc_41E3
.text:000000000000520A ; ---------------------------------------------------------------------------
.text:000000000000520A
.text:000000000000520A loc_520A:                               ; CODE XREF: quotearg_buffer_restyled+797↑j
.text:000000000000520A                 mov     eax, edx
.text:000000000000520C
.text:000000000000520C loc_520C:                               ; CODE XREF: quotearg_buffer_restyled+78C↑j
.text:000000000000520C                                         ; quotearg_buffer_restyled+11E1↓j
.text:000000000000520C                 mov     rbx, [rsp+0E8h+s2]
.text:0000000000005211                 test    rbx, rbx
.text:0000000000005214                 jz      short loc_5242
.text:0000000000005216                 test    al, al
.text:0000000000005218                 jz      short loc_5242
.text:000000000000521A                 movzx   ecx, byte ptr [rbx]
.text:000000000000521D                 mov     rax, rbx
.text:0000000000005220                 test    cl, cl
.text:0000000000005222                 jz      short loc_5242
.text:0000000000005224                 mov     rdx, r15
.text:0000000000005227                 sub     rax, r15
.text:000000000000522A
.text:000000000000522A loc_522A:                               ; CODE XREF: quotearg_buffer_restyled+112D↓j
.text:000000000000522A                 cmp     r13, rdx
.text:000000000000522D                 jbe     short loc_5233
.text:000000000000522F                 mov     [r14+rdx], cl
.text:0000000000005233
.text:0000000000005233 loc_5233:                               ; CODE XREF: quotearg_buffer_restyled+111D↑j
.text:0000000000005233                 add     rdx, 1
.text:0000000000005237                 movzx   ecx, byte ptr [rax+rdx]
.text:000000000000523B                 test    cl, cl
.text:000000000000523D                 jnz     short loc_522A
.text:000000000000523F                 mov     r15, rdx
.text:0000000000005242
.text:0000000000005242 loc_5242:                               ; CODE XREF: quotearg_buffer_restyled+1104↑j
.text:0000000000005242                                         ; quotearg_buffer_restyled+1108↑j ...
.text:0000000000005242                 cmp     r13, r15
.text:0000000000005245                 jbe     loc_4CE9
.text:000000000000524B                 mov     byte ptr [r14+r15], 0
.text:0000000000005250                 jmp     loc_4CE9
.text:0000000000005255 ; ---------------------------------------------------------------------------
.text:0000000000005255
.text:0000000000005255 loc_5255:                               ; CODE XREF: quotearg_buffer_restyled+1C2↑j
.text:0000000000005255                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000525A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000525F                 mov     rbp, r11
.text:0000000000005262                 setz    al
.text:0000000000005265                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000005269                 jmp     loc_4C99
.text:000000000000526E ; ---------------------------------------------------------------------------
.text:000000000000526E
.text:000000000000526E loc_526E:                               ; CODE XREF: quotearg_buffer_restyled+DC0↑j
.text:000000000000526E                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000005272                 mov     rdi, rcx
.text:0000000000005275                 call    gettext_quote
.text:000000000000527A                 mov     [rsp+0E8h+var_80], rax
.text:000000000000527F                 jmp     loc_4ED6
.text:0000000000005284 ; ---------------------------------------------------------------------------
.text:0000000000005284
.text:0000000000005284 loc_5284:                               ; CODE XREF: quotearg_buffer_restyled+DEB↑j
.text:0000000000005284                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000005288                 mov     rdi, rcx
.text:000000000000528B                 call    gettext_quote
.text:0000000000005290                 mov     [rsp+0E8h+var_88], rax
.text:0000000000005295                 jmp     loc_4F01
.text:000000000000529A ; ---------------------------------------------------------------------------
.text:000000000000529A
.text:000000000000529A loc_529A:                               ; CODE XREF: quotearg_buffer_restyled+5F0↑j
.text:000000000000529A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000529F                 mov     rbp, r11
.text:00000000000052A2                 mov     eax, edx
.text:00000000000052A4                 mov     [rsp+0E8h+var_DB], bl
.text:00000000000052A8                 jmp     loc_4C99
.text:00000000000052AD ; ---------------------------------------------------------------------------
.text:00000000000052AD
.text:00000000000052AD loc_52AD:                               ; CODE XREF: quotearg_buffer_restyled+7A2↑j
.text:00000000000052AD                 sub     rsp, 8
.text:00000000000052B1                 mov     r8d, 5
.text:00000000000052B7                 mov     rcx, r11
.text:00000000000052BA                 push    [rsp+0F0h+var_88]
.text:00000000000052BE                 push    [rsp+0F8h+var_80]
.text:00000000000052C2                 mov     rdi, r14
.text:00000000000052C5                 push    [rsp+100h+var_C8]
.text:00000000000052C9                 mov     r9d, [rsp+108h+var_70]
.text:00000000000052D1                 mov     rdx, [rsp+108h+s]
.text:00000000000052D6                 mov     rsi, [rsp+108h+var_98]
.text:00000000000052DB                 call    quotearg_buffer_restyled
.text:00000000000052E0                 add     rsp, 20h
.text:00000000000052E4                 mov     r15, rax
.text:00000000000052E7                 jmp     loc_4CE9
.text:00000000000052EC ; ---------------------------------------------------------------------------
.text:00000000000052EC
.text:00000000000052EC loc_52EC:                               ; CODE XREF: quotearg_buffer_restyled+7B9↑j
.text:00000000000052EC                 movzx   eax, [rsp+0E8h+var_6C]
.text:00000000000052F1                 jmp     loc_520C
.text:00000000000052F6 ; ---------------------------------------------------------------------------
.text:00000000000052F6
.text:00000000000052F6 loc_52F6:                               ; CODE XREF: quotearg_buffer_restyled+77F↑j
.text:00000000000052F6                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000052FE                 jmp     loc_4C99
.text:0000000000005303 ; ---------------------------------------------------------------------------
.text:0000000000005303
.text:0000000000005303 loc_5303:                               ; CODE XREF: quotearg_buffer_restyled+BED↑j
.text:0000000000005303                 call    ___stack_chk_fail
.text:0000000000005308 ; ---------------------------------------------------------------------------
.text:0000000000005308
.text:0000000000005308 loc_5308:                               ; CODE XREF: quotearg_buffer_restyled+106A↑j
.text:0000000000005308                 mov     [rsp+0E8h+var_DB], 0
.text:000000000000530D                 jmp     loc_4D81
.text:0000000000005312 ; ---------------------------------------------------------------------------
.text:0000000000005312
.text:0000000000005312 loc_5312:                               ; CODE XREF: quotearg_buffer_restyled+1018↑j
.text:0000000000005312                 mov     rbp, r11
.text:0000000000005315                 jmp     loc_4CB0
.text:000000000000531A ; ---------------------------------------------------------------------------
.text:000000000000531A
.text:000000000000531A loc_531A:                               ; CODE XREF: quotearg_buffer_restyled+C74↑j
.text:000000000000531A                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000531F                 xor     eax, eax
.text:0000000000005321                 xor     r12d, r12d
.text:0000000000005324                 mov     [rsp+0E8h+var_98], 0
.text:000000000000532D                 jmp     loc_48D4
.text:0000000000005332 ; ---------------------------------------------------------------------------
.text:0000000000005332
.text:0000000000005332 loc_5332:                               ; CODE XREF: quotearg_buffer_restyled+C30↑j
.text:0000000000005332                 mov     rdx, r13
.text:0000000000005335                 mov     r13, [rsp+0E8h+var_98]
.text:000000000000533A                 jmp     loc_4932
.text:000000000000533F ; ---------------------------------------------------------------------------
.text:000000000000533F
.text:000000000000533F def_41A1:                               ; CODE XREF: quotearg_buffer_restyled+7A↑j
.text:000000000000533F                 call    _abort          ; jumptable 00000000000121F1 default case
.text:000000000000533F ; } // starts at 4110
.text:000000000000533F quotearg_buffer_restyled endp
.text:000000000000533F
.text:000000000000533F ; ---------------------------------------------------------------------------
.text:0000000000005344                 align 10h
.text:0000000000005350
.text:0000000000005350 ; =============== S U B R O U T I N E =======================================
.text:0000000000005350
.text:0000000000005350
.text:0000000000005350 quotearg_n_options proc near            ; CODE XREF: quotearg_n+E↓j
.text:0000000000005350                                         ; quotearg_n_mem+7↓j ...
.text:0000000000005350
.text:0000000000005350 var_50          = qword ptr -50h
.text:0000000000005350 var_48          = qword ptr -48h
.text:0000000000005350 var_40          = dword ptr -40h
.text:0000000000005350 var_3C          = dword ptr -3Ch
.text:0000000000005350
.text:0000000000005350 ; __unwind {
.text:0000000000005350                 push    r15
.text:0000000000005352                 push    r14
.text:0000000000005354                 movsxd  r15, edi
.text:0000000000005357                 push    r13
.text:0000000000005359                 push    r12
.text:000000000000535B                 mov     r14, rdx
.text:000000000000535E                 push    rbp
.text:000000000000535F                 push    rbx
.text:0000000000005360                 mov     rbp, rcx
.text:0000000000005363                 sub     rsp, 28h
.text:0000000000005367                 mov     [rsp+58h+var_50], rsi
.text:000000000000536C                 call    ___errno_location
.text:0000000000005371                 mov     r13, rax
.text:0000000000005374                 mov     eax, [rax]
.text:0000000000005376                 test    r15d, r15d
.text:0000000000005379                 mov     rbx, cs:slotvec
.text:0000000000005380                 mov     [rsp+58h+var_40], eax
.text:0000000000005384                 js      loc_54F1
.text:000000000000538A                 cmp     cs:nslots, r15d
.text:0000000000005391                 jg      short loc_53F5
.text:0000000000005393                 cmp     r15d, 7FFFFFFFh
.text:000000000000539A                 jz      loc_54F6
.text:00000000000053A0                 lea     r12d, [r15+1]
.text:00000000000053A4                 lea     rax, slotvec0
.text:00000000000053AB                 movsxd  rsi, r12d
.text:00000000000053AE                 shl     rsi, 4
.text:00000000000053B2                 cmp     rbx, rax
.text:00000000000053B5                 jz      loc_54D0
.text:00000000000053BB                 mov     rdi, rbx
.text:00000000000053BE                 call    xrealloc
.text:00000000000053C3                 mov     rbx, rax
.text:00000000000053C6                 mov     cs:slotvec, rax
.text:00000000000053CD
.text:00000000000053CD loc_53CD:                               ; CODE XREF: quotearg_n_options+19C↓j
.text:00000000000053CD                 movsxd  rdi, cs:nslots
.text:00000000000053D4                 mov     edx, r12d
.text:00000000000053D7                 xor     esi, esi        ; c
.text:00000000000053D9                 sub     edx, edi
.text:00000000000053DB                 shl     rdi, 4
.text:00000000000053DF                 movsxd  rdx, edx
.text:00000000000053E2                 add     rdi, rbx        ; s
.text:00000000000053E5                 shl     rdx, 4          ; n
.text:00000000000053E9                 call    _memset
.text:00000000000053EE                 mov     cs:nslots, r12d
.text:00000000000053F5
.text:00000000000053F5 loc_53F5:                               ; CODE XREF: quotearg_n_options+41↑j
.text:00000000000053F5                 mov     eax, [rbp+4]
.text:00000000000053F8                 shl     r15, 4
.text:00000000000053FC                 sub     rsp, 8
.text:0000000000005400                 add     rbx, r15
.text:0000000000005403                 lea     r15, [rbp+8]
.text:0000000000005407                 mov     r8d, [rbp+0]
.text:000000000000540B                 mov     r11, [rbx]
.text:000000000000540E                 mov     r12, [rbx+8]
.text:0000000000005412                 mov     rcx, r14
.text:0000000000005415                 or      eax, 1
.text:0000000000005418                 mov     [rsp+60h+var_3C], eax
.text:000000000000541C                 push    qword ptr [rbp+30h]
.text:000000000000541F                 mov     r9d, eax
.text:0000000000005422                 push    qword ptr [rbp+28h]
.text:0000000000005425                 push    r15
.text:0000000000005427                 mov     rsi, r11
.text:000000000000542A                 mov     rdx, [rsp+78h+var_50]
.text:000000000000542F                 mov     rdi, r12
.text:0000000000005432                 mov     [rsp+78h+var_48], r11
.text:0000000000005437                 call    quotearg_buffer_restyled
.text:000000000000543C                 add     rsp, 20h
.text:0000000000005440                 mov     r11, [rsp+58h+var_48]
.text:0000000000005445                 cmp     r11, rax
.text:0000000000005448                 ja      short loc_54B1
.text:000000000000544A                 lea     rsi, [rax+1]
.text:000000000000544E                 lea     rax, slot0
.text:0000000000005455                 cmp     r12, rax
.text:0000000000005458                 mov     [rbx], rsi
.text:000000000000545B                 jz      short loc_546F
.text:000000000000545D                 mov     rdi, r12        ; ptr
.text:0000000000005460                 mov     [rsp+58h+var_48], rsi
.text:0000000000005465                 call    _free
.text:000000000000546A                 mov     rsi, [rsp+58h+var_48]
.text:000000000000546F
.text:000000000000546F loc_546F:                               ; CODE XREF: quotearg_n_options+10B↑j
.text:000000000000546F                 mov     rdi, rsi
.text:0000000000005472                 mov     [rsp+58h+var_48], rsi
.text:0000000000005477                 call    xmalloc
.text:000000000000547C                 sub     rsp, 8
.text:0000000000005480                 mov     [rbx+8], rax
.text:0000000000005484                 mov     r8d, [rbp+0]
.text:0000000000005488                 push    qword ptr [rbp+30h]
.text:000000000000548B                 push    qword ptr [rbp+28h]
.text:000000000000548E                 mov     rcx, r14
.text:0000000000005491                 push    r15
.text:0000000000005493                 mov     r9d, [rsp+78h+var_3C]
.text:0000000000005498                 mov     rdi, rax
.text:000000000000549B                 mov     rdx, [rsp+78h+var_50]
.text:00000000000054A0                 mov     rsi, [rsp+78h+var_48]
.text:00000000000054A5                 mov     r12, rax
.text:00000000000054A8                 call    quotearg_buffer_restyled
.text:00000000000054AD                 add     rsp, 20h
.text:00000000000054B1
.text:00000000000054B1 loc_54B1:                               ; CODE XREF: quotearg_n_options+F8↑j
.text:00000000000054B1                 mov     eax, [rsp+58h+var_40]
.text:00000000000054B5                 mov     [r13+0], eax
.text:00000000000054B9                 add     rsp, 28h
.text:00000000000054BD                 mov     rax, r12
.text:00000000000054C0                 pop     rbx
.text:00000000000054C1                 pop     rbp
.text:00000000000054C2                 pop     r12
.text:00000000000054C4                 pop     r13
.text:00000000000054C6                 pop     r14
.text:00000000000054C8                 pop     r15
.text:00000000000054CA                 retn
.text:00000000000054CA ; ---------------------------------------------------------------------------
.text:00000000000054CB                 align 10h
.text:00000000000054D0
.text:00000000000054D0 loc_54D0:                               ; CODE XREF: quotearg_n_options+65↑j
.text:00000000000054D0                 xor     edi, edi
.text:00000000000054D2                 call    xrealloc
.text:00000000000054D7                 movdqa  xmm0, xmmword ptr cs:slotvec0
.text:00000000000054DF                 mov     rbx, rax
.text:00000000000054E2                 mov     cs:slotvec, rax
.text:00000000000054E9                 movups  xmmword ptr [rax], xmm0
.text:00000000000054EC                 jmp     loc_53CD
.text:00000000000054F1 ; ---------------------------------------------------------------------------
.text:00000000000054F1
.text:00000000000054F1 loc_54F1:                               ; CODE XREF: quotearg_n_options+34↑j
.text:00000000000054F1                 call    _abort
.text:00000000000054F6 ; ---------------------------------------------------------------------------
.text:00000000000054F6
.text:00000000000054F6 loc_54F6:                               ; CODE XREF: quotearg_n_options+4A↑j
.text:00000000000054F6                 call    xalloc_die
.text:00000000000054F6 ; } // starts at 5350
.text:00000000000054F6 quotearg_n_options endp
.text:00000000000054F6
.text:00000000000054F6 ; ---------------------------------------------------------------------------
.text:00000000000054FB                 align 20h
.text:0000000000005500
.text:0000000000005500 ; =============== S U B R O U T I N E =======================================
.text:0000000000005500
.text:0000000000005500 ; Attributes: info_from_lumina
.text:0000000000005500
.text:0000000000005500 ; quoting_options *__fastcall clone_quoting_options(quoting_options *o)
.text:0000000000005500                 public clone_quoting_options
.text:0000000000005500 clone_quoting_options proc near
.text:0000000000005500 ; __unwind {
.text:0000000000005500                 push    r12
.text:0000000000005502                 push    rbp
.text:0000000000005503                 push    rbx
.text:0000000000005504                 mov     rbx, rdi
.text:0000000000005507                 call    ___errno_location
.text:000000000000550C                 mov     r12d, [rax]
.text:000000000000550F                 mov     rbp, rax
.text:0000000000005512                 lea     rax, default_quoting_options
.text:0000000000005519                 test    rbx, rbx
.text:000000000000551C                 mov     esi, 38h ; '8'  ; n
.text:0000000000005521                 cmovz   rbx, rax
.text:0000000000005525                 mov     rdi, rbx        ; src
.text:0000000000005528                 call    xmemdup
.text:000000000000552D                 mov     [rbp+0], r12d
.text:0000000000005531                 pop     rbx
.text:0000000000005532                 pop     rbp
.text:0000000000005533                 pop     r12
.text:0000000000005535                 retn
.text:0000000000005535 ; } // starts at 5500
.text:0000000000005535 clone_quoting_options endp
.text:0000000000005535
.text:0000000000005535 ; ---------------------------------------------------------------------------
.text:0000000000005536                 align 20h
.text:0000000000005540
.text:0000000000005540 ; =============== S U B R O U T I N E =======================================
.text:0000000000005540
.text:0000000000005540
.text:0000000000005540                 public get_quoting_style
.text:0000000000005540 get_quoting_style proc near
.text:0000000000005540 ; __unwind {
.text:0000000000005540                 lea     rax, default_quoting_options
.text:0000000000005547                 test    rdi, rdi
.text:000000000000554A                 cmovz   rdi, rax
.text:000000000000554E                 mov     eax, [rdi]
.text:0000000000005550                 retn
.text:0000000000005550 ; } // starts at 5540
.text:0000000000005550 get_quoting_style endp
.text:0000000000005550
.text:0000000000005550 ; ---------------------------------------------------------------------------
.text:0000000000005551                 align 20h
.text:0000000000005560
.text:0000000000005560 ; =============== S U B R O U T I N E =======================================
.text:0000000000005560
.text:0000000000005560
.text:0000000000005560                 public set_quoting_style
.text:0000000000005560 set_quoting_style proc near
.text:0000000000005560 ; __unwind {
.text:0000000000005560                 lea     rax, default_quoting_options
.text:0000000000005567                 test    rdi, rdi
.text:000000000000556A                 cmovz   rdi, rax
.text:000000000000556E                 mov     [rdi], esi
.text:0000000000005570                 retn
.text:0000000000005570 ; } // starts at 5560
.text:0000000000005570 set_quoting_style endp
.text:0000000000005570
.text:0000000000005570 ; ---------------------------------------------------------------------------
.text:0000000000005571                 align 20h
.text:0000000000005580
.text:0000000000005580 ; =============== S U B R O U T I N E =======================================
.text:0000000000005580
.text:0000000000005580 ; Attributes: info_from_lumina
.text:0000000000005580
.text:0000000000005580 ; int __fastcall set_char_quoting(quoting_options *o, char c, int i)
.text:0000000000005580                 public set_char_quoting
.text:0000000000005580 set_char_quoting proc near
.text:0000000000005580 ; __unwind {
.text:0000000000005580                 lea     rax, default_quoting_options
.text:0000000000005587                 test    rdi, rdi
.text:000000000000558A                 mov     ecx, esi
.text:000000000000558C                 cmovz   rdi, rax
.text:0000000000005590                 mov     eax, esi
.text:0000000000005592                 and     ecx, 1Fh
.text:0000000000005595                 shr     al, 5
.text:0000000000005598                 movzx   eax, al
.text:000000000000559B                 lea     rdi, [rdi+rax*4+8]
.text:00000000000055A0                 mov     esi, [rdi]
.text:00000000000055A2                 mov     eax, esi
.text:00000000000055A4                 shr     eax, cl
.text:00000000000055A6                 xor     edx, eax
.text:00000000000055A8                 and     eax, 1
.text:00000000000055AB                 and     edx, 1
.text:00000000000055AE                 shl     edx, cl
.text:00000000000055B0                 xor     edx, esi
.text:00000000000055B2                 mov     [rdi], edx
.text:00000000000055B4                 retn
.text:00000000000055B4 ; } // starts at 5580
.text:00000000000055B4 set_char_quoting endp
.text:00000000000055B4
.text:00000000000055B4 ; ---------------------------------------------------------------------------
.text:00000000000055B5                 align 20h
.text:00000000000055C0
.text:00000000000055C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000055C0
.text:00000000000055C0
.text:00000000000055C0                 public set_quoting_flags
.text:00000000000055C0 set_quoting_flags proc near
.text:00000000000055C0 ; __unwind {
.text:00000000000055C0                 lea     rax, default_quoting_options
.text:00000000000055C7                 test    rdi, rdi
.text:00000000000055CA                 cmovz   rdi, rax
.text:00000000000055CE                 mov     eax, [rdi+4]
.text:00000000000055D1                 mov     [rdi+4], esi
.text:00000000000055D4                 retn
.text:00000000000055D4 ; } // starts at 55C0
.text:00000000000055D4 set_quoting_flags endp
.text:00000000000055D4
.text:00000000000055D4 ; ---------------------------------------------------------------------------
.text:00000000000055D5                 align 20h
.text:00000000000055E0
.text:00000000000055E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000055E0
.text:00000000000055E0 ; Attributes: info_from_lumina
.text:00000000000055E0
.text:00000000000055E0 ; void __fastcall set_custom_quoting(quoting_options *o, const char *left_quote, const char *right_quote)
.text:00000000000055E0                 public set_custom_quoting
.text:00000000000055E0 set_custom_quoting proc near
.text:00000000000055E0 ; __unwind {
.text:00000000000055E0                 lea     rax, default_quoting_options
.text:00000000000055E7                 test    rdi, rdi
.text:00000000000055EA                 cmovz   rdi, rax
.text:00000000000055EE                 test    rsi, rsi
.text:00000000000055F1                 mov     dword ptr [rdi], 0Ah
.text:00000000000055F7                 jz      short loc_5607
.text:00000000000055F9                 test    rdx, rdx
.text:00000000000055FC                 jz      short loc_5607
.text:00000000000055FE                 mov     [rdi+28h], rsi
.text:0000000000005602                 mov     [rdi+30h], rdx
.text:0000000000005606                 retn
.text:0000000000005607 ; ---------------------------------------------------------------------------
.text:0000000000005607
.text:0000000000005607 loc_5607:                               ; CODE XREF: set_custom_quoting+17↑j
.text:0000000000005607                                         ; set_custom_quoting+1C↑j
.text:0000000000005607                 sub     rsp, 8
.text:000000000000560B                 call    _abort
.text:000000000000560B ; } // starts at 55E0
.text:000000000000560B set_custom_quoting endp
.text:000000000000560B
.text:0000000000005610
.text:0000000000005610 ; =============== S U B R O U T I N E =======================================
.text:0000000000005610
.text:0000000000005610 ; Attributes: info_from_lumina
.text:0000000000005610
.text:0000000000005610 ; size_t __fastcall quotearg_buffer(char *buffer, size_t buffersize, const char *arg, size_t argsize, const quoting_options *o)
.text:0000000000005610                 public quotearg_buffer
.text:0000000000005610 quotearg_buffer proc near
.text:0000000000005610
.text:0000000000005610 var_40          = qword ptr -40h
.text:0000000000005610
.text:0000000000005610 ; __unwind {
.text:0000000000005610                 push    r15
.text:0000000000005612                 push    r14
.text:0000000000005614                 lea     rax, default_quoting_options
.text:000000000000561B                 push    r13
.text:000000000000561D                 push    r12
.text:000000000000561F                 mov     r13, rdi
.text:0000000000005622                 push    rbp
.text:0000000000005623                 push    rbx
.text:0000000000005624                 mov     rbx, r8
.text:0000000000005627                 mov     r14, rsi
.text:000000000000562A                 mov     r15, rdx
.text:000000000000562D                 sub     rsp, 18h
.text:0000000000005631                 test    r8, r8
.text:0000000000005634                 cmovz   rbx, rax
.text:0000000000005638                 mov     [rsp+48h+var_40], rcx
.text:000000000000563D                 call    ___errno_location
.text:0000000000005642                 mov     r12d, [rax]
.text:0000000000005645                 mov     rbp, rax
.text:0000000000005648                 lea     rax, [rbx+8]
.text:000000000000564C                 sub     rsp, 8
.text:0000000000005650                 mov     r9d, [rbx+4]
.text:0000000000005654                 push    qword ptr [rbx+30h]
.text:0000000000005657                 mov     r8d, [rbx]
.text:000000000000565A                 push    qword ptr [rbx+28h]
.text:000000000000565D                 mov     rdx, r15
.text:0000000000005660                 push    rax
.text:0000000000005661                 mov     rcx, [rsp+68h+var_40]
.text:0000000000005666                 mov     rsi, r14
.text:0000000000005669                 mov     rdi, r13
.text:000000000000566C                 call    quotearg_buffer_restyled
.text:0000000000005671                 mov     [rbp+0], r12d
.text:0000000000005675                 add     rsp, 38h
.text:0000000000005679                 pop     rbx
.text:000000000000567A                 pop     rbp
.text:000000000000567B                 pop     r12
.text:000000000000567D                 pop     r13
.text:000000000000567F                 pop     r14
.text:0000000000005681                 pop     r15
.text:0000000000005683                 retn
.text:0000000000005683 ; } // starts at 5610
.text:0000000000005683 quotearg_buffer endp
.text:0000000000005683
.text:0000000000005683 ; ---------------------------------------------------------------------------
.text:0000000000005684                 align 10h
.text:0000000000005690
.text:0000000000005690 ; =============== S U B R O U T I N E =======================================
.text:0000000000005690
.text:0000000000005690 ; Attributes: info_from_lumina
.text:0000000000005690
.text:0000000000005690 ; char *__fastcall quotearg_alloc_mem(const char *arg, size_t argsize, size_t *size, const quoting_options *o)
.text:0000000000005690                 public quotearg_alloc_mem
.text:0000000000005690 quotearg_alloc_mem proc near            ; CODE XREF: quotearg_alloc+5↓j
.text:0000000000005690
.text:0000000000005690 var_5C          = dword ptr -5Ch
.text:0000000000005690 var_58          = qword ptr -58h
.text:0000000000005690 var_50          = qword ptr -50h
.text:0000000000005690 var_48          = qword ptr -48h
.text:0000000000005690 var_40          = qword ptr -40h
.text:0000000000005690
.text:0000000000005690 ; __unwind {
.text:0000000000005690                 push    r15
.text:0000000000005692                 push    r14
.text:0000000000005694                 lea     rax, default_quoting_options
.text:000000000000569B                 push    r13
.text:000000000000569D                 push    r12
.text:000000000000569F                 mov     r12, rdx
.text:00000000000056A2                 push    rbp
.text:00000000000056A3                 push    rbx
.text:00000000000056A4                 mov     rbx, rcx
.text:00000000000056A7                 mov     r14, rdi
.text:00000000000056AA                 mov     r15, rsi
.text:00000000000056AD                 sub     rsp, 38h
.text:00000000000056B1                 test    rcx, rcx
.text:00000000000056B4                 cmovz   rbx, rax
.text:00000000000056B8                 xor     ebp, ebp
.text:00000000000056BA                 call    ___errno_location
.text:00000000000056BF                 test    r12, r12
.text:00000000000056C2                 mov     r13, rax
.text:00000000000056C5                 mov     eax, [rax]
.text:00000000000056C7                 setz    bpl
.text:00000000000056CB                 or      ebp, [rbx+4]
.text:00000000000056CE                 lea     r10, [rbx+8]
.text:00000000000056D2                 sub     rsp, 8
.text:00000000000056D6                 mov     r8d, [rbx]
.text:00000000000056D9                 mov     rcx, r15
.text:00000000000056DC                 mov     [rsp+70h+var_5C], eax
.text:00000000000056E0                 push    qword ptr [rbx+30h]
.text:00000000000056E3                 mov     rdx, r14
.text:00000000000056E6                 push    qword ptr [rbx+28h]
.text:00000000000056E9                 push    r10
.text:00000000000056EB                 xor     esi, esi
.text:00000000000056ED                 mov     r9d, ebp
.text:00000000000056F0                 xor     edi, edi
.text:00000000000056F2                 mov     [rsp+88h+var_48], r10
.text:00000000000056F7                 call    quotearg_buffer_restyled
.text:00000000000056FC                 lea     rsi, [rax+1]
.text:0000000000005700                 mov     [rsp+88h+var_40], rax
.text:0000000000005705                 add     rsp, 20h
.text:0000000000005709                 mov     rdi, rsi
.text:000000000000570C                 mov     [rsp+68h+var_50], rsi
.text:0000000000005711                 call    xmalloc
.text:0000000000005716                 mov     [rsp+68h+var_58], rax
.text:000000000000571B                 sub     rsp, 8
.text:000000000000571F                 push    qword ptr [rbx+30h]
.text:0000000000005722                 push    qword ptr [rbx+28h]
.text:0000000000005725                 mov     r10, [rsp+80h+var_48]
.text:000000000000572A                 mov     r9d, ebp
.text:000000000000572D                 mov     r8d, [rbx]
.text:0000000000005730                 mov     rcx, r15
.text:0000000000005733                 mov     rdx, r14
.text:0000000000005736                 mov     rdi, rax
.text:0000000000005739                 push    r10
.text:000000000000573B                 mov     rsi, [rsp+88h+var_50]
.text:0000000000005740                 call    quotearg_buffer_restyled
.text:0000000000005745                 mov     eax, [rsp+88h+var_5C]
.text:0000000000005749                 add     rsp, 20h
.text:000000000000574D                 test    r12, r12
.text:0000000000005750                 mov     [r13+0], eax
.text:0000000000005754                 jz      short loc_575F
.text:0000000000005756                 mov     r11, [rsp+68h+var_40]
.text:000000000000575B                 mov     [r12], r11
.text:000000000000575F
.text:000000000000575F loc_575F:                               ; CODE XREF: quotearg_alloc_mem+C4↑j
.text:000000000000575F                 mov     rax, [rsp+68h+var_58]
.text:0000000000005764                 add     rsp, 38h
.text:0000000000005768                 pop     rbx
.text:0000000000005769                 pop     rbp
.text:000000000000576A                 pop     r12
.text:000000000000576C                 pop     r13
.text:000000000000576E                 pop     r14
.text:0000000000005770                 pop     r15
.text:0000000000005772                 retn
.text:0000000000005772 ; } // starts at 5690
.text:0000000000005772 quotearg_alloc_mem endp
.text:0000000000005772
.text:0000000000005772 ; ---------------------------------------------------------------------------
.text:0000000000005773                 align 20h
.text:0000000000005780
.text:0000000000005780 ; =============== S U B R O U T I N E =======================================
.text:0000000000005780
.text:0000000000005780
.text:0000000000005780                 public quotearg_alloc
.text:0000000000005780 quotearg_alloc  proc near
.text:0000000000005780 ; __unwind {
.text:0000000000005780                 mov     rcx, rdx
.text:0000000000005783                 xor     edx, edx
.text:0000000000005785                 jmp     quotearg_alloc_mem
.text:0000000000005785 ; } // starts at 5780
.text:0000000000005785 quotearg_alloc  endp
.text:0000000000005785
.text:0000000000005785 ; ---------------------------------------------------------------------------
.text:000000000000578A                 align 10h
.text:0000000000005790
.text:0000000000005790 ; =============== S U B R O U T I N E =======================================
.text:0000000000005790
.text:0000000000005790 ; Attributes: info_from_lumina
.text:0000000000005790
.text:0000000000005790 ; void __cdecl quotearg_free()
.text:0000000000005790                 public quotearg_free
.text:0000000000005790 quotearg_free   proc near
.text:0000000000005790 ; __unwind {
.text:0000000000005790                 mov     eax, cs:nslots
.text:0000000000005796                 push    r12
.text:0000000000005798                 mov     r12, cs:slotvec
.text:000000000000579F                 push    rbp
.text:00000000000057A0                 push    rbx
.text:00000000000057A1                 cmp     eax, 1
.text:00000000000057A4                 jle     short loc_57D1
.text:00000000000057A6                 sub     eax, 2
.text:00000000000057A9                 lea     rbx, [r12+18h]
.text:00000000000057AE                 shl     rax, 4
.text:00000000000057B2                 lea     rbp, [r12+rax+28h]
.text:00000000000057B7                 nop     word ptr [rax+rax+00000000h]
.text:00000000000057C0
.text:00000000000057C0 loc_57C0:                               ; CODE XREF: quotearg_free+3F↓j
.text:00000000000057C0                 mov     rdi, [rbx]      ; ptr
.text:00000000000057C3                 add     rbx, 10h
.text:00000000000057C7                 call    _free
.text:00000000000057CC                 cmp     rbx, rbp
.text:00000000000057CF                 jnz     short loc_57C0
.text:00000000000057D1
.text:00000000000057D1 loc_57D1:                               ; CODE XREF: quotearg_free+14↑j
.text:00000000000057D1                 mov     rdi, [r12+8]    ; ptr
.text:00000000000057D6                 lea     rbx, slot0
.text:00000000000057DD                 cmp     rdi, rbx
.text:00000000000057E0                 jz      short loc_57F9
.text:00000000000057E2                 call    _free
.text:00000000000057E7                 mov     cs:slotvec0, 100h
.text:00000000000057F2                 mov     cs:off_20A078, rbx
.text:00000000000057F9
.text:00000000000057F9 loc_57F9:                               ; CODE XREF: quotearg_free+50↑j
.text:00000000000057F9                 lea     rbx, slotvec0
.text:0000000000005800                 cmp     r12, rbx
.text:0000000000005803                 jz      short loc_5814
.text:0000000000005805                 mov     rdi, r12        ; ptr
.text:0000000000005808                 call    _free
.text:000000000000580D                 mov     cs:slotvec, rbx
.text:0000000000005814
.text:0000000000005814 loc_5814:                               ; CODE XREF: quotearg_free+73↑j
.text:0000000000005814                 pop     rbx
.text:0000000000005815                 mov     cs:nslots, 1
.text:000000000000581F                 pop     rbp
.text:0000000000005820                 pop     r12
.text:0000000000005822                 retn
.text:0000000000005822 ; } // starts at 5790
.text:0000000000005822 quotearg_free   endp
.text:0000000000005822
.text:0000000000005822 ; ---------------------------------------------------------------------------
.text:0000000000005823                 align 10h
.text:0000000000005830
.text:0000000000005830 ; =============== S U B R O U T I N E =======================================
.text:0000000000005830
.text:0000000000005830
.text:0000000000005830                 public quotearg_n
.text:0000000000005830 quotearg_n      proc near
.text:0000000000005830 ; __unwind {
.text:0000000000005830                 lea     rcx, default_quoting_options
.text:0000000000005837                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000583E                 jmp     quotearg_n_options
.text:000000000000583E ; } // starts at 5830
.text:000000000000583E quotearg_n      endp
.text:000000000000583E
.text:000000000000583E ; ---------------------------------------------------------------------------
.text:0000000000005843                 align 10h
.text:0000000000005850
.text:0000000000005850 ; =============== S U B R O U T I N E =======================================
.text:0000000000005850
.text:0000000000005850
.text:0000000000005850                 public quotearg_n_mem
.text:0000000000005850 quotearg_n_mem  proc near
.text:0000000000005850 ; __unwind {
.text:0000000000005850                 lea     rcx, default_quoting_options
.text:0000000000005857                 jmp     quotearg_n_options
.text:0000000000005857 ; } // starts at 5850
.text:0000000000005857 quotearg_n_mem  endp
.text:0000000000005857
.text:0000000000005857 ; ---------------------------------------------------------------------------
.text:000000000000585C                 align 20h
.text:0000000000005860
.text:0000000000005860 ; =============== S U B R O U T I N E =======================================
.text:0000000000005860
.text:0000000000005860
.text:0000000000005860                 public quotearg
.text:0000000000005860 quotearg        proc near
.text:0000000000005860 ; __unwind {
.text:0000000000005860                 lea     rcx, default_quoting_options
.text:0000000000005867                 mov     rsi, rdi
.text:000000000000586A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005871                 xor     edi, edi
.text:0000000000005873                 jmp     quotearg_n_options
.text:0000000000005873 ; } // starts at 5860
.text:0000000000005873 quotearg        endp
.text:0000000000005873
.text:0000000000005873 ; ---------------------------------------------------------------------------
.text:0000000000005878                 align 20h
.text:0000000000005880
.text:0000000000005880 ; =============== S U B R O U T I N E =======================================
.text:0000000000005880
.text:0000000000005880
.text:0000000000005880                 public quotearg_mem
.text:0000000000005880 quotearg_mem    proc near
.text:0000000000005880 ; __unwind {
.text:0000000000005880                 lea     rcx, default_quoting_options
.text:0000000000005887                 mov     rdx, rsi
.text:000000000000588A                 mov     rsi, rdi
.text:000000000000588D                 xor     edi, edi
.text:000000000000588F                 jmp     quotearg_n_options
.text:000000000000588F ; } // starts at 5880
.text:000000000000588F quotearg_mem    endp
.text:000000000000588F
.text:000000000000588F ; ---------------------------------------------------------------------------
.text:0000000000005894                 align 20h
.text:00000000000058A0
.text:00000000000058A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000058A0
.text:00000000000058A0 ; Attributes: info_from_lumina
.text:00000000000058A0
.text:00000000000058A0 ; char *__fastcall quotearg_n_style(int n, quoting_style s, const char *arg)
.text:00000000000058A0                 public quotearg_n_style
.text:00000000000058A0 quotearg_n_style proc near              ; CODE XREF: quotearg_style+7↓j
.text:00000000000058A0
.text:00000000000058A0 var_48          = dword ptr -48h
.text:00000000000058A0 var_44          = qword ptr -44h
.text:00000000000058A0 var_3C          = qword ptr -3Ch
.text:00000000000058A0 var_34          = qword ptr -34h
.text:00000000000058A0 var_2C          = qword ptr -2Ch
.text:00000000000058A0 var_24          = qword ptr -24h
.text:00000000000058A0 var_1C          = qword ptr -1Ch
.text:00000000000058A0 var_14          = dword ptr -14h
.text:00000000000058A0 var_10          = qword ptr -10h
.text:00000000000058A0
.text:00000000000058A0 ; __unwind {
.text:00000000000058A0                 sub     rsp, 48h
.text:00000000000058A4                 mov     rax, rdx
.text:00000000000058A7                 mov     rdx, fs:28h
.text:00000000000058B0                 mov     [rsp+48h+var_10], rdx
.text:00000000000058B5                 xor     edx, edx
.text:00000000000058B7                 cmp     esi, 0Ah
.text:00000000000058BA                 jz      short loc_5924
.text:00000000000058BC                 mov     [rsp+48h+var_48], esi
.text:00000000000058BF                 mov     rcx, rsp
.text:00000000000058C2                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000058C9                 mov     rsi, rax
.text:00000000000058CC                 mov     [rsp+48h+var_44], 0
.text:00000000000058D5                 mov     [rsp+48h+var_3C], 0
.text:00000000000058DE                 mov     [rsp+48h+var_34], 0
.text:00000000000058E7                 mov     [rsp+48h+var_2C], 0
.text:00000000000058F0                 mov     [rsp+48h+var_24], 0
.text:00000000000058F9                 mov     [rsp+48h+var_1C], 0
.text:0000000000005902                 mov     [rsp+48h+var_14], 0
.text:000000000000590A                 call    quotearg_n_options
.text:000000000000590F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000005914                 xor     rcx, fs:28h
.text:000000000000591D                 jnz     short loc_5929
.text:000000000000591F                 add     rsp, 48h
.text:0000000000005923                 retn
.text:0000000000005924 ; ---------------------------------------------------------------------------
.text:0000000000005924
.text:0000000000005924 loc_5924:                               ; CODE XREF: quotearg_n_style+1A↑j
.text:0000000000005924                 call    _abort
.text:0000000000005929 ; ---------------------------------------------------------------------------
.text:0000000000005929
.text:0000000000005929 loc_5929:                               ; CODE XREF: quotearg_n_style+7D↑j
.text:0000000000005929                 call    ___stack_chk_fail
.text:0000000000005929 ; } // starts at 58A0
.text:0000000000005929 quotearg_n_style endp
.text:0000000000005929
.text:0000000000005929 ; ---------------------------------------------------------------------------
.text:000000000000592E                 align 10h
.text:0000000000005930
.text:0000000000005930 ; =============== S U B R O U T I N E =======================================
.text:0000000000005930
.text:0000000000005930 ; Attributes: info_from_lumina
.text:0000000000005930
.text:0000000000005930 ; char *__fastcall quotearg_n_style_mem(int n, quoting_style s, const char *arg, size_t argsize)
.text:0000000000005930                 public quotearg_n_style_mem
.text:0000000000005930 quotearg_n_style_mem proc near          ; CODE XREF: quotearg_style_mem+A↓j
.text:0000000000005930
.text:0000000000005930 var_48          = dword ptr -48h
.text:0000000000005930 var_44          = qword ptr -44h
.text:0000000000005930 var_3C          = qword ptr -3Ch
.text:0000000000005930 var_34          = qword ptr -34h
.text:0000000000005930 var_2C          = qword ptr -2Ch
.text:0000000000005930 var_24          = qword ptr -24h
.text:0000000000005930 var_1C          = qword ptr -1Ch
.text:0000000000005930 var_14          = dword ptr -14h
.text:0000000000005930 var_10          = qword ptr -10h
.text:0000000000005930
.text:0000000000005930 ; __unwind {
.text:0000000000005930                 sub     rsp, 48h
.text:0000000000005934                 mov     rax, rdx
.text:0000000000005937                 mov     rdx, rcx
.text:000000000000593A                 mov     rcx, fs:28h
.text:0000000000005943                 mov     [rsp+48h+var_10], rcx
.text:0000000000005948                 xor     ecx, ecx
.text:000000000000594A                 cmp     esi, 0Ah
.text:000000000000594D                 jz      short loc_59B0
.text:000000000000594F                 mov     [rsp+48h+var_48], esi
.text:0000000000005952                 mov     rcx, rsp
.text:0000000000005955                 mov     rsi, rax
.text:0000000000005958                 mov     [rsp+48h+var_44], 0
.text:0000000000005961                 mov     [rsp+48h+var_3C], 0
.text:000000000000596A                 mov     [rsp+48h+var_34], 0
.text:0000000000005973                 mov     [rsp+48h+var_2C], 0
.text:000000000000597C                 mov     [rsp+48h+var_24], 0
.text:0000000000005985                 mov     [rsp+48h+var_1C], 0
.text:000000000000598E                 mov     [rsp+48h+var_14], 0
.text:0000000000005996                 call    quotearg_n_options
.text:000000000000599B                 mov     rdx, [rsp+48h+var_10]
.text:00000000000059A0                 xor     rdx, fs:28h
.text:00000000000059A9                 jnz     short loc_59B5
.text:00000000000059AB                 add     rsp, 48h
.text:00000000000059AF                 retn
.text:00000000000059B0 ; ---------------------------------------------------------------------------
.text:00000000000059B0
.text:00000000000059B0 loc_59B0:                               ; CODE XREF: quotearg_n_style_mem+1D↑j
.text:00000000000059B0                 call    _abort
.text:00000000000059B5 ; ---------------------------------------------------------------------------
.text:00000000000059B5
.text:00000000000059B5 loc_59B5:                               ; CODE XREF: quotearg_n_style_mem+79↑j
.text:00000000000059B5                 call    ___stack_chk_fail
.text:00000000000059B5 ; } // starts at 5930
.text:00000000000059B5 quotearg_n_style_mem endp
.text:00000000000059B5
.text:00000000000059B5 ; ---------------------------------------------------------------------------
.text:00000000000059BA                 align 20h
.text:00000000000059C0
.text:00000000000059C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000059C0
.text:00000000000059C0
.text:00000000000059C0                 public quotearg_style
.text:00000000000059C0 quotearg_style  proc near               ; CODE XREF: main+E80↑p
.text:00000000000059C0                                         ; main+142D↑p
.text:00000000000059C0 ; __unwind {
.text:00000000000059C0                 mov     rdx, rsi
.text:00000000000059C3                 mov     esi, edi
.text:00000000000059C5                 xor     edi, edi
.text:00000000000059C7                 jmp     quotearg_n_style
.text:00000000000059C7 ; } // starts at 59C0
.text:00000000000059C7 quotearg_style  endp
.text:00000000000059C7
.text:00000000000059C7 ; ---------------------------------------------------------------------------
.text:00000000000059CC                 align 10h
.text:00000000000059D0
.text:00000000000059D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000059D0
.text:00000000000059D0
.text:00000000000059D0                 public quotearg_style_mem
.text:00000000000059D0 quotearg_style_mem proc near
.text:00000000000059D0 ; __unwind {
.text:00000000000059D0                 mov     rcx, rdx
.text:00000000000059D3                 mov     rdx, rsi
.text:00000000000059D6                 mov     esi, edi
.text:00000000000059D8                 xor     edi, edi
.text:00000000000059DA                 jmp     quotearg_n_style_mem
.text:00000000000059DA ; } // starts at 59D0
.text:00000000000059DA quotearg_style_mem endp
.text:00000000000059DA
.text:00000000000059DA ; ---------------------------------------------------------------------------
.text:00000000000059DF                 align 20h
.text:00000000000059E0
.text:00000000000059E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000059E0
.text:00000000000059E0 ; Attributes: info_from_lumina
.text:00000000000059E0
.text:00000000000059E0 ; char *__fastcall quotearg_char_mem(const char *arg, size_t argsize, char ch_0)
.text:00000000000059E0                 public quotearg_char_mem
.text:00000000000059E0 quotearg_char_mem proc near             ; CODE XREF: quotearg_char+B↓j
.text:00000000000059E0                                         ; quotearg_colon+C↓j ...
.text:00000000000059E0
.text:00000000000059E0 var_48          = xmmword ptr -48h
.text:00000000000059E0 var_38          = xmmword ptr -38h
.text:00000000000059E0 var_28          = xmmword ptr -28h
.text:00000000000059E0 var_18          = qword ptr -18h
.text:00000000000059E0 var_10          = qword ptr -10h
.text:00000000000059E0
.text:00000000000059E0 ; __unwind {
.text:00000000000059E0                 sub     rsp, 48h
.text:00000000000059E4                 mov     ecx, edx
.text:00000000000059E6                 mov     rax, fs:28h
.text:00000000000059EF                 mov     [rsp+48h+var_10], rax
.text:00000000000059F4                 xor     eax, eax
.text:00000000000059F6                 mov     rax, cs:qword_20A550
.text:00000000000059FD                 mov     r8, rsp
.text:0000000000005A00                 and     ecx, 1Fh
.text:0000000000005A03                 movdqa  xmm0, cs:default_quoting_options
.text:0000000000005A0B                 mov     [rsp+48h+var_18], rax
.text:0000000000005A10                 mov     eax, edx
.text:0000000000005A12                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000005A16                 shr     al, 5
.text:0000000000005A19                 movzx   eax, al
.text:0000000000005A1C                 lea     r9, [r8+rax*4+8]
.text:0000000000005A21                 movdqa  xmm0, cs:xmmword_20A530
.text:0000000000005A29                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000005A2E                 movdqa  xmm0, cs:xmmword_20A540
.text:0000000000005A36                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000005A3B                 mov     edx, [r9]
.text:0000000000005A3E                 mov     eax, edx
.text:0000000000005A40                 shr     eax, cl
.text:0000000000005A42                 not     eax
.text:0000000000005A44                 and     eax, 1
.text:0000000000005A47                 shl     eax, cl
.text:0000000000005A49                 mov     rcx, r8
.text:0000000000005A4C                 xor     eax, edx
.text:0000000000005A4E                 mov     rdx, rsi
.text:0000000000005A51                 mov     rsi, rdi
.text:0000000000005A54                 mov     [r9], eax
.text:0000000000005A57                 xor     edi, edi
.text:0000000000005A59                 call    quotearg_n_options
.text:0000000000005A5E                 mov     rsi, [rsp+48h+var_10]
.text:0000000000005A63                 xor     rsi, fs:28h
.text:0000000000005A6C                 jnz     short loc_5A73
.text:0000000000005A6E                 add     rsp, 48h
.text:0000000000005A72                 retn
.text:0000000000005A73 ; ---------------------------------------------------------------------------
.text:0000000000005A73
.text:0000000000005A73 loc_5A73:                               ; CODE XREF: quotearg_char_mem+8C↑j
.text:0000000000005A73                 call    ___stack_chk_fail
.text:0000000000005A73 ; } // starts at 59E0
.text:0000000000005A73 quotearg_char_mem endp
.text:0000000000005A73
.text:0000000000005A73 ; ---------------------------------------------------------------------------
.text:0000000000005A78                 align 20h
.text:0000000000005A80
.text:0000000000005A80 ; =============== S U B R O U T I N E =======================================
.text:0000000000005A80
.text:0000000000005A80
.text:0000000000005A80                 public quotearg_char
.text:0000000000005A80 quotearg_char   proc near
.text:0000000000005A80 ; __unwind {
.text:0000000000005A80                 movsx   edx, sil
.text:0000000000005A84                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:0000000000005A8B                 jmp     quotearg_char_mem
.text:0000000000005A8B ; } // starts at 5A80
.text:0000000000005A8B quotearg_char   endp
.text:0000000000005A8B
.text:0000000000005A90
.text:0000000000005A90 ; =============== S U B R O U T I N E =======================================
.text:0000000000005A90
.text:0000000000005A90
.text:0000000000005A90                 public quotearg_colon
.text:0000000000005A90 quotearg_colon  proc near               ; CODE XREF: close_stdout+65↑p
.text:0000000000005A90 ; __unwind {
.text:0000000000005A90                 mov     edx, 3Ah ; ':'
.text:0000000000005A95                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:0000000000005A9C                 jmp     quotearg_char_mem
.text:0000000000005A9C ; } // starts at 5A90
.text:0000000000005A9C quotearg_colon  endp
.text:0000000000005A9C
.text:0000000000005A9C ; ---------------------------------------------------------------------------
.text:0000000000005AA1                 align 10h
.text:0000000000005AB0
.text:0000000000005AB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005AB0
.text:0000000000005AB0
.text:0000000000005AB0                 public quotearg_colon_mem
.text:0000000000005AB0 quotearg_colon_mem proc near
.text:0000000000005AB0 ; __unwind {
.text:0000000000005AB0                 mov     edx, 3Ah ; ':'
.text:0000000000005AB5                 jmp     quotearg_char_mem
.text:0000000000005AB5 ; } // starts at 5AB0
.text:0000000000005AB5 quotearg_colon_mem endp
.text:0000000000005AB5
.text:0000000000005AB5 ; ---------------------------------------------------------------------------
.text:0000000000005ABA                 align 20h
.text:0000000000005AC0
.text:0000000000005AC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005AC0
.text:0000000000005AC0 ; Attributes: info_from_lumina
.text:0000000000005AC0
.text:0000000000005AC0 ; char *__fastcall quotearg_n_style_colon(int n, quoting_style s, const char *arg)
.text:0000000000005AC0                 public quotearg_n_style_colon
.text:0000000000005AC0 quotearg_n_style_colon proc near
.text:0000000000005AC0
.text:0000000000005AC0 var_48          = dword ptr -48h
.text:0000000000005AC0 var_44          = qword ptr -44h
.text:0000000000005AC0 var_3C          = qword ptr -3Ch
.text:0000000000005AC0 var_34          = qword ptr -34h
.text:0000000000005AC0 var_2C          = qword ptr -2Ch
.text:0000000000005AC0 var_24          = qword ptr -24h
.text:0000000000005AC0 var_1C          = qword ptr -1Ch
.text:0000000000005AC0 var_14          = dword ptr -14h
.text:0000000000005AC0 var_10          = qword ptr -10h
.text:0000000000005AC0
.text:0000000000005AC0 ; __unwind {
.text:0000000000005AC0                 sub     rsp, 48h
.text:0000000000005AC4                 mov     rax, rdx
.text:0000000000005AC7                 mov     rdx, fs:28h
.text:0000000000005AD0                 mov     [rsp+48h+var_10], rdx
.text:0000000000005AD5                 xor     edx, edx
.text:0000000000005AD7                 cmp     esi, 0Ah
.text:0000000000005ADA                 jz      short loc_5B44
.text:0000000000005ADC                 mov     [rsp+48h+var_48], esi
.text:0000000000005ADF                 mov     rcx, rsp
.text:0000000000005AE2                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005AE9                 mov     rsi, rax
.text:0000000000005AEC                 mov     [rsp+48h+var_44], 0
.text:0000000000005AF5                 mov     [rsp+48h+var_3C], 4000000h
.text:0000000000005AFE                 mov     [rsp+48h+var_34], 0
.text:0000000000005B07                 mov     [rsp+48h+var_2C], 0
.text:0000000000005B10                 mov     [rsp+48h+var_24], 0
.text:0000000000005B19                 mov     [rsp+48h+var_1C], 0
.text:0000000000005B22                 mov     [rsp+48h+var_14], 0
.text:0000000000005B2A                 call    quotearg_n_options
.text:0000000000005B2F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000005B34                 xor     rcx, fs:28h
.text:0000000000005B3D                 jnz     short loc_5B49
.text:0000000000005B3F                 add     rsp, 48h
.text:0000000000005B43                 retn
.text:0000000000005B44 ; ---------------------------------------------------------------------------
.text:0000000000005B44
.text:0000000000005B44 loc_5B44:                               ; CODE XREF: quotearg_n_style_colon+1A↑j
.text:0000000000005B44                 call    _abort
.text:0000000000005B49 ; ---------------------------------------------------------------------------
.text:0000000000005B49
.text:0000000000005B49 loc_5B49:                               ; CODE XREF: quotearg_n_style_colon+7D↑j
.text:0000000000005B49                 call    ___stack_chk_fail
.text:0000000000005B49 ; } // starts at 5AC0
.text:0000000000005B49 quotearg_n_style_colon endp
.text:0000000000005B49
.text:0000000000005B49 ; ---------------------------------------------------------------------------
.text:0000000000005B4E                 align 10h
.text:0000000000005B50
.text:0000000000005B50 ; =============== S U B R O U T I N E =======================================
.text:0000000000005B50
.text:0000000000005B50 ; Attributes: info_from_lumina
.text:0000000000005B50
.text:0000000000005B50 ; char *__fastcall quotearg_n_custom_mem(int n, const char *left_quote, const char *right_quote, const char *arg, size_t argsize)
.text:0000000000005B50                 public quotearg_n_custom_mem
.text:0000000000005B50 quotearg_n_custom_mem proc near         ; CODE XREF: quotearg_n_custom+7↓j
.text:0000000000005B50                                         ; quotearg_custom+12↓j ...
.text:0000000000005B50
.text:0000000000005B50 var_48          = xmmword ptr -48h
.text:0000000000005B50 var_38          = xmmword ptr -38h
.text:0000000000005B50 var_28          = xmmword ptr -28h
.text:0000000000005B50 var_18          = qword ptr -18h
.text:0000000000005B50 var_10          = qword ptr -10h
.text:0000000000005B50
.text:0000000000005B50 ; __unwind {
.text:0000000000005B50                 sub     rsp, 48h
.text:0000000000005B54                 mov     r9, rcx
.text:0000000000005B57                 mov     rcx, cs:qword_20A550
.text:0000000000005B5E                 movdqa  xmm0, cs:default_quoting_options
.text:0000000000005B66                 mov     rax, fs:28h
.text:0000000000005B6F                 mov     [rsp+48h+var_10], rax
.text:0000000000005B74                 xor     eax, eax
.text:0000000000005B76                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000005B7A                 test    rsi, rsi
.text:0000000000005B7D                 mov     [rsp+48h+var_18], rcx
.text:0000000000005B82                 mov     dword ptr [rsp+48h+var_48], 0Ah
.text:0000000000005B89                 movdqa  xmm0, cs:xmmword_20A530
.text:0000000000005B91                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000005B96                 movdqa  xmm0, cs:xmmword_20A540
.text:0000000000005B9E                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000005BA3                 jz      short loc_5BD7
.text:0000000000005BA5                 test    rdx, rdx
.text:0000000000005BA8                 jz      short loc_5BD7
.text:0000000000005BAA                 mov     qword ptr [rsp+48h+var_28+8], rsi
.text:0000000000005BAF                 mov     [rsp+48h+var_18], rdx
.text:0000000000005BB4                 mov     rcx, rsp
.text:0000000000005BB7                 mov     rdx, r8
.text:0000000000005BBA                 mov     rsi, r9
.text:0000000000005BBD                 call    quotearg_n_options
.text:0000000000005BC2                 mov     rdi, [rsp+48h+var_10]
.text:0000000000005BC7                 xor     rdi, fs:28h
.text:0000000000005BD0                 jnz     short loc_5BDC
.text:0000000000005BD2                 add     rsp, 48h
.text:0000000000005BD6                 retn
.text:0000000000005BD7 ; ---------------------------------------------------------------------------
.text:0000000000005BD7
.text:0000000000005BD7 loc_5BD7:                               ; CODE XREF: quotearg_n_custom_mem+53↑j
.text:0000000000005BD7                                         ; quotearg_n_custom_mem+58↑j
.text:0000000000005BD7                 call    _abort
.text:0000000000005BDC ; ---------------------------------------------------------------------------
.text:0000000000005BDC
.text:0000000000005BDC loc_5BDC:                               ; CODE XREF: quotearg_n_custom_mem+80↑j
.text:0000000000005BDC                 call    ___stack_chk_fail
.text:0000000000005BDC ; } // starts at 5B50
.text:0000000000005BDC quotearg_n_custom_mem endp
.text:0000000000005BDC
.text:0000000000005BDC ; ---------------------------------------------------------------------------
.text:0000000000005BE1                 align 10h
.text:0000000000005BF0
.text:0000000000005BF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005BF0
.text:0000000000005BF0
.text:0000000000005BF0                 public quotearg_n_custom
.text:0000000000005BF0 quotearg_n_custom proc near
.text:0000000000005BF0 ; __unwind {
.text:0000000000005BF0                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000005BF7                 jmp     quotearg_n_custom_mem
.text:0000000000005BF7 ; } // starts at 5BF0
.text:0000000000005BF7 quotearg_n_custom endp
.text:0000000000005BF7
.text:0000000000005BF7 ; ---------------------------------------------------------------------------
.text:0000000000005BFC                 align 20h
.text:0000000000005C00
.text:0000000000005C00 ; =============== S U B R O U T I N E =======================================
.text:0000000000005C00
.text:0000000000005C00
.text:0000000000005C00                 public quotearg_custom
.text:0000000000005C00 quotearg_custom proc near
.text:0000000000005C00 ; __unwind {
.text:0000000000005C00                 mov     rcx, rdx
.text:0000000000005C03                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000005C0A                 mov     rdx, rsi
.text:0000000000005C0D                 mov     rsi, rdi
.text:0000000000005C10                 xor     edi, edi
.text:0000000000005C12                 jmp     quotearg_n_custom_mem
.text:0000000000005C12 ; } // starts at 5C00
.text:0000000000005C12 quotearg_custom endp
.text:0000000000005C12
.text:0000000000005C12 ; ---------------------------------------------------------------------------
.text:0000000000005C17                 align 20h
.text:0000000000005C20
.text:0000000000005C20 ; =============== S U B R O U T I N E =======================================
.text:0000000000005C20
.text:0000000000005C20
.text:0000000000005C20                 public quotearg_custom_mem
.text:0000000000005C20 quotearg_custom_mem proc near
.text:0000000000005C20 ; __unwind {
.text:0000000000005C20                 mov     r8, rcx
.text:0000000000005C23                 mov     rcx, rdx
.text:0000000000005C26                 mov     rdx, rsi
.text:0000000000005C29                 mov     rsi, rdi
.text:0000000000005C2C                 xor     edi, edi
.text:0000000000005C2E                 jmp     quotearg_n_custom_mem
.text:0000000000005C2E ; } // starts at 5C20
.text:0000000000005C2E quotearg_custom_mem endp
.text:0000000000005C2E
.text:0000000000005C2E ; ---------------------------------------------------------------------------
.text:0000000000005C33                 align 20h
.text:0000000000005C40
.text:0000000000005C40 ; =============== S U B R O U T I N E =======================================
.text:0000000000005C40
.text:0000000000005C40
.text:0000000000005C40                 public quote_n_mem
.text:0000000000005C40 quote_n_mem     proc near
.text:0000000000005C40 ; __unwind {
.text:0000000000005C40                 lea     rcx, quote_quoting_options
.text:0000000000005C47                 jmp     quotearg_n_options
.text:0000000000005C47 ; } // starts at 5C40
.text:0000000000005C47 quote_n_mem     endp
.text:0000000000005C47
.text:0000000000005C47 ; ---------------------------------------------------------------------------
.text:0000000000005C4C                 align 10h
.text:0000000000005C50
.text:0000000000005C50 ; =============== S U B R O U T I N E =======================================
.text:0000000000005C50
.text:0000000000005C50
.text:0000000000005C50                 public quote_mem
.text:0000000000005C50 quote_mem       proc near
.text:0000000000005C50 ; __unwind {
.text:0000000000005C50                 lea     rcx, quote_quoting_options
.text:0000000000005C57                 mov     rdx, rsi
.text:0000000000005C5A                 mov     rsi, rdi
.text:0000000000005C5D                 xor     edi, edi
.text:0000000000005C5F                 jmp     quotearg_n_options
.text:0000000000005C5F ; } // starts at 5C50
.text:0000000000005C5F quote_mem       endp
.text:0000000000005C5F
.text:0000000000005C5F ; ---------------------------------------------------------------------------
.text:0000000000005C64                 align 10h
.text:0000000000005C70
.text:0000000000005C70 ; =============== S U B R O U T I N E =======================================
.text:0000000000005C70
.text:0000000000005C70
.text:0000000000005C70                 public quote_n
.text:0000000000005C70 quote_n         proc near
.text:0000000000005C70 ; __unwind {
.text:0000000000005C70                 lea     rcx, quote_quoting_options
.text:0000000000005C77                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005C7E                 jmp     quotearg_n_options
.text:0000000000005C7E ; } // starts at 5C70
.text:0000000000005C7E quote_n         endp
.text:0000000000005C7E
.text:0000000000005C7E ; ---------------------------------------------------------------------------
.text:0000000000005C83                 align 10h
.text:0000000000005C90
.text:0000000000005C90 ; =============== S U B R O U T I N E =======================================
.text:0000000000005C90
.text:0000000000005C90
.text:0000000000005C90                 public quote
.text:0000000000005C90 quote           proc near               ; CODE XREF: main+53C↑p
.text:0000000000005C90                                         ; main+D25↑p ...
.text:0000000000005C90 ; __unwind {
.text:0000000000005C90                 lea     rcx, quote_quoting_options
.text:0000000000005C97                 mov     rsi, rdi
.text:0000000000005C9A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005CA1                 xor     edi, edi
.text:0000000000005CA3                 jmp     quotearg_n_options
.text:0000000000005CA3 ; } // starts at 5C90
.text:0000000000005CA3 quote           endp
.text:0000000000005CA3
.text:0000000000005CA3 ; ---------------------------------------------------------------------------
.text:0000000000005CA8                 align 10h
.text:0000000000005CB0
.text:0000000000005CB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005CB0
.text:0000000000005CB0
.text:0000000000005CB0 ; __int64 __fastcall version_etc_arn(FILE *stream)
.text:0000000000005CB0                 public version_etc_arn
.text:0000000000005CB0 version_etc_arn proc near               ; CODE XREF: version_etc_ar:loc_60EB↓j
.text:0000000000005CB0                                         ; version_etc_va:loc_613B↓p ...
.text:0000000000005CB0
.text:0000000000005CB0 var_58          = qword ptr -58h
.text:0000000000005CB0 var_50          = qword ptr -50h
.text:0000000000005CB0 var_48          = qword ptr -48h
.text:0000000000005CB0 var_40          = qword ptr -40h
.text:0000000000005CB0
.text:0000000000005CB0 ; __unwind {
.text:0000000000005CB0                 push    r15
.text:0000000000005CB2                 push    r14
.text:0000000000005CB4                 push    r13
.text:0000000000005CB6                 push    r12
.text:0000000000005CB8                 mov     r12, r9
.text:0000000000005CBB                 push    rbp
.text:0000000000005CBC                 push    rbx
.text:0000000000005CBD                 mov     rbp, rdi
.text:0000000000005CC0                 mov     rbx, r8
.text:0000000000005CC3                 sub     rsp, 28h
.text:0000000000005CC7                 test    rsi, rsi
.text:0000000000005CCA                 jz      loc_5DE8
.text:0000000000005CD0                 mov     r8, rdx
.text:0000000000005CD3                 lea     rdx, aSSS       ; "%s (%s) %s\n"
.text:0000000000005CDA                 mov     r9, rcx
.text:0000000000005CDD                 xor     eax, eax
.text:0000000000005CDF                 mov     rcx, rsi
.text:0000000000005CE2                 mov     esi, 1
.text:0000000000005CE7                 call    ___fprintf_chk
.text:0000000000005CEC
.text:0000000000005CEC loc_5CEC:                               ; CODE XREF: version_etc_arn+151↓j
.text:0000000000005CEC                 lea     rsi, aC_0       ; "(C)"
.text:0000000000005CF3                 xor     edi, edi        ; domainname
.text:0000000000005CF5                 mov     edx, 5          ; category
.text:0000000000005CFA                 call    _dcgettext
.text:0000000000005CFF                 lea     rdx, version_etc_copyright ; "Copyright %s %d Free Software Foundatio"...
.text:0000000000005D06                 mov     rcx, rax
.text:0000000000005D09                 mov     r8d, 7E3h
.text:0000000000005D0F                 mov     esi, 1
.text:0000000000005D14                 mov     rdi, rbp
.text:0000000000005D17                 xor     eax, eax
.text:0000000000005D19                 call    ___fprintf_chk
.text:0000000000005D1E                 lea     rsi, aLicenseGplv3Gn ; "\nLicense GPLv3+: GNU GPL version 3 or "...
.text:0000000000005D25                 xor     edi, edi        ; domainname
.text:0000000000005D27                 mov     edx, 5          ; category
.text:0000000000005D2C                 call    _dcgettext
.text:0000000000005D31                 mov     rsi, rbp        ; stream
.text:0000000000005D34                 mov     rdi, rax        ; s
.text:0000000000005D37                 call    _fputs_unlocked
.text:0000000000005D3C                 cmp     r12, 9          ; switch 10 cases
.text:0000000000005D40                 ja      def_5D54        ; jumptable 0000000000005D54 default case
.text:0000000000005D46                 lea     rdx, jpt_5D54
.text:0000000000005D4D                 movsxd  rax, ds:(jpt_5D54 - 7F48h)[rdx+r12*4]
.text:0000000000005D51                 add     rax, rdx
.text:0000000000005D54                 jmp     rax             ; switch jump
.text:0000000000005D54 ; ---------------------------------------------------------------------------
.text:0000000000005D56                 align 20h
.text:0000000000005D60
.text:0000000000005D60 loc_5D60:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005D60                                         ; DATA XREF: .rodata:jpt_5D54↓o
.text:0000000000005D60                 mov     r9, [rbx+38h]   ; jumptable 0000000000005D54 case 8
.text:0000000000005D64                 mov     rax, [rbx+10h]
.text:0000000000005D68                 lea     rsi, aWrittenBySSSSS ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000005D6F                 mov     r8, [rbx+8]
.text:0000000000005D73                 mov     edx, 5          ; category
.text:0000000000005D78                 xor     edi, edi        ; domainname
.text:0000000000005D7A                 mov     r13, [rbx+30h]
.text:0000000000005D7E                 mov     r12, [rbx+28h]
.text:0000000000005D82                 mov     [rsp+58h+var_48], r9
.text:0000000000005D87                 mov     r15, [rbx+20h]
.text:0000000000005D8B                 mov     r14, [rbx+18h]
.text:0000000000005D8F                 mov     [rsp+58h+var_58], rax
.text:0000000000005D93                 mov     [rsp+58h+var_50], r8
.text:0000000000005D98                 mov     rbx, [rbx]
.text:0000000000005D9B                 call    _dcgettext
.text:0000000000005DA0                 sub     rsp, 8
.text:0000000000005DA4
.text:0000000000005DA4 loc_5DA4:                               ; CODE XREF: version_etc_arn+1B0↓j
.text:0000000000005DA4                 mov     r9, [rsp+60h+var_48]
.text:0000000000005DA9                 mov     rdx, rax
.text:0000000000005DAC                 mov     rcx, rbx
.text:0000000000005DAF                 mov     esi, 1
.text:0000000000005DB4                 mov     rdi, rbp
.text:0000000000005DB7                 xor     eax, eax
.text:0000000000005DB9                 push    r9
.text:0000000000005DBB                 push    r13
.text:0000000000005DBD                 push    r12
.text:0000000000005DBF                 push    r15
.text:0000000000005DC1                 push    r14
.text:0000000000005DC3                 mov     r9, [rsp+88h+var_58]
.text:0000000000005DC8                 mov     r8, [rsp+88h+var_50]
.text:0000000000005DCD                 call    ___fprintf_chk
.text:0000000000005DD2                 add     rsp, 30h
.text:0000000000005DD6
.text:0000000000005DD6 loc_5DD6:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005DD6                                         ; DATA XREF: .rodata:jpt_5D54↓o
.text:0000000000005DD6                 add     rsp, 28h        ; jumptable 0000000000005D54 case 0
.text:0000000000005DDA                 pop     rbx
.text:0000000000005DDB                 pop     rbp
.text:0000000000005DDC                 pop     r12
.text:0000000000005DDE                 pop     r13
.text:0000000000005DE0                 pop     r14
.text:0000000000005DE2                 pop     r15
.text:0000000000005DE4                 retn
.text:0000000000005DE4 ; ---------------------------------------------------------------------------
.text:0000000000005DE5                 align 8
.text:0000000000005DE8
.text:0000000000005DE8 loc_5DE8:                               ; CODE XREF: version_etc_arn+1A↑j
.text:0000000000005DE8                 mov     r8, rcx
.text:0000000000005DEB                 mov     rcx, rdx
.text:0000000000005DEE                 lea     rdx, aSS_0      ; "%s %s\n"
.text:0000000000005DF5                 mov     esi, 1
.text:0000000000005DFA                 xor     eax, eax
.text:0000000000005DFC                 call    ___fprintf_chk
.text:0000000000005E01                 jmp     loc_5CEC
.text:0000000000005E01 ; ---------------------------------------------------------------------------
.text:0000000000005E06                 align 10h
.text:0000000000005E10
.text:0000000000005E10 loc_5E10:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005E10                                         ; DATA XREF: .rodata:jpt_5D54↓o
.text:0000000000005E10                 mov     r10, [rbx+40h]  ; jumptable 0000000000005D54 case 9
.text:0000000000005E14                 mov     r9, [rbx+38h]
.text:0000000000005E18                 lea     rsi, aWrittenBySSSSS_0 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000005E1F                 mov     rax, [rbx+10h]
.text:0000000000005E23                 mov     r8, [rbx+8]
.text:0000000000005E27                 mov     edx, 5          ; category
.text:0000000000005E2C                 mov     r13, [rbx+30h]
.text:0000000000005E30                 mov     r12, [rbx+28h]
.text:0000000000005E34                 mov     r15, [rbx+20h]
.text:0000000000005E38                 mov     r14, [rbx+18h]
.text:0000000000005E3C                 mov     rbx, [rbx]
.text:0000000000005E3F                 mov     [rsp+58h+var_40], r10
.text:0000000000005E44                 mov     [rsp+58h+var_48], r9
.text:0000000000005E49                 mov     [rsp+58h+var_58], rax
.text:0000000000005E4D                 mov     [rsp+58h+var_50], r8
.text:0000000000005E52
.text:0000000000005E52 loc_5E52:                               ; CODE XREF: version_etc_arn+412↓j
.text:0000000000005E52                 xor     edi, edi        ; domainname
.text:0000000000005E54                 call    _dcgettext
.text:0000000000005E59                 mov     r10, [rsp+58h+var_40]
.text:0000000000005E5E                 push    r10
.text:0000000000005E60                 jmp     loc_5DA4
.text:0000000000005E60 ; ---------------------------------------------------------------------------
.text:0000000000005E65                 align 8
.text:0000000000005E68
.text:0000000000005E68 loc_5E68:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005E68                                         ; DATA XREF: .rodata:jpt_5D54↓o
.text:0000000000005E68                 mov     rbx, [rbx]      ; jumptable 0000000000005D54 case 1
.text:0000000000005E6B                 lea     rsi, aWrittenByS ; "Written by %s.\n"
.text:0000000000005E72                 mov     edx, 5          ; category
.text:0000000000005E77                 xor     edi, edi        ; domainname
.text:0000000000005E79                 call    _dcgettext
.text:0000000000005E7E                 add     rsp, 28h
.text:0000000000005E82                 mov     rcx, rbx
.text:0000000000005E85                 mov     rdi, rbp
.text:0000000000005E88                 pop     rbx
.text:0000000000005E89                 pop     rbp
.text:0000000000005E8A                 pop     r12
.text:0000000000005E8C                 pop     r13
.text:0000000000005E8E                 pop     r14
.text:0000000000005E90                 pop     r15
.text:0000000000005E92                 mov     rdx, rax
.text:0000000000005E95                 mov     esi, 1
.text:0000000000005E9A                 xor     eax, eax
.text:0000000000005E9C                 jmp     ___fprintf_chk
.text:0000000000005E9C ; ---------------------------------------------------------------------------
.text:0000000000005EA1                 align 8
.text:0000000000005EA8
.text:0000000000005EA8 loc_5EA8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005EA8                                         ; DATA XREF: .rodata:jpt_5D54↓o
.text:0000000000005EA8                 mov     r12, [rbx+8]    ; jumptable 0000000000005D54 case 2
.text:0000000000005EAC                 lea     rsi, aWrittenBySAndS ; "Written by %s and %s.\n"
.text:0000000000005EB3                 mov     rbx, [rbx]
.text:0000000000005EB6                 mov     edx, 5          ; category
.text:0000000000005EBB                 xor     edi, edi        ; domainname
.text:0000000000005EBD                 call    _dcgettext
.text:0000000000005EC2                 add     rsp, 28h
.text:0000000000005EC6                 mov     r8, r12
.text:0000000000005EC9                 mov     rcx, rbx
.text:0000000000005ECC                 mov     rdi, rbp
.text:0000000000005ECF                 mov     rdx, rax
.text:0000000000005ED2                 mov     esi, 1
.text:0000000000005ED7                 pop     rbx
.text:0000000000005ED8                 pop     rbp
.text:0000000000005ED9                 pop     r12
.text:0000000000005EDB                 pop     r13
.text:0000000000005EDD                 pop     r14
.text:0000000000005EDF                 pop     r15
.text:0000000000005EE1                 xor     eax, eax
.text:0000000000005EE3                 jmp     ___fprintf_chk
.text:0000000000005EE3 ; ---------------------------------------------------------------------------
.text:0000000000005EE8                 align 10h
.text:0000000000005EF0
.text:0000000000005EF0 loc_5EF0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005EF0                                         ; DATA XREF: .rodata:jpt_5D54↓o
.text:0000000000005EF0                 mov     r13, [rbx+10h]  ; jumptable 0000000000005D54 case 3
.text:0000000000005EF4                 mov     r12, [rbx+8]
.text:0000000000005EF8                 lea     rsi, aWrittenBySSAnd ; "Written by %s, %s, and %s.\n"
.text:0000000000005EFF                 mov     rbx, [rbx]
.text:0000000000005F02                 mov     edx, 5          ; category
.text:0000000000005F07                 xor     edi, edi        ; domainname
.text:0000000000005F09                 call    _dcgettext
.text:0000000000005F0E                 add     rsp, 28h
.text:0000000000005F12                 mov     r9, r13
.text:0000000000005F15                 mov     r8, r12
.text:0000000000005F18                 mov     rcx, rbx
.text:0000000000005F1B                 mov     rdi, rbp
.text:0000000000005F1E                 mov     rdx, rax
.text:0000000000005F21                 pop     rbx
.text:0000000000005F22                 pop     rbp
.text:0000000000005F23                 pop     r12
.text:0000000000005F25                 pop     r13
.text:0000000000005F27                 pop     r14
.text:0000000000005F29                 pop     r15
.text:0000000000005F2B                 mov     esi, 1
.text:0000000000005F30                 xor     eax, eax
.text:0000000000005F32                 jmp     ___fprintf_chk
.text:0000000000005F32 ; ---------------------------------------------------------------------------
.text:0000000000005F37                 align 20h
.text:0000000000005F40
.text:0000000000005F40 loc_5F40:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005F40                                         ; DATA XREF: .rodata:jpt_5D54↓o
.text:0000000000005F40                 lea     rsi, aWrittenBySSSAn ; jumptable 0000000000005D54 case 4
.text:0000000000005F47                 mov     edx, 5          ; category
.text:0000000000005F4C                 xor     edi, edi        ; domainname
.text:0000000000005F4E                 mov     r14, [rbx+18h]
.text:0000000000005F52                 mov     r13, [rbx+10h]
.text:0000000000005F56                 mov     r12, [rbx+8]
.text:0000000000005F5A                 mov     rbx, [rbx]
.text:0000000000005F5D                 call    _dcgettext
.text:0000000000005F62                 sub     rsp, 8
.text:0000000000005F66
.text:0000000000005F66 loc_5F66:                               ; CODE XREF: version_etc_arn+310↓j
.text:0000000000005F66                 push    r14
.text:0000000000005F68                 mov     rdx, rax
.text:0000000000005F6B                 mov     r9, r13
.text:0000000000005F6E                 mov     r8, r12
.text:0000000000005F71                 mov     rcx, rbx
.text:0000000000005F74                 mov     rdi, rbp
.text:0000000000005F77                 mov     esi, 1
.text:0000000000005F7C                 xor     eax, eax
.text:0000000000005F7E                 call    ___fprintf_chk
.text:0000000000005F83                 pop     rax
.text:0000000000005F84                 pop     rdx
.text:0000000000005F85                 add     rsp, 28h
.text:0000000000005F89                 pop     rbx
.text:0000000000005F8A                 pop     rbp
.text:0000000000005F8B                 pop     r12
.text:0000000000005F8D                 pop     r13
.text:0000000000005F8F                 pop     r14
.text:0000000000005F91                 pop     r15
.text:0000000000005F93                 retn
.text:0000000000005F93 ; ---------------------------------------------------------------------------
.text:0000000000005F94                 align 8
.text:0000000000005F98
.text:0000000000005F98 loc_5F98:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005F98                                         ; DATA XREF: .rodata:jpt_5D54↓o
.text:0000000000005F98                 mov     r15, [rbx+20h]  ; jumptable 0000000000005D54 case 5
.text:0000000000005F9C                 lea     rsi, aWrittenBySSSSA ; "Written by %s, %s, %s,\n%s, and %s.\n"
.text:0000000000005FA3                 mov     edx, 5          ; category
.text:0000000000005FA8                 xor     edi, edi        ; domainname
.text:0000000000005FAA                 mov     r14, [rbx+18h]
.text:0000000000005FAE                 mov     r13, [rbx+10h]
.text:0000000000005FB2                 mov     r12, [rbx+8]
.text:0000000000005FB6                 mov     rbx, [rbx]
.text:0000000000005FB9                 call    _dcgettext
.text:0000000000005FBE                 push    r15
.text:0000000000005FC0                 jmp     short loc_5F66
.text:0000000000005FC0 ; ---------------------------------------------------------------------------
.text:0000000000005FC2                 align 8
.text:0000000000005FC8
.text:0000000000005FC8 loc_5FC8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005FC8                                         ; DATA XREF: .rodata:jpt_5D54↓o
.text:0000000000005FC8                 mov     r8, [rbx+8]     ; jumptable 0000000000005D54 case 6
.text:0000000000005FCC                 mov     r12, [rbx+28h]
.text:0000000000005FD0                 lea     rsi, aWrittenBySSSSS_1 ; "Written by %s, %s, %s,\n%s, %s, and %s."...
.text:0000000000005FD7                 mov     r15, [rbx+20h]
.text:0000000000005FDB                 mov     r14, [rbx+18h]
.text:0000000000005FDF                 mov     edx, 5          ; category
.text:0000000000005FE4                 mov     r13, [rbx+10h]
.text:0000000000005FE8                 xor     edi, edi        ; domainname
.text:0000000000005FEA                 mov     rbx, [rbx]
.text:0000000000005FED                 mov     [rsp+58h+var_58], r8
.text:0000000000005FF1                 call    _dcgettext
.text:0000000000005FF6                 sub     rsp, 8
.text:0000000000005FFA                 mov     r9, r13
.text:0000000000005FFD                 push    r12
.text:0000000000005FFF                 push    r15
.text:0000000000006001                 push    r14
.text:0000000000006003
.text:0000000000006003 loc_6003:                               ; CODE XREF: version_etc_arn+3C4↓j
.text:0000000000006003                 mov     r8, [rsp+78h+var_58]
.text:0000000000006008                 mov     rcx, rbx
.text:000000000000600B                 mov     rdx, rax
.text:000000000000600E                 mov     rdi, rbp
.text:0000000000006011                 mov     esi, 1
.text:0000000000006016                 xor     eax, eax
.text:0000000000006018                 call    ___fprintf_chk
.text:000000000000601D                 add     rsp, 20h
.text:0000000000006021                 add     rsp, 28h
.text:0000000000006025                 pop     rbx
.text:0000000000006026                 pop     rbp
.text:0000000000006027                 pop     r12
.text:0000000000006029                 pop     r13
.text:000000000000602B                 pop     r14
.text:000000000000602D                 pop     r15
.text:000000000000602F                 retn
.text:0000000000006030 ; ---------------------------------------------------------------------------
.text:0000000000006030
.text:0000000000006030 loc_6030:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000006030                                         ; DATA XREF: .rodata:jpt_5D54↓o
.text:0000000000006030                 mov     r9, [rbx+10h]   ; jumptable 0000000000005D54 case 7
.text:0000000000006034                 mov     r13, [rbx+30h]
.text:0000000000006038                 lea     rsi, aWrittenBySSSSS_2 ; "Written by %s, %s, %s,\n%s, %s, %s, and"...
.text:000000000000603F                 mov     r12, [rbx+28h]
.text:0000000000006043                 mov     r15, [rbx+20h]
.text:0000000000006047                 mov     edx, 5          ; category
.text:000000000000604C                 mov     r14, [rbx+18h]
.text:0000000000006050                 mov     r8, [rbx+8]
.text:0000000000006054                 xor     edi, edi        ; domainname
.text:0000000000006056                 mov     [rsp+58h+var_50], r9
.text:000000000000605B                 mov     rbx, [rbx]
.text:000000000000605E                 mov     [rsp+58h+var_58], r8
.text:0000000000006062                 call    _dcgettext
.text:0000000000006067                 push    r13
.text:0000000000006069                 push    r12
.text:000000000000606B                 push    r15
.text:000000000000606D                 push    r14
.text:000000000000606F                 mov     r9, [rsp+78h+var_50]
.text:0000000000006074                 jmp     short loc_6003
.text:0000000000006074 ; ---------------------------------------------------------------------------
.text:0000000000006076                 align 20h
.text:0000000000006080
.text:0000000000006080 def_5D54:                               ; CODE XREF: version_etc_arn+90↑j
.text:0000000000006080                 mov     r10, [rbx+40h]  ; jumptable 0000000000005D54 default case
.text:0000000000006084                 mov     r9, [rbx+38h]
.text:0000000000006088                 mov     edx, 5
.text:000000000000608D                 mov     rax, [rbx+10h]
.text:0000000000006091                 mov     r8, [rbx+8]
.text:0000000000006095                 lea     rsi, aWrittenBySSSSS_3 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000609C                 mov     r13, [rbx+30h]
.text:00000000000060A0                 mov     r12, [rbx+28h]
.text:00000000000060A4                 mov     r15, [rbx+20h]
.text:00000000000060A8                 mov     r14, [rbx+18h]
.text:00000000000060AC                 mov     [rsp+58h+var_40], r10
.text:00000000000060B1                 mov     [rsp+58h+var_48], r9
.text:00000000000060B6                 mov     [rsp+58h+var_58], rax
.text:00000000000060BA                 mov     [rsp+58h+var_50], r8
.text:00000000000060BF                 mov     rbx, [rbx]
.text:00000000000060C2                 jmp     loc_5E52
.text:00000000000060C2 ; } // starts at 5CB0
.text:00000000000060C2 version_etc_arn endp
.text:00000000000060C2
.text:00000000000060C2 ; ---------------------------------------------------------------------------
.text:00000000000060C7                 align 10h
.text:00000000000060D0
.text:00000000000060D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000060D0
.text:00000000000060D0 ; Attributes: info_from_lumina
.text:00000000000060D0
.text:00000000000060D0 ; void __fastcall version_etc_ar(FILE *stream, const char *command_name, const char *package, const char *version, const char *const *authors)
.text:00000000000060D0                 public version_etc_ar
.text:00000000000060D0 version_etc_ar  proc near
.text:00000000000060D0 ; __unwind {
.text:00000000000060D0                 xor     r9d, r9d
.text:00000000000060D3                 cmp     qword ptr [r8], 0
.text:00000000000060D7                 jz      short loc_60EB
.text:00000000000060D9                 nop     dword ptr [rax+00000000h]
.text:00000000000060E0
.text:00000000000060E0 loc_60E0:                               ; CODE XREF: version_etc_ar+19↓j
.text:00000000000060E0                 add     r9, 1
.text:00000000000060E4                 cmp     qword ptr [r8+r9*8], 0
.text:00000000000060E9                 jnz     short loc_60E0
.text:00000000000060EB
.text:00000000000060EB loc_60EB:                               ; CODE XREF: version_etc_ar+7↑j
.text:00000000000060EB                 jmp     version_etc_arn
.text:00000000000060EB ; } // starts at 60D0
.text:00000000000060EB version_etc_ar  endp
.text:00000000000060EB
.text:00000000000060F0
.text:00000000000060F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000060F0
.text:00000000000060F0 ; Attributes: info_from_lumina
.text:00000000000060F0
.text:00000000000060F0 ; void __fastcall version_etc_va(FILE *stream, const char *command_name, const char *package, const char *version, __va_list_tag *authors)
.text:00000000000060F0                 public version_etc_va
.text:00000000000060F0 version_etc_va  proc near
.text:00000000000060F0
.text:00000000000060F0 authtab         = qword ptr -68h
.text:00000000000060F0 var_10          = qword ptr -10h
.text:00000000000060F0
.text:00000000000060F0 ; __unwind {
.text:00000000000060F0                 sub     rsp, 68h
.text:00000000000060F4                 mov     r10, r8
.text:00000000000060F7                 xor     r9d, r9d
.text:00000000000060FA                 mov     rax, fs:28h
.text:0000000000006103                 mov     [rsp+68h+var_10], rax
.text:0000000000006108                 xor     eax, eax
.text:000000000000610A                 mov     r8, rsp
.text:000000000000610D                 nop     dword ptr [rax]
.text:0000000000006110
.text:0000000000006110 loc_6110:                               ; CODE XREF: version_etc_va+49↓j
.text:0000000000006110                 mov     eax, [r10]
.text:0000000000006113                 cmp     eax, 2Fh ; '/'
.text:0000000000006116                 ja      short loc_615A
.text:0000000000006118                 mov     r11d, eax
.text:000000000000611B                 add     r11, [r10+10h]
.text:000000000000611F                 add     eax, 8
.text:0000000000006122                 mov     [r10], eax
.text:0000000000006125
.text:0000000000006125 loc_6125:                               ; CODE XREF: version_etc_va+76↓j
.text:0000000000006125                 mov     rax, [r11]
.text:0000000000006128                 test    rax, rax
.text:000000000000612B                 mov     [r8+r9*8], rax
.text:000000000000612F                 jz      short loc_613B
.text:0000000000006131                 add     r9, 1
.text:0000000000006135                 cmp     r9, 0Ah
.text:0000000000006139                 jnz     short loc_6110
.text:000000000000613B
.text:000000000000613B loc_613B:                               ; CODE XREF: version_etc_va+3F↑j
.text:000000000000613B                 call    version_etc_arn
.text:0000000000006140                 mov     rax, [rsp+68h+var_10]
.text:0000000000006145                 xor     rax, fs:28h
.text:000000000000614E                 jnz     short loc_6155
.text:0000000000006150                 add     rsp, 68h
.text:0000000000006154                 retn
.text:0000000000006155 ; ---------------------------------------------------------------------------
.text:0000000000006155
.text:0000000000006155 loc_6155:                               ; CODE XREF: version_etc_va+5E↑j
.text:0000000000006155                 call    ___stack_chk_fail
.text:000000000000615A ; ---------------------------------------------------------------------------
.text:000000000000615A
.text:000000000000615A loc_615A:                               ; CODE XREF: version_etc_va+26↑j
.text:000000000000615A                 mov     r11, [r10+8]
.text:000000000000615E                 lea     rax, [r11+8]
.text:0000000000006162                 mov     [r10+8], rax
.text:0000000000006166                 jmp     short loc_6125
.text:0000000000006166 ; } // starts at 60F0
.text:0000000000006166 version_etc_va  endp
.text:0000000000006166
.text:0000000000006166 ; ---------------------------------------------------------------------------
.text:0000000000006168                 align 10h
.text:0000000000006170
.text:0000000000006170 ; =============== S U B R O U T I N E =======================================
.text:0000000000006170
.text:0000000000006170 ; Attributes: info_from_lumina
.text:0000000000006170
.text:0000000000006170 ; void version_etc(FILE *stream, const char *command_name, const char *package, const char *version, ...)
.text:0000000000006170                 public version_etc
.text:0000000000006170 version_etc     proc near               ; CODE XREF: main+3D1↑p
.text:0000000000006170
.text:0000000000006170 var_C0          = dword ptr -0C0h
.text:0000000000006170 var_B8          = qword ptr -0B8h
.text:0000000000006170 var_B0          = qword ptr -0B0h
.text:0000000000006170 var_A8          = byte ptr -0A8h
.text:0000000000006170 var_50          = qword ptr -50h
.text:0000000000006170 var_48          = byte ptr -48h
.text:0000000000006170 var_28          = qword ptr -28h
.text:0000000000006170 var_20          = qword ptr -20h
.text:0000000000006170 arg_0           = byte ptr  8
.text:0000000000006170
.text:0000000000006170 ; __unwind {
.text:0000000000006170                 push    rbp
.text:0000000000006171                 push    rbx
.text:0000000000006172                 mov     r10d, 20h ; ' '
.text:0000000000006178                 xor     r11d, r11d
.text:000000000000617B                 sub     rsp, 0B8h
.text:0000000000006182                 mov     rax, fs:28h
.text:000000000000618B                 mov     [rsp+0C8h+var_50], rax
.text:0000000000006190                 xor     eax, eax
.text:0000000000006192                 lea     rax, [rsp+0C8h+arg_0]
.text:000000000000619A                 mov     [rsp+0C8h+var_28], r8
.text:00000000000061A2                 lea     rbx, [rsp+0C8h+arg_0]
.text:00000000000061AA                 lea     r8, [rsp+0C8h+var_A8]
.text:00000000000061AF                 mov     [rsp+0C8h+var_20], r9
.text:00000000000061B7                 mov     [rsp+0C8h+var_C0], 20h ; ' '
.text:00000000000061BF                 mov     [rsp+0C8h+var_B8], rax
.text:00000000000061C4                 lea     rax, [rsp+0C8h+var_48]
.text:00000000000061CC                 xor     r9d, r9d
.text:00000000000061CF                 mov     [rsp+0C8h+var_B0], rax
.text:00000000000061D4                 mov     rbp, rax
.text:00000000000061D7                 nop     word ptr [rax+rax+00000000h]
.text:00000000000061E0
.text:00000000000061E0 loc_61E0:                               ; CODE XREF: version_etc+9A↓j
.text:00000000000061E0                 cmp     r10d, 2Fh ; '/'
.text:00000000000061E4                 ja      short loc_623C
.text:00000000000061E6                 mov     eax, r10d
.text:00000000000061E9                 mov     r11d, 1
.text:00000000000061EF                 add     r10d, 8
.text:00000000000061F3                 add     rax, rbp
.text:00000000000061F6
.text:00000000000061F6 loc_61F6:                               ; CODE XREF: version_etc+D3↓j
.text:00000000000061F6                 mov     rax, [rax]
.text:00000000000061F9                 test    rax, rax
.text:00000000000061FC                 mov     [r8+r9*8], rax
.text:0000000000006200                 jz      short loc_620C
.text:0000000000006202                 add     r9, 1
.text:0000000000006206                 cmp     r9, 0Ah
.text:000000000000620A                 jnz     short loc_61E0
.text:000000000000620C
.text:000000000000620C loc_620C:                               ; CODE XREF: version_etc+90↑j
.text:000000000000620C                 test    r11b, r11b
.text:000000000000620F                 jnz     short loc_6235
.text:0000000000006211
.text:0000000000006211 loc_6211:                               ; CODE XREF: version_etc+CA↓j
.text:0000000000006211                 call    version_etc_arn
.text:0000000000006216                 mov     rax, [rsp+0C8h+var_50]
.text:000000000000621B                 xor     rax, fs:28h
.text:0000000000006224                 jnz     short loc_6230
.text:0000000000006226                 add     rsp, 0B8h
.text:000000000000622D                 pop     rbx
.text:000000000000622E                 pop     rbp
.text:000000000000622F                 retn
.text:0000000000006230 ; ---------------------------------------------------------------------------
.text:0000000000006230
.text:0000000000006230 loc_6230:                               ; CODE XREF: version_etc+B4↑j
.text:0000000000006230                 call    ___stack_chk_fail
.text:0000000000006235 ; ---------------------------------------------------------------------------
.text:0000000000006235
.text:0000000000006235 loc_6235:                               ; CODE XREF: version_etc+9F↑j
.text:0000000000006235                 mov     [rsp+0C8h+var_C0], r10d
.text:000000000000623A                 jmp     short loc_6211
.text:000000000000623C ; ---------------------------------------------------------------------------
.text:000000000000623C
.text:000000000000623C loc_623C:                               ; CODE XREF: version_etc+74↑j
.text:000000000000623C                 mov     rax, rbx
.text:000000000000623F                 add     rbx, 8
.text:0000000000006243                 jmp     short loc_61F6
.text:0000000000006243 ; } // starts at 6170
.text:0000000000006243 version_etc     endp
.text:0000000000006243
.text:0000000000006243 ; ---------------------------------------------------------------------------
.text:0000000000006245                 align 10h
.text:0000000000006250
.text:0000000000006250 ; =============== S U B R O U T I N E =======================================
.text:0000000000006250
.text:0000000000006250 ; Attributes: info_from_lumina
.text:0000000000006250
.text:0000000000006250 ; void __cdecl emit_bug_reporting_address()
.text:0000000000006250                 public emit_bug_reporting_address
.text:0000000000006250 emit_bug_reporting_address proc near
.text:0000000000006250 ; __unwind {
.text:0000000000006250                 push    rbx
.text:0000000000006251                 lea     rsi, aReportBugsToS ; "\nReport bugs to: %s\n"
.text:0000000000006258                 mov     edx, 5          ; category
.text:000000000000625D                 xor     edi, edi        ; domainname
.text:000000000000625F                 call    _dcgettext
.text:0000000000006264                 lea     rdx, aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:000000000000626B                 mov     rsi, rax
.text:000000000000626E                 mov     edi, 1
.text:0000000000006273                 xor     eax, eax
.text:0000000000006275                 call    ___printf_chk
.text:000000000000627A                 lea     rsi, aSHomePageS ; "%s home page: <%s>\n"
.text:0000000000006281                 mov     edx, 5          ; category
.text:0000000000006286                 xor     edi, edi        ; domainname
.text:0000000000006288                 call    _dcgettext
.text:000000000000628D                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000006294                 lea     rdx, unk_6C0B
.text:000000000000629B                 mov     rsi, rax
.text:000000000000629E                 mov     edi, 1
.text:00000000000062A3                 xor     eax, eax
.text:00000000000062A5                 call    ___printf_chk
.text:00000000000062AA                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000062B1                 lea     rsi, aGeneralHelpUsi ; "General help using GNU software: <https"...
.text:00000000000062B8                 xor     edi, edi        ; domainname
.text:00000000000062BA                 mov     edx, 5          ; category
.text:00000000000062BF                 call    _dcgettext
.text:00000000000062C4                 mov     rsi, rbx        ; stream
.text:00000000000062C7                 mov     rdi, rax        ; s
.text:00000000000062CA                 pop     rbx
.text:00000000000062CB                 jmp     _fputs_unlocked
.text:00000000000062CB ; } // starts at 6250
.text:00000000000062CB emit_bug_reporting_address endp
.text:00000000000062CB
.text:00000000000062D0
.text:00000000000062D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000062D0
.text:00000000000062D0
.text:00000000000062D0                 public xmalloc
.text:00000000000062D0 xmalloc         proc near               ; CODE XREF: main+7E↑p
.text:00000000000062D0                                         ; main+468↑p ...
.text:00000000000062D0 ; __unwind {
.text:00000000000062D0                 push    rbx
.text:00000000000062D1                 mov     rbx, rdi
.text:00000000000062D4                 call    _malloc
.text:00000000000062D9                 test    rax, rax
.text:00000000000062DC                 jnz     short loc_62E3
.text:00000000000062DE                 test    rbx, rbx
.text:00000000000062E1                 jnz     short loc_62E5
.text:00000000000062E3
.text:00000000000062E3 loc_62E3:                               ; CODE XREF: xmalloc+C↑j
.text:00000000000062E3                 pop     rbx
.text:00000000000062E4                 retn
.text:00000000000062E5 ; ---------------------------------------------------------------------------
.text:00000000000062E5
.text:00000000000062E5 loc_62E5:                               ; CODE XREF: xmalloc+11↑j
.text:00000000000062E5                 call    xalloc_die
.text:00000000000062E5 ; } // starts at 62D0
.text:00000000000062E5 xmalloc         endp
.text:00000000000062E5
.text:00000000000062E5 ; ---------------------------------------------------------------------------
.text:00000000000062EA                 align 10h
.text:00000000000062F0
.text:00000000000062F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000062F0
.text:00000000000062F0 ; Attributes: info_from_lumina
.text:00000000000062F0
.text:00000000000062F0 ; void *__fastcall xnmalloc(size_t n, size_t s)
.text:00000000000062F0                 public xnmalloc
.text:00000000000062F0 xnmalloc        proc near
.text:00000000000062F0 ; __unwind {
.text:00000000000062F0                 mov     rax, rdi
.text:00000000000062F3                 mul     rsi
.text:00000000000062F6                 mov     rdi, rax
.text:00000000000062F9                 seto    al
.text:00000000000062FC                 test    rdi, rdi
.text:00000000000062FF                 js      short loc_630B
.text:0000000000006301                 movzx   eax, al
.text:0000000000006304                 test    rax, rax
.text:0000000000006307                 jnz     short loc_630B
.text:0000000000006309                 jmp     short xmalloc
.text:000000000000630B ; ---------------------------------------------------------------------------
.text:000000000000630B
.text:000000000000630B loc_630B:                               ; CODE XREF: xnmalloc+F↑j
.text:000000000000630B                                         ; xnmalloc+17↑j
.text:000000000000630B                 sub     rsp, 8
.text:000000000000630F                 call    xalloc_die
.text:000000000000630F ; } // starts at 62F0
.text:000000000000630F xnmalloc        endp
.text:000000000000630F
.text:000000000000630F ; ---------------------------------------------------------------------------
.text:0000000000006314                 align 20h
.text:0000000000006320
.text:0000000000006320 ; =============== S U B R O U T I N E =======================================
.text:0000000000006320
.text:0000000000006320
.text:0000000000006320                 public xcharalloc
.text:0000000000006320 xcharalloc      proc near
.text:0000000000006320 ; __unwind {
.text:0000000000006320                 jmp     short xmalloc
.text:0000000000006320 ; } // starts at 6320
.text:0000000000006320 xcharalloc      endp
.text:0000000000006320
.text:0000000000006320 ; ---------------------------------------------------------------------------
.text:0000000000006322                 align 10h
.text:0000000000006330
.text:0000000000006330 ; =============== S U B R O U T I N E =======================================
.text:0000000000006330
.text:0000000000006330 ; Attributes: info_from_lumina
.text:0000000000006330
.text:0000000000006330 ; void *__fastcall xrealloc(void *p, size_t n)
.text:0000000000006330                 public xrealloc
.text:0000000000006330 xrealloc        proc near               ; CODE XREF: main+AA7↑p
.text:0000000000006330                                         ; extract_varname+F3↑p ...
.text:0000000000006330 ; __unwind {
.text:0000000000006330                 test    rsi, rsi
.text:0000000000006333                 push    rbx
.text:0000000000006334                 mov     rbx, rsi
.text:0000000000006337                 jnz     short loc_633E
.text:0000000000006339                 test    rdi, rdi
.text:000000000000633C                 jnz     short loc_6358
.text:000000000000633E
.text:000000000000633E loc_633E:                               ; CODE XREF: xrealloc+7↑j
.text:000000000000633E                 mov     rsi, rbx        ; size
.text:0000000000006341                 call    _realloc
.text:0000000000006346                 test    rax, rax
.text:0000000000006349                 jnz     short loc_6350
.text:000000000000634B                 test    rbx, rbx
.text:000000000000634E                 jnz     short loc_6361
.text:0000000000006350
.text:0000000000006350 loc_6350:                               ; CODE XREF: xrealloc+19↑j
.text:0000000000006350                 pop     rbx
.text:0000000000006351                 retn
.text:0000000000006351 ; ---------------------------------------------------------------------------
.text:0000000000006352                 align 8
.text:0000000000006358
.text:0000000000006358 loc_6358:                               ; CODE XREF: xrealloc+C↑j
.text:0000000000006358                 call    _free
.text:000000000000635D                 xor     eax, eax
.text:000000000000635F                 pop     rbx
.text:0000000000006360                 retn
.text:0000000000006361 ; ---------------------------------------------------------------------------
.text:0000000000006361
.text:0000000000006361 loc_6361:                               ; CODE XREF: xrealloc+1E↑j
.text:0000000000006361                 call    xalloc_die
.text:0000000000006361 ; } // starts at 6330
.text:0000000000006361 xrealloc        endp
.text:0000000000006361
.text:0000000000006361 ; ---------------------------------------------------------------------------
.text:0000000000006366                 align 10h
.text:0000000000006370
.text:0000000000006370 ; =============== S U B R O U T I N E =======================================
.text:0000000000006370
.text:0000000000006370 ; Attributes: info_from_lumina
.text:0000000000006370
.text:0000000000006370 ; void *__fastcall xnrealloc(void *p, size_t n, size_t s)
.text:0000000000006370                 public xnrealloc
.text:0000000000006370 xnrealloc       proc near
.text:0000000000006370 ; __unwind {
.text:0000000000006370                 mov     rax, rsi
.text:0000000000006373                 mul     rdx
.text:0000000000006376                 mov     rsi, rax
.text:0000000000006379                 seto    al
.text:000000000000637C                 test    rsi, rsi
.text:000000000000637F                 js      short loc_638B
.text:0000000000006381                 movzx   eax, al
.text:0000000000006384                 test    rax, rax
.text:0000000000006387                 jnz     short loc_638B
.text:0000000000006389                 jmp     short xrealloc
.text:000000000000638B ; ---------------------------------------------------------------------------
.text:000000000000638B
.text:000000000000638B loc_638B:                               ; CODE XREF: xnrealloc+F↑j
.text:000000000000638B                                         ; xnrealloc+17↑j
.text:000000000000638B                 sub     rsp, 8
.text:000000000000638F                 call    xalloc_die
.text:000000000000638F ; } // starts at 6370
.text:000000000000638F xnrealloc       endp
.text:000000000000638F
.text:000000000000638F ; ---------------------------------------------------------------------------
.text:0000000000006394                 align 20h
.text:00000000000063A0
.text:00000000000063A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000063A0
.text:00000000000063A0 ; Attributes: info_from_lumina
.text:00000000000063A0
.text:00000000000063A0 ; void *__fastcall x2nrealloc(void *p, size_t *pn, size_t s)
.text:00000000000063A0                 public x2nrealloc
.text:00000000000063A0 x2nrealloc      proc near
.text:00000000000063A0 ; __unwind {
.text:00000000000063A0                 test    rdi, rdi
.text:00000000000063A3                 mov     r9, rdx
.text:00000000000063A6                 mov     rcx, [rsi]
.text:00000000000063A9                 jz      short loc_63E0
.text:00000000000063AB                 xor     edx, edx
.text:00000000000063AD                 mov     rax, 5555555555555554h
.text:00000000000063B7                 div     r9
.text:00000000000063BA                 cmp     rax, rcx
.text:00000000000063BD                 jbe     short loc_63FB
.text:00000000000063BF                 mov     rax, rcx
.text:00000000000063C2                 shr     rax, 1
.text:00000000000063C5                 lea     rcx, [rax+rcx+1]
.text:00000000000063CA
.text:00000000000063CA loc_63CA:                               ; CODE XREF: x2nrealloc+59↓j
.text:00000000000063CA                 mov     [rsi], rcx
.text:00000000000063CD                 imul    rcx, r9
.text:00000000000063D1                 mov     rsi, rcx
.text:00000000000063D4                 jmp     xrealloc
.text:00000000000063D4 ; ---------------------------------------------------------------------------
.text:00000000000063D9                 align 20h
.text:00000000000063E0
.text:00000000000063E0 loc_63E0:                               ; CODE XREF: x2nrealloc+9↑j
.text:00000000000063E0                 test    rcx, rcx
.text:00000000000063E3                 jz      short loc_6408
.text:00000000000063E5
.text:00000000000063E5 loc_63E5:                               ; CODE XREF: x2nrealloc+80↓j
.text:00000000000063E5                 mov     rax, rcx
.text:00000000000063E8                 mul     r9
.text:00000000000063EB                 seto    dl
.text:00000000000063EE                 test    rax, rax
.text:00000000000063F1                 movzx   edx, dl
.text:00000000000063F4                 js      short loc_63FB
.text:00000000000063F6                 test    rdx, rdx
.text:00000000000063F9                 jz      short loc_63CA
.text:00000000000063FB
.text:00000000000063FB loc_63FB:                               ; CODE XREF: x2nrealloc+1D↑j
.text:00000000000063FB                                         ; x2nrealloc+54↑j
.text:00000000000063FB                 sub     rsp, 8
.text:00000000000063FF                 call    xalloc_die
.text:00000000000063FF ; ---------------------------------------------------------------------------
.text:0000000000006404                 align 8
.text:0000000000006408
.text:0000000000006408 loc_6408:                               ; CODE XREF: x2nrealloc+43↑j
.text:0000000000006408                 xor     edx, edx
.text:000000000000640A                 mov     eax, 80h
.text:000000000000640F                 xor     r8d, r8d
.text:0000000000006412                 div     r9
.text:0000000000006415                 test    rax, rax
.text:0000000000006418                 setz    r8b
.text:000000000000641C                 lea     rcx, [r8+rax]
.text:0000000000006420                 jmp     short loc_63E5
.text:0000000000006420 ; } // starts at 63A0
.text:0000000000006420 x2nrealloc      endp
.text:0000000000006420
.text:0000000000006420 ; ---------------------------------------------------------------------------
.text:0000000000006422                 align 10h
.text:0000000000006430
.text:0000000000006430 ; =============== S U B R O U T I N E =======================================
.text:0000000000006430
.text:0000000000006430 ; Attributes: info_from_lumina
.text:0000000000006430
.text:0000000000006430 ; void *__fastcall x2realloc(void *p, size_t *pn)
.text:0000000000006430                 public x2realloc
.text:0000000000006430 x2realloc       proc near
.text:0000000000006430 ; __unwind {
.text:0000000000006430                 test    rdi, rdi
.text:0000000000006433                 mov     rax, [rsi]
.text:0000000000006436                 jz      short loc_6460
.text:0000000000006438                 mov     rdx, 5555555555555553h
.text:0000000000006442                 cmp     rax, rdx
.text:0000000000006445                 ja      short loc_6471
.text:0000000000006447                 mov     rdx, rax
.text:000000000000644A                 shr     rdx, 1
.text:000000000000644D                 lea     rax, [rdx+rax+1]
.text:0000000000006452
.text:0000000000006452 loc_6452:                               ; CODE XREF: x2realloc+3F↓j
.text:0000000000006452                 mov     [rsi], rax
.text:0000000000006455                 mov     rsi, rax
.text:0000000000006458                 jmp     xrealloc
.text:0000000000006458 ; ---------------------------------------------------------------------------
.text:000000000000645D                 align 20h
.text:0000000000006460
.text:0000000000006460 loc_6460:                               ; CODE XREF: x2realloc+6↑j
.text:0000000000006460                 test    rax, rax
.text:0000000000006463                 mov     edx, 80h
.text:0000000000006468                 cmovz   rax, rdx
.text:000000000000646C                 test    rax, rax
.text:000000000000646F                 jns     short loc_6452
.text:0000000000006471
.text:0000000000006471 loc_6471:                               ; CODE XREF: x2realloc+15↑j
.text:0000000000006471                 sub     rsp, 8
.text:0000000000006475                 call    xalloc_die
.text:0000000000006475 ; } // starts at 6430
.text:0000000000006475 x2realloc       endp
.text:0000000000006475
.text:0000000000006475 ; ---------------------------------------------------------------------------
.text:000000000000647A                 align 20h
.text:0000000000006480
.text:0000000000006480 ; =============== S U B R O U T I N E =======================================
.text:0000000000006480
.text:0000000000006480
.text:0000000000006480 ; __int64 __fastcall xzalloc(size_t n)
.text:0000000000006480                 public xzalloc
.text:0000000000006480 xzalloc         proc near
.text:0000000000006480 ; __unwind {
.text:0000000000006480                 push    rbx
.text:0000000000006481                 mov     rbx, rdi
.text:0000000000006484                 call    xmalloc
.text:0000000000006489                 mov     rdx, rbx        ; n
.text:000000000000648C                 xor     esi, esi        ; c
.text:000000000000648E                 mov     rdi, rax        ; s
.text:0000000000006491                 pop     rbx
.text:0000000000006492                 jmp     _memset
.text:0000000000006492 ; } // starts at 6480
.text:0000000000006492 xzalloc         endp
.text:0000000000006492
.text:0000000000006492 ; ---------------------------------------------------------------------------
.text:0000000000006497                 align 20h
.text:00000000000064A0
.text:00000000000064A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000064A0
.text:00000000000064A0 ; Attributes: info_from_lumina
.text:00000000000064A0
.text:00000000000064A0 ; void *__fastcall xcalloc(size_t n, size_t s)
.text:00000000000064A0                 public xcalloc
.text:00000000000064A0 xcalloc         proc near
.text:00000000000064A0 ; __unwind {
.text:00000000000064A0                 mov     rax, rdi
.text:00000000000064A3                 sub     rsp, 8
.text:00000000000064A7                 mul     rsi
.text:00000000000064AA                 seto    dl
.text:00000000000064AD                 test    rax, rax
.text:00000000000064B0                 js      short loc_64C9
.text:00000000000064B2                 movzx   edx, dl
.text:00000000000064B5                 test    rdx, rdx
.text:00000000000064B8                 jnz     short loc_64C9
.text:00000000000064BA                 call    _calloc
.text:00000000000064BF                 test    rax, rax
.text:00000000000064C2                 jz      short loc_64C9
.text:00000000000064C4                 add     rsp, 8
.text:00000000000064C8                 retn
.text:00000000000064C9 ; ---------------------------------------------------------------------------
.text:00000000000064C9
.text:00000000000064C9 loc_64C9:                               ; CODE XREF: xcalloc+10↑j
.text:00000000000064C9                                         ; xcalloc+18↑j ...
.text:00000000000064C9                 call    xalloc_die
.text:00000000000064C9 ; } // starts at 64A0
.text:00000000000064C9 xcalloc         endp
.text:00000000000064C9
.text:00000000000064C9 ; ---------------------------------------------------------------------------
.text:00000000000064CE                 align 10h
.text:00000000000064D0
.text:00000000000064D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000064D0
.text:00000000000064D0 ; Attributes: info_from_lumina
.text:00000000000064D0
.text:00000000000064D0 ; void *__fastcall xmemdup(const void *p, size_t s)
.text:00000000000064D0                 public xmemdup
.text:00000000000064D0 xmemdup         proc near               ; CODE XREF: clone_quoting_options+28↑p
.text:00000000000064D0                                         ; xstrdup+11↓j
.text:00000000000064D0 ; __unwind {
.text:00000000000064D0                 push    rbp
.text:00000000000064D1                 push    rbx
.text:00000000000064D2                 mov     rbp, rdi
.text:00000000000064D5                 mov     rdi, rsi
.text:00000000000064D8                 mov     rbx, rsi
.text:00000000000064DB                 sub     rsp, 8
.text:00000000000064DF                 call    xmalloc
.text:00000000000064E4                 add     rsp, 8
.text:00000000000064E8                 mov     rdx, rbx        ; n
.text:00000000000064EB                 mov     rsi, rbp        ; src
.text:00000000000064EE                 pop     rbx
.text:00000000000064EF                 pop     rbp
.text:00000000000064F0                 mov     rdi, rax        ; dest
.text:00000000000064F3                 jmp     _memcpy
.text:00000000000064F3 ; } // starts at 64D0
.text:00000000000064F3 xmemdup         endp
.text:00000000000064F3
.text:00000000000064F3 ; ---------------------------------------------------------------------------
.text:00000000000064F8                 align 20h
.text:0000000000006500
.text:0000000000006500 ; =============== S U B R O U T I N E =======================================
.text:0000000000006500
.text:0000000000006500
.text:0000000000006500 ; __int64 __fastcall xstrdup(void *src)
.text:0000000000006500                 public xstrdup
.text:0000000000006500 xstrdup         proc near               ; CODE XREF: parse_signal_action_params+27↑p
.text:0000000000006500                                         ; parse_block_signal_params+46↑p ...
.text:0000000000006500 ; __unwind {
.text:0000000000006500                 push    rbx
.text:0000000000006501                 mov     rbx, rdi
.text:0000000000006504                 call    _strlen
.text:0000000000006509                 mov     rdi, rbx        ; src
.text:000000000000650C                 lea     rsi, [rax+1]    ; n
.text:0000000000006510                 pop     rbx
.text:0000000000006511                 jmp     short xmemdup
.text:0000000000006511 ; } // starts at 6500
.text:0000000000006511 xstrdup         endp
.text:0000000000006511
.text:0000000000006511 ; ---------------------------------------------------------------------------
.text:0000000000006513                 align 20h
.text:0000000000006520
.text:0000000000006520 ; =============== S U B R O U T I N E =======================================
.text:0000000000006520
.text:0000000000006520 ; Attributes: noreturn info_from_lumina
.text:0000000000006520
.text:0000000000006520 ; void __cdecl xalloc_die()
.text:0000000000006520                 public xalloc_die
.text:0000000000006520 xalloc_die      proc near               ; CODE XREF: main:loc_2A99↑p
.text:0000000000006520                                         ; quotearg_n_options:loc_54F6↑p ...
.text:0000000000006520 ; __unwind {
.text:0000000000006520                 lea     rsi, aMemoryExhauste ; "memory exhausted"
.text:0000000000006527                 sub     rsp, 8
.text:000000000000652B                 mov     edx, 5          ; category
.text:0000000000006530                 xor     edi, edi        ; domainname
.text:0000000000006532                 call    _dcgettext
.text:0000000000006537                 mov     edi, cs:exit_failure ; status
.text:000000000000653D                 lea     rdx, format+4   ; format
.text:0000000000006544                 mov     rcx, rax
.text:0000000000006547                 xor     esi, esi        ; errnum
.text:0000000000006549                 xor     eax, eax
.text:000000000000654B                 call    _error
.text:0000000000006550                 call    _abort
.text:0000000000006550 ; } // starts at 6520
.text:0000000000006550 xalloc_die      endp
.text:0000000000006550
.text:0000000000006550 ; ---------------------------------------------------------------------------
.text:0000000000006555                 align 20h
.text:0000000000006560
.text:0000000000006560 ; =============== S U B R O U T I N E =======================================
.text:0000000000006560
.text:0000000000006560 ; Attributes: info_from_lumina
.text:0000000000006560
.text:0000000000006560 ; size_t __fastcall rpl_mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
.text:0000000000006560                 public rpl_mbrtowc
.text:0000000000006560 rpl_mbrtowc     proc near               ; CODE XREF: quotearg_buffer_restyled+956↑p
.text:0000000000006560
.text:0000000000006560 pwc             = dword ptr -34h
.text:0000000000006560 var_30          = qword ptr -30h
.text:0000000000006560
.text:0000000000006560 ; __unwind {
.text:0000000000006560                 push    r13
.text:0000000000006562                 push    r12
.text:0000000000006564                 mov     r13, rsi
.text:0000000000006567                 push    rbp
.text:0000000000006568                 push    rbx
.text:0000000000006569                 mov     rbx, rdi
.text:000000000000656C                 mov     r12, rdx
.text:000000000000656F                 sub     rsp, 18h
.text:0000000000006573                 mov     rax, fs:28h
.text:000000000000657C                 mov     [rsp+38h+var_30], rax
.text:0000000000006581                 xor     eax, eax
.text:0000000000006583                 lea     rax, [rsp+38h+pwc]
.text:0000000000006588                 test    rdi, rdi
.text:000000000000658B                 cmovz   rbx, rax
.text:000000000000658F                 mov     rdi, rbx        ; pwc
.text:0000000000006592                 call    _mbrtowc
.text:0000000000006597                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:000000000000659B                 mov     rbp, rax
.text:000000000000659E                 jbe     short loc_65C0
.text:00000000000065A0                 test    r12, r12
.text:00000000000065A3                 jz      short loc_65C0
.text:00000000000065A5                 xor     edi, edi
.text:00000000000065A7                 call    hard_locale
.text:00000000000065AC                 test    al, al
.text:00000000000065AE                 jnz     short loc_65C0
.text:00000000000065B0                 movzx   eax, byte ptr [r13+0]
.text:00000000000065B5                 mov     ebp, 1
.text:00000000000065BA                 mov     [rbx], eax
.text:00000000000065BC                 nop     dword ptr [rax+00h]
.text:00000000000065C0
.text:00000000000065C0 loc_65C0:                               ; CODE XREF: rpl_mbrtowc+3E↑j
.text:00000000000065C0                                         ; rpl_mbrtowc+43↑j ...
.text:00000000000065C0                 mov     rdx, [rsp+38h+var_30]
.text:00000000000065C5                 xor     rdx, fs:28h
.text:00000000000065CE                 mov     rax, rbp
.text:00000000000065D1                 jnz     short loc_65DE
.text:00000000000065D3                 add     rsp, 18h
.text:00000000000065D7                 pop     rbx
.text:00000000000065D8                 pop     rbp
.text:00000000000065D9                 pop     r12
.text:00000000000065DB                 pop     r13
.text:00000000000065DD                 retn
.text:00000000000065DE ; ---------------------------------------------------------------------------
.text:00000000000065DE
.text:00000000000065DE loc_65DE:                               ; CODE XREF: rpl_mbrtowc+71↑j
.text:00000000000065DE                 call    ___stack_chk_fail
.text:00000000000065DE ; } // starts at 6560
.text:00000000000065DE rpl_mbrtowc     endp
.text:00000000000065DE
.text:00000000000065DE ; ---------------------------------------------------------------------------
.text:00000000000065E3                 align 10h
.text:00000000000065F0
.text:00000000000065F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000065F0
.text:00000000000065F0
.text:00000000000065F0 ; __int64 __fastcall str2sig(char *s2)
.text:00000000000065F0                 public str2sig
.text:00000000000065F0 str2sig         proc near               ; CODE XREF: operand2sig+10D↑p
.text:00000000000065F0                                         ; operand2sig+19D↑p
.text:00000000000065F0
.text:00000000000065F0 var_38          = qword ptr -38h
.text:00000000000065F0 var_30          = qword ptr -30h
.text:00000000000065F0
.text:00000000000065F0 ; __unwind {
.text:00000000000065F0                 push    r13
.text:00000000000065F2                 push    r12
.text:00000000000065F4                 mov     r13, rsi
.text:00000000000065F7                 push    rbp
.text:00000000000065F8                 push    rbx
.text:00000000000065F9                 xor     ebx, ebx
.text:00000000000065FB                 mov     r12, rdi
.text:00000000000065FE                 lea     rbp, nptr       ; "HUP"
.text:0000000000006605                 sub     rsp, 18h
.text:0000000000006609                 mov     rax, fs:28h
.text:0000000000006612                 mov     [rsp+38h+var_30], rax
.text:0000000000006617                 xor     eax, eax
.text:0000000000006619                 movsx   eax, byte ptr [rdi]
.text:000000000000661C                 sub     eax, 30h ; '0'
.text:000000000000661F                 cmp     eax, 9
.text:0000000000006622                 ja      short loc_663C
.text:0000000000006624                 jmp     short loc_6680
.text:0000000000006624 ; ---------------------------------------------------------------------------
.text:0000000000006626                 align 10h
.text:0000000000006630
.text:0000000000006630 loc_6630:                               ; CODE XREF: str2sig+59↓j
.text:0000000000006630                 add     ebx, 1
.text:0000000000006633                 add     rbp, 0Ch
.text:0000000000006637                 cmp     ebx, 23h ; '#'
.text:000000000000663A                 jz      short loc_66B0
.text:000000000000663C
.text:000000000000663C loc_663C:                               ; CODE XREF: str2sig+32↑j
.text:000000000000663C                 mov     rsi, r12        ; s2
.text:000000000000663F                 mov     rdi, rbp        ; nptr
.text:0000000000006642                 call    _strcmp
.text:0000000000006647                 test    eax, eax
.text:0000000000006649                 jnz     short loc_6630
.text:000000000000664B                 lea     rdx, [rbx+rbx*2]
.text:000000000000664F                 lea     rax, numname_table
.text:0000000000006656                 mov     eax, [rax+rdx*4]
.text:0000000000006659
.text:0000000000006659 loc_6659:                               ; CODE XREF: str2sig+AA↓j
.text:0000000000006659                                         ; str2sig+13E↓j ...
.text:0000000000006659                 mov     [r13+0], eax
.text:000000000000665D                 sar     eax, 1Fh
.text:0000000000006660
.text:0000000000006660 loc_6660:                               ; CODE XREF: str2sig+B9↓j
.text:0000000000006660                 mov     rcx, [rsp+38h+var_30]
.text:0000000000006665                 xor     rcx, fs:28h
.text:000000000000666E                 jnz     loc_6770
.text:0000000000006674                 add     rsp, 18h
.text:0000000000006678                 pop     rbx
.text:0000000000006679                 pop     rbp
.text:000000000000667A                 pop     r12
.text:000000000000667C                 pop     r13
.text:000000000000667E                 retn
.text:000000000000667E ; ---------------------------------------------------------------------------
.text:000000000000667F                 align 20h
.text:0000000000006680
.text:0000000000006680 loc_6680:                               ; CODE XREF: str2sig+34↑j
.text:0000000000006680                 mov     edx, 0Ah        ; base
.text:0000000000006685                 mov     rsi, rsp        ; endptr
.text:0000000000006688                 call    _strtol
.text:000000000000668D                 mov     rdx, [rsp+38h+var_38]
.text:0000000000006691                 cmp     byte ptr [rdx], 0
.text:0000000000006694                 jnz     short loc_669C
.text:0000000000006696                 cmp     rax, 40h ; '@'
.text:000000000000669A                 jle     short loc_6659
.text:000000000000669C
.text:000000000000669C loc_669C:                               ; CODE XREF: str2sig+A4↑j
.text:000000000000669C                                         ; str2sig+EE↓j ...
.text:000000000000669C                 mov     dword ptr [r13+0], 0FFFFFFFFh
.text:00000000000066A4                 mov     eax, 0FFFFFFFFh
.text:00000000000066A9                 jmp     short loc_6660
.text:00000000000066A9 ; ---------------------------------------------------------------------------
.text:00000000000066AB                 align 10h
.text:00000000000066B0
.text:00000000000066B0 loc_66B0:                               ; CODE XREF: str2sig+4A↑j
.text:00000000000066B0                 call    ___libc_current_sigrtmin
.text:00000000000066B5                 mov     ebp, eax
.text:00000000000066B7                 call    ___libc_current_sigrtmax
.text:00000000000066BC                 test    ebp, ebp
.text:00000000000066BE                 mov     ebx, eax
.text:00000000000066C0                 jle     short loc_66DC
.text:00000000000066C2                 lea     rdi, aRtmin     ; "RTMIN"
.text:00000000000066C9                 mov     ecx, 5
.text:00000000000066CE                 mov     rsi, r12
.text:00000000000066D1                 repe cmpsb
.text:00000000000066D3                 setnbe  al
.text:00000000000066D6                 sbb     al, 0
.text:00000000000066D8                 test    al, al
.text:00000000000066DA                 jz      short loc_6733
.text:00000000000066DC
.text:00000000000066DC loc_66DC:                               ; CODE XREF: str2sig+D0↑j
.text:00000000000066DC                 test    ebx, ebx
.text:00000000000066DE                 jle     short loc_669C
.text:00000000000066E0                 lea     rdi, aRtmax     ; "RTMAX"
.text:00000000000066E7                 mov     ecx, 5
.text:00000000000066EC                 mov     rsi, r12
.text:00000000000066EF                 repe cmpsb
.text:00000000000066F1                 setnbe  al
.text:00000000000066F4                 sbb     al, 0
.text:00000000000066F6                 test    al, al
.text:00000000000066F8                 jnz     short loc_669C
.text:00000000000066FA                 lea     rdi, [r12+5]    ; nptr
.text:00000000000066FF                 mov     edx, 0Ah        ; base
.text:0000000000006704                 mov     rsi, rsp        ; endptr
.text:0000000000006707                 call    _strtol
.text:000000000000670C                 mov     rdx, [rsp+38h+var_38]
.text:0000000000006710                 cmp     byte ptr [rdx], 0
.text:0000000000006713                 jnz     short loc_669C
.text:0000000000006715                 sub     ebp, ebx
.text:0000000000006717                 movsxd  rbp, ebp
.text:000000000000671A                 cmp     rax, rbp
.text:000000000000671D                 jl      loc_669C
.text:0000000000006723                 test    rax, rax
.text:0000000000006726                 jg      loc_669C
.text:000000000000672C                 add     eax, ebx
.text:000000000000672E                 jmp     loc_6659
.text:0000000000006733 ; ---------------------------------------------------------------------------
.text:0000000000006733
.text:0000000000006733 loc_6733:                               ; CODE XREF: str2sig+EA↑j
.text:0000000000006733                 lea     rdi, [r12+5]    ; nptr
.text:0000000000006738                 mov     edx, 0Ah        ; base
.text:000000000000673D                 mov     rsi, rsp        ; endptr
.text:0000000000006740                 call    _strtol
.text:0000000000006745                 mov     rdx, [rsp+38h+var_38]
.text:0000000000006749                 cmp     byte ptr [rdx], 0
.text:000000000000674C                 jnz     loc_669C
.text:0000000000006752                 test    rax, rax
.text:0000000000006755                 js      loc_669C
.text:000000000000675B                 sub     ebx, ebp
.text:000000000000675D                 movsxd  rdx, ebx
.text:0000000000006760                 cmp     rax, rdx
.text:0000000000006763                 jg      loc_669C
.text:0000000000006769                 add     eax, ebp
.text:000000000000676B                 jmp     loc_6659
.text:0000000000006770 ; ---------------------------------------------------------------------------
.text:0000000000006770
.text:0000000000006770 loc_6770:                               ; CODE XREF: str2sig+7E↑j
.text:0000000000006770                 call    ___stack_chk_fail
.text:0000000000006770 ; } // starts at 65F0
.text:0000000000006770 str2sig         endp
.text:0000000000006770
.text:0000000000006770 ; ---------------------------------------------------------------------------
.text:0000000000006775                 align 20h
.text:0000000000006780
.text:0000000000006780 ; =============== S U B R O U T I N E =======================================
.text:0000000000006780
.text:0000000000006780
.text:0000000000006780                 public sig2str
.text:0000000000006780 sig2str         proc near               ; CODE XREF: main+BFC↑p
.text:0000000000006780                                         ; main+112C↑p ...
.text:0000000000006780
.text:0000000000006780 var_20          = qword ptr -20h
.text:0000000000006780
.text:0000000000006780 ; __unwind {
.text:0000000000006780                 push    rbp
.text:0000000000006781                 lea     rax, numname_table
.text:0000000000006788                 push    rbx
.text:0000000000006789                 xor     edx, edx
.text:000000000000678B                 mov     ebx, edi
.text:000000000000678D                 mov     rdi, rsi        ; dest
.text:0000000000006790                 sub     rsp, 18h
.text:0000000000006794                 mov     rcx, rax
.text:0000000000006797                 jmp     short loc_67AC
.text:0000000000006797 ; ---------------------------------------------------------------------------
.text:0000000000006799                 align 20h
.text:00000000000067A0
.text:00000000000067A0 loc_67A0:                               ; CODE XREF: sig2str+2E↓j
.text:00000000000067A0                 add     edx, 1
.text:00000000000067A3                 add     rcx, 0Ch
.text:00000000000067A7                 cmp     edx, 23h ; '#'
.text:00000000000067AA                 jz      short loc_67D0
.text:00000000000067AC
.text:00000000000067AC loc_67AC:                               ; CODE XREF: sig2str+17↑j
.text:00000000000067AC                 cmp     [rcx], ebx
.text:00000000000067AE                 jnz     short loc_67A0
.text:00000000000067B0                 lea     rdx, [rdx+rdx*2]
.text:00000000000067B4                 lea     rsi, [rax+rdx*4+4] ; src
.text:00000000000067B9                 call    _strcpy
.text:00000000000067BE                 xor     eax, eax
.text:00000000000067C0
.text:00000000000067C0 loc_67C0:                               ; CODE XREF: sig2str+8F↓j
.text:00000000000067C0                                         ; sig2str+D6↓j
.text:00000000000067C0                 add     rsp, 18h
.text:00000000000067C4                 pop     rbx
.text:00000000000067C5                 pop     rbp
.text:00000000000067C6                 retn
.text:00000000000067C6 ; ---------------------------------------------------------------------------
.text:00000000000067C7                 align 10h
.text:00000000000067D0
.text:00000000000067D0 loc_67D0:                               ; CODE XREF: sig2str+2A↑j
.text:00000000000067D0                 mov     [rsp+28h+var_20], rdi
.text:00000000000067D5                 call    ___libc_current_sigrtmin
.text:00000000000067DA                 mov     ebp, eax
.text:00000000000067DC                 call    ___libc_current_sigrtmax
.text:00000000000067E1                 cmp     ebp, ebx
.text:00000000000067E3                 jg      short loc_6851
.text:00000000000067E5                 cmp     eax, ebx
.text:00000000000067E7                 jl      short loc_6851
.text:00000000000067E9                 mov     edx, eax
.text:00000000000067EB                 mov     rdi, [rsp+28h+var_20]
.text:00000000000067F0                 sub     edx, ebp
.text:00000000000067F2                 sar     edx, 1
.text:00000000000067F4                 add     edx, ebp
.text:00000000000067F6                 cmp     edx, ebx
.text:00000000000067F8                 jge     short loc_6840
.text:00000000000067FA                 mov     edx, 58h ; 'X'
.text:00000000000067FF                 mov     dword ptr [rdi], 414D5452h
.text:0000000000006805                 mov     ebp, eax
.text:0000000000006807                 mov     [rdi+4], dx
.text:000000000000680B
.text:000000000000680B loc_680B:                               ; CODE XREF: sig2str+CF↓j
.text:000000000000680B                 mov     eax, ebx
.text:000000000000680D                 sub     eax, ebp
.text:000000000000680F                 jz      short loc_67C0
.text:0000000000006811                 lea     rcx, aD         ; "%+d"
.text:0000000000006818                 mov     r8d, eax
.text:000000000000681B                 add     rdi, 5
.text:000000000000681F                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000006826                 mov     esi, 1
.text:000000000000682B                 xor     eax, eax
.text:000000000000682D                 call    ___sprintf_chk
.text:0000000000006832                 add     rsp, 18h
.text:0000000000006836                 xor     eax, eax
.text:0000000000006838                 pop     rbx
.text:0000000000006839                 pop     rbp
.text:000000000000683A                 retn
.text:000000000000683A ; ---------------------------------------------------------------------------
.text:000000000000683B                 align 20h
.text:0000000000006840
.text:0000000000006840 loc_6840:                               ; CODE XREF: sig2str+78↑j
.text:0000000000006840                 mov     ecx, 4Eh ; 'N'
.text:0000000000006845                 mov     dword ptr [rdi], 494D5452h
.text:000000000000684B                 mov     [rdi+4], cx
.text:000000000000684F                 jmp     short loc_680B
.text:0000000000006851 ; ---------------------------------------------------------------------------
.text:0000000000006851
.text:0000000000006851 loc_6851:                               ; CODE XREF: sig2str+63↑j
.text:0000000000006851                                         ; sig2str+67↑j
.text:0000000000006851                 mov     eax, 0FFFFFFFFh
.text:0000000000006856                 jmp     loc_67C0
.text:0000000000006856 ; } // starts at 6780
.text:0000000000006856 sig2str         endp
.text:0000000000006856
.text:0000000000006856 ; ---------------------------------------------------------------------------
.text:000000000000685B                 align 20h
.text:0000000000006860
.text:0000000000006860 ; =============== S U B R O U T I N E =======================================
.text:0000000000006860
.text:0000000000006860 ; Attributes: info_from_lumina
.text:0000000000006860
.text:0000000000006860 ; int __fastcall close_stream(FILE *stream)
.text:0000000000006860                 public close_stream
.text:0000000000006860 close_stream    proc near               ; CODE XREF: close_stdout+D↑p
.text:0000000000006860                                         ; close_stdout+33↑p
.text:0000000000006860 ; __unwind {
.text:0000000000006860                 push    r12
.text:0000000000006862                 push    rbp
.text:0000000000006863                 mov     rbp, rdi
.text:0000000000006866                 push    rbx
.text:0000000000006867                 call    ___fpending
.text:000000000000686C                 mov     ebx, [rbp+0]
.text:000000000000686F                 mov     rdi, rbp        ; stream
.text:0000000000006872                 mov     r12, rax
.text:0000000000006875                 call    rpl_fclose
.text:000000000000687A                 and     ebx, 20h
.text:000000000000687D                 test    ebx, ebx
.text:000000000000687F                 jnz     short loc_6898
.text:0000000000006881                 test    eax, eax
.text:0000000000006883                 jz      short loc_688F
.text:0000000000006885                 test    r12, r12
.text:0000000000006888                 mov     eax, 0FFFFFFFFh
.text:000000000000688D                 jz      short loc_68C8
.text:000000000000688F
.text:000000000000688F loc_688F:                               ; CODE XREF: close_stream+23↑j
.text:000000000000688F                 pop     rbx
.text:0000000000006890                 pop     rbp
.text:0000000000006891                 pop     r12
.text:0000000000006893                 retn
.text:0000000000006893 ; ---------------------------------------------------------------------------
.text:0000000000006894                 align 8
.text:0000000000006898
.text:0000000000006898 loc_6898:                               ; CODE XREF: close_stream+1F↑j
.text:0000000000006898                 test    eax, eax
.text:000000000000689A                 jnz     short loc_68B8
.text:000000000000689C                 call    ___errno_location
.text:00000000000068A1                 mov     dword ptr [rax], 0
.text:00000000000068A7                 mov     eax, 0FFFFFFFFh
.text:00000000000068AC                 pop     rbx
.text:00000000000068AD                 pop     rbp
.text:00000000000068AE                 pop     r12
.text:00000000000068B0                 retn
.text:00000000000068B0 ; ---------------------------------------------------------------------------
.text:00000000000068B1                 align 8
.text:00000000000068B8
.text:00000000000068B8 loc_68B8:                               ; CODE XREF: close_stream+3A↑j
.text:00000000000068B8                 pop     rbx
.text:00000000000068B9                 mov     eax, 0FFFFFFFFh
.text:00000000000068BE                 pop     rbp
.text:00000000000068BF                 pop     r12
.text:00000000000068C1                 retn
.text:00000000000068C1 ; ---------------------------------------------------------------------------
.text:00000000000068C2                 align 8
.text:00000000000068C8
.text:00000000000068C8 loc_68C8:                               ; CODE XREF: close_stream+2D↑j
.text:00000000000068C8                 call    ___errno_location
.text:00000000000068CD                 cmp     dword ptr [rax], 9
.text:00000000000068D0                 pop     rbx
.text:00000000000068D1                 pop     rbp
.text:00000000000068D2                 pop     r12
.text:00000000000068D4                 setnz   al
.text:00000000000068D7                 movzx   eax, al
.text:00000000000068DA                 neg     eax
.text:00000000000068DC                 retn
.text:00000000000068DC ; } // starts at 6860
.text:00000000000068DC close_stream    endp
.text:00000000000068DC
.text:00000000000068DC ; ---------------------------------------------------------------------------
.text:00000000000068DD                 align 20h
.text:00000000000068E0
.text:00000000000068E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000068E0
.text:00000000000068E0
.text:00000000000068E0                 public hard_locale
.text:00000000000068E0 hard_locale     proc near               ; CODE XREF: rpl_mbrtowc+47↑p
.text:00000000000068E0 ; __unwind {
.text:00000000000068E0                 sub     rsp, 8
.text:00000000000068E4                 xor     esi, esi        ; locale
.text:00000000000068E6                 call    _setlocale
.text:00000000000068EB                 mov     rdx, rax
.text:00000000000068EE                 mov     eax, 1
.text:00000000000068F3                 test    rdx, rdx
.text:00000000000068F6                 jz      short loc_6915
.text:00000000000068F8                 lea     rdi, aC         ; "C"
.text:00000000000068FF                 mov     ecx, 2
.text:0000000000006904                 mov     rsi, rdx
.text:0000000000006907                 repe cmpsb
.text:0000000000006909                 setnbe  cl
.text:000000000000690C                 sbb     cl, 0
.text:000000000000690F                 xor     eax, eax
.text:0000000000006911                 test    cl, cl
.text:0000000000006913                 jnz     short loc_6920
.text:0000000000006915
.text:0000000000006915 loc_6915:                               ; CODE XREF: hard_locale+16↑j
.text:0000000000006915                 add     rsp, 8
.text:0000000000006919                 retn
.text:0000000000006919 ; ---------------------------------------------------------------------------
.text:000000000000691A                 align 20h
.text:0000000000006920
.text:0000000000006920 loc_6920:                               ; CODE XREF: hard_locale+33↑j
.text:0000000000006920                 lea     rdi, aPosix     ; "POSIX"
.text:0000000000006927                 mov     ecx, 6
.text:000000000000692C                 mov     rsi, rdx
.text:000000000000692F                 repe cmpsb
.text:0000000000006931                 setnbe  al
.text:0000000000006934                 sbb     al, 0
.text:0000000000006936                 test    al, al
.text:0000000000006938                 setnz   al
.text:000000000000693B                 add     rsp, 8
.text:000000000000693F                 retn
.text:000000000000693F ; } // starts at 68E0
.text:000000000000693F hard_locale     endp
.text:000000000000693F
.text:0000000000006940
.text:0000000000006940 ; =============== S U B R O U T I N E =======================================
.text:0000000000006940
.text:0000000000006940
.text:0000000000006940                 public locale_charset
.text:0000000000006940 locale_charset  proc near               ; CODE XREF: gettext_quote+B↑p
.text:0000000000006940 ; __unwind {
.text:0000000000006940                 sub     rsp, 8
.text:0000000000006944                 mov     edi, 0Eh        ; item
.text:0000000000006949                 call    _nl_langinfo
.text:000000000000694E                 test    rax, rax
.text:0000000000006951                 jz      short loc_6970
.text:0000000000006953                 cmp     byte ptr [rax], 0
.text:0000000000006956                 lea     rdx, aAscii     ; "ASCII"
.text:000000000000695D                 cmovz   rax, rdx
.text:0000000000006961                 add     rsp, 8
.text:0000000000006965                 retn
.text:0000000000006965 ; ---------------------------------------------------------------------------
.text:0000000000006966                 align 10h
.text:0000000000006970
.text:0000000000006970 loc_6970:                               ; CODE XREF: locale_charset+11↑j
.text:0000000000006970                 lea     rax, aAscii     ; "ASCII"
.text:0000000000006977                 add     rsp, 8
.text:000000000000697B                 retn
.text:000000000000697B ; } // starts at 6940
.text:000000000000697B locale_charset  endp
.text:000000000000697B
.text:000000000000697B ; ---------------------------------------------------------------------------
.text:000000000000697C                 align 20h
.text:0000000000006980
.text:0000000000006980 ; =============== S U B R O U T I N E =======================================
.text:0000000000006980
.text:0000000000006980 ; Attributes: info_from_lumina
.text:0000000000006980
.text:0000000000006980 ; int __fastcall rpl_fclose(FILE *fp)
.text:0000000000006980                 public rpl_fclose
.text:0000000000006980 rpl_fclose      proc near               ; CODE XREF: close_stream+15↑p
.text:0000000000006980 ; __unwind {
.text:0000000000006980                 push    r12
.text:0000000000006982                 push    rbp
.text:0000000000006983                 push    rbx
.text:0000000000006984                 mov     rbx, rdi
.text:0000000000006987                 call    _fileno
.text:000000000000698C                 test    eax, eax
.text:000000000000698E                 mov     rdi, rbx        ; fp
.text:0000000000006991                 js      short loc_69E7
.text:0000000000006993                 call    ___freading
.text:0000000000006998                 test    eax, eax
.text:000000000000699A                 jnz     short loc_69C8
.text:000000000000699C
.text:000000000000699C loc_699C:                               ; CODE XREF: rpl_fclose+62↓j
.text:000000000000699C                 mov     rdi, rbx        ; stream
.text:000000000000699F                 call    rpl_fflush
.text:00000000000069A4                 test    eax, eax
.text:00000000000069A6                 jz      short loc_69E4
.text:00000000000069A8                 call    ___errno_location
.text:00000000000069AD                 mov     r12d, [rax]
.text:00000000000069B0                 mov     rdi, rbx        ; stream
.text:00000000000069B3                 mov     rbp, rax
.text:00000000000069B6                 call    _fclose
.text:00000000000069BB                 test    r12d, r12d
.text:00000000000069BE                 jnz     short loc_69F0
.text:00000000000069C0
.text:00000000000069C0 loc_69C0:                               ; CODE XREF: rpl_fclose+79↓j
.text:00000000000069C0                 pop     rbx
.text:00000000000069C1                 pop     rbp
.text:00000000000069C2                 pop     r12
.text:00000000000069C4                 retn
.text:00000000000069C4 ; ---------------------------------------------------------------------------
.text:00000000000069C5                 align 8
.text:00000000000069C8
.text:00000000000069C8 loc_69C8:                               ; CODE XREF: rpl_fclose+1A↑j
.text:00000000000069C8                 mov     rdi, rbx        ; stream
.text:00000000000069CB                 call    _fileno
.text:00000000000069D0                 xor     esi, esi        ; offset
.text:00000000000069D2                 mov     edx, 1          ; whence
.text:00000000000069D7                 mov     edi, eax        ; fd
.text:00000000000069D9                 call    _lseek
.text:00000000000069DE                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000069E2                 jnz     short loc_699C
.text:00000000000069E4
.text:00000000000069E4 loc_69E4:                               ; CODE XREF: rpl_fclose+26↑j
.text:00000000000069E4                 mov     rdi, rbx        ; stream
.text:00000000000069E7
.text:00000000000069E7 loc_69E7:                               ; CODE XREF: rpl_fclose+11↑j
.text:00000000000069E7                 pop     rbx
.text:00000000000069E8                 pop     rbp
.text:00000000000069E9                 pop     r12
.text:00000000000069EB                 jmp     _fclose
.text:00000000000069F0 ; ---------------------------------------------------------------------------
.text:00000000000069F0
.text:00000000000069F0 loc_69F0:                               ; CODE XREF: rpl_fclose+3E↑j
.text:00000000000069F0                 mov     [rbp+0], r12d
.text:00000000000069F4                 mov     eax, 0FFFFFFFFh
.text:00000000000069F9                 jmp     short loc_69C0
.text:00000000000069F9 ; } // starts at 6980
.text:00000000000069F9 rpl_fclose      endp
.text:00000000000069F9
.text:00000000000069F9 ; ---------------------------------------------------------------------------
.text:00000000000069FB                 align 20h
.text:0000000000006A00
.text:0000000000006A00 ; =============== S U B R O U T I N E =======================================
.text:0000000000006A00
.text:0000000000006A00 ; Attributes: info_from_lumina
.text:0000000000006A00
.text:0000000000006A00 ; int __fastcall rpl_fflush(FILE *stream)
.text:0000000000006A00                 public rpl_fflush
.text:0000000000006A00 rpl_fflush      proc near               ; CODE XREF: rpl_fclose+1F↑p
.text:0000000000006A00 ; __unwind {
.text:0000000000006A00                 test    rdi, rdi
.text:0000000000006A03                 push    rbx
.text:0000000000006A04                 mov     rbx, rdi
.text:0000000000006A07                 jz      short loc_6A1A
.text:0000000000006A09                 call    ___freading
.text:0000000000006A0E                 test    eax, eax
.text:0000000000006A10                 jz      short loc_6A1A
.text:0000000000006A12                 test    dword ptr [rbx], 100h
.text:0000000000006A18                 jnz     short loc_6A28
.text:0000000000006A1A
.text:0000000000006A1A loc_6A1A:                               ; CODE XREF: rpl_fflush+7↑j
.text:0000000000006A1A                                         ; rpl_fflush+10↑j
.text:0000000000006A1A                 mov     rdi, rbx        ; stream
.text:0000000000006A1D                 pop     rbx
.text:0000000000006A1E                 jmp     _fflush
.text:0000000000006A1E ; ---------------------------------------------------------------------------
.text:0000000000006A23                 align 8
.text:0000000000006A28
.text:0000000000006A28 loc_6A28:                               ; CODE XREF: rpl_fflush+18↑j
.text:0000000000006A28                 mov     rdi, rbx
.text:0000000000006A2B                 mov     edx, 1
.text:0000000000006A30                 xor     esi, esi
.text:0000000000006A32                 call    rpl_fseeko
.text:0000000000006A37                 mov     rdi, rbx        ; stream
.text:0000000000006A3A                 pop     rbx
.text:0000000000006A3B                 jmp     _fflush
.text:0000000000006A3B ; } // starts at 6A00
.text:0000000000006A3B rpl_fflush      endp
.text:0000000000006A3B
.text:0000000000006A40
.text:0000000000006A40 ; =============== S U B R O U T I N E =======================================
.text:0000000000006A40
.text:0000000000006A40 ; Attributes: info_from_lumina
.text:0000000000006A40
.text:0000000000006A40 ; int __fastcall rpl_fseeko(FILE *fp, off_t offset, int whence)
.text:0000000000006A40                 public rpl_fseeko
.text:0000000000006A40 rpl_fseeko      proc near               ; CODE XREF: rpl_fflush+32↑p
.text:0000000000006A40 ; __unwind {
.text:0000000000006A40                 mov     rax, [rdi+8]
.text:0000000000006A44                 cmp     [rdi+10h], rax
.text:0000000000006A48                 jz      short loc_6A50
.text:0000000000006A4A
.text:0000000000006A4A loc_6A4A:                               ; CODE XREF: rpl_fseeko+18↓j
.text:0000000000006A4A                                         ; rpl_fseeko+1F↓j
.text:0000000000006A4A                 jmp     _fseeko
.text:0000000000006A4A ; ---------------------------------------------------------------------------
.text:0000000000006A4F                 align 10h
.text:0000000000006A50
.text:0000000000006A50 loc_6A50:                               ; CODE XREF: rpl_fseeko+8↑j
.text:0000000000006A50                 mov     rax, [rdi+20h]
.text:0000000000006A54                 cmp     [rdi+28h], rax
.text:0000000000006A58                 jnz     short loc_6A4A
.text:0000000000006A5A                 cmp     qword ptr [rdi+48h], 0
.text:0000000000006A5F                 jnz     short loc_6A4A
.text:0000000000006A61                 push    r12
.text:0000000000006A63                 push    rbp
.text:0000000000006A64                 mov     r12d, edx
.text:0000000000006A67                 push    rbx
.text:0000000000006A68                 mov     rbp, rsi
.text:0000000000006A6B                 mov     rbx, rdi
.text:0000000000006A6E                 call    _fileno
.text:0000000000006A73                 mov     edx, r12d       ; whence
.text:0000000000006A76                 mov     rsi, rbp        ; offset
.text:0000000000006A79                 mov     edi, eax        ; fd
.text:0000000000006A7B                 call    _lseek
.text:0000000000006A80                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000006A84                 jz      short loc_6A92
.text:0000000000006A86                 and     dword ptr [rbx], 0FFFFFFEFh
.text:0000000000006A89                 mov     [rbx+90h], rax
.text:0000000000006A90                 xor     eax, eax
.text:0000000000006A92
.text:0000000000006A92 loc_6A92:                               ; CODE XREF: rpl_fseeko+44↑j
.text:0000000000006A92                 pop     rbx
.text:0000000000006A93                 pop     rbp
.text:0000000000006A94                 pop     r12
.text:0000000000006A96                 retn
.text:0000000000006A96 ; } // starts at 6A40
.text:0000000000006A96 rpl_fseeko      endp
.text:0000000000006A96
.text:0000000000006A96 ; ---------------------------------------------------------------------------
.text:0000000000006A97                 align 20h
.text:0000000000006AA0
.text:0000000000006AA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000006AA0
.text:0000000000006AA0 ; Attributes: info_from_lumina
.text:0000000000006AA0
.text:0000000000006AA0 ; void _libc_csu_init(void)
.text:0000000000006AA0                 public __libc_csu_init
.text:0000000000006AA0 __libc_csu_init proc near               ; DATA XREF: start+16↑o
.text:0000000000006AA0 ; __unwind {
.text:0000000000006AA0                 push    r15
.text:0000000000006AA2                 push    r14
.text:0000000000006AA4                 mov     r15, rdx
.text:0000000000006AA7                 push    r13
.text:0000000000006AA9                 push    r12
.text:0000000000006AAB                 lea     r12, __frame_dummy_init_array_entry
.text:0000000000006AB2                 push    rbp
.text:0000000000006AB3                 lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:0000000000006ABA                 push    rbx
.text:0000000000006ABB                 mov     r13d, edi
.text:0000000000006ABE                 mov     r14, rsi
.text:0000000000006AC1                 sub     rbp, r12
.text:0000000000006AC4                 sub     rsp, 8
.text:0000000000006AC8                 sar     rbp, 3
.text:0000000000006ACC                 call    _init_proc
.text:0000000000006AD1                 test    rbp, rbp
.text:0000000000006AD4                 jz      short loc_6AF6
.text:0000000000006AD6                 xor     ebx, ebx
.text:0000000000006AD8                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000006AE0
.text:0000000000006AE0 loc_6AE0:                               ; CODE XREF: __libc_csu_init+54↓j
.text:0000000000006AE0                 mov     rdx, r15
.text:0000000000006AE3                 mov     rsi, r14
.text:0000000000006AE6                 mov     edi, r13d
.text:0000000000006AE9                 call    ds:(__frame_dummy_init_array_entry - 2099D0h)[r12+rbx*8]
.text:0000000000006AED                 add     rbx, 1
.text:0000000000006AF1                 cmp     rbp, rbx
.text:0000000000006AF4                 jnz     short loc_6AE0
.text:0000000000006AF6
.text:0000000000006AF6 loc_6AF6:                               ; CODE XREF: __libc_csu_init+34↑j
.text:0000000000006AF6                 add     rsp, 8
.text:0000000000006AFA                 pop     rbx
.text:0000000000006AFB                 pop     rbp
.text:0000000000006AFC                 pop     r12
.text:0000000000006AFE                 pop     r13
.text:0000000000006B00                 pop     r14
.text:0000000000006B02                 pop     r15
.text:0000000000006B04                 retn
.text:0000000000006B04 ; } // starts at 6AA0
.text:0000000000006B04 __libc_csu_init endp
.text:0000000000006B04
.text:0000000000006B04 ; ---------------------------------------------------------------------------
.text:0000000000006B05                 align 10h
.text:0000000000006B10
.text:0000000000006B10 ; =============== S U B R O U T I N E =======================================
.text:0000000000006B10
.text:0000000000006B10
.text:0000000000006B10 ; void _libc_csu_fini(void)
.text:0000000000006B10                 public __libc_csu_fini
.text:0000000000006B10 __libc_csu_fini proc near               ; DATA XREF: start+F↑o
.text:0000000000006B10 ; __unwind {
.text:0000000000006B10                 rep retn
.text:0000000000006B10 ; } // starts at 6B10
.text:0000000000006B10 __libc_csu_fini endp
.text:0000000000006B10
.text:0000000000006B10 ; ---------------------------------------------------------------------------
.text:0000000000006B12                 align 20h
.text:0000000000006B20
.text:0000000000006B20 ; =============== S U B R O U T I N E =======================================
.text:0000000000006B20
.text:0000000000006B20
.text:0000000000006B20 atexit          proc near               ; CODE XREF: main+74↑p
.text:0000000000006B20 ; __unwind {
.text:0000000000006B20                 mov     rdx, cs:__dso_handle ; lpdso_handle
.text:0000000000006B27                 xor     esi, esi        ; obj
.text:0000000000006B29                 jmp     ___cxa_atexit
.text:0000000000006B29 ; } // starts at 6B20
.text:0000000000006B29 atexit          endp
.text:0000000000006B29
.text:0000000000006B29 _text           ends
.text:0000000000006B29
LOAD:0000000000006B2E ; ===========================================================================
LOAD:0000000000006B2E
LOAD:0000000000006B2E ; Segment type: Pure code
LOAD:0000000000006B2E ; Segment permissions: Read/Execute
LOAD:0000000000006B2E LOAD            segment byte public 'CODE' use64
LOAD:0000000000006B2E                 assume cs:LOAD
LOAD:0000000000006B2E                 ;org 6B2Eh
LOAD:0000000000006B2E                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000006B2E                 align 10h
LOAD:0000000000006B2E LOAD            ends
LOAD:0000000000006B2E
.fini:0000000000006B30 ; ===========================================================================
.fini:0000000000006B30
.fini:0000000000006B30 ; Segment type: Pure code
.fini:0000000000006B30 ; Segment permissions: Read/Execute
.fini:0000000000006B30 _fini           segment dword public 'CODE' use64
.fini:0000000000006B30                 assume cs:_fini
.fini:0000000000006B30                 ;org 6B30h
.fini:0000000000006B30                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:0000000000006B30
.fini:0000000000006B30 ; =============== S U B R O U T I N E =======================================
.fini:0000000000006B30
.fini:0000000000006B30
.fini:0000000000006B30                 public _term_proc
.fini:0000000000006B30 _term_proc      proc near
.fini:0000000000006B30                 sub     rsp, 8          ; _fini
.fini:0000000000006B34                 add     rsp, 8
.fini:0000000000006B38                 retn
.fini:0000000000006B38 _term_proc      endp
.fini:0000000000006B38
.fini:0000000000006B38 _fini           ends
.fini:0000000000006B38
LOAD:0000000000006B39 ; ===========================================================================
LOAD:0000000000006B39
LOAD:0000000000006B39 ; Segment type: Pure code
LOAD:0000000000006B39 ; Segment permissions: Read/Execute
LOAD:0000000000006B39 LOAD            segment byte public 'CODE' use64
LOAD:0000000000006B39                 assume cs:LOAD
LOAD:0000000000006B39                 ;org 6B39h
LOAD:0000000000006B39                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000006B39                 align 20h
LOAD:0000000000006B39 LOAD            ends
LOAD:0000000000006B39
.rodata:0000000000006B40 ; ===========================================================================
.rodata:0000000000006B40
.rodata:0000000000006B40 ; Segment type: Pure data
.rodata:0000000000006B40 ; Segment permissions: Read
.rodata:0000000000006B40 _rodata         segment align_32 public 'CONST' use64
.rodata:0000000000006B40                 assume cs:_rodata
.rodata:0000000000006B40                 ;org 6B40h
.rodata:0000000000006B40                 public _IO_stdin_used
.rodata:0000000000006B40 _IO_stdin_used  db    1
.rodata:0000000000006B41                 db    0
.rodata:0000000000006B42                 db    2
.rodata:0000000000006B43                 db    0
.rodata:0000000000006B44 ; const char file[]
.rodata:0000000000006B44 file            db '../coreutils-8.31/src/env.c',0
.rodata:0000000000006B44                                         ; DATA XREF: main+12D2↑o
.rodata:0000000000006B44                                         ; main+12F1↑o ...
.rodata:0000000000006B60 ; const char aStrStr[]
.rodata:0000000000006B60 aStrStr         db 'str && *str == ',27h,'$',27h,0
.rodata:0000000000006B60                                         ; DATA XREF: extract_varname+117↑o
.rodata:0000000000006B73 aIgnore         db 'IGNORE',0           ; DATA XREF: main+C3B↑o
.rodata:0000000000006B73                                         ; list_signal_handling+E6↑o
.rodata:0000000000006B7A ; const char delim[]
.rodata:0000000000006B7A delim           db ',',0                ; DATA XREF: list_signal_handling+ED↑o
.rodata:0000000000006B7A                                         ; parse_signal_action_params+2C↑o ...
.rodata:0000000000006B7C a10s2dSSS       db '%-10s (%2d): %s%s%s',0Ah,0
.rodata:0000000000006B7C                                         ; DATA XREF: list_signal_handling+95↑o
.rodata:0000000000006B91 aEnv            db 'env',0              ; DATA XREF: main+3C8↑o
.rodata:0000000000006B91                                         ; usage+27E↑o ...
.rodata:0000000000006B95 asc_6B95        db '[',0                ; DATA XREF: usage+28A↑o
.rodata:0000000000006B97 aTestInvocation db 'test invocation',0  ; DATA XREF: usage+2B1↑o
.rodata:0000000000006BA7 aMultiCallInvoc db 'Multi-call invocation',0
.rodata:0000000000006BA7                                         ; DATA XREF: usage+2E1↑o
.rodata:0000000000006BA7                                         ; usage+3DC↑o ...
.rodata:0000000000006BBD aSha224sum      db 'sha224sum',0        ; DATA XREF: usage+2F2↑o
.rodata:0000000000006BC7 aSha2Utilities  db 'sha2 utilities',0   ; DATA XREF: usage+2FE↑o
.rodata:0000000000006BD6 aSha256sum      db 'sha256sum',0        ; DATA XREF: usage+291↑o
.rodata:0000000000006BE0 aSha384sum      db 'sha384sum',0        ; DATA XREF: usage+2BD↑o
.rodata:0000000000006BEA aSha512sum      db 'sha512sum',0        ; DATA XREF: usage+2D5↑o
.rodata:0000000000006BF4 ; const char aSOnlineHelpS[]
.rodata:0000000000006BF4 aSOnlineHelpS   db 0Ah                  ; DATA XREF: usage+34A↑o
.rodata:0000000000006BF4                 db '%s online help: <%s>',0Ah,0
.rodata:0000000000006C0B unk_6C0B        db  47h ; G             ; DATA XREF: main+3C1↑o
.rodata:0000000000006C0B                                         ; usage+366↑o ...
.rodata:0000000000006C0C                 db  4Eh ; N
.rodata:0000000000006C0D                 db  55h ; U
.rodata:0000000000006C0E                 db  20h
.rodata:0000000000006C0F ; const char domainname[]
.rodata:0000000000006C0F domainname      db 'coreutils',0        ; DATA XREF: main+4B↑o
.rodata:0000000000006C0F                                         ; main+57↑o ...
.rodata:0000000000006C19 ; const char s2[]
.rodata:0000000000006C19 s2              db 'en_',0              ; DATA XREF: usage+38D↑o
.rodata:0000000000006C19                                         ; usage+44E↑o
.rodata:0000000000006C1D ; const char aFullDocumentat[]
.rodata:0000000000006C1D aFullDocumentat db 'Full documentation <%s%s>',0Ah,0
.rodata:0000000000006C1D                                         ; DATA XREF: usage:loc_3839↑o
.rodata:0000000000006C1D                                         ; usage:loc_38F6↑o
.rodata:0000000000006C38 ; const char aSInvalidSignal[]
.rodata:0000000000006C38 aSInvalidSignal db '%s: invalid signal',0
.rodata:0000000000006C38                                         ; DATA XREF: parse_signal_action_params+A0↑o
.rodata:0000000000006C38                                         ; parse_block_signal_params+F0↑o ...
.rodata:0000000000006C4B aFailureIgnored db ' (failure ignored)',0
.rodata:0000000000006C4B                                         ; DATA XREF: main+C15↑o
.rodata:0000000000006C5E aDefault        db 'DEFAULT',0          ; DATA XREF: main+C1F↑o
.rodata:0000000000006C66 unk_6C66        db  55h ; U             ; DATA XREF: main+1119↑o
.rodata:0000000000006C67                 db  4Eh ; N
.rodata:0000000000006C68 aBlock          db 'BLOCK',0            ; DATA XREF: main+10C3↑o
.rodata:0000000000006C68                                         ; list_signal_handling+70↑o ...
.rodata:0000000000006C6E ; const char dirname[]
.rodata:0000000000006C6E dirname         db '/usr/local/share/locale',0
.rodata:0000000000006C6E                                         ; DATA XREF: main+44↑o
.rodata:0000000000006C86 ; const char assertion[]
.rodata:0000000000006C86 assertion       db '!(sq && dq)',0      ; DATA XREF: main+12D9↑o
.rodata:0000000000006C86                                         ; main+12F8↑o
.rodata:0000000000006C92 ; const char msgid[]
.rodata:0000000000006C92 msgid           db 'invalid sequence ',27h,'\%c',27h,' in -S',0
.rodata:0000000000006C92                                         ; DATA XREF: main:loc_1F13↑o
.rodata:0000000000006CAF ; const char accept[]
.rodata:0000000000006CAF accept          db ' ',9,0              ; DATA XREF: main+723↑o
.rodata:0000000000006CAF                                         ; main+33↑o ...
.rodata:0000000000006CB2 ; const char a0[]
.rodata:0000000000006CB2 a0              db '0',0                ; DATA XREF: main+13A9↑o
.rodata:0000000000006CB4 aExpandingSInto db 'expanding ${%s} into %s',0Ah,0
.rodata:0000000000006CB4                                         ; DATA XREF: main+FB2↑o
.rodata:0000000000006CCD aSplitSS        db 'split -S:  %s',0Ah,0
.rodata:0000000000006CCD                                         ; DATA XREF: main+548↑o
.rodata:0000000000006CDC aIntoS          db ' into:    %s',0Ah,0 ; DATA XREF: main+FF2↑o
.rodata:0000000000006CEA aS              db '     &    %s',0Ah,0 ; DATA XREF: main+DD1↑o
.rodata:0000000000006CF8 ; const char aInvalidOptionC[]
.rodata:0000000000006CF8 aInvalidOptionC db 'invalid option -- ',27h,'%c',27h,0
.rodata:0000000000006CF8                                         ; DATA XREF: main:loc_2E3C↑o
.rodata:0000000000006D0F aDavidMackenzie db 'David MacKenzie',0  ; DATA XREF: main+3B2↑o
.rodata:0000000000006D1F aRichardMlynari db 'Richard Mlynarik',0 ; DATA XREF: main+3B9↑o
.rodata:0000000000006D30 aAssafGordon    db 'Assaf Gordon',0     ; DATA XREF: main+39B↑o
.rodata:0000000000006D3D aCleaningEnviro db 'cleaning environ',0Ah,0
.rodata:0000000000006D3D                                         ; DATA XREF: main+93A↑o
.rodata:0000000000006D4F aUnsetS         db 'unset:    %s',0Ah,0 ; DATA XREF: main+D66↑o
.rodata:0000000000006D5D ; const char aCannotUnsetS[]
.rodata:0000000000006D5D aCannotUnsetS   db 'cannot unset %s',0  ; DATA XREF: main+1275↑o
.rodata:0000000000006D6D aSetenvS        db 'setenv:   %s',0Ah,0 ; DATA XREF: main+973↑o
.rodata:0000000000006D7B ; const char aCannotSetS[]
.rodata:0000000000006D7B aCannotSetS     db 'cannot set %s',0    ; DATA XREF: main+13CD↑o
.rodata:0000000000006D89 aSC             db '%s%c',0             ; DATA XREF: main+AE6↑o
.rodata:0000000000006D89                                         ; .data.rel.ro:0000000000209BA8↓o
.rodata:0000000000006D8E aResetSignalSDT db 'Reset signal %s (%d) to %s%s',0Ah,0
.rodata:0000000000006D8E                                         ; DATA XREF: main+C2D↑o
.rodata:0000000000006DAC aChdirS         db 'chdir:    %s',0Ah,0 ; DATA XREF: main+E8C↑o
.rodata:0000000000006DBA ; const char aCannotChangeDi[]
.rodata:0000000000006DBA aCannotChangeDi db 'cannot change directory to %s',0
.rodata:0000000000006DBA                                         ; DATA XREF: main+1432↑o
.rodata:0000000000006DD8 aExecutingS     db 'executing: %s',0Ah,0
.rodata:0000000000006DD8                                         ; DATA XREF: main+1023↑o
.rodata:0000000000006DE7 aArgDS          db '   arg[%d]= %s',0Ah,0
.rodata:0000000000006DE7                                         ; DATA XREF: main+102F↑o
.rodata:0000000000006DF7 aIgnoreEnvironm db 'ignore-environment',0
.rodata:0000000000006DF7                                         ; DATA XREF: .data.rel.ro:longopts↓o
.rodata:0000000000006E0A aNull           db 'null',0             ; DATA XREF: .data.rel.ro:0000000000209A00↓o
.rodata:0000000000006E0F aUnset          db 'unset',0            ; DATA XREF: .data.rel.ro:0000000000209A20↓o
.rodata:0000000000006E15 aChdir_0        db 'chdir',0            ; DATA XREF: .data.rel.ro:0000000000209A40↓o
.rodata:0000000000006E1B aDefaultSignal  db 'default-signal',0   ; DATA XREF: .data.rel.ro:0000000000209A60↓o
.rodata:0000000000006E2A aIgnoreSignal   db 'ignore-signal',0    ; DATA XREF: .data.rel.ro:0000000000209A80↓o
.rodata:0000000000006E38 aBlockSignal    db 'block-signal',0     ; DATA XREF: .data.rel.ro:0000000000209AA0↓o
.rodata:0000000000006E45 aListSignalHand_0 db 'list-signal-handling',0
.rodata:0000000000006E45                                         ; DATA XREF: .data.rel.ro:0000000000209AC0↓o
.rodata:0000000000006E5A aDebug          db 'debug',0            ; DATA XREF: .data.rel.ro:0000000000209AE0↓o
.rodata:0000000000006E60 aSplitString    db 'split-string',0     ; DATA XREF: .data.rel.ro:0000000000209B00↓o
.rodata:0000000000006E6D aHelp           db 'help',0             ; DATA XREF: .data.rel.ro:0000000000209B20↓o
.rodata:0000000000006E72 aVersion        db 'version',0          ; DATA XREF: .data.rel.ro:0000000000209B40↓o
.rodata:0000000000006E7A                 align 20h
.rodata:0000000000006E80 ; const char aFailedToGetSig[]
.rodata:0000000000006E80 aFailedToGetSig db 'failed to get signal process mask',0
.rodata:0000000000006E80                                         ; DATA XREF: main:loc_2F9D↑o
.rodata:0000000000006E80                                         ; list_signal_handling:loc_3455↑o
.rodata:0000000000006EA2                 align 8
.rodata:0000000000006EA8 ; const char aTrySHelpForMor[]
.rodata:0000000000006EA8 aTrySHelpForMor db 'Try ',27h,'%s --help',27h,' for more information.',0Ah,0
.rodata:0000000000006EA8                                         ; DATA XREF: usage+2F↑o
.rodata:0000000000006ECF                 align 10h
.rodata:0000000000006ED0 ; const char aUsageSOptionNa[]
.rodata:0000000000006ED0 aUsageSOptionNa db 'Usage: %s [OPTION]... [-] [NAME=VALUE]... [COMMAND [ARG]...]',0Ah
.rodata:0000000000006ED0                                         ; DATA XREF: usage:loc_34ED↑o
.rodata:0000000000006ED0                 db 0
.rodata:0000000000006F0E                 align 10h
.rodata:0000000000006F10 ; const char aSetEachNameToV[]
.rodata:0000000000006F10 aSetEachNameToV db 'Set each NAME to VALUE in the environment and run COMMAND.',0Ah,0
.rodata:0000000000006F10                                         ; DATA XREF: usage+84↑o
.rodata:0000000000006F4C                 align 10h
.rodata:0000000000006F50 ; const char aMandatoryArgum[]
.rodata:0000000000006F50 aMandatoryArgum db 0Ah                  ; DATA XREF: usage+A9↑o
.rodata:0000000000006F50                 db 'Mandatory arguments to long options are mandatory for short optio'
.rodata:0000000000006F50                 db 'ns too.',0Ah,0
.rodata:0000000000006F9B                 align 20h
.rodata:0000000000006FA0 ; const char aIIgnoreEnviron[]
.rodata:0000000000006FA0 aIIgnoreEnviron db '  -i, --ignore-environment  start with an empty environment',0Ah
.rodata:0000000000006FA0                                         ; DATA XREF: usage+CE↑o
.rodata:0000000000006FA0                 db '  -0, --null           end each output line with NUL, not newline'
.rodata:0000000000006FA0                 db 0Ah
.rodata:0000000000006FA0                 db '  -u, --unset=NAME     remove variable from the environment',0Ah,0
.rodata:000000000000705B                 align 20h
.rodata:0000000000007060 ; const char aCChdirDirChang[]
.rodata:0000000000007060 aCChdirDirChang db '  -C, --chdir=DIR      change working directory to DIR',0Ah,0
.rodata:0000000000007060                                         ; DATA XREF: usage+F3↑o
.rodata:0000000000007098 ; const char aSSplitStringSP[]
.rodata:0000000000007098 aSSplitStringSP db '  -S, --split-string=S  process and split S into separate argumen'
.rodata:0000000000007098                                         ; DATA XREF: usage+118↑o
.rodata:0000000000007098                 db 'ts;',0Ah
.rodata:0000000000007098                 db '                        used to pass multiple arguments on sheban'
.rodata:0000000000007098                 db 'g lines',0Ah,0
.rodata:0000000000007127                 align 8
.rodata:0000000000007128 ; const char aBlockSignalSig[]
.rodata:0000000000007128 aBlockSignalSig db '      --block-signal[=SIG]    block delivery of SIG signal(s) to '
.rodata:0000000000007128                                         ; DATA XREF: usage+13D↑o
.rodata:0000000000007128                 db 'COMMAND',0Ah,0
.rodata:0000000000007172                 align 8
.rodata:0000000000007178 ; const char aDefaultSignalS[]
.rodata:0000000000007178 aDefaultSignalS db '      --default-signal[=SIG]  reset handling of SIG signal(s) to '
.rodata:0000000000007178                                         ; DATA XREF: usage+162↑o
.rodata:0000000000007178                 db 'the default',0Ah,0
.rodata:00000000000071C6                 align 8
.rodata:00000000000071C8 ; const char aIgnoreSignalSi[]
.rodata:00000000000071C8 aIgnoreSignalSi db '      --ignore-signal[=SIG]   set handling of SIG signals(s) to d'
.rodata:00000000000071C8                                         ; DATA XREF: usage+187↑o
.rodata:00000000000071C8                 db 'o nothing',0Ah,0
.rodata:0000000000007214                 align 8
.rodata:0000000000007218 ; const char aListSignalHand[]
.rodata:0000000000007218 aListSignalHand db '      --list-signal-handling  list non default signal handling to'
.rodata:0000000000007218                                         ; DATA XREF: usage+1AC↑o
.rodata:0000000000007218                 db ' stderr',0Ah,0
.rodata:0000000000007262                 align 8
.rodata:0000000000007268 ; const char aVDebugPrintVer[]
.rodata:0000000000007268 aVDebugPrintVer db '  -v, --debug          print verbose information for each process'
.rodata:0000000000007268                                         ; DATA XREF: usage+1D1↑o
.rodata:0000000000007268                 db 'ing step',0Ah,0
.rodata:00000000000072B3                 align 8
.rodata:00000000000072B8 ; const char aHelpDisplayThi[]
.rodata:00000000000072B8 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.rodata:00000000000072B8                                         ; DATA XREF: usage+1F6↑o
.rodata:00000000000072E5                 align 8
.rodata:00000000000072E8 ; const char aVersionOutputV[]
.rodata:00000000000072E8 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.rodata:00000000000072E8                                         ; DATA XREF: usage+21B↑o
.rodata:000000000000731E                 align 20h
.rodata:0000000000007320 ; const char aAMereImpliesII[]
.rodata:0000000000007320 aAMereImpliesII db 0Ah                  ; DATA XREF: usage+240↑o
.rodata:0000000000007320                 db 'A mere - implies -i.  If no COMMAND, print the resulting environm'
.rodata:0000000000007320                 db 'ent.',0Ah,0
.rodata:0000000000007368 ; const char aSigMayBeASigna[]
.rodata:0000000000007368 aSigMayBeASigna db 0Ah                  ; DATA XREF: usage+265↑o
.rodata:0000000000007368                 db 'SIG may be a signal name like ',27h,'PIPE',27h,', or a signal num'
.rodata:0000000000007368                 db 'ber like ',27h,'13',27h,'.',0Ah
.rodata:0000000000007368                 db 'Without SIG, all known signals are included.  Multiple signals ca'
.rodata:0000000000007368                 db 'n be',0Ah
.rodata:0000000000007368                 db 'comma-separated.',0Ah,0
.rodata:0000000000007405                 align 8
.rodata:0000000000007408 aHttpsWwwGnuOrg db 'https://www.gnu.org/software/coreutils/',0
.rodata:0000000000007408                                         ; DATA XREF: usage+35F↑o
.rodata:0000000000007408                                         ; usage+3C3↑o ...
.rodata:0000000000007430 ; const char aReportAnyTrans[]
.rodata:0000000000007430 aReportAnyTrans db 'Report any translation bugs to <https://translationproject.org/te'
.rodata:0000000000007430                                         ; DATA XREF: usage+4B7↑o
.rodata:0000000000007430                 db 'am/>',0Ah,0
.rodata:0000000000007477                 align 8
.rodata:0000000000007478 ; const char aOrAvailableLoc[]
.rodata:0000000000007478 aOrAvailableLoc db 'or available locally via: info ',27h,'(coreutils) %s%s',27h,0Ah,0
.rodata:0000000000007478                                         ; DATA XREF: usage:loc_387E↑o
.rodata:00000000000074AB                 align 10h
.rodata:00000000000074B0 ; const char aCMustNotAppear[]
.rodata:00000000000074B0 aCMustNotAppear db 27h,'\c',27h,' must not appear in double-quoted -S string',0
.rodata:00000000000074B0                                         ; DATA XREF: main:loc_306F↑o
.rodata:00000000000074E0 ; const char aInvalidBacksla[]
.rodata:00000000000074E0 aInvalidBacksla db 'invalid backslash at end of string in -S',0
.rodata:00000000000074E0                                         ; DATA XREF: main:loc_2F17↑o
.rodata:0000000000007509                 align 10h
.rodata:0000000000007510 ; const char aOnlyVarnameExp[]
.rodata:0000000000007510 aOnlyVarnameExp db 'only ${VARNAME} expansion is supported, error at: %s',0
.rodata:0000000000007510                                         ; DATA XREF: main:loc_2E70↑o
.rodata:0000000000007545                 align 8
.rodata:0000000000007548 ; const char aNoTerminatingQ[]
.rodata:0000000000007548 aNoTerminatingQ db 'no terminating quote in -S string',0
.rodata:0000000000007548                                         ; DATA XREF: main:loc_2F79↑o
.rodata:000000000000756A                 align 10h
.rodata:0000000000007570 aReplacingSWith db 'replacing ${%s} with null string',0Ah,0
.rodata:0000000000007570                                         ; DATA XREF: main+ED2↑o
.rodata:0000000000007592                 align 8
.rodata:0000000000007598 ; const char aUseVSToPassOpt[]
.rodata:0000000000007598 aUseVSToPassOpt db 'use -[v]S to pass options in shebang lines',0
.rodata:0000000000007598                                         ; DATA XREF: main+F5D↑o
.rodata:0000000000007598                                         ; main+11F4↑o
.rodata:00000000000075C3                 align 8
.rodata:00000000000075C8 ; const char aCannotSpecifyN[]
.rodata:00000000000075C8 aCannotSpecifyN db 'cannot specify --null (-0) with command',0
.rodata:00000000000075C8                                         ; DATA XREF: main:loc_2AB6↑o
.rodata:00000000000075F0 aMustSpecifyCom db 'must specify command with --chdir (-C)',0
.rodata:00000000000075F0                                         ; DATA XREF: main+138F↑o
.rodata:0000000000007617                 align 8
.rodata:0000000000007618 ; const char aFailedToGetSig_0[]
.rodata:0000000000007618 aFailedToGetSig_0 db 'failed to get signal action for signal %d',0
.rodata:0000000000007618                                         ; DATA XREF: main:loc_2FC6↑o
.rodata:0000000000007642                 align 8
.rodata:0000000000007648 ; const char aFailedToSetSig_0[]
.rodata:0000000000007648 aFailedToSetSig_0 db 'failed to set signal action for signal %d',0
.rodata:0000000000007648                                         ; DATA XREF: main:loc_2EA4↑o
.rodata:0000000000007672                 align 8
.rodata:0000000000007678 aSignalSDMaskSe db 'signal %s (%d) mask set to %s',0Ah,0
.rodata:0000000000007678                                         ; DATA XREF: main+1141↑o
.rodata:0000000000007697                 align 8
.rodata:0000000000007698 ; const char aFailedToSetSig[]
.rodata:0000000000007698 aFailedToSetSig db 'failed to set signal process mask',0
.rodata:0000000000007698                                         ; DATA XREF: main+117B↑o
.rodata:00000000000076BA                 align 20h
.rodata:00000000000076C0 ; const char _PRETTY_FUNCTION___7616[]
.rodata:00000000000076C0 __PRETTY_FUNCTION___7616 db 'scan_varname',0
.rodata:00000000000076C0                                         ; DATA XREF: extract_varname:loc_32F9↑o
.rodata:00000000000076CD                 align 10h
.rodata:00000000000076D0 ; const char _PRETTY_FUNCTION___7612[]
.rodata:00000000000076D0 __PRETTY_FUNCTION___7612 db 'escape_char',0
.rodata:00000000000076D0                                         ; DATA XREF: main:loc_300B↑o
.rodata:00000000000076DC                 align 20h
.rodata:00000000000076E0 ; const char _PRETTY_FUNCTION___7637[]
.rodata:00000000000076E0 __PRETTY_FUNCTION___7637 db 'validate_split_str',0
.rodata:00000000000076E0                                         ; DATA XREF: main:loc_2F3B↑o
.rodata:00000000000076E0                                         ; main:loc_2F5A↑o
.rodata:00000000000076F3                 align 8
.rodata:00000000000076F8 ; const char shortopts[]
.rodata:00000000000076F8 shortopts       db '+C:iS:u:v0 ',9,0    ; DATA XREF: main+CB↑o
.rodata:0000000000007705 ; const char s[]
.rodata:0000000000007705 s               db 'abcdefghijklmnopqrstuvwxyz',0
.rodata:0000000000007705                                         ; DATA XREF: operand2sig+CF↑o
.rodata:0000000000007720 a831            db '8.31',0             ; DATA XREF: .data:Version↓o
.rodata:0000000000007725 ; const char aWriteError[]
.rodata:0000000000007725 aWriteError     db 'write error',0      ; DATA XREF: close_stdout:loc_3F13↑o
.rodata:0000000000007731 ; const char format[]
.rodata:0000000000007731 format          db '%s: %s',0           ; DATA XREF: close_stdout+6C↑o
.rodata:0000000000007731                                         ; main+D32↑o ...
.rodata:0000000000007738 aANullArgv0WasP db 'A NULL argv[0] was passed through an exec system call.',0Ah,0
.rodata:0000000000007738                                         ; DATA XREF: set_program_name+84↑o
.rodata:0000000000007770 aLibs           db '/.libs/',0          ; DATA XREF: set_program_name+2C↑o
.rodata:0000000000007778 aLt             db 'lt-',0              ; DATA XREF: set_program_name+44↑o
.rodata:0000000000007778                                         ; main+A42↑o
.rodata:000000000000777C unk_777C        db 0E2h                 ; DATA XREF: gettext_quote+CE↑o
.rodata:000000000000777D                 db  80h
.rodata:000000000000777E                 db  98h
.rodata:000000000000777F                 db    0
.rodata:0000000000007780 unk_7780        db 0E2h                 ; DATA XREF: gettext_quote+D5↑o
.rodata:0000000000007781                 db  80h
.rodata:0000000000007782                 db  99h
.rodata:0000000000007783                 db    0
.rodata:0000000000007784 unk_7784        db 0A1h                 ; DATA XREF: gettext_quote+74↑o
.rodata:0000000000007785                 db    7
.rodata:0000000000007786                 db  65h ; e
.rodata:0000000000007787                 db    0
.rodata:0000000000007788 unk_7788        db 0A1h                 ; DATA XREF: gettext_quote+7B↑o
.rodata:0000000000007789                 db 0AFh
.rodata:000000000000778A                 db    0
.rodata:000000000000778B unk_778B        db  22h ; "             ; DATA XREF: gettext_quote:loc_4040↑o
.rodata:000000000000778B                                         ; quotearg_buffer_restyled:loc_4DFB↑o ...
.rodata:000000000000778C                 db    0
.rodata:000000000000778D ; const char asc_778D[2]
.rodata:000000000000778D asc_778D        db '`',0                ; DATA XREF: quotearg_buffer_restyled+D9B↑o
.rodata:000000000000778D                                         ; quotearg_buffer_restyled+DB6↑o
.rodata:000000000000778F aLiteral        db 'literal',0          ; DATA XREF: .data.rel.ro:quoting_style_args↓o
.rodata:0000000000007797 aShell          db 'shell',0            ; DATA XREF: .data.rel.ro:0000000000209B88↓o
.rodata:000000000000779D aShellAlways    db 'shell-always',0     ; DATA XREF: .data.rel.ro:0000000000209B90↓o
.rodata:00000000000077AA aShellEscape    db 'shell-escape',0     ; DATA XREF: .data.rel.ro:0000000000209B98↓o
.rodata:00000000000077AA                                         ; .data.rel.ro:0000000000209BB8↓o
.rodata:00000000000077B7 aShellEscapeAlw db 'shell-escape-always',0
.rodata:00000000000077B7                                         ; DATA XREF: .data.rel.ro:0000000000209BA0↓o
.rodata:00000000000077CB aCMaybe         db 'c-maybe',0          ; DATA XREF: .data.rel.ro:0000000000209BB0↓o
.rodata:00000000000077D3 aClocale        db 'clocale',0          ; DATA XREF: .data.rel.ro:0000000000209BC8↓o
.rodata:00000000000077DB                 align 20h
.rodata:00000000000077E0 jpt_41A1        dd offset loc_4F4A - 77E0h
.rodata:00000000000077E0                                         ; DATA XREF: quotearg_buffer_restyled+80↑o
.rodata:00000000000077E0                                         ; quotearg_buffer_restyled+8A↑r
.rodata:00000000000077E0                 dd offset loc_41A3 - 77E0h ; jump table for switch statement
.rodata:00000000000077E0                 dd offset loc_5178 - 77E0h
.rodata:00000000000077E0                 dd offset loc_4F84 - 77E0h
.rodata:00000000000077E0                 dd offset loc_4D74 - 77E0h
.rodata:00000000000077E0                 dd offset loc_4DD0 - 77E0h
.rodata:00000000000077E0                 dd offset loc_4E25 - 77E0h
.rodata:00000000000077E0                 dd offset loc_4E6A - 77E0h
.rodata:00000000000077E0                 dd offset loc_4EA4 - 77E0h
.rodata:00000000000077E0                 dd offset loc_4EA4 - 77E0h
.rodata:00000000000077E0                 dd offset loc_4EA4 - 77E0h
.rodata:000000000000780C jpt_42FE        dd offset loc_4520 - 780Ch, offset def_42FE - 780Ch, offset def_42FE - 780Ch
.rodata:000000000000780C                                         ; DATA XREF: quotearg_buffer_restyled+1DD↑o
.rodata:000000000000780C                                         ; quotearg_buffer_restyled+1E7↑r
.rodata:000000000000780C                 dd offset def_42FE - 780Ch, offset def_42FE - 780Ch, offset def_42FE - 780Ch ; jump table for switch statement
.rodata:000000000000780C                 dd offset def_42FE - 780Ch, offset loc_4560 - 780Ch, offset loc_4468 - 780Ch
.rodata:000000000000780C                 dd offset loc_4428 - 780Ch, offset loc_45F0 - 780Ch, offset loc_45E0 - 780Ch
.rodata:000000000000780C                 dd offset loc_45D0 - 780Ch, offset loc_45C0 - 780Ch, offset def_42FE - 780Ch
.rodata:000000000000780C                 dd offset def_42FE - 780Ch, offset def_42FE - 780Ch, offset def_42FE - 780Ch
.rodata:000000000000780C                 dd offset def_42FE - 780Ch, offset def_42FE - 780Ch, offset def_42FE - 780Ch
.rodata:000000000000780C                 dd offset def_42FE - 780Ch, offset def_42FE - 780Ch, offset def_42FE - 780Ch
.rodata:000000000000780C                 dd offset def_42FE - 780Ch, offset def_42FE - 780Ch, offset def_42FE - 780Ch
.rodata:000000000000780C                 dd offset def_42FE - 780Ch, offset def_42FE - 780Ch, offset def_42FE - 780Ch
.rodata:000000000000780C                 dd offset def_42FE - 780Ch, offset def_42FE - 780Ch, offset loc_45B0 - 780Ch
.rodata:000000000000780C                 dd offset loc_45A0 - 780Ch, offset loc_45A0 - 780Ch, offset loc_4570 - 780Ch
.rodata:000000000000780C                 dd offset loc_45A0 - 780Ch, offset loc_4548 - 780Ch, offset loc_45A0 - 780Ch
.rodata:000000000000780C                 dd offset loc_4403 - 780Ch, offset loc_45A0 - 780Ch, offset loc_45A0 - 780Ch
.rodata:000000000000780C                 dd offset loc_45A0 - 780Ch, offset loc_4548 - 780Ch, offset loc_4548 - 780Ch
.rodata:000000000000780C                 dd offset loc_4548 - 780Ch, offset loc_4548 - 780Ch, offset loc_4548 - 780Ch
.rodata:000000000000780C                 dd offset loc_4548 - 780Ch, offset loc_4548 - 780Ch, offset loc_4548 - 780Ch
.rodata:000000000000780C                 dd offset loc_4548 - 780Ch, offset loc_4548 - 780Ch, offset loc_4548 - 780Ch
.rodata:000000000000780C                 dd offset loc_4548 - 780Ch, offset loc_4548 - 780Ch, offset loc_4548 - 780Ch
.rodata:000000000000780C                 dd offset loc_4548 - 780Ch, offset loc_4548 - 780Ch, offset loc_45A0 - 780Ch
.rodata:000000000000780C                 dd offset loc_45A0 - 780Ch, offset loc_45A0 - 780Ch, offset loc_45A0 - 780Ch
.rodata:000000000000780C                 dd offset loc_43D3 - 780Ch, offset def_42FE - 780Ch, offset loc_4548 - 780Ch
.rodata:000000000000780C                 dd offset loc_4548 - 780Ch, offset loc_4548 - 780Ch, offset loc_4548 - 780Ch
.rodata:000000000000780C                 dd offset loc_4548 - 780Ch, offset loc_4548 - 780Ch, offset loc_4548 - 780Ch
.rodata:000000000000780C                 dd offset loc_4548 - 780Ch, offset loc_4548 - 780Ch, offset loc_4548 - 780Ch
.rodata:000000000000780C                 dd offset loc_4548 - 780Ch, offset loc_4548 - 780Ch, offset loc_4548 - 780Ch
.rodata:000000000000780C                 dd offset loc_4548 - 780Ch, offset loc_4548 - 780Ch, offset loc_4548 - 780Ch
.rodata:000000000000780C                 dd offset loc_4548 - 780Ch, offset loc_4548 - 780Ch, offset loc_4548 - 780Ch
.rodata:000000000000780C                 dd offset loc_4548 - 780Ch, offset loc_4548 - 780Ch, offset loc_4548 - 780Ch
.rodata:000000000000780C                 dd offset loc_4548 - 780Ch, offset loc_4548 - 780Ch, offset loc_4548 - 780Ch
.rodata:000000000000780C                 dd offset loc_4548 - 780Ch, offset loc_45A0 - 780Ch, offset loc_4478 - 780Ch
.rodata:000000000000780C                 dd offset loc_4548 - 780Ch, offset loc_45A0 - 780Ch, offset loc_4548 - 780Ch
.rodata:000000000000780C                 dd offset loc_45A0 - 780Ch, offset loc_4548 - 780Ch, offset loc_4548 - 780Ch
.rodata:000000000000780C                 dd offset loc_4548 - 780Ch, offset loc_4548 - 780Ch, offset loc_4548 - 780Ch
.rodata:000000000000780C                 dd offset loc_4548 - 780Ch, offset loc_4548 - 780Ch, offset loc_4548 - 780Ch
.rodata:000000000000780C                 dd offset loc_4548 - 780Ch, offset loc_4548 - 780Ch, offset loc_4548 - 780Ch
.rodata:000000000000780C                 dd offset loc_4548 - 780Ch, offset loc_4548 - 780Ch, offset loc_4548 - 780Ch
.rodata:000000000000780C                 dd offset loc_4548 - 780Ch, offset loc_4548 - 780Ch, offset loc_4548 - 780Ch
.rodata:000000000000780C                 dd offset loc_4548 - 780Ch, offset loc_4548 - 780Ch, offset loc_4548 - 780Ch
.rodata:000000000000780C                 dd offset loc_4548 - 780Ch, offset loc_4548 - 780Ch, offset loc_4548 - 780Ch
.rodata:000000000000780C                 dd offset loc_4548 - 780Ch, offset loc_4548 - 780Ch, offset loc_4548 - 780Ch
.rodata:000000000000780C                 dd offset loc_4303 - 780Ch, offset loc_45A0 - 780Ch, offset loc_4303 - 780Ch
.rodata:000000000000780C                 dd offset loc_4570 - 780Ch
.rodata:0000000000007A08 jpt_468A        dd offset loc_46F0 - 7A08h, offset def_468A - 7A08h, offset def_468A - 7A08h
.rodata:0000000000007A08                                         ; DATA XREF: quotearg_buffer_restyled+569↑o
.rodata:0000000000007A08                                         ; quotearg_buffer_restyled+573↑r
.rodata:0000000000007A08                 dd offset def_468A - 7A08h, offset def_468A - 7A08h, offset def_468A - 7A08h ; jump table for switch statement
.rodata:0000000000007A08                 dd offset def_468A - 7A08h, offset loc_46E0 - 7A08h, offset loc_4830 - 7A08h
.rodata:0000000000007A08                 dd offset loc_4818 - 7A08h, offset loc_46C8 - 7A08h, offset loc_4808 - 7A08h
.rodata:0000000000007A08                 dd offset loc_46B0 - 7A08h, offset loc_47F0 - 7A08h, offset def_468A - 7A08h
.rodata:0000000000007A08                 dd offset def_468A - 7A08h, offset def_468A - 7A08h, offset def_468A - 7A08h
.rodata:0000000000007A08                 dd offset def_468A - 7A08h, offset def_468A - 7A08h, offset def_468A - 7A08h
.rodata:0000000000007A08                 dd offset def_468A - 7A08h, offset def_468A - 7A08h, offset def_468A - 7A08h
.rodata:0000000000007A08                 dd offset def_468A - 7A08h, offset def_468A - 7A08h, offset def_468A - 7A08h
.rodata:0000000000007A08                 dd offset def_468A - 7A08h, offset def_468A - 7A08h, offset def_468A - 7A08h
.rodata:0000000000007A08                 dd offset def_468A - 7A08h, offset def_468A - 7A08h, offset loc_47D8 - 7A08h
.rodata:0000000000007A08                 dd offset loc_47C0 - 7A08h, offset loc_47C0 - 7A08h, offset loc_47A8 - 7A08h
.rodata:0000000000007A08                 dd offset loc_47C0 - 7A08h, offset loc_4790 - 7A08h, offset loc_47C0 - 7A08h
.rodata:0000000000007A08                 dd offset loc_4400 - 7A08h, offset loc_47C0 - 7A08h, offset loc_47C0 - 7A08h
.rodata:0000000000007A08                 dd offset loc_47C0 - 7A08h, offset loc_4790 - 7A08h, offset loc_4790 - 7A08h
.rodata:0000000000007A08                 dd offset loc_4790 - 7A08h, offset loc_4790 - 7A08h, offset loc_4790 - 7A08h
.rodata:0000000000007A08                 dd offset loc_4790 - 7A08h, offset loc_4790 - 7A08h, offset loc_4790 - 7A08h
.rodata:0000000000007A08                 dd offset loc_4790 - 7A08h, offset loc_4790 - 7A08h, offset loc_4790 - 7A08h
.rodata:0000000000007A08                 dd offset loc_4790 - 7A08h, offset loc_4790 - 7A08h, offset loc_4790 - 7A08h
.rodata:0000000000007A08                 dd offset loc_4790 - 7A08h, offset loc_4790 - 7A08h, offset loc_47C0 - 7A08h
.rodata:0000000000007A08                 dd offset loc_47C0 - 7A08h, offset loc_47C0 - 7A08h, offset loc_47C0 - 7A08h
.rodata:0000000000007A08                 dd offset loc_43D0 - 7A08h, offset def_468A - 7A08h, offset loc_4790 - 7A08h
.rodata:0000000000007A08                 dd offset loc_4790 - 7A08h, offset loc_4790 - 7A08h, offset loc_4790 - 7A08h
.rodata:0000000000007A08                 dd offset loc_4790 - 7A08h, offset loc_4790 - 7A08h, offset loc_4790 - 7A08h
.rodata:0000000000007A08                 dd offset loc_4790 - 7A08h, offset loc_4790 - 7A08h, offset loc_4790 - 7A08h
.rodata:0000000000007A08                 dd offset loc_4790 - 7A08h, offset loc_4790 - 7A08h, offset loc_4790 - 7A08h
.rodata:0000000000007A08                 dd offset loc_4790 - 7A08h, offset loc_4790 - 7A08h, offset loc_4790 - 7A08h
.rodata:0000000000007A08                 dd offset loc_4790 - 7A08h, offset loc_4790 - 7A08h, offset loc_4790 - 7A08h
.rodata:0000000000007A08                 dd offset loc_4790 - 7A08h, offset loc_4790 - 7A08h, offset loc_4790 - 7A08h
.rodata:0000000000007A08                 dd offset loc_4790 - 7A08h, offset loc_4790 - 7A08h, offset loc_4790 - 7A08h
.rodata:0000000000007A08                 dd offset loc_4790 - 7A08h, offset loc_47C0 - 7A08h, offset loc_4690 - 7A08h
.rodata:0000000000007A08                 dd offset loc_4790 - 7A08h, offset loc_47C0 - 7A08h, offset loc_4790 - 7A08h
.rodata:0000000000007A08                 dd offset loc_47C0 - 7A08h, offset loc_4790 - 7A08h, offset loc_4790 - 7A08h
.rodata:0000000000007A08                 dd offset loc_4790 - 7A08h, offset loc_4790 - 7A08h, offset loc_4790 - 7A08h
.rodata:0000000000007A08                 dd offset loc_4790 - 7A08h, offset loc_4790 - 7A08h, offset loc_4790 - 7A08h
.rodata:0000000000007A08                 dd offset loc_4790 - 7A08h, offset loc_4790 - 7A08h, offset loc_4790 - 7A08h
.rodata:0000000000007A08                 dd offset loc_4790 - 7A08h, offset loc_4790 - 7A08h, offset loc_4790 - 7A08h
.rodata:0000000000007A08                 dd offset loc_4790 - 7A08h, offset loc_4790 - 7A08h, offset loc_4790 - 7A08h
.rodata:0000000000007A08                 dd offset loc_4790 - 7A08h, offset loc_4790 - 7A08h, offset loc_4790 - 7A08h
.rodata:0000000000007A08                 dd offset loc_4790 - 7A08h, offset loc_4790 - 7A08h, offset loc_4790 - 7A08h
.rodata:0000000000007A08                 dd offset loc_4790 - 7A08h, offset loc_4790 - 7A08h, offset loc_4790 - 7A08h
.rodata:0000000000007A08                 dd offset loc_4300 - 7A08h, offset loc_47C0 - 7A08h, offset loc_4300 - 7A08h
.rodata:0000000000007A08                 dd offset loc_47A8 - 7A08h
.rodata:0000000000007C04                 align 20h
.rodata:0000000000007C20                 public quoting_style_vals
.rodata:0000000000007C20 quoting_style_vals db    0
.rodata:0000000000007C21                 db    0
.rodata:0000000000007C22                 db    0
.rodata:0000000000007C23                 db    0
.rodata:0000000000007C24                 db    1
.rodata:0000000000007C25                 db    0
.rodata:0000000000007C26                 db    0
.rodata:0000000000007C27                 db    0
.rodata:0000000000007C28                 db    2
.rodata:0000000000007C29                 db    0
.rodata:0000000000007C2A                 db    0
.rodata:0000000000007C2B                 db    0
.rodata:0000000000007C2C                 db    3
.rodata:0000000000007C2D                 db    0
.rodata:0000000000007C2E                 db    0
.rodata:0000000000007C2F                 db    0
.rodata:0000000000007C30                 db    4
.rodata:0000000000007C31                 db    0
.rodata:0000000000007C32                 db    0
.rodata:0000000000007C33                 db    0
.rodata:0000000000007C34                 db    5
.rodata:0000000000007C35                 db    0
.rodata:0000000000007C36                 db    0
.rodata:0000000000007C37                 db    0
.rodata:0000000000007C38                 db    6
.rodata:0000000000007C39                 db    0
.rodata:0000000000007C3A                 db    0
.rodata:0000000000007C3B                 db    0
.rodata:0000000000007C3C                 db    7
.rodata:0000000000007C3D                 db    0
.rodata:0000000000007C3E                 db    0
.rodata:0000000000007C3F                 db    0
.rodata:0000000000007C40                 db    8
.rodata:0000000000007C41                 db    0
.rodata:0000000000007C42                 db    0
.rodata:0000000000007C43                 db    0
.rodata:0000000000007C44                 db    9
.rodata:0000000000007C45                 db    0
.rodata:0000000000007C46                 db    0
.rodata:0000000000007C47                 db    0
.rodata:0000000000007C48 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: version_etc_arn+23↑o
.rodata:0000000000007C54 aSS_0           db '%s %s',0Ah,0        ; DATA XREF: version_etc_arn+13E↑o
.rodata:0000000000007C5B ; const char aC_0[]
.rodata:0000000000007C5B aC_0            db '(C)',0              ; DATA XREF: version_etc_arn:loc_5CEC↑o
.rodata:0000000000007C5F ; const char aWrittenByS[]
.rodata:0000000000007C5F aWrittenByS     db 'Written by %s.',0Ah,0
.rodata:0000000000007C5F                                         ; DATA XREF: version_etc_arn+1BB↑o
.rodata:0000000000007C6F ; const char aWrittenBySAndS[]
.rodata:0000000000007C6F aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.rodata:0000000000007C6F                                         ; DATA XREF: version_etc_arn+1FC↑o
.rodata:0000000000007C86 ; const char aWrittenBySSAnd[]
.rodata:0000000000007C86 aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.rodata:0000000000007C86                                         ; DATA XREF: version_etc_arn+248↑o
.rodata:0000000000007CA2 ; const char aReportBugsToS[]
.rodata:0000000000007CA2 aReportBugsToS  db 0Ah                  ; DATA XREF: emit_bug_reporting_address+1↑o
.rodata:0000000000007CA2                 db 'Report bugs to: %s',0Ah,0
.rodata:0000000000007CB7 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.rodata:0000000000007CB7                                         ; DATA XREF: emit_bug_reporting_address+14↑o
.rodata:0000000000007CCD ; const char aSHomePageS[]
.rodata:0000000000007CCD aSHomePageS     db '%s home page: <%s>',0Ah,0
.rodata:0000000000007CCD                                         ; DATA XREF: emit_bug_reporting_address+2A↑o
.rodata:0000000000007CE1                 align 8
.rodata:0000000000007CE8 ; const char aLicenseGplv3Gn[]
.rodata:0000000000007CE8 aLicenseGplv3Gn db 0Ah                  ; DATA XREF: version_etc_arn+6E↑o
.rodata:0000000000007CE8                 db 'License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licen'
.rodata:0000000000007CE8                 db 'ses/gpl.html>.',0Ah
.rodata:0000000000007CE8                 db 'This is free software: you are free to change and redistribute it'
.rodata:0000000000007CE8                 db '.',0Ah
.rodata:0000000000007CE8                 db 'There is NO WARRANTY, to the extent permitted by law.',0Ah
.rodata:0000000000007CE8                 db 0Ah,0
.rodata:0000000000007DB4                 align 8
.rodata:0000000000007DB8 ; const char aWrittenBySSSAn[]
.rodata:0000000000007DB8 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000007DB8                                         ; DATA XREF: version_etc_arn:loc_5F40↑o
.rodata:0000000000007DB8                 db 'and %s.',0Ah,0
.rodata:0000000000007DD8 ; const char aWrittenBySSSSA[]
.rodata:0000000000007DD8 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000007DD8                                         ; DATA XREF: version_etc_arn+2EC↑o
.rodata:0000000000007DD8                 db '%s, and %s.',0Ah,0
.rodata:0000000000007DFC                 align 20h
.rodata:0000000000007E00 ; const char aWrittenBySSSSS_1[]
.rodata:0000000000007E00 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000007E00                                         ; DATA XREF: version_etc_arn+320↑o
.rodata:0000000000007E00                 db '%s, %s, and %s.',0Ah,0
.rodata:0000000000007E28 ; const char aWrittenBySSSSS_2[]
.rodata:0000000000007E28 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000007E28                                         ; DATA XREF: version_etc_arn+388↑o
.rodata:0000000000007E28                 db '%s, %s, %s, and %s.',0Ah,0
.rodata:0000000000007E54                 align 8
.rodata:0000000000007E58 ; const char aWrittenBySSSSS[]
.rodata:0000000000007E58 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000007E58                                         ; DATA XREF: version_etc_arn+B8↑o
.rodata:0000000000007E58                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000007E58                 db 'and %s.',0Ah,0
.rodata:0000000000007E88 ; const char aWrittenBySSSSS_0[]
.rodata:0000000000007E88 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000007E88                                         ; DATA XREF: version_etc_arn+168↑o
.rodata:0000000000007E88                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000007E88                 db '%s, and %s.',0Ah,0
.rodata:0000000000007EBC                 align 20h
.rodata:0000000000007EC0 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000007EC0                                         ; DATA XREF: version_etc_arn+3E5↑o
.rodata:0000000000007EC0                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000007EC0                 db '%s, %s, and others.',0Ah,0
.rodata:0000000000007EFC                 align 20h
.rodata:0000000000007F00 ; const char aGeneralHelpUsi[]
.rodata:0000000000007F00 aGeneralHelpUsi db 'General help using GNU software: <https://www.gnu.org/gethelp/>',0Ah
.rodata:0000000000007F00                                         ; DATA XREF: emit_bug_reporting_address+61↑o
.rodata:0000000000007F00                 db 0
.rodata:0000000000007F41                 align 8
.rodata:0000000000007F48 jpt_5D54        dd offset loc_5DD6 - 7F48h
.rodata:0000000000007F48                                         ; DATA XREF: version_etc_arn+96↑o
.rodata:0000000000007F48                                         ; version_etc_arn+9D↑r
.rodata:0000000000007F48                 dd offset loc_5E68 - 7F48h ; jump table for switch statement
.rodata:0000000000007F48                 dd offset loc_5EA8 - 7F48h
.rodata:0000000000007F48                 dd offset loc_5EF0 - 7F48h
.rodata:0000000000007F48                 dd offset loc_5F40 - 7F48h
.rodata:0000000000007F48                 dd offset loc_5F98 - 7F48h
.rodata:0000000000007F48                 dd offset loc_5FC8 - 7F48h
.rodata:0000000000007F48                 dd offset loc_6030 - 7F48h
.rodata:0000000000007F48                 dd offset loc_5D60 - 7F48h
.rodata:0000000000007F48                 dd offset loc_5E10 - 7F48h
.rodata:0000000000007F70                 align 20h
.rodata:0000000000007F80                 public version_etc_copyright
.rodata:0000000000007F80 version_etc_copyright db 'Copyright %s %d Free Software Foundation, Inc.',0
.rodata:0000000000007F80                                         ; DATA XREF: version_etc_arn+4F↑o
.rodata:0000000000007FAF ; const char aMemoryExhauste[]
.rodata:0000000000007FAF aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: xalloc_die↑o
.rodata:0000000000007FC0 aRtmin          db 'RTMIN',0            ; DATA XREF: str2sig+D2↑o
.rodata:0000000000007FC6 aRtmax          db 'RTMAX',0            ; DATA XREF: str2sig+F0↑o
.rodata:0000000000007FCC aD              db '%+d',0              ; DATA XREF: sig2str+91↑o
.rodata:0000000000007FD0 aC              db 'C',0                ; DATA XREF: hard_locale+18↑o
.rodata:0000000000007FD2 aPosix          db 'POSIX',0            ; DATA XREF: hard_locale:loc_6920↑o
.rodata:0000000000007FD8 aAscii          db 'ASCII',0            ; DATA XREF: locale_charset+16↑o
.rodata:0000000000007FD8                                         ; locale_charset:loc_6970↑o
.rodata:0000000000007FD8 _rodata         ends
.rodata:0000000000007FD8
LOAD:0000000000007FDE ; ===========================================================================
LOAD:0000000000007FDE
LOAD:0000000000007FDE ; Segment type: Pure code
LOAD:0000000000007FDE ; Segment permissions: Read/Execute
LOAD:0000000000007FDE LOAD            segment byte public 'CODE' use64
LOAD:0000000000007FDE                 assume cs:LOAD
LOAD:0000000000007FDE                 ;org 7FDEh
LOAD:0000000000007FDE                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000007FDE                 align 20h
LOAD:0000000000007FDE LOAD            ends
LOAD:0000000000007FDE
.eh_frame_hdr:0000000000007FE0 ; ===========================================================================
.eh_frame_hdr:0000000000007FE0
.eh_frame_hdr:0000000000007FE0 ; Segment type: Pure data
.eh_frame_hdr:0000000000007FE0 ; Segment permissions: Read
.eh_frame_hdr:0000000000007FE0 _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:0000000000007FE0                 assume cs:_eh_frame_hdr
.eh_frame_hdr:0000000000007FE0                 ;org 7FE0h
.eh_frame_hdr:0000000000007FE0 __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000000001A0↑o
.eh_frame_hdr:0000000000007FE1                 db  1Bh
.eh_frame_hdr:0000000000007FE2                 db    3
.eh_frame_hdr:0000000000007FE3                 db  3Bh ; ;
.eh_frame_hdr:0000000000007FE4                 db  74h ; t
.eh_frame_hdr:0000000000007FE5                 db    2
.eh_frame_hdr:0000000000007FE6                 db    0
.eh_frame_hdr:0000000000007FE7                 db    0
.eh_frame_hdr:0000000000007FE8                 db  4Dh ; M
.eh_frame_hdr:0000000000007FE9                 db    0
.eh_frame_hdr:0000000000007FEA                 db    0
.eh_frame_hdr:0000000000007FEB                 db    0
.eh_frame_hdr:0000000000007FEC                 db  90h
.eh_frame_hdr:0000000000007FED                 db  98h
.eh_frame_hdr:0000000000007FEE                 db 0FFh
.eh_frame_hdr:0000000000007FEF                 db 0FFh
.eh_frame_hdr:0000000000007FF0                 db 0C0h
.eh_frame_hdr:0000000000007FF1                 db    2
.eh_frame_hdr:0000000000007FF2                 db    0
.eh_frame_hdr:0000000000007FF3                 db    0
.eh_frame_hdr:0000000000007FF4                 db  80h
.eh_frame_hdr:0000000000007FF5                 db  9Ch
.eh_frame_hdr:0000000000007FF6                 db 0FFh
.eh_frame_hdr:0000000000007FF7                 db 0FFh
.eh_frame_hdr:0000000000007FF8                 db 0E8h
.eh_frame_hdr:0000000000007FF9                 db    2
.eh_frame_hdr:0000000000007FFA                 db    0
.eh_frame_hdr:0000000000007FFB                 db    0
.eh_frame_hdr:0000000000007FFC                 db  90h
.eh_frame_hdr:0000000000007FFD                 db  9Ch
.eh_frame_hdr:0000000000007FFE                 db 0FFh
.eh_frame_hdr:0000000000007FFF                 db 0FFh
.eh_frame_hdr:0000000000008000                 db  88h
.eh_frame_hdr:0000000000008001                 db    4
.eh_frame_hdr:0000000000008002                 db    0
.eh_frame_hdr:0000000000008003                 db    0
.eh_frame_hdr:0000000000008004                 db    0
.eh_frame_hdr:0000000000008005                 db 0B1h
.eh_frame_hdr:0000000000008006                 db 0FFh
.eh_frame_hdr:0000000000008007                 db 0FFh
.eh_frame_hdr:0000000000008008                 db  90h
.eh_frame_hdr:0000000000008009                 db    2
.eh_frame_hdr:000000000000800A                 db    0
.eh_frame_hdr:000000000000800B                 db    0
.eh_frame_hdr:000000000000800C                 db  10h
.eh_frame_hdr:000000000000800D                 db 0B2h
.eh_frame_hdr:000000000000800E                 db 0FFh
.eh_frame_hdr:000000000000800F                 db 0FFh
.eh_frame_hdr:0000000000008010                 db    0
.eh_frame_hdr:0000000000008011                 db    3
.eh_frame_hdr:0000000000008012                 db    0
.eh_frame_hdr:0000000000008013                 db    0
.eh_frame_hdr:0000000000008014                 db  40h ; @
.eh_frame_hdr:0000000000008015                 db 0B3h
.eh_frame_hdr:0000000000008016                 db 0FFh
.eh_frame_hdr:0000000000008017                 db 0FFh
.eh_frame_hdr:0000000000008018                 db  38h ; 8
.eh_frame_hdr:0000000000008019                 db    3
.eh_frame_hdr:000000000000801A                 db    0
.eh_frame_hdr:000000000000801B                 db    0
.eh_frame_hdr:000000000000801C                 db 0B0h
.eh_frame_hdr:000000000000801D                 db 0B4h
.eh_frame_hdr:000000000000801E                 db 0FFh
.eh_frame_hdr:000000000000801F                 db 0FFh
.eh_frame_hdr:0000000000008020                 db  98h
.eh_frame_hdr:0000000000008021                 db    3
.eh_frame_hdr:0000000000008022                 db    0
.eh_frame_hdr:0000000000008023                 db    0
.eh_frame_hdr:0000000000008024                 db  90h
.eh_frame_hdr:0000000000008025                 db 0B9h
.eh_frame_hdr:0000000000008026                 db 0FFh
.eh_frame_hdr:0000000000008027                 db 0FFh
.eh_frame_hdr:0000000000008028                 db 0C4h
.eh_frame_hdr:0000000000008029                 db    3
.eh_frame_hdr:000000000000802A                 db    0
.eh_frame_hdr:000000000000802B                 db    0
.eh_frame_hdr:000000000000802C                 db    0
.eh_frame_hdr:000000000000802D                 db 0BBh
.eh_frame_hdr:000000000000802E                 db 0FFh
.eh_frame_hdr:000000000000802F                 db 0FFh
.eh_frame_hdr:0000000000008030                 db  20h
.eh_frame_hdr:0000000000008031                 db    4
.eh_frame_hdr:0000000000008032                 db    0
.eh_frame_hdr:0000000000008033                 db    0
.eh_frame_hdr:0000000000008034                 db 0E0h
.eh_frame_hdr:0000000000008035                 db 0BCh
.eh_frame_hdr:0000000000008036                 db 0FFh
.eh_frame_hdr:0000000000008037                 db 0FFh
.eh_frame_hdr:0000000000008038                 db 0F8h
.eh_frame_hdr:0000000000008039                 db    4
.eh_frame_hdr:000000000000803A                 db    0
.eh_frame_hdr:000000000000803B                 db    0
.eh_frame_hdr:000000000000803C                 db 0D0h
.eh_frame_hdr:000000000000803D                 db 0BEh
.eh_frame_hdr:000000000000803E                 db 0FFh
.eh_frame_hdr:000000000000803F                 db 0FFh
.eh_frame_hdr:0000000000008040                 db  48h ; H
.eh_frame_hdr:0000000000008041                 db    5
.eh_frame_hdr:0000000000008042                 db    0
.eh_frame_hdr:0000000000008043                 db    0
.eh_frame_hdr:0000000000008044                 db 0E0h
.eh_frame_hdr:0000000000008045                 db 0BEh
.eh_frame_hdr:0000000000008046                 db 0FFh
.eh_frame_hdr:0000000000008047                 db 0FFh
.eh_frame_hdr:0000000000008048                 db  5Ch ; \
.eh_frame_hdr:0000000000008049                 db    5
.eh_frame_hdr:000000000000804A                 db    0
.eh_frame_hdr:000000000000804B                 db    0
.eh_frame_hdr:000000000000804C                 db 0F0h
.eh_frame_hdr:000000000000804D                 db 0BEh
.eh_frame_hdr:000000000000804E                 db 0FFh
.eh_frame_hdr:000000000000804F                 db 0FFh
.eh_frame_hdr:0000000000008050                 db  70h ; p
.eh_frame_hdr:0000000000008051                 db    5
.eh_frame_hdr:0000000000008052                 db    0
.eh_frame_hdr:0000000000008053                 db    0
.eh_frame_hdr:0000000000008054                 db 0A0h
.eh_frame_hdr:0000000000008055                 db 0BFh
.eh_frame_hdr:0000000000008056                 db 0FFh
.eh_frame_hdr:0000000000008057                 db 0FFh
.eh_frame_hdr:0000000000008058                 db 0A0h
.eh_frame_hdr:0000000000008059                 db    5
.eh_frame_hdr:000000000000805A                 db    0
.eh_frame_hdr:000000000000805B                 db    0
.eh_frame_hdr:000000000000805C                 db  40h ; @
.eh_frame_hdr:000000000000805D                 db 0C0h
.eh_frame_hdr:000000000000805E                 db 0FFh
.eh_frame_hdr:000000000000805F                 db 0FFh
.eh_frame_hdr:0000000000008060                 db 0C0h
.eh_frame_hdr:0000000000008061                 db    5
.eh_frame_hdr:0000000000008062                 db    0
.eh_frame_hdr:0000000000008063                 db    0
.eh_frame_hdr:0000000000008064                 db  30h ; 0
.eh_frame_hdr:0000000000008065                 db 0C1h
.eh_frame_hdr:0000000000008066                 db 0FFh
.eh_frame_hdr:0000000000008067                 db 0FFh
.eh_frame_hdr:0000000000008068                 db    4
.eh_frame_hdr:0000000000008069                 db    6
.eh_frame_hdr:000000000000806A                 db    0
.eh_frame_hdr:000000000000806B                 db    0
.eh_frame_hdr:000000000000806C                 db  70h ; p
.eh_frame_hdr:000000000000806D                 db 0D3h
.eh_frame_hdr:000000000000806E                 db 0FFh
.eh_frame_hdr:000000000000806F                 db 0FFh
.eh_frame_hdr:0000000000008070                 db  7Ch ; |
.eh_frame_hdr:0000000000008071                 db    6
.eh_frame_hdr:0000000000008072                 db    0
.eh_frame_hdr:0000000000008073                 db    0
.eh_frame_hdr:0000000000008074                 db  20h
.eh_frame_hdr:0000000000008075                 db 0D5h
.eh_frame_hdr:0000000000008076                 db 0FFh
.eh_frame_hdr:0000000000008077                 db 0FFh
.eh_frame_hdr:0000000000008078                 db 0E8h
.eh_frame_hdr:0000000000008079                 db    6
.eh_frame_hdr:000000000000807A                 db    0
.eh_frame_hdr:000000000000807B                 db    0
.eh_frame_hdr:000000000000807C                 db  60h ; `
.eh_frame_hdr:000000000000807D                 db 0D5h
.eh_frame_hdr:000000000000807E                 db 0FFh
.eh_frame_hdr:000000000000807F                 db 0FFh
.eh_frame_hdr:0000000000008080                 db  14h
.eh_frame_hdr:0000000000008081                 db    7
.eh_frame_hdr:0000000000008082                 db    0
.eh_frame_hdr:0000000000008083                 db    0
.eh_frame_hdr:0000000000008084                 db  80h
.eh_frame_hdr:0000000000008085                 db 0D5h
.eh_frame_hdr:0000000000008086                 db 0FFh
.eh_frame_hdr:0000000000008087                 db 0FFh
.eh_frame_hdr:0000000000008088                 db  28h ; (
.eh_frame_hdr:0000000000008089                 db    7
.eh_frame_hdr:000000000000808A                 db    0
.eh_frame_hdr:000000000000808B                 db    0
.eh_frame_hdr:000000000000808C                 db 0A0h
.eh_frame_hdr:000000000000808D                 db 0D5h
.eh_frame_hdr:000000000000808E                 db 0FFh
.eh_frame_hdr:000000000000808F                 db 0FFh
.eh_frame_hdr:0000000000008090                 db  3Ch ; <
.eh_frame_hdr:0000000000008091                 db    7
.eh_frame_hdr:0000000000008092                 db    0
.eh_frame_hdr:0000000000008093                 db    0
.eh_frame_hdr:0000000000008094                 db 0E0h
.eh_frame_hdr:0000000000008095                 db 0D5h
.eh_frame_hdr:0000000000008096                 db 0FFh
.eh_frame_hdr:0000000000008097                 db 0FFh
.eh_frame_hdr:0000000000008098                 db  50h ; P
.eh_frame_hdr:0000000000008099                 db    7
.eh_frame_hdr:000000000000809A                 db    0
.eh_frame_hdr:000000000000809B                 db    0
.eh_frame_hdr:000000000000809C                 db    0
.eh_frame_hdr:000000000000809D                 db 0D6h
.eh_frame_hdr:000000000000809E                 db 0FFh
.eh_frame_hdr:000000000000809F                 db 0FFh
.eh_frame_hdr:00000000000080A0                 db  64h ; d
.eh_frame_hdr:00000000000080A1                 db    7
.eh_frame_hdr:00000000000080A2                 db    0
.eh_frame_hdr:00000000000080A3                 db    0
.eh_frame_hdr:00000000000080A4                 db  30h ; 0
.eh_frame_hdr:00000000000080A5                 db 0D6h
.eh_frame_hdr:00000000000080A6                 db 0FFh
.eh_frame_hdr:00000000000080A7                 db 0FFh
.eh_frame_hdr:00000000000080A8                 db  78h ; x
.eh_frame_hdr:00000000000080A9                 db    7
.eh_frame_hdr:00000000000080AA                 db    0
.eh_frame_hdr:00000000000080AB                 db    0
.eh_frame_hdr:00000000000080AC                 db 0B0h
.eh_frame_hdr:00000000000080AD                 db 0D6h
.eh_frame_hdr:00000000000080AE                 db 0FFh
.eh_frame_hdr:00000000000080AF                 db 0FFh
.eh_frame_hdr:00000000000080B0                 db 0CCh
.eh_frame_hdr:00000000000080B1                 db    7
.eh_frame_hdr:00000000000080B2                 db    0
.eh_frame_hdr:00000000000080B3                 db    0
.eh_frame_hdr:00000000000080B4                 db 0A0h
.eh_frame_hdr:00000000000080B5                 db 0D7h
.eh_frame_hdr:00000000000080B6                 db 0FFh
.eh_frame_hdr:00000000000080B7                 db 0FFh
.eh_frame_hdr:00000000000080B8                 db  38h ; 8
.eh_frame_hdr:00000000000080B9                 db    8
.eh_frame_hdr:00000000000080BA                 db    0
.eh_frame_hdr:00000000000080BB                 db    0
.eh_frame_hdr:00000000000080BC                 db 0B0h
.eh_frame_hdr:00000000000080BD                 db 0D7h
.eh_frame_hdr:00000000000080BE                 db 0FFh
.eh_frame_hdr:00000000000080BF                 db 0FFh
.eh_frame_hdr:00000000000080C0                 db  4Ch ; L
.eh_frame_hdr:00000000000080C1                 db    8
.eh_frame_hdr:00000000000080C2                 db    0
.eh_frame_hdr:00000000000080C3                 db    0
.eh_frame_hdr:00000000000080C4                 db  50h ; P
.eh_frame_hdr:00000000000080C5                 db 0D8h
.eh_frame_hdr:00000000000080C6                 db 0FFh
.eh_frame_hdr:00000000000080C7                 db 0FFh
.eh_frame_hdr:00000000000080C8                 db  78h ; x
.eh_frame_hdr:00000000000080C9                 db    8
.eh_frame_hdr:00000000000080CA                 db    0
.eh_frame_hdr:00000000000080CB                 db    0
.eh_frame_hdr:00000000000080CC                 db  70h ; p
.eh_frame_hdr:00000000000080CD                 db 0D8h
.eh_frame_hdr:00000000000080CE                 db 0FFh
.eh_frame_hdr:00000000000080CF                 db 0FFh
.eh_frame_hdr:00000000000080D0                 db  8Ch
.eh_frame_hdr:00000000000080D1                 db    8
.eh_frame_hdr:00000000000080D2                 db    0
.eh_frame_hdr:00000000000080D3                 db    0
.eh_frame_hdr:00000000000080D4                 db  80h
.eh_frame_hdr:00000000000080D5                 db 0D8h
.eh_frame_hdr:00000000000080D6                 db 0FFh
.eh_frame_hdr:00000000000080D7                 db 0FFh
.eh_frame_hdr:00000000000080D8                 db 0A0h
.eh_frame_hdr:00000000000080D9                 db    8
.eh_frame_hdr:00000000000080DA                 db    0
.eh_frame_hdr:00000000000080DB                 db    0
.eh_frame_hdr:00000000000080DC                 db 0A0h
.eh_frame_hdr:00000000000080DD                 db 0D8h
.eh_frame_hdr:00000000000080DE                 db 0FFh
.eh_frame_hdr:00000000000080DF                 db 0FFh
.eh_frame_hdr:00000000000080E0                 db 0B4h
.eh_frame_hdr:00000000000080E1                 db    8
.eh_frame_hdr:00000000000080E2                 db    0
.eh_frame_hdr:00000000000080E3                 db    0
.eh_frame_hdr:00000000000080E4                 db 0C0h
.eh_frame_hdr:00000000000080E5                 db 0D8h
.eh_frame_hdr:00000000000080E6                 db 0FFh
.eh_frame_hdr:00000000000080E7                 db 0FFh
.eh_frame_hdr:00000000000080E8                 db 0C8h
.eh_frame_hdr:00000000000080E9                 db    8
.eh_frame_hdr:00000000000080EA                 db    0
.eh_frame_hdr:00000000000080EB                 db    0
.eh_frame_hdr:00000000000080EC                 db  50h ; P
.eh_frame_hdr:00000000000080ED                 db 0D9h
.eh_frame_hdr:00000000000080EE                 db 0FFh
.eh_frame_hdr:00000000000080EF                 db 0FFh
.eh_frame_hdr:00000000000080F0                 db 0E4h
.eh_frame_hdr:00000000000080F1                 db    8
.eh_frame_hdr:00000000000080F2                 db    0
.eh_frame_hdr:00000000000080F3                 db    0
.eh_frame_hdr:00000000000080F4                 db 0E0h
.eh_frame_hdr:00000000000080F5                 db 0D9h
.eh_frame_hdr:00000000000080F6                 db 0FFh
.eh_frame_hdr:00000000000080F7                 db 0FFh
.eh_frame_hdr:00000000000080F8                 db    0
.eh_frame_hdr:00000000000080F9                 db    9
.eh_frame_hdr:00000000000080FA                 db    0
.eh_frame_hdr:00000000000080FB                 db    0
.eh_frame_hdr:00000000000080FC                 db 0F0h
.eh_frame_hdr:00000000000080FD                 db 0D9h
.eh_frame_hdr:00000000000080FE                 db 0FFh
.eh_frame_hdr:00000000000080FF                 db 0FFh
.eh_frame_hdr:0000000000008100                 db  14h
.eh_frame_hdr:0000000000008101                 db    9
.eh_frame_hdr:0000000000008102                 db    0
.eh_frame_hdr:0000000000008103                 db    0
.eh_frame_hdr:0000000000008104                 db    0
.eh_frame_hdr:0000000000008105                 db 0DAh
.eh_frame_hdr:0000000000008106                 db 0FFh
.eh_frame_hdr:0000000000008107                 db 0FFh
.eh_frame_hdr:0000000000008108                 db  28h ; (
.eh_frame_hdr:0000000000008109                 db    9
.eh_frame_hdr:000000000000810A                 db    0
.eh_frame_hdr:000000000000810B                 db    0
.eh_frame_hdr:000000000000810C                 db 0A0h
.eh_frame_hdr:000000000000810D                 db 0DAh
.eh_frame_hdr:000000000000810E                 db 0FFh
.eh_frame_hdr:000000000000810F                 db 0FFh
.eh_frame_hdr:0000000000008110                 db  44h ; D
.eh_frame_hdr:0000000000008111                 db    9
.eh_frame_hdr:0000000000008112                 db    0
.eh_frame_hdr:0000000000008113                 db    0
.eh_frame_hdr:0000000000008114                 db 0B0h
.eh_frame_hdr:0000000000008115                 db 0DAh
.eh_frame_hdr:0000000000008116                 db 0FFh
.eh_frame_hdr:0000000000008117                 db 0FFh
.eh_frame_hdr:0000000000008118                 db  58h ; X
.eh_frame_hdr:0000000000008119                 db    9
.eh_frame_hdr:000000000000811A                 db    0
.eh_frame_hdr:000000000000811B                 db    0
.eh_frame_hdr:000000000000811C                 db 0D0h
.eh_frame_hdr:000000000000811D                 db 0DAh
.eh_frame_hdr:000000000000811E                 db 0FFh
.eh_frame_hdr:000000000000811F                 db 0FFh
.eh_frame_hdr:0000000000008120                 db  6Ch ; l
.eh_frame_hdr:0000000000008121                 db    9
.eh_frame_hdr:0000000000008122                 db    0
.eh_frame_hdr:0000000000008123                 db    0
.eh_frame_hdr:0000000000008124                 db 0E0h
.eh_frame_hdr:0000000000008125                 db 0DAh
.eh_frame_hdr:0000000000008126                 db 0FFh
.eh_frame_hdr:0000000000008127                 db 0FFh
.eh_frame_hdr:0000000000008128                 db  80h
.eh_frame_hdr:0000000000008129                 db    9
.eh_frame_hdr:000000000000812A                 db    0
.eh_frame_hdr:000000000000812B                 db    0
.eh_frame_hdr:000000000000812C                 db  70h ; p
.eh_frame_hdr:000000000000812D                 db 0DBh
.eh_frame_hdr:000000000000812E                 db 0FFh
.eh_frame_hdr:000000000000812F                 db 0FFh
.eh_frame_hdr:0000000000008130                 db  9Ch
.eh_frame_hdr:0000000000008131                 db    9
.eh_frame_hdr:0000000000008132                 db    0
.eh_frame_hdr:0000000000008133                 db    0
.eh_frame_hdr:0000000000008134                 db  10h
.eh_frame_hdr:0000000000008135                 db 0DCh
.eh_frame_hdr:0000000000008136                 db 0FFh
.eh_frame_hdr:0000000000008137                 db 0FFh
.eh_frame_hdr:0000000000008138                 db 0B8h
.eh_frame_hdr:0000000000008139                 db    9
.eh_frame_hdr:000000000000813A                 db    0
.eh_frame_hdr:000000000000813B                 db    0
.eh_frame_hdr:000000000000813C                 db  20h
.eh_frame_hdr:000000000000813D                 db 0DCh
.eh_frame_hdr:000000000000813E                 db 0FFh
.eh_frame_hdr:000000000000813F                 db 0FFh
.eh_frame_hdr:0000000000008140                 db 0CCh
.eh_frame_hdr:0000000000008141                 db    9
.eh_frame_hdr:0000000000008142                 db    0
.eh_frame_hdr:0000000000008143                 db    0
.eh_frame_hdr:0000000000008144                 db  40h ; @
.eh_frame_hdr:0000000000008145                 db 0DCh
.eh_frame_hdr:0000000000008146                 db 0FFh
.eh_frame_hdr:0000000000008147                 db 0FFh
.eh_frame_hdr:0000000000008148                 db 0E0h
.eh_frame_hdr:0000000000008149                 db    9
.eh_frame_hdr:000000000000814A                 db    0
.eh_frame_hdr:000000000000814B                 db    0
.eh_frame_hdr:000000000000814C                 db  60h ; `
.eh_frame_hdr:000000000000814D                 db 0DCh
.eh_frame_hdr:000000000000814E                 db 0FFh
.eh_frame_hdr:000000000000814F                 db 0FFh
.eh_frame_hdr:0000000000008150                 db 0F4h
.eh_frame_hdr:0000000000008151                 db    9
.eh_frame_hdr:0000000000008152                 db    0
.eh_frame_hdr:0000000000008153                 db    0
.eh_frame_hdr:0000000000008154                 db  70h ; p
.eh_frame_hdr:0000000000008155                 db 0DCh
.eh_frame_hdr:0000000000008156                 db 0FFh
.eh_frame_hdr:0000000000008157                 db 0FFh
.eh_frame_hdr:0000000000008158                 db    8
.eh_frame_hdr:0000000000008159                 db  0Ah
.eh_frame_hdr:000000000000815A                 db    0
.eh_frame_hdr:000000000000815B                 db    0
.eh_frame_hdr:000000000000815C                 db  90h
.eh_frame_hdr:000000000000815D                 db 0DCh
.eh_frame_hdr:000000000000815E                 db 0FFh
.eh_frame_hdr:000000000000815F                 db 0FFh
.eh_frame_hdr:0000000000008160                 db  1Ch
.eh_frame_hdr:0000000000008161                 db  0Ah
.eh_frame_hdr:0000000000008162                 db    0
.eh_frame_hdr:0000000000008163                 db    0
.eh_frame_hdr:0000000000008164                 db 0B0h
.eh_frame_hdr:0000000000008165                 db 0DCh
.eh_frame_hdr:0000000000008166                 db 0FFh
.eh_frame_hdr:0000000000008167                 db 0FFh
.eh_frame_hdr:0000000000008168                 db  30h ; 0
.eh_frame_hdr:0000000000008169                 db  0Ah
.eh_frame_hdr:000000000000816A                 db    0
.eh_frame_hdr:000000000000816B                 db    0
.eh_frame_hdr:000000000000816C                 db 0D0h
.eh_frame_hdr:000000000000816D                 db 0DCh
.eh_frame_hdr:000000000000816E                 db 0FFh
.eh_frame_hdr:000000000000816F                 db 0FFh
.eh_frame_hdr:0000000000008170                 db  48h ; H
.eh_frame_hdr:0000000000008171                 db  0Ah
.eh_frame_hdr:0000000000008172                 db    0
.eh_frame_hdr:0000000000008173                 db    0
.eh_frame_hdr:0000000000008174                 db 0F0h
.eh_frame_hdr:0000000000008175                 db 0E0h
.eh_frame_hdr:0000000000008176                 db 0FFh
.eh_frame_hdr:0000000000008177                 db 0FFh
.eh_frame_hdr:0000000000008178                 db  5Ch ; \
.eh_frame_hdr:0000000000008179                 db  0Bh
.eh_frame_hdr:000000000000817A                 db    0
.eh_frame_hdr:000000000000817B                 db    0
.eh_frame_hdr:000000000000817C                 db  10h
.eh_frame_hdr:000000000000817D                 db 0E1h
.eh_frame_hdr:000000000000817E                 db 0FFh
.eh_frame_hdr:000000000000817F                 db 0FFh
.eh_frame_hdr:0000000000008180                 db  70h ; p
.eh_frame_hdr:0000000000008181                 db  0Bh
.eh_frame_hdr:0000000000008182                 db    0
.eh_frame_hdr:0000000000008183                 db    0
.eh_frame_hdr:0000000000008184                 db  90h
.eh_frame_hdr:0000000000008185                 db 0E1h
.eh_frame_hdr:0000000000008186                 db 0FFh
.eh_frame_hdr:0000000000008187                 db 0FFh
.eh_frame_hdr:0000000000008188                 db  8Ch
.eh_frame_hdr:0000000000008189                 db  0Bh
.eh_frame_hdr:000000000000818A                 db    0
.eh_frame_hdr:000000000000818B                 db    0
.eh_frame_hdr:000000000000818C                 db  70h ; p
.eh_frame_hdr:000000000000818D                 db 0E2h
.eh_frame_hdr:000000000000818E                 db 0FFh
.eh_frame_hdr:000000000000818F                 db 0FFh
.eh_frame_hdr:0000000000008190                 db 0B8h
.eh_frame_hdr:0000000000008191                 db  0Bh
.eh_frame_hdr:0000000000008192                 db    0
.eh_frame_hdr:0000000000008193                 db    0
.eh_frame_hdr:0000000000008194                 db 0F0h
.eh_frame_hdr:0000000000008195                 db 0E2h
.eh_frame_hdr:0000000000008196                 db 0FFh
.eh_frame_hdr:0000000000008197                 db 0FFh
.eh_frame_hdr:0000000000008198                 db 0D8h
.eh_frame_hdr:0000000000008199                 db  0Bh
.eh_frame_hdr:000000000000819A                 db    0
.eh_frame_hdr:000000000000819B                 db    0
.eh_frame_hdr:000000000000819C                 db  10h
.eh_frame_hdr:000000000000819D                 db 0E3h
.eh_frame_hdr:000000000000819E                 db 0FFh
.eh_frame_hdr:000000000000819F                 db 0FFh
.eh_frame_hdr:00000000000081A0                 db 0F4h
.eh_frame_hdr:00000000000081A1                 db  0Bh
.eh_frame_hdr:00000000000081A2                 db    0
.eh_frame_hdr:00000000000081A3                 db    0
.eh_frame_hdr:00000000000081A4                 db  40h ; @
.eh_frame_hdr:00000000000081A5                 db 0E3h
.eh_frame_hdr:00000000000081A6                 db 0FFh
.eh_frame_hdr:00000000000081A7                 db 0FFh
.eh_frame_hdr:00000000000081A8                 db    8
.eh_frame_hdr:00000000000081A9                 db  0Ch
.eh_frame_hdr:00000000000081AA                 db    0
.eh_frame_hdr:00000000000081AB                 db    0
.eh_frame_hdr:00000000000081AC                 db  50h ; P
.eh_frame_hdr:00000000000081AD                 db 0E3h
.eh_frame_hdr:00000000000081AE                 db 0FFh
.eh_frame_hdr:00000000000081AF                 db 0FFh
.eh_frame_hdr:00000000000081B0                 db  1Ch
.eh_frame_hdr:00000000000081B1                 db  0Ch
.eh_frame_hdr:00000000000081B2                 db    0
.eh_frame_hdr:00000000000081B3                 db    0
.eh_frame_hdr:00000000000081B4                 db  90h
.eh_frame_hdr:00000000000081B5                 db 0E3h
.eh_frame_hdr:00000000000081B6                 db 0FFh
.eh_frame_hdr:00000000000081B7                 db 0FFh
.eh_frame_hdr:00000000000081B8                 db  40h ; @
.eh_frame_hdr:00000000000081B9                 db  0Ch
.eh_frame_hdr:00000000000081BA                 db    0
.eh_frame_hdr:00000000000081BB                 db    0
.eh_frame_hdr:00000000000081BC                 db 0C0h
.eh_frame_hdr:00000000000081BD                 db 0E3h
.eh_frame_hdr:00000000000081BE                 db 0FFh
.eh_frame_hdr:00000000000081BF                 db 0FFh
.eh_frame_hdr:00000000000081C0                 db  54h ; T
.eh_frame_hdr:00000000000081C1                 db  0Ch
.eh_frame_hdr:00000000000081C2                 db    0
.eh_frame_hdr:00000000000081C3                 db    0
.eh_frame_hdr:00000000000081C4                 db  50h ; P
.eh_frame_hdr:00000000000081C5                 db 0E4h
.eh_frame_hdr:00000000000081C6                 db 0FFh
.eh_frame_hdr:00000000000081C7                 db 0FFh
.eh_frame_hdr:00000000000081C8                 db  6Ch ; l
.eh_frame_hdr:00000000000081C9                 db  0Ch
.eh_frame_hdr:00000000000081CA                 db    0
.eh_frame_hdr:00000000000081CB                 db    0
.eh_frame_hdr:00000000000081CC                 db 0A0h
.eh_frame_hdr:00000000000081CD                 db 0E4h
.eh_frame_hdr:00000000000081CE                 db 0FFh
.eh_frame_hdr:00000000000081CF                 db 0FFh
.eh_frame_hdr:00000000000081D0                 db  84h
.eh_frame_hdr:00000000000081D1                 db  0Ch
.eh_frame_hdr:00000000000081D2                 db    0
.eh_frame_hdr:00000000000081D3                 db    0
.eh_frame_hdr:00000000000081D4                 db 0C0h
.eh_frame_hdr:00000000000081D5                 db 0E4h
.eh_frame_hdr:00000000000081D6                 db 0FFh
.eh_frame_hdr:00000000000081D7                 db 0FFh
.eh_frame_hdr:00000000000081D8                 db 0A0h
.eh_frame_hdr:00000000000081D9                 db  0Ch
.eh_frame_hdr:00000000000081DA                 db    0
.eh_frame_hdr:00000000000081DB                 db    0
.eh_frame_hdr:00000000000081DC                 db 0F0h
.eh_frame_hdr:00000000000081DD                 db 0E4h
.eh_frame_hdr:00000000000081DE                 db 0FFh
.eh_frame_hdr:00000000000081DF                 db 0FFh
.eh_frame_hdr:00000000000081E0                 db 0BCh
.eh_frame_hdr:00000000000081E1                 db  0Ch
.eh_frame_hdr:00000000000081E2                 db    0
.eh_frame_hdr:00000000000081E3                 db    0
.eh_frame_hdr:00000000000081E4                 db  20h
.eh_frame_hdr:00000000000081E5                 db 0E5h
.eh_frame_hdr:00000000000081E6                 db 0FFh
.eh_frame_hdr:00000000000081E7                 db 0FFh
.eh_frame_hdr:00000000000081E8                 db 0E4h
.eh_frame_hdr:00000000000081E9                 db  0Ch
.eh_frame_hdr:00000000000081EA                 db    0
.eh_frame_hdr:00000000000081EB                 db    0
.eh_frame_hdr:00000000000081EC                 db  40h ; @
.eh_frame_hdr:00000000000081ED                 db 0E5h
.eh_frame_hdr:00000000000081EE                 db 0FFh
.eh_frame_hdr:00000000000081EF                 db 0FFh
.eh_frame_hdr:00000000000081F0                 db    0
.eh_frame_hdr:00000000000081F1                 db  0Dh
.eh_frame_hdr:00000000000081F2                 db    0
.eh_frame_hdr:00000000000081F3                 db    0
.eh_frame_hdr:00000000000081F4                 db  80h
.eh_frame_hdr:00000000000081F5                 db 0E5h
.eh_frame_hdr:00000000000081F6                 db 0FFh
.eh_frame_hdr:00000000000081F7                 db 0FFh
.eh_frame_hdr:00000000000081F8                 db  18h
.eh_frame_hdr:00000000000081F9                 db  0Dh
.eh_frame_hdr:00000000000081FA                 db    0
.eh_frame_hdr:00000000000081FB                 db    0
.eh_frame_hdr:00000000000081FC                 db  10h
.eh_frame_hdr:00000000000081FD                 db 0E6h
.eh_frame_hdr:00000000000081FE                 db 0FFh
.eh_frame_hdr:00000000000081FF                 db 0FFh
.eh_frame_hdr:0000000000008200                 db  58h ; X
.eh_frame_hdr:0000000000008201                 db  0Dh
.eh_frame_hdr:0000000000008202                 db    0
.eh_frame_hdr:0000000000008203                 db    0
.eh_frame_hdr:0000000000008204                 db 0A0h
.eh_frame_hdr:0000000000008205                 db 0E7h
.eh_frame_hdr:0000000000008206                 db 0FFh
.eh_frame_hdr:0000000000008207                 db 0FFh
.eh_frame_hdr:0000000000008208                 db  94h
.eh_frame_hdr:0000000000008209                 db  0Dh
.eh_frame_hdr:000000000000820A                 db    0
.eh_frame_hdr:000000000000820B                 db    0
.eh_frame_hdr:000000000000820C                 db  80h
.eh_frame_hdr:000000000000820D                 db 0E8h
.eh_frame_hdr:000000000000820E                 db 0FFh
.eh_frame_hdr:000000000000820F                 db 0FFh
.eh_frame_hdr:0000000000008210                 db 0D0h
.eh_frame_hdr:0000000000008211                 db  0Dh
.eh_frame_hdr:0000000000008212                 db    0
.eh_frame_hdr:0000000000008213                 db    0
.eh_frame_hdr:0000000000008214                 db    0
.eh_frame_hdr:0000000000008215                 db 0E9h
.eh_frame_hdr:0000000000008216                 db 0FFh
.eh_frame_hdr:0000000000008217                 db 0FFh
.eh_frame_hdr:0000000000008218                 db  20h
.eh_frame_hdr:0000000000008219                 db  0Eh
.eh_frame_hdr:000000000000821A                 db    0
.eh_frame_hdr:000000000000821B                 db    0
.eh_frame_hdr:000000000000821C                 db  60h ; `
.eh_frame_hdr:000000000000821D                 db 0E9h
.eh_frame_hdr:000000000000821E                 db 0FFh
.eh_frame_hdr:000000000000821F                 db 0FFh
.eh_frame_hdr:0000000000008220                 db  40h ; @
.eh_frame_hdr:0000000000008221                 db  0Eh
.eh_frame_hdr:0000000000008222                 db    0
.eh_frame_hdr:0000000000008223                 db    0
.eh_frame_hdr:0000000000008224                 db 0A0h
.eh_frame_hdr:0000000000008225                 db 0E9h
.eh_frame_hdr:0000000000008226                 db 0FFh
.eh_frame_hdr:0000000000008227                 db 0FFh
.eh_frame_hdr:0000000000008228                 db  60h ; `
.eh_frame_hdr:0000000000008229                 db  0Eh
.eh_frame_hdr:000000000000822A                 db    0
.eh_frame_hdr:000000000000822B                 db    0
.eh_frame_hdr:000000000000822C                 db  20h
.eh_frame_hdr:000000000000822D                 db 0EAh
.eh_frame_hdr:000000000000822E                 db 0FFh
.eh_frame_hdr:000000000000822F                 db 0FFh
.eh_frame_hdr:0000000000008230                 db  98h
.eh_frame_hdr:0000000000008231                 db  0Eh
.eh_frame_hdr:0000000000008232                 db    0
.eh_frame_hdr:0000000000008233                 db    0
.eh_frame_hdr:0000000000008234                 db  60h ; `
.eh_frame_hdr:0000000000008235                 db 0EAh
.eh_frame_hdr:0000000000008236                 db 0FFh
.eh_frame_hdr:0000000000008237                 db 0FFh
.eh_frame_hdr:0000000000008238                 db 0B8h
.eh_frame_hdr:0000000000008239                 db  0Eh
.eh_frame_hdr:000000000000823A                 db    0
.eh_frame_hdr:000000000000823B                 db    0
.eh_frame_hdr:000000000000823C                 db 0C0h
.eh_frame_hdr:000000000000823D                 db 0EAh
.eh_frame_hdr:000000000000823E                 db 0FFh
.eh_frame_hdr:000000000000823F                 db 0FFh
.eh_frame_hdr:0000000000008240                 db 0E8h
.eh_frame_hdr:0000000000008241                 db  0Eh
.eh_frame_hdr:0000000000008242                 db    0
.eh_frame_hdr:0000000000008243                 db    0
.eh_frame_hdr:0000000000008244                 db  30h ; 0
.eh_frame_hdr:0000000000008245                 db 0EBh
.eh_frame_hdr:0000000000008246                 db 0FFh
.eh_frame_hdr:0000000000008247                 db 0FFh
.eh_frame_hdr:0000000000008248                 db  30h ; 0
.eh_frame_hdr:0000000000008249                 db  0Fh
.eh_frame_hdr:000000000000824A                 db    0
.eh_frame_hdr:000000000000824B                 db    0
.eh_frame_hdr:000000000000824C                 db  40h ; @
.eh_frame_hdr:000000000000824D                 db 0EBh
.eh_frame_hdr:000000000000824E                 db 0FFh
.eh_frame_hdr:000000000000824F                 db 0FFh
.eh_frame_hdr:0000000000008250                 db  48h ; H
.eh_frame_hdr:0000000000008251                 db  0Fh
.eh_frame_hdr:0000000000008252                 db    0
.eh_frame_hdr:0000000000008253                 db    0
.eh_frame_hdr:0000000000008253 _eh_frame_hdr   ends
.eh_frame_hdr:0000000000008253
LOAD:0000000000008254 ; ===========================================================================
LOAD:0000000000008254
LOAD:0000000000008254 ; Segment type: Pure code
LOAD:0000000000008254 ; Segment permissions: Read/Execute
LOAD:0000000000008254 LOAD            segment byte public 'CODE' use64
LOAD:0000000000008254                 assume cs:LOAD
LOAD:0000000000008254                 ;org 8254h
LOAD:0000000000008254                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000008254                 align 8
LOAD:0000000000008254 LOAD            ends
LOAD:0000000000008254
.eh_frame:0000000000008258 ; ===========================================================================
.eh_frame:0000000000008258
.eh_frame:0000000000008258 ; Segment type: Pure data
.eh_frame:0000000000008258 ; Segment permissions: Read
.eh_frame:0000000000008258 _eh_frame       segment qword public 'CONST' use64
.eh_frame:0000000000008258                 assume cs:_eh_frame
.eh_frame:0000000000008258                 ;org 8258h
.eh_frame:0000000000008258                 db  14h
.eh_frame:0000000000008259                 db    0
.eh_frame:000000000000825A                 db    0
.eh_frame:000000000000825B                 db    0
.eh_frame:000000000000825C                 db    0
.eh_frame:000000000000825D                 db    0
.eh_frame:000000000000825E                 db    0
.eh_frame:000000000000825F                 db    0
.eh_frame:0000000000008260                 db    1
.eh_frame:0000000000008261                 db  7Ah ; z
.eh_frame:0000000000008262                 db  52h ; R
.eh_frame:0000000000008263                 db    0
.eh_frame:0000000000008264                 db    1
.eh_frame:0000000000008265                 db  78h ; x
.eh_frame:0000000000008266                 db  10h
.eh_frame:0000000000008267                 db    1
.eh_frame:0000000000008268                 db  1Bh
.eh_frame:0000000000008269                 db  0Ch
.eh_frame:000000000000826A                 db    7
.eh_frame:000000000000826B                 db    8
.eh_frame:000000000000826C                 db  90h
.eh_frame:000000000000826D                 db    1
.eh_frame:000000000000826E                 db    7
.eh_frame:000000000000826F                 db  10h
.eh_frame:0000000000008270                 db  14h
.eh_frame:0000000000008271                 db    0
.eh_frame:0000000000008272                 db    0
.eh_frame:0000000000008273                 db    0
.eh_frame:0000000000008274                 db  1Ch
.eh_frame:0000000000008275                 db    0
.eh_frame:0000000000008276                 db    0
.eh_frame:0000000000008277                 db    0
.eh_frame:0000000000008278                 db  68h ; h
.eh_frame:0000000000008279                 db 0AEh
.eh_frame:000000000000827A                 db 0FFh
.eh_frame:000000000000827B                 db 0FFh
.eh_frame:000000000000827C                 db  2Bh ; +
.eh_frame:000000000000827D                 db    0
.eh_frame:000000000000827E                 db    0
.eh_frame:000000000000827F                 db    0
.eh_frame:0000000000008280                 db    0
.eh_frame:0000000000008281                 db    0
.eh_frame:0000000000008282                 db    0
.eh_frame:0000000000008283                 db    0
.eh_frame:0000000000008284                 db    0
.eh_frame:0000000000008285                 db    0
.eh_frame:0000000000008286                 db    0
.eh_frame:0000000000008287                 db    0
.eh_frame:0000000000008288                 db  14h
.eh_frame:0000000000008289                 db    0
.eh_frame:000000000000828A                 db    0
.eh_frame:000000000000828B                 db    0
.eh_frame:000000000000828C                 db    0
.eh_frame:000000000000828D                 db    0
.eh_frame:000000000000828E                 db    0
.eh_frame:000000000000828F                 db    0
.eh_frame:0000000000008290                 db    1
.eh_frame:0000000000008291                 db  7Ah ; z
.eh_frame:0000000000008292                 db  52h ; R
.eh_frame:0000000000008293                 db    0
.eh_frame:0000000000008294                 db    1
.eh_frame:0000000000008295                 db  78h ; x
.eh_frame:0000000000008296                 db  10h
.eh_frame:0000000000008297                 db    1
.eh_frame:0000000000008298                 db  1Bh
.eh_frame:0000000000008299                 db  0Ch
.eh_frame:000000000000829A                 db    7
.eh_frame:000000000000829B                 db    8
.eh_frame:000000000000829C                 db  90h
.eh_frame:000000000000829D                 db    1
.eh_frame:000000000000829E                 db    0
.eh_frame:000000000000829F                 db    0
.eh_frame:00000000000082A0                 db  24h ; $
.eh_frame:00000000000082A1                 db    0
.eh_frame:00000000000082A2                 db    0
.eh_frame:00000000000082A3                 db    0
.eh_frame:00000000000082A4                 db  1Ch
.eh_frame:00000000000082A5                 db    0
.eh_frame:00000000000082A6                 db    0
.eh_frame:00000000000082A7                 db    0
.eh_frame:00000000000082A8                 db 0C8h
.eh_frame:00000000000082A9                 db  95h
.eh_frame:00000000000082AA                 db 0FFh
.eh_frame:00000000000082AB                 db 0FFh
.eh_frame:00000000000082AC                 db 0F0h
.eh_frame:00000000000082AD                 db    3
.eh_frame:00000000000082AE                 db    0
.eh_frame:00000000000082AF                 db    0
.eh_frame:00000000000082B0                 db    0
.eh_frame:00000000000082B1                 db  0Eh
.eh_frame:00000000000082B2                 db  10h
.eh_frame:00000000000082B3                 db  46h ; F
.eh_frame:00000000000082B4                 db  0Eh
.eh_frame:00000000000082B5                 db  18h
.eh_frame:00000000000082B6                 db  4Ah ; J
.eh_frame:00000000000082B7                 db  0Fh
.eh_frame:00000000000082B8                 db  0Bh
.eh_frame:00000000000082B9                 db  77h ; w
.eh_frame:00000000000082BA                 db    8
.eh_frame:00000000000082BB                 db  80h
.eh_frame:00000000000082BC                 db    0
.eh_frame:00000000000082BD                 db  3Fh ; ?
.eh_frame:00000000000082BE                 db  1Ah
.eh_frame:00000000000082BF                 db  3Bh ; ;
.eh_frame:00000000000082C0                 db  2Ah ; *
.eh_frame:00000000000082C1                 db  33h ; 3
.eh_frame:00000000000082C2                 db  24h ; $
.eh_frame:00000000000082C3                 db  22h ; "
.eh_frame:00000000000082C4                 db    0
.eh_frame:00000000000082C5                 db    0
.eh_frame:00000000000082C6                 db    0
.eh_frame:00000000000082C7                 db    0
.eh_frame:00000000000082C8                 db  14h
.eh_frame:00000000000082C9                 db    0
.eh_frame:00000000000082CA                 db    0
.eh_frame:00000000000082CB                 db    0
.eh_frame:00000000000082CC                 db  44h ; D
.eh_frame:00000000000082CD                 db    0
.eh_frame:00000000000082CE                 db    0
.eh_frame:00000000000082CF                 db    0
.eh_frame:00000000000082D0                 db  90h
.eh_frame:00000000000082D1                 db  99h
.eh_frame:00000000000082D2                 db 0FFh
.eh_frame:00000000000082D3                 db 0FFh
.eh_frame:00000000000082D4                 db    8
.eh_frame:00000000000082D5                 db    0
.eh_frame:00000000000082D6                 db    0
.eh_frame:00000000000082D7                 db    0
.eh_frame:00000000000082D8                 db    0
.eh_frame:00000000000082D9                 db    0
.eh_frame:00000000000082DA                 db    0
.eh_frame:00000000000082DB                 db    0
.eh_frame:00000000000082DC                 db    0
.eh_frame:00000000000082DD                 db    0
.eh_frame:00000000000082DE                 db    0
.eh_frame:00000000000082DF                 db    0
.eh_frame:00000000000082E0                 db  34h ; 4
.eh_frame:00000000000082E1                 db    0
.eh_frame:00000000000082E2                 db    0
.eh_frame:00000000000082E3                 db    0
.eh_frame:00000000000082E4                 db  5Ch ; \
.eh_frame:00000000000082E5                 db    0
.eh_frame:00000000000082E6                 db    0
.eh_frame:00000000000082E7                 db    0
.eh_frame:00000000000082E8                 db    8
.eh_frame:00000000000082E9                 db 0AFh
.eh_frame:00000000000082EA                 db 0FFh
.eh_frame:00000000000082EB                 db 0FFh
.eh_frame:00000000000082EC                 db  28h ; (
.eh_frame:00000000000082ED                 db    1
.eh_frame:00000000000082EE                 db    0
.eh_frame:00000000000082EF                 db    0
.eh_frame:00000000000082F0                 db    0
.eh_frame:00000000000082F1                 db  41h ; A
.eh_frame:00000000000082F2                 db  0Eh
.eh_frame:00000000000082F3                 db  10h
.eh_frame:00000000000082F4                 db  86h
.eh_frame:00000000000082F5                 db    2
.eh_frame:00000000000082F6                 db  41h ; A
.eh_frame:00000000000082F7                 db  0Eh
.eh_frame:00000000000082F8                 db  18h
.eh_frame:00000000000082F9                 db  83h
.eh_frame:00000000000082FA                 db    3
.eh_frame:00000000000082FB                 db  44h ; D
.eh_frame:00000000000082FC                 db  0Eh
.eh_frame:00000000000082FD                 db  30h ; 0
.eh_frame:00000000000082FE                 db    2
.eh_frame:00000000000082FF                 db  9Fh
.eh_frame:0000000000008300                 db  0Ah
.eh_frame:0000000000008301                 db  0Eh
.eh_frame:0000000000008302                 db  18h
.eh_frame:0000000000008303                 db  44h ; D
.eh_frame:0000000000008304                 db  0Eh
.eh_frame:0000000000008305                 db  10h
.eh_frame:0000000000008306                 db  41h ; A
.eh_frame:0000000000008307                 db  0Eh
.eh_frame:0000000000008308                 db    8
.eh_frame:0000000000008309                 db  46h ; F
.eh_frame:000000000000830A                 db  0Bh
.eh_frame:000000000000830B                 db  61h ; a
.eh_frame:000000000000830C                 db  0Ah
.eh_frame:000000000000830D                 db  0Eh
.eh_frame:000000000000830E                 db  18h
.eh_frame:000000000000830F                 db  46h ; F
.eh_frame:0000000000008310                 db  0Eh
.eh_frame:0000000000008311                 db  10h
.eh_frame:0000000000008312                 db  41h ; A
.eh_frame:0000000000008313                 db  0Eh
.eh_frame:0000000000008314                 db    8
.eh_frame:0000000000008315                 db  48h ; H
.eh_frame:0000000000008316                 db  0Bh
.eh_frame:0000000000008317                 db    0
.eh_frame:0000000000008318                 db  5Ch ; \
.eh_frame:0000000000008319                 db    0
.eh_frame:000000000000831A                 db    0
.eh_frame:000000000000831B                 db    0
.eh_frame:000000000000831C                 db  94h
.eh_frame:000000000000831D                 db    0
.eh_frame:000000000000831E                 db    0
.eh_frame:000000000000831F                 db    0
.eh_frame:0000000000008320                 db    0
.eh_frame:0000000000008321                 db 0B0h
.eh_frame:0000000000008322                 db 0FFh
.eh_frame:0000000000008323                 db 0FFh
.eh_frame:0000000000008324                 db  66h ; f
.eh_frame:0000000000008325                 db    1
.eh_frame:0000000000008326                 db    0
.eh_frame:0000000000008327                 db    0
.eh_frame:0000000000008328                 db    0
.eh_frame:0000000000008329                 db  42h ; B
.eh_frame:000000000000832A                 db  0Eh
.eh_frame:000000000000832B                 db  10h
.eh_frame:000000000000832C                 db  8Fh
.eh_frame:000000000000832D                 db    2
.eh_frame:000000000000832E                 db  42h ; B
.eh_frame:000000000000832F                 db  0Eh
.eh_frame:0000000000008330                 db  18h
.eh_frame:0000000000008331                 db  8Eh
.eh_frame:0000000000008332                 db    3
.eh_frame:0000000000008333                 db  42h ; B
.eh_frame:0000000000008334                 db  0Eh
.eh_frame:0000000000008335                 db  20h
.eh_frame:0000000000008336                 db  8Dh
.eh_frame:0000000000008337                 db    4
.eh_frame:0000000000008338                 db  42h ; B
.eh_frame:0000000000008339                 db  0Eh
.eh_frame:000000000000833A                 db  28h ; (
.eh_frame:000000000000833B                 db  8Ch
.eh_frame:000000000000833C                 db    5
.eh_frame:000000000000833D                 db  41h ; A
.eh_frame:000000000000833E                 db  0Eh
.eh_frame:000000000000833F                 db  30h ; 0
.eh_frame:0000000000008340                 db  86h
.eh_frame:0000000000008341                 db    6
.eh_frame:0000000000008342                 db  41h ; A
.eh_frame:0000000000008343                 db  0Eh
.eh_frame:0000000000008344                 db  38h ; 8
.eh_frame:0000000000008345                 db  83h
.eh_frame:0000000000008346                 db    7
.eh_frame:0000000000008347                 db  47h ; G
.eh_frame:0000000000008348                 db  0Eh
.eh_frame:0000000000008349                 db  90h
.eh_frame:000000000000834A                 db    3
.eh_frame:000000000000834B                 db    2
.eh_frame:000000000000834C                 db  84h
.eh_frame:000000000000834D                 db  0Eh
.eh_frame:000000000000834E                 db  98h
.eh_frame:000000000000834F                 db    3
.eh_frame:0000000000008350                 db  49h ; I
.eh_frame:0000000000008351                 db  0Eh
.eh_frame:0000000000008352                 db 0A0h
.eh_frame:0000000000008353                 db    3
.eh_frame:0000000000008354                 db  56h ; V
.eh_frame:0000000000008355                 db  0Eh
.eh_frame:0000000000008356                 db  98h
.eh_frame:0000000000008357                 db    3
.eh_frame:0000000000008358                 db  41h ; A
.eh_frame:0000000000008359                 db  0Eh
.eh_frame:000000000000835A                 db  90h
.eh_frame:000000000000835B                 db    3
.eh_frame:000000000000835C                 db    2
.eh_frame:000000000000835D                 db  75h ; u
.eh_frame:000000000000835E                 db  0Ah
.eh_frame:000000000000835F                 db  0Eh
.eh_frame:0000000000008360                 db  38h ; 8
.eh_frame:0000000000008361                 db  41h ; A
.eh_frame:0000000000008362                 db  0Eh
.eh_frame:0000000000008363                 db  30h ; 0
.eh_frame:0000000000008364                 db  41h ; A
.eh_frame:0000000000008365                 db  0Eh
.eh_frame:0000000000008366                 db  28h ; (
.eh_frame:0000000000008367                 db  42h ; B
.eh_frame:0000000000008368                 db  0Eh
.eh_frame:0000000000008369                 db  20h
.eh_frame:000000000000836A                 db  42h ; B
.eh_frame:000000000000836B                 db  0Eh
.eh_frame:000000000000836C                 db  18h
.eh_frame:000000000000836D                 db  42h ; B
.eh_frame:000000000000836E                 db  0Eh
.eh_frame:000000000000836F                 db  10h
.eh_frame:0000000000008370                 db  42h ; B
.eh_frame:0000000000008371                 db  0Eh
.eh_frame:0000000000008372                 db    8
.eh_frame:0000000000008373                 db  41h ; A
.eh_frame:0000000000008374                 db  0Bh
.eh_frame:0000000000008375                 db    0
.eh_frame:0000000000008376                 db    0
.eh_frame:0000000000008377                 db    0
.eh_frame:0000000000008378                 db  28h ; (
.eh_frame:0000000000008379                 db    0
.eh_frame:000000000000837A                 db    0
.eh_frame:000000000000837B                 db    0
.eh_frame:000000000000837C                 db 0F4h
.eh_frame:000000000000837D                 db    0
.eh_frame:000000000000837E                 db    0
.eh_frame:000000000000837F                 db    0
.eh_frame:0000000000008380                 db  10h
.eh_frame:0000000000008381                 db 0B1h
.eh_frame:0000000000008382                 db 0FFh
.eh_frame:0000000000008383                 db 0FFh
.eh_frame:0000000000008384                 db 0DAh
.eh_frame:0000000000008385                 db    4
.eh_frame:0000000000008386                 db    0
.eh_frame:0000000000008387                 db    0
.eh_frame:0000000000008388                 db    0
.eh_frame:0000000000008389                 db  42h ; B
.eh_frame:000000000000838A                 db  0Eh
.eh_frame:000000000000838B                 db  10h
.eh_frame:000000000000838C                 db  8Dh
.eh_frame:000000000000838D                 db    2
.eh_frame:000000000000838E                 db  42h ; B
.eh_frame:000000000000838F                 db  0Eh
.eh_frame:0000000000008390                 db  18h
.eh_frame:0000000000008391                 db  8Ch
.eh_frame:0000000000008392                 db    3
.eh_frame:0000000000008393                 db  46h ; F
.eh_frame:0000000000008394                 db  0Eh
.eh_frame:0000000000008395                 db  20h
.eh_frame:0000000000008396                 db  86h
.eh_frame:0000000000008397                 db    4
.eh_frame:0000000000008398                 db  41h ; A
.eh_frame:0000000000008399                 db  0Eh
.eh_frame:000000000000839A                 db  28h ; (
.eh_frame:000000000000839B                 db  83h
.eh_frame:000000000000839C                 db    5
.eh_frame:000000000000839D                 db  49h ; I
.eh_frame:000000000000839E                 db  0Eh
.eh_frame:000000000000839F                 db 0B0h
.eh_frame:00000000000083A0                 db    1
.eh_frame:00000000000083A1                 db    0
.eh_frame:00000000000083A2                 db    0
.eh_frame:00000000000083A3                 db    0
.eh_frame:00000000000083A4                 db  58h ; X
.eh_frame:00000000000083A5                 db    0
.eh_frame:00000000000083A6                 db    0
.eh_frame:00000000000083A7                 db    0
.eh_frame:00000000000083A8                 db  20h
.eh_frame:00000000000083A9                 db    1
.eh_frame:00000000000083AA                 db    0
.eh_frame:00000000000083AB                 db    0
.eh_frame:00000000000083AC                 db 0C4h
.eh_frame:00000000000083AD                 db 0B5h
.eh_frame:00000000000083AE                 db 0FFh
.eh_frame:00000000000083AF                 db 0FFh
.eh_frame:00000000000083B0                 db  67h ; g
.eh_frame:00000000000083B1                 db    1
.eh_frame:00000000000083B2                 db    0
.eh_frame:00000000000083B3                 db    0
.eh_frame:00000000000083B4                 db    0
.eh_frame:00000000000083B5                 db  42h ; B
.eh_frame:00000000000083B6                 db  0Eh
.eh_frame:00000000000083B7                 db  10h
.eh_frame:00000000000083B8                 db  8Eh
.eh_frame:00000000000083B9                 db    2
.eh_frame:00000000000083BA                 db  42h ; B
.eh_frame:00000000000083BB                 db  0Eh
.eh_frame:00000000000083BC                 db  18h
.eh_frame:00000000000083BD                 db  8Dh
.eh_frame:00000000000083BE                 db    3
.eh_frame:00000000000083BF                 db  42h ; B
.eh_frame:00000000000083C0                 db  0Eh
.eh_frame:00000000000083C1                 db  20h
.eh_frame:00000000000083C2                 db  8Ch
.eh_frame:00000000000083C3                 db    4
.eh_frame:00000000000083C4                 db  41h ; A
.eh_frame:00000000000083C5                 db  0Eh
.eh_frame:00000000000083C6                 db  28h ; (
.eh_frame:00000000000083C7                 db  86h
.eh_frame:00000000000083C8                 db    5
.eh_frame:00000000000083C9                 db  41h ; A
.eh_frame:00000000000083CA                 db  0Eh
.eh_frame:00000000000083CB                 db  30h ; 0
.eh_frame:00000000000083CC                 db  83h
.eh_frame:00000000000083CD                 db    6
.eh_frame:00000000000083CE                 db  46h ; F
.eh_frame:00000000000083CF                 db  0Eh
.eh_frame:00000000000083D0                 db  50h ; P
.eh_frame:00000000000083D1                 db    2
.eh_frame:00000000000083D2                 db 0DEh
.eh_frame:00000000000083D3                 db  0Ah
.eh_frame:00000000000083D4                 db  0Eh
.eh_frame:00000000000083D5                 db  30h ; 0
.eh_frame:00000000000083D6                 db  44h ; D
.eh_frame:00000000000083D7                 db  0Eh
.eh_frame:00000000000083D8                 db  28h ; (
.eh_frame:00000000000083D9                 db  41h ; A
.eh_frame:00000000000083DA                 db  0Eh
.eh_frame:00000000000083DB                 db  20h
.eh_frame:00000000000083DC                 db  42h ; B
.eh_frame:00000000000083DD                 db  0Eh
.eh_frame:00000000000083DE                 db  18h
.eh_frame:00000000000083DF                 db  42h ; B
.eh_frame:00000000000083E0                 db  0Eh
.eh_frame:00000000000083E1                 db  10h
.eh_frame:00000000000083E2                 db  42h ; B
.eh_frame:00000000000083E3                 db  0Eh
.eh_frame:00000000000083E4                 db    8
.eh_frame:00000000000083E5                 db  49h ; I
.eh_frame:00000000000083E6                 db  0Bh
.eh_frame:00000000000083E7                 db    2
.eh_frame:00000000000083E8                 db  59h ; Y
.eh_frame:00000000000083E9                 db  0Ah
.eh_frame:00000000000083EA                 db  0Eh
.eh_frame:00000000000083EB                 db  30h ; 0
.eh_frame:00000000000083EC                 db  41h ; A
.eh_frame:00000000000083ED                 db  0Eh
.eh_frame:00000000000083EE                 db  28h ; (
.eh_frame:00000000000083EF                 db  41h ; A
.eh_frame:00000000000083F0                 db  0Eh
.eh_frame:00000000000083F1                 db  20h
.eh_frame:00000000000083F2                 db  42h ; B
.eh_frame:00000000000083F3                 db  0Eh
.eh_frame:00000000000083F4                 db  18h
.eh_frame:00000000000083F5                 db  42h ; B
.eh_frame:00000000000083F6                 db  0Eh
.eh_frame:00000000000083F7                 db  10h
.eh_frame:00000000000083F8                 db  42h ; B
.eh_frame:00000000000083F9                 db  0Eh
.eh_frame:00000000000083FA                 db    8
.eh_frame:00000000000083FB                 db  41h ; A
.eh_frame:00000000000083FC                 db  0Bh
.eh_frame:00000000000083FD                 db    0
.eh_frame:00000000000083FE                 db    0
.eh_frame:00000000000083FF                 db    0
.eh_frame:0000000000008400                 db  64h ; d
.eh_frame:0000000000008401                 db    0
.eh_frame:0000000000008402                 db    0
.eh_frame:0000000000008403                 db    0
.eh_frame:0000000000008404                 db  7Ch ; |
.eh_frame:0000000000008405                 db    1
.eh_frame:0000000000008406                 db    0
.eh_frame:0000000000008407                 db    0
.eh_frame:0000000000008408                 db 0D8h
.eh_frame:0000000000008409                 db 0B6h
.eh_frame:000000000000840A                 db 0FFh
.eh_frame:000000000000840B                 db 0FFh
.eh_frame:000000000000840C                 db 0DAh
.eh_frame:000000000000840D                 db    1
.eh_frame:000000000000840E                 db    0
.eh_frame:000000000000840F                 db    0
.eh_frame:0000000000008410                 db    0
.eh_frame:0000000000008411                 db  42h ; B
.eh_frame:0000000000008412                 db  0Eh
.eh_frame:0000000000008413                 db  10h
.eh_frame:0000000000008414                 db  8Fh
.eh_frame:0000000000008415                 db    2
.eh_frame:0000000000008416                 db  42h ; B
.eh_frame:0000000000008417                 db  0Eh
.eh_frame:0000000000008418                 db  18h
.eh_frame:0000000000008419                 db  8Eh
.eh_frame:000000000000841A                 db    3
.eh_frame:000000000000841B                 db  42h ; B
.eh_frame:000000000000841C                 db  0Eh
.eh_frame:000000000000841D                 db  20h
.eh_frame:000000000000841E                 db  8Dh
.eh_frame:000000000000841F                 db    4
.eh_frame:0000000000008420                 db  42h ; B
.eh_frame:0000000000008421                 db  0Eh
.eh_frame:0000000000008422                 db  28h ; (
.eh_frame:0000000000008423                 db  8Ch
.eh_frame:0000000000008424                 db    5
.eh_frame:0000000000008425                 db  41h ; A
.eh_frame:0000000000008426                 db  0Eh
.eh_frame:0000000000008427                 db  30h ; 0
.eh_frame:0000000000008428                 db  86h
.eh_frame:0000000000008429                 db    6
.eh_frame:000000000000842A                 db  41h ; A
.eh_frame:000000000000842B                 db  0Eh
.eh_frame:000000000000842C                 db  38h ; 8
.eh_frame:000000000000842D                 db  83h
.eh_frame:000000000000842E                 db    7
.eh_frame:000000000000842F                 db  46h ; F
.eh_frame:0000000000008430                 db  0Eh
.eh_frame:0000000000008431                 db  70h ; p
.eh_frame:0000000000008432                 db    3
.eh_frame:0000000000008433                 db  35h ; 5
.eh_frame:0000000000008434                 db    1
.eh_frame:0000000000008435                 db  0Ah
.eh_frame:0000000000008436                 db  0Eh
.eh_frame:0000000000008437                 db  38h ; 8
.eh_frame:0000000000008438                 db  41h ; A
.eh_frame:0000000000008439                 db  0Eh
.eh_frame:000000000000843A                 db  30h ; 0
.eh_frame:000000000000843B                 db  41h ; A
.eh_frame:000000000000843C                 db  0Eh
.eh_frame:000000000000843D                 db  28h ; (
.eh_frame:000000000000843E                 db  42h ; B
.eh_frame:000000000000843F                 db  0Eh
.eh_frame:0000000000008440                 db  20h
.eh_frame:0000000000008441                 db  42h ; B
.eh_frame:0000000000008442                 db  0Eh
.eh_frame:0000000000008443                 db  18h
.eh_frame:0000000000008444                 db  42h ; B
.eh_frame:0000000000008445                 db  0Eh
.eh_frame:0000000000008446                 db  10h
.eh_frame:0000000000008447                 db  42h ; B
.eh_frame:0000000000008448                 db  0Eh
.eh_frame:0000000000008449                 db    8
.eh_frame:000000000000844A                 db  49h ; I
.eh_frame:000000000000844B                 db  0Bh
.eh_frame:000000000000844C                 db    2
.eh_frame:000000000000844D                 db  58h ; X
.eh_frame:000000000000844E                 db  0Ah
.eh_frame:000000000000844F                 db  0Eh
.eh_frame:0000000000008450                 db  38h ; 8
.eh_frame:0000000000008451                 db  41h ; A
.eh_frame:0000000000008452                 db  0Eh
.eh_frame:0000000000008453                 db  30h ; 0
.eh_frame:0000000000008454                 db  41h ; A
.eh_frame:0000000000008455                 db  0Eh
.eh_frame:0000000000008456                 db  28h ; (
.eh_frame:0000000000008457                 db  42h ; B
.eh_frame:0000000000008458                 db  0Eh
.eh_frame:0000000000008459                 db  20h
.eh_frame:000000000000845A                 db  42h ; B
.eh_frame:000000000000845B                 db  0Eh
.eh_frame:000000000000845C                 db  18h
.eh_frame:000000000000845D                 db  42h ; B
.eh_frame:000000000000845E                 db  0Eh
.eh_frame:000000000000845F                 db  10h
.eh_frame:0000000000008460                 db  42h ; B
.eh_frame:0000000000008461                 db  0Eh
.eh_frame:0000000000008462                 db    8
.eh_frame:0000000000008463                 db  46h ; F
.eh_frame:0000000000008464                 db  0Bh
.eh_frame:0000000000008465                 db    0
.eh_frame:0000000000008466                 db    0
.eh_frame:0000000000008467                 db    0
.eh_frame:0000000000008468                 db  6Ch ; l
.eh_frame:0000000000008469                 db    0
.eh_frame:000000000000846A                 db    0
.eh_frame:000000000000846B                 db    0
.eh_frame:000000000000846C                 db 0E4h
.eh_frame:000000000000846D                 db    1
.eh_frame:000000000000846E                 db    0
.eh_frame:000000000000846F                 db    0
.eh_frame:0000000000008470                 db    0
.eh_frame:0000000000008471                 db  98h
.eh_frame:0000000000008472                 db 0FFh
.eh_frame:0000000000008473                 db 0FFh
.eh_frame:0000000000008474                 db  61h ; a
.eh_frame:0000000000008475                 db  14h
.eh_frame:0000000000008476                 db    0
.eh_frame:0000000000008477                 db    0
.eh_frame:0000000000008478                 db    0
.eh_frame:0000000000008479                 db  42h ; B
.eh_frame:000000000000847A                 db  0Eh
.eh_frame:000000000000847B                 db  10h
.eh_frame:000000000000847C                 db  8Fh
.eh_frame:000000000000847D                 db    2
.eh_frame:000000000000847E                 db  42h ; B
.eh_frame:000000000000847F                 db  0Eh
.eh_frame:0000000000008480                 db  18h
.eh_frame:0000000000008481                 db  8Eh
.eh_frame:0000000000008482                 db    3
.eh_frame:0000000000008483                 db  45h ; E
.eh_frame:0000000000008484                 db  0Eh
.eh_frame:0000000000008485                 db  20h
.eh_frame:0000000000008486                 db  8Dh
.eh_frame:0000000000008487                 db    4
.eh_frame:0000000000008488                 db  42h ; B
.eh_frame:0000000000008489                 db  0Eh
.eh_frame:000000000000848A                 db  28h ; (
.eh_frame:000000000000848B                 db  8Ch
.eh_frame:000000000000848C                 db    5
.eh_frame:000000000000848D                 db  41h ; A
.eh_frame:000000000000848E                 db  0Eh
.eh_frame:000000000000848F                 db  30h ; 0
.eh_frame:0000000000008490                 db  86h
.eh_frame:0000000000008491                 db    6
.eh_frame:0000000000008492                 db  41h ; A
.eh_frame:0000000000008493                 db  0Eh
.eh_frame:0000000000008494                 db  38h ; 8
.eh_frame:0000000000008495                 db  83h
.eh_frame:0000000000008496                 db    7
.eh_frame:0000000000008497                 db  47h ; G
.eh_frame:0000000000008498                 db  0Eh
.eh_frame:0000000000008499                 db 0D0h
.eh_frame:000000000000849A                 db    2
.eh_frame:000000000000849B                 db    3
.eh_frame:000000000000849C                 db  9Eh
.eh_frame:000000000000849D                 db    3
.eh_frame:000000000000849E                 db  0Ah
.eh_frame:000000000000849F                 db  0Eh
.eh_frame:00000000000084A0                 db 0D8h
.eh_frame:00000000000084A1                 db    2
.eh_frame:00000000000084A2                 db  4Fh ; O
.eh_frame:00000000000084A3                 db  0Eh
.eh_frame:00000000000084A4                 db 0E0h
.eh_frame:00000000000084A5                 db    2
.eh_frame:00000000000084A6                 db  5Fh ; _
.eh_frame:00000000000084A7                 db  0Bh
.eh_frame:00000000000084A8                 db    3
.eh_frame:00000000000084A9                 db  55h ; U
.eh_frame:00000000000084AA                 db    7
.eh_frame:00000000000084AB                 db  0Ah
.eh_frame:00000000000084AC                 db  0Eh
.eh_frame:00000000000084AD                 db  38h ; 8
.eh_frame:00000000000084AE                 db  41h ; A
.eh_frame:00000000000084AF                 db  0Eh
.eh_frame:00000000000084B0                 db  30h ; 0
.eh_frame:00000000000084B1                 db  41h ; A
.eh_frame:00000000000084B2                 db  0Eh
.eh_frame:00000000000084B3                 db  28h ; (
.eh_frame:00000000000084B4                 db  42h ; B
.eh_frame:00000000000084B5                 db  0Eh
.eh_frame:00000000000084B6                 db  20h
.eh_frame:00000000000084B7                 db  42h ; B
.eh_frame:00000000000084B8                 db  0Eh
.eh_frame:00000000000084B9                 db  18h
.eh_frame:00000000000084BA                 db  42h ; B
.eh_frame:00000000000084BB                 db  0Eh
.eh_frame:00000000000084BC                 db  10h
.eh_frame:00000000000084BD                 db  42h ; B
.eh_frame:00000000000084BE                 db  0Eh
.eh_frame:00000000000084BF                 db    8
.eh_frame:00000000000084C0                 db  41h ; A
.eh_frame:00000000000084C1                 db  0Bh
.eh_frame:00000000000084C2                 db    3
.eh_frame:00000000000084C3                 db  15h
.eh_frame:00000000000084C4                 db    1
.eh_frame:00000000000084C5                 db  0Eh
.eh_frame:00000000000084C6                 db 0D8h
.eh_frame:00000000000084C7                 db    2
.eh_frame:00000000000084C8                 db  41h ; A
.eh_frame:00000000000084C9                 db  0Eh
.eh_frame:00000000000084CA                 db 0E0h
.eh_frame:00000000000084CB                 db    2
.eh_frame:00000000000084CC                 db  48h ; H
.eh_frame:00000000000084CD                 db  0Eh
.eh_frame:00000000000084CE                 db 0D8h
.eh_frame:00000000000084CF                 db    2
.eh_frame:00000000000084D0                 db  41h ; A
.eh_frame:00000000000084D1                 db  0Eh
.eh_frame:00000000000084D2                 db 0D0h
.eh_frame:00000000000084D3                 db    2
.eh_frame:00000000000084D4                 db    0
.eh_frame:00000000000084D5                 db    0
.eh_frame:00000000000084D6                 db    0
.eh_frame:00000000000084D7                 db    0
.eh_frame:00000000000084D8                 db  4Ch ; L
.eh_frame:00000000000084D9                 db    0
.eh_frame:00000000000084DA                 db    0
.eh_frame:00000000000084DB                 db    0
.eh_frame:00000000000084DC                 db  54h ; T
.eh_frame:00000000000084DD                 db    2
.eh_frame:00000000000084DE                 db    0
.eh_frame:00000000000084DF                 db    0
.eh_frame:00000000000084E0                 db 0E0h
.eh_frame:00000000000084E1                 db 0B7h
.eh_frame:00000000000084E2                 db 0FFh
.eh_frame:00000000000084E3                 db 0FFh
.eh_frame:00000000000084E4                 db 0E1h
.eh_frame:00000000000084E5                 db    1
.eh_frame:00000000000084E6                 db    0
.eh_frame:00000000000084E7                 db    0
.eh_frame:00000000000084E8                 db    0
.eh_frame:00000000000084E9                 db  42h ; B
.eh_frame:00000000000084EA                 db  0Eh
.eh_frame:00000000000084EB                 db  10h
.eh_frame:00000000000084EC                 db  8Fh
.eh_frame:00000000000084ED                 db    2
.eh_frame:00000000000084EE                 db  42h ; B
.eh_frame:00000000000084EF                 db  0Eh
.eh_frame:00000000000084F0                 db  18h
.eh_frame:00000000000084F1                 db  8Eh
.eh_frame:00000000000084F2                 db    3
.eh_frame:00000000000084F3                 db  45h ; E
.eh_frame:00000000000084F4                 db  0Eh
.eh_frame:00000000000084F5                 db  20h
.eh_frame:00000000000084F6                 db  8Dh
.eh_frame:00000000000084F7                 db    4
.eh_frame:00000000000084F8                 db  42h ; B
.eh_frame:00000000000084F9                 db  0Eh
.eh_frame:00000000000084FA                 db  28h ; (
.eh_frame:00000000000084FB                 db  8Ch
.eh_frame:00000000000084FC                 db    5
.eh_frame:00000000000084FD                 db  41h ; A
.eh_frame:00000000000084FE                 db  0Eh
.eh_frame:00000000000084FF                 db  30h ; 0
.eh_frame:0000000000008500                 db  86h
.eh_frame:0000000000008501                 db    6
.eh_frame:0000000000008502                 db  41h ; A
.eh_frame:0000000000008503                 db  0Eh
.eh_frame:0000000000008504                 db  38h ; 8
.eh_frame:0000000000008505                 db  83h
.eh_frame:0000000000008506                 db    7
.eh_frame:0000000000008507                 db  47h ; G
.eh_frame:0000000000008508                 db  0Eh
.eh_frame:0000000000008509                 db  60h ; `
.eh_frame:000000000000850A                 db    3
.eh_frame:000000000000850B                 db  44h ; D
.eh_frame:000000000000850C                 db    1
.eh_frame:000000000000850D                 db  0Ah
.eh_frame:000000000000850E                 db  0Eh
.eh_frame:000000000000850F                 db  38h ; 8
.eh_frame:0000000000008510                 db  41h ; A
.eh_frame:0000000000008511                 db  0Eh
.eh_frame:0000000000008512                 db  30h ; 0
.eh_frame:0000000000008513                 db  41h ; A
.eh_frame:0000000000008514                 db  0Eh
.eh_frame:0000000000008515                 db  28h ; (
.eh_frame:0000000000008516                 db  42h ; B
.eh_frame:0000000000008517                 db  0Eh
.eh_frame:0000000000008518                 db  20h
.eh_frame:0000000000008519                 db  42h ; B
.eh_frame:000000000000851A                 db  0Eh
.eh_frame:000000000000851B                 db  18h
.eh_frame:000000000000851C                 db  42h ; B
.eh_frame:000000000000851D                 db  0Eh
.eh_frame:000000000000851E                 db  10h
.eh_frame:000000000000851F                 db  42h ; B
.eh_frame:0000000000008520                 db  0Eh
.eh_frame:0000000000008521                 db    8
.eh_frame:0000000000008522                 db  46h ; F
.eh_frame:0000000000008523                 db  0Bh
.eh_frame:0000000000008524                 db    0
.eh_frame:0000000000008525                 db    0
.eh_frame:0000000000008526                 db    0
.eh_frame:0000000000008527                 db    0
.eh_frame:0000000000008528                 db  10h
.eh_frame:0000000000008529                 db    0
.eh_frame:000000000000852A                 db    0
.eh_frame:000000000000852B                 db    0
.eh_frame:000000000000852C                 db 0A4h
.eh_frame:000000000000852D                 db    2
.eh_frame:000000000000852E                 db    0
.eh_frame:000000000000852F                 db    0
.eh_frame:0000000000008530                 db  80h
.eh_frame:0000000000008531                 db 0B9h
.eh_frame:0000000000008532                 db 0FFh
.eh_frame:0000000000008533                 db 0FFh
.eh_frame:0000000000008534                 db    8
.eh_frame:0000000000008535                 db    0
.eh_frame:0000000000008536                 db    0
.eh_frame:0000000000008537                 db    0
.eh_frame:0000000000008538                 db    0
.eh_frame:0000000000008539                 db    0
.eh_frame:000000000000853A                 db    0
.eh_frame:000000000000853B                 db    0
.eh_frame:000000000000853C                 db  10h
.eh_frame:000000000000853D                 db    0
.eh_frame:000000000000853E                 db    0
.eh_frame:000000000000853F                 db    0
.eh_frame:0000000000008540                 db 0B8h
.eh_frame:0000000000008541                 db    2
.eh_frame:0000000000008542                 db    0
.eh_frame:0000000000008543                 db    0
.eh_frame:0000000000008544                 db  7Ch ; |
.eh_frame:0000000000008545                 db 0B9h
.eh_frame:0000000000008546                 db 0FFh
.eh_frame:0000000000008547                 db 0FFh
.eh_frame:0000000000008548                 db    8
.eh_frame:0000000000008549                 db    0
.eh_frame:000000000000854A                 db    0
.eh_frame:000000000000854B                 db    0
.eh_frame:000000000000854C                 db    0
.eh_frame:000000000000854D                 db    0
.eh_frame:000000000000854E                 db    0
.eh_frame:000000000000854F                 db    0
.eh_frame:0000000000008550                 db  2Ch ; ,
.eh_frame:0000000000008551                 db    0
.eh_frame:0000000000008552                 db    0
.eh_frame:0000000000008553                 db    0
.eh_frame:0000000000008554                 db 0CCh
.eh_frame:0000000000008555                 db    2
.eh_frame:0000000000008556                 db    0
.eh_frame:0000000000008557                 db    0
.eh_frame:0000000000008558                 db  78h ; x
.eh_frame:0000000000008559                 db 0B9h
.eh_frame:000000000000855A                 db 0FFh
.eh_frame:000000000000855B                 db 0FFh
.eh_frame:000000000000855C                 db 0A4h
.eh_frame:000000000000855D                 db    0
.eh_frame:000000000000855E                 db    0
.eh_frame:000000000000855F                 db    0
.eh_frame:0000000000008560                 db    0
.eh_frame:0000000000008561                 db  41h ; A
.eh_frame:0000000000008562                 db  0Eh
.eh_frame:0000000000008563                 db  10h
.eh_frame:0000000000008564                 db  86h
.eh_frame:0000000000008565                 db    2
.eh_frame:0000000000008566                 db  41h ; A
.eh_frame:0000000000008567                 db  0Eh
.eh_frame:0000000000008568                 db  18h
.eh_frame:0000000000008569                 db  83h
.eh_frame:000000000000856A                 db    3
.eh_frame:000000000000856B                 db  44h ; D
.eh_frame:000000000000856C                 db  0Eh
.eh_frame:000000000000856D                 db  20h
.eh_frame:000000000000856E                 db  7Ah ; z
.eh_frame:000000000000856F                 db  0Ah
.eh_frame:0000000000008570                 db  0Eh
.eh_frame:0000000000008571                 db  18h
.eh_frame:0000000000008572                 db  41h ; A
.eh_frame:0000000000008573                 db  0Eh
.eh_frame:0000000000008574                 db  10h
.eh_frame:0000000000008575                 db  41h ; A
.eh_frame:0000000000008576                 db  0Eh
.eh_frame:0000000000008577                 db    8
.eh_frame:0000000000008578                 db  41h ; A
.eh_frame:0000000000008579                 db  0Bh
.eh_frame:000000000000857A                 db    0
.eh_frame:000000000000857B                 db    0
.eh_frame:000000000000857C                 db    0
.eh_frame:000000000000857D                 db    0
.eh_frame:000000000000857E                 db    0
.eh_frame:000000000000857F                 db    0
.eh_frame:0000000000008580                 db  1Ch
.eh_frame:0000000000008581                 db    0
.eh_frame:0000000000008582                 db    0
.eh_frame:0000000000008583                 db    0
.eh_frame:0000000000008584                 db 0FCh
.eh_frame:0000000000008585                 db    2
.eh_frame:0000000000008586                 db    0
.eh_frame:0000000000008587                 db    0
.eh_frame:0000000000008588                 db 0F8h
.eh_frame:0000000000008589                 db 0B9h
.eh_frame:000000000000858A                 db 0FFh
.eh_frame:000000000000858B                 db 0FFh
.eh_frame:000000000000858C                 db  9Fh
.eh_frame:000000000000858D                 db    0
.eh_frame:000000000000858E                 db    0
.eh_frame:000000000000858F                 db    0
.eh_frame:0000000000008590                 db    0
.eh_frame:0000000000008591                 db  44h ; D
.eh_frame:0000000000008592                 db  0Eh
.eh_frame:0000000000008593                 db  10h
.eh_frame:0000000000008594                 db  83h
.eh_frame:0000000000008595                 db    2
.eh_frame:0000000000008596                 db    2
.eh_frame:0000000000008597                 db  78h ; x
.eh_frame:0000000000008598                 db  0Ah
.eh_frame:0000000000008599                 db  0Eh
.eh_frame:000000000000859A                 db    8
.eh_frame:000000000000859B                 db  41h ; A
.eh_frame:000000000000859C                 db  0Bh
.eh_frame:000000000000859D                 db    0
.eh_frame:000000000000859E                 db    0
.eh_frame:000000000000859F                 db    0
.eh_frame:00000000000085A0                 db  40h ; @
.eh_frame:00000000000085A1                 db    0
.eh_frame:00000000000085A2                 db    0
.eh_frame:00000000000085A3                 db    0
.eh_frame:00000000000085A4                 db  1Ch
.eh_frame:00000000000085A5                 db    3
.eh_frame:00000000000085A6                 db    0
.eh_frame:00000000000085A7                 db    0
.eh_frame:00000000000085A8                 db  78h ; x
.eh_frame:00000000000085A9                 db 0BAh
.eh_frame:00000000000085AA                 db 0FFh
.eh_frame:00000000000085AB                 db 0FFh
.eh_frame:00000000000085AC                 db 0E7h
.eh_frame:00000000000085AD                 db    0
.eh_frame:00000000000085AE                 db    0
.eh_frame:00000000000085AF                 db    0
.eh_frame:00000000000085B0                 db    0
.eh_frame:00000000000085B1                 db  41h ; A
.eh_frame:00000000000085B2                 db  0Eh
.eh_frame:00000000000085B3                 db  10h
.eh_frame:00000000000085B4                 db  86h
.eh_frame:00000000000085B5                 db    2
.eh_frame:00000000000085B6                 db  41h ; A
.eh_frame:00000000000085B7                 db  0Eh
.eh_frame:00000000000085B8                 db  18h
.eh_frame:00000000000085B9                 db  83h
.eh_frame:00000000000085BA                 db    3
.eh_frame:00000000000085BB                 db  49h ; I
.eh_frame:00000000000085BC                 db  0Eh
.eh_frame:00000000000085BD                 db  20h
.eh_frame:00000000000085BE                 db  6Eh ; n
.eh_frame:00000000000085BF                 db  0Ah
.eh_frame:00000000000085C0                 db  0Eh
.eh_frame:00000000000085C1                 db  18h
.eh_frame:00000000000085C2                 db  41h ; A
.eh_frame:00000000000085C3                 db  0Eh
.eh_frame:00000000000085C4                 db  10h
.eh_frame:00000000000085C5                 db  41h ; A
.eh_frame:00000000000085C6                 db  0Eh
.eh_frame:00000000000085C7                 db    8
.eh_frame:00000000000085C8                 db  45h ; E
.eh_frame:00000000000085C9                 db  0Bh
.eh_frame:00000000000085CA                 db    2
.eh_frame:00000000000085CB                 db  4Ah ; J
.eh_frame:00000000000085CC                 db  0Ah
.eh_frame:00000000000085CD                 db  0Eh
.eh_frame:00000000000085CE                 db  18h
.eh_frame:00000000000085CF                 db  41h ; A
.eh_frame:00000000000085D0                 db  0Eh
.eh_frame:00000000000085D1                 db  10h
.eh_frame:00000000000085D2                 db  41h ; A
.eh_frame:00000000000085D3                 db  0Eh
.eh_frame:00000000000085D4                 db    8
.eh_frame:00000000000085D5                 db  44h ; D
.eh_frame:00000000000085D6                 db  0Bh
.eh_frame:00000000000085D7                 db    2
.eh_frame:00000000000085D8                 db  54h ; T
.eh_frame:00000000000085D9                 db  0Eh
.eh_frame:00000000000085DA                 db  18h
.eh_frame:00000000000085DB                 db  41h ; A
.eh_frame:00000000000085DC                 db  0Eh
.eh_frame:00000000000085DD                 db  10h
.eh_frame:00000000000085DE                 db  41h ; A
.eh_frame:00000000000085DF                 db  0Eh
.eh_frame:00000000000085E0                 db    8
.eh_frame:00000000000085E1                 db    0
.eh_frame:00000000000085E2                 db    0
.eh_frame:00000000000085E3                 db    0
.eh_frame:00000000000085E4                 db  74h ; t
.eh_frame:00000000000085E5                 db    0
.eh_frame:00000000000085E6                 db    0
.eh_frame:00000000000085E7                 db    0
.eh_frame:00000000000085E8                 db  60h ; `
.eh_frame:00000000000085E9                 db    3
.eh_frame:00000000000085EA                 db    0
.eh_frame:00000000000085EB                 db    0
.eh_frame:00000000000085EC                 db  24h ; $
.eh_frame:00000000000085ED                 db 0BBh
.eh_frame:00000000000085EE                 db 0FFh
.eh_frame:00000000000085EF                 db 0FFh
.eh_frame:00000000000085F0                 db  34h ; 4
.eh_frame:00000000000085F1                 db  12h
.eh_frame:00000000000085F2                 db    0
.eh_frame:00000000000085F3                 db    0
.eh_frame:00000000000085F4                 db    0
.eh_frame:00000000000085F5                 db  42h ; B
.eh_frame:00000000000085F6                 db  0Eh
.eh_frame:00000000000085F7                 db  10h
.eh_frame:00000000000085F8                 db  8Fh
.eh_frame:00000000000085F9                 db    2
.eh_frame:00000000000085FA                 db  42h ; B
.eh_frame:00000000000085FB                 db  0Eh
.eh_frame:00000000000085FC                 db  18h
.eh_frame:00000000000085FD                 db  8Eh
.eh_frame:00000000000085FE                 db    3
.eh_frame:00000000000085FF                 db  45h ; E
.eh_frame:0000000000008600                 db  0Eh
.eh_frame:0000000000008601                 db  20h
.eh_frame:0000000000008602                 db  8Dh
.eh_frame:0000000000008603                 db    4
.eh_frame:0000000000008604                 db  42h ; B
.eh_frame:0000000000008605                 db  0Eh
.eh_frame:0000000000008606                 db  28h ; (
.eh_frame:0000000000008607                 db  8Ch
.eh_frame:0000000000008608                 db    5
.eh_frame:0000000000008609                 db  44h ; D
.eh_frame:000000000000860A                 db  0Eh
.eh_frame:000000000000860B                 db  30h ; 0
.eh_frame:000000000000860C                 db  86h
.eh_frame:000000000000860D                 db    6
.eh_frame:000000000000860E                 db  41h ; A
.eh_frame:000000000000860F                 db  0Eh
.eh_frame:0000000000008610                 db  38h ; 8
.eh_frame:0000000000008611                 db  83h
.eh_frame:0000000000008612                 db    7
.eh_frame:0000000000008613                 db  53h ; S
.eh_frame:0000000000008614                 db  0Eh
.eh_frame:0000000000008615                 db 0F0h
.eh_frame:0000000000008616                 db    1
.eh_frame:0000000000008617                 db    3
.eh_frame:0000000000008618                 db  81h
.eh_frame:0000000000008619                 db  0Bh
.eh_frame:000000000000861A                 db  0Eh
.eh_frame:000000000000861B                 db 0F8h
.eh_frame:000000000000861C                 db    1
.eh_frame:000000000000861D                 db  4Ah ; J
.eh_frame:000000000000861E                 db  0Eh
.eh_frame:000000000000861F                 db  80h
.eh_frame:0000000000008620                 db    2
.eh_frame:0000000000008621                 db  44h ; D
.eh_frame:0000000000008622                 db  0Eh
.eh_frame:0000000000008623                 db  88h
.eh_frame:0000000000008624                 db    2
.eh_frame:0000000000008625                 db  45h ; E
.eh_frame:0000000000008626                 db  0Eh
.eh_frame:0000000000008627                 db  90h
.eh_frame:0000000000008628                 db    2
.eh_frame:0000000000008629                 db  5Fh ; _
.eh_frame:000000000000862A                 db  0Eh
.eh_frame:000000000000862B                 db 0F0h
.eh_frame:000000000000862C                 db    1
.eh_frame:000000000000862D                 db  64h ; d
.eh_frame:000000000000862E                 db  0Ah
.eh_frame:000000000000862F                 db  0Eh
.eh_frame:0000000000008630                 db  38h ; 8
.eh_frame:0000000000008631                 db  41h ; A
.eh_frame:0000000000008632                 db  0Eh
.eh_frame:0000000000008633                 db  30h ; 0
.eh_frame:0000000000008634                 db  41h ; A
.eh_frame:0000000000008635                 db  0Eh
.eh_frame:0000000000008636                 db  28h ; (
.eh_frame:0000000000008637                 db  42h ; B
.eh_frame:0000000000008638                 db  0Eh
.eh_frame:0000000000008639                 db  20h
.eh_frame:000000000000863A                 db  42h ; B
.eh_frame:000000000000863B                 db  0Eh
.eh_frame:000000000000863C                 db  18h
.eh_frame:000000000000863D                 db  42h ; B
.eh_frame:000000000000863E                 db  0Eh
.eh_frame:000000000000863F                 db  10h
.eh_frame:0000000000008640                 db  42h ; B
.eh_frame:0000000000008641                 db  0Eh
.eh_frame:0000000000008642                 db    8
.eh_frame:0000000000008643                 db  44h ; D
.eh_frame:0000000000008644                 db  0Bh
.eh_frame:0000000000008645                 db    3
.eh_frame:0000000000008646                 db  99h
.eh_frame:0000000000008647                 db    5
.eh_frame:0000000000008648                 db  0Eh
.eh_frame:0000000000008649                 db 0F8h
.eh_frame:000000000000864A                 db    1
.eh_frame:000000000000864B                 db  4Dh ; M
.eh_frame:000000000000864C                 db  0Eh
.eh_frame:000000000000864D                 db  80h
.eh_frame:000000000000864E                 db    2
.eh_frame:000000000000864F                 db  44h ; D
.eh_frame:0000000000008650                 db  0Eh
.eh_frame:0000000000008651                 db  88h
.eh_frame:0000000000008652                 db    2
.eh_frame:0000000000008653                 db  47h ; G
.eh_frame:0000000000008654                 db  0Eh
.eh_frame:0000000000008655                 db  90h
.eh_frame:0000000000008656                 db    2
.eh_frame:0000000000008657                 db  5Bh ; [
.eh_frame:0000000000008658                 db  0Eh
.eh_frame:0000000000008659                 db 0F0h
.eh_frame:000000000000865A                 db    1
.eh_frame:000000000000865B                 db    0
.eh_frame:000000000000865C                 db  68h ; h
.eh_frame:000000000000865D                 db    0
.eh_frame:000000000000865E                 db    0
.eh_frame:000000000000865F                 db    0
.eh_frame:0000000000008660                 db 0D8h
.eh_frame:0000000000008661                 db    3
.eh_frame:0000000000008662                 db    0
.eh_frame:0000000000008663                 db    0
.eh_frame:0000000000008664                 db 0ECh
.eh_frame:0000000000008665                 db 0CCh
.eh_frame:0000000000008666                 db 0FFh
.eh_frame:0000000000008667                 db 0FFh
.eh_frame:0000000000008668                 db 0ABh
.eh_frame:0000000000008669                 db    1
.eh_frame:000000000000866A                 db    0
.eh_frame:000000000000866B                 db    0
.eh_frame:000000000000866C                 db    0
.eh_frame:000000000000866D                 db  42h ; B
.eh_frame:000000000000866E                 db  0Eh
.eh_frame:000000000000866F                 db  10h
.eh_frame:0000000000008670                 db  8Fh
.eh_frame:0000000000008671                 db    2
.eh_frame:0000000000008672                 db  42h ; B
.eh_frame:0000000000008673                 db  0Eh
.eh_frame:0000000000008674                 db  18h
.eh_frame:0000000000008675                 db  8Eh
.eh_frame:0000000000008676                 db    3
.eh_frame:0000000000008677                 db  45h ; E
.eh_frame:0000000000008678                 db  0Eh
.eh_frame:0000000000008679                 db  20h
.eh_frame:000000000000867A                 db  8Dh
.eh_frame:000000000000867B                 db    4
.eh_frame:000000000000867C                 db  42h ; B
.eh_frame:000000000000867D                 db  0Eh
.eh_frame:000000000000867E                 db  28h ; (
.eh_frame:000000000000867F                 db  8Ch
.eh_frame:0000000000008680                 db    5
.eh_frame:0000000000008681                 db  44h ; D
.eh_frame:0000000000008682                 db  0Eh
.eh_frame:0000000000008683                 db  30h ; 0
.eh_frame:0000000000008684                 db  86h
.eh_frame:0000000000008685                 db    6
.eh_frame:0000000000008686                 db  41h ; A
.eh_frame:0000000000008687                 db  0Eh
.eh_frame:0000000000008688                 db  38h ; 8
.eh_frame:0000000000008689                 db  83h
.eh_frame:000000000000868A                 db    7
.eh_frame:000000000000868B                 db  47h ; G
.eh_frame:000000000000868C                 db  0Eh
.eh_frame:000000000000868D                 db  60h ; `
.eh_frame:000000000000868E                 db    2
.eh_frame:000000000000868F                 db  99h
.eh_frame:0000000000008690                 db  0Eh
.eh_frame:0000000000008691                 db  68h ; h
.eh_frame:0000000000008692                 db  5Fh ; _
.eh_frame:0000000000008693                 db  0Eh
.eh_frame:0000000000008694                 db  70h ; p
.eh_frame:0000000000008695                 db  46h ; F
.eh_frame:0000000000008696                 db  0Eh
.eh_frame:0000000000008697                 db  78h ; x
.eh_frame:0000000000008698                 db  42h ; B
.eh_frame:0000000000008699                 db  0Eh
.eh_frame:000000000000869A                 db  80h
.eh_frame:000000000000869B                 db    1
.eh_frame:000000000000869C                 db  59h ; Y
.eh_frame:000000000000869D                 db  0Eh
.eh_frame:000000000000869E                 db  60h ; `
.eh_frame:000000000000869F                 db    2
.eh_frame:00000000000086A0                 db  40h ; @
.eh_frame:00000000000086A1                 db  0Eh
.eh_frame:00000000000086A2                 db  68h ; h
.eh_frame:00000000000086A3                 db  4Bh ; K
.eh_frame:00000000000086A4                 db  0Eh
.eh_frame:00000000000086A5                 db  70h ; p
.eh_frame:00000000000086A6                 db  43h ; C
.eh_frame:00000000000086A7                 db  0Eh
.eh_frame:00000000000086A8                 db  78h ; x
.eh_frame:00000000000086A9                 db  45h ; E
.eh_frame:00000000000086AA                 db  0Eh
.eh_frame:00000000000086AB                 db  80h
.eh_frame:00000000000086AC                 db    1
.eh_frame:00000000000086AD                 db  5Eh ; ^
.eh_frame:00000000000086AE                 db  0Eh
.eh_frame:00000000000086AF                 db  60h ; `
.eh_frame:00000000000086B0                 db  4Ch ; L
.eh_frame:00000000000086B1                 db  0Ah
.eh_frame:00000000000086B2                 db  0Eh
.eh_frame:00000000000086B3                 db  38h ; 8
.eh_frame:00000000000086B4                 db  44h ; D
.eh_frame:00000000000086B5                 db  0Eh
.eh_frame:00000000000086B6                 db  30h ; 0
.eh_frame:00000000000086B7                 db  41h ; A
.eh_frame:00000000000086B8                 db  0Eh
.eh_frame:00000000000086B9                 db  28h ; (
.eh_frame:00000000000086BA                 db  42h ; B
.eh_frame:00000000000086BB                 db  0Eh
.eh_frame:00000000000086BC                 db  20h
.eh_frame:00000000000086BD                 db  42h ; B
.eh_frame:00000000000086BE                 db  0Eh
.eh_frame:00000000000086BF                 db  18h
.eh_frame:00000000000086C0                 db  42h ; B
.eh_frame:00000000000086C1                 db  0Eh
.eh_frame:00000000000086C2                 db  10h
.eh_frame:00000000000086C3                 db  42h ; B
.eh_frame:00000000000086C4                 db  0Eh
.eh_frame:00000000000086C5                 db    8
.eh_frame:00000000000086C6                 db  46h ; F
.eh_frame:00000000000086C7                 db  0Bh
.eh_frame:00000000000086C8                 db  28h ; (
.eh_frame:00000000000086C9                 db    0
.eh_frame:00000000000086CA                 db    0
.eh_frame:00000000000086CB                 db    0
.eh_frame:00000000000086CC                 db  44h ; D
.eh_frame:00000000000086CD                 db    4
.eh_frame:00000000000086CE                 db    0
.eh_frame:00000000000086CF                 db    0
.eh_frame:00000000000086D0                 db  30h ; 0
.eh_frame:00000000000086D1                 db 0CEh
.eh_frame:00000000000086D2                 db 0FFh
.eh_frame:00000000000086D3                 db 0FFh
.eh_frame:00000000000086D4                 db  36h ; 6
.eh_frame:00000000000086D5                 db    0
.eh_frame:00000000000086D6                 db    0
.eh_frame:00000000000086D7                 db    0
.eh_frame:00000000000086D8                 db    0
.eh_frame:00000000000086D9                 db  42h ; B
.eh_frame:00000000000086DA                 db  0Eh
.eh_frame:00000000000086DB                 db  10h
.eh_frame:00000000000086DC                 db  8Ch
.eh_frame:00000000000086DD                 db    2
.eh_frame:00000000000086DE                 db  41h ; A
.eh_frame:00000000000086DF                 db  0Eh
.eh_frame:00000000000086E0                 db  18h
.eh_frame:00000000000086E1                 db  86h
.eh_frame:00000000000086E2                 db    3
.eh_frame:00000000000086E3                 db  41h ; A
.eh_frame:00000000000086E4                 db  0Eh
.eh_frame:00000000000086E5                 db  20h
.eh_frame:00000000000086E6                 db  83h
.eh_frame:00000000000086E7                 db    4
.eh_frame:00000000000086E8                 db  6Eh ; n
.eh_frame:00000000000086E9                 db  0Eh
.eh_frame:00000000000086EA                 db  18h
.eh_frame:00000000000086EB                 db  41h ; A
.eh_frame:00000000000086EC                 db  0Eh
.eh_frame:00000000000086ED                 db  10h
.eh_frame:00000000000086EE                 db  42h ; B
.eh_frame:00000000000086EF                 db  0Eh
.eh_frame:00000000000086F0                 db    8
.eh_frame:00000000000086F1                 db    0
.eh_frame:00000000000086F2                 db    0
.eh_frame:00000000000086F3                 db    0
.eh_frame:00000000000086F4                 db  10h
.eh_frame:00000000000086F5                 db    0
.eh_frame:00000000000086F6                 db    0
.eh_frame:00000000000086F7                 db    0
.eh_frame:00000000000086F8                 db  70h ; p
.eh_frame:00000000000086F9                 db    4
.eh_frame:00000000000086FA                 db    0
.eh_frame:00000000000086FB                 db    0
.eh_frame:00000000000086FC                 db  44h ; D
.eh_frame:00000000000086FD                 db 0CEh
.eh_frame:00000000000086FE                 db 0FFh
.eh_frame:00000000000086FF                 db 0FFh
.eh_frame:0000000000008700                 db  11h
.eh_frame:0000000000008701                 db    0
.eh_frame:0000000000008702                 db    0
.eh_frame:0000000000008703                 db    0
.eh_frame:0000000000008704                 db    0
.eh_frame:0000000000008705                 db    0
.eh_frame:0000000000008706                 db    0
.eh_frame:0000000000008707                 db    0
.eh_frame:0000000000008708                 db  10h
.eh_frame:0000000000008709                 db    0
.eh_frame:000000000000870A                 db    0
.eh_frame:000000000000870B                 db    0
.eh_frame:000000000000870C                 db  84h
.eh_frame:000000000000870D                 db    4
.eh_frame:000000000000870E                 db    0
.eh_frame:000000000000870F                 db    0
.eh_frame:0000000000008710                 db  50h ; P
.eh_frame:0000000000008711                 db 0CEh
.eh_frame:0000000000008712                 db 0FFh
.eh_frame:0000000000008713                 db 0FFh
.eh_frame:0000000000008714                 db  11h
.eh_frame:0000000000008715                 db    0
.eh_frame:0000000000008716                 db    0
.eh_frame:0000000000008717                 db    0
.eh_frame:0000000000008718                 db    0
.eh_frame:0000000000008719                 db    0
.eh_frame:000000000000871A                 db    0
.eh_frame:000000000000871B                 db    0
.eh_frame:000000000000871C                 db  10h
.eh_frame:000000000000871D                 db    0
.eh_frame:000000000000871E                 db    0
.eh_frame:000000000000871F                 db    0
.eh_frame:0000000000008720                 db  98h
.eh_frame:0000000000008721                 db    4
.eh_frame:0000000000008722                 db    0
.eh_frame:0000000000008723                 db    0
.eh_frame:0000000000008724                 db  5Ch ; \
.eh_frame:0000000000008725                 db 0CEh
.eh_frame:0000000000008726                 db 0FFh
.eh_frame:0000000000008727                 db 0FFh
.eh_frame:0000000000008728                 db  35h ; 5
.eh_frame:0000000000008729                 db    0
.eh_frame:000000000000872A                 db    0
.eh_frame:000000000000872B                 db    0
.eh_frame:000000000000872C                 db    0
.eh_frame:000000000000872D                 db    0
.eh_frame:000000000000872E                 db    0
.eh_frame:000000000000872F                 db    0
.eh_frame:0000000000008730                 db  10h
.eh_frame:0000000000008731                 db    0
.eh_frame:0000000000008732                 db    0
.eh_frame:0000000000008733                 db    0
.eh_frame:0000000000008734                 db 0ACh
.eh_frame:0000000000008735                 db    4
.eh_frame:0000000000008736                 db    0
.eh_frame:0000000000008737                 db    0
.eh_frame:0000000000008738                 db  88h
.eh_frame:0000000000008739                 db 0CEh
.eh_frame:000000000000873A                 db 0FFh
.eh_frame:000000000000873B                 db 0FFh
.eh_frame:000000000000873C                 db  15h
.eh_frame:000000000000873D                 db    0
.eh_frame:000000000000873E                 db    0
.eh_frame:000000000000873F                 db    0
.eh_frame:0000000000008740                 db    0
.eh_frame:0000000000008741                 db    0
.eh_frame:0000000000008742                 db    0
.eh_frame:0000000000008743                 db    0
.eh_frame:0000000000008744                 db  10h
.eh_frame:0000000000008745                 db    0
.eh_frame:0000000000008746                 db    0
.eh_frame:0000000000008747                 db    0
.eh_frame:0000000000008748                 db 0C0h
.eh_frame:0000000000008749                 db    4
.eh_frame:000000000000874A                 db    0
.eh_frame:000000000000874B                 db    0
.eh_frame:000000000000874C                 db  94h
.eh_frame:000000000000874D                 db 0CEh
.eh_frame:000000000000874E                 db 0FFh
.eh_frame:000000000000874F                 db 0FFh
.eh_frame:0000000000008750                 db  30h ; 0
.eh_frame:0000000000008751                 db    0
.eh_frame:0000000000008752                 db    0
.eh_frame:0000000000008753                 db    0
.eh_frame:0000000000008754                 db    0
.eh_frame:0000000000008755                 db  6Bh ; k
.eh_frame:0000000000008756                 db  0Eh
.eh_frame:0000000000008757                 db  10h
.eh_frame:0000000000008758                 db  50h ; P
.eh_frame:0000000000008759                 db    0
.eh_frame:000000000000875A                 db    0
.eh_frame:000000000000875B                 db    0
.eh_frame:000000000000875C                 db 0D4h
.eh_frame:000000000000875D                 db    4
.eh_frame:000000000000875E                 db    0
.eh_frame:000000000000875F                 db    0
.eh_frame:0000000000008760                 db 0B0h
.eh_frame:0000000000008761                 db 0CEh
.eh_frame:0000000000008762                 db 0FFh
.eh_frame:0000000000008763                 db 0FFh
.eh_frame:0000000000008764                 db  74h ; t
.eh_frame:0000000000008765                 db    0
.eh_frame:0000000000008766                 db    0
.eh_frame:0000000000008767                 db    0
.eh_frame:0000000000008768                 db    0
.eh_frame:0000000000008769                 db  42h ; B
.eh_frame:000000000000876A                 db  0Eh
.eh_frame:000000000000876B                 db  10h
.eh_frame:000000000000876C                 db  8Fh
.eh_frame:000000000000876D                 db    2
.eh_frame:000000000000876E                 db  42h ; B
.eh_frame:000000000000876F                 db  0Eh
.eh_frame:0000000000008770                 db  18h
.eh_frame:0000000000008771                 db  8Eh
.eh_frame:0000000000008772                 db    3
.eh_frame:0000000000008773                 db  49h ; I
.eh_frame:0000000000008774                 db  0Eh
.eh_frame:0000000000008775                 db  20h
.eh_frame:0000000000008776                 db  8Dh
.eh_frame:0000000000008777                 db    4
.eh_frame:0000000000008778                 db  42h ; B
.eh_frame:0000000000008779                 db  0Eh
.eh_frame:000000000000877A                 db  28h ; (
.eh_frame:000000000000877B                 db  8Ch
.eh_frame:000000000000877C                 db    5
.eh_frame:000000000000877D                 db  44h ; D
.eh_frame:000000000000877E                 db  0Eh
.eh_frame:000000000000877F                 db  30h ; 0
.eh_frame:0000000000008780                 db  86h
.eh_frame:0000000000008781                 db    6
.eh_frame:0000000000008782                 db  41h ; A
.eh_frame:0000000000008783                 db  0Eh
.eh_frame:0000000000008784                 db  38h ; 8
.eh_frame:0000000000008785                 db  83h
.eh_frame:0000000000008786                 db    7
.eh_frame:0000000000008787                 db  4Dh ; M
.eh_frame:0000000000008788                 db  0Eh
.eh_frame:0000000000008789                 db  50h ; P
.eh_frame:000000000000878A                 db  5Fh ; _
.eh_frame:000000000000878B                 db  0Eh
.eh_frame:000000000000878C                 db  58h ; X
.eh_frame:000000000000878D                 db  47h ; G
.eh_frame:000000000000878E                 db  0Eh
.eh_frame:000000000000878F                 db  60h ; `
.eh_frame:0000000000008790                 db  46h ; F
.eh_frame:0000000000008791                 db  0Eh
.eh_frame:0000000000008792                 db  68h ; h
.eh_frame:0000000000008793                 db  44h ; D
.eh_frame:0000000000008794                 db  0Eh
.eh_frame:0000000000008795                 db  70h ; p
.eh_frame:0000000000008796                 db  58h ; X
.eh_frame:0000000000008797                 db  0Eh
.eh_frame:0000000000008798                 db  38h ; 8
.eh_frame:0000000000008799                 db  41h ; A
.eh_frame:000000000000879A                 db  0Eh
.eh_frame:000000000000879B                 db  30h ; 0
.eh_frame:000000000000879C                 db  41h ; A
.eh_frame:000000000000879D                 db  0Eh
.eh_frame:000000000000879E                 db  28h ; (
.eh_frame:000000000000879F                 db  42h ; B
.eh_frame:00000000000087A0                 db  0Eh
.eh_frame:00000000000087A1                 db  20h
.eh_frame:00000000000087A2                 db  42h ; B
.eh_frame:00000000000087A3                 db  0Eh
.eh_frame:00000000000087A4                 db  18h
.eh_frame:00000000000087A5                 db  42h ; B
.eh_frame:00000000000087A6                 db  0Eh
.eh_frame:00000000000087A7                 db  10h
.eh_frame:00000000000087A8                 db  42h ; B
.eh_frame:00000000000087A9                 db  0Eh
.eh_frame:00000000000087AA                 db    8
.eh_frame:00000000000087AB                 db    0
.eh_frame:00000000000087AC                 db  68h ; h
.eh_frame:00000000000087AD                 db    0
.eh_frame:00000000000087AE                 db    0
.eh_frame:00000000000087AF                 db    0
.eh_frame:00000000000087B0                 db  28h ; (
.eh_frame:00000000000087B1                 db    5
.eh_frame:00000000000087B2                 db    0
.eh_frame:00000000000087B3                 db    0
.eh_frame:00000000000087B4                 db 0DCh
.eh_frame:00000000000087B5                 db 0CEh
.eh_frame:00000000000087B6                 db 0FFh
.eh_frame:00000000000087B7                 db 0FFh
.eh_frame:00000000000087B8                 db 0E3h
.eh_frame:00000000000087B9                 db    0
.eh_frame:00000000000087BA                 db    0
.eh_frame:00000000000087BB                 db    0
.eh_frame:00000000000087BC                 db    0
.eh_frame:00000000000087BD                 db  42h ; B
.eh_frame:00000000000087BE                 db  0Eh
.eh_frame:00000000000087BF                 db  10h
.eh_frame:00000000000087C0                 db  8Fh
.eh_frame:00000000000087C1                 db    2
.eh_frame:00000000000087C2                 db  42h ; B
.eh_frame:00000000000087C3                 db  0Eh
.eh_frame:00000000000087C4                 db  18h
.eh_frame:00000000000087C5                 db  8Eh
.eh_frame:00000000000087C6                 db    3
.eh_frame:00000000000087C7                 db  49h ; I
.eh_frame:00000000000087C8                 db  0Eh
.eh_frame:00000000000087C9                 db  20h
.eh_frame:00000000000087CA                 db  8Dh
.eh_frame:00000000000087CB                 db    4
.eh_frame:00000000000087CC                 db  42h ; B
.eh_frame:00000000000087CD                 db  0Eh
.eh_frame:00000000000087CE                 db  28h ; (
.eh_frame:00000000000087CF                 db  8Ch
.eh_frame:00000000000087D0                 db    5
.eh_frame:00000000000087D1                 db  44h ; D
.eh_frame:00000000000087D2                 db  0Eh
.eh_frame:00000000000087D3                 db  30h ; 0
.eh_frame:00000000000087D4                 db  86h
.eh_frame:00000000000087D5                 db    6
.eh_frame:00000000000087D6                 db  41h ; A
.eh_frame:00000000000087D7                 db  0Eh
.eh_frame:00000000000087D8                 db  38h ; 8
.eh_frame:00000000000087D9                 db  83h
.eh_frame:00000000000087DA                 db    7
.eh_frame:00000000000087DB                 db  4Dh ; M
.eh_frame:00000000000087DC                 db  0Eh
.eh_frame:00000000000087DD                 db  70h ; p
.eh_frame:00000000000087DE                 db  65h ; e
.eh_frame:00000000000087DF                 db  0Eh
.eh_frame:00000000000087E0                 db  78h ; x
.eh_frame:00000000000087E1                 db  4Dh ; M
.eh_frame:00000000000087E2                 db  0Eh
.eh_frame:00000000000087E3                 db  80h
.eh_frame:00000000000087E4                 db    1
.eh_frame:00000000000087E5                 db  46h ; F
.eh_frame:00000000000087E6                 db  0Eh
.eh_frame:00000000000087E7                 db  88h
.eh_frame:00000000000087E8                 db    1
.eh_frame:00000000000087E9                 db  42h ; B
.eh_frame:00000000000087EA                 db  0Eh
.eh_frame:00000000000087EB                 db  90h
.eh_frame:00000000000087EC                 db    1
.eh_frame:00000000000087ED                 db  5Eh ; ^
.eh_frame:00000000000087EE                 db  0Eh
.eh_frame:00000000000087EF                 db  70h ; p
.eh_frame:00000000000087F0                 db  56h ; V
.eh_frame:00000000000087F1                 db  0Eh
.eh_frame:00000000000087F2                 db  78h ; x
.eh_frame:00000000000087F3                 db  43h ; C
.eh_frame:00000000000087F4                 db  0Eh
.eh_frame:00000000000087F5                 db  80h
.eh_frame:00000000000087F6                 db    1
.eh_frame:00000000000087F7                 db  43h ; C
.eh_frame:00000000000087F8                 db  0Eh
.eh_frame:00000000000087F9                 db  88h
.eh_frame:00000000000087FA                 db    1
.eh_frame:00000000000087FB                 db  56h ; V
.eh_frame:00000000000087FC                 db  0Eh
.eh_frame:00000000000087FD                 db  90h
.eh_frame:00000000000087FE                 db    1
.eh_frame:00000000000087FF                 db  52h ; R
.eh_frame:0000000000008800                 db  0Eh
.eh_frame:0000000000008801                 db  70h ; p
.eh_frame:0000000000008802                 db  5Bh ; [
.eh_frame:0000000000008803                 db  0Eh
.eh_frame:0000000000008804                 db  38h ; 8
.eh_frame:0000000000008805                 db  41h ; A
.eh_frame:0000000000008806                 db  0Eh
.eh_frame:0000000000008807                 db  30h ; 0
.eh_frame:0000000000008808                 db  41h ; A
.eh_frame:0000000000008809                 db  0Eh
.eh_frame:000000000000880A                 db  28h ; (
.eh_frame:000000000000880B                 db  42h ; B
.eh_frame:000000000000880C                 db  0Eh
.eh_frame:000000000000880D                 db  20h
.eh_frame:000000000000880E                 db  42h ; B
.eh_frame:000000000000880F                 db  0Eh
.eh_frame:0000000000008810                 db  18h
.eh_frame:0000000000008811                 db  42h ; B
.eh_frame:0000000000008812                 db  0Eh
.eh_frame:0000000000008813                 db  10h
.eh_frame:0000000000008814                 db  42h ; B
.eh_frame:0000000000008815                 db  0Eh
.eh_frame:0000000000008816                 db    8
.eh_frame:0000000000008817                 db    0
.eh_frame:0000000000008818                 db  10h
.eh_frame:0000000000008819                 db    0
.eh_frame:000000000000881A                 db    0
.eh_frame:000000000000881B                 db    0
.eh_frame:000000000000881C                 db  94h
.eh_frame:000000000000881D                 db    5
.eh_frame:000000000000881E                 db    0
.eh_frame:000000000000881F                 db    0
.eh_frame:0000000000008820                 db  60h ; `
.eh_frame:0000000000008821                 db 0CFh
.eh_frame:0000000000008822                 db 0FFh
.eh_frame:0000000000008823                 db 0FFh
.eh_frame:0000000000008824                 db  0Ah
.eh_frame:0000000000008825                 db    0
.eh_frame:0000000000008826                 db    0
.eh_frame:0000000000008827                 db    0
.eh_frame:0000000000008828                 db    0
.eh_frame:0000000000008829                 db    0
.eh_frame:000000000000882A                 db    0
.eh_frame:000000000000882B                 db    0
.eh_frame:000000000000882C                 db  28h ; (
.eh_frame:000000000000882D                 db    0
.eh_frame:000000000000882E                 db    0
.eh_frame:000000000000882F                 db    0
.eh_frame:0000000000008830                 db 0A8h
.eh_frame:0000000000008831                 db    5
.eh_frame:0000000000008832                 db    0
.eh_frame:0000000000008833                 db    0
.eh_frame:0000000000008834                 db  5Ch ; \
.eh_frame:0000000000008835                 db 0CFh
.eh_frame:0000000000008836                 db 0FFh
.eh_frame:0000000000008837                 db 0FFh
.eh_frame:0000000000008838                 db  93h
.eh_frame:0000000000008839                 db    0
.eh_frame:000000000000883A                 db    0
.eh_frame:000000000000883B                 db    0
.eh_frame:000000000000883C                 db    0
.eh_frame:000000000000883D                 db  48h ; H
.eh_frame:000000000000883E                 db  0Eh
.eh_frame:000000000000883F                 db  10h
.eh_frame:0000000000008840                 db  8Ch
.eh_frame:0000000000008841                 db    2
.eh_frame:0000000000008842                 db  48h ; H
.eh_frame:0000000000008843                 db  0Eh
.eh_frame:0000000000008844                 db  18h
.eh_frame:0000000000008845                 db  86h
.eh_frame:0000000000008846                 db    3
.eh_frame:0000000000008847                 db  41h ; A
.eh_frame:0000000000008848                 db  0Eh
.eh_frame:0000000000008849                 db  20h
.eh_frame:000000000000884A                 db  83h
.eh_frame:000000000000884B                 db    4
.eh_frame:000000000000884C                 db    2
.eh_frame:000000000000884D                 db  74h ; t
.eh_frame:000000000000884E                 db  0Eh
.eh_frame:000000000000884F                 db  18h
.eh_frame:0000000000008850                 db  4Bh ; K
.eh_frame:0000000000008851                 db  0Eh
.eh_frame:0000000000008852                 db  10h
.eh_frame:0000000000008853                 db  42h ; B
.eh_frame:0000000000008854                 db  0Eh
.eh_frame:0000000000008855                 db    8
.eh_frame:0000000000008856                 db    0
.eh_frame:0000000000008857                 db    0
.eh_frame:0000000000008858                 db  10h
.eh_frame:0000000000008859                 db    0
.eh_frame:000000000000885A                 db    0
.eh_frame:000000000000885B                 db    0
.eh_frame:000000000000885C                 db 0D4h
.eh_frame:000000000000885D                 db    5
.eh_frame:000000000000885E                 db    0
.eh_frame:000000000000885F                 db    0
.eh_frame:0000000000008860                 db 0D0h
.eh_frame:0000000000008861                 db 0CFh
.eh_frame:0000000000008862                 db 0FFh
.eh_frame:0000000000008863                 db 0FFh
.eh_frame:0000000000008864                 db  13h
.eh_frame:0000000000008865                 db    0
.eh_frame:0000000000008866                 db    0
.eh_frame:0000000000008867                 db    0
.eh_frame:0000000000008868                 db    0
.eh_frame:0000000000008869                 db    0
.eh_frame:000000000000886A                 db    0
.eh_frame:000000000000886B                 db    0
.eh_frame:000000000000886C                 db  10h
.eh_frame:000000000000886D                 db    0
.eh_frame:000000000000886E                 db    0
.eh_frame:000000000000886F                 db    0
.eh_frame:0000000000008870                 db 0E8h
.eh_frame:0000000000008871                 db    5
.eh_frame:0000000000008872                 db    0
.eh_frame:0000000000008873                 db    0
.eh_frame:0000000000008874                 db 0DCh
.eh_frame:0000000000008875                 db 0CFh
.eh_frame:0000000000008876                 db 0FFh
.eh_frame:0000000000008877                 db 0FFh
.eh_frame:0000000000008878                 db  0Ch
.eh_frame:0000000000008879                 db    0
.eh_frame:000000000000887A                 db    0
.eh_frame:000000000000887B                 db    0
.eh_frame:000000000000887C                 db    0
.eh_frame:000000000000887D                 db    0
.eh_frame:000000000000887E                 db    0
.eh_frame:000000000000887F                 db    0
.eh_frame:0000000000008880                 db  10h
.eh_frame:0000000000008881                 db    0
.eh_frame:0000000000008882                 db    0
.eh_frame:0000000000008883                 db    0
.eh_frame:0000000000008884                 db 0FCh
.eh_frame:0000000000008885                 db    5
.eh_frame:0000000000008886                 db    0
.eh_frame:0000000000008887                 db    0
.eh_frame:0000000000008888                 db 0D8h
.eh_frame:0000000000008889                 db 0CFh
.eh_frame:000000000000888A                 db 0FFh
.eh_frame:000000000000888B                 db 0FFh
.eh_frame:000000000000888C                 db  18h
.eh_frame:000000000000888D                 db    0
.eh_frame:000000000000888E                 db    0
.eh_frame:000000000000888F                 db    0
.eh_frame:0000000000008890                 db    0
.eh_frame:0000000000008891                 db    0
.eh_frame:0000000000008892                 db    0
.eh_frame:0000000000008893                 db    0
.eh_frame:0000000000008894                 db  10h
.eh_frame:0000000000008895                 db    0
.eh_frame:0000000000008896                 db    0
.eh_frame:0000000000008897                 db    0
.eh_frame:0000000000008898                 db  10h
.eh_frame:0000000000008899                 db    6
.eh_frame:000000000000889A                 db    0
.eh_frame:000000000000889B                 db    0
.eh_frame:000000000000889C                 db 0E4h
.eh_frame:000000000000889D                 db 0CFh
.eh_frame:000000000000889E                 db 0FFh
.eh_frame:000000000000889F                 db 0FFh
.eh_frame:00000000000088A0                 db  14h
.eh_frame:00000000000088A1                 db    0
.eh_frame:00000000000088A2                 db    0
.eh_frame:00000000000088A3                 db    0
.eh_frame:00000000000088A4                 db    0
.eh_frame:00000000000088A5                 db    0
.eh_frame:00000000000088A6                 db    0
.eh_frame:00000000000088A7                 db    0
.eh_frame:00000000000088A8                 db  18h
.eh_frame:00000000000088A9                 db    0
.eh_frame:00000000000088AA                 db    0
.eh_frame:00000000000088AB                 db    0
.eh_frame:00000000000088AC                 db  24h ; $
.eh_frame:00000000000088AD                 db    6
.eh_frame:00000000000088AE                 db    0
.eh_frame:00000000000088AF                 db    0
.eh_frame:00000000000088B0                 db 0F0h
.eh_frame:00000000000088B1                 db 0CFh
.eh_frame:00000000000088B2                 db 0FFh
.eh_frame:00000000000088B3                 db 0FFh
.eh_frame:00000000000088B4                 db  8Eh
.eh_frame:00000000000088B5                 db    0
.eh_frame:00000000000088B6                 db    0
.eh_frame:00000000000088B7                 db    0
.eh_frame:00000000000088B8                 db    0
.eh_frame:00000000000088B9                 db  44h ; D
.eh_frame:00000000000088BA                 db  0Eh
.eh_frame:00000000000088BB                 db  50h ; P
.eh_frame:00000000000088BC                 db    2
.eh_frame:00000000000088BD                 db  7Fh ; 
.eh_frame:00000000000088BE                 db  0Ah
.eh_frame:00000000000088BF                 db  0Eh
.eh_frame:00000000000088C0                 db    8
.eh_frame:00000000000088C1                 db  41h ; A
.eh_frame:00000000000088C2                 db  0Bh
.eh_frame:00000000000088C3                 db    0
.eh_frame:00000000000088C4                 db  18h
.eh_frame:00000000000088C5                 db    0
.eh_frame:00000000000088C6                 db    0
.eh_frame:00000000000088C7                 db    0
.eh_frame:00000000000088C8                 db  40h ; @
.eh_frame:00000000000088C9                 db    6
.eh_frame:00000000000088CA                 db    0
.eh_frame:00000000000088CB                 db    0
.eh_frame:00000000000088CC                 db  64h ; d
.eh_frame:00000000000088CD                 db 0D0h
.eh_frame:00000000000088CE                 db 0FFh
.eh_frame:00000000000088CF                 db 0FFh
.eh_frame:00000000000088D0                 db  8Ah
.eh_frame:00000000000088D1                 db    0
.eh_frame:00000000000088D2                 db    0
.eh_frame:00000000000088D3                 db    0
.eh_frame:00000000000088D4                 db    0
.eh_frame:00000000000088D5                 db  44h ; D
.eh_frame:00000000000088D6                 db  0Eh
.eh_frame:00000000000088D7                 db  50h ; P
.eh_frame:00000000000088D8                 db    2
.eh_frame:00000000000088D9                 db  7Bh ; {
.eh_frame:00000000000088DA                 db  0Ah
.eh_frame:00000000000088DB                 db  0Eh
.eh_frame:00000000000088DC                 db    8
.eh_frame:00000000000088DD                 db  41h ; A
.eh_frame:00000000000088DE                 db  0Bh
.eh_frame:00000000000088DF                 db    0
.eh_frame:00000000000088E0                 db  10h
.eh_frame:00000000000088E1                 db    0
.eh_frame:00000000000088E2                 db    0
.eh_frame:00000000000088E3                 db    0
.eh_frame:00000000000088E4                 db  5Ch ; \
.eh_frame:00000000000088E5                 db    6
.eh_frame:00000000000088E6                 db    0
.eh_frame:00000000000088E7                 db    0
.eh_frame:00000000000088E8                 db 0D8h
.eh_frame:00000000000088E9                 db 0D0h
.eh_frame:00000000000088EA                 db 0FFh
.eh_frame:00000000000088EB                 db 0FFh
.eh_frame:00000000000088EC                 db  0Ch
.eh_frame:00000000000088ED                 db    0
.eh_frame:00000000000088EE                 db    0
.eh_frame:00000000000088EF                 db    0
.eh_frame:00000000000088F0                 db    0
.eh_frame:00000000000088F1                 db    0
.eh_frame:00000000000088F2                 db    0
.eh_frame:00000000000088F3                 db    0
.eh_frame:00000000000088F4                 db  10h
.eh_frame:00000000000088F5                 db    0
.eh_frame:00000000000088F6                 db    0
.eh_frame:00000000000088F7                 db    0
.eh_frame:00000000000088F8                 db  70h ; p
.eh_frame:00000000000088F9                 db    6
.eh_frame:00000000000088FA                 db    0
.eh_frame:00000000000088FB                 db    0
.eh_frame:00000000000088FC                 db 0D4h
.eh_frame:00000000000088FD                 db 0D0h
.eh_frame:00000000000088FE                 db 0FFh
.eh_frame:00000000000088FF                 db 0FFh
.eh_frame:0000000000008900                 db  0Fh
.eh_frame:0000000000008901                 db    0
.eh_frame:0000000000008902                 db    0
.eh_frame:0000000000008903                 db    0
.eh_frame:0000000000008904                 db    0
.eh_frame:0000000000008905                 db    0
.eh_frame:0000000000008906                 db    0
.eh_frame:0000000000008907                 db    0
.eh_frame:0000000000008908                 db  18h
.eh_frame:0000000000008909                 db    0
.eh_frame:000000000000890A                 db    0
.eh_frame:000000000000890B                 db    0
.eh_frame:000000000000890C                 db  84h
.eh_frame:000000000000890D                 db    6
.eh_frame:000000000000890E                 db    0
.eh_frame:000000000000890F                 db    0
.eh_frame:0000000000008910                 db 0D0h
.eh_frame:0000000000008911                 db 0D0h
.eh_frame:0000000000008912                 db 0FFh
.eh_frame:0000000000008913                 db 0FFh
.eh_frame:0000000000008914                 db  98h
.eh_frame:0000000000008915                 db    0
.eh_frame:0000000000008916                 db    0
.eh_frame:0000000000008917                 db    0
.eh_frame:0000000000008918                 db    0
.eh_frame:0000000000008919                 db  44h ; D
.eh_frame:000000000000891A                 db  0Eh
.eh_frame:000000000000891B                 db  50h ; P
.eh_frame:000000000000891C                 db    2
.eh_frame:000000000000891D                 db  8Eh
.eh_frame:000000000000891E                 db  0Ah
.eh_frame:000000000000891F                 db  0Eh
.eh_frame:0000000000008920                 db    8
.eh_frame:0000000000008921                 db  41h ; A
.eh_frame:0000000000008922                 db  0Bh
.eh_frame:0000000000008923                 db    0
.eh_frame:0000000000008924                 db  10h
.eh_frame:0000000000008925                 db    0
.eh_frame:0000000000008926                 db    0
.eh_frame:0000000000008927                 db    0
.eh_frame:0000000000008928                 db 0A0h
.eh_frame:0000000000008929                 db    6
.eh_frame:000000000000892A                 db    0
.eh_frame:000000000000892B                 db    0
.eh_frame:000000000000892C                 db  54h ; T
.eh_frame:000000000000892D                 db 0D1h
.eh_frame:000000000000892E                 db 0FFh
.eh_frame:000000000000892F                 db 0FFh
.eh_frame:0000000000008930                 db  10h
.eh_frame:0000000000008931                 db    0
.eh_frame:0000000000008932                 db    0
.eh_frame:0000000000008933                 db    0
.eh_frame:0000000000008934                 db    0
.eh_frame:0000000000008935                 db    0
.eh_frame:0000000000008936                 db    0
.eh_frame:0000000000008937                 db    0
.eh_frame:0000000000008938                 db  10h
.eh_frame:0000000000008939                 db    0
.eh_frame:000000000000893A                 db    0
.eh_frame:000000000000893B                 db    0
.eh_frame:000000000000893C                 db 0B4h
.eh_frame:000000000000893D                 db    6
.eh_frame:000000000000893E                 db    0
.eh_frame:000000000000893F                 db    0
.eh_frame:0000000000008940                 db  50h ; P
.eh_frame:0000000000008941                 db 0D1h
.eh_frame:0000000000008942                 db 0FFh
.eh_frame:0000000000008943                 db 0FFh
.eh_frame:0000000000008944                 db  11h
.eh_frame:0000000000008945                 db    0
.eh_frame:0000000000008946                 db    0
.eh_frame:0000000000008947                 db    0
.eh_frame:0000000000008948                 db    0
.eh_frame:0000000000008949                 db    0
.eh_frame:000000000000894A                 db    0
.eh_frame:000000000000894B                 db    0
.eh_frame:000000000000894C                 db  10h
.eh_frame:000000000000894D                 db    0
.eh_frame:000000000000894E                 db    0
.eh_frame:000000000000894F                 db    0
.eh_frame:0000000000008950                 db 0C8h
.eh_frame:0000000000008951                 db    6
.eh_frame:0000000000008952                 db    0
.eh_frame:0000000000008953                 db    0
.eh_frame:0000000000008954                 db  5Ch ; \
.eh_frame:0000000000008955                 db 0D1h
.eh_frame:0000000000008956                 db 0FFh
.eh_frame:0000000000008957                 db 0FFh
.eh_frame:0000000000008958                 db  0Ah
.eh_frame:0000000000008959                 db    0
.eh_frame:000000000000895A                 db    0
.eh_frame:000000000000895B                 db    0
.eh_frame:000000000000895C                 db    0
.eh_frame:000000000000895D                 db    0
.eh_frame:000000000000895E                 db    0
.eh_frame:000000000000895F                 db    0
.eh_frame:0000000000008960                 db  18h
.eh_frame:0000000000008961                 db    0
.eh_frame:0000000000008962                 db    0
.eh_frame:0000000000008963                 db    0
.eh_frame:0000000000008964                 db 0DCh
.eh_frame:0000000000008965                 db    6
.eh_frame:0000000000008966                 db    0
.eh_frame:0000000000008967                 db    0
.eh_frame:0000000000008968                 db  58h ; X
.eh_frame:0000000000008969                 db 0D1h
.eh_frame:000000000000896A                 db 0FFh
.eh_frame:000000000000896B                 db 0FFh
.eh_frame:000000000000896C                 db  8Eh
.eh_frame:000000000000896D                 db    0
.eh_frame:000000000000896E                 db    0
.eh_frame:000000000000896F                 db    0
.eh_frame:0000000000008970                 db    0
.eh_frame:0000000000008971                 db  44h ; D
.eh_frame:0000000000008972                 db  0Eh
.eh_frame:0000000000008973                 db  50h ; P
.eh_frame:0000000000008974                 db    2
.eh_frame:0000000000008975                 db  7Fh ; 
.eh_frame:0000000000008976                 db  0Ah
.eh_frame:0000000000008977                 db  0Eh
.eh_frame:0000000000008978                 db    8
.eh_frame:0000000000008979                 db  41h ; A
.eh_frame:000000000000897A                 db  0Bh
.eh_frame:000000000000897B                 db    0
.eh_frame:000000000000897C                 db  18h
.eh_frame:000000000000897D                 db    0
.eh_frame:000000000000897E                 db    0
.eh_frame:000000000000897F                 db    0
.eh_frame:0000000000008980                 db 0F8h
.eh_frame:0000000000008981                 db    6
.eh_frame:0000000000008982                 db    0
.eh_frame:0000000000008983                 db    0
.eh_frame:0000000000008984                 db 0CCh
.eh_frame:0000000000008985                 db 0D1h
.eh_frame:0000000000008986                 db 0FFh
.eh_frame:0000000000008987                 db 0FFh
.eh_frame:0000000000008988                 db  91h
.eh_frame:0000000000008989                 db    0
.eh_frame:000000000000898A                 db    0
.eh_frame:000000000000898B                 db    0
.eh_frame:000000000000898C                 db    0
.eh_frame:000000000000898D                 db  44h ; D
.eh_frame:000000000000898E                 db  0Eh
.eh_frame:000000000000898F                 db  50h ; P
.eh_frame:0000000000008990                 db    2
.eh_frame:0000000000008991                 db  82h
.eh_frame:0000000000008992                 db  0Ah
.eh_frame:0000000000008993                 db  0Eh
.eh_frame:0000000000008994                 db    8
.eh_frame:0000000000008995                 db  41h ; A
.eh_frame:0000000000008996                 db  0Bh
.eh_frame:0000000000008997                 db    0
.eh_frame:0000000000008998                 db  10h
.eh_frame:0000000000008999                 db    0
.eh_frame:000000000000899A                 db    0
.eh_frame:000000000000899B                 db    0
.eh_frame:000000000000899C                 db  14h
.eh_frame:000000000000899D                 db    7
.eh_frame:000000000000899E                 db    0
.eh_frame:000000000000899F                 db    0
.eh_frame:00000000000089A0                 db  50h ; P
.eh_frame:00000000000089A1                 db 0D2h
.eh_frame:00000000000089A2                 db 0FFh
.eh_frame:00000000000089A3                 db 0FFh
.eh_frame:00000000000089A4                 db  0Ch
.eh_frame:00000000000089A5                 db    0
.eh_frame:00000000000089A6                 db    0
.eh_frame:00000000000089A7                 db    0
.eh_frame:00000000000089A8                 db    0
.eh_frame:00000000000089A9                 db    0
.eh_frame:00000000000089AA                 db    0
.eh_frame:00000000000089AB                 db    0
.eh_frame:00000000000089AC                 db  10h
.eh_frame:00000000000089AD                 db    0
.eh_frame:00000000000089AE                 db    0
.eh_frame:00000000000089AF                 db    0
.eh_frame:00000000000089B0                 db  28h ; (
.eh_frame:00000000000089B1                 db    7
.eh_frame:00000000000089B2                 db    0
.eh_frame:00000000000089B3                 db    0
.eh_frame:00000000000089B4                 db  4Ch ; L
.eh_frame:00000000000089B5                 db 0D2h
.eh_frame:00000000000089B6                 db 0FFh
.eh_frame:00000000000089B7                 db 0FFh
.eh_frame:00000000000089B8                 db  17h
.eh_frame:00000000000089B9                 db    0
.eh_frame:00000000000089BA                 db    0
.eh_frame:00000000000089BB                 db    0
.eh_frame:00000000000089BC                 db    0
.eh_frame:00000000000089BD                 db    0
.eh_frame:00000000000089BE                 db    0
.eh_frame:00000000000089BF                 db    0
.eh_frame:00000000000089C0                 db  10h
.eh_frame:00000000000089C1                 db    0
.eh_frame:00000000000089C2                 db    0
.eh_frame:00000000000089C3                 db    0
.eh_frame:00000000000089C4                 db  3Ch ; <
.eh_frame:00000000000089C5                 db    7
.eh_frame:00000000000089C6                 db    0
.eh_frame:00000000000089C7                 db    0
.eh_frame:00000000000089C8                 db  58h ; X
.eh_frame:00000000000089C9                 db 0D2h
.eh_frame:00000000000089CA                 db 0FFh
.eh_frame:00000000000089CB                 db 0FFh
.eh_frame:00000000000089CC                 db  13h
.eh_frame:00000000000089CD                 db    0
.eh_frame:00000000000089CE                 db    0
.eh_frame:00000000000089CF                 db    0
.eh_frame:00000000000089D0                 db    0
.eh_frame:00000000000089D1                 db    0
.eh_frame:00000000000089D2                 db    0
.eh_frame:00000000000089D3                 db    0
.eh_frame:00000000000089D4                 db  10h
.eh_frame:00000000000089D5                 db    0
.eh_frame:00000000000089D6                 db    0
.eh_frame:00000000000089D7                 db    0
.eh_frame:00000000000089D8                 db  50h ; P
.eh_frame:00000000000089D9                 db    7
.eh_frame:00000000000089DA                 db    0
.eh_frame:00000000000089DB                 db    0
.eh_frame:00000000000089DC                 db  64h ; d
.eh_frame:00000000000089DD                 db 0D2h
.eh_frame:00000000000089DE                 db 0FFh
.eh_frame:00000000000089DF                 db 0FFh
.eh_frame:00000000000089E0                 db  0Ch
.eh_frame:00000000000089E1                 db    0
.eh_frame:00000000000089E2                 db    0
.eh_frame:00000000000089E3                 db    0
.eh_frame:00000000000089E4                 db    0
.eh_frame:00000000000089E5                 db    0
.eh_frame:00000000000089E6                 db    0
.eh_frame:00000000000089E7                 db    0
.eh_frame:00000000000089E8                 db  10h
.eh_frame:00000000000089E9                 db    0
.eh_frame:00000000000089EA                 db    0
.eh_frame:00000000000089EB                 db    0
.eh_frame:00000000000089EC                 db  64h ; d
.eh_frame:00000000000089ED                 db    7
.eh_frame:00000000000089EE                 db    0
.eh_frame:00000000000089EF                 db    0
.eh_frame:00000000000089F0                 db  60h ; `
.eh_frame:00000000000089F1                 db 0D2h
.eh_frame:00000000000089F2                 db 0FFh
.eh_frame:00000000000089F3                 db 0FFh
.eh_frame:00000000000089F4                 db  14h
.eh_frame:00000000000089F5                 db    0
.eh_frame:00000000000089F6                 db    0
.eh_frame:00000000000089F7                 db    0
.eh_frame:00000000000089F8                 db    0
.eh_frame:00000000000089F9                 db    0
.eh_frame:00000000000089FA                 db    0
.eh_frame:00000000000089FB                 db    0
.eh_frame:00000000000089FC                 db  10h
.eh_frame:00000000000089FD                 db    0
.eh_frame:00000000000089FE                 db    0
.eh_frame:00000000000089FF                 db    0
.eh_frame:0000000000008A00                 db  78h ; x
.eh_frame:0000000000008A01                 db    7
.eh_frame:0000000000008A02                 db    0
.eh_frame:0000000000008A03                 db    0
.eh_frame:0000000000008A04                 db  6Ch ; l
.eh_frame:0000000000008A05                 db 0D2h
.eh_frame:0000000000008A06                 db 0FFh
.eh_frame:0000000000008A07                 db 0FFh
.eh_frame:0000000000008A08                 db  13h
.eh_frame:0000000000008A09                 db    0
.eh_frame:0000000000008A0A                 db    0
.eh_frame:0000000000008A0B                 db    0
.eh_frame:0000000000008A0C                 db    0
.eh_frame:0000000000008A0D                 db    0
.eh_frame:0000000000008A0E                 db    0
.eh_frame:0000000000008A0F                 db    0
.eh_frame:0000000000008A10                 db  14h
.eh_frame:0000000000008A11                 db    0
.eh_frame:0000000000008A12                 db    0
.eh_frame:0000000000008A13                 db    0
.eh_frame:0000000000008A14                 db  8Ch
.eh_frame:0000000000008A15                 db    7
.eh_frame:0000000000008A16                 db    0
.eh_frame:0000000000008A17                 db    0
.eh_frame:0000000000008A18                 db  78h ; x
.eh_frame:0000000000008A19                 db 0D2h
.eh_frame:0000000000008A1A                 db 0FFh
.eh_frame:0000000000008A1B                 db 0FFh
.eh_frame:0000000000008A1C                 db  18h
.eh_frame:0000000000008A1D                 db    0
.eh_frame:0000000000008A1E                 db    0
.eh_frame:0000000000008A1F                 db    0
.eh_frame:0000000000008A20                 db    0
.eh_frame:0000000000008A21                 db    0
.eh_frame:0000000000008A22                 db    0
.eh_frame:0000000000008A23                 db    0
.eh_frame:0000000000008A24                 db    0
.eh_frame:0000000000008A25                 db    0
.eh_frame:0000000000008A26                 db    0
.eh_frame:0000000000008A27                 db    0
.eh_frame:0000000000008A28                 db  10h
.eh_frame:0000000000008A29                 db    1
.eh_frame:0000000000008A2A                 db    0
.eh_frame:0000000000008A2B                 db    0
.eh_frame:0000000000008A2C                 db 0A4h
.eh_frame:0000000000008A2D                 db    7
.eh_frame:0000000000008A2E                 db    0
.eh_frame:0000000000008A2F                 db    0
.eh_frame:0000000000008A30                 db  80h
.eh_frame:0000000000008A31                 db 0D2h
.eh_frame:0000000000008A32                 db 0FFh
.eh_frame:0000000000008A33                 db 0FFh
.eh_frame:0000000000008A34                 db  17h
.eh_frame:0000000000008A35                 db    4
.eh_frame:0000000000008A36                 db    0
.eh_frame:0000000000008A37                 db    0
.eh_frame:0000000000008A38                 db    0
.eh_frame:0000000000008A39                 db  42h ; B
.eh_frame:0000000000008A3A                 db  0Eh
.eh_frame:0000000000008A3B                 db  10h
.eh_frame:0000000000008A3C                 db  8Fh
.eh_frame:0000000000008A3D                 db    2
.eh_frame:0000000000008A3E                 db  42h ; B
.eh_frame:0000000000008A3F                 db  0Eh
.eh_frame:0000000000008A40                 db  18h
.eh_frame:0000000000008A41                 db  8Eh
.eh_frame:0000000000008A42                 db    3
.eh_frame:0000000000008A43                 db  42h ; B
.eh_frame:0000000000008A44                 db  0Eh
.eh_frame:0000000000008A45                 db  20h
.eh_frame:0000000000008A46                 db  8Dh
.eh_frame:0000000000008A47                 db    4
.eh_frame:0000000000008A48                 db  42h ; B
.eh_frame:0000000000008A49                 db  0Eh
.eh_frame:0000000000008A4A                 db  28h ; (
.eh_frame:0000000000008A4B                 db  8Ch
.eh_frame:0000000000008A4C                 db    5
.eh_frame:0000000000008A4D                 db  44h ; D
.eh_frame:0000000000008A4E                 db  0Eh
.eh_frame:0000000000008A4F                 db  30h ; 0
.eh_frame:0000000000008A50                 db  86h
.eh_frame:0000000000008A51                 db    6
.eh_frame:0000000000008A52                 db  41h ; A
.eh_frame:0000000000008A53                 db  0Eh
.eh_frame:0000000000008A54                 db  38h ; 8
.eh_frame:0000000000008A55                 db  83h
.eh_frame:0000000000008A56                 db    7
.eh_frame:0000000000008A57                 db  4Ah ; J
.eh_frame:0000000000008A58                 db  0Eh
.eh_frame:0000000000008A59                 db  60h ; `
.eh_frame:0000000000008A5A                 db    2
.eh_frame:0000000000008A5B                 db 0DDh
.eh_frame:0000000000008A5C                 db  0Eh
.eh_frame:0000000000008A5D                 db  68h ; h
.eh_frame:0000000000008A5E                 db  57h ; W
.eh_frame:0000000000008A5F                 db  0Eh
.eh_frame:0000000000008A60                 db  70h ; p
.eh_frame:0000000000008A61                 db  42h ; B
.eh_frame:0000000000008A62                 db  0Eh
.eh_frame:0000000000008A63                 db  78h ; x
.eh_frame:0000000000008A64                 db  42h ; B
.eh_frame:0000000000008A65                 db  0Eh
.eh_frame:0000000000008A66                 db  80h
.eh_frame:0000000000008A67                 db    1
.eh_frame:0000000000008A68                 db  42h ; B
.eh_frame:0000000000008A69                 db  0Eh
.eh_frame:0000000000008A6A                 db  88h
.eh_frame:0000000000008A6B                 db    1
.eh_frame:0000000000008A6C                 db  42h ; B
.eh_frame:0000000000008A6D                 db  0Eh
.eh_frame:0000000000008A6E                 db  90h
.eh_frame:0000000000008A6F                 db    1
.eh_frame:0000000000008A70                 db  53h ; S
.eh_frame:0000000000008A71                 db  0Eh
.eh_frame:0000000000008A72                 db  60h ; `
.eh_frame:0000000000008A73                 db  44h ; D
.eh_frame:0000000000008A74                 db  0Ah
.eh_frame:0000000000008A75                 db  0Eh
.eh_frame:0000000000008A76                 db  38h ; 8
.eh_frame:0000000000008A77                 db  41h ; A
.eh_frame:0000000000008A78                 db  0Eh
.eh_frame:0000000000008A79                 db  30h ; 0
.eh_frame:0000000000008A7A                 db  41h ; A
.eh_frame:0000000000008A7B                 db  0Eh
.eh_frame:0000000000008A7C                 db  28h ; (
.eh_frame:0000000000008A7D                 db  42h ; B
.eh_frame:0000000000008A7E                 db  0Eh
.eh_frame:0000000000008A7F                 db  20h
.eh_frame:0000000000008A80                 db  42h ; B
.eh_frame:0000000000008A81                 db  0Eh
.eh_frame:0000000000008A82                 db  18h
.eh_frame:0000000000008A83                 db  42h ; B
.eh_frame:0000000000008A84                 db  0Eh
.eh_frame:0000000000008A85                 db  10h
.eh_frame:0000000000008A86                 db  42h ; B
.eh_frame:0000000000008A87                 db  0Eh
.eh_frame:0000000000008A88                 db    8
.eh_frame:0000000000008A89                 db  44h ; D
.eh_frame:0000000000008A8A                 db  0Bh
.eh_frame:0000000000008A8B                 db    2
.eh_frame:0000000000008A8C                 db  78h ; x
.eh_frame:0000000000008A8D                 db  0Ah
.eh_frame:0000000000008A8E                 db  0Eh
.eh_frame:0000000000008A8F                 db  68h ; h
.eh_frame:0000000000008A90                 db  48h ; H
.eh_frame:0000000000008A91                 db  0Bh
.eh_frame:0000000000008A92                 db  5Ah ; Z
.eh_frame:0000000000008A93                 db  0Ah
.eh_frame:0000000000008A94                 db  0Eh
.eh_frame:0000000000008A95                 db  38h ; 8
.eh_frame:0000000000008A96                 db  47h ; G
.eh_frame:0000000000008A97                 db  0Eh
.eh_frame:0000000000008A98                 db  30h ; 0
.eh_frame:0000000000008A99                 db  41h ; A
.eh_frame:0000000000008A9A                 db  0Eh
.eh_frame:0000000000008A9B                 db  28h ; (
.eh_frame:0000000000008A9C                 db  42h ; B
.eh_frame:0000000000008A9D                 db  0Eh
.eh_frame:0000000000008A9E                 db  20h
.eh_frame:0000000000008A9F                 db  42h ; B
.eh_frame:0000000000008AA0                 db  0Eh
.eh_frame:0000000000008AA1                 db  18h
.eh_frame:0000000000008AA2                 db  42h ; B
.eh_frame:0000000000008AA3                 db  0Eh
.eh_frame:0000000000008AA4                 db  10h
.eh_frame:0000000000008AA5                 db  42h ; B
.eh_frame:0000000000008AA6                 db  0Eh
.eh_frame:0000000000008AA7                 db    8
.eh_frame:0000000000008AA8                 db  56h ; V
.eh_frame:0000000000008AA9                 db  0Bh
.eh_frame:0000000000008AAA                 db  5Eh ; ^
.eh_frame:0000000000008AAB                 db  0Ah
.eh_frame:0000000000008AAC                 db  0Eh
.eh_frame:0000000000008AAD                 db  38h ; 8
.eh_frame:0000000000008AAE                 db  52h ; R
.eh_frame:0000000000008AAF                 db  0Eh
.eh_frame:0000000000008AB0                 db  30h ; 0
.eh_frame:0000000000008AB1                 db  41h ; A
.eh_frame:0000000000008AB2                 db  0Eh
.eh_frame:0000000000008AB3                 db  28h ; (
.eh_frame:0000000000008AB4                 db  42h ; B
.eh_frame:0000000000008AB5                 db  0Eh
.eh_frame:0000000000008AB6                 db  20h
.eh_frame:0000000000008AB7                 db  42h ; B
.eh_frame:0000000000008AB8                 db  0Eh
.eh_frame:0000000000008AB9                 db  18h
.eh_frame:0000000000008ABA                 db  42h ; B
.eh_frame:0000000000008ABB                 db  0Eh
.eh_frame:0000000000008ABC                 db  10h
.eh_frame:0000000000008ABD                 db  42h ; B
.eh_frame:0000000000008ABE                 db  0Eh
.eh_frame:0000000000008ABF                 db    8
.eh_frame:0000000000008AC0                 db  4Fh ; O
.eh_frame:0000000000008AC1                 db  0Bh
.eh_frame:0000000000008AC2                 db  62h ; b
.eh_frame:0000000000008AC3                 db  0Ah
.eh_frame:0000000000008AC4                 db  0Eh
.eh_frame:0000000000008AC5                 db  38h ; 8
.eh_frame:0000000000008AC6                 db  50h ; P
.eh_frame:0000000000008AC7                 db  0Eh
.eh_frame:0000000000008AC8                 db  30h ; 0
.eh_frame:0000000000008AC9                 db  41h ; A
.eh_frame:0000000000008ACA                 db  0Eh
.eh_frame:0000000000008ACB                 db  28h ; (
.eh_frame:0000000000008ACC                 db  42h ; B
.eh_frame:0000000000008ACD                 db  0Eh
.eh_frame:0000000000008ACE                 db  20h
.eh_frame:0000000000008ACF                 db  42h ; B
.eh_frame:0000000000008AD0                 db  0Eh
.eh_frame:0000000000008AD1                 db  18h
.eh_frame:0000000000008AD2                 db  42h ; B
.eh_frame:0000000000008AD3                 db  0Eh
.eh_frame:0000000000008AD4                 db  10h
.eh_frame:0000000000008AD5                 db  42h ; B
.eh_frame:0000000000008AD6                 db  0Eh
.eh_frame:0000000000008AD7                 db    8
.eh_frame:0000000000008AD8                 db  55h ; U
.eh_frame:0000000000008AD9                 db  0Bh
.eh_frame:0000000000008ADA                 db  66h ; f
.eh_frame:0000000000008ADB                 db  0Eh
.eh_frame:0000000000008ADC                 db  68h ; h
.eh_frame:0000000000008ADD                 db  42h ; B
.eh_frame:0000000000008ADE                 db  0Eh
.eh_frame:0000000000008ADF                 db  70h ; p
.eh_frame:0000000000008AE0                 db  5Ch ; \
.eh_frame:0000000000008AE1                 db  0Eh
.eh_frame:0000000000008AE2                 db  68h ; h
.eh_frame:0000000000008AE3                 db  41h ; A
.eh_frame:0000000000008AE4                 db  0Eh
.eh_frame:0000000000008AE5                 db  60h ; `
.eh_frame:0000000000008AE6                 db  44h ; D
.eh_frame:0000000000008AE7                 db  0Ah
.eh_frame:0000000000008AE8                 db  0Eh
.eh_frame:0000000000008AE9                 db  38h ; 8
.eh_frame:0000000000008AEA                 db  41h ; A
.eh_frame:0000000000008AEB                 db  0Eh
.eh_frame:0000000000008AEC                 db  30h ; 0
.eh_frame:0000000000008AED                 db  41h ; A
.eh_frame:0000000000008AEE                 db  0Eh
.eh_frame:0000000000008AEF                 db  28h ; (
.eh_frame:0000000000008AF0                 db  42h ; B
.eh_frame:0000000000008AF1                 db  0Eh
.eh_frame:0000000000008AF2                 db  20h
.eh_frame:0000000000008AF3                 db  42h ; B
.eh_frame:0000000000008AF4                 db  0Eh
.eh_frame:0000000000008AF5                 db  18h
.eh_frame:0000000000008AF6                 db  42h ; B
.eh_frame:0000000000008AF7                 db  0Eh
.eh_frame:0000000000008AF8                 db  10h
.eh_frame:0000000000008AF9                 db  42h ; B
.eh_frame:0000000000008AFA                 db  0Eh
.eh_frame:0000000000008AFB                 db    8
.eh_frame:0000000000008AFC                 db  45h ; E
.eh_frame:0000000000008AFD                 db  0Bh
.eh_frame:0000000000008AFE                 db  68h ; h
.eh_frame:0000000000008AFF                 db  0Ah
.eh_frame:0000000000008B00                 db  0Eh
.eh_frame:0000000000008B01                 db  68h ; h
.eh_frame:0000000000008B02                 db  48h ; H
.eh_frame:0000000000008B03                 db  0Bh
.eh_frame:0000000000008B04                 db  72h ; r
.eh_frame:0000000000008B05                 db  0Eh
.eh_frame:0000000000008B06                 db  68h ; h
.eh_frame:0000000000008B07                 db  45h ; E
.eh_frame:0000000000008B08                 db  0Eh
.eh_frame:0000000000008B09                 db  70h ; p
.eh_frame:0000000000008B0A                 db  42h ; B
.eh_frame:0000000000008B0B                 db  0Eh
.eh_frame:0000000000008B0C                 db  78h ; x
.eh_frame:0000000000008B0D                 db  42h ; B
.eh_frame:0000000000008B0E                 db  0Eh
.eh_frame:0000000000008B0F                 db  80h
.eh_frame:0000000000008B10                 db    1
.eh_frame:0000000000008B11                 db  5Eh ; ^
.eh_frame:0000000000008B12                 db  0Eh
.eh_frame:0000000000008B13                 db  60h ; `
.eh_frame:0000000000008B14                 db  44h ; D
.eh_frame:0000000000008B15                 db  0Ah
.eh_frame:0000000000008B16                 db  0Eh
.eh_frame:0000000000008B17                 db  38h ; 8
.eh_frame:0000000000008B18                 db  41h ; A
.eh_frame:0000000000008B19                 db  0Eh
.eh_frame:0000000000008B1A                 db  30h ; 0
.eh_frame:0000000000008B1B                 db  41h ; A
.eh_frame:0000000000008B1C                 db  0Eh
.eh_frame:0000000000008B1D                 db  28h ; (
.eh_frame:0000000000008B1E                 db  42h ; B
.eh_frame:0000000000008B1F                 db  0Eh
.eh_frame:0000000000008B20                 db  20h
.eh_frame:0000000000008B21                 db  42h ; B
.eh_frame:0000000000008B22                 db  0Eh
.eh_frame:0000000000008B23                 db  18h
.eh_frame:0000000000008B24                 db  42h ; B
.eh_frame:0000000000008B25                 db  0Eh
.eh_frame:0000000000008B26                 db  10h
.eh_frame:0000000000008B27                 db  42h ; B
.eh_frame:0000000000008B28                 db  0Eh
.eh_frame:0000000000008B29                 db    8
.eh_frame:0000000000008B2A                 db  41h ; A
.eh_frame:0000000000008B2B                 db  0Bh
.eh_frame:0000000000008B2C                 db  79h ; y
.eh_frame:0000000000008B2D                 db  0Ah
.eh_frame:0000000000008B2E                 db  0Eh
.eh_frame:0000000000008B2F                 db  68h ; h
.eh_frame:0000000000008B30                 db  42h ; B
.eh_frame:0000000000008B31                 db  0Eh
.eh_frame:0000000000008B32                 db  70h ; p
.eh_frame:0000000000008B33                 db  42h ; B
.eh_frame:0000000000008B34                 db  0Eh
.eh_frame:0000000000008B35                 db  78h ; x
.eh_frame:0000000000008B36                 db  42h ; B
.eh_frame:0000000000008B37                 db  0Eh
.eh_frame:0000000000008B38                 db  80h
.eh_frame:0000000000008B39                 db    1
.eh_frame:0000000000008B3A                 db  51h ; Q
.eh_frame:0000000000008B3B                 db  0Bh
.eh_frame:0000000000008B3C                 db  10h
.eh_frame:0000000000008B3D                 db    0
.eh_frame:0000000000008B3E                 db    0
.eh_frame:0000000000008B3F                 db    0
.eh_frame:0000000000008B40                 db 0B8h
.eh_frame:0000000000008B41                 db    8
.eh_frame:0000000000008B42                 db    0
.eh_frame:0000000000008B43                 db    0
.eh_frame:0000000000008B44                 db  8Ch
.eh_frame:0000000000008B45                 db 0D5h
.eh_frame:0000000000008B46                 db 0FFh
.eh_frame:0000000000008B47                 db 0FFh
.eh_frame:0000000000008B48                 db  20h
.eh_frame:0000000000008B49                 db    0
.eh_frame:0000000000008B4A                 db    0
.eh_frame:0000000000008B4B                 db    0
.eh_frame:0000000000008B4C                 db    0
.eh_frame:0000000000008B4D                 db    0
.eh_frame:0000000000008B4E                 db    0
.eh_frame:0000000000008B4F                 db    0
.eh_frame:0000000000008B50                 db  18h
.eh_frame:0000000000008B51                 db    0
.eh_frame:0000000000008B52                 db    0
.eh_frame:0000000000008B53                 db    0
.eh_frame:0000000000008B54                 db 0CCh
.eh_frame:0000000000008B55                 db    8
.eh_frame:0000000000008B56                 db    0
.eh_frame:0000000000008B57                 db    0
.eh_frame:0000000000008B58                 db  98h
.eh_frame:0000000000008B59                 db 0D5h
.eh_frame:0000000000008B5A                 db 0FFh
.eh_frame:0000000000008B5B                 db 0FFh
.eh_frame:0000000000008B5C                 db  78h ; x
.eh_frame:0000000000008B5D                 db    0
.eh_frame:0000000000008B5E                 db    0
.eh_frame:0000000000008B5F                 db    0
.eh_frame:0000000000008B60                 db    0
.eh_frame:0000000000008B61                 db  44h ; D
.eh_frame:0000000000008B62                 db  0Eh
.eh_frame:0000000000008B63                 db  70h ; p
.eh_frame:0000000000008B64                 db    2
.eh_frame:0000000000008B65                 db  60h ; `
.eh_frame:0000000000008B66                 db  0Ah
.eh_frame:0000000000008B67                 db  0Eh
.eh_frame:0000000000008B68                 db    8
.eh_frame:0000000000008B69                 db  41h ; A
.eh_frame:0000000000008B6A                 db  0Bh
.eh_frame:0000000000008B6B                 db    0
.eh_frame:0000000000008B6C                 db  28h ; (
.eh_frame:0000000000008B6D                 db    0
.eh_frame:0000000000008B6E                 db    0
.eh_frame:0000000000008B6F                 db    0
.eh_frame:0000000000008B70                 db 0E8h
.eh_frame:0000000000008B71                 db    8
.eh_frame:0000000000008B72                 db    0
.eh_frame:0000000000008B73                 db    0
.eh_frame:0000000000008B74                 db 0FCh
.eh_frame:0000000000008B75                 db 0D5h
.eh_frame:0000000000008B76                 db 0FFh
.eh_frame:0000000000008B77                 db 0FFh
.eh_frame:0000000000008B78                 db 0D5h
.eh_frame:0000000000008B79                 db    0
.eh_frame:0000000000008B7A                 db    0
.eh_frame:0000000000008B7B                 db    0
.eh_frame:0000000000008B7C                 db    0
.eh_frame:0000000000008B7D                 db  41h ; A
.eh_frame:0000000000008B7E                 db  0Eh
.eh_frame:0000000000008B7F                 db  10h
.eh_frame:0000000000008B80                 db  86h
.eh_frame:0000000000008B81                 db    2
.eh_frame:0000000000008B82                 db  41h ; A
.eh_frame:0000000000008B83                 db  0Eh
.eh_frame:0000000000008B84                 db  18h
.eh_frame:0000000000008B85                 db  83h
.eh_frame:0000000000008B86                 db    3
.eh_frame:0000000000008B87                 db  50h ; P
.eh_frame:0000000000008B88                 db  0Eh
.eh_frame:0000000000008B89                 db 0D0h
.eh_frame:0000000000008B8A                 db    1
.eh_frame:0000000000008B8B                 db    2
.eh_frame:0000000000008B8C                 db 0ABh
.eh_frame:0000000000008B8D                 db  0Ah
.eh_frame:0000000000008B8E                 db  0Eh
.eh_frame:0000000000008B8F                 db  18h
.eh_frame:0000000000008B90                 db  41h ; A
.eh_frame:0000000000008B91                 db  0Eh
.eh_frame:0000000000008B92                 db  10h
.eh_frame:0000000000008B93                 db  41h ; A
.eh_frame:0000000000008B94                 db  0Eh
.eh_frame:0000000000008B95                 db    8
.eh_frame:0000000000008B96                 db  41h ; A
.eh_frame:0000000000008B97                 db  0Bh
.eh_frame:0000000000008B98                 db  1Ch
.eh_frame:0000000000008B99                 db    0
.eh_frame:0000000000008B9A                 db    0
.eh_frame:0000000000008B9B                 db    0
.eh_frame:0000000000008B9C                 db  14h
.eh_frame:0000000000008B9D                 db    9
.eh_frame:0000000000008B9E                 db    0
.eh_frame:0000000000008B9F                 db    0
.eh_frame:0000000000008BA0                 db 0B0h
.eh_frame:0000000000008BA1                 db 0D6h
.eh_frame:0000000000008BA2                 db 0FFh
.eh_frame:0000000000008BA3                 db 0FFh
.eh_frame:0000000000008BA4                 db  80h
.eh_frame:0000000000008BA5                 db    0
.eh_frame:0000000000008BA6                 db    0
.eh_frame:0000000000008BA7                 db    0
.eh_frame:0000000000008BA8                 db    0
.eh_frame:0000000000008BA9                 db  41h ; A
.eh_frame:0000000000008BAA                 db  0Eh
.eh_frame:0000000000008BAB                 db  10h
.eh_frame:0000000000008BAC                 db  83h
.eh_frame:0000000000008BAD                 db    2
.eh_frame:0000000000008BAE                 db    2
.eh_frame:0000000000008BAF                 db  7Ah ; z
.eh_frame:0000000000008BB0                 db  0Eh
.eh_frame:0000000000008BB1                 db    8
.eh_frame:0000000000008BB2                 db    0
.eh_frame:0000000000008BB3                 db    0
.eh_frame:0000000000008BB4                 db    0
.eh_frame:0000000000008BB5                 db    0
.eh_frame:0000000000008BB6                 db    0
.eh_frame:0000000000008BB7                 db    0
.eh_frame:0000000000008BB8                 db  18h
.eh_frame:0000000000008BB9                 db    0
.eh_frame:0000000000008BBA                 db    0
.eh_frame:0000000000008BBB                 db    0
.eh_frame:0000000000008BBC                 db  34h ; 4
.eh_frame:0000000000008BBD                 db    9
.eh_frame:0000000000008BBE                 db    0
.eh_frame:0000000000008BBF                 db    0
.eh_frame:0000000000008BC0                 db  10h
.eh_frame:0000000000008BC1                 db 0D7h
.eh_frame:0000000000008BC2                 db 0FFh
.eh_frame:0000000000008BC3                 db 0FFh
.eh_frame:0000000000008BC4                 db  1Ah
.eh_frame:0000000000008BC5                 db    0
.eh_frame:0000000000008BC6                 db    0
.eh_frame:0000000000008BC7                 db    0
.eh_frame:0000000000008BC8                 db    0
.eh_frame:0000000000008BC9                 db  41h ; A
.eh_frame:0000000000008BCA                 db  0Eh
.eh_frame:0000000000008BCB                 db  10h
.eh_frame:0000000000008BCC                 db  83h
.eh_frame:0000000000008BCD                 db    2
.eh_frame:0000000000008BCE                 db  53h ; S
.eh_frame:0000000000008BCF                 db  0Ah
.eh_frame:0000000000008BD0                 db  0Eh
.eh_frame:0000000000008BD1                 db    8
.eh_frame:0000000000008BD2                 db  41h ; A
.eh_frame:0000000000008BD3                 db  0Bh
.eh_frame:0000000000008BD4                 db  10h
.eh_frame:0000000000008BD5                 db    0
.eh_frame:0000000000008BD6                 db    0
.eh_frame:0000000000008BD7                 db    0
.eh_frame:0000000000008BD8                 db  50h ; P
.eh_frame:0000000000008BD9                 db    9
.eh_frame:0000000000008BDA                 db    0
.eh_frame:0000000000008BDB                 db    0
.eh_frame:0000000000008BDC                 db  14h
.eh_frame:0000000000008BDD                 db 0D7h
.eh_frame:0000000000008BDE                 db 0FFh
.eh_frame:0000000000008BDF                 db 0FFh
.eh_frame:0000000000008BE0                 db  24h ; $
.eh_frame:0000000000008BE1                 db    0
.eh_frame:0000000000008BE2                 db    0
.eh_frame:0000000000008BE3                 db    0
.eh_frame:0000000000008BE4                 db    0
.eh_frame:0000000000008BE5                 db  5Fh ; _
.eh_frame:0000000000008BE6                 db  0Eh
.eh_frame:0000000000008BE7                 db  10h
.eh_frame:0000000000008BE8                 db  10h
.eh_frame:0000000000008BE9                 db    0
.eh_frame:0000000000008BEA                 db    0
.eh_frame:0000000000008BEB                 db    0
.eh_frame:0000000000008BEC                 db  64h ; d
.eh_frame:0000000000008BED                 db    9
.eh_frame:0000000000008BEE                 db    0
.eh_frame:0000000000008BEF                 db    0
.eh_frame:0000000000008BF0                 db  30h ; 0
.eh_frame:0000000000008BF1                 db 0D7h
.eh_frame:0000000000008BF2                 db 0FFh
.eh_frame:0000000000008BF3                 db 0FFh
.eh_frame:0000000000008BF4                 db    2
.eh_frame:0000000000008BF5                 db    0
.eh_frame:0000000000008BF6                 db    0
.eh_frame:0000000000008BF7                 db    0
.eh_frame:0000000000008BF8                 db    0
.eh_frame:0000000000008BF9                 db    0
.eh_frame:0000000000008BFA                 db    0
.eh_frame:0000000000008BFB                 db    0
.eh_frame:0000000000008BFC                 db  20h
.eh_frame:0000000000008BFD                 db    0
.eh_frame:0000000000008BFE                 db    0
.eh_frame:0000000000008BFF                 db    0
.eh_frame:0000000000008C00                 db  78h ; x
.eh_frame:0000000000008C01                 db    9
.eh_frame:0000000000008C02                 db    0
.eh_frame:0000000000008C03                 db    0
.eh_frame:0000000000008C04                 db  2Ch ; ,
.eh_frame:0000000000008C05                 db 0D7h
.eh_frame:0000000000008C06                 db 0FFh
.eh_frame:0000000000008C07                 db 0FFh
.eh_frame:0000000000008C08                 db  36h ; 6
.eh_frame:0000000000008C09                 db    0
.eh_frame:0000000000008C0A                 db    0
.eh_frame:0000000000008C0B                 db    0
.eh_frame:0000000000008C0C                 db    0
.eh_frame:0000000000008C0D                 db  44h ; D
.eh_frame:0000000000008C0E                 db  0Eh
.eh_frame:0000000000008C0F                 db  10h
.eh_frame:0000000000008C10                 db  83h
.eh_frame:0000000000008C11                 db    2
.eh_frame:0000000000008C12                 db  5Dh ; ]
.eh_frame:0000000000008C13                 db  0Ah
.eh_frame:0000000000008C14                 db  0Eh
.eh_frame:0000000000008C15                 db    8
.eh_frame:0000000000008C16                 db  47h ; G
.eh_frame:0000000000008C17                 db  0Bh
.eh_frame:0000000000008C18                 db  48h ; H
.eh_frame:0000000000008C19                 db  0Ah
.eh_frame:0000000000008C1A                 db  0Eh
.eh_frame:0000000000008C1B                 db    8
.eh_frame:0000000000008C1C                 db  41h ; A
.eh_frame:0000000000008C1D                 db  0Bh
.eh_frame:0000000000008C1E                 db    0
.eh_frame:0000000000008C1F                 db    0
.eh_frame:0000000000008C20                 db  10h
.eh_frame:0000000000008C21                 db    0
.eh_frame:0000000000008C22                 db    0
.eh_frame:0000000000008C23                 db    0
.eh_frame:0000000000008C24                 db  9Ch
.eh_frame:0000000000008C25                 db    9
.eh_frame:0000000000008C26                 db    0
.eh_frame:0000000000008C27                 db    0
.eh_frame:0000000000008C28                 db  48h ; H
.eh_frame:0000000000008C29                 db 0D7h
.eh_frame:0000000000008C2A                 db 0FFh
.eh_frame:0000000000008C2B                 db 0FFh
.eh_frame:0000000000008C2C                 db  24h ; $
.eh_frame:0000000000008C2D                 db    0
.eh_frame:0000000000008C2E                 db    0
.eh_frame:0000000000008C2F                 db    0
.eh_frame:0000000000008C30                 db    0
.eh_frame:0000000000008C31                 db  5Fh ; _
.eh_frame:0000000000008C32                 db  0Eh
.eh_frame:0000000000008C33                 db  10h
.eh_frame:0000000000008C34                 db  14h
.eh_frame:0000000000008C35                 db    0
.eh_frame:0000000000008C36                 db    0
.eh_frame:0000000000008C37                 db    0
.eh_frame:0000000000008C38                 db 0B0h
.eh_frame:0000000000008C39                 db    9
.eh_frame:0000000000008C3A                 db    0
.eh_frame:0000000000008C3B                 db    0
.eh_frame:0000000000008C3C                 db  64h ; d
.eh_frame:0000000000008C3D                 db 0D7h
.eh_frame:0000000000008C3E                 db 0FFh
.eh_frame:0000000000008C3F                 db 0FFh
.eh_frame:0000000000008C40                 db  82h
.eh_frame:0000000000008C41                 db    0
.eh_frame:0000000000008C42                 db    0
.eh_frame:0000000000008C43                 db    0
.eh_frame:0000000000008C44                 db    0
.eh_frame:0000000000008C45                 db    2
.eh_frame:0000000000008C46                 db  5Fh ; _
.eh_frame:0000000000008C47                 db  0Eh
.eh_frame:0000000000008C48                 db  10h
.eh_frame:0000000000008C49                 db  49h ; I
.eh_frame:0000000000008C4A                 db  0Eh
.eh_frame:0000000000008C4B                 db    8
.eh_frame:0000000000008C4C                 db  14h
.eh_frame:0000000000008C4D                 db    0
.eh_frame:0000000000008C4E                 db    0
.eh_frame:0000000000008C4F                 db    0
.eh_frame:0000000000008C50                 db 0C8h
.eh_frame:0000000000008C51                 db    9
.eh_frame:0000000000008C52                 db    0
.eh_frame:0000000000008C53                 db    0
.eh_frame:0000000000008C54                 db 0DCh
.eh_frame:0000000000008C55                 db 0D7h
.eh_frame:0000000000008C56                 db 0FFh
.eh_frame:0000000000008C57                 db 0FFh
.eh_frame:0000000000008C58                 db  4Ah ; J
.eh_frame:0000000000008C59                 db    0
.eh_frame:0000000000008C5A                 db    0
.eh_frame:0000000000008C5B                 db    0
.eh_frame:0000000000008C5C                 db    0
.eh_frame:0000000000008C5D                 db    2
.eh_frame:0000000000008C5E                 db  45h ; E
.eh_frame:0000000000008C5F                 db  0Eh
.eh_frame:0000000000008C60                 db  10h
.eh_frame:0000000000008C61                 db    0
.eh_frame:0000000000008C62                 db    0
.eh_frame:0000000000008C63                 db    0
.eh_frame:0000000000008C64                 db  18h
.eh_frame:0000000000008C65                 db    0
.eh_frame:0000000000008C66                 db    0
.eh_frame:0000000000008C67                 db    0
.eh_frame:0000000000008C68                 db 0E0h
.eh_frame:0000000000008C69                 db    9
.eh_frame:0000000000008C6A                 db    0
.eh_frame:0000000000008C6B                 db    0
.eh_frame:0000000000008C6C                 db  14h
.eh_frame:0000000000008C6D                 db 0D8h
.eh_frame:0000000000008C6E                 db 0FFh
.eh_frame:0000000000008C6F                 db 0FFh
.eh_frame:0000000000008C70                 db  17h
.eh_frame:0000000000008C71                 db    0
.eh_frame:0000000000008C72                 db    0
.eh_frame:0000000000008C73                 db    0
.eh_frame:0000000000008C74                 db    0
.eh_frame:0000000000008C75                 db  41h ; A
.eh_frame:0000000000008C76                 db  0Eh
.eh_frame:0000000000008C77                 db  10h
.eh_frame:0000000000008C78                 db  83h
.eh_frame:0000000000008C79                 db    2
.eh_frame:0000000000008C7A                 db  51h ; Q
.eh_frame:0000000000008C7B                 db  0Eh
.eh_frame:0000000000008C7C                 db    8
.eh_frame:0000000000008C7D                 db    0
.eh_frame:0000000000008C7E                 db    0
.eh_frame:0000000000008C7F                 db    0
.eh_frame:0000000000008C80                 db  18h
.eh_frame:0000000000008C81                 db    0
.eh_frame:0000000000008C82                 db    0
.eh_frame:0000000000008C83                 db    0
.eh_frame:0000000000008C84                 db 0FCh
.eh_frame:0000000000008C85                 db    9
.eh_frame:0000000000008C86                 db    0
.eh_frame:0000000000008C87                 db    0
.eh_frame:0000000000008C88                 db  18h
.eh_frame:0000000000008C89                 db 0D8h
.eh_frame:0000000000008C8A                 db 0FFh
.eh_frame:0000000000008C8B                 db 0FFh
.eh_frame:0000000000008C8C                 db  2Eh ; .
.eh_frame:0000000000008C8D                 db    0
.eh_frame:0000000000008C8E                 db    0
.eh_frame:0000000000008C8F                 db    0
.eh_frame:0000000000008C90                 db    0
.eh_frame:0000000000008C91                 db  47h ; G
.eh_frame:0000000000008C92                 db  0Eh
.eh_frame:0000000000008C93                 db  10h
.eh_frame:0000000000008C94                 db  61h ; a
.eh_frame:0000000000008C95                 db  0Ah
.eh_frame:0000000000008C96                 db  0Eh
.eh_frame:0000000000008C97                 db    8
.eh_frame:0000000000008C98                 db  41h ; A
.eh_frame:0000000000008C99                 db  0Bh
.eh_frame:0000000000008C9A                 db    0
.eh_frame:0000000000008C9B                 db    0
.eh_frame:0000000000008C9C                 db  24h ; $
.eh_frame:0000000000008C9D                 db    0
.eh_frame:0000000000008C9E                 db    0
.eh_frame:0000000000008C9F                 db    0
.eh_frame:0000000000008CA0                 db  18h
.eh_frame:0000000000008CA1                 db  0Ah
.eh_frame:0000000000008CA2                 db    0
.eh_frame:0000000000008CA3                 db    0
.eh_frame:0000000000008CA4                 db  2Ch ; ,
.eh_frame:0000000000008CA5                 db 0D8h
.eh_frame:0000000000008CA6                 db 0FFh
.eh_frame:0000000000008CA7                 db 0FFh
.eh_frame:0000000000008CA8                 db  28h ; (
.eh_frame:0000000000008CA9                 db    0
.eh_frame:0000000000008CAA                 db    0
.eh_frame:0000000000008CAB                 db    0
.eh_frame:0000000000008CAC                 db    0
.eh_frame:0000000000008CAD                 db  41h ; A
.eh_frame:0000000000008CAE                 db  0Eh
.eh_frame:0000000000008CAF                 db  10h
.eh_frame:0000000000008CB0                 db  86h
.eh_frame:0000000000008CB1                 db    2
.eh_frame:0000000000008CB2                 db  41h ; A
.eh_frame:0000000000008CB3                 db  0Eh
.eh_frame:0000000000008CB4                 db  18h
.eh_frame:0000000000008CB5                 db  83h
.eh_frame:0000000000008CB6                 db    3
.eh_frame:0000000000008CB7                 db  4Dh ; M
.eh_frame:0000000000008CB8                 db  0Eh
.eh_frame:0000000000008CB9                 db  20h
.eh_frame:0000000000008CBA                 db  49h ; I
.eh_frame:0000000000008CBB                 db  0Eh
.eh_frame:0000000000008CBC                 db  18h
.eh_frame:0000000000008CBD                 db  47h ; G
.eh_frame:0000000000008CBE                 db  0Eh
.eh_frame:0000000000008CBF                 db  10h
.eh_frame:0000000000008CC0                 db  41h ; A
.eh_frame:0000000000008CC1                 db  0Eh
.eh_frame:0000000000008CC2                 db    8
.eh_frame:0000000000008CC3                 db    0
.eh_frame:0000000000008CC4                 db  18h
.eh_frame:0000000000008CC5                 db    0
.eh_frame:0000000000008CC6                 db    0
.eh_frame:0000000000008CC7                 db    0
.eh_frame:0000000000008CC8                 db  40h ; @
.eh_frame:0000000000008CC9                 db  0Ah
.eh_frame:0000000000008CCA                 db    0
.eh_frame:0000000000008CCB                 db    0
.eh_frame:0000000000008CCC                 db  34h ; 4
.eh_frame:0000000000008CCD                 db 0D8h
.eh_frame:0000000000008CCE                 db 0FFh
.eh_frame:0000000000008CCF                 db 0FFh
.eh_frame:0000000000008CD0                 db  13h
.eh_frame:0000000000008CD1                 db    0
.eh_frame:0000000000008CD2                 db    0
.eh_frame:0000000000008CD3                 db    0
.eh_frame:0000000000008CD4                 db    0
.eh_frame:0000000000008CD5                 db  41h ; A
.eh_frame:0000000000008CD6                 db  0Eh
.eh_frame:0000000000008CD7                 db  10h
.eh_frame:0000000000008CD8                 db  83h
.eh_frame:0000000000008CD9                 db    2
.eh_frame:0000000000008CDA                 db  50h ; P
.eh_frame:0000000000008CDB                 db  0Eh
.eh_frame:0000000000008CDC                 db    8
.eh_frame:0000000000008CDD                 db    0
.eh_frame:0000000000008CDE                 db    0
.eh_frame:0000000000008CDF                 db    0
.eh_frame:0000000000008CE0                 db  14h
.eh_frame:0000000000008CE1                 db    0
.eh_frame:0000000000008CE2                 db    0
.eh_frame:0000000000008CE3                 db    0
.eh_frame:0000000000008CE4                 db  5Ch ; \
.eh_frame:0000000000008CE5                 db  0Ah
.eh_frame:0000000000008CE6                 db    0
.eh_frame:0000000000008CE7                 db    0
.eh_frame:0000000000008CE8                 db  38h ; 8
.eh_frame:0000000000008CE9                 db 0D8h
.eh_frame:0000000000008CEA                 db 0FFh
.eh_frame:0000000000008CEB                 db 0FFh
.eh_frame:0000000000008CEC                 db  35h ; 5
.eh_frame:0000000000008CED                 db    0
.eh_frame:0000000000008CEE                 db    0
.eh_frame:0000000000008CEF                 db    0
.eh_frame:0000000000008CF0                 db    0
.eh_frame:0000000000008CF1                 db  4Bh ; K
.eh_frame:0000000000008CF2                 db  0Eh
.eh_frame:0000000000008CF3                 db  10h
.eh_frame:0000000000008CF4                 db    0
.eh_frame:0000000000008CF5                 db    0
.eh_frame:0000000000008CF6                 db    0
.eh_frame:0000000000008CF7                 db    0
.eh_frame:0000000000008CF8                 db  3Ch ; <
.eh_frame:0000000000008CF9                 db    0
.eh_frame:0000000000008CFA                 db    0
.eh_frame:0000000000008CFB                 db    0
.eh_frame:0000000000008CFC                 db  74h ; t
.eh_frame:0000000000008CFD                 db  0Ah
.eh_frame:0000000000008CFE                 db    0
.eh_frame:0000000000008CFF                 db    0
.eh_frame:0000000000008D00                 db  60h ; `
.eh_frame:0000000000008D01                 db 0D8h
.eh_frame:0000000000008D02                 db 0FFh
.eh_frame:0000000000008D03                 db 0FFh
.eh_frame:0000000000008D04                 db  83h
.eh_frame:0000000000008D05                 db    0
.eh_frame:0000000000008D06                 db    0
.eh_frame:0000000000008D07                 db    0
.eh_frame:0000000000008D08                 db    0
.eh_frame:0000000000008D09                 db  42h ; B
.eh_frame:0000000000008D0A                 db  0Eh
.eh_frame:0000000000008D0B                 db  10h
.eh_frame:0000000000008D0C                 db  8Dh
.eh_frame:0000000000008D0D                 db    2
.eh_frame:0000000000008D0E                 db  42h ; B
.eh_frame:0000000000008D0F                 db  0Eh
.eh_frame:0000000000008D10                 db  18h
.eh_frame:0000000000008D11                 db  8Ch
.eh_frame:0000000000008D12                 db    3
.eh_frame:0000000000008D13                 db  44h ; D
.eh_frame:0000000000008D14                 db  0Eh
.eh_frame:0000000000008D15                 db  20h
.eh_frame:0000000000008D16                 db  86h
.eh_frame:0000000000008D17                 db    4
.eh_frame:0000000000008D18                 db  41h ; A
.eh_frame:0000000000008D19                 db  0Eh
.eh_frame:0000000000008D1A                 db  28h ; (
.eh_frame:0000000000008D1B                 db  83h
.eh_frame:0000000000008D1C                 db    5
.eh_frame:0000000000008D1D                 db  4Ah ; J
.eh_frame:0000000000008D1E                 db  0Eh
.eh_frame:0000000000008D1F                 db  40h ; @
.eh_frame:0000000000008D20                 db    2
.eh_frame:0000000000008D21                 db  64h ; d
.eh_frame:0000000000008D22                 db  0Ah
.eh_frame:0000000000008D23                 db  0Eh
.eh_frame:0000000000008D24                 db  28h ; (
.eh_frame:0000000000008D25                 db  41h ; A
.eh_frame:0000000000008D26                 db  0Eh
.eh_frame:0000000000008D27                 db  20h
.eh_frame:0000000000008D28                 db  41h ; A
.eh_frame:0000000000008D29                 db  0Eh
.eh_frame:0000000000008D2A                 db  18h
.eh_frame:0000000000008D2B                 db  42h ; B
.eh_frame:0000000000008D2C                 db  0Eh
.eh_frame:0000000000008D2D                 db  10h
.eh_frame:0000000000008D2E                 db  42h ; B
.eh_frame:0000000000008D2F                 db  0Eh
.eh_frame:0000000000008D30                 db    8
.eh_frame:0000000000008D31                 db  41h ; A
.eh_frame:0000000000008D32                 db  0Bh
.eh_frame:0000000000008D33                 db    0
.eh_frame:0000000000008D34                 db    0
.eh_frame:0000000000008D35                 db    0
.eh_frame:0000000000008D36                 db    0
.eh_frame:0000000000008D37                 db    0
.eh_frame:0000000000008D38                 db  38h ; 8
.eh_frame:0000000000008D39                 db    0
.eh_frame:0000000000008D3A                 db    0
.eh_frame:0000000000008D3B                 db    0
.eh_frame:0000000000008D3C                 db 0B4h
.eh_frame:0000000000008D3D                 db  0Ah
.eh_frame:0000000000008D3E                 db    0
.eh_frame:0000000000008D3F                 db    0
.eh_frame:0000000000008D40                 db 0B0h
.eh_frame:0000000000008D41                 db 0D8h
.eh_frame:0000000000008D42                 db 0FFh
.eh_frame:0000000000008D43                 db 0FFh
.eh_frame:0000000000008D44                 db  85h
.eh_frame:0000000000008D45                 db    1
.eh_frame:0000000000008D46                 db    0
.eh_frame:0000000000008D47                 db    0
.eh_frame:0000000000008D48                 db    0
.eh_frame:0000000000008D49                 db  42h ; B
.eh_frame:0000000000008D4A                 db  0Eh
.eh_frame:0000000000008D4B                 db  10h
.eh_frame:0000000000008D4C                 db  8Dh
.eh_frame:0000000000008D4D                 db    2
.eh_frame:0000000000008D4E                 db  42h ; B
.eh_frame:0000000000008D4F                 db  0Eh
.eh_frame:0000000000008D50                 db  18h
.eh_frame:0000000000008D51                 db  8Ch
.eh_frame:0000000000008D52                 db    3
.eh_frame:0000000000008D53                 db  44h ; D
.eh_frame:0000000000008D54                 db  0Eh
.eh_frame:0000000000008D55                 db  20h
.eh_frame:0000000000008D56                 db  86h
.eh_frame:0000000000008D57                 db    4
.eh_frame:0000000000008D58                 db  41h ; A
.eh_frame:0000000000008D59                 db  0Eh
.eh_frame:0000000000008D5A                 db  28h ; (
.eh_frame:0000000000008D5B                 db  83h
.eh_frame:0000000000008D5C                 db    5
.eh_frame:0000000000008D5D                 db  50h ; P
.eh_frame:0000000000008D5E                 db  0Eh
.eh_frame:0000000000008D5F                 db  40h ; @
.eh_frame:0000000000008D60                 db    2
.eh_frame:0000000000008D61                 db  6Fh ; o
.eh_frame:0000000000008D62                 db  0Ah
.eh_frame:0000000000008D63                 db  0Eh
.eh_frame:0000000000008D64                 db  28h ; (
.eh_frame:0000000000008D65                 db  41h ; A
.eh_frame:0000000000008D66                 db  0Eh
.eh_frame:0000000000008D67                 db  20h
.eh_frame:0000000000008D68                 db  41h ; A
.eh_frame:0000000000008D69                 db  0Eh
.eh_frame:0000000000008D6A                 db  18h
.eh_frame:0000000000008D6B                 db  42h ; B
.eh_frame:0000000000008D6C                 db  0Eh
.eh_frame:0000000000008D6D                 db  10h
.eh_frame:0000000000008D6E                 db  42h ; B
.eh_frame:0000000000008D6F                 db  0Eh
.eh_frame:0000000000008D70                 db    8
.eh_frame:0000000000008D71                 db  42h ; B
.eh_frame:0000000000008D72                 db  0Bh
.eh_frame:0000000000008D73                 db    0
.eh_frame:0000000000008D74                 db  38h ; 8
.eh_frame:0000000000008D75                 db    0
.eh_frame:0000000000008D76                 db    0
.eh_frame:0000000000008D77                 db    0
.eh_frame:0000000000008D78                 db 0F0h
.eh_frame:0000000000008D79                 db  0Ah
.eh_frame:0000000000008D7A                 db    0
.eh_frame:0000000000008D7B                 db    0
.eh_frame:0000000000008D7C                 db    4
.eh_frame:0000000000008D7D                 db 0DAh
.eh_frame:0000000000008D7E                 db 0FFh
.eh_frame:0000000000008D7F                 db 0FFh
.eh_frame:0000000000008D80                 db 0DBh
.eh_frame:0000000000008D81                 db    0
.eh_frame:0000000000008D82                 db    0
.eh_frame:0000000000008D83                 db    0
.eh_frame:0000000000008D84                 db    0
.eh_frame:0000000000008D85                 db  41h ; A
.eh_frame:0000000000008D86                 db  0Eh
.eh_frame:0000000000008D87                 db  10h
.eh_frame:0000000000008D88                 db  86h
.eh_frame:0000000000008D89                 db    2
.eh_frame:0000000000008D8A                 db  48h ; H
.eh_frame:0000000000008D8B                 db  0Eh
.eh_frame:0000000000008D8C                 db  18h
.eh_frame:0000000000008D8D                 db  83h
.eh_frame:0000000000008D8E                 db    3
.eh_frame:0000000000008D8F                 db  4Bh ; K
.eh_frame:0000000000008D90                 db  0Eh
.eh_frame:0000000000008D91                 db  30h ; 0
.eh_frame:0000000000008D92                 db  70h ; p
.eh_frame:0000000000008D93                 db  0Ah
.eh_frame:0000000000008D94                 db  0Eh
.eh_frame:0000000000008D95                 db  18h
.eh_frame:0000000000008D96                 db  41h ; A
.eh_frame:0000000000008D97                 db  0Eh
.eh_frame:0000000000008D98                 db  10h
.eh_frame:0000000000008D99                 db  41h ; A
.eh_frame:0000000000008D9A                 db  0Eh
.eh_frame:0000000000008D9B                 db    8
.eh_frame:0000000000008D9C                 db  4Ah ; J
.eh_frame:0000000000008D9D                 db  0Bh
.eh_frame:0000000000008D9E                 db    2
.eh_frame:0000000000008D9F                 db  66h ; f
.eh_frame:0000000000008DA0                 db  0Ah
.eh_frame:0000000000008DA1                 db  0Eh
.eh_frame:0000000000008DA2                 db  18h
.eh_frame:0000000000008DA3                 db  43h ; C
.eh_frame:0000000000008DA4                 db  0Eh
.eh_frame:0000000000008DA5                 db  10h
.eh_frame:0000000000008DA6                 db  41h ; A
.eh_frame:0000000000008DA7                 db  0Eh
.eh_frame:0000000000008DA8                 db    8
.eh_frame:0000000000008DA9                 db  46h ; F
.eh_frame:0000000000008DAA                 db  0Bh
.eh_frame:0000000000008DAB                 db    0
.eh_frame:0000000000008DAC                 db    0
.eh_frame:0000000000008DAD                 db    0
.eh_frame:0000000000008DAE                 db    0
.eh_frame:0000000000008DAF                 db    0
.eh_frame:0000000000008DB0                 db  4Ch ; L
.eh_frame:0000000000008DB1                 db    0
.eh_frame:0000000000008DB2                 db    0
.eh_frame:0000000000008DB3                 db    0
.eh_frame:0000000000008DB4                 db  2Ch ; ,
.eh_frame:0000000000008DB5                 db  0Bh
.eh_frame:0000000000008DB6                 db    0
.eh_frame:0000000000008DB7                 db    0
.eh_frame:0000000000008DB8                 db 0A8h
.eh_frame:0000000000008DB9                 db 0DAh
.eh_frame:0000000000008DBA                 db 0FFh
.eh_frame:0000000000008DBB                 db 0FFh
.eh_frame:0000000000008DBC                 db  7Dh ; }
.eh_frame:0000000000008DBD                 db    0
.eh_frame:0000000000008DBE                 db    0
.eh_frame:0000000000008DBF                 db    0
.eh_frame:0000000000008DC0                 db    0
.eh_frame:0000000000008DC1                 db  42h ; B
.eh_frame:0000000000008DC2                 db  0Eh
.eh_frame:0000000000008DC3                 db  10h
.eh_frame:0000000000008DC4                 db  8Ch
.eh_frame:0000000000008DC5                 db    2
.eh_frame:0000000000008DC6                 db  41h ; A
.eh_frame:0000000000008DC7                 db  0Eh
.eh_frame:0000000000008DC8                 db  18h
.eh_frame:0000000000008DC9                 db  86h
.eh_frame:0000000000008DCA                 db    3
.eh_frame:0000000000008DCB                 db  44h ; D
.eh_frame:0000000000008DCC                 db  0Eh
.eh_frame:0000000000008DCD                 db  20h
.eh_frame:0000000000008DCE                 db  83h
.eh_frame:0000000000008DCF                 db    4
.eh_frame:0000000000008DD0                 db  69h ; i
.eh_frame:0000000000008DD1                 db  0Ah
.eh_frame:0000000000008DD2                 db  0Eh
.eh_frame:0000000000008DD3                 db  18h
.eh_frame:0000000000008DD4                 db  41h ; A
.eh_frame:0000000000008DD5                 db  0Eh
.eh_frame:0000000000008DD6                 db  10h
.eh_frame:0000000000008DD7                 db  42h ; B
.eh_frame:0000000000008DD8                 db  0Eh
.eh_frame:0000000000008DD9                 db    8
.eh_frame:0000000000008DDA                 db  45h ; E
.eh_frame:0000000000008DDB                 db  0Bh
.eh_frame:0000000000008DDC                 db  55h ; U
.eh_frame:0000000000008DDD                 db  0Ah
.eh_frame:0000000000008DDE                 db  0Eh
.eh_frame:0000000000008DDF                 db  18h
.eh_frame:0000000000008DE0                 db  41h ; A
.eh_frame:0000000000008DE1                 db  0Eh
.eh_frame:0000000000008DE2                 db  10h
.eh_frame:0000000000008DE3                 db  42h ; B
.eh_frame:0000000000008DE4                 db  0Eh
.eh_frame:0000000000008DE5                 db    8
.eh_frame:0000000000008DE6                 db  48h ; H
.eh_frame:0000000000008DE7                 db  0Bh
.eh_frame:0000000000008DE8                 db  41h ; A
.eh_frame:0000000000008DE9                 db  0Ah
.eh_frame:0000000000008DEA                 db  0Eh
.eh_frame:0000000000008DEB                 db  18h
.eh_frame:0000000000008DEC                 db  46h ; F
.eh_frame:0000000000008DED                 db  0Eh
.eh_frame:0000000000008DEE                 db  10h
.eh_frame:0000000000008DEF                 db  42h ; B
.eh_frame:0000000000008DF0                 db  0Eh
.eh_frame:0000000000008DF1                 db    8
.eh_frame:0000000000008DF2                 db  47h ; G
.eh_frame:0000000000008DF3                 db  0Bh
.eh_frame:0000000000008DF4                 db  49h ; I
.eh_frame:0000000000008DF5                 db  0Eh
.eh_frame:0000000000008DF6                 db  18h
.eh_frame:0000000000008DF7                 db  41h ; A
.eh_frame:0000000000008DF8                 db  0Eh
.eh_frame:0000000000008DF9                 db  10h
.eh_frame:0000000000008DFA                 db  42h ; B
.eh_frame:0000000000008DFB                 db  0Eh
.eh_frame:0000000000008DFC                 db    8
.eh_frame:0000000000008DFD                 db    0
.eh_frame:0000000000008DFE                 db    0
.eh_frame:0000000000008DFF                 db    0
.eh_frame:0000000000008E00                 db  1Ch
.eh_frame:0000000000008E01                 db    0
.eh_frame:0000000000008E02                 db    0
.eh_frame:0000000000008E03                 db    0
.eh_frame:0000000000008E04                 db  7Ch ; |
.eh_frame:0000000000008E05                 db  0Bh
.eh_frame:0000000000008E06                 db    0
.eh_frame:0000000000008E07                 db    0
.eh_frame:0000000000008E08                 db 0D8h
.eh_frame:0000000000008E09                 db 0DAh
.eh_frame:0000000000008E0A                 db 0FFh
.eh_frame:0000000000008E0B                 db 0FFh
.eh_frame:0000000000008E0C                 db  60h ; `
.eh_frame:0000000000008E0D                 db    0
.eh_frame:0000000000008E0E                 db    0
.eh_frame:0000000000008E0F                 db    0
.eh_frame:0000000000008E10                 db    0
.eh_frame:0000000000008E11                 db  44h ; D
.eh_frame:0000000000008E12                 db  0Eh
.eh_frame:0000000000008E13                 db  10h
.eh_frame:0000000000008E14                 db  75h ; u
.eh_frame:0000000000008E15                 db  0Ah
.eh_frame:0000000000008E16                 db  0Eh
.eh_frame:0000000000008E17                 db    8
.eh_frame:0000000000008E18                 db  47h ; G
.eh_frame:0000000000008E19                 db  0Bh
.eh_frame:0000000000008E1A                 db  5Fh ; _
.eh_frame:0000000000008E1B                 db  0Eh
.eh_frame:0000000000008E1C                 db    8
.eh_frame:0000000000008E1D                 db    0
.eh_frame:0000000000008E1E                 db    0
.eh_frame:0000000000008E1F                 db    0
.eh_frame:0000000000008E20                 db  1Ch
.eh_frame:0000000000008E21                 db    0
.eh_frame:0000000000008E22                 db    0
.eh_frame:0000000000008E23                 db    0
.eh_frame:0000000000008E24                 db  9Ch
.eh_frame:0000000000008E25                 db  0Bh
.eh_frame:0000000000008E26                 db    0
.eh_frame:0000000000008E27                 db    0
.eh_frame:0000000000008E28                 db  18h
.eh_frame:0000000000008E29                 db 0DBh
.eh_frame:0000000000008E2A                 db 0FFh
.eh_frame:0000000000008E2B                 db 0FFh
.eh_frame:0000000000008E2C                 db  3Ch ; <
.eh_frame:0000000000008E2D                 db    0
.eh_frame:0000000000008E2E                 db    0
.eh_frame:0000000000008E2F                 db    0
.eh_frame:0000000000008E30                 db    0
.eh_frame:0000000000008E31                 db  44h ; D
.eh_frame:0000000000008E32                 db  0Eh
.eh_frame:0000000000008E33                 db  10h
.eh_frame:0000000000008E34                 db  61h ; a
.eh_frame:0000000000008E35                 db  0Ah
.eh_frame:0000000000008E36                 db  0Eh
.eh_frame:0000000000008E37                 db    8
.eh_frame:0000000000008E38                 db  4Bh ; K
.eh_frame:0000000000008E39                 db  0Bh
.eh_frame:0000000000008E3A                 db  4Bh ; K
.eh_frame:0000000000008E3B                 db  0Eh
.eh_frame:0000000000008E3C                 db    8
.eh_frame:0000000000008E3D                 db    0
.eh_frame:0000000000008E3E                 db    0
.eh_frame:0000000000008E3F                 db    0
.eh_frame:0000000000008E40                 db  34h ; 4
.eh_frame:0000000000008E41                 db    0
.eh_frame:0000000000008E42                 db    0
.eh_frame:0000000000008E43                 db    0
.eh_frame:0000000000008E44                 db 0BCh
.eh_frame:0000000000008E45                 db  0Bh
.eh_frame:0000000000008E46                 db    0
.eh_frame:0000000000008E47                 db    0
.eh_frame:0000000000008E48                 db  38h ; 8
.eh_frame:0000000000008E49                 db 0DBh
.eh_frame:0000000000008E4A                 db 0FFh
.eh_frame:0000000000008E4B                 db 0FFh
.eh_frame:0000000000008E4C                 db  7Bh ; {
.eh_frame:0000000000008E4D                 db    0
.eh_frame:0000000000008E4E                 db    0
.eh_frame:0000000000008E4F                 db    0
.eh_frame:0000000000008E50                 db    0
.eh_frame:0000000000008E51                 db  42h ; B
.eh_frame:0000000000008E52                 db  0Eh
.eh_frame:0000000000008E53                 db  10h
.eh_frame:0000000000008E54                 db  8Ch
.eh_frame:0000000000008E55                 db    2
.eh_frame:0000000000008E56                 db  41h ; A
.eh_frame:0000000000008E57                 db  0Eh
.eh_frame:0000000000008E58                 db  18h
.eh_frame:0000000000008E59                 db  86h
.eh_frame:0000000000008E5A                 db    3
.eh_frame:0000000000008E5B                 db  41h ; A
.eh_frame:0000000000008E5C                 db  0Eh
.eh_frame:0000000000008E5D                 db  20h
.eh_frame:0000000000008E5E                 db  83h
.eh_frame:0000000000008E5F                 db    4
.eh_frame:0000000000008E60                 db  7Dh ; }
.eh_frame:0000000000008E61                 db  0Ah
.eh_frame:0000000000008E62                 db  0Eh
.eh_frame:0000000000008E63                 db  18h
.eh_frame:0000000000008E64                 db  41h ; A
.eh_frame:0000000000008E65                 db  0Eh
.eh_frame:0000000000008E66                 db  10h
.eh_frame:0000000000008E67                 db  42h ; B
.eh_frame:0000000000008E68                 db  0Eh
.eh_frame:0000000000008E69                 db    8
.eh_frame:0000000000008E6A                 db  44h ; D
.eh_frame:0000000000008E6B                 db  0Bh
.eh_frame:0000000000008E6C                 db  60h ; `
.eh_frame:0000000000008E6D                 db  0Ah
.eh_frame:0000000000008E6E                 db  0Eh
.eh_frame:0000000000008E6F                 db  18h
.eh_frame:0000000000008E70                 db  41h ; A
.eh_frame:0000000000008E71                 db  0Eh
.eh_frame:0000000000008E72                 db  10h
.eh_frame:0000000000008E73                 db  42h ; B
.eh_frame:0000000000008E74                 db  0Eh
.eh_frame:0000000000008E75                 db    8
.eh_frame:0000000000008E76                 db  45h ; E
.eh_frame:0000000000008E77                 db  0Bh
.eh_frame:0000000000008E78                 db  1Ch
.eh_frame:0000000000008E79                 db    0
.eh_frame:0000000000008E7A                 db    0
.eh_frame:0000000000008E7B                 db    0
.eh_frame:0000000000008E7C                 db 0F4h
.eh_frame:0000000000008E7D                 db  0Bh
.eh_frame:0000000000008E7E                 db    0
.eh_frame:0000000000008E7F                 db    0
.eh_frame:0000000000008E80                 db  80h
.eh_frame:0000000000008E81                 db 0DBh
.eh_frame:0000000000008E82                 db 0FFh
.eh_frame:0000000000008E83                 db 0FFh
.eh_frame:0000000000008E84                 db  40h ; @
.eh_frame:0000000000008E85                 db    0
.eh_frame:0000000000008E86                 db    0
.eh_frame:0000000000008E87                 db    0
.eh_frame:0000000000008E88                 db    0
.eh_frame:0000000000008E89                 db  44h ; D
.eh_frame:0000000000008E8A                 db  0Eh
.eh_frame:0000000000008E8B                 db  10h
.eh_frame:0000000000008E8C                 db  83h
.eh_frame:0000000000008E8D                 db    2
.eh_frame:0000000000008E8E                 db  5Ah ; Z
.eh_frame:0000000000008E8F                 db  0Ah
.eh_frame:0000000000008E90                 db  0Eh
.eh_frame:0000000000008E91                 db    8
.eh_frame:0000000000008E92                 db  4Ah ; J
.eh_frame:0000000000008E93                 db  0Bh
.eh_frame:0000000000008E94                 db  53h ; S
.eh_frame:0000000000008E95                 db  0Eh
.eh_frame:0000000000008E96                 db    8
.eh_frame:0000000000008E97                 db    0
.eh_frame:0000000000008E98                 db  2Ch ; ,
.eh_frame:0000000000008E99                 db    0
.eh_frame:0000000000008E9A                 db    0
.eh_frame:0000000000008E9B                 db    0
.eh_frame:0000000000008E9C                 db  14h
.eh_frame:0000000000008E9D                 db  0Ch
.eh_frame:0000000000008E9E                 db    0
.eh_frame:0000000000008E9F                 db    0
.eh_frame:0000000000008EA0                 db 0A0h
.eh_frame:0000000000008EA1                 db 0DBh
.eh_frame:0000000000008EA2                 db 0FFh
.eh_frame:0000000000008EA3                 db 0FFh
.eh_frame:0000000000008EA4                 db  57h ; W
.eh_frame:0000000000008EA5                 db    0
.eh_frame:0000000000008EA6                 db    0
.eh_frame:0000000000008EA7                 db    0
.eh_frame:0000000000008EA8                 db    0
.eh_frame:0000000000008EA9                 db  63h ; c
.eh_frame:0000000000008EAA                 db  0Eh
.eh_frame:0000000000008EAB                 db  10h
.eh_frame:0000000000008EAC                 db  8Ch
.eh_frame:0000000000008EAD                 db    2
.eh_frame:0000000000008EAE                 db  41h ; A
.eh_frame:0000000000008EAF                 db  0Eh
.eh_frame:0000000000008EB0                 db  18h
.eh_frame:0000000000008EB1                 db  86h
.eh_frame:0000000000008EB2                 db    3
.eh_frame:0000000000008EB3                 db  44h ; D
.eh_frame:0000000000008EB4                 db  0Eh
.eh_frame:0000000000008EB5                 db  20h
.eh_frame:0000000000008EB6                 db  83h
.eh_frame:0000000000008EB7                 db    4
.eh_frame:0000000000008EB8                 db  6Bh ; k
.eh_frame:0000000000008EB9                 db  0Eh
.eh_frame:0000000000008EBA                 db  18h
.eh_frame:0000000000008EBB                 db  41h ; A
.eh_frame:0000000000008EBC                 db  0Eh
.eh_frame:0000000000008EBD                 db  10h
.eh_frame:0000000000008EBE                 db  42h ; B
.eh_frame:0000000000008EBF                 db  0Eh
.eh_frame:0000000000008EC0                 db    8
.eh_frame:0000000000008EC1                 db    0
.eh_frame:0000000000008EC2                 db    0
.eh_frame:0000000000008EC3                 db    0
.eh_frame:0000000000008EC4                 db    0
.eh_frame:0000000000008EC5                 db    0
.eh_frame:0000000000008EC6                 db    0
.eh_frame:0000000000008EC7                 db    0
.eh_frame:0000000000008EC8                 db  44h ; D
.eh_frame:0000000000008EC9                 db    0
.eh_frame:0000000000008ECA                 db    0
.eh_frame:0000000000008ECB                 db    0
.eh_frame:0000000000008ECC                 db  44h ; D
.eh_frame:0000000000008ECD                 db  0Ch
.eh_frame:0000000000008ECE                 db    0
.eh_frame:0000000000008ECF                 db    0
.eh_frame:0000000000008ED0                 db 0D0h
.eh_frame:0000000000008ED1                 db 0DBh
.eh_frame:0000000000008ED2                 db 0FFh
.eh_frame:0000000000008ED3                 db 0FFh
.eh_frame:0000000000008ED4                 db  65h ; e
.eh_frame:0000000000008ED5                 db    0
.eh_frame:0000000000008ED6                 db    0
.eh_frame:0000000000008ED7                 db    0
.eh_frame:0000000000008ED8                 db    0
.eh_frame:0000000000008ED9                 db  42h ; B
.eh_frame:0000000000008EDA                 db  0Eh
.eh_frame:0000000000008EDB                 db  10h
.eh_frame:0000000000008EDC                 db  8Fh
.eh_frame:0000000000008EDD                 db    2
.eh_frame:0000000000008EDE                 db  42h ; B
.eh_frame:0000000000008EDF                 db  0Eh
.eh_frame:0000000000008EE0                 db  18h
.eh_frame:0000000000008EE1                 db  8Eh
.eh_frame:0000000000008EE2                 db    3
.eh_frame:0000000000008EE3                 db  45h ; E
.eh_frame:0000000000008EE4                 db  0Eh
.eh_frame:0000000000008EE5                 db  20h
.eh_frame:0000000000008EE6                 db  8Dh
.eh_frame:0000000000008EE7                 db    4
.eh_frame:0000000000008EE8                 db  42h ; B
.eh_frame:0000000000008EE9                 db  0Eh
.eh_frame:0000000000008EEA                 db  28h ; (
.eh_frame:0000000000008EEB                 db  8Ch
.eh_frame:0000000000008EEC                 db    5
.eh_frame:0000000000008EED                 db  48h ; H
.eh_frame:0000000000008EEE                 db  0Eh
.eh_frame:0000000000008EEF                 db  30h ; 0
.eh_frame:0000000000008EF0                 db  86h
.eh_frame:0000000000008EF1                 db    6
.eh_frame:0000000000008EF2                 db  48h ; H
.eh_frame:0000000000008EF3                 db  0Eh
.eh_frame:0000000000008EF4                 db  38h ; 8
.eh_frame:0000000000008EF5                 db  83h
.eh_frame:0000000000008EF6                 db    7
.eh_frame:0000000000008EF7                 db  4Dh ; M
.eh_frame:0000000000008EF8                 db  0Eh
.eh_frame:0000000000008EF9                 db  40h ; @
.eh_frame:0000000000008EFA                 db  72h ; r
.eh_frame:0000000000008EFB                 db  0Eh
.eh_frame:0000000000008EFC                 db  38h ; 8
.eh_frame:0000000000008EFD                 db  41h ; A
.eh_frame:0000000000008EFE                 db  0Eh
.eh_frame:0000000000008EFF                 db  30h ; 0
.eh_frame:0000000000008F00                 db  41h ; A
.eh_frame:0000000000008F01                 db  0Eh
.eh_frame:0000000000008F02                 db  28h ; (
.eh_frame:0000000000008F03                 db  42h ; B
.eh_frame:0000000000008F04                 db  0Eh
.eh_frame:0000000000008F05                 db  20h
.eh_frame:0000000000008F06                 db  42h ; B
.eh_frame:0000000000008F07                 db  0Eh
.eh_frame:0000000000008F08                 db  18h
.eh_frame:0000000000008F09                 db  42h ; B
.eh_frame:0000000000008F0A                 db  0Eh
.eh_frame:0000000000008F0B                 db  10h
.eh_frame:0000000000008F0C                 db  42h ; B
.eh_frame:0000000000008F0D                 db  0Eh
.eh_frame:0000000000008F0E                 db    8
.eh_frame:0000000000008F0F                 db    0
.eh_frame:0000000000008F10                 db  14h
.eh_frame:0000000000008F11                 db    0
.eh_frame:0000000000008F12                 db    0
.eh_frame:0000000000008F13                 db    0
.eh_frame:0000000000008F14                 db  8Ch
.eh_frame:0000000000008F15                 db  0Ch
.eh_frame:0000000000008F16                 db    0
.eh_frame:0000000000008F17                 db    0
.eh_frame:0000000000008F18                 db 0F8h
.eh_frame:0000000000008F19                 db 0DBh
.eh_frame:0000000000008F1A                 db 0FFh
.eh_frame:0000000000008F1B                 db 0FFh
.eh_frame:0000000000008F1C                 db    2
.eh_frame:0000000000008F1D                 db    0
.eh_frame:0000000000008F1E                 db    0
.eh_frame:0000000000008F1F                 db    0
.eh_frame:0000000000008F20                 db    0
.eh_frame:0000000000008F21                 db    0
.eh_frame:0000000000008F22                 db    0
.eh_frame:0000000000008F23                 db    0
.eh_frame:0000000000008F24                 db    0
.eh_frame:0000000000008F25                 db    0
.eh_frame:0000000000008F26                 db    0
.eh_frame:0000000000008F27                 db    0
.eh_frame:0000000000008F28                 db  10h
.eh_frame:0000000000008F29                 db    0
.eh_frame:0000000000008F2A                 db    0
.eh_frame:0000000000008F2B                 db    0
.eh_frame:0000000000008F2C                 db 0A4h
.eh_frame:0000000000008F2D                 db  0Ch
.eh_frame:0000000000008F2E                 db    0
.eh_frame:0000000000008F2F                 db    0
.eh_frame:0000000000008F30                 db 0F0h
.eh_frame:0000000000008F31                 db 0DBh
.eh_frame:0000000000008F32                 db 0FFh
.eh_frame:0000000000008F33                 db 0FFh
.eh_frame:0000000000008F34                 db  0Eh
.eh_frame:0000000000008F35                 db    0
.eh_frame:0000000000008F36                 db    0
.eh_frame:0000000000008F37                 db    0
.eh_frame:0000000000008F38                 db    0
.eh_frame:0000000000008F39                 db    0
.eh_frame:0000000000008F3A                 db    0
.eh_frame:0000000000008F3B                 db    0
.eh_frame:0000000000008F3C __FRAME_END__   db    0
.eh_frame:0000000000008F3D                 db    0
.eh_frame:0000000000008F3E                 db    0
.eh_frame:0000000000008F3F                 db    0
.eh_frame:0000000000008F3F _eh_frame       ends
.eh_frame:0000000000008F3F
.init_array:00000000002099D0 ; ELF Initialization Function Table
.init_array:00000000002099D0 ; ===========================================================================
.init_array:00000000002099D0
.init_array:00000000002099D0 ; Segment type: Pure data
.init_array:00000000002099D0 ; Segment permissions: Read/Write
.init_array:00000000002099D0 _init_array     segment qword public 'DATA' use64
.init_array:00000000002099D0                 assume cs:_init_array
.init_array:00000000002099D0                 ;org 2099D0h
.init_array:00000000002099D0 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:00000000002099D0                                         ; DATA XREF: LOAD:00000000000000F8↑o
.init_array:00000000002099D0                                         ; LOAD:0000000000000210↑o ...
.init_array:00000000002099D0 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:00000000002099D0
.fini_array:00000000002099D8 ; ELF Termination Function Table
.fini_array:00000000002099D8 ; ===========================================================================
.fini_array:00000000002099D8
.fini_array:00000000002099D8 ; Segment type: Pure data
.fini_array:00000000002099D8 ; Segment permissions: Read/Write
.fini_array:00000000002099D8 _fini_array     segment qword public 'DATA' use64
.fini_array:00000000002099D8                 assume cs:_fini_array
.fini_array:00000000002099D8                 ;org 2099D8h
.fini_array:00000000002099D8 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:00000000002099D8                                         ; DATA XREF: __libc_csu_init+13↑o
.fini_array:00000000002099D8 _fini_array     ends                    ; Alternative name is '__init_array_end'
.fini_array:00000000002099D8
.data.rel.ro:00000000002099E0 ; ===========================================================================
.data.rel.ro:00000000002099E0
.data.rel.ro:00000000002099E0 ; Segment type: Pure data
.data.rel.ro:00000000002099E0 ; Segment permissions: Read/Write
.data.rel.ro:00000000002099E0 _data_rel_ro    segment align_32 public 'DATA' use64
.data.rel.ro:00000000002099E0                 assume cs:_data_rel_ro
.data.rel.ro:00000000002099E0                 ;org 2099E0h
.data.rel.ro:00000000002099E0 ; struct option longopts
.data.rel.ro:00000000002099E0 longopts        dq offset aIgnoreEnvironm; name
.data.rel.ro:00000000002099E0                                         ; DATA XREF: main+C4↑o
.data.rel.ro:00000000002099E0                 dd 0                    ; has_arg ; "ignore-environment"
.data.rel.ro:00000000002099E0                 db 4 dup(0)
.data.rel.ro:00000000002099E0                 dq 0                    ; flag
.data.rel.ro:00000000002099E0                 dd 69h                  ; val
.data.rel.ro:00000000002099E0                 db 4 dup(0)
.data.rel.ro:0000000000209A00                 dq offset aNull         ; "null"
.data.rel.ro:0000000000209A08                 db    0
.data.rel.ro:0000000000209A09                 db    0
.data.rel.ro:0000000000209A0A                 db    0
.data.rel.ro:0000000000209A0B                 db    0
.data.rel.ro:0000000000209A0C                 db    0
.data.rel.ro:0000000000209A0D                 db    0
.data.rel.ro:0000000000209A0E                 db    0
.data.rel.ro:0000000000209A0F                 db    0
.data.rel.ro:0000000000209A10                 db    0
.data.rel.ro:0000000000209A11                 db    0
.data.rel.ro:0000000000209A12                 db    0
.data.rel.ro:0000000000209A13                 db    0
.data.rel.ro:0000000000209A14                 db    0
.data.rel.ro:0000000000209A15                 db    0
.data.rel.ro:0000000000209A16                 db    0
.data.rel.ro:0000000000209A17                 db    0
.data.rel.ro:0000000000209A18                 db  30h ; 0
.data.rel.ro:0000000000209A19                 db    0
.data.rel.ro:0000000000209A1A                 db    0
.data.rel.ro:0000000000209A1B                 db    0
.data.rel.ro:0000000000209A1C                 db    0
.data.rel.ro:0000000000209A1D                 db    0
.data.rel.ro:0000000000209A1E                 db    0
.data.rel.ro:0000000000209A1F                 db    0
.data.rel.ro:0000000000209A20                 dq offset aUnset        ; "unset"
.data.rel.ro:0000000000209A28                 db    1
.data.rel.ro:0000000000209A29                 db    0
.data.rel.ro:0000000000209A2A                 db    0
.data.rel.ro:0000000000209A2B                 db    0
.data.rel.ro:0000000000209A2C                 db    0
.data.rel.ro:0000000000209A2D                 db    0
.data.rel.ro:0000000000209A2E                 db    0
.data.rel.ro:0000000000209A2F                 db    0
.data.rel.ro:0000000000209A30                 db    0
.data.rel.ro:0000000000209A31                 db    0
.data.rel.ro:0000000000209A32                 db    0
.data.rel.ro:0000000000209A33                 db    0
.data.rel.ro:0000000000209A34                 db    0
.data.rel.ro:0000000000209A35                 db    0
.data.rel.ro:0000000000209A36                 db    0
.data.rel.ro:0000000000209A37                 db    0
.data.rel.ro:0000000000209A38                 db  75h ; u
.data.rel.ro:0000000000209A39                 db    0
.data.rel.ro:0000000000209A3A                 db    0
.data.rel.ro:0000000000209A3B                 db    0
.data.rel.ro:0000000000209A3C                 db    0
.data.rel.ro:0000000000209A3D                 db    0
.data.rel.ro:0000000000209A3E                 db    0
.data.rel.ro:0000000000209A3F                 db    0
.data.rel.ro:0000000000209A40                 dq offset aChdir_0      ; "chdir"
.data.rel.ro:0000000000209A48                 db    1
.data.rel.ro:0000000000209A49                 db    0
.data.rel.ro:0000000000209A4A                 db    0
.data.rel.ro:0000000000209A4B                 db    0
.data.rel.ro:0000000000209A4C                 db    0
.data.rel.ro:0000000000209A4D                 db    0
.data.rel.ro:0000000000209A4E                 db    0
.data.rel.ro:0000000000209A4F                 db    0
.data.rel.ro:0000000000209A50                 db    0
.data.rel.ro:0000000000209A51                 db    0
.data.rel.ro:0000000000209A52                 db    0
.data.rel.ro:0000000000209A53                 db    0
.data.rel.ro:0000000000209A54                 db    0
.data.rel.ro:0000000000209A55                 db    0
.data.rel.ro:0000000000209A56                 db    0
.data.rel.ro:0000000000209A57                 db    0
.data.rel.ro:0000000000209A58                 db  43h ; C
.data.rel.ro:0000000000209A59                 db    0
.data.rel.ro:0000000000209A5A                 db    0
.data.rel.ro:0000000000209A5B                 db    0
.data.rel.ro:0000000000209A5C                 db    0
.data.rel.ro:0000000000209A5D                 db    0
.data.rel.ro:0000000000209A5E                 db    0
.data.rel.ro:0000000000209A5F                 db    0
.data.rel.ro:0000000000209A60                 dq offset aDefaultSignal ; "default-signal"
.data.rel.ro:0000000000209A68                 db    2
.data.rel.ro:0000000000209A69                 db    0
.data.rel.ro:0000000000209A6A                 db    0
.data.rel.ro:0000000000209A6B                 db    0
.data.rel.ro:0000000000209A6C                 db    0
.data.rel.ro:0000000000209A6D                 db    0
.data.rel.ro:0000000000209A6E                 db    0
.data.rel.ro:0000000000209A6F                 db    0
.data.rel.ro:0000000000209A70                 db    0
.data.rel.ro:0000000000209A71                 db    0
.data.rel.ro:0000000000209A72                 db    0
.data.rel.ro:0000000000209A73                 db    0
.data.rel.ro:0000000000209A74                 db    0
.data.rel.ro:0000000000209A75                 db    0
.data.rel.ro:0000000000209A76                 db    0
.data.rel.ro:0000000000209A77                 db    0
.data.rel.ro:0000000000209A78                 db  80h
.data.rel.ro:0000000000209A79                 db    0
.data.rel.ro:0000000000209A7A                 db    0
.data.rel.ro:0000000000209A7B                 db    0
.data.rel.ro:0000000000209A7C                 db    0
.data.rel.ro:0000000000209A7D                 db    0
.data.rel.ro:0000000000209A7E                 db    0
.data.rel.ro:0000000000209A7F                 db    0
.data.rel.ro:0000000000209A80                 dq offset aIgnoreSignal ; "ignore-signal"
.data.rel.ro:0000000000209A88                 db    2
.data.rel.ro:0000000000209A89                 db    0
.data.rel.ro:0000000000209A8A                 db    0
.data.rel.ro:0000000000209A8B                 db    0
.data.rel.ro:0000000000209A8C                 db    0
.data.rel.ro:0000000000209A8D                 db    0
.data.rel.ro:0000000000209A8E                 db    0
.data.rel.ro:0000000000209A8F                 db    0
.data.rel.ro:0000000000209A90                 db    0
.data.rel.ro:0000000000209A91                 db    0
.data.rel.ro:0000000000209A92                 db    0
.data.rel.ro:0000000000209A93                 db    0
.data.rel.ro:0000000000209A94                 db    0
.data.rel.ro:0000000000209A95                 db    0
.data.rel.ro:0000000000209A96                 db    0
.data.rel.ro:0000000000209A97                 db    0
.data.rel.ro:0000000000209A98                 db  81h
.data.rel.ro:0000000000209A99                 db    0
.data.rel.ro:0000000000209A9A                 db    0
.data.rel.ro:0000000000209A9B                 db    0
.data.rel.ro:0000000000209A9C                 db    0
.data.rel.ro:0000000000209A9D                 db    0
.data.rel.ro:0000000000209A9E                 db    0
.data.rel.ro:0000000000209A9F                 db    0
.data.rel.ro:0000000000209AA0                 dq offset aBlockSignal  ; "block-signal"
.data.rel.ro:0000000000209AA8                 db    2
.data.rel.ro:0000000000209AA9                 db    0
.data.rel.ro:0000000000209AAA                 db    0
.data.rel.ro:0000000000209AAB                 db    0
.data.rel.ro:0000000000209AAC                 db    0
.data.rel.ro:0000000000209AAD                 db    0
.data.rel.ro:0000000000209AAE                 db    0
.data.rel.ro:0000000000209AAF                 db    0
.data.rel.ro:0000000000209AB0                 db    0
.data.rel.ro:0000000000209AB1                 db    0
.data.rel.ro:0000000000209AB2                 db    0
.data.rel.ro:0000000000209AB3                 db    0
.data.rel.ro:0000000000209AB4                 db    0
.data.rel.ro:0000000000209AB5                 db    0
.data.rel.ro:0000000000209AB6                 db    0
.data.rel.ro:0000000000209AB7                 db    0
.data.rel.ro:0000000000209AB8                 db  82h
.data.rel.ro:0000000000209AB9                 db    0
.data.rel.ro:0000000000209ABA                 db    0
.data.rel.ro:0000000000209ABB                 db    0
.data.rel.ro:0000000000209ABC                 db    0
.data.rel.ro:0000000000209ABD                 db    0
.data.rel.ro:0000000000209ABE                 db    0
.data.rel.ro:0000000000209ABF                 db    0
.data.rel.ro:0000000000209AC0                 dq offset aListSignalHand_0 ; "list-signal-handling"
.data.rel.ro:0000000000209AC8                 db    0
.data.rel.ro:0000000000209AC9                 db    0
.data.rel.ro:0000000000209ACA                 db    0
.data.rel.ro:0000000000209ACB                 db    0
.data.rel.ro:0000000000209ACC                 db    0
.data.rel.ro:0000000000209ACD                 db    0
.data.rel.ro:0000000000209ACE                 db    0
.data.rel.ro:0000000000209ACF                 db    0
.data.rel.ro:0000000000209AD0                 db    0
.data.rel.ro:0000000000209AD1                 db    0
.data.rel.ro:0000000000209AD2                 db    0
.data.rel.ro:0000000000209AD3                 db    0
.data.rel.ro:0000000000209AD4                 db    0
.data.rel.ro:0000000000209AD5                 db    0
.data.rel.ro:0000000000209AD6                 db    0
.data.rel.ro:0000000000209AD7                 db    0
.data.rel.ro:0000000000209AD8                 db  83h
.data.rel.ro:0000000000209AD9                 db    0
.data.rel.ro:0000000000209ADA                 db    0
.data.rel.ro:0000000000209ADB                 db    0
.data.rel.ro:0000000000209ADC                 db    0
.data.rel.ro:0000000000209ADD                 db    0
.data.rel.ro:0000000000209ADE                 db    0
.data.rel.ro:0000000000209ADF                 db    0
.data.rel.ro:0000000000209AE0                 dq offset aDebug        ; "debug"
.data.rel.ro:0000000000209AE8                 db    0
.data.rel.ro:0000000000209AE9                 db    0
.data.rel.ro:0000000000209AEA                 db    0
.data.rel.ro:0000000000209AEB                 db    0
.data.rel.ro:0000000000209AEC                 db    0
.data.rel.ro:0000000000209AED                 db    0
.data.rel.ro:0000000000209AEE                 db    0
.data.rel.ro:0000000000209AEF                 db    0
.data.rel.ro:0000000000209AF0                 db    0
.data.rel.ro:0000000000209AF1                 db    0
.data.rel.ro:0000000000209AF2                 db    0
.data.rel.ro:0000000000209AF3                 db    0
.data.rel.ro:0000000000209AF4                 db    0
.data.rel.ro:0000000000209AF5                 db    0
.data.rel.ro:0000000000209AF6                 db    0
.data.rel.ro:0000000000209AF7                 db    0
.data.rel.ro:0000000000209AF8                 db  76h ; v
.data.rel.ro:0000000000209AF9                 db    0
.data.rel.ro:0000000000209AFA                 db    0
.data.rel.ro:0000000000209AFB                 db    0
.data.rel.ro:0000000000209AFC                 db    0
.data.rel.ro:0000000000209AFD                 db    0
.data.rel.ro:0000000000209AFE                 db    0
.data.rel.ro:0000000000209AFF                 db    0
.data.rel.ro:0000000000209B00                 dq offset aSplitString  ; "split-string"
.data.rel.ro:0000000000209B08                 db    1
.data.rel.ro:0000000000209B09                 db    0
.data.rel.ro:0000000000209B0A                 db    0
.data.rel.ro:0000000000209B0B                 db    0
.data.rel.ro:0000000000209B0C                 db    0
.data.rel.ro:0000000000209B0D                 db    0
.data.rel.ro:0000000000209B0E                 db    0
.data.rel.ro:0000000000209B0F                 db    0
.data.rel.ro:0000000000209B10                 db    0
.data.rel.ro:0000000000209B11                 db    0
.data.rel.ro:0000000000209B12                 db    0
.data.rel.ro:0000000000209B13                 db    0
.data.rel.ro:0000000000209B14                 db    0
.data.rel.ro:0000000000209B15                 db    0
.data.rel.ro:0000000000209B16                 db    0
.data.rel.ro:0000000000209B17                 db    0
.data.rel.ro:0000000000209B18                 db  53h ; S
.data.rel.ro:0000000000209B19                 db    0
.data.rel.ro:0000000000209B1A                 db    0
.data.rel.ro:0000000000209B1B                 db    0
.data.rel.ro:0000000000209B1C                 db    0
.data.rel.ro:0000000000209B1D                 db    0
.data.rel.ro:0000000000209B1E                 db    0
.data.rel.ro:0000000000209B1F                 db    0
.data.rel.ro:0000000000209B20                 dq offset aHelp         ; "help"
.data.rel.ro:0000000000209B28                 db    0
.data.rel.ro:0000000000209B29                 db    0
.data.rel.ro:0000000000209B2A                 db    0
.data.rel.ro:0000000000209B2B                 db    0
.data.rel.ro:0000000000209B2C                 db    0
.data.rel.ro:0000000000209B2D                 db    0
.data.rel.ro:0000000000209B2E                 db    0
.data.rel.ro:0000000000209B2F                 db    0
.data.rel.ro:0000000000209B30                 db    0
.data.rel.ro:0000000000209B31                 db    0
.data.rel.ro:0000000000209B32                 db    0
.data.rel.ro:0000000000209B33                 db    0
.data.rel.ro:0000000000209B34                 db    0
.data.rel.ro:0000000000209B35                 db    0
.data.rel.ro:0000000000209B36                 db    0
.data.rel.ro:0000000000209B37                 db    0
.data.rel.ro:0000000000209B38                 db  7Eh ; ~
.data.rel.ro:0000000000209B39                 db 0FFh
.data.rel.ro:0000000000209B3A                 db 0FFh
.data.rel.ro:0000000000209B3B                 db 0FFh
.data.rel.ro:0000000000209B3C                 db    0
.data.rel.ro:0000000000209B3D                 db    0
.data.rel.ro:0000000000209B3E                 db    0
.data.rel.ro:0000000000209B3F                 db    0
.data.rel.ro:0000000000209B40                 dq offset aVersion      ; "version"
.data.rel.ro:0000000000209B48                 db    0
.data.rel.ro:0000000000209B49                 db    0
.data.rel.ro:0000000000209B4A                 db    0
.data.rel.ro:0000000000209B4B                 db    0
.data.rel.ro:0000000000209B4C                 db    0
.data.rel.ro:0000000000209B4D                 db    0
.data.rel.ro:0000000000209B4E                 db    0
.data.rel.ro:0000000000209B4F                 db    0
.data.rel.ro:0000000000209B50                 db    0
.data.rel.ro:0000000000209B51                 db    0
.data.rel.ro:0000000000209B52                 db    0
.data.rel.ro:0000000000209B53                 db    0
.data.rel.ro:0000000000209B54                 db    0
.data.rel.ro:0000000000209B55                 db    0
.data.rel.ro:0000000000209B56                 db    0
.data.rel.ro:0000000000209B57                 db    0
.data.rel.ro:0000000000209B58                 db  7Dh ; }
.data.rel.ro:0000000000209B59                 db 0FFh
.data.rel.ro:0000000000209B5A                 db 0FFh
.data.rel.ro:0000000000209B5B                 db 0FFh
.data.rel.ro:0000000000209B5C                 db    0
.data.rel.ro:0000000000209B5D                 db    0
.data.rel.ro:0000000000209B5E                 db    0
.data.rel.ro:0000000000209B5F                 db    0
.data.rel.ro:0000000000209B60                 db    0
.data.rel.ro:0000000000209B61                 db    0
.data.rel.ro:0000000000209B62                 db    0
.data.rel.ro:0000000000209B63                 db    0
.data.rel.ro:0000000000209B64                 db    0
.data.rel.ro:0000000000209B65                 db    0
.data.rel.ro:0000000000209B66                 db    0
.data.rel.ro:0000000000209B67                 db    0
.data.rel.ro:0000000000209B68                 db    0
.data.rel.ro:0000000000209B69                 db    0
.data.rel.ro:0000000000209B6A                 db    0
.data.rel.ro:0000000000209B6B                 db    0
.data.rel.ro:0000000000209B6C                 db    0
.data.rel.ro:0000000000209B6D                 db    0
.data.rel.ro:0000000000209B6E                 db    0
.data.rel.ro:0000000000209B6F                 db    0
.data.rel.ro:0000000000209B70                 db    0
.data.rel.ro:0000000000209B71                 db    0
.data.rel.ro:0000000000209B72                 db    0
.data.rel.ro:0000000000209B73                 db    0
.data.rel.ro:0000000000209B74                 db    0
.data.rel.ro:0000000000209B75                 db    0
.data.rel.ro:0000000000209B76                 db    0
.data.rel.ro:0000000000209B77                 db    0
.data.rel.ro:0000000000209B78                 db    0
.data.rel.ro:0000000000209B79                 db    0
.data.rel.ro:0000000000209B7A                 db    0
.data.rel.ro:0000000000209B7B                 db    0
.data.rel.ro:0000000000209B7C                 db    0
.data.rel.ro:0000000000209B7D                 db    0
.data.rel.ro:0000000000209B7E                 db    0
.data.rel.ro:0000000000209B7F                 db    0
.data.rel.ro:0000000000209B80                 public quoting_style_args
.data.rel.ro:0000000000209B80 quoting_style_args dq offset aLiteral   ; "literal"
.data.rel.ro:0000000000209B88                 dq offset aShell        ; "shell"
.data.rel.ro:0000000000209B90                 dq offset aShellAlways  ; "shell-always"
.data.rel.ro:0000000000209B98                 dq offset aShellEscape  ; "shell-escape"
.data.rel.ro:0000000000209BA0                 dq offset aShellEscapeAlw ; "shell-escape-always"
.data.rel.ro:0000000000209BA8                 dq offset aSC+3         ; "c"
.data.rel.ro:0000000000209BB0                 dq offset aCMaybe       ; "c-maybe"
.data.rel.ro:0000000000209BB8                 dq offset aShellEscape+6 ; "escape"
.data.rel.ro:0000000000209BC0                 dq offset dirname+11h   ; "locale"
.data.rel.ro:0000000000209BC8                 dq offset aClocale      ; "clocale"
.data.rel.ro:0000000000209BD0                 db    0
.data.rel.ro:0000000000209BD1                 db    0
.data.rel.ro:0000000000209BD2                 db    0
.data.rel.ro:0000000000209BD3                 db    0
.data.rel.ro:0000000000209BD4                 db    0
.data.rel.ro:0000000000209BD5                 db    0
.data.rel.ro:0000000000209BD6                 db    0
.data.rel.ro:0000000000209BD7                 db    0
.data.rel.ro:0000000000209BD7 _data_rel_ro    ends
.data.rel.ro:0000000000209BD7
LOAD:0000000000209BD8 ; ELF Dynamic Information
LOAD:0000000000209BD8 ; ===========================================================================
LOAD:0000000000209BD8
LOAD:0000000000209BD8 ; Segment type: Pure data
LOAD:0000000000209BD8 ; Segment permissions: Read/Write
LOAD:0000000000209BD8 LOAD            segment byte public 'DATA' use64
LOAD:0000000000209BD8                 assume cs:LOAD
LOAD:0000000000209BD8                 ;org 209BD8h
LOAD:0000000000209BD8 _DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000000130↑o
LOAD:0000000000209BD8                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:0000000000209BD8                                         ; DT_NEEDED libc.so.6
LOAD:0000000000209BE8                 Elf64_Dyn <0Ch, 1858h>  ; DT_INIT
LOAD:0000000000209BF8                 Elf64_Dyn <0Dh, 6B30h>  ; DT_FINI
LOAD:0000000000209C08                 Elf64_Dyn <19h, 2099D0h> ; DT_INIT_ARRAY
LOAD:0000000000209C18                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:0000000000209C28                 Elf64_Dyn <1Ah, 2099D8h> ; DT_FINI_ARRAY
LOAD:0000000000209C38                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:0000000000209C48                 Elf64_Dyn <6FFFFEF5h, 298h> ; DT_GNU_HASH
LOAD:0000000000209C58                 Elf64_Dyn <5, 0A50h>    ; DT_STRTAB
LOAD:0000000000209C68                 Elf64_Dyn <6, 2E8h>     ; DT_SYMTAB
LOAD:0000000000209C78                 Elf64_Dyn <0Ah, 377h>   ; DT_STRSZ
LOAD:0000000000209C88                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:0000000000209C98                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:0000000000209CA8                 Elf64_Dyn <3, 209DC8h>  ; DT_PLTGOT
LOAD:0000000000209CB8                 Elf64_Dyn <2, 5D0h>     ; DT_PLTRELSZ
LOAD:0000000000209CC8                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:0000000000209CD8                 Elf64_Dyn <17h, 1288h>  ; DT_JMPREL
LOAD:0000000000209CE8                 Elf64_Dyn <7, 0EC8h>    ; DT_RELA
LOAD:0000000000209CF8                 Elf64_Dyn <8, 3C0h>     ; DT_RELASZ
LOAD:0000000000209D08                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:0000000000209D18                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:0000000000209D28                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:0000000000209D38                 Elf64_Dyn <6FFFFFFEh, 0E68h> ; DT_VERNEED
LOAD:0000000000209D48                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:0000000000209D58                 Elf64_Dyn <6FFFFFF0h, 0DC8h> ; DT_VERSYM
LOAD:0000000000209D68                 Elf64_Dyn <6FFFFFF9h, 1Ch> ; DT_RELACOUNT
LOAD:0000000000209D78                 Elf64_Dyn <0>           ; DT_NULL
LOAD:0000000000209D88                 db    0
LOAD:0000000000209D89                 db    0
LOAD:0000000000209D8A                 db    0
LOAD:0000000000209D8B                 db    0
LOAD:0000000000209D8C                 db    0
LOAD:0000000000209D8D                 db    0
LOAD:0000000000209D8E                 db    0
LOAD:0000000000209D8F                 db    0
LOAD:0000000000209D90                 db    0
LOAD:0000000000209D91                 db    0
LOAD:0000000000209D92                 db    0
LOAD:0000000000209D93                 db    0
LOAD:0000000000209D94                 db    0
LOAD:0000000000209D95                 db    0
LOAD:0000000000209D96                 db    0
LOAD:0000000000209D97                 db    0
LOAD:0000000000209D98                 db    0
LOAD:0000000000209D99                 db    0
LOAD:0000000000209D9A                 db    0
LOAD:0000000000209D9B                 db    0
LOAD:0000000000209D9C                 db    0
LOAD:0000000000209D9D                 db    0
LOAD:0000000000209D9E                 db    0
LOAD:0000000000209D9F                 db    0
LOAD:0000000000209DA0                 db    0
LOAD:0000000000209DA1                 db    0
LOAD:0000000000209DA2                 db    0
LOAD:0000000000209DA3                 db    0
LOAD:0000000000209DA4                 db    0
LOAD:0000000000209DA5                 db    0
LOAD:0000000000209DA6                 db    0
LOAD:0000000000209DA7                 db    0
LOAD:0000000000209DA8                 db    0
LOAD:0000000000209DA9                 db    0
LOAD:0000000000209DAA                 db    0
LOAD:0000000000209DAB                 db    0
LOAD:0000000000209DAC                 db    0
LOAD:0000000000209DAD                 db    0
LOAD:0000000000209DAE                 db    0
LOAD:0000000000209DAF                 db    0
LOAD:0000000000209DB0                 db    0
LOAD:0000000000209DB1                 db    0
LOAD:0000000000209DB2                 db    0
LOAD:0000000000209DB3                 db    0
LOAD:0000000000209DB4                 db    0
LOAD:0000000000209DB5                 db    0
LOAD:0000000000209DB6                 db    0
LOAD:0000000000209DB7                 db    0
LOAD:0000000000209DB8                 db    0
LOAD:0000000000209DB9                 db    0
LOAD:0000000000209DBA                 db    0
LOAD:0000000000209DBB                 db    0
LOAD:0000000000209DBC                 db    0
LOAD:0000000000209DBD                 db    0
LOAD:0000000000209DBE                 db    0
LOAD:0000000000209DBF                 db    0
LOAD:0000000000209DC0                 db    0
LOAD:0000000000209DC1                 db    0
LOAD:0000000000209DC2                 db    0
LOAD:0000000000209DC3                 db    0
LOAD:0000000000209DC4                 db    0
LOAD:0000000000209DC5                 db    0
LOAD:0000000000209DC6                 db    0
LOAD:0000000000209DC7                 db    0
LOAD:0000000000209DC7 LOAD            ends
LOAD:0000000000209DC7
.got:0000000000209DC8 ; ===========================================================================
.got:0000000000209DC8
.got:0000000000209DC8 ; Segment type: Pure data
.got:0000000000209DC8 ; Segment permissions: Read/Write
.got:0000000000209DC8 _got            segment qword public 'DATA' use64
.got:0000000000209DC8                 assume cs:_got
.got:0000000000209DC8                 ;org 209DC8h
.got:0000000000209DC8 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:0000000000209DD0 qword_209DD0    dq 0                    ; DATA XREF: sub_1870↑r
.got:0000000000209DD8 qword_209DD8    dq 0                    ; DATA XREF: sub_1870+6↑r
.got:0000000000209DE0 getenv_ptr      dq offset getenv        ; DATA XREF: _getenv↑r
.got:0000000000209DE8 sigprocmask_ptr dq offset sigprocmask   ; DATA XREF: _sigprocmask↑r
.got:0000000000209DF0 free_ptr        dq offset free          ; DATA XREF: _free↑r
.got:0000000000209DF8 abort_ptr       dq offset abort         ; DATA XREF: _abort↑r
.got:0000000000209E00 __errno_location_ptr dq offset __errno_location
.got:0000000000209E00                                         ; DATA XREF: ___errno_location↑r
.got:0000000000209E08 strncmp_ptr     dq offset strncmp       ; DATA XREF: _strncmp↑r
.got:0000000000209E10 _exit_ptr       dq offset _exit         ; DATA XREF: __exit↑r
.got:0000000000209E18 strcpy_ptr      dq offset strcpy        ; DATA XREF: _strcpy↑r
.got:0000000000209E20 __fpending_ptr  dq offset __fpending    ; DATA XREF: ___fpending↑r
.got:0000000000209E28 sigaction_ptr   dq offset sigaction     ; DATA XREF: _sigaction↑r
.got:0000000000209E30 textdomain_ptr  dq offset textdomain    ; DATA XREF: _textdomain↑r
.got:0000000000209E38 fclose_ptr      dq offset fclose        ; DATA XREF: _fclose↑r
.got:0000000000209E40 bindtextdomain_ptr dq offset bindtextdomain
.got:0000000000209E40                                         ; DATA XREF: _bindtextdomain↑r
.got:0000000000209E48 stpcpy_ptr      dq offset stpcpy        ; DATA XREF: _stpcpy↑r
.got:0000000000209E50 dcgettext_ptr   dq offset dcgettext     ; DATA XREF: _dcgettext↑r
.got:0000000000209E58 __ctype_get_mb_cur_max_ptr dq offset __ctype_get_mb_cur_max
.got:0000000000209E58                                         ; DATA XREF: ___ctype_get_mb_cur_max↑r
.got:0000000000209E60 strlen_ptr      dq offset strlen        ; DATA XREF: _strlen↑r
.got:0000000000209E68 chdir_ptr       dq offset chdir         ; DATA XREF: _chdir↑r
.got:0000000000209E70 __stack_chk_fail_ptr dq offset __stack_chk_fail
.got:0000000000209E70                                         ; DATA XREF: ___stack_chk_fail↑r
.got:0000000000209E78 getopt_long_ptr dq offset getopt_long   ; DATA XREF: _getopt_long↑r
.got:0000000000209E80 mbrtowc_ptr     dq offset mbrtowc       ; DATA XREF: _mbrtowc↑r
.got:0000000000209E88 strchr_ptr      dq offset strchr        ; DATA XREF: _strchr↑r
.got:0000000000209E90 strrchr_ptr     dq offset strrchr       ; DATA XREF: _strrchr↑r
.got:0000000000209E98 lseek_ptr       dq offset lseek         ; DATA XREF: _lseek↑r
.got:0000000000209EA0 __assert_fail_ptr dq offset __assert_fail
.got:0000000000209EA0                                         ; DATA XREF: ___assert_fail↑r
.got:0000000000209EA8 memset_ptr      dq offset memset        ; DATA XREF: _memset↑r
.got:0000000000209EB0 strspn_ptr      dq offset strspn        ; DATA XREF: _strspn↑r
.got:0000000000209EB8 memcmp_ptr      dq offset memcmp        ; DATA XREF: _memcmp↑r
.got:0000000000209EC0 fputs_unlocked_ptr dq offset fputs_unlocked
.got:0000000000209EC0                                         ; DATA XREF: _fputs_unlocked↑r
.got:0000000000209EC8 calloc_ptr      dq offset calloc        ; DATA XREF: _calloc↑r
.got:0000000000209ED0 putenv_ptr      dq offset putenv        ; DATA XREF: _putenv↑r
.got:0000000000209ED8 strcmp_ptr      dq offset strcmp        ; DATA XREF: _strcmp↑r
.got:0000000000209EE0 sigemptyset_ptr dq offset sigemptyset   ; DATA XREF: _sigemptyset↑r
.got:0000000000209EE8 strtol_ptr      dq offset strtol        ; DATA XREF: _strtol↑r
.got:0000000000209EF0 sigfillset_ptr  dq offset sigfillset    ; DATA XREF: _sigfillset↑r
.got:0000000000209EF8 memcpy_ptr      dq offset memcpy        ; DATA XREF: _memcpy↑r
.got:0000000000209F00 fileno_ptr      dq offset fileno        ; DATA XREF: _fileno↑r
.got:0000000000209F08 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc↑r
.got:0000000000209F10 fflush_ptr      dq offset fflush        ; DATA XREF: _fflush↑r
.got:0000000000209F18 nl_langinfo_ptr dq offset nl_langinfo   ; DATA XREF: _nl_langinfo↑r
.got:0000000000209F20 __freading_ptr  dq offset __freading    ; DATA XREF: ___freading↑r
.got:0000000000209F28 realloc_ptr     dq offset realloc       ; DATA XREF: _realloc↑r
.got:0000000000209F30 setlocale_ptr   dq offset setlocale     ; DATA XREF: _setlocale↑r
.got:0000000000209F38 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk↑r
.got:0000000000209F40 error_ptr       dq offset error         ; DATA XREF: _error↑r
.got:0000000000209F48 fseeko_ptr      dq offset fseeko        ; DATA XREF: _fseeko↑r
.got:0000000000209F50 sigdelset_ptr   dq offset sigdelset     ; DATA XREF: _sigdelset↑r
.got:0000000000209F58 strtok_ptr      dq offset strtok        ; DATA XREF: _strtok↑r
.got:0000000000209F60 unsetenv_ptr    dq offset unsetenv      ; DATA XREF: _unsetenv↑r
.got:0000000000209F68 execvp_ptr      dq offset execvp        ; DATA XREF: _execvp↑r
.got:0000000000209F70 __cxa_atexit_ptr dq offset __cxa_atexit ; DATA XREF: ___cxa_atexit↑r
.got:0000000000209F78 __libc_current_sigrtmin_ptr dq offset __libc_current_sigrtmin
.got:0000000000209F78                                         ; DATA XREF: ___libc_current_sigrtmin↑r
.got:0000000000209F80 sigismember_ptr dq offset sigismember   ; DATA XREF: _sigismember↑r
.got:0000000000209F88 exit_ptr        dq offset exit          ; DATA XREF: _exit↑r
.got:0000000000209F90 fwrite_ptr      dq offset fwrite        ; DATA XREF: _fwrite↑r
.got:0000000000209F98 __fprintf_chk_ptr dq offset __fprintf_chk
.got:0000000000209F98                                         ; DATA XREF: ___fprintf_chk↑r
.got:0000000000209FA0 __libc_current_sigrtmax_ptr dq offset __libc_current_sigrtmax
.got:0000000000209FA0                                         ; DATA XREF: ___libc_current_sigrtmax↑r
.got:0000000000209FA8 mbsinit_ptr     dq offset mbsinit       ; DATA XREF: _mbsinit↑r
.got:0000000000209FB0 iswprint_ptr    dq offset iswprint      ; DATA XREF: _iswprint↑r
.got:0000000000209FB8 sigaddset_ptr   dq offset sigaddset     ; DATA XREF: _sigaddset↑r
.got:0000000000209FC0 __ctype_b_loc_ptr dq offset __ctype_b_loc
.got:0000000000209FC0                                         ; DATA XREF: ___ctype_b_loc↑r
.got:0000000000209FC8 __sprintf_chk_ptr dq offset __sprintf_chk
.got:0000000000209FC8                                         ; DATA XREF: ___sprintf_chk↑r
.got:0000000000209FD0 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:0000000000209FD0                                         ; DATA XREF: deregister_tm_clones+17↑r
.got:0000000000209FD8 __libc_start_main_ptr dq offset __libc_start_main
.got:0000000000209FD8                                         ; DATA XREF: start+24↑r
.got:0000000000209FE0 __gmon_start___ptr dq offset __gmon_start__
.got:0000000000209FE0                                         ; DATA XREF: _init_proc+4↑r
.got:0000000000209FE8 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:0000000000209FE8                                         ; DATA XREF: register_tm_clones+28↑r
.got:0000000000209FF0 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:0000000000209FF0                                         ; DATA XREF: __cxa_finalize↑r
.got:0000000000209FF0                                         ; __do_global_dtors_aux+9↑r
.got:0000000000209FF0 _got            ends
.got:0000000000209FF0
LOAD:0000000000209FF8 ; ===========================================================================
LOAD:0000000000209FF8
LOAD:0000000000209FF8 ; Segment type: Pure data
LOAD:0000000000209FF8 ; Segment permissions: Read/Write
LOAD:0000000000209FF8 LOAD            segment byte public 'DATA' use64
LOAD:0000000000209FF8                 assume cs:LOAD
LOAD:0000000000209FF8                 ;org 209FF8h
LOAD:0000000000209FF8                 align 20h
LOAD:0000000000209FF8 LOAD            ends
LOAD:0000000000209FF8
.data:000000000020A000 ; ===========================================================================
.data:000000000020A000
.data:000000000020A000 ; Segment type: Pure data
.data:000000000020A000 ; Segment permissions: Read/Write
.data:000000000020A000 _data           segment align_32 public 'DATA' use64
.data:000000000020A000                 assume cs:_data
.data:000000000020A000                 ;org 20A000h
.data:000000000020A000                 public __data_start ; weak
.data:000000000020A000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:000000000020A000                                         ; data_start
.data:000000000020A001                 db    0
.data:000000000020A002                 db    0
.data:000000000020A003                 db    0
.data:000000000020A004                 db    0
.data:000000000020A005                 db    0
.data:000000000020A006                 db    0
.data:000000000020A007                 db    0
.data:000000000020A008                 public __dso_handle
.data:000000000020A008 ; void *_dso_handle
.data:000000000020A008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+17↑r
.data:000000000020A008                                         ; atexit↑r ...
.data:000000000020A010                 public Version
.data:000000000020A010 Version         dq offset a831          ; DATA XREF: main+3A9↑r
.data:000000000020A010                                         ; "8.31"
.data:000000000020A018                 public exit_failure
.data:000000000020A018 ; int exit_failure
.data:000000000020A018 exit_failure    dd 1                    ; DATA XREF: main+6A↑w
.data:000000000020A018                                         ; parse_signal_action_params:loc_3A37↑r ...
.data:000000000020A01C                 align 20h
.data:000000000020A020                 public quote_quoting_options
.data:000000000020A020 quote_quoting_options db    8           ; DATA XREF: quote_n_mem↑o
.data:000000000020A020                                         ; quote_mem↑o ...
.data:000000000020A021                 db    0
.data:000000000020A022                 db    0
.data:000000000020A023                 db    0
.data:000000000020A024                 db    0
.data:000000000020A025                 db    0
.data:000000000020A026                 db    0
.data:000000000020A027                 db    0
.data:000000000020A028                 db    0
.data:000000000020A029                 db    0
.data:000000000020A02A                 db    0
.data:000000000020A02B                 db    0
.data:000000000020A02C                 db    0
.data:000000000020A02D                 db    0
.data:000000000020A02E                 db    0
.data:000000000020A02F                 db    0
.data:000000000020A030                 db    0
.data:000000000020A031                 db    0
.data:000000000020A032                 db    0
.data:000000000020A033                 db    0
.data:000000000020A034                 db    0
.data:000000000020A035                 db    0
.data:000000000020A036                 db    0
.data:000000000020A037                 db    0
.data:000000000020A038                 db    0
.data:000000000020A039                 db    0
.data:000000000020A03A                 db    0
.data:000000000020A03B                 db    0
.data:000000000020A03C                 db    0
.data:000000000020A03D                 db    0
.data:000000000020A03E                 db    0
.data:000000000020A03F                 db    0
.data:000000000020A040                 db    0
.data:000000000020A041                 db    0
.data:000000000020A042                 db    0
.data:000000000020A043                 db    0
.data:000000000020A044                 db    0
.data:000000000020A045                 db    0
.data:000000000020A046                 db    0
.data:000000000020A047                 db    0
.data:000000000020A048                 db    0
.data:000000000020A049                 db    0
.data:000000000020A04A                 db    0
.data:000000000020A04B                 db    0
.data:000000000020A04C                 db    0
.data:000000000020A04D                 db    0
.data:000000000020A04E                 db    0
.data:000000000020A04F                 db    0
.data:000000000020A050                 db    0
.data:000000000020A051                 db    0
.data:000000000020A052                 db    0
.data:000000000020A053                 db    0
.data:000000000020A054                 db    0
.data:000000000020A055                 db    0
.data:000000000020A056                 db    0
.data:000000000020A057                 db    0
.data:000000000020A058 nslots          dd 1                    ; DATA XREF: quotearg_n_options+3A↑r
.data:000000000020A058                                         ; quotearg_n_options:loc_53CD↑r ...
.data:000000000020A05C                 align 20h
.data:000000000020A060 ; void *slotvec
.data:000000000020A060 slotvec         dq offset slotvec0      ; DATA XREF: quotearg_n_options+29↑r
.data:000000000020A060                                         ; quotearg_n_options+76↑w ...
.data:000000000020A068                 align 10h
.data:000000000020A070 slotvec0        dq offset qword_100     ; DATA XREF: quotearg_n_options+54↑o
.data:000000000020A070                                         ; quotearg_n_options+187↑r ...
.data:000000000020A078 off_20A078      dq offset slot0         ; DATA XREF: quotearg_free+62↑w
.data:000000000020A080 numname_table   db    1                 ; DATA XREF: str2sig+5F↑o
.data:000000000020A080                                         ; sig2str+1↑o
.data:000000000020A081                 db    0
.data:000000000020A082                 db    0
.data:000000000020A083                 db    0
.data:000000000020A084 ; char nptr[4]
.data:000000000020A084 nptr            db 'HUP',0              ; DATA XREF: str2sig+E↑o
.data:000000000020A088                 db    0
.data:000000000020A089                 db    0
.data:000000000020A08A                 db    0
.data:000000000020A08B                 db    0
.data:000000000020A08C                 db    2
.data:000000000020A08D                 db    0
.data:000000000020A08E                 db    0
.data:000000000020A08F                 db    0
.data:000000000020A090                 db  49h ; I
.data:000000000020A091                 db  4Eh ; N
.data:000000000020A092                 db  54h ; T
.data:000000000020A093                 db    0
.data:000000000020A094                 db    0
.data:000000000020A095                 db    0
.data:000000000020A096                 db    0
.data:000000000020A097                 db    0
.data:000000000020A098                 db    3
.data:000000000020A099                 db    0
.data:000000000020A09A                 db    0
.data:000000000020A09B                 db    0
.data:000000000020A09C                 db  51h ; Q
.data:000000000020A09D                 db  55h ; U
.data:000000000020A09E                 db  49h ; I
.data:000000000020A09F                 db  54h ; T
.data:000000000020A0A0                 db    0
.data:000000000020A0A1                 db    0
.data:000000000020A0A2                 db    0
.data:000000000020A0A3                 db    0
.data:000000000020A0A4                 db    4
.data:000000000020A0A5                 db    0
.data:000000000020A0A6                 db    0
.data:000000000020A0A7                 db    0
.data:000000000020A0A8                 db  49h ; I
.data:000000000020A0A9                 db  4Ch ; L
.data:000000000020A0AA                 db  4Ch ; L
.data:000000000020A0AB                 db    0
.data:000000000020A0AC                 db    0
.data:000000000020A0AD                 db    0
.data:000000000020A0AE                 db    0
.data:000000000020A0AF                 db    0
.data:000000000020A0B0                 db    5
.data:000000000020A0B1                 db    0
.data:000000000020A0B2                 db    0
.data:000000000020A0B3                 db    0
.data:000000000020A0B4                 db  54h ; T
.data:000000000020A0B5                 db  52h ; R
.data:000000000020A0B6                 db  41h ; A
.data:000000000020A0B7                 db  50h ; P
.data:000000000020A0B8                 db    0
.data:000000000020A0B9                 db    0
.data:000000000020A0BA                 db    0
.data:000000000020A0BB                 db    0
.data:000000000020A0BC                 db    6
.data:000000000020A0BD                 db    0
.data:000000000020A0BE                 db    0
.data:000000000020A0BF                 db    0
.data:000000000020A0C0                 db  41h ; A
.data:000000000020A0C1                 db  42h ; B
.data:000000000020A0C2                 db  52h ; R
.data:000000000020A0C3                 db  54h ; T
.data:000000000020A0C4                 db    0
.data:000000000020A0C5                 db    0
.data:000000000020A0C6                 db    0
.data:000000000020A0C7                 db    0
.data:000000000020A0C8                 db    8
.data:000000000020A0C9                 db    0
.data:000000000020A0CA                 db    0
.data:000000000020A0CB                 db    0
.data:000000000020A0CC                 db  46h ; F
.data:000000000020A0CD                 db  50h ; P
.data:000000000020A0CE                 db  45h ; E
.data:000000000020A0CF                 db    0
.data:000000000020A0D0                 db    0
.data:000000000020A0D1                 db    0
.data:000000000020A0D2                 db    0
.data:000000000020A0D3                 db    0
.data:000000000020A0D4                 db    9
.data:000000000020A0D5                 db    0
.data:000000000020A0D6                 db    0
.data:000000000020A0D7                 db    0
.data:000000000020A0D8                 db  4Bh ; K
.data:000000000020A0D9                 db  49h ; I
.data:000000000020A0DA                 db  4Ch ; L
.data:000000000020A0DB                 db  4Ch ; L
.data:000000000020A0DC                 db    0
.data:000000000020A0DD                 db    0
.data:000000000020A0DE                 db    0
.data:000000000020A0DF                 db    0
.data:000000000020A0E0                 db  0Bh
.data:000000000020A0E1                 db    0
.data:000000000020A0E2                 db    0
.data:000000000020A0E3                 db    0
.data:000000000020A0E4                 db  53h ; S
.data:000000000020A0E5                 db  45h ; E
.data:000000000020A0E6                 db  47h ; G
.data:000000000020A0E7                 db  56h ; V
.data:000000000020A0E8                 db    0
.data:000000000020A0E9                 db    0
.data:000000000020A0EA                 db    0
.data:000000000020A0EB                 db    0
.data:000000000020A0EC                 db    7
.data:000000000020A0ED                 db    0
.data:000000000020A0EE                 db    0
.data:000000000020A0EF                 db    0
.data:000000000020A0F0                 db  42h ; B
.data:000000000020A0F1                 db  55h ; U
.data:000000000020A0F2                 db  53h ; S
.data:000000000020A0F3                 db    0
.data:000000000020A0F4                 db    0
.data:000000000020A0F5                 db    0
.data:000000000020A0F6                 db    0
.data:000000000020A0F7                 db    0
.data:000000000020A0F8                 db  0Dh
.data:000000000020A0F9                 db    0
.data:000000000020A0FA                 db    0
.data:000000000020A0FB                 db    0
.data:000000000020A0FC                 db  50h ; P
.data:000000000020A0FD                 db  49h ; I
.data:000000000020A0FE                 db  50h ; P
.data:000000000020A0FF                 db  45h ; E
.data:000000000020A100                 db    0
.data:000000000020A101                 db    0
.data:000000000020A102                 db    0
.data:000000000020A103                 db    0
.data:000000000020A104                 db  0Eh
.data:000000000020A105                 db    0
.data:000000000020A106                 db    0
.data:000000000020A107                 db    0
.data:000000000020A108                 db  41h ; A
.data:000000000020A109                 db  4Ch ; L
.data:000000000020A10A                 db  52h ; R
.data:000000000020A10B                 db  4Dh ; M
.data:000000000020A10C                 db    0
.data:000000000020A10D                 db    0
.data:000000000020A10E                 db    0
.data:000000000020A10F                 db    0
.data:000000000020A110                 db  0Fh
.data:000000000020A111                 db    0
.data:000000000020A112                 db    0
.data:000000000020A113                 db    0
.data:000000000020A114                 db  54h ; T
.data:000000000020A115                 db  45h ; E
.data:000000000020A116                 db  52h ; R
.data:000000000020A117                 db  4Dh ; M
.data:000000000020A118                 db    0
.data:000000000020A119                 db    0
.data:000000000020A11A                 db    0
.data:000000000020A11B                 db    0
.data:000000000020A11C                 db  0Ah
.data:000000000020A11D                 db    0
.data:000000000020A11E                 db    0
.data:000000000020A11F                 db    0
.data:000000000020A120                 db  55h ; U
.data:000000000020A121                 db  53h ; S
.data:000000000020A122                 db  52h ; R
.data:000000000020A123                 db  31h ; 1
.data:000000000020A124                 db    0
.data:000000000020A125                 db    0
.data:000000000020A126                 db    0
.data:000000000020A127                 db    0
.data:000000000020A128                 db  0Ch
.data:000000000020A129                 db    0
.data:000000000020A12A                 db    0
.data:000000000020A12B                 db    0
.data:000000000020A12C                 db  55h ; U
.data:000000000020A12D                 db  53h ; S
.data:000000000020A12E                 db  52h ; R
.data:000000000020A12F                 db  32h ; 2
.data:000000000020A130                 db    0
.data:000000000020A131                 db    0
.data:000000000020A132                 db    0
.data:000000000020A133                 db    0
.data:000000000020A134                 db  11h
.data:000000000020A135                 db    0
.data:000000000020A136                 db    0
.data:000000000020A137                 db    0
.data:000000000020A138                 db  43h ; C
.data:000000000020A139                 db  48h ; H
.data:000000000020A13A                 db  4Ch ; L
.data:000000000020A13B                 db  44h ; D
.data:000000000020A13C                 db    0
.data:000000000020A13D                 db    0
.data:000000000020A13E                 db    0
.data:000000000020A13F                 db    0
.data:000000000020A140                 db  17h
.data:000000000020A141                 db    0
.data:000000000020A142                 db    0
.data:000000000020A143                 db    0
.data:000000000020A144                 db  55h ; U
.data:000000000020A145                 db  52h ; R
.data:000000000020A146                 db  47h ; G
.data:000000000020A147                 db    0
.data:000000000020A148                 db    0
.data:000000000020A149                 db    0
.data:000000000020A14A                 db    0
.data:000000000020A14B                 db    0
.data:000000000020A14C                 db  13h
.data:000000000020A14D                 db    0
.data:000000000020A14E                 db    0
.data:000000000020A14F                 db    0
.data:000000000020A150                 db  53h ; S
.data:000000000020A151                 db  54h ; T
.data:000000000020A152                 db  4Fh ; O
.data:000000000020A153                 db  50h ; P
.data:000000000020A154                 db    0
.data:000000000020A155                 db    0
.data:000000000020A156                 db    0
.data:000000000020A157                 db    0
.data:000000000020A158                 db  14h
.data:000000000020A159                 db    0
.data:000000000020A15A                 db    0
.data:000000000020A15B                 db    0
.data:000000000020A15C                 db  54h ; T
.data:000000000020A15D                 db  53h ; S
.data:000000000020A15E                 db  54h ; T
.data:000000000020A15F                 db  50h ; P
.data:000000000020A160                 db    0
.data:000000000020A161                 db    0
.data:000000000020A162                 db    0
.data:000000000020A163                 db    0
.data:000000000020A164                 db  12h
.data:000000000020A165                 db    0
.data:000000000020A166                 db    0
.data:000000000020A167                 db    0
.data:000000000020A168                 db  43h ; C
.data:000000000020A169                 db  4Fh ; O
.data:000000000020A16A                 db  4Eh ; N
.data:000000000020A16B                 db  54h ; T
.data:000000000020A16C                 db    0
.data:000000000020A16D                 db    0
.data:000000000020A16E                 db    0
.data:000000000020A16F                 db    0
.data:000000000020A170                 db  15h
.data:000000000020A171                 db    0
.data:000000000020A172                 db    0
.data:000000000020A173                 db    0
.data:000000000020A174                 db  54h ; T
.data:000000000020A175                 db  54h ; T
.data:000000000020A176                 db  49h ; I
.data:000000000020A177                 db  4Eh ; N
.data:000000000020A178                 db    0
.data:000000000020A179                 db    0
.data:000000000020A17A                 db    0
.data:000000000020A17B                 db    0
.data:000000000020A17C                 db  16h
.data:000000000020A17D                 db    0
.data:000000000020A17E                 db    0
.data:000000000020A17F                 db    0
.data:000000000020A180                 db  54h ; T
.data:000000000020A181                 db  54h ; T
.data:000000000020A182                 db  4Fh ; O
.data:000000000020A183                 db  55h ; U
.data:000000000020A184                 db    0
.data:000000000020A185                 db    0
.data:000000000020A186                 db    0
.data:000000000020A187                 db    0
.data:000000000020A188                 db  1Fh
.data:000000000020A189                 db    0
.data:000000000020A18A                 db    0
.data:000000000020A18B                 db    0
.data:000000000020A18C                 db  53h ; S
.data:000000000020A18D                 db  59h ; Y
.data:000000000020A18E                 db  53h ; S
.data:000000000020A18F                 db    0
.data:000000000020A190                 db    0
.data:000000000020A191                 db    0
.data:000000000020A192                 db    0
.data:000000000020A193                 db    0
.data:000000000020A194                 db  1Dh
.data:000000000020A195                 db    0
.data:000000000020A196                 db    0
.data:000000000020A197                 db    0
.data:000000000020A198                 db  50h ; P
.data:000000000020A199                 db  4Fh ; O
.data:000000000020A19A                 db  4Ch ; L
.data:000000000020A19B                 db  4Ch ; L
.data:000000000020A19C                 db    0
.data:000000000020A19D                 db    0
.data:000000000020A19E                 db    0
.data:000000000020A19F                 db    0
.data:000000000020A1A0                 db  1Ah
.data:000000000020A1A1                 db    0
.data:000000000020A1A2                 db    0
.data:000000000020A1A3                 db    0
.data:000000000020A1A4                 db  56h ; V
.data:000000000020A1A5                 db  54h ; T
.data:000000000020A1A6                 db  41h ; A
.data:000000000020A1A7                 db  4Ch ; L
.data:000000000020A1A8                 db  52h ; R
.data:000000000020A1A9                 db  4Dh ; M
.data:000000000020A1AA                 db    0
.data:000000000020A1AB                 db    0
.data:000000000020A1AC                 db  1Bh
.data:000000000020A1AD                 db    0
.data:000000000020A1AE                 db    0
.data:000000000020A1AF                 db    0
.data:000000000020A1B0                 db  50h ; P
.data:000000000020A1B1                 db  52h ; R
.data:000000000020A1B2                 db  4Fh ; O
.data:000000000020A1B3                 db  46h ; F
.data:000000000020A1B4                 db    0
.data:000000000020A1B5                 db    0
.data:000000000020A1B6                 db    0
.data:000000000020A1B7                 db    0
.data:000000000020A1B8                 db  18h
.data:000000000020A1B9                 db    0
.data:000000000020A1BA                 db    0
.data:000000000020A1BB                 db    0
.data:000000000020A1BC                 db  58h ; X
.data:000000000020A1BD                 db  43h ; C
.data:000000000020A1BE                 db  50h ; P
.data:000000000020A1BF                 db  55h ; U
.data:000000000020A1C0                 db    0
.data:000000000020A1C1                 db    0
.data:000000000020A1C2                 db    0
.data:000000000020A1C3                 db    0
.data:000000000020A1C4                 db  19h
.data:000000000020A1C5                 db    0
.data:000000000020A1C6                 db    0
.data:000000000020A1C7                 db    0
.data:000000000020A1C8                 db  58h ; X
.data:000000000020A1C9                 db  46h ; F
.data:000000000020A1CA                 db  53h ; S
.data:000000000020A1CB                 db  5Ah ; Z
.data:000000000020A1CC                 db    0
.data:000000000020A1CD                 db    0
.data:000000000020A1CE                 db    0
.data:000000000020A1CF                 db    0
.data:000000000020A1D0                 db    6
.data:000000000020A1D1                 db    0
.data:000000000020A1D2                 db    0
.data:000000000020A1D3                 db    0
.data:000000000020A1D4                 db  49h ; I
.data:000000000020A1D5                 db  4Fh ; O
.data:000000000020A1D6                 db  54h ; T
.data:000000000020A1D7                 db    0
.data:000000000020A1D8                 db    0
.data:000000000020A1D9                 db    0
.data:000000000020A1DA                 db    0
.data:000000000020A1DB                 db    0
.data:000000000020A1DC                 db  11h
.data:000000000020A1DD                 db    0
.data:000000000020A1DE                 db    0
.data:000000000020A1DF                 db    0
.data:000000000020A1E0                 db  43h ; C
.data:000000000020A1E1                 db  4Ch ; L
.data:000000000020A1E2                 db  44h ; D
.data:000000000020A1E3                 db    0
.data:000000000020A1E4                 db    0
.data:000000000020A1E5                 db    0
.data:000000000020A1E6                 db    0
.data:000000000020A1E7                 db    0
.data:000000000020A1E8                 db  1Eh
.data:000000000020A1E9                 db    0
.data:000000000020A1EA                 db    0
.data:000000000020A1EB                 db    0
.data:000000000020A1EC                 db  50h ; P
.data:000000000020A1ED                 db  57h ; W
.data:000000000020A1EE                 db  52h ; R
.data:000000000020A1EF                 db    0
.data:000000000020A1F0                 db    0
.data:000000000020A1F1                 db    0
.data:000000000020A1F2                 db    0
.data:000000000020A1F3                 db    0
.data:000000000020A1F4                 db  1Ch
.data:000000000020A1F5                 db    0
.data:000000000020A1F6                 db    0
.data:000000000020A1F7                 db    0
.data:000000000020A1F8                 db  57h ; W
.data:000000000020A1F9                 db  49h ; I
.data:000000000020A1FA                 db  4Eh ; N
.data:000000000020A1FB                 db  43h ; C
.data:000000000020A1FC                 db  48h ; H
.data:000000000020A1FD                 db    0
.data:000000000020A1FE                 db    0
.data:000000000020A1FF                 db    0
.data:000000000020A200                 db  1Dh
.data:000000000020A201                 db    0
.data:000000000020A202                 db    0
.data:000000000020A203                 db    0
.data:000000000020A204                 db  49h ; I
.data:000000000020A205                 db  4Fh ; O
.data:000000000020A206                 db    0
.data:000000000020A207                 db    0
.data:000000000020A208                 db    0
.data:000000000020A209                 db    0
.data:000000000020A20A                 db    0
.data:000000000020A20B                 db    0
.data:000000000020A20C                 db  10h
.data:000000000020A20D                 db    0
.data:000000000020A20E                 db    0
.data:000000000020A20F                 db    0
.data:000000000020A210                 db  53h ; S
.data:000000000020A211                 db  54h ; T
.data:000000000020A212                 db  4Bh ; K
.data:000000000020A213                 db  46h ; F
.data:000000000020A214                 db  4Ch ; L
.data:000000000020A215                 db  54h ; T
.data:000000000020A216                 db    0
.data:000000000020A217                 db    0
.data:000000000020A218                 db    0
.data:000000000020A219                 db    0
.data:000000000020A21A                 db    0
.data:000000000020A21B                 db    0
.data:000000000020A21C                 db  45h ; E
.data:000000000020A21D                 db  58h ; X
.data:000000000020A21E                 db  49h ; I
.data:000000000020A21F                 db  54h ; T
.data:000000000020A220                 db    0
.data:000000000020A221                 db    0
.data:000000000020A222                 db    0
.data:000000000020A223                 db    0
.data:000000000020A223 _data           ends
.data:000000000020A223
LOAD:000000000020A224 ; ===========================================================================
LOAD:000000000020A224
LOAD:000000000020A224 ; Segment type: Pure data
LOAD:000000000020A224 ; Segment permissions: Read/Write
LOAD:000000000020A224 LOAD            segment byte public 'DATA' use64
LOAD:000000000020A224                 assume cs:LOAD
LOAD:000000000020A224                 ;org 20A224h
LOAD:000000000020A224                 public __bss_start
LOAD:000000000020A224 __bss_start     db    ? ;               ; Alternative name is '__bss_start'
LOAD:000000000020A224                                         ; _edata
LOAD:000000000020A225                 db    ? ;
LOAD:000000000020A226                 db    ? ;
LOAD:000000000020A227                 db    ? ;
LOAD:000000000020A228                 public __TMC_END__
LOAD:000000000020A228 __TMC_END__     db    ? ;               ; DATA XREF: deregister_tm_clones↑o
LOAD:000000000020A228                                         ; deregister_tm_clones+8↑o ...
LOAD:000000000020A229                 db    ? ;
LOAD:000000000020A22A                 db    ? ;
LOAD:000000000020A22B                 db    ? ;
LOAD:000000000020A22C                 db    ? ;
LOAD:000000000020A22D                 db    ? ;
LOAD:000000000020A22E                 db    ? ;
LOAD:000000000020A22F                 db    ? ;
LOAD:000000000020A230                 db    ? ;
LOAD:000000000020A231                 db    ? ;
LOAD:000000000020A232                 db    ? ;
LOAD:000000000020A233                 db    ? ;
LOAD:000000000020A234                 db    ? ;
LOAD:000000000020A235                 db    ? ;
LOAD:000000000020A236                 db    ? ;
LOAD:000000000020A237                 db    ? ;
LOAD:000000000020A238                 db    ? ;
LOAD:000000000020A239                 db    ? ;
LOAD:000000000020A23A                 db    ? ;
LOAD:000000000020A23B                 db    ? ;
LOAD:000000000020A23C                 db    ? ;
LOAD:000000000020A23D                 db    ? ;
LOAD:000000000020A23E                 db    ? ;
LOAD:000000000020A23F                 db    ? ;
LOAD:000000000020A23F LOAD            ends
LOAD:000000000020A23F
.bss:000000000020A240 ; ===========================================================================
.bss:000000000020A240
.bss:000000000020A240 ; Segment type: Uninitialized
.bss:000000000020A240 ; Segment permissions: Read/Write
.bss:000000000020A240 _bss            segment align_32 public 'BSS' use64
.bss:000000000020A240                 assume cs:_bss
.bss:000000000020A240                 ;org 20A240h
.bss:000000000020A240                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:000000000020A240                 public program_invocation_short_name@@GLIBC_2_2_5 ; weak
.bss:000000000020A240 program_invocation_short_name@@GLIBC_2_2_5 dq ?
.bss:000000000020A240                                         ; DATA XREF: LOAD:0000000000000990↑o
.bss:000000000020A240                                         ; LOAD:00000000000009F0↑o ...
.bss:000000000020A240                                         ; Alternative name is '__progname'
.bss:000000000020A240                                         ; Copy of shared data
.bss:000000000020A248                 public stdout@@GLIBC_2_2_5
.bss:000000000020A248 ; FILE *stdout
.bss:000000000020A248 stdout@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000948↑o
.bss:000000000020A248                                         ; main+3A2↑r ...
.bss:000000000020A248                                         ; Alternative name is 'stdout'
.bss:000000000020A248                                         ; Copy of shared data
.bss:000000000020A250                 public optind@@GLIBC_2_2_5
.bss:000000000020A250 optind@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:0000000000000A20↑o
.bss:000000000020A250                                         ; main+1C9↑r ...
.bss:000000000020A250                                         ; Alternative name is 'optind'
.bss:000000000020A250                                         ; Copy of shared data
.bss:000000000020A254                 align 8
.bss:000000000020A258                 public environ@@GLIBC_2_2_5 ; weak
.bss:000000000020A258 environ@@GLIBC_2_2_5 dq ?               ; DATA XREF: LOAD:0000000000000960↑o
.bss:000000000020A258                                         ; LOAD:0000000000000978↑o ...
.bss:000000000020A258                                         ; Alternative name is '__environ@@GLIBC_2.2.5'
.bss:000000000020A258                                         ; Copy of shared data
.bss:000000000020A260                 public optarg@@GLIBC_2_2_5
.bss:000000000020A260 ; void *optarg
.bss:000000000020A260 optarg@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000A38↑o
.bss:000000000020A260                                         ; main+151↑r ...
.bss:000000000020A260                                         ; Alternative name is 'optarg'
.bss:000000000020A260                                         ; Copy of shared data
.bss:000000000020A268                 public program_invocation_name@@GLIBC_2_2_5 ; weak
.bss:000000000020A268 program_invocation_name@@GLIBC_2_2_5 dq ?
.bss:000000000020A268                                         ; DATA XREF: LOAD:00000000000009A8↑o
.bss:000000000020A268                                         ; LOAD:00000000000009C0↑o ...
.bss:000000000020A268                                         ; Alternative name is '__progname_full@@GLIBC_2.2.5'
.bss:000000000020A268                                         ; Copy of shared data
.bss:000000000020A270                 align 20h
.bss:000000000020A280                 public stderr@@GLIBC_2_2_5
.bss:000000000020A280 ; FILE *stderr
.bss:000000000020A280 stderr@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000A08↑o
.bss:000000000020A280                                         ; main+541↑r ...
.bss:000000000020A280                                         ; Alternative name is 'stderr'
.bss:000000000020A280                                         ; Copy of shared data
.bss:000000000020A288 completed_7697  db ?                    ; DATA XREF: __do_global_dtors_aux↑r
.bss:000000000020A288                                         ; __do_global_dtors_aux+28↑w
.bss:000000000020A289                 align 20h
.bss:000000000020A2A0 dummy_environ_7817 db    ? ;            ; DATA XREF: main:loc_25C0↑o
.bss:000000000020A2A1                 db    ? ;
.bss:000000000020A2A2                 db    ? ;
.bss:000000000020A2A3                 db    ? ;
.bss:000000000020A2A4                 db    ? ;
.bss:000000000020A2A5                 db    ? ;
.bss:000000000020A2A6                 db    ? ;
.bss:000000000020A2A7                 db    ? ;
.bss:000000000020A2A8 report_signal_handling db ?             ; DATA XREF: main+180↑w
.bss:000000000020A2A8                                         ; main:loc_2924↑r
.bss:000000000020A2A9 sig_mask_changed db ?                   ; DATA XREF: main+C9D↑r
.bss:000000000020A2A9                                         ; parse_block_signal_params+29↑r ...
.bss:000000000020A2AA                 align 20h
.bss:000000000020A2C0 ; sigset_t unblock_signals
.bss:000000000020A2C0 unblock_signals sigset_t <?>            ; DATA XREF: main+1104↑o
.bss:000000000020A2C0                                         ; parse_block_signal_params+72↑o ...
.bss:000000000020A340 ; sigset_t block_signals
.bss:000000000020A340 block_signals   sigset_t <?>            ; DATA XREF: main+10B4↑o
.bss:000000000020A340                                         ; parse_block_signal_params+6B↑o ...
.bss:000000000020A3C0 signals         dq ?                    ; DATA XREF: main+8A↑w
.bss:000000000020A3C0                                         ; main:loc_27EA↑r ...
.bss:000000000020A3C8 vnlen           dq ?                    ; DATA XREF: extract_varname+84↑r
.bss:000000000020A3C8                                         ; extract_varname+EC↑w
.bss:000000000020A3D0 ; void *varname
.bss:000000000020A3D0 varname         dq ?                    ; DATA XREF: extract_varname+76↑r
.bss:000000000020A3D0                                         ; extract_varname+100↑w
.bss:000000000020A3D8 dev_debug       db ?                    ; DATA XREF: main:loc_1FA0↑w
.bss:000000000020A3D8                                         ; main:loc_217E↑r ...
.bss:000000000020A3D9                 align 20h
.bss:000000000020A3E0 usvars_used     dq ?                    ; DATA XREF: main:loc_1FB0↑r
.bss:000000000020A3E0                                         ; main+362↑w ...
.bss:000000000020A3E8 usvars_alloc    dq ?                    ; DATA XREF: main+347↑r
.bss:000000000020A3E8                                         ; main+AA0↑w
.bss:000000000020A3F0 usvars          dq ?                    ; DATA XREF: main+369↑r
.bss:000000000020A3F0                                         ; main:loc_26DA↑r ...
.bss:000000000020A3F8 ignore_EPIPE    db ?                    ; DATA XREF: close_stdout_set_ignore_EPIPE↑w
.bss:000000000020A3F8                                         ; close_stdout+1B↑r
.bss:000000000020A3F9                 align 20h
.bss:000000000020A400 file_name       dq ?                    ; DATA XREF: close_stdout_set_file_name↑w
.bss:000000000020A400                                         ; close_stdout+56↑r
.bss:000000000020A408                 public program_name
.bss:000000000020A408 program_name    dq ?                    ; DATA XREF: usage+14↑r
.bss:000000000020A408                                         ; set_program_name:loc_3FED↑w
.bss:000000000020A410                 align 20h
.bss:000000000020A420 slot0           db    ? ;               ; DATA XREF: quotearg_n_options+FE↑o
.bss:000000000020A420                                         ; quotearg_free+46↑o ...
.bss:000000000020A421                 db    ? ;
.bss:000000000020A422                 db    ? ;
.bss:000000000020A423                 db    ? ;
.bss:000000000020A424                 db    ? ;
.bss:000000000020A425                 db    ? ;
.bss:000000000020A426                 db    ? ;
.bss:000000000020A427                 db    ? ;
.bss:000000000020A428                 db    ? ;
.bss:000000000020A429                 db    ? ;
.bss:000000000020A42A                 db    ? ;
.bss:000000000020A42B                 db    ? ;
.bss:000000000020A42C                 db    ? ;
.bss:000000000020A42D                 db    ? ;
.bss:000000000020A42E                 db    ? ;
.bss:000000000020A42F                 db    ? ;
.bss:000000000020A430                 db    ? ;
.bss:000000000020A431                 db    ? ;
.bss:000000000020A432                 db    ? ;
.bss:000000000020A433                 db    ? ;
.bss:000000000020A434                 db    ? ;
.bss:000000000020A435                 db    ? ;
.bss:000000000020A436                 db    ? ;
.bss:000000000020A437                 db    ? ;
.bss:000000000020A438                 db    ? ;
.bss:000000000020A439                 db    ? ;
.bss:000000000020A43A                 db    ? ;
.bss:000000000020A43B                 db    ? ;
.bss:000000000020A43C                 db    ? ;
.bss:000000000020A43D                 db    ? ;
.bss:000000000020A43E                 db    ? ;
.bss:000000000020A43F                 db    ? ;
.bss:000000000020A440                 db    ? ;
.bss:000000000020A441                 db    ? ;
.bss:000000000020A442                 db    ? ;
.bss:000000000020A443                 db    ? ;
.bss:000000000020A444                 db    ? ;
.bss:000000000020A445                 db    ? ;
.bss:000000000020A446                 db    ? ;
.bss:000000000020A447                 db    ? ;
.bss:000000000020A448                 db    ? ;
.bss:000000000020A449                 db    ? ;
.bss:000000000020A44A                 db    ? ;
.bss:000000000020A44B                 db    ? ;
.bss:000000000020A44C                 db    ? ;
.bss:000000000020A44D                 db    ? ;
.bss:000000000020A44E                 db    ? ;
.bss:000000000020A44F                 db    ? ;
.bss:000000000020A450                 db    ? ;
.bss:000000000020A451                 db    ? ;
.bss:000000000020A452                 db    ? ;
.bss:000000000020A453                 db    ? ;
.bss:000000000020A454                 db    ? ;
.bss:000000000020A455                 db    ? ;
.bss:000000000020A456                 db    ? ;
.bss:000000000020A457                 db    ? ;
.bss:000000000020A458                 db    ? ;
.bss:000000000020A459                 db    ? ;
.bss:000000000020A45A                 db    ? ;
.bss:000000000020A45B                 db    ? ;
.bss:000000000020A45C                 db    ? ;
.bss:000000000020A45D                 db    ? ;
.bss:000000000020A45E                 db    ? ;
.bss:000000000020A45F                 db    ? ;
.bss:000000000020A460                 db    ? ;
.bss:000000000020A461                 db    ? ;
.bss:000000000020A462                 db    ? ;
.bss:000000000020A463                 db    ? ;
.bss:000000000020A464                 db    ? ;
.bss:000000000020A465                 db    ? ;
.bss:000000000020A466                 db    ? ;
.bss:000000000020A467                 db    ? ;
.bss:000000000020A468                 db    ? ;
.bss:000000000020A469                 db    ? ;
.bss:000000000020A46A                 db    ? ;
.bss:000000000020A46B                 db    ? ;
.bss:000000000020A46C                 db    ? ;
.bss:000000000020A46D                 db    ? ;
.bss:000000000020A46E                 db    ? ;
.bss:000000000020A46F                 db    ? ;
.bss:000000000020A470                 db    ? ;
.bss:000000000020A471                 db    ? ;
.bss:000000000020A472                 db    ? ;
.bss:000000000020A473                 db    ? ;
.bss:000000000020A474                 db    ? ;
.bss:000000000020A475                 db    ? ;
.bss:000000000020A476                 db    ? ;
.bss:000000000020A477                 db    ? ;
.bss:000000000020A478                 db    ? ;
.bss:000000000020A479                 db    ? ;
.bss:000000000020A47A                 db    ? ;
.bss:000000000020A47B                 db    ? ;
.bss:000000000020A47C                 db    ? ;
.bss:000000000020A47D                 db    ? ;
.bss:000000000020A47E                 db    ? ;
.bss:000000000020A47F                 db    ? ;
.bss:000000000020A480                 db    ? ;
.bss:000000000020A481                 db    ? ;
.bss:000000000020A482                 db    ? ;
.bss:000000000020A483                 db    ? ;
.bss:000000000020A484                 db    ? ;
.bss:000000000020A485                 db    ? ;
.bss:000000000020A486                 db    ? ;
.bss:000000000020A487                 db    ? ;
.bss:000000000020A488                 db    ? ;
.bss:000000000020A489                 db    ? ;
.bss:000000000020A48A                 db    ? ;
.bss:000000000020A48B                 db    ? ;
.bss:000000000020A48C                 db    ? ;
.bss:000000000020A48D                 db    ? ;
.bss:000000000020A48E                 db    ? ;
.bss:000000000020A48F                 db    ? ;
.bss:000000000020A490                 db    ? ;
.bss:000000000020A491                 db    ? ;
.bss:000000000020A492                 db    ? ;
.bss:000000000020A493                 db    ? ;
.bss:000000000020A494                 db    ? ;
.bss:000000000020A495                 db    ? ;
.bss:000000000020A496                 db    ? ;
.bss:000000000020A497                 db    ? ;
.bss:000000000020A498                 db    ? ;
.bss:000000000020A499                 db    ? ;
.bss:000000000020A49A                 db    ? ;
.bss:000000000020A49B                 db    ? ;
.bss:000000000020A49C                 db    ? ;
.bss:000000000020A49D                 db    ? ;
.bss:000000000020A49E                 db    ? ;
.bss:000000000020A49F                 db    ? ;
.bss:000000000020A4A0                 db    ? ;
.bss:000000000020A4A1                 db    ? ;
.bss:000000000020A4A2                 db    ? ;
.bss:000000000020A4A3                 db    ? ;
.bss:000000000020A4A4                 db    ? ;
.bss:000000000020A4A5                 db    ? ;
.bss:000000000020A4A6                 db    ? ;
.bss:000000000020A4A7                 db    ? ;
.bss:000000000020A4A8                 db    ? ;
.bss:000000000020A4A9                 db    ? ;
.bss:000000000020A4AA                 db    ? ;
.bss:000000000020A4AB                 db    ? ;
.bss:000000000020A4AC                 db    ? ;
.bss:000000000020A4AD                 db    ? ;
.bss:000000000020A4AE                 db    ? ;
.bss:000000000020A4AF                 db    ? ;
.bss:000000000020A4B0                 db    ? ;
.bss:000000000020A4B1                 db    ? ;
.bss:000000000020A4B2                 db    ? ;
.bss:000000000020A4B3                 db    ? ;
.bss:000000000020A4B4                 db    ? ;
.bss:000000000020A4B5                 db    ? ;
.bss:000000000020A4B6                 db    ? ;
.bss:000000000020A4B7                 db    ? ;
.bss:000000000020A4B8                 db    ? ;
.bss:000000000020A4B9                 db    ? ;
.bss:000000000020A4BA                 db    ? ;
.bss:000000000020A4BB                 db    ? ;
.bss:000000000020A4BC                 db    ? ;
.bss:000000000020A4BD                 db    ? ;
.bss:000000000020A4BE                 db    ? ;
.bss:000000000020A4BF                 db    ? ;
.bss:000000000020A4C0                 db    ? ;
.bss:000000000020A4C1                 db    ? ;
.bss:000000000020A4C2                 db    ? ;
.bss:000000000020A4C3                 db    ? ;
.bss:000000000020A4C4                 db    ? ;
.bss:000000000020A4C5                 db    ? ;
.bss:000000000020A4C6                 db    ? ;
.bss:000000000020A4C7                 db    ? ;
.bss:000000000020A4C8                 db    ? ;
.bss:000000000020A4C9                 db    ? ;
.bss:000000000020A4CA                 db    ? ;
.bss:000000000020A4CB                 db    ? ;
.bss:000000000020A4CC                 db    ? ;
.bss:000000000020A4CD                 db    ? ;
.bss:000000000020A4CE                 db    ? ;
.bss:000000000020A4CF                 db    ? ;
.bss:000000000020A4D0                 db    ? ;
.bss:000000000020A4D1                 db    ? ;
.bss:000000000020A4D2                 db    ? ;
.bss:000000000020A4D3                 db    ? ;
.bss:000000000020A4D4                 db    ? ;
.bss:000000000020A4D5                 db    ? ;
.bss:000000000020A4D6                 db    ? ;
.bss:000000000020A4D7                 db    ? ;
.bss:000000000020A4D8                 db    ? ;
.bss:000000000020A4D9                 db    ? ;
.bss:000000000020A4DA                 db    ? ;
.bss:000000000020A4DB                 db    ? ;
.bss:000000000020A4DC                 db    ? ;
.bss:000000000020A4DD                 db    ? ;
.bss:000000000020A4DE                 db    ? ;
.bss:000000000020A4DF                 db    ? ;
.bss:000000000020A4E0                 db    ? ;
.bss:000000000020A4E1                 db    ? ;
.bss:000000000020A4E2                 db    ? ;
.bss:000000000020A4E3                 db    ? ;
.bss:000000000020A4E4                 db    ? ;
.bss:000000000020A4E5                 db    ? ;
.bss:000000000020A4E6                 db    ? ;
.bss:000000000020A4E7                 db    ? ;
.bss:000000000020A4E8                 db    ? ;
.bss:000000000020A4E9                 db    ? ;
.bss:000000000020A4EA                 db    ? ;
.bss:000000000020A4EB                 db    ? ;
.bss:000000000020A4EC                 db    ? ;
.bss:000000000020A4ED                 db    ? ;
.bss:000000000020A4EE                 db    ? ;
.bss:000000000020A4EF                 db    ? ;
.bss:000000000020A4F0                 db    ? ;
.bss:000000000020A4F1                 db    ? ;
.bss:000000000020A4F2                 db    ? ;
.bss:000000000020A4F3                 db    ? ;
.bss:000000000020A4F4                 db    ? ;
.bss:000000000020A4F5                 db    ? ;
.bss:000000000020A4F6                 db    ? ;
.bss:000000000020A4F7                 db    ? ;
.bss:000000000020A4F8                 db    ? ;
.bss:000000000020A4F9                 db    ? ;
.bss:000000000020A4FA                 db    ? ;
.bss:000000000020A4FB                 db    ? ;
.bss:000000000020A4FC                 db    ? ;
.bss:000000000020A4FD                 db    ? ;
.bss:000000000020A4FE                 db    ? ;
.bss:000000000020A4FF                 db    ? ;
.bss:000000000020A500                 db    ? ;
.bss:000000000020A501                 db    ? ;
.bss:000000000020A502                 db    ? ;
.bss:000000000020A503                 db    ? ;
.bss:000000000020A504                 db    ? ;
.bss:000000000020A505                 db    ? ;
.bss:000000000020A506                 db    ? ;
.bss:000000000020A507                 db    ? ;
.bss:000000000020A508                 db    ? ;
.bss:000000000020A509                 db    ? ;
.bss:000000000020A50A                 db    ? ;
.bss:000000000020A50B                 db    ? ;
.bss:000000000020A50C                 db    ? ;
.bss:000000000020A50D                 db    ? ;
.bss:000000000020A50E                 db    ? ;
.bss:000000000020A50F                 db    ? ;
.bss:000000000020A510                 db    ? ;
.bss:000000000020A511                 db    ? ;
.bss:000000000020A512                 db    ? ;
.bss:000000000020A513                 db    ? ;
.bss:000000000020A514                 db    ? ;
.bss:000000000020A515                 db    ? ;
.bss:000000000020A516                 db    ? ;
.bss:000000000020A517                 db    ? ;
.bss:000000000020A518                 db    ? ;
.bss:000000000020A519                 db    ? ;
.bss:000000000020A51A                 db    ? ;
.bss:000000000020A51B                 db    ? ;
.bss:000000000020A51C                 db    ? ;
.bss:000000000020A51D                 db    ? ;
.bss:000000000020A51E                 db    ? ;
.bss:000000000020A51F                 db    ? ;
.bss:000000000020A520 default_quoting_options xmmword ?       ; DATA XREF: clone_quoting_options+12↑o
.bss:000000000020A520                                         ; get_quoting_style↑o ...
.bss:000000000020A530 xmmword_20A530  xmmword ?               ; DATA XREF: quotearg_char_mem+41↑r
.bss:000000000020A530                                         ; quotearg_n_custom_mem+39↑r
.bss:000000000020A540 xmmword_20A540  xmmword ?               ; DATA XREF: quotearg_char_mem+4E↑r
.bss:000000000020A540                                         ; quotearg_n_custom_mem+46↑r
.bss:000000000020A550 qword_20A550    dq ?                    ; DATA XREF: quotearg_char_mem+16↑r
.bss:000000000020A550                                         ; quotearg_n_custom_mem+7↑r
.bss:000000000020A550 _bss            ends
.bss:000000000020A550
.prgend:000000000020A558 ; ===========================================================================
.prgend:000000000020A558
.prgend:000000000020A558 ; Segment type: Zero-length
.prgend:000000000020A558 _prgend         segment byte public '' use64
.prgend:000000000020A558 _end            label byte
.prgend:000000000020A558 _prgend         ends
.prgend:000000000020A558
extern:000000000020A560 ; ===========================================================================
extern:000000000020A560
extern:000000000020A560 ; Segment type: Externs
extern:000000000020A560 ; extern
extern:000000000020A560 ; char *getenv(const char *name)
extern:000000000020A560                 extrn getenv:near       ; CODE XREF: _getenv↑j
extern:000000000020A560                                         ; DATA XREF: .got:getenv_ptr↑o
extern:000000000020A568 ; int sigprocmask(int how, const sigset_t *set, sigset_t *oset)
extern:000000000020A568                 extrn sigprocmask:near  ; CODE XREF: _sigprocmask↑j
extern:000000000020A568                                         ; DATA XREF: .got:sigprocmask_ptr↑o
extern:000000000020A570 ; void free(void *ptr)
extern:000000000020A570                 extrn free:near         ; CODE XREF: _free↑j
extern:000000000020A570                                         ; DATA XREF: .got:free_ptr↑o
extern:000000000020A578 ; void __noreturn abort(void)
extern:000000000020A578                 extrn abort:near        ; CODE XREF: _abort↑j
extern:000000000020A578                                         ; DATA XREF: .got:abort_ptr↑o
extern:000000000020A580 ; int *_errno_location(void)
extern:000000000020A580                 extrn __errno_location:near
extern:000000000020A580                                         ; CODE XREF: ___errno_location↑j
extern:000000000020A580                                         ; DATA XREF: .got:__errno_location_ptr↑o
extern:000000000020A588 ; int strncmp(const char *s1, const char *s2, size_t n)
extern:000000000020A588                 extrn strncmp:near      ; CODE XREF: _strncmp↑j
extern:000000000020A588                                         ; DATA XREF: .got:strncmp_ptr↑o
extern:000000000020A590 ; void __noreturn exit(int status)
extern:000000000020A590                 extrn _exit:near        ; CODE XREF: __exit↑j
extern:000000000020A590                                         ; DATA XREF: .got:_exit_ptr↑o
extern:000000000020A598 ; char *strcpy(char *dest, const char *src)
extern:000000000020A598                 extrn strcpy:near       ; CODE XREF: _strcpy↑j
extern:000000000020A598                                         ; DATA XREF: .got:strcpy_ptr↑o
extern:000000000020A5A0 ; size_t _fpending(FILE *fp)
extern:000000000020A5A0                 extrn __fpending:near   ; CODE XREF: ___fpending↑j
extern:000000000020A5A0                                         ; DATA XREF: .got:__fpending_ptr↑o
extern:000000000020A5A8 ; int sigaction(int sig, const struct sigaction *act, struct sigaction *oact)
extern:000000000020A5A8                 extrn sigaction:near    ; CODE XREF: _sigaction↑j
extern:000000000020A5A8                                         ; DATA XREF: .got:sigaction_ptr↑o
extern:000000000020A5B0 ; char *textdomain(const char *domainname)
extern:000000000020A5B0                 extrn textdomain:near   ; CODE XREF: _textdomain↑j
extern:000000000020A5B0                                         ; DATA XREF: .got:textdomain_ptr↑o
extern:000000000020A5B8 ; int fclose(FILE *stream)
extern:000000000020A5B8                 extrn fclose:near       ; CODE XREF: _fclose↑j
extern:000000000020A5B8                                         ; DATA XREF: .got:fclose_ptr↑o
extern:000000000020A5C0 ; char *bindtextdomain(const char *domainname, const char *dirname)
extern:000000000020A5C0                 extrn bindtextdomain:near
extern:000000000020A5C0                                         ; CODE XREF: _bindtextdomain↑j
extern:000000000020A5C0                                         ; DATA XREF: .got:bindtextdomain_ptr↑o
extern:000000000020A5C8 ; char *stpcpy(char *dest, const char *src)
extern:000000000020A5C8                 extrn stpcpy:near       ; CODE XREF: _stpcpy↑j
extern:000000000020A5C8                                         ; DATA XREF: .got:stpcpy_ptr↑o
extern:000000000020A5D0 ; char *dcgettext(const char *domainname, const char *msgid, int category)
extern:000000000020A5D0                 extrn dcgettext:near    ; CODE XREF: _dcgettext↑j
extern:000000000020A5D0                                         ; DATA XREF: .got:dcgettext_ptr↑o
extern:000000000020A5D8 ; size_t _ctype_get_mb_cur_max(void)
extern:000000000020A5D8                 extrn __ctype_get_mb_cur_max:near
extern:000000000020A5D8                                         ; CODE XREF: ___ctype_get_mb_cur_max↑j
extern:000000000020A5D8                                         ; DATA XREF: .got:__ctype_get_mb_cur_max_ptr↑o
extern:000000000020A5E0 ; size_t strlen(const char *s)
extern:000000000020A5E0                 extrn strlen:near       ; CODE XREF: _strlen↑j
extern:000000000020A5E0                                         ; DATA XREF: .got:strlen_ptr↑o
extern:000000000020A5E8 ; int chdir(const char *path)
extern:000000000020A5E8                 extrn chdir:near        ; CODE XREF: _chdir↑j
extern:000000000020A5E8                                         ; DATA XREF: .got:chdir_ptr↑o
extern:000000000020A5F0                 extrn __stack_chk_fail:near
extern:000000000020A5F0                                         ; CODE XREF: ___stack_chk_fail↑j
extern:000000000020A5F0                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:000000000020A5F8 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
extern:000000000020A5F8                 extrn getopt_long:near  ; CODE XREF: _getopt_long↑j
extern:000000000020A5F8                                         ; DATA XREF: .got:getopt_long_ptr↑o
extern:000000000020A600 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
extern:000000000020A600                 extrn mbrtowc:near      ; CODE XREF: _mbrtowc↑j
extern:000000000020A600                                         ; DATA XREF: .got:mbrtowc_ptr↑o
extern:000000000020A608 ; char *strchr(const char *s, int c)
extern:000000000020A608                 extrn strchr:near       ; CODE XREF: _strchr↑j
extern:000000000020A608                                         ; DATA XREF: .got:strchr_ptr↑o
extern:000000000020A610 ; char *strrchr(const char *s, int c)
extern:000000000020A610                 extrn strrchr:near      ; CODE XREF: _strrchr↑j
extern:000000000020A610                                         ; DATA XREF: .got:strrchr_ptr↑o
extern:000000000020A618 ; __off_t lseek(int fd, __off_t offset, int whence)
extern:000000000020A618                 extrn lseek:near        ; CODE XREF: _lseek↑j
extern:000000000020A618                                         ; DATA XREF: .got:lseek_ptr↑o
extern:000000000020A620 ; void __noreturn _assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
extern:000000000020A620                 extrn __assert_fail:near
extern:000000000020A620                                         ; CODE XREF: ___assert_fail↑j
extern:000000000020A620                                         ; DATA XREF: .got:__assert_fail_ptr↑o
extern:000000000020A628 ; void *memset(void *s, int c, size_t n)
extern:000000000020A628                 extrn memset:near       ; CODE XREF: _memset↑j
extern:000000000020A628                                         ; DATA XREF: .got:memset_ptr↑o
extern:000000000020A630 ; size_t strspn(const char *s, const char *accept)
extern:000000000020A630                 extrn strspn:near       ; CODE XREF: _strspn↑j
extern:000000000020A630                                         ; DATA XREF: .got:strspn_ptr↑o
extern:000000000020A638 ; int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:000000000020A638                 extrn __libc_start_main:near
extern:000000000020A638                                         ; CODE XREF: start+24↑p
extern:000000000020A638                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:000000000020A640 ; int memcmp(const void *s1, const void *s2, size_t n)
extern:000000000020A640                 extrn memcmp:near       ; CODE XREF: _memcmp↑j
extern:000000000020A640                                         ; DATA XREF: .got:memcmp_ptr↑o
extern:000000000020A648 ; int fputs_unlocked(const char *s, FILE *stream)
extern:000000000020A648                 extrn fputs_unlocked:near
extern:000000000020A648                                         ; CODE XREF: _fputs_unlocked↑j
extern:000000000020A648                                         ; DATA XREF: .got:fputs_unlocked_ptr↑o
extern:000000000020A650 ; void *calloc(size_t nmemb, size_t size)
extern:000000000020A650                 extrn calloc:near       ; CODE XREF: _calloc↑j
extern:000000000020A650                                         ; DATA XREF: .got:calloc_ptr↑o
extern:000000000020A658 ; int putenv(char *string)
extern:000000000020A658                 extrn putenv:near       ; CODE XREF: _putenv↑j
extern:000000000020A658                                         ; DATA XREF: .got:putenv_ptr↑o
extern:000000000020A660 ; int strcmp(const char *s1, const char *s2)
extern:000000000020A660                 extrn strcmp:near       ; CODE XREF: _strcmp↑j
extern:000000000020A660                                         ; DATA XREF: .got:strcmp_ptr↑o
extern:000000000020A668 ; int sigemptyset(sigset_t *set)
extern:000000000020A668                 extrn sigemptyset:near  ; CODE XREF: _sigemptyset↑j
extern:000000000020A668                                         ; DATA XREF: .got:sigemptyset_ptr↑o
extern:000000000020A670 ; __int64 strtol(const char *nptr, char **endptr, int base)
extern:000000000020A670                 extrn strtol:near       ; CODE XREF: _strtol↑j
extern:000000000020A670                                         ; DATA XREF: .got:strtol_ptr↑o
extern:000000000020A678 ; int sigfillset(sigset_t *set)
extern:000000000020A678                 extrn sigfillset:near   ; CODE XREF: _sigfillset↑j
extern:000000000020A678                                         ; DATA XREF: .got:sigfillset_ptr↑o
extern:000000000020A680 ; void *memcpy(void *dest, const void *src, size_t n)
extern:000000000020A680                 extrn memcpy:near       ; CODE XREF: _memcpy↑j
extern:000000000020A680                                         ; DATA XREF: .got:memcpy_ptr↑o
extern:000000000020A688 ; int fileno(FILE *stream)
extern:000000000020A688                 extrn fileno:near       ; CODE XREF: _fileno↑j
extern:000000000020A688                                         ; DATA XREF: .got:fileno_ptr↑o
extern:000000000020A690 ; void *malloc(size_t size)
extern:000000000020A690                 extrn malloc:near       ; CODE XREF: _malloc↑j
extern:000000000020A690                                         ; DATA XREF: .got:malloc_ptr↑o
extern:000000000020A698 ; int fflush(FILE *stream)
extern:000000000020A698                 extrn fflush:near       ; CODE XREF: _fflush↑j
extern:000000000020A698                                         ; DATA XREF: .got:fflush_ptr↑o
extern:000000000020A6A0 ; char *nl_langinfo(nl_item item)
extern:000000000020A6A0                 extrn nl_langinfo:near  ; CODE XREF: _nl_langinfo↑j
extern:000000000020A6A0                                         ; DATA XREF: .got:nl_langinfo_ptr↑o
extern:000000000020A6A8 ; int _freading(FILE *fp)
extern:000000000020A6A8                 extrn __freading:near   ; CODE XREF: ___freading↑j
extern:000000000020A6A8                                         ; DATA XREF: .got:__freading_ptr↑o
extern:000000000020A6B0 ; void *realloc(void *ptr, size_t size)
extern:000000000020A6B0                 extrn realloc:near      ; CODE XREF: _realloc↑j
extern:000000000020A6B0                                         ; DATA XREF: .got:realloc_ptr↑o
extern:000000000020A6B8 ; char *setlocale(int category, const char *locale)
extern:000000000020A6B8                 extrn setlocale:near    ; CODE XREF: _setlocale↑j
extern:000000000020A6B8                                         ; DATA XREF: .got:setlocale_ptr↑o
extern:000000000020A6C0                 extrn __printf_chk:near ; CODE XREF: ___printf_chk↑j
extern:000000000020A6C0                                         ; DATA XREF: .got:__printf_chk_ptr↑o
extern:000000000020A6C8 ; void error(int status, int errnum, const char *format, ...)
extern:000000000020A6C8                 extrn error:near        ; CODE XREF: _error↑j
extern:000000000020A6C8                                         ; DATA XREF: .got:error_ptr↑o
extern:000000000020A6D0 ; int fseeko(FILE *stream, __off_t off, int whence)
extern:000000000020A6D0                 extrn fseeko:near       ; CODE XREF: _fseeko↑j
extern:000000000020A6D0                                         ; DATA XREF: .got:fseeko_ptr↑o
extern:000000000020A6D8 ; int sigdelset(sigset_t *set, int signo)
extern:000000000020A6D8                 extrn sigdelset:near    ; CODE XREF: _sigdelset↑j
extern:000000000020A6D8                                         ; DATA XREF: .got:sigdelset_ptr↑o
extern:000000000020A6E0 ; char *strtok(char *s, const char *delim)
extern:000000000020A6E0                 extrn strtok:near       ; CODE XREF: _strtok↑j
extern:000000000020A6E0                                         ; DATA XREF: .got:strtok_ptr↑o
extern:000000000020A6E8 ; int unsetenv(const char *name)
extern:000000000020A6E8                 extrn unsetenv:near     ; CODE XREF: _unsetenv↑j
extern:000000000020A6E8                                         ; DATA XREF: .got:unsetenv_ptr↑o
extern:000000000020A6F0 ; int execvp(const char *file, char *const argv[])
extern:000000000020A6F0                 extrn execvp:near       ; CODE XREF: _execvp↑j
extern:000000000020A6F0                                         ; DATA XREF: .got:execvp_ptr↑o
extern:000000000020A6F8 ; int __fastcall _cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
extern:000000000020A6F8                 extrn __cxa_atexit:near ; CODE XREF: ___cxa_atexit↑j
extern:000000000020A6F8                                         ; DATA XREF: .got:__cxa_atexit_ptr↑o
extern:000000000020A700 ; int _libc_current_sigrtmin(void)
extern:000000000020A700                 extrn __libc_current_sigrtmin:near
extern:000000000020A700                                         ; CODE XREF: ___libc_current_sigrtmin↑j
extern:000000000020A700                                         ; DATA XREF: .got:__libc_current_sigrtmin_ptr↑o
extern:000000000020A708 ; int sigismember(const sigset_t *set, int signo)
extern:000000000020A708                 extrn sigismember:near  ; CODE XREF: _sigismember↑j
extern:000000000020A708                                         ; DATA XREF: .got:sigismember_ptr↑o
extern:000000000020A710 ; void __noreturn exit(int status)
extern:000000000020A710                 extrn exit:near         ; CODE XREF: _exit↑j
extern:000000000020A710                                         ; DATA XREF: .got:exit_ptr↑o
extern:000000000020A718 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
extern:000000000020A718                 extrn fwrite:near       ; CODE XREF: _fwrite↑j
extern:000000000020A718                                         ; DATA XREF: .got:fwrite_ptr↑o
extern:000000000020A720                 extrn __fprintf_chk:near
extern:000000000020A720                                         ; CODE XREF: ___fprintf_chk↑j
extern:000000000020A720                                         ; DATA XREF: .got:__fprintf_chk_ptr↑o
extern:000000000020A728 ; int _libc_current_sigrtmax(void)
extern:000000000020A728                 extrn __libc_current_sigrtmax:near
extern:000000000020A728                                         ; CODE XREF: ___libc_current_sigrtmax↑j
extern:000000000020A728                                         ; DATA XREF: .got:__libc_current_sigrtmax_ptr↑o
extern:000000000020A730 ; int mbsinit(const mbstate_t *ps)
extern:000000000020A730                 extrn mbsinit:near      ; CODE XREF: _mbsinit↑j
extern:000000000020A730                                         ; DATA XREF: .got:mbsinit_ptr↑o
extern:000000000020A738 ; int iswprint(wint_t wc)
extern:000000000020A738                 extrn iswprint:near     ; CODE XREF: _iswprint↑j
extern:000000000020A738                                         ; DATA XREF: .got:iswprint_ptr↑o
extern:000000000020A740 ; int __fastcall __cxa_finalize(void *)
extern:000000000020A740                 extrn __imp___cxa_finalize:near ; weak
extern:000000000020A740                                         ; CODE XREF: __cxa_finalize↑j
extern:000000000020A740                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:000000000020A748 ; int sigaddset(sigset_t *set, int signo)
extern:000000000020A748                 extrn sigaddset:near    ; CODE XREF: _sigaddset↑j
extern:000000000020A748                                         ; DATA XREF: .got:sigaddset_ptr↑o
extern:000000000020A750 ; const unsigned __int16 **_ctype_b_loc(void)
extern:000000000020A750                 extrn __ctype_b_loc:near
extern:000000000020A750                                         ; CODE XREF: ___ctype_b_loc↑j
extern:000000000020A750                                         ; DATA XREF: .got:__ctype_b_loc_ptr↑o
extern:000000000020A758                 extrn __sprintf_chk:near
extern:000000000020A758                                         ; CODE XREF: ___sprintf_chk↑j
extern:000000000020A758                                         ; DATA XREF: .got:__sprintf_chk_ptr↑o
extern:000000000020A760                 extrn _ITM_deregisterTMCloneTable ; weak
extern:000000000020A760                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:000000000020A768                 extrn __gmon_start__:near ; weak
extern:000000000020A768                                         ; CODE XREF: _init_proc+10↑p
extern:000000000020A768                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:000000000020A770                 extrn _ITM_registerTMCloneTable ; weak
extern:000000000020A770                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:000000000020A770
extern:000000000020A770
extern:000000000020A770                 end start
