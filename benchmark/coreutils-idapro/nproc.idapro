LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                      License info: 48-357D-7BC4-C6                      |
LOAD:0000000000000000 ; |                              Virginia Tech                              |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : DBA77038AF6FCFC42C9012A68D443A441378C94EA98F6A3C56B35F7A3634776F
LOAD:0000000000000000 ; Input MD5    : B7269E2C02179A49F6E593C9CD39ECA0
LOAD:0000000000000000 ; Input CRC32  : EA9E072F
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/nproc
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'nproc.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000 ; Source File : 'version.c'
LOAD:0000000000000000 ; Source File : 'closeout.c'
LOAD:0000000000000000 ; Source File : 'exitfail.c'
LOAD:0000000000000000 ; Source File : 'nproc.c'
LOAD:0000000000000000 ; Source File : 'progname.c'
LOAD:0000000000000000 ; Source File : 'quotearg.c'
LOAD:0000000000000000 ; Source File : 'version-etc.c'
LOAD:0000000000000000 ; Source File : 'version-etc-fsf.c'
LOAD:0000000000000000 ; Source File : 'xmalloc.c'
LOAD:0000000000000000 ; Source File : 'xalloc-die.c'
LOAD:0000000000000000 ; Source File : 'xdectoumax.c'
LOAD:0000000000000000 ; Source File : 'xstrtoumax.c'
LOAD:0000000000000000 ; Source File : 'mbrtowc.c'
LOAD:0000000000000000 ; Source File : 'close-stream.c'
LOAD:0000000000000000 ; Source File : 'hard-locale.c'
LOAD:0000000000000000 ; Source File : 'localcharset.c'
LOAD:0000000000000000 ; Source File : 'fclose.c'
LOAD:0000000000000000 ; Source File : 'fflush.c'
LOAD:0000000000000000 ; Source File : 'fseeko.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure code
LOAD:0000000000000000 ; Segment permissions: Read/Execute
LOAD:0000000000000000 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000002F8↓o
LOAD:0000000000000000                                         ; LOAD:0000000000000310↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset start         ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 26FF0h               ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 9                    ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 25h                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 24h                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 1F8h                 ; Size in file image
LOAD:0000000000000068                 dq 1F8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 238h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 238h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 5                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 6B18h                ; Size in file image
LOAD:00000000000000D8                 dq 6B18h                ; Size in memory image
LOAD:00000000000000E0                 dq 200000h              ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 6                    ; Flags
LOAD:00000000000000F0                 dq 6B50h                ; File offset
LOAD:00000000000000F8                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000100 qword_100       dq 206B50h              ; DATA XREF: .data:slotvec0↓o
LOAD:0000000000000100                                         ; Physical address
LOAD:0000000000000108                 dq 530h                 ; Size in file image
LOAD:0000000000000110                 dq 6E8h                 ; Size in memory image
LOAD:0000000000000118                 dq 200000h              ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000124                 dd 6                    ; Flags
LOAD:0000000000000128                 dq 6C58h                ; File offset
LOAD:0000000000000130                 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000000138                 dq 206C58h              ; Physical address
LOAD:0000000000000140                 dq 1F0h                 ; Size in file image
LOAD:0000000000000148                 dq 1F0h                 ; Size in memory image
LOAD:0000000000000150                 dq 8                    ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 4                    ; Type: NOTE
LOAD:000000000000015C                 dd 4                    ; Flags
LOAD:0000000000000160                 dq 254h                 ; File offset
LOAD:0000000000000168                 dq offset dword_254     ; Virtual address
LOAD:0000000000000170                 dq 254h                 ; Physical address
LOAD:0000000000000178                 dq 44h                  ; Size in file image
LOAD:0000000000000180                 dq 44h                  ; Size in memory image
LOAD:0000000000000188                 dq 4                    ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000194                 dd 4                    ; Flags
LOAD:0000000000000198                 dq 5CDCh                ; File offset
LOAD:00000000000001A0                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000000001A8                 dq 5CDCh                ; Physical address
LOAD:00000000000001B0                 dq 26Ch                 ; Size in file image
LOAD:00000000000001B8                 dq 26Ch                 ; Size in memory image
LOAD:00000000000001C0                 dq 4                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000001CC                 dd 6                    ; Flags
LOAD:00000000000001D0                 dq 0                    ; File offset
LOAD:00000000000001D8                 dq 0                    ; Virtual address
LOAD:00000000000001E0                 dq 0                    ; Physical address
LOAD:00000000000001E8                 dq 0                    ; Size in file image
LOAD:00000000000001F0                 dq 0                    ; Size in memory image
LOAD:00000000000001F8                 dq 10h                  ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 6474E552h            ; Type: RO-AFTER
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 6B50h                ; File offset
LOAD:0000000000000210                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000218                 dq 206B50h              ; Physical address
LOAD:0000000000000220                 dq 4B0h                 ; Size in file image
LOAD:0000000000000228                 dq 4B0h                 ; Size in memory image
LOAD:0000000000000230                 dq 1                    ; Alignment
LOAD:0000000000000238 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000238                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000254 ; ELF Note Entry
LOAD:0000000000000254 dword_254       dd 4                    ; DATA XREF: LOAD:0000000000000168↑o
LOAD:0000000000000254                                         ; Name Size
LOAD:0000000000000258                 dd 10h                  ; Desc Size
LOAD:000000000000025C                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000260 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000264                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:0000000000000274 ; ELF Note Entry
LOAD:0000000000000274                 dd 4                    ; Name Size
LOAD:0000000000000278                 dd 14h                  ; Desc Size
LOAD:000000000000027C                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000280 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000284                 db 5Ah, 0A1h, 71h, 0, 36h, 0DCh, 57h, 0C1h, 0B0h, 0ACh ; Desc
LOAD:0000000000000284                 db 0E3h, 34h, 6Ah, 7, 46h, 5Eh, 73h, 8Ah, 24h, 43h
LOAD:0000000000000298 ; ELF GNU Hash Table
LOAD:0000000000000298 elf_gnu_hash_nbuckets dd 3
LOAD:000000000000029C elf_gnu_hash_symbias dd 35h
LOAD:00000000000002A0 elf_gnu_hash_bitmask_nwords dd 1
LOAD:00000000000002A4 elf_gnu_hash_shift dd 6
LOAD:00000000000002A8 elf_gnu_hash_indexes dq 121C012000414D04h
LOAD:00000000000002B0 elf_gnu_hash_bucket dd 35h, 36h, 3Bh
LOAD:00000000000002BC elf_gnu_hash_chain dd 1C8C1D29h, 9E7650BCh, 9789A096h, 72632CCEh, 0F54162E4h
LOAD:00000000000002BC                 dd 1C8BF239h, 12F7C432h, 12F7A2B3h, 0
LOAD:00000000000002E0 ; ELF Symbol Table
LOAD:00000000000002E0                 Elf64_Sym <0>
LOAD:00000000000002F8                 Elf64_Sym <offset aGetenv - offset byte_898, 12h, 0, 0, \ ; "getenv"
LOAD:00000000000002F8                            offset dword_0, 0>
LOAD:0000000000000310                 Elf64_Sym <offset aFree - offset byte_898, 12h, 0, 0, offset dword_0, \ ; "free"
LOAD:0000000000000310                            0>
LOAD:0000000000000328                 Elf64_Sym <offset aAbort - offset byte_898, 12h, 0, 0, offset dword_0,\ ; "abort"
LOAD:0000000000000328                            0>
LOAD:0000000000000340                 Elf64_Sym <offset aErrnoLocation - offset byte_898, 12h, 0, 0, \ ; "__errno_location"
LOAD:0000000000000340                            offset dword_0, 0>
LOAD:0000000000000358                 Elf64_Sym <offset aStrncmp - offset byte_898, 12h, 0, 0, \ ; "strncmp"
LOAD:0000000000000358                            offset dword_0, 0>
LOAD:0000000000000370                 Elf64_Sym <offset aItmDeregistert - offset byte_898, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:0000000000000370                            offset dword_0, 0>
LOAD:0000000000000388                 Elf64_Sym <offset aExit - offset byte_898, 12h, 0, 0, offset dword_0, \ ; "_exit"
LOAD:0000000000000388                            0>
LOAD:00000000000003A0                 Elf64_Sym <offset aFpending - offset byte_898, 12h, 0, 0, \ ; "__fpending"
LOAD:00000000000003A0                            offset dword_0, 0>
LOAD:00000000000003B8                 Elf64_Sym <offset aBindtextdomain+4 - offset byte_898, 12h, 0, 0, \ ; "textdomain"
LOAD:00000000000003B8                            offset dword_0, 0>
LOAD:00000000000003D0                 Elf64_Sym <offset aFclose - offset byte_898, 12h, 0, 0, \ ; "fclose"
LOAD:00000000000003D0                            offset dword_0, 0>
LOAD:00000000000003E8                 Elf64_Sym <offset aSchedCpucount - offset byte_898, 12h, 0, 0, \ ; "__sched_cpucount"
LOAD:00000000000003E8                            offset dword_0, 0>
LOAD:0000000000000400                 Elf64_Sym <offset aBindtextdomain - offset byte_898, 12h, 0, 0, \ ; "bindtextdomain"
LOAD:0000000000000400                            offset dword_0, 0>
LOAD:0000000000000418                 Elf64_Sym <offset aDcgettext - offset byte_898, 12h, 0, 0, \ ; "dcgettext"
LOAD:0000000000000418                            offset dword_0, 0>
LOAD:0000000000000430                 Elf64_Sym <offset aCtypeGetMbCurM - offset byte_898, 12h, 0, 0, \ ; "__ctype_get_mb_cur_max"
LOAD:0000000000000430                            offset dword_0, 0>
LOAD:0000000000000448                 Elf64_Sym <offset aStrlen - offset byte_898, 12h, 0, 0, \ ; "strlen"
LOAD:0000000000000448                            offset dword_0, 0>
LOAD:0000000000000460                 Elf64_Sym <offset aStackChkFail - offset byte_898, 12h, 0, 0, \ ; "__stack_chk_fail"
LOAD:0000000000000460                            offset dword_0, 0>
LOAD:0000000000000478                 Elf64_Sym <offset aGetoptLong - offset byte_898, 12h, 0, 0, \ ; "getopt_long"
LOAD:0000000000000478                            offset dword_0, 0>
LOAD:0000000000000490                 Elf64_Sym <offset aMbrtowc - offset byte_898, 12h, 0, 0, \ ; "mbrtowc"
LOAD:0000000000000490                            offset dword_0, 0>
LOAD:00000000000004A8                 Elf64_Sym <offset aStrchr - offset byte_898, 12h, 0, 0, \ ; "strchr"
LOAD:00000000000004A8                            offset dword_0, 0>
LOAD:00000000000004C0                 Elf64_Sym <offset aStrrchr - offset byte_898, 12h, 0, 0, \ ; "strrchr"
LOAD:00000000000004C0                            offset dword_0, 0>
LOAD:00000000000004D8                 Elf64_Sym <offset aLseek - offset byte_898, 12h, 0, 0, offset dword_0,\ ; "lseek"
LOAD:00000000000004D8                            0>
LOAD:00000000000004F0                 Elf64_Sym <offset aAssertFail - offset byte_898, 12h, 0, 0, \ ; "__assert_fail"
LOAD:00000000000004F0                            offset dword_0, 0>
LOAD:0000000000000508                 Elf64_Sym <offset aStrtoulInterna - offset byte_898, 12h, 0, 0, \ ; "__strtoul_internal"
LOAD:0000000000000508                            offset dword_0, 0>
LOAD:0000000000000520                 Elf64_Sym <offset aMemset - offset byte_898, 12h, 0, 0, \ ; "memset"
LOAD:0000000000000520                            offset dword_0, 0>
LOAD:0000000000000538                 Elf64_Sym <offset aLibcStartMain - offset byte_898, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:0000000000000538                            offset dword_0, 0>
LOAD:0000000000000550                 Elf64_Sym <offset aMemcmp - offset byte_898, 12h, 0, 0, \ ; "memcmp"
LOAD:0000000000000550                            offset dword_0, 0>
LOAD:0000000000000568                 Elf64_Sym <offset aFputsUnlocked - offset byte_898, 12h, 0, 0, \ ; "fputs_unlocked"
LOAD:0000000000000568                            offset dword_0, 0>
LOAD:0000000000000580                 Elf64_Sym <offset aCalloc - offset byte_898, 12h, 0, 0, \ ; "calloc"
LOAD:0000000000000580                            offset dword_0, 0>
LOAD:0000000000000598                 Elf64_Sym <offset aGmonStart - offset byte_898, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:0000000000000598                            offset dword_0, 0>
LOAD:00000000000005B0                 Elf64_Sym <offset aMemcpy - offset byte_898, 12h, 0, 0, \ ; "memcpy"
LOAD:00000000000005B0                            offset dword_0, 0>
LOAD:00000000000005C8                 Elf64_Sym <offset aFileno - offset byte_898, 12h, 0, 0, \ ; "fileno"
LOAD:00000000000005C8                            offset dword_0, 0>
LOAD:00000000000005E0                 Elf64_Sym <offset aMalloc - offset byte_898, 12h, 0, 0, \ ; "malloc"
LOAD:00000000000005E0                            offset dword_0, 0>
LOAD:00000000000005F8                 Elf64_Sym <offset aFflush - offset byte_898, 12h, 0, 0, \ ; "fflush"
LOAD:00000000000005F8                            offset dword_0, 0>
LOAD:0000000000000610                 Elf64_Sym <offset aNlLanginfo - offset byte_898, 12h, 0, 0, \ ; "nl_langinfo"
LOAD:0000000000000610                            offset dword_0, 0>
LOAD:0000000000000628                 Elf64_Sym <offset aFreading - offset byte_898, 12h, 0, 0, \ ; "__freading"
LOAD:0000000000000628                            offset dword_0, 0>
LOAD:0000000000000640                 Elf64_Sym <offset aRealloc - offset byte_898, 12h, 0, 0, \ ; "realloc"
LOAD:0000000000000640                            offset dword_0, 0>
LOAD:0000000000000658                 Elf64_Sym <offset aSetlocale - offset byte_898, 12h, 0, 0, \ ; "setlocale"
LOAD:0000000000000658                            offset dword_0, 0>
LOAD:0000000000000670                 Elf64_Sym <offset aPrintfChk - offset byte_898, 12h, 0, 0, \ ; "__printf_chk"
LOAD:0000000000000670                            offset dword_0, 0>
LOAD:0000000000000688                 Elf64_Sym <offset aError - offset byte_898, 12h, 0, 0, offset dword_0,\ ; "error"
LOAD:0000000000000688                            0>
LOAD:00000000000006A0                 Elf64_Sym <offset aFseeko - offset byte_898, 12h, 0, 0, \ ; "fseeko"
LOAD:00000000000006A0                            offset dword_0, 0>
LOAD:00000000000006B8                 Elf64_Sym <offset aSysconf - offset byte_898, 12h, 0, 0, \ ; "sysconf"
LOAD:00000000000006B8                            offset dword_0, 0>
LOAD:00000000000006D0                 Elf64_Sym <offset aStrtoul - offset byte_898, 12h, 0, 0, \ ; "strtoul"
LOAD:00000000000006D0                            offset dword_0, 0>
LOAD:00000000000006E8                 Elf64_Sym <offset aCxaAtexit - offset byte_898, 12h, 0, 0, \ ; "__cxa_atexit"
LOAD:00000000000006E8                            offset dword_0, 0>
LOAD:0000000000000700                 Elf64_Sym <offset aExit+1 - offset byte_898, 12h, 0, 0, \ ; "exit"
LOAD:0000000000000700                            offset dword_0, 0>
LOAD:0000000000000718                 Elf64_Sym <offset aFwrite - offset byte_898, 12h, 0, 0, \ ; "fwrite"
LOAD:0000000000000718                            offset dword_0, 0>
LOAD:0000000000000730                 Elf64_Sym <offset aFprintfChk - offset byte_898, 12h, 0, 0, \ ; "__fprintf_chk"
LOAD:0000000000000730                            offset dword_0, 0>
LOAD:0000000000000748                 Elf64_Sym <offset aItmRegistertmc - offset byte_898, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:0000000000000748                            offset dword_0, 0>
LOAD:0000000000000760                 Elf64_Sym <offset aSchedGetaffini - offset byte_898, 12h, 0, 0, \ ; "sched_getaffinity"
LOAD:0000000000000760                            offset dword_0, 0>
LOAD:0000000000000778                 Elf64_Sym <offset aMbsinit - offset byte_898, 12h, 0, 0, \ ; "mbsinit"
LOAD:0000000000000778                            offset dword_0, 0>
LOAD:0000000000000790                 Elf64_Sym <offset aIswprint - offset byte_898, 12h, 0, 0, \ ; "iswprint"
LOAD:0000000000000790                            offset dword_0, 0>
LOAD:00000000000007A8                 Elf64_Sym <offset aCxaFinalize - offset byte_898, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:00000000000007A8                            offset dword_0, 0>
LOAD:00000000000007C0                 Elf64_Sym <offset aCtypeBLoc - offset byte_898, 12h, 0, 0, \ ; "__ctype_b_loc"
LOAD:00000000000007C0                            offset dword_0, 0>
LOAD:00000000000007D8                 Elf64_Sym <offset aStdout - offset byte_898, 11h, 0, 19h, \ ; "stdout"
LOAD:00000000000007D8                            offset stdout@@GLIBC_2_2_5, 8>
LOAD:00000000000007F0                 Elf64_Sym <offset aProgname - offset byte_898, 11h, 0, 19h, \ ; "__progname"
LOAD:00000000000007F0                            offset __bss_start, 8>
LOAD:0000000000000808                 Elf64_Sym <offset aProgramInvocat - offset byte_898, 21h, 0, 19h, \ ; "program_invocation_name"
LOAD:0000000000000808                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000820                 Elf64_Sym <offset aPrognameFull - offset byte_898, 11h, 0, 19h, \ ; "__progname_full"
LOAD:0000000000000820                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000838                 Elf64_Sym <offset aProgramInvocat_0 - offset byte_898, 21h, 0, 19h, \ ; "program_invocation_short_name"
LOAD:0000000000000838                            offset __bss_start, 8>
LOAD:0000000000000850                 Elf64_Sym <offset aStderr - offset byte_898, 11h, 0, 19h, \ ; "stderr"
LOAD:0000000000000850                            offset stderr@@GLIBC_2_2_5, 8>
LOAD:0000000000000868                 Elf64_Sym <offset aOptind - offset byte_898, 11h, 0, 19h, \ ; "optind"
LOAD:0000000000000868                            offset optind@@GLIBC_2_2_5, 4>
LOAD:0000000000000880                 Elf64_Sym <offset aOptarg - offset byte_898, 11h, 0, 19h, \ ; "optarg"
LOAD:0000000000000880                            offset optarg@@GLIBC_2_2_5, 8>
LOAD:0000000000000898 ; ELF String Table
LOAD:0000000000000898 byte_898        db 0                    ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000898                                         ; LOAD:0000000000000310↑o ...
LOAD:0000000000000899 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000000C00↓o
LOAD:00000000000008A3 aFflush         db 'fflush',0           ; DATA XREF: LOAD:00000000000005F8↑o
LOAD:00000000000008AA aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:0000000000000670↑o
LOAD:00000000000008B7 aSetlocale      db 'setlocale',0        ; DATA XREF: LOAD:0000000000000658↑o
LOAD:00000000000008C1 aMbrtowc        db 'mbrtowc',0          ; DATA XREF: LOAD:0000000000000490↑o
LOAD:00000000000008C9 aStrncmp        db 'strncmp',0          ; DATA XREF: LOAD:0000000000000358↑o
LOAD:00000000000008D1 aOptind         db 'optind',0           ; DATA XREF: LOAD:0000000000000868↑o
LOAD:00000000000008D8 aStrrchr        db 'strrchr',0          ; DATA XREF: LOAD:00000000000004C0↑o
LOAD:00000000000008E0 aDcgettext      db 'dcgettext',0        ; DATA XREF: LOAD:0000000000000418↑o
LOAD:00000000000008EA aError          db 'error',0            ; DATA XREF: LOAD:0000000000000688↑o
LOAD:00000000000008F0 aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:0000000000000460↑o
LOAD:0000000000000901 aIswprint       db 'iswprint',0         ; DATA XREF: LOAD:0000000000000790↑o
LOAD:000000000000090A aRealloc        db 'realloc',0          ; DATA XREF: LOAD:0000000000000640↑o
LOAD:0000000000000912 aAbort          db 'abort',0            ; DATA XREF: LOAD:0000000000000328↑o
LOAD:0000000000000918 aExit           db '_exit',0            ; DATA XREF: LOAD:0000000000000388↑o
LOAD:0000000000000918                                         ; LOAD:0000000000000700↑o
LOAD:000000000000091E aProgramInvocat db 'program_invocation_name',0
LOAD:000000000000091E                                         ; DATA XREF: LOAD:0000000000000808↑o
LOAD:0000000000000936 aAssertFail     db '__assert_fail',0    ; DATA XREF: LOAD:00000000000004F0↑o
LOAD:0000000000000944 aCtypeGetMbCurM db '__ctype_get_mb_cur_max',0
LOAD:0000000000000944                                         ; DATA XREF: LOAD:0000000000000430↑o
LOAD:000000000000095B aCalloc         db 'calloc',0           ; DATA XREF: LOAD:0000000000000580↑o
LOAD:0000000000000962 aStrlen         db 'strlen',0           ; DATA XREF: LOAD:0000000000000448↑o
LOAD:0000000000000969 aMemset         db 'memset',0           ; DATA XREF: LOAD:0000000000000520↑o
LOAD:0000000000000970 aErrnoLocation  db '__errno_location',0 ; DATA XREF: LOAD:0000000000000340↑o
LOAD:0000000000000981 aMemcmp         db 'memcmp',0           ; DATA XREF: LOAD:0000000000000550↑o
LOAD:0000000000000988 aFprintfChk     db '__fprintf_chk',0    ; DATA XREF: LOAD:0000000000000730↑o
LOAD:0000000000000996 aStdout         db 'stdout',0           ; DATA XREF: LOAD:00000000000007D8↑o
LOAD:000000000000099D aLseek          db 'lseek',0            ; DATA XREF: LOAD:00000000000004D8↑o
LOAD:00000000000009A3 aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:00000000000005B0↑o
LOAD:00000000000009AA aFclose         db 'fclose',0           ; DATA XREF: LOAD:00000000000003D0↑o
LOAD:00000000000009B1 aStrtoul        db 'strtoul',0          ; DATA XREF: LOAD:00000000000006D0↑o
LOAD:00000000000009B9 aMalloc         db 'malloc',0           ; DATA XREF: LOAD:00000000000005E0↑o
LOAD:00000000000009C0 aMbsinit        db 'mbsinit',0          ; DATA XREF: LOAD:0000000000000778↑o
LOAD:00000000000009C8 aSchedCpucount  db '__sched_cpucount',0 ; DATA XREF: LOAD:00000000000003E8↑o
LOAD:00000000000009D9 aNlLanginfo     db 'nl_langinfo',0      ; DATA XREF: LOAD:0000000000000610↑o
LOAD:00000000000009E5 aCtypeBLoc      db '__ctype_b_loc',0    ; DATA XREF: LOAD:00000000000007C0↑o
LOAD:00000000000009F3 aGetenv         db 'getenv',0           ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:00000000000009FA aSchedGetaffini db 'sched_getaffinity',0
LOAD:00000000000009FA                                         ; DATA XREF: LOAD:0000000000000760↑o
LOAD:0000000000000A0C aOptarg         db 'optarg',0           ; DATA XREF: LOAD:0000000000000880↑o
LOAD:0000000000000A13 aFreading       db '__freading',0       ; DATA XREF: LOAD:0000000000000628↑o
LOAD:0000000000000A1E aStderr         db 'stderr',0           ; DATA XREF: LOAD:0000000000000850↑o
LOAD:0000000000000A25 aGetoptLong     db 'getopt_long',0      ; DATA XREF: LOAD:0000000000000478↑o
LOAD:0000000000000A31 aFileno         db 'fileno',0           ; DATA XREF: LOAD:00000000000005C8↑o
LOAD:0000000000000A38 aFwrite         db 'fwrite',0           ; DATA XREF: LOAD:0000000000000718↑o
LOAD:0000000000000A3F aFpending       db '__fpending',0       ; DATA XREF: LOAD:00000000000003A0↑o
LOAD:0000000000000A4A aStrchr         db 'strchr',0           ; DATA XREF: LOAD:00000000000004A8↑o
LOAD:0000000000000A51 aProgramInvocat_0 db 'program_invocation_short_name',0
LOAD:0000000000000A51                                         ; DATA XREF: LOAD:0000000000000838↑o
LOAD:0000000000000A6F aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:00000000000007A8↑o
LOAD:0000000000000A7E aBindtextdomain db 'bindtextdomain',0   ; DATA XREF: LOAD:0000000000000400↑o
LOAD:0000000000000A7E                                         ; LOAD:00000000000003B8↑o
LOAD:0000000000000A8D aLibcStartMain  db '__libc_start_main',0
LOAD:0000000000000A8D                                         ; DATA XREF: LOAD:0000000000000538↑o
LOAD:0000000000000A9F aFseeko         db 'fseeko',0           ; DATA XREF: LOAD:00000000000006A0↑o
LOAD:0000000000000AA6 aStrtoulInterna db '__strtoul_internal',0
LOAD:0000000000000AA6                                         ; DATA XREF: LOAD:0000000000000508↑o
LOAD:0000000000000AB9 aSysconf        db 'sysconf',0          ; DATA XREF: LOAD:00000000000006B8↑o
LOAD:0000000000000AC1 aFputsUnlocked  db 'fputs_unlocked',0   ; DATA XREF: LOAD:0000000000000568↑o
LOAD:0000000000000AD0 aFree           db 'free',0             ; DATA XREF: LOAD:0000000000000310↑o
LOAD:0000000000000AD5 aProgname       db '__progname',0       ; DATA XREF: LOAD:00000000000007F0↑o
LOAD:0000000000000AE0 aPrognameFull   db '__progname_full',0  ; DATA XREF: LOAD:0000000000000820↑o
LOAD:0000000000000AF0 aCxaAtexit      db '__cxa_atexit',0     ; DATA XREF: LOAD:00000000000006E8↑o
LOAD:0000000000000AFD aGlibc23        db 'GLIBC_2.3',0        ; DATA XREF: LOAD:0000000000000C10↓o
LOAD:0000000000000B07 aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000000C20↓o
LOAD:0000000000000B13 aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:0000000000000C30↓o
LOAD:0000000000000B1E aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000000C40↓o
LOAD:0000000000000B28 aGlibc26        db 'GLIBC_2.6',0        ; DATA XREF: LOAD:0000000000000C50↓o
LOAD:0000000000000B32 aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000000C60↓o
LOAD:0000000000000B3E aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:0000000000000B3E                                         ; DATA XREF: LOAD:0000000000000370↑o
LOAD:0000000000000B5A aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:0000000000000598↑o
LOAD:0000000000000B69 aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:0000000000000B69                                         ; DATA XREF: LOAD:0000000000000748↑o
LOAD:0000000000000B83                 align 4
LOAD:0000000000000B84 ; ELF GNU Symbol Version Table
LOAD:0000000000000B84                 dw 0
LOAD:0000000000000B86                 dw 2                    ; getenv@@GLIBC_2.2.5
LOAD:0000000000000B88                 dw 2                    ; free@@GLIBC_2.2.5
LOAD:0000000000000B8A                 dw 2                    ; abort@@GLIBC_2.2.5
LOAD:0000000000000B8C                 dw 2                    ; __errno_location@@GLIBC_2.2.5
LOAD:0000000000000B8E                 dw 2                    ; strncmp@@GLIBC_2.2.5
LOAD:0000000000000B90                 dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
LOAD:0000000000000B92                 dw 2                    ; _exit@@GLIBC_2.2.5
LOAD:0000000000000B94                 dw 2                    ; __fpending@@GLIBC_2.2.5
LOAD:0000000000000B96                 dw 2                    ; textdomain@@GLIBC_2.2.5
LOAD:0000000000000B98                 dw 2                    ; fclose@@GLIBC_2.2.5
LOAD:0000000000000B9A                 dw 3                    ; __sched_cpucount@@GLIBC_2.6
LOAD:0000000000000B9C                 dw 2                    ; bindtextdomain@@GLIBC_2.2.5
LOAD:0000000000000B9E                 dw 2                    ; dcgettext@@GLIBC_2.2.5
LOAD:0000000000000BA0                 dw 2                    ; __ctype_get_mb_cur_max@@GLIBC_2.2.5
LOAD:0000000000000BA2                 dw 2                    ; strlen@@GLIBC_2.2.5
LOAD:0000000000000BA4                 dw 4                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:0000000000000BA6                 dw 2                    ; getopt_long@@GLIBC_2.2.5
LOAD:0000000000000BA8                 dw 2                    ; mbrtowc@@GLIBC_2.2.5
LOAD:0000000000000BAA                 dw 2                    ; strchr@@GLIBC_2.2.5
LOAD:0000000000000BAC                 dw 2                    ; strrchr@@GLIBC_2.2.5
LOAD:0000000000000BAE                 dw 2                    ; lseek@@GLIBC_2.2.5
LOAD:0000000000000BB0                 dw 2                    ; __assert_fail@@GLIBC_2.2.5
LOAD:0000000000000BB2                 dw 2                    ; __strtoul_internal@@GLIBC_2.2.5
LOAD:0000000000000BB4                 dw 2                    ; memset@@GLIBC_2.2.5
LOAD:0000000000000BB6                 dw 2                    ; __libc_start_main@@GLIBC_2.2.5
LOAD:0000000000000BB8                 dw 2                    ; memcmp@@GLIBC_2.2.5
LOAD:0000000000000BBA                 dw 2                    ; fputs_unlocked@@GLIBC_2.2.5
LOAD:0000000000000BBC                 dw 2                    ; calloc@@GLIBC_2.2.5
LOAD:0000000000000BBE                 dw 0                    ; local  symbol: __gmon_start__
LOAD:0000000000000BC0                 dw 5                    ; memcpy@@GLIBC_2.14
LOAD:0000000000000BC2                 dw 2                    ; fileno@@GLIBC_2.2.5
LOAD:0000000000000BC4                 dw 2                    ; malloc@@GLIBC_2.2.5
LOAD:0000000000000BC6                 dw 2                    ; fflush@@GLIBC_2.2.5
LOAD:0000000000000BC8                 dw 2                    ; nl_langinfo@@GLIBC_2.2.5
LOAD:0000000000000BCA                 dw 2                    ; __freading@@GLIBC_2.2.5
LOAD:0000000000000BCC                 dw 2                    ; realloc@@GLIBC_2.2.5
LOAD:0000000000000BCE                 dw 2                    ; setlocale@@GLIBC_2.2.5
LOAD:0000000000000BD0                 dw 6                    ; __printf_chk@@GLIBC_2.3.4
LOAD:0000000000000BD2                 dw 2                    ; error@@GLIBC_2.2.5
LOAD:0000000000000BD4                 dw 2                    ; fseeko@@GLIBC_2.2.5
LOAD:0000000000000BD6                 dw 2                    ; sysconf@@GLIBC_2.2.5
LOAD:0000000000000BD8                 dw 2                    ; strtoul@@GLIBC_2.2.5
LOAD:0000000000000BDA                 dw 2                    ; __cxa_atexit@@GLIBC_2.2.5
LOAD:0000000000000BDC                 dw 2                    ; exit@@GLIBC_2.2.5
LOAD:0000000000000BDE                 dw 2                    ; fwrite@@GLIBC_2.2.5
LOAD:0000000000000BE0                 dw 6                    ; __fprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000BE2                 dw 0                    ; local  symbol: _ITM_registerTMCloneTable
LOAD:0000000000000BE4                 dw 6                    ; sched_getaffinity@@GLIBC_2.3.4
LOAD:0000000000000BE6                 dw 2                    ; mbsinit@@GLIBC_2.2.5
LOAD:0000000000000BE8                 dw 2                    ; iswprint@@GLIBC_2.2.5
LOAD:0000000000000BEA                 dw 2                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:0000000000000BEC                 dw 7                    ; __ctype_b_loc@@GLIBC_2.3
LOAD:0000000000000BEE                 dw 2                    ; stdout@@GLIBC_2.2.5
LOAD:0000000000000BF0                 dw 2                    ; __progname@@GLIBC_2.2.5
LOAD:0000000000000BF2                 dw 2                    ; program_invocation_name@@GLIBC_2.2.5
LOAD:0000000000000BF4                 dw 2                    ; __progname_full@@GLIBC_2.2.5
LOAD:0000000000000BF6                 dw 2                    ; program_invocation_short_name@@GLIBC_2.2.5
LOAD:0000000000000BF8                 dw 2                    ; stderr@@GLIBC_2.2.5
LOAD:0000000000000BFA                 dw 2                    ; optind@@GLIBC_2.2.5
LOAD:0000000000000BFC                 dw 2                    ; optarg@@GLIBC_2.2.5
LOAD:0000000000000BFE                 dw 0
LOAD:0000000000000C00 ; ELF GNU Symbol Version Requirements
LOAD:0000000000000C00                 Elf64_Verneed <1, 6, offset aLibcSo6 - offset byte_898, 10h, 0> ; "libc.so.6"
LOAD:0000000000000C10                 Elf64_Vernaux <0D696913h, 0, 7, offset aGlibc23 - offset byte_898, \ ; "GLIBC_2.3"
LOAD:0000000000000C10                                10h>
LOAD:0000000000000C20                 Elf64_Vernaux <9691974h, 0, 6, offset aGlibc234 - offset byte_898, \ ; "GLIBC_2.3.4"
LOAD:0000000000000C20                                10h>
LOAD:0000000000000C30                 Elf64_Vernaux <6969194h, 0, 5, offset aGlibc214 - offset byte_898, \ ; "GLIBC_2.14"
LOAD:0000000000000C30                                10h>
LOAD:0000000000000C40                 Elf64_Vernaux <0D696914h, 0, 4, offset aGlibc24 - offset byte_898, \ ; "GLIBC_2.4"
LOAD:0000000000000C40                                10h>
LOAD:0000000000000C50                 Elf64_Vernaux <0D696916h, 0, 3, offset aGlibc26 - offset byte_898, \ ; "GLIBC_2.6"
LOAD:0000000000000C50                                10h>
LOAD:0000000000000C60                 Elf64_Vernaux <9691A75h, 0, 2, offset aGlibc225 - offset byte_898, 0> ; "GLIBC_2.2.5"
LOAD:0000000000000C70 ; ELF RELA Relocation Table
LOAD:0000000000000C70                 Elf64_Rela <206B50h, 8, 19A0h> ; R_X86_64_RELATIVE +19A0h
LOAD:0000000000000C88                 Elf64_Rela <206B58h, 8, 1960h> ; R_X86_64_RELATIVE +1960h
LOAD:0000000000000CA0                 Elf64_Rela <206B60h, 8, 5093h> ; R_X86_64_RELATIVE +5093h
LOAD:0000000000000CB8                 Elf64_Rela <206B80h, 8, 5097h> ; R_X86_64_RELATIVE +5097h
LOAD:0000000000000CD0                 Elf64_Rela <206BA0h, 8, 509Eh> ; R_X86_64_RELATIVE +509Eh
LOAD:0000000000000CE8                 Elf64_Rela <206BC0h, 8, 50A3h> ; R_X86_64_RELATIVE +50A3h
LOAD:0000000000000D00                 Elf64_Rela <206C00h, 8, 5371h> ; R_X86_64_RELATIVE +5371h
LOAD:0000000000000D18                 Elf64_Rela <206C08h, 8, 5379h> ; R_X86_64_RELATIVE +5379h
LOAD:0000000000000D30                 Elf64_Rela <206C10h, 8, 537Fh> ; R_X86_64_RELATIVE +537Fh
LOAD:0000000000000D48                 Elf64_Rela <206C18h, 8, 538Ch> ; R_X86_64_RELATIVE +538Ch
LOAD:0000000000000D60                 Elf64_Rela <206C20h, 8, 5399h> ; R_X86_64_RELATIVE +5399h
LOAD:0000000000000D78                 Elf64_Rela <206C28h, 8, 4F88h> ; R_X86_64_RELATIVE +4F88h
LOAD:0000000000000D90                 Elf64_Rela <206C30h, 8, 53ADh> ; R_X86_64_RELATIVE +53ADh
LOAD:0000000000000DA8                 Elf64_Rela <206C38h, 8, 5392h> ; R_X86_64_RELATIVE +5392h
LOAD:0000000000000DC0                 Elf64_Rela <206C40h, 8, 5055h> ; R_X86_64_RELATIVE +5055h
LOAD:0000000000000DD8                 Elf64_Rela <206C48h, 8, 53B5h> ; R_X86_64_RELATIVE +53B5h
LOAD:0000000000000DF0                 Elf64_Rela <207008h, 8, 207008h> ; R_X86_64_RELATIVE +207008h
LOAD:0000000000000E08                 Elf64_Rela <207010h, 8, 52DBh> ; R_X86_64_RELATIVE +52DBh
LOAD:0000000000000E20                 Elf64_Rela <207060h, 8, 207070h> ; R_X86_64_RELATIVE +207070h
LOAD:0000000000000E38                 Elf64_Rela <207078h, 8, 207100h> ; R_X86_64_RELATIVE +207100h
LOAD:0000000000000E50                 Elf64_Rela <206FD8h, 600000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:0000000000000E68                 Elf64_Rela <206FE0h, 1900000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:0000000000000E80                 Elf64_Rela <206FE8h, 1D00000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:0000000000000E98                 Elf64_Rela <206FF0h, 2F00000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:0000000000000EB0                 Elf64_Rela <206FF8h, 3300000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:0000000000000EC8                 Elf64_Rela <207080h, 3600000005h, 0> ; R_X86_64_COPY __progname
LOAD:0000000000000EE0                 Elf64_Rela <207088h, 3500000005h, 0> ; R_X86_64_COPY stdout
LOAD:0000000000000EF8                 Elf64_Rela <207090h, 3B00000005h, 0> ; R_X86_64_COPY optind
LOAD:0000000000000F10                 Elf64_Rela <207098h, 3C00000005h, 0> ; R_X86_64_COPY optarg
LOAD:0000000000000F28                 Elf64_Rela <2070A0h, 3800000005h, 0> ; R_X86_64_COPY __progname_full
LOAD:0000000000000F40                 Elf64_Rela <2070C0h, 3A00000005h, 0> ; R_X86_64_COPY stderr
LOAD:0000000000000F58 ; ELF JMPREL Relocation Table
LOAD:0000000000000F58                 Elf64_Rela <206E60h, 100000007h, 0> ; R_X86_64_JUMP_SLOT getenv
LOAD:0000000000000F70                 Elf64_Rela <206E68h, 200000007h, 0> ; R_X86_64_JUMP_SLOT free
LOAD:0000000000000F88                 Elf64_Rela <206E70h, 300000007h, 0> ; R_X86_64_JUMP_SLOT abort
LOAD:0000000000000FA0                 Elf64_Rela <206E78h, 400000007h, 0> ; R_X86_64_JUMP_SLOT __errno_location
LOAD:0000000000000FB8                 Elf64_Rela <206E80h, 500000007h, 0> ; R_X86_64_JUMP_SLOT strncmp
LOAD:0000000000000FD0                 Elf64_Rela <206E88h, 700000007h, 0> ; R_X86_64_JUMP_SLOT _exit
LOAD:0000000000000FE8                 Elf64_Rela <206E90h, 800000007h, 0> ; R_X86_64_JUMP_SLOT __fpending
LOAD:0000000000001000                 Elf64_Rela <206E98h, 900000007h, 0> ; R_X86_64_JUMP_SLOT textdomain
LOAD:0000000000001018                 Elf64_Rela <206EA0h, 0A00000007h, 0> ; R_X86_64_JUMP_SLOT fclose
LOAD:0000000000001030                 Elf64_Rela <206EA8h, 0B00000007h, 0> ; R_X86_64_JUMP_SLOT __sched_cpucount
LOAD:0000000000001048                 Elf64_Rela <206EB0h, 0C00000007h, 0> ; R_X86_64_JUMP_SLOT bindtextdomain
LOAD:0000000000001060                 Elf64_Rela <206EB8h, 0D00000007h, 0> ; R_X86_64_JUMP_SLOT dcgettext
LOAD:0000000000001078                 Elf64_Rela <206EC0h, 0E00000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_get_mb_cur_max
LOAD:0000000000001090                 Elf64_Rela <206EC8h, 0F00000007h, 0> ; R_X86_64_JUMP_SLOT strlen
LOAD:00000000000010A8                 Elf64_Rela <206ED0h, 1000000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
LOAD:00000000000010C0                 Elf64_Rela <206ED8h, 1100000007h, 0> ; R_X86_64_JUMP_SLOT getopt_long
LOAD:00000000000010D8                 Elf64_Rela <206EE0h, 1200000007h, 0> ; R_X86_64_JUMP_SLOT mbrtowc
LOAD:00000000000010F0                 Elf64_Rela <206EE8h, 1300000007h, 0> ; R_X86_64_JUMP_SLOT strchr
LOAD:0000000000001108                 Elf64_Rela <206EF0h, 1400000007h, 0> ; R_X86_64_JUMP_SLOT strrchr
LOAD:0000000000001120                 Elf64_Rela <206EF8h, 1500000007h, 0> ; R_X86_64_JUMP_SLOT lseek
LOAD:0000000000001138                 Elf64_Rela <206F00h, 1600000007h, 0> ; R_X86_64_JUMP_SLOT __assert_fail
LOAD:0000000000001150                 Elf64_Rela <206F08h, 1700000007h, 0> ; R_X86_64_JUMP_SLOT __strtoul_internal
LOAD:0000000000001168                 Elf64_Rela <206F10h, 1800000007h, 0> ; R_X86_64_JUMP_SLOT memset
LOAD:0000000000001180                 Elf64_Rela <206F18h, 1A00000007h, 0> ; R_X86_64_JUMP_SLOT memcmp
LOAD:0000000000001198                 Elf64_Rela <206F20h, 1B00000007h, 0> ; R_X86_64_JUMP_SLOT fputs_unlocked
LOAD:00000000000011B0                 Elf64_Rela <206F28h, 1C00000007h, 0> ; R_X86_64_JUMP_SLOT calloc
LOAD:00000000000011C8                 Elf64_Rela <206F30h, 1E00000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
LOAD:00000000000011E0                 Elf64_Rela <206F38h, 1F00000007h, 0> ; R_X86_64_JUMP_SLOT fileno
LOAD:00000000000011F8                 Elf64_Rela <206F40h, 2000000007h, 0> ; R_X86_64_JUMP_SLOT malloc
LOAD:0000000000001210                 Elf64_Rela <206F48h, 2100000007h, 0> ; R_X86_64_JUMP_SLOT fflush
LOAD:0000000000001228                 Elf64_Rela <206F50h, 2200000007h, 0> ; R_X86_64_JUMP_SLOT nl_langinfo
LOAD:0000000000001240                 Elf64_Rela <206F58h, 2300000007h, 0> ; R_X86_64_JUMP_SLOT __freading
LOAD:0000000000001258                 Elf64_Rela <206F60h, 2400000007h, 0> ; R_X86_64_JUMP_SLOT realloc
LOAD:0000000000001270                 Elf64_Rela <206F68h, 2500000007h, 0> ; R_X86_64_JUMP_SLOT setlocale
LOAD:0000000000001288                 Elf64_Rela <206F70h, 2600000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
LOAD:00000000000012A0                 Elf64_Rela <206F78h, 2700000007h, 0> ; R_X86_64_JUMP_SLOT error
LOAD:00000000000012B8                 Elf64_Rela <206F80h, 2800000007h, 0> ; R_X86_64_JUMP_SLOT fseeko
LOAD:00000000000012D0                 Elf64_Rela <206F88h, 2900000007h, 0> ; R_X86_64_JUMP_SLOT sysconf
LOAD:00000000000012E8                 Elf64_Rela <206F90h, 2A00000007h, 0> ; R_X86_64_JUMP_SLOT strtoul
LOAD:0000000000001300                 Elf64_Rela <206F98h, 2B00000007h, 0> ; R_X86_64_JUMP_SLOT __cxa_atexit
LOAD:0000000000001318                 Elf64_Rela <206FA0h, 2C00000007h, 0> ; R_X86_64_JUMP_SLOT exit
LOAD:0000000000001330                 Elf64_Rela <206FA8h, 2D00000007h, 0> ; R_X86_64_JUMP_SLOT fwrite
LOAD:0000000000001348                 Elf64_Rela <206FB0h, 2E00000007h, 0> ; R_X86_64_JUMP_SLOT __fprintf_chk
LOAD:0000000000001360                 Elf64_Rela <206FB8h, 3000000007h, 0> ; R_X86_64_JUMP_SLOT sched_getaffinity
LOAD:0000000000001378                 Elf64_Rela <206FC0h, 3100000007h, 0> ; R_X86_64_JUMP_SLOT mbsinit
LOAD:0000000000001390                 Elf64_Rela <206FC8h, 3200000007h, 0> ; R_X86_64_JUMP_SLOT iswprint
LOAD:00000000000013A8                 Elf64_Rela <206FD0h, 3400000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_b_loc
LOAD:00000000000013A8 LOAD            ends
LOAD:00000000000013A8
.init:00000000000013C0 ; ===========================================================================
.init:00000000000013C0
.init:00000000000013C0 ; Segment type: Pure code
.init:00000000000013C0 ; Segment permissions: Read/Execute
.init:00000000000013C0 _init           segment dword public 'CODE' use64
.init:00000000000013C0                 assume cs:_init
.init:00000000000013C0                 ;org 13C0h
.init:00000000000013C0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:00000000000013C0
.init:00000000000013C0 ; =============== S U B R O U T I N E =======================================
.init:00000000000013C0
.init:00000000000013C0
.init:00000000000013C0                 public _init_proc
.init:00000000000013C0 _init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
.init:00000000000013C0                 sub     rsp, 8          ; _init
.init:00000000000013C4                 mov     rax, cs:__gmon_start___ptr
.init:00000000000013CB                 test    rax, rax
.init:00000000000013CE                 jz      short loc_13D2
.init:00000000000013D0                 call    rax ; __gmon_start__
.init:00000000000013D2
.init:00000000000013D2 loc_13D2:                               ; CODE XREF: _init_proc+E↑j
.init:00000000000013D2                 add     rsp, 8
.init:00000000000013D6                 retn
.init:00000000000013D6 _init_proc      endp
.init:00000000000013D6
.init:00000000000013D6 _init           ends
.init:00000000000013D6
LOAD:00000000000013D7 ; ===========================================================================
LOAD:00000000000013D7
LOAD:00000000000013D7 ; Segment type: Pure code
LOAD:00000000000013D7 ; Segment permissions: Read/Execute
LOAD:00000000000013D7 LOAD            segment byte public 'CODE' use64
LOAD:00000000000013D7                 assume cs:LOAD
LOAD:00000000000013D7                 ;org 13D7h
LOAD:00000000000013D7                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000013D7                 align 20h
LOAD:00000000000013D7 LOAD            ends
LOAD:00000000000013D7
.plt:00000000000013E0 ; ===========================================================================
.plt:00000000000013E0
.plt:00000000000013E0 ; Segment type: Pure code
.plt:00000000000013E0 ; Segment permissions: Read/Execute
.plt:00000000000013E0 _plt            segment para public 'CODE' use64
.plt:00000000000013E0                 assume cs:_plt
.plt:00000000000013E0                 ;org 13E0h
.plt:00000000000013E0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:00000000000013E0
.plt:00000000000013E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013E0
.plt:00000000000013E0
.plt:00000000000013E0 sub_13E0        proc near               ; CODE XREF: .plt:00000000000013FB↓j
.plt:00000000000013E0                                         ; .plt:000000000000140B↓j ...
.plt:00000000000013E0 ; __unwind {
.plt:00000000000013E0                 push    cs:qword_206E50
.plt:00000000000013E6                 jmp     cs:qword_206E58
.plt:00000000000013E6 sub_13E0        endp
.plt:00000000000013E6
.plt:00000000000013E6 ; ---------------------------------------------------------------------------
.plt:00000000000013EC                 align 10h
.plt:00000000000013F0
.plt:00000000000013F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013F0
.plt:00000000000013F0 ; Attributes: thunk
.plt:00000000000013F0
.plt:00000000000013F0 ; char *getenv(const char *name)
.plt:00000000000013F0 _getenv         proc near               ; CODE XREF: num_processors+47↓p
.plt:00000000000013F0                                         ; num_processors+6A↓p ...
.plt:00000000000013F0                 jmp     cs:getenv_ptr
.plt:00000000000013F0 _getenv         endp
.plt:00000000000013F0
.plt:00000000000013F6 ; ---------------------------------------------------------------------------
.plt:00000000000013F6                 push    0
.plt:00000000000013FB                 jmp     sub_13E0
.plt:0000000000001400
.plt:0000000000001400 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001400
.plt:0000000000001400 ; Attributes: thunk
.plt:0000000000001400
.plt:0000000000001400 ; void free(void *ptr)
.plt:0000000000001400 _free           proc near               ; CODE XREF: quotearg_n_options+115↓p
.plt:0000000000001400                                         ; quotearg_free+37↓p ...
.plt:0000000000001400                 jmp     cs:free_ptr
.plt:0000000000001400 _free           endp
.plt:0000000000001400
.plt:0000000000001406 ; ---------------------------------------------------------------------------
.plt:0000000000001406                 push    1
.plt:000000000000140B                 jmp     sub_13E0
.plt:0000000000001410
.plt:0000000000001410 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001410
.plt:0000000000001410 ; Attributes: noreturn thunk
.plt:0000000000001410
.plt:0000000000001410 ; void __noreturn abort(void)
.plt:0000000000001410 _abort          proc near               ; CODE XREF: set_program_name+9A↓p
.plt:0000000000001410                                         ; quotearg_buffer_restyled:def_22F1↓p ...
.plt:0000000000001410                 jmp     cs:abort_ptr
.plt:0000000000001410 _abort          endp
.plt:0000000000001410
.plt:0000000000001416 ; ---------------------------------------------------------------------------
.plt:0000000000001416                 push    2
.plt:000000000000141B                 jmp     sub_13E0
.plt:0000000000001420
.plt:0000000000001420 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001420
.plt:0000000000001420 ; Attributes: thunk
.plt:0000000000001420
.plt:0000000000001420 ; int *__errno_location(void)
.plt:0000000000001420 ___errno_location proc near             ; CODE XREF: close_stdout+16↓p
.plt:0000000000001420                                         ; quotearg_n_options+1C↓p ...
.plt:0000000000001420                 jmp     cs:__errno_location_ptr
.plt:0000000000001420 ___errno_location endp
.plt:0000000000001420
.plt:0000000000001426 ; ---------------------------------------------------------------------------
.plt:0000000000001426                 push    3
.plt:000000000000142B                 jmp     sub_13E0
.plt:0000000000001430
.plt:0000000000001430 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001430
.plt:0000000000001430 ; Attributes: thunk
.plt:0000000000001430
.plt:0000000000001430 ; int strncmp(const char *s1, const char *s2, size_t n)
.plt:0000000000001430 _strncmp        proc near               ; CODE XREF: usage+22C↓p
.plt:0000000000001430                                         ; usage+2ED↓p
.plt:0000000000001430                 jmp     cs:strncmp_ptr
.plt:0000000000001430 _strncmp        endp
.plt:0000000000001430
.plt:0000000000001436 ; ---------------------------------------------------------------------------
.plt:0000000000001436                 push    4
.plt:000000000000143B                 jmp     sub_13E0
.plt:0000000000001440
.plt:0000000000001440 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001440
.plt:0000000000001440 ; Attributes: noreturn thunk
.plt:0000000000001440
.plt:0000000000001440 ; void __noreturn _exit(int status)
.plt:0000000000001440 __exit          proc near               ; CODE XREF: close_stdout+88↓p
.plt:0000000000001440                 jmp     cs:_exit_ptr
.plt:0000000000001440 __exit          endp
.plt:0000000000001440
.plt:0000000000001446 ; ---------------------------------------------------------------------------
.plt:0000000000001446                 push    5
.plt:000000000000144B                 jmp     sub_13E0
.plt:0000000000001450
.plt:0000000000001450 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001450
.plt:0000000000001450 ; Attributes: thunk
.plt:0000000000001450
.plt:0000000000001450 ; size_t __fpending(FILE *fp)
.plt:0000000000001450 ___fpending     proc near               ; CODE XREF: close_stream+7↓p
.plt:0000000000001450                 jmp     cs:__fpending_ptr
.plt:0000000000001450 ___fpending     endp
.plt:0000000000001450
.plt:0000000000001456 ; ---------------------------------------------------------------------------
.plt:0000000000001456                 push    6
.plt:000000000000145B                 jmp     sub_13E0
.plt:0000000000001460
.plt:0000000000001460 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001460
.plt:0000000000001460 ; Attributes: thunk
.plt:0000000000001460
.plt:0000000000001460 ; char *textdomain(const char *domainname)
.plt:0000000000001460 _textdomain     proc near               ; CODE XREF: main+4B↓p
.plt:0000000000001460                 jmp     cs:textdomain_ptr
.plt:0000000000001460 _textdomain     endp
.plt:0000000000001460
.plt:0000000000001466 ; ---------------------------------------------------------------------------
.plt:0000000000001466                 push    7
.plt:000000000000146B                 jmp     sub_13E0
.plt:0000000000001470
.plt:0000000000001470 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001470
.plt:0000000000001470 ; Attributes: thunk
.plt:0000000000001470
.plt:0000000000001470 ; int fclose(FILE *stream)
.plt:0000000000001470 _fclose         proc near               ; CODE XREF: rpl_fclose+36↓p
.plt:0000000000001470                                         ; rpl_fclose+6B↓j
.plt:0000000000001470                 jmp     cs:fclose_ptr
.plt:0000000000001470 _fclose         endp
.plt:0000000000001470
.plt:0000000000001476 ; ---------------------------------------------------------------------------
.plt:0000000000001476                 push    8
.plt:000000000000147B                 jmp     sub_13E0
.plt:0000000000001480
.plt:0000000000001480 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001480
.plt:0000000000001480 ; Attributes: thunk
.plt:0000000000001480
.plt:0000000000001480 ; int __sched_cpucount(size_t setsize, const cpu_set_t *setp)
.plt:0000000000001480 ___sched_cpucount proc near             ; CODE XREF: num_processors_via_affinity_mask+58↓p
.plt:0000000000001480                 jmp     cs:__sched_cpucount_ptr
.plt:0000000000001480 ___sched_cpucount endp
.plt:0000000000001480
.plt:0000000000001486 ; ---------------------------------------------------------------------------
.plt:0000000000001486                 push    9
.plt:000000000000148B                 jmp     sub_13E0
.plt:0000000000001490
.plt:0000000000001490 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001490
.plt:0000000000001490 ; Attributes: thunk
.plt:0000000000001490
.plt:0000000000001490 ; char *bindtextdomain(const char *domainname, const char *dirname)
.plt:0000000000001490 _bindtextdomain proc near               ; CODE XREF: main+3F↓p
.plt:0000000000001490                 jmp     cs:bindtextdomain_ptr
.plt:0000000000001490 _bindtextdomain endp
.plt:0000000000001490
.plt:0000000000001496 ; ---------------------------------------------------------------------------
.plt:0000000000001496                 push    0Ah
.plt:000000000000149B                 jmp     sub_13E0
.plt:00000000000014A0
.plt:00000000000014A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014A0
.plt:00000000000014A0 ; Attributes: thunk
.plt:00000000000014A0
.plt:00000000000014A0 ; char *dcgettext(const char *domainname, const char *msgid, int category)
.plt:00000000000014A0 _dcgettext      proc near               ; CODE XREF: main+B1↓p
.plt:00000000000014A0                                         ; main+182↓p ...
.plt:00000000000014A0                 jmp     cs:dcgettext_ptr
.plt:00000000000014A0 _dcgettext      endp
.plt:00000000000014A0
.plt:00000000000014A6 ; ---------------------------------------------------------------------------
.plt:00000000000014A6                 push    0Bh
.plt:00000000000014AB                 jmp     sub_13E0
.plt:00000000000014B0
.plt:00000000000014B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014B0
.plt:00000000000014B0 ; Attributes: thunk
.plt:00000000000014B0
.plt:00000000000014B0 ; size_t __ctype_get_mb_cur_max(void)
.plt:00000000000014B0 ___ctype_get_mb_cur_max proc near       ; CODE XREF: quotearg_buffer_restyled+6C↓p
.plt:00000000000014B0                 jmp     cs:__ctype_get_mb_cur_max_ptr
.plt:00000000000014B0 ___ctype_get_mb_cur_max endp
.plt:00000000000014B0
.plt:00000000000014B6 ; ---------------------------------------------------------------------------
.plt:00000000000014B6                 push    0Ch
.plt:00000000000014BB                 jmp     sub_13E0
.plt:00000000000014C0
.plt:00000000000014C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014C0
.plt:00000000000014C0 ; Attributes: thunk
.plt:00000000000014C0
.plt:00000000000014C0 ; size_t strlen(const char *s)
.plt:00000000000014C0 _strlen         proc near               ; CODE XREF: quotearg_buffer_restyled+157↓p
.plt:00000000000014C0                                         ; quotearg_buffer_restyled+8DB↓p ...
.plt:00000000000014C0                 jmp     cs:strlen_ptr
.plt:00000000000014C0 _strlen         endp
.plt:00000000000014C0
.plt:00000000000014C6 ; ---------------------------------------------------------------------------
.plt:00000000000014C6                 push    0Dh
.plt:00000000000014CB                 jmp     sub_13E0
.plt:00000000000014D0
.plt:00000000000014D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014D0
.plt:00000000000014D0 ; Attributes: noreturn thunk
.plt:00000000000014D0
.plt:00000000000014D0 ___stack_chk_fail proc near             ; CODE XREF: num_processors_via_affinity_mask:loc_1E56↓p
.plt:00000000000014D0                                         ; parse_omp_threads_part_0:loc_1F6C↓p ...
.plt:00000000000014D0                 jmp     cs:__stack_chk_fail_ptr
.plt:00000000000014D0 ___stack_chk_fail endp
.plt:00000000000014D0
.plt:00000000000014D6 ; ---------------------------------------------------------------------------
.plt:00000000000014D6                 push    0Eh
.plt:00000000000014DB                 jmp     sub_13E0
.plt:00000000000014E0
.plt:00000000000014E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014E0
.plt:00000000000014E0 ; Attributes: thunk
.plt:00000000000014E0
.plt:00000000000014E0 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
.plt:00000000000014E0 _getopt_long    proc near               ; CODE XREF: main+72↓p
.plt:00000000000014E0                 jmp     cs:getopt_long_ptr
.plt:00000000000014E0 _getopt_long    endp
.plt:00000000000014E0
.plt:00000000000014E6 ; ---------------------------------------------------------------------------
.plt:00000000000014E6                 push    0Fh
.plt:00000000000014EB                 jmp     sub_13E0
.plt:00000000000014F0
.plt:00000000000014F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014F0
.plt:00000000000014F0 ; Attributes: thunk
.plt:00000000000014F0
.plt:00000000000014F0 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
.plt:00000000000014F0 _mbrtowc        proc near               ; CODE XREF: rpl_mbrtowc+32↓p
.plt:00000000000014F0                 jmp     cs:mbrtowc_ptr
.plt:00000000000014F0 _mbrtowc        endp
.plt:00000000000014F0
.plt:00000000000014F6 ; ---------------------------------------------------------------------------
.plt:00000000000014F6                 push    10h
.plt:00000000000014FB                 jmp     sub_13E0
.plt:0000000000001500
.plt:0000000000001500 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001500
.plt:0000000000001500 ; Attributes: thunk
.plt:0000000000001500
.plt:0000000000001500 ; char *strchr(const char *s, int c)
.plt:0000000000001500 _strchr         proc near               ; CODE XREF: xstrtoumax+123↓p
.plt:0000000000001500                                         ; xstrtoumax+143↓p ...
.plt:0000000000001500                 jmp     cs:strchr_ptr
.plt:0000000000001500 _strchr         endp
.plt:0000000000001500
.plt:0000000000001506 ; ---------------------------------------------------------------------------
.plt:0000000000001506                 push    11h
.plt:000000000000150B                 jmp     sub_13E0
.plt:0000000000001510
.plt:0000000000001510 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001510
.plt:0000000000001510 ; Attributes: thunk
.plt:0000000000001510
.plt:0000000000001510 ; char *strrchr(const char *s, int c)
.plt:0000000000001510 _strrchr        proc near               ; CODE XREF: set_program_name+E↓p
.plt:0000000000001510                 jmp     cs:strrchr_ptr
.plt:0000000000001510 _strrchr        endp
.plt:0000000000001510
.plt:0000000000001516 ; ---------------------------------------------------------------------------
.plt:0000000000001516                 push    12h
.plt:000000000000151B                 jmp     sub_13E0
.plt:0000000000001520
.plt:0000000000001520 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001520
.plt:0000000000001520 ; Attributes: thunk
.plt:0000000000001520
.plt:0000000000001520 ; __off_t lseek(int fd, __off_t offset, int whence)
.plt:0000000000001520 _lseek          proc near               ; CODE XREF: rpl_fclose+59↓p
.plt:0000000000001520                                         ; rpl_fseeko+3B↓p
.plt:0000000000001520                 jmp     cs:lseek_ptr
.plt:0000000000001520 _lseek          endp
.plt:0000000000001520
.plt:0000000000001526 ; ---------------------------------------------------------------------------
.plt:0000000000001526                 push    13h
.plt:000000000000152B                 jmp     sub_13E0
.plt:0000000000001530
.plt:0000000000001530 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001530
.plt:0000000000001530 ; Attributes: noreturn thunk
.plt:0000000000001530
.plt:0000000000001530 ; void __noreturn __assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
.plt:0000000000001530 ___assert_fail  proc near               ; CODE XREF: xstrtoumax+39F↓p
.plt:0000000000001530                 jmp     cs:__assert_fail_ptr
.plt:0000000000001530 ___assert_fail  endp
.plt:0000000000001530
.plt:0000000000001536 ; ---------------------------------------------------------------------------
.plt:0000000000001536                 push    14h
.plt:000000000000153B                 jmp     sub_13E0
.plt:0000000000001540
.plt:0000000000001540 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001540
.plt:0000000000001540 ; Attributes: thunk
.plt:0000000000001540
.plt:0000000000001540 ; unsigned __int64 __strtoul_internal(const char *nptr, char **endptr, int base, int group)
.plt:0000000000001540 ___strtoul_internal proc near           ; CODE XREF: xstrtoumax+8E↓p
.plt:0000000000001540                 jmp     cs:__strtoul_internal_ptr
.plt:0000000000001540 ___strtoul_internal endp
.plt:0000000000001540
.plt:0000000000001546 ; ---------------------------------------------------------------------------
.plt:0000000000001546                 push    15h
.plt:000000000000154B                 jmp     sub_13E0
.plt:0000000000001550
.plt:0000000000001550 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001550
.plt:0000000000001550 ; Attributes: thunk
.plt:0000000000001550
.plt:0000000000001550 ; void *memset(void *s, int c, size_t n)
.plt:0000000000001550 _memset         proc near               ; CODE XREF: quotearg_n_options+99↓p
.plt:0000000000001550                                         ; xzalloc+12↓j
.plt:0000000000001550                 jmp     cs:memset_ptr
.plt:0000000000001550 _memset         endp
.plt:0000000000001550
.plt:0000000000001556 ; ---------------------------------------------------------------------------
.plt:0000000000001556                 push    16h
.plt:000000000000155B                 jmp     sub_13E0
.plt:0000000000001560
.plt:0000000000001560 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001560
.plt:0000000000001560 ; Attributes: thunk
.plt:0000000000001560
.plt:0000000000001560 ; int memcmp(const void *s1, const void *s2, size_t n)
.plt:0000000000001560 _memcmp         proc near               ; CODE XREF: quotearg_buffer_restyled+19A↓p
.plt:0000000000001560                 jmp     cs:memcmp_ptr
.plt:0000000000001560 _memcmp         endp
.plt:0000000000001560
.plt:0000000000001566 ; ---------------------------------------------------------------------------
.plt:0000000000001566                 push    17h
.plt:000000000000156B                 jmp     sub_13E0
.plt:0000000000001570
.plt:0000000000001570 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001570
.plt:0000000000001570 ; Attributes: thunk
.plt:0000000000001570
.plt:0000000000001570 ; int fputs_unlocked(const char *s, FILE *stream)
.plt:0000000000001570 _fputs_unlocked proc near               ; CODE XREF: usage+9D↓p
.plt:0000000000001570                                         ; usage+C2↓p ...
.plt:0000000000001570                 jmp     cs:fputs_unlocked_ptr
.plt:0000000000001570 _fputs_unlocked endp
.plt:0000000000001570
.plt:0000000000001576 ; ---------------------------------------------------------------------------
.plt:0000000000001576                 push    18h
.plt:000000000000157B                 jmp     sub_13E0
.plt:0000000000001580
.plt:0000000000001580 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001580
.plt:0000000000001580 ; Attributes: thunk
.plt:0000000000001580
.plt:0000000000001580 ; void *calloc(size_t nmemb, size_t size)
.plt:0000000000001580 _calloc         proc near               ; CODE XREF: xcalloc+1A↓p
.plt:0000000000001580                 jmp     cs:calloc_ptr
.plt:0000000000001580 _calloc         endp
.plt:0000000000001580
.plt:0000000000001586 ; ---------------------------------------------------------------------------
.plt:0000000000001586                 push    19h
.plt:000000000000158B                 jmp     sub_13E0
.plt:0000000000001590
.plt:0000000000001590 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001590
.plt:0000000000001590 ; Attributes: thunk
.plt:0000000000001590
.plt:0000000000001590 ; void *memcpy(void *dest, const void *src, size_t n)
.plt:0000000000001590 _memcpy         proc near               ; CODE XREF: xmemdup+23↓j
.plt:0000000000001590                 jmp     cs:memcpy_ptr
.plt:0000000000001590 _memcpy         endp
.plt:0000000000001590
.plt:0000000000001596 ; ---------------------------------------------------------------------------
.plt:0000000000001596                 push    1Ah
.plt:000000000000159B                 jmp     sub_13E0
.plt:00000000000015A0
.plt:00000000000015A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015A0
.plt:00000000000015A0 ; Attributes: thunk
.plt:00000000000015A0
.plt:00000000000015A0 ; int fileno(FILE *stream)
.plt:00000000000015A0 _fileno         proc near               ; CODE XREF: rpl_fclose+7↓p
.plt:00000000000015A0                                         ; rpl_fclose+4B↓p ...
.plt:00000000000015A0                 jmp     cs:fileno_ptr
.plt:00000000000015A0 _fileno         endp
.plt:00000000000015A0
.plt:00000000000015A6 ; ---------------------------------------------------------------------------
.plt:00000000000015A6                 push    1Bh
.plt:00000000000015AB                 jmp     sub_13E0
.plt:00000000000015B0
.plt:00000000000015B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015B0
.plt:00000000000015B0 ; Attributes: thunk
.plt:00000000000015B0
.plt:00000000000015B0 ; void *malloc(size_t size)
.plt:00000000000015B0 _malloc         proc near               ; CODE XREF: xmalloc+4↓p
.plt:00000000000015B0                 jmp     cs:malloc_ptr
.plt:00000000000015B0 _malloc         endp
.plt:00000000000015B0
.plt:00000000000015B6 ; ---------------------------------------------------------------------------
.plt:00000000000015B6                 push    1Ch
.plt:00000000000015BB                 jmp     sub_13E0
.plt:00000000000015C0
.plt:00000000000015C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015C0
.plt:00000000000015C0 ; Attributes: thunk
.plt:00000000000015C0
.plt:00000000000015C0 ; int fflush(FILE *stream)
.plt:00000000000015C0 _fflush         proc near               ; CODE XREF: rpl_fflush+1E↓j
.plt:00000000000015C0                                         ; rpl_fflush+3B↓j
.plt:00000000000015C0                 jmp     cs:fflush_ptr
.plt:00000000000015C0 _fflush         endp
.plt:00000000000015C0
.plt:00000000000015C6 ; ---------------------------------------------------------------------------
.plt:00000000000015C6                 push    1Dh
.plt:00000000000015CB                 jmp     sub_13E0
.plt:00000000000015D0
.plt:00000000000015D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015D0
.plt:00000000000015D0 ; Attributes: thunk
.plt:00000000000015D0
.plt:00000000000015D0 ; char *nl_langinfo(nl_item item)
.plt:00000000000015D0 _nl_langinfo    proc near               ; CODE XREF: locale_charset+9↓p
.plt:00000000000015D0                 jmp     cs:nl_langinfo_ptr
.plt:00000000000015D0 _nl_langinfo    endp
.plt:00000000000015D0
.plt:00000000000015D6 ; ---------------------------------------------------------------------------
.plt:00000000000015D6                 push    1Eh
.plt:00000000000015DB                 jmp     sub_13E0
.plt:00000000000015E0
.plt:00000000000015E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015E0
.plt:00000000000015E0 ; Attributes: thunk
.plt:00000000000015E0
.plt:00000000000015E0 ; int __freading(FILE *fp)
.plt:00000000000015E0 ___freading     proc near               ; CODE XREF: rpl_fclose+13↓p
.plt:00000000000015E0                                         ; rpl_fflush+9↓p
.plt:00000000000015E0                 jmp     cs:__freading_ptr
.plt:00000000000015E0 ___freading     endp
.plt:00000000000015E0
.plt:00000000000015E6 ; ---------------------------------------------------------------------------
.plt:00000000000015E6                 push    1Fh
.plt:00000000000015EB                 jmp     sub_13E0
.plt:00000000000015F0
.plt:00000000000015F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015F0
.plt:00000000000015F0 ; Attributes: thunk
.plt:00000000000015F0
.plt:00000000000015F0 ; void *realloc(void *ptr, size_t size)
.plt:00000000000015F0 _realloc        proc near               ; CODE XREF: xrealloc+11↓p
.plt:00000000000015F0                 jmp     cs:realloc_ptr
.plt:00000000000015F0 _realloc        endp
.plt:00000000000015F0
.plt:00000000000015F6 ; ---------------------------------------------------------------------------
.plt:00000000000015F6                 push    20h ; ' '
.plt:00000000000015FB                 jmp     sub_13E0
.plt:0000000000001600
.plt:0000000000001600 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001600
.plt:0000000000001600 ; Attributes: thunk
.plt:0000000000001600
.plt:0000000000001600 ; char *setlocale(int category, const char *locale)
.plt:0000000000001600 _setlocale      proc near               ; CODE XREF: main+2C↓p
.plt:0000000000001600                                         ; usage+213↓p ...
.plt:0000000000001600                 jmp     cs:setlocale_ptr
.plt:0000000000001600 _setlocale      endp
.plt:0000000000001600
.plt:0000000000001606 ; ---------------------------------------------------------------------------
.plt:0000000000001606                 push    21h ; '!'
.plt:000000000000160B                 jmp     sub_13E0
.plt:0000000000001610
.plt:0000000000001610 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001610
.plt:0000000000001610 ; Attributes: thunk
.plt:0000000000001610
.plt:0000000000001610 ___printf_chk   proc near               ; CODE XREF: main+159↓p
.plt:0000000000001610                                         ; usage+78↓p ...
.plt:0000000000001610                 jmp     cs:__printf_chk_ptr
.plt:0000000000001610 ___printf_chk   endp
.plt:0000000000001610
.plt:0000000000001616 ; ---------------------------------------------------------------------------
.plt:0000000000001616                 push    22h ; '"'
.plt:000000000000161B                 jmp     sub_13E0
.plt:0000000000001620
.plt:0000000000001620 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001620
.plt:0000000000001620 ; Attributes: thunk
.plt:0000000000001620
.plt:0000000000001620 ; void error(int status, int errnum, const char *format, ...)
.plt:0000000000001620 _error          proc near               ; CODE XREF: main+193↓p
.plt:0000000000001620                                         ; close_stdout+7D↓p ...
.plt:0000000000001620                 jmp     cs:error_ptr
.plt:0000000000001620 _error          endp
.plt:0000000000001620
.plt:0000000000001626 ; ---------------------------------------------------------------------------
.plt:0000000000001626                 push    23h ; '#'
.plt:000000000000162B                 jmp     sub_13E0
.plt:0000000000001630
.plt:0000000000001630 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001630
.plt:0000000000001630 ; Attributes: thunk
.plt:0000000000001630
.plt:0000000000001630 ; int fseeko(FILE *stream, __off_t off, int whence)
.plt:0000000000001630 _fseeko         proc near               ; CODE XREF: rpl_fseeko:loc_4E7A↓j
.plt:0000000000001630                 jmp     cs:fseeko_ptr
.plt:0000000000001630 _fseeko         endp
.plt:0000000000001630
.plt:0000000000001636 ; ---------------------------------------------------------------------------
.plt:0000000000001636                 push    24h ; '$'
.plt:000000000000163B                 jmp     sub_13E0
.plt:0000000000001640
.plt:0000000000001640 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001640
.plt:0000000000001640 ; Attributes: thunk
.plt:0000000000001640
.plt:0000000000001640 ; __int64 sysconf(int name)
.plt:0000000000001640 _sysconf        proc near               ; CODE XREF: num_processors+19↓p
.plt:0000000000001640                                         ; num_processors+126↓p
.plt:0000000000001640                 jmp     cs:sysconf_ptr
.plt:0000000000001640 _sysconf        endp
.plt:0000000000001640
.plt:0000000000001646 ; ---------------------------------------------------------------------------
.plt:0000000000001646                 push    25h ; '%'
.plt:000000000000164B                 jmp     sub_13E0
.plt:0000000000001650
.plt:0000000000001650 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001650
.plt:0000000000001650 ; Attributes: thunk
.plt:0000000000001650
.plt:0000000000001650 ; unsigned __int64 strtoul(const char *nptr, char **endptr, int base)
.plt:0000000000001650 _strtoul        proc near               ; CODE XREF: parse_omp_threads_part_0+9A↓p
.plt:0000000000001650                 jmp     cs:strtoul_ptr
.plt:0000000000001650 _strtoul        endp
.plt:0000000000001650
.plt:0000000000001656 ; ---------------------------------------------------------------------------
.plt:0000000000001656                 push    26h ; '&'
.plt:000000000000165B                 jmp     sub_13E0
.plt:0000000000001660
.plt:0000000000001660 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001660
.plt:0000000000001660 ; Attributes: thunk
.plt:0000000000001660
.plt:0000000000001660 ; int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
.plt:0000000000001660 ___cxa_atexit   proc near               ; CODE XREF: atexit+9↓j
.plt:0000000000001660                 jmp     cs:__cxa_atexit_ptr
.plt:0000000000001660 ___cxa_atexit   endp
.plt:0000000000001660
.plt:0000000000001666 ; ---------------------------------------------------------------------------
.plt:0000000000001666                 push    27h ; '''
.plt:000000000000166B                 jmp     sub_13E0
.plt:0000000000001670
.plt:0000000000001670 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001670
.plt:0000000000001670 ; Attributes: noreturn thunk
.plt:0000000000001670
.plt:0000000000001670 ; void __noreturn exit(int status)
.plt:0000000000001670 _exit           proc near               ; CODE XREF: main+11A↓p
.plt:0000000000001670                                         ; usage+58↓p
.plt:0000000000001670                 jmp     cs:exit_ptr
.plt:0000000000001670 _exit           endp
.plt:0000000000001670
.plt:0000000000001676 ; ---------------------------------------------------------------------------
.plt:0000000000001676                 push    28h ; '('
.plt:000000000000167B                 jmp     sub_13E0
.plt:0000000000001680
.plt:0000000000001680 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001680
.plt:0000000000001680 ; Attributes: thunk
.plt:0000000000001680
.plt:0000000000001680 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
.plt:0000000000001680 _fwrite         proc near               ; CODE XREF: set_program_name+95↓p
.plt:0000000000001680                 jmp     cs:fwrite_ptr
.plt:0000000000001680 _fwrite         endp
.plt:0000000000001680
.plt:0000000000001686 ; ---------------------------------------------------------------------------
.plt:0000000000001686                 push    29h ; ')'
.plt:000000000000168B                 jmp     sub_13E0
.plt:0000000000001690
.plt:0000000000001690 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001690
.plt:0000000000001690 ; Attributes: thunk
.plt:0000000000001690
.plt:0000000000001690 ___fprintf_chk  proc near               ; CODE XREF: usage+51↓p
.plt:0000000000001690                                         ; version_etc_arn+37↓p ...
.plt:0000000000001690                 jmp     cs:__fprintf_chk_ptr
.plt:0000000000001690 ___fprintf_chk  endp
.plt:0000000000001690
.plt:0000000000001696 ; ---------------------------------------------------------------------------
.plt:0000000000001696                 push    2Ah ; '*'
.plt:000000000000169B                 jmp     sub_13E0
.plt:00000000000016A0
.plt:00000000000016A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016A0
.plt:00000000000016A0 ; Attributes: thunk
.plt:00000000000016A0
.plt:00000000000016A0 ; int sched_getaffinity(__pid_t pid, size_t cpusetsize, cpu_set_t *cpuset)
.plt:00000000000016A0 _sched_getaffinity proc near            ; CODE XREF: num_processors_via_affinity_mask+28↓p
.plt:00000000000016A0                 jmp     cs:sched_getaffinity_ptr
.plt:00000000000016A0 _sched_getaffinity endp
.plt:00000000000016A0
.plt:00000000000016A6 ; ---------------------------------------------------------------------------
.plt:00000000000016A6                 push    2Bh ; '+'
.plt:00000000000016AB                 jmp     sub_13E0
.plt:00000000000016B0
.plt:00000000000016B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016B0
.plt:00000000000016B0 ; Attributes: thunk
.plt:00000000000016B0
.plt:00000000000016B0 ; int mbsinit(const mbstate_t *ps)
.plt:00000000000016B0 _mbsinit        proc near               ; CODE XREF: quotearg_buffer_restyled+9A8↓p
.plt:00000000000016B0                 jmp     cs:mbsinit_ptr
.plt:00000000000016B0 _mbsinit        endp
.plt:00000000000016B0
.plt:00000000000016B6 ; ---------------------------------------------------------------------------
.plt:00000000000016B6                 push    2Ch ; ','
.plt:00000000000016BB                 jmp     sub_13E0
.plt:00000000000016C0
.plt:00000000000016C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016C0
.plt:00000000000016C0 ; Attributes: thunk
.plt:00000000000016C0
.plt:00000000000016C0 ; int iswprint(wint_t wc)
.plt:00000000000016C0 _iswprint       proc near               ; CODE XREF: quotearg_buffer_restyled+990↓p
.plt:00000000000016C0                 jmp     cs:iswprint_ptr
.plt:00000000000016C0 _iswprint       endp
.plt:00000000000016C0
.plt:00000000000016C6 ; ---------------------------------------------------------------------------
.plt:00000000000016C6                 push    2Dh ; '-'
.plt:00000000000016CB                 jmp     sub_13E0
.plt:00000000000016D0
.plt:00000000000016D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016D0
.plt:00000000000016D0 ; Attributes: thunk
.plt:00000000000016D0
.plt:00000000000016D0 ; const unsigned __int16 **__ctype_b_loc(void)
.plt:00000000000016D0 ___ctype_b_loc  proc near               ; CODE XREF: quotearg_buffer_restyled+513↓p
.plt:00000000000016D0                                         ; xstrtoumax+55↓p
.plt:00000000000016D0                 jmp     cs:__ctype_b_loc_ptr
.plt:00000000000016D0 ___ctype_b_loc  endp
.plt:00000000000016D0
.plt:00000000000016D6 ; ---------------------------------------------------------------------------
.plt:00000000000016D6                 push    2Eh ; '.'
.plt:00000000000016DB                 jmp     sub_13E0
.plt:00000000000016DB ; } // starts at 13E0
.plt:00000000000016DB _plt            ends
.plt:00000000000016DB
.plt.got:00000000000016E0 ; ===========================================================================
.plt.got:00000000000016E0
.plt.got:00000000000016E0 ; Segment type: Pure code
.plt.got:00000000000016E0 ; Segment permissions: Read/Execute
.plt.got:00000000000016E0 _plt_got        segment qword public 'CODE' use64
.plt.got:00000000000016E0                 assume cs:_plt_got
.plt.got:00000000000016E0                 ;org 16E0h
.plt.got:00000000000016E0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:00000000000016E0
.plt.got:00000000000016E0 ; =============== S U B R O U T I N E =======================================
.plt.got:00000000000016E0
.plt.got:00000000000016E0 ; Attributes: thunk
.plt.got:00000000000016E0
.plt.got:00000000000016E0 ; int __fastcall _cxa_finalize(void *)
.plt.got:00000000000016E0 __cxa_finalize  proc near               ; CODE XREF: __do_global_dtors_aux+1E↓p
.plt.got:00000000000016E0 ; __unwind {
.plt.got:00000000000016E0                 jmp     cs:__cxa_finalize_ptr
.plt.got:00000000000016E0 __cxa_finalize  endp
.plt.got:00000000000016E0
.plt.got:00000000000016E0 ; ---------------------------------------------------------------------------
.plt.got:00000000000016E6                 align 8
.plt.got:00000000000016E6 ; } // starts at 16E0
.plt.got:00000000000016E6 _plt_got        ends
.plt.got:00000000000016E6
LOAD:00000000000016E8 ; ===========================================================================
LOAD:00000000000016E8
LOAD:00000000000016E8 ; Segment type: Pure code
LOAD:00000000000016E8 ; Segment permissions: Read/Execute
LOAD:00000000000016E8 LOAD            segment byte public 'CODE' use64
LOAD:00000000000016E8                 assume cs:LOAD
LOAD:00000000000016E8                 ;org 16E8h
LOAD:00000000000016E8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000016E8                 align 10h
LOAD:00000000000016E8 LOAD            ends
LOAD:00000000000016E8
.text:00000000000016F0 ; ===========================================================================
.text:00000000000016F0
.text:00000000000016F0 ; Segment type: Pure code
.text:00000000000016F0 ; Segment permissions: Read/Execute
.text:00000000000016F0 _text           segment para public 'CODE' use64
.text:00000000000016F0                 assume cs:_text
.text:00000000000016F0                 ;org 16F0h
.text:00000000000016F0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00000000000016F0
.text:00000000000016F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000016F0
.text:00000000000016F0
.text:00000000000016F0 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:00000000000016F0                 public main
.text:00000000000016F0 main            proc near               ; DATA XREF: start+1D↓o
.text:00000000000016F0 ; __unwind {
.text:00000000000016F0                 push    r13
.text:00000000000016F2                 push    r12
.text:00000000000016F4                 mov     r13d, 2
.text:00000000000016FA                 push    rbp
.text:00000000000016FB                 push    rbx
.text:00000000000016FC                 mov     ebp, edi
.text:00000000000016FE                 mov     rbx, rsi
.text:0000000000001701                 xor     r12d, r12d
.text:0000000000001704                 sub     rsp, 8
.text:0000000000001708                 mov     rdi, [rsi]
.text:000000000000170B                 call    set_program_name
.text:0000000000001710                 lea     rsi, aUsageSOption+16h ; locale
.text:0000000000001717                 mov     edi, 6          ; category
.text:000000000000171C                 call    _setlocale
.text:0000000000001721                 lea     rsi, dirname    ; "/usr/local/share/locale"
.text:0000000000001728                 lea     rdi, domainname ; "coreutils"
.text:000000000000172F                 call    _bindtextdomain
.text:0000000000001734                 lea     rdi, domainname ; "coreutils"
.text:000000000000173B                 call    _textdomain
.text:0000000000001740                 lea     rdi, close_stdout
.text:0000000000001747                 call    atexit
.text:000000000000174C
.text:000000000000174C loc_174C:                               ; CODE XREF: main+DB↓j
.text:000000000000174C                                         ; main+123↓j
.text:000000000000174C                 lea     rcx, longopts   ; longopts
.text:0000000000001753                 lea     rdx, aUsageSOption+16h ; shortopts
.text:000000000000175A                 xor     r8d, r8d        ; longind
.text:000000000000175D                 mov     rsi, rbx        ; argv
.text:0000000000001760                 mov     edi, ebp        ; argc
.text:0000000000001762                 call    _getopt_long
.text:0000000000001767                 cmp     eax, 0FFFFFFFFh
.text:000000000000176A                 jz      loc_1818
.text:0000000000001770                 cmp     eax, 0FFFFFF7Eh
.text:0000000000001775                 jz      loc_1892
.text:000000000000177B                 jle     short loc_17D0
.text:000000000000177D                 cmp     eax, 80h
.text:0000000000001782                 jz      loc_1810
.text:0000000000001788                 cmp     eax, 81h
.text:000000000000178D                 jnz     loc_1888
.text:0000000000001793                 lea     rsi, msgid      ; "invalid number"
.text:000000000000179A                 mov     edx, 5          ; category
.text:000000000000179F                 xor     edi, edi        ; domainname
.text:00000000000017A1                 call    _dcgettext
.text:00000000000017A6                 mov     rdi, cs:optarg@@GLIBC_2_2_5
.text:00000000000017AD                 lea     rcx, aUsageSOption+16h ; ""
.text:00000000000017B4                 mov     r8, rax
.text:00000000000017B7                 xor     r9d, r9d
.text:00000000000017BA                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000017C1                 xor     esi, esi
.text:00000000000017C3                 call    xdectoumax
.text:00000000000017C8                 mov     r12, rax
.text:00000000000017CB                 jmp     loc_174C
.text:00000000000017D0 ; ---------------------------------------------------------------------------
.text:00000000000017D0
.text:00000000000017D0 loc_17D0:                               ; CODE XREF: main+8B↑j
.text:00000000000017D0                 cmp     eax, 0FFFFFF7Dh
.text:00000000000017D5                 jnz     loc_1888
.text:00000000000017DB                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:00000000000017E2                 mov     rcx, cs:Version
.text:00000000000017E9                 lea     r8, aGiuseppeScriva ; "Giuseppe Scrivano"
.text:00000000000017F0                 lea     rdx, unk_5017
.text:00000000000017F7                 lea     rsi, aNproc     ; "nproc"
.text:00000000000017FE                 xor     r9d, r9d
.text:0000000000001801                 xor     eax, eax
.text:0000000000001803                 call    version_etc
.text:0000000000001808                 xor     edi, edi        ; status
.text:000000000000180A                 call    _exit
.text:000000000000180A ; ---------------------------------------------------------------------------
.text:000000000000180F                 align 10h
.text:0000000000001810
.text:0000000000001810 loc_1810:                               ; CODE XREF: main+92↑j
.text:0000000000001810                 xor     r13d, r13d
.text:0000000000001813                 jmp     loc_174C
.text:0000000000001818 ; ---------------------------------------------------------------------------
.text:0000000000001818
.text:0000000000001818 loc_1818:                               ; CODE XREF: main+7A↑j
.text:0000000000001818                 movsxd  rax, cs:optind@@GLIBC_2_2_5
.text:000000000000181F                 cmp     eax, ebp
.text:0000000000001821                 jnz     short loc_1858
.text:0000000000001823                 mov     edi, r13d
.text:0000000000001826                 call    num_processors
.text:000000000000182B                 cmp     r12, rax
.text:000000000000182E                 mov     edx, 1
.text:0000000000001833                 jnb     short loc_183B
.text:0000000000001835                 sub     rax, r12
.text:0000000000001838                 mov     rdx, rax
.text:000000000000183B
.text:000000000000183B loc_183B:                               ; CODE XREF: main+143↑j
.text:000000000000183B                 lea     rsi, aLu        ; "%lu\n"
.text:0000000000001842                 mov     edi, 1
.text:0000000000001847                 xor     eax, eax
.text:0000000000001849                 call    ___printf_chk
.text:000000000000184E                 pop     rdx
.text:000000000000184F                 xor     eax, eax
.text:0000000000001851                 pop     rbx
.text:0000000000001852                 pop     rbp
.text:0000000000001853                 pop     r12
.text:0000000000001855                 pop     r13
.text:0000000000001857                 retn
.text:0000000000001858 ; ---------------------------------------------------------------------------
.text:0000000000001858
.text:0000000000001858 loc_1858:                               ; CODE XREF: main+131↑j
.text:0000000000001858                 mov     rdi, [rbx+rax*8]
.text:000000000000185C                 call    quote
.text:0000000000001861                 lea     rsi, aExtraOperandS ; "extra operand %s"
.text:0000000000001868                 mov     rbx, rax
.text:000000000000186B                 mov     edx, 5          ; category
.text:0000000000001870                 xor     edi, edi        ; domainname
.text:0000000000001872                 call    _dcgettext
.text:0000000000001877                 mov     rcx, rbx
.text:000000000000187A                 mov     rdx, rax        ; format
.text:000000000000187D                 xor     esi, esi        ; errnum
.text:000000000000187F                 xor     edi, edi        ; status
.text:0000000000001881                 xor     eax, eax
.text:0000000000001883                 call    _error
.text:0000000000001888
.text:0000000000001888 loc_1888:                               ; CODE XREF: main+9D↑j
.text:0000000000001888                                         ; main+E5↑j
.text:0000000000001888                 mov     edi, 1          ; status
.text:000000000000188D                 call    usage
.text:0000000000001892 ; ---------------------------------------------------------------------------
.text:0000000000001892
.text:0000000000001892 loc_1892:                               ; CODE XREF: main+85↑j
.text:0000000000001892                 xor     edi, edi        ; status
.text:0000000000001894                 call    usage
.text:0000000000001894 ; } // starts at 16F0
.text:0000000000001894 main            endp
.text:0000000000001894
.text:0000000000001894 ; ---------------------------------------------------------------------------
.text:0000000000001899                 align 20h
.text:00000000000018A0
.text:00000000000018A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000018A0
.text:00000000000018A0 ; Attributes: noreturn fuzzy-sp info_from_lumina
.text:00000000000018A0
.text:00000000000018A0 ; void __fastcall __noreturn start(__int64, __int64, void (*)(void))
.text:00000000000018A0                 public start
.text:00000000000018A0 start           proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:00000000000018A0 ; __unwind {
.text:00000000000018A0                 xor     ebp, ebp
.text:00000000000018A2                 mov     r9, rdx         ; rtld_fini
.text:00000000000018A5                 pop     rsi             ; argc
.text:00000000000018A6                 mov     rdx, rsp        ; ubp_av
.text:00000000000018A9                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:00000000000018AD                 push    rax
.text:00000000000018AE                 push    rsp             ; stack_end
.text:00000000000018AF                 lea     r8, __libc_csu_fini ; fini
.text:00000000000018B6                 lea     rcx, __libc_csu_init ; init
.text:00000000000018BD                 lea     rdi, main       ; main
.text:00000000000018C4                 call    cs:__libc_start_main_ptr
.text:00000000000018CA                 hlt
.text:00000000000018CA ; } // starts at 18A0
.text:00000000000018CA start           endp
.text:00000000000018CA
.text:00000000000018CA ; ---------------------------------------------------------------------------
.text:00000000000018CB                 align 10h
.text:00000000000018D0
.text:00000000000018D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000018D0
.text:00000000000018D0 ; Attributes: bp-based frame info_from_lumina
.text:00000000000018D0
.text:00000000000018D0 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_1983↓p
.text:00000000000018D0                 lea     rdi, __bss_start
.text:00000000000018D7                 push    rbp
.text:00000000000018D8                 lea     rax, __bss_start
.text:00000000000018DF                 cmp     rax, rdi
.text:00000000000018E2                 mov     rbp, rsp
.text:00000000000018E5                 jz      short loc_1900
.text:00000000000018E7                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:00000000000018EE                 test    rax, rax
.text:00000000000018F1                 jz      short loc_1900
.text:00000000000018F3                 pop     rbp
.text:00000000000018F4                 jmp     rax
.text:00000000000018F4 ; ---------------------------------------------------------------------------
.text:00000000000018F6                 align 20h
.text:0000000000001900
.text:0000000000001900 loc_1900:                               ; CODE XREF: deregister_tm_clones+15↑j
.text:0000000000001900                                         ; deregister_tm_clones+21↑j
.text:0000000000001900                 pop     rbp
.text:0000000000001901                 retn
.text:0000000000001901 deregister_tm_clones endp
.text:0000000000001901
.text:0000000000001901 ; ---------------------------------------------------------------------------
.text:0000000000001902                 align 10h
.text:0000000000001910
.text:0000000000001910 ; =============== S U B R O U T I N E =======================================
.text:0000000000001910
.text:0000000000001910 ; Attributes: bp-based frame info_from_lumina
.text:0000000000001910
.text:0000000000001910 register_tm_clones proc near            ; CODE XREF: frame_dummy+5↓j
.text:0000000000001910                 lea     rdi, __bss_start
.text:0000000000001917                 lea     rsi, __bss_start
.text:000000000000191E                 push    rbp
.text:000000000000191F                 sub     rsi, rdi
.text:0000000000001922                 mov     rbp, rsp
.text:0000000000001925                 sar     rsi, 3
.text:0000000000001929                 mov     rax, rsi
.text:000000000000192C                 shr     rax, 3Fh
.text:0000000000001930                 add     rsi, rax
.text:0000000000001933                 sar     rsi, 1
.text:0000000000001936                 jz      short loc_1950
.text:0000000000001938                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:000000000000193F                 test    rax, rax
.text:0000000000001942                 jz      short loc_1950
.text:0000000000001944                 pop     rbp
.text:0000000000001945                 jmp     rax
.text:0000000000001945 ; ---------------------------------------------------------------------------
.text:0000000000001947                 align 10h
.text:0000000000001950
.text:0000000000001950 loc_1950:                               ; CODE XREF: register_tm_clones+26↑j
.text:0000000000001950                                         ; register_tm_clones+32↑j
.text:0000000000001950                 pop     rbp
.text:0000000000001951                 retn
.text:0000000000001951 register_tm_clones endp
.text:0000000000001951
.text:0000000000001951 ; ---------------------------------------------------------------------------
.text:0000000000001952                 align 20h
.text:0000000000001960
.text:0000000000001960 ; =============== S U B R O U T I N E =======================================
.text:0000000000001960
.text:0000000000001960 ; Attributes: info_from_lumina
.text:0000000000001960
.text:0000000000001960 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:0000000000001960                 cmp     cs:completed_7697, 0
.text:0000000000001967                 jnz     short locret_1998
.text:0000000000001969                 cmp     cs:__cxa_finalize_ptr, 0
.text:0000000000001971                 push    rbp
.text:0000000000001972                 mov     rbp, rsp
.text:0000000000001975                 jz      short loc_1983
.text:0000000000001977                 mov     rdi, cs:__dso_handle ; void *
.text:000000000000197E                 call    __cxa_finalize
.text:0000000000001983
.text:0000000000001983 loc_1983:                               ; CODE XREF: __do_global_dtors_aux+15↑j
.text:0000000000001983                 call    deregister_tm_clones
.text:0000000000001988                 mov     cs:completed_7697, 1
.text:000000000000198F                 pop     rbp
.text:0000000000001990                 retn
.text:0000000000001990 ; ---------------------------------------------------------------------------
.text:0000000000001991                 align 8
.text:0000000000001998
.text:0000000000001998 locret_1998:                            ; CODE XREF: __do_global_dtors_aux+7↑j
.text:0000000000001998                 rep retn
.text:0000000000001998 __do_global_dtors_aux endp
.text:0000000000001998
.text:0000000000001998 ; ---------------------------------------------------------------------------
.text:000000000000199A                 align 20h
.text:00000000000019A0
.text:00000000000019A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000019A0
.text:00000000000019A0 ; Attributes: bp-based frame
.text:00000000000019A0
.text:00000000000019A0 frame_dummy     proc near               ; CODE XREF: __libc_csu_init+49↓p
.text:00000000000019A0                                         ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:00000000000019A0                 push    rbp
.text:00000000000019A1                 mov     rbp, rsp
.text:00000000000019A4                 pop     rbp
.text:00000000000019A5                 jmp     register_tm_clones
.text:00000000000019A5 frame_dummy     endp
.text:00000000000019A5
.text:00000000000019A5 ; ---------------------------------------------------------------------------
.text:00000000000019AA                 align 10h
.text:00000000000019B0
.text:00000000000019B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000019B0
.text:00000000000019B0 ; Attributes: noreturn
.text:00000000000019B0
.text:00000000000019B0 ; void __fastcall __noreturn usage(int status)
.text:00000000000019B0                 public usage
.text:00000000000019B0 usage           proc near               ; CODE XREF: main+19D↑p
.text:00000000000019B0                                         ; main+1A4↑p
.text:00000000000019B0
.text:00000000000019B0 var_A8          = qword ptr -0A8h
.text:00000000000019B0 var_A0          = qword ptr -0A0h
.text:00000000000019B0 var_98          = qword ptr -98h
.text:00000000000019B0 var_90          = qword ptr -90h
.text:00000000000019B0 var_88          = qword ptr -88h
.text:00000000000019B0 var_80          = qword ptr -80h
.text:00000000000019B0 var_78          = qword ptr -78h
.text:00000000000019B0 var_70          = qword ptr -70h
.text:00000000000019B0 var_68          = qword ptr -68h
.text:00000000000019B0 var_60          = qword ptr -60h
.text:00000000000019B0 var_58          = qword ptr -58h
.text:00000000000019B0 var_50          = qword ptr -50h
.text:00000000000019B0 var_48          = qword ptr -48h
.text:00000000000019B0 var_40          = qword ptr -40h
.text:00000000000019B0 var_30          = qword ptr -30h
.text:00000000000019B0
.text:00000000000019B0 ; __unwind {
.text:00000000000019B0                 push    r13
.text:00000000000019B2                 push    r12
.text:00000000000019B4                 mov     edx, 5          ; category
.text:00000000000019B9                 push    rbp
.text:00000000000019BA                 push    rbx
.text:00000000000019BB                 mov     ebp, edi
.text:00000000000019BD                 sub     rsp, 88h
.text:00000000000019C4                 mov     rbx, cs:program_name
.text:00000000000019CB                 mov     rax, fs:28h
.text:00000000000019D4                 mov     [rsp+0A8h+var_30], rax
.text:00000000000019D9                 xor     eax, eax
.text:00000000000019DB                 test    edi, edi
.text:00000000000019DD                 jz      short loc_1A0D
.text:00000000000019DF                 lea     rsi, aTrySHelpForMor ; "Try '%s --help' for more information.\n"
.text:00000000000019E6                 xor     edi, edi        ; domainname
.text:00000000000019E8                 call    _dcgettext
.text:00000000000019ED                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:00000000000019F4                 mov     rdx, rax
.text:00000000000019F7                 mov     rcx, rbx
.text:00000000000019FA                 mov     esi, 1
.text:00000000000019FF                 xor     eax, eax
.text:0000000000001A01                 call    ___fprintf_chk
.text:0000000000001A06
.text:0000000000001A06 loc_1A06:                               ; CODE XREF: usage+2A6↓j
.text:0000000000001A06                 mov     edi, ebp        ; status
.text:0000000000001A08                 call    _exit
.text:0000000000001A0D ; ---------------------------------------------------------------------------
.text:0000000000001A0D
.text:0000000000001A0D loc_1A0D:                               ; CODE XREF: usage+2D↑j
.text:0000000000001A0D                 lea     rsi, aUsageSOption ; "Usage: %s [OPTION]...\n"
.text:0000000000001A14                 xor     edi, edi        ; domainname
.text:0000000000001A16                 call    _dcgettext
.text:0000000000001A1B                 mov     rdx, rbx
.text:0000000000001A1E                 mov     rsi, rax
.text:0000000000001A21                 mov     edi, 1
.text:0000000000001A26                 xor     eax, eax
.text:0000000000001A28                 call    ___printf_chk
.text:0000000000001A2D                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001A34                 lea     rsi, aPrintTheNumber ; "Print the number of processing units av"...
.text:0000000000001A3B                 mov     edx, 5          ; category
.text:0000000000001A40                 xor     edi, edi        ; domainname
.text:0000000000001A42                 call    _dcgettext
.text:0000000000001A47                 mov     rsi, rbx        ; stream
.text:0000000000001A4A                 mov     rdi, rax        ; s
.text:0000000000001A4D                 call    _fputs_unlocked
.text:0000000000001A52                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001A59                 lea     rsi, aAllPrintTheNum ; "      --all      print the number of in"...
.text:0000000000001A60                 mov     edx, 5          ; category
.text:0000000000001A65                 xor     edi, edi        ; domainname
.text:0000000000001A67                 call    _dcgettext
.text:0000000000001A6C                 mov     rsi, rbx        ; stream
.text:0000000000001A6F                 mov     rdi, rax        ; s
.text:0000000000001A72                 call    _fputs_unlocked
.text:0000000000001A77                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001A7E                 lea     rsi, aHelpDisplayThi ; "      --help     display this help and "...
.text:0000000000001A85                 mov     edx, 5          ; category
.text:0000000000001A8A                 xor     edi, edi        ; domainname
.text:0000000000001A8C                 call    _dcgettext
.text:0000000000001A91                 mov     rsi, rbx        ; stream
.text:0000000000001A94                 mov     rdi, rax        ; s
.text:0000000000001A97                 call    _fputs_unlocked
.text:0000000000001A9C                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001AA3                 lea     rsi, aVersionOutputV ; "      --version  output version informa"...
.text:0000000000001AAA                 mov     edx, 5          ; category
.text:0000000000001AAF                 xor     edi, edi        ; domainname
.text:0000000000001AB1                 call    _dcgettext
.text:0000000000001AB6                 mov     rsi, rbx        ; stream
.text:0000000000001AB9                 mov     rdi, rax        ; s
.text:0000000000001ABC                 lea     rbx, aNproc     ; "nproc"
.text:0000000000001AC3                 call    _fputs_unlocked
.text:0000000000001AC8                 lea     rax, asc_4FA1   ; "["
.text:0000000000001ACF                 lea     rcx, aSha256sum ; "sha256sum"
.text:0000000000001AD6                 mov     [rsp+0A8h+var_48], 0
.text:0000000000001ADF                 mov     [rsp+0A8h+var_40], 0
.text:0000000000001AE8                 mov     rdx, rsp
.text:0000000000001AEB                 mov     [rsp+0A8h+var_A8], rax
.text:0000000000001AEF                 lea     rax, aTestInvocation ; "test invocation"
.text:0000000000001AF6                 mov     [rsp+0A8h+var_78], rcx
.text:0000000000001AFB                 lea     rcx, aSha384sum ; "sha384sum"
.text:0000000000001B02                 mov     [rsp+0A8h+var_A0], rax
.text:0000000000001B07                 lea     rax, domainname ; "coreutils"
.text:0000000000001B0E                 mov     [rsp+0A8h+var_68], rcx
.text:0000000000001B13                 lea     rcx, aSha512sum ; "sha512sum"
.text:0000000000001B1A                 mov     [rsp+0A8h+var_98], rax
.text:0000000000001B1F                 lea     rax, aMultiCallInvoc ; "Multi-call invocation"
.text:0000000000001B26                 mov     [rsp+0A8h+var_58], rcx
.text:0000000000001B2B                 mov     [rsp+0A8h+var_90], rax
.text:0000000000001B30                 lea     rax, aSha224sum ; "sha224sum"
.text:0000000000001B37                 mov     [rsp+0A8h+var_88], rax
.text:0000000000001B3C                 lea     rax, aSha2Utilities ; "sha2 utilities"
.text:0000000000001B43                 mov     [rsp+0A8h+var_80], rax
.text:0000000000001B48                 mov     [rsp+0A8h+var_70], rax
.text:0000000000001B4D                 mov     [rsp+0A8h+var_60], rax
.text:0000000000001B52                 mov     [rsp+0A8h+var_50], rax
.text:0000000000001B57                 nop     word ptr [rax+rax+00000000h]
.text:0000000000001B60
.text:0000000000001B60 loc_1B60:                               ; CODE XREF: usage+1CD↓j
.text:0000000000001B60                 add     rdx, 10h
.text:0000000000001B64                 mov     rdi, [rdx]
.text:0000000000001B67                 test    rdi, rdi
.text:0000000000001B6A                 jz      short loc_1B7F
.text:0000000000001B6C                 mov     ecx, 6
.text:0000000000001B71                 mov     rsi, rbx
.text:0000000000001B74                 repe cmpsb
.text:0000000000001B76                 setnbe  al
.text:0000000000001B79                 sbb     al, 0
.text:0000000000001B7B                 test    al, al
.text:0000000000001B7D                 jnz     short loc_1B60
.text:0000000000001B7F
.text:0000000000001B7F loc_1B7F:                               ; CODE XREF: usage+1BA↑j
.text:0000000000001B7F                 mov     r12, [rdx+8]
.text:0000000000001B83                 xor     edi, edi        ; domainname
.text:0000000000001B85                 mov     edx, 5          ; category
.text:0000000000001B8A                 lea     rsi, aSOnlineHelpS ; "\n%s online help: <%s>\n"
.text:0000000000001B91                 test    r12, r12
.text:0000000000001B94                 jz      loc_1C5B
.text:0000000000001B9A                 call    _dcgettext
.text:0000000000001B9F                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000001BA6                 lea     rdx, unk_5017
.text:0000000000001BAD                 mov     rsi, rax
.text:0000000000001BB0                 mov     edi, 1
.text:0000000000001BB5                 xor     eax, eax
.text:0000000000001BB7                 call    ___printf_chk
.text:0000000000001BBC                 xor     esi, esi        ; locale
.text:0000000000001BBE                 mov     edi, 5          ; category
.text:0000000000001BC3                 call    _setlocale
.text:0000000000001BC8                 test    rax, rax
.text:0000000000001BCB                 jz      short loc_1BE9
.text:0000000000001BCD                 lea     rsi, s2         ; "en_"
.text:0000000000001BD4                 mov     edx, 3          ; n
.text:0000000000001BD9                 mov     rdi, rax        ; s1
.text:0000000000001BDC                 call    _strncmp
.text:0000000000001BE1                 test    eax, eax
.text:0000000000001BE3                 jnz     loc_1CF0
.text:0000000000001BE9
.text:0000000000001BE9 loc_1BE9:                               ; CODE XREF: usage+21B↑j
.text:0000000000001BE9                                         ; usage+365↓j
.text:0000000000001BE9                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000001BF0                 xor     edi, edi        ; domainname
.text:0000000000001BF2                 mov     edx, 5          ; category
.text:0000000000001BF7                 call    _dcgettext
.text:0000000000001BFC                 lea     rcx, aNproc     ; "nproc"
.text:0000000000001C03                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000001C0A                 mov     rsi, rax
.text:0000000000001C0D                 mov     edi, 1
.text:0000000000001C12                 xor     eax, eax
.text:0000000000001C14                 call    ___printf_chk
.text:0000000000001C19                 cmp     r12, rbx
.text:0000000000001C1C                 lea     rcx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000001C23                 lea     rbx, aUsageSOption+16h ; ""
.text:0000000000001C2A                 cmovz   rbx, rcx
.text:0000000000001C2E
.text:0000000000001C2E loc_1C2E:                               ; CODE XREF: usage+334↓j
.text:0000000000001C2E                 lea     rsi, aOrAvailableLoc ; "or available locally via: info '(coreut"...
.text:0000000000001C35                 xor     edi, edi        ; domainname
.text:0000000000001C37                 mov     edx, 5          ; category
.text:0000000000001C3C                 call    _dcgettext
.text:0000000000001C41                 mov     rcx, rbx
.text:0000000000001C44                 mov     rsi, rax
.text:0000000000001C47                 mov     rdx, r12
.text:0000000000001C4A                 mov     edi, 1
.text:0000000000001C4F                 xor     eax, eax
.text:0000000000001C51                 call    ___printf_chk
.text:0000000000001C56                 jmp     loc_1A06
.text:0000000000001C5B ; ---------------------------------------------------------------------------
.text:0000000000001C5B
.text:0000000000001C5B loc_1C5B:                               ; CODE XREF: usage+1E4↑j
.text:0000000000001C5B                 call    _dcgettext
.text:0000000000001C60                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000001C67                 lea     rdx, unk_5017
.text:0000000000001C6E                 mov     rsi, rax
.text:0000000000001C71                 mov     edi, 1
.text:0000000000001C76                 xor     eax, eax
.text:0000000000001C78                 call    ___printf_chk
.text:0000000000001C7D                 xor     esi, esi        ; locale
.text:0000000000001C7F                 mov     edi, 5          ; category
.text:0000000000001C84                 call    _setlocale
.text:0000000000001C89                 test    rax, rax
.text:0000000000001C8C                 jz      short loc_1CA6
.text:0000000000001C8E                 lea     rsi, s2         ; "en_"
.text:0000000000001C95                 mov     edx, 3          ; n
.text:0000000000001C9A                 mov     rdi, rax        ; s1
.text:0000000000001C9D                 call    _strncmp
.text:0000000000001CA2                 test    eax, eax
.text:0000000000001CA4                 jnz     short loc_1CE9
.text:0000000000001CA6
.text:0000000000001CA6 loc_1CA6:                               ; CODE XREF: usage+2DC↑j
.text:0000000000001CA6                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000001CAD                 mov     edx, 5          ; category
.text:0000000000001CB2                 xor     edi, edi        ; domainname
.text:0000000000001CB4                 lea     r12, aNproc     ; "nproc"
.text:0000000000001CBB                 lea     rbx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000001CC2                 call    _dcgettext
.text:0000000000001CC7                 lea     rcx, aNproc     ; "nproc"
.text:0000000000001CCE                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000001CD5                 mov     rsi, rax
.text:0000000000001CD8                 mov     edi, 1
.text:0000000000001CDD                 xor     eax, eax
.text:0000000000001CDF                 call    ___printf_chk
.text:0000000000001CE4                 jmp     loc_1C2E
.text:0000000000001CE9 ; ---------------------------------------------------------------------------
.text:0000000000001CE9
.text:0000000000001CE9 loc_1CE9:                               ; CODE XREF: usage+2F4↑j
.text:0000000000001CE9                 lea     r12, aNproc     ; "nproc"
.text:0000000000001CF0
.text:0000000000001CF0 loc_1CF0:                               ; CODE XREF: usage+233↑j
.text:0000000000001CF0                 mov     r13, cs:stdout@@GLIBC_2_2_5
.text:0000000000001CF7                 lea     rsi, aReportAnyTrans ; "Report any translation bugs to <https:/"...
.text:0000000000001CFE                 xor     edi, edi        ; domainname
.text:0000000000001D00                 mov     edx, 5          ; category
.text:0000000000001D05                 call    _dcgettext
.text:0000000000001D0A                 mov     rsi, r13        ; stream
.text:0000000000001D0D                 mov     rdi, rax        ; s
.text:0000000000001D10                 call    _fputs_unlocked
.text:0000000000001D15                 jmp     loc_1BE9
.text:0000000000001D15 ; } // starts at 19B0
.text:0000000000001D15 usage           endp
.text:0000000000001D15
.text:0000000000001D15 ; ---------------------------------------------------------------------------
.text:0000000000001D1A                 align 20h
.text:0000000000001D20
.text:0000000000001D20 ; =============== S U B R O U T I N E =======================================
.text:0000000000001D20
.text:0000000000001D20
.text:0000000000001D20                 public close_stdout_set_file_name
.text:0000000000001D20 close_stdout_set_file_name proc near
.text:0000000000001D20 ; __unwind {
.text:0000000000001D20                 mov     cs:file_name, rdi
.text:0000000000001D27                 retn
.text:0000000000001D27 ; } // starts at 1D20
.text:0000000000001D27 close_stdout_set_file_name endp
.text:0000000000001D27
.text:0000000000001D27 ; ---------------------------------------------------------------------------
.text:0000000000001D28                 align 10h
.text:0000000000001D30
.text:0000000000001D30 ; =============== S U B R O U T I N E =======================================
.text:0000000000001D30
.text:0000000000001D30
.text:0000000000001D30                 public close_stdout_set_ignore_EPIPE
.text:0000000000001D30 close_stdout_set_ignore_EPIPE proc near
.text:0000000000001D30 ; __unwind {
.text:0000000000001D30                 mov     cs:ignore_EPIPE, dil
.text:0000000000001D37                 retn
.text:0000000000001D37 ; } // starts at 1D30
.text:0000000000001D37 close_stdout_set_ignore_EPIPE endp
.text:0000000000001D37
.text:0000000000001D37 ; ---------------------------------------------------------------------------
.text:0000000000001D38                 align 20h
.text:0000000000001D40
.text:0000000000001D40 ; =============== S U B R O U T I N E =======================================
.text:0000000000001D40
.text:0000000000001D40 ; Attributes: info_from_lumina
.text:0000000000001D40
.text:0000000000001D40 ; void __cdecl close_stdout()
.text:0000000000001D40                 public close_stdout
.text:0000000000001D40 close_stdout    proc near               ; DATA XREF: main+50↑o
.text:0000000000001D40 ; __unwind {
.text:0000000000001D40                 push    rbp
.text:0000000000001D41                 push    rbx
.text:0000000000001D42                 sub     rsp, 8
.text:0000000000001D46                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000001D4D                 call    close_stream
.text:0000000000001D52                 test    eax, eax
.text:0000000000001D54                 jz      short loc_1D6C
.text:0000000000001D56                 call    ___errno_location
.text:0000000000001D5B                 cmp     cs:ignore_EPIPE, 0
.text:0000000000001D62                 mov     rbx, rax
.text:0000000000001D65                 jz      short loc_1D83
.text:0000000000001D67                 cmp     dword ptr [rax], 20h ; ' '
.text:0000000000001D6A                 jnz     short loc_1D83
.text:0000000000001D6C
.text:0000000000001D6C loc_1D6C:                               ; CODE XREF: close_stdout+14↑j
.text:0000000000001D6C                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:0000000000001D73                 call    close_stream
.text:0000000000001D78                 test    eax, eax
.text:0000000000001D7A                 jnz     short loc_1DC2
.text:0000000000001D7C                 add     rsp, 8
.text:0000000000001D80                 pop     rbx
.text:0000000000001D81                 pop     rbp
.text:0000000000001D82                 retn
.text:0000000000001D83 ; ---------------------------------------------------------------------------
.text:0000000000001D83
.text:0000000000001D83 loc_1D83:                               ; CODE XREF: close_stdout+25↑j
.text:0000000000001D83                                         ; close_stdout+2A↑j
.text:0000000000001D83                 lea     rsi, aWriteError ; "write error"
.text:0000000000001D8A                 xor     edi, edi        ; domainname
.text:0000000000001D8C                 mov     edx, 5          ; category
.text:0000000000001D91                 call    _dcgettext
.text:0000000000001D96                 mov     rdi, cs:file_name
.text:0000000000001D9D                 mov     rbp, rax
.text:0000000000001DA0                 test    rdi, rdi
.text:0000000000001DA3                 jz      short loc_1DCD
.text:0000000000001DA5                 call    quotearg_colon
.text:0000000000001DAA                 mov     esi, [rbx]      ; errnum
.text:0000000000001DAC                 lea     rdx, format     ; "%s: %s"
.text:0000000000001DB3                 mov     rcx, rax
.text:0000000000001DB6                 mov     r8, rbp
.text:0000000000001DB9                 xor     edi, edi        ; status
.text:0000000000001DBB                 xor     eax, eax
.text:0000000000001DBD                 call    _error
.text:0000000000001DC2
.text:0000000000001DC2 loc_1DC2:                               ; CODE XREF: close_stdout+3A↑j
.text:0000000000001DC2                                         ; close_stdout+A2↓j
.text:0000000000001DC2                 mov     edi, cs:exit_failure ; status
.text:0000000000001DC8                 call    __exit
.text:0000000000001DCD ; ---------------------------------------------------------------------------
.text:0000000000001DCD
.text:0000000000001DCD loc_1DCD:                               ; CODE XREF: close_stdout+63↑j
.text:0000000000001DCD                 mov     esi, [rbx]      ; errnum
.text:0000000000001DCF                 lea     rdx, format+4   ; format
.text:0000000000001DD6                 mov     rcx, rax
.text:0000000000001DD9                 xor     edi, edi        ; status
.text:0000000000001DDB                 xor     eax, eax
.text:0000000000001DDD                 call    _error
.text:0000000000001DE2                 jmp     short loc_1DC2
.text:0000000000001DE2 ; } // starts at 1D40
.text:0000000000001DE2 close_stdout    endp
.text:0000000000001DE2
.text:0000000000001DE2 ; ---------------------------------------------------------------------------
.text:0000000000001DE4                 align 10h
.text:0000000000001DF0
.text:0000000000001DF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001DF0
.text:0000000000001DF0
.text:0000000000001DF0 num_processors_via_affinity_mask proc near
.text:0000000000001DF0                                         ; CODE XREF: num_processors:loc_2049↓p
.text:0000000000001DF0                                         ; num_processors:loc_2068↓p ...
.text:0000000000001DF0
.text:0000000000001DF0 var_10          = qword ptr -10h
.text:0000000000001DF0
.text:0000000000001DF0 ; __unwind {
.text:0000000000001DF0                 push    rbx
.text:0000000000001DF1                 xor     edi, edi        ; pid
.text:0000000000001DF3                 mov     esi, 80h        ; cpusetsize
.text:0000000000001DF8                 sub     rsp, 90h
.text:0000000000001DFF                 mov     rbx, rsp
.text:0000000000001E02                 mov     rdx, rbx        ; cpuset
.text:0000000000001E05                 mov     rax, fs:28h
.text:0000000000001E0E                 mov     [rsp+98h+var_10], rax
.text:0000000000001E16                 xor     eax, eax
.text:0000000000001E18                 call    _sched_getaffinity
.text:0000000000001E1D                 test    eax, eax
.text:0000000000001E1F                 jz      short loc_1E40
.text:0000000000001E21
.text:0000000000001E21 loc_1E21:                               ; CODE XREF: num_processors_via_affinity_mask+62↓j
.text:0000000000001E21                 xor     eax, eax
.text:0000000000001E23
.text:0000000000001E23 loc_1E23:                               ; CODE XREF: num_processors_via_affinity_mask+64↓j
.text:0000000000001E23                 mov     rcx, [rsp+98h+var_10]
.text:0000000000001E2B                 xor     rcx, fs:28h
.text:0000000000001E34                 jnz     short loc_1E56
.text:0000000000001E36                 add     rsp, 90h
.text:0000000000001E3D                 pop     rbx
.text:0000000000001E3E                 retn
.text:0000000000001E3E ; ---------------------------------------------------------------------------
.text:0000000000001E3F                 align 20h
.text:0000000000001E40
.text:0000000000001E40 loc_1E40:                               ; CODE XREF: num_processors_via_affinity_mask+2F↑j
.text:0000000000001E40                 mov     rsi, rbx        ; setp
.text:0000000000001E43                 mov     edi, 80h        ; setsize
.text:0000000000001E48                 call    ___sched_cpucount
.text:0000000000001E4D                 cdqe
.text:0000000000001E4F                 test    rax, rax
.text:0000000000001E52                 jz      short loc_1E21
.text:0000000000001E54                 jmp     short loc_1E23
.text:0000000000001E56 ; ---------------------------------------------------------------------------
.text:0000000000001E56
.text:0000000000001E56 loc_1E56:                               ; CODE XREF: num_processors_via_affinity_mask+44↑j
.text:0000000000001E56                 call    ___stack_chk_fail
.text:0000000000001E56 ; } // starts at 1DF0
.text:0000000000001E56 num_processors_via_affinity_mask endp
.text:0000000000001E56
.text:0000000000001E56 ; ---------------------------------------------------------------------------
.text:0000000000001E5B                 align 20h
.text:0000000000001E60
.text:0000000000001E60 ; =============== S U B R O U T I N E =======================================
.text:0000000000001E60
.text:0000000000001E60
.text:0000000000001E60 parse_omp_threads_part_0 proc near      ; CODE XREF: num_processors+5B↓p
.text:0000000000001E60                                         ; num_processors+77↓p ...
.text:0000000000001E60
.text:0000000000001E60 var_18          = qword ptr -18h
.text:0000000000001E60 var_10          = qword ptr -10h
.text:0000000000001E60
.text:0000000000001E60 ; __unwind {
.text:0000000000001E60                 sub     rsp, 18h
.text:0000000000001E64                 movzx   ecx, byte ptr [rdi]
.text:0000000000001E67                 mov     rax, fs:28h
.text:0000000000001E70                 mov     [rsp+18h+var_10], rax
.text:0000000000001E75                 xor     eax, eax
.text:0000000000001E77                 test    cl, cl
.text:0000000000001E79                 jz      short loc_1EBE
.text:0000000000001E7B                 movsx   eax, cl
.text:0000000000001E7E                 cmp     eax, 20h ; ' '
.text:0000000000001E81                 ja      short loc_1EE0
.text:0000000000001E83                 mov     rax, 100003E00h
.text:0000000000001E8D                 mov     esi, 1
.text:0000000000001E92                 bt      rax, rcx
.text:0000000000001E96                 mov     rdx, rax
.text:0000000000001E99                 jb      short loc_1EB3
.text:0000000000001E9B                 jmp     short loc_1EE0
.text:0000000000001E9B ; ---------------------------------------------------------------------------
.text:0000000000001E9D                 align 20h
.text:0000000000001EA0
.text:0000000000001EA0 loc_1EA0:                               ; CODE XREF: parse_omp_threads_part_0+5C↓j
.text:0000000000001EA0                 movsx   eax, cl
.text:0000000000001EA3                 cmp     eax, 20h ; ' '
.text:0000000000001EA6                 ja      short loc_1EE0
.text:0000000000001EA8                 mov     rax, rsi
.text:0000000000001EAB                 shl     rax, cl
.text:0000000000001EAE                 test    rax, rdx
.text:0000000000001EB1                 jz      short loc_1EE0
.text:0000000000001EB3
.text:0000000000001EB3 loc_1EB3:                               ; CODE XREF: parse_omp_threads_part_0+39↑j
.text:0000000000001EB3                 add     rdi, 1          ; nptr
.text:0000000000001EB7                 movzx   ecx, byte ptr [rdi]
.text:0000000000001EBA                 test    cl, cl
.text:0000000000001EBC                 jnz     short loc_1EA0
.text:0000000000001EBE
.text:0000000000001EBE loc_1EBE:                               ; CODE XREF: parse_omp_threads_part_0+19↑j
.text:0000000000001EBE                                         ; parse_omp_threads_part_0+A6↓j ...
.text:0000000000001EBE                 xor     eax, eax
.text:0000000000001EC0
.text:0000000000001EC0 loc_1EC0:                               ; CODE XREF: parse_omp_threads_part_0+88↓j
.text:0000000000001EC0                                         ; parse_omp_threads_part_0+AD↓j ...
.text:0000000000001EC0                 mov     rdx, [rsp+18h+var_10]
.text:0000000000001EC5                 xor     rdx, fs:28h
.text:0000000000001ECE                 jnz     loc_1F6C
.text:0000000000001ED4                 add     rsp, 18h
.text:0000000000001ED8                 retn
.text:0000000000001ED8 ; ---------------------------------------------------------------------------
.text:0000000000001ED9                 align 20h
.text:0000000000001EE0
.text:0000000000001EE0 loc_1EE0:                               ; CODE XREF: parse_omp_threads_part_0+21↑j
.text:0000000000001EE0                                         ; parse_omp_threads_part_0+3B↑j ...
.text:0000000000001EE0                 sub     ecx, 30h ; '0'
.text:0000000000001EE3                 xor     eax, eax
.text:0000000000001EE5                 cmp     cl, 9
.text:0000000000001EE8                 ja      short loc_1EC0
.text:0000000000001EEA                 mov     edx, 0Ah        ; base
.text:0000000000001EEF                 mov     rsi, rsp        ; endptr
.text:0000000000001EF2                 mov     [rsp+18h+var_18], 0
.text:0000000000001EFA                 call    _strtoul
.text:0000000000001EFF                 mov     rdx, [rsp+18h+var_18]
.text:0000000000001F03                 test    rdx, rdx
.text:0000000000001F06                 jz      short loc_1EBE
.text:0000000000001F08                 movzx   ecx, byte ptr [rdx]
.text:0000000000001F0B                 test    cl, cl
.text:0000000000001F0D                 jz      short loc_1EC0
.text:0000000000001F0F                 movsx   esi, cl
.text:0000000000001F12                 cmp     esi, 20h ; ' '
.text:0000000000001F15                 ja      short loc_1F5E
.text:0000000000001F17                 mov     rdi, 100003E00h
.text:0000000000001F21                 bt      rdi, rcx
.text:0000000000001F25                 jnb     short loc_1F5E
.text:0000000000001F27                 add     rdx, 1
.text:0000000000001F2B                 mov     r8d, 1
.text:0000000000001F31                 jmp     short loc_1F47
.text:0000000000001F31 ; ---------------------------------------------------------------------------
.text:0000000000001F33                 align 8
.text:0000000000001F38
.text:0000000000001F38 loc_1F38:                               ; CODE XREF: parse_omp_threads_part_0+FC↓j
.text:0000000000001F38                 mov     rsi, r8
.text:0000000000001F3B                 add     rdx, 1
.text:0000000000001F3F                 shl     rsi, cl
.text:0000000000001F42                 test    rsi, rdi
.text:0000000000001F45                 jz      short loc_1F5E
.text:0000000000001F47
.text:0000000000001F47 loc_1F47:                               ; CODE XREF: parse_omp_threads_part_0+D1↑j
.text:0000000000001F47                 mov     [rsp+18h+var_18], rdx
.text:0000000000001F4B                 movzx   ecx, byte ptr [rdx]
.text:0000000000001F4E                 test    cl, cl
.text:0000000000001F50                 jz      loc_1EC0
.text:0000000000001F56                 movsx   esi, cl
.text:0000000000001F59                 cmp     esi, 20h ; ' '
.text:0000000000001F5C                 jbe     short loc_1F38
.text:0000000000001F5E
.text:0000000000001F5E loc_1F5E:                               ; CODE XREF: parse_omp_threads_part_0+B5↑j
.text:0000000000001F5E                                         ; parse_omp_threads_part_0+C5↑j ...
.text:0000000000001F5E                 cmp     cl, 2Ch ; ','
.text:0000000000001F61                 jnz     loc_1EBE
.text:0000000000001F67                 jmp     loc_1EC0
.text:0000000000001F6C ; ---------------------------------------------------------------------------
.text:0000000000001F6C
.text:0000000000001F6C loc_1F6C:                               ; CODE XREF: parse_omp_threads_part_0+6E↑j
.text:0000000000001F6C                 call    ___stack_chk_fail
.text:0000000000001F6C ; } // starts at 1E60
.text:0000000000001F6C parse_omp_threads_part_0 endp
.text:0000000000001F6C
.text:0000000000001F6C ; ---------------------------------------------------------------------------
.text:0000000000001F71                 align 20h
.text:0000000000001F80
.text:0000000000001F80 ; =============== S U B R O U T I N E =======================================
.text:0000000000001F80
.text:0000000000001F80
.text:0000000000001F80                 public num_processors
.text:0000000000001F80 num_processors  proc near               ; CODE XREF: main+136↑p
.text:0000000000001F80 ; __unwind {
.text:0000000000001F80                 push    rbp
.text:0000000000001F81                 push    rbx
.text:0000000000001F82                 sub     rsp, 8
.text:0000000000001F86                 cmp     edi, 2
.text:0000000000001F89                 jz      short loc_1FC0
.text:0000000000001F8B                 cmp     edi, 1
.text:0000000000001F8E                 jz      loc_2090
.text:0000000000001F94                 mov     edi, 53h ; 'S'  ; name
.text:0000000000001F99                 call    _sysconf
.text:0000000000001F9E                 cmp     rax, 1
.text:0000000000001FA2                 jz      loc_2068
.text:0000000000001FA8
.text:0000000000001FA8 loc_1FA8:                               ; CODE XREF: num_processors+101↓j
.text:0000000000001FA8                 test    rax, rax
.text:0000000000001FAB                 mov     edx, 1
.text:0000000000001FB0                 cmovle  rax, rdx
.text:0000000000001FB4
.text:0000000000001FB4 loc_1FB4:                               ; CODE XREF: num_processors+F8↓j
.text:0000000000001FB4                                         ; num_processors+136↓j ...
.text:0000000000001FB4                 add     rsp, 8
.text:0000000000001FB8                 pop     rbx
.text:0000000000001FB9                 pop     rbp
.text:0000000000001FBA                 retn
.text:0000000000001FBA ; ---------------------------------------------------------------------------
.text:0000000000001FBB                 align 20h
.text:0000000000001FC0
.text:0000000000001FC0 loc_1FC0:                               ; CODE XREF: num_processors+9↑j
.text:0000000000001FC0                 lea     rdi, name       ; "OMP_NUM_THREADS"
.text:0000000000001FC7                 call    _getenv
.text:0000000000001FCC                 test    rax, rax
.text:0000000000001FCF                 jz      short loc_2028
.text:0000000000001FD1                 mov     rdi, rax
.text:0000000000001FD4                 mov     rbp, 0FFFFFFFFFFFFFFFFh
.text:0000000000001FDB                 call    parse_omp_threads_part_0
.text:0000000000001FE0                 lea     rdi, aOmpThreadLimit ; "OMP_THREAD_LIMIT"
.text:0000000000001FE7                 mov     rbx, rax
.text:0000000000001FEA                 call    _getenv
.text:0000000000001FEF                 test    rax, rax
.text:0000000000001FF2                 jz      short loc_200D
.text:0000000000001FF4                 mov     rdi, rax
.text:0000000000001FF7                 call    parse_omp_threads_part_0
.text:0000000000001FFC                 mov     rbp, rax
.text:0000000000001FFF                 test    rax, rax
.text:0000000000002002                 mov     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000002009                 cmovz   rbp, rax
.text:000000000000200D
.text:000000000000200D loc_200D:                               ; CODE XREF: num_processors+72↑j
.text:000000000000200D                 test    rbx, rbx
.text:0000000000002010                 jz      short loc_2049
.text:0000000000002012                 cmp     rbp, rbx
.text:0000000000002015                 mov     rax, rbx
.text:0000000000002018                 cmovbe  rax, rbp
.text:000000000000201C                 add     rsp, 8
.text:0000000000002020                 pop     rbx
.text:0000000000002021                 pop     rbp
.text:0000000000002022                 retn
.text:0000000000002022 ; ---------------------------------------------------------------------------
.text:0000000000002023                 align 8
.text:0000000000002028
.text:0000000000002028 loc_2028:                               ; CODE XREF: num_processors+4F↑j
.text:0000000000002028                 lea     rdi, aOmpThreadLimit ; "OMP_THREAD_LIMIT"
.text:000000000000202F                 call    _getenv
.text:0000000000002034                 test    rax, rax
.text:0000000000002037                 jz      short loc_2090
.text:0000000000002039                 mov     rdi, rax
.text:000000000000203C                 call    parse_omp_threads_part_0
.text:0000000000002041                 test    rax, rax
.text:0000000000002044                 mov     rbp, rax
.text:0000000000002047                 jz      short loc_2090
.text:0000000000002049
.text:0000000000002049 loc_2049:                               ; CODE XREF: num_processors+90↑j
.text:0000000000002049                 call    num_processors_via_affinity_mask
.text:000000000000204E                 test    rax, rax
.text:0000000000002051                 jz      short loc_20A1
.text:0000000000002053
.text:0000000000002053 loc_2053:                               ; CODE XREF: num_processors+11F↓j
.text:0000000000002053                 cmp     rax, rbp
.text:0000000000002056                 cmova   rax, rbp
.text:000000000000205A                 add     rsp, 8
.text:000000000000205E                 pop     rbx
.text:000000000000205F                 pop     rbp
.text:0000000000002060                 retn
.text:0000000000002060 ; ---------------------------------------------------------------------------
.text:0000000000002061                 align 8
.text:0000000000002068
.text:0000000000002068 loc_2068:                               ; CODE XREF: num_processors+22↑j
.text:0000000000002068                 call    num_processors_via_affinity_mask
.text:000000000000206D                 mov     rdx, rax
.text:0000000000002070                 mov     eax, 1
.text:0000000000002075                 test    rdx, rdx
.text:0000000000002078                 jz      loc_1FB4
.text:000000000000207E                 mov     rax, rdx
.text:0000000000002081                 jmp     loc_1FA8
.text:0000000000002081 ; ---------------------------------------------------------------------------
.text:0000000000002086                 align 10h
.text:0000000000002090
.text:0000000000002090 loc_2090:                               ; CODE XREF: num_processors+E↑j
.text:0000000000002090                                         ; num_processors+B7↑j ...
.text:0000000000002090                 call    num_processors_via_affinity_mask
.text:0000000000002095                 test    rax, rax
.text:0000000000002098                 mov     rbp, 0FFFFFFFFFFFFFFFFh
.text:000000000000209F                 jnz     short loc_2053
.text:00000000000020A1
.text:00000000000020A1 loc_20A1:                               ; CODE XREF: num_processors+D1↑j
.text:00000000000020A1                 mov     edi, 54h ; 'T'  ; name
.text:00000000000020A6                 call    _sysconf
.text:00000000000020AB                 mov     rdx, rax
.text:00000000000020AE                 mov     eax, 1
.text:00000000000020B3                 test    rdx, rdx
.text:00000000000020B6                 jle     loc_1FB4
.text:00000000000020BC                 cmp     rdx, rbp
.text:00000000000020BF                 mov     rax, rbp
.text:00000000000020C2                 cmovbe  rax, rdx
.text:00000000000020C6                 jmp     loc_1FB4
.text:00000000000020C6 ; } // starts at 1F80
.text:00000000000020C6 num_processors  endp
.text:00000000000020C6
.text:00000000000020C6 ; ---------------------------------------------------------------------------
.text:00000000000020CB                 align 10h
.text:00000000000020D0
.text:00000000000020D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000020D0
.text:00000000000020D0
.text:00000000000020D0                 public set_program_name
.text:00000000000020D0 set_program_name proc near              ; CODE XREF: main+1B↑p
.text:00000000000020D0 ; __unwind {
.text:00000000000020D0                 test    rdi, rdi
.text:00000000000020D3                 push    rbx
.text:00000000000020D4                 jz      short loc_214D
.text:00000000000020D6                 mov     esi, 2Fh ; '/'  ; c
.text:00000000000020DB                 mov     rbx, rdi
.text:00000000000020DE                 call    _strrchr
.text:00000000000020E3                 test    rax, rax
.text:00000000000020E6                 jz      short loc_213D
.text:00000000000020E8                 lea     r8, [rax+1]
.text:00000000000020EC                 mov     rdx, r8
.text:00000000000020EF                 sub     rdx, rbx
.text:00000000000020F2                 cmp     rdx, 6
.text:00000000000020F6                 jle     short loc_213D
.text:00000000000020F8                 lea     rsi, [rax-6]
.text:00000000000020FC                 lea     rdi, aLibs      ; "/.libs/"
.text:0000000000002103                 mov     ecx, 7
.text:0000000000002108                 repe cmpsb
.text:000000000000210A                 setnbe  dl
.text:000000000000210D                 sbb     dl, 0
.text:0000000000002110                 test    dl, dl
.text:0000000000002112                 jnz     short loc_213D
.text:0000000000002114                 lea     rdi, aLt        ; "lt-"
.text:000000000000211B                 mov     ecx, 3
.text:0000000000002120                 mov     rsi, r8
.text:0000000000002123                 mov     rbx, r8
.text:0000000000002126                 repe cmpsb
.text:0000000000002128                 setnbe  dl
.text:000000000000212B                 sbb     dl, 0
.text:000000000000212E                 test    dl, dl
.text:0000000000002130                 jnz     short loc_213D
.text:0000000000002132                 lea     rbx, [rax+4]
.text:0000000000002136                 mov     cs:__bss_start, rbx
.text:000000000000213D
.text:000000000000213D loc_213D:                               ; CODE XREF: set_program_name+16↑j
.text:000000000000213D                                         ; set_program_name+26↑j ...
.text:000000000000213D                 mov     cs:program_name, rbx
.text:0000000000002144                 mov     cs:program_invocation_name@@GLIBC_2_2_5, rbx
.text:000000000000214B                 pop     rbx
.text:000000000000214C                 retn
.text:000000000000214D ; ---------------------------------------------------------------------------
.text:000000000000214D
.text:000000000000214D loc_214D:                               ; CODE XREF: set_program_name+4↑j
.text:000000000000214D                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:0000000000002154                 lea     rdi, aANullArgv0WasP ; "A NULL argv[0] was passed through an ex"...
.text:000000000000215B                 mov     edx, 37h ; '7'  ; n
.text:0000000000002160                 mov     esi, 1          ; size
.text:0000000000002165                 call    _fwrite
.text:000000000000216A                 call    _abort
.text:000000000000216A ; } // starts at 20D0
.text:000000000000216A set_program_name endp
.text:000000000000216A
.text:000000000000216A ; ---------------------------------------------------------------------------
.text:000000000000216F                 align 10h
.text:0000000000002170
.text:0000000000002170 ; =============== S U B R O U T I N E =======================================
.text:0000000000002170
.text:0000000000002170 ; Attributes: info_from_lumina
.text:0000000000002170
.text:0000000000002170 ; const char *__fastcall gettext_quote(const char *msgid, quoting_style s)
.text:0000000000002170 gettext_quote   proc near               ; CODE XREF: quotearg_buffer_restyled+1165↓p
.text:0000000000002170                                         ; quotearg_buffer_restyled+117B↓p
.text:0000000000002170 ; __unwind {
.text:0000000000002170                 push    rbp
.text:0000000000002171                 push    rbx
.text:0000000000002172                 mov     rbp, rdi
.text:0000000000002175                 mov     ebx, esi
.text:0000000000002177                 sub     rsp, 8
.text:000000000000217B                 call    locale_charset
.text:0000000000002180                 movzx   edx, byte ptr [rax]
.text:0000000000002183                 and     edx, 0FFFFFFDFh
.text:0000000000002186                 cmp     dl, 55h ; 'U'
.text:0000000000002189                 jz      short loc_2200
.text:000000000000218B                 cmp     dl, 47h ; 'G'
.text:000000000000218E                 jz      short loc_21B0
.text:0000000000002190
.text:0000000000002190 loc_2190:                               ; CODE XREF: gettext_quote+4A↓j
.text:0000000000002190                                         ; gettext_quote+50↓j ...
.text:0000000000002190                 lea     rax, unk_536B
.text:0000000000002197                 lea     rdx, asc_536D   ; "'"
.text:000000000000219E                 cmp     ebx, 9
.text:00000000000021A1                 cmovnz  rax, rdx
.text:00000000000021A5                 add     rsp, 8
.text:00000000000021A9                 pop     rbx
.text:00000000000021AA                 pop     rbp
.text:00000000000021AB                 retn
.text:00000000000021AB ; ---------------------------------------------------------------------------
.text:00000000000021AC                 align 10h
.text:00000000000021B0
.text:00000000000021B0 loc_21B0:                               ; CODE XREF: gettext_quote+1E↑j
.text:00000000000021B0                 movzx   edx, byte ptr [rax+1]
.text:00000000000021B4                 and     edx, 0FFFFFFDFh
.text:00000000000021B7                 cmp     dl, 42h ; 'B'
.text:00000000000021BA                 jnz     short loc_2190
.text:00000000000021BC                 cmp     byte ptr [rax+2], 31h ; '1'
.text:00000000000021C0                 jnz     short loc_2190
.text:00000000000021C2                 cmp     byte ptr [rax+3], 38h ; '8'
.text:00000000000021C6                 jnz     short loc_2190
.text:00000000000021C8                 cmp     byte ptr [rax+4], 30h ; '0'
.text:00000000000021CC                 jnz     short loc_2190
.text:00000000000021CE                 cmp     byte ptr [rax+5], 33h ; '3'
.text:00000000000021D2                 jnz     short loc_2190
.text:00000000000021D4                 cmp     byte ptr [rax+6], 30h ; '0'
.text:00000000000021D8                 jnz     short loc_2190
.text:00000000000021DA                 cmp     byte ptr [rax+7], 0
.text:00000000000021DE                 jnz     short loc_2190
.text:00000000000021E0                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:00000000000021E4                 lea     rax, unk_5364
.text:00000000000021EB                 lea     rdx, unk_5368
.text:00000000000021F2                 cmovnz  rax, rdx
.text:00000000000021F6                 add     rsp, 8
.text:00000000000021FA                 pop     rbx
.text:00000000000021FB                 pop     rbp
.text:00000000000021FC                 retn
.text:00000000000021FC ; ---------------------------------------------------------------------------
.text:00000000000021FD                 align 20h
.text:0000000000002200
.text:0000000000002200 loc_2200:                               ; CODE XREF: gettext_quote+19↑j
.text:0000000000002200                 movzx   edx, byte ptr [rax+1]
.text:0000000000002204                 and     edx, 0FFFFFFDFh
.text:0000000000002207                 cmp     dl, 54h ; 'T'
.text:000000000000220A                 jnz     short loc_2190
.text:000000000000220C                 movzx   edx, byte ptr [rax+2]
.text:0000000000002210                 and     edx, 0FFFFFFDFh
.text:0000000000002213                 cmp     dl, 46h ; 'F'
.text:0000000000002216                 jnz     loc_2190
.text:000000000000221C                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:0000000000002220                 jnz     loc_2190
.text:0000000000002226                 cmp     byte ptr [rax+4], 38h ; '8'
.text:000000000000222A                 jnz     loc_2190
.text:0000000000002230                 cmp     byte ptr [rax+5], 0
.text:0000000000002234                 jnz     loc_2190
.text:000000000000223A                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:000000000000223E                 lea     rax, unk_535C
.text:0000000000002245                 lea     rdx, unk_5360
.text:000000000000224C                 cmovnz  rax, rdx
.text:0000000000002250                 add     rsp, 8
.text:0000000000002254                 pop     rbx
.text:0000000000002255                 pop     rbp
.text:0000000000002256                 retn
.text:0000000000002256 ; } // starts at 2170
.text:0000000000002256 gettext_quote   endp
.text:0000000000002256
.text:0000000000002256 ; ---------------------------------------------------------------------------
.text:0000000000002257                 align 20h
.text:0000000000002260
.text:0000000000002260 ; =============== S U B R O U T I N E =======================================
.text:0000000000002260
.text:0000000000002260 ; Attributes: info_from_lumina
.text:0000000000002260
.text:0000000000002260 ; size_t __fastcall quotearg_buffer_restyled(char *buffer, size_t buffersize, const char *arg, size_t argsize, quoting_style quoting_style, int flags, const unsigned int *quote_these_too, const char *left_quote, const char *right_quote)
.text:0000000000002260 quotearg_buffer_restyled proc near      ; CODE XREF: quotearg_buffer_restyled+BCD↓p
.text:0000000000002260                                         ; quotearg_buffer_restyled+11CB↓p ...
.text:0000000000002260
.text:0000000000002260 var_E0          = dword ptr -0E0h
.text:0000000000002260 var_DB          = byte ptr -0DBh
.text:0000000000002260 var_DA          = byte ptr -0DAh
.text:0000000000002260 var_D9          = byte ptr -0D9h
.text:0000000000002260 s               = qword ptr -0D8h
.text:0000000000002260 n               = qword ptr -0D0h
.text:0000000000002260 var_C8          = qword ptr -0C8h
.text:0000000000002260 ps              = qword ptr -0C0h
.text:0000000000002260 var_B8          = qword ptr -0B8h
.text:0000000000002260 var_B0          = qword ptr -0B0h
.text:0000000000002260 var_A8          = qword ptr -0A8h
.text:0000000000002260 s2              = qword ptr -0A0h
.text:0000000000002260 var_98          = qword ptr -98h
.text:0000000000002260 var_90          = qword ptr -90h
.text:0000000000002260 var_88          = qword ptr -88h
.text:0000000000002260 var_80          = qword ptr -80h
.text:0000000000002260 var_78          = qword ptr -78h
.text:0000000000002260 var_70          = dword ptr -70h
.text:0000000000002260 var_6C          = byte ptr -6Ch
.text:0000000000002260 var_6B          = byte ptr -6Bh
.text:0000000000002260 var_6A          = byte ptr -6Ah
.text:0000000000002260 var_69          = byte ptr -69h
.text:0000000000002260 var_68          = qword ptr -68h
.text:0000000000002260 var_60          = qword ptr -60h
.text:0000000000002260 wc              = dword ptr -4Ch
.text:0000000000002260 var_48          = qword ptr -48h
.text:0000000000002260 var_40          = qword ptr -40h
.text:0000000000002260 arg_0           = qword ptr  8
.text:0000000000002260 arg_8           = qword ptr  10h
.text:0000000000002260 arg_10          = qword ptr  18h
.text:0000000000002260
.text:0000000000002260 ; __unwind {
.text:0000000000002260                 push    r15
.text:0000000000002262                 push    r14
.text:0000000000002264                 mov     r15d, r8d
.text:0000000000002267                 push    r13
.text:0000000000002269                 push    r12
.text:000000000000226B                 mov     r14, rdi
.text:000000000000226E                 push    rbp
.text:000000000000226F                 push    rbx
.text:0000000000002270                 mov     ebx, r9d
.text:0000000000002273                 mov     r13, rsi
.text:0000000000002276                 mov     rbp, rcx
.text:0000000000002279                 and     ebx, 2
.text:000000000000227C                 sub     rsp, 0B8h
.text:0000000000002283                 mov     rax, [rsp+0E8h+arg_0]
.text:000000000000228B                 mov     [rsp+0E8h+s], rdx
.text:0000000000002290                 mov     [rsp+0E8h+var_E0], r8d
.text:0000000000002295                 mov     [rsp+0E8h+var_70], r9d
.text:000000000000229A                 mov     [rsp+0E8h+var_C8], rax
.text:000000000000229F                 mov     rax, [rsp+0E8h+arg_8]
.text:00000000000022A7                 mov     [rsp+0E8h+var_80], rax
.text:00000000000022AC                 mov     rax, [rsp+0E8h+arg_10]
.text:00000000000022B4                 mov     [rsp+0E8h+var_88], rax
.text:00000000000022B9                 mov     rax, fs:28h
.text:00000000000022C2                 mov     [rsp+0E8h+var_40], rax
.text:00000000000022CA                 xor     eax, eax
.text:00000000000022CC                 call    ___ctype_get_mb_cur_max
.text:00000000000022D1                 cmp     r15d, 0Ah       ; switch 11 cases
.text:00000000000022D5                 mov     [rsp+0E8h+var_90], rax
.text:00000000000022DA                 ja      def_22F1        ; jumptable 00000000000121F1 default case
.text:00000000000022E0                 lea     rcx, jpt_22F1
.text:00000000000022E7                 mov     edx, r15d
.text:00000000000022EA                 movsxd  rax, ds:(jpt_22F1 - 53C0h)[rcx+rdx*4]
.text:00000000000022EE                 add     rax, rcx
.text:00000000000022F1                 jmp     rax             ; switch jump
.text:00000000000022F3 ; ---------------------------------------------------------------------------
.text:00000000000022F3
.text:00000000000022F3 loc_22F3:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000022F3                                         ; quotearg_buffer_restyled+C66↓j
.text:00000000000022F3                                         ; DATA XREF: ...
.text:00000000000022F3                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 1
.text:00000000000022F8                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000022FD                 xor     r12d, r12d
.text:0000000000002300                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002309                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000230E                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000002313
.text:0000000000002313 loc_2313:                               ; CODE XREF: quotearg_buffer_restyled+E94↓j
.text:0000000000002313                 lea     rax, asc_536D   ; "'"
.text:000000000000231A                 mov     [rsp+0E8h+n], 1
.text:0000000000002323                 xor     r15d, r15d
.text:0000000000002326                 mov     [rsp+0E8h+var_E0], 2
.text:000000000000232E                 mov     [rsp+0E8h+s2], rax
.text:0000000000002333
.text:0000000000002333 loc_2333:                               ; CODE XREF: quotearg_buffer_restyled+7F4↓j
.text:0000000000002333                                         ; quotearg_buffer_restyled+CB8↓j ...
.text:0000000000002333                 xor     r11d, r11d
.text:0000000000002336                 mov     rax, rbp
.text:0000000000002339                 mov     r8d, r12d
.text:000000000000233C                 mov     rbp, r11
.text:000000000000233F                 mov     r11, rax
.text:0000000000002342                 nop     word ptr [rax+rax+00h]
.text:0000000000002348
.text:0000000000002348 loc_2348:                               ; CODE XREF: quotearg_buffer_restyled+2B2↓j
.text:0000000000002348                                         ; quotearg_buffer_restyled+42C↓j
.text:0000000000002348                 cmp     r11, rbp
.text:000000000000234B                 setnz   r12b
.text:000000000000234F                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000002353                 jnz     short loc_2362
.text:0000000000002355                 mov     rax, [rsp+0E8h+s]
.text:000000000000235A                 cmp     byte ptr [rax+rbp], 0
.text:000000000000235E                 setnz   r12b
.text:0000000000002362
.text:0000000000002362 loc_2362:                               ; CODE XREF: quotearg_buffer_restyled+F3↑j
.text:0000000000002362                 test    r12b, r12b
.text:0000000000002365                 jz      loc_29C0
.text:000000000000236B                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002370                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000002375                 lea     r9, [rdi+rbp]
.text:0000000000002379                 setnz   al
.text:000000000000237C                 and     al, [rsp+0E8h+var_DB]
.text:0000000000002380                 mov     r10d, eax
.text:0000000000002383                 jz      loc_2430
.text:0000000000002389                 mov     rax, [rsp+0E8h+n]
.text:000000000000238E                 test    rax, rax
.text:0000000000002391                 jz      loc_27C0
.text:0000000000002397                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:000000000000239B                 lea     rbx, [rbp+rax+0]
.text:00000000000023A0                 jnz     short loc_23D0
.text:00000000000023A2                 cmp     rax, 1
.text:00000000000023A6                 jbe     short loc_23D0
.text:00000000000023A8                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:00000000000023AD                 mov     byte ptr [rsp+0E8h+var_B8], r10b
.text:00000000000023B2                 mov     [rsp+0E8h+ps], r9
.text:00000000000023B7                 call    _strlen
.text:00000000000023BC                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:00000000000023C2                 movzx   r10d, byte ptr [rsp+0E8h+var_B8]
.text:00000000000023C8                 mov     r11, rax
.text:00000000000023CB                 mov     r9, [rsp+0E8h+ps]
.text:00000000000023D0
.text:00000000000023D0 loc_23D0:                               ; CODE XREF: quotearg_buffer_restyled+140↑j
.text:00000000000023D0                                         ; quotearg_buffer_restyled+146↑j
.text:00000000000023D0                 cmp     rbx, r11
.text:00000000000023D3                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:00000000000023D8                 ja      loc_2990
.text:00000000000023DE                 mov     rdx, [rsp+0E8h+n] ; n
.text:00000000000023E3                 mov     rsi, [rsp+0E8h+s2] ; s2
.text:00000000000023E8                 mov     rdi, r9         ; s1
.text:00000000000023EB                 mov     [rsp+0E8h+var_A8], r11
.text:00000000000023F0                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:00000000000023F5                 mov     [rsp+0E8h+var_B8], r9
.text:00000000000023FA                 call    _memcmp
.text:00000000000023FF                 test    eax, eax
.text:0000000000002401                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000002406                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:000000000000240C                 mov     r11, [rsp+0E8h+var_A8]
.text:0000000000002411                 jnz     loc_2990
.text:0000000000002417                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000241C                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000002422                 jnz     loc_33A5
.text:0000000000002428                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000002430
.text:0000000000002430 loc_2430:                               ; CODE XREF: quotearg_buffer_restyled+123↑j
.text:0000000000002430                                         ; quotearg_buffer_restyled+733↓j
.text:0000000000002430                 movzx   ebx, byte ptr [r9]
.text:0000000000002434                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000002437                 ja      def_244E        ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:000000000000243D                 lea     rcx, jpt_244E
.text:0000000000002444                 movzx   edx, bl
.text:0000000000002447                 movsxd  rax, ds:(jpt_244E - 53ECh)[rcx+rdx*4]
.text:000000000000244B                 add     rax, rcx
.text:000000000000244E                 jmp     rax             ; switch jump
.text:0000000000002450 ; ---------------------------------------------------------------------------
.text:0000000000002450
.text:0000000000002450 loc_2450:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000002450                                         ; DATA XREF: .rodata:jpt_27DA↓o
.text:0000000000002450                 xor     r10d, r10d      ; jumptable 00000000000126DA cases 123,125
.text:0000000000002453
.text:0000000000002453 loc_2453:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002453                                         ; DATA XREF: .rodata:jpt_244E↓o
.text:0000000000002453                 cmp     r11, 1          ; jumptable 000000000001234E cases 123,125
.text:0000000000002457                 setnz   al
.text:000000000000245A                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:000000000000245E                 jnz     short loc_246C
.text:0000000000002460                 mov     rax, [rsp+0E8h+s]
.text:0000000000002465                 cmp     byte ptr [rax+1], 0
.text:0000000000002469                 setnz   al
.text:000000000000246C
.text:000000000000246C loc_246C:                               ; CODE XREF: quotearg_buffer_restyled+1FE↑j
.text:000000000000246C                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002471                 setz    dl
.text:0000000000002474                 test    al, al
.text:0000000000002476                 jz      loc_26C8
.text:000000000000247C
.text:000000000000247C loc_247C:                               ; CODE XREF: quotearg_buffer_restyled+46B↓j
.text:000000000000247C                 xor     r12d, r12d
.text:000000000000247F                 xor     eax, eax
.text:0000000000002481                 nop     dword ptr [rax+00000000h]
.text:0000000000002488
.text:0000000000002488 loc_2488:                               ; CODE XREF: quotearg_buffer_restyled+2E9↓j
.text:0000000000002488                                         ; quotearg_buffer_restyled+30C↓j ...
.text:0000000000002488                 cmp     [rsp+0E8h+var_DB], 1
.text:000000000000248D                 jnz     loc_25A2
.text:0000000000002493                 test    dl, dl
.text:0000000000002495                 jnz     loc_25A2
.text:000000000000249B
.text:000000000000249B loc_249B:                               ; CODE XREF: quotearg_buffer_restyled+347↓j
.text:000000000000249B                 mov     rsi, [rsp+0E8h+var_C8]
.text:00000000000024A0                 test    rsi, rsi
.text:00000000000024A3                 jz      short loc_24B9
.text:00000000000024A5                 mov     edx, ebx
.text:00000000000024A7                 shr     dl, 5
.text:00000000000024AA                 movzx   edx, dl
.text:00000000000024AD                 mov     edx, [rsi+rdx*4]
.text:00000000000024B0                 bt      edx, ebx
.text:00000000000024B3                 jb      loc_2603
.text:00000000000024B9
.text:00000000000024B9 loc_24B9:                               ; CODE XREF: quotearg_buffer_restyled+243↑j
.text:00000000000024B9                                         ; quotearg_buffer_restyled+34D↓j ...
.text:00000000000024B9                 test    r10b, r10b
.text:00000000000024BC                 jnz     loc_2603
.text:00000000000024C2                 xor     eax, 1
.text:00000000000024C5                 add     rbp, 1
.text:00000000000024C9                 and     eax, r8d
.text:00000000000024CC
.text:00000000000024CC loc_24CC:                               ; CODE XREF: quotearg_buffer_restyled+75A↓j
.text:00000000000024CC                                         ; quotearg_buffer_restyled+AE8↓j
.text:00000000000024CC                 test    al, al
.text:00000000000024CE                 jz      short loc_24F0
.text:00000000000024D0                 cmp     r13, r15
.text:00000000000024D3                 jbe     short loc_24DA
.text:00000000000024D5                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000024DA
.text:00000000000024DA loc_24DA:                               ; CODE XREF: quotearg_buffer_restyled+273↑j
.text:00000000000024DA                 lea     rax, [r15+1]
.text:00000000000024DE                 cmp     r13, rax
.text:00000000000024E1                 jbe     short loc_24E9
.text:00000000000024E3                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:00000000000024E9
.text:00000000000024E9 loc_24E9:                               ; CODE XREF: quotearg_buffer_restyled+281↑j
.text:00000000000024E9                 add     r15, 2
.text:00000000000024ED                 xor     r8d, r8d
.text:00000000000024F0
.text:00000000000024F0 loc_24F0:                               ; CODE XREF: quotearg_buffer_restyled+26E↑j
.text:00000000000024F0                                         ; quotearg_buffer_restyled+403↓j ...
.text:00000000000024F0                 cmp     r15, r13
.text:00000000000024F3                 jnb     short loc_24F9
.text:00000000000024F5                 mov     [r14+r15], bl
.text:00000000000024F9
.text:00000000000024F9 loc_24F9:                               ; CODE XREF: quotearg_buffer_restyled+293↑j
.text:00000000000024F9                 movzx   edi, [rsp+0E8h+var_DA]
.text:00000000000024FE                 add     r15, 1
.text:0000000000002502                 mov     eax, 0
.text:0000000000002507                 test    r12b, r12b
.text:000000000000250A                 cmovz   edi, eax
.text:000000000000250D                 mov     [rsp+0E8h+var_DA], dil
.text:0000000000002512                 jmp     loc_2348
.text:0000000000002512 ; ---------------------------------------------------------------------------
.text:0000000000002517                 align 20h
.text:0000000000002520
.text:0000000000002520 loc_2520:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000002520                                         ; DATA XREF: .rodata:jpt_27DA↓o
.text:0000000000002520                 xor     r10d, r10d      ; jumptable 00000000000126DA case 63
.text:0000000000002523
.text:0000000000002523 loc_2523:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002523                                         ; DATA XREF: .rodata:jpt_244E↓o
.text:0000000000002523                 mov     eax, [rsp+0E8h+var_E0] ; jumptable 000000000001234E case 63
.text:0000000000002527                 cmp     eax, 2
.text:000000000000252A                 jz      loc_2AE8
.text:0000000000002530                 cmp     eax, 5
.text:0000000000002533                 jz      loc_2AA8
.text:0000000000002539                 cmp     eax, 2
.text:000000000000253C                 mov     ebx, 3Fh ; '?'
.text:0000000000002541                 setz    dl
.text:0000000000002544                 xor     r12d, r12d
.text:0000000000002547                 xor     eax, eax
.text:0000000000002549                 jmp     loc_2488
.text:0000000000002549 ; ---------------------------------------------------------------------------
.text:000000000000254E                 align 10h
.text:0000000000002550
.text:0000000000002550 loc_2550:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000002550                                         ; DATA XREF: .rodata:jpt_27DA↓o
.text:0000000000002550                 xor     r10d, r10d      ; jumptable 00000000000126DA case 39
.text:0000000000002553
.text:0000000000002553 loc_2553:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002553                                         ; DATA XREF: .rodata:jpt_244E↓o
.text:0000000000002553                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 39
.text:0000000000002558                 jz      loc_2A60
.text:000000000000255E                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000002563                 xor     edx, edx
.text:0000000000002565                 xor     eax, eax
.text:0000000000002567                 mov     ebx, 27h ; '''
.text:000000000000256C                 jmp     loc_2488
.text:000000000000256C ; ---------------------------------------------------------------------------
.text:0000000000002571                 align 8
.text:0000000000002578
.text:0000000000002578 loc_2578:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002578                                         ; DATA XREF: .rodata:jpt_244E↓o
.text:0000000000002578                 mov     edx, 9          ; jumptable 000000000001234E case 9
.text:000000000000257D                 mov     ebx, 74h ; 't'
.text:0000000000002582
.text:0000000000002582 loc_2582:                               ; CODE XREF: quotearg_buffer_restyled+4BA↓j
.text:0000000000002582                                         ; quotearg_buffer_restyled+4EA↓j ...
.text:0000000000002582                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002587                 setz    al
.text:000000000000258A                 and     al, [rsp+0E8h+var_D9]
.text:000000000000258E                 jnz     loc_26DE
.text:0000000000002594
.text:0000000000002594 loc_2594:                               ; CODE XREF: quotearg_buffer_restyled+362↓j
.text:0000000000002594                                         ; quotearg_buffer_restyled+45A↓j ...
.text:0000000000002594                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000002599                 jnz     short loc_2600
.text:000000000000259B
.text:000000000000259B loc_259B:                               ; CODE XREF: quotearg_buffer_restyled+422↓j
.text:000000000000259B                 mov     ebx, edx
.text:000000000000259D                 xor     r12d, r12d
.text:00000000000025A0                 xor     eax, eax
.text:00000000000025A2
.text:00000000000025A2 loc_25A2:                               ; CODE XREF: quotearg_buffer_restyled+22D↑j
.text:00000000000025A2                                         ; quotearg_buffer_restyled+235↑j
.text:00000000000025A2                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000025A7                 jnz     loc_249B
.text:00000000000025AD                 jmp     loc_24B9
.text:00000000000025AD ; ---------------------------------------------------------------------------
.text:00000000000025B2                 align 8
.text:00000000000025B8
.text:00000000000025B8 loc_25B8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000025B8                                         ; DATA XREF: .rodata:jpt_244E↓o
.text:00000000000025B8                 mov     edx, 8          ; jumptable 000000000001234E case 8
.text:00000000000025BD                 mov     ebx, 62h ; 'b'
.text:00000000000025C2                 jmp     short loc_2594
.text:00000000000025C2 ; ---------------------------------------------------------------------------
.text:00000000000025C4                 align 8
.text:00000000000025C8
.text:00000000000025C8 loc_25C8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000025C8                                         ; DATA XREF: .rodata:jpt_244E↓o
.text:00000000000025C8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 92
.text:00000000000025CD                 jz      loc_29A0
.text:00000000000025D3                 cmp     [rsp+0E8h+var_DB], 0
.text:00000000000025D8                 jz      loc_27F0
.text:00000000000025DE
.text:00000000000025DE loc_25DE:                               ; CODE XREF: quotearg_buffer_restyled+588↓j
.text:00000000000025DE                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000025E3                 jz      loc_27F0
.text:00000000000025E9                 cmp     [rsp+0E8h+n], 0
.text:00000000000025EF                 jnz     loc_29AB
.text:00000000000025F5                 mov     ebx, 5Ch ; '\'
.text:00000000000025FA                 nop     word ptr [rax+rax+00h]
.text:0000000000002600
.text:0000000000002600 loc_2600:                               ; CODE XREF: quotearg_buffer_restyled+339↑j
.text:0000000000002600                                         ; quotearg_buffer_restyled+5D5↓j ...
.text:0000000000002600                 xor     r12d, r12d
.text:0000000000002603
.text:0000000000002603 loc_2603:                               ; CODE XREF: quotearg_buffer_restyled+253↑j
.text:0000000000002603                                         ; quotearg_buffer_restyled+25C↑j
.text:0000000000002603                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002608                 setz    dl
.text:000000000000260B                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002610                 mov     eax, edx
.text:0000000000002612                 jnz     loc_2E68
.text:0000000000002618                 mov     eax, r8d
.text:000000000000261B                 xor     eax, 1
.text:000000000000261E                 and     al, dl
.text:0000000000002620                 jz      short loc_2651
.text:0000000000002622                 cmp     r13, r15
.text:0000000000002625                 jbe     short loc_262C
.text:0000000000002627                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000262C
.text:000000000000262C loc_262C:                               ; CODE XREF: quotearg_buffer_restyled+3C5↑j
.text:000000000000262C                 lea     rdx, [r15+1]
.text:0000000000002630                 cmp     r13, rdx
.text:0000000000002633                 jbe     short loc_263B
.text:0000000000002635                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:000000000000263B
.text:000000000000263B loc_263B:                               ; CODE XREF: quotearg_buffer_restyled+3D3↑j
.text:000000000000263B                 lea     rdx, [r15+2]
.text:000000000000263F                 cmp     r13, rdx
.text:0000000000002642                 jbe     short loc_264A
.text:0000000000002644                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000264A
.text:000000000000264A loc_264A:                               ; CODE XREF: quotearg_buffer_restyled+3E2↑j
.text:000000000000264A                 add     r15, 3
.text:000000000000264E                 mov     r8d, eax
.text:0000000000002651
.text:0000000000002651 loc_2651:                               ; CODE XREF: quotearg_buffer_restyled+3C0↑j
.text:0000000000002651                 cmp     r13, r15
.text:0000000000002654                 jbe     short loc_265B
.text:0000000000002656                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:000000000000265B
.text:000000000000265B loc_265B:                               ; CODE XREF: quotearg_buffer_restyled+3F4↑j
.text:000000000000265B                 add     r15, 1
.text:000000000000265F                 add     rbp, 1
.text:0000000000002663                 jmp     loc_24F0
.text:0000000000002663 ; ---------------------------------------------------------------------------
.text:0000000000002668                 align 10h
.text:0000000000002670
.text:0000000000002670 loc_2670:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002670                                         ; DATA XREF: .rodata:jpt_244E↓o
.text:0000000000002670                 cmp     [rsp+0E8h+var_DB], 0 ; jumptable 000000000001234E case 0
.text:0000000000002675                 jnz     loc_2843
.text:000000000000267B                 xor     edx, edx
.text:000000000000267D                 test    byte ptr [rsp+0E8h+var_70], 1
.text:0000000000002682                 jz      loc_259B
.text:0000000000002688                 add     rbp, 1
.text:000000000000268C                 jmp     loc_2348
.text:000000000000268C ; ---------------------------------------------------------------------------
.text:0000000000002691                 align 8
.text:0000000000002698
.text:0000000000002698 loc_2698:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002698                                         ; DATA XREF: .rodata:jpt_244E↓o
.text:0000000000002698                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 37,43-58,65-90,93,95,97-122
.text:000000000000269D                 setz    dl
.text:00000000000026A0                 xor     eax, eax
.text:00000000000026A2                 jmp     loc_2488
.text:00000000000026A2 ; ---------------------------------------------------------------------------
.text:00000000000026A7                 align 10h
.text:00000000000026B0
.text:00000000000026B0 loc_26B0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000026B0                                         ; DATA XREF: .rodata:jpt_244E↓o
.text:00000000000026B0                 mov     edx, 7          ; jumptable 000000000001234E case 7
.text:00000000000026B5                 mov     ebx, 61h ; 'a'
.text:00000000000026BA                 jmp     loc_2594
.text:00000000000026BA ; ---------------------------------------------------------------------------
.text:00000000000026BF                 align 20h
.text:00000000000026C0
.text:00000000000026C0 loc_26C0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000026C0                                         ; DATA XREF: .rodata:jpt_244E↓o
.text:00000000000026C0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 35,126
.text:00000000000026C5                 setz    dl
.text:00000000000026C8
.text:00000000000026C8 loc_26C8:                               ; CODE XREF: quotearg_buffer_restyled+216↑j
.text:00000000000026C8                                         ; quotearg_buffer_restyled+6A3↓j
.text:00000000000026C8                 test    rbp, rbp
.text:00000000000026CB                 jnz     loc_247C
.text:00000000000026D1
.text:00000000000026D1 loc_26D1:                               ; CODE XREF: quotearg_buffer_restyled+49B↓j
.text:00000000000026D1                                         ; quotearg_buffer_restyled+4AD↓j ...
.text:00000000000026D1                 movzx   eax, [rsp+0E8h+var_D9]
.text:00000000000026D6                 and     al, dl
.text:00000000000026D8                 jz      loc_2488
.text:00000000000026DE
.text:00000000000026DE loc_26DE:                               ; CODE XREF: quotearg_buffer_restyled+32E↑j
.text:00000000000026DE                 mov     rbp, r11
.text:00000000000026E1                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000026E9                 jmp     loc_2DE9
.text:00000000000026E9 ; ---------------------------------------------------------------------------
.text:00000000000026EE                 align 10h
.text:00000000000026F0
.text:00000000000026F0 loc_26F0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000026F0                                         ; DATA XREF: .rodata:jpt_244E↓o
.text:00000000000026F0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:00000000000026F5                 setz    dl
.text:00000000000026F8                 xor     r12d, r12d
.text:00000000000026FB                 jmp     short loc_26D1
.text:00000000000026FB ; ---------------------------------------------------------------------------
.text:00000000000026FD                 align 20h
.text:0000000000002700
.text:0000000000002700 loc_2700:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002700                                         ; DATA XREF: .rodata:jpt_244E↓o
.text:0000000000002700                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 32
.text:0000000000002705                 mov     ebx, 20h ; ' '
.text:000000000000270A                 setz    dl
.text:000000000000270D                 jmp     short loc_26D1
.text:000000000000270D ; ---------------------------------------------------------------------------
.text:000000000000270F                 align 10h
.text:0000000000002710
.text:0000000000002710 loc_2710:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002710                                         ; DATA XREF: .rodata:jpt_244E↓o
.text:0000000000002710                 mov     edx, 0Dh        ; jumptable 000000000001234E case 13
.text:0000000000002715                 mov     ebx, 72h ; 'r'
.text:000000000000271A                 jmp     loc_2582
.text:000000000000271A ; ---------------------------------------------------------------------------
.text:000000000000271F                 align 20h
.text:0000000000002720
.text:0000000000002720 loc_2720:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002720                                         ; DATA XREF: .rodata:jpt_244E↓o
.text:0000000000002720                 mov     edx, 0Ch        ; jumptable 000000000001234E case 12
.text:0000000000002725                 mov     ebx, 66h ; 'f'
.text:000000000000272A                 jmp     loc_2594
.text:000000000000272A ; ---------------------------------------------------------------------------
.text:000000000000272F                 align 10h
.text:0000000000002730
.text:0000000000002730 loc_2730:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002730                                         ; DATA XREF: .rodata:jpt_244E↓o
.text:0000000000002730                 mov     edx, 0Bh        ; jumptable 000000000001234E case 11
.text:0000000000002735                 mov     ebx, 76h ; 'v'
.text:000000000000273A                 jmp     loc_2594
.text:000000000000273A ; ---------------------------------------------------------------------------
.text:000000000000273F                 align 20h
.text:0000000000002740
.text:0000000000002740 loc_2740:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002740                                         ; DATA XREF: .rodata:jpt_244E↓o
.text:0000000000002740                 mov     edx, 0Ah        ; jumptable 000000000001234E case 10
.text:0000000000002745                 mov     ebx, 6Eh ; 'n'
.text:000000000000274A                 jmp     loc_2582
.text:000000000000274A ; ---------------------------------------------------------------------------
.text:000000000000274F                 align 10h
.text:0000000000002750
.text:0000000000002750 def_27DA:                               ; CODE XREF: quotearg_buffer_restyled+567↓j
.text:0000000000002750                                         ; quotearg_buffer_restyled+57A↓j
.text:0000000000002750                                         ; DATA XREF: ...
.text:0000000000002750                 xor     r10d, r10d      ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000002753                 nop     dword ptr [rax+rax+00h]
.text:0000000000002758
.text:0000000000002758 def_244E:                               ; CODE XREF: quotearg_buffer_restyled+1D7↑j
.text:0000000000002758                                         ; quotearg_buffer_restyled+1EE↑j
.text:0000000000002758                                         ; DATA XREF: ...
.text:0000000000002758                 cmp     [rsp+0E8h+var_90], 1 ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:000000000000275E                 jnz     loc_2B08
.text:0000000000002764                 mov     [rsp+0E8h+var_B0], r11
.text:0000000000002769                 mov     byte ptr [rsp+0E8h+var_B8], r8b
.text:000000000000276E                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000002773                 call    ___ctype_b_loc
.text:0000000000002778                 mov     rcx, [rax]
.text:000000000000277B                 movzx   edx, bl
.text:000000000000277E                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000002784                 movzx   r8d, byte ptr [rsp+0E8h+var_B8]
.text:000000000000278A                 mov     r11, [rsp+0E8h+var_B0]
.text:000000000000278F                 mov     edi, 1
.text:0000000000002794                 movzx   eax, word ptr [rcx+rdx*2]
.text:0000000000002798                 and     ax, 4000h
.text:000000000000279C                 setnz   r12b
.text:00000000000027A0                 setz    al
.text:00000000000027A3                 and     al, [rsp+0E8h+var_DB]
.text:00000000000027A7
.text:00000000000027A7 loc_27A7:                               ; CODE XREF: quotearg_buffer_restyled+FED↓j
.text:00000000000027A7                 test    al, al
.text:00000000000027A9                 jnz     loc_3141
.text:00000000000027AF                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000027B4                 setz    dl
.text:00000000000027B7                 jmp     loc_2488
.text:00000000000027B7 ; ---------------------------------------------------------------------------
.text:00000000000027BC                 align 20h
.text:00000000000027C0
.text:00000000000027C0 loc_27C0:                               ; CODE XREF: quotearg_buffer_restyled+131↑j
.text:00000000000027C0                 movzx   ebx, byte ptr [r9]
.text:00000000000027C4                 cmp     bl, 7Eh         ; switch 127 cases
.text:00000000000027C7                 ja      short def_27DA  ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:00000000000027C9                 lea     rcx, jpt_27DA
.text:00000000000027D0                 movzx   edx, bl
.text:00000000000027D3                 movsxd  rax, ds:(jpt_27DA - 55E8h)[rcx+rdx*4]
.text:00000000000027D7                 add     rax, rcx
.text:00000000000027DA                 jmp     rax             ; switch jump
.text:00000000000027DA ; ---------------------------------------------------------------------------
.text:00000000000027DC                 align 20h
.text:00000000000027E0
.text:00000000000027E0 loc_27E0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000027E0                                         ; DATA XREF: .rodata:jpt_27DA↓o
.text:00000000000027E0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 92
.text:00000000000027E3                 cmp     [rsp+0E8h+var_DB], 0
.text:00000000000027E8                 jnz     loc_25DE
.text:00000000000027EE                 xchg    ax, ax
.text:00000000000027F0
.text:00000000000027F0 loc_27F0:                               ; CODE XREF: quotearg_buffer_restyled+378↑j
.text:00000000000027F0                                         ; quotearg_buffer_restyled+383↑j
.text:00000000000027F0                 mov     edx, 5Ch ; '\'
.text:00000000000027F5                 mov     ebx, 5Ch ; '\'
.text:00000000000027FA                 jmp     loc_2594
.text:00000000000027FA ; ---------------------------------------------------------------------------
.text:00000000000027FF                 align 20h
.text:0000000000002800
.text:0000000000002800 loc_2800:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002800                                         ; DATA XREF: .rodata:jpt_27DA↓o
.text:0000000000002800                 mov     edx, 0Ch        ; jumptable 00000000000126DA case 12
.text:0000000000002805                 xor     r10d, r10d
.text:0000000000002808                 mov     ebx, 66h ; 'f'
.text:000000000000280D                 jmp     loc_2594
.text:000000000000280D ; ---------------------------------------------------------------------------
.text:0000000000002812                 align 8
.text:0000000000002818
.text:0000000000002818 loc_2818:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002818                                         ; DATA XREF: .rodata:jpt_27DA↓o
.text:0000000000002818                 mov     edx, 0Ah        ; jumptable 00000000000126DA case 10
.text:000000000000281D                 xor     r10d, r10d
.text:0000000000002820                 mov     ebx, 6Eh ; 'n'
.text:0000000000002825                 jmp     loc_2582
.text:0000000000002825 ; ---------------------------------------------------------------------------
.text:000000000000282A                 align 10h
.text:0000000000002830
.text:0000000000002830 loc_2830:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002830                                         ; DATA XREF: .rodata:jpt_27DA↓o
.text:0000000000002830                 mov     ebx, 61h ; 'a'  ; jumptable 00000000000126DA case 7
.text:0000000000002835                 jmp     loc_2600
.text:0000000000002835 ; ---------------------------------------------------------------------------
.text:000000000000283A                 align 20h
.text:0000000000002840
.text:0000000000002840 loc_2840:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002840                                         ; DATA XREF: .rodata:jpt_27DA↓o
.text:0000000000002840                 xor     r10d, r10d      ; jumptable 00000000000126DA case 0
.text:0000000000002843
.text:0000000000002843 loc_2843:                               ; CODE XREF: quotearg_buffer_restyled+415↑j
.text:0000000000002843                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002848                 setz    dl
.text:000000000000284B                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002850                 jnz     loc_33EA
.text:0000000000002856                 mov     eax, r8d
.text:0000000000002859                 mov     rcx, r15
.text:000000000000285C                 xor     eax, 1
.text:000000000000285F                 and     al, dl
.text:0000000000002861                 jz      short loc_2890
.text:0000000000002863                 cmp     r13, r15
.text:0000000000002866                 jbe     short loc_286D
.text:0000000000002868                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000286D
.text:000000000000286D loc_286D:                               ; CODE XREF: quotearg_buffer_restyled+606↑j
.text:000000000000286D                 lea     rcx, [r15+1]
.text:0000000000002871                 cmp     r13, rcx
.text:0000000000002874                 jbe     short loc_287C
.text:0000000000002876                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:000000000000287C
.text:000000000000287C loc_287C:                               ; CODE XREF: quotearg_buffer_restyled+614↑j
.text:000000000000287C                 lea     rcx, [r15+2]
.text:0000000000002880                 cmp     r13, rcx
.text:0000000000002883                 ja      loc_2EB9
.text:0000000000002889
.text:0000000000002889 loc_2889:                               ; CODE XREF: quotearg_buffer_restyled+C5F↓j
.text:0000000000002889                 lea     rcx, [r15+3]
.text:000000000000288D                 mov     r8d, eax
.text:0000000000002890
.text:0000000000002890 loc_2890:                               ; CODE XREF: quotearg_buffer_restyled+601↑j
.text:0000000000002890                 cmp     r13, rcx
.text:0000000000002893                 jbe     short loc_289A
.text:0000000000002895                 mov     byte ptr [r14+rcx], 5Ch ; '\'
.text:000000000000289A
.text:000000000000289A loc_289A:                               ; CODE XREF: quotearg_buffer_restyled+633↑j
.text:000000000000289A                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000289F                 lea     r15, [rcx+1]
.text:00000000000028A3                 jz      loc_2EA9
.text:00000000000028A9                 lea     rax, [rbp+1]
.text:00000000000028AD                 cmp     rax, r11
.text:00000000000028B0                 jnb     short loc_28CB
.text:00000000000028B2                 mov     rax, [rsp+0E8h+s]
.text:00000000000028B7                 movzx   eax, byte ptr [rax+rbp+1]
.text:00000000000028BC                 mov     byte ptr [rsp+0E8h+ps], al
.text:00000000000028C0                 sub     eax, 30h ; '0'
.text:00000000000028C3                 cmp     al, 9
.text:00000000000028C5                 jbe     loc_30F9
.text:00000000000028CB
.text:00000000000028CB loc_28CB:                               ; CODE XREF: quotearg_buffer_restyled+650↑j
.text:00000000000028CB                 mov     eax, r12d
.text:00000000000028CE                 mov     ebx, 30h ; '0'
.text:00000000000028D3                 xor     r12d, r12d
.text:00000000000028D6                 jmp     loc_2488
.text:00000000000028D6 ; ---------------------------------------------------------------------------
.text:00000000000028DB                 align 20h
.text:00000000000028E0
.text:00000000000028E0 loc_28E0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000028E0                                         ; DATA XREF: .rodata:jpt_27DA↓o
.text:00000000000028E0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 37,43-58,65-90,93,95,97-122
.text:00000000000028E5                 mov     r12d, r10d
.text:00000000000028E8                 setz    dl
.text:00000000000028EB                 xor     r10d, r10d
.text:00000000000028EE                 xor     eax, eax
.text:00000000000028F0                 jmp     loc_2488
.text:00000000000028F0 ; ---------------------------------------------------------------------------
.text:00000000000028F5                 align 8
.text:00000000000028F8
.text:00000000000028F8 loc_28F8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000028F8                                         ; DATA XREF: .rodata:jpt_27DA↓o
.text:00000000000028F8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 35,126
.text:00000000000028FD                 setz    dl
.text:0000000000002900                 xor     r10d, r10d
.text:0000000000002903                 jmp     loc_26C8
.text:0000000000002903 ; ---------------------------------------------------------------------------
.text:0000000000002908                 align 10h
.text:0000000000002910
.text:0000000000002910 loc_2910:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002910                                         ; DATA XREF: .rodata:jpt_27DA↓o
.text:0000000000002910                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000002915                 setz    dl
.text:0000000000002918                 xor     r10d, r10d
.text:000000000000291B                 xor     r12d, r12d
.text:000000000000291E                 jmp     loc_26D1
.text:000000000000291E ; ---------------------------------------------------------------------------
.text:0000000000002923                 align 8
.text:0000000000002928
.text:0000000000002928 loc_2928:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002928                                         ; DATA XREF: .rodata:jpt_27DA↓o
.text:0000000000002928                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA case 32
.text:000000000000292D                 mov     r12d, r10d
.text:0000000000002930                 mov     ebx, 20h ; ' '
.text:0000000000002935                 setz    dl
.text:0000000000002938                 xor     r10d, r10d
.text:000000000000293B                 jmp     loc_26D1
.text:0000000000002940 ; ---------------------------------------------------------------------------
.text:0000000000002940
.text:0000000000002940 loc_2940:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002940                                         ; DATA XREF: .rodata:jpt_27DA↓o
.text:0000000000002940                 mov     edx, 0Dh        ; jumptable 00000000000126DA case 13
.text:0000000000002945                 xor     r10d, r10d
.text:0000000000002948                 mov     ebx, 72h ; 'r'
.text:000000000000294D                 jmp     loc_2582
.text:000000000000294D ; ---------------------------------------------------------------------------
.text:0000000000002952                 align 8
.text:0000000000002958
.text:0000000000002958 loc_2958:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002958                                         ; DATA XREF: .rodata:jpt_27DA↓o
.text:0000000000002958                 mov     ebx, 76h ; 'v'  ; jumptable 00000000000126DA case 11
.text:000000000000295D                 jmp     loc_2600
.text:000000000000295D ; ---------------------------------------------------------------------------
.text:0000000000002962                 align 8
.text:0000000000002968
.text:0000000000002968 loc_2968:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002968                                         ; DATA XREF: .rodata:jpt_27DA↓o
.text:0000000000002968                 mov     edx, 9          ; jumptable 00000000000126DA case 9
.text:000000000000296D                 xor     r10d, r10d
.text:0000000000002970                 mov     ebx, 74h ; 't'
.text:0000000000002975                 jmp     loc_2582
.text:0000000000002975 ; ---------------------------------------------------------------------------
.text:000000000000297A                 align 20h
.text:0000000000002980
.text:0000000000002980 loc_2980:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002980                                         ; DATA XREF: .rodata:jpt_27DA↓o
.text:0000000000002980                 mov     ebx, 62h ; 'b'  ; jumptable 00000000000126DA case 8
.text:0000000000002985                 jmp     loc_2600
.text:0000000000002985 ; ---------------------------------------------------------------------------
.text:000000000000298A                 align 10h
.text:0000000000002990
.text:0000000000002990 loc_2990:                               ; CODE XREF: quotearg_buffer_restyled+178↑j
.text:0000000000002990                                         ; quotearg_buffer_restyled+1B1↑j
.text:0000000000002990                 xor     r10d, r10d
.text:0000000000002993                 jmp     loc_2430
.text:0000000000002993 ; ---------------------------------------------------------------------------
.text:0000000000002998                 align 20h
.text:00000000000029A0
.text:00000000000029A0 loc_29A0:                               ; CODE XREF: quotearg_buffer_restyled+36D↑j
.text:00000000000029A0                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000029A5                 jnz     loc_3310
.text:00000000000029AB
.text:00000000000029AB loc_29AB:                               ; CODE XREF: quotearg_buffer_restyled+38F↑j
.text:00000000000029AB                 add     rbp, 1
.text:00000000000029AF                 mov     eax, r8d
.text:00000000000029B2                 xor     r12d, r12d
.text:00000000000029B5                 mov     ebx, 5Ch ; '\'
.text:00000000000029BA                 jmp     loc_24CC
.text:00000000000029BA ; ---------------------------------------------------------------------------
.text:00000000000029BF                 align 20h
.text:00000000000029C0
.text:00000000000029C0 loc_29C0:                               ; CODE XREF: quotearg_buffer_restyled+105↑j
.text:00000000000029C0                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000029C5                 movzx   ebx, [rsp+0E8h+var_D9]
.text:00000000000029CA                 mov     r12d, r8d
.text:00000000000029CD                 mov     rbp, r11
.text:00000000000029D0                 setz    dl
.text:00000000000029D3                 mov     eax, ebx
.text:00000000000029D5                 test    r15, r15
.text:00000000000029D8                 setz    cl
.text:00000000000029DB                 and     eax, edx
.text:00000000000029DD                 and     al, cl
.text:00000000000029DF                 jnz     loc_3446
.text:00000000000029E5                 mov     eax, ebx
.text:00000000000029E7                 xor     eax, 1
.text:00000000000029EA                 and     dl, al
.text:00000000000029EC                 jz      loc_335C
.text:00000000000029F2                 cmp     [rsp+0E8h+var_6C], 0
.text:00000000000029F7                 jz      loc_335A
.text:00000000000029FD                 cmp     [rsp+0E8h+var_DA], 0
.text:0000000000002A02                 jnz     loc_33FD
.text:0000000000002A08                 test    r13, r13
.text:0000000000002A0B                 setz    al
.text:0000000000002A0E                 cmp     [rsp+0E8h+var_98], 0
.text:0000000000002A14                 setnz   dl
.text:0000000000002A17                 and     al, dl
.text:0000000000002A19                 jz      loc_343C
.text:0000000000002A1F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000002A24
.text:0000000000002A24 loc_2A24:                               ; CODE XREF: quotearg_buffer_restyled+121D↓j
.text:0000000000002A24                 lea     rbx, asc_536D   ; "'"
.text:0000000000002A2B                 mov     byte ptr [r14], 27h ; '''
.text:0000000000002A2F                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000002A37                 mov     r15d, 1
.text:0000000000002A3D                 mov     [rsp+0E8h+n], 1
.text:0000000000002A46                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000002A4B                 mov     [rsp+0E8h+s2], rbx
.text:0000000000002A50                 mov     [rsp+0E8h+var_6C], al
.text:0000000000002A54                 jmp     loc_2333
.text:0000000000002A54 ; ---------------------------------------------------------------------------
.text:0000000000002A59                 align 20h
.text:0000000000002A60
.text:0000000000002A60 loc_2A60:                               ; CODE XREF: quotearg_buffer_restyled+2F8↑j
.text:0000000000002A60                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002A65                 jnz     loc_3310
.text:0000000000002A6B                 test    r13, r13
.text:0000000000002A6E                 jz      loc_2E70
.text:0000000000002A74                 xor     edx, edx
.text:0000000000002A76                 cmp     [rsp+0E8h+var_98], 0
.text:0000000000002A7C                 jnz     loc_2E70
.text:0000000000002A82
.text:0000000000002A82 loc_2A82:                               ; CODE XREF: quotearg_buffer_restyled+C44↓j
.text:0000000000002A82                                         ; quotearg_buffer_restyled+122A↓j
.text:0000000000002A82                 mov     [rsp+0E8h+var_98], r13
.text:0000000000002A87                 add     r15, 3
.text:0000000000002A8B                 xor     eax, eax
.text:0000000000002A8D                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000002A92                 xor     r8d, r8d
.text:0000000000002A95                 mov     r13, rdx
.text:0000000000002A98                 mov     ebx, 27h ; '''
.text:0000000000002A9D                 jmp     loc_24B9
.text:0000000000002A9D ; ---------------------------------------------------------------------------
.text:0000000000002AA2                 align 8
.text:0000000000002AA8
.text:0000000000002AA8 loc_2AA8:                               ; CODE XREF: quotearg_buffer_restyled+2D3↑j
.text:0000000000002AA8                 test    byte ptr [rsp+0E8h+var_70], 4
.text:0000000000002AAD                 jz      short loc_2AD0
.text:0000000000002AAF                 lea     rcx, [rbp+2]
.text:0000000000002AB3                 cmp     rcx, r11
.text:0000000000002AB6                 jnb     short loc_2AD0
.text:0000000000002AB8                 mov     rax, [rsp+0E8h+s]
.text:0000000000002ABD                 cmp     byte ptr [rax+rbp+1], 3Fh ; '?'
.text:0000000000002AC2                 jz      loc_3252
.text:0000000000002AC8                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000002AD0
.text:0000000000002AD0 loc_2AD0:                               ; CODE XREF: quotearg_buffer_restyled+84D↑j
.text:0000000000002AD0                                         ; quotearg_buffer_restyled+856↑j ...
.text:0000000000002AD0                 xor     edx, edx
.text:0000000000002AD2                 xor     r12d, r12d
.text:0000000000002AD5                 xor     eax, eax
.text:0000000000002AD7                 mov     ebx, 3Fh ; '?'
.text:0000000000002ADC                 jmp     loc_2488
.text:0000000000002ADC ; ---------------------------------------------------------------------------
.text:0000000000002AE1                 align 8
.text:0000000000002AE8
.text:0000000000002AE8 loc_2AE8:                               ; CODE XREF: quotearg_buffer_restyled+2CA↑j
.text:0000000000002AE8                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002AED                 jnz     loc_3310
.text:0000000000002AF3                 xor     r12d, r12d
.text:0000000000002AF6                 xor     eax, eax
.text:0000000000002AF8                 mov     ebx, 3Fh ; '?'
.text:0000000000002AFD                 jmp     loc_24B9
.text:0000000000002AFD ; ---------------------------------------------------------------------------
.text:0000000000002B02                 align 8
.text:0000000000002B08
.text:0000000000002B08 loc_2B08:                               ; CODE XREF: quotearg_buffer_restyled+4FE↑j
.text:0000000000002B08                 lea     rax, [rsp+0E8h+var_48]
.text:0000000000002B10                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000002B14                 mov     [rsp+0E8h+var_48], 0
.text:0000000000002B20                 mov     [rsp+0E8h+ps], rax
.text:0000000000002B25                 jnz     short loc_2B54
.text:0000000000002B27                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000002B2C                 mov     byte ptr [rsp+0E8h+var_A8], r8b
.text:0000000000002B31                 mov     byte ptr [rsp+0E8h+var_B0], r10b
.text:0000000000002B36                 mov     [rsp+0E8h+var_B8], r9
.text:0000000000002B3B                 call    _strlen
.text:0000000000002B40                 movzx   r8d, byte ptr [rsp+0E8h+var_A8]
.text:0000000000002B46                 movzx   r10d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000002B4C                 mov     r11, rax
.text:0000000000002B4F                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000002B54
.text:0000000000002B54 loc_2B54:                               ; CODE XREF: quotearg_buffer_restyled+8C5↑j
.text:0000000000002B54                 lea     rax, [rsp+0E8h+wc]
.text:0000000000002B5C                 xor     ecx, ecx
.text:0000000000002B5E                 mov     [rsp+0E8h+var_6A], bl
.text:0000000000002B62                 mov     [rsp+0E8h+var_6B], r8b
.text:0000000000002B67                 mov     rbx, rcx
.text:0000000000002B6A                 mov     [rsp+0E8h+var_60], r9
.text:0000000000002B72                 mov     [rsp+0E8h+var_B0], rax
.text:0000000000002B77                 mov     [rsp+0E8h+var_69], r10b
.text:0000000000002B7C                 mov     [rsp+0E8h+var_68], r15
.text:0000000000002B84                 mov     [rsp+0E8h+var_A8], r14
.text:0000000000002B89                 mov     [rsp+0E8h+var_78], r13
.text:0000000000002B8E                 mov     [rsp+0E8h+var_B8], r11
.text:0000000000002B93
.text:0000000000002B93 loc_2B93:                               ; CODE XREF: quotearg_buffer_restyled+9AF↓j
.text:0000000000002B93                 mov     rax, [rsp+0E8h+s]
.text:0000000000002B98                 lea     r14, [rbp+rbx+0]
.text:0000000000002B9D                 mov     rdx, [rsp+0E8h+var_B8]
.text:0000000000002BA2                 mov     rcx, [rsp+0E8h+ps]
.text:0000000000002BA7                 mov     rdi, [rsp+0E8h+var_B0]
.text:0000000000002BAC                 lea     r13, [rax+r14]
.text:0000000000002BB0                 sub     rdx, r14
.text:0000000000002BB3                 mov     rsi, r13
.text:0000000000002BB6                 call    rpl_mbrtowc
.text:0000000000002BBB                 test    rax, rax
.text:0000000000002BBE                 mov     r15, rax
.text:0000000000002BC1                 jz      short loc_2C11
.text:0000000000002BC3                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000002BC7                 jz      loc_31E5
.text:0000000000002BCD                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000002BD1                 jz      loc_3171
.text:0000000000002BD7                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002BDC                 setz    al
.text:0000000000002BDF                 and     al, [rsp+0E8h+var_D9]
.text:0000000000002BE3                 jnz     loc_2D80
.text:0000000000002BE9
.text:0000000000002BE9 loc_2BE9:                               ; CODE XREF: quotearg_buffer_restyled+B24↓j
.text:0000000000002BE9                                         ; quotearg_buffer_restyled+B47↓j
.text:0000000000002BE9                 mov     edi, [rsp+0E8h+wc] ; wc
.text:0000000000002BF0                 call    _iswprint
.text:0000000000002BF5                 mov     rdi, [rsp+0E8h+ps] ; ps
.text:0000000000002BFA                 test    eax, eax
.text:0000000000002BFC                 mov     eax, 0
.text:0000000000002C01                 cmovz   r12d, eax
.text:0000000000002C05                 add     rbx, r15
.text:0000000000002C08                 call    _mbsinit
.text:0000000000002C0D                 test    eax, eax
.text:0000000000002C0F                 jz      short loc_2B93
.text:0000000000002C11
.text:0000000000002C11 loc_2C11:                               ; CODE XREF: quotearg_buffer_restyled+961↑j
.text:0000000000002C11                 mov     edx, r12d
.text:0000000000002C14                 mov     rdi, rbx
.text:0000000000002C17                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000002C1D                 xor     edx, 1
.text:0000000000002C20                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000002C25                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000002C2B                 and     dl, [rsp+0E8h+var_DB]
.text:0000000000002C2F                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000002C37                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000002C3C                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000002C41                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000002C46
.text:0000000000002C46 loc_2C46:                               ; CODE XREF: quotearg_buffer_restyled+F80↓j
.text:0000000000002C46                                         ; quotearg_buffer_restyled+FB8↓j
.text:0000000000002C46                 cmp     rdi, 1
.text:0000000000002C4A                 jbe     loc_324B
.text:0000000000002C50
.text:0000000000002C50 loc_2C50:                               ; CODE XREF: quotearg_buffer_restyled+EE9↓j
.text:0000000000002C50                 mov     rcx, rdi
.text:0000000000002C53                 xor     esi, esi
.text:0000000000002C55                 movzx   r9d, [rsp+0E8h+var_D9]
.text:0000000000002C5B                 add     rcx, rbp
.text:0000000000002C5E                 mov     rdi, [rsp+0E8h+s]
.text:0000000000002C63                 jmp     loc_2D1E
.text:0000000000002C63 ; ---------------------------------------------------------------------------
.text:0000000000002C68                 align 10h
.text:0000000000002C70
.text:0000000000002C70 loc_2C70:                               ; CODE XREF: quotearg_buffer_restyled+AC0↓j
.text:0000000000002C70                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002C75                 setz    al
.text:0000000000002C78                 test    r9b, r9b
.text:0000000000002C7B                 jnz     loc_3130
.text:0000000000002C81                 mov     esi, r8d
.text:0000000000002C84                 xor     esi, 1
.text:0000000000002C87                 and     al, sil
.text:0000000000002C8A                 jz      short loc_2CBB
.text:0000000000002C8C                 cmp     r13, r15
.text:0000000000002C8F                 jbe     short loc_2C96
.text:0000000000002C91                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000002C96
.text:0000000000002C96 loc_2C96:                               ; CODE XREF: quotearg_buffer_restyled+A2F↑j
.text:0000000000002C96                 lea     rsi, [r15+1]
.text:0000000000002C9A                 cmp     r13, rsi
.text:0000000000002C9D                 jbe     short loc_2CA5
.text:0000000000002C9F                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000002CA5
.text:0000000000002CA5 loc_2CA5:                               ; CODE XREF: quotearg_buffer_restyled+A3D↑j
.text:0000000000002CA5                 lea     rsi, [r15+2]
.text:0000000000002CA9                 cmp     r13, rsi
.text:0000000000002CAC                 jbe     short loc_2CB4
.text:0000000000002CAE                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000002CB4
.text:0000000000002CB4 loc_2CB4:                               ; CODE XREF: quotearg_buffer_restyled+A4C↑j
.text:0000000000002CB4                 add     r15, 3
.text:0000000000002CB8                 mov     r8d, eax
.text:0000000000002CBB
.text:0000000000002CBB loc_2CBB:                               ; CODE XREF: quotearg_buffer_restyled+A2A↑j
.text:0000000000002CBB                 cmp     r13, r15
.text:0000000000002CBE                 jbe     short loc_2CC5
.text:0000000000002CC0                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000002CC5
.text:0000000000002CC5 loc_2CC5:                               ; CODE XREF: quotearg_buffer_restyled+A5E↑j
.text:0000000000002CC5                 lea     rax, [r15+1]
.text:0000000000002CC9                 cmp     r13, rax
.text:0000000000002CCC                 jbe     short loc_2CDB
.text:0000000000002CCE                 mov     eax, ebx
.text:0000000000002CD0                 shr     al, 6
.text:0000000000002CD3                 add     eax, 30h ; '0'
.text:0000000000002CD6                 mov     [r14+r15+1], al
.text:0000000000002CDB
.text:0000000000002CDB loc_2CDB:                               ; CODE XREF: quotearg_buffer_restyled+A6C↑j
.text:0000000000002CDB                 lea     rax, [r15+2]
.text:0000000000002CDF                 cmp     r13, rax
.text:0000000000002CE2                 jbe     short loc_2CF4
.text:0000000000002CE4                 mov     eax, ebx
.text:0000000000002CE6                 shr     al, 3
.text:0000000000002CE9                 and     eax, 7
.text:0000000000002CEC                 add     eax, 30h ; '0'
.text:0000000000002CEF                 mov     [r14+r15+2], al
.text:0000000000002CF4
.text:0000000000002CF4 loc_2CF4:                               ; CODE XREF: quotearg_buffer_restyled+A82↑j
.text:0000000000002CF4                 and     ebx, 7
.text:0000000000002CF7                 add     rbp, 1
.text:0000000000002CFB                 add     r15, 3
.text:0000000000002CFF                 add     ebx, 30h ; '0'
.text:0000000000002D02                 cmp     rbp, rcx
.text:0000000000002D05                 jnb     loc_24F0
.text:0000000000002D0B                 mov     esi, edx
.text:0000000000002D0D
.text:0000000000002D0D loc_2D0D:                               ; CODE XREF: quotearg_buffer_restyled+B19↓j
.text:0000000000002D0D                                         ; quotearg_buffer_restyled+EF1↓j
.text:0000000000002D0D                 cmp     r13, r15
.text:0000000000002D10                 jbe     short loc_2D16
.text:0000000000002D12                 mov     [r14+r15], bl
.text:0000000000002D16
.text:0000000000002D16 loc_2D16:                               ; CODE XREF: quotearg_buffer_restyled+AB0↑j
.text:0000000000002D16                 movzx   ebx, byte ptr [rdi+rbp]
.text:0000000000002D1A                 add     r15, 1
.text:0000000000002D1E
.text:0000000000002D1E loc_2D1E:                               ; CODE XREF: quotearg_buffer_restyled+A03↑j
.text:0000000000002D1E                 test    dl, dl
.text:0000000000002D20                 jnz     loc_2C70
.text:0000000000002D26                 mov     eax, esi
.text:0000000000002D28                 xor     eax, 1
.text:0000000000002D2B                 and     eax, r8d
.text:0000000000002D2E                 test    r10b, r10b
.text:0000000000002D31                 jz      short loc_2D41
.text:0000000000002D33                 cmp     r13, r15
.text:0000000000002D36                 jbe     short loc_2D3D
.text:0000000000002D38                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000002D3D
.text:0000000000002D3D loc_2D3D:                               ; CODE XREF: quotearg_buffer_restyled+AD6↑j
.text:0000000000002D3D                 add     r15, 1
.text:0000000000002D41
.text:0000000000002D41 loc_2D41:                               ; CODE XREF: quotearg_buffer_restyled+AD1↑j
.text:0000000000002D41                 add     rbp, 1
.text:0000000000002D45                 cmp     rbp, rcx
.text:0000000000002D48                 jnb     loc_24CC
.text:0000000000002D4E                 test    al, al
.text:0000000000002D50                 jz      loc_314E
.text:0000000000002D56                 cmp     r13, r15
.text:0000000000002D59                 jbe     short loc_2D60
.text:0000000000002D5B                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000002D60
.text:0000000000002D60 loc_2D60:                               ; CODE XREF: quotearg_buffer_restyled+AF9↑j
.text:0000000000002D60                 lea     rax, [r15+1]
.text:0000000000002D64                 cmp     r13, rax
.text:0000000000002D67                 jbe     short loc_2D6F
.text:0000000000002D69                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000002D6F
.text:0000000000002D6F loc_2D6F:                               ; CODE XREF: quotearg_buffer_restyled+B07↑j
.text:0000000000002D6F                 add     r15, 2
.text:0000000000002D73                 xor     r10d, r10d
.text:0000000000002D76                 xor     r8d, r8d
.text:0000000000002D79                 jmp     short loc_2D0D
.text:0000000000002D79 ; ---------------------------------------------------------------------------
.text:0000000000002D7B                 align 20h
.text:0000000000002D80
.text:0000000000002D80 loc_2D80:                               ; CODE XREF: quotearg_buffer_restyled+983↑j
.text:0000000000002D80                 cmp     r15, 1
.text:0000000000002D84                 jz      loc_2BE9
.text:0000000000002D8A                 mov     rdi, [rsp+0E8h+s]
.text:0000000000002D8F                 lea     rcx, [rdi+r15]
.text:0000000000002D93                 lea     rdx, [rdi+r14+1]
.text:0000000000002D98                 lea     r8, [rcx+r14]
.text:0000000000002D9C                 jmp     short loc_2DAD
.text:0000000000002D9C ; ---------------------------------------------------------------------------
.text:0000000000002D9E                 align 20h
.text:0000000000002DA0
.text:0000000000002DA0 loc_2DA0:                               ; CODE XREF: quotearg_buffer_restyled+B56↓j
.text:0000000000002DA0                                         ; quotearg_buffer_restyled+B70↓j
.text:0000000000002DA0                 add     rdx, 1
.text:0000000000002DA4                 cmp     r8, rdx
.text:0000000000002DA7                 jz      loc_2BE9
.text:0000000000002DAD
.text:0000000000002DAD loc_2DAD:                               ; CODE XREF: quotearg_buffer_restyled+B3C↑j
.text:0000000000002DAD                 movzx   ecx, byte ptr [rdx]
.text:0000000000002DB0                 sub     ecx, 5Bh ; '['
.text:0000000000002DB3                 cmp     cl, 21h ; '!'
.text:0000000000002DB6                 ja      short loc_2DA0
.text:0000000000002DB8                 mov     esi, 1
.text:0000000000002DBD                 shl     rsi, cl
.text:0000000000002DC0                 mov     rcx, rsi
.text:0000000000002DC3                 mov     rsi, 20000002Bh
.text:0000000000002DCD                 test    rcx, rsi
.text:0000000000002DD0                 jz      short loc_2DA0
.text:0000000000002DD2                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000002DD7                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000002DDC                 mov     rbp, [rsp+0E8h+var_B8]
.text:0000000000002DE1                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000002DE9
.text:0000000000002DE9 loc_2DE9:                               ; CODE XREF: quotearg_buffer_restyled+489↑j
.text:0000000000002DE9                                         ; quotearg_buffer_restyled+C0B↓j ...
.text:0000000000002DE9                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000002DEE                 jz      short loc_2E00
.text:0000000000002DF0                 test    al, al
.text:0000000000002DF2                 mov     eax, 4
.text:0000000000002DF7                 cmovz   eax, [rsp+0E8h+var_E0]
.text:0000000000002DFC                 mov     [rsp+0E8h+var_E0], eax
.text:0000000000002E00
.text:0000000000002E00 loc_2E00:                               ; CODE XREF: quotearg_buffer_restyled+B8E↑j
.text:0000000000002E00                                         ; quotearg_buffer_restyled+1205↓j
.text:0000000000002E00                 sub     rsp, 8
.text:0000000000002E04                 mov     rcx, rbp
.text:0000000000002E07                 mov     rsi, r13
.text:0000000000002E0A                 push    [rsp+0F0h+var_88]
.text:0000000000002E0E                 push    [rsp+0F8h+var_80]
.text:0000000000002E12                 mov     rdi, r14
.text:0000000000002E15                 push    0
.text:0000000000002E17                 mov     r9d, [rsp+108h+var_70]
.text:0000000000002E1F                 mov     r8d, [rsp+108h+var_E0]
.text:0000000000002E24                 mov     rdx, [rsp+108h+s]
.text:0000000000002E29                 and     r9d, 0FFFFFFFDh
.text:0000000000002E2D                 call    quotearg_buffer_restyled
.text:0000000000002E32                 add     rsp, 20h
.text:0000000000002E36                 mov     r15, rax
.text:0000000000002E39
.text:0000000000002E39 loc_2E39:                               ; CODE XREF: quotearg_buffer_restyled+1135↓j
.text:0000000000002E39                                         ; quotearg_buffer_restyled+1140↓j ...
.text:0000000000002E39                 mov     rbx, [rsp+0E8h+var_40]
.text:0000000000002E41                 xor     rbx, fs:28h
.text:0000000000002E4A                 mov     rax, r15
.text:0000000000002E4D                 jnz     loc_3453
.text:0000000000002E53                 add     rsp, 0B8h
.text:0000000000002E5A                 pop     rbx
.text:0000000000002E5B                 pop     rbp
.text:0000000000002E5C                 pop     r12
.text:0000000000002E5E                 pop     r13
.text:0000000000002E60                 pop     r14
.text:0000000000002E62                 pop     r15
.text:0000000000002E64                 retn
.text:0000000000002E64 ; ---------------------------------------------------------------------------
.text:0000000000002E65                 align 8
.text:0000000000002E68
.text:0000000000002E68 loc_2E68:                               ; CODE XREF: quotearg_buffer_restyled+3B2↑j
.text:0000000000002E68                 mov     rbp, r11
.text:0000000000002E6B                 jmp     loc_2DE9
.text:0000000000002E70 ; ---------------------------------------------------------------------------
.text:0000000000002E70
.text:0000000000002E70 loc_2E70:                               ; CODE XREF: quotearg_buffer_restyled+80E↑j
.text:0000000000002E70                                         ; quotearg_buffer_restyled+81C↑j
.text:0000000000002E70                 cmp     r13, r15
.text:0000000000002E73                 jbe     short loc_2E7A
.text:0000000000002E75                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000002E7A
.text:0000000000002E7A loc_2E7A:                               ; CODE XREF: quotearg_buffer_restyled+C13↑j
.text:0000000000002E7A                 lea     rax, [r15+1]
.text:0000000000002E7E                 cmp     r13, rax
.text:0000000000002E81                 jbe     short loc_2E89
.text:0000000000002E83                 mov     byte ptr [r14+r15+1], 5Ch ; '\'
.text:0000000000002E89
.text:0000000000002E89 loc_2E89:                               ; CODE XREF: quotearg_buffer_restyled+C21↑j
.text:0000000000002E89                 lea     rax, [r15+2]
.text:0000000000002E8D                 cmp     r13, rax
.text:0000000000002E90                 jbe     loc_3482
.text:0000000000002E96                 mov     rdx, r13
.text:0000000000002E99                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000002E9F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000002EA4                 jmp     loc_2A82
.text:0000000000002EA9 ; ---------------------------------------------------------------------------
.text:0000000000002EA9
.text:0000000000002EA9 loc_2EA9:                               ; CODE XREF: quotearg_buffer_restyled+643↑j
.text:0000000000002EA9                 mov     eax, r12d
.text:0000000000002EAC                 mov     ebx, 30h ; '0'
.text:0000000000002EB1                 xor     r12d, r12d
.text:0000000000002EB4                 jmp     loc_24B9
.text:0000000000002EB9 ; ---------------------------------------------------------------------------
.text:0000000000002EB9
.text:0000000000002EB9 loc_2EB9:                               ; CODE XREF: quotearg_buffer_restyled+623↑j
.text:0000000000002EB9                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000002EBF                 jmp     loc_2889
.text:0000000000002EC4 ; ---------------------------------------------------------------------------
.text:0000000000002EC4
.text:0000000000002EC4 loc_2EC4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002EC4                                         ; DATA XREF: .rodata:jpt_22F1↓o
.text:0000000000002EC4                 test    ebx, ebx        ; jumptable 00000000000121F1 case 4
.text:0000000000002EC6                 jnz     loc_22F3        ; jumptable 00000000000121F1 case 1
.text:0000000000002ECC                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002ED1
.text:0000000000002ED1 loc_2ED1:                               ; CODE XREF: quotearg_buffer_restyled+11FD↓j
.text:0000000000002ED1                 test    r13, r13
.text:0000000000002ED4                 jnz     loc_346A
.text:0000000000002EDA                 lea     rax, asc_536D   ; "'"
.text:0000000000002EE1                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002EEA                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002EEF                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002EF4                 xor     r12d, r12d
.text:0000000000002EF7                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000002EFC                 mov     [rsp+0E8h+n], 1
.text:0000000000002F05                 mov     [rsp+0E8h+s2], rax
.text:0000000000002F0A                 mov     r15d, 1
.text:0000000000002F10                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000002F18                 jmp     loc_2333
.text:0000000000002F18 ; ---------------------------------------------------------------------------
.text:0000000000002F1D                 align 20h
.text:0000000000002F20
.text:0000000000002F20 loc_2F20:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002F20                                         ; DATA XREF: .rodata:jpt_22F1↓o
.text:0000000000002F20                 test    ebx, ebx        ; jumptable 00000000000121F1 case 5
.text:0000000000002F22                 jnz     loc_331D
.text:0000000000002F28                 test    r13, r13
.text:0000000000002F2B                 jz      loc_3156
.text:0000000000002F31                 mov     byte ptr [r14], 22h ; '"'
.text:0000000000002F35                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002F3A                 xor     r12d, r12d
.text:0000000000002F3D                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002F42                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002F4B
.text:0000000000002F4B loc_2F4B:                               ; CODE XREF: quotearg_buffer_restyled+F0C↓j
.text:0000000000002F4B                 lea     rax, unk_536B
.text:0000000000002F52                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000002F57                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002F5C                 mov     [rsp+0E8h+n], 1
.text:0000000000002F65                 mov     r15d, 1
.text:0000000000002F6B                 mov     [rsp+0E8h+s2], rax
.text:0000000000002F70                 jmp     loc_2333
.text:0000000000002F75 ; ---------------------------------------------------------------------------
.text:0000000000002F75
.text:0000000000002F75 loc_2F75:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002F75                                         ; DATA XREF: .rodata:jpt_22F1↓o
.text:0000000000002F75                 lea     rax, unk_536B   ; jumptable 00000000000121F1 case 6
.text:0000000000002F7C                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002F81                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002F86                 xor     r12d, r12d
.text:0000000000002F89                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002F92                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000002F97                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002F9C                 mov     [rsp+0E8h+n], 1
.text:0000000000002FA5                 xor     r15d, r15d
.text:0000000000002FA8                 mov     [rsp+0E8h+s2], rax
.text:0000000000002FAD                 mov     [rsp+0E8h+var_E0], 5
.text:0000000000002FB5                 jmp     loc_2333
.text:0000000000002FBA ; ---------------------------------------------------------------------------
.text:0000000000002FBA
.text:0000000000002FBA loc_2FBA:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002FBA                                         ; DATA XREF: .rodata:jpt_22F1↓o
.text:0000000000002FBA                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 7
.text:0000000000002FBF                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002FC4                 xor     r12d, r12d
.text:0000000000002FC7                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002FD0                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000002FD5                 xor     r15d, r15d
.text:0000000000002FD8                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002FDD                 mov     [rsp+0E8h+n], 0
.text:0000000000002FE6                 mov     [rsp+0E8h+s2], 0
.text:0000000000002FEF                 jmp     loc_2333
.text:0000000000002FF4 ; ---------------------------------------------------------------------------
.text:0000000000002FF4
.text:0000000000002FF4 loc_2FF4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002FF4                                         ; DATA XREF: .rodata:jpt_22F1↓o
.text:0000000000002FF4                 cmp     [rsp+0E8h+var_E0], 0Ah ; jumptable 00000000000121F1 cases 8-10
.text:0000000000002FF9                 jz      short loc_3051
.text:0000000000002FFB                 lea     rsi, asc_536F   ; "`"
.text:0000000000003002                 xor     edi, edi        ; domainname
.text:0000000000003004                 mov     edx, 5          ; category
.text:0000000000003009                 call    _dcgettext
.text:000000000000300E                 mov     rcx, rax
.text:0000000000003011                 mov     [rsp+0E8h+var_80], rax
.text:0000000000003016                 lea     rax, asc_536F   ; "`"
.text:000000000000301D                 cmp     rcx, rax
.text:0000000000003020                 jz      loc_33BE
.text:0000000000003026
.text:0000000000003026 loc_3026:                               ; CODE XREF: quotearg_buffer_restyled+116F↓j
.text:0000000000003026                 lea     rsi, asc_536D   ; "'"
.text:000000000000302D                 xor     edi, edi        ; domainname
.text:000000000000302F                 mov     edx, 5          ; category
.text:0000000000003034                 call    _dcgettext
.text:0000000000003039                 mov     rcx, rax
.text:000000000000303C                 mov     [rsp+0E8h+var_88], rax
.text:0000000000003041                 lea     rax, asc_536D   ; "'"
.text:0000000000003048                 cmp     rcx, rax
.text:000000000000304B                 jz      loc_33D4
.text:0000000000003051
.text:0000000000003051 loc_3051:                               ; CODE XREF: quotearg_buffer_restyled+D99↑j
.text:0000000000003051                                         ; quotearg_buffer_restyled+1185↓j
.text:0000000000003051                 xor     r15d, r15d
.text:0000000000003054                 test    ebx, ebx
.text:0000000000003056                 jz      loc_321D
.text:000000000000305C
.text:000000000000305C loc_305C:                               ; CODE XREF: quotearg_buffer_restyled+FC7↓j
.text:000000000000305C                                         ; quotearg_buffer_restyled+FE6↓j
.text:000000000000305C                 test    ebx, ebx
.text:000000000000305E                 mov     rbx, [rsp+0E8h+var_88]
.text:0000000000003063                 setnz   [rsp+0E8h+var_D9]
.text:0000000000003068                 xor     r12d, r12d
.text:000000000000306B                 mov     rdi, rbx        ; s
.text:000000000000306E                 call    _strlen
.text:0000000000003073                 mov     [rsp+0E8h+s2], rbx
.text:0000000000003078                 mov     [rsp+0E8h+n], rax
.text:000000000000307D                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003082                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003087                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003090                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003095                 jmp     loc_2333
.text:000000000000309A ; ---------------------------------------------------------------------------
.text:000000000000309A
.text:000000000000309A loc_309A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000309A                                         ; DATA XREF: .rodata:jpt_22F1↓o
.text:000000000000309A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 0
.text:000000000000309F                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000030A4                 xor     r12d, r12d
.text:00000000000030A7                 mov     [rsp+0E8h+var_98], 0
.text:00000000000030B0                 mov     [rsp+0E8h+var_D9], 0
.text:00000000000030B5                 xor     r15d, r15d
.text:00000000000030B8                 mov     [rsp+0E8h+var_DB], 0
.text:00000000000030BD                 mov     [rsp+0E8h+n], 0
.text:00000000000030C6                 mov     [rsp+0E8h+s2], 0
.text:00000000000030CF                 jmp     loc_2333
.text:00000000000030D4 ; ---------------------------------------------------------------------------
.text:00000000000030D4
.text:00000000000030D4 loc_30D4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000030D4                                         ; DATA XREF: .rodata:jpt_22F1↓o
.text:00000000000030D4                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 3
.text:00000000000030D9                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000030DE                 xor     r12d, r12d
.text:00000000000030E1                 mov     [rsp+0E8h+var_98], 0
.text:00000000000030EA                 mov     [rsp+0E8h+var_D9], 1
.text:00000000000030EF                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000030F4                 jmp     loc_2313
.text:00000000000030F9 ; ---------------------------------------------------------------------------
.text:00000000000030F9
.text:00000000000030F9 loc_30F9:                               ; CODE XREF: quotearg_buffer_restyled+665↑j
.text:00000000000030F9                 cmp     r13, r15
.text:00000000000030FC                 jbe     short loc_3103
.text:00000000000030FE                 mov     byte ptr [r14+r15], 30h ; '0'
.text:0000000000003103
.text:0000000000003103 loc_3103:                               ; CODE XREF: quotearg_buffer_restyled+E9C↑j
.text:0000000000003103                 lea     rax, [rcx+2]
.text:0000000000003107                 cmp     r13, rax
.text:000000000000310A                 jbe     short loc_3112
.text:000000000000310C                 mov     byte ptr [r14+rcx+2], 30h ; '0'
.text:0000000000003112
.text:0000000000003112 loc_3112:                               ; CODE XREF: quotearg_buffer_restyled+EAA↑j
.text:0000000000003112                 mov     eax, r12d
.text:0000000000003115                 lea     r15, [rcx+3]
.text:0000000000003119                 xor     r12d, r12d
.text:000000000000311C                 mov     ebx, 30h ; '0'
.text:0000000000003121                 jmp     loc_2488
.text:0000000000003121 ; ---------------------------------------------------------------------------
.text:0000000000003126                 align 10h
.text:0000000000003130
.text:0000000000003130 loc_3130:                               ; CODE XREF: quotearg_buffer_restyled+A1B↑j
.text:0000000000003130                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000003135                 mov     rbp, r11
.text:0000000000003138                 mov     [rsp+0E8h+var_DB], bl
.text:000000000000313C                 jmp     loc_2DE9
.text:0000000000003141 ; ---------------------------------------------------------------------------
.text:0000000000003141
.text:0000000000003141 loc_3141:                               ; CODE XREF: quotearg_buffer_restyled+549↑j
.text:0000000000003141                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000003146                 xor     r12d, r12d
.text:0000000000003149                 jmp     loc_2C50
.text:000000000000314E ; ---------------------------------------------------------------------------
.text:000000000000314E
.text:000000000000314E loc_314E:                               ; CODE XREF: quotearg_buffer_restyled+AF0↑j
.text:000000000000314E                 xor     r10d, r10d
.text:0000000000003151                 jmp     loc_2D0D
.text:0000000000003156 ; ---------------------------------------------------------------------------
.text:0000000000003156
.text:0000000000003156 loc_3156:                               ; CODE XREF: quotearg_buffer_restyled+CCB↑j
.text:0000000000003156                 mov     [rsp+0E8h+var_98], 0
.text:000000000000315F                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003164                 xor     r12d, r12d
.text:0000000000003167                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000316C                 jmp     loc_2F4B
.text:0000000000003171 ; ---------------------------------------------------------------------------
.text:0000000000003171
.text:0000000000003171 loc_3171:                               ; CODE XREF: quotearg_buffer_restyled+971↑j
.text:0000000000003171                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000003176                 mov     rsi, r14
.text:0000000000003179                 mov     rcx, r13
.text:000000000000317C                 mov     rax, rbx
.text:000000000000317F                 mov     rdi, rbx
.text:0000000000003182                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000003188                 movzx   ebx, [rsp+0E8h+var_6A]
.text:000000000000318D                 mov     r9, [rsp+0E8h+var_60]
.text:0000000000003195                 cmp     rsi, r11
.text:0000000000003198                 movzx   r10d, [rsp+0E8h+var_69]
.text:000000000000319E                 mov     r15, [rsp+0E8h+var_68]
.text:00000000000031A6                 mov     r14, [rsp+0E8h+var_A8]
.text:00000000000031AB                 mov     r13, [rsp+0E8h+var_78]
.text:00000000000031B0                 jnb     short loc_31D8
.text:00000000000031B2                 cmp     byte ptr [rcx], 0
.text:00000000000031B5                 jnz     short loc_31C7
.text:00000000000031B7                 jmp     short loc_31D8
.text:00000000000031B7 ; ---------------------------------------------------------------------------
.text:00000000000031B9                 align 20h
.text:00000000000031C0
.text:00000000000031C0 loc_31C0:                               ; CODE XREF: quotearg_buffer_restyled+F73↓j
.text:00000000000031C0                 cmp     byte ptr [r9+rax], 0
.text:00000000000031C5                 jz      short loc_31D5
.text:00000000000031C7
.text:00000000000031C7 loc_31C7:                               ; CODE XREF: quotearg_buffer_restyled+F55↑j
.text:00000000000031C7                 add     rax, 1
.text:00000000000031CB                 lea     rdx, [rbp+rax+0]
.text:00000000000031D0                 cmp     r11, rdx
.text:00000000000031D3                 ja      short loc_31C0
.text:00000000000031D5
.text:00000000000031D5 loc_31D5:                               ; CODE XREF: quotearg_buffer_restyled+F65↑j
.text:00000000000031D5                 mov     rdi, rax
.text:00000000000031D8
.text:00000000000031D8 loc_31D8:                               ; CODE XREF: quotearg_buffer_restyled+F50↑j
.text:00000000000031D8                                         ; quotearg_buffer_restyled+F57↑j
.text:00000000000031D8                 movzx   edx, [rsp+0E8h+var_DB]
.text:00000000000031DD                 xor     r12d, r12d
.text:00000000000031E0                 jmp     loc_2C46
.text:00000000000031E5 ; ---------------------------------------------------------------------------
.text:00000000000031E5
.text:00000000000031E5 loc_31E5:                               ; CODE XREF: quotearg_buffer_restyled+967↑j
.text:00000000000031E5                 mov     rdi, rbx
.text:00000000000031E8                 movzx   r8d, [rsp+0E8h+var_6B]
.text:00000000000031EE                 movzx   ebx, [rsp+0E8h+var_6A]
.text:00000000000031F3                 movzx   r10d, [rsp+0E8h+var_69]
.text:00000000000031F9                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000003201                 xor     r12d, r12d
.text:0000000000003204                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000003209                 mov     r13, [rsp+0E8h+var_78]
.text:000000000000320E                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000003213                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000003218                 jmp     loc_2C46
.text:000000000000321D ; ---------------------------------------------------------------------------
.text:000000000000321D
.text:000000000000321D loc_321D:                               ; CODE XREF: quotearg_buffer_restyled+DF6↑j
.text:000000000000321D                 mov     rdx, [rsp+0E8h+var_80]
.text:0000000000003222                 movzx   eax, byte ptr [rdx]
.text:0000000000003225                 test    al, al
.text:0000000000003227                 jz      loc_305C
.text:000000000000322D                 nop     dword ptr [rax]
.text:0000000000003230
.text:0000000000003230 loc_3230:                               ; CODE XREF: quotearg_buffer_restyled+FE4↓j
.text:0000000000003230                 cmp     r13, r15
.text:0000000000003233                 jbe     short loc_3239
.text:0000000000003235                 mov     [r14+r15], al
.text:0000000000003239
.text:0000000000003239 loc_3239:                               ; CODE XREF: quotearg_buffer_restyled+FD3↑j
.text:0000000000003239                 add     r15, 1
.text:000000000000323D                 movzx   eax, byte ptr [rdx+r15]
.text:0000000000003242                 test    al, al
.text:0000000000003244                 jnz     short loc_3230
.text:0000000000003246                 jmp     loc_305C
.text:000000000000324B ; ---------------------------------------------------------------------------
.text:000000000000324B
.text:000000000000324B loc_324B:                               ; CODE XREF: quotearg_buffer_restyled+9EA↑j
.text:000000000000324B                 mov     eax, edx
.text:000000000000324D                 jmp     loc_27A7
.text:0000000000003252 ; ---------------------------------------------------------------------------
.text:0000000000003252
.text:0000000000003252 loc_3252:                               ; CODE XREF: quotearg_buffer_restyled+862↑j
.text:0000000000003252                 movzx   ebx, byte ptr [rax+rcx]
.text:0000000000003256                 cmp     bl, 3Eh ; '>'
.text:0000000000003259                 ja      loc_2AD0
.text:000000000000325F                 mov     rax, 7000A38200000000h
.text:0000000000003269                 bt      rax, rbx
.text:000000000000326D                 jnb     loc_2AD0
.text:0000000000003273                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003278                 jnz     loc_3462
.text:000000000000327E                 cmp     r13, r15
.text:0000000000003281                 jbe     short loc_3288
.text:0000000000003283                 mov     byte ptr [r14+r15], 3Fh ; '?'
.text:0000000000003288
.text:0000000000003288 loc_3288:                               ; CODE XREF: quotearg_buffer_restyled+1021↑j
.text:0000000000003288                 lea     rax, [r15+1]
.text:000000000000328C                 cmp     r13, rax
.text:000000000000328F                 jbe     short loc_3297
.text:0000000000003291                 mov     byte ptr [r14+r15+1], 22h ; '"'
.text:0000000000003297
.text:0000000000003297 loc_3297:                               ; CODE XREF: quotearg_buffer_restyled+102F↑j
.text:0000000000003297                 lea     rax, [r15+2]
.text:000000000000329B                 cmp     r13, rax
.text:000000000000329E                 jbe     short loc_32A6
.text:00000000000032A0                 mov     byte ptr [r14+r15+2], 22h ; '"'
.text:00000000000032A6
.text:00000000000032A6 loc_32A6:                               ; CODE XREF: quotearg_buffer_restyled+103E↑j
.text:00000000000032A6                 lea     rax, [r15+3]
.text:00000000000032AA                 cmp     r13, rax
.text:00000000000032AD                 jbe     short loc_32B5
.text:00000000000032AF                 mov     byte ptr [r14+r15+3], 3Fh ; '?'
.text:00000000000032B5
.text:00000000000032B5 loc_32B5:                               ; CODE XREF: quotearg_buffer_restyled+104D↑j
.text:00000000000032B5                 add     r15, 4
.text:00000000000032B9                 xor     edx, edx
.text:00000000000032BB                 xor     r12d, r12d
.text:00000000000032BE                 xor     eax, eax
.text:00000000000032C0                 mov     rbp, rcx
.text:00000000000032C3                 jmp     loc_2488
.text:00000000000032C8 ; ---------------------------------------------------------------------------
.text:00000000000032C8
.text:00000000000032C8 loc_32C8:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000032C8                                         ; DATA XREF: .rodata:jpt_22F1↓o
.text:00000000000032C8                 test    ebx, ebx        ; jumptable 00000000000121F1 case 2
.text:00000000000032CA                 jz      loc_3458
.text:00000000000032D0                 lea     rax, asc_536D   ; "'"
.text:00000000000032D7                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000032DC                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000032E1                 xor     r12d, r12d
.text:00000000000032E4                 mov     [rsp+0E8h+var_98], 0
.text:00000000000032ED                 mov     [rsp+0E8h+var_D9], 1
.text:00000000000032F2                 mov     [rsp+0E8h+var_DB], 0
.text:00000000000032F7                 mov     [rsp+0E8h+n], 1
.text:0000000000003300                 xor     r15d, r15d
.text:0000000000003303                 mov     [rsp+0E8h+s2], rax
.text:0000000000003308                 jmp     loc_2333
.text:0000000000003308 ; ---------------------------------------------------------------------------
.text:000000000000330D                 align 10h
.text:0000000000003310
.text:0000000000003310 loc_3310:                               ; CODE XREF: quotearg_buffer_restyled+745↑j
.text:0000000000003310                                         ; quotearg_buffer_restyled+805↑j ...
.text:0000000000003310                 mov     rbp, r11
.text:0000000000003313                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000003318                 jmp     loc_2DE9
.text:000000000000331D ; ---------------------------------------------------------------------------
.text:000000000000331D
.text:000000000000331D loc_331D:                               ; CODE XREF: quotearg_buffer_restyled+CC2↑j
.text:000000000000331D                 lea     rax, unk_536B
.text:0000000000003324                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003329                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000332E                 xor     r12d, r12d
.text:0000000000003331                 mov     [rsp+0E8h+var_98], 0
.text:000000000000333A                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000333F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003344                 mov     [rsp+0E8h+n], 1
.text:000000000000334D                 xor     r15d, r15d
.text:0000000000003350                 mov     [rsp+0E8h+s2], rax
.text:0000000000003355                 jmp     loc_2333
.text:000000000000335A ; ---------------------------------------------------------------------------
.text:000000000000335A
.text:000000000000335A loc_335A:                               ; CODE XREF: quotearg_buffer_restyled+797↑j
.text:000000000000335A                 mov     eax, edx
.text:000000000000335C
.text:000000000000335C loc_335C:                               ; CODE XREF: quotearg_buffer_restyled+78C↑j
.text:000000000000335C                                         ; quotearg_buffer_restyled+11E1↓j
.text:000000000000335C                 mov     rbx, [rsp+0E8h+s2]
.text:0000000000003361                 test    rbx, rbx
.text:0000000000003364                 jz      short loc_3392
.text:0000000000003366                 test    al, al
.text:0000000000003368                 jz      short loc_3392
.text:000000000000336A                 movzx   ecx, byte ptr [rbx]
.text:000000000000336D                 mov     rax, rbx
.text:0000000000003370                 test    cl, cl
.text:0000000000003372                 jz      short loc_3392
.text:0000000000003374                 mov     rdx, r15
.text:0000000000003377                 sub     rax, r15
.text:000000000000337A
.text:000000000000337A loc_337A:                               ; CODE XREF: quotearg_buffer_restyled+112D↓j
.text:000000000000337A                 cmp     r13, rdx
.text:000000000000337D                 jbe     short loc_3383
.text:000000000000337F                 mov     [r14+rdx], cl
.text:0000000000003383
.text:0000000000003383 loc_3383:                               ; CODE XREF: quotearg_buffer_restyled+111D↑j
.text:0000000000003383                 add     rdx, 1
.text:0000000000003387                 movzx   ecx, byte ptr [rax+rdx]
.text:000000000000338B                 test    cl, cl
.text:000000000000338D                 jnz     short loc_337A
.text:000000000000338F                 mov     r15, rdx
.text:0000000000003392
.text:0000000000003392 loc_3392:                               ; CODE XREF: quotearg_buffer_restyled+1104↑j
.text:0000000000003392                                         ; quotearg_buffer_restyled+1108↑j ...
.text:0000000000003392                 cmp     r13, r15
.text:0000000000003395                 jbe     loc_2E39
.text:000000000000339B                 mov     byte ptr [r14+r15], 0
.text:00000000000033A0                 jmp     loc_2E39
.text:00000000000033A5 ; ---------------------------------------------------------------------------
.text:00000000000033A5
.text:00000000000033A5 loc_33A5:                               ; CODE XREF: quotearg_buffer_restyled+1C2↑j
.text:00000000000033A5                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000033AA                 movzx   ebx, [rsp+0E8h+var_D9]
.text:00000000000033AF                 mov     rbp, r11
.text:00000000000033B2                 setz    al
.text:00000000000033B5                 mov     [rsp+0E8h+var_DB], bl
.text:00000000000033B9                 jmp     loc_2DE9
.text:00000000000033BE ; ---------------------------------------------------------------------------
.text:00000000000033BE
.text:00000000000033BE loc_33BE:                               ; CODE XREF: quotearg_buffer_restyled+DC0↑j
.text:00000000000033BE                 mov     esi, [rsp+0E8h+var_E0]
.text:00000000000033C2                 mov     rdi, rcx
.text:00000000000033C5                 call    gettext_quote
.text:00000000000033CA                 mov     [rsp+0E8h+var_80], rax
.text:00000000000033CF                 jmp     loc_3026
.text:00000000000033D4 ; ---------------------------------------------------------------------------
.text:00000000000033D4
.text:00000000000033D4 loc_33D4:                               ; CODE XREF: quotearg_buffer_restyled+DEB↑j
.text:00000000000033D4                 mov     esi, [rsp+0E8h+var_E0]
.text:00000000000033D8                 mov     rdi, rcx
.text:00000000000033DB                 call    gettext_quote
.text:00000000000033E0                 mov     [rsp+0E8h+var_88], rax
.text:00000000000033E5                 jmp     loc_3051
.text:00000000000033EA ; ---------------------------------------------------------------------------
.text:00000000000033EA
.text:00000000000033EA loc_33EA:                               ; CODE XREF: quotearg_buffer_restyled+5F0↑j
.text:00000000000033EA                 movzx   ebx, [rsp+0E8h+var_D9]
.text:00000000000033EF                 mov     rbp, r11
.text:00000000000033F2                 mov     eax, edx
.text:00000000000033F4                 mov     [rsp+0E8h+var_DB], bl
.text:00000000000033F8                 jmp     loc_2DE9
.text:00000000000033FD ; ---------------------------------------------------------------------------
.text:00000000000033FD
.text:00000000000033FD loc_33FD:                               ; CODE XREF: quotearg_buffer_restyled+7A2↑j
.text:00000000000033FD                 sub     rsp, 8
.text:0000000000003401                 mov     r8d, 5
.text:0000000000003407                 mov     rcx, r11
.text:000000000000340A                 push    [rsp+0F0h+var_88]
.text:000000000000340E                 push    [rsp+0F8h+var_80]
.text:0000000000003412                 mov     rdi, r14
.text:0000000000003415                 push    [rsp+100h+var_C8]
.text:0000000000003419                 mov     r9d, [rsp+108h+var_70]
.text:0000000000003421                 mov     rdx, [rsp+108h+s]
.text:0000000000003426                 mov     rsi, [rsp+108h+var_98]
.text:000000000000342B                 call    quotearg_buffer_restyled
.text:0000000000003430                 add     rsp, 20h
.text:0000000000003434                 mov     r15, rax
.text:0000000000003437                 jmp     loc_2E39
.text:000000000000343C ; ---------------------------------------------------------------------------
.text:000000000000343C
.text:000000000000343C loc_343C:                               ; CODE XREF: quotearg_buffer_restyled+7B9↑j
.text:000000000000343C                 movzx   eax, [rsp+0E8h+var_6C]
.text:0000000000003441                 jmp     loc_335C
.text:0000000000003446 ; ---------------------------------------------------------------------------
.text:0000000000003446
.text:0000000000003446 loc_3446:                               ; CODE XREF: quotearg_buffer_restyled+77F↑j
.text:0000000000003446                 mov     [rsp+0E8h+var_E0], 2
.text:000000000000344E                 jmp     loc_2DE9
.text:0000000000003453 ; ---------------------------------------------------------------------------
.text:0000000000003453
.text:0000000000003453 loc_3453:                               ; CODE XREF: quotearg_buffer_restyled+BED↑j
.text:0000000000003453                 call    ___stack_chk_fail
.text:0000000000003458 ; ---------------------------------------------------------------------------
.text:0000000000003458
.text:0000000000003458 loc_3458:                               ; CODE XREF: quotearg_buffer_restyled+106A↑j
.text:0000000000003458                 mov     [rsp+0E8h+var_DB], 0
.text:000000000000345D                 jmp     loc_2ED1
.text:0000000000003462 ; ---------------------------------------------------------------------------
.text:0000000000003462
.text:0000000000003462 loc_3462:                               ; CODE XREF: quotearg_buffer_restyled+1018↑j
.text:0000000000003462                 mov     rbp, r11
.text:0000000000003465                 jmp     loc_2E00
.text:000000000000346A ; ---------------------------------------------------------------------------
.text:000000000000346A
.text:000000000000346A loc_346A:                               ; CODE XREF: quotearg_buffer_restyled+C74↑j
.text:000000000000346A                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000346F                 xor     eax, eax
.text:0000000000003471                 xor     r12d, r12d
.text:0000000000003474                 mov     [rsp+0E8h+var_98], 0
.text:000000000000347D                 jmp     loc_2A24
.text:0000000000003482 ; ---------------------------------------------------------------------------
.text:0000000000003482
.text:0000000000003482 loc_3482:                               ; CODE XREF: quotearg_buffer_restyled+C30↑j
.text:0000000000003482                 mov     rdx, r13
.text:0000000000003485                 mov     r13, [rsp+0E8h+var_98]
.text:000000000000348A                 jmp     loc_2A82
.text:000000000000348F ; ---------------------------------------------------------------------------
.text:000000000000348F
.text:000000000000348F def_22F1:                               ; CODE XREF: quotearg_buffer_restyled+7A↑j
.text:000000000000348F                 call    _abort          ; jumptable 00000000000121F1 default case
.text:000000000000348F ; } // starts at 2260
.text:000000000000348F quotearg_buffer_restyled endp
.text:000000000000348F
.text:000000000000348F ; ---------------------------------------------------------------------------
.text:0000000000003494                 align 20h
.text:00000000000034A0
.text:00000000000034A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000034A0
.text:00000000000034A0
.text:00000000000034A0 quotearg_n_options proc near            ; CODE XREF: quotearg_n+E↓j
.text:00000000000034A0                                         ; quotearg_n_mem+7↓j ...
.text:00000000000034A0
.text:00000000000034A0 var_50          = qword ptr -50h
.text:00000000000034A0 var_48          = qword ptr -48h
.text:00000000000034A0 var_40          = dword ptr -40h
.text:00000000000034A0 var_3C          = dword ptr -3Ch
.text:00000000000034A0
.text:00000000000034A0 ; __unwind {
.text:00000000000034A0                 push    r15
.text:00000000000034A2                 push    r14
.text:00000000000034A4                 movsxd  r15, edi
.text:00000000000034A7                 push    r13
.text:00000000000034A9                 push    r12
.text:00000000000034AB                 mov     r14, rdx
.text:00000000000034AE                 push    rbp
.text:00000000000034AF                 push    rbx
.text:00000000000034B0                 mov     rbp, rcx
.text:00000000000034B3                 sub     rsp, 28h
.text:00000000000034B7                 mov     [rsp+58h+var_50], rsi
.text:00000000000034BC                 call    ___errno_location
.text:00000000000034C1                 mov     r13, rax
.text:00000000000034C4                 mov     eax, [rax]
.text:00000000000034C6                 test    r15d, r15d
.text:00000000000034C9                 mov     rbx, cs:slotvec
.text:00000000000034D0                 mov     [rsp+58h+var_40], eax
.text:00000000000034D4                 js      loc_3641
.text:00000000000034DA                 cmp     cs:nslots, r15d
.text:00000000000034E1                 jg      short loc_3545
.text:00000000000034E3                 cmp     r15d, 7FFFFFFFh
.text:00000000000034EA                 jz      loc_3646
.text:00000000000034F0                 lea     r12d, [r15+1]
.text:00000000000034F4                 lea     rax, slotvec0
.text:00000000000034FB                 movsxd  rsi, r12d
.text:00000000000034FE                 shl     rsi, 4
.text:0000000000003502                 cmp     rbx, rax
.text:0000000000003505                 jz      loc_3620
.text:000000000000350B                 mov     rdi, rbx
.text:000000000000350E                 call    xrealloc
.text:0000000000003513                 mov     rbx, rax
.text:0000000000003516                 mov     cs:slotvec, rax
.text:000000000000351D
.text:000000000000351D loc_351D:                               ; CODE XREF: quotearg_n_options+19C↓j
.text:000000000000351D                 movsxd  rdi, cs:nslots
.text:0000000000003524                 mov     edx, r12d
.text:0000000000003527                 xor     esi, esi        ; c
.text:0000000000003529                 sub     edx, edi
.text:000000000000352B                 shl     rdi, 4
.text:000000000000352F                 movsxd  rdx, edx
.text:0000000000003532                 add     rdi, rbx        ; s
.text:0000000000003535                 shl     rdx, 4          ; n
.text:0000000000003539                 call    _memset
.text:000000000000353E                 mov     cs:nslots, r12d
.text:0000000000003545
.text:0000000000003545 loc_3545:                               ; CODE XREF: quotearg_n_options+41↑j
.text:0000000000003545                 mov     eax, [rbp+4]
.text:0000000000003548                 shl     r15, 4
.text:000000000000354C                 sub     rsp, 8
.text:0000000000003550                 add     rbx, r15
.text:0000000000003553                 lea     r15, [rbp+8]
.text:0000000000003557                 mov     r8d, [rbp+0]
.text:000000000000355B                 mov     r11, [rbx]
.text:000000000000355E                 mov     r12, [rbx+8]
.text:0000000000003562                 mov     rcx, r14
.text:0000000000003565                 or      eax, 1
.text:0000000000003568                 mov     [rsp+60h+var_3C], eax
.text:000000000000356C                 push    qword ptr [rbp+30h]
.text:000000000000356F                 mov     r9d, eax
.text:0000000000003572                 push    qword ptr [rbp+28h]
.text:0000000000003575                 push    r15
.text:0000000000003577                 mov     rsi, r11
.text:000000000000357A                 mov     rdx, [rsp+78h+var_50]
.text:000000000000357F                 mov     rdi, r12
.text:0000000000003582                 mov     [rsp+78h+var_48], r11
.text:0000000000003587                 call    quotearg_buffer_restyled
.text:000000000000358C                 add     rsp, 20h
.text:0000000000003590                 mov     r11, [rsp+58h+var_48]
.text:0000000000003595                 cmp     r11, rax
.text:0000000000003598                 ja      short loc_3601
.text:000000000000359A                 lea     rsi, [rax+1]
.text:000000000000359E                 lea     rax, slot0
.text:00000000000035A5                 cmp     r12, rax
.text:00000000000035A8                 mov     [rbx], rsi
.text:00000000000035AB                 jz      short loc_35BF
.text:00000000000035AD                 mov     rdi, r12        ; ptr
.text:00000000000035B0                 mov     [rsp+58h+var_48], rsi
.text:00000000000035B5                 call    _free
.text:00000000000035BA                 mov     rsi, [rsp+58h+var_48]
.text:00000000000035BF
.text:00000000000035BF loc_35BF:                               ; CODE XREF: quotearg_n_options+10B↑j
.text:00000000000035BF                 mov     rdi, rsi
.text:00000000000035C2                 mov     [rsp+58h+var_48], rsi
.text:00000000000035C7                 call    xmalloc
.text:00000000000035CC                 sub     rsp, 8
.text:00000000000035D0                 mov     [rbx+8], rax
.text:00000000000035D4                 mov     r8d, [rbp+0]
.text:00000000000035D8                 push    qword ptr [rbp+30h]
.text:00000000000035DB                 push    qword ptr [rbp+28h]
.text:00000000000035DE                 mov     rcx, r14
.text:00000000000035E1                 push    r15
.text:00000000000035E3                 mov     r9d, [rsp+78h+var_3C]
.text:00000000000035E8                 mov     rdi, rax
.text:00000000000035EB                 mov     rdx, [rsp+78h+var_50]
.text:00000000000035F0                 mov     rsi, [rsp+78h+var_48]
.text:00000000000035F5                 mov     r12, rax
.text:00000000000035F8                 call    quotearg_buffer_restyled
.text:00000000000035FD                 add     rsp, 20h
.text:0000000000003601
.text:0000000000003601 loc_3601:                               ; CODE XREF: quotearg_n_options+F8↑j
.text:0000000000003601                 mov     eax, [rsp+58h+var_40]
.text:0000000000003605                 mov     [r13+0], eax
.text:0000000000003609                 add     rsp, 28h
.text:000000000000360D                 mov     rax, r12
.text:0000000000003610                 pop     rbx
.text:0000000000003611                 pop     rbp
.text:0000000000003612                 pop     r12
.text:0000000000003614                 pop     r13
.text:0000000000003616                 pop     r14
.text:0000000000003618                 pop     r15
.text:000000000000361A                 retn
.text:000000000000361A ; ---------------------------------------------------------------------------
.text:000000000000361B                 align 20h
.text:0000000000003620
.text:0000000000003620 loc_3620:                               ; CODE XREF: quotearg_n_options+65↑j
.text:0000000000003620                 xor     edi, edi
.text:0000000000003622                 call    xrealloc
.text:0000000000003627                 movdqa  xmm0, xmmword ptr cs:slotvec0
.text:000000000000362F                 mov     rbx, rax
.text:0000000000003632                 mov     cs:slotvec, rax
.text:0000000000003639                 movups  xmmword ptr [rax], xmm0
.text:000000000000363C                 jmp     loc_351D
.text:0000000000003641 ; ---------------------------------------------------------------------------
.text:0000000000003641
.text:0000000000003641 loc_3641:                               ; CODE XREF: quotearg_n_options+34↑j
.text:0000000000003641                 call    _abort
.text:0000000000003646 ; ---------------------------------------------------------------------------
.text:0000000000003646
.text:0000000000003646 loc_3646:                               ; CODE XREF: quotearg_n_options+4A↑j
.text:0000000000003646                 call    xalloc_die
.text:0000000000003646 ; } // starts at 34A0
.text:0000000000003646 quotearg_n_options endp
.text:0000000000003646
.text:0000000000003646 ; ---------------------------------------------------------------------------
.text:000000000000364B                 align 10h
.text:0000000000003650
.text:0000000000003650 ; =============== S U B R O U T I N E =======================================
.text:0000000000003650
.text:0000000000003650 ; Attributes: info_from_lumina
.text:0000000000003650
.text:0000000000003650 ; quoting_options *__fastcall clone_quoting_options(quoting_options *o)
.text:0000000000003650                 public clone_quoting_options
.text:0000000000003650 clone_quoting_options proc near
.text:0000000000003650 ; __unwind {
.text:0000000000003650                 push    r12
.text:0000000000003652                 push    rbp
.text:0000000000003653                 push    rbx
.text:0000000000003654                 mov     rbx, rdi
.text:0000000000003657                 call    ___errno_location
.text:000000000000365C                 mov     r12d, [rax]
.text:000000000000365F                 mov     rbp, rax
.text:0000000000003662                 lea     rax, default_quoting_options
.text:0000000000003669                 test    rbx, rbx
.text:000000000000366C                 mov     esi, 38h ; '8'  ; n
.text:0000000000003671                 cmovz   rbx, rax
.text:0000000000003675                 mov     rdi, rbx        ; src
.text:0000000000003678                 call    xmemdup
.text:000000000000367D                 mov     [rbp+0], r12d
.text:0000000000003681                 pop     rbx
.text:0000000000003682                 pop     rbp
.text:0000000000003683                 pop     r12
.text:0000000000003685                 retn
.text:0000000000003685 ; } // starts at 3650
.text:0000000000003685 clone_quoting_options endp
.text:0000000000003685
.text:0000000000003685 ; ---------------------------------------------------------------------------
.text:0000000000003686                 align 10h
.text:0000000000003690
.text:0000000000003690 ; =============== S U B R O U T I N E =======================================
.text:0000000000003690
.text:0000000000003690
.text:0000000000003690                 public get_quoting_style
.text:0000000000003690 get_quoting_style proc near
.text:0000000000003690 ; __unwind {
.text:0000000000003690                 lea     rax, default_quoting_options
.text:0000000000003697                 test    rdi, rdi
.text:000000000000369A                 cmovz   rdi, rax
.text:000000000000369E                 mov     eax, [rdi]
.text:00000000000036A0                 retn
.text:00000000000036A0 ; } // starts at 3690
.text:00000000000036A0 get_quoting_style endp
.text:00000000000036A0
.text:00000000000036A0 ; ---------------------------------------------------------------------------
.text:00000000000036A1                 align 10h
.text:00000000000036B0
.text:00000000000036B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000036B0
.text:00000000000036B0
.text:00000000000036B0                 public set_quoting_style
.text:00000000000036B0 set_quoting_style proc near
.text:00000000000036B0 ; __unwind {
.text:00000000000036B0                 lea     rax, default_quoting_options
.text:00000000000036B7                 test    rdi, rdi
.text:00000000000036BA                 cmovz   rdi, rax
.text:00000000000036BE                 mov     [rdi], esi
.text:00000000000036C0                 retn
.text:00000000000036C0 ; } // starts at 36B0
.text:00000000000036C0 set_quoting_style endp
.text:00000000000036C0
.text:00000000000036C0 ; ---------------------------------------------------------------------------
.text:00000000000036C1                 align 10h
.text:00000000000036D0
.text:00000000000036D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000036D0
.text:00000000000036D0 ; Attributes: info_from_lumina
.text:00000000000036D0
.text:00000000000036D0 ; int __fastcall set_char_quoting(quoting_options *o, char c, int i)
.text:00000000000036D0                 public set_char_quoting
.text:00000000000036D0 set_char_quoting proc near
.text:00000000000036D0 ; __unwind {
.text:00000000000036D0                 lea     rax, default_quoting_options
.text:00000000000036D7                 test    rdi, rdi
.text:00000000000036DA                 mov     ecx, esi
.text:00000000000036DC                 cmovz   rdi, rax
.text:00000000000036E0                 mov     eax, esi
.text:00000000000036E2                 and     ecx, 1Fh
.text:00000000000036E5                 shr     al, 5
.text:00000000000036E8                 movzx   eax, al
.text:00000000000036EB                 lea     rdi, [rdi+rax*4+8]
.text:00000000000036F0                 mov     esi, [rdi]
.text:00000000000036F2                 mov     eax, esi
.text:00000000000036F4                 shr     eax, cl
.text:00000000000036F6                 xor     edx, eax
.text:00000000000036F8                 and     eax, 1
.text:00000000000036FB                 and     edx, 1
.text:00000000000036FE                 shl     edx, cl
.text:0000000000003700                 xor     edx, esi
.text:0000000000003702                 mov     [rdi], edx
.text:0000000000003704                 retn
.text:0000000000003704 ; } // starts at 36D0
.text:0000000000003704 set_char_quoting endp
.text:0000000000003704
.text:0000000000003704 ; ---------------------------------------------------------------------------
.text:0000000000003705                 align 10h
.text:0000000000003710
.text:0000000000003710 ; =============== S U B R O U T I N E =======================================
.text:0000000000003710
.text:0000000000003710
.text:0000000000003710                 public set_quoting_flags
.text:0000000000003710 set_quoting_flags proc near
.text:0000000000003710 ; __unwind {
.text:0000000000003710                 lea     rax, default_quoting_options
.text:0000000000003717                 test    rdi, rdi
.text:000000000000371A                 cmovz   rdi, rax
.text:000000000000371E                 mov     eax, [rdi+4]
.text:0000000000003721                 mov     [rdi+4], esi
.text:0000000000003724                 retn
.text:0000000000003724 ; } // starts at 3710
.text:0000000000003724 set_quoting_flags endp
.text:0000000000003724
.text:0000000000003724 ; ---------------------------------------------------------------------------
.text:0000000000003725                 align 10h
.text:0000000000003730
.text:0000000000003730 ; =============== S U B R O U T I N E =======================================
.text:0000000000003730
.text:0000000000003730 ; Attributes: info_from_lumina
.text:0000000000003730
.text:0000000000003730 ; void __fastcall set_custom_quoting(quoting_options *o, const char *left_quote, const char *right_quote)
.text:0000000000003730                 public set_custom_quoting
.text:0000000000003730 set_custom_quoting proc near
.text:0000000000003730 ; __unwind {
.text:0000000000003730                 lea     rax, default_quoting_options
.text:0000000000003737                 test    rdi, rdi
.text:000000000000373A                 cmovz   rdi, rax
.text:000000000000373E                 test    rsi, rsi
.text:0000000000003741                 mov     dword ptr [rdi], 0Ah
.text:0000000000003747                 jz      short loc_3757
.text:0000000000003749                 test    rdx, rdx
.text:000000000000374C                 jz      short loc_3757
.text:000000000000374E                 mov     [rdi+28h], rsi
.text:0000000000003752                 mov     [rdi+30h], rdx
.text:0000000000003756                 retn
.text:0000000000003757 ; ---------------------------------------------------------------------------
.text:0000000000003757
.text:0000000000003757 loc_3757:                               ; CODE XREF: set_custom_quoting+17↑j
.text:0000000000003757                                         ; set_custom_quoting+1C↑j
.text:0000000000003757                 sub     rsp, 8
.text:000000000000375B                 call    _abort
.text:000000000000375B ; } // starts at 3730
.text:000000000000375B set_custom_quoting endp
.text:000000000000375B
.text:0000000000003760
.text:0000000000003760 ; =============== S U B R O U T I N E =======================================
.text:0000000000003760
.text:0000000000003760 ; Attributes: info_from_lumina
.text:0000000000003760
.text:0000000000003760 ; size_t __fastcall quotearg_buffer(char *buffer, size_t buffersize, const char *arg, size_t argsize, const quoting_options *o)
.text:0000000000003760                 public quotearg_buffer
.text:0000000000003760 quotearg_buffer proc near
.text:0000000000003760
.text:0000000000003760 var_40          = qword ptr -40h
.text:0000000000003760
.text:0000000000003760 ; __unwind {
.text:0000000000003760                 push    r15
.text:0000000000003762                 push    r14
.text:0000000000003764                 lea     rax, default_quoting_options
.text:000000000000376B                 push    r13
.text:000000000000376D                 push    r12
.text:000000000000376F                 mov     r13, rdi
.text:0000000000003772                 push    rbp
.text:0000000000003773                 push    rbx
.text:0000000000003774                 mov     rbx, r8
.text:0000000000003777                 mov     r14, rsi
.text:000000000000377A                 mov     r15, rdx
.text:000000000000377D                 sub     rsp, 18h
.text:0000000000003781                 test    r8, r8
.text:0000000000003784                 cmovz   rbx, rax
.text:0000000000003788                 mov     [rsp+48h+var_40], rcx
.text:000000000000378D                 call    ___errno_location
.text:0000000000003792                 mov     r12d, [rax]
.text:0000000000003795                 mov     rbp, rax
.text:0000000000003798                 lea     rax, [rbx+8]
.text:000000000000379C                 sub     rsp, 8
.text:00000000000037A0                 mov     r9d, [rbx+4]
.text:00000000000037A4                 push    qword ptr [rbx+30h]
.text:00000000000037A7                 mov     r8d, [rbx]
.text:00000000000037AA                 push    qword ptr [rbx+28h]
.text:00000000000037AD                 mov     rdx, r15
.text:00000000000037B0                 push    rax
.text:00000000000037B1                 mov     rcx, [rsp+68h+var_40]
.text:00000000000037B6                 mov     rsi, r14
.text:00000000000037B9                 mov     rdi, r13
.text:00000000000037BC                 call    quotearg_buffer_restyled
.text:00000000000037C1                 mov     [rbp+0], r12d
.text:00000000000037C5                 add     rsp, 38h
.text:00000000000037C9                 pop     rbx
.text:00000000000037CA                 pop     rbp
.text:00000000000037CB                 pop     r12
.text:00000000000037CD                 pop     r13
.text:00000000000037CF                 pop     r14
.text:00000000000037D1                 pop     r15
.text:00000000000037D3                 retn
.text:00000000000037D3 ; } // starts at 3760
.text:00000000000037D3 quotearg_buffer endp
.text:00000000000037D3
.text:00000000000037D3 ; ---------------------------------------------------------------------------
.text:00000000000037D4                 align 20h
.text:00000000000037E0
.text:00000000000037E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000037E0
.text:00000000000037E0 ; Attributes: info_from_lumina
.text:00000000000037E0
.text:00000000000037E0 ; char *__fastcall quotearg_alloc_mem(const char *arg, size_t argsize, size_t *size, const quoting_options *o)
.text:00000000000037E0                 public quotearg_alloc_mem
.text:00000000000037E0 quotearg_alloc_mem proc near            ; CODE XREF: quotearg_alloc+5↓j
.text:00000000000037E0
.text:00000000000037E0 var_5C          = dword ptr -5Ch
.text:00000000000037E0 var_58          = qword ptr -58h
.text:00000000000037E0 var_50          = qword ptr -50h
.text:00000000000037E0 var_48          = qword ptr -48h
.text:00000000000037E0 var_40          = qword ptr -40h
.text:00000000000037E0
.text:00000000000037E0 ; __unwind {
.text:00000000000037E0                 push    r15
.text:00000000000037E2                 push    r14
.text:00000000000037E4                 lea     rax, default_quoting_options
.text:00000000000037EB                 push    r13
.text:00000000000037ED                 push    r12
.text:00000000000037EF                 mov     r12, rdx
.text:00000000000037F2                 push    rbp
.text:00000000000037F3                 push    rbx
.text:00000000000037F4                 mov     rbx, rcx
.text:00000000000037F7                 mov     r14, rdi
.text:00000000000037FA                 mov     r15, rsi
.text:00000000000037FD                 sub     rsp, 38h
.text:0000000000003801                 test    rcx, rcx
.text:0000000000003804                 cmovz   rbx, rax
.text:0000000000003808                 xor     ebp, ebp
.text:000000000000380A                 call    ___errno_location
.text:000000000000380F                 test    r12, r12
.text:0000000000003812                 mov     r13, rax
.text:0000000000003815                 mov     eax, [rax]
.text:0000000000003817                 setz    bpl
.text:000000000000381B                 or      ebp, [rbx+4]
.text:000000000000381E                 lea     r10, [rbx+8]
.text:0000000000003822                 sub     rsp, 8
.text:0000000000003826                 mov     r8d, [rbx]
.text:0000000000003829                 mov     rcx, r15
.text:000000000000382C                 mov     [rsp+70h+var_5C], eax
.text:0000000000003830                 push    qword ptr [rbx+30h]
.text:0000000000003833                 mov     rdx, r14
.text:0000000000003836                 push    qword ptr [rbx+28h]
.text:0000000000003839                 push    r10
.text:000000000000383B                 xor     esi, esi
.text:000000000000383D                 mov     r9d, ebp
.text:0000000000003840                 xor     edi, edi
.text:0000000000003842                 mov     [rsp+88h+var_48], r10
.text:0000000000003847                 call    quotearg_buffer_restyled
.text:000000000000384C                 lea     rsi, [rax+1]
.text:0000000000003850                 mov     [rsp+88h+var_40], rax
.text:0000000000003855                 add     rsp, 20h
.text:0000000000003859                 mov     rdi, rsi
.text:000000000000385C                 mov     [rsp+68h+var_50], rsi
.text:0000000000003861                 call    xmalloc
.text:0000000000003866                 mov     [rsp+68h+var_58], rax
.text:000000000000386B                 sub     rsp, 8
.text:000000000000386F                 push    qword ptr [rbx+30h]
.text:0000000000003872                 push    qword ptr [rbx+28h]
.text:0000000000003875                 mov     r10, [rsp+80h+var_48]
.text:000000000000387A                 mov     r9d, ebp
.text:000000000000387D                 mov     r8d, [rbx]
.text:0000000000003880                 mov     rcx, r15
.text:0000000000003883                 mov     rdx, r14
.text:0000000000003886                 mov     rdi, rax
.text:0000000000003889                 push    r10
.text:000000000000388B                 mov     rsi, [rsp+88h+var_50]
.text:0000000000003890                 call    quotearg_buffer_restyled
.text:0000000000003895                 mov     eax, [rsp+88h+var_5C]
.text:0000000000003899                 add     rsp, 20h
.text:000000000000389D                 test    r12, r12
.text:00000000000038A0                 mov     [r13+0], eax
.text:00000000000038A4                 jz      short loc_38AF
.text:00000000000038A6                 mov     r11, [rsp+68h+var_40]
.text:00000000000038AB                 mov     [r12], r11
.text:00000000000038AF
.text:00000000000038AF loc_38AF:                               ; CODE XREF: quotearg_alloc_mem+C4↑j
.text:00000000000038AF                 mov     rax, [rsp+68h+var_58]
.text:00000000000038B4                 add     rsp, 38h
.text:00000000000038B8                 pop     rbx
.text:00000000000038B9                 pop     rbp
.text:00000000000038BA                 pop     r12
.text:00000000000038BC                 pop     r13
.text:00000000000038BE                 pop     r14
.text:00000000000038C0                 pop     r15
.text:00000000000038C2                 retn
.text:00000000000038C2 ; } // starts at 37E0
.text:00000000000038C2 quotearg_alloc_mem endp
.text:00000000000038C2
.text:00000000000038C2 ; ---------------------------------------------------------------------------
.text:00000000000038C3                 align 10h
.text:00000000000038D0
.text:00000000000038D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000038D0
.text:00000000000038D0
.text:00000000000038D0                 public quotearg_alloc
.text:00000000000038D0 quotearg_alloc  proc near
.text:00000000000038D0 ; __unwind {
.text:00000000000038D0                 mov     rcx, rdx
.text:00000000000038D3                 xor     edx, edx
.text:00000000000038D5                 jmp     quotearg_alloc_mem
.text:00000000000038D5 ; } // starts at 38D0
.text:00000000000038D5 quotearg_alloc  endp
.text:00000000000038D5
.text:00000000000038D5 ; ---------------------------------------------------------------------------
.text:00000000000038DA                 align 20h
.text:00000000000038E0
.text:00000000000038E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000038E0
.text:00000000000038E0 ; Attributes: info_from_lumina
.text:00000000000038E0
.text:00000000000038E0 ; void __cdecl quotearg_free()
.text:00000000000038E0                 public quotearg_free
.text:00000000000038E0 quotearg_free   proc near
.text:00000000000038E0 ; __unwind {
.text:00000000000038E0                 mov     eax, cs:nslots
.text:00000000000038E6                 push    r12
.text:00000000000038E8                 mov     r12, cs:slotvec
.text:00000000000038EF                 push    rbp
.text:00000000000038F0                 push    rbx
.text:00000000000038F1                 cmp     eax, 1
.text:00000000000038F4                 jle     short loc_3921
.text:00000000000038F6                 sub     eax, 2
.text:00000000000038F9                 lea     rbx, [r12+18h]
.text:00000000000038FE                 shl     rax, 4
.text:0000000000003902                 lea     rbp, [r12+rax+28h]
.text:0000000000003907                 nop     word ptr [rax+rax+00000000h]
.text:0000000000003910
.text:0000000000003910 loc_3910:                               ; CODE XREF: quotearg_free+3F↓j
.text:0000000000003910                 mov     rdi, [rbx]      ; ptr
.text:0000000000003913                 add     rbx, 10h
.text:0000000000003917                 call    _free
.text:000000000000391C                 cmp     rbx, rbp
.text:000000000000391F                 jnz     short loc_3910
.text:0000000000003921
.text:0000000000003921 loc_3921:                               ; CODE XREF: quotearg_free+14↑j
.text:0000000000003921                 mov     rdi, [r12+8]    ; ptr
.text:0000000000003926                 lea     rbx, slot0
.text:000000000000392D                 cmp     rdi, rbx
.text:0000000000003930                 jz      short loc_3949
.text:0000000000003932                 call    _free
.text:0000000000003937                 mov     cs:slotvec0, 100h
.text:0000000000003942                 mov     cs:off_207078, rbx
.text:0000000000003949
.text:0000000000003949 loc_3949:                               ; CODE XREF: quotearg_free+50↑j
.text:0000000000003949                 lea     rbx, slotvec0
.text:0000000000003950                 cmp     r12, rbx
.text:0000000000003953                 jz      short loc_3964
.text:0000000000003955                 mov     rdi, r12        ; ptr
.text:0000000000003958                 call    _free
.text:000000000000395D                 mov     cs:slotvec, rbx
.text:0000000000003964
.text:0000000000003964 loc_3964:                               ; CODE XREF: quotearg_free+73↑j
.text:0000000000003964                 pop     rbx
.text:0000000000003965                 mov     cs:nslots, 1
.text:000000000000396F                 pop     rbp
.text:0000000000003970                 pop     r12
.text:0000000000003972                 retn
.text:0000000000003972 ; } // starts at 38E0
.text:0000000000003972 quotearg_free   endp
.text:0000000000003972
.text:0000000000003972 ; ---------------------------------------------------------------------------
.text:0000000000003973                 align 20h
.text:0000000000003980
.text:0000000000003980 ; =============== S U B R O U T I N E =======================================
.text:0000000000003980
.text:0000000000003980
.text:0000000000003980                 public quotearg_n
.text:0000000000003980 quotearg_n      proc near
.text:0000000000003980 ; __unwind {
.text:0000000000003980                 lea     rcx, default_quoting_options
.text:0000000000003987                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000398E                 jmp     quotearg_n_options
.text:000000000000398E ; } // starts at 3980
.text:000000000000398E quotearg_n      endp
.text:000000000000398E
.text:000000000000398E ; ---------------------------------------------------------------------------
.text:0000000000003993                 align 20h
.text:00000000000039A0
.text:00000000000039A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000039A0
.text:00000000000039A0
.text:00000000000039A0                 public quotearg_n_mem
.text:00000000000039A0 quotearg_n_mem  proc near
.text:00000000000039A0 ; __unwind {
.text:00000000000039A0                 lea     rcx, default_quoting_options
.text:00000000000039A7                 jmp     quotearg_n_options
.text:00000000000039A7 ; } // starts at 39A0
.text:00000000000039A7 quotearg_n_mem  endp
.text:00000000000039A7
.text:00000000000039A7 ; ---------------------------------------------------------------------------
.text:00000000000039AC                 align 10h
.text:00000000000039B0
.text:00000000000039B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000039B0
.text:00000000000039B0
.text:00000000000039B0                 public quotearg
.text:00000000000039B0 quotearg        proc near
.text:00000000000039B0 ; __unwind {
.text:00000000000039B0                 lea     rcx, default_quoting_options
.text:00000000000039B7                 mov     rsi, rdi
.text:00000000000039BA                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000039C1                 xor     edi, edi
.text:00000000000039C3                 jmp     quotearg_n_options
.text:00000000000039C3 ; } // starts at 39B0
.text:00000000000039C3 quotearg        endp
.text:00000000000039C3
.text:00000000000039C3 ; ---------------------------------------------------------------------------
.text:00000000000039C8                 align 10h
.text:00000000000039D0
.text:00000000000039D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000039D0
.text:00000000000039D0
.text:00000000000039D0                 public quotearg_mem
.text:00000000000039D0 quotearg_mem    proc near
.text:00000000000039D0 ; __unwind {
.text:00000000000039D0                 lea     rcx, default_quoting_options
.text:00000000000039D7                 mov     rdx, rsi
.text:00000000000039DA                 mov     rsi, rdi
.text:00000000000039DD                 xor     edi, edi
.text:00000000000039DF                 jmp     quotearg_n_options
.text:00000000000039DF ; } // starts at 39D0
.text:00000000000039DF quotearg_mem    endp
.text:00000000000039DF
.text:00000000000039DF ; ---------------------------------------------------------------------------
.text:00000000000039E4                 align 10h
.text:00000000000039F0
.text:00000000000039F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000039F0
.text:00000000000039F0 ; Attributes: info_from_lumina
.text:00000000000039F0
.text:00000000000039F0 ; char *__fastcall quotearg_n_style(int n, quoting_style s, const char *arg)
.text:00000000000039F0                 public quotearg_n_style
.text:00000000000039F0 quotearg_n_style proc near              ; CODE XREF: quotearg_style+7↓j
.text:00000000000039F0
.text:00000000000039F0 var_48          = dword ptr -48h
.text:00000000000039F0 var_44          = qword ptr -44h
.text:00000000000039F0 var_3C          = qword ptr -3Ch
.text:00000000000039F0 var_34          = qword ptr -34h
.text:00000000000039F0 var_2C          = qword ptr -2Ch
.text:00000000000039F0 var_24          = qword ptr -24h
.text:00000000000039F0 var_1C          = qword ptr -1Ch
.text:00000000000039F0 var_14          = dword ptr -14h
.text:00000000000039F0 var_10          = qword ptr -10h
.text:00000000000039F0
.text:00000000000039F0 ; __unwind {
.text:00000000000039F0                 sub     rsp, 48h
.text:00000000000039F4                 mov     rax, rdx
.text:00000000000039F7                 mov     rdx, fs:28h
.text:0000000000003A00                 mov     [rsp+48h+var_10], rdx
.text:0000000000003A05                 xor     edx, edx
.text:0000000000003A07                 cmp     esi, 0Ah
.text:0000000000003A0A                 jz      short loc_3A74
.text:0000000000003A0C                 mov     [rsp+48h+var_48], esi
.text:0000000000003A0F                 mov     rcx, rsp
.text:0000000000003A12                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003A19                 mov     rsi, rax
.text:0000000000003A1C                 mov     [rsp+48h+var_44], 0
.text:0000000000003A25                 mov     [rsp+48h+var_3C], 0
.text:0000000000003A2E                 mov     [rsp+48h+var_34], 0
.text:0000000000003A37                 mov     [rsp+48h+var_2C], 0
.text:0000000000003A40                 mov     [rsp+48h+var_24], 0
.text:0000000000003A49                 mov     [rsp+48h+var_1C], 0
.text:0000000000003A52                 mov     [rsp+48h+var_14], 0
.text:0000000000003A5A                 call    quotearg_n_options
.text:0000000000003A5F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000003A64                 xor     rcx, fs:28h
.text:0000000000003A6D                 jnz     short loc_3A79
.text:0000000000003A6F                 add     rsp, 48h
.text:0000000000003A73                 retn
.text:0000000000003A74 ; ---------------------------------------------------------------------------
.text:0000000000003A74
.text:0000000000003A74 loc_3A74:                               ; CODE XREF: quotearg_n_style+1A↑j
.text:0000000000003A74                 call    _abort
.text:0000000000003A79 ; ---------------------------------------------------------------------------
.text:0000000000003A79
.text:0000000000003A79 loc_3A79:                               ; CODE XREF: quotearg_n_style+7D↑j
.text:0000000000003A79                 call    ___stack_chk_fail
.text:0000000000003A79 ; } // starts at 39F0
.text:0000000000003A79 quotearg_n_style endp
.text:0000000000003A79
.text:0000000000003A79 ; ---------------------------------------------------------------------------
.text:0000000000003A7E                 align 20h
.text:0000000000003A80
.text:0000000000003A80 ; =============== S U B R O U T I N E =======================================
.text:0000000000003A80
.text:0000000000003A80 ; Attributes: info_from_lumina
.text:0000000000003A80
.text:0000000000003A80 ; char *__fastcall quotearg_n_style_mem(int n, quoting_style s, const char *arg, size_t argsize)
.text:0000000000003A80                 public quotearg_n_style_mem
.text:0000000000003A80 quotearg_n_style_mem proc near          ; CODE XREF: quotearg_style_mem+A↓j
.text:0000000000003A80
.text:0000000000003A80 var_48          = dword ptr -48h
.text:0000000000003A80 var_44          = qword ptr -44h
.text:0000000000003A80 var_3C          = qword ptr -3Ch
.text:0000000000003A80 var_34          = qword ptr -34h
.text:0000000000003A80 var_2C          = qword ptr -2Ch
.text:0000000000003A80 var_24          = qword ptr -24h
.text:0000000000003A80 var_1C          = qword ptr -1Ch
.text:0000000000003A80 var_14          = dword ptr -14h
.text:0000000000003A80 var_10          = qword ptr -10h
.text:0000000000003A80
.text:0000000000003A80 ; __unwind {
.text:0000000000003A80                 sub     rsp, 48h
.text:0000000000003A84                 mov     rax, rdx
.text:0000000000003A87                 mov     rdx, rcx
.text:0000000000003A8A                 mov     rcx, fs:28h
.text:0000000000003A93                 mov     [rsp+48h+var_10], rcx
.text:0000000000003A98                 xor     ecx, ecx
.text:0000000000003A9A                 cmp     esi, 0Ah
.text:0000000000003A9D                 jz      short loc_3B00
.text:0000000000003A9F                 mov     [rsp+48h+var_48], esi
.text:0000000000003AA2                 mov     rcx, rsp
.text:0000000000003AA5                 mov     rsi, rax
.text:0000000000003AA8                 mov     [rsp+48h+var_44], 0
.text:0000000000003AB1                 mov     [rsp+48h+var_3C], 0
.text:0000000000003ABA                 mov     [rsp+48h+var_34], 0
.text:0000000000003AC3                 mov     [rsp+48h+var_2C], 0
.text:0000000000003ACC                 mov     [rsp+48h+var_24], 0
.text:0000000000003AD5                 mov     [rsp+48h+var_1C], 0
.text:0000000000003ADE                 mov     [rsp+48h+var_14], 0
.text:0000000000003AE6                 call    quotearg_n_options
.text:0000000000003AEB                 mov     rdx, [rsp+48h+var_10]
.text:0000000000003AF0                 xor     rdx, fs:28h
.text:0000000000003AF9                 jnz     short loc_3B05
.text:0000000000003AFB                 add     rsp, 48h
.text:0000000000003AFF                 retn
.text:0000000000003B00 ; ---------------------------------------------------------------------------
.text:0000000000003B00
.text:0000000000003B00 loc_3B00:                               ; CODE XREF: quotearg_n_style_mem+1D↑j
.text:0000000000003B00                 call    _abort
.text:0000000000003B05 ; ---------------------------------------------------------------------------
.text:0000000000003B05
.text:0000000000003B05 loc_3B05:                               ; CODE XREF: quotearg_n_style_mem+79↑j
.text:0000000000003B05                 call    ___stack_chk_fail
.text:0000000000003B05 ; } // starts at 3A80
.text:0000000000003B05 quotearg_n_style_mem endp
.text:0000000000003B05
.text:0000000000003B05 ; ---------------------------------------------------------------------------
.text:0000000000003B0A                 align 10h
.text:0000000000003B10
.text:0000000000003B10 ; =============== S U B R O U T I N E =======================================
.text:0000000000003B10
.text:0000000000003B10
.text:0000000000003B10                 public quotearg_style
.text:0000000000003B10 quotearg_style  proc near
.text:0000000000003B10 ; __unwind {
.text:0000000000003B10                 mov     rdx, rsi
.text:0000000000003B13                 mov     esi, edi
.text:0000000000003B15                 xor     edi, edi
.text:0000000000003B17                 jmp     quotearg_n_style
.text:0000000000003B17 ; } // starts at 3B10
.text:0000000000003B17 quotearg_style  endp
.text:0000000000003B17
.text:0000000000003B17 ; ---------------------------------------------------------------------------
.text:0000000000003B1C                 align 20h
.text:0000000000003B20
.text:0000000000003B20 ; =============== S U B R O U T I N E =======================================
.text:0000000000003B20
.text:0000000000003B20
.text:0000000000003B20                 public quotearg_style_mem
.text:0000000000003B20 quotearg_style_mem proc near
.text:0000000000003B20 ; __unwind {
.text:0000000000003B20                 mov     rcx, rdx
.text:0000000000003B23                 mov     rdx, rsi
.text:0000000000003B26                 mov     esi, edi
.text:0000000000003B28                 xor     edi, edi
.text:0000000000003B2A                 jmp     quotearg_n_style_mem
.text:0000000000003B2A ; } // starts at 3B20
.text:0000000000003B2A quotearg_style_mem endp
.text:0000000000003B2A
.text:0000000000003B2A ; ---------------------------------------------------------------------------
.text:0000000000003B2F                 align 10h
.text:0000000000003B30
.text:0000000000003B30 ; =============== S U B R O U T I N E =======================================
.text:0000000000003B30
.text:0000000000003B30 ; Attributes: info_from_lumina
.text:0000000000003B30
.text:0000000000003B30 ; char *__fastcall quotearg_char_mem(const char *arg, size_t argsize, char ch_0)
.text:0000000000003B30                 public quotearg_char_mem
.text:0000000000003B30 quotearg_char_mem proc near             ; CODE XREF: quotearg_char+B↓j
.text:0000000000003B30                                         ; quotearg_colon+C↓j ...
.text:0000000000003B30
.text:0000000000003B30 var_48          = xmmword ptr -48h
.text:0000000000003B30 var_38          = xmmword ptr -38h
.text:0000000000003B30 var_28          = xmmword ptr -28h
.text:0000000000003B30 var_18          = qword ptr -18h
.text:0000000000003B30 var_10          = qword ptr -10h
.text:0000000000003B30
.text:0000000000003B30 ; __unwind {
.text:0000000000003B30                 sub     rsp, 48h
.text:0000000000003B34                 mov     ecx, edx
.text:0000000000003B36                 mov     rax, fs:28h
.text:0000000000003B3F                 mov     [rsp+48h+var_10], rax
.text:0000000000003B44                 xor     eax, eax
.text:0000000000003B46                 mov     rax, cs:qword_207230
.text:0000000000003B4D                 mov     r8, rsp
.text:0000000000003B50                 and     ecx, 1Fh
.text:0000000000003B53                 movdqa  xmm0, cs:default_quoting_options
.text:0000000000003B5B                 mov     [rsp+48h+var_18], rax
.text:0000000000003B60                 mov     eax, edx
.text:0000000000003B62                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000003B66                 shr     al, 5
.text:0000000000003B69                 movzx   eax, al
.text:0000000000003B6C                 lea     r9, [r8+rax*4+8]
.text:0000000000003B71                 movdqa  xmm0, cs:xmmword_207210
.text:0000000000003B79                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000003B7E                 movdqa  xmm0, cs:xmmword_207220
.text:0000000000003B86                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000003B8B                 mov     edx, [r9]
.text:0000000000003B8E                 mov     eax, edx
.text:0000000000003B90                 shr     eax, cl
.text:0000000000003B92                 not     eax
.text:0000000000003B94                 and     eax, 1
.text:0000000000003B97                 shl     eax, cl
.text:0000000000003B99                 mov     rcx, r8
.text:0000000000003B9C                 xor     eax, edx
.text:0000000000003B9E                 mov     rdx, rsi
.text:0000000000003BA1                 mov     rsi, rdi
.text:0000000000003BA4                 mov     [r9], eax
.text:0000000000003BA7                 xor     edi, edi
.text:0000000000003BA9                 call    quotearg_n_options
.text:0000000000003BAE                 mov     rsi, [rsp+48h+var_10]
.text:0000000000003BB3                 xor     rsi, fs:28h
.text:0000000000003BBC                 jnz     short loc_3BC3
.text:0000000000003BBE                 add     rsp, 48h
.text:0000000000003BC2                 retn
.text:0000000000003BC3 ; ---------------------------------------------------------------------------
.text:0000000000003BC3
.text:0000000000003BC3 loc_3BC3:                               ; CODE XREF: quotearg_char_mem+8C↑j
.text:0000000000003BC3                 call    ___stack_chk_fail
.text:0000000000003BC3 ; } // starts at 3B30
.text:0000000000003BC3 quotearg_char_mem endp
.text:0000000000003BC3
.text:0000000000003BC3 ; ---------------------------------------------------------------------------
.text:0000000000003BC8                 align 10h
.text:0000000000003BD0
.text:0000000000003BD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003BD0
.text:0000000000003BD0
.text:0000000000003BD0                 public quotearg_char
.text:0000000000003BD0 quotearg_char   proc near
.text:0000000000003BD0 ; __unwind {
.text:0000000000003BD0                 movsx   edx, sil
.text:0000000000003BD4                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:0000000000003BDB                 jmp     quotearg_char_mem
.text:0000000000003BDB ; } // starts at 3BD0
.text:0000000000003BDB quotearg_char   endp
.text:0000000000003BDB
.text:0000000000003BE0
.text:0000000000003BE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003BE0
.text:0000000000003BE0
.text:0000000000003BE0                 public quotearg_colon
.text:0000000000003BE0 quotearg_colon  proc near               ; CODE XREF: close_stdout+65↑p
.text:0000000000003BE0 ; __unwind {
.text:0000000000003BE0                 mov     edx, 3Ah ; ':'
.text:0000000000003BE5                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:0000000000003BEC                 jmp     quotearg_char_mem
.text:0000000000003BEC ; } // starts at 3BE0
.text:0000000000003BEC quotearg_colon  endp
.text:0000000000003BEC
.text:0000000000003BEC ; ---------------------------------------------------------------------------
.text:0000000000003BF1                 align 20h
.text:0000000000003C00
.text:0000000000003C00 ; =============== S U B R O U T I N E =======================================
.text:0000000000003C00
.text:0000000000003C00
.text:0000000000003C00                 public quotearg_colon_mem
.text:0000000000003C00 quotearg_colon_mem proc near
.text:0000000000003C00 ; __unwind {
.text:0000000000003C00                 mov     edx, 3Ah ; ':'
.text:0000000000003C05                 jmp     quotearg_char_mem
.text:0000000000003C05 ; } // starts at 3C00
.text:0000000000003C05 quotearg_colon_mem endp
.text:0000000000003C05
.text:0000000000003C05 ; ---------------------------------------------------------------------------
.text:0000000000003C0A                 align 10h
.text:0000000000003C10
.text:0000000000003C10 ; =============== S U B R O U T I N E =======================================
.text:0000000000003C10
.text:0000000000003C10 ; Attributes: info_from_lumina
.text:0000000000003C10
.text:0000000000003C10 ; char *__fastcall quotearg_n_style_colon(int n, quoting_style s, const char *arg)
.text:0000000000003C10                 public quotearg_n_style_colon
.text:0000000000003C10 quotearg_n_style_colon proc near
.text:0000000000003C10
.text:0000000000003C10 var_48          = dword ptr -48h
.text:0000000000003C10 var_44          = qword ptr -44h
.text:0000000000003C10 var_3C          = qword ptr -3Ch
.text:0000000000003C10 var_34          = qword ptr -34h
.text:0000000000003C10 var_2C          = qword ptr -2Ch
.text:0000000000003C10 var_24          = qword ptr -24h
.text:0000000000003C10 var_1C          = qword ptr -1Ch
.text:0000000000003C10 var_14          = dword ptr -14h
.text:0000000000003C10 var_10          = qword ptr -10h
.text:0000000000003C10
.text:0000000000003C10 ; __unwind {
.text:0000000000003C10                 sub     rsp, 48h
.text:0000000000003C14                 mov     rax, rdx
.text:0000000000003C17                 mov     rdx, fs:28h
.text:0000000000003C20                 mov     [rsp+48h+var_10], rdx
.text:0000000000003C25                 xor     edx, edx
.text:0000000000003C27                 cmp     esi, 0Ah
.text:0000000000003C2A                 jz      short loc_3C94
.text:0000000000003C2C                 mov     [rsp+48h+var_48], esi
.text:0000000000003C2F                 mov     rcx, rsp
.text:0000000000003C32                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003C39                 mov     rsi, rax
.text:0000000000003C3C                 mov     [rsp+48h+var_44], 0
.text:0000000000003C45                 mov     [rsp+48h+var_3C], 4000000h
.text:0000000000003C4E                 mov     [rsp+48h+var_34], 0
.text:0000000000003C57                 mov     [rsp+48h+var_2C], 0
.text:0000000000003C60                 mov     [rsp+48h+var_24], 0
.text:0000000000003C69                 mov     [rsp+48h+var_1C], 0
.text:0000000000003C72                 mov     [rsp+48h+var_14], 0
.text:0000000000003C7A                 call    quotearg_n_options
.text:0000000000003C7F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000003C84                 xor     rcx, fs:28h
.text:0000000000003C8D                 jnz     short loc_3C99
.text:0000000000003C8F                 add     rsp, 48h
.text:0000000000003C93                 retn
.text:0000000000003C94 ; ---------------------------------------------------------------------------
.text:0000000000003C94
.text:0000000000003C94 loc_3C94:                               ; CODE XREF: quotearg_n_style_colon+1A↑j
.text:0000000000003C94                 call    _abort
.text:0000000000003C99 ; ---------------------------------------------------------------------------
.text:0000000000003C99
.text:0000000000003C99 loc_3C99:                               ; CODE XREF: quotearg_n_style_colon+7D↑j
.text:0000000000003C99                 call    ___stack_chk_fail
.text:0000000000003C99 ; } // starts at 3C10
.text:0000000000003C99 quotearg_n_style_colon endp
.text:0000000000003C99
.text:0000000000003C99 ; ---------------------------------------------------------------------------
.text:0000000000003C9E                 align 20h
.text:0000000000003CA0
.text:0000000000003CA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003CA0
.text:0000000000003CA0 ; Attributes: info_from_lumina
.text:0000000000003CA0
.text:0000000000003CA0 ; char *__fastcall quotearg_n_custom_mem(int n, const char *left_quote, const char *right_quote, const char *arg, size_t argsize)
.text:0000000000003CA0                 public quotearg_n_custom_mem
.text:0000000000003CA0 quotearg_n_custom_mem proc near         ; CODE XREF: quotearg_n_custom+7↓j
.text:0000000000003CA0                                         ; quotearg_custom+12↓j ...
.text:0000000000003CA0
.text:0000000000003CA0 var_48          = xmmword ptr -48h
.text:0000000000003CA0 var_38          = xmmword ptr -38h
.text:0000000000003CA0 var_28          = xmmword ptr -28h
.text:0000000000003CA0 var_18          = qword ptr -18h
.text:0000000000003CA0 var_10          = qword ptr -10h
.text:0000000000003CA0
.text:0000000000003CA0 ; __unwind {
.text:0000000000003CA0                 sub     rsp, 48h
.text:0000000000003CA4                 mov     r9, rcx
.text:0000000000003CA7                 mov     rcx, cs:qword_207230
.text:0000000000003CAE                 movdqa  xmm0, cs:default_quoting_options
.text:0000000000003CB6                 mov     rax, fs:28h
.text:0000000000003CBF                 mov     [rsp+48h+var_10], rax
.text:0000000000003CC4                 xor     eax, eax
.text:0000000000003CC6                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000003CCA                 test    rsi, rsi
.text:0000000000003CCD                 mov     [rsp+48h+var_18], rcx
.text:0000000000003CD2                 mov     dword ptr [rsp+48h+var_48], 0Ah
.text:0000000000003CD9                 movdqa  xmm0, cs:xmmword_207210
.text:0000000000003CE1                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000003CE6                 movdqa  xmm0, cs:xmmword_207220
.text:0000000000003CEE                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000003CF3                 jz      short loc_3D27
.text:0000000000003CF5                 test    rdx, rdx
.text:0000000000003CF8                 jz      short loc_3D27
.text:0000000000003CFA                 mov     qword ptr [rsp+48h+var_28+8], rsi
.text:0000000000003CFF                 mov     [rsp+48h+var_18], rdx
.text:0000000000003D04                 mov     rcx, rsp
.text:0000000000003D07                 mov     rdx, r8
.text:0000000000003D0A                 mov     rsi, r9
.text:0000000000003D0D                 call    quotearg_n_options
.text:0000000000003D12                 mov     rdi, [rsp+48h+var_10]
.text:0000000000003D17                 xor     rdi, fs:28h
.text:0000000000003D20                 jnz     short loc_3D2C
.text:0000000000003D22                 add     rsp, 48h
.text:0000000000003D26                 retn
.text:0000000000003D27 ; ---------------------------------------------------------------------------
.text:0000000000003D27
.text:0000000000003D27 loc_3D27:                               ; CODE XREF: quotearg_n_custom_mem+53↑j
.text:0000000000003D27                                         ; quotearg_n_custom_mem+58↑j
.text:0000000000003D27                 call    _abort
.text:0000000000003D2C ; ---------------------------------------------------------------------------
.text:0000000000003D2C
.text:0000000000003D2C loc_3D2C:                               ; CODE XREF: quotearg_n_custom_mem+80↑j
.text:0000000000003D2C                 call    ___stack_chk_fail
.text:0000000000003D2C ; } // starts at 3CA0
.text:0000000000003D2C quotearg_n_custom_mem endp
.text:0000000000003D2C
.text:0000000000003D2C ; ---------------------------------------------------------------------------
.text:0000000000003D31                 align 20h
.text:0000000000003D40
.text:0000000000003D40 ; =============== S U B R O U T I N E =======================================
.text:0000000000003D40
.text:0000000000003D40
.text:0000000000003D40                 public quotearg_n_custom
.text:0000000000003D40 quotearg_n_custom proc near
.text:0000000000003D40 ; __unwind {
.text:0000000000003D40                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000003D47                 jmp     quotearg_n_custom_mem
.text:0000000000003D47 ; } // starts at 3D40
.text:0000000000003D47 quotearg_n_custom endp
.text:0000000000003D47
.text:0000000000003D47 ; ---------------------------------------------------------------------------
.text:0000000000003D4C                 align 10h
.text:0000000000003D50
.text:0000000000003D50 ; =============== S U B R O U T I N E =======================================
.text:0000000000003D50
.text:0000000000003D50
.text:0000000000003D50                 public quotearg_custom
.text:0000000000003D50 quotearg_custom proc near
.text:0000000000003D50 ; __unwind {
.text:0000000000003D50                 mov     rcx, rdx
.text:0000000000003D53                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000003D5A                 mov     rdx, rsi
.text:0000000000003D5D                 mov     rsi, rdi
.text:0000000000003D60                 xor     edi, edi
.text:0000000000003D62                 jmp     quotearg_n_custom_mem
.text:0000000000003D62 ; } // starts at 3D50
.text:0000000000003D62 quotearg_custom endp
.text:0000000000003D62
.text:0000000000003D62 ; ---------------------------------------------------------------------------
.text:0000000000003D67                 align 10h
.text:0000000000003D70
.text:0000000000003D70 ; =============== S U B R O U T I N E =======================================
.text:0000000000003D70
.text:0000000000003D70
.text:0000000000003D70                 public quotearg_custom_mem
.text:0000000000003D70 quotearg_custom_mem proc near
.text:0000000000003D70 ; __unwind {
.text:0000000000003D70                 mov     r8, rcx
.text:0000000000003D73                 mov     rcx, rdx
.text:0000000000003D76                 mov     rdx, rsi
.text:0000000000003D79                 mov     rsi, rdi
.text:0000000000003D7C                 xor     edi, edi
.text:0000000000003D7E                 jmp     quotearg_n_custom_mem
.text:0000000000003D7E ; } // starts at 3D70
.text:0000000000003D7E quotearg_custom_mem endp
.text:0000000000003D7E
.text:0000000000003D7E ; ---------------------------------------------------------------------------
.text:0000000000003D83                 align 10h
.text:0000000000003D90
.text:0000000000003D90 ; =============== S U B R O U T I N E =======================================
.text:0000000000003D90
.text:0000000000003D90
.text:0000000000003D90                 public quote_n_mem
.text:0000000000003D90 quote_n_mem     proc near
.text:0000000000003D90 ; __unwind {
.text:0000000000003D90                 lea     rcx, quote_quoting_options
.text:0000000000003D97                 jmp     quotearg_n_options
.text:0000000000003D97 ; } // starts at 3D90
.text:0000000000003D97 quote_n_mem     endp
.text:0000000000003D97
.text:0000000000003D97 ; ---------------------------------------------------------------------------
.text:0000000000003D9C                 align 20h
.text:0000000000003DA0
.text:0000000000003DA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003DA0
.text:0000000000003DA0
.text:0000000000003DA0                 public quote_mem
.text:0000000000003DA0 quote_mem       proc near
.text:0000000000003DA0 ; __unwind {
.text:0000000000003DA0                 lea     rcx, quote_quoting_options
.text:0000000000003DA7                 mov     rdx, rsi
.text:0000000000003DAA                 mov     rsi, rdi
.text:0000000000003DAD                 xor     edi, edi
.text:0000000000003DAF                 jmp     quotearg_n_options
.text:0000000000003DAF ; } // starts at 3DA0
.text:0000000000003DAF quote_mem       endp
.text:0000000000003DAF
.text:0000000000003DAF ; ---------------------------------------------------------------------------
.text:0000000000003DB4                 align 20h
.text:0000000000003DC0
.text:0000000000003DC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003DC0
.text:0000000000003DC0
.text:0000000000003DC0                 public quote_n
.text:0000000000003DC0 quote_n         proc near
.text:0000000000003DC0 ; __unwind {
.text:0000000000003DC0                 lea     rcx, quote_quoting_options
.text:0000000000003DC7                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003DCE                 jmp     quotearg_n_options
.text:0000000000003DCE ; } // starts at 3DC0
.text:0000000000003DCE quote_n         endp
.text:0000000000003DCE
.text:0000000000003DCE ; ---------------------------------------------------------------------------
.text:0000000000003DD3                 align 20h
.text:0000000000003DE0
.text:0000000000003DE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003DE0
.text:0000000000003DE0
.text:0000000000003DE0                 public quote
.text:0000000000003DE0 quote           proc near               ; CODE XREF: main+16C↑p
.text:0000000000003DE0                                         ; xnumtoumax+6D↓p
.text:0000000000003DE0 ; __unwind {
.text:0000000000003DE0                 lea     rcx, quote_quoting_options
.text:0000000000003DE7                 mov     rsi, rdi
.text:0000000000003DEA                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003DF1                 xor     edi, edi
.text:0000000000003DF3                 jmp     quotearg_n_options
.text:0000000000003DF3 ; } // starts at 3DE0
.text:0000000000003DF3 quote           endp
.text:0000000000003DF3
.text:0000000000003DF3 ; ---------------------------------------------------------------------------
.text:0000000000003DF8                 align 20h
.text:0000000000003E00
.text:0000000000003E00 ; =============== S U B R O U T I N E =======================================
.text:0000000000003E00
.text:0000000000003E00
.text:0000000000003E00 ; __int64 __fastcall version_etc_arn(FILE *stream)
.text:0000000000003E00                 public version_etc_arn
.text:0000000000003E00 version_etc_arn proc near               ; CODE XREF: version_etc_ar:loc_423B↓j
.text:0000000000003E00                                         ; version_etc_va:loc_428B↓p ...
.text:0000000000003E00
.text:0000000000003E00 var_58          = qword ptr -58h
.text:0000000000003E00 var_50          = qword ptr -50h
.text:0000000000003E00 var_48          = qword ptr -48h
.text:0000000000003E00 var_40          = qword ptr -40h
.text:0000000000003E00
.text:0000000000003E00 ; __unwind {
.text:0000000000003E00                 push    r15
.text:0000000000003E02                 push    r14
.text:0000000000003E04                 push    r13
.text:0000000000003E06                 push    r12
.text:0000000000003E08                 mov     r12, r9
.text:0000000000003E0B                 push    rbp
.text:0000000000003E0C                 push    rbx
.text:0000000000003E0D                 mov     rbp, rdi
.text:0000000000003E10                 mov     rbx, r8
.text:0000000000003E13                 sub     rsp, 28h
.text:0000000000003E17                 test    rsi, rsi
.text:0000000000003E1A                 jz      loc_3F38
.text:0000000000003E20                 mov     r8, rdx
.text:0000000000003E23                 lea     rdx, aSSS       ; "%s (%s) %s\n"
.text:0000000000003E2A                 mov     r9, rcx
.text:0000000000003E2D                 xor     eax, eax
.text:0000000000003E2F                 mov     rcx, rsi
.text:0000000000003E32                 mov     esi, 1
.text:0000000000003E37                 call    ___fprintf_chk
.text:0000000000003E3C
.text:0000000000003E3C loc_3E3C:                               ; CODE XREF: version_etc_arn+151↓j
.text:0000000000003E3C                 lea     rsi, aC_0       ; "(C)"
.text:0000000000003E43                 xor     edi, edi        ; domainname
.text:0000000000003E45                 mov     edx, 5          ; category
.text:0000000000003E4A                 call    _dcgettext
.text:0000000000003E4F                 lea     rdx, version_etc_copyright ; "Copyright %s %d Free Software Foundatio"...
.text:0000000000003E56                 mov     rcx, rax
.text:0000000000003E59                 mov     r8d, 7E3h
.text:0000000000003E5F                 mov     esi, 1
.text:0000000000003E64                 mov     rdi, rbp
.text:0000000000003E67                 xor     eax, eax
.text:0000000000003E69                 call    ___fprintf_chk
.text:0000000000003E6E                 lea     rsi, aLicenseGplv3Gn ; "\nLicense GPLv3+: GNU GPL version 3 or "...
.text:0000000000003E75                 xor     edi, edi        ; domainname
.text:0000000000003E77                 mov     edx, 5          ; category
.text:0000000000003E7C                 call    _dcgettext
.text:0000000000003E81                 mov     rsi, rbp        ; stream
.text:0000000000003E84                 mov     rdi, rax        ; s
.text:0000000000003E87                 call    _fputs_unlocked
.text:0000000000003E8C                 cmp     r12, 9          ; switch 10 cases
.text:0000000000003E90                 ja      def_3EA4        ; jumptable 0000000000003EA4 default case
.text:0000000000003E96                 lea     rdx, jpt_3EA4
.text:0000000000003E9D                 movsxd  rax, ds:(jpt_3EA4 - 5B24h)[rdx+r12*4]
.text:0000000000003EA1                 add     rax, rdx
.text:0000000000003EA4                 jmp     rax             ; switch jump
.text:0000000000003EA4 ; ---------------------------------------------------------------------------
.text:0000000000003EA6                 align 10h
.text:0000000000003EB0
.text:0000000000003EB0 loc_3EB0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003EB0                                         ; DATA XREF: .rodata:jpt_3EA4↓o
.text:0000000000003EB0                 mov     r9, [rbx+38h]   ; jumptable 0000000000003EA4 case 8
.text:0000000000003EB4                 mov     rax, [rbx+10h]
.text:0000000000003EB8                 lea     rsi, aWrittenBySSSSS ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000003EBF                 mov     r8, [rbx+8]
.text:0000000000003EC3                 mov     edx, 5          ; category
.text:0000000000003EC8                 xor     edi, edi        ; domainname
.text:0000000000003ECA                 mov     r13, [rbx+30h]
.text:0000000000003ECE                 mov     r12, [rbx+28h]
.text:0000000000003ED2                 mov     [rsp+58h+var_48], r9
.text:0000000000003ED7                 mov     r15, [rbx+20h]
.text:0000000000003EDB                 mov     r14, [rbx+18h]
.text:0000000000003EDF                 mov     [rsp+58h+var_58], rax
.text:0000000000003EE3                 mov     [rsp+58h+var_50], r8
.text:0000000000003EE8                 mov     rbx, [rbx]
.text:0000000000003EEB                 call    _dcgettext
.text:0000000000003EF0                 sub     rsp, 8
.text:0000000000003EF4
.text:0000000000003EF4 loc_3EF4:                               ; CODE XREF: version_etc_arn+1B0↓j
.text:0000000000003EF4                 mov     r9, [rsp+60h+var_48]
.text:0000000000003EF9                 mov     rdx, rax
.text:0000000000003EFC                 mov     rcx, rbx
.text:0000000000003EFF                 mov     esi, 1
.text:0000000000003F04                 mov     rdi, rbp
.text:0000000000003F07                 xor     eax, eax
.text:0000000000003F09                 push    r9
.text:0000000000003F0B                 push    r13
.text:0000000000003F0D                 push    r12
.text:0000000000003F0F                 push    r15
.text:0000000000003F11                 push    r14
.text:0000000000003F13                 mov     r9, [rsp+88h+var_58]
.text:0000000000003F18                 mov     r8, [rsp+88h+var_50]
.text:0000000000003F1D                 call    ___fprintf_chk
.text:0000000000003F22                 add     rsp, 30h
.text:0000000000003F26
.text:0000000000003F26 loc_3F26:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003F26                                         ; DATA XREF: .rodata:jpt_3EA4↓o
.text:0000000000003F26                 add     rsp, 28h        ; jumptable 0000000000003EA4 case 0
.text:0000000000003F2A                 pop     rbx
.text:0000000000003F2B                 pop     rbp
.text:0000000000003F2C                 pop     r12
.text:0000000000003F2E                 pop     r13
.text:0000000000003F30                 pop     r14
.text:0000000000003F32                 pop     r15
.text:0000000000003F34                 retn
.text:0000000000003F34 ; ---------------------------------------------------------------------------
.text:0000000000003F35                 align 8
.text:0000000000003F38
.text:0000000000003F38 loc_3F38:                               ; CODE XREF: version_etc_arn+1A↑j
.text:0000000000003F38                 mov     r8, rcx
.text:0000000000003F3B                 mov     rcx, rdx
.text:0000000000003F3E                 lea     rdx, aSS_0      ; "%s %s\n"
.text:0000000000003F45                 mov     esi, 1
.text:0000000000003F4A                 xor     eax, eax
.text:0000000000003F4C                 call    ___fprintf_chk
.text:0000000000003F51                 jmp     loc_3E3C
.text:0000000000003F51 ; ---------------------------------------------------------------------------
.text:0000000000003F56                 align 20h
.text:0000000000003F60
.text:0000000000003F60 loc_3F60:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003F60                                         ; DATA XREF: .rodata:jpt_3EA4↓o
.text:0000000000003F60                 mov     r10, [rbx+40h]  ; jumptable 0000000000003EA4 case 9
.text:0000000000003F64                 mov     r9, [rbx+38h]
.text:0000000000003F68                 lea     rsi, aWrittenBySSSSS_0 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000003F6F                 mov     rax, [rbx+10h]
.text:0000000000003F73                 mov     r8, [rbx+8]
.text:0000000000003F77                 mov     edx, 5          ; category
.text:0000000000003F7C                 mov     r13, [rbx+30h]
.text:0000000000003F80                 mov     r12, [rbx+28h]
.text:0000000000003F84                 mov     r15, [rbx+20h]
.text:0000000000003F88                 mov     r14, [rbx+18h]
.text:0000000000003F8C                 mov     rbx, [rbx]
.text:0000000000003F8F                 mov     [rsp+58h+var_40], r10
.text:0000000000003F94                 mov     [rsp+58h+var_48], r9
.text:0000000000003F99                 mov     [rsp+58h+var_58], rax
.text:0000000000003F9D                 mov     [rsp+58h+var_50], r8
.text:0000000000003FA2
.text:0000000000003FA2 loc_3FA2:                               ; CODE XREF: version_etc_arn+412↓j
.text:0000000000003FA2                 xor     edi, edi        ; domainname
.text:0000000000003FA4                 call    _dcgettext
.text:0000000000003FA9                 mov     r10, [rsp+58h+var_40]
.text:0000000000003FAE                 push    r10
.text:0000000000003FB0                 jmp     loc_3EF4
.text:0000000000003FB0 ; ---------------------------------------------------------------------------
.text:0000000000003FB5                 align 8
.text:0000000000003FB8
.text:0000000000003FB8 loc_3FB8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003FB8                                         ; DATA XREF: .rodata:jpt_3EA4↓o
.text:0000000000003FB8                 mov     rbx, [rbx]      ; jumptable 0000000000003EA4 case 1
.text:0000000000003FBB                 lea     rsi, aWrittenByS ; "Written by %s.\n"
.text:0000000000003FC2                 mov     edx, 5          ; category
.text:0000000000003FC7                 xor     edi, edi        ; domainname
.text:0000000000003FC9                 call    _dcgettext
.text:0000000000003FCE                 add     rsp, 28h
.text:0000000000003FD2                 mov     rcx, rbx
.text:0000000000003FD5                 mov     rdi, rbp
.text:0000000000003FD8                 pop     rbx
.text:0000000000003FD9                 pop     rbp
.text:0000000000003FDA                 pop     r12
.text:0000000000003FDC                 pop     r13
.text:0000000000003FDE                 pop     r14
.text:0000000000003FE0                 pop     r15
.text:0000000000003FE2                 mov     rdx, rax
.text:0000000000003FE5                 mov     esi, 1
.text:0000000000003FEA                 xor     eax, eax
.text:0000000000003FEC                 jmp     ___fprintf_chk
.text:0000000000003FEC ; ---------------------------------------------------------------------------
.text:0000000000003FF1                 align 8
.text:0000000000003FF8
.text:0000000000003FF8 loc_3FF8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003FF8                                         ; DATA XREF: .rodata:jpt_3EA4↓o
.text:0000000000003FF8                 mov     r12, [rbx+8]    ; jumptable 0000000000003EA4 case 2
.text:0000000000003FFC                 lea     rsi, aWrittenBySAndS ; "Written by %s and %s.\n"
.text:0000000000004003                 mov     rbx, [rbx]
.text:0000000000004006                 mov     edx, 5          ; category
.text:000000000000400B                 xor     edi, edi        ; domainname
.text:000000000000400D                 call    _dcgettext
.text:0000000000004012                 add     rsp, 28h
.text:0000000000004016                 mov     r8, r12
.text:0000000000004019                 mov     rcx, rbx
.text:000000000000401C                 mov     rdi, rbp
.text:000000000000401F                 mov     rdx, rax
.text:0000000000004022                 mov     esi, 1
.text:0000000000004027                 pop     rbx
.text:0000000000004028                 pop     rbp
.text:0000000000004029                 pop     r12
.text:000000000000402B                 pop     r13
.text:000000000000402D                 pop     r14
.text:000000000000402F                 pop     r15
.text:0000000000004031                 xor     eax, eax
.text:0000000000004033                 jmp     ___fprintf_chk
.text:0000000000004033 ; ---------------------------------------------------------------------------
.text:0000000000004038                 align 20h
.text:0000000000004040
.text:0000000000004040 loc_4040:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004040                                         ; DATA XREF: .rodata:jpt_3EA4↓o
.text:0000000000004040                 mov     r13, [rbx+10h]  ; jumptable 0000000000003EA4 case 3
.text:0000000000004044                 mov     r12, [rbx+8]
.text:0000000000004048                 lea     rsi, aWrittenBySSAnd ; "Written by %s, %s, and %s.\n"
.text:000000000000404F                 mov     rbx, [rbx]
.text:0000000000004052                 mov     edx, 5          ; category
.text:0000000000004057                 xor     edi, edi        ; domainname
.text:0000000000004059                 call    _dcgettext
.text:000000000000405E                 add     rsp, 28h
.text:0000000000004062                 mov     r9, r13
.text:0000000000004065                 mov     r8, r12
.text:0000000000004068                 mov     rcx, rbx
.text:000000000000406B                 mov     rdi, rbp
.text:000000000000406E                 mov     rdx, rax
.text:0000000000004071                 pop     rbx
.text:0000000000004072                 pop     rbp
.text:0000000000004073                 pop     r12
.text:0000000000004075                 pop     r13
.text:0000000000004077                 pop     r14
.text:0000000000004079                 pop     r15
.text:000000000000407B                 mov     esi, 1
.text:0000000000004080                 xor     eax, eax
.text:0000000000004082                 jmp     ___fprintf_chk
.text:0000000000004082 ; ---------------------------------------------------------------------------
.text:0000000000004087                 align 10h
.text:0000000000004090
.text:0000000000004090 loc_4090:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004090                                         ; DATA XREF: .rodata:jpt_3EA4↓o
.text:0000000000004090                 lea     rsi, aWrittenBySSSAn ; jumptable 0000000000003EA4 case 4
.text:0000000000004097                 mov     edx, 5          ; category
.text:000000000000409C                 xor     edi, edi        ; domainname
.text:000000000000409E                 mov     r14, [rbx+18h]
.text:00000000000040A2                 mov     r13, [rbx+10h]
.text:00000000000040A6                 mov     r12, [rbx+8]
.text:00000000000040AA                 mov     rbx, [rbx]
.text:00000000000040AD                 call    _dcgettext
.text:00000000000040B2                 sub     rsp, 8
.text:00000000000040B6
.text:00000000000040B6 loc_40B6:                               ; CODE XREF: version_etc_arn+310↓j
.text:00000000000040B6                 push    r14
.text:00000000000040B8                 mov     rdx, rax
.text:00000000000040BB                 mov     r9, r13
.text:00000000000040BE                 mov     r8, r12
.text:00000000000040C1                 mov     rcx, rbx
.text:00000000000040C4                 mov     rdi, rbp
.text:00000000000040C7                 mov     esi, 1
.text:00000000000040CC                 xor     eax, eax
.text:00000000000040CE                 call    ___fprintf_chk
.text:00000000000040D3                 pop     rax
.text:00000000000040D4                 pop     rdx
.text:00000000000040D5                 add     rsp, 28h
.text:00000000000040D9                 pop     rbx
.text:00000000000040DA                 pop     rbp
.text:00000000000040DB                 pop     r12
.text:00000000000040DD                 pop     r13
.text:00000000000040DF                 pop     r14
.text:00000000000040E1                 pop     r15
.text:00000000000040E3                 retn
.text:00000000000040E3 ; ---------------------------------------------------------------------------
.text:00000000000040E4                 align 8
.text:00000000000040E8
.text:00000000000040E8 loc_40E8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000040E8                                         ; DATA XREF: .rodata:jpt_3EA4↓o
.text:00000000000040E8                 mov     r15, [rbx+20h]  ; jumptable 0000000000003EA4 case 5
.text:00000000000040EC                 lea     rsi, aWrittenBySSSSA ; "Written by %s, %s, %s,\n%s, and %s.\n"
.text:00000000000040F3                 mov     edx, 5          ; category
.text:00000000000040F8                 xor     edi, edi        ; domainname
.text:00000000000040FA                 mov     r14, [rbx+18h]
.text:00000000000040FE                 mov     r13, [rbx+10h]
.text:0000000000004102                 mov     r12, [rbx+8]
.text:0000000000004106                 mov     rbx, [rbx]
.text:0000000000004109                 call    _dcgettext
.text:000000000000410E                 push    r15
.text:0000000000004110                 jmp     short loc_40B6
.text:0000000000004110 ; ---------------------------------------------------------------------------
.text:0000000000004112                 align 8
.text:0000000000004118
.text:0000000000004118 loc_4118:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004118                                         ; DATA XREF: .rodata:jpt_3EA4↓o
.text:0000000000004118                 mov     r8, [rbx+8]     ; jumptable 0000000000003EA4 case 6
.text:000000000000411C                 mov     r12, [rbx+28h]
.text:0000000000004120                 lea     rsi, aWrittenBySSSSS_1 ; "Written by %s, %s, %s,\n%s, %s, and %s."...
.text:0000000000004127                 mov     r15, [rbx+20h]
.text:000000000000412B                 mov     r14, [rbx+18h]
.text:000000000000412F                 mov     edx, 5          ; category
.text:0000000000004134                 mov     r13, [rbx+10h]
.text:0000000000004138                 xor     edi, edi        ; domainname
.text:000000000000413A                 mov     rbx, [rbx]
.text:000000000000413D                 mov     [rsp+58h+var_58], r8
.text:0000000000004141                 call    _dcgettext
.text:0000000000004146                 sub     rsp, 8
.text:000000000000414A                 mov     r9, r13
.text:000000000000414D                 push    r12
.text:000000000000414F                 push    r15
.text:0000000000004151                 push    r14
.text:0000000000004153
.text:0000000000004153 loc_4153:                               ; CODE XREF: version_etc_arn+3C4↓j
.text:0000000000004153                 mov     r8, [rsp+78h+var_58]
.text:0000000000004158                 mov     rcx, rbx
.text:000000000000415B                 mov     rdx, rax
.text:000000000000415E                 mov     rdi, rbp
.text:0000000000004161                 mov     esi, 1
.text:0000000000004166                 xor     eax, eax
.text:0000000000004168                 call    ___fprintf_chk
.text:000000000000416D                 add     rsp, 20h
.text:0000000000004171                 add     rsp, 28h
.text:0000000000004175                 pop     rbx
.text:0000000000004176                 pop     rbp
.text:0000000000004177                 pop     r12
.text:0000000000004179                 pop     r13
.text:000000000000417B                 pop     r14
.text:000000000000417D                 pop     r15
.text:000000000000417F                 retn
.text:0000000000004180 ; ---------------------------------------------------------------------------
.text:0000000000004180
.text:0000000000004180 loc_4180:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004180                                         ; DATA XREF: .rodata:jpt_3EA4↓o
.text:0000000000004180                 mov     r9, [rbx+10h]   ; jumptable 0000000000003EA4 case 7
.text:0000000000004184                 mov     r13, [rbx+30h]
.text:0000000000004188                 lea     rsi, aWrittenBySSSSS_2 ; "Written by %s, %s, %s,\n%s, %s, %s, and"...
.text:000000000000418F                 mov     r12, [rbx+28h]
.text:0000000000004193                 mov     r15, [rbx+20h]
.text:0000000000004197                 mov     edx, 5          ; category
.text:000000000000419C                 mov     r14, [rbx+18h]
.text:00000000000041A0                 mov     r8, [rbx+8]
.text:00000000000041A4                 xor     edi, edi        ; domainname
.text:00000000000041A6                 mov     [rsp+58h+var_50], r9
.text:00000000000041AB                 mov     rbx, [rbx]
.text:00000000000041AE                 mov     [rsp+58h+var_58], r8
.text:00000000000041B2                 call    _dcgettext
.text:00000000000041B7                 push    r13
.text:00000000000041B9                 push    r12
.text:00000000000041BB                 push    r15
.text:00000000000041BD                 push    r14
.text:00000000000041BF                 mov     r9, [rsp+78h+var_50]
.text:00000000000041C4                 jmp     short loc_4153
.text:00000000000041C4 ; ---------------------------------------------------------------------------
.text:00000000000041C6                 align 10h
.text:00000000000041D0
.text:00000000000041D0 def_3EA4:                               ; CODE XREF: version_etc_arn+90↑j
.text:00000000000041D0                 mov     r10, [rbx+40h]  ; jumptable 0000000000003EA4 default case
.text:00000000000041D4                 mov     r9, [rbx+38h]
.text:00000000000041D8                 mov     edx, 5
.text:00000000000041DD                 mov     rax, [rbx+10h]
.text:00000000000041E1                 mov     r8, [rbx+8]
.text:00000000000041E5                 lea     rsi, aWrittenBySSSSS_3 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:00000000000041EC                 mov     r13, [rbx+30h]
.text:00000000000041F0                 mov     r12, [rbx+28h]
.text:00000000000041F4                 mov     r15, [rbx+20h]
.text:00000000000041F8                 mov     r14, [rbx+18h]
.text:00000000000041FC                 mov     [rsp+58h+var_40], r10
.text:0000000000004201                 mov     [rsp+58h+var_48], r9
.text:0000000000004206                 mov     [rsp+58h+var_58], rax
.text:000000000000420A                 mov     [rsp+58h+var_50], r8
.text:000000000000420F                 mov     rbx, [rbx]
.text:0000000000004212                 jmp     loc_3FA2
.text:0000000000004212 ; } // starts at 3E00
.text:0000000000004212 version_etc_arn endp
.text:0000000000004212
.text:0000000000004212 ; ---------------------------------------------------------------------------
.text:0000000000004217                 align 20h
.text:0000000000004220
.text:0000000000004220 ; =============== S U B R O U T I N E =======================================
.text:0000000000004220
.text:0000000000004220 ; Attributes: info_from_lumina
.text:0000000000004220
.text:0000000000004220 ; void __fastcall version_etc_ar(FILE *stream, const char *command_name, const char *package, const char *version, const char *const *authors)
.text:0000000000004220                 public version_etc_ar
.text:0000000000004220 version_etc_ar  proc near
.text:0000000000004220 ; __unwind {
.text:0000000000004220                 xor     r9d, r9d
.text:0000000000004223                 cmp     qword ptr [r8], 0
.text:0000000000004227                 jz      short loc_423B
.text:0000000000004229                 nop     dword ptr [rax+00000000h]
.text:0000000000004230
.text:0000000000004230 loc_4230:                               ; CODE XREF: version_etc_ar+19↓j
.text:0000000000004230                 add     r9, 1
.text:0000000000004234                 cmp     qword ptr [r8+r9*8], 0
.text:0000000000004239                 jnz     short loc_4230
.text:000000000000423B
.text:000000000000423B loc_423B:                               ; CODE XREF: version_etc_ar+7↑j
.text:000000000000423B                 jmp     version_etc_arn
.text:000000000000423B ; } // starts at 4220
.text:000000000000423B version_etc_ar  endp
.text:000000000000423B
.text:0000000000004240
.text:0000000000004240 ; =============== S U B R O U T I N E =======================================
.text:0000000000004240
.text:0000000000004240 ; Attributes: info_from_lumina
.text:0000000000004240
.text:0000000000004240 ; void __fastcall version_etc_va(FILE *stream, const char *command_name, const char *package, const char *version, __va_list_tag *authors)
.text:0000000000004240                 public version_etc_va
.text:0000000000004240 version_etc_va  proc near
.text:0000000000004240
.text:0000000000004240 authtab         = qword ptr -68h
.text:0000000000004240 var_10          = qword ptr -10h
.text:0000000000004240
.text:0000000000004240 ; __unwind {
.text:0000000000004240                 sub     rsp, 68h
.text:0000000000004244                 mov     r10, r8
.text:0000000000004247                 xor     r9d, r9d
.text:000000000000424A                 mov     rax, fs:28h
.text:0000000000004253                 mov     [rsp+68h+var_10], rax
.text:0000000000004258                 xor     eax, eax
.text:000000000000425A                 mov     r8, rsp
.text:000000000000425D                 nop     dword ptr [rax]
.text:0000000000004260
.text:0000000000004260 loc_4260:                               ; CODE XREF: version_etc_va+49↓j
.text:0000000000004260                 mov     eax, [r10]
.text:0000000000004263                 cmp     eax, 2Fh ; '/'
.text:0000000000004266                 ja      short loc_42AA
.text:0000000000004268                 mov     r11d, eax
.text:000000000000426B                 add     r11, [r10+10h]
.text:000000000000426F                 add     eax, 8
.text:0000000000004272                 mov     [r10], eax
.text:0000000000004275
.text:0000000000004275 loc_4275:                               ; CODE XREF: version_etc_va+76↓j
.text:0000000000004275                 mov     rax, [r11]
.text:0000000000004278                 test    rax, rax
.text:000000000000427B                 mov     [r8+r9*8], rax
.text:000000000000427F                 jz      short loc_428B
.text:0000000000004281                 add     r9, 1
.text:0000000000004285                 cmp     r9, 0Ah
.text:0000000000004289                 jnz     short loc_4260
.text:000000000000428B
.text:000000000000428B loc_428B:                               ; CODE XREF: version_etc_va+3F↑j
.text:000000000000428B                 call    version_etc_arn
.text:0000000000004290                 mov     rax, [rsp+68h+var_10]
.text:0000000000004295                 xor     rax, fs:28h
.text:000000000000429E                 jnz     short loc_42A5
.text:00000000000042A0                 add     rsp, 68h
.text:00000000000042A4                 retn
.text:00000000000042A5 ; ---------------------------------------------------------------------------
.text:00000000000042A5
.text:00000000000042A5 loc_42A5:                               ; CODE XREF: version_etc_va+5E↑j
.text:00000000000042A5                 call    ___stack_chk_fail
.text:00000000000042AA ; ---------------------------------------------------------------------------
.text:00000000000042AA
.text:00000000000042AA loc_42AA:                               ; CODE XREF: version_etc_va+26↑j
.text:00000000000042AA                 mov     r11, [r10+8]
.text:00000000000042AE                 lea     rax, [r11+8]
.text:00000000000042B2                 mov     [r10+8], rax
.text:00000000000042B6                 jmp     short loc_4275
.text:00000000000042B6 ; } // starts at 4240
.text:00000000000042B6 version_etc_va  endp
.text:00000000000042B6
.text:00000000000042B6 ; ---------------------------------------------------------------------------
.text:00000000000042B8                 align 20h
.text:00000000000042C0
.text:00000000000042C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000042C0
.text:00000000000042C0 ; Attributes: info_from_lumina
.text:00000000000042C0
.text:00000000000042C0 ; void version_etc(FILE *stream, const char *command_name, const char *package, const char *version, ...)
.text:00000000000042C0                 public version_etc
.text:00000000000042C0 version_etc     proc near               ; CODE XREF: main+113↑p
.text:00000000000042C0
.text:00000000000042C0 var_C0          = dword ptr -0C0h
.text:00000000000042C0 var_B8          = qword ptr -0B8h
.text:00000000000042C0 var_B0          = qword ptr -0B0h
.text:00000000000042C0 var_A8          = byte ptr -0A8h
.text:00000000000042C0 var_50          = qword ptr -50h
.text:00000000000042C0 var_48          = byte ptr -48h
.text:00000000000042C0 var_28          = qword ptr -28h
.text:00000000000042C0 var_20          = qword ptr -20h
.text:00000000000042C0 arg_0           = byte ptr  8
.text:00000000000042C0
.text:00000000000042C0 ; __unwind {
.text:00000000000042C0                 push    rbp
.text:00000000000042C1                 push    rbx
.text:00000000000042C2                 mov     r10d, 20h ; ' '
.text:00000000000042C8                 xor     r11d, r11d
.text:00000000000042CB                 sub     rsp, 0B8h
.text:00000000000042D2                 mov     rax, fs:28h
.text:00000000000042DB                 mov     [rsp+0C8h+var_50], rax
.text:00000000000042E0                 xor     eax, eax
.text:00000000000042E2                 lea     rax, [rsp+0C8h+arg_0]
.text:00000000000042EA                 mov     [rsp+0C8h+var_28], r8
.text:00000000000042F2                 lea     rbx, [rsp+0C8h+arg_0]
.text:00000000000042FA                 lea     r8, [rsp+0C8h+var_A8]
.text:00000000000042FF                 mov     [rsp+0C8h+var_20], r9
.text:0000000000004307                 mov     [rsp+0C8h+var_C0], 20h ; ' '
.text:000000000000430F                 mov     [rsp+0C8h+var_B8], rax
.text:0000000000004314                 lea     rax, [rsp+0C8h+var_48]
.text:000000000000431C                 xor     r9d, r9d
.text:000000000000431F                 mov     [rsp+0C8h+var_B0], rax
.text:0000000000004324                 mov     rbp, rax
.text:0000000000004327                 nop     word ptr [rax+rax+00000000h]
.text:0000000000004330
.text:0000000000004330 loc_4330:                               ; CODE XREF: version_etc+9A↓j
.text:0000000000004330                 cmp     r10d, 2Fh ; '/'
.text:0000000000004334                 ja      short loc_438C
.text:0000000000004336                 mov     eax, r10d
.text:0000000000004339                 mov     r11d, 1
.text:000000000000433F                 add     r10d, 8
.text:0000000000004343                 add     rax, rbp
.text:0000000000004346
.text:0000000000004346 loc_4346:                               ; CODE XREF: version_etc+D3↓j
.text:0000000000004346                 mov     rax, [rax]
.text:0000000000004349                 test    rax, rax
.text:000000000000434C                 mov     [r8+r9*8], rax
.text:0000000000004350                 jz      short loc_435C
.text:0000000000004352                 add     r9, 1
.text:0000000000004356                 cmp     r9, 0Ah
.text:000000000000435A                 jnz     short loc_4330
.text:000000000000435C
.text:000000000000435C loc_435C:                               ; CODE XREF: version_etc+90↑j
.text:000000000000435C                 test    r11b, r11b
.text:000000000000435F                 jnz     short loc_4385
.text:0000000000004361
.text:0000000000004361 loc_4361:                               ; CODE XREF: version_etc+CA↓j
.text:0000000000004361                 call    version_etc_arn
.text:0000000000004366                 mov     rax, [rsp+0C8h+var_50]
.text:000000000000436B                 xor     rax, fs:28h
.text:0000000000004374                 jnz     short loc_4380
.text:0000000000004376                 add     rsp, 0B8h
.text:000000000000437D                 pop     rbx
.text:000000000000437E                 pop     rbp
.text:000000000000437F                 retn
.text:0000000000004380 ; ---------------------------------------------------------------------------
.text:0000000000004380
.text:0000000000004380 loc_4380:                               ; CODE XREF: version_etc+B4↑j
.text:0000000000004380                 call    ___stack_chk_fail
.text:0000000000004385 ; ---------------------------------------------------------------------------
.text:0000000000004385
.text:0000000000004385 loc_4385:                               ; CODE XREF: version_etc+9F↑j
.text:0000000000004385                 mov     [rsp+0C8h+var_C0], r10d
.text:000000000000438A                 jmp     short loc_4361
.text:000000000000438C ; ---------------------------------------------------------------------------
.text:000000000000438C
.text:000000000000438C loc_438C:                               ; CODE XREF: version_etc+74↑j
.text:000000000000438C                 mov     rax, rbx
.text:000000000000438F                 add     rbx, 8
.text:0000000000004393                 jmp     short loc_4346
.text:0000000000004393 ; } // starts at 42C0
.text:0000000000004393 version_etc     endp
.text:0000000000004393
.text:0000000000004393 ; ---------------------------------------------------------------------------
.text:0000000000004395                 align 20h
.text:00000000000043A0
.text:00000000000043A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000043A0
.text:00000000000043A0 ; Attributes: info_from_lumina
.text:00000000000043A0
.text:00000000000043A0 ; void __cdecl emit_bug_reporting_address()
.text:00000000000043A0                 public emit_bug_reporting_address
.text:00000000000043A0 emit_bug_reporting_address proc near
.text:00000000000043A0 ; __unwind {
.text:00000000000043A0                 push    rbx
.text:00000000000043A1                 lea     rsi, aReportBugsToS ; "\nReport bugs to: %s\n"
.text:00000000000043A8                 mov     edx, 5          ; category
.text:00000000000043AD                 xor     edi, edi        ; domainname
.text:00000000000043AF                 call    _dcgettext
.text:00000000000043B4                 lea     rdx, aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00000000000043BB                 mov     rsi, rax
.text:00000000000043BE                 mov     edi, 1
.text:00000000000043C3                 xor     eax, eax
.text:00000000000043C5                 call    ___printf_chk
.text:00000000000043CA                 lea     rsi, aSHomePageS ; "%s home page: <%s>\n"
.text:00000000000043D1                 mov     edx, 5          ; category
.text:00000000000043D6                 xor     edi, edi        ; domainname
.text:00000000000043D8                 call    _dcgettext
.text:00000000000043DD                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000043E4                 lea     rdx, unk_5017
.text:00000000000043EB                 mov     rsi, rax
.text:00000000000043EE                 mov     edi, 1
.text:00000000000043F3                 xor     eax, eax
.text:00000000000043F5                 call    ___printf_chk
.text:00000000000043FA                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004401                 lea     rsi, aGeneralHelpUsi ; "General help using GNU software: <https"...
.text:0000000000004408                 xor     edi, edi        ; domainname
.text:000000000000440A                 mov     edx, 5          ; category
.text:000000000000440F                 call    _dcgettext
.text:0000000000004414                 mov     rsi, rbx        ; stream
.text:0000000000004417                 mov     rdi, rax        ; s
.text:000000000000441A                 pop     rbx
.text:000000000000441B                 jmp     _fputs_unlocked
.text:000000000000441B ; } // starts at 43A0
.text:000000000000441B emit_bug_reporting_address endp
.text:000000000000441B
.text:0000000000004420
.text:0000000000004420 ; =============== S U B R O U T I N E =======================================
.text:0000000000004420
.text:0000000000004420
.text:0000000000004420                 public xmalloc
.text:0000000000004420 xmalloc         proc near               ; CODE XREF: quotearg_n_options+127↑p
.text:0000000000004420                                         ; quotearg_alloc_mem+81↑p ...
.text:0000000000004420 ; __unwind {
.text:0000000000004420                 push    rbx
.text:0000000000004421                 mov     rbx, rdi
.text:0000000000004424                 call    _malloc
.text:0000000000004429                 test    rax, rax
.text:000000000000442C                 jnz     short loc_4433
.text:000000000000442E                 test    rbx, rbx
.text:0000000000004431                 jnz     short loc_4435
.text:0000000000004433
.text:0000000000004433 loc_4433:                               ; CODE XREF: xmalloc+C↑j
.text:0000000000004433                 pop     rbx
.text:0000000000004434                 retn
.text:0000000000004435 ; ---------------------------------------------------------------------------
.text:0000000000004435
.text:0000000000004435 loc_4435:                               ; CODE XREF: xmalloc+11↑j
.text:0000000000004435                 call    xalloc_die
.text:0000000000004435 ; } // starts at 4420
.text:0000000000004435 xmalloc         endp
.text:0000000000004435
.text:0000000000004435 ; ---------------------------------------------------------------------------
.text:000000000000443A                 align 20h
.text:0000000000004440
.text:0000000000004440 ; =============== S U B R O U T I N E =======================================
.text:0000000000004440
.text:0000000000004440 ; Attributes: info_from_lumina
.text:0000000000004440
.text:0000000000004440 ; void *__fastcall xnmalloc(size_t n, size_t s)
.text:0000000000004440                 public xnmalloc
.text:0000000000004440 xnmalloc        proc near
.text:0000000000004440 ; __unwind {
.text:0000000000004440                 mov     rax, rdi
.text:0000000000004443                 mul     rsi
.text:0000000000004446                 mov     rdi, rax
.text:0000000000004449                 seto    al
.text:000000000000444C                 test    rdi, rdi
.text:000000000000444F                 js      short loc_445B
.text:0000000000004451                 movzx   eax, al
.text:0000000000004454                 test    rax, rax
.text:0000000000004457                 jnz     short loc_445B
.text:0000000000004459                 jmp     short xmalloc
.text:000000000000445B ; ---------------------------------------------------------------------------
.text:000000000000445B
.text:000000000000445B loc_445B:                               ; CODE XREF: xnmalloc+F↑j
.text:000000000000445B                                         ; xnmalloc+17↑j
.text:000000000000445B                 sub     rsp, 8
.text:000000000000445F                 call    xalloc_die
.text:000000000000445F ; } // starts at 4440
.text:000000000000445F xnmalloc        endp
.text:000000000000445F
.text:000000000000445F ; ---------------------------------------------------------------------------
.text:0000000000004464                 align 10h
.text:0000000000004470
.text:0000000000004470 ; =============== S U B R O U T I N E =======================================
.text:0000000000004470
.text:0000000000004470
.text:0000000000004470                 public xcharalloc
.text:0000000000004470 xcharalloc      proc near
.text:0000000000004470 ; __unwind {
.text:0000000000004470                 jmp     short xmalloc
.text:0000000000004470 ; } // starts at 4470
.text:0000000000004470 xcharalloc      endp
.text:0000000000004470
.text:0000000000004470 ; ---------------------------------------------------------------------------
.text:0000000000004472                 align 20h
.text:0000000000004480
.text:0000000000004480 ; =============== S U B R O U T I N E =======================================
.text:0000000000004480
.text:0000000000004480 ; Attributes: info_from_lumina
.text:0000000000004480
.text:0000000000004480 ; void *__fastcall xrealloc(void *p, size_t n)
.text:0000000000004480                 public xrealloc
.text:0000000000004480 xrealloc        proc near               ; CODE XREF: quotearg_n_options+6E↑p
.text:0000000000004480                                         ; quotearg_n_options+182↑p ...
.text:0000000000004480 ; __unwind {
.text:0000000000004480                 test    rsi, rsi
.text:0000000000004483                 push    rbx
.text:0000000000004484                 mov     rbx, rsi
.text:0000000000004487                 jnz     short loc_448E
.text:0000000000004489                 test    rdi, rdi
.text:000000000000448C                 jnz     short loc_44A8
.text:000000000000448E
.text:000000000000448E loc_448E:                               ; CODE XREF: xrealloc+7↑j
.text:000000000000448E                 mov     rsi, rbx        ; size
.text:0000000000004491                 call    _realloc
.text:0000000000004496                 test    rax, rax
.text:0000000000004499                 jnz     short loc_44A0
.text:000000000000449B                 test    rbx, rbx
.text:000000000000449E                 jnz     short loc_44B1
.text:00000000000044A0
.text:00000000000044A0 loc_44A0:                               ; CODE XREF: xrealloc+19↑j
.text:00000000000044A0                 pop     rbx
.text:00000000000044A1                 retn
.text:00000000000044A1 ; ---------------------------------------------------------------------------
.text:00000000000044A2                 align 8
.text:00000000000044A8
.text:00000000000044A8 loc_44A8:                               ; CODE XREF: xrealloc+C↑j
.text:00000000000044A8                 call    _free
.text:00000000000044AD                 xor     eax, eax
.text:00000000000044AF                 pop     rbx
.text:00000000000044B0                 retn
.text:00000000000044B1 ; ---------------------------------------------------------------------------
.text:00000000000044B1
.text:00000000000044B1 loc_44B1:                               ; CODE XREF: xrealloc+1E↑j
.text:00000000000044B1                 call    xalloc_die
.text:00000000000044B1 ; } // starts at 4480
.text:00000000000044B1 xrealloc        endp
.text:00000000000044B1
.text:00000000000044B1 ; ---------------------------------------------------------------------------
.text:00000000000044B6                 align 20h
.text:00000000000044C0
.text:00000000000044C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000044C0
.text:00000000000044C0 ; Attributes: info_from_lumina
.text:00000000000044C0
.text:00000000000044C0 ; void *__fastcall xnrealloc(void *p, size_t n, size_t s)
.text:00000000000044C0                 public xnrealloc
.text:00000000000044C0 xnrealloc       proc near
.text:00000000000044C0 ; __unwind {
.text:00000000000044C0                 mov     rax, rsi
.text:00000000000044C3                 mul     rdx
.text:00000000000044C6                 mov     rsi, rax
.text:00000000000044C9                 seto    al
.text:00000000000044CC                 test    rsi, rsi
.text:00000000000044CF                 js      short loc_44DB
.text:00000000000044D1                 movzx   eax, al
.text:00000000000044D4                 test    rax, rax
.text:00000000000044D7                 jnz     short loc_44DB
.text:00000000000044D9                 jmp     short xrealloc
.text:00000000000044DB ; ---------------------------------------------------------------------------
.text:00000000000044DB
.text:00000000000044DB loc_44DB:                               ; CODE XREF: xnrealloc+F↑j
.text:00000000000044DB                                         ; xnrealloc+17↑j
.text:00000000000044DB                 sub     rsp, 8
.text:00000000000044DF                 call    xalloc_die
.text:00000000000044DF ; } // starts at 44C0
.text:00000000000044DF xnrealloc       endp
.text:00000000000044DF
.text:00000000000044DF ; ---------------------------------------------------------------------------
.text:00000000000044E4                 align 10h
.text:00000000000044F0
.text:00000000000044F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000044F0
.text:00000000000044F0 ; Attributes: info_from_lumina
.text:00000000000044F0
.text:00000000000044F0 ; void *__fastcall x2nrealloc(void *p, size_t *pn, size_t s)
.text:00000000000044F0                 public x2nrealloc
.text:00000000000044F0 x2nrealloc      proc near
.text:00000000000044F0 ; __unwind {
.text:00000000000044F0                 test    rdi, rdi
.text:00000000000044F3                 mov     r9, rdx
.text:00000000000044F6                 mov     rcx, [rsi]
.text:00000000000044F9                 jz      short loc_4530
.text:00000000000044FB                 xor     edx, edx
.text:00000000000044FD                 mov     rax, 5555555555555554h
.text:0000000000004507                 div     r9
.text:000000000000450A                 cmp     rax, rcx
.text:000000000000450D                 jbe     short loc_454B
.text:000000000000450F                 mov     rax, rcx
.text:0000000000004512                 shr     rax, 1
.text:0000000000004515                 lea     rcx, [rax+rcx+1]
.text:000000000000451A
.text:000000000000451A loc_451A:                               ; CODE XREF: x2nrealloc+59↓j
.text:000000000000451A                 mov     [rsi], rcx
.text:000000000000451D                 imul    rcx, r9
.text:0000000000004521                 mov     rsi, rcx
.text:0000000000004524                 jmp     xrealloc
.text:0000000000004524 ; ---------------------------------------------------------------------------
.text:0000000000004529                 align 10h
.text:0000000000004530
.text:0000000000004530 loc_4530:                               ; CODE XREF: x2nrealloc+9↑j
.text:0000000000004530                 test    rcx, rcx
.text:0000000000004533                 jz      short loc_4558
.text:0000000000004535
.text:0000000000004535 loc_4535:                               ; CODE XREF: x2nrealloc+80↓j
.text:0000000000004535                 mov     rax, rcx
.text:0000000000004538                 mul     r9
.text:000000000000453B                 seto    dl
.text:000000000000453E                 test    rax, rax
.text:0000000000004541                 movzx   edx, dl
.text:0000000000004544                 js      short loc_454B
.text:0000000000004546                 test    rdx, rdx
.text:0000000000004549                 jz      short loc_451A
.text:000000000000454B
.text:000000000000454B loc_454B:                               ; CODE XREF: x2nrealloc+1D↑j
.text:000000000000454B                                         ; x2nrealloc+54↑j
.text:000000000000454B                 sub     rsp, 8
.text:000000000000454F                 call    xalloc_die
.text:000000000000454F ; ---------------------------------------------------------------------------
.text:0000000000004554                 align 8
.text:0000000000004558
.text:0000000000004558 loc_4558:                               ; CODE XREF: x2nrealloc+43↑j
.text:0000000000004558                 xor     edx, edx
.text:000000000000455A                 mov     eax, 80h
.text:000000000000455F                 xor     r8d, r8d
.text:0000000000004562                 div     r9
.text:0000000000004565                 test    rax, rax
.text:0000000000004568                 setz    r8b
.text:000000000000456C                 lea     rcx, [r8+rax]
.text:0000000000004570                 jmp     short loc_4535
.text:0000000000004570 ; } // starts at 44F0
.text:0000000000004570 x2nrealloc      endp
.text:0000000000004570
.text:0000000000004570 ; ---------------------------------------------------------------------------
.text:0000000000004572                 align 20h
.text:0000000000004580
.text:0000000000004580 ; =============== S U B R O U T I N E =======================================
.text:0000000000004580
.text:0000000000004580 ; Attributes: info_from_lumina
.text:0000000000004580
.text:0000000000004580 ; void *__fastcall x2realloc(void *p, size_t *pn)
.text:0000000000004580                 public x2realloc
.text:0000000000004580 x2realloc       proc near
.text:0000000000004580 ; __unwind {
.text:0000000000004580                 test    rdi, rdi
.text:0000000000004583                 mov     rax, [rsi]
.text:0000000000004586                 jz      short loc_45B0
.text:0000000000004588                 mov     rdx, 5555555555555553h
.text:0000000000004592                 cmp     rax, rdx
.text:0000000000004595                 ja      short loc_45C1
.text:0000000000004597                 mov     rdx, rax
.text:000000000000459A                 shr     rdx, 1
.text:000000000000459D                 lea     rax, [rdx+rax+1]
.text:00000000000045A2
.text:00000000000045A2 loc_45A2:                               ; CODE XREF: x2realloc+3F↓j
.text:00000000000045A2                 mov     [rsi], rax
.text:00000000000045A5                 mov     rsi, rax
.text:00000000000045A8                 jmp     xrealloc
.text:00000000000045A8 ; ---------------------------------------------------------------------------
.text:00000000000045AD                 align 10h
.text:00000000000045B0
.text:00000000000045B0 loc_45B0:                               ; CODE XREF: x2realloc+6↑j
.text:00000000000045B0                 test    rax, rax
.text:00000000000045B3                 mov     edx, 80h
.text:00000000000045B8                 cmovz   rax, rdx
.text:00000000000045BC                 test    rax, rax
.text:00000000000045BF                 jns     short loc_45A2
.text:00000000000045C1
.text:00000000000045C1 loc_45C1:                               ; CODE XREF: x2realloc+15↑j
.text:00000000000045C1                 sub     rsp, 8
.text:00000000000045C5                 call    xalloc_die
.text:00000000000045C5 ; } // starts at 4580
.text:00000000000045C5 x2realloc       endp
.text:00000000000045C5
.text:00000000000045C5 ; ---------------------------------------------------------------------------
.text:00000000000045CA                 align 10h
.text:00000000000045D0
.text:00000000000045D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000045D0
.text:00000000000045D0
.text:00000000000045D0 ; __int64 __fastcall xzalloc(size_t n)
.text:00000000000045D0                 public xzalloc
.text:00000000000045D0 xzalloc         proc near
.text:00000000000045D0 ; __unwind {
.text:00000000000045D0                 push    rbx
.text:00000000000045D1                 mov     rbx, rdi
.text:00000000000045D4                 call    xmalloc
.text:00000000000045D9                 mov     rdx, rbx        ; n
.text:00000000000045DC                 xor     esi, esi        ; c
.text:00000000000045DE                 mov     rdi, rax        ; s
.text:00000000000045E1                 pop     rbx
.text:00000000000045E2                 jmp     _memset
.text:00000000000045E2 ; } // starts at 45D0
.text:00000000000045E2 xzalloc         endp
.text:00000000000045E2
.text:00000000000045E2 ; ---------------------------------------------------------------------------
.text:00000000000045E7                 align 10h
.text:00000000000045F0
.text:00000000000045F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000045F0
.text:00000000000045F0 ; Attributes: info_from_lumina
.text:00000000000045F0
.text:00000000000045F0 ; void *__fastcall xcalloc(size_t n, size_t s)
.text:00000000000045F0                 public xcalloc
.text:00000000000045F0 xcalloc         proc near
.text:00000000000045F0 ; __unwind {
.text:00000000000045F0                 mov     rax, rdi
.text:00000000000045F3                 sub     rsp, 8
.text:00000000000045F7                 mul     rsi
.text:00000000000045FA                 seto    dl
.text:00000000000045FD                 test    rax, rax
.text:0000000000004600                 js      short loc_4619
.text:0000000000004602                 movzx   edx, dl
.text:0000000000004605                 test    rdx, rdx
.text:0000000000004608                 jnz     short loc_4619
.text:000000000000460A                 call    _calloc
.text:000000000000460F                 test    rax, rax
.text:0000000000004612                 jz      short loc_4619
.text:0000000000004614                 add     rsp, 8
.text:0000000000004618                 retn
.text:0000000000004619 ; ---------------------------------------------------------------------------
.text:0000000000004619
.text:0000000000004619 loc_4619:                               ; CODE XREF: xcalloc+10↑j
.text:0000000000004619                                         ; xcalloc+18↑j ...
.text:0000000000004619                 call    xalloc_die
.text:0000000000004619 ; } // starts at 45F0
.text:0000000000004619 xcalloc         endp
.text:0000000000004619
.text:0000000000004619 ; ---------------------------------------------------------------------------
.text:000000000000461E                 align 20h
.text:0000000000004620
.text:0000000000004620 ; =============== S U B R O U T I N E =======================================
.text:0000000000004620
.text:0000000000004620 ; Attributes: info_from_lumina
.text:0000000000004620
.text:0000000000004620 ; void *__fastcall xmemdup(const void *p, size_t s)
.text:0000000000004620                 public xmemdup
.text:0000000000004620 xmemdup         proc near               ; CODE XREF: clone_quoting_options+28↑p
.text:0000000000004620                                         ; xstrdup+11↓j
.text:0000000000004620 ; __unwind {
.text:0000000000004620                 push    rbp
.text:0000000000004621                 push    rbx
.text:0000000000004622                 mov     rbp, rdi
.text:0000000000004625                 mov     rdi, rsi
.text:0000000000004628                 mov     rbx, rsi
.text:000000000000462B                 sub     rsp, 8
.text:000000000000462F                 call    xmalloc
.text:0000000000004634                 add     rsp, 8
.text:0000000000004638                 mov     rdx, rbx        ; n
.text:000000000000463B                 mov     rsi, rbp        ; src
.text:000000000000463E                 pop     rbx
.text:000000000000463F                 pop     rbp
.text:0000000000004640                 mov     rdi, rax        ; dest
.text:0000000000004643                 jmp     _memcpy
.text:0000000000004643 ; } // starts at 4620
.text:0000000000004643 xmemdup         endp
.text:0000000000004643
.text:0000000000004643 ; ---------------------------------------------------------------------------
.text:0000000000004648                 align 10h
.text:0000000000004650
.text:0000000000004650 ; =============== S U B R O U T I N E =======================================
.text:0000000000004650
.text:0000000000004650
.text:0000000000004650 ; __int64 __fastcall xstrdup(void *src)
.text:0000000000004650                 public xstrdup
.text:0000000000004650 xstrdup         proc near
.text:0000000000004650 ; __unwind {
.text:0000000000004650                 push    rbx
.text:0000000000004651                 mov     rbx, rdi
.text:0000000000004654                 call    _strlen
.text:0000000000004659                 mov     rdi, rbx        ; src
.text:000000000000465C                 lea     rsi, [rax+1]    ; n
.text:0000000000004660                 pop     rbx
.text:0000000000004661                 jmp     short xmemdup
.text:0000000000004661 ; } // starts at 4650
.text:0000000000004661 xstrdup         endp
.text:0000000000004661
.text:0000000000004661 ; ---------------------------------------------------------------------------
.text:0000000000004663                 align 10h
.text:0000000000004670
.text:0000000000004670 ; =============== S U B R O U T I N E =======================================
.text:0000000000004670
.text:0000000000004670 ; Attributes: noreturn info_from_lumina
.text:0000000000004670
.text:0000000000004670 ; void __cdecl xalloc_die()
.text:0000000000004670                 public xalloc_die
.text:0000000000004670 xalloc_die      proc near               ; CODE XREF: quotearg_n_options:loc_3646↑p
.text:0000000000004670                                         ; xmalloc:loc_4435↑p ...
.text:0000000000004670 ; __unwind {
.text:0000000000004670                 lea     rsi, aMemoryExhauste ; "memory exhausted"
.text:0000000000004677                 sub     rsp, 8
.text:000000000000467B                 mov     edx, 5          ; category
.text:0000000000004680                 xor     edi, edi        ; domainname
.text:0000000000004682                 call    _dcgettext
.text:0000000000004687                 mov     edi, cs:exit_failure ; status
.text:000000000000468D                 lea     rdx, format+4   ; format
.text:0000000000004694                 mov     rcx, rax
.text:0000000000004697                 xor     esi, esi        ; errnum
.text:0000000000004699                 xor     eax, eax
.text:000000000000469B                 call    _error
.text:00000000000046A0                 call    _abort
.text:00000000000046A0 ; } // starts at 4670
.text:00000000000046A0 xalloc_die      endp
.text:00000000000046A0
.text:00000000000046A0 ; ---------------------------------------------------------------------------
.text:00000000000046A5                 align 10h
.text:00000000000046B0
.text:00000000000046B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000046B0
.text:00000000000046B0 ; Attributes: info_from_lumina
.text:00000000000046B0
.text:00000000000046B0 ; uintmax_t __fastcall xnumtoumax(const char *n_str, int base, uintmax_t min, uintmax_t max, const char *suffixes, const char *err, int err_exit)
.text:00000000000046B0                 public xnumtoumax
.text:00000000000046B0 xnumtoumax      proc near               ; CODE XREF: xdectoumax+17↓p
.text:00000000000046B0
.text:00000000000046B0 var_48          = qword ptr -48h
.text:00000000000046B0 var_40          = qword ptr -40h
.text:00000000000046B0 arg_0           = dword ptr  8
.text:00000000000046B0
.text:00000000000046B0 ; __unwind {
.text:00000000000046B0                 push    r15
.text:00000000000046B2                 push    r14
.text:00000000000046B4                 mov     r15, rcx
.text:00000000000046B7                 push    r13
.text:00000000000046B9                 push    r12
.text:00000000000046BB                 mov     r14, rdx
.text:00000000000046BE                 push    rbp
.text:00000000000046BF                 push    rbx
.text:00000000000046C0                 mov     edx, esi
.text:00000000000046C2                 xor     esi, esi
.text:00000000000046C4                 mov     r12, rdi
.text:00000000000046C7                 mov     r13, r9
.text:00000000000046CA                 sub     rsp, 18h
.text:00000000000046CE                 mov     rcx, rsp
.text:00000000000046D1                 mov     ebx, [rsp+48h+arg_0]
.text:00000000000046D5                 mov     rax, fs:28h
.text:00000000000046DE                 mov     [rsp+48h+var_40], rax
.text:00000000000046E3                 xor     eax, eax
.text:00000000000046E5                 call    xstrtoumax
.text:00000000000046EA                 test    eax, eax
.text:00000000000046EC                 jnz     loc_4780
.text:00000000000046F2                 mov     rbp, [rsp+48h+var_48]
.text:00000000000046F6                 cmp     rbp, r14
.text:00000000000046F9                 jb      short loc_4700
.text:00000000000046FB                 cmp     rbp, r15
.text:00000000000046FE                 jbe     short loc_4754
.text:0000000000004700
.text:0000000000004700 loc_4700:                               ; CODE XREF: xnumtoumax+49↑j
.text:0000000000004700                 call    ___errno_location
.text:0000000000004705                 cmp     rbp, 40000000h
.text:000000000000470C                 mov     r14, rax
.text:000000000000470F                 sbb     eax, eax
.text:0000000000004711                 and     eax, 0FFFFFFD7h
.text:0000000000004714                 add     eax, 4Bh ; 'K'
.text:0000000000004717                 mov     [r14], eax
.text:000000000000471A
.text:000000000000471A loc_471A:                               ; CODE XREF: xnumtoumax+E2↓j
.text:000000000000471A                                         ; xnumtoumax+EA↓j ...
.text:000000000000471A                 mov     rdi, r12
.text:000000000000471D                 call    quote
.text:0000000000004722                 mov     esi, [r14]
.text:0000000000004725                 mov     r8, rax
.text:0000000000004728                 mov     eax, 0
.text:000000000000472D                 lea     rdx, format     ; "%s: %s"
.text:0000000000004734                 mov     rcx, r13
.text:0000000000004737                 cmp     esi, 16h
.text:000000000000473A                 cmovz   esi, eax        ; errnum
.text:000000000000473D                 test    ebx, ebx
.text:000000000000473F                 mov     eax, 1
.text:0000000000004744                 cmovz   ebx, eax
.text:0000000000004747                 xor     eax, eax
.text:0000000000004749                 mov     edi, ebx        ; status
.text:000000000000474B                 call    _error
.text:0000000000004750                 mov     rbp, [rsp+48h+var_48]
.text:0000000000004754
.text:0000000000004754 loc_4754:                               ; CODE XREF: xnumtoumax+4E↑j
.text:0000000000004754                 mov     rdx, [rsp+48h+var_40]
.text:0000000000004759                 xor     rdx, fs:28h
.text:0000000000004762                 mov     rax, rbp
.text:0000000000004765                 jnz     short loc_47AB
.text:0000000000004767                 add     rsp, 18h
.text:000000000000476B                 pop     rbx
.text:000000000000476C                 pop     rbp
.text:000000000000476D                 pop     r12
.text:000000000000476F                 pop     r13
.text:0000000000004771                 pop     r14
.text:0000000000004773                 pop     r15
.text:0000000000004775                 retn
.text:0000000000004775 ; ---------------------------------------------------------------------------
.text:0000000000004776                 align 20h
.text:0000000000004780
.text:0000000000004780 loc_4780:                               ; CODE XREF: xnumtoumax+3C↑j
.text:0000000000004780                 mov     ebp, eax
.text:0000000000004782                 call    ___errno_location
.text:0000000000004787                 cmp     ebp, 1
.text:000000000000478A                 mov     r14, rax
.text:000000000000478D                 jz      short loc_47A0
.text:000000000000478F                 cmp     ebp, 3
.text:0000000000004792                 jnz     short loc_471A
.text:0000000000004794                 mov     dword ptr [rax], 0
.text:000000000000479A                 jmp     loc_471A
.text:000000000000479A ; ---------------------------------------------------------------------------
.text:000000000000479F                 align 20h
.text:00000000000047A0
.text:00000000000047A0 loc_47A0:                               ; CODE XREF: xnumtoumax+DD↑j
.text:00000000000047A0                 mov     dword ptr [rax], 4Bh ; 'K'
.text:00000000000047A6                 jmp     loc_471A
.text:00000000000047AB ; ---------------------------------------------------------------------------
.text:00000000000047AB
.text:00000000000047AB loc_47AB:                               ; CODE XREF: xnumtoumax+B5↑j
.text:00000000000047AB                 call    ___stack_chk_fail
.text:00000000000047AB ; } // starts at 46B0
.text:00000000000047AB xnumtoumax      endp
.text:00000000000047AB
.text:00000000000047B0
.text:00000000000047B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000047B0
.text:00000000000047B0 ; Attributes: info_from_lumina
.text:00000000000047B0
.text:00000000000047B0 ; uintmax_t __fastcall xdectoumax(const char *n_str, uintmax_t min, uintmax_t max, const char *suffixes, const char *err, int err_exit)
.text:00000000000047B0                 public xdectoumax
.text:00000000000047B0 xdectoumax      proc near               ; CODE XREF: main+D3↑p
.text:00000000000047B0 ; __unwind {
.text:00000000000047B0                 sub     rsp, 10h
.text:00000000000047B4                 push    r9
.text:00000000000047B6                 mov     r9, r8
.text:00000000000047B9                 mov     r8, rcx
.text:00000000000047BC                 mov     rcx, rdx
.text:00000000000047BF                 mov     rdx, rsi
.text:00000000000047C2                 mov     esi, 0Ah
.text:00000000000047C7                 call    xnumtoumax
.text:00000000000047CC                 add     rsp, 18h
.text:00000000000047D0                 retn
.text:00000000000047D0 ; } // starts at 47B0
.text:00000000000047D0 xdectoumax      endp
.text:00000000000047D0
.text:00000000000047D0 ; ---------------------------------------------------------------------------
.text:00000000000047D1                 align 20h
.text:00000000000047E0
.text:00000000000047E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000047E0
.text:00000000000047E0
.text:00000000000047E0 ; __int64 __fastcall xstrtoumax(char *nptr)
.text:00000000000047E0                 public xstrtoumax
.text:00000000000047E0 xstrtoumax      proc near               ; CODE XREF: xnumtoumax+35↑p
.text:00000000000047E0
.text:00000000000047E0 base            = dword ptr -50h
.text:00000000000047E0 endptr          = qword ptr -48h
.text:00000000000047E0 var_40          = qword ptr -40h
.text:00000000000047E0
.text:00000000000047E0 ; __unwind {
.text:00000000000047E0                 push    r15
.text:00000000000047E2                 push    r14
.text:00000000000047E4                 push    r13
.text:00000000000047E6                 push    r12
.text:00000000000047E8                 push    rbp
.text:00000000000047E9                 push    rbx
.text:00000000000047EA                 sub     rsp, 28h
.text:00000000000047EE                 mov     rax, fs:28h
.text:00000000000047F7                 mov     [rsp+58h+var_40], rax
.text:00000000000047FC                 xor     eax, eax
.text:00000000000047FE                 cmp     edx, 24h ; '$'
.text:0000000000004801                 ja      loc_4B65
.text:0000000000004807                 lea     rax, [rsp+58h+endptr]
.text:000000000000480C                 mov     r15, rsi
.text:000000000000480F                 test    rsi, rsi
.text:0000000000004812                 mov     rbp, rdi
.text:0000000000004815                 mov     [rsp+58h+base], edx
.text:0000000000004819                 mov     r14, rcx
.text:000000000000481C                 mov     r13, r8
.text:000000000000481F                 cmovz   r15, rax
.text:0000000000004823                 call    ___errno_location
.text:0000000000004828                 mov     dword ptr [rax], 0
.text:000000000000482E                 mov     r12, rax
.text:0000000000004831                 movzx   ebx, byte ptr [rbp+0]
.text:0000000000004835                 call    ___ctype_b_loc
.text:000000000000483A                 mov     edx, [rsp+58h+base] ; base
.text:000000000000483E                 mov     rsi, [rax]
.text:0000000000004841                 mov     rax, rbp
.text:0000000000004844                 jmp     short loc_4857
.text:0000000000004844 ; ---------------------------------------------------------------------------
.text:0000000000004846                 align 10h
.text:0000000000004850
.text:0000000000004850 loc_4850:                               ; CODE XREF: xstrtoumax+7F↓j
.text:0000000000004850                 add     rax, 1
.text:0000000000004854                 movzx   ebx, byte ptr [rax]
.text:0000000000004857
.text:0000000000004857 loc_4857:                               ; CODE XREF: xstrtoumax+64↑j
.text:0000000000004857                 movzx   ecx, bl
.text:000000000000485A                 test    byte ptr [rsi+rcx*2+1], 20h
.text:000000000000485F                 jnz     short loc_4850
.text:0000000000004861                 cmp     bl, 2Dh ; '-'
.text:0000000000004864                 jz      short loc_48B8
.text:0000000000004866                 xor     ecx, ecx        ; group
.text:0000000000004868                 mov     rsi, r15        ; endptr
.text:000000000000486B                 mov     rdi, rbp        ; nptr
.text:000000000000486E                 call    ___strtoul_internal
.text:0000000000004873                 mov     rcx, [r15]
.text:0000000000004876                 mov     rbx, rax
.text:0000000000004879                 cmp     rcx, rbp
.text:000000000000487C                 jz      short loc_48A8
.text:000000000000487E                 mov     eax, [r12]
.text:0000000000004882                 test    eax, eax
.text:0000000000004884                 jz      short loc_48E8
.text:0000000000004886                 cmp     eax, 22h ; '"'
.text:0000000000004889                 mov     ebp, 1
.text:000000000000488E                 jnz     short loc_48B8
.text:0000000000004890
.text:0000000000004890 loc_4890:                               ; CODE XREF: xstrtoumax+10A↓j
.text:0000000000004890                 test    r13, r13
.text:0000000000004893                 jz      short loc_489E
.text:0000000000004895                 movzx   r12d, byte ptr [rcx]
.text:0000000000004899                 test    r12b, r12b
.text:000000000000489C                 jnz     short loc_4917
.text:000000000000489E
.text:000000000000489E loc_489E:                               ; CODE XREF: xstrtoumax+B3↑j
.text:000000000000489E                 mov     [r14], rbx
.text:00000000000048A1                 jmp     short loc_48BD
.text:00000000000048A1 ; ---------------------------------------------------------------------------
.text:00000000000048A3                 align 8
.text:00000000000048A8
.text:00000000000048A8 loc_48A8:                               ; CODE XREF: xstrtoumax+9C↑j
.text:00000000000048A8                 test    r13, r13
.text:00000000000048AB                 mov     qword ptr [rsp+58h+base], rcx
.text:00000000000048B0                 jnz     short loc_48F0
.text:00000000000048B2                 nop     word ptr [rax+rax+00h]
.text:00000000000048B8
.text:00000000000048B8 loc_48B8:                               ; CODE XREF: xstrtoumax+84↑j
.text:00000000000048B8                                         ; xstrtoumax+AE↑j ...
.text:00000000000048B8                 mov     ebp, 4
.text:00000000000048BD
.text:00000000000048BD loc_48BD:                               ; CODE XREF: xstrtoumax+C1↑j
.text:00000000000048BD                                         ; xstrtoumax+217↓j ...
.text:00000000000048BD                 mov     rdi, [rsp+58h+var_40]
.text:00000000000048C2                 xor     rdi, fs:28h
.text:00000000000048CB                 mov     eax, ebp
.text:00000000000048CD                 jnz     loc_4B60
.text:00000000000048D3                 add     rsp, 28h
.text:00000000000048D7                 pop     rbx
.text:00000000000048D8                 pop     rbp
.text:00000000000048D9                 pop     r12
.text:00000000000048DB                 pop     r13
.text:00000000000048DD                 pop     r14
.text:00000000000048DF                 pop     r15
.text:00000000000048E1                 retn
.text:00000000000048E1 ; ---------------------------------------------------------------------------
.text:00000000000048E2                 align 8
.text:00000000000048E8
.text:00000000000048E8 loc_48E8:                               ; CODE XREF: xstrtoumax+A4↑j
.text:00000000000048E8                 xor     ebp, ebp
.text:00000000000048EA                 jmp     short loc_4890
.text:00000000000048EA ; ---------------------------------------------------------------------------
.text:00000000000048EC                 align 10h
.text:00000000000048F0
.text:00000000000048F0 loc_48F0:                               ; CODE XREF: xstrtoumax+D0↑j
.text:00000000000048F0                 movzx   r12d, byte ptr [rbp+0]
.text:00000000000048F5                 test    r12b, r12b
.text:00000000000048F8                 jz      short loc_48B8
.text:00000000000048FA                 movsx   esi, r12b       ; c
.text:00000000000048FE                 mov     rdi, r13        ; s
.text:0000000000004901                 xor     ebp, ebp
.text:0000000000004903                 call    _strchr
.text:0000000000004908                 test    rax, rax
.text:000000000000490B                 mov     ebx, 1
.text:0000000000004910                 mov     rcx, qword ptr [rsp+58h+base]
.text:0000000000004915                 jz      short loc_48B8
.text:0000000000004917
.text:0000000000004917 loc_4917:                               ; CODE XREF: xstrtoumax+BC↑j
.text:0000000000004917                 movsx   esi, r12b       ; c
.text:000000000000491B                 mov     rdi, r13        ; s
.text:000000000000491E                 mov     qword ptr [rsp+58h+base], rcx
.text:0000000000004923                 call    _strchr
.text:0000000000004928                 test    rax, rax
.text:000000000000492B                 mov     rcx, qword ptr [rsp+58h+base]
.text:0000000000004930                 jz      def_49B6        ; jumptable 00000000000049B6 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:0000000000004936                 lea     eax, [r12-45h]
.text:000000000000493B                 cmp     al, 2Fh ; '/'
.text:000000000000493D                 ja      short loc_4990
.text:000000000000493F                 mov     rdx, 814400308945h
.text:0000000000004949                 bt      rdx, rax
.text:000000000000494D                 jnb     short loc_4990
.text:000000000000494F                 mov     esi, 30h ; '0'  ; c
.text:0000000000004954                 mov     rdi, r13        ; s
.text:0000000000004957                 mov     qword ptr [rsp+58h+base], rcx
.text:000000000000495C                 call    _strchr
.text:0000000000004961                 test    rax, rax
.text:0000000000004964                 mov     rcx, qword ptr [rsp+58h+base]
.text:0000000000004969                 jz      short loc_4990
.text:000000000000496B                 movzx   eax, byte ptr [rcx+1]
.text:000000000000496F                 cmp     al, 44h ; 'D'
.text:0000000000004971                 jz      short loc_497F
.text:0000000000004973                 cmp     al, 69h ; 'i'
.text:0000000000004975                 jz      loc_4B48
.text:000000000000497B                 cmp     al, 42h ; 'B'
.text:000000000000497D                 jnz     short loc_4990
.text:000000000000497F
.text:000000000000497F loc_497F:                               ; CODE XREF: xstrtoumax+191↑j
.text:000000000000497F                 mov     edi, 2
.text:0000000000004984                 mov     esi, 3E8h
.text:0000000000004989                 jmp     short loc_499A
.text:0000000000004989 ; ---------------------------------------------------------------------------
.text:000000000000498B                 align 10h
.text:0000000000004990
.text:0000000000004990 loc_4990:                               ; CODE XREF: xstrtoumax+15D↑j
.text:0000000000004990                                         ; xstrtoumax+16D↑j ...
.text:0000000000004990                 mov     edi, 1
.text:0000000000004995                 mov     esi, 400h
.text:000000000000499A
.text:000000000000499A loc_499A:                               ; CODE XREF: xstrtoumax+1A9↑j
.text:000000000000499A                                         ; xstrtoumax+37B↓j
.text:000000000000499A                 sub     r12d, 42h ; 'B' ; switch 54 cases
.text:000000000000499E                 cmp     r12b, 35h
.text:00000000000049A2                 ja      short def_49B6  ; jumptable 00000000000049B6 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:00000000000049A4                 lea     rdx, jpt_49B6
.text:00000000000049AB                 movzx   r12d, r12b
.text:00000000000049AF                 movsxd  rax, ds:(jpt_49B6 - 5BE8h)[rdx+r12*4]
.text:00000000000049B3                 add     rax, rdx
.text:00000000000049B6                 jmp     rax             ; switch jump
.text:00000000000049B8 ; ---------------------------------------------------------------------------
.text:00000000000049B8
.text:00000000000049B8 loc_49B8:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:00000000000049B8                                         ; DATA XREF: .rodata:jpt_49B6↓o
.text:00000000000049B8                 mov     rax, rbx        ; jumptable 00000000000049B6 cases 77,109
.text:00000000000049BB                 mul     rsi
.text:00000000000049BE                 jo      loc_4BB1
.text:00000000000049C4                 xor     r8d, r8d
.text:00000000000049C7
.text:00000000000049C7 loc_49C7:                               ; CODE XREF: xstrtoumax+34E↓j
.text:00000000000049C7                                         ; xstrtoumax+35E↓j ...
.text:00000000000049C7                 mul     rsi
.text:00000000000049CA                 jo      loc_4BA2
.text:00000000000049D0                 mov     rbx, rax
.text:00000000000049D3
.text:00000000000049D3 loc_49D3:                               ; CODE XREF: xstrtoumax+3CC↓j
.text:00000000000049D3                 or      ebp, r8d
.text:00000000000049D6                 db      2Eh
.text:00000000000049D6                 nop     word ptr [rax+rax+00000000h]
.text:00000000000049E0
.text:00000000000049E0 loc_49E0:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:00000000000049E0                                         ; xstrtoumax+23B↓j ...
.text:00000000000049E0                 movsxd  rdi, edi        ; jumptable 00000000000049B6 case 99
.text:00000000000049E3                 mov     eax, ebp
.text:00000000000049E5                 add     rcx, rdi
.text:00000000000049E8                 or      eax, 2
.text:00000000000049EB                 mov     [r15], rcx
.text:00000000000049EE                 cmp     byte ptr [rcx], 0
.text:00000000000049F1                 mov     [r14], rbx
.text:00000000000049F4                 cmovnz  ebp, eax
.text:00000000000049F7                 jmp     loc_48BD
.text:00000000000049FC ; ---------------------------------------------------------------------------
.text:00000000000049FC
.text:00000000000049FC def_49B6:                               ; CODE XREF: xstrtoumax+150↑j
.text:00000000000049FC                                         ; xstrtoumax+1C2↑j ...
.text:00000000000049FC                 mov     [r14], rbx      ; jumptable 00000000000049B6 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:00000000000049FF                 or      ebp, 2
.text:0000000000004A02                 jmp     loc_48BD
.text:0000000000004A07 ; ---------------------------------------------------------------------------
.text:0000000000004A07
.text:0000000000004A07 loc_4A07:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000004A07                                         ; DATA XREF: .rodata:jpt_49B6↓o
.text:0000000000004A07                 mov     edx, 2          ; jumptable 00000000000049B6 case 119
.text:0000000000004A0C                 mov     rax, rdx
.text:0000000000004A0F                 mul     rbx
.text:0000000000004A12                 jo      loc_4AAE
.text:0000000000004A18                 add     rbx, rbx
.text:0000000000004A1B                 jmp     short loc_49E0  ; jumptable 00000000000049B6 case 99
.text:0000000000004A1D ; ---------------------------------------------------------------------------
.text:0000000000004A1D
.text:0000000000004A1D loc_4A1D:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000004A1D                                         ; DATA XREF: .rodata:jpt_49B6↓o
.text:0000000000004A1D                 mov     edx, 200h       ; jumptable 00000000000049B6 case 98
.text:0000000000004A22                 mov     rax, rdx
.text:0000000000004A25                 mul     rbx
.text:0000000000004A28                 jo      loc_4AAE
.text:0000000000004A2E                 shl     rbx, 9
.text:0000000000004A32                 jmp     short loc_49E0  ; jumptable 00000000000049B6 case 99
.text:0000000000004A34 ; ---------------------------------------------------------------------------
.text:0000000000004A34
.text:0000000000004A34 loc_4A34:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000004A34                                         ; DATA XREF: .rodata:jpt_49B6↓o
.text:0000000000004A34                 mov     r8d, 7          ; jumptable 00000000000049B6 case 90
.text:0000000000004A3A                 xor     r9d, r9d
.text:0000000000004A3D                 nop     dword ptr [rax]
.text:0000000000004A40
.text:0000000000004A40 loc_4A40:                               ; CODE XREF: xstrtoumax+273↓j
.text:0000000000004A40                 mov     rax, rbx
.text:0000000000004A43                 mul     rsi
.text:0000000000004A46                 mov     rbx, rax
.text:0000000000004A49                 jo      loc_4BDE
.text:0000000000004A4F
.text:0000000000004A4F loc_4A4F:                               ; CODE XREF: xstrtoumax+408↓j
.text:0000000000004A4F                 sub     r8d, 1
.text:0000000000004A53                 jnz     short loc_4A40
.text:0000000000004A55
.text:0000000000004A55 loc_4A55:                               ; CODE XREF: xstrtoumax+29D↓j
.text:0000000000004A55                                         ; xstrtoumax+2BD↓j ...
.text:0000000000004A55                 or      ebp, r9d
.text:0000000000004A58                 jmp     short loc_49E0  ; jumptable 00000000000049B6 case 99
.text:0000000000004A5A ; ---------------------------------------------------------------------------
.text:0000000000004A5A
.text:0000000000004A5A loc_4A5A:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000004A5A                                         ; DATA XREF: .rodata:jpt_49B6↓o
.text:0000000000004A5A                 mov     r8d, 8          ; jumptable 00000000000049B6 case 89
.text:0000000000004A60                 xor     r9d, r9d
.text:0000000000004A63                 nop     dword ptr [rax+rax+00h]
.text:0000000000004A68
.text:0000000000004A68 loc_4A68:                               ; CODE XREF: xstrtoumax+29B↓j
.text:0000000000004A68                 mov     rax, rbx
.text:0000000000004A6B                 mul     rsi
.text:0000000000004A6E                 mov     rbx, rax
.text:0000000000004A71                 jo      loc_4BC0
.text:0000000000004A77
.text:0000000000004A77 loc_4A77:                               ; CODE XREF: xstrtoumax+3EA↓j
.text:0000000000004A77                 sub     r8d, 1
.text:0000000000004A7B                 jnz     short loc_4A68
.text:0000000000004A7D                 jmp     short loc_4A55
.text:0000000000004A7F ; ---------------------------------------------------------------------------
.text:0000000000004A7F
.text:0000000000004A7F loc_4A7F:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000004A7F                                         ; DATA XREF: .rodata:jpt_49B6↓o
.text:0000000000004A7F                 mov     r8d, 4          ; jumptable 00000000000049B6 cases 84,116
.text:0000000000004A85                 xor     r9d, r9d
.text:0000000000004A88
.text:0000000000004A88 loc_4A88:                               ; CODE XREF: xstrtoumax+2BB↓j
.text:0000000000004A88                 mov     rax, rbx
.text:0000000000004A8B                 mul     rsi
.text:0000000000004A8E                 mov     rbx, rax
.text:0000000000004A91                 jo      loc_4B93
.text:0000000000004A97
.text:0000000000004A97 loc_4A97:                               ; CODE XREF: xstrtoumax+3BD↓j
.text:0000000000004A97                 sub     r8d, 1
.text:0000000000004A9B                 jnz     short loc_4A88
.text:0000000000004A9D                 jmp     short loc_4A55
.text:0000000000004A9F ; ---------------------------------------------------------------------------
.text:0000000000004A9F
.text:0000000000004A9F loc_4A9F:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000004A9F                                         ; DATA XREF: .rodata:jpt_49B6↓o
.text:0000000000004A9F                 mov     rax, rbx        ; jumptable 00000000000049B6 cases 75,107
.text:0000000000004AA2                 mul     rsi
.text:0000000000004AA5                 mov     rbx, rax
.text:0000000000004AA8                 jno     loc_49E0        ; jumptable 00000000000049B6 case 99
.text:0000000000004AAE
.text:0000000000004AAE loc_4AAE:                               ; CODE XREF: xstrtoumax+232↑j
.text:0000000000004AAE                                         ; xstrtoumax+248↑j ...
.text:0000000000004AAE                 mov     ebp, 1
.text:0000000000004AB3                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004AB7                 jmp     loc_49E0        ; jumptable 00000000000049B6 case 99
.text:0000000000004AB7 ; ---------------------------------------------------------------------------
.text:0000000000004ABC                 align 20h
.text:0000000000004AC0
.text:0000000000004AC0 loc_4AC0:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000004AC0                                         ; DATA XREF: .rodata:jpt_49B6↓o
.text:0000000000004AC0                 mov     r8d, 5          ; jumptable 00000000000049B6 case 80
.text:0000000000004AC6                 xor     r9d, r9d
.text:0000000000004AC9
.text:0000000000004AC9 loc_4AC9:                               ; CODE XREF: xstrtoumax+2FC↓j
.text:0000000000004AC9                 mov     rax, rbx
.text:0000000000004ACC                 mul     rsi
.text:0000000000004ACF                 mov     rbx, rax
.text:0000000000004AD2                 jo      loc_4BCF
.text:0000000000004AD8
.text:0000000000004AD8 loc_4AD8:                               ; CODE XREF: xstrtoumax+3F9↓j
.text:0000000000004AD8                 sub     r8d, 1
.text:0000000000004ADC                 jnz     short loc_4AC9
.text:0000000000004ADE                 jmp     loc_4A55
.text:0000000000004AE3 ; ---------------------------------------------------------------------------
.text:0000000000004AE3
.text:0000000000004AE3 loc_4AE3:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000004AE3                                         ; DATA XREF: .rodata:jpt_49B6↓o
.text:0000000000004AE3                 mov     r8d, 6          ; jumptable 00000000000049B6 case 69
.text:0000000000004AE9                 xor     r9d, r9d
.text:0000000000004AEC
.text:0000000000004AEC loc_4AEC:                               ; CODE XREF: xstrtoumax+31F↓j
.text:0000000000004AEC                 mov     rax, rbx
.text:0000000000004AEF                 mul     rsi
.text:0000000000004AF2                 mov     rbx, rax
.text:0000000000004AF5                 jo      loc_4B84
.text:0000000000004AFB
.text:0000000000004AFB loc_4AFB:                               ; CODE XREF: xstrtoumax+3AE↓j
.text:0000000000004AFB                 sub     r8d, 1
.text:0000000000004AFF                 jnz     short loc_4AEC
.text:0000000000004B01                 jmp     loc_4A55
.text:0000000000004B06 ; ---------------------------------------------------------------------------
.text:0000000000004B06
.text:0000000000004B06 loc_4B06:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000004B06                                         ; DATA XREF: .rodata:jpt_49B6↓o
.text:0000000000004B06                 mov     edx, 400h       ; jumptable 00000000000049B6 case 66
.text:0000000000004B0B                 mov     rax, rdx
.text:0000000000004B0E                 mul     rbx
.text:0000000000004B11                 jo      short loc_4AAE
.text:0000000000004B13                 shl     rbx, 0Ah
.text:0000000000004B17                 jmp     loc_49E0        ; jumptable 00000000000049B6 case 99
.text:0000000000004B1C ; ---------------------------------------------------------------------------
.text:0000000000004B1C
.text:0000000000004B1C loc_4B1C:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000004B1C                                         ; DATA XREF: .rodata:jpt_49B6↓o
.text:0000000000004B1C                 mov     rax, rbx        ; jumptable 00000000000049B6 cases 71,103
.text:0000000000004B1F                 mul     rsi
.text:0000000000004B22                 jo      loc_4BED
.text:0000000000004B28                 xor     r8d, r8d
.text:0000000000004B2B
.text:0000000000004B2B loc_4B2B:                               ; CODE XREF: xstrtoumax+417↓j
.text:0000000000004B2B                 mul     rsi
.text:0000000000004B2E                 jno     loc_49C7
.text:0000000000004B34                 mov     r8d, 1
.text:0000000000004B3A                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000004B3E                 jmp     loc_49C7
.text:0000000000004B3E ; ---------------------------------------------------------------------------
.text:0000000000004B43                 align 8
.text:0000000000004B48
.text:0000000000004B48 loc_4B48:                               ; CODE XREF: xstrtoumax+195↑j
.text:0000000000004B48                 xor     edi, edi
.text:0000000000004B4A                 cmp     byte ptr [rcx+2], 42h ; 'B'
.text:0000000000004B4E                 mov     esi, 400h
.text:0000000000004B53                 setz    dil
.text:0000000000004B57                 lea     edi, [rdi+rdi+1]
.text:0000000000004B5B                 jmp     loc_499A
.text:0000000000004B60 ; ---------------------------------------------------------------------------
.text:0000000000004B60
.text:0000000000004B60 loc_4B60:                               ; CODE XREF: xstrtoumax+ED↑j
.text:0000000000004B60                 call    ___stack_chk_fail
.text:0000000000004B65 ; ---------------------------------------------------------------------------
.text:0000000000004B65
.text:0000000000004B65 loc_4B65:                               ; CODE XREF: xstrtoumax+21↑j
.text:0000000000004B65                 lea     rcx, __PRETTY_FUNCTION___4162 ; "xstrtoumax"
.text:0000000000004B6C                 lea     rsi, file       ; "../coreutils-8.31/lib/xstrtol.c"
.text:0000000000004B73                 lea     rdi, assertion  ; "0 <= strtol_base && strtol_base <= 36"
.text:0000000000004B7A                 mov     edx, 54h ; 'T'  ; line
.text:0000000000004B7F                 call    ___assert_fail
.text:0000000000004B84 ; ---------------------------------------------------------------------------
.text:0000000000004B84
.text:0000000000004B84 loc_4B84:                               ; CODE XREF: xstrtoumax+315↑j
.text:0000000000004B84                 mov     r9d, 1
.text:0000000000004B8A                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004B8E                 jmp     loc_4AFB
.text:0000000000004B93 ; ---------------------------------------------------------------------------
.text:0000000000004B93
.text:0000000000004B93 loc_4B93:                               ; CODE XREF: xstrtoumax+2B1↑j
.text:0000000000004B93                 mov     r9d, 1
.text:0000000000004B99                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004B9D                 jmp     loc_4A97
.text:0000000000004BA2 ; ---------------------------------------------------------------------------
.text:0000000000004BA2
.text:0000000000004BA2 loc_4BA2:                               ; CODE XREF: xstrtoumax+1EA↑j
.text:0000000000004BA2                 mov     r8d, 1
.text:0000000000004BA8                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004BAC                 jmp     loc_49D3
.text:0000000000004BB1 ; ---------------------------------------------------------------------------
.text:0000000000004BB1
.text:0000000000004BB1 loc_4BB1:                               ; CODE XREF: xstrtoumax+1DE↑j
.text:0000000000004BB1                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000004BB5                 mov     r8d, 1
.text:0000000000004BBB                 jmp     loc_49C7
.text:0000000000004BC0 ; ---------------------------------------------------------------------------
.text:0000000000004BC0
.text:0000000000004BC0 loc_4BC0:                               ; CODE XREF: xstrtoumax+291↑j
.text:0000000000004BC0                 mov     r9d, 1
.text:0000000000004BC6                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004BCA                 jmp     loc_4A77
.text:0000000000004BCF ; ---------------------------------------------------------------------------
.text:0000000000004BCF
.text:0000000000004BCF loc_4BCF:                               ; CODE XREF: xstrtoumax+2F2↑j
.text:0000000000004BCF                 mov     r9d, 1
.text:0000000000004BD5                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004BD9                 jmp     loc_4AD8
.text:0000000000004BDE ; ---------------------------------------------------------------------------
.text:0000000000004BDE
.text:0000000000004BDE loc_4BDE:                               ; CODE XREF: xstrtoumax+269↑j
.text:0000000000004BDE                 mov     r9d, 1
.text:0000000000004BE4                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004BE8                 jmp     loc_4A4F
.text:0000000000004BED ; ---------------------------------------------------------------------------
.text:0000000000004BED
.text:0000000000004BED loc_4BED:                               ; CODE XREF: xstrtoumax+342↑j
.text:0000000000004BED                 mov     r8d, 1
.text:0000000000004BF3                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000004BF7                 jmp     loc_4B2B
.text:0000000000004BF7 ; } // starts at 47E0
.text:0000000000004BF7 xstrtoumax      endp
.text:0000000000004BF7
.text:0000000000004BF7 ; ---------------------------------------------------------------------------
.text:0000000000004BFC                 align 20h
.text:0000000000004C00
.text:0000000000004C00 ; =============== S U B R O U T I N E =======================================
.text:0000000000004C00
.text:0000000000004C00 ; Attributes: info_from_lumina
.text:0000000000004C00
.text:0000000000004C00 ; size_t __fastcall rpl_mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
.text:0000000000004C00                 public rpl_mbrtowc
.text:0000000000004C00 rpl_mbrtowc     proc near               ; CODE XREF: quotearg_buffer_restyled+956↑p
.text:0000000000004C00
.text:0000000000004C00 pwc             = dword ptr -34h
.text:0000000000004C00 var_30          = qword ptr -30h
.text:0000000000004C00
.text:0000000000004C00 ; __unwind {
.text:0000000000004C00                 push    r13
.text:0000000000004C02                 push    r12
.text:0000000000004C04                 mov     r13, rsi
.text:0000000000004C07                 push    rbp
.text:0000000000004C08                 push    rbx
.text:0000000000004C09                 mov     rbx, rdi
.text:0000000000004C0C                 mov     r12, rdx
.text:0000000000004C0F                 sub     rsp, 18h
.text:0000000000004C13                 mov     rax, fs:28h
.text:0000000000004C1C                 mov     [rsp+38h+var_30], rax
.text:0000000000004C21                 xor     eax, eax
.text:0000000000004C23                 lea     rax, [rsp+38h+pwc]
.text:0000000000004C28                 test    rdi, rdi
.text:0000000000004C2B                 cmovz   rbx, rax
.text:0000000000004C2F                 mov     rdi, rbx        ; pwc
.text:0000000000004C32                 call    _mbrtowc
.text:0000000000004C37                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:0000000000004C3B                 mov     rbp, rax
.text:0000000000004C3E                 jbe     short loc_4C60
.text:0000000000004C40                 test    r12, r12
.text:0000000000004C43                 jz      short loc_4C60
.text:0000000000004C45                 xor     edi, edi
.text:0000000000004C47                 call    hard_locale
.text:0000000000004C4C                 test    al, al
.text:0000000000004C4E                 jnz     short loc_4C60
.text:0000000000004C50                 movzx   eax, byte ptr [r13+0]
.text:0000000000004C55                 mov     ebp, 1
.text:0000000000004C5A                 mov     [rbx], eax
.text:0000000000004C5C                 nop     dword ptr [rax+00h]
.text:0000000000004C60
.text:0000000000004C60 loc_4C60:                               ; CODE XREF: rpl_mbrtowc+3E↑j
.text:0000000000004C60                                         ; rpl_mbrtowc+43↑j ...
.text:0000000000004C60                 mov     rdx, [rsp+38h+var_30]
.text:0000000000004C65                 xor     rdx, fs:28h
.text:0000000000004C6E                 mov     rax, rbp
.text:0000000000004C71                 jnz     short loc_4C7E
.text:0000000000004C73                 add     rsp, 18h
.text:0000000000004C77                 pop     rbx
.text:0000000000004C78                 pop     rbp
.text:0000000000004C79                 pop     r12
.text:0000000000004C7B                 pop     r13
.text:0000000000004C7D                 retn
.text:0000000000004C7E ; ---------------------------------------------------------------------------
.text:0000000000004C7E
.text:0000000000004C7E loc_4C7E:                               ; CODE XREF: rpl_mbrtowc+71↑j
.text:0000000000004C7E                 call    ___stack_chk_fail
.text:0000000000004C7E ; } // starts at 4C00
.text:0000000000004C7E rpl_mbrtowc     endp
.text:0000000000004C7E
.text:0000000000004C7E ; ---------------------------------------------------------------------------
.text:0000000000004C83                 align 10h
.text:0000000000004C90
.text:0000000000004C90 ; =============== S U B R O U T I N E =======================================
.text:0000000000004C90
.text:0000000000004C90 ; Attributes: info_from_lumina
.text:0000000000004C90
.text:0000000000004C90 ; int __fastcall close_stream(FILE *stream)
.text:0000000000004C90                 public close_stream
.text:0000000000004C90 close_stream    proc near               ; CODE XREF: close_stdout+D↑p
.text:0000000000004C90                                         ; close_stdout+33↑p
.text:0000000000004C90 ; __unwind {
.text:0000000000004C90                 push    r12
.text:0000000000004C92                 push    rbp
.text:0000000000004C93                 mov     rbp, rdi
.text:0000000000004C96                 push    rbx
.text:0000000000004C97                 call    ___fpending
.text:0000000000004C9C                 mov     ebx, [rbp+0]
.text:0000000000004C9F                 mov     rdi, rbp        ; stream
.text:0000000000004CA2                 mov     r12, rax
.text:0000000000004CA5                 call    rpl_fclose
.text:0000000000004CAA                 and     ebx, 20h
.text:0000000000004CAD                 test    ebx, ebx
.text:0000000000004CAF                 jnz     short loc_4CC8
.text:0000000000004CB1                 test    eax, eax
.text:0000000000004CB3                 jz      short loc_4CBF
.text:0000000000004CB5                 test    r12, r12
.text:0000000000004CB8                 mov     eax, 0FFFFFFFFh
.text:0000000000004CBD                 jz      short loc_4CF8
.text:0000000000004CBF
.text:0000000000004CBF loc_4CBF:                               ; CODE XREF: close_stream+23↑j
.text:0000000000004CBF                 pop     rbx
.text:0000000000004CC0                 pop     rbp
.text:0000000000004CC1                 pop     r12
.text:0000000000004CC3                 retn
.text:0000000000004CC3 ; ---------------------------------------------------------------------------
.text:0000000000004CC4                 align 8
.text:0000000000004CC8
.text:0000000000004CC8 loc_4CC8:                               ; CODE XREF: close_stream+1F↑j
.text:0000000000004CC8                 test    eax, eax
.text:0000000000004CCA                 jnz     short loc_4CE8
.text:0000000000004CCC                 call    ___errno_location
.text:0000000000004CD1                 mov     dword ptr [rax], 0
.text:0000000000004CD7                 mov     eax, 0FFFFFFFFh
.text:0000000000004CDC                 pop     rbx
.text:0000000000004CDD                 pop     rbp
.text:0000000000004CDE                 pop     r12
.text:0000000000004CE0                 retn
.text:0000000000004CE0 ; ---------------------------------------------------------------------------
.text:0000000000004CE1                 align 8
.text:0000000000004CE8
.text:0000000000004CE8 loc_4CE8:                               ; CODE XREF: close_stream+3A↑j
.text:0000000000004CE8                 pop     rbx
.text:0000000000004CE9                 mov     eax, 0FFFFFFFFh
.text:0000000000004CEE                 pop     rbp
.text:0000000000004CEF                 pop     r12
.text:0000000000004CF1                 retn
.text:0000000000004CF1 ; ---------------------------------------------------------------------------
.text:0000000000004CF2                 align 8
.text:0000000000004CF8
.text:0000000000004CF8 loc_4CF8:                               ; CODE XREF: close_stream+2D↑j
.text:0000000000004CF8                 call    ___errno_location
.text:0000000000004CFD                 cmp     dword ptr [rax], 9
.text:0000000000004D00                 pop     rbx
.text:0000000000004D01                 pop     rbp
.text:0000000000004D02                 pop     r12
.text:0000000000004D04                 setnz   al
.text:0000000000004D07                 movzx   eax, al
.text:0000000000004D0A                 neg     eax
.text:0000000000004D0C                 retn
.text:0000000000004D0C ; } // starts at 4C90
.text:0000000000004D0C close_stream    endp
.text:0000000000004D0C
.text:0000000000004D0C ; ---------------------------------------------------------------------------
.text:0000000000004D0D                 align 10h
.text:0000000000004D10
.text:0000000000004D10 ; =============== S U B R O U T I N E =======================================
.text:0000000000004D10
.text:0000000000004D10
.text:0000000000004D10                 public hard_locale
.text:0000000000004D10 hard_locale     proc near               ; CODE XREF: rpl_mbrtowc+47↑p
.text:0000000000004D10 ; __unwind {
.text:0000000000004D10                 sub     rsp, 8
.text:0000000000004D14                 xor     esi, esi        ; locale
.text:0000000000004D16                 call    _setlocale
.text:0000000000004D1B                 mov     rdx, rax
.text:0000000000004D1E                 mov     eax, 1
.text:0000000000004D23                 test    rdx, rdx
.text:0000000000004D26                 jz      short loc_4D45
.text:0000000000004D28                 lea     rdi, aC         ; "C"
.text:0000000000004D2F                 mov     ecx, 2
.text:0000000000004D34                 mov     rsi, rdx
.text:0000000000004D37                 repe cmpsb
.text:0000000000004D39                 setnbe  cl
.text:0000000000004D3C                 sbb     cl, 0
.text:0000000000004D3F                 xor     eax, eax
.text:0000000000004D41                 test    cl, cl
.text:0000000000004D43                 jnz     short loc_4D50
.text:0000000000004D45
.text:0000000000004D45 loc_4D45:                               ; CODE XREF: hard_locale+16↑j
.text:0000000000004D45                 add     rsp, 8
.text:0000000000004D49                 retn
.text:0000000000004D49 ; ---------------------------------------------------------------------------
.text:0000000000004D4A                 align 10h
.text:0000000000004D50
.text:0000000000004D50 loc_4D50:                               ; CODE XREF: hard_locale+33↑j
.text:0000000000004D50                 lea     rdi, aPosix     ; "POSIX"
.text:0000000000004D57                 mov     ecx, 6
.text:0000000000004D5C                 mov     rsi, rdx
.text:0000000000004D5F                 repe cmpsb
.text:0000000000004D61                 setnbe  al
.text:0000000000004D64                 sbb     al, 0
.text:0000000000004D66                 test    al, al
.text:0000000000004D68                 setnz   al
.text:0000000000004D6B                 add     rsp, 8
.text:0000000000004D6F                 retn
.text:0000000000004D6F ; } // starts at 4D10
.text:0000000000004D6F hard_locale     endp
.text:0000000000004D6F
.text:0000000000004D70
.text:0000000000004D70 ; =============== S U B R O U T I N E =======================================
.text:0000000000004D70
.text:0000000000004D70
.text:0000000000004D70                 public locale_charset
.text:0000000000004D70 locale_charset  proc near               ; CODE XREF: gettext_quote+B↑p
.text:0000000000004D70 ; __unwind {
.text:0000000000004D70                 sub     rsp, 8
.text:0000000000004D74                 mov     edi, 0Eh        ; item
.text:0000000000004D79                 call    _nl_langinfo
.text:0000000000004D7E                 test    rax, rax
.text:0000000000004D81                 jz      short loc_4DA0
.text:0000000000004D83                 cmp     byte ptr [rax], 0
.text:0000000000004D86                 lea     rdx, aAscii     ; "ASCII"
.text:0000000000004D8D                 cmovz   rax, rdx
.text:0000000000004D91                 add     rsp, 8
.text:0000000000004D95                 retn
.text:0000000000004D95 ; ---------------------------------------------------------------------------
.text:0000000000004D96                 align 20h
.text:0000000000004DA0
.text:0000000000004DA0 loc_4DA0:                               ; CODE XREF: locale_charset+11↑j
.text:0000000000004DA0                 lea     rax, aAscii     ; "ASCII"
.text:0000000000004DA7                 add     rsp, 8
.text:0000000000004DAB                 retn
.text:0000000000004DAB ; } // starts at 4D70
.text:0000000000004DAB locale_charset  endp
.text:0000000000004DAB
.text:0000000000004DAB ; ---------------------------------------------------------------------------
.text:0000000000004DAC                 align 10h
.text:0000000000004DB0
.text:0000000000004DB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004DB0
.text:0000000000004DB0 ; Attributes: info_from_lumina
.text:0000000000004DB0
.text:0000000000004DB0 ; int __fastcall rpl_fclose(FILE *fp)
.text:0000000000004DB0                 public rpl_fclose
.text:0000000000004DB0 rpl_fclose      proc near               ; CODE XREF: close_stream+15↑p
.text:0000000000004DB0 ; __unwind {
.text:0000000000004DB0                 push    r12
.text:0000000000004DB2                 push    rbp
.text:0000000000004DB3                 push    rbx
.text:0000000000004DB4                 mov     rbx, rdi
.text:0000000000004DB7                 call    _fileno
.text:0000000000004DBC                 test    eax, eax
.text:0000000000004DBE                 mov     rdi, rbx        ; fp
.text:0000000000004DC1                 js      short loc_4E17
.text:0000000000004DC3                 call    ___freading
.text:0000000000004DC8                 test    eax, eax
.text:0000000000004DCA                 jnz     short loc_4DF8
.text:0000000000004DCC
.text:0000000000004DCC loc_4DCC:                               ; CODE XREF: rpl_fclose+62↓j
.text:0000000000004DCC                 mov     rdi, rbx        ; stream
.text:0000000000004DCF                 call    rpl_fflush
.text:0000000000004DD4                 test    eax, eax
.text:0000000000004DD6                 jz      short loc_4E14
.text:0000000000004DD8                 call    ___errno_location
.text:0000000000004DDD                 mov     r12d, [rax]
.text:0000000000004DE0                 mov     rdi, rbx        ; stream
.text:0000000000004DE3                 mov     rbp, rax
.text:0000000000004DE6                 call    _fclose
.text:0000000000004DEB                 test    r12d, r12d
.text:0000000000004DEE                 jnz     short loc_4E20
.text:0000000000004DF0
.text:0000000000004DF0 loc_4DF0:                               ; CODE XREF: rpl_fclose+79↓j
.text:0000000000004DF0                 pop     rbx
.text:0000000000004DF1                 pop     rbp
.text:0000000000004DF2                 pop     r12
.text:0000000000004DF4                 retn
.text:0000000000004DF4 ; ---------------------------------------------------------------------------
.text:0000000000004DF5                 align 8
.text:0000000000004DF8
.text:0000000000004DF8 loc_4DF8:                               ; CODE XREF: rpl_fclose+1A↑j
.text:0000000000004DF8                 mov     rdi, rbx        ; stream
.text:0000000000004DFB                 call    _fileno
.text:0000000000004E00                 xor     esi, esi        ; offset
.text:0000000000004E02                 mov     edx, 1          ; whence
.text:0000000000004E07                 mov     edi, eax        ; fd
.text:0000000000004E09                 call    _lseek
.text:0000000000004E0E                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000004E12                 jnz     short loc_4DCC
.text:0000000000004E14
.text:0000000000004E14 loc_4E14:                               ; CODE XREF: rpl_fclose+26↑j
.text:0000000000004E14                 mov     rdi, rbx        ; stream
.text:0000000000004E17
.text:0000000000004E17 loc_4E17:                               ; CODE XREF: rpl_fclose+11↑j
.text:0000000000004E17                 pop     rbx
.text:0000000000004E18                 pop     rbp
.text:0000000000004E19                 pop     r12
.text:0000000000004E1B                 jmp     _fclose
.text:0000000000004E20 ; ---------------------------------------------------------------------------
.text:0000000000004E20
.text:0000000000004E20 loc_4E20:                               ; CODE XREF: rpl_fclose+3E↑j
.text:0000000000004E20                 mov     [rbp+0], r12d
.text:0000000000004E24                 mov     eax, 0FFFFFFFFh
.text:0000000000004E29                 jmp     short loc_4DF0
.text:0000000000004E29 ; } // starts at 4DB0
.text:0000000000004E29 rpl_fclose      endp
.text:0000000000004E29
.text:0000000000004E29 ; ---------------------------------------------------------------------------
.text:0000000000004E2B                 align 10h
.text:0000000000004E30
.text:0000000000004E30 ; =============== S U B R O U T I N E =======================================
.text:0000000000004E30
.text:0000000000004E30 ; Attributes: info_from_lumina
.text:0000000000004E30
.text:0000000000004E30 ; int __fastcall rpl_fflush(FILE *stream)
.text:0000000000004E30                 public rpl_fflush
.text:0000000000004E30 rpl_fflush      proc near               ; CODE XREF: rpl_fclose+1F↑p
.text:0000000000004E30 ; __unwind {
.text:0000000000004E30                 test    rdi, rdi
.text:0000000000004E33                 push    rbx
.text:0000000000004E34                 mov     rbx, rdi
.text:0000000000004E37                 jz      short loc_4E4A
.text:0000000000004E39                 call    ___freading
.text:0000000000004E3E                 test    eax, eax
.text:0000000000004E40                 jz      short loc_4E4A
.text:0000000000004E42                 test    dword ptr [rbx], 100h
.text:0000000000004E48                 jnz     short loc_4E58
.text:0000000000004E4A
.text:0000000000004E4A loc_4E4A:                               ; CODE XREF: rpl_fflush+7↑j
.text:0000000000004E4A                                         ; rpl_fflush+10↑j
.text:0000000000004E4A                 mov     rdi, rbx        ; stream
.text:0000000000004E4D                 pop     rbx
.text:0000000000004E4E                 jmp     _fflush
.text:0000000000004E4E ; ---------------------------------------------------------------------------
.text:0000000000004E53                 align 8
.text:0000000000004E58
.text:0000000000004E58 loc_4E58:                               ; CODE XREF: rpl_fflush+18↑j
.text:0000000000004E58                 mov     rdi, rbx
.text:0000000000004E5B                 mov     edx, 1
.text:0000000000004E60                 xor     esi, esi
.text:0000000000004E62                 call    rpl_fseeko
.text:0000000000004E67                 mov     rdi, rbx        ; stream
.text:0000000000004E6A                 pop     rbx
.text:0000000000004E6B                 jmp     _fflush
.text:0000000000004E6B ; } // starts at 4E30
.text:0000000000004E6B rpl_fflush      endp
.text:0000000000004E6B
.text:0000000000004E70
.text:0000000000004E70 ; =============== S U B R O U T I N E =======================================
.text:0000000000004E70
.text:0000000000004E70 ; Attributes: info_from_lumina
.text:0000000000004E70
.text:0000000000004E70 ; int __fastcall rpl_fseeko(FILE *fp, off_t offset, int whence)
.text:0000000000004E70                 public rpl_fseeko
.text:0000000000004E70 rpl_fseeko      proc near               ; CODE XREF: rpl_fflush+32↑p
.text:0000000000004E70 ; __unwind {
.text:0000000000004E70                 mov     rax, [rdi+8]
.text:0000000000004E74                 cmp     [rdi+10h], rax
.text:0000000000004E78                 jz      short loc_4E80
.text:0000000000004E7A
.text:0000000000004E7A loc_4E7A:                               ; CODE XREF: rpl_fseeko+18↓j
.text:0000000000004E7A                                         ; rpl_fseeko+1F↓j
.text:0000000000004E7A                 jmp     _fseeko
.text:0000000000004E7A ; ---------------------------------------------------------------------------
.text:0000000000004E7F                 align 20h
.text:0000000000004E80
.text:0000000000004E80 loc_4E80:                               ; CODE XREF: rpl_fseeko+8↑j
.text:0000000000004E80                 mov     rax, [rdi+20h]
.text:0000000000004E84                 cmp     [rdi+28h], rax
.text:0000000000004E88                 jnz     short loc_4E7A
.text:0000000000004E8A                 cmp     qword ptr [rdi+48h], 0
.text:0000000000004E8F                 jnz     short loc_4E7A
.text:0000000000004E91                 push    r12
.text:0000000000004E93                 push    rbp
.text:0000000000004E94                 mov     r12d, edx
.text:0000000000004E97                 push    rbx
.text:0000000000004E98                 mov     rbp, rsi
.text:0000000000004E9B                 mov     rbx, rdi
.text:0000000000004E9E                 call    _fileno
.text:0000000000004EA3                 mov     edx, r12d       ; whence
.text:0000000000004EA6                 mov     rsi, rbp        ; offset
.text:0000000000004EA9                 mov     edi, eax        ; fd
.text:0000000000004EAB                 call    _lseek
.text:0000000000004EB0                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000004EB4                 jz      short loc_4EC2
.text:0000000000004EB6                 and     dword ptr [rbx], 0FFFFFFEFh
.text:0000000000004EB9                 mov     [rbx+90h], rax
.text:0000000000004EC0                 xor     eax, eax
.text:0000000000004EC2
.text:0000000000004EC2 loc_4EC2:                               ; CODE XREF: rpl_fseeko+44↑j
.text:0000000000004EC2                 pop     rbx
.text:0000000000004EC3                 pop     rbp
.text:0000000000004EC4                 pop     r12
.text:0000000000004EC6                 retn
.text:0000000000004EC6 ; } // starts at 4E70
.text:0000000000004EC6 rpl_fseeko      endp
.text:0000000000004EC6
.text:0000000000004EC6 ; ---------------------------------------------------------------------------
.text:0000000000004EC7                 align 10h
.text:0000000000004ED0
.text:0000000000004ED0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004ED0
.text:0000000000004ED0 ; Attributes: info_from_lumina
.text:0000000000004ED0
.text:0000000000004ED0 ; void _libc_csu_init(void)
.text:0000000000004ED0                 public __libc_csu_init
.text:0000000000004ED0 __libc_csu_init proc near               ; DATA XREF: start+16↑o
.text:0000000000004ED0 ; __unwind {
.text:0000000000004ED0                 push    r15
.text:0000000000004ED2                 push    r14
.text:0000000000004ED4                 mov     r15, rdx
.text:0000000000004ED7                 push    r13
.text:0000000000004ED9                 push    r12
.text:0000000000004EDB                 lea     r12, __frame_dummy_init_array_entry
.text:0000000000004EE2                 push    rbp
.text:0000000000004EE3                 lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:0000000000004EEA                 push    rbx
.text:0000000000004EEB                 mov     r13d, edi
.text:0000000000004EEE                 mov     r14, rsi
.text:0000000000004EF1                 sub     rbp, r12
.text:0000000000004EF4                 sub     rsp, 8
.text:0000000000004EF8                 sar     rbp, 3
.text:0000000000004EFC                 call    _init_proc
.text:0000000000004F01                 test    rbp, rbp
.text:0000000000004F04                 jz      short loc_4F26
.text:0000000000004F06                 xor     ebx, ebx
.text:0000000000004F08                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000004F10
.text:0000000000004F10 loc_4F10:                               ; CODE XREF: __libc_csu_init+54↓j
.text:0000000000004F10                 mov     rdx, r15
.text:0000000000004F13                 mov     rsi, r14
.text:0000000000004F16                 mov     edi, r13d
.text:0000000000004F19                 call    ds:(__frame_dummy_init_array_entry - 206B50h)[r12+rbx*8]
.text:0000000000004F1D                 add     rbx, 1
.text:0000000000004F21                 cmp     rbp, rbx
.text:0000000000004F24                 jnz     short loc_4F10
.text:0000000000004F26
.text:0000000000004F26 loc_4F26:                               ; CODE XREF: __libc_csu_init+34↑j
.text:0000000000004F26                 add     rsp, 8
.text:0000000000004F2A                 pop     rbx
.text:0000000000004F2B                 pop     rbp
.text:0000000000004F2C                 pop     r12
.text:0000000000004F2E                 pop     r13
.text:0000000000004F30                 pop     r14
.text:0000000000004F32                 pop     r15
.text:0000000000004F34                 retn
.text:0000000000004F34 ; } // starts at 4ED0
.text:0000000000004F34 __libc_csu_init endp
.text:0000000000004F34
.text:0000000000004F34 ; ---------------------------------------------------------------------------
.text:0000000000004F35                 align 20h
.text:0000000000004F40
.text:0000000000004F40 ; =============== S U B R O U T I N E =======================================
.text:0000000000004F40
.text:0000000000004F40
.text:0000000000004F40 ; void _libc_csu_fini(void)
.text:0000000000004F40                 public __libc_csu_fini
.text:0000000000004F40 __libc_csu_fini proc near               ; DATA XREF: start+F↑o
.text:0000000000004F40 ; __unwind {
.text:0000000000004F40                 rep retn
.text:0000000000004F40 ; } // starts at 4F40
.text:0000000000004F40 __libc_csu_fini endp
.text:0000000000004F40
.text:0000000000004F40 ; ---------------------------------------------------------------------------
.text:0000000000004F42                 align 10h
.text:0000000000004F50
.text:0000000000004F50 ; =============== S U B R O U T I N E =======================================
.text:0000000000004F50
.text:0000000000004F50
.text:0000000000004F50 atexit          proc near               ; CODE XREF: main+57↑p
.text:0000000000004F50 ; __unwind {
.text:0000000000004F50                 mov     rdx, cs:__dso_handle ; lpdso_handle
.text:0000000000004F57                 xor     esi, esi        ; obj
.text:0000000000004F59                 jmp     ___cxa_atexit
.text:0000000000004F59 ; } // starts at 4F50
.text:0000000000004F59 atexit          endp
.text:0000000000004F59
.text:0000000000004F59 _text           ends
.text:0000000000004F59
LOAD:0000000000004F5E ; ===========================================================================
LOAD:0000000000004F5E
LOAD:0000000000004F5E ; Segment type: Pure code
LOAD:0000000000004F5E ; Segment permissions: Read/Execute
LOAD:0000000000004F5E LOAD            segment byte public 'CODE' use64
LOAD:0000000000004F5E                 assume cs:LOAD
LOAD:0000000000004F5E                 ;org 4F5Eh
LOAD:0000000000004F5E                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000004F5E                 align 20h
LOAD:0000000000004F5E LOAD            ends
LOAD:0000000000004F5E
.fini:0000000000004F60 ; ===========================================================================
.fini:0000000000004F60
.fini:0000000000004F60 ; Segment type: Pure code
.fini:0000000000004F60 ; Segment permissions: Read/Execute
.fini:0000000000004F60 _fini           segment dword public 'CODE' use64
.fini:0000000000004F60                 assume cs:_fini
.fini:0000000000004F60                 ;org 4F60h
.fini:0000000000004F60                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:0000000000004F60
.fini:0000000000004F60 ; =============== S U B R O U T I N E =======================================
.fini:0000000000004F60
.fini:0000000000004F60
.fini:0000000000004F60                 public _term_proc
.fini:0000000000004F60 _term_proc      proc near
.fini:0000000000004F60                 sub     rsp, 8          ; _fini
.fini:0000000000004F64                 add     rsp, 8
.fini:0000000000004F68                 retn
.fini:0000000000004F68 _term_proc      endp
.fini:0000000000004F68
.fini:0000000000004F68 _fini           ends
.fini:0000000000004F68
LOAD:0000000000004F69 ; ===========================================================================
LOAD:0000000000004F69
LOAD:0000000000004F69 ; Segment type: Pure code
LOAD:0000000000004F69 ; Segment permissions: Read/Execute
LOAD:0000000000004F69 LOAD            segment byte public 'CODE' use64
LOAD:0000000000004F69                 assume cs:LOAD
LOAD:0000000000004F69                 ;org 4F69h
LOAD:0000000000004F69                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000004F69                 align 20h
LOAD:0000000000004F69 LOAD            ends
LOAD:0000000000004F69
.rodata:0000000000004F80 ; ===========================================================================
.rodata:0000000000004F80
.rodata:0000000000004F80 ; Segment type: Pure data
.rodata:0000000000004F80 ; Segment permissions: Read
.rodata:0000000000004F80 _rodata         segment align_32 public 'CONST' use64
.rodata:0000000000004F80                 assume cs:_rodata
.rodata:0000000000004F80                 ;org 4F80h
.rodata:0000000000004F80                 public _IO_stdin_used
.rodata:0000000000004F80 _IO_stdin_used  db    1
.rodata:0000000000004F81                 db    0
.rodata:0000000000004F82                 db    2
.rodata:0000000000004F83                 db    0
.rodata:0000000000004F84 aNproc          db 'nproc',0            ; DATA XREF: main+107↑o
.rodata:0000000000004F84                                         ; usage+10C↑o ...
.rodata:0000000000004F8A ; const char aUsageSOption[]
.rodata:0000000000004F8A aUsageSOption   db 'Usage: %s [OPTION]...',0Ah,0
.rodata:0000000000004F8A                                         ; DATA XREF: usage:loc_1A0D↑o
.rodata:0000000000004FA1 asc_4FA1        db '[',0                ; DATA XREF: usage+118↑o
.rodata:0000000000004FA3 aTestInvocation db 'test invocation',0  ; DATA XREF: usage+13F↑o
.rodata:0000000000004FB3 aMultiCallInvoc db 'Multi-call invocation',0
.rodata:0000000000004FB3                                         ; DATA XREF: usage+16F↑o
.rodata:0000000000004FB3                                         ; usage+26C↑o ...
.rodata:0000000000004FC9 aSha224sum      db 'sha224sum',0        ; DATA XREF: usage+180↑o
.rodata:0000000000004FD3 aSha2Utilities  db 'sha2 utilities',0   ; DATA XREF: usage+18C↑o
.rodata:0000000000004FE2 aSha256sum      db 'sha256sum',0        ; DATA XREF: usage+11F↑o
.rodata:0000000000004FEC aSha384sum      db 'sha384sum',0        ; DATA XREF: usage+14B↑o
.rodata:0000000000004FF6 aSha512sum      db 'sha512sum',0        ; DATA XREF: usage+163↑o
.rodata:0000000000005000 ; const char aSOnlineHelpS[]
.rodata:0000000000005000 aSOnlineHelpS   db 0Ah                  ; DATA XREF: usage+1DA↑o
.rodata:0000000000005000                 db '%s online help: <%s>',0Ah,0
.rodata:0000000000005017 unk_5017        db  47h ; G             ; DATA XREF: main+100↑o
.rodata:0000000000005017                                         ; usage+1F6↑o ...
.rodata:0000000000005018                 db  4Eh ; N
.rodata:0000000000005019                 db  55h ; U
.rodata:000000000000501A                 db  20h
.rodata:000000000000501B ; const char domainname[]
.rodata:000000000000501B domainname      db 'coreutils',0        ; DATA XREF: main+38↑o
.rodata:000000000000501B                                         ; main+44↑o ...
.rodata:0000000000005025 ; const char s2[]
.rodata:0000000000005025 s2              db 'en_',0              ; DATA XREF: usage+21D↑o
.rodata:0000000000005025                                         ; usage+2DE↑o
.rodata:0000000000005029 ; const char aFullDocumentat[]
.rodata:0000000000005029 aFullDocumentat db 'Full documentation <%s%s>',0Ah,0
.rodata:0000000000005029                                         ; DATA XREF: usage:loc_1BE9↑o
.rodata:0000000000005029                                         ; usage:loc_1CA6↑o
.rodata:0000000000005044 ; const char dirname[]
.rodata:0000000000005044 dirname         db '/usr/local/share/locale',0
.rodata:0000000000005044                                         ; DATA XREF: main+31↑o
.rodata:000000000000505C aGiuseppeScriva db 'Giuseppe Scrivano',0
.rodata:000000000000505C                                         ; DATA XREF: main+F9↑o
.rodata:000000000000506E ; const char msgid[]
.rodata:000000000000506E msgid           db 'invalid number',0   ; DATA XREF: main+A3↑o
.rodata:000000000000507D ; const char aExtraOperandS[]
.rodata:000000000000507D aExtraOperandS  db 'extra operand %s',0 ; DATA XREF: main+171↑o
.rodata:000000000000508E aLu             db '%lu',0Ah,0          ; DATA XREF: main:loc_183B↑o
.rodata:0000000000005093 aAll            db 'all',0              ; DATA XREF: .data.rel.ro:longopts↓o
.rodata:0000000000005097 aIgnore         db 'ignore',0           ; DATA XREF: .data.rel.ro:0000000000206B80↓o
.rodata:000000000000509E aHelp           db 'help',0             ; DATA XREF: .data.rel.ro:0000000000206BA0↓o
.rodata:00000000000050A3 aVersion        db 'version',0          ; DATA XREF: .data.rel.ro:0000000000206BC0↓o
.rodata:00000000000050AB                 align 10h
.rodata:00000000000050B0 ; const char aTrySHelpForMor[]
.rodata:00000000000050B0 aTrySHelpForMor db 'Try ',27h,'%s --help',27h,' for more information.',0Ah,0
.rodata:00000000000050B0                                         ; DATA XREF: usage+2F↑o
.rodata:00000000000050D7                 align 8
.rodata:00000000000050D8 ; const char aPrintTheNumber[]
.rodata:00000000000050D8 aPrintTheNumber db 'Print the number of processing units available to the current pro'
.rodata:00000000000050D8                                         ; DATA XREF: usage+84↑o
.rodata:00000000000050D8                 db 'cess,',0Ah
.rodata:00000000000050D8                 db 'which may be less than the number of online processors',0Ah
.rodata:00000000000050D8                 db 0Ah,0
.rodata:0000000000005158 ; const char aAllPrintTheNum[]
.rodata:0000000000005158 aAllPrintTheNum db '      --all      print the number of installed processors',0Ah
.rodata:0000000000005158                                         ; DATA XREF: usage+A9↑o
.rodata:0000000000005158                 db '      --ignore=N  if possible, exclude N processing units',0Ah,0
.rodata:00000000000051CD                 align 10h
.rodata:00000000000051D0 ; const char aHelpDisplayThi[]
.rodata:00000000000051D0 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.rodata:00000000000051D0                                         ; DATA XREF: usage+CE↑o
.rodata:00000000000051FD                 align 20h
.rodata:0000000000005200 ; const char aVersionOutputV[]
.rodata:0000000000005200 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.rodata:0000000000005200                                         ; DATA XREF: usage+F3↑o
.rodata:0000000000005236                 align 8
.rodata:0000000000005238 aHttpsWwwGnuOrg db 'https://www.gnu.org/software/coreutils/',0
.rodata:0000000000005238                                         ; DATA XREF: usage+1EF↑o
.rodata:0000000000005238                                         ; usage+253↑o ...
.rodata:0000000000005260 ; const char aReportAnyTrans[]
.rodata:0000000000005260 aReportAnyTrans db 'Report any translation bugs to <https://translationproject.org/te'
.rodata:0000000000005260                                         ; DATA XREF: usage+347↑o
.rodata:0000000000005260                 db 'am/>',0Ah,0
.rodata:00000000000052A7                 align 8
.rodata:00000000000052A8 ; const char aOrAvailableLoc[]
.rodata:00000000000052A8 aOrAvailableLoc db 'or available locally via: info ',27h,'(coreutils) %s%s',27h,0Ah,0
.rodata:00000000000052A8                                         ; DATA XREF: usage:loc_1C2E↑o
.rodata:00000000000052DB a831            db '8.31',0             ; DATA XREF: .data:Version↓o
.rodata:00000000000052E0 ; const char aWriteError[]
.rodata:00000000000052E0 aWriteError     db 'write error',0      ; DATA XREF: close_stdout:loc_1D83↑o
.rodata:00000000000052EC ; const char format[]
.rodata:00000000000052EC format          db '%s: %s',0           ; DATA XREF: close_stdout+6C↑o
.rodata:00000000000052EC                                         ; xnumtoumax+7D↑o ...
.rodata:00000000000052F3 ; const char name[]
.rodata:00000000000052F3 name            db 'OMP_NUM_THREADS',0  ; DATA XREF: num_processors:loc_1FC0↑o
.rodata:0000000000005303 ; const char aOmpThreadLimit[]
.rodata:0000000000005303 aOmpThreadLimit db 'OMP_THREAD_LIMIT',0 ; DATA XREF: num_processors+60↑o
.rodata:0000000000005303                                         ; num_processors:loc_2028↑o
.rodata:0000000000005314                 align 8
.rodata:0000000000005318 aANullArgv0WasP db 'A NULL argv[0] was passed through an exec system call.',0Ah,0
.rodata:0000000000005318                                         ; DATA XREF: set_program_name+84↑o
.rodata:0000000000005350 aLibs           db '/.libs/',0          ; DATA XREF: set_program_name+2C↑o
.rodata:0000000000005358 aLt             db 'lt-',0              ; DATA XREF: set_program_name+44↑o
.rodata:000000000000535C unk_535C        db 0E2h                 ; DATA XREF: gettext_quote+CE↑o
.rodata:000000000000535D                 db  80h
.rodata:000000000000535E                 db  98h
.rodata:000000000000535F                 db    0
.rodata:0000000000005360 unk_5360        db 0E2h                 ; DATA XREF: gettext_quote+D5↑o
.rodata:0000000000005361                 db  80h
.rodata:0000000000005362                 db  99h
.rodata:0000000000005363                 db    0
.rodata:0000000000005364 unk_5364        db 0A1h                 ; DATA XREF: gettext_quote+74↑o
.rodata:0000000000005365                 db    7
.rodata:0000000000005366                 db  65h ; e
.rodata:0000000000005367                 db    0
.rodata:0000000000005368 unk_5368        db 0A1h                 ; DATA XREF: gettext_quote+7B↑o
.rodata:0000000000005369                 db 0AFh
.rodata:000000000000536A                 db    0
.rodata:000000000000536B unk_536B        db  22h ; "             ; DATA XREF: gettext_quote:loc_2190↑o
.rodata:000000000000536B                                         ; quotearg_buffer_restyled:loc_2F4B↑o ...
.rodata:000000000000536C                 db    0
.rodata:000000000000536D ; const char asc_536D[2]
.rodata:000000000000536D asc_536D        db 27h,0                ; DATA XREF: gettext_quote+27↑o
.rodata:000000000000536D                                         ; quotearg_buffer_restyled:loc_2313↑o ...
.rodata:000000000000536F ; const char asc_536F[2]
.rodata:000000000000536F asc_536F        db '`',0                ; DATA XREF: quotearg_buffer_restyled+D9B↑o
.rodata:000000000000536F                                         ; quotearg_buffer_restyled+DB6↑o
.rodata:0000000000005371 aLiteral        db 'literal',0          ; DATA XREF: .data.rel.ro:quoting_style_args↓o
.rodata:0000000000005379 aShell          db 'shell',0            ; DATA XREF: .data.rel.ro:0000000000206C08↓o
.rodata:000000000000537F aShellAlways    db 'shell-always',0     ; DATA XREF: .data.rel.ro:0000000000206C10↓o
.rodata:000000000000538C aShellEscape    db 'shell-escape',0     ; DATA XREF: .data.rel.ro:0000000000206C18↓o
.rodata:000000000000538C                                         ; .data.rel.ro:0000000000206C38↓o
.rodata:0000000000005399 aShellEscapeAlw db 'shell-escape-always',0
.rodata:0000000000005399                                         ; DATA XREF: .data.rel.ro:0000000000206C20↓o
.rodata:00000000000053AD aCMaybe         db 'c-maybe',0          ; DATA XREF: .data.rel.ro:0000000000206C30↓o
.rodata:00000000000053B5 aClocale        db 'clocale',0          ; DATA XREF: .data.rel.ro:0000000000206C48↓o
.rodata:00000000000053BD                 align 20h
.rodata:00000000000053C0 jpt_22F1        dd offset loc_309A - 53C0h
.rodata:00000000000053C0                                         ; DATA XREF: quotearg_buffer_restyled+80↑o
.rodata:00000000000053C0                                         ; quotearg_buffer_restyled+8A↑r
.rodata:00000000000053C0                 dd offset loc_22F3 - 53C0h ; jump table for switch statement
.rodata:00000000000053C0                 dd offset loc_32C8 - 53C0h
.rodata:00000000000053C0                 dd offset loc_30D4 - 53C0h
.rodata:00000000000053C0                 dd offset loc_2EC4 - 53C0h
.rodata:00000000000053C0                 dd offset loc_2F20 - 53C0h
.rodata:00000000000053C0                 dd offset loc_2F75 - 53C0h
.rodata:00000000000053C0                 dd offset loc_2FBA - 53C0h
.rodata:00000000000053C0                 dd offset loc_2FF4 - 53C0h
.rodata:00000000000053C0                 dd offset loc_2FF4 - 53C0h
.rodata:00000000000053C0                 dd offset loc_2FF4 - 53C0h
.rodata:00000000000053EC jpt_244E        dd offset loc_2670 - 53ECh, offset def_244E - 53ECh, offset def_244E - 53ECh
.rodata:00000000000053EC                                         ; DATA XREF: quotearg_buffer_restyled+1DD↑o
.rodata:00000000000053EC                                         ; quotearg_buffer_restyled+1E7↑r
.rodata:00000000000053EC                 dd offset def_244E - 53ECh, offset def_244E - 53ECh, offset def_244E - 53ECh ; jump table for switch statement
.rodata:00000000000053EC                 dd offset def_244E - 53ECh, offset loc_26B0 - 53ECh, offset loc_25B8 - 53ECh
.rodata:00000000000053EC                 dd offset loc_2578 - 53ECh, offset loc_2740 - 53ECh, offset loc_2730 - 53ECh
.rodata:00000000000053EC                 dd offset loc_2720 - 53ECh, offset loc_2710 - 53ECh, offset def_244E - 53ECh
.rodata:00000000000053EC                 dd offset def_244E - 53ECh, offset def_244E - 53ECh, offset def_244E - 53ECh
.rodata:00000000000053EC                 dd offset def_244E - 53ECh, offset def_244E - 53ECh, offset def_244E - 53ECh
.rodata:00000000000053EC                 dd offset def_244E - 53ECh, offset def_244E - 53ECh, offset def_244E - 53ECh
.rodata:00000000000053EC                 dd offset def_244E - 53ECh, offset def_244E - 53ECh, offset def_244E - 53ECh
.rodata:00000000000053EC                 dd offset def_244E - 53ECh, offset def_244E - 53ECh, offset def_244E - 53ECh
.rodata:00000000000053EC                 dd offset def_244E - 53ECh, offset def_244E - 53ECh, offset loc_2700 - 53ECh
.rodata:00000000000053EC                 dd offset loc_26F0 - 53ECh, offset loc_26F0 - 53ECh, offset loc_26C0 - 53ECh
.rodata:00000000000053EC                 dd offset loc_26F0 - 53ECh, offset loc_2698 - 53ECh, offset loc_26F0 - 53ECh
.rodata:00000000000053EC                 dd offset loc_2553 - 53ECh, offset loc_26F0 - 53ECh, offset loc_26F0 - 53ECh
.rodata:00000000000053EC                 dd offset loc_26F0 - 53ECh, offset loc_2698 - 53ECh, offset loc_2698 - 53ECh
.rodata:00000000000053EC                 dd offset loc_2698 - 53ECh, offset loc_2698 - 53ECh, offset loc_2698 - 53ECh
.rodata:00000000000053EC                 dd offset loc_2698 - 53ECh, offset loc_2698 - 53ECh, offset loc_2698 - 53ECh
.rodata:00000000000053EC                 dd offset loc_2698 - 53ECh, offset loc_2698 - 53ECh, offset loc_2698 - 53ECh
.rodata:00000000000053EC                 dd offset loc_2698 - 53ECh, offset loc_2698 - 53ECh, offset loc_2698 - 53ECh
.rodata:00000000000053EC                 dd offset loc_2698 - 53ECh, offset loc_2698 - 53ECh, offset loc_26F0 - 53ECh
.rodata:00000000000053EC                 dd offset loc_26F0 - 53ECh, offset loc_26F0 - 53ECh, offset loc_26F0 - 53ECh
.rodata:00000000000053EC                 dd offset loc_2523 - 53ECh, offset def_244E - 53ECh, offset loc_2698 - 53ECh
.rodata:00000000000053EC                 dd offset loc_2698 - 53ECh, offset loc_2698 - 53ECh, offset loc_2698 - 53ECh
.rodata:00000000000053EC                 dd offset loc_2698 - 53ECh, offset loc_2698 - 53ECh, offset loc_2698 - 53ECh
.rodata:00000000000053EC                 dd offset loc_2698 - 53ECh, offset loc_2698 - 53ECh, offset loc_2698 - 53ECh
.rodata:00000000000053EC                 dd offset loc_2698 - 53ECh, offset loc_2698 - 53ECh, offset loc_2698 - 53ECh
.rodata:00000000000053EC                 dd offset loc_2698 - 53ECh, offset loc_2698 - 53ECh, offset loc_2698 - 53ECh
.rodata:00000000000053EC                 dd offset loc_2698 - 53ECh, offset loc_2698 - 53ECh, offset loc_2698 - 53ECh
.rodata:00000000000053EC                 dd offset loc_2698 - 53ECh, offset loc_2698 - 53ECh, offset loc_2698 - 53ECh
.rodata:00000000000053EC                 dd offset loc_2698 - 53ECh, offset loc_2698 - 53ECh, offset loc_2698 - 53ECh
.rodata:00000000000053EC                 dd offset loc_2698 - 53ECh, offset loc_26F0 - 53ECh, offset loc_25C8 - 53ECh
.rodata:00000000000053EC                 dd offset loc_2698 - 53ECh, offset loc_26F0 - 53ECh, offset loc_2698 - 53ECh
.rodata:00000000000053EC                 dd offset loc_26F0 - 53ECh, offset loc_2698 - 53ECh, offset loc_2698 - 53ECh
.rodata:00000000000053EC                 dd offset loc_2698 - 53ECh, offset loc_2698 - 53ECh, offset loc_2698 - 53ECh
.rodata:00000000000053EC                 dd offset loc_2698 - 53ECh, offset loc_2698 - 53ECh, offset loc_2698 - 53ECh
.rodata:00000000000053EC                 dd offset loc_2698 - 53ECh, offset loc_2698 - 53ECh, offset loc_2698 - 53ECh
.rodata:00000000000053EC                 dd offset loc_2698 - 53ECh, offset loc_2698 - 53ECh, offset loc_2698 - 53ECh
.rodata:00000000000053EC                 dd offset loc_2698 - 53ECh, offset loc_2698 - 53ECh, offset loc_2698 - 53ECh
.rodata:00000000000053EC                 dd offset loc_2698 - 53ECh, offset loc_2698 - 53ECh, offset loc_2698 - 53ECh
.rodata:00000000000053EC                 dd offset loc_2698 - 53ECh, offset loc_2698 - 53ECh, offset loc_2698 - 53ECh
.rodata:00000000000053EC                 dd offset loc_2698 - 53ECh, offset loc_2698 - 53ECh, offset loc_2698 - 53ECh
.rodata:00000000000053EC                 dd offset loc_2453 - 53ECh, offset loc_26F0 - 53ECh, offset loc_2453 - 53ECh
.rodata:00000000000053EC                 dd offset loc_26C0 - 53ECh
.rodata:00000000000055E8 jpt_27DA        dd offset loc_2840 - 55E8h, offset def_27DA - 55E8h, offset def_27DA - 55E8h
.rodata:00000000000055E8                                         ; DATA XREF: quotearg_buffer_restyled+569↑o
.rodata:00000000000055E8                                         ; quotearg_buffer_restyled+573↑r
.rodata:00000000000055E8                 dd offset def_27DA - 55E8h, offset def_27DA - 55E8h, offset def_27DA - 55E8h ; jump table for switch statement
.rodata:00000000000055E8                 dd offset def_27DA - 55E8h, offset loc_2830 - 55E8h, offset loc_2980 - 55E8h
.rodata:00000000000055E8                 dd offset loc_2968 - 55E8h, offset loc_2818 - 55E8h, offset loc_2958 - 55E8h
.rodata:00000000000055E8                 dd offset loc_2800 - 55E8h, offset loc_2940 - 55E8h, offset def_27DA - 55E8h
.rodata:00000000000055E8                 dd offset def_27DA - 55E8h, offset def_27DA - 55E8h, offset def_27DA - 55E8h
.rodata:00000000000055E8                 dd offset def_27DA - 55E8h, offset def_27DA - 55E8h, offset def_27DA - 55E8h
.rodata:00000000000055E8                 dd offset def_27DA - 55E8h, offset def_27DA - 55E8h, offset def_27DA - 55E8h
.rodata:00000000000055E8                 dd offset def_27DA - 55E8h, offset def_27DA - 55E8h, offset def_27DA - 55E8h
.rodata:00000000000055E8                 dd offset def_27DA - 55E8h, offset def_27DA - 55E8h, offset def_27DA - 55E8h
.rodata:00000000000055E8                 dd offset def_27DA - 55E8h, offset def_27DA - 55E8h, offset loc_2928 - 55E8h
.rodata:00000000000055E8                 dd offset loc_2910 - 55E8h, offset loc_2910 - 55E8h, offset loc_28F8 - 55E8h
.rodata:00000000000055E8                 dd offset loc_2910 - 55E8h, offset loc_28E0 - 55E8h, offset loc_2910 - 55E8h
.rodata:00000000000055E8                 dd offset loc_2550 - 55E8h, offset loc_2910 - 55E8h, offset loc_2910 - 55E8h
.rodata:00000000000055E8                 dd offset loc_2910 - 55E8h, offset loc_28E0 - 55E8h, offset loc_28E0 - 55E8h
.rodata:00000000000055E8                 dd offset loc_28E0 - 55E8h, offset loc_28E0 - 55E8h, offset loc_28E0 - 55E8h
.rodata:00000000000055E8                 dd offset loc_28E0 - 55E8h, offset loc_28E0 - 55E8h, offset loc_28E0 - 55E8h
.rodata:00000000000055E8                 dd offset loc_28E0 - 55E8h, offset loc_28E0 - 55E8h, offset loc_28E0 - 55E8h
.rodata:00000000000055E8                 dd offset loc_28E0 - 55E8h, offset loc_28E0 - 55E8h, offset loc_28E0 - 55E8h
.rodata:00000000000055E8                 dd offset loc_28E0 - 55E8h, offset loc_28E0 - 55E8h, offset loc_2910 - 55E8h
.rodata:00000000000055E8                 dd offset loc_2910 - 55E8h, offset loc_2910 - 55E8h, offset loc_2910 - 55E8h
.rodata:00000000000055E8                 dd offset loc_2520 - 55E8h, offset def_27DA - 55E8h, offset loc_28E0 - 55E8h
.rodata:00000000000055E8                 dd offset loc_28E0 - 55E8h, offset loc_28E0 - 55E8h, offset loc_28E0 - 55E8h
.rodata:00000000000055E8                 dd offset loc_28E0 - 55E8h, offset loc_28E0 - 55E8h, offset loc_28E0 - 55E8h
.rodata:00000000000055E8                 dd offset loc_28E0 - 55E8h, offset loc_28E0 - 55E8h, offset loc_28E0 - 55E8h
.rodata:00000000000055E8                 dd offset loc_28E0 - 55E8h, offset loc_28E0 - 55E8h, offset loc_28E0 - 55E8h
.rodata:00000000000055E8                 dd offset loc_28E0 - 55E8h, offset loc_28E0 - 55E8h, offset loc_28E0 - 55E8h
.rodata:00000000000055E8                 dd offset loc_28E0 - 55E8h, offset loc_28E0 - 55E8h, offset loc_28E0 - 55E8h
.rodata:00000000000055E8                 dd offset loc_28E0 - 55E8h, offset loc_28E0 - 55E8h, offset loc_28E0 - 55E8h
.rodata:00000000000055E8                 dd offset loc_28E0 - 55E8h, offset loc_28E0 - 55E8h, offset loc_28E0 - 55E8h
.rodata:00000000000055E8                 dd offset loc_28E0 - 55E8h, offset loc_2910 - 55E8h, offset loc_27E0 - 55E8h
.rodata:00000000000055E8                 dd offset loc_28E0 - 55E8h, offset loc_2910 - 55E8h, offset loc_28E0 - 55E8h
.rodata:00000000000055E8                 dd offset loc_2910 - 55E8h, offset loc_28E0 - 55E8h, offset loc_28E0 - 55E8h
.rodata:00000000000055E8                 dd offset loc_28E0 - 55E8h, offset loc_28E0 - 55E8h, offset loc_28E0 - 55E8h
.rodata:00000000000055E8                 dd offset loc_28E0 - 55E8h, offset loc_28E0 - 55E8h, offset loc_28E0 - 55E8h
.rodata:00000000000055E8                 dd offset loc_28E0 - 55E8h, offset loc_28E0 - 55E8h, offset loc_28E0 - 55E8h
.rodata:00000000000055E8                 dd offset loc_28E0 - 55E8h, offset loc_28E0 - 55E8h, offset loc_28E0 - 55E8h
.rodata:00000000000055E8                 dd offset loc_28E0 - 55E8h, offset loc_28E0 - 55E8h, offset loc_28E0 - 55E8h
.rodata:00000000000055E8                 dd offset loc_28E0 - 55E8h, offset loc_28E0 - 55E8h, offset loc_28E0 - 55E8h
.rodata:00000000000055E8                 dd offset loc_28E0 - 55E8h, offset loc_28E0 - 55E8h, offset loc_28E0 - 55E8h
.rodata:00000000000055E8                 dd offset loc_28E0 - 55E8h, offset loc_28E0 - 55E8h, offset loc_28E0 - 55E8h
.rodata:00000000000055E8                 dd offset loc_2450 - 55E8h, offset loc_2910 - 55E8h, offset loc_2450 - 55E8h
.rodata:00000000000055E8                 dd offset loc_28F8 - 55E8h
.rodata:00000000000057E4                 align 20h
.rodata:0000000000005800                 public quoting_style_vals
.rodata:0000000000005800 quoting_style_vals db    0
.rodata:0000000000005801                 db    0
.rodata:0000000000005802                 db    0
.rodata:0000000000005803                 db    0
.rodata:0000000000005804                 db    1
.rodata:0000000000005805                 db    0
.rodata:0000000000005806                 db    0
.rodata:0000000000005807                 db    0
.rodata:0000000000005808                 db    2
.rodata:0000000000005809                 db    0
.rodata:000000000000580A                 db    0
.rodata:000000000000580B                 db    0
.rodata:000000000000580C                 db    3
.rodata:000000000000580D                 db    0
.rodata:000000000000580E                 db    0
.rodata:000000000000580F                 db    0
.rodata:0000000000005810                 db    4
.rodata:0000000000005811                 db    0
.rodata:0000000000005812                 db    0
.rodata:0000000000005813                 db    0
.rodata:0000000000005814                 db    5
.rodata:0000000000005815                 db    0
.rodata:0000000000005816                 db    0
.rodata:0000000000005817                 db    0
.rodata:0000000000005818                 db    6
.rodata:0000000000005819                 db    0
.rodata:000000000000581A                 db    0
.rodata:000000000000581B                 db    0
.rodata:000000000000581C                 db    7
.rodata:000000000000581D                 db    0
.rodata:000000000000581E                 db    0
.rodata:000000000000581F                 db    0
.rodata:0000000000005820                 db    8
.rodata:0000000000005821                 db    0
.rodata:0000000000005822                 db    0
.rodata:0000000000005823                 db    0
.rodata:0000000000005824                 db    9
.rodata:0000000000005825                 db    0
.rodata:0000000000005826                 db    0
.rodata:0000000000005827                 db    0
.rodata:0000000000005828 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: version_etc_arn+23↑o
.rodata:0000000000005834 aSS_0           db '%s %s',0Ah,0        ; DATA XREF: version_etc_arn+13E↑o
.rodata:000000000000583B ; const char aC_0[]
.rodata:000000000000583B aC_0            db '(C)',0              ; DATA XREF: version_etc_arn:loc_3E3C↑o
.rodata:000000000000583F ; const char aWrittenByS[]
.rodata:000000000000583F aWrittenByS     db 'Written by %s.',0Ah,0
.rodata:000000000000583F                                         ; DATA XREF: version_etc_arn+1BB↑o
.rodata:000000000000584F ; const char aWrittenBySAndS[]
.rodata:000000000000584F aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.rodata:000000000000584F                                         ; DATA XREF: version_etc_arn+1FC↑o
.rodata:0000000000005866 ; const char aWrittenBySSAnd[]
.rodata:0000000000005866 aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.rodata:0000000000005866                                         ; DATA XREF: version_etc_arn+248↑o
.rodata:0000000000005882 ; const char aReportBugsToS[]
.rodata:0000000000005882 aReportBugsToS  db 0Ah                  ; DATA XREF: emit_bug_reporting_address+1↑o
.rodata:0000000000005882                 db 'Report bugs to: %s',0Ah,0
.rodata:0000000000005897 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.rodata:0000000000005897                                         ; DATA XREF: emit_bug_reporting_address+14↑o
.rodata:00000000000058AD ; const char aSHomePageS[]
.rodata:00000000000058AD aSHomePageS     db '%s home page: <%s>',0Ah,0
.rodata:00000000000058AD                                         ; DATA XREF: emit_bug_reporting_address+2A↑o
.rodata:00000000000058C1                 align 8
.rodata:00000000000058C8 ; const char aLicenseGplv3Gn[]
.rodata:00000000000058C8 aLicenseGplv3Gn db 0Ah                  ; DATA XREF: version_etc_arn+6E↑o
.rodata:00000000000058C8                 db 'License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licen'
.rodata:00000000000058C8                 db 'ses/gpl.html>.',0Ah
.rodata:00000000000058C8                 db 'This is free software: you are free to change and redistribute it'
.rodata:00000000000058C8                 db '.',0Ah
.rodata:00000000000058C8                 db 'There is NO WARRANTY, to the extent permitted by law.',0Ah
.rodata:00000000000058C8                 db 0Ah,0
.rodata:0000000000005994                 align 8
.rodata:0000000000005998 ; const char aWrittenBySSSAn[]
.rodata:0000000000005998 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005998                                         ; DATA XREF: version_etc_arn:loc_4090↑o
.rodata:0000000000005998                 db 'and %s.',0Ah,0
.rodata:00000000000059B8 ; const char aWrittenBySSSSA[]
.rodata:00000000000059B8 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000059B8                                         ; DATA XREF: version_etc_arn+2EC↑o
.rodata:00000000000059B8                 db '%s, and %s.',0Ah,0
.rodata:00000000000059DC                 align 20h
.rodata:00000000000059E0 ; const char aWrittenBySSSSS_1[]
.rodata:00000000000059E0 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000059E0                                         ; DATA XREF: version_etc_arn+320↑o
.rodata:00000000000059E0                 db '%s, %s, and %s.',0Ah,0
.rodata:0000000000005A08 ; const char aWrittenBySSSSS_2[]
.rodata:0000000000005A08 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005A08                                         ; DATA XREF: version_etc_arn+388↑o
.rodata:0000000000005A08                 db '%s, %s, %s, and %s.',0Ah,0
.rodata:0000000000005A34                 align 8
.rodata:0000000000005A38 ; const char aWrittenBySSSSS[]
.rodata:0000000000005A38 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005A38                                         ; DATA XREF: version_etc_arn+B8↑o
.rodata:0000000000005A38                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000005A38                 db 'and %s.',0Ah,0
.rodata:0000000000005A68 ; const char aWrittenBySSSSS_0[]
.rodata:0000000000005A68 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005A68                                         ; DATA XREF: version_etc_arn+168↑o
.rodata:0000000000005A68                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000005A68                 db '%s, and %s.',0Ah,0
.rodata:0000000000005A9C                 align 20h
.rodata:0000000000005AA0 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005AA0                                         ; DATA XREF: version_etc_arn+3E5↑o
.rodata:0000000000005AA0                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000005AA0                 db '%s, %s, and others.',0Ah,0
.rodata:0000000000005ADC                 align 20h
.rodata:0000000000005AE0 ; const char aGeneralHelpUsi[]
.rodata:0000000000005AE0 aGeneralHelpUsi db 'General help using GNU software: <https://www.gnu.org/gethelp/>',0Ah
.rodata:0000000000005AE0                                         ; DATA XREF: emit_bug_reporting_address+61↑o
.rodata:0000000000005AE0                 db 0
.rodata:0000000000005B21                 align 4
.rodata:0000000000005B24 jpt_3EA4        dd offset loc_3F26 - 5B24h
.rodata:0000000000005B24                                         ; DATA XREF: version_etc_arn+96↑o
.rodata:0000000000005B24                                         ; version_etc_arn+9D↑r
.rodata:0000000000005B24                 dd offset loc_3FB8 - 5B24h ; jump table for switch statement
.rodata:0000000000005B24                 dd offset loc_3FF8 - 5B24h
.rodata:0000000000005B24                 dd offset loc_4040 - 5B24h
.rodata:0000000000005B24                 dd offset loc_4090 - 5B24h
.rodata:0000000000005B24                 dd offset loc_40E8 - 5B24h
.rodata:0000000000005B24                 dd offset loc_4118 - 5B24h
.rodata:0000000000005B24                 dd offset loc_4180 - 5B24h
.rodata:0000000000005B24                 dd offset loc_3EB0 - 5B24h
.rodata:0000000000005B24                 dd offset loc_3F60 - 5B24h
.rodata:0000000000005B4C                 align 20h
.rodata:0000000000005B60                 public version_etc_copyright
.rodata:0000000000005B60 version_etc_copyright db 'Copyright %s %d Free Software Foundation, Inc.',0
.rodata:0000000000005B60                                         ; DATA XREF: version_etc_arn+4F↑o
.rodata:0000000000005B8F ; const char aMemoryExhauste[]
.rodata:0000000000005B8F aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: xalloc_die↑o
.rodata:0000000000005BA0 ; const char file[]
.rodata:0000000000005BA0 file            db '../coreutils-8.31/lib/xstrtol.c',0
.rodata:0000000000005BA0                                         ; DATA XREF: xstrtoumax+38C↑o
.rodata:0000000000005BC0 ; const char assertion[]
.rodata:0000000000005BC0 assertion       db '0 <= strtol_base && strtol_base <= 36',0
.rodata:0000000000005BC0                                         ; DATA XREF: xstrtoumax+393↑o
.rodata:0000000000005BE6                 align 8
.rodata:0000000000005BE8 jpt_49B6        dd offset loc_4B06 - 5BE8h, offset def_49B6 - 5BE8h, offset def_49B6 - 5BE8h
.rodata:0000000000005BE8                                         ; DATA XREF: xstrtoumax+1C4↑o
.rodata:0000000000005BE8                                         ; xstrtoumax+1CF↑r
.rodata:0000000000005BE8                 dd offset loc_4AE3 - 5BE8h, offset def_49B6 - 5BE8h, offset loc_4B1C - 5BE8h ; jump table for switch statement
.rodata:0000000000005BE8                 dd offset def_49B6 - 5BE8h, offset def_49B6 - 5BE8h, offset def_49B6 - 5BE8h
.rodata:0000000000005BE8                 dd offset loc_4A9F - 5BE8h, offset def_49B6 - 5BE8h, offset loc_49B8 - 5BE8h
.rodata:0000000000005BE8                 dd offset def_49B6 - 5BE8h, offset def_49B6 - 5BE8h, offset loc_4AC0 - 5BE8h
.rodata:0000000000005BE8                 dd offset def_49B6 - 5BE8h, offset def_49B6 - 5BE8h, offset def_49B6 - 5BE8h
.rodata:0000000000005BE8                 dd offset loc_4A7F - 5BE8h, offset def_49B6 - 5BE8h, offset def_49B6 - 5BE8h
.rodata:0000000000005BE8                 dd offset def_49B6 - 5BE8h, offset def_49B6 - 5BE8h, offset loc_4A5A - 5BE8h
.rodata:0000000000005BE8                 dd offset loc_4A34 - 5BE8h, offset def_49B6 - 5BE8h, offset def_49B6 - 5BE8h
.rodata:0000000000005BE8                 dd offset def_49B6 - 5BE8h, offset def_49B6 - 5BE8h, offset def_49B6 - 5BE8h
.rodata:0000000000005BE8                 dd offset def_49B6 - 5BE8h, offset def_49B6 - 5BE8h, offset loc_4A1D - 5BE8h
.rodata:0000000000005BE8                 dd offset loc_49E0 - 5BE8h, offset def_49B6 - 5BE8h, offset def_49B6 - 5BE8h
.rodata:0000000000005BE8                 dd offset def_49B6 - 5BE8h, offset loc_4B1C - 5BE8h, offset def_49B6 - 5BE8h
.rodata:0000000000005BE8                 dd offset def_49B6 - 5BE8h, offset def_49B6 - 5BE8h, offset loc_4A9F - 5BE8h
.rodata:0000000000005BE8                 dd offset def_49B6 - 5BE8h, offset loc_49B8 - 5BE8h, offset def_49B6 - 5BE8h
.rodata:0000000000005BE8                 dd offset def_49B6 - 5BE8h, offset def_49B6 - 5BE8h, offset def_49B6 - 5BE8h
.rodata:0000000000005BE8                 dd offset def_49B6 - 5BE8h, offset def_49B6 - 5BE8h, offset loc_4A7F - 5BE8h
.rodata:0000000000005BE8                 dd offset def_49B6 - 5BE8h, offset def_49B6 - 5BE8h, offset loc_4A07 - 5BE8h
.rodata:0000000000005CC0 ; const char _PRETTY_FUNCTION___4162[]
.rodata:0000000000005CC0 __PRETTY_FUNCTION___4162 db 'xstrtoumax',0
.rodata:0000000000005CC0                                         ; DATA XREF: xstrtoumax:loc_4B65↑o
.rodata:0000000000005CCB aC              db 'C',0                ; DATA XREF: hard_locale+18↑o
.rodata:0000000000005CCD aPosix          db 'POSIX',0            ; DATA XREF: hard_locale:loc_4D50↑o
.rodata:0000000000005CD3 aAscii          db 'ASCII',0            ; DATA XREF: locale_charset+16↑o
.rodata:0000000000005CD3                                         ; locale_charset:loc_4DA0↑o
.rodata:0000000000005CD3 _rodata         ends
.rodata:0000000000005CD3
LOAD:0000000000005CD9 ; ===========================================================================
LOAD:0000000000005CD9
LOAD:0000000000005CD9 ; Segment type: Pure code
LOAD:0000000000005CD9 ; Segment permissions: Read/Execute
LOAD:0000000000005CD9 LOAD            segment byte public 'CODE' use64
LOAD:0000000000005CD9                 assume cs:LOAD
LOAD:0000000000005CD9                 ;org 5CD9h
LOAD:0000000000005CD9                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000005CD9                 align 4
LOAD:0000000000005CD9 LOAD            ends
LOAD:0000000000005CD9
.eh_frame_hdr:0000000000005CDC ; ===========================================================================
.eh_frame_hdr:0000000000005CDC
.eh_frame_hdr:0000000000005CDC ; Segment type: Pure data
.eh_frame_hdr:0000000000005CDC ; Segment permissions: Read
.eh_frame_hdr:0000000000005CDC _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:0000000000005CDC                 assume cs:_eh_frame_hdr
.eh_frame_hdr:0000000000005CDC                 ;org 5CDCh
.eh_frame_hdr:0000000000005CDC __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000000001A0↑o
.eh_frame_hdr:0000000000005CDD                 db  1Bh
.eh_frame_hdr:0000000000005CDE                 db    3
.eh_frame_hdr:0000000000005CDF                 db  3Bh ; ;
.eh_frame_hdr:0000000000005CE0                 db  68h ; h
.eh_frame_hdr:0000000000005CE1                 db    2
.eh_frame_hdr:0000000000005CE2                 db    0
.eh_frame_hdr:0000000000005CE3                 db    0
.eh_frame_hdr:0000000000005CE4                 db  4Ch ; L
.eh_frame_hdr:0000000000005CE5                 db    0
.eh_frame_hdr:0000000000005CE6                 db    0
.eh_frame_hdr:0000000000005CE7                 db    0
.eh_frame_hdr:0000000000005CE8                 db    4
.eh_frame_hdr:0000000000005CE9                 db 0B7h
.eh_frame_hdr:0000000000005CEA                 db 0FFh
.eh_frame_hdr:0000000000005CEB                 db 0FFh
.eh_frame_hdr:0000000000005CEC                 db 0B4h
.eh_frame_hdr:0000000000005CED                 db    2
.eh_frame_hdr:0000000000005CEE                 db    0
.eh_frame_hdr:0000000000005CEF                 db    0
.eh_frame_hdr:0000000000005CF0                 db    4
.eh_frame_hdr:0000000000005CF1                 db 0BAh
.eh_frame_hdr:0000000000005CF2                 db 0FFh
.eh_frame_hdr:0000000000005CF3                 db 0FFh
.eh_frame_hdr:0000000000005CF4                 db 0DCh
.eh_frame_hdr:0000000000005CF5                 db    2
.eh_frame_hdr:0000000000005CF6                 db    0
.eh_frame_hdr:0000000000005CF7                 db    0
.eh_frame_hdr:0000000000005CF8                 db  14h
.eh_frame_hdr:0000000000005CF9                 db 0BAh
.eh_frame_hdr:0000000000005CFA                 db 0FFh
.eh_frame_hdr:0000000000005CFB                 db 0FFh
.eh_frame_hdr:0000000000005CFC                 db  20h
.eh_frame_hdr:0000000000005CFD                 db    3
.eh_frame_hdr:0000000000005CFE                 db    0
.eh_frame_hdr:0000000000005CFF                 db    0
.eh_frame_hdr:0000000000005D00                 db 0C4h
.eh_frame_hdr:0000000000005D01                 db 0BBh
.eh_frame_hdr:0000000000005D02                 db 0FFh
.eh_frame_hdr:0000000000005D03                 db 0FFh
.eh_frame_hdr:0000000000005D04                 db  84h
.eh_frame_hdr:0000000000005D05                 db    2
.eh_frame_hdr:0000000000005D06                 db    0
.eh_frame_hdr:0000000000005D07                 db    0
.eh_frame_hdr:0000000000005D08                 db 0D4h
.eh_frame_hdr:0000000000005D09                 db 0BCh
.eh_frame_hdr:0000000000005D0A                 db 0FFh
.eh_frame_hdr:0000000000005D0B                 db 0FFh
.eh_frame_hdr:0000000000005D0C                 db 0F4h
.eh_frame_hdr:0000000000005D0D                 db    2
.eh_frame_hdr:0000000000005D0E                 db    0
.eh_frame_hdr:0000000000005D0F                 db    0
.eh_frame_hdr:0000000000005D10                 db  44h ; D
.eh_frame_hdr:0000000000005D11                 db 0C0h
.eh_frame_hdr:0000000000005D12                 db 0FFh
.eh_frame_hdr:0000000000005D13                 db 0FFh
.eh_frame_hdr:0000000000005D14                 db  5Ch ; \
.eh_frame_hdr:0000000000005D15                 db    3
.eh_frame_hdr:0000000000005D16                 db    0
.eh_frame_hdr:0000000000005D17                 db    0
.eh_frame_hdr:0000000000005D18                 db  54h ; T
.eh_frame_hdr:0000000000005D19                 db 0C0h
.eh_frame_hdr:0000000000005D1A                 db 0FFh
.eh_frame_hdr:0000000000005D1B                 db 0FFh
.eh_frame_hdr:0000000000005D1C                 db  70h ; p
.eh_frame_hdr:0000000000005D1D                 db    3
.eh_frame_hdr:0000000000005D1E                 db    0
.eh_frame_hdr:0000000000005D1F                 db    0
.eh_frame_hdr:0000000000005D20                 db  64h ; d
.eh_frame_hdr:0000000000005D21                 db 0C0h
.eh_frame_hdr:0000000000005D22                 db 0FFh
.eh_frame_hdr:0000000000005D23                 db 0FFh
.eh_frame_hdr:0000000000005D24                 db  84h
.eh_frame_hdr:0000000000005D25                 db    3
.eh_frame_hdr:0000000000005D26                 db    0
.eh_frame_hdr:0000000000005D27                 db    0
.eh_frame_hdr:0000000000005D28                 db  14h
.eh_frame_hdr:0000000000005D29                 db 0C1h
.eh_frame_hdr:0000000000005D2A                 db 0FFh
.eh_frame_hdr:0000000000005D2B                 db 0FFh
.eh_frame_hdr:0000000000005D2C                 db 0B4h
.eh_frame_hdr:0000000000005D2D                 db    3
.eh_frame_hdr:0000000000005D2E                 db    0
.eh_frame_hdr:0000000000005D2F                 db    0
.eh_frame_hdr:0000000000005D30                 db  84h
.eh_frame_hdr:0000000000005D31                 db 0C1h
.eh_frame_hdr:0000000000005D32                 db 0FFh
.eh_frame_hdr:0000000000005D33                 db 0FFh
.eh_frame_hdr:0000000000005D34                 db 0D8h
.eh_frame_hdr:0000000000005D35                 db    3
.eh_frame_hdr:0000000000005D36                 db    0
.eh_frame_hdr:0000000000005D37                 db    0
.eh_frame_hdr:0000000000005D38                 db 0A4h
.eh_frame_hdr:0000000000005D39                 db 0C2h
.eh_frame_hdr:0000000000005D3A                 db 0FFh
.eh_frame_hdr:0000000000005D3B                 db 0FFh
.eh_frame_hdr:0000000000005D3C                 db 0F4h
.eh_frame_hdr:0000000000005D3D                 db    3
.eh_frame_hdr:0000000000005D3E                 db    0
.eh_frame_hdr:0000000000005D3F                 db    0
.eh_frame_hdr:0000000000005D40                 db 0F4h
.eh_frame_hdr:0000000000005D41                 db 0C3h
.eh_frame_hdr:0000000000005D42                 db 0FFh
.eh_frame_hdr:0000000000005D43                 db 0FFh
.eh_frame_hdr:0000000000005D44                 db  3Ch ; <
.eh_frame_hdr:0000000000005D45                 db    4
.eh_frame_hdr:0000000000005D46                 db    0
.eh_frame_hdr:0000000000005D47                 db    0
.eh_frame_hdr:0000000000005D48                 db  94h
.eh_frame_hdr:0000000000005D49                 db 0C4h
.eh_frame_hdr:0000000000005D4A                 db 0FFh
.eh_frame_hdr:0000000000005D4B                 db 0FFh
.eh_frame_hdr:0000000000005D4C                 db  5Ch ; \
.eh_frame_hdr:0000000000005D4D                 db    4
.eh_frame_hdr:0000000000005D4E                 db    0
.eh_frame_hdr:0000000000005D4F                 db    0
.eh_frame_hdr:0000000000005D50                 db  84h
.eh_frame_hdr:0000000000005D51                 db 0C5h
.eh_frame_hdr:0000000000005D52                 db 0FFh
.eh_frame_hdr:0000000000005D53                 db 0FFh
.eh_frame_hdr:0000000000005D54                 db 0A0h
.eh_frame_hdr:0000000000005D55                 db    4
.eh_frame_hdr:0000000000005D56                 db    0
.eh_frame_hdr:0000000000005D57                 db    0
.eh_frame_hdr:0000000000005D58                 db 0C4h
.eh_frame_hdr:0000000000005D59                 db 0D7h
.eh_frame_hdr:0000000000005D5A                 db 0FFh
.eh_frame_hdr:0000000000005D5B                 db 0FFh
.eh_frame_hdr:0000000000005D5C                 db  18h
.eh_frame_hdr:0000000000005D5D                 db    5
.eh_frame_hdr:0000000000005D5E                 db    0
.eh_frame_hdr:0000000000005D5F                 db    0
.eh_frame_hdr:0000000000005D60                 db  74h ; t
.eh_frame_hdr:0000000000005D61                 db 0D9h
.eh_frame_hdr:0000000000005D62                 db 0FFh
.eh_frame_hdr:0000000000005D63                 db 0FFh
.eh_frame_hdr:0000000000005D64                 db  84h
.eh_frame_hdr:0000000000005D65                 db    5
.eh_frame_hdr:0000000000005D66                 db    0
.eh_frame_hdr:0000000000005D67                 db    0
.eh_frame_hdr:0000000000005D68                 db 0B4h
.eh_frame_hdr:0000000000005D69                 db 0D9h
.eh_frame_hdr:0000000000005D6A                 db 0FFh
.eh_frame_hdr:0000000000005D6B                 db 0FFh
.eh_frame_hdr:0000000000005D6C                 db 0B0h
.eh_frame_hdr:0000000000005D6D                 db    5
.eh_frame_hdr:0000000000005D6E                 db    0
.eh_frame_hdr:0000000000005D6F                 db    0
.eh_frame_hdr:0000000000005D70                 db 0D4h
.eh_frame_hdr:0000000000005D71                 db 0D9h
.eh_frame_hdr:0000000000005D72                 db 0FFh
.eh_frame_hdr:0000000000005D73                 db 0FFh
.eh_frame_hdr:0000000000005D74                 db 0C4h
.eh_frame_hdr:0000000000005D75                 db    5
.eh_frame_hdr:0000000000005D76                 db    0
.eh_frame_hdr:0000000000005D77                 db    0
.eh_frame_hdr:0000000000005D78                 db 0F4h
.eh_frame_hdr:0000000000005D79                 db 0D9h
.eh_frame_hdr:0000000000005D7A                 db 0FFh
.eh_frame_hdr:0000000000005D7B                 db 0FFh
.eh_frame_hdr:0000000000005D7C                 db 0D8h
.eh_frame_hdr:0000000000005D7D                 db    5
.eh_frame_hdr:0000000000005D7E                 db    0
.eh_frame_hdr:0000000000005D7F                 db    0
.eh_frame_hdr:0000000000005D80                 db  34h ; 4
.eh_frame_hdr:0000000000005D81                 db 0DAh
.eh_frame_hdr:0000000000005D82                 db 0FFh
.eh_frame_hdr:0000000000005D83                 db 0FFh
.eh_frame_hdr:0000000000005D84                 db 0ECh
.eh_frame_hdr:0000000000005D85                 db    5
.eh_frame_hdr:0000000000005D86                 db    0
.eh_frame_hdr:0000000000005D87                 db    0
.eh_frame_hdr:0000000000005D88                 db  54h ; T
.eh_frame_hdr:0000000000005D89                 db 0DAh
.eh_frame_hdr:0000000000005D8A                 db 0FFh
.eh_frame_hdr:0000000000005D8B                 db 0FFh
.eh_frame_hdr:0000000000005D8C                 db    0
.eh_frame_hdr:0000000000005D8D                 db    6
.eh_frame_hdr:0000000000005D8E                 db    0
.eh_frame_hdr:0000000000005D8F                 db    0
.eh_frame_hdr:0000000000005D90                 db  84h
.eh_frame_hdr:0000000000005D91                 db 0DAh
.eh_frame_hdr:0000000000005D92                 db 0FFh
.eh_frame_hdr:0000000000005D93                 db 0FFh
.eh_frame_hdr:0000000000005D94                 db  14h
.eh_frame_hdr:0000000000005D95                 db    6
.eh_frame_hdr:0000000000005D96                 db    0
.eh_frame_hdr:0000000000005D97                 db    0
.eh_frame_hdr:0000000000005D98                 db    4
.eh_frame_hdr:0000000000005D99                 db 0DBh
.eh_frame_hdr:0000000000005D9A                 db 0FFh
.eh_frame_hdr:0000000000005D9B                 db 0FFh
.eh_frame_hdr:0000000000005D9C                 db  68h ; h
.eh_frame_hdr:0000000000005D9D                 db    6
.eh_frame_hdr:0000000000005D9E                 db    0
.eh_frame_hdr:0000000000005D9F                 db    0
.eh_frame_hdr:0000000000005DA0                 db 0F4h
.eh_frame_hdr:0000000000005DA1                 db 0DBh
.eh_frame_hdr:0000000000005DA2                 db 0FFh
.eh_frame_hdr:0000000000005DA3                 db 0FFh
.eh_frame_hdr:0000000000005DA4                 db 0D4h
.eh_frame_hdr:0000000000005DA5                 db    6
.eh_frame_hdr:0000000000005DA6                 db    0
.eh_frame_hdr:0000000000005DA7                 db    0
.eh_frame_hdr:0000000000005DA8                 db    4
.eh_frame_hdr:0000000000005DA9                 db 0DCh
.eh_frame_hdr:0000000000005DAA                 db 0FFh
.eh_frame_hdr:0000000000005DAB                 db 0FFh
.eh_frame_hdr:0000000000005DAC                 db 0E8h
.eh_frame_hdr:0000000000005DAD                 db    6
.eh_frame_hdr:0000000000005DAE                 db    0
.eh_frame_hdr:0000000000005DAF                 db    0
.eh_frame_hdr:0000000000005DB0                 db 0A4h
.eh_frame_hdr:0000000000005DB1                 db 0DCh
.eh_frame_hdr:0000000000005DB2                 db 0FFh
.eh_frame_hdr:0000000000005DB3                 db 0FFh
.eh_frame_hdr:0000000000005DB4                 db  14h
.eh_frame_hdr:0000000000005DB5                 db    7
.eh_frame_hdr:0000000000005DB6                 db    0
.eh_frame_hdr:0000000000005DB7                 db    0
.eh_frame_hdr:0000000000005DB8                 db 0C4h
.eh_frame_hdr:0000000000005DB9                 db 0DCh
.eh_frame_hdr:0000000000005DBA                 db 0FFh
.eh_frame_hdr:0000000000005DBB                 db 0FFh
.eh_frame_hdr:0000000000005DBC                 db  28h ; (
.eh_frame_hdr:0000000000005DBD                 db    7
.eh_frame_hdr:0000000000005DBE                 db    0
.eh_frame_hdr:0000000000005DBF                 db    0
.eh_frame_hdr:0000000000005DC0                 db 0D4h
.eh_frame_hdr:0000000000005DC1                 db 0DCh
.eh_frame_hdr:0000000000005DC2                 db 0FFh
.eh_frame_hdr:0000000000005DC3                 db 0FFh
.eh_frame_hdr:0000000000005DC4                 db  3Ch ; <
.eh_frame_hdr:0000000000005DC5                 db    7
.eh_frame_hdr:0000000000005DC6                 db    0
.eh_frame_hdr:0000000000005DC7                 db    0
.eh_frame_hdr:0000000000005DC8                 db 0F4h
.eh_frame_hdr:0000000000005DC9                 db 0DCh
.eh_frame_hdr:0000000000005DCA                 db 0FFh
.eh_frame_hdr:0000000000005DCB                 db 0FFh
.eh_frame_hdr:0000000000005DCC                 db  50h ; P
.eh_frame_hdr:0000000000005DCD                 db    7
.eh_frame_hdr:0000000000005DCE                 db    0
.eh_frame_hdr:0000000000005DCF                 db    0
.eh_frame_hdr:0000000000005DD0                 db  14h
.eh_frame_hdr:0000000000005DD1                 db 0DDh
.eh_frame_hdr:0000000000005DD2                 db 0FFh
.eh_frame_hdr:0000000000005DD3                 db 0FFh
.eh_frame_hdr:0000000000005DD4                 db  64h ; d
.eh_frame_hdr:0000000000005DD5                 db    7
.eh_frame_hdr:0000000000005DD6                 db    0
.eh_frame_hdr:0000000000005DD7                 db    0
.eh_frame_hdr:0000000000005DD8                 db 0A4h
.eh_frame_hdr:0000000000005DD9                 db 0DDh
.eh_frame_hdr:0000000000005DDA                 db 0FFh
.eh_frame_hdr:0000000000005DDB                 db 0FFh
.eh_frame_hdr:0000000000005DDC                 db  80h
.eh_frame_hdr:0000000000005DDD                 db    7
.eh_frame_hdr:0000000000005DDE                 db    0
.eh_frame_hdr:0000000000005DDF                 db    0
.eh_frame_hdr:0000000000005DE0                 db  34h ; 4
.eh_frame_hdr:0000000000005DE1                 db 0DEh
.eh_frame_hdr:0000000000005DE2                 db 0FFh
.eh_frame_hdr:0000000000005DE3                 db 0FFh
.eh_frame_hdr:0000000000005DE4                 db  9Ch
.eh_frame_hdr:0000000000005DE5                 db    7
.eh_frame_hdr:0000000000005DE6                 db    0
.eh_frame_hdr:0000000000005DE7                 db    0
.eh_frame_hdr:0000000000005DE8                 db  44h ; D
.eh_frame_hdr:0000000000005DE9                 db 0DEh
.eh_frame_hdr:0000000000005DEA                 db 0FFh
.eh_frame_hdr:0000000000005DEB                 db 0FFh
.eh_frame_hdr:0000000000005DEC                 db 0B0h
.eh_frame_hdr:0000000000005DED                 db    7
.eh_frame_hdr:0000000000005DEE                 db    0
.eh_frame_hdr:0000000000005DEF                 db    0
.eh_frame_hdr:0000000000005DF0                 db  54h ; T
.eh_frame_hdr:0000000000005DF1                 db 0DEh
.eh_frame_hdr:0000000000005DF2                 db 0FFh
.eh_frame_hdr:0000000000005DF3                 db 0FFh
.eh_frame_hdr:0000000000005DF4                 db 0C4h
.eh_frame_hdr:0000000000005DF5                 db    7
.eh_frame_hdr:0000000000005DF6                 db    0
.eh_frame_hdr:0000000000005DF7                 db    0
.eh_frame_hdr:0000000000005DF8                 db 0F4h
.eh_frame_hdr:0000000000005DF9                 db 0DEh
.eh_frame_hdr:0000000000005DFA                 db 0FFh
.eh_frame_hdr:0000000000005DFB                 db 0FFh
.eh_frame_hdr:0000000000005DFC                 db 0E0h
.eh_frame_hdr:0000000000005DFD                 db    7
.eh_frame_hdr:0000000000005DFE                 db    0
.eh_frame_hdr:0000000000005DFF                 db    0
.eh_frame_hdr:0000000000005E00                 db    4
.eh_frame_hdr:0000000000005E01                 db 0DFh
.eh_frame_hdr:0000000000005E02                 db 0FFh
.eh_frame_hdr:0000000000005E03                 db 0FFh
.eh_frame_hdr:0000000000005E04                 db 0F4h
.eh_frame_hdr:0000000000005E05                 db    7
.eh_frame_hdr:0000000000005E06                 db    0
.eh_frame_hdr:0000000000005E07                 db    0
.eh_frame_hdr:0000000000005E08                 db  24h ; $
.eh_frame_hdr:0000000000005E09                 db 0DFh
.eh_frame_hdr:0000000000005E0A                 db 0FFh
.eh_frame_hdr:0000000000005E0B                 db 0FFh
.eh_frame_hdr:0000000000005E0C                 db    8
.eh_frame_hdr:0000000000005E0D                 db    8
.eh_frame_hdr:0000000000005E0E                 db    0
.eh_frame_hdr:0000000000005E0F                 db    0
.eh_frame_hdr:0000000000005E10                 db  34h ; 4
.eh_frame_hdr:0000000000005E11                 db 0DFh
.eh_frame_hdr:0000000000005E12                 db 0FFh
.eh_frame_hdr:0000000000005E13                 db 0FFh
.eh_frame_hdr:0000000000005E14                 db  1Ch
.eh_frame_hdr:0000000000005E15                 db    8
.eh_frame_hdr:0000000000005E16                 db    0
.eh_frame_hdr:0000000000005E17                 db    0
.eh_frame_hdr:0000000000005E18                 db 0C4h
.eh_frame_hdr:0000000000005E19                 db 0DFh
.eh_frame_hdr:0000000000005E1A                 db 0FFh
.eh_frame_hdr:0000000000005E1B                 db 0FFh
.eh_frame_hdr:0000000000005E1C                 db  38h ; 8
.eh_frame_hdr:0000000000005E1D                 db    8
.eh_frame_hdr:0000000000005E1E                 db    0
.eh_frame_hdr:0000000000005E1F                 db    0
.eh_frame_hdr:0000000000005E20                 db  64h ; d
.eh_frame_hdr:0000000000005E21                 db 0E0h
.eh_frame_hdr:0000000000005E22                 db 0FFh
.eh_frame_hdr:0000000000005E23                 db 0FFh
.eh_frame_hdr:0000000000005E24                 db  54h ; T
.eh_frame_hdr:0000000000005E25                 db    8
.eh_frame_hdr:0000000000005E26                 db    0
.eh_frame_hdr:0000000000005E27                 db    0
.eh_frame_hdr:0000000000005E28                 db  74h ; t
.eh_frame_hdr:0000000000005E29                 db 0E0h
.eh_frame_hdr:0000000000005E2A                 db 0FFh
.eh_frame_hdr:0000000000005E2B                 db 0FFh
.eh_frame_hdr:0000000000005E2C                 db  68h ; h
.eh_frame_hdr:0000000000005E2D                 db    8
.eh_frame_hdr:0000000000005E2E                 db    0
.eh_frame_hdr:0000000000005E2F                 db    0
.eh_frame_hdr:0000000000005E30                 db  94h
.eh_frame_hdr:0000000000005E31                 db 0E0h
.eh_frame_hdr:0000000000005E32                 db 0FFh
.eh_frame_hdr:0000000000005E33                 db 0FFh
.eh_frame_hdr:0000000000005E34                 db  7Ch ; |
.eh_frame_hdr:0000000000005E35                 db    8
.eh_frame_hdr:0000000000005E36                 db    0
.eh_frame_hdr:0000000000005E37                 db    0
.eh_frame_hdr:0000000000005E38                 db 0B4h
.eh_frame_hdr:0000000000005E39                 db 0E0h
.eh_frame_hdr:0000000000005E3A                 db 0FFh
.eh_frame_hdr:0000000000005E3B                 db 0FFh
.eh_frame_hdr:0000000000005E3C                 db  90h
.eh_frame_hdr:0000000000005E3D                 db    8
.eh_frame_hdr:0000000000005E3E                 db    0
.eh_frame_hdr:0000000000005E3F                 db    0
.eh_frame_hdr:0000000000005E40                 db 0C4h
.eh_frame_hdr:0000000000005E41                 db 0E0h
.eh_frame_hdr:0000000000005E42                 db 0FFh
.eh_frame_hdr:0000000000005E43                 db 0FFh
.eh_frame_hdr:0000000000005E44                 db 0A4h
.eh_frame_hdr:0000000000005E45                 db    8
.eh_frame_hdr:0000000000005E46                 db    0
.eh_frame_hdr:0000000000005E47                 db    0
.eh_frame_hdr:0000000000005E48                 db 0E4h
.eh_frame_hdr:0000000000005E49                 db 0E0h
.eh_frame_hdr:0000000000005E4A                 db 0FFh
.eh_frame_hdr:0000000000005E4B                 db 0FFh
.eh_frame_hdr:0000000000005E4C                 db 0B8h
.eh_frame_hdr:0000000000005E4D                 db    8
.eh_frame_hdr:0000000000005E4E                 db    0
.eh_frame_hdr:0000000000005E4F                 db    0
.eh_frame_hdr:0000000000005E50                 db    4
.eh_frame_hdr:0000000000005E51                 db 0E1h
.eh_frame_hdr:0000000000005E52                 db 0FFh
.eh_frame_hdr:0000000000005E53                 db 0FFh
.eh_frame_hdr:0000000000005E54                 db 0CCh
.eh_frame_hdr:0000000000005E55                 db    8
.eh_frame_hdr:0000000000005E56                 db    0
.eh_frame_hdr:0000000000005E57                 db    0
.eh_frame_hdr:0000000000005E58                 db  24h ; $
.eh_frame_hdr:0000000000005E59                 db 0E1h
.eh_frame_hdr:0000000000005E5A                 db 0FFh
.eh_frame_hdr:0000000000005E5B                 db 0FFh
.eh_frame_hdr:0000000000005E5C                 db 0E4h
.eh_frame_hdr:0000000000005E5D                 db    8
.eh_frame_hdr:0000000000005E5E                 db    0
.eh_frame_hdr:0000000000005E5F                 db    0
.eh_frame_hdr:0000000000005E60                 db  44h ; D
.eh_frame_hdr:0000000000005E61                 db 0E5h
.eh_frame_hdr:0000000000005E62                 db 0FFh
.eh_frame_hdr:0000000000005E63                 db 0FFh
.eh_frame_hdr:0000000000005E64                 db 0F8h
.eh_frame_hdr:0000000000005E65                 db    9
.eh_frame_hdr:0000000000005E66                 db    0
.eh_frame_hdr:0000000000005E67                 db    0
.eh_frame_hdr:0000000000005E68                 db  64h ; d
.eh_frame_hdr:0000000000005E69                 db 0E5h
.eh_frame_hdr:0000000000005E6A                 db 0FFh
.eh_frame_hdr:0000000000005E6B                 db 0FFh
.eh_frame_hdr:0000000000005E6C                 db  0Ch
.eh_frame_hdr:0000000000005E6D                 db  0Ah
.eh_frame_hdr:0000000000005E6E                 db    0
.eh_frame_hdr:0000000000005E6F                 db    0
.eh_frame_hdr:0000000000005E70                 db 0E4h
.eh_frame_hdr:0000000000005E71                 db 0E5h
.eh_frame_hdr:0000000000005E72                 db 0FFh
.eh_frame_hdr:0000000000005E73                 db 0FFh
.eh_frame_hdr:0000000000005E74                 db  28h ; (
.eh_frame_hdr:0000000000005E75                 db  0Ah
.eh_frame_hdr:0000000000005E76                 db    0
.eh_frame_hdr:0000000000005E77                 db    0
.eh_frame_hdr:0000000000005E78                 db 0C4h
.eh_frame_hdr:0000000000005E79                 db 0E6h
.eh_frame_hdr:0000000000005E7A                 db 0FFh
.eh_frame_hdr:0000000000005E7B                 db 0FFh
.eh_frame_hdr:0000000000005E7C                 db  54h ; T
.eh_frame_hdr:0000000000005E7D                 db  0Ah
.eh_frame_hdr:0000000000005E7E                 db    0
.eh_frame_hdr:0000000000005E7F                 db    0
.eh_frame_hdr:0000000000005E80                 db  44h ; D
.eh_frame_hdr:0000000000005E81                 db 0E7h
.eh_frame_hdr:0000000000005E82                 db 0FFh
.eh_frame_hdr:0000000000005E83                 db 0FFh
.eh_frame_hdr:0000000000005E84                 db  74h ; t
.eh_frame_hdr:0000000000005E85                 db  0Ah
.eh_frame_hdr:0000000000005E86                 db    0
.eh_frame_hdr:0000000000005E87                 db    0
.eh_frame_hdr:0000000000005E88                 db  64h ; d
.eh_frame_hdr:0000000000005E89                 db 0E7h
.eh_frame_hdr:0000000000005E8A                 db 0FFh
.eh_frame_hdr:0000000000005E8B                 db 0FFh
.eh_frame_hdr:0000000000005E8C                 db  90h
.eh_frame_hdr:0000000000005E8D                 db  0Ah
.eh_frame_hdr:0000000000005E8E                 db    0
.eh_frame_hdr:0000000000005E8F                 db    0
.eh_frame_hdr:0000000000005E90                 db  94h
.eh_frame_hdr:0000000000005E91                 db 0E7h
.eh_frame_hdr:0000000000005E92                 db 0FFh
.eh_frame_hdr:0000000000005E93                 db 0FFh
.eh_frame_hdr:0000000000005E94                 db 0A4h
.eh_frame_hdr:0000000000005E95                 db  0Ah
.eh_frame_hdr:0000000000005E96                 db    0
.eh_frame_hdr:0000000000005E97                 db    0
.eh_frame_hdr:0000000000005E98                 db 0A4h
.eh_frame_hdr:0000000000005E99                 db 0E7h
.eh_frame_hdr:0000000000005E9A                 db 0FFh
.eh_frame_hdr:0000000000005E9B                 db 0FFh
.eh_frame_hdr:0000000000005E9C                 db 0B8h
.eh_frame_hdr:0000000000005E9D                 db  0Ah
.eh_frame_hdr:0000000000005E9E                 db    0
.eh_frame_hdr:0000000000005E9F                 db    0
.eh_frame_hdr:0000000000005EA0                 db 0E4h
.eh_frame_hdr:0000000000005EA1                 db 0E7h
.eh_frame_hdr:0000000000005EA2                 db 0FFh
.eh_frame_hdr:0000000000005EA3                 db 0FFh
.eh_frame_hdr:0000000000005EA4                 db 0DCh
.eh_frame_hdr:0000000000005EA5                 db  0Ah
.eh_frame_hdr:0000000000005EA6                 db    0
.eh_frame_hdr:0000000000005EA7                 db    0
.eh_frame_hdr:0000000000005EA8                 db  14h
.eh_frame_hdr:0000000000005EA9                 db 0E8h
.eh_frame_hdr:0000000000005EAA                 db 0FFh
.eh_frame_hdr:0000000000005EAB                 db 0FFh
.eh_frame_hdr:0000000000005EAC                 db 0F0h
.eh_frame_hdr:0000000000005EAD                 db  0Ah
.eh_frame_hdr:0000000000005EAE                 db    0
.eh_frame_hdr:0000000000005EAF                 db    0
.eh_frame_hdr:0000000000005EB0                 db 0A4h
.eh_frame_hdr:0000000000005EB1                 db 0E8h
.eh_frame_hdr:0000000000005EB2                 db 0FFh
.eh_frame_hdr:0000000000005EB3                 db 0FFh
.eh_frame_hdr:0000000000005EB4                 db    8
.eh_frame_hdr:0000000000005EB5                 db  0Bh
.eh_frame_hdr:0000000000005EB6                 db    0
.eh_frame_hdr:0000000000005EB7                 db    0
.eh_frame_hdr:0000000000005EB8                 db 0F4h
.eh_frame_hdr:0000000000005EB9                 db 0E8h
.eh_frame_hdr:0000000000005EBA                 db 0FFh
.eh_frame_hdr:0000000000005EBB                 db 0FFh
.eh_frame_hdr:0000000000005EBC                 db  20h
.eh_frame_hdr:0000000000005EBD                 db  0Bh
.eh_frame_hdr:0000000000005EBE                 db    0
.eh_frame_hdr:0000000000005EBF                 db    0
.eh_frame_hdr:0000000000005EC0                 db  14h
.eh_frame_hdr:0000000000005EC1                 db 0E9h
.eh_frame_hdr:0000000000005EC2                 db 0FFh
.eh_frame_hdr:0000000000005EC3                 db 0FFh
.eh_frame_hdr:0000000000005EC4                 db  3Ch ; <
.eh_frame_hdr:0000000000005EC5                 db  0Bh
.eh_frame_hdr:0000000000005EC6                 db    0
.eh_frame_hdr:0000000000005EC7                 db    0
.eh_frame_hdr:0000000000005EC8                 db  44h ; D
.eh_frame_hdr:0000000000005EC9                 db 0E9h
.eh_frame_hdr:0000000000005ECA                 db 0FFh
.eh_frame_hdr:0000000000005ECB                 db 0FFh
.eh_frame_hdr:0000000000005ECC                 db  58h ; X
.eh_frame_hdr:0000000000005ECD                 db  0Bh
.eh_frame_hdr:0000000000005ECE                 db    0
.eh_frame_hdr:0000000000005ECF                 db    0
.eh_frame_hdr:0000000000005ED0                 db  74h ; t
.eh_frame_hdr:0000000000005ED1                 db 0E9h
.eh_frame_hdr:0000000000005ED2                 db 0FFh
.eh_frame_hdr:0000000000005ED3                 db 0FFh
.eh_frame_hdr:0000000000005ED4                 db  80h
.eh_frame_hdr:0000000000005ED5                 db  0Bh
.eh_frame_hdr:0000000000005ED6                 db    0
.eh_frame_hdr:0000000000005ED7                 db    0
.eh_frame_hdr:0000000000005ED8                 db  94h
.eh_frame_hdr:0000000000005ED9                 db 0E9h
.eh_frame_hdr:0000000000005EDA                 db 0FFh
.eh_frame_hdr:0000000000005EDB                 db 0FFh
.eh_frame_hdr:0000000000005EDC                 db  9Ch
.eh_frame_hdr:0000000000005EDD                 db  0Bh
.eh_frame_hdr:0000000000005EDE                 db    0
.eh_frame_hdr:0000000000005EDF                 db    0
.eh_frame_hdr:0000000000005EE0                 db 0D4h
.eh_frame_hdr:0000000000005EE1                 db 0E9h
.eh_frame_hdr:0000000000005EE2                 db 0FFh
.eh_frame_hdr:0000000000005EE3                 db 0FFh
.eh_frame_hdr:0000000000005EE4                 db 0B4h
.eh_frame_hdr:0000000000005EE5                 db  0Bh
.eh_frame_hdr:0000000000005EE6                 db    0
.eh_frame_hdr:0000000000005EE7                 db    0
.eh_frame_hdr:0000000000005EE8                 db 0D4h
.eh_frame_hdr:0000000000005EE9                 db 0EAh
.eh_frame_hdr:0000000000005EEA                 db 0FFh
.eh_frame_hdr:0000000000005EEB                 db 0FFh
.eh_frame_hdr:0000000000005EEC                 db    0
.eh_frame_hdr:0000000000005EED                 db  0Ch
.eh_frame_hdr:0000000000005EEE                 db    0
.eh_frame_hdr:0000000000005EEF                 db    0
.eh_frame_hdr:0000000000005EF0                 db    4
.eh_frame_hdr:0000000000005EF1                 db 0EBh
.eh_frame_hdr:0000000000005EF2                 db 0FFh
.eh_frame_hdr:0000000000005EF3                 db 0FFh
.eh_frame_hdr:0000000000005EF4                 db  1Ch
.eh_frame_hdr:0000000000005EF5                 db  0Ch
.eh_frame_hdr:0000000000005EF6                 db    0
.eh_frame_hdr:0000000000005EF7                 db    0
.eh_frame_hdr:0000000000005EF8                 db  24h ; $
.eh_frame_hdr:0000000000005EF9                 db 0EFh
.eh_frame_hdr:0000000000005EFA                 db 0FFh
.eh_frame_hdr:0000000000005EFB                 db 0FFh
.eh_frame_hdr:0000000000005EFC                 db  6Ch ; l
.eh_frame_hdr:0000000000005EFD                 db  0Ch
.eh_frame_hdr:0000000000005EFE                 db    0
.eh_frame_hdr:0000000000005EFF                 db    0
.eh_frame_hdr:0000000000005F00                 db 0B4h
.eh_frame_hdr:0000000000005F01                 db 0EFh
.eh_frame_hdr:0000000000005F02                 db 0FFh
.eh_frame_hdr:0000000000005F03                 db 0FFh
.eh_frame_hdr:0000000000005F04                 db 0ACh
.eh_frame_hdr:0000000000005F05                 db  0Ch
.eh_frame_hdr:0000000000005F06                 db    0
.eh_frame_hdr:0000000000005F07                 db    0
.eh_frame_hdr:0000000000005F08                 db  34h ; 4
.eh_frame_hdr:0000000000005F09                 db 0F0h
.eh_frame_hdr:0000000000005F0A                 db 0FFh
.eh_frame_hdr:0000000000005F0B                 db 0FFh
.eh_frame_hdr:0000000000005F0C                 db 0FCh
.eh_frame_hdr:0000000000005F0D                 db  0Ch
.eh_frame_hdr:0000000000005F0E                 db    0
.eh_frame_hdr:0000000000005F0F                 db    0
.eh_frame_hdr:0000000000005F10                 db  94h
.eh_frame_hdr:0000000000005F11                 db 0F0h
.eh_frame_hdr:0000000000005F12                 db 0FFh
.eh_frame_hdr:0000000000005F13                 db 0FFh
.eh_frame_hdr:0000000000005F14                 db  1Ch
.eh_frame_hdr:0000000000005F15                 db  0Dh
.eh_frame_hdr:0000000000005F16                 db    0
.eh_frame_hdr:0000000000005F17                 db    0
.eh_frame_hdr:0000000000005F18                 db 0D4h
.eh_frame_hdr:0000000000005F19                 db 0F0h
.eh_frame_hdr:0000000000005F1A                 db 0FFh
.eh_frame_hdr:0000000000005F1B                 db 0FFh
.eh_frame_hdr:0000000000005F1C                 db  3Ch ; <
.eh_frame_hdr:0000000000005F1D                 db  0Dh
.eh_frame_hdr:0000000000005F1E                 db    0
.eh_frame_hdr:0000000000005F1F                 db    0
.eh_frame_hdr:0000000000005F20                 db  54h ; T
.eh_frame_hdr:0000000000005F21                 db 0F1h
.eh_frame_hdr:0000000000005F22                 db 0FFh
.eh_frame_hdr:0000000000005F23                 db 0FFh
.eh_frame_hdr:0000000000005F24                 db  74h ; t
.eh_frame_hdr:0000000000005F25                 db  0Dh
.eh_frame_hdr:0000000000005F26                 db    0
.eh_frame_hdr:0000000000005F27                 db    0
.eh_frame_hdr:0000000000005F28                 db  94h
.eh_frame_hdr:0000000000005F29                 db 0F1h
.eh_frame_hdr:0000000000005F2A                 db 0FFh
.eh_frame_hdr:0000000000005F2B                 db 0FFh
.eh_frame_hdr:0000000000005F2C                 db  94h
.eh_frame_hdr:0000000000005F2D                 db  0Dh
.eh_frame_hdr:0000000000005F2E                 db    0
.eh_frame_hdr:0000000000005F2F                 db    0
.eh_frame_hdr:0000000000005F30                 db 0F4h
.eh_frame_hdr:0000000000005F31                 db 0F1h
.eh_frame_hdr:0000000000005F32                 db 0FFh
.eh_frame_hdr:0000000000005F33                 db 0FFh
.eh_frame_hdr:0000000000005F34                 db 0C4h
.eh_frame_hdr:0000000000005F35                 db  0Dh
.eh_frame_hdr:0000000000005F36                 db    0
.eh_frame_hdr:0000000000005F37                 db    0
.eh_frame_hdr:0000000000005F38                 db  64h ; d
.eh_frame_hdr:0000000000005F39                 db 0F2h
.eh_frame_hdr:0000000000005F3A                 db 0FFh
.eh_frame_hdr:0000000000005F3B                 db 0FFh
.eh_frame_hdr:0000000000005F3C                 db  0Ch
.eh_frame_hdr:0000000000005F3D                 db  0Eh
.eh_frame_hdr:0000000000005F3E                 db    0
.eh_frame_hdr:0000000000005F3F                 db    0
.eh_frame_hdr:0000000000005F40                 db  74h ; t
.eh_frame_hdr:0000000000005F41                 db 0F2h
.eh_frame_hdr:0000000000005F42                 db 0FFh
.eh_frame_hdr:0000000000005F43                 db 0FFh
.eh_frame_hdr:0000000000005F44                 db  24h ; $
.eh_frame_hdr:0000000000005F45                 db  0Eh
.eh_frame_hdr:0000000000005F46                 db    0
.eh_frame_hdr:0000000000005F47                 db    0
.eh_frame_hdr:0000000000005F47 _eh_frame_hdr   ends
.eh_frame_hdr:0000000000005F47
.eh_frame:0000000000005F48 ; ===========================================================================
.eh_frame:0000000000005F48
.eh_frame:0000000000005F48 ; Segment type: Pure data
.eh_frame:0000000000005F48 ; Segment permissions: Read
.eh_frame:0000000000005F48 _eh_frame       segment qword public 'CONST' use64
.eh_frame:0000000000005F48                 assume cs:_eh_frame
.eh_frame:0000000000005F48                 ;org 5F48h
.eh_frame:0000000000005F48                 db  14h
.eh_frame:0000000000005F49                 db    0
.eh_frame:0000000000005F4A                 db    0
.eh_frame:0000000000005F4B                 db    0
.eh_frame:0000000000005F4C                 db    0
.eh_frame:0000000000005F4D                 db    0
.eh_frame:0000000000005F4E                 db    0
.eh_frame:0000000000005F4F                 db    0
.eh_frame:0000000000005F50                 db    1
.eh_frame:0000000000005F51                 db  7Ah ; z
.eh_frame:0000000000005F52                 db  52h ; R
.eh_frame:0000000000005F53                 db    0
.eh_frame:0000000000005F54                 db    1
.eh_frame:0000000000005F55                 db  78h ; x
.eh_frame:0000000000005F56                 db  10h
.eh_frame:0000000000005F57                 db    1
.eh_frame:0000000000005F58                 db  1Bh
.eh_frame:0000000000005F59                 db  0Ch
.eh_frame:0000000000005F5A                 db    7
.eh_frame:0000000000005F5B                 db    8
.eh_frame:0000000000005F5C                 db  90h
.eh_frame:0000000000005F5D                 db    1
.eh_frame:0000000000005F5E                 db    7
.eh_frame:0000000000005F5F                 db  10h
.eh_frame:0000000000005F60                 db  14h
.eh_frame:0000000000005F61                 db    0
.eh_frame:0000000000005F62                 db    0
.eh_frame:0000000000005F63                 db    0
.eh_frame:0000000000005F64                 db  1Ch
.eh_frame:0000000000005F65                 db    0
.eh_frame:0000000000005F66                 db    0
.eh_frame:0000000000005F67                 db    0
.eh_frame:0000000000005F68                 db  38h ; 8
.eh_frame:0000000000005F69                 db 0B9h
.eh_frame:0000000000005F6A                 db 0FFh
.eh_frame:0000000000005F6B                 db 0FFh
.eh_frame:0000000000005F6C                 db  2Bh ; +
.eh_frame:0000000000005F6D                 db    0
.eh_frame:0000000000005F6E                 db    0
.eh_frame:0000000000005F6F                 db    0
.eh_frame:0000000000005F70                 db    0
.eh_frame:0000000000005F71                 db    0
.eh_frame:0000000000005F72                 db    0
.eh_frame:0000000000005F73                 db    0
.eh_frame:0000000000005F74                 db    0
.eh_frame:0000000000005F75                 db    0
.eh_frame:0000000000005F76                 db    0
.eh_frame:0000000000005F77                 db    0
.eh_frame:0000000000005F78                 db  14h
.eh_frame:0000000000005F79                 db    0
.eh_frame:0000000000005F7A                 db    0
.eh_frame:0000000000005F7B                 db    0
.eh_frame:0000000000005F7C                 db    0
.eh_frame:0000000000005F7D                 db    0
.eh_frame:0000000000005F7E                 db    0
.eh_frame:0000000000005F7F                 db    0
.eh_frame:0000000000005F80                 db    1
.eh_frame:0000000000005F81                 db  7Ah ; z
.eh_frame:0000000000005F82                 db  52h ; R
.eh_frame:0000000000005F83                 db    0
.eh_frame:0000000000005F84                 db    1
.eh_frame:0000000000005F85                 db  78h ; x
.eh_frame:0000000000005F86                 db  10h
.eh_frame:0000000000005F87                 db    1
.eh_frame:0000000000005F88                 db  1Bh
.eh_frame:0000000000005F89                 db  0Ch
.eh_frame:0000000000005F8A                 db    7
.eh_frame:0000000000005F8B                 db    8
.eh_frame:0000000000005F8C                 db  90h
.eh_frame:0000000000005F8D                 db    1
.eh_frame:0000000000005F8E                 db    0
.eh_frame:0000000000005F8F                 db    0
.eh_frame:0000000000005F90                 db  24h ; $
.eh_frame:0000000000005F91                 db    0
.eh_frame:0000000000005F92                 db    0
.eh_frame:0000000000005F93                 db    0
.eh_frame:0000000000005F94                 db  1Ch
.eh_frame:0000000000005F95                 db    0
.eh_frame:0000000000005F96                 db    0
.eh_frame:0000000000005F97                 db    0
.eh_frame:0000000000005F98                 db  48h ; H
.eh_frame:0000000000005F99                 db 0B4h
.eh_frame:0000000000005F9A                 db 0FFh
.eh_frame:0000000000005F9B                 db 0FFh
.eh_frame:0000000000005F9C                 db    0
.eh_frame:0000000000005F9D                 db    3
.eh_frame:0000000000005F9E                 db    0
.eh_frame:0000000000005F9F                 db    0
.eh_frame:0000000000005FA0                 db    0
.eh_frame:0000000000005FA1                 db  0Eh
.eh_frame:0000000000005FA2                 db  10h
.eh_frame:0000000000005FA3                 db  46h ; F
.eh_frame:0000000000005FA4                 db  0Eh
.eh_frame:0000000000005FA5                 db  18h
.eh_frame:0000000000005FA6                 db  4Ah ; J
.eh_frame:0000000000005FA7                 db  0Fh
.eh_frame:0000000000005FA8                 db  0Bh
.eh_frame:0000000000005FA9                 db  77h ; w
.eh_frame:0000000000005FAA                 db    8
.eh_frame:0000000000005FAB                 db  80h
.eh_frame:0000000000005FAC                 db    0
.eh_frame:0000000000005FAD                 db  3Fh ; ?
.eh_frame:0000000000005FAE                 db  1Ah
.eh_frame:0000000000005FAF                 db  3Bh ; ;
.eh_frame:0000000000005FB0                 db  2Ah ; *
.eh_frame:0000000000005FB1                 db  33h ; 3
.eh_frame:0000000000005FB2                 db  24h ; $
.eh_frame:0000000000005FB3                 db  22h ; "
.eh_frame:0000000000005FB4                 db    0
.eh_frame:0000000000005FB5                 db    0
.eh_frame:0000000000005FB6                 db    0
.eh_frame:0000000000005FB7                 db    0
.eh_frame:0000000000005FB8                 db  14h
.eh_frame:0000000000005FB9                 db    0
.eh_frame:0000000000005FBA                 db    0
.eh_frame:0000000000005FBB                 db    0
.eh_frame:0000000000005FBC                 db  44h ; D
.eh_frame:0000000000005FBD                 db    0
.eh_frame:0000000000005FBE                 db    0
.eh_frame:0000000000005FBF                 db    0
.eh_frame:0000000000005FC0                 db  20h
.eh_frame:0000000000005FC1                 db 0B7h
.eh_frame:0000000000005FC2                 db 0FFh
.eh_frame:0000000000005FC3                 db 0FFh
.eh_frame:0000000000005FC4                 db    8
.eh_frame:0000000000005FC5                 db    0
.eh_frame:0000000000005FC6                 db    0
.eh_frame:0000000000005FC7                 db    0
.eh_frame:0000000000005FC8                 db    0
.eh_frame:0000000000005FC9                 db    0
.eh_frame:0000000000005FCA                 db    0
.eh_frame:0000000000005FCB                 db    0
.eh_frame:0000000000005FCC                 db    0
.eh_frame:0000000000005FCD                 db    0
.eh_frame:0000000000005FCE                 db    0
.eh_frame:0000000000005FCF                 db    0
.eh_frame:0000000000005FD0                 db  28h ; (
.eh_frame:0000000000005FD1                 db    0
.eh_frame:0000000000005FD2                 db    0
.eh_frame:0000000000005FD3                 db    0
.eh_frame:0000000000005FD4                 db  5Ch ; \
.eh_frame:0000000000005FD5                 db    0
.eh_frame:0000000000005FD6                 db    0
.eh_frame:0000000000005FD7                 db    0
.eh_frame:0000000000005FD8                 db 0D8h
.eh_frame:0000000000005FD9                 db 0B9h
.eh_frame:0000000000005FDA                 db 0FFh
.eh_frame:0000000000005FDB                 db 0FFh
.eh_frame:0000000000005FDC                 db  6Ah ; j
.eh_frame:0000000000005FDD                 db    3
.eh_frame:0000000000005FDE                 db    0
.eh_frame:0000000000005FDF                 db    0
.eh_frame:0000000000005FE0                 db    0
.eh_frame:0000000000005FE1                 db  42h ; B
.eh_frame:0000000000005FE2                 db  0Eh
.eh_frame:0000000000005FE3                 db  10h
.eh_frame:0000000000005FE4                 db  8Dh
.eh_frame:0000000000005FE5                 db    2
.eh_frame:0000000000005FE6                 db  42h ; B
.eh_frame:0000000000005FE7                 db  0Eh
.eh_frame:0000000000005FE8                 db  18h
.eh_frame:0000000000005FE9                 db  8Ch
.eh_frame:0000000000005FEA                 db    3
.eh_frame:0000000000005FEB                 db  46h ; F
.eh_frame:0000000000005FEC                 db  0Eh
.eh_frame:0000000000005FED                 db  20h
.eh_frame:0000000000005FEE                 db  86h
.eh_frame:0000000000005FEF                 db    4
.eh_frame:0000000000005FF0                 db  41h ; A
.eh_frame:0000000000005FF1                 db  0Eh
.eh_frame:0000000000005FF2                 db  28h ; (
.eh_frame:0000000000005FF3                 db  83h
.eh_frame:0000000000005FF4                 db    5
.eh_frame:0000000000005FF5                 db  49h ; I
.eh_frame:0000000000005FF6                 db  0Eh
.eh_frame:0000000000005FF7                 db 0B0h
.eh_frame:0000000000005FF8                 db    1
.eh_frame:0000000000005FF9                 db    0
.eh_frame:0000000000005FFA                 db    0
.eh_frame:0000000000005FFB                 db    0
.eh_frame:0000000000005FFC                 db  38h ; 8
.eh_frame:0000000000005FFD                 db    0
.eh_frame:0000000000005FFE                 db    0
.eh_frame:0000000000005FFF                 db    0
.eh_frame:0000000000006000                 db  88h
.eh_frame:0000000000006001                 db    0
.eh_frame:0000000000006002                 db    0
.eh_frame:0000000000006003                 db    0
.eh_frame:0000000000006004                 db 0ECh
.eh_frame:0000000000006005                 db 0B6h
.eh_frame:0000000000006006                 db 0FFh
.eh_frame:0000000000006007                 db 0FFh
.eh_frame:0000000000006008                 db 0A9h
.eh_frame:0000000000006009                 db    1
.eh_frame:000000000000600A                 db    0
.eh_frame:000000000000600B                 db    0
.eh_frame:000000000000600C                 db    0
.eh_frame:000000000000600D                 db  42h ; B
.eh_frame:000000000000600E                 db  0Eh
.eh_frame:000000000000600F                 db  10h
.eh_frame:0000000000006010                 db  8Dh
.eh_frame:0000000000006011                 db    2
.eh_frame:0000000000006012                 db  42h ; B
.eh_frame:0000000000006013                 db  0Eh
.eh_frame:0000000000006014                 db  18h
.eh_frame:0000000000006015                 db  8Ch
.eh_frame:0000000000006016                 db    3
.eh_frame:0000000000006017                 db  47h ; G
.eh_frame:0000000000006018                 db  0Eh
.eh_frame:0000000000006019                 db  20h
.eh_frame:000000000000601A                 db  86h
.eh_frame:000000000000601B                 db    4
.eh_frame:000000000000601C                 db  41h ; A
.eh_frame:000000000000601D                 db  0Eh
.eh_frame:000000000000601E                 db  28h ; (
.eh_frame:000000000000601F                 db  83h
.eh_frame:0000000000006020                 db    5
.eh_frame:0000000000006021                 db  4Ch ; L
.eh_frame:0000000000006022                 db  0Eh
.eh_frame:0000000000006023                 db  30h ; 0
.eh_frame:0000000000006024                 db    3
.eh_frame:0000000000006025                 db  47h ; G
.eh_frame:0000000000006026                 db    1
.eh_frame:0000000000006027                 db  0Ah
.eh_frame:0000000000006028                 db  0Eh
.eh_frame:0000000000006029                 db  28h ; (
.eh_frame:000000000000602A                 db  43h ; C
.eh_frame:000000000000602B                 db  0Eh
.eh_frame:000000000000602C                 db  20h
.eh_frame:000000000000602D                 db  41h ; A
.eh_frame:000000000000602E                 db  0Eh
.eh_frame:000000000000602F                 db  18h
.eh_frame:0000000000006030                 db  42h ; B
.eh_frame:0000000000006031                 db  0Eh
.eh_frame:0000000000006032                 db  10h
.eh_frame:0000000000006033                 db  42h ; B
.eh_frame:0000000000006034                 db  0Eh
.eh_frame:0000000000006035                 db    8
.eh_frame:0000000000006036                 db  41h ; A
.eh_frame:0000000000006037                 db  0Bh
.eh_frame:0000000000006038                 db  10h
.eh_frame:0000000000006039                 db    0
.eh_frame:000000000000603A                 db    0
.eh_frame:000000000000603B                 db    0
.eh_frame:000000000000603C                 db 0C4h
.eh_frame:000000000000603D                 db    0
.eh_frame:000000000000603E                 db    0
.eh_frame:000000000000603F                 db    0
.eh_frame:0000000000006040                 db 0E0h
.eh_frame:0000000000006041                 db 0BCh
.eh_frame:0000000000006042                 db 0FFh
.eh_frame:0000000000006043                 db 0FFh
.eh_frame:0000000000006044                 db    8
.eh_frame:0000000000006045                 db    0
.eh_frame:0000000000006046                 db    0
.eh_frame:0000000000006047                 db    0
.eh_frame:0000000000006048                 db    0
.eh_frame:0000000000006049                 db    0
.eh_frame:000000000000604A                 db    0
.eh_frame:000000000000604B                 db    0
.eh_frame:000000000000604C                 db  10h
.eh_frame:000000000000604D                 db    0
.eh_frame:000000000000604E                 db    0
.eh_frame:000000000000604F                 db    0
.eh_frame:0000000000006050                 db 0D8h
.eh_frame:0000000000006051                 db    0
.eh_frame:0000000000006052                 db    0
.eh_frame:0000000000006053                 db    0
.eh_frame:0000000000006054                 db 0DCh
.eh_frame:0000000000006055                 db 0BCh
.eh_frame:0000000000006056                 db 0FFh
.eh_frame:0000000000006057                 db 0FFh
.eh_frame:0000000000006058                 db    8
.eh_frame:0000000000006059                 db    0
.eh_frame:000000000000605A                 db    0
.eh_frame:000000000000605B                 db    0
.eh_frame:000000000000605C                 db    0
.eh_frame:000000000000605D                 db    0
.eh_frame:000000000000605E                 db    0
.eh_frame:000000000000605F                 db    0
.eh_frame:0000000000006060                 db  2Ch ; ,
.eh_frame:0000000000006061                 db    0
.eh_frame:0000000000006062                 db    0
.eh_frame:0000000000006063                 db    0
.eh_frame:0000000000006064                 db 0ECh
.eh_frame:0000000000006065                 db    0
.eh_frame:0000000000006066                 db    0
.eh_frame:0000000000006067                 db    0
.eh_frame:0000000000006068                 db 0D8h
.eh_frame:0000000000006069                 db 0BCh
.eh_frame:000000000000606A                 db 0FFh
.eh_frame:000000000000606B                 db 0FFh
.eh_frame:000000000000606C                 db 0A4h
.eh_frame:000000000000606D                 db    0
.eh_frame:000000000000606E                 db    0
.eh_frame:000000000000606F                 db    0
.eh_frame:0000000000006070                 db    0
.eh_frame:0000000000006071                 db  41h ; A
.eh_frame:0000000000006072                 db  0Eh
.eh_frame:0000000000006073                 db  10h
.eh_frame:0000000000006074                 db  86h
.eh_frame:0000000000006075                 db    2
.eh_frame:0000000000006076                 db  41h ; A
.eh_frame:0000000000006077                 db  0Eh
.eh_frame:0000000000006078                 db  18h
.eh_frame:0000000000006079                 db  83h
.eh_frame:000000000000607A                 db    3
.eh_frame:000000000000607B                 db  44h ; D
.eh_frame:000000000000607C                 db  0Eh
.eh_frame:000000000000607D                 db  20h
.eh_frame:000000000000607E                 db  7Ah ; z
.eh_frame:000000000000607F                 db  0Ah
.eh_frame:0000000000006080                 db  0Eh
.eh_frame:0000000000006081                 db  18h
.eh_frame:0000000000006082                 db  41h ; A
.eh_frame:0000000000006083                 db  0Eh
.eh_frame:0000000000006084                 db  10h
.eh_frame:0000000000006085                 db  41h ; A
.eh_frame:0000000000006086                 db  0Eh
.eh_frame:0000000000006087                 db    8
.eh_frame:0000000000006088                 db  41h ; A
.eh_frame:0000000000006089                 db  0Bh
.eh_frame:000000000000608A                 db    0
.eh_frame:000000000000608B                 db    0
.eh_frame:000000000000608C                 db    0
.eh_frame:000000000000608D                 db    0
.eh_frame:000000000000608E                 db    0
.eh_frame:000000000000608F                 db    0
.eh_frame:0000000000006090                 db  20h
.eh_frame:0000000000006091                 db    0
.eh_frame:0000000000006092                 db    0
.eh_frame:0000000000006093                 db    0
.eh_frame:0000000000006094                 db  1Ch
.eh_frame:0000000000006095                 db    1
.eh_frame:0000000000006096                 db    0
.eh_frame:0000000000006097                 db    0
.eh_frame:0000000000006098                 db  58h ; X
.eh_frame:0000000000006099                 db 0BDh
.eh_frame:000000000000609A                 db 0FFh
.eh_frame:000000000000609B                 db 0FFh
.eh_frame:000000000000609C                 db  6Bh ; k
.eh_frame:000000000000609D                 db    0
.eh_frame:000000000000609E                 db    0
.eh_frame:000000000000609F                 db    0
.eh_frame:00000000000060A0                 db    0
.eh_frame:00000000000060A1                 db  41h ; A
.eh_frame:00000000000060A2                 db  0Eh
.eh_frame:00000000000060A3                 db  10h
.eh_frame:00000000000060A4                 db  83h
.eh_frame:00000000000060A5                 db    2
.eh_frame:00000000000060A6                 db  4Eh ; N
.eh_frame:00000000000060A7                 db  0Eh
.eh_frame:00000000000060A8                 db 0A0h
.eh_frame:00000000000060A9                 db    1
.eh_frame:00000000000060AA                 db  7Eh ; ~
.eh_frame:00000000000060AB                 db  0Ah
.eh_frame:00000000000060AC                 db  0Eh
.eh_frame:00000000000060AD                 db  10h
.eh_frame:00000000000060AE                 db  41h ; A
.eh_frame:00000000000060AF                 db  0Eh
.eh_frame:00000000000060B0                 db    8
.eh_frame:00000000000060B1                 db  42h ; B
.eh_frame:00000000000060B2                 db  0Bh
.eh_frame:00000000000060B3                 db    0
.eh_frame:00000000000060B4                 db  18h
.eh_frame:00000000000060B5                 db    0
.eh_frame:00000000000060B6                 db    0
.eh_frame:00000000000060B7                 db    0
.eh_frame:00000000000060B8                 db  40h ; @
.eh_frame:00000000000060B9                 db    1
.eh_frame:00000000000060BA                 db    0
.eh_frame:00000000000060BB                 db    0
.eh_frame:00000000000060BC                 db 0A4h
.eh_frame:00000000000060BD                 db 0BDh
.eh_frame:00000000000060BE                 db 0FFh
.eh_frame:00000000000060BF                 db 0FFh
.eh_frame:00000000000060C0                 db  11h
.eh_frame:00000000000060C1                 db    1
.eh_frame:00000000000060C2                 db    0
.eh_frame:00000000000060C3                 db    0
.eh_frame:00000000000060C4                 db    0
.eh_frame:00000000000060C5                 db  44h ; D
.eh_frame:00000000000060C6                 db  0Eh
.eh_frame:00000000000060C7                 db  20h
.eh_frame:00000000000060C8                 db    2
.eh_frame:00000000000060C9                 db  74h ; t
.eh_frame:00000000000060CA                 db  0Ah
.eh_frame:00000000000060CB                 db  0Eh
.eh_frame:00000000000060CC                 db    8
.eh_frame:00000000000060CD                 db  48h ; H
.eh_frame:00000000000060CE                 db  0Bh
.eh_frame:00000000000060CF                 db    0
.eh_frame:00000000000060D0                 db  44h ; D
.eh_frame:00000000000060D1                 db    0
.eh_frame:00000000000060D2                 db    0
.eh_frame:00000000000060D3                 db    0
.eh_frame:00000000000060D4                 db  5Ch ; \
.eh_frame:00000000000060D5                 db    1
.eh_frame:00000000000060D6                 db    0
.eh_frame:00000000000060D7                 db    0
.eh_frame:00000000000060D8                 db 0A8h
.eh_frame:00000000000060D9                 db 0BEh
.eh_frame:00000000000060DA                 db 0FFh
.eh_frame:00000000000060DB                 db 0FFh
.eh_frame:00000000000060DC                 db  4Bh ; K
.eh_frame:00000000000060DD                 db    1
.eh_frame:00000000000060DE                 db    0
.eh_frame:00000000000060DF                 db    0
.eh_frame:00000000000060E0                 db    0
.eh_frame:00000000000060E1                 db  41h ; A
.eh_frame:00000000000060E2                 db  0Eh
.eh_frame:00000000000060E3                 db  10h
.eh_frame:00000000000060E4                 db  86h
.eh_frame:00000000000060E5                 db    2
.eh_frame:00000000000060E6                 db  41h ; A
.eh_frame:00000000000060E7                 db  0Eh
.eh_frame:00000000000060E8                 db  18h
.eh_frame:00000000000060E9                 db  83h
.eh_frame:00000000000060EA                 db    3
.eh_frame:00000000000060EB                 db  44h ; D
.eh_frame:00000000000060EC                 db  0Eh
.eh_frame:00000000000060ED                 db  20h
.eh_frame:00000000000060EE                 db  72h ; r
.eh_frame:00000000000060EF                 db  0Ah
.eh_frame:00000000000060F0                 db  0Eh
.eh_frame:00000000000060F1                 db  18h
.eh_frame:00000000000060F2                 db  41h ; A
.eh_frame:00000000000060F3                 db  0Eh
.eh_frame:00000000000060F4                 db  10h
.eh_frame:00000000000060F5                 db  41h ; A
.eh_frame:00000000000060F6                 db  0Eh
.eh_frame:00000000000060F7                 db    8
.eh_frame:00000000000060F8                 db  46h ; F
.eh_frame:00000000000060F9                 db  0Bh
.eh_frame:00000000000060FA                 db    2
.eh_frame:00000000000060FB                 db  60h ; `
.eh_frame:00000000000060FC                 db  0Ah
.eh_frame:00000000000060FD                 db  0Eh
.eh_frame:00000000000060FE                 db  18h
.eh_frame:00000000000060FF                 db  41h ; A
.eh_frame:0000000000006100                 db  0Eh
.eh_frame:0000000000006101                 db  10h
.eh_frame:0000000000006102                 db  41h ; A
.eh_frame:0000000000006103                 db  0Eh
.eh_frame:0000000000006104                 db    8
.eh_frame:0000000000006105                 db  46h ; F
.eh_frame:0000000000006106                 db  0Bh
.eh_frame:0000000000006107                 db  76h ; v
.eh_frame:0000000000006108                 db  0Ah
.eh_frame:0000000000006109                 db  0Eh
.eh_frame:000000000000610A                 db  18h
.eh_frame:000000000000610B                 db  41h ; A
.eh_frame:000000000000610C                 db  0Eh
.eh_frame:000000000000610D                 db  10h
.eh_frame:000000000000610E                 db  41h ; A
.eh_frame:000000000000610F                 db  0Eh
.eh_frame:0000000000006110                 db    8
.eh_frame:0000000000006111                 db  48h ; H
.eh_frame:0000000000006112                 db  0Bh
.eh_frame:0000000000006113                 db    0
.eh_frame:0000000000006114                 db    0
.eh_frame:0000000000006115                 db    0
.eh_frame:0000000000006116                 db    0
.eh_frame:0000000000006117                 db    0
.eh_frame:0000000000006118                 db  1Ch
.eh_frame:0000000000006119                 db    0
.eh_frame:000000000000611A                 db    0
.eh_frame:000000000000611B                 db    0
.eh_frame:000000000000611C                 db 0A4h
.eh_frame:000000000000611D                 db    1
.eh_frame:000000000000611E                 db    0
.eh_frame:000000000000611F                 db    0
.eh_frame:0000000000006120                 db 0B0h
.eh_frame:0000000000006121                 db 0BFh
.eh_frame:0000000000006122                 db 0FFh
.eh_frame:0000000000006123                 db 0FFh
.eh_frame:0000000000006124                 db  9Fh
.eh_frame:0000000000006125                 db    0
.eh_frame:0000000000006126                 db    0
.eh_frame:0000000000006127                 db    0
.eh_frame:0000000000006128                 db    0
.eh_frame:0000000000006129                 db  44h ; D
.eh_frame:000000000000612A                 db  0Eh
.eh_frame:000000000000612B                 db  10h
.eh_frame:000000000000612C                 db  83h
.eh_frame:000000000000612D                 db    2
.eh_frame:000000000000612E                 db    2
.eh_frame:000000000000612F                 db  78h ; x
.eh_frame:0000000000006130                 db  0Ah
.eh_frame:0000000000006131                 db  0Eh
.eh_frame:0000000000006132                 db    8
.eh_frame:0000000000006133                 db  41h ; A
.eh_frame:0000000000006134                 db  0Bh
.eh_frame:0000000000006135                 db    0
.eh_frame:0000000000006136                 db    0
.eh_frame:0000000000006137                 db    0
.eh_frame:0000000000006138                 db  40h ; @
.eh_frame:0000000000006139                 db    0
.eh_frame:000000000000613A                 db    0
.eh_frame:000000000000613B                 db    0
.eh_frame:000000000000613C                 db 0C4h
.eh_frame:000000000000613D                 db    1
.eh_frame:000000000000613E                 db    0
.eh_frame:000000000000613F                 db    0
.eh_frame:0000000000006140                 db  30h ; 0
.eh_frame:0000000000006141                 db 0C0h
.eh_frame:0000000000006142                 db 0FFh
.eh_frame:0000000000006143                 db 0FFh
.eh_frame:0000000000006144                 db 0E7h
.eh_frame:0000000000006145                 db    0
.eh_frame:0000000000006146                 db    0
.eh_frame:0000000000006147                 db    0
.eh_frame:0000000000006148                 db    0
.eh_frame:0000000000006149                 db  41h ; A
.eh_frame:000000000000614A                 db  0Eh
.eh_frame:000000000000614B                 db  10h
.eh_frame:000000000000614C                 db  86h
.eh_frame:000000000000614D                 db    2
.eh_frame:000000000000614E                 db  41h ; A
.eh_frame:000000000000614F                 db  0Eh
.eh_frame:0000000000006150                 db  18h
.eh_frame:0000000000006151                 db  83h
.eh_frame:0000000000006152                 db    3
.eh_frame:0000000000006153                 db  49h ; I
.eh_frame:0000000000006154                 db  0Eh
.eh_frame:0000000000006155                 db  20h
.eh_frame:0000000000006156                 db  6Eh ; n
.eh_frame:0000000000006157                 db  0Ah
.eh_frame:0000000000006158                 db  0Eh
.eh_frame:0000000000006159                 db  18h
.eh_frame:000000000000615A                 db  41h ; A
.eh_frame:000000000000615B                 db  0Eh
.eh_frame:000000000000615C                 db  10h
.eh_frame:000000000000615D                 db  41h ; A
.eh_frame:000000000000615E                 db  0Eh
.eh_frame:000000000000615F                 db    8
.eh_frame:0000000000006160                 db  45h ; E
.eh_frame:0000000000006161                 db  0Bh
.eh_frame:0000000000006162                 db    2
.eh_frame:0000000000006163                 db  4Ah ; J
.eh_frame:0000000000006164                 db  0Ah
.eh_frame:0000000000006165                 db  0Eh
.eh_frame:0000000000006166                 db  18h
.eh_frame:0000000000006167                 db  41h ; A
.eh_frame:0000000000006168                 db  0Eh
.eh_frame:0000000000006169                 db  10h
.eh_frame:000000000000616A                 db  41h ; A
.eh_frame:000000000000616B                 db  0Eh
.eh_frame:000000000000616C                 db    8
.eh_frame:000000000000616D                 db  44h ; D
.eh_frame:000000000000616E                 db  0Bh
.eh_frame:000000000000616F                 db    2
.eh_frame:0000000000006170                 db  54h ; T
.eh_frame:0000000000006171                 db  0Eh
.eh_frame:0000000000006172                 db  18h
.eh_frame:0000000000006173                 db  41h ; A
.eh_frame:0000000000006174                 db  0Eh
.eh_frame:0000000000006175                 db  10h
.eh_frame:0000000000006176                 db  41h ; A
.eh_frame:0000000000006177                 db  0Eh
.eh_frame:0000000000006178                 db    8
.eh_frame:0000000000006179                 db    0
.eh_frame:000000000000617A                 db    0
.eh_frame:000000000000617B                 db    0
.eh_frame:000000000000617C                 db  74h ; t
.eh_frame:000000000000617D                 db    0
.eh_frame:000000000000617E                 db    0
.eh_frame:000000000000617F                 db    0
.eh_frame:0000000000006180                 db    8
.eh_frame:0000000000006181                 db    2
.eh_frame:0000000000006182                 db    0
.eh_frame:0000000000006183                 db    0
.eh_frame:0000000000006184                 db 0DCh
.eh_frame:0000000000006185                 db 0C0h
.eh_frame:0000000000006186                 db 0FFh
.eh_frame:0000000000006187                 db 0FFh
.eh_frame:0000000000006188                 db  34h ; 4
.eh_frame:0000000000006189                 db  12h
.eh_frame:000000000000618A                 db    0
.eh_frame:000000000000618B                 db    0
.eh_frame:000000000000618C                 db    0
.eh_frame:000000000000618D                 db  42h ; B
.eh_frame:000000000000618E                 db  0Eh
.eh_frame:000000000000618F                 db  10h
.eh_frame:0000000000006190                 db  8Fh
.eh_frame:0000000000006191                 db    2
.eh_frame:0000000000006192                 db  42h ; B
.eh_frame:0000000000006193                 db  0Eh
.eh_frame:0000000000006194                 db  18h
.eh_frame:0000000000006195                 db  8Eh
.eh_frame:0000000000006196                 db    3
.eh_frame:0000000000006197                 db  45h ; E
.eh_frame:0000000000006198                 db  0Eh
.eh_frame:0000000000006199                 db  20h
.eh_frame:000000000000619A                 db  8Dh
.eh_frame:000000000000619B                 db    4
.eh_frame:000000000000619C                 db  42h ; B
.eh_frame:000000000000619D                 db  0Eh
.eh_frame:000000000000619E                 db  28h ; (
.eh_frame:000000000000619F                 db  8Ch
.eh_frame:00000000000061A0                 db    5
.eh_frame:00000000000061A1                 db  44h ; D
.eh_frame:00000000000061A2                 db  0Eh
.eh_frame:00000000000061A3                 db  30h ; 0
.eh_frame:00000000000061A4                 db  86h
.eh_frame:00000000000061A5                 db    6
.eh_frame:00000000000061A6                 db  41h ; A
.eh_frame:00000000000061A7                 db  0Eh
.eh_frame:00000000000061A8                 db  38h ; 8
.eh_frame:00000000000061A9                 db  83h
.eh_frame:00000000000061AA                 db    7
.eh_frame:00000000000061AB                 db  53h ; S
.eh_frame:00000000000061AC                 db  0Eh
.eh_frame:00000000000061AD                 db 0F0h
.eh_frame:00000000000061AE                 db    1
.eh_frame:00000000000061AF                 db    3
.eh_frame:00000000000061B0                 db  81h
.eh_frame:00000000000061B1                 db  0Bh
.eh_frame:00000000000061B2                 db  0Eh
.eh_frame:00000000000061B3                 db 0F8h
.eh_frame:00000000000061B4                 db    1
.eh_frame:00000000000061B5                 db  4Ah ; J
.eh_frame:00000000000061B6                 db  0Eh
.eh_frame:00000000000061B7                 db  80h
.eh_frame:00000000000061B8                 db    2
.eh_frame:00000000000061B9                 db  44h ; D
.eh_frame:00000000000061BA                 db  0Eh
.eh_frame:00000000000061BB                 db  88h
.eh_frame:00000000000061BC                 db    2
.eh_frame:00000000000061BD                 db  45h ; E
.eh_frame:00000000000061BE                 db  0Eh
.eh_frame:00000000000061BF                 db  90h
.eh_frame:00000000000061C0                 db    2
.eh_frame:00000000000061C1                 db  5Fh ; _
.eh_frame:00000000000061C2                 db  0Eh
.eh_frame:00000000000061C3                 db 0F0h
.eh_frame:00000000000061C4                 db    1
.eh_frame:00000000000061C5                 db  64h ; d
.eh_frame:00000000000061C6                 db  0Ah
.eh_frame:00000000000061C7                 db  0Eh
.eh_frame:00000000000061C8                 db  38h ; 8
.eh_frame:00000000000061C9                 db  41h ; A
.eh_frame:00000000000061CA                 db  0Eh
.eh_frame:00000000000061CB                 db  30h ; 0
.eh_frame:00000000000061CC                 db  41h ; A
.eh_frame:00000000000061CD                 db  0Eh
.eh_frame:00000000000061CE                 db  28h ; (
.eh_frame:00000000000061CF                 db  42h ; B
.eh_frame:00000000000061D0                 db  0Eh
.eh_frame:00000000000061D1                 db  20h
.eh_frame:00000000000061D2                 db  42h ; B
.eh_frame:00000000000061D3                 db  0Eh
.eh_frame:00000000000061D4                 db  18h
.eh_frame:00000000000061D5                 db  42h ; B
.eh_frame:00000000000061D6                 db  0Eh
.eh_frame:00000000000061D7                 db  10h
.eh_frame:00000000000061D8                 db  42h ; B
.eh_frame:00000000000061D9                 db  0Eh
.eh_frame:00000000000061DA                 db    8
.eh_frame:00000000000061DB                 db  44h ; D
.eh_frame:00000000000061DC                 db  0Bh
.eh_frame:00000000000061DD                 db    3
.eh_frame:00000000000061DE                 db  99h
.eh_frame:00000000000061DF                 db    5
.eh_frame:00000000000061E0                 db  0Eh
.eh_frame:00000000000061E1                 db 0F8h
.eh_frame:00000000000061E2                 db    1
.eh_frame:00000000000061E3                 db  4Dh ; M
.eh_frame:00000000000061E4                 db  0Eh
.eh_frame:00000000000061E5                 db  80h
.eh_frame:00000000000061E6                 db    2
.eh_frame:00000000000061E7                 db  44h ; D
.eh_frame:00000000000061E8                 db  0Eh
.eh_frame:00000000000061E9                 db  88h
.eh_frame:00000000000061EA                 db    2
.eh_frame:00000000000061EB                 db  47h ; G
.eh_frame:00000000000061EC                 db  0Eh
.eh_frame:00000000000061ED                 db  90h
.eh_frame:00000000000061EE                 db    2
.eh_frame:00000000000061EF                 db  5Bh ; [
.eh_frame:00000000000061F0                 db  0Eh
.eh_frame:00000000000061F1                 db 0F0h
.eh_frame:00000000000061F2                 db    1
.eh_frame:00000000000061F3                 db    0
.eh_frame:00000000000061F4                 db  68h ; h
.eh_frame:00000000000061F5                 db    0
.eh_frame:00000000000061F6                 db    0
.eh_frame:00000000000061F7                 db    0
.eh_frame:00000000000061F8                 db  80h
.eh_frame:00000000000061F9                 db    2
.eh_frame:00000000000061FA                 db    0
.eh_frame:00000000000061FB                 db    0
.eh_frame:00000000000061FC                 db 0A4h
.eh_frame:00000000000061FD                 db 0D2h
.eh_frame:00000000000061FE                 db 0FFh
.eh_frame:00000000000061FF                 db 0FFh
.eh_frame:0000000000006200                 db 0ABh
.eh_frame:0000000000006201                 db    1
.eh_frame:0000000000006202                 db    0
.eh_frame:0000000000006203                 db    0
.eh_frame:0000000000006204                 db    0
.eh_frame:0000000000006205                 db  42h ; B
.eh_frame:0000000000006206                 db  0Eh
.eh_frame:0000000000006207                 db  10h
.eh_frame:0000000000006208                 db  8Fh
.eh_frame:0000000000006209                 db    2
.eh_frame:000000000000620A                 db  42h ; B
.eh_frame:000000000000620B                 db  0Eh
.eh_frame:000000000000620C                 db  18h
.eh_frame:000000000000620D                 db  8Eh
.eh_frame:000000000000620E                 db    3
.eh_frame:000000000000620F                 db  45h ; E
.eh_frame:0000000000006210                 db  0Eh
.eh_frame:0000000000006211                 db  20h
.eh_frame:0000000000006212                 db  8Dh
.eh_frame:0000000000006213                 db    4
.eh_frame:0000000000006214                 db  42h ; B
.eh_frame:0000000000006215                 db  0Eh
.eh_frame:0000000000006216                 db  28h ; (
.eh_frame:0000000000006217                 db  8Ch
.eh_frame:0000000000006218                 db    5
.eh_frame:0000000000006219                 db  44h ; D
.eh_frame:000000000000621A                 db  0Eh
.eh_frame:000000000000621B                 db  30h ; 0
.eh_frame:000000000000621C                 db  86h
.eh_frame:000000000000621D                 db    6
.eh_frame:000000000000621E                 db  41h ; A
.eh_frame:000000000000621F                 db  0Eh
.eh_frame:0000000000006220                 db  38h ; 8
.eh_frame:0000000000006221                 db  83h
.eh_frame:0000000000006222                 db    7
.eh_frame:0000000000006223                 db  47h ; G
.eh_frame:0000000000006224                 db  0Eh
.eh_frame:0000000000006225                 db  60h ; `
.eh_frame:0000000000006226                 db    2
.eh_frame:0000000000006227                 db  99h
.eh_frame:0000000000006228                 db  0Eh
.eh_frame:0000000000006229                 db  68h ; h
.eh_frame:000000000000622A                 db  5Fh ; _
.eh_frame:000000000000622B                 db  0Eh
.eh_frame:000000000000622C                 db  70h ; p
.eh_frame:000000000000622D                 db  46h ; F
.eh_frame:000000000000622E                 db  0Eh
.eh_frame:000000000000622F                 db  78h ; x
.eh_frame:0000000000006230                 db  42h ; B
.eh_frame:0000000000006231                 db  0Eh
.eh_frame:0000000000006232                 db  80h
.eh_frame:0000000000006233                 db    1
.eh_frame:0000000000006234                 db  59h ; Y
.eh_frame:0000000000006235                 db  0Eh
.eh_frame:0000000000006236                 db  60h ; `
.eh_frame:0000000000006237                 db    2
.eh_frame:0000000000006238                 db  40h ; @
.eh_frame:0000000000006239                 db  0Eh
.eh_frame:000000000000623A                 db  68h ; h
.eh_frame:000000000000623B                 db  4Bh ; K
.eh_frame:000000000000623C                 db  0Eh
.eh_frame:000000000000623D                 db  70h ; p
.eh_frame:000000000000623E                 db  43h ; C
.eh_frame:000000000000623F                 db  0Eh
.eh_frame:0000000000006240                 db  78h ; x
.eh_frame:0000000000006241                 db  45h ; E
.eh_frame:0000000000006242                 db  0Eh
.eh_frame:0000000000006243                 db  80h
.eh_frame:0000000000006244                 db    1
.eh_frame:0000000000006245                 db  5Eh ; ^
.eh_frame:0000000000006246                 db  0Eh
.eh_frame:0000000000006247                 db  60h ; `
.eh_frame:0000000000006248                 db  4Ch ; L
.eh_frame:0000000000006249                 db  0Ah
.eh_frame:000000000000624A                 db  0Eh
.eh_frame:000000000000624B                 db  38h ; 8
.eh_frame:000000000000624C                 db  44h ; D
.eh_frame:000000000000624D                 db  0Eh
.eh_frame:000000000000624E                 db  30h ; 0
.eh_frame:000000000000624F                 db  41h ; A
.eh_frame:0000000000006250                 db  0Eh
.eh_frame:0000000000006251                 db  28h ; (
.eh_frame:0000000000006252                 db  42h ; B
.eh_frame:0000000000006253                 db  0Eh
.eh_frame:0000000000006254                 db  20h
.eh_frame:0000000000006255                 db  42h ; B
.eh_frame:0000000000006256                 db  0Eh
.eh_frame:0000000000006257                 db  18h
.eh_frame:0000000000006258                 db  42h ; B
.eh_frame:0000000000006259                 db  0Eh
.eh_frame:000000000000625A                 db  10h
.eh_frame:000000000000625B                 db  42h ; B
.eh_frame:000000000000625C                 db  0Eh
.eh_frame:000000000000625D                 db    8
.eh_frame:000000000000625E                 db  46h ; F
.eh_frame:000000000000625F                 db  0Bh
.eh_frame:0000000000006260                 db  28h ; (
.eh_frame:0000000000006261                 db    0
.eh_frame:0000000000006262                 db    0
.eh_frame:0000000000006263                 db    0
.eh_frame:0000000000006264                 db 0ECh
.eh_frame:0000000000006265                 db    2
.eh_frame:0000000000006266                 db    0
.eh_frame:0000000000006267                 db    0
.eh_frame:0000000000006268                 db 0E8h
.eh_frame:0000000000006269                 db 0D3h
.eh_frame:000000000000626A                 db 0FFh
.eh_frame:000000000000626B                 db 0FFh
.eh_frame:000000000000626C                 db  36h ; 6
.eh_frame:000000000000626D                 db    0
.eh_frame:000000000000626E                 db    0
.eh_frame:000000000000626F                 db    0
.eh_frame:0000000000006270                 db    0
.eh_frame:0000000000006271                 db  42h ; B
.eh_frame:0000000000006272                 db  0Eh
.eh_frame:0000000000006273                 db  10h
.eh_frame:0000000000006274                 db  8Ch
.eh_frame:0000000000006275                 db    2
.eh_frame:0000000000006276                 db  41h ; A
.eh_frame:0000000000006277                 db  0Eh
.eh_frame:0000000000006278                 db  18h
.eh_frame:0000000000006279                 db  86h
.eh_frame:000000000000627A                 db    3
.eh_frame:000000000000627B                 db  41h ; A
.eh_frame:000000000000627C                 db  0Eh
.eh_frame:000000000000627D                 db  20h
.eh_frame:000000000000627E                 db  83h
.eh_frame:000000000000627F                 db    4
.eh_frame:0000000000006280                 db  6Eh ; n
.eh_frame:0000000000006281                 db  0Eh
.eh_frame:0000000000006282                 db  18h
.eh_frame:0000000000006283                 db  41h ; A
.eh_frame:0000000000006284                 db  0Eh
.eh_frame:0000000000006285                 db  10h
.eh_frame:0000000000006286                 db  42h ; B
.eh_frame:0000000000006287                 db  0Eh
.eh_frame:0000000000006288                 db    8
.eh_frame:0000000000006289                 db    0
.eh_frame:000000000000628A                 db    0
.eh_frame:000000000000628B                 db    0
.eh_frame:000000000000628C                 db  10h
.eh_frame:000000000000628D                 db    0
.eh_frame:000000000000628E                 db    0
.eh_frame:000000000000628F                 db    0
.eh_frame:0000000000006290                 db  18h
.eh_frame:0000000000006291                 db    3
.eh_frame:0000000000006292                 db    0
.eh_frame:0000000000006293                 db    0
.eh_frame:0000000000006294                 db 0FCh
.eh_frame:0000000000006295                 db 0D3h
.eh_frame:0000000000006296                 db 0FFh
.eh_frame:0000000000006297                 db 0FFh
.eh_frame:0000000000006298                 db  11h
.eh_frame:0000000000006299                 db    0
.eh_frame:000000000000629A                 db    0
.eh_frame:000000000000629B                 db    0
.eh_frame:000000000000629C                 db    0
.eh_frame:000000000000629D                 db    0
.eh_frame:000000000000629E                 db    0
.eh_frame:000000000000629F                 db    0
.eh_frame:00000000000062A0                 db  10h
.eh_frame:00000000000062A1                 db    0
.eh_frame:00000000000062A2                 db    0
.eh_frame:00000000000062A3                 db    0
.eh_frame:00000000000062A4                 db  2Ch ; ,
.eh_frame:00000000000062A5                 db    3
.eh_frame:00000000000062A6                 db    0
.eh_frame:00000000000062A7                 db    0
.eh_frame:00000000000062A8                 db    8
.eh_frame:00000000000062A9                 db 0D4h
.eh_frame:00000000000062AA                 db 0FFh
.eh_frame:00000000000062AB                 db 0FFh
.eh_frame:00000000000062AC                 db  11h
.eh_frame:00000000000062AD                 db    0
.eh_frame:00000000000062AE                 db    0
.eh_frame:00000000000062AF                 db    0
.eh_frame:00000000000062B0                 db    0
.eh_frame:00000000000062B1                 db    0
.eh_frame:00000000000062B2                 db    0
.eh_frame:00000000000062B3                 db    0
.eh_frame:00000000000062B4                 db  10h
.eh_frame:00000000000062B5                 db    0
.eh_frame:00000000000062B6                 db    0
.eh_frame:00000000000062B7                 db    0
.eh_frame:00000000000062B8                 db  40h ; @
.eh_frame:00000000000062B9                 db    3
.eh_frame:00000000000062BA                 db    0
.eh_frame:00000000000062BB                 db    0
.eh_frame:00000000000062BC                 db  14h
.eh_frame:00000000000062BD                 db 0D4h
.eh_frame:00000000000062BE                 db 0FFh
.eh_frame:00000000000062BF                 db 0FFh
.eh_frame:00000000000062C0                 db  35h ; 5
.eh_frame:00000000000062C1                 db    0
.eh_frame:00000000000062C2                 db    0
.eh_frame:00000000000062C3                 db    0
.eh_frame:00000000000062C4                 db    0
.eh_frame:00000000000062C5                 db    0
.eh_frame:00000000000062C6                 db    0
.eh_frame:00000000000062C7                 db    0
.eh_frame:00000000000062C8                 db  10h
.eh_frame:00000000000062C9                 db    0
.eh_frame:00000000000062CA                 db    0
.eh_frame:00000000000062CB                 db    0
.eh_frame:00000000000062CC                 db  54h ; T
.eh_frame:00000000000062CD                 db    3
.eh_frame:00000000000062CE                 db    0
.eh_frame:00000000000062CF                 db    0
.eh_frame:00000000000062D0                 db  40h ; @
.eh_frame:00000000000062D1                 db 0D4h
.eh_frame:00000000000062D2                 db 0FFh
.eh_frame:00000000000062D3                 db 0FFh
.eh_frame:00000000000062D4                 db  15h
.eh_frame:00000000000062D5                 db    0
.eh_frame:00000000000062D6                 db    0
.eh_frame:00000000000062D7                 db    0
.eh_frame:00000000000062D8                 db    0
.eh_frame:00000000000062D9                 db    0
.eh_frame:00000000000062DA                 db    0
.eh_frame:00000000000062DB                 db    0
.eh_frame:00000000000062DC                 db  10h
.eh_frame:00000000000062DD                 db    0
.eh_frame:00000000000062DE                 db    0
.eh_frame:00000000000062DF                 db    0
.eh_frame:00000000000062E0                 db  68h ; h
.eh_frame:00000000000062E1                 db    3
.eh_frame:00000000000062E2                 db    0
.eh_frame:00000000000062E3                 db    0
.eh_frame:00000000000062E4                 db  4Ch ; L
.eh_frame:00000000000062E5                 db 0D4h
.eh_frame:00000000000062E6                 db 0FFh
.eh_frame:00000000000062E7                 db 0FFh
.eh_frame:00000000000062E8                 db  30h ; 0
.eh_frame:00000000000062E9                 db    0
.eh_frame:00000000000062EA                 db    0
.eh_frame:00000000000062EB                 db    0
.eh_frame:00000000000062EC                 db    0
.eh_frame:00000000000062ED                 db  6Bh ; k
.eh_frame:00000000000062EE                 db  0Eh
.eh_frame:00000000000062EF                 db  10h
.eh_frame:00000000000062F0                 db  50h ; P
.eh_frame:00000000000062F1                 db    0
.eh_frame:00000000000062F2                 db    0
.eh_frame:00000000000062F3                 db    0
.eh_frame:00000000000062F4                 db  7Ch ; |
.eh_frame:00000000000062F5                 db    3
.eh_frame:00000000000062F6                 db    0
.eh_frame:00000000000062F7                 db    0
.eh_frame:00000000000062F8                 db  68h ; h
.eh_frame:00000000000062F9                 db 0D4h
.eh_frame:00000000000062FA                 db 0FFh
.eh_frame:00000000000062FB                 db 0FFh
.eh_frame:00000000000062FC                 db  74h ; t
.eh_frame:00000000000062FD                 db    0
.eh_frame:00000000000062FE                 db    0
.eh_frame:00000000000062FF                 db    0
.eh_frame:0000000000006300                 db    0
.eh_frame:0000000000006301                 db  42h ; B
.eh_frame:0000000000006302                 db  0Eh
.eh_frame:0000000000006303                 db  10h
.eh_frame:0000000000006304                 db  8Fh
.eh_frame:0000000000006305                 db    2
.eh_frame:0000000000006306                 db  42h ; B
.eh_frame:0000000000006307                 db  0Eh
.eh_frame:0000000000006308                 db  18h
.eh_frame:0000000000006309                 db  8Eh
.eh_frame:000000000000630A                 db    3
.eh_frame:000000000000630B                 db  49h ; I
.eh_frame:000000000000630C                 db  0Eh
.eh_frame:000000000000630D                 db  20h
.eh_frame:000000000000630E                 db  8Dh
.eh_frame:000000000000630F                 db    4
.eh_frame:0000000000006310                 db  42h ; B
.eh_frame:0000000000006311                 db  0Eh
.eh_frame:0000000000006312                 db  28h ; (
.eh_frame:0000000000006313                 db  8Ch
.eh_frame:0000000000006314                 db    5
.eh_frame:0000000000006315                 db  44h ; D
.eh_frame:0000000000006316                 db  0Eh
.eh_frame:0000000000006317                 db  30h ; 0
.eh_frame:0000000000006318                 db  86h
.eh_frame:0000000000006319                 db    6
.eh_frame:000000000000631A                 db  41h ; A
.eh_frame:000000000000631B                 db  0Eh
.eh_frame:000000000000631C                 db  38h ; 8
.eh_frame:000000000000631D                 db  83h
.eh_frame:000000000000631E                 db    7
.eh_frame:000000000000631F                 db  4Dh ; M
.eh_frame:0000000000006320                 db  0Eh
.eh_frame:0000000000006321                 db  50h ; P
.eh_frame:0000000000006322                 db  5Fh ; _
.eh_frame:0000000000006323                 db  0Eh
.eh_frame:0000000000006324                 db  58h ; X
.eh_frame:0000000000006325                 db  47h ; G
.eh_frame:0000000000006326                 db  0Eh
.eh_frame:0000000000006327                 db  60h ; `
.eh_frame:0000000000006328                 db  46h ; F
.eh_frame:0000000000006329                 db  0Eh
.eh_frame:000000000000632A                 db  68h ; h
.eh_frame:000000000000632B                 db  44h ; D
.eh_frame:000000000000632C                 db  0Eh
.eh_frame:000000000000632D                 db  70h ; p
.eh_frame:000000000000632E                 db  58h ; X
.eh_frame:000000000000632F                 db  0Eh
.eh_frame:0000000000006330                 db  38h ; 8
.eh_frame:0000000000006331                 db  41h ; A
.eh_frame:0000000000006332                 db  0Eh
.eh_frame:0000000000006333                 db  30h ; 0
.eh_frame:0000000000006334                 db  41h ; A
.eh_frame:0000000000006335                 db  0Eh
.eh_frame:0000000000006336                 db  28h ; (
.eh_frame:0000000000006337                 db  42h ; B
.eh_frame:0000000000006338                 db  0Eh
.eh_frame:0000000000006339                 db  20h
.eh_frame:000000000000633A                 db  42h ; B
.eh_frame:000000000000633B                 db  0Eh
.eh_frame:000000000000633C                 db  18h
.eh_frame:000000000000633D                 db  42h ; B
.eh_frame:000000000000633E                 db  0Eh
.eh_frame:000000000000633F                 db  10h
.eh_frame:0000000000006340                 db  42h ; B
.eh_frame:0000000000006341                 db  0Eh
.eh_frame:0000000000006342                 db    8
.eh_frame:0000000000006343                 db    0
.eh_frame:0000000000006344                 db  68h ; h
.eh_frame:0000000000006345                 db    0
.eh_frame:0000000000006346                 db    0
.eh_frame:0000000000006347                 db    0
.eh_frame:0000000000006348                 db 0D0h
.eh_frame:0000000000006349                 db    3
.eh_frame:000000000000634A                 db    0
.eh_frame:000000000000634B                 db    0
.eh_frame:000000000000634C                 db  94h
.eh_frame:000000000000634D                 db 0D4h
.eh_frame:000000000000634E                 db 0FFh
.eh_frame:000000000000634F                 db 0FFh
.eh_frame:0000000000006350                 db 0E3h
.eh_frame:0000000000006351                 db    0
.eh_frame:0000000000006352                 db    0
.eh_frame:0000000000006353                 db    0
.eh_frame:0000000000006354                 db    0
.eh_frame:0000000000006355                 db  42h ; B
.eh_frame:0000000000006356                 db  0Eh
.eh_frame:0000000000006357                 db  10h
.eh_frame:0000000000006358                 db  8Fh
.eh_frame:0000000000006359                 db    2
.eh_frame:000000000000635A                 db  42h ; B
.eh_frame:000000000000635B                 db  0Eh
.eh_frame:000000000000635C                 db  18h
.eh_frame:000000000000635D                 db  8Eh
.eh_frame:000000000000635E                 db    3
.eh_frame:000000000000635F                 db  49h ; I
.eh_frame:0000000000006360                 db  0Eh
.eh_frame:0000000000006361                 db  20h
.eh_frame:0000000000006362                 db  8Dh
.eh_frame:0000000000006363                 db    4
.eh_frame:0000000000006364                 db  42h ; B
.eh_frame:0000000000006365                 db  0Eh
.eh_frame:0000000000006366                 db  28h ; (
.eh_frame:0000000000006367                 db  8Ch
.eh_frame:0000000000006368                 db    5
.eh_frame:0000000000006369                 db  44h ; D
.eh_frame:000000000000636A                 db  0Eh
.eh_frame:000000000000636B                 db  30h ; 0
.eh_frame:000000000000636C                 db  86h
.eh_frame:000000000000636D                 db    6
.eh_frame:000000000000636E                 db  41h ; A
.eh_frame:000000000000636F                 db  0Eh
.eh_frame:0000000000006370                 db  38h ; 8
.eh_frame:0000000000006371                 db  83h
.eh_frame:0000000000006372                 db    7
.eh_frame:0000000000006373                 db  4Dh ; M
.eh_frame:0000000000006374                 db  0Eh
.eh_frame:0000000000006375                 db  70h ; p
.eh_frame:0000000000006376                 db  65h ; e
.eh_frame:0000000000006377                 db  0Eh
.eh_frame:0000000000006378                 db  78h ; x
.eh_frame:0000000000006379                 db  4Dh ; M
.eh_frame:000000000000637A                 db  0Eh
.eh_frame:000000000000637B                 db  80h
.eh_frame:000000000000637C                 db    1
.eh_frame:000000000000637D                 db  46h ; F
.eh_frame:000000000000637E                 db  0Eh
.eh_frame:000000000000637F                 db  88h
.eh_frame:0000000000006380                 db    1
.eh_frame:0000000000006381                 db  42h ; B
.eh_frame:0000000000006382                 db  0Eh
.eh_frame:0000000000006383                 db  90h
.eh_frame:0000000000006384                 db    1
.eh_frame:0000000000006385                 db  5Eh ; ^
.eh_frame:0000000000006386                 db  0Eh
.eh_frame:0000000000006387                 db  70h ; p
.eh_frame:0000000000006388                 db  56h ; V
.eh_frame:0000000000006389                 db  0Eh
.eh_frame:000000000000638A                 db  78h ; x
.eh_frame:000000000000638B                 db  43h ; C
.eh_frame:000000000000638C                 db  0Eh
.eh_frame:000000000000638D                 db  80h
.eh_frame:000000000000638E                 db    1
.eh_frame:000000000000638F                 db  43h ; C
.eh_frame:0000000000006390                 db  0Eh
.eh_frame:0000000000006391                 db  88h
.eh_frame:0000000000006392                 db    1
.eh_frame:0000000000006393                 db  56h ; V
.eh_frame:0000000000006394                 db  0Eh
.eh_frame:0000000000006395                 db  90h
.eh_frame:0000000000006396                 db    1
.eh_frame:0000000000006397                 db  52h ; R
.eh_frame:0000000000006398                 db  0Eh
.eh_frame:0000000000006399                 db  70h ; p
.eh_frame:000000000000639A                 db  5Bh ; [
.eh_frame:000000000000639B                 db  0Eh
.eh_frame:000000000000639C                 db  38h ; 8
.eh_frame:000000000000639D                 db  41h ; A
.eh_frame:000000000000639E                 db  0Eh
.eh_frame:000000000000639F                 db  30h ; 0
.eh_frame:00000000000063A0                 db  41h ; A
.eh_frame:00000000000063A1                 db  0Eh
.eh_frame:00000000000063A2                 db  28h ; (
.eh_frame:00000000000063A3                 db  42h ; B
.eh_frame:00000000000063A4                 db  0Eh
.eh_frame:00000000000063A5                 db  20h
.eh_frame:00000000000063A6                 db  42h ; B
.eh_frame:00000000000063A7                 db  0Eh
.eh_frame:00000000000063A8                 db  18h
.eh_frame:00000000000063A9                 db  42h ; B
.eh_frame:00000000000063AA                 db  0Eh
.eh_frame:00000000000063AB                 db  10h
.eh_frame:00000000000063AC                 db  42h ; B
.eh_frame:00000000000063AD                 db  0Eh
.eh_frame:00000000000063AE                 db    8
.eh_frame:00000000000063AF                 db    0
.eh_frame:00000000000063B0                 db  10h
.eh_frame:00000000000063B1                 db    0
.eh_frame:00000000000063B2                 db    0
.eh_frame:00000000000063B3                 db    0
.eh_frame:00000000000063B4                 db  3Ch ; <
.eh_frame:00000000000063B5                 db    4
.eh_frame:00000000000063B6                 db    0
.eh_frame:00000000000063B7                 db    0
.eh_frame:00000000000063B8                 db  18h
.eh_frame:00000000000063B9                 db 0D5h
.eh_frame:00000000000063BA                 db 0FFh
.eh_frame:00000000000063BB                 db 0FFh
.eh_frame:00000000000063BC                 db  0Ah
.eh_frame:00000000000063BD                 db    0
.eh_frame:00000000000063BE                 db    0
.eh_frame:00000000000063BF                 db    0
.eh_frame:00000000000063C0                 db    0
.eh_frame:00000000000063C1                 db    0
.eh_frame:00000000000063C2                 db    0
.eh_frame:00000000000063C3                 db    0
.eh_frame:00000000000063C4                 db  28h ; (
.eh_frame:00000000000063C5                 db    0
.eh_frame:00000000000063C6                 db    0
.eh_frame:00000000000063C7                 db    0
.eh_frame:00000000000063C8                 db  50h ; P
.eh_frame:00000000000063C9                 db    4
.eh_frame:00000000000063CA                 db    0
.eh_frame:00000000000063CB                 db    0
.eh_frame:00000000000063CC                 db  14h
.eh_frame:00000000000063CD                 db 0D5h
.eh_frame:00000000000063CE                 db 0FFh
.eh_frame:00000000000063CF                 db 0FFh
.eh_frame:00000000000063D0                 db  93h
.eh_frame:00000000000063D1                 db    0
.eh_frame:00000000000063D2                 db    0
.eh_frame:00000000000063D3                 db    0
.eh_frame:00000000000063D4                 db    0
.eh_frame:00000000000063D5                 db  48h ; H
.eh_frame:00000000000063D6                 db  0Eh
.eh_frame:00000000000063D7                 db  10h
.eh_frame:00000000000063D8                 db  8Ch
.eh_frame:00000000000063D9                 db    2
.eh_frame:00000000000063DA                 db  48h ; H
.eh_frame:00000000000063DB                 db  0Eh
.eh_frame:00000000000063DC                 db  18h
.eh_frame:00000000000063DD                 db  86h
.eh_frame:00000000000063DE                 db    3
.eh_frame:00000000000063DF                 db  41h ; A
.eh_frame:00000000000063E0                 db  0Eh
.eh_frame:00000000000063E1                 db  20h
.eh_frame:00000000000063E2                 db  83h
.eh_frame:00000000000063E3                 db    4
.eh_frame:00000000000063E4                 db    2
.eh_frame:00000000000063E5                 db  74h ; t
.eh_frame:00000000000063E6                 db  0Eh
.eh_frame:00000000000063E7                 db  18h
.eh_frame:00000000000063E8                 db  4Bh ; K
.eh_frame:00000000000063E9                 db  0Eh
.eh_frame:00000000000063EA                 db  10h
.eh_frame:00000000000063EB                 db  42h ; B
.eh_frame:00000000000063EC                 db  0Eh
.eh_frame:00000000000063ED                 db    8
.eh_frame:00000000000063EE                 db    0
.eh_frame:00000000000063EF                 db    0
.eh_frame:00000000000063F0                 db  10h
.eh_frame:00000000000063F1                 db    0
.eh_frame:00000000000063F2                 db    0
.eh_frame:00000000000063F3                 db    0
.eh_frame:00000000000063F4                 db  7Ch ; |
.eh_frame:00000000000063F5                 db    4
.eh_frame:00000000000063F6                 db    0
.eh_frame:00000000000063F7                 db    0
.eh_frame:00000000000063F8                 db  88h
.eh_frame:00000000000063F9                 db 0D5h
.eh_frame:00000000000063FA                 db 0FFh
.eh_frame:00000000000063FB                 db 0FFh
.eh_frame:00000000000063FC                 db  13h
.eh_frame:00000000000063FD                 db    0
.eh_frame:00000000000063FE                 db    0
.eh_frame:00000000000063FF                 db    0
.eh_frame:0000000000006400                 db    0
.eh_frame:0000000000006401                 db    0
.eh_frame:0000000000006402                 db    0
.eh_frame:0000000000006403                 db    0
.eh_frame:0000000000006404                 db  10h
.eh_frame:0000000000006405                 db    0
.eh_frame:0000000000006406                 db    0
.eh_frame:0000000000006407                 db    0
.eh_frame:0000000000006408                 db  90h
.eh_frame:0000000000006409                 db    4
.eh_frame:000000000000640A                 db    0
.eh_frame:000000000000640B                 db    0
.eh_frame:000000000000640C                 db  94h
.eh_frame:000000000000640D                 db 0D5h
.eh_frame:000000000000640E                 db 0FFh
.eh_frame:000000000000640F                 db 0FFh
.eh_frame:0000000000006410                 db  0Ch
.eh_frame:0000000000006411                 db    0
.eh_frame:0000000000006412                 db    0
.eh_frame:0000000000006413                 db    0
.eh_frame:0000000000006414                 db    0
.eh_frame:0000000000006415                 db    0
.eh_frame:0000000000006416                 db    0
.eh_frame:0000000000006417                 db    0
.eh_frame:0000000000006418                 db  10h
.eh_frame:0000000000006419                 db    0
.eh_frame:000000000000641A                 db    0
.eh_frame:000000000000641B                 db    0
.eh_frame:000000000000641C                 db 0A4h
.eh_frame:000000000000641D                 db    4
.eh_frame:000000000000641E                 db    0
.eh_frame:000000000000641F                 db    0
.eh_frame:0000000000006420                 db  90h
.eh_frame:0000000000006421                 db 0D5h
.eh_frame:0000000000006422                 db 0FFh
.eh_frame:0000000000006423                 db 0FFh
.eh_frame:0000000000006424                 db  18h
.eh_frame:0000000000006425                 db    0
.eh_frame:0000000000006426                 db    0
.eh_frame:0000000000006427                 db    0
.eh_frame:0000000000006428                 db    0
.eh_frame:0000000000006429                 db    0
.eh_frame:000000000000642A                 db    0
.eh_frame:000000000000642B                 db    0
.eh_frame:000000000000642C                 db  10h
.eh_frame:000000000000642D                 db    0
.eh_frame:000000000000642E                 db    0
.eh_frame:000000000000642F                 db    0
.eh_frame:0000000000006430                 db 0B8h
.eh_frame:0000000000006431                 db    4
.eh_frame:0000000000006432                 db    0
.eh_frame:0000000000006433                 db    0
.eh_frame:0000000000006434                 db  9Ch
.eh_frame:0000000000006435                 db 0D5h
.eh_frame:0000000000006436                 db 0FFh
.eh_frame:0000000000006437                 db 0FFh
.eh_frame:0000000000006438                 db  14h
.eh_frame:0000000000006439                 db    0
.eh_frame:000000000000643A                 db    0
.eh_frame:000000000000643B                 db    0
.eh_frame:000000000000643C                 db    0
.eh_frame:000000000000643D                 db    0
.eh_frame:000000000000643E                 db    0
.eh_frame:000000000000643F                 db    0
.eh_frame:0000000000006440                 db  18h
.eh_frame:0000000000006441                 db    0
.eh_frame:0000000000006442                 db    0
.eh_frame:0000000000006443                 db    0
.eh_frame:0000000000006444                 db 0CCh
.eh_frame:0000000000006445                 db    4
.eh_frame:0000000000006446                 db    0
.eh_frame:0000000000006447                 db    0
.eh_frame:0000000000006448                 db 0A8h
.eh_frame:0000000000006449                 db 0D5h
.eh_frame:000000000000644A                 db 0FFh
.eh_frame:000000000000644B                 db 0FFh
.eh_frame:000000000000644C                 db  8Eh
.eh_frame:000000000000644D                 db    0
.eh_frame:000000000000644E                 db    0
.eh_frame:000000000000644F                 db    0
.eh_frame:0000000000006450                 db    0
.eh_frame:0000000000006451                 db  44h ; D
.eh_frame:0000000000006452                 db  0Eh
.eh_frame:0000000000006453                 db  50h ; P
.eh_frame:0000000000006454                 db    2
.eh_frame:0000000000006455                 db  7Fh ; 
.eh_frame:0000000000006456                 db  0Ah
.eh_frame:0000000000006457                 db  0Eh
.eh_frame:0000000000006458                 db    8
.eh_frame:0000000000006459                 db  41h ; A
.eh_frame:000000000000645A                 db  0Bh
.eh_frame:000000000000645B                 db    0
.eh_frame:000000000000645C                 db  18h
.eh_frame:000000000000645D                 db    0
.eh_frame:000000000000645E                 db    0
.eh_frame:000000000000645F                 db    0
.eh_frame:0000000000006460                 db 0E8h
.eh_frame:0000000000006461                 db    4
.eh_frame:0000000000006462                 db    0
.eh_frame:0000000000006463                 db    0
.eh_frame:0000000000006464                 db  1Ch
.eh_frame:0000000000006465                 db 0D6h
.eh_frame:0000000000006466                 db 0FFh
.eh_frame:0000000000006467                 db 0FFh
.eh_frame:0000000000006468                 db  8Ah
.eh_frame:0000000000006469                 db    0
.eh_frame:000000000000646A                 db    0
.eh_frame:000000000000646B                 db    0
.eh_frame:000000000000646C                 db    0
.eh_frame:000000000000646D                 db  44h ; D
.eh_frame:000000000000646E                 db  0Eh
.eh_frame:000000000000646F                 db  50h ; P
.eh_frame:0000000000006470                 db    2
.eh_frame:0000000000006471                 db  7Bh ; {
.eh_frame:0000000000006472                 db  0Ah
.eh_frame:0000000000006473                 db  0Eh
.eh_frame:0000000000006474                 db    8
.eh_frame:0000000000006475                 db  41h ; A
.eh_frame:0000000000006476                 db  0Bh
.eh_frame:0000000000006477                 db    0
.eh_frame:0000000000006478                 db  10h
.eh_frame:0000000000006479                 db    0
.eh_frame:000000000000647A                 db    0
.eh_frame:000000000000647B                 db    0
.eh_frame:000000000000647C                 db    4
.eh_frame:000000000000647D                 db    5
.eh_frame:000000000000647E                 db    0
.eh_frame:000000000000647F                 db    0
.eh_frame:0000000000006480                 db  90h
.eh_frame:0000000000006481                 db 0D6h
.eh_frame:0000000000006482                 db 0FFh
.eh_frame:0000000000006483                 db 0FFh
.eh_frame:0000000000006484                 db  0Ch
.eh_frame:0000000000006485                 db    0
.eh_frame:0000000000006486                 db    0
.eh_frame:0000000000006487                 db    0
.eh_frame:0000000000006488                 db    0
.eh_frame:0000000000006489                 db    0
.eh_frame:000000000000648A                 db    0
.eh_frame:000000000000648B                 db    0
.eh_frame:000000000000648C                 db  10h
.eh_frame:000000000000648D                 db    0
.eh_frame:000000000000648E                 db    0
.eh_frame:000000000000648F                 db    0
.eh_frame:0000000000006490                 db  18h
.eh_frame:0000000000006491                 db    5
.eh_frame:0000000000006492                 db    0
.eh_frame:0000000000006493                 db    0
.eh_frame:0000000000006494                 db  8Ch
.eh_frame:0000000000006495                 db 0D6h
.eh_frame:0000000000006496                 db 0FFh
.eh_frame:0000000000006497                 db 0FFh
.eh_frame:0000000000006498                 db  0Fh
.eh_frame:0000000000006499                 db    0
.eh_frame:000000000000649A                 db    0
.eh_frame:000000000000649B                 db    0
.eh_frame:000000000000649C                 db    0
.eh_frame:000000000000649D                 db    0
.eh_frame:000000000000649E                 db    0
.eh_frame:000000000000649F                 db    0
.eh_frame:00000000000064A0                 db  18h
.eh_frame:00000000000064A1                 db    0
.eh_frame:00000000000064A2                 db    0
.eh_frame:00000000000064A3                 db    0
.eh_frame:00000000000064A4                 db  2Ch ; ,
.eh_frame:00000000000064A5                 db    5
.eh_frame:00000000000064A6                 db    0
.eh_frame:00000000000064A7                 db    0
.eh_frame:00000000000064A8                 db  88h
.eh_frame:00000000000064A9                 db 0D6h
.eh_frame:00000000000064AA                 db 0FFh
.eh_frame:00000000000064AB                 db 0FFh
.eh_frame:00000000000064AC                 db  98h
.eh_frame:00000000000064AD                 db    0
.eh_frame:00000000000064AE                 db    0
.eh_frame:00000000000064AF                 db    0
.eh_frame:00000000000064B0                 db    0
.eh_frame:00000000000064B1                 db  44h ; D
.eh_frame:00000000000064B2                 db  0Eh
.eh_frame:00000000000064B3                 db  50h ; P
.eh_frame:00000000000064B4                 db    2
.eh_frame:00000000000064B5                 db  8Eh
.eh_frame:00000000000064B6                 db  0Ah
.eh_frame:00000000000064B7                 db  0Eh
.eh_frame:00000000000064B8                 db    8
.eh_frame:00000000000064B9                 db  41h ; A
.eh_frame:00000000000064BA                 db  0Bh
.eh_frame:00000000000064BB                 db    0
.eh_frame:00000000000064BC                 db  10h
.eh_frame:00000000000064BD                 db    0
.eh_frame:00000000000064BE                 db    0
.eh_frame:00000000000064BF                 db    0
.eh_frame:00000000000064C0                 db  48h ; H
.eh_frame:00000000000064C1                 db    5
.eh_frame:00000000000064C2                 db    0
.eh_frame:00000000000064C3                 db    0
.eh_frame:00000000000064C4                 db  0Ch
.eh_frame:00000000000064C5                 db 0D7h
.eh_frame:00000000000064C6                 db 0FFh
.eh_frame:00000000000064C7                 db 0FFh
.eh_frame:00000000000064C8                 db  10h
.eh_frame:00000000000064C9                 db    0
.eh_frame:00000000000064CA                 db    0
.eh_frame:00000000000064CB                 db    0
.eh_frame:00000000000064CC                 db    0
.eh_frame:00000000000064CD                 db    0
.eh_frame:00000000000064CE                 db    0
.eh_frame:00000000000064CF                 db    0
.eh_frame:00000000000064D0                 db  10h
.eh_frame:00000000000064D1                 db    0
.eh_frame:00000000000064D2                 db    0
.eh_frame:00000000000064D3                 db    0
.eh_frame:00000000000064D4                 db  5Ch ; \
.eh_frame:00000000000064D5                 db    5
.eh_frame:00000000000064D6                 db    0
.eh_frame:00000000000064D7                 db    0
.eh_frame:00000000000064D8                 db    8
.eh_frame:00000000000064D9                 db 0D7h
.eh_frame:00000000000064DA                 db 0FFh
.eh_frame:00000000000064DB                 db 0FFh
.eh_frame:00000000000064DC                 db  11h
.eh_frame:00000000000064DD                 db    0
.eh_frame:00000000000064DE                 db    0
.eh_frame:00000000000064DF                 db    0
.eh_frame:00000000000064E0                 db    0
.eh_frame:00000000000064E1                 db    0
.eh_frame:00000000000064E2                 db    0
.eh_frame:00000000000064E3                 db    0
.eh_frame:00000000000064E4                 db  10h
.eh_frame:00000000000064E5                 db    0
.eh_frame:00000000000064E6                 db    0
.eh_frame:00000000000064E7                 db    0
.eh_frame:00000000000064E8                 db  70h ; p
.eh_frame:00000000000064E9                 db    5
.eh_frame:00000000000064EA                 db    0
.eh_frame:00000000000064EB                 db    0
.eh_frame:00000000000064EC                 db  14h
.eh_frame:00000000000064ED                 db 0D7h
.eh_frame:00000000000064EE                 db 0FFh
.eh_frame:00000000000064EF                 db 0FFh
.eh_frame:00000000000064F0                 db  0Ah
.eh_frame:00000000000064F1                 db    0
.eh_frame:00000000000064F2                 db    0
.eh_frame:00000000000064F3                 db    0
.eh_frame:00000000000064F4                 db    0
.eh_frame:00000000000064F5                 db    0
.eh_frame:00000000000064F6                 db    0
.eh_frame:00000000000064F7                 db    0
.eh_frame:00000000000064F8                 db  18h
.eh_frame:00000000000064F9                 db    0
.eh_frame:00000000000064FA                 db    0
.eh_frame:00000000000064FB                 db    0
.eh_frame:00000000000064FC                 db  84h
.eh_frame:00000000000064FD                 db    5
.eh_frame:00000000000064FE                 db    0
.eh_frame:00000000000064FF                 db    0
.eh_frame:0000000000006500                 db  10h
.eh_frame:0000000000006501                 db 0D7h
.eh_frame:0000000000006502                 db 0FFh
.eh_frame:0000000000006503                 db 0FFh
.eh_frame:0000000000006504                 db  8Eh
.eh_frame:0000000000006505                 db    0
.eh_frame:0000000000006506                 db    0
.eh_frame:0000000000006507                 db    0
.eh_frame:0000000000006508                 db    0
.eh_frame:0000000000006509                 db  44h ; D
.eh_frame:000000000000650A                 db  0Eh
.eh_frame:000000000000650B                 db  50h ; P
.eh_frame:000000000000650C                 db    2
.eh_frame:000000000000650D                 db  7Fh ; 
.eh_frame:000000000000650E                 db  0Ah
.eh_frame:000000000000650F                 db  0Eh
.eh_frame:0000000000006510                 db    8
.eh_frame:0000000000006511                 db  41h ; A
.eh_frame:0000000000006512                 db  0Bh
.eh_frame:0000000000006513                 db    0
.eh_frame:0000000000006514                 db  18h
.eh_frame:0000000000006515                 db    0
.eh_frame:0000000000006516                 db    0
.eh_frame:0000000000006517                 db    0
.eh_frame:0000000000006518                 db 0A0h
.eh_frame:0000000000006519                 db    5
.eh_frame:000000000000651A                 db    0
.eh_frame:000000000000651B                 db    0
.eh_frame:000000000000651C                 db  84h
.eh_frame:000000000000651D                 db 0D7h
.eh_frame:000000000000651E                 db 0FFh
.eh_frame:000000000000651F                 db 0FFh
.eh_frame:0000000000006520                 db  91h
.eh_frame:0000000000006521                 db    0
.eh_frame:0000000000006522                 db    0
.eh_frame:0000000000006523                 db    0
.eh_frame:0000000000006524                 db    0
.eh_frame:0000000000006525                 db  44h ; D
.eh_frame:0000000000006526                 db  0Eh
.eh_frame:0000000000006527                 db  50h ; P
.eh_frame:0000000000006528                 db    2
.eh_frame:0000000000006529                 db  82h
.eh_frame:000000000000652A                 db  0Ah
.eh_frame:000000000000652B                 db  0Eh
.eh_frame:000000000000652C                 db    8
.eh_frame:000000000000652D                 db  41h ; A
.eh_frame:000000000000652E                 db  0Bh
.eh_frame:000000000000652F                 db    0
.eh_frame:0000000000006530                 db  10h
.eh_frame:0000000000006531                 db    0
.eh_frame:0000000000006532                 db    0
.eh_frame:0000000000006533                 db    0
.eh_frame:0000000000006534                 db 0BCh
.eh_frame:0000000000006535                 db    5
.eh_frame:0000000000006536                 db    0
.eh_frame:0000000000006537                 db    0
.eh_frame:0000000000006538                 db    8
.eh_frame:0000000000006539                 db 0D8h
.eh_frame:000000000000653A                 db 0FFh
.eh_frame:000000000000653B                 db 0FFh
.eh_frame:000000000000653C                 db  0Ch
.eh_frame:000000000000653D                 db    0
.eh_frame:000000000000653E                 db    0
.eh_frame:000000000000653F                 db    0
.eh_frame:0000000000006540                 db    0
.eh_frame:0000000000006541                 db    0
.eh_frame:0000000000006542                 db    0
.eh_frame:0000000000006543                 db    0
.eh_frame:0000000000006544                 db  10h
.eh_frame:0000000000006545                 db    0
.eh_frame:0000000000006546                 db    0
.eh_frame:0000000000006547                 db    0
.eh_frame:0000000000006548                 db 0D0h
.eh_frame:0000000000006549                 db    5
.eh_frame:000000000000654A                 db    0
.eh_frame:000000000000654B                 db    0
.eh_frame:000000000000654C                 db    4
.eh_frame:000000000000654D                 db 0D8h
.eh_frame:000000000000654E                 db 0FFh
.eh_frame:000000000000654F                 db 0FFh
.eh_frame:0000000000006550                 db  17h
.eh_frame:0000000000006551                 db    0
.eh_frame:0000000000006552                 db    0
.eh_frame:0000000000006553                 db    0
.eh_frame:0000000000006554                 db    0
.eh_frame:0000000000006555                 db    0
.eh_frame:0000000000006556                 db    0
.eh_frame:0000000000006557                 db    0
.eh_frame:0000000000006558                 db  10h
.eh_frame:0000000000006559                 db    0
.eh_frame:000000000000655A                 db    0
.eh_frame:000000000000655B                 db    0
.eh_frame:000000000000655C                 db 0E4h
.eh_frame:000000000000655D                 db    5
.eh_frame:000000000000655E                 db    0
.eh_frame:000000000000655F                 db    0
.eh_frame:0000000000006560                 db  10h
.eh_frame:0000000000006561                 db 0D8h
.eh_frame:0000000000006562                 db 0FFh
.eh_frame:0000000000006563                 db 0FFh
.eh_frame:0000000000006564                 db  13h
.eh_frame:0000000000006565                 db    0
.eh_frame:0000000000006566                 db    0
.eh_frame:0000000000006567                 db    0
.eh_frame:0000000000006568                 db    0
.eh_frame:0000000000006569                 db    0
.eh_frame:000000000000656A                 db    0
.eh_frame:000000000000656B                 db    0
.eh_frame:000000000000656C                 db  10h
.eh_frame:000000000000656D                 db    0
.eh_frame:000000000000656E                 db    0
.eh_frame:000000000000656F                 db    0
.eh_frame:0000000000006570                 db 0F8h
.eh_frame:0000000000006571                 db    5
.eh_frame:0000000000006572                 db    0
.eh_frame:0000000000006573                 db    0
.eh_frame:0000000000006574                 db  1Ch
.eh_frame:0000000000006575                 db 0D8h
.eh_frame:0000000000006576                 db 0FFh
.eh_frame:0000000000006577                 db 0FFh
.eh_frame:0000000000006578                 db  0Ch
.eh_frame:0000000000006579                 db    0
.eh_frame:000000000000657A                 db    0
.eh_frame:000000000000657B                 db    0
.eh_frame:000000000000657C                 db    0
.eh_frame:000000000000657D                 db    0
.eh_frame:000000000000657E                 db    0
.eh_frame:000000000000657F                 db    0
.eh_frame:0000000000006580                 db  10h
.eh_frame:0000000000006581                 db    0
.eh_frame:0000000000006582                 db    0
.eh_frame:0000000000006583                 db    0
.eh_frame:0000000000006584                 db  0Ch
.eh_frame:0000000000006585                 db    6
.eh_frame:0000000000006586                 db    0
.eh_frame:0000000000006587                 db    0
.eh_frame:0000000000006588                 db  18h
.eh_frame:0000000000006589                 db 0D8h
.eh_frame:000000000000658A                 db 0FFh
.eh_frame:000000000000658B                 db 0FFh
.eh_frame:000000000000658C                 db  14h
.eh_frame:000000000000658D                 db    0
.eh_frame:000000000000658E                 db    0
.eh_frame:000000000000658F                 db    0
.eh_frame:0000000000006590                 db    0
.eh_frame:0000000000006591                 db    0
.eh_frame:0000000000006592                 db    0
.eh_frame:0000000000006593                 db    0
.eh_frame:0000000000006594                 db  10h
.eh_frame:0000000000006595                 db    0
.eh_frame:0000000000006596                 db    0
.eh_frame:0000000000006597                 db    0
.eh_frame:0000000000006598                 db  20h
.eh_frame:0000000000006599                 db    6
.eh_frame:000000000000659A                 db    0
.eh_frame:000000000000659B                 db    0
.eh_frame:000000000000659C                 db  24h ; $
.eh_frame:000000000000659D                 db 0D8h
.eh_frame:000000000000659E                 db 0FFh
.eh_frame:000000000000659F                 db 0FFh
.eh_frame:00000000000065A0                 db  13h
.eh_frame:00000000000065A1                 db    0
.eh_frame:00000000000065A2                 db    0
.eh_frame:00000000000065A3                 db    0
.eh_frame:00000000000065A4                 db    0
.eh_frame:00000000000065A5                 db    0
.eh_frame:00000000000065A6                 db    0
.eh_frame:00000000000065A7                 db    0
.eh_frame:00000000000065A8                 db  14h
.eh_frame:00000000000065A9                 db    0
.eh_frame:00000000000065AA                 db    0
.eh_frame:00000000000065AB                 db    0
.eh_frame:00000000000065AC                 db  34h ; 4
.eh_frame:00000000000065AD                 db    6
.eh_frame:00000000000065AE                 db    0
.eh_frame:00000000000065AF                 db    0
.eh_frame:00000000000065B0                 db  30h ; 0
.eh_frame:00000000000065B1                 db 0D8h
.eh_frame:00000000000065B2                 db 0FFh
.eh_frame:00000000000065B3                 db 0FFh
.eh_frame:00000000000065B4                 db  18h
.eh_frame:00000000000065B5                 db    0
.eh_frame:00000000000065B6                 db    0
.eh_frame:00000000000065B7                 db    0
.eh_frame:00000000000065B8                 db    0
.eh_frame:00000000000065B9                 db    0
.eh_frame:00000000000065BA                 db    0
.eh_frame:00000000000065BB                 db    0
.eh_frame:00000000000065BC                 db    0
.eh_frame:00000000000065BD                 db    0
.eh_frame:00000000000065BE                 db    0
.eh_frame:00000000000065BF                 db    0
.eh_frame:00000000000065C0                 db  10h
.eh_frame:00000000000065C1                 db    1
.eh_frame:00000000000065C2                 db    0
.eh_frame:00000000000065C3                 db    0
.eh_frame:00000000000065C4                 db  4Ch ; L
.eh_frame:00000000000065C5                 db    6
.eh_frame:00000000000065C6                 db    0
.eh_frame:00000000000065C7                 db    0
.eh_frame:00000000000065C8                 db  38h ; 8
.eh_frame:00000000000065C9                 db 0D8h
.eh_frame:00000000000065CA                 db 0FFh
.eh_frame:00000000000065CB                 db 0FFh
.eh_frame:00000000000065CC                 db  17h
.eh_frame:00000000000065CD                 db    4
.eh_frame:00000000000065CE                 db    0
.eh_frame:00000000000065CF                 db    0
.eh_frame:00000000000065D0                 db    0
.eh_frame:00000000000065D1                 db  42h ; B
.eh_frame:00000000000065D2                 db  0Eh
.eh_frame:00000000000065D3                 db  10h
.eh_frame:00000000000065D4                 db  8Fh
.eh_frame:00000000000065D5                 db    2
.eh_frame:00000000000065D6                 db  42h ; B
.eh_frame:00000000000065D7                 db  0Eh
.eh_frame:00000000000065D8                 db  18h
.eh_frame:00000000000065D9                 db  8Eh
.eh_frame:00000000000065DA                 db    3
.eh_frame:00000000000065DB                 db  42h ; B
.eh_frame:00000000000065DC                 db  0Eh
.eh_frame:00000000000065DD                 db  20h
.eh_frame:00000000000065DE                 db  8Dh
.eh_frame:00000000000065DF                 db    4
.eh_frame:00000000000065E0                 db  42h ; B
.eh_frame:00000000000065E1                 db  0Eh
.eh_frame:00000000000065E2                 db  28h ; (
.eh_frame:00000000000065E3                 db  8Ch
.eh_frame:00000000000065E4                 db    5
.eh_frame:00000000000065E5                 db  44h ; D
.eh_frame:00000000000065E6                 db  0Eh
.eh_frame:00000000000065E7                 db  30h ; 0
.eh_frame:00000000000065E8                 db  86h
.eh_frame:00000000000065E9                 db    6
.eh_frame:00000000000065EA                 db  41h ; A
.eh_frame:00000000000065EB                 db  0Eh
.eh_frame:00000000000065EC                 db  38h ; 8
.eh_frame:00000000000065ED                 db  83h
.eh_frame:00000000000065EE                 db    7
.eh_frame:00000000000065EF                 db  4Ah ; J
.eh_frame:00000000000065F0                 db  0Eh
.eh_frame:00000000000065F1                 db  60h ; `
.eh_frame:00000000000065F2                 db    2
.eh_frame:00000000000065F3                 db 0DDh
.eh_frame:00000000000065F4                 db  0Eh
.eh_frame:00000000000065F5                 db  68h ; h
.eh_frame:00000000000065F6                 db  57h ; W
.eh_frame:00000000000065F7                 db  0Eh
.eh_frame:00000000000065F8                 db  70h ; p
.eh_frame:00000000000065F9                 db  42h ; B
.eh_frame:00000000000065FA                 db  0Eh
.eh_frame:00000000000065FB                 db  78h ; x
.eh_frame:00000000000065FC                 db  42h ; B
.eh_frame:00000000000065FD                 db  0Eh
.eh_frame:00000000000065FE                 db  80h
.eh_frame:00000000000065FF                 db    1
.eh_frame:0000000000006600                 db  42h ; B
.eh_frame:0000000000006601                 db  0Eh
.eh_frame:0000000000006602                 db  88h
.eh_frame:0000000000006603                 db    1
.eh_frame:0000000000006604                 db  42h ; B
.eh_frame:0000000000006605                 db  0Eh
.eh_frame:0000000000006606                 db  90h
.eh_frame:0000000000006607                 db    1
.eh_frame:0000000000006608                 db  53h ; S
.eh_frame:0000000000006609                 db  0Eh
.eh_frame:000000000000660A                 db  60h ; `
.eh_frame:000000000000660B                 db  44h ; D
.eh_frame:000000000000660C                 db  0Ah
.eh_frame:000000000000660D                 db  0Eh
.eh_frame:000000000000660E                 db  38h ; 8
.eh_frame:000000000000660F                 db  41h ; A
.eh_frame:0000000000006610                 db  0Eh
.eh_frame:0000000000006611                 db  30h ; 0
.eh_frame:0000000000006612                 db  41h ; A
.eh_frame:0000000000006613                 db  0Eh
.eh_frame:0000000000006614                 db  28h ; (
.eh_frame:0000000000006615                 db  42h ; B
.eh_frame:0000000000006616                 db  0Eh
.eh_frame:0000000000006617                 db  20h
.eh_frame:0000000000006618                 db  42h ; B
.eh_frame:0000000000006619                 db  0Eh
.eh_frame:000000000000661A                 db  18h
.eh_frame:000000000000661B                 db  42h ; B
.eh_frame:000000000000661C                 db  0Eh
.eh_frame:000000000000661D                 db  10h
.eh_frame:000000000000661E                 db  42h ; B
.eh_frame:000000000000661F                 db  0Eh
.eh_frame:0000000000006620                 db    8
.eh_frame:0000000000006621                 db  44h ; D
.eh_frame:0000000000006622                 db  0Bh
.eh_frame:0000000000006623                 db    2
.eh_frame:0000000000006624                 db  78h ; x
.eh_frame:0000000000006625                 db  0Ah
.eh_frame:0000000000006626                 db  0Eh
.eh_frame:0000000000006627                 db  68h ; h
.eh_frame:0000000000006628                 db  48h ; H
.eh_frame:0000000000006629                 db  0Bh
.eh_frame:000000000000662A                 db  5Ah ; Z
.eh_frame:000000000000662B                 db  0Ah
.eh_frame:000000000000662C                 db  0Eh
.eh_frame:000000000000662D                 db  38h ; 8
.eh_frame:000000000000662E                 db  47h ; G
.eh_frame:000000000000662F                 db  0Eh
.eh_frame:0000000000006630                 db  30h ; 0
.eh_frame:0000000000006631                 db  41h ; A
.eh_frame:0000000000006632                 db  0Eh
.eh_frame:0000000000006633                 db  28h ; (
.eh_frame:0000000000006634                 db  42h ; B
.eh_frame:0000000000006635                 db  0Eh
.eh_frame:0000000000006636                 db  20h
.eh_frame:0000000000006637                 db  42h ; B
.eh_frame:0000000000006638                 db  0Eh
.eh_frame:0000000000006639                 db  18h
.eh_frame:000000000000663A                 db  42h ; B
.eh_frame:000000000000663B                 db  0Eh
.eh_frame:000000000000663C                 db  10h
.eh_frame:000000000000663D                 db  42h ; B
.eh_frame:000000000000663E                 db  0Eh
.eh_frame:000000000000663F                 db    8
.eh_frame:0000000000006640                 db  56h ; V
.eh_frame:0000000000006641                 db  0Bh
.eh_frame:0000000000006642                 db  5Eh ; ^
.eh_frame:0000000000006643                 db  0Ah
.eh_frame:0000000000006644                 db  0Eh
.eh_frame:0000000000006645                 db  38h ; 8
.eh_frame:0000000000006646                 db  52h ; R
.eh_frame:0000000000006647                 db  0Eh
.eh_frame:0000000000006648                 db  30h ; 0
.eh_frame:0000000000006649                 db  41h ; A
.eh_frame:000000000000664A                 db  0Eh
.eh_frame:000000000000664B                 db  28h ; (
.eh_frame:000000000000664C                 db  42h ; B
.eh_frame:000000000000664D                 db  0Eh
.eh_frame:000000000000664E                 db  20h
.eh_frame:000000000000664F                 db  42h ; B
.eh_frame:0000000000006650                 db  0Eh
.eh_frame:0000000000006651                 db  18h
.eh_frame:0000000000006652                 db  42h ; B
.eh_frame:0000000000006653                 db  0Eh
.eh_frame:0000000000006654                 db  10h
.eh_frame:0000000000006655                 db  42h ; B
.eh_frame:0000000000006656                 db  0Eh
.eh_frame:0000000000006657                 db    8
.eh_frame:0000000000006658                 db  4Fh ; O
.eh_frame:0000000000006659                 db  0Bh
.eh_frame:000000000000665A                 db  62h ; b
.eh_frame:000000000000665B                 db  0Ah
.eh_frame:000000000000665C                 db  0Eh
.eh_frame:000000000000665D                 db  38h ; 8
.eh_frame:000000000000665E                 db  50h ; P
.eh_frame:000000000000665F                 db  0Eh
.eh_frame:0000000000006660                 db  30h ; 0
.eh_frame:0000000000006661                 db  41h ; A
.eh_frame:0000000000006662                 db  0Eh
.eh_frame:0000000000006663                 db  28h ; (
.eh_frame:0000000000006664                 db  42h ; B
.eh_frame:0000000000006665                 db  0Eh
.eh_frame:0000000000006666                 db  20h
.eh_frame:0000000000006667                 db  42h ; B
.eh_frame:0000000000006668                 db  0Eh
.eh_frame:0000000000006669                 db  18h
.eh_frame:000000000000666A                 db  42h ; B
.eh_frame:000000000000666B                 db  0Eh
.eh_frame:000000000000666C                 db  10h
.eh_frame:000000000000666D                 db  42h ; B
.eh_frame:000000000000666E                 db  0Eh
.eh_frame:000000000000666F                 db    8
.eh_frame:0000000000006670                 db  55h ; U
.eh_frame:0000000000006671                 db  0Bh
.eh_frame:0000000000006672                 db  66h ; f
.eh_frame:0000000000006673                 db  0Eh
.eh_frame:0000000000006674                 db  68h ; h
.eh_frame:0000000000006675                 db  42h ; B
.eh_frame:0000000000006676                 db  0Eh
.eh_frame:0000000000006677                 db  70h ; p
.eh_frame:0000000000006678                 db  5Ch ; \
.eh_frame:0000000000006679                 db  0Eh
.eh_frame:000000000000667A                 db  68h ; h
.eh_frame:000000000000667B                 db  41h ; A
.eh_frame:000000000000667C                 db  0Eh
.eh_frame:000000000000667D                 db  60h ; `
.eh_frame:000000000000667E                 db  44h ; D
.eh_frame:000000000000667F                 db  0Ah
.eh_frame:0000000000006680                 db  0Eh
.eh_frame:0000000000006681                 db  38h ; 8
.eh_frame:0000000000006682                 db  41h ; A
.eh_frame:0000000000006683                 db  0Eh
.eh_frame:0000000000006684                 db  30h ; 0
.eh_frame:0000000000006685                 db  41h ; A
.eh_frame:0000000000006686                 db  0Eh
.eh_frame:0000000000006687                 db  28h ; (
.eh_frame:0000000000006688                 db  42h ; B
.eh_frame:0000000000006689                 db  0Eh
.eh_frame:000000000000668A                 db  20h
.eh_frame:000000000000668B                 db  42h ; B
.eh_frame:000000000000668C                 db  0Eh
.eh_frame:000000000000668D                 db  18h
.eh_frame:000000000000668E                 db  42h ; B
.eh_frame:000000000000668F                 db  0Eh
.eh_frame:0000000000006690                 db  10h
.eh_frame:0000000000006691                 db  42h ; B
.eh_frame:0000000000006692                 db  0Eh
.eh_frame:0000000000006693                 db    8
.eh_frame:0000000000006694                 db  45h ; E
.eh_frame:0000000000006695                 db  0Bh
.eh_frame:0000000000006696                 db  68h ; h
.eh_frame:0000000000006697                 db  0Ah
.eh_frame:0000000000006698                 db  0Eh
.eh_frame:0000000000006699                 db  68h ; h
.eh_frame:000000000000669A                 db  48h ; H
.eh_frame:000000000000669B                 db  0Bh
.eh_frame:000000000000669C                 db  72h ; r
.eh_frame:000000000000669D                 db  0Eh
.eh_frame:000000000000669E                 db  68h ; h
.eh_frame:000000000000669F                 db  45h ; E
.eh_frame:00000000000066A0                 db  0Eh
.eh_frame:00000000000066A1                 db  70h ; p
.eh_frame:00000000000066A2                 db  42h ; B
.eh_frame:00000000000066A3                 db  0Eh
.eh_frame:00000000000066A4                 db  78h ; x
.eh_frame:00000000000066A5                 db  42h ; B
.eh_frame:00000000000066A6                 db  0Eh
.eh_frame:00000000000066A7                 db  80h
.eh_frame:00000000000066A8                 db    1
.eh_frame:00000000000066A9                 db  5Eh ; ^
.eh_frame:00000000000066AA                 db  0Eh
.eh_frame:00000000000066AB                 db  60h ; `
.eh_frame:00000000000066AC                 db  44h ; D
.eh_frame:00000000000066AD                 db  0Ah
.eh_frame:00000000000066AE                 db  0Eh
.eh_frame:00000000000066AF                 db  38h ; 8
.eh_frame:00000000000066B0                 db  41h ; A
.eh_frame:00000000000066B1                 db  0Eh
.eh_frame:00000000000066B2                 db  30h ; 0
.eh_frame:00000000000066B3                 db  41h ; A
.eh_frame:00000000000066B4                 db  0Eh
.eh_frame:00000000000066B5                 db  28h ; (
.eh_frame:00000000000066B6                 db  42h ; B
.eh_frame:00000000000066B7                 db  0Eh
.eh_frame:00000000000066B8                 db  20h
.eh_frame:00000000000066B9                 db  42h ; B
.eh_frame:00000000000066BA                 db  0Eh
.eh_frame:00000000000066BB                 db  18h
.eh_frame:00000000000066BC                 db  42h ; B
.eh_frame:00000000000066BD                 db  0Eh
.eh_frame:00000000000066BE                 db  10h
.eh_frame:00000000000066BF                 db  42h ; B
.eh_frame:00000000000066C0                 db  0Eh
.eh_frame:00000000000066C1                 db    8
.eh_frame:00000000000066C2                 db  41h ; A
.eh_frame:00000000000066C3                 db  0Bh
.eh_frame:00000000000066C4                 db  79h ; y
.eh_frame:00000000000066C5                 db  0Ah
.eh_frame:00000000000066C6                 db  0Eh
.eh_frame:00000000000066C7                 db  68h ; h
.eh_frame:00000000000066C8                 db  42h ; B
.eh_frame:00000000000066C9                 db  0Eh
.eh_frame:00000000000066CA                 db  70h ; p
.eh_frame:00000000000066CB                 db  42h ; B
.eh_frame:00000000000066CC                 db  0Eh
.eh_frame:00000000000066CD                 db  78h ; x
.eh_frame:00000000000066CE                 db  42h ; B
.eh_frame:00000000000066CF                 db  0Eh
.eh_frame:00000000000066D0                 db  80h
.eh_frame:00000000000066D1                 db    1
.eh_frame:00000000000066D2                 db  51h ; Q
.eh_frame:00000000000066D3                 db  0Bh
.eh_frame:00000000000066D4                 db  10h
.eh_frame:00000000000066D5                 db    0
.eh_frame:00000000000066D6                 db    0
.eh_frame:00000000000066D7                 db    0
.eh_frame:00000000000066D8                 db  60h ; `
.eh_frame:00000000000066D9                 db    7
.eh_frame:00000000000066DA                 db    0
.eh_frame:00000000000066DB                 db    0
.eh_frame:00000000000066DC                 db  44h ; D
.eh_frame:00000000000066DD                 db 0DBh
.eh_frame:00000000000066DE                 db 0FFh
.eh_frame:00000000000066DF                 db 0FFh
.eh_frame:00000000000066E0                 db  20h
.eh_frame:00000000000066E1                 db    0
.eh_frame:00000000000066E2                 db    0
.eh_frame:00000000000066E3                 db    0
.eh_frame:00000000000066E4                 db    0
.eh_frame:00000000000066E5                 db    0
.eh_frame:00000000000066E6                 db    0
.eh_frame:00000000000066E7                 db    0
.eh_frame:00000000000066E8                 db  18h
.eh_frame:00000000000066E9                 db    0
.eh_frame:00000000000066EA                 db    0
.eh_frame:00000000000066EB                 db    0
.eh_frame:00000000000066EC                 db  74h ; t
.eh_frame:00000000000066ED                 db    7
.eh_frame:00000000000066EE                 db    0
.eh_frame:00000000000066EF                 db    0
.eh_frame:00000000000066F0                 db  50h ; P
.eh_frame:00000000000066F1                 db 0DBh
.eh_frame:00000000000066F2                 db 0FFh
.eh_frame:00000000000066F3                 db 0FFh
.eh_frame:00000000000066F4                 db  78h ; x
.eh_frame:00000000000066F5                 db    0
.eh_frame:00000000000066F6                 db    0
.eh_frame:00000000000066F7                 db    0
.eh_frame:00000000000066F8                 db    0
.eh_frame:00000000000066F9                 db  44h ; D
.eh_frame:00000000000066FA                 db  0Eh
.eh_frame:00000000000066FB                 db  70h ; p
.eh_frame:00000000000066FC                 db    2
.eh_frame:00000000000066FD                 db  60h ; `
.eh_frame:00000000000066FE                 db  0Ah
.eh_frame:00000000000066FF                 db  0Eh
.eh_frame:0000000000006700                 db    8
.eh_frame:0000000000006701                 db  41h ; A
.eh_frame:0000000000006702                 db  0Bh
.eh_frame:0000000000006703                 db    0
.eh_frame:0000000000006704                 db  28h ; (
.eh_frame:0000000000006705                 db    0
.eh_frame:0000000000006706                 db    0
.eh_frame:0000000000006707                 db    0
.eh_frame:0000000000006708                 db  90h
.eh_frame:0000000000006709                 db    7
.eh_frame:000000000000670A                 db    0
.eh_frame:000000000000670B                 db    0
.eh_frame:000000000000670C                 db 0B4h
.eh_frame:000000000000670D                 db 0DBh
.eh_frame:000000000000670E                 db 0FFh
.eh_frame:000000000000670F                 db 0FFh
.eh_frame:0000000000006710                 db 0D5h
.eh_frame:0000000000006711                 db    0
.eh_frame:0000000000006712                 db    0
.eh_frame:0000000000006713                 db    0
.eh_frame:0000000000006714                 db    0
.eh_frame:0000000000006715                 db  41h ; A
.eh_frame:0000000000006716                 db  0Eh
.eh_frame:0000000000006717                 db  10h
.eh_frame:0000000000006718                 db  86h
.eh_frame:0000000000006719                 db    2
.eh_frame:000000000000671A                 db  41h ; A
.eh_frame:000000000000671B                 db  0Eh
.eh_frame:000000000000671C                 db  18h
.eh_frame:000000000000671D                 db  83h
.eh_frame:000000000000671E                 db    3
.eh_frame:000000000000671F                 db  50h ; P
.eh_frame:0000000000006720                 db  0Eh
.eh_frame:0000000000006721                 db 0D0h
.eh_frame:0000000000006722                 db    1
.eh_frame:0000000000006723                 db    2
.eh_frame:0000000000006724                 db 0ABh
.eh_frame:0000000000006725                 db  0Ah
.eh_frame:0000000000006726                 db  0Eh
.eh_frame:0000000000006727                 db  18h
.eh_frame:0000000000006728                 db  41h ; A
.eh_frame:0000000000006729                 db  0Eh
.eh_frame:000000000000672A                 db  10h
.eh_frame:000000000000672B                 db  41h ; A
.eh_frame:000000000000672C                 db  0Eh
.eh_frame:000000000000672D                 db    8
.eh_frame:000000000000672E                 db  41h ; A
.eh_frame:000000000000672F                 db  0Bh
.eh_frame:0000000000006730                 db  1Ch
.eh_frame:0000000000006731                 db    0
.eh_frame:0000000000006732                 db    0
.eh_frame:0000000000006733                 db    0
.eh_frame:0000000000006734                 db 0BCh
.eh_frame:0000000000006735                 db    7
.eh_frame:0000000000006736                 db    0
.eh_frame:0000000000006737                 db    0
.eh_frame:0000000000006738                 db  68h ; h
.eh_frame:0000000000006739                 db 0DCh
.eh_frame:000000000000673A                 db 0FFh
.eh_frame:000000000000673B                 db 0FFh
.eh_frame:000000000000673C                 db  80h
.eh_frame:000000000000673D                 db    0
.eh_frame:000000000000673E                 db    0
.eh_frame:000000000000673F                 db    0
.eh_frame:0000000000006740                 db    0
.eh_frame:0000000000006741                 db  41h ; A
.eh_frame:0000000000006742                 db  0Eh
.eh_frame:0000000000006743                 db  10h
.eh_frame:0000000000006744                 db  83h
.eh_frame:0000000000006745                 db    2
.eh_frame:0000000000006746                 db    2
.eh_frame:0000000000006747                 db  7Ah ; z
.eh_frame:0000000000006748                 db  0Eh
.eh_frame:0000000000006749                 db    8
.eh_frame:000000000000674A                 db    0
.eh_frame:000000000000674B                 db    0
.eh_frame:000000000000674C                 db    0
.eh_frame:000000000000674D                 db    0
.eh_frame:000000000000674E                 db    0
.eh_frame:000000000000674F                 db    0
.eh_frame:0000000000006750                 db  18h
.eh_frame:0000000000006751                 db    0
.eh_frame:0000000000006752                 db    0
.eh_frame:0000000000006753                 db    0
.eh_frame:0000000000006754                 db 0DCh
.eh_frame:0000000000006755                 db    7
.eh_frame:0000000000006756                 db    0
.eh_frame:0000000000006757                 db    0
.eh_frame:0000000000006758                 db 0C8h
.eh_frame:0000000000006759                 db 0DCh
.eh_frame:000000000000675A                 db 0FFh
.eh_frame:000000000000675B                 db 0FFh
.eh_frame:000000000000675C                 db  1Ah
.eh_frame:000000000000675D                 db    0
.eh_frame:000000000000675E                 db    0
.eh_frame:000000000000675F                 db    0
.eh_frame:0000000000006760                 db    0
.eh_frame:0000000000006761                 db  41h ; A
.eh_frame:0000000000006762                 db  0Eh
.eh_frame:0000000000006763                 db  10h
.eh_frame:0000000000006764                 db  83h
.eh_frame:0000000000006765                 db    2
.eh_frame:0000000000006766                 db  53h ; S
.eh_frame:0000000000006767                 db  0Ah
.eh_frame:0000000000006768                 db  0Eh
.eh_frame:0000000000006769                 db    8
.eh_frame:000000000000676A                 db  41h ; A
.eh_frame:000000000000676B                 db  0Bh
.eh_frame:000000000000676C                 db  10h
.eh_frame:000000000000676D                 db    0
.eh_frame:000000000000676E                 db    0
.eh_frame:000000000000676F                 db    0
.eh_frame:0000000000006770                 db 0F8h
.eh_frame:0000000000006771                 db    7
.eh_frame:0000000000006772                 db    0
.eh_frame:0000000000006773                 db    0
.eh_frame:0000000000006774                 db 0CCh
.eh_frame:0000000000006775                 db 0DCh
.eh_frame:0000000000006776                 db 0FFh
.eh_frame:0000000000006777                 db 0FFh
.eh_frame:0000000000006778                 db  24h ; $
.eh_frame:0000000000006779                 db    0
.eh_frame:000000000000677A                 db    0
.eh_frame:000000000000677B                 db    0
.eh_frame:000000000000677C                 db    0
.eh_frame:000000000000677D                 db  5Fh ; _
.eh_frame:000000000000677E                 db  0Eh
.eh_frame:000000000000677F                 db  10h
.eh_frame:0000000000006780                 db  10h
.eh_frame:0000000000006781                 db    0
.eh_frame:0000000000006782                 db    0
.eh_frame:0000000000006783                 db    0
.eh_frame:0000000000006784                 db  0Ch
.eh_frame:0000000000006785                 db    8
.eh_frame:0000000000006786                 db    0
.eh_frame:0000000000006787                 db    0
.eh_frame:0000000000006788                 db 0E8h
.eh_frame:0000000000006789                 db 0DCh
.eh_frame:000000000000678A                 db 0FFh
.eh_frame:000000000000678B                 db 0FFh
.eh_frame:000000000000678C                 db    2
.eh_frame:000000000000678D                 db    0
.eh_frame:000000000000678E                 db    0
.eh_frame:000000000000678F                 db    0
.eh_frame:0000000000006790                 db    0
.eh_frame:0000000000006791                 db    0
.eh_frame:0000000000006792                 db    0
.eh_frame:0000000000006793                 db    0
.eh_frame:0000000000006794                 db  20h
.eh_frame:0000000000006795                 db    0
.eh_frame:0000000000006796                 db    0
.eh_frame:0000000000006797                 db    0
.eh_frame:0000000000006798                 db  20h
.eh_frame:0000000000006799                 db    8
.eh_frame:000000000000679A                 db    0
.eh_frame:000000000000679B                 db    0
.eh_frame:000000000000679C                 db 0E4h
.eh_frame:000000000000679D                 db 0DCh
.eh_frame:000000000000679E                 db 0FFh
.eh_frame:000000000000679F                 db 0FFh
.eh_frame:00000000000067A0                 db  36h ; 6
.eh_frame:00000000000067A1                 db    0
.eh_frame:00000000000067A2                 db    0
.eh_frame:00000000000067A3                 db    0
.eh_frame:00000000000067A4                 db    0
.eh_frame:00000000000067A5                 db  44h ; D
.eh_frame:00000000000067A6                 db  0Eh
.eh_frame:00000000000067A7                 db  10h
.eh_frame:00000000000067A8                 db  83h
.eh_frame:00000000000067A9                 db    2
.eh_frame:00000000000067AA                 db  5Dh ; ]
.eh_frame:00000000000067AB                 db  0Ah
.eh_frame:00000000000067AC                 db  0Eh
.eh_frame:00000000000067AD                 db    8
.eh_frame:00000000000067AE                 db  47h ; G
.eh_frame:00000000000067AF                 db  0Bh
.eh_frame:00000000000067B0                 db  48h ; H
.eh_frame:00000000000067B1                 db  0Ah
.eh_frame:00000000000067B2                 db  0Eh
.eh_frame:00000000000067B3                 db    8
.eh_frame:00000000000067B4                 db  41h ; A
.eh_frame:00000000000067B5                 db  0Bh
.eh_frame:00000000000067B6                 db    0
.eh_frame:00000000000067B7                 db    0
.eh_frame:00000000000067B8                 db  10h
.eh_frame:00000000000067B9                 db    0
.eh_frame:00000000000067BA                 db    0
.eh_frame:00000000000067BB                 db    0
.eh_frame:00000000000067BC                 db  44h ; D
.eh_frame:00000000000067BD                 db    8
.eh_frame:00000000000067BE                 db    0
.eh_frame:00000000000067BF                 db    0
.eh_frame:00000000000067C0                 db    0
.eh_frame:00000000000067C1                 db 0DDh
.eh_frame:00000000000067C2                 db 0FFh
.eh_frame:00000000000067C3                 db 0FFh
.eh_frame:00000000000067C4                 db  24h ; $
.eh_frame:00000000000067C5                 db    0
.eh_frame:00000000000067C6                 db    0
.eh_frame:00000000000067C7                 db    0
.eh_frame:00000000000067C8                 db    0
.eh_frame:00000000000067C9                 db  5Fh ; _
.eh_frame:00000000000067CA                 db  0Eh
.eh_frame:00000000000067CB                 db  10h
.eh_frame:00000000000067CC                 db  14h
.eh_frame:00000000000067CD                 db    0
.eh_frame:00000000000067CE                 db    0
.eh_frame:00000000000067CF                 db    0
.eh_frame:00000000000067D0                 db  58h ; X
.eh_frame:00000000000067D1                 db    8
.eh_frame:00000000000067D2                 db    0
.eh_frame:00000000000067D3                 db    0
.eh_frame:00000000000067D4                 db  1Ch
.eh_frame:00000000000067D5                 db 0DDh
.eh_frame:00000000000067D6                 db 0FFh
.eh_frame:00000000000067D7                 db 0FFh
.eh_frame:00000000000067D8                 db  82h
.eh_frame:00000000000067D9                 db    0
.eh_frame:00000000000067DA                 db    0
.eh_frame:00000000000067DB                 db    0
.eh_frame:00000000000067DC                 db    0
.eh_frame:00000000000067DD                 db    2
.eh_frame:00000000000067DE                 db  5Fh ; _
.eh_frame:00000000000067DF                 db  0Eh
.eh_frame:00000000000067E0                 db  10h
.eh_frame:00000000000067E1                 db  49h ; I
.eh_frame:00000000000067E2                 db  0Eh
.eh_frame:00000000000067E3                 db    8
.eh_frame:00000000000067E4                 db  14h
.eh_frame:00000000000067E5                 db    0
.eh_frame:00000000000067E6                 db    0
.eh_frame:00000000000067E7                 db    0
.eh_frame:00000000000067E8                 db  70h ; p
.eh_frame:00000000000067E9                 db    8
.eh_frame:00000000000067EA                 db    0
.eh_frame:00000000000067EB                 db    0
.eh_frame:00000000000067EC                 db  94h
.eh_frame:00000000000067ED                 db 0DDh
.eh_frame:00000000000067EE                 db 0FFh
.eh_frame:00000000000067EF                 db 0FFh
.eh_frame:00000000000067F0                 db  4Ah ; J
.eh_frame:00000000000067F1                 db    0
.eh_frame:00000000000067F2                 db    0
.eh_frame:00000000000067F3                 db    0
.eh_frame:00000000000067F4                 db    0
.eh_frame:00000000000067F5                 db    2
.eh_frame:00000000000067F6                 db  45h ; E
.eh_frame:00000000000067F7                 db  0Eh
.eh_frame:00000000000067F8                 db  10h
.eh_frame:00000000000067F9                 db    0
.eh_frame:00000000000067FA                 db    0
.eh_frame:00000000000067FB                 db    0
.eh_frame:00000000000067FC                 db  18h
.eh_frame:00000000000067FD                 db    0
.eh_frame:00000000000067FE                 db    0
.eh_frame:00000000000067FF                 db    0
.eh_frame:0000000000006800                 db  88h
.eh_frame:0000000000006801                 db    8
.eh_frame:0000000000006802                 db    0
.eh_frame:0000000000006803                 db    0
.eh_frame:0000000000006804                 db 0CCh
.eh_frame:0000000000006805                 db 0DDh
.eh_frame:0000000000006806                 db 0FFh
.eh_frame:0000000000006807                 db 0FFh
.eh_frame:0000000000006808                 db  17h
.eh_frame:0000000000006809                 db    0
.eh_frame:000000000000680A                 db    0
.eh_frame:000000000000680B                 db    0
.eh_frame:000000000000680C                 db    0
.eh_frame:000000000000680D                 db  41h ; A
.eh_frame:000000000000680E                 db  0Eh
.eh_frame:000000000000680F                 db  10h
.eh_frame:0000000000006810                 db  83h
.eh_frame:0000000000006811                 db    2
.eh_frame:0000000000006812                 db  51h ; Q
.eh_frame:0000000000006813                 db  0Eh
.eh_frame:0000000000006814                 db    8
.eh_frame:0000000000006815                 db    0
.eh_frame:0000000000006816                 db    0
.eh_frame:0000000000006817                 db    0
.eh_frame:0000000000006818                 db  18h
.eh_frame:0000000000006819                 db    0
.eh_frame:000000000000681A                 db    0
.eh_frame:000000000000681B                 db    0
.eh_frame:000000000000681C                 db 0A4h
.eh_frame:000000000000681D                 db    8
.eh_frame:000000000000681E                 db    0
.eh_frame:000000000000681F                 db    0
.eh_frame:0000000000006820                 db 0D0h
.eh_frame:0000000000006821                 db 0DDh
.eh_frame:0000000000006822                 db 0FFh
.eh_frame:0000000000006823                 db 0FFh
.eh_frame:0000000000006824                 db  2Eh ; .
.eh_frame:0000000000006825                 db    0
.eh_frame:0000000000006826                 db    0
.eh_frame:0000000000006827                 db    0
.eh_frame:0000000000006828                 db    0
.eh_frame:0000000000006829                 db  47h ; G
.eh_frame:000000000000682A                 db  0Eh
.eh_frame:000000000000682B                 db  10h
.eh_frame:000000000000682C                 db  61h ; a
.eh_frame:000000000000682D                 db  0Ah
.eh_frame:000000000000682E                 db  0Eh
.eh_frame:000000000000682F                 db    8
.eh_frame:0000000000006830                 db  41h ; A
.eh_frame:0000000000006831                 db  0Bh
.eh_frame:0000000000006832                 db    0
.eh_frame:0000000000006833                 db    0
.eh_frame:0000000000006834                 db  24h ; $
.eh_frame:0000000000006835                 db    0
.eh_frame:0000000000006836                 db    0
.eh_frame:0000000000006837                 db    0
.eh_frame:0000000000006838                 db 0C0h
.eh_frame:0000000000006839                 db    8
.eh_frame:000000000000683A                 db    0
.eh_frame:000000000000683B                 db    0
.eh_frame:000000000000683C                 db 0E4h
.eh_frame:000000000000683D                 db 0DDh
.eh_frame:000000000000683E                 db 0FFh
.eh_frame:000000000000683F                 db 0FFh
.eh_frame:0000000000006840                 db  28h ; (
.eh_frame:0000000000006841                 db    0
.eh_frame:0000000000006842                 db    0
.eh_frame:0000000000006843                 db    0
.eh_frame:0000000000006844                 db    0
.eh_frame:0000000000006845                 db  41h ; A
.eh_frame:0000000000006846                 db  0Eh
.eh_frame:0000000000006847                 db  10h
.eh_frame:0000000000006848                 db  86h
.eh_frame:0000000000006849                 db    2
.eh_frame:000000000000684A                 db  41h ; A
.eh_frame:000000000000684B                 db  0Eh
.eh_frame:000000000000684C                 db  18h
.eh_frame:000000000000684D                 db  83h
.eh_frame:000000000000684E                 db    3
.eh_frame:000000000000684F                 db  4Dh ; M
.eh_frame:0000000000006850                 db  0Eh
.eh_frame:0000000000006851                 db  20h
.eh_frame:0000000000006852                 db  49h ; I
.eh_frame:0000000000006853                 db  0Eh
.eh_frame:0000000000006854                 db  18h
.eh_frame:0000000000006855                 db  47h ; G
.eh_frame:0000000000006856                 db  0Eh
.eh_frame:0000000000006857                 db  10h
.eh_frame:0000000000006858                 db  41h ; A
.eh_frame:0000000000006859                 db  0Eh
.eh_frame:000000000000685A                 db    8
.eh_frame:000000000000685B                 db    0
.eh_frame:000000000000685C                 db  18h
.eh_frame:000000000000685D                 db    0
.eh_frame:000000000000685E                 db    0
.eh_frame:000000000000685F                 db    0
.eh_frame:0000000000006860                 db 0E8h
.eh_frame:0000000000006861                 db    8
.eh_frame:0000000000006862                 db    0
.eh_frame:0000000000006863                 db    0
.eh_frame:0000000000006864                 db 0ECh
.eh_frame:0000000000006865                 db 0DDh
.eh_frame:0000000000006866                 db 0FFh
.eh_frame:0000000000006867                 db 0FFh
.eh_frame:0000000000006868                 db  13h
.eh_frame:0000000000006869                 db    0
.eh_frame:000000000000686A                 db    0
.eh_frame:000000000000686B                 db    0
.eh_frame:000000000000686C                 db    0
.eh_frame:000000000000686D                 db  41h ; A
.eh_frame:000000000000686E                 db  0Eh
.eh_frame:000000000000686F                 db  10h
.eh_frame:0000000000006870                 db  83h
.eh_frame:0000000000006871                 db    2
.eh_frame:0000000000006872                 db  50h ; P
.eh_frame:0000000000006873                 db  0Eh
.eh_frame:0000000000006874                 db    8
.eh_frame:0000000000006875                 db    0
.eh_frame:0000000000006876                 db    0
.eh_frame:0000000000006877                 db    0
.eh_frame:0000000000006878                 db  14h
.eh_frame:0000000000006879                 db    0
.eh_frame:000000000000687A                 db    0
.eh_frame:000000000000687B                 db    0
.eh_frame:000000000000687C                 db    4
.eh_frame:000000000000687D                 db    9
.eh_frame:000000000000687E                 db    0
.eh_frame:000000000000687F                 db    0
.eh_frame:0000000000006880                 db 0F0h
.eh_frame:0000000000006881                 db 0DDh
.eh_frame:0000000000006882                 db 0FFh
.eh_frame:0000000000006883                 db 0FFh
.eh_frame:0000000000006884                 db  35h ; 5
.eh_frame:0000000000006885                 db    0
.eh_frame:0000000000006886                 db    0
.eh_frame:0000000000006887                 db    0
.eh_frame:0000000000006888                 db    0
.eh_frame:0000000000006889                 db  4Bh ; K
.eh_frame:000000000000688A                 db  0Eh
.eh_frame:000000000000688B                 db  10h
.eh_frame:000000000000688C                 db    0
.eh_frame:000000000000688D                 db    0
.eh_frame:000000000000688E                 db    0
.eh_frame:000000000000688F                 db    0
.eh_frame:0000000000006890                 db  48h ; H
.eh_frame:0000000000006891                 db    0
.eh_frame:0000000000006892                 db    0
.eh_frame:0000000000006893                 db    0
.eh_frame:0000000000006894                 db  1Ch
.eh_frame:0000000000006895                 db    9
.eh_frame:0000000000006896                 db    0
.eh_frame:0000000000006897                 db    0
.eh_frame:0000000000006898                 db  18h
.eh_frame:0000000000006899                 db 0DEh
.eh_frame:000000000000689A                 db 0FFh
.eh_frame:000000000000689B                 db 0FFh
.eh_frame:000000000000689C                 db    0
.eh_frame:000000000000689D                 db    1
.eh_frame:000000000000689E                 db    0
.eh_frame:000000000000689F                 db    0
.eh_frame:00000000000068A0                 db    0
.eh_frame:00000000000068A1                 db  42h ; B
.eh_frame:00000000000068A2                 db  0Eh
.eh_frame:00000000000068A3                 db  10h
.eh_frame:00000000000068A4                 db  8Fh
.eh_frame:00000000000068A5                 db    2
.eh_frame:00000000000068A6                 db  42h ; B
.eh_frame:00000000000068A7                 db  0Eh
.eh_frame:00000000000068A8                 db  18h
.eh_frame:00000000000068A9                 db  8Eh
.eh_frame:00000000000068AA                 db    3
.eh_frame:00000000000068AB                 db  45h ; E
.eh_frame:00000000000068AC                 db  0Eh
.eh_frame:00000000000068AD                 db  20h
.eh_frame:00000000000068AE                 db  8Dh
.eh_frame:00000000000068AF                 db    4
.eh_frame:00000000000068B0                 db  42h ; B
.eh_frame:00000000000068B1                 db  0Eh
.eh_frame:00000000000068B2                 db  28h ; (
.eh_frame:00000000000068B3                 db  8Ch
.eh_frame:00000000000068B4                 db    5
.eh_frame:00000000000068B5                 db  44h ; D
.eh_frame:00000000000068B6                 db  0Eh
.eh_frame:00000000000068B7                 db  30h ; 0
.eh_frame:00000000000068B8                 db  86h
.eh_frame:00000000000068B9                 db    6
.eh_frame:00000000000068BA                 db  41h ; A
.eh_frame:00000000000068BB                 db  0Eh
.eh_frame:00000000000068BC                 db  38h ; 8
.eh_frame:00000000000068BD                 db  83h
.eh_frame:00000000000068BE                 db    7
.eh_frame:00000000000068BF                 db  4Eh ; N
.eh_frame:00000000000068C0                 db  0Eh
.eh_frame:00000000000068C1                 db  50h ; P
.eh_frame:00000000000068C2                 db    2
.eh_frame:00000000000068C3                 db  9Dh
.eh_frame:00000000000068C4                 db  0Ah
.eh_frame:00000000000068C5                 db  0Eh
.eh_frame:00000000000068C6                 db  38h ; 8
.eh_frame:00000000000068C7                 db  41h ; A
.eh_frame:00000000000068C8                 db  0Eh
.eh_frame:00000000000068C9                 db  30h ; 0
.eh_frame:00000000000068CA                 db  41h ; A
.eh_frame:00000000000068CB                 db  0Eh
.eh_frame:00000000000068CC                 db  28h ; (
.eh_frame:00000000000068CD                 db  42h ; B
.eh_frame:00000000000068CE                 db  0Eh
.eh_frame:00000000000068CF                 db  20h
.eh_frame:00000000000068D0                 db  42h ; B
.eh_frame:00000000000068D1                 db  0Eh
.eh_frame:00000000000068D2                 db  18h
.eh_frame:00000000000068D3                 db  42h ; B
.eh_frame:00000000000068D4                 db  0Eh
.eh_frame:00000000000068D5                 db  10h
.eh_frame:00000000000068D6                 db  42h ; B
.eh_frame:00000000000068D7                 db  0Eh
.eh_frame:00000000000068D8                 db    8
.eh_frame:00000000000068D9                 db  4Bh ; K
.eh_frame:00000000000068DA                 db  0Bh
.eh_frame:00000000000068DB                 db    0
.eh_frame:00000000000068DC                 db  18h
.eh_frame:00000000000068DD                 db    0
.eh_frame:00000000000068DE                 db    0
.eh_frame:00000000000068DF                 db    0
.eh_frame:00000000000068E0                 db  68h ; h
.eh_frame:00000000000068E1                 db    9
.eh_frame:00000000000068E2                 db    0
.eh_frame:00000000000068E3                 db    0
.eh_frame:00000000000068E4                 db 0CCh
.eh_frame:00000000000068E5                 db 0DEh
.eh_frame:00000000000068E6                 db 0FFh
.eh_frame:00000000000068E7                 db 0FFh
.eh_frame:00000000000068E8                 db  21h ; !
.eh_frame:00000000000068E9                 db    0
.eh_frame:00000000000068EA                 db    0
.eh_frame:00000000000068EB                 db    0
.eh_frame:00000000000068EC                 db    0
.eh_frame:00000000000068ED                 db  44h ; D
.eh_frame:00000000000068EE                 db  0Eh
.eh_frame:00000000000068EF                 db  18h
.eh_frame:00000000000068F0                 db  42h ; B
.eh_frame:00000000000068F1                 db  0Eh
.eh_frame:00000000000068F2                 db  20h
.eh_frame:00000000000068F3                 db  5Ah ; Z
.eh_frame:00000000000068F4                 db  0Eh
.eh_frame:00000000000068F5                 db    8
.eh_frame:00000000000068F6                 db    0
.eh_frame:00000000000068F7                 db    0
.eh_frame:00000000000068F8                 db  4Ch ; L
.eh_frame:00000000000068F9                 db    0
.eh_frame:00000000000068FA                 db    0
.eh_frame:00000000000068FB                 db    0
.eh_frame:00000000000068FC                 db  84h
.eh_frame:00000000000068FD                 db    9
.eh_frame:00000000000068FE                 db    0
.eh_frame:00000000000068FF                 db    0
.eh_frame:0000000000006900                 db 0E0h
.eh_frame:0000000000006901                 db 0DEh
.eh_frame:0000000000006902                 db 0FFh
.eh_frame:0000000000006903                 db 0FFh
.eh_frame:0000000000006904                 db  1Ch
.eh_frame:0000000000006905                 db    4
.eh_frame:0000000000006906                 db    0
.eh_frame:0000000000006907                 db    0
.eh_frame:0000000000006908                 db    0
.eh_frame:0000000000006909                 db  42h ; B
.eh_frame:000000000000690A                 db  0Eh
.eh_frame:000000000000690B                 db  10h
.eh_frame:000000000000690C                 db  8Fh
.eh_frame:000000000000690D                 db    2
.eh_frame:000000000000690E                 db  42h ; B
.eh_frame:000000000000690F                 db  0Eh
.eh_frame:0000000000006910                 db  18h
.eh_frame:0000000000006911                 db  8Eh
.eh_frame:0000000000006912                 db    3
.eh_frame:0000000000006913                 db  42h ; B
.eh_frame:0000000000006914                 db  0Eh
.eh_frame:0000000000006915                 db  20h
.eh_frame:0000000000006916                 db  8Dh
.eh_frame:0000000000006917                 db    4
.eh_frame:0000000000006918                 db  42h ; B
.eh_frame:0000000000006919                 db  0Eh
.eh_frame:000000000000691A                 db  28h ; (
.eh_frame:000000000000691B                 db  8Ch
.eh_frame:000000000000691C                 db    5
.eh_frame:000000000000691D                 db  41h ; A
.eh_frame:000000000000691E                 db  0Eh
.eh_frame:000000000000691F                 db  30h ; 0
.eh_frame:0000000000006920                 db  86h
.eh_frame:0000000000006921                 db    6
.eh_frame:0000000000006922                 db  41h ; A
.eh_frame:0000000000006923                 db  0Eh
.eh_frame:0000000000006924                 db  38h ; 8
.eh_frame:0000000000006925                 db  83h
.eh_frame:0000000000006926                 db    7
.eh_frame:0000000000006927                 db  44h ; D
.eh_frame:0000000000006928                 db  0Eh
.eh_frame:0000000000006929                 db  60h ; `
.eh_frame:000000000000692A                 db    2
.eh_frame:000000000000692B                 db 0E9h
.eh_frame:000000000000692C                 db  0Ah
.eh_frame:000000000000692D                 db  0Eh
.eh_frame:000000000000692E                 db  38h ; 8
.eh_frame:000000000000692F                 db  41h ; A
.eh_frame:0000000000006930                 db  0Eh
.eh_frame:0000000000006931                 db  30h ; 0
.eh_frame:0000000000006932                 db  41h ; A
.eh_frame:0000000000006933                 db  0Eh
.eh_frame:0000000000006934                 db  28h ; (
.eh_frame:0000000000006935                 db  42h ; B
.eh_frame:0000000000006936                 db  0Eh
.eh_frame:0000000000006937                 db  20h
.eh_frame:0000000000006938                 db  42h ; B
.eh_frame:0000000000006939                 db  0Eh
.eh_frame:000000000000693A                 db  18h
.eh_frame:000000000000693B                 db  42h ; B
.eh_frame:000000000000693C                 db  0Eh
.eh_frame:000000000000693D                 db  10h
.eh_frame:000000000000693E                 db  42h ; B
.eh_frame:000000000000693F                 db  0Eh
.eh_frame:0000000000006940                 db    8
.eh_frame:0000000000006941                 db  47h ; G
.eh_frame:0000000000006942                 db  0Bh
.eh_frame:0000000000006943                 db    0
.eh_frame:0000000000006944                 db    0
.eh_frame:0000000000006945                 db    0
.eh_frame:0000000000006946                 db    0
.eh_frame:0000000000006947                 db    0
.eh_frame:0000000000006948                 db  3Ch ; <
.eh_frame:0000000000006949                 db    0
.eh_frame:000000000000694A                 db    0
.eh_frame:000000000000694B                 db    0
.eh_frame:000000000000694C                 db 0D4h
.eh_frame:000000000000694D                 db    9
.eh_frame:000000000000694E                 db    0
.eh_frame:000000000000694F                 db    0
.eh_frame:0000000000006950                 db 0B0h
.eh_frame:0000000000006951                 db 0E2h
.eh_frame:0000000000006952                 db 0FFh
.eh_frame:0000000000006953                 db 0FFh
.eh_frame:0000000000006954                 db  83h
.eh_frame:0000000000006955                 db    0
.eh_frame:0000000000006956                 db    0
.eh_frame:0000000000006957                 db    0
.eh_frame:0000000000006958                 db    0
.eh_frame:0000000000006959                 db  42h ; B
.eh_frame:000000000000695A                 db  0Eh
.eh_frame:000000000000695B                 db  10h
.eh_frame:000000000000695C                 db  8Dh
.eh_frame:000000000000695D                 db    2
.eh_frame:000000000000695E                 db  42h ; B
.eh_frame:000000000000695F                 db  0Eh
.eh_frame:0000000000006960                 db  18h
.eh_frame:0000000000006961                 db  8Ch
.eh_frame:0000000000006962                 db    3
.eh_frame:0000000000006963                 db  44h ; D
.eh_frame:0000000000006964                 db  0Eh
.eh_frame:0000000000006965                 db  20h
.eh_frame:0000000000006966                 db  86h
.eh_frame:0000000000006967                 db    4
.eh_frame:0000000000006968                 db  41h ; A
.eh_frame:0000000000006969                 db  0Eh
.eh_frame:000000000000696A                 db  28h ; (
.eh_frame:000000000000696B                 db  83h
.eh_frame:000000000000696C                 db    5
.eh_frame:000000000000696D                 db  4Ah ; J
.eh_frame:000000000000696E                 db  0Eh
.eh_frame:000000000000696F                 db  40h ; @
.eh_frame:0000000000006970                 db    2
.eh_frame:0000000000006971                 db  64h ; d
.eh_frame:0000000000006972                 db  0Ah
.eh_frame:0000000000006973                 db  0Eh
.eh_frame:0000000000006974                 db  28h ; (
.eh_frame:0000000000006975                 db  41h ; A
.eh_frame:0000000000006976                 db  0Eh
.eh_frame:0000000000006977                 db  20h
.eh_frame:0000000000006978                 db  41h ; A
.eh_frame:0000000000006979                 db  0Eh
.eh_frame:000000000000697A                 db  18h
.eh_frame:000000000000697B                 db  42h ; B
.eh_frame:000000000000697C                 db  0Eh
.eh_frame:000000000000697D                 db  10h
.eh_frame:000000000000697E                 db  42h ; B
.eh_frame:000000000000697F                 db  0Eh
.eh_frame:0000000000006980                 db    8
.eh_frame:0000000000006981                 db  41h ; A
.eh_frame:0000000000006982                 db  0Bh
.eh_frame:0000000000006983                 db    0
.eh_frame:0000000000006984                 db    0
.eh_frame:0000000000006985                 db    0
.eh_frame:0000000000006986                 db    0
.eh_frame:0000000000006987                 db    0
.eh_frame:0000000000006988                 db  4Ch ; L
.eh_frame:0000000000006989                 db    0
.eh_frame:000000000000698A                 db    0
.eh_frame:000000000000698B                 db    0
.eh_frame:000000000000698C                 db  14h
.eh_frame:000000000000698D                 db  0Ah
.eh_frame:000000000000698E                 db    0
.eh_frame:000000000000698F                 db    0
.eh_frame:0000000000006990                 db    0
.eh_frame:0000000000006991                 db 0E3h
.eh_frame:0000000000006992                 db 0FFh
.eh_frame:0000000000006993                 db 0FFh
.eh_frame:0000000000006994                 db  7Dh ; }
.eh_frame:0000000000006995                 db    0
.eh_frame:0000000000006996                 db    0
.eh_frame:0000000000006997                 db    0
.eh_frame:0000000000006998                 db    0
.eh_frame:0000000000006999                 db  42h ; B
.eh_frame:000000000000699A                 db  0Eh
.eh_frame:000000000000699B                 db  10h
.eh_frame:000000000000699C                 db  8Ch
.eh_frame:000000000000699D                 db    2
.eh_frame:000000000000699E                 db  41h ; A
.eh_frame:000000000000699F                 db  0Eh
.eh_frame:00000000000069A0                 db  18h
.eh_frame:00000000000069A1                 db  86h
.eh_frame:00000000000069A2                 db    3
.eh_frame:00000000000069A3                 db  44h ; D
.eh_frame:00000000000069A4                 db  0Eh
.eh_frame:00000000000069A5                 db  20h
.eh_frame:00000000000069A6                 db  83h
.eh_frame:00000000000069A7                 db    4
.eh_frame:00000000000069A8                 db  69h ; i
.eh_frame:00000000000069A9                 db  0Ah
.eh_frame:00000000000069AA                 db  0Eh
.eh_frame:00000000000069AB                 db  18h
.eh_frame:00000000000069AC                 db  41h ; A
.eh_frame:00000000000069AD                 db  0Eh
.eh_frame:00000000000069AE                 db  10h
.eh_frame:00000000000069AF                 db  42h ; B
.eh_frame:00000000000069B0                 db  0Eh
.eh_frame:00000000000069B1                 db    8
.eh_frame:00000000000069B2                 db  45h ; E
.eh_frame:00000000000069B3                 db  0Bh
.eh_frame:00000000000069B4                 db  55h ; U
.eh_frame:00000000000069B5                 db  0Ah
.eh_frame:00000000000069B6                 db  0Eh
.eh_frame:00000000000069B7                 db  18h
.eh_frame:00000000000069B8                 db  41h ; A
.eh_frame:00000000000069B9                 db  0Eh
.eh_frame:00000000000069BA                 db  10h
.eh_frame:00000000000069BB                 db  42h ; B
.eh_frame:00000000000069BC                 db  0Eh
.eh_frame:00000000000069BD                 db    8
.eh_frame:00000000000069BE                 db  48h ; H
.eh_frame:00000000000069BF                 db  0Bh
.eh_frame:00000000000069C0                 db  41h ; A
.eh_frame:00000000000069C1                 db  0Ah
.eh_frame:00000000000069C2                 db  0Eh
.eh_frame:00000000000069C3                 db  18h
.eh_frame:00000000000069C4                 db  46h ; F
.eh_frame:00000000000069C5                 db  0Eh
.eh_frame:00000000000069C6                 db  10h
.eh_frame:00000000000069C7                 db  42h ; B
.eh_frame:00000000000069C8                 db  0Eh
.eh_frame:00000000000069C9                 db    8
.eh_frame:00000000000069CA                 db  47h ; G
.eh_frame:00000000000069CB                 db  0Bh
.eh_frame:00000000000069CC                 db  49h ; I
.eh_frame:00000000000069CD                 db  0Eh
.eh_frame:00000000000069CE                 db  18h
.eh_frame:00000000000069CF                 db  41h ; A
.eh_frame:00000000000069D0                 db  0Eh
.eh_frame:00000000000069D1                 db  10h
.eh_frame:00000000000069D2                 db  42h ; B
.eh_frame:00000000000069D3                 db  0Eh
.eh_frame:00000000000069D4                 db    8
.eh_frame:00000000000069D5                 db    0
.eh_frame:00000000000069D6                 db    0
.eh_frame:00000000000069D7                 db    0
.eh_frame:00000000000069D8                 db  1Ch
.eh_frame:00000000000069D9                 db    0
.eh_frame:00000000000069DA                 db    0
.eh_frame:00000000000069DB                 db    0
.eh_frame:00000000000069DC                 db  64h ; d
.eh_frame:00000000000069DD                 db  0Ah
.eh_frame:00000000000069DE                 db    0
.eh_frame:00000000000069DF                 db    0
.eh_frame:00000000000069E0                 db  30h ; 0
.eh_frame:00000000000069E1                 db 0E3h
.eh_frame:00000000000069E2                 db 0FFh
.eh_frame:00000000000069E3                 db 0FFh
.eh_frame:00000000000069E4                 db  60h ; `
.eh_frame:00000000000069E5                 db    0
.eh_frame:00000000000069E6                 db    0
.eh_frame:00000000000069E7                 db    0
.eh_frame:00000000000069E8                 db    0
.eh_frame:00000000000069E9                 db  44h ; D
.eh_frame:00000000000069EA                 db  0Eh
.eh_frame:00000000000069EB                 db  10h
.eh_frame:00000000000069EC                 db  75h ; u
.eh_frame:00000000000069ED                 db  0Ah
.eh_frame:00000000000069EE                 db  0Eh
.eh_frame:00000000000069EF                 db    8
.eh_frame:00000000000069F0                 db  47h ; G
.eh_frame:00000000000069F1                 db  0Bh
.eh_frame:00000000000069F2                 db  5Fh ; _
.eh_frame:00000000000069F3                 db  0Eh
.eh_frame:00000000000069F4                 db    8
.eh_frame:00000000000069F5                 db    0
.eh_frame:00000000000069F6                 db    0
.eh_frame:00000000000069F7                 db    0
.eh_frame:00000000000069F8                 db  1Ch
.eh_frame:00000000000069F9                 db    0
.eh_frame:00000000000069FA                 db    0
.eh_frame:00000000000069FB                 db    0
.eh_frame:00000000000069FC                 db  84h
.eh_frame:00000000000069FD                 db  0Ah
.eh_frame:00000000000069FE                 db    0
.eh_frame:00000000000069FF                 db    0
.eh_frame:0000000000006A00                 db  70h ; p
.eh_frame:0000000000006A01                 db 0E3h
.eh_frame:0000000000006A02                 db 0FFh
.eh_frame:0000000000006A03                 db 0FFh
.eh_frame:0000000000006A04                 db  3Ch ; <
.eh_frame:0000000000006A05                 db    0
.eh_frame:0000000000006A06                 db    0
.eh_frame:0000000000006A07                 db    0
.eh_frame:0000000000006A08                 db    0
.eh_frame:0000000000006A09                 db  44h ; D
.eh_frame:0000000000006A0A                 db  0Eh
.eh_frame:0000000000006A0B                 db  10h
.eh_frame:0000000000006A0C                 db  61h ; a
.eh_frame:0000000000006A0D                 db  0Ah
.eh_frame:0000000000006A0E                 db  0Eh
.eh_frame:0000000000006A0F                 db    8
.eh_frame:0000000000006A10                 db  4Bh ; K
.eh_frame:0000000000006A11                 db  0Bh
.eh_frame:0000000000006A12                 db  4Bh ; K
.eh_frame:0000000000006A13                 db  0Eh
.eh_frame:0000000000006A14                 db    8
.eh_frame:0000000000006A15                 db    0
.eh_frame:0000000000006A16                 db    0
.eh_frame:0000000000006A17                 db    0
.eh_frame:0000000000006A18                 db  34h ; 4
.eh_frame:0000000000006A19                 db    0
.eh_frame:0000000000006A1A                 db    0
.eh_frame:0000000000006A1B                 db    0
.eh_frame:0000000000006A1C                 db 0A4h
.eh_frame:0000000000006A1D                 db  0Ah
.eh_frame:0000000000006A1E                 db    0
.eh_frame:0000000000006A1F                 db    0
.eh_frame:0000000000006A20                 db  90h
.eh_frame:0000000000006A21                 db 0E3h
.eh_frame:0000000000006A22                 db 0FFh
.eh_frame:0000000000006A23                 db 0FFh
.eh_frame:0000000000006A24                 db  7Bh ; {
.eh_frame:0000000000006A25                 db    0
.eh_frame:0000000000006A26                 db    0
.eh_frame:0000000000006A27                 db    0
.eh_frame:0000000000006A28                 db    0
.eh_frame:0000000000006A29                 db  42h ; B
.eh_frame:0000000000006A2A                 db  0Eh
.eh_frame:0000000000006A2B                 db  10h
.eh_frame:0000000000006A2C                 db  8Ch
.eh_frame:0000000000006A2D                 db    2
.eh_frame:0000000000006A2E                 db  41h ; A
.eh_frame:0000000000006A2F                 db  0Eh
.eh_frame:0000000000006A30                 db  18h
.eh_frame:0000000000006A31                 db  86h
.eh_frame:0000000000006A32                 db    3
.eh_frame:0000000000006A33                 db  41h ; A
.eh_frame:0000000000006A34                 db  0Eh
.eh_frame:0000000000006A35                 db  20h
.eh_frame:0000000000006A36                 db  83h
.eh_frame:0000000000006A37                 db    4
.eh_frame:0000000000006A38                 db  7Dh ; }
.eh_frame:0000000000006A39                 db  0Ah
.eh_frame:0000000000006A3A                 db  0Eh
.eh_frame:0000000000006A3B                 db  18h
.eh_frame:0000000000006A3C                 db  41h ; A
.eh_frame:0000000000006A3D                 db  0Eh
.eh_frame:0000000000006A3E                 db  10h
.eh_frame:0000000000006A3F                 db  42h ; B
.eh_frame:0000000000006A40                 db  0Eh
.eh_frame:0000000000006A41                 db    8
.eh_frame:0000000000006A42                 db  44h ; D
.eh_frame:0000000000006A43                 db  0Bh
.eh_frame:0000000000006A44                 db  60h ; `
.eh_frame:0000000000006A45                 db  0Ah
.eh_frame:0000000000006A46                 db  0Eh
.eh_frame:0000000000006A47                 db  18h
.eh_frame:0000000000006A48                 db  41h ; A
.eh_frame:0000000000006A49                 db  0Eh
.eh_frame:0000000000006A4A                 db  10h
.eh_frame:0000000000006A4B                 db  42h ; B
.eh_frame:0000000000006A4C                 db  0Eh
.eh_frame:0000000000006A4D                 db    8
.eh_frame:0000000000006A4E                 db  45h ; E
.eh_frame:0000000000006A4F                 db  0Bh
.eh_frame:0000000000006A50                 db  1Ch
.eh_frame:0000000000006A51                 db    0
.eh_frame:0000000000006A52                 db    0
.eh_frame:0000000000006A53                 db    0
.eh_frame:0000000000006A54                 db 0DCh
.eh_frame:0000000000006A55                 db  0Ah
.eh_frame:0000000000006A56                 db    0
.eh_frame:0000000000006A57                 db    0
.eh_frame:0000000000006A58                 db 0D8h
.eh_frame:0000000000006A59                 db 0E3h
.eh_frame:0000000000006A5A                 db 0FFh
.eh_frame:0000000000006A5B                 db 0FFh
.eh_frame:0000000000006A5C                 db  40h ; @
.eh_frame:0000000000006A5D                 db    0
.eh_frame:0000000000006A5E                 db    0
.eh_frame:0000000000006A5F                 db    0
.eh_frame:0000000000006A60                 db    0
.eh_frame:0000000000006A61                 db  44h ; D
.eh_frame:0000000000006A62                 db  0Eh
.eh_frame:0000000000006A63                 db  10h
.eh_frame:0000000000006A64                 db  83h
.eh_frame:0000000000006A65                 db    2
.eh_frame:0000000000006A66                 db  5Ah ; Z
.eh_frame:0000000000006A67                 db  0Ah
.eh_frame:0000000000006A68                 db  0Eh
.eh_frame:0000000000006A69                 db    8
.eh_frame:0000000000006A6A                 db  4Ah ; J
.eh_frame:0000000000006A6B                 db  0Bh
.eh_frame:0000000000006A6C                 db  53h ; S
.eh_frame:0000000000006A6D                 db  0Eh
.eh_frame:0000000000006A6E                 db    8
.eh_frame:0000000000006A6F                 db    0
.eh_frame:0000000000006A70                 db  2Ch ; ,
.eh_frame:0000000000006A71                 db    0
.eh_frame:0000000000006A72                 db    0
.eh_frame:0000000000006A73                 db    0
.eh_frame:0000000000006A74                 db 0FCh
.eh_frame:0000000000006A75                 db  0Ah
.eh_frame:0000000000006A76                 db    0
.eh_frame:0000000000006A77                 db    0
.eh_frame:0000000000006A78                 db 0F8h
.eh_frame:0000000000006A79                 db 0E3h
.eh_frame:0000000000006A7A                 db 0FFh
.eh_frame:0000000000006A7B                 db 0FFh
.eh_frame:0000000000006A7C                 db  57h ; W
.eh_frame:0000000000006A7D                 db    0
.eh_frame:0000000000006A7E                 db    0
.eh_frame:0000000000006A7F                 db    0
.eh_frame:0000000000006A80                 db    0
.eh_frame:0000000000006A81                 db  63h ; c
.eh_frame:0000000000006A82                 db  0Eh
.eh_frame:0000000000006A83                 db  10h
.eh_frame:0000000000006A84                 db  8Ch
.eh_frame:0000000000006A85                 db    2
.eh_frame:0000000000006A86                 db  41h ; A
.eh_frame:0000000000006A87                 db  0Eh
.eh_frame:0000000000006A88                 db  18h
.eh_frame:0000000000006A89                 db  86h
.eh_frame:0000000000006A8A                 db    3
.eh_frame:0000000000006A8B                 db  44h ; D
.eh_frame:0000000000006A8C                 db  0Eh
.eh_frame:0000000000006A8D                 db  20h
.eh_frame:0000000000006A8E                 db  83h
.eh_frame:0000000000006A8F                 db    4
.eh_frame:0000000000006A90                 db  6Bh ; k
.eh_frame:0000000000006A91                 db  0Eh
.eh_frame:0000000000006A92                 db  18h
.eh_frame:0000000000006A93                 db  41h ; A
.eh_frame:0000000000006A94                 db  0Eh
.eh_frame:0000000000006A95                 db  10h
.eh_frame:0000000000006A96                 db  42h ; B
.eh_frame:0000000000006A97                 db  0Eh
.eh_frame:0000000000006A98                 db    8
.eh_frame:0000000000006A99                 db    0
.eh_frame:0000000000006A9A                 db    0
.eh_frame:0000000000006A9B                 db    0
.eh_frame:0000000000006A9C                 db    0
.eh_frame:0000000000006A9D                 db    0
.eh_frame:0000000000006A9E                 db    0
.eh_frame:0000000000006A9F                 db    0
.eh_frame:0000000000006AA0                 db  44h ; D
.eh_frame:0000000000006AA1                 db    0
.eh_frame:0000000000006AA2                 db    0
.eh_frame:0000000000006AA3                 db    0
.eh_frame:0000000000006AA4                 db  2Ch ; ,
.eh_frame:0000000000006AA5                 db  0Bh
.eh_frame:0000000000006AA6                 db    0
.eh_frame:0000000000006AA7                 db    0
.eh_frame:0000000000006AA8                 db  28h ; (
.eh_frame:0000000000006AA9                 db 0E4h
.eh_frame:0000000000006AAA                 db 0FFh
.eh_frame:0000000000006AAB                 db 0FFh
.eh_frame:0000000000006AAC                 db  65h ; e
.eh_frame:0000000000006AAD                 db    0
.eh_frame:0000000000006AAE                 db    0
.eh_frame:0000000000006AAF                 db    0
.eh_frame:0000000000006AB0                 db    0
.eh_frame:0000000000006AB1                 db  42h ; B
.eh_frame:0000000000006AB2                 db  0Eh
.eh_frame:0000000000006AB3                 db  10h
.eh_frame:0000000000006AB4                 db  8Fh
.eh_frame:0000000000006AB5                 db    2
.eh_frame:0000000000006AB6                 db  42h ; B
.eh_frame:0000000000006AB7                 db  0Eh
.eh_frame:0000000000006AB8                 db  18h
.eh_frame:0000000000006AB9                 db  8Eh
.eh_frame:0000000000006ABA                 db    3
.eh_frame:0000000000006ABB                 db  45h ; E
.eh_frame:0000000000006ABC                 db  0Eh
.eh_frame:0000000000006ABD                 db  20h
.eh_frame:0000000000006ABE                 db  8Dh
.eh_frame:0000000000006ABF                 db    4
.eh_frame:0000000000006AC0                 db  42h ; B
.eh_frame:0000000000006AC1                 db  0Eh
.eh_frame:0000000000006AC2                 db  28h ; (
.eh_frame:0000000000006AC3                 db  8Ch
.eh_frame:0000000000006AC4                 db    5
.eh_frame:0000000000006AC5                 db  48h ; H
.eh_frame:0000000000006AC6                 db  0Eh
.eh_frame:0000000000006AC7                 db  30h ; 0
.eh_frame:0000000000006AC8                 db  86h
.eh_frame:0000000000006AC9                 db    6
.eh_frame:0000000000006ACA                 db  48h ; H
.eh_frame:0000000000006ACB                 db  0Eh
.eh_frame:0000000000006ACC                 db  38h ; 8
.eh_frame:0000000000006ACD                 db  83h
.eh_frame:0000000000006ACE                 db    7
.eh_frame:0000000000006ACF                 db  4Dh ; M
.eh_frame:0000000000006AD0                 db  0Eh
.eh_frame:0000000000006AD1                 db  40h ; @
.eh_frame:0000000000006AD2                 db  72h ; r
.eh_frame:0000000000006AD3                 db  0Eh
.eh_frame:0000000000006AD4                 db  38h ; 8
.eh_frame:0000000000006AD5                 db  41h ; A
.eh_frame:0000000000006AD6                 db  0Eh
.eh_frame:0000000000006AD7                 db  30h ; 0
.eh_frame:0000000000006AD8                 db  41h ; A
.eh_frame:0000000000006AD9                 db  0Eh
.eh_frame:0000000000006ADA                 db  28h ; (
.eh_frame:0000000000006ADB                 db  42h ; B
.eh_frame:0000000000006ADC                 db  0Eh
.eh_frame:0000000000006ADD                 db  20h
.eh_frame:0000000000006ADE                 db  42h ; B
.eh_frame:0000000000006ADF                 db  0Eh
.eh_frame:0000000000006AE0                 db  18h
.eh_frame:0000000000006AE1                 db  42h ; B
.eh_frame:0000000000006AE2                 db  0Eh
.eh_frame:0000000000006AE3                 db  10h
.eh_frame:0000000000006AE4                 db  42h ; B
.eh_frame:0000000000006AE5                 db  0Eh
.eh_frame:0000000000006AE6                 db    8
.eh_frame:0000000000006AE7                 db    0
.eh_frame:0000000000006AE8                 db  14h
.eh_frame:0000000000006AE9                 db    0
.eh_frame:0000000000006AEA                 db    0
.eh_frame:0000000000006AEB                 db    0
.eh_frame:0000000000006AEC                 db  74h ; t
.eh_frame:0000000000006AED                 db  0Bh
.eh_frame:0000000000006AEE                 db    0
.eh_frame:0000000000006AEF                 db    0
.eh_frame:0000000000006AF0                 db  50h ; P
.eh_frame:0000000000006AF1                 db 0E4h
.eh_frame:0000000000006AF2                 db 0FFh
.eh_frame:0000000000006AF3                 db 0FFh
.eh_frame:0000000000006AF4                 db    2
.eh_frame:0000000000006AF5                 db    0
.eh_frame:0000000000006AF6                 db    0
.eh_frame:0000000000006AF7                 db    0
.eh_frame:0000000000006AF8                 db    0
.eh_frame:0000000000006AF9                 db    0
.eh_frame:0000000000006AFA                 db    0
.eh_frame:0000000000006AFB                 db    0
.eh_frame:0000000000006AFC                 db    0
.eh_frame:0000000000006AFD                 db    0
.eh_frame:0000000000006AFE                 db    0
.eh_frame:0000000000006AFF                 db    0
.eh_frame:0000000000006B00                 db  10h
.eh_frame:0000000000006B01                 db    0
.eh_frame:0000000000006B02                 db    0
.eh_frame:0000000000006B03                 db    0
.eh_frame:0000000000006B04                 db  8Ch
.eh_frame:0000000000006B05                 db  0Bh
.eh_frame:0000000000006B06                 db    0
.eh_frame:0000000000006B07                 db    0
.eh_frame:0000000000006B08                 db  48h ; H
.eh_frame:0000000000006B09                 db 0E4h
.eh_frame:0000000000006B0A                 db 0FFh
.eh_frame:0000000000006B0B                 db 0FFh
.eh_frame:0000000000006B0C                 db  0Eh
.eh_frame:0000000000006B0D                 db    0
.eh_frame:0000000000006B0E                 db    0
.eh_frame:0000000000006B0F                 db    0
.eh_frame:0000000000006B10                 db    0
.eh_frame:0000000000006B11                 db    0
.eh_frame:0000000000006B12                 db    0
.eh_frame:0000000000006B13                 db    0
.eh_frame:0000000000006B14 __FRAME_END__   db    0
.eh_frame:0000000000006B15                 db    0
.eh_frame:0000000000006B16                 db    0
.eh_frame:0000000000006B17                 db    0
.eh_frame:0000000000006B17 _eh_frame       ends
.eh_frame:0000000000006B17
.init_array:0000000000206B50 ; ELF Initialization Function Table
.init_array:0000000000206B50 ; ===========================================================================
.init_array:0000000000206B50
.init_array:0000000000206B50 ; Segment type: Pure data
.init_array:0000000000206B50 ; Segment permissions: Read/Write
.init_array:0000000000206B50 _init_array     segment qword public 'DATA' use64
.init_array:0000000000206B50                 assume cs:_init_array
.init_array:0000000000206B50                 ;org 206B50h
.init_array:0000000000206B50 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:0000000000206B50                                         ; DATA XREF: LOAD:00000000000000F8↑o
.init_array:0000000000206B50                                         ; LOAD:0000000000000210↑o ...
.init_array:0000000000206B50 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:0000000000206B50
.fini_array:0000000000206B58 ; ELF Termination Function Table
.fini_array:0000000000206B58 ; ===========================================================================
.fini_array:0000000000206B58
.fini_array:0000000000206B58 ; Segment type: Pure data
.fini_array:0000000000206B58 ; Segment permissions: Read/Write
.fini_array:0000000000206B58 _fini_array     segment qword public 'DATA' use64
.fini_array:0000000000206B58                 assume cs:_fini_array
.fini_array:0000000000206B58                 ;org 206B58h
.fini_array:0000000000206B58 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:0000000000206B58                                         ; DATA XREF: __libc_csu_init+13↑o
.fini_array:0000000000206B58 _fini_array     ends                    ; Alternative name is '__init_array_end'
.fini_array:0000000000206B58
.data.rel.ro:0000000000206B60 ; ===========================================================================
.data.rel.ro:0000000000206B60
.data.rel.ro:0000000000206B60 ; Segment type: Pure data
.data.rel.ro:0000000000206B60 ; Segment permissions: Read/Write
.data.rel.ro:0000000000206B60 _data_rel_ro    segment align_32 public 'DATA' use64
.data.rel.ro:0000000000206B60                 assume cs:_data_rel_ro
.data.rel.ro:0000000000206B60                 ;org 206B60h
.data.rel.ro:0000000000206B60 ; struct option longopts
.data.rel.ro:0000000000206B60 longopts        dq offset aAll          ; name
.data.rel.ro:0000000000206B60                                         ; DATA XREF: main:loc_174C↑o
.data.rel.ro:0000000000206B60                 dd 0                    ; has_arg ; "all"
.data.rel.ro:0000000000206B60                 db 4 dup(0)
.data.rel.ro:0000000000206B60                 dq 0                    ; flag
.data.rel.ro:0000000000206B60                 dd 80h                  ; val
.data.rel.ro:0000000000206B60                 db 4 dup(0)
.data.rel.ro:0000000000206B80                 dq offset aIgnore       ; "ignore"
.data.rel.ro:0000000000206B88                 db    1
.data.rel.ro:0000000000206B89                 db    0
.data.rel.ro:0000000000206B8A                 db    0
.data.rel.ro:0000000000206B8B                 db    0
.data.rel.ro:0000000000206B8C                 db    0
.data.rel.ro:0000000000206B8D                 db    0
.data.rel.ro:0000000000206B8E                 db    0
.data.rel.ro:0000000000206B8F                 db    0
.data.rel.ro:0000000000206B90                 db    0
.data.rel.ro:0000000000206B91                 db    0
.data.rel.ro:0000000000206B92                 db    0
.data.rel.ro:0000000000206B93                 db    0
.data.rel.ro:0000000000206B94                 db    0
.data.rel.ro:0000000000206B95                 db    0
.data.rel.ro:0000000000206B96                 db    0
.data.rel.ro:0000000000206B97                 db    0
.data.rel.ro:0000000000206B98                 db  81h
.data.rel.ro:0000000000206B99                 db    0
.data.rel.ro:0000000000206B9A                 db    0
.data.rel.ro:0000000000206B9B                 db    0
.data.rel.ro:0000000000206B9C                 db    0
.data.rel.ro:0000000000206B9D                 db    0
.data.rel.ro:0000000000206B9E                 db    0
.data.rel.ro:0000000000206B9F                 db    0
.data.rel.ro:0000000000206BA0                 dq offset aHelp         ; "help"
.data.rel.ro:0000000000206BA8                 db    0
.data.rel.ro:0000000000206BA9                 db    0
.data.rel.ro:0000000000206BAA                 db    0
.data.rel.ro:0000000000206BAB                 db    0
.data.rel.ro:0000000000206BAC                 db    0
.data.rel.ro:0000000000206BAD                 db    0
.data.rel.ro:0000000000206BAE                 db    0
.data.rel.ro:0000000000206BAF                 db    0
.data.rel.ro:0000000000206BB0                 db    0
.data.rel.ro:0000000000206BB1                 db    0
.data.rel.ro:0000000000206BB2                 db    0
.data.rel.ro:0000000000206BB3                 db    0
.data.rel.ro:0000000000206BB4                 db    0
.data.rel.ro:0000000000206BB5                 db    0
.data.rel.ro:0000000000206BB6                 db    0
.data.rel.ro:0000000000206BB7                 db    0
.data.rel.ro:0000000000206BB8                 db  7Eh ; ~
.data.rel.ro:0000000000206BB9                 db 0FFh
.data.rel.ro:0000000000206BBA                 db 0FFh
.data.rel.ro:0000000000206BBB                 db 0FFh
.data.rel.ro:0000000000206BBC                 db    0
.data.rel.ro:0000000000206BBD                 db    0
.data.rel.ro:0000000000206BBE                 db    0
.data.rel.ro:0000000000206BBF                 db    0
.data.rel.ro:0000000000206BC0                 dq offset aVersion      ; "version"
.data.rel.ro:0000000000206BC8                 db    0
.data.rel.ro:0000000000206BC9                 db    0
.data.rel.ro:0000000000206BCA                 db    0
.data.rel.ro:0000000000206BCB                 db    0
.data.rel.ro:0000000000206BCC                 db    0
.data.rel.ro:0000000000206BCD                 db    0
.data.rel.ro:0000000000206BCE                 db    0
.data.rel.ro:0000000000206BCF                 db    0
.data.rel.ro:0000000000206BD0                 db    0
.data.rel.ro:0000000000206BD1                 db    0
.data.rel.ro:0000000000206BD2                 db    0
.data.rel.ro:0000000000206BD3                 db    0
.data.rel.ro:0000000000206BD4                 db    0
.data.rel.ro:0000000000206BD5                 db    0
.data.rel.ro:0000000000206BD6                 db    0
.data.rel.ro:0000000000206BD7                 db    0
.data.rel.ro:0000000000206BD8                 db  7Dh ; }
.data.rel.ro:0000000000206BD9                 db 0FFh
.data.rel.ro:0000000000206BDA                 db 0FFh
.data.rel.ro:0000000000206BDB                 db 0FFh
.data.rel.ro:0000000000206BDC                 db    0
.data.rel.ro:0000000000206BDD                 db    0
.data.rel.ro:0000000000206BDE                 db    0
.data.rel.ro:0000000000206BDF                 db    0
.data.rel.ro:0000000000206BE0                 db    0
.data.rel.ro:0000000000206BE1                 db    0
.data.rel.ro:0000000000206BE2                 db    0
.data.rel.ro:0000000000206BE3                 db    0
.data.rel.ro:0000000000206BE4                 db    0
.data.rel.ro:0000000000206BE5                 db    0
.data.rel.ro:0000000000206BE6                 db    0
.data.rel.ro:0000000000206BE7                 db    0
.data.rel.ro:0000000000206BE8                 db    0
.data.rel.ro:0000000000206BE9                 db    0
.data.rel.ro:0000000000206BEA                 db    0
.data.rel.ro:0000000000206BEB                 db    0
.data.rel.ro:0000000000206BEC                 db    0
.data.rel.ro:0000000000206BED                 db    0
.data.rel.ro:0000000000206BEE                 db    0
.data.rel.ro:0000000000206BEF                 db    0
.data.rel.ro:0000000000206BF0                 db    0
.data.rel.ro:0000000000206BF1                 db    0
.data.rel.ro:0000000000206BF2                 db    0
.data.rel.ro:0000000000206BF3                 db    0
.data.rel.ro:0000000000206BF4                 db    0
.data.rel.ro:0000000000206BF5                 db    0
.data.rel.ro:0000000000206BF6                 db    0
.data.rel.ro:0000000000206BF7                 db    0
.data.rel.ro:0000000000206BF8                 db    0
.data.rel.ro:0000000000206BF9                 db    0
.data.rel.ro:0000000000206BFA                 db    0
.data.rel.ro:0000000000206BFB                 db    0
.data.rel.ro:0000000000206BFC                 db    0
.data.rel.ro:0000000000206BFD                 db    0
.data.rel.ro:0000000000206BFE                 db    0
.data.rel.ro:0000000000206BFF                 db    0
.data.rel.ro:0000000000206C00                 public quoting_style_args
.data.rel.ro:0000000000206C00 quoting_style_args dq offset aLiteral   ; "literal"
.data.rel.ro:0000000000206C08                 dq offset aShell        ; "shell"
.data.rel.ro:0000000000206C10                 dq offset aShellAlways  ; "shell-always"
.data.rel.ro:0000000000206C18                 dq offset aShellEscape  ; "shell-escape"
.data.rel.ro:0000000000206C20                 dq offset aShellEscapeAlw ; "shell-escape-always"
.data.rel.ro:0000000000206C28                 dq offset aNproc+4      ; "c"
.data.rel.ro:0000000000206C30                 dq offset aCMaybe       ; "c-maybe"
.data.rel.ro:0000000000206C38                 dq offset aShellEscape+6 ; "escape"
.data.rel.ro:0000000000206C40                 dq offset dirname+11h   ; "locale"
.data.rel.ro:0000000000206C48                 dq offset aClocale      ; "clocale"
.data.rel.ro:0000000000206C50                 db    0
.data.rel.ro:0000000000206C51                 db    0
.data.rel.ro:0000000000206C52                 db    0
.data.rel.ro:0000000000206C53                 db    0
.data.rel.ro:0000000000206C54                 db    0
.data.rel.ro:0000000000206C55                 db    0
.data.rel.ro:0000000000206C56                 db    0
.data.rel.ro:0000000000206C57                 db    0
.data.rel.ro:0000000000206C57 _data_rel_ro    ends
.data.rel.ro:0000000000206C57
LOAD:0000000000206C58 ; ELF Dynamic Information
LOAD:0000000000206C58 ; ===========================================================================
LOAD:0000000000206C58
LOAD:0000000000206C58 ; Segment type: Pure data
LOAD:0000000000206C58 ; Segment permissions: Read/Write
LOAD:0000000000206C58 LOAD            segment byte public 'DATA' use64
LOAD:0000000000206C58                 assume cs:LOAD
LOAD:0000000000206C58                 ;org 206C58h
LOAD:0000000000206C58 _DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000000130↑o
LOAD:0000000000206C58                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:0000000000206C58                                         ; DT_NEEDED libc.so.6
LOAD:0000000000206C68                 Elf64_Dyn <0Ch, 13C0h>  ; DT_INIT
LOAD:0000000000206C78                 Elf64_Dyn <0Dh, 4F60h>  ; DT_FINI
LOAD:0000000000206C88                 Elf64_Dyn <19h, 206B50h> ; DT_INIT_ARRAY
LOAD:0000000000206C98                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:0000000000206CA8                 Elf64_Dyn <1Ah, 206B58h> ; DT_FINI_ARRAY
LOAD:0000000000206CB8                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:0000000000206CC8                 Elf64_Dyn <6FFFFEF5h, 298h> ; DT_GNU_HASH
LOAD:0000000000206CD8                 Elf64_Dyn <5, 898h>     ; DT_STRTAB
LOAD:0000000000206CE8                 Elf64_Dyn <6, 2E0h>     ; DT_SYMTAB
LOAD:0000000000206CF8                 Elf64_Dyn <0Ah, 2EBh>   ; DT_STRSZ
LOAD:0000000000206D08                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:0000000000206D18                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:0000000000206D28                 Elf64_Dyn <3, 206E48h>  ; DT_PLTGOT
LOAD:0000000000206D38                 Elf64_Dyn <2, 468h>     ; DT_PLTRELSZ
LOAD:0000000000206D48                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:0000000000206D58                 Elf64_Dyn <17h, 0F58h>  ; DT_JMPREL
LOAD:0000000000206D68                 Elf64_Dyn <7, 0C70h>    ; DT_RELA
LOAD:0000000000206D78                 Elf64_Dyn <8, 2E8h>     ; DT_RELASZ
LOAD:0000000000206D88                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:0000000000206D98                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:0000000000206DA8                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:0000000000206DB8                 Elf64_Dyn <6FFFFFFEh, 0C00h> ; DT_VERNEED
LOAD:0000000000206DC8                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:0000000000206DD8                 Elf64_Dyn <6FFFFFF0h, 0B84h> ; DT_VERSYM
LOAD:0000000000206DE8                 Elf64_Dyn <6FFFFFF9h, 14h> ; DT_RELACOUNT
LOAD:0000000000206DF8                 Elf64_Dyn <0>           ; DT_NULL
LOAD:0000000000206E08                 db    0
LOAD:0000000000206E09                 db    0
LOAD:0000000000206E0A                 db    0
LOAD:0000000000206E0B                 db    0
LOAD:0000000000206E0C                 db    0
LOAD:0000000000206E0D                 db    0
LOAD:0000000000206E0E                 db    0
LOAD:0000000000206E0F                 db    0
LOAD:0000000000206E10                 db    0
LOAD:0000000000206E11                 db    0
LOAD:0000000000206E12                 db    0
LOAD:0000000000206E13                 db    0
LOAD:0000000000206E14                 db    0
LOAD:0000000000206E15                 db    0
LOAD:0000000000206E16                 db    0
LOAD:0000000000206E17                 db    0
LOAD:0000000000206E18                 db    0
LOAD:0000000000206E19                 db    0
LOAD:0000000000206E1A                 db    0
LOAD:0000000000206E1B                 db    0
LOAD:0000000000206E1C                 db    0
LOAD:0000000000206E1D                 db    0
LOAD:0000000000206E1E                 db    0
LOAD:0000000000206E1F                 db    0
LOAD:0000000000206E20                 db    0
LOAD:0000000000206E21                 db    0
LOAD:0000000000206E22                 db    0
LOAD:0000000000206E23                 db    0
LOAD:0000000000206E24                 db    0
LOAD:0000000000206E25                 db    0
LOAD:0000000000206E26                 db    0
LOAD:0000000000206E27                 db    0
LOAD:0000000000206E28                 db    0
LOAD:0000000000206E29                 db    0
LOAD:0000000000206E2A                 db    0
LOAD:0000000000206E2B                 db    0
LOAD:0000000000206E2C                 db    0
LOAD:0000000000206E2D                 db    0
LOAD:0000000000206E2E                 db    0
LOAD:0000000000206E2F                 db    0
LOAD:0000000000206E30                 db    0
LOAD:0000000000206E31                 db    0
LOAD:0000000000206E32                 db    0
LOAD:0000000000206E33                 db    0
LOAD:0000000000206E34                 db    0
LOAD:0000000000206E35                 db    0
LOAD:0000000000206E36                 db    0
LOAD:0000000000206E37                 db    0
LOAD:0000000000206E38                 db    0
LOAD:0000000000206E39                 db    0
LOAD:0000000000206E3A                 db    0
LOAD:0000000000206E3B                 db    0
LOAD:0000000000206E3C                 db    0
LOAD:0000000000206E3D                 db    0
LOAD:0000000000206E3E                 db    0
LOAD:0000000000206E3F                 db    0
LOAD:0000000000206E40                 db    0
LOAD:0000000000206E41                 db    0
LOAD:0000000000206E42                 db    0
LOAD:0000000000206E43                 db    0
LOAD:0000000000206E44                 db    0
LOAD:0000000000206E45                 db    0
LOAD:0000000000206E46                 db    0
LOAD:0000000000206E47                 db    0
LOAD:0000000000206E47 LOAD            ends
LOAD:0000000000206E47
.got:0000000000206E48 ; ===========================================================================
.got:0000000000206E48
.got:0000000000206E48 ; Segment type: Pure data
.got:0000000000206E48 ; Segment permissions: Read/Write
.got:0000000000206E48 _got            segment qword public 'DATA' use64
.got:0000000000206E48                 assume cs:_got
.got:0000000000206E48                 ;org 206E48h
.got:0000000000206E48 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:0000000000206E50 qword_206E50    dq 0                    ; DATA XREF: sub_13E0↑r
.got:0000000000206E58 qword_206E58    dq 0                    ; DATA XREF: sub_13E0+6↑r
.got:0000000000206E60 getenv_ptr      dq offset getenv        ; DATA XREF: _getenv↑r
.got:0000000000206E68 free_ptr        dq offset free          ; DATA XREF: _free↑r
.got:0000000000206E70 abort_ptr       dq offset abort         ; DATA XREF: _abort↑r
.got:0000000000206E78 __errno_location_ptr dq offset __errno_location
.got:0000000000206E78                                         ; DATA XREF: ___errno_location↑r
.got:0000000000206E80 strncmp_ptr     dq offset strncmp       ; DATA XREF: _strncmp↑r
.got:0000000000206E88 _exit_ptr       dq offset _exit         ; DATA XREF: __exit↑r
.got:0000000000206E90 __fpending_ptr  dq offset __fpending    ; DATA XREF: ___fpending↑r
.got:0000000000206E98 textdomain_ptr  dq offset textdomain    ; DATA XREF: _textdomain↑r
.got:0000000000206EA0 fclose_ptr      dq offset fclose        ; DATA XREF: _fclose↑r
.got:0000000000206EA8 __sched_cpucount_ptr dq offset __sched_cpucount
.got:0000000000206EA8                                         ; DATA XREF: ___sched_cpucount↑r
.got:0000000000206EB0 bindtextdomain_ptr dq offset bindtextdomain
.got:0000000000206EB0                                         ; DATA XREF: _bindtextdomain↑r
.got:0000000000206EB8 dcgettext_ptr   dq offset dcgettext     ; DATA XREF: _dcgettext↑r
.got:0000000000206EC0 __ctype_get_mb_cur_max_ptr dq offset __ctype_get_mb_cur_max
.got:0000000000206EC0                                         ; DATA XREF: ___ctype_get_mb_cur_max↑r
.got:0000000000206EC8 strlen_ptr      dq offset strlen        ; DATA XREF: _strlen↑r
.got:0000000000206ED0 __stack_chk_fail_ptr dq offset __stack_chk_fail
.got:0000000000206ED0                                         ; DATA XREF: ___stack_chk_fail↑r
.got:0000000000206ED8 getopt_long_ptr dq offset getopt_long   ; DATA XREF: _getopt_long↑r
.got:0000000000206EE0 mbrtowc_ptr     dq offset mbrtowc       ; DATA XREF: _mbrtowc↑r
.got:0000000000206EE8 strchr_ptr      dq offset strchr        ; DATA XREF: _strchr↑r
.got:0000000000206EF0 strrchr_ptr     dq offset strrchr       ; DATA XREF: _strrchr↑r
.got:0000000000206EF8 lseek_ptr       dq offset lseek         ; DATA XREF: _lseek↑r
.got:0000000000206F00 __assert_fail_ptr dq offset __assert_fail
.got:0000000000206F00                                         ; DATA XREF: ___assert_fail↑r
.got:0000000000206F08 __strtoul_internal_ptr dq offset __strtoul_internal
.got:0000000000206F08                                         ; DATA XREF: ___strtoul_internal↑r
.got:0000000000206F10 memset_ptr      dq offset memset        ; DATA XREF: _memset↑r
.got:0000000000206F18 memcmp_ptr      dq offset memcmp        ; DATA XREF: _memcmp↑r
.got:0000000000206F20 fputs_unlocked_ptr dq offset fputs_unlocked
.got:0000000000206F20                                         ; DATA XREF: _fputs_unlocked↑r
.got:0000000000206F28 calloc_ptr      dq offset calloc        ; DATA XREF: _calloc↑r
.got:0000000000206F30 memcpy_ptr      dq offset memcpy        ; DATA XREF: _memcpy↑r
.got:0000000000206F38 fileno_ptr      dq offset fileno        ; DATA XREF: _fileno↑r
.got:0000000000206F40 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc↑r
.got:0000000000206F48 fflush_ptr      dq offset fflush        ; DATA XREF: _fflush↑r
.got:0000000000206F50 nl_langinfo_ptr dq offset nl_langinfo   ; DATA XREF: _nl_langinfo↑r
.got:0000000000206F58 __freading_ptr  dq offset __freading    ; DATA XREF: ___freading↑r
.got:0000000000206F60 realloc_ptr     dq offset realloc       ; DATA XREF: _realloc↑r
.got:0000000000206F68 setlocale_ptr   dq offset setlocale     ; DATA XREF: _setlocale↑r
.got:0000000000206F70 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk↑r
.got:0000000000206F78 error_ptr       dq offset error         ; DATA XREF: _error↑r
.got:0000000000206F80 fseeko_ptr      dq offset fseeko        ; DATA XREF: _fseeko↑r
.got:0000000000206F88 sysconf_ptr     dq offset sysconf       ; DATA XREF: _sysconf↑r
.got:0000000000206F90 strtoul_ptr     dq offset strtoul       ; DATA XREF: _strtoul↑r
.got:0000000000206F98 __cxa_atexit_ptr dq offset __cxa_atexit ; DATA XREF: ___cxa_atexit↑r
.got:0000000000206FA0 exit_ptr        dq offset exit          ; DATA XREF: _exit↑r
.got:0000000000206FA8 fwrite_ptr      dq offset fwrite        ; DATA XREF: _fwrite↑r
.got:0000000000206FB0 __fprintf_chk_ptr dq offset __fprintf_chk
.got:0000000000206FB0                                         ; DATA XREF: ___fprintf_chk↑r
.got:0000000000206FB8 sched_getaffinity_ptr dq offset sched_getaffinity
.got:0000000000206FB8                                         ; DATA XREF: _sched_getaffinity↑r
.got:0000000000206FC0 mbsinit_ptr     dq offset mbsinit       ; DATA XREF: _mbsinit↑r
.got:0000000000206FC8 iswprint_ptr    dq offset iswprint      ; DATA XREF: _iswprint↑r
.got:0000000000206FD0 __ctype_b_loc_ptr dq offset __ctype_b_loc
.got:0000000000206FD0                                         ; DATA XREF: ___ctype_b_loc↑r
.got:0000000000206FD8 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:0000000000206FD8                                         ; DATA XREF: deregister_tm_clones+17↑r
.got:0000000000206FE0 __libc_start_main_ptr dq offset __libc_start_main
.got:0000000000206FE0                                         ; DATA XREF: start+24↑r
.got:0000000000206FE8 __gmon_start___ptr dq offset __gmon_start__
.got:0000000000206FE8                                         ; DATA XREF: _init_proc+4↑r
.got:0000000000206FF0 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:0000000000206FF0                                         ; DATA XREF: register_tm_clones+28↑r
.got:0000000000206FF8 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:0000000000206FF8                                         ; DATA XREF: __cxa_finalize↑r
.got:0000000000206FF8                                         ; __do_global_dtors_aux+9↑r
.got:0000000000206FF8 _got            ends
.got:0000000000206FF8
.data:0000000000207000 ; ===========================================================================
.data:0000000000207000
.data:0000000000207000 ; Segment type: Pure data
.data:0000000000207000 ; Segment permissions: Read/Write
.data:0000000000207000 _data           segment align_32 public 'DATA' use64
.data:0000000000207000                 assume cs:_data
.data:0000000000207000                 ;org 207000h
.data:0000000000207000                 public __data_start ; weak
.data:0000000000207000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:0000000000207000                                         ; data_start
.data:0000000000207001                 db    0
.data:0000000000207002                 db    0
.data:0000000000207003                 db    0
.data:0000000000207004                 db    0
.data:0000000000207005                 db    0
.data:0000000000207006                 db    0
.data:0000000000207007                 db    0
.data:0000000000207008                 public __dso_handle
.data:0000000000207008 ; void *_dso_handle
.data:0000000000207008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+17↑r
.data:0000000000207008                                         ; atexit↑r ...
.data:0000000000207010                 public Version
.data:0000000000207010 Version         dq offset a831          ; DATA XREF: main+F2↑r
.data:0000000000207010                                         ; "8.31"
.data:0000000000207018                 public exit_failure
.data:0000000000207018 ; int exit_failure
.data:0000000000207018 exit_failure    dd 1                    ; DATA XREF: close_stdout:loc_1DC2↑r
.data:0000000000207018                                         ; xalloc_die+17↑r
.data:000000000020701C                 align 20h
.data:0000000000207020                 public quote_quoting_options
.data:0000000000207020 quote_quoting_options db    8           ; DATA XREF: quote_n_mem↑o
.data:0000000000207020                                         ; quote_mem↑o ...
.data:0000000000207021                 db    0
.data:0000000000207022                 db    0
.data:0000000000207023                 db    0
.data:0000000000207024                 db    0
.data:0000000000207025                 db    0
.data:0000000000207026                 db    0
.data:0000000000207027                 db    0
.data:0000000000207028                 db    0
.data:0000000000207029                 db    0
.data:000000000020702A                 db    0
.data:000000000020702B                 db    0
.data:000000000020702C                 db    0
.data:000000000020702D                 db    0
.data:000000000020702E                 db    0
.data:000000000020702F                 db    0
.data:0000000000207030                 db    0
.data:0000000000207031                 db    0
.data:0000000000207032                 db    0
.data:0000000000207033                 db    0
.data:0000000000207034                 db    0
.data:0000000000207035                 db    0
.data:0000000000207036                 db    0
.data:0000000000207037                 db    0
.data:0000000000207038                 db    0
.data:0000000000207039                 db    0
.data:000000000020703A                 db    0
.data:000000000020703B                 db    0
.data:000000000020703C                 db    0
.data:000000000020703D                 db    0
.data:000000000020703E                 db    0
.data:000000000020703F                 db    0
.data:0000000000207040                 db    0
.data:0000000000207041                 db    0
.data:0000000000207042                 db    0
.data:0000000000207043                 db    0
.data:0000000000207044                 db    0
.data:0000000000207045                 db    0
.data:0000000000207046                 db    0
.data:0000000000207047                 db    0
.data:0000000000207048                 db    0
.data:0000000000207049                 db    0
.data:000000000020704A                 db    0
.data:000000000020704B                 db    0
.data:000000000020704C                 db    0
.data:000000000020704D                 db    0
.data:000000000020704E                 db    0
.data:000000000020704F                 db    0
.data:0000000000207050                 db    0
.data:0000000000207051                 db    0
.data:0000000000207052                 db    0
.data:0000000000207053                 db    0
.data:0000000000207054                 db    0
.data:0000000000207055                 db    0
.data:0000000000207056                 db    0
.data:0000000000207057                 db    0
.data:0000000000207058 nslots          dd 1                    ; DATA XREF: quotearg_n_options+3A↑r
.data:0000000000207058                                         ; quotearg_n_options:loc_351D↑r ...
.data:000000000020705C                 align 20h
.data:0000000000207060 ; void *slotvec
.data:0000000000207060 slotvec         dq offset slotvec0      ; DATA XREF: quotearg_n_options+29↑r
.data:0000000000207060                                         ; quotearg_n_options+76↑w ...
.data:0000000000207068                 align 10h
.data:0000000000207070 slotvec0        dq offset qword_100     ; DATA XREF: quotearg_n_options+54↑o
.data:0000000000207070                                         ; quotearg_n_options+187↑r ...
.data:0000000000207078 off_207078      dq offset slot0         ; DATA XREF: quotearg_free+62↑w
.data:0000000000207078 _data           ends
.data:0000000000207078
.bss:0000000000207080 ; ===========================================================================
.bss:0000000000207080
.bss:0000000000207080 ; Segment type: Uninitialized
.bss:0000000000207080 ; Segment permissions: Read/Write
.bss:0000000000207080 _bss            segment align_32 public 'BSS' use64
.bss:0000000000207080                 assume cs:_bss
.bss:0000000000207080                 ;org 207080h
.bss:0000000000207080                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:0000000000207080                 public __bss_start ; weak
.bss:0000000000207080 __bss_start     dq ?                    ; DATA XREF: LOAD:00000000000007F0↑o
.bss:0000000000207080                                         ; LOAD:0000000000000838↑o ...
.bss:0000000000207080                                         ; Alternative name is '__TMC_END__'
.bss:0000000000207080                                         ; program_invocation_short_name@@GLIBC_2.2.5
.bss:0000000000207080                                         ; _edata
.bss:0000000000207080                                         ; Copy of shared data
.bss:0000000000207088                 public stdout@@GLIBC_2_2_5
.bss:0000000000207088 ; FILE *stdout
.bss:0000000000207088 stdout@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:00000000000007D8↑o
.bss:0000000000207088                                         ; main+EB↑r ...
.bss:0000000000207088                                         ; Alternative name is 'stdout'
.bss:0000000000207088                                         ; Copy of shared data
.bss:0000000000207090                 public optind@@GLIBC_2_2_5
.bss:0000000000207090 optind@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:0000000000000868↑o
.bss:0000000000207090                                         ; main:loc_1818↑r
.bss:0000000000207090                                         ; Alternative name is 'optind'
.bss:0000000000207090                                         ; Copy of shared data
.bss:0000000000207094                 align 8
.bss:0000000000207098                 public optarg@@GLIBC_2_2_5
.bss:0000000000207098 optarg@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000880↑o
.bss:0000000000207098                                         ; main+B6↑r
.bss:0000000000207098                                         ; Alternative name is 'optarg'
.bss:0000000000207098                                         ; Copy of shared data
.bss:00000000002070A0                 public program_invocation_name@@GLIBC_2_2_5 ; weak
.bss:00000000002070A0 program_invocation_name@@GLIBC_2_2_5 dq ?
.bss:00000000002070A0                                         ; DATA XREF: LOAD:0000000000000808↑o
.bss:00000000002070A0                                         ; LOAD:0000000000000820↑o ...
.bss:00000000002070A0                                         ; Alternative name is '__progname_full@@GLIBC_2.2.5'
.bss:00000000002070A0                                         ; Copy of shared data
.bss:00000000002070A8                 align 20h
.bss:00000000002070C0                 public stderr@@GLIBC_2_2_5
.bss:00000000002070C0 ; FILE *stderr
.bss:00000000002070C0 stderr@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000850↑o
.bss:00000000002070C0                                         ; usage+3D↑r ...
.bss:00000000002070C0                                         ; Alternative name is 'stderr'
.bss:00000000002070C0                                         ; Copy of shared data
.bss:00000000002070C8 completed_7697  db ?                    ; DATA XREF: __do_global_dtors_aux↑r
.bss:00000000002070C8                                         ; __do_global_dtors_aux+28↑w
.bss:00000000002070C9                 align 10h
.bss:00000000002070D0 ignore_EPIPE    db ?                    ; DATA XREF: close_stdout_set_ignore_EPIPE↑w
.bss:00000000002070D0                                         ; close_stdout+1B↑r
.bss:00000000002070D1                 align 8
.bss:00000000002070D8 file_name       dq ?                    ; DATA XREF: close_stdout_set_file_name↑w
.bss:00000000002070D8                                         ; close_stdout+56↑r
.bss:00000000002070E0                 public program_name
.bss:00000000002070E0 program_name    dq ?                    ; DATA XREF: usage+14↑r
.bss:00000000002070E0                                         ; set_program_name:loc_213D↑w
.bss:00000000002070E8                 align 20h
.bss:0000000000207100 slot0           db    ? ;               ; DATA XREF: quotearg_n_options+FE↑o
.bss:0000000000207100                                         ; quotearg_free+46↑o ...
.bss:0000000000207101                 db    ? ;
.bss:0000000000207102                 db    ? ;
.bss:0000000000207103                 db    ? ;
.bss:0000000000207104                 db    ? ;
.bss:0000000000207105                 db    ? ;
.bss:0000000000207106                 db    ? ;
.bss:0000000000207107                 db    ? ;
.bss:0000000000207108                 db    ? ;
.bss:0000000000207109                 db    ? ;
.bss:000000000020710A                 db    ? ;
.bss:000000000020710B                 db    ? ;
.bss:000000000020710C                 db    ? ;
.bss:000000000020710D                 db    ? ;
.bss:000000000020710E                 db    ? ;
.bss:000000000020710F                 db    ? ;
.bss:0000000000207110                 db    ? ;
.bss:0000000000207111                 db    ? ;
.bss:0000000000207112                 db    ? ;
.bss:0000000000207113                 db    ? ;
.bss:0000000000207114                 db    ? ;
.bss:0000000000207115                 db    ? ;
.bss:0000000000207116                 db    ? ;
.bss:0000000000207117                 db    ? ;
.bss:0000000000207118                 db    ? ;
.bss:0000000000207119                 db    ? ;
.bss:000000000020711A                 db    ? ;
.bss:000000000020711B                 db    ? ;
.bss:000000000020711C                 db    ? ;
.bss:000000000020711D                 db    ? ;
.bss:000000000020711E                 db    ? ;
.bss:000000000020711F                 db    ? ;
.bss:0000000000207120                 db    ? ;
.bss:0000000000207121                 db    ? ;
.bss:0000000000207122                 db    ? ;
.bss:0000000000207123                 db    ? ;
.bss:0000000000207124                 db    ? ;
.bss:0000000000207125                 db    ? ;
.bss:0000000000207126                 db    ? ;
.bss:0000000000207127                 db    ? ;
.bss:0000000000207128                 db    ? ;
.bss:0000000000207129                 db    ? ;
.bss:000000000020712A                 db    ? ;
.bss:000000000020712B                 db    ? ;
.bss:000000000020712C                 db    ? ;
.bss:000000000020712D                 db    ? ;
.bss:000000000020712E                 db    ? ;
.bss:000000000020712F                 db    ? ;
.bss:0000000000207130                 db    ? ;
.bss:0000000000207131                 db    ? ;
.bss:0000000000207132                 db    ? ;
.bss:0000000000207133                 db    ? ;
.bss:0000000000207134                 db    ? ;
.bss:0000000000207135                 db    ? ;
.bss:0000000000207136                 db    ? ;
.bss:0000000000207137                 db    ? ;
.bss:0000000000207138                 db    ? ;
.bss:0000000000207139                 db    ? ;
.bss:000000000020713A                 db    ? ;
.bss:000000000020713B                 db    ? ;
.bss:000000000020713C                 db    ? ;
.bss:000000000020713D                 db    ? ;
.bss:000000000020713E                 db    ? ;
.bss:000000000020713F                 db    ? ;
.bss:0000000000207140                 db    ? ;
.bss:0000000000207141                 db    ? ;
.bss:0000000000207142                 db    ? ;
.bss:0000000000207143                 db    ? ;
.bss:0000000000207144                 db    ? ;
.bss:0000000000207145                 db    ? ;
.bss:0000000000207146                 db    ? ;
.bss:0000000000207147                 db    ? ;
.bss:0000000000207148                 db    ? ;
.bss:0000000000207149                 db    ? ;
.bss:000000000020714A                 db    ? ;
.bss:000000000020714B                 db    ? ;
.bss:000000000020714C                 db    ? ;
.bss:000000000020714D                 db    ? ;
.bss:000000000020714E                 db    ? ;
.bss:000000000020714F                 db    ? ;
.bss:0000000000207150                 db    ? ;
.bss:0000000000207151                 db    ? ;
.bss:0000000000207152                 db    ? ;
.bss:0000000000207153                 db    ? ;
.bss:0000000000207154                 db    ? ;
.bss:0000000000207155                 db    ? ;
.bss:0000000000207156                 db    ? ;
.bss:0000000000207157                 db    ? ;
.bss:0000000000207158                 db    ? ;
.bss:0000000000207159                 db    ? ;
.bss:000000000020715A                 db    ? ;
.bss:000000000020715B                 db    ? ;
.bss:000000000020715C                 db    ? ;
.bss:000000000020715D                 db    ? ;
.bss:000000000020715E                 db    ? ;
.bss:000000000020715F                 db    ? ;
.bss:0000000000207160                 db    ? ;
.bss:0000000000207161                 db    ? ;
.bss:0000000000207162                 db    ? ;
.bss:0000000000207163                 db    ? ;
.bss:0000000000207164                 db    ? ;
.bss:0000000000207165                 db    ? ;
.bss:0000000000207166                 db    ? ;
.bss:0000000000207167                 db    ? ;
.bss:0000000000207168                 db    ? ;
.bss:0000000000207169                 db    ? ;
.bss:000000000020716A                 db    ? ;
.bss:000000000020716B                 db    ? ;
.bss:000000000020716C                 db    ? ;
.bss:000000000020716D                 db    ? ;
.bss:000000000020716E                 db    ? ;
.bss:000000000020716F                 db    ? ;
.bss:0000000000207170                 db    ? ;
.bss:0000000000207171                 db    ? ;
.bss:0000000000207172                 db    ? ;
.bss:0000000000207173                 db    ? ;
.bss:0000000000207174                 db    ? ;
.bss:0000000000207175                 db    ? ;
.bss:0000000000207176                 db    ? ;
.bss:0000000000207177                 db    ? ;
.bss:0000000000207178                 db    ? ;
.bss:0000000000207179                 db    ? ;
.bss:000000000020717A                 db    ? ;
.bss:000000000020717B                 db    ? ;
.bss:000000000020717C                 db    ? ;
.bss:000000000020717D                 db    ? ;
.bss:000000000020717E                 db    ? ;
.bss:000000000020717F                 db    ? ;
.bss:0000000000207180                 db    ? ;
.bss:0000000000207181                 db    ? ;
.bss:0000000000207182                 db    ? ;
.bss:0000000000207183                 db    ? ;
.bss:0000000000207184                 db    ? ;
.bss:0000000000207185                 db    ? ;
.bss:0000000000207186                 db    ? ;
.bss:0000000000207187                 db    ? ;
.bss:0000000000207188                 db    ? ;
.bss:0000000000207189                 db    ? ;
.bss:000000000020718A                 db    ? ;
.bss:000000000020718B                 db    ? ;
.bss:000000000020718C                 db    ? ;
.bss:000000000020718D                 db    ? ;
.bss:000000000020718E                 db    ? ;
.bss:000000000020718F                 db    ? ;
.bss:0000000000207190                 db    ? ;
.bss:0000000000207191                 db    ? ;
.bss:0000000000207192                 db    ? ;
.bss:0000000000207193                 db    ? ;
.bss:0000000000207194                 db    ? ;
.bss:0000000000207195                 db    ? ;
.bss:0000000000207196                 db    ? ;
.bss:0000000000207197                 db    ? ;
.bss:0000000000207198                 db    ? ;
.bss:0000000000207199                 db    ? ;
.bss:000000000020719A                 db    ? ;
.bss:000000000020719B                 db    ? ;
.bss:000000000020719C                 db    ? ;
.bss:000000000020719D                 db    ? ;
.bss:000000000020719E                 db    ? ;
.bss:000000000020719F                 db    ? ;
.bss:00000000002071A0                 db    ? ;
.bss:00000000002071A1                 db    ? ;
.bss:00000000002071A2                 db    ? ;
.bss:00000000002071A3                 db    ? ;
.bss:00000000002071A4                 db    ? ;
.bss:00000000002071A5                 db    ? ;
.bss:00000000002071A6                 db    ? ;
.bss:00000000002071A7                 db    ? ;
.bss:00000000002071A8                 db    ? ;
.bss:00000000002071A9                 db    ? ;
.bss:00000000002071AA                 db    ? ;
.bss:00000000002071AB                 db    ? ;
.bss:00000000002071AC                 db    ? ;
.bss:00000000002071AD                 db    ? ;
.bss:00000000002071AE                 db    ? ;
.bss:00000000002071AF                 db    ? ;
.bss:00000000002071B0                 db    ? ;
.bss:00000000002071B1                 db    ? ;
.bss:00000000002071B2                 db    ? ;
.bss:00000000002071B3                 db    ? ;
.bss:00000000002071B4                 db    ? ;
.bss:00000000002071B5                 db    ? ;
.bss:00000000002071B6                 db    ? ;
.bss:00000000002071B7                 db    ? ;
.bss:00000000002071B8                 db    ? ;
.bss:00000000002071B9                 db    ? ;
.bss:00000000002071BA                 db    ? ;
.bss:00000000002071BB                 db    ? ;
.bss:00000000002071BC                 db    ? ;
.bss:00000000002071BD                 db    ? ;
.bss:00000000002071BE                 db    ? ;
.bss:00000000002071BF                 db    ? ;
.bss:00000000002071C0                 db    ? ;
.bss:00000000002071C1                 db    ? ;
.bss:00000000002071C2                 db    ? ;
.bss:00000000002071C3                 db    ? ;
.bss:00000000002071C4                 db    ? ;
.bss:00000000002071C5                 db    ? ;
.bss:00000000002071C6                 db    ? ;
.bss:00000000002071C7                 db    ? ;
.bss:00000000002071C8                 db    ? ;
.bss:00000000002071C9                 db    ? ;
.bss:00000000002071CA                 db    ? ;
.bss:00000000002071CB                 db    ? ;
.bss:00000000002071CC                 db    ? ;
.bss:00000000002071CD                 db    ? ;
.bss:00000000002071CE                 db    ? ;
.bss:00000000002071CF                 db    ? ;
.bss:00000000002071D0                 db    ? ;
.bss:00000000002071D1                 db    ? ;
.bss:00000000002071D2                 db    ? ;
.bss:00000000002071D3                 db    ? ;
.bss:00000000002071D4                 db    ? ;
.bss:00000000002071D5                 db    ? ;
.bss:00000000002071D6                 db    ? ;
.bss:00000000002071D7                 db    ? ;
.bss:00000000002071D8                 db    ? ;
.bss:00000000002071D9                 db    ? ;
.bss:00000000002071DA                 db    ? ;
.bss:00000000002071DB                 db    ? ;
.bss:00000000002071DC                 db    ? ;
.bss:00000000002071DD                 db    ? ;
.bss:00000000002071DE                 db    ? ;
.bss:00000000002071DF                 db    ? ;
.bss:00000000002071E0                 db    ? ;
.bss:00000000002071E1                 db    ? ;
.bss:00000000002071E2                 db    ? ;
.bss:00000000002071E3                 db    ? ;
.bss:00000000002071E4                 db    ? ;
.bss:00000000002071E5                 db    ? ;
.bss:00000000002071E6                 db    ? ;
.bss:00000000002071E7                 db    ? ;
.bss:00000000002071E8                 db    ? ;
.bss:00000000002071E9                 db    ? ;
.bss:00000000002071EA                 db    ? ;
.bss:00000000002071EB                 db    ? ;
.bss:00000000002071EC                 db    ? ;
.bss:00000000002071ED                 db    ? ;
.bss:00000000002071EE                 db    ? ;
.bss:00000000002071EF                 db    ? ;
.bss:00000000002071F0                 db    ? ;
.bss:00000000002071F1                 db    ? ;
.bss:00000000002071F2                 db    ? ;
.bss:00000000002071F3                 db    ? ;
.bss:00000000002071F4                 db    ? ;
.bss:00000000002071F5                 db    ? ;
.bss:00000000002071F6                 db    ? ;
.bss:00000000002071F7                 db    ? ;
.bss:00000000002071F8                 db    ? ;
.bss:00000000002071F9                 db    ? ;
.bss:00000000002071FA                 db    ? ;
.bss:00000000002071FB                 db    ? ;
.bss:00000000002071FC                 db    ? ;
.bss:00000000002071FD                 db    ? ;
.bss:00000000002071FE                 db    ? ;
.bss:00000000002071FF                 db    ? ;
.bss:0000000000207200 default_quoting_options xmmword ?       ; DATA XREF: clone_quoting_options+12↑o
.bss:0000000000207200                                         ; get_quoting_style↑o ...
.bss:0000000000207210 xmmword_207210  xmmword ?               ; DATA XREF: quotearg_char_mem+41↑r
.bss:0000000000207210                                         ; quotearg_n_custom_mem+39↑r
.bss:0000000000207220 xmmword_207220  xmmword ?               ; DATA XREF: quotearg_char_mem+4E↑r
.bss:0000000000207220                                         ; quotearg_n_custom_mem+46↑r
.bss:0000000000207230 qword_207230    dq ?                    ; DATA XREF: quotearg_char_mem+16↑r
.bss:0000000000207230                                         ; quotearg_n_custom_mem+7↑r
.bss:0000000000207230 _bss            ends
.bss:0000000000207230
.prgend:0000000000207238 ; ===========================================================================
.prgend:0000000000207238
.prgend:0000000000207238 ; Segment type: Zero-length
.prgend:0000000000207238 _prgend         segment byte public '' use64
.prgend:0000000000207238 _end            label byte
.prgend:0000000000207238 _prgend         ends
.prgend:0000000000207238
extern:0000000000207240 ; ===========================================================================
extern:0000000000207240
extern:0000000000207240 ; Segment type: Externs
extern:0000000000207240 ; extern
extern:0000000000207240 ; char *getenv(const char *name)
extern:0000000000207240                 extrn getenv:near       ; CODE XREF: _getenv↑j
extern:0000000000207240                                         ; DATA XREF: .got:getenv_ptr↑o
extern:0000000000207248 ; void free(void *ptr)
extern:0000000000207248                 extrn free:near         ; CODE XREF: _free↑j
extern:0000000000207248                                         ; DATA XREF: .got:free_ptr↑o
extern:0000000000207250 ; void __noreturn abort(void)
extern:0000000000207250                 extrn abort:near        ; CODE XREF: _abort↑j
extern:0000000000207250                                         ; DATA XREF: .got:abort_ptr↑o
extern:0000000000207258 ; int *_errno_location(void)
extern:0000000000207258                 extrn __errno_location:near
extern:0000000000207258                                         ; CODE XREF: ___errno_location↑j
extern:0000000000207258                                         ; DATA XREF: .got:__errno_location_ptr↑o
extern:0000000000207260 ; int strncmp(const char *s1, const char *s2, size_t n)
extern:0000000000207260                 extrn strncmp:near      ; CODE XREF: _strncmp↑j
extern:0000000000207260                                         ; DATA XREF: .got:strncmp_ptr↑o
extern:0000000000207268 ; void __noreturn exit(int status)
extern:0000000000207268                 extrn _exit:near        ; CODE XREF: __exit↑j
extern:0000000000207268                                         ; DATA XREF: .got:_exit_ptr↑o
extern:0000000000207270 ; size_t _fpending(FILE *fp)
extern:0000000000207270                 extrn __fpending:near   ; CODE XREF: ___fpending↑j
extern:0000000000207270                                         ; DATA XREF: .got:__fpending_ptr↑o
extern:0000000000207278 ; char *textdomain(const char *domainname)
extern:0000000000207278                 extrn textdomain:near   ; CODE XREF: _textdomain↑j
extern:0000000000207278                                         ; DATA XREF: .got:textdomain_ptr↑o
extern:0000000000207280 ; int fclose(FILE *stream)
extern:0000000000207280                 extrn fclose:near       ; CODE XREF: _fclose↑j
extern:0000000000207280                                         ; DATA XREF: .got:fclose_ptr↑o
extern:0000000000207288 ; int _sched_cpucount(size_t setsize, const cpu_set_t *setp)
extern:0000000000207288                 extrn __sched_cpucount:near
extern:0000000000207288                                         ; CODE XREF: ___sched_cpucount↑j
extern:0000000000207288                                         ; DATA XREF: .got:__sched_cpucount_ptr↑o
extern:0000000000207290 ; char *bindtextdomain(const char *domainname, const char *dirname)
extern:0000000000207290                 extrn bindtextdomain:near
extern:0000000000207290                                         ; CODE XREF: _bindtextdomain↑j
extern:0000000000207290                                         ; DATA XREF: .got:bindtextdomain_ptr↑o
extern:0000000000207298 ; char *dcgettext(const char *domainname, const char *msgid, int category)
extern:0000000000207298                 extrn dcgettext:near    ; CODE XREF: _dcgettext↑j
extern:0000000000207298                                         ; DATA XREF: .got:dcgettext_ptr↑o
extern:00000000002072A0 ; size_t _ctype_get_mb_cur_max(void)
extern:00000000002072A0                 extrn __ctype_get_mb_cur_max:near
extern:00000000002072A0                                         ; CODE XREF: ___ctype_get_mb_cur_max↑j
extern:00000000002072A0                                         ; DATA XREF: .got:__ctype_get_mb_cur_max_ptr↑o
extern:00000000002072A8 ; size_t strlen(const char *s)
extern:00000000002072A8                 extrn strlen:near       ; CODE XREF: _strlen↑j
extern:00000000002072A8                                         ; DATA XREF: .got:strlen_ptr↑o
extern:00000000002072B0                 extrn __stack_chk_fail:near
extern:00000000002072B0                                         ; CODE XREF: ___stack_chk_fail↑j
extern:00000000002072B0                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:00000000002072B8 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
extern:00000000002072B8                 extrn getopt_long:near  ; CODE XREF: _getopt_long↑j
extern:00000000002072B8                                         ; DATA XREF: .got:getopt_long_ptr↑o
extern:00000000002072C0 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
extern:00000000002072C0                 extrn mbrtowc:near      ; CODE XREF: _mbrtowc↑j
extern:00000000002072C0                                         ; DATA XREF: .got:mbrtowc_ptr↑o
extern:00000000002072C8 ; char *strchr(const char *s, int c)
extern:00000000002072C8                 extrn strchr:near       ; CODE XREF: _strchr↑j
extern:00000000002072C8                                         ; DATA XREF: .got:strchr_ptr↑o
extern:00000000002072D0 ; char *strrchr(const char *s, int c)
extern:00000000002072D0                 extrn strrchr:near      ; CODE XREF: _strrchr↑j
extern:00000000002072D0                                         ; DATA XREF: .got:strrchr_ptr↑o
extern:00000000002072D8 ; __off_t lseek(int fd, __off_t offset, int whence)
extern:00000000002072D8                 extrn lseek:near        ; CODE XREF: _lseek↑j
extern:00000000002072D8                                         ; DATA XREF: .got:lseek_ptr↑o
extern:00000000002072E0 ; void __noreturn _assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
extern:00000000002072E0                 extrn __assert_fail:near
extern:00000000002072E0                                         ; CODE XREF: ___assert_fail↑j
extern:00000000002072E0                                         ; DATA XREF: .got:__assert_fail_ptr↑o
extern:00000000002072E8 ; unsigned __int64 _strtoul_internal(const char *nptr, char **endptr, int base, int group)
extern:00000000002072E8                 extrn __strtoul_internal:near
extern:00000000002072E8                                         ; CODE XREF: ___strtoul_internal↑j
extern:00000000002072E8                                         ; DATA XREF: .got:__strtoul_internal_ptr↑o
extern:00000000002072F0 ; void *memset(void *s, int c, size_t n)
extern:00000000002072F0                 extrn memset:near       ; CODE XREF: _memset↑j
extern:00000000002072F0                                         ; DATA XREF: .got:memset_ptr↑o
extern:00000000002072F8 ; int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:00000000002072F8                 extrn __libc_start_main:near
extern:00000000002072F8                                         ; CODE XREF: start+24↑p
extern:00000000002072F8                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:0000000000207300 ; int memcmp(const void *s1, const void *s2, size_t n)
extern:0000000000207300                 extrn memcmp:near       ; CODE XREF: _memcmp↑j
extern:0000000000207300                                         ; DATA XREF: .got:memcmp_ptr↑o
extern:0000000000207308 ; int fputs_unlocked(const char *s, FILE *stream)
extern:0000000000207308                 extrn fputs_unlocked:near
extern:0000000000207308                                         ; CODE XREF: _fputs_unlocked↑j
extern:0000000000207308                                         ; DATA XREF: .got:fputs_unlocked_ptr↑o
extern:0000000000207310 ; void *calloc(size_t nmemb, size_t size)
extern:0000000000207310                 extrn calloc:near       ; CODE XREF: _calloc↑j
extern:0000000000207310                                         ; DATA XREF: .got:calloc_ptr↑o
extern:0000000000207318 ; void *memcpy(void *dest, const void *src, size_t n)
extern:0000000000207318                 extrn memcpy:near       ; CODE XREF: _memcpy↑j
extern:0000000000207318                                         ; DATA XREF: .got:memcpy_ptr↑o
extern:0000000000207320 ; int fileno(FILE *stream)
extern:0000000000207320                 extrn fileno:near       ; CODE XREF: _fileno↑j
extern:0000000000207320                                         ; DATA XREF: .got:fileno_ptr↑o
extern:0000000000207328 ; void *malloc(size_t size)
extern:0000000000207328                 extrn malloc:near       ; CODE XREF: _malloc↑j
extern:0000000000207328                                         ; DATA XREF: .got:malloc_ptr↑o
extern:0000000000207330 ; int fflush(FILE *stream)
extern:0000000000207330                 extrn fflush:near       ; CODE XREF: _fflush↑j
extern:0000000000207330                                         ; DATA XREF: .got:fflush_ptr↑o
extern:0000000000207338 ; char *nl_langinfo(nl_item item)
extern:0000000000207338                 extrn nl_langinfo:near  ; CODE XREF: _nl_langinfo↑j
extern:0000000000207338                                         ; DATA XREF: .got:nl_langinfo_ptr↑o
extern:0000000000207340 ; int _freading(FILE *fp)
extern:0000000000207340                 extrn __freading:near   ; CODE XREF: ___freading↑j
extern:0000000000207340                                         ; DATA XREF: .got:__freading_ptr↑o
extern:0000000000207348 ; void *realloc(void *ptr, size_t size)
extern:0000000000207348                 extrn realloc:near      ; CODE XREF: _realloc↑j
extern:0000000000207348                                         ; DATA XREF: .got:realloc_ptr↑o
extern:0000000000207350 ; char *setlocale(int category, const char *locale)
extern:0000000000207350                 extrn setlocale:near    ; CODE XREF: _setlocale↑j
extern:0000000000207350                                         ; DATA XREF: .got:setlocale_ptr↑o
extern:0000000000207358                 extrn __printf_chk:near ; CODE XREF: ___printf_chk↑j
extern:0000000000207358                                         ; DATA XREF: .got:__printf_chk_ptr↑o
extern:0000000000207360 ; void error(int status, int errnum, const char *format, ...)
extern:0000000000207360                 extrn error:near        ; CODE XREF: _error↑j
extern:0000000000207360                                         ; DATA XREF: .got:error_ptr↑o
extern:0000000000207368 ; int fseeko(FILE *stream, __off_t off, int whence)
extern:0000000000207368                 extrn fseeko:near       ; CODE XREF: _fseeko↑j
extern:0000000000207368                                         ; DATA XREF: .got:fseeko_ptr↑o
extern:0000000000207370 ; __int64 sysconf(int name)
extern:0000000000207370                 extrn sysconf:near      ; CODE XREF: _sysconf↑j
extern:0000000000207370                                         ; DATA XREF: .got:sysconf_ptr↑o
extern:0000000000207378 ; unsigned __int64 strtoul(const char *nptr, char **endptr, int base)
extern:0000000000207378                 extrn strtoul:near      ; CODE XREF: _strtoul↑j
extern:0000000000207378                                         ; DATA XREF: .got:strtoul_ptr↑o
extern:0000000000207380 ; int __fastcall _cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
extern:0000000000207380                 extrn __cxa_atexit:near ; CODE XREF: ___cxa_atexit↑j
extern:0000000000207380                                         ; DATA XREF: .got:__cxa_atexit_ptr↑o
extern:0000000000207388 ; void __noreturn exit(int status)
extern:0000000000207388                 extrn exit:near         ; CODE XREF: _exit↑j
extern:0000000000207388                                         ; DATA XREF: .got:exit_ptr↑o
extern:0000000000207390 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
extern:0000000000207390                 extrn fwrite:near       ; CODE XREF: _fwrite↑j
extern:0000000000207390                                         ; DATA XREF: .got:fwrite_ptr↑o
extern:0000000000207398                 extrn __fprintf_chk:near
extern:0000000000207398                                         ; CODE XREF: ___fprintf_chk↑j
extern:0000000000207398                                         ; DATA XREF: .got:__fprintf_chk_ptr↑o
extern:00000000002073A0 ; int sched_getaffinity(__pid_t pid, size_t cpusetsize, cpu_set_t *cpuset)
extern:00000000002073A0                 extrn sched_getaffinity:near
extern:00000000002073A0                                         ; CODE XREF: _sched_getaffinity↑j
extern:00000000002073A0                                         ; DATA XREF: .got:sched_getaffinity_ptr↑o
extern:00000000002073A8 ; int mbsinit(const mbstate_t *ps)
extern:00000000002073A8                 extrn mbsinit:near      ; CODE XREF: _mbsinit↑j
extern:00000000002073A8                                         ; DATA XREF: .got:mbsinit_ptr↑o
extern:00000000002073B0 ; int iswprint(wint_t wc)
extern:00000000002073B0                 extrn iswprint:near     ; CODE XREF: _iswprint↑j
extern:00000000002073B0                                         ; DATA XREF: .got:iswprint_ptr↑o
extern:00000000002073B8 ; int __fastcall __cxa_finalize(void *)
extern:00000000002073B8                 extrn __imp___cxa_finalize:near ; weak
extern:00000000002073B8                                         ; CODE XREF: __cxa_finalize↑j
extern:00000000002073B8                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:00000000002073C0 ; const unsigned __int16 **_ctype_b_loc(void)
extern:00000000002073C0                 extrn __ctype_b_loc:near
extern:00000000002073C0                                         ; CODE XREF: ___ctype_b_loc↑j
extern:00000000002073C0                                         ; DATA XREF: .got:__ctype_b_loc_ptr↑o
extern:00000000002073C8                 extrn _ITM_deregisterTMCloneTable ; weak
extern:00000000002073C8                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:00000000002073D0                 extrn __gmon_start__:near ; weak
extern:00000000002073D0                                         ; CODE XREF: _init_proc+10↑p
extern:00000000002073D0                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:00000000002073D8                 extrn _ITM_registerTMCloneTable ; weak
extern:00000000002073D8                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:00000000002073D8
extern:00000000002073D8
extern:00000000002073D8                 end start
