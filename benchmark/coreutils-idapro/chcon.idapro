LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                      License info: 48-357D-7BC4-C6                      |
LOAD:0000000000000000 ; |                              Virginia Tech                              |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : CA571E9DB55EC6773A1BD4BAD68268CA33B1E341A5BE4721A6D35366B92B803D
LOAD:0000000000000000 ; Input MD5    : FC477DB5896971359CB44F9BBA1E6C7D
LOAD:0000000000000000 ; Input CRC32  : E5A5452D
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/chcon
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'chcon.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000 ; Source File : 'version.c'
LOAD:0000000000000000 ; Source File : 'closeout.c'
LOAD:0000000000000000 ; Source File : 'exitfail.c'
LOAD:0000000000000000 ; Source File : 'progname.c'
LOAD:0000000000000000 ; Source File : 'quotearg.c'
LOAD:0000000000000000 ; Source File : 'root-dev-ino.c'
LOAD:0000000000000000 ; Source File : 'version-etc.c'
LOAD:0000000000000000 ; Source File : 'version-etc-fsf.c'
LOAD:0000000000000000 ; Source File : 'xmalloc.c'
LOAD:0000000000000000 ; Source File : 'xalloc-die.c'
LOAD:0000000000000000 ; Source File : 'xfts.c'
LOAD:0000000000000000 ; Source File : 'fts.c'
LOAD:0000000000000000 ; Source File : 'mbrtowc.c'
LOAD:0000000000000000 ; Source File : 'selinux-at.c'
LOAD:0000000000000000 ; Source File : 'close-stream.c'
LOAD:0000000000000000 ; Source File : 'cycle-check.c'
LOAD:0000000000000000 ; Source File : 'open-safer.c'
LOAD:0000000000000000 ; Source File : 'hard-locale.c'
LOAD:0000000000000000 ; Source File : 'hash.c'
LOAD:0000000000000000 ; Source File : 'i-ring.c'
LOAD:0000000000000000 ; Source File : 'localcharset.c'
LOAD:0000000000000000 ; Source File : 'openat-die.c'
LOAD:0000000000000000 ; Source File : 'openat-safer.c'
LOAD:0000000000000000 ; Source File : 'opendirat.c'
LOAD:0000000000000000 ; Source File : 'save-cwd.c'
LOAD:0000000000000000 ; Source File : 'fd-safer.c'
LOAD:0000000000000000 ; Source File : 'chdir-long.c'
LOAD:0000000000000000 ; Source File : 'fclose.c'
LOAD:0000000000000000 ; Source File : 'fcntl.c'
LOAD:0000000000000000 ; Source File : 'fflush.c'
LOAD:0000000000000000 ; Source File : 'fseeko.c'
LOAD:0000000000000000 ; Source File : 'openat-proc.c'
LOAD:0000000000000000 ; Source File : 'dup-safer.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure code
LOAD:0000000000000000 ; Segment permissions: Read/Execute
LOAD:0000000000000000 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000002F8↓o
LOAD:0000000000000000                                         ; LOAD:0000000000000310↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset start         ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 45198h               ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 9                    ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 25h                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 24h                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 1F8h                 ; Size in file image
LOAD:0000000000000068                 dq 1F8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 238h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 238h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 5                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 0D060h               ; Size in file image
LOAD:00000000000000D8                 dq 0D060h               ; Size in memory image
LOAD:00000000000000E0                 dq 200000h              ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 6                    ; Flags
LOAD:00000000000000F0                 dq 0D990h               ; File offset
LOAD:00000000000000F8                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000100 qword_100       dq 20D990h              ; DATA XREF: .data:slotvec0↓o
LOAD:0000000000000100                                         ; Physical address
LOAD:0000000000000108                 dq 6F0h                 ; Size in file image
LOAD:0000000000000110                 dq 8D0h                 ; Size in memory image
LOAD:0000000000000118                 dq 200000h              ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000124                 dd 6                    ; Flags
LOAD:0000000000000128                 dq 0DBB8h               ; File offset
LOAD:0000000000000130                 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000000138                 dq 20DBB8h              ; Physical address
LOAD:0000000000000140                 dq 1F0h                 ; Size in file image
LOAD:0000000000000148                 dq 1F0h                 ; Size in memory image
LOAD:0000000000000150                 dq 8                    ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 4                    ; Type: NOTE
LOAD:000000000000015C                 dd 4                    ; Flags
LOAD:0000000000000160                 dq 254h                 ; File offset
LOAD:0000000000000168                 dq offset dword_254     ; Virtual address
LOAD:0000000000000170                 dq 254h                 ; Physical address
LOAD:0000000000000178                 dq 44h                  ; Size in file image
LOAD:0000000000000180                 dq 44h                  ; Size in memory image
LOAD:0000000000000188                 dq 4                    ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000194                 dd 4                    ; Flags
LOAD:0000000000000198                 dq 0B3D4h               ; File offset
LOAD:00000000000001A0                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000000001A8                 dq 0B3D4h               ; Physical address
LOAD:00000000000001B0                 dq 4C4h                 ; Size in file image
LOAD:00000000000001B8                 dq 4C4h                 ; Size in memory image
LOAD:00000000000001C0                 dq 4                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000001CC                 dd 6                    ; Flags
LOAD:00000000000001D0                 dq 0                    ; File offset
LOAD:00000000000001D8                 dq 0                    ; Virtual address
LOAD:00000000000001E0                 dq 0                    ; Physical address
LOAD:00000000000001E8                 dq 0                    ; Size in file image
LOAD:00000000000001F0                 dq 0                    ; Size in memory image
LOAD:00000000000001F8                 dq 10h                  ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 6474E552h            ; Type: RO-AFTER
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 0D990h               ; File offset
LOAD:0000000000000210                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000218                 dq 20D990h              ; Physical address
LOAD:0000000000000220                 dq 670h                 ; Size in file image
LOAD:0000000000000228                 dq 670h                 ; Size in memory image
LOAD:0000000000000230                 dq 1                    ; Alignment
LOAD:0000000000000238 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000238                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000254 ; ELF Note Entry
LOAD:0000000000000254 dword_254       dd 4                    ; DATA XREF: LOAD:0000000000000168↑o
LOAD:0000000000000254                                         ; Name Size
LOAD:0000000000000258                 dd 10h                  ; Desc Size
LOAD:000000000000025C                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000260 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000264                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:0000000000000274 ; ELF Note Entry
LOAD:0000000000000274                 dd 4                    ; Name Size
LOAD:0000000000000278                 dd 14h                  ; Desc Size
LOAD:000000000000027C                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000280 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000284                 db 5Dh, 6Eh, 78h, 7, 0C3h, 3Ah, 0ADh, 87h, 67h, 0B4h, 0A9h ; Desc
LOAD:0000000000000284                 db 0E1h, 3Ah, 0E8h, 62h, 2, 9Ch, 0EFh, 6Ah, 55h
LOAD:0000000000000298 ; ELF GNU Hash Table
LOAD:0000000000000298 elf_gnu_hash_nbuckets dd 3
LOAD:000000000000029C elf_gnu_hash_symbias dd 47h
LOAD:00000000000002A0 elf_gnu_hash_bitmask_nwords dd 1
LOAD:00000000000002A4 elf_gnu_hash_shift dd 6
LOAD:00000000000002A8 elf_gnu_hash_indexes dq 121C012000414D04h
LOAD:00000000000002B0 elf_gnu_hash_bucket dd 47h, 48h, 4Dh
LOAD:00000000000002BC elf_gnu_hash_chain dd 1C8C1D29h, 9E7650BCh, 9789A096h, 72632CCEh, 0F54162E4h
LOAD:00000000000002BC                 dd 1C8BF239h, 12F7C432h, 12F7A2B3h, 0
LOAD:00000000000002E0 ; ELF Symbol Table
LOAD:00000000000002E0                 Elf64_Sym <0>
LOAD:00000000000002F8                 Elf64_Sym <offset aFree - offset byte_A48, 12h, 0, 0, offset dword_0, \ ; "free"
LOAD:00000000000002F8                            0>
LOAD:0000000000000310                 Elf64_Sym <offset aAbort - offset byte_A48, 12h, 0, 0, offset dword_0,\ ; "abort"
LOAD:0000000000000310                            0>
LOAD:0000000000000328                 Elf64_Sym <offset aErrnoLocation - offset byte_A48, 12h, 0, 0, \ ; "__errno_location"
LOAD:0000000000000328                            offset dword_0, 0>
LOAD:0000000000000340                 Elf64_Sym <offset aStrncmp - offset byte_A48, 12h, 0, 0, \ ; "strncmp"
LOAD:0000000000000340                            offset dword_0, 0>
LOAD:0000000000000358                 Elf64_Sym <offset aItmDeregistert - offset byte_A48, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:0000000000000358                            offset dword_0, 0>
LOAD:0000000000000370                 Elf64_Sym <offset aExit - offset byte_A48, 12h, 0, 0, offset dword_0, \ ; "_exit"
LOAD:0000000000000370                            0>
LOAD:0000000000000388                 Elf64_Sym <offset aStrcpy - offset byte_A48, 12h, 0, 0, \ ; "strcpy"
LOAD:0000000000000388                            offset dword_0, 0>
LOAD:00000000000003A0                 Elf64_Sym <offset aFpending - offset byte_A48, 12h, 0, 0, \ ; "__fpending"
LOAD:00000000000003A0                            offset dword_0, 0>
LOAD:00000000000003B8                 Elf64_Sym <offset aQsort - offset byte_A48, 12h, 0, 0, offset dword_0,\ ; "qsort"
LOAD:00000000000003B8                            0>
LOAD:00000000000003D0                 Elf64_Sym <offset aFcntl - offset byte_A48, 12h, 0, 0, offset dword_0,\ ; "fcntl"
LOAD:00000000000003D0                            0>
LOAD:00000000000003E8                 Elf64_Sym <offset aBindtextdomain+4 - offset byte_A48, 12h, 0, 0, \ ; "textdomain"
LOAD:00000000000003E8                            offset dword_0, 0>
LOAD:0000000000000400                 Elf64_Sym <offset aFclose - offset byte_A48, 12h, 0, 0, \ ; "fclose"
LOAD:0000000000000400                            offset dword_0, 0>
LOAD:0000000000000418                 Elf64_Sym <offset aBindtextdomain - offset byte_A48, 12h, 0, 0, \ ; "bindtextdomain"
LOAD:0000000000000418                            offset dword_0, 0>
LOAD:0000000000000430                 Elf64_Sym <offset aDcgettext - offset byte_A48, 12h, 0, 0, \ ; "dcgettext"
LOAD:0000000000000430                            offset dword_0, 0>
LOAD:0000000000000448                 Elf64_Sym <offset aCtypeGetMbCurM - offset byte_A48, 12h, 0, 0, \ ; "__ctype_get_mb_cur_max"
LOAD:0000000000000448                            offset dword_0, 0>
LOAD:0000000000000460                 Elf64_Sym <offset aStrlen - offset byte_A48, 12h, 0, 0, \ ; "strlen"
LOAD:0000000000000460                            offset dword_0, 0>
LOAD:0000000000000478                 Elf64_Sym <offset aLxstat - offset byte_A48, 12h, 0, 0, \ ; "__lxstat"
LOAD:0000000000000478                            offset dword_0, 0>
LOAD:0000000000000490                 Elf64_Sym <offset aOpenat - offset byte_A48, 12h, 0, 0, \ ; "openat"
LOAD:0000000000000490                            offset dword_0, 0>
LOAD:00000000000004A8                 Elf64_Sym <offset aFchdir+1 - offset byte_A48, 12h, 0, 0, \ ; "chdir"
LOAD:00000000000004A8                            offset dword_0, 0>
LOAD:00000000000004C0                 Elf64_Sym <offset aStackChkFail - offset byte_A48, 12h, 0, 0, \ ; "__stack_chk_fail"
LOAD:00000000000004C0                            offset dword_0, 0>
LOAD:00000000000004D8                 Elf64_Sym <offset aGetoptLong - offset byte_A48, 12h, 0, 0, \ ; "getopt_long"
LOAD:00000000000004D8                            offset dword_0, 0>
LOAD:00000000000004F0                 Elf64_Sym <offset aMbrtowc - offset byte_A48, 12h, 0, 0, \ ; "mbrtowc"
LOAD:00000000000004F0                            offset dword_0, 0>
LOAD:0000000000000508                 Elf64_Sym <offset aFxstatat - offset byte_A48, 12h, 0, 0, \ ; "__fxstatat"
LOAD:0000000000000508                            offset dword_0, 0>
LOAD:0000000000000520                 Elf64_Sym <offset aStrrchr - offset byte_A48, 12h, 0, 0, \ ; "strrchr"
LOAD:0000000000000520                            offset dword_0, 0>
LOAD:0000000000000538                 Elf64_Sym <offset aLseek - offset byte_A48, 12h, 0, 0, offset dword_0,\ ; "lseek"
LOAD:0000000000000538                            0>
LOAD:0000000000000550                 Elf64_Sym <offset aAssertFail - offset byte_A48, 12h, 0, 0, \ ; "__assert_fail"
LOAD:0000000000000550                            offset dword_0, 0>
LOAD:0000000000000568                 Elf64_Sym <offset aMemset - offset byte_A48, 12h, 0, 0, \ ; "memset"
LOAD:0000000000000568                            offset dword_0, 0>
LOAD:0000000000000580                 Elf64_Sym <offset aGetcwd - offset byte_A48, 12h, 0, 0, \ ; "getcwd"
LOAD:0000000000000580                            offset dword_0, 0>
LOAD:0000000000000598                 Elf64_Sym <offset aFclose+1 - offset byte_A48, 12h, 0, 0, \ ; "close"
LOAD:0000000000000598                            offset dword_0, 0>
LOAD:00000000000005B0                 Elf64_Sym <offset aStrspn - offset byte_A48, 12h, 0, 0, \ ; "strspn"
LOAD:00000000000005B0                            offset dword_0, 0>
LOAD:00000000000005C8                 Elf64_Sym <offset aClosedir - offset byte_A48, 12h, 0, 0, \ ; "closedir"
LOAD:00000000000005C8                            offset dword_0, 0>
LOAD:00000000000005E0                 Elf64_Sym <offset aMemchr - offset byte_A48, 12h, 0, 0, \ ; "memchr"
LOAD:00000000000005E0                            offset dword_0, 0>
LOAD:00000000000005F8                 Elf64_Sym <offset aLibcStartMain - offset byte_A48, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:00000000000005F8                            offset dword_0, 0>
LOAD:0000000000000610                 Elf64_Sym <offset aMemcmp - offset byte_A48, 12h, 0, 0, \ ; "memcmp"
LOAD:0000000000000610                            offset dword_0, 0>
LOAD:0000000000000628                 Elf64_Sym <offset aFputsUnlocked - offset byte_A48, 12h, 0, 0, \ ; "fputs_unlocked"
LOAD:0000000000000628                            offset dword_0, 0>
LOAD:0000000000000640                 Elf64_Sym <offset aCalloc - offset byte_A48, 12h, 0, 0, \ ; "calloc"
LOAD:0000000000000640                            offset dword_0, 0>
LOAD:0000000000000658                 Elf64_Sym <offset aStrcmp - offset byte_A48, 12h, 0, 0, \ ; "strcmp"
LOAD:0000000000000658                            offset dword_0, 0>
LOAD:0000000000000670                 Elf64_Sym <offset aDirfd - offset byte_A48, 12h, 0, 0, offset dword_0,\ ; "dirfd"
LOAD:0000000000000670                            0>
LOAD:0000000000000688                 Elf64_Sym <offset aGmonStart - offset byte_A48, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:0000000000000688                            offset dword_0, 0>
LOAD:00000000000006A0                 Elf64_Sym <offset aMemcpy - offset byte_A48, 12h, 0, 0, \ ; "memcpy"
LOAD:00000000000006A0                            offset dword_0, 0>
LOAD:00000000000006B8                 Elf64_Sym <offset aFileno - offset byte_A48, 12h, 0, 0, \ ; "fileno"
LOAD:00000000000006B8                            offset dword_0, 0>
LOAD:00000000000006D0                 Elf64_Sym <offset aXstat - offset byte_A48, 12h, 0, 0, offset dword_0,\ ; "__xstat"
LOAD:00000000000006D0                            0>
LOAD:00000000000006E8                 Elf64_Sym <offset aReaddir - offset byte_A48, 12h, 0, 0, \ ; "readdir"
LOAD:00000000000006E8                            offset dword_0, 0>
LOAD:0000000000000700                 Elf64_Sym <offset aMalloc - offset byte_A48, 12h, 0, 0, \ ; "malloc"
LOAD:0000000000000700                            offset dword_0, 0>
LOAD:0000000000000718                 Elf64_Sym <offset aFflush - offset byte_A48, 12h, 0, 0, \ ; "fflush"
LOAD:0000000000000718                            offset dword_0, 0>
LOAD:0000000000000730                 Elf64_Sym <offset aNlLanginfo - offset byte_A48, 12h, 0, 0, \ ; "nl_langinfo"
LOAD:0000000000000730                            offset dword_0, 0>
LOAD:0000000000000748                 Elf64_Sym <offset aFxstat - offset byte_A48, 12h, 0, 0, \ ; "__fxstat"
LOAD:0000000000000748                            offset dword_0, 0>
LOAD:0000000000000760                 Elf64_Sym <offset aFreading - offset byte_A48, 12h, 0, 0, \ ; "__freading"
LOAD:0000000000000760                            offset dword_0, 0>
LOAD:0000000000000778                 Elf64_Sym <offset aFchdir - offset byte_A48, 12h, 0, 0, \ ; "fchdir"
LOAD:0000000000000778                            offset dword_0, 0>
LOAD:0000000000000790                 Elf64_Sym <offset aRealloc - offset byte_A48, 12h, 0, 0, \ ; "realloc"
LOAD:0000000000000790                            offset dword_0, 0>
LOAD:00000000000007A8                 Elf64_Sym <offset aSetlocale - offset byte_A48, 12h, 0, 0, \ ; "setlocale"
LOAD:00000000000007A8                            offset dword_0, 0>
LOAD:00000000000007C0                 Elf64_Sym <offset aPrintfChk - offset byte_A48, 12h, 0, 0, \ ; "__printf_chk"
LOAD:00000000000007C0                            offset dword_0, 0>
LOAD:00000000000007D8                 Elf64_Sym <offset aMemmove - offset byte_A48, 12h, 0, 0, \ ; "memmove"
LOAD:00000000000007D8                            offset dword_0, 0>
LOAD:00000000000007F0                 Elf64_Sym <offset aError - offset byte_A48, 12h, 0, 0, offset dword_0,\ ; "error"
LOAD:00000000000007F0                            0>
LOAD:0000000000000808                 Elf64_Sym <offset aMemrchr - offset byte_A48, 12h, 0, 0, \ ; "memrchr"
LOAD:0000000000000808                            offset dword_0, 0>
LOAD:0000000000000820                 Elf64_Sym <offset aOpen - offset byte_A48, 12h, 0, 0, offset dword_0, \ ; "open"
LOAD:0000000000000820                            0>
LOAD:0000000000000838                 Elf64_Sym <offset aAccess - offset byte_A48, 12h, 0, 0, \ ; "access"
LOAD:0000000000000838                            offset dword_0, 0>
LOAD:0000000000000850                 Elf64_Sym <offset aFseeko - offset byte_A48, 12h, 0, 0, \ ; "fseeko"
LOAD:0000000000000850                            offset dword_0, 0>
LOAD:0000000000000868                 Elf64_Sym <offset aFdopendir - offset byte_A48, 12h, 0, 0, \ ; "fdopendir"
LOAD:0000000000000868                            offset dword_0, 0>
LOAD:0000000000000880                 Elf64_Sym <offset aFstatfs - offset byte_A48, 12h, 0, 0, \ ; "fstatfs"
LOAD:0000000000000880                            offset dword_0, 0>
LOAD:0000000000000898                 Elf64_Sym <offset aCxaAtexit - offset byte_A48, 12h, 0, 0, \ ; "__cxa_atexit"
LOAD:0000000000000898                            offset dword_0, 0>
LOAD:00000000000008B0                 Elf64_Sym <offset aExit+1 - offset byte_A48, 12h, 0, 0, \ ; "exit"
LOAD:00000000000008B0                            offset dword_0, 0>
LOAD:00000000000008C8                 Elf64_Sym <offset aFwrite - offset byte_A48, 12h, 0, 0, \ ; "fwrite"
LOAD:00000000000008C8                            offset dword_0, 0>
LOAD:00000000000008E0                 Elf64_Sym <offset aFprintfChk - offset byte_A48, 12h, 0, 0, \ ; "__fprintf_chk"
LOAD:00000000000008E0                            offset dword_0, 0>
LOAD:00000000000008F8                 Elf64_Sym <offset aItmRegistertmc - offset byte_A48, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:00000000000008F8                            offset dword_0, 0>
LOAD:0000000000000910                 Elf64_Sym <offset aMbsinit - offset byte_A48, 12h, 0, 0, \ ; "mbsinit"
LOAD:0000000000000910                            offset dword_0, 0>
LOAD:0000000000000928                 Elf64_Sym <offset aIswprint - offset byte_A48, 12h, 0, 0, \ ; "iswprint"
LOAD:0000000000000928                            offset dword_0, 0>
LOAD:0000000000000940                 Elf64_Sym <offset aCxaFinalize - offset byte_A48, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:0000000000000940                            offset dword_0, 0>
LOAD:0000000000000958                 Elf64_Sym <offset aCtypeBLoc - offset byte_A48, 12h, 0, 0, \ ; "__ctype_b_loc"
LOAD:0000000000000958                            offset dword_0, 0>
LOAD:0000000000000970                 Elf64_Sym <offset aSprintfChk - offset byte_A48, 12h, 0, 0, \ ; "__sprintf_chk"
LOAD:0000000000000970                            offset dword_0, 0>
LOAD:0000000000000988                 Elf64_Sym <offset aStdout - offset byte_A48, 11h, 0, 19h, \ ; "stdout"
LOAD:0000000000000988                            offset stdout@@GLIBC_2_2_5, 8>
LOAD:00000000000009A0                 Elf64_Sym <offset aProgname - offset byte_A48, 11h, 0, 19h, \ ; "__progname"
LOAD:00000000000009A0                            offset __bss_start, 8>
LOAD:00000000000009B8                 Elf64_Sym <offset aProgramInvocat - offset byte_A48, 21h, 0, 19h, \ ; "program_invocation_name"
LOAD:00000000000009B8                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:00000000000009D0                 Elf64_Sym <offset aPrognameFull - offset byte_A48, 11h, 0, 19h, \ ; "__progname_full"
LOAD:00000000000009D0                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:00000000000009E8                 Elf64_Sym <offset aProgramInvocat_0 - offset byte_A48, 21h, 0, 19h, \ ; "program_invocation_short_name"
LOAD:00000000000009E8                            offset __bss_start, 8>
LOAD:0000000000000A00                 Elf64_Sym <offset aStderr - offset byte_A48, 11h, 0, 19h, \ ; "stderr"
LOAD:0000000000000A00                            offset stderr@@GLIBC_2_2_5, 8>
LOAD:0000000000000A18                 Elf64_Sym <offset aOptind - offset byte_A48, 11h, 0, 19h, \ ; "optind"
LOAD:0000000000000A18                            offset optind@@GLIBC_2_2_5, 4>
LOAD:0000000000000A30                 Elf64_Sym <offset aOptarg - offset byte_A48, 11h, 0, 19h, \ ; "optarg"
LOAD:0000000000000A30                            offset optarg@@GLIBC_2_2_5, 8>
LOAD:0000000000000A48 ; ELF String Table
LOAD:0000000000000A48 byte_A48        db 0                    ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000A48                                         ; LOAD:0000000000000310↑o ...
LOAD:0000000000000A49 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000000E28↓o
LOAD:0000000000000A53 aFflush         db 'fflush',0           ; DATA XREF: LOAD:0000000000000718↑o
LOAD:0000000000000A5A aStrcpy         db 'strcpy',0           ; DATA XREF: LOAD:0000000000000388↑o
LOAD:0000000000000A61 aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:00000000000007C0↑o
LOAD:0000000000000A6E aReaddir        db 'readdir',0          ; DATA XREF: LOAD:00000000000006E8↑o
LOAD:0000000000000A76 aSetlocale      db 'setlocale',0        ; DATA XREF: LOAD:00000000000007A8↑o
LOAD:0000000000000A80 aMbrtowc        db 'mbrtowc',0          ; DATA XREF: LOAD:00000000000004F0↑o
LOAD:0000000000000A88 aStrncmp        db 'strncmp',0          ; DATA XREF: LOAD:0000000000000340↑o
LOAD:0000000000000A90 aOptind         db 'optind',0           ; DATA XREF: LOAD:0000000000000A18↑o
LOAD:0000000000000A97 aStrrchr        db 'strrchr',0          ; DATA XREF: LOAD:0000000000000520↑o
LOAD:0000000000000A9F aDcgettext      db 'dcgettext',0        ; DATA XREF: LOAD:0000000000000430↑o
LOAD:0000000000000AA9 aClosedir       db 'closedir',0         ; DATA XREF: LOAD:00000000000005C8↑o
LOAD:0000000000000AB2 aFchdir         db 'fchdir',0           ; DATA XREF: LOAD:0000000000000778↑o
LOAD:0000000000000AB2                                         ; LOAD:00000000000004A8↑o
LOAD:0000000000000AB9 aError          db 'error',0            ; DATA XREF: LOAD:00000000000007F0↑o
LOAD:0000000000000ABF aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:00000000000004C0↑o
LOAD:0000000000000AD0 aLxstat         db '__lxstat',0         ; DATA XREF: LOAD:0000000000000478↑o
LOAD:0000000000000AD9 aIswprint       db 'iswprint',0         ; DATA XREF: LOAD:0000000000000928↑o
LOAD:0000000000000AE2 aRealloc        db 'realloc',0          ; DATA XREF: LOAD:0000000000000790↑o
LOAD:0000000000000AEA aFstatfs        db 'fstatfs',0          ; DATA XREF: LOAD:0000000000000880↑o
LOAD:0000000000000AF2 aAbort          db 'abort',0            ; DATA XREF: LOAD:0000000000000310↑o
LOAD:0000000000000AF8 aExit           db '_exit',0            ; DATA XREF: LOAD:0000000000000370↑o
LOAD:0000000000000AF8                                         ; LOAD:00000000000008B0↑o
LOAD:0000000000000AFE aMemchr         db 'memchr',0           ; DATA XREF: LOAD:00000000000005E0↑o
LOAD:0000000000000B05 aMemrchr        db 'memrchr',0          ; DATA XREF: LOAD:0000000000000808↑o
LOAD:0000000000000B0D aStrspn         db 'strspn',0           ; DATA XREF: LOAD:00000000000005B0↑o
LOAD:0000000000000B14 aProgramInvocat db 'program_invocation_name',0
LOAD:0000000000000B14                                         ; DATA XREF: LOAD:00000000000009B8↑o
LOAD:0000000000000B2C aAssertFail     db '__assert_fail',0    ; DATA XREF: LOAD:0000000000000550↑o
LOAD:0000000000000B3A aCtypeGetMbCurM db '__ctype_get_mb_cur_max',0
LOAD:0000000000000B3A                                         ; DATA XREF: LOAD:0000000000000448↑o
LOAD:0000000000000B51 aCalloc         db 'calloc',0           ; DATA XREF: LOAD:0000000000000640↑o
LOAD:0000000000000B58 aStrlen         db 'strlen',0           ; DATA XREF: LOAD:0000000000000460↑o
LOAD:0000000000000B5F aMemset         db 'memset',0           ; DATA XREF: LOAD:0000000000000568↑o
LOAD:0000000000000B66 aErrnoLocation  db '__errno_location',0 ; DATA XREF: LOAD:0000000000000328↑o
LOAD:0000000000000B77 aMemcmp         db 'memcmp',0           ; DATA XREF: LOAD:0000000000000610↑o
LOAD:0000000000000B7E aFprintfChk     db '__fprintf_chk',0    ; DATA XREF: LOAD:00000000000008E0↑o
LOAD:0000000000000B8C aStdout         db 'stdout',0           ; DATA XREF: LOAD:0000000000000988↑o
LOAD:0000000000000B93 aLseek          db 'lseek',0            ; DATA XREF: LOAD:0000000000000538↑o
LOAD:0000000000000B99 aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:00000000000006A0↑o
LOAD:0000000000000BA0 aFclose         db 'fclose',0           ; DATA XREF: LOAD:0000000000000400↑o
LOAD:0000000000000BA0                                         ; LOAD:0000000000000598↑o
LOAD:0000000000000BA7 aMalloc         db 'malloc',0           ; DATA XREF: LOAD:0000000000000700↑o
LOAD:0000000000000BAE aFdopendir      db 'fdopendir',0        ; DATA XREF: LOAD:0000000000000868↑o
LOAD:0000000000000BB8 aMbsinit        db 'mbsinit',0          ; DATA XREF: LOAD:0000000000000910↑o
LOAD:0000000000000BC0 aNlLanginfo     db 'nl_langinfo',0      ; DATA XREF: LOAD:0000000000000730↑o
LOAD:0000000000000BCC aCtypeBLoc      db '__ctype_b_loc',0    ; DATA XREF: LOAD:0000000000000958↑o
LOAD:0000000000000BDA aOptarg         db 'optarg',0           ; DATA XREF: LOAD:0000000000000A30↑o
LOAD:0000000000000BE1 aFreading       db '__freading',0       ; DATA XREF: LOAD:0000000000000760↑o
LOAD:0000000000000BEC aStderr         db 'stderr',0           ; DATA XREF: LOAD:0000000000000A00↑o
LOAD:0000000000000BF3 aGetoptLong     db 'getopt_long',0      ; DATA XREF: LOAD:00000000000004D8↑o
LOAD:0000000000000BFF aFxstat         db '__fxstat',0         ; DATA XREF: LOAD:0000000000000748↑o
LOAD:0000000000000C08 aFileno         db 'fileno',0           ; DATA XREF: LOAD:00000000000006B8↑o
LOAD:0000000000000C0F aGetcwd         db 'getcwd',0           ; DATA XREF: LOAD:0000000000000580↑o
LOAD:0000000000000C16 aFwrite         db 'fwrite',0           ; DATA XREF: LOAD:00000000000008C8↑o
LOAD:0000000000000C1D aFpending       db '__fpending',0       ; DATA XREF: LOAD:00000000000003A0↑o
LOAD:0000000000000C28 aOpen           db 'open',0             ; DATA XREF: LOAD:0000000000000820↑o
LOAD:0000000000000C2D aProgramInvocat_0 db 'program_invocation_short_name',0
LOAD:0000000000000C2D                                         ; DATA XREF: LOAD:00000000000009E8↑o
LOAD:0000000000000C4B aQsort          db 'qsort',0            ; DATA XREF: LOAD:00000000000003B8↑o
LOAD:0000000000000C51 aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:0000000000000940↑o
LOAD:0000000000000C60 aFcntl          db 'fcntl',0            ; DATA XREF: LOAD:00000000000003D0↑o
LOAD:0000000000000C66 aSprintfChk     db '__sprintf_chk',0    ; DATA XREF: LOAD:0000000000000970↑o
LOAD:0000000000000C74 aOpenat         db 'openat',0           ; DATA XREF: LOAD:0000000000000490↑o
LOAD:0000000000000C7B aXstat          db '__xstat',0          ; DATA XREF: LOAD:00000000000006D0↑o
LOAD:0000000000000C83 aMemmove        db 'memmove',0          ; DATA XREF: LOAD:00000000000007D8↑o
LOAD:0000000000000C8B aBindtextdomain db 'bindtextdomain',0   ; DATA XREF: LOAD:0000000000000418↑o
LOAD:0000000000000C8B                                         ; LOAD:00000000000003E8↑o
LOAD:0000000000000C9A aAccess         db 'access',0           ; DATA XREF: LOAD:0000000000000838↑o
LOAD:0000000000000CA1 aFxstatat       db '__fxstatat',0       ; DATA XREF: LOAD:0000000000000508↑o
LOAD:0000000000000CAC aStrcmp         db 'strcmp',0           ; DATA XREF: LOAD:0000000000000658↑o
LOAD:0000000000000CB3 aLibcStartMain  db '__libc_start_main',0
LOAD:0000000000000CB3                                         ; DATA XREF: LOAD:00000000000005F8↑o
LOAD:0000000000000CC5 aDirfd          db 'dirfd',0            ; DATA XREF: LOAD:0000000000000670↑o
LOAD:0000000000000CCB aFseeko         db 'fseeko',0           ; DATA XREF: LOAD:0000000000000850↑o
LOAD:0000000000000CD2 aFputsUnlocked  db 'fputs_unlocked',0   ; DATA XREF: LOAD:0000000000000628↑o
LOAD:0000000000000CE1 aFree           db 'free',0             ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000CE6 aProgname       db '__progname',0       ; DATA XREF: LOAD:00000000000009A0↑o
LOAD:0000000000000CF1 aPrognameFull   db '__progname_full',0  ; DATA XREF: LOAD:00000000000009D0↑o
LOAD:0000000000000D01 aCxaAtexit      db '__cxa_atexit',0     ; DATA XREF: LOAD:0000000000000898↑o
LOAD:0000000000000D0E aGlibc23        db 'GLIBC_2.3',0        ; DATA XREF: LOAD:0000000000000E38↓o
LOAD:0000000000000D18 aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000000E48↓o
LOAD:0000000000000D24 aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:0000000000000E58↓o
LOAD:0000000000000D2F aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000000E68↓o
LOAD:0000000000000D39 aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000000E78↓o
LOAD:0000000000000D45 aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:0000000000000D45                                         ; DATA XREF: LOAD:0000000000000358↑o
LOAD:0000000000000D61 aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:0000000000000688↑o
LOAD:0000000000000D70 aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:0000000000000D70                                         ; DATA XREF: LOAD:00000000000008F8↑o
LOAD:0000000000000D8A ; ELF GNU Symbol Version Table
LOAD:0000000000000D8A                 dw 0
LOAD:0000000000000D8C                 dw 2                    ; free@@GLIBC_2.2.5
LOAD:0000000000000D8E                 dw 2                    ; abort@@GLIBC_2.2.5
LOAD:0000000000000D90                 dw 2                    ; __errno_location@@GLIBC_2.2.5
LOAD:0000000000000D92                 dw 2                    ; strncmp@@GLIBC_2.2.5
LOAD:0000000000000D94                 dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
LOAD:0000000000000D96                 dw 2                    ; _exit@@GLIBC_2.2.5
LOAD:0000000000000D98                 dw 2                    ; strcpy@@GLIBC_2.2.5
LOAD:0000000000000D9A                 dw 2                    ; __fpending@@GLIBC_2.2.5
LOAD:0000000000000D9C                 dw 2                    ; qsort@@GLIBC_2.2.5
LOAD:0000000000000D9E                 dw 2                    ; fcntl@@GLIBC_2.2.5
LOAD:0000000000000DA0                 dw 2                    ; textdomain@@GLIBC_2.2.5
LOAD:0000000000000DA2                 dw 2                    ; fclose@@GLIBC_2.2.5
LOAD:0000000000000DA4                 dw 2                    ; bindtextdomain@@GLIBC_2.2.5
LOAD:0000000000000DA6                 dw 2                    ; dcgettext@@GLIBC_2.2.5
LOAD:0000000000000DA8                 dw 2                    ; __ctype_get_mb_cur_max@@GLIBC_2.2.5
LOAD:0000000000000DAA                 dw 2                    ; strlen@@GLIBC_2.2.5
LOAD:0000000000000DAC                 dw 2                    ; __lxstat@@GLIBC_2.2.5
LOAD:0000000000000DAE                 dw 3                    ; openat@@GLIBC_2.4
LOAD:0000000000000DB0                 dw 2                    ; chdir@@GLIBC_2.2.5
LOAD:0000000000000DB2                 dw 3                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:0000000000000DB4                 dw 2                    ; getopt_long@@GLIBC_2.2.5
LOAD:0000000000000DB6                 dw 2                    ; mbrtowc@@GLIBC_2.2.5
LOAD:0000000000000DB8                 dw 3                    ; __fxstatat@@GLIBC_2.4
LOAD:0000000000000DBA                 dw 2                    ; strrchr@@GLIBC_2.2.5
LOAD:0000000000000DBC                 dw 2                    ; lseek@@GLIBC_2.2.5
LOAD:0000000000000DBE                 dw 2                    ; __assert_fail@@GLIBC_2.2.5
LOAD:0000000000000DC0                 dw 2                    ; memset@@GLIBC_2.2.5
LOAD:0000000000000DC2                 dw 2                    ; getcwd@@GLIBC_2.2.5
LOAD:0000000000000DC4                 dw 2                    ; close@@GLIBC_2.2.5
LOAD:0000000000000DC6                 dw 2                    ; strspn@@GLIBC_2.2.5
LOAD:0000000000000DC8                 dw 2                    ; closedir@@GLIBC_2.2.5
LOAD:0000000000000DCA                 dw 2                    ; memchr@@GLIBC_2.2.5
LOAD:0000000000000DCC                 dw 2                    ; __libc_start_main@@GLIBC_2.2.5
LOAD:0000000000000DCE                 dw 2                    ; memcmp@@GLIBC_2.2.5
LOAD:0000000000000DD0                 dw 2                    ; fputs_unlocked@@GLIBC_2.2.5
LOAD:0000000000000DD2                 dw 2                    ; calloc@@GLIBC_2.2.5
LOAD:0000000000000DD4                 dw 2                    ; strcmp@@GLIBC_2.2.5
LOAD:0000000000000DD6                 dw 2                    ; dirfd@@GLIBC_2.2.5
LOAD:0000000000000DD8                 dw 0                    ; local  symbol: __gmon_start__
LOAD:0000000000000DDA                 dw 4                    ; memcpy@@GLIBC_2.14
LOAD:0000000000000DDC                 dw 2                    ; fileno@@GLIBC_2.2.5
LOAD:0000000000000DDE                 dw 2                    ; __xstat@@GLIBC_2.2.5
LOAD:0000000000000DE0                 dw 2                    ; readdir@@GLIBC_2.2.5
LOAD:0000000000000DE2                 dw 2                    ; malloc@@GLIBC_2.2.5
LOAD:0000000000000DE4                 dw 2                    ; fflush@@GLIBC_2.2.5
LOAD:0000000000000DE6                 dw 2                    ; nl_langinfo@@GLIBC_2.2.5
LOAD:0000000000000DE8                 dw 2                    ; __fxstat@@GLIBC_2.2.5
LOAD:0000000000000DEA                 dw 2                    ; __freading@@GLIBC_2.2.5
LOAD:0000000000000DEC                 dw 2                    ; fchdir@@GLIBC_2.2.5
LOAD:0000000000000DEE                 dw 2                    ; realloc@@GLIBC_2.2.5
LOAD:0000000000000DF0                 dw 2                    ; setlocale@@GLIBC_2.2.5
LOAD:0000000000000DF2                 dw 5                    ; __printf_chk@@GLIBC_2.3.4
LOAD:0000000000000DF4                 dw 2                    ; memmove@@GLIBC_2.2.5
LOAD:0000000000000DF6                 dw 2                    ; error@@GLIBC_2.2.5
LOAD:0000000000000DF8                 dw 2                    ; memrchr@@GLIBC_2.2.5
LOAD:0000000000000DFA                 dw 2                    ; open@@GLIBC_2.2.5
LOAD:0000000000000DFC                 dw 2                    ; access@@GLIBC_2.2.5
LOAD:0000000000000DFE                 dw 2                    ; fseeko@@GLIBC_2.2.5
LOAD:0000000000000E00                 dw 3                    ; fdopendir@@GLIBC_2.4
LOAD:0000000000000E02                 dw 2                    ; fstatfs@@GLIBC_2.2.5
LOAD:0000000000000E04                 dw 2                    ; __cxa_atexit@@GLIBC_2.2.5
LOAD:0000000000000E06                 dw 2                    ; exit@@GLIBC_2.2.5
LOAD:0000000000000E08                 dw 2                    ; fwrite@@GLIBC_2.2.5
LOAD:0000000000000E0A                 dw 5                    ; __fprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000E0C                 dw 0                    ; local  symbol: _ITM_registerTMCloneTable
LOAD:0000000000000E0E                 dw 2                    ; mbsinit@@GLIBC_2.2.5
LOAD:0000000000000E10                 dw 2                    ; iswprint@@GLIBC_2.2.5
LOAD:0000000000000E12                 dw 2                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:0000000000000E14                 dw 6                    ; __ctype_b_loc@@GLIBC_2.3
LOAD:0000000000000E16                 dw 5                    ; __sprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000E18                 dw 2                    ; stdout@@GLIBC_2.2.5
LOAD:0000000000000E1A                 dw 2                    ; __progname@@GLIBC_2.2.5
LOAD:0000000000000E1C                 dw 2                    ; program_invocation_name@@GLIBC_2.2.5
LOAD:0000000000000E1E                 dw 2                    ; __progname_full@@GLIBC_2.2.5
LOAD:0000000000000E20                 dw 2                    ; program_invocation_short_name@@GLIBC_2.2.5
LOAD:0000000000000E22                 dw 2                    ; stderr@@GLIBC_2.2.5
LOAD:0000000000000E24                 dw 2                    ; optind@@GLIBC_2.2.5
LOAD:0000000000000E26                 dw 2                    ; optarg@@GLIBC_2.2.5
LOAD:0000000000000E28 ; ELF GNU Symbol Version Requirements
LOAD:0000000000000E28                 Elf64_Verneed <1, 5, offset aLibcSo6 - offset byte_A48, 10h, 0> ; "libc.so.6"
LOAD:0000000000000E38                 Elf64_Vernaux <0D696913h, 0, 6, offset aGlibc23 - offset byte_A48, \ ; "GLIBC_2.3"
LOAD:0000000000000E38                                10h>
LOAD:0000000000000E48                 Elf64_Vernaux <9691974h, 0, 5, offset aGlibc234 - offset byte_A48, \ ; "GLIBC_2.3.4"
LOAD:0000000000000E48                                10h>
LOAD:0000000000000E58                 Elf64_Vernaux <6969194h, 0, 4, offset aGlibc214 - offset byte_A48, \ ; "GLIBC_2.14"
LOAD:0000000000000E58                                10h>
LOAD:0000000000000E68                 Elf64_Vernaux <0D696914h, 0, 3, offset aGlibc24 - offset byte_A48, \ ; "GLIBC_2.4"
LOAD:0000000000000E68                                10h>
LOAD:0000000000000E78                 Elf64_Vernaux <9691A75h, 0, 2, offset aGlibc225 - offset byte_A48, 0> ; "GLIBC_2.2.5"
LOAD:0000000000000E88 ; ELF RELA Relocation Table
LOAD:0000000000000E88                 Elf64_Rela <20D990h, 8, 2890h> ; R_X86_64_RELATIVE +2890h
LOAD:0000000000000EA0                 Elf64_Rela <20D998h, 8, 2850h> ; R_X86_64_RELATIVE +2850h
LOAD:0000000000000EB8                 Elf64_Rela <20D9A0h, 8, 9D49h> ; R_X86_64_RELATIVE +9D49h
LOAD:0000000000000ED0                 Elf64_Rela <20D9C0h, 8, 9D56h> ; R_X86_64_RELATIVE +9D56h
LOAD:0000000000000EE8                 Elf64_Rela <20D9E0h, 8, 9D53h> ; R_X86_64_RELATIVE +9D53h
LOAD:0000000000000F00                 Elf64_Rela <20DA00h, 8, 9D62h> ; R_X86_64_RELATIVE +9D62h
LOAD:0000000000000F18                 Elf64_Rela <20DA20h, 8, 9D65h> ; R_X86_64_RELATIVE +9D65h
LOAD:0000000000000F30                 Elf64_Rela <20DA40h, 8, 9D58h> ; R_X86_64_RELATIVE +9D58h
LOAD:0000000000000F48                 Elf64_Rela <20DA60h, 8, 9D73h> ; R_X86_64_RELATIVE +9D73h
LOAD:0000000000000F60                 Elf64_Rela <20DA80h, 8, 9D78h> ; R_X86_64_RELATIVE +9D78h
LOAD:0000000000000F78                 Elf64_Rela <20DAA0h, 8, 9D7Dh> ; R_X86_64_RELATIVE +9D7Dh
LOAD:0000000000000F90                 Elf64_Rela <20DAC0h, 8, 9D82h> ; R_X86_64_RELATIVE +9D82h
LOAD:0000000000000FA8                 Elf64_Rela <20DAE0h, 8, 9D88h> ; R_X86_64_RELATIVE +9D88h
LOAD:0000000000000FC0                 Elf64_Rela <20DB00h, 8, 9D90h> ; R_X86_64_RELATIVE +9D90h
LOAD:0000000000000FD8                 Elf64_Rela <20DB20h, 8, 9D95h> ; R_X86_64_RELATIVE +9D95h
LOAD:0000000000000FF0                 Elf64_Rela <20DB60h, 8, 0A8EFh> ; R_X86_64_RELATIVE +0A8EFh
LOAD:0000000000001008                 Elf64_Rela <20DB68h, 8, 0A8F7h> ; R_X86_64_RELATIVE +0A8F7h
LOAD:0000000000001020                 Elf64_Rela <20DB70h, 8, 0A8FDh> ; R_X86_64_RELATIVE +0A8FDh
LOAD:0000000000001038                 Elf64_Rela <20DB78h, 8, 0A90Ah> ; R_X86_64_RELATIVE +0A90Ah
LOAD:0000000000001050                 Elf64_Rela <20DB80h, 8, 0A917h> ; R_X86_64_RELATIVE +0A917h
LOAD:0000000000001068                 Elf64_Rela <20DB88h, 8, 0B13Bh> ; R_X86_64_RELATIVE +0B13Bh
LOAD:0000000000001080                 Elf64_Rela <20DB90h, 8, 0A92Bh> ; R_X86_64_RELATIVE +0A92Bh
LOAD:0000000000001098                 Elf64_Rela <20DB98h, 8, 0A910h> ; R_X86_64_RELATIVE +0A910h
LOAD:00000000000010B0                 Elf64_Rela <20DBA0h, 8, 9C7Eh> ; R_X86_64_RELATIVE +9C7Eh
LOAD:00000000000010C8                 Elf64_Rela <20DBA8h, 8, 0A933h> ; R_X86_64_RELATIVE +0A933h
LOAD:00000000000010E0                 Elf64_Rela <20E008h, 8, 20E008h> ; R_X86_64_RELATIVE +20E008h
LOAD:00000000000010F8                 Elf64_Rela <20E010h, 8, 0A87Ch> ; R_X86_64_RELATIVE +0A87Ch
LOAD:0000000000001110                 Elf64_Rela <20E060h, 8, 20E070h> ; R_X86_64_RELATIVE +20E070h
LOAD:0000000000001128                 Elf64_Rela <20E078h, 8, 20E120h> ; R_X86_64_RELATIVE +20E120h
LOAD:0000000000001140                 Elf64_Rela <20DFC0h, 100000006h, 0> ; R_X86_64_GLOB_DAT free
LOAD:0000000000001158                 Elf64_Rela <20DFC8h, 500000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:0000000000001170                 Elf64_Rela <20DFD0h, 2100000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:0000000000001188                 Elf64_Rela <20DFD8h, 2700000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:00000000000011A0                 Elf64_Rela <20DFE0h, 4100000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:00000000000011B8                 Elf64_Rela <20DFE8h, 4400000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:00000000000011D0                 Elf64_Rela <20E080h, 4800000005h, 0> ; R_X86_64_COPY __progname
LOAD:00000000000011E8                 Elf64_Rela <20E088h, 4700000005h, 0> ; R_X86_64_COPY stdout
LOAD:0000000000001200                 Elf64_Rela <20E090h, 4D00000005h, 0> ; R_X86_64_COPY optind
LOAD:0000000000001218                 Elf64_Rela <20E098h, 4E00000005h, 0> ; R_X86_64_COPY optarg
LOAD:0000000000001230                 Elf64_Rela <20E0A0h, 4A00000005h, 0> ; R_X86_64_COPY __progname_full
LOAD:0000000000001248                 Elf64_Rela <20E0C0h, 4C00000005h, 0> ; R_X86_64_COPY stderr
LOAD:0000000000001260 ; ELF JMPREL Relocation Table
LOAD:0000000000001260                 Elf64_Rela <20DDC0h, 200000007h, 0> ; R_X86_64_JUMP_SLOT abort
LOAD:0000000000001278                 Elf64_Rela <20DDC8h, 300000007h, 0> ; R_X86_64_JUMP_SLOT __errno_location
LOAD:0000000000001290                 Elf64_Rela <20DDD0h, 400000007h, 0> ; R_X86_64_JUMP_SLOT strncmp
LOAD:00000000000012A8                 Elf64_Rela <20DDD8h, 600000007h, 0> ; R_X86_64_JUMP_SLOT _exit
LOAD:00000000000012C0                 Elf64_Rela <20DDE0h, 700000007h, 0> ; R_X86_64_JUMP_SLOT strcpy
LOAD:00000000000012D8                 Elf64_Rela <20DDE8h, 800000007h, 0> ; R_X86_64_JUMP_SLOT __fpending
LOAD:00000000000012F0                 Elf64_Rela <20DDF0h, 900000007h, 0> ; R_X86_64_JUMP_SLOT qsort
LOAD:0000000000001308                 Elf64_Rela <20DDF8h, 0A00000007h, 0> ; R_X86_64_JUMP_SLOT fcntl
LOAD:0000000000001320                 Elf64_Rela <20DE00h, 0B00000007h, 0> ; R_X86_64_JUMP_SLOT textdomain
LOAD:0000000000001338                 Elf64_Rela <20DE08h, 0C00000007h, 0> ; R_X86_64_JUMP_SLOT fclose
LOAD:0000000000001350                 Elf64_Rela <20DE10h, 0D00000007h, 0> ; R_X86_64_JUMP_SLOT bindtextdomain
LOAD:0000000000001368                 Elf64_Rela <20DE18h, 0E00000007h, 0> ; R_X86_64_JUMP_SLOT dcgettext
LOAD:0000000000001380                 Elf64_Rela <20DE20h, 0F00000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_get_mb_cur_max
LOAD:0000000000001398                 Elf64_Rela <20DE28h, 1000000007h, 0> ; R_X86_64_JUMP_SLOT strlen
LOAD:00000000000013B0                 Elf64_Rela <20DE30h, 1100000007h, 0> ; R_X86_64_JUMP_SLOT __lxstat
LOAD:00000000000013C8                 Elf64_Rela <20DE38h, 1200000007h, 0> ; R_X86_64_JUMP_SLOT openat
LOAD:00000000000013E0                 Elf64_Rela <20DE40h, 1300000007h, 0> ; R_X86_64_JUMP_SLOT chdir
LOAD:00000000000013F8                 Elf64_Rela <20DE48h, 1400000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
LOAD:0000000000001410                 Elf64_Rela <20DE50h, 1500000007h, 0> ; R_X86_64_JUMP_SLOT getopt_long
LOAD:0000000000001428                 Elf64_Rela <20DE58h, 1600000007h, 0> ; R_X86_64_JUMP_SLOT mbrtowc
LOAD:0000000000001440                 Elf64_Rela <20DE60h, 1700000007h, 0> ; R_X86_64_JUMP_SLOT __fxstatat
LOAD:0000000000001458                 Elf64_Rela <20DE68h, 1800000007h, 0> ; R_X86_64_JUMP_SLOT strrchr
LOAD:0000000000001470                 Elf64_Rela <20DE70h, 1900000007h, 0> ; R_X86_64_JUMP_SLOT lseek
LOAD:0000000000001488                 Elf64_Rela <20DE78h, 1A00000007h, 0> ; R_X86_64_JUMP_SLOT __assert_fail
LOAD:00000000000014A0                 Elf64_Rela <20DE80h, 1B00000007h, 0> ; R_X86_64_JUMP_SLOT memset
LOAD:00000000000014B8                 Elf64_Rela <20DE88h, 1C00000007h, 0> ; R_X86_64_JUMP_SLOT getcwd
LOAD:00000000000014D0                 Elf64_Rela <20DE90h, 1D00000007h, 0> ; R_X86_64_JUMP_SLOT close
LOAD:00000000000014E8                 Elf64_Rela <20DE98h, 1E00000007h, 0> ; R_X86_64_JUMP_SLOT strspn
LOAD:0000000000001500                 Elf64_Rela <20DEA0h, 1F00000007h, 0> ; R_X86_64_JUMP_SLOT closedir
LOAD:0000000000001518                 Elf64_Rela <20DEA8h, 2000000007h, 0> ; R_X86_64_JUMP_SLOT memchr
LOAD:0000000000001530                 Elf64_Rela <20DEB0h, 2200000007h, 0> ; R_X86_64_JUMP_SLOT memcmp
LOAD:0000000000001548                 Elf64_Rela <20DEB8h, 2300000007h, 0> ; R_X86_64_JUMP_SLOT fputs_unlocked
LOAD:0000000000001560                 Elf64_Rela <20DEC0h, 2400000007h, 0> ; R_X86_64_JUMP_SLOT calloc
LOAD:0000000000001578                 Elf64_Rela <20DEC8h, 2500000007h, 0> ; R_X86_64_JUMP_SLOT strcmp
LOAD:0000000000001590                 Elf64_Rela <20DED0h, 2600000007h, 0> ; R_X86_64_JUMP_SLOT dirfd
LOAD:00000000000015A8                 Elf64_Rela <20DED8h, 2800000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
LOAD:00000000000015C0                 Elf64_Rela <20DEE0h, 2900000007h, 0> ; R_X86_64_JUMP_SLOT fileno
LOAD:00000000000015D8                 Elf64_Rela <20DEE8h, 2A00000007h, 0> ; R_X86_64_JUMP_SLOT __xstat
LOAD:00000000000015F0                 Elf64_Rela <20DEF0h, 2B00000007h, 0> ; R_X86_64_JUMP_SLOT readdir
LOAD:0000000000001608                 Elf64_Rela <20DEF8h, 2C00000007h, 0> ; R_X86_64_JUMP_SLOT malloc
LOAD:0000000000001620                 Elf64_Rela <20DF00h, 2D00000007h, 0> ; R_X86_64_JUMP_SLOT fflush
LOAD:0000000000001638                 Elf64_Rela <20DF08h, 2E00000007h, 0> ; R_X86_64_JUMP_SLOT nl_langinfo
LOAD:0000000000001650                 Elf64_Rela <20DF10h, 2F00000007h, 0> ; R_X86_64_JUMP_SLOT __fxstat
LOAD:0000000000001668                 Elf64_Rela <20DF18h, 3000000007h, 0> ; R_X86_64_JUMP_SLOT __freading
LOAD:0000000000001680                 Elf64_Rela <20DF20h, 3100000007h, 0> ; R_X86_64_JUMP_SLOT fchdir
LOAD:0000000000001698                 Elf64_Rela <20DF28h, 3200000007h, 0> ; R_X86_64_JUMP_SLOT realloc
LOAD:00000000000016B0                 Elf64_Rela <20DF30h, 3300000007h, 0> ; R_X86_64_JUMP_SLOT setlocale
LOAD:00000000000016C8                 Elf64_Rela <20DF38h, 3400000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
LOAD:00000000000016E0                 Elf64_Rela <20DF40h, 3500000007h, 0> ; R_X86_64_JUMP_SLOT memmove
LOAD:00000000000016F8                 Elf64_Rela <20DF48h, 3600000007h, 0> ; R_X86_64_JUMP_SLOT error
LOAD:0000000000001710                 Elf64_Rela <20DF50h, 3700000007h, 0> ; R_X86_64_JUMP_SLOT memrchr
LOAD:0000000000001728                 Elf64_Rela <20DF58h, 3800000007h, 0> ; R_X86_64_JUMP_SLOT open
LOAD:0000000000001740                 Elf64_Rela <20DF60h, 3900000007h, 0> ; R_X86_64_JUMP_SLOT access
LOAD:0000000000001758                 Elf64_Rela <20DF68h, 3A00000007h, 0> ; R_X86_64_JUMP_SLOT fseeko
LOAD:0000000000001770                 Elf64_Rela <20DF70h, 3B00000007h, 0> ; R_X86_64_JUMP_SLOT fdopendir
LOAD:0000000000001788                 Elf64_Rela <20DF78h, 3C00000007h, 0> ; R_X86_64_JUMP_SLOT fstatfs
LOAD:00000000000017A0                 Elf64_Rela <20DF80h, 3D00000007h, 0> ; R_X86_64_JUMP_SLOT __cxa_atexit
LOAD:00000000000017B8                 Elf64_Rela <20DF88h, 3E00000007h, 0> ; R_X86_64_JUMP_SLOT exit
LOAD:00000000000017D0                 Elf64_Rela <20DF90h, 3F00000007h, 0> ; R_X86_64_JUMP_SLOT fwrite
LOAD:00000000000017E8                 Elf64_Rela <20DF98h, 4000000007h, 0> ; R_X86_64_JUMP_SLOT __fprintf_chk
LOAD:0000000000001800                 Elf64_Rela <20DFA0h, 4200000007h, 0> ; R_X86_64_JUMP_SLOT mbsinit
LOAD:0000000000001818                 Elf64_Rela <20DFA8h, 4300000007h, 0> ; R_X86_64_JUMP_SLOT iswprint
LOAD:0000000000001830                 Elf64_Rela <20DFB0h, 4500000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_b_loc
LOAD:0000000000001848                 Elf64_Rela <20DFB8h, 4600000007h, 0> ; R_X86_64_JUMP_SLOT __sprintf_chk
LOAD:0000000000001848 LOAD            ends
LOAD:0000000000001848
.init:0000000000001860 ; ===========================================================================
.init:0000000000001860
.init:0000000000001860 ; Segment type: Pure code
.init:0000000000001860 ; Segment permissions: Read/Execute
.init:0000000000001860 _init           segment dword public 'CODE' use64
.init:0000000000001860                 assume cs:_init
.init:0000000000001860                 ;org 1860h
.init:0000000000001860                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:0000000000001860
.init:0000000000001860 ; =============== S U B R O U T I N E =======================================
.init:0000000000001860
.init:0000000000001860
.init:0000000000001860                 public _init_proc
.init:0000000000001860 _init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
.init:0000000000001860                 sub     rsp, 8          ; _init
.init:0000000000001864                 mov     rax, cs:__gmon_start___ptr
.init:000000000000186B                 test    rax, rax
.init:000000000000186E                 jz      short loc_1872
.init:0000000000001870                 call    rax ; __gmon_start__
.init:0000000000001872
.init:0000000000001872 loc_1872:                               ; CODE XREF: _init_proc+E↑j
.init:0000000000001872                 add     rsp, 8
.init:0000000000001876                 retn
.init:0000000000001876 _init_proc      endp
.init:0000000000001876
.init:0000000000001876 _init           ends
.init:0000000000001876
LOAD:0000000000001877 ; ===========================================================================
LOAD:0000000000001877
LOAD:0000000000001877 ; Segment type: Pure code
LOAD:0000000000001877 ; Segment permissions: Read/Execute
LOAD:0000000000001877 LOAD            segment byte public 'CODE' use64
LOAD:0000000000001877                 assume cs:LOAD
LOAD:0000000000001877                 ;org 1877h
LOAD:0000000000001877                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000001877                 align 20h
LOAD:0000000000001877 LOAD            ends
LOAD:0000000000001877
.plt:0000000000001880 ; ===========================================================================
.plt:0000000000001880
.plt:0000000000001880 ; Segment type: Pure code
.plt:0000000000001880 ; Segment permissions: Read/Execute
.plt:0000000000001880 _plt            segment para public 'CODE' use64
.plt:0000000000001880                 assume cs:_plt
.plt:0000000000001880                 ;org 1880h
.plt:0000000000001880                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:0000000000001880
.plt:0000000000001880 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001880
.plt:0000000000001880
.plt:0000000000001880 sub_1880        proc near               ; CODE XREF: .plt:000000000000189B↓j
.plt:0000000000001880                                         ; .plt:00000000000018AB↓j ...
.plt:0000000000001880 ; __unwind {
.plt:0000000000001880                 push    cs:qword_20DDB0
.plt:0000000000001886                 jmp     cs:qword_20DDB8
.plt:0000000000001886 sub_1880        endp
.plt:0000000000001886
.plt:0000000000001886 ; ---------------------------------------------------------------------------
.plt:000000000000188C                 align 10h
.plt:0000000000001890
.plt:0000000000001890 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001890
.plt:0000000000001890 ; Attributes: noreturn thunk
.plt:0000000000001890
.plt:0000000000001890 ; void __noreturn abort(void)
.plt:0000000000001890 _abort          proc near               ; CODE XREF: set_program_name+9A↓p
.plt:0000000000001890                                         ; quotearg_buffer_restyled:def_3001↓p ...
.plt:0000000000001890                 jmp     cs:abort_ptr
.plt:0000000000001890 _abort          endp
.plt:0000000000001890
.plt:0000000000001896 ; ---------------------------------------------------------------------------
.plt:0000000000001896                 push    0
.plt:000000000000189B                 jmp     sub_1880
.plt:00000000000018A0
.plt:00000000000018A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018A0
.plt:00000000000018A0 ; Attributes: thunk
.plt:00000000000018A0
.plt:00000000000018A0 ; int *__errno_location(void)
.plt:00000000000018A0 ___errno_location proc near             ; CODE XREF: main+251↓p
.plt:00000000000018A0                                         ; main+A1E↓p ...
.plt:00000000000018A0                 jmp     cs:__errno_location_ptr
.plt:00000000000018A0 ___errno_location endp
.plt:00000000000018A0
.plt:00000000000018A6 ; ---------------------------------------------------------------------------
.plt:00000000000018A6                 push    1
.plt:00000000000018AB                 jmp     sub_1880
.plt:00000000000018B0
.plt:00000000000018B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018B0
.plt:00000000000018B0 ; Attributes: thunk
.plt:00000000000018B0
.plt:00000000000018B0 ; int strncmp(const char *s1, const char *s2, size_t n)
.plt:00000000000018B0 _strncmp        proc near               ; CODE XREF: usage+32C↓p
.plt:00000000000018B0                                         ; usage+3ED↓p
.plt:00000000000018B0                 jmp     cs:strncmp_ptr
.plt:00000000000018B0 _strncmp        endp
.plt:00000000000018B0
.plt:00000000000018B6 ; ---------------------------------------------------------------------------
.plt:00000000000018B6                 push    2
.plt:00000000000018BB                 jmp     sub_1880
.plt:00000000000018C0
.plt:00000000000018C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018C0
.plt:00000000000018C0 ; Attributes: noreturn thunk
.plt:00000000000018C0
.plt:00000000000018C0 ; void __noreturn _exit(int status)
.plt:00000000000018C0 __exit          proc near               ; CODE XREF: close_stdout+88↓p
.plt:00000000000018C0                 jmp     cs:_exit_ptr
.plt:00000000000018C0 __exit          endp
.plt:00000000000018C0
.plt:00000000000018C6 ; ---------------------------------------------------------------------------
.plt:00000000000018C6                 push    3
.plt:00000000000018CB                 jmp     sub_1880
.plt:00000000000018D0
.plt:00000000000018D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018D0
.plt:00000000000018D0 ; Attributes: thunk
.plt:00000000000018D0
.plt:00000000000018D0 ; char *strcpy(char *dest, const char *src)
.plt:00000000000018D0 _strcpy         proc near               ; CODE XREF: openat_proc_name+93↓p
.plt:00000000000018D0                 jmp     cs:strcpy_ptr
.plt:00000000000018D0 _strcpy         endp
.plt:00000000000018D0
.plt:00000000000018D6 ; ---------------------------------------------------------------------------
.plt:00000000000018D6                 push    4
.plt:00000000000018DB                 jmp     sub_1880
.plt:00000000000018E0
.plt:00000000000018E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018E0
.plt:00000000000018E0 ; Attributes: thunk
.plt:00000000000018E0
.plt:00000000000018E0 ; size_t __fpending(FILE *fp)
.plt:00000000000018E0 ___fpending     proc near               ; CODE XREF: close_stream+7↓p
.plt:00000000000018E0                 jmp     cs:__fpending_ptr
.plt:00000000000018E0 ___fpending     endp
.plt:00000000000018E0
.plt:00000000000018E6 ; ---------------------------------------------------------------------------
.plt:00000000000018E6                 push    5
.plt:00000000000018EB                 jmp     sub_1880
.plt:00000000000018F0
.plt:00000000000018F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018F0
.plt:00000000000018F0 ; Attributes: thunk
.plt:00000000000018F0
.plt:00000000000018F0 ; void qsort(void *base, size_t nmemb, size_t size, __compar_fn_t compar)
.plt:00000000000018F0 _qsort          proc near               ; CODE XREF: fts_sort+7C↓p
.plt:00000000000018F0                 jmp     cs:qsort_ptr
.plt:00000000000018F0 _qsort          endp
.plt:00000000000018F0
.plt:00000000000018F6 ; ---------------------------------------------------------------------------
.plt:00000000000018F6                 push    6
.plt:00000000000018FB                 jmp     sub_1880
.plt:0000000000001900
.plt:0000000000001900 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001900
.plt:0000000000001900 ; Attributes: thunk
.plt:0000000000001900
.plt:0000000000001900 ; int fcntl(int fd, int cmd, ...)
.plt:0000000000001900 _fcntl          proc near               ; CODE XREF: rpl_fcntl+80↓p
.plt:0000000000001900                                         ; rpl_fcntl+D4↓p ...
.plt:0000000000001900                 jmp     cs:fcntl_ptr
.plt:0000000000001900 _fcntl          endp
.plt:0000000000001900
.plt:0000000000001906 ; ---------------------------------------------------------------------------
.plt:0000000000001906                 push    7
.plt:000000000000190B                 jmp     sub_1880
.plt:0000000000001910
.plt:0000000000001910 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001910
.plt:0000000000001910 ; Attributes: thunk
.plt:0000000000001910
.plt:0000000000001910 ; char *textdomain(const char *domainname)
.plt:0000000000001910 _textdomain     proc near               ; CODE XREF: main+69↓p
.plt:0000000000001910                 jmp     cs:textdomain_ptr
.plt:0000000000001910 _textdomain     endp
.plt:0000000000001910
.plt:0000000000001916 ; ---------------------------------------------------------------------------
.plt:0000000000001916                 push    8
.plt:000000000000191B                 jmp     sub_1880
.plt:0000000000001920
.plt:0000000000001920 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001920
.plt:0000000000001920 ; Attributes: thunk
.plt:0000000000001920
.plt:0000000000001920 ; int fclose(FILE *stream)
.plt:0000000000001920 _fclose         proc near               ; CODE XREF: rpl_fclose+36↓p
.plt:0000000000001920                                         ; rpl_fclose+6B↓j
.plt:0000000000001920                 jmp     cs:fclose_ptr
.plt:0000000000001920 _fclose         endp
.plt:0000000000001920
.plt:0000000000001926 ; ---------------------------------------------------------------------------
.plt:0000000000001926                 push    9
.plt:000000000000192B                 jmp     sub_1880
.plt:0000000000001930
.plt:0000000000001930 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001930
.plt:0000000000001930 ; Attributes: thunk
.plt:0000000000001930
.plt:0000000000001930 ; char *bindtextdomain(const char *domainname, const char *dirname)
.plt:0000000000001930 _bindtextdomain proc near               ; CODE XREF: main+5D↓p
.plt:0000000000001930                 jmp     cs:bindtextdomain_ptr
.plt:0000000000001930 _bindtextdomain endp
.plt:0000000000001930
.plt:0000000000001936 ; ---------------------------------------------------------------------------
.plt:0000000000001936                 push    0Ah
.plt:000000000000193B                 jmp     sub_1880
.plt:0000000000001940
.plt:0000000000001940 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001940
.plt:0000000000001940 ; Attributes: thunk
.plt:0000000000001940
.plt:0000000000001940 ; char *dcgettext(const char *domainname, const char *msgid, int category)
.plt:0000000000001940 _dcgettext      proc near               ; CODE XREF: main+31C↓p
.plt:0000000000001940                                         ; main+38D↓p ...
.plt:0000000000001940                 jmp     cs:dcgettext_ptr
.plt:0000000000001940 _dcgettext      endp
.plt:0000000000001940
.plt:0000000000001946 ; ---------------------------------------------------------------------------
.plt:0000000000001946                 push    0Bh
.plt:000000000000194B                 jmp     sub_1880
.plt:0000000000001950
.plt:0000000000001950 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001950
.plt:0000000000001950 ; Attributes: thunk
.plt:0000000000001950
.plt:0000000000001950 ; size_t __ctype_get_mb_cur_max(void)
.plt:0000000000001950 ___ctype_get_mb_cur_max proc near       ; CODE XREF: quotearg_buffer_restyled+6C↓p
.plt:0000000000001950                 jmp     cs:__ctype_get_mb_cur_max_ptr
.plt:0000000000001950 ___ctype_get_mb_cur_max endp
.plt:0000000000001950
.plt:0000000000001956 ; ---------------------------------------------------------------------------
.plt:0000000000001956                 push    0Ch
.plt:000000000000195B                 jmp     sub_1880
.plt:0000000000001960
.plt:0000000000001960 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001960
.plt:0000000000001960 ; Attributes: thunk
.plt:0000000000001960
.plt:0000000000001960 ; size_t strlen(const char *s)
.plt:0000000000001960 _strlen         proc near               ; CODE XREF: quotearg_buffer_restyled+157↓p
.plt:0000000000001960                                         ; quotearg_buffer_restyled+8DB↓p ...
.plt:0000000000001960                 jmp     cs:strlen_ptr
.plt:0000000000001960 _strlen         endp
.plt:0000000000001960
.plt:0000000000001966 ; ---------------------------------------------------------------------------
.plt:0000000000001966                 push    0Dh
.plt:000000000000196B                 jmp     sub_1880
.plt:0000000000001970
.plt:0000000000001970 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001970
.plt:0000000000001970 ; Attributes: thunk
.plt:0000000000001970
.plt:0000000000001970 ; int __lxstat(int ver, const char *filename, struct stat *stat_buf)
.plt:0000000000001970 ___lxstat       proc near               ; CODE XREF: get_root_dev_ino+2D↓p
.plt:0000000000001970                                         ; fts_stat+15C↓p
.plt:0000000000001970                 jmp     cs:__lxstat_ptr
.plt:0000000000001970 ___lxstat       endp
.plt:0000000000001970
.plt:0000000000001976 ; ---------------------------------------------------------------------------
.plt:0000000000001976                 push    0Eh
.plt:000000000000197B                 jmp     sub_1880
.plt:0000000000001980
.plt:0000000000001980 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001980
.plt:0000000000001980 ; Attributes: thunk
.plt:0000000000001980
.plt:0000000000001980 ; int openat(int fd, const char *file, int oflag, ...)
.plt:0000000000001980 _openat         proc near               ; CODE XREF: openat_safer+22↓p
.plt:0000000000001980                                         ; cdb_advance_fd+12↓p
.plt:0000000000001980                 jmp     cs:openat_ptr
.plt:0000000000001980 _openat         endp
.plt:0000000000001980
.plt:0000000000001986 ; ---------------------------------------------------------------------------
.plt:0000000000001986                 push    0Fh
.plt:000000000000198B                 jmp     sub_1880
.plt:0000000000001990
.plt:0000000000001990 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001990
.plt:0000000000001990 ; Attributes: thunk
.plt:0000000000001990
.plt:0000000000001990 ; int chdir(const char *path)
.plt:0000000000001990 _chdir          proc near               ; CODE XREF: chdir_long+21↓p
.plt:0000000000001990                 jmp     cs:chdir_ptr
.plt:0000000000001990 _chdir          endp
.plt:0000000000001990
.plt:0000000000001996 ; ---------------------------------------------------------------------------
.plt:0000000000001996                 push    10h
.plt:000000000000199B                 jmp     sub_1880
.plt:00000000000019A0
.plt:00000000000019A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019A0
.plt:00000000000019A0 ; Attributes: noreturn thunk
.plt:00000000000019A0
.plt:00000000000019A0 ___stack_chk_fail proc near             ; CODE XREF: main:loc_2722↓p
.plt:00000000000019A0                                         ; quotearg_buffer_restyled:loc_4163↓p ...
.plt:00000000000019A0                 jmp     cs:__stack_chk_fail_ptr
.plt:00000000000019A0 ___stack_chk_fail endp
.plt:00000000000019A0
.plt:00000000000019A6 ; ---------------------------------------------------------------------------
.plt:00000000000019A6                 push    11h
.plt:00000000000019AB                 jmp     sub_1880
.plt:00000000000019B0
.plt:00000000000019B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019B0
.plt:00000000000019B0 ; Attributes: thunk
.plt:00000000000019B0
.plt:00000000000019B0 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
.plt:00000000000019B0 _getopt_long    proc near               ; CODE XREF: main+9E↓p
.plt:00000000000019B0                 jmp     cs:getopt_long_ptr
.plt:00000000000019B0 _getopt_long    endp
.plt:00000000000019B0
.plt:00000000000019B6 ; ---------------------------------------------------------------------------
.plt:00000000000019B6                 push    12h
.plt:00000000000019BB                 jmp     sub_1880
.plt:00000000000019C0
.plt:00000000000019C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019C0
.plt:00000000000019C0 ; Attributes: thunk
.plt:00000000000019C0
.plt:00000000000019C0 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
.plt:00000000000019C0 _mbrtowc        proc near               ; CODE XREF: rpl_mbrtowc+32↓p
.plt:00000000000019C0                 jmp     cs:mbrtowc_ptr
.plt:00000000000019C0 _mbrtowc        endp
.plt:00000000000019C0
.plt:00000000000019C6 ; ---------------------------------------------------------------------------
.plt:00000000000019C6                 push    13h
.plt:00000000000019CB                 jmp     sub_1880
.plt:00000000000019D0
.plt:00000000000019D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019D0
.plt:00000000000019D0 ; Attributes: thunk
.plt:00000000000019D0
.plt:00000000000019D0 ; int __fxstatat(int ver, int fildes, const char *filename, struct stat *stat_buf, int flag)
.plt:00000000000019D0 ___fxstatat     proc near               ; CODE XREF: fts_stat+9E↓p
.plt:00000000000019D0                 jmp     cs:__fxstatat_ptr
.plt:00000000000019D0 ___fxstatat     endp
.plt:00000000000019D0
.plt:00000000000019D6 ; ---------------------------------------------------------------------------
.plt:00000000000019D6                 push    14h
.plt:00000000000019DB                 jmp     sub_1880
.plt:00000000000019E0
.plt:00000000000019E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019E0
.plt:00000000000019E0 ; Attributes: thunk
.plt:00000000000019E0
.plt:00000000000019E0 ; char *strrchr(const char *s, int c)
.plt:00000000000019E0 _strrchr        proc near               ; CODE XREF: set_program_name+E↓p
.plt:00000000000019E0                                         ; rpl_fts_read+2F6↓p
.plt:00000000000019E0                 jmp     cs:strrchr_ptr
.plt:00000000000019E0 _strrchr        endp
.plt:00000000000019E0
.plt:00000000000019E6 ; ---------------------------------------------------------------------------
.plt:00000000000019E6                 push    15h
.plt:00000000000019EB                 jmp     sub_1880
.plt:00000000000019F0
.plt:00000000000019F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019F0
.plt:00000000000019F0 ; Attributes: thunk
.plt:00000000000019F0
.plt:00000000000019F0 ; __off_t lseek(int fd, __off_t offset, int whence)
.plt:00000000000019F0 _lseek          proc near               ; CODE XREF: rpl_fclose+59↓p
.plt:00000000000019F0                                         ; rpl_fseeko+3B↓p
.plt:00000000000019F0                 jmp     cs:lseek_ptr
.plt:00000000000019F0 _lseek          endp
.plt:00000000000019F0
.plt:00000000000019F6 ; ---------------------------------------------------------------------------
.plt:00000000000019F6                 push    16h
.plt:00000000000019FB                 jmp     sub_1880
.plt:0000000000001A00
.plt:0000000000001A00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A00
.plt:0000000000001A00 ; Attributes: noreturn thunk
.plt:0000000000001A00
.plt:0000000000001A00 ; void __noreturn __assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
.plt:0000000000001A00 ___assert_fail  proc near               ; CODE XREF: xfts_open+4A↓p
.plt:0000000000001A00                                         ; cycle_check+85↓p ...
.plt:0000000000001A00                 jmp     cs:__assert_fail_ptr
.plt:0000000000001A00 ___assert_fail  endp
.plt:0000000000001A00
.plt:0000000000001A06 ; ---------------------------------------------------------------------------
.plt:0000000000001A06                 push    17h
.plt:0000000000001A0B                 jmp     sub_1880
.plt:0000000000001A10
.plt:0000000000001A10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A10
.plt:0000000000001A10 ; Attributes: thunk
.plt:0000000000001A10
.plt:0000000000001A10 ; void *memset(void *s, int c, size_t n)
.plt:0000000000001A10 _memset         proc near               ; CODE XREF: quotearg_n_options+99↓p
.plt:0000000000001A10                                         ; xzalloc+12↓j
.plt:0000000000001A10                 jmp     cs:memset_ptr
.plt:0000000000001A10 _memset         endp
.plt:0000000000001A10
.plt:0000000000001A16 ; ---------------------------------------------------------------------------
.plt:0000000000001A16                 push    18h
.plt:0000000000001A1B                 jmp     sub_1880
.plt:0000000000001A20
.plt:0000000000001A20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A20
.plt:0000000000001A20 ; Attributes: thunk
.plt:0000000000001A20
.plt:0000000000001A20 ; char *getcwd(char *buf, size_t size)
.plt:0000000000001A20 _getcwd         proc near               ; CODE XREF: save_cwd+34↓p
.plt:0000000000001A20                 jmp     cs:getcwd_ptr
.plt:0000000000001A20 _getcwd         endp
.plt:0000000000001A20
.plt:0000000000001A26 ; ---------------------------------------------------------------------------
.plt:0000000000001A26                 push    19h
.plt:0000000000001A2B                 jmp     sub_1880
.plt:0000000000001A30
.plt:0000000000001A30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A30
.plt:0000000000001A30 ; Attributes: thunk
.plt:0000000000001A30
.plt:0000000000001A30 ; int close(int fd)
.plt:0000000000001A30 _close          proc near               ; CODE XREF: fd_ring_clear+32↓p
.plt:0000000000001A30                                         ; cwd_advance_fd+3F↓p ...
.plt:0000000000001A30                 jmp     cs:close_ptr
.plt:0000000000001A30 _close          endp
.plt:0000000000001A30
.plt:0000000000001A36 ; ---------------------------------------------------------------------------
.plt:0000000000001A36                 push    1Ah
.plt:0000000000001A3B                 jmp     sub_1880
.plt:0000000000001A40
.plt:0000000000001A40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A40
.plt:0000000000001A40 ; Attributes: thunk
.plt:0000000000001A40
.plt:0000000000001A40 ; size_t strspn(const char *s, const char *accept)
.plt:0000000000001A40 _strspn         proc near               ; CODE XREF: chdir_long+92↓p
.plt:0000000000001A40                                         ; chdir_long+121↓p ...
.plt:0000000000001A40                 jmp     cs:strspn_ptr
.plt:0000000000001A40 _strspn         endp
.plt:0000000000001A40
.plt:0000000000001A46 ; ---------------------------------------------------------------------------
.plt:0000000000001A46                 push    1Bh
.plt:0000000000001A4B                 jmp     sub_1880
.plt:0000000000001A50
.plt:0000000000001A50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A50
.plt:0000000000001A50 ; Attributes: thunk
.plt:0000000000001A50
.plt:0000000000001A50 ; int closedir(DIR *dirp)
.plt:0000000000001A50 _closedir       proc near               ; CODE XREF: fts_lfree+1D↓p
.plt:0000000000001A50                                         ; fts_build+544↓p ...
.plt:0000000000001A50                 jmp     cs:closedir_ptr
.plt:0000000000001A50 _closedir       endp
.plt:0000000000001A50
.plt:0000000000001A56 ; ---------------------------------------------------------------------------
.plt:0000000000001A56                 push    1Ch
.plt:0000000000001A5B                 jmp     sub_1880
.plt:0000000000001A60
.plt:0000000000001A60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A60
.plt:0000000000001A60 ; Attributes: thunk
.plt:0000000000001A60
.plt:0000000000001A60 ; void *memchr(const void *s, int c, size_t n)
.plt:0000000000001A60 _memchr         proc near               ; CODE XREF: chdir_long+17E↓p
.plt:0000000000001A60                 jmp     cs:memchr_ptr
.plt:0000000000001A60 _memchr         endp
.plt:0000000000001A60
.plt:0000000000001A66 ; ---------------------------------------------------------------------------
.plt:0000000000001A66                 push    1Dh
.plt:0000000000001A6B                 jmp     sub_1880
.plt:0000000000001A70
.plt:0000000000001A70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A70
.plt:0000000000001A70 ; Attributes: thunk
.plt:0000000000001A70
.plt:0000000000001A70 ; int memcmp(const void *s1, const void *s2, size_t n)
.plt:0000000000001A70 _memcmp         proc near               ; CODE XREF: quotearg_buffer_restyled+19A↓p
.plt:0000000000001A70                 jmp     cs:memcmp_ptr
.plt:0000000000001A70 _memcmp         endp
.plt:0000000000001A70
.plt:0000000000001A76 ; ---------------------------------------------------------------------------
.plt:0000000000001A76                 push    1Eh
.plt:0000000000001A7B                 jmp     sub_1880
.plt:0000000000001A80
.plt:0000000000001A80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A80
.plt:0000000000001A80 ; Attributes: thunk
.plt:0000000000001A80
.plt:0000000000001A80 ; int fputs_unlocked(const char *s, FILE *stream)
.plt:0000000000001A80 _fputs_unlocked proc near               ; CODE XREF: usage+A3↓p
.plt:0000000000001A80                                         ; usage+C8↓p ...
.plt:0000000000001A80                 jmp     cs:fputs_unlocked_ptr
.plt:0000000000001A80 _fputs_unlocked endp
.plt:0000000000001A80
.plt:0000000000001A86 ; ---------------------------------------------------------------------------
.plt:0000000000001A86                 push    1Fh
.plt:0000000000001A8B                 jmp     sub_1880
.plt:0000000000001A90
.plt:0000000000001A90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A90
.plt:0000000000001A90 ; Attributes: thunk
.plt:0000000000001A90
.plt:0000000000001A90 ; void *calloc(size_t nmemb, size_t size)
.plt:0000000000001A90 _calloc         proc near               ; CODE XREF: xcalloc+1A↓p
.plt:0000000000001A90                                         ; rpl_fts_open+48↓p ...
.plt:0000000000001A90                 jmp     cs:calloc_ptr
.plt:0000000000001A90 _calloc         endp
.plt:0000000000001A90
.plt:0000000000001A96 ; ---------------------------------------------------------------------------
.plt:0000000000001A96                 push    20h ; ' '
.plt:0000000000001A9B                 jmp     sub_1880
.plt:0000000000001AA0
.plt:0000000000001AA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AA0
.plt:0000000000001AA0 ; Attributes: thunk
.plt:0000000000001AA0
.plt:0000000000001AA0 ; int strcmp(const char *s1, const char *s2)
.plt:0000000000001AA0 _strcmp         proc near               ; CODE XREF: main+503↓p
.plt:0000000000001AA0                                         ; main+7D8↓p
.plt:0000000000001AA0                 jmp     cs:strcmp_ptr
.plt:0000000000001AA0 _strcmp         endp
.plt:0000000000001AA0
.plt:0000000000001AA6 ; ---------------------------------------------------------------------------
.plt:0000000000001AA6                 push    21h ; '!'
.plt:0000000000001AAB                 jmp     sub_1880
.plt:0000000000001AB0
.plt:0000000000001AB0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AB0
.plt:0000000000001AB0 ; Attributes: thunk
.plt:0000000000001AB0
.plt:0000000000001AB0 ; int dirfd(DIR *dirp)
.plt:0000000000001AB0 _dirfd          proc near               ; CODE XREF: fts_build+3D↓p
.plt:0000000000001AB0                 jmp     cs:dirfd_ptr
.plt:0000000000001AB0 _dirfd          endp
.plt:0000000000001AB0
.plt:0000000000001AB6 ; ---------------------------------------------------------------------------
.plt:0000000000001AB6                 push    22h ; '"'
.plt:0000000000001ABB                 jmp     sub_1880
.plt:0000000000001AC0
.plt:0000000000001AC0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AC0
.plt:0000000000001AC0 ; Attributes: thunk
.plt:0000000000001AC0
.plt:0000000000001AC0 ; void *memcpy(void *dest, const void *src, size_t n)
.plt:0000000000001AC0 _memcpy         proc near               ; CODE XREF: xmemdup+23↓j
.plt:0000000000001AC0                                         ; fts_alloc+38↓p
.plt:0000000000001AC0                 jmp     cs:memcpy_ptr
.plt:0000000000001AC0 _memcpy         endp
.plt:0000000000001AC0
.plt:0000000000001AC6 ; ---------------------------------------------------------------------------
.plt:0000000000001AC6                 push    23h ; '#'
.plt:0000000000001ACB                 jmp     sub_1880
.plt:0000000000001AD0
.plt:0000000000001AD0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AD0
.plt:0000000000001AD0 ; Attributes: thunk
.plt:0000000000001AD0
.plt:0000000000001AD0 ; int fileno(FILE *stream)
.plt:0000000000001AD0 _fileno         proc near               ; CODE XREF: rpl_fclose+7↓p
.plt:0000000000001AD0                                         ; rpl_fclose+4B↓p ...
.plt:0000000000001AD0                 jmp     cs:fileno_ptr
.plt:0000000000001AD0 _fileno         endp
.plt:0000000000001AD0
.plt:0000000000001AD6 ; ---------------------------------------------------------------------------
.plt:0000000000001AD6                 push    24h ; '$'
.plt:0000000000001ADB                 jmp     sub_1880
.plt:0000000000001AE0
.plt:0000000000001AE0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AE0
.plt:0000000000001AE0 ; Attributes: thunk
.plt:0000000000001AE0
.plt:0000000000001AE0 ; int __xstat(int ver, const char *filename, struct stat *stat_buf)
.plt:0000000000001AE0 ___xstat        proc near               ; CODE XREF: fts_stat+28↓p
.plt:0000000000001AE0                 jmp     cs:__xstat_ptr
.plt:0000000000001AE0 ___xstat        endp
.plt:0000000000001AE0
.plt:0000000000001AE6 ; ---------------------------------------------------------------------------
.plt:0000000000001AE6                 push    25h ; '%'
.plt:0000000000001AEB                 jmp     sub_1880
.plt:0000000000001AF0
.plt:0000000000001AF0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AF0
.plt:0000000000001AF0 ; Attributes: thunk
.plt:0000000000001AF0
.plt:0000000000001AF0 ; struct dirent *readdir(DIR *dirp)
.plt:0000000000001AF0 _readdir        proc near               ; CODE XREF: fts_build+1F2↓p
.plt:0000000000001AF0                 jmp     cs:readdir_ptr
.plt:0000000000001AF0 _readdir        endp
.plt:0000000000001AF0
.plt:0000000000001AF6 ; ---------------------------------------------------------------------------
.plt:0000000000001AF6                 push    26h ; '&'
.plt:0000000000001AFB                 jmp     sub_1880
.plt:0000000000001B00
.plt:0000000000001B00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B00
.plt:0000000000001B00 ; Attributes: thunk
.plt:0000000000001B00
.plt:0000000000001B00 ; void *malloc(size_t size)
.plt:0000000000001B00 _malloc         proc near               ; CODE XREF: xmalloc+4↓p
.plt:0000000000001B00                                         ; fts_alloc+1E↓p ...
.plt:0000000000001B00                 jmp     cs:malloc_ptr
.plt:0000000000001B00 _malloc         endp
.plt:0000000000001B00
.plt:0000000000001B06 ; ---------------------------------------------------------------------------
.plt:0000000000001B06                 push    27h ; '''
.plt:0000000000001B0B                 jmp     sub_1880
.plt:0000000000001B10
.plt:0000000000001B10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B10
.plt:0000000000001B10 ; Attributes: thunk
.plt:0000000000001B10
.plt:0000000000001B10 ; int fflush(FILE *stream)
.plt:0000000000001B10 _fflush         proc near               ; CODE XREF: rpl_fflush+1E↓j
.plt:0000000000001B10                                         ; rpl_fflush+3B↓j
.plt:0000000000001B10                 jmp     cs:fflush_ptr
.plt:0000000000001B10 _fflush         endp
.plt:0000000000001B10
.plt:0000000000001B16 ; ---------------------------------------------------------------------------
.plt:0000000000001B16                 push    28h ; '('
.plt:0000000000001B1B                 jmp     sub_1880
.plt:0000000000001B20
.plt:0000000000001B20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B20
.plt:0000000000001B20 ; Attributes: thunk
.plt:0000000000001B20
.plt:0000000000001B20 ; char *nl_langinfo(nl_item item)
.plt:0000000000001B20 _nl_langinfo    proc near               ; CODE XREF: locale_charset+9↓p
.plt:0000000000001B20                 jmp     cs:nl_langinfo_ptr
.plt:0000000000001B20 _nl_langinfo    endp
.plt:0000000000001B20
.plt:0000000000001B26 ; ---------------------------------------------------------------------------
.plt:0000000000001B26                 push    29h ; ')'
.plt:0000000000001B2B                 jmp     sub_1880
.plt:0000000000001B30
.plt:0000000000001B30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B30
.plt:0000000000001B30 ; Attributes: thunk
.plt:0000000000001B30
.plt:0000000000001B30 ; int __fxstat(int ver, int fildes, struct stat *stat_buf)
.plt:0000000000001B30 ___fxstat       proc near               ; CODE XREF: fts_safe_changedir+BD↓p
.plt:0000000000001B30                 jmp     cs:__fxstat_ptr
.plt:0000000000001B30 ___fxstat       endp
.plt:0000000000001B30
.plt:0000000000001B36 ; ---------------------------------------------------------------------------
.plt:0000000000001B36                 push    2Ah ; '*'
.plt:0000000000001B3B                 jmp     sub_1880
.plt:0000000000001B40
.plt:0000000000001B40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B40
.plt:0000000000001B40 ; Attributes: thunk
.plt:0000000000001B40
.plt:0000000000001B40 ; int __freading(FILE *fp)
.plt:0000000000001B40 ___freading     proc near               ; CODE XREF: rpl_fclose+13↓p
.plt:0000000000001B40                                         ; rpl_fflush+9↓p
.plt:0000000000001B40                 jmp     cs:__freading_ptr
.plt:0000000000001B40 ___freading     endp
.plt:0000000000001B40
.plt:0000000000001B46 ; ---------------------------------------------------------------------------
.plt:0000000000001B46                 push    2Bh ; '+'
.plt:0000000000001B4B                 jmp     sub_1880
.plt:0000000000001B50
.plt:0000000000001B50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B50
.plt:0000000000001B50 ; Attributes: thunk
.plt:0000000000001B50
.plt:0000000000001B50 ; int fchdir(int fd)
.plt:0000000000001B50 _fchdir         proc near               ; CODE XREF: restore_initial_cwd+1D↓p
.plt:0000000000001B50                                         ; fts_safe_changedir+17C↓p ...
.plt:0000000000001B50                 jmp     cs:fchdir_ptr
.plt:0000000000001B50 _fchdir         endp
.plt:0000000000001B50
.plt:0000000000001B56 ; ---------------------------------------------------------------------------
.plt:0000000000001B56                 push    2Ch ; ','
.plt:0000000000001B5B                 jmp     sub_1880
.plt:0000000000001B60
.plt:0000000000001B60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B60
.plt:0000000000001B60 ; Attributes: thunk
.plt:0000000000001B60
.plt:0000000000001B60 ; void *realloc(void *ptr, size_t size)
.plt:0000000000001B60 _realloc        proc near               ; CODE XREF: xrealloc+11↓p
.plt:0000000000001B60                                         ; fts_sort+40↓p ...
.plt:0000000000001B60                 jmp     cs:realloc_ptr
.plt:0000000000001B60 _realloc        endp
.plt:0000000000001B60
.plt:0000000000001B66 ; ---------------------------------------------------------------------------
.plt:0000000000001B66                 push    2Dh ; '-'
.plt:0000000000001B6B                 jmp     sub_1880
.plt:0000000000001B70
.plt:0000000000001B70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B70
.plt:0000000000001B70 ; Attributes: thunk
.plt:0000000000001B70
.plt:0000000000001B70 ; char *setlocale(int category, const char *locale)
.plt:0000000000001B70 _setlocale      proc near               ; CODE XREF: main+4A↓p
.plt:0000000000001B70                                         ; usage+313↓p ...
.plt:0000000000001B70                 jmp     cs:setlocale_ptr
.plt:0000000000001B70 _setlocale      endp
.plt:0000000000001B70
.plt:0000000000001B76 ; ---------------------------------------------------------------------------
.plt:0000000000001B76                 push    2Eh ; '.'
.plt:0000000000001B7B                 jmp     sub_1880
.plt:0000000000001B80
.plt:0000000000001B80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B80
.plt:0000000000001B80 ; Attributes: thunk
.plt:0000000000001B80
.plt:0000000000001B80 ___printf_chk   proc near               ; CODE XREF: main+62C↓p
.plt:0000000000001B80                                         ; usage+7E↓p ...
.plt:0000000000001B80                 jmp     cs:__printf_chk_ptr
.plt:0000000000001B80 ___printf_chk   endp
.plt:0000000000001B80
.plt:0000000000001B86 ; ---------------------------------------------------------------------------
.plt:0000000000001B86                 push    2Fh ; '/'
.plt:0000000000001B8B                 jmp     sub_1880
.plt:0000000000001B90
.plt:0000000000001B90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B90
.plt:0000000000001B90 ; Attributes: thunk
.plt:0000000000001B90
.plt:0000000000001B90 ; void *memmove(void *dest, const void *src, size_t n)
.plt:0000000000001B90 _memmove        proc near               ; CODE XREF: fts_build+3B5↓p
.plt:0000000000001B90                                         ; rpl_fts_read+2E9↓p ...
.plt:0000000000001B90                 jmp     cs:memmove_ptr
.plt:0000000000001B90 _memmove        endp
.plt:0000000000001B90
.plt:0000000000001B96 ; ---------------------------------------------------------------------------
.plt:0000000000001B96                 push    30h ; '0'
.plt:0000000000001B9B                 jmp     sub_1880
.plt:0000000000001BA0
.plt:0000000000001BA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BA0
.plt:0000000000001BA0 ; Attributes: thunk
.plt:0000000000001BA0
.plt:0000000000001BA0 ; void error(int status, int errnum, const char *format, ...)
.plt:0000000000001BA0 _error          proc near               ; CODE XREF: main+332↓p
.plt:0000000000001BA0                                         ; main+39C↓p ...
.plt:0000000000001BA0                 jmp     cs:error_ptr
.plt:0000000000001BA0 _error          endp
.plt:0000000000001BA0
.plt:0000000000001BA6 ; ---------------------------------------------------------------------------
.plt:0000000000001BA6                 push    31h ; '1'
.plt:0000000000001BAB                 jmp     sub_1880
.plt:0000000000001BB0
.plt:0000000000001BB0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BB0
.plt:0000000000001BB0 ; Attributes: thunk
.plt:0000000000001BB0
.plt:0000000000001BB0 ; void *memrchr(const void *s, int c, size_t n)
.plt:0000000000001BB0 _memrchr        proc near               ; CODE XREF: chdir_long+149↓p
.plt:0000000000001BB0                 jmp     cs:memrchr_ptr
.plt:0000000000001BB0 _memrchr        endp
.plt:0000000000001BB0
.plt:0000000000001BB6 ; ---------------------------------------------------------------------------
.plt:0000000000001BB6                 push    32h ; '2'
.plt:0000000000001BBB                 jmp     sub_1880
.plt:0000000000001BC0
.plt:0000000000001BC0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BC0
.plt:0000000000001BC0 ; Attributes: thunk
.plt:0000000000001BC0
.plt:0000000000001BC0 ; int open(const char *file, int oflag, ...)
.plt:0000000000001BC0 _open           proc near               ; CODE XREF: open_safer+23↓p
.plt:0000000000001BC0                                         ; openat_proc_name+DC↓p
.plt:0000000000001BC0                 jmp     cs:open_ptr
.plt:0000000000001BC0 _open           endp
.plt:0000000000001BC0
.plt:0000000000001BC6 ; ---------------------------------------------------------------------------
.plt:0000000000001BC6                 push    33h ; '3'
.plt:0000000000001BCB                 jmp     sub_1880
.plt:0000000000001BD0
.plt:0000000000001BD0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BD0
.plt:0000000000001BD0 ; Attributes: thunk
.plt:0000000000001BD0
.plt:0000000000001BD0 ; int access(const char *name, int type)
.plt:0000000000001BD0 _access         proc near               ; CODE XREF: openat_proc_name+126↓p
.plt:0000000000001BD0                 jmp     cs:access_ptr
.plt:0000000000001BD0 _access         endp
.plt:0000000000001BD0
.plt:0000000000001BD6 ; ---------------------------------------------------------------------------
.plt:0000000000001BD6                 push    34h ; '4'
.plt:0000000000001BDB                 jmp     sub_1880
.plt:0000000000001BE0
.plt:0000000000001BE0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BE0
.plt:0000000000001BE0 ; Attributes: thunk
.plt:0000000000001BE0
.plt:0000000000001BE0 ; int fseeko(FILE *stream, __off_t off, int whence)
.plt:0000000000001BE0 _fseeko         proc near               ; CODE XREF: rpl_fseeko:loc_995A↓j
.plt:0000000000001BE0                 jmp     cs:fseeko_ptr
.plt:0000000000001BE0 _fseeko         endp
.plt:0000000000001BE0
.plt:0000000000001BE6 ; ---------------------------------------------------------------------------
.plt:0000000000001BE6                 push    35h ; '5'
.plt:0000000000001BEB                 jmp     sub_1880
.plt:0000000000001BF0
.plt:0000000000001BF0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BF0
.plt:0000000000001BF0 ; Attributes: thunk
.plt:0000000000001BF0
.plt:0000000000001BF0 ; DIR *fdopendir(int fd)
.plt:0000000000001BF0 _fdopendir      proc near               ; CODE XREF: opendirat+22↓p
.plt:0000000000001BF0                 jmp     cs:fdopendir_ptr
.plt:0000000000001BF0 _fdopendir      endp
.plt:0000000000001BF0
.plt:0000000000001BF6 ; ---------------------------------------------------------------------------
.plt:0000000000001BF6                 push    36h ; '6'
.plt:0000000000001BFB                 jmp     sub_1880
.plt:0000000000001C00
.plt:0000000000001C00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C00
.plt:0000000000001C00 ; Attributes: thunk
.plt:0000000000001C00
.plt:0000000000001C00 ; int fstatfs(int fildes, struct statfs *buf)
.plt:0000000000001C00 _fstatfs        proc near               ; CODE XREF: filesystem_type+C8↓p
.plt:0000000000001C00                 jmp     cs:fstatfs_ptr
.plt:0000000000001C00 _fstatfs        endp
.plt:0000000000001C00
.plt:0000000000001C06 ; ---------------------------------------------------------------------------
.plt:0000000000001C06                 push    37h ; '7'
.plt:0000000000001C0B                 jmp     sub_1880
.plt:0000000000001C10
.plt:0000000000001C10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C10
.plt:0000000000001C10 ; Attributes: thunk
.plt:0000000000001C10
.plt:0000000000001C10 ; int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
.plt:0000000000001C10 ___cxa_atexit   proc near               ; CODE XREF: atexit+9↓j
.plt:0000000000001C10                 jmp     cs:__cxa_atexit_ptr
.plt:0000000000001C10 ___cxa_atexit   endp
.plt:0000000000001C10
.plt:0000000000001C16 ; ---------------------------------------------------------------------------
.plt:0000000000001C16                 push    38h ; '8'
.plt:0000000000001C1B                 jmp     sub_1880
.plt:0000000000001C20
.plt:0000000000001C20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C20
.plt:0000000000001C20 ; Attributes: noreturn thunk
.plt:0000000000001C20
.plt:0000000000001C20 ; void __noreturn exit(int status)
.plt:0000000000001C20 _exit           proc near               ; CODE XREF: main+19A↓p
.plt:0000000000001C20                                         ; usage+58↓p
.plt:0000000000001C20                 jmp     cs:exit_ptr
.plt:0000000000001C20 _exit           endp
.plt:0000000000001C20
.plt:0000000000001C26 ; ---------------------------------------------------------------------------
.plt:0000000000001C26                 push    39h ; '9'
.plt:0000000000001C2B                 jmp     sub_1880
.plt:0000000000001C30
.plt:0000000000001C30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C30
.plt:0000000000001C30 ; Attributes: thunk
.plt:0000000000001C30
.plt:0000000000001C30 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
.plt:0000000000001C30 _fwrite         proc near               ; CODE XREF: set_program_name+95↓p
.plt:0000000000001C30                 jmp     cs:fwrite_ptr
.plt:0000000000001C30 _fwrite         endp
.plt:0000000000001C30
.plt:0000000000001C36 ; ---------------------------------------------------------------------------
.plt:0000000000001C36                 push    3Ah ; ':'
.plt:0000000000001C3B                 jmp     sub_1880
.plt:0000000000001C40
.plt:0000000000001C40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C40
.plt:0000000000001C40 ; Attributes: thunk
.plt:0000000000001C40
.plt:0000000000001C40 ___fprintf_chk  proc near               ; CODE XREF: usage+51↓p
.plt:0000000000001C40                                         ; version_etc_arn+37↓p ...
.plt:0000000000001C40                 jmp     cs:__fprintf_chk_ptr
.plt:0000000000001C40 ___fprintf_chk  endp
.plt:0000000000001C40
.plt:0000000000001C46 ; ---------------------------------------------------------------------------
.plt:0000000000001C46                 push    3Bh ; ';'
.plt:0000000000001C4B                 jmp     sub_1880
.plt:0000000000001C50
.plt:0000000000001C50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C50
.plt:0000000000001C50 ; Attributes: thunk
.plt:0000000000001C50
.plt:0000000000001C50 ; int mbsinit(const mbstate_t *ps)
.plt:0000000000001C50 _mbsinit        proc near               ; CODE XREF: quotearg_buffer_restyled+9A8↓p
.plt:0000000000001C50                 jmp     cs:mbsinit_ptr
.plt:0000000000001C50 _mbsinit        endp
.plt:0000000000001C50
.plt:0000000000001C56 ; ---------------------------------------------------------------------------
.plt:0000000000001C56                 push    3Ch ; '<'
.plt:0000000000001C5B                 jmp     sub_1880
.plt:0000000000001C60
.plt:0000000000001C60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C60
.plt:0000000000001C60 ; Attributes: thunk
.plt:0000000000001C60
.plt:0000000000001C60 ; int iswprint(wint_t wc)
.plt:0000000000001C60 _iswprint       proc near               ; CODE XREF: quotearg_buffer_restyled+990↓p
.plt:0000000000001C60                 jmp     cs:iswprint_ptr
.plt:0000000000001C60 _iswprint       endp
.plt:0000000000001C60
.plt:0000000000001C66 ; ---------------------------------------------------------------------------
.plt:0000000000001C66                 push    3Dh ; '='
.plt:0000000000001C6B                 jmp     sub_1880
.plt:0000000000001C70
.plt:0000000000001C70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C70
.plt:0000000000001C70 ; Attributes: thunk
.plt:0000000000001C70
.plt:0000000000001C70 ; const unsigned __int16 **__ctype_b_loc(void)
.plt:0000000000001C70 ___ctype_b_loc  proc near               ; CODE XREF: quotearg_buffer_restyled+513↓p
.plt:0000000000001C70                 jmp     cs:__ctype_b_loc_ptr
.plt:0000000000001C70 ___ctype_b_loc  endp
.plt:0000000000001C70
.plt:0000000000001C76 ; ---------------------------------------------------------------------------
.plt:0000000000001C76                 push    3Eh ; '>'
.plt:0000000000001C7B                 jmp     sub_1880
.plt:0000000000001C80
.plt:0000000000001C80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C80
.plt:0000000000001C80 ; Attributes: thunk
.plt:0000000000001C80
.plt:0000000000001C80 ___sprintf_chk  proc near               ; CODE XREF: openat_proc_name+85↓p
.plt:0000000000001C80                                         ; openat_proc_name+11C↓p
.plt:0000000000001C80                 jmp     cs:__sprintf_chk_ptr
.plt:0000000000001C80 ___sprintf_chk  endp
.plt:0000000000001C80
.plt:0000000000001C86 ; ---------------------------------------------------------------------------
.plt:0000000000001C86                 push    3Fh ; '?'
.plt:0000000000001C8B                 jmp     sub_1880
.plt:0000000000001C8B ; } // starts at 1880
.plt:0000000000001C8B _plt            ends
.plt:0000000000001C8B
.plt.got:0000000000001C90 ; ===========================================================================
.plt.got:0000000000001C90
.plt.got:0000000000001C90 ; Segment type: Pure code
.plt.got:0000000000001C90 ; Segment permissions: Read/Execute
.plt.got:0000000000001C90 _plt_got        segment qword public 'CODE' use64
.plt.got:0000000000001C90                 assume cs:_plt_got
.plt.got:0000000000001C90                 ;org 1C90h
.plt.got:0000000000001C90                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:0000000000001C90
.plt.got:0000000000001C90 ; =============== S U B R O U T I N E =======================================
.plt.got:0000000000001C90
.plt.got:0000000000001C90 ; Attributes: thunk
.plt.got:0000000000001C90
.plt.got:0000000000001C90 ; void free(void *ptr)
.plt.got:0000000000001C90 free            proc near               ; CODE XREF: quotearg_n_options+115↓p
.plt.got:0000000000001C90                                         ; quotearg_free+37↓p ...
.plt.got:0000000000001C90 ; __unwind {
.plt.got:0000000000001C90                 jmp     cs:free_ptr
.plt.got:0000000000001C90 free            endp
.plt.got:0000000000001C90
.plt.got:0000000000001C90 ; ---------------------------------------------------------------------------
.plt.got:0000000000001C96                 align 8
.plt.got:0000000000001C98
.plt.got:0000000000001C98 ; =============== S U B R O U T I N E =======================================
.plt.got:0000000000001C98
.plt.got:0000000000001C98 ; Attributes: thunk
.plt.got:0000000000001C98
.plt.got:0000000000001C98 ; int __fastcall _cxa_finalize(void *)
.plt.got:0000000000001C98 __cxa_finalize  proc near               ; CODE XREF: __do_global_dtors_aux+1E↓p
.plt.got:0000000000001C98                 jmp     cs:__cxa_finalize_ptr
.plt.got:0000000000001C98 __cxa_finalize  endp
.plt.got:0000000000001C98
.plt.got:0000000000001C98 ; ---------------------------------------------------------------------------
.plt.got:0000000000001C9E                 align 20h
.plt.got:0000000000001C9E ; } // starts at 1C90
.plt.got:0000000000001C9E _plt_got        ends
.plt.got:0000000000001C9E
.text:0000000000001CA0 ; ===========================================================================
.text:0000000000001CA0
.text:0000000000001CA0 ; Segment type: Pure code
.text:0000000000001CA0 ; Segment permissions: Read/Execute
.text:0000000000001CA0 _text           segment para public 'CODE' use64
.text:0000000000001CA0                 assume cs:_text
.text:0000000000001CA0                 ;org 1CA0h
.text:0000000000001CA0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:0000000000001CA0
.text:0000000000001CA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001CA0
.text:0000000000001CA0
.text:0000000000001CA0 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:0000000000001CA0                 public main
.text:0000000000001CA0 main            proc near               ; DATA XREF: start+1D↓o
.text:0000000000001CA0
.text:0000000000001CA0 var_60          = qword ptr -60h
.text:0000000000001CA0 var_51          = byte ptr -51h
.text:0000000000001CA0 var_50          = qword ptr -50h
.text:0000000000001CA0 var_48          = qword ptr -48h
.text:0000000000001CA0 var_40          = qword ptr -40h
.text:0000000000001CA0
.text:0000000000001CA0 ; __unwind {
.text:0000000000001CA0                 push    r15
.text:0000000000001CA2                 push    r14
.text:0000000000001CA4                 xor     r15d, r15d
.text:0000000000001CA7                 push    r13
.text:0000000000001CA9                 push    r12
.text:0000000000001CAB                 xor     r13d, r13d
.text:0000000000001CAE                 push    rbp
.text:0000000000001CAF                 push    rbx
.text:0000000000001CB0                 movsxd  rbp, edi
.text:0000000000001CB3                 mov     rbx, rsi
.text:0000000000001CB6                 mov     r14d, 0FFFFFFFFh
.text:0000000000001CBC                 mov     r12d, 10h
.text:0000000000001CC2                 sub     rsp, 38h
.text:0000000000001CC6                 mov     rdi, [rsi]
.text:0000000000001CC9                 mov     rax, fs:28h
.text:0000000000001CD2                 mov     [rsp+68h+var_40], rax
.text:0000000000001CD7                 xor     eax, eax
.text:0000000000001CD9                 call    set_program_name
.text:0000000000001CDE                 lea     rsi, aWrittenBySSAnd+1Bh ; locale
.text:0000000000001CE5                 mov     edi, 6          ; category
.text:0000000000001CEA                 call    _setlocale
.text:0000000000001CEF                 lea     rsi, dirname    ; "/usr/local/share/locale"
.text:0000000000001CF6                 lea     rdi, domainname ; "coreutils"
.text:0000000000001CFD                 call    _bindtextdomain
.text:0000000000001D02                 lea     rdi, domainname ; "coreutils"
.text:0000000000001D09                 call    _textdomain
.text:0000000000001D0E                 lea     rdi, close_stdout
.text:0000000000001D15                 call    atexit
.text:0000000000001D1A                 mov     [rsp+68h+var_60], 0
.text:0000000000001D23                 nop     dword ptr [rax+rax+00h]
.text:0000000000001D28
.text:0000000000001D28 loc_1D28:                               ; CODE XREF: main+ED↓j
.text:0000000000001D28                                         ; main+10D↓j ...
.text:0000000000001D28                 lea     rcx, long_options ; longopts
.text:0000000000001D2F                 lea     rdx, shortopts  ; "HLPRhvu:r:t:l:"
.text:0000000000001D36                 xor     r8d, r8d        ; longind
.text:0000000000001D39                 mov     rsi, rbx        ; argv
.text:0000000000001D3C                 mov     edi, ebp        ; argc
.text:0000000000001D3E                 call    _getopt_long
.text:0000000000001D43                 cmp     eax, 0FFFFFFFFh
.text:0000000000001D46                 jz      loc_1EA4
.text:0000000000001D4C                 cmp     eax, 6Ch ; 'l'
.text:0000000000001D4F                 jz      short loc_1DCC
.text:0000000000001D51                 jle     short loc_1D90
.text:0000000000001D53                 cmp     eax, 76h ; 'v'
.text:0000000000001D56                 jz      loc_1E7C
.text:0000000000001D5C                 jle     short loc_1DC0
.text:0000000000001D5E                 cmp     eax, 81h
.text:0000000000001D63                 jz      loc_1E9C
.text:0000000000001D69                 jle     loc_1E88
.text:0000000000001D6F                 cmp     eax, 82h
.text:0000000000001D74                 jz      loc_1E71
.text:0000000000001D7A                 cmp     eax, 83h
.text:0000000000001D7F                 jnz     short loc_1DF7
.text:0000000000001D81                 mov     rax, cs:optarg@@GLIBC_2_2_5
.text:0000000000001D88                 mov     [rsp+68h+var_60], rax
.text:0000000000001D8D                 jmp     short loc_1D28
.text:0000000000001D8D ; ---------------------------------------------------------------------------
.text:0000000000001D8F                 align 10h
.text:0000000000001D90
.text:0000000000001D90 loc_1D90:                               ; CODE XREF: main+B1↑j
.text:0000000000001D90                 cmp     eax, 4Ch ; 'L'
.text:0000000000001D93                 jz      loc_1E4A
.text:0000000000001D99                 jle     short loc_1DE0
.text:0000000000001D9B                 cmp     eax, 52h ; 'R'
.text:0000000000001D9E                 jz      loc_1E65
.text:0000000000001DA4                 jle     loc_1E55
.text:0000000000001DAA                 cmp     eax, 66h ; 'f'
.text:0000000000001DAD                 jz      loc_1D28
.text:0000000000001DB3                 cmp     eax, 68h ; 'h'
.text:0000000000001DB6                 jnz     short loc_1DF7
.text:0000000000001DB8                 xor     r14d, r14d
.text:0000000000001DBB                 jmp     loc_1D28
.text:0000000000001DC0 ; ---------------------------------------------------------------------------
.text:0000000000001DC0
.text:0000000000001DC0 loc_1DC0:                               ; CODE XREF: main+BC↑j
.text:0000000000001DC0                 cmp     eax, 74h ; 't'
.text:0000000000001DC3                 jz      short loc_1DCC
.text:0000000000001DC5                 jg      short loc_1DCC
.text:0000000000001DC7                 cmp     eax, 72h ; 'r'
.text:0000000000001DCA                 jnz     short loc_1DF7
.text:0000000000001DCC
.text:0000000000001DCC loc_1DCC:                               ; CODE XREF: main+AF↑j
.text:0000000000001DCC                                         ; main+123↑j ...
.text:0000000000001DCC                 mov     r13d, 1
.text:0000000000001DD2                 jmp     loc_1D28
.text:0000000000001DD2 ; ---------------------------------------------------------------------------
.text:0000000000001DD7                 align 20h
.text:0000000000001DE0
.text:0000000000001DE0 loc_1DE0:                               ; CODE XREF: main+F9↑j
.text:0000000000001DE0                 cmp     eax, 0FFFFFF7Eh
.text:0000000000001DE5                 jz      loc_2662
.text:0000000000001DEB                 cmp     eax, 48h ; 'H'
.text:0000000000001DEE                 jz      short loc_1E3F
.text:0000000000001DF0                 cmp     eax, 0FFFFFF7Dh
.text:0000000000001DF5                 jz      short loc_1E01
.text:0000000000001DF7
.text:0000000000001DF7 loc_1DF7:                               ; CODE XREF: main+DF↑j
.text:0000000000001DF7                                         ; main+116↑j ...
.text:0000000000001DF7                 mov     edi, 1          ; status
.text:0000000000001DFC                 call    usage
.text:0000000000001E01 ; ---------------------------------------------------------------------------
.text:0000000000001E01
.text:0000000000001E01 loc_1E01:                               ; CODE XREF: main+155↑j
.text:0000000000001E01                 sub     rsp, 8
.text:0000000000001E05                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:0000000000001E0C                 mov     rcx, cs:Version
.text:0000000000001E13                 push    0
.text:0000000000001E15                 lea     r9, aJimMeyering ; "Jim Meyering"
.text:0000000000001E1C                 lea     r8, aRussellCoker ; "Russell Coker"
.text:0000000000001E23                 lea     rdx, unk_9C40
.text:0000000000001E2A                 lea     rsi, aChcon     ; "chcon"
.text:0000000000001E31                 xor     eax, eax
.text:0000000000001E33                 call    version_etc
.text:0000000000001E38                 xor     edi, edi        ; status
.text:0000000000001E3A                 call    _exit
.text:0000000000001E3F ; ---------------------------------------------------------------------------
.text:0000000000001E3F
.text:0000000000001E3F loc_1E3F:                               ; CODE XREF: main+14E↑j
.text:0000000000001E3F                 mov     r12d, 11h
.text:0000000000001E45                 jmp     loc_1D28
.text:0000000000001E4A ; ---------------------------------------------------------------------------
.text:0000000000001E4A
.text:0000000000001E4A loc_1E4A:                               ; CODE XREF: main+F3↑j
.text:0000000000001E4A                 mov     r12d, 2
.text:0000000000001E50                 jmp     loc_1D28
.text:0000000000001E55 ; ---------------------------------------------------------------------------
.text:0000000000001E55
.text:0000000000001E55 loc_1E55:                               ; CODE XREF: main+104↑j
.text:0000000000001E55                 cmp     eax, 50h ; 'P'
.text:0000000000001E58                 jnz     short loc_1DF7
.text:0000000000001E5A                 mov     r12d, 10h
.text:0000000000001E60                 jmp     loc_1D28
.text:0000000000001E65 ; ---------------------------------------------------------------------------
.text:0000000000001E65
.text:0000000000001E65 loc_1E65:                               ; CODE XREF: main+FE↑j
.text:0000000000001E65                 mov     cs:recurse, 1
.text:0000000000001E6C                 jmp     loc_1D28
.text:0000000000001E71 ; ---------------------------------------------------------------------------
.text:0000000000001E71
.text:0000000000001E71 loc_1E71:                               ; CODE XREF: main+D4↑j
.text:0000000000001E71                 mov     r15d, 1
.text:0000000000001E77                 jmp     loc_1D28
.text:0000000000001E7C ; ---------------------------------------------------------------------------
.text:0000000000001E7C
.text:0000000000001E7C loc_1E7C:                               ; CODE XREF: main+B6↑j
.text:0000000000001E7C                 mov     cs:verbose, 1
.text:0000000000001E83                 jmp     loc_1D28
.text:0000000000001E88 ; ---------------------------------------------------------------------------
.text:0000000000001E88
.text:0000000000001E88 loc_1E88:                               ; CODE XREF: main+C9↑j
.text:0000000000001E88                 add     eax, 0FFFFFF80h
.text:0000000000001E8B                 jnz     loc_1DF7
.text:0000000000001E91                 mov     r14d, 1
.text:0000000000001E97                 jmp     loc_1D28
.text:0000000000001E9C ; ---------------------------------------------------------------------------
.text:0000000000001E9C
.text:0000000000001E9C loc_1E9C:                               ; CODE XREF: main+C3↑j
.text:0000000000001E9C                 xor     r15d, r15d
.text:0000000000001E9F                 jmp     loc_1D28
.text:0000000000001EA4 ; ---------------------------------------------------------------------------
.text:0000000000001EA4
.text:0000000000001EA4 loc_1EA4:                               ; CODE XREF: main+A6↑j
.text:0000000000001EA4                 movzx   edx, cs:recurse
.text:0000000000001EAB                 test    dl, dl
.text:0000000000001EAD                 jnz     loc_2279
.text:0000000000001EB3                 test    r14d, r14d
.text:0000000000001EB6                 mov     r12d, 10h
.text:0000000000001EBC                 setnz   cs:affect_symlink_referent
.text:0000000000001EC3
.text:0000000000001EC3 loc_1EC3:                               ; CODE XREF: main+5F3↓j
.text:0000000000001EC3                                         ; main+858↓j
.text:0000000000001EC3                 movsxd  r14, cs:optind@@GLIBC_2_2_5
.text:0000000000001ECA                 mov     ecx, ebp
.text:0000000000001ECC                 sub     ecx, r14d
.text:0000000000001ECF                 cmp     [rsp+68h+var_60], 0
.text:0000000000001ED5                 setnz   al
.text:0000000000001ED8                 or      al, r13b
.text:0000000000001EDB                 mov     [rsp+68h+var_51], al
.text:0000000000001EDF                 jz      loc_236F
.text:0000000000001EE5                 test    ecx, ecx
.text:0000000000001EE7                 jle     loc_2378
.text:0000000000001EED                 mov     byte ptr [rsp+68h+var_50], dl
.text:0000000000001EF1                 call    ___errno_location
.text:0000000000001EF6                 cmp     [rsp+68h+var_60], 0
.text:0000000000001EFC                 mov     rbp, rax
.text:0000000000001EFF                 movzx   edx, byte ptr [rsp+68h+var_50]
.text:0000000000001F04                 jnz     loc_2669
.text:0000000000001F0A                 test    dl, dl
.text:0000000000001F0C                 mov     cs:specified_context, 0
.text:0000000000001F17                 jz      short loc_1F22
.text:0000000000001F19                 test    r15b, r15b
.text:0000000000001F1C                 jnz     loc_24FD
.text:0000000000001F22
.text:0000000000001F22 loc_1F22:                               ; CODE XREF: main+277↑j
.text:0000000000001F22                 mov     cs:root_dev_ino, 0
.text:0000000000001F2D
.text:0000000000001F2D loc_1F2D:                               ; CODE XREF: main+87A↓j
.text:0000000000001F2D                 lea     rdi, [rbx+r14*8]
.text:0000000000001F31                 mov     esi, r12d
.text:0000000000001F34                 xor     edx, edx
.text:0000000000001F36                 or      esi, 8
.text:0000000000001F39                 lea     r14, jpt_1F8A
.text:0000000000001F40                 call    xfts_open
.text:0000000000001F45                 mov     r12, rax
.text:0000000000001F48                 lea     rax, [rsp+68h+var_48]
.text:0000000000001F4D                 movzx   ebx, [rsp+68h+var_51]
.text:0000000000001F52                 mov     rdi, r12
.text:0000000000001F55                 mov     [rsp+68h+var_60], rax
.text:0000000000001F5A                 call    rpl_fts_read
.text:0000000000001F5F                 test    rax, rax
.text:0000000000001F62                 mov     r13, rax
.text:0000000000001F65                 jz      loc_2007
.text:0000000000001F6B                 nop     dword ptr [rax+rax+00h]
.text:0000000000001F70
.text:0000000000001F70 loc_1F70:                               ; CODE XREF: main+361↓j
.text:0000000000001F70                 cmp     word ptr [rax+70h], 0Ah ; switch 11 cases
.text:0000000000001F75                 mov     rcx, [rax+38h]
.text:0000000000001F79                 ja      def_1F8A        ; jumptable 0000000000001F8A default case, cases 0,3,5,8,9
.text:0000000000001F7F                 movzx   eax, word ptr [rax+70h]
.text:0000000000001F83                 movsxd  rax, ds:(jpt_1F8A - 0A850h)[r14+rax*4]
.text:0000000000001F87                 add     rax, r14
.text:0000000000001F8A                 jmp     rax             ; switch jump
.text:0000000000001F8C ; ---------------------------------------------------------------------------
.text:0000000000001F8C
.text:0000000000001F8C loc_1F8C:                               ; CODE XREF: main+2EA↑j
.text:0000000000001F8C                                         ; DATA XREF: .rodata:jpt_1F8A↓o
.text:0000000000001F8C                 cmp     qword ptr [r13+58h], 0 ; jumptable 0000000000001F8A case 10
.text:0000000000001F91                 jnz     short loc_1F9E
.text:0000000000001F93                 cmp     qword ptr [r13+20h], 0
.text:0000000000001F98                 jz      loc_234C
.text:0000000000001F9E
.text:0000000000001F9E loc_1F9E:                               ; CODE XREF: main+2F1↑j
.text:0000000000001F9E                 mov     rsi, rcx
.text:0000000000001FA1                 mov     edi, 4
.text:0000000000001FA6                 call    quotearg_style
.text:0000000000001FAB                 lea     rsi, msgid      ; "cannot access %s"
.text:0000000000001FB2                 mov     r15, rax
.text:0000000000001FB5                 mov     edx, 5          ; category
.text:0000000000001FBA
.text:0000000000001FBA loc_1FBA:                               ; CODE XREF: main+5D4↓j
.text:0000000000001FBA                 xor     edi, edi        ; domainname
.text:0000000000001FBC                 call    _dcgettext
.text:0000000000001FC1                 mov     esi, [r13+40h]  ; errnum
.text:0000000000001FC5                 mov     rcx, r15
.text:0000000000001FC8                 mov     rdx, rax        ; format
.text:0000000000001FCB                 xor     edi, edi        ; status
.text:0000000000001FCD                 xor     eax, eax
.text:0000000000001FCF                 xor     r15d, r15d
.text:0000000000001FD2                 call    _error
.text:0000000000001FD7
.text:0000000000001FD7 loc_1FD7:                               ; CODE XREF: main+459↓j
.text:0000000000001FD7                                         ; main+5B3↓j ...
.text:0000000000001FD7                 cmp     cs:recurse, 0
.text:0000000000001FDE                 jnz     short loc_1FF0
.text:0000000000001FE0                 mov     edx, 4
.text:0000000000001FE5                 mov     rsi, r13
.text:0000000000001FE8                 mov     rdi, r12
.text:0000000000001FEB                 call    rpl_fts_set
.text:0000000000001FF0
.text:0000000000001FF0 loc_1FF0:                               ; CODE XREF: main+33E↑j
.text:0000000000001FF0                                         ; main+4B0↓j ...
.text:0000000000001FF0                 mov     rdi, r12
.text:0000000000001FF3                 and     ebx, r15d
.text:0000000000001FF6                 call    rpl_fts_read
.text:0000000000001FFB                 test    rax, rax
.text:0000000000001FFE                 mov     r13, rax
.text:0000000000002001                 jnz     loc_1F70
.text:0000000000002007
.text:0000000000002007 loc_2007:                               ; CODE XREF: main+2C5↑j
.text:0000000000002007                 cmp     dword ptr [rbp+0], 0
.text:000000000000200B                 jnz     loc_2407
.text:0000000000002011
.text:0000000000002011 loc_2011:                               ; CODE XREF: main+78B↓j
.text:0000000000002011                 mov     rdi, r12        ; ptr
.text:0000000000002014                 call    rpl_fts_close
.text:0000000000002019                 test    eax, eax
.text:000000000000201B                 jz      short loc_2041
.text:000000000000201D                 lea     rsi, aFtsCloseFailed ; "fts_close failed"
.text:0000000000002024                 mov     edx, 5          ; category
.text:0000000000002029                 xor     edi, edi        ; domainname
.text:000000000000202B                 xor     ebx, ebx
.text:000000000000202D                 call    _dcgettext
.text:0000000000002032                 mov     esi, [rbp+0]    ; errnum
.text:0000000000002035                 mov     rdx, rax        ; format
.text:0000000000002038                 xor     edi, edi        ; status
.text:000000000000203A                 xor     eax, eax
.text:000000000000203C                 call    _error
.text:0000000000002041
.text:0000000000002041 loc_2041:                               ; CODE XREF: main+37B↑j
.text:0000000000002041                 xor     ebx, 1
.text:0000000000002044                 movzx   eax, bl
.text:0000000000002047                 mov     rbx, [rsp+68h+var_40]
.text:000000000000204C                 xor     rbx, fs:28h
.text:0000000000002055                 jnz     loc_2722
.text:000000000000205B                 add     rsp, 38h
.text:000000000000205F                 pop     rbx
.text:0000000000002060                 pop     rbp
.text:0000000000002061                 pop     r12
.text:0000000000002063                 pop     r13
.text:0000000000002065                 pop     r14
.text:0000000000002067                 pop     r15
.text:0000000000002069                 retn
.text:000000000000206A ; ---------------------------------------------------------------------------
.text:000000000000206A
.text:000000000000206A loc_206A:                               ; CODE XREF: main+2EA↑j
.text:000000000000206A                                         ; DATA XREF: .rodata:jpt_1F8A↓o
.text:000000000000206A                 cmp     cs:recurse, 0   ; jumptable 0000000000001F8A case 6
.text:0000000000002071                 jz      loc_2364
.text:0000000000002077                 mov     rax, cs:root_dev_ino
.text:000000000000207E                 test    rax, rax
.text:0000000000002081                 jz      short def_1F8A  ; jumptable 0000000000001F8A default case, cases 0,3,5,8,9
.text:0000000000002083                 mov     rdx, [rax]
.text:0000000000002086                 cmp     [r13+80h], rdx
.text:000000000000208D                 jz      loc_245B
.text:0000000000002093                 nop     dword ptr [rax+rax+00h]
.text:0000000000002098
.text:0000000000002098 def_1F8A:                               ; CODE XREF: main+2D9↑j
.text:0000000000002098                                         ; main+2EA↑j ...
.text:0000000000002098                 cmp     cs:verbose, 0   ; jumptable 0000000000001F8A default case, cases 0,3,5,8,9
.text:000000000000209F                 mov     r15, [r13+30h]
.text:00000000000020A3                 jnz     loc_2298
.text:00000000000020A9
.text:00000000000020A9 loc_20A9:                               ; CODE XREF: main+631↓j
.text:00000000000020A9                 mov     rcx, cs:specified_context
.text:00000000000020B0                 mov     edi, [r12+2Ch]  ; fd
.text:00000000000020B5                 mov     [rsp+68h+var_48], 0
.text:00000000000020BE                 movzx   eax, cs:affect_symlink_referent
.text:00000000000020C5                 test    rcx, rcx
.text:00000000000020C8                 jz      loc_22D6
.text:00000000000020CE                 test    al, al
.text:00000000000020D0                 mov     rdx, rcx
.text:00000000000020D3                 mov     [rsp+68h+var_50], rcx
.text:00000000000020D8                 mov     rsi, r15
.text:00000000000020DB                 jz      loc_233D
.text:00000000000020E1                 call    setfileconat
.text:00000000000020E6                 mov     rcx, [rsp+68h+var_50]
.text:00000000000020EB
.text:00000000000020EB loc_20EB:                               ; CODE XREF: main+6A7↓j
.text:00000000000020EB                 test    eax, eax
.text:00000000000020ED                 jnz     loc_23A7
.text:00000000000020F3                 movzx   r15d, [rsp+68h+var_51]
.text:00000000000020F9                 jmp     loc_1FD7
.text:00000000000020FE ; ---------------------------------------------------------------------------
.text:00000000000020FE
.text:00000000000020FE loc_20FE:                               ; CODE XREF: main+2EA↑j
.text:00000000000020FE                                         ; DATA XREF: .rodata:jpt_1F8A↓o
.text:00000000000020FE                 mov     rsi, r13        ; jumptable 0000000000001F8A case 2
.text:0000000000002101                 mov     rdi, r12
.text:0000000000002104                 mov     [rsp+68h+var_50], rcx
.text:0000000000002109                 call    cycle_warning_required
.text:000000000000210E                 test    al, al
.text:0000000000002110                 mov     rcx, [rsp+68h+var_50]
.text:0000000000002115                 jz      short def_1F8A  ; jumptable 0000000000001F8A default case, cases 0,3,5,8,9
.text:0000000000002117                 mov     rdx, rcx
.text:000000000000211A                 mov     esi, 3
.text:000000000000211F                 xor     edi, edi
.text:0000000000002121                 call    quotearg_n_style_colon
.text:0000000000002126                 lea     rsi, aWarningCircula ; "WARNING: Circular directory structure."...
.text:000000000000212D                 mov     r15, rax
.text:0000000000002130                 mov     edx, 5          ; category
.text:0000000000002135                 xor     edi, edi        ; domainname
.text:0000000000002137                 call    _dcgettext
.text:000000000000213C                 mov     rcx, r15
.text:000000000000213F                 mov     rdx, rax        ; format
.text:0000000000002142                 xor     esi, esi        ; errnum
.text:0000000000002144                 xor     edi, edi        ; status
.text:0000000000002146                 xor     eax, eax
.text:0000000000002148                 xor     r15d, r15d
.text:000000000000214B                 call    _error
.text:0000000000002150                 jmp     loc_1FF0
.text:0000000000002155 ; ---------------------------------------------------------------------------
.text:0000000000002155
.text:0000000000002155 loc_2155:                               ; CODE XREF: main+2EA↑j
.text:0000000000002155                                         ; DATA XREF: .rodata:jpt_1F8A↓o
.text:0000000000002155                 movzx   r15d, cs:recurse ; jumptable 0000000000001F8A case 1
.text:000000000000215D                 test    r15b, r15b
.text:0000000000002160                 jz      def_1F8A        ; jumptable 0000000000001F8A default case, cases 0,3,5,8,9
.text:0000000000002166                 mov     rax, cs:root_dev_ino
.text:000000000000216D                 test    rax, rax
.text:0000000000002170                 jz      loc_1FF0
.text:0000000000002176                 mov     rdx, [rax]
.text:0000000000002179                 cmp     [r13+80h], rdx
.text:0000000000002180                 jnz     loc_1FF0
.text:0000000000002186                 mov     rax, [rax+8]
.text:000000000000218A                 cmp     [r13+78h], rax
.text:000000000000218E                 jnz     loc_1FF0
.text:0000000000002194                 lea     rsi, aProcSelfFdD+10h ; s2
.text:000000000000219B                 mov     rdi, rcx        ; s1
.text:000000000000219E                 mov     [rsp+68h+var_50], rcx
.text:00000000000021A3                 call    _strcmp
.text:00000000000021A8                 test    eax, eax
.text:00000000000021AA                 mov     rcx, [rsp+68h+var_50]
.text:00000000000021AF                 jnz     loc_25FD
.text:00000000000021B5                 mov     rsi, rcx
.text:00000000000021B8                 mov     edi, 4
.text:00000000000021BD                 call    quotearg_style
.text:00000000000021C2                 lea     rsi, aItIsDangerousT ; "it is dangerous to operate recursively "...
.text:00000000000021C9                 mov     r15, rax
.text:00000000000021CC                 mov     edx, 5          ; category
.text:00000000000021D1                 xor     edi, edi        ; domainname
.text:00000000000021D3                 call    _dcgettext
.text:00000000000021D8                 mov     rcx, r15
.text:00000000000021DB                 mov     rdx, rax        ; format
.text:00000000000021DE                 xor     esi, esi        ; errnum
.text:00000000000021E0                 xor     edi, edi        ; status
.text:00000000000021E2                 xor     eax, eax
.text:00000000000021E4                 call    _error
.text:00000000000021E9
.text:00000000000021E9 loc_21E9:                               ; CODE XREF: main+9BD↓j
.text:00000000000021E9                 lea     rsi, aUseNoPreserveR ; "use --no-preserve-root to override this"...
.text:00000000000021F0                 mov     edx, 5          ; category
.text:00000000000021F5                 xor     edi, edi        ; domainname
.text:00000000000021F7                 xor     r15d, r15d
.text:00000000000021FA                 call    _dcgettext
.text:00000000000021FF                 xor     esi, esi        ; errnum
.text:0000000000002201                 mov     rdx, rax        ; format
.text:0000000000002204                 xor     edi, edi        ; status
.text:0000000000002206                 xor     eax, eax
.text:0000000000002208                 call    _error
.text:000000000000220D                 mov     edx, 4
.text:0000000000002212                 mov     rsi, r13
.text:0000000000002215                 mov     rdi, r12
.text:0000000000002218                 call    rpl_fts_set
.text:000000000000221D                 mov     rdi, r12
.text:0000000000002220                 call    rpl_fts_read
.text:0000000000002225                 jmp     loc_1FF0
.text:000000000000222A ; ---------------------------------------------------------------------------
.text:000000000000222A
.text:000000000000222A loc_222A:                               ; CODE XREF: main+2EA↑j
.text:000000000000222A                                         ; DATA XREF: .rodata:jpt_1F8A↓o
.text:000000000000222A                 mov     rdx, rcx        ; jumptable 0000000000001F8A case 7
.text:000000000000222D                 mov     esi, 3
.text:0000000000002232                 xor     edi, edi
.text:0000000000002234                 call    quotearg_n_style_colon
.text:0000000000002239                 mov     esi, [r13+40h]  ; errnum
.text:000000000000223D                 lea     rdx, format     ; format
.text:0000000000002244                 mov     rcx, rax
.text:0000000000002247                 xor     edi, edi        ; status
.text:0000000000002249                 xor     eax, eax
.text:000000000000224B                 xor     r15d, r15d
.text:000000000000224E                 call    _error
.text:0000000000002253                 jmp     loc_1FD7
.text:0000000000002258 ; ---------------------------------------------------------------------------
.text:0000000000002258
.text:0000000000002258 loc_2258:                               ; CODE XREF: main+2EA↑j
.text:0000000000002258                                         ; DATA XREF: .rodata:jpt_1F8A↓o
.text:0000000000002258                 mov     rsi, rcx        ; jumptable 0000000000001F8A case 4
.text:000000000000225B                 mov     edi, 4
.text:0000000000002260                 call    quotearg_style
.text:0000000000002265                 mov     edx, 5
.text:000000000000226A                 mov     r15, rax
.text:000000000000226D                 lea     rsi, aCannotReadDire ; "cannot read directory %s"
.text:0000000000002274                 jmp     loc_1FBA
.text:0000000000002279 ; ---------------------------------------------------------------------------
.text:0000000000002279
.text:0000000000002279 loc_2279:                               ; CODE XREF: main+20D↑j
.text:0000000000002279                 cmp     r12d, 10h
.text:000000000000227D                 jz      loc_24E7
.text:0000000000002283                 test    r14d, r14d
.text:0000000000002286                 jz      loc_2727
.text:000000000000228C                 mov     cs:affect_symlink_referent, 1
.text:0000000000002293                 jmp     loc_1EC3
.text:0000000000002298 ; ---------------------------------------------------------------------------
.text:0000000000002298
.text:0000000000002298 loc_2298:                               ; CODE XREF: main+403↑j
.text:0000000000002298                 mov     rsi, rcx
.text:000000000000229B                 mov     edi, 4
.text:00000000000022A0                 call    quotearg_style
.text:00000000000022A5                 lea     rsi, aChangingSecuri ; "changing security context of %s\n"
.text:00000000000022AC                 xor     edi, edi        ; domainname
.text:00000000000022AE                 mov     edx, 5          ; category
.text:00000000000022B3                 mov     [rsp+68h+var_50], rax
.text:00000000000022B8                 call    _dcgettext
.text:00000000000022BD                 mov     rdx, [rsp+68h+var_50]
.text:00000000000022C2                 mov     rsi, rax
.text:00000000000022C5                 mov     edi, 1
.text:00000000000022CA                 xor     eax, eax
.text:00000000000022CC                 call    ___printf_chk
.text:00000000000022D1                 jmp     loc_20A9
.text:00000000000022D6 ; ---------------------------------------------------------------------------
.text:00000000000022D6
.text:00000000000022D6 loc_22D6:                               ; CODE XREF: main+428↑j
.text:00000000000022D6                 test    al, al
.text:00000000000022D8                 mov     rdx, [rsp+68h+var_60]
.text:00000000000022DD                 mov     rsi, r15
.text:00000000000022E0                 jz      loc_23FD
.text:00000000000022E6                 call    getfileconat
.text:00000000000022EB
.text:00000000000022EB loc_22EB:                               ; CODE XREF: main+762↓j
.text:00000000000022EB                 test    eax, eax
.text:00000000000022ED                 js      loc_2430
.text:00000000000022F3
.text:00000000000022F3 loc_22F3:                               ; CODE XREF: main+794↓j
.text:00000000000022F3                 mov     rdi, [rsp+68h+var_48]
.text:00000000000022F8                 test    rdi, rdi
.text:00000000000022FB                 jz      loc_255C
.text:0000000000002301                 mov     dword ptr [rbp+0], 5Fh ; '_'
.text:0000000000002308                 call    quote
.text:000000000000230D                 lea     rsi, aFailedToCreate ; "failed to create security context: %s"
.text:0000000000002314                 mov     r15, rax
.text:0000000000002317                 mov     edx, 5          ; category
.text:000000000000231C
.text:000000000000231C loc_231C:                               ; CODE XREF: main+7B6↓j
.text:000000000000231C                 xor     edi, edi        ; domainname
.text:000000000000231E                 call    _dcgettext
.text:0000000000002323                 mov     esi, [rbp+0]    ; errnum
.text:0000000000002326                 mov     rcx, r15
.text:0000000000002329                 mov     rdx, rax        ; format
.text:000000000000232C                 xor     edi, edi        ; status
.text:000000000000232E                 xor     eax, eax
.text:0000000000002330                 xor     r15d, r15d
.text:0000000000002333                 call    _error
.text:0000000000002338                 jmp     loc_1FD7
.text:000000000000233D ; ---------------------------------------------------------------------------
.text:000000000000233D
.text:000000000000233D loc_233D:                               ; CODE XREF: main+43B↑j
.text:000000000000233D                 call    lsetfileconat
.text:0000000000002342                 mov     rcx, [rsp+68h+var_50]
.text:0000000000002347                 jmp     loc_20EB
.text:000000000000234C ; ---------------------------------------------------------------------------
.text:000000000000234C
.text:000000000000234C loc_234C:                               ; CODE XREF: main+2F8↑j
.text:000000000000234C                 mov     qword ptr [r13+20h], 1
.text:0000000000002354                 mov     edx, 1
.text:0000000000002359                 mov     rsi, r13
.text:000000000000235C                 mov     rdi, r12
.text:000000000000235F                 call    rpl_fts_set
.text:0000000000002364
.text:0000000000002364 loc_2364:                               ; CODE XREF: main+3D1↑j
.text:0000000000002364                 movzx   r15d, [rsp+68h+var_51]
.text:000000000000236A                 jmp     loc_1FF0
.text:000000000000236F ; ---------------------------------------------------------------------------
.text:000000000000236F
.text:000000000000236F loc_236F:                               ; CODE XREF: main+23F↑j
.text:000000000000236F                 sub     ecx, 1
.text:0000000000002372                 jg      loc_26A9
.text:0000000000002378
.text:0000000000002378 loc_2378:                               ; CODE XREF: main+247↑j
.text:0000000000002378                 cmp     r14d, ebp
.text:000000000000237B                 jl      loc_274B
.text:0000000000002381                 lea     rsi, aMissingOperand ; "missing operand"
.text:0000000000002388                 xor     edi, edi        ; domainname
.text:000000000000238A                 mov     edx, 5          ; category
.text:000000000000238F                 call    _dcgettext
.text:0000000000002394                 xor     esi, esi        ; errnum
.text:0000000000002396                 mov     rdx, rax        ; format
.text:0000000000002399                 xor     edi, edi        ; status
.text:000000000000239B                 xor     eax, eax
.text:000000000000239D                 call    _error
.text:00000000000023A2                 jmp     loc_1DF7
.text:00000000000023A7 ; ---------------------------------------------------------------------------
.text:00000000000023A7
.text:00000000000023A7 loc_23A7:                               ; CODE XREF: main+44D↑j
.text:00000000000023A7                 mov     rsi, rcx
.text:00000000000023AA                 mov     edi, 1
.text:00000000000023AF                 call    quote_n
.text:00000000000023B4                 mov     rdx, r15
.text:00000000000023B7                 mov     esi, 4
.text:00000000000023BC                 xor     edi, edi
.text:00000000000023BE                 mov     [rsp+68h+var_50], rax
.text:00000000000023C3                 call    quotearg_n_style
.text:00000000000023C8                 lea     rsi, aFailedToChange ; "failed to change context of %s to %s"
.text:00000000000023CF                 mov     edx, 5          ; category
.text:00000000000023D4                 xor     edi, edi        ; domainname
.text:00000000000023D6                 mov     r15, rax
.text:00000000000023D9                 call    _dcgettext
.text:00000000000023DE                 mov     r8, [rsp+68h+var_50]
.text:00000000000023E3                 mov     esi, [rbp+0]    ; errnum
.text:00000000000023E6                 mov     rcx, r15
.text:00000000000023E9                 mov     rdx, rax        ; format
.text:00000000000023EC                 xor     edi, edi        ; status
.text:00000000000023EE                 xor     eax, eax
.text:00000000000023F0                 xor     r15d, r15d
.text:00000000000023F3                 call    _error
.text:00000000000023F8                 jmp     loc_1FD7
.text:00000000000023FD ; ---------------------------------------------------------------------------
.text:00000000000023FD
.text:00000000000023FD loc_23FD:                               ; CODE XREF: main+640↑j
.text:00000000000023FD                 call    lgetfileconat
.text:0000000000002402                 jmp     loc_22EB
.text:0000000000002407 ; ---------------------------------------------------------------------------
.text:0000000000002407
.text:0000000000002407 loc_2407:                               ; CODE XREF: main+36B↑j
.text:0000000000002407                 lea     rsi, aFtsReadFailed ; "fts_read failed"
.text:000000000000240E                 mov     edx, 5          ; category
.text:0000000000002413                 xor     edi, edi        ; domainname
.text:0000000000002415                 xor     ebx, ebx
.text:0000000000002417                 call    _dcgettext
.text:000000000000241C                 mov     esi, [rbp+0]    ; errnum
.text:000000000000241F                 mov     rdx, rax        ; format
.text:0000000000002422                 xor     edi, edi        ; status
.text:0000000000002424                 xor     eax, eax
.text:0000000000002426                 call    _error
.text:000000000000242B                 jmp     loc_2011
.text:0000000000002430 ; ---------------------------------------------------------------------------
.text:0000000000002430
.text:0000000000002430 loc_2430:                               ; CODE XREF: main+64D↑j
.text:0000000000002430                 cmp     dword ptr [rbp+0], 3Dh ; '='
.text:0000000000002434                 jz      loc_22F3
.text:000000000000243A                 mov     rsi, r15
.text:000000000000243D                 mov     edi, 4
.text:0000000000002442                 call    quotearg_style
.text:0000000000002447                 mov     edx, 5
.text:000000000000244C                 mov     r15, rax
.text:000000000000244F                 lea     rsi, aFailedToGetSec ; "failed to get security context of %s"
.text:0000000000002456                 jmp     loc_231C
.text:000000000000245B ; ---------------------------------------------------------------------------
.text:000000000000245B
.text:000000000000245B loc_245B:                               ; CODE XREF: main+3ED↑j
.text:000000000000245B                 mov     rax, [rax+8]
.text:000000000000245F                 cmp     [r13+78h], rax
.text:0000000000002463                 jnz     def_1F8A        ; jumptable 0000000000001F8A default case, cases 0,3,5,8,9
.text:0000000000002469                 lea     rsi, aProcSelfFdD+10h ; s2
.text:0000000000002470                 mov     rdi, rcx        ; s1
.text:0000000000002473                 mov     [rsp+68h+var_50], rcx
.text:0000000000002478                 call    _strcmp
.text:000000000000247D                 test    eax, eax
.text:000000000000247F                 mov     rcx, [rsp+68h+var_50]
.text:0000000000002484                 jnz     loc_2598
.text:000000000000248A                 mov     rsi, rcx
.text:000000000000248D                 mov     edi, 4
.text:0000000000002492                 call    quotearg_style
.text:0000000000002497                 lea     rsi, aItIsDangerousT ; "it is dangerous to operate recursively "...
.text:000000000000249E                 mov     r15, rax
.text:00000000000024A1                 mov     edx, 5          ; category
.text:00000000000024A6                 xor     edi, edi        ; domainname
.text:00000000000024A8                 call    _dcgettext
.text:00000000000024AD                 mov     rcx, r15
.text:00000000000024B0                 mov     rdx, rax        ; format
.text:00000000000024B3                 xor     esi, esi        ; errnum
.text:00000000000024B5                 xor     edi, edi        ; status
.text:00000000000024B7                 xor     eax, eax
.text:00000000000024B9                 call    _error
.text:00000000000024BE
.text:00000000000024BE loc_24BE:                               ; CODE XREF: main+958↓j
.text:00000000000024BE                 lea     rsi, aUseNoPreserveR ; "use --no-preserve-root to override this"...
.text:00000000000024C5                 mov     edx, 5          ; category
.text:00000000000024CA                 xor     edi, edi        ; domainname
.text:00000000000024CC                 xor     r15d, r15d
.text:00000000000024CF                 call    _dcgettext
.text:00000000000024D4                 xor     esi, esi        ; errnum
.text:00000000000024D6                 mov     rdx, rax        ; format
.text:00000000000024D9                 xor     edi, edi        ; status
.text:00000000000024DB                 xor     eax, eax
.text:00000000000024DD                 call    _error
.text:00000000000024E2                 jmp     loc_1FD7
.text:00000000000024E7 ; ---------------------------------------------------------------------------
.text:00000000000024E7
.text:00000000000024E7 loc_24E7:                               ; CODE XREF: main+5DD↑j
.text:00000000000024E7                 sub     r14d, 1
.text:00000000000024EB                 jz      loc_26FE
.text:00000000000024F1                 mov     cs:affect_symlink_referent, 0
.text:00000000000024F8                 jmp     loc_1EC3
.text:00000000000024FD ; ---------------------------------------------------------------------------
.text:00000000000024FD
.text:00000000000024FD loc_24FD:                               ; CODE XREF: main+27C↑j
.text:00000000000024FD                 lea     rdi, dev_ino_buf_7158
.text:0000000000002504                 call    get_root_dev_ino
.text:0000000000002509                 test    rax, rax
.text:000000000000250C                 mov     cs:root_dev_ino, rax
.text:0000000000002513                 movsxd  r14, cs:optind@@GLIBC_2_2_5
.text:000000000000251A                 jnz     loc_1F2D
.text:0000000000002520                 lea     rsi, aProcSelfFdD+10h ; "/"
.text:0000000000002527                 mov     edi, 4
.text:000000000000252C                 call    quotearg_style
.text:0000000000002531                 lea     rsi, aFailedToGetAtt ; "failed to get attributes of %s"
.text:0000000000002538                 mov     edx, 5          ; category
.text:000000000000253D                 xor     edi, edi        ; domainname
.text:000000000000253F                 mov     rbx, rax
.text:0000000000002542                 call    _dcgettext
.text:0000000000002547                 mov     esi, [rbp+0]    ; errnum
.text:000000000000254A                 mov     rdx, rax        ; format
.text:000000000000254D                 mov     rcx, rbx
.text:0000000000002550                 mov     edi, 1          ; status
.text:0000000000002555                 xor     eax, eax
.text:0000000000002557                 call    _error
.text:000000000000255C
.text:000000000000255C loc_255C:                               ; CODE XREF: main+65B↑j
.text:000000000000255C                 mov     rsi, r15
.text:000000000000255F                 mov     edi, 4
.text:0000000000002564                 call    quotearg_style
.text:0000000000002569                 lea     rsi, aCanTApplyParti ; "can't apply partial context to unlabele"...
.text:0000000000002570                 mov     r15, rax
.text:0000000000002573                 mov     edx, 5          ; category
.text:0000000000002578                 xor     edi, edi        ; domainname
.text:000000000000257A                 call    _dcgettext
.text:000000000000257F                 mov     rcx, r15
.text:0000000000002582                 mov     rdx, rax        ; format
.text:0000000000002585                 xor     esi, esi        ; errnum
.text:0000000000002587                 xor     edi, edi        ; status
.text:0000000000002589                 xor     eax, eax
.text:000000000000258B                 xor     r15d, r15d
.text:000000000000258E                 call    _error
.text:0000000000002593                 jmp     loc_1FD7
.text:0000000000002598 ; ---------------------------------------------------------------------------
.text:0000000000002598
.text:0000000000002598 loc_2598:                               ; CODE XREF: main+7E4↑j
.text:0000000000002598                 lea     rdx, aProcSelfFdD+10h ; "/"
.text:000000000000259F                 mov     esi, 4
.text:00000000000025A4                 mov     edi, 1
.text:00000000000025A9                 mov     [rsp+68h+var_50], rcx
.text:00000000000025AE                 call    quotearg_n_style
.text:00000000000025B3                 mov     rcx, [rsp+68h+var_50]
.text:00000000000025B8                 xor     edi, edi
.text:00000000000025BA                 mov     esi, 4
.text:00000000000025BF                 mov     r15, rax
.text:00000000000025C2                 mov     rdx, rcx
.text:00000000000025C5                 call    quotearg_n_style
.text:00000000000025CA                 lea     rsi, aItIsDangerousT_0 ; "it is dangerous to operate recursively "...
.text:00000000000025D1                 xor     edi, edi        ; domainname
.text:00000000000025D3                 mov     edx, 5          ; category
.text:00000000000025D8                 mov     [rsp+68h+var_50], rax
.text:00000000000025DD                 call    _dcgettext
.text:00000000000025E2                 mov     rcx, [rsp+68h+var_50]
.text:00000000000025E7                 mov     rdx, rax        ; format
.text:00000000000025EA                 mov     r8, r15
.text:00000000000025ED                 xor     esi, esi        ; errnum
.text:00000000000025EF                 xor     edi, edi        ; status
.text:00000000000025F1                 xor     eax, eax
.text:00000000000025F3                 call    _error
.text:00000000000025F8                 jmp     loc_24BE
.text:00000000000025FD ; ---------------------------------------------------------------------------
.text:00000000000025FD
.text:00000000000025FD loc_25FD:                               ; CODE XREF: main+50F↑j
.text:00000000000025FD                 lea     rdx, aProcSelfFdD+10h ; "/"
.text:0000000000002604                 mov     esi, 4
.text:0000000000002609                 mov     edi, 1
.text:000000000000260E                 mov     [rsp+68h+var_50], rcx
.text:0000000000002613                 call    quotearg_n_style
.text:0000000000002618                 mov     rcx, [rsp+68h+var_50]
.text:000000000000261D                 xor     edi, edi
.text:000000000000261F                 mov     esi, 4
.text:0000000000002624                 mov     r15, rax
.text:0000000000002627                 mov     rdx, rcx
.text:000000000000262A                 call    quotearg_n_style
.text:000000000000262F                 lea     rsi, aItIsDangerousT_0 ; "it is dangerous to operate recursively "...
.text:0000000000002636                 xor     edi, edi        ; domainname
.text:0000000000002638                 mov     edx, 5          ; category
.text:000000000000263D                 mov     [rsp+68h+var_50], rax
.text:0000000000002642                 call    _dcgettext
.text:0000000000002647                 mov     rcx, [rsp+68h+var_50]
.text:000000000000264C                 mov     rdx, rax        ; format
.text:000000000000264F                 mov     r8, r15
.text:0000000000002652                 xor     esi, esi        ; errnum
.text:0000000000002654                 xor     edi, edi        ; status
.text:0000000000002656                 xor     eax, eax
.text:0000000000002658                 call    _error
.text:000000000000265D                 jmp     loc_21E9
.text:0000000000002662 ; ---------------------------------------------------------------------------
.text:0000000000002662
.text:0000000000002662 loc_2662:                               ; CODE XREF: main+145↑j
.text:0000000000002662                 xor     edi, edi        ; status
.text:0000000000002664                 call    usage
.text:0000000000002669 ; ---------------------------------------------------------------------------
.text:0000000000002669
.text:0000000000002669 loc_2669:                               ; CODE XREF: main+264↑j
.text:0000000000002669                 mov     rsi, [rsp+68h+var_60]
.text:000000000000266E                 mov     edi, 4
.text:0000000000002673                 mov     dword ptr [rax], 5Fh ; '_'
.text:0000000000002679                 call    quotearg_style
.text:000000000000267E                 lea     rsi, aFailedToGetSec ; "failed to get security context of %s"
.text:0000000000002685                 mov     edx, 5          ; category
.text:000000000000268A                 xor     edi, edi        ; domainname
.text:000000000000268C                 mov     rbx, rax
.text:000000000000268F                 call    _dcgettext
.text:0000000000002694                 mov     esi, [rbp+0]    ; errnum
.text:0000000000002697                 mov     rdx, rax        ; format
.text:000000000000269A                 mov     rcx, rbx
.text:000000000000269D                 mov     edi, 1          ; status
.text:00000000000026A2                 xor     eax, eax
.text:00000000000026A4                 call    _error
.text:00000000000026A9
.text:00000000000026A9 loc_26A9:                               ; CODE XREF: main+6D2↑j
.text:00000000000026A9                 mov     rbp, [rbx+r14*8]
.text:00000000000026AD                 lea     eax, [r14+1]
.text:00000000000026B1                 mov     cs:optind@@GLIBC_2_2_5, eax
.text:00000000000026B7                 mov     cs:specified_context, rbp
.text:00000000000026BE                 call    ___errno_location
.text:00000000000026C3                 mov     rdi, rbp
.text:00000000000026C6                 mov     dword ptr [rax], 5Fh ; '_'
.text:00000000000026CC                 mov     rbx, rax
.text:00000000000026CF                 call    quote
.text:00000000000026D4                 lea     rsi, aInvalidContext ; "invalid context: %s"
.text:00000000000026DB                 mov     edx, 5          ; category
.text:00000000000026E0                 xor     edi, edi        ; domainname
.text:00000000000026E2                 mov     rbp, rax
.text:00000000000026E5                 call    _dcgettext
.text:00000000000026EA                 mov     esi, [rbx]      ; errnum
.text:00000000000026EC                 mov     rdx, rax        ; format
.text:00000000000026EF                 mov     rcx, rbp
.text:00000000000026F2                 mov     edi, 1          ; status
.text:00000000000026F7                 xor     eax, eax
.text:00000000000026F9                 call    _error
.text:00000000000026FE
.text:00000000000026FE loc_26FE:                               ; CODE XREF: main+84B↑j
.text:00000000000026FE                 lea     rsi, aRDereferenceRe ; "-R --dereference requires either -H or "...
.text:0000000000002705                 mov     edx, 5          ; category
.text:000000000000270A                 xor     edi, edi        ; domainname
.text:000000000000270C                 call    _dcgettext
.text:0000000000002711                 xor     esi, esi        ; errnum
.text:0000000000002713                 mov     rdx, rax        ; format
.text:0000000000002716                 mov     edi, 1          ; status
.text:000000000000271B                 xor     eax, eax
.text:000000000000271D                 call    _error
.text:0000000000002722
.text:0000000000002722 loc_2722:                               ; CODE XREF: main+3B5↑j
.text:0000000000002722                 call    ___stack_chk_fail
.text:0000000000002727 ; ---------------------------------------------------------------------------
.text:0000000000002727
.text:0000000000002727 loc_2727:                               ; CODE XREF: main+5E6↑j
.text:0000000000002727                 lea     rsi, aRHRequiresP ; "-R -h requires -P"
.text:000000000000272E                 mov     edx, 5          ; category
.text:0000000000002733                 xor     edi, edi        ; domainname
.text:0000000000002735                 call    _dcgettext
.text:000000000000273A                 xor     esi, esi        ; errnum
.text:000000000000273C                 mov     rdx, rax        ; format
.text:000000000000273F                 mov     edi, 1          ; status
.text:0000000000002744                 xor     eax, eax
.text:0000000000002746                 call    _error
.text:000000000000274B
.text:000000000000274B loc_274B:                               ; CODE XREF: main+6DB↑j
.text:000000000000274B                 mov     rdi, [rbx+rbp*8-8]
.text:0000000000002750                 call    quote
.text:0000000000002755                 lea     rsi, aMissingOperand_0 ; "missing operand after %s"
.text:000000000000275C                 mov     rbx, rax
.text:000000000000275F                 xor     edi, edi        ; domainname
.text:0000000000002761                 mov     edx, 5          ; category
.text:0000000000002766                 call    _dcgettext
.text:000000000000276B                 mov     rcx, rbx
.text:000000000000276E                 mov     rdx, rax        ; format
.text:0000000000002771                 xor     esi, esi        ; errnum
.text:0000000000002773                 xor     edi, edi        ; status
.text:0000000000002775                 xor     eax, eax
.text:0000000000002777                 call    _error
.text:000000000000277C                 jmp     loc_1DF7
.text:000000000000277C ; } // starts at 1CA0
.text:000000000000277C main            endp
.text:000000000000277C
.text:000000000000277C ; ---------------------------------------------------------------------------
.text:0000000000002781                 align 10h
.text:0000000000002790
.text:0000000000002790 ; =============== S U B R O U T I N E =======================================
.text:0000000000002790
.text:0000000000002790 ; Attributes: noreturn fuzzy-sp info_from_lumina
.text:0000000000002790
.text:0000000000002790 ; void __fastcall __noreturn start(__int64, __int64, void (*)(void))
.text:0000000000002790                 public start
.text:0000000000002790 start           proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:0000000000002790 ; __unwind {
.text:0000000000002790                 xor     ebp, ebp
.text:0000000000002792                 mov     r9, rdx         ; rtld_fini
.text:0000000000002795                 pop     rsi             ; argc
.text:0000000000002796                 mov     rdx, rsp        ; ubp_av
.text:0000000000002799                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:000000000000279D                 push    rax
.text:000000000000279E                 push    rsp             ; stack_end
.text:000000000000279F                 lea     r8, __libc_csu_fini ; fini
.text:00000000000027A6                 lea     rcx, __libc_csu_init ; init
.text:00000000000027AD                 lea     rdi, main       ; main
.text:00000000000027B4                 call    cs:__libc_start_main_ptr
.text:00000000000027BA                 hlt
.text:00000000000027BA ; } // starts at 2790
.text:00000000000027BA start           endp
.text:00000000000027BA
.text:00000000000027BA ; ---------------------------------------------------------------------------
.text:00000000000027BB                 align 20h
.text:00000000000027C0
.text:00000000000027C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000027C0
.text:00000000000027C0 ; Attributes: bp-based frame info_from_lumina
.text:00000000000027C0
.text:00000000000027C0 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_2873↓p
.text:00000000000027C0                 lea     rdi, __bss_start
.text:00000000000027C7                 push    rbp
.text:00000000000027C8                 lea     rax, __bss_start
.text:00000000000027CF                 cmp     rax, rdi
.text:00000000000027D2                 mov     rbp, rsp
.text:00000000000027D5                 jz      short loc_27F0
.text:00000000000027D7                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:00000000000027DE                 test    rax, rax
.text:00000000000027E1                 jz      short loc_27F0
.text:00000000000027E3                 pop     rbp
.text:00000000000027E4                 jmp     rax
.text:00000000000027E4 ; ---------------------------------------------------------------------------
.text:00000000000027E6                 align 10h
.text:00000000000027F0
.text:00000000000027F0 loc_27F0:                               ; CODE XREF: deregister_tm_clones+15↑j
.text:00000000000027F0                                         ; deregister_tm_clones+21↑j
.text:00000000000027F0                 pop     rbp
.text:00000000000027F1                 retn
.text:00000000000027F1 deregister_tm_clones endp
.text:00000000000027F1
.text:00000000000027F1 ; ---------------------------------------------------------------------------
.text:00000000000027F2                 align 20h
.text:0000000000002800
.text:0000000000002800 ; =============== S U B R O U T I N E =======================================
.text:0000000000002800
.text:0000000000002800 ; Attributes: bp-based frame info_from_lumina
.text:0000000000002800
.text:0000000000002800 register_tm_clones proc near            ; CODE XREF: frame_dummy+5↓j
.text:0000000000002800                 lea     rdi, __bss_start
.text:0000000000002807                 lea     rsi, __bss_start
.text:000000000000280E                 push    rbp
.text:000000000000280F                 sub     rsi, rdi
.text:0000000000002812                 mov     rbp, rsp
.text:0000000000002815                 sar     rsi, 3
.text:0000000000002819                 mov     rax, rsi
.text:000000000000281C                 shr     rax, 3Fh
.text:0000000000002820                 add     rsi, rax
.text:0000000000002823                 sar     rsi, 1
.text:0000000000002826                 jz      short loc_2840
.text:0000000000002828                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:000000000000282F                 test    rax, rax
.text:0000000000002832                 jz      short loc_2840
.text:0000000000002834                 pop     rbp
.text:0000000000002835                 jmp     rax
.text:0000000000002835 ; ---------------------------------------------------------------------------
.text:0000000000002837                 align 20h
.text:0000000000002840
.text:0000000000002840 loc_2840:                               ; CODE XREF: register_tm_clones+26↑j
.text:0000000000002840                                         ; register_tm_clones+32↑j
.text:0000000000002840                 pop     rbp
.text:0000000000002841                 retn
.text:0000000000002841 register_tm_clones endp
.text:0000000000002841
.text:0000000000002841 ; ---------------------------------------------------------------------------
.text:0000000000002842                 align 10h
.text:0000000000002850
.text:0000000000002850 ; =============== S U B R O U T I N E =======================================
.text:0000000000002850
.text:0000000000002850 ; Attributes: info_from_lumina
.text:0000000000002850
.text:0000000000002850 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:0000000000002850                 cmp     cs:completed_7697, 0
.text:0000000000002857                 jnz     short locret_2888
.text:0000000000002859                 cmp     cs:__cxa_finalize_ptr, 0
.text:0000000000002861                 push    rbp
.text:0000000000002862                 mov     rbp, rsp
.text:0000000000002865                 jz      short loc_2873
.text:0000000000002867                 mov     rdi, cs:__dso_handle ; void *
.text:000000000000286E                 call    __cxa_finalize
.text:0000000000002873
.text:0000000000002873 loc_2873:                               ; CODE XREF: __do_global_dtors_aux+15↑j
.text:0000000000002873                 call    deregister_tm_clones
.text:0000000000002878                 mov     cs:completed_7697, 1
.text:000000000000287F                 pop     rbp
.text:0000000000002880                 retn
.text:0000000000002880 ; ---------------------------------------------------------------------------
.text:0000000000002881                 align 8
.text:0000000000002888
.text:0000000000002888 locret_2888:                            ; CODE XREF: __do_global_dtors_aux+7↑j
.text:0000000000002888                 rep retn
.text:0000000000002888 __do_global_dtors_aux endp
.text:0000000000002888
.text:0000000000002888 ; ---------------------------------------------------------------------------
.text:000000000000288A                 align 10h
.text:0000000000002890
.text:0000000000002890 ; =============== S U B R O U T I N E =======================================
.text:0000000000002890
.text:0000000000002890 ; Attributes: bp-based frame
.text:0000000000002890
.text:0000000000002890 frame_dummy     proc near               ; CODE XREF: __libc_csu_init+49↓p
.text:0000000000002890                                         ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:0000000000002890                 push    rbp
.text:0000000000002891                 mov     rbp, rsp
.text:0000000000002894                 pop     rbp
.text:0000000000002895                 jmp     register_tm_clones
.text:0000000000002895 frame_dummy     endp
.text:0000000000002895
.text:0000000000002895 ; ---------------------------------------------------------------------------
.text:000000000000289A                 align 20h
.text:00000000000028A0
.text:00000000000028A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000028A0
.text:00000000000028A0 ; Attributes: noreturn
.text:00000000000028A0
.text:00000000000028A0 ; void __fastcall __noreturn usage(int status)
.text:00000000000028A0                 public usage
.text:00000000000028A0 usage           proc near               ; CODE XREF: main+15C↑p
.text:00000000000028A0                                         ; main+9C4↑p
.text:00000000000028A0
.text:00000000000028A0 var_A8          = qword ptr -0A8h
.text:00000000000028A0 var_A0          = qword ptr -0A0h
.text:00000000000028A0 var_98          = qword ptr -98h
.text:00000000000028A0 var_90          = qword ptr -90h
.text:00000000000028A0 var_88          = qword ptr -88h
.text:00000000000028A0 var_80          = qword ptr -80h
.text:00000000000028A0 var_78          = qword ptr -78h
.text:00000000000028A0 var_70          = qword ptr -70h
.text:00000000000028A0 var_68          = qword ptr -68h
.text:00000000000028A0 var_60          = qword ptr -60h
.text:00000000000028A0 var_58          = qword ptr -58h
.text:00000000000028A0 var_50          = qword ptr -50h
.text:00000000000028A0 var_48          = qword ptr -48h
.text:00000000000028A0 var_40          = qword ptr -40h
.text:00000000000028A0 var_30          = qword ptr -30h
.text:00000000000028A0
.text:00000000000028A0 ; __unwind {
.text:00000000000028A0                 push    r13
.text:00000000000028A2                 push    r12
.text:00000000000028A4                 mov     edx, 5          ; category
.text:00000000000028A9                 push    rbp
.text:00000000000028AA                 push    rbx
.text:00000000000028AB                 mov     ebp, edi
.text:00000000000028AD                 sub     rsp, 88h
.text:00000000000028B4                 mov     rbx, cs:program_name
.text:00000000000028BB                 mov     rax, fs:28h
.text:00000000000028C4                 mov     [rsp+0A8h+var_30], rax
.text:00000000000028C9                 xor     eax, eax
.text:00000000000028CB                 test    edi, edi
.text:00000000000028CD                 jz      short loc_28FD
.text:00000000000028CF                 lea     rsi, aTrySHelpForMor ; "Try '%s --help' for more information.\n"
.text:00000000000028D6                 xor     edi, edi        ; domainname
.text:00000000000028D8                 call    _dcgettext
.text:00000000000028DD                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:00000000000028E4                 mov     rdx, rax
.text:00000000000028E7                 mov     rcx, rbx
.text:00000000000028EA                 mov     esi, 1
.text:00000000000028EF                 xor     eax, eax
.text:00000000000028F1                 call    ___fprintf_chk
.text:00000000000028F6
.text:00000000000028F6 loc_28F6:                               ; CODE XREF: usage+3A6↓j
.text:00000000000028F6                 mov     edi, ebp        ; status
.text:00000000000028F8                 call    _exit
.text:00000000000028FD ; ---------------------------------------------------------------------------
.text:00000000000028FD
.text:00000000000028FD loc_28FD:                               ; CODE XREF: usage+2D↑j
.text:00000000000028FD                 lea     rsi, aUsageSOptionCo ; "Usage: %s [OPTION]... CONTEXT FILE...\n"...
.text:0000000000002904                 xor     edi, edi        ; domainname
.text:0000000000002906                 call    _dcgettext
.text:000000000000290B                 mov     rcx, rbx
.text:000000000000290E                 mov     r8, rbx
.text:0000000000002911                 mov     rdx, rbx
.text:0000000000002914                 mov     rsi, rax
.text:0000000000002917                 mov     edi, 1
.text:000000000000291C                 xor     eax, eax
.text:000000000000291E                 call    ___printf_chk
.text:0000000000002923                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000292A                 lea     rsi, aChangeTheSelin ; "Change the SELinux security context of "...
.text:0000000000002931                 mov     edx, 5          ; category
.text:0000000000002936                 xor     edi, edi        ; domainname
.text:0000000000002938                 call    _dcgettext
.text:000000000000293D                 mov     rsi, rbx        ; stream
.text:0000000000002940                 mov     rdi, rax        ; s
.text:0000000000002943                 call    _fputs_unlocked
.text:0000000000002948                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000294F                 lea     rsi, aMandatoryArgum ; "\nMandatory arguments to long options a"...
.text:0000000000002956                 mov     edx, 5          ; category
.text:000000000000295B                 xor     edi, edi        ; domainname
.text:000000000000295D                 call    _dcgettext
.text:0000000000002962                 mov     rsi, rbx        ; stream
.text:0000000000002965                 mov     rdi, rax        ; s
.text:0000000000002968                 call    _fputs_unlocked
.text:000000000000296D                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002974                 lea     rsi, aDereferenceAff ; "      --dereference      affect the ref"...
.text:000000000000297B                 mov     edx, 5          ; category
.text:0000000000002980                 xor     edi, edi        ; domainname
.text:0000000000002982                 call    _dcgettext
.text:0000000000002987                 mov     rsi, rbx        ; stream
.text:000000000000298A                 mov     rdi, rax        ; s
.text:000000000000298D                 call    _fputs_unlocked
.text:0000000000002992                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002999                 lea     rsi, aUUserUserSetUs ; "  -u, --user=USER        set user USER "...
.text:00000000000029A0                 mov     edx, 5          ; category
.text:00000000000029A5                 xor     edi, edi        ; domainname
.text:00000000000029A7                 call    _dcgettext
.text:00000000000029AC                 mov     rsi, rbx        ; stream
.text:00000000000029AF                 mov     rdi, rax        ; s
.text:00000000000029B2                 call    _fputs_unlocked
.text:00000000000029B7                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000029BE                 lea     rsi, aNoPreserveRoot ; "      --no-preserve-root  do not treat "...
.text:00000000000029C5                 mov     edx, 5          ; category
.text:00000000000029CA                 xor     edi, edi        ; domainname
.text:00000000000029CC                 call    _dcgettext
.text:00000000000029D1                 mov     rsi, rbx        ; stream
.text:00000000000029D4                 mov     rdi, rax        ; s
.text:00000000000029D7                 call    _fputs_unlocked
.text:00000000000029DC                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000029E3                 lea     rsi, aReferenceRfile ; "      --reference=RFILE  use RFILE's se"...
.text:00000000000029EA                 mov     edx, 5          ; category
.text:00000000000029EF                 xor     edi, edi        ; domainname
.text:00000000000029F1                 call    _dcgettext
.text:00000000000029F6                 mov     rsi, rbx        ; stream
.text:00000000000029F9                 mov     rdi, rax        ; s
.text:00000000000029FC                 call    _fputs_unlocked
.text:0000000000002A01                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002A08                 lea     rsi, aRRecursiveOper ; "  -R, --recursive        operate on fil"...
.text:0000000000002A0F                 mov     edx, 5          ; category
.text:0000000000002A14                 xor     edi, edi        ; domainname
.text:0000000000002A16                 call    _dcgettext
.text:0000000000002A1B                 mov     rsi, rbx        ; stream
.text:0000000000002A1E                 mov     rdi, rax        ; s
.text:0000000000002A21                 call    _fputs_unlocked
.text:0000000000002A26                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002A2D                 lea     rsi, aVVerboseOutput ; "  -v, --verbose          output a diagn"...
.text:0000000000002A34                 mov     edx, 5          ; category
.text:0000000000002A39                 xor     edi, edi        ; domainname
.text:0000000000002A3B                 call    _dcgettext
.text:0000000000002A40                 mov     rsi, rbx        ; stream
.text:0000000000002A43                 mov     rdi, rax        ; s
.text:0000000000002A46                 call    _fputs_unlocked
.text:0000000000002A4B                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002A52                 lea     rsi, aTheFollowingOp ; "\nThe following options modify how a hi"...
.text:0000000000002A59                 mov     edx, 5          ; category
.text:0000000000002A5E                 xor     edi, edi        ; domainname
.text:0000000000002A60                 call    _dcgettext
.text:0000000000002A65                 mov     rsi, rbx        ; stream
.text:0000000000002A68                 mov     rdi, rax        ; s
.text:0000000000002A6B                 call    _fputs_unlocked
.text:0000000000002A70                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002A77                 lea     rsi, aHelpDisplayThi ; "      --help     display this help and "...
.text:0000000000002A7E                 mov     edx, 5          ; category
.text:0000000000002A83                 xor     edi, edi        ; domainname
.text:0000000000002A85                 call    _dcgettext
.text:0000000000002A8A                 mov     rsi, rbx        ; stream
.text:0000000000002A8D                 mov     rdi, rax        ; s
.text:0000000000002A90                 call    _fputs_unlocked
.text:0000000000002A95                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002A9C                 lea     rsi, aVersionOutputV ; "      --version  output version informa"...
.text:0000000000002AA3                 mov     edx, 5          ; category
.text:0000000000002AA8                 xor     edi, edi        ; domainname
.text:0000000000002AAA                 call    _dcgettext
.text:0000000000002AAF                 mov     rsi, rbx        ; stream
.text:0000000000002AB2                 mov     rdi, rax        ; s
.text:0000000000002AB5                 lea     rbx, aChcon     ; "chcon"
.text:0000000000002ABC                 call    _fputs_unlocked
.text:0000000000002AC1                 lea     rax, asc_9BCA   ; "["
.text:0000000000002AC8                 lea     rcx, aSha256sum ; "sha256sum"
.text:0000000000002ACF                 mov     [rsp+0A8h+var_48], 0
.text:0000000000002AD8                 mov     [rsp+0A8h+var_40], 0
.text:0000000000002AE1                 mov     rdx, rsp
.text:0000000000002AE4                 mov     [rsp+0A8h+var_A8], rax
.text:0000000000002AE8                 lea     rax, aTestInvocation ; "test invocation"
.text:0000000000002AEF                 mov     [rsp+0A8h+var_78], rcx
.text:0000000000002AF4                 lea     rcx, aSha384sum ; "sha384sum"
.text:0000000000002AFB                 mov     [rsp+0A8h+var_A0], rax
.text:0000000000002B00                 lea     rax, domainname ; "coreutils"
.text:0000000000002B07                 mov     [rsp+0A8h+var_68], rcx
.text:0000000000002B0C                 lea     rcx, aSha512sum ; "sha512sum"
.text:0000000000002B13                 mov     [rsp+0A8h+var_98], rax
.text:0000000000002B18                 lea     rax, aMultiCallInvoc ; "Multi-call invocation"
.text:0000000000002B1F                 mov     [rsp+0A8h+var_58], rcx
.text:0000000000002B24                 mov     [rsp+0A8h+var_90], rax
.text:0000000000002B29                 lea     rax, aSha224sum ; "sha224sum"
.text:0000000000002B30                 mov     [rsp+0A8h+var_88], rax
.text:0000000000002B35                 lea     rax, aSha2Utilities ; "sha2 utilities"
.text:0000000000002B3C                 mov     [rsp+0A8h+var_80], rax
.text:0000000000002B41                 mov     [rsp+0A8h+var_70], rax
.text:0000000000002B46                 mov     [rsp+0A8h+var_60], rax
.text:0000000000002B4B                 mov     [rsp+0A8h+var_50], rax
.text:0000000000002B50
.text:0000000000002B50 loc_2B50:                               ; CODE XREF: usage+2CD↓j
.text:0000000000002B50                 add     rdx, 10h
.text:0000000000002B54                 mov     rdi, [rdx]
.text:0000000000002B57                 test    rdi, rdi
.text:0000000000002B5A                 jz      short loc_2B6F
.text:0000000000002B5C                 mov     ecx, 6
.text:0000000000002B61                 mov     rsi, rbx
.text:0000000000002B64                 repe cmpsb
.text:0000000000002B66                 setnbe  al
.text:0000000000002B69                 sbb     al, 0
.text:0000000000002B6B                 test    al, al
.text:0000000000002B6D                 jnz     short loc_2B50
.text:0000000000002B6F
.text:0000000000002B6F loc_2B6F:                               ; CODE XREF: usage+2BA↑j
.text:0000000000002B6F                 mov     r12, [rdx+8]
.text:0000000000002B73                 xor     edi, edi        ; domainname
.text:0000000000002B75                 mov     edx, 5          ; category
.text:0000000000002B7A                 lea     rsi, aSOnlineHelpS ; "\n%s online help: <%s>\n"
.text:0000000000002B81                 test    r12, r12
.text:0000000000002B84                 jz      loc_2C4B
.text:0000000000002B8A                 call    _dcgettext
.text:0000000000002B8F                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000002B96                 lea     rdx, unk_9C40
.text:0000000000002B9D                 mov     rsi, rax
.text:0000000000002BA0                 mov     edi, 1
.text:0000000000002BA5                 xor     eax, eax
.text:0000000000002BA7                 call    ___printf_chk
.text:0000000000002BAC                 xor     esi, esi        ; locale
.text:0000000000002BAE                 mov     edi, 5          ; category
.text:0000000000002BB3                 call    _setlocale
.text:0000000000002BB8                 test    rax, rax
.text:0000000000002BBB                 jz      short loc_2BD9
.text:0000000000002BBD                 lea     rsi, s2         ; "en_"
.text:0000000000002BC4                 mov     edx, 3          ; n
.text:0000000000002BC9                 mov     rdi, rax        ; s1
.text:0000000000002BCC                 call    _strncmp
.text:0000000000002BD1                 test    eax, eax
.text:0000000000002BD3                 jnz     loc_2CE0
.text:0000000000002BD9
.text:0000000000002BD9 loc_2BD9:                               ; CODE XREF: usage+31B↑j
.text:0000000000002BD9                                         ; usage+465↓j
.text:0000000000002BD9                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000002BE0                 xor     edi, edi        ; domainname
.text:0000000000002BE2                 mov     edx, 5          ; category
.text:0000000000002BE7                 call    _dcgettext
.text:0000000000002BEC                 lea     rcx, aChcon     ; "chcon"
.text:0000000000002BF3                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000002BFA                 mov     rsi, rax
.text:0000000000002BFD                 mov     edi, 1
.text:0000000000002C02                 xor     eax, eax
.text:0000000000002C04                 call    ___printf_chk
.text:0000000000002C09                 cmp     r12, rbx
.text:0000000000002C0C                 lea     rcx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000002C13                 lea     rbx, aWrittenBySSAnd+1Bh ; ""
.text:0000000000002C1A                 cmovz   rbx, rcx
.text:0000000000002C1E
.text:0000000000002C1E loc_2C1E:                               ; CODE XREF: usage+434↓j
.text:0000000000002C1E                 lea     rsi, aOrAvailableLoc ; "or available locally via: info '(coreut"...
.text:0000000000002C25                 xor     edi, edi        ; domainname
.text:0000000000002C27                 mov     edx, 5          ; category
.text:0000000000002C2C                 call    _dcgettext
.text:0000000000002C31                 mov     rcx, rbx
.text:0000000000002C34                 mov     rsi, rax
.text:0000000000002C37                 mov     rdx, r12
.text:0000000000002C3A                 mov     edi, 1
.text:0000000000002C3F                 xor     eax, eax
.text:0000000000002C41                 call    ___printf_chk
.text:0000000000002C46                 jmp     loc_28F6
.text:0000000000002C4B ; ---------------------------------------------------------------------------
.text:0000000000002C4B
.text:0000000000002C4B loc_2C4B:                               ; CODE XREF: usage+2E4↑j
.text:0000000000002C4B                 call    _dcgettext
.text:0000000000002C50                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000002C57                 lea     rdx, unk_9C40
.text:0000000000002C5E                 mov     rsi, rax
.text:0000000000002C61                 mov     edi, 1
.text:0000000000002C66                 xor     eax, eax
.text:0000000000002C68                 call    ___printf_chk
.text:0000000000002C6D                 xor     esi, esi        ; locale
.text:0000000000002C6F                 mov     edi, 5          ; category
.text:0000000000002C74                 call    _setlocale
.text:0000000000002C79                 test    rax, rax
.text:0000000000002C7C                 jz      short loc_2C96
.text:0000000000002C7E                 lea     rsi, s2         ; "en_"
.text:0000000000002C85                 mov     edx, 3          ; n
.text:0000000000002C8A                 mov     rdi, rax        ; s1
.text:0000000000002C8D                 call    _strncmp
.text:0000000000002C92                 test    eax, eax
.text:0000000000002C94                 jnz     short loc_2CD9
.text:0000000000002C96
.text:0000000000002C96 loc_2C96:                               ; CODE XREF: usage+3DC↑j
.text:0000000000002C96                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000002C9D                 mov     edx, 5          ; category
.text:0000000000002CA2                 xor     edi, edi        ; domainname
.text:0000000000002CA4                 lea     r12, aChcon     ; "chcon"
.text:0000000000002CAB                 lea     rbx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000002CB2                 call    _dcgettext
.text:0000000000002CB7                 lea     rcx, aChcon     ; "chcon"
.text:0000000000002CBE                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000002CC5                 mov     rsi, rax
.text:0000000000002CC8                 mov     edi, 1
.text:0000000000002CCD                 xor     eax, eax
.text:0000000000002CCF                 call    ___printf_chk
.text:0000000000002CD4                 jmp     loc_2C1E
.text:0000000000002CD9 ; ---------------------------------------------------------------------------
.text:0000000000002CD9
.text:0000000000002CD9 loc_2CD9:                               ; CODE XREF: usage+3F4↑j
.text:0000000000002CD9                 lea     r12, aChcon     ; "chcon"
.text:0000000000002CE0
.text:0000000000002CE0 loc_2CE0:                               ; CODE XREF: usage+333↑j
.text:0000000000002CE0                 mov     r13, cs:stdout@@GLIBC_2_2_5
.text:0000000000002CE7                 lea     rsi, aReportAnyTrans ; "Report any translation bugs to <https:/"...
.text:0000000000002CEE                 xor     edi, edi        ; domainname
.text:0000000000002CF0                 mov     edx, 5          ; category
.text:0000000000002CF5                 call    _dcgettext
.text:0000000000002CFA                 mov     rsi, r13        ; stream
.text:0000000000002CFD                 mov     rdi, rax        ; s
.text:0000000000002D00                 call    _fputs_unlocked
.text:0000000000002D05                 jmp     loc_2BD9
.text:0000000000002D05 ; } // starts at 28A0
.text:0000000000002D05 usage           endp
.text:0000000000002D05
.text:0000000000002D05 ; ---------------------------------------------------------------------------
.text:0000000000002D0A                 align 10h
.text:0000000000002D10
.text:0000000000002D10 ; =============== S U B R O U T I N E =======================================
.text:0000000000002D10
.text:0000000000002D10
.text:0000000000002D10                 public close_stdout_set_file_name
.text:0000000000002D10 close_stdout_set_file_name proc near
.text:0000000000002D10 ; __unwind {
.text:0000000000002D10                 mov     cs:file_name, rdi
.text:0000000000002D17                 retn
.text:0000000000002D17 ; } // starts at 2D10
.text:0000000000002D17 close_stdout_set_file_name endp
.text:0000000000002D17
.text:0000000000002D17 ; ---------------------------------------------------------------------------
.text:0000000000002D18                 align 20h
.text:0000000000002D20
.text:0000000000002D20 ; =============== S U B R O U T I N E =======================================
.text:0000000000002D20
.text:0000000000002D20
.text:0000000000002D20                 public close_stdout_set_ignore_EPIPE
.text:0000000000002D20 close_stdout_set_ignore_EPIPE proc near
.text:0000000000002D20 ; __unwind {
.text:0000000000002D20                 mov     cs:ignore_EPIPE, dil
.text:0000000000002D27                 retn
.text:0000000000002D27 ; } // starts at 2D20
.text:0000000000002D27 close_stdout_set_ignore_EPIPE endp
.text:0000000000002D27
.text:0000000000002D27 ; ---------------------------------------------------------------------------
.text:0000000000002D28                 align 10h
.text:0000000000002D30
.text:0000000000002D30 ; =============== S U B R O U T I N E =======================================
.text:0000000000002D30
.text:0000000000002D30 ; Attributes: info_from_lumina
.text:0000000000002D30
.text:0000000000002D30 ; void __cdecl close_stdout()
.text:0000000000002D30                 public close_stdout
.text:0000000000002D30 close_stdout    proc near               ; DATA XREF: main+6E↑o
.text:0000000000002D30 ; __unwind {
.text:0000000000002D30                 push    rbp
.text:0000000000002D31                 push    rbx
.text:0000000000002D32                 sub     rsp, 8
.text:0000000000002D36                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000002D3D                 call    close_stream
.text:0000000000002D42                 test    eax, eax
.text:0000000000002D44                 jz      short loc_2D5C
.text:0000000000002D46                 call    ___errno_location
.text:0000000000002D4B                 cmp     cs:ignore_EPIPE, 0
.text:0000000000002D52                 mov     rbx, rax
.text:0000000000002D55                 jz      short loc_2D73
.text:0000000000002D57                 cmp     dword ptr [rax], 20h ; ' '
.text:0000000000002D5A                 jnz     short loc_2D73
.text:0000000000002D5C
.text:0000000000002D5C loc_2D5C:                               ; CODE XREF: close_stdout+14↑j
.text:0000000000002D5C                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:0000000000002D63                 call    close_stream
.text:0000000000002D68                 test    eax, eax
.text:0000000000002D6A                 jnz     short loc_2DB2
.text:0000000000002D6C                 add     rsp, 8
.text:0000000000002D70                 pop     rbx
.text:0000000000002D71                 pop     rbp
.text:0000000000002D72                 retn
.text:0000000000002D73 ; ---------------------------------------------------------------------------
.text:0000000000002D73
.text:0000000000002D73 loc_2D73:                               ; CODE XREF: close_stdout+25↑j
.text:0000000000002D73                                         ; close_stdout+2A↑j
.text:0000000000002D73                 lea     rsi, aWriteError ; "write error"
.text:0000000000002D7A                 xor     edi, edi        ; domainname
.text:0000000000002D7C                 mov     edx, 5          ; category
.text:0000000000002D81                 call    _dcgettext
.text:0000000000002D86                 mov     rdi, cs:file_name
.text:0000000000002D8D                 mov     rbp, rax
.text:0000000000002D90                 test    rdi, rdi
.text:0000000000002D93                 jz      short loc_2DBD
.text:0000000000002D95                 call    quotearg_colon
.text:0000000000002D9A                 mov     esi, [rbx]      ; errnum
.text:0000000000002D9C                 lea     rdx, aS         ; "%s: "
.text:0000000000002DA3                 mov     rcx, rax
.text:0000000000002DA6                 mov     r8, rbp
.text:0000000000002DA9                 xor     edi, edi        ; status
.text:0000000000002DAB                 xor     eax, eax
.text:0000000000002DAD                 call    _error
.text:0000000000002DB2
.text:0000000000002DB2 loc_2DB2:                               ; CODE XREF: close_stdout+3A↑j
.text:0000000000002DB2                                         ; close_stdout+A2↓j
.text:0000000000002DB2                 mov     edi, cs:exit_failure ; status
.text:0000000000002DB8                 call    __exit
.text:0000000000002DBD ; ---------------------------------------------------------------------------
.text:0000000000002DBD
.text:0000000000002DBD loc_2DBD:                               ; CODE XREF: close_stdout+63↑j
.text:0000000000002DBD                 mov     esi, [rbx]      ; errnum
.text:0000000000002DBF                 lea     rdx, format     ; format
.text:0000000000002DC6                 mov     rcx, rax
.text:0000000000002DC9                 xor     edi, edi        ; status
.text:0000000000002DCB                 xor     eax, eax
.text:0000000000002DCD                 call    _error
.text:0000000000002DD2                 jmp     short loc_2DB2
.text:0000000000002DD2 ; } // starts at 2D30
.text:0000000000002DD2 close_stdout    endp
.text:0000000000002DD2
.text:0000000000002DD2 ; ---------------------------------------------------------------------------
.text:0000000000002DD4                 align 20h
.text:0000000000002DE0
.text:0000000000002DE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000002DE0
.text:0000000000002DE0
.text:0000000000002DE0                 public set_program_name
.text:0000000000002DE0 set_program_name proc near              ; CODE XREF: main+39↑p
.text:0000000000002DE0 ; __unwind {
.text:0000000000002DE0                 test    rdi, rdi
.text:0000000000002DE3                 push    rbx
.text:0000000000002DE4                 jz      short loc_2E5D
.text:0000000000002DE6                 mov     esi, 2Fh ; '/'  ; c
.text:0000000000002DEB                 mov     rbx, rdi
.text:0000000000002DEE                 call    _strrchr
.text:0000000000002DF3                 test    rax, rax
.text:0000000000002DF6                 jz      short loc_2E4D
.text:0000000000002DF8                 lea     r8, [rax+1]
.text:0000000000002DFC                 mov     rdx, r8
.text:0000000000002DFF                 sub     rdx, rbx
.text:0000000000002E02                 cmp     rdx, 6
.text:0000000000002E06                 jle     short loc_2E4D
.text:0000000000002E08                 lea     rsi, [rax-6]
.text:0000000000002E0C                 lea     rdi, aLibs      ; "/.libs/"
.text:0000000000002E13                 mov     ecx, 7
.text:0000000000002E18                 repe cmpsb
.text:0000000000002E1A                 setnbe  dl
.text:0000000000002E1D                 sbb     dl, 0
.text:0000000000002E20                 test    dl, dl
.text:0000000000002E22                 jnz     short loc_2E4D
.text:0000000000002E24                 lea     rdi, aLt        ; "lt-"
.text:0000000000002E2B                 mov     ecx, 3
.text:0000000000002E30                 mov     rsi, r8
.text:0000000000002E33                 mov     rbx, r8
.text:0000000000002E36                 repe cmpsb
.text:0000000000002E38                 setnbe  dl
.text:0000000000002E3B                 sbb     dl, 0
.text:0000000000002E3E                 test    dl, dl
.text:0000000000002E40                 jnz     short loc_2E4D
.text:0000000000002E42                 lea     rbx, [rax+4]
.text:0000000000002E46                 mov     cs:__bss_start, rbx
.text:0000000000002E4D
.text:0000000000002E4D loc_2E4D:                               ; CODE XREF: set_program_name+16↑j
.text:0000000000002E4D                                         ; set_program_name+26↑j ...
.text:0000000000002E4D                 mov     cs:program_name, rbx
.text:0000000000002E54                 mov     cs:program_invocation_name@@GLIBC_2_2_5, rbx
.text:0000000000002E5B                 pop     rbx
.text:0000000000002E5C                 retn
.text:0000000000002E5D ; ---------------------------------------------------------------------------
.text:0000000000002E5D
.text:0000000000002E5D loc_2E5D:                               ; CODE XREF: set_program_name+4↑j
.text:0000000000002E5D                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:0000000000002E64                 lea     rdi, aANullArgv0WasP ; "A NULL argv[0] was passed through an ex"...
.text:0000000000002E6B                 mov     edx, 37h ; '7'  ; n
.text:0000000000002E70                 mov     esi, 1          ; size
.text:0000000000002E75                 call    _fwrite
.text:0000000000002E7A                 call    _abort
.text:0000000000002E7A ; } // starts at 2DE0
.text:0000000000002E7A set_program_name endp
.text:0000000000002E7A
.text:0000000000002E7A ; ---------------------------------------------------------------------------
.text:0000000000002E7F                 align 20h
.text:0000000000002E80
.text:0000000000002E80 ; =============== S U B R O U T I N E =======================================
.text:0000000000002E80
.text:0000000000002E80 ; Attributes: info_from_lumina
.text:0000000000002E80
.text:0000000000002E80 ; const char *__fastcall gettext_quote(const char *msgid, quoting_style s)
.text:0000000000002E80 gettext_quote   proc near               ; CODE XREF: quotearg_buffer_restyled+1165↓p
.text:0000000000002E80                                         ; quotearg_buffer_restyled+117B↓p
.text:0000000000002E80 ; __unwind {
.text:0000000000002E80                 push    rbp
.text:0000000000002E81                 push    rbx
.text:0000000000002E82                 mov     rbp, rdi
.text:0000000000002E85                 mov     ebx, esi
.text:0000000000002E87                 sub     rsp, 8
.text:0000000000002E8B                 call    locale_charset
.text:0000000000002E90                 movzx   edx, byte ptr [rax]
.text:0000000000002E93                 and     edx, 0FFFFFFDFh
.text:0000000000002E96                 cmp     dl, 55h ; 'U'
.text:0000000000002E99                 jz      short loc_2F10
.text:0000000000002E9B                 cmp     dl, 47h ; 'G'
.text:0000000000002E9E                 jz      short loc_2EC0
.text:0000000000002EA0
.text:0000000000002EA0 loc_2EA0:                               ; CODE XREF: gettext_quote+4A↓j
.text:0000000000002EA0                                         ; gettext_quote+50↓j ...
.text:0000000000002EA0                 lea     rax, unk_A8EB
.text:0000000000002EA7                 lea     rdx, aDir+0Ah   ; "'"
.text:0000000000002EAE                 cmp     ebx, 9
.text:0000000000002EB1                 cmovnz  rax, rdx
.text:0000000000002EB5                 add     rsp, 8
.text:0000000000002EB9                 pop     rbx
.text:0000000000002EBA                 pop     rbp
.text:0000000000002EBB                 retn
.text:0000000000002EBB ; ---------------------------------------------------------------------------
.text:0000000000002EBC                 align 20h
.text:0000000000002EC0
.text:0000000000002EC0 loc_2EC0:                               ; CODE XREF: gettext_quote+1E↑j
.text:0000000000002EC0                 movzx   edx, byte ptr [rax+1]
.text:0000000000002EC4                 and     edx, 0FFFFFFDFh
.text:0000000000002EC7                 cmp     dl, 42h ; 'B'
.text:0000000000002ECA                 jnz     short loc_2EA0
.text:0000000000002ECC                 cmp     byte ptr [rax+2], 31h ; '1'
.text:0000000000002ED0                 jnz     short loc_2EA0
.text:0000000000002ED2                 cmp     byte ptr [rax+3], 38h ; '8'
.text:0000000000002ED6                 jnz     short loc_2EA0
.text:0000000000002ED8                 cmp     byte ptr [rax+4], 30h ; '0'
.text:0000000000002EDC                 jnz     short loc_2EA0
.text:0000000000002EDE                 cmp     byte ptr [rax+5], 33h ; '3'
.text:0000000000002EE2                 jnz     short loc_2EA0
.text:0000000000002EE4                 cmp     byte ptr [rax+6], 30h ; '0'
.text:0000000000002EE8                 jnz     short loc_2EA0
.text:0000000000002EEA                 cmp     byte ptr [rax+7], 0
.text:0000000000002EEE                 jnz     short loc_2EA0
.text:0000000000002EF0                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000002EF4                 lea     rax, unk_A8E4
.text:0000000000002EFB                 lea     rdx, unk_A8E8
.text:0000000000002F02                 cmovnz  rax, rdx
.text:0000000000002F06                 add     rsp, 8
.text:0000000000002F0A                 pop     rbx
.text:0000000000002F0B                 pop     rbp
.text:0000000000002F0C                 retn
.text:0000000000002F0C ; ---------------------------------------------------------------------------
.text:0000000000002F0D                 align 10h
.text:0000000000002F10
.text:0000000000002F10 loc_2F10:                               ; CODE XREF: gettext_quote+19↑j
.text:0000000000002F10                 movzx   edx, byte ptr [rax+1]
.text:0000000000002F14                 and     edx, 0FFFFFFDFh
.text:0000000000002F17                 cmp     dl, 54h ; 'T'
.text:0000000000002F1A                 jnz     short loc_2EA0
.text:0000000000002F1C                 movzx   edx, byte ptr [rax+2]
.text:0000000000002F20                 and     edx, 0FFFFFFDFh
.text:0000000000002F23                 cmp     dl, 46h ; 'F'
.text:0000000000002F26                 jnz     loc_2EA0
.text:0000000000002F2C                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:0000000000002F30                 jnz     loc_2EA0
.text:0000000000002F36                 cmp     byte ptr [rax+4], 38h ; '8'
.text:0000000000002F3A                 jnz     loc_2EA0
.text:0000000000002F40                 cmp     byte ptr [rax+5], 0
.text:0000000000002F44                 jnz     loc_2EA0
.text:0000000000002F4A                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000002F4E                 lea     rax, unk_A8DC
.text:0000000000002F55                 lea     rdx, unk_A8E0
.text:0000000000002F5C                 cmovnz  rax, rdx
.text:0000000000002F60                 add     rsp, 8
.text:0000000000002F64                 pop     rbx
.text:0000000000002F65                 pop     rbp
.text:0000000000002F66                 retn
.text:0000000000002F66 ; } // starts at 2E80
.text:0000000000002F66 gettext_quote   endp
.text:0000000000002F66
.text:0000000000002F66 ; ---------------------------------------------------------------------------
.text:0000000000002F67                 align 10h
.text:0000000000002F70
.text:0000000000002F70 ; =============== S U B R O U T I N E =======================================
.text:0000000000002F70
.text:0000000000002F70 ; Attributes: info_from_lumina
.text:0000000000002F70
.text:0000000000002F70 ; size_t __fastcall quotearg_buffer_restyled(char *buffer, size_t buffersize, const char *arg, size_t argsize, quoting_style quoting_style, int flags, const unsigned int *quote_these_too, const char *left_quote, const char *right_quote)
.text:0000000000002F70 quotearg_buffer_restyled proc near      ; CODE XREF: quotearg_buffer_restyled+BCD↓p
.text:0000000000002F70                                         ; quotearg_buffer_restyled+11CB↓p ...
.text:0000000000002F70
.text:0000000000002F70 var_E0          = dword ptr -0E0h
.text:0000000000002F70 var_DB          = byte ptr -0DBh
.text:0000000000002F70 var_DA          = byte ptr -0DAh
.text:0000000000002F70 var_D9          = byte ptr -0D9h
.text:0000000000002F70 s               = qword ptr -0D8h
.text:0000000000002F70 n               = qword ptr -0D0h
.text:0000000000002F70 var_C8          = qword ptr -0C8h
.text:0000000000002F70 ps              = qword ptr -0C0h
.text:0000000000002F70 var_B8          = qword ptr -0B8h
.text:0000000000002F70 var_B0          = qword ptr -0B0h
.text:0000000000002F70 var_A8          = qword ptr -0A8h
.text:0000000000002F70 s2              = qword ptr -0A0h
.text:0000000000002F70 var_98          = qword ptr -98h
.text:0000000000002F70 var_90          = qword ptr -90h
.text:0000000000002F70 var_88          = qword ptr -88h
.text:0000000000002F70 var_80          = qword ptr -80h
.text:0000000000002F70 var_78          = qword ptr -78h
.text:0000000000002F70 var_70          = dword ptr -70h
.text:0000000000002F70 var_6C          = byte ptr -6Ch
.text:0000000000002F70 var_6B          = byte ptr -6Bh
.text:0000000000002F70 var_6A          = byte ptr -6Ah
.text:0000000000002F70 var_69          = byte ptr -69h
.text:0000000000002F70 var_68          = qword ptr -68h
.text:0000000000002F70 var_60          = qword ptr -60h
.text:0000000000002F70 wc              = dword ptr -4Ch
.text:0000000000002F70 var_48          = qword ptr -48h
.text:0000000000002F70 var_40          = qword ptr -40h
.text:0000000000002F70 arg_0           = qword ptr  8
.text:0000000000002F70 arg_8           = qword ptr  10h
.text:0000000000002F70 arg_10          = qword ptr  18h
.text:0000000000002F70
.text:0000000000002F70 ; __unwind {
.text:0000000000002F70                 push    r15
.text:0000000000002F72                 push    r14
.text:0000000000002F74                 mov     r15d, r8d
.text:0000000000002F77                 push    r13
.text:0000000000002F79                 push    r12
.text:0000000000002F7B                 mov     r14, rdi
.text:0000000000002F7E                 push    rbp
.text:0000000000002F7F                 push    rbx
.text:0000000000002F80                 mov     ebx, r9d
.text:0000000000002F83                 mov     r13, rsi
.text:0000000000002F86                 mov     rbp, rcx
.text:0000000000002F89                 and     ebx, 2
.text:0000000000002F8C                 sub     rsp, 0B8h
.text:0000000000002F93                 mov     rax, [rsp+0E8h+arg_0]
.text:0000000000002F9B                 mov     [rsp+0E8h+s], rdx
.text:0000000000002FA0                 mov     [rsp+0E8h+var_E0], r8d
.text:0000000000002FA5                 mov     [rsp+0E8h+var_70], r9d
.text:0000000000002FAA                 mov     [rsp+0E8h+var_C8], rax
.text:0000000000002FAF                 mov     rax, [rsp+0E8h+arg_8]
.text:0000000000002FB7                 mov     [rsp+0E8h+var_80], rax
.text:0000000000002FBC                 mov     rax, [rsp+0E8h+arg_10]
.text:0000000000002FC4                 mov     [rsp+0E8h+var_88], rax
.text:0000000000002FC9                 mov     rax, fs:28h
.text:0000000000002FD2                 mov     [rsp+0E8h+var_40], rax
.text:0000000000002FDA                 xor     eax, eax
.text:0000000000002FDC                 call    ___ctype_get_mb_cur_max
.text:0000000000002FE1                 cmp     r15d, 0Ah       ; switch 11 cases
.text:0000000000002FE5                 mov     [rsp+0E8h+var_90], rax
.text:0000000000002FEA                 ja      def_3001        ; jumptable 00000000000121F1 default case
.text:0000000000002FF0                 lea     rcx, jpt_3001
.text:0000000000002FF7                 mov     edx, r15d
.text:0000000000002FFA                 movsxd  rax, ds:(jpt_3001 - 0A940h)[rcx+rdx*4]
.text:0000000000002FFE                 add     rax, rcx
.text:0000000000003001                 jmp     rax             ; switch jump
.text:0000000000003003 ; ---------------------------------------------------------------------------
.text:0000000000003003
.text:0000000000003003 loc_3003:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003003                                         ; quotearg_buffer_restyled+C66↓j
.text:0000000000003003                                         ; DATA XREF: ...
.text:0000000000003003                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 1
.text:0000000000003008                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000300D                 xor     r12d, r12d
.text:0000000000003010                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003019                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000301E                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000003023
.text:0000000000003023 loc_3023:                               ; CODE XREF: quotearg_buffer_restyled+E94↓j
.text:0000000000003023                 lea     rax, aDir+0Ah   ; "'"
.text:000000000000302A                 mov     [rsp+0E8h+n], 1
.text:0000000000003033                 xor     r15d, r15d
.text:0000000000003036                 mov     [rsp+0E8h+var_E0], 2
.text:000000000000303E                 mov     [rsp+0E8h+s2], rax
.text:0000000000003043
.text:0000000000003043 loc_3043:                               ; CODE XREF: quotearg_buffer_restyled+7F4↓j
.text:0000000000003043                                         ; quotearg_buffer_restyled+CB8↓j ...
.text:0000000000003043                 xor     r11d, r11d
.text:0000000000003046                 mov     rax, rbp
.text:0000000000003049                 mov     r8d, r12d
.text:000000000000304C                 mov     rbp, r11
.text:000000000000304F                 mov     r11, rax
.text:0000000000003052                 nop     word ptr [rax+rax+00h]
.text:0000000000003058
.text:0000000000003058 loc_3058:                               ; CODE XREF: quotearg_buffer_restyled+2B2↓j
.text:0000000000003058                                         ; quotearg_buffer_restyled+42C↓j
.text:0000000000003058                 cmp     r11, rbp
.text:000000000000305B                 setnz   r12b
.text:000000000000305F                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000003063                 jnz     short loc_3072
.text:0000000000003065                 mov     rax, [rsp+0E8h+s]
.text:000000000000306A                 cmp     byte ptr [rax+rbp], 0
.text:000000000000306E                 setnz   r12b
.text:0000000000003072
.text:0000000000003072 loc_3072:                               ; CODE XREF: quotearg_buffer_restyled+F3↑j
.text:0000000000003072                 test    r12b, r12b
.text:0000000000003075                 jz      loc_36D0
.text:000000000000307B                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003080                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000003085                 lea     r9, [rdi+rbp]
.text:0000000000003089                 setnz   al
.text:000000000000308C                 and     al, [rsp+0E8h+var_DB]
.text:0000000000003090                 mov     r10d, eax
.text:0000000000003093                 jz      loc_3140
.text:0000000000003099                 mov     rax, [rsp+0E8h+n]
.text:000000000000309E                 test    rax, rax
.text:00000000000030A1                 jz      loc_34D0
.text:00000000000030A7                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:00000000000030AB                 lea     rbx, [rbp+rax+0]
.text:00000000000030B0                 jnz     short loc_30E0
.text:00000000000030B2                 cmp     rax, 1
.text:00000000000030B6                 jbe     short loc_30E0
.text:00000000000030B8                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:00000000000030BD                 mov     byte ptr [rsp+0E8h+var_B8], r10b
.text:00000000000030C2                 mov     [rsp+0E8h+ps], r9
.text:00000000000030C7                 call    _strlen
.text:00000000000030CC                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:00000000000030D2                 movzx   r10d, byte ptr [rsp+0E8h+var_B8]
.text:00000000000030D8                 mov     r11, rax
.text:00000000000030DB                 mov     r9, [rsp+0E8h+ps]
.text:00000000000030E0
.text:00000000000030E0 loc_30E0:                               ; CODE XREF: quotearg_buffer_restyled+140↑j
.text:00000000000030E0                                         ; quotearg_buffer_restyled+146↑j
.text:00000000000030E0                 cmp     rbx, r11
.text:00000000000030E3                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:00000000000030E8                 ja      loc_36A0
.text:00000000000030EE                 mov     rdx, [rsp+0E8h+n] ; n
.text:00000000000030F3                 mov     rsi, [rsp+0E8h+s2] ; s2
.text:00000000000030F8                 mov     rdi, r9         ; s1
.text:00000000000030FB                 mov     [rsp+0E8h+var_A8], r11
.text:0000000000003100                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000003105                 mov     [rsp+0E8h+var_B8], r9
.text:000000000000310A                 call    _memcmp
.text:000000000000310F                 test    eax, eax
.text:0000000000003111                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000003116                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:000000000000311C                 mov     r11, [rsp+0E8h+var_A8]
.text:0000000000003121                 jnz     loc_36A0
.text:0000000000003127                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000312C                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000003132                 jnz     loc_40B5
.text:0000000000003138                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000003140
.text:0000000000003140 loc_3140:                               ; CODE XREF: quotearg_buffer_restyled+123↑j
.text:0000000000003140                                         ; quotearg_buffer_restyled+733↓j
.text:0000000000003140                 movzx   ebx, byte ptr [r9]
.text:0000000000003144                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000003147                 ja      def_315E        ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:000000000000314D                 lea     rcx, jpt_315E
.text:0000000000003154                 movzx   edx, bl
.text:0000000000003157                 movsxd  rax, ds:(jpt_315E - 0A96Ch)[rcx+rdx*4]
.text:000000000000315B                 add     rax, rcx
.text:000000000000315E                 jmp     rax             ; switch jump
.text:0000000000003160 ; ---------------------------------------------------------------------------
.text:0000000000003160
.text:0000000000003160 loc_3160:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000003160                                         ; DATA XREF: .rodata:jpt_34EA↓o
.text:0000000000003160                 xor     r10d, r10d      ; jumptable 00000000000126DA cases 123,125
.text:0000000000003163
.text:0000000000003163 loc_3163:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003163                                         ; DATA XREF: .rodata:jpt_315E↓o
.text:0000000000003163                 cmp     r11, 1          ; jumptable 000000000001234E cases 123,125
.text:0000000000003167                 setnz   al
.text:000000000000316A                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:000000000000316E                 jnz     short loc_317C
.text:0000000000003170                 mov     rax, [rsp+0E8h+s]
.text:0000000000003175                 cmp     byte ptr [rax+1], 0
.text:0000000000003179                 setnz   al
.text:000000000000317C
.text:000000000000317C loc_317C:                               ; CODE XREF: quotearg_buffer_restyled+1FE↑j
.text:000000000000317C                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003181                 setz    dl
.text:0000000000003184                 test    al, al
.text:0000000000003186                 jz      loc_33D8
.text:000000000000318C
.text:000000000000318C loc_318C:                               ; CODE XREF: quotearg_buffer_restyled+46B↓j
.text:000000000000318C                 xor     r12d, r12d
.text:000000000000318F                 xor     eax, eax
.text:0000000000003191                 nop     dword ptr [rax+00000000h]
.text:0000000000003198
.text:0000000000003198 loc_3198:                               ; CODE XREF: quotearg_buffer_restyled+2E9↓j
.text:0000000000003198                                         ; quotearg_buffer_restyled+30C↓j ...
.text:0000000000003198                 cmp     [rsp+0E8h+var_DB], 1
.text:000000000000319D                 jnz     loc_32B2
.text:00000000000031A3                 test    dl, dl
.text:00000000000031A5                 jnz     loc_32B2
.text:00000000000031AB
.text:00000000000031AB loc_31AB:                               ; CODE XREF: quotearg_buffer_restyled+347↓j
.text:00000000000031AB                 mov     rsi, [rsp+0E8h+var_C8]
.text:00000000000031B0                 test    rsi, rsi
.text:00000000000031B3                 jz      short loc_31C9
.text:00000000000031B5                 mov     edx, ebx
.text:00000000000031B7                 shr     dl, 5
.text:00000000000031BA                 movzx   edx, dl
.text:00000000000031BD                 mov     edx, [rsi+rdx*4]
.text:00000000000031C0                 bt      edx, ebx
.text:00000000000031C3                 jb      loc_3313
.text:00000000000031C9
.text:00000000000031C9 loc_31C9:                               ; CODE XREF: quotearg_buffer_restyled+243↑j
.text:00000000000031C9                                         ; quotearg_buffer_restyled+34D↓j ...
.text:00000000000031C9                 test    r10b, r10b
.text:00000000000031CC                 jnz     loc_3313
.text:00000000000031D2                 xor     eax, 1
.text:00000000000031D5                 add     rbp, 1
.text:00000000000031D9                 and     eax, r8d
.text:00000000000031DC
.text:00000000000031DC loc_31DC:                               ; CODE XREF: quotearg_buffer_restyled+75A↓j
.text:00000000000031DC                                         ; quotearg_buffer_restyled+AE8↓j
.text:00000000000031DC                 test    al, al
.text:00000000000031DE                 jz      short loc_3200
.text:00000000000031E0                 cmp     r13, r15
.text:00000000000031E3                 jbe     short loc_31EA
.text:00000000000031E5                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000031EA
.text:00000000000031EA loc_31EA:                               ; CODE XREF: quotearg_buffer_restyled+273↑j
.text:00000000000031EA                 lea     rax, [r15+1]
.text:00000000000031EE                 cmp     r13, rax
.text:00000000000031F1                 jbe     short loc_31F9
.text:00000000000031F3                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:00000000000031F9
.text:00000000000031F9 loc_31F9:                               ; CODE XREF: quotearg_buffer_restyled+281↑j
.text:00000000000031F9                 add     r15, 2
.text:00000000000031FD                 xor     r8d, r8d
.text:0000000000003200
.text:0000000000003200 loc_3200:                               ; CODE XREF: quotearg_buffer_restyled+26E↑j
.text:0000000000003200                                         ; quotearg_buffer_restyled+403↓j ...
.text:0000000000003200                 cmp     r15, r13
.text:0000000000003203                 jnb     short loc_3209
.text:0000000000003205                 mov     [r14+r15], bl
.text:0000000000003209
.text:0000000000003209 loc_3209:                               ; CODE XREF: quotearg_buffer_restyled+293↑j
.text:0000000000003209                 movzx   edi, [rsp+0E8h+var_DA]
.text:000000000000320E                 add     r15, 1
.text:0000000000003212                 mov     eax, 0
.text:0000000000003217                 test    r12b, r12b
.text:000000000000321A                 cmovz   edi, eax
.text:000000000000321D                 mov     [rsp+0E8h+var_DA], dil
.text:0000000000003222                 jmp     loc_3058
.text:0000000000003222 ; ---------------------------------------------------------------------------
.text:0000000000003227                 align 10h
.text:0000000000003230
.text:0000000000003230 loc_3230:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000003230                                         ; DATA XREF: .rodata:jpt_34EA↓o
.text:0000000000003230                 xor     r10d, r10d      ; jumptable 00000000000126DA case 63
.text:0000000000003233
.text:0000000000003233 loc_3233:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003233                                         ; DATA XREF: .rodata:jpt_315E↓o
.text:0000000000003233                 mov     eax, [rsp+0E8h+var_E0] ; jumptable 000000000001234E case 63
.text:0000000000003237                 cmp     eax, 2
.text:000000000000323A                 jz      loc_37F8
.text:0000000000003240                 cmp     eax, 5
.text:0000000000003243                 jz      loc_37B8
.text:0000000000003249                 cmp     eax, 2
.text:000000000000324C                 mov     ebx, 3Fh ; '?'
.text:0000000000003251                 setz    dl
.text:0000000000003254                 xor     r12d, r12d
.text:0000000000003257                 xor     eax, eax
.text:0000000000003259                 jmp     loc_3198
.text:0000000000003259 ; ---------------------------------------------------------------------------
.text:000000000000325E                 align 20h
.text:0000000000003260
.text:0000000000003260 loc_3260:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000003260                                         ; DATA XREF: .rodata:jpt_34EA↓o
.text:0000000000003260                 xor     r10d, r10d      ; jumptable 00000000000126DA case 39
.text:0000000000003263
.text:0000000000003263 loc_3263:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003263                                         ; DATA XREF: .rodata:jpt_315E↓o
.text:0000000000003263                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 39
.text:0000000000003268                 jz      loc_3770
.text:000000000000326E                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000003273                 xor     edx, edx
.text:0000000000003275                 xor     eax, eax
.text:0000000000003277                 mov     ebx, 27h ; '''
.text:000000000000327C                 jmp     loc_3198
.text:000000000000327C ; ---------------------------------------------------------------------------
.text:0000000000003281                 align 8
.text:0000000000003288
.text:0000000000003288 loc_3288:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003288                                         ; DATA XREF: .rodata:jpt_315E↓o
.text:0000000000003288                 mov     edx, 9          ; jumptable 000000000001234E case 9
.text:000000000000328D                 mov     ebx, 74h ; 't'
.text:0000000000003292
.text:0000000000003292 loc_3292:                               ; CODE XREF: quotearg_buffer_restyled+4BA↓j
.text:0000000000003292                                         ; quotearg_buffer_restyled+4EA↓j ...
.text:0000000000003292                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003297                 setz    al
.text:000000000000329A                 and     al, [rsp+0E8h+var_D9]
.text:000000000000329E                 jnz     loc_33EE
.text:00000000000032A4
.text:00000000000032A4 loc_32A4:                               ; CODE XREF: quotearg_buffer_restyled+362↓j
.text:00000000000032A4                                         ; quotearg_buffer_restyled+45A↓j ...
.text:00000000000032A4                 cmp     [rsp+0E8h+var_DB], 0
.text:00000000000032A9                 jnz     short loc_3310
.text:00000000000032AB
.text:00000000000032AB loc_32AB:                               ; CODE XREF: quotearg_buffer_restyled+422↓j
.text:00000000000032AB                 mov     ebx, edx
.text:00000000000032AD                 xor     r12d, r12d
.text:00000000000032B0                 xor     eax, eax
.text:00000000000032B2
.text:00000000000032B2 loc_32B2:                               ; CODE XREF: quotearg_buffer_restyled+22D↑j
.text:00000000000032B2                                         ; quotearg_buffer_restyled+235↑j
.text:00000000000032B2                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000032B7                 jnz     loc_31AB
.text:00000000000032BD                 jmp     loc_31C9
.text:00000000000032BD ; ---------------------------------------------------------------------------
.text:00000000000032C2                 align 8
.text:00000000000032C8
.text:00000000000032C8 loc_32C8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000032C8                                         ; DATA XREF: .rodata:jpt_315E↓o
.text:00000000000032C8                 mov     edx, 8          ; jumptable 000000000001234E case 8
.text:00000000000032CD                 mov     ebx, 62h ; 'b'
.text:00000000000032D2                 jmp     short loc_32A4
.text:00000000000032D2 ; ---------------------------------------------------------------------------
.text:00000000000032D4                 align 8
.text:00000000000032D8
.text:00000000000032D8 loc_32D8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000032D8                                         ; DATA XREF: .rodata:jpt_315E↓o
.text:00000000000032D8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 92
.text:00000000000032DD                 jz      loc_36B0
.text:00000000000032E3                 cmp     [rsp+0E8h+var_DB], 0
.text:00000000000032E8                 jz      loc_3500
.text:00000000000032EE
.text:00000000000032EE loc_32EE:                               ; CODE XREF: quotearg_buffer_restyled+588↓j
.text:00000000000032EE                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000032F3                 jz      loc_3500
.text:00000000000032F9                 cmp     [rsp+0E8h+n], 0
.text:00000000000032FF                 jnz     loc_36BB
.text:0000000000003305                 mov     ebx, 5Ch ; '\'
.text:000000000000330A                 nop     word ptr [rax+rax+00h]
.text:0000000000003310
.text:0000000000003310 loc_3310:                               ; CODE XREF: quotearg_buffer_restyled+339↑j
.text:0000000000003310                                         ; quotearg_buffer_restyled+5D5↓j ...
.text:0000000000003310                 xor     r12d, r12d
.text:0000000000003313
.text:0000000000003313 loc_3313:                               ; CODE XREF: quotearg_buffer_restyled+253↑j
.text:0000000000003313                                         ; quotearg_buffer_restyled+25C↑j
.text:0000000000003313                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003318                 setz    dl
.text:000000000000331B                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003320                 mov     eax, edx
.text:0000000000003322                 jnz     loc_3B78
.text:0000000000003328                 mov     eax, r8d
.text:000000000000332B                 xor     eax, 1
.text:000000000000332E                 and     al, dl
.text:0000000000003330                 jz      short loc_3361
.text:0000000000003332                 cmp     r13, r15
.text:0000000000003335                 jbe     short loc_333C
.text:0000000000003337                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000333C
.text:000000000000333C loc_333C:                               ; CODE XREF: quotearg_buffer_restyled+3C5↑j
.text:000000000000333C                 lea     rdx, [r15+1]
.text:0000000000003340                 cmp     r13, rdx
.text:0000000000003343                 jbe     short loc_334B
.text:0000000000003345                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:000000000000334B
.text:000000000000334B loc_334B:                               ; CODE XREF: quotearg_buffer_restyled+3D3↑j
.text:000000000000334B                 lea     rdx, [r15+2]
.text:000000000000334F                 cmp     r13, rdx
.text:0000000000003352                 jbe     short loc_335A
.text:0000000000003354                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000335A
.text:000000000000335A loc_335A:                               ; CODE XREF: quotearg_buffer_restyled+3E2↑j
.text:000000000000335A                 add     r15, 3
.text:000000000000335E                 mov     r8d, eax
.text:0000000000003361
.text:0000000000003361 loc_3361:                               ; CODE XREF: quotearg_buffer_restyled+3C0↑j
.text:0000000000003361                 cmp     r13, r15
.text:0000000000003364                 jbe     short loc_336B
.text:0000000000003366                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:000000000000336B
.text:000000000000336B loc_336B:                               ; CODE XREF: quotearg_buffer_restyled+3F4↑j
.text:000000000000336B                 add     r15, 1
.text:000000000000336F                 add     rbp, 1
.text:0000000000003373                 jmp     loc_3200
.text:0000000000003373 ; ---------------------------------------------------------------------------
.text:0000000000003378                 align 20h
.text:0000000000003380
.text:0000000000003380 loc_3380:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003380                                         ; DATA XREF: .rodata:jpt_315E↓o
.text:0000000000003380                 cmp     [rsp+0E8h+var_DB], 0 ; jumptable 000000000001234E case 0
.text:0000000000003385                 jnz     loc_3553
.text:000000000000338B                 xor     edx, edx
.text:000000000000338D                 test    byte ptr [rsp+0E8h+var_70], 1
.text:0000000000003392                 jz      loc_32AB
.text:0000000000003398                 add     rbp, 1
.text:000000000000339C                 jmp     loc_3058
.text:000000000000339C ; ---------------------------------------------------------------------------
.text:00000000000033A1                 align 8
.text:00000000000033A8
.text:00000000000033A8 loc_33A8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000033A8                                         ; DATA XREF: .rodata:jpt_315E↓o
.text:00000000000033A8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 37,43-58,65-90,93,95,97-122
.text:00000000000033AD                 setz    dl
.text:00000000000033B0                 xor     eax, eax
.text:00000000000033B2                 jmp     loc_3198
.text:00000000000033B2 ; ---------------------------------------------------------------------------
.text:00000000000033B7                 align 20h
.text:00000000000033C0
.text:00000000000033C0 loc_33C0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000033C0                                         ; DATA XREF: .rodata:jpt_315E↓o
.text:00000000000033C0                 mov     edx, 7          ; jumptable 000000000001234E case 7
.text:00000000000033C5                 mov     ebx, 61h ; 'a'
.text:00000000000033CA                 jmp     loc_32A4
.text:00000000000033CA ; ---------------------------------------------------------------------------
.text:00000000000033CF                 align 10h
.text:00000000000033D0
.text:00000000000033D0 loc_33D0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000033D0                                         ; DATA XREF: .rodata:jpt_315E↓o
.text:00000000000033D0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 35,126
.text:00000000000033D5                 setz    dl
.text:00000000000033D8
.text:00000000000033D8 loc_33D8:                               ; CODE XREF: quotearg_buffer_restyled+216↑j
.text:00000000000033D8                                         ; quotearg_buffer_restyled+6A3↓j
.text:00000000000033D8                 test    rbp, rbp
.text:00000000000033DB                 jnz     loc_318C
.text:00000000000033E1
.text:00000000000033E1 loc_33E1:                               ; CODE XREF: quotearg_buffer_restyled+49B↓j
.text:00000000000033E1                                         ; quotearg_buffer_restyled+4AD↓j ...
.text:00000000000033E1                 movzx   eax, [rsp+0E8h+var_D9]
.text:00000000000033E6                 and     al, dl
.text:00000000000033E8                 jz      loc_3198
.text:00000000000033EE
.text:00000000000033EE loc_33EE:                               ; CODE XREF: quotearg_buffer_restyled+32E↑j
.text:00000000000033EE                 mov     rbp, r11
.text:00000000000033F1                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000033F9                 jmp     loc_3AF9
.text:00000000000033F9 ; ---------------------------------------------------------------------------
.text:00000000000033FE                 align 20h
.text:0000000000003400
.text:0000000000003400 loc_3400:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003400                                         ; DATA XREF: .rodata:jpt_315E↓o
.text:0000000000003400                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000003405                 setz    dl
.text:0000000000003408                 xor     r12d, r12d
.text:000000000000340B                 jmp     short loc_33E1
.text:000000000000340B ; ---------------------------------------------------------------------------
.text:000000000000340D                 align 10h
.text:0000000000003410
.text:0000000000003410 loc_3410:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003410                                         ; DATA XREF: .rodata:jpt_315E↓o
.text:0000000000003410                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 32
.text:0000000000003415                 mov     ebx, 20h ; ' '
.text:000000000000341A                 setz    dl
.text:000000000000341D                 jmp     short loc_33E1
.text:000000000000341D ; ---------------------------------------------------------------------------
.text:000000000000341F                 align 20h
.text:0000000000003420
.text:0000000000003420 loc_3420:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003420                                         ; DATA XREF: .rodata:jpt_315E↓o
.text:0000000000003420                 mov     edx, 0Dh        ; jumptable 000000000001234E case 13
.text:0000000000003425                 mov     ebx, 72h ; 'r'
.text:000000000000342A                 jmp     loc_3292
.text:000000000000342A ; ---------------------------------------------------------------------------
.text:000000000000342F                 align 10h
.text:0000000000003430
.text:0000000000003430 loc_3430:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003430                                         ; DATA XREF: .rodata:jpt_315E↓o
.text:0000000000003430                 mov     edx, 0Ch        ; jumptable 000000000001234E case 12
.text:0000000000003435                 mov     ebx, 66h ; 'f'
.text:000000000000343A                 jmp     loc_32A4
.text:000000000000343A ; ---------------------------------------------------------------------------
.text:000000000000343F                 align 20h
.text:0000000000003440
.text:0000000000003440 loc_3440:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003440                                         ; DATA XREF: .rodata:jpt_315E↓o
.text:0000000000003440                 mov     edx, 0Bh        ; jumptable 000000000001234E case 11
.text:0000000000003445                 mov     ebx, 76h ; 'v'
.text:000000000000344A                 jmp     loc_32A4
.text:000000000000344A ; ---------------------------------------------------------------------------
.text:000000000000344F                 align 10h
.text:0000000000003450
.text:0000000000003450 loc_3450:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003450                                         ; DATA XREF: .rodata:jpt_315E↓o
.text:0000000000003450                 mov     edx, 0Ah        ; jumptable 000000000001234E case 10
.text:0000000000003455                 mov     ebx, 6Eh ; 'n'
.text:000000000000345A                 jmp     loc_3292
.text:000000000000345A ; ---------------------------------------------------------------------------
.text:000000000000345F                 align 20h
.text:0000000000003460
.text:0000000000003460 def_34EA:                               ; CODE XREF: quotearg_buffer_restyled+567↓j
.text:0000000000003460                                         ; quotearg_buffer_restyled+57A↓j
.text:0000000000003460                                         ; DATA XREF: ...
.text:0000000000003460                 xor     r10d, r10d      ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000003463                 nop     dword ptr [rax+rax+00h]
.text:0000000000003468
.text:0000000000003468 def_315E:                               ; CODE XREF: quotearg_buffer_restyled+1D7↑j
.text:0000000000003468                                         ; quotearg_buffer_restyled+1EE↑j
.text:0000000000003468                                         ; DATA XREF: ...
.text:0000000000003468                 cmp     [rsp+0E8h+var_90], 1 ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:000000000000346E                 jnz     loc_3818
.text:0000000000003474                 mov     [rsp+0E8h+var_B0], r11
.text:0000000000003479                 mov     byte ptr [rsp+0E8h+var_B8], r8b
.text:000000000000347E                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000003483                 call    ___ctype_b_loc
.text:0000000000003488                 mov     rcx, [rax]
.text:000000000000348B                 movzx   edx, bl
.text:000000000000348E                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000003494                 movzx   r8d, byte ptr [rsp+0E8h+var_B8]
.text:000000000000349A                 mov     r11, [rsp+0E8h+var_B0]
.text:000000000000349F                 mov     edi, 1
.text:00000000000034A4                 movzx   eax, word ptr [rcx+rdx*2]
.text:00000000000034A8                 and     ax, 4000h
.text:00000000000034AC                 setnz   r12b
.text:00000000000034B0                 setz    al
.text:00000000000034B3                 and     al, [rsp+0E8h+var_DB]
.text:00000000000034B7
.text:00000000000034B7 loc_34B7:                               ; CODE XREF: quotearg_buffer_restyled+FED↓j
.text:00000000000034B7                 test    al, al
.text:00000000000034B9                 jnz     loc_3E51
.text:00000000000034BF                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000034C4                 setz    dl
.text:00000000000034C7                 jmp     loc_3198
.text:00000000000034C7 ; ---------------------------------------------------------------------------
.text:00000000000034CC                 align 10h
.text:00000000000034D0
.text:00000000000034D0 loc_34D0:                               ; CODE XREF: quotearg_buffer_restyled+131↑j
.text:00000000000034D0                 movzx   ebx, byte ptr [r9]
.text:00000000000034D4                 cmp     bl, 7Eh         ; switch 127 cases
.text:00000000000034D7                 ja      short def_34EA  ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:00000000000034D9                 lea     rcx, jpt_34EA
.text:00000000000034E0                 movzx   edx, bl
.text:00000000000034E3                 movsxd  rax, ds:(jpt_34EA - 0AB68h)[rcx+rdx*4]
.text:00000000000034E7                 add     rax, rcx
.text:00000000000034EA                 jmp     rax             ; switch jump
.text:00000000000034EA ; ---------------------------------------------------------------------------
.text:00000000000034EC                 align 10h
.text:00000000000034F0
.text:00000000000034F0 loc_34F0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000034F0                                         ; DATA XREF: .rodata:jpt_34EA↓o
.text:00000000000034F0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 92
.text:00000000000034F3                 cmp     [rsp+0E8h+var_DB], 0
.text:00000000000034F8                 jnz     loc_32EE
.text:00000000000034FE                 xchg    ax, ax
.text:0000000000003500
.text:0000000000003500 loc_3500:                               ; CODE XREF: quotearg_buffer_restyled+378↑j
.text:0000000000003500                                         ; quotearg_buffer_restyled+383↑j
.text:0000000000003500                 mov     edx, 5Ch ; '\'
.text:0000000000003505                 mov     ebx, 5Ch ; '\'
.text:000000000000350A                 jmp     loc_32A4
.text:000000000000350A ; ---------------------------------------------------------------------------
.text:000000000000350F                 align 10h
.text:0000000000003510
.text:0000000000003510 loc_3510:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003510                                         ; DATA XREF: .rodata:jpt_34EA↓o
.text:0000000000003510                 mov     edx, 0Ch        ; jumptable 00000000000126DA case 12
.text:0000000000003515                 xor     r10d, r10d
.text:0000000000003518                 mov     ebx, 66h ; 'f'
.text:000000000000351D                 jmp     loc_32A4
.text:000000000000351D ; ---------------------------------------------------------------------------
.text:0000000000003522                 align 8
.text:0000000000003528
.text:0000000000003528 loc_3528:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003528                                         ; DATA XREF: .rodata:jpt_34EA↓o
.text:0000000000003528                 mov     edx, 0Ah        ; jumptable 00000000000126DA case 10
.text:000000000000352D                 xor     r10d, r10d
.text:0000000000003530                 mov     ebx, 6Eh ; 'n'
.text:0000000000003535                 jmp     loc_3292
.text:0000000000003535 ; ---------------------------------------------------------------------------
.text:000000000000353A                 align 20h
.text:0000000000003540
.text:0000000000003540 loc_3540:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003540                                         ; DATA XREF: .rodata:jpt_34EA↓o
.text:0000000000003540                 mov     ebx, 61h ; 'a'  ; jumptable 00000000000126DA case 7
.text:0000000000003545                 jmp     loc_3310
.text:0000000000003545 ; ---------------------------------------------------------------------------
.text:000000000000354A                 align 10h
.text:0000000000003550
.text:0000000000003550 loc_3550:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003550                                         ; DATA XREF: .rodata:jpt_34EA↓o
.text:0000000000003550                 xor     r10d, r10d      ; jumptable 00000000000126DA case 0
.text:0000000000003553
.text:0000000000003553 loc_3553:                               ; CODE XREF: quotearg_buffer_restyled+415↑j
.text:0000000000003553                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003558                 setz    dl
.text:000000000000355B                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003560                 jnz     loc_40FA
.text:0000000000003566                 mov     eax, r8d
.text:0000000000003569                 mov     rcx, r15
.text:000000000000356C                 xor     eax, 1
.text:000000000000356F                 and     al, dl
.text:0000000000003571                 jz      short loc_35A0
.text:0000000000003573                 cmp     r13, r15
.text:0000000000003576                 jbe     short loc_357D
.text:0000000000003578                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000357D
.text:000000000000357D loc_357D:                               ; CODE XREF: quotearg_buffer_restyled+606↑j
.text:000000000000357D                 lea     rcx, [r15+1]
.text:0000000000003581                 cmp     r13, rcx
.text:0000000000003584                 jbe     short loc_358C
.text:0000000000003586                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:000000000000358C
.text:000000000000358C loc_358C:                               ; CODE XREF: quotearg_buffer_restyled+614↑j
.text:000000000000358C                 lea     rcx, [r15+2]
.text:0000000000003590                 cmp     r13, rcx
.text:0000000000003593                 ja      loc_3BC9
.text:0000000000003599
.text:0000000000003599 loc_3599:                               ; CODE XREF: quotearg_buffer_restyled+C5F↓j
.text:0000000000003599                 lea     rcx, [r15+3]
.text:000000000000359D                 mov     r8d, eax
.text:00000000000035A0
.text:00000000000035A0 loc_35A0:                               ; CODE XREF: quotearg_buffer_restyled+601↑j
.text:00000000000035A0                 cmp     r13, rcx
.text:00000000000035A3                 jbe     short loc_35AA
.text:00000000000035A5                 mov     byte ptr [r14+rcx], 5Ch ; '\'
.text:00000000000035AA
.text:00000000000035AA loc_35AA:                               ; CODE XREF: quotearg_buffer_restyled+633↑j
.text:00000000000035AA                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000035AF                 lea     r15, [rcx+1]
.text:00000000000035B3                 jz      loc_3BB9
.text:00000000000035B9                 lea     rax, [rbp+1]
.text:00000000000035BD                 cmp     rax, r11
.text:00000000000035C0                 jnb     short loc_35DB
.text:00000000000035C2                 mov     rax, [rsp+0E8h+s]
.text:00000000000035C7                 movzx   eax, byte ptr [rax+rbp+1]
.text:00000000000035CC                 mov     byte ptr [rsp+0E8h+ps], al
.text:00000000000035D0                 sub     eax, 30h ; '0'
.text:00000000000035D3                 cmp     al, 9
.text:00000000000035D5                 jbe     loc_3E09
.text:00000000000035DB
.text:00000000000035DB loc_35DB:                               ; CODE XREF: quotearg_buffer_restyled+650↑j
.text:00000000000035DB                 mov     eax, r12d
.text:00000000000035DE                 mov     ebx, 30h ; '0'
.text:00000000000035E3                 xor     r12d, r12d
.text:00000000000035E6                 jmp     loc_3198
.text:00000000000035E6 ; ---------------------------------------------------------------------------
.text:00000000000035EB                 align 10h
.text:00000000000035F0
.text:00000000000035F0 loc_35F0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000035F0                                         ; DATA XREF: .rodata:jpt_34EA↓o
.text:00000000000035F0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 37,43-58,65-90,93,95,97-122
.text:00000000000035F5                 mov     r12d, r10d
.text:00000000000035F8                 setz    dl
.text:00000000000035FB                 xor     r10d, r10d
.text:00000000000035FE                 xor     eax, eax
.text:0000000000003600                 jmp     loc_3198
.text:0000000000003600 ; ---------------------------------------------------------------------------
.text:0000000000003605                 align 8
.text:0000000000003608
.text:0000000000003608 loc_3608:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003608                                         ; DATA XREF: .rodata:jpt_34EA↓o
.text:0000000000003608                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 35,126
.text:000000000000360D                 setz    dl
.text:0000000000003610                 xor     r10d, r10d
.text:0000000000003613                 jmp     loc_33D8
.text:0000000000003613 ; ---------------------------------------------------------------------------
.text:0000000000003618                 align 20h
.text:0000000000003620
.text:0000000000003620 loc_3620:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003620                                         ; DATA XREF: .rodata:jpt_34EA↓o
.text:0000000000003620                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000003625                 setz    dl
.text:0000000000003628                 xor     r10d, r10d
.text:000000000000362B                 xor     r12d, r12d
.text:000000000000362E                 jmp     loc_33E1
.text:000000000000362E ; ---------------------------------------------------------------------------
.text:0000000000003633                 align 8
.text:0000000000003638
.text:0000000000003638 loc_3638:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003638                                         ; DATA XREF: .rodata:jpt_34EA↓o
.text:0000000000003638                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA case 32
.text:000000000000363D                 mov     r12d, r10d
.text:0000000000003640                 mov     ebx, 20h ; ' '
.text:0000000000003645                 setz    dl
.text:0000000000003648                 xor     r10d, r10d
.text:000000000000364B                 jmp     loc_33E1
.text:0000000000003650 ; ---------------------------------------------------------------------------
.text:0000000000003650
.text:0000000000003650 loc_3650:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003650                                         ; DATA XREF: .rodata:jpt_34EA↓o
.text:0000000000003650                 mov     edx, 0Dh        ; jumptable 00000000000126DA case 13
.text:0000000000003655                 xor     r10d, r10d
.text:0000000000003658                 mov     ebx, 72h ; 'r'
.text:000000000000365D                 jmp     loc_3292
.text:000000000000365D ; ---------------------------------------------------------------------------
.text:0000000000003662                 align 8
.text:0000000000003668
.text:0000000000003668 loc_3668:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003668                                         ; DATA XREF: .rodata:jpt_34EA↓o
.text:0000000000003668                 mov     ebx, 76h ; 'v'  ; jumptable 00000000000126DA case 11
.text:000000000000366D                 jmp     loc_3310
.text:000000000000366D ; ---------------------------------------------------------------------------
.text:0000000000003672                 align 8
.text:0000000000003678
.text:0000000000003678 loc_3678:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003678                                         ; DATA XREF: .rodata:jpt_34EA↓o
.text:0000000000003678                 mov     edx, 9          ; jumptable 00000000000126DA case 9
.text:000000000000367D                 xor     r10d, r10d
.text:0000000000003680                 mov     ebx, 74h ; 't'
.text:0000000000003685                 jmp     loc_3292
.text:0000000000003685 ; ---------------------------------------------------------------------------
.text:000000000000368A                 align 10h
.text:0000000000003690
.text:0000000000003690 loc_3690:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003690                                         ; DATA XREF: .rodata:jpt_34EA↓o
.text:0000000000003690                 mov     ebx, 62h ; 'b'  ; jumptable 00000000000126DA case 8
.text:0000000000003695                 jmp     loc_3310
.text:0000000000003695 ; ---------------------------------------------------------------------------
.text:000000000000369A                 align 20h
.text:00000000000036A0
.text:00000000000036A0 loc_36A0:                               ; CODE XREF: quotearg_buffer_restyled+178↑j
.text:00000000000036A0                                         ; quotearg_buffer_restyled+1B1↑j
.text:00000000000036A0                 xor     r10d, r10d
.text:00000000000036A3                 jmp     loc_3140
.text:00000000000036A3 ; ---------------------------------------------------------------------------
.text:00000000000036A8                 align 10h
.text:00000000000036B0
.text:00000000000036B0 loc_36B0:                               ; CODE XREF: quotearg_buffer_restyled+36D↑j
.text:00000000000036B0                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000036B5                 jnz     loc_4020
.text:00000000000036BB
.text:00000000000036BB loc_36BB:                               ; CODE XREF: quotearg_buffer_restyled+38F↑j
.text:00000000000036BB                 add     rbp, 1
.text:00000000000036BF                 mov     eax, r8d
.text:00000000000036C2                 xor     r12d, r12d
.text:00000000000036C5                 mov     ebx, 5Ch ; '\'
.text:00000000000036CA                 jmp     loc_31DC
.text:00000000000036CA ; ---------------------------------------------------------------------------
.text:00000000000036CF                 align 10h
.text:00000000000036D0
.text:00000000000036D0 loc_36D0:                               ; CODE XREF: quotearg_buffer_restyled+105↑j
.text:00000000000036D0                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000036D5                 movzx   ebx, [rsp+0E8h+var_D9]
.text:00000000000036DA                 mov     r12d, r8d
.text:00000000000036DD                 mov     rbp, r11
.text:00000000000036E0                 setz    dl
.text:00000000000036E3                 mov     eax, ebx
.text:00000000000036E5                 test    r15, r15
.text:00000000000036E8                 setz    cl
.text:00000000000036EB                 and     eax, edx
.text:00000000000036ED                 and     al, cl
.text:00000000000036EF                 jnz     loc_4156
.text:00000000000036F5                 mov     eax, ebx
.text:00000000000036F7                 xor     eax, 1
.text:00000000000036FA                 and     dl, al
.text:00000000000036FC                 jz      loc_406C
.text:0000000000003702                 cmp     [rsp+0E8h+var_6C], 0
.text:0000000000003707                 jz      loc_406A
.text:000000000000370D                 cmp     [rsp+0E8h+var_DA], 0
.text:0000000000003712                 jnz     loc_410D
.text:0000000000003718                 test    r13, r13
.text:000000000000371B                 setz    al
.text:000000000000371E                 cmp     [rsp+0E8h+var_98], 0
.text:0000000000003724                 setnz   dl
.text:0000000000003727                 and     al, dl
.text:0000000000003729                 jz      loc_414C
.text:000000000000372F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000003734
.text:0000000000003734 loc_3734:                               ; CODE XREF: quotearg_buffer_restyled+121D↓j
.text:0000000000003734                 lea     rbx, aDir+0Ah   ; "'"
.text:000000000000373B                 mov     byte ptr [r14], 27h ; '''
.text:000000000000373F                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003747                 mov     r15d, 1
.text:000000000000374D                 mov     [rsp+0E8h+n], 1
.text:0000000000003756                 mov     [rsp+0E8h+var_D9], 0
.text:000000000000375B                 mov     [rsp+0E8h+s2], rbx
.text:0000000000003760                 mov     [rsp+0E8h+var_6C], al
.text:0000000000003764                 jmp     loc_3043
.text:0000000000003764 ; ---------------------------------------------------------------------------
.text:0000000000003769                 align 10h
.text:0000000000003770
.text:0000000000003770 loc_3770:                               ; CODE XREF: quotearg_buffer_restyled+2F8↑j
.text:0000000000003770                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003775                 jnz     loc_4020
.text:000000000000377B                 test    r13, r13
.text:000000000000377E                 jz      loc_3B80
.text:0000000000003784                 xor     edx, edx
.text:0000000000003786                 cmp     [rsp+0E8h+var_98], 0
.text:000000000000378C                 jnz     loc_3B80
.text:0000000000003792
.text:0000000000003792 loc_3792:                               ; CODE XREF: quotearg_buffer_restyled+C44↓j
.text:0000000000003792                                         ; quotearg_buffer_restyled+122A↓j
.text:0000000000003792                 mov     [rsp+0E8h+var_98], r13
.text:0000000000003797                 add     r15, 3
.text:000000000000379B                 xor     eax, eax
.text:000000000000379D                 mov     [rsp+0E8h+var_6C], r12b
.text:00000000000037A2                 xor     r8d, r8d
.text:00000000000037A5                 mov     r13, rdx
.text:00000000000037A8                 mov     ebx, 27h ; '''
.text:00000000000037AD                 jmp     loc_31C9
.text:00000000000037AD ; ---------------------------------------------------------------------------
.text:00000000000037B2                 align 8
.text:00000000000037B8
.text:00000000000037B8 loc_37B8:                               ; CODE XREF: quotearg_buffer_restyled+2D3↑j
.text:00000000000037B8                 test    byte ptr [rsp+0E8h+var_70], 4
.text:00000000000037BD                 jz      short loc_37E0
.text:00000000000037BF                 lea     rcx, [rbp+2]
.text:00000000000037C3                 cmp     rcx, r11
.text:00000000000037C6                 jnb     short loc_37E0
.text:00000000000037C8                 mov     rax, [rsp+0E8h+s]
.text:00000000000037CD                 cmp     byte ptr [rax+rbp+1], 3Fh ; '?'
.text:00000000000037D2                 jz      loc_3F62
.text:00000000000037D8                 nop     dword ptr [rax+rax+00000000h]
.text:00000000000037E0
.text:00000000000037E0 loc_37E0:                               ; CODE XREF: quotearg_buffer_restyled+84D↑j
.text:00000000000037E0                                         ; quotearg_buffer_restyled+856↑j ...
.text:00000000000037E0                 xor     edx, edx
.text:00000000000037E2                 xor     r12d, r12d
.text:00000000000037E5                 xor     eax, eax
.text:00000000000037E7                 mov     ebx, 3Fh ; '?'
.text:00000000000037EC                 jmp     loc_3198
.text:00000000000037EC ; ---------------------------------------------------------------------------
.text:00000000000037F1                 align 8
.text:00000000000037F8
.text:00000000000037F8 loc_37F8:                               ; CODE XREF: quotearg_buffer_restyled+2CA↑j
.text:00000000000037F8                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000037FD                 jnz     loc_4020
.text:0000000000003803                 xor     r12d, r12d
.text:0000000000003806                 xor     eax, eax
.text:0000000000003808                 mov     ebx, 3Fh ; '?'
.text:000000000000380D                 jmp     loc_31C9
.text:000000000000380D ; ---------------------------------------------------------------------------
.text:0000000000003812                 align 8
.text:0000000000003818
.text:0000000000003818 loc_3818:                               ; CODE XREF: quotearg_buffer_restyled+4FE↑j
.text:0000000000003818                 lea     rax, [rsp+0E8h+var_48]
.text:0000000000003820                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000003824                 mov     [rsp+0E8h+var_48], 0
.text:0000000000003830                 mov     [rsp+0E8h+ps], rax
.text:0000000000003835                 jnz     short loc_3864
.text:0000000000003837                 mov     rdi, [rsp+0E8h+s] ; s
.text:000000000000383C                 mov     byte ptr [rsp+0E8h+var_A8], r8b
.text:0000000000003841                 mov     byte ptr [rsp+0E8h+var_B0], r10b
.text:0000000000003846                 mov     [rsp+0E8h+var_B8], r9
.text:000000000000384B                 call    _strlen
.text:0000000000003850                 movzx   r8d, byte ptr [rsp+0E8h+var_A8]
.text:0000000000003856                 movzx   r10d, byte ptr [rsp+0E8h+var_B0]
.text:000000000000385C                 mov     r11, rax
.text:000000000000385F                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000003864
.text:0000000000003864 loc_3864:                               ; CODE XREF: quotearg_buffer_restyled+8C5↑j
.text:0000000000003864                 lea     rax, [rsp+0E8h+wc]
.text:000000000000386C                 xor     ecx, ecx
.text:000000000000386E                 mov     [rsp+0E8h+var_6A], bl
.text:0000000000003872                 mov     [rsp+0E8h+var_6B], r8b
.text:0000000000003877                 mov     rbx, rcx
.text:000000000000387A                 mov     [rsp+0E8h+var_60], r9
.text:0000000000003882                 mov     [rsp+0E8h+var_B0], rax
.text:0000000000003887                 mov     [rsp+0E8h+var_69], r10b
.text:000000000000388C                 mov     [rsp+0E8h+var_68], r15
.text:0000000000003894                 mov     [rsp+0E8h+var_A8], r14
.text:0000000000003899                 mov     [rsp+0E8h+var_78], r13
.text:000000000000389E                 mov     [rsp+0E8h+var_B8], r11
.text:00000000000038A3
.text:00000000000038A3 loc_38A3:                               ; CODE XREF: quotearg_buffer_restyled+9AF↓j
.text:00000000000038A3                 mov     rax, [rsp+0E8h+s]
.text:00000000000038A8                 lea     r14, [rbp+rbx+0]
.text:00000000000038AD                 mov     rdx, [rsp+0E8h+var_B8]
.text:00000000000038B2                 mov     rcx, [rsp+0E8h+ps]
.text:00000000000038B7                 mov     rdi, [rsp+0E8h+var_B0]
.text:00000000000038BC                 lea     r13, [rax+r14]
.text:00000000000038C0                 sub     rdx, r14
.text:00000000000038C3                 mov     rsi, r13
.text:00000000000038C6                 call    rpl_mbrtowc
.text:00000000000038CB                 test    rax, rax
.text:00000000000038CE                 mov     r15, rax
.text:00000000000038D1                 jz      short loc_3921
.text:00000000000038D3                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000038D7                 jz      loc_3EF5
.text:00000000000038DD                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:00000000000038E1                 jz      loc_3E81
.text:00000000000038E7                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000038EC                 setz    al
.text:00000000000038EF                 and     al, [rsp+0E8h+var_D9]
.text:00000000000038F3                 jnz     loc_3A90
.text:00000000000038F9
.text:00000000000038F9 loc_38F9:                               ; CODE XREF: quotearg_buffer_restyled+B24↓j
.text:00000000000038F9                                         ; quotearg_buffer_restyled+B47↓j
.text:00000000000038F9                 mov     edi, [rsp+0E8h+wc] ; wc
.text:0000000000003900                 call    _iswprint
.text:0000000000003905                 mov     rdi, [rsp+0E8h+ps] ; ps
.text:000000000000390A                 test    eax, eax
.text:000000000000390C                 mov     eax, 0
.text:0000000000003911                 cmovz   r12d, eax
.text:0000000000003915                 add     rbx, r15
.text:0000000000003918                 call    _mbsinit
.text:000000000000391D                 test    eax, eax
.text:000000000000391F                 jz      short loc_38A3
.text:0000000000003921
.text:0000000000003921 loc_3921:                               ; CODE XREF: quotearg_buffer_restyled+961↑j
.text:0000000000003921                 mov     edx, r12d
.text:0000000000003924                 mov     rdi, rbx
.text:0000000000003927                 movzx   r8d, [rsp+0E8h+var_6B]
.text:000000000000392D                 xor     edx, 1
.text:0000000000003930                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000003935                 movzx   r10d, [rsp+0E8h+var_69]
.text:000000000000393B                 and     dl, [rsp+0E8h+var_DB]
.text:000000000000393F                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000003947                 mov     r14, [rsp+0E8h+var_A8]
.text:000000000000394C                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000003951                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000003956
.text:0000000000003956 loc_3956:                               ; CODE XREF: quotearg_buffer_restyled+F80↓j
.text:0000000000003956                                         ; quotearg_buffer_restyled+FB8↓j
.text:0000000000003956                 cmp     rdi, 1
.text:000000000000395A                 jbe     loc_3F5B
.text:0000000000003960
.text:0000000000003960 loc_3960:                               ; CODE XREF: quotearg_buffer_restyled+EE9↓j
.text:0000000000003960                 mov     rcx, rdi
.text:0000000000003963                 xor     esi, esi
.text:0000000000003965                 movzx   r9d, [rsp+0E8h+var_D9]
.text:000000000000396B                 add     rcx, rbp
.text:000000000000396E                 mov     rdi, [rsp+0E8h+s]
.text:0000000000003973                 jmp     loc_3A2E
.text:0000000000003973 ; ---------------------------------------------------------------------------
.text:0000000000003978                 align 20h
.text:0000000000003980
.text:0000000000003980 loc_3980:                               ; CODE XREF: quotearg_buffer_restyled+AC0↓j
.text:0000000000003980                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003985                 setz    al
.text:0000000000003988                 test    r9b, r9b
.text:000000000000398B                 jnz     loc_3E40
.text:0000000000003991                 mov     esi, r8d
.text:0000000000003994                 xor     esi, 1
.text:0000000000003997                 and     al, sil
.text:000000000000399A                 jz      short loc_39CB
.text:000000000000399C                 cmp     r13, r15
.text:000000000000399F                 jbe     short loc_39A6
.text:00000000000039A1                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000039A6
.text:00000000000039A6 loc_39A6:                               ; CODE XREF: quotearg_buffer_restyled+A2F↑j
.text:00000000000039A6                 lea     rsi, [r15+1]
.text:00000000000039AA                 cmp     r13, rsi
.text:00000000000039AD                 jbe     short loc_39B5
.text:00000000000039AF                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:00000000000039B5
.text:00000000000039B5 loc_39B5:                               ; CODE XREF: quotearg_buffer_restyled+A3D↑j
.text:00000000000039B5                 lea     rsi, [r15+2]
.text:00000000000039B9                 cmp     r13, rsi
.text:00000000000039BC                 jbe     short loc_39C4
.text:00000000000039BE                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:00000000000039C4
.text:00000000000039C4 loc_39C4:                               ; CODE XREF: quotearg_buffer_restyled+A4C↑j
.text:00000000000039C4                 add     r15, 3
.text:00000000000039C8                 mov     r8d, eax
.text:00000000000039CB
.text:00000000000039CB loc_39CB:                               ; CODE XREF: quotearg_buffer_restyled+A2A↑j
.text:00000000000039CB                 cmp     r13, r15
.text:00000000000039CE                 jbe     short loc_39D5
.text:00000000000039D0                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:00000000000039D5
.text:00000000000039D5 loc_39D5:                               ; CODE XREF: quotearg_buffer_restyled+A5E↑j
.text:00000000000039D5                 lea     rax, [r15+1]
.text:00000000000039D9                 cmp     r13, rax
.text:00000000000039DC                 jbe     short loc_39EB
.text:00000000000039DE                 mov     eax, ebx
.text:00000000000039E0                 shr     al, 6
.text:00000000000039E3                 add     eax, 30h ; '0'
.text:00000000000039E6                 mov     [r14+r15+1], al
.text:00000000000039EB
.text:00000000000039EB loc_39EB:                               ; CODE XREF: quotearg_buffer_restyled+A6C↑j
.text:00000000000039EB                 lea     rax, [r15+2]
.text:00000000000039EF                 cmp     r13, rax
.text:00000000000039F2                 jbe     short loc_3A04
.text:00000000000039F4                 mov     eax, ebx
.text:00000000000039F6                 shr     al, 3
.text:00000000000039F9                 and     eax, 7
.text:00000000000039FC                 add     eax, 30h ; '0'
.text:00000000000039FF                 mov     [r14+r15+2], al
.text:0000000000003A04
.text:0000000000003A04 loc_3A04:                               ; CODE XREF: quotearg_buffer_restyled+A82↑j
.text:0000000000003A04                 and     ebx, 7
.text:0000000000003A07                 add     rbp, 1
.text:0000000000003A0B                 add     r15, 3
.text:0000000000003A0F                 add     ebx, 30h ; '0'
.text:0000000000003A12                 cmp     rbp, rcx
.text:0000000000003A15                 jnb     loc_3200
.text:0000000000003A1B                 mov     esi, edx
.text:0000000000003A1D
.text:0000000000003A1D loc_3A1D:                               ; CODE XREF: quotearg_buffer_restyled+B19↓j
.text:0000000000003A1D                                         ; quotearg_buffer_restyled+EF1↓j
.text:0000000000003A1D                 cmp     r13, r15
.text:0000000000003A20                 jbe     short loc_3A26
.text:0000000000003A22                 mov     [r14+r15], bl
.text:0000000000003A26
.text:0000000000003A26 loc_3A26:                               ; CODE XREF: quotearg_buffer_restyled+AB0↑j
.text:0000000000003A26                 movzx   ebx, byte ptr [rdi+rbp]
.text:0000000000003A2A                 add     r15, 1
.text:0000000000003A2E
.text:0000000000003A2E loc_3A2E:                               ; CODE XREF: quotearg_buffer_restyled+A03↑j
.text:0000000000003A2E                 test    dl, dl
.text:0000000000003A30                 jnz     loc_3980
.text:0000000000003A36                 mov     eax, esi
.text:0000000000003A38                 xor     eax, 1
.text:0000000000003A3B                 and     eax, r8d
.text:0000000000003A3E                 test    r10b, r10b
.text:0000000000003A41                 jz      short loc_3A51
.text:0000000000003A43                 cmp     r13, r15
.text:0000000000003A46                 jbe     short loc_3A4D
.text:0000000000003A48                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000003A4D
.text:0000000000003A4D loc_3A4D:                               ; CODE XREF: quotearg_buffer_restyled+AD6↑j
.text:0000000000003A4D                 add     r15, 1
.text:0000000000003A51
.text:0000000000003A51 loc_3A51:                               ; CODE XREF: quotearg_buffer_restyled+AD1↑j
.text:0000000000003A51                 add     rbp, 1
.text:0000000000003A55                 cmp     rbp, rcx
.text:0000000000003A58                 jnb     loc_31DC
.text:0000000000003A5E                 test    al, al
.text:0000000000003A60                 jz      loc_3E5E
.text:0000000000003A66                 cmp     r13, r15
.text:0000000000003A69                 jbe     short loc_3A70
.text:0000000000003A6B                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000003A70
.text:0000000000003A70 loc_3A70:                               ; CODE XREF: quotearg_buffer_restyled+AF9↑j
.text:0000000000003A70                 lea     rax, [r15+1]
.text:0000000000003A74                 cmp     r13, rax
.text:0000000000003A77                 jbe     short loc_3A7F
.text:0000000000003A79                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000003A7F
.text:0000000000003A7F loc_3A7F:                               ; CODE XREF: quotearg_buffer_restyled+B07↑j
.text:0000000000003A7F                 add     r15, 2
.text:0000000000003A83                 xor     r10d, r10d
.text:0000000000003A86                 xor     r8d, r8d
.text:0000000000003A89                 jmp     short loc_3A1D
.text:0000000000003A89 ; ---------------------------------------------------------------------------
.text:0000000000003A8B                 align 10h
.text:0000000000003A90
.text:0000000000003A90 loc_3A90:                               ; CODE XREF: quotearg_buffer_restyled+983↑j
.text:0000000000003A90                 cmp     r15, 1
.text:0000000000003A94                 jz      loc_38F9
.text:0000000000003A9A                 mov     rdi, [rsp+0E8h+s]
.text:0000000000003A9F                 lea     rcx, [rdi+r15]
.text:0000000000003AA3                 lea     rdx, [rdi+r14+1]
.text:0000000000003AA8                 lea     r8, [rcx+r14]
.text:0000000000003AAC                 jmp     short loc_3ABD
.text:0000000000003AAC ; ---------------------------------------------------------------------------
.text:0000000000003AAE                 align 10h
.text:0000000000003AB0
.text:0000000000003AB0 loc_3AB0:                               ; CODE XREF: quotearg_buffer_restyled+B56↓j
.text:0000000000003AB0                                         ; quotearg_buffer_restyled+B70↓j
.text:0000000000003AB0                 add     rdx, 1
.text:0000000000003AB4                 cmp     r8, rdx
.text:0000000000003AB7                 jz      loc_38F9
.text:0000000000003ABD
.text:0000000000003ABD loc_3ABD:                               ; CODE XREF: quotearg_buffer_restyled+B3C↑j
.text:0000000000003ABD                 movzx   ecx, byte ptr [rdx]
.text:0000000000003AC0                 sub     ecx, 5Bh ; '['
.text:0000000000003AC3                 cmp     cl, 21h ; '!'
.text:0000000000003AC6                 ja      short loc_3AB0
.text:0000000000003AC8                 mov     esi, 1
.text:0000000000003ACD                 shl     rsi, cl
.text:0000000000003AD0                 mov     rcx, rsi
.text:0000000000003AD3                 mov     rsi, 20000002Bh
.text:0000000000003ADD                 test    rcx, rsi
.text:0000000000003AE0                 jz      short loc_3AB0
.text:0000000000003AE2                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000003AE7                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000003AEC                 mov     rbp, [rsp+0E8h+var_B8]
.text:0000000000003AF1                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003AF9
.text:0000000000003AF9 loc_3AF9:                               ; CODE XREF: quotearg_buffer_restyled+489↑j
.text:0000000000003AF9                                         ; quotearg_buffer_restyled+C0B↓j ...
.text:0000000000003AF9                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000003AFE                 jz      short loc_3B10
.text:0000000000003B00                 test    al, al
.text:0000000000003B02                 mov     eax, 4
.text:0000000000003B07                 cmovz   eax, [rsp+0E8h+var_E0]
.text:0000000000003B0C                 mov     [rsp+0E8h+var_E0], eax
.text:0000000000003B10
.text:0000000000003B10 loc_3B10:                               ; CODE XREF: quotearg_buffer_restyled+B8E↑j
.text:0000000000003B10                                         ; quotearg_buffer_restyled+1205↓j
.text:0000000000003B10                 sub     rsp, 8
.text:0000000000003B14                 mov     rcx, rbp
.text:0000000000003B17                 mov     rsi, r13
.text:0000000000003B1A                 push    [rsp+0F0h+var_88]
.text:0000000000003B1E                 push    [rsp+0F8h+var_80]
.text:0000000000003B22                 mov     rdi, r14
.text:0000000000003B25                 push    0
.text:0000000000003B27                 mov     r9d, [rsp+108h+var_70]
.text:0000000000003B2F                 mov     r8d, [rsp+108h+var_E0]
.text:0000000000003B34                 mov     rdx, [rsp+108h+s]
.text:0000000000003B39                 and     r9d, 0FFFFFFFDh
.text:0000000000003B3D                 call    quotearg_buffer_restyled
.text:0000000000003B42                 add     rsp, 20h
.text:0000000000003B46                 mov     r15, rax
.text:0000000000003B49
.text:0000000000003B49 loc_3B49:                               ; CODE XREF: quotearg_buffer_restyled+1135↓j
.text:0000000000003B49                                         ; quotearg_buffer_restyled+1140↓j ...
.text:0000000000003B49                 mov     rbx, [rsp+0E8h+var_40]
.text:0000000000003B51                 xor     rbx, fs:28h
.text:0000000000003B5A                 mov     rax, r15
.text:0000000000003B5D                 jnz     loc_4163
.text:0000000000003B63                 add     rsp, 0B8h
.text:0000000000003B6A                 pop     rbx
.text:0000000000003B6B                 pop     rbp
.text:0000000000003B6C                 pop     r12
.text:0000000000003B6E                 pop     r13
.text:0000000000003B70                 pop     r14
.text:0000000000003B72                 pop     r15
.text:0000000000003B74                 retn
.text:0000000000003B74 ; ---------------------------------------------------------------------------
.text:0000000000003B75                 align 8
.text:0000000000003B78
.text:0000000000003B78 loc_3B78:                               ; CODE XREF: quotearg_buffer_restyled+3B2↑j
.text:0000000000003B78                 mov     rbp, r11
.text:0000000000003B7B                 jmp     loc_3AF9
.text:0000000000003B80 ; ---------------------------------------------------------------------------
.text:0000000000003B80
.text:0000000000003B80 loc_3B80:                               ; CODE XREF: quotearg_buffer_restyled+80E↑j
.text:0000000000003B80                                         ; quotearg_buffer_restyled+81C↑j
.text:0000000000003B80                 cmp     r13, r15
.text:0000000000003B83                 jbe     short loc_3B8A
.text:0000000000003B85                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000003B8A
.text:0000000000003B8A loc_3B8A:                               ; CODE XREF: quotearg_buffer_restyled+C13↑j
.text:0000000000003B8A                 lea     rax, [r15+1]
.text:0000000000003B8E                 cmp     r13, rax
.text:0000000000003B91                 jbe     short loc_3B99
.text:0000000000003B93                 mov     byte ptr [r14+r15+1], 5Ch ; '\'
.text:0000000000003B99
.text:0000000000003B99 loc_3B99:                               ; CODE XREF: quotearg_buffer_restyled+C21↑j
.text:0000000000003B99                 lea     rax, [r15+2]
.text:0000000000003B9D                 cmp     r13, rax
.text:0000000000003BA0                 jbe     loc_4192
.text:0000000000003BA6                 mov     rdx, r13
.text:0000000000003BA9                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000003BAF                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000003BB4                 jmp     loc_3792
.text:0000000000003BB9 ; ---------------------------------------------------------------------------
.text:0000000000003BB9
.text:0000000000003BB9 loc_3BB9:                               ; CODE XREF: quotearg_buffer_restyled+643↑j
.text:0000000000003BB9                 mov     eax, r12d
.text:0000000000003BBC                 mov     ebx, 30h ; '0'
.text:0000000000003BC1                 xor     r12d, r12d
.text:0000000000003BC4                 jmp     loc_31C9
.text:0000000000003BC9 ; ---------------------------------------------------------------------------
.text:0000000000003BC9
.text:0000000000003BC9 loc_3BC9:                               ; CODE XREF: quotearg_buffer_restyled+623↑j
.text:0000000000003BC9                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000003BCF                 jmp     loc_3599
.text:0000000000003BD4 ; ---------------------------------------------------------------------------
.text:0000000000003BD4
.text:0000000000003BD4 loc_3BD4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003BD4                                         ; DATA XREF: .rodata:jpt_3001↓o
.text:0000000000003BD4                 test    ebx, ebx        ; jumptable 00000000000121F1 case 4
.text:0000000000003BD6                 jnz     loc_3003        ; jumptable 00000000000121F1 case 1
.text:0000000000003BDC                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003BE1
.text:0000000000003BE1 loc_3BE1:                               ; CODE XREF: quotearg_buffer_restyled+11FD↓j
.text:0000000000003BE1                 test    r13, r13
.text:0000000000003BE4                 jnz     loc_417A
.text:0000000000003BEA                 lea     rax, aDir+0Ah   ; "'"
.text:0000000000003BF1                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003BFA                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003BFF                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003C04                 xor     r12d, r12d
.text:0000000000003C07                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000003C0C                 mov     [rsp+0E8h+n], 1
.text:0000000000003C15                 mov     [rsp+0E8h+s2], rax
.text:0000000000003C1A                 mov     r15d, 1
.text:0000000000003C20                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003C28                 jmp     loc_3043
.text:0000000000003C28 ; ---------------------------------------------------------------------------
.text:0000000000003C2D                 align 10h
.text:0000000000003C30
.text:0000000000003C30 loc_3C30:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003C30                                         ; DATA XREF: .rodata:jpt_3001↓o
.text:0000000000003C30                 test    ebx, ebx        ; jumptable 00000000000121F1 case 5
.text:0000000000003C32                 jnz     loc_402D
.text:0000000000003C38                 test    r13, r13
.text:0000000000003C3B                 jz      loc_3E66
.text:0000000000003C41                 mov     byte ptr [r14], 22h ; '"'
.text:0000000000003C45                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003C4A                 xor     r12d, r12d
.text:0000000000003C4D                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003C52                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003C5B
.text:0000000000003C5B loc_3C5B:                               ; CODE XREF: quotearg_buffer_restyled+F0C↓j
.text:0000000000003C5B                 lea     rax, unk_A8EB
.text:0000000000003C62                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000003C67                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003C6C                 mov     [rsp+0E8h+n], 1
.text:0000000000003C75                 mov     r15d, 1
.text:0000000000003C7B                 mov     [rsp+0E8h+s2], rax
.text:0000000000003C80                 jmp     loc_3043
.text:0000000000003C85 ; ---------------------------------------------------------------------------
.text:0000000000003C85
.text:0000000000003C85 loc_3C85:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003C85                                         ; DATA XREF: .rodata:jpt_3001↓o
.text:0000000000003C85                 lea     rax, unk_A8EB   ; jumptable 00000000000121F1 case 6
.text:0000000000003C8C                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003C91                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003C96                 xor     r12d, r12d
.text:0000000000003C99                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003CA2                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000003CA7                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003CAC                 mov     [rsp+0E8h+n], 1
.text:0000000000003CB5                 xor     r15d, r15d
.text:0000000000003CB8                 mov     [rsp+0E8h+s2], rax
.text:0000000000003CBD                 mov     [rsp+0E8h+var_E0], 5
.text:0000000000003CC5                 jmp     loc_3043
.text:0000000000003CCA ; ---------------------------------------------------------------------------
.text:0000000000003CCA
.text:0000000000003CCA loc_3CCA:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003CCA                                         ; DATA XREF: .rodata:jpt_3001↓o
.text:0000000000003CCA                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 7
.text:0000000000003CCF                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003CD4                 xor     r12d, r12d
.text:0000000000003CD7                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003CE0                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000003CE5                 xor     r15d, r15d
.text:0000000000003CE8                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003CED                 mov     [rsp+0E8h+n], 0
.text:0000000000003CF6                 mov     [rsp+0E8h+s2], 0
.text:0000000000003CFF                 jmp     loc_3043
.text:0000000000003D04 ; ---------------------------------------------------------------------------
.text:0000000000003D04
.text:0000000000003D04 loc_3D04:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003D04                                         ; DATA XREF: .rodata:jpt_3001↓o
.text:0000000000003D04                 cmp     [rsp+0E8h+var_E0], 0Ah ; jumptable 00000000000121F1 cases 8-10
.text:0000000000003D09                 jz      short loc_3D61
.text:0000000000003D0B                 lea     rsi, asc_A8ED   ; "`"
.text:0000000000003D12                 xor     edi, edi        ; domainname
.text:0000000000003D14                 mov     edx, 5          ; category
.text:0000000000003D19                 call    _dcgettext
.text:0000000000003D1E                 mov     rcx, rax
.text:0000000000003D21                 mov     [rsp+0E8h+var_80], rax
.text:0000000000003D26                 lea     rax, asc_A8ED   ; "`"
.text:0000000000003D2D                 cmp     rcx, rax
.text:0000000000003D30                 jz      loc_40CE
.text:0000000000003D36
.text:0000000000003D36 loc_3D36:                               ; CODE XREF: quotearg_buffer_restyled+116F↓j
.text:0000000000003D36                 lea     rsi, aDir+0Ah   ; msgid
.text:0000000000003D3D                 xor     edi, edi        ; domainname
.text:0000000000003D3F                 mov     edx, 5          ; category
.text:0000000000003D44                 call    _dcgettext
.text:0000000000003D49                 mov     rcx, rax
.text:0000000000003D4C                 mov     [rsp+0E8h+var_88], rax
.text:0000000000003D51                 lea     rax, aDir+0Ah   ; "'"
.text:0000000000003D58                 cmp     rcx, rax
.text:0000000000003D5B                 jz      loc_40E4
.text:0000000000003D61
.text:0000000000003D61 loc_3D61:                               ; CODE XREF: quotearg_buffer_restyled+D99↑j
.text:0000000000003D61                                         ; quotearg_buffer_restyled+1185↓j
.text:0000000000003D61                 xor     r15d, r15d
.text:0000000000003D64                 test    ebx, ebx
.text:0000000000003D66                 jz      loc_3F2D
.text:0000000000003D6C
.text:0000000000003D6C loc_3D6C:                               ; CODE XREF: quotearg_buffer_restyled+FC7↓j
.text:0000000000003D6C                                         ; quotearg_buffer_restyled+FE6↓j
.text:0000000000003D6C                 test    ebx, ebx
.text:0000000000003D6E                 mov     rbx, [rsp+0E8h+var_88]
.text:0000000000003D73                 setnz   [rsp+0E8h+var_D9]
.text:0000000000003D78                 xor     r12d, r12d
.text:0000000000003D7B                 mov     rdi, rbx        ; s
.text:0000000000003D7E                 call    _strlen
.text:0000000000003D83                 mov     [rsp+0E8h+s2], rbx
.text:0000000000003D88                 mov     [rsp+0E8h+n], rax
.text:0000000000003D8D                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003D92                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003D97                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003DA0                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003DA5                 jmp     loc_3043
.text:0000000000003DAA ; ---------------------------------------------------------------------------
.text:0000000000003DAA
.text:0000000000003DAA loc_3DAA:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003DAA                                         ; DATA XREF: .rodata:jpt_3001↓o
.text:0000000000003DAA                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 0
.text:0000000000003DAF                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003DB4                 xor     r12d, r12d
.text:0000000000003DB7                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003DC0                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000003DC5                 xor     r15d, r15d
.text:0000000000003DC8                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000003DCD                 mov     [rsp+0E8h+n], 0
.text:0000000000003DD6                 mov     [rsp+0E8h+s2], 0
.text:0000000000003DDF                 jmp     loc_3043
.text:0000000000003DE4 ; ---------------------------------------------------------------------------
.text:0000000000003DE4
.text:0000000000003DE4 loc_3DE4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003DE4                                         ; DATA XREF: .rodata:jpt_3001↓o
.text:0000000000003DE4                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 3
.text:0000000000003DE9                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003DEE                 xor     r12d, r12d
.text:0000000000003DF1                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003DFA                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000003DFF                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003E04                 jmp     loc_3023
.text:0000000000003E09 ; ---------------------------------------------------------------------------
.text:0000000000003E09
.text:0000000000003E09 loc_3E09:                               ; CODE XREF: quotearg_buffer_restyled+665↑j
.text:0000000000003E09                 cmp     r13, r15
.text:0000000000003E0C                 jbe     short loc_3E13
.text:0000000000003E0E                 mov     byte ptr [r14+r15], 30h ; '0'
.text:0000000000003E13
.text:0000000000003E13 loc_3E13:                               ; CODE XREF: quotearg_buffer_restyled+E9C↑j
.text:0000000000003E13                 lea     rax, [rcx+2]
.text:0000000000003E17                 cmp     r13, rax
.text:0000000000003E1A                 jbe     short loc_3E22
.text:0000000000003E1C                 mov     byte ptr [r14+rcx+2], 30h ; '0'
.text:0000000000003E22
.text:0000000000003E22 loc_3E22:                               ; CODE XREF: quotearg_buffer_restyled+EAA↑j
.text:0000000000003E22                 mov     eax, r12d
.text:0000000000003E25                 lea     r15, [rcx+3]
.text:0000000000003E29                 xor     r12d, r12d
.text:0000000000003E2C                 mov     ebx, 30h ; '0'
.text:0000000000003E31                 jmp     loc_3198
.text:0000000000003E31 ; ---------------------------------------------------------------------------
.text:0000000000003E36                 align 20h
.text:0000000000003E40
.text:0000000000003E40 loc_3E40:                               ; CODE XREF: quotearg_buffer_restyled+A1B↑j
.text:0000000000003E40                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000003E45                 mov     rbp, r11
.text:0000000000003E48                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000003E4C                 jmp     loc_3AF9
.text:0000000000003E51 ; ---------------------------------------------------------------------------
.text:0000000000003E51
.text:0000000000003E51 loc_3E51:                               ; CODE XREF: quotearg_buffer_restyled+549↑j
.text:0000000000003E51                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000003E56                 xor     r12d, r12d
.text:0000000000003E59                 jmp     loc_3960
.text:0000000000003E5E ; ---------------------------------------------------------------------------
.text:0000000000003E5E
.text:0000000000003E5E loc_3E5E:                               ; CODE XREF: quotearg_buffer_restyled+AF0↑j
.text:0000000000003E5E                 xor     r10d, r10d
.text:0000000000003E61                 jmp     loc_3A1D
.text:0000000000003E66 ; ---------------------------------------------------------------------------
.text:0000000000003E66
.text:0000000000003E66 loc_3E66:                               ; CODE XREF: quotearg_buffer_restyled+CCB↑j
.text:0000000000003E66                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003E6F                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003E74                 xor     r12d, r12d
.text:0000000000003E77                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003E7C                 jmp     loc_3C5B
.text:0000000000003E81 ; ---------------------------------------------------------------------------
.text:0000000000003E81
.text:0000000000003E81 loc_3E81:                               ; CODE XREF: quotearg_buffer_restyled+971↑j
.text:0000000000003E81                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000003E86                 mov     rsi, r14
.text:0000000000003E89                 mov     rcx, r13
.text:0000000000003E8C                 mov     rax, rbx
.text:0000000000003E8F                 mov     rdi, rbx
.text:0000000000003E92                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000003E98                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000003E9D                 mov     r9, [rsp+0E8h+var_60]
.text:0000000000003EA5                 cmp     rsi, r11
.text:0000000000003EA8                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000003EAE                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000003EB6                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000003EBB                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000003EC0                 jnb     short loc_3EE8
.text:0000000000003EC2                 cmp     byte ptr [rcx], 0
.text:0000000000003EC5                 jnz     short loc_3ED7
.text:0000000000003EC7                 jmp     short loc_3EE8
.text:0000000000003EC7 ; ---------------------------------------------------------------------------
.text:0000000000003EC9                 align 10h
.text:0000000000003ED0
.text:0000000000003ED0 loc_3ED0:                               ; CODE XREF: quotearg_buffer_restyled+F73↓j
.text:0000000000003ED0                 cmp     byte ptr [r9+rax], 0
.text:0000000000003ED5                 jz      short loc_3EE5
.text:0000000000003ED7
.text:0000000000003ED7 loc_3ED7:                               ; CODE XREF: quotearg_buffer_restyled+F55↑j
.text:0000000000003ED7                 add     rax, 1
.text:0000000000003EDB                 lea     rdx, [rbp+rax+0]
.text:0000000000003EE0                 cmp     r11, rdx
.text:0000000000003EE3                 ja      short loc_3ED0
.text:0000000000003EE5
.text:0000000000003EE5 loc_3EE5:                               ; CODE XREF: quotearg_buffer_restyled+F65↑j
.text:0000000000003EE5                 mov     rdi, rax
.text:0000000000003EE8
.text:0000000000003EE8 loc_3EE8:                               ; CODE XREF: quotearg_buffer_restyled+F50↑j
.text:0000000000003EE8                                         ; quotearg_buffer_restyled+F57↑j
.text:0000000000003EE8                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000003EED                 xor     r12d, r12d
.text:0000000000003EF0                 jmp     loc_3956
.text:0000000000003EF5 ; ---------------------------------------------------------------------------
.text:0000000000003EF5
.text:0000000000003EF5 loc_3EF5:                               ; CODE XREF: quotearg_buffer_restyled+967↑j
.text:0000000000003EF5                 mov     rdi, rbx
.text:0000000000003EF8                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000003EFE                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000003F03                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000003F09                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000003F11                 xor     r12d, r12d
.text:0000000000003F14                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000003F19                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000003F1E                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000003F23                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000003F28                 jmp     loc_3956
.text:0000000000003F2D ; ---------------------------------------------------------------------------
.text:0000000000003F2D
.text:0000000000003F2D loc_3F2D:                               ; CODE XREF: quotearg_buffer_restyled+DF6↑j
.text:0000000000003F2D                 mov     rdx, [rsp+0E8h+var_80]
.text:0000000000003F32                 movzx   eax, byte ptr [rdx]
.text:0000000000003F35                 test    al, al
.text:0000000000003F37                 jz      loc_3D6C
.text:0000000000003F3D                 nop     dword ptr [rax]
.text:0000000000003F40
.text:0000000000003F40 loc_3F40:                               ; CODE XREF: quotearg_buffer_restyled+FE4↓j
.text:0000000000003F40                 cmp     r13, r15
.text:0000000000003F43                 jbe     short loc_3F49
.text:0000000000003F45                 mov     [r14+r15], al
.text:0000000000003F49
.text:0000000000003F49 loc_3F49:                               ; CODE XREF: quotearg_buffer_restyled+FD3↑j
.text:0000000000003F49                 add     r15, 1
.text:0000000000003F4D                 movzx   eax, byte ptr [rdx+r15]
.text:0000000000003F52                 test    al, al
.text:0000000000003F54                 jnz     short loc_3F40
.text:0000000000003F56                 jmp     loc_3D6C
.text:0000000000003F5B ; ---------------------------------------------------------------------------
.text:0000000000003F5B
.text:0000000000003F5B loc_3F5B:                               ; CODE XREF: quotearg_buffer_restyled+9EA↑j
.text:0000000000003F5B                 mov     eax, edx
.text:0000000000003F5D                 jmp     loc_34B7
.text:0000000000003F62 ; ---------------------------------------------------------------------------
.text:0000000000003F62
.text:0000000000003F62 loc_3F62:                               ; CODE XREF: quotearg_buffer_restyled+862↑j
.text:0000000000003F62                 movzx   ebx, byte ptr [rax+rcx]
.text:0000000000003F66                 cmp     bl, 3Eh ; '>'
.text:0000000000003F69                 ja      loc_37E0
.text:0000000000003F6F                 mov     rax, 7000A38200000000h
.text:0000000000003F79                 bt      rax, rbx
.text:0000000000003F7D                 jnb     loc_37E0
.text:0000000000003F83                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003F88                 jnz     loc_4172
.text:0000000000003F8E                 cmp     r13, r15
.text:0000000000003F91                 jbe     short loc_3F98
.text:0000000000003F93                 mov     byte ptr [r14+r15], 3Fh ; '?'
.text:0000000000003F98
.text:0000000000003F98 loc_3F98:                               ; CODE XREF: quotearg_buffer_restyled+1021↑j
.text:0000000000003F98                 lea     rax, [r15+1]
.text:0000000000003F9C                 cmp     r13, rax
.text:0000000000003F9F                 jbe     short loc_3FA7
.text:0000000000003FA1                 mov     byte ptr [r14+r15+1], 22h ; '"'
.text:0000000000003FA7
.text:0000000000003FA7 loc_3FA7:                               ; CODE XREF: quotearg_buffer_restyled+102F↑j
.text:0000000000003FA7                 lea     rax, [r15+2]
.text:0000000000003FAB                 cmp     r13, rax
.text:0000000000003FAE                 jbe     short loc_3FB6
.text:0000000000003FB0                 mov     byte ptr [r14+r15+2], 22h ; '"'
.text:0000000000003FB6
.text:0000000000003FB6 loc_3FB6:                               ; CODE XREF: quotearg_buffer_restyled+103E↑j
.text:0000000000003FB6                 lea     rax, [r15+3]
.text:0000000000003FBA                 cmp     r13, rax
.text:0000000000003FBD                 jbe     short loc_3FC5
.text:0000000000003FBF                 mov     byte ptr [r14+r15+3], 3Fh ; '?'
.text:0000000000003FC5
.text:0000000000003FC5 loc_3FC5:                               ; CODE XREF: quotearg_buffer_restyled+104D↑j
.text:0000000000003FC5                 add     r15, 4
.text:0000000000003FC9                 xor     edx, edx
.text:0000000000003FCB                 xor     r12d, r12d
.text:0000000000003FCE                 xor     eax, eax
.text:0000000000003FD0                 mov     rbp, rcx
.text:0000000000003FD3                 jmp     loc_3198
.text:0000000000003FD8 ; ---------------------------------------------------------------------------
.text:0000000000003FD8
.text:0000000000003FD8 loc_3FD8:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003FD8                                         ; DATA XREF: .rodata:jpt_3001↓o
.text:0000000000003FD8                 test    ebx, ebx        ; jumptable 00000000000121F1 case 2
.text:0000000000003FDA                 jz      loc_4168
.text:0000000000003FE0                 lea     rax, aDir+0Ah   ; "'"
.text:0000000000003FE7                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003FEC                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003FF1                 xor     r12d, r12d
.text:0000000000003FF4                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003FFD                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000004002                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000004007                 mov     [rsp+0E8h+n], 1
.text:0000000000004010                 xor     r15d, r15d
.text:0000000000004013                 mov     [rsp+0E8h+s2], rax
.text:0000000000004018                 jmp     loc_3043
.text:0000000000004018 ; ---------------------------------------------------------------------------
.text:000000000000401D                 align 20h
.text:0000000000004020
.text:0000000000004020 loc_4020:                               ; CODE XREF: quotearg_buffer_restyled+745↑j
.text:0000000000004020                                         ; quotearg_buffer_restyled+805↑j ...
.text:0000000000004020                 mov     rbp, r11
.text:0000000000004023                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000004028                 jmp     loc_3AF9
.text:000000000000402D ; ---------------------------------------------------------------------------
.text:000000000000402D
.text:000000000000402D loc_402D:                               ; CODE XREF: quotearg_buffer_restyled+CC2↑j
.text:000000000000402D                 lea     rax, unk_A8EB
.text:0000000000004034                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000004039                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000403E                 xor     r12d, r12d
.text:0000000000004041                 mov     [rsp+0E8h+var_98], 0
.text:000000000000404A                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000404F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000004054                 mov     [rsp+0E8h+n], 1
.text:000000000000405D                 xor     r15d, r15d
.text:0000000000004060                 mov     [rsp+0E8h+s2], rax
.text:0000000000004065                 jmp     loc_3043
.text:000000000000406A ; ---------------------------------------------------------------------------
.text:000000000000406A
.text:000000000000406A loc_406A:                               ; CODE XREF: quotearg_buffer_restyled+797↑j
.text:000000000000406A                 mov     eax, edx
.text:000000000000406C
.text:000000000000406C loc_406C:                               ; CODE XREF: quotearg_buffer_restyled+78C↑j
.text:000000000000406C                                         ; quotearg_buffer_restyled+11E1↓j
.text:000000000000406C                 mov     rbx, [rsp+0E8h+s2]
.text:0000000000004071                 test    rbx, rbx
.text:0000000000004074                 jz      short loc_40A2
.text:0000000000004076                 test    al, al
.text:0000000000004078                 jz      short loc_40A2
.text:000000000000407A                 movzx   ecx, byte ptr [rbx]
.text:000000000000407D                 mov     rax, rbx
.text:0000000000004080                 test    cl, cl
.text:0000000000004082                 jz      short loc_40A2
.text:0000000000004084                 mov     rdx, r15
.text:0000000000004087                 sub     rax, r15
.text:000000000000408A
.text:000000000000408A loc_408A:                               ; CODE XREF: quotearg_buffer_restyled+112D↓j
.text:000000000000408A                 cmp     r13, rdx
.text:000000000000408D                 jbe     short loc_4093
.text:000000000000408F                 mov     [r14+rdx], cl
.text:0000000000004093
.text:0000000000004093 loc_4093:                               ; CODE XREF: quotearg_buffer_restyled+111D↑j
.text:0000000000004093                 add     rdx, 1
.text:0000000000004097                 movzx   ecx, byte ptr [rax+rdx]
.text:000000000000409B                 test    cl, cl
.text:000000000000409D                 jnz     short loc_408A
.text:000000000000409F                 mov     r15, rdx
.text:00000000000040A2
.text:00000000000040A2 loc_40A2:                               ; CODE XREF: quotearg_buffer_restyled+1104↑j
.text:00000000000040A2                                         ; quotearg_buffer_restyled+1108↑j ...
.text:00000000000040A2                 cmp     r13, r15
.text:00000000000040A5                 jbe     loc_3B49
.text:00000000000040AB                 mov     byte ptr [r14+r15], 0
.text:00000000000040B0                 jmp     loc_3B49
.text:00000000000040B5 ; ---------------------------------------------------------------------------
.text:00000000000040B5
.text:00000000000040B5 loc_40B5:                               ; CODE XREF: quotearg_buffer_restyled+1C2↑j
.text:00000000000040B5                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000040BA                 movzx   ebx, [rsp+0E8h+var_D9]
.text:00000000000040BF                 mov     rbp, r11
.text:00000000000040C2                 setz    al
.text:00000000000040C5                 mov     [rsp+0E8h+var_DB], bl
.text:00000000000040C9                 jmp     loc_3AF9
.text:00000000000040CE ; ---------------------------------------------------------------------------
.text:00000000000040CE
.text:00000000000040CE loc_40CE:                               ; CODE XREF: quotearg_buffer_restyled+DC0↑j
.text:00000000000040CE                 mov     esi, [rsp+0E8h+var_E0]
.text:00000000000040D2                 mov     rdi, rcx
.text:00000000000040D5                 call    gettext_quote
.text:00000000000040DA                 mov     [rsp+0E8h+var_80], rax
.text:00000000000040DF                 jmp     loc_3D36
.text:00000000000040E4 ; ---------------------------------------------------------------------------
.text:00000000000040E4
.text:00000000000040E4 loc_40E4:                               ; CODE XREF: quotearg_buffer_restyled+DEB↑j
.text:00000000000040E4                 mov     esi, [rsp+0E8h+var_E0]
.text:00000000000040E8                 mov     rdi, rcx
.text:00000000000040EB                 call    gettext_quote
.text:00000000000040F0                 mov     [rsp+0E8h+var_88], rax
.text:00000000000040F5                 jmp     loc_3D61
.text:00000000000040FA ; ---------------------------------------------------------------------------
.text:00000000000040FA
.text:00000000000040FA loc_40FA:                               ; CODE XREF: quotearg_buffer_restyled+5F0↑j
.text:00000000000040FA                 movzx   ebx, [rsp+0E8h+var_D9]
.text:00000000000040FF                 mov     rbp, r11
.text:0000000000004102                 mov     eax, edx
.text:0000000000004104                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000004108                 jmp     loc_3AF9
.text:000000000000410D ; ---------------------------------------------------------------------------
.text:000000000000410D
.text:000000000000410D loc_410D:                               ; CODE XREF: quotearg_buffer_restyled+7A2↑j
.text:000000000000410D                 sub     rsp, 8
.text:0000000000004111                 mov     r8d, 5
.text:0000000000004117                 mov     rcx, r11
.text:000000000000411A                 push    [rsp+0F0h+var_88]
.text:000000000000411E                 push    [rsp+0F8h+var_80]
.text:0000000000004122                 mov     rdi, r14
.text:0000000000004125                 push    [rsp+100h+var_C8]
.text:0000000000004129                 mov     r9d, [rsp+108h+var_70]
.text:0000000000004131                 mov     rdx, [rsp+108h+s]
.text:0000000000004136                 mov     rsi, [rsp+108h+var_98]
.text:000000000000413B                 call    quotearg_buffer_restyled
.text:0000000000004140                 add     rsp, 20h
.text:0000000000004144                 mov     r15, rax
.text:0000000000004147                 jmp     loc_3B49
.text:000000000000414C ; ---------------------------------------------------------------------------
.text:000000000000414C
.text:000000000000414C loc_414C:                               ; CODE XREF: quotearg_buffer_restyled+7B9↑j
.text:000000000000414C                 movzx   eax, [rsp+0E8h+var_6C]
.text:0000000000004151                 jmp     loc_406C
.text:0000000000004156 ; ---------------------------------------------------------------------------
.text:0000000000004156
.text:0000000000004156 loc_4156:                               ; CODE XREF: quotearg_buffer_restyled+77F↑j
.text:0000000000004156                 mov     [rsp+0E8h+var_E0], 2
.text:000000000000415E                 jmp     loc_3AF9
.text:0000000000004163 ; ---------------------------------------------------------------------------
.text:0000000000004163
.text:0000000000004163 loc_4163:                               ; CODE XREF: quotearg_buffer_restyled+BED↑j
.text:0000000000004163                 call    ___stack_chk_fail
.text:0000000000004168 ; ---------------------------------------------------------------------------
.text:0000000000004168
.text:0000000000004168 loc_4168:                               ; CODE XREF: quotearg_buffer_restyled+106A↑j
.text:0000000000004168                 mov     [rsp+0E8h+var_DB], 0
.text:000000000000416D                 jmp     loc_3BE1
.text:0000000000004172 ; ---------------------------------------------------------------------------
.text:0000000000004172
.text:0000000000004172 loc_4172:                               ; CODE XREF: quotearg_buffer_restyled+1018↑j
.text:0000000000004172                 mov     rbp, r11
.text:0000000000004175                 jmp     loc_3B10
.text:000000000000417A ; ---------------------------------------------------------------------------
.text:000000000000417A
.text:000000000000417A loc_417A:                               ; CODE XREF: quotearg_buffer_restyled+C74↑j
.text:000000000000417A                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000417F                 xor     eax, eax
.text:0000000000004181                 xor     r12d, r12d
.text:0000000000004184                 mov     [rsp+0E8h+var_98], 0
.text:000000000000418D                 jmp     loc_3734
.text:0000000000004192 ; ---------------------------------------------------------------------------
.text:0000000000004192
.text:0000000000004192 loc_4192:                               ; CODE XREF: quotearg_buffer_restyled+C30↑j
.text:0000000000004192                 mov     rdx, r13
.text:0000000000004195                 mov     r13, [rsp+0E8h+var_98]
.text:000000000000419A                 jmp     loc_3792
.text:000000000000419F ; ---------------------------------------------------------------------------
.text:000000000000419F
.text:000000000000419F def_3001:                               ; CODE XREF: quotearg_buffer_restyled+7A↑j
.text:000000000000419F                 call    _abort          ; jumptable 00000000000121F1 default case
.text:000000000000419F ; } // starts at 2F70
.text:000000000000419F quotearg_buffer_restyled endp
.text:000000000000419F
.text:000000000000419F ; ---------------------------------------------------------------------------
.text:00000000000041A4                 align 10h
.text:00000000000041B0
.text:00000000000041B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000041B0
.text:00000000000041B0
.text:00000000000041B0 quotearg_n_options proc near            ; CODE XREF: quotearg_n+E↓j
.text:00000000000041B0                                         ; quotearg_n_mem+7↓j ...
.text:00000000000041B0
.text:00000000000041B0 var_50          = qword ptr -50h
.text:00000000000041B0 var_48          = qword ptr -48h
.text:00000000000041B0 var_40          = dword ptr -40h
.text:00000000000041B0 var_3C          = dword ptr -3Ch
.text:00000000000041B0
.text:00000000000041B0 ; __unwind {
.text:00000000000041B0                 push    r15
.text:00000000000041B2                 push    r14
.text:00000000000041B4                 movsxd  r15, edi
.text:00000000000041B7                 push    r13
.text:00000000000041B9                 push    r12
.text:00000000000041BB                 mov     r14, rdx
.text:00000000000041BE                 push    rbp
.text:00000000000041BF                 push    rbx
.text:00000000000041C0                 mov     rbp, rcx
.text:00000000000041C3                 sub     rsp, 28h
.text:00000000000041C7                 mov     [rsp+58h+var_50], rsi
.text:00000000000041CC                 call    ___errno_location
.text:00000000000041D1                 mov     r13, rax
.text:00000000000041D4                 mov     eax, [rax]
.text:00000000000041D6                 test    r15d, r15d
.text:00000000000041D9                 mov     rbx, cs:slotvec
.text:00000000000041E0                 mov     [rsp+58h+var_40], eax
.text:00000000000041E4                 js      loc_4351
.text:00000000000041EA                 cmp     cs:nslots, r15d
.text:00000000000041F1                 jg      short loc_4255
.text:00000000000041F3                 cmp     r15d, 7FFFFFFFh
.text:00000000000041FA                 jz      loc_4356
.text:0000000000004200                 lea     r12d, [r15+1]
.text:0000000000004204                 lea     rax, slotvec0
.text:000000000000420B                 movsxd  rsi, r12d
.text:000000000000420E                 shl     rsi, 4
.text:0000000000004212                 cmp     rbx, rax
.text:0000000000004215                 jz      loc_4330
.text:000000000000421B                 mov     rdi, rbx
.text:000000000000421E                 call    xrealloc
.text:0000000000004223                 mov     rbx, rax
.text:0000000000004226                 mov     cs:slotvec, rax
.text:000000000000422D
.text:000000000000422D loc_422D:                               ; CODE XREF: quotearg_n_options+19C↓j
.text:000000000000422D                 movsxd  rdi, cs:nslots
.text:0000000000004234                 mov     edx, r12d
.text:0000000000004237                 xor     esi, esi        ; c
.text:0000000000004239                 sub     edx, edi
.text:000000000000423B                 shl     rdi, 4
.text:000000000000423F                 movsxd  rdx, edx
.text:0000000000004242                 add     rdi, rbx        ; s
.text:0000000000004245                 shl     rdx, 4          ; n
.text:0000000000004249                 call    _memset
.text:000000000000424E                 mov     cs:nslots, r12d
.text:0000000000004255
.text:0000000000004255 loc_4255:                               ; CODE XREF: quotearg_n_options+41↑j
.text:0000000000004255                 mov     eax, [rbp+4]
.text:0000000000004258                 shl     r15, 4
.text:000000000000425C                 sub     rsp, 8
.text:0000000000004260                 add     rbx, r15
.text:0000000000004263                 lea     r15, [rbp+8]
.text:0000000000004267                 mov     r8d, [rbp+0]
.text:000000000000426B                 mov     r11, [rbx]
.text:000000000000426E                 mov     r12, [rbx+8]
.text:0000000000004272                 mov     rcx, r14
.text:0000000000004275                 or      eax, 1
.text:0000000000004278                 mov     [rsp+60h+var_3C], eax
.text:000000000000427C                 push    qword ptr [rbp+30h]
.text:000000000000427F                 mov     r9d, eax
.text:0000000000004282                 push    qword ptr [rbp+28h]
.text:0000000000004285                 push    r15
.text:0000000000004287                 mov     rsi, r11
.text:000000000000428A                 mov     rdx, [rsp+78h+var_50]
.text:000000000000428F                 mov     rdi, r12
.text:0000000000004292                 mov     [rsp+78h+var_48], r11
.text:0000000000004297                 call    quotearg_buffer_restyled
.text:000000000000429C                 add     rsp, 20h
.text:00000000000042A0                 mov     r11, [rsp+58h+var_48]
.text:00000000000042A5                 cmp     r11, rax
.text:00000000000042A8                 ja      short loc_4311
.text:00000000000042AA                 lea     rsi, [rax+1]
.text:00000000000042AE                 lea     rax, slot0
.text:00000000000042B5                 cmp     r12, rax
.text:00000000000042B8                 mov     [rbx], rsi
.text:00000000000042BB                 jz      short loc_42CF
.text:00000000000042BD                 mov     rdi, r12        ; ptr
.text:00000000000042C0                 mov     [rsp+58h+var_48], rsi
.text:00000000000042C5                 call    free
.text:00000000000042CA                 mov     rsi, [rsp+58h+var_48]
.text:00000000000042CF
.text:00000000000042CF loc_42CF:                               ; CODE XREF: quotearg_n_options+10B↑j
.text:00000000000042CF                 mov     rdi, rsi
.text:00000000000042D2                 mov     [rsp+58h+var_48], rsi
.text:00000000000042D7                 call    xmalloc
.text:00000000000042DC                 sub     rsp, 8
.text:00000000000042E0                 mov     [rbx+8], rax
.text:00000000000042E4                 mov     r8d, [rbp+0]
.text:00000000000042E8                 push    qword ptr [rbp+30h]
.text:00000000000042EB                 push    qword ptr [rbp+28h]
.text:00000000000042EE                 mov     rcx, r14
.text:00000000000042F1                 push    r15
.text:00000000000042F3                 mov     r9d, [rsp+78h+var_3C]
.text:00000000000042F8                 mov     rdi, rax
.text:00000000000042FB                 mov     rdx, [rsp+78h+var_50]
.text:0000000000004300                 mov     rsi, [rsp+78h+var_48]
.text:0000000000004305                 mov     r12, rax
.text:0000000000004308                 call    quotearg_buffer_restyled
.text:000000000000430D                 add     rsp, 20h
.text:0000000000004311
.text:0000000000004311 loc_4311:                               ; CODE XREF: quotearg_n_options+F8↑j
.text:0000000000004311                 mov     eax, [rsp+58h+var_40]
.text:0000000000004315                 mov     [r13+0], eax
.text:0000000000004319                 add     rsp, 28h
.text:000000000000431D                 mov     rax, r12
.text:0000000000004320                 pop     rbx
.text:0000000000004321                 pop     rbp
.text:0000000000004322                 pop     r12
.text:0000000000004324                 pop     r13
.text:0000000000004326                 pop     r14
.text:0000000000004328                 pop     r15
.text:000000000000432A                 retn
.text:000000000000432A ; ---------------------------------------------------------------------------
.text:000000000000432B                 align 10h
.text:0000000000004330
.text:0000000000004330 loc_4330:                               ; CODE XREF: quotearg_n_options+65↑j
.text:0000000000004330                 xor     edi, edi
.text:0000000000004332                 call    xrealloc
.text:0000000000004337                 movdqa  xmm0, xmmword ptr cs:slotvec0
.text:000000000000433F                 mov     rbx, rax
.text:0000000000004342                 mov     cs:slotvec, rax
.text:0000000000004349                 movups  xmmword ptr [rax], xmm0
.text:000000000000434C                 jmp     loc_422D
.text:0000000000004351 ; ---------------------------------------------------------------------------
.text:0000000000004351
.text:0000000000004351 loc_4351:                               ; CODE XREF: quotearg_n_options+34↑j
.text:0000000000004351                 call    _abort
.text:0000000000004356 ; ---------------------------------------------------------------------------
.text:0000000000004356
.text:0000000000004356 loc_4356:                               ; CODE XREF: quotearg_n_options+4A↑j
.text:0000000000004356                 call    xalloc_die
.text:0000000000004356 ; } // starts at 41B0
.text:0000000000004356 quotearg_n_options endp
.text:0000000000004356
.text:0000000000004356 ; ---------------------------------------------------------------------------
.text:000000000000435B                 align 20h
.text:0000000000004360
.text:0000000000004360 ; =============== S U B R O U T I N E =======================================
.text:0000000000004360
.text:0000000000004360 ; Attributes: info_from_lumina
.text:0000000000004360
.text:0000000000004360 ; quoting_options *__fastcall clone_quoting_options(quoting_options *o)
.text:0000000000004360                 public clone_quoting_options
.text:0000000000004360 clone_quoting_options proc near
.text:0000000000004360 ; __unwind {
.text:0000000000004360                 push    r12
.text:0000000000004362                 push    rbp
.text:0000000000004363                 push    rbx
.text:0000000000004364                 mov     rbx, rdi
.text:0000000000004367                 call    ___errno_location
.text:000000000000436C                 mov     r12d, [rax]
.text:000000000000436F                 mov     rbp, rax
.text:0000000000004372                 lea     rax, default_quoting_options
.text:0000000000004379                 test    rbx, rbx
.text:000000000000437C                 mov     esi, 38h ; '8'  ; n
.text:0000000000004381                 cmovz   rbx, rax
.text:0000000000004385                 mov     rdi, rbx        ; src
.text:0000000000004388                 call    xmemdup
.text:000000000000438D                 mov     [rbp+0], r12d
.text:0000000000004391                 pop     rbx
.text:0000000000004392                 pop     rbp
.text:0000000000004393                 pop     r12
.text:0000000000004395                 retn
.text:0000000000004395 ; } // starts at 4360
.text:0000000000004395 clone_quoting_options endp
.text:0000000000004395
.text:0000000000004395 ; ---------------------------------------------------------------------------
.text:0000000000004396                 align 20h
.text:00000000000043A0
.text:00000000000043A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000043A0
.text:00000000000043A0
.text:00000000000043A0                 public get_quoting_style
.text:00000000000043A0 get_quoting_style proc near
.text:00000000000043A0 ; __unwind {
.text:00000000000043A0                 lea     rax, default_quoting_options
.text:00000000000043A7                 test    rdi, rdi
.text:00000000000043AA                 cmovz   rdi, rax
.text:00000000000043AE                 mov     eax, [rdi]
.text:00000000000043B0                 retn
.text:00000000000043B0 ; } // starts at 43A0
.text:00000000000043B0 get_quoting_style endp
.text:00000000000043B0
.text:00000000000043B0 ; ---------------------------------------------------------------------------
.text:00000000000043B1                 align 20h
.text:00000000000043C0
.text:00000000000043C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000043C0
.text:00000000000043C0
.text:00000000000043C0                 public set_quoting_style
.text:00000000000043C0 set_quoting_style proc near
.text:00000000000043C0 ; __unwind {
.text:00000000000043C0                 lea     rax, default_quoting_options
.text:00000000000043C7                 test    rdi, rdi
.text:00000000000043CA                 cmovz   rdi, rax
.text:00000000000043CE                 mov     [rdi], esi
.text:00000000000043D0                 retn
.text:00000000000043D0 ; } // starts at 43C0
.text:00000000000043D0 set_quoting_style endp
.text:00000000000043D0
.text:00000000000043D0 ; ---------------------------------------------------------------------------
.text:00000000000043D1                 align 20h
.text:00000000000043E0
.text:00000000000043E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000043E0
.text:00000000000043E0 ; Attributes: info_from_lumina
.text:00000000000043E0
.text:00000000000043E0 ; int __fastcall set_char_quoting(quoting_options *o, char c, int i)
.text:00000000000043E0                 public set_char_quoting
.text:00000000000043E0 set_char_quoting proc near
.text:00000000000043E0 ; __unwind {
.text:00000000000043E0                 lea     rax, default_quoting_options
.text:00000000000043E7                 test    rdi, rdi
.text:00000000000043EA                 mov     ecx, esi
.text:00000000000043EC                 cmovz   rdi, rax
.text:00000000000043F0                 mov     eax, esi
.text:00000000000043F2                 and     ecx, 1Fh
.text:00000000000043F5                 shr     al, 5
.text:00000000000043F8                 movzx   eax, al
.text:00000000000043FB                 lea     rdi, [rdi+rax*4+8]
.text:0000000000004400                 mov     esi, [rdi]
.text:0000000000004402                 mov     eax, esi
.text:0000000000004404                 shr     eax, cl
.text:0000000000004406                 xor     edx, eax
.text:0000000000004408                 and     eax, 1
.text:000000000000440B                 and     edx, 1
.text:000000000000440E                 shl     edx, cl
.text:0000000000004410                 xor     edx, esi
.text:0000000000004412                 mov     [rdi], edx
.text:0000000000004414                 retn
.text:0000000000004414 ; } // starts at 43E0
.text:0000000000004414 set_char_quoting endp
.text:0000000000004414
.text:0000000000004414 ; ---------------------------------------------------------------------------
.text:0000000000004415                 align 20h
.text:0000000000004420
.text:0000000000004420 ; =============== S U B R O U T I N E =======================================
.text:0000000000004420
.text:0000000000004420
.text:0000000000004420                 public set_quoting_flags
.text:0000000000004420 set_quoting_flags proc near
.text:0000000000004420 ; __unwind {
.text:0000000000004420                 lea     rax, default_quoting_options
.text:0000000000004427                 test    rdi, rdi
.text:000000000000442A                 cmovz   rdi, rax
.text:000000000000442E                 mov     eax, [rdi+4]
.text:0000000000004431                 mov     [rdi+4], esi
.text:0000000000004434                 retn
.text:0000000000004434 ; } // starts at 4420
.text:0000000000004434 set_quoting_flags endp
.text:0000000000004434
.text:0000000000004434 ; ---------------------------------------------------------------------------
.text:0000000000004435                 align 20h
.text:0000000000004440
.text:0000000000004440 ; =============== S U B R O U T I N E =======================================
.text:0000000000004440
.text:0000000000004440 ; Attributes: info_from_lumina
.text:0000000000004440
.text:0000000000004440 ; void __fastcall set_custom_quoting(quoting_options *o, const char *left_quote, const char *right_quote)
.text:0000000000004440                 public set_custom_quoting
.text:0000000000004440 set_custom_quoting proc near
.text:0000000000004440 ; __unwind {
.text:0000000000004440                 lea     rax, default_quoting_options
.text:0000000000004447                 test    rdi, rdi
.text:000000000000444A                 cmovz   rdi, rax
.text:000000000000444E                 test    rsi, rsi
.text:0000000000004451                 mov     dword ptr [rdi], 0Ah
.text:0000000000004457                 jz      short loc_4467
.text:0000000000004459                 test    rdx, rdx
.text:000000000000445C                 jz      short loc_4467
.text:000000000000445E                 mov     [rdi+28h], rsi
.text:0000000000004462                 mov     [rdi+30h], rdx
.text:0000000000004466                 retn
.text:0000000000004467 ; ---------------------------------------------------------------------------
.text:0000000000004467
.text:0000000000004467 loc_4467:                               ; CODE XREF: set_custom_quoting+17↑j
.text:0000000000004467                                         ; set_custom_quoting+1C↑j
.text:0000000000004467                 sub     rsp, 8
.text:000000000000446B                 call    _abort
.text:000000000000446B ; } // starts at 4440
.text:000000000000446B set_custom_quoting endp
.text:000000000000446B
.text:0000000000004470
.text:0000000000004470 ; =============== S U B R O U T I N E =======================================
.text:0000000000004470
.text:0000000000004470 ; Attributes: info_from_lumina
.text:0000000000004470
.text:0000000000004470 ; size_t __fastcall quotearg_buffer(char *buffer, size_t buffersize, const char *arg, size_t argsize, const quoting_options *o)
.text:0000000000004470                 public quotearg_buffer
.text:0000000000004470 quotearg_buffer proc near
.text:0000000000004470
.text:0000000000004470 var_40          = qword ptr -40h
.text:0000000000004470
.text:0000000000004470 ; __unwind {
.text:0000000000004470                 push    r15
.text:0000000000004472                 push    r14
.text:0000000000004474                 lea     rax, default_quoting_options
.text:000000000000447B                 push    r13
.text:000000000000447D                 push    r12
.text:000000000000447F                 mov     r13, rdi
.text:0000000000004482                 push    rbp
.text:0000000000004483                 push    rbx
.text:0000000000004484                 mov     rbx, r8
.text:0000000000004487                 mov     r14, rsi
.text:000000000000448A                 mov     r15, rdx
.text:000000000000448D                 sub     rsp, 18h
.text:0000000000004491                 test    r8, r8
.text:0000000000004494                 cmovz   rbx, rax
.text:0000000000004498                 mov     [rsp+48h+var_40], rcx
.text:000000000000449D                 call    ___errno_location
.text:00000000000044A2                 mov     r12d, [rax]
.text:00000000000044A5                 mov     rbp, rax
.text:00000000000044A8                 lea     rax, [rbx+8]
.text:00000000000044AC                 sub     rsp, 8
.text:00000000000044B0                 mov     r9d, [rbx+4]
.text:00000000000044B4                 push    qword ptr [rbx+30h]
.text:00000000000044B7                 mov     r8d, [rbx]
.text:00000000000044BA                 push    qword ptr [rbx+28h]
.text:00000000000044BD                 mov     rdx, r15
.text:00000000000044C0                 push    rax
.text:00000000000044C1                 mov     rcx, [rsp+68h+var_40]
.text:00000000000044C6                 mov     rsi, r14
.text:00000000000044C9                 mov     rdi, r13
.text:00000000000044CC                 call    quotearg_buffer_restyled
.text:00000000000044D1                 mov     [rbp+0], r12d
.text:00000000000044D5                 add     rsp, 38h
.text:00000000000044D9                 pop     rbx
.text:00000000000044DA                 pop     rbp
.text:00000000000044DB                 pop     r12
.text:00000000000044DD                 pop     r13
.text:00000000000044DF                 pop     r14
.text:00000000000044E1                 pop     r15
.text:00000000000044E3                 retn
.text:00000000000044E3 ; } // starts at 4470
.text:00000000000044E3 quotearg_buffer endp
.text:00000000000044E3
.text:00000000000044E3 ; ---------------------------------------------------------------------------
.text:00000000000044E4                 align 10h
.text:00000000000044F0
.text:00000000000044F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000044F0
.text:00000000000044F0 ; Attributes: info_from_lumina
.text:00000000000044F0
.text:00000000000044F0 ; char *__fastcall quotearg_alloc_mem(const char *arg, size_t argsize, size_t *size, const quoting_options *o)
.text:00000000000044F0                 public quotearg_alloc_mem
.text:00000000000044F0 quotearg_alloc_mem proc near            ; CODE XREF: quotearg_alloc+5↓j
.text:00000000000044F0
.text:00000000000044F0 var_5C          = dword ptr -5Ch
.text:00000000000044F0 var_58          = qword ptr -58h
.text:00000000000044F0 var_50          = qword ptr -50h
.text:00000000000044F0 var_48          = qword ptr -48h
.text:00000000000044F0 var_40          = qword ptr -40h
.text:00000000000044F0
.text:00000000000044F0 ; __unwind {
.text:00000000000044F0                 push    r15
.text:00000000000044F2                 push    r14
.text:00000000000044F4                 lea     rax, default_quoting_options
.text:00000000000044FB                 push    r13
.text:00000000000044FD                 push    r12
.text:00000000000044FF                 mov     r12, rdx
.text:0000000000004502                 push    rbp
.text:0000000000004503                 push    rbx
.text:0000000000004504                 mov     rbx, rcx
.text:0000000000004507                 mov     r14, rdi
.text:000000000000450A                 mov     r15, rsi
.text:000000000000450D                 sub     rsp, 38h
.text:0000000000004511                 test    rcx, rcx
.text:0000000000004514                 cmovz   rbx, rax
.text:0000000000004518                 xor     ebp, ebp
.text:000000000000451A                 call    ___errno_location
.text:000000000000451F                 test    r12, r12
.text:0000000000004522                 mov     r13, rax
.text:0000000000004525                 mov     eax, [rax]
.text:0000000000004527                 setz    bpl
.text:000000000000452B                 or      ebp, [rbx+4]
.text:000000000000452E                 lea     r10, [rbx+8]
.text:0000000000004532                 sub     rsp, 8
.text:0000000000004536                 mov     r8d, [rbx]
.text:0000000000004539                 mov     rcx, r15
.text:000000000000453C                 mov     [rsp+70h+var_5C], eax
.text:0000000000004540                 push    qword ptr [rbx+30h]
.text:0000000000004543                 mov     rdx, r14
.text:0000000000004546                 push    qword ptr [rbx+28h]
.text:0000000000004549                 push    r10
.text:000000000000454B                 xor     esi, esi
.text:000000000000454D                 mov     r9d, ebp
.text:0000000000004550                 xor     edi, edi
.text:0000000000004552                 mov     [rsp+88h+var_48], r10
.text:0000000000004557                 call    quotearg_buffer_restyled
.text:000000000000455C                 lea     rsi, [rax+1]
.text:0000000000004560                 mov     [rsp+88h+var_40], rax
.text:0000000000004565                 add     rsp, 20h
.text:0000000000004569                 mov     rdi, rsi
.text:000000000000456C                 mov     [rsp+68h+var_50], rsi
.text:0000000000004571                 call    xmalloc
.text:0000000000004576                 mov     [rsp+68h+var_58], rax
.text:000000000000457B                 sub     rsp, 8
.text:000000000000457F                 push    qword ptr [rbx+30h]
.text:0000000000004582                 push    qword ptr [rbx+28h]
.text:0000000000004585                 mov     r10, [rsp+80h+var_48]
.text:000000000000458A                 mov     r9d, ebp
.text:000000000000458D                 mov     r8d, [rbx]
.text:0000000000004590                 mov     rcx, r15
.text:0000000000004593                 mov     rdx, r14
.text:0000000000004596                 mov     rdi, rax
.text:0000000000004599                 push    r10
.text:000000000000459B                 mov     rsi, [rsp+88h+var_50]
.text:00000000000045A0                 call    quotearg_buffer_restyled
.text:00000000000045A5                 mov     eax, [rsp+88h+var_5C]
.text:00000000000045A9                 add     rsp, 20h
.text:00000000000045AD                 test    r12, r12
.text:00000000000045B0                 mov     [r13+0], eax
.text:00000000000045B4                 jz      short loc_45BF
.text:00000000000045B6                 mov     r11, [rsp+68h+var_40]
.text:00000000000045BB                 mov     [r12], r11
.text:00000000000045BF
.text:00000000000045BF loc_45BF:                               ; CODE XREF: quotearg_alloc_mem+C4↑j
.text:00000000000045BF                 mov     rax, [rsp+68h+var_58]
.text:00000000000045C4                 add     rsp, 38h
.text:00000000000045C8                 pop     rbx
.text:00000000000045C9                 pop     rbp
.text:00000000000045CA                 pop     r12
.text:00000000000045CC                 pop     r13
.text:00000000000045CE                 pop     r14
.text:00000000000045D0                 pop     r15
.text:00000000000045D2                 retn
.text:00000000000045D2 ; } // starts at 44F0
.text:00000000000045D2 quotearg_alloc_mem endp
.text:00000000000045D2
.text:00000000000045D2 ; ---------------------------------------------------------------------------
.text:00000000000045D3                 align 20h
.text:00000000000045E0
.text:00000000000045E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000045E0
.text:00000000000045E0
.text:00000000000045E0                 public quotearg_alloc
.text:00000000000045E0 quotearg_alloc  proc near
.text:00000000000045E0 ; __unwind {
.text:00000000000045E0                 mov     rcx, rdx
.text:00000000000045E3                 xor     edx, edx
.text:00000000000045E5                 jmp     quotearg_alloc_mem
.text:00000000000045E5 ; } // starts at 45E0
.text:00000000000045E5 quotearg_alloc  endp
.text:00000000000045E5
.text:00000000000045E5 ; ---------------------------------------------------------------------------
.text:00000000000045EA                 align 10h
.text:00000000000045F0
.text:00000000000045F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000045F0
.text:00000000000045F0 ; Attributes: info_from_lumina
.text:00000000000045F0
.text:00000000000045F0 ; void __cdecl quotearg_free()
.text:00000000000045F0                 public quotearg_free
.text:00000000000045F0 quotearg_free   proc near
.text:00000000000045F0 ; __unwind {
.text:00000000000045F0                 mov     eax, cs:nslots
.text:00000000000045F6                 push    r12
.text:00000000000045F8                 mov     r12, cs:slotvec
.text:00000000000045FF                 push    rbp
.text:0000000000004600                 push    rbx
.text:0000000000004601                 cmp     eax, 1
.text:0000000000004604                 jle     short loc_4631
.text:0000000000004606                 sub     eax, 2
.text:0000000000004609                 lea     rbx, [r12+18h]
.text:000000000000460E                 shl     rax, 4
.text:0000000000004612                 lea     rbp, [r12+rax+28h]
.text:0000000000004617                 nop     word ptr [rax+rax+00000000h]
.text:0000000000004620
.text:0000000000004620 loc_4620:                               ; CODE XREF: quotearg_free+3F↓j
.text:0000000000004620                 mov     rdi, [rbx]      ; ptr
.text:0000000000004623                 add     rbx, 10h
.text:0000000000004627                 call    free
.text:000000000000462C                 cmp     rbx, rbp
.text:000000000000462F                 jnz     short loc_4620
.text:0000000000004631
.text:0000000000004631 loc_4631:                               ; CODE XREF: quotearg_free+14↑j
.text:0000000000004631                 mov     rdi, [r12+8]    ; ptr
.text:0000000000004636                 lea     rbx, slot0
.text:000000000000463D                 cmp     rdi, rbx
.text:0000000000004640                 jz      short loc_4659
.text:0000000000004642                 call    free
.text:0000000000004647                 mov     cs:slotvec0, 100h
.text:0000000000004652                 mov     cs:off_20E078, rbx
.text:0000000000004659
.text:0000000000004659 loc_4659:                               ; CODE XREF: quotearg_free+50↑j
.text:0000000000004659                 lea     rbx, slotvec0
.text:0000000000004660                 cmp     r12, rbx
.text:0000000000004663                 jz      short loc_4674
.text:0000000000004665                 mov     rdi, r12        ; ptr
.text:0000000000004668                 call    free
.text:000000000000466D                 mov     cs:slotvec, rbx
.text:0000000000004674
.text:0000000000004674 loc_4674:                               ; CODE XREF: quotearg_free+73↑j
.text:0000000000004674                 pop     rbx
.text:0000000000004675                 mov     cs:nslots, 1
.text:000000000000467F                 pop     rbp
.text:0000000000004680                 pop     r12
.text:0000000000004682                 retn
.text:0000000000004682 ; } // starts at 45F0
.text:0000000000004682 quotearg_free   endp
.text:0000000000004682
.text:0000000000004682 ; ---------------------------------------------------------------------------
.text:0000000000004683                 align 10h
.text:0000000000004690
.text:0000000000004690 ; =============== S U B R O U T I N E =======================================
.text:0000000000004690
.text:0000000000004690
.text:0000000000004690                 public quotearg_n
.text:0000000000004690 quotearg_n      proc near
.text:0000000000004690 ; __unwind {
.text:0000000000004690                 lea     rcx, default_quoting_options
.text:0000000000004697                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000469E                 jmp     quotearg_n_options
.text:000000000000469E ; } // starts at 4690
.text:000000000000469E quotearg_n      endp
.text:000000000000469E
.text:000000000000469E ; ---------------------------------------------------------------------------
.text:00000000000046A3                 align 10h
.text:00000000000046B0
.text:00000000000046B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000046B0
.text:00000000000046B0
.text:00000000000046B0                 public quotearg_n_mem
.text:00000000000046B0 quotearg_n_mem  proc near
.text:00000000000046B0 ; __unwind {
.text:00000000000046B0                 lea     rcx, default_quoting_options
.text:00000000000046B7                 jmp     quotearg_n_options
.text:00000000000046B7 ; } // starts at 46B0
.text:00000000000046B7 quotearg_n_mem  endp
.text:00000000000046B7
.text:00000000000046B7 ; ---------------------------------------------------------------------------
.text:00000000000046BC                 align 20h
.text:00000000000046C0
.text:00000000000046C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000046C0
.text:00000000000046C0
.text:00000000000046C0                 public quotearg
.text:00000000000046C0 quotearg        proc near
.text:00000000000046C0 ; __unwind {
.text:00000000000046C0                 lea     rcx, default_quoting_options
.text:00000000000046C7                 mov     rsi, rdi
.text:00000000000046CA                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000046D1                 xor     edi, edi
.text:00000000000046D3                 jmp     quotearg_n_options
.text:00000000000046D3 ; } // starts at 46C0
.text:00000000000046D3 quotearg        endp
.text:00000000000046D3
.text:00000000000046D3 ; ---------------------------------------------------------------------------
.text:00000000000046D8                 align 20h
.text:00000000000046E0
.text:00000000000046E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000046E0
.text:00000000000046E0
.text:00000000000046E0                 public quotearg_mem
.text:00000000000046E0 quotearg_mem    proc near
.text:00000000000046E0 ; __unwind {
.text:00000000000046E0                 lea     rcx, default_quoting_options
.text:00000000000046E7                 mov     rdx, rsi
.text:00000000000046EA                 mov     rsi, rdi
.text:00000000000046ED                 xor     edi, edi
.text:00000000000046EF                 jmp     quotearg_n_options
.text:00000000000046EF ; } // starts at 46E0
.text:00000000000046EF quotearg_mem    endp
.text:00000000000046EF
.text:00000000000046EF ; ---------------------------------------------------------------------------
.text:00000000000046F4                 align 20h
.text:0000000000004700
.text:0000000000004700 ; =============== S U B R O U T I N E =======================================
.text:0000000000004700
.text:0000000000004700 ; Attributes: info_from_lumina
.text:0000000000004700
.text:0000000000004700 ; char *__fastcall quotearg_n_style(int n, quoting_style s, const char *arg)
.text:0000000000004700                 public quotearg_n_style
.text:0000000000004700 quotearg_n_style proc near              ; CODE XREF: main+723↑p
.text:0000000000004700                                         ; main+90E↑p ...
.text:0000000000004700
.text:0000000000004700 var_48          = dword ptr -48h
.text:0000000000004700 var_44          = qword ptr -44h
.text:0000000000004700 var_3C          = qword ptr -3Ch
.text:0000000000004700 var_34          = qword ptr -34h
.text:0000000000004700 var_2C          = qword ptr -2Ch
.text:0000000000004700 var_24          = qword ptr -24h
.text:0000000000004700 var_1C          = qword ptr -1Ch
.text:0000000000004700 var_14          = dword ptr -14h
.text:0000000000004700 var_10          = qword ptr -10h
.text:0000000000004700
.text:0000000000004700 ; __unwind {
.text:0000000000004700                 sub     rsp, 48h
.text:0000000000004704                 mov     rax, rdx
.text:0000000000004707                 mov     rdx, fs:28h
.text:0000000000004710                 mov     [rsp+48h+var_10], rdx
.text:0000000000004715                 xor     edx, edx
.text:0000000000004717                 cmp     esi, 0Ah
.text:000000000000471A                 jz      short loc_4784
.text:000000000000471C                 mov     [rsp+48h+var_48], esi
.text:000000000000471F                 mov     rcx, rsp
.text:0000000000004722                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004729                 mov     rsi, rax
.text:000000000000472C                 mov     [rsp+48h+var_44], 0
.text:0000000000004735                 mov     [rsp+48h+var_3C], 0
.text:000000000000473E                 mov     [rsp+48h+var_34], 0
.text:0000000000004747                 mov     [rsp+48h+var_2C], 0
.text:0000000000004750                 mov     [rsp+48h+var_24], 0
.text:0000000000004759                 mov     [rsp+48h+var_1C], 0
.text:0000000000004762                 mov     [rsp+48h+var_14], 0
.text:000000000000476A                 call    quotearg_n_options
.text:000000000000476F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000004774                 xor     rcx, fs:28h
.text:000000000000477D                 jnz     short loc_4789
.text:000000000000477F                 add     rsp, 48h
.text:0000000000004783                 retn
.text:0000000000004784 ; ---------------------------------------------------------------------------
.text:0000000000004784
.text:0000000000004784 loc_4784:                               ; CODE XREF: quotearg_n_style+1A↑j
.text:0000000000004784                 call    _abort
.text:0000000000004789 ; ---------------------------------------------------------------------------
.text:0000000000004789
.text:0000000000004789 loc_4789:                               ; CODE XREF: quotearg_n_style+7D↑j
.text:0000000000004789                 call    ___stack_chk_fail
.text:0000000000004789 ; } // starts at 4700
.text:0000000000004789 quotearg_n_style endp
.text:0000000000004789
.text:0000000000004789 ; ---------------------------------------------------------------------------
.text:000000000000478E                 align 10h
.text:0000000000004790
.text:0000000000004790 ; =============== S U B R O U T I N E =======================================
.text:0000000000004790
.text:0000000000004790 ; Attributes: info_from_lumina
.text:0000000000004790
.text:0000000000004790 ; char *__fastcall quotearg_n_style_mem(int n, quoting_style s, const char *arg, size_t argsize)
.text:0000000000004790                 public quotearg_n_style_mem
.text:0000000000004790 quotearg_n_style_mem proc near          ; CODE XREF: quotearg_style_mem+A↓j
.text:0000000000004790
.text:0000000000004790 var_48          = dword ptr -48h
.text:0000000000004790 var_44          = qword ptr -44h
.text:0000000000004790 var_3C          = qword ptr -3Ch
.text:0000000000004790 var_34          = qword ptr -34h
.text:0000000000004790 var_2C          = qword ptr -2Ch
.text:0000000000004790 var_24          = qword ptr -24h
.text:0000000000004790 var_1C          = qword ptr -1Ch
.text:0000000000004790 var_14          = dword ptr -14h
.text:0000000000004790 var_10          = qword ptr -10h
.text:0000000000004790
.text:0000000000004790 ; __unwind {
.text:0000000000004790                 sub     rsp, 48h
.text:0000000000004794                 mov     rax, rdx
.text:0000000000004797                 mov     rdx, rcx
.text:000000000000479A                 mov     rcx, fs:28h
.text:00000000000047A3                 mov     [rsp+48h+var_10], rcx
.text:00000000000047A8                 xor     ecx, ecx
.text:00000000000047AA                 cmp     esi, 0Ah
.text:00000000000047AD                 jz      short loc_4810
.text:00000000000047AF                 mov     [rsp+48h+var_48], esi
.text:00000000000047B2                 mov     rcx, rsp
.text:00000000000047B5                 mov     rsi, rax
.text:00000000000047B8                 mov     [rsp+48h+var_44], 0
.text:00000000000047C1                 mov     [rsp+48h+var_3C], 0
.text:00000000000047CA                 mov     [rsp+48h+var_34], 0
.text:00000000000047D3                 mov     [rsp+48h+var_2C], 0
.text:00000000000047DC                 mov     [rsp+48h+var_24], 0
.text:00000000000047E5                 mov     [rsp+48h+var_1C], 0
.text:00000000000047EE                 mov     [rsp+48h+var_14], 0
.text:00000000000047F6                 call    quotearg_n_options
.text:00000000000047FB                 mov     rdx, [rsp+48h+var_10]
.text:0000000000004800                 xor     rdx, fs:28h
.text:0000000000004809                 jnz     short loc_4815
.text:000000000000480B                 add     rsp, 48h
.text:000000000000480F                 retn
.text:0000000000004810 ; ---------------------------------------------------------------------------
.text:0000000000004810
.text:0000000000004810 loc_4810:                               ; CODE XREF: quotearg_n_style_mem+1D↑j
.text:0000000000004810                 call    _abort
.text:0000000000004815 ; ---------------------------------------------------------------------------
.text:0000000000004815
.text:0000000000004815 loc_4815:                               ; CODE XREF: quotearg_n_style_mem+79↑j
.text:0000000000004815                 call    ___stack_chk_fail
.text:0000000000004815 ; } // starts at 4790
.text:0000000000004815 quotearg_n_style_mem endp
.text:0000000000004815
.text:0000000000004815 ; ---------------------------------------------------------------------------
.text:000000000000481A                 align 20h
.text:0000000000004820
.text:0000000000004820 ; =============== S U B R O U T I N E =======================================
.text:0000000000004820
.text:0000000000004820
.text:0000000000004820                 public quotearg_style
.text:0000000000004820 quotearg_style  proc near               ; CODE XREF: main+306↑p
.text:0000000000004820                                         ; main+51D↑p ...
.text:0000000000004820 ; __unwind {
.text:0000000000004820                 mov     rdx, rsi
.text:0000000000004823                 mov     esi, edi
.text:0000000000004825                 xor     edi, edi
.text:0000000000004827                 jmp     quotearg_n_style
.text:0000000000004827 ; } // starts at 4820
.text:0000000000004827 quotearg_style  endp
.text:0000000000004827
.text:0000000000004827 ; ---------------------------------------------------------------------------
.text:000000000000482C                 align 10h
.text:0000000000004830
.text:0000000000004830 ; =============== S U B R O U T I N E =======================================
.text:0000000000004830
.text:0000000000004830
.text:0000000000004830                 public quotearg_style_mem
.text:0000000000004830 quotearg_style_mem proc near
.text:0000000000004830 ; __unwind {
.text:0000000000004830                 mov     rcx, rdx
.text:0000000000004833                 mov     rdx, rsi
.text:0000000000004836                 mov     esi, edi
.text:0000000000004838                 xor     edi, edi
.text:000000000000483A                 jmp     quotearg_n_style_mem
.text:000000000000483A ; } // starts at 4830
.text:000000000000483A quotearg_style_mem endp
.text:000000000000483A
.text:000000000000483A ; ---------------------------------------------------------------------------
.text:000000000000483F                 align 20h
.text:0000000000004840
.text:0000000000004840 ; =============== S U B R O U T I N E =======================================
.text:0000000000004840
.text:0000000000004840 ; Attributes: info_from_lumina
.text:0000000000004840
.text:0000000000004840 ; char *__fastcall quotearg_char_mem(const char *arg, size_t argsize, char ch_0)
.text:0000000000004840                 public quotearg_char_mem
.text:0000000000004840 quotearg_char_mem proc near             ; CODE XREF: quotearg_char+B↓j
.text:0000000000004840                                         ; quotearg_colon+C↓j ...
.text:0000000000004840
.text:0000000000004840 var_48          = xmmword ptr -48h
.text:0000000000004840 var_38          = xmmword ptr -38h
.text:0000000000004840 var_28          = xmmword ptr -28h
.text:0000000000004840 var_18          = qword ptr -18h
.text:0000000000004840 var_10          = qword ptr -10h
.text:0000000000004840
.text:0000000000004840 ; __unwind {
.text:0000000000004840                 sub     rsp, 48h
.text:0000000000004844                 mov     ecx, edx
.text:0000000000004846                 mov     rax, fs:28h
.text:000000000000484F                 mov     [rsp+48h+var_10], rax
.text:0000000000004854                 xor     eax, eax
.text:0000000000004856                 mov     rax, cs:qword_20E250
.text:000000000000485D                 mov     r8, rsp
.text:0000000000004860                 and     ecx, 1Fh
.text:0000000000004863                 movdqa  xmm0, cs:default_quoting_options
.text:000000000000486B                 mov     [rsp+48h+var_18], rax
.text:0000000000004870                 mov     eax, edx
.text:0000000000004872                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000004876                 shr     al, 5
.text:0000000000004879                 movzx   eax, al
.text:000000000000487C                 lea     r9, [r8+rax*4+8]
.text:0000000000004881                 movdqa  xmm0, cs:xmmword_20E230
.text:0000000000004889                 movaps  [rsp+48h+var_38], xmm0
.text:000000000000488E                 movdqa  xmm0, cs:xmmword_20E240
.text:0000000000004896                 movaps  [rsp+48h+var_28], xmm0
.text:000000000000489B                 mov     edx, [r9]
.text:000000000000489E                 mov     eax, edx
.text:00000000000048A0                 shr     eax, cl
.text:00000000000048A2                 not     eax
.text:00000000000048A4                 and     eax, 1
.text:00000000000048A7                 shl     eax, cl
.text:00000000000048A9                 mov     rcx, r8
.text:00000000000048AC                 xor     eax, edx
.text:00000000000048AE                 mov     rdx, rsi
.text:00000000000048B1                 mov     rsi, rdi
.text:00000000000048B4                 mov     [r9], eax
.text:00000000000048B7                 xor     edi, edi
.text:00000000000048B9                 call    quotearg_n_options
.text:00000000000048BE                 mov     rsi, [rsp+48h+var_10]
.text:00000000000048C3                 xor     rsi, fs:28h
.text:00000000000048CC                 jnz     short loc_48D3
.text:00000000000048CE                 add     rsp, 48h
.text:00000000000048D2                 retn
.text:00000000000048D3 ; ---------------------------------------------------------------------------
.text:00000000000048D3
.text:00000000000048D3 loc_48D3:                               ; CODE XREF: quotearg_char_mem+8C↑j
.text:00000000000048D3                 call    ___stack_chk_fail
.text:00000000000048D3 ; } // starts at 4840
.text:00000000000048D3 quotearg_char_mem endp
.text:00000000000048D3
.text:00000000000048D3 ; ---------------------------------------------------------------------------
.text:00000000000048D8                 align 20h
.text:00000000000048E0
.text:00000000000048E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000048E0
.text:00000000000048E0
.text:00000000000048E0                 public quotearg_char
.text:00000000000048E0 quotearg_char   proc near
.text:00000000000048E0 ; __unwind {
.text:00000000000048E0                 movsx   edx, sil
.text:00000000000048E4                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:00000000000048EB                 jmp     quotearg_char_mem
.text:00000000000048EB ; } // starts at 48E0
.text:00000000000048EB quotearg_char   endp
.text:00000000000048EB
.text:00000000000048F0
.text:00000000000048F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000048F0
.text:00000000000048F0
.text:00000000000048F0                 public quotearg_colon
.text:00000000000048F0 quotearg_colon  proc near               ; CODE XREF: close_stdout+65↑p
.text:00000000000048F0 ; __unwind {
.text:00000000000048F0                 mov     edx, 3Ah ; ':'
.text:00000000000048F5                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:00000000000048FC                 jmp     quotearg_char_mem
.text:00000000000048FC ; } // starts at 48F0
.text:00000000000048FC quotearg_colon  endp
.text:00000000000048FC
.text:00000000000048FC ; ---------------------------------------------------------------------------
.text:0000000000004901                 align 10h
.text:0000000000004910
.text:0000000000004910 ; =============== S U B R O U T I N E =======================================
.text:0000000000004910
.text:0000000000004910
.text:0000000000004910                 public quotearg_colon_mem
.text:0000000000004910 quotearg_colon_mem proc near
.text:0000000000004910 ; __unwind {
.text:0000000000004910                 mov     edx, 3Ah ; ':'
.text:0000000000004915                 jmp     quotearg_char_mem
.text:0000000000004915 ; } // starts at 4910
.text:0000000000004915 quotearg_colon_mem endp
.text:0000000000004915
.text:0000000000004915 ; ---------------------------------------------------------------------------
.text:000000000000491A                 align 20h
.text:0000000000004920
.text:0000000000004920 ; =============== S U B R O U T I N E =======================================
.text:0000000000004920
.text:0000000000004920 ; Attributes: info_from_lumina
.text:0000000000004920
.text:0000000000004920 ; char *__fastcall quotearg_n_style_colon(int n, quoting_style s, const char *arg)
.text:0000000000004920                 public quotearg_n_style_colon
.text:0000000000004920 quotearg_n_style_colon proc near        ; CODE XREF: main+481↑p
.text:0000000000004920                                         ; main+594↑p
.text:0000000000004920
.text:0000000000004920 var_48          = dword ptr -48h
.text:0000000000004920 var_44          = qword ptr -44h
.text:0000000000004920 var_3C          = qword ptr -3Ch
.text:0000000000004920 var_34          = qword ptr -34h
.text:0000000000004920 var_2C          = qword ptr -2Ch
.text:0000000000004920 var_24          = qword ptr -24h
.text:0000000000004920 var_1C          = qword ptr -1Ch
.text:0000000000004920 var_14          = dword ptr -14h
.text:0000000000004920 var_10          = qword ptr -10h
.text:0000000000004920
.text:0000000000004920 ; __unwind {
.text:0000000000004920                 sub     rsp, 48h
.text:0000000000004924                 mov     rax, rdx
.text:0000000000004927                 mov     rdx, fs:28h
.text:0000000000004930                 mov     [rsp+48h+var_10], rdx
.text:0000000000004935                 xor     edx, edx
.text:0000000000004937                 cmp     esi, 0Ah
.text:000000000000493A                 jz      short loc_49A4
.text:000000000000493C                 mov     [rsp+48h+var_48], esi
.text:000000000000493F                 mov     rcx, rsp
.text:0000000000004942                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004949                 mov     rsi, rax
.text:000000000000494C                 mov     [rsp+48h+var_44], 0
.text:0000000000004955                 mov     [rsp+48h+var_3C], 4000000h
.text:000000000000495E                 mov     [rsp+48h+var_34], 0
.text:0000000000004967                 mov     [rsp+48h+var_2C], 0
.text:0000000000004970                 mov     [rsp+48h+var_24], 0
.text:0000000000004979                 mov     [rsp+48h+var_1C], 0
.text:0000000000004982                 mov     [rsp+48h+var_14], 0
.text:000000000000498A                 call    quotearg_n_options
.text:000000000000498F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000004994                 xor     rcx, fs:28h
.text:000000000000499D                 jnz     short loc_49A9
.text:000000000000499F                 add     rsp, 48h
.text:00000000000049A3                 retn
.text:00000000000049A4 ; ---------------------------------------------------------------------------
.text:00000000000049A4
.text:00000000000049A4 loc_49A4:                               ; CODE XREF: quotearg_n_style_colon+1A↑j
.text:00000000000049A4                 call    _abort
.text:00000000000049A9 ; ---------------------------------------------------------------------------
.text:00000000000049A9
.text:00000000000049A9 loc_49A9:                               ; CODE XREF: quotearg_n_style_colon+7D↑j
.text:00000000000049A9                 call    ___stack_chk_fail
.text:00000000000049A9 ; } // starts at 4920
.text:00000000000049A9 quotearg_n_style_colon endp
.text:00000000000049A9
.text:00000000000049A9 ; ---------------------------------------------------------------------------
.text:00000000000049AE                 align 10h
.text:00000000000049B0
.text:00000000000049B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000049B0
.text:00000000000049B0 ; Attributes: info_from_lumina
.text:00000000000049B0
.text:00000000000049B0 ; char *__fastcall quotearg_n_custom_mem(int n, const char *left_quote, const char *right_quote, const char *arg, size_t argsize)
.text:00000000000049B0                 public quotearg_n_custom_mem
.text:00000000000049B0 quotearg_n_custom_mem proc near         ; CODE XREF: quotearg_n_custom+7↓j
.text:00000000000049B0                                         ; quotearg_custom+12↓j ...
.text:00000000000049B0
.text:00000000000049B0 var_48          = xmmword ptr -48h
.text:00000000000049B0 var_38          = xmmword ptr -38h
.text:00000000000049B0 var_28          = xmmword ptr -28h
.text:00000000000049B0 var_18          = qword ptr -18h
.text:00000000000049B0 var_10          = qword ptr -10h
.text:00000000000049B0
.text:00000000000049B0 ; __unwind {
.text:00000000000049B0                 sub     rsp, 48h
.text:00000000000049B4                 mov     r9, rcx
.text:00000000000049B7                 mov     rcx, cs:qword_20E250
.text:00000000000049BE                 movdqa  xmm0, cs:default_quoting_options
.text:00000000000049C6                 mov     rax, fs:28h
.text:00000000000049CF                 mov     [rsp+48h+var_10], rax
.text:00000000000049D4                 xor     eax, eax
.text:00000000000049D6                 movaps  [rsp+48h+var_48], xmm0
.text:00000000000049DA                 test    rsi, rsi
.text:00000000000049DD                 mov     [rsp+48h+var_18], rcx
.text:00000000000049E2                 mov     dword ptr [rsp+48h+var_48], 0Ah
.text:00000000000049E9                 movdqa  xmm0, cs:xmmword_20E230
.text:00000000000049F1                 movaps  [rsp+48h+var_38], xmm0
.text:00000000000049F6                 movdqa  xmm0, cs:xmmword_20E240
.text:00000000000049FE                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000004A03                 jz      short loc_4A37
.text:0000000000004A05                 test    rdx, rdx
.text:0000000000004A08                 jz      short loc_4A37
.text:0000000000004A0A                 mov     qword ptr [rsp+48h+var_28+8], rsi
.text:0000000000004A0F                 mov     [rsp+48h+var_18], rdx
.text:0000000000004A14                 mov     rcx, rsp
.text:0000000000004A17                 mov     rdx, r8
.text:0000000000004A1A                 mov     rsi, r9
.text:0000000000004A1D                 call    quotearg_n_options
.text:0000000000004A22                 mov     rdi, [rsp+48h+var_10]
.text:0000000000004A27                 xor     rdi, fs:28h
.text:0000000000004A30                 jnz     short loc_4A3C
.text:0000000000004A32                 add     rsp, 48h
.text:0000000000004A36                 retn
.text:0000000000004A37 ; ---------------------------------------------------------------------------
.text:0000000000004A37
.text:0000000000004A37 loc_4A37:                               ; CODE XREF: quotearg_n_custom_mem+53↑j
.text:0000000000004A37                                         ; quotearg_n_custom_mem+58↑j
.text:0000000000004A37                 call    _abort
.text:0000000000004A3C ; ---------------------------------------------------------------------------
.text:0000000000004A3C
.text:0000000000004A3C loc_4A3C:                               ; CODE XREF: quotearg_n_custom_mem+80↑j
.text:0000000000004A3C                 call    ___stack_chk_fail
.text:0000000000004A3C ; } // starts at 49B0
.text:0000000000004A3C quotearg_n_custom_mem endp
.text:0000000000004A3C
.text:0000000000004A3C ; ---------------------------------------------------------------------------
.text:0000000000004A41                 align 10h
.text:0000000000004A50
.text:0000000000004A50 ; =============== S U B R O U T I N E =======================================
.text:0000000000004A50
.text:0000000000004A50
.text:0000000000004A50                 public quotearg_n_custom
.text:0000000000004A50 quotearg_n_custom proc near
.text:0000000000004A50 ; __unwind {
.text:0000000000004A50                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000004A57                 jmp     quotearg_n_custom_mem
.text:0000000000004A57 ; } // starts at 4A50
.text:0000000000004A57 quotearg_n_custom endp
.text:0000000000004A57
.text:0000000000004A57 ; ---------------------------------------------------------------------------
.text:0000000000004A5C                 align 20h
.text:0000000000004A60
.text:0000000000004A60 ; =============== S U B R O U T I N E =======================================
.text:0000000000004A60
.text:0000000000004A60
.text:0000000000004A60                 public quotearg_custom
.text:0000000000004A60 quotearg_custom proc near
.text:0000000000004A60 ; __unwind {
.text:0000000000004A60                 mov     rcx, rdx
.text:0000000000004A63                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000004A6A                 mov     rdx, rsi
.text:0000000000004A6D                 mov     rsi, rdi
.text:0000000000004A70                 xor     edi, edi
.text:0000000000004A72                 jmp     quotearg_n_custom_mem
.text:0000000000004A72 ; } // starts at 4A60
.text:0000000000004A72 quotearg_custom endp
.text:0000000000004A72
.text:0000000000004A72 ; ---------------------------------------------------------------------------
.text:0000000000004A77                 align 20h
.text:0000000000004A80
.text:0000000000004A80 ; =============== S U B R O U T I N E =======================================
.text:0000000000004A80
.text:0000000000004A80
.text:0000000000004A80                 public quotearg_custom_mem
.text:0000000000004A80 quotearg_custom_mem proc near
.text:0000000000004A80 ; __unwind {
.text:0000000000004A80                 mov     r8, rcx
.text:0000000000004A83                 mov     rcx, rdx
.text:0000000000004A86                 mov     rdx, rsi
.text:0000000000004A89                 mov     rsi, rdi
.text:0000000000004A8C                 xor     edi, edi
.text:0000000000004A8E                 jmp     quotearg_n_custom_mem
.text:0000000000004A8E ; } // starts at 4A80
.text:0000000000004A8E quotearg_custom_mem endp
.text:0000000000004A8E
.text:0000000000004A8E ; ---------------------------------------------------------------------------
.text:0000000000004A93                 align 20h
.text:0000000000004AA0
.text:0000000000004AA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004AA0
.text:0000000000004AA0
.text:0000000000004AA0                 public quote_n_mem
.text:0000000000004AA0 quote_n_mem     proc near
.text:0000000000004AA0 ; __unwind {
.text:0000000000004AA0                 lea     rcx, quote_quoting_options
.text:0000000000004AA7                 jmp     quotearg_n_options
.text:0000000000004AA7 ; } // starts at 4AA0
.text:0000000000004AA7 quote_n_mem     endp
.text:0000000000004AA7
.text:0000000000004AA7 ; ---------------------------------------------------------------------------
.text:0000000000004AAC                 align 10h
.text:0000000000004AB0
.text:0000000000004AB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004AB0
.text:0000000000004AB0
.text:0000000000004AB0                 public quote_mem
.text:0000000000004AB0 quote_mem       proc near
.text:0000000000004AB0 ; __unwind {
.text:0000000000004AB0                 lea     rcx, quote_quoting_options
.text:0000000000004AB7                 mov     rdx, rsi
.text:0000000000004ABA                 mov     rsi, rdi
.text:0000000000004ABD                 xor     edi, edi
.text:0000000000004ABF                 jmp     quotearg_n_options
.text:0000000000004ABF ; } // starts at 4AB0
.text:0000000000004ABF quote_mem       endp
.text:0000000000004ABF
.text:0000000000004ABF ; ---------------------------------------------------------------------------
.text:0000000000004AC4                 align 10h
.text:0000000000004AD0
.text:0000000000004AD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004AD0
.text:0000000000004AD0
.text:0000000000004AD0                 public quote_n
.text:0000000000004AD0 quote_n         proc near               ; CODE XREF: main+70F↑p
.text:0000000000004AD0 ; __unwind {
.text:0000000000004AD0                 lea     rcx, quote_quoting_options
.text:0000000000004AD7                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004ADE                 jmp     quotearg_n_options
.text:0000000000004ADE ; } // starts at 4AD0
.text:0000000000004ADE quote_n         endp
.text:0000000000004ADE
.text:0000000000004ADE ; ---------------------------------------------------------------------------
.text:0000000000004AE3                 align 10h
.text:0000000000004AF0
.text:0000000000004AF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004AF0
.text:0000000000004AF0
.text:0000000000004AF0                 public quote
.text:0000000000004AF0 quote           proc near               ; CODE XREF: main+668↑p
.text:0000000000004AF0                                         ; main+A2F↑p ...
.text:0000000000004AF0 ; __unwind {
.text:0000000000004AF0                 lea     rcx, quote_quoting_options
.text:0000000000004AF7                 mov     rsi, rdi
.text:0000000000004AFA                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004B01                 xor     edi, edi
.text:0000000000004B03                 jmp     quotearg_n_options
.text:0000000000004B03 ; } // starts at 4AF0
.text:0000000000004B03 quote           endp
.text:0000000000004B03
.text:0000000000004B03 ; ---------------------------------------------------------------------------
.text:0000000000004B08                 align 10h
.text:0000000000004B10
.text:0000000000004B10 ; =============== S U B R O U T I N E =======================================
.text:0000000000004B10
.text:0000000000004B10
.text:0000000000004B10                 public get_root_dev_ino
.text:0000000000004B10 get_root_dev_ino proc near              ; CODE XREF: main+864↑p
.text:0000000000004B10
.text:0000000000004B10 var_A8          = qword ptr -0A8h
.text:0000000000004B10 var_A0          = qword ptr -0A0h
.text:0000000000004B10 var_10          = qword ptr -10h
.text:0000000000004B10
.text:0000000000004B10 ; __unwind {
.text:0000000000004B10                 push    rbx
.text:0000000000004B11                 lea     rsi, aProcSelfFdD+10h ; filename
.text:0000000000004B18                 mov     rbx, rdi
.text:0000000000004B1B                 mov     edi, 1          ; ver
.text:0000000000004B20                 sub     rsp, 0A0h
.text:0000000000004B27                 mov     rdx, rsp        ; stat_buf
.text:0000000000004B2A                 mov     rax, fs:28h
.text:0000000000004B33                 mov     [rsp+0A8h+var_10], rax
.text:0000000000004B3B                 xor     eax, eax
.text:0000000000004B3D                 call    ___lxstat
.text:0000000000004B42                 test    eax, eax
.text:0000000000004B44                 jnz     short loc_4B78
.text:0000000000004B46                 mov     rax, [rsp+0A8h+var_A0]
.text:0000000000004B4B                 mov     [rbx], rax
.text:0000000000004B4E                 mov     rax, [rsp+0A8h+var_A8]
.text:0000000000004B52                 mov     [rbx+8], rax
.text:0000000000004B56                 mov     rax, rbx
.text:0000000000004B59
.text:0000000000004B59 loc_4B59:                               ; CODE XREF: get_root_dev_ino+6A↓j
.text:0000000000004B59                 mov     rcx, [rsp+0A8h+var_10]
.text:0000000000004B61                 xor     rcx, fs:28h
.text:0000000000004B6A                 jnz     short loc_4B7C
.text:0000000000004B6C                 add     rsp, 0A0h
.text:0000000000004B73                 pop     rbx
.text:0000000000004B74                 retn
.text:0000000000004B74 ; ---------------------------------------------------------------------------
.text:0000000000004B75                 align 8
.text:0000000000004B78
.text:0000000000004B78 loc_4B78:                               ; CODE XREF: get_root_dev_ino+34↑j
.text:0000000000004B78                 xor     eax, eax
.text:0000000000004B7A                 jmp     short loc_4B59
.text:0000000000004B7C ; ---------------------------------------------------------------------------
.text:0000000000004B7C
.text:0000000000004B7C loc_4B7C:                               ; CODE XREF: get_root_dev_ino+5A↑j
.text:0000000000004B7C                 call    ___stack_chk_fail
.text:0000000000004B7C ; } // starts at 4B10
.text:0000000000004B7C get_root_dev_ino endp
.text:0000000000004B7C
.text:0000000000004B7C ; ---------------------------------------------------------------------------
.text:0000000000004B81                 align 10h
.text:0000000000004B90
.text:0000000000004B90 ; =============== S U B R O U T I N E =======================================
.text:0000000000004B90
.text:0000000000004B90
.text:0000000000004B90 ; __int64 __fastcall version_etc_arn(FILE *stream)
.text:0000000000004B90                 public version_etc_arn
.text:0000000000004B90 version_etc_arn proc near               ; CODE XREF: version_etc_ar:loc_4FCB↓j
.text:0000000000004B90                                         ; version_etc_va:loc_501B↓p ...
.text:0000000000004B90
.text:0000000000004B90 var_58          = qword ptr -58h
.text:0000000000004B90 var_50          = qword ptr -50h
.text:0000000000004B90 var_48          = qword ptr -48h
.text:0000000000004B90 var_40          = qword ptr -40h
.text:0000000000004B90
.text:0000000000004B90 ; __unwind {
.text:0000000000004B90                 push    r15
.text:0000000000004B92                 push    r14
.text:0000000000004B94                 push    r13
.text:0000000000004B96                 push    r12
.text:0000000000004B98                 mov     r12, r9
.text:0000000000004B9B                 push    rbp
.text:0000000000004B9C                 push    rbx
.text:0000000000004B9D                 mov     rbp, rdi
.text:0000000000004BA0                 mov     rbx, r8
.text:0000000000004BA3                 sub     rsp, 28h
.text:0000000000004BA7                 test    rsi, rsi
.text:0000000000004BAA                 jz      loc_4CC8
.text:0000000000004BB0                 mov     r8, rdx
.text:0000000000004BB3                 lea     rdx, aSSS       ; "%s (%s) %s\n"
.text:0000000000004BBA                 mov     r9, rcx
.text:0000000000004BBD                 xor     eax, eax
.text:0000000000004BBF                 mov     rcx, rsi
.text:0000000000004BC2                 mov     esi, 1
.text:0000000000004BC7                 call    ___fprintf_chk
.text:0000000000004BCC
.text:0000000000004BCC loc_4BCC:                               ; CODE XREF: version_etc_arn+151↓j
.text:0000000000004BCC                 lea     rsi, aC_0       ; "(C)"
.text:0000000000004BD3                 xor     edi, edi        ; domainname
.text:0000000000004BD5                 mov     edx, 5          ; category
.text:0000000000004BDA                 call    _dcgettext
.text:0000000000004BDF                 lea     rdx, version_etc_copyright ; "Copyright %s %d Free Software Foundatio"...
.text:0000000000004BE6                 mov     rcx, rax
.text:0000000000004BE9                 mov     r8d, 7E3h
.text:0000000000004BEF                 mov     esi, 1
.text:0000000000004BF4                 mov     rdi, rbp
.text:0000000000004BF7                 xor     eax, eax
.text:0000000000004BF9                 call    ___fprintf_chk
.text:0000000000004BFE                 lea     rsi, aLicenseGplv3Gn ; "\nLicense GPLv3+: GNU GPL version 3 or "...
.text:0000000000004C05                 xor     edi, edi        ; domainname
.text:0000000000004C07                 mov     edx, 5          ; category
.text:0000000000004C0C                 call    _dcgettext
.text:0000000000004C11                 mov     rsi, rbp        ; stream
.text:0000000000004C14                 mov     rdi, rax        ; s
.text:0000000000004C17                 call    _fputs_unlocked
.text:0000000000004C1C                 cmp     r12, 9          ; switch 10 cases
.text:0000000000004C20                 ja      def_4C34        ; jumptable 0000000000004C34 default case
.text:0000000000004C26                 lea     rdx, jpt_4C34
.text:0000000000004C2D                 movsxd  rax, ds:(jpt_4C34 - 0B0A4h)[rdx+r12*4]
.text:0000000000004C31                 add     rax, rdx
.text:0000000000004C34                 jmp     rax             ; switch jump
.text:0000000000004C34 ; ---------------------------------------------------------------------------
.text:0000000000004C36                 align 20h
.text:0000000000004C40
.text:0000000000004C40 loc_4C40:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004C40                                         ; DATA XREF: .rodata:jpt_4C34↓o
.text:0000000000004C40                 mov     r9, [rbx+38h]   ; jumptable 0000000000004C34 case 8
.text:0000000000004C44                 mov     rax, [rbx+10h]
.text:0000000000004C48                 lea     rsi, aWrittenBySSSSS ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000004C4F                 mov     r8, [rbx+8]
.text:0000000000004C53                 mov     edx, 5          ; category
.text:0000000000004C58                 xor     edi, edi        ; domainname
.text:0000000000004C5A                 mov     r13, [rbx+30h]
.text:0000000000004C5E                 mov     r12, [rbx+28h]
.text:0000000000004C62                 mov     [rsp+58h+var_48], r9
.text:0000000000004C67                 mov     r15, [rbx+20h]
.text:0000000000004C6B                 mov     r14, [rbx+18h]
.text:0000000000004C6F                 mov     [rsp+58h+var_58], rax
.text:0000000000004C73                 mov     [rsp+58h+var_50], r8
.text:0000000000004C78                 mov     rbx, [rbx]
.text:0000000000004C7B                 call    _dcgettext
.text:0000000000004C80                 sub     rsp, 8
.text:0000000000004C84
.text:0000000000004C84 loc_4C84:                               ; CODE XREF: version_etc_arn+1B0↓j
.text:0000000000004C84                 mov     r9, [rsp+60h+var_48]
.text:0000000000004C89                 mov     rdx, rax
.text:0000000000004C8C                 mov     rcx, rbx
.text:0000000000004C8F                 mov     esi, 1
.text:0000000000004C94                 mov     rdi, rbp
.text:0000000000004C97                 xor     eax, eax
.text:0000000000004C99                 push    r9
.text:0000000000004C9B                 push    r13
.text:0000000000004C9D                 push    r12
.text:0000000000004C9F                 push    r15
.text:0000000000004CA1                 push    r14
.text:0000000000004CA3                 mov     r9, [rsp+88h+var_58]
.text:0000000000004CA8                 mov     r8, [rsp+88h+var_50]
.text:0000000000004CAD                 call    ___fprintf_chk
.text:0000000000004CB2                 add     rsp, 30h
.text:0000000000004CB6
.text:0000000000004CB6 loc_4CB6:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004CB6                                         ; DATA XREF: .rodata:jpt_4C34↓o
.text:0000000000004CB6                 add     rsp, 28h        ; jumptable 0000000000004C34 case 0
.text:0000000000004CBA                 pop     rbx
.text:0000000000004CBB                 pop     rbp
.text:0000000000004CBC                 pop     r12
.text:0000000000004CBE                 pop     r13
.text:0000000000004CC0                 pop     r14
.text:0000000000004CC2                 pop     r15
.text:0000000000004CC4                 retn
.text:0000000000004CC4 ; ---------------------------------------------------------------------------
.text:0000000000004CC5                 align 8
.text:0000000000004CC8
.text:0000000000004CC8 loc_4CC8:                               ; CODE XREF: version_etc_arn+1A↑j
.text:0000000000004CC8                 mov     r8, rcx
.text:0000000000004CCB                 mov     rcx, rdx
.text:0000000000004CCE                 lea     rdx, aSS        ; "%s %s\n"
.text:0000000000004CD5                 mov     esi, 1
.text:0000000000004CDA                 xor     eax, eax
.text:0000000000004CDC                 call    ___fprintf_chk
.text:0000000000004CE1                 jmp     loc_4BCC
.text:0000000000004CE1 ; ---------------------------------------------------------------------------
.text:0000000000004CE6                 align 10h
.text:0000000000004CF0
.text:0000000000004CF0 loc_4CF0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004CF0                                         ; DATA XREF: .rodata:jpt_4C34↓o
.text:0000000000004CF0                 mov     r10, [rbx+40h]  ; jumptable 0000000000004C34 case 9
.text:0000000000004CF4                 mov     r9, [rbx+38h]
.text:0000000000004CF8                 lea     rsi, aWrittenBySSSSS_0 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000004CFF                 mov     rax, [rbx+10h]
.text:0000000000004D03                 mov     r8, [rbx+8]
.text:0000000000004D07                 mov     edx, 5          ; category
.text:0000000000004D0C                 mov     r13, [rbx+30h]
.text:0000000000004D10                 mov     r12, [rbx+28h]
.text:0000000000004D14                 mov     r15, [rbx+20h]
.text:0000000000004D18                 mov     r14, [rbx+18h]
.text:0000000000004D1C                 mov     rbx, [rbx]
.text:0000000000004D1F                 mov     [rsp+58h+var_40], r10
.text:0000000000004D24                 mov     [rsp+58h+var_48], r9
.text:0000000000004D29                 mov     [rsp+58h+var_58], rax
.text:0000000000004D2D                 mov     [rsp+58h+var_50], r8
.text:0000000000004D32
.text:0000000000004D32 loc_4D32:                               ; CODE XREF: version_etc_arn+412↓j
.text:0000000000004D32                 xor     edi, edi        ; domainname
.text:0000000000004D34                 call    _dcgettext
.text:0000000000004D39                 mov     r10, [rsp+58h+var_40]
.text:0000000000004D3E                 push    r10
.text:0000000000004D40                 jmp     loc_4C84
.text:0000000000004D40 ; ---------------------------------------------------------------------------
.text:0000000000004D45                 align 8
.text:0000000000004D48
.text:0000000000004D48 loc_4D48:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004D48                                         ; DATA XREF: .rodata:jpt_4C34↓o
.text:0000000000004D48                 mov     rbx, [rbx]      ; jumptable 0000000000004C34 case 1
.text:0000000000004D4B                 lea     rsi, aWrittenByS ; "Written by %s.\n"
.text:0000000000004D52                 mov     edx, 5          ; category
.text:0000000000004D57                 xor     edi, edi        ; domainname
.text:0000000000004D59                 call    _dcgettext
.text:0000000000004D5E                 add     rsp, 28h
.text:0000000000004D62                 mov     rcx, rbx
.text:0000000000004D65                 mov     rdi, rbp
.text:0000000000004D68                 pop     rbx
.text:0000000000004D69                 pop     rbp
.text:0000000000004D6A                 pop     r12
.text:0000000000004D6C                 pop     r13
.text:0000000000004D6E                 pop     r14
.text:0000000000004D70                 pop     r15
.text:0000000000004D72                 mov     rdx, rax
.text:0000000000004D75                 mov     esi, 1
.text:0000000000004D7A                 xor     eax, eax
.text:0000000000004D7C                 jmp     ___fprintf_chk
.text:0000000000004D7C ; ---------------------------------------------------------------------------
.text:0000000000004D81                 align 8
.text:0000000000004D88
.text:0000000000004D88 loc_4D88:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004D88                                         ; DATA XREF: .rodata:jpt_4C34↓o
.text:0000000000004D88                 mov     r12, [rbx+8]    ; jumptable 0000000000004C34 case 2
.text:0000000000004D8C                 lea     rsi, aWrittenBySAndS ; "Written by %s and %s.\n"
.text:0000000000004D93                 mov     rbx, [rbx]
.text:0000000000004D96                 mov     edx, 5          ; category
.text:0000000000004D9B                 xor     edi, edi        ; domainname
.text:0000000000004D9D                 call    _dcgettext
.text:0000000000004DA2                 add     rsp, 28h
.text:0000000000004DA6                 mov     r8, r12
.text:0000000000004DA9                 mov     rcx, rbx
.text:0000000000004DAC                 mov     rdi, rbp
.text:0000000000004DAF                 mov     rdx, rax
.text:0000000000004DB2                 mov     esi, 1
.text:0000000000004DB7                 pop     rbx
.text:0000000000004DB8                 pop     rbp
.text:0000000000004DB9                 pop     r12
.text:0000000000004DBB                 pop     r13
.text:0000000000004DBD                 pop     r14
.text:0000000000004DBF                 pop     r15
.text:0000000000004DC1                 xor     eax, eax
.text:0000000000004DC3                 jmp     ___fprintf_chk
.text:0000000000004DC3 ; ---------------------------------------------------------------------------
.text:0000000000004DC8                 align 10h
.text:0000000000004DD0
.text:0000000000004DD0 loc_4DD0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004DD0                                         ; DATA XREF: .rodata:jpt_4C34↓o
.text:0000000000004DD0                 mov     r13, [rbx+10h]  ; jumptable 0000000000004C34 case 3
.text:0000000000004DD4                 mov     r12, [rbx+8]
.text:0000000000004DD8                 lea     rsi, aWrittenBySSAnd ; "Written by %s, %s, and %s.\n"
.text:0000000000004DDF                 mov     rbx, [rbx]
.text:0000000000004DE2                 mov     edx, 5          ; category
.text:0000000000004DE7                 xor     edi, edi        ; domainname
.text:0000000000004DE9                 call    _dcgettext
.text:0000000000004DEE                 add     rsp, 28h
.text:0000000000004DF2                 mov     r9, r13
.text:0000000000004DF5                 mov     r8, r12
.text:0000000000004DF8                 mov     rcx, rbx
.text:0000000000004DFB                 mov     rdi, rbp
.text:0000000000004DFE                 mov     rdx, rax
.text:0000000000004E01                 pop     rbx
.text:0000000000004E02                 pop     rbp
.text:0000000000004E03                 pop     r12
.text:0000000000004E05                 pop     r13
.text:0000000000004E07                 pop     r14
.text:0000000000004E09                 pop     r15
.text:0000000000004E0B                 mov     esi, 1
.text:0000000000004E10                 xor     eax, eax
.text:0000000000004E12                 jmp     ___fprintf_chk
.text:0000000000004E12 ; ---------------------------------------------------------------------------
.text:0000000000004E17                 align 20h
.text:0000000000004E20
.text:0000000000004E20 loc_4E20:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004E20                                         ; DATA XREF: .rodata:jpt_4C34↓o
.text:0000000000004E20                 lea     rsi, aWrittenBySSSAn ; jumptable 0000000000004C34 case 4
.text:0000000000004E27                 mov     edx, 5          ; category
.text:0000000000004E2C                 xor     edi, edi        ; domainname
.text:0000000000004E2E                 mov     r14, [rbx+18h]
.text:0000000000004E32                 mov     r13, [rbx+10h]
.text:0000000000004E36                 mov     r12, [rbx+8]
.text:0000000000004E3A                 mov     rbx, [rbx]
.text:0000000000004E3D                 call    _dcgettext
.text:0000000000004E42                 sub     rsp, 8
.text:0000000000004E46
.text:0000000000004E46 loc_4E46:                               ; CODE XREF: version_etc_arn+310↓j
.text:0000000000004E46                 push    r14
.text:0000000000004E48                 mov     rdx, rax
.text:0000000000004E4B                 mov     r9, r13
.text:0000000000004E4E                 mov     r8, r12
.text:0000000000004E51                 mov     rcx, rbx
.text:0000000000004E54                 mov     rdi, rbp
.text:0000000000004E57                 mov     esi, 1
.text:0000000000004E5C                 xor     eax, eax
.text:0000000000004E5E                 call    ___fprintf_chk
.text:0000000000004E63                 pop     rax
.text:0000000000004E64                 pop     rdx
.text:0000000000004E65                 add     rsp, 28h
.text:0000000000004E69                 pop     rbx
.text:0000000000004E6A                 pop     rbp
.text:0000000000004E6B                 pop     r12
.text:0000000000004E6D                 pop     r13
.text:0000000000004E6F                 pop     r14
.text:0000000000004E71                 pop     r15
.text:0000000000004E73                 retn
.text:0000000000004E73 ; ---------------------------------------------------------------------------
.text:0000000000004E74                 align 8
.text:0000000000004E78
.text:0000000000004E78 loc_4E78:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004E78                                         ; DATA XREF: .rodata:jpt_4C34↓o
.text:0000000000004E78                 mov     r15, [rbx+20h]  ; jumptable 0000000000004C34 case 5
.text:0000000000004E7C                 lea     rsi, aWrittenBySSSSA ; "Written by %s, %s, %s,\n%s, and %s.\n"
.text:0000000000004E83                 mov     edx, 5          ; category
.text:0000000000004E88                 xor     edi, edi        ; domainname
.text:0000000000004E8A                 mov     r14, [rbx+18h]
.text:0000000000004E8E                 mov     r13, [rbx+10h]
.text:0000000000004E92                 mov     r12, [rbx+8]
.text:0000000000004E96                 mov     rbx, [rbx]
.text:0000000000004E99                 call    _dcgettext
.text:0000000000004E9E                 push    r15
.text:0000000000004EA0                 jmp     short loc_4E46
.text:0000000000004EA0 ; ---------------------------------------------------------------------------
.text:0000000000004EA2                 align 8
.text:0000000000004EA8
.text:0000000000004EA8 loc_4EA8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004EA8                                         ; DATA XREF: .rodata:jpt_4C34↓o
.text:0000000000004EA8                 mov     r8, [rbx+8]     ; jumptable 0000000000004C34 case 6
.text:0000000000004EAC                 mov     r12, [rbx+28h]
.text:0000000000004EB0                 lea     rsi, aWrittenBySSSSS_1 ; "Written by %s, %s, %s,\n%s, %s, and %s."...
.text:0000000000004EB7                 mov     r15, [rbx+20h]
.text:0000000000004EBB                 mov     r14, [rbx+18h]
.text:0000000000004EBF                 mov     edx, 5          ; category
.text:0000000000004EC4                 mov     r13, [rbx+10h]
.text:0000000000004EC8                 xor     edi, edi        ; domainname
.text:0000000000004ECA                 mov     rbx, [rbx]
.text:0000000000004ECD                 mov     [rsp+58h+var_58], r8
.text:0000000000004ED1                 call    _dcgettext
.text:0000000000004ED6                 sub     rsp, 8
.text:0000000000004EDA                 mov     r9, r13
.text:0000000000004EDD                 push    r12
.text:0000000000004EDF                 push    r15
.text:0000000000004EE1                 push    r14
.text:0000000000004EE3
.text:0000000000004EE3 loc_4EE3:                               ; CODE XREF: version_etc_arn+3C4↓j
.text:0000000000004EE3                 mov     r8, [rsp+78h+var_58]
.text:0000000000004EE8                 mov     rcx, rbx
.text:0000000000004EEB                 mov     rdx, rax
.text:0000000000004EEE                 mov     rdi, rbp
.text:0000000000004EF1                 mov     esi, 1
.text:0000000000004EF6                 xor     eax, eax
.text:0000000000004EF8                 call    ___fprintf_chk
.text:0000000000004EFD                 add     rsp, 20h
.text:0000000000004F01                 add     rsp, 28h
.text:0000000000004F05                 pop     rbx
.text:0000000000004F06                 pop     rbp
.text:0000000000004F07                 pop     r12
.text:0000000000004F09                 pop     r13
.text:0000000000004F0B                 pop     r14
.text:0000000000004F0D                 pop     r15
.text:0000000000004F0F                 retn
.text:0000000000004F10 ; ---------------------------------------------------------------------------
.text:0000000000004F10
.text:0000000000004F10 loc_4F10:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004F10                                         ; DATA XREF: .rodata:jpt_4C34↓o
.text:0000000000004F10                 mov     r9, [rbx+10h]   ; jumptable 0000000000004C34 case 7
.text:0000000000004F14                 mov     r13, [rbx+30h]
.text:0000000000004F18                 lea     rsi, aWrittenBySSSSS_2 ; "Written by %s, %s, %s,\n%s, %s, %s, and"...
.text:0000000000004F1F                 mov     r12, [rbx+28h]
.text:0000000000004F23                 mov     r15, [rbx+20h]
.text:0000000000004F27                 mov     edx, 5          ; category
.text:0000000000004F2C                 mov     r14, [rbx+18h]
.text:0000000000004F30                 mov     r8, [rbx+8]
.text:0000000000004F34                 xor     edi, edi        ; domainname
.text:0000000000004F36                 mov     [rsp+58h+var_50], r9
.text:0000000000004F3B                 mov     rbx, [rbx]
.text:0000000000004F3E                 mov     [rsp+58h+var_58], r8
.text:0000000000004F42                 call    _dcgettext
.text:0000000000004F47                 push    r13
.text:0000000000004F49                 push    r12
.text:0000000000004F4B                 push    r15
.text:0000000000004F4D                 push    r14
.text:0000000000004F4F                 mov     r9, [rsp+78h+var_50]
.text:0000000000004F54                 jmp     short loc_4EE3
.text:0000000000004F54 ; ---------------------------------------------------------------------------
.text:0000000000004F56                 align 20h
.text:0000000000004F60
.text:0000000000004F60 def_4C34:                               ; CODE XREF: version_etc_arn+90↑j
.text:0000000000004F60                 mov     r10, [rbx+40h]  ; jumptable 0000000000004C34 default case
.text:0000000000004F64                 mov     r9, [rbx+38h]
.text:0000000000004F68                 mov     edx, 5
.text:0000000000004F6D                 mov     rax, [rbx+10h]
.text:0000000000004F71                 mov     r8, [rbx+8]
.text:0000000000004F75                 lea     rsi, aWrittenBySSSSS_3 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000004F7C                 mov     r13, [rbx+30h]
.text:0000000000004F80                 mov     r12, [rbx+28h]
.text:0000000000004F84                 mov     r15, [rbx+20h]
.text:0000000000004F88                 mov     r14, [rbx+18h]
.text:0000000000004F8C                 mov     [rsp+58h+var_40], r10
.text:0000000000004F91                 mov     [rsp+58h+var_48], r9
.text:0000000000004F96                 mov     [rsp+58h+var_58], rax
.text:0000000000004F9A                 mov     [rsp+58h+var_50], r8
.text:0000000000004F9F                 mov     rbx, [rbx]
.text:0000000000004FA2                 jmp     loc_4D32
.text:0000000000004FA2 ; } // starts at 4B90
.text:0000000000004FA2 version_etc_arn endp
.text:0000000000004FA2
.text:0000000000004FA2 ; ---------------------------------------------------------------------------
.text:0000000000004FA7                 align 10h
.text:0000000000004FB0
.text:0000000000004FB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004FB0
.text:0000000000004FB0 ; Attributes: info_from_lumina
.text:0000000000004FB0
.text:0000000000004FB0 ; void __fastcall version_etc_ar(FILE *stream, const char *command_name, const char *package, const char *version, const char *const *authors)
.text:0000000000004FB0                 public version_etc_ar
.text:0000000000004FB0 version_etc_ar  proc near
.text:0000000000004FB0 ; __unwind {
.text:0000000000004FB0                 xor     r9d, r9d
.text:0000000000004FB3                 cmp     qword ptr [r8], 0
.text:0000000000004FB7                 jz      short loc_4FCB
.text:0000000000004FB9                 nop     dword ptr [rax+00000000h]
.text:0000000000004FC0
.text:0000000000004FC0 loc_4FC0:                               ; CODE XREF: version_etc_ar+19↓j
.text:0000000000004FC0                 add     r9, 1
.text:0000000000004FC4                 cmp     qword ptr [r8+r9*8], 0
.text:0000000000004FC9                 jnz     short loc_4FC0
.text:0000000000004FCB
.text:0000000000004FCB loc_4FCB:                               ; CODE XREF: version_etc_ar+7↑j
.text:0000000000004FCB                 jmp     version_etc_arn
.text:0000000000004FCB ; } // starts at 4FB0
.text:0000000000004FCB version_etc_ar  endp
.text:0000000000004FCB
.text:0000000000004FD0
.text:0000000000004FD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004FD0
.text:0000000000004FD0 ; Attributes: info_from_lumina
.text:0000000000004FD0
.text:0000000000004FD0 ; void __fastcall version_etc_va(FILE *stream, const char *command_name, const char *package, const char *version, __va_list_tag *authors)
.text:0000000000004FD0                 public version_etc_va
.text:0000000000004FD0 version_etc_va  proc near
.text:0000000000004FD0
.text:0000000000004FD0 authtab         = qword ptr -68h
.text:0000000000004FD0 var_10          = qword ptr -10h
.text:0000000000004FD0
.text:0000000000004FD0 ; __unwind {
.text:0000000000004FD0                 sub     rsp, 68h
.text:0000000000004FD4                 mov     r10, r8
.text:0000000000004FD7                 xor     r9d, r9d
.text:0000000000004FDA                 mov     rax, fs:28h
.text:0000000000004FE3                 mov     [rsp+68h+var_10], rax
.text:0000000000004FE8                 xor     eax, eax
.text:0000000000004FEA                 mov     r8, rsp
.text:0000000000004FED                 nop     dword ptr [rax]
.text:0000000000004FF0
.text:0000000000004FF0 loc_4FF0:                               ; CODE XREF: version_etc_va+49↓j
.text:0000000000004FF0                 mov     eax, [r10]
.text:0000000000004FF3                 cmp     eax, 2Fh ; '/'
.text:0000000000004FF6                 ja      short loc_503A
.text:0000000000004FF8                 mov     r11d, eax
.text:0000000000004FFB                 add     r11, [r10+10h]
.text:0000000000004FFF                 add     eax, 8
.text:0000000000005002                 mov     [r10], eax
.text:0000000000005005
.text:0000000000005005 loc_5005:                               ; CODE XREF: version_etc_va+76↓j
.text:0000000000005005                 mov     rax, [r11]
.text:0000000000005008                 test    rax, rax
.text:000000000000500B                 mov     [r8+r9*8], rax
.text:000000000000500F                 jz      short loc_501B
.text:0000000000005011                 add     r9, 1
.text:0000000000005015                 cmp     r9, 0Ah
.text:0000000000005019                 jnz     short loc_4FF0
.text:000000000000501B
.text:000000000000501B loc_501B:                               ; CODE XREF: version_etc_va+3F↑j
.text:000000000000501B                 call    version_etc_arn
.text:0000000000005020                 mov     rax, [rsp+68h+var_10]
.text:0000000000005025                 xor     rax, fs:28h
.text:000000000000502E                 jnz     short loc_5035
.text:0000000000005030                 add     rsp, 68h
.text:0000000000005034                 retn
.text:0000000000005035 ; ---------------------------------------------------------------------------
.text:0000000000005035
.text:0000000000005035 loc_5035:                               ; CODE XREF: version_etc_va+5E↑j
.text:0000000000005035                 call    ___stack_chk_fail
.text:000000000000503A ; ---------------------------------------------------------------------------
.text:000000000000503A
.text:000000000000503A loc_503A:                               ; CODE XREF: version_etc_va+26↑j
.text:000000000000503A                 mov     r11, [r10+8]
.text:000000000000503E                 lea     rax, [r11+8]
.text:0000000000005042                 mov     [r10+8], rax
.text:0000000000005046                 jmp     short loc_5005
.text:0000000000005046 ; } // starts at 4FD0
.text:0000000000005046 version_etc_va  endp
.text:0000000000005046
.text:0000000000005046 ; ---------------------------------------------------------------------------
.text:0000000000005048                 align 10h
.text:0000000000005050
.text:0000000000005050 ; =============== S U B R O U T I N E =======================================
.text:0000000000005050
.text:0000000000005050 ; Attributes: info_from_lumina
.text:0000000000005050
.text:0000000000005050 ; void version_etc(FILE *stream, const char *command_name, const char *package, const char *version, ...)
.text:0000000000005050                 public version_etc
.text:0000000000005050 version_etc     proc near               ; CODE XREF: main+193↑p
.text:0000000000005050
.text:0000000000005050 var_C0          = dword ptr -0C0h
.text:0000000000005050 var_B8          = qword ptr -0B8h
.text:0000000000005050 var_B0          = qword ptr -0B0h
.text:0000000000005050 var_A8          = byte ptr -0A8h
.text:0000000000005050 var_50          = qword ptr -50h
.text:0000000000005050 var_48          = byte ptr -48h
.text:0000000000005050 var_28          = qword ptr -28h
.text:0000000000005050 var_20          = qword ptr -20h
.text:0000000000005050 arg_0           = byte ptr  8
.text:0000000000005050
.text:0000000000005050 ; __unwind {
.text:0000000000005050                 push    rbp
.text:0000000000005051                 push    rbx
.text:0000000000005052                 mov     r10d, 20h ; ' '
.text:0000000000005058                 xor     r11d, r11d
.text:000000000000505B                 sub     rsp, 0B8h
.text:0000000000005062                 mov     rax, fs:28h
.text:000000000000506B                 mov     [rsp+0C8h+var_50], rax
.text:0000000000005070                 xor     eax, eax
.text:0000000000005072                 lea     rax, [rsp+0C8h+arg_0]
.text:000000000000507A                 mov     [rsp+0C8h+var_28], r8
.text:0000000000005082                 lea     rbx, [rsp+0C8h+arg_0]
.text:000000000000508A                 lea     r8, [rsp+0C8h+var_A8]
.text:000000000000508F                 mov     [rsp+0C8h+var_20], r9
.text:0000000000005097                 mov     [rsp+0C8h+var_C0], 20h ; ' '
.text:000000000000509F                 mov     [rsp+0C8h+var_B8], rax
.text:00000000000050A4                 lea     rax, [rsp+0C8h+var_48]
.text:00000000000050AC                 xor     r9d, r9d
.text:00000000000050AF                 mov     [rsp+0C8h+var_B0], rax
.text:00000000000050B4                 mov     rbp, rax
.text:00000000000050B7                 nop     word ptr [rax+rax+00000000h]
.text:00000000000050C0
.text:00000000000050C0 loc_50C0:                               ; CODE XREF: version_etc+9A↓j
.text:00000000000050C0                 cmp     r10d, 2Fh ; '/'
.text:00000000000050C4                 ja      short loc_511C
.text:00000000000050C6                 mov     eax, r10d
.text:00000000000050C9                 mov     r11d, 1
.text:00000000000050CF                 add     r10d, 8
.text:00000000000050D3                 add     rax, rbp
.text:00000000000050D6
.text:00000000000050D6 loc_50D6:                               ; CODE XREF: version_etc+D3↓j
.text:00000000000050D6                 mov     rax, [rax]
.text:00000000000050D9                 test    rax, rax
.text:00000000000050DC                 mov     [r8+r9*8], rax
.text:00000000000050E0                 jz      short loc_50EC
.text:00000000000050E2                 add     r9, 1
.text:00000000000050E6                 cmp     r9, 0Ah
.text:00000000000050EA                 jnz     short loc_50C0
.text:00000000000050EC
.text:00000000000050EC loc_50EC:                               ; CODE XREF: version_etc+90↑j
.text:00000000000050EC                 test    r11b, r11b
.text:00000000000050EF                 jnz     short loc_5115
.text:00000000000050F1
.text:00000000000050F1 loc_50F1:                               ; CODE XREF: version_etc+CA↓j
.text:00000000000050F1                 call    version_etc_arn
.text:00000000000050F6                 mov     rax, [rsp+0C8h+var_50]
.text:00000000000050FB                 xor     rax, fs:28h
.text:0000000000005104                 jnz     short loc_5110
.text:0000000000005106                 add     rsp, 0B8h
.text:000000000000510D                 pop     rbx
.text:000000000000510E                 pop     rbp
.text:000000000000510F                 retn
.text:0000000000005110 ; ---------------------------------------------------------------------------
.text:0000000000005110
.text:0000000000005110 loc_5110:                               ; CODE XREF: version_etc+B4↑j
.text:0000000000005110                 call    ___stack_chk_fail
.text:0000000000005115 ; ---------------------------------------------------------------------------
.text:0000000000005115
.text:0000000000005115 loc_5115:                               ; CODE XREF: version_etc+9F↑j
.text:0000000000005115                 mov     [rsp+0C8h+var_C0], r10d
.text:000000000000511A                 jmp     short loc_50F1
.text:000000000000511C ; ---------------------------------------------------------------------------
.text:000000000000511C
.text:000000000000511C loc_511C:                               ; CODE XREF: version_etc+74↑j
.text:000000000000511C                 mov     rax, rbx
.text:000000000000511F                 add     rbx, 8
.text:0000000000005123                 jmp     short loc_50D6
.text:0000000000005123 ; } // starts at 5050
.text:0000000000005123 version_etc     endp
.text:0000000000005123
.text:0000000000005123 ; ---------------------------------------------------------------------------
.text:0000000000005125                 align 10h
.text:0000000000005130
.text:0000000000005130 ; =============== S U B R O U T I N E =======================================
.text:0000000000005130
.text:0000000000005130 ; Attributes: info_from_lumina
.text:0000000000005130
.text:0000000000005130 ; void __cdecl emit_bug_reporting_address()
.text:0000000000005130                 public emit_bug_reporting_address
.text:0000000000005130 emit_bug_reporting_address proc near
.text:0000000000005130 ; __unwind {
.text:0000000000005130                 push    rbx
.text:0000000000005131                 lea     rsi, aReportBugsToS ; "\nReport bugs to: %s\n"
.text:0000000000005138                 mov     edx, 5          ; category
.text:000000000000513D                 xor     edi, edi        ; domainname
.text:000000000000513F                 call    _dcgettext
.text:0000000000005144                 lea     rdx, aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:000000000000514B                 mov     rsi, rax
.text:000000000000514E                 mov     edi, 1
.text:0000000000005153                 xor     eax, eax
.text:0000000000005155                 call    ___printf_chk
.text:000000000000515A                 lea     rsi, aSHomePageS ; "%s home page: <%s>\n"
.text:0000000000005161                 mov     edx, 5          ; category
.text:0000000000005166                 xor     edi, edi        ; domainname
.text:0000000000005168                 call    _dcgettext
.text:000000000000516D                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000005174                 lea     rdx, unk_9C40
.text:000000000000517B                 mov     rsi, rax
.text:000000000000517E                 mov     edi, 1
.text:0000000000005183                 xor     eax, eax
.text:0000000000005185                 call    ___printf_chk
.text:000000000000518A                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000005191                 lea     rsi, aGeneralHelpUsi ; "General help using GNU software: <https"...
.text:0000000000005198                 xor     edi, edi        ; domainname
.text:000000000000519A                 mov     edx, 5          ; category
.text:000000000000519F                 call    _dcgettext
.text:00000000000051A4                 mov     rsi, rbx        ; stream
.text:00000000000051A7                 mov     rdi, rax        ; s
.text:00000000000051AA                 pop     rbx
.text:00000000000051AB                 jmp     _fputs_unlocked
.text:00000000000051AB ; } // starts at 5130
.text:00000000000051AB emit_bug_reporting_address endp
.text:00000000000051AB
.text:00000000000051B0
.text:00000000000051B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000051B0
.text:00000000000051B0
.text:00000000000051B0                 public xmalloc
.text:00000000000051B0 xmalloc         proc near               ; CODE XREF: quotearg_n_options+127↑p
.text:00000000000051B0                                         ; quotearg_alloc_mem+81↑p ...
.text:00000000000051B0 ; __unwind {
.text:00000000000051B0                 push    rbx
.text:00000000000051B1                 mov     rbx, rdi
.text:00000000000051B4                 call    _malloc
.text:00000000000051B9                 test    rax, rax
.text:00000000000051BC                 jnz     short loc_51C3
.text:00000000000051BE                 test    rbx, rbx
.text:00000000000051C1                 jnz     short loc_51C5
.text:00000000000051C3
.text:00000000000051C3 loc_51C3:                               ; CODE XREF: xmalloc+C↑j
.text:00000000000051C3                 pop     rbx
.text:00000000000051C4                 retn
.text:00000000000051C5 ; ---------------------------------------------------------------------------
.text:00000000000051C5
.text:00000000000051C5 loc_51C5:                               ; CODE XREF: xmalloc+11↑j
.text:00000000000051C5                 call    xalloc_die
.text:00000000000051C5 ; } // starts at 51B0
.text:00000000000051C5 xmalloc         endp
.text:00000000000051C5
.text:00000000000051C5 ; ---------------------------------------------------------------------------
.text:00000000000051CA                 align 10h
.text:00000000000051D0
.text:00000000000051D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000051D0
.text:00000000000051D0 ; Attributes: info_from_lumina
.text:00000000000051D0
.text:00000000000051D0 ; void *__fastcall xnmalloc(size_t n, size_t s)
.text:00000000000051D0                 public xnmalloc
.text:00000000000051D0 xnmalloc        proc near
.text:00000000000051D0 ; __unwind {
.text:00000000000051D0                 mov     rax, rdi
.text:00000000000051D3                 mul     rsi
.text:00000000000051D6                 mov     rdi, rax
.text:00000000000051D9                 seto    al
.text:00000000000051DC                 test    rdi, rdi
.text:00000000000051DF                 js      short loc_51EB
.text:00000000000051E1                 movzx   eax, al
.text:00000000000051E4                 test    rax, rax
.text:00000000000051E7                 jnz     short loc_51EB
.text:00000000000051E9                 jmp     short xmalloc
.text:00000000000051EB ; ---------------------------------------------------------------------------
.text:00000000000051EB
.text:00000000000051EB loc_51EB:                               ; CODE XREF: xnmalloc+F↑j
.text:00000000000051EB                                         ; xnmalloc+17↑j
.text:00000000000051EB                 sub     rsp, 8
.text:00000000000051EF                 call    xalloc_die
.text:00000000000051EF ; } // starts at 51D0
.text:00000000000051EF xnmalloc        endp
.text:00000000000051EF
.text:00000000000051EF ; ---------------------------------------------------------------------------
.text:00000000000051F4                 align 20h
.text:0000000000005200
.text:0000000000005200 ; =============== S U B R O U T I N E =======================================
.text:0000000000005200
.text:0000000000005200
.text:0000000000005200                 public xcharalloc
.text:0000000000005200 xcharalloc      proc near
.text:0000000000005200 ; __unwind {
.text:0000000000005200                 jmp     short xmalloc
.text:0000000000005200 ; } // starts at 5200
.text:0000000000005200 xcharalloc      endp
.text:0000000000005200
.text:0000000000005200 ; ---------------------------------------------------------------------------
.text:0000000000005202                 align 10h
.text:0000000000005210
.text:0000000000005210 ; =============== S U B R O U T I N E =======================================
.text:0000000000005210
.text:0000000000005210 ; Attributes: info_from_lumina
.text:0000000000005210
.text:0000000000005210 ; void *__fastcall xrealloc(void *p, size_t n)
.text:0000000000005210                 public xrealloc
.text:0000000000005210 xrealloc        proc near               ; CODE XREF: quotearg_n_options+6E↑p
.text:0000000000005210                                         ; quotearg_n_options+182↑p ...
.text:0000000000005210 ; __unwind {
.text:0000000000005210                 test    rsi, rsi
.text:0000000000005213                 push    rbx
.text:0000000000005214                 mov     rbx, rsi
.text:0000000000005217                 jnz     short loc_521E
.text:0000000000005219                 test    rdi, rdi
.text:000000000000521C                 jnz     short loc_5238
.text:000000000000521E
.text:000000000000521E loc_521E:                               ; CODE XREF: xrealloc+7↑j
.text:000000000000521E                 mov     rsi, rbx        ; size
.text:0000000000005221                 call    _realloc
.text:0000000000005226                 test    rax, rax
.text:0000000000005229                 jnz     short loc_5230
.text:000000000000522B                 test    rbx, rbx
.text:000000000000522E                 jnz     short loc_5241
.text:0000000000005230
.text:0000000000005230 loc_5230:                               ; CODE XREF: xrealloc+19↑j
.text:0000000000005230                 pop     rbx
.text:0000000000005231                 retn
.text:0000000000005231 ; ---------------------------------------------------------------------------
.text:0000000000005232                 align 8
.text:0000000000005238
.text:0000000000005238 loc_5238:                               ; CODE XREF: xrealloc+C↑j
.text:0000000000005238                 call    free
.text:000000000000523D                 xor     eax, eax
.text:000000000000523F                 pop     rbx
.text:0000000000005240                 retn
.text:0000000000005241 ; ---------------------------------------------------------------------------
.text:0000000000005241
.text:0000000000005241 loc_5241:                               ; CODE XREF: xrealloc+1E↑j
.text:0000000000005241                 call    xalloc_die
.text:0000000000005241 ; } // starts at 5210
.text:0000000000005241 xrealloc        endp
.text:0000000000005241
.text:0000000000005241 ; ---------------------------------------------------------------------------
.text:0000000000005246                 align 10h
.text:0000000000005250
.text:0000000000005250 ; =============== S U B R O U T I N E =======================================
.text:0000000000005250
.text:0000000000005250 ; Attributes: info_from_lumina
.text:0000000000005250
.text:0000000000005250 ; void *__fastcall xnrealloc(void *p, size_t n, size_t s)
.text:0000000000005250                 public xnrealloc
.text:0000000000005250 xnrealloc       proc near
.text:0000000000005250 ; __unwind {
.text:0000000000005250                 mov     rax, rsi
.text:0000000000005253                 mul     rdx
.text:0000000000005256                 mov     rsi, rax
.text:0000000000005259                 seto    al
.text:000000000000525C                 test    rsi, rsi
.text:000000000000525F                 js      short loc_526B
.text:0000000000005261                 movzx   eax, al
.text:0000000000005264                 test    rax, rax
.text:0000000000005267                 jnz     short loc_526B
.text:0000000000005269                 jmp     short xrealloc
.text:000000000000526B ; ---------------------------------------------------------------------------
.text:000000000000526B
.text:000000000000526B loc_526B:                               ; CODE XREF: xnrealloc+F↑j
.text:000000000000526B                                         ; xnrealloc+17↑j
.text:000000000000526B                 sub     rsp, 8
.text:000000000000526F                 call    xalloc_die
.text:000000000000526F ; } // starts at 5250
.text:000000000000526F xnrealloc       endp
.text:000000000000526F
.text:000000000000526F ; ---------------------------------------------------------------------------
.text:0000000000005274                 align 20h
.text:0000000000005280
.text:0000000000005280 ; =============== S U B R O U T I N E =======================================
.text:0000000000005280
.text:0000000000005280 ; Attributes: info_from_lumina
.text:0000000000005280
.text:0000000000005280 ; void *__fastcall x2nrealloc(void *p, size_t *pn, size_t s)
.text:0000000000005280                 public x2nrealloc
.text:0000000000005280 x2nrealloc      proc near
.text:0000000000005280 ; __unwind {
.text:0000000000005280                 test    rdi, rdi
.text:0000000000005283                 mov     r9, rdx
.text:0000000000005286                 mov     rcx, [rsi]
.text:0000000000005289                 jz      short loc_52C0
.text:000000000000528B                 xor     edx, edx
.text:000000000000528D                 mov     rax, 5555555555555554h
.text:0000000000005297                 div     r9
.text:000000000000529A                 cmp     rax, rcx
.text:000000000000529D                 jbe     short loc_52DB
.text:000000000000529F                 mov     rax, rcx
.text:00000000000052A2                 shr     rax, 1
.text:00000000000052A5                 lea     rcx, [rax+rcx+1]
.text:00000000000052AA
.text:00000000000052AA loc_52AA:                               ; CODE XREF: x2nrealloc+59↓j
.text:00000000000052AA                 mov     [rsi], rcx
.text:00000000000052AD                 imul    rcx, r9
.text:00000000000052B1                 mov     rsi, rcx
.text:00000000000052B4                 jmp     xrealloc
.text:00000000000052B4 ; ---------------------------------------------------------------------------
.text:00000000000052B9                 align 20h
.text:00000000000052C0
.text:00000000000052C0 loc_52C0:                               ; CODE XREF: x2nrealloc+9↑j
.text:00000000000052C0                 test    rcx, rcx
.text:00000000000052C3                 jz      short loc_52E8
.text:00000000000052C5
.text:00000000000052C5 loc_52C5:                               ; CODE XREF: x2nrealloc+80↓j
.text:00000000000052C5                 mov     rax, rcx
.text:00000000000052C8                 mul     r9
.text:00000000000052CB                 seto    dl
.text:00000000000052CE                 test    rax, rax
.text:00000000000052D1                 movzx   edx, dl
.text:00000000000052D4                 js      short loc_52DB
.text:00000000000052D6                 test    rdx, rdx
.text:00000000000052D9                 jz      short loc_52AA
.text:00000000000052DB
.text:00000000000052DB loc_52DB:                               ; CODE XREF: x2nrealloc+1D↑j
.text:00000000000052DB                                         ; x2nrealloc+54↑j
.text:00000000000052DB                 sub     rsp, 8
.text:00000000000052DF                 call    xalloc_die
.text:00000000000052DF ; ---------------------------------------------------------------------------
.text:00000000000052E4                 align 8
.text:00000000000052E8
.text:00000000000052E8 loc_52E8:                               ; CODE XREF: x2nrealloc+43↑j
.text:00000000000052E8                 xor     edx, edx
.text:00000000000052EA                 mov     eax, 80h
.text:00000000000052EF                 xor     r8d, r8d
.text:00000000000052F2                 div     r9
.text:00000000000052F5                 test    rax, rax
.text:00000000000052F8                 setz    r8b
.text:00000000000052FC                 lea     rcx, [r8+rax]
.text:0000000000005300                 jmp     short loc_52C5
.text:0000000000005300 ; } // starts at 5280
.text:0000000000005300 x2nrealloc      endp
.text:0000000000005300
.text:0000000000005300 ; ---------------------------------------------------------------------------
.text:0000000000005302                 align 10h
.text:0000000000005310
.text:0000000000005310 ; =============== S U B R O U T I N E =======================================
.text:0000000000005310
.text:0000000000005310 ; Attributes: info_from_lumina
.text:0000000000005310
.text:0000000000005310 ; void *__fastcall x2realloc(void *p, size_t *pn)
.text:0000000000005310                 public x2realloc
.text:0000000000005310 x2realloc       proc near
.text:0000000000005310 ; __unwind {
.text:0000000000005310                 test    rdi, rdi
.text:0000000000005313                 mov     rax, [rsi]
.text:0000000000005316                 jz      short loc_5340
.text:0000000000005318                 mov     rdx, 5555555555555553h
.text:0000000000005322                 cmp     rax, rdx
.text:0000000000005325                 ja      short loc_5351
.text:0000000000005327                 mov     rdx, rax
.text:000000000000532A                 shr     rdx, 1
.text:000000000000532D                 lea     rax, [rdx+rax+1]
.text:0000000000005332
.text:0000000000005332 loc_5332:                               ; CODE XREF: x2realloc+3F↓j
.text:0000000000005332                 mov     [rsi], rax
.text:0000000000005335                 mov     rsi, rax
.text:0000000000005338                 jmp     xrealloc
.text:0000000000005338 ; ---------------------------------------------------------------------------
.text:000000000000533D                 align 20h
.text:0000000000005340
.text:0000000000005340 loc_5340:                               ; CODE XREF: x2realloc+6↑j
.text:0000000000005340                 test    rax, rax
.text:0000000000005343                 mov     edx, 80h
.text:0000000000005348                 cmovz   rax, rdx
.text:000000000000534C                 test    rax, rax
.text:000000000000534F                 jns     short loc_5332
.text:0000000000005351
.text:0000000000005351 loc_5351:                               ; CODE XREF: x2realloc+15↑j
.text:0000000000005351                 sub     rsp, 8
.text:0000000000005355                 call    xalloc_die
.text:0000000000005355 ; } // starts at 5310
.text:0000000000005355 x2realloc       endp
.text:0000000000005355
.text:0000000000005355 ; ---------------------------------------------------------------------------
.text:000000000000535A                 align 20h
.text:0000000000005360
.text:0000000000005360 ; =============== S U B R O U T I N E =======================================
.text:0000000000005360
.text:0000000000005360
.text:0000000000005360 ; __int64 __fastcall xzalloc(size_t n)
.text:0000000000005360                 public xzalloc
.text:0000000000005360 xzalloc         proc near
.text:0000000000005360 ; __unwind {
.text:0000000000005360                 push    rbx
.text:0000000000005361                 mov     rbx, rdi
.text:0000000000005364                 call    xmalloc
.text:0000000000005369                 mov     rdx, rbx        ; n
.text:000000000000536C                 xor     esi, esi        ; c
.text:000000000000536E                 mov     rdi, rax        ; s
.text:0000000000005371                 pop     rbx
.text:0000000000005372                 jmp     _memset
.text:0000000000005372 ; } // starts at 5360
.text:0000000000005372 xzalloc         endp
.text:0000000000005372
.text:0000000000005372 ; ---------------------------------------------------------------------------
.text:0000000000005377                 align 20h
.text:0000000000005380
.text:0000000000005380 ; =============== S U B R O U T I N E =======================================
.text:0000000000005380
.text:0000000000005380 ; Attributes: info_from_lumina
.text:0000000000005380
.text:0000000000005380 ; void *__fastcall xcalloc(size_t n, size_t s)
.text:0000000000005380                 public xcalloc
.text:0000000000005380 xcalloc         proc near
.text:0000000000005380 ; __unwind {
.text:0000000000005380                 mov     rax, rdi
.text:0000000000005383                 sub     rsp, 8
.text:0000000000005387                 mul     rsi
.text:000000000000538A                 seto    dl
.text:000000000000538D                 test    rax, rax
.text:0000000000005390                 js      short loc_53A9
.text:0000000000005392                 movzx   edx, dl
.text:0000000000005395                 test    rdx, rdx
.text:0000000000005398                 jnz     short loc_53A9
.text:000000000000539A                 call    _calloc
.text:000000000000539F                 test    rax, rax
.text:00000000000053A2                 jz      short loc_53A9
.text:00000000000053A4                 add     rsp, 8
.text:00000000000053A8                 retn
.text:00000000000053A9 ; ---------------------------------------------------------------------------
.text:00000000000053A9
.text:00000000000053A9 loc_53A9:                               ; CODE XREF: xcalloc+10↑j
.text:00000000000053A9                                         ; xcalloc+18↑j ...
.text:00000000000053A9                 call    xalloc_die
.text:00000000000053A9 ; } // starts at 5380
.text:00000000000053A9 xcalloc         endp
.text:00000000000053A9
.text:00000000000053A9 ; ---------------------------------------------------------------------------
.text:00000000000053AE                 align 10h
.text:00000000000053B0
.text:00000000000053B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000053B0
.text:00000000000053B0 ; Attributes: info_from_lumina
.text:00000000000053B0
.text:00000000000053B0 ; void *__fastcall xmemdup(const void *p, size_t s)
.text:00000000000053B0                 public xmemdup
.text:00000000000053B0 xmemdup         proc near               ; CODE XREF: clone_quoting_options+28↑p
.text:00000000000053B0                                         ; xstrdup+11↓j
.text:00000000000053B0 ; __unwind {
.text:00000000000053B0                 push    rbp
.text:00000000000053B1                 push    rbx
.text:00000000000053B2                 mov     rbp, rdi
.text:00000000000053B5                 mov     rdi, rsi
.text:00000000000053B8                 mov     rbx, rsi
.text:00000000000053BB                 sub     rsp, 8
.text:00000000000053BF                 call    xmalloc
.text:00000000000053C4                 add     rsp, 8
.text:00000000000053C8                 mov     rdx, rbx        ; n
.text:00000000000053CB                 mov     rsi, rbp        ; src
.text:00000000000053CE                 pop     rbx
.text:00000000000053CF                 pop     rbp
.text:00000000000053D0                 mov     rdi, rax        ; dest
.text:00000000000053D3                 jmp     _memcpy
.text:00000000000053D3 ; } // starts at 53B0
.text:00000000000053D3 xmemdup         endp
.text:00000000000053D3
.text:00000000000053D3 ; ---------------------------------------------------------------------------
.text:00000000000053D8                 align 20h
.text:00000000000053E0
.text:00000000000053E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000053E0
.text:00000000000053E0
.text:00000000000053E0 ; __int64 __fastcall xstrdup(void *src)
.text:00000000000053E0                 public xstrdup
.text:00000000000053E0 xstrdup         proc near
.text:00000000000053E0 ; __unwind {
.text:00000000000053E0                 push    rbx
.text:00000000000053E1                 mov     rbx, rdi
.text:00000000000053E4                 call    _strlen
.text:00000000000053E9                 mov     rdi, rbx        ; src
.text:00000000000053EC                 lea     rsi, [rax+1]    ; n
.text:00000000000053F0                 pop     rbx
.text:00000000000053F1                 jmp     short xmemdup
.text:00000000000053F1 ; } // starts at 53E0
.text:00000000000053F1 xstrdup         endp
.text:00000000000053F1
.text:00000000000053F1 ; ---------------------------------------------------------------------------
.text:00000000000053F3                 align 20h
.text:0000000000005400
.text:0000000000005400 ; =============== S U B R O U T I N E =======================================
.text:0000000000005400
.text:0000000000005400 ; Attributes: noreturn info_from_lumina
.text:0000000000005400
.text:0000000000005400 ; void __cdecl xalloc_die()
.text:0000000000005400                 public xalloc_die
.text:0000000000005400 xalloc_die      proc near               ; CODE XREF: quotearg_n_options:loc_4356↑p
.text:0000000000005400                                         ; xmalloc:loc_51C5↑p ...
.text:0000000000005400 ; __unwind {
.text:0000000000005400                 lea     rsi, aMemoryExhauste ; "memory exhausted"
.text:0000000000005407                 sub     rsp, 8
.text:000000000000540B                 mov     edx, 5          ; category
.text:0000000000005410                 xor     edi, edi        ; domainname
.text:0000000000005412                 call    _dcgettext
.text:0000000000005417                 mov     edi, cs:exit_failure ; status
.text:000000000000541D                 lea     rdx, format     ; format
.text:0000000000005424                 mov     rcx, rax
.text:0000000000005427                 xor     esi, esi        ; errnum
.text:0000000000005429                 xor     eax, eax
.text:000000000000542B                 call    _error
.text:0000000000005430                 call    _abort
.text:0000000000005430 ; } // starts at 5400
.text:0000000000005430 xalloc_die      endp
.text:0000000000005430
.text:0000000000005430 ; ---------------------------------------------------------------------------
.text:0000000000005435                 align 20h
.text:0000000000005440
.text:0000000000005440 ; =============== S U B R O U T I N E =======================================
.text:0000000000005440
.text:0000000000005440
.text:0000000000005440                 public xfts_open
.text:0000000000005440 xfts_open       proc near               ; CODE XREF: main+2A0↑p
.text:0000000000005440 ; __unwind {
.text:0000000000005440                 sub     rsp, 8
.text:0000000000005444                 or      esi, 200h
.text:000000000000544A                 call    rpl_fts_open
.text:000000000000544F                 test    rax, rax
.text:0000000000005452                 jz      short loc_5460
.text:0000000000005454                 add     rsp, 8
.text:0000000000005458                 retn
.text:0000000000005458 ; ---------------------------------------------------------------------------
.text:0000000000005459                 align 20h
.text:0000000000005460
.text:0000000000005460 loc_5460:                               ; CODE XREF: xfts_open+12↑j
.text:0000000000005460                 call    ___errno_location
.text:0000000000005465                 cmp     dword ptr [rax], 16h
.text:0000000000005468                 jz      short loc_5470
.text:000000000000546A                 call    xalloc_die
.text:000000000000546A ; ---------------------------------------------------------------------------
.text:000000000000546F                 align 10h
.text:0000000000005470
.text:0000000000005470 loc_5470:                               ; CODE XREF: xfts_open+28↑j
.text:0000000000005470                 lea     rcx, __PRETTY_FUNCTION___3434 ; "xfts_open"
.text:0000000000005477                 lea     rsi, file       ; "../coreutils-8.31/lib/xfts.c"
.text:000000000000547E                 lea     rdi, assertion  ; "errno != EINVAL"
.text:0000000000005485                 mov     edx, 29h ; ')'  ; line
.text:000000000000548A                 call    ___assert_fail
.text:000000000000548A ; } // starts at 5440
.text:000000000000548A xfts_open       endp
.text:000000000000548A
.text:000000000000548A ; ---------------------------------------------------------------------------
.text:000000000000548F                 align 10h
.text:0000000000005490
.text:0000000000005490 ; =============== S U B R O U T I N E =======================================
.text:0000000000005490
.text:0000000000005490
.text:0000000000005490                 public cycle_warning_required
.text:0000000000005490 cycle_warning_required proc near        ; CODE XREF: main+469↑p
.text:0000000000005490 ; __unwind {
.text:0000000000005490                 mov     edx, [rdi+48h]
.text:0000000000005493                 mov     eax, 1
.text:0000000000005498                 and     edx, 11h
.text:000000000000549B                 cmp     edx, 10h
.text:000000000000549E                 jz      short locret_54A7
.text:00000000000054A0                 xor     eax, eax
.text:00000000000054A2                 cmp     edx, 11h
.text:00000000000054A5                 jz      short loc_54B0
.text:00000000000054A7
.text:00000000000054A7 locret_54A7:                            ; CODE XREF: cycle_warning_required+E↑j
.text:00000000000054A7                 rep retn
.text:00000000000054A7 ; ---------------------------------------------------------------------------
.text:00000000000054A9                 align 10h
.text:00000000000054B0
.text:00000000000054B0 loc_54B0:                               ; CODE XREF: cycle_warning_required+15↑j
.text:00000000000054B0                 cmp     qword ptr [rsi+58h], 0
.text:00000000000054B5                 setnz   al
.text:00000000000054B8                 retn
.text:00000000000054B8 ; } // starts at 5490
.text:00000000000054B8 cycle_warning_required endp
.text:00000000000054B8
.text:00000000000054B8 ; ---------------------------------------------------------------------------
.text:00000000000054B9                 align 20h
.text:00000000000054C0
.text:00000000000054C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000054C0
.text:00000000000054C0
.text:00000000000054C0 AD_compare      proc near               ; DATA XREF: setup_dir_isra_4+13↓o
.text:00000000000054C0 ; __unwind {
.text:00000000000054C0                 xor     eax, eax
.text:00000000000054C2                 mov     rdx, [rsi+8]
.text:00000000000054C6                 cmp     [rdi+8], rdx
.text:00000000000054CA                 jz      short loc_54D0
.text:00000000000054CC                 rep retn
.text:00000000000054CC ; ---------------------------------------------------------------------------
.text:00000000000054CE                 align 10h
.text:00000000000054D0
.text:00000000000054D0 loc_54D0:                               ; CODE XREF: AD_compare+A↑j
.text:00000000000054D0                 mov     rax, [rsi]
.text:00000000000054D3                 cmp     [rdi], rax
.text:00000000000054D6                 setz    al
.text:00000000000054D9                 retn
.text:00000000000054D9 ; } // starts at 54C0
.text:00000000000054D9 AD_compare      endp
.text:00000000000054D9
.text:00000000000054D9 ; ---------------------------------------------------------------------------
.text:00000000000054DA                 align 20h
.text:00000000000054E0
.text:00000000000054E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000054E0
.text:00000000000054E0
.text:00000000000054E0 AD_hash         proc near               ; DATA XREF: setup_dir_isra_4+1A↓o
.text:00000000000054E0 ; __unwind {
.text:00000000000054E0                 mov     rax, [rdi+8]
.text:00000000000054E4                 xor     edx, edx
.text:00000000000054E6                 div     rsi
.text:00000000000054E9                 mov     rax, rdx
.text:00000000000054EC                 retn
.text:00000000000054EC ; } // starts at 54E0
.text:00000000000054EC AD_hash         endp
.text:00000000000054EC
.text:00000000000054EC ; ---------------------------------------------------------------------------
.text:00000000000054ED                 align 10h
.text:00000000000054F0
.text:00000000000054F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000054F0
.text:00000000000054F0
.text:00000000000054F0 dev_type_hash   proc near               ; DATA XREF: filesystem_type+6E↓o
.text:00000000000054F0 ; __unwind {
.text:00000000000054F0                 mov     rax, [rdi]
.text:00000000000054F3                 xor     edx, edx
.text:00000000000054F5                 div     rsi
.text:00000000000054F8                 mov     rax, rdx
.text:00000000000054FB                 retn
.text:00000000000054FB ; } // starts at 54F0
.text:00000000000054FB dev_type_hash   endp
.text:00000000000054FB
.text:00000000000054FB ; ---------------------------------------------------------------------------
.text:00000000000054FC                 align 20h
.text:0000000000005500
.text:0000000000005500 ; =============== S U B R O U T I N E =======================================
.text:0000000000005500
.text:0000000000005500
.text:0000000000005500 dev_type_compare proc near              ; DATA XREF: filesystem_type+67↓o
.text:0000000000005500 ; __unwind {
.text:0000000000005500                 mov     rax, [rsi]
.text:0000000000005503                 cmp     [rdi], rax
.text:0000000000005506                 setz    al
.text:0000000000005509                 retn
.text:0000000000005509 ; } // starts at 5500
.text:0000000000005509 dev_type_compare endp
.text:0000000000005509
.text:0000000000005509 ; ---------------------------------------------------------------------------
.text:000000000000550A                 align 10h
.text:0000000000005510
.text:0000000000005510 ; =============== S U B R O U T I N E =======================================
.text:0000000000005510
.text:0000000000005510
.text:0000000000005510 fts_compare_ino proc near               ; DATA XREF: fts_build:loc_68B8↓o
.text:0000000000005510 ; __unwind {
.text:0000000000005510                 mov     rdx, [rdi]
.text:0000000000005513                 mov     rax, [rsi]
.text:0000000000005516                 mov     rax, [rax+80h]
.text:000000000000551D                 cmp     [rdx+80h], rax
.text:0000000000005524                 jb      short loc_5530
.text:0000000000005526                 setnbe  al
.text:0000000000005529                 movzx   eax, al
.text:000000000000552C                 retn
.text:000000000000552C ; ---------------------------------------------------------------------------
.text:000000000000552D                 align 10h
.text:0000000000005530
.text:0000000000005530 loc_5530:                               ; CODE XREF: fts_compare_ino+14↑j
.text:0000000000005530                 mov     eax, 0FFFFFFFFh
.text:0000000000005535                 retn
.text:0000000000005535 ; } // starts at 5510
.text:0000000000005535 fts_compare_ino endp
.text:0000000000005535
.text:0000000000005535 ; ---------------------------------------------------------------------------
.text:0000000000005536                 align 20h
.text:0000000000005540
.text:0000000000005540 ; =============== S U B R O U T I N E =======================================
.text:0000000000005540
.text:0000000000005540
.text:0000000000005540 fts_stat        proc near               ; CODE XREF: fts_build+450↓p
.text:0000000000005540                                         ; fts_build+607↓p ...
.text:0000000000005540 ; __unwind {
.text:0000000000005540                 push    r12
.text:0000000000005542                 push    rbp
.text:0000000000005543                 mov     rbp, rsi
.text:0000000000005546                 push    rbx
.text:0000000000005547                 cmp     qword ptr [rbp+58h], 0
.text:000000000000554C                 lea     rbx, [rsi+78h]
.text:0000000000005550                 mov     r12, rdi
.text:0000000000005553                 mov     eax, [rdi+48h]
.text:0000000000005556                 mov     rsi, [rsi+30h]  ; filename
.text:000000000000555A                 jnz     short loc_55C0
.text:000000000000555C                 test    al, 1
.text:000000000000555E                 jz      short loc_55C0
.text:0000000000005560
.text:0000000000005560 loc_5560:                               ; CODE XREF: fts_stat+82↓j
.text:0000000000005560                                         ; fts_stat+86↓j
.text:0000000000005560                 mov     rdx, rbx        ; stat_buf
.text:0000000000005563                 mov     edi, 1          ; ver
.text:0000000000005568                 call    ___xstat
.text:000000000000556D                 test    eax, eax
.text:000000000000556F                 jz      short loc_55EB
.text:0000000000005571                 call    ___errno_location
.text:0000000000005576                 mov     r12, rax
.text:0000000000005579                 mov     eax, [rax]
.text:000000000000557B                 cmp     eax, 2
.text:000000000000557E                 jz      loc_5690
.text:0000000000005584
.text:0000000000005584 loc_5584:                               ; CODE XREF: fts_stat+147↓j
.text:0000000000005584                                         ; fts_stat+169↓j
.text:0000000000005584                 lea     rdi, [rbx+8]
.text:0000000000005588                 mov     [rbp+40h], eax
.text:000000000000558B                 mov     qword ptr [rbp+78h], 0
.text:0000000000005593                 mov     qword ptr [rbx+88h], 0
.text:000000000000559E                 xor     eax, eax
.text:00000000000055A0                 and     rdi, 0FFFFFFFFFFFFFFF8h
.text:00000000000055A4                 sub     rbx, rdi
.text:00000000000055A7                 lea     ecx, [rbx+90h]
.text:00000000000055AD                 shr     ecx, 3
.text:00000000000055B0                 rep stosq
.text:00000000000055B3                 mov     eax, 0Ah
.text:00000000000055B8
.text:00000000000055B8 loc_55B8:                               ; CODE XREF: fts_stat+116↓j
.text:00000000000055B8                                         ; fts_stat+136↓j ...
.text:00000000000055B8                 pop     rbx
.text:00000000000055B9                 pop     rbp
.text:00000000000055BA                 pop     r12
.text:00000000000055BC                 retn
.text:00000000000055BC ; ---------------------------------------------------------------------------
.text:00000000000055BD                 align 20h
.text:00000000000055C0
.text:00000000000055C0 loc_55C0:                               ; CODE XREF: fts_stat+1A↑j
.text:00000000000055C0                                         ; fts_stat+1E↑j
.text:00000000000055C0                 test    al, 2
.text:00000000000055C2                 jnz     short loc_5560
.text:00000000000055C4                 test    dl, dl
.text:00000000000055C6                 jnz     short loc_5560
.text:00000000000055C8                 mov     rdx, rsi        ; filename
.text:00000000000055CB                 mov     esi, [r12+2Ch]  ; fildes
.text:00000000000055D0                 mov     r8d, 100h       ; flag
.text:00000000000055D6                 mov     rcx, rbx        ; stat_buf
.text:00000000000055D9                 mov     edi, 1          ; ver
.text:00000000000055DE                 call    ___fxstatat
.text:00000000000055E3                 test    eax, eax
.text:00000000000055E5                 jnz     loc_5680
.text:00000000000055EB
.text:00000000000055EB loc_55EB:                               ; CODE XREF: fts_stat+2F↑j
.text:00000000000055EB                 mov     eax, [rbp+90h]
.text:00000000000055F1                 and     eax, 0F000h
.text:00000000000055F6                 cmp     eax, 4000h
.text:00000000000055FB                 jz      short loc_5620
.text:00000000000055FD                 cmp     eax, 0A000h
.text:0000000000005602                 jz      loc_56D8
.text:0000000000005608                 cmp     eax, 8000h
.text:000000000000560D                 setz    al
.text:0000000000005610                 movzx   eax, al
.text:0000000000005613                 pop     rbx
.text:0000000000005614                 lea     eax, [rax+rax*4+3]
.text:0000000000005618                 pop     rbp
.text:0000000000005619                 pop     r12
.text:000000000000561B                 retn
.text:000000000000561B ; ---------------------------------------------------------------------------
.text:000000000000561C                 align 20h
.text:0000000000005620
.text:0000000000005620 loc_5620:                               ; CODE XREF: fts_stat+BB↑j
.text:0000000000005620                 mov     rax, [rbp+88h]
.text:0000000000005627                 cmp     rax, 1
.text:000000000000562B                 jbe     loc_56B0
.text:0000000000005631                 cmp     qword ptr [rbp+58h], 0
.text:0000000000005636                 jle     short loc_56B0
.text:0000000000005638                 test    byte ptr [r12+48h], 20h
.text:000000000000563E                 lea     rdx, [rax-2]
.text:0000000000005642                 cmovz   rax, rdx
.text:0000000000005646
.text:0000000000005646 loc_5646:                               ; CODE XREF: fts_stat+177↓j
.text:0000000000005646                 cmp     byte ptr [rbp+108h], 2Eh ; '.'
.text:000000000000564D                 mov     [rbp+68h], rax
.text:0000000000005651                 mov     eax, 1
.text:0000000000005656                 jnz     loc_55B8
.text:000000000000565C                 cmp     byte ptr [rbp+109h], 0
.text:0000000000005663                 jnz     loc_56E8
.text:0000000000005669
.text:0000000000005669 loc_5669:                               ; CODE XREF: fts_stat+1C0↓j
.text:0000000000005669                 cmp     qword ptr [rbp+58h], 1
.text:000000000000566E                 sbb     eax, eax
.text:0000000000005670                 and     eax, 0FFFFFFFCh
.text:0000000000005673                 add     eax, 5
.text:0000000000005676                 jmp     loc_55B8
.text:0000000000005676 ; ---------------------------------------------------------------------------
.text:000000000000567B                 align 20h
.text:0000000000005680
.text:0000000000005680 loc_5680:                               ; CODE XREF: fts_stat+A5↑j
.text:0000000000005680                 call    ___errno_location
.text:0000000000005685                 mov     eax, [rax]
.text:0000000000005687                 jmp     loc_5584
.text:0000000000005687 ; ---------------------------------------------------------------------------
.text:000000000000568C                 align 10h
.text:0000000000005690
.text:0000000000005690 loc_5690:                               ; CODE XREF: fts_stat+3E↑j
.text:0000000000005690                 mov     rsi, [rbp+30h]  ; filename
.text:0000000000005694                 mov     rdx, rbx        ; stat_buf
.text:0000000000005697                 mov     edi, 1          ; ver
.text:000000000000569C                 call    ___lxstat
.text:00000000000056A1                 test    eax, eax
.text:00000000000056A3                 jz      short loc_56C0
.text:00000000000056A5                 mov     eax, [r12]
.text:00000000000056A9                 jmp     loc_5584
.text:00000000000056A9 ; ---------------------------------------------------------------------------
.text:00000000000056AE                 align 10h
.text:00000000000056B0
.text:00000000000056B0 loc_56B0:                               ; CODE XREF: fts_stat+EB↑j
.text:00000000000056B0                                         ; fts_stat+F6↑j
.text:00000000000056B0                 mov     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000056B7                 jmp     short loc_5646
.text:00000000000056B7 ; ---------------------------------------------------------------------------
.text:00000000000056B9                 align 20h
.text:00000000000056C0
.text:00000000000056C0 loc_56C0:                               ; CODE XREF: fts_stat+163↑j
.text:00000000000056C0                 mov     dword ptr [r12], 0
.text:00000000000056C8                 mov     eax, 0Dh
.text:00000000000056CD                 jmp     loc_55B8
.text:00000000000056CD ; ---------------------------------------------------------------------------
.text:00000000000056D2                 align 8
.text:00000000000056D8
.text:00000000000056D8 loc_56D8:                               ; CODE XREF: fts_stat+C2↑j
.text:00000000000056D8                 mov     eax, 0Ch
.text:00000000000056DD                 jmp     loc_55B8
.text:00000000000056DD ; ---------------------------------------------------------------------------
.text:00000000000056E2                 align 8
.text:00000000000056E8
.text:00000000000056E8 loc_56E8:                               ; CODE XREF: fts_stat+123↑j
.text:00000000000056E8                 mov     edx, [rbp+108h]
.text:00000000000056EE                 and     edx, 0FFFF00h
.text:00000000000056F4                 cmp     edx, 2E00h
.text:00000000000056FA                 jnz     loc_55B8
.text:0000000000005700                 jmp     loc_5669
.text:0000000000005700 ; } // starts at 5540
.text:0000000000005700 fts_stat        endp
.text:0000000000005700
.text:0000000000005700 ; ---------------------------------------------------------------------------
.text:0000000000005705                 align 10h
.text:0000000000005710
.text:0000000000005710 ; =============== S U B R O U T I N E =======================================
.text:0000000000005710
.text:0000000000005710
.text:0000000000005710 fts_sort        proc near               ; CODE XREF: fts_build+721↓p
.text:0000000000005710                                         ; fts_build+80E↓p ...
.text:0000000000005710 ; __unwind {
.text:0000000000005710                 push    r13
.text:0000000000005712                 push    r12
.text:0000000000005714                 mov     r12, rdx
.text:0000000000005717                 push    rbp
.text:0000000000005718                 push    rbx
.text:0000000000005719                 mov     rbp, rdi
.text:000000000000571C                 mov     rbx, rsi
.text:000000000000571F                 sub     rsp, 8
.text:0000000000005723                 cmp     [rbp+38h], rdx
.text:0000000000005727                 mov     r13, [rdi+40h]
.text:000000000000572B                 mov     rdi, [rdi+10h]  ; ptr
.text:000000000000572F                 jnb     short loc_5765
.text:0000000000005731                 lea     rsi, [rdx+28h]
.text:0000000000005735                 mov     rax, 1FFFFFFFFFFFFFFFh
.text:000000000000573F                 cmp     rsi, rax
.text:0000000000005742                 mov     [rbp+38h], rsi
.text:0000000000005746                 ja      loc_57E4
.text:000000000000574C                 shl     rsi, 3          ; size
.text:0000000000005750                 call    _realloc
.text:0000000000005755                 test    rax, rax
.text:0000000000005758                 mov     rdi, rax        ; base
.text:000000000000575B                 jz      loc_57E0
.text:0000000000005761                 mov     [rbp+10h], rax
.text:0000000000005765
.text:0000000000005765 loc_5765:                               ; CODE XREF: fts_sort+1F↑j
.text:0000000000005765                 test    rbx, rbx
.text:0000000000005768                 jz      short loc_5781
.text:000000000000576A                 mov     rdx, rdi
.text:000000000000576D                 nop     dword ptr [rax]
.text:0000000000005770
.text:0000000000005770 loc_5770:                               ; CODE XREF: fts_sort+6F↓j
.text:0000000000005770                 add     rdx, 8
.text:0000000000005774                 mov     [rdx-8], rbx
.text:0000000000005778                 mov     rbx, [rbx+10h]
.text:000000000000577C                 test    rbx, rbx
.text:000000000000577F                 jnz     short loc_5770
.text:0000000000005781
.text:0000000000005781 loc_5781:                               ; CODE XREF: fts_sort+58↑j
.text:0000000000005781                 mov     rcx, r13        ; compar
.text:0000000000005784                 mov     edx, 8          ; size
.text:0000000000005789                 mov     rsi, r12        ; nmemb
.text:000000000000578C                 call    _qsort
.text:0000000000005791                 mov     r8, [rbp+10h]
.text:0000000000005795                 mov     rcx, r12
.text:0000000000005798                 sub     rcx, 1
.text:000000000000579C                 mov     rax, [r8]
.text:000000000000579F                 jz      short loc_5810
.text:00000000000057A1                 mov     rdi, rax
.text:00000000000057A4                 mov     rdx, r8
.text:00000000000057A7                 jmp     short loc_57B3
.text:00000000000057A7 ; ---------------------------------------------------------------------------
.text:00000000000057A9                 align 10h
.text:00000000000057B0
.text:00000000000057B0 loc_57B0:                               ; CODE XREF: fts_sort+B3↓j
.text:00000000000057B0                 mov     rdi, [rdx]
.text:00000000000057B3
.text:00000000000057B3 loc_57B3:                               ; CODE XREF: fts_sort+97↑j
.text:00000000000057B3                 mov     rsi, [rdx+8]
.text:00000000000057B7                 add     rdx, 8
.text:00000000000057BB                 sub     rcx, 1
.text:00000000000057BF                 mov     [rdi+10h], rsi
.text:00000000000057C3                 jnz     short loc_57B0
.text:00000000000057C5                 mov     rdx, [r8+r12*8-8]
.text:00000000000057CA
.text:00000000000057CA loc_57CA:                               ; CODE XREF: fts_sort+103↓j
.text:00000000000057CA                 mov     qword ptr [rdx+10h], 0
.text:00000000000057D2                 add     rsp, 8
.text:00000000000057D6                 pop     rbx
.text:00000000000057D7                 pop     rbp
.text:00000000000057D8                 pop     r12
.text:00000000000057DA                 pop     r13
.text:00000000000057DC                 retn
.text:00000000000057DC ; ---------------------------------------------------------------------------
.text:00000000000057DD                 align 20h
.text:00000000000057E0
.text:00000000000057E0 loc_57E0:                               ; CODE XREF: fts_sort+4B↑j
.text:00000000000057E0                 mov     rdi, [rbp+10h]  ; ptr
.text:00000000000057E4
.text:00000000000057E4 loc_57E4:                               ; CODE XREF: fts_sort+36↑j
.text:00000000000057E4                 call    free
.text:00000000000057E9                 mov     qword ptr [rbp+10h], 0
.text:00000000000057F1                 mov     qword ptr [rbp+38h], 0
.text:00000000000057F9                 add     rsp, 8
.text:00000000000057FD                 mov     rax, rbx
.text:0000000000005800                 pop     rbx
.text:0000000000005801                 pop     rbp
.text:0000000000005802                 pop     r12
.text:0000000000005804                 pop     r13
.text:0000000000005806                 retn
.text:0000000000005806 ; ---------------------------------------------------------------------------
.text:0000000000005807                 align 10h
.text:0000000000005810
.text:0000000000005810 loc_5810:                               ; CODE XREF: fts_sort+8F↑j
.text:0000000000005810                 mov     rdx, rax
.text:0000000000005813                 jmp     short loc_57CA
.text:0000000000005813 ; } // starts at 5710
.text:0000000000005813 fts_sort        endp
.text:0000000000005813
.text:0000000000005813 ; ---------------------------------------------------------------------------
.text:0000000000005815                 align 20h
.text:0000000000005820
.text:0000000000005820 ; =============== S U B R O U T I N E =======================================
.text:0000000000005820
.text:0000000000005820
.text:0000000000005820 fts_alloc       proc near               ; CODE XREF: fts_build+22C↓p
.text:0000000000005820                                         ; rpl_fts_open+E7↓p ...
.text:0000000000005820 ; __unwind {
.text:0000000000005820                 push    r13
.text:0000000000005822                 push    r12
.text:0000000000005824                 mov     r12, rdi
.text:0000000000005827                 push    rbp
.text:0000000000005828                 lea     rdi, [rdx+110h]
.text:000000000000582F                 push    rbx
.text:0000000000005830                 mov     r13, rsi
.text:0000000000005833                 mov     rbp, rdx
.text:0000000000005836                 sub     rsp, 8
.text:000000000000583A                 and     rdi, 0FFFFFFFFFFFFFFF8h ; size
.text:000000000000583E                 call    _malloc
.text:0000000000005843                 test    rax, rax
.text:0000000000005846                 mov     rbx, rax
.text:0000000000005849                 jz      short loc_589C
.text:000000000000584B                 lea     rdi, [rax+108h] ; dest
.text:0000000000005852                 mov     rdx, rbp        ; n
.text:0000000000005855                 mov     rsi, r13        ; src
.text:0000000000005858                 call    _memcpy
.text:000000000000585D                 mov     rax, [r12+20h]
.text:0000000000005862                 mov     byte ptr [rbx+rbp+108h], 0
.text:000000000000586A                 mov     [rbx+60h], rbp
.text:000000000000586E                 mov     [rbx+50h], r12
.text:0000000000005872                 mov     dword ptr [rbx+40h], 0
.text:0000000000005879                 mov     qword ptr [rbx+18h], 0
.text:0000000000005881                 mov     [rbx+38h], rax
.text:0000000000005885                 mov     dword ptr [rbx+72h], 30000h
.text:000000000000588C                 mov     qword ptr [rbx+20h], 0
.text:0000000000005894                 mov     qword ptr [rbx+28h], 0
.text:000000000000589C
.text:000000000000589C loc_589C:                               ; CODE XREF: fts_alloc+29↑j
.text:000000000000589C                 add     rsp, 8
.text:00000000000058A0                 mov     rax, rbx
.text:00000000000058A3                 pop     rbx
.text:00000000000058A4                 pop     rbp
.text:00000000000058A5                 pop     r12
.text:00000000000058A7                 pop     r13
.text:00000000000058A9                 retn
.text:00000000000058A9 ; } // starts at 5820
.text:00000000000058A9 fts_alloc       endp
.text:00000000000058A9
.text:00000000000058A9 ; ---------------------------------------------------------------------------
.text:00000000000058AA                 align 10h
.text:00000000000058B0
.text:00000000000058B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000058B0
.text:00000000000058B0
.text:00000000000058B0 ; __int64 __fastcall fts_lfree(void *ptr)
.text:00000000000058B0 fts_lfree       proc near               ; CODE XREF: fts_build+666↓p
.text:00000000000058B0                                         ; fts_build+765↓p ...
.text:00000000000058B0 ; __unwind {
.text:00000000000058B0                 test    rdi, rdi
.text:00000000000058B3                 jz      short locret_58F0
.text:00000000000058B5                 push    rbp
.text:00000000000058B6                 push    rbx
.text:00000000000058B7                 mov     rbx, rdi
.text:00000000000058BA                 sub     rsp, 8
.text:00000000000058BE                 xchg    ax, ax
.text:00000000000058C0
.text:00000000000058C0 loc_58C0:                               ; CODE XREF: fts_lfree+30↓j
.text:00000000000058C0                 mov     rdi, [rbx+18h]  ; dirp
.text:00000000000058C4                 mov     rbp, [rbx+10h]
.text:00000000000058C8                 test    rdi, rdi
.text:00000000000058CB                 jz      short loc_58D2
.text:00000000000058CD                 call    _closedir
.text:00000000000058D2
.text:00000000000058D2 loc_58D2:                               ; CODE XREF: fts_lfree+1B↑j
.text:00000000000058D2                 mov     rdi, rbx        ; ptr
.text:00000000000058D5                 mov     rbx, rbp
.text:00000000000058D8                 call    free
.text:00000000000058DD                 test    rbp, rbp
.text:00000000000058E0                 jnz     short loc_58C0
.text:00000000000058E2                 add     rsp, 8
.text:00000000000058E6                 pop     rbx
.text:00000000000058E7                 pop     rbp
.text:00000000000058E8                 retn
.text:00000000000058E8 ; ---------------------------------------------------------------------------
.text:00000000000058E9                 align 10h
.text:00000000000058F0
.text:00000000000058F0 locret_58F0:                            ; CODE XREF: fts_lfree+3↑j
.text:00000000000058F0                 rep retn
.text:00000000000058F0 ; } // starts at 58B0
.text:00000000000058F0 fts_lfree       endp
.text:00000000000058F0
.text:00000000000058F0 ; ---------------------------------------------------------------------------
.text:00000000000058F2                 align 20h
.text:0000000000005900
.text:0000000000005900 ; =============== S U B R O U T I N E =======================================
.text:0000000000005900
.text:0000000000005900
.text:0000000000005900 fd_ring_clear   proc near               ; CODE XREF: restore_initial_cwd+2C↓p
.text:0000000000005900                                         ; rpl_fts_close+8C↓p
.text:0000000000005900 ; __unwind {
.text:0000000000005900                 push    rbx
.text:0000000000005901                 mov     rbx, rdi
.text:0000000000005904                 jmp     short loc_591C
.text:0000000000005904 ; ---------------------------------------------------------------------------
.text:0000000000005906                 align 10h
.text:0000000000005910
.text:0000000000005910 loc_5910:                               ; CODE XREF: fd_ring_clear+26↓j
.text:0000000000005910                 mov     rdi, rbx
.text:0000000000005913                 call    i_ring_pop
.text:0000000000005918                 test    eax, eax
.text:000000000000591A                 jns     short loc_5930
.text:000000000000591C
.text:000000000000591C loc_591C:                               ; CODE XREF: fd_ring_clear+4↑j
.text:000000000000591C                                         ; fd_ring_clear+37↓j
.text:000000000000591C                 mov     rdi, rbx
.text:000000000000591F                 call    i_ring_empty
.text:0000000000005924                 test    al, al
.text:0000000000005926                 jz      short loc_5910
.text:0000000000005928                 pop     rbx
.text:0000000000005929                 retn
.text:0000000000005929 ; ---------------------------------------------------------------------------
.text:000000000000592A                 align 10h
.text:0000000000005930
.text:0000000000005930 loc_5930:                               ; CODE XREF: fd_ring_clear+1A↑j
.text:0000000000005930                 mov     edi, eax        ; fd
.text:0000000000005932                 call    _close
.text:0000000000005937                 jmp     short loc_591C
.text:0000000000005937 ; } // starts at 5900
.text:0000000000005937 fd_ring_clear   endp
.text:0000000000005937
.text:0000000000005937 ; ---------------------------------------------------------------------------
.text:0000000000005939                 align 20h
.text:0000000000005940
.text:0000000000005940 ; =============== S U B R O U T I N E =======================================
.text:0000000000005940
.text:0000000000005940
.text:0000000000005940 filesystem_type proc near               ; CODE XREF: leaf_optimization+4↓p
.text:0000000000005940                                         ; fts_build+2C4↓p
.text:0000000000005940
.text:0000000000005940 var_B8          = qword ptr -0B8h
.text:0000000000005940 buf             = statfs ptr -0A8h
.text:0000000000005940 var_30          = qword ptr -30h
.text:0000000000005940
.text:0000000000005940 ; __unwind {
.text:0000000000005940                 push    r13
.text:0000000000005942                 push    r12
.text:0000000000005944                 push    rbp
.text:0000000000005945                 push    rbx
.text:0000000000005946                 sub     rsp, 98h
.text:000000000000594D                 mov     rbx, [rdi+50h]
.text:0000000000005951                 mov     rax, fs:28h
.text:000000000000595A                 mov     [rsp+0B8h+var_30], rax
.text:0000000000005962                 xor     eax, eax
.text:0000000000005964                 test    byte ptr [rbx+49h], 2
.text:0000000000005968                 jz      short loc_59D2
.text:000000000000596A                 mov     r12, [rbx+50h]
.text:000000000000596E                 mov     rbp, rdi
.text:0000000000005971                 mov     r13d, esi
.text:0000000000005974                 test    r12, r12
.text:0000000000005977                 jz      short loc_59A0
.text:0000000000005979
.text:0000000000005979 loc_5979:                               ; CODE XREF: filesystem_type+8B↓j
.text:0000000000005979                 mov     rax, [rbp+78h]
.text:000000000000597D                 mov     rsi, rsp
.text:0000000000005980                 mov     rdi, r12
.text:0000000000005983                 mov     [rsp+0B8h+var_B8], rax
.text:0000000000005987                 call    hash_lookup
.text:000000000000598C                 test    rax, rax
.text:000000000000598F                 jz      short loc_59CD
.text:0000000000005991                 mov     rbx, [rax+8]
.text:0000000000005995                 jmp     short loc_59D4
.text:0000000000005995 ; ---------------------------------------------------------------------------
.text:0000000000005997                 align 20h
.text:00000000000059A0
.text:00000000000059A0 loc_59A0:                               ; CODE XREF: filesystem_type+37↑j
.text:00000000000059A0                 mov     r8, cs:free_ptr
.text:00000000000059A7                 lea     rcx, dev_type_compare
.text:00000000000059AE                 lea     rdx, dev_type_hash
.text:00000000000059B5                 xor     esi, esi
.text:00000000000059B7                 mov     edi, 0Dh
.text:00000000000059BC                 call    hash_initialize
.text:00000000000059C1                 test    rax, rax
.text:00000000000059C4                 mov     r12, rax
.text:00000000000059C7                 mov     [rbx+50h], rax
.text:00000000000059CB                 jnz     short loc_5979
.text:00000000000059CD
.text:00000000000059CD loc_59CD:                               ; CODE XREF: filesystem_type+4F↑j
.text:00000000000059CD                 test    r13d, r13d
.text:00000000000059D0                 jns     short loc_5A00
.text:00000000000059D2
.text:00000000000059D2 loc_59D2:                               ; CODE XREF: filesystem_type+28↑j
.text:00000000000059D2                                         ; filesystem_type+CF↓j
.text:00000000000059D2                 xor     ebx, ebx
.text:00000000000059D4
.text:00000000000059D4 loc_59D4:                               ; CODE XREF: filesystem_type+55↑j
.text:00000000000059D4                                         ; filesystem_type+D9↓j ...
.text:00000000000059D4                 mov     rdx, [rsp+0B8h+var_30]
.text:00000000000059DC                 xor     rdx, fs:28h
.text:00000000000059E5                 mov     rax, rbx
.text:00000000000059E8                 jnz     short loc_5A62
.text:00000000000059EA                 add     rsp, 98h
.text:00000000000059F1                 pop     rbx
.text:00000000000059F2                 pop     rbp
.text:00000000000059F3                 pop     r12
.text:00000000000059F5                 pop     r13
.text:00000000000059F7                 retn
.text:00000000000059F7 ; ---------------------------------------------------------------------------
.text:00000000000059F8                 align 20h
.text:0000000000005A00
.text:0000000000005A00 loc_5A00:                               ; CODE XREF: filesystem_type+90↑j
.text:0000000000005A00                 lea     rsi, [rsp+0B8h+buf] ; buf
.text:0000000000005A05                 mov     edi, r13d       ; fildes
.text:0000000000005A08                 call    _fstatfs
.text:0000000000005A0D                 test    eax, eax
.text:0000000000005A0F                 jnz     short loc_59D2
.text:0000000000005A11                 test    r12, r12
.text:0000000000005A14                 mov     rbx, [rsp+0B8h+buf.f_type]
.text:0000000000005A19                 jz      short loc_59D4
.text:0000000000005A1B                 mov     edi, 10h        ; size
.text:0000000000005A20                 call    _malloc
.text:0000000000005A25                 test    rax, rax
.text:0000000000005A28                 mov     r13, rax
.text:0000000000005A2B                 jz      short loc_59D4
.text:0000000000005A2D                 mov     rax, [rbp+78h]
.text:0000000000005A31                 mov     [r13+8], rbx
.text:0000000000005A35                 mov     rsi, r13
.text:0000000000005A38                 mov     rdi, r12
.text:0000000000005A3B                 mov     [r13+0], rax
.text:0000000000005A3F                 call    hash_insert
.text:0000000000005A44                 test    rax, rax
.text:0000000000005A47                 jz      short loc_5A58
.text:0000000000005A49                 cmp     r13, rax
.text:0000000000005A4C                 jnz     short loc_5A67
.text:0000000000005A4E
.text:0000000000005A4E loc_5A4E:                               ; CODE XREF: filesystem_type+120↓j
.text:0000000000005A4E                 mov     rbx, [rsp+0B8h+buf.f_type]
.text:0000000000005A53                 jmp     loc_59D4
.text:0000000000005A58 ; ---------------------------------------------------------------------------
.text:0000000000005A58
.text:0000000000005A58 loc_5A58:                               ; CODE XREF: filesystem_type+107↑j
.text:0000000000005A58                 mov     rdi, r13        ; ptr
.text:0000000000005A5B                 call    free
.text:0000000000005A60                 jmp     short loc_5A4E
.text:0000000000005A62 ; ---------------------------------------------------------------------------
.text:0000000000005A62
.text:0000000000005A62 loc_5A62:                               ; CODE XREF: filesystem_type+A8↑j
.text:0000000000005A62                 call    ___stack_chk_fail
.text:0000000000005A67 ; ---------------------------------------------------------------------------
.text:0000000000005A67
.text:0000000000005A67 loc_5A67:                               ; CODE XREF: filesystem_type+10C↑j
.text:0000000000005A67                 call    _abort
.text:0000000000005A67 ; } // starts at 5940
.text:0000000000005A67 filesystem_type endp
.text:0000000000005A67
.text:0000000000005A67 ; ---------------------------------------------------------------------------
.text:0000000000005A6C                 align 10h
.text:0000000000005A70
.text:0000000000005A70 ; =============== S U B R O U T I N E =======================================
.text:0000000000005A70
.text:0000000000005A70
.text:0000000000005A70 leaf_optimization proc near             ; CODE XREF: fts_build+8B7↓p
.text:0000000000005A70                                         ; rpl_fts_read+705↓p
.text:0000000000005A70 ; __unwind {
.text:0000000000005A70                 sub     rsp, 8
.text:0000000000005A74                 call    filesystem_type
.text:0000000000005A79                 cmp     rax, 52654973h
.text:0000000000005A7F                 jz      short loc_5AD0
.text:0000000000005A81                 jle     short loc_5AB0
.text:0000000000005A83                 cmp     rax, 58465342h
.text:0000000000005A89                 jz      short loc_5AD0
.text:0000000000005A8B                 mov     edx, 0FF534D42h
.text:0000000000005A90                 cmp     rax, rdx
.text:0000000000005A93                 jz      short loc_5AC5
.text:0000000000005A95                 cmp     rax, 5346414Fh
.text:0000000000005A9B                 jz      short loc_5AC5
.text:0000000000005A9D
.text:0000000000005A9D loc_5A9D:                               ; CODE XREF: leaf_optimization+53↓j
.text:0000000000005A9D                 mov     eax, 1
.text:0000000000005AA2                 add     rsp, 8
.text:0000000000005AA6                 retn
.text:0000000000005AA6 ; ---------------------------------------------------------------------------
.text:0000000000005AA7                 align 10h
.text:0000000000005AB0
.text:0000000000005AB0 loc_5AB0:                               ; CODE XREF: leaf_optimization+11↑j
.text:0000000000005AB0                 cmp     rax, 6969h
.text:0000000000005AB6                 jz      short loc_5AC5
.text:0000000000005AB8                 cmp     rax, 9FA0h
.text:0000000000005ABE                 jz      short loc_5AC5
.text:0000000000005AC0                 test    rax, rax
.text:0000000000005AC3                 jnz     short loc_5A9D
.text:0000000000005AC5
.text:0000000000005AC5 loc_5AC5:                               ; CODE XREF: leaf_optimization+23↑j
.text:0000000000005AC5                                         ; leaf_optimization+2B↑j ...
.text:0000000000005AC5                 xor     eax, eax
.text:0000000000005AC7                 add     rsp, 8
.text:0000000000005ACB                 retn
.text:0000000000005ACB ; ---------------------------------------------------------------------------
.text:0000000000005ACC                 align 10h
.text:0000000000005AD0
.text:0000000000005AD0 loc_5AD0:                               ; CODE XREF: leaf_optimization+F↑j
.text:0000000000005AD0                                         ; leaf_optimization+19↑j
.text:0000000000005AD0                 mov     eax, 2
.text:0000000000005AD5                 add     rsp, 8
.text:0000000000005AD9                 retn
.text:0000000000005AD9 ; } // starts at 5A70
.text:0000000000005AD9 leaf_optimization endp
.text:0000000000005AD9
.text:0000000000005AD9 ; ---------------------------------------------------------------------------
.text:0000000000005ADA                 align 20h
.text:0000000000005AE0
.text:0000000000005AE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005AE0
.text:0000000000005AE0
.text:0000000000005AE0 cwd_advance_fd  proc near               ; CODE XREF: restore_initial_cwd+4A↓p
.text:0000000000005AE0                                         ; fts_safe_changedir+21E↓p ...
.text:0000000000005AE0 ; __unwind {
.text:0000000000005AE0                 push    rbp
.text:0000000000005AE1                 push    rbx
.text:0000000000005AE2                 mov     ebp, esi
.text:0000000000005AE4                 mov     rbx, rdi
.text:0000000000005AE7                 sub     rsp, 8
.text:0000000000005AEB                 mov     esi, [rdi+2Ch]
.text:0000000000005AEE                 cmp     esi, ebp
.text:0000000000005AF0                 jnz     short loc_5AF7
.text:0000000000005AF2                 cmp     esi, 0FFFFFF9Ch
.text:0000000000005AF5                 jnz     short loc_5B41
.text:0000000000005AF7
.text:0000000000005AF7 loc_5AF7:                               ; CODE XREF: cwd_advance_fd+10↑j
.text:0000000000005AF7                 test    dl, dl
.text:0000000000005AF9                 jnz     short loc_5B10
.text:0000000000005AFB                 test    byte ptr [rbx+48h], 4
.text:0000000000005AFF                 jnz     short loc_5B05
.text:0000000000005B01                 test    esi, esi
.text:0000000000005B03                 jns     short loc_5B30
.text:0000000000005B05
.text:0000000000005B05 loc_5B05:                               ; CODE XREF: cwd_advance_fd+1F↑j
.text:0000000000005B05                                         ; cwd_advance_fd+3B↓j
.text:0000000000005B05                 mov     [rbx+2Ch], ebp
.text:0000000000005B08                 add     rsp, 8
.text:0000000000005B0C                 pop     rbx
.text:0000000000005B0D                 pop     rbp
.text:0000000000005B0E                 retn
.text:0000000000005B0E ; ---------------------------------------------------------------------------
.text:0000000000005B0F                 align 10h
.text:0000000000005B10
.text:0000000000005B10 loc_5B10:                               ; CODE XREF: cwd_advance_fd+19↑j
.text:0000000000005B10                 lea     rdi, [rbx+60h]
.text:0000000000005B14                 call    i_ring_push
.text:0000000000005B19                 test    eax, eax
.text:0000000000005B1B                 js      short loc_5B05
.text:0000000000005B1D                 mov     edi, eax        ; fd
.text:0000000000005B1F                 call    _close
.text:0000000000005B24                 mov     [rbx+2Ch], ebp
.text:0000000000005B27                 add     rsp, 8
.text:0000000000005B2B                 pop     rbx
.text:0000000000005B2C                 pop     rbp
.text:0000000000005B2D                 retn
.text:0000000000005B2D ; ---------------------------------------------------------------------------
.text:0000000000005B2E                 align 10h
.text:0000000000005B30
.text:0000000000005B30 loc_5B30:                               ; CODE XREF: cwd_advance_fd+23↑j
.text:0000000000005B30                 mov     edi, esi        ; fd
.text:0000000000005B32                 call    _close
.text:0000000000005B37                 mov     [rbx+2Ch], ebp
.text:0000000000005B3A                 add     rsp, 8
.text:0000000000005B3E                 pop     rbx
.text:0000000000005B3F                 pop     rbp
.text:0000000000005B40                 retn
.text:0000000000005B41 ; ---------------------------------------------------------------------------
.text:0000000000005B41
.text:0000000000005B41 loc_5B41:                               ; CODE XREF: cwd_advance_fd+15↑j
.text:0000000000005B41                 call    _abort
.text:0000000000005B41 ; } // starts at 5AE0
.text:0000000000005B41 cwd_advance_fd  endp
.text:0000000000005B41
.text:0000000000005B41 ; ---------------------------------------------------------------------------
.text:0000000000005B46                 align 10h
.text:0000000000005B50
.text:0000000000005B50 ; =============== S U B R O U T I N E =======================================
.text:0000000000005B50
.text:0000000000005B50
.text:0000000000005B50 restore_initial_cwd proc near           ; CODE XREF: fts_build+73E↓p
.text:0000000000005B50                                         ; rpl_fts_read+2A3↓p ...
.text:0000000000005B50 ; __unwind {
.text:0000000000005B50                 push    rbp
.text:0000000000005B51                 push    rbx
.text:0000000000005B52                 mov     rbx, rdi
.text:0000000000005B55                 sub     rsp, 8
.text:0000000000005B59                 mov     edx, [rdi+48h]
.text:0000000000005B5C                 mov     ebp, edx
.text:0000000000005B5E                 and     ebp, 4
.text:0000000000005B61                 jnz     short loc_5BA8
.text:0000000000005B63                 and     dh, 2
.text:0000000000005B66                 jnz     short loc_5B90
.text:0000000000005B68                 mov     edi, [rdi+28h]  ; fd
.text:0000000000005B6B                 xor     ebp, ebp
.text:0000000000005B6D                 call    _fchdir
.text:0000000000005B72                 test    eax, eax
.text:0000000000005B74                 setnz   bpl
.text:0000000000005B78
.text:0000000000005B78 loc_5B78:                               ; CODE XREF: restore_initial_cwd+4F↓j
.text:0000000000005B78                                         ; restore_initial_cwd+5A↓j
.text:0000000000005B78                 lea     rdi, [rbx+60h]
.text:0000000000005B7C                 call    fd_ring_clear
.text:0000000000005B81                 add     rsp, 8
.text:0000000000005B85                 mov     eax, ebp
.text:0000000000005B87                 pop     rbx
.text:0000000000005B88                 pop     rbp
.text:0000000000005B89                 retn
.text:0000000000005B89 ; ---------------------------------------------------------------------------
.text:0000000000005B8A                 align 10h
.text:0000000000005B90
.text:0000000000005B90 loc_5B90:                               ; CODE XREF: restore_initial_cwd+16↑j
.text:0000000000005B90                 mov     edx, 1
.text:0000000000005B95                 mov     esi, 0FFFFFF9Ch
.text:0000000000005B9A                 call    cwd_advance_fd
.text:0000000000005B9F                 jmp     short loc_5B78
.text:0000000000005B9F ; ---------------------------------------------------------------------------
.text:0000000000005BA1                 align 8
.text:0000000000005BA8
.text:0000000000005BA8 loc_5BA8:                               ; CODE XREF: restore_initial_cwd+11↑j
.text:0000000000005BA8                 xor     ebp, ebp
.text:0000000000005BAA                 jmp     short loc_5B78
.text:0000000000005BAA ; } // starts at 5B50
.text:0000000000005BAA restore_initial_cwd endp
.text:0000000000005BAA
.text:0000000000005BAA ; ---------------------------------------------------------------------------
.text:0000000000005BAC                 align 10h
.text:0000000000005BB0
.text:0000000000005BB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005BB0
.text:0000000000005BB0
.text:0000000000005BB0 fts_palloc_isra_2 proc near             ; CODE XREF: fts_build+263↓p
.text:0000000000005BB0                                         ; rpl_fts_open+BD↓p
.text:0000000000005BB0 ; __unwind {
.text:0000000000005BB0                 push    rbx
.text:0000000000005BB1                 mov     rcx, [rsi]
.text:0000000000005BB4                 mov     rbx, rdi
.text:0000000000005BB7                 mov     rdi, [rdi]      ; ptr
.text:0000000000005BBA                 lea     rax, [rcx+rdx+100h]
.text:0000000000005BC2                 cmp     rcx, rax
.text:0000000000005BC5                 ja      short loc_5BE8
.text:0000000000005BC7                 mov     [rsi], rax
.text:0000000000005BCA                 mov     rsi, rax        ; size
.text:0000000000005BCD                 call    _realloc
.text:0000000000005BD2                 test    rax, rax
.text:0000000000005BD5                 jz      short loc_5C08
.text:0000000000005BD7                 mov     [rbx], rax
.text:0000000000005BDA                 mov     eax, 1
.text:0000000000005BDF                 pop     rbx
.text:0000000000005BE0                 retn
.text:0000000000005BE0 ; ---------------------------------------------------------------------------
.text:0000000000005BE1                 align 8
.text:0000000000005BE8
.text:0000000000005BE8 loc_5BE8:                               ; CODE XREF: fts_palloc_isra_2+15↑j
.text:0000000000005BE8                 call    free
.text:0000000000005BED                 mov     qword ptr [rbx], 0
.text:0000000000005BF4                 call    ___errno_location
.text:0000000000005BF9                 mov     dword ptr [rax], 24h ; '$'
.text:0000000000005BFF                 xor     eax, eax
.text:0000000000005C01                 pop     rbx
.text:0000000000005C02                 retn
.text:0000000000005C02 ; ---------------------------------------------------------------------------
.text:0000000000005C03                 align 8
.text:0000000000005C08
.text:0000000000005C08 loc_5C08:                               ; CODE XREF: fts_palloc_isra_2+25↑j
.text:0000000000005C08                 mov     rdi, [rbx]      ; ptr
.text:0000000000005C0B                 call    free
.text:0000000000005C10                 mov     qword ptr [rbx], 0
.text:0000000000005C17                 xor     eax, eax
.text:0000000000005C19                 pop     rbx
.text:0000000000005C1A                 retn
.text:0000000000005C1A ; } // starts at 5BB0
.text:0000000000005C1A fts_palloc_isra_2 endp
.text:0000000000005C1A
.text:0000000000005C1A ; ---------------------------------------------------------------------------
.text:0000000000005C1B                 align 20h
.text:0000000000005C20
.text:0000000000005C20 ; =============== S U B R O U T I N E =======================================
.text:0000000000005C20
.text:0000000000005C20
.text:0000000000005C20 setup_dir_isra_4 proc near              ; CODE XREF: rpl_fts_open+265↓p
.text:0000000000005C20                                         ; rpl_fts_read:loc_7325↓p
.text:0000000000005C20 ; __unwind {
.text:0000000000005C20                 and     edi, 102h
.text:0000000000005C26                 push    rbx
.text:0000000000005C27                 mov     rbx, rsi
.text:0000000000005C2A                 jz      short loc_5C60
.text:0000000000005C2C                 mov     r8, cs:free_ptr
.text:0000000000005C33                 lea     rcx, AD_compare
.text:0000000000005C3A                 lea     rdx, AD_hash
.text:0000000000005C41                 xor     esi, esi
.text:0000000000005C43                 mov     edi, 1Fh
.text:0000000000005C48                 call    hash_initialize
.text:0000000000005C4D                 test    rax, rax
.text:0000000000005C50                 mov     [rbx], rax
.text:0000000000005C53                 setnz   al
.text:0000000000005C56
.text:0000000000005C56 loc_5C56:                               ; CODE XREF: setup_dir_isra_4+55↓j
.text:0000000000005C56                 pop     rbx
.text:0000000000005C57                 retn
.text:0000000000005C57 ; ---------------------------------------------------------------------------
.text:0000000000005C58                 align 20h
.text:0000000000005C60
.text:0000000000005C60 loc_5C60:                               ; CODE XREF: setup_dir_isra_4+A↑j
.text:0000000000005C60                 mov     edi, 20h ; ' '  ; size
.text:0000000000005C65                 call    _malloc
.text:0000000000005C6A                 mov     rdi, rax
.text:0000000000005C6D                 mov     [rbx], rax
.text:0000000000005C70                 xor     eax, eax
.text:0000000000005C72                 test    rdi, rdi
.text:0000000000005C75                 jz      short loc_5C56
.text:0000000000005C77                 call    cycle_check_init
.text:0000000000005C7C                 mov     eax, 1
.text:0000000000005C81                 pop     rbx
.text:0000000000005C82                 retn
.text:0000000000005C82 ; } // starts at 5C20
.text:0000000000005C82 setup_dir_isra_4 endp
.text:0000000000005C82
.text:0000000000005C82 ; ---------------------------------------------------------------------------
.text:0000000000005C83                 align 10h
.text:0000000000005C90
.text:0000000000005C90 ; =============== S U B R O U T I N E =======================================
.text:0000000000005C90
.text:0000000000005C90
.text:0000000000005C90 diropen_isra_6  proc near               ; CODE XREF: fts_safe_changedir+8D↓p
.text:0000000000005C90                                         ; rpl_fts_open+287↓p ...
.text:0000000000005C90 ; __unwind {
.text:0000000000005C90                 mov     rax, rdx
.text:0000000000005C93                 mov     edx, esi
.text:0000000000005C95                 shl     edx, 0Dh
.text:0000000000005C98                 and     edx, 20000h
.text:0000000000005C9E                 or      edx, 90900h
.text:0000000000005CA4                 and     esi, 200h
.text:0000000000005CAA                 jnz     short loc_5CC0
.text:0000000000005CAC                 mov     rdi, rax
.text:0000000000005CAF                 mov     esi, edx
.text:0000000000005CB1                 xor     eax, eax
.text:0000000000005CB3                 jmp     open_safer
.text:0000000000005CB3 ; ---------------------------------------------------------------------------
.text:0000000000005CB8                 align 20h
.text:0000000000005CC0
.text:0000000000005CC0 loc_5CC0:                               ; CODE XREF: diropen_isra_6+1A↑j
.text:0000000000005CC0                 mov     rsi, rax
.text:0000000000005CC3                 xor     eax, eax
.text:0000000000005CC5                 jmp     openat_safer
.text:0000000000005CC5 ; } // starts at 5C90
.text:0000000000005CC5 diropen_isra_6  endp
.text:0000000000005CC5
.text:0000000000005CC5 ; ---------------------------------------------------------------------------
.text:0000000000005CCA                 align 10h
.text:0000000000005CD0
.text:0000000000005CD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005CD0
.text:0000000000005CD0 ; Attributes: info_from_lumina
.text:0000000000005CD0
.text:0000000000005CD0 fts_safe_changedir proc near            ; CODE XREF: fts_build+879↓p
.text:0000000000005CD0                                         ; fts_build+892↓p ...
.text:0000000000005CD0
.text:0000000000005CD0 var_D9          = byte ptr -0D9h
.text:0000000000005CD0 stat_buf        = stat ptr -0D8h
.text:0000000000005CD0 var_40          = qword ptr -40h
.text:0000000000005CD0
.text:0000000000005CD0 ; __unwind {
.text:0000000000005CD0                 push    r15
.text:0000000000005CD2                 push    r14
.text:0000000000005CD4                 mov     r14, rsi
.text:0000000000005CD7                 push    r13
.text:0000000000005CD9                 push    r12
.text:0000000000005CDB                 mov     r13, rdi
.text:0000000000005CDE                 push    rbp
.text:0000000000005CDF                 push    rbx
.text:0000000000005CE0                 mov     r12d, edx
.text:0000000000005CE3                 mov     rbp, rcx
.text:0000000000005CE6                 sub     rsp, 0B8h
.text:0000000000005CED                 mov     ebx, [rdi+48h]
.text:0000000000005CF0                 mov     rax, fs:28h
.text:0000000000005CF9                 mov     [rsp+0E8h+var_40], rax
.text:0000000000005D01                 xor     eax, eax
.text:0000000000005D03                 mov     r9d, ebx
.text:0000000000005D06                 and     r9d, 4
.text:0000000000005D0A                 test    rcx, rcx
.text:0000000000005D0D                 jz      loc_5DC0
.text:0000000000005D13                 lea     rdx, asc_B15A   ; ".."
.text:0000000000005D1A                 mov     ecx, 3
.text:0000000000005D1F                 mov     rsi, rbp
.text:0000000000005D22                 mov     rdi, rdx
.text:0000000000005D25                 repe cmpsb
.text:0000000000005D27                 setnbe  al
.text:0000000000005D2A                 sbb     al, 0
.text:0000000000005D2C                 test    al, al
.text:0000000000005D2E                 jnz     loc_5DC0
.text:0000000000005D34                 test    r9d, r9d
.text:0000000000005D37                 jnz     loc_5DC5
.text:0000000000005D3D                 test    r12d, r12d
.text:0000000000005D40                 jns     loc_5F2A
.text:0000000000005D46                 test    bh, 2
.text:0000000000005D49                 jnz     loc_5E90
.text:0000000000005D4F
.text:0000000000005D4F loc_5D4F:                               ; CODE XREF: fts_safe_changedir+1E9↓j
.text:0000000000005D4F                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000005D54
.text:0000000000005D54 loc_5D54:                               ; CODE XREF: fts_safe_changedir+1D2↓j
.text:0000000000005D54                                         ; fts_safe_changedir+275↓j
.text:0000000000005D54                 mov     edi, [r13+2Ch]
.text:0000000000005D58                 mov     rdx, rbp
.text:0000000000005D5B                 mov     esi, ebx
.text:0000000000005D5D                 call    diropen_isra_6
.text:0000000000005D62                 test    eax, eax
.text:0000000000005D64                 mov     r15d, eax
.text:0000000000005D67                 js      loc_5F1B
.text:0000000000005D6D                 mov     ebx, [r13+48h]
.text:0000000000005D71                 test    bl, 2
.text:0000000000005D74                 jz      loc_5E1A
.text:0000000000005D7A                 nop     word ptr [rax+rax+00h]
.text:0000000000005D80
.text:0000000000005D80 loc_5D80:                               ; CODE XREF: fts_safe_changedir+144↓j
.text:0000000000005D80                                         ; fts_safe_changedir+16A↓j ...
.text:0000000000005D80                 lea     rdx, [rsp+0E8h+stat_buf] ; stat_buf
.text:0000000000005D85                 mov     esi, r15d       ; fildes
.text:0000000000005D88                 mov     edi, 1          ; ver
.text:0000000000005D8D                 call    ___fxstat       ; PIC mode
.text:0000000000005D92                 test    eax, eax
.text:0000000000005D94                 jz      loc_5E60
.text:0000000000005D9A
.text:0000000000005D9A loc_5D9A:                               ; CODE XREF: fts_safe_changedir+1AA↓j
.text:0000000000005D9A                 mov     ebx, 0FFFFFFFFh
.text:0000000000005D9F
.text:0000000000005D9F loc_5D9F:                               ; CODE XREF: fts_safe_changedir+183↓j
.text:0000000000005D9F                 test    r12d, r12d
.text:0000000000005DA2                 jns     short loc_5DD5
.text:0000000000005DA4                 call    ___errno_location ; PIC mode
.text:0000000000005DA9                 mov     r12d, [rax]
.text:0000000000005DAC                 mov     rbp, rax
.text:0000000000005DAF                 mov     edi, r15d       ; fd
.text:0000000000005DB2                 call    _close          ; PIC mode
.text:0000000000005DB7                 mov     [rbp+0], r12d
.text:0000000000005DBB                 jmp     short loc_5DD5
.text:0000000000005DBB ; ---------------------------------------------------------------------------
.text:0000000000005DBD                 align 20h
.text:0000000000005DC0
.text:0000000000005DC0 loc_5DC0:                               ; CODE XREF: fts_safe_changedir+3D↑j
.text:0000000000005DC0                                         ; fts_safe_changedir+5E↑j
.text:0000000000005DC0                 test    r9d, r9d
.text:0000000000005DC3                 jz      short loc_5E00
.text:0000000000005DC5
.text:0000000000005DC5 loc_5DC5:                               ; CODE XREF: fts_safe_changedir+67↑j
.text:0000000000005DC5                 and     bh, 2
.text:0000000000005DC8                 jz      short loc_5DD3
.text:0000000000005DCA                 test    r12d, r12d
.text:0000000000005DCD                 jns     loc_5E80
.text:0000000000005DD3
.text:0000000000005DD3 loc_5DD3:                               ; CODE XREF: fts_safe_changedir+F8↑j
.text:0000000000005DD3                 xor     ebx, ebx
.text:0000000000005DD5
.text:0000000000005DD5 loc_5DD5:                               ; CODE XREF: fts_safe_changedir+D2↑j
.text:0000000000005DD5                                         ; fts_safe_changedir+EB↑j ...
.text:0000000000005DD5                 mov     rcx, [rsp+0E8h+var_40]
.text:0000000000005DDD                 xor     rcx, fs:28h
.text:0000000000005DE6                 mov     eax, ebx
.text:0000000000005DE8                 jnz     loc_5F25
.text:0000000000005DEE                 add     rsp, 0B8h
.text:0000000000005DF5                 pop     rbx
.text:0000000000005DF6                 pop     rbp
.text:0000000000005DF7                 pop     r12
.text:0000000000005DF9                 pop     r13
.text:0000000000005DFB                 pop     r14
.text:0000000000005DFD                 pop     r15
.text:0000000000005DFF                 retn
.text:0000000000005E00 ; ---------------------------------------------------------------------------
.text:0000000000005E00
.text:0000000000005E00 loc_5E00:                               ; CODE XREF: fts_safe_changedir+F3↑j
.text:0000000000005E00                 test    r12d, r12d
.text:0000000000005E03                 js      loc_5F40
.text:0000000000005E09                 test    bl, 2
.text:0000000000005E0C                 mov     r15d, r12d
.text:0000000000005E0F                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000005E14                 jnz     loc_5D80
.text:0000000000005E1A
.text:0000000000005E1A loc_5E1A:                               ; CODE XREF: fts_safe_changedir+A4↑j
.text:0000000000005E1A                 test    rbp, rbp
.text:0000000000005E1D                 jz      short loc_5E40
.text:0000000000005E1F                 lea     rdx, asc_B15A   ; ".."
.text:0000000000005E26
.text:0000000000005E26 loc_5E26:                               ; CODE XREF: fts_safe_changedir+265↓j
.text:0000000000005E26                 mov     ecx, 3
.text:0000000000005E2B                 mov     rsi, rbp
.text:0000000000005E2E                 mov     rdi, rdx
.text:0000000000005E31                 repe cmpsb
.text:0000000000005E33                 setnbe  al
.text:0000000000005E36                 sbb     al, 0
.text:0000000000005E38                 test    al, al
.text:0000000000005E3A                 jz      loc_5D80
.text:0000000000005E40
.text:0000000000005E40 loc_5E40:                               ; CODE XREF: fts_safe_changedir+14D↑j
.text:0000000000005E40                                         ; fts_safe_changedir+1FA↓j ...
.text:0000000000005E40                 and     bh, 2
.text:0000000000005E43                 jnz     loc_5ED8
.text:0000000000005E49                 mov     edi, r15d       ; fd
.text:0000000000005E4C                 call    _fchdir         ; PIC mode
.text:0000000000005E51                 mov     ebx, eax
.text:0000000000005E53                 jmp     loc_5D9F
.text:0000000000005E53 ; ---------------------------------------------------------------------------
.text:0000000000005E58                 align 20h
.text:0000000000005E60
.text:0000000000005E60 loc_5E60:                               ; CODE XREF: fts_safe_changedir+C4↑j
.text:0000000000005E60                 mov     rax, [rsp+0E8h+stat_buf.st_dev]
.text:0000000000005E65                 cmp     [r14+78h], rax
.text:0000000000005E69                 jz      loc_5F00
.text:0000000000005E6F
.text:0000000000005E6F loc_5E6F:                               ; CODE XREF: fts_safe_changedir+23C↓j
.text:0000000000005E6F                 call    ___errno_location ; PIC mode
.text:0000000000005E74                 mov     dword ptr [rax], 2
.text:0000000000005E7A                 jmp     loc_5D9A
.text:0000000000005E7A ; ---------------------------------------------------------------------------
.text:0000000000005E7F                 align 20h
.text:0000000000005E80
.text:0000000000005E80 loc_5E80:                               ; CODE XREF: fts_safe_changedir+FD↑j
.text:0000000000005E80                 mov     edi, r12d       ; fd
.text:0000000000005E83                 xor     ebx, ebx
.text:0000000000005E85                 call    _close          ; PIC mode
.text:0000000000005E8A                 jmp     loc_5DD5
.text:0000000000005E8A ; ---------------------------------------------------------------------------
.text:0000000000005E8F                 align 10h
.text:0000000000005E90
.text:0000000000005E90 loc_5E90:                               ; CODE XREF: fts_safe_changedir+79↑j
.text:0000000000005E90                 lea     r15, [r13+60h]
.text:0000000000005E94                 mov     rdi, r15
.text:0000000000005E97                 call    i_ring_empty    ; PIC mode
.text:0000000000005E9C                 test    al, al
.text:0000000000005E9E                 mov     [rsp+0E8h+var_D9], al
.text:0000000000005EA2                 jnz     loc_5D54
.text:0000000000005EA8                 mov     rdi, r15
.text:0000000000005EAB                 call    i_ring_pop      ; PIC mode
.text:0000000000005EB0                 test    eax, eax
.text:0000000000005EB2                 mov     r15d, eax
.text:0000000000005EB5                 mov     ebx, [r13+48h]
.text:0000000000005EB9                 js      loc_5D4F
.text:0000000000005EBF                 test    bl, 2
.text:0000000000005EC2                 mov     r12d, eax
.text:0000000000005EC5                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000005ECA                 jz      loc_5E40
.text:0000000000005ED0                 jmp     loc_5D80
.text:0000000000005ED0 ; ---------------------------------------------------------------------------
.text:0000000000005ED5                 align 8
.text:0000000000005ED8
.text:0000000000005ED8 loc_5ED8:                               ; CODE XREF: fts_safe_changedir+173↑j
.text:0000000000005ED8                 movzx   r14d, [rsp+0E8h+var_D9]
.text:0000000000005EDE                 mov     esi, r15d
.text:0000000000005EE1                 mov     rdi, r13
.text:0000000000005EE4                 xor     ebx, ebx
.text:0000000000005EE6                 xor     r14d, 1
.text:0000000000005EEA                 movzx   edx, r14b
.text:0000000000005EEE                 call    cwd_advance_fd
.text:0000000000005EF3                 jmp     loc_5DD5
.text:0000000000005EF3 ; ---------------------------------------------------------------------------
.text:0000000000005EF8                 align 20h
.text:0000000000005F00
.text:0000000000005F00 loc_5F00:                               ; CODE XREF: fts_safe_changedir+199↑j
.text:0000000000005F00                 mov     rax, [rsp+0E8h+stat_buf.st_ino]
.text:0000000000005F05                 cmp     [r14+80h], rax
.text:0000000000005F0C                 jnz     loc_5E6F
.text:0000000000005F12                 mov     ebx, [r13+48h]
.text:0000000000005F16                 jmp     loc_5E40
.text:0000000000005F1B ; ---------------------------------------------------------------------------
.text:0000000000005F1B
.text:0000000000005F1B loc_5F1B:                               ; CODE XREF: fts_safe_changedir+97↑j
.text:0000000000005F1B                 mov     ebx, 0FFFFFFFFh
.text:0000000000005F20                 jmp     loc_5DD5
.text:0000000000005F25 ; ---------------------------------------------------------------------------
.text:0000000000005F25
.text:0000000000005F25 loc_5F25:                               ; CODE XREF: fts_safe_changedir+118↑j
.text:0000000000005F25                 call    ___stack_chk_fail ; PIC mode
.text:0000000000005F2A ; ---------------------------------------------------------------------------
.text:0000000000005F2A
.text:0000000000005F2A loc_5F2A:                               ; CODE XREF: fts_safe_changedir+70↑j
.text:0000000000005F2A                 test    bl, 2
.text:0000000000005F2D                 mov     r15d, r12d
.text:0000000000005F30                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000005F35                 jz      loc_5E26
.text:0000000000005F3B                 jmp     loc_5D80
.text:0000000000005F40 ; ---------------------------------------------------------------------------
.text:0000000000005F40
.text:0000000000005F40 loc_5F40:                               ; CODE XREF: fts_safe_changedir+133↑j
.text:0000000000005F40                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000005F45                 jmp     loc_5D54
.text:0000000000005F45 ; } // starts at 5CD0
.text:0000000000005F45 fts_safe_changedir endp
.text:0000000000005F45
.text:0000000000005F45 ; ---------------------------------------------------------------------------
.text:0000000000005F4A                 align 10h
.text:0000000000005F50
.text:0000000000005F50 ; =============== S U B R O U T I N E =======================================
.text:0000000000005F50
.text:0000000000005F50
.text:0000000000005F50 enter_dir_isra_10 proc near             ; CODE XREF: fts_build+616↓p
.text:0000000000005F50                                         ; rpl_fts_read+383↓p
.text:0000000000005F50 ; __unwind {
.text:0000000000005F50                 and     edi, 102h
.text:0000000000005F56                 push    r12
.text:0000000000005F58                 mov     r12, rsi
.text:0000000000005F5B                 push    rbp
.text:0000000000005F5C                 push    rbx
.text:0000000000005F5D                 mov     rbx, rdx
.text:0000000000005F60                 jz      short loc_5FD0
.text:0000000000005F62                 mov     edi, 18h        ; size
.text:0000000000005F67                 call    _malloc
.text:0000000000005F6C                 test    rax, rax
.text:0000000000005F6F                 mov     rbp, rax
.text:0000000000005F72                 jz      loc_5FF8
.text:0000000000005F78                 mov     rax, [rbx+78h]
.text:0000000000005F7C                 mov     rdi, [r12]
.text:0000000000005F80                 mov     rsi, rbp
.text:0000000000005F83                 mov     [rbp+10h], rbx
.text:0000000000005F87                 mov     [rbp+0], rax
.text:0000000000005F8B                 mov     rax, [rbx+80h]
.text:0000000000005F92                 mov     [rbp+8], rax
.text:0000000000005F96                 call    hash_insert
.text:0000000000005F9B                 cmp     rbp, rax
.text:0000000000005F9E                 mov     r12, rax
.text:0000000000005FA1                 jz      short loc_5FC1
.text:0000000000005FA3                 mov     rdi, rbp        ; ptr
.text:0000000000005FA6                 call    free
.text:0000000000005FAB                 test    r12, r12
.text:0000000000005FAE                 jz      short loc_5FF8
.text:0000000000005FB0                 mov     rax, [r12+10h]
.text:0000000000005FB5                 mov     ecx, 2
.text:0000000000005FBA                 mov     [rbx+70h], cx
.text:0000000000005FBE                 mov     [rbx], rax
.text:0000000000005FC1
.text:0000000000005FC1 loc_5FC1:                               ; CODE XREF: enter_dir_isra_10+51↑j
.text:0000000000005FC1                                         ; enter_dir_isra_10+8F↓j
.text:0000000000005FC1                 pop     rbx
.text:0000000000005FC2                 mov     eax, 1
.text:0000000000005FC7                 pop     rbp
.text:0000000000005FC8                 pop     r12
.text:0000000000005FCA                 retn
.text:0000000000005FCA ; ---------------------------------------------------------------------------
.text:0000000000005FCB                 align 10h
.text:0000000000005FD0
.text:0000000000005FD0 loc_5FD0:                               ; CODE XREF: enter_dir_isra_10+10↑j
.text:0000000000005FD0                 mov     rdi, [r12]
.text:0000000000005FD4                 lea     rsi, [rdx+78h]
.text:0000000000005FD8                 call    cycle_check
.text:0000000000005FDD                 test    al, al
.text:0000000000005FDF                 jz      short loc_5FC1
.text:0000000000005FE1                 mov     edx, 2
.text:0000000000005FE6                 mov     [rbx], rbx
.text:0000000000005FE9                 mov     [rbx+70h], dx
.text:0000000000005FED                 pop     rbx
.text:0000000000005FEE                 pop     rbp
.text:0000000000005FEF                 pop     r12
.text:0000000000005FF1                 retn
.text:0000000000005FF1 ; ---------------------------------------------------------------------------
.text:0000000000005FF2                 align 8
.text:0000000000005FF8
.text:0000000000005FF8 loc_5FF8:                               ; CODE XREF: enter_dir_isra_10+22↑j
.text:0000000000005FF8                                         ; enter_dir_isra_10+5E↑j
.text:0000000000005FF8                 pop     rbx
.text:0000000000005FF9                 xor     eax, eax
.text:0000000000005FFB                 pop     rbp
.text:0000000000005FFC                 pop     r12
.text:0000000000005FFE                 retn
.text:0000000000005FFE ; } // starts at 5F50
.text:0000000000005FFE enter_dir_isra_10 endp
.text:0000000000005FFE
.text:0000000000005FFE ; ---------------------------------------------------------------------------
.text:0000000000005FFF                 align 20h
.text:0000000000006000
.text:0000000000006000 ; =============== S U B R O U T I N E =======================================
.text:0000000000006000
.text:0000000000006000
.text:0000000000006000 leave_dir_isra_12 proc near             ; CODE XREF: fts_build+5FA↓p
.text:0000000000006000                                         ; rpl_fts_read+195↓p ...
.text:0000000000006000
.text:0000000000006000 var_28          = qword ptr -28h
.text:0000000000006000 var_20          = qword ptr -20h
.text:0000000000006000 var_10          = qword ptr -10h
.text:0000000000006000
.text:0000000000006000 ; __unwind {
.text:0000000000006000                 sub     rsp, 28h
.text:0000000000006004                 mov     rcx, rsi
.text:0000000000006007                 mov     rax, fs:28h
.text:0000000000006010                 mov     [rsp+28h+var_10], rax
.text:0000000000006015                 xor     eax, eax
.text:0000000000006017                 and     edi, 102h
.text:000000000000601D                 jnz     short loc_6060
.text:000000000000601F                 mov     rax, [rdx+8]
.text:0000000000006023                 test    rax, rax
.text:0000000000006026                 jz      short loc_6045
.text:0000000000006028                 cmp     qword ptr [rax+58h], 0
.text:000000000000602D                 js      short loc_6045
.text:000000000000602F                 mov     rcx, [rsi]
.text:0000000000006032                 cmp     qword ptr [rcx+10h], 0
.text:0000000000006037                 jz      short loc_60B3
.text:0000000000006039                 mov     rsi, [rdx+80h]
.text:0000000000006040                 cmp     [rcx], rsi
.text:0000000000006043                 jz      short loc_6090
.text:0000000000006045
.text:0000000000006045 loc_6045:                               ; CODE XREF: leave_dir_isra_12+26↑j
.text:0000000000006045                                         ; leave_dir_isra_12+2D↑j ...
.text:0000000000006045                 mov     rax, [rsp+28h+var_10]
.text:000000000000604A                 xor     rax, fs:28h
.text:0000000000006053                 jnz     short loc_60AE
.text:0000000000006055                 add     rsp, 28h
.text:0000000000006059                 retn
.text:0000000000006059 ; ---------------------------------------------------------------------------
.text:000000000000605A                 align 20h
.text:0000000000006060
.text:0000000000006060 loc_6060:                               ; CODE XREF: leave_dir_isra_12+1D↑j
.text:0000000000006060                 mov     rax, [rdx+78h]
.text:0000000000006064                 mov     rdi, [rcx]
.text:0000000000006067                 mov     rsi, rsp
.text:000000000000606A                 mov     [rsp+28h+var_28], rax
.text:000000000000606E                 mov     rax, [rdx+80h]
.text:0000000000006075                 mov     [rsp+28h+var_20], rax
.text:000000000000607A                 call    hash_delete
.text:000000000000607F                 test    rax, rax
.text:0000000000006082                 jz      short loc_60B3
.text:0000000000006084                 mov     rdi, rax        ; ptr
.text:0000000000006087                 call    free
.text:000000000000608C                 jmp     short loc_6045
.text:000000000000608C ; ---------------------------------------------------------------------------
.text:000000000000608E                 align 10h
.text:0000000000006090
.text:0000000000006090 loc_6090:                               ; CODE XREF: leave_dir_isra_12+43↑j
.text:0000000000006090                 mov     rsi, [rdx+78h]
.text:0000000000006094                 cmp     [rcx+8], rsi
.text:0000000000006098                 jnz     short loc_6045
.text:000000000000609A                 mov     rdx, [rax+78h]
.text:000000000000609E                 mov     rax, [rax+80h]
.text:00000000000060A5                 mov     [rcx+8], rdx
.text:00000000000060A9                 mov     [rcx], rax
.text:00000000000060AC                 jmp     short loc_6045
.text:00000000000060AE ; ---------------------------------------------------------------------------
.text:00000000000060AE
.text:00000000000060AE loc_60AE:                               ; CODE XREF: leave_dir_isra_12+53↑j
.text:00000000000060AE                 call    ___stack_chk_fail
.text:00000000000060B3 ; ---------------------------------------------------------------------------
.text:00000000000060B3
.text:00000000000060B3 loc_60B3:                               ; CODE XREF: leave_dir_isra_12+37↑j
.text:00000000000060B3                                         ; leave_dir_isra_12+82↑j
.text:00000000000060B3                 call    _abort
.text:00000000000060B3 ; } // starts at 6000
.text:00000000000060B3 leave_dir_isra_12 endp
.text:00000000000060B3
.text:00000000000060B3 ; ---------------------------------------------------------------------------
.text:00000000000060B8                 align 20h
.text:00000000000060C0
.text:00000000000060C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000060C0
.text:00000000000060C0
.text:00000000000060C0 fts_build       proc near               ; CODE XREF: rpl_fts_read+420↓p
.text:00000000000060C0                                         ; rpl_fts_read+619↓p ...
.text:00000000000060C0
.text:00000000000060C0 var_A0          = qword ptr -0A0h
.text:00000000000060C0 ptr             = qword ptr -98h
.text:00000000000060C0 var_90          = qword ptr -90h
.text:00000000000060C0 var_88          = qword ptr -88h
.text:00000000000060C0 var_80          = qword ptr -80h
.text:00000000000060C0 var_78          = qword ptr -78h
.text:00000000000060C0 var_70          = qword ptr -70h
.text:00000000000060C0 dest            = qword ptr -68h
.text:00000000000060C0 var_60          = qword ptr -60h
.text:00000000000060C0 var_58          = qword ptr -58h
.text:00000000000060C0 var_50          = dword ptr -50h
.text:00000000000060C0 var_4B          = byte ptr -4Bh
.text:00000000000060C0 var_4A          = byte ptr -4Ah
.text:00000000000060C0 var_49          = byte ptr -49h
.text:00000000000060C0 fd              = dword ptr -44h
.text:00000000000060C0 var_40          = qword ptr -40h
.text:00000000000060C0
.text:00000000000060C0 ; __unwind {
.text:00000000000060C0                 push    r15
.text:00000000000060C2                 push    r14
.text:00000000000060C4                 mov     r15, rdi
.text:00000000000060C7                 push    r13
.text:00000000000060C9                 push    r12
.text:00000000000060CB                 push    rbp
.text:00000000000060CC                 push    rbx
.text:00000000000060CD                 sub     rsp, 78h
.text:00000000000060D1                 mov     rbp, [rdi]
.text:00000000000060D4                 mov     rax, fs:28h
.text:00000000000060DD                 mov     [rsp+0A8h+var_40], rax
.text:00000000000060E2                 xor     eax, eax
.text:00000000000060E4                 mov     [rsp+0A8h+var_50], esi
.text:00000000000060E8                 mov     rax, [rbp+18h]
.text:00000000000060EC                 test    rax, rax
.text:00000000000060EF                 mov     [rsp+0A8h+var_58], rax
.text:00000000000060F4                 jz      loc_6530
.text:00000000000060FA                 mov     rdi, rax        ; dirp
.text:00000000000060FD                 call    _dirfd
.text:0000000000006102                 test    eax, eax
.text:0000000000006104                 mov     [rsp+0A8h+fd], eax
.text:0000000000006108                 js      loc_6660
.text:000000000000610E                 cmp     qword ptr [r15+40h], 0
.text:0000000000006113                 jz      loc_68E8
.text:0000000000006119                 mov     [rsp+0A8h+var_70], 0FFFFFFFFFFFFFFFFh
.text:0000000000006122
.text:0000000000006122 loc_6122:                               ; CODE XREF: fts_build+89F↓j
.text:0000000000006122                 mov     edi, [r15+48h]
.text:0000000000006126                 mov     [rsp+0A8h+var_49], 1
.text:000000000000612B
.text:000000000000612B loc_612B:                               ; CODE XREF: fts_build+57D↓j
.text:000000000000612B                                         ; fts_build+83A↓j ...
.text:000000000000612B                 mov     rcx, [rbp+48h]
.text:000000000000612F                 mov     rdx, [rbp+38h]
.text:0000000000006133                 mov     [rsp+0A8h+dest], 0
.text:000000000000613C                 cmp     byte ptr [rdx+rcx-1], 2Fh ; '/'
.text:0000000000006141                 lea     rax, [rcx-1]
.text:0000000000006145                 cmovnz  rax, rcx
.text:0000000000006149                 and     edi, 4
.text:000000000000614C                 mov     [rsp+0A8h+var_60], rax
.text:0000000000006151                 jz      short loc_6163
.text:0000000000006153                 add     rax, [r15+20h]
.text:0000000000006157                 lea     rbx, [rax+1]
.text:000000000000615B                 mov     byte ptr [rax], 2Fh ; '/'
.text:000000000000615E                 mov     [rsp+0A8h+dest], rbx
.text:0000000000006163
.text:0000000000006163 loc_6163:                               ; CODE XREF: fts_build+91↑j
.text:0000000000006163                 mov     rax, [rsp+0A8h+var_60]
.text:0000000000006168                 mov     rbx, [r15+30h]
.text:000000000000616C                 mov     [rsp+0A8h+var_4A], 0
.text:0000000000006171                 mov     [rsp+0A8h+var_4B], 0
.text:0000000000006176                 mov     [rsp+0A8h+var_A0], 0
.text:000000000000617F                 mov     [rsp+0A8h+ptr], 0
.text:0000000000006188                 add     rax, 1
.text:000000000000618C                 mov     [rsp+0A8h+var_88], rbp
.text:0000000000006191                 sub     rbx, rax
.text:0000000000006194                 mov     [rsp+0A8h+var_90], rax
.text:0000000000006199                 mov     rax, [rbp+58h]
.text:000000000000619D                 mov     [rsp+0A8h+var_80], rbx
.text:00000000000061A2                 xor     ebx, ebx
.text:00000000000061A4                 add     rax, 1
.text:00000000000061A8                 mov     [rsp+0A8h+var_78], rax
.text:00000000000061AD                 jmp     loc_628F
.text:00000000000061AD ; ---------------------------------------------------------------------------
.text:00000000000061B2                 align 8
.text:00000000000061B8
.text:00000000000061B8 loc_61B8:                               ; CODE XREF: fts_build+242↓j
.text:00000000000061B8                                         ; fts_build+2A6↓j
.text:00000000000061B8                 mov     r9, r14
.text:00000000000061BB                 add     r9, [rsp+0A8h+var_90]
.text:00000000000061C0                 jb      loc_6A20
.text:00000000000061C6                 mov     rax, [rsp+0A8h+var_78]
.text:00000000000061CB                 lea     rsi, [r13+108h] ; src
.text:00000000000061D2                 mov     [r13+58h], rax
.text:00000000000061D6                 mov     rax, [r15]
.text:00000000000061D9                 mov     [r13+48h], r9
.text:00000000000061DD                 mov     [r13+8], rax
.text:00000000000061E1                 mov     rax, [rbp+0]
.text:00000000000061E5                 mov     [r13+80h], rax
.text:00000000000061EC                 mov     eax, [r15+48h]
.text:00000000000061F0                 test    al, 4
.text:00000000000061F2                 jnz     loc_6460
.text:00000000000061F8                 mov     [r13+30h], rsi
.text:00000000000061FC
.text:00000000000061FC loc_61FC:                               ; CODE XREF: fts_build+3BE↓j
.text:00000000000061FC                 cmp     qword ptr [r15+40h], 0
.text:0000000000006201                 jz      short loc_620C
.text:0000000000006203                 test    ah, 4
.text:0000000000006206                 jz      loc_6508
.text:000000000000620C
.text:000000000000620C loc_620C:                               ; CODE XREF: fts_build+141↑j
.text:000000000000620C                 movzx   edx, byte ptr [rbp+12h]
.text:0000000000006210                 and     eax, 18h
.text:0000000000006213                 mov     esi, edx
.text:0000000000006215                 sub     edx, 1
.text:0000000000006218                 cmp     eax, 18h
.text:000000000000621B                 jz      loc_64D0
.text:0000000000006221
.text:0000000000006221 loc_6221:                               ; CODE XREF: fts_build+416↓j
.text:0000000000006221                 mov     ecx, 0Bh
.text:0000000000006226                 cmp     edx, 0Bh
.text:0000000000006229                 mov     [r13+70h], cx
.text:000000000000622E                 ja      loc_6498
.text:0000000000006234                 lea     rax, CSWTCH_53
.text:000000000000623B                 mov     eax, [rax+rdx*4]
.text:000000000000623E                 mov     [r13+90h], eax
.text:0000000000006245                 mov     eax, 2
.text:000000000000624A
.text:000000000000624A loc_624A:                               ; CODE XREF: fts_build+3E8↓j
.text:000000000000624A                                         ; fts_build+43F↓j ...
.text:000000000000624A                 mov     [r13+0A8h], rax
.text:0000000000006251
.text:0000000000006251 loc_6251:                               ; CODE XREF: fts_build+45A↓j
.text:0000000000006251                 cmp     [rsp+0A8h+ptr], 0
.text:0000000000006257                 mov     qword ptr [r13+10h], 0
.text:000000000000625F                 jz      loc_6488
.text:0000000000006265                 mov     rax, [rsp+0A8h+var_A0]
.text:000000000000626A                 mov     [rax+10h], r13
.text:000000000000626E
.text:000000000000626E loc_626E:                               ; CODE XREF: fts_build+3CD↓j
.text:000000000000626E                 cmp     rbx, 2710h
.text:0000000000006275                 jz      loc_6370
.text:000000000000627B
.text:000000000000627B loc_627B:                               ; CODE XREF: fts_build+2B5↓j
.text:000000000000627B                                         ; fts_build+645↓j
.text:000000000000627B                 add     rbx, 1
.text:000000000000627F                 cmp     rbx, [rsp+0A8h+var_70]
.text:0000000000006284                 jnb     loc_63C8
.text:000000000000628A
.text:000000000000628A loc_628A:                               ; CODE XREF: fts_build+2FD↓j
.text:000000000000628A                                         ; fts_build+406↓j
.text:000000000000628A                 mov     [rsp+0A8h+var_A0], r13
.text:000000000000628F
.text:000000000000628F loc_628F:                               ; CODE XREF: fts_build+ED↑j
.text:000000000000628F                 mov     rax, [rsp+0A8h+var_88]
.text:0000000000006294                 mov     r13, [rax+18h]
.text:0000000000006298                 test    r13, r13
.text:000000000000629B                 jz      loc_6768
.text:00000000000062A1                 call    ___errno_location
.text:00000000000062A6                 mov     rdi, r13        ; dirp
.text:00000000000062A9                 mov     dword ptr [rax], 0
.text:00000000000062AF                 mov     r12, rax
.text:00000000000062B2                 call    _readdir
.text:00000000000062B7                 test    rax, rax
.text:00000000000062BA                 mov     rbp, rax
.text:00000000000062BD                 jz      loc_6840
.text:00000000000062C3                 test    byte ptr [r15+48h], 20h
.text:00000000000062C8                 jnz     short loc_62D4
.text:00000000000062CA                 cmp     byte ptr [rax+13h], 2Eh ; '.'
.text:00000000000062CE                 jz      loc_64B0
.text:00000000000062D4
.text:00000000000062D4 loc_62D4:                               ; CODE XREF: fts_build+208↑j
.text:00000000000062D4                                         ; fts_build+3FB↓j
.text:00000000000062D4                 lea     r13, [rbp+13h]
.text:00000000000062D8                 mov     rdi, r13        ; s
.text:00000000000062DB                 call    _strlen
.text:00000000000062E0                 mov     rsi, r13
.text:00000000000062E3                 mov     rdx, rax
.text:00000000000062E6                 mov     rdi, r15
.text:00000000000062E9                 mov     r14, rax
.text:00000000000062EC                 call    fts_alloc
.text:00000000000062F1                 test    rax, rax
.text:00000000000062F4                 mov     r13, rax
.text:00000000000062F7                 jz      loc_6710
.text:00000000000062FD                 cmp     [rsp+0A8h+var_80], r14
.text:0000000000006302                 ja      loc_61B8
.text:0000000000006308                 mov     rax, [r15+20h]
.text:000000000000630C                 lea     rsi, [r15+30h]
.text:0000000000006310                 lea     rdi, [r15+20h]
.text:0000000000006314                 mov     [rsp+0A8h+var_80], rax
.text:0000000000006319                 mov     rax, [rsp+0A8h+var_60]
.text:000000000000631E                 lea     rdx, [rax+r14+2]
.text:0000000000006323                 call    fts_palloc_isra_2
.text:0000000000006328                 test    al, al
.text:000000000000632A                 jz      loc_6710
.text:0000000000006330                 mov     rdx, [r15+20h]
.text:0000000000006334                 cmp     rdx, [rsp+0A8h+var_80]
.text:0000000000006339                 jz      loc_6520
.text:000000000000633F                 add     rdx, [rsp+0A8h+var_90]
.text:0000000000006344                 test    byte ptr [r15+48h], 4
.text:0000000000006349                 cmovz   rdx, [rsp+0A8h+dest]
.text:000000000000634F                 mov     [rsp+0A8h+dest], rdx
.text:0000000000006354
.text:0000000000006354 loc_6354:                               ; CODE XREF: fts_build+465↓j
.text:0000000000006354                 mov     rcx, [r15+30h]
.text:0000000000006358                 sub     rcx, [rsp+0A8h+var_90]
.text:000000000000635D                 mov     [rsp+0A8h+var_4B], al
.text:0000000000006361                 mov     [rsp+0A8h+var_80], rcx
.text:0000000000006366                 jmp     loc_61B8
.text:0000000000006366 ; ---------------------------------------------------------------------------
.text:000000000000636B                 align 10h
.text:0000000000006370
.text:0000000000006370 loc_6370:                               ; CODE XREF: fts_build+1B5↑j
.text:0000000000006370                 cmp     qword ptr [r15+40h], 0
.text:0000000000006375                 jnz     loc_627B
.text:000000000000637B                 mov     esi, [rsp+0A8h+fd]
.text:000000000000637F                 mov     rdi, [rsp+0A8h+var_88]
.text:0000000000006384                 call    filesystem_type
.text:0000000000006389                 cmp     rax, 1021994h
.text:000000000000638F                 jz      loc_6700
.text:0000000000006395                 mov     ecx, 0FF534D42h
.text:000000000000639A                 cmp     rax, rcx
.text:000000000000639D                 jz      loc_6700
.text:00000000000063A3                 cmp     rax, 6969h
.text:00000000000063A9                 jz      loc_6700
.text:00000000000063AF                 add     rbx, 1
.text:00000000000063B3                 cmp     rbx, [rsp+0A8h+var_70]
.text:00000000000063B8                 mov     [rsp+0A8h+var_4A], 1
.text:00000000000063BD                 jb      loc_628A
.text:00000000000063C3                 nop     dword ptr [rax+rax+00h]
.text:00000000000063C8
.text:00000000000063C8 loc_63C8:                               ; CODE XREF: fts_build+1C4↑j
.text:00000000000063C8                 cmp     [rsp+0A8h+var_4B], 0
.text:00000000000063CD                 mov     rbp, [rsp+0A8h+var_88]
.text:00000000000063D2                 jz      loc_6776
.text:00000000000063D8
.text:00000000000063D8 loc_63D8:                               ; CODE XREF: fts_build+6B0↓j
.text:00000000000063D8                 mov     rax, [r15+8]
.text:00000000000063DC                 mov     rcx, [r15+20h]
.text:00000000000063E0                 test    rax, rax
.text:00000000000063E3                 jz      short loc_6410
.text:00000000000063E5                 nop     dword ptr [rax]
.text:00000000000063E8
.text:00000000000063E8 loc_63E8:                               ; CODE XREF: fts_build+34E↓j
.text:00000000000063E8                 mov     rdx, [rax+30h]
.text:00000000000063EC                 lea     rsi, [rax+108h]
.text:00000000000063F3                 cmp     rdx, rsi
.text:00000000000063F6                 jz      short loc_6403
.text:00000000000063F8                 sub     rdx, [rax+38h]
.text:00000000000063FC                 add     rdx, rcx
.text:00000000000063FF                 mov     [rax+30h], rdx
.text:0000000000006403
.text:0000000000006403 loc_6403:                               ; CODE XREF: fts_build+336↑j
.text:0000000000006403                 mov     [rax+38h], rcx
.text:0000000000006407                 mov     rax, [rax+10h]
.text:000000000000640B                 test    rax, rax
.text:000000000000640E                 jnz     short loc_63E8
.text:0000000000006410
.text:0000000000006410 loc_6410:                               ; CODE XREF: fts_build+323↑j
.text:0000000000006410                 mov     rax, [rsp+0A8h+ptr]
.text:0000000000006415                 jmp     short loc_6423
.text:0000000000006415 ; ---------------------------------------------------------------------------
.text:0000000000006417                 align 20h
.text:0000000000006420
.text:0000000000006420 loc_6420:                               ; CODE XREF: fts_build+394↓j
.text:0000000000006420                                         ; fts_build+39A↓j
.text:0000000000006420                 mov     rax, rdx
.text:0000000000006423
.text:0000000000006423 loc_6423:                               ; CODE XREF: fts_build+355↑j
.text:0000000000006423                 cmp     qword ptr [rax+58h], 0
.text:0000000000006428                 js      loc_6776
.text:000000000000642E                 mov     rdx, [rax+30h]
.text:0000000000006432                 lea     rsi, [rax+108h]
.text:0000000000006439                 cmp     rdx, rsi
.text:000000000000643C                 jz      short loc_6449
.text:000000000000643E                 sub     rdx, [rax+38h]
.text:0000000000006442                 add     rdx, rcx
.text:0000000000006445                 mov     [rax+30h], rdx
.text:0000000000006449
.text:0000000000006449 loc_6449:                               ; CODE XREF: fts_build+37C↑j
.text:0000000000006449                 mov     rdx, [rax+10h]
.text:000000000000644D                 mov     [rax+38h], rcx
.text:0000000000006451                 test    rdx, rdx
.text:0000000000006454                 jnz     short loc_6420
.text:0000000000006456                 mov     rdx, [rax+8]
.text:000000000000645A                 jmp     short loc_6420
.text:000000000000645A ; ---------------------------------------------------------------------------
.text:000000000000645C                 align 20h
.text:0000000000006460
.text:0000000000006460 loc_6460:                               ; CODE XREF: fts_build+132↑j
.text:0000000000006460                 mov     rax, [r13+38h]
.text:0000000000006464                 mov     rdi, [rsp+0A8h+dest] ; dest
.text:0000000000006469                 mov     [r13+30h], rax
.text:000000000000646D                 mov     rax, [r13+60h]
.text:0000000000006471                 lea     rdx, [rax+1]    ; n
.text:0000000000006475                 call    _memmove
.text:000000000000647A                 mov     eax, [r15+48h]
.text:000000000000647E                 jmp     loc_61FC
.text:000000000000647E ; ---------------------------------------------------------------------------
.text:0000000000006483                 align 8
.text:0000000000006488
.text:0000000000006488 loc_6488:                               ; CODE XREF: fts_build+19F↑j
.text:0000000000006488                 mov     [rsp+0A8h+ptr], r13
.text:000000000000648D                 jmp     loc_626E
.text:000000000000648D ; ---------------------------------------------------------------------------
.text:0000000000006492                 align 8
.text:0000000000006498
.text:0000000000006498 loc_6498:                               ; CODE XREF: fts_build+16E↑j
.text:0000000000006498                 mov     dword ptr [r13+90h], 0
.text:00000000000064A3                 mov     eax, 2
.text:00000000000064A8                 jmp     loc_624A
.text:00000000000064A8 ; ---------------------------------------------------------------------------
.text:00000000000064AD                 align 10h
.text:00000000000064B0
.text:00000000000064B0 loc_64B0:                               ; CODE XREF: fts_build+20E↑j
.text:00000000000064B0                 cmp     byte ptr [rax+14h], 0
.text:00000000000064B4                 jz      short loc_64C1
.text:00000000000064B6                 cmp     word ptr [rax+14h], 2Eh ; '.'
.text:00000000000064BB                 jnz     loc_62D4
.text:00000000000064C1
.text:00000000000064C1 loc_64C1:                               ; CODE XREF: fts_build+3F4↑j
.text:00000000000064C1                 mov     r13, [rsp+0A8h+var_A0]
.text:00000000000064C6                 jmp     loc_628A
.text:00000000000064C6 ; ---------------------------------------------------------------------------
.text:00000000000064CB                 align 10h
.text:00000000000064D0
.text:00000000000064D0 loc_64D0:                               ; CODE XREF: fts_build+15B↑j
.text:00000000000064D0                 and     esi, 0FBh
.text:00000000000064D6                 jz      loc_6221
.text:00000000000064DC                 mov     eax, 0Bh
.text:00000000000064E1                 cmp     edx, 0Bh
.text:00000000000064E4                 mov     [r13+70h], ax
.text:00000000000064E9                 jbe     loc_6A76
.text:00000000000064EF                 mov     dword ptr [r13+90h], 0
.text:00000000000064FA                 mov     eax, 1
.text:00000000000064FF                 jmp     loc_624A
.text:00000000000064FF ; ---------------------------------------------------------------------------
.text:0000000000006504                 align 8
.text:0000000000006508
.text:0000000000006508 loc_6508:                               ; CODE XREF: fts_build+146↑j
.text:0000000000006508                 xor     edx, edx
.text:000000000000650A                 mov     rsi, r13
.text:000000000000650D                 mov     rdi, r15
.text:0000000000006510                 call    fts_stat
.text:0000000000006515                 mov     [r13+70h], ax
.text:000000000000651A                 jmp     loc_6251
.text:000000000000651A ; ---------------------------------------------------------------------------
.text:000000000000651F                 align 20h
.text:0000000000006520
.text:0000000000006520 loc_6520:                               ; CODE XREF: fts_build+279↑j
.text:0000000000006520                 movzx   eax, [rsp+0A8h+var_4B]
.text:0000000000006525                 jmp     loc_6354
.text:0000000000006525 ; ---------------------------------------------------------------------------
.text:000000000000652A                 align 10h
.text:0000000000006530
.text:0000000000006530 loc_6530:                               ; CODE XREF: fts_build+34↑j
.text:0000000000006530                 mov     eax, [rdi+48h]
.text:0000000000006533                 mov     edx, eax
.text:0000000000006535                 and     edx, 10h
.text:0000000000006538                 jz      short loc_6547
.text:000000000000653A                 test    al, 1
.text:000000000000653C                 mov     edx, 20000h
.text:0000000000006541                 jnz     loc_6648
.text:0000000000006547
.text:0000000000006547 loc_6547:                               ; CODE XREF: fts_build+478↑j
.text:0000000000006547                                         ; fts_build+595↓j
.text:0000000000006547                 and     eax, 204h
.text:000000000000654C                 mov     rsi, [rbp+30h]
.text:0000000000006550                 mov     edi, 0FFFFFF9Ch
.text:0000000000006555                 cmp     eax, 200h
.text:000000000000655A                 jnz     short loc_6560
.text:000000000000655C                 mov     edi, [r15+2Ch]
.text:0000000000006560
.text:0000000000006560 loc_6560:                               ; CODE XREF: fts_build+49A↑j
.text:0000000000006560                 lea     rcx, [rsp+0A8h+fd]
.text:0000000000006565                 call    opendirat
.text:000000000000656A                 test    rax, rax
.text:000000000000656D                 mov     [rbp+18h], rax
.text:0000000000006571                 jz      loc_6890
.text:0000000000006577                 cmp     word ptr [rbp+70h], 0Bh
.text:000000000000657C                 jz      loc_6910
.text:0000000000006582                 mov     edi, [r15+48h]
.text:0000000000006586                 test    edi, 100h
.text:000000000000658C                 jnz     loc_66B0
.text:0000000000006592
.text:0000000000006592 loc_6592:                               ; CODE XREF: fts_build+61D↓j
.text:0000000000006592                                         ; fts_build+861↓j
.text:0000000000006592                 cmp     qword ptr [r15+40h], 1
.text:0000000000006597                 sbb     rax, rax
.text:000000000000659A                 and     eax, 186A1h
.text:000000000000659F                 sub     rax, 1
.text:00000000000065A3                 cmp     [rsp+0A8h+var_50], 2
.text:00000000000065A8                 mov     [rsp+0A8h+var_70], rax
.text:00000000000065AD                 jz      loc_6900
.text:00000000000065B3                 mov     edx, [r15+48h]
.text:00000000000065B7                 mov     eax, [rsp+0A8h+fd]
.text:00000000000065BB                 and     edx, 38h
.text:00000000000065BE                 cmp     edx, 18h
.text:00000000000065C1                 jz      loc_6964
.text:00000000000065C7
.text:00000000000065C7 loc_65C7:                               ; CODE XREF: fts_build+8AC↓j
.text:00000000000065C7                                         ; fts_build+8C4↓j
.text:00000000000065C7                 cmp     [rsp+0A8h+var_50], 3
.text:00000000000065CC                 mov     r12d, 1
.text:00000000000065D2                 setz    bl
.text:00000000000065D5
.text:00000000000065D5 loc_65D5:                               ; CODE XREF: fts_build+955↓j
.text:00000000000065D5                 test    byte ptr [r15+49h], 2
.text:00000000000065DA                 jnz     loc_69BC
.text:00000000000065E0
.text:00000000000065E0 loc_65E0:                               ; CODE XREF: fts_build+913↓j
.text:00000000000065E0                 test    eax, eax
.text:00000000000065E2                 jns     loc_6948
.text:00000000000065E8
.text:00000000000065E8 loc_65E8:                               ; CODE XREF: fts_build+899↓j
.text:00000000000065E8                 test    bl, bl
.text:00000000000065EA                 jz      short loc_65FB
.text:00000000000065EC                 test    r12b, r12b
.text:00000000000065EF                 jz      short loc_65FB
.text:00000000000065F1                 call    ___errno_location
.text:00000000000065F6                 mov     eax, [rax]
.text:00000000000065F8                 mov     [rbp+40h], eax
.text:00000000000065FB
.text:00000000000065FB loc_65FB:                               ; CODE XREF: fts_build+52A↑j
.text:00000000000065FB                                         ; fts_build+52F↑j
.text:00000000000065FB                 or      word ptr [rbp+72h], 1
.text:0000000000006600                 mov     rdi, [rbp+18h]  ; dirp
.text:0000000000006604                 call    _closedir
.text:0000000000006609                 mov     edi, [r15+48h]
.text:000000000000660D                 mov     qword ptr [rbp+18h], 0
.text:0000000000006615                 test    edi, 200h
.text:000000000000661B                 jz      short loc_6630
.text:000000000000661D                 mov     eax, [rsp+0A8h+fd]
.text:0000000000006621                 test    eax, eax
.text:0000000000006623                 js      short loc_6630
.text:0000000000006625                 mov     edi, eax        ; fd
.text:0000000000006627                 call    _close
.text:000000000000662C                 mov     edi, [r15+48h]
.text:0000000000006630
.text:0000000000006630 loc_6630:                               ; CODE XREF: fts_build+55B↑j
.text:0000000000006630                                         ; fts_build+563↑j
.text:0000000000006630                 mov     qword ptr [rbp+18h], 0
.text:0000000000006638                 mov     [rsp+0A8h+var_49], 0
.text:000000000000663D                 jmp     loc_612B
.text:000000000000663D ; ---------------------------------------------------------------------------
.text:0000000000006642                 align 8
.text:0000000000006648
.text:0000000000006648 loc_6648:                               ; CODE XREF: fts_build+481↑j
.text:0000000000006648                 xor     edx, edx
.text:000000000000664A                 cmp     qword ptr [rbp+58h], 0
.text:000000000000664F                 setnz   dl
.text:0000000000006652                 shl     edx, 11h
.text:0000000000006655                 jmp     loc_6547
.text:0000000000006655 ; ---------------------------------------------------------------------------
.text:000000000000665A                 align 20h
.text:0000000000006660
.text:0000000000006660 loc_6660:                               ; CODE XREF: fts_build+48↑j
.text:0000000000006660                 mov     rdi, [rbp+18h]  ; dirp
.text:0000000000006664                 call    _closedir
.text:0000000000006669                 cmp     [rsp+0A8h+var_50], 3
.text:000000000000666E                 mov     qword ptr [rbp+18h], 0
.text:0000000000006676                 jz      loc_689B
.text:000000000000667C
.text:000000000000667C loc_667C:                               ; CODE XREF: fts_build+7D5↓j
.text:000000000000667C                                         ; fts_build+7F0↓j
.text:000000000000667C                 mov     [rsp+0A8h+ptr], 0
.text:0000000000006685
.text:0000000000006685 loc_6685:                               ; CODE XREF: fts_build+637↓j
.text:0000000000006685                                         ; fts_build+69C↓j ...
.text:0000000000006685                 mov     rbx, [rsp+0A8h+var_40]
.text:000000000000668A                 xor     rbx, fs:28h
.text:0000000000006693                 mov     rax, [rsp+0A8h+ptr]
.text:0000000000006698                 jnz     loc_6A71
.text:000000000000669E                 add     rsp, 78h
.text:00000000000066A2                 pop     rbx
.text:00000000000066A3                 pop     rbp
.text:00000000000066A4                 pop     r12
.text:00000000000066A6                 pop     r13
.text:00000000000066A8                 pop     r14
.text:00000000000066AA                 pop     r15
.text:00000000000066AC                 retn
.text:00000000000066AC ; ---------------------------------------------------------------------------
.text:00000000000066AD                 align 10h
.text:00000000000066B0
.text:00000000000066B0 loc_66B0:                               ; CODE XREF: fts_build+4CC↑j
.text:00000000000066B0                 lea     rbx, [r15+58h]
.text:00000000000066B4                 mov     rdx, rbp
.text:00000000000066B7                 mov     rsi, rbx
.text:00000000000066BA                 call    leave_dir_isra_12
.text:00000000000066BF                 xor     edx, edx
.text:00000000000066C1                 mov     rsi, rbp
.text:00000000000066C4                 mov     rdi, r15
.text:00000000000066C7                 call    fts_stat
.text:00000000000066CC                 mov     edi, [r15+48h]
.text:00000000000066D0                 mov     rdx, rbp
.text:00000000000066D3                 mov     rsi, rbx
.text:00000000000066D6                 call    enter_dir_isra_10
.text:00000000000066DB                 test    al, al
.text:00000000000066DD                 jnz     loc_6592
.text:00000000000066E3                 call    ___errno_location
.text:00000000000066E8                 mov     [rsp+0A8h+ptr], 0
.text:00000000000066F1                 mov     dword ptr [rax], 0Ch
.text:00000000000066F7                 jmp     short loc_6685
.text:00000000000066F7 ; ---------------------------------------------------------------------------
.text:00000000000066F9                 align 20h
.text:0000000000006700
.text:0000000000006700 loc_6700:                               ; CODE XREF: fts_build+2CF↑j
.text:0000000000006700                                         ; fts_build+2DD↑j ...
.text:0000000000006700                 mov     [rsp+0A8h+var_4A], 0
.text:0000000000006705                 jmp     loc_627B
.text:0000000000006705 ; ---------------------------------------------------------------------------
.text:000000000000670A                 align 10h
.text:0000000000006710
.text:0000000000006710 loc_6710:                               ; CODE XREF: fts_build+237↑j
.text:0000000000006710                                         ; fts_build+26A↑j
.text:0000000000006710                 mov     rdi, r13        ; ptr
.text:0000000000006713                 mov     rbp, [rsp+0A8h+var_88]
.text:0000000000006718                 mov     ebx, [r12]
.text:000000000000671C                 call    free
.text:0000000000006721                 mov     rdi, [rsp+0A8h+ptr] ; ptr
.text:0000000000006726                 call    fts_lfree
.text:000000000000672B                 mov     rdi, [rbp+18h]  ; dirp
.text:000000000000672F                 call    _closedir
.text:0000000000006734                 mov     r9d, 7
.text:000000000000673A                 mov     qword ptr [rbp+18h], 0
.text:0000000000006742                 mov     [rsp+0A8h+ptr], 0
.text:000000000000674B                 mov     [rbp+70h], r9w
.text:0000000000006750                 or      dword ptr [r15+48h], 2000h
.text:0000000000006758                 mov     [r12], ebx
.text:000000000000675C                 jmp     loc_6685
.text:000000000000675C ; ---------------------------------------------------------------------------
.text:0000000000006761                 align 8
.text:0000000000006768
.text:0000000000006768 loc_6768:                               ; CODE XREF: fts_build+1DB↑j
.text:0000000000006768                 mov     rbp, rax
.text:000000000000676B
.text:000000000000676B loc_676B:                               ; CODE XREF: fts_build+7B5↓j
.text:000000000000676B                                         ; fts_build+7C8↓j
.text:000000000000676B                 cmp     [rsp+0A8h+var_4B], 0
.text:0000000000006770                 jnz     loc_63D8
.text:0000000000006776
.text:0000000000006776 loc_6776:                               ; CODE XREF: fts_build+312↑j
.text:0000000000006776                                         ; fts_build+368↑j
.text:0000000000006776                 test    byte ptr [r15+48h], 4
.text:000000000000677B                 jz      short loc_679B
.text:000000000000677D                 mov     rax, [rsp+0A8h+var_90]
.text:0000000000006782                 cmp     [r15+30h], rax
.text:0000000000006786                 jz      short loc_678D
.text:0000000000006788                 test    rbx, rbx
.text:000000000000678B                 jnz     short loc_6793
.text:000000000000678D
.text:000000000000678D loc_678D:                               ; CODE XREF: fts_build+6C6↑j
.text:000000000000678D                 sub     [rsp+0A8h+dest], 1
.text:0000000000006793
.text:0000000000006793 loc_6793:                               ; CODE XREF: fts_build+6CB↑j
.text:0000000000006793                 mov     rax, [rsp+0A8h+dest]
.text:0000000000006798                 mov     byte ptr [rax], 0
.text:000000000000679B
.text:000000000000679B loc_679B:                               ; CODE XREF: fts_build+6BB↑j
.text:000000000000679B                 cmp     [rsp+0A8h+var_58], 0
.text:00000000000067A1                 jnz     short loc_6810
.text:00000000000067A3                 cmp     [rsp+0A8h+var_49], 0
.text:00000000000067A8                 jz      short loc_6810
.text:00000000000067AA                 cmp     [rsp+0A8h+var_50], 1
.text:00000000000067AF                 jz      short loc_67F0
.text:00000000000067B1                 test    rbx, rbx
.text:00000000000067B4                 jz      short loc_67F0
.text:00000000000067B6
.text:00000000000067B6 loc_67B6:                               ; CODE XREF: fts_build+753↓j
.text:00000000000067B6                 cmp     [rsp+0A8h+var_4A], 0
.text:00000000000067BB                 jnz     loc_68B8
.text:00000000000067C1                 cmp     qword ptr [r15+40h], 0
.text:00000000000067C6                 jz      loc_6685
.text:00000000000067CC                 cmp     rbx, 1
.text:00000000000067D0                 jz      loc_6685
.text:00000000000067D6                 mov     rsi, [rsp+0A8h+ptr]
.text:00000000000067DB                 mov     rdx, rbx
.text:00000000000067DE                 mov     rdi, r15
.text:00000000000067E1                 call    fts_sort
.text:00000000000067E6                 mov     [rsp+0A8h+ptr], rax
.text:00000000000067EB                 jmp     loc_6685
.text:00000000000067F0 ; ---------------------------------------------------------------------------
.text:00000000000067F0
.text:00000000000067F0 loc_67F0:                               ; CODE XREF: fts_build+6EF↑j
.text:00000000000067F0                                         ; fts_build+6F4↑j
.text:00000000000067F0                 cmp     qword ptr [rbp+58h], 0
.text:00000000000067F5                 jnz     loc_6926
.text:00000000000067FB                 mov     rdi, r15
.text:00000000000067FE                 call    restore_initial_cwd
.text:0000000000006803                 test    eax, eax
.text:0000000000006805                 setnz   al
.text:0000000000006808
.text:0000000000006808 loc_6808:                               ; CODE XREF: fts_build+883↓j
.text:0000000000006808                 test    al, al
.text:000000000000680A                 jnz     loc_6993
.text:0000000000006810
.text:0000000000006810 loc_6810:                               ; CODE XREF: fts_build+6E1↑j
.text:0000000000006810                                         ; fts_build+6E8↑j
.text:0000000000006810                 test    rbx, rbx
.text:0000000000006813                 jnz     short loc_67B6
.text:0000000000006815                 cmp     [rsp+0A8h+var_50], 3
.text:000000000000681A                 jz      loc_69D8
.text:0000000000006820
.text:0000000000006820 loc_6820:                               ; CODE XREF: fts_build+920↓j
.text:0000000000006820                                         ; fts_build+92A↓j ...
.text:0000000000006820                 mov     rdi, [rsp+0A8h+ptr] ; ptr
.text:0000000000006825                 call    fts_lfree
.text:000000000000682A                 mov     [rsp+0A8h+ptr], 0
.text:0000000000006833                 jmp     loc_6685
.text:0000000000006833 ; ---------------------------------------------------------------------------
.text:0000000000006838                 align 20h
.text:0000000000006840
.text:0000000000006840 loc_6840:                               ; CODE XREF: fts_build+1FD↑j
.text:0000000000006840                 mov     eax, [r12]
.text:0000000000006844                 mov     rbp, [rsp+0A8h+var_88]
.text:0000000000006849                 test    eax, eax
.text:000000000000684B                 jz      short loc_686E
.text:000000000000684D                 test    rbx, rbx
.text:0000000000006850                 mov     [rbp+40h], eax
.text:0000000000006853                 jnz     loc_6989
.text:0000000000006859                 cmp     [rsp+0A8h+var_58], 0
.text:000000000000685F                 mov     eax, 4
.text:0000000000006864                 jnz     loc_6989
.text:000000000000686A
.text:000000000000686A loc_686A:                               ; CODE XREF: fts_build+8CE↓j
.text:000000000000686A                 mov     [rbp+70h], ax
.text:000000000000686E
.text:000000000000686E loc_686E:                               ; CODE XREF: fts_build+78B↑j
.text:000000000000686E                 mov     rdi, [rbp+18h]  ; dirp
.text:0000000000006872                 test    rdi, rdi
.text:0000000000006875                 jz      loc_676B
.text:000000000000687B                 call    _closedir
.text:0000000000006880                 mov     qword ptr [rbp+18h], 0
.text:0000000000006888                 jmp     loc_676B
.text:0000000000006888 ; ---------------------------------------------------------------------------
.text:000000000000688D                 align 10h
.text:0000000000006890
.text:0000000000006890 loc_6890:                               ; CODE XREF: fts_build+4B1↑j
.text:0000000000006890                 cmp     [rsp+0A8h+var_50], 3
.text:0000000000006895                 jnz     loc_667C
.text:000000000000689B
.text:000000000000689B loc_689B:                               ; CODE XREF: fts_build+5B6↑j
.text:000000000000689B                 mov     r10d, 4
.text:00000000000068A1                 mov     [rbp+70h], r10w
.text:00000000000068A6                 call    ___errno_location
.text:00000000000068AB                 mov     eax, [rax]
.text:00000000000068AD                 mov     [rbp+40h], eax
.text:00000000000068B0                 jmp     loc_667C
.text:00000000000068B0 ; ---------------------------------------------------------------------------
.text:00000000000068B5                 align 8
.text:00000000000068B8
.text:00000000000068B8 loc_68B8:                               ; CODE XREF: fts_build+6FB↑j
.text:00000000000068B8                 lea     rax, fts_compare_ino
.text:00000000000068BF                 mov     rsi, [rsp+0A8h+ptr]
.text:00000000000068C4                 mov     rdx, rbx
.text:00000000000068C7                 mov     rdi, r15
.text:00000000000068CA                 mov     [r15+40h], rax
.text:00000000000068CE                 call    fts_sort
.text:00000000000068D3                 mov     qword ptr [r15+40h], 0
.text:00000000000068DB                 mov     [rsp+0A8h+ptr], rax
.text:00000000000068E0                 jmp     loc_6685
.text:00000000000068E0 ; ---------------------------------------------------------------------------
.text:00000000000068E5                 align 8
.text:00000000000068E8
.text:00000000000068E8 loc_68E8:                               ; CODE XREF: fts_build+53↑j
.text:00000000000068E8                 mov     [rsp+0A8h+var_70], 186A0h
.text:00000000000068F1                 mov     [rsp+0A8h+var_49], 1
.text:00000000000068F6                 mov     edi, [r15+48h]
.text:00000000000068FA                 jmp     loc_612B
.text:00000000000068FA ; ---------------------------------------------------------------------------
.text:00000000000068FF                 align 20h
.text:0000000000006900
.text:0000000000006900 loc_6900:                               ; CODE XREF: fts_build+4ED↑j
.text:0000000000006900                                         ; fts_build+943↓j
.text:0000000000006900                 mov     [rsp+0A8h+var_49], 0
.text:0000000000006905                 mov     edi, [r15+48h]
.text:0000000000006909                 jmp     loc_612B
.text:0000000000006909 ; ---------------------------------------------------------------------------
.text:000000000000690E                 align 10h
.text:0000000000006910
.text:0000000000006910 loc_6910:                               ; CODE XREF: fts_build+4BC↑j
.text:0000000000006910                 xor     edx, edx
.text:0000000000006912                 mov     rsi, rbp
.text:0000000000006915                 mov     rdi, r15
.text:0000000000006918                 call    fts_stat
.text:000000000000691D                 mov     [rbp+70h], ax
.text:0000000000006921                 jmp     loc_6592
.text:0000000000006926 ; ---------------------------------------------------------------------------
.text:0000000000006926
.text:0000000000006926 loc_6926:                               ; CODE XREF: fts_build+735↑j
.text:0000000000006926                 mov     rsi, [rbp+8]
.text:000000000000692A                 lea     rcx, asc_B15A   ; ".."
.text:0000000000006931                 mov     edx, 0FFFFFFFFh
.text:0000000000006936                 mov     rdi, r15
.text:0000000000006939                 call    fts_safe_changedir
.text:000000000000693E                 test    eax, eax
.text:0000000000006940                 setnz   al
.text:0000000000006943                 jmp     loc_6808
.text:0000000000006948 ; ---------------------------------------------------------------------------
.text:0000000000006948
.text:0000000000006948 loc_6948:                               ; CODE XREF: fts_build+522↑j
.text:0000000000006948                 xor     ecx, ecx
.text:000000000000694A                 mov     edx, eax
.text:000000000000694C                 mov     rsi, rbp
.text:000000000000694F                 mov     rdi, r15
.text:0000000000006952                 call    fts_safe_changedir
.text:0000000000006957                 test    eax, eax
.text:0000000000006959                 jnz     loc_65E8
.text:000000000000695F                 jmp     loc_6122
.text:0000000000006964 ; ---------------------------------------------------------------------------
.text:0000000000006964
.text:0000000000006964 loc_6964:                               ; CODE XREF: fts_build+501↑j
.text:0000000000006964                 cmp     qword ptr [rbp+88h], 2
.text:000000000000696C                 jnz     loc_65C7
.text:0000000000006972                 mov     esi, eax
.text:0000000000006974                 mov     rdi, rbp
.text:0000000000006977                 call    leaf_optimization
.text:000000000000697C                 test    eax, eax
.text:000000000000697E                 jnz     short loc_69FE
.text:0000000000006980                 mov     eax, [rsp+0A8h+fd]
.text:0000000000006984                 jmp     loc_65C7
.text:0000000000006989 ; ---------------------------------------------------------------------------
.text:0000000000006989
.text:0000000000006989 loc_6989:                               ; CODE XREF: fts_build+793↑j
.text:0000000000006989                                         ; fts_build+7A4↑j
.text:0000000000006989                 mov     eax, 7
.text:000000000000698E                 jmp     loc_686A
.text:0000000000006993 ; ---------------------------------------------------------------------------
.text:0000000000006993
.text:0000000000006993 loc_6993:                               ; CODE XREF: fts_build+74A↑j
.text:0000000000006993                 mov     edi, 7
.text:0000000000006998                 mov     [rbp+70h], di
.text:000000000000699C                 or      dword ptr [r15+48h], 2000h
.text:00000000000069A4                 mov     rdi, [rsp+0A8h+ptr] ; ptr
.text:00000000000069A9                 call    fts_lfree
.text:00000000000069AE                 mov     [rsp+0A8h+ptr], 0
.text:00000000000069B7                 jmp     loc_6685
.text:00000000000069BC ; ---------------------------------------------------------------------------
.text:00000000000069BC
.text:00000000000069BC loc_69BC:                               ; CODE XREF: fts_build+51A↑j
.text:00000000000069BC                 mov     edi, eax        ; fd
.text:00000000000069BE                 mov     edx, 3
.text:00000000000069C3                 mov     esi, 406h
.text:00000000000069C8                 xor     eax, eax
.text:00000000000069CA                 call    rpl_fcntl
.text:00000000000069CF                 mov     [rsp+0A8h+fd], eax
.text:00000000000069D3                 jmp     loc_65E0
.text:00000000000069D8 ; ---------------------------------------------------------------------------
.text:00000000000069D8
.text:00000000000069D8 loc_69D8:                               ; CODE XREF: fts_build+75A↑j
.text:00000000000069D8                 movzx   eax, word ptr [rbp+70h]
.text:00000000000069DC                 cmp     ax, 7
.text:00000000000069E0                 jz      loc_6820
.text:00000000000069E6                 cmp     ax, 4
.text:00000000000069EA                 jz      loc_6820
.text:00000000000069F0                 mov     esi, 6
.text:00000000000069F5                 mov     [rbp+70h], si
.text:00000000000069F9                 jmp     loc_6820
.text:00000000000069FE ; ---------------------------------------------------------------------------
.text:00000000000069FE
.text:00000000000069FE loc_69FE:                               ; CODE XREF: fts_build+8BE↑j
.text:00000000000069FE                 cmp     [rsp+0A8h+var_50], 3
.text:0000000000006A03                 jnz     loc_6900
.text:0000000000006A09                 mov     eax, [rsp+0A8h+fd]
.text:0000000000006A0D                 xor     r12d, r12d
.text:0000000000006A10                 mov     ebx, 1
.text:0000000000006A15                 jmp     loc_65D5
.text:0000000000006A15 ; ---------------------------------------------------------------------------
.text:0000000000006A1A                 align 20h
.text:0000000000006A20
.text:0000000000006A20 loc_6A20:                               ; CODE XREF: fts_build+100↑j
.text:0000000000006A20                 mov     rdi, r13        ; ptr
.text:0000000000006A23                 mov     rbp, [rsp+0A8h+var_88]
.text:0000000000006A28                 call    free
.text:0000000000006A2D                 mov     rdi, [rsp+0A8h+ptr] ; ptr
.text:0000000000006A32                 call    fts_lfree
.text:0000000000006A37                 mov     rdi, [rbp+18h]  ; dirp
.text:0000000000006A3B                 call    _closedir
.text:0000000000006A40                 mov     r8d, 7
.text:0000000000006A46                 mov     qword ptr [rbp+18h], 0
.text:0000000000006A4E                 mov     [rsp+0A8h+ptr], 0
.text:0000000000006A57                 mov     [rbp+70h], r8w
.text:0000000000006A5C                 or      dword ptr [r15+48h], 2000h
.text:0000000000006A64                 mov     dword ptr [r12], 24h ; '$'
.text:0000000000006A6C                 jmp     loc_6685
.text:0000000000006A71 ; ---------------------------------------------------------------------------
.text:0000000000006A71
.text:0000000000006A71 loc_6A71:                               ; CODE XREF: fts_build+5D8↑j
.text:0000000000006A71                 call    ___stack_chk_fail
.text:0000000000006A76 ; ---------------------------------------------------------------------------
.text:0000000000006A76
.text:0000000000006A76 loc_6A76:                               ; CODE XREF: fts_build+429↑j
.text:0000000000006A76                 lea     rax, CSWTCH_53
.text:0000000000006A7D                 mov     eax, [rax+rdx*4]
.text:0000000000006A80                 mov     [r13+90h], eax
.text:0000000000006A87                 mov     eax, 1
.text:0000000000006A8C                 jmp     loc_624A
.text:0000000000006A8C ; } // starts at 60C0
.text:0000000000006A8C fts_build       endp
.text:0000000000006A8C
.text:0000000000006A8C ; ---------------------------------------------------------------------------
.text:0000000000006A91                 align 20h
.text:0000000000006AA0
.text:0000000000006AA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000006AA0
.text:0000000000006AA0
.text:0000000000006AA0                 public rpl_fts_open
.text:0000000000006AA0 rpl_fts_open    proc near               ; CODE XREF: xfts_open+A↑p
.text:0000000000006AA0
.text:0000000000006AA0 var_50          = qword ptr -50h
.text:0000000000006AA0 var_42          = byte ptr -42h
.text:0000000000006AA0 var_41          = byte ptr -41h
.text:0000000000006AA0 var_40          = qword ptr -40h
.text:0000000000006AA0
.text:0000000000006AA0 ; __unwind {
.text:0000000000006AA0                 push    r15
.text:0000000000006AA2                 push    r14
.text:0000000000006AA4                 push    r13
.text:0000000000006AA6                 push    r12
.text:0000000000006AA8                 push    rbp
.text:0000000000006AA9                 push    rbx
.text:0000000000006AAA                 sub     rsp, 28h
.text:0000000000006AAE                 test    esi, 0FFFFF000h
.text:0000000000006AB4                 jnz     loc_6E38
.text:0000000000006ABA                 mov     eax, esi
.text:0000000000006ABC                 mov     ebp, esi
.text:0000000000006ABE                 and     eax, 204h
.text:0000000000006AC3                 cmp     eax, 204h
.text:0000000000006AC8                 jz      loc_6E38
.text:0000000000006ACE                 test    sil, 12h
.text:0000000000006AD2                 jz      loc_6E38
.text:0000000000006AD8                 mov     r13, rdi
.text:0000000000006ADB                 mov     esi, 1          ; size
.text:0000000000006AE0                 mov     edi, 80h        ; nmemb
.text:0000000000006AE5                 mov     r14, rdx
.text:0000000000006AE8                 call    _calloc
.text:0000000000006AED                 test    rax, rax
.text:0000000000006AF0                 mov     rbx, rax
.text:0000000000006AF3                 jz      loc_6D4E
.text:0000000000006AF9                 test    bpl, 2
.text:0000000000006AFD                 mov     [rax+40h], r14
.text:0000000000006B01                 jnz     loc_6D60
.text:0000000000006B07                 mov     rdi, [r13+0]    ; s
.text:0000000000006B0B                 mov     [rax+48h], ebp
.text:0000000000006B0E                 mov     dword ptr [rbx+2Ch], 0FFFFFF9Ch
.text:0000000000006B15                 test    rdi, rdi
.text:0000000000006B18                 jz      loc_6D7F
.text:0000000000006B1E
.text:0000000000006B1E loc_6B1E:                               ; CODE XREF: rpl_fts_open+2D9↓j
.text:0000000000006B1E                 mov     r15, r13
.text:0000000000006B21                 xor     r12d, r12d
.text:0000000000006B24                 nop     dword ptr [rax+00h]
.text:0000000000006B28
.text:0000000000006B28 loc_6B28:                               ; CODE XREF: rpl_fts_open+9E↓j
.text:0000000000006B28                 call    _strlen
.text:0000000000006B2D                 cmp     r12, rax
.text:0000000000006B30                 cmovb   r12, rax
.text:0000000000006B34                 add     r15, 8
.text:0000000000006B38                 mov     rdi, [r15]
.text:0000000000006B3B                 test    rdi, rdi
.text:0000000000006B3E                 jnz     short loc_6B28
.text:0000000000006B40                 lea     rdx, [r12+1]
.text:0000000000006B45                 mov     eax, 1000h
.text:0000000000006B4A                 cmp     rdx, 1000h
.text:0000000000006B51                 cmovb   rdx, rax
.text:0000000000006B55
.text:0000000000006B55 loc_6B55:                               ; CODE XREF: rpl_fts_open+2E4↓j
.text:0000000000006B55                 lea     rsi, [rbx+30h]
.text:0000000000006B59                 lea     rdi, [rbx+20h]
.text:0000000000006B5D                 call    fts_palloc_isra_2
.text:0000000000006B62                 test    al, al
.text:0000000000006B64                 mov     [rsp+58h+var_42], al
.text:0000000000006B68                 jz      loc_6E09
.text:0000000000006B6E                 mov     rsi, [r13+0]
.text:0000000000006B72                 test    rsi, rsi
.text:0000000000006B75                 jz      loc_6E20
.text:0000000000006B7B                 lea     rsi, aWrittenBySSAnd+1Bh ; ""
.text:0000000000006B82                 xor     edx, edx
.text:0000000000006B84                 mov     rdi, rbx
.text:0000000000006B87                 call    fts_alloc
.text:0000000000006B8C                 test    rax, rax
.text:0000000000006B8F                 mov     r15, rax
.text:0000000000006B92                 jz      loc_6E00
.text:0000000000006B98                 mov     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000006B9F                 test    r14, r14
.text:0000000000006BA2                 mov     rsi, [r13+0]
.text:0000000000006BA6                 mov     [r15+58h], rax
.text:0000000000006BAA                 mov     [r15+68h], rax
.text:0000000000006BAE                 jz      short loc_6BBD
.text:0000000000006BB0
.text:0000000000006BB0 loc_6BB0:                               ; CODE XREF: rpl_fts_open+386↓j
.text:0000000000006BB0                 mov     eax, [rbx+48h]
.text:0000000000006BB3                 shr     eax, 0Ah
.text:0000000000006BB6                 and     eax, 1
.text:0000000000006BB9                 mov     [rsp+58h+var_42], al
.text:0000000000006BBD
.text:0000000000006BBD loc_6BBD:                               ; CODE XREF: rpl_fts_open+10E↑j
.text:0000000000006BBD                 test    rsi, rsi
.text:0000000000006BC0                 jz      loc_6E2C
.text:0000000000006BC6                 shr     ebp, 0Bh
.text:0000000000006BC9                 mov     [rsp+58h+var_40], 0
.text:0000000000006BD2                 xor     r12d, r12d
.text:0000000000006BD5                 xor     ebp, 1
.text:0000000000006BD8                 mov     eax, ebp
.text:0000000000006BDA                 xor     ebp, ebp
.text:0000000000006BDC                 and     eax, 1
.text:0000000000006BDF                 mov     [rsp+58h+var_41], al
.text:0000000000006BE3                 jmp     short loc_6C5C
.text:0000000000006BE3 ; ---------------------------------------------------------------------------
.text:0000000000006BE5                 align 8
.text:0000000000006BE8
.text:0000000000006BE8 loc_6BE8:                               ; CODE XREF: rpl_fts_open+1D2↓j
.text:0000000000006BE8                                         ; rpl_fts_open+1DD↓j ...
.text:0000000000006BE8                 mov     rdx, rax
.text:0000000000006BEB                 mov     rdi, rbx
.text:0000000000006BEE                 call    fts_alloc
.text:0000000000006BF3                 test    rax, rax
.text:0000000000006BF6                 mov     rcx, rax
.text:0000000000006BF9                 jz      loc_6DF0
.text:0000000000006BFF                 mov     qword ptr [rax+58h], 0
.text:0000000000006C07                 mov     [rax+8], r15
.text:0000000000006C0B                 lea     rax, [rax+108h]
.text:0000000000006C12                 test    r12, r12
.text:0000000000006C15                 mov     [rcx+30h], rax
.text:0000000000006C19                 jz      loc_6D90
.text:0000000000006C1F                 cmp     [rsp+58h+var_42], 0
.text:0000000000006C24                 jz      loc_6D90
.text:0000000000006C2A                 mov     esi, 0Bh
.text:0000000000006C2F                 test    r14, r14
.text:0000000000006C32                 mov     qword ptr [rcx+0A8h], 2
.text:0000000000006C3D                 mov     [rcx+70h], si
.text:0000000000006C41                 jz      loc_6DD0
.text:0000000000006C47
.text:0000000000006C47 loc_6C47:                               ; CODE XREF: rpl_fts_open+30E↓j
.text:0000000000006C47                 mov     [rcx+10h], r12
.text:0000000000006C4B                 mov     r12, rcx
.text:0000000000006C4E
.text:0000000000006C4E loc_6C4E:                               ; CODE XREF: rpl_fts_open+329↓j
.text:0000000000006C4E                                         ; rpl_fts_open+346↓j
.text:0000000000006C4E                 add     rbp, 1
.text:0000000000006C52                 mov     rsi, [r13+rbp*8+0]
.text:0000000000006C57                 test    rsi, rsi
.text:0000000000006C5A                 jz      short loc_6CB0
.text:0000000000006C5C
.text:0000000000006C5C loc_6C5C:                               ; CODE XREF: rpl_fts_open+143↑j
.text:0000000000006C5C                 mov     rdi, rsi        ; s
.text:0000000000006C5F                 mov     [rsp+58h+var_50], rsi
.text:0000000000006C64                 call    _strlen
.text:0000000000006C69                 cmp     rax, 2
.text:0000000000006C6D                 mov     rsi, [rsp+58h+var_50]
.text:0000000000006C72                 jbe     loc_6BE8
.text:0000000000006C78                 cmp     [rsp+58h+var_41], 0
.text:0000000000006C7D                 jz      loc_6BE8
.text:0000000000006C83                 cmp     byte ptr [rsi+rax-1], 2Fh ; '/'
.text:0000000000006C88                 jnz     loc_6BE8
.text:0000000000006C8E                 xchg    ax, ax
.text:0000000000006C90
.text:0000000000006C90 loc_6C90:                               ; CODE XREF: rpl_fts_open+203↓j
.text:0000000000006C90                 cmp     byte ptr [rsi+rax-2], 2Fh ; '/'
.text:0000000000006C95                 jnz     loc_6BE8
.text:0000000000006C9B                 sub     rax, 1
.text:0000000000006C9F                 cmp     rax, 1
.text:0000000000006CA3                 jnz     short loc_6C90
.text:0000000000006CA5                 jmp     loc_6BE8
.text:0000000000006CA5 ; ---------------------------------------------------------------------------
.text:0000000000006CAA                 align 10h
.text:0000000000006CB0
.text:0000000000006CB0 loc_6CB0:                               ; CODE XREF: rpl_fts_open+1BA↑j
.text:0000000000006CB0                 test    r14, r14
.text:0000000000006CB3                 jz      short loc_6CCC
.text:0000000000006CB5                 cmp     rbp, 1
.text:0000000000006CB9                 jbe     short loc_6CCC
.text:0000000000006CBB                 mov     rsi, r12
.text:0000000000006CBE                 mov     rdx, rbp
.text:0000000000006CC1                 mov     rdi, rbx
.text:0000000000006CC4                 call    fts_sort
.text:0000000000006CC9                 mov     r12, rax
.text:0000000000006CCC
.text:0000000000006CCC loc_6CCC:                               ; CODE XREF: rpl_fts_open+213↑j
.text:0000000000006CCC                                         ; rpl_fts_open+219↑j ...
.text:0000000000006CCC                 lea     rsi, aWrittenBySSAnd+1Bh ; ""
.text:0000000000006CD3                 xor     edx, edx
.text:0000000000006CD5                 mov     rdi, rbx
.text:0000000000006CD8                 call    fts_alloc
.text:0000000000006CDD                 test    rax, rax
.text:0000000000006CE0                 mov     [rbx], rax
.text:0000000000006CE3                 jz      loc_6DF0
.text:0000000000006CE9                 mov     edi, [rbx+48h]
.text:0000000000006CEC                 mov     edx, 9
.text:0000000000006CF1                 lea     rsi, [rbx+58h]
.text:0000000000006CF5                 mov     [rax+10h], r12
.text:0000000000006CF9                 mov     [rax+70h], dx
.text:0000000000006CFD                 mov     qword ptr [rax+58h], 1
.text:0000000000006D05                 call    setup_dir_isra_4
.text:0000000000006D0A                 test    al, al
.text:0000000000006D0C                 jz      loc_6DF0
.text:0000000000006D12                 mov     esi, [rbx+48h]
.text:0000000000006D15                 test    esi, 204h
.text:0000000000006D1B                 jnz     short loc_6D40
.text:0000000000006D1D                 mov     edi, [rbx+2Ch]
.text:0000000000006D20                 lea     rdx, asc_B15A+1 ; "."
.text:0000000000006D27                 call    diropen_isra_6
.text:0000000000006D2C                 test    eax, eax
.text:0000000000006D2E                 mov     [rbx+28h], eax
.text:0000000000006D31                 jns     short loc_6D40
.text:0000000000006D33                 or      dword ptr [rbx+48h], 4
.text:0000000000006D37                 nop     word ptr [rax+rax+00000000h]
.text:0000000000006D40
.text:0000000000006D40 loc_6D40:                               ; CODE XREF: rpl_fts_open+27B↑j
.text:0000000000006D40                                         ; rpl_fts_open+291↑j
.text:0000000000006D40                 lea     rdi, [rbx+60h]
.text:0000000000006D44                 mov     esi, 0FFFFFFFFh
.text:0000000000006D49                 call    i_ring_init
.text:0000000000006D4E
.text:0000000000006D4E loc_6D4E:                               ; CODE XREF: rpl_fts_open+53↑j
.text:0000000000006D4E                                         ; rpl_fts_open+373↓j ...
.text:0000000000006D4E                 add     rsp, 28h
.text:0000000000006D52                 mov     rax, rbx
.text:0000000000006D55                 pop     rbx
.text:0000000000006D56                 pop     rbp
.text:0000000000006D57                 pop     r12
.text:0000000000006D59                 pop     r13
.text:0000000000006D5B                 pop     r14
.text:0000000000006D5D                 pop     r15
.text:0000000000006D5F                 retn
.text:0000000000006D60 ; ---------------------------------------------------------------------------
.text:0000000000006D60
.text:0000000000006D60 loc_6D60:                               ; CODE XREF: rpl_fts_open+61↑j
.text:0000000000006D60                 mov     rdi, [r13+0]
.text:0000000000006D64                 mov     eax, ebp
.text:0000000000006D66                 mov     dword ptr [rbx+2Ch], 0FFFFFF9Ch
.text:0000000000006D6D                 and     ah, 0FDh
.text:0000000000006D70                 or      eax, 4
.text:0000000000006D73                 test    rdi, rdi
.text:0000000000006D76                 mov     [rbx+48h], eax
.text:0000000000006D79                 jnz     loc_6B1E
.text:0000000000006D7F
.text:0000000000006D7F loc_6D7F:                               ; CODE XREF: rpl_fts_open+78↑j
.text:0000000000006D7F                 mov     edx, 1000h
.text:0000000000006D84                 jmp     loc_6B55
.text:0000000000006D84 ; ---------------------------------------------------------------------------
.text:0000000000006D89                 align 10h
.text:0000000000006D90
.text:0000000000006D90 loc_6D90:                               ; CODE XREF: rpl_fts_open+179↑j
.text:0000000000006D90                                         ; rpl_fts_open+184↑j
.text:0000000000006D90                 xor     edx, edx
.text:0000000000006D92                 mov     rsi, rcx
.text:0000000000006D95                 mov     rdi, rbx
.text:0000000000006D98                 mov     [rsp+58h+var_50], rcx
.text:0000000000006D9D                 call    fts_stat
.text:0000000000006DA2                 mov     rcx, [rsp+58h+var_50]
.text:0000000000006DA7                 test    r14, r14
.text:0000000000006DAA                 mov     [rcx+70h], ax
.text:0000000000006DAE                 jnz     loc_6C47
.text:0000000000006DB4                 test    r12, r12
.text:0000000000006DB7                 mov     qword ptr [rcx+10h], 0
.text:0000000000006DBF                 jnz     short loc_6DD8
.text:0000000000006DC1                 mov     [rsp+58h+var_40], rcx
.text:0000000000006DC6                 mov     r12, rcx
.text:0000000000006DC9                 jmp     loc_6C4E
.text:0000000000006DC9 ; ---------------------------------------------------------------------------
.text:0000000000006DCE                 align 10h
.text:0000000000006DD0
.text:0000000000006DD0 loc_6DD0:                               ; CODE XREF: rpl_fts_open+1A1↑j
.text:0000000000006DD0                 mov     qword ptr [rcx+10h], 0
.text:0000000000006DD8
.text:0000000000006DD8 loc_6DD8:                               ; CODE XREF: rpl_fts_open+31F↑j
.text:0000000000006DD8                 mov     rax, [rsp+58h+var_40]
.text:0000000000006DDD                 mov     [rsp+58h+var_40], rcx
.text:0000000000006DE2                 mov     [rax+10h], rcx
.text:0000000000006DE6                 jmp     loc_6C4E
.text:0000000000006DE6 ; ---------------------------------------------------------------------------
.text:0000000000006DEB                 align 10h
.text:0000000000006DF0
.text:0000000000006DF0 loc_6DF0:                               ; CODE XREF: rpl_fts_open+159↑j
.text:0000000000006DF0                                         ; rpl_fts_open+243↑j ...
.text:0000000000006DF0                 mov     rdi, r12        ; ptr
.text:0000000000006DF3                 call    fts_lfree
.text:0000000000006DF8                 mov     rdi, r15        ; ptr
.text:0000000000006DFB                 call    free
.text:0000000000006E00
.text:0000000000006E00 loc_6E00:                               ; CODE XREF: rpl_fts_open+F2↑j
.text:0000000000006E00                 mov     rdi, [rbx+20h]  ; ptr
.text:0000000000006E04                 call    free
.text:0000000000006E09
.text:0000000000006E09 loc_6E09:                               ; CODE XREF: rpl_fts_open+C8↑j
.text:0000000000006E09                 mov     rdi, rbx        ; ptr
.text:0000000000006E0C                 xor     ebx, ebx
.text:0000000000006E0E                 call    free
.text:0000000000006E13                 jmp     loc_6D4E
.text:0000000000006E13 ; ---------------------------------------------------------------------------
.text:0000000000006E18                 align 20h
.text:0000000000006E20
.text:0000000000006E20 loc_6E20:                               ; CODE XREF: rpl_fts_open+D5↑j
.text:0000000000006E20                 xor     r15d, r15d
.text:0000000000006E23                 test    r14, r14
.text:0000000000006E26                 jnz     loc_6BB0
.text:0000000000006E2C
.text:0000000000006E2C loc_6E2C:                               ; CODE XREF: rpl_fts_open+120↑j
.text:0000000000006E2C                 xor     r12d, r12d
.text:0000000000006E2F                 jmp     loc_6CCC
.text:0000000000006E2F ; ---------------------------------------------------------------------------
.text:0000000000006E34                 align 8
.text:0000000000006E38
.text:0000000000006E38 loc_6E38:                               ; CODE XREF: rpl_fts_open+14↑j
.text:0000000000006E38                                         ; rpl_fts_open+28↑j ...
.text:0000000000006E38                 call    ___errno_location
.text:0000000000006E3D                 xor     ebx, ebx
.text:0000000000006E3F                 mov     dword ptr [rax], 16h
.text:0000000000006E45                 jmp     loc_6D4E
.text:0000000000006E45 ; } // starts at 6AA0
.text:0000000000006E45 rpl_fts_open    endp
.text:0000000000006E45
.text:0000000000006E45 ; ---------------------------------------------------------------------------
.text:0000000000006E4A                 align 10h
.text:0000000000006E50
.text:0000000000006E50 ; =============== S U B R O U T I N E =======================================
.text:0000000000006E50
.text:0000000000006E50
.text:0000000000006E50 ; __int64 __fastcall rpl_fts_close(void *ptr)
.text:0000000000006E50                 public rpl_fts_close
.text:0000000000006E50 rpl_fts_close   proc near               ; CODE XREF: main+374↑p
.text:0000000000006E50 ; __unwind {
.text:0000000000006E50                 push    r12
.text:0000000000006E52                 push    rbp
.text:0000000000006E53                 mov     rbp, rdi
.text:0000000000006E56                 push    rbx
.text:0000000000006E57                 mov     rdi, [rdi]
.text:0000000000006E5A                 test    rdi, rdi
.text:0000000000006E5D                 jz      short loc_6EA3
.text:0000000000006E5F                 cmp     qword ptr [rdi+58h], 0
.text:0000000000006E64                 jns     short loc_6E7F
.text:0000000000006E66                 jmp     loc_6F80
.text:0000000000006E66 ; ---------------------------------------------------------------------------
.text:0000000000006E6B                 align 10h
.text:0000000000006E70
.text:0000000000006E70 loc_6E70:                               ; CODE XREF: rpl_fts_close+36↓j
.text:0000000000006E70                 call    free
.text:0000000000006E75                 cmp     qword ptr [rbx+58h], 0
.text:0000000000006E7A                 mov     rdi, rbx        ; ptr
.text:0000000000006E7D                 js      short loc_6E9B
.text:0000000000006E7F
.text:0000000000006E7F loc_6E7F:                               ; CODE XREF: rpl_fts_close+14↑j
.text:0000000000006E7F                                         ; rpl_fts_close+49↓j
.text:0000000000006E7F                 mov     rbx, [rdi+10h]
.text:0000000000006E83                 test    rbx, rbx
.text:0000000000006E86                 jnz     short loc_6E70
.text:0000000000006E88                 mov     rbx, [rdi+8]
.text:0000000000006E8C                 call    free
.text:0000000000006E91                 cmp     qword ptr [rbx+58h], 0
.text:0000000000006E96                 mov     rdi, rbx
.text:0000000000006E99                 jns     short loc_6E7F
.text:0000000000006E9B
.text:0000000000006E9B loc_6E9B:                               ; CODE XREF: rpl_fts_close+2D↑j
.text:0000000000006E9B                 mov     rdi, rbx        ; ptr
.text:0000000000006E9E                 call    free
.text:0000000000006EA3
.text:0000000000006EA3 loc_6EA3:                               ; CODE XREF: rpl_fts_close+D↑j
.text:0000000000006EA3                                         ; rpl_fts_close+13B↓j
.text:0000000000006EA3                 mov     rdi, [rbp+8]    ; ptr
.text:0000000000006EA7                 test    rdi, rdi
.text:0000000000006EAA                 jz      short loc_6EB1
.text:0000000000006EAC                 call    fts_lfree
.text:0000000000006EB1
.text:0000000000006EB1 loc_6EB1:                               ; CODE XREF: rpl_fts_close+5A↑j
.text:0000000000006EB1                 mov     rdi, [rbp+10h]  ; ptr
.text:0000000000006EB5                 call    free
.text:0000000000006EBA                 mov     rdi, [rbp+20h]  ; ptr
.text:0000000000006EBE                 call    free
.text:0000000000006EC3                 mov     eax, [rbp+48h]
.text:0000000000006EC6                 test    ah, 2
.text:0000000000006EC9                 jz      short loc_6F30
.text:0000000000006ECB                 mov     edi, [rbp+2Ch]  ; fd
.text:0000000000006ECE                 test    edi, edi
.text:0000000000006ED0                 jns     loc_6F60
.text:0000000000006ED6
.text:0000000000006ED6 loc_6ED6:                               ; CODE XREF: rpl_fts_close+E2↓j
.text:0000000000006ED6                                         ; rpl_fts_close+FA↓j ...
.text:0000000000006ED6                 xor     ebx, ebx
.text:0000000000006ED8
.text:0000000000006ED8 loc_6ED8:                               ; CODE XREF: rpl_fts_close+124↓j
.text:0000000000006ED8                                         ; rpl_fts_close+154↓j ...
.text:0000000000006ED8                 lea     rdi, [rbp+60h]
.text:0000000000006EDC                 call    fd_ring_clear
.text:0000000000006EE1                 mov     rdi, [rbp+50h]  ; ptr
.text:0000000000006EE5                 test    rdi, rdi
.text:0000000000006EE8                 jz      short loc_6EEF
.text:0000000000006EEA                 call    hash_free
.text:0000000000006EEF
.text:0000000000006EEF loc_6EEF:                               ; CODE XREF: rpl_fts_close+98↑j
.text:0000000000006EEF                 test    dword ptr [rbp+48h], 102h
.text:0000000000006EF6                 mov     rdi, [rbp+58h]  ; ptr
.text:0000000000006EFA                 jz      short loc_6F20
.text:0000000000006EFC                 test    rdi, rdi
.text:0000000000006EFF                 jz      short loc_6F06
.text:0000000000006F01                 call    hash_free
.text:0000000000006F06
.text:0000000000006F06 loc_6F06:                               ; CODE XREF: rpl_fts_close+AF↑j
.text:0000000000006F06                                         ; rpl_fts_close+D5↓j
.text:0000000000006F06                 mov     rdi, rbp        ; ptr
.text:0000000000006F09                 call    free
.text:0000000000006F0E                 test    ebx, ebx
.text:0000000000006F10                 jnz     loc_6FC1
.text:0000000000006F16
.text:0000000000006F16 loc_6F16:                               ; CODE XREF: rpl_fts_close+17D↓j
.text:0000000000006F16                 mov     eax, ebx
.text:0000000000006F18                 pop     rbx
.text:0000000000006F19                 pop     rbp
.text:0000000000006F1A                 pop     r12
.text:0000000000006F1C                 retn
.text:0000000000006F1C ; ---------------------------------------------------------------------------
.text:0000000000006F1D                 align 20h
.text:0000000000006F20
.text:0000000000006F20 loc_6F20:                               ; CODE XREF: rpl_fts_close+AA↑j
.text:0000000000006F20                 call    free
.text:0000000000006F25                 jmp     short loc_6F06
.text:0000000000006F25 ; ---------------------------------------------------------------------------
.text:0000000000006F27                 align 10h
.text:0000000000006F30
.text:0000000000006F30 loc_6F30:                               ; CODE XREF: rpl_fts_close+79↑j
.text:0000000000006F30                 test    al, 4
.text:0000000000006F32                 jnz     short loc_6ED6
.text:0000000000006F34                 mov     edi, [rbp+28h]  ; fd
.text:0000000000006F37                 call    _fchdir
.text:0000000000006F3C                 test    eax, eax
.text:0000000000006F3E                 jnz     short loc_6F90
.text:0000000000006F40                 mov     edi, [rbp+28h]  ; fd
.text:0000000000006F43                 call    _close
.text:0000000000006F48                 test    eax, eax
.text:0000000000006F4A                 jz      short loc_6ED6
.text:0000000000006F4C                 call    ___errno_location
.text:0000000000006F51                 mov     r12, rax
.text:0000000000006F54                 jmp     short loc_6FB8
.text:0000000000006F54 ; ---------------------------------------------------------------------------
.text:0000000000006F56                 align 20h
.text:0000000000006F60
.text:0000000000006F60 loc_6F60:                               ; CODE XREF: rpl_fts_close+80↑j
.text:0000000000006F60                 call    _close
.text:0000000000006F65                 test    eax, eax
.text:0000000000006F67                 jz      loc_6ED6
.text:0000000000006F6D                 call    ___errno_location
.text:0000000000006F72                 mov     ebx, [rax]
.text:0000000000006F74                 jmp     loc_6ED8
.text:0000000000006F74 ; ---------------------------------------------------------------------------
.text:0000000000006F79                 align 20h
.text:0000000000006F80
.text:0000000000006F80 loc_6F80:                               ; CODE XREF: rpl_fts_close+16↑j
.text:0000000000006F80                 mov     rbx, rdi
.text:0000000000006F83                 mov     rdi, rbx        ; ptr
.text:0000000000006F86                 call    free
.text:0000000000006F8B                 jmp     loc_6EA3
.text:0000000000006F90 ; ---------------------------------------------------------------------------
.text:0000000000006F90
.text:0000000000006F90 loc_6F90:                               ; CODE XREF: rpl_fts_close+EE↑j
.text:0000000000006F90                 call    ___errno_location
.text:0000000000006F95                 mov     edi, [rbp+28h]  ; fd
.text:0000000000006F98                 mov     r12, rax
.text:0000000000006F9B                 mov     ebx, [rax]
.text:0000000000006F9D                 call    _close
.text:0000000000006FA2                 test    eax, eax
.text:0000000000006FA4                 jz      loc_6ED8
.text:0000000000006FAA                 test    ebx, ebx
.text:0000000000006FAC                 jnz     loc_6ED8
.text:0000000000006FB2                 nop     word ptr [rax+rax+00h]
.text:0000000000006FB8
.text:0000000000006FB8 loc_6FB8:                               ; CODE XREF: rpl_fts_close+104↑j
.text:0000000000006FB8                 mov     ebx, [r12]
.text:0000000000006FBC                 jmp     loc_6ED8
.text:0000000000006FC1 ; ---------------------------------------------------------------------------
.text:0000000000006FC1
.text:0000000000006FC1 loc_6FC1:                               ; CODE XREF: rpl_fts_close+C0↑j
.text:0000000000006FC1                 call    ___errno_location
.text:0000000000006FC6                 mov     [rax], ebx
.text:0000000000006FC8                 mov     ebx, 0FFFFFFFFh
.text:0000000000006FCD                 jmp     loc_6F16
.text:0000000000006FCD ; } // starts at 6E50
.text:0000000000006FCD rpl_fts_close   endp
.text:0000000000006FCD
.text:0000000000006FCD ; ---------------------------------------------------------------------------
.text:0000000000006FD2                 align 20h
.text:0000000000006FE0
.text:0000000000006FE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000006FE0
.text:0000000000006FE0
.text:0000000000006FE0                 public rpl_fts_read
.text:0000000000006FE0 rpl_fts_read    proc near               ; CODE XREF: main+2BA↑p
.text:0000000000006FE0                                         ; main+356↑p ...
.text:0000000000006FE0 ; __unwind {
.text:0000000000006FE0                 push    r14
.text:0000000000006FE2                 push    r13
.text:0000000000006FE4                 push    r12
.text:0000000000006FE6                 push    rbp
.text:0000000000006FE7                 push    rbx
.text:0000000000006FE8                 mov     rbp, [rdi]
.text:0000000000006FEB                 test    rbp, rbp
.text:0000000000006FEE                 jz      loc_70FE
.text:0000000000006FF4                 mov     edx, [rdi+48h]
.text:0000000000006FF7                 test    dh, 20h
.text:0000000000006FFA                 jnz     loc_70FE
.text:0000000000007000                 movzx   eax, word ptr [rbp+74h]
.text:0000000000007004                 mov     ebx, 3
.text:0000000000007009                 mov     r12, rdi
.text:000000000000700C                 mov     [rbp+74h], bx
.text:0000000000007010                 cmp     ax, 1
.text:0000000000007014                 jz      loc_7260
.text:000000000000701A                 cmp     ax, 2
.text:000000000000701E                 movzx   ecx, word ptr [rbp+70h]
.text:0000000000007022                 jz      loc_7110
.text:0000000000007028                 cmp     cx, 1
.text:000000000000702C                 jnz     short loc_7060
.text:000000000000702E                 jmp     loc_7250
.text:000000000000702E ; ---------------------------------------------------------------------------
.text:0000000000007033                 align 8
.text:0000000000007038
.text:0000000000007038 loc_7038:                               ; CODE XREF: rpl_fts_read+87↓j
.text:0000000000007038                 mov     [r12], rbx
.text:000000000000703C                 mov     rdi, rbp        ; ptr
.text:000000000000703F                 call    free
.text:0000000000007044                 cmp     qword ptr [rbx+58h], 0
.text:0000000000007049                 jz      loc_7280
.text:000000000000704F                 movzx   eax, word ptr [rbx+74h]
.text:0000000000007053                 mov     rbp, rbx
.text:0000000000007056                 cmp     ax, 4
.text:000000000000705A                 jnz     loc_7388
.text:0000000000007060
.text:0000000000007060 loc_7060:                               ; CODE XREF: rpl_fts_read+4C↑j
.text:0000000000007060                                         ; rpl_fts_read+13D↓j
.text:0000000000007060                 mov     rbx, [rbp+10h]
.text:0000000000007064                 test    rbx, rbx
.text:0000000000007067                 jnz     short loc_7038
.text:0000000000007069                 mov     rbx, [rbp+8]
.text:000000000000706D                 cmp     qword ptr [rbx+18h], 0
.text:0000000000007072                 jnz     loc_75E0
.text:0000000000007078
.text:0000000000007078 loc_7078:                               ; CODE XREF: rpl_fts_read+688↓j
.text:0000000000007078                 mov     [r12], rbx
.text:000000000000707C                 mov     rdi, rbp        ; ptr
.text:000000000000707F                 call    free
.text:0000000000007084                 cmp     qword ptr [rbx+58h], 0FFFFFFFFFFFFFFFFh
.text:0000000000007089                 jz      loc_7542
.text:000000000000708F                 cmp     word ptr [rbx+70h], 0Bh
.text:0000000000007094                 jz      loc_71CF
.text:000000000000709A                 mov     rdx, [r12+20h]
.text:000000000000709F                 mov     rax, [rbx+48h]
.text:00000000000070A3                 mov     byte ptr [rdx+rax], 0
.text:00000000000070A7                 cmp     qword ptr [rbx+58h], 0
.text:00000000000070AC                 jz      loc_7470
.text:00000000000070B2                 movzx   eax, word ptr [rbx+72h]
.text:00000000000070B6                 test    al, 2
.text:00000000000070B8                 jz      loc_7428
.text:00000000000070BE                 mov     eax, [r12+48h]
.text:00000000000070C3                 mov     edi, [rbx+44h]  ; fd
.text:00000000000070C6                 test    al, 4
.text:00000000000070C8                 jz      loc_74CC
.text:00000000000070CE
.text:00000000000070CE loc_70CE:                               ; CODE XREF: rpl_fts_read+507↓j
.text:00000000000070CE                                         ; rpl_fts_read+6AC↓j
.text:00000000000070CE                 call    _close
.text:00000000000070D3
.text:00000000000070D3 loc_70D3:                               ; CODE XREF: rpl_fts_read+44A↓j
.text:00000000000070D3                                         ; rpl_fts_read+46A↓j ...
.text:00000000000070D3                 mov     edi, [r12+48h]
.text:00000000000070D8
.text:00000000000070D8 loc_70D8:                               ; CODE XREF: rpl_fts_read+48A↓j
.text:00000000000070D8                 cmp     word ptr [rbx+70h], 2
.text:00000000000070DD                 jz      short loc_70F3
.text:00000000000070DF                 mov     ecx, [rbx+40h]
.text:00000000000070E2                 test    ecx, ecx
.text:00000000000070E4                 jz      loc_7488
.text:00000000000070EA                 mov     edx, 7
.text:00000000000070EF                 mov     [rbx+70h], dx
.text:00000000000070F3
.text:00000000000070F3 loc_70F3:                               ; CODE XREF: rpl_fts_read+FD↑j
.text:00000000000070F3                                         ; rpl_fts_read+4C3↓j
.text:00000000000070F3                 and     edi, 2000h
.text:00000000000070F9                 mov     rbp, rbx
.text:00000000000070FC                 jz      short loc_717A
.text:00000000000070FE
.text:00000000000070FE loc_70FE:                               ; CODE XREF: rpl_fts_read+E↑j
.text:00000000000070FE                                         ; rpl_fts_read+1A↑j ...
.text:00000000000070FE                 xor     ebp, ebp
.text:0000000000007100                 pop     rbx
.text:0000000000007101                 mov     rax, rbp
.text:0000000000007104                 pop     rbp
.text:0000000000007105                 pop     r12
.text:0000000000007107                 pop     r13
.text:0000000000007109                 pop     r14
.text:000000000000710B                 retn
.text:000000000000710B ; ---------------------------------------------------------------------------
.text:000000000000710C                 align 10h
.text:0000000000007110
.text:0000000000007110 loc_7110:                               ; CODE XREF: rpl_fts_read+42↑j
.text:0000000000007110                 lea     eax, [rcx-0Ch]
.text:0000000000007113                 cmp     ax, 1
.text:0000000000007117                 jbe     short loc_7190
.text:0000000000007119                 cmp     cx, 1
.text:000000000000711D                 jnz     loc_7060
.text:0000000000007123
.text:0000000000007123 loc_7123:                               ; CODE XREF: rpl_fts_read+274↓j
.text:0000000000007123                 test    dl, 40h
.text:0000000000007126                 jz      loc_71D8
.text:000000000000712C                 mov     rax, [r12+18h]
.text:0000000000007131                 cmp     [rbp+78h], rax
.text:0000000000007135                 jz      loc_71D8
.text:000000000000713B
.text:000000000000713B loc_713B:                               ; CODE XREF: rpl_fts_read+27A↓j
.text:000000000000713B                 test    byte ptr [rbp+72h], 2
.text:000000000000713F                 jnz     loc_7620
.text:0000000000007145
.text:0000000000007145 loc_7145:                               ; CODE XREF: rpl_fts_read+648↓j
.text:0000000000007145                 mov     rdi, [r12+8]    ; ptr
.text:000000000000714A                 test    rdi, rdi
.text:000000000000714D                 jz      short loc_715D
.text:000000000000714F                 call    fts_lfree
.text:0000000000007154                 mov     qword ptr [r12+8], 0
.text:000000000000715D
.text:000000000000715D loc_715D:                               ; CODE XREF: rpl_fts_read+16D↑j
.text:000000000000715D                 mov     edi, [r12+48h]
.text:0000000000007162                 mov     r10d, 6
.text:0000000000007168                 lea     rsi, [r12+58h]
.text:000000000000716D                 mov     [rbp+70h], r10w
.text:0000000000007172                 mov     rdx, rbp
.text:0000000000007175                 call    leave_dir_isra_12
.text:000000000000717A
.text:000000000000717A loc_717A:                               ; CODE XREF: rpl_fts_read+11C↑j
.text:000000000000717A                                         ; rpl_fts_read+1D3↓j ...
.text:000000000000717A                 pop     rbx
.text:000000000000717B                 mov     rax, rbp
.text:000000000000717E                 pop     rbp
.text:000000000000717F                 pop     r12
.text:0000000000007181                 pop     r13
.text:0000000000007183                 pop     r14
.text:0000000000007185                 retn
.text:0000000000007185 ; ---------------------------------------------------------------------------
.text:0000000000007186                 align 10h
.text:0000000000007190
.text:0000000000007190 loc_7190:                               ; CODE XREF: rpl_fts_read+137↑j
.text:0000000000007190                 mov     edx, 1
.text:0000000000007195                 mov     rsi, rbp
.text:0000000000007198                 call    fts_stat
.text:000000000000719D                 cmp     ax, 1
.text:00000000000071A1                 mov     [rbp+70h], ax
.text:00000000000071A5                 jz      loc_74EC
.text:00000000000071AB                 cmp     ax, 0Bh
.text:00000000000071AF                 mov     [r12], rbp
.text:00000000000071B3                 jnz     short loc_717A
.text:00000000000071B5                 nop     dword ptr [rax]
.text:00000000000071B8
.text:00000000000071B8 loc_71B8:                               ; CODE XREF: rpl_fts_read+356↓j
.text:00000000000071B8                 mov     rax, [rbp+0A8h]
.text:00000000000071BF                 cmp     rax, 2
.text:00000000000071C3                 jz      loc_7568
.text:00000000000071C9                 cmp     rax, 1
.text:00000000000071CD                 jz      short loc_717A
.text:00000000000071CF
.text:00000000000071CF loc_71CF:                               ; CODE XREF: rpl_fts_read+B4↑j
.text:00000000000071CF                 call    _abort
.text:00000000000071CF ; ---------------------------------------------------------------------------
.text:00000000000071D4                 align 8
.text:00000000000071D8
.text:00000000000071D8 loc_71D8:                               ; CODE XREF: rpl_fts_read+146↑j
.text:00000000000071D8                                         ; rpl_fts_read+155↑j
.text:00000000000071D8                 mov     rdi, [r12+8]    ; ptr
.text:00000000000071DD                 test    rdi, rdi
.text:00000000000071E0                 jz      loc_73F8
.text:00000000000071E6                 test    dh, 10h
.text:00000000000071E9                 jnz     loc_73E2
.text:00000000000071EF                 mov     rcx, [rbp+30h]
.text:00000000000071F3                 mov     edx, 0FFFFFFFFh
.text:00000000000071F8                 mov     rsi, rbp
.text:00000000000071FB                 mov     rdi, r12
.text:00000000000071FE                 call    fts_safe_changedir
.text:0000000000007203                 test    eax, eax
.text:0000000000007205                 jz      loc_74C2
.text:000000000000720B                 call    ___errno_location
.text:0000000000007210                 mov     eax, [rax]
.text:0000000000007212                 or      word ptr [rbp+72h], 1
.text:0000000000007217                 mov     [rbp+40h], eax
.text:000000000000721A                 mov     rbp, [r12+8]
.text:000000000000721F                 test    rbp, rbp
.text:0000000000007222                 jz      loc_7416
.text:0000000000007228                 mov     rax, rbp
.text:000000000000722B                 nop     dword ptr [rax+rax+00h]
.text:0000000000007230
.text:0000000000007230 loc_7230:                               ; CODE XREF: rpl_fts_read+263↓j
.text:0000000000007230                 mov     rdx, [rax+8]
.text:0000000000007234                 mov     rdx, [rdx+30h]
.text:0000000000007238                 mov     [rax+30h], rdx
.text:000000000000723C                 mov     rax, [rax+10h]
.text:0000000000007240                 test    rax, rax
.text:0000000000007243                 jnz     short loc_7230
.text:0000000000007245                 jmp     loc_7416
.text:0000000000007245 ; ---------------------------------------------------------------------------
.text:000000000000724A                 align 10h
.text:0000000000007250
.text:0000000000007250 loc_7250:                               ; CODE XREF: rpl_fts_read+4E↑j
.text:0000000000007250                 cmp     ax, 4
.text:0000000000007254                 jnz     loc_7123
.text:000000000000725A                 jmp     loc_713B
.text:000000000000725A ; ---------------------------------------------------------------------------
.text:000000000000725F                 align 20h
.text:0000000000007260
.text:0000000000007260 loc_7260:                               ; CODE XREF: rpl_fts_read+34↑j
.text:0000000000007260                 mov     rsi, rbp
.text:0000000000007263                 xor     edx, edx
.text:0000000000007265                 call    fts_stat
.text:000000000000726A                 mov     [rbp+70h], ax
.text:000000000000726E                 mov     rax, rbp
.text:0000000000007271                 pop     rbx
.text:0000000000007272                 pop     rbp
.text:0000000000007273                 pop     r12
.text:0000000000007275                 pop     r13
.text:0000000000007277                 pop     r14
.text:0000000000007279                 retn
.text:0000000000007279 ; ---------------------------------------------------------------------------
.text:000000000000727A                 align 20h
.text:0000000000007280
.text:0000000000007280 loc_7280:                               ; CODE XREF: rpl_fts_read+69↑j
.text:0000000000007280                 mov     rdi, r12
.text:0000000000007283                 call    restore_initial_cwd
.text:0000000000007288                 test    eax, eax
.text:000000000000728A                 jnz     loc_7691
.text:0000000000007290                 test    dword ptr [r12+48h], 102h
.text:0000000000007299                 mov     rdi, [r12+58h]  ; ptr
.text:000000000000729E                 jz      loc_73D8
.text:00000000000072A4                 test    rdi, rdi
.text:00000000000072A7                 jz      short loc_72AE
.text:00000000000072A9                 call    hash_free
.text:00000000000072AE
.text:00000000000072AE loc_72AE:                               ; CODE XREF: rpl_fts_read+2C7↑j
.text:00000000000072AE                                         ; rpl_fts_read+3FD↓j
.text:00000000000072AE                 mov     rdx, [rbx+60h]
.text:00000000000072B2                 lea     rbp, [rbx+108h]
.text:00000000000072B9                 mov     rdi, [r12+20h]  ; dest
.text:00000000000072BE                 mov     rsi, rbp        ; src
.text:00000000000072C1                 mov     [rbx+48h], rdx
.text:00000000000072C5                 add     rdx, 1          ; n
.text:00000000000072C9                 call    _memmove
.text:00000000000072CE                 mov     esi, 2Fh ; '/'  ; c
.text:00000000000072D3                 mov     rdi, rbp        ; s
.text:00000000000072D6                 call    _strrchr
.text:00000000000072DB                 test    rax, rax
.text:00000000000072DE                 jz      short loc_730B
.text:00000000000072E0                 cmp     rbp, rax
.text:00000000000072E3                 jz      loc_74B0
.text:00000000000072E9
.text:00000000000072E9 loc_72E9:                               ; CODE XREF: rpl_fts_read+4D7↓j
.text:00000000000072E9                 lea     r13, [rax+1]
.text:00000000000072ED                 mov     rdi, r13        ; s
.text:00000000000072F0                 call    _strlen
.text:00000000000072F5                 lea     rdx, [rax+1]    ; n
.text:00000000000072F9                 mov     r14, rax
.text:00000000000072FC                 mov     rsi, r13        ; src
.text:00000000000072FF                 mov     rdi, rbp        ; dest
.text:0000000000007302                 call    _memmove
.text:0000000000007307                 mov     [rbx+60h], r14
.text:000000000000730B
.text:000000000000730B loc_730B:                               ; CODE XREF: rpl_fts_read+2FE↑j
.text:000000000000730B                                         ; rpl_fts_read+4DD↓j
.text:000000000000730B                 mov     rax, [r12+20h]
.text:0000000000007310                 mov     edi, [r12+48h]
.text:0000000000007315                 lea     rsi, [r12+58h]
.text:000000000000731A                 mov     rbp, rbx
.text:000000000000731D                 mov     [rbx+38h], rax
.text:0000000000007321                 mov     [rbx+30h], rax
.text:0000000000007325
.text:0000000000007325 loc_7325:                               ; DATA XREF: .rodata:format↓o
.text:0000000000007325                 call    setup_dir_isra_4
.text:000000000000732A                 movzx   eax, word ptr [rbx+70h]
.text:000000000000732E
.text:000000000000732E loc_732E:                               ; CODE XREF: rpl_fts_read+3EF↓j
.text:000000000000732E                                         ; rpl_fts_read+73D↓j
.text:000000000000732E                 cmp     ax, 0Bh
.text:0000000000007332                 mov     [r12], rbp
.text:0000000000007336                 jz      loc_71B8
.text:000000000000733C
.text:000000000000733C loc_733C:                               ; CODE XREF: rpl_fts_read+5C7↓j
.text:000000000000733C                                         ; rpl_fts_read+717↓j
.text:000000000000733C                 cmp     ax, 1
.text:0000000000007340                 jnz     loc_717A
.text:0000000000007346
.text:0000000000007346 loc_7346:                               ; CODE XREF: rpl_fts_read+51F↓j
.text:0000000000007346                 cmp     qword ptr [rbp+58h], 0
.text:000000000000734B                 jnz     short loc_7356
.text:000000000000734D
.text:000000000000734D loc_734D:                               ; CODE XREF: rpl_fts_read+6F8↓j
.text:000000000000734D                 mov     rax, [rbp+78h]
.text:0000000000007351                 mov     [r12+18h], rax
.text:0000000000007356
.text:0000000000007356 loc_7356:                               ; CODE XREF: rpl_fts_read+36B↑j
.text:0000000000007356                                         ; rpl_fts_read+5F4↓j
.text:0000000000007356                 mov     edi, [r12+48h]
.text:000000000000735B                 lea     rsi, [r12+58h]
.text:0000000000007360                 mov     rdx, rbp
.text:0000000000007363                 call    enter_dir_isra_10
.text:0000000000007368                 test    al, al
.text:000000000000736A                 jnz     loc_717A
.text:0000000000007370                 call    ___errno_location
.text:0000000000007375                 xor     ebp, ebp
.text:0000000000007377                 mov     dword ptr [rax], 0Ch
.text:000000000000737D                 jmp     loc_717A
.text:000000000000737D ; ---------------------------------------------------------------------------
.text:0000000000007382                 align 8
.text:0000000000007388
.text:0000000000007388 loc_7388:                               ; CODE XREF: rpl_fts_read+7A↑j
.text:0000000000007388                 cmp     ax, 2
.text:000000000000738C                 jz      loc_762D
.text:0000000000007392
.text:0000000000007392 loc_7392:                               ; CODE XREF: rpl_fts_read+43F↓j
.text:0000000000007392                                         ; rpl_fts_read+631↓j ...
.text:0000000000007392                 mov     rax, [rbp+8]
.text:0000000000007396                 lea     rsi, [rbp+108h] ; src
.text:000000000000739D                 mov     rdi, [rax+48h]
.text:00000000000073A1                 mov     rax, [rax+38h]
.text:00000000000073A5                 cmp     byte ptr [rax+rdi-1], 2Fh ; '/'
.text:00000000000073AA                 lea     rdx, [rdi-1]
.text:00000000000073AE                 cmovz   rdi, rdx
.text:00000000000073B2                 add     rdi, [r12+20h]
.text:00000000000073B7                 mov     byte ptr [rdi], 2Fh ; '/'
.text:00000000000073BA                 mov     rax, [rbp+60h]
.text:00000000000073BE                 add     rdi, 1          ; dest
.text:00000000000073C2                 lea     rdx, [rax+1]    ; n
.text:00000000000073C6                 call    _memmove
.text:00000000000073CB                 movzx   eax, word ptr [rbp+70h]
.text:00000000000073CF                 jmp     loc_732E
.text:00000000000073CF ; ---------------------------------------------------------------------------
.text:00000000000073D4                 align 8
.text:00000000000073D8
.text:00000000000073D8 loc_73D8:                               ; CODE XREF: rpl_fts_read+2BE↑j
.text:00000000000073D8                 call    free
.text:00000000000073DD                 jmp     loc_72AE
.text:00000000000073E2 ; ---------------------------------------------------------------------------
.text:00000000000073E2
.text:00000000000073E2 loc_73E2:                               ; CODE XREF: rpl_fts_read+209↑j
.text:00000000000073E2                 and     dh, 0EFh
.text:00000000000073E5                 mov     [r12+48h], edx
.text:00000000000073EA                 call    fts_lfree
.text:00000000000073EF                 mov     qword ptr [r12+8], 0
.text:00000000000073F8
.text:00000000000073F8 loc_73F8:                               ; CODE XREF: rpl_fts_read+200↑j
.text:00000000000073F8                 mov     esi, 3
.text:00000000000073FD                 mov     rdi, r12
.text:0000000000007400                 call    fts_build
.text:0000000000007405                 test    rax, rax
.text:0000000000007408                 mov     [r12+8], rax
.text:000000000000740D                 jz      loc_7504
.text:0000000000007413                 mov     rbp, rax
.text:0000000000007416
.text:0000000000007416 loc_7416:                               ; CODE XREF: rpl_fts_read+242↑j
.text:0000000000007416                                         ; rpl_fts_read+265↑j ...
.text:0000000000007416                 mov     qword ptr [r12+8], 0
.text:000000000000741F                 jmp     loc_7392
.text:000000000000741F ; ---------------------------------------------------------------------------
.text:0000000000007424                 align 8
.text:0000000000007428
.text:0000000000007428 loc_7428:                               ; CODE XREF: rpl_fts_read+D8↑j
.text:0000000000007428                 test    al, 1
.text:000000000000742A                 jnz     loc_70D3
.text:0000000000007430                 mov     rsi, [rbx+8]
.text:0000000000007434                 lea     rcx, asc_B15A   ; ".."
.text:000000000000743B                 mov     edx, 0FFFFFFFFh
.text:0000000000007440                 mov     rdi, r12
.text:0000000000007443                 call    fts_safe_changedir
.text:0000000000007448                 test    eax, eax
.text:000000000000744A                 jz      loc_70D3
.text:0000000000007450
.text:0000000000007450 loc_7450:                               ; CODE XREF: rpl_fts_read+49A↓j
.text:0000000000007450                 call    ___errno_location
.text:0000000000007455                 mov     edi, [r12+48h]
.text:000000000000745A                 mov     eax, [rax]
.text:000000000000745C                 or      edi, 2000h
.text:0000000000007462                 mov     [rbx+40h], eax
.text:0000000000007465                 mov     [r12+48h], edi
.text:000000000000746A                 jmp     loc_70D8
.text:000000000000746A ; ---------------------------------------------------------------------------
.text:000000000000746F                 align 10h
.text:0000000000007470
.text:0000000000007470 loc_7470:                               ; CODE XREF: rpl_fts_read+CC↑j
.text:0000000000007470                 mov     rdi, r12
.text:0000000000007473                 call    restore_initial_cwd
.text:0000000000007478                 test    eax, eax
.text:000000000000747A                 jnz     short loc_7450
.text:000000000000747C                 jmp     loc_70D3
.text:000000000000747C ; ---------------------------------------------------------------------------
.text:0000000000007481                 align 8
.text:0000000000007488
.text:0000000000007488 loc_7488:                               ; CODE XREF: rpl_fts_read+104↑j
.text:0000000000007488                 mov     eax, 6
.text:000000000000748D                 lea     rsi, [r12+58h]
.text:0000000000007492                 mov     rdx, rbx
.text:0000000000007495                 mov     [rbx+70h], ax
.text:0000000000007499                 call    leave_dir_isra_12
.text:000000000000749E                 mov     edi, [r12+48h]
.text:00000000000074A3                 jmp     loc_70F3
.text:00000000000074A3 ; ---------------------------------------------------------------------------
.text:00000000000074A8                 align 10h
.text:00000000000074B0
.text:00000000000074B0 loc_74B0:                               ; CODE XREF: rpl_fts_read+303↑j
.text:00000000000074B0                 cmp     byte ptr [rbx+109h], 0
.text:00000000000074B7                 jnz     loc_72E9
.text:00000000000074BD                 jmp     loc_730B
.text:00000000000074C2 ; ---------------------------------------------------------------------------
.text:00000000000074C2
.text:00000000000074C2 loc_74C2:                               ; CODE XREF: rpl_fts_read+225↑j
.text:00000000000074C2                 mov     rbp, [r12+8]
.text:00000000000074C7                 jmp     loc_7416
.text:00000000000074CC ; ---------------------------------------------------------------------------
.text:00000000000074CC
.text:00000000000074CC loc_74CC:                               ; CODE XREF: rpl_fts_read+E8↑j
.text:00000000000074CC                 test    ah, 2
.text:00000000000074CF                 jz      loc_766D
.text:00000000000074D5                 mov     esi, edi
.text:00000000000074D7                 mov     edx, 1
.text:00000000000074DC                 mov     rdi, r12
.text:00000000000074DF                 call    cwd_advance_fd
.text:00000000000074E4                 mov     edi, [rbx+44h]
.text:00000000000074E7                 jmp     loc_70CE
.text:00000000000074EC ; ---------------------------------------------------------------------------
.text:00000000000074EC
.text:00000000000074EC loc_74EC:                               ; CODE XREF: rpl_fts_read+1C5↑j
.text:00000000000074EC                 mov     esi, [r12+48h]
.text:00000000000074F1                 test    sil, 4
.text:00000000000074F5                 jz      loc_76FC
.text:00000000000074FB                 mov     [r12], rbp
.text:00000000000074FF                 jmp     loc_7346
.text:0000000000007504 ; ---------------------------------------------------------------------------
.text:0000000000007504
.text:0000000000007504 loc_7504:                               ; CODE XREF: rpl_fts_read+42D↑j
.text:0000000000007504                 mov     edi, [r12+48h]
.text:0000000000007509                 test    edi, 2000h
.text:000000000000750F                 jnz     loc_70FE
.text:0000000000007515                 mov     r9d, [rbp+40h]
.text:0000000000007519                 test    r9d, r9d
.text:000000000000751C                 jz      short loc_7530
.text:000000000000751E                 cmp     word ptr [rbp+70h], 4
.text:0000000000007523                 jz      short loc_7530
.text:0000000000007525                 mov     r8d, 7
.text:000000000000752B                 mov     [rbp+70h], r8w
.text:0000000000007530
.text:0000000000007530 loc_7530:                               ; CODE XREF: rpl_fts_read+53C↑j
.text:0000000000007530                                         ; rpl_fts_read+543↑j
.text:0000000000007530                 lea     rsi, [r12+58h]
.text:0000000000007535                 mov     rdx, rbp
.text:0000000000007538                 call    leave_dir_isra_12
.text:000000000000753D                 jmp     loc_717A
.text:0000000000007542 ; ---------------------------------------------------------------------------
.text:0000000000007542
.text:0000000000007542 loc_7542:                               ; CODE XREF: rpl_fts_read+A9↑j
.text:0000000000007542                 mov     rdi, rbx        ; ptr
.text:0000000000007545                 xor     ebp, ebp
.text:0000000000007547                 call    free
.text:000000000000754C                 call    ___errno_location
.text:0000000000007551                 mov     dword ptr [rax], 0
.text:0000000000007557                 mov     qword ptr [r12], 0
.text:000000000000755F                 jmp     loc_717A
.text:000000000000755F ; ---------------------------------------------------------------------------
.text:0000000000007564                 align 8
.text:0000000000007568
.text:0000000000007568 loc_7568:                               ; CODE XREF: rpl_fts_read+1E3↑j
.text:0000000000007568                 mov     rbx, [rbp+8]
.text:000000000000756C                 cmp     qword ptr [rbx+68h], 0
.text:0000000000007571                 jnz     short loc_7584
.text:0000000000007573                 mov     eax, [r12+48h]
.text:0000000000007578                 and     eax, 18h
.text:000000000000757B                 cmp     eax, 18h
.text:000000000000757E                 jz      loc_76DD
.text:0000000000007584
.text:0000000000007584 loc_7584:                               ; CODE XREF: rpl_fts_read+591↑j
.text:0000000000007584                                         ; rpl_fts_read+70D↓j
.text:0000000000007584                 xor     edx, edx
.text:0000000000007586                 mov     rsi, rbp
.text:0000000000007589                 mov     rdi, r12
.text:000000000000758C                 call    fts_stat
.text:0000000000007591                 mov     edx, [rbp+90h]
.text:0000000000007597                 mov     [rbp+70h], ax
.text:000000000000759B                 and     edx, 0F000h
.text:00000000000075A1                 cmp     edx, 4000h
.text:00000000000075A7                 jnz     loc_733C
.text:00000000000075AD                 cmp     qword ptr [rbp+58h], 0
.text:00000000000075B2                 jz      loc_76CE
.text:00000000000075B8                 mov     rcx, [rbx+68h]
.text:00000000000075BC                 lea     rdx, [rcx-1]
.text:00000000000075C0                 cmp     rdx, 0FFFFFFFFFFFFFFFDh
.text:00000000000075C4                 ja      short loc_75CA
.text:00000000000075C6                 mov     [rbx+68h], rdx
.text:00000000000075CA
.text:00000000000075CA loc_75CA:                               ; CODE XREF: rpl_fts_read+5E4↑j
.text:00000000000075CA                 cmp     ax, 1
.text:00000000000075CE                 jnz     loc_717A
.text:00000000000075D4                 jmp     loc_7356
.text:00000000000075D4 ; ---------------------------------------------------------------------------
.text:00000000000075D9                 align 20h
.text:00000000000075E0
.text:00000000000075E0 loc_75E0:                               ; CODE XREF: rpl_fts_read+92↑j
.text:00000000000075E0                 mov     rax, [rbx+48h]
.text:00000000000075E4                 mov     rdx, [r12+20h]
.text:00000000000075E9                 mov     esi, 3
.text:00000000000075EE                 mov     [r12], rbx
.text:00000000000075F2                 mov     rdi, r12
.text:00000000000075F5                 mov     byte ptr [rdx+rax], 0
.text:00000000000075F9                 call    fts_build
.text:00000000000075FE                 test    rax, rax
.text:0000000000007601                 mov     rbx, rax
.text:0000000000007604                 jz      short loc_7658
.text:0000000000007606                 mov     rdi, rbp        ; ptr
.text:0000000000007609                 mov     rbp, rbx
.text:000000000000760C                 call    free
.text:0000000000007611                 jmp     loc_7392
.text:0000000000007611 ; ---------------------------------------------------------------------------
.text:0000000000007616                 align 20h
.text:0000000000007620
.text:0000000000007620 loc_7620:                               ; CODE XREF: rpl_fts_read+15F↑j
.text:0000000000007620                 mov     edi, [rbp+44h]  ; fd
.text:0000000000007623                 call    _close
.text:0000000000007628                 jmp     loc_7145
.text:000000000000762D ; ---------------------------------------------------------------------------
.text:000000000000762D
.text:000000000000762D loc_762D:                               ; CODE XREF: rpl_fts_read+3AC↑j
.text:000000000000762D                 mov     edx, 1
.text:0000000000007632                 mov     rsi, rbx
.text:0000000000007635                 mov     rdi, r12
.text:0000000000007638                 call    fts_stat
.text:000000000000763D                 cmp     ax, 1
.text:0000000000007641                 mov     [rbx+70h], ax
.text:0000000000007645                 jz      short loc_76A1
.text:0000000000007647
.text:0000000000007647 loc_7647:                               ; CODE XREF: rpl_fts_read+6CA↓j
.text:0000000000007647                                         ; rpl_fts_read+6E9↓j ...
.text:0000000000007647                 mov     esi, 3
.text:000000000000764C                 mov     rbp, rbx
.text:000000000000764F                 mov     [rbx+74h], si
.text:0000000000007653                 jmp     loc_7392
.text:0000000000007658 ; ---------------------------------------------------------------------------
.text:0000000000007658
.text:0000000000007658 loc_7658:                               ; CODE XREF: rpl_fts_read+624↑j
.text:0000000000007658                 test    byte ptr [r12+49h], 20h
.text:000000000000765E                 jnz     loc_70FE
.text:0000000000007664                 mov     rbx, [rbp+8]
.text:0000000000007668                 jmp     loc_7078
.text:000000000000766D ; ---------------------------------------------------------------------------
.text:000000000000766D
.text:000000000000766D loc_766D:                               ; CODE XREF: rpl_fts_read+4EF↑j
.text:000000000000766D                 call    _fchdir
.text:0000000000007672                 test    eax, eax
.text:0000000000007674                 jz      short loc_7689
.text:0000000000007676                 call    ___errno_location
.text:000000000000767B                 mov     eax, [rax]
.text:000000000000767D                 mov     [rbx+40h], eax
.text:0000000000007680                 or      dword ptr [r12+48h], 2000h
.text:0000000000007689
.text:0000000000007689 loc_7689:                               ; CODE XREF: rpl_fts_read+694↑j
.text:0000000000007689                 mov     edi, [rbx+44h]
.text:000000000000768C                 jmp     loc_70CE
.text:0000000000007691 ; ---------------------------------------------------------------------------
.text:0000000000007691
.text:0000000000007691 loc_7691:                               ; CODE XREF: rpl_fts_read+2AA↑j
.text:0000000000007691                 or      dword ptr [r12+48h], 2000h
.text:000000000000769A                 xor     ebp, ebp
.text:000000000000769C                 jmp     loc_717A
.text:00000000000076A1 ; ---------------------------------------------------------------------------
.text:00000000000076A1
.text:00000000000076A1 loc_76A1:                               ; CODE XREF: rpl_fts_read+665↑j
.text:00000000000076A1                 mov     esi, [r12+48h]
.text:00000000000076A6                 test    sil, 4
.text:00000000000076AA                 jnz     short loc_7647
.text:00000000000076AC                 mov     edi, [r12+2Ch]
.text:00000000000076B1                 lea     rdx, asc_B15A+1 ; "."
.text:00000000000076B8                 call    diropen_isra_6
.text:00000000000076BD                 test    eax, eax
.text:00000000000076BF                 mov     [rbx+44h], eax
.text:00000000000076C2                 js      short loc_7740
.text:00000000000076C4                 or      word ptr [rbx+72h], 2
.text:00000000000076C9                 jmp     loc_7647
.text:00000000000076CE ; ---------------------------------------------------------------------------
.text:00000000000076CE
.text:00000000000076CE loc_76CE:                               ; CODE XREF: rpl_fts_read+5D2↑j
.text:00000000000076CE                 cmp     ax, 1
.text:00000000000076D2                 jnz     loc_717A
.text:00000000000076D8                 jmp     loc_734D
.text:00000000000076DD ; ---------------------------------------------------------------------------
.text:00000000000076DD
.text:00000000000076DD loc_76DD:                               ; CODE XREF: rpl_fts_read+59E↑j
.text:00000000000076DD                 mov     esi, [r12+2Ch]
.text:00000000000076E2                 mov     rdi, rbx
.text:00000000000076E5                 call    leaf_optimization
.text:00000000000076EA                 cmp     eax, 2
.text:00000000000076ED                 jnz     loc_7584
.text:00000000000076F3                 movzx   eax, word ptr [rbp+70h]
.text:00000000000076F7                 jmp     loc_733C
.text:00000000000076FC ; ---------------------------------------------------------------------------
.text:00000000000076FC
.text:00000000000076FC loc_76FC:                               ; CODE XREF: rpl_fts_read+515↑j
.text:00000000000076FC                 mov     edi, [r12+2Ch]
.text:0000000000007701                 lea     rdx, asc_B15A+1 ; "."
.text:0000000000007708                 call    diropen_isra_6
.text:000000000000770D                 test    eax, eax
.text:000000000000770F                 mov     [rbp+44h], eax
.text:0000000000007712                 js      short loc_7722
.text:0000000000007714                 or      word ptr [rbp+72h], 2
.text:0000000000007719                 movzx   eax, word ptr [rbp+70h]
.text:000000000000771D                 jmp     loc_732E
.text:0000000000007722 ; ---------------------------------------------------------------------------
.text:0000000000007722
.text:0000000000007722 loc_7722:                               ; CODE XREF: rpl_fts_read+732↑j
.text:0000000000007722                 call    ___errno_location
.text:0000000000007727                 mov     eax, [rax]
.text:0000000000007729                 mov     r11d, 7
.text:000000000000772F                 mov     [rbp+70h], r11w
.text:0000000000007734                 mov     [rbp+40h], eax
.text:0000000000007737                 mov     [r12], rbp
.text:000000000000773B                 jmp     loc_717A
.text:0000000000007740 ; ---------------------------------------------------------------------------
.text:0000000000007740
.text:0000000000007740 loc_7740:                               ; CODE XREF: rpl_fts_read+6E2↑j
.text:0000000000007740                 call    ___errno_location
.text:0000000000007745                 mov     eax, [rax]
.text:0000000000007747                 mov     edi, 7
.text:000000000000774C                 mov     [rbx+70h], di
.text:0000000000007750                 mov     [rbx+40h], eax
.text:0000000000007753                 jmp     loc_7647
.text:0000000000007753 ; } // starts at 6FE0
.text:0000000000007753 rpl_fts_read    endp
.text:0000000000007753
.text:0000000000007753 ; ---------------------------------------------------------------------------
.text:0000000000007758                 align 20h
.text:0000000000007760
.text:0000000000007760 ; =============== S U B R O U T I N E =======================================
.text:0000000000007760
.text:0000000000007760
.text:0000000000007760                 public rpl_fts_set
.text:0000000000007760 rpl_fts_set     proc near               ; CODE XREF: main+34B↑p
.text:0000000000007760                                         ; main+578↑p ...
.text:0000000000007760 ; __unwind {
.text:0000000000007760                 cmp     edx, 4
.text:0000000000007763                 ja      short loc_7770
.text:0000000000007765                 mov     [rsi+74h], dx
.text:0000000000007769                 xor     eax, eax
.text:000000000000776B                 retn
.text:000000000000776B ; ---------------------------------------------------------------------------
.text:000000000000776C                 align 10h
.text:0000000000007770
.text:0000000000007770 loc_7770:                               ; CODE XREF: rpl_fts_set+3↑j
.text:0000000000007770                 sub     rsp, 8
.text:0000000000007774                 call    ___errno_location
.text:0000000000007779                 mov     dword ptr [rax], 16h
.text:000000000000777F                 mov     eax, 1
.text:0000000000007784                 add     rsp, 8
.text:0000000000007788                 retn
.text:0000000000007788 ; } // starts at 7760
.text:0000000000007788 rpl_fts_set     endp
.text:0000000000007788
.text:0000000000007788 ; ---------------------------------------------------------------------------
.text:0000000000007789                 align 10h
.text:0000000000007790
.text:0000000000007790 ; =============== S U B R O U T I N E =======================================
.text:0000000000007790
.text:0000000000007790
.text:0000000000007790                 public rpl_fts_children
.text:0000000000007790 rpl_fts_children proc near
.text:0000000000007790 ; __unwind {
.text:0000000000007790                 push    r14
.text:0000000000007792                 push    r13
.text:0000000000007794                 push    r12
.text:0000000000007796                 push    rbp
.text:0000000000007797                 mov     r12d, esi
.text:000000000000779A                 push    rbx
.text:000000000000779B                 mov     rbx, rdi
.text:000000000000779E                 call    ___errno_location
.text:00000000000077A3                 test    r12d, 0FFFFEFFFh
.text:00000000000077AA                 mov     r13, rax
.text:00000000000077AD                 jnz     loc_7898
.text:00000000000077B3                 mov     rbp, [rbx]
.text:00000000000077B6                 mov     dword ptr [rax], 0
.text:00000000000077BC                 test    byte ptr [rbx+49h], 20h
.text:00000000000077C0                 jnz     short loc_7840
.text:00000000000077C2                 movzx   eax, word ptr [rbp+70h]
.text:00000000000077C6                 cmp     ax, 9
.text:00000000000077CA                 jz      short loc_7830
.text:00000000000077CC                 cmp     ax, 1
.text:00000000000077D0                 jnz     short loc_7840
.text:00000000000077D2                 mov     rdi, [rbx+8]    ; ptr
.text:00000000000077D6                 test    rdi, rdi
.text:00000000000077D9                 jz      short loc_77E0
.text:00000000000077DB                 call    fts_lfree
.text:00000000000077E0
.text:00000000000077E0 loc_77E0:                               ; CODE XREF: rpl_fts_children+49↑j
.text:00000000000077E0                 cmp     r12d, 1000h
.text:00000000000077E7                 mov     r14d, 1
.text:00000000000077ED                 jnz     short loc_77FC
.text:00000000000077EF                 or      dword ptr [rbx+48h], 1000h
.text:00000000000077F6                 mov     r14d, 2
.text:00000000000077FC
.text:00000000000077FC loc_77FC:                               ; CODE XREF: rpl_fts_children+5D↑j
.text:00000000000077FC                 cmp     qword ptr [rbp+58h], 0
.text:0000000000007801                 jnz     short loc_7815
.text:0000000000007803                 mov     rax, [rbp+30h]
.text:0000000000007807                 cmp     byte ptr [rax], 2Fh ; '/'
.text:000000000000780A                 jz      short loc_7815
.text:000000000000780C                 mov     esi, [rbx+48h]
.text:000000000000780F                 test    sil, 4
.text:0000000000007813                 jz      short loc_7850
.text:0000000000007815
.text:0000000000007815 loc_7815:                               ; CODE XREF: rpl_fts_children+71↑j
.text:0000000000007815                                         ; rpl_fts_children+7A↑j
.text:0000000000007815                 mov     esi, r14d
.text:0000000000007818                 mov     rdi, rbx
.text:000000000000781B                 call    fts_build
.text:0000000000007820                 mov     [rbx+8], rax
.text:0000000000007824
.text:0000000000007824 loc_7824:                               ; CODE XREF: rpl_fts_children+100↓j
.text:0000000000007824                                         ; rpl_fts_children+110↓j ...
.text:0000000000007824                 pop     rbx
.text:0000000000007825                 pop     rbp
.text:0000000000007826                 pop     r12
.text:0000000000007828                 pop     r13
.text:000000000000782A                 pop     r14
.text:000000000000782C                 retn
.text:000000000000782C ; ---------------------------------------------------------------------------
.text:000000000000782D                 align 10h
.text:0000000000007830
.text:0000000000007830 loc_7830:                               ; CODE XREF: rpl_fts_children+3A↑j
.text:0000000000007830                 pop     rbx
.text:0000000000007831                 mov     rax, [rbp+10h]
.text:0000000000007835                 pop     rbp
.text:0000000000007836                 pop     r12
.text:0000000000007838                 pop     r13
.text:000000000000783A                 pop     r14
.text:000000000000783C                 retn
.text:000000000000783C ; ---------------------------------------------------------------------------
.text:000000000000783D                 align 20h
.text:0000000000007840
.text:0000000000007840 loc_7840:                               ; CODE XREF: rpl_fts_children+30↑j
.text:0000000000007840                                         ; rpl_fts_children+40↑j
.text:0000000000007840                 pop     rbx
.text:0000000000007841                 xor     eax, eax
.text:0000000000007843                 pop     rbp
.text:0000000000007844                 pop     r12
.text:0000000000007846                 pop     r13
.text:0000000000007848                 pop     r14
.text:000000000000784A                 retn
.text:000000000000784A ; ---------------------------------------------------------------------------
.text:000000000000784B                 align 10h
.text:0000000000007850
.text:0000000000007850 loc_7850:                               ; CODE XREF: rpl_fts_children+83↑j
.text:0000000000007850                 mov     edi, [rbx+2Ch]
.text:0000000000007853                 lea     rdx, asc_B15A+1 ; "."
.text:000000000000785A                 call    diropen_isra_6
.text:000000000000785F                 test    eax, eax
.text:0000000000007861                 mov     ebp, eax
.text:0000000000007863                 js      short loc_78B9
.text:0000000000007865                 mov     esi, r14d
.text:0000000000007868                 mov     rdi, rbx
.text:000000000000786B                 call    fts_build
.text:0000000000007870                 test    byte ptr [rbx+49h], 2
.text:0000000000007874                 mov     [rbx+8], rax
.text:0000000000007878                 jnz     short loc_78A8
.text:000000000000787A                 mov     edi, ebp        ; fd
.text:000000000000787C                 call    _fchdir
.text:0000000000007881                 test    eax, eax
.text:0000000000007883                 jnz     short loc_78C8
.text:0000000000007885                 mov     edi, ebp        ; fd
.text:0000000000007887                 call    _close
.text:000000000000788C
.text:000000000000788C loc_788C:                               ; CODE XREF: rpl_fts_children+127↓j
.text:000000000000788C                 mov     rax, [rbx+8]
.text:0000000000007890                 jmp     short loc_7824
.text:0000000000007890 ; ---------------------------------------------------------------------------
.text:0000000000007892                 align 8
.text:0000000000007898
.text:0000000000007898 loc_7898:                               ; CODE XREF: rpl_fts_children+1D↑j
.text:0000000000007898                 mov     dword ptr [rax], 16h
.text:000000000000789E                 xor     eax, eax
.text:00000000000078A0                 jmp     loc_7824
.text:00000000000078A0 ; ---------------------------------------------------------------------------
.text:00000000000078A5                 align 8
.text:00000000000078A8
.text:00000000000078A8 loc_78A8:                               ; CODE XREF: rpl_fts_children+E8↑j
.text:00000000000078A8                 mov     edx, 1
.text:00000000000078AD                 mov     esi, ebp
.text:00000000000078AF                 mov     rdi, rbx
.text:00000000000078B2                 call    cwd_advance_fd
.text:00000000000078B7                 jmp     short loc_788C
.text:00000000000078B9 ; ---------------------------------------------------------------------------
.text:00000000000078B9
.text:00000000000078B9 loc_78B9:                               ; CODE XREF: rpl_fts_children+D3↑j
.text:00000000000078B9                 mov     qword ptr [rbx+8], 0
.text:00000000000078C1                 xor     eax, eax
.text:00000000000078C3                 jmp     loc_7824
.text:00000000000078C8 ; ---------------------------------------------------------------------------
.text:00000000000078C8
.text:00000000000078C8 loc_78C8:                               ; CODE XREF: rpl_fts_children+F3↑j
.text:00000000000078C8                 mov     ebx, [r13+0]
.text:00000000000078CC                 mov     edi, ebp        ; fd
.text:00000000000078CE                 call    _close
.text:00000000000078D3                 xor     eax, eax
.text:00000000000078D5                 mov     [r13+0], ebx
.text:00000000000078D9                 jmp     loc_7824
.text:00000000000078D9 ; } // starts at 7790
.text:00000000000078D9 rpl_fts_children endp
.text:00000000000078D9
.text:00000000000078D9 ; ---------------------------------------------------------------------------
.text:00000000000078DE                 align 20h
.text:00000000000078E0
.text:00000000000078E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000078E0
.text:00000000000078E0 ; Attributes: info_from_lumina
.text:00000000000078E0
.text:00000000000078E0 ; size_t __fastcall rpl_mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
.text:00000000000078E0                 public rpl_mbrtowc
.text:00000000000078E0 rpl_mbrtowc     proc near               ; CODE XREF: quotearg_buffer_restyled+956↑p
.text:00000000000078E0
.text:00000000000078E0 pwc             = dword ptr -34h
.text:00000000000078E0 var_30          = qword ptr -30h
.text:00000000000078E0
.text:00000000000078E0 ; __unwind {
.text:00000000000078E0                 push    r13
.text:00000000000078E2                 push    r12
.text:00000000000078E4                 mov     r13, rsi
.text:00000000000078E7                 push    rbp
.text:00000000000078E8                 push    rbx
.text:00000000000078E9                 mov     rbx, rdi
.text:00000000000078EC                 mov     r12, rdx
.text:00000000000078EF                 sub     rsp, 18h
.text:00000000000078F3                 mov     rax, fs:28h
.text:00000000000078FC                 mov     [rsp+38h+var_30], rax
.text:0000000000007901                 xor     eax, eax
.text:0000000000007903                 lea     rax, [rsp+38h+pwc]
.text:0000000000007908                 test    rdi, rdi
.text:000000000000790B                 cmovz   rbx, rax
.text:000000000000790F                 mov     rdi, rbx        ; pwc
.text:0000000000007912                 call    _mbrtowc
.text:0000000000007917                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:000000000000791B                 mov     rbp, rax
.text:000000000000791E                 jbe     short loc_7940
.text:0000000000007920                 test    r12, r12
.text:0000000000007923                 jz      short loc_7940
.text:0000000000007925                 xor     edi, edi
.text:0000000000007927                 call    hard_locale
.text:000000000000792C                 test    al, al
.text:000000000000792E                 jnz     short loc_7940
.text:0000000000007930                 movzx   eax, byte ptr [r13+0]
.text:0000000000007935                 mov     ebp, 1
.text:000000000000793A                 mov     [rbx], eax
.text:000000000000793C                 nop     dword ptr [rax+00h]
.text:0000000000007940
.text:0000000000007940 loc_7940:                               ; CODE XREF: rpl_mbrtowc+3E↑j
.text:0000000000007940                                         ; rpl_mbrtowc+43↑j ...
.text:0000000000007940                 mov     rdx, [rsp+38h+var_30]
.text:0000000000007945                 xor     rdx, fs:28h
.text:000000000000794E                 mov     rax, rbp
.text:0000000000007951                 jnz     short loc_795E
.text:0000000000007953                 add     rsp, 18h
.text:0000000000007957                 pop     rbx
.text:0000000000007958                 pop     rbp
.text:0000000000007959                 pop     r12
.text:000000000000795B                 pop     r13
.text:000000000000795D                 retn
.text:000000000000795E ; ---------------------------------------------------------------------------
.text:000000000000795E
.text:000000000000795E loc_795E:                               ; CODE XREF: rpl_mbrtowc+71↑j
.text:000000000000795E                 call    ___stack_chk_fail
.text:000000000000795E ; } // starts at 78E0
.text:000000000000795E rpl_mbrtowc     endp
.text:000000000000795E
.text:000000000000795E ; ---------------------------------------------------------------------------
.text:0000000000007963                 align 10h
.text:0000000000007970
.text:0000000000007970 ; =============== S U B R O U T I N E =======================================
.text:0000000000007970
.text:0000000000007970
.text:0000000000007970 ; __int64 __fastcall getfileconat(int fd)
.text:0000000000007970                 public getfileconat
.text:0000000000007970 getfileconat    proc near               ; CODE XREF: main+646↑p
.text:0000000000007970                                         ; lgetfileconat↓j ...
.text:0000000000007970
.text:0000000000007970 var_1008        = dword ptr -1008h
.text:0000000000007970 var_FF8         = byte ptr -0FF8h
.text:0000000000007970 var_30          = qword ptr -30h
.text:0000000000007970
.text:0000000000007970 ; __unwind {
.text:0000000000007970                 push    r13
.text:0000000000007972                 push    r12
.text:0000000000007974                 mov     r12, rsi
.text:0000000000007977                 push    rbp
.text:0000000000007978                 push    rbx
.text:0000000000007979                 mov     ebx, edi
.text:000000000000797B                 sub     rsp, 0FE8h
.text:0000000000007982                 mov     rax, fs:28h
.text:000000000000798B                 mov     [rsp+1008h+var_30], rax
.text:0000000000007993                 xor     eax, eax
.text:0000000000007995                 call    ___errno_location
.text:000000000000799A                 cmp     ebx, 0FFFFFF9Ch
.text:000000000000799D                 mov     rbp, rax
.text:00000000000079A0                 jz      short loc_7A20
.text:00000000000079A2                 cmp     byte ptr [r12], 2Fh ; '/'
.text:00000000000079A7                 jz      short loc_7A20
.text:00000000000079A9                 lea     r13, [rsp+1008h+var_FF8]
.text:00000000000079AE                 mov     rdx, r12
.text:00000000000079B1                 mov     esi, ebx
.text:00000000000079B3                 mov     rdi, r13
.text:00000000000079B6                 call    openat_proc_name
.text:00000000000079BB                 test    rax, rax
.text:00000000000079BE                 jz      short loc_79D4
.text:00000000000079C0                 cmp     rax, r13
.text:00000000000079C3                 mov     dword ptr [rbp+0], 5Fh ; '_'
.text:00000000000079CA                 jz      short loc_79D4
.text:00000000000079CC                 mov     rdi, rax        ; ptr
.text:00000000000079CF                 call    free
.text:00000000000079D4
.text:00000000000079D4 loc_79D4:                               ; CODE XREF: getfileconat+4E↑j
.text:00000000000079D4                                         ; getfileconat+5A↑j
.text:00000000000079D4                 mov     r12, rsp
.text:00000000000079D7                 mov     rdi, r12
.text:00000000000079DA                 call    save_cwd
.text:00000000000079DF                 test    eax, eax
.text:00000000000079E1                 jnz     loc_7A7E
.text:00000000000079E7                 test    ebx, ebx
.text:00000000000079E9                 js      short loc_79F0
.text:00000000000079EB                 cmp     [rsp+1008h+var_1008], ebx
.text:00000000000079EE                 jz      short loc_7A60
.text:00000000000079F0
.text:00000000000079F0 loc_79F0:                               ; CODE XREF: getfileconat+79↑j
.text:00000000000079F0                 mov     edi, ebx        ; fd
.text:00000000000079F2                 call    _fchdir
.text:00000000000079F7                 test    eax, eax
.text:00000000000079F9                 jnz     short loc_7A50
.text:00000000000079FB                 mov     dword ptr [rbp+0], 5Fh ; '_'
.text:0000000000007A02                 mov     rdi, r12
.text:0000000000007A05                 call    restore_cwd
.text:0000000000007A0A                 test    eax, eax
.text:0000000000007A0C                 jnz     short loc_7A76
.text:0000000000007A0E                 mov     rdi, r12
.text:0000000000007A11                 call    free_cwd
.text:0000000000007A16                 db      2Eh
.text:0000000000007A16                 nop     word ptr [rax+rax+00000000h]
.text:0000000000007A20
.text:0000000000007A20 loc_7A20:                               ; CODE XREF: getfileconat+30↑j
.text:0000000000007A20                                         ; getfileconat+37↑j
.text:0000000000007A20                 mov     dword ptr [rbp+0], 5Fh ; '_'
.text:0000000000007A27
.text:0000000000007A27 loc_7A27:                               ; CODE XREF: getfileconat+EE↓j
.text:0000000000007A27                                         ; getfileconat+FF↓j
.text:0000000000007A27                 mov     rcx, [rsp+1008h+var_30]
.text:0000000000007A2F                 xor     rcx, fs:28h
.text:0000000000007A38                 mov     eax, 0FFFFFFFFh
.text:0000000000007A3D                 jnz     short loc_7A71
.text:0000000000007A3F                 add     rsp, 0FE8h
.text:0000000000007A46                 pop     rbx
.text:0000000000007A47                 pop     rbp
.text:0000000000007A48                 pop     r12
.text:0000000000007A4A                 pop     r13
.text:0000000000007A4C                 retn
.text:0000000000007A4C ; ---------------------------------------------------------------------------
.text:0000000000007A4D                 align 10h
.text:0000000000007A50
.text:0000000000007A50 loc_7A50:                               ; CODE XREF: getfileconat+89↑j
.text:0000000000007A50                 mov     ebx, [rbp+0]
.text:0000000000007A53                 mov     rdi, r12
.text:0000000000007A56                 call    free_cwd
.text:0000000000007A5B                 mov     [rbp+0], ebx
.text:0000000000007A5E                 jmp     short loc_7A27
.text:0000000000007A60 ; ---------------------------------------------------------------------------
.text:0000000000007A60
.text:0000000000007A60 loc_7A60:                               ; CODE XREF: getfileconat+7E↑j
.text:0000000000007A60                 mov     rdi, r12
.text:0000000000007A63                 call    free_cwd
.text:0000000000007A68                 mov     dword ptr [rbp+0], 9
.text:0000000000007A6F                 jmp     short loc_7A27
.text:0000000000007A71 ; ---------------------------------------------------------------------------
.text:0000000000007A71
.text:0000000000007A71 loc_7A71:                               ; CODE XREF: getfileconat+CD↑j
.text:0000000000007A71                 call    ___stack_chk_fail
.text:0000000000007A76 ; ---------------------------------------------------------------------------
.text:0000000000007A76
.text:0000000000007A76 loc_7A76:                               ; CODE XREF: getfileconat+9C↑j
.text:0000000000007A76                 mov     edi, [rbp+0]    ; errnum
.text:0000000000007A79                 call    openat_restore_fail
.text:0000000000007A7E ; ---------------------------------------------------------------------------
.text:0000000000007A7E
.text:0000000000007A7E loc_7A7E:                               ; CODE XREF: getfileconat+71↑j
.text:0000000000007A7E                 mov     edi, [rbp+0]    ; errnum
.text:0000000000007A81                 call    openat_save_fail
.text:0000000000007A81 ; } // starts at 7970
.text:0000000000007A81 getfileconat    endp
.text:0000000000007A81
.text:0000000000007A81 ; ---------------------------------------------------------------------------
.text:0000000000007A86                 align 10h
.text:0000000000007A90
.text:0000000000007A90 ; =============== S U B R O U T I N E =======================================
.text:0000000000007A90
.text:0000000000007A90
.text:0000000000007A90                 public lgetfileconat
.text:0000000000007A90 lgetfileconat   proc near               ; CODE XREF: main:loc_23FD↑p
.text:0000000000007A90 ; __unwind {
.text:0000000000007A90                 jmp     getfileconat
.text:0000000000007A90 ; } // starts at 7A90
.text:0000000000007A90 lgetfileconat   endp
.text:0000000000007A90
.text:0000000000007A90 ; ---------------------------------------------------------------------------
.text:0000000000007A95                 align 20h
.text:0000000000007AA0
.text:0000000000007AA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000007AA0
.text:0000000000007AA0
.text:0000000000007AA0                 public setfileconat
.text:0000000000007AA0 setfileconat    proc near               ; CODE XREF: main+441↑p
.text:0000000000007AA0 ; __unwind {
.text:0000000000007AA0                 jmp     getfileconat
.text:0000000000007AA0 ; } // starts at 7AA0
.text:0000000000007AA0 setfileconat    endp
.text:0000000000007AA0
.text:0000000000007AA0 ; ---------------------------------------------------------------------------
.text:0000000000007AA5                 align 10h
.text:0000000000007AB0
.text:0000000000007AB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000007AB0
.text:0000000000007AB0
.text:0000000000007AB0                 public lsetfileconat
.text:0000000000007AB0 lsetfileconat   proc near               ; CODE XREF: main:loc_233D↑p
.text:0000000000007AB0 ; __unwind {
.text:0000000000007AB0                 jmp     getfileconat
.text:0000000000007AB0 ; } // starts at 7AB0
.text:0000000000007AB0 lsetfileconat   endp
.text:0000000000007AB0
.text:0000000000007AB0 ; ---------------------------------------------------------------------------
.text:0000000000007AB5                 align 20h
.text:0000000000007AC0
.text:0000000000007AC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000007AC0
.text:0000000000007AC0 ; Attributes: info_from_lumina
.text:0000000000007AC0
.text:0000000000007AC0 ; int __fastcall close_stream(FILE *stream)
.text:0000000000007AC0                 public close_stream
.text:0000000000007AC0 close_stream    proc near               ; CODE XREF: close_stdout+D↑p
.text:0000000000007AC0                                         ; close_stdout+33↑p
.text:0000000000007AC0 ; __unwind {
.text:0000000000007AC0                 push    r12
.text:0000000000007AC2                 push    rbp
.text:0000000000007AC3                 mov     rbp, rdi
.text:0000000000007AC6                 push    rbx
.text:0000000000007AC7                 call    ___fpending
.text:0000000000007ACC                 mov     ebx, [rbp+0]
.text:0000000000007ACF                 mov     rdi, rbp        ; stream
.text:0000000000007AD2                 mov     r12, rax
.text:0000000000007AD5                 call    rpl_fclose
.text:0000000000007ADA                 and     ebx, 20h
.text:0000000000007ADD                 test    ebx, ebx
.text:0000000000007ADF                 jnz     short loc_7AF8
.text:0000000000007AE1                 test    eax, eax
.text:0000000000007AE3                 jz      short loc_7AEF
.text:0000000000007AE5                 test    r12, r12
.text:0000000000007AE8                 mov     eax, 0FFFFFFFFh
.text:0000000000007AED                 jz      short loc_7B28
.text:0000000000007AEF
.text:0000000000007AEF loc_7AEF:                               ; CODE XREF: close_stream+23↑j
.text:0000000000007AEF                 pop     rbx
.text:0000000000007AF0                 pop     rbp
.text:0000000000007AF1                 pop     r12
.text:0000000000007AF3                 retn
.text:0000000000007AF3 ; ---------------------------------------------------------------------------
.text:0000000000007AF4                 align 8
.text:0000000000007AF8
.text:0000000000007AF8 loc_7AF8:                               ; CODE XREF: close_stream+1F↑j
.text:0000000000007AF8                 test    eax, eax
.text:0000000000007AFA                 jnz     short loc_7B18
.text:0000000000007AFC                 call    ___errno_location
.text:0000000000007B01                 mov     dword ptr [rax], 0
.text:0000000000007B07                 mov     eax, 0FFFFFFFFh
.text:0000000000007B0C                 pop     rbx
.text:0000000000007B0D                 pop     rbp
.text:0000000000007B0E                 pop     r12
.text:0000000000007B10                 retn
.text:0000000000007B10 ; ---------------------------------------------------------------------------
.text:0000000000007B11                 align 8
.text:0000000000007B18
.text:0000000000007B18 loc_7B18:                               ; CODE XREF: close_stream+3A↑j
.text:0000000000007B18                 pop     rbx
.text:0000000000007B19                 mov     eax, 0FFFFFFFFh
.text:0000000000007B1E                 pop     rbp
.text:0000000000007B1F                 pop     r12
.text:0000000000007B21                 retn
.text:0000000000007B21 ; ---------------------------------------------------------------------------
.text:0000000000007B22                 align 8
.text:0000000000007B28
.text:0000000000007B28 loc_7B28:                               ; CODE XREF: close_stream+2D↑j
.text:0000000000007B28                 call    ___errno_location
.text:0000000000007B2D                 cmp     dword ptr [rax], 9
.text:0000000000007B30                 pop     rbx
.text:0000000000007B31                 pop     rbp
.text:0000000000007B32                 pop     r12
.text:0000000000007B34                 setnz   al
.text:0000000000007B37                 movzx   eax, al
.text:0000000000007B3A                 neg     eax
.text:0000000000007B3C                 retn
.text:0000000000007B3C ; } // starts at 7AC0
.text:0000000000007B3C close_stream    endp
.text:0000000000007B3C
.text:0000000000007B3C ; ---------------------------------------------------------------------------
.text:0000000000007B3D                 align 20h
.text:0000000000007B40
.text:0000000000007B40 ; =============== S U B R O U T I N E =======================================
.text:0000000000007B40
.text:0000000000007B40
.text:0000000000007B40                 public cycle_check_init
.text:0000000000007B40 cycle_check_init proc near              ; CODE XREF: setup_dir_isra_4+57↑p
.text:0000000000007B40 ; __unwind {
.text:0000000000007B40                 mov     qword ptr [rdi+10h], 0
.text:0000000000007B48                 mov     dword ptr [rdi+18h], 95F616h
.text:0000000000007B4F                 retn
.text:0000000000007B4F ; } // starts at 7B40
.text:0000000000007B4F cycle_check_init endp
.text:0000000000007B4F
.text:0000000000007B50
.text:0000000000007B50 ; =============== S U B R O U T I N E =======================================
.text:0000000000007B50
.text:0000000000007B50
.text:0000000000007B50                 public cycle_check
.text:0000000000007B50 cycle_check     proc near               ; CODE XREF: enter_dir_isra_10+88↑p
.text:0000000000007B50 ; __unwind {
.text:0000000000007B50                 cmp     dword ptr [rdi+18h], 95F616h
.text:0000000000007B57                 jnz     short loc_7BB7
.text:0000000000007B59                 mov     rdx, [rdi+10h]
.text:0000000000007B5D                 mov     rcx, [rsi+8]
.text:0000000000007B61                 test    rdx, rdx
.text:0000000000007B64                 jz      short loc_7B80
.text:0000000000007B66                 cmp     [rdi], rcx
.text:0000000000007B69                 jz      short loc_7B98
.text:0000000000007B6B
.text:0000000000007B6B loc_7B6B:                               ; CODE XREF: cycle_check+4F↓j
.text:0000000000007B6B                 lea     r8, [rdx+1]
.text:0000000000007B6F                 xor     eax, eax
.text:0000000000007B71                 test    rdx, r8
.text:0000000000007B74                 mov     [rdi+10h], r8
.text:0000000000007B78                 jz      short loc_7BB0
.text:0000000000007B7A                 rep retn
.text:0000000000007B7A ; ---------------------------------------------------------------------------
.text:0000000000007B7C                 align 20h
.text:0000000000007B80
.text:0000000000007B80 loc_7B80:                               ; CODE XREF: cycle_check+14↑j
.text:0000000000007B80                 mov     qword ptr [rdi+10h], 1
.text:0000000000007B88
.text:0000000000007B88 loc_7B88:                               ; CODE XREF: cycle_check+65↓j
.text:0000000000007B88                 mov     rax, [rsi]
.text:0000000000007B8B                 mov     [rdi], rcx
.text:0000000000007B8E                 mov     [rdi+8], rax
.text:0000000000007B92                 xor     eax, eax
.text:0000000000007B94                 retn
.text:0000000000007B94 ; ---------------------------------------------------------------------------
.text:0000000000007B95                 align 8
.text:0000000000007B98
.text:0000000000007B98 loc_7B98:                               ; CODE XREF: cycle_check+19↑j
.text:0000000000007B98                 mov     rax, [rdi+8]
.text:0000000000007B9C                 cmp     [rsi], rax
.text:0000000000007B9F                 jnz     short loc_7B6B
.text:0000000000007BA1
.text:0000000000007BA1 loc_7BA1:                               ; CODE XREF: cycle_check+63↓j
.text:0000000000007BA1                 mov     eax, 1
.text:0000000000007BA6                 retn
.text:0000000000007BA6 ; ---------------------------------------------------------------------------
.text:0000000000007BA7                 align 10h
.text:0000000000007BB0
.text:0000000000007BB0 loc_7BB0:                               ; CODE XREF: cycle_check+28↑j
.text:0000000000007BB0                 test    r8, r8
.text:0000000000007BB3                 jz      short loc_7BA1
.text:0000000000007BB5                 jmp     short loc_7B88
.text:0000000000007BB7 ; ---------------------------------------------------------------------------
.text:0000000000007BB7
.text:0000000000007BB7 loc_7BB7:                               ; CODE XREF: cycle_check+7↑j
.text:0000000000007BB7                 lea     rcx, __PRETTY_FUNCTION___3994 ; "cycle_check"
.text:0000000000007BBE                 lea     rsi, aCoreutils831Li_0 ; "../coreutils-8.31/lib/cycle-check.c"
.text:0000000000007BC5                 lea     rdi, aStateMagic9827 ; "state->magic == 9827862"
.text:0000000000007BCC                 sub     rsp, 8
.text:0000000000007BD0                 mov     edx, 3Ch ; '<'  ; line
.text:0000000000007BD5                 call    ___assert_fail
.text:0000000000007BD5 ; } // starts at 7B50
.text:0000000000007BD5 cycle_check     endp
.text:0000000000007BD5
.text:0000000000007BD5 ; ---------------------------------------------------------------------------
.text:0000000000007BDA                 align 20h
.text:0000000000007BE0
.text:0000000000007BE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000007BE0
.text:0000000000007BE0
.text:0000000000007BE0                 public open_safer
.text:0000000000007BE0 open_safer      proc near               ; CODE XREF: diropen_isra_6+23↑j
.text:0000000000007BE0                                         ; save_cwd+1A↓p
.text:0000000000007BE0
.text:0000000000007BE0 var_58          = dword ptr -58h
.text:0000000000007BE0 var_50          = qword ptr -50h
.text:0000000000007BE0 var_48          = qword ptr -48h
.text:0000000000007BE0 var_40          = qword ptr -40h
.text:0000000000007BE0 var_38          = byte ptr -38h
.text:0000000000007BE0 var_28          = qword ptr -28h
.text:0000000000007BE0 arg_0           = byte ptr  8
.text:0000000000007BE0
.text:0000000000007BE0 ; __unwind {
.text:0000000000007BE0                 sub     rsp, 58h
.text:0000000000007BE4                 mov     [rsp+58h+var_28], rdx
.text:0000000000007BE9                 xor     edx, edx
.text:0000000000007BEB                 mov     rax, fs:28h
.text:0000000000007BF4                 mov     [rsp+58h+var_40], rax
.text:0000000000007BF9                 xor     eax, eax
.text:0000000000007BFB                 test    sil, 40h
.text:0000000000007BFF                 jnz     short loc_7C28
.text:0000000000007C01
.text:0000000000007C01 loc_7C01:                               ; CODE XREF: open_safer+67↓j
.text:0000000000007C01                 xor     eax, eax
.text:0000000000007C03                 call    _open
.text:0000000000007C08                 mov     edi, eax        ; fd
.text:0000000000007C0A                 call    fd_safer_flag
.text:0000000000007C0F                 mov     rcx, [rsp+58h+var_40]
.text:0000000000007C14                 xor     rcx, fs:28h
.text:0000000000007C1D                 jnz     short loc_7C49
.text:0000000000007C1F                 add     rsp, 58h
.text:0000000000007C23                 retn
.text:0000000000007C23 ; ---------------------------------------------------------------------------
.text:0000000000007C24                 align 8
.text:0000000000007C28
.text:0000000000007C28 loc_7C28:                               ; CODE XREF: open_safer+1F↑j
.text:0000000000007C28                 lea     rax, [rsp+58h+arg_0]
.text:0000000000007C2D                 mov     [rsp+58h+var_58], 10h
.text:0000000000007C34                 mov     edx, dword ptr [rsp+58h+var_28]
.text:0000000000007C38                 mov     [rsp+58h+var_50], rax
.text:0000000000007C3D                 lea     rax, [rsp+58h+var_38]
.text:0000000000007C42                 mov     [rsp+58h+var_48], rax
.text:0000000000007C47                 jmp     short loc_7C01
.text:0000000000007C49 ; ---------------------------------------------------------------------------
.text:0000000000007C49
.text:0000000000007C49 loc_7C49:                               ; CODE XREF: open_safer+3D↑j
.text:0000000000007C49                 call    ___stack_chk_fail
.text:0000000000007C49 ; } // starts at 7BE0
.text:0000000000007C49 open_safer      endp
.text:0000000000007C49
.text:0000000000007C49 ; ---------------------------------------------------------------------------
.text:0000000000007C4E                 align 10h
.text:0000000000007C50
.text:0000000000007C50 ; =============== S U B R O U T I N E =======================================
.text:0000000000007C50
.text:0000000000007C50
.text:0000000000007C50                 public hard_locale
.text:0000000000007C50 hard_locale     proc near               ; CODE XREF: rpl_mbrtowc+47↑p
.text:0000000000007C50 ; __unwind {
.text:0000000000007C50                 sub     rsp, 8
.text:0000000000007C54                 xor     esi, esi        ; locale
.text:0000000000007C56                 call    _setlocale
.text:0000000000007C5B                 mov     rdx, rax
.text:0000000000007C5E                 mov     eax, 1
.text:0000000000007C63                 test    rdx, rdx
.text:0000000000007C66                 jz      short loc_7C85
.text:0000000000007C68                 lea     rdi, aC         ; "C"
.text:0000000000007C6F                 mov     ecx, 2
.text:0000000000007C74                 mov     rsi, rdx
.text:0000000000007C77                 repe cmpsb
.text:0000000000007C79                 setnbe  cl
.text:0000000000007C7C                 sbb     cl, 0
.text:0000000000007C7F                 xor     eax, eax
.text:0000000000007C81                 test    cl, cl
.text:0000000000007C83                 jnz     short loc_7C90
.text:0000000000007C85
.text:0000000000007C85 loc_7C85:                               ; CODE XREF: hard_locale+16↑j
.text:0000000000007C85                 add     rsp, 8
.text:0000000000007C89                 retn
.text:0000000000007C89 ; ---------------------------------------------------------------------------
.text:0000000000007C8A                 align 10h
.text:0000000000007C90
.text:0000000000007C90 loc_7C90:                               ; CODE XREF: hard_locale+33↑j
.text:0000000000007C90                 lea     rdi, aPosix     ; "POSIX"
.text:0000000000007C97                 mov     ecx, 6
.text:0000000000007C9C                 mov     rsi, rdx
.text:0000000000007C9F                 repe cmpsb
.text:0000000000007CA1                 setnbe  al
.text:0000000000007CA4                 sbb     al, 0
.text:0000000000007CA6                 test    al, al
.text:0000000000007CA8                 setnz   al
.text:0000000000007CAB                 add     rsp, 8
.text:0000000000007CAF                 retn
.text:0000000000007CAF ; } // starts at 7C50
.text:0000000000007CAF hard_locale     endp
.text:0000000000007CAF
.text:0000000000007CB0
.text:0000000000007CB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000007CB0
.text:0000000000007CB0 ; Attributes: info_from_lumina
.text:0000000000007CB0
.text:0000000000007CB0 ; size_t __fastcall next_prime(size_t candidate)
.text:0000000000007CB0 next_prime      proc near               ; CODE XREF: hash_initialize+7B↓p
.text:0000000000007CB0                                         ; hash_rehash+7B↓p
.text:0000000000007CB0 ; __unwind {
.text:0000000000007CB0                 cmp     rdi, 0Ah
.text:0000000000007CB4                 mov     eax, 0Ah
.text:0000000000007CB9                 mov     r9, 0AAAAAAAAAAAAAAABh
.text:0000000000007CC3                 cmovb   rdi, rax
.text:0000000000007CC7                 or      rdi, 1
.text:0000000000007CCB                 cmp     rdi, 0FFFFFFFFFFFFFFFFh
.text:0000000000007CCF                 jz      short loc_7D3F
.text:0000000000007CD1                 nop     dword ptr [rax+00000000h]
.text:0000000000007CD8
.text:0000000000007CD8 loc_7CD8:                               ; CODE XREF: next_prime+8D↓j
.text:0000000000007CD8                 mov     rax, rdi
.text:0000000000007CDB                 mov     rcx, rdi
.text:0000000000007CDE                 mul     r9
.text:0000000000007CE1                 mov     rax, rdx
.text:0000000000007CE4                 shr     rax, 1
.text:0000000000007CE7                 lea     rax, [rax+rax*2]
.text:0000000000007CEB                 sub     rcx, rax
.text:0000000000007CEE                 cmp     rdi, 9
.text:0000000000007CF2                 mov     rax, rcx
.text:0000000000007CF5                 jbe     short loc_7D30
.text:0000000000007CF7                 test    rcx, rcx
.text:0000000000007CFA                 jz      short loc_7D35
.text:0000000000007CFC                 mov     r8d, 10h
.text:0000000000007D02                 mov     esi, 9
.text:0000000000007D07                 mov     ecx, 3
.text:0000000000007D0C                 jmp     short loc_7D19
.text:0000000000007D0C ; ---------------------------------------------------------------------------
.text:0000000000007D0E                 align 10h
.text:0000000000007D10
.text:0000000000007D10 loc_7D10:                               ; CODE XREF: next_prime+7E↓j
.text:0000000000007D10                 add     r8, 8
.text:0000000000007D14                 test    rdx, rdx
.text:0000000000007D17                 jz      short loc_7D35
.text:0000000000007D19
.text:0000000000007D19 loc_7D19:                               ; CODE XREF: next_prime+5C↑j
.text:0000000000007D19                 add     rcx, 2
.text:0000000000007D1D                 xor     edx, edx
.text:0000000000007D1F                 mov     rax, rdi
.text:0000000000007D22                 div     rcx
.text:0000000000007D25                 add     rsi, r8
.text:0000000000007D28                 cmp     rsi, rdi
.text:0000000000007D2B                 mov     rax, rdx
.text:0000000000007D2E                 jb      short loc_7D10
.text:0000000000007D30
.text:0000000000007D30 loc_7D30:                               ; CODE XREF: next_prime+45↑j
.text:0000000000007D30                 test    rax, rax
.text:0000000000007D33                 jnz     short loc_7D3F
.text:0000000000007D35
.text:0000000000007D35 loc_7D35:                               ; CODE XREF: next_prime+4A↑j
.text:0000000000007D35                                         ; next_prime+67↑j
.text:0000000000007D35                 add     rdi, 2
.text:0000000000007D39                 cmp     rdi, 0FFFFFFFFFFFFFFFFh
.text:0000000000007D3D                 jnz     short loc_7CD8
.text:0000000000007D3F
.text:0000000000007D3F loc_7D3F:                               ; CODE XREF: next_prime+1F↑j
.text:0000000000007D3F                                         ; next_prime+83↑j
.text:0000000000007D3F                 mov     rax, rdi
.text:0000000000007D42                 retn
.text:0000000000007D42 ; } // starts at 7CB0
.text:0000000000007D42 next_prime      endp
.text:0000000000007D42
.text:0000000000007D42 ; ---------------------------------------------------------------------------
.text:0000000000007D43                 align 10h
.text:0000000000007D50
.text:0000000000007D50 ; =============== S U B R O U T I N E =======================================
.text:0000000000007D50
.text:0000000000007D50
.text:0000000000007D50 raw_hasher      proc near               ; DATA XREF: hash_initialize+4↓o
.text:0000000000007D50 ; __unwind {
.text:0000000000007D50                 mov     rax, rdi
.text:0000000000007D53                 xor     edx, edx
.text:0000000000007D55                 ror     rax, 3
.text:0000000000007D59                 div     rsi
.text:0000000000007D5C                 mov     rax, rdx
.text:0000000000007D5F                 retn
.text:0000000000007D5F ; } // starts at 7D50
.text:0000000000007D5F raw_hasher      endp
.text:0000000000007D5F
.text:0000000000007D60
.text:0000000000007D60 ; =============== S U B R O U T I N E =======================================
.text:0000000000007D60
.text:0000000000007D60
.text:0000000000007D60 raw_comparator  proc near               ; DATA XREF: hash_initialize+30↓o
.text:0000000000007D60 ; __unwind {
.text:0000000000007D60                 cmp     rdi, rsi
.text:0000000000007D63                 setz    al
.text:0000000000007D66                 retn
.text:0000000000007D66 ; } // starts at 7D60
.text:0000000000007D66 raw_comparator  endp
.text:0000000000007D66
.text:0000000000007D66 ; ---------------------------------------------------------------------------
.text:0000000000007D67                 align 10h
.text:0000000000007D70
.text:0000000000007D70 ; =============== S U B R O U T I N E =======================================
.text:0000000000007D70
.text:0000000000007D70 ; Attributes: info_from_lumina
.text:0000000000007D70
.text:0000000000007D70 ; hash_entry *__fastcall safe_hasher(const Hash_table *table, const void *key)
.text:0000000000007D70 safe_hasher     proc near               ; CODE XREF: hash_find_entry+14↓p
.text:0000000000007D70                                         ; transfer_entries+65↓p ...
.text:0000000000007D70 ; __unwind {
.text:0000000000007D70                 push    rbx
.text:0000000000007D71                 mov     rbx, rdi
.text:0000000000007D74                 mov     rdi, rsi
.text:0000000000007D77                 mov     rsi, [rbx+10h]
.text:0000000000007D7B                 call    qword ptr [rbx+30h]
.text:0000000000007D7E                 cmp     [rbx+10h], rax
.text:0000000000007D82                 jbe     short loc_7D8D
.text:0000000000007D84                 shl     rax, 4
.text:0000000000007D88                 add     rax, [rbx]
.text:0000000000007D8B                 pop     rbx
.text:0000000000007D8C                 retn
.text:0000000000007D8D ; ---------------------------------------------------------------------------
.text:0000000000007D8D
.text:0000000000007D8D loc_7D8D:                               ; CODE XREF: safe_hasher+12↑j
.text:0000000000007D8D                 call    _abort
.text:0000000000007D8D ; } // starts at 7D70
.text:0000000000007D8D safe_hasher     endp
.text:0000000000007D8D
.text:0000000000007D8D ; ---------------------------------------------------------------------------
.text:0000000000007D92                 align 20h
.text:0000000000007DA0
.text:0000000000007DA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000007DA0
.text:0000000000007DA0 ; Attributes: info_from_lumina
.text:0000000000007DA0
.text:0000000000007DA0 ; void *__fastcall hash_find_entry(Hash_table *table, const void *entry, hash_entry **bucket_head, _Bool delete)
.text:0000000000007DA0 hash_find_entry proc near               ; CODE XREF: hash_insert_if_absent+34↓p
.text:0000000000007DA0                                         ; hash_insert_if_absent+1CF↓p ...
.text:0000000000007DA0 ; __unwind {
.text:0000000000007DA0                 push    r14
.text:0000000000007DA2                 push    r13
.text:0000000000007DA4                 mov     r14, rdx
.text:0000000000007DA7                 push    r12
.text:0000000000007DA9                 push    rbp
.text:0000000000007DAA                 mov     r12, rdi
.text:0000000000007DAD                 push    rbx
.text:0000000000007DAE                 mov     rbp, rsi
.text:0000000000007DB1                 mov     r13d, ecx
.text:0000000000007DB4                 call    safe_hasher
.text:0000000000007DB9                 mov     [r14], rax
.text:0000000000007DBC                 mov     rsi, [rax]
.text:0000000000007DBF                 test    rsi, rsi
.text:0000000000007DC2                 jz      loc_7EB0
.text:0000000000007DC8                 cmp     rsi, rbp
.text:0000000000007DCB                 mov     rbx, rax
.text:0000000000007DCE                 jz      loc_7E63
.text:0000000000007DD4                 mov     rdi, rbp
.text:0000000000007DD7                 call    qword ptr [r12+38h]
.text:0000000000007DDC                 test    al, al
.text:0000000000007DDE                 jnz     loc_7E60
.text:0000000000007DE4                 mov     rax, [rbx+8]
.text:0000000000007DE8                 test    rax, rax
.text:0000000000007DEB                 jz      loc_7EB0
.text:0000000000007DF1                 mov     rsi, [rax]
.text:0000000000007DF4                 cmp     rbp, rsi
.text:0000000000007DF7                 jnz     short loc_7E19
.text:0000000000007DF9                 jmp     short loc_7E2C
.text:0000000000007DF9 ; ---------------------------------------------------------------------------
.text:0000000000007DFB                 align 20h
.text:0000000000007E00
.text:0000000000007E00 loc_7E00:                               ; CODE XREF: hash_find_entry+83↓j
.text:0000000000007E00                 mov     rbx, [rbx+8]
.text:0000000000007E04                 mov     rax, [rbx+8]
.text:0000000000007E08                 test    rax, rax
.text:0000000000007E0B                 jz      loc_7EB0
.text:0000000000007E11                 mov     rsi, [rax]
.text:0000000000007E14                 cmp     rsi, rbp
.text:0000000000007E17                 jz      short loc_7E2C
.text:0000000000007E19
.text:0000000000007E19 loc_7E19:                               ; CODE XREF: hash_find_entry+57↑j
.text:0000000000007E19                 mov     rdi, rbp
.text:0000000000007E1C                 call    qword ptr [r12+38h]
.text:0000000000007E21                 test    al, al
.text:0000000000007E23                 jz      short loc_7E00
.text:0000000000007E25                 mov     rax, [rbx+8]
.text:0000000000007E29                 mov     rsi, [rax]
.text:0000000000007E2C
.text:0000000000007E2C loc_7E2C:                               ; CODE XREF: hash_find_entry+59↑j
.text:0000000000007E2C                                         ; hash_find_entry+77↑j
.text:0000000000007E2C                 test    r13b, r13b
.text:0000000000007E2F                 jz      short loc_7E4E
.text:0000000000007E31                 mov     rdx, [rax+8]
.text:0000000000007E35                 mov     [rbx+8], rdx
.text:0000000000007E39                 mov     qword ptr [rax], 0
.text:0000000000007E40                 mov     rdx, [r12+48h]
.text:0000000000007E45                 mov     [rax+8], rdx
.text:0000000000007E49                 mov     [r12+48h], rax
.text:0000000000007E4E
.text:0000000000007E4E loc_7E4E:                               ; CODE XREF: hash_find_entry+8F↑j
.text:0000000000007E4E                                         ; hash_find_entry+C6↓j ...
.text:0000000000007E4E                 pop     rbx
.text:0000000000007E4F                 mov     rax, rsi
.text:0000000000007E52                 pop     rbp
.text:0000000000007E53                 pop     r12
.text:0000000000007E55                 pop     r13
.text:0000000000007E57                 pop     r14
.text:0000000000007E59                 retn
.text:0000000000007E59 ; ---------------------------------------------------------------------------
.text:0000000000007E5A                 align 20h
.text:0000000000007E60
.text:0000000000007E60 loc_7E60:                               ; CODE XREF: hash_find_entry+3E↑j
.text:0000000000007E60                 mov     rsi, [rbx]
.text:0000000000007E63
.text:0000000000007E63 loc_7E63:                               ; CODE XREF: hash_find_entry+2E↑j
.text:0000000000007E63                 test    r13b, r13b
.text:0000000000007E66                 jz      short loc_7E4E
.text:0000000000007E68                 mov     rax, [rbx+8]
.text:0000000000007E6C                 test    rax, rax
.text:0000000000007E6F                 jz      short loc_7EA0
.text:0000000000007E71                 movdqu  xmm0, xmmword ptr [rax]
.text:0000000000007E75                 movups  xmmword ptr [rbx], xmm0
.text:0000000000007E78                 mov     qword ptr [rax], 0
.text:0000000000007E7F                 mov     rdx, [r12+48h]
.text:0000000000007E84                 mov     [rax+8], rdx
.text:0000000000007E88                 mov     [r12+48h], rax
.text:0000000000007E8D                 mov     rax, rsi
.text:0000000000007E90                 pop     rbx
.text:0000000000007E91                 pop     rbp
.text:0000000000007E92                 pop     r12
.text:0000000000007E94                 pop     r13
.text:0000000000007E96                 pop     r14
.text:0000000000007E98                 retn
.text:0000000000007E98 ; ---------------------------------------------------------------------------
.text:0000000000007E99                 align 20h
.text:0000000000007EA0
.text:0000000000007EA0 loc_7EA0:                               ; CODE XREF: hash_find_entry+CF↑j
.text:0000000000007EA0                 mov     qword ptr [rbx], 0
.text:0000000000007EA7                 jmp     short loc_7E4E
.text:0000000000007EA7 ; ---------------------------------------------------------------------------
.text:0000000000007EA9                 align 10h
.text:0000000000007EB0
.text:0000000000007EB0 loc_7EB0:                               ; CODE XREF: hash_find_entry+22↑j
.text:0000000000007EB0                                         ; hash_find_entry+4B↑j ...
.text:0000000000007EB0                 xor     esi, esi
.text:0000000000007EB2                 pop     rbx
.text:0000000000007EB3                 mov     rax, rsi
.text:0000000000007EB6                 pop     rbp
.text:0000000000007EB7                 pop     r12
.text:0000000000007EB9                 pop     r13
.text:0000000000007EBB                 pop     r14
.text:0000000000007EBD                 retn
.text:0000000000007EBD ; } // starts at 7DA0
.text:0000000000007EBD hash_find_entry endp
.text:0000000000007EBD
.text:0000000000007EBD ; ---------------------------------------------------------------------------
.text:0000000000007EBE                 align 20h
.text:0000000000007EC0
.text:0000000000007EC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000007EC0
.text:0000000000007EC0 ; Attributes: info_from_lumina
.text:0000000000007EC0
.text:0000000000007EC0 ; _Bool check_tuning(Hash_table *table)
.text:0000000000007EC0 check_tuning    proc near               ; CODE XREF: hash_initialize+60↓p
.text:0000000000007EC0                                         ; hash_initialize+11B↓p ...
.text:0000000000007EC0 ; __unwind {
.text:0000000000007EC0                 mov     rdx, [rdi]
.text:0000000000007EC3                 lea     rcx, default_tuning
.text:0000000000007ECA                 mov     eax, 1
.text:0000000000007ECF                 cmp     rdx, rcx
.text:0000000000007ED2                 jz      short locret_7F35
.text:0000000000007ED4                 movss   xmm0, dword ptr [rdx+8]
.text:0000000000007ED9                 ucomiss xmm0, cs:dword_B274
.text:0000000000007EE0                 jbe     short loc_7F30
.text:0000000000007EE2                 movss   xmm1, cs:dword_B278
.text:0000000000007EEA                 ucomiss xmm1, xmm0
.text:0000000000007EED                 jbe     short loc_7F30
.text:0000000000007EEF                 movss   xmm1, dword ptr [rdx+0Ch]
.text:0000000000007EF4                 ucomiss xmm1, cs:dword_B27C
.text:0000000000007EFB                 jbe     short loc_7F30
.text:0000000000007EFD                 movss   xmm1, dword ptr [rdx]
.text:0000000000007F01                 ucomiss xmm1, cs:dword_B280
.text:0000000000007F08                 jb      short loc_7F30
.text:0000000000007F0A                 addss   xmm1, cs:dword_B274
.text:0000000000007F12                 movss   xmm2, dword ptr [rdx+4]
.text:0000000000007F17                 ucomiss xmm2, xmm1
.text:0000000000007F1A                 jbe     short loc_7F30
.text:0000000000007F1C                 movss   xmm3, cs:dword_B284
.text:0000000000007F24                 ucomiss xmm3, xmm2
.text:0000000000007F27                 jb      short loc_7F30
.text:0000000000007F29                 ucomiss xmm0, xmm1
.text:0000000000007F2C                 ja      short locret_7F35
.text:0000000000007F2E                 xchg    ax, ax
.text:0000000000007F30
.text:0000000000007F30 loc_7F30:                               ; CODE XREF: check_tuning+20↑j
.text:0000000000007F30                                         ; check_tuning+2D↑j ...
.text:0000000000007F30                 mov     [rdi], rcx
.text:0000000000007F33                 xor     eax, eax
.text:0000000000007F35
.text:0000000000007F35 locret_7F35:                            ; CODE XREF: check_tuning+12↑j
.text:0000000000007F35                                         ; check_tuning+6C↑j
.text:0000000000007F35                 rep retn
.text:0000000000007F35 ; } // starts at 7EC0
.text:0000000000007F35 check_tuning    endp
.text:0000000000007F35
.text:0000000000007F35 ; ---------------------------------------------------------------------------
.text:0000000000007F37                 align 20h
.text:0000000000007F40
.text:0000000000007F40 ; =============== S U B R O U T I N E =======================================
.text:0000000000007F40
.text:0000000000007F40 ; Attributes: info_from_lumina
.text:0000000000007F40
.text:0000000000007F40 ; _Bool __fastcall transfer_entries(Hash_table *dst, Hash_table *src, _Bool safe)
.text:0000000000007F40 transfer_entries proc near              ; CODE XREF: hash_rehash+12F↓p
.text:0000000000007F40                                         ; hash_rehash+152↓p ...
.text:0000000000007F40 ; __unwind {
.text:0000000000007F40                 push    r15
.text:0000000000007F42                 push    r14
.text:0000000000007F44                 push    r13
.text:0000000000007F46                 push    r12
.text:0000000000007F48                 push    rbp
.text:0000000000007F49                 push    rbx
.text:0000000000007F4A                 sub     rsp, 8
.text:0000000000007F4E                 mov     r12, [rsi]
.text:0000000000007F51                 cmp     r12, [rsi+8]
.text:0000000000007F55                 jnb     loc_8038
.text:0000000000007F5B                 mov     rbp, rdi
.text:0000000000007F5E                 mov     r13, rsi
.text:0000000000007F61                 mov     r14d, edx
.text:0000000000007F64                 nop     dword ptr [rax+00h]
.text:0000000000007F68
.text:0000000000007F68 loc_7F68:                               ; CODE XREF: transfer_entries+F2↓j
.text:0000000000007F68                 mov     r15, [r12]
.text:0000000000007F6C                 test    r15, r15
.text:0000000000007F6F                 jz      loc_802A
.text:0000000000007F75                 mov     rbx, [r12+8]
.text:0000000000007F7A                 test    rbx, rbx
.text:0000000000007F7D                 jnz     short loc_7F9C
.text:0000000000007F7F                 jmp     short loc_7FDB
.text:0000000000007F7F ; ---------------------------------------------------------------------------
.text:0000000000007F81                 align 8
.text:0000000000007F88
.text:0000000000007F88 loc_7F88:                               ; CODE XREF: transfer_entries+72↓j
.text:0000000000007F88                 mov     rcx, [rax+8]
.text:0000000000007F8C                 test    rdx, rdx
.text:0000000000007F8F                 mov     [rbx+8], rcx
.text:0000000000007F93                 mov     [rax+8], rbx
.text:0000000000007F97                 mov     rbx, rdx
.text:0000000000007F9A                 jz      short loc_7FD7
.text:0000000000007F9C
.text:0000000000007F9C loc_7F9C:                               ; CODE XREF: transfer_entries+3D↑j
.text:0000000000007F9C                                         ; transfer_entries+95↓j
.text:0000000000007F9C                 mov     r15, [rbx]
.text:0000000000007F9F                 mov     rdi, rbp
.text:0000000000007FA2                 mov     rsi, r15
.text:0000000000007FA5                 call    safe_hasher
.text:0000000000007FAA                 cmp     qword ptr [rax], 0
.text:0000000000007FAE                 mov     rdx, [rbx+8]
.text:0000000000007FB2                 jnz     short loc_7F88
.text:0000000000007FB4                 mov     [rax], r15
.text:0000000000007FB7                 add     qword ptr [rbp+18h], 1
.text:0000000000007FBC                 test    rdx, rdx
.text:0000000000007FBF                 mov     qword ptr [rbx], 0
.text:0000000000007FC6                 mov     rax, [rbp+48h]
.text:0000000000007FCA                 mov     [rbx+8], rax
.text:0000000000007FCE                 mov     [rbp+48h], rbx
.text:0000000000007FD2                 mov     rbx, rdx
.text:0000000000007FD5                 jnz     short loc_7F9C
.text:0000000000007FD7
.text:0000000000007FD7 loc_7FD7:                               ; CODE XREF: transfer_entries+5A↑j
.text:0000000000007FD7                 mov     r15, [r12]
.text:0000000000007FDB
.text:0000000000007FDB loc_7FDB:                               ; CODE XREF: transfer_entries+3F↑j
.text:0000000000007FDB                 test    r14b, r14b
.text:0000000000007FDE                 mov     qword ptr [r12+8], 0
.text:0000000000007FE7                 jnz     short loc_802A
.text:0000000000007FE9                 mov     rsi, r15
.text:0000000000007FEC                 mov     rdi, rbp
.text:0000000000007FEF                 call    safe_hasher
.text:0000000000007FF4                 cmp     qword ptr [rax], 0
.text:0000000000007FF8                 mov     rbx, rax
.text:0000000000007FFB                 jz      short loc_8050
.text:0000000000007FFD                 mov     rax, [rbp+48h]
.text:0000000000008001                 test    rax, rax
.text:0000000000008004                 jz      short loc_8060
.text:0000000000008006                 mov     rdx, [rax+8]
.text:000000000000800A                 mov     [rbp+48h], rdx
.text:000000000000800E
.text:000000000000800E loc_800E:                               ; CODE XREF: transfer_entries+12D↓j
.text:000000000000800E                 mov     rdx, [rbx+8]
.text:0000000000008012                 mov     [rax], r15
.text:0000000000008015                 mov     [rax+8], rdx
.text:0000000000008019                 mov     [rbx+8], rax
.text:000000000000801D
.text:000000000000801D loc_801D:                               ; CODE XREF: transfer_entries+118↓j
.text:000000000000801D                 mov     qword ptr [r12], 0
.text:0000000000008025                 sub     qword ptr [r13+18h], 1
.text:000000000000802A
.text:000000000000802A loc_802A:                               ; CODE XREF: transfer_entries+2F↑j
.text:000000000000802A                                         ; transfer_entries+A7↑j
.text:000000000000802A                 add     r12, 10h
.text:000000000000802E                 cmp     [r13+8], r12
.text:0000000000008032                 ja      loc_7F68
.text:0000000000008038
.text:0000000000008038 loc_8038:                               ; CODE XREF: transfer_entries+15↑j
.text:0000000000008038                 add     rsp, 8
.text:000000000000803C                 mov     eax, 1
.text:0000000000008041                 pop     rbx
.text:0000000000008042                 pop     rbp
.text:0000000000008043                 pop     r12
.text:0000000000008045                 pop     r13
.text:0000000000008047                 pop     r14
.text:0000000000008049                 pop     r15
.text:000000000000804B                 retn
.text:000000000000804B ; ---------------------------------------------------------------------------
.text:000000000000804C                 align 10h
.text:0000000000008050
.text:0000000000008050 loc_8050:                               ; CODE XREF: transfer_entries+BB↑j
.text:0000000000008050                 mov     [rax], r15
.text:0000000000008053                 add     qword ptr [rbp+18h], 1
.text:0000000000008058                 jmp     short loc_801D
.text:0000000000008058 ; ---------------------------------------------------------------------------
.text:000000000000805A                 align 20h
.text:0000000000008060
.text:0000000000008060 loc_8060:                               ; CODE XREF: transfer_entries+C4↑j
.text:0000000000008060                 mov     edi, 10h        ; size
.text:0000000000008065                 call    _malloc
.text:000000000000806A                 test    rax, rax
.text:000000000000806D                 jnz     short loc_800E
.text:000000000000806F                 add     rsp, 8
.text:0000000000008073                 xor     eax, eax
.text:0000000000008075                 pop     rbx
.text:0000000000008076                 pop     rbp
.text:0000000000008077                 pop     r12
.text:0000000000008079                 pop     r13
.text:000000000000807B                 pop     r14
.text:000000000000807D                 pop     r15
.text:000000000000807F                 retn
.text:000000000000807F ; } // starts at 7F40
.text:000000000000807F transfer_entries endp
.text:000000000000807F
.text:0000000000008080
.text:0000000000008080 ; =============== S U B R O U T I N E =======================================
.text:0000000000008080
.text:0000000000008080
.text:0000000000008080                 public hash_get_n_buckets
.text:0000000000008080 hash_get_n_buckets proc near
.text:0000000000008080 ; __unwind {
.text:0000000000008080                 mov     rax, [rdi+10h]
.text:0000000000008084                 retn
.text:0000000000008084 ; } // starts at 8080
.text:0000000000008084 hash_get_n_buckets endp
.text:0000000000008084
.text:0000000000008084 ; ---------------------------------------------------------------------------
.text:0000000000008085                 align 10h
.text:0000000000008090
.text:0000000000008090 ; =============== S U B R O U T I N E =======================================
.text:0000000000008090
.text:0000000000008090
.text:0000000000008090                 public hash_get_n_buckets_used
.text:0000000000008090 hash_get_n_buckets_used proc near
.text:0000000000008090 ; __unwind {
.text:0000000000008090                 mov     rax, [rdi+18h]
.text:0000000000008094                 retn
.text:0000000000008094 ; } // starts at 8090
.text:0000000000008094 hash_get_n_buckets_used endp
.text:0000000000008094
.text:0000000000008094 ; ---------------------------------------------------------------------------
.text:0000000000008095                 align 20h
.text:00000000000080A0
.text:00000000000080A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000080A0
.text:00000000000080A0
.text:00000000000080A0                 public hash_get_n_entries
.text:00000000000080A0 hash_get_n_entries proc near
.text:00000000000080A0 ; __unwind {
.text:00000000000080A0                 mov     rax, [rdi+20h]
.text:00000000000080A4                 retn
.text:00000000000080A4 ; } // starts at 80A0
.text:00000000000080A4 hash_get_n_entries endp
.text:00000000000080A4
.text:00000000000080A4 ; ---------------------------------------------------------------------------
.text:00000000000080A5                 align 10h
.text:00000000000080B0
.text:00000000000080B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000080B0
.text:00000000000080B0 ; Attributes: info_from_lumina
.text:00000000000080B0
.text:00000000000080B0 ; size_t __fastcall hash_get_max_bucket_length(const Hash_table *table)
.text:00000000000080B0                 public hash_get_max_bucket_length
.text:00000000000080B0 hash_get_max_bucket_length proc near
.text:00000000000080B0 ; __unwind {
.text:00000000000080B0                 mov     rsi, [rdi]
.text:00000000000080B3                 mov     rdi, [rdi+8]
.text:00000000000080B7                 xor     eax, eax
.text:00000000000080B9                 cmp     rsi, rdi
.text:00000000000080BC                 jnb     short locret_80F7
.text:00000000000080BE                 xchg    ax, ax
.text:00000000000080C0
.text:00000000000080C0 loc_80C0:                               ; CODE XREF: hash_get_max_bucket_length+43↓j
.text:00000000000080C0                 cmp     qword ptr [rsi], 0
.text:00000000000080C4                 jz      short loc_80EC
.text:00000000000080C6                 mov     rdx, [rsi+8]
.text:00000000000080CA                 mov     ecx, 1
.text:00000000000080CF                 test    rdx, rdx
.text:00000000000080D2                 jz      short loc_80E5
.text:00000000000080D4                 nop     dword ptr [rax+00h]
.text:00000000000080D8
.text:00000000000080D8 loc_80D8:                               ; CODE XREF: hash_get_max_bucket_length+33↓j
.text:00000000000080D8                 mov     rdx, [rdx+8]
.text:00000000000080DC                 add     rcx, 1
.text:00000000000080E0                 test    rdx, rdx
.text:00000000000080E3                 jnz     short loc_80D8
.text:00000000000080E5
.text:00000000000080E5 loc_80E5:                               ; CODE XREF: hash_get_max_bucket_length+22↑j
.text:00000000000080E5                 cmp     rax, rcx
.text:00000000000080E8                 cmovb   rax, rcx
.text:00000000000080EC
.text:00000000000080EC loc_80EC:                               ; CODE XREF: hash_get_max_bucket_length+14↑j
.text:00000000000080EC                 add     rsi, 10h
.text:00000000000080F0                 cmp     rsi, rdi
.text:00000000000080F3                 jb      short loc_80C0
.text:00000000000080F5                 rep retn
.text:00000000000080F7 ; ---------------------------------------------------------------------------
.text:00000000000080F7
.text:00000000000080F7 locret_80F7:                            ; CODE XREF: hash_get_max_bucket_length+C↑j
.text:00000000000080F7                 rep retn
.text:00000000000080F7 ; } // starts at 80B0
.text:00000000000080F7 hash_get_max_bucket_length endp
.text:00000000000080F7
.text:00000000000080F7 ; ---------------------------------------------------------------------------
.text:00000000000080F9                 align 20h
.text:0000000000008100
.text:0000000000008100 ; =============== S U B R O U T I N E =======================================
.text:0000000000008100
.text:0000000000008100 ; Attributes: info_from_lumina
.text:0000000000008100
.text:0000000000008100 ; _Bool __fastcall hash_table_ok(const Hash_table *table)
.text:0000000000008100                 public hash_table_ok
.text:0000000000008100 hash_table_ok   proc near
.text:0000000000008100 ; __unwind {
.text:0000000000008100                 mov     rcx, [rdi]
.text:0000000000008103                 mov     r8, [rdi+8]
.text:0000000000008107                 xor     edx, edx
.text:0000000000008109                 xor     esi, esi
.text:000000000000810B                 cmp     rcx, r8
.text:000000000000810E                 jnb     short loc_8146
.text:0000000000008110
.text:0000000000008110 loc_8110:                               ; CODE XREF: hash_table_ok+44↓j
.text:0000000000008110                 cmp     qword ptr [rcx], 0
.text:0000000000008114                 jz      short loc_813D
.text:0000000000008116                 mov     rax, [rcx+8]
.text:000000000000811A                 add     rsi, 1
.text:000000000000811E                 add     rdx, 1
.text:0000000000008122                 test    rax, rax
.text:0000000000008125                 jz      short loc_813D
.text:0000000000008127                 nop     word ptr [rax+rax+00000000h]
.text:0000000000008130
.text:0000000000008130 loc_8130:                               ; CODE XREF: hash_table_ok+3B↓j
.text:0000000000008130                 mov     rax, [rax+8]
.text:0000000000008134                 add     rdx, 1
.text:0000000000008138                 test    rax, rax
.text:000000000000813B                 jnz     short loc_8130
.text:000000000000813D
.text:000000000000813D loc_813D:                               ; CODE XREF: hash_table_ok+14↑j
.text:000000000000813D                                         ; hash_table_ok+25↑j
.text:000000000000813D                 add     rcx, 10h
.text:0000000000008141                 cmp     rcx, r8
.text:0000000000008144                 jb      short loc_8110
.text:0000000000008146
.text:0000000000008146 loc_8146:                               ; CODE XREF: hash_table_ok+E↑j
.text:0000000000008146                 xor     eax, eax
.text:0000000000008148                 cmp     [rdi+18h], rsi
.text:000000000000814C                 jz      short loc_8150
.text:000000000000814E                 rep retn
.text:0000000000008150 ; ---------------------------------------------------------------------------
.text:0000000000008150
.text:0000000000008150 loc_8150:                               ; CODE XREF: hash_table_ok+4C↑j
.text:0000000000008150                 cmp     [rdi+20h], rdx
.text:0000000000008154                 setz    al
.text:0000000000008157                 retn
.text:0000000000008157 ; } // starts at 8100
.text:0000000000008157 hash_table_ok   endp
.text:0000000000008157
.text:0000000000008157 ; ---------------------------------------------------------------------------
.text:0000000000008158                 align 20h
.text:0000000000008160
.text:0000000000008160 ; =============== S U B R O U T I N E =======================================
.text:0000000000008160
.text:0000000000008160 ; Attributes: info_from_lumina
.text:0000000000008160
.text:0000000000008160 ; void __fastcall hash_print_statistics(const Hash_table *table, FILE *stream)
.text:0000000000008160                 public hash_print_statistics
.text:0000000000008160 hash_print_statistics proc near
.text:0000000000008160 ; __unwind {
.text:0000000000008160                 push    r13
.text:0000000000008162                 push    r12
.text:0000000000008164                 mov     r12, rsi
.text:0000000000008167                 push    rbp
.text:0000000000008168                 push    rbx
.text:0000000000008169                 xor     ebx, ebx
.text:000000000000816B                 sub     rsp, 8
.text:000000000000816F                 mov     rsi, [rdi]
.text:0000000000008172                 mov     rcx, [rdi+20h]
.text:0000000000008176                 mov     rbp, [rdi+10h]
.text:000000000000817A                 mov     r13, [rdi+18h]
.text:000000000000817E                 mov     rdi, [rdi+8]
.text:0000000000008182                 cmp     rsi, rdi
.text:0000000000008185                 jnb     short loc_81C5
.text:0000000000008187                 nop     word ptr [rax+rax+00000000h]
.text:0000000000008190
.text:0000000000008190 loc_8190:                               ; CODE XREF: hash_print_statistics+63↓j
.text:0000000000008190                 cmp     qword ptr [rsi], 0
.text:0000000000008194                 jz      short loc_81BC
.text:0000000000008196                 mov     rax, [rsi+8]
.text:000000000000819A                 mov     edx, 1
.text:000000000000819F                 test    rax, rax
.text:00000000000081A2                 jz      short loc_81B5
.text:00000000000081A4                 nop     dword ptr [rax+00h]
.text:00000000000081A8
.text:00000000000081A8 loc_81A8:                               ; CODE XREF: hash_print_statistics+53↓j
.text:00000000000081A8                 mov     rax, [rax+8]
.text:00000000000081AC                 add     rdx, 1
.text:00000000000081B0                 test    rax, rax
.text:00000000000081B3                 jnz     short loc_81A8
.text:00000000000081B5
.text:00000000000081B5 loc_81B5:                               ; CODE XREF: hash_print_statistics+42↑j
.text:00000000000081B5                 cmp     rbx, rdx
.text:00000000000081B8                 cmovb   rbx, rdx
.text:00000000000081BC
.text:00000000000081BC loc_81BC:                               ; CODE XREF: hash_print_statistics+34↑j
.text:00000000000081BC                 add     rsi, 10h
.text:00000000000081C0                 cmp     rsi, rdi
.text:00000000000081C3                 jb      short loc_8190
.text:00000000000081C5
.text:00000000000081C5 loc_81C5:                               ; CODE XREF: hash_print_statistics+25↑j
.text:00000000000081C5                 lea     rdx, aEntriesLu ; "# entries:         %lu\n"
.text:00000000000081CC                 mov     esi, 1
.text:00000000000081D1                 mov     rdi, r12
.text:00000000000081D4                 xor     eax, eax
.text:00000000000081D6                 call    ___fprintf_chk
.text:00000000000081DB                 lea     rdx, aBucketsLu ; "# buckets:         %lu\n"
.text:00000000000081E2                 xor     eax, eax
.text:00000000000081E4                 mov     rcx, rbp
.text:00000000000081E7                 mov     esi, 1
.text:00000000000081EC                 mov     rdi, r12
.text:00000000000081EF                 call    ___fprintf_chk
.text:00000000000081F4                 test    r13, r13
.text:00000000000081F7                 js      short loc_8260
.text:00000000000081F9                 pxor    xmm0, xmm0
.text:00000000000081FD                 test    rbp, rbp
.text:0000000000008200                 cvtsi2sd xmm0, r13
.text:0000000000008205                 mulsd   xmm0, cs:qword_B298
.text:000000000000820D                 js      short loc_8289
.text:000000000000820F
.text:000000000000820F loc_820F:                               ; CODE XREF: hash_print_statistics+127↓j
.text:000000000000820F                 pxor    xmm1, xmm1
.text:0000000000008213                 cvtsi2sd xmm1, rbp
.text:0000000000008218
.text:0000000000008218 loc_8218:                               ; CODE XREF: hash_print_statistics+142↓j
.text:0000000000008218                 divsd   xmm0, xmm1
.text:000000000000821C                 lea     rdx, aBucketsUsedLu2 ; "# buckets used:    %lu (%.2f%%)\n"
.text:0000000000008223                 mov     rcx, r13
.text:0000000000008226                 mov     rdi, r12
.text:0000000000008229                 mov     esi, 1
.text:000000000000822E                 mov     eax, 1
.text:0000000000008233                 call    ___fprintf_chk
.text:0000000000008238                 add     rsp, 8
.text:000000000000823C                 mov     rcx, rbx
.text:000000000000823F                 mov     rdi, r12
.text:0000000000008242                 pop     rbx
.text:0000000000008243                 pop     rbp
.text:0000000000008244                 pop     r12
.text:0000000000008246                 pop     r13
.text:0000000000008248                 lea     rdx, aMaxBucketLengt ; "max bucket length: %lu\n"
.text:000000000000824F                 mov     esi, 1
.text:0000000000008254                 xor     eax, eax
.text:0000000000008256                 jmp     ___fprintf_chk
.text:0000000000008256 ; ---------------------------------------------------------------------------
.text:000000000000825B                 align 20h
.text:0000000000008260
.text:0000000000008260 loc_8260:                               ; CODE XREF: hash_print_statistics+97↑j
.text:0000000000008260                 mov     rax, r13
.text:0000000000008263                 mov     rdx, r13
.text:0000000000008266                 pxor    xmm0, xmm0
.text:000000000000826A                 shr     rax, 1
.text:000000000000826D                 and     edx, 1
.text:0000000000008270                 or      rax, rdx
.text:0000000000008273                 test    rbp, rbp
.text:0000000000008276                 cvtsi2sd xmm0, rax
.text:000000000000827B                 addsd   xmm0, xmm0
.text:000000000000827F                 mulsd   xmm0, cs:qword_B298
.text:0000000000008287                 jns     short loc_820F
.text:0000000000008289
.text:0000000000008289 loc_8289:                               ; CODE XREF: hash_print_statistics+AD↑j
.text:0000000000008289                 mov     rax, rbp
.text:000000000000828C                 pxor    xmm1, xmm1
.text:0000000000008290                 shr     rax, 1
.text:0000000000008293                 and     ebp, 1
.text:0000000000008296                 or      rax, rbp
.text:0000000000008299                 cvtsi2sd xmm1, rax
.text:000000000000829E                 addsd   xmm1, xmm1
.text:00000000000082A2                 jmp     loc_8218
.text:00000000000082A2 ; } // starts at 8160
.text:00000000000082A2 hash_print_statistics endp
.text:00000000000082A2
.text:00000000000082A2 ; ---------------------------------------------------------------------------
.text:00000000000082A7                 align 10h
.text:00000000000082B0
.text:00000000000082B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000082B0
.text:00000000000082B0 ; Attributes: info_from_lumina
.text:00000000000082B0
.text:00000000000082B0 ; void *__fastcall hash_lookup(const Hash_table *table, const void *entry)
.text:00000000000082B0                 public hash_lookup
.text:00000000000082B0 hash_lookup     proc near               ; CODE XREF: filesystem_type+47↑p
.text:00000000000082B0 ; __unwind {
.text:00000000000082B0                 push    r12
.text:00000000000082B2                 push    rbp
.text:00000000000082B3                 mov     r12, rdi
.text:00000000000082B6                 push    rbx
.text:00000000000082B7                 mov     rbp, rsi
.text:00000000000082BA                 call    safe_hasher
.text:00000000000082BF                 mov     rsi, [rax]
.text:00000000000082C2                 test    rsi, rsi
.text:00000000000082C5                 jz      short loc_82ED
.text:00000000000082C7                 mov     rbx, rax
.text:00000000000082CA                 jmp     short loc_82D3
.text:00000000000082CA ; ---------------------------------------------------------------------------
.text:00000000000082CC                 align 10h
.text:00000000000082D0
.text:00000000000082D0 loc_82D0:                               ; CODE XREF: hash_lookup+3B↓j
.text:00000000000082D0                 mov     rsi, [rbx]
.text:00000000000082D3
.text:00000000000082D3 loc_82D3:                               ; CODE XREF: hash_lookup+1A↑j
.text:00000000000082D3                 cmp     rsi, rbp
.text:00000000000082D6                 jz      short loc_82EF
.text:00000000000082D8                 mov     rdi, rbp
.text:00000000000082DB                 call    qword ptr [r12+38h]
.text:00000000000082E0                 test    al, al
.text:00000000000082E2                 jnz     short loc_8300
.text:00000000000082E4                 mov     rbx, [rbx+8]
.text:00000000000082E8                 test    rbx, rbx
.text:00000000000082EB                 jnz     short loc_82D0
.text:00000000000082ED
.text:00000000000082ED loc_82ED:                               ; CODE XREF: hash_lookup+15↑j
.text:00000000000082ED                 xor     esi, esi
.text:00000000000082EF
.text:00000000000082EF loc_82EF:                               ; CODE XREF: hash_lookup+26↑j
.text:00000000000082EF                 pop     rbx
.text:00000000000082F0                 mov     rax, rsi
.text:00000000000082F3                 pop     rbp
.text:00000000000082F4                 pop     r12
.text:00000000000082F6                 retn
.text:00000000000082F6 ; ---------------------------------------------------------------------------
.text:00000000000082F7                 align 20h
.text:0000000000008300
.text:0000000000008300 loc_8300:                               ; CODE XREF: hash_lookup+32↑j
.text:0000000000008300                 mov     rsi, [rbx]
.text:0000000000008303                 pop     rbx
.text:0000000000008304                 pop     rbp
.text:0000000000008305                 mov     rax, rsi
.text:0000000000008308                 pop     r12
.text:000000000000830A                 retn
.text:000000000000830A ; } // starts at 82B0
.text:000000000000830A hash_lookup     endp
.text:000000000000830A
.text:000000000000830A ; ---------------------------------------------------------------------------
.text:000000000000830B                 align 10h
.text:0000000000008310
.text:0000000000008310 ; =============== S U B R O U T I N E =======================================
.text:0000000000008310
.text:0000000000008310 ; Attributes: info_from_lumina
.text:0000000000008310
.text:0000000000008310 ; void *__fastcall hash_get_first(const Hash_table *table)
.text:0000000000008310                 public hash_get_first
.text:0000000000008310 hash_get_first  proc near
.text:0000000000008310 ; __unwind {
.text:0000000000008310                 cmp     qword ptr [rdi+20h], 0
.text:0000000000008315                 jz      short loc_8343
.text:0000000000008317                 mov     rdx, [rdi]
.text:000000000000831A                 mov     rcx, [rdi+8]
.text:000000000000831E                 cmp     rdx, rcx
.text:0000000000008321                 jnb     short loc_8348
.text:0000000000008323                 mov     rax, [rdx]
.text:0000000000008326                 test    rax, rax
.text:0000000000008329                 jnz     short locret_8346
.text:000000000000832B                 nop     dword ptr [rax+rax+00h]
.text:0000000000008330
.text:0000000000008330 loc_8330:                               ; CODE XREF: hash_get_first+2F↓j
.text:0000000000008330                 add     rdx, 10h
.text:0000000000008334                 cmp     rdx, rcx
.text:0000000000008337                 jnb     short loc_8348
.text:0000000000008339                 mov     rax, [rdx]
.text:000000000000833C                 test    rax, rax
.text:000000000000833F                 jz      short loc_8330
.text:0000000000008341                 rep retn
.text:0000000000008343 ; ---------------------------------------------------------------------------
.text:0000000000008343
.text:0000000000008343 loc_8343:                               ; CODE XREF: hash_get_first+5↑j
.text:0000000000008343                 xor     eax, eax
.text:0000000000008345                 retn
.text:0000000000008346 ; ---------------------------------------------------------------------------
.text:0000000000008346
.text:0000000000008346 locret_8346:                            ; CODE XREF: hash_get_first+19↑j
.text:0000000000008346                 rep retn
.text:0000000000008348 ; ---------------------------------------------------------------------------
.text:0000000000008348
.text:0000000000008348 loc_8348:                               ; CODE XREF: hash_get_first+11↑j
.text:0000000000008348                                         ; hash_get_first+27↑j
.text:0000000000008348                 sub     rsp, 8
.text:000000000000834C                 call    _abort
.text:000000000000834C ; } // starts at 8310
.text:000000000000834C hash_get_first  endp
.text:000000000000834C
.text:000000000000834C ; ---------------------------------------------------------------------------
.text:0000000000008351                 align 20h
.text:0000000000008360
.text:0000000000008360 ; =============== S U B R O U T I N E =======================================
.text:0000000000008360
.text:0000000000008360 ; Attributes: info_from_lumina
.text:0000000000008360
.text:0000000000008360 ; void *__fastcall hash_get_next(const Hash_table *table, const void *entry)
.text:0000000000008360                 public hash_get_next
.text:0000000000008360 hash_get_next   proc near
.text:0000000000008360 ; __unwind {
.text:0000000000008360                 push    rbp
.text:0000000000008361                 push    rbx
.text:0000000000008362                 mov     rbp, rdi
.text:0000000000008365                 mov     rbx, rsi
.text:0000000000008368                 sub     rsp, 8
.text:000000000000836C                 call    safe_hasher
.text:0000000000008371                 mov     rdx, rax
.text:0000000000008374                 mov     rcx, rax
.text:0000000000008377                 mov     rax, [rdx]
.text:000000000000837A                 mov     rdx, [rdx+8]
.text:000000000000837E                 cmp     rax, rbx
.text:0000000000008381                 jz      short loc_8399
.text:0000000000008383                 nop     dword ptr [rax+rax+00h]
.text:0000000000008388
.text:0000000000008388 loc_8388:                               ; CODE XREF: hash_get_next+37↓j
.text:0000000000008388                 test    rdx, rdx
.text:000000000000838B                 jz      short loc_839E
.text:000000000000838D                 mov     rax, [rdx]
.text:0000000000008390                 mov     rdx, [rdx+8]
.text:0000000000008394                 cmp     rax, rbx
.text:0000000000008397                 jnz     short loc_8388
.text:0000000000008399
.text:0000000000008399 loc_8399:                               ; CODE XREF: hash_get_next+21↑j
.text:0000000000008399                 test    rdx, rdx
.text:000000000000839C                 jnz     short loc_83C8
.text:000000000000839E
.text:000000000000839E loc_839E:                               ; CODE XREF: hash_get_next+2B↑j
.text:000000000000839E                 mov     rdx, [rbp+8]
.text:00000000000083A2                 jmp     short loc_83B0
.text:00000000000083A2 ; ---------------------------------------------------------------------------
.text:00000000000083A4                 align 8
.text:00000000000083A8
.text:00000000000083A8 loc_83A8:                               ; CODE XREF: hash_get_next+57↓j
.text:00000000000083A8                 mov     rax, [rcx]
.text:00000000000083AB                 test    rax, rax
.text:00000000000083AE                 jnz     short loc_83BB
.text:00000000000083B0
.text:00000000000083B0 loc_83B0:                               ; CODE XREF: hash_get_next+42↑j
.text:00000000000083B0                 add     rcx, 10h
.text:00000000000083B4                 cmp     rdx, rcx
.text:00000000000083B7                 ja      short loc_83A8
.text:00000000000083B9                 xor     eax, eax
.text:00000000000083BB
.text:00000000000083BB loc_83BB:                               ; CODE XREF: hash_get_next+4E↑j
.text:00000000000083BB                 add     rsp, 8
.text:00000000000083BF                 pop     rbx
.text:00000000000083C0                 pop     rbp
.text:00000000000083C1                 retn
.text:00000000000083C1 ; ---------------------------------------------------------------------------
.text:00000000000083C2                 align 8
.text:00000000000083C8
.text:00000000000083C8 loc_83C8:                               ; CODE XREF: hash_get_next+3C↑j
.text:00000000000083C8                 mov     rax, [rdx]
.text:00000000000083CB                 add     rsp, 8
.text:00000000000083CF                 pop     rbx
.text:00000000000083D0                 pop     rbp
.text:00000000000083D1                 retn
.text:00000000000083D1 ; } // starts at 8360
.text:00000000000083D1 hash_get_next   endp
.text:00000000000083D1
.text:00000000000083D1 ; ---------------------------------------------------------------------------
.text:00000000000083D2                 align 20h
.text:00000000000083E0
.text:00000000000083E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000083E0
.text:00000000000083E0 ; Attributes: info_from_lumina
.text:00000000000083E0
.text:00000000000083E0 ; size_t __fastcall hash_get_entries(const Hash_table *table, void **buffer, size_t buffer_size)
.text:00000000000083E0                 public hash_get_entries
.text:00000000000083E0 hash_get_entries proc near
.text:00000000000083E0 ; __unwind {
.text:00000000000083E0                 mov     r9, [rdi]
.text:00000000000083E3                 cmp     [rdi+8], r9
.text:00000000000083E7                 jbe     short loc_8442
.text:00000000000083E9                 xor     r8d, r8d
.text:00000000000083EC
.text:00000000000083EC loc_83EC:                               ; CODE XREF: hash_get_entries+55↓j
.text:00000000000083EC                 mov     rcx, [r9]
.text:00000000000083EF                 test    rcx, rcx
.text:00000000000083F2                 jz      short loc_842D
.text:00000000000083F4                 cmp     rdx, r8
.text:00000000000083F7                 jbe     short loc_8437
.text:00000000000083F9                 mov     [rsi+r8*8], rcx
.text:00000000000083FD                 mov     rcx, [r9+8]
.text:0000000000008401                 lea     rax, [r8+1]
.text:0000000000008405                 test    rcx, rcx
.text:0000000000008408                 jz      short loc_842A
.text:000000000000840A                 nop     word ptr [rax+rax+00h]
.text:0000000000008410
.text:0000000000008410 loc_8410:                               ; CODE XREF: hash_get_entries+48↓j
.text:0000000000008410                 cmp     rdx, rax
.text:0000000000008413                 jz      short locret_8440
.text:0000000000008415                 mov     r8, [rcx]
.text:0000000000008418                 add     rax, 1
.text:000000000000841C                 mov     [rsi+rax*8-8], r8
.text:0000000000008421                 mov     rcx, [rcx+8]
.text:0000000000008425                 test    rcx, rcx
.text:0000000000008428                 jnz     short loc_8410
.text:000000000000842A
.text:000000000000842A loc_842A:                               ; CODE XREF: hash_get_entries+28↑j
.text:000000000000842A                 mov     r8, rax
.text:000000000000842D
.text:000000000000842D loc_842D:                               ; CODE XREF: hash_get_entries+12↑j
.text:000000000000842D                 add     r9, 10h
.text:0000000000008431                 cmp     [rdi+8], r9
.text:0000000000008435                 ja      short loc_83EC
.text:0000000000008437
.text:0000000000008437 loc_8437:                               ; CODE XREF: hash_get_entries+17↑j
.text:0000000000008437                 mov     rax, r8
.text:000000000000843A                 retn
.text:000000000000843A ; ---------------------------------------------------------------------------
.text:000000000000843B                 align 20h
.text:0000000000008440
.text:0000000000008440 locret_8440:                            ; CODE XREF: hash_get_entries+33↑j
.text:0000000000008440                 rep retn
.text:0000000000008442 ; ---------------------------------------------------------------------------
.text:0000000000008442
.text:0000000000008442 loc_8442:                               ; CODE XREF: hash_get_entries+7↑j
.text:0000000000008442                 xor     eax, eax
.text:0000000000008444                 retn
.text:0000000000008444 ; } // starts at 83E0
.text:0000000000008444 hash_get_entries endp
.text:0000000000008444
.text:0000000000008444 ; ---------------------------------------------------------------------------
.text:0000000000008445                 align 10h
.text:0000000000008450
.text:0000000000008450 ; =============== S U B R O U T I N E =======================================
.text:0000000000008450
.text:0000000000008450 ; Attributes: info_from_lumina
.text:0000000000008450
.text:0000000000008450 ; size_t __fastcall hash_do_for_each(const Hash_table *table, Hash_processor processor, void *processor_data)
.text:0000000000008450                 public hash_do_for_each
.text:0000000000008450 hash_do_for_each proc near
.text:0000000000008450 ; __unwind {
.text:0000000000008450                 push    r15
.text:0000000000008452                 push    r14
.text:0000000000008454                 push    r13
.text:0000000000008456                 push    r12
.text:0000000000008458                 push    rbp
.text:0000000000008459                 push    rbx
.text:000000000000845A                 sub     rsp, 8
.text:000000000000845E                 mov     r14, [rdi]
.text:0000000000008461                 cmp     [rdi+8], r14
.text:0000000000008465                 jbe     short loc_84B6
.text:0000000000008467                 mov     r13, rdx
.text:000000000000846A                 mov     r12, rsi
.text:000000000000846D                 mov     r15, rdi
.text:0000000000008470                 xor     ebp, ebp
.text:0000000000008472
.text:0000000000008472 loc_8472:                               ; CODE XREF: hash_do_for_each+52↓j
.text:0000000000008472                 mov     rdi, [r14]
.text:0000000000008475                 test    rdi, rdi
.text:0000000000008478                 jz      short loc_849A
.text:000000000000847A                 mov     rbx, r14
.text:000000000000847D                 jmp     short loc_8483
.text:000000000000847D ; ---------------------------------------------------------------------------
.text:000000000000847F                 align 20h
.text:0000000000008480
.text:0000000000008480 loc_8480:                               ; CODE XREF: hash_do_for_each+48↓j
.text:0000000000008480                 mov     rdi, [rbx]
.text:0000000000008483
.text:0000000000008483 loc_8483:                               ; CODE XREF: hash_do_for_each+2D↑j
.text:0000000000008483                 mov     rsi, r13
.text:0000000000008486                 call    r12
.text:0000000000008489                 test    al, al
.text:000000000000848B                 jz      short loc_84A4
.text:000000000000848D                 mov     rbx, [rbx+8]
.text:0000000000008491                 add     rbp, 1
.text:0000000000008495                 test    rbx, rbx
.text:0000000000008498                 jnz     short loc_8480
.text:000000000000849A
.text:000000000000849A loc_849A:                               ; CODE XREF: hash_do_for_each+28↑j
.text:000000000000849A                 add     r14, 10h
.text:000000000000849E                 cmp     [r15+8], r14
.text:00000000000084A2                 ja      short loc_8472
.text:00000000000084A4
.text:00000000000084A4 loc_84A4:                               ; CODE XREF: hash_do_for_each+3B↑j
.text:00000000000084A4                                         ; hash_do_for_each+68↓j
.text:00000000000084A4                 add     rsp, 8
.text:00000000000084A8                 mov     rax, rbp
.text:00000000000084AB                 pop     rbx
.text:00000000000084AC                 pop     rbp
.text:00000000000084AD                 pop     r12
.text:00000000000084AF                 pop     r13
.text:00000000000084B1                 pop     r14
.text:00000000000084B3                 pop     r15
.text:00000000000084B5                 retn
.text:00000000000084B6 ; ---------------------------------------------------------------------------
.text:00000000000084B6
.text:00000000000084B6 loc_84B6:                               ; CODE XREF: hash_do_for_each+15↑j
.text:00000000000084B6                 xor     ebp, ebp
.text:00000000000084B8                 jmp     short loc_84A4
.text:00000000000084B8 ; } // starts at 8450
.text:00000000000084B8 hash_do_for_each endp
.text:00000000000084B8
.text:00000000000084B8 ; ---------------------------------------------------------------------------
.text:00000000000084BA                 align 20h
.text:00000000000084C0
.text:00000000000084C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000084C0
.text:00000000000084C0 ; Attributes: info_from_lumina
.text:00000000000084C0
.text:00000000000084C0 ; size_t __fastcall hash_string(const char *string, size_t n_buckets)
.text:00000000000084C0                 public hash_string
.text:00000000000084C0 hash_string     proc near
.text:00000000000084C0 ; __unwind {
.text:00000000000084C0                 movzx   ecx, byte ptr [rdi]
.text:00000000000084C3                 xor     edx, edx
.text:00000000000084C5                 test    cl, cl
.text:00000000000084C7                 jz      short loc_84ED
.text:00000000000084C9                 nop     dword ptr [rax+00000000h]
.text:00000000000084D0
.text:00000000000084D0 loc_84D0:                               ; CODE XREF: hash_string+2B↓j
.text:00000000000084D0                 mov     rax, rdx
.text:00000000000084D3                 add     rdi, 1
.text:00000000000084D7                 shl     rax, 5
.text:00000000000084DB                 sub     rax, rdx
.text:00000000000084DE                 xor     edx, edx
.text:00000000000084E0                 add     rax, rcx
.text:00000000000084E3                 movzx   ecx, byte ptr [rdi]
.text:00000000000084E6                 div     rsi
.text:00000000000084E9                 test    cl, cl
.text:00000000000084EB                 jnz     short loc_84D0
.text:00000000000084ED
.text:00000000000084ED loc_84ED:                               ; CODE XREF: hash_string+7↑j
.text:00000000000084ED                 mov     rax, rdx
.text:00000000000084F0                 retn
.text:00000000000084F0 ; } // starts at 84C0
.text:00000000000084F0 hash_string     endp
.text:00000000000084F0
.text:00000000000084F0 ; ---------------------------------------------------------------------------
.text:00000000000084F1                 align 20h
.text:0000000000008500
.text:0000000000008500 ; =============== S U B R O U T I N E =======================================
.text:0000000000008500
.text:0000000000008500 ; Attributes: info_from_lumina
.text:0000000000008500
.text:0000000000008500 ; void __fastcall hash_reset_tuning(Hash_tuning *tuning)
.text:0000000000008500                 public hash_reset_tuning
.text:0000000000008500 hash_reset_tuning proc near
.text:0000000000008500 ; __unwind {
.text:0000000000008500                 mov     rax, 3F80000000000000h
.text:000000000000850A                 mov     byte ptr [rdi+10h], 0
.text:000000000000850E                 mov     [rdi], rax
.text:0000000000008511                 mov     rax, 3FB4FDF43F4CCCCDh
.text:000000000000851B                 mov     [rdi+8], rax
.text:000000000000851F                 retn
.text:000000000000851F ; } // starts at 8500
.text:000000000000851F hash_reset_tuning endp
.text:000000000000851F
.text:0000000000008520
.text:0000000000008520 ; =============== S U B R O U T I N E =======================================
.text:0000000000008520
.text:0000000000008520 ; Attributes: info_from_lumina
.text:0000000000008520
.text:0000000000008520 ; Hash_table *__fastcall hash_initialize(size_t candidate, const Hash_tuning *tuning, Hash_hasher hasher, Hash_comparator comparator, Hash_data_freer data_freer)
.text:0000000000008520                 public hash_initialize
.text:0000000000008520 hash_initialize proc near               ; CODE XREF: filesystem_type+7C↑p
.text:0000000000008520                                         ; setup_dir_isra_4+28↑p
.text:0000000000008520 ; __unwind {
.text:0000000000008520                 push    r15
.text:0000000000008522                 push    r14
.text:0000000000008524                 lea     rax, raw_hasher
.text:000000000000852B                 push    r13
.text:000000000000852D                 push    r12
.text:000000000000852F                 mov     r12, rdx
.text:0000000000008532                 push    rbp
.text:0000000000008533                 push    rbx
.text:0000000000008534                 mov     r13, rcx
.text:0000000000008537                 mov     rbp, rdi
.text:000000000000853A                 mov     edi, 50h ; 'P'  ; size
.text:000000000000853F                 mov     r15, rsi
.text:0000000000008542                 sub     rsp, 8
.text:0000000000008546                 test    rdx, rdx
.text:0000000000008549                 mov     r14, r8
.text:000000000000854C                 cmovz   r12, rax
.text:0000000000008550                 lea     rax, raw_comparator
.text:0000000000008557                 test    rcx, rcx
.text:000000000000855A                 cmovz   r13, rax
.text:000000000000855E                 call    _malloc
.text:0000000000008563                 test    rax, rax
.text:0000000000008566                 mov     rbx, rax
.text:0000000000008569                 jz      loc_861A
.text:000000000000856F                 test    r15, r15
.text:0000000000008572                 lea     rdi, [rax+28h]
.text:0000000000008576                 jz      loc_8630
.text:000000000000857C                 mov     [rax+28h], r15
.text:0000000000008580                 call    check_tuning
.text:0000000000008585                 test    al, al
.text:0000000000008587                 jz      loc_8610
.text:000000000000858D                 cmp     byte ptr [r15+10h], 0
.text:0000000000008592                 jz      loc_8690
.text:0000000000008598
.text:0000000000008598 loc_8598:                               ; CODE XREF: hash_initialize+16A↓j
.text:0000000000008598                                         ; hash_initialize+1A5↓j
.text:0000000000008598                 mov     rdi, rbp
.text:000000000000859B                 call    next_prime
.text:00000000000085A0                 mov     edx, 8
.text:00000000000085A5                 mov     rbp, rax
.text:00000000000085A8                 xor     ecx, ecx
.text:00000000000085AA                 mov     rax, rdx
.text:00000000000085AD                 mul     rbp
.text:00000000000085B0                 jo      loc_86CA
.text:00000000000085B6
.text:00000000000085B6 loc_85B6:                               ; CODE XREF: hash_initialize+1AF↓j
.text:00000000000085B6                 test    rax, rax
.text:00000000000085B9                 js      short loc_8610
.text:00000000000085BB                 test    rcx, rcx
.text:00000000000085BE                 jnz     short loc_8610
.text:00000000000085C0                 test    rbp, rbp
.text:00000000000085C3                 mov     [rbx+10h], rbp
.text:00000000000085C7                 jz      short loc_8610
.text:00000000000085C9                 mov     esi, 10h        ; size
.text:00000000000085CE                 mov     rdi, rbp        ; nmemb
.text:00000000000085D1                 call    _calloc
.text:00000000000085D6                 test    rax, rax
.text:00000000000085D9                 mov     [rbx], rax
.text:00000000000085DC                 jz      short loc_8610
.text:00000000000085DE                 shl     rbp, 4
.text:00000000000085E2                 mov     qword ptr [rbx+18h], 0
.text:00000000000085EA                 mov     qword ptr [rbx+20h], 0
.text:00000000000085F2                 add     rbp, rax
.text:00000000000085F5                 mov     [rbx+30h], r12
.text:00000000000085F9                 mov     [rbx+38h], r13
.text:00000000000085FD                 mov     [rbx+8], rbp
.text:0000000000008601                 mov     [rbx+40h], r14
.text:0000000000008605                 mov     qword ptr [rbx+48h], 0
.text:000000000000860D                 jmp     short loc_861A
.text:000000000000860D ; ---------------------------------------------------------------------------
.text:000000000000860F                 align 10h
.text:0000000000008610
.text:0000000000008610 loc_8610:                               ; CODE XREF: hash_initialize+67↑j
.text:0000000000008610                                         ; hash_initialize+99↑j ...
.text:0000000000008610                 mov     rdi, rbx        ; ptr
.text:0000000000008613                 xor     ebx, ebx
.text:0000000000008615                 call    free
.text:000000000000861A
.text:000000000000861A loc_861A:                               ; CODE XREF: hash_initialize+49↑j
.text:000000000000861A                                         ; hash_initialize+ED↑j
.text:000000000000861A                 add     rsp, 8
.text:000000000000861E                 mov     rax, rbx
.text:0000000000008621                 pop     rbx
.text:0000000000008622                 pop     rbp
.text:0000000000008623                 pop     r12
.text:0000000000008625                 pop     r13
.text:0000000000008627                 pop     r14
.text:0000000000008629                 pop     r15
.text:000000000000862B                 retn
.text:000000000000862B ; ---------------------------------------------------------------------------
.text:000000000000862C                 align 10h
.text:0000000000008630
.text:0000000000008630 loc_8630:                               ; CODE XREF: hash_initialize+56↑j
.text:0000000000008630                 lea     rax, default_tuning
.text:0000000000008637                 mov     [rbx+28h], rax
.text:000000000000863B                 call    check_tuning
.text:0000000000008640                 test    al, al
.text:0000000000008642                 movss   xmm1, cs:dword_B288
.text:000000000000864A                 jz      short loc_8610
.text:000000000000864C                 test    rbp, rbp
.text:000000000000864F                 js      short loc_869B
.text:0000000000008651
.text:0000000000008651 loc_8651:                               ; CODE XREF: hash_initialize+179↓j
.text:0000000000008651                 pxor    xmm0, xmm0
.text:0000000000008655                 cvtsi2ss xmm0, rbp
.text:000000000000865A
.text:000000000000865A loc_865A:                               ; CODE XREF: hash_initialize+194↓j
.text:000000000000865A                 divss   xmm0, xmm1
.text:000000000000865E                 ucomiss xmm0, cs:dword_B28C
.text:0000000000008665                 jnb     short loc_8610
.text:0000000000008667                 ucomiss xmm0, cs:dword_B290
.text:000000000000866E                 jb      short loc_86C0
.text:0000000000008670                 subss   xmm0, cs:dword_B290
.text:0000000000008678                 mov     rax, 8000000000000000h
.text:0000000000008682                 cvttss2si rbp, xmm0
.text:0000000000008687                 xor     rbp, rax
.text:000000000000868A                 jmp     loc_8598
.text:000000000000868A ; ---------------------------------------------------------------------------
.text:000000000000868F                 align 10h
.text:0000000000008690
.text:0000000000008690 loc_8690:                               ; CODE XREF: hash_initialize+72↑j
.text:0000000000008690                 test    rbp, rbp
.text:0000000000008693                 movss   xmm1, dword ptr [r15+8]
.text:0000000000008699                 jns     short loc_8651
.text:000000000000869B
.text:000000000000869B loc_869B:                               ; CODE XREF: hash_initialize+12F↑j
.text:000000000000869B                 mov     rax, rbp
.text:000000000000869E                 pxor    xmm0, xmm0
.text:00000000000086A2                 shr     rax, 1
.text:00000000000086A5                 and     ebp, 1
.text:00000000000086A8                 or      rax, rbp
.text:00000000000086AB                 cvtsi2ss xmm0, rax
.text:00000000000086B0                 addss   xmm0, xmm0
.text:00000000000086B4                 jmp     short loc_865A
.text:00000000000086B4 ; ---------------------------------------------------------------------------
.text:00000000000086B6                 align 20h
.text:00000000000086C0
.text:00000000000086C0 loc_86C0:                               ; CODE XREF: hash_initialize+14E↑j
.text:00000000000086C0                 cvttss2si rbp, xmm0
.text:00000000000086C5                 jmp     loc_8598
.text:00000000000086CA ; ---------------------------------------------------------------------------
.text:00000000000086CA
.text:00000000000086CA loc_86CA:                               ; CODE XREF: hash_initialize+90↑j
.text:00000000000086CA                 mov     ecx, 1
.text:00000000000086CF                 jmp     loc_85B6
.text:00000000000086CF ; } // starts at 8520
.text:00000000000086CF hash_initialize endp
.text:00000000000086CF
.text:00000000000086CF ; ---------------------------------------------------------------------------
.text:00000000000086D4                 align 20h
.text:00000000000086E0
.text:00000000000086E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000086E0
.text:00000000000086E0 ; Attributes: info_from_lumina
.text:00000000000086E0
.text:00000000000086E0 ; void __fastcall hash_clear(Hash_table *table)
.text:00000000000086E0                 public hash_clear
.text:00000000000086E0 hash_clear      proc near
.text:00000000000086E0 ; __unwind {
.text:00000000000086E0                 push    r12
.text:00000000000086E2                 push    rbp
.text:00000000000086E3                 mov     rbp, rdi
.text:00000000000086E6                 push    rbx
.text:00000000000086E7                 mov     r12, [rdi]
.text:00000000000086EA                 cmp     r12, [rdi+8]
.text:00000000000086EE                 jnb     short loc_875B
.text:00000000000086F0
.text:00000000000086F0 loc_86F0:                               ; CODE XREF: hash_clear+79↓j
.text:00000000000086F0                 cmp     qword ptr [r12], 0
.text:00000000000086F5                 jz      short loc_8751
.text:00000000000086F7                 mov     rbx, [r12+8]
.text:00000000000086FC                 mov     rax, [rbp+40h]
.text:0000000000008700                 test    rbx, rbx
.text:0000000000008703                 jz      short loc_8735
.text:0000000000008705                 nop     dword ptr [rax]
.text:0000000000008708
.text:0000000000008708 loc_8708:                               ; CODE XREF: hash_clear+53↓j
.text:0000000000008708                 test    rax, rax
.text:000000000000870B                 jz      short loc_8716
.text:000000000000870D                 mov     rdi, [rbx]
.text:0000000000008710                 call    rax
.text:0000000000008712                 mov     rax, [rbp+40h]
.text:0000000000008716
.text:0000000000008716 loc_8716:                               ; CODE XREF: hash_clear+2B↑j
.text:0000000000008716                 mov     rdx, [rbx+8]
.text:000000000000871A                 mov     rcx, [rbp+48h]
.text:000000000000871E                 mov     qword ptr [rbx], 0
.text:0000000000008725                 test    rdx, rdx
.text:0000000000008728                 mov     [rbx+8], rcx
.text:000000000000872C                 mov     [rbp+48h], rbx
.text:0000000000008730                 mov     rbx, rdx
.text:0000000000008733                 jnz     short loc_8708
.text:0000000000008735
.text:0000000000008735 loc_8735:                               ; CODE XREF: hash_clear+23↑j
.text:0000000000008735                 test    rax, rax
.text:0000000000008738                 jz      short loc_8740
.text:000000000000873A                 mov     rdi, [r12]
.text:000000000000873E                 call    rax
.text:0000000000008740
.text:0000000000008740 loc_8740:                               ; CODE XREF: hash_clear+58↑j
.text:0000000000008740                 mov     qword ptr [r12], 0
.text:0000000000008748                 mov     qword ptr [r12+8], 0
.text:0000000000008751
.text:0000000000008751 loc_8751:                               ; CODE XREF: hash_clear+15↑j
.text:0000000000008751                 add     r12, 10h
.text:0000000000008755                 cmp     [rbp+8], r12
.text:0000000000008759                 ja      short loc_86F0
.text:000000000000875B
.text:000000000000875B loc_875B:                               ; CODE XREF: hash_clear+E↑j
.text:000000000000875B                 mov     qword ptr [rbp+18h], 0
.text:0000000000008763                 mov     qword ptr [rbp+20h], 0
.text:000000000000876B                 pop     rbx
.text:000000000000876C                 pop     rbp
.text:000000000000876D                 pop     r12
.text:000000000000876F                 retn
.text:000000000000876F ; } // starts at 86E0
.text:000000000000876F hash_clear      endp
.text:000000000000876F
.text:0000000000008770
.text:0000000000008770 ; =============== S U B R O U T I N E =======================================
.text:0000000000008770
.text:0000000000008770 ; Attributes: info_from_lumina
.text:0000000000008770
.text:0000000000008770 ; void __fastcall hash_free(Hash_table *table)
.text:0000000000008770                 public hash_free
.text:0000000000008770 hash_free       proc near               ; CODE XREF: rpl_fts_close+9A↑p
.text:0000000000008770                                         ; rpl_fts_close+B1↑p ...
.text:0000000000008770 ; __unwind {
.text:0000000000008770                 push    r12
.text:0000000000008772                 push    rbp
.text:0000000000008773                 mov     r12, rdi
.text:0000000000008776                 push    rbx
.text:0000000000008777                 cmp     qword ptr [rdi+40h], 0
.text:000000000000877C                 mov     rbp, [rdi]
.text:000000000000877F                 mov     rax, [rdi+8]
.text:0000000000008783                 jz      short loc_87D3
.text:0000000000008785                 cmp     qword ptr [rdi+20h], 0
.text:000000000000878A                 jz      short loc_87D3
.text:000000000000878C                 cmp     rbp, rax
.text:000000000000878F                 jnb     short loc_880C
.text:0000000000008791                 nop     dword ptr [rax+00000000h]
.text:0000000000008798
.text:0000000000008798 loc_8798:                               ; CODE XREF: hash_free+5D↓j
.text:0000000000008798                 mov     rdi, [rbp+0]
.text:000000000000879C                 test    rdi, rdi
.text:000000000000879F                 jz      short loc_87C6
.text:00000000000087A1                 mov     rbx, rbp
.text:00000000000087A4                 jmp     short loc_87B3
.text:00000000000087A4 ; ---------------------------------------------------------------------------
.text:00000000000087A6                 align 10h
.text:00000000000087B0
.text:00000000000087B0 loc_87B0:                               ; CODE XREF: hash_free+4F↓j
.text:00000000000087B0                 mov     rdi, [rbx]
.text:00000000000087B3
.text:00000000000087B3 loc_87B3:                               ; CODE XREF: hash_free+34↑j
.text:00000000000087B3                 call    qword ptr [r12+40h]
.text:00000000000087B8                 mov     rbx, [rbx+8]
.text:00000000000087BC                 test    rbx, rbx
.text:00000000000087BF                 jnz     short loc_87B0
.text:00000000000087C1                 mov     rax, [r12+8]
.text:00000000000087C6
.text:00000000000087C6 loc_87C6:                               ; CODE XREF: hash_free+2F↑j
.text:00000000000087C6                 add     rbp, 10h
.text:00000000000087CA                 cmp     rax, rbp
.text:00000000000087CD                 ja      short loc_8798
.text:00000000000087CF                 mov     rbp, [r12]
.text:00000000000087D3
.text:00000000000087D3 loc_87D3:                               ; CODE XREF: hash_free+13↑j
.text:00000000000087D3                                         ; hash_free+1A↑j
.text:00000000000087D3                 cmp     rbp, rax
.text:00000000000087D6                 jnb     short loc_880C
.text:00000000000087D8                 nop     dword ptr [rax+rax+00000000h]
.text:00000000000087E0
.text:00000000000087E0 loc_87E0:                               ; CODE XREF: hash_free+9A↓j
.text:00000000000087E0                 mov     rdi, [rbp+8]    ; ptr
.text:00000000000087E4                 test    rdi, rdi
.text:00000000000087E7                 jz      short loc_8801
.text:00000000000087E9                 nop     dword ptr [rax+00000000h]
.text:00000000000087F0
.text:00000000000087F0 loc_87F0:                               ; CODE XREF: hash_free+8F↓j
.text:00000000000087F0                 mov     rbx, [rdi+8]
.text:00000000000087F4                 call    free
.text:00000000000087F9                 test    rbx, rbx
.text:00000000000087FC                 mov     rdi, rbx
.text:00000000000087FF                 jnz     short loc_87F0
.text:0000000000008801
.text:0000000000008801 loc_8801:                               ; CODE XREF: hash_free+77↑j
.text:0000000000008801                 add     rbp, 10h
.text:0000000000008805                 cmp     [r12+8], rbp
.text:000000000000880A                 ja      short loc_87E0
.text:000000000000880C
.text:000000000000880C loc_880C:                               ; CODE XREF: hash_free+1F↑j
.text:000000000000880C                                         ; hash_free+66↑j
.text:000000000000880C                 mov     rdi, [r12+48h]  ; ptr
.text:0000000000008811                 test    rdi, rdi
.text:0000000000008814                 jz      short loc_8831
.text:0000000000008816                 db      2Eh
.text:0000000000008816                 nop     word ptr [rax+rax+00000000h]
.text:0000000000008820
.text:0000000000008820 loc_8820:                               ; CODE XREF: hash_free+BF↓j
.text:0000000000008820                 mov     rbx, [rdi+8]
.text:0000000000008824                 call    free
.text:0000000000008829                 test    rbx, rbx
.text:000000000000882C                 mov     rdi, rbx
.text:000000000000882F                 jnz     short loc_8820
.text:0000000000008831
.text:0000000000008831 loc_8831:                               ; CODE XREF: hash_free+A4↑j
.text:0000000000008831                 mov     rdi, [r12]      ; ptr
.text:0000000000008835                 call    free
.text:000000000000883A                 pop     rbx
.text:000000000000883B                 mov     rdi, r12        ; ptr
.text:000000000000883E                 pop     rbp
.text:000000000000883F                 pop     r12
.text:0000000000008841                 jmp     free
.text:0000000000008841 ; } // starts at 8770
.text:0000000000008841 hash_free       endp
.text:0000000000008841
.text:0000000000008841 ; ---------------------------------------------------------------------------
.text:0000000000008846                 align 10h
.text:0000000000008850
.text:0000000000008850 ; =============== S U B R O U T I N E =======================================
.text:0000000000008850
.text:0000000000008850 ; Attributes: info_from_lumina
.text:0000000000008850
.text:0000000000008850 ; _Bool __fastcall hash_rehash(Hash_table *table, size_t candidate)
.text:0000000000008850                 public hash_rehash
.text:0000000000008850 hash_rehash     proc near               ; CODE XREF: hash_insert_if_absent+1BB↓p
.text:0000000000008850                                         ; hash_delete+10F↓p
.text:0000000000008850
.text:0000000000008850 ptr             = qword ptr -78h
.text:0000000000008850 var_70          = qword ptr -70h
.text:0000000000008850 var_68          = qword ptr -68h
.text:0000000000008850 var_60          = qword ptr -60h
.text:0000000000008850 var_58          = qword ptr -58h
.text:0000000000008850 var_50          = qword ptr -50h
.text:0000000000008850 var_48          = qword ptr -48h
.text:0000000000008850 var_40          = qword ptr -40h
.text:0000000000008850 var_38          = qword ptr -38h
.text:0000000000008850 var_30          = qword ptr -30h
.text:0000000000008850 var_20          = qword ptr -20h
.text:0000000000008850
.text:0000000000008850 ; __unwind {
.text:0000000000008850                 push    r12
.text:0000000000008852                 push    rbp
.text:0000000000008853                 mov     rbp, rdi
.text:0000000000008856                 push    rbx
.text:0000000000008857                 sub     rsp, 60h
.text:000000000000885B                 mov     r12, [rdi+28h]
.text:000000000000885F                 mov     rax, fs:28h
.text:0000000000008868                 mov     [rsp+78h+var_20], rax
.text:000000000000886D                 xor     eax, eax
.text:000000000000886F                 cmp     byte ptr [r12+10h], 0
.text:0000000000008875                 jnz     short loc_88C8
.text:0000000000008877                 test    rsi, rsi
.text:000000000000887A                 js      loc_89F8
.text:0000000000008880                 pxor    xmm0, xmm0
.text:0000000000008884                 cvtsi2ss xmm0, rsi
.text:0000000000008889
.text:0000000000008889 loc_8889:                               ; CODE XREF: hash_rehash+1C1↓j
.text:0000000000008889                 divss   xmm0, dword ptr [r12+8]
.text:0000000000008890                 ucomiss xmm0, cs:dword_B28C
.text:0000000000008897                 jnb     loc_89D0
.text:000000000000889D                 ucomiss xmm0, cs:dword_B290
.text:00000000000088A4                 jb      loc_8A20
.text:00000000000088AA                 subss   xmm0, cs:dword_B290
.text:00000000000088B2                 mov     rax, 8000000000000000h
.text:00000000000088BC                 cvttss2si rsi, xmm0
.text:00000000000088C1                 xor     rsi, rax
.text:00000000000088C4                 nop     dword ptr [rax+00h]
.text:00000000000088C8
.text:00000000000088C8 loc_88C8:                               ; CODE XREF: hash_rehash+25↑j
.text:00000000000088C8                                         ; hash_rehash+1D5↓j
.text:00000000000088C8                 mov     rdi, rsi
.text:00000000000088CB                 call    next_prime
.text:00000000000088D0                 mov     edx, 8
.text:00000000000088D5                 mov     rbx, rax
.text:00000000000088D8                 xor     ecx, ecx
.text:00000000000088DA                 mov     rax, rdx
.text:00000000000088DD                 mul     rbx
.text:00000000000088E0                 jo      loc_8A7F
.text:00000000000088E6
.text:00000000000088E6 loc_88E6:                               ; CODE XREF: hash_rehash+234↓j
.text:00000000000088E6                 test    rax, rax
.text:00000000000088E9                 mov     eax, 1
.text:00000000000088EE                 cmovs   rcx, rax
.text:00000000000088F2                 test    rbx, rbx
.text:00000000000088F5                 jz      loc_89D0
.text:00000000000088FB                 and     ecx, 1
.text:00000000000088FE                 jnz     loc_89D0
.text:0000000000008904                 cmp     [rbp+10h], rbx
.text:0000000000008908                 jz      loc_8A30
.text:000000000000890E                 mov     esi, 10h        ; size
.text:0000000000008913                 mov     rdi, rbx        ; nmemb
.text:0000000000008916                 call    _calloc
.text:000000000000891B                 test    rax, rax
.text:000000000000891E                 mov     [rsp+78h+ptr], rax
.text:0000000000008922                 jz      loc_89D0
.text:0000000000008928                 mov     [rsp+78h+var_68], rbx
.text:000000000000892D                 shl     rbx, 4
.text:0000000000008931                 mov     [rsp+78h+var_50], r12
.text:0000000000008936                 add     rbx, rax
.text:0000000000008939                 mov     rax, [rbp+30h]
.text:000000000000893D                 mov     r12, rsp
.text:0000000000008940                 xor     edx, edx
.text:0000000000008942                 mov     rsi, rbp
.text:0000000000008945                 mov     rdi, r12
.text:0000000000008948                 mov     [rsp+78h+var_70], rbx
.text:000000000000894D                 mov     [rsp+78h+var_60], 0
.text:0000000000008956                 mov     [rsp+78h+var_48], rax
.text:000000000000895B                 mov     rax, [rbp+38h]
.text:000000000000895F                 mov     [rsp+78h+var_58], 0
.text:0000000000008968                 mov     [rsp+78h+var_40], rax
.text:000000000000896D                 mov     rax, [rbp+40h]
.text:0000000000008971                 mov     [rsp+78h+var_38], rax
.text:0000000000008976                 mov     rax, [rbp+48h]
.text:000000000000897A                 mov     [rsp+78h+var_30], rax
.text:000000000000897F                 call    transfer_entries
.text:0000000000008984                 test    al, al
.text:0000000000008986                 mov     ebx, eax
.text:0000000000008988                 jnz     loc_8A40
.text:000000000000898E                 mov     rax, [rsp+78h+var_30]
.text:0000000000008993                 mov     edx, 1
.text:0000000000008998                 mov     rsi, r12
.text:000000000000899B                 mov     rdi, rbp
.text:000000000000899E                 mov     [rbp+48h], rax
.text:00000000000089A2                 call    transfer_entries
.text:00000000000089A7                 test    al, al
.text:00000000000089A9                 jz      loc_8A89
.text:00000000000089AF                 xor     edx, edx
.text:00000000000089B1                 mov     rsi, r12
.text:00000000000089B4                 mov     rdi, rbp
.text:00000000000089B7                 call    transfer_entries
.text:00000000000089BC                 test    al, al
.text:00000000000089BE                 jz      loc_8A89
.text:00000000000089C4                 mov     rdi, [rsp+78h+ptr] ; ptr
.text:00000000000089C8                 call    free
.text:00000000000089CD                 jmp     short loc_89D2
.text:00000000000089CD ; ---------------------------------------------------------------------------
.text:00000000000089CF                 align 10h
.text:00000000000089D0
.text:00000000000089D0 loc_89D0:                               ; CODE XREF: hash_rehash+47↑j
.text:00000000000089D0                                         ; hash_rehash+A5↑j ...
.text:00000000000089D0                 xor     ebx, ebx
.text:00000000000089D2
.text:00000000000089D2 loc_89D2:                               ; CODE XREF: hash_rehash+17D↑j
.text:00000000000089D2                                         ; hash_rehash+1E5↓j ...
.text:00000000000089D2                 mov     rcx, [rsp+78h+var_20]
.text:00000000000089D7                 xor     rcx, fs:28h
.text:00000000000089E0                 mov     eax, ebx
.text:00000000000089E2                 jnz     loc_8A7A
.text:00000000000089E8                 add     rsp, 60h
.text:00000000000089EC                 pop     rbx
.text:00000000000089ED                 pop     rbp
.text:00000000000089EE                 pop     r12
.text:00000000000089F0                 retn
.text:00000000000089F0 ; ---------------------------------------------------------------------------
.text:00000000000089F1                 align 8
.text:00000000000089F8
.text:00000000000089F8 loc_89F8:                               ; CODE XREF: hash_rehash+2A↑j
.text:00000000000089F8                 mov     rax, rsi
.text:00000000000089FB                 pxor    xmm0, xmm0
.text:00000000000089FF                 shr     rax, 1
.text:0000000000008A02                 and     esi, 1
.text:0000000000008A05                 or      rax, rsi
.text:0000000000008A08                 cvtsi2ss xmm0, rax
.text:0000000000008A0D                 addss   xmm0, xmm0
.text:0000000000008A11                 jmp     loc_8889
.text:0000000000008A11 ; ---------------------------------------------------------------------------
.text:0000000000008A16                 align 20h
.text:0000000000008A20
.text:0000000000008A20 loc_8A20:                               ; CODE XREF: hash_rehash+54↑j
.text:0000000000008A20                 cvttss2si rsi, xmm0
.text:0000000000008A25                 jmp     loc_88C8
.text:0000000000008A25 ; ---------------------------------------------------------------------------
.text:0000000000008A2A                 align 10h
.text:0000000000008A30
.text:0000000000008A30 loc_8A30:                               ; CODE XREF: hash_rehash+B8↑j
.text:0000000000008A30                 mov     ebx, 1
.text:0000000000008A35                 jmp     short loc_89D2
.text:0000000000008A35 ; ---------------------------------------------------------------------------
.text:0000000000008A37                 align 20h
.text:0000000000008A40
.text:0000000000008A40 loc_8A40:                               ; CODE XREF: hash_rehash+138↑j
.text:0000000000008A40                 mov     rdi, [rbp+0]    ; ptr
.text:0000000000008A44                 call    free
.text:0000000000008A49                 mov     rax, [rsp+78h+ptr]
.text:0000000000008A4D                 mov     [rbp+0], rax
.text:0000000000008A51                 mov     rax, [rsp+78h+var_70]
.text:0000000000008A56                 mov     [rbp+8], rax
.text:0000000000008A5A                 mov     rax, [rsp+78h+var_68]
.text:0000000000008A5F                 mov     [rbp+10h], rax
.text:0000000000008A63                 mov     rax, [rsp+78h+var_60]
.text:0000000000008A68                 mov     [rbp+18h], rax
.text:0000000000008A6C                 mov     rax, [rsp+78h+var_30]
.text:0000000000008A71                 mov     [rbp+48h], rax
.text:0000000000008A75                 jmp     loc_89D2
.text:0000000000008A7A ; ---------------------------------------------------------------------------
.text:0000000000008A7A
.text:0000000000008A7A loc_8A7A:                               ; CODE XREF: hash_rehash+192↑j
.text:0000000000008A7A                 call    ___stack_chk_fail
.text:0000000000008A7F ; ---------------------------------------------------------------------------
.text:0000000000008A7F
.text:0000000000008A7F loc_8A7F:                               ; CODE XREF: hash_rehash+90↑j
.text:0000000000008A7F                 mov     ecx, 1
.text:0000000000008A84                 jmp     loc_88E6
.text:0000000000008A89 ; ---------------------------------------------------------------------------
.text:0000000000008A89
.text:0000000000008A89 loc_8A89:                               ; CODE XREF: hash_rehash+159↑j
.text:0000000000008A89                                         ; hash_rehash+16E↑j
.text:0000000000008A89                 call    _abort
.text:0000000000008A89 ; } // starts at 8850
.text:0000000000008A89 hash_rehash     endp
.text:0000000000008A89
.text:0000000000008A89 ; ---------------------------------------------------------------------------
.text:0000000000008A8E                 align 10h
.text:0000000000008A90
.text:0000000000008A90 ; =============== S U B R O U T I N E =======================================
.text:0000000000008A90
.text:0000000000008A90 ; Attributes: info_from_lumina
.text:0000000000008A90
.text:0000000000008A90 ; int __fastcall hash_insert_if_absent(Hash_table *table, const void *entry, const void **matched_ent)
.text:0000000000008A90                 public hash_insert_if_absent
.text:0000000000008A90 hash_insert_if_absent proc near         ; CODE XREF: hash_insert+1B↓p
.text:0000000000008A90
.text:0000000000008A90 var_38          = qword ptr -38h
.text:0000000000008A90 var_30          = qword ptr -30h
.text:0000000000008A90
.text:0000000000008A90 ; __unwind {
.text:0000000000008A90                 push    r13
.text:0000000000008A92                 push    r12
.text:0000000000008A94                 push    rbp
.text:0000000000008A95                 push    rbx
.text:0000000000008A96                 sub     rsp, 18h
.text:0000000000008A9A                 mov     rax, fs:28h
.text:0000000000008AA3                 mov     [rsp+38h+var_30], rax
.text:0000000000008AA8                 xor     eax, eax
.text:0000000000008AAA                 test    rsi, rsi
.text:0000000000008AAD                 jz      loc_8C6D
.text:0000000000008AB3                 mov     r12, rsp
.text:0000000000008AB6                 xor     ecx, ecx
.text:0000000000008AB8                 mov     r13, rdx
.text:0000000000008ABB                 mov     rdx, r12
.text:0000000000008ABE                 mov     rbx, rdi
.text:0000000000008AC1                 mov     rbp, rsi
.text:0000000000008AC4                 call    hash_find_entry
.text:0000000000008AC9                 test    rax, rax
.text:0000000000008ACC                 mov     rdx, rax
.text:0000000000008ACF                 jz      short loc_8B00
.text:0000000000008AD1                 xor     eax, eax
.text:0000000000008AD3                 test    r13, r13
.text:0000000000008AD6                 jz      short loc_8ADC
.text:0000000000008AD8                 mov     [r13+0], rdx
.text:0000000000008ADC
.text:0000000000008ADC loc_8ADC:                               ; CODE XREF: hash_insert_if_absent+46↑j
.text:0000000000008ADC                                         ; hash_insert_if_absent+E9↓j ...
.text:0000000000008ADC                 mov     rcx, [rsp+38h+var_30]
.text:0000000000008AE1                 xor     rcx, fs:28h
.text:0000000000008AEA                 jnz     loc_8D0F
.text:0000000000008AF0                 add     rsp, 18h
.text:0000000000008AF4                 pop     rbx
.text:0000000000008AF5                 pop     rbp
.text:0000000000008AF6                 pop     r12
.text:0000000000008AF8                 pop     r13
.text:0000000000008AFA                 retn
.text:0000000000008AFA ; ---------------------------------------------------------------------------
.text:0000000000008AFB                 align 20h
.text:0000000000008B00
.text:0000000000008B00 loc_8B00:                               ; CODE XREF: hash_insert_if_absent+3F↑j
.text:0000000000008B00                 mov     rax, [rbx+18h]
.text:0000000000008B04                 test    rax, rax
.text:0000000000008B07                 js      short loc_8B80
.text:0000000000008B09                 pxor    xmm1, xmm1
.text:0000000000008B0D                 mov     rdx, [rbx+28h]
.text:0000000000008B11                 cvtsi2ss xmm1, rax
.text:0000000000008B16                 mov     rax, [rbx+10h]
.text:0000000000008B1A                 test    rax, rax
.text:0000000000008B1D                 js      loc_8BAA
.text:0000000000008B23
.text:0000000000008B23 loc_8B23:                               ; CODE XREF: hash_insert_if_absent+114↓j
.text:0000000000008B23                 pxor    xmm0, xmm0
.text:0000000000008B27                 cvtsi2ss xmm0, rax
.text:0000000000008B2C
.text:0000000000008B2C loc_8B2C:                               ; CODE XREF: hash_insert_if_absent+133↓j
.text:0000000000008B2C                 mulss   xmm0, dword ptr [rdx+8]
.text:0000000000008B31                 ucomiss xmm1, xmm0
.text:0000000000008B34                 ja      loc_8BD0
.text:0000000000008B3A
.text:0000000000008B3A loc_8B3A:                               ; CODE XREF: hash_insert_if_absent+188↓j
.text:0000000000008B3A                                         ; hash_insert_if_absent+1D7↓j
.text:0000000000008B3A                 mov     r12, [rsp+38h+var_38]
.text:0000000000008B3E                 cmp     qword ptr [r12], 0
.text:0000000000008B43                 jz      loc_8C78
.text:0000000000008B49                 mov     rax, [rbx+48h]
.text:0000000000008B4D                 test    rax, rax
.text:0000000000008B50                 jz      loc_8C90
.text:0000000000008B56                 mov     rdx, [rax+8]
.text:0000000000008B5A                 mov     [rbx+48h], rdx
.text:0000000000008B5E
.text:0000000000008B5E loc_8B5E:                               ; CODE XREF: hash_insert_if_absent+20D↓j
.text:0000000000008B5E                 mov     rdx, [r12+8]
.text:0000000000008B63                 mov     [rax], rbp
.text:0000000000008B66                 mov     [rax+8], rdx
.text:0000000000008B6A                 mov     [r12+8], rax
.text:0000000000008B6F                 mov     eax, 1
.text:0000000000008B74                 add     qword ptr [rbx+20h], 1
.text:0000000000008B79                 jmp     loc_8ADC
.text:0000000000008B79 ; ---------------------------------------------------------------------------
.text:0000000000008B7E                 align 20h
.text:0000000000008B80
.text:0000000000008B80 loc_8B80:                               ; CODE XREF: hash_insert_if_absent+77↑j
.text:0000000000008B80                 mov     rdx, rax
.text:0000000000008B83                 pxor    xmm1, xmm1
.text:0000000000008B87                 and     eax, 1
.text:0000000000008B8A                 shr     rdx, 1
.text:0000000000008B8D                 or      rdx, rax
.text:0000000000008B90                 mov     rax, [rbx+10h]
.text:0000000000008B94                 cvtsi2ss xmm1, rdx
.text:0000000000008B99                 mov     rdx, [rbx+28h]
.text:0000000000008B9D                 test    rax, rax
.text:0000000000008BA0                 addss   xmm1, xmm1
.text:0000000000008BA4                 jns     loc_8B23
.text:0000000000008BAA
.text:0000000000008BAA loc_8BAA:                               ; CODE XREF: hash_insert_if_absent+8D↑j
.text:0000000000008BAA                 mov     rcx, rax
.text:0000000000008BAD                 pxor    xmm0, xmm0
.text:0000000000008BB1                 shr     rcx, 1
.text:0000000000008BB4                 and     eax, 1
.text:0000000000008BB7                 or      rcx, rax
.text:0000000000008BBA                 cvtsi2ss xmm0, rcx
.text:0000000000008BBF                 addss   xmm0, xmm0
.text:0000000000008BC3                 jmp     loc_8B2C
.text:0000000000008BC3 ; ---------------------------------------------------------------------------
.text:0000000000008BC8                 align 10h
.text:0000000000008BD0
.text:0000000000008BD0 loc_8BD0:                               ; CODE XREF: hash_insert_if_absent+A4↑j
.text:0000000000008BD0                 lea     rdi, [rbx+28h]
.text:0000000000008BD4                 call    check_tuning
.text:0000000000008BD9                 mov     rax, [rbx+10h]
.text:0000000000008BDD                 mov     rdx, [rbx+28h]
.text:0000000000008BE1                 test    rax, rax
.text:0000000000008BE4                 movss   xmm2, dword ptr [rdx+8]
.text:0000000000008BE9                 js      loc_8CB0
.text:0000000000008BEF                 pxor    xmm0, xmm0
.text:0000000000008BF3                 cvtsi2ss xmm0, rax
.text:0000000000008BF8
.text:0000000000008BF8 loc_8BF8:                               ; CODE XREF: hash_insert_if_absent+239↓j
.text:0000000000008BF8                 mov     rax, [rbx+18h]
.text:0000000000008BFC                 test    rax, rax
.text:0000000000008BFF                 js      loc_8CD0
.text:0000000000008C05                 pxor    xmm1, xmm1
.text:0000000000008C09                 cvtsi2ss xmm1, rax
.text:0000000000008C0E
.text:0000000000008C0E loc_8C0E:                               ; CODE XREF: hash_insert_if_absent+259↓j
.text:0000000000008C0E                 movaps  xmm3, xmm2
.text:0000000000008C11                 mulss   xmm3, xmm0
.text:0000000000008C15                 ucomiss xmm1, xmm3
.text:0000000000008C18                 jbe     loc_8B3A
.text:0000000000008C1E                 cmp     byte ptr [rdx+10h], 0
.text:0000000000008C22                 mulss   xmm0, dword ptr [rdx+0Ch]
.text:0000000000008C27                 jnz     short loc_8C2D
.text:0000000000008C29                 mulss   xmm0, xmm2
.text:0000000000008C2D
.text:0000000000008C2D loc_8C2D:                               ; CODE XREF: hash_insert_if_absent+197↑j
.text:0000000000008C2D                 ucomiss xmm0, cs:dword_B28C
.text:0000000000008C34                 jnb     short loc_8CA3
.text:0000000000008C36                 ucomiss xmm0, cs:dword_B290
.text:0000000000008C3D                 jnb     loc_8CF0
.text:0000000000008C43                 cvttss2si rsi, xmm0
.text:0000000000008C48
.text:0000000000008C48 loc_8C48:                               ; CODE XREF: hash_insert_if_absent+27A↓j
.text:0000000000008C48                 mov     rdi, rbx
.text:0000000000008C4B                 call    hash_rehash
.text:0000000000008C50                 test    al, al
.text:0000000000008C52                 jz      short loc_8CA3
.text:0000000000008C54                 xor     ecx, ecx
.text:0000000000008C56                 mov     rdx, r12
.text:0000000000008C59                 mov     rsi, rbp
.text:0000000000008C5C                 mov     rdi, rbx
.text:0000000000008C5F                 call    hash_find_entry
.text:0000000000008C64                 test    rax, rax
.text:0000000000008C67                 jz      loc_8B3A
.text:0000000000008C6D
.text:0000000000008C6D loc_8C6D:                               ; CODE XREF: hash_insert_if_absent+1D↑j
.text:0000000000008C6D                 call    _abort
.text:0000000000008C6D ; ---------------------------------------------------------------------------
.text:0000000000008C72                 align 8
.text:0000000000008C78
.text:0000000000008C78 loc_8C78:                               ; CODE XREF: hash_insert_if_absent+B3↑j
.text:0000000000008C78                 mov     [r12], rbp
.text:0000000000008C7C                 mov     eax, 1
.text:0000000000008C81                 add     qword ptr [rbx+20h], 1
.text:0000000000008C86                 add     qword ptr [rbx+18h], 1
.text:0000000000008C8B                 jmp     loc_8ADC
.text:0000000000008C90 ; ---------------------------------------------------------------------------
.text:0000000000008C90
.text:0000000000008C90 loc_8C90:                               ; CODE XREF: hash_insert_if_absent+C0↑j
.text:0000000000008C90                 mov     edi, 10h        ; size
.text:0000000000008C95                 call    _malloc
.text:0000000000008C9A                 test    rax, rax
.text:0000000000008C9D                 jnz     loc_8B5E
.text:0000000000008CA3
.text:0000000000008CA3 loc_8CA3:                               ; CODE XREF: hash_insert_if_absent+1A4↑j
.text:0000000000008CA3                                         ; hash_insert_if_absent+1C2↑j
.text:0000000000008CA3                 mov     eax, 0FFFFFFFFh
.text:0000000000008CA8                 jmp     loc_8ADC
.text:0000000000008CA8 ; ---------------------------------------------------------------------------
.text:0000000000008CAD                 align 10h
.text:0000000000008CB0
.text:0000000000008CB0 loc_8CB0:                               ; CODE XREF: hash_insert_if_absent+159↑j
.text:0000000000008CB0                 mov     rcx, rax
.text:0000000000008CB3                 pxor    xmm0, xmm0
.text:0000000000008CB7                 shr     rcx, 1
.text:0000000000008CBA                 and     eax, 1
.text:0000000000008CBD                 or      rcx, rax
.text:0000000000008CC0                 cvtsi2ss xmm0, rcx
.text:0000000000008CC5                 addss   xmm0, xmm0
.text:0000000000008CC9                 jmp     loc_8BF8
.text:0000000000008CC9 ; ---------------------------------------------------------------------------
.text:0000000000008CCE                 align 10h
.text:0000000000008CD0
.text:0000000000008CD0 loc_8CD0:                               ; CODE XREF: hash_insert_if_absent+16F↑j
.text:0000000000008CD0                 mov     rcx, rax
.text:0000000000008CD3                 pxor    xmm1, xmm1
.text:0000000000008CD7                 shr     rcx, 1
.text:0000000000008CDA                 and     eax, 1
.text:0000000000008CDD                 or      rcx, rax
.text:0000000000008CE0                 cvtsi2ss xmm1, rcx
.text:0000000000008CE5                 addss   xmm1, xmm1
.text:0000000000008CE9                 jmp     loc_8C0E
.text:0000000000008CE9 ; ---------------------------------------------------------------------------
.text:0000000000008CEE                 align 10h
.text:0000000000008CF0
.text:0000000000008CF0 loc_8CF0:                               ; CODE XREF: hash_insert_if_absent+1AD↑j
.text:0000000000008CF0                 subss   xmm0, cs:dword_B290
.text:0000000000008CF8                 mov     rax, 8000000000000000h
.text:0000000000008D02                 cvttss2si rsi, xmm0
.text:0000000000008D07                 xor     rsi, rax
.text:0000000000008D0A                 jmp     loc_8C48
.text:0000000000008D0F ; ---------------------------------------------------------------------------
.text:0000000000008D0F
.text:0000000000008D0F loc_8D0F:                               ; CODE XREF: hash_insert_if_absent+5A↑j
.text:0000000000008D0F                 call    ___stack_chk_fail
.text:0000000000008D0F ; } // starts at 8A90
.text:0000000000008D0F hash_insert_if_absent endp
.text:0000000000008D0F
.text:0000000000008D0F ; ---------------------------------------------------------------------------
.text:0000000000008D14                 align 20h
.text:0000000000008D20
.text:0000000000008D20 ; =============== S U B R O U T I N E =======================================
.text:0000000000008D20
.text:0000000000008D20 ; Attributes: info_from_lumina
.text:0000000000008D20
.text:0000000000008D20 ; void *__fastcall hash_insert(Hash_table *table, const void *entry)
.text:0000000000008D20                 public hash_insert
.text:0000000000008D20 hash_insert     proc near               ; CODE XREF: filesystem_type+FF↑p
.text:0000000000008D20                                         ; enter_dir_isra_10+46↑p
.text:0000000000008D20
.text:0000000000008D20 var_18          = qword ptr -18h
.text:0000000000008D20 var_10          = qword ptr -10h
.text:0000000000008D20
.text:0000000000008D20 ; __unwind {
.text:0000000000008D20                 push    rbx
.text:0000000000008D21                 mov     rbx, rsi
.text:0000000000008D24                 sub     rsp, 10h
.text:0000000000008D28                 mov     rdx, rsp
.text:0000000000008D2B                 mov     rax, fs:28h
.text:0000000000008D34                 mov     [rsp+18h+var_10], rax
.text:0000000000008D39                 xor     eax, eax
.text:0000000000008D3B                 call    hash_insert_if_absent
.text:0000000000008D40                 cmp     eax, 0FFFFFFFFh
.text:0000000000008D43                 jz      short loc_8D70
.text:0000000000008D45                 test    eax, eax
.text:0000000000008D47                 jnz     short loc_8D4D
.text:0000000000008D49                 mov     rbx, [rsp+18h+var_18]
.text:0000000000008D4D
.text:0000000000008D4D loc_8D4D:                               ; CODE XREF: hash_insert+27↑j
.text:0000000000008D4D                                         ; hash_insert+52↓j
.text:0000000000008D4D                 mov     rcx, [rsp+18h+var_10]
.text:0000000000008D52                 xor     rcx, fs:28h
.text:0000000000008D5B                 mov     rax, rbx
.text:0000000000008D5E                 jnz     short loc_8D74
.text:0000000000008D60                 add     rsp, 10h
.text:0000000000008D64                 pop     rbx
.text:0000000000008D65                 retn
.text:0000000000008D65 ; ---------------------------------------------------------------------------
.text:0000000000008D66                 align 10h
.text:0000000000008D70
.text:0000000000008D70 loc_8D70:                               ; CODE XREF: hash_insert+23↑j
.text:0000000000008D70                 xor     ebx, ebx
.text:0000000000008D72                 jmp     short loc_8D4D
.text:0000000000008D74 ; ---------------------------------------------------------------------------
.text:0000000000008D74
.text:0000000000008D74 loc_8D74:                               ; CODE XREF: hash_insert+3E↑j
.text:0000000000008D74                 call    ___stack_chk_fail
.text:0000000000008D74 ; } // starts at 8D20
.text:0000000000008D74 hash_insert     endp
.text:0000000000008D74
.text:0000000000008D74 ; ---------------------------------------------------------------------------
.text:0000000000008D79                 align 20h
.text:0000000000008D80
.text:0000000000008D80 ; =============== S U B R O U T I N E =======================================
.text:0000000000008D80
.text:0000000000008D80 ; Attributes: info_from_lumina
.text:0000000000008D80
.text:0000000000008D80 ; void *__fastcall hash_delete(Hash_table *table, const void *entry)
.text:0000000000008D80                 public hash_delete
.text:0000000000008D80 hash_delete     proc near               ; CODE XREF: leave_dir_isra_12+7A↑p
.text:0000000000008D80
.text:0000000000008D80 var_28          = qword ptr -28h
.text:0000000000008D80 var_20          = qword ptr -20h
.text:0000000000008D80
.text:0000000000008D80 ; __unwind {
.text:0000000000008D80                 push    r12
.text:0000000000008D82                 push    rbp
.text:0000000000008D83                 mov     ecx, 1
.text:0000000000008D88                 push    rbx
.text:0000000000008D89                 mov     rbx, rdi
.text:0000000000008D8C                 sub     rsp, 10h
.text:0000000000008D90                 mov     rdx, rsp
.text:0000000000008D93                 mov     rax, fs:28h
.text:0000000000008D9C                 mov     [rsp+28h+var_20], rax
.text:0000000000008DA1                 xor     eax, eax
.text:0000000000008DA3                 call    hash_find_entry
.text:0000000000008DA8                 test    rax, rax
.text:0000000000008DAB                 mov     rbp, rax
.text:0000000000008DAE                 jz      short loc_8DBF
.text:0000000000008DB0                 mov     rax, [rsp+28h+var_28]
.text:0000000000008DB4                 sub     qword ptr [rbx+20h], 1
.text:0000000000008DB9                 cmp     qword ptr [rax], 0
.text:0000000000008DBD                 jz      short loc_8DE0
.text:0000000000008DBF
.text:0000000000008DBF loc_8DBF:                               ; CODE XREF: hash_delete+2E↑j
.text:0000000000008DBF                                         ; hash_delete+9F↓j ...
.text:0000000000008DBF                 mov     rcx, [rsp+28h+var_20]
.text:0000000000008DC4                 xor     rcx, fs:28h
.text:0000000000008DCD                 mov     rax, rbp
.text:0000000000008DD0                 jnz     loc_8F7E
.text:0000000000008DD6                 add     rsp, 10h
.text:0000000000008DDA                 pop     rbx
.text:0000000000008DDB                 pop     rbp
.text:0000000000008DDC                 pop     r12
.text:0000000000008DDE                 retn
.text:0000000000008DDE ; ---------------------------------------------------------------------------
.text:0000000000008DDF                 align 20h
.text:0000000000008DE0
.text:0000000000008DE0 loc_8DE0:                               ; CODE XREF: hash_delete+3D↑j
.text:0000000000008DE0                 mov     rax, [rbx+18h]
.text:0000000000008DE4                 sub     rax, 1
.text:0000000000008DE8                 test    rax, rax
.text:0000000000008DEB                 mov     [rbx+18h], rax
.text:0000000000008DEF                 js      loc_8EF0
.text:0000000000008DF5                 pxor    xmm0, xmm0
.text:0000000000008DF9                 cvtsi2ss xmm0, rax
.text:0000000000008DFE
.text:0000000000008DFE loc_8DFE:                               ; CODE XREF: hash_delete+189↓j
.text:0000000000008DFE                 mov     rax, [rbx+10h]
.text:0000000000008E02                 mov     rdx, [rbx+28h]
.text:0000000000008E06                 test    rax, rax
.text:0000000000008E09                 js      loc_8ED0
.text:0000000000008E0F                 pxor    xmm1, xmm1
.text:0000000000008E13                 cvtsi2ss xmm1, rax
.text:0000000000008E18
.text:0000000000008E18 loc_8E18:                               ; CODE XREF: hash_delete+169↓j
.text:0000000000008E18                 mulss   xmm1, dword ptr [rdx]
.text:0000000000008E1C                 ucomiss xmm1, xmm0
.text:0000000000008E1F                 jbe     short loc_8DBF
.text:0000000000008E21                 lea     rdi, [rbx+28h]
.text:0000000000008E25                 call    check_tuning
.text:0000000000008E2A                 mov     rax, [rbx+10h]
.text:0000000000008E2E                 mov     rdx, [rbx+28h]
.text:0000000000008E32                 test    rax, rax
.text:0000000000008E35                 js      loc_8F60
.text:0000000000008E3B                 pxor    xmm0, xmm0
.text:0000000000008E3F                 cvtsi2ss xmm0, rax
.text:0000000000008E44
.text:0000000000008E44 loc_8E44:                               ; CODE XREF: hash_delete+1F9↓j
.text:0000000000008E44                 mov     rax, [rbx+18h]
.text:0000000000008E48                 test    rax, rax
.text:0000000000008E4B                 js      loc_8F40
.text:0000000000008E51                 pxor    xmm1, xmm1
.text:0000000000008E55                 cvtsi2ss xmm1, rax
.text:0000000000008E5A
.text:0000000000008E5A loc_8E5A:                               ; CODE XREF: hash_delete+1D9↓j
.text:0000000000008E5A                 movss   xmm2, dword ptr [rdx]
.text:0000000000008E5E                 mulss   xmm2, xmm0
.text:0000000000008E62                 ucomiss xmm2, xmm1
.text:0000000000008E65                 jbe     loc_8DBF
.text:0000000000008E6B                 cmp     byte ptr [rdx+10h], 0
.text:0000000000008E6F                 mulss   xmm0, dword ptr [rdx+4]
.text:0000000000008E74                 jz      loc_8F30
.text:0000000000008E7A
.text:0000000000008E7A loc_8E7A:                               ; CODE XREF: hash_delete+1B5↓j
.text:0000000000008E7A                 ucomiss xmm0, cs:dword_B290
.text:0000000000008E81                 jnb     loc_8F10
.text:0000000000008E87                 cvttss2si rsi, xmm0
.text:0000000000008E8C
.text:0000000000008E8C loc_8E8C:                               ; CODE XREF: hash_delete+1AA↓j
.text:0000000000008E8C                 mov     rdi, rbx
.text:0000000000008E8F                 call    hash_rehash
.text:0000000000008E94                 test    al, al
.text:0000000000008E96                 jnz     loc_8DBF
.text:0000000000008E9C                 mov     rdi, [rbx+48h]  ; ptr
.text:0000000000008EA0                 test    rdi, rdi
.text:0000000000008EA3                 jz      short loc_8EB9
.text:0000000000008EA5                 nop     dword ptr [rax]
.text:0000000000008EA8
.text:0000000000008EA8 loc_8EA8:                               ; CODE XREF: hash_delete+137↓j
.text:0000000000008EA8                 mov     r12, [rdi+8]
.text:0000000000008EAC                 call    free
.text:0000000000008EB1                 test    r12, r12
.text:0000000000008EB4                 mov     rdi, r12
.text:0000000000008EB7                 jnz     short loc_8EA8
.text:0000000000008EB9
.text:0000000000008EB9 loc_8EB9:                               ; CODE XREF: hash_delete+123↑j
.text:0000000000008EB9                 mov     qword ptr [rbx+48h], 0
.text:0000000000008EC1                 jmp     loc_8DBF
.text:0000000000008EC1 ; ---------------------------------------------------------------------------
.text:0000000000008EC6                 align 10h
.text:0000000000008ED0
.text:0000000000008ED0 loc_8ED0:                               ; CODE XREF: hash_delete+89↑j
.text:0000000000008ED0                 mov     rcx, rax
.text:0000000000008ED3                 pxor    xmm1, xmm1
.text:0000000000008ED7                 shr     rcx, 1
.text:0000000000008EDA                 and     eax, 1
.text:0000000000008EDD                 or      rcx, rax
.text:0000000000008EE0                 cvtsi2ss xmm1, rcx
.text:0000000000008EE5                 addss   xmm1, xmm1
.text:0000000000008EE9                 jmp     loc_8E18
.text:0000000000008EE9 ; ---------------------------------------------------------------------------
.text:0000000000008EEE                 align 10h
.text:0000000000008EF0
.text:0000000000008EF0 loc_8EF0:                               ; CODE XREF: hash_delete+6F↑j
.text:0000000000008EF0                 mov     rdx, rax
.text:0000000000008EF3                 pxor    xmm0, xmm0
.text:0000000000008EF7                 shr     rdx, 1
.text:0000000000008EFA                 and     eax, 1
.text:0000000000008EFD                 or      rdx, rax
.text:0000000000008F00                 cvtsi2ss xmm0, rdx
.text:0000000000008F05                 addss   xmm0, xmm0
.text:0000000000008F09                 jmp     loc_8DFE
.text:0000000000008F09 ; ---------------------------------------------------------------------------
.text:0000000000008F0E                 align 10h
.text:0000000000008F10
.text:0000000000008F10 loc_8F10:                               ; CODE XREF: hash_delete+101↑j
.text:0000000000008F10                 subss   xmm0, cs:dword_B290
.text:0000000000008F18                 mov     rax, 8000000000000000h
.text:0000000000008F22                 cvttss2si rsi, xmm0
.text:0000000000008F27                 xor     rsi, rax
.text:0000000000008F2A                 jmp     loc_8E8C
.text:0000000000008F2A ; ---------------------------------------------------------------------------
.text:0000000000008F2F                 align 10h
.text:0000000000008F30
.text:0000000000008F30 loc_8F30:                               ; CODE XREF: hash_delete+F4↑j
.text:0000000000008F30                 mulss   xmm0, dword ptr [rdx+8]
.text:0000000000008F35                 jmp     loc_8E7A
.text:0000000000008F35 ; ---------------------------------------------------------------------------
.text:0000000000008F3A                 align 20h
.text:0000000000008F40
.text:0000000000008F40 loc_8F40:                               ; CODE XREF: hash_delete+CB↑j
.text:0000000000008F40                 mov     rcx, rax
.text:0000000000008F43                 pxor    xmm1, xmm1
.text:0000000000008F47                 shr     rcx, 1
.text:0000000000008F4A                 and     eax, 1
.text:0000000000008F4D                 or      rcx, rax
.text:0000000000008F50                 cvtsi2ss xmm1, rcx
.text:0000000000008F55                 addss   xmm1, xmm1
.text:0000000000008F59                 jmp     loc_8E5A
.text:0000000000008F59 ; ---------------------------------------------------------------------------
.text:0000000000008F5E                 align 20h
.text:0000000000008F60
.text:0000000000008F60 loc_8F60:                               ; CODE XREF: hash_delete+B5↑j
.text:0000000000008F60                 mov     rcx, rax
.text:0000000000008F63                 pxor    xmm0, xmm0
.text:0000000000008F67                 shr     rcx, 1
.text:0000000000008F6A                 and     eax, 1
.text:0000000000008F6D                 or      rcx, rax
.text:0000000000008F70                 cvtsi2ss xmm0, rcx
.text:0000000000008F75                 addss   xmm0, xmm0
.text:0000000000008F79                 jmp     loc_8E44
.text:0000000000008F7E ; ---------------------------------------------------------------------------
.text:0000000000008F7E
.text:0000000000008F7E loc_8F7E:                               ; CODE XREF: hash_delete+50↑j
.text:0000000000008F7E                 call    ___stack_chk_fail
.text:0000000000008F7E ; } // starts at 8D80
.text:0000000000008F7E hash_delete     endp
.text:0000000000008F7E
.text:0000000000008F7E ; ---------------------------------------------------------------------------
.text:0000000000008F83                 align 10h
.text:0000000000008F90
.text:0000000000008F90 ; =============== S U B R O U T I N E =======================================
.text:0000000000008F90
.text:0000000000008F90
.text:0000000000008F90                 public i_ring_init
.text:0000000000008F90 i_ring_init     proc near               ; CODE XREF: rpl_fts_open+2A9↑p
.text:0000000000008F90 ; __unwind {
.text:0000000000008F90                 mov     byte ptr [rdi+1Ch], 1
.text:0000000000008F94                 mov     qword ptr [rdi+14h], 0
.text:0000000000008F9C                 mov     [rdi], esi
.text:0000000000008F9E                 mov     [rdi+4], esi
.text:0000000000008FA1                 mov     [rdi+8], esi
.text:0000000000008FA4                 mov     [rdi+0Ch], esi
.text:0000000000008FA7                 mov     [rdi+10h], esi
.text:0000000000008FAA                 retn
.text:0000000000008FAA ; } // starts at 8F90
.text:0000000000008FAA i_ring_init     endp
.text:0000000000008FAA
.text:0000000000008FAA ; ---------------------------------------------------------------------------
.text:0000000000008FAB                 align 10h
.text:0000000000008FB0
.text:0000000000008FB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000008FB0
.text:0000000000008FB0
.text:0000000000008FB0                 public i_ring_empty
.text:0000000000008FB0 i_ring_empty    proc near               ; CODE XREF: fd_ring_clear+1F↑p
.text:0000000000008FB0                                         ; fts_safe_changedir+1C7↑p
.text:0000000000008FB0 ; __unwind {
.text:0000000000008FB0                 movzx   eax, byte ptr [rdi+1Ch]
.text:0000000000008FB4                 retn
.text:0000000000008FB4 ; } // starts at 8FB0
.text:0000000000008FB4 i_ring_empty    endp
.text:0000000000008FB4
.text:0000000000008FB4 ; ---------------------------------------------------------------------------
.text:0000000000008FB5                 align 20h
.text:0000000000008FC0
.text:0000000000008FC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000008FC0
.text:0000000000008FC0
.text:0000000000008FC0                 public i_ring_push
.text:0000000000008FC0 i_ring_push     proc near               ; CODE XREF: cwd_advance_fd+34↑p
.text:0000000000008FC0 ; __unwind {
.text:0000000000008FC0                 movzx   edx, byte ptr [rdi+1Ch]
.text:0000000000008FC4                 mov     ecx, [rdi+14h]
.text:0000000000008FC7                 xor     edx, 1
.text:0000000000008FCA                 movzx   edx, dl
.text:0000000000008FCD                 add     ecx, edx
.text:0000000000008FCF                 and     ecx, 3
.text:0000000000008FD2                 mov     eax, ecx
.text:0000000000008FD4                 lea     r8, [rdi+rax*4]
.text:0000000000008FD8                 mov     eax, [r8]
.text:0000000000008FDB                 mov     [r8], esi
.text:0000000000008FDE                 mov     esi, [rdi+18h]
.text:0000000000008FE1                 mov     [rdi+14h], ecx
.text:0000000000008FE4                 cmp     esi, ecx
.text:0000000000008FE6                 jnz     short loc_8FF0
.text:0000000000008FE8                 add     edx, esi
.text:0000000000008FEA                 and     edx, 3
.text:0000000000008FED                 mov     [rdi+18h], edx
.text:0000000000008FF0
.text:0000000000008FF0 loc_8FF0:                               ; CODE XREF: i_ring_push+26↑j
.text:0000000000008FF0                 mov     byte ptr [rdi+1Ch], 0
.text:0000000000008FF4                 retn
.text:0000000000008FF4 ; } // starts at 8FC0
.text:0000000000008FF4 i_ring_push     endp
.text:0000000000008FF4
.text:0000000000008FF4 ; ---------------------------------------------------------------------------
.text:0000000000008FF5                 align 20h
.text:0000000000009000
.text:0000000000009000 ; =============== S U B R O U T I N E =======================================
.text:0000000000009000
.text:0000000000009000
.text:0000000000009000                 public i_ring_pop
.text:0000000000009000 i_ring_pop      proc near               ; CODE XREF: fd_ring_clear+13↑p
.text:0000000000009000                                         ; fts_safe_changedir+1DB↑p
.text:0000000000009000 ; __unwind {
.text:0000000000009000                 cmp     byte ptr [rdi+1Ch], 0
.text:0000000000009004                 jnz     short loc_9035
.text:0000000000009006                 mov     eax, [rdi+14h]
.text:0000000000009009                 mov     esi, [rdi+10h]
.text:000000000000900C                 lea     rcx, [rdi+rax*4]
.text:0000000000009010                 mov     rdx, rax
.text:0000000000009013                 mov     eax, [rcx]
.text:0000000000009015                 mov     [rcx], esi
.text:0000000000009017                 cmp     edx, [rdi+18h]
.text:000000000000901A                 jz      short loc_9030
.text:000000000000901C                 add     edx, 3
.text:000000000000901F                 and     edx, 3
.text:0000000000009022                 mov     [rdi+14h], edx
.text:0000000000009025                 retn
.text:0000000000009025 ; ---------------------------------------------------------------------------
.text:0000000000009026                 align 10h
.text:0000000000009030
.text:0000000000009030 loc_9030:                               ; CODE XREF: i_ring_pop+1A↑j
.text:0000000000009030                 mov     byte ptr [rdi+1Ch], 1
.text:0000000000009034                 retn
.text:0000000000009035 ; ---------------------------------------------------------------------------
.text:0000000000009035
.text:0000000000009035 loc_9035:                               ; CODE XREF: i_ring_pop+4↑j
.text:0000000000009035                 sub     rsp, 8
.text:0000000000009039                 call    _abort
.text:0000000000009039 ; } // starts at 9000
.text:0000000000009039 i_ring_pop      endp
.text:0000000000009039
.text:0000000000009039 ; ---------------------------------------------------------------------------
.text:000000000000903E                 align 20h
.text:0000000000009040
.text:0000000000009040 ; =============== S U B R O U T I N E =======================================
.text:0000000000009040
.text:0000000000009040
.text:0000000000009040                 public locale_charset
.text:0000000000009040 locale_charset  proc near               ; CODE XREF: gettext_quote+B↑p
.text:0000000000009040 ; __unwind {
.text:0000000000009040                 sub     rsp, 8
.text:0000000000009044                 mov     edi, 0Eh        ; item
.text:0000000000009049                 call    _nl_langinfo
.text:000000000000904E                 test    rax, rax
.text:0000000000009051                 jz      short loc_9070
.text:0000000000009053                 cmp     byte ptr [rax], 0
.text:0000000000009056                 lea     rdx, aAscii     ; "ASCII"
.text:000000000000905D                 cmovz   rax, rdx
.text:0000000000009061                 add     rsp, 8
.text:0000000000009065                 retn
.text:0000000000009065 ; ---------------------------------------------------------------------------
.text:0000000000009066                 align 10h
.text:0000000000009070
.text:0000000000009070 loc_9070:                               ; CODE XREF: locale_charset+11↑j
.text:0000000000009070                 lea     rax, aAscii     ; "ASCII"
.text:0000000000009077                 add     rsp, 8
.text:000000000000907B                 retn
.text:000000000000907B ; } // starts at 9040
.text:000000000000907B locale_charset  endp
.text:000000000000907B
.text:000000000000907B ; ---------------------------------------------------------------------------
.text:000000000000907C                 align 20h
.text:0000000000009080
.text:0000000000009080 ; =============== S U B R O U T I N E =======================================
.text:0000000000009080
.text:0000000000009080 ; Attributes: noreturn
.text:0000000000009080
.text:0000000000009080 ; void __fastcall __noreturn openat_save_fail(int errnum)
.text:0000000000009080                 public openat_save_fail
.text:0000000000009080 openat_save_fail proc near              ; CODE XREF: getfileconat+111↑p
.text:0000000000009080 ; __unwind {
.text:0000000000009080                 push    rbx
.text:0000000000009081                 lea     rsi, aUnableToRecord ; "unable to record current working direct"...
.text:0000000000009088                 mov     ebx, edi
.text:000000000000908A                 mov     edx, 5          ; category
.text:000000000000908F                 xor     edi, edi        ; domainname
.text:0000000000009091                 call    _dcgettext
.text:0000000000009096                 mov     edi, cs:exit_failure ; status
.text:000000000000909C                 mov     rdx, rax        ; format
.text:000000000000909F                 mov     esi, ebx        ; errnum
.text:00000000000090A1                 xor     eax, eax
.text:00000000000090A3                 call    _error
.text:00000000000090A8                 call    _abort
.text:00000000000090A8 ; } // starts at 9080
.text:00000000000090A8 openat_save_fail endp
.text:00000000000090A8
.text:00000000000090A8 ; ---------------------------------------------------------------------------
.text:00000000000090AD                 align 10h
.text:00000000000090B0
.text:00000000000090B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000090B0
.text:00000000000090B0 ; Attributes: noreturn
.text:00000000000090B0
.text:00000000000090B0 ; void __fastcall __noreturn openat_restore_fail(int errnum)
.text:00000000000090B0                 public openat_restore_fail
.text:00000000000090B0 openat_restore_fail proc near           ; CODE XREF: getfileconat+109↑p
.text:00000000000090B0 ; __unwind {
.text:00000000000090B0                 push    rbx
.text:00000000000090B1                 lea     rsi, aFailedToReturn ; "failed to return to initial working dir"...
.text:00000000000090B8                 mov     ebx, edi
.text:00000000000090BA                 mov     edx, 5          ; category
.text:00000000000090BF                 xor     edi, edi        ; domainname
.text:00000000000090C1                 call    _dcgettext
.text:00000000000090C6                 mov     edi, cs:exit_failure ; status
.text:00000000000090CC                 mov     rdx, rax        ; format
.text:00000000000090CF                 mov     esi, ebx        ; errnum
.text:00000000000090D1                 xor     eax, eax
.text:00000000000090D3                 call    _error
.text:00000000000090D8                 call    _abort
.text:00000000000090D8 ; } // starts at 90B0
.text:00000000000090D8 openat_restore_fail endp
.text:00000000000090D8
.text:00000000000090D8 ; ---------------------------------------------------------------------------
.text:00000000000090DD                 align 20h
.text:00000000000090E0
.text:00000000000090E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000090E0
.text:00000000000090E0
.text:00000000000090E0                 public openat_safer
.text:00000000000090E0 openat_safer    proc near               ; CODE XREF: diropen_isra_6+35↑j
.text:00000000000090E0                                         ; opendirat+15↓p
.text:00000000000090E0
.text:00000000000090E0 var_58          = dword ptr -58h
.text:00000000000090E0 var_50          = qword ptr -50h
.text:00000000000090E0 var_48          = qword ptr -48h
.text:00000000000090E0 var_40          = qword ptr -40h
.text:00000000000090E0 var_38          = byte ptr -38h
.text:00000000000090E0 var_20          = qword ptr -20h
.text:00000000000090E0 arg_0           = byte ptr  8
.text:00000000000090E0
.text:00000000000090E0 ; __unwind {
.text:00000000000090E0                 sub     rsp, 58h
.text:00000000000090E4                 mov     [rsp+58h+var_20], rcx
.text:00000000000090E9                 xor     ecx, ecx
.text:00000000000090EB                 mov     rax, fs:28h
.text:00000000000090F4                 mov     [rsp+58h+var_40], rax
.text:00000000000090F9                 xor     eax, eax
.text:00000000000090FB                 test    dl, 40h
.text:00000000000090FE                 jnz     short loc_9128
.text:0000000000009100
.text:0000000000009100 loc_9100:                               ; CODE XREF: openat_safer+67↓j
.text:0000000000009100                 xor     eax, eax
.text:0000000000009102                 call    _openat
.text:0000000000009107                 mov     edi, eax        ; fd
.text:0000000000009109                 call    fd_safer_flag
.text:000000000000910E                 mov     rsi, [rsp+58h+var_40]
.text:0000000000009113                 xor     rsi, fs:28h
.text:000000000000911C                 jnz     short loc_9149
.text:000000000000911E                 add     rsp, 58h
.text:0000000000009122                 retn
.text:0000000000009122 ; ---------------------------------------------------------------------------
.text:0000000000009123                 align 8
.text:0000000000009128
.text:0000000000009128 loc_9128:                               ; CODE XREF: openat_safer+1E↑j
.text:0000000000009128                 lea     rax, [rsp+58h+arg_0]
.text:000000000000912D                 mov     [rsp+58h+var_58], 18h
.text:0000000000009134                 mov     ecx, dword ptr [rsp+58h+var_20]
.text:0000000000009138                 mov     [rsp+58h+var_50], rax
.text:000000000000913D                 lea     rax, [rsp+58h+var_38]
.text:0000000000009142                 mov     [rsp+58h+var_48], rax
.text:0000000000009147                 jmp     short loc_9100
.text:0000000000009149 ; ---------------------------------------------------------------------------
.text:0000000000009149
.text:0000000000009149 loc_9149:                               ; CODE XREF: openat_safer+3C↑j
.text:0000000000009149                 call    ___stack_chk_fail
.text:0000000000009149 ; } // starts at 90E0
.text:0000000000009149 openat_safer    endp
.text:0000000000009149
.text:0000000000009149 ; ---------------------------------------------------------------------------
.text:000000000000914E                 align 10h
.text:0000000000009150
.text:0000000000009150 ; =============== S U B R O U T I N E =======================================
.text:0000000000009150
.text:0000000000009150
.text:0000000000009150                 public opendirat
.text:0000000000009150 opendirat       proc near               ; CODE XREF: fts_build+4A5↑p
.text:0000000000009150 ; __unwind {
.text:0000000000009150                 push    r13
.text:0000000000009152                 push    r12
.text:0000000000009154                 or      edx, 90900h
.text:000000000000915A                 push    rbp
.text:000000000000915B                 push    rbx
.text:000000000000915C                 xor     eax, eax
.text:000000000000915E                 mov     r12, rcx
.text:0000000000009161                 sub     rsp, 8
.text:0000000000009165                 call    openat_safer
.text:000000000000916A                 test    eax, eax
.text:000000000000916C                 js      short loc_91C0
.text:000000000000916E                 mov     edi, eax        ; fd
.text:0000000000009170                 mov     ebx, eax
.text:0000000000009172                 call    _fdopendir
.text:0000000000009177                 test    rax, rax
.text:000000000000917A                 mov     rbp, rax
.text:000000000000917D                 jz      short loc_9198
.text:000000000000917F                 mov     [r12], ebx
.text:0000000000009183                 add     rsp, 8
.text:0000000000009187                 mov     rax, rbp
.text:000000000000918A                 pop     rbx
.text:000000000000918B                 pop     rbp
.text:000000000000918C                 pop     r12
.text:000000000000918E                 pop     r13
.text:0000000000009190                 retn
.text:0000000000009190 ; ---------------------------------------------------------------------------
.text:0000000000009191                 align 8
.text:0000000000009198
.text:0000000000009198 loc_9198:                               ; CODE XREF: opendirat+2D↑j
.text:0000000000009198                 call    ___errno_location
.text:000000000000919D                 mov     r13d, [rax]
.text:00000000000091A0                 mov     r12, rax
.text:00000000000091A3                 mov     edi, ebx        ; fd
.text:00000000000091A5                 call    _close
.text:00000000000091AA                 mov     rax, rbp
.text:00000000000091AD                 mov     [r12], r13d
.text:00000000000091B1                 add     rsp, 8
.text:00000000000091B5                 pop     rbx
.text:00000000000091B6                 pop     rbp
.text:00000000000091B7                 pop     r12
.text:00000000000091B9                 pop     r13
.text:00000000000091BB                 retn
.text:00000000000091BB ; ---------------------------------------------------------------------------
.text:00000000000091BC                 align 20h
.text:00000000000091C0
.text:00000000000091C0 loc_91C0:                               ; CODE XREF: opendirat+1C↑j
.text:00000000000091C0                 add     rsp, 8
.text:00000000000091C4                 xor     ebp, ebp
.text:00000000000091C6                 pop     rbx
.text:00000000000091C7                 mov     rax, rbp
.text:00000000000091CA                 pop     rbp
.text:00000000000091CB                 pop     r12
.text:00000000000091CD                 pop     r13
.text:00000000000091CF                 retn
.text:00000000000091CF ; } // starts at 9150
.text:00000000000091CF opendirat       endp
.text:00000000000091CF
.text:00000000000091D0
.text:00000000000091D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000091D0
.text:00000000000091D0
.text:00000000000091D0                 public save_cwd
.text:00000000000091D0 save_cwd        proc near               ; CODE XREF: getfileconat+6A↑p
.text:00000000000091D0 ; __unwind {
.text:00000000000091D0                 push    rbx
.text:00000000000091D1                 mov     rbx, rdi
.text:00000000000091D4                 mov     qword ptr [rdi+8], 0
.text:00000000000091DC                 lea     rdi, asc_B15A+1 ; "."
.text:00000000000091E3                 xor     eax, eax
.text:00000000000091E5                 mov     esi, 80000h
.text:00000000000091EA                 call    open_safer
.text:00000000000091EF                 mov     edx, eax
.text:00000000000091F1                 mov     [rbx], eax
.text:00000000000091F3                 xor     eax, eax
.text:00000000000091F5                 test    edx, edx
.text:00000000000091F7                 js      short loc_9200
.text:00000000000091F9                 pop     rbx
.text:00000000000091FA                 retn
.text:00000000000091FA ; ---------------------------------------------------------------------------
.text:00000000000091FB                 align 20h
.text:0000000000009200
.text:0000000000009200 loc_9200:                               ; CODE XREF: save_cwd+27↑j
.text:0000000000009200                 xor     esi, esi        ; size
.text:0000000000009202                 xor     edi, edi        ; buf
.text:0000000000009204                 call    _getcwd
.text:0000000000009209                 test    rax, rax
.text:000000000000920C                 mov     [rbx+8], rax
.text:0000000000009210                 setz    al
.text:0000000000009213                 movzx   eax, al
.text:0000000000009216                 neg     eax
.text:0000000000009218                 pop     rbx
.text:0000000000009219                 retn
.text:0000000000009219 ; } // starts at 91D0
.text:0000000000009219 save_cwd        endp
.text:0000000000009219
.text:0000000000009219 ; ---------------------------------------------------------------------------
.text:000000000000921A                 align 20h
.text:0000000000009220
.text:0000000000009220 ; =============== S U B R O U T I N E =======================================
.text:0000000000009220
.text:0000000000009220
.text:0000000000009220                 public restore_cwd
.text:0000000000009220 restore_cwd     proc near               ; CODE XREF: getfileconat+95↑p
.text:0000000000009220 ; __unwind {
.text:0000000000009220                 mov     eax, [rdi]
.text:0000000000009222                 test    eax, eax
.text:0000000000009224                 js      short loc_9230
.text:0000000000009226                 mov     edi, eax        ; fd
.text:0000000000009228                 jmp     _fchdir
.text:0000000000009228 ; ---------------------------------------------------------------------------
.text:000000000000922D                 align 10h
.text:0000000000009230
.text:0000000000009230 loc_9230:                               ; CODE XREF: restore_cwd+4↑j
.text:0000000000009230                 mov     rdi, [rdi+8]    ; s
.text:0000000000009234                 jmp     chdir_long
.text:0000000000009234 ; } // starts at 9220
.text:0000000000009234 restore_cwd     endp
.text:0000000000009234
.text:0000000000009234 ; ---------------------------------------------------------------------------
.text:0000000000009239                 align 20h
.text:0000000000009240
.text:0000000000009240 ; =============== S U B R O U T I N E =======================================
.text:0000000000009240
.text:0000000000009240
.text:0000000000009240                 public free_cwd
.text:0000000000009240 free_cwd        proc near               ; CODE XREF: getfileconat+A1↑p
.text:0000000000009240                                         ; getfileconat+E6↑p ...
.text:0000000000009240 ; __unwind {
.text:0000000000009240                 push    rbx
.text:0000000000009241                 mov     rbx, rdi
.text:0000000000009244                 mov     edi, [rdi]      ; fd
.text:0000000000009246                 test    edi, edi
.text:0000000000009248                 js      short loc_924F
.text:000000000000924A                 call    _close
.text:000000000000924F
.text:000000000000924F loc_924F:                               ; CODE XREF: free_cwd+8↑j
.text:000000000000924F                 mov     rdi, [rbx+8]    ; ptr
.text:0000000000009253                 pop     rbx
.text:0000000000009254                 jmp     free
.text:0000000000009254 ; } // starts at 9240
.text:0000000000009254 free_cwd        endp
.text:0000000000009254
.text:0000000000009254 ; ---------------------------------------------------------------------------
.text:0000000000009259                 align 20h
.text:0000000000009260
.text:0000000000009260 ; =============== S U B R O U T I N E =======================================
.text:0000000000009260
.text:0000000000009260 ; Attributes: info_from_lumina
.text:0000000000009260
.text:0000000000009260 ; __int64 __fastcall fd_safer_flag(int fd)
.text:0000000000009260                 public fd_safer_flag
.text:0000000000009260 fd_safer_flag   proc near               ; CODE XREF: open_safer+2A↑p
.text:0000000000009260                                         ; openat_safer+29↑p
.text:0000000000009260 ; __unwind {
.text:0000000000009260                 push    r13
.text:0000000000009262                 push    r12
.text:0000000000009264                 push    rbp
.text:0000000000009265                 push    rbx
.text:0000000000009266                 mov     ebx, edi
.text:0000000000009268                 sub     rsp, 8
.text:000000000000926C                 cmp     edi, 2
.text:000000000000926F                 ja      short loc_9292
.text:0000000000009271                 call    dup_safer
.text:0000000000009276                 mov     r12d, eax
.text:0000000000009279                 call    ___errno_location
.text:000000000000927E                 mov     r13d, [rax]
.text:0000000000009281                 mov     rbp, rax
.text:0000000000009284                 mov     edi, ebx        ; fd
.text:0000000000009286                 call    _close
.text:000000000000928B                 mov     ebx, r12d
.text:000000000000928E                 mov     [rbp+0], r13d
.text:0000000000009292
.text:0000000000009292 loc_9292:                               ; CODE XREF: fd_safer_flag+F↑j
.text:0000000000009292                 add     rsp, 8
.text:0000000000009296                 mov     eax, ebx
.text:0000000000009298                 pop     rbx
.text:0000000000009299                 pop     rbp
.text:000000000000929A                 pop     r12
.text:000000000000929C                 pop     r13
.text:000000000000929E                 retn
.text:000000000000929E ; } // starts at 9260
.text:000000000000929E fd_safer_flag   endp
.text:000000000000929E
.text:000000000000929E ; ---------------------------------------------------------------------------
.text:000000000000929F                 align 20h
.text:00000000000092A0
.text:00000000000092A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000092A0
.text:00000000000092A0
.text:00000000000092A0 cdb_free        proc near               ; CODE XREF: cdb_advance_fd+20↓p
.text:00000000000092A0                                         ; chdir_long+1CE↓p ...
.text:00000000000092A0 ; __unwind {
.text:00000000000092A0                 mov     edi, [rdi]      ; fd
.text:00000000000092A2                 test    edi, edi
.text:00000000000092A4                 js      short locret_92C0
.text:00000000000092A6                 sub     rsp, 8
.text:00000000000092AA                 call    _close
.text:00000000000092AF                 test    eax, eax
.text:00000000000092B1                 jnz     short loc_92C2
.text:00000000000092B3                 add     rsp, 8
.text:00000000000092B7                 retn
.text:00000000000092B7 ; ---------------------------------------------------------------------------
.text:00000000000092B8                 align 20h
.text:00000000000092C0
.text:00000000000092C0 locret_92C0:                            ; CODE XREF: cdb_free+4↑j
.text:00000000000092C0                 rep retn
.text:00000000000092C2 ; ---------------------------------------------------------------------------
.text:00000000000092C2
.text:00000000000092C2 loc_92C2:                               ; CODE XREF: cdb_free+11↑j
.text:00000000000092C2                 lea     rcx, __PRETTY_FUNCTION___5081 ; "cdb_free"
.text:00000000000092C9                 lea     rsi, aCoreutils831Li_1 ; "../coreutils-8.31/lib/chdir-long.c"
.text:00000000000092D0                 lea     rdi, aCloseFail ; "! close_fail"
.text:00000000000092D7                 mov     edx, 40h ; '@'  ; line
.text:00000000000092DC                 call    ___assert_fail
.text:00000000000092DC ; } // starts at 92A0
.text:00000000000092DC cdb_free        endp
.text:00000000000092DC
.text:00000000000092DC ; ---------------------------------------------------------------------------
.text:00000000000092E1                 align 10h
.text:00000000000092F0
.text:00000000000092F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000092F0
.text:00000000000092F0
.text:00000000000092F0 cdb_advance_fd  proc near               ; CODE XREF: chdir_long+103↓p
.text:00000000000092F0                                         ; chdir_long+199↓p ...
.text:00000000000092F0 ; __unwind {
.text:00000000000092F0                 push    rbp
.text:00000000000092F1                 push    rbx
.text:00000000000092F2                 mov     rbx, rdi
.text:00000000000092F5                 xor     eax, eax
.text:00000000000092F7                 mov     edx, 10900h     ; oflag
.text:00000000000092FC                 sub     rsp, 8
.text:0000000000009300                 mov     edi, [rdi]      ; fd
.text:0000000000009302                 call    _openat
.text:0000000000009307                 test    eax, eax
.text:0000000000009309                 js      short loc_9320
.text:000000000000930B                 mov     ebp, eax
.text:000000000000930D                 mov     rdi, rbx
.text:0000000000009310                 call    cdb_free
.text:0000000000009315                 mov     [rbx], ebp
.text:0000000000009317                 xor     eax, eax
.text:0000000000009319
.text:0000000000009319 loc_9319:                               ; CODE XREF: cdb_advance_fd+35↓j
.text:0000000000009319                 add     rsp, 8
.text:000000000000931D                 pop     rbx
.text:000000000000931E                 pop     rbp
.text:000000000000931F                 retn
.text:0000000000009320 ; ---------------------------------------------------------------------------
.text:0000000000009320
.text:0000000000009320 loc_9320:                               ; CODE XREF: cdb_advance_fd+19↑j
.text:0000000000009320                 mov     eax, 0FFFFFFFFh
.text:0000000000009325                 jmp     short loc_9319
.text:0000000000009325 ; } // starts at 92F0
.text:0000000000009325 cdb_advance_fd  endp
.text:0000000000009325
.text:0000000000009325 ; ---------------------------------------------------------------------------
.text:0000000000009327                 align 10h
.text:0000000000009330
.text:0000000000009330 ; =============== S U B R O U T I N E =======================================
.text:0000000000009330
.text:0000000000009330 ; Attributes: info_from_lumina
.text:0000000000009330
.text:0000000000009330 ; __int64 __fastcall chdir_long(void *s)
.text:0000000000009330                 public chdir_long
.text:0000000000009330 chdir_long      proc near               ; CODE XREF: restore_cwd+14↑j
.text:0000000000009330
.text:0000000000009330 fd              = dword ptr -44h
.text:0000000000009330 var_40          = qword ptr -40h
.text:0000000000009330
.text:0000000000009330 ; __unwind {
.text:0000000000009330                 push    r15
.text:0000000000009332                 push    r14
.text:0000000000009334                 push    r13
.text:0000000000009336                 push    r12
.text:0000000000009338                 push    rbp
.text:0000000000009339                 push    rbx
.text:000000000000933A                 mov     rbp, rdi
.text:000000000000933D                 sub     rsp, 18h
.text:0000000000009341                 mov     rax, fs:28h
.text:000000000000934A                 mov     [rsp+48h+var_40], rax
.text:000000000000934F                 xor     eax, eax
.text:0000000000009351                 call    _chdir          ; PIC mode
.text:0000000000009356                 test    eax, eax
.text:0000000000009358                 mov     ebx, eax
.text:000000000000935A                 jz      short loc_9369
.text:000000000000935C                 call    ___errno_location ; PIC mode
.text:0000000000009361                 cmp     dword ptr [rax], 24h ; '$'
.text:0000000000009364                 mov     r14, rax
.text:0000000000009367                 jz      short loc_9390
.text:0000000000009369
.text:0000000000009369 loc_9369:                               ; CODE XREF: chdir_long+2A↑j
.text:0000000000009369                                         ; chdir_long+162↓j ...
.text:0000000000009369                 mov     rcx, [rsp+48h+var_40]
.text:000000000000936E                 xor     rcx, fs:28h
.text:0000000000009377                 mov     eax, ebx
.text:0000000000009379                 jnz     loc_9581
.text:000000000000937F                 add     rsp, 18h
.text:0000000000009383                 pop     rbx
.text:0000000000009384                 pop     rbp
.text:0000000000009385                 pop     r12
.text:0000000000009387                 pop     r13
.text:0000000000009389                 pop     r14
.text:000000000000938B                 pop     r15
.text:000000000000938D                 retn
.text:000000000000938D ; ---------------------------------------------------------------------------
.text:000000000000938E                 align 10h
.text:0000000000009390
.text:0000000000009390 loc_9390:                               ; CODE XREF: chdir_long+37↑j
.text:0000000000009390                 mov     rdi, rbp        ; s
.text:0000000000009393                 call    _strlen         ; PIC mode
.text:0000000000009398                 test    rax, rax
.text:000000000000939B                 mov     r12, rax
.text:000000000000939E                 mov     [rsp+48h+fd], 0FFFFFF9Ch
.text:00000000000093A6                 jz      loc_9586
.text:00000000000093AC                 cmp     rax, 0FFFh
.text:00000000000093B2                 jbe     loc_95A5
.text:00000000000093B8                 lea     rsi, aProcSelfFdD+10h ; accept
.text:00000000000093BF                 mov     rdi, rbp        ; s
.text:00000000000093C2                 call    _strspn         ; PIC mode
.text:00000000000093C7                 cmp     rax, 2
.text:00000000000093CB                 mov     rbx, rax
.text:00000000000093CE                 jz      loc_94A0
.text:00000000000093D4                 test    rax, rax
.text:00000000000093D7                 mov     r15, rbp
.text:00000000000093DA                 jnz     loc_9540
.text:00000000000093E0
.text:00000000000093E0 loc_93E0:                               ; CODE XREF: chdir_long+1BC↓j
.text:00000000000093E0                                         ; chdir_long+22D↓j
.text:00000000000093E0                 cmp     byte ptr [r15], 2Fh ; '/'
.text:00000000000093E4                 jz      loc_95E3
.text:00000000000093EA                 add     rbp, r12
.text:00000000000093ED                 cmp     r15, rbp
.text:00000000000093F0                 ja      loc_95C4
.text:00000000000093F6                 mov     rax, rbp
.text:00000000000093F9                 lea     r12, [rsp+48h+fd]
.text:00000000000093FE                 sub     rax, r15
.text:0000000000009401                 cmp     rax, 0FFFh
.text:0000000000009407                 mov     r13, r12
.text:000000000000940A                 jg      short loc_946C
.text:000000000000940C                 jmp     loc_9510
.text:000000000000940C ; ---------------------------------------------------------------------------
.text:0000000000009411                 align 8
.text:0000000000009418
.text:0000000000009418 loc_9418:                               ; CODE XREF: chdir_long+154↓j
.text:0000000000009418                 mov     byte ptr [rax], 0
.text:000000000000941B                 sub     rax, r15
.text:000000000000941E                 cmp     rax, 0FFFh
.text:0000000000009424                 jg      loc_9562
.text:000000000000942A                 mov     rsi, r15
.text:000000000000942D                 mov     rdi, r12
.text:0000000000009430                 mov     r13, r12
.text:0000000000009433                 call    cdb_advance_fd
.text:0000000000009438                 test    eax, eax
.text:000000000000943A                 mov     byte ptr [rbx], 2Fh ; '/'
.text:000000000000943D                 jnz     loc_94F8
.text:0000000000009443                 add     rbx, 1
.text:0000000000009447                 lea     rsi, aProcSelfFdD+10h ; accept
.text:000000000000944E                 mov     rdi, rbx        ; s
.text:0000000000009451                 call    _strspn         ; PIC mode
.text:0000000000009456                 lea     r15, [rbx+rax]
.text:000000000000945A                 mov     rax, rbp
.text:000000000000945D                 sub     rax, r15
.text:0000000000009460                 cmp     rax, 0FFFh
.text:0000000000009466                 jle     loc_9510
.text:000000000000946C
.text:000000000000946C loc_946C:                               ; CODE XREF: chdir_long+DA↑j
.text:000000000000946C                 mov     edx, 1000h      ; n
.text:0000000000009471                 mov     esi, 2Fh ; '/'  ; c
.text:0000000000009476                 mov     rdi, r15        ; s
.text:0000000000009479                 call    _memrchr        ; PIC mode
.text:000000000000947E                 test    rax, rax
.text:0000000000009481                 mov     rbx, rax
.text:0000000000009484                 jnz     short loc_9418
.text:0000000000009486                 mov     dword ptr [r14], 24h ; '$'
.text:000000000000948D                 mov     ebx, 0FFFFFFFFh
.text:0000000000009492                 jmp     loc_9369
.text:0000000000009492 ; ---------------------------------------------------------------------------
.text:0000000000009497                 align 20h
.text:00000000000094A0
.text:00000000000094A0 loc_94A0:                               ; CODE XREF: chdir_long+9E↑j
.text:00000000000094A0                 lea     rdx, [r12-3]    ; n
.text:00000000000094A5                 lea     rdi, [rbp+3]    ; s
.text:00000000000094A9                 mov     esi, 2Fh ; '/'  ; c
.text:00000000000094AE                 call    _memchr         ; PIC mode
.text:00000000000094B3                 test    rax, rax
.text:00000000000094B6                 mov     rbx, rax
.text:00000000000094B9                 jz      short loc_9506
.text:00000000000094BB                 lea     r13, [rsp+48h+fd]
.text:00000000000094C0                 mov     byte ptr [rax], 0
.text:00000000000094C3                 mov     rsi, rbp
.text:00000000000094C6                 mov     rdi, r13
.text:00000000000094C9                 call    cdb_advance_fd
.text:00000000000094CE                 test    eax, eax
.text:00000000000094D0                 mov     byte ptr [rbx], 2Fh ; '/'
.text:00000000000094D3                 jnz     short loc_94F8
.text:00000000000094D5                 add     rbx, 1
.text:00000000000094D9                 lea     rsi, aProcSelfFdD+10h ; accept
.text:00000000000094E0                 mov     rdi, rbx        ; s
.text:00000000000094E3                 call    _strspn         ; PIC mode
.text:00000000000094E8                 lea     r15, [rbx+rax]
.text:00000000000094EC                 jmp     loc_93E0
.text:00000000000094EC ; ---------------------------------------------------------------------------
.text:00000000000094F1                 align 8
.text:00000000000094F8
.text:00000000000094F8 loc_94F8:                               ; CODE XREF: chdir_long+10D↑j
.text:00000000000094F8                                         ; chdir_long+1A3↑j ...
.text:00000000000094F8                 mov     ebx, [r14]
.text:00000000000094FB                 mov     rdi, r13
.text:00000000000094FE                 call    cdb_free
.text:0000000000009503                 mov     [r14], ebx
.text:0000000000009506
.text:0000000000009506 loc_9506:                               ; CODE XREF: chdir_long+189↑j
.text:0000000000009506                 mov     ebx, 0FFFFFFFFh
.text:000000000000950B                 jmp     loc_9369
.text:0000000000009510 ; ---------------------------------------------------------------------------
.text:0000000000009510
.text:0000000000009510 loc_9510:                               ; CODE XREF: chdir_long+DC↑j
.text:0000000000009510                                         ; chdir_long+136↑j
.text:0000000000009510                 cmp     rbp, r15
.text:0000000000009513                 jbe     short loc_9524
.text:0000000000009515                 mov     rsi, r15
.text:0000000000009518                 mov     rdi, r13
.text:000000000000951B                 call    cdb_advance_fd
.text:0000000000009520                 test    eax, eax
.text:0000000000009522                 jnz     short loc_94F8
.text:0000000000009524
.text:0000000000009524 loc_9524:                               ; CODE XREF: chdir_long+1E3↑j
.text:0000000000009524                 mov     edi, [rsp+48h+fd] ; fd
.text:0000000000009528                 call    _fchdir         ; PIC mode
.text:000000000000952D                 test    eax, eax
.text:000000000000952F                 mov     ebx, eax
.text:0000000000009531                 jnz     short loc_94F8
.text:0000000000009533                 mov     rdi, r13
.text:0000000000009536                 call    cdb_free
.text:000000000000953B                 jmp     loc_9369
.text:0000000000009540 ; ---------------------------------------------------------------------------
.text:0000000000009540
.text:0000000000009540 loc_9540:                               ; CODE XREF: chdir_long+AA↑j
.text:0000000000009540                 lea     r13, [rsp+48h+fd]
.text:0000000000009545                 lea     rsi, aProcSelfFdD+10h ; "/"
.text:000000000000954C                 mov     rdi, r13
.text:000000000000954F                 call    cdb_advance_fd
.text:0000000000009554                 test    eax, eax
.text:0000000000009556                 jnz     short loc_94F8
.text:0000000000009558                 lea     r15, [rbp+rbx+0]
.text:000000000000955D                 jmp     loc_93E0
.text:0000000000009562 ; ---------------------------------------------------------------------------
.text:0000000000009562
.text:0000000000009562 loc_9562:                               ; CODE XREF: chdir_long+F4↑j
.text:0000000000009562                 lea     rcx, __PRETTY_FUNCTION___5099 ; "chdir_long"
.text:0000000000009569                 lea     rsi, aCoreutils831Li_1 ; "../coreutils-8.31/lib/chdir-long.c"
.text:0000000000009570                 lea     rdi, aSlashDir4096 ; "slash - dir < 4096"
.text:0000000000009577                 mov     edx, 0B3h       ; line
.text:000000000000957C                 call    ___assert_fail  ; PIC mode
.text:0000000000009581 ; ---------------------------------------------------------------------------
.text:0000000000009581
.text:0000000000009581 loc_9581:                               ; CODE XREF: chdir_long+49↑j
.text:0000000000009581                 call    ___stack_chk_fail ; PIC mode
.text:0000000000009586 ; ---------------------------------------------------------------------------
.text:0000000000009586
.text:0000000000009586 loc_9586:                               ; CODE XREF: chdir_long+76↑j
.text:0000000000009586                 lea     rcx, __PRETTY_FUNCTION___5099 ; "chdir_long"
.text:000000000000958D                 lea     rsi, aCoreutils831Li_1 ; "../coreutils-8.31/lib/chdir-long.c"
.text:0000000000009594                 lea     rdi, a0Len      ; "0 < len"
.text:000000000000959B                 mov     edx, 7Eh ; '~'  ; line
.text:00000000000095A0                 call    ___assert_fail  ; PIC mode
.text:00000000000095A5 ; ---------------------------------------------------------------------------
.text:00000000000095A5
.text:00000000000095A5 loc_95A5:                               ; CODE XREF: chdir_long+82↑j
.text:00000000000095A5                 lea     rcx, __PRETTY_FUNCTION___5099 ; "chdir_long"
.text:00000000000095AC                 lea     rsi, aCoreutils831Li_1 ; "../coreutils-8.31/lib/chdir-long.c"
.text:00000000000095B3                 lea     rdi, a4096Len   ; "4096 <= len"
.text:00000000000095BA                 mov     edx, 7Fh        ; line
.text:00000000000095BF                 call    ___assert_fail  ; PIC mode
.text:00000000000095C4 ; ---------------------------------------------------------------------------
.text:00000000000095C4
.text:00000000000095C4 loc_95C4:                               ; CODE XREF: chdir_long+C0↑j
.text:00000000000095C4                 lea     rcx, __PRETTY_FUNCTION___5099 ; "chdir_long"
.text:00000000000095CB                 lea     rsi, aCoreutils831Li_1 ; "../coreutils-8.31/lib/chdir-long.c"
.text:00000000000095D2                 lea     rdi, aDirDirEnd ; "dir <= dir_end"
.text:00000000000095D9                 mov     edx, 0A3h       ; line
.text:00000000000095DE                 call    ___assert_fail  ; PIC mode
.text:00000000000095E3 ; ---------------------------------------------------------------------------
.text:00000000000095E3
.text:00000000000095E3 loc_95E3:                               ; CODE XREF: chdir_long+B4↑j
.text:00000000000095E3                 lea     rcx, __PRETTY_FUNCTION___5099 ; "chdir_long"
.text:00000000000095EA                 lea     rsi, aCoreutils831Li_1 ; "../coreutils-8.31/lib/chdir-long.c"
.text:00000000000095F1                 lea     rdi, aDir       ; "*dir != '/'"
.text:00000000000095F8                 mov     edx, 0A2h       ; line
.text:00000000000095FD                 call    ___assert_fail  ; PIC mode
.text:00000000000095FD ; } // starts at 9330
.text:00000000000095FD chdir_long      endp
.text:00000000000095FD
.text:00000000000095FD ; ---------------------------------------------------------------------------
.text:0000000000009602                 align 10h
.text:0000000000009610
.text:0000000000009610 ; =============== S U B R O U T I N E =======================================
.text:0000000000009610
.text:0000000000009610 ; Attributes: info_from_lumina
.text:0000000000009610
.text:0000000000009610 ; int __fastcall rpl_fclose(FILE *fp)
.text:0000000000009610                 public rpl_fclose
.text:0000000000009610 rpl_fclose      proc near               ; CODE XREF: close_stream+15↑p
.text:0000000000009610 ; __unwind {
.text:0000000000009610                 push    r12
.text:0000000000009612                 push    rbp
.text:0000000000009613                 push    rbx
.text:0000000000009614                 mov     rbx, rdi
.text:0000000000009617                 call    _fileno
.text:000000000000961C                 test    eax, eax
.text:000000000000961E                 mov     rdi, rbx        ; fp
.text:0000000000009621                 js      short loc_9677
.text:0000000000009623                 call    ___freading
.text:0000000000009628                 test    eax, eax
.text:000000000000962A                 jnz     short loc_9658
.text:000000000000962C
.text:000000000000962C loc_962C:                               ; CODE XREF: rpl_fclose+62↓j
.text:000000000000962C                 mov     rdi, rbx        ; stream
.text:000000000000962F                 call    rpl_fflush
.text:0000000000009634                 test    eax, eax
.text:0000000000009636                 jz      short loc_9674
.text:0000000000009638                 call    ___errno_location
.text:000000000000963D                 mov     r12d, [rax]
.text:0000000000009640                 mov     rdi, rbx        ; stream
.text:0000000000009643                 mov     rbp, rax
.text:0000000000009646                 call    _fclose
.text:000000000000964B                 test    r12d, r12d
.text:000000000000964E                 jnz     short loc_9680
.text:0000000000009650
.text:0000000000009650 loc_9650:                               ; CODE XREF: rpl_fclose+79↓j
.text:0000000000009650                 pop     rbx
.text:0000000000009651                 pop     rbp
.text:0000000000009652                 pop     r12
.text:0000000000009654                 retn
.text:0000000000009654 ; ---------------------------------------------------------------------------
.text:0000000000009655                 align 8
.text:0000000000009658
.text:0000000000009658 loc_9658:                               ; CODE XREF: rpl_fclose+1A↑j
.text:0000000000009658                 mov     rdi, rbx        ; stream
.text:000000000000965B                 call    _fileno
.text:0000000000009660                 xor     esi, esi        ; offset
.text:0000000000009662                 mov     edx, 1          ; whence
.text:0000000000009667                 mov     edi, eax        ; fd
.text:0000000000009669                 call    _lseek
.text:000000000000966E                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000009672                 jnz     short loc_962C
.text:0000000000009674
.text:0000000000009674 loc_9674:                               ; CODE XREF: rpl_fclose+26↑j
.text:0000000000009674                 mov     rdi, rbx        ; stream
.text:0000000000009677
.text:0000000000009677 loc_9677:                               ; CODE XREF: rpl_fclose+11↑j
.text:0000000000009677                 pop     rbx
.text:0000000000009678                 pop     rbp
.text:0000000000009679                 pop     r12
.text:000000000000967B                 jmp     _fclose
.text:0000000000009680 ; ---------------------------------------------------------------------------
.text:0000000000009680
.text:0000000000009680 loc_9680:                               ; CODE XREF: rpl_fclose+3E↑j
.text:0000000000009680                 mov     [rbp+0], r12d
.text:0000000000009684                 mov     eax, 0FFFFFFFFh
.text:0000000000009689                 jmp     short loc_9650
.text:0000000000009689 ; } // starts at 9610
.text:0000000000009689 rpl_fclose      endp
.text:0000000000009689
.text:0000000000009689 ; ---------------------------------------------------------------------------
.text:000000000000968B                 align 10h
.text:0000000000009690
.text:0000000000009690 ; =============== S U B R O U T I N E =======================================
.text:0000000000009690
.text:0000000000009690
.text:0000000000009690 ; __int64 __usercall rpl_fcntl@<rax>(int fd@<edi>, char)
.text:0000000000009690                 public rpl_fcntl
.text:0000000000009690 rpl_fcntl       proc near               ; CODE XREF: fts_build+90A↑p
.text:0000000000009690                                         ; dup_safer+9↓j
.text:0000000000009690
.text:0000000000009690 var_68          = dword ptr -68h
.text:0000000000009690 var_60          = qword ptr -60h
.text:0000000000009690 var_58          = qword ptr -58h
.text:0000000000009690 var_50          = qword ptr -50h
.text:0000000000009690 var_48          = byte ptr -48h
.text:0000000000009690 var_38          = qword ptr -38h
.text:0000000000009690 var_30          = qword ptr -30h
.text:0000000000009690 var_28          = qword ptr -28h
.text:0000000000009690 var_20          = qword ptr -20h
.text:0000000000009690 arg_0           = byte ptr  8
.text:0000000000009690
.text:0000000000009690 ; __unwind {
.text:0000000000009690                 push    r12
.text:0000000000009692                 push    rbp
.text:0000000000009693                 mov     ebp, edi
.text:0000000000009695                 push    rbx
.text:0000000000009696                 sub     rsp, 50h
.text:000000000000969A                 mov     rax, fs:28h
.text:00000000000096A3                 mov     [rsp+68h+var_50], rax
.text:00000000000096A8                 xor     eax, eax
.text:00000000000096AA                 lea     rax, [rsp+68h+arg_0]
.text:00000000000096AF                 test    esi, esi
.text:00000000000096B1                 mov     [rsp+68h+var_38], rdx
.text:00000000000096B6                 mov     [rsp+68h+var_30], rcx
.text:00000000000096BB                 mov     [rsp+68h+var_28], r8
.text:00000000000096C0                 mov     [rsp+68h+var_60], rax
.text:00000000000096C5                 lea     rax, [rsp+68h+var_48]
.text:00000000000096CA                 mov     [rsp+68h+var_20], r9
.text:00000000000096CF                 mov     [rsp+68h+var_68], 10h
.text:00000000000096D6                 mov     [rsp+68h+var_58], rax
.text:00000000000096DB                 jz      loc_98E2
.text:00000000000096E1                 cmp     esi, 406h
.text:00000000000096E7                 jnz     short loc_9730
.text:00000000000096E9                 mov     rax, [rsp+68h+var_58]
.text:00000000000096EE                 cmp     cs:have_dupfd_cloexec_3326, 0
.text:00000000000096F5                 mov     [rsp+68h+var_68], 18h
.text:00000000000096FC                 mov     r12d, [rax+10h]
.text:0000000000009700                 mov     edx, r12d
.text:0000000000009703                 js      loc_9833
.text:0000000000009709                 xor     eax, eax
.text:000000000000970B                 mov     esi, 406h       ; cmd
.text:0000000000009710                 call    _fcntl
.text:0000000000009715                 test    eax, eax
.text:0000000000009717                 mov     ebx, eax
.text:0000000000009719                 js      loc_98A8
.text:000000000000971F
.text:000000000000971F loc_971F:                               ; CODE XREF: rpl_fcntl+220↓j
.text:000000000000971F                 mov     cs:have_dupfd_cloexec_3326, 1
.text:0000000000009729                 jmp     short loc_9770
.text:0000000000009729 ; ---------------------------------------------------------------------------
.text:000000000000972B                 align 10h
.text:0000000000009730
.text:0000000000009730 loc_9730:                               ; CODE XREF: rpl_fcntl+57↑j
.text:0000000000009730                 cmp     esi, 0Bh
.text:0000000000009733                 jz      short loc_9760
.text:0000000000009735                 jg      short loc_9790
.text:0000000000009737                 cmp     esi, 4
.text:000000000000973A                 jz      loc_9810
.text:0000000000009740                 jg      loc_9800
.text:0000000000009746                 cmp     esi, 2
.text:0000000000009749                 jz      loc_9810
.text:000000000000974F                 jg      short loc_9760
.text:0000000000009751                 cmp     esi, 1
.text:0000000000009754                 jnz     short loc_97B8
.text:0000000000009756                 db      2Eh
.text:0000000000009756                 nop     word ptr [rax+rax+00000000h]
.text:0000000000009760
.text:0000000000009760 loc_9760:                               ; CODE XREF: rpl_fcntl+A3↑j
.text:0000000000009760                                         ; rpl_fcntl+BF↑j ...
.text:0000000000009760                 mov     edi, ebp        ; fd
.text:0000000000009762                 xor     eax, eax
.text:0000000000009764                 call    _fcntl
.text:0000000000009769                 mov     ebx, eax
.text:000000000000976B                 nop     dword ptr [rax+rax+00h]
.text:0000000000009770
.text:0000000000009770 loc_9770:                               ; CODE XREF: rpl_fcntl+99↑j
.text:0000000000009770                                         ; rpl_fcntl+147↓j ...
.text:0000000000009770                 mov     rcx, [rsp+68h+var_50]
.text:0000000000009775                 xor     rcx, fs:28h
.text:000000000000977E                 mov     eax, ebx
.text:0000000000009780                 jnz     loc_98DD
.text:0000000000009786                 add     rsp, 50h
.text:000000000000978A                 pop     rbx
.text:000000000000978B                 pop     rbp
.text:000000000000978C                 pop     r12
.text:000000000000978E                 retn
.text:000000000000978E ; ---------------------------------------------------------------------------
.text:000000000000978F                 align 10h
.text:0000000000009790
.text:0000000000009790 loc_9790:                               ; CODE XREF: rpl_fcntl+A5↑j
.text:0000000000009790                 cmp     esi, 407h
.text:0000000000009796                 jg      short loc_97E0
.text:0000000000009798                 cmp     esi, 406h
.text:000000000000979E                 jge     short loc_9810
.text:00000000000097A0                 cmp     esi, 401h
.text:00000000000097A6                 jz      short loc_9760
.text:00000000000097A8                 cmp     esi, 402h
.text:00000000000097AE                 jz      short loc_9810
.text:00000000000097B0                 cmp     esi, 400h
.text:00000000000097B6                 jz      short loc_9810
.text:00000000000097B8
.text:00000000000097B8 loc_97B8:                               ; CODE XREF: rpl_fcntl+C4↑j
.text:00000000000097B8                                         ; rpl_fcntl+164↓j ...
.text:00000000000097B8                 mov     eax, [rsp+68h+var_68]
.text:00000000000097BB                 cmp     eax, 2Fh ; '/'
.text:00000000000097BE                 ja      loc_98FA
.text:00000000000097C4                 add     rax, [rsp+68h+var_58]
.text:00000000000097C9
.text:00000000000097C9 loc_97C9:                               ; CODE XREF: rpl_fcntl+26F↓j
.text:00000000000097C9                 mov     rdx, [rax]
.text:00000000000097CC                 mov     edi, ebp        ; fd
.text:00000000000097CE                 xor     eax, eax
.text:00000000000097D0                 call    _fcntl
.text:00000000000097D5                 mov     ebx, eax
.text:00000000000097D7                 jmp     short loc_9770
.text:00000000000097D7 ; ---------------------------------------------------------------------------
.text:00000000000097D9                 align 20h
.text:00000000000097E0
.text:00000000000097E0 loc_97E0:                               ; CODE XREF: rpl_fcntl+106↑j
.text:00000000000097E0                 cmp     esi, 409h
.text:00000000000097E6                 jz      short loc_9810
.text:00000000000097E8                 jl      loc_9760
.text:00000000000097EE                 cmp     esi, 40Ah
.text:00000000000097F4                 jnz     short loc_97B8
.text:00000000000097F6                 jmp     loc_9760
.text:00000000000097F6 ; ---------------------------------------------------------------------------
.text:00000000000097FB                 align 20h
.text:0000000000009800
.text:0000000000009800 loc_9800:                               ; CODE XREF: rpl_fcntl+B0↑j
.text:0000000000009800                 cmp     esi, 9
.text:0000000000009803                 jz      loc_9760
.text:0000000000009809                 jg      short loc_9810
.text:000000000000980B                 cmp     esi, 8
.text:000000000000980E                 jnz     short loc_97B8
.text:0000000000009810
.text:0000000000009810 loc_9810:                               ; CODE XREF: rpl_fcntl+AA↑j
.text:0000000000009810                                         ; rpl_fcntl+B9↑j ...
.text:0000000000009810                 mov     eax, [rsp+68h+var_68]
.text:0000000000009813                 cmp     eax, 2Fh ; '/'
.text:0000000000009816                 ja      loc_9904
.text:000000000000981C                 add     rax, [rsp+68h+var_58]
.text:0000000000009821
.text:0000000000009821 loc_9821:                               ; CODE XREF: rpl_fcntl+279↓j
.text:0000000000009821                 mov     edx, [rax]
.text:0000000000009823                 mov     edi, ebp        ; fd
.text:0000000000009825                 xor     eax, eax
.text:0000000000009827                 call    _fcntl
.text:000000000000982C                 mov     ebx, eax
.text:000000000000982E                 jmp     loc_9770
.text:0000000000009833 ; ---------------------------------------------------------------------------
.text:0000000000009833
.text:0000000000009833 loc_9833:                               ; CODE XREF: rpl_fcntl+73↑j
.text:0000000000009833                 xor     esi, esi        ; cmd
.text:0000000000009835                 xor     eax, eax
.text:0000000000009837                 call    _fcntl
.text:000000000000983C                 test    eax, eax
.text:000000000000983E                 mov     ebx, eax
.text:0000000000009840                 js      loc_9770
.text:0000000000009846                 cmp     cs:have_dupfd_cloexec_3326, 0FFFFFFFFh
.text:000000000000984D                 jnz     loc_9770
.text:0000000000009853
.text:0000000000009853 loc_9853:                               ; CODE XREF: rpl_fcntl+248↓j
.text:0000000000009853                 xor     eax, eax
.text:0000000000009855                 mov     esi, 1          ; cmd
.text:000000000000985A                 mov     edi, ebx        ; fd
.text:000000000000985C                 call    _fcntl
.text:0000000000009861                 test    eax, eax
.text:0000000000009863                 js      short loc_9881
.text:0000000000009865                 or      eax, 1
.text:0000000000009868                 mov     esi, 2          ; cmd
.text:000000000000986D                 mov     edi, ebx        ; fd
.text:000000000000986F                 mov     edx, eax
.text:0000000000009871                 xor     eax, eax
.text:0000000000009873                 call    _fcntl
.text:0000000000009878                 cmp     eax, 0FFFFFFFFh
.text:000000000000987B                 jnz     loc_9770
.text:0000000000009881
.text:0000000000009881 loc_9881:                               ; CODE XREF: rpl_fcntl+1D3↑j
.text:0000000000009881                 call    ___errno_location
.text:0000000000009886                 mov     r12d, [rax]
.text:0000000000009889                 mov     rbp, rax
.text:000000000000988C                 mov     edi, ebx        ; fd
.text:000000000000988E                 call    _close
.text:0000000000009893                 mov     ebx, 0FFFFFFFFh
.text:0000000000009898                 mov     [rbp+0], r12d
.text:000000000000989C                 jmp     loc_9770
.text:000000000000989C ; ---------------------------------------------------------------------------
.text:00000000000098A1                 align 8
.text:00000000000098A8
.text:00000000000098A8 loc_98A8:                               ; CODE XREF: rpl_fcntl+89↑j
.text:00000000000098A8                 call    ___errno_location
.text:00000000000098AD                 cmp     dword ptr [rax], 16h
.text:00000000000098B0                 jnz     loc_971F
.text:00000000000098B6                 xor     esi, esi        ; cmd
.text:00000000000098B8                 xor     eax, eax
.text:00000000000098BA                 mov     edx, r12d
.text:00000000000098BD                 mov     edi, ebp        ; fd
.text:00000000000098BF                 call    _fcntl
.text:00000000000098C4                 test    eax, eax
.text:00000000000098C6                 mov     ebx, eax
.text:00000000000098C8                 js      loc_9770
.text:00000000000098CE                 mov     cs:have_dupfd_cloexec_3326, 0FFFFFFFFh
.text:00000000000098D8                 jmp     loc_9853
.text:00000000000098DD ; ---------------------------------------------------------------------------
.text:00000000000098DD
.text:00000000000098DD loc_98DD:                               ; CODE XREF: rpl_fcntl+F0↑j
.text:00000000000098DD                 call    ___stack_chk_fail
.text:00000000000098E2 ; ---------------------------------------------------------------------------
.text:00000000000098E2
.text:00000000000098E2 loc_98E2:                               ; CODE XREF: rpl_fcntl+4B↑j
.text:00000000000098E2                 mov     rax, [rsp+68h+var_58]
.text:00000000000098E7                 xor     esi, esi        ; cmd
.text:00000000000098E9                 mov     edx, [rax+10h]
.text:00000000000098EC                 xor     eax, eax
.text:00000000000098EE                 call    _fcntl
.text:00000000000098F3                 mov     ebx, eax
.text:00000000000098F5                 jmp     loc_9770
.text:00000000000098FA ; ---------------------------------------------------------------------------
.text:00000000000098FA
.text:00000000000098FA loc_98FA:                               ; CODE XREF: rpl_fcntl+12E↑j
.text:00000000000098FA                 mov     rax, [rsp+68h+var_60]
.text:00000000000098FF                 jmp     loc_97C9
.text:0000000000009904 ; ---------------------------------------------------------------------------
.text:0000000000009904
.text:0000000000009904 loc_9904:                               ; CODE XREF: rpl_fcntl+186↑j
.text:0000000000009904                 mov     rax, [rsp+68h+var_60]
.text:0000000000009909                 jmp     loc_9821
.text:0000000000009909 ; } // starts at 9690
.text:0000000000009909 rpl_fcntl       endp
.text:0000000000009909
.text:0000000000009909 ; ---------------------------------------------------------------------------
.text:000000000000990E                 align 10h
.text:0000000000009910
.text:0000000000009910 ; =============== S U B R O U T I N E =======================================
.text:0000000000009910
.text:0000000000009910 ; Attributes: info_from_lumina
.text:0000000000009910
.text:0000000000009910 ; int __fastcall rpl_fflush(FILE *stream)
.text:0000000000009910                 public rpl_fflush
.text:0000000000009910 rpl_fflush      proc near               ; CODE XREF: rpl_fclose+1F↑p
.text:0000000000009910 ; __unwind {
.text:0000000000009910                 test    rdi, rdi
.text:0000000000009913                 push    rbx
.text:0000000000009914                 mov     rbx, rdi
.text:0000000000009917                 jz      short loc_992A
.text:0000000000009919                 call    ___freading
.text:000000000000991E                 test    eax, eax
.text:0000000000009920                 jz      short loc_992A
.text:0000000000009922                 test    dword ptr [rbx], 100h
.text:0000000000009928                 jnz     short loc_9938
.text:000000000000992A
.text:000000000000992A loc_992A:                               ; CODE XREF: rpl_fflush+7↑j
.text:000000000000992A                                         ; rpl_fflush+10↑j
.text:000000000000992A                 mov     rdi, rbx        ; stream
.text:000000000000992D                 pop     rbx
.text:000000000000992E                 jmp     _fflush
.text:000000000000992E ; ---------------------------------------------------------------------------
.text:0000000000009933                 align 8
.text:0000000000009938
.text:0000000000009938 loc_9938:                               ; CODE XREF: rpl_fflush+18↑j
.text:0000000000009938                 mov     rdi, rbx
.text:000000000000993B                 mov     edx, 1
.text:0000000000009940                 xor     esi, esi
.text:0000000000009942                 call    rpl_fseeko
.text:0000000000009947                 mov     rdi, rbx        ; stream
.text:000000000000994A                 pop     rbx
.text:000000000000994B                 jmp     _fflush
.text:000000000000994B ; } // starts at 9910
.text:000000000000994B rpl_fflush      endp
.text:000000000000994B
.text:0000000000009950
.text:0000000000009950 ; =============== S U B R O U T I N E =======================================
.text:0000000000009950
.text:0000000000009950 ; Attributes: info_from_lumina
.text:0000000000009950
.text:0000000000009950 ; int __fastcall rpl_fseeko(FILE *fp, off_t offset, int whence)
.text:0000000000009950                 public rpl_fseeko
.text:0000000000009950 rpl_fseeko      proc near               ; CODE XREF: rpl_fflush+32↑p
.text:0000000000009950 ; __unwind {
.text:0000000000009950                 mov     rax, [rdi+8]
.text:0000000000009954                 cmp     [rdi+10h], rax
.text:0000000000009958                 jz      short loc_9960
.text:000000000000995A
.text:000000000000995A loc_995A:                               ; CODE XREF: rpl_fseeko+18↓j
.text:000000000000995A                                         ; rpl_fseeko+1F↓j
.text:000000000000995A                 jmp     _fseeko
.text:000000000000995A ; ---------------------------------------------------------------------------
.text:000000000000995F                 align 20h
.text:0000000000009960
.text:0000000000009960 loc_9960:                               ; CODE XREF: rpl_fseeko+8↑j
.text:0000000000009960                 mov     rax, [rdi+20h]
.text:0000000000009964                 cmp     [rdi+28h], rax
.text:0000000000009968                 jnz     short loc_995A
.text:000000000000996A                 cmp     qword ptr [rdi+48h], 0
.text:000000000000996F                 jnz     short loc_995A
.text:0000000000009971                 push    r12
.text:0000000000009973                 push    rbp
.text:0000000000009974                 mov     r12d, edx
.text:0000000000009977                 push    rbx
.text:0000000000009978                 mov     rbp, rsi
.text:000000000000997B                 mov     rbx, rdi
.text:000000000000997E                 call    _fileno
.text:0000000000009983                 mov     edx, r12d       ; whence
.text:0000000000009986                 mov     rsi, rbp        ; offset
.text:0000000000009989                 mov     edi, eax        ; fd
.text:000000000000998B                 call    _lseek
.text:0000000000009990                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000009994                 jz      short loc_99A2
.text:0000000000009996                 and     dword ptr [rbx], 0FFFFFFEFh
.text:0000000000009999                 mov     [rbx+90h], rax
.text:00000000000099A0                 xor     eax, eax
.text:00000000000099A2
.text:00000000000099A2 loc_99A2:                               ; CODE XREF: rpl_fseeko+44↑j
.text:00000000000099A2                 pop     rbx
.text:00000000000099A3                 pop     rbp
.text:00000000000099A4                 pop     r12
.text:00000000000099A6                 retn
.text:00000000000099A6 ; } // starts at 9950
.text:00000000000099A6 rpl_fseeko      endp
.text:00000000000099A6
.text:00000000000099A6 ; ---------------------------------------------------------------------------
.text:00000000000099A7                 align 10h
.text:00000000000099B0
.text:00000000000099B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000099B0
.text:00000000000099B0
.text:00000000000099B0                 public openat_proc_name
.text:00000000000099B0 openat_proc_name proc near              ; CODE XREF: getfileconat+46↑p
.text:00000000000099B0
.text:00000000000099B0 var_30          = qword ptr -30h
.text:00000000000099B0
.text:00000000000099B0 ; __unwind {
.text:00000000000099B0                 push    r14
.text:00000000000099B2                 push    r13
.text:00000000000099B4                 push    r12
.text:00000000000099B6                 push    rbp
.text:00000000000099B7                 push    rbx
.text:00000000000099B8                 mov     rbx, rdi
.text:00000000000099BB                 sub     rsp, 30h
.text:00000000000099BF                 mov     rax, fs:28h
.text:00000000000099C8                 mov     [rsp+58h+var_30], rax
.text:00000000000099CD                 xor     eax, eax
.text:00000000000099CF                 cmp     byte ptr [rdx], 0
.text:00000000000099D2                 jz      loc_9A70
.text:00000000000099D8                 mov     eax, cs:proc_status_5461
.text:00000000000099DE                 mov     r12d, esi
.text:00000000000099E1                 mov     rbp, rdx
.text:00000000000099E4                 test    eax, eax
.text:00000000000099E6                 jz      loc_9A80
.text:00000000000099EC
.text:00000000000099EC loc_99EC:                               ; CODE XREF: openat_proc_name+14A↓j
.text:00000000000099EC                 test    eax, eax
.text:00000000000099EE                 js      loc_9B00
.text:00000000000099F4                 mov     rdi, rbp        ; s
.text:00000000000099F7                 call    _strlen
.text:00000000000099FC                 lea     rdi, [rax+1Bh]  ; size
.text:0000000000009A00                 cmp     rdi, 0FC0h
.text:0000000000009A07                 jbe     short loc_9A1A
.text:0000000000009A09                 call    _malloc
.text:0000000000009A0E                 test    rax, rax
.text:0000000000009A11                 mov     rbx, rax
.text:0000000000009A14                 jz      loc_9B00
.text:0000000000009A1A
.text:0000000000009A1A loc_9A1A:                               ; CODE XREF: openat_proc_name+57↑j
.text:0000000000009A1A                 lea     rcx, aProcSelfFdD ; "/proc/self/fd/%d/"
.text:0000000000009A21                 mov     r8d, r12d
.text:0000000000009A24                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000009A2B                 mov     esi, 1
.text:0000000000009A30                 mov     rdi, rbx
.text:0000000000009A33                 xor     eax, eax
.text:0000000000009A35                 call    ___sprintf_chk
.text:0000000000009A3A                 movsxd  rdi, eax
.text:0000000000009A3D                 mov     rsi, rbp        ; src
.text:0000000000009A40                 add     rdi, rbx        ; dest
.text:0000000000009A43                 call    _strcpy
.text:0000000000009A48                 mov     rax, rbx
.text:0000000000009A4B
.text:0000000000009A4B loc_9A4B:                               ; CODE XREF: openat_proc_name+C6↓j
.text:0000000000009A4B                                         ; openat_proc_name+F4↓j ...
.text:0000000000009A4B                 mov     rcx, [rsp+58h+var_30]
.text:0000000000009A50                 xor     rcx, fs:28h
.text:0000000000009A59                 jnz     loc_9B07
.text:0000000000009A5F                 add     rsp, 30h
.text:0000000000009A63                 pop     rbx
.text:0000000000009A64                 pop     rbp
.text:0000000000009A65                 pop     r12
.text:0000000000009A67                 pop     r13
.text:0000000000009A69                 pop     r14
.text:0000000000009A6B                 retn
.text:0000000000009A6B ; ---------------------------------------------------------------------------
.text:0000000000009A6C                 align 10h
.text:0000000000009A70
.text:0000000000009A70 loc_9A70:                               ; CODE XREF: openat_proc_name+22↑j
.text:0000000000009A70                 mov     byte ptr [rdi], 0
.text:0000000000009A73                 mov     rax, rdi
.text:0000000000009A76                 jmp     short loc_9A4B
.text:0000000000009A76 ; ---------------------------------------------------------------------------
.text:0000000000009A78                 align 20h
.text:0000000000009A80
.text:0000000000009A80 loc_9A80:                               ; CODE XREF: openat_proc_name+36↑j
.text:0000000000009A80                 lea     rdi, aProcSelfFd ; "/proc/self/fd"
.text:0000000000009A87                 mov     esi, 10900h     ; oflag
.text:0000000000009A8C                 call    _open
.text:0000000000009A91                 test    eax, eax
.text:0000000000009A93                 mov     r13d, eax
.text:0000000000009A96                 jns     short loc_9AB0
.text:0000000000009A98                 mov     cs:proc_status_5461, 0FFFFFFFFh
.text:0000000000009AA2                 xor     eax, eax
.text:0000000000009AA4                 jmp     short loc_9A4B
.text:0000000000009AA4 ; ---------------------------------------------------------------------------
.text:0000000000009AA6                 align 10h
.text:0000000000009AB0
.text:0000000000009AB0 loc_9AB0:                               ; CODE XREF: openat_proc_name+E6↑j
.text:0000000000009AB0                 lea     rcx, aProcSelfFdDFd ; "/proc/self/fd/%d/../fd"
.text:0000000000009AB7                 mov     r14, rsp
.text:0000000000009ABA                 mov     r8d, eax
.text:0000000000009ABD                 mov     edx, 20h ; ' '
.text:0000000000009AC2                 mov     esi, 1
.text:0000000000009AC7                 mov     rdi, r14
.text:0000000000009ACA                 xor     eax, eax
.text:0000000000009ACC                 call    ___sprintf_chk
.text:0000000000009AD1                 xor     esi, esi        ; type
.text:0000000000009AD3                 mov     rdi, r14        ; name
.text:0000000000009AD6                 call    _access
.text:0000000000009ADB                 cmp     eax, 1
.text:0000000000009ADE                 mov     edi, r13d       ; fd
.text:0000000000009AE1                 sbb     eax, eax
.text:0000000000009AE3                 and     eax, 2
.text:0000000000009AE6                 sub     eax, 1
.text:0000000000009AE9                 mov     cs:proc_status_5461, eax
.text:0000000000009AEF                 call    _close
.text:0000000000009AF4                 mov     eax, cs:proc_status_5461
.text:0000000000009AFA                 jmp     loc_99EC
.text:0000000000009AFA ; ---------------------------------------------------------------------------
.text:0000000000009AFF                 align 20h
.text:0000000000009B00
.text:0000000000009B00 loc_9B00:                               ; CODE XREF: openat_proc_name+3E↑j
.text:0000000000009B00                                         ; openat_proc_name+64↑j
.text:0000000000009B00                 xor     eax, eax
.text:0000000000009B02                 jmp     loc_9A4B
.text:0000000000009B07 ; ---------------------------------------------------------------------------
.text:0000000000009B07
.text:0000000000009B07 loc_9B07:                               ; CODE XREF: openat_proc_name+A9↑j
.text:0000000000009B07                 call    ___stack_chk_fail
.text:0000000000009B07 ; } // starts at 99B0
.text:0000000000009B07 openat_proc_name endp
.text:0000000000009B07
.text:0000000000009B07 ; ---------------------------------------------------------------------------
.text:0000000000009B0C                 align 10h
.text:0000000000009B10
.text:0000000000009B10 ; =============== S U B R O U T I N E =======================================
.text:0000000000009B10
.text:0000000000009B10
.text:0000000000009B10                 public dup_safer
.text:0000000000009B10 dup_safer       proc near               ; CODE XREF: fd_safer_flag+11↑p
.text:0000000000009B10 ; __unwind {
.text:0000000000009B10                 mov     edx, 3
.text:0000000000009B15                 xor     esi, esi
.text:0000000000009B17                 xor     eax, eax
.text:0000000000009B19                 jmp     rpl_fcntl
.text:0000000000009B19 ; } // starts at 9B10
.text:0000000000009B19 dup_safer       endp
.text:0000000000009B19
.text:0000000000009B19 ; ---------------------------------------------------------------------------
.text:0000000000009B1E                 align 20h
.text:0000000000009B20
.text:0000000000009B20 ; =============== S U B R O U T I N E =======================================
.text:0000000000009B20
.text:0000000000009B20 ; Attributes: info_from_lumina
.text:0000000000009B20
.text:0000000000009B20 ; void _libc_csu_init(void)
.text:0000000000009B20                 public __libc_csu_init
.text:0000000000009B20 __libc_csu_init proc near               ; DATA XREF: start+16↑o
.text:0000000000009B20 ; __unwind {
.text:0000000000009B20                 push    r15
.text:0000000000009B22                 push    r14
.text:0000000000009B24                 mov     r15, rdx
.text:0000000000009B27                 push    r13
.text:0000000000009B29                 push    r12
.text:0000000000009B2B                 lea     r12, __frame_dummy_init_array_entry
.text:0000000000009B32                 push    rbp
.text:0000000000009B33                 lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:0000000000009B3A                 push    rbx
.text:0000000000009B3B                 mov     r13d, edi
.text:0000000000009B3E                 mov     r14, rsi
.text:0000000000009B41                 sub     rbp, r12
.text:0000000000009B44                 sub     rsp, 8
.text:0000000000009B48                 sar     rbp, 3
.text:0000000000009B4C                 call    _init_proc
.text:0000000000009B51                 test    rbp, rbp
.text:0000000000009B54                 jz      short loc_9B76
.text:0000000000009B56                 xor     ebx, ebx
.text:0000000000009B58                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000009B60
.text:0000000000009B60 loc_9B60:                               ; CODE XREF: __libc_csu_init+54↓j
.text:0000000000009B60                 mov     rdx, r15
.text:0000000000009B63                 mov     rsi, r14
.text:0000000000009B66                 mov     edi, r13d
.text:0000000000009B69                 call    ds:(__frame_dummy_init_array_entry - 20D990h)[r12+rbx*8]
.text:0000000000009B6D                 add     rbx, 1
.text:0000000000009B71                 cmp     rbp, rbx
.text:0000000000009B74                 jnz     short loc_9B60
.text:0000000000009B76
.text:0000000000009B76 loc_9B76:                               ; CODE XREF: __libc_csu_init+34↑j
.text:0000000000009B76                 add     rsp, 8
.text:0000000000009B7A                 pop     rbx
.text:0000000000009B7B                 pop     rbp
.text:0000000000009B7C                 pop     r12
.text:0000000000009B7E                 pop     r13
.text:0000000000009B80                 pop     r14
.text:0000000000009B82                 pop     r15
.text:0000000000009B84                 retn
.text:0000000000009B84 ; } // starts at 9B20
.text:0000000000009B84 __libc_csu_init endp
.text:0000000000009B84
.text:0000000000009B84 ; ---------------------------------------------------------------------------
.text:0000000000009B85                 align 10h
.text:0000000000009B90
.text:0000000000009B90 ; =============== S U B R O U T I N E =======================================
.text:0000000000009B90
.text:0000000000009B90
.text:0000000000009B90 ; void _libc_csu_fini(void)
.text:0000000000009B90                 public __libc_csu_fini
.text:0000000000009B90 __libc_csu_fini proc near               ; DATA XREF: start+F↑o
.text:0000000000009B90 ; __unwind {
.text:0000000000009B90                 rep retn
.text:0000000000009B90 ; } // starts at 9B90
.text:0000000000009B90 __libc_csu_fini endp
.text:0000000000009B90
.text:0000000000009B90 ; ---------------------------------------------------------------------------
.text:0000000000009B92                 align 20h
.text:0000000000009BA0
.text:0000000000009BA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000009BA0
.text:0000000000009BA0
.text:0000000000009BA0 atexit          proc near               ; CODE XREF: main+75↑p
.text:0000000000009BA0 ; __unwind {
.text:0000000000009BA0                 mov     rdx, cs:__dso_handle ; lpdso_handle
.text:0000000000009BA7                 xor     esi, esi        ; obj
.text:0000000000009BA9                 jmp     ___cxa_atexit
.text:0000000000009BA9 ; } // starts at 9BA0
.text:0000000000009BA9 atexit          endp
.text:0000000000009BA9
.text:0000000000009BA9 _text           ends
.text:0000000000009BA9
LOAD:0000000000009BAE ; ===========================================================================
LOAD:0000000000009BAE
LOAD:0000000000009BAE ; Segment type: Pure code
LOAD:0000000000009BAE ; Segment permissions: Read/Execute
LOAD:0000000000009BAE LOAD            segment byte public 'CODE' use64
LOAD:0000000000009BAE                 assume cs:LOAD
LOAD:0000000000009BAE                 ;org 9BAEh
LOAD:0000000000009BAE                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000009BAE                 align 10h
LOAD:0000000000009BAE LOAD            ends
LOAD:0000000000009BAE
.fini:0000000000009BB0 ; ===========================================================================
.fini:0000000000009BB0
.fini:0000000000009BB0 ; Segment type: Pure code
.fini:0000000000009BB0 ; Segment permissions: Read/Execute
.fini:0000000000009BB0 _fini           segment dword public 'CODE' use64
.fini:0000000000009BB0                 assume cs:_fini
.fini:0000000000009BB0                 ;org 9BB0h
.fini:0000000000009BB0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:0000000000009BB0
.fini:0000000000009BB0 ; =============== S U B R O U T I N E =======================================
.fini:0000000000009BB0
.fini:0000000000009BB0
.fini:0000000000009BB0                 public _term_proc
.fini:0000000000009BB0 _term_proc      proc near
.fini:0000000000009BB0                 sub     rsp, 8          ; _fini
.fini:0000000000009BB4                 add     rsp, 8
.fini:0000000000009BB8                 retn
.fini:0000000000009BB8 _term_proc      endp
.fini:0000000000009BB8
.fini:0000000000009BB8 _fini           ends
.fini:0000000000009BB8
LOAD:0000000000009BB9 ; ===========================================================================
LOAD:0000000000009BB9
LOAD:0000000000009BB9 ; Segment type: Pure code
LOAD:0000000000009BB9 ; Segment permissions: Read/Execute
LOAD:0000000000009BB9 LOAD            segment byte public 'CODE' use64
LOAD:0000000000009BB9                 assume cs:LOAD
LOAD:0000000000009BB9                 ;org 9BB9h
LOAD:0000000000009BB9                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000009BB9                 align 20h
LOAD:0000000000009BB9 LOAD            ends
LOAD:0000000000009BB9
.rodata:0000000000009BC0 ; ===========================================================================
.rodata:0000000000009BC0
.rodata:0000000000009BC0 ; Segment type: Pure data
.rodata:0000000000009BC0 ; Segment permissions: Read
.rodata:0000000000009BC0 _rodata         segment align_32 public 'CONST' use64
.rodata:0000000000009BC0                 assume cs:_rodata
.rodata:0000000000009BC0                 ;org 9BC0h
.rodata:0000000000009BC0                 public _IO_stdin_used
.rodata:0000000000009BC0 _IO_stdin_used  db    1
.rodata:0000000000009BC1                 db    0
.rodata:0000000000009BC2                 db    2
.rodata:0000000000009BC3                 db    0
.rodata:0000000000009BC4 aChcon          db 'chcon',0            ; DATA XREF: main+18A↑o
.rodata:0000000000009BC4                                         ; usage+215↑o ...
.rodata:0000000000009BCA asc_9BCA        db '[',0                ; DATA XREF: usage+221↑o
.rodata:0000000000009BCC aTestInvocation db 'test invocation',0  ; DATA XREF: usage+248↑o
.rodata:0000000000009BDC aMultiCallInvoc db 'Multi-call invocation',0
.rodata:0000000000009BDC                                         ; DATA XREF: usage+278↑o
.rodata:0000000000009BDC                                         ; usage+36C↑o ...
.rodata:0000000000009BF2 aSha224sum      db 'sha224sum',0        ; DATA XREF: usage+289↑o
.rodata:0000000000009BFC aSha2Utilities  db 'sha2 utilities',0   ; DATA XREF: usage+295↑o
.rodata:0000000000009C0B aSha256sum      db 'sha256sum',0        ; DATA XREF: usage+228↑o
.rodata:0000000000009C15 aSha384sum      db 'sha384sum',0        ; DATA XREF: usage+254↑o
.rodata:0000000000009C1F aSha512sum      db 'sha512sum',0        ; DATA XREF: usage+26C↑o
.rodata:0000000000009C29 ; const char aSOnlineHelpS[]
.rodata:0000000000009C29 aSOnlineHelpS   db 0Ah                  ; DATA XREF: usage+2DA↑o
.rodata:0000000000009C29                 db '%s online help: <%s>',0Ah,0
.rodata:0000000000009C40 unk_9C40        db  47h ; G             ; DATA XREF: main+183↑o
.rodata:0000000000009C40                                         ; usage+2F6↑o ...
.rodata:0000000000009C41                 db  4Eh ; N
.rodata:0000000000009C42                 db  55h ; U
.rodata:0000000000009C43                 db  20h
.rodata:0000000000009C44 ; const char domainname[]
.rodata:0000000000009C44 domainname      db 'coreutils',0        ; DATA XREF: main+56↑o
.rodata:0000000000009C44                                         ; main+62↑o ...
.rodata:0000000000009C4E ; const char s2[]
.rodata:0000000000009C4E s2              db 'en_',0              ; DATA XREF: usage+31D↑o
.rodata:0000000000009C4E                                         ; usage+3DE↑o
.rodata:0000000000009C52 ; const char aFullDocumentat[]
.rodata:0000000000009C52 aFullDocumentat db 'Full documentation <%s%s>',0Ah,0
.rodata:0000000000009C52                                         ; DATA XREF: usage:loc_2BD9↑o
.rodata:0000000000009C52                                         ; usage:loc_2C96↑o
.rodata:0000000000009C6D ; const char dirname[]
.rodata:0000000000009C6D dirname         db '/usr/local/share/locale',0
.rodata:0000000000009C6D                                         ; DATA XREF: main+4F↑o
.rodata:0000000000009C85 aJimMeyering    db 'Jim Meyering',0     ; DATA XREF: main+175↑o
.rodata:0000000000009C92 aRussellCoker   db 'Russell Coker',0    ; DATA XREF: main+17C↑o
.rodata:0000000000009CA0 ; const char shortopts[]
.rodata:0000000000009CA0 shortopts       db 'HLPRhvu:r:t:l:',0   ; DATA XREF: main+8F↑o
.rodata:0000000000009CAF ; const char aRHRequiresP[]
.rodata:0000000000009CAF aRHRequiresP    db '-R -h requires -P',0
.rodata:0000000000009CAF                                         ; DATA XREF: main:loc_2727↑o
.rodata:0000000000009CC1 ; const char aMissingOperand[]
.rodata:0000000000009CC1 aMissingOperand db 'missing operand',0  ; DATA XREF: main+6E1↑o
.rodata:0000000000009CD1 ; const char aMissingOperand_0[]
.rodata:0000000000009CD1 aMissingOperand_0 db 'missing operand after %s',0
.rodata:0000000000009CD1                                         ; DATA XREF: main+AB5↑o
.rodata:0000000000009CEA ; const char aInvalidContext[]
.rodata:0000000000009CEA aInvalidContext db 'invalid context: %s',0
.rodata:0000000000009CEA                                         ; DATA XREF: main+A34↑o
.rodata:0000000000009CFE ; const char aFtsReadFailed[]
.rodata:0000000000009CFE aFtsReadFailed  db 'fts_read failed',0  ; DATA XREF: main:loc_2407↑o
.rodata:0000000000009D0E ; const char msgid[]
.rodata:0000000000009D0E msgid           db 'cannot access %s',0 ; DATA XREF: main+30B↑o
.rodata:0000000000009D1F aCannotReadDire db 'cannot read directory %s',0
.rodata:0000000000009D1F                                         ; DATA XREF: main+5CD↑o
.rodata:0000000000009D38 ; const char aFtsCloseFailed[]
.rodata:0000000000009D38 aFtsCloseFailed db 'fts_close failed',0 ; DATA XREF: main+37D↑o
.rodata:0000000000009D49 aRecursive      db 'recursive',0        ; DATA XREF: .data.rel.ro:long_options↓o
.rodata:0000000000009D53 aNoDereference  db 'no-dereference',0   ; DATA XREF: .data.rel.ro:000000000020D9E0↓o
.rodata:0000000000009D53                                         ; .data.rel.ro:000000000020D9C0↓o ...
.rodata:0000000000009D62 aNoPreserveRoot_0 db 'no-preserve-root',0
.rodata:0000000000009D62                                         ; DATA XREF: .data.rel.ro:000000000020DA00↓o
.rodata:0000000000009D62                                         ; .data.rel.ro:000000000020DA20↓o
.rodata:0000000000009D73 aUser           db 'user',0             ; DATA XREF: .data.rel.ro:000000000020DA60↓o
.rodata:0000000000009D78 aRole           db 'role',0             ; DATA XREF: .data.rel.ro:000000000020DA80↓o
.rodata:0000000000009D7D aType           db 'type',0             ; DATA XREF: .data.rel.ro:000000000020DAA0↓o
.rodata:0000000000009D82 aRange          db 'range',0            ; DATA XREF: .data.rel.ro:000000000020DAC0↓o
.rodata:0000000000009D88 aVerbose        db 'verbose',0          ; DATA XREF: .data.rel.ro:000000000020DAE0↓o
.rodata:0000000000009D90 aHelp           db 'help',0             ; DATA XREF: .data.rel.ro:000000000020DB00↓o
.rodata:0000000000009D95 aVersion        db 'version',0          ; DATA XREF: .data.rel.ro:000000000020DB20↓o
.rodata:0000000000009D9D                 align 20h
.rodata:0000000000009DA0 ; const char aTrySHelpForMor[]
.rodata:0000000000009DA0 aTrySHelpForMor db 'Try ',27h,'%s --help',27h,' for more information.',0Ah,0
.rodata:0000000000009DA0                                         ; DATA XREF: usage+2F↑o
.rodata:0000000000009DC7                 align 8
.rodata:0000000000009DC8 ; const char aUsageSOptionCo[]
.rodata:0000000000009DC8 aUsageSOptionCo db 'Usage: %s [OPTION]... CONTEXT FILE...',0Ah
.rodata:0000000000009DC8                                         ; DATA XREF: usage:loc_28FD↑o
.rodata:0000000000009DC8                 db '  or:  %s [OPTION]... [-u USER] [-r ROLE] [-l RANGE] [-t TYPE] FI'
.rodata:0000000000009DC8                 db 'LE...',0Ah
.rodata:0000000000009DC8                 db '  or:  %s [OPTION]... --reference=RFILE FILE...',0Ah,0
.rodata:0000000000009E66                 align 8
.rodata:0000000000009E68 ; const char aChangeTheSelin[]
.rodata:0000000000009E68 aChangeTheSelin db 'Change the SELinux security context of each FILE to CONTEXT.',0Ah
.rodata:0000000000009E68                                         ; DATA XREF: usage+8A↑o
.rodata:0000000000009E68                 db 'With --reference, change the security context of each FILE to tha'
.rodata:0000000000009E68                 db 't of RFILE.',0Ah,0
.rodata:0000000000009EF3                 align 8
.rodata:0000000000009EF8 ; const char aMandatoryArgum[]
.rodata:0000000000009EF8 aMandatoryArgum db 0Ah                  ; DATA XREF: usage+AF↑o
.rodata:0000000000009EF8                 db 'Mandatory arguments to long options are mandatory for short optio'
.rodata:0000000000009EF8                 db 'ns too.',0Ah,0
.rodata:0000000000009F43                 align 8
.rodata:0000000000009F48 ; const char aDereferenceAff[]
.rodata:0000000000009F48 aDereferenceAff db '      --dereference      affect the referent of each symbolic lin'
.rodata:0000000000009F48                                         ; DATA XREF: usage+D4↑o
.rodata:0000000000009F48                 db 'k (this is',0Ah
.rodata:0000000000009F48                 db '                         the default), rather than the symbolic l'
.rodata:0000000000009F48                 db 'ink itself',0Ah
.rodata:0000000000009F48                 db '  -h, --no-dereference   affect symbolic links instead of any ref'
.rodata:0000000000009F48                 db 'erenced file',0Ah,0
.rodata:000000000000A02F                 align 10h
.rodata:000000000000A030 ; const char aUUserUserSetUs[]
.rodata:000000000000A030 aUUserUserSetUs db '  -u, --user=USER        set user USER in the target security con'
.rodata:000000000000A030                                         ; DATA XREF: usage+F9↑o
.rodata:000000000000A030                 db 'text',0Ah
.rodata:000000000000A030                 db '  -r, --role=ROLE        set role ROLE in the target security con'
.rodata:000000000000A030                 db 'text',0Ah
.rodata:000000000000A030                 db '  -t, --type=TYPE        set type TYPE in the target security con'
.rodata:000000000000A030                 db 'text',0Ah
.rodata:000000000000A030                 db '  -l, --range=RANGE      set range RANGE in the target security c'
.rodata:000000000000A030                 db 'ontext',0Ah,0
.rodata:000000000000A14B                 align 10h
.rodata:000000000000A150 ; const char aNoPreserveRoot[]
.rodata:000000000000A150 aNoPreserveRoot db '      --no-preserve-root  do not treat ',27h,'/',27h,' specially '
.rodata:000000000000A150                                         ; DATA XREF: usage+11E↑o
.rodata:000000000000A150                 db '(the default)',0Ah
.rodata:000000000000A150                 db '      --preserve-root    fail to operate recursively on ',27h,'/',27h
.rodata:000000000000A150                 db 0Ah,0
.rodata:000000000000A1D0 ; const char aReferenceRfile[]
.rodata:000000000000A1D0 aReferenceRfile db '      --reference=RFILE  use RFILE',27h,'s security context rathe'
.rodata:000000000000A1D0                                         ; DATA XREF: usage+143↑o
.rodata:000000000000A1D0                 db 'r than specifying',0Ah
.rodata:000000000000A1D0                 db '                         a CONTEXT value',0Ah,0
.rodata:000000000000A247                 align 8
.rodata:000000000000A248 ; const char aRRecursiveOper[]
.rodata:000000000000A248 aRRecursiveOper db '  -R, --recursive        operate on files and directories recursi'
.rodata:000000000000A248                                         ; DATA XREF: usage+168↑o
.rodata:000000000000A248                 db 'vely',0Ah,0
.rodata:000000000000A28F                 align 10h
.rodata:000000000000A290 ; const char aVVerboseOutput[]
.rodata:000000000000A290 aVVerboseOutput db '  -v, --verbose          output a diagnostic for every file proce'
.rodata:000000000000A290                                         ; DATA XREF: usage+18D↑o
.rodata:000000000000A290                 db 'ssed',0Ah,0
.rodata:000000000000A2D7                 align 8
.rodata:000000000000A2D8 ; const char aTheFollowingOp[]
.rodata:000000000000A2D8 aTheFollowingOp db 0Ah                  ; DATA XREF: usage+1B2↑o
.rodata:000000000000A2D8                 db 'The following options modify how a hierarchy is traversed when th'
.rodata:000000000000A2D8                 db 'e -R',0Ah
.rodata:000000000000A2D8                 db 'option is also specified.  If more than one is specified, only th'
.rodata:000000000000A2D8                 db 'e final',0Ah
.rodata:000000000000A2D8                 db 'one takes effect.',0Ah
.rodata:000000000000A2D8                 db 0Ah
.rodata:000000000000A2D8                 db '  -H                     if a command line argument is a symbolic'
.rodata:000000000000A2D8                 db ' link',0Ah
.rodata:000000000000A2D8                 db '                         to a directory, traverse it',0Ah
.rodata:000000000000A2D8                 db '  -L                     traverse every symbolic link to a direct'
.rodata:000000000000A2D8                 db 'ory',0Ah
.rodata:000000000000A2D8                 db '                         encountered',0Ah
.rodata:000000000000A2D8                 db '  -P                     do not traverse any symbolic links (defa'
.rodata:000000000000A2D8                 db 'ult)',0Ah
.rodata:000000000000A2D8                 db 0Ah,0
.rodata:000000000000A4A9                 align 10h
.rodata:000000000000A4B0 ; const char aHelpDisplayThi[]
.rodata:000000000000A4B0 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.rodata:000000000000A4B0                                         ; DATA XREF: usage+1D7↑o
.rodata:000000000000A4DD                 align 20h
.rodata:000000000000A4E0 ; const char aVersionOutputV[]
.rodata:000000000000A4E0 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.rodata:000000000000A4E0                                         ; DATA XREF: usage+1FC↑o
.rodata:000000000000A516                 align 8
.rodata:000000000000A518 aHttpsWwwGnuOrg db 'https://www.gnu.org/software/coreutils/',0
.rodata:000000000000A518                                         ; DATA XREF: usage+2EF↑o
.rodata:000000000000A518                                         ; usage+353↑o ...
.rodata:000000000000A540 ; const char aReportAnyTrans[]
.rodata:000000000000A540 aReportAnyTrans db 'Report any translation bugs to <https://translationproject.org/te'
.rodata:000000000000A540                                         ; DATA XREF: usage+447↑o
.rodata:000000000000A540                 db 'am/>',0Ah,0
.rodata:000000000000A587                 align 8
.rodata:000000000000A588 ; const char aOrAvailableLoc[]
.rodata:000000000000A588 aOrAvailableLoc db 'or available locally via: info ',27h,'(coreutils) %s%s',27h,0Ah,0
.rodata:000000000000A588                                         ; DATA XREF: usage:loc_2C1E↑o
.rodata:000000000000A5BB                 align 20h
.rodata:000000000000A5C0 ; const char aRDereferenceRe[]
.rodata:000000000000A5C0 aRDereferenceRe db '-R --dereference requires either -H or -L',0
.rodata:000000000000A5C0                                         ; DATA XREF: main:loc_26FE↑o
.rodata:000000000000A5EA                 align 10h
.rodata:000000000000A5F0 ; const char aFailedToGetSec[]
.rodata:000000000000A5F0 aFailedToGetSec db 'failed to get security context of %s',0
.rodata:000000000000A5F0                                         ; DATA XREF: main+7AF↑o
.rodata:000000000000A5F0                                         ; main+9DE↑o
.rodata:000000000000A615                 align 8
.rodata:000000000000A618 ; const char aFailedToGetAtt[]
.rodata:000000000000A618 aFailedToGetAtt db 'failed to get attributes of %s',0
.rodata:000000000000A618                                         ; DATA XREF: main+891↑o
.rodata:000000000000A637                 align 8
.rodata:000000000000A638 ; const char aItIsDangerousT[]
.rodata:000000000000A638 aItIsDangerousT db 'it is dangerous to operate recursively on %s',0
.rodata:000000000000A638                                         ; DATA XREF: main+522↑o
.rodata:000000000000A638                                         ; main+7F7↑o
.rodata:000000000000A665                 align 8
.rodata:000000000000A668 ; const char aItIsDangerousT_0[]
.rodata:000000000000A668 aItIsDangerousT_0 db 'it is dangerous to operate recursively on %s (same as %s)',0
.rodata:000000000000A668                                         ; DATA XREF: main+92A↑o
.rodata:000000000000A668                                         ; main+98F↑o
.rodata:000000000000A6A2                 align 8
.rodata:000000000000A6A8 ; const char aUseNoPreserveR[]
.rodata:000000000000A6A8 aUseNoPreserveR db 'use --no-preserve-root to override this failsafe',0
.rodata:000000000000A6A8                                         ; DATA XREF: main:loc_21E9↑o
.rodata:000000000000A6A8                                         ; main:loc_24BE↑o
.rodata:000000000000A6D9                 align 20h
.rodata:000000000000A6E0 ; const char aWarningCircula[]
.rodata:000000000000A6E0 aWarningCircula db 'WARNING: Circular directory structure.',0Ah
.rodata:000000000000A6E0                                         ; DATA XREF: main+486↑o
.rodata:000000000000A6E0                 db 'This almost certainly means that you have a corrupted file system'
.rodata:000000000000A6E0                 db '.',0Ah
.rodata:000000000000A6E0                 db 'NOTIFY YOUR SYSTEM MANAGER.',0Ah
.rodata:000000000000A6E0                 db 'The following directory is part of the cycle:',0Ah
.rodata:000000000000A6E0                 db '  %s',0Ah,0
.rodata:000000000000A79A                 align 20h
.rodata:000000000000A7A0 ; const char aChangingSecuri[]
.rodata:000000000000A7A0 aChangingSecuri db 'changing security context of %s',0Ah,0
.rodata:000000000000A7A0                                         ; DATA XREF: main+605↑o
.rodata:000000000000A7C1                 align 8
.rodata:000000000000A7C8 ; const char aCanTApplyParti[]
.rodata:000000000000A7C8 aCanTApplyParti db 'can',27h,'t apply partial context to unlabeled file %s',0
.rodata:000000000000A7C8                                         ; DATA XREF: main+8C9↑o
.rodata:000000000000A7F9                 align 20h
.rodata:000000000000A800 ; const char aFailedToCreate[]
.rodata:000000000000A800 aFailedToCreate db 'failed to create security context: %s',0
.rodata:000000000000A800                                         ; DATA XREF: main+66D↑o
.rodata:000000000000A826                 align 8
.rodata:000000000000A828 ; const char aFailedToChange[]
.rodata:000000000000A828 aFailedToChange db 'failed to change context of %s to %s',0
.rodata:000000000000A828                                         ; DATA XREF: main+728↑o
.rodata:000000000000A84D                 align 10h
.rodata:000000000000A850 jpt_1F8A        dd offset def_1F8A - 0A850h
.rodata:000000000000A850                                         ; DATA XREF: main+299↑o
.rodata:000000000000A850                                         ; main+2E3↑r
.rodata:000000000000A850                 dd offset loc_2155 - 0A850h ; jump table for switch statement
.rodata:000000000000A850                 dd offset loc_20FE - 0A850h
.rodata:000000000000A850                 dd offset def_1F8A - 0A850h
.rodata:000000000000A850                 dd offset loc_2258 - 0A850h
.rodata:000000000000A850                 dd offset def_1F8A - 0A850h
.rodata:000000000000A850                 dd offset loc_206A - 0A850h
.rodata:000000000000A850                 dd offset loc_222A - 0A850h
.rodata:000000000000A850                 dd offset def_1F8A - 0A850h
.rodata:000000000000A850                 dd offset def_1F8A - 0A850h
.rodata:000000000000A850                 dd offset loc_1F8C - 0A850h
.rodata:000000000000A87C a831            db '8.31',0             ; DATA XREF: .data:Version↓o
.rodata:000000000000A881 ; const char aWriteError[]
.rodata:000000000000A881 aWriteError     db 'write error',0      ; DATA XREF: close_stdout:loc_2D73↑o
.rodata:000000000000A88D ; const char aS[4]
.rodata:000000000000A88D aS              db '%s: '               ; DATA XREF: close_stdout+6C↑o
.rodata:000000000000A891 ; const char format[]
.rodata:000000000000A891 format          dd offset loc_7325      ; DATA XREF: main+59D↑o
.rodata:000000000000A891                                         ; close_stdout+8F↑o ...
.rodata:000000000000A895                 align 8
.rodata:000000000000A898 aANullArgv0WasP db 'A NULL argv[0] was passed through an exec system call.',0Ah,0
.rodata:000000000000A898                                         ; DATA XREF: set_program_name+84↑o
.rodata:000000000000A8D0 aLibs           db '/.libs/',0          ; DATA XREF: set_program_name+2C↑o
.rodata:000000000000A8D8 aLt             db 'lt-',0              ; DATA XREF: set_program_name+44↑o
.rodata:000000000000A8DC unk_A8DC        db 0E2h                 ; DATA XREF: gettext_quote+CE↑o
.rodata:000000000000A8DD                 db  80h
.rodata:000000000000A8DE                 db  98h
.rodata:000000000000A8DF                 db    0
.rodata:000000000000A8E0 unk_A8E0        db 0E2h                 ; DATA XREF: gettext_quote+D5↑o
.rodata:000000000000A8E1                 db  80h
.rodata:000000000000A8E2                 db  99h
.rodata:000000000000A8E3                 db    0
.rodata:000000000000A8E4 unk_A8E4        db 0A1h                 ; DATA XREF: gettext_quote+74↑o
.rodata:000000000000A8E5                 db    7
.rodata:000000000000A8E6                 db  65h ; e
.rodata:000000000000A8E7                 db    0
.rodata:000000000000A8E8 unk_A8E8        db 0A1h                 ; DATA XREF: gettext_quote+7B↑o
.rodata:000000000000A8E9                 db 0AFh
.rodata:000000000000A8EA                 db    0
.rodata:000000000000A8EB unk_A8EB        db  22h ; "             ; DATA XREF: gettext_quote:loc_2EA0↑o
.rodata:000000000000A8EB                                         ; quotearg_buffer_restyled:loc_3C5B↑o ...
.rodata:000000000000A8EC                 db    0
.rodata:000000000000A8ED ; const char asc_A8ED[2]
.rodata:000000000000A8ED asc_A8ED        db '`',0                ; DATA XREF: quotearg_buffer_restyled+D9B↑o
.rodata:000000000000A8ED                                         ; quotearg_buffer_restyled+DB6↑o
.rodata:000000000000A8EF aLiteral        db 'literal',0          ; DATA XREF: .data.rel.ro:quoting_style_args↓o
.rodata:000000000000A8F7 aShell          db 'shell',0            ; DATA XREF: .data.rel.ro:000000000020DB68↓o
.rodata:000000000000A8FD aShellAlways    db 'shell-always',0     ; DATA XREF: .data.rel.ro:000000000020DB70↓o
.rodata:000000000000A90A aShellEscape    db 'shell-escape',0     ; DATA XREF: .data.rel.ro:000000000020DB78↓o
.rodata:000000000000A90A                                         ; .data.rel.ro:000000000020DB98↓o
.rodata:000000000000A917 aShellEscapeAlw db 'shell-escape-always',0
.rodata:000000000000A917                                         ; DATA XREF: .data.rel.ro:000000000020DB80↓o
.rodata:000000000000A92B aCMaybe         db 'c-maybe',0          ; DATA XREF: .data.rel.ro:000000000020DB90↓o
.rodata:000000000000A933 aClocale        db 'clocale',0          ; DATA XREF: .data.rel.ro:000000000020DBA8↓o
.rodata:000000000000A93B                 align 20h
.rodata:000000000000A940 jpt_3001        dd offset loc_3DAA - 0A940h
.rodata:000000000000A940                                         ; DATA XREF: quotearg_buffer_restyled+80↑o
.rodata:000000000000A940                                         ; quotearg_buffer_restyled+8A↑r
.rodata:000000000000A940                 dd offset loc_3003 - 0A940h ; jump table for switch statement
.rodata:000000000000A940                 dd offset loc_3FD8 - 0A940h
.rodata:000000000000A940                 dd offset loc_3DE4 - 0A940h
.rodata:000000000000A940                 dd offset loc_3BD4 - 0A940h
.rodata:000000000000A940                 dd offset loc_3C30 - 0A940h
.rodata:000000000000A940                 dd offset loc_3C85 - 0A940h
.rodata:000000000000A940                 dd offset loc_3CCA - 0A940h
.rodata:000000000000A940                 dd offset loc_3D04 - 0A940h
.rodata:000000000000A940                 dd offset loc_3D04 - 0A940h
.rodata:000000000000A940                 dd offset loc_3D04 - 0A940h
.rodata:000000000000A96C jpt_315E        dd offset loc_3380 - 0A96Ch, offset def_315E - 0A96Ch
.rodata:000000000000A96C                                         ; DATA XREF: quotearg_buffer_restyled+1DD↑o
.rodata:000000000000A96C                                         ; quotearg_buffer_restyled+1E7↑r
.rodata:000000000000A96C                 dd offset def_315E - 0A96Ch, offset def_315E - 0A96Ch ; jump table for switch statement
.rodata:000000000000A96C                 dd offset def_315E - 0A96Ch, offset def_315E - 0A96Ch
.rodata:000000000000A96C                 dd offset def_315E - 0A96Ch, offset loc_33C0 - 0A96Ch
.rodata:000000000000A96C                 dd offset loc_32C8 - 0A96Ch, offset loc_3288 - 0A96Ch
.rodata:000000000000A96C                 dd offset loc_3450 - 0A96Ch, offset loc_3440 - 0A96Ch
.rodata:000000000000A96C                 dd offset loc_3430 - 0A96Ch, offset loc_3420 - 0A96Ch
.rodata:000000000000A96C                 dd offset def_315E - 0A96Ch, offset def_315E - 0A96Ch
.rodata:000000000000A96C                 dd offset def_315E - 0A96Ch, offset def_315E - 0A96Ch
.rodata:000000000000A96C                 dd offset def_315E - 0A96Ch, offset def_315E - 0A96Ch
.rodata:000000000000A96C                 dd offset def_315E - 0A96Ch, offset def_315E - 0A96Ch
.rodata:000000000000A96C                 dd offset def_315E - 0A96Ch, offset def_315E - 0A96Ch
.rodata:000000000000A96C                 dd offset def_315E - 0A96Ch, offset def_315E - 0A96Ch
.rodata:000000000000A96C                 dd offset def_315E - 0A96Ch, offset def_315E - 0A96Ch
.rodata:000000000000A96C                 dd offset def_315E - 0A96Ch, offset def_315E - 0A96Ch
.rodata:000000000000A96C                 dd offset def_315E - 0A96Ch, offset def_315E - 0A96Ch
.rodata:000000000000A96C                 dd offset loc_3410 - 0A96Ch, offset loc_3400 - 0A96Ch
.rodata:000000000000A96C                 dd offset loc_3400 - 0A96Ch, offset loc_33D0 - 0A96Ch
.rodata:000000000000A96C                 dd offset loc_3400 - 0A96Ch, offset loc_33A8 - 0A96Ch
.rodata:000000000000A96C                 dd offset loc_3400 - 0A96Ch, offset loc_3263 - 0A96Ch
.rodata:000000000000A96C                 dd offset loc_3400 - 0A96Ch, offset loc_3400 - 0A96Ch
.rodata:000000000000A96C                 dd offset loc_3400 - 0A96Ch, offset loc_33A8 - 0A96Ch
.rodata:000000000000A96C                 dd offset loc_33A8 - 0A96Ch, offset loc_33A8 - 0A96Ch
.rodata:000000000000A96C                 dd offset loc_33A8 - 0A96Ch, offset loc_33A8 - 0A96Ch
.rodata:000000000000A96C                 dd offset loc_33A8 - 0A96Ch, offset loc_33A8 - 0A96Ch
.rodata:000000000000A96C                 dd offset loc_33A8 - 0A96Ch, offset loc_33A8 - 0A96Ch
.rodata:000000000000A96C                 dd offset loc_33A8 - 0A96Ch, offset loc_33A8 - 0A96Ch
.rodata:000000000000A96C                 dd offset loc_33A8 - 0A96Ch, offset loc_33A8 - 0A96Ch
.rodata:000000000000A96C                 dd offset loc_33A8 - 0A96Ch, offset loc_33A8 - 0A96Ch
.rodata:000000000000A96C                 dd offset loc_33A8 - 0A96Ch, offset loc_3400 - 0A96Ch
.rodata:000000000000A96C                 dd offset loc_3400 - 0A96Ch, offset loc_3400 - 0A96Ch
.rodata:000000000000A96C                 dd offset loc_3400 - 0A96Ch, offset loc_3233 - 0A96Ch
.rodata:000000000000A96C                 dd offset def_315E - 0A96Ch, offset loc_33A8 - 0A96Ch
.rodata:000000000000A96C                 dd offset loc_33A8 - 0A96Ch, offset loc_33A8 - 0A96Ch
.rodata:000000000000A96C                 dd offset loc_33A8 - 0A96Ch, offset loc_33A8 - 0A96Ch
.rodata:000000000000A96C                 dd offset loc_33A8 - 0A96Ch, offset loc_33A8 - 0A96Ch
.rodata:000000000000A96C                 dd offset loc_33A8 - 0A96Ch, offset loc_33A8 - 0A96Ch
.rodata:000000000000A96C                 dd offset loc_33A8 - 0A96Ch, offset loc_33A8 - 0A96Ch
.rodata:000000000000A96C                 dd offset loc_33A8 - 0A96Ch, offset loc_33A8 - 0A96Ch
.rodata:000000000000A96C                 dd offset loc_33A8 - 0A96Ch, offset loc_33A8 - 0A96Ch
.rodata:000000000000A96C                 dd offset loc_33A8 - 0A96Ch, offset loc_33A8 - 0A96Ch
.rodata:000000000000A96C                 dd offset loc_33A8 - 0A96Ch, offset loc_33A8 - 0A96Ch
.rodata:000000000000A96C                 dd offset loc_33A8 - 0A96Ch, offset loc_33A8 - 0A96Ch
.rodata:000000000000A96C                 dd offset loc_33A8 - 0A96Ch, offset loc_33A8 - 0A96Ch
.rodata:000000000000A96C                 dd offset loc_33A8 - 0A96Ch, offset loc_33A8 - 0A96Ch
.rodata:000000000000A96C                 dd offset loc_33A8 - 0A96Ch, offset loc_3400 - 0A96Ch
.rodata:000000000000A96C                 dd offset loc_32D8 - 0A96Ch, offset loc_33A8 - 0A96Ch
.rodata:000000000000A96C                 dd offset loc_3400 - 0A96Ch, offset loc_33A8 - 0A96Ch
.rodata:000000000000A96C                 dd offset loc_3400 - 0A96Ch, offset loc_33A8 - 0A96Ch
.rodata:000000000000A96C                 dd offset loc_33A8 - 0A96Ch, offset loc_33A8 - 0A96Ch
.rodata:000000000000A96C                 dd offset loc_33A8 - 0A96Ch, offset loc_33A8 - 0A96Ch
.rodata:000000000000A96C                 dd offset loc_33A8 - 0A96Ch, offset loc_33A8 - 0A96Ch
.rodata:000000000000A96C                 dd offset loc_33A8 - 0A96Ch, offset loc_33A8 - 0A96Ch
.rodata:000000000000A96C                 dd offset loc_33A8 - 0A96Ch, offset loc_33A8 - 0A96Ch
.rodata:000000000000A96C                 dd offset loc_33A8 - 0A96Ch, offset loc_33A8 - 0A96Ch
.rodata:000000000000A96C                 dd offset loc_33A8 - 0A96Ch, offset loc_33A8 - 0A96Ch
.rodata:000000000000A96C                 dd offset loc_33A8 - 0A96Ch, offset loc_33A8 - 0A96Ch
.rodata:000000000000A96C                 dd offset loc_33A8 - 0A96Ch, offset loc_33A8 - 0A96Ch
.rodata:000000000000A96C                 dd offset loc_33A8 - 0A96Ch, offset loc_33A8 - 0A96Ch
.rodata:000000000000A96C                 dd offset loc_33A8 - 0A96Ch, offset loc_33A8 - 0A96Ch
.rodata:000000000000A96C                 dd offset loc_33A8 - 0A96Ch, offset loc_33A8 - 0A96Ch
.rodata:000000000000A96C                 dd offset loc_33A8 - 0A96Ch, offset loc_3163 - 0A96Ch
.rodata:000000000000A96C                 dd offset loc_3400 - 0A96Ch, offset loc_3163 - 0A96Ch
.rodata:000000000000A96C                 dd offset loc_33D0 - 0A96Ch
.rodata:000000000000AB68 jpt_34EA        dd offset loc_3550 - 0AB68h, offset def_34EA - 0AB68h
.rodata:000000000000AB68                                         ; DATA XREF: quotearg_buffer_restyled+569↑o
.rodata:000000000000AB68                                         ; quotearg_buffer_restyled+573↑r
.rodata:000000000000AB68                 dd offset def_34EA - 0AB68h, offset def_34EA - 0AB68h ; jump table for switch statement
.rodata:000000000000AB68                 dd offset def_34EA - 0AB68h, offset def_34EA - 0AB68h
.rodata:000000000000AB68                 dd offset def_34EA - 0AB68h, offset loc_3540 - 0AB68h
.rodata:000000000000AB68                 dd offset loc_3690 - 0AB68h, offset loc_3678 - 0AB68h
.rodata:000000000000AB68                 dd offset loc_3528 - 0AB68h, offset loc_3668 - 0AB68h
.rodata:000000000000AB68                 dd offset loc_3510 - 0AB68h, offset loc_3650 - 0AB68h
.rodata:000000000000AB68                 dd offset def_34EA - 0AB68h, offset def_34EA - 0AB68h
.rodata:000000000000AB68                 dd offset def_34EA - 0AB68h, offset def_34EA - 0AB68h
.rodata:000000000000AB68                 dd offset def_34EA - 0AB68h, offset def_34EA - 0AB68h
.rodata:000000000000AB68                 dd offset def_34EA - 0AB68h, offset def_34EA - 0AB68h
.rodata:000000000000AB68                 dd offset def_34EA - 0AB68h, offset def_34EA - 0AB68h
.rodata:000000000000AB68                 dd offset def_34EA - 0AB68h, offset def_34EA - 0AB68h
.rodata:000000000000AB68                 dd offset def_34EA - 0AB68h, offset def_34EA - 0AB68h
.rodata:000000000000AB68                 dd offset def_34EA - 0AB68h, offset def_34EA - 0AB68h
.rodata:000000000000AB68                 dd offset def_34EA - 0AB68h, offset def_34EA - 0AB68h
.rodata:000000000000AB68                 dd offset loc_3638 - 0AB68h, offset loc_3620 - 0AB68h
.rodata:000000000000AB68                 dd offset loc_3620 - 0AB68h, offset loc_3608 - 0AB68h
.rodata:000000000000AB68                 dd offset loc_3620 - 0AB68h, offset loc_35F0 - 0AB68h
.rodata:000000000000AB68                 dd offset loc_3620 - 0AB68h, offset loc_3260 - 0AB68h
.rodata:000000000000AB68                 dd offset loc_3620 - 0AB68h, offset loc_3620 - 0AB68h
.rodata:000000000000AB68                 dd offset loc_3620 - 0AB68h, offset loc_35F0 - 0AB68h
.rodata:000000000000AB68                 dd offset loc_35F0 - 0AB68h, offset loc_35F0 - 0AB68h
.rodata:000000000000AB68                 dd offset loc_35F0 - 0AB68h, offset loc_35F0 - 0AB68h
.rodata:000000000000AB68                 dd offset loc_35F0 - 0AB68h, offset loc_35F0 - 0AB68h
.rodata:000000000000AB68                 dd offset loc_35F0 - 0AB68h, offset loc_35F0 - 0AB68h
.rodata:000000000000AB68                 dd offset loc_35F0 - 0AB68h, offset loc_35F0 - 0AB68h
.rodata:000000000000AB68                 dd offset loc_35F0 - 0AB68h, offset loc_35F0 - 0AB68h
.rodata:000000000000AB68                 dd offset loc_35F0 - 0AB68h, offset loc_35F0 - 0AB68h
.rodata:000000000000AB68                 dd offset loc_35F0 - 0AB68h, offset loc_3620 - 0AB68h
.rodata:000000000000AB68                 dd offset loc_3620 - 0AB68h, offset loc_3620 - 0AB68h
.rodata:000000000000AB68                 dd offset loc_3620 - 0AB68h, offset loc_3230 - 0AB68h
.rodata:000000000000AB68                 dd offset def_34EA - 0AB68h, offset loc_35F0 - 0AB68h
.rodata:000000000000AB68                 dd offset loc_35F0 - 0AB68h, offset loc_35F0 - 0AB68h
.rodata:000000000000AB68                 dd offset loc_35F0 - 0AB68h, offset loc_35F0 - 0AB68h
.rodata:000000000000AB68                 dd offset loc_35F0 - 0AB68h, offset loc_35F0 - 0AB68h
.rodata:000000000000AB68                 dd offset loc_35F0 - 0AB68h, offset loc_35F0 - 0AB68h
.rodata:000000000000AB68                 dd offset loc_35F0 - 0AB68h, offset loc_35F0 - 0AB68h
.rodata:000000000000AB68                 dd offset loc_35F0 - 0AB68h, offset loc_35F0 - 0AB68h
.rodata:000000000000AB68                 dd offset loc_35F0 - 0AB68h, offset loc_35F0 - 0AB68h
.rodata:000000000000AB68                 dd offset loc_35F0 - 0AB68h, offset loc_35F0 - 0AB68h
.rodata:000000000000AB68                 dd offset loc_35F0 - 0AB68h, offset loc_35F0 - 0AB68h
.rodata:000000000000AB68                 dd offset loc_35F0 - 0AB68h, offset loc_35F0 - 0AB68h
.rodata:000000000000AB68                 dd offset loc_35F0 - 0AB68h, offset loc_35F0 - 0AB68h
.rodata:000000000000AB68                 dd offset loc_35F0 - 0AB68h, offset loc_35F0 - 0AB68h
.rodata:000000000000AB68                 dd offset loc_35F0 - 0AB68h, offset loc_3620 - 0AB68h
.rodata:000000000000AB68                 dd offset loc_34F0 - 0AB68h, offset loc_35F0 - 0AB68h
.rodata:000000000000AB68                 dd offset loc_3620 - 0AB68h, offset loc_35F0 - 0AB68h
.rodata:000000000000AB68                 dd offset loc_3620 - 0AB68h, offset loc_35F0 - 0AB68h
.rodata:000000000000AB68                 dd offset loc_35F0 - 0AB68h, offset loc_35F0 - 0AB68h
.rodata:000000000000AB68                 dd offset loc_35F0 - 0AB68h, offset loc_35F0 - 0AB68h
.rodata:000000000000AB68                 dd offset loc_35F0 - 0AB68h, offset loc_35F0 - 0AB68h
.rodata:000000000000AB68                 dd offset loc_35F0 - 0AB68h, offset loc_35F0 - 0AB68h
.rodata:000000000000AB68                 dd offset loc_35F0 - 0AB68h, offset loc_35F0 - 0AB68h
.rodata:000000000000AB68                 dd offset loc_35F0 - 0AB68h, offset loc_35F0 - 0AB68h
.rodata:000000000000AB68                 dd offset loc_35F0 - 0AB68h, offset loc_35F0 - 0AB68h
.rodata:000000000000AB68                 dd offset loc_35F0 - 0AB68h, offset loc_35F0 - 0AB68h
.rodata:000000000000AB68                 dd offset loc_35F0 - 0AB68h, offset loc_35F0 - 0AB68h
.rodata:000000000000AB68                 dd offset loc_35F0 - 0AB68h, offset loc_35F0 - 0AB68h
.rodata:000000000000AB68                 dd offset loc_35F0 - 0AB68h, offset loc_35F0 - 0AB68h
.rodata:000000000000AB68                 dd offset loc_35F0 - 0AB68h, offset loc_35F0 - 0AB68h
.rodata:000000000000AB68                 dd offset loc_35F0 - 0AB68h, offset loc_3160 - 0AB68h
.rodata:000000000000AB68                 dd offset loc_3620 - 0AB68h, offset loc_3160 - 0AB68h
.rodata:000000000000AB68                 dd offset loc_3608 - 0AB68h
.rodata:000000000000AD64                 align 20h
.rodata:000000000000AD80                 public quoting_style_vals
.rodata:000000000000AD80 quoting_style_vals db    0
.rodata:000000000000AD81                 db    0
.rodata:000000000000AD82                 db    0
.rodata:000000000000AD83                 db    0
.rodata:000000000000AD84                 db    1
.rodata:000000000000AD85                 db    0
.rodata:000000000000AD86                 db    0
.rodata:000000000000AD87                 db    0
.rodata:000000000000AD88                 db    2
.rodata:000000000000AD89                 db    0
.rodata:000000000000AD8A                 db    0
.rodata:000000000000AD8B                 db    0
.rodata:000000000000AD8C                 db    3
.rodata:000000000000AD8D                 db    0
.rodata:000000000000AD8E                 db    0
.rodata:000000000000AD8F                 db    0
.rodata:000000000000AD90                 db    4
.rodata:000000000000AD91                 db    0
.rodata:000000000000AD92                 db    0
.rodata:000000000000AD93                 db    0
.rodata:000000000000AD94                 db    5
.rodata:000000000000AD95                 db    0
.rodata:000000000000AD96                 db    0
.rodata:000000000000AD97                 db    0
.rodata:000000000000AD98                 db    6
.rodata:000000000000AD99                 db    0
.rodata:000000000000AD9A                 db    0
.rodata:000000000000AD9B                 db    0
.rodata:000000000000AD9C                 db    7
.rodata:000000000000AD9D                 db    0
.rodata:000000000000AD9E                 db    0
.rodata:000000000000AD9F                 db    0
.rodata:000000000000ADA0                 db    8
.rodata:000000000000ADA1                 db    0
.rodata:000000000000ADA2                 db    0
.rodata:000000000000ADA3                 db    0
.rodata:000000000000ADA4                 db    9
.rodata:000000000000ADA5                 db    0
.rodata:000000000000ADA6                 db    0
.rodata:000000000000ADA7                 db    0
.rodata:000000000000ADA8 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: version_etc_arn+23↑o
.rodata:000000000000ADB4 aSS             db '%s %s',0Ah,0        ; DATA XREF: version_etc_arn+13E↑o
.rodata:000000000000ADBB ; const char aC_0[]
.rodata:000000000000ADBB aC_0            db '(C)',0              ; DATA XREF: version_etc_arn:loc_4BCC↑o
.rodata:000000000000ADBF ; const char aWrittenByS[]
.rodata:000000000000ADBF aWrittenByS     db 'Written by %s.',0Ah,0
.rodata:000000000000ADBF                                         ; DATA XREF: version_etc_arn+1BB↑o
.rodata:000000000000ADCF ; const char aWrittenBySAndS[]
.rodata:000000000000ADCF aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.rodata:000000000000ADCF                                         ; DATA XREF: version_etc_arn+1FC↑o
.rodata:000000000000ADE6 ; const char aWrittenBySSAnd[]
.rodata:000000000000ADE6 aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.rodata:000000000000ADE6                                         ; DATA XREF: version_etc_arn+248↑o
.rodata:000000000000AE02 ; const char aReportBugsToS[]
.rodata:000000000000AE02 aReportBugsToS  db 0Ah                  ; DATA XREF: emit_bug_reporting_address+1↑o
.rodata:000000000000AE02                 db 'Report bugs to: %s',0Ah,0
.rodata:000000000000AE17 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.rodata:000000000000AE17                                         ; DATA XREF: emit_bug_reporting_address+14↑o
.rodata:000000000000AE2D ; const char aSHomePageS[]
.rodata:000000000000AE2D aSHomePageS     db '%s home page: <%s>',0Ah,0
.rodata:000000000000AE2D                                         ; DATA XREF: emit_bug_reporting_address+2A↑o
.rodata:000000000000AE41                 align 8
.rodata:000000000000AE48 ; const char aLicenseGplv3Gn[]
.rodata:000000000000AE48 aLicenseGplv3Gn db 0Ah                  ; DATA XREF: version_etc_arn+6E↑o
.rodata:000000000000AE48                 db 'License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licen'
.rodata:000000000000AE48                 db 'ses/gpl.html>.',0Ah
.rodata:000000000000AE48                 db 'This is free software: you are free to change and redistribute it'
.rodata:000000000000AE48                 db '.',0Ah
.rodata:000000000000AE48                 db 'There is NO WARRANTY, to the extent permitted by law.',0Ah
.rodata:000000000000AE48                 db 0Ah,0
.rodata:000000000000AF14                 align 8
.rodata:000000000000AF18 ; const char aWrittenBySSSAn[]
.rodata:000000000000AF18 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000AF18                                         ; DATA XREF: version_etc_arn:loc_4E20↑o
.rodata:000000000000AF18                 db 'and %s.',0Ah,0
.rodata:000000000000AF38 ; const char aWrittenBySSSSA[]
.rodata:000000000000AF38 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000AF38                                         ; DATA XREF: version_etc_arn+2EC↑o
.rodata:000000000000AF38                 db '%s, and %s.',0Ah,0
.rodata:000000000000AF5C                 align 20h
.rodata:000000000000AF60 ; const char aWrittenBySSSSS_1[]
.rodata:000000000000AF60 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000AF60                                         ; DATA XREF: version_etc_arn+320↑o
.rodata:000000000000AF60                 db '%s, %s, and %s.',0Ah,0
.rodata:000000000000AF88 ; const char aWrittenBySSSSS_2[]
.rodata:000000000000AF88 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000AF88                                         ; DATA XREF: version_etc_arn+388↑o
.rodata:000000000000AF88                 db '%s, %s, %s, and %s.',0Ah,0
.rodata:000000000000AFB4                 align 8
.rodata:000000000000AFB8 ; const char aWrittenBySSSSS[]
.rodata:000000000000AFB8 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000AFB8                                         ; DATA XREF: version_etc_arn+B8↑o
.rodata:000000000000AFB8                 db '%s, %s, %s, %s,',0Ah
.rodata:000000000000AFB8                 db 'and %s.',0Ah,0
.rodata:000000000000AFE8 ; const char aWrittenBySSSSS_0[]
.rodata:000000000000AFE8 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000AFE8                                         ; DATA XREF: version_etc_arn+168↑o
.rodata:000000000000AFE8                 db '%s, %s, %s, %s,',0Ah
.rodata:000000000000AFE8                 db '%s, and %s.',0Ah,0
.rodata:000000000000B01C                 align 20h
.rodata:000000000000B020 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000B020                                         ; DATA XREF: version_etc_arn+3E5↑o
.rodata:000000000000B020                 db '%s, %s, %s, %s,',0Ah
.rodata:000000000000B020                 db '%s, %s, and others.',0Ah,0
.rodata:000000000000B05C                 align 20h
.rodata:000000000000B060 ; const char aGeneralHelpUsi[]
.rodata:000000000000B060 aGeneralHelpUsi db 'General help using GNU software: <https://www.gnu.org/gethelp/>',0Ah
.rodata:000000000000B060                                         ; DATA XREF: emit_bug_reporting_address+61↑o
.rodata:000000000000B060                 db 0
.rodata:000000000000B0A1                 align 4
.rodata:000000000000B0A4 jpt_4C34        dd offset loc_4CB6 - 0B0A4h
.rodata:000000000000B0A4                                         ; DATA XREF: version_etc_arn+96↑o
.rodata:000000000000B0A4                                         ; version_etc_arn+9D↑r
.rodata:000000000000B0A4                 dd offset loc_4D48 - 0B0A4h ; jump table for switch statement
.rodata:000000000000B0A4                 dd offset loc_4D88 - 0B0A4h
.rodata:000000000000B0A4                 dd offset loc_4DD0 - 0B0A4h
.rodata:000000000000B0A4                 dd offset loc_4E20 - 0B0A4h
.rodata:000000000000B0A4                 dd offset loc_4E78 - 0B0A4h
.rodata:000000000000B0A4                 dd offset loc_4EA8 - 0B0A4h
.rodata:000000000000B0A4                 dd offset loc_4F10 - 0B0A4h
.rodata:000000000000B0A4                 dd offset loc_4C40 - 0B0A4h
.rodata:000000000000B0A4                 dd offset loc_4CF0 - 0B0A4h
.rodata:000000000000B0CC                 align 20h
.rodata:000000000000B0E0                 public version_etc_copyright
.rodata:000000000000B0E0 version_etc_copyright db 'Copyright %s %d Free Software Foundation, Inc.',0
.rodata:000000000000B0E0                                         ; DATA XREF: version_etc_arn+4F↑o
.rodata:000000000000B10F ; const char aMemoryExhauste[]
.rodata:000000000000B10F aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: xalloc_die↑o
.rodata:000000000000B120 ; const char file[]
.rodata:000000000000B120 file            db '../coreutils-8.31/lib/xfts.c',0
.rodata:000000000000B120                                         ; DATA XREF: xfts_open+37↑o
.rodata:000000000000B13D ; const char assertion[]
.rodata:000000000000B13D assertion       db 'errno != EINVAL',0  ; DATA XREF: xfts_open+3E↑o
.rodata:000000000000B14D                 align 10h
.rodata:000000000000B150 ; const char _PRETTY_FUNCTION___3434[]
.rodata:000000000000B150 __PRETTY_FUNCTION___3434 db 'xfts_open',0
.rodata:000000000000B150                                         ; DATA XREF: xfts_open:loc_5470↑o
.rodata:000000000000B15A asc_B15A        db '..',0               ; DATA XREF: fts_safe_changedir+43↑o
.rodata:000000000000B15A                                         ; fts_safe_changedir+14F↑o ...
.rodata:000000000000B15D                 align 20h
.rodata:000000000000B160 CSWTCH_53       db    0                 ; DATA XREF: fts_build+174↑o
.rodata:000000000000B160                                         ; fts_build:loc_6A76↑o
.rodata:000000000000B161                 db  10h
.rodata:000000000000B162                 db    0
.rodata:000000000000B163                 db    0
.rodata:000000000000B164                 db    0
.rodata:000000000000B165                 db  20h
.rodata:000000000000B166                 db    0
.rodata:000000000000B167                 db    0
.rodata:000000000000B168                 db    0
.rodata:000000000000B169                 db    0
.rodata:000000000000B16A                 db    0
.rodata:000000000000B16B                 db    0
.rodata:000000000000B16C                 db    0
.rodata:000000000000B16D                 db  40h ; @
.rodata:000000000000B16E                 db    0
.rodata:000000000000B16F                 db    0
.rodata:000000000000B170                 db    0
.rodata:000000000000B171                 db    0
.rodata:000000000000B172                 db    0
.rodata:000000000000B173                 db    0
.rodata:000000000000B174                 db    0
.rodata:000000000000B175                 db  60h ; `
.rodata:000000000000B176                 db    0
.rodata:000000000000B177                 db    0
.rodata:000000000000B178                 db    0
.rodata:000000000000B179                 db    0
.rodata:000000000000B17A                 db    0
.rodata:000000000000B17B                 db    0
.rodata:000000000000B17C                 db    0
.rodata:000000000000B17D                 db  80h
.rodata:000000000000B17E                 db    0
.rodata:000000000000B17F                 db    0
.rodata:000000000000B180                 db    0
.rodata:000000000000B181                 db    0
.rodata:000000000000B182                 db    0
.rodata:000000000000B183                 db    0
.rodata:000000000000B184                 db    0
.rodata:000000000000B185                 db 0A0h
.rodata:000000000000B186                 db    0
.rodata:000000000000B187                 db    0
.rodata:000000000000B188                 db    0
.rodata:000000000000B189                 db    0
.rodata:000000000000B18A                 db    0
.rodata:000000000000B18B                 db    0
.rodata:000000000000B18C                 db    0
.rodata:000000000000B18D                 db 0C0h
.rodata:000000000000B18E                 db    0
.rodata:000000000000B18F                 db    0
.rodata:000000000000B190 ; const char aCoreutils831Li_0[]
.rodata:000000000000B190 aCoreutils831Li_0 db '../coreutils-8.31/lib/cycle-check.c',0
.rodata:000000000000B190                                         ; DATA XREF: cycle_check+6E↑o
.rodata:000000000000B1B4 ; const char aStateMagic9827[]
.rodata:000000000000B1B4 aStateMagic9827 db 'state->magic == 9827862',0
.rodata:000000000000B1B4                                         ; DATA XREF: cycle_check+75↑o
.rodata:000000000000B1CC                 align 10h
.rodata:000000000000B1D0 ; const char _PRETTY_FUNCTION___3994[]
.rodata:000000000000B1D0 __PRETTY_FUNCTION___3994 db 'cycle_check',0
.rodata:000000000000B1D0                                         ; DATA XREF: cycle_check:loc_7BB7↑o
.rodata:000000000000B1DC aC              db 'C',0                ; DATA XREF: hard_locale+18↑o
.rodata:000000000000B1DE aPosix          db 'POSIX',0            ; DATA XREF: hard_locale:loc_7C90↑o
.rodata:000000000000B1E4 aEntriesLu      db '# entries:         %lu',0Ah,0
.rodata:000000000000B1E4                                         ; DATA XREF: hash_print_statistics:loc_81C5↑o
.rodata:000000000000B1FC aBucketsLu      db '# buckets:         %lu',0Ah,0
.rodata:000000000000B1FC                                         ; DATA XREF: hash_print_statistics+7B↑o
.rodata:000000000000B214 aMaxBucketLengt db 'max bucket length: %lu',0Ah,0
.rodata:000000000000B214                                         ; DATA XREF: hash_print_statistics+E8↑o
.rodata:000000000000B22C                 align 10h
.rodata:000000000000B230 aBucketsUsedLu2 db '# buckets used:    %lu (%.2f%%)',0Ah,0
.rodata:000000000000B230                                         ; DATA XREF: hash_print_statistics+BC↑o
.rodata:000000000000B251                 align 20h
.rodata:000000000000B260 default_tuning  db    0                 ; DATA XREF: check_tuning+3↑o
.rodata:000000000000B260                                         ; hash_initialize:loc_8630↑o
.rodata:000000000000B261                 db    0
.rodata:000000000000B262                 db    0
.rodata:000000000000B263                 db    0
.rodata:000000000000B264                 db    0
.rodata:000000000000B265                 db    0
.rodata:000000000000B266                 db  80h
.rodata:000000000000B267                 db  3Fh ; ?
.rodata:000000000000B268                 db 0CDh
.rodata:000000000000B269                 db 0CCh
.rodata:000000000000B26A                 db  4Ch ; L
.rodata:000000000000B26B                 db  3Fh ; ?
.rodata:000000000000B26C                 db 0F4h
.rodata:000000000000B26D                 db 0FDh
.rodata:000000000000B26E                 db 0B4h
.rodata:000000000000B26F                 db  3Fh ; ?
.rodata:000000000000B270                 db    0
.rodata:000000000000B271                 db    0
.rodata:000000000000B272                 db    0
.rodata:000000000000B273                 db    0
.rodata:000000000000B274 dword_B274      dd 3DCCCCCDh            ; DATA XREF: check_tuning+19↑r
.rodata:000000000000B274                                         ; check_tuning+4A↑r
.rodata:000000000000B278 dword_B278      dd 3F666666h            ; DATA XREF: check_tuning+22↑r
.rodata:000000000000B27C dword_B27C      dd 3F8CCCCDh            ; DATA XREF: check_tuning+34↑r
.rodata:000000000000B280 dword_B280      dd 0                    ; DATA XREF: check_tuning+41↑r
.rodata:000000000000B284 dword_B284      dd 3F800000h            ; DATA XREF: check_tuning+5C↑r
.rodata:000000000000B288 dword_B288      dd 3F4CCCCDh            ; DATA XREF: hash_initialize+122↑r
.rodata:000000000000B28C dword_B28C      dd 5F800000h            ; DATA XREF: hash_initialize+13E↑r
.rodata:000000000000B28C                                         ; hash_rehash+40↑r ...
.rodata:000000000000B290 dword_B290      dd 5F000000h            ; DATA XREF: hash_initialize+147↑r
.rodata:000000000000B290                                         ; hash_initialize+150↑r ...
.rodata:000000000000B294                 align 8
.rodata:000000000000B298 qword_B298      dq 4059000000000000h    ; DATA XREF: hash_print_statistics+A5↑r
.rodata:000000000000B298                                         ; hash_print_statistics+11F↑r
.rodata:000000000000B2A0 aAscii          db 'ASCII',0            ; DATA XREF: locale_charset+16↑o
.rodata:000000000000B2A0                                         ; locale_charset:loc_9070↑o
.rodata:000000000000B2A6                 align 8
.rodata:000000000000B2A8 ; const char aUnableToRecord[]
.rodata:000000000000B2A8 aUnableToRecord db 'unable to record current working directory',0
.rodata:000000000000B2A8                                         ; DATA XREF: openat_save_fail+1↑o
.rodata:000000000000B2D3                 align 8
.rodata:000000000000B2D8 ; const char aFailedToReturn[]
.rodata:000000000000B2D8 aFailedToReturn db 'failed to return to initial working directory',0
.rodata:000000000000B2D8                                         ; DATA XREF: openat_restore_fail+1↑o
.rodata:000000000000B306                 align 8
.rodata:000000000000B308 ; const char aCoreutils831Li_1[]
.rodata:000000000000B308 aCoreutils831Li_1 db '../coreutils-8.31/lib/chdir-long.c',0
.rodata:000000000000B308                                         ; DATA XREF: cdb_free+29↑o
.rodata:000000000000B308                                         ; chdir_long+239↑o ...
.rodata:000000000000B32B                 align 10h
.rodata:000000000000B330 ; const char aCloseFail[]
.rodata:000000000000B330 aCloseFail      db '! close_fail',0     ; DATA XREF: cdb_free+30↑o
.rodata:000000000000B33D ; const char a0Len[]
.rodata:000000000000B33D a0Len           db '0 < len',0          ; DATA XREF: chdir_long+264↑o
.rodata:000000000000B345 ; const char a4096Len[]
.rodata:000000000000B345 a4096Len        db '4096 <= len',0      ; DATA XREF: chdir_long+283↑o
.rodata:000000000000B351 ; const char aDir[]
.rodata:000000000000B351 aDir            db '*dir != ',27h,'/',27h,0
.rodata:000000000000B351                                         ; DATA XREF: chdir_long+2C1↑o
.rodata:000000000000B351                                         ; gettext_quote+27↑o ...
.rodata:000000000000B35D ; const char aDirDirEnd[]
.rodata:000000000000B35D aDirDirEnd      db 'dir <= dir_end',0   ; DATA XREF: chdir_long+2A2↑o
.rodata:000000000000B36C ; const char aSlashDir4096[]
.rodata:000000000000B36C aSlashDir4096   db 'slash - dir < 4096',0
.rodata:000000000000B36C                                         ; DATA XREF: chdir_long+240↑o
.rodata:000000000000B37F                 align 20h
.rodata:000000000000B380 ; const char _PRETTY_FUNCTION___5081[]
.rodata:000000000000B380 __PRETTY_FUNCTION___5081 db 'cdb_free',0
.rodata:000000000000B380                                         ; DATA XREF: cdb_free:loc_92C2↑o
.rodata:000000000000B389                 align 10h
.rodata:000000000000B390 ; const char _PRETTY_FUNCTION___5099[]
.rodata:000000000000B390 __PRETTY_FUNCTION___5099 db 'chdir_long',0
.rodata:000000000000B390                                         ; DATA XREF: chdir_long:loc_9562↑o
.rodata:000000000000B390                                         ; chdir_long:loc_9586↑o ...
.rodata:000000000000B39B ; const char aProcSelfFd[]
.rodata:000000000000B39B aProcSelfFd     db '/proc/self/fd',0    ; DATA XREF: openat_proc_name:loc_9A80↑o
.rodata:000000000000B3A9 aProcSelfFdDFd  db '/proc/self/fd/%d/../fd',0
.rodata:000000000000B3A9                                         ; DATA XREF: openat_proc_name:loc_9AB0↑o
.rodata:000000000000B3C0 aProcSelfFdD    db '/proc/self/fd/%d/',0
.rodata:000000000000B3C0                                         ; DATA XREF: openat_proc_name:loc_9A1A↑o
.rodata:000000000000B3C0 _rodata         ends
.rodata:000000000000B3C0
LOAD:000000000000B3D2 ; ===========================================================================
LOAD:000000000000B3D2
LOAD:000000000000B3D2 ; Segment type: Pure code
LOAD:000000000000B3D2 ; Segment permissions: Read/Execute
LOAD:000000000000B3D2 LOAD            segment byte public 'CODE' use64
LOAD:000000000000B3D2                 assume cs:LOAD
LOAD:000000000000B3D2                 ;org 0B3D2h
LOAD:000000000000B3D2                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000B3D2                 align 4
LOAD:000000000000B3D2 LOAD            ends
LOAD:000000000000B3D2
.eh_frame_hdr:000000000000B3D4 ; ===========================================================================
.eh_frame_hdr:000000000000B3D4
.eh_frame_hdr:000000000000B3D4 ; Segment type: Pure data
.eh_frame_hdr:000000000000B3D4 ; Segment permissions: Read
.eh_frame_hdr:000000000000B3D4 _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:000000000000B3D4                 assume cs:_eh_frame_hdr
.eh_frame_hdr:000000000000B3D4                 ;org 0B3D4h
.eh_frame_hdr:000000000000B3D4 __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000000001A0↑o
.eh_frame_hdr:000000000000B3D5                 db  1Bh
.eh_frame_hdr:000000000000B3D6                 db    3
.eh_frame_hdr:000000000000B3D7                 db  3Bh ; ;
.eh_frame_hdr:000000000000B3D8                 db 0C0h
.eh_frame_hdr:000000000000B3D9                 db    4
.eh_frame_hdr:000000000000B3DA                 db    0
.eh_frame_hdr:000000000000B3DB                 db    0
.eh_frame_hdr:000000000000B3DC                 db  97h
.eh_frame_hdr:000000000000B3DD                 db    0
.eh_frame_hdr:000000000000B3DE                 db    0
.eh_frame_hdr:000000000000B3DF                 db    0
.eh_frame_hdr:000000000000B3E0                 db 0ACh
.eh_frame_hdr:000000000000B3E1                 db  64h ; d
.eh_frame_hdr:000000000000B3E2                 db 0FFh
.eh_frame_hdr:000000000000B3E3                 db 0FFh
.eh_frame_hdr:000000000000B3E4                 db  0Ch
.eh_frame_hdr:000000000000B3E5                 db    5
.eh_frame_hdr:000000000000B3E6                 db    0
.eh_frame_hdr:000000000000B3E7                 db    0
.eh_frame_hdr:000000000000B3E8                 db 0BCh
.eh_frame_hdr:000000000000B3E9                 db  68h ; h
.eh_frame_hdr:000000000000B3EA                 db 0FFh
.eh_frame_hdr:000000000000B3EB                 db 0FFh
.eh_frame_hdr:000000000000B3EC                 db  34h ; 4
.eh_frame_hdr:000000000000B3ED                 db    5
.eh_frame_hdr:000000000000B3EE                 db    0
.eh_frame_hdr:000000000000B3EF                 db    0
.eh_frame_hdr:000000000000B3F0                 db 0CCh
.eh_frame_hdr:000000000000B3F1                 db  68h ; h
.eh_frame_hdr:000000000000B3F2                 db 0FFh
.eh_frame_hdr:000000000000B3F3                 db 0FFh
.eh_frame_hdr:000000000000B3F4                 db  78h ; x
.eh_frame_hdr:000000000000B3F5                 db    5
.eh_frame_hdr:000000000000B3F6                 db    0
.eh_frame_hdr:000000000000B3F7                 db    0
.eh_frame_hdr:000000000000B3F8                 db 0BCh
.eh_frame_hdr:000000000000B3F9                 db  73h ; s
.eh_frame_hdr:000000000000B3FA                 db 0FFh
.eh_frame_hdr:000000000000B3FB                 db 0FFh
.eh_frame_hdr:000000000000B3FC                 db 0DCh
.eh_frame_hdr:000000000000B3FD                 db    4
.eh_frame_hdr:000000000000B3FE                 db    0
.eh_frame_hdr:000000000000B3FF                 db    0
.eh_frame_hdr:000000000000B400                 db 0CCh
.eh_frame_hdr:000000000000B401                 db  74h ; t
.eh_frame_hdr:000000000000B402                 db 0FFh
.eh_frame_hdr:000000000000B403                 db 0FFh
.eh_frame_hdr:000000000000B404                 db  4Ch ; L
.eh_frame_hdr:000000000000B405                 db    5
.eh_frame_hdr:000000000000B406                 db    0
.eh_frame_hdr:000000000000B407                 db    0
.eh_frame_hdr:000000000000B408                 db  3Ch ; <
.eh_frame_hdr:000000000000B409                 db  79h ; y
.eh_frame_hdr:000000000000B40A                 db 0FFh
.eh_frame_hdr:000000000000B40B                 db 0FFh
.eh_frame_hdr:000000000000B40C                 db 0D4h
.eh_frame_hdr:000000000000B40D                 db    5
.eh_frame_hdr:000000000000B40E                 db    0
.eh_frame_hdr:000000000000B40F                 db    0
.eh_frame_hdr:000000000000B410                 db  4Ch ; L
.eh_frame_hdr:000000000000B411                 db  79h ; y
.eh_frame_hdr:000000000000B412                 db 0FFh
.eh_frame_hdr:000000000000B413                 db 0FFh
.eh_frame_hdr:000000000000B414                 db 0E8h
.eh_frame_hdr:000000000000B415                 db    5
.eh_frame_hdr:000000000000B416                 db    0
.eh_frame_hdr:000000000000B417                 db    0
.eh_frame_hdr:000000000000B418                 db  5Ch ; \
.eh_frame_hdr:000000000000B419                 db  79h ; y
.eh_frame_hdr:000000000000B41A                 db 0FFh
.eh_frame_hdr:000000000000B41B                 db 0FFh
.eh_frame_hdr:000000000000B41C                 db 0FCh
.eh_frame_hdr:000000000000B41D                 db    5
.eh_frame_hdr:000000000000B41E                 db    0
.eh_frame_hdr:000000000000B41F                 db    0
.eh_frame_hdr:000000000000B420                 db  0Ch
.eh_frame_hdr:000000000000B421                 db  7Ah ; z
.eh_frame_hdr:000000000000B422                 db 0FFh
.eh_frame_hdr:000000000000B423                 db 0FFh
.eh_frame_hdr:000000000000B424                 db  2Ch ; ,
.eh_frame_hdr:000000000000B425                 db    6
.eh_frame_hdr:000000000000B426                 db    0
.eh_frame_hdr:000000000000B427                 db    0
.eh_frame_hdr:000000000000B428                 db 0ACh
.eh_frame_hdr:000000000000B429                 db  7Ah ; z
.eh_frame_hdr:000000000000B42A                 db 0FFh
.eh_frame_hdr:000000000000B42B                 db 0FFh
.eh_frame_hdr:000000000000B42C                 db  4Ch ; L
.eh_frame_hdr:000000000000B42D                 db    6
.eh_frame_hdr:000000000000B42E                 db    0
.eh_frame_hdr:000000000000B42F                 db    0
.eh_frame_hdr:000000000000B430                 db  9Ch
.eh_frame_hdr:000000000000B431                 db  7Bh ; {
.eh_frame_hdr:000000000000B432                 db 0FFh
.eh_frame_hdr:000000000000B433                 db 0FFh
.eh_frame_hdr:000000000000B434                 db  90h
.eh_frame_hdr:000000000000B435                 db    6
.eh_frame_hdr:000000000000B436                 db    0
.eh_frame_hdr:000000000000B437                 db    0
.eh_frame_hdr:000000000000B438                 db 0DCh
.eh_frame_hdr:000000000000B439                 db  8Dh
.eh_frame_hdr:000000000000B43A                 db 0FFh
.eh_frame_hdr:000000000000B43B                 db 0FFh
.eh_frame_hdr:000000000000B43C                 db    8
.eh_frame_hdr:000000000000B43D                 db    7
.eh_frame_hdr:000000000000B43E                 db    0
.eh_frame_hdr:000000000000B43F                 db    0
.eh_frame_hdr:000000000000B440                 db  8Ch
.eh_frame_hdr:000000000000B441                 db  8Fh
.eh_frame_hdr:000000000000B442                 db 0FFh
.eh_frame_hdr:000000000000B443                 db 0FFh
.eh_frame_hdr:000000000000B444                 db  74h ; t
.eh_frame_hdr:000000000000B445                 db    7
.eh_frame_hdr:000000000000B446                 db    0
.eh_frame_hdr:000000000000B447                 db    0
.eh_frame_hdr:000000000000B448                 db 0CCh
.eh_frame_hdr:000000000000B449                 db  8Fh
.eh_frame_hdr:000000000000B44A                 db 0FFh
.eh_frame_hdr:000000000000B44B                 db 0FFh
.eh_frame_hdr:000000000000B44C                 db 0A0h
.eh_frame_hdr:000000000000B44D                 db    7
.eh_frame_hdr:000000000000B44E                 db    0
.eh_frame_hdr:000000000000B44F                 db    0
.eh_frame_hdr:000000000000B450                 db 0ECh
.eh_frame_hdr:000000000000B451                 db  8Fh
.eh_frame_hdr:000000000000B452                 db 0FFh
.eh_frame_hdr:000000000000B453                 db 0FFh
.eh_frame_hdr:000000000000B454                 db 0B4h
.eh_frame_hdr:000000000000B455                 db    7
.eh_frame_hdr:000000000000B456                 db    0
.eh_frame_hdr:000000000000B457                 db    0
.eh_frame_hdr:000000000000B458                 db  0Ch
.eh_frame_hdr:000000000000B459                 db  90h
.eh_frame_hdr:000000000000B45A                 db 0FFh
.eh_frame_hdr:000000000000B45B                 db 0FFh
.eh_frame_hdr:000000000000B45C                 db 0C8h
.eh_frame_hdr:000000000000B45D                 db    7
.eh_frame_hdr:000000000000B45E                 db    0
.eh_frame_hdr:000000000000B45F                 db    0
.eh_frame_hdr:000000000000B460                 db  4Ch ; L
.eh_frame_hdr:000000000000B461                 db  90h
.eh_frame_hdr:000000000000B462                 db 0FFh
.eh_frame_hdr:000000000000B463                 db 0FFh
.eh_frame_hdr:000000000000B464                 db 0DCh
.eh_frame_hdr:000000000000B465                 db    7
.eh_frame_hdr:000000000000B466                 db    0
.eh_frame_hdr:000000000000B467                 db    0
.eh_frame_hdr:000000000000B468                 db  6Ch ; l
.eh_frame_hdr:000000000000B469                 db  90h
.eh_frame_hdr:000000000000B46A                 db 0FFh
.eh_frame_hdr:000000000000B46B                 db 0FFh
.eh_frame_hdr:000000000000B46C                 db 0F0h
.eh_frame_hdr:000000000000B46D                 db    7
.eh_frame_hdr:000000000000B46E                 db    0
.eh_frame_hdr:000000000000B46F                 db    0
.eh_frame_hdr:000000000000B470                 db  9Ch
.eh_frame_hdr:000000000000B471                 db  90h
.eh_frame_hdr:000000000000B472                 db 0FFh
.eh_frame_hdr:000000000000B473                 db 0FFh
.eh_frame_hdr:000000000000B474                 db    4
.eh_frame_hdr:000000000000B475                 db    8
.eh_frame_hdr:000000000000B476                 db    0
.eh_frame_hdr:000000000000B477                 db    0
.eh_frame_hdr:000000000000B478                 db  1Ch
.eh_frame_hdr:000000000000B479                 db  91h
.eh_frame_hdr:000000000000B47A                 db 0FFh
.eh_frame_hdr:000000000000B47B                 db 0FFh
.eh_frame_hdr:000000000000B47C                 db  58h ; X
.eh_frame_hdr:000000000000B47D                 db    8
.eh_frame_hdr:000000000000B47E                 db    0
.eh_frame_hdr:000000000000B47F                 db    0
.eh_frame_hdr:000000000000B480                 db  0Ch
.eh_frame_hdr:000000000000B481                 db  92h
.eh_frame_hdr:000000000000B482                 db 0FFh
.eh_frame_hdr:000000000000B483                 db 0FFh
.eh_frame_hdr:000000000000B484                 db 0C4h
.eh_frame_hdr:000000000000B485                 db    8
.eh_frame_hdr:000000000000B486                 db    0
.eh_frame_hdr:000000000000B487                 db    0
.eh_frame_hdr:000000000000B488                 db  1Ch
.eh_frame_hdr:000000000000B489                 db  92h
.eh_frame_hdr:000000000000B48A                 db 0FFh
.eh_frame_hdr:000000000000B48B                 db 0FFh
.eh_frame_hdr:000000000000B48C                 db 0D8h
.eh_frame_hdr:000000000000B48D                 db    8
.eh_frame_hdr:000000000000B48E                 db    0
.eh_frame_hdr:000000000000B48F                 db    0
.eh_frame_hdr:000000000000B490                 db 0BCh
.eh_frame_hdr:000000000000B491                 db  92h
.eh_frame_hdr:000000000000B492                 db 0FFh
.eh_frame_hdr:000000000000B493                 db 0FFh
.eh_frame_hdr:000000000000B494                 db    4
.eh_frame_hdr:000000000000B495                 db    9
.eh_frame_hdr:000000000000B496                 db    0
.eh_frame_hdr:000000000000B497                 db    0
.eh_frame_hdr:000000000000B498                 db 0DCh
.eh_frame_hdr:000000000000B499                 db  92h
.eh_frame_hdr:000000000000B49A                 db 0FFh
.eh_frame_hdr:000000000000B49B                 db 0FFh
.eh_frame_hdr:000000000000B49C                 db  18h
.eh_frame_hdr:000000000000B49D                 db    9
.eh_frame_hdr:000000000000B49E                 db    0
.eh_frame_hdr:000000000000B49F                 db    0
.eh_frame_hdr:000000000000B4A0                 db 0ECh
.eh_frame_hdr:000000000000B4A1                 db  92h
.eh_frame_hdr:000000000000B4A2                 db 0FFh
.eh_frame_hdr:000000000000B4A3                 db 0FFh
.eh_frame_hdr:000000000000B4A4                 db  2Ch ; ,
.eh_frame_hdr:000000000000B4A5                 db    9
.eh_frame_hdr:000000000000B4A6                 db    0
.eh_frame_hdr:000000000000B4A7                 db    0
.eh_frame_hdr:000000000000B4A8                 db  0Ch
.eh_frame_hdr:000000000000B4A9                 db  93h
.eh_frame_hdr:000000000000B4AA                 db 0FFh
.eh_frame_hdr:000000000000B4AB                 db 0FFh
.eh_frame_hdr:000000000000B4AC                 db  40h ; @
.eh_frame_hdr:000000000000B4AD                 db    9
.eh_frame_hdr:000000000000B4AE                 db    0
.eh_frame_hdr:000000000000B4AF                 db    0
.eh_frame_hdr:000000000000B4B0                 db  2Ch ; ,
.eh_frame_hdr:000000000000B4B1                 db  93h
.eh_frame_hdr:000000000000B4B2                 db 0FFh
.eh_frame_hdr:000000000000B4B3                 db 0FFh
.eh_frame_hdr:000000000000B4B4                 db  54h ; T
.eh_frame_hdr:000000000000B4B5                 db    9
.eh_frame_hdr:000000000000B4B6                 db    0
.eh_frame_hdr:000000000000B4B7                 db    0
.eh_frame_hdr:000000000000B4B8                 db 0BCh
.eh_frame_hdr:000000000000B4B9                 db  93h
.eh_frame_hdr:000000000000B4BA                 db 0FFh
.eh_frame_hdr:000000000000B4BB                 db 0FFh
.eh_frame_hdr:000000000000B4BC                 db  70h ; p
.eh_frame_hdr:000000000000B4BD                 db    9
.eh_frame_hdr:000000000000B4BE                 db    0
.eh_frame_hdr:000000000000B4BF                 db    0
.eh_frame_hdr:000000000000B4C0                 db  4Ch ; L
.eh_frame_hdr:000000000000B4C1                 db  94h
.eh_frame_hdr:000000000000B4C2                 db 0FFh
.eh_frame_hdr:000000000000B4C3                 db 0FFh
.eh_frame_hdr:000000000000B4C4                 db  8Ch
.eh_frame_hdr:000000000000B4C5                 db    9
.eh_frame_hdr:000000000000B4C6                 db    0
.eh_frame_hdr:000000000000B4C7                 db    0
.eh_frame_hdr:000000000000B4C8                 db  5Ch ; \
.eh_frame_hdr:000000000000B4C9                 db  94h
.eh_frame_hdr:000000000000B4CA                 db 0FFh
.eh_frame_hdr:000000000000B4CB                 db 0FFh
.eh_frame_hdr:000000000000B4CC                 db 0A0h
.eh_frame_hdr:000000000000B4CD                 db    9
.eh_frame_hdr:000000000000B4CE                 db    0
.eh_frame_hdr:000000000000B4CF                 db    0
.eh_frame_hdr:000000000000B4D0                 db  6Ch ; l
.eh_frame_hdr:000000000000B4D1                 db  94h
.eh_frame_hdr:000000000000B4D2                 db 0FFh
.eh_frame_hdr:000000000000B4D3                 db 0FFh
.eh_frame_hdr:000000000000B4D4                 db 0B4h
.eh_frame_hdr:000000000000B4D5                 db    9
.eh_frame_hdr:000000000000B4D6                 db    0
.eh_frame_hdr:000000000000B4D7                 db    0
.eh_frame_hdr:000000000000B4D8                 db  0Ch
.eh_frame_hdr:000000000000B4D9                 db  95h
.eh_frame_hdr:000000000000B4DA                 db 0FFh
.eh_frame_hdr:000000000000B4DB                 db 0FFh
.eh_frame_hdr:000000000000B4DC                 db 0D0h
.eh_frame_hdr:000000000000B4DD                 db    9
.eh_frame_hdr:000000000000B4DE                 db    0
.eh_frame_hdr:000000000000B4DF                 db    0
.eh_frame_hdr:000000000000B4E0                 db  1Ch
.eh_frame_hdr:000000000000B4E1                 db  95h
.eh_frame_hdr:000000000000B4E2                 db 0FFh
.eh_frame_hdr:000000000000B4E3                 db 0FFh
.eh_frame_hdr:000000000000B4E4                 db 0E4h
.eh_frame_hdr:000000000000B4E5                 db    9
.eh_frame_hdr:000000000000B4E6                 db    0
.eh_frame_hdr:000000000000B4E7                 db    0
.eh_frame_hdr:000000000000B4E8                 db  3Ch ; <
.eh_frame_hdr:000000000000B4E9                 db  95h
.eh_frame_hdr:000000000000B4EA                 db 0FFh
.eh_frame_hdr:000000000000B4EB                 db 0FFh
.eh_frame_hdr:000000000000B4EC                 db 0F8h
.eh_frame_hdr:000000000000B4ED                 db    9
.eh_frame_hdr:000000000000B4EE                 db    0
.eh_frame_hdr:000000000000B4EF                 db    0
.eh_frame_hdr:000000000000B4F0                 db  4Ch ; L
.eh_frame_hdr:000000000000B4F1                 db  95h
.eh_frame_hdr:000000000000B4F2                 db 0FFh
.eh_frame_hdr:000000000000B4F3                 db 0FFh
.eh_frame_hdr:000000000000B4F4                 db  0Ch
.eh_frame_hdr:000000000000B4F5                 db  0Ah
.eh_frame_hdr:000000000000B4F6                 db    0
.eh_frame_hdr:000000000000B4F7                 db    0
.eh_frame_hdr:000000000000B4F8                 db 0DCh
.eh_frame_hdr:000000000000B4F9                 db  95h
.eh_frame_hdr:000000000000B4FA                 db 0FFh
.eh_frame_hdr:000000000000B4FB                 db 0FFh
.eh_frame_hdr:000000000000B4FC                 db  28h ; (
.eh_frame_hdr:000000000000B4FD                 db  0Ah
.eh_frame_hdr:000000000000B4FE                 db    0
.eh_frame_hdr:000000000000B4FF                 db    0
.eh_frame_hdr:000000000000B500                 db  7Ch ; |
.eh_frame_hdr:000000000000B501                 db  96h
.eh_frame_hdr:000000000000B502                 db 0FFh
.eh_frame_hdr:000000000000B503                 db 0FFh
.eh_frame_hdr:000000000000B504                 db  44h ; D
.eh_frame_hdr:000000000000B505                 db  0Ah
.eh_frame_hdr:000000000000B506                 db    0
.eh_frame_hdr:000000000000B507                 db    0
.eh_frame_hdr:000000000000B508                 db  8Ch
.eh_frame_hdr:000000000000B509                 db  96h
.eh_frame_hdr:000000000000B50A                 db 0FFh
.eh_frame_hdr:000000000000B50B                 db 0FFh
.eh_frame_hdr:000000000000B50C                 db  58h ; X
.eh_frame_hdr:000000000000B50D                 db  0Ah
.eh_frame_hdr:000000000000B50E                 db    0
.eh_frame_hdr:000000000000B50F                 db    0
.eh_frame_hdr:000000000000B510                 db 0ACh
.eh_frame_hdr:000000000000B511                 db  96h
.eh_frame_hdr:000000000000B512                 db 0FFh
.eh_frame_hdr:000000000000B513                 db 0FFh
.eh_frame_hdr:000000000000B514                 db  6Ch ; l
.eh_frame_hdr:000000000000B515                 db  0Ah
.eh_frame_hdr:000000000000B516                 db    0
.eh_frame_hdr:000000000000B517                 db    0
.eh_frame_hdr:000000000000B518                 db 0CCh
.eh_frame_hdr:000000000000B519                 db  96h
.eh_frame_hdr:000000000000B51A                 db 0FFh
.eh_frame_hdr:000000000000B51B                 db 0FFh
.eh_frame_hdr:000000000000B51C                 db  80h
.eh_frame_hdr:000000000000B51D                 db  0Ah
.eh_frame_hdr:000000000000B51E                 db    0
.eh_frame_hdr:000000000000B51F                 db    0
.eh_frame_hdr:000000000000B520                 db 0DCh
.eh_frame_hdr:000000000000B521                 db  96h
.eh_frame_hdr:000000000000B522                 db 0FFh
.eh_frame_hdr:000000000000B523                 db 0FFh
.eh_frame_hdr:000000000000B524                 db  94h
.eh_frame_hdr:000000000000B525                 db  0Ah
.eh_frame_hdr:000000000000B526                 db    0
.eh_frame_hdr:000000000000B527                 db    0
.eh_frame_hdr:000000000000B528                 db 0FCh
.eh_frame_hdr:000000000000B529                 db  96h
.eh_frame_hdr:000000000000B52A                 db 0FFh
.eh_frame_hdr:000000000000B52B                 db 0FFh
.eh_frame_hdr:000000000000B52C                 db 0A8h
.eh_frame_hdr:000000000000B52D                 db  0Ah
.eh_frame_hdr:000000000000B52E                 db    0
.eh_frame_hdr:000000000000B52F                 db    0
.eh_frame_hdr:000000000000B530                 db  1Ch
.eh_frame_hdr:000000000000B531                 db  97h
.eh_frame_hdr:000000000000B532                 db 0FFh
.eh_frame_hdr:000000000000B533                 db 0FFh
.eh_frame_hdr:000000000000B534                 db 0BCh
.eh_frame_hdr:000000000000B535                 db  0Ah
.eh_frame_hdr:000000000000B536                 db    0
.eh_frame_hdr:000000000000B537                 db    0
.eh_frame_hdr:000000000000B538                 db  3Ch ; <
.eh_frame_hdr:000000000000B539                 db  97h
.eh_frame_hdr:000000000000B53A                 db 0FFh
.eh_frame_hdr:000000000000B53B                 db 0FFh
.eh_frame_hdr:000000000000B53C                 db 0D4h
.eh_frame_hdr:000000000000B53D                 db  0Ah
.eh_frame_hdr:000000000000B53E                 db    0
.eh_frame_hdr:000000000000B53F                 db    0
.eh_frame_hdr:000000000000B540                 db 0BCh
.eh_frame_hdr:000000000000B541                 db  97h
.eh_frame_hdr:000000000000B542                 db 0FFh
.eh_frame_hdr:000000000000B543                 db 0FFh
.eh_frame_hdr:000000000000B544                 db 0FCh
.eh_frame_hdr:000000000000B545                 db  0Ah
.eh_frame_hdr:000000000000B546                 db    0
.eh_frame_hdr:000000000000B547                 db    0
.eh_frame_hdr:000000000000B548                 db 0DCh
.eh_frame_hdr:000000000000B549                 db  9Bh
.eh_frame_hdr:000000000000B54A                 db 0FFh
.eh_frame_hdr:000000000000B54B                 db 0FFh
.eh_frame_hdr:000000000000B54C                 db  10h
.eh_frame_hdr:000000000000B54D                 db  0Ch
.eh_frame_hdr:000000000000B54E                 db    0
.eh_frame_hdr:000000000000B54F                 db    0
.eh_frame_hdr:000000000000B550                 db 0FCh
.eh_frame_hdr:000000000000B551                 db  9Bh
.eh_frame_hdr:000000000000B552                 db 0FFh
.eh_frame_hdr:000000000000B553                 db 0FFh
.eh_frame_hdr:000000000000B554                 db  24h ; $
.eh_frame_hdr:000000000000B555                 db  0Ch
.eh_frame_hdr:000000000000B556                 db    0
.eh_frame_hdr:000000000000B557                 db    0
.eh_frame_hdr:000000000000B558                 db  7Ch ; |
.eh_frame_hdr:000000000000B559                 db  9Ch
.eh_frame_hdr:000000000000B55A                 db 0FFh
.eh_frame_hdr:000000000000B55B                 db 0FFh
.eh_frame_hdr:000000000000B55C                 db  40h ; @
.eh_frame_hdr:000000000000B55D                 db  0Ch
.eh_frame_hdr:000000000000B55E                 db    0
.eh_frame_hdr:000000000000B55F                 db    0
.eh_frame_hdr:000000000000B560                 db  5Ch ; \
.eh_frame_hdr:000000000000B561                 db  9Dh
.eh_frame_hdr:000000000000B562                 db 0FFh
.eh_frame_hdr:000000000000B563                 db 0FFh
.eh_frame_hdr:000000000000B564                 db  6Ch ; l
.eh_frame_hdr:000000000000B565                 db  0Ch
.eh_frame_hdr:000000000000B566                 db    0
.eh_frame_hdr:000000000000B567                 db    0
.eh_frame_hdr:000000000000B568                 db 0DCh
.eh_frame_hdr:000000000000B569                 db  9Dh
.eh_frame_hdr:000000000000B56A                 db 0FFh
.eh_frame_hdr:000000000000B56B                 db 0FFh
.eh_frame_hdr:000000000000B56C                 db  8Ch
.eh_frame_hdr:000000000000B56D                 db  0Ch
.eh_frame_hdr:000000000000B56E                 db    0
.eh_frame_hdr:000000000000B56F                 db    0
.eh_frame_hdr:000000000000B570                 db 0FCh
.eh_frame_hdr:000000000000B571                 db  9Dh
.eh_frame_hdr:000000000000B572                 db 0FFh
.eh_frame_hdr:000000000000B573                 db 0FFh
.eh_frame_hdr:000000000000B574                 db 0A8h
.eh_frame_hdr:000000000000B575                 db  0Ch
.eh_frame_hdr:000000000000B576                 db    0
.eh_frame_hdr:000000000000B577                 db    0
.eh_frame_hdr:000000000000B578                 db  2Ch ; ,
.eh_frame_hdr:000000000000B579                 db  9Eh
.eh_frame_hdr:000000000000B57A                 db 0FFh
.eh_frame_hdr:000000000000B57B                 db 0FFh
.eh_frame_hdr:000000000000B57C                 db 0BCh
.eh_frame_hdr:000000000000B57D                 db  0Ch
.eh_frame_hdr:000000000000B57E                 db    0
.eh_frame_hdr:000000000000B57F                 db    0
.eh_frame_hdr:000000000000B580                 db  3Ch ; <
.eh_frame_hdr:000000000000B581                 db  9Eh
.eh_frame_hdr:000000000000B582                 db 0FFh
.eh_frame_hdr:000000000000B583                 db 0FFh
.eh_frame_hdr:000000000000B584                 db 0D0h
.eh_frame_hdr:000000000000B585                 db  0Ch
.eh_frame_hdr:000000000000B586                 db    0
.eh_frame_hdr:000000000000B587                 db    0
.eh_frame_hdr:000000000000B588                 db  7Ch ; |
.eh_frame_hdr:000000000000B589                 db  9Eh
.eh_frame_hdr:000000000000B58A                 db 0FFh
.eh_frame_hdr:000000000000B58B                 db 0FFh
.eh_frame_hdr:000000000000B58C                 db 0F4h
.eh_frame_hdr:000000000000B58D                 db  0Ch
.eh_frame_hdr:000000000000B58E                 db    0
.eh_frame_hdr:000000000000B58F                 db    0
.eh_frame_hdr:000000000000B590                 db 0ACh
.eh_frame_hdr:000000000000B591                 db  9Eh
.eh_frame_hdr:000000000000B592                 db 0FFh
.eh_frame_hdr:000000000000B593                 db 0FFh
.eh_frame_hdr:000000000000B594                 db    8
.eh_frame_hdr:000000000000B595                 db  0Dh
.eh_frame_hdr:000000000000B596                 db    0
.eh_frame_hdr:000000000000B597                 db    0
.eh_frame_hdr:000000000000B598                 db  3Ch ; <
.eh_frame_hdr:000000000000B599                 db  9Fh
.eh_frame_hdr:000000000000B59A                 db 0FFh
.eh_frame_hdr:000000000000B59B                 db 0FFh
.eh_frame_hdr:000000000000B59C                 db  20h
.eh_frame_hdr:000000000000B59D                 db  0Dh
.eh_frame_hdr:000000000000B59E                 db    0
.eh_frame_hdr:000000000000B59F                 db    0
.eh_frame_hdr:000000000000B5A0                 db  8Ch
.eh_frame_hdr:000000000000B5A1                 db  9Fh
.eh_frame_hdr:000000000000B5A2                 db 0FFh
.eh_frame_hdr:000000000000B5A3                 db 0FFh
.eh_frame_hdr:000000000000B5A4                 db  38h ; 8
.eh_frame_hdr:000000000000B5A5                 db  0Dh
.eh_frame_hdr:000000000000B5A6                 db    0
.eh_frame_hdr:000000000000B5A7                 db    0
.eh_frame_hdr:000000000000B5A8                 db 0ACh
.eh_frame_hdr:000000000000B5A9                 db  9Fh
.eh_frame_hdr:000000000000B5AA                 db 0FFh
.eh_frame_hdr:000000000000B5AB                 db 0FFh
.eh_frame_hdr:000000000000B5AC                 db  54h ; T
.eh_frame_hdr:000000000000B5AD                 db  0Dh
.eh_frame_hdr:000000000000B5AE                 db    0
.eh_frame_hdr:000000000000B5AF                 db    0
.eh_frame_hdr:000000000000B5B0                 db 0DCh
.eh_frame_hdr:000000000000B5B1                 db  9Fh
.eh_frame_hdr:000000000000B5B2                 db 0FFh
.eh_frame_hdr:000000000000B5B3                 db 0FFh
.eh_frame_hdr:000000000000B5B4                 db  70h ; p
.eh_frame_hdr:000000000000B5B5                 db  0Dh
.eh_frame_hdr:000000000000B5B6                 db    0
.eh_frame_hdr:000000000000B5B7                 db    0
.eh_frame_hdr:000000000000B5B8                 db  0Ch
.eh_frame_hdr:000000000000B5B9                 db 0A0h
.eh_frame_hdr:000000000000B5BA                 db 0FFh
.eh_frame_hdr:000000000000B5BB                 db 0FFh
.eh_frame_hdr:000000000000B5BC                 db  98h
.eh_frame_hdr:000000000000B5BD                 db  0Dh
.eh_frame_hdr:000000000000B5BE                 db    0
.eh_frame_hdr:000000000000B5BF                 db    0
.eh_frame_hdr:000000000000B5C0                 db  2Ch ; ,
.eh_frame_hdr:000000000000B5C1                 db 0A0h
.eh_frame_hdr:000000000000B5C2                 db 0FFh
.eh_frame_hdr:000000000000B5C3                 db 0FFh
.eh_frame_hdr:000000000000B5C4                 db 0B4h
.eh_frame_hdr:000000000000B5C5                 db  0Dh
.eh_frame_hdr:000000000000B5C6                 db    0
.eh_frame_hdr:000000000000B5C7                 db    0
.eh_frame_hdr:000000000000B5C8                 db  6Ch ; l
.eh_frame_hdr:000000000000B5C9                 db 0A0h
.eh_frame_hdr:000000000000B5CA                 db 0FFh
.eh_frame_hdr:000000000000B5CB                 db 0FFh
.eh_frame_hdr:000000000000B5CC                 db 0CCh
.eh_frame_hdr:000000000000B5CD                 db  0Dh
.eh_frame_hdr:000000000000B5CE                 db    0
.eh_frame_hdr:000000000000B5CF                 db    0
.eh_frame_hdr:000000000000B5D0                 db 0BCh
.eh_frame_hdr:000000000000B5D1                 db 0A0h
.eh_frame_hdr:000000000000B5D2                 db 0FFh
.eh_frame_hdr:000000000000B5D3                 db 0FFh
.eh_frame_hdr:000000000000B5D4                 db 0E8h
.eh_frame_hdr:000000000000B5D5                 db  0Dh
.eh_frame_hdr:000000000000B5D6                 db    0
.eh_frame_hdr:000000000000B5D7                 db    0
.eh_frame_hdr:000000000000B5D8                 db 0ECh
.eh_frame_hdr:000000000000B5D9                 db 0A0h
.eh_frame_hdr:000000000000B5DA                 db 0FFh
.eh_frame_hdr:000000000000B5DB                 db 0FFh
.eh_frame_hdr:000000000000B5DC                 db 0FCh
.eh_frame_hdr:000000000000B5DD                 db  0Dh
.eh_frame_hdr:000000000000B5DE                 db    0
.eh_frame_hdr:000000000000B5DF                 db    0
.eh_frame_hdr:000000000000B5E0                 db  0Ch
.eh_frame_hdr:000000000000B5E1                 db 0A1h
.eh_frame_hdr:000000000000B5E2                 db 0FFh
.eh_frame_hdr:000000000000B5E3                 db 0FFh
.eh_frame_hdr:000000000000B5E4                 db  10h
.eh_frame_hdr:000000000000B5E5                 db  0Eh
.eh_frame_hdr:000000000000B5E6                 db    0
.eh_frame_hdr:000000000000B5E7                 db    0
.eh_frame_hdr:000000000000B5E8                 db  1Ch
.eh_frame_hdr:000000000000B5E9                 db 0A1h
.eh_frame_hdr:000000000000B5EA                 db 0FFh
.eh_frame_hdr:000000000000B5EB                 db 0FFh
.eh_frame_hdr:000000000000B5EC                 db  24h ; $
.eh_frame_hdr:000000000000B5ED                 db  0Eh
.eh_frame_hdr:000000000000B5EE                 db    0
.eh_frame_hdr:000000000000B5EF                 db    0
.eh_frame_hdr:000000000000B5F0                 db  2Ch ; ,
.eh_frame_hdr:000000000000B5F1                 db 0A1h
.eh_frame_hdr:000000000000B5F2                 db 0FFh
.eh_frame_hdr:000000000000B5F3                 db 0FFh
.eh_frame_hdr:000000000000B5F4                 db  38h ; 8
.eh_frame_hdr:000000000000B5F5                 db  0Eh
.eh_frame_hdr:000000000000B5F6                 db    0
.eh_frame_hdr:000000000000B5F7                 db    0
.eh_frame_hdr:000000000000B5F8                 db  3Ch ; <
.eh_frame_hdr:000000000000B5F9                 db 0A1h
.eh_frame_hdr:000000000000B5FA                 db 0FFh
.eh_frame_hdr:000000000000B5FB                 db 0FFh
.eh_frame_hdr:000000000000B5FC                 db  4Ch ; L
.eh_frame_hdr:000000000000B5FD                 db  0Eh
.eh_frame_hdr:000000000000B5FE                 db    0
.eh_frame_hdr:000000000000B5FF                 db    0
.eh_frame_hdr:000000000000B600                 db  6Ch ; l
.eh_frame_hdr:000000000000B601                 db 0A1h
.eh_frame_hdr:000000000000B602                 db 0FFh
.eh_frame_hdr:000000000000B603                 db 0FFh
.eh_frame_hdr:000000000000B604                 db  60h ; `
.eh_frame_hdr:000000000000B605                 db  0Eh
.eh_frame_hdr:000000000000B606                 db    0
.eh_frame_hdr:000000000000B607                 db    0
.eh_frame_hdr:000000000000B608                 db  3Ch ; <
.eh_frame_hdr:000000000000B609                 db 0A3h
.eh_frame_hdr:000000000000B60A                 db 0FFh
.eh_frame_hdr:000000000000B60B                 db 0FFh
.eh_frame_hdr:000000000000B60C                 db  9Ch
.eh_frame_hdr:000000000000B60D                 db  0Eh
.eh_frame_hdr:000000000000B60E                 db    0
.eh_frame_hdr:000000000000B60F                 db    0
.eh_frame_hdr:000000000000B610                 db  4Ch ; L
.eh_frame_hdr:000000000000B611                 db 0A4h
.eh_frame_hdr:000000000000B612                 db 0FFh
.eh_frame_hdr:000000000000B613                 db 0FFh
.eh_frame_hdr:000000000000B614                 db 0ECh
.eh_frame_hdr:000000000000B615                 db  0Eh
.eh_frame_hdr:000000000000B616                 db    0
.eh_frame_hdr:000000000000B617                 db    0
.eh_frame_hdr:000000000000B618                 db 0DCh
.eh_frame_hdr:000000000000B619                 db 0A4h
.eh_frame_hdr:000000000000B61A                 db 0FFh
.eh_frame_hdr:000000000000B61B                 db 0FFh
.eh_frame_hdr:000000000000B61C                 db  24h ; $
.eh_frame_hdr:000000000000B61D                 db  0Fh
.eh_frame_hdr:000000000000B61E                 db    0
.eh_frame_hdr:000000000000B61F                 db    0
.eh_frame_hdr:000000000000B620                 db  2Ch ; ,
.eh_frame_hdr:000000000000B621                 db 0A5h
.eh_frame_hdr:000000000000B622                 db 0FFh
.eh_frame_hdr:000000000000B623                 db 0FFh
.eh_frame_hdr:000000000000B624                 db  50h ; P
.eh_frame_hdr:000000000000B625                 db  0Fh
.eh_frame_hdr:000000000000B626                 db    0
.eh_frame_hdr:000000000000B627                 db    0
.eh_frame_hdr:000000000000B628                 db  6Ch ; l
.eh_frame_hdr:000000000000B629                 db 0A5h
.eh_frame_hdr:000000000000B62A                 db 0FFh
.eh_frame_hdr:000000000000B62B                 db 0FFh
.eh_frame_hdr:000000000000B62C                 db  6Ch ; l
.eh_frame_hdr:000000000000B62D                 db  0Fh
.eh_frame_hdr:000000000000B62E                 db    0
.eh_frame_hdr:000000000000B62F                 db    0
.eh_frame_hdr:000000000000B630                 db  9Ch
.eh_frame_hdr:000000000000B631                 db 0A6h
.eh_frame_hdr:000000000000B632                 db 0FFh
.eh_frame_hdr:000000000000B633                 db 0FFh
.eh_frame_hdr:000000000000B634                 db 0A8h
.eh_frame_hdr:000000000000B635                 db  0Fh
.eh_frame_hdr:000000000000B636                 db    0
.eh_frame_hdr:000000000000B637                 db    0
.eh_frame_hdr:000000000000B638                 db  0Ch
.eh_frame_hdr:000000000000B639                 db 0A7h
.eh_frame_hdr:000000000000B63A                 db 0FFh
.eh_frame_hdr:000000000000B63B                 db 0FFh
.eh_frame_hdr:000000000000B63C                 db 0CCh
.eh_frame_hdr:000000000000B63D                 db  0Fh
.eh_frame_hdr:000000000000B63E                 db    0
.eh_frame_hdr:000000000000B63F                 db    0
.eh_frame_hdr:000000000000B640                 db  7Ch ; |
.eh_frame_hdr:000000000000B641                 db 0A7h
.eh_frame_hdr:000000000000B642                 db 0FFh
.eh_frame_hdr:000000000000B643                 db 0FFh
.eh_frame_hdr:000000000000B644                 db  10h
.eh_frame_hdr:000000000000B645                 db  10h
.eh_frame_hdr:000000000000B646                 db    0
.eh_frame_hdr:000000000000B647                 db    0
.eh_frame_hdr:000000000000B648                 db 0DCh
.eh_frame_hdr:000000000000B649                 db 0A7h
.eh_frame_hdr:000000000000B64A                 db 0FFh
.eh_frame_hdr:000000000000B64B                 db 0FFh
.eh_frame_hdr:000000000000B64C                 db  3Ch ; <
.eh_frame_hdr:000000000000B64D                 db  10h
.eh_frame_hdr:000000000000B64E                 db    0
.eh_frame_hdr:000000000000B64F                 db    0
.eh_frame_hdr:000000000000B650                 db  4Ch ; L
.eh_frame_hdr:000000000000B651                 db 0A8h
.eh_frame_hdr:000000000000B652                 db 0FFh
.eh_frame_hdr:000000000000B653                 db 0FFh
.eh_frame_hdr:000000000000B654                 db  64h ; d
.eh_frame_hdr:000000000000B655                 db  10h
.eh_frame_hdr:000000000000B656                 db    0
.eh_frame_hdr:000000000000B657                 db    0
.eh_frame_hdr:000000000000B658                 db 0BCh
.eh_frame_hdr:000000000000B659                 db 0A8h
.eh_frame_hdr:000000000000B65A                 db 0FFh
.eh_frame_hdr:000000000000B65B                 db 0FFh
.eh_frame_hdr:000000000000B65C                 db  84h
.eh_frame_hdr:000000000000B65D                 db  10h
.eh_frame_hdr:000000000000B65E                 db    0
.eh_frame_hdr:000000000000B65F                 db    0
.eh_frame_hdr:000000000000B660                 db 0FCh
.eh_frame_hdr:000000000000B661                 db 0A8h
.eh_frame_hdr:000000000000B662                 db 0FFh
.eh_frame_hdr:000000000000B663                 db 0FFh
.eh_frame_hdr:000000000000B664                 db  98h
.eh_frame_hdr:000000000000B665                 db  10h
.eh_frame_hdr:000000000000B666                 db    0
.eh_frame_hdr:000000000000B667                 db    0
.eh_frame_hdr:000000000000B668                 db  7Ch ; |
.eh_frame_hdr:000000000000B669                 db 0ABh
.eh_frame_hdr:000000000000B66A                 db 0FFh
.eh_frame_hdr:000000000000B66B                 db 0FFh
.eh_frame_hdr:000000000000B66C                 db 0E8h
.eh_frame_hdr:000000000000B66D                 db  10h
.eh_frame_hdr:000000000000B66E                 db    0
.eh_frame_hdr:000000000000B66F                 db    0
.eh_frame_hdr:000000000000B670                 db  2Ch ; ,
.eh_frame_hdr:000000000000B671                 db 0ACh
.eh_frame_hdr:000000000000B672                 db 0FFh
.eh_frame_hdr:000000000000B673                 db 0FFh
.eh_frame_hdr:000000000000B674                 db  2Ch ; ,
.eh_frame_hdr:000000000000B675                 db  11h
.eh_frame_hdr:000000000000B676                 db    0
.eh_frame_hdr:000000000000B677                 db    0
.eh_frame_hdr:000000000000B678                 db 0ECh
.eh_frame_hdr:000000000000B679                 db 0ACh
.eh_frame_hdr:000000000000B67A                 db 0FFh
.eh_frame_hdr:000000000000B67B                 db 0FFh
.eh_frame_hdr:000000000000B67C                 db  48h ; H
.eh_frame_hdr:000000000000B67D                 db  11h
.eh_frame_hdr:000000000000B67E                 db    0
.eh_frame_hdr:000000000000B67F                 db    0
.eh_frame_hdr:000000000000B680                 db 0CCh
.eh_frame_hdr:000000000000B681                 db 0B6h
.eh_frame_hdr:000000000000B682                 db 0FFh
.eh_frame_hdr:000000000000B683                 db 0FFh
.eh_frame_hdr:000000000000B684                 db  98h
.eh_frame_hdr:000000000000B685                 db  11h
.eh_frame_hdr:000000000000B686                 db    0
.eh_frame_hdr:000000000000B687                 db    0
.eh_frame_hdr:000000000000B688                 db  7Ch ; |
.eh_frame_hdr:000000000000B689                 db 0BAh
.eh_frame_hdr:000000000000B68A                 db 0FFh
.eh_frame_hdr:000000000000B68B                 db 0FFh
.eh_frame_hdr:000000000000B68C                 db 0E4h
.eh_frame_hdr:000000000000B68D                 db  11h
.eh_frame_hdr:000000000000B68E                 db    0
.eh_frame_hdr:000000000000B68F                 db    0
.eh_frame_hdr:000000000000B690                 db  0Ch
.eh_frame_hdr:000000000000B691                 db 0BCh
.eh_frame_hdr:000000000000B692                 db 0FFh
.eh_frame_hdr:000000000000B693                 db 0FFh
.eh_frame_hdr:000000000000B694                 db  14h
.eh_frame_hdr:000000000000B695                 db  12h
.eh_frame_hdr:000000000000B696                 db    0
.eh_frame_hdr:000000000000B697                 db    0
.eh_frame_hdr:000000000000B698                 db  8Ch
.eh_frame_hdr:000000000000B699                 db 0C3h
.eh_frame_hdr:000000000000B69A                 db 0FFh
.eh_frame_hdr:000000000000B69B                 db 0FFh
.eh_frame_hdr:000000000000B69C                 db  78h ; x
.eh_frame_hdr:000000000000B69D                 db  12h
.eh_frame_hdr:000000000000B69E                 db    0
.eh_frame_hdr:000000000000B69F                 db    0
.eh_frame_hdr:000000000000B6A0                 db 0BCh
.eh_frame_hdr:000000000000B6A1                 db 0C3h
.eh_frame_hdr:000000000000B6A2                 db 0FFh
.eh_frame_hdr:000000000000B6A3                 db 0FFh
.eh_frame_hdr:000000000000B6A4                 db  90h
.eh_frame_hdr:000000000000B6A5                 db  12h
.eh_frame_hdr:000000000000B6A6                 db    0
.eh_frame_hdr:000000000000B6A7                 db    0
.eh_frame_hdr:000000000000B6A8                 db  0Ch
.eh_frame_hdr:000000000000B6A9                 db 0C5h
.eh_frame_hdr:000000000000B6AA                 db 0FFh
.eh_frame_hdr:000000000000B6AB                 db 0FFh
.eh_frame_hdr:000000000000B6AC                 db 0F4h
.eh_frame_hdr:000000000000B6AD                 db  12h
.eh_frame_hdr:000000000000B6AE                 db    0
.eh_frame_hdr:000000000000B6AF                 db    0
.eh_frame_hdr:000000000000B6B0                 db  9Ch
.eh_frame_hdr:000000000000B6B1                 db 0C5h
.eh_frame_hdr:000000000000B6B2                 db 0FFh
.eh_frame_hdr:000000000000B6B3                 db 0FFh
.eh_frame_hdr:000000000000B6B4                 db  34h ; 4
.eh_frame_hdr:000000000000B6B5                 db  13h
.eh_frame_hdr:000000000000B6B6                 db    0
.eh_frame_hdr:000000000000B6B7                 db    0
.eh_frame_hdr:000000000000B6B8                 db 0BCh
.eh_frame_hdr:000000000000B6B9                 db 0C6h
.eh_frame_hdr:000000000000B6BA                 db 0FFh
.eh_frame_hdr:000000000000B6BB                 db 0FFh
.eh_frame_hdr:000000000000B6BC                 db  70h ; p
.eh_frame_hdr:000000000000B6BD                 db  13h
.eh_frame_hdr:000000000000B6BE                 db    0
.eh_frame_hdr:000000000000B6BF                 db    0
.eh_frame_hdr:000000000000B6C0                 db 0CCh
.eh_frame_hdr:000000000000B6C1                 db 0C6h
.eh_frame_hdr:000000000000B6C2                 db 0FFh
.eh_frame_hdr:000000000000B6C3                 db 0FFh
.eh_frame_hdr:000000000000B6C4                 db  84h
.eh_frame_hdr:000000000000B6C5                 db  13h
.eh_frame_hdr:000000000000B6C6                 db    0
.eh_frame_hdr:000000000000B6C7                 db    0
.eh_frame_hdr:000000000000B6C8                 db 0DCh
.eh_frame_hdr:000000000000B6C9                 db 0C6h
.eh_frame_hdr:000000000000B6CA                 db 0FFh
.eh_frame_hdr:000000000000B6CB                 db 0FFh
.eh_frame_hdr:000000000000B6CC                 db  98h
.eh_frame_hdr:000000000000B6CD                 db  13h
.eh_frame_hdr:000000000000B6CE                 db    0
.eh_frame_hdr:000000000000B6CF                 db    0
.eh_frame_hdr:000000000000B6D0                 db 0ECh
.eh_frame_hdr:000000000000B6D1                 db 0C6h
.eh_frame_hdr:000000000000B6D2                 db 0FFh
.eh_frame_hdr:000000000000B6D3                 db 0FFh
.eh_frame_hdr:000000000000B6D4                 db 0ACh
.eh_frame_hdr:000000000000B6D5                 db  13h
.eh_frame_hdr:000000000000B6D6                 db    0
.eh_frame_hdr:000000000000B6D7                 db    0
.eh_frame_hdr:000000000000B6D8                 db  6Ch ; l
.eh_frame_hdr:000000000000B6D9                 db 0C7h
.eh_frame_hdr:000000000000B6DA                 db 0FFh
.eh_frame_hdr:000000000000B6DB                 db 0FFh
.eh_frame_hdr:000000000000B6DC                 db 0FCh
.eh_frame_hdr:000000000000B6DD                 db  13h
.eh_frame_hdr:000000000000B6DE                 db    0
.eh_frame_hdr:000000000000B6DF                 db    0
.eh_frame_hdr:000000000000B6E0                 db  7Ch ; |
.eh_frame_hdr:000000000000B6E1                 db 0C7h
.eh_frame_hdr:000000000000B6E2                 db 0FFh
.eh_frame_hdr:000000000000B6E3                 db 0FFh
.eh_frame_hdr:000000000000B6E4                 db  10h
.eh_frame_hdr:000000000000B6E5                 db  14h
.eh_frame_hdr:000000000000B6E6                 db    0
.eh_frame_hdr:000000000000B6E7                 db    0
.eh_frame_hdr:000000000000B6E8                 db  0Ch
.eh_frame_hdr:000000000000B6E9                 db 0C8h
.eh_frame_hdr:000000000000B6EA                 db 0FFh
.eh_frame_hdr:000000000000B6EB                 db 0FFh
.eh_frame_hdr:000000000000B6EC                 db  2Ch ; ,
.eh_frame_hdr:000000000000B6ED                 db  14h
.eh_frame_hdr:000000000000B6EE                 db    0
.eh_frame_hdr:000000000000B6EF                 db    0
.eh_frame_hdr:000000000000B6F0                 db  7Ch ; |
.eh_frame_hdr:000000000000B6F1                 db 0C8h
.eh_frame_hdr:000000000000B6F2                 db 0FFh
.eh_frame_hdr:000000000000B6F3                 db 0FFh
.eh_frame_hdr:000000000000B6F4                 db  4Ch ; L
.eh_frame_hdr:000000000000B6F5                 db  14h
.eh_frame_hdr:000000000000B6F6                 db    0
.eh_frame_hdr:000000000000B6F7                 db    0
.eh_frame_hdr:000000000000B6F8                 db 0DCh
.eh_frame_hdr:000000000000B6F9                 db 0C8h
.eh_frame_hdr:000000000000B6FA                 db 0FFh
.eh_frame_hdr:000000000000B6FB                 db 0FFh
.eh_frame_hdr:000000000000B6FC                 db  6Ch ; l
.eh_frame_hdr:000000000000B6FD                 db  14h
.eh_frame_hdr:000000000000B6FE                 db    0
.eh_frame_hdr:000000000000B6FF                 db    0
.eh_frame_hdr:000000000000B700                 db  7Ch ; |
.eh_frame_hdr:000000000000B701                 db 0C9h
.eh_frame_hdr:000000000000B702                 db 0FFh
.eh_frame_hdr:000000000000B703                 db 0FFh
.eh_frame_hdr:000000000000B704                 db  80h
.eh_frame_hdr:000000000000B705                 db  14h
.eh_frame_hdr:000000000000B706                 db    0
.eh_frame_hdr:000000000000B707                 db    0
.eh_frame_hdr:000000000000B708                 db  8Ch
.eh_frame_hdr:000000000000B709                 db 0C9h
.eh_frame_hdr:000000000000B70A                 db 0FFh
.eh_frame_hdr:000000000000B70B                 db 0FFh
.eh_frame_hdr:000000000000B70C                 db  94h
.eh_frame_hdr:000000000000B70D                 db  14h
.eh_frame_hdr:000000000000B70E                 db    0
.eh_frame_hdr:000000000000B70F                 db    0
.eh_frame_hdr:000000000000B710                 db  9Ch
.eh_frame_hdr:000000000000B711                 db 0C9h
.eh_frame_hdr:000000000000B712                 db 0FFh
.eh_frame_hdr:000000000000B713                 db 0FFh
.eh_frame_hdr:000000000000B714                 db 0A8h
.eh_frame_hdr:000000000000B715                 db  14h
.eh_frame_hdr:000000000000B716                 db    0
.eh_frame_hdr:000000000000B717                 db    0
.eh_frame_hdr:000000000000B718                 db 0CCh
.eh_frame_hdr:000000000000B719                 db 0C9h
.eh_frame_hdr:000000000000B71A                 db 0FFh
.eh_frame_hdr:000000000000B71B                 db 0FFh
.eh_frame_hdr:000000000000B71C                 db 0C4h
.eh_frame_hdr:000000000000B71D                 db  14h
.eh_frame_hdr:000000000000B71E                 db    0
.eh_frame_hdr:000000000000B71F                 db    0
.eh_frame_hdr:000000000000B720                 db 0ECh
.eh_frame_hdr:000000000000B721                 db 0CAh
.eh_frame_hdr:000000000000B722                 db 0FFh
.eh_frame_hdr:000000000000B723                 db 0FFh
.eh_frame_hdr:000000000000B724                 db  24h ; $
.eh_frame_hdr:000000000000B725                 db  15h
.eh_frame_hdr:000000000000B726                 db    0
.eh_frame_hdr:000000000000B727                 db    0
.eh_frame_hdr:000000000000B728                 db  6Ch ; l
.eh_frame_hdr:000000000000B729                 db 0CBh
.eh_frame_hdr:000000000000B72A                 db 0FFh
.eh_frame_hdr:000000000000B72B                 db 0FFh
.eh_frame_hdr:000000000000B72C                 db  38h ; 8
.eh_frame_hdr:000000000000B72D                 db  15h
.eh_frame_hdr:000000000000B72E                 db    0
.eh_frame_hdr:000000000000B72F                 db    0
.eh_frame_hdr:000000000000B730                 db 0ACh
.eh_frame_hdr:000000000000B731                 db 0CCh
.eh_frame_hdr:000000000000B732                 db 0FFh
.eh_frame_hdr:000000000000B733                 db 0FFh
.eh_frame_hdr:000000000000B734                 db  98h
.eh_frame_hdr:000000000000B735                 db  15h
.eh_frame_hdr:000000000000B736                 db    0
.eh_frame_hdr:000000000000B737                 db    0
.eh_frame_hdr:000000000000B738                 db 0BCh
.eh_frame_hdr:000000000000B739                 db 0CCh
.eh_frame_hdr:000000000000B73A                 db 0FFh
.eh_frame_hdr:000000000000B73B                 db 0FFh
.eh_frame_hdr:000000000000B73C                 db 0ACh
.eh_frame_hdr:000000000000B73D                 db  15h
.eh_frame_hdr:000000000000B73E                 db    0
.eh_frame_hdr:000000000000B73F                 db    0
.eh_frame_hdr:000000000000B740                 db 0CCh
.eh_frame_hdr:000000000000B741                 db 0CCh
.eh_frame_hdr:000000000000B742                 db 0FFh
.eh_frame_hdr:000000000000B743                 db 0FFh
.eh_frame_hdr:000000000000B744                 db 0C0h
.eh_frame_hdr:000000000000B745                 db  15h
.eh_frame_hdr:000000000000B746                 db    0
.eh_frame_hdr:000000000000B747                 db    0
.eh_frame_hdr:000000000000B748                 db 0DCh
.eh_frame_hdr:000000000000B749                 db 0CCh
.eh_frame_hdr:000000000000B74A                 db 0FFh
.eh_frame_hdr:000000000000B74B                 db 0FFh
.eh_frame_hdr:000000000000B74C                 db 0D4h
.eh_frame_hdr:000000000000B74D                 db  15h
.eh_frame_hdr:000000000000B74E                 db    0
.eh_frame_hdr:000000000000B74F                 db    0
.eh_frame_hdr:000000000000B750                 db  2Ch ; ,
.eh_frame_hdr:000000000000B751                 db 0CDh
.eh_frame_hdr:000000000000B752                 db 0FFh
.eh_frame_hdr:000000000000B753                 db 0FFh
.eh_frame_hdr:000000000000B754                 db 0E8h
.eh_frame_hdr:000000000000B755                 db  15h
.eh_frame_hdr:000000000000B756                 db    0
.eh_frame_hdr:000000000000B757                 db    0
.eh_frame_hdr:000000000000B758                 db  8Ch
.eh_frame_hdr:000000000000B759                 db 0CDh
.eh_frame_hdr:000000000000B75A                 db 0FFh
.eh_frame_hdr:000000000000B75B                 db 0FFh
.eh_frame_hdr:000000000000B75C                 db 0FCh
.eh_frame_hdr:000000000000B75D                 db  15h
.eh_frame_hdr:000000000000B75E                 db    0
.eh_frame_hdr:000000000000B75F                 db    0
.eh_frame_hdr:000000000000B760                 db 0DCh
.eh_frame_hdr:000000000000B761                 db 0CEh
.eh_frame_hdr:000000000000B762                 db 0FFh
.eh_frame_hdr:000000000000B763                 db 0FFh
.eh_frame_hdr:000000000000B764                 db  38h ; 8
.eh_frame_hdr:000000000000B765                 db  16h
.eh_frame_hdr:000000000000B766                 db    0
.eh_frame_hdr:000000000000B767                 db    0
.eh_frame_hdr:000000000000B768                 db  3Ch ; <
.eh_frame_hdr:000000000000B769                 db 0CFh
.eh_frame_hdr:000000000000B76A                 db 0FFh
.eh_frame_hdr:000000000000B76B                 db 0FFh
.eh_frame_hdr:000000000000B76C                 db  70h ; p
.eh_frame_hdr:000000000000B76D                 db  16h
.eh_frame_hdr:000000000000B76E                 db    0
.eh_frame_hdr:000000000000B76F                 db    0
.eh_frame_hdr:000000000000B770                 db  8Ch
.eh_frame_hdr:000000000000B771                 db 0CFh
.eh_frame_hdr:000000000000B772                 db 0FFh
.eh_frame_hdr:000000000000B773                 db 0FFh
.eh_frame_hdr:000000000000B774                 db  84h
.eh_frame_hdr:000000000000B775                 db  16h
.eh_frame_hdr:000000000000B776                 db    0
.eh_frame_hdr:000000000000B777                 db    0
.eh_frame_hdr:000000000000B778                 db  0Ch
.eh_frame_hdr:000000000000B779                 db 0D0h
.eh_frame_hdr:000000000000B77A                 db 0FFh
.eh_frame_hdr:000000000000B77B                 db 0FFh
.eh_frame_hdr:000000000000B77C                 db 0B8h
.eh_frame_hdr:000000000000B77D                 db  16h
.eh_frame_hdr:000000000000B77E                 db    0
.eh_frame_hdr:000000000000B77F                 db    0
.eh_frame_hdr:000000000000B780                 db  7Ch ; |
.eh_frame_hdr:000000000000B781                 db 0D0h
.eh_frame_hdr:000000000000B782                 db 0FFh
.eh_frame_hdr:000000000000B783                 db 0FFh
.eh_frame_hdr:000000000000B784                 db 0CCh
.eh_frame_hdr:000000000000B785                 db  16h
.eh_frame_hdr:000000000000B786                 db    0
.eh_frame_hdr:000000000000B787                 db    0
.eh_frame_hdr:000000000000B788                 db 0ECh
.eh_frame_hdr:000000000000B789                 db 0D0h
.eh_frame_hdr:000000000000B78A                 db 0FFh
.eh_frame_hdr:000000000000B78B                 db 0FFh
.eh_frame_hdr:000000000000B78C                 db  18h
.eh_frame_hdr:000000000000B78D                 db  17h
.eh_frame_hdr:000000000000B78E                 db    0
.eh_frame_hdr:000000000000B78F                 db    0
.eh_frame_hdr:000000000000B790                 db  2Ch ; ,
.eh_frame_hdr:000000000000B791                 db 0D1h
.eh_frame_hdr:000000000000B792                 db 0FFh
.eh_frame_hdr:000000000000B793                 db 0FFh
.eh_frame_hdr:000000000000B794                 db  2Ch ; ,
.eh_frame_hdr:000000000000B795                 db  17h
.eh_frame_hdr:000000000000B796                 db    0
.eh_frame_hdr:000000000000B797                 db    0
.eh_frame_hdr:000000000000B798                 db  4Ch ; L
.eh_frame_hdr:000000000000B799                 db 0D1h
.eh_frame_hdr:000000000000B79A                 db 0FFh
.eh_frame_hdr:000000000000B79B                 db 0FFh
.eh_frame_hdr:000000000000B79C                 db  40h ; @
.eh_frame_hdr:000000000000B79D                 db  17h
.eh_frame_hdr:000000000000B79E                 db    0
.eh_frame_hdr:000000000000B79F                 db    0
.eh_frame_hdr:000000000000B7A0                 db  0Ch
.eh_frame_hdr:000000000000B7A1                 db 0D3h
.eh_frame_hdr:000000000000B7A2                 db 0FFh
.eh_frame_hdr:000000000000B7A3                 db 0FFh
.eh_frame_hdr:000000000000B7A4                 db  8Ch
.eh_frame_hdr:000000000000B7A5                 db  17h
.eh_frame_hdr:000000000000B7A6                 db    0
.eh_frame_hdr:000000000000B7A7                 db    0
.eh_frame_hdr:000000000000B7A8                 db  9Ch
.eh_frame_hdr:000000000000B7A9                 db 0D3h
.eh_frame_hdr:000000000000B7AA                 db 0FFh
.eh_frame_hdr:000000000000B7AB                 db 0FFh
.eh_frame_hdr:000000000000B7AC                 db 0B8h
.eh_frame_hdr:000000000000B7AD                 db  17h
.eh_frame_hdr:000000000000B7AE                 db    0
.eh_frame_hdr:000000000000B7AF                 db    0
.eh_frame_hdr:000000000000B7B0                 db  7Ch ; |
.eh_frame_hdr:000000000000B7B1                 db 0D4h
.eh_frame_hdr:000000000000B7B2                 db 0FFh
.eh_frame_hdr:000000000000B7B3                 db 0FFh
.eh_frame_hdr:000000000000B7B4                 db 0E4h
.eh_frame_hdr:000000000000B7B5                 db  17h
.eh_frame_hdr:000000000000B7B6                 db    0
.eh_frame_hdr:000000000000B7B7                 db    0
.eh_frame_hdr:000000000000B7B8                 db 0BCh
.eh_frame_hdr:000000000000B7B9                 db 0D6h
.eh_frame_hdr:000000000000B7BA                 db 0FFh
.eh_frame_hdr:000000000000B7BB                 db 0FFh
.eh_frame_hdr:000000000000B7BC                 db  1Ch
.eh_frame_hdr:000000000000B7BD                 db  18h
.eh_frame_hdr:000000000000B7BE                 db    0
.eh_frame_hdr:000000000000B7BF                 db    0
.eh_frame_hdr:000000000000B7C0                 db  4Ch ; L
.eh_frame_hdr:000000000000B7C1                 db 0D9h
.eh_frame_hdr:000000000000B7C2                 db 0FFh
.eh_frame_hdr:000000000000B7C3                 db 0FFh
.eh_frame_hdr:000000000000B7C4                 db  58h ; X
.eh_frame_hdr:000000000000B7C5                 db  18h
.eh_frame_hdr:000000000000B7C6                 db    0
.eh_frame_hdr:000000000000B7C7                 db    0
.eh_frame_hdr:000000000000B7C8                 db 0ACh
.eh_frame_hdr:000000000000B7C9                 db 0D9h
.eh_frame_hdr:000000000000B7CA                 db 0FFh
.eh_frame_hdr:000000000000B7CB                 db 0FFh
.eh_frame_hdr:000000000000B7CC                 db  7Ch ; |
.eh_frame_hdr:000000000000B7CD                 db  18h
.eh_frame_hdr:000000000000B7CE                 db    0
.eh_frame_hdr:000000000000B7CF                 db    0
.eh_frame_hdr:000000000000B7D0                 db 0BCh
.eh_frame_hdr:000000000000B7D1                 db 0DBh
.eh_frame_hdr:000000000000B7D2                 db 0FFh
.eh_frame_hdr:000000000000B7D3                 db 0FFh
.eh_frame_hdr:000000000000B7D4                 db 0B4h
.eh_frame_hdr:000000000000B7D5                 db  18h
.eh_frame_hdr:000000000000B7D6                 db    0
.eh_frame_hdr:000000000000B7D7                 db    0
.eh_frame_hdr:000000000000B7D8                 db 0DCh
.eh_frame_hdr:000000000000B7D9                 db 0DBh
.eh_frame_hdr:000000000000B7DA                 db 0FFh
.eh_frame_hdr:000000000000B7DB                 db 0FFh
.eh_frame_hdr:000000000000B7DC                 db 0C8h
.eh_frame_hdr:000000000000B7DD                 db  18h
.eh_frame_hdr:000000000000B7DE                 db    0
.eh_frame_hdr:000000000000B7DF                 db    0
.eh_frame_hdr:000000000000B7E0                 db 0ECh
.eh_frame_hdr:000000000000B7E1                 db 0DBh
.eh_frame_hdr:000000000000B7E2                 db 0FFh
.eh_frame_hdr:000000000000B7E3                 db 0FFh
.eh_frame_hdr:000000000000B7E4                 db 0DCh
.eh_frame_hdr:000000000000B7E5                 db  18h
.eh_frame_hdr:000000000000B7E6                 db    0
.eh_frame_hdr:000000000000B7E7                 db    0
.eh_frame_hdr:000000000000B7E8                 db  2Ch ; ,
.eh_frame_hdr:000000000000B7E9                 db 0DCh
.eh_frame_hdr:000000000000B7EA                 db 0FFh
.eh_frame_hdr:000000000000B7EB                 db 0FFh
.eh_frame_hdr:000000000000B7EC                 db 0F0h
.eh_frame_hdr:000000000000B7ED                 db  18h
.eh_frame_hdr:000000000000B7EE                 db    0
.eh_frame_hdr:000000000000B7EF                 db    0
.eh_frame_hdr:000000000000B7F0                 db  6Ch ; l
.eh_frame_hdr:000000000000B7F1                 db 0DCh
.eh_frame_hdr:000000000000B7F2                 db 0FFh
.eh_frame_hdr:000000000000B7F3                 db 0FFh
.eh_frame_hdr:000000000000B7F4                 db    4
.eh_frame_hdr:000000000000B7F5                 db  19h
.eh_frame_hdr:000000000000B7F6                 db    0
.eh_frame_hdr:000000000000B7F7                 db    0
.eh_frame_hdr:000000000000B7F8                 db 0ACh
.eh_frame_hdr:000000000000B7F9                 db 0DCh
.eh_frame_hdr:000000000000B7FA                 db 0FFh
.eh_frame_hdr:000000000000B7FB                 db 0FFh
.eh_frame_hdr:000000000000B7FC                 db  24h ; $
.eh_frame_hdr:000000000000B7FD                 db  19h
.eh_frame_hdr:000000000000B7FE                 db    0
.eh_frame_hdr:000000000000B7FF                 db    0
.eh_frame_hdr:000000000000B800                 db 0DCh
.eh_frame_hdr:000000000000B801                 db 0DCh
.eh_frame_hdr:000000000000B802                 db 0FFh
.eh_frame_hdr:000000000000B803                 db 0FFh
.eh_frame_hdr:000000000000B804                 db  3Ch ; <
.eh_frame_hdr:000000000000B805                 db  19h
.eh_frame_hdr:000000000000B806                 db    0
.eh_frame_hdr:000000000000B807                 db    0
.eh_frame_hdr:000000000000B808                 db  0Ch
.eh_frame_hdr:000000000000B809                 db 0DDh
.eh_frame_hdr:000000000000B80A                 db 0FFh
.eh_frame_hdr:000000000000B80B                 db 0FFh
.eh_frame_hdr:000000000000B80C                 db  54h ; T
.eh_frame_hdr:000000000000B80D                 db  19h
.eh_frame_hdr:000000000000B80E                 db    0
.eh_frame_hdr:000000000000B80F                 db    0
.eh_frame_hdr:000000000000B810                 db  7Ch ; |
.eh_frame_hdr:000000000000B811                 db 0DDh
.eh_frame_hdr:000000000000B812                 db 0FFh
.eh_frame_hdr:000000000000B813                 db 0FFh
.eh_frame_hdr:000000000000B814                 db  74h ; t
.eh_frame_hdr:000000000000B815                 db  19h
.eh_frame_hdr:000000000000B816                 db    0
.eh_frame_hdr:000000000000B817                 db    0
.eh_frame_hdr:000000000000B818                 db 0FCh
.eh_frame_hdr:000000000000B819                 db 0DDh
.eh_frame_hdr:000000000000B81A                 db 0FFh
.eh_frame_hdr:000000000000B81B                 db 0FFh
.eh_frame_hdr:000000000000B81C                 db 0D4h
.eh_frame_hdr:000000000000B81D                 db  19h
.eh_frame_hdr:000000000000B81E                 db    0
.eh_frame_hdr:000000000000B81F                 db    0
.eh_frame_hdr:000000000000B820                 db  4Ch ; L
.eh_frame_hdr:000000000000B821                 db 0DEh
.eh_frame_hdr:000000000000B822                 db 0FFh
.eh_frame_hdr:000000000000B823                 db 0FFh
.eh_frame_hdr:000000000000B824                 db 0F4h
.eh_frame_hdr:000000000000B825                 db  19h
.eh_frame_hdr:000000000000B826                 db    0
.eh_frame_hdr:000000000000B827                 db    0
.eh_frame_hdr:000000000000B828                 db  6Ch ; l
.eh_frame_hdr:000000000000B829                 db 0DEh
.eh_frame_hdr:000000000000B82A                 db 0FFh
.eh_frame_hdr:000000000000B82B                 db 0FFh
.eh_frame_hdr:000000000000B82C                 db    8
.eh_frame_hdr:000000000000B82D                 db  1Ah
.eh_frame_hdr:000000000000B82E                 db    0
.eh_frame_hdr:000000000000B82F                 db    0
.eh_frame_hdr:000000000000B830                 db  8Ch
.eh_frame_hdr:000000000000B831                 db 0DEh
.eh_frame_hdr:000000000000B832                 db 0FFh
.eh_frame_hdr:000000000000B833                 db 0FFh
.eh_frame_hdr:000000000000B834                 db  24h ; $
.eh_frame_hdr:000000000000B835                 db  1Ah
.eh_frame_hdr:000000000000B836                 db    0
.eh_frame_hdr:000000000000B837                 db    0
.eh_frame_hdr:000000000000B838                 db 0CCh
.eh_frame_hdr:000000000000B839                 db 0DEh
.eh_frame_hdr:000000000000B83A                 db 0FFh
.eh_frame_hdr:000000000000B83B                 db 0FFh
.eh_frame_hdr:000000000000B83C                 db  5Ch ; \
.eh_frame_hdr:000000000000B83D                 db  1Ah
.eh_frame_hdr:000000000000B83E                 db    0
.eh_frame_hdr:000000000000B83F                 db    0
.eh_frame_hdr:000000000000B840                 db  1Ch
.eh_frame_hdr:000000000000B841                 db 0DFh
.eh_frame_hdr:000000000000B842                 db 0FFh
.eh_frame_hdr:000000000000B843                 db 0FFh
.eh_frame_hdr:000000000000B844                 db  78h ; x
.eh_frame_hdr:000000000000B845                 db  1Ah
.eh_frame_hdr:000000000000B846                 db    0
.eh_frame_hdr:000000000000B847                 db    0
.eh_frame_hdr:000000000000B848                 db  5Ch ; \
.eh_frame_hdr:000000000000B849                 db 0DFh
.eh_frame_hdr:000000000000B84A                 db 0FFh
.eh_frame_hdr:000000000000B84B                 db 0FFh
.eh_frame_hdr:000000000000B84C                 db 0A4h
.eh_frame_hdr:000000000000B84D                 db  1Ah
.eh_frame_hdr:000000000000B84E                 db    0
.eh_frame_hdr:000000000000B84F                 db    0
.eh_frame_hdr:000000000000B850                 db  3Ch ; <
.eh_frame_hdr:000000000000B851                 db 0E2h
.eh_frame_hdr:000000000000B852                 db 0FFh
.eh_frame_hdr:000000000000B853                 db 0FFh
.eh_frame_hdr:000000000000B854                 db 0F4h
.eh_frame_hdr:000000000000B855                 db  1Ah
.eh_frame_hdr:000000000000B856                 db    0
.eh_frame_hdr:000000000000B857                 db    0
.eh_frame_hdr:000000000000B858                 db 0BCh
.eh_frame_hdr:000000000000B859                 db 0E2h
.eh_frame_hdr:000000000000B85A                 db 0FFh
.eh_frame_hdr:000000000000B85B                 db 0FFh
.eh_frame_hdr:000000000000B85C                 db  2Ch ; ,
.eh_frame_hdr:000000000000B85D                 db  1Bh
.eh_frame_hdr:000000000000B85E                 db    0
.eh_frame_hdr:000000000000B85F                 db    0
.eh_frame_hdr:000000000000B860                 db  3Ch ; <
.eh_frame_hdr:000000000000B861                 db 0E5h
.eh_frame_hdr:000000000000B862                 db 0FFh
.eh_frame_hdr:000000000000B863                 db 0FFh
.eh_frame_hdr:000000000000B864                 db  64h ; d
.eh_frame_hdr:000000000000B865                 db  1Bh
.eh_frame_hdr:000000000000B866                 db    0
.eh_frame_hdr:000000000000B867                 db    0
.eh_frame_hdr:000000000000B868                 db  7Ch ; |
.eh_frame_hdr:000000000000B869                 db 0E5h
.eh_frame_hdr:000000000000B86A                 db 0FFh
.eh_frame_hdr:000000000000B86B                 db 0FFh
.eh_frame_hdr:000000000000B86C                 db  84h
.eh_frame_hdr:000000000000B86D                 db  1Bh
.eh_frame_hdr:000000000000B86E                 db    0
.eh_frame_hdr:000000000000B86F                 db    0
.eh_frame_hdr:000000000000B870                 db 0DCh
.eh_frame_hdr:000000000000B871                 db 0E5h
.eh_frame_hdr:000000000000B872                 db 0FFh
.eh_frame_hdr:000000000000B873                 db 0FFh
.eh_frame_hdr:000000000000B874                 db 0B4h
.eh_frame_hdr:000000000000B875                 db  1Bh
.eh_frame_hdr:000000000000B876                 db    0
.eh_frame_hdr:000000000000B877                 db    0
.eh_frame_hdr:000000000000B878                 db  3Ch ; <
.eh_frame_hdr:000000000000B879                 db 0E7h
.eh_frame_hdr:000000000000B87A                 db 0FFh
.eh_frame_hdr:000000000000B87B                 db 0FFh
.eh_frame_hdr:000000000000B87C                 db 0FCh
.eh_frame_hdr:000000000000B87D                 db  1Bh
.eh_frame_hdr:000000000000B87E                 db    0
.eh_frame_hdr:000000000000B87F                 db    0
.eh_frame_hdr:000000000000B880                 db  4Ch ; L
.eh_frame_hdr:000000000000B881                 db 0E7h
.eh_frame_hdr:000000000000B882                 db 0FFh
.eh_frame_hdr:000000000000B883                 db 0FFh
.eh_frame_hdr:000000000000B884                 db  14h
.eh_frame_hdr:000000000000B885                 db  1Ch
.eh_frame_hdr:000000000000B886                 db    0
.eh_frame_hdr:000000000000B887                 db    0
.eh_frame_hdr:000000000000B888                 db 0BCh
.eh_frame_hdr:000000000000B889                 db 0E7h
.eh_frame_hdr:000000000000B88A                 db 0FFh
.eh_frame_hdr:000000000000B88B                 db 0FFh
.eh_frame_hdr:000000000000B88C                 db  5Ch ; \
.eh_frame_hdr:000000000000B88D                 db  1Ch
.eh_frame_hdr:000000000000B88E                 db    0
.eh_frame_hdr:000000000000B88F                 db    0
.eh_frame_hdr:000000000000B890                 db 0CCh
.eh_frame_hdr:000000000000B891                 db 0E7h
.eh_frame_hdr:000000000000B892                 db 0FFh
.eh_frame_hdr:000000000000B893                 db 0FFh
.eh_frame_hdr:000000000000B894                 db  74h ; t
.eh_frame_hdr:000000000000B895                 db  1Ch
.eh_frame_hdr:000000000000B896                 db    0
.eh_frame_hdr:000000000000B897                 db    0
.eh_frame_hdr:000000000000B897 _eh_frame_hdr   ends
.eh_frame_hdr:000000000000B897
.eh_frame:000000000000B898 ; ===========================================================================
.eh_frame:000000000000B898
.eh_frame:000000000000B898 ; Segment type: Pure data
.eh_frame:000000000000B898 ; Segment permissions: Read
.eh_frame:000000000000B898 _eh_frame       segment qword public 'CONST' use64
.eh_frame:000000000000B898                 assume cs:_eh_frame
.eh_frame:000000000000B898                 ;org 0B898h
.eh_frame:000000000000B898                 db  14h
.eh_frame:000000000000B899                 db    0
.eh_frame:000000000000B89A                 db    0
.eh_frame:000000000000B89B                 db    0
.eh_frame:000000000000B89C                 db    0
.eh_frame:000000000000B89D                 db    0
.eh_frame:000000000000B89E                 db    0
.eh_frame:000000000000B89F                 db    0
.eh_frame:000000000000B8A0                 db    1
.eh_frame:000000000000B8A1                 db  7Ah ; z
.eh_frame:000000000000B8A2                 db  52h ; R
.eh_frame:000000000000B8A3                 db    0
.eh_frame:000000000000B8A4                 db    1
.eh_frame:000000000000B8A5                 db  78h ; x
.eh_frame:000000000000B8A6                 db  10h
.eh_frame:000000000000B8A7                 db    1
.eh_frame:000000000000B8A8                 db  1Bh
.eh_frame:000000000000B8A9                 db  0Ch
.eh_frame:000000000000B8AA                 db    7
.eh_frame:000000000000B8AB                 db    8
.eh_frame:000000000000B8AC                 db  90h
.eh_frame:000000000000B8AD                 db    1
.eh_frame:000000000000B8AE                 db    7
.eh_frame:000000000000B8AF                 db  10h
.eh_frame:000000000000B8B0                 db  14h
.eh_frame:000000000000B8B1                 db    0
.eh_frame:000000000000B8B2                 db    0
.eh_frame:000000000000B8B3                 db    0
.eh_frame:000000000000B8B4                 db  1Ch
.eh_frame:000000000000B8B5                 db    0
.eh_frame:000000000000B8B6                 db    0
.eh_frame:000000000000B8B7                 db    0
.eh_frame:000000000000B8B8                 db 0D8h
.eh_frame:000000000000B8B9                 db  6Eh ; n
.eh_frame:000000000000B8BA                 db 0FFh
.eh_frame:000000000000B8BB                 db 0FFh
.eh_frame:000000000000B8BC                 db  2Bh ; +
.eh_frame:000000000000B8BD                 db    0
.eh_frame:000000000000B8BE                 db    0
.eh_frame:000000000000B8BF                 db    0
.eh_frame:000000000000B8C0                 db    0
.eh_frame:000000000000B8C1                 db    0
.eh_frame:000000000000B8C2                 db    0
.eh_frame:000000000000B8C3                 db    0
.eh_frame:000000000000B8C4                 db    0
.eh_frame:000000000000B8C5                 db    0
.eh_frame:000000000000B8C6                 db    0
.eh_frame:000000000000B8C7                 db    0
.eh_frame:000000000000B8C8                 db  14h
.eh_frame:000000000000B8C9                 db    0
.eh_frame:000000000000B8CA                 db    0
.eh_frame:000000000000B8CB                 db    0
.eh_frame:000000000000B8CC                 db    0
.eh_frame:000000000000B8CD                 db    0
.eh_frame:000000000000B8CE                 db    0
.eh_frame:000000000000B8CF                 db    0
.eh_frame:000000000000B8D0                 db    1
.eh_frame:000000000000B8D1                 db  7Ah ; z
.eh_frame:000000000000B8D2                 db  52h ; R
.eh_frame:000000000000B8D3                 db    0
.eh_frame:000000000000B8D4                 db    1
.eh_frame:000000000000B8D5                 db  78h ; x
.eh_frame:000000000000B8D6                 db  10h
.eh_frame:000000000000B8D7                 db    1
.eh_frame:000000000000B8D8                 db  1Bh
.eh_frame:000000000000B8D9                 db  0Ch
.eh_frame:000000000000B8DA                 db    7
.eh_frame:000000000000B8DB                 db    8
.eh_frame:000000000000B8DC                 db  90h
.eh_frame:000000000000B8DD                 db    1
.eh_frame:000000000000B8DE                 db    0
.eh_frame:000000000000B8DF                 db    0
.eh_frame:000000000000B8E0                 db  24h ; $
.eh_frame:000000000000B8E1                 db    0
.eh_frame:000000000000B8E2                 db    0
.eh_frame:000000000000B8E3                 db    0
.eh_frame:000000000000B8E4                 db  1Ch
.eh_frame:000000000000B8E5                 db    0
.eh_frame:000000000000B8E6                 db    0
.eh_frame:000000000000B8E7                 db    0
.eh_frame:000000000000B8E8                 db  98h
.eh_frame:000000000000B8E9                 db  5Fh ; _
.eh_frame:000000000000B8EA                 db 0FFh
.eh_frame:000000000000B8EB                 db 0FFh
.eh_frame:000000000000B8EC                 db  10h
.eh_frame:000000000000B8ED                 db    4
.eh_frame:000000000000B8EE                 db    0
.eh_frame:000000000000B8EF                 db    0
.eh_frame:000000000000B8F0                 db    0
.eh_frame:000000000000B8F1                 db  0Eh
.eh_frame:000000000000B8F2                 db  10h
.eh_frame:000000000000B8F3                 db  46h ; F
.eh_frame:000000000000B8F4                 db  0Eh
.eh_frame:000000000000B8F5                 db  18h
.eh_frame:000000000000B8F6                 db  4Ah ; J
.eh_frame:000000000000B8F7                 db  0Fh
.eh_frame:000000000000B8F8                 db  0Bh
.eh_frame:000000000000B8F9                 db  77h ; w
.eh_frame:000000000000B8FA                 db    8
.eh_frame:000000000000B8FB                 db  80h
.eh_frame:000000000000B8FC                 db    0
.eh_frame:000000000000B8FD                 db  3Fh ; ?
.eh_frame:000000000000B8FE                 db  1Ah
.eh_frame:000000000000B8FF                 db  3Bh ; ;
.eh_frame:000000000000B900                 db  2Ah ; *
.eh_frame:000000000000B901                 db  33h ; 3
.eh_frame:000000000000B902                 db  24h ; $
.eh_frame:000000000000B903                 db  22h ; "
.eh_frame:000000000000B904                 db    0
.eh_frame:000000000000B905                 db    0
.eh_frame:000000000000B906                 db    0
.eh_frame:000000000000B907                 db    0
.eh_frame:000000000000B908                 db  14h
.eh_frame:000000000000B909                 db    0
.eh_frame:000000000000B90A                 db    0
.eh_frame:000000000000B90B                 db    0
.eh_frame:000000000000B90C                 db  44h ; D
.eh_frame:000000000000B90D                 db    0
.eh_frame:000000000000B90E                 db    0
.eh_frame:000000000000B90F                 db    0
.eh_frame:000000000000B910                 db  80h
.eh_frame:000000000000B911                 db  63h ; c
.eh_frame:000000000000B912                 db 0FFh
.eh_frame:000000000000B913                 db 0FFh
.eh_frame:000000000000B914                 db  10h
.eh_frame:000000000000B915                 db    0
.eh_frame:000000000000B916                 db    0
.eh_frame:000000000000B917                 db    0
.eh_frame:000000000000B918                 db    0
.eh_frame:000000000000B919                 db    0
.eh_frame:000000000000B91A                 db    0
.eh_frame:000000000000B91B                 db    0
.eh_frame:000000000000B91C                 db    0
.eh_frame:000000000000B91D                 db    0
.eh_frame:000000000000B91E                 db    0
.eh_frame:000000000000B91F                 db    0
.eh_frame:000000000000B920                 db  28h ; (
.eh_frame:000000000000B921                 db    0
.eh_frame:000000000000B922                 db    0
.eh_frame:000000000000B923                 db    0
.eh_frame:000000000000B924                 db  5Ch ; \
.eh_frame:000000000000B925                 db    0
.eh_frame:000000000000B926                 db    0
.eh_frame:000000000000B927                 db    0
.eh_frame:000000000000B928                 db  78h ; x
.eh_frame:000000000000B929                 db  6Fh ; o
.eh_frame:000000000000B92A                 db 0FFh
.eh_frame:000000000000B92B                 db 0FFh
.eh_frame:000000000000B92C                 db  6Ah ; j
.eh_frame:000000000000B92D                 db    4
.eh_frame:000000000000B92E                 db    0
.eh_frame:000000000000B92F                 db    0
.eh_frame:000000000000B930                 db    0
.eh_frame:000000000000B931                 db  42h ; B
.eh_frame:000000000000B932                 db  0Eh
.eh_frame:000000000000B933                 db  10h
.eh_frame:000000000000B934                 db  8Dh
.eh_frame:000000000000B935                 db    2
.eh_frame:000000000000B936                 db  42h ; B
.eh_frame:000000000000B937                 db  0Eh
.eh_frame:000000000000B938                 db  18h
.eh_frame:000000000000B939                 db  8Ch
.eh_frame:000000000000B93A                 db    3
.eh_frame:000000000000B93B                 db  46h ; F
.eh_frame:000000000000B93C                 db  0Eh
.eh_frame:000000000000B93D                 db  20h
.eh_frame:000000000000B93E                 db  86h
.eh_frame:000000000000B93F                 db    4
.eh_frame:000000000000B940                 db  41h ; A
.eh_frame:000000000000B941                 db  0Eh
.eh_frame:000000000000B942                 db  28h ; (
.eh_frame:000000000000B943                 db  83h
.eh_frame:000000000000B944                 db    5
.eh_frame:000000000000B945                 db  49h ; I
.eh_frame:000000000000B946                 db  0Eh
.eh_frame:000000000000B947                 db 0B0h
.eh_frame:000000000000B948                 db    1
.eh_frame:000000000000B949                 db    0
.eh_frame:000000000000B94A                 db    0
.eh_frame:000000000000B94B                 db    0
.eh_frame:000000000000B94C                 db  58h ; X
.eh_frame:000000000000B94D                 db    0
.eh_frame:000000000000B94E                 db    0
.eh_frame:000000000000B94F                 db    0
.eh_frame:000000000000B950                 db  88h
.eh_frame:000000000000B951                 db    0
.eh_frame:000000000000B952                 db    0
.eh_frame:000000000000B953                 db    0
.eh_frame:000000000000B954                 db  4Ch ; L
.eh_frame:000000000000B955                 db  63h ; c
.eh_frame:000000000000B956                 db 0FFh
.eh_frame:000000000000B957                 db 0FFh
.eh_frame:000000000000B958                 db 0E1h
.eh_frame:000000000000B959                 db  0Ah
.eh_frame:000000000000B95A                 db    0
.eh_frame:000000000000B95B                 db    0
.eh_frame:000000000000B95C                 db    0
.eh_frame:000000000000B95D                 db  42h ; B
.eh_frame:000000000000B95E                 db  0Eh
.eh_frame:000000000000B95F                 db  10h
.eh_frame:000000000000B960                 db  8Fh
.eh_frame:000000000000B961                 db    2
.eh_frame:000000000000B962                 db  42h ; B
.eh_frame:000000000000B963                 db  0Eh
.eh_frame:000000000000B964                 db  18h
.eh_frame:000000000000B965                 db  8Eh
.eh_frame:000000000000B966                 db    3
.eh_frame:000000000000B967                 db  45h ; E
.eh_frame:000000000000B968                 db  0Eh
.eh_frame:000000000000B969                 db  20h
.eh_frame:000000000000B96A                 db  8Dh
.eh_frame:000000000000B96B                 db    4
.eh_frame:000000000000B96C                 db  42h ; B
.eh_frame:000000000000B96D                 db  0Eh
.eh_frame:000000000000B96E                 db  28h ; (
.eh_frame:000000000000B96F                 db  8Ch
.eh_frame:000000000000B970                 db    5
.eh_frame:000000000000B971                 db  44h ; D
.eh_frame:000000000000B972                 db  0Eh
.eh_frame:000000000000B973                 db  30h ; 0
.eh_frame:000000000000B974                 db  86h
.eh_frame:000000000000B975                 db    6
.eh_frame:000000000000B976                 db  41h ; A
.eh_frame:000000000000B977                 db  0Eh
.eh_frame:000000000000B978                 db  38h ; 8
.eh_frame:000000000000B979                 db  83h
.eh_frame:000000000000B97A                 db    7
.eh_frame:000000000000B97B                 db  56h ; V
.eh_frame:000000000000B97C                 db  0Eh
.eh_frame:000000000000B97D                 db  70h ; p
.eh_frame:000000000000B97E                 db    3
.eh_frame:000000000000B97F                 db  3Fh ; ?
.eh_frame:000000000000B980                 db    1
.eh_frame:000000000000B981                 db  0Ah
.eh_frame:000000000000B982                 db  0Eh
.eh_frame:000000000000B983                 db  78h ; x
.eh_frame:000000000000B984                 db  50h ; P
.eh_frame:000000000000B985                 db  0Eh
.eh_frame:000000000000B986                 db  80h
.eh_frame:000000000000B987                 db    1
.eh_frame:000000000000B988                 db  6Ah ; j
.eh_frame:000000000000B989                 db  0Bh
.eh_frame:000000000000B98A                 db    3
.eh_frame:000000000000B98B                 db  20h
.eh_frame:000000000000B98C                 db    2
.eh_frame:000000000000B98D                 db  0Ah
.eh_frame:000000000000B98E                 db  0Eh
.eh_frame:000000000000B98F                 db  38h ; 8
.eh_frame:000000000000B990                 db  41h ; A
.eh_frame:000000000000B991                 db  0Eh
.eh_frame:000000000000B992                 db  30h ; 0
.eh_frame:000000000000B993                 db  41h ; A
.eh_frame:000000000000B994                 db  0Eh
.eh_frame:000000000000B995                 db  28h ; (
.eh_frame:000000000000B996                 db  42h ; B
.eh_frame:000000000000B997                 db  0Eh
.eh_frame:000000000000B998                 db  20h
.eh_frame:000000000000B999                 db  42h ; B
.eh_frame:000000000000B99A                 db  0Eh
.eh_frame:000000000000B99B                 db  18h
.eh_frame:000000000000B99C                 db  42h ; B
.eh_frame:000000000000B99D                 db  0Eh
.eh_frame:000000000000B99E                 db  10h
.eh_frame:000000000000B99F                 db  42h ; B
.eh_frame:000000000000B9A0                 db  0Eh
.eh_frame:000000000000B9A1                 db    8
.eh_frame:000000000000B9A2                 db  41h ; A
.eh_frame:000000000000B9A3                 db  0Bh
.eh_frame:000000000000B9A4                 db    0
.eh_frame:000000000000B9A5                 db    0
.eh_frame:000000000000B9A6                 db    0
.eh_frame:000000000000B9A7                 db    0
.eh_frame:000000000000B9A8                 db  10h
.eh_frame:000000000000B9A9                 db    0
.eh_frame:000000000000B9AA                 db    0
.eh_frame:000000000000B9AB                 db    0
.eh_frame:000000000000B9AC                 db 0E4h
.eh_frame:000000000000B9AD                 db    0
.eh_frame:000000000000B9AE                 db    0
.eh_frame:000000000000B9AF                 db    0
.eh_frame:000000000000B9B0                 db  60h ; `
.eh_frame:000000000000B9B1                 db  73h ; s
.eh_frame:000000000000B9B2                 db 0FFh
.eh_frame:000000000000B9B3                 db 0FFh
.eh_frame:000000000000B9B4                 db    8
.eh_frame:000000000000B9B5                 db    0
.eh_frame:000000000000B9B6                 db    0
.eh_frame:000000000000B9B7                 db    0
.eh_frame:000000000000B9B8                 db    0
.eh_frame:000000000000B9B9                 db    0
.eh_frame:000000000000B9BA                 db    0
.eh_frame:000000000000B9BB                 db    0
.eh_frame:000000000000B9BC                 db  10h
.eh_frame:000000000000B9BD                 db    0
.eh_frame:000000000000B9BE                 db    0
.eh_frame:000000000000B9BF                 db    0
.eh_frame:000000000000B9C0                 db 0F8h
.eh_frame:000000000000B9C1                 db    0
.eh_frame:000000000000B9C2                 db    0
.eh_frame:000000000000B9C3                 db    0
.eh_frame:000000000000B9C4                 db  5Ch ; \
.eh_frame:000000000000B9C5                 db  73h ; s
.eh_frame:000000000000B9C6                 db 0FFh
.eh_frame:000000000000B9C7                 db 0FFh
.eh_frame:000000000000B9C8                 db    8
.eh_frame:000000000000B9C9                 db    0
.eh_frame:000000000000B9CA                 db    0
.eh_frame:000000000000B9CB                 db    0
.eh_frame:000000000000B9CC                 db    0
.eh_frame:000000000000B9CD                 db    0
.eh_frame:000000000000B9CE                 db    0
.eh_frame:000000000000B9CF                 db    0
.eh_frame:000000000000B9D0                 db  2Ch ; ,
.eh_frame:000000000000B9D1                 db    0
.eh_frame:000000000000B9D2                 db    0
.eh_frame:000000000000B9D3                 db    0
.eh_frame:000000000000B9D4                 db  0Ch
.eh_frame:000000000000B9D5                 db    1
.eh_frame:000000000000B9D6                 db    0
.eh_frame:000000000000B9D7                 db    0
.eh_frame:000000000000B9D8                 db  58h ; X
.eh_frame:000000000000B9D9                 db  73h ; s
.eh_frame:000000000000B9DA                 db 0FFh
.eh_frame:000000000000B9DB                 db 0FFh
.eh_frame:000000000000B9DC                 db 0A4h
.eh_frame:000000000000B9DD                 db    0
.eh_frame:000000000000B9DE                 db    0
.eh_frame:000000000000B9DF                 db    0
.eh_frame:000000000000B9E0                 db    0
.eh_frame:000000000000B9E1                 db  41h ; A
.eh_frame:000000000000B9E2                 db  0Eh
.eh_frame:000000000000B9E3                 db  10h
.eh_frame:000000000000B9E4                 db  86h
.eh_frame:000000000000B9E5                 db    2
.eh_frame:000000000000B9E6                 db  41h ; A
.eh_frame:000000000000B9E7                 db  0Eh
.eh_frame:000000000000B9E8                 db  18h
.eh_frame:000000000000B9E9                 db  83h
.eh_frame:000000000000B9EA                 db    3
.eh_frame:000000000000B9EB                 db  44h ; D
.eh_frame:000000000000B9EC                 db  0Eh
.eh_frame:000000000000B9ED                 db  20h
.eh_frame:000000000000B9EE                 db  7Ah ; z
.eh_frame:000000000000B9EF                 db  0Ah
.eh_frame:000000000000B9F0                 db  0Eh
.eh_frame:000000000000B9F1                 db  18h
.eh_frame:000000000000B9F2                 db  41h ; A
.eh_frame:000000000000B9F3                 db  0Eh
.eh_frame:000000000000B9F4                 db  10h
.eh_frame:000000000000B9F5                 db  41h ; A
.eh_frame:000000000000B9F6                 db  0Eh
.eh_frame:000000000000B9F7                 db    8
.eh_frame:000000000000B9F8                 db  41h ; A
.eh_frame:000000000000B9F9                 db  0Bh
.eh_frame:000000000000B9FA                 db    0
.eh_frame:000000000000B9FB                 db    0
.eh_frame:000000000000B9FC                 db    0
.eh_frame:000000000000B9FD                 db    0
.eh_frame:000000000000B9FE                 db    0
.eh_frame:000000000000B9FF                 db    0
.eh_frame:000000000000BA00                 db  1Ch
.eh_frame:000000000000BA01                 db    0
.eh_frame:000000000000BA02                 db    0
.eh_frame:000000000000BA03                 db    0
.eh_frame:000000000000BA04                 db  3Ch ; <
.eh_frame:000000000000BA05                 db    1
.eh_frame:000000000000BA06                 db    0
.eh_frame:000000000000BA07                 db    0
.eh_frame:000000000000BA08                 db 0D8h
.eh_frame:000000000000BA09                 db  73h ; s
.eh_frame:000000000000BA0A                 db 0FFh
.eh_frame:000000000000BA0B                 db 0FFh
.eh_frame:000000000000BA0C                 db  9Fh
.eh_frame:000000000000BA0D                 db    0
.eh_frame:000000000000BA0E                 db    0
.eh_frame:000000000000BA0F                 db    0
.eh_frame:000000000000BA10                 db    0
.eh_frame:000000000000BA11                 db  44h ; D
.eh_frame:000000000000BA12                 db  0Eh
.eh_frame:000000000000BA13                 db  10h
.eh_frame:000000000000BA14                 db  83h
.eh_frame:000000000000BA15                 db    2
.eh_frame:000000000000BA16                 db    2
.eh_frame:000000000000BA17                 db  78h ; x
.eh_frame:000000000000BA18                 db  0Ah
.eh_frame:000000000000BA19                 db  0Eh
.eh_frame:000000000000BA1A                 db    8
.eh_frame:000000000000BA1B                 db  41h ; A
.eh_frame:000000000000BA1C                 db  0Bh
.eh_frame:000000000000BA1D                 db    0
.eh_frame:000000000000BA1E                 db    0
.eh_frame:000000000000BA1F                 db    0
.eh_frame:000000000000BA20                 db  40h ; @
.eh_frame:000000000000BA21                 db    0
.eh_frame:000000000000BA22                 db    0
.eh_frame:000000000000BA23                 db    0
.eh_frame:000000000000BA24                 db  5Ch ; \
.eh_frame:000000000000BA25                 db    1
.eh_frame:000000000000BA26                 db    0
.eh_frame:000000000000BA27                 db    0
.eh_frame:000000000000BA28                 db  58h ; X
.eh_frame:000000000000BA29                 db  74h ; t
.eh_frame:000000000000BA2A                 db 0FFh
.eh_frame:000000000000BA2B                 db 0FFh
.eh_frame:000000000000BA2C                 db 0E7h
.eh_frame:000000000000BA2D                 db    0
.eh_frame:000000000000BA2E                 db    0
.eh_frame:000000000000BA2F                 db    0
.eh_frame:000000000000BA30                 db    0
.eh_frame:000000000000BA31                 db  41h ; A
.eh_frame:000000000000BA32                 db  0Eh
.eh_frame:000000000000BA33                 db  10h
.eh_frame:000000000000BA34                 db  86h
.eh_frame:000000000000BA35                 db    2
.eh_frame:000000000000BA36                 db  41h ; A
.eh_frame:000000000000BA37                 db  0Eh
.eh_frame:000000000000BA38                 db  18h
.eh_frame:000000000000BA39                 db  83h
.eh_frame:000000000000BA3A                 db    3
.eh_frame:000000000000BA3B                 db  49h ; I
.eh_frame:000000000000BA3C                 db  0Eh
.eh_frame:000000000000BA3D                 db  20h
.eh_frame:000000000000BA3E                 db  6Eh ; n
.eh_frame:000000000000BA3F                 db  0Ah
.eh_frame:000000000000BA40                 db  0Eh
.eh_frame:000000000000BA41                 db  18h
.eh_frame:000000000000BA42                 db  41h ; A
.eh_frame:000000000000BA43                 db  0Eh
.eh_frame:000000000000BA44                 db  10h
.eh_frame:000000000000BA45                 db  41h ; A
.eh_frame:000000000000BA46                 db  0Eh
.eh_frame:000000000000BA47                 db    8
.eh_frame:000000000000BA48                 db  45h ; E
.eh_frame:000000000000BA49                 db  0Bh
.eh_frame:000000000000BA4A                 db    2
.eh_frame:000000000000BA4B                 db  4Ah ; J
.eh_frame:000000000000BA4C                 db  0Ah
.eh_frame:000000000000BA4D                 db  0Eh
.eh_frame:000000000000BA4E                 db  18h
.eh_frame:000000000000BA4F                 db  41h ; A
.eh_frame:000000000000BA50                 db  0Eh
.eh_frame:000000000000BA51                 db  10h
.eh_frame:000000000000BA52                 db  41h ; A
.eh_frame:000000000000BA53                 db  0Eh
.eh_frame:000000000000BA54                 db    8
.eh_frame:000000000000BA55                 db  44h ; D
.eh_frame:000000000000BA56                 db  0Bh
.eh_frame:000000000000BA57                 db    2
.eh_frame:000000000000BA58                 db  54h ; T
.eh_frame:000000000000BA59                 db  0Eh
.eh_frame:000000000000BA5A                 db  18h
.eh_frame:000000000000BA5B                 db  41h ; A
.eh_frame:000000000000BA5C                 db  0Eh
.eh_frame:000000000000BA5D                 db  10h
.eh_frame:000000000000BA5E                 db  41h ; A
.eh_frame:000000000000BA5F                 db  0Eh
.eh_frame:000000000000BA60                 db    8
.eh_frame:000000000000BA61                 db    0
.eh_frame:000000000000BA62                 db    0
.eh_frame:000000000000BA63                 db    0
.eh_frame:000000000000BA64                 db  74h ; t
.eh_frame:000000000000BA65                 db    0
.eh_frame:000000000000BA66                 db    0
.eh_frame:000000000000BA67                 db    0
.eh_frame:000000000000BA68                 db 0A0h
.eh_frame:000000000000BA69                 db    1
.eh_frame:000000000000BA6A                 db    0
.eh_frame:000000000000BA6B                 db    0
.eh_frame:000000000000BA6C                 db    4
.eh_frame:000000000000BA6D                 db  75h ; u
.eh_frame:000000000000BA6E                 db 0FFh
.eh_frame:000000000000BA6F                 db 0FFh
.eh_frame:000000000000BA70                 db  34h ; 4
.eh_frame:000000000000BA71                 db  12h
.eh_frame:000000000000BA72                 db    0
.eh_frame:000000000000BA73                 db    0
.eh_frame:000000000000BA74                 db    0
.eh_frame:000000000000BA75                 db  42h ; B
.eh_frame:000000000000BA76                 db  0Eh
.eh_frame:000000000000BA77                 db  10h
.eh_frame:000000000000BA78                 db  8Fh
.eh_frame:000000000000BA79                 db    2
.eh_frame:000000000000BA7A                 db  42h ; B
.eh_frame:000000000000BA7B                 db  0Eh
.eh_frame:000000000000BA7C                 db  18h
.eh_frame:000000000000BA7D                 db  8Eh
.eh_frame:000000000000BA7E                 db    3
.eh_frame:000000000000BA7F                 db  45h ; E
.eh_frame:000000000000BA80                 db  0Eh
.eh_frame:000000000000BA81                 db  20h
.eh_frame:000000000000BA82                 db  8Dh
.eh_frame:000000000000BA83                 db    4
.eh_frame:000000000000BA84                 db  42h ; B
.eh_frame:000000000000BA85                 db  0Eh
.eh_frame:000000000000BA86                 db  28h ; (
.eh_frame:000000000000BA87                 db  8Ch
.eh_frame:000000000000BA88                 db    5
.eh_frame:000000000000BA89                 db  44h ; D
.eh_frame:000000000000BA8A                 db  0Eh
.eh_frame:000000000000BA8B                 db  30h ; 0
.eh_frame:000000000000BA8C                 db  86h
.eh_frame:000000000000BA8D                 db    6
.eh_frame:000000000000BA8E                 db  41h ; A
.eh_frame:000000000000BA8F                 db  0Eh
.eh_frame:000000000000BA90                 db  38h ; 8
.eh_frame:000000000000BA91                 db  83h
.eh_frame:000000000000BA92                 db    7
.eh_frame:000000000000BA93                 db  53h ; S
.eh_frame:000000000000BA94                 db  0Eh
.eh_frame:000000000000BA95                 db 0F0h
.eh_frame:000000000000BA96                 db    1
.eh_frame:000000000000BA97                 db    3
.eh_frame:000000000000BA98                 db  81h
.eh_frame:000000000000BA99                 db  0Bh
.eh_frame:000000000000BA9A                 db  0Eh
.eh_frame:000000000000BA9B                 db 0F8h
.eh_frame:000000000000BA9C                 db    1
.eh_frame:000000000000BA9D                 db  4Ah ; J
.eh_frame:000000000000BA9E                 db  0Eh
.eh_frame:000000000000BA9F                 db  80h
.eh_frame:000000000000BAA0                 db    2
.eh_frame:000000000000BAA1                 db  44h ; D
.eh_frame:000000000000BAA2                 db  0Eh
.eh_frame:000000000000BAA3                 db  88h
.eh_frame:000000000000BAA4                 db    2
.eh_frame:000000000000BAA5                 db  45h ; E
.eh_frame:000000000000BAA6                 db  0Eh
.eh_frame:000000000000BAA7                 db  90h
.eh_frame:000000000000BAA8                 db    2
.eh_frame:000000000000BAA9                 db  5Fh ; _
.eh_frame:000000000000BAAA                 db  0Eh
.eh_frame:000000000000BAAB                 db 0F0h
.eh_frame:000000000000BAAC                 db    1
.eh_frame:000000000000BAAD                 db  64h ; d
.eh_frame:000000000000BAAE                 db  0Ah
.eh_frame:000000000000BAAF                 db  0Eh
.eh_frame:000000000000BAB0                 db  38h ; 8
.eh_frame:000000000000BAB1                 db  41h ; A
.eh_frame:000000000000BAB2                 db  0Eh
.eh_frame:000000000000BAB3                 db  30h ; 0
.eh_frame:000000000000BAB4                 db  41h ; A
.eh_frame:000000000000BAB5                 db  0Eh
.eh_frame:000000000000BAB6                 db  28h ; (
.eh_frame:000000000000BAB7                 db  42h ; B
.eh_frame:000000000000BAB8                 db  0Eh
.eh_frame:000000000000BAB9                 db  20h
.eh_frame:000000000000BABA                 db  42h ; B
.eh_frame:000000000000BABB                 db  0Eh
.eh_frame:000000000000BABC                 db  18h
.eh_frame:000000000000BABD                 db  42h ; B
.eh_frame:000000000000BABE                 db  0Eh
.eh_frame:000000000000BABF                 db  10h
.eh_frame:000000000000BAC0                 db  42h ; B
.eh_frame:000000000000BAC1                 db  0Eh
.eh_frame:000000000000BAC2                 db    8
.eh_frame:000000000000BAC3                 db  44h ; D
.eh_frame:000000000000BAC4                 db  0Bh
.eh_frame:000000000000BAC5                 db    3
.eh_frame:000000000000BAC6                 db  99h
.eh_frame:000000000000BAC7                 db    5
.eh_frame:000000000000BAC8                 db  0Eh
.eh_frame:000000000000BAC9                 db 0F8h
.eh_frame:000000000000BACA                 db    1
.eh_frame:000000000000BACB                 db  4Dh ; M
.eh_frame:000000000000BACC                 db  0Eh
.eh_frame:000000000000BACD                 db  80h
.eh_frame:000000000000BACE                 db    2
.eh_frame:000000000000BACF                 db  44h ; D
.eh_frame:000000000000BAD0                 db  0Eh
.eh_frame:000000000000BAD1                 db  88h
.eh_frame:000000000000BAD2                 db    2
.eh_frame:000000000000BAD3                 db  47h ; G
.eh_frame:000000000000BAD4                 db  0Eh
.eh_frame:000000000000BAD5                 db  90h
.eh_frame:000000000000BAD6                 db    2
.eh_frame:000000000000BAD7                 db  5Bh ; [
.eh_frame:000000000000BAD8                 db  0Eh
.eh_frame:000000000000BAD9                 db 0F0h
.eh_frame:000000000000BADA                 db    1
.eh_frame:000000000000BADB                 db    0
.eh_frame:000000000000BADC                 db  68h ; h
.eh_frame:000000000000BADD                 db    0
.eh_frame:000000000000BADE                 db    0
.eh_frame:000000000000BADF                 db    0
.eh_frame:000000000000BAE0                 db  18h
.eh_frame:000000000000BAE1                 db    2
.eh_frame:000000000000BAE2                 db    0
.eh_frame:000000000000BAE3                 db    0
.eh_frame:000000000000BAE4                 db 0CCh
.eh_frame:000000000000BAE5                 db  86h
.eh_frame:000000000000BAE6                 db 0FFh
.eh_frame:000000000000BAE7                 db 0FFh
.eh_frame:000000000000BAE8                 db 0ABh
.eh_frame:000000000000BAE9                 db    1
.eh_frame:000000000000BAEA                 db    0
.eh_frame:000000000000BAEB                 db    0
.eh_frame:000000000000BAEC                 db    0
.eh_frame:000000000000BAED                 db  42h ; B
.eh_frame:000000000000BAEE                 db  0Eh
.eh_frame:000000000000BAEF                 db  10h
.eh_frame:000000000000BAF0                 db  8Fh
.eh_frame:000000000000BAF1                 db    2
.eh_frame:000000000000BAF2                 db  42h ; B
.eh_frame:000000000000BAF3                 db  0Eh
.eh_frame:000000000000BAF4                 db  18h
.eh_frame:000000000000BAF5                 db  8Eh
.eh_frame:000000000000BAF6                 db    3
.eh_frame:000000000000BAF7                 db  45h ; E
.eh_frame:000000000000BAF8                 db  0Eh
.eh_frame:000000000000BAF9                 db  20h
.eh_frame:000000000000BAFA                 db  8Dh
.eh_frame:000000000000BAFB                 db    4
.eh_frame:000000000000BAFC                 db  42h ; B
.eh_frame:000000000000BAFD                 db  0Eh
.eh_frame:000000000000BAFE                 db  28h ; (
.eh_frame:000000000000BAFF                 db  8Ch
.eh_frame:000000000000BB00                 db    5
.eh_frame:000000000000BB01                 db  44h ; D
.eh_frame:000000000000BB02                 db  0Eh
.eh_frame:000000000000BB03                 db  30h ; 0
.eh_frame:000000000000BB04                 db  86h
.eh_frame:000000000000BB05                 db    6
.eh_frame:000000000000BB06                 db  41h ; A
.eh_frame:000000000000BB07                 db  0Eh
.eh_frame:000000000000BB08                 db  38h ; 8
.eh_frame:000000000000BB09                 db  83h
.eh_frame:000000000000BB0A                 db    7
.eh_frame:000000000000BB0B                 db  47h ; G
.eh_frame:000000000000BB0C                 db  0Eh
.eh_frame:000000000000BB0D                 db  60h ; `
.eh_frame:000000000000BB0E                 db    2
.eh_frame:000000000000BB0F                 db  99h
.eh_frame:000000000000BB10                 db  0Eh
.eh_frame:000000000000BB11                 db  68h ; h
.eh_frame:000000000000BB12                 db  5Fh ; _
.eh_frame:000000000000BB13                 db  0Eh
.eh_frame:000000000000BB14                 db  70h ; p
.eh_frame:000000000000BB15                 db  46h ; F
.eh_frame:000000000000BB16                 db  0Eh
.eh_frame:000000000000BB17                 db  78h ; x
.eh_frame:000000000000BB18                 db  42h ; B
.eh_frame:000000000000BB19                 db  0Eh
.eh_frame:000000000000BB1A                 db  80h
.eh_frame:000000000000BB1B                 db    1
.eh_frame:000000000000BB1C                 db  59h ; Y
.eh_frame:000000000000BB1D                 db  0Eh
.eh_frame:000000000000BB1E                 db  60h ; `
.eh_frame:000000000000BB1F                 db    2
.eh_frame:000000000000BB20                 db  40h ; @
.eh_frame:000000000000BB21                 db  0Eh
.eh_frame:000000000000BB22                 db  68h ; h
.eh_frame:000000000000BB23                 db  4Bh ; K
.eh_frame:000000000000BB24                 db  0Eh
.eh_frame:000000000000BB25                 db  70h ; p
.eh_frame:000000000000BB26                 db  43h ; C
.eh_frame:000000000000BB27                 db  0Eh
.eh_frame:000000000000BB28                 db  78h ; x
.eh_frame:000000000000BB29                 db  45h ; E
.eh_frame:000000000000BB2A                 db  0Eh
.eh_frame:000000000000BB2B                 db  80h
.eh_frame:000000000000BB2C                 db    1
.eh_frame:000000000000BB2D                 db  5Eh ; ^
.eh_frame:000000000000BB2E                 db  0Eh
.eh_frame:000000000000BB2F                 db  60h ; `
.eh_frame:000000000000BB30                 db  4Ch ; L
.eh_frame:000000000000BB31                 db  0Ah
.eh_frame:000000000000BB32                 db  0Eh
.eh_frame:000000000000BB33                 db  38h ; 8
.eh_frame:000000000000BB34                 db  44h ; D
.eh_frame:000000000000BB35                 db  0Eh
.eh_frame:000000000000BB36                 db  30h ; 0
.eh_frame:000000000000BB37                 db  41h ; A
.eh_frame:000000000000BB38                 db  0Eh
.eh_frame:000000000000BB39                 db  28h ; (
.eh_frame:000000000000BB3A                 db  42h ; B
.eh_frame:000000000000BB3B                 db  0Eh
.eh_frame:000000000000BB3C                 db  20h
.eh_frame:000000000000BB3D                 db  42h ; B
.eh_frame:000000000000BB3E                 db  0Eh
.eh_frame:000000000000BB3F                 db  18h
.eh_frame:000000000000BB40                 db  42h ; B
.eh_frame:000000000000BB41                 db  0Eh
.eh_frame:000000000000BB42                 db  10h
.eh_frame:000000000000BB43                 db  42h ; B
.eh_frame:000000000000BB44                 db  0Eh
.eh_frame:000000000000BB45                 db    8
.eh_frame:000000000000BB46                 db  46h ; F
.eh_frame:000000000000BB47                 db  0Bh
.eh_frame:000000000000BB48                 db  28h ; (
.eh_frame:000000000000BB49                 db    0
.eh_frame:000000000000BB4A                 db    0
.eh_frame:000000000000BB4B                 db    0
.eh_frame:000000000000BB4C                 db  84h
.eh_frame:000000000000BB4D                 db    2
.eh_frame:000000000000BB4E                 db    0
.eh_frame:000000000000BB4F                 db    0
.eh_frame:000000000000BB50                 db  10h
.eh_frame:000000000000BB51                 db  88h
.eh_frame:000000000000BB52                 db 0FFh
.eh_frame:000000000000BB53                 db 0FFh
.eh_frame:000000000000BB54                 db  36h ; 6
.eh_frame:000000000000BB55                 db    0
.eh_frame:000000000000BB56                 db    0
.eh_frame:000000000000BB57                 db    0
.eh_frame:000000000000BB58                 db    0
.eh_frame:000000000000BB59                 db  42h ; B
.eh_frame:000000000000BB5A                 db  0Eh
.eh_frame:000000000000BB5B                 db  10h
.eh_frame:000000000000BB5C                 db  8Ch
.eh_frame:000000000000BB5D                 db    2
.eh_frame:000000000000BB5E                 db  41h ; A
.eh_frame:000000000000BB5F                 db  0Eh
.eh_frame:000000000000BB60                 db  18h
.eh_frame:000000000000BB61                 db  86h
.eh_frame:000000000000BB62                 db    3
.eh_frame:000000000000BB63                 db  41h ; A
.eh_frame:000000000000BB64                 db  0Eh
.eh_frame:000000000000BB65                 db  20h
.eh_frame:000000000000BB66                 db  83h
.eh_frame:000000000000BB67                 db    4
.eh_frame:000000000000BB68                 db  6Eh ; n
.eh_frame:000000000000BB69                 db  0Eh
.eh_frame:000000000000BB6A                 db  18h
.eh_frame:000000000000BB6B                 db  41h ; A
.eh_frame:000000000000BB6C                 db  0Eh
.eh_frame:000000000000BB6D                 db  10h
.eh_frame:000000000000BB6E                 db  42h ; B
.eh_frame:000000000000BB6F                 db  0Eh
.eh_frame:000000000000BB70                 db    8
.eh_frame:000000000000BB71                 db    0
.eh_frame:000000000000BB72                 db    0
.eh_frame:000000000000BB73                 db    0
.eh_frame:000000000000BB74                 db  10h
.eh_frame:000000000000BB75                 db    0
.eh_frame:000000000000BB76                 db    0
.eh_frame:000000000000BB77                 db    0
.eh_frame:000000000000BB78                 db 0B0h
.eh_frame:000000000000BB79                 db    2
.eh_frame:000000000000BB7A                 db    0
.eh_frame:000000000000BB7B                 db    0
.eh_frame:000000000000BB7C                 db  24h ; $
.eh_frame:000000000000BB7D                 db  88h
.eh_frame:000000000000BB7E                 db 0FFh
.eh_frame:000000000000BB7F                 db 0FFh
.eh_frame:000000000000BB80                 db  11h
.eh_frame:000000000000BB81                 db    0
.eh_frame:000000000000BB82                 db    0
.eh_frame:000000000000BB83                 db    0
.eh_frame:000000000000BB84                 db    0
.eh_frame:000000000000BB85                 db    0
.eh_frame:000000000000BB86                 db    0
.eh_frame:000000000000BB87                 db    0
.eh_frame:000000000000BB88                 db  10h
.eh_frame:000000000000BB89                 db    0
.eh_frame:000000000000BB8A                 db    0
.eh_frame:000000000000BB8B                 db    0
.eh_frame:000000000000BB8C                 db 0C4h
.eh_frame:000000000000BB8D                 db    2
.eh_frame:000000000000BB8E                 db    0
.eh_frame:000000000000BB8F                 db    0
.eh_frame:000000000000BB90                 db  30h ; 0
.eh_frame:000000000000BB91                 db  88h
.eh_frame:000000000000BB92                 db 0FFh
.eh_frame:000000000000BB93                 db 0FFh
.eh_frame:000000000000BB94                 db  11h
.eh_frame:000000000000BB95                 db    0
.eh_frame:000000000000BB96                 db    0
.eh_frame:000000000000BB97                 db    0
.eh_frame:000000000000BB98                 db    0
.eh_frame:000000000000BB99                 db    0
.eh_frame:000000000000BB9A                 db    0
.eh_frame:000000000000BB9B                 db    0
.eh_frame:000000000000BB9C                 db  10h
.eh_frame:000000000000BB9D                 db    0
.eh_frame:000000000000BB9E                 db    0
.eh_frame:000000000000BB9F                 db    0
.eh_frame:000000000000BBA0                 db 0D8h
.eh_frame:000000000000BBA1                 db    2
.eh_frame:000000000000BBA2                 db    0
.eh_frame:000000000000BBA3                 db    0
.eh_frame:000000000000BBA4                 db  3Ch ; <
.eh_frame:000000000000BBA5                 db  88h
.eh_frame:000000000000BBA6                 db 0FFh
.eh_frame:000000000000BBA7                 db 0FFh
.eh_frame:000000000000BBA8                 db  35h ; 5
.eh_frame:000000000000BBA9                 db    0
.eh_frame:000000000000BBAA                 db    0
.eh_frame:000000000000BBAB                 db    0
.eh_frame:000000000000BBAC                 db    0
.eh_frame:000000000000BBAD                 db    0
.eh_frame:000000000000BBAE                 db    0
.eh_frame:000000000000BBAF                 db    0
.eh_frame:000000000000BBB0                 db  10h
.eh_frame:000000000000BBB1                 db    0
.eh_frame:000000000000BBB2                 db    0
.eh_frame:000000000000BBB3                 db    0
.eh_frame:000000000000BBB4                 db 0ECh
.eh_frame:000000000000BBB5                 db    2
.eh_frame:000000000000BBB6                 db    0
.eh_frame:000000000000BBB7                 db    0
.eh_frame:000000000000BBB8                 db  68h ; h
.eh_frame:000000000000BBB9                 db  88h
.eh_frame:000000000000BBBA                 db 0FFh
.eh_frame:000000000000BBBB                 db 0FFh
.eh_frame:000000000000BBBC                 db  15h
.eh_frame:000000000000BBBD                 db    0
.eh_frame:000000000000BBBE                 db    0
.eh_frame:000000000000BBBF                 db    0
.eh_frame:000000000000BBC0                 db    0
.eh_frame:000000000000BBC1                 db    0
.eh_frame:000000000000BBC2                 db    0
.eh_frame:000000000000BBC3                 db    0
.eh_frame:000000000000BBC4                 db  10h
.eh_frame:000000000000BBC5                 db    0
.eh_frame:000000000000BBC6                 db    0
.eh_frame:000000000000BBC7                 db    0
.eh_frame:000000000000BBC8                 db    0
.eh_frame:000000000000BBC9                 db    3
.eh_frame:000000000000BBCA                 db    0
.eh_frame:000000000000BBCB                 db    0
.eh_frame:000000000000BBCC                 db  74h ; t
.eh_frame:000000000000BBCD                 db  88h
.eh_frame:000000000000BBCE                 db 0FFh
.eh_frame:000000000000BBCF                 db 0FFh
.eh_frame:000000000000BBD0                 db  30h ; 0
.eh_frame:000000000000BBD1                 db    0
.eh_frame:000000000000BBD2                 db    0
.eh_frame:000000000000BBD3                 db    0
.eh_frame:000000000000BBD4                 db    0
.eh_frame:000000000000BBD5                 db  6Bh ; k
.eh_frame:000000000000BBD6                 db  0Eh
.eh_frame:000000000000BBD7                 db  10h
.eh_frame:000000000000BBD8                 db  50h ; P
.eh_frame:000000000000BBD9                 db    0
.eh_frame:000000000000BBDA                 db    0
.eh_frame:000000000000BBDB                 db    0
.eh_frame:000000000000BBDC                 db  14h
.eh_frame:000000000000BBDD                 db    3
.eh_frame:000000000000BBDE                 db    0
.eh_frame:000000000000BBDF                 db    0
.eh_frame:000000000000BBE0                 db  90h
.eh_frame:000000000000BBE1                 db  88h
.eh_frame:000000000000BBE2                 db 0FFh
.eh_frame:000000000000BBE3                 db 0FFh
.eh_frame:000000000000BBE4                 db  74h ; t
.eh_frame:000000000000BBE5                 db    0
.eh_frame:000000000000BBE6                 db    0
.eh_frame:000000000000BBE7                 db    0
.eh_frame:000000000000BBE8                 db    0
.eh_frame:000000000000BBE9                 db  42h ; B
.eh_frame:000000000000BBEA                 db  0Eh
.eh_frame:000000000000BBEB                 db  10h
.eh_frame:000000000000BBEC                 db  8Fh
.eh_frame:000000000000BBED                 db    2
.eh_frame:000000000000BBEE                 db  42h ; B
.eh_frame:000000000000BBEF                 db  0Eh
.eh_frame:000000000000BBF0                 db  18h
.eh_frame:000000000000BBF1                 db  8Eh
.eh_frame:000000000000BBF2                 db    3
.eh_frame:000000000000BBF3                 db  49h ; I
.eh_frame:000000000000BBF4                 db  0Eh
.eh_frame:000000000000BBF5                 db  20h
.eh_frame:000000000000BBF6                 db  8Dh
.eh_frame:000000000000BBF7                 db    4
.eh_frame:000000000000BBF8                 db  42h ; B
.eh_frame:000000000000BBF9                 db  0Eh
.eh_frame:000000000000BBFA                 db  28h ; (
.eh_frame:000000000000BBFB                 db  8Ch
.eh_frame:000000000000BBFC                 db    5
.eh_frame:000000000000BBFD                 db  44h ; D
.eh_frame:000000000000BBFE                 db  0Eh
.eh_frame:000000000000BBFF                 db  30h ; 0
.eh_frame:000000000000BC00                 db  86h
.eh_frame:000000000000BC01                 db    6
.eh_frame:000000000000BC02                 db  41h ; A
.eh_frame:000000000000BC03                 db  0Eh
.eh_frame:000000000000BC04                 db  38h ; 8
.eh_frame:000000000000BC05                 db  83h
.eh_frame:000000000000BC06                 db    7
.eh_frame:000000000000BC07                 db  4Dh ; M
.eh_frame:000000000000BC08                 db  0Eh
.eh_frame:000000000000BC09                 db  50h ; P
.eh_frame:000000000000BC0A                 db  5Fh ; _
.eh_frame:000000000000BC0B                 db  0Eh
.eh_frame:000000000000BC0C                 db  58h ; X
.eh_frame:000000000000BC0D                 db  47h ; G
.eh_frame:000000000000BC0E                 db  0Eh
.eh_frame:000000000000BC0F                 db  60h ; `
.eh_frame:000000000000BC10                 db  46h ; F
.eh_frame:000000000000BC11                 db  0Eh
.eh_frame:000000000000BC12                 db  68h ; h
.eh_frame:000000000000BC13                 db  44h ; D
.eh_frame:000000000000BC14                 db  0Eh
.eh_frame:000000000000BC15                 db  70h ; p
.eh_frame:000000000000BC16                 db  58h ; X
.eh_frame:000000000000BC17                 db  0Eh
.eh_frame:000000000000BC18                 db  38h ; 8
.eh_frame:000000000000BC19                 db  41h ; A
.eh_frame:000000000000BC1A                 db  0Eh
.eh_frame:000000000000BC1B                 db  30h ; 0
.eh_frame:000000000000BC1C                 db  41h ; A
.eh_frame:000000000000BC1D                 db  0Eh
.eh_frame:000000000000BC1E                 db  28h ; (
.eh_frame:000000000000BC1F                 db  42h ; B
.eh_frame:000000000000BC20                 db  0Eh
.eh_frame:000000000000BC21                 db  20h
.eh_frame:000000000000BC22                 db  42h ; B
.eh_frame:000000000000BC23                 db  0Eh
.eh_frame:000000000000BC24                 db  18h
.eh_frame:000000000000BC25                 db  42h ; B
.eh_frame:000000000000BC26                 db  0Eh
.eh_frame:000000000000BC27                 db  10h
.eh_frame:000000000000BC28                 db  42h ; B
.eh_frame:000000000000BC29                 db  0Eh
.eh_frame:000000000000BC2A                 db    8
.eh_frame:000000000000BC2B                 db    0
.eh_frame:000000000000BC2C                 db  68h ; h
.eh_frame:000000000000BC2D                 db    0
.eh_frame:000000000000BC2E                 db    0
.eh_frame:000000000000BC2F                 db    0
.eh_frame:000000000000BC30                 db  68h ; h
.eh_frame:000000000000BC31                 db    3
.eh_frame:000000000000BC32                 db    0
.eh_frame:000000000000BC33                 db    0
.eh_frame:000000000000BC34                 db 0BCh
.eh_frame:000000000000BC35                 db  88h
.eh_frame:000000000000BC36                 db 0FFh
.eh_frame:000000000000BC37                 db 0FFh
.eh_frame:000000000000BC38                 db 0E3h
.eh_frame:000000000000BC39                 db    0
.eh_frame:000000000000BC3A                 db    0
.eh_frame:000000000000BC3B                 db    0
.eh_frame:000000000000BC3C                 db    0
.eh_frame:000000000000BC3D                 db  42h ; B
.eh_frame:000000000000BC3E                 db  0Eh
.eh_frame:000000000000BC3F                 db  10h
.eh_frame:000000000000BC40                 db  8Fh
.eh_frame:000000000000BC41                 db    2
.eh_frame:000000000000BC42                 db  42h ; B
.eh_frame:000000000000BC43                 db  0Eh
.eh_frame:000000000000BC44                 db  18h
.eh_frame:000000000000BC45                 db  8Eh
.eh_frame:000000000000BC46                 db    3
.eh_frame:000000000000BC47                 db  49h ; I
.eh_frame:000000000000BC48                 db  0Eh
.eh_frame:000000000000BC49                 db  20h
.eh_frame:000000000000BC4A                 db  8Dh
.eh_frame:000000000000BC4B                 db    4
.eh_frame:000000000000BC4C                 db  42h ; B
.eh_frame:000000000000BC4D                 db  0Eh
.eh_frame:000000000000BC4E                 db  28h ; (
.eh_frame:000000000000BC4F                 db  8Ch
.eh_frame:000000000000BC50                 db    5
.eh_frame:000000000000BC51                 db  44h ; D
.eh_frame:000000000000BC52                 db  0Eh
.eh_frame:000000000000BC53                 db  30h ; 0
.eh_frame:000000000000BC54                 db  86h
.eh_frame:000000000000BC55                 db    6
.eh_frame:000000000000BC56                 db  41h ; A
.eh_frame:000000000000BC57                 db  0Eh
.eh_frame:000000000000BC58                 db  38h ; 8
.eh_frame:000000000000BC59                 db  83h
.eh_frame:000000000000BC5A                 db    7
.eh_frame:000000000000BC5B                 db  4Dh ; M
.eh_frame:000000000000BC5C                 db  0Eh
.eh_frame:000000000000BC5D                 db  70h ; p
.eh_frame:000000000000BC5E                 db  65h ; e
.eh_frame:000000000000BC5F                 db  0Eh
.eh_frame:000000000000BC60                 db  78h ; x
.eh_frame:000000000000BC61                 db  4Dh ; M
.eh_frame:000000000000BC62                 db  0Eh
.eh_frame:000000000000BC63                 db  80h
.eh_frame:000000000000BC64                 db    1
.eh_frame:000000000000BC65                 db  46h ; F
.eh_frame:000000000000BC66                 db  0Eh
.eh_frame:000000000000BC67                 db  88h
.eh_frame:000000000000BC68                 db    1
.eh_frame:000000000000BC69                 db  42h ; B
.eh_frame:000000000000BC6A                 db  0Eh
.eh_frame:000000000000BC6B                 db  90h
.eh_frame:000000000000BC6C                 db    1
.eh_frame:000000000000BC6D                 db  5Eh ; ^
.eh_frame:000000000000BC6E                 db  0Eh
.eh_frame:000000000000BC6F                 db  70h ; p
.eh_frame:000000000000BC70                 db  56h ; V
.eh_frame:000000000000BC71                 db  0Eh
.eh_frame:000000000000BC72                 db  78h ; x
.eh_frame:000000000000BC73                 db  43h ; C
.eh_frame:000000000000BC74                 db  0Eh
.eh_frame:000000000000BC75                 db  80h
.eh_frame:000000000000BC76                 db    1
.eh_frame:000000000000BC77                 db  43h ; C
.eh_frame:000000000000BC78                 db  0Eh
.eh_frame:000000000000BC79                 db  88h
.eh_frame:000000000000BC7A                 db    1
.eh_frame:000000000000BC7B                 db  56h ; V
.eh_frame:000000000000BC7C                 db  0Eh
.eh_frame:000000000000BC7D                 db  90h
.eh_frame:000000000000BC7E                 db    1
.eh_frame:000000000000BC7F                 db  52h ; R
.eh_frame:000000000000BC80                 db  0Eh
.eh_frame:000000000000BC81                 db  70h ; p
.eh_frame:000000000000BC82                 db  5Bh ; [
.eh_frame:000000000000BC83                 db  0Eh
.eh_frame:000000000000BC84                 db  38h ; 8
.eh_frame:000000000000BC85                 db  41h ; A
.eh_frame:000000000000BC86                 db  0Eh
.eh_frame:000000000000BC87                 db  30h ; 0
.eh_frame:000000000000BC88                 db  41h ; A
.eh_frame:000000000000BC89                 db  0Eh
.eh_frame:000000000000BC8A                 db  28h ; (
.eh_frame:000000000000BC8B                 db  42h ; B
.eh_frame:000000000000BC8C                 db  0Eh
.eh_frame:000000000000BC8D                 db  20h
.eh_frame:000000000000BC8E                 db  42h ; B
.eh_frame:000000000000BC8F                 db  0Eh
.eh_frame:000000000000BC90                 db  18h
.eh_frame:000000000000BC91                 db  42h ; B
.eh_frame:000000000000BC92                 db  0Eh
.eh_frame:000000000000BC93                 db  10h
.eh_frame:000000000000BC94                 db  42h ; B
.eh_frame:000000000000BC95                 db  0Eh
.eh_frame:000000000000BC96                 db    8
.eh_frame:000000000000BC97                 db    0
.eh_frame:000000000000BC98                 db  10h
.eh_frame:000000000000BC99                 db    0
.eh_frame:000000000000BC9A                 db    0
.eh_frame:000000000000BC9B                 db    0
.eh_frame:000000000000BC9C                 db 0D4h
.eh_frame:000000000000BC9D                 db    3
.eh_frame:000000000000BC9E                 db    0
.eh_frame:000000000000BC9F                 db    0
.eh_frame:000000000000BCA0                 db  40h ; @
.eh_frame:000000000000BCA1                 db  89h
.eh_frame:000000000000BCA2                 db 0FFh
.eh_frame:000000000000BCA3                 db 0FFh
.eh_frame:000000000000BCA4                 db  0Ah
.eh_frame:000000000000BCA5                 db    0
.eh_frame:000000000000BCA6                 db    0
.eh_frame:000000000000BCA7                 db    0
.eh_frame:000000000000BCA8                 db    0
.eh_frame:000000000000BCA9                 db    0
.eh_frame:000000000000BCAA                 db    0
.eh_frame:000000000000BCAB                 db    0
.eh_frame:000000000000BCAC                 db  28h ; (
.eh_frame:000000000000BCAD                 db    0
.eh_frame:000000000000BCAE                 db    0
.eh_frame:000000000000BCAF                 db    0
.eh_frame:000000000000BCB0                 db 0E8h
.eh_frame:000000000000BCB1                 db    3
.eh_frame:000000000000BCB2                 db    0
.eh_frame:000000000000BCB3                 db    0
.eh_frame:000000000000BCB4                 db  3Ch ; <
.eh_frame:000000000000BCB5                 db  89h
.eh_frame:000000000000BCB6                 db 0FFh
.eh_frame:000000000000BCB7                 db 0FFh
.eh_frame:000000000000BCB8                 db  93h
.eh_frame:000000000000BCB9                 db    0
.eh_frame:000000000000BCBA                 db    0
.eh_frame:000000000000BCBB                 db    0
.eh_frame:000000000000BCBC                 db    0
.eh_frame:000000000000BCBD                 db  48h ; H
.eh_frame:000000000000BCBE                 db  0Eh
.eh_frame:000000000000BCBF                 db  10h
.eh_frame:000000000000BCC0                 db  8Ch
.eh_frame:000000000000BCC1                 db    2
.eh_frame:000000000000BCC2                 db  48h ; H
.eh_frame:000000000000BCC3                 db  0Eh
.eh_frame:000000000000BCC4                 db  18h
.eh_frame:000000000000BCC5                 db  86h
.eh_frame:000000000000BCC6                 db    3
.eh_frame:000000000000BCC7                 db  41h ; A
.eh_frame:000000000000BCC8                 db  0Eh
.eh_frame:000000000000BCC9                 db  20h
.eh_frame:000000000000BCCA                 db  83h
.eh_frame:000000000000BCCB                 db    4
.eh_frame:000000000000BCCC                 db    2
.eh_frame:000000000000BCCD                 db  74h ; t
.eh_frame:000000000000BCCE                 db  0Eh
.eh_frame:000000000000BCCF                 db  18h
.eh_frame:000000000000BCD0                 db  4Bh ; K
.eh_frame:000000000000BCD1                 db  0Eh
.eh_frame:000000000000BCD2                 db  10h
.eh_frame:000000000000BCD3                 db  42h ; B
.eh_frame:000000000000BCD4                 db  0Eh
.eh_frame:000000000000BCD5                 db    8
.eh_frame:000000000000BCD6                 db    0
.eh_frame:000000000000BCD7                 db    0
.eh_frame:000000000000BCD8                 db  10h
.eh_frame:000000000000BCD9                 db    0
.eh_frame:000000000000BCDA                 db    0
.eh_frame:000000000000BCDB                 db    0
.eh_frame:000000000000BCDC                 db  14h
.eh_frame:000000000000BCDD                 db    4
.eh_frame:000000000000BCDE                 db    0
.eh_frame:000000000000BCDF                 db    0
.eh_frame:000000000000BCE0                 db 0B0h
.eh_frame:000000000000BCE1                 db  89h
.eh_frame:000000000000BCE2                 db 0FFh
.eh_frame:000000000000BCE3                 db 0FFh
.eh_frame:000000000000BCE4                 db  13h
.eh_frame:000000000000BCE5                 db    0
.eh_frame:000000000000BCE6                 db    0
.eh_frame:000000000000BCE7                 db    0
.eh_frame:000000000000BCE8                 db    0
.eh_frame:000000000000BCE9                 db    0
.eh_frame:000000000000BCEA                 db    0
.eh_frame:000000000000BCEB                 db    0
.eh_frame:000000000000BCEC                 db  10h
.eh_frame:000000000000BCED                 db    0
.eh_frame:000000000000BCEE                 db    0
.eh_frame:000000000000BCEF                 db    0
.eh_frame:000000000000BCF0                 db  28h ; (
.eh_frame:000000000000BCF1                 db    4
.eh_frame:000000000000BCF2                 db    0
.eh_frame:000000000000BCF3                 db    0
.eh_frame:000000000000BCF4                 db 0BCh
.eh_frame:000000000000BCF5                 db  89h
.eh_frame:000000000000BCF6                 db 0FFh
.eh_frame:000000000000BCF7                 db 0FFh
.eh_frame:000000000000BCF8                 db  0Ch
.eh_frame:000000000000BCF9                 db    0
.eh_frame:000000000000BCFA                 db    0
.eh_frame:000000000000BCFB                 db    0
.eh_frame:000000000000BCFC                 db    0
.eh_frame:000000000000BCFD                 db    0
.eh_frame:000000000000BCFE                 db    0
.eh_frame:000000000000BCFF                 db    0
.eh_frame:000000000000BD00                 db  10h
.eh_frame:000000000000BD01                 db    0
.eh_frame:000000000000BD02                 db    0
.eh_frame:000000000000BD03                 db    0
.eh_frame:000000000000BD04                 db  3Ch ; <
.eh_frame:000000000000BD05                 db    4
.eh_frame:000000000000BD06                 db    0
.eh_frame:000000000000BD07                 db    0
.eh_frame:000000000000BD08                 db 0B8h
.eh_frame:000000000000BD09                 db  89h
.eh_frame:000000000000BD0A                 db 0FFh
.eh_frame:000000000000BD0B                 db 0FFh
.eh_frame:000000000000BD0C                 db  18h
.eh_frame:000000000000BD0D                 db    0
.eh_frame:000000000000BD0E                 db    0
.eh_frame:000000000000BD0F                 db    0
.eh_frame:000000000000BD10                 db    0
.eh_frame:000000000000BD11                 db    0
.eh_frame:000000000000BD12                 db    0
.eh_frame:000000000000BD13                 db    0
.eh_frame:000000000000BD14                 db  10h
.eh_frame:000000000000BD15                 db    0
.eh_frame:000000000000BD16                 db    0
.eh_frame:000000000000BD17                 db    0
.eh_frame:000000000000BD18                 db  50h ; P
.eh_frame:000000000000BD19                 db    4
.eh_frame:000000000000BD1A                 db    0
.eh_frame:000000000000BD1B                 db    0
.eh_frame:000000000000BD1C                 db 0C4h
.eh_frame:000000000000BD1D                 db  89h
.eh_frame:000000000000BD1E                 db 0FFh
.eh_frame:000000000000BD1F                 db 0FFh
.eh_frame:000000000000BD20                 db  14h
.eh_frame:000000000000BD21                 db    0
.eh_frame:000000000000BD22                 db    0
.eh_frame:000000000000BD23                 db    0
.eh_frame:000000000000BD24                 db    0
.eh_frame:000000000000BD25                 db    0
.eh_frame:000000000000BD26                 db    0
.eh_frame:000000000000BD27                 db    0
.eh_frame:000000000000BD28                 db  18h
.eh_frame:000000000000BD29                 db    0
.eh_frame:000000000000BD2A                 db    0
.eh_frame:000000000000BD2B                 db    0
.eh_frame:000000000000BD2C                 db  64h ; d
.eh_frame:000000000000BD2D                 db    4
.eh_frame:000000000000BD2E                 db    0
.eh_frame:000000000000BD2F                 db    0
.eh_frame:000000000000BD30                 db 0D0h
.eh_frame:000000000000BD31                 db  89h
.eh_frame:000000000000BD32                 db 0FFh
.eh_frame:000000000000BD33                 db 0FFh
.eh_frame:000000000000BD34                 db  8Eh
.eh_frame:000000000000BD35                 db    0
.eh_frame:000000000000BD36                 db    0
.eh_frame:000000000000BD37                 db    0
.eh_frame:000000000000BD38                 db    0
.eh_frame:000000000000BD39                 db  44h ; D
.eh_frame:000000000000BD3A                 db  0Eh
.eh_frame:000000000000BD3B                 db  50h ; P
.eh_frame:000000000000BD3C                 db    2
.eh_frame:000000000000BD3D                 db  7Fh ; 
.eh_frame:000000000000BD3E                 db  0Ah
.eh_frame:000000000000BD3F                 db  0Eh
.eh_frame:000000000000BD40                 db    8
.eh_frame:000000000000BD41                 db  41h ; A
.eh_frame:000000000000BD42                 db  0Bh
.eh_frame:000000000000BD43                 db    0
.eh_frame:000000000000BD44                 db  18h
.eh_frame:000000000000BD45                 db    0
.eh_frame:000000000000BD46                 db    0
.eh_frame:000000000000BD47                 db    0
.eh_frame:000000000000BD48                 db  80h
.eh_frame:000000000000BD49                 db    4
.eh_frame:000000000000BD4A                 db    0
.eh_frame:000000000000BD4B                 db    0
.eh_frame:000000000000BD4C                 db  44h ; D
.eh_frame:000000000000BD4D                 db  8Ah
.eh_frame:000000000000BD4E                 db 0FFh
.eh_frame:000000000000BD4F                 db 0FFh
.eh_frame:000000000000BD50                 db  8Ah
.eh_frame:000000000000BD51                 db    0
.eh_frame:000000000000BD52                 db    0
.eh_frame:000000000000BD53                 db    0
.eh_frame:000000000000BD54                 db    0
.eh_frame:000000000000BD55                 db  44h ; D
.eh_frame:000000000000BD56                 db  0Eh
.eh_frame:000000000000BD57                 db  50h ; P
.eh_frame:000000000000BD58                 db    2
.eh_frame:000000000000BD59                 db  7Bh ; {
.eh_frame:000000000000BD5A                 db  0Ah
.eh_frame:000000000000BD5B                 db  0Eh
.eh_frame:000000000000BD5C                 db    8
.eh_frame:000000000000BD5D                 db  41h ; A
.eh_frame:000000000000BD5E                 db  0Bh
.eh_frame:000000000000BD5F                 db    0
.eh_frame:000000000000BD60                 db  10h
.eh_frame:000000000000BD61                 db    0
.eh_frame:000000000000BD62                 db    0
.eh_frame:000000000000BD63                 db    0
.eh_frame:000000000000BD64                 db  9Ch
.eh_frame:000000000000BD65                 db    4
.eh_frame:000000000000BD66                 db    0
.eh_frame:000000000000BD67                 db    0
.eh_frame:000000000000BD68                 db 0B8h
.eh_frame:000000000000BD69                 db  8Ah
.eh_frame:000000000000BD6A                 db 0FFh
.eh_frame:000000000000BD6B                 db 0FFh
.eh_frame:000000000000BD6C                 db  0Ch
.eh_frame:000000000000BD6D                 db    0
.eh_frame:000000000000BD6E                 db    0
.eh_frame:000000000000BD6F                 db    0
.eh_frame:000000000000BD70                 db    0
.eh_frame:000000000000BD71                 db    0
.eh_frame:000000000000BD72                 db    0
.eh_frame:000000000000BD73                 db    0
.eh_frame:000000000000BD74                 db  10h
.eh_frame:000000000000BD75                 db    0
.eh_frame:000000000000BD76                 db    0
.eh_frame:000000000000BD77                 db    0
.eh_frame:000000000000BD78                 db 0B0h
.eh_frame:000000000000BD79                 db    4
.eh_frame:000000000000BD7A                 db    0
.eh_frame:000000000000BD7B                 db    0
.eh_frame:000000000000BD7C                 db 0B4h
.eh_frame:000000000000BD7D                 db  8Ah
.eh_frame:000000000000BD7E                 db 0FFh
.eh_frame:000000000000BD7F                 db 0FFh
.eh_frame:000000000000BD80                 db  0Fh
.eh_frame:000000000000BD81                 db    0
.eh_frame:000000000000BD82                 db    0
.eh_frame:000000000000BD83                 db    0
.eh_frame:000000000000BD84                 db    0
.eh_frame:000000000000BD85                 db    0
.eh_frame:000000000000BD86                 db    0
.eh_frame:000000000000BD87                 db    0
.eh_frame:000000000000BD88                 db  18h
.eh_frame:000000000000BD89                 db    0
.eh_frame:000000000000BD8A                 db    0
.eh_frame:000000000000BD8B                 db    0
.eh_frame:000000000000BD8C                 db 0C4h
.eh_frame:000000000000BD8D                 db    4
.eh_frame:000000000000BD8E                 db    0
.eh_frame:000000000000BD8F                 db    0
.eh_frame:000000000000BD90                 db 0B0h
.eh_frame:000000000000BD91                 db  8Ah
.eh_frame:000000000000BD92                 db 0FFh
.eh_frame:000000000000BD93                 db 0FFh
.eh_frame:000000000000BD94                 db  98h
.eh_frame:000000000000BD95                 db    0
.eh_frame:000000000000BD96                 db    0
.eh_frame:000000000000BD97                 db    0
.eh_frame:000000000000BD98                 db    0
.eh_frame:000000000000BD99                 db  44h ; D
.eh_frame:000000000000BD9A                 db  0Eh
.eh_frame:000000000000BD9B                 db  50h ; P
.eh_frame:000000000000BD9C                 db    2
.eh_frame:000000000000BD9D                 db  8Eh
.eh_frame:000000000000BD9E                 db  0Ah
.eh_frame:000000000000BD9F                 db  0Eh
.eh_frame:000000000000BDA0                 db    8
.eh_frame:000000000000BDA1                 db  41h ; A
.eh_frame:000000000000BDA2                 db  0Bh
.eh_frame:000000000000BDA3                 db    0
.eh_frame:000000000000BDA4                 db  10h
.eh_frame:000000000000BDA5                 db    0
.eh_frame:000000000000BDA6                 db    0
.eh_frame:000000000000BDA7                 db    0
.eh_frame:000000000000BDA8                 db 0E0h
.eh_frame:000000000000BDA9                 db    4
.eh_frame:000000000000BDAA                 db    0
.eh_frame:000000000000BDAB                 db    0
.eh_frame:000000000000BDAC                 db  34h ; 4
.eh_frame:000000000000BDAD                 db  8Bh
.eh_frame:000000000000BDAE                 db 0FFh
.eh_frame:000000000000BDAF                 db 0FFh
.eh_frame:000000000000BDB0                 db  10h
.eh_frame:000000000000BDB1                 db    0
.eh_frame:000000000000BDB2                 db    0
.eh_frame:000000000000BDB3                 db    0
.eh_frame:000000000000BDB4                 db    0
.eh_frame:000000000000BDB5                 db    0
.eh_frame:000000000000BDB6                 db    0
.eh_frame:000000000000BDB7                 db    0
.eh_frame:000000000000BDB8                 db  10h
.eh_frame:000000000000BDB9                 db    0
.eh_frame:000000000000BDBA                 db    0
.eh_frame:000000000000BDBB                 db    0
.eh_frame:000000000000BDBC                 db 0F4h
.eh_frame:000000000000BDBD                 db    4
.eh_frame:000000000000BDBE                 db    0
.eh_frame:000000000000BDBF                 db    0
.eh_frame:000000000000BDC0                 db  30h ; 0
.eh_frame:000000000000BDC1                 db  8Bh
.eh_frame:000000000000BDC2                 db 0FFh
.eh_frame:000000000000BDC3                 db 0FFh
.eh_frame:000000000000BDC4                 db  11h
.eh_frame:000000000000BDC5                 db    0
.eh_frame:000000000000BDC6                 db    0
.eh_frame:000000000000BDC7                 db    0
.eh_frame:000000000000BDC8                 db    0
.eh_frame:000000000000BDC9                 db    0
.eh_frame:000000000000BDCA                 db    0
.eh_frame:000000000000BDCB                 db    0
.eh_frame:000000000000BDCC                 db  10h
.eh_frame:000000000000BDCD                 db    0
.eh_frame:000000000000BDCE                 db    0
.eh_frame:000000000000BDCF                 db    0
.eh_frame:000000000000BDD0                 db    8
.eh_frame:000000000000BDD1                 db    5
.eh_frame:000000000000BDD2                 db    0
.eh_frame:000000000000BDD3                 db    0
.eh_frame:000000000000BDD4                 db  3Ch ; <
.eh_frame:000000000000BDD5                 db  8Bh
.eh_frame:000000000000BDD6                 db 0FFh
.eh_frame:000000000000BDD7                 db 0FFh
.eh_frame:000000000000BDD8                 db  0Ah
.eh_frame:000000000000BDD9                 db    0
.eh_frame:000000000000BDDA                 db    0
.eh_frame:000000000000BDDB                 db    0
.eh_frame:000000000000BDDC                 db    0
.eh_frame:000000000000BDDD                 db    0
.eh_frame:000000000000BDDE                 db    0
.eh_frame:000000000000BDDF                 db    0
.eh_frame:000000000000BDE0                 db  18h
.eh_frame:000000000000BDE1                 db    0
.eh_frame:000000000000BDE2                 db    0
.eh_frame:000000000000BDE3                 db    0
.eh_frame:000000000000BDE4                 db  1Ch
.eh_frame:000000000000BDE5                 db    5
.eh_frame:000000000000BDE6                 db    0
.eh_frame:000000000000BDE7                 db    0
.eh_frame:000000000000BDE8                 db  38h ; 8
.eh_frame:000000000000BDE9                 db  8Bh
.eh_frame:000000000000BDEA                 db 0FFh
.eh_frame:000000000000BDEB                 db 0FFh
.eh_frame:000000000000BDEC                 db  8Eh
.eh_frame:000000000000BDED                 db    0
.eh_frame:000000000000BDEE                 db    0
.eh_frame:000000000000BDEF                 db    0
.eh_frame:000000000000BDF0                 db    0
.eh_frame:000000000000BDF1                 db  44h ; D
.eh_frame:000000000000BDF2                 db  0Eh
.eh_frame:000000000000BDF3                 db  50h ; P
.eh_frame:000000000000BDF4                 db    2
.eh_frame:000000000000BDF5                 db  7Fh ; 
.eh_frame:000000000000BDF6                 db  0Ah
.eh_frame:000000000000BDF7                 db  0Eh
.eh_frame:000000000000BDF8                 db    8
.eh_frame:000000000000BDF9                 db  41h ; A
.eh_frame:000000000000BDFA                 db  0Bh
.eh_frame:000000000000BDFB                 db    0
.eh_frame:000000000000BDFC                 db  18h
.eh_frame:000000000000BDFD                 db    0
.eh_frame:000000000000BDFE                 db    0
.eh_frame:000000000000BDFF                 db    0
.eh_frame:000000000000BE00                 db  38h ; 8
.eh_frame:000000000000BE01                 db    5
.eh_frame:000000000000BE02                 db    0
.eh_frame:000000000000BE03                 db    0
.eh_frame:000000000000BE04                 db 0ACh
.eh_frame:000000000000BE05                 db  8Bh
.eh_frame:000000000000BE06                 db 0FFh
.eh_frame:000000000000BE07                 db 0FFh
.eh_frame:000000000000BE08                 db  91h
.eh_frame:000000000000BE09                 db    0
.eh_frame:000000000000BE0A                 db    0
.eh_frame:000000000000BE0B                 db    0
.eh_frame:000000000000BE0C                 db    0
.eh_frame:000000000000BE0D                 db  44h ; D
.eh_frame:000000000000BE0E                 db  0Eh
.eh_frame:000000000000BE0F                 db  50h ; P
.eh_frame:000000000000BE10                 db    2
.eh_frame:000000000000BE11                 db  82h
.eh_frame:000000000000BE12                 db  0Ah
.eh_frame:000000000000BE13                 db  0Eh
.eh_frame:000000000000BE14                 db    8
.eh_frame:000000000000BE15                 db  41h ; A
.eh_frame:000000000000BE16                 db  0Bh
.eh_frame:000000000000BE17                 db    0
.eh_frame:000000000000BE18                 db  10h
.eh_frame:000000000000BE19                 db    0
.eh_frame:000000000000BE1A                 db    0
.eh_frame:000000000000BE1B                 db    0
.eh_frame:000000000000BE1C                 db  54h ; T
.eh_frame:000000000000BE1D                 db    5
.eh_frame:000000000000BE1E                 db    0
.eh_frame:000000000000BE1F                 db    0
.eh_frame:000000000000BE20                 db  30h ; 0
.eh_frame:000000000000BE21                 db  8Ch
.eh_frame:000000000000BE22                 db 0FFh
.eh_frame:000000000000BE23                 db 0FFh
.eh_frame:000000000000BE24                 db  0Ch
.eh_frame:000000000000BE25                 db    0
.eh_frame:000000000000BE26                 db    0
.eh_frame:000000000000BE27                 db    0
.eh_frame:000000000000BE28                 db    0
.eh_frame:000000000000BE29                 db    0
.eh_frame:000000000000BE2A                 db    0
.eh_frame:000000000000BE2B                 db    0
.eh_frame:000000000000BE2C                 db  10h
.eh_frame:000000000000BE2D                 db    0
.eh_frame:000000000000BE2E                 db    0
.eh_frame:000000000000BE2F                 db    0
.eh_frame:000000000000BE30                 db  68h ; h
.eh_frame:000000000000BE31                 db    5
.eh_frame:000000000000BE32                 db    0
.eh_frame:000000000000BE33                 db    0
.eh_frame:000000000000BE34                 db  2Ch ; ,
.eh_frame:000000000000BE35                 db  8Ch
.eh_frame:000000000000BE36                 db 0FFh
.eh_frame:000000000000BE37                 db 0FFh
.eh_frame:000000000000BE38                 db  17h
.eh_frame:000000000000BE39                 db    0
.eh_frame:000000000000BE3A                 db    0
.eh_frame:000000000000BE3B                 db    0
.eh_frame:000000000000BE3C                 db    0
.eh_frame:000000000000BE3D                 db    0
.eh_frame:000000000000BE3E                 db    0
.eh_frame:000000000000BE3F                 db    0
.eh_frame:000000000000BE40                 db  10h
.eh_frame:000000000000BE41                 db    0
.eh_frame:000000000000BE42                 db    0
.eh_frame:000000000000BE43                 db    0
.eh_frame:000000000000BE44                 db  7Ch ; |
.eh_frame:000000000000BE45                 db    5
.eh_frame:000000000000BE46                 db    0
.eh_frame:000000000000BE47                 db    0
.eh_frame:000000000000BE48                 db  38h ; 8
.eh_frame:000000000000BE49                 db  8Ch
.eh_frame:000000000000BE4A                 db 0FFh
.eh_frame:000000000000BE4B                 db 0FFh
.eh_frame:000000000000BE4C                 db  13h
.eh_frame:000000000000BE4D                 db    0
.eh_frame:000000000000BE4E                 db    0
.eh_frame:000000000000BE4F                 db    0
.eh_frame:000000000000BE50                 db    0
.eh_frame:000000000000BE51                 db    0
.eh_frame:000000000000BE52                 db    0
.eh_frame:000000000000BE53                 db    0
.eh_frame:000000000000BE54                 db  10h
.eh_frame:000000000000BE55                 db    0
.eh_frame:000000000000BE56                 db    0
.eh_frame:000000000000BE57                 db    0
.eh_frame:000000000000BE58                 db  90h
.eh_frame:000000000000BE59                 db    5
.eh_frame:000000000000BE5A                 db    0
.eh_frame:000000000000BE5B                 db    0
.eh_frame:000000000000BE5C                 db  44h ; D
.eh_frame:000000000000BE5D                 db  8Ch
.eh_frame:000000000000BE5E                 db 0FFh
.eh_frame:000000000000BE5F                 db 0FFh
.eh_frame:000000000000BE60                 db  0Ch
.eh_frame:000000000000BE61                 db    0
.eh_frame:000000000000BE62                 db    0
.eh_frame:000000000000BE63                 db    0
.eh_frame:000000000000BE64                 db    0
.eh_frame:000000000000BE65                 db    0
.eh_frame:000000000000BE66                 db    0
.eh_frame:000000000000BE67                 db    0
.eh_frame:000000000000BE68                 db  10h
.eh_frame:000000000000BE69                 db    0
.eh_frame:000000000000BE6A                 db    0
.eh_frame:000000000000BE6B                 db    0
.eh_frame:000000000000BE6C                 db 0A4h
.eh_frame:000000000000BE6D                 db    5
.eh_frame:000000000000BE6E                 db    0
.eh_frame:000000000000BE6F                 db    0
.eh_frame:000000000000BE70                 db  40h ; @
.eh_frame:000000000000BE71                 db  8Ch
.eh_frame:000000000000BE72                 db 0FFh
.eh_frame:000000000000BE73                 db 0FFh
.eh_frame:000000000000BE74                 db  14h
.eh_frame:000000000000BE75                 db    0
.eh_frame:000000000000BE76                 db    0
.eh_frame:000000000000BE77                 db    0
.eh_frame:000000000000BE78                 db    0
.eh_frame:000000000000BE79                 db    0
.eh_frame:000000000000BE7A                 db    0
.eh_frame:000000000000BE7B                 db    0
.eh_frame:000000000000BE7C                 db  10h
.eh_frame:000000000000BE7D                 db    0
.eh_frame:000000000000BE7E                 db    0
.eh_frame:000000000000BE7F                 db    0
.eh_frame:000000000000BE80                 db 0B8h
.eh_frame:000000000000BE81                 db    5
.eh_frame:000000000000BE82                 db    0
.eh_frame:000000000000BE83                 db    0
.eh_frame:000000000000BE84                 db  4Ch ; L
.eh_frame:000000000000BE85                 db  8Ch
.eh_frame:000000000000BE86                 db 0FFh
.eh_frame:000000000000BE87                 db 0FFh
.eh_frame:000000000000BE88                 db  13h
.eh_frame:000000000000BE89                 db    0
.eh_frame:000000000000BE8A                 db    0
.eh_frame:000000000000BE8B                 db    0
.eh_frame:000000000000BE8C                 db    0
.eh_frame:000000000000BE8D                 db    0
.eh_frame:000000000000BE8E                 db    0
.eh_frame:000000000000BE8F                 db    0
.eh_frame:000000000000BE90                 db  14h
.eh_frame:000000000000BE91                 db    0
.eh_frame:000000000000BE92                 db    0
.eh_frame:000000000000BE93                 db    0
.eh_frame:000000000000BE94                 db 0CCh
.eh_frame:000000000000BE95                 db    5
.eh_frame:000000000000BE96                 db    0
.eh_frame:000000000000BE97                 db    0
.eh_frame:000000000000BE98                 db  58h ; X
.eh_frame:000000000000BE99                 db  8Ch
.eh_frame:000000000000BE9A                 db 0FFh
.eh_frame:000000000000BE9B                 db 0FFh
.eh_frame:000000000000BE9C                 db  18h
.eh_frame:000000000000BE9D                 db    0
.eh_frame:000000000000BE9E                 db    0
.eh_frame:000000000000BE9F                 db    0
.eh_frame:000000000000BEA0                 db    0
.eh_frame:000000000000BEA1                 db    0
.eh_frame:000000000000BEA2                 db    0
.eh_frame:000000000000BEA3                 db    0
.eh_frame:000000000000BEA4                 db    0
.eh_frame:000000000000BEA5                 db    0
.eh_frame:000000000000BEA6                 db    0
.eh_frame:000000000000BEA7                 db    0
.eh_frame:000000000000BEA8                 db  24h ; $
.eh_frame:000000000000BEA9                 db    0
.eh_frame:000000000000BEAA                 db    0
.eh_frame:000000000000BEAB                 db    0
.eh_frame:000000000000BEAC                 db 0E4h
.eh_frame:000000000000BEAD                 db    5
.eh_frame:000000000000BEAE                 db    0
.eh_frame:000000000000BEAF                 db    0
.eh_frame:000000000000BEB0                 db  60h ; `
.eh_frame:000000000000BEB1                 db  8Ch
.eh_frame:000000000000BEB2                 db 0FFh
.eh_frame:000000000000BEB3                 db 0FFh
.eh_frame:000000000000BEB4                 db  71h ; q
.eh_frame:000000000000BEB5                 db    0
.eh_frame:000000000000BEB6                 db    0
.eh_frame:000000000000BEB7                 db    0
.eh_frame:000000000000BEB8                 db    0
.eh_frame:000000000000BEB9                 db  41h ; A
.eh_frame:000000000000BEBA                 db  0Eh
.eh_frame:000000000000BEBB                 db  10h
.eh_frame:000000000000BEBC                 db  83h
.eh_frame:000000000000BEBD                 db    2
.eh_frame:000000000000BEBE                 db  56h ; V
.eh_frame:000000000000BEBF                 db  0Eh
.eh_frame:000000000000BEC0                 db 0B0h
.eh_frame:000000000000BEC1                 db    1
.eh_frame:000000000000BEC2                 db    2
.eh_frame:000000000000BEC3                 db  4Ch ; L
.eh_frame:000000000000BEC4                 db  0Ah
.eh_frame:000000000000BEC5                 db  0Eh
.eh_frame:000000000000BEC6                 db  10h
.eh_frame:000000000000BEC7                 db  41h ; A
.eh_frame:000000000000BEC8                 db  0Eh
.eh_frame:000000000000BEC9                 db    8
.eh_frame:000000000000BECA                 db  44h ; D
.eh_frame:000000000000BECB                 db  0Bh
.eh_frame:000000000000BECC                 db    0
.eh_frame:000000000000BECD                 db    0
.eh_frame:000000000000BECE                 db    0
.eh_frame:000000000000BECF                 db    0
.eh_frame:000000000000BED0                 db  10h
.eh_frame:000000000000BED1                 db    1
.eh_frame:000000000000BED2                 db    0
.eh_frame:000000000000BED3                 db    0
.eh_frame:000000000000BED4                 db  0Ch
.eh_frame:000000000000BED5                 db    6
.eh_frame:000000000000BED6                 db    0
.eh_frame:000000000000BED7                 db    0
.eh_frame:000000000000BED8                 db 0B8h
.eh_frame:000000000000BED9                 db  8Ch
.eh_frame:000000000000BEDA                 db 0FFh
.eh_frame:000000000000BEDB                 db 0FFh
.eh_frame:000000000000BEDC                 db  17h
.eh_frame:000000000000BEDD                 db    4
.eh_frame:000000000000BEDE                 db    0
.eh_frame:000000000000BEDF                 db    0
.eh_frame:000000000000BEE0                 db    0
.eh_frame:000000000000BEE1                 db  42h ; B
.eh_frame:000000000000BEE2                 db  0Eh
.eh_frame:000000000000BEE3                 db  10h
.eh_frame:000000000000BEE4                 db  8Fh
.eh_frame:000000000000BEE5                 db    2
.eh_frame:000000000000BEE6                 db  42h ; B
.eh_frame:000000000000BEE7                 db  0Eh
.eh_frame:000000000000BEE8                 db  18h
.eh_frame:000000000000BEE9                 db  8Eh
.eh_frame:000000000000BEEA                 db    3
.eh_frame:000000000000BEEB                 db  42h ; B
.eh_frame:000000000000BEEC                 db  0Eh
.eh_frame:000000000000BEED                 db  20h
.eh_frame:000000000000BEEE                 db  8Dh
.eh_frame:000000000000BEEF                 db    4
.eh_frame:000000000000BEF0                 db  42h ; B
.eh_frame:000000000000BEF1                 db  0Eh
.eh_frame:000000000000BEF2                 db  28h ; (
.eh_frame:000000000000BEF3                 db  8Ch
.eh_frame:000000000000BEF4                 db    5
.eh_frame:000000000000BEF5                 db  44h ; D
.eh_frame:000000000000BEF6                 db  0Eh
.eh_frame:000000000000BEF7                 db  30h ; 0
.eh_frame:000000000000BEF8                 db  86h
.eh_frame:000000000000BEF9                 db    6
.eh_frame:000000000000BEFA                 db  41h ; A
.eh_frame:000000000000BEFB                 db  0Eh
.eh_frame:000000000000BEFC                 db  38h ; 8
.eh_frame:000000000000BEFD                 db  83h
.eh_frame:000000000000BEFE                 db    7
.eh_frame:000000000000BEFF                 db  4Ah ; J
.eh_frame:000000000000BF00                 db  0Eh
.eh_frame:000000000000BF01                 db  60h ; `
.eh_frame:000000000000BF02                 db    2
.eh_frame:000000000000BF03                 db 0DDh
.eh_frame:000000000000BF04                 db  0Eh
.eh_frame:000000000000BF05                 db  68h ; h
.eh_frame:000000000000BF06                 db  57h ; W
.eh_frame:000000000000BF07                 db  0Eh
.eh_frame:000000000000BF08                 db  70h ; p
.eh_frame:000000000000BF09                 db  42h ; B
.eh_frame:000000000000BF0A                 db  0Eh
.eh_frame:000000000000BF0B                 db  78h ; x
.eh_frame:000000000000BF0C                 db  42h ; B
.eh_frame:000000000000BF0D                 db  0Eh
.eh_frame:000000000000BF0E                 db  80h
.eh_frame:000000000000BF0F                 db    1
.eh_frame:000000000000BF10                 db  42h ; B
.eh_frame:000000000000BF11                 db  0Eh
.eh_frame:000000000000BF12                 db  88h
.eh_frame:000000000000BF13                 db    1
.eh_frame:000000000000BF14                 db  42h ; B
.eh_frame:000000000000BF15                 db  0Eh
.eh_frame:000000000000BF16                 db  90h
.eh_frame:000000000000BF17                 db    1
.eh_frame:000000000000BF18                 db  53h ; S
.eh_frame:000000000000BF19                 db  0Eh
.eh_frame:000000000000BF1A                 db  60h ; `
.eh_frame:000000000000BF1B                 db  44h ; D
.eh_frame:000000000000BF1C                 db  0Ah
.eh_frame:000000000000BF1D                 db  0Eh
.eh_frame:000000000000BF1E                 db  38h ; 8
.eh_frame:000000000000BF1F                 db  41h ; A
.eh_frame:000000000000BF20                 db  0Eh
.eh_frame:000000000000BF21                 db  30h ; 0
.eh_frame:000000000000BF22                 db  41h ; A
.eh_frame:000000000000BF23                 db  0Eh
.eh_frame:000000000000BF24                 db  28h ; (
.eh_frame:000000000000BF25                 db  42h ; B
.eh_frame:000000000000BF26                 db  0Eh
.eh_frame:000000000000BF27                 db  20h
.eh_frame:000000000000BF28                 db  42h ; B
.eh_frame:000000000000BF29                 db  0Eh
.eh_frame:000000000000BF2A                 db  18h
.eh_frame:000000000000BF2B                 db  42h ; B
.eh_frame:000000000000BF2C                 db  0Eh
.eh_frame:000000000000BF2D                 db  10h
.eh_frame:000000000000BF2E                 db  42h ; B
.eh_frame:000000000000BF2F                 db  0Eh
.eh_frame:000000000000BF30                 db    8
.eh_frame:000000000000BF31                 db  44h ; D
.eh_frame:000000000000BF32                 db  0Bh
.eh_frame:000000000000BF33                 db    2
.eh_frame:000000000000BF34                 db  78h ; x
.eh_frame:000000000000BF35                 db  0Ah
.eh_frame:000000000000BF36                 db  0Eh
.eh_frame:000000000000BF37                 db  68h ; h
.eh_frame:000000000000BF38                 db  48h ; H
.eh_frame:000000000000BF39                 db  0Bh
.eh_frame:000000000000BF3A                 db  5Ah ; Z
.eh_frame:000000000000BF3B                 db  0Ah
.eh_frame:000000000000BF3C                 db  0Eh
.eh_frame:000000000000BF3D                 db  38h ; 8
.eh_frame:000000000000BF3E                 db  47h ; G
.eh_frame:000000000000BF3F                 db  0Eh
.eh_frame:000000000000BF40                 db  30h ; 0
.eh_frame:000000000000BF41                 db  41h ; A
.eh_frame:000000000000BF42                 db  0Eh
.eh_frame:000000000000BF43                 db  28h ; (
.eh_frame:000000000000BF44                 db  42h ; B
.eh_frame:000000000000BF45                 db  0Eh
.eh_frame:000000000000BF46                 db  20h
.eh_frame:000000000000BF47                 db  42h ; B
.eh_frame:000000000000BF48                 db  0Eh
.eh_frame:000000000000BF49                 db  18h
.eh_frame:000000000000BF4A                 db  42h ; B
.eh_frame:000000000000BF4B                 db  0Eh
.eh_frame:000000000000BF4C                 db  10h
.eh_frame:000000000000BF4D                 db  42h ; B
.eh_frame:000000000000BF4E                 db  0Eh
.eh_frame:000000000000BF4F                 db    8
.eh_frame:000000000000BF50                 db  56h ; V
.eh_frame:000000000000BF51                 db  0Bh
.eh_frame:000000000000BF52                 db  5Eh ; ^
.eh_frame:000000000000BF53                 db  0Ah
.eh_frame:000000000000BF54                 db  0Eh
.eh_frame:000000000000BF55                 db  38h ; 8
.eh_frame:000000000000BF56                 db  52h ; R
.eh_frame:000000000000BF57                 db  0Eh
.eh_frame:000000000000BF58                 db  30h ; 0
.eh_frame:000000000000BF59                 db  41h ; A
.eh_frame:000000000000BF5A                 db  0Eh
.eh_frame:000000000000BF5B                 db  28h ; (
.eh_frame:000000000000BF5C                 db  42h ; B
.eh_frame:000000000000BF5D                 db  0Eh
.eh_frame:000000000000BF5E                 db  20h
.eh_frame:000000000000BF5F                 db  42h ; B
.eh_frame:000000000000BF60                 db  0Eh
.eh_frame:000000000000BF61                 db  18h
.eh_frame:000000000000BF62                 db  42h ; B
.eh_frame:000000000000BF63                 db  0Eh
.eh_frame:000000000000BF64                 db  10h
.eh_frame:000000000000BF65                 db  42h ; B
.eh_frame:000000000000BF66                 db  0Eh
.eh_frame:000000000000BF67                 db    8
.eh_frame:000000000000BF68                 db  4Fh ; O
.eh_frame:000000000000BF69                 db  0Bh
.eh_frame:000000000000BF6A                 db  62h ; b
.eh_frame:000000000000BF6B                 db  0Ah
.eh_frame:000000000000BF6C                 db  0Eh
.eh_frame:000000000000BF6D                 db  38h ; 8
.eh_frame:000000000000BF6E                 db  50h ; P
.eh_frame:000000000000BF6F                 db  0Eh
.eh_frame:000000000000BF70                 db  30h ; 0
.eh_frame:000000000000BF71                 db  41h ; A
.eh_frame:000000000000BF72                 db  0Eh
.eh_frame:000000000000BF73                 db  28h ; (
.eh_frame:000000000000BF74                 db  42h ; B
.eh_frame:000000000000BF75                 db  0Eh
.eh_frame:000000000000BF76                 db  20h
.eh_frame:000000000000BF77                 db  42h ; B
.eh_frame:000000000000BF78                 db  0Eh
.eh_frame:000000000000BF79                 db  18h
.eh_frame:000000000000BF7A                 db  42h ; B
.eh_frame:000000000000BF7B                 db  0Eh
.eh_frame:000000000000BF7C                 db  10h
.eh_frame:000000000000BF7D                 db  42h ; B
.eh_frame:000000000000BF7E                 db  0Eh
.eh_frame:000000000000BF7F                 db    8
.eh_frame:000000000000BF80                 db  55h ; U
.eh_frame:000000000000BF81                 db  0Bh
.eh_frame:000000000000BF82                 db  66h ; f
.eh_frame:000000000000BF83                 db  0Eh
.eh_frame:000000000000BF84                 db  68h ; h
.eh_frame:000000000000BF85                 db  42h ; B
.eh_frame:000000000000BF86                 db  0Eh
.eh_frame:000000000000BF87                 db  70h ; p
.eh_frame:000000000000BF88                 db  5Ch ; \
.eh_frame:000000000000BF89                 db  0Eh
.eh_frame:000000000000BF8A                 db  68h ; h
.eh_frame:000000000000BF8B                 db  41h ; A
.eh_frame:000000000000BF8C                 db  0Eh
.eh_frame:000000000000BF8D                 db  60h ; `
.eh_frame:000000000000BF8E                 db  44h ; D
.eh_frame:000000000000BF8F                 db  0Ah
.eh_frame:000000000000BF90                 db  0Eh
.eh_frame:000000000000BF91                 db  38h ; 8
.eh_frame:000000000000BF92                 db  41h ; A
.eh_frame:000000000000BF93                 db  0Eh
.eh_frame:000000000000BF94                 db  30h ; 0
.eh_frame:000000000000BF95                 db  41h ; A
.eh_frame:000000000000BF96                 db  0Eh
.eh_frame:000000000000BF97                 db  28h ; (
.eh_frame:000000000000BF98                 db  42h ; B
.eh_frame:000000000000BF99                 db  0Eh
.eh_frame:000000000000BF9A                 db  20h
.eh_frame:000000000000BF9B                 db  42h ; B
.eh_frame:000000000000BF9C                 db  0Eh
.eh_frame:000000000000BF9D                 db  18h
.eh_frame:000000000000BF9E                 db  42h ; B
.eh_frame:000000000000BF9F                 db  0Eh
.eh_frame:000000000000BFA0                 db  10h
.eh_frame:000000000000BFA1                 db  42h ; B
.eh_frame:000000000000BFA2                 db  0Eh
.eh_frame:000000000000BFA3                 db    8
.eh_frame:000000000000BFA4                 db  45h ; E
.eh_frame:000000000000BFA5                 db  0Bh
.eh_frame:000000000000BFA6                 db  68h ; h
.eh_frame:000000000000BFA7                 db  0Ah
.eh_frame:000000000000BFA8                 db  0Eh
.eh_frame:000000000000BFA9                 db  68h ; h
.eh_frame:000000000000BFAA                 db  48h ; H
.eh_frame:000000000000BFAB                 db  0Bh
.eh_frame:000000000000BFAC                 db  72h ; r
.eh_frame:000000000000BFAD                 db  0Eh
.eh_frame:000000000000BFAE                 db  68h ; h
.eh_frame:000000000000BFAF                 db  45h ; E
.eh_frame:000000000000BFB0                 db  0Eh
.eh_frame:000000000000BFB1                 db  70h ; p
.eh_frame:000000000000BFB2                 db  42h ; B
.eh_frame:000000000000BFB3                 db  0Eh
.eh_frame:000000000000BFB4                 db  78h ; x
.eh_frame:000000000000BFB5                 db  42h ; B
.eh_frame:000000000000BFB6                 db  0Eh
.eh_frame:000000000000BFB7                 db  80h
.eh_frame:000000000000BFB8                 db    1
.eh_frame:000000000000BFB9                 db  5Eh ; ^
.eh_frame:000000000000BFBA                 db  0Eh
.eh_frame:000000000000BFBB                 db  60h ; `
.eh_frame:000000000000BFBC                 db  44h ; D
.eh_frame:000000000000BFBD                 db  0Ah
.eh_frame:000000000000BFBE                 db  0Eh
.eh_frame:000000000000BFBF                 db  38h ; 8
.eh_frame:000000000000BFC0                 db  41h ; A
.eh_frame:000000000000BFC1                 db  0Eh
.eh_frame:000000000000BFC2                 db  30h ; 0
.eh_frame:000000000000BFC3                 db  41h ; A
.eh_frame:000000000000BFC4                 db  0Eh
.eh_frame:000000000000BFC5                 db  28h ; (
.eh_frame:000000000000BFC6                 db  42h ; B
.eh_frame:000000000000BFC7                 db  0Eh
.eh_frame:000000000000BFC8                 db  20h
.eh_frame:000000000000BFC9                 db  42h ; B
.eh_frame:000000000000BFCA                 db  0Eh
.eh_frame:000000000000BFCB                 db  18h
.eh_frame:000000000000BFCC                 db  42h ; B
.eh_frame:000000000000BFCD                 db  0Eh
.eh_frame:000000000000BFCE                 db  10h
.eh_frame:000000000000BFCF                 db  42h ; B
.eh_frame:000000000000BFD0                 db  0Eh
.eh_frame:000000000000BFD1                 db    8
.eh_frame:000000000000BFD2                 db  41h ; A
.eh_frame:000000000000BFD3                 db  0Bh
.eh_frame:000000000000BFD4                 db  79h ; y
.eh_frame:000000000000BFD5                 db  0Ah
.eh_frame:000000000000BFD6                 db  0Eh
.eh_frame:000000000000BFD7                 db  68h ; h
.eh_frame:000000000000BFD8                 db  42h ; B
.eh_frame:000000000000BFD9                 db  0Eh
.eh_frame:000000000000BFDA                 db  70h ; p
.eh_frame:000000000000BFDB                 db  42h ; B
.eh_frame:000000000000BFDC                 db  0Eh
.eh_frame:000000000000BFDD                 db  78h ; x
.eh_frame:000000000000BFDE                 db  42h ; B
.eh_frame:000000000000BFDF                 db  0Eh
.eh_frame:000000000000BFE0                 db  80h
.eh_frame:000000000000BFE1                 db    1
.eh_frame:000000000000BFE2                 db  51h ; Q
.eh_frame:000000000000BFE3                 db  0Bh
.eh_frame:000000000000BFE4                 db  10h
.eh_frame:000000000000BFE5                 db    0
.eh_frame:000000000000BFE6                 db    0
.eh_frame:000000000000BFE7                 db    0
.eh_frame:000000000000BFE8                 db  20h
.eh_frame:000000000000BFE9                 db    7
.eh_frame:000000000000BFEA                 db    0
.eh_frame:000000000000BFEB                 db    0
.eh_frame:000000000000BFEC                 db 0C4h
.eh_frame:000000000000BFED                 db  8Fh
.eh_frame:000000000000BFEE                 db 0FFh
.eh_frame:000000000000BFEF                 db 0FFh
.eh_frame:000000000000BFF0                 db  20h
.eh_frame:000000000000BFF1                 db    0
.eh_frame:000000000000BFF2                 db    0
.eh_frame:000000000000BFF3                 db    0
.eh_frame:000000000000BFF4                 db    0
.eh_frame:000000000000BFF5                 db    0
.eh_frame:000000000000BFF6                 db    0
.eh_frame:000000000000BFF7                 db    0
.eh_frame:000000000000BFF8                 db  18h
.eh_frame:000000000000BFF9                 db    0
.eh_frame:000000000000BFFA                 db    0
.eh_frame:000000000000BFFB                 db    0
.eh_frame:000000000000BFFC                 db  34h ; 4
.eh_frame:000000000000BFFD                 db    7
.eh_frame:000000000000BFFE                 db    0
.eh_frame:000000000000BFFF                 db    0
.eh_frame:000000000000C000                 db 0D0h
.eh_frame:000000000000C001                 db  8Fh
.eh_frame:000000000000C002                 db 0FFh
.eh_frame:000000000000C003                 db 0FFh
.eh_frame:000000000000C004                 db  78h ; x
.eh_frame:000000000000C005                 db    0
.eh_frame:000000000000C006                 db    0
.eh_frame:000000000000C007                 db    0
.eh_frame:000000000000C008                 db    0
.eh_frame:000000000000C009                 db  44h ; D
.eh_frame:000000000000C00A                 db  0Eh
.eh_frame:000000000000C00B                 db  70h ; p
.eh_frame:000000000000C00C                 db    2
.eh_frame:000000000000C00D                 db  60h ; `
.eh_frame:000000000000C00E                 db  0Ah
.eh_frame:000000000000C00F                 db  0Eh
.eh_frame:000000000000C010                 db    8
.eh_frame:000000000000C011                 db  41h ; A
.eh_frame:000000000000C012                 db  0Bh
.eh_frame:000000000000C013                 db    0
.eh_frame:000000000000C014                 db  28h ; (
.eh_frame:000000000000C015                 db    0
.eh_frame:000000000000C016                 db    0
.eh_frame:000000000000C017                 db    0
.eh_frame:000000000000C018                 db  50h ; P
.eh_frame:000000000000C019                 db    7
.eh_frame:000000000000C01A                 db    0
.eh_frame:000000000000C01B                 db    0
.eh_frame:000000000000C01C                 db  34h ; 4
.eh_frame:000000000000C01D                 db  90h
.eh_frame:000000000000C01E                 db 0FFh
.eh_frame:000000000000C01F                 db 0FFh
.eh_frame:000000000000C020                 db 0D5h
.eh_frame:000000000000C021                 db    0
.eh_frame:000000000000C022                 db    0
.eh_frame:000000000000C023                 db    0
.eh_frame:000000000000C024                 db    0
.eh_frame:000000000000C025                 db  41h ; A
.eh_frame:000000000000C026                 db  0Eh
.eh_frame:000000000000C027                 db  10h
.eh_frame:000000000000C028                 db  86h
.eh_frame:000000000000C029                 db    2
.eh_frame:000000000000C02A                 db  41h ; A
.eh_frame:000000000000C02B                 db  0Eh
.eh_frame:000000000000C02C                 db  18h
.eh_frame:000000000000C02D                 db  83h
.eh_frame:000000000000C02E                 db    3
.eh_frame:000000000000C02F                 db  50h ; P
.eh_frame:000000000000C030                 db  0Eh
.eh_frame:000000000000C031                 db 0D0h
.eh_frame:000000000000C032                 db    1
.eh_frame:000000000000C033                 db    2
.eh_frame:000000000000C034                 db 0ABh
.eh_frame:000000000000C035                 db  0Ah
.eh_frame:000000000000C036                 db  0Eh
.eh_frame:000000000000C037                 db  18h
.eh_frame:000000000000C038                 db  41h ; A
.eh_frame:000000000000C039                 db  0Eh
.eh_frame:000000000000C03A                 db  10h
.eh_frame:000000000000C03B                 db  41h ; A
.eh_frame:000000000000C03C                 db  0Eh
.eh_frame:000000000000C03D                 db    8
.eh_frame:000000000000C03E                 db  41h ; A
.eh_frame:000000000000C03F                 db  0Bh
.eh_frame:000000000000C040                 db  1Ch
.eh_frame:000000000000C041                 db    0
.eh_frame:000000000000C042                 db    0
.eh_frame:000000000000C043                 db    0
.eh_frame:000000000000C044                 db  7Ch ; |
.eh_frame:000000000000C045                 db    7
.eh_frame:000000000000C046                 db    0
.eh_frame:000000000000C047                 db    0
.eh_frame:000000000000C048                 db 0E8h
.eh_frame:000000000000C049                 db  90h
.eh_frame:000000000000C04A                 db 0FFh
.eh_frame:000000000000C04B                 db 0FFh
.eh_frame:000000000000C04C                 db  80h
.eh_frame:000000000000C04D                 db    0
.eh_frame:000000000000C04E                 db    0
.eh_frame:000000000000C04F                 db    0
.eh_frame:000000000000C050                 db    0
.eh_frame:000000000000C051                 db  41h ; A
.eh_frame:000000000000C052                 db  0Eh
.eh_frame:000000000000C053                 db  10h
.eh_frame:000000000000C054                 db  83h
.eh_frame:000000000000C055                 db    2
.eh_frame:000000000000C056                 db    2
.eh_frame:000000000000C057                 db  7Ah ; z
.eh_frame:000000000000C058                 db  0Eh
.eh_frame:000000000000C059                 db    8
.eh_frame:000000000000C05A                 db    0
.eh_frame:000000000000C05B                 db    0
.eh_frame:000000000000C05C                 db    0
.eh_frame:000000000000C05D                 db    0
.eh_frame:000000000000C05E                 db    0
.eh_frame:000000000000C05F                 db    0
.eh_frame:000000000000C060                 db  18h
.eh_frame:000000000000C061                 db    0
.eh_frame:000000000000C062                 db    0
.eh_frame:000000000000C063                 db    0
.eh_frame:000000000000C064                 db  9Ch
.eh_frame:000000000000C065                 db    7
.eh_frame:000000000000C066                 db    0
.eh_frame:000000000000C067                 db    0
.eh_frame:000000000000C068                 db  48h ; H
.eh_frame:000000000000C069                 db  91h
.eh_frame:000000000000C06A                 db 0FFh
.eh_frame:000000000000C06B                 db 0FFh
.eh_frame:000000000000C06C                 db  1Ah
.eh_frame:000000000000C06D                 db    0
.eh_frame:000000000000C06E                 db    0
.eh_frame:000000000000C06F                 db    0
.eh_frame:000000000000C070                 db    0
.eh_frame:000000000000C071                 db  41h ; A
.eh_frame:000000000000C072                 db  0Eh
.eh_frame:000000000000C073                 db  10h
.eh_frame:000000000000C074                 db  83h
.eh_frame:000000000000C075                 db    2
.eh_frame:000000000000C076                 db  53h ; S
.eh_frame:000000000000C077                 db  0Ah
.eh_frame:000000000000C078                 db  0Eh
.eh_frame:000000000000C079                 db    8
.eh_frame:000000000000C07A                 db  41h ; A
.eh_frame:000000000000C07B                 db  0Bh
.eh_frame:000000000000C07C                 db  10h
.eh_frame:000000000000C07D                 db    0
.eh_frame:000000000000C07E                 db    0
.eh_frame:000000000000C07F                 db    0
.eh_frame:000000000000C080                 db 0B8h
.eh_frame:000000000000C081                 db    7
.eh_frame:000000000000C082                 db    0
.eh_frame:000000000000C083                 db    0
.eh_frame:000000000000C084                 db  4Ch ; L
.eh_frame:000000000000C085                 db  91h
.eh_frame:000000000000C086                 db 0FFh
.eh_frame:000000000000C087                 db 0FFh
.eh_frame:000000000000C088                 db  24h ; $
.eh_frame:000000000000C089                 db    0
.eh_frame:000000000000C08A                 db    0
.eh_frame:000000000000C08B                 db    0
.eh_frame:000000000000C08C                 db    0
.eh_frame:000000000000C08D                 db  5Fh ; _
.eh_frame:000000000000C08E                 db  0Eh
.eh_frame:000000000000C08F                 db  10h
.eh_frame:000000000000C090                 db  10h
.eh_frame:000000000000C091                 db    0
.eh_frame:000000000000C092                 db    0
.eh_frame:000000000000C093                 db    0
.eh_frame:000000000000C094                 db 0CCh
.eh_frame:000000000000C095                 db    7
.eh_frame:000000000000C096                 db    0
.eh_frame:000000000000C097                 db    0
.eh_frame:000000000000C098                 db  68h ; h
.eh_frame:000000000000C099                 db  91h
.eh_frame:000000000000C09A                 db 0FFh
.eh_frame:000000000000C09B                 db 0FFh
.eh_frame:000000000000C09C                 db    2
.eh_frame:000000000000C09D                 db    0
.eh_frame:000000000000C09E                 db    0
.eh_frame:000000000000C09F                 db    0
.eh_frame:000000000000C0A0                 db    0
.eh_frame:000000000000C0A1                 db    0
.eh_frame:000000000000C0A2                 db    0
.eh_frame:000000000000C0A3                 db    0
.eh_frame:000000000000C0A4                 db  20h
.eh_frame:000000000000C0A5                 db    0
.eh_frame:000000000000C0A6                 db    0
.eh_frame:000000000000C0A7                 db    0
.eh_frame:000000000000C0A8                 db 0E0h
.eh_frame:000000000000C0A9                 db    7
.eh_frame:000000000000C0AA                 db    0
.eh_frame:000000000000C0AB                 db    0
.eh_frame:000000000000C0AC                 db  64h ; d
.eh_frame:000000000000C0AD                 db  91h
.eh_frame:000000000000C0AE                 db 0FFh
.eh_frame:000000000000C0AF                 db 0FFh
.eh_frame:000000000000C0B0                 db  36h ; 6
.eh_frame:000000000000C0B1                 db    0
.eh_frame:000000000000C0B2                 db    0
.eh_frame:000000000000C0B3                 db    0
.eh_frame:000000000000C0B4                 db    0
.eh_frame:000000000000C0B5                 db  44h ; D
.eh_frame:000000000000C0B6                 db  0Eh
.eh_frame:000000000000C0B7                 db  10h
.eh_frame:000000000000C0B8                 db  83h
.eh_frame:000000000000C0B9                 db    2
.eh_frame:000000000000C0BA                 db  5Dh ; ]
.eh_frame:000000000000C0BB                 db  0Ah
.eh_frame:000000000000C0BC                 db  0Eh
.eh_frame:000000000000C0BD                 db    8
.eh_frame:000000000000C0BE                 db  47h ; G
.eh_frame:000000000000C0BF                 db  0Bh
.eh_frame:000000000000C0C0                 db  48h ; H
.eh_frame:000000000000C0C1                 db  0Ah
.eh_frame:000000000000C0C2                 db  0Eh
.eh_frame:000000000000C0C3                 db    8
.eh_frame:000000000000C0C4                 db  41h ; A
.eh_frame:000000000000C0C5                 db  0Bh
.eh_frame:000000000000C0C6                 db    0
.eh_frame:000000000000C0C7                 db    0
.eh_frame:000000000000C0C8                 db  10h
.eh_frame:000000000000C0C9                 db    0
.eh_frame:000000000000C0CA                 db    0
.eh_frame:000000000000C0CB                 db    0
.eh_frame:000000000000C0CC                 db    4
.eh_frame:000000000000C0CD                 db    8
.eh_frame:000000000000C0CE                 db    0
.eh_frame:000000000000C0CF                 db    0
.eh_frame:000000000000C0D0                 db  80h
.eh_frame:000000000000C0D1                 db  91h
.eh_frame:000000000000C0D2                 db 0FFh
.eh_frame:000000000000C0D3                 db 0FFh
.eh_frame:000000000000C0D4                 db  24h ; $
.eh_frame:000000000000C0D5                 db    0
.eh_frame:000000000000C0D6                 db    0
.eh_frame:000000000000C0D7                 db    0
.eh_frame:000000000000C0D8                 db    0
.eh_frame:000000000000C0D9                 db  5Fh ; _
.eh_frame:000000000000C0DA                 db  0Eh
.eh_frame:000000000000C0DB                 db  10h
.eh_frame:000000000000C0DC                 db  14h
.eh_frame:000000000000C0DD                 db    0
.eh_frame:000000000000C0DE                 db    0
.eh_frame:000000000000C0DF                 db    0
.eh_frame:000000000000C0E0                 db  18h
.eh_frame:000000000000C0E1                 db    8
.eh_frame:000000000000C0E2                 db    0
.eh_frame:000000000000C0E3                 db    0
.eh_frame:000000000000C0E4                 db  9Ch
.eh_frame:000000000000C0E5                 db  91h
.eh_frame:000000000000C0E6                 db 0FFh
.eh_frame:000000000000C0E7                 db 0FFh
.eh_frame:000000000000C0E8                 db  82h
.eh_frame:000000000000C0E9                 db    0
.eh_frame:000000000000C0EA                 db    0
.eh_frame:000000000000C0EB                 db    0
.eh_frame:000000000000C0EC                 db    0
.eh_frame:000000000000C0ED                 db    2
.eh_frame:000000000000C0EE                 db  5Fh ; _
.eh_frame:000000000000C0EF                 db  0Eh
.eh_frame:000000000000C0F0                 db  10h
.eh_frame:000000000000C0F1                 db  49h ; I
.eh_frame:000000000000C0F2                 db  0Eh
.eh_frame:000000000000C0F3                 db    8
.eh_frame:000000000000C0F4                 db  14h
.eh_frame:000000000000C0F5                 db    0
.eh_frame:000000000000C0F6                 db    0
.eh_frame:000000000000C0F7                 db    0
.eh_frame:000000000000C0F8                 db  30h ; 0
.eh_frame:000000000000C0F9                 db    8
.eh_frame:000000000000C0FA                 db    0
.eh_frame:000000000000C0FB                 db    0
.eh_frame:000000000000C0FC                 db  14h
.eh_frame:000000000000C0FD                 db  92h
.eh_frame:000000000000C0FE                 db 0FFh
.eh_frame:000000000000C0FF                 db 0FFh
.eh_frame:000000000000C100                 db  4Ah ; J
.eh_frame:000000000000C101                 db    0
.eh_frame:000000000000C102                 db    0
.eh_frame:000000000000C103                 db    0
.eh_frame:000000000000C104                 db    0
.eh_frame:000000000000C105                 db    2
.eh_frame:000000000000C106                 db  45h ; E
.eh_frame:000000000000C107                 db  0Eh
.eh_frame:000000000000C108                 db  10h
.eh_frame:000000000000C109                 db    0
.eh_frame:000000000000C10A                 db    0
.eh_frame:000000000000C10B                 db    0
.eh_frame:000000000000C10C                 db  18h
.eh_frame:000000000000C10D                 db    0
.eh_frame:000000000000C10E                 db    0
.eh_frame:000000000000C10F                 db    0
.eh_frame:000000000000C110                 db  48h ; H
.eh_frame:000000000000C111                 db    8
.eh_frame:000000000000C112                 db    0
.eh_frame:000000000000C113                 db    0
.eh_frame:000000000000C114                 db  4Ch ; L
.eh_frame:000000000000C115                 db  92h
.eh_frame:000000000000C116                 db 0FFh
.eh_frame:000000000000C117                 db 0FFh
.eh_frame:000000000000C118                 db  17h
.eh_frame:000000000000C119                 db    0
.eh_frame:000000000000C11A                 db    0
.eh_frame:000000000000C11B                 db    0
.eh_frame:000000000000C11C                 db    0
.eh_frame:000000000000C11D                 db  41h ; A
.eh_frame:000000000000C11E                 db  0Eh
.eh_frame:000000000000C11F                 db  10h
.eh_frame:000000000000C120                 db  83h
.eh_frame:000000000000C121                 db    2
.eh_frame:000000000000C122                 db  51h ; Q
.eh_frame:000000000000C123                 db  0Eh
.eh_frame:000000000000C124                 db    8
.eh_frame:000000000000C125                 db    0
.eh_frame:000000000000C126                 db    0
.eh_frame:000000000000C127                 db    0
.eh_frame:000000000000C128                 db  18h
.eh_frame:000000000000C129                 db    0
.eh_frame:000000000000C12A                 db    0
.eh_frame:000000000000C12B                 db    0
.eh_frame:000000000000C12C                 db  64h ; d
.eh_frame:000000000000C12D                 db    8
.eh_frame:000000000000C12E                 db    0
.eh_frame:000000000000C12F                 db    0
.eh_frame:000000000000C130                 db  50h ; P
.eh_frame:000000000000C131                 db  92h
.eh_frame:000000000000C132                 db 0FFh
.eh_frame:000000000000C133                 db 0FFh
.eh_frame:000000000000C134                 db  2Eh ; .
.eh_frame:000000000000C135                 db    0
.eh_frame:000000000000C136                 db    0
.eh_frame:000000000000C137                 db    0
.eh_frame:000000000000C138                 db    0
.eh_frame:000000000000C139                 db  47h ; G
.eh_frame:000000000000C13A                 db  0Eh
.eh_frame:000000000000C13B                 db  10h
.eh_frame:000000000000C13C                 db  61h ; a
.eh_frame:000000000000C13D                 db  0Ah
.eh_frame:000000000000C13E                 db  0Eh
.eh_frame:000000000000C13F                 db    8
.eh_frame:000000000000C140                 db  41h ; A
.eh_frame:000000000000C141                 db  0Bh
.eh_frame:000000000000C142                 db    0
.eh_frame:000000000000C143                 db    0
.eh_frame:000000000000C144                 db  24h ; $
.eh_frame:000000000000C145                 db    0
.eh_frame:000000000000C146                 db    0
.eh_frame:000000000000C147                 db    0
.eh_frame:000000000000C148                 db  80h
.eh_frame:000000000000C149                 db    8
.eh_frame:000000000000C14A                 db    0
.eh_frame:000000000000C14B                 db    0
.eh_frame:000000000000C14C                 db  64h ; d
.eh_frame:000000000000C14D                 db  92h
.eh_frame:000000000000C14E                 db 0FFh
.eh_frame:000000000000C14F                 db 0FFh
.eh_frame:000000000000C150                 db  28h ; (
.eh_frame:000000000000C151                 db    0
.eh_frame:000000000000C152                 db    0
.eh_frame:000000000000C153                 db    0
.eh_frame:000000000000C154                 db    0
.eh_frame:000000000000C155                 db  41h ; A
.eh_frame:000000000000C156                 db  0Eh
.eh_frame:000000000000C157                 db  10h
.eh_frame:000000000000C158                 db  86h
.eh_frame:000000000000C159                 db    2
.eh_frame:000000000000C15A                 db  41h ; A
.eh_frame:000000000000C15B                 db  0Eh
.eh_frame:000000000000C15C                 db  18h
.eh_frame:000000000000C15D                 db  83h
.eh_frame:000000000000C15E                 db    3
.eh_frame:000000000000C15F                 db  4Dh ; M
.eh_frame:000000000000C160                 db  0Eh
.eh_frame:000000000000C161                 db  20h
.eh_frame:000000000000C162                 db  49h ; I
.eh_frame:000000000000C163                 db  0Eh
.eh_frame:000000000000C164                 db  18h
.eh_frame:000000000000C165                 db  47h ; G
.eh_frame:000000000000C166                 db  0Eh
.eh_frame:000000000000C167                 db  10h
.eh_frame:000000000000C168                 db  41h ; A
.eh_frame:000000000000C169                 db  0Eh
.eh_frame:000000000000C16A                 db    8
.eh_frame:000000000000C16B                 db    0
.eh_frame:000000000000C16C                 db  18h
.eh_frame:000000000000C16D                 db    0
.eh_frame:000000000000C16E                 db    0
.eh_frame:000000000000C16F                 db    0
.eh_frame:000000000000C170                 db 0A8h
.eh_frame:000000000000C171                 db    8
.eh_frame:000000000000C172                 db    0
.eh_frame:000000000000C173                 db    0
.eh_frame:000000000000C174                 db  6Ch ; l
.eh_frame:000000000000C175                 db  92h
.eh_frame:000000000000C176                 db 0FFh
.eh_frame:000000000000C177                 db 0FFh
.eh_frame:000000000000C178                 db  13h
.eh_frame:000000000000C179                 db    0
.eh_frame:000000000000C17A                 db    0
.eh_frame:000000000000C17B                 db    0
.eh_frame:000000000000C17C                 db    0
.eh_frame:000000000000C17D                 db  41h ; A
.eh_frame:000000000000C17E                 db  0Eh
.eh_frame:000000000000C17F                 db  10h
.eh_frame:000000000000C180                 db  83h
.eh_frame:000000000000C181                 db    2
.eh_frame:000000000000C182                 db  50h ; P
.eh_frame:000000000000C183                 db  0Eh
.eh_frame:000000000000C184                 db    8
.eh_frame:000000000000C185                 db    0
.eh_frame:000000000000C186                 db    0
.eh_frame:000000000000C187                 db    0
.eh_frame:000000000000C188                 db  14h
.eh_frame:000000000000C189                 db    0
.eh_frame:000000000000C18A                 db    0
.eh_frame:000000000000C18B                 db    0
.eh_frame:000000000000C18C                 db 0C4h
.eh_frame:000000000000C18D                 db    8
.eh_frame:000000000000C18E                 db    0
.eh_frame:000000000000C18F                 db    0
.eh_frame:000000000000C190                 db  70h ; p
.eh_frame:000000000000C191                 db  92h
.eh_frame:000000000000C192                 db 0FFh
.eh_frame:000000000000C193                 db 0FFh
.eh_frame:000000000000C194                 db  35h ; 5
.eh_frame:000000000000C195                 db    0
.eh_frame:000000000000C196                 db    0
.eh_frame:000000000000C197                 db    0
.eh_frame:000000000000C198                 db    0
.eh_frame:000000000000C199                 db  4Bh ; K
.eh_frame:000000000000C19A                 db  0Eh
.eh_frame:000000000000C19B                 db  10h
.eh_frame:000000000000C19C                 db    0
.eh_frame:000000000000C19D                 db    0
.eh_frame:000000000000C19E                 db    0
.eh_frame:000000000000C19F                 db    0
.eh_frame:000000000000C1A0                 db  18h
.eh_frame:000000000000C1A1                 db    0
.eh_frame:000000000000C1A2                 db    0
.eh_frame:000000000000C1A3                 db    0
.eh_frame:000000000000C1A4                 db 0DCh
.eh_frame:000000000000C1A5                 db    8
.eh_frame:000000000000C1A6                 db    0
.eh_frame:000000000000C1A7                 db    0
.eh_frame:000000000000C1A8                 db  98h
.eh_frame:000000000000C1A9                 db  92h
.eh_frame:000000000000C1AA                 db 0FFh
.eh_frame:000000000000C1AB                 db 0FFh
.eh_frame:000000000000C1AC                 db  4Fh ; O
.eh_frame:000000000000C1AD                 db    0
.eh_frame:000000000000C1AE                 db    0
.eh_frame:000000000000C1AF                 db    0
.eh_frame:000000000000C1B0                 db    0
.eh_frame:000000000000C1B1                 db  44h ; D
.eh_frame:000000000000C1B2                 db  0Eh
.eh_frame:000000000000C1B3                 db  10h
.eh_frame:000000000000C1B4                 db  54h ; T
.eh_frame:000000000000C1B5                 db  0Ah
.eh_frame:000000000000C1B6                 db  0Eh
.eh_frame:000000000000C1B7                 db    8
.eh_frame:000000000000C1B8                 db  48h ; H
.eh_frame:000000000000C1B9                 db  0Bh
.eh_frame:000000000000C1BA                 db    0
.eh_frame:000000000000C1BB                 db    0
.eh_frame:000000000000C1BC                 db  10h
.eh_frame:000000000000C1BD                 db    0
.eh_frame:000000000000C1BE                 db    0
.eh_frame:000000000000C1BF                 db    0
.eh_frame:000000000000C1C0                 db 0F8h
.eh_frame:000000000000C1C1                 db    8
.eh_frame:000000000000C1C2                 db    0
.eh_frame:000000000000C1C3                 db    0
.eh_frame:000000000000C1C4                 db 0CCh
.eh_frame:000000000000C1C5                 db  92h
.eh_frame:000000000000C1C6                 db 0FFh
.eh_frame:000000000000C1C7                 db 0FFh
.eh_frame:000000000000C1C8                 db  29h ; )
.eh_frame:000000000000C1C9                 db    0
.eh_frame:000000000000C1CA                 db    0
.eh_frame:000000000000C1CB                 db    0
.eh_frame:000000000000C1CC                 db    0
.eh_frame:000000000000C1CD                 db    0
.eh_frame:000000000000C1CE                 db    0
.eh_frame:000000000000C1CF                 db    0
.eh_frame:000000000000C1D0                 db  10h
.eh_frame:000000000000C1D1                 db    0
.eh_frame:000000000000C1D2                 db    0
.eh_frame:000000000000C1D3                 db    0
.eh_frame:000000000000C1D4                 db  0Ch
.eh_frame:000000000000C1D5                 db    9
.eh_frame:000000000000C1D6                 db    0
.eh_frame:000000000000C1D7                 db    0
.eh_frame:000000000000C1D8                 db 0E8h
.eh_frame:000000000000C1D9                 db  92h
.eh_frame:000000000000C1DA                 db 0FFh
.eh_frame:000000000000C1DB                 db 0FFh
.eh_frame:000000000000C1DC                 db  1Ah
.eh_frame:000000000000C1DD                 db    0
.eh_frame:000000000000C1DE                 db    0
.eh_frame:000000000000C1DF                 db    0
.eh_frame:000000000000C1E0                 db    0
.eh_frame:000000000000C1E1                 db    0
.eh_frame:000000000000C1E2                 db    0
.eh_frame:000000000000C1E3                 db    0
.eh_frame:000000000000C1E4                 db  10h
.eh_frame:000000000000C1E5                 db    0
.eh_frame:000000000000C1E6                 db    0
.eh_frame:000000000000C1E7                 db    0
.eh_frame:000000000000C1E8                 db  20h
.eh_frame:000000000000C1E9                 db    9
.eh_frame:000000000000C1EA                 db    0
.eh_frame:000000000000C1EB                 db    0
.eh_frame:000000000000C1EC                 db 0F4h
.eh_frame:000000000000C1ED                 db  92h
.eh_frame:000000000000C1EE                 db 0FFh
.eh_frame:000000000000C1EF                 db 0FFh
.eh_frame:000000000000C1F0                 db  0Dh
.eh_frame:000000000000C1F1                 db    0
.eh_frame:000000000000C1F2                 db    0
.eh_frame:000000000000C1F3                 db    0
.eh_frame:000000000000C1F4                 db    0
.eh_frame:000000000000C1F5                 db    0
.eh_frame:000000000000C1F6                 db    0
.eh_frame:000000000000C1F7                 db    0
.eh_frame:000000000000C1F8                 db  10h
.eh_frame:000000000000C1F9                 db    0
.eh_frame:000000000000C1FA                 db    0
.eh_frame:000000000000C1FB                 db    0
.eh_frame:000000000000C1FC                 db  34h ; 4
.eh_frame:000000000000C1FD                 db    9
.eh_frame:000000000000C1FE                 db    0
.eh_frame:000000000000C1FF                 db    0
.eh_frame:000000000000C200                 db 0F0h
.eh_frame:000000000000C201                 db  92h
.eh_frame:000000000000C202                 db 0FFh
.eh_frame:000000000000C203                 db 0FFh
.eh_frame:000000000000C204                 db  0Ch
.eh_frame:000000000000C205                 db    0
.eh_frame:000000000000C206                 db    0
.eh_frame:000000000000C207                 db    0
.eh_frame:000000000000C208                 db    0
.eh_frame:000000000000C209                 db    0
.eh_frame:000000000000C20A                 db    0
.eh_frame:000000000000C20B                 db    0
.eh_frame:000000000000C20C                 db  10h
.eh_frame:000000000000C20D                 db    0
.eh_frame:000000000000C20E                 db    0
.eh_frame:000000000000C20F                 db    0
.eh_frame:000000000000C210                 db  48h ; H
.eh_frame:000000000000C211                 db    9
.eh_frame:000000000000C212                 db    0
.eh_frame:000000000000C213                 db    0
.eh_frame:000000000000C214                 db 0ECh
.eh_frame:000000000000C215                 db  92h
.eh_frame:000000000000C216                 db 0FFh
.eh_frame:000000000000C217                 db 0FFh
.eh_frame:000000000000C218                 db  0Ah
.eh_frame:000000000000C219                 db    0
.eh_frame:000000000000C21A                 db    0
.eh_frame:000000000000C21B                 db    0
.eh_frame:000000000000C21C                 db    0
.eh_frame:000000000000C21D                 db    0
.eh_frame:000000000000C21E                 db    0
.eh_frame:000000000000C21F                 db    0
.eh_frame:000000000000C220                 db  10h
.eh_frame:000000000000C221                 db    0
.eh_frame:000000000000C222                 db    0
.eh_frame:000000000000C223                 db    0
.eh_frame:000000000000C224                 db  5Ch ; \
.eh_frame:000000000000C225                 db    9
.eh_frame:000000000000C226                 db    0
.eh_frame:000000000000C227                 db    0
.eh_frame:000000000000C228                 db 0E8h
.eh_frame:000000000000C229                 db  92h
.eh_frame:000000000000C22A                 db 0FFh
.eh_frame:000000000000C22B                 db 0FFh
.eh_frame:000000000000C22C                 db  26h ; &
.eh_frame:000000000000C22D                 db    0
.eh_frame:000000000000C22E                 db    0
.eh_frame:000000000000C22F                 db    0
.eh_frame:000000000000C230                 db    0
.eh_frame:000000000000C231                 db    0
.eh_frame:000000000000C232                 db    0
.eh_frame:000000000000C233                 db    0
.eh_frame:000000000000C234                 db  38h ; 8
.eh_frame:000000000000C235                 db    0
.eh_frame:000000000000C236                 db    0
.eh_frame:000000000000C237                 db    0
.eh_frame:000000000000C238                 db  70h ; p
.eh_frame:000000000000C239                 db    9
.eh_frame:000000000000C23A                 db    0
.eh_frame:000000000000C23B                 db    0
.eh_frame:000000000000C23C                 db    4
.eh_frame:000000000000C23D                 db  93h
.eh_frame:000000000000C23E                 db 0FFh
.eh_frame:000000000000C23F                 db 0FFh
.eh_frame:000000000000C240                 db 0C5h
.eh_frame:000000000000C241                 db    1
.eh_frame:000000000000C242                 db    0
.eh_frame:000000000000C243                 db    0
.eh_frame:000000000000C244                 db    0
.eh_frame:000000000000C245                 db  42h ; B
.eh_frame:000000000000C246                 db  0Eh
.eh_frame:000000000000C247                 db  10h
.eh_frame:000000000000C248                 db  8Ch
.eh_frame:000000000000C249                 db    2
.eh_frame:000000000000C24A                 db  41h ; A
.eh_frame:000000000000C24B                 db  0Eh
.eh_frame:000000000000C24C                 db  18h
.eh_frame:000000000000C24D                 db  86h
.eh_frame:000000000000C24E                 db    3
.eh_frame:000000000000C24F                 db  44h ; D
.eh_frame:000000000000C250                 db  0Eh
.eh_frame:000000000000C251                 db  20h
.eh_frame:000000000000C252                 db  83h
.eh_frame:000000000000C253                 db    4
.eh_frame:000000000000C254                 db    2
.eh_frame:000000000000C255                 db  72h ; r
.eh_frame:000000000000C256                 db  0Ah
.eh_frame:000000000000C257                 db  0Eh
.eh_frame:000000000000C258                 db  18h
.eh_frame:000000000000C259                 db  41h ; A
.eh_frame:000000000000C25A                 db  0Eh
.eh_frame:000000000000C25B                 db  10h
.eh_frame:000000000000C25C                 db  42h ; B
.eh_frame:000000000000C25D                 db  0Eh
.eh_frame:000000000000C25E                 db    8
.eh_frame:000000000000C25F                 db  44h ; D
.eh_frame:000000000000C260                 db  0Bh
.eh_frame:000000000000C261                 db    2
.eh_frame:000000000000C262                 db  54h ; T
.eh_frame:000000000000C263                 db  0Ah
.eh_frame:000000000000C264                 db  0Eh
.eh_frame:000000000000C265                 db  18h
.eh_frame:000000000000C266                 db  45h ; E
.eh_frame:000000000000C267                 db  0Eh
.eh_frame:000000000000C268                 db  10h
.eh_frame:000000000000C269                 db  42h ; B
.eh_frame:000000000000C26A                 db  0Eh
.eh_frame:000000000000C26B                 db    8
.eh_frame:000000000000C26C                 db  45h ; E
.eh_frame:000000000000C26D                 db  0Bh
.eh_frame:000000000000C26E                 db    0
.eh_frame:000000000000C26F                 db    0
.eh_frame:000000000000C270                 db  4Ch ; L
.eh_frame:000000000000C271                 db    0
.eh_frame:000000000000C272                 db    0
.eh_frame:000000000000C273                 db    0
.eh_frame:000000000000C274                 db 0ACh
.eh_frame:000000000000C275                 db    9
.eh_frame:000000000000C276                 db    0
.eh_frame:000000000000C277                 db    0
.eh_frame:000000000000C278                 db  98h
.eh_frame:000000000000C279                 db  94h
.eh_frame:000000000000C27A                 db 0FFh
.eh_frame:000000000000C27B                 db 0FFh
.eh_frame:000000000000C27C                 db    5
.eh_frame:000000000000C27D                 db    1
.eh_frame:000000000000C27E                 db    0
.eh_frame:000000000000C27F                 db    0
.eh_frame:000000000000C280                 db    0
.eh_frame:000000000000C281                 db  42h ; B
.eh_frame:000000000000C282                 db  0Eh
.eh_frame:000000000000C283                 db  10h
.eh_frame:000000000000C284                 db  8Dh
.eh_frame:000000000000C285                 db    2
.eh_frame:000000000000C286                 db  42h ; B
.eh_frame:000000000000C287                 db  0Eh
.eh_frame:000000000000C288                 db  18h
.eh_frame:000000000000C289                 db  8Ch
.eh_frame:000000000000C28A                 db    3
.eh_frame:000000000000C28B                 db  44h ; D
.eh_frame:000000000000C28C                 db  0Eh
.eh_frame:000000000000C28D                 db  20h
.eh_frame:000000000000C28E                 db  86h
.eh_frame:000000000000C28F                 db    4
.eh_frame:000000000000C290                 db  41h ; A
.eh_frame:000000000000C291                 db  0Eh
.eh_frame:000000000000C292                 db  28h ; (
.eh_frame:000000000000C293                 db  83h
.eh_frame:000000000000C294                 db    5
.eh_frame:000000000000C295                 db  4Ah ; J
.eh_frame:000000000000C296                 db  0Eh
.eh_frame:000000000000C297                 db  30h ; 0
.eh_frame:000000000000C298                 db    2
.eh_frame:000000000000C299                 db 0B3h
.eh_frame:000000000000C29A                 db  0Ah
.eh_frame:000000000000C29B                 db  0Eh
.eh_frame:000000000000C29C                 db  28h ; (
.eh_frame:000000000000C29D                 db  41h ; A
.eh_frame:000000000000C29E                 db  0Eh
.eh_frame:000000000000C29F                 db  20h
.eh_frame:000000000000C2A0                 db  41h ; A
.eh_frame:000000000000C2A1                 db  0Eh
.eh_frame:000000000000C2A2                 db  18h
.eh_frame:000000000000C2A3                 db  42h ; B
.eh_frame:000000000000C2A4                 db  0Eh
.eh_frame:000000000000C2A5                 db  10h
.eh_frame:000000000000C2A6                 db  42h ; B
.eh_frame:000000000000C2A7                 db  0Eh
.eh_frame:000000000000C2A8                 db    8
.eh_frame:000000000000C2A9                 db  44h ; D
.eh_frame:000000000000C2AA                 db  0Bh
.eh_frame:000000000000C2AB                 db  5Dh ; ]
.eh_frame:000000000000C2AC                 db  0Ah
.eh_frame:000000000000C2AD                 db  0Eh
.eh_frame:000000000000C2AE                 db  28h ; (
.eh_frame:000000000000C2AF                 db  44h ; D
.eh_frame:000000000000C2B0                 db  0Eh
.eh_frame:000000000000C2B1                 db  20h
.eh_frame:000000000000C2B2                 db  41h ; A
.eh_frame:000000000000C2B3                 db  0Eh
.eh_frame:000000000000C2B4                 db  18h
.eh_frame:000000000000C2B5                 db  42h ; B
.eh_frame:000000000000C2B6                 db  0Eh
.eh_frame:000000000000C2B7                 db  10h
.eh_frame:000000000000C2B8                 db  42h ; B
.eh_frame:000000000000C2B9                 db  0Eh
.eh_frame:000000000000C2BA                 db    8
.eh_frame:000000000000C2BB                 db  4Ah ; J
.eh_frame:000000000000C2BC                 db  0Bh
.eh_frame:000000000000C2BD                 db    0
.eh_frame:000000000000C2BE                 db    0
.eh_frame:000000000000C2BF                 db    0
.eh_frame:000000000000C2C0                 db  34h ; 4
.eh_frame:000000000000C2C1                 db    0
.eh_frame:000000000000C2C2                 db    0
.eh_frame:000000000000C2C3                 db    0
.eh_frame:000000000000C2C4                 db 0FCh
.eh_frame:000000000000C2C5                 db    9
.eh_frame:000000000000C2C6                 db    0
.eh_frame:000000000000C2C7                 db    0
.eh_frame:000000000000C2C8                 db  58h ; X
.eh_frame:000000000000C2C9                 db  95h
.eh_frame:000000000000C2CA                 db 0FFh
.eh_frame:000000000000C2CB                 db 0FFh
.eh_frame:000000000000C2CC                 db  8Ah
.eh_frame:000000000000C2CD                 db    0
.eh_frame:000000000000C2CE                 db    0
.eh_frame:000000000000C2CF                 db    0
.eh_frame:000000000000C2D0                 db    0
.eh_frame:000000000000C2D1                 db  42h ; B
.eh_frame:000000000000C2D2                 db  0Eh
.eh_frame:000000000000C2D3                 db  10h
.eh_frame:000000000000C2D4                 db  8Dh
.eh_frame:000000000000C2D5                 db    2
.eh_frame:000000000000C2D6                 db  42h ; B
.eh_frame:000000000000C2D7                 db  0Eh
.eh_frame:000000000000C2D8                 db  18h
.eh_frame:000000000000C2D9                 db  8Ch
.eh_frame:000000000000C2DA                 db    3
.eh_frame:000000000000C2DB                 db  44h ; D
.eh_frame:000000000000C2DC                 db  0Eh
.eh_frame:000000000000C2DD                 db  20h
.eh_frame:000000000000C2DE                 db  86h
.eh_frame:000000000000C2DF                 db    4
.eh_frame:000000000000C2E0                 db  48h ; H
.eh_frame:000000000000C2E1                 db  0Eh
.eh_frame:000000000000C2E2                 db  28h ; (
.eh_frame:000000000000C2E3                 db  83h
.eh_frame:000000000000C2E4                 db    5
.eh_frame:000000000000C2E5                 db  4Ah ; J
.eh_frame:000000000000C2E6                 db  0Eh
.eh_frame:000000000000C2E7                 db  30h ; 0
.eh_frame:000000000000C2E8                 db    2
.eh_frame:000000000000C2E9                 db  66h ; f
.eh_frame:000000000000C2EA                 db  0Eh
.eh_frame:000000000000C2EB                 db  28h ; (
.eh_frame:000000000000C2EC                 db  44h ; D
.eh_frame:000000000000C2ED                 db  0Eh
.eh_frame:000000000000C2EE                 db  20h
.eh_frame:000000000000C2EF                 db  41h ; A
.eh_frame:000000000000C2F0                 db  0Eh
.eh_frame:000000000000C2F1                 db  18h
.eh_frame:000000000000C2F2                 db  42h ; B
.eh_frame:000000000000C2F3                 db  0Eh
.eh_frame:000000000000C2F4                 db  10h
.eh_frame:000000000000C2F5                 db  42h ; B
.eh_frame:000000000000C2F6                 db  0Eh
.eh_frame:000000000000C2F7                 db    8
.eh_frame:000000000000C2F8                 db  28h ; (
.eh_frame:000000000000C2F9                 db    0
.eh_frame:000000000000C2FA                 db    0
.eh_frame:000000000000C2FB                 db    0
.eh_frame:000000000000C2FC                 db  34h ; 4
.eh_frame:000000000000C2FD                 db  0Ah
.eh_frame:000000000000C2FE                 db    0
.eh_frame:000000000000C2FF                 db    0
.eh_frame:000000000000C300                 db 0B0h
.eh_frame:000000000000C301                 db  95h
.eh_frame:000000000000C302                 db 0FFh
.eh_frame:000000000000C303                 db 0FFh
.eh_frame:000000000000C304                 db  42h ; B
.eh_frame:000000000000C305                 db    0
.eh_frame:000000000000C306                 db    0
.eh_frame:000000000000C307                 db    0
.eh_frame:000000000000C308                 db    0
.eh_frame:000000000000C309                 db  46h ; F
.eh_frame:000000000000C30A                 db  0Eh
.eh_frame:000000000000C30B                 db  10h
.eh_frame:000000000000C30C                 db  86h
.eh_frame:000000000000C30D                 db    2
.eh_frame:000000000000C30E                 db  41h ; A
.eh_frame:000000000000C30F                 db  0Eh
.eh_frame:000000000000C310                 db  18h
.eh_frame:000000000000C311                 db  83h
.eh_frame:000000000000C312                 db    3
.eh_frame:000000000000C313                 db  47h ; G
.eh_frame:000000000000C314                 db  0Eh
.eh_frame:000000000000C315                 db  20h
.eh_frame:000000000000C316                 db  68h ; h
.eh_frame:000000000000C317                 db  0Eh
.eh_frame:000000000000C318                 db  18h
.eh_frame:000000000000C319                 db  41h ; A
.eh_frame:000000000000C31A                 db  0Eh
.eh_frame:000000000000C31B                 db  10h
.eh_frame:000000000000C31C                 db  41h ; A
.eh_frame:000000000000C31D                 db  0Eh
.eh_frame:000000000000C31E                 db    8
.eh_frame:000000000000C31F                 db  48h ; H
.eh_frame:000000000000C320                 db 0C3h
.eh_frame:000000000000C321                 db 0C6h
.eh_frame:000000000000C322                 db    0
.eh_frame:000000000000C323                 db    0
.eh_frame:000000000000C324                 db  18h
.eh_frame:000000000000C325                 db    0
.eh_frame:000000000000C326                 db    0
.eh_frame:000000000000C327                 db    0
.eh_frame:000000000000C328                 db  60h ; `
.eh_frame:000000000000C329                 db  0Ah
.eh_frame:000000000000C32A                 db    0
.eh_frame:000000000000C32B                 db    0
.eh_frame:000000000000C32C                 db 0D4h
.eh_frame:000000000000C32D                 db  95h
.eh_frame:000000000000C32E                 db 0FFh
.eh_frame:000000000000C32F                 db 0FFh
.eh_frame:000000000000C330                 db  39h ; 9
.eh_frame:000000000000C331                 db    0
.eh_frame:000000000000C332                 db    0
.eh_frame:000000000000C333                 db    0
.eh_frame:000000000000C334                 db    0
.eh_frame:000000000000C335                 db  41h ; A
.eh_frame:000000000000C336                 db  0Eh
.eh_frame:000000000000C337                 db  10h
.eh_frame:000000000000C338                 db  83h
.eh_frame:000000000000C339                 db    2
.eh_frame:000000000000C33A                 db  68h ; h
.eh_frame:000000000000C33B                 db  0Ah
.eh_frame:000000000000C33C                 db  0Eh
.eh_frame:000000000000C33D                 db    8
.eh_frame:000000000000C33E                 db  47h ; G
.eh_frame:000000000000C33F                 db  0Bh
.eh_frame:000000000000C340                 db  38h ; 8
.eh_frame:000000000000C341                 db    0
.eh_frame:000000000000C342                 db    0
.eh_frame:000000000000C343                 db    0
.eh_frame:000000000000C344                 db  7Ch ; |
.eh_frame:000000000000C345                 db  0Ah
.eh_frame:000000000000C346                 db    0
.eh_frame:000000000000C347                 db    0
.eh_frame:000000000000C348                 db 0F8h
.eh_frame:000000000000C349                 db  95h
.eh_frame:000000000000C34A                 db 0FFh
.eh_frame:000000000000C34B                 db 0FFh
.eh_frame:000000000000C34C                 db  2Ch ; ,
.eh_frame:000000000000C34D                 db    1
.eh_frame:000000000000C34E                 db    0
.eh_frame:000000000000C34F                 db    0
.eh_frame:000000000000C350                 db    0
.eh_frame:000000000000C351                 db  42h ; B
.eh_frame:000000000000C352                 db  0Eh
.eh_frame:000000000000C353                 db  10h
.eh_frame:000000000000C354                 db  8Dh
.eh_frame:000000000000C355                 db    2
.eh_frame:000000000000C356                 db  42h ; B
.eh_frame:000000000000C357                 db  0Eh
.eh_frame:000000000000C358                 db  18h
.eh_frame:000000000000C359                 db  8Ch
.eh_frame:000000000000C35A                 db    3
.eh_frame:000000000000C35B                 db  41h ; A
.eh_frame:000000000000C35C                 db  0Eh
.eh_frame:000000000000C35D                 db  20h
.eh_frame:000000000000C35E                 db  86h
.eh_frame:000000000000C35F                 db    4
.eh_frame:000000000000C360                 db  41h ; A
.eh_frame:000000000000C361                 db  0Eh
.eh_frame:000000000000C362                 db  28h ; (
.eh_frame:000000000000C363                 db  83h
.eh_frame:000000000000C364                 db    5
.eh_frame:000000000000C365                 db  47h ; G
.eh_frame:000000000000C366                 db  0Eh
.eh_frame:000000000000C367                 db 0C0h
.eh_frame:000000000000C368                 db    1
.eh_frame:000000000000C369                 db    2
.eh_frame:000000000000C36A                 db 0A4h
.eh_frame:000000000000C36B                 db  0Ah
.eh_frame:000000000000C36C                 db  0Eh
.eh_frame:000000000000C36D                 db  28h ; (
.eh_frame:000000000000C36E                 db  41h ; A
.eh_frame:000000000000C36F                 db  0Eh
.eh_frame:000000000000C370                 db  20h
.eh_frame:000000000000C371                 db  41h ; A
.eh_frame:000000000000C372                 db  0Eh
.eh_frame:000000000000C373                 db  18h
.eh_frame:000000000000C374                 db  42h ; B
.eh_frame:000000000000C375                 db  0Eh
.eh_frame:000000000000C376                 db  10h
.eh_frame:000000000000C377                 db  42h ; B
.eh_frame:000000000000C378                 db  0Eh
.eh_frame:000000000000C379                 db    8
.eh_frame:000000000000C37A                 db  49h ; I
.eh_frame:000000000000C37B                 db  0Bh
.eh_frame:000000000000C37C                 db  20h
.eh_frame:000000000000C37D                 db    0
.eh_frame:000000000000C37E                 db    0
.eh_frame:000000000000C37F                 db    0
.eh_frame:000000000000C380                 db 0B8h
.eh_frame:000000000000C381                 db  0Ah
.eh_frame:000000000000C382                 db    0
.eh_frame:000000000000C383                 db    0
.eh_frame:000000000000C384                 db 0ECh
.eh_frame:000000000000C385                 db  96h
.eh_frame:000000000000C386                 db 0FFh
.eh_frame:000000000000C387                 db 0FFh
.eh_frame:000000000000C388                 db  6Ah ; j
.eh_frame:000000000000C389                 db    0
.eh_frame:000000000000C38A                 db    0
.eh_frame:000000000000C38B                 db    0
.eh_frame:000000000000C38C                 db    0
.eh_frame:000000000000C38D                 db  44h ; D
.eh_frame:000000000000C38E                 db  0Eh
.eh_frame:000000000000C38F                 db  10h
.eh_frame:000000000000C390                 db  72h ; r
.eh_frame:000000000000C391                 db  0Ah
.eh_frame:000000000000C392                 db  0Eh
.eh_frame:000000000000C393                 db    8
.eh_frame:000000000000C394                 db  4Ah ; J
.eh_frame:000000000000C395                 db  0Bh
.eh_frame:000000000000C396                 db  5Bh ; [
.eh_frame:000000000000C397                 db  0Ah
.eh_frame:000000000000C398                 db  0Eh
.eh_frame:000000000000C399                 db    8
.eh_frame:000000000000C39A                 db  45h ; E
.eh_frame:000000000000C39B                 db  0Bh
.eh_frame:000000000000C39C                 db  49h ; I
.eh_frame:000000000000C39D                 db  0Eh
.eh_frame:000000000000C39E                 db    8
.eh_frame:000000000000C39F                 db    0
.eh_frame:000000000000C3A0                 db  40h ; @
.eh_frame:000000000000C3A1                 db    0
.eh_frame:000000000000C3A2                 db    0
.eh_frame:000000000000C3A3                 db    0
.eh_frame:000000000000C3A4                 db 0DCh
.eh_frame:000000000000C3A5                 db  0Ah
.eh_frame:000000000000C3A6                 db    0
.eh_frame:000000000000C3A7                 db    0
.eh_frame:000000000000C3A8                 db  38h ; 8
.eh_frame:000000000000C3A9                 db  97h
.eh_frame:000000000000C3AA                 db 0FFh
.eh_frame:000000000000C3AB                 db 0FFh
.eh_frame:000000000000C3AC                 db  66h ; f
.eh_frame:000000000000C3AD                 db    0
.eh_frame:000000000000C3AE                 db    0
.eh_frame:000000000000C3AF                 db    0
.eh_frame:000000000000C3B0                 db    0
.eh_frame:000000000000C3B1                 db  41h ; A
.eh_frame:000000000000C3B2                 db  0Eh
.eh_frame:000000000000C3B3                 db  10h
.eh_frame:000000000000C3B4                 db  86h
.eh_frame:000000000000C3B5                 db    2
.eh_frame:000000000000C3B6                 db  41h ; A
.eh_frame:000000000000C3B7                 db  0Eh
.eh_frame:000000000000C3B8                 db  18h
.eh_frame:000000000000C3B9                 db  83h
.eh_frame:000000000000C3BA                 db    3
.eh_frame:000000000000C3BB                 db  49h ; I
.eh_frame:000000000000C3BC                 db  0Eh
.eh_frame:000000000000C3BD                 db  20h
.eh_frame:000000000000C3BE                 db  61h ; a
.eh_frame:000000000000C3BF                 db  0Ah
.eh_frame:000000000000C3C0                 db  0Eh
.eh_frame:000000000000C3C1                 db  18h
.eh_frame:000000000000C3C2                 db  41h ; A
.eh_frame:000000000000C3C3                 db  0Eh
.eh_frame:000000000000C3C4                 db  10h
.eh_frame:000000000000C3C5                 db  41h ; A
.eh_frame:000000000000C3C6                 db  0Eh
.eh_frame:000000000000C3C7                 db    8
.eh_frame:000000000000C3C8                 db  42h ; B
.eh_frame:000000000000C3C9                 db  0Bh
.eh_frame:000000000000C3CA                 db  5Bh ; [
.eh_frame:000000000000C3CB                 db  0Ah
.eh_frame:000000000000C3CC                 db  0Eh
.eh_frame:000000000000C3CD                 db  18h
.eh_frame:000000000000C3CE                 db  41h ; A
.eh_frame:000000000000C3CF                 db  0Eh
.eh_frame:000000000000C3D0                 db  10h
.eh_frame:000000000000C3D1                 db  41h ; A
.eh_frame:000000000000C3D2                 db  0Eh
.eh_frame:000000000000C3D3                 db    8
.eh_frame:000000000000C3D4                 db  43h ; C
.eh_frame:000000000000C3D5                 db  0Bh
.eh_frame:000000000000C3D6                 db  4Eh ; N
.eh_frame:000000000000C3D7                 db  0Ah
.eh_frame:000000000000C3D8                 db  0Eh
.eh_frame:000000000000C3D9                 db  18h
.eh_frame:000000000000C3DA                 db  41h ; A
.eh_frame:000000000000C3DB                 db  0Eh
.eh_frame:000000000000C3DC                 db  10h
.eh_frame:000000000000C3DD                 db  41h ; A
.eh_frame:000000000000C3DE                 db  0Eh
.eh_frame:000000000000C3DF                 db    8
.eh_frame:000000000000C3E0                 db  41h ; A
.eh_frame:000000000000C3E1                 db  0Bh
.eh_frame:000000000000C3E2                 db    0
.eh_frame:000000000000C3E3                 db    0
.eh_frame:000000000000C3E4                 db  28h ; (
.eh_frame:000000000000C3E5                 db    0
.eh_frame:000000000000C3E6                 db    0
.eh_frame:000000000000C3E7                 db    0
.eh_frame:000000000000C3E8                 db  20h
.eh_frame:000000000000C3E9                 db  0Bh
.eh_frame:000000000000C3EA                 db    0
.eh_frame:000000000000C3EB                 db    0
.eh_frame:000000000000C3EC                 db  64h ; d
.eh_frame:000000000000C3ED                 db  97h
.eh_frame:000000000000C3EE                 db 0FFh
.eh_frame:000000000000C3EF                 db 0FFh
.eh_frame:000000000000C3F0                 db  5Ch ; \
.eh_frame:000000000000C3F1                 db    0
.eh_frame:000000000000C3F2                 db    0
.eh_frame:000000000000C3F3                 db    0
.eh_frame:000000000000C3F4                 db    0
.eh_frame:000000000000C3F5                 db  41h ; A
.eh_frame:000000000000C3F6                 db  0Eh
.eh_frame:000000000000C3F7                 db  10h
.eh_frame:000000000000C3F8                 db  86h
.eh_frame:000000000000C3F9                 db    2
.eh_frame:000000000000C3FA                 db  41h ; A
.eh_frame:000000000000C3FB                 db  0Eh
.eh_frame:000000000000C3FC                 db  18h
.eh_frame:000000000000C3FD                 db  83h
.eh_frame:000000000000C3FE                 db    3
.eh_frame:000000000000C3FF                 db  47h ; G
.eh_frame:000000000000C400                 db  0Eh
.eh_frame:000000000000C401                 db  20h
.eh_frame:000000000000C402                 db  6Ch ; l
.eh_frame:000000000000C403                 db  0Ah
.eh_frame:000000000000C404                 db  0Eh
.eh_frame:000000000000C405                 db  18h
.eh_frame:000000000000C406                 db  43h ; C
.eh_frame:000000000000C407                 db  0Eh
.eh_frame:000000000000C408                 db  10h
.eh_frame:000000000000C409                 db  41h ; A
.eh_frame:000000000000C40A                 db  0Eh
.eh_frame:000000000000C40B                 db    8
.eh_frame:000000000000C40C                 db  47h ; G
.eh_frame:000000000000C40D                 db  0Bh
.eh_frame:000000000000C40E                 db    0
.eh_frame:000000000000C40F                 db    0
.eh_frame:000000000000C410                 db  24h ; $
.eh_frame:000000000000C411                 db    0
.eh_frame:000000000000C412                 db    0
.eh_frame:000000000000C413                 db    0
.eh_frame:000000000000C414                 db  4Ch ; L
.eh_frame:000000000000C415                 db  0Bh
.eh_frame:000000000000C416                 db    0
.eh_frame:000000000000C417                 db    0
.eh_frame:000000000000C418                 db  98h
.eh_frame:000000000000C419                 db  97h
.eh_frame:000000000000C41A                 db 0FFh
.eh_frame:000000000000C41B                 db 0FFh
.eh_frame:000000000000C41C                 db  6Bh ; k
.eh_frame:000000000000C41D                 db    0
.eh_frame:000000000000C41E                 db    0
.eh_frame:000000000000C41F                 db    0
.eh_frame:000000000000C420                 db    0
.eh_frame:000000000000C421                 db  41h ; A
.eh_frame:000000000000C422                 db  0Eh
.eh_frame:000000000000C423                 db  10h
.eh_frame:000000000000C424                 db  83h
.eh_frame:000000000000C425                 db    2
.eh_frame:000000000000C426                 db  6Fh ; o
.eh_frame:000000000000C427                 db  0Ah
.eh_frame:000000000000C428                 db  0Eh
.eh_frame:000000000000C429                 db    8
.eh_frame:000000000000C42A                 db  48h ; H
.eh_frame:000000000000C42B                 db  0Bh
.eh_frame:000000000000C42C                 db  5Ah ; Z
.eh_frame:000000000000C42D                 db  0Ah
.eh_frame:000000000000C42E                 db  0Eh
.eh_frame:000000000000C42F                 db    8
.eh_frame:000000000000C430                 db  46h ; F
.eh_frame:000000000000C431                 db  0Bh
.eh_frame:000000000000C432                 db  52h ; R
.eh_frame:000000000000C433                 db  0Eh
.eh_frame:000000000000C434                 db    8
.eh_frame:000000000000C435                 db    0
.eh_frame:000000000000C436                 db    0
.eh_frame:000000000000C437                 db    0
.eh_frame:000000000000C438                 db  1Ch
.eh_frame:000000000000C439                 db    0
.eh_frame:000000000000C43A                 db    0
.eh_frame:000000000000C43B                 db    0
.eh_frame:000000000000C43C                 db  74h ; t
.eh_frame:000000000000C43D                 db  0Bh
.eh_frame:000000000000C43E                 db    0
.eh_frame:000000000000C43F                 db    0
.eh_frame:000000000000C440                 db 0E0h
.eh_frame:000000000000C441                 db  97h
.eh_frame:000000000000C442                 db 0FFh
.eh_frame:000000000000C443                 db 0FFh
.eh_frame:000000000000C444                 db  63h ; c
.eh_frame:000000000000C445                 db    0
.eh_frame:000000000000C446                 db    0
.eh_frame:000000000000C447                 db    0
.eh_frame:000000000000C448                 db    0
.eh_frame:000000000000C449                 db  47h ; G
.eh_frame:000000000000C44A                 db  0Eh
.eh_frame:000000000000C44B                 db  10h
.eh_frame:000000000000C44C                 db  83h
.eh_frame:000000000000C44D                 db    2
.eh_frame:000000000000C44E                 db  70h ; p
.eh_frame:000000000000C44F                 db  0Ah
.eh_frame:000000000000C450                 db  0Eh
.eh_frame:000000000000C451                 db    8
.eh_frame:000000000000C452                 db  49h ; I
.eh_frame:000000000000C453                 db  0Bh
.eh_frame:000000000000C454                 db  62h ; b
.eh_frame:000000000000C455                 db  0Eh
.eh_frame:000000000000C456                 db    8
.eh_frame:000000000000C457                 db    0
.eh_frame:000000000000C458                 db  10h
.eh_frame:000000000000C459                 db    0
.eh_frame:000000000000C45A                 db    0
.eh_frame:000000000000C45B                 db    0
.eh_frame:000000000000C45C                 db  94h
.eh_frame:000000000000C45D                 db  0Bh
.eh_frame:000000000000C45E                 db    0
.eh_frame:000000000000C45F                 db    0
.eh_frame:000000000000C460                 db  30h ; 0
.eh_frame:000000000000C461                 db  98h
.eh_frame:000000000000C462                 db 0FFh
.eh_frame:000000000000C463                 db 0FFh
.eh_frame:000000000000C464                 db  3Ah ; :
.eh_frame:000000000000C465                 db    0
.eh_frame:000000000000C466                 db    0
.eh_frame:000000000000C467                 db    0
.eh_frame:000000000000C468                 db    0
.eh_frame:000000000000C469                 db    0
.eh_frame:000000000000C46A                 db    0
.eh_frame:000000000000C46B                 db    0
.eh_frame:000000000000C46C                 db  4Ch ; L
.eh_frame:000000000000C46D                 db    0
.eh_frame:000000000000C46E                 db    0
.eh_frame:000000000000C46F                 db    0
.eh_frame:000000000000C470                 db 0A8h
.eh_frame:000000000000C471                 db  0Bh
.eh_frame:000000000000C472                 db    0
.eh_frame:000000000000C473                 db    0
.eh_frame:000000000000C474                 db  5Ch ; \
.eh_frame:000000000000C475                 db  98h
.eh_frame:000000000000C476                 db 0FFh
.eh_frame:000000000000C477                 db 0FFh
.eh_frame:000000000000C478                 db  7Ah ; z
.eh_frame:000000000000C479                 db    2
.eh_frame:000000000000C47A                 db    0
.eh_frame:000000000000C47B                 db    0
.eh_frame:000000000000C47C                 db    0
.eh_frame:000000000000C47D                 db  42h ; B
.eh_frame:000000000000C47E                 db  0Eh
.eh_frame:000000000000C47F                 db  10h
.eh_frame:000000000000C480                 db  8Fh
.eh_frame:000000000000C481                 db    2
.eh_frame:000000000000C482                 db  42h ; B
.eh_frame:000000000000C483                 db  0Eh
.eh_frame:000000000000C484                 db  18h
.eh_frame:000000000000C485                 db  8Eh
.eh_frame:000000000000C486                 db    3
.eh_frame:000000000000C487                 db  45h ; E
.eh_frame:000000000000C488                 db  0Eh
.eh_frame:000000000000C489                 db  20h
.eh_frame:000000000000C48A                 db  8Dh
.eh_frame:000000000000C48B                 db    4
.eh_frame:000000000000C48C                 db  42h ; B
.eh_frame:000000000000C48D                 db  0Eh
.eh_frame:000000000000C48E                 db  28h ; (
.eh_frame:000000000000C48F                 db  8Ch
.eh_frame:000000000000C490                 db    5
.eh_frame:000000000000C491                 db  44h ; D
.eh_frame:000000000000C492                 db  0Eh
.eh_frame:000000000000C493                 db  30h ; 0
.eh_frame:000000000000C494                 db  86h
.eh_frame:000000000000C495                 db    6
.eh_frame:000000000000C496                 db  41h ; A
.eh_frame:000000000000C497                 db  0Eh
.eh_frame:000000000000C498                 db  38h ; 8
.eh_frame:000000000000C499                 db  83h
.eh_frame:000000000000C49A                 db    7
.eh_frame:000000000000C49B                 db  4Dh ; M
.eh_frame:000000000000C49C                 db  0Eh
.eh_frame:000000000000C49D                 db 0F0h
.eh_frame:000000000000C49E                 db    1
.eh_frame:000000000000C49F                 db    3
.eh_frame:000000000000C4A0                 db    8
.eh_frame:000000000000C4A1                 db    1
.eh_frame:000000000000C4A2                 db  0Ah
.eh_frame:000000000000C4A3                 db  0Eh
.eh_frame:000000000000C4A4                 db  38h ; 8
.eh_frame:000000000000C4A5                 db  41h ; A
.eh_frame:000000000000C4A6                 db  0Eh
.eh_frame:000000000000C4A7                 db  30h ; 0
.eh_frame:000000000000C4A8                 db  41h ; A
.eh_frame:000000000000C4A9                 db  0Eh
.eh_frame:000000000000C4AA                 db  28h ; (
.eh_frame:000000000000C4AB                 db  42h ; B
.eh_frame:000000000000C4AC                 db  0Eh
.eh_frame:000000000000C4AD                 db  20h
.eh_frame:000000000000C4AE                 db  42h ; B
.eh_frame:000000000000C4AF                 db  0Eh
.eh_frame:000000000000C4B0                 db  18h
.eh_frame:000000000000C4B1                 db  42h ; B
.eh_frame:000000000000C4B2                 db  0Eh
.eh_frame:000000000000C4B3                 db  10h
.eh_frame:000000000000C4B4                 db  42h ; B
.eh_frame:000000000000C4B5                 db  0Eh
.eh_frame:000000000000C4B6                 db    8
.eh_frame:000000000000C4B7                 db  41h ; A
.eh_frame:000000000000C4B8                 db  0Bh
.eh_frame:000000000000C4B9                 db    0
.eh_frame:000000000000C4BA                 db    0
.eh_frame:000000000000C4BB                 db    0
.eh_frame:000000000000C4BC                 db  40h ; @
.eh_frame:000000000000C4BD                 db    0
.eh_frame:000000000000C4BE                 db    0
.eh_frame:000000000000C4BF                 db    0
.eh_frame:000000000000C4C0                 db 0F8h
.eh_frame:000000000000C4C1                 db  0Bh
.eh_frame:000000000000C4C2                 db    0
.eh_frame:000000000000C4C3                 db    0
.eh_frame:000000000000C4C4                 db  8Ch
.eh_frame:000000000000C4C5                 db  9Ah
.eh_frame:000000000000C4C6                 db 0FFh
.eh_frame:000000000000C4C7                 db 0FFh
.eh_frame:000000000000C4C8                 db 0AFh
.eh_frame:000000000000C4C9                 db    0
.eh_frame:000000000000C4CA                 db    0
.eh_frame:000000000000C4CB                 db    0
.eh_frame:000000000000C4CC                 db    0
.eh_frame:000000000000C4CD                 db  48h ; H
.eh_frame:000000000000C4CE                 db  0Eh
.eh_frame:000000000000C4CF                 db  10h
.eh_frame:000000000000C4D0                 db  8Ch
.eh_frame:000000000000C4D1                 db    2
.eh_frame:000000000000C4D2                 db  44h ; D
.eh_frame:000000000000C4D3                 db  0Eh
.eh_frame:000000000000C4D4                 db  18h
.eh_frame:000000000000C4D5                 db  86h
.eh_frame:000000000000C4D6                 db    3
.eh_frame:000000000000C4D7                 db  41h ; A
.eh_frame:000000000000C4D8                 db  0Eh
.eh_frame:000000000000C4D9                 db  20h
.eh_frame:000000000000C4DA                 db  83h
.eh_frame:000000000000C4DB                 db    4
.eh_frame:000000000000C4DC                 db    2
.eh_frame:000000000000C4DD                 db  65h ; e
.eh_frame:000000000000C4DE                 db  0Ah
.eh_frame:000000000000C4DF                 db  0Eh
.eh_frame:000000000000C4E0                 db  18h
.eh_frame:000000000000C4E1                 db  46h ; F
.eh_frame:000000000000C4E2                 db  0Eh
.eh_frame:000000000000C4E3                 db  10h
.eh_frame:000000000000C4E4                 db  42h ; B
.eh_frame:000000000000C4E5                 db  0Eh
.eh_frame:000000000000C4E6                 db    8
.eh_frame:000000000000C4E7                 db  46h ; F
.eh_frame:000000000000C4E8                 db  0Bh
.eh_frame:000000000000C4E9                 db  5Eh ; ^
.eh_frame:000000000000C4EA                 db  0Ah
.eh_frame:000000000000C4EB                 db  0Eh
.eh_frame:000000000000C4EC                 db  18h
.eh_frame:000000000000C4ED                 db  41h ; A
.eh_frame:000000000000C4EE                 db  0Eh
.eh_frame:000000000000C4EF                 db  10h
.eh_frame:000000000000C4F0                 db  42h ; B
.eh_frame:000000000000C4F1                 db  0Eh
.eh_frame:000000000000C4F2                 db    8
.eh_frame:000000000000C4F3                 db  47h ; G
.eh_frame:000000000000C4F4                 db  0Bh
.eh_frame:000000000000C4F5                 db  41h ; A
.eh_frame:000000000000C4F6                 db  0Eh
.eh_frame:000000000000C4F7                 db  18h
.eh_frame:000000000000C4F8                 db  43h ; C
.eh_frame:000000000000C4F9                 db  0Eh
.eh_frame:000000000000C4FA                 db  10h
.eh_frame:000000000000C4FB                 db  42h ; B
.eh_frame:000000000000C4FC                 db  0Eh
.eh_frame:000000000000C4FD                 db    8
.eh_frame:000000000000C4FE                 db    0
.eh_frame:000000000000C4FF                 db    0
.eh_frame:000000000000C500                 db  18h
.eh_frame:000000000000C501                 db    0
.eh_frame:000000000000C502                 db    0
.eh_frame:000000000000C503                 db    0
.eh_frame:000000000000C504                 db  3Ch ; <
.eh_frame:000000000000C505                 db  0Ch
.eh_frame:000000000000C506                 db    0
.eh_frame:000000000000C507                 db    0
.eh_frame:000000000000C508                 db 0F8h
.eh_frame:000000000000C509                 db  9Ah
.eh_frame:000000000000C50A                 db 0FFh
.eh_frame:000000000000C50B                 db 0FFh
.eh_frame:000000000000C50C                 db 0B8h
.eh_frame:000000000000C50D                 db    0
.eh_frame:000000000000C50E                 db    0
.eh_frame:000000000000C50F                 db    0
.eh_frame:000000000000C510                 db    0
.eh_frame:000000000000C511                 db  44h ; D
.eh_frame:000000000000C512                 db  0Eh
.eh_frame:000000000000C513                 db  30h ; 0
.eh_frame:000000000000C514                 db    2
.eh_frame:000000000000C515                 db  55h ; U
.eh_frame:000000000000C516                 db  0Ah
.eh_frame:000000000000C517                 db  0Eh
.eh_frame:000000000000C518                 db    8
.eh_frame:000000000000C519                 db  47h ; G
.eh_frame:000000000000C51A                 db  0Bh
.eh_frame:000000000000C51B                 db    0
.eh_frame:000000000000C51C                 db  4Ch ; L
.eh_frame:000000000000C51D                 db    0
.eh_frame:000000000000C51E                 db    0
.eh_frame:000000000000C51F                 db    0
.eh_frame:000000000000C520                 db  58h ; X
.eh_frame:000000000000C521                 db  0Ch
.eh_frame:000000000000C522                 db    0
.eh_frame:000000000000C523                 db    0
.eh_frame:000000000000C524                 db  9Ch
.eh_frame:000000000000C525                 db  9Bh
.eh_frame:000000000000C526                 db 0FFh
.eh_frame:000000000000C527                 db 0FFh
.eh_frame:000000000000C528                 db 0D1h
.eh_frame:000000000000C529                 db    9
.eh_frame:000000000000C52A                 db    0
.eh_frame:000000000000C52B                 db    0
.eh_frame:000000000000C52C                 db    0
.eh_frame:000000000000C52D                 db  42h ; B
.eh_frame:000000000000C52E                 db  0Eh
.eh_frame:000000000000C52F                 db  10h
.eh_frame:000000000000C530                 db  8Fh
.eh_frame:000000000000C531                 db    2
.eh_frame:000000000000C532                 db  42h ; B
.eh_frame:000000000000C533                 db  0Eh
.eh_frame:000000000000C534                 db  18h
.eh_frame:000000000000C535                 db  8Eh
.eh_frame:000000000000C536                 db    3
.eh_frame:000000000000C537                 db  45h ; E
.eh_frame:000000000000C538                 db  0Eh
.eh_frame:000000000000C539                 db  20h
.eh_frame:000000000000C53A                 db  8Dh
.eh_frame:000000000000C53B                 db    4
.eh_frame:000000000000C53C                 db  42h ; B
.eh_frame:000000000000C53D                 db  0Eh
.eh_frame:000000000000C53E                 db  28h ; (
.eh_frame:000000000000C53F                 db  8Ch
.eh_frame:000000000000C540                 db    5
.eh_frame:000000000000C541                 db  41h ; A
.eh_frame:000000000000C542                 db  0Eh
.eh_frame:000000000000C543                 db  30h ; 0
.eh_frame:000000000000C544                 db  86h
.eh_frame:000000000000C545                 db    6
.eh_frame:000000000000C546                 db  41h ; A
.eh_frame:000000000000C547                 db  0Eh
.eh_frame:000000000000C548                 db  38h ; 8
.eh_frame:000000000000C549                 db  83h
.eh_frame:000000000000C54A                 db    7
.eh_frame:000000000000C54B                 db  44h ; D
.eh_frame:000000000000C54C                 db  0Eh
.eh_frame:000000000000C54D                 db 0B0h
.eh_frame:000000000000C54E                 db    1
.eh_frame:000000000000C54F                 db    3
.eh_frame:000000000000C550                 db 0D1h
.eh_frame:000000000000C551                 db    5
.eh_frame:000000000000C552                 db  0Ah
.eh_frame:000000000000C553                 db  0Eh
.eh_frame:000000000000C554                 db  38h ; 8
.eh_frame:000000000000C555                 db  41h ; A
.eh_frame:000000000000C556                 db  0Eh
.eh_frame:000000000000C557                 db  30h ; 0
.eh_frame:000000000000C558                 db  41h ; A
.eh_frame:000000000000C559                 db  0Eh
.eh_frame:000000000000C55A                 db  28h ; (
.eh_frame:000000000000C55B                 db  42h ; B
.eh_frame:000000000000C55C                 db  0Eh
.eh_frame:000000000000C55D                 db  20h
.eh_frame:000000000000C55E                 db  42h ; B
.eh_frame:000000000000C55F                 db  0Eh
.eh_frame:000000000000C560                 db  18h
.eh_frame:000000000000C561                 db  42h ; B
.eh_frame:000000000000C562                 db  0Eh
.eh_frame:000000000000C563                 db  10h
.eh_frame:000000000000C564                 db  42h ; B
.eh_frame:000000000000C565                 db  0Eh
.eh_frame:000000000000C566                 db    8
.eh_frame:000000000000C567                 db  44h ; D
.eh_frame:000000000000C568                 db  0Bh
.eh_frame:000000000000C569                 db    0
.eh_frame:000000000000C56A                 db    0
.eh_frame:000000000000C56B                 db    0
.eh_frame:000000000000C56C                 db  48h ; H
.eh_frame:000000000000C56D                 db    0
.eh_frame:000000000000C56E                 db    0
.eh_frame:000000000000C56F                 db    0
.eh_frame:000000000000C570                 db 0A8h
.eh_frame:000000000000C571                 db  0Ch
.eh_frame:000000000000C572                 db    0
.eh_frame:000000000000C573                 db    0
.eh_frame:000000000000C574                 db  2Ch ; ,
.eh_frame:000000000000C575                 db 0A5h
.eh_frame:000000000000C576                 db 0FFh
.eh_frame:000000000000C577                 db 0FFh
.eh_frame:000000000000C578                 db 0AAh
.eh_frame:000000000000C579                 db    3
.eh_frame:000000000000C57A                 db    0
.eh_frame:000000000000C57B                 db    0
.eh_frame:000000000000C57C                 db    0
.eh_frame:000000000000C57D                 db  42h ; B
.eh_frame:000000000000C57E                 db  0Eh
.eh_frame:000000000000C57F                 db  10h
.eh_frame:000000000000C580                 db  8Fh
.eh_frame:000000000000C581                 db    2
.eh_frame:000000000000C582                 db  42h ; B
.eh_frame:000000000000C583                 db  0Eh
.eh_frame:000000000000C584                 db  18h
.eh_frame:000000000000C585                 db  8Eh
.eh_frame:000000000000C586                 db    3
.eh_frame:000000000000C587                 db  42h ; B
.eh_frame:000000000000C588                 db  0Eh
.eh_frame:000000000000C589                 db  20h
.eh_frame:000000000000C58A                 db  8Dh
.eh_frame:000000000000C58B                 db    4
.eh_frame:000000000000C58C                 db  42h ; B
.eh_frame:000000000000C58D                 db  0Eh
.eh_frame:000000000000C58E                 db  28h ; (
.eh_frame:000000000000C58F                 db  8Ch
.eh_frame:000000000000C590                 db    5
.eh_frame:000000000000C591                 db  41h ; A
.eh_frame:000000000000C592                 db  0Eh
.eh_frame:000000000000C593                 db  30h ; 0
.eh_frame:000000000000C594                 db  86h
.eh_frame:000000000000C595                 db    6
.eh_frame:000000000000C596                 db  41h ; A
.eh_frame:000000000000C597                 db  0Eh
.eh_frame:000000000000C598                 db  38h ; 8
.eh_frame:000000000000C599                 db  83h
.eh_frame:000000000000C59A                 db    7
.eh_frame:000000000000C59B                 db  44h ; D
.eh_frame:000000000000C59C                 db  0Eh
.eh_frame:000000000000C59D                 db  60h ; `
.eh_frame:000000000000C59E                 db    3
.eh_frame:000000000000C59F                 db 0A4h
.eh_frame:000000000000C5A0                 db    2
.eh_frame:000000000000C5A1                 db  0Ah
.eh_frame:000000000000C5A2                 db  0Eh
.eh_frame:000000000000C5A3                 db  38h ; 8
.eh_frame:000000000000C5A4                 db  44h ; D
.eh_frame:000000000000C5A5                 db  0Eh
.eh_frame:000000000000C5A6                 db  30h ; 0
.eh_frame:000000000000C5A7                 db  41h ; A
.eh_frame:000000000000C5A8                 db  0Eh
.eh_frame:000000000000C5A9                 db  28h ; (
.eh_frame:000000000000C5AA                 db  42h ; B
.eh_frame:000000000000C5AB                 db  0Eh
.eh_frame:000000000000C5AC                 db  20h
.eh_frame:000000000000C5AD                 db  42h ; B
.eh_frame:000000000000C5AE                 db  0Eh
.eh_frame:000000000000C5AF                 db  18h
.eh_frame:000000000000C5B0                 db  42h ; B
.eh_frame:000000000000C5B1                 db  0Eh
.eh_frame:000000000000C5B2                 db  10h
.eh_frame:000000000000C5B3                 db  42h ; B
.eh_frame:000000000000C5B4                 db  0Eh
.eh_frame:000000000000C5B5                 db    8
.eh_frame:000000000000C5B6                 db  41h ; A
.eh_frame:000000000000C5B7                 db  0Bh
.eh_frame:000000000000C5B8                 db  2Ch ; ,
.eh_frame:000000000000C5B9                 db    0
.eh_frame:000000000000C5BA                 db    0
.eh_frame:000000000000C5BB                 db    0
.eh_frame:000000000000C5BC                 db 0F4h
.eh_frame:000000000000C5BD                 db  0Ch
.eh_frame:000000000000C5BE                 db    0
.eh_frame:000000000000C5BF                 db    0
.eh_frame:000000000000C5C0                 db  90h
.eh_frame:000000000000C5C1                 db 0A8h
.eh_frame:000000000000C5C2                 db 0FFh
.eh_frame:000000000000C5C3                 db 0FFh
.eh_frame:000000000000C5C4                 db  82h
.eh_frame:000000000000C5C5                 db    1
.eh_frame:000000000000C5C6                 db    0
.eh_frame:000000000000C5C7                 db    0
.eh_frame:000000000000C5C8                 db    0
.eh_frame:000000000000C5C9                 db  42h ; B
.eh_frame:000000000000C5CA                 db  0Eh
.eh_frame:000000000000C5CB                 db  10h
.eh_frame:000000000000C5CC                 db  8Ch
.eh_frame:000000000000C5CD                 db    2
.eh_frame:000000000000C5CE                 db  41h ; A
.eh_frame:000000000000C5CF                 db  0Eh
.eh_frame:000000000000C5D0                 db  18h
.eh_frame:000000000000C5D1                 db  86h
.eh_frame:000000000000C5D2                 db    3
.eh_frame:000000000000C5D3                 db  44h ; D
.eh_frame:000000000000C5D4                 db  0Eh
.eh_frame:000000000000C5D5                 db  20h
.eh_frame:000000000000C5D6                 db  83h
.eh_frame:000000000000C5D7                 db    4
.eh_frame:000000000000C5D8                 db    2
.eh_frame:000000000000C5D9                 db 0C2h
.eh_frame:000000000000C5DA                 db  0Ah
.eh_frame:000000000000C5DB                 db  0Eh
.eh_frame:000000000000C5DC                 db  18h
.eh_frame:000000000000C5DD                 db  41h ; A
.eh_frame:000000000000C5DE                 db  0Eh
.eh_frame:000000000000C5DF                 db  10h
.eh_frame:000000000000C5E0                 db  42h ; B
.eh_frame:000000000000C5E1                 db  0Eh
.eh_frame:000000000000C5E2                 db    8
.eh_frame:000000000000C5E3                 db  44h ; D
.eh_frame:000000000000C5E4                 db  0Bh
.eh_frame:000000000000C5E5                 db    0
.eh_frame:000000000000C5E6                 db    0
.eh_frame:000000000000C5E7                 db    0
.eh_frame:000000000000C5E8                 db  60h ; `
.eh_frame:000000000000C5E9                 db    0
.eh_frame:000000000000C5EA                 db    0
.eh_frame:000000000000C5EB                 db    0
.eh_frame:000000000000C5EC                 db  24h ; $
.eh_frame:000000000000C5ED                 db  0Dh
.eh_frame:000000000000C5EE                 db    0
.eh_frame:000000000000C5EF                 db    0
.eh_frame:000000000000C5F0                 db 0F0h
.eh_frame:000000000000C5F1                 db 0A9h
.eh_frame:000000000000C5F2                 db 0FFh
.eh_frame:000000000000C5F3                 db 0FFh
.eh_frame:000000000000C5F4                 db  78h ; x
.eh_frame:000000000000C5F5                 db    7
.eh_frame:000000000000C5F6                 db    0
.eh_frame:000000000000C5F7                 db    0
.eh_frame:000000000000C5F8                 db    0
.eh_frame:000000000000C5F9                 db  42h ; B
.eh_frame:000000000000C5FA                 db  0Eh
.eh_frame:000000000000C5FB                 db  10h
.eh_frame:000000000000C5FC                 db  8Eh
.eh_frame:000000000000C5FD                 db    2
.eh_frame:000000000000C5FE                 db  42h ; B
.eh_frame:000000000000C5FF                 db  0Eh
.eh_frame:000000000000C600                 db  18h
.eh_frame:000000000000C601                 db  8Dh
.eh_frame:000000000000C602                 db    3
.eh_frame:000000000000C603                 db  42h ; B
.eh_frame:000000000000C604                 db  0Eh
.eh_frame:000000000000C605                 db  20h
.eh_frame:000000000000C606                 db  8Ch
.eh_frame:000000000000C607                 db    4
.eh_frame:000000000000C608                 db  41h ; A
.eh_frame:000000000000C609                 db  0Eh
.eh_frame:000000000000C60A                 db  28h ; (
.eh_frame:000000000000C60B                 db  86h
.eh_frame:000000000000C60C                 db    5
.eh_frame:000000000000C60D                 db  41h ; A
.eh_frame:000000000000C60E                 db  0Eh
.eh_frame:000000000000C60F                 db  30h ; 0
.eh_frame:000000000000C610                 db  83h
.eh_frame:000000000000C611                 db    6
.eh_frame:000000000000C612                 db    3
.eh_frame:000000000000C613                 db  19h
.eh_frame:000000000000C614                 db    1
.eh_frame:000000000000C615                 db  0Ah
.eh_frame:000000000000C616                 db  0Eh
.eh_frame:000000000000C617                 db  28h ; (
.eh_frame:000000000000C618                 db  44h ; D
.eh_frame:000000000000C619                 db  0Eh
.eh_frame:000000000000C61A                 db  20h
.eh_frame:000000000000C61B                 db  42h ; B
.eh_frame:000000000000C61C                 db  0Eh
.eh_frame:000000000000C61D                 db  18h
.eh_frame:000000000000C61E                 db  42h ; B
.eh_frame:000000000000C61F                 db  0Eh
.eh_frame:000000000000C620                 db  10h
.eh_frame:000000000000C621                 db  42h ; B
.eh_frame:000000000000C622                 db  0Eh
.eh_frame:000000000000C623                 db    8
.eh_frame:000000000000C624                 db  45h ; E
.eh_frame:000000000000C625                 db  0Bh
.eh_frame:000000000000C626                 db    2
.eh_frame:000000000000C627                 db  6Bh ; k
.eh_frame:000000000000C628                 db  0Ah
.eh_frame:000000000000C629                 db  0Eh
.eh_frame:000000000000C62A                 db  28h ; (
.eh_frame:000000000000C62B                 db  44h ; D
.eh_frame:000000000000C62C                 db  0Eh
.eh_frame:000000000000C62D                 db  20h
.eh_frame:000000000000C62E                 db  42h ; B
.eh_frame:000000000000C62F                 db  0Eh
.eh_frame:000000000000C630                 db  18h
.eh_frame:000000000000C631                 db  42h ; B
.eh_frame:000000000000C632                 db  0Eh
.eh_frame:000000000000C633                 db  10h
.eh_frame:000000000000C634                 db  42h ; B
.eh_frame:000000000000C635                 db  0Eh
.eh_frame:000000000000C636                 db    8
.eh_frame:000000000000C637                 db  4Bh ; K
.eh_frame:000000000000C638                 db  0Bh
.eh_frame:000000000000C639                 db    2
.eh_frame:000000000000C63A                 db 0E2h
.eh_frame:000000000000C63B                 db  0Ah
.eh_frame:000000000000C63C                 db  0Eh
.eh_frame:000000000000C63D                 db  28h ; (
.eh_frame:000000000000C63E                 db  41h ; A
.eh_frame:000000000000C63F                 db  0Eh
.eh_frame:000000000000C640                 db  20h
.eh_frame:000000000000C641                 db  42h ; B
.eh_frame:000000000000C642                 db  0Eh
.eh_frame:000000000000C643                 db  18h
.eh_frame:000000000000C644                 db  42h ; B
.eh_frame:000000000000C645                 db  0Eh
.eh_frame:000000000000C646                 db  10h
.eh_frame:000000000000C647                 db  42h ; B
.eh_frame:000000000000C648                 db  0Eh
.eh_frame:000000000000C649                 db    8
.eh_frame:000000000000C64A                 db  47h ; G
.eh_frame:000000000000C64B                 db  0Bh
.eh_frame:000000000000C64C                 db  14h
.eh_frame:000000000000C64D                 db    0
.eh_frame:000000000000C64E                 db    0
.eh_frame:000000000000C64F                 db    0
.eh_frame:000000000000C650                 db  88h
.eh_frame:000000000000C651                 db  0Dh
.eh_frame:000000000000C652                 db    0
.eh_frame:000000000000C653                 db    0
.eh_frame:000000000000C654                 db  0Ch
.eh_frame:000000000000C655                 db 0B1h
.eh_frame:000000000000C656                 db 0FFh
.eh_frame:000000000000C657                 db 0FFh
.eh_frame:000000000000C658                 db  29h ; )
.eh_frame:000000000000C659                 db    0
.eh_frame:000000000000C65A                 db    0
.eh_frame:000000000000C65B                 db    0
.eh_frame:000000000000C65C                 db    0
.eh_frame:000000000000C65D                 db  54h ; T
.eh_frame:000000000000C65E                 db  0Eh
.eh_frame:000000000000C65F                 db  10h
.eh_frame:000000000000C660                 db  54h ; T
.eh_frame:000000000000C661                 db  0Eh
.eh_frame:000000000000C662                 db    8
.eh_frame:000000000000C663                 db    0
.eh_frame:000000000000C664                 db  60h ; `
.eh_frame:000000000000C665                 db    0
.eh_frame:000000000000C666                 db    0
.eh_frame:000000000000C667                 db    0
.eh_frame:000000000000C668                 db 0A0h
.eh_frame:000000000000C669                 db  0Dh
.eh_frame:000000000000C66A                 db    0
.eh_frame:000000000000C66B                 db    0
.eh_frame:000000000000C66C                 db  24h ; $
.eh_frame:000000000000C66D                 db 0B1h
.eh_frame:000000000000C66E                 db 0FFh
.eh_frame:000000000000C66F                 db 0FFh
.eh_frame:000000000000C670                 db  4Eh ; N
.eh_frame:000000000000C671                 db    1
.eh_frame:000000000000C672                 db    0
.eh_frame:000000000000C673                 db    0
.eh_frame:000000000000C674                 db    0
.eh_frame:000000000000C675                 db  42h ; B
.eh_frame:000000000000C676                 db  0Eh
.eh_frame:000000000000C677                 db  10h
.eh_frame:000000000000C678                 db  8Eh
.eh_frame:000000000000C679                 db    2
.eh_frame:000000000000C67A                 db  42h ; B
.eh_frame:000000000000C67B                 db  0Eh
.eh_frame:000000000000C67C                 db  18h
.eh_frame:000000000000C67D                 db  8Dh
.eh_frame:000000000000C67E                 db    3
.eh_frame:000000000000C67F                 db  42h ; B
.eh_frame:000000000000C680                 db  0Eh
.eh_frame:000000000000C681                 db  20h
.eh_frame:000000000000C682                 db  8Ch
.eh_frame:000000000000C683                 db    4
.eh_frame:000000000000C684                 db  41h ; A
.eh_frame:000000000000C685                 db  0Eh
.eh_frame:000000000000C686                 db  28h ; (
.eh_frame:000000000000C687                 db  86h
.eh_frame:000000000000C688                 db    5
.eh_frame:000000000000C689                 db  44h ; D
.eh_frame:000000000000C68A                 db  0Eh
.eh_frame:000000000000C68B                 db  30h ; 0
.eh_frame:000000000000C68C                 db  83h
.eh_frame:000000000000C68D                 db    6
.eh_frame:000000000000C68E                 db    2
.eh_frame:000000000000C68F                 db  8Ah
.eh_frame:000000000000C690                 db  0Ah
.eh_frame:000000000000C691                 db  0Eh
.eh_frame:000000000000C692                 db  28h ; (
.eh_frame:000000000000C693                 db  41h ; A
.eh_frame:000000000000C694                 db  0Eh
.eh_frame:000000000000C695                 db  20h
.eh_frame:000000000000C696                 db  42h ; B
.eh_frame:000000000000C697                 db  0Eh
.eh_frame:000000000000C698                 db  18h
.eh_frame:000000000000C699                 db  42h ; B
.eh_frame:000000000000C69A                 db  0Eh
.eh_frame:000000000000C69B                 db  10h
.eh_frame:000000000000C69C                 db  42h ; B
.eh_frame:000000000000C69D                 db  0Eh
.eh_frame:000000000000C69E                 db    8
.eh_frame:000000000000C69F                 db  44h ; D
.eh_frame:000000000000C6A0                 db  0Bh
.eh_frame:000000000000C6A1                 db  41h ; A
.eh_frame:000000000000C6A2                 db  0Ah
.eh_frame:000000000000C6A3                 db  0Eh
.eh_frame:000000000000C6A4                 db  28h ; (
.eh_frame:000000000000C6A5                 db  45h ; E
.eh_frame:000000000000C6A6                 db  0Eh
.eh_frame:000000000000C6A7                 db  20h
.eh_frame:000000000000C6A8                 db  42h ; B
.eh_frame:000000000000C6A9                 db  0Eh
.eh_frame:000000000000C6AA                 db  18h
.eh_frame:000000000000C6AB                 db  42h ; B
.eh_frame:000000000000C6AC                 db  0Eh
.eh_frame:000000000000C6AD                 db  10h
.eh_frame:000000000000C6AE                 db  42h ; B
.eh_frame:000000000000C6AF                 db  0Eh
.eh_frame:000000000000C6B0                 db    8
.eh_frame:000000000000C6B1                 db  44h ; D
.eh_frame:000000000000C6B2                 db  0Bh
.eh_frame:000000000000C6B3                 db  41h ; A
.eh_frame:000000000000C6B4                 db  0Ah
.eh_frame:000000000000C6B5                 db  0Eh
.eh_frame:000000000000C6B6                 db  28h ; (
.eh_frame:000000000000C6B7                 db  43h ; C
.eh_frame:000000000000C6B8                 db  0Eh
.eh_frame:000000000000C6B9                 db  20h
.eh_frame:000000000000C6BA                 db  42h ; B
.eh_frame:000000000000C6BB                 db  0Eh
.eh_frame:000000000000C6BC                 db  18h
.eh_frame:000000000000C6BD                 db  42h ; B
.eh_frame:000000000000C6BE                 db  0Eh
.eh_frame:000000000000C6BF                 db  10h
.eh_frame:000000000000C6C0                 db  42h ; B
.eh_frame:000000000000C6C1                 db  0Eh
.eh_frame:000000000000C6C2                 db    8
.eh_frame:000000000000C6C3                 db  46h ; F
.eh_frame:000000000000C6C4                 db  0Bh
.eh_frame:000000000000C6C5                 db    0
.eh_frame:000000000000C6C6                 db    0
.eh_frame:000000000000C6C7                 db    0
.eh_frame:000000000000C6C8                 db  3Ch ; <
.eh_frame:000000000000C6C9                 db    0
.eh_frame:000000000000C6CA                 db    0
.eh_frame:000000000000C6CB                 db    0
.eh_frame:000000000000C6CC                 db    4
.eh_frame:000000000000C6CD                 db  0Eh
.eh_frame:000000000000C6CE                 db    0
.eh_frame:000000000000C6CF                 db    0
.eh_frame:000000000000C6D0                 db  10h
.eh_frame:000000000000C6D1                 db 0B2h
.eh_frame:000000000000C6D2                 db 0FFh
.eh_frame:000000000000C6D3                 db 0FFh
.eh_frame:000000000000C6D4                 db  83h
.eh_frame:000000000000C6D5                 db    0
.eh_frame:000000000000C6D6                 db    0
.eh_frame:000000000000C6D7                 db    0
.eh_frame:000000000000C6D8                 db    0
.eh_frame:000000000000C6D9                 db  42h ; B
.eh_frame:000000000000C6DA                 db  0Eh
.eh_frame:000000000000C6DB                 db  10h
.eh_frame:000000000000C6DC                 db  8Dh
.eh_frame:000000000000C6DD                 db    2
.eh_frame:000000000000C6DE                 db  42h ; B
.eh_frame:000000000000C6DF                 db  0Eh
.eh_frame:000000000000C6E0                 db  18h
.eh_frame:000000000000C6E1                 db  8Ch
.eh_frame:000000000000C6E2                 db    3
.eh_frame:000000000000C6E3                 db  44h ; D
.eh_frame:000000000000C6E4                 db  0Eh
.eh_frame:000000000000C6E5                 db  20h
.eh_frame:000000000000C6E6                 db  86h
.eh_frame:000000000000C6E7                 db    4
.eh_frame:000000000000C6E8                 db  41h ; A
.eh_frame:000000000000C6E9                 db  0Eh
.eh_frame:000000000000C6EA                 db  28h ; (
.eh_frame:000000000000C6EB                 db  83h
.eh_frame:000000000000C6EC                 db    5
.eh_frame:000000000000C6ED                 db  4Ah ; J
.eh_frame:000000000000C6EE                 db  0Eh
.eh_frame:000000000000C6EF                 db  40h ; @
.eh_frame:000000000000C6F0                 db    2
.eh_frame:000000000000C6F1                 db  64h ; d
.eh_frame:000000000000C6F2                 db  0Ah
.eh_frame:000000000000C6F3                 db  0Eh
.eh_frame:000000000000C6F4                 db  28h ; (
.eh_frame:000000000000C6F5                 db  41h ; A
.eh_frame:000000000000C6F6                 db  0Eh
.eh_frame:000000000000C6F7                 db  20h
.eh_frame:000000000000C6F8                 db  41h ; A
.eh_frame:000000000000C6F9                 db  0Eh
.eh_frame:000000000000C6FA                 db  18h
.eh_frame:000000000000C6FB                 db  42h ; B
.eh_frame:000000000000C6FC                 db  0Eh
.eh_frame:000000000000C6FD                 db  10h
.eh_frame:000000000000C6FE                 db  42h ; B
.eh_frame:000000000000C6FF                 db  0Eh
.eh_frame:000000000000C700                 db    8
.eh_frame:000000000000C701                 db  41h ; A
.eh_frame:000000000000C702                 db  0Bh
.eh_frame:000000000000C703                 db    0
.eh_frame:000000000000C704                 db    0
.eh_frame:000000000000C705                 db    0
.eh_frame:000000000000C706                 db    0
.eh_frame:000000000000C707                 db    0
.eh_frame:000000000000C708                 db  38h ; 8
.eh_frame:000000000000C709                 db    0
.eh_frame:000000000000C70A                 db    0
.eh_frame:000000000000C70B                 db    0
.eh_frame:000000000000C70C                 db  44h ; D
.eh_frame:000000000000C70D                 db  0Eh
.eh_frame:000000000000C70E                 db    0
.eh_frame:000000000000C70F                 db    0
.eh_frame:000000000000C710                 db  60h ; `
.eh_frame:000000000000C711                 db 0B2h
.eh_frame:000000000000C712                 db 0FFh
.eh_frame:000000000000C713                 db 0FFh
.eh_frame:000000000000C714                 db  16h
.eh_frame:000000000000C715                 db    1
.eh_frame:000000000000C716                 db    0
.eh_frame:000000000000C717                 db    0
.eh_frame:000000000000C718                 db    0
.eh_frame:000000000000C719                 db  42h ; B
.eh_frame:000000000000C71A                 db  0Eh
.eh_frame:000000000000C71B                 db  10h
.eh_frame:000000000000C71C                 db  8Dh
.eh_frame:000000000000C71D                 db    2
.eh_frame:000000000000C71E                 db  42h ; B
.eh_frame:000000000000C71F                 db  0Eh
.eh_frame:000000000000C720                 db  18h
.eh_frame:000000000000C721                 db  8Ch
.eh_frame:000000000000C722                 db    3
.eh_frame:000000000000C723                 db  44h ; D
.eh_frame:000000000000C724                 db  0Eh
.eh_frame:000000000000C725                 db  20h
.eh_frame:000000000000C726                 db  86h
.eh_frame:000000000000C727                 db    4
.eh_frame:000000000000C728                 db  41h ; A
.eh_frame:000000000000C729                 db  0Eh
.eh_frame:000000000000C72A                 db  28h ; (
.eh_frame:000000000000C72B                 db  83h
.eh_frame:000000000000C72C                 db    5
.eh_frame:000000000000C72D                 db  49h ; I
.eh_frame:000000000000C72E                 db  0Eh
.eh_frame:000000000000C72F                 db  90h
.eh_frame:000000000000C730                 db  20h
.eh_frame:000000000000C731                 db    2
.eh_frame:000000000000C732                 db 0C4h
.eh_frame:000000000000C733                 db  0Ah
.eh_frame:000000000000C734                 db  0Eh
.eh_frame:000000000000C735                 db  28h ; (
.eh_frame:000000000000C736                 db  41h ; A
.eh_frame:000000000000C737                 db  0Eh
.eh_frame:000000000000C738                 db  20h
.eh_frame:000000000000C739                 db  41h ; A
.eh_frame:000000000000C73A                 db  0Eh
.eh_frame:000000000000C73B                 db  18h
.eh_frame:000000000000C73C                 db  42h ; B
.eh_frame:000000000000C73D                 db  0Eh
.eh_frame:000000000000C73E                 db  10h
.eh_frame:000000000000C73F                 db  42h ; B
.eh_frame:000000000000C740                 db  0Eh
.eh_frame:000000000000C741                 db    8
.eh_frame:000000000000C742                 db  44h ; D
.eh_frame:000000000000C743                 db  0Bh
.eh_frame:000000000000C744                 db  10h
.eh_frame:000000000000C745                 db    0
.eh_frame:000000000000C746                 db    0
.eh_frame:000000000000C747                 db    0
.eh_frame:000000000000C748                 db  80h
.eh_frame:000000000000C749                 db  0Eh
.eh_frame:000000000000C74A                 db    0
.eh_frame:000000000000C74B                 db    0
.eh_frame:000000000000C74C                 db  44h ; D
.eh_frame:000000000000C74D                 db 0B3h
.eh_frame:000000000000C74E                 db 0FFh
.eh_frame:000000000000C74F                 db 0FFh
.eh_frame:000000000000C750                 db    5
.eh_frame:000000000000C751                 db    0
.eh_frame:000000000000C752                 db    0
.eh_frame:000000000000C753                 db    0
.eh_frame:000000000000C754                 db    0
.eh_frame:000000000000C755                 db    0
.eh_frame:000000000000C756                 db    0
.eh_frame:000000000000C757                 db    0
.eh_frame:000000000000C758                 db  10h
.eh_frame:000000000000C759                 db    0
.eh_frame:000000000000C75A                 db    0
.eh_frame:000000000000C75B                 db    0
.eh_frame:000000000000C75C                 db  94h
.eh_frame:000000000000C75D                 db  0Eh
.eh_frame:000000000000C75E                 db    0
.eh_frame:000000000000C75F                 db    0
.eh_frame:000000000000C760                 db  40h ; @
.eh_frame:000000000000C761                 db 0B3h
.eh_frame:000000000000C762                 db 0FFh
.eh_frame:000000000000C763                 db 0FFh
.eh_frame:000000000000C764                 db    5
.eh_frame:000000000000C765                 db    0
.eh_frame:000000000000C766                 db    0
.eh_frame:000000000000C767                 db    0
.eh_frame:000000000000C768                 db    0
.eh_frame:000000000000C769                 db    0
.eh_frame:000000000000C76A                 db    0
.eh_frame:000000000000C76B                 db    0
.eh_frame:000000000000C76C                 db  10h
.eh_frame:000000000000C76D                 db    0
.eh_frame:000000000000C76E                 db    0
.eh_frame:000000000000C76F                 db    0
.eh_frame:000000000000C770                 db 0A8h
.eh_frame:000000000000C771                 db  0Eh
.eh_frame:000000000000C772                 db    0
.eh_frame:000000000000C773                 db    0
.eh_frame:000000000000C774                 db  3Ch ; <
.eh_frame:000000000000C775                 db 0B3h
.eh_frame:000000000000C776                 db 0FFh
.eh_frame:000000000000C777                 db 0FFh
.eh_frame:000000000000C778                 db    5
.eh_frame:000000000000C779                 db    0
.eh_frame:000000000000C77A                 db    0
.eh_frame:000000000000C77B                 db    0
.eh_frame:000000000000C77C                 db    0
.eh_frame:000000000000C77D                 db    0
.eh_frame:000000000000C77E                 db    0
.eh_frame:000000000000C77F                 db    0
.eh_frame:000000000000C780                 db  4Ch ; L
.eh_frame:000000000000C781                 db    0
.eh_frame:000000000000C782                 db    0
.eh_frame:000000000000C783                 db    0
.eh_frame:000000000000C784                 db 0BCh
.eh_frame:000000000000C785                 db  0Eh
.eh_frame:000000000000C786                 db    0
.eh_frame:000000000000C787                 db    0
.eh_frame:000000000000C788                 db  38h ; 8
.eh_frame:000000000000C789                 db 0B3h
.eh_frame:000000000000C78A                 db 0FFh
.eh_frame:000000000000C78B                 db 0FFh
.eh_frame:000000000000C78C                 db  7Dh ; }
.eh_frame:000000000000C78D                 db    0
.eh_frame:000000000000C78E                 db    0
.eh_frame:000000000000C78F                 db    0
.eh_frame:000000000000C790                 db    0
.eh_frame:000000000000C791                 db  42h ; B
.eh_frame:000000000000C792                 db  0Eh
.eh_frame:000000000000C793                 db  10h
.eh_frame:000000000000C794                 db  8Ch
.eh_frame:000000000000C795                 db    2
.eh_frame:000000000000C796                 db  41h ; A
.eh_frame:000000000000C797                 db  0Eh
.eh_frame:000000000000C798                 db  18h
.eh_frame:000000000000C799                 db  86h
.eh_frame:000000000000C79A                 db    3
.eh_frame:000000000000C79B                 db  44h ; D
.eh_frame:000000000000C79C                 db  0Eh
.eh_frame:000000000000C79D                 db  20h
.eh_frame:000000000000C79E                 db  83h
.eh_frame:000000000000C79F                 db    4
.eh_frame:000000000000C7A0                 db  69h ; i
.eh_frame:000000000000C7A1                 db  0Ah
.eh_frame:000000000000C7A2                 db  0Eh
.eh_frame:000000000000C7A3                 db  18h
.eh_frame:000000000000C7A4                 db  41h ; A
.eh_frame:000000000000C7A5                 db  0Eh
.eh_frame:000000000000C7A6                 db  10h
.eh_frame:000000000000C7A7                 db  42h ; B
.eh_frame:000000000000C7A8                 db  0Eh
.eh_frame:000000000000C7A9                 db    8
.eh_frame:000000000000C7AA                 db  45h ; E
.eh_frame:000000000000C7AB                 db  0Bh
.eh_frame:000000000000C7AC                 db  55h ; U
.eh_frame:000000000000C7AD                 db  0Ah
.eh_frame:000000000000C7AE                 db  0Eh
.eh_frame:000000000000C7AF                 db  18h
.eh_frame:000000000000C7B0                 db  41h ; A
.eh_frame:000000000000C7B1                 db  0Eh
.eh_frame:000000000000C7B2                 db  10h
.eh_frame:000000000000C7B3                 db  42h ; B
.eh_frame:000000000000C7B4                 db  0Eh
.eh_frame:000000000000C7B5                 db    8
.eh_frame:000000000000C7B6                 db  48h ; H
.eh_frame:000000000000C7B7                 db  0Bh
.eh_frame:000000000000C7B8                 db  41h ; A
.eh_frame:000000000000C7B9                 db  0Ah
.eh_frame:000000000000C7BA                 db  0Eh
.eh_frame:000000000000C7BB                 db  18h
.eh_frame:000000000000C7BC                 db  46h ; F
.eh_frame:000000000000C7BD                 db  0Eh
.eh_frame:000000000000C7BE                 db  10h
.eh_frame:000000000000C7BF                 db  42h ; B
.eh_frame:000000000000C7C0                 db  0Eh
.eh_frame:000000000000C7C1                 db    8
.eh_frame:000000000000C7C2                 db  47h ; G
.eh_frame:000000000000C7C3                 db  0Bh
.eh_frame:000000000000C7C4                 db  49h ; I
.eh_frame:000000000000C7C5                 db  0Eh
.eh_frame:000000000000C7C6                 db  18h
.eh_frame:000000000000C7C7                 db  41h ; A
.eh_frame:000000000000C7C8                 db  0Eh
.eh_frame:000000000000C7C9                 db  10h
.eh_frame:000000000000C7CA                 db  42h ; B
.eh_frame:000000000000C7CB                 db  0Eh
.eh_frame:000000000000C7CC                 db    8
.eh_frame:000000000000C7CD                 db    0
.eh_frame:000000000000C7CE                 db    0
.eh_frame:000000000000C7CF                 db    0
.eh_frame:000000000000C7D0                 db  10h
.eh_frame:000000000000C7D1                 db    0
.eh_frame:000000000000C7D2                 db    0
.eh_frame:000000000000C7D3                 db    0
.eh_frame:000000000000C7D4                 db  0Ch
.eh_frame:000000000000C7D5                 db  0Fh
.eh_frame:000000000000C7D6                 db    0
.eh_frame:000000000000C7D7                 db    0
.eh_frame:000000000000C7D8                 db  68h ; h
.eh_frame:000000000000C7D9                 db 0B3h
.eh_frame:000000000000C7DA                 db 0FFh
.eh_frame:000000000000C7DB                 db 0FFh
.eh_frame:000000000000C7DC                 db  10h
.eh_frame:000000000000C7DD                 db    0
.eh_frame:000000000000C7DE                 db    0
.eh_frame:000000000000C7DF                 db    0
.eh_frame:000000000000C7E0                 db    0
.eh_frame:000000000000C7E1                 db    0
.eh_frame:000000000000C7E2                 db    0
.eh_frame:000000000000C7E3                 db    0
.eh_frame:000000000000C7E4                 db  18h
.eh_frame:000000000000C7E5                 db    0
.eh_frame:000000000000C7E6                 db    0
.eh_frame:000000000000C7E7                 db    0
.eh_frame:000000000000C7E8                 db  20h
.eh_frame:000000000000C7E9                 db  0Fh
.eh_frame:000000000000C7EA                 db    0
.eh_frame:000000000000C7EB                 db    0
.eh_frame:000000000000C7EC                 db  64h ; d
.eh_frame:000000000000C7ED                 db 0B3h
.eh_frame:000000000000C7EE                 db 0FFh
.eh_frame:000000000000C7EF                 db 0FFh
.eh_frame:000000000000C7F0                 db  8Ah
.eh_frame:000000000000C7F1                 db    0
.eh_frame:000000000000C7F2                 db    0
.eh_frame:000000000000C7F3                 db    0
.eh_frame:000000000000C7F4                 db    0
.eh_frame:000000000000C7F5                 db    2
.eh_frame:000000000000C7F6                 db  80h
.eh_frame:000000000000C7F7                 db  0Eh
.eh_frame:000000000000C7F8                 db  10h
.eh_frame:000000000000C7F9                 db    0
.eh_frame:000000000000C7FA                 db    0
.eh_frame:000000000000C7FB                 db    0
.eh_frame:000000000000C7FC                 db    0
.eh_frame:000000000000C7FD                 db    0
.eh_frame:000000000000C7FE                 db    0
.eh_frame:000000000000C7FF                 db    0
.eh_frame:000000000000C800                 db  1Ch
.eh_frame:000000000000C801                 db    0
.eh_frame:000000000000C802                 db    0
.eh_frame:000000000000C803                 db    0
.eh_frame:000000000000C804                 db  3Ch ; <
.eh_frame:000000000000C805                 db  0Fh
.eh_frame:000000000000C806                 db    0
.eh_frame:000000000000C807                 db    0
.eh_frame:000000000000C808                 db 0D8h
.eh_frame:000000000000C809                 db 0B3h
.eh_frame:000000000000C80A                 db 0FFh
.eh_frame:000000000000C80B                 db 0FFh
.eh_frame:000000000000C80C                 db  6Eh ; n
.eh_frame:000000000000C80D                 db    0
.eh_frame:000000000000C80E                 db    0
.eh_frame:000000000000C80F                 db    0
.eh_frame:000000000000C810                 db    0
.eh_frame:000000000000C811                 db  44h ; D
.eh_frame:000000000000C812                 db  0Eh
.eh_frame:000000000000C813                 db  60h ; `
.eh_frame:000000000000C814                 db  7Fh ; 
.eh_frame:000000000000C815                 db  0Ah
.eh_frame:000000000000C816                 db  0Eh
.eh_frame:000000000000C817                 db    8
.eh_frame:000000000000C818                 db  45h ; E
.eh_frame:000000000000C819                 db  0Bh
.eh_frame:000000000000C81A                 db    0
.eh_frame:000000000000C81B                 db    0
.eh_frame:000000000000C81C                 db    0
.eh_frame:000000000000C81D                 db    0
.eh_frame:000000000000C81E                 db    0
.eh_frame:000000000000C81F                 db    0
.eh_frame:000000000000C820                 db  1Ch
.eh_frame:000000000000C821                 db    0
.eh_frame:000000000000C822                 db    0
.eh_frame:000000000000C823                 db    0
.eh_frame:000000000000C824                 db  5Ch ; \
.eh_frame:000000000000C825                 db  0Fh
.eh_frame:000000000000C826                 db    0
.eh_frame:000000000000C827                 db    0
.eh_frame:000000000000C828                 db  28h ; (
.eh_frame:000000000000C829                 db 0B4h
.eh_frame:000000000000C82A                 db 0FFh
.eh_frame:000000000000C82B                 db 0FFh
.eh_frame:000000000000C82C                 db  60h ; `
.eh_frame:000000000000C82D                 db    0
.eh_frame:000000000000C82E                 db    0
.eh_frame:000000000000C82F                 db    0
.eh_frame:000000000000C830                 db    0
.eh_frame:000000000000C831                 db  44h ; D
.eh_frame:000000000000C832                 db  0Eh
.eh_frame:000000000000C833                 db  10h
.eh_frame:000000000000C834                 db  75h ; u
.eh_frame:000000000000C835                 db  0Ah
.eh_frame:000000000000C836                 db  0Eh
.eh_frame:000000000000C837                 db    8
.eh_frame:000000000000C838                 db  47h ; G
.eh_frame:000000000000C839                 db  0Bh
.eh_frame:000000000000C83A                 db  5Fh ; _
.eh_frame:000000000000C83B                 db  0Eh
.eh_frame:000000000000C83C                 db    8
.eh_frame:000000000000C83D                 db    0
.eh_frame:000000000000C83E                 db    0
.eh_frame:000000000000C83F                 db    0
.eh_frame:000000000000C840                 db  10h
.eh_frame:000000000000C841                 db    0
.eh_frame:000000000000C842                 db    0
.eh_frame:000000000000C843                 db    0
.eh_frame:000000000000C844                 db  7Ch ; |
.eh_frame:000000000000C845                 db  0Fh
.eh_frame:000000000000C846                 db    0
.eh_frame:000000000000C847                 db    0
.eh_frame:000000000000C848                 db  68h ; h
.eh_frame:000000000000C849                 db 0B4h
.eh_frame:000000000000C84A                 db 0FFh
.eh_frame:000000000000C84B                 db 0FFh
.eh_frame:000000000000C84C                 db  93h
.eh_frame:000000000000C84D                 db    0
.eh_frame:000000000000C84E                 db    0
.eh_frame:000000000000C84F                 db    0
.eh_frame:000000000000C850                 db    0
.eh_frame:000000000000C851                 db    0
.eh_frame:000000000000C852                 db    0
.eh_frame:000000000000C853                 db    0
.eh_frame:000000000000C854                 db  10h
.eh_frame:000000000000C855                 db    0
.eh_frame:000000000000C856                 db    0
.eh_frame:000000000000C857                 db    0
.eh_frame:000000000000C858                 db  90h
.eh_frame:000000000000C859                 db  0Fh
.eh_frame:000000000000C85A                 db    0
.eh_frame:000000000000C85B                 db    0
.eh_frame:000000000000C85C                 db 0F4h
.eh_frame:000000000000C85D                 db 0B4h
.eh_frame:000000000000C85E                 db 0FFh
.eh_frame:000000000000C85F                 db 0FFh
.eh_frame:000000000000C860                 db  10h
.eh_frame:000000000000C861                 db    0
.eh_frame:000000000000C862                 db    0
.eh_frame:000000000000C863                 db    0
.eh_frame:000000000000C864                 db    0
.eh_frame:000000000000C865                 db    0
.eh_frame:000000000000C866                 db    0
.eh_frame:000000000000C867                 db    0
.eh_frame:000000000000C868                 db  10h
.eh_frame:000000000000C869                 db    0
.eh_frame:000000000000C86A                 db    0
.eh_frame:000000000000C86B                 db    0
.eh_frame:000000000000C86C                 db 0A4h
.eh_frame:000000000000C86D                 db  0Fh
.eh_frame:000000000000C86E                 db    0
.eh_frame:000000000000C86F                 db    0
.eh_frame:000000000000C870                 db 0F0h
.eh_frame:000000000000C871                 db 0B4h
.eh_frame:000000000000C872                 db 0FFh
.eh_frame:000000000000C873                 db 0FFh
.eh_frame:000000000000C874                 db    7
.eh_frame:000000000000C875                 db    0
.eh_frame:000000000000C876                 db    0
.eh_frame:000000000000C877                 db    0
.eh_frame:000000000000C878                 db    0
.eh_frame:000000000000C879                 db    0
.eh_frame:000000000000C87A                 db    0
.eh_frame:000000000000C87B                 db    0
.eh_frame:000000000000C87C                 db  18h
.eh_frame:000000000000C87D                 db    0
.eh_frame:000000000000C87E                 db    0
.eh_frame:000000000000C87F                 db    0
.eh_frame:000000000000C880                 db 0B8h
.eh_frame:000000000000C881                 db  0Fh
.eh_frame:000000000000C882                 db    0
.eh_frame:000000000000C883                 db    0
.eh_frame:000000000000C884                 db 0ECh
.eh_frame:000000000000C885                 db 0B4h
.eh_frame:000000000000C886                 db 0FFh
.eh_frame:000000000000C887                 db 0FFh
.eh_frame:000000000000C888                 db  22h ; "
.eh_frame:000000000000C889                 db    0
.eh_frame:000000000000C88A                 db    0
.eh_frame:000000000000C88B                 db    0
.eh_frame:000000000000C88C                 db    0
.eh_frame:000000000000C88D                 db  41h ; A
.eh_frame:000000000000C88E                 db  0Eh
.eh_frame:000000000000C88F                 db  10h
.eh_frame:000000000000C890                 db  83h
.eh_frame:000000000000C891                 db    2
.eh_frame:000000000000C892                 db  5Bh ; [
.eh_frame:000000000000C893                 db  0Ah
.eh_frame:000000000000C894                 db  0Eh
.eh_frame:000000000000C895                 db    8
.eh_frame:000000000000C896                 db  41h ; A
.eh_frame:000000000000C897                 db  0Bh
.eh_frame:000000000000C898                 db  5Ch ; \
.eh_frame:000000000000C899                 db    0
.eh_frame:000000000000C89A                 db    0
.eh_frame:000000000000C89B                 db    0
.eh_frame:000000000000C89C                 db 0D4h
.eh_frame:000000000000C89D                 db  0Fh
.eh_frame:000000000000C89E                 db    0
.eh_frame:000000000000C89F                 db    0
.eh_frame:000000000000C8A0                 db    0
.eh_frame:000000000000C8A1                 db 0B5h
.eh_frame:000000000000C8A2                 db 0FFh
.eh_frame:000000000000C8A3                 db 0FFh
.eh_frame:000000000000C8A4                 db  1Eh
.eh_frame:000000000000C8A5                 db    1
.eh_frame:000000000000C8A6                 db    0
.eh_frame:000000000000C8A7                 db    0
.eh_frame:000000000000C8A8                 db    0
.eh_frame:000000000000C8A9                 db  42h ; B
.eh_frame:000000000000C8AA                 db  0Eh
.eh_frame:000000000000C8AB                 db  10h
.eh_frame:000000000000C8AC                 db  8Eh
.eh_frame:000000000000C8AD                 db    2
.eh_frame:000000000000C8AE                 db  42h ; B
.eh_frame:000000000000C8AF                 db  0Eh
.eh_frame:000000000000C8B0                 db  18h
.eh_frame:000000000000C8B1                 db  8Dh
.eh_frame:000000000000C8B2                 db    3
.eh_frame:000000000000C8B3                 db  45h ; E
.eh_frame:000000000000C8B4                 db  0Eh
.eh_frame:000000000000C8B5                 db  20h
.eh_frame:000000000000C8B6                 db  8Ch
.eh_frame:000000000000C8B7                 db    4
.eh_frame:000000000000C8B8                 db  41h ; A
.eh_frame:000000000000C8B9                 db  0Eh
.eh_frame:000000000000C8BA                 db  28h ; (
.eh_frame:000000000000C8BB                 db  86h
.eh_frame:000000000000C8BC                 db    5
.eh_frame:000000000000C8BD                 db  44h ; D
.eh_frame:000000000000C8BE                 db  0Eh
.eh_frame:000000000000C8BF                 db  30h ; 0
.eh_frame:000000000000C8C0                 db  83h
.eh_frame:000000000000C8C1                 db    6
.eh_frame:000000000000C8C2                 db    2
.eh_frame:000000000000C8C3                 db 0A1h
.eh_frame:000000000000C8C4                 db  0Ah
.eh_frame:000000000000C8C5                 db  0Eh
.eh_frame:000000000000C8C6                 db  28h ; (
.eh_frame:000000000000C8C7                 db  44h ; D
.eh_frame:000000000000C8C8                 db  0Eh
.eh_frame:000000000000C8C9                 db  20h
.eh_frame:000000000000C8CA                 db  42h ; B
.eh_frame:000000000000C8CB                 db  0Eh
.eh_frame:000000000000C8CC                 db  18h
.eh_frame:000000000000C8CD                 db  42h ; B
.eh_frame:000000000000C8CE                 db  0Eh
.eh_frame:000000000000C8CF                 db  10h
.eh_frame:000000000000C8D0                 db  42h ; B
.eh_frame:000000000000C8D1                 db  0Eh
.eh_frame:000000000000C8D2                 db    8
.eh_frame:000000000000C8D3                 db  47h ; G
.eh_frame:000000000000C8D4                 db  0Bh
.eh_frame:000000000000C8D5                 db  71h ; q
.eh_frame:000000000000C8D6                 db  0Ah
.eh_frame:000000000000C8D7                 db  0Eh
.eh_frame:000000000000C8D8                 db  28h ; (
.eh_frame:000000000000C8D9                 db  41h ; A
.eh_frame:000000000000C8DA                 db  0Eh
.eh_frame:000000000000C8DB                 db  20h
.eh_frame:000000000000C8DC                 db  42h ; B
.eh_frame:000000000000C8DD                 db  0Eh
.eh_frame:000000000000C8DE                 db  18h
.eh_frame:000000000000C8DF                 db  42h ; B
.eh_frame:000000000000C8E0                 db  0Eh
.eh_frame:000000000000C8E1                 db  10h
.eh_frame:000000000000C8E2                 db  42h ; B
.eh_frame:000000000000C8E3                 db  0Eh
.eh_frame:000000000000C8E4                 db    8
.eh_frame:000000000000C8E5                 db  48h ; H
.eh_frame:000000000000C8E6                 db  0Bh
.eh_frame:000000000000C8E7                 db  53h ; S
.eh_frame:000000000000C8E8                 db  0Eh
.eh_frame:000000000000C8E9                 db  28h ; (
.eh_frame:000000000000C8EA                 db  44h ; D
.eh_frame:000000000000C8EB                 db  0Eh
.eh_frame:000000000000C8EC                 db  20h
.eh_frame:000000000000C8ED                 db  42h ; B
.eh_frame:000000000000C8EE                 db  0Eh
.eh_frame:000000000000C8EF                 db  18h
.eh_frame:000000000000C8F0                 db  42h ; B
.eh_frame:000000000000C8F1                 db  0Eh
.eh_frame:000000000000C8F2                 db  10h
.eh_frame:000000000000C8F3                 db  42h ; B
.eh_frame:000000000000C8F4                 db  0Eh
.eh_frame:000000000000C8F5                 db    8
.eh_frame:000000000000C8F6                 db    0
.eh_frame:000000000000C8F7                 db    0
.eh_frame:000000000000C8F8                 db  10h
.eh_frame:000000000000C8F9                 db    0
.eh_frame:000000000000C8FA                 db    0
.eh_frame:000000000000C8FB                 db    0
.eh_frame:000000000000C8FC                 db  34h ; 4
.eh_frame:000000000000C8FD                 db  10h
.eh_frame:000000000000C8FE                 db    0
.eh_frame:000000000000C8FF                 db    0
.eh_frame:000000000000C900                 db 0C0h
.eh_frame:000000000000C901                 db 0B5h
.eh_frame:000000000000C902                 db 0FFh
.eh_frame:000000000000C903                 db 0FFh
.eh_frame:000000000000C904                 db  77h ; w
.eh_frame:000000000000C905                 db    0
.eh_frame:000000000000C906                 db    0
.eh_frame:000000000000C907                 db    0
.eh_frame:000000000000C908                 db    0
.eh_frame:000000000000C909                 db    0
.eh_frame:000000000000C90A                 db    0
.eh_frame:000000000000C90B                 db    0
.eh_frame:000000000000C90C                 db  5Ch ; \
.eh_frame:000000000000C90D                 db    0
.eh_frame:000000000000C90E                 db    0
.eh_frame:000000000000C90F                 db    0
.eh_frame:000000000000C910                 db  48h ; H
.eh_frame:000000000000C911                 db  10h
.eh_frame:000000000000C912                 db    0
.eh_frame:000000000000C913                 db    0
.eh_frame:000000000000C914                 db  2Ch ; ,
.eh_frame:000000000000C915                 db 0B6h
.eh_frame:000000000000C916                 db 0FFh
.eh_frame:000000000000C917                 db 0FFh
.eh_frame:000000000000C918                 db  40h ; @
.eh_frame:000000000000C919                 db    1
.eh_frame:000000000000C91A                 db    0
.eh_frame:000000000000C91B                 db    0
.eh_frame:000000000000C91C                 db    0
.eh_frame:000000000000C91D                 db  42h ; B
.eh_frame:000000000000C91E                 db  0Eh
.eh_frame:000000000000C91F                 db  10h
.eh_frame:000000000000C920                 db  8Fh
.eh_frame:000000000000C921                 db    2
.eh_frame:000000000000C922                 db  42h ; B
.eh_frame:000000000000C923                 db  0Eh
.eh_frame:000000000000C924                 db  18h
.eh_frame:000000000000C925                 db  8Eh
.eh_frame:000000000000C926                 db    3
.eh_frame:000000000000C927                 db  42h ; B
.eh_frame:000000000000C928                 db  0Eh
.eh_frame:000000000000C929                 db  20h
.eh_frame:000000000000C92A                 db  8Dh
.eh_frame:000000000000C92B                 db    4
.eh_frame:000000000000C92C                 db  42h ; B
.eh_frame:000000000000C92D                 db  0Eh
.eh_frame:000000000000C92E                 db  28h ; (
.eh_frame:000000000000C92F                 db  8Ch
.eh_frame:000000000000C930                 db    5
.eh_frame:000000000000C931                 db  41h ; A
.eh_frame:000000000000C932                 db  0Eh
.eh_frame:000000000000C933                 db  30h ; 0
.eh_frame:000000000000C934                 db  86h
.eh_frame:000000000000C935                 db    6
.eh_frame:000000000000C936                 db  41h ; A
.eh_frame:000000000000C937                 db  0Eh
.eh_frame:000000000000C938                 db  38h ; 8
.eh_frame:000000000000C939                 db  83h
.eh_frame:000000000000C93A                 db    7
.eh_frame:000000000000C93B                 db  44h ; D
.eh_frame:000000000000C93C                 db  0Eh
.eh_frame:000000000000C93D                 db  40h ; @
.eh_frame:000000000000C93E                 db    2
.eh_frame:000000000000C93F                 db 0EEh
.eh_frame:000000000000C940                 db  0Ah
.eh_frame:000000000000C941                 db  0Eh
.eh_frame:000000000000C942                 db  38h ; 8
.eh_frame:000000000000C943                 db  46h ; F
.eh_frame:000000000000C944                 db  0Eh
.eh_frame:000000000000C945                 db  30h ; 0
.eh_frame:000000000000C946                 db  41h ; A
.eh_frame:000000000000C947                 db  0Eh
.eh_frame:000000000000C948                 db  28h ; (
.eh_frame:000000000000C949                 db  42h ; B
.eh_frame:000000000000C94A                 db  0Eh
.eh_frame:000000000000C94B                 db  20h
.eh_frame:000000000000C94C                 db  42h ; B
.eh_frame:000000000000C94D                 db  0Eh
.eh_frame:000000000000C94E                 db  18h
.eh_frame:000000000000C94F                 db  42h ; B
.eh_frame:000000000000C950                 db  0Eh
.eh_frame:000000000000C951                 db  10h
.eh_frame:000000000000C952                 db  42h ; B
.eh_frame:000000000000C953                 db  0Eh
.eh_frame:000000000000C954                 db    8
.eh_frame:000000000000C955                 db  45h ; E
.eh_frame:000000000000C956                 db  0Bh
.eh_frame:000000000000C957                 db  63h ; c
.eh_frame:000000000000C958                 db  0Eh
.eh_frame:000000000000C959                 db  38h ; 8
.eh_frame:000000000000C95A                 db  43h ; C
.eh_frame:000000000000C95B                 db  0Eh
.eh_frame:000000000000C95C                 db  30h ; 0
.eh_frame:000000000000C95D                 db  41h ; A
.eh_frame:000000000000C95E                 db  0Eh
.eh_frame:000000000000C95F                 db  28h ; (
.eh_frame:000000000000C960                 db  42h ; B
.eh_frame:000000000000C961                 db  0Eh
.eh_frame:000000000000C962                 db  20h
.eh_frame:000000000000C963                 db  42h ; B
.eh_frame:000000000000C964                 db  0Eh
.eh_frame:000000000000C965                 db  18h
.eh_frame:000000000000C966                 db  42h ; B
.eh_frame:000000000000C967                 db  0Eh
.eh_frame:000000000000C968                 db  10h
.eh_frame:000000000000C969                 db  42h ; B
.eh_frame:000000000000C96A                 db  0Eh
.eh_frame:000000000000C96B                 db    8
.eh_frame:000000000000C96C                 db  10h
.eh_frame:000000000000C96D                 db    0
.eh_frame:000000000000C96E                 db    0
.eh_frame:000000000000C96F                 db    0
.eh_frame:000000000000C970                 db 0A8h
.eh_frame:000000000000C971                 db  10h
.eh_frame:000000000000C972                 db    0
.eh_frame:000000000000C973                 db    0
.eh_frame:000000000000C974                 db  0Ch
.eh_frame:000000000000C975                 db 0B7h
.eh_frame:000000000000C976                 db 0FFh
.eh_frame:000000000000C977                 db 0FFh
.eh_frame:000000000000C978                 db    5
.eh_frame:000000000000C979                 db    0
.eh_frame:000000000000C97A                 db    0
.eh_frame:000000000000C97B                 db    0
.eh_frame:000000000000C97C                 db    0
.eh_frame:000000000000C97D                 db    0
.eh_frame:000000000000C97E                 db    0
.eh_frame:000000000000C97F                 db    0
.eh_frame:000000000000C980                 db  10h
.eh_frame:000000000000C981                 db    0
.eh_frame:000000000000C982                 db    0
.eh_frame:000000000000C983                 db    0
.eh_frame:000000000000C984                 db 0BCh
.eh_frame:000000000000C985                 db  10h
.eh_frame:000000000000C986                 db    0
.eh_frame:000000000000C987                 db    0
.eh_frame:000000000000C988                 db    8
.eh_frame:000000000000C989                 db 0B7h
.eh_frame:000000000000C98A                 db 0FFh
.eh_frame:000000000000C98B                 db 0FFh
.eh_frame:000000000000C98C                 db    5
.eh_frame:000000000000C98D                 db    0
.eh_frame:000000000000C98E                 db    0
.eh_frame:000000000000C98F                 db    0
.eh_frame:000000000000C990                 db    0
.eh_frame:000000000000C991                 db    0
.eh_frame:000000000000C992                 db    0
.eh_frame:000000000000C993                 db    0
.eh_frame:000000000000C994                 db  10h
.eh_frame:000000000000C995                 db    0
.eh_frame:000000000000C996                 db    0
.eh_frame:000000000000C997                 db    0
.eh_frame:000000000000C998                 db 0D0h
.eh_frame:000000000000C999                 db  10h
.eh_frame:000000000000C99A                 db    0
.eh_frame:000000000000C99B                 db    0
.eh_frame:000000000000C99C                 db    4
.eh_frame:000000000000C99D                 db 0B7h
.eh_frame:000000000000C99E                 db 0FFh
.eh_frame:000000000000C99F                 db 0FFh
.eh_frame:000000000000C9A0                 db    5
.eh_frame:000000000000C9A1                 db    0
.eh_frame:000000000000C9A2                 db    0
.eh_frame:000000000000C9A3                 db    0
.eh_frame:000000000000C9A4                 db    0
.eh_frame:000000000000C9A5                 db    0
.eh_frame:000000000000C9A6                 db    0
.eh_frame:000000000000C9A7                 db    0
.eh_frame:000000000000C9A8                 db  10h
.eh_frame:000000000000C9A9                 db    0
.eh_frame:000000000000C9AA                 db    0
.eh_frame:000000000000C9AB                 db    0
.eh_frame:000000000000C9AC                 db 0E4h
.eh_frame:000000000000C9AD                 db  10h
.eh_frame:000000000000C9AE                 db    0
.eh_frame:000000000000C9AF                 db    0
.eh_frame:000000000000C9B0                 db    0
.eh_frame:000000000000C9B1                 db 0B7h
.eh_frame:000000000000C9B2                 db 0FFh
.eh_frame:000000000000C9B3                 db 0FFh
.eh_frame:000000000000C9B4                 db  49h ; I
.eh_frame:000000000000C9B5                 db    0
.eh_frame:000000000000C9B6                 db    0
.eh_frame:000000000000C9B7                 db    0
.eh_frame:000000000000C9B8                 db    0
.eh_frame:000000000000C9B9                 db    0
.eh_frame:000000000000C9BA                 db    0
.eh_frame:000000000000C9BB                 db    0
.eh_frame:000000000000C9BC                 db  10h
.eh_frame:000000000000C9BD                 db    0
.eh_frame:000000000000C9BE                 db    0
.eh_frame:000000000000C9BF                 db    0
.eh_frame:000000000000C9C0                 db 0F8h
.eh_frame:000000000000C9C1                 db  10h
.eh_frame:000000000000C9C2                 db    0
.eh_frame:000000000000C9C3                 db    0
.eh_frame:000000000000C9C4                 db  3Ch ; <
.eh_frame:000000000000C9C5                 db 0B7h
.eh_frame:000000000000C9C6                 db 0FFh
.eh_frame:000000000000C9C7                 db 0FFh
.eh_frame:000000000000C9C8                 db  58h ; X
.eh_frame:000000000000C9C9                 db    0
.eh_frame:000000000000C9CA                 db    0
.eh_frame:000000000000C9CB                 db    0
.eh_frame:000000000000C9CC                 db    0
.eh_frame:000000000000C9CD                 db    0
.eh_frame:000000000000C9CE                 db    0
.eh_frame:000000000000C9CF                 db    0
.eh_frame:000000000000C9D0                 db  38h ; 8
.eh_frame:000000000000C9D1                 db    0
.eh_frame:000000000000C9D2                 db    0
.eh_frame:000000000000C9D3                 db    0
.eh_frame:000000000000C9D4                 db  0Ch
.eh_frame:000000000000C9D5                 db  11h
.eh_frame:000000000000C9D6                 db    0
.eh_frame:000000000000C9D7                 db    0
.eh_frame:000000000000C9D8                 db  88h
.eh_frame:000000000000C9D9                 db 0B7h
.eh_frame:000000000000C9DA                 db 0FFh
.eh_frame:000000000000C9DB                 db 0FFh
.eh_frame:000000000000C9DC                 db  47h ; G
.eh_frame:000000000000C9DD                 db    1
.eh_frame:000000000000C9DE                 db    0
.eh_frame:000000000000C9DF                 db    0
.eh_frame:000000000000C9E0                 db    0
.eh_frame:000000000000C9E1                 db  42h ; B
.eh_frame:000000000000C9E2                 db  0Eh
.eh_frame:000000000000C9E3                 db  10h
.eh_frame:000000000000C9E4                 db  8Dh
.eh_frame:000000000000C9E5                 db    2
.eh_frame:000000000000C9E6                 db  42h ; B
.eh_frame:000000000000C9E7                 db  0Eh
.eh_frame:000000000000C9E8                 db  18h
.eh_frame:000000000000C9E9                 db  8Ch
.eh_frame:000000000000C9EA                 db    3
.eh_frame:000000000000C9EB                 db  44h ; D
.eh_frame:000000000000C9EC                 db  0Eh
.eh_frame:000000000000C9ED                 db  20h
.eh_frame:000000000000C9EE                 db  86h
.eh_frame:000000000000C9EF                 db    4
.eh_frame:000000000000C9F0                 db  41h ; A
.eh_frame:000000000000C9F1                 db  0Eh
.eh_frame:000000000000C9F2                 db  28h ; (
.eh_frame:000000000000C9F3                 db  83h
.eh_frame:000000000000C9F4                 db    5
.eh_frame:000000000000C9F5                 db  46h ; F
.eh_frame:000000000000C9F6                 db  0Eh
.eh_frame:000000000000C9F7                 db  30h ; 0
.eh_frame:000000000000C9F8                 db    2
.eh_frame:000000000000C9F9                 db 0CDh
.eh_frame:000000000000C9FA                 db  0Ah
.eh_frame:000000000000C9FB                 db  0Eh
.eh_frame:000000000000C9FC                 db  28h ; (
.eh_frame:000000000000C9FD                 db  47h ; G
.eh_frame:000000000000C9FE                 db  0Eh
.eh_frame:000000000000C9FF                 db  20h
.eh_frame:000000000000CA00                 db  41h ; A
.eh_frame:000000000000CA01                 db  0Eh
.eh_frame:000000000000CA02                 db  18h
.eh_frame:000000000000CA03                 db  42h ; B
.eh_frame:000000000000CA04                 db  0Eh
.eh_frame:000000000000CA05                 db  10h
.eh_frame:000000000000CA06                 db  42h ; B
.eh_frame:000000000000CA07                 db  0Eh
.eh_frame:000000000000CA08                 db    8
.eh_frame:000000000000CA09                 db  58h ; X
.eh_frame:000000000000CA0A                 db  0Bh
.eh_frame:000000000000CA0B                 db    0
.eh_frame:000000000000CA0C                 db  34h ; 4
.eh_frame:000000000000CA0D                 db    0
.eh_frame:000000000000CA0E                 db    0
.eh_frame:000000000000CA0F                 db    0
.eh_frame:000000000000CA10                 db  48h ; H
.eh_frame:000000000000CA11                 db  11h
.eh_frame:000000000000CA12                 db    0
.eh_frame:000000000000CA13                 db    0
.eh_frame:000000000000CA14                 db  9Ch
.eh_frame:000000000000CA15                 db 0B8h
.eh_frame:000000000000CA16                 db 0FFh
.eh_frame:000000000000CA17                 db 0FFh
.eh_frame:000000000000CA18                 db  5Bh ; [
.eh_frame:000000000000CA19                 db    0
.eh_frame:000000000000CA1A                 db    0
.eh_frame:000000000000CA1B                 db    0
.eh_frame:000000000000CA1C                 db    0
.eh_frame:000000000000CA1D                 db  42h ; B
.eh_frame:000000000000CA1E                 db  0Eh
.eh_frame:000000000000CA1F                 db  10h
.eh_frame:000000000000CA20                 db  8Ch
.eh_frame:000000000000CA21                 db    2
.eh_frame:000000000000CA22                 db  41h ; A
.eh_frame:000000000000CA23                 db  0Eh
.eh_frame:000000000000CA24                 db  18h
.eh_frame:000000000000CA25                 db  86h
.eh_frame:000000000000CA26                 db    3
.eh_frame:000000000000CA27                 db  44h ; D
.eh_frame:000000000000CA28                 db  0Eh
.eh_frame:000000000000CA29                 db  20h
.eh_frame:000000000000CA2A                 db  83h
.eh_frame:000000000000CA2B                 db    4
.eh_frame:000000000000CA2C                 db  79h ; y
.eh_frame:000000000000CA2D                 db  0Ah
.eh_frame:000000000000CA2E                 db  0Eh
.eh_frame:000000000000CA2F                 db  18h
.eh_frame:000000000000CA30                 db  44h ; D
.eh_frame:000000000000CA31                 db  0Eh
.eh_frame:000000000000CA32                 db  10h
.eh_frame:000000000000CA33                 db  42h ; B
.eh_frame:000000000000CA34                 db  0Eh
.eh_frame:000000000000CA35                 db    8
.eh_frame:000000000000CA36                 db  4Ah ; J
.eh_frame:000000000000CA37                 db  0Bh
.eh_frame:000000000000CA38                 db  44h ; D
.eh_frame:000000000000CA39                 db  0Eh
.eh_frame:000000000000CA3A                 db  18h
.eh_frame:000000000000CA3B                 db  41h ; A
.eh_frame:000000000000CA3C                 db  0Eh
.eh_frame:000000000000CA3D                 db  10h
.eh_frame:000000000000CA3E                 db  45h ; E
.eh_frame:000000000000CA3F                 db  0Eh
.eh_frame:000000000000CA40                 db    8
.eh_frame:000000000000CA41                 db    0
.eh_frame:000000000000CA42                 db    0
.eh_frame:000000000000CA43                 db    0
.eh_frame:000000000000CA44                 db  10h
.eh_frame:000000000000CA45                 db    0
.eh_frame:000000000000CA46                 db    0
.eh_frame:000000000000CA47                 db    0
.eh_frame:000000000000CA48                 db  80h
.eh_frame:000000000000CA49                 db  11h
.eh_frame:000000000000CA4A                 db    0
.eh_frame:000000000000CA4B                 db    0
.eh_frame:000000000000CA4C                 db 0C4h
.eh_frame:000000000000CA4D                 db 0B8h
.eh_frame:000000000000CA4E                 db 0FFh
.eh_frame:000000000000CA4F                 db 0FFh
.eh_frame:000000000000CA50                 db  41h ; A
.eh_frame:000000000000CA51                 db    0
.eh_frame:000000000000CA52                 db    0
.eh_frame:000000000000CA53                 db    0
.eh_frame:000000000000CA54                 db    0
.eh_frame:000000000000CA55                 db  7Ch ; |
.eh_frame:000000000000CA56                 db  0Eh
.eh_frame:000000000000CA57                 db  10h
.eh_frame:000000000000CA58                 db  30h ; 0
.eh_frame:000000000000CA59                 db    0
.eh_frame:000000000000CA5A                 db    0
.eh_frame:000000000000CA5B                 db    0
.eh_frame:000000000000CA5C                 db  94h
.eh_frame:000000000000CA5D                 db  11h
.eh_frame:000000000000CA5E                 db    0
.eh_frame:000000000000CA5F                 db    0
.eh_frame:000000000000CA60                 db    0
.eh_frame:000000000000CA61                 db 0B9h
.eh_frame:000000000000CA62                 db 0FFh
.eh_frame:000000000000CA63                 db 0FFh
.eh_frame:000000000000CA64                 db  72h ; r
.eh_frame:000000000000CA65                 db    0
.eh_frame:000000000000CA66                 db    0
.eh_frame:000000000000CA67                 db    0
.eh_frame:000000000000CA68                 db    0
.eh_frame:000000000000CA69                 db  41h ; A
.eh_frame:000000000000CA6A                 db  0Eh
.eh_frame:000000000000CA6B                 db  10h
.eh_frame:000000000000CA6C                 db  86h
.eh_frame:000000000000CA6D                 db    2
.eh_frame:000000000000CA6E                 db  41h ; A
.eh_frame:000000000000CA6F                 db  0Eh
.eh_frame:000000000000CA70                 db  18h
.eh_frame:000000000000CA71                 db  83h
.eh_frame:000000000000CA72                 db    3
.eh_frame:000000000000CA73                 db  4Ah ; J
.eh_frame:000000000000CA74                 db  0Eh
.eh_frame:000000000000CA75                 db  20h
.eh_frame:000000000000CA76                 db    2
.eh_frame:000000000000CA77                 db  53h ; S
.eh_frame:000000000000CA78                 db  0Ah
.eh_frame:000000000000CA79                 db  0Eh
.eh_frame:000000000000CA7A                 db  18h
.eh_frame:000000000000CA7B                 db  41h ; A
.eh_frame:000000000000CA7C                 db  0Eh
.eh_frame:000000000000CA7D                 db  10h
.eh_frame:000000000000CA7E                 db  41h ; A
.eh_frame:000000000000CA7F                 db  0Eh
.eh_frame:000000000000CA80                 db    8
.eh_frame:000000000000CA81                 db  47h ; G
.eh_frame:000000000000CA82                 db  0Bh
.eh_frame:000000000000CA83                 db  47h ; G
.eh_frame:000000000000CA84                 db  0Eh
.eh_frame:000000000000CA85                 db  18h
.eh_frame:000000000000CA86                 db  41h ; A
.eh_frame:000000000000CA87                 db  0Eh
.eh_frame:000000000000CA88                 db  10h
.eh_frame:000000000000CA89                 db  41h ; A
.eh_frame:000000000000CA8A                 db  0Eh
.eh_frame:000000000000CA8B                 db    8
.eh_frame:000000000000CA8C                 db  10h
.eh_frame:000000000000CA8D                 db    0
.eh_frame:000000000000CA8E                 db    0
.eh_frame:000000000000CA8F                 db    0
.eh_frame:000000000000CA90                 db 0C8h
.eh_frame:000000000000CA91                 db  11h
.eh_frame:000000000000CA92                 db    0
.eh_frame:000000000000CA93                 db    0
.eh_frame:000000000000CA94                 db  4Ch ; L
.eh_frame:000000000000CA95                 db 0B9h
.eh_frame:000000000000CA96                 db 0FFh
.eh_frame:000000000000CA97                 db 0FFh
.eh_frame:000000000000CA98                 db  65h ; e
.eh_frame:000000000000CA99                 db    0
.eh_frame:000000000000CA9A                 db    0
.eh_frame:000000000000CA9B                 db    0
.eh_frame:000000000000CA9C                 db    0
.eh_frame:000000000000CA9D                 db    0
.eh_frame:000000000000CA9E                 db    0
.eh_frame:000000000000CA9F                 db    0
.eh_frame:000000000000CAA0                 db  48h ; H
.eh_frame:000000000000CAA1                 db    0
.eh_frame:000000000000CAA2                 db    0
.eh_frame:000000000000CAA3                 db    0
.eh_frame:000000000000CAA4                 db 0DCh
.eh_frame:000000000000CAA5                 db  11h
.eh_frame:000000000000CAA6                 db    0
.eh_frame:000000000000CAA7                 db    0
.eh_frame:000000000000CAA8                 db 0A8h
.eh_frame:000000000000CAA9                 db 0B9h
.eh_frame:000000000000CAAA                 db 0FFh
.eh_frame:000000000000CAAB                 db 0FFh
.eh_frame:000000000000CAAC                 db  6Ah ; j
.eh_frame:000000000000CAAD                 db    0
.eh_frame:000000000000CAAE                 db    0
.eh_frame:000000000000CAAF                 db    0
.eh_frame:000000000000CAB0                 db    0
.eh_frame:000000000000CAB1                 db  42h ; B
.eh_frame:000000000000CAB2                 db  0Eh
.eh_frame:000000000000CAB3                 db  10h
.eh_frame:000000000000CAB4                 db  8Fh
.eh_frame:000000000000CAB5                 db    2
.eh_frame:000000000000CAB6                 db  42h ; B
.eh_frame:000000000000CAB7                 db  0Eh
.eh_frame:000000000000CAB8                 db  18h
.eh_frame:000000000000CAB9                 db  8Eh
.eh_frame:000000000000CABA                 db    3
.eh_frame:000000000000CABB                 db  42h ; B
.eh_frame:000000000000CABC                 db  0Eh
.eh_frame:000000000000CABD                 db  20h
.eh_frame:000000000000CABE                 db  8Dh
.eh_frame:000000000000CABF                 db    4
.eh_frame:000000000000CAC0                 db  42h ; B
.eh_frame:000000000000CAC1                 db  0Eh
.eh_frame:000000000000CAC2                 db  28h ; (
.eh_frame:000000000000CAC3                 db  8Ch
.eh_frame:000000000000CAC4                 db    5
.eh_frame:000000000000CAC5                 db  41h ; A
.eh_frame:000000000000CAC6                 db  0Eh
.eh_frame:000000000000CAC7                 db  30h ; 0
.eh_frame:000000000000CAC8                 db  86h
.eh_frame:000000000000CAC9                 db    6
.eh_frame:000000000000CACA                 db  41h ; A
.eh_frame:000000000000CACB                 db  0Eh
.eh_frame:000000000000CACC                 db  38h ; 8
.eh_frame:000000000000CACD                 db  83h
.eh_frame:000000000000CACE                 db    7
.eh_frame:000000000000CACF                 db  44h ; D
.eh_frame:000000000000CAD0                 db  0Eh
.eh_frame:000000000000CAD1                 db  40h ; @
.eh_frame:000000000000CAD2                 db    2
.eh_frame:000000000000CAD3                 db  4Ah ; J
.eh_frame:000000000000CAD4                 db  0Ah
.eh_frame:000000000000CAD5                 db  0Eh
.eh_frame:000000000000CAD6                 db  38h ; 8
.eh_frame:000000000000CAD7                 db  44h ; D
.eh_frame:000000000000CAD8                 db  0Eh
.eh_frame:000000000000CAD9                 db  30h ; 0
.eh_frame:000000000000CADA                 db  41h ; A
.eh_frame:000000000000CADB                 db  0Eh
.eh_frame:000000000000CADC                 db  28h ; (
.eh_frame:000000000000CADD                 db  42h ; B
.eh_frame:000000000000CADE                 db  0Eh
.eh_frame:000000000000CADF                 db  20h
.eh_frame:000000000000CAE0                 db  42h ; B
.eh_frame:000000000000CAE1                 db  0Eh
.eh_frame:000000000000CAE2                 db  18h
.eh_frame:000000000000CAE3                 db  42h ; B
.eh_frame:000000000000CAE4                 db  0Eh
.eh_frame:000000000000CAE5                 db  10h
.eh_frame:000000000000CAE6                 db  42h ; B
.eh_frame:000000000000CAE7                 db  0Eh
.eh_frame:000000000000CAE8                 db    8
.eh_frame:000000000000CAE9                 db  41h ; A
.eh_frame:000000000000CAEA                 db  0Bh
.eh_frame:000000000000CAEB                 db    0
.eh_frame:000000000000CAEC                 db  10h
.eh_frame:000000000000CAED                 db    0
.eh_frame:000000000000CAEE                 db    0
.eh_frame:000000000000CAEF                 db    0
.eh_frame:000000000000CAF0                 db  28h ; (
.eh_frame:000000000000CAF1                 db  12h
.eh_frame:000000000000CAF2                 db    0
.eh_frame:000000000000CAF3                 db    0
.eh_frame:000000000000CAF4                 db 0CCh
.eh_frame:000000000000CAF5                 db 0B9h
.eh_frame:000000000000CAF6                 db 0FFh
.eh_frame:000000000000CAF7                 db 0FFh
.eh_frame:000000000000CAF8                 db  31h ; 1
.eh_frame:000000000000CAF9                 db    0
.eh_frame:000000000000CAFA                 db    0
.eh_frame:000000000000CAFB                 db    0
.eh_frame:000000000000CAFC                 db    0
.eh_frame:000000000000CAFD                 db    0
.eh_frame:000000000000CAFE                 db    0
.eh_frame:000000000000CAFF                 db    0
.eh_frame:000000000000CB00                 db  10h
.eh_frame:000000000000CB01                 db    0
.eh_frame:000000000000CB02                 db    0
.eh_frame:000000000000CB03                 db    0
.eh_frame:000000000000CB04                 db  3Ch ; <
.eh_frame:000000000000CB05                 db  12h
.eh_frame:000000000000CB06                 db    0
.eh_frame:000000000000CB07                 db    0
.eh_frame:000000000000CB08                 db 0F8h
.eh_frame:000000000000CB09                 db 0B9h
.eh_frame:000000000000CB0A                 db 0FFh
.eh_frame:000000000000CB0B                 db 0FFh
.eh_frame:000000000000CB0C                 db  20h
.eh_frame:000000000000CB0D                 db    0
.eh_frame:000000000000CB0E                 db    0
.eh_frame:000000000000CB0F                 db    0
.eh_frame:000000000000CB10                 db    0
.eh_frame:000000000000CB11                 db    0
.eh_frame:000000000000CB12                 db    0
.eh_frame:000000000000CB13                 db    0
.eh_frame:000000000000CB14                 db  48h ; H
.eh_frame:000000000000CB15                 db    0
.eh_frame:000000000000CB16                 db    0
.eh_frame:000000000000CB17                 db    0
.eh_frame:000000000000CB18                 db  50h ; P
.eh_frame:000000000000CB19                 db  12h
.eh_frame:000000000000CB1A                 db    0
.eh_frame:000000000000CB1B                 db    0
.eh_frame:000000000000CB1C                 db    4
.eh_frame:000000000000CB1D                 db 0BAh
.eh_frame:000000000000CB1E                 db 0FFh
.eh_frame:000000000000CB1F                 db 0FFh
.eh_frame:000000000000CB20                 db 0B4h
.eh_frame:000000000000CB21                 db    1
.eh_frame:000000000000CB22                 db    0
.eh_frame:000000000000CB23                 db    0
.eh_frame:000000000000CB24                 db    0
.eh_frame:000000000000CB25                 db  42h ; B
.eh_frame:000000000000CB26                 db  0Eh
.eh_frame:000000000000CB27                 db  10h
.eh_frame:000000000000CB28                 db  8Fh
.eh_frame:000000000000CB29                 db    2
.eh_frame:000000000000CB2A                 db  42h ; B
.eh_frame:000000000000CB2B                 db  0Eh
.eh_frame:000000000000CB2C                 db  18h
.eh_frame:000000000000CB2D                 db  8Eh
.eh_frame:000000000000CB2E                 db    3
.eh_frame:000000000000CB2F                 db  49h ; I
.eh_frame:000000000000CB30                 db  0Eh
.eh_frame:000000000000CB31                 db  20h
.eh_frame:000000000000CB32                 db  8Dh
.eh_frame:000000000000CB33                 db    4
.eh_frame:000000000000CB34                 db  42h ; B
.eh_frame:000000000000CB35                 db  0Eh
.eh_frame:000000000000CB36                 db  28h ; (
.eh_frame:000000000000CB37                 db  8Ch
.eh_frame:000000000000CB38                 db    5
.eh_frame:000000000000CB39                 db  44h ; D
.eh_frame:000000000000CB3A                 db  0Eh
.eh_frame:000000000000CB3B                 db  30h ; 0
.eh_frame:000000000000CB3C                 db  86h
.eh_frame:000000000000CB3D                 db    6
.eh_frame:000000000000CB3E                 db  41h ; A
.eh_frame:000000000000CB3F                 db  0Eh
.eh_frame:000000000000CB40                 db  38h ; 8
.eh_frame:000000000000CB41                 db  83h
.eh_frame:000000000000CB42                 db    7
.eh_frame:000000000000CB43                 db  52h ; R
.eh_frame:000000000000CB44                 db  0Eh
.eh_frame:000000000000CB45                 db  40h ; @
.eh_frame:000000000000CB46                 db    2
.eh_frame:000000000000CB47                 db 0D8h
.eh_frame:000000000000CB48                 db  0Ah
.eh_frame:000000000000CB49                 db  0Eh
.eh_frame:000000000000CB4A                 db  38h ; 8
.eh_frame:000000000000CB4B                 db  44h ; D
.eh_frame:000000000000CB4C                 db  0Eh
.eh_frame:000000000000CB4D                 db  30h ; 0
.eh_frame:000000000000CB4E                 db  41h ; A
.eh_frame:000000000000CB4F                 db  0Eh
.eh_frame:000000000000CB50                 db  28h ; (
.eh_frame:000000000000CB51                 db  42h ; B
.eh_frame:000000000000CB52                 db  0Eh
.eh_frame:000000000000CB53                 db  20h
.eh_frame:000000000000CB54                 db  42h ; B
.eh_frame:000000000000CB55                 db  0Eh
.eh_frame:000000000000CB56                 db  18h
.eh_frame:000000000000CB57                 db  42h ; B
.eh_frame:000000000000CB58                 db  0Eh
.eh_frame:000000000000CB59                 db  10h
.eh_frame:000000000000CB5A                 db  42h ; B
.eh_frame:000000000000CB5B                 db  0Eh
.eh_frame:000000000000CB5C                 db    8
.eh_frame:000000000000CB5D                 db  45h ; E
.eh_frame:000000000000CB5E                 db  0Bh
.eh_frame:000000000000CB5F                 db    0
.eh_frame:000000000000CB60                 db  28h ; (
.eh_frame:000000000000CB61                 db    0
.eh_frame:000000000000CB62                 db    0
.eh_frame:000000000000CB63                 db    0
.eh_frame:000000000000CB64                 db  9Ch
.eh_frame:000000000000CB65                 db  12h
.eh_frame:000000000000CB66                 db    0
.eh_frame:000000000000CB67                 db    0
.eh_frame:000000000000CB68                 db  78h ; x
.eh_frame:000000000000CB69                 db 0BBh
.eh_frame:000000000000CB6A                 db 0FFh
.eh_frame:000000000000CB6B                 db 0FFh
.eh_frame:000000000000CB6C                 db  90h
.eh_frame:000000000000CB6D                 db    0
.eh_frame:000000000000CB6E                 db    0
.eh_frame:000000000000CB6F                 db    0
.eh_frame:000000000000CB70                 db    0
.eh_frame:000000000000CB71                 db  42h ; B
.eh_frame:000000000000CB72                 db  0Eh
.eh_frame:000000000000CB73                 db  10h
.eh_frame:000000000000CB74                 db  8Ch
.eh_frame:000000000000CB75                 db    2
.eh_frame:000000000000CB76                 db  41h ; A
.eh_frame:000000000000CB77                 db  0Eh
.eh_frame:000000000000CB78                 db  18h
.eh_frame:000000000000CB79                 db  86h
.eh_frame:000000000000CB7A                 db    3
.eh_frame:000000000000CB7B                 db  44h ; D
.eh_frame:000000000000CB7C                 db  0Eh
.eh_frame:000000000000CB7D                 db  20h
.eh_frame:000000000000CB7E                 db  83h
.eh_frame:000000000000CB7F                 db    4
.eh_frame:000000000000CB80                 db    2
.eh_frame:000000000000CB81                 db  85h
.eh_frame:000000000000CB82                 db  0Eh
.eh_frame:000000000000CB83                 db  18h
.eh_frame:000000000000CB84                 db  41h ; A
.eh_frame:000000000000CB85                 db  0Eh
.eh_frame:000000000000CB86                 db  10h
.eh_frame:000000000000CB87                 db  42h ; B
.eh_frame:000000000000CB88                 db  0Eh
.eh_frame:000000000000CB89                 db    8
.eh_frame:000000000000CB8A                 db    0
.eh_frame:000000000000CB8B                 db    0
.eh_frame:000000000000CB8C                 db  28h ; (
.eh_frame:000000000000CB8D                 db    0
.eh_frame:000000000000CB8E                 db    0
.eh_frame:000000000000CB8F                 db    0
.eh_frame:000000000000CB90                 db 0C8h
.eh_frame:000000000000CB91                 db  12h
.eh_frame:000000000000CB92                 db    0
.eh_frame:000000000000CB93                 db    0
.eh_frame:000000000000CB94                 db 0DCh
.eh_frame:000000000000CB95                 db 0BBh
.eh_frame:000000000000CB96                 db 0FFh
.eh_frame:000000000000CB97                 db 0FFh
.eh_frame:000000000000CB98                 db 0D6h
.eh_frame:000000000000CB99                 db    0
.eh_frame:000000000000CB9A                 db    0
.eh_frame:000000000000CB9B                 db    0
.eh_frame:000000000000CB9C                 db    0
.eh_frame:000000000000CB9D                 db  42h ; B
.eh_frame:000000000000CB9E                 db  0Eh
.eh_frame:000000000000CB9F                 db  10h
.eh_frame:000000000000CBA0                 db  8Ch
.eh_frame:000000000000CBA1                 db    2
.eh_frame:000000000000CBA2                 db  41h ; A
.eh_frame:000000000000CBA3                 db  0Eh
.eh_frame:000000000000CBA4                 db  18h
.eh_frame:000000000000CBA5                 db  86h
.eh_frame:000000000000CBA6                 db    3
.eh_frame:000000000000CBA7                 db  44h ; D
.eh_frame:000000000000CBA8                 db  0Eh
.eh_frame:000000000000CBA9                 db  20h
.eh_frame:000000000000CBAA                 db  83h
.eh_frame:000000000000CBAB                 db    4
.eh_frame:000000000000CBAC                 db    2
.eh_frame:000000000000CBAD                 db 0C4h
.eh_frame:000000000000CBAE                 db  0Eh
.eh_frame:000000000000CBAF                 db  18h
.eh_frame:000000000000CBB0                 db  44h ; D
.eh_frame:000000000000CBB1                 db  0Eh
.eh_frame:000000000000CBB2                 db  10h
.eh_frame:000000000000CBB3                 db  42h ; B
.eh_frame:000000000000CBB4                 db  0Eh
.eh_frame:000000000000CBB5                 db    8
.eh_frame:000000000000CBB6                 db    0
.eh_frame:000000000000CBB7                 db    0
.eh_frame:000000000000CBB8                 db  34h ; 4
.eh_frame:000000000000CBB9                 db    0
.eh_frame:000000000000CBBA                 db    0
.eh_frame:000000000000CBBB                 db    0
.eh_frame:000000000000CBBC                 db 0F4h
.eh_frame:000000000000CBBD                 db  12h
.eh_frame:000000000000CBBE                 db    0
.eh_frame:000000000000CBBF                 db    0
.eh_frame:000000000000CBC0                 db  90h
.eh_frame:000000000000CBC1                 db 0BCh
.eh_frame:000000000000CBC2                 db 0FFh
.eh_frame:000000000000CBC3                 db 0FFh
.eh_frame:000000000000CBC4                 db  3Eh ; >
.eh_frame:000000000000CBC5                 db    2
.eh_frame:000000000000CBC6                 db    0
.eh_frame:000000000000CBC7                 db    0
.eh_frame:000000000000CBC8                 db    0
.eh_frame:000000000000CBC9                 db  42h ; B
.eh_frame:000000000000CBCA                 db  0Eh
.eh_frame:000000000000CBCB                 db  10h
.eh_frame:000000000000CBCC                 db  8Ch
.eh_frame:000000000000CBCD                 db    2
.eh_frame:000000000000CBCE                 db  41h ; A
.eh_frame:000000000000CBCF                 db  0Eh
.eh_frame:000000000000CBD0                 db  18h
.eh_frame:000000000000CBD1                 db  86h
.eh_frame:000000000000CBD2                 db    3
.eh_frame:000000000000CBD3                 db  44h ; D
.eh_frame:000000000000CBD4                 db  0Eh
.eh_frame:000000000000CBD5                 db  20h
.eh_frame:000000000000CBD6                 db  83h
.eh_frame:000000000000CBD7                 db    4
.eh_frame:000000000000CBD8                 db  44h ; D
.eh_frame:000000000000CBD9                 db  0Eh
.eh_frame:000000000000CBDA                 db  80h
.eh_frame:000000000000CBDB                 db    1
.eh_frame:000000000000CBDC                 db    3
.eh_frame:000000000000CBDD                 db  91h
.eh_frame:000000000000CBDE                 db    1
.eh_frame:000000000000CBDF                 db  0Ah
.eh_frame:000000000000CBE0                 db  0Eh
.eh_frame:000000000000CBE1                 db  20h
.eh_frame:000000000000CBE2                 db  41h ; A
.eh_frame:000000000000CBE3                 db  0Eh
.eh_frame:000000000000CBE4                 db  18h
.eh_frame:000000000000CBE5                 db  41h ; A
.eh_frame:000000000000CBE6                 db  0Eh
.eh_frame:000000000000CBE7                 db  10h
.eh_frame:000000000000CBE8                 db  42h ; B
.eh_frame:000000000000CBE9                 db  0Eh
.eh_frame:000000000000CBEA                 db    8
.eh_frame:000000000000CBEB                 db  48h ; H
.eh_frame:000000000000CBEC                 db  0Bh
.eh_frame:000000000000CBED                 db    0
.eh_frame:000000000000CBEE                 db    0
.eh_frame:000000000000CBEF                 db    0
.eh_frame:000000000000CBF0                 db  38h ; 8
.eh_frame:000000000000CBF1                 db    0
.eh_frame:000000000000CBF2                 db    0
.eh_frame:000000000000CBF3                 db    0
.eh_frame:000000000000CBF4                 db  2Ch ; ,
.eh_frame:000000000000CBF5                 db  13h
.eh_frame:000000000000CBF6                 db    0
.eh_frame:000000000000CBF7                 db    0
.eh_frame:000000000000CBF8                 db  98h
.eh_frame:000000000000CBF9                 db 0BEh
.eh_frame:000000000000CBFA                 db 0FFh
.eh_frame:000000000000CBFB                 db 0FFh
.eh_frame:000000000000CBFC                 db  84h
.eh_frame:000000000000CBFD                 db    2
.eh_frame:000000000000CBFE                 db    0
.eh_frame:000000000000CBFF                 db    0
.eh_frame:000000000000CC00                 db    0
.eh_frame:000000000000CC01                 db  42h ; B
.eh_frame:000000000000CC02                 db  0Eh
.eh_frame:000000000000CC03                 db  10h
.eh_frame:000000000000CC04                 db  8Dh
.eh_frame:000000000000CC05                 db    2
.eh_frame:000000000000CC06                 db  42h ; B
.eh_frame:000000000000CC07                 db  0Eh
.eh_frame:000000000000CC08                 db  18h
.eh_frame:000000000000CC09                 db  8Ch
.eh_frame:000000000000CC0A                 db    3
.eh_frame:000000000000CC0B                 db  41h ; A
.eh_frame:000000000000CC0C                 db  0Eh
.eh_frame:000000000000CC0D                 db  20h
.eh_frame:000000000000CC0E                 db  86h
.eh_frame:000000000000CC0F                 db    4
.eh_frame:000000000000CC10                 db  41h ; A
.eh_frame:000000000000CC11                 db  0Eh
.eh_frame:000000000000CC12                 db  28h ; (
.eh_frame:000000000000CC13                 db  83h
.eh_frame:000000000000CC14                 db    5
.eh_frame:000000000000CC15                 db  44h ; D
.eh_frame:000000000000CC16                 db  0Eh
.eh_frame:000000000000CC17                 db  40h ; @
.eh_frame:000000000000CC18                 db    2
.eh_frame:000000000000CC19                 db  5Ah ; Z
.eh_frame:000000000000CC1A                 db  0Ah
.eh_frame:000000000000CC1B                 db  0Eh
.eh_frame:000000000000CC1C                 db  28h ; (
.eh_frame:000000000000CC1D                 db  41h ; A
.eh_frame:000000000000CC1E                 db  0Eh
.eh_frame:000000000000CC1F                 db  20h
.eh_frame:000000000000CC20                 db  41h ; A
.eh_frame:000000000000CC21                 db  0Eh
.eh_frame:000000000000CC22                 db  18h
.eh_frame:000000000000CC23                 db  42h ; B
.eh_frame:000000000000CC24                 db  0Eh
.eh_frame:000000000000CC25                 db  10h
.eh_frame:000000000000CC26                 db  42h ; B
.eh_frame:000000000000CC27                 db  0Eh
.eh_frame:000000000000CC28                 db    8
.eh_frame:000000000000CC29                 db  46h ; F
.eh_frame:000000000000CC2A                 db  0Bh
.eh_frame:000000000000CC2B                 db    0
.eh_frame:000000000000CC2C                 db  20h
.eh_frame:000000000000CC2D                 db    0
.eh_frame:000000000000CC2E                 db    0
.eh_frame:000000000000CC2F                 db    0
.eh_frame:000000000000CC30                 db  68h ; h
.eh_frame:000000000000CC31                 db  13h
.eh_frame:000000000000CC32                 db    0
.eh_frame:000000000000CC33                 db    0
.eh_frame:000000000000CC34                 db 0ECh
.eh_frame:000000000000CC35                 db 0C0h
.eh_frame:000000000000CC36                 db 0FFh
.eh_frame:000000000000CC37                 db 0FFh
.eh_frame:000000000000CC38                 db  59h ; Y
.eh_frame:000000000000CC39                 db    0
.eh_frame:000000000000CC3A                 db    0
.eh_frame:000000000000CC3B                 db    0
.eh_frame:000000000000CC3C                 db    0
.eh_frame:000000000000CC3D                 db  41h ; A
.eh_frame:000000000000CC3E                 db  0Eh
.eh_frame:000000000000CC3F                 db  10h
.eh_frame:000000000000CC40                 db  83h
.eh_frame:000000000000CC41                 db    2
.eh_frame:000000000000CC42                 db  47h ; G
.eh_frame:000000000000CC43                 db  0Eh
.eh_frame:000000000000CC44                 db  20h
.eh_frame:000000000000CC45                 db  7Ch ; |
.eh_frame:000000000000CC46                 db  0Ah
.eh_frame:000000000000CC47                 db  0Eh
.eh_frame:000000000000CC48                 db  10h
.eh_frame:000000000000CC49                 db  41h ; A
.eh_frame:000000000000CC4A                 db  0Eh
.eh_frame:000000000000CC4B                 db    8
.eh_frame:000000000000CC4C                 db  4Bh ; K
.eh_frame:000000000000CC4D                 db  0Bh
.eh_frame:000000000000CC4E                 db    0
.eh_frame:000000000000CC4F                 db    0
.eh_frame:000000000000CC50                 db  34h ; 4
.eh_frame:000000000000CC51                 db    0
.eh_frame:000000000000CC52                 db    0
.eh_frame:000000000000CC53                 db    0
.eh_frame:000000000000CC54                 db  8Ch
.eh_frame:000000000000CC55                 db  13h
.eh_frame:000000000000CC56                 db    0
.eh_frame:000000000000CC57                 db    0
.eh_frame:000000000000CC58                 db  28h ; (
.eh_frame:000000000000CC59                 db 0C1h
.eh_frame:000000000000CC5A                 db 0FFh
.eh_frame:000000000000CC5B                 db 0FFh
.eh_frame:000000000000CC5C                 db    3
.eh_frame:000000000000CC5D                 db    2
.eh_frame:000000000000CC5E                 db    0
.eh_frame:000000000000CC5F                 db    0
.eh_frame:000000000000CC60                 db    0
.eh_frame:000000000000CC61                 db  42h ; B
.eh_frame:000000000000CC62                 db  0Eh
.eh_frame:000000000000CC63                 db  10h
.eh_frame:000000000000CC64                 db  8Ch
.eh_frame:000000000000CC65                 db    2
.eh_frame:000000000000CC66                 db  41h ; A
.eh_frame:000000000000CC67                 db  0Eh
.eh_frame:000000000000CC68                 db  18h
.eh_frame:000000000000CC69                 db  86h
.eh_frame:000000000000CC6A                 db    3
.eh_frame:000000000000CC6B                 db  46h ; F
.eh_frame:000000000000CC6C                 db  0Eh
.eh_frame:000000000000CC6D                 db  20h
.eh_frame:000000000000CC6E                 db  83h
.eh_frame:000000000000CC6F                 db    4
.eh_frame:000000000000CC70                 db  47h ; G
.eh_frame:000000000000CC71                 db  0Eh
.eh_frame:000000000000CC72                 db  30h ; 0
.eh_frame:000000000000CC73                 db    2
.eh_frame:000000000000CC74                 db  4Ah ; J
.eh_frame:000000000000CC75                 db  0Ah
.eh_frame:000000000000CC76                 db  0Eh
.eh_frame:000000000000CC77                 db  20h
.eh_frame:000000000000CC78                 db  41h ; A
.eh_frame:000000000000CC79                 db  0Eh
.eh_frame:000000000000CC7A                 db  18h
.eh_frame:000000000000CC7B                 db  41h ; A
.eh_frame:000000000000CC7C                 db  0Eh
.eh_frame:000000000000CC7D                 db  10h
.eh_frame:000000000000CC7E                 db  42h ; B
.eh_frame:000000000000CC7F                 db  0Eh
.eh_frame:000000000000CC80                 db    8
.eh_frame:000000000000CC81                 db  42h ; B
.eh_frame:000000000000CC82                 db  0Bh
.eh_frame:000000000000CC83                 db    0
.eh_frame:000000000000CC84                 db    0
.eh_frame:000000000000CC85                 db    0
.eh_frame:000000000000CC86                 db    0
.eh_frame:000000000000CC87                 db    0
.eh_frame:000000000000CC88                 db  10h
.eh_frame:000000000000CC89                 db    0
.eh_frame:000000000000CC8A                 db    0
.eh_frame:000000000000CC8B                 db    0
.eh_frame:000000000000CC8C                 db 0C4h
.eh_frame:000000000000CC8D                 db  13h
.eh_frame:000000000000CC8E                 db    0
.eh_frame:000000000000CC8F                 db    0
.eh_frame:000000000000CC90                 db    0
.eh_frame:000000000000CC91                 db 0C3h
.eh_frame:000000000000CC92                 db 0FFh
.eh_frame:000000000000CC93                 db 0FFh
.eh_frame:000000000000CC94                 db  1Bh
.eh_frame:000000000000CC95                 db    0
.eh_frame:000000000000CC96                 db    0
.eh_frame:000000000000CC97                 db    0
.eh_frame:000000000000CC98                 db    0
.eh_frame:000000000000CC99                 db    0
.eh_frame:000000000000CC9A                 db    0
.eh_frame:000000000000CC9B                 db    0
.eh_frame:000000000000CC9C                 db  10h
.eh_frame:000000000000CC9D                 db    0
.eh_frame:000000000000CC9E                 db    0
.eh_frame:000000000000CC9F                 db    0
.eh_frame:000000000000CCA0                 db 0D8h
.eh_frame:000000000000CCA1                 db  13h
.eh_frame:000000000000CCA2                 db    0
.eh_frame:000000000000CCA3                 db    0
.eh_frame:000000000000CCA4                 db  0Ch
.eh_frame:000000000000CCA5                 db 0C3h
.eh_frame:000000000000CCA6                 db 0FFh
.eh_frame:000000000000CCA7                 db 0FFh
.eh_frame:000000000000CCA8                 db    5
.eh_frame:000000000000CCA9                 db    0
.eh_frame:000000000000CCAA                 db    0
.eh_frame:000000000000CCAB                 db    0
.eh_frame:000000000000CCAC                 db    0
.eh_frame:000000000000CCAD                 db    0
.eh_frame:000000000000CCAE                 db    0
.eh_frame:000000000000CCAF                 db    0
.eh_frame:000000000000CCB0                 db  10h
.eh_frame:000000000000CCB1                 db    0
.eh_frame:000000000000CCB2                 db    0
.eh_frame:000000000000CCB3                 db    0
.eh_frame:000000000000CCB4                 db 0ECh
.eh_frame:000000000000CCB5                 db  13h
.eh_frame:000000000000CCB6                 db    0
.eh_frame:000000000000CCB7                 db    0
.eh_frame:000000000000CCB8                 db    8
.eh_frame:000000000000CCB9                 db 0C3h
.eh_frame:000000000000CCBA                 db 0FFh
.eh_frame:000000000000CCBB                 db 0FFh
.eh_frame:000000000000CCBC                 db  35h ; 5
.eh_frame:000000000000CCBD                 db    0
.eh_frame:000000000000CCBE                 db    0
.eh_frame:000000000000CCBF                 db    0
.eh_frame:000000000000CCC0                 db    0
.eh_frame:000000000000CCC1                 db    0
.eh_frame:000000000000CCC2                 db    0
.eh_frame:000000000000CCC3                 db    0
.eh_frame:000000000000CCC4                 db  10h
.eh_frame:000000000000CCC5                 db    0
.eh_frame:000000000000CCC6                 db    0
.eh_frame:000000000000CCC7                 db    0
.eh_frame:000000000000CCC8                 db    0
.eh_frame:000000000000CCC9                 db  14h
.eh_frame:000000000000CCCA                 db    0
.eh_frame:000000000000CCCB                 db    0
.eh_frame:000000000000CCCC                 db  34h ; 4
.eh_frame:000000000000CCCD                 db 0C3h
.eh_frame:000000000000CCCE                 db 0FFh
.eh_frame:000000000000CCCF                 db 0FFh
.eh_frame:000000000000CCD0                 db  3Eh ; >
.eh_frame:000000000000CCD1                 db    0
.eh_frame:000000000000CCD2                 db    0
.eh_frame:000000000000CCD3                 db    0
.eh_frame:000000000000CCD4                 db    0
.eh_frame:000000000000CCD5                 db  79h ; y
.eh_frame:000000000000CCD6                 db  0Eh
.eh_frame:000000000000CCD7                 db  10h
.eh_frame:000000000000CCD8                 db  1Ch
.eh_frame:000000000000CCD9                 db    0
.eh_frame:000000000000CCDA                 db    0
.eh_frame:000000000000CCDB                 db    0
.eh_frame:000000000000CCDC                 db  14h
.eh_frame:000000000000CCDD                 db  14h
.eh_frame:000000000000CCDE                 db    0
.eh_frame:000000000000CCDF                 db    0
.eh_frame:000000000000CCE0                 db  60h ; `
.eh_frame:000000000000CCE1                 db 0C3h
.eh_frame:000000000000CCE2                 db 0FFh
.eh_frame:000000000000CCE3                 db 0FFh
.eh_frame:000000000000CCE4                 db  3Ch ; <
.eh_frame:000000000000CCE5                 db    0
.eh_frame:000000000000CCE6                 db    0
.eh_frame:000000000000CCE7                 db    0
.eh_frame:000000000000CCE8                 db    0
.eh_frame:000000000000CCE9                 db  44h ; D
.eh_frame:000000000000CCEA                 db  0Eh
.eh_frame:000000000000CCEB                 db  10h
.eh_frame:000000000000CCEC                 db  61h ; a
.eh_frame:000000000000CCED                 db  0Ah
.eh_frame:000000000000CCEE                 db  0Eh
.eh_frame:000000000000CCEF                 db    8
.eh_frame:000000000000CCF0                 db  4Bh ; K
.eh_frame:000000000000CCF1                 db  0Bh
.eh_frame:000000000000CCF2                 db  4Bh ; K
.eh_frame:000000000000CCF3                 db  0Eh
.eh_frame:000000000000CCF4                 db    8
.eh_frame:000000000000CCF5                 db    0
.eh_frame:000000000000CCF6                 db    0
.eh_frame:000000000000CCF7                 db    0
.eh_frame:000000000000CCF8                 db  14h
.eh_frame:000000000000CCF9                 db    0
.eh_frame:000000000000CCFA                 db    0
.eh_frame:000000000000CCFB                 db    0
.eh_frame:000000000000CCFC                 db  34h ; 4
.eh_frame:000000000000CCFD                 db  14h
.eh_frame:000000000000CCFE                 db    0
.eh_frame:000000000000CCFF                 db    0
.eh_frame:000000000000CD00                 db  80h
.eh_frame:000000000000CD01                 db 0C3h
.eh_frame:000000000000CD02                 db 0FFh
.eh_frame:000000000000CD03                 db 0FFh
.eh_frame:000000000000CD04                 db  2Dh ; -
.eh_frame:000000000000CD05                 db    0
.eh_frame:000000000000CD06                 db    0
.eh_frame:000000000000CD07                 db    0
.eh_frame:000000000000CD08                 db    0
.eh_frame:000000000000CD09                 db  41h ; A
.eh_frame:000000000000CD0A                 db  0Eh
.eh_frame:000000000000CD0B                 db  10h
.eh_frame:000000000000CD0C                 db  83h
.eh_frame:000000000000CD0D                 db    2
.eh_frame:000000000000CD0E                 db    0
.eh_frame:000000000000CD0F                 db    0
.eh_frame:000000000000CD10                 db  14h
.eh_frame:000000000000CD11                 db    0
.eh_frame:000000000000CD12                 db    0
.eh_frame:000000000000CD13                 db    0
.eh_frame:000000000000CD14                 db  4Ch ; L
.eh_frame:000000000000CD15                 db  14h
.eh_frame:000000000000CD16                 db    0
.eh_frame:000000000000CD17                 db    0
.eh_frame:000000000000CD18                 db  98h
.eh_frame:000000000000CD19                 db 0C3h
.eh_frame:000000000000CD1A                 db 0FFh
.eh_frame:000000000000CD1B                 db 0FFh
.eh_frame:000000000000CD1C                 db  2Dh ; -
.eh_frame:000000000000CD1D                 db    0
.eh_frame:000000000000CD1E                 db    0
.eh_frame:000000000000CD1F                 db    0
.eh_frame:000000000000CD20                 db    0
.eh_frame:000000000000CD21                 db  41h ; A
.eh_frame:000000000000CD22                 db  0Eh
.eh_frame:000000000000CD23                 db  10h
.eh_frame:000000000000CD24                 db  83h
.eh_frame:000000000000CD25                 db    2
.eh_frame:000000000000CD26                 db    0
.eh_frame:000000000000CD27                 db    0
.eh_frame:000000000000CD28                 db  1Ch
.eh_frame:000000000000CD29                 db    0
.eh_frame:000000000000CD2A                 db    0
.eh_frame:000000000000CD2B                 db    0
.eh_frame:000000000000CD2C                 db  64h ; d
.eh_frame:000000000000CD2D                 db  14h
.eh_frame:000000000000CD2E                 db    0
.eh_frame:000000000000CD2F                 db    0
.eh_frame:000000000000CD30                 db 0B0h
.eh_frame:000000000000CD31                 db 0C3h
.eh_frame:000000000000CD32                 db 0FFh
.eh_frame:000000000000CD33                 db 0FFh
.eh_frame:000000000000CD34                 db  6Eh ; n
.eh_frame:000000000000CD35                 db    0
.eh_frame:000000000000CD36                 db    0
.eh_frame:000000000000CD37                 db    0
.eh_frame:000000000000CD38                 db    0
.eh_frame:000000000000CD39                 db  44h ; D
.eh_frame:000000000000CD3A                 db  0Eh
.eh_frame:000000000000CD3B                 db  60h ; `
.eh_frame:000000000000CD3C                 db  7Eh ; ~
.eh_frame:000000000000CD3D                 db  0Ah
.eh_frame:000000000000CD3E                 db  0Eh
.eh_frame:000000000000CD3F                 db    8
.eh_frame:000000000000CD40                 db  46h ; F
.eh_frame:000000000000CD41                 db  0Bh
.eh_frame:000000000000CD42                 db    0
.eh_frame:000000000000CD43                 db    0
.eh_frame:000000000000CD44                 db    0
.eh_frame:000000000000CD45                 db    0
.eh_frame:000000000000CD46                 db    0
.eh_frame:000000000000CD47                 db    0
.eh_frame:000000000000CD48                 db  5Ch ; \
.eh_frame:000000000000CD49                 db    0
.eh_frame:000000000000CD4A                 db    0
.eh_frame:000000000000CD4B                 db    0
.eh_frame:000000000000CD4C                 db  84h
.eh_frame:000000000000CD4D                 db  14h
.eh_frame:000000000000CD4E                 db    0
.eh_frame:000000000000CD4F                 db    0
.eh_frame:000000000000CD50                 db    0
.eh_frame:000000000000CD51                 db 0C4h
.eh_frame:000000000000CD52                 db 0FFh
.eh_frame:000000000000CD53                 db 0FFh
.eh_frame:000000000000CD54                 db  80h
.eh_frame:000000000000CD55                 db    0
.eh_frame:000000000000CD56                 db    0
.eh_frame:000000000000CD57                 db    0
.eh_frame:000000000000CD58                 db    0
.eh_frame:000000000000CD59                 db  42h ; B
.eh_frame:000000000000CD5A                 db  0Eh
.eh_frame:000000000000CD5B                 db  10h
.eh_frame:000000000000CD5C                 db  8Dh
.eh_frame:000000000000CD5D                 db    2
.eh_frame:000000000000CD5E                 db  42h ; B
.eh_frame:000000000000CD5F                 db  0Eh
.eh_frame:000000000000CD60                 db  18h
.eh_frame:000000000000CD61                 db  8Ch
.eh_frame:000000000000CD62                 db    3
.eh_frame:000000000000CD63                 db  47h ; G
.eh_frame:000000000000CD64                 db  0Eh
.eh_frame:000000000000CD65                 db  20h
.eh_frame:000000000000CD66                 db  86h
.eh_frame:000000000000CD67                 db    4
.eh_frame:000000000000CD68                 db  41h ; A
.eh_frame:000000000000CD69                 db  0Eh
.eh_frame:000000000000CD6A                 db  28h ; (
.eh_frame:000000000000CD6B                 db  83h
.eh_frame:000000000000CD6C                 db    5
.eh_frame:000000000000CD6D                 db  49h ; I
.eh_frame:000000000000CD6E                 db  0Eh
.eh_frame:000000000000CD6F                 db  30h ; 0
.eh_frame:000000000000CD70                 db  62h ; b
.eh_frame:000000000000CD71                 db  0Ah
.eh_frame:000000000000CD72                 db  0Eh
.eh_frame:000000000000CD73                 db  28h ; (
.eh_frame:000000000000CD74                 db  44h ; D
.eh_frame:000000000000CD75                 db  0Eh
.eh_frame:000000000000CD76                 db  20h
.eh_frame:000000000000CD77                 db  41h ; A
.eh_frame:000000000000CD78                 db  0Eh
.eh_frame:000000000000CD79                 db  18h
.eh_frame:000000000000CD7A                 db  42h ; B
.eh_frame:000000000000CD7B                 db  0Eh
.eh_frame:000000000000CD7C                 db  10h
.eh_frame:000000000000CD7D                 db  42h ; B
.eh_frame:000000000000CD7E                 db  0Eh
.eh_frame:000000000000CD7F                 db    8
.eh_frame:000000000000CD80                 db  48h ; H
.eh_frame:000000000000CD81                 db  0Bh
.eh_frame:000000000000CD82                 db  5Dh ; ]
.eh_frame:000000000000CD83                 db  0Ah
.eh_frame:000000000000CD84                 db  0Eh
.eh_frame:000000000000CD85                 db  28h ; (
.eh_frame:000000000000CD86                 db  41h ; A
.eh_frame:000000000000CD87                 db  0Eh
.eh_frame:000000000000CD88                 db  20h
.eh_frame:000000000000CD89                 db  41h ; A
.eh_frame:000000000000CD8A                 db  0Eh
.eh_frame:000000000000CD8B                 db  18h
.eh_frame:000000000000CD8C                 db  42h ; B
.eh_frame:000000000000CD8D                 db  0Eh
.eh_frame:000000000000CD8E                 db  10h
.eh_frame:000000000000CD8F                 db  42h ; B
.eh_frame:000000000000CD90                 db  0Eh
.eh_frame:000000000000CD91                 db    8
.eh_frame:000000000000CD92                 db  45h ; E
.eh_frame:000000000000CD93                 db  0Bh
.eh_frame:000000000000CD94                 db  44h ; D
.eh_frame:000000000000CD95                 db  0Eh
.eh_frame:000000000000CD96                 db  28h ; (
.eh_frame:000000000000CD97                 db  43h ; C
.eh_frame:000000000000CD98                 db  0Eh
.eh_frame:000000000000CD99                 db  20h
.eh_frame:000000000000CD9A                 db  44h ; D
.eh_frame:000000000000CD9B                 db  0Eh
.eh_frame:000000000000CD9C                 db  18h
.eh_frame:000000000000CD9D                 db  42h ; B
.eh_frame:000000000000CD9E                 db  0Eh
.eh_frame:000000000000CD9F                 db  10h
.eh_frame:000000000000CDA0                 db  42h ; B
.eh_frame:000000000000CDA1                 db  0Eh
.eh_frame:000000000000CDA2                 db    8
.eh_frame:000000000000CDA3                 db    0
.eh_frame:000000000000CDA4                 db    0
.eh_frame:000000000000CDA5                 db    0
.eh_frame:000000000000CDA6                 db    0
.eh_frame:000000000000CDA7                 db    0
.eh_frame:000000000000CDA8                 db  1Ch
.eh_frame:000000000000CDA9                 db    0
.eh_frame:000000000000CDAA                 db    0
.eh_frame:000000000000CDAB                 db    0
.eh_frame:000000000000CDAC                 db 0E4h
.eh_frame:000000000000CDAD                 db  14h
.eh_frame:000000000000CDAE                 db    0
.eh_frame:000000000000CDAF                 db    0
.eh_frame:000000000000CDB0                 db  20h
.eh_frame:000000000000CDB1                 db 0C4h
.eh_frame:000000000000CDB2                 db 0FFh
.eh_frame:000000000000CDB3                 db 0FFh
.eh_frame:000000000000CDB4                 db  4Ah ; J
.eh_frame:000000000000CDB5                 db    0
.eh_frame:000000000000CDB6                 db    0
.eh_frame:000000000000CDB7                 db    0
.eh_frame:000000000000CDB8                 db    0
.eh_frame:000000000000CDB9                 db  41h ; A
.eh_frame:000000000000CDBA                 db  0Eh
.eh_frame:000000000000CDBB                 db  10h
.eh_frame:000000000000CDBC                 db  83h
.eh_frame:000000000000CDBD                 db    2
.eh_frame:000000000000CDBE                 db  69h ; i
.eh_frame:000000000000CDBF                 db  0Ah
.eh_frame:000000000000CDC0                 db  0Eh
.eh_frame:000000000000CDC1                 db    8
.eh_frame:000000000000CDC2                 db  46h ; F
.eh_frame:000000000000CDC3                 db  0Bh
.eh_frame:000000000000CDC4                 db  59h ; Y
.eh_frame:000000000000CDC5                 db  0Eh
.eh_frame:000000000000CDC6                 db    8
.eh_frame:000000000000CDC7                 db    0
.eh_frame:000000000000CDC8                 db  10h
.eh_frame:000000000000CDC9                 db    0
.eh_frame:000000000000CDCA                 db    0
.eh_frame:000000000000CDCB                 db    0
.eh_frame:000000000000CDCC                 db    4
.eh_frame:000000000000CDCD                 db  15h
.eh_frame:000000000000CDCE                 db    0
.eh_frame:000000000000CDCF                 db    0
.eh_frame:000000000000CDD0                 db  50h ; P
.eh_frame:000000000000CDD1                 db 0C4h
.eh_frame:000000000000CDD2                 db 0FFh
.eh_frame:000000000000CDD3                 db 0FFh
.eh_frame:000000000000CDD4                 db  19h
.eh_frame:000000000000CDD5                 db    0
.eh_frame:000000000000CDD6                 db    0
.eh_frame:000000000000CDD7                 db    0
.eh_frame:000000000000CDD8                 db    0
.eh_frame:000000000000CDD9                 db    0
.eh_frame:000000000000CDDA                 db    0
.eh_frame:000000000000CDDB                 db    0
.eh_frame:000000000000CDDC                 db  18h
.eh_frame:000000000000CDDD                 db    0
.eh_frame:000000000000CDDE                 db    0
.eh_frame:000000000000CDDF                 db    0
.eh_frame:000000000000CDE0                 db  18h
.eh_frame:000000000000CDE1                 db  15h
.eh_frame:000000000000CDE2                 db    0
.eh_frame:000000000000CDE3                 db    0
.eh_frame:000000000000CDE4                 db  5Ch ; \
.eh_frame:000000000000CDE5                 db 0C4h
.eh_frame:000000000000CDE6                 db 0FFh
.eh_frame:000000000000CDE7                 db 0FFh
.eh_frame:000000000000CDE8                 db  19h
.eh_frame:000000000000CDE9                 db    0
.eh_frame:000000000000CDEA                 db    0
.eh_frame:000000000000CDEB                 db    0
.eh_frame:000000000000CDEC                 db    0
.eh_frame:000000000000CDED                 db  41h ; A
.eh_frame:000000000000CDEE                 db  0Eh
.eh_frame:000000000000CDEF                 db  10h
.eh_frame:000000000000CDF0                 db  83h
.eh_frame:000000000000CDF1                 db    2
.eh_frame:000000000000CDF2                 db  53h ; S
.eh_frame:000000000000CDF3                 db  0Eh
.eh_frame:000000000000CDF4                 db    8
.eh_frame:000000000000CDF5                 db    0
.eh_frame:000000000000CDF6                 db    0
.eh_frame:000000000000CDF7                 db    0
.eh_frame:000000000000CDF8                 db  34h ; 4
.eh_frame:000000000000CDF9                 db    0
.eh_frame:000000000000CDFA                 db    0
.eh_frame:000000000000CDFB                 db    0
.eh_frame:000000000000CDFC                 db  34h ; 4
.eh_frame:000000000000CDFD                 db  15h
.eh_frame:000000000000CDFE                 db    0
.eh_frame:000000000000CDFF                 db    0
.eh_frame:000000000000CE00                 db  60h ; `
.eh_frame:000000000000CE01                 db 0C4h
.eh_frame:000000000000CE02                 db 0FFh
.eh_frame:000000000000CE03                 db 0FFh
.eh_frame:000000000000CE04                 db  3Fh ; ?
.eh_frame:000000000000CE05                 db    0
.eh_frame:000000000000CE06                 db    0
.eh_frame:000000000000CE07                 db    0
.eh_frame:000000000000CE08                 db    0
.eh_frame:000000000000CE09                 db  42h ; B
.eh_frame:000000000000CE0A                 db  0Eh
.eh_frame:000000000000CE0B                 db  10h
.eh_frame:000000000000CE0C                 db  8Dh
.eh_frame:000000000000CE0D                 db    2
.eh_frame:000000000000CE0E                 db  42h ; B
.eh_frame:000000000000CE0F                 db  0Eh
.eh_frame:000000000000CE10                 db  18h
.eh_frame:000000000000CE11                 db  8Ch
.eh_frame:000000000000CE12                 db    3
.eh_frame:000000000000CE13                 db  41h ; A
.eh_frame:000000000000CE14                 db  0Eh
.eh_frame:000000000000CE15                 db  20h
.eh_frame:000000000000CE16                 db  86h
.eh_frame:000000000000CE17                 db    4
.eh_frame:000000000000CE18                 db  41h ; A
.eh_frame:000000000000CE19                 db  0Eh
.eh_frame:000000000000CE1A                 db  28h ; (
.eh_frame:000000000000CE1B                 db  83h
.eh_frame:000000000000CE1C                 db    5
.eh_frame:000000000000CE1D                 db  46h ; F
.eh_frame:000000000000CE1E                 db  0Eh
.eh_frame:000000000000CE1F                 db  30h ; 0
.eh_frame:000000000000CE20                 db  6Ah ; j
.eh_frame:000000000000CE21                 db  0Eh
.eh_frame:000000000000CE22                 db  28h ; (
.eh_frame:000000000000CE23                 db  43h ; C
.eh_frame:000000000000CE24                 db  0Eh
.eh_frame:000000000000CE25                 db  20h
.eh_frame:000000000000CE26                 db  41h ; A
.eh_frame:000000000000CE27                 db  0Eh
.eh_frame:000000000000CE28                 db  18h
.eh_frame:000000000000CE29                 db  42h ; B
.eh_frame:000000000000CE2A                 db  0Eh
.eh_frame:000000000000CE2B                 db  10h
.eh_frame:000000000000CE2C                 db  42h ; B
.eh_frame:000000000000CE2D                 db  0Eh
.eh_frame:000000000000CE2E                 db    8
.eh_frame:000000000000CE2F                 db    0
.eh_frame:000000000000CE30                 db  18h
.eh_frame:000000000000CE31                 db    0
.eh_frame:000000000000CE32                 db    0
.eh_frame:000000000000CE33                 db    0
.eh_frame:000000000000CE34                 db  6Ch ; l
.eh_frame:000000000000CE35                 db  15h
.eh_frame:000000000000CE36                 db    0
.eh_frame:000000000000CE37                 db    0
.eh_frame:000000000000CE38                 db  68h ; h
.eh_frame:000000000000CE39                 db 0C4h
.eh_frame:000000000000CE3A                 db 0FFh
.eh_frame:000000000000CE3B                 db 0FFh
.eh_frame:000000000000CE3C                 db  41h ; A
.eh_frame:000000000000CE3D                 db    0
.eh_frame:000000000000CE3E                 db    0
.eh_frame:000000000000CE3F                 db    0
.eh_frame:000000000000CE40                 db    0
.eh_frame:000000000000CE41                 db  4Ah ; J
.eh_frame:000000000000CE42                 db  0Eh
.eh_frame:000000000000CE43                 db  10h
.eh_frame:000000000000CE44                 db  4Dh ; M
.eh_frame:000000000000CE45                 db  0Eh
.eh_frame:000000000000CE46                 db    8
.eh_frame:000000000000CE47                 db  4Bh ; K
.eh_frame:000000000000CE48                 db  0Eh
.eh_frame:000000000000CE49                 db  10h
.eh_frame:000000000000CE4A                 db    0
.eh_frame:000000000000CE4B                 db    0
.eh_frame:000000000000CE4C                 db  28h ; (
.eh_frame:000000000000CE4D                 db    0
.eh_frame:000000000000CE4E                 db    0
.eh_frame:000000000000CE4F                 db    0
.eh_frame:000000000000CE50                 db  88h
.eh_frame:000000000000CE51                 db  15h
.eh_frame:000000000000CE52                 db    0
.eh_frame:000000000000CE53                 db    0
.eh_frame:000000000000CE54                 db  9Ch
.eh_frame:000000000000CE55                 db 0C4h
.eh_frame:000000000000CE56                 db 0FFh
.eh_frame:000000000000CE57                 db 0FFh
.eh_frame:000000000000CE58                 db  37h ; 7
.eh_frame:000000000000CE59                 db    0
.eh_frame:000000000000CE5A                 db    0
.eh_frame:000000000000CE5B                 db    0
.eh_frame:000000000000CE5C                 db    0
.eh_frame:000000000000CE5D                 db  41h ; A
.eh_frame:000000000000CE5E                 db  0Eh
.eh_frame:000000000000CE5F                 db  10h
.eh_frame:000000000000CE60                 db  86h
.eh_frame:000000000000CE61                 db    2
.eh_frame:000000000000CE62                 db  41h ; A
.eh_frame:000000000000CE63                 db  0Eh
.eh_frame:000000000000CE64                 db  18h
.eh_frame:000000000000CE65                 db  83h
.eh_frame:000000000000CE66                 db    3
.eh_frame:000000000000CE67                 db  4Eh ; N
.eh_frame:000000000000CE68                 db  0Eh
.eh_frame:000000000000CE69                 db  20h
.eh_frame:000000000000CE6A                 db  5Dh ; ]
.eh_frame:000000000000CE6B                 db  0Ah
.eh_frame:000000000000CE6C                 db  0Eh
.eh_frame:000000000000CE6D                 db  18h
.eh_frame:000000000000CE6E                 db  41h ; A
.eh_frame:000000000000CE6F                 db  0Eh
.eh_frame:000000000000CE70                 db  10h
.eh_frame:000000000000CE71                 db  41h ; A
.eh_frame:000000000000CE72                 db  0Eh
.eh_frame:000000000000CE73                 db    8
.eh_frame:000000000000CE74                 db  41h ; A
.eh_frame:000000000000CE75                 db  0Bh
.eh_frame:000000000000CE76                 db    0
.eh_frame:000000000000CE77                 db    0
.eh_frame:000000000000CE78                 db  4Ch ; L
.eh_frame:000000000000CE79                 db    0
.eh_frame:000000000000CE7A                 db    0
.eh_frame:000000000000CE7B                 db    0
.eh_frame:000000000000CE7C                 db 0B4h
.eh_frame:000000000000CE7D                 db  15h
.eh_frame:000000000000CE7E                 db    0
.eh_frame:000000000000CE7F                 db    0
.eh_frame:000000000000CE80                 db 0B0h
.eh_frame:000000000000CE81                 db 0C4h
.eh_frame:000000000000CE82                 db 0FFh
.eh_frame:000000000000CE83                 db 0FFh
.eh_frame:000000000000CE84                 db 0D2h
.eh_frame:000000000000CE85                 db    2
.eh_frame:000000000000CE86                 db    0
.eh_frame:000000000000CE87                 db    0
.eh_frame:000000000000CE88                 db    0
.eh_frame:000000000000CE89                 db  42h ; B
.eh_frame:000000000000CE8A                 db  0Eh
.eh_frame:000000000000CE8B                 db  10h
.eh_frame:000000000000CE8C                 db  8Fh
.eh_frame:000000000000CE8D                 db    2
.eh_frame:000000000000CE8E                 db  42h ; B
.eh_frame:000000000000CE8F                 db  0Eh
.eh_frame:000000000000CE90                 db  18h
.eh_frame:000000000000CE91                 db  8Eh
.eh_frame:000000000000CE92                 db    3
.eh_frame:000000000000CE93                 db  42h ; B
.eh_frame:000000000000CE94                 db  0Eh
.eh_frame:000000000000CE95                 db  20h
.eh_frame:000000000000CE96                 db  8Dh
.eh_frame:000000000000CE97                 db    4
.eh_frame:000000000000CE98                 db  42h ; B
.eh_frame:000000000000CE99                 db  0Eh
.eh_frame:000000000000CE9A                 db  28h ; (
.eh_frame:000000000000CE9B                 db  8Ch
.eh_frame:000000000000CE9C                 db    5
.eh_frame:000000000000CE9D                 db  41h ; A
.eh_frame:000000000000CE9E                 db  0Eh
.eh_frame:000000000000CE9F                 db  30h ; 0
.eh_frame:000000000000CEA0                 db  86h
.eh_frame:000000000000CEA1                 db    6
.eh_frame:000000000000CEA2                 db  41h ; A
.eh_frame:000000000000CEA3                 db  0Eh
.eh_frame:000000000000CEA4                 db  38h ; 8
.eh_frame:000000000000CEA5                 db  83h
.eh_frame:000000000000CEA6                 db    7
.eh_frame:000000000000CEA7                 db  47h ; G
.eh_frame:000000000000CEA8                 db  0Eh
.eh_frame:000000000000CEA9                 db  50h ; P
.eh_frame:000000000000CEAA                 db    2
.eh_frame:000000000000CEAB                 db  42h ; B
.eh_frame:000000000000CEAC                 db  0Ah
.eh_frame:000000000000CEAD                 db  0Eh
.eh_frame:000000000000CEAE                 db  38h ; 8
.eh_frame:000000000000CEAF                 db  41h ; A
.eh_frame:000000000000CEB0                 db  0Eh
.eh_frame:000000000000CEB1                 db  30h ; 0
.eh_frame:000000000000CEB2                 db  41h ; A
.eh_frame:000000000000CEB3                 db  0Eh
.eh_frame:000000000000CEB4                 db  28h ; (
.eh_frame:000000000000CEB5                 db  42h ; B
.eh_frame:000000000000CEB6                 db  0Eh
.eh_frame:000000000000CEB7                 db  20h
.eh_frame:000000000000CEB8                 db  42h ; B
.eh_frame:000000000000CEB9                 db  0Eh
.eh_frame:000000000000CEBA                 db  18h
.eh_frame:000000000000CEBB                 db  42h ; B
.eh_frame:000000000000CEBC                 db  0Eh
.eh_frame:000000000000CEBD                 db  10h
.eh_frame:000000000000CEBE                 db  42h ; B
.eh_frame:000000000000CEBF                 db  0Eh
.eh_frame:000000000000CEC0                 db    8
.eh_frame:000000000000CEC1                 db  43h ; C
.eh_frame:000000000000CEC2                 db  0Bh
.eh_frame:000000000000CEC3                 db    0
.eh_frame:000000000000CEC4                 db    0
.eh_frame:000000000000CEC5                 db    0
.eh_frame:000000000000CEC6                 db    0
.eh_frame:000000000000CEC7                 db    0
.eh_frame:000000000000CEC8                 db  34h ; 4
.eh_frame:000000000000CEC9                 db    0
.eh_frame:000000000000CECA                 db    0
.eh_frame:000000000000CECB                 db    0
.eh_frame:000000000000CECC                 db    4
.eh_frame:000000000000CECD                 db  16h
.eh_frame:000000000000CECE                 db    0
.eh_frame:000000000000CECF                 db    0
.eh_frame:000000000000CED0                 db  40h ; @
.eh_frame:000000000000CED1                 db 0C7h
.eh_frame:000000000000CED2                 db 0FFh
.eh_frame:000000000000CED3                 db 0FFh
.eh_frame:000000000000CED4                 db  7Bh ; {
.eh_frame:000000000000CED5                 db    0
.eh_frame:000000000000CED6                 db    0
.eh_frame:000000000000CED7                 db    0
.eh_frame:000000000000CED8                 db    0
.eh_frame:000000000000CED9                 db  42h ; B
.eh_frame:000000000000CEDA                 db  0Eh
.eh_frame:000000000000CEDB                 db  10h
.eh_frame:000000000000CEDC                 db  8Ch
.eh_frame:000000000000CEDD                 db    2
.eh_frame:000000000000CEDE                 db  41h ; A
.eh_frame:000000000000CEDF                 db  0Eh
.eh_frame:000000000000CEE0                 db  18h
.eh_frame:000000000000CEE1                 db  86h
.eh_frame:000000000000CEE2                 db    3
.eh_frame:000000000000CEE3                 db  41h ; A
.eh_frame:000000000000CEE4                 db  0Eh
.eh_frame:000000000000CEE5                 db  20h
.eh_frame:000000000000CEE6                 db  83h
.eh_frame:000000000000CEE7                 db    4
.eh_frame:000000000000CEE8                 db  7Dh ; }
.eh_frame:000000000000CEE9                 db  0Ah
.eh_frame:000000000000CEEA                 db  0Eh
.eh_frame:000000000000CEEB                 db  18h
.eh_frame:000000000000CEEC                 db  41h ; A
.eh_frame:000000000000CEED                 db  0Eh
.eh_frame:000000000000CEEE                 db  10h
.eh_frame:000000000000CEEF                 db  42h ; B
.eh_frame:000000000000CEF0                 db  0Eh
.eh_frame:000000000000CEF1                 db    8
.eh_frame:000000000000CEF2                 db  44h ; D
.eh_frame:000000000000CEF3                 db  0Bh
.eh_frame:000000000000CEF4                 db  60h ; `
.eh_frame:000000000000CEF5                 db  0Ah
.eh_frame:000000000000CEF6                 db  0Eh
.eh_frame:000000000000CEF7                 db  18h
.eh_frame:000000000000CEF8                 db  41h ; A
.eh_frame:000000000000CEF9                 db  0Eh
.eh_frame:000000000000CEFA                 db  10h
.eh_frame:000000000000CEFB                 db  42h ; B
.eh_frame:000000000000CEFC                 db  0Eh
.eh_frame:000000000000CEFD                 db    8
.eh_frame:000000000000CEFE                 db  45h ; E
.eh_frame:000000000000CEFF                 db  0Bh
.eh_frame:000000000000CF00                 db  34h ; 4
.eh_frame:000000000000CF01                 db    0
.eh_frame:000000000000CF02                 db    0
.eh_frame:000000000000CF03                 db    0
.eh_frame:000000000000CF04                 db  3Ch ; <
.eh_frame:000000000000CF05                 db  16h
.eh_frame:000000000000CF06                 db    0
.eh_frame:000000000000CF07                 db    0
.eh_frame:000000000000CF08                 db  88h
.eh_frame:000000000000CF09                 db 0C7h
.eh_frame:000000000000CF0A                 db 0FFh
.eh_frame:000000000000CF0B                 db 0FFh
.eh_frame:000000000000CF0C                 db  7Eh ; ~
.eh_frame:000000000000CF0D                 db    2
.eh_frame:000000000000CF0E                 db    0
.eh_frame:000000000000CF0F                 db    0
.eh_frame:000000000000CF10                 db    0
.eh_frame:000000000000CF11                 db  42h ; B
.eh_frame:000000000000CF12                 db  0Eh
.eh_frame:000000000000CF13                 db  10h
.eh_frame:000000000000CF14                 db  8Ch
.eh_frame:000000000000CF15                 db    2
.eh_frame:000000000000CF16                 db  41h ; A
.eh_frame:000000000000CF17                 db  0Eh
.eh_frame:000000000000CF18                 db  18h
.eh_frame:000000000000CF19                 db  86h
.eh_frame:000000000000CF1A                 db    3
.eh_frame:000000000000CF1B                 db  43h ; C
.eh_frame:000000000000CF1C                 db  0Eh
.eh_frame:000000000000CF1D                 db  20h
.eh_frame:000000000000CF1E                 db  83h
.eh_frame:000000000000CF1F                 db    4
.eh_frame:000000000000CF20                 db  44h ; D
.eh_frame:000000000000CF21                 db  0Eh
.eh_frame:000000000000CF22                 db  70h ; p
.eh_frame:000000000000CF23                 db    2
.eh_frame:000000000000CF24                 db 0F0h
.eh_frame:000000000000CF25                 db  0Ah
.eh_frame:000000000000CF26                 db  0Eh
.eh_frame:000000000000CF27                 db  20h
.eh_frame:000000000000CF28                 db  41h ; A
.eh_frame:000000000000CF29                 db  0Eh
.eh_frame:000000000000CF2A                 db  18h
.eh_frame:000000000000CF2B                 db  41h ; A
.eh_frame:000000000000CF2C                 db  0Eh
.eh_frame:000000000000CF2D                 db  10h
.eh_frame:000000000000CF2E                 db  42h ; B
.eh_frame:000000000000CF2F                 db  0Eh
.eh_frame:000000000000CF30                 db    8
.eh_frame:000000000000CF31                 db  42h ; B
.eh_frame:000000000000CF32                 db  0Bh
.eh_frame:000000000000CF33                 db    0
.eh_frame:000000000000CF34                 db    0
.eh_frame:000000000000CF35                 db    0
.eh_frame:000000000000CF36                 db    0
.eh_frame:000000000000CF37                 db    0
.eh_frame:000000000000CF38                 db  1Ch
.eh_frame:000000000000CF39                 db    0
.eh_frame:000000000000CF3A                 db    0
.eh_frame:000000000000CF3B                 db    0
.eh_frame:000000000000CF3C                 db  74h ; t
.eh_frame:000000000000CF3D                 db  16h
.eh_frame:000000000000CF3E                 db    0
.eh_frame:000000000000CF3F                 db    0
.eh_frame:000000000000CF40                 db 0D0h
.eh_frame:000000000000CF41                 db 0C9h
.eh_frame:000000000000CF42                 db 0FFh
.eh_frame:000000000000CF43                 db 0FFh
.eh_frame:000000000000CF44                 db  40h ; @
.eh_frame:000000000000CF45                 db    0
.eh_frame:000000000000CF46                 db    0
.eh_frame:000000000000CF47                 db    0
.eh_frame:000000000000CF48                 db    0
.eh_frame:000000000000CF49                 db  44h ; D
.eh_frame:000000000000CF4A                 db  0Eh
.eh_frame:000000000000CF4B                 db  10h
.eh_frame:000000000000CF4C                 db  83h
.eh_frame:000000000000CF4D                 db    2
.eh_frame:000000000000CF4E                 db  5Ah ; Z
.eh_frame:000000000000CF4F                 db  0Ah
.eh_frame:000000000000CF50                 db  0Eh
.eh_frame:000000000000CF51                 db    8
.eh_frame:000000000000CF52                 db  4Ah ; J
.eh_frame:000000000000CF53                 db  0Bh
.eh_frame:000000000000CF54                 db  53h ; S
.eh_frame:000000000000CF55                 db  0Eh
.eh_frame:000000000000CF56                 db    8
.eh_frame:000000000000CF57                 db    0
.eh_frame:000000000000CF58                 db  2Ch ; ,
.eh_frame:000000000000CF59                 db    0
.eh_frame:000000000000CF5A                 db    0
.eh_frame:000000000000CF5B                 db    0
.eh_frame:000000000000CF5C                 db  94h
.eh_frame:000000000000CF5D                 db  16h
.eh_frame:000000000000CF5E                 db    0
.eh_frame:000000000000CF5F                 db    0
.eh_frame:000000000000CF60                 db 0F0h
.eh_frame:000000000000CF61                 db 0C9h
.eh_frame:000000000000CF62                 db 0FFh
.eh_frame:000000000000CF63                 db 0FFh
.eh_frame:000000000000CF64                 db  57h ; W
.eh_frame:000000000000CF65                 db    0
.eh_frame:000000000000CF66                 db    0
.eh_frame:000000000000CF67                 db    0
.eh_frame:000000000000CF68                 db    0
.eh_frame:000000000000CF69                 db  63h ; c
.eh_frame:000000000000CF6A                 db  0Eh
.eh_frame:000000000000CF6B                 db  10h
.eh_frame:000000000000CF6C                 db  8Ch
.eh_frame:000000000000CF6D                 db    2
.eh_frame:000000000000CF6E                 db  41h ; A
.eh_frame:000000000000CF6F                 db  0Eh
.eh_frame:000000000000CF70                 db  18h
.eh_frame:000000000000CF71                 db  86h
.eh_frame:000000000000CF72                 db    3
.eh_frame:000000000000CF73                 db  44h ; D
.eh_frame:000000000000CF74                 db  0Eh
.eh_frame:000000000000CF75                 db  20h
.eh_frame:000000000000CF76                 db  83h
.eh_frame:000000000000CF77                 db    4
.eh_frame:000000000000CF78                 db  6Bh ; k
.eh_frame:000000000000CF79                 db  0Eh
.eh_frame:000000000000CF7A                 db  18h
.eh_frame:000000000000CF7B                 db  41h ; A
.eh_frame:000000000000CF7C                 db  0Eh
.eh_frame:000000000000CF7D                 db  10h
.eh_frame:000000000000CF7E                 db  42h ; B
.eh_frame:000000000000CF7F                 db  0Eh
.eh_frame:000000000000CF80                 db    8
.eh_frame:000000000000CF81                 db    0
.eh_frame:000000000000CF82                 db    0
.eh_frame:000000000000CF83                 db    0
.eh_frame:000000000000CF84                 db    0
.eh_frame:000000000000CF85                 db    0
.eh_frame:000000000000CF86                 db    0
.eh_frame:000000000000CF87                 db    0
.eh_frame:000000000000CF88                 db  44h ; D
.eh_frame:000000000000CF89                 db    0
.eh_frame:000000000000CF8A                 db    0
.eh_frame:000000000000CF8B                 db    0
.eh_frame:000000000000CF8C                 db 0C4h
.eh_frame:000000000000CF8D                 db  16h
.eh_frame:000000000000CF8E                 db    0
.eh_frame:000000000000CF8F                 db    0
.eh_frame:000000000000CF90                 db  20h
.eh_frame:000000000000CF91                 db 0CAh
.eh_frame:000000000000CF92                 db 0FFh
.eh_frame:000000000000CF93                 db 0FFh
.eh_frame:000000000000CF94                 db  5Ch ; \
.eh_frame:000000000000CF95                 db    1
.eh_frame:000000000000CF96                 db    0
.eh_frame:000000000000CF97                 db    0
.eh_frame:000000000000CF98                 db    0
.eh_frame:000000000000CF99                 db  42h ; B
.eh_frame:000000000000CF9A                 db  0Eh
.eh_frame:000000000000CF9B                 db  10h
.eh_frame:000000000000CF9C                 db  8Eh
.eh_frame:000000000000CF9D                 db    2
.eh_frame:000000000000CF9E                 db  42h ; B
.eh_frame:000000000000CF9F                 db  0Eh
.eh_frame:000000000000CFA0                 db  18h
.eh_frame:000000000000CFA1                 db  8Dh
.eh_frame:000000000000CFA2                 db    3
.eh_frame:000000000000CFA3                 db  42h ; B
.eh_frame:000000000000CFA4                 db  0Eh
.eh_frame:000000000000CFA5                 db  20h
.eh_frame:000000000000CFA6                 db  8Ch
.eh_frame:000000000000CFA7                 db    4
.eh_frame:000000000000CFA8                 db  41h ; A
.eh_frame:000000000000CFA9                 db  0Eh
.eh_frame:000000000000CFAA                 db  28h ; (
.eh_frame:000000000000CFAB                 db  86h
.eh_frame:000000000000CFAC                 db    5
.eh_frame:000000000000CFAD                 db  41h ; A
.eh_frame:000000000000CFAE                 db  0Eh
.eh_frame:000000000000CFAF                 db  30h ; 0
.eh_frame:000000000000CFB0                 db  83h
.eh_frame:000000000000CFB1                 db    6
.eh_frame:000000000000CFB2                 db  47h ; G
.eh_frame:000000000000CFB3                 db  0Eh
.eh_frame:000000000000CFB4                 db  60h ; `
.eh_frame:000000000000CFB5                 db    2
.eh_frame:000000000000CFB6                 db 0A4h
.eh_frame:000000000000CFB7                 db  0Ah
.eh_frame:000000000000CFB8                 db  0Eh
.eh_frame:000000000000CFB9                 db  30h ; 0
.eh_frame:000000000000CFBA                 db  41h ; A
.eh_frame:000000000000CFBB                 db  0Eh
.eh_frame:000000000000CFBC                 db  28h ; (
.eh_frame:000000000000CFBD                 db  41h ; A
.eh_frame:000000000000CFBE                 db  0Eh
.eh_frame:000000000000CFBF                 db  20h
.eh_frame:000000000000CFC0                 db  42h ; B
.eh_frame:000000000000CFC1                 db  0Eh
.eh_frame:000000000000CFC2                 db  18h
.eh_frame:000000000000CFC3                 db  42h ; B
.eh_frame:000000000000CFC4                 db  0Eh
.eh_frame:000000000000CFC5                 db  10h
.eh_frame:000000000000CFC6                 db  42h ; B
.eh_frame:000000000000CFC7                 db  0Eh
.eh_frame:000000000000CFC8                 db    8
.eh_frame:000000000000CFC9                 db  45h ; E
.eh_frame:000000000000CFCA                 db  0Bh
.eh_frame:000000000000CFCB                 db    0
.eh_frame:000000000000CFCC                 db    0
.eh_frame:000000000000CFCD                 db    0
.eh_frame:000000000000CFCE                 db    0
.eh_frame:000000000000CFCF                 db    0
.eh_frame:000000000000CFD0                 db  14h
.eh_frame:000000000000CFD1                 db    0
.eh_frame:000000000000CFD2                 db    0
.eh_frame:000000000000CFD3                 db    0
.eh_frame:000000000000CFD4                 db  0Ch
.eh_frame:000000000000CFD5                 db  17h
.eh_frame:000000000000CFD6                 db    0
.eh_frame:000000000000CFD7                 db    0
.eh_frame:000000000000CFD8                 db  38h ; 8
.eh_frame:000000000000CFD9                 db 0CBh
.eh_frame:000000000000CFDA                 db 0FFh
.eh_frame:000000000000CFDB                 db 0FFh
.eh_frame:000000000000CFDC                 db  0Eh
.eh_frame:000000000000CFDD                 db    0
.eh_frame:000000000000CFDE                 db    0
.eh_frame:000000000000CFDF                 db    0
.eh_frame:000000000000CFE0                 db    0
.eh_frame:000000000000CFE1                 db    0
.eh_frame:000000000000CFE2                 db    0
.eh_frame:000000000000CFE3                 db    0
.eh_frame:000000000000CFE4                 db    0
.eh_frame:000000000000CFE5                 db    0
.eh_frame:000000000000CFE6                 db    0
.eh_frame:000000000000CFE7                 db    0
.eh_frame:000000000000CFE8                 db  44h ; D
.eh_frame:000000000000CFE9                 db    0
.eh_frame:000000000000CFEA                 db    0
.eh_frame:000000000000CFEB                 db    0
.eh_frame:000000000000CFEC                 db  24h ; $
.eh_frame:000000000000CFED                 db  17h
.eh_frame:000000000000CFEE                 db    0
.eh_frame:000000000000CFEF                 db    0
.eh_frame:000000000000CFF0                 db  30h ; 0
.eh_frame:000000000000CFF1                 db 0CBh
.eh_frame:000000000000CFF2                 db 0FFh
.eh_frame:000000000000CFF3                 db 0FFh
.eh_frame:000000000000CFF4                 db  65h ; e
.eh_frame:000000000000CFF5                 db    0
.eh_frame:000000000000CFF6                 db    0
.eh_frame:000000000000CFF7                 db    0
.eh_frame:000000000000CFF8                 db    0
.eh_frame:000000000000CFF9                 db  42h ; B
.eh_frame:000000000000CFFA                 db  0Eh
.eh_frame:000000000000CFFB                 db  10h
.eh_frame:000000000000CFFC                 db  8Fh
.eh_frame:000000000000CFFD                 db    2
.eh_frame:000000000000CFFE                 db  42h ; B
.eh_frame:000000000000CFFF                 db  0Eh
.eh_frame:000000000000D000                 db  18h
.eh_frame:000000000000D001                 db  8Eh
.eh_frame:000000000000D002                 db    3
.eh_frame:000000000000D003                 db  45h ; E
.eh_frame:000000000000D004                 db  0Eh
.eh_frame:000000000000D005                 db  20h
.eh_frame:000000000000D006                 db  8Dh
.eh_frame:000000000000D007                 db    4
.eh_frame:000000000000D008                 db  42h ; B
.eh_frame:000000000000D009                 db  0Eh
.eh_frame:000000000000D00A                 db  28h ; (
.eh_frame:000000000000D00B                 db  8Ch
.eh_frame:000000000000D00C                 db    5
.eh_frame:000000000000D00D                 db  48h ; H
.eh_frame:000000000000D00E                 db  0Eh
.eh_frame:000000000000D00F                 db  30h ; 0
.eh_frame:000000000000D010                 db  86h
.eh_frame:000000000000D011                 db    6
.eh_frame:000000000000D012                 db  48h ; H
.eh_frame:000000000000D013                 db  0Eh
.eh_frame:000000000000D014                 db  38h ; 8
.eh_frame:000000000000D015                 db  83h
.eh_frame:000000000000D016                 db    7
.eh_frame:000000000000D017                 db  4Dh ; M
.eh_frame:000000000000D018                 db  0Eh
.eh_frame:000000000000D019                 db  40h ; @
.eh_frame:000000000000D01A                 db  72h ; r
.eh_frame:000000000000D01B                 db  0Eh
.eh_frame:000000000000D01C                 db  38h ; 8
.eh_frame:000000000000D01D                 db  41h ; A
.eh_frame:000000000000D01E                 db  0Eh
.eh_frame:000000000000D01F                 db  30h ; 0
.eh_frame:000000000000D020                 db  41h ; A
.eh_frame:000000000000D021                 db  0Eh
.eh_frame:000000000000D022                 db  28h ; (
.eh_frame:000000000000D023                 db  42h ; B
.eh_frame:000000000000D024                 db  0Eh
.eh_frame:000000000000D025                 db  20h
.eh_frame:000000000000D026                 db  42h ; B
.eh_frame:000000000000D027                 db  0Eh
.eh_frame:000000000000D028                 db  18h
.eh_frame:000000000000D029                 db  42h ; B
.eh_frame:000000000000D02A                 db  0Eh
.eh_frame:000000000000D02B                 db  10h
.eh_frame:000000000000D02C                 db  42h ; B
.eh_frame:000000000000D02D                 db  0Eh
.eh_frame:000000000000D02E                 db    8
.eh_frame:000000000000D02F                 db    0
.eh_frame:000000000000D030                 db  14h
.eh_frame:000000000000D031                 db    0
.eh_frame:000000000000D032                 db    0
.eh_frame:000000000000D033                 db    0
.eh_frame:000000000000D034                 db  6Ch ; l
.eh_frame:000000000000D035                 db  17h
.eh_frame:000000000000D036                 db    0
.eh_frame:000000000000D037                 db    0
.eh_frame:000000000000D038                 db  58h ; X
.eh_frame:000000000000D039                 db 0CBh
.eh_frame:000000000000D03A                 db 0FFh
.eh_frame:000000000000D03B                 db 0FFh
.eh_frame:000000000000D03C                 db    2
.eh_frame:000000000000D03D                 db    0
.eh_frame:000000000000D03E                 db    0
.eh_frame:000000000000D03F                 db    0
.eh_frame:000000000000D040                 db    0
.eh_frame:000000000000D041                 db    0
.eh_frame:000000000000D042                 db    0
.eh_frame:000000000000D043                 db    0
.eh_frame:000000000000D044                 db    0
.eh_frame:000000000000D045                 db    0
.eh_frame:000000000000D046                 db    0
.eh_frame:000000000000D047                 db    0
.eh_frame:000000000000D048                 db  10h
.eh_frame:000000000000D049                 db    0
.eh_frame:000000000000D04A                 db    0
.eh_frame:000000000000D04B                 db    0
.eh_frame:000000000000D04C                 db  84h
.eh_frame:000000000000D04D                 db  17h
.eh_frame:000000000000D04E                 db    0
.eh_frame:000000000000D04F                 db    0
.eh_frame:000000000000D050                 db  50h ; P
.eh_frame:000000000000D051                 db 0CBh
.eh_frame:000000000000D052                 db 0FFh
.eh_frame:000000000000D053                 db 0FFh
.eh_frame:000000000000D054                 db  0Eh
.eh_frame:000000000000D055                 db    0
.eh_frame:000000000000D056                 db    0
.eh_frame:000000000000D057                 db    0
.eh_frame:000000000000D058                 db    0
.eh_frame:000000000000D059                 db    0
.eh_frame:000000000000D05A                 db    0
.eh_frame:000000000000D05B                 db    0
.eh_frame:000000000000D05C __FRAME_END__   db    0
.eh_frame:000000000000D05D                 db    0
.eh_frame:000000000000D05E                 db    0
.eh_frame:000000000000D05F                 db    0
.eh_frame:000000000000D05F _eh_frame       ends
.eh_frame:000000000000D05F
.init_array:000000000020D990 ; ELF Initialization Function Table
.init_array:000000000020D990 ; ===========================================================================
.init_array:000000000020D990
.init_array:000000000020D990 ; Segment type: Pure data
.init_array:000000000020D990 ; Segment permissions: Read/Write
.init_array:000000000020D990 _init_array     segment qword public 'DATA' use64
.init_array:000000000020D990                 assume cs:_init_array
.init_array:000000000020D990                 ;org 20D990h
.init_array:000000000020D990 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:000000000020D990                                         ; DATA XREF: LOAD:00000000000000F8↑o
.init_array:000000000020D990                                         ; LOAD:0000000000000210↑o ...
.init_array:000000000020D990 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:000000000020D990
.fini_array:000000000020D998 ; ELF Termination Function Table
.fini_array:000000000020D998 ; ===========================================================================
.fini_array:000000000020D998
.fini_array:000000000020D998 ; Segment type: Pure data
.fini_array:000000000020D998 ; Segment permissions: Read/Write
.fini_array:000000000020D998 _fini_array     segment qword public 'DATA' use64
.fini_array:000000000020D998                 assume cs:_fini_array
.fini_array:000000000020D998                 ;org 20D998h
.fini_array:000000000020D998 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:000000000020D998                                         ; DATA XREF: __libc_csu_init+13↑o
.fini_array:000000000020D998 _fini_array     ends                    ; Alternative name is '__init_array_end'
.fini_array:000000000020D998
.data.rel.ro:000000000020D9A0 ; ===========================================================================
.data.rel.ro:000000000020D9A0
.data.rel.ro:000000000020D9A0 ; Segment type: Pure data
.data.rel.ro:000000000020D9A0 ; Segment permissions: Read/Write
.data.rel.ro:000000000020D9A0 _data_rel_ro    segment align_32 public 'DATA' use64
.data.rel.ro:000000000020D9A0                 assume cs:_data_rel_ro
.data.rel.ro:000000000020D9A0                 ;org 20D9A0h
.data.rel.ro:000000000020D9A0 ; struct option long_options
.data.rel.ro:000000000020D9A0 long_options    dq offset aRecursive    ; name
.data.rel.ro:000000000020D9A0                                         ; DATA XREF: main:loc_1D28↑o
.data.rel.ro:000000000020D9A0                 dd 0                    ; has_arg ; "recursive"
.data.rel.ro:000000000020D9A0                 db 4 dup(0)
.data.rel.ro:000000000020D9A0                 dq 0                    ; flag
.data.rel.ro:000000000020D9A0                 dd 52h                  ; val
.data.rel.ro:000000000020D9A0                 db 4 dup(0)
.data.rel.ro:000000000020D9C0                 dq offset aNoDereference+3 ; "dereference"
.data.rel.ro:000000000020D9C8                 db    0
.data.rel.ro:000000000020D9C9                 db    0
.data.rel.ro:000000000020D9CA                 db    0
.data.rel.ro:000000000020D9CB                 db    0
.data.rel.ro:000000000020D9CC                 db    0
.data.rel.ro:000000000020D9CD                 db    0
.data.rel.ro:000000000020D9CE                 db    0
.data.rel.ro:000000000020D9CF                 db    0
.data.rel.ro:000000000020D9D0                 db    0
.data.rel.ro:000000000020D9D1                 db    0
.data.rel.ro:000000000020D9D2                 db    0
.data.rel.ro:000000000020D9D3                 db    0
.data.rel.ro:000000000020D9D4                 db    0
.data.rel.ro:000000000020D9D5                 db    0
.data.rel.ro:000000000020D9D6                 db    0
.data.rel.ro:000000000020D9D7                 db    0
.data.rel.ro:000000000020D9D8                 db  80h
.data.rel.ro:000000000020D9D9                 db    0
.data.rel.ro:000000000020D9DA                 db    0
.data.rel.ro:000000000020D9DB                 db    0
.data.rel.ro:000000000020D9DC                 db    0
.data.rel.ro:000000000020D9DD                 db    0
.data.rel.ro:000000000020D9DE                 db    0
.data.rel.ro:000000000020D9DF                 db    0
.data.rel.ro:000000000020D9E0                 dq offset aNoDereference ; "no-dereference"
.data.rel.ro:000000000020D9E8                 db    0
.data.rel.ro:000000000020D9E9                 db    0
.data.rel.ro:000000000020D9EA                 db    0
.data.rel.ro:000000000020D9EB                 db    0
.data.rel.ro:000000000020D9EC                 db    0
.data.rel.ro:000000000020D9ED                 db    0
.data.rel.ro:000000000020D9EE                 db    0
.data.rel.ro:000000000020D9EF                 db    0
.data.rel.ro:000000000020D9F0                 db    0
.data.rel.ro:000000000020D9F1                 db    0
.data.rel.ro:000000000020D9F2                 db    0
.data.rel.ro:000000000020D9F3                 db    0
.data.rel.ro:000000000020D9F4                 db    0
.data.rel.ro:000000000020D9F5                 db    0
.data.rel.ro:000000000020D9F6                 db    0
.data.rel.ro:000000000020D9F7                 db    0
.data.rel.ro:000000000020D9F8                 db  68h ; h
.data.rel.ro:000000000020D9F9                 db    0
.data.rel.ro:000000000020D9FA                 db    0
.data.rel.ro:000000000020D9FB                 db    0
.data.rel.ro:000000000020D9FC                 db    0
.data.rel.ro:000000000020D9FD                 db    0
.data.rel.ro:000000000020D9FE                 db    0
.data.rel.ro:000000000020D9FF                 db    0
.data.rel.ro:000000000020DA00                 dq offset aNoPreserveRoot_0 ; "no-preserve-root"
.data.rel.ro:000000000020DA08                 db    0
.data.rel.ro:000000000020DA09                 db    0
.data.rel.ro:000000000020DA0A                 db    0
.data.rel.ro:000000000020DA0B                 db    0
.data.rel.ro:000000000020DA0C                 db    0
.data.rel.ro:000000000020DA0D                 db    0
.data.rel.ro:000000000020DA0E                 db    0
.data.rel.ro:000000000020DA0F                 db    0
.data.rel.ro:000000000020DA10                 db    0
.data.rel.ro:000000000020DA11                 db    0
.data.rel.ro:000000000020DA12                 db    0
.data.rel.ro:000000000020DA13                 db    0
.data.rel.ro:000000000020DA14                 db    0
.data.rel.ro:000000000020DA15                 db    0
.data.rel.ro:000000000020DA16                 db    0
.data.rel.ro:000000000020DA17                 db    0
.data.rel.ro:000000000020DA18                 db  81h
.data.rel.ro:000000000020DA19                 db    0
.data.rel.ro:000000000020DA1A                 db    0
.data.rel.ro:000000000020DA1B                 db    0
.data.rel.ro:000000000020DA1C                 db    0
.data.rel.ro:000000000020DA1D                 db    0
.data.rel.ro:000000000020DA1E                 db    0
.data.rel.ro:000000000020DA1F                 db    0
.data.rel.ro:000000000020DA20                 dq offset aNoPreserveRoot_0+3 ; "preserve-root"
.data.rel.ro:000000000020DA28                 db    0
.data.rel.ro:000000000020DA29                 db    0
.data.rel.ro:000000000020DA2A                 db    0
.data.rel.ro:000000000020DA2B                 db    0
.data.rel.ro:000000000020DA2C                 db    0
.data.rel.ro:000000000020DA2D                 db    0
.data.rel.ro:000000000020DA2E                 db    0
.data.rel.ro:000000000020DA2F                 db    0
.data.rel.ro:000000000020DA30                 db    0
.data.rel.ro:000000000020DA31                 db    0
.data.rel.ro:000000000020DA32                 db    0
.data.rel.ro:000000000020DA33                 db    0
.data.rel.ro:000000000020DA34                 db    0
.data.rel.ro:000000000020DA35                 db    0
.data.rel.ro:000000000020DA36                 db    0
.data.rel.ro:000000000020DA37                 db    0
.data.rel.ro:000000000020DA38                 db  82h
.data.rel.ro:000000000020DA39                 db    0
.data.rel.ro:000000000020DA3A                 db    0
.data.rel.ro:000000000020DA3B                 db    0
.data.rel.ro:000000000020DA3C                 db    0
.data.rel.ro:000000000020DA3D                 db    0
.data.rel.ro:000000000020DA3E                 db    0
.data.rel.ro:000000000020DA3F                 db    0
.data.rel.ro:000000000020DA40                 dq offset aNoDereference+5 ; "reference"
.data.rel.ro:000000000020DA48                 db    1
.data.rel.ro:000000000020DA49                 db    0
.data.rel.ro:000000000020DA4A                 db    0
.data.rel.ro:000000000020DA4B                 db    0
.data.rel.ro:000000000020DA4C                 db    0
.data.rel.ro:000000000020DA4D                 db    0
.data.rel.ro:000000000020DA4E                 db    0
.data.rel.ro:000000000020DA4F                 db    0
.data.rel.ro:000000000020DA50                 db    0
.data.rel.ro:000000000020DA51                 db    0
.data.rel.ro:000000000020DA52                 db    0
.data.rel.ro:000000000020DA53                 db    0
.data.rel.ro:000000000020DA54                 db    0
.data.rel.ro:000000000020DA55                 db    0
.data.rel.ro:000000000020DA56                 db    0
.data.rel.ro:000000000020DA57                 db    0
.data.rel.ro:000000000020DA58                 db  83h
.data.rel.ro:000000000020DA59                 db    0
.data.rel.ro:000000000020DA5A                 db    0
.data.rel.ro:000000000020DA5B                 db    0
.data.rel.ro:000000000020DA5C                 db    0
.data.rel.ro:000000000020DA5D                 db    0
.data.rel.ro:000000000020DA5E                 db    0
.data.rel.ro:000000000020DA5F                 db    0
.data.rel.ro:000000000020DA60                 dq offset aUser         ; "user"
.data.rel.ro:000000000020DA68                 db    1
.data.rel.ro:000000000020DA69                 db    0
.data.rel.ro:000000000020DA6A                 db    0
.data.rel.ro:000000000020DA6B                 db    0
.data.rel.ro:000000000020DA6C                 db    0
.data.rel.ro:000000000020DA6D                 db    0
.data.rel.ro:000000000020DA6E                 db    0
.data.rel.ro:000000000020DA6F                 db    0
.data.rel.ro:000000000020DA70                 db    0
.data.rel.ro:000000000020DA71                 db    0
.data.rel.ro:000000000020DA72                 db    0
.data.rel.ro:000000000020DA73                 db    0
.data.rel.ro:000000000020DA74                 db    0
.data.rel.ro:000000000020DA75                 db    0
.data.rel.ro:000000000020DA76                 db    0
.data.rel.ro:000000000020DA77                 db    0
.data.rel.ro:000000000020DA78                 db  75h ; u
.data.rel.ro:000000000020DA79                 db    0
.data.rel.ro:000000000020DA7A                 db    0
.data.rel.ro:000000000020DA7B                 db    0
.data.rel.ro:000000000020DA7C                 db    0
.data.rel.ro:000000000020DA7D                 db    0
.data.rel.ro:000000000020DA7E                 db    0
.data.rel.ro:000000000020DA7F                 db    0
.data.rel.ro:000000000020DA80                 dq offset aRole         ; "role"
.data.rel.ro:000000000020DA88                 db    1
.data.rel.ro:000000000020DA89                 db    0
.data.rel.ro:000000000020DA8A                 db    0
.data.rel.ro:000000000020DA8B                 db    0
.data.rel.ro:000000000020DA8C                 db    0
.data.rel.ro:000000000020DA8D                 db    0
.data.rel.ro:000000000020DA8E                 db    0
.data.rel.ro:000000000020DA8F                 db    0
.data.rel.ro:000000000020DA90                 db    0
.data.rel.ro:000000000020DA91                 db    0
.data.rel.ro:000000000020DA92                 db    0
.data.rel.ro:000000000020DA93                 db    0
.data.rel.ro:000000000020DA94                 db    0
.data.rel.ro:000000000020DA95                 db    0
.data.rel.ro:000000000020DA96                 db    0
.data.rel.ro:000000000020DA97                 db    0
.data.rel.ro:000000000020DA98                 db  72h ; r
.data.rel.ro:000000000020DA99                 db    0
.data.rel.ro:000000000020DA9A                 db    0
.data.rel.ro:000000000020DA9B                 db    0
.data.rel.ro:000000000020DA9C                 db    0
.data.rel.ro:000000000020DA9D                 db    0
.data.rel.ro:000000000020DA9E                 db    0
.data.rel.ro:000000000020DA9F                 db    0
.data.rel.ro:000000000020DAA0                 dq offset aType         ; "type"
.data.rel.ro:000000000020DAA8                 db    1
.data.rel.ro:000000000020DAA9                 db    0
.data.rel.ro:000000000020DAAA                 db    0
.data.rel.ro:000000000020DAAB                 db    0
.data.rel.ro:000000000020DAAC                 db    0
.data.rel.ro:000000000020DAAD                 db    0
.data.rel.ro:000000000020DAAE                 db    0
.data.rel.ro:000000000020DAAF                 db    0
.data.rel.ro:000000000020DAB0                 db    0
.data.rel.ro:000000000020DAB1                 db    0
.data.rel.ro:000000000020DAB2                 db    0
.data.rel.ro:000000000020DAB3                 db    0
.data.rel.ro:000000000020DAB4                 db    0
.data.rel.ro:000000000020DAB5                 db    0
.data.rel.ro:000000000020DAB6                 db    0
.data.rel.ro:000000000020DAB7                 db    0
.data.rel.ro:000000000020DAB8                 db  74h ; t
.data.rel.ro:000000000020DAB9                 db    0
.data.rel.ro:000000000020DABA                 db    0
.data.rel.ro:000000000020DABB                 db    0
.data.rel.ro:000000000020DABC                 db    0
.data.rel.ro:000000000020DABD                 db    0
.data.rel.ro:000000000020DABE                 db    0
.data.rel.ro:000000000020DABF                 db    0
.data.rel.ro:000000000020DAC0                 dq offset aRange        ; "range"
.data.rel.ro:000000000020DAC8                 db    1
.data.rel.ro:000000000020DAC9                 db    0
.data.rel.ro:000000000020DACA                 db    0
.data.rel.ro:000000000020DACB                 db    0
.data.rel.ro:000000000020DACC                 db    0
.data.rel.ro:000000000020DACD                 db    0
.data.rel.ro:000000000020DACE                 db    0
.data.rel.ro:000000000020DACF                 db    0
.data.rel.ro:000000000020DAD0                 db    0
.data.rel.ro:000000000020DAD1                 db    0
.data.rel.ro:000000000020DAD2                 db    0
.data.rel.ro:000000000020DAD3                 db    0
.data.rel.ro:000000000020DAD4                 db    0
.data.rel.ro:000000000020DAD5                 db    0
.data.rel.ro:000000000020DAD6                 db    0
.data.rel.ro:000000000020DAD7                 db    0
.data.rel.ro:000000000020DAD8                 db  6Ch ; l
.data.rel.ro:000000000020DAD9                 db    0
.data.rel.ro:000000000020DADA                 db    0
.data.rel.ro:000000000020DADB                 db    0
.data.rel.ro:000000000020DADC                 db    0
.data.rel.ro:000000000020DADD                 db    0
.data.rel.ro:000000000020DADE                 db    0
.data.rel.ro:000000000020DADF                 db    0
.data.rel.ro:000000000020DAE0                 dq offset aVerbose      ; "verbose"
.data.rel.ro:000000000020DAE8                 db    0
.data.rel.ro:000000000020DAE9                 db    0
.data.rel.ro:000000000020DAEA                 db    0
.data.rel.ro:000000000020DAEB                 db    0
.data.rel.ro:000000000020DAEC                 db    0
.data.rel.ro:000000000020DAED                 db    0
.data.rel.ro:000000000020DAEE                 db    0
.data.rel.ro:000000000020DAEF                 db    0
.data.rel.ro:000000000020DAF0                 db    0
.data.rel.ro:000000000020DAF1                 db    0
.data.rel.ro:000000000020DAF2                 db    0
.data.rel.ro:000000000020DAF3                 db    0
.data.rel.ro:000000000020DAF4                 db    0
.data.rel.ro:000000000020DAF5                 db    0
.data.rel.ro:000000000020DAF6                 db    0
.data.rel.ro:000000000020DAF7                 db    0
.data.rel.ro:000000000020DAF8                 db  76h ; v
.data.rel.ro:000000000020DAF9                 db    0
.data.rel.ro:000000000020DAFA                 db    0
.data.rel.ro:000000000020DAFB                 db    0
.data.rel.ro:000000000020DAFC                 db    0
.data.rel.ro:000000000020DAFD                 db    0
.data.rel.ro:000000000020DAFE                 db    0
.data.rel.ro:000000000020DAFF                 db    0
.data.rel.ro:000000000020DB00                 dq offset aHelp         ; "help"
.data.rel.ro:000000000020DB08                 db    0
.data.rel.ro:000000000020DB09                 db    0
.data.rel.ro:000000000020DB0A                 db    0
.data.rel.ro:000000000020DB0B                 db    0
.data.rel.ro:000000000020DB0C                 db    0
.data.rel.ro:000000000020DB0D                 db    0
.data.rel.ro:000000000020DB0E                 db    0
.data.rel.ro:000000000020DB0F                 db    0
.data.rel.ro:000000000020DB10                 db    0
.data.rel.ro:000000000020DB11                 db    0
.data.rel.ro:000000000020DB12                 db    0
.data.rel.ro:000000000020DB13                 db    0
.data.rel.ro:000000000020DB14                 db    0
.data.rel.ro:000000000020DB15                 db    0
.data.rel.ro:000000000020DB16                 db    0
.data.rel.ro:000000000020DB17                 db    0
.data.rel.ro:000000000020DB18                 db  7Eh ; ~
.data.rel.ro:000000000020DB19                 db 0FFh
.data.rel.ro:000000000020DB1A                 db 0FFh
.data.rel.ro:000000000020DB1B                 db 0FFh
.data.rel.ro:000000000020DB1C                 db    0
.data.rel.ro:000000000020DB1D                 db    0
.data.rel.ro:000000000020DB1E                 db    0
.data.rel.ro:000000000020DB1F                 db    0
.data.rel.ro:000000000020DB20                 dq offset aVersion      ; "version"
.data.rel.ro:000000000020DB28                 db    0
.data.rel.ro:000000000020DB29                 db    0
.data.rel.ro:000000000020DB2A                 db    0
.data.rel.ro:000000000020DB2B                 db    0
.data.rel.ro:000000000020DB2C                 db    0
.data.rel.ro:000000000020DB2D                 db    0
.data.rel.ro:000000000020DB2E                 db    0
.data.rel.ro:000000000020DB2F                 db    0
.data.rel.ro:000000000020DB30                 db    0
.data.rel.ro:000000000020DB31                 db    0
.data.rel.ro:000000000020DB32                 db    0
.data.rel.ro:000000000020DB33                 db    0
.data.rel.ro:000000000020DB34                 db    0
.data.rel.ro:000000000020DB35                 db    0
.data.rel.ro:000000000020DB36                 db    0
.data.rel.ro:000000000020DB37                 db    0
.data.rel.ro:000000000020DB38                 db  7Dh ; }
.data.rel.ro:000000000020DB39                 db 0FFh
.data.rel.ro:000000000020DB3A                 db 0FFh
.data.rel.ro:000000000020DB3B                 db 0FFh
.data.rel.ro:000000000020DB3C                 db    0
.data.rel.ro:000000000020DB3D                 db    0
.data.rel.ro:000000000020DB3E                 db    0
.data.rel.ro:000000000020DB3F                 db    0
.data.rel.ro:000000000020DB40                 db    0
.data.rel.ro:000000000020DB41                 db    0
.data.rel.ro:000000000020DB42                 db    0
.data.rel.ro:000000000020DB43                 db    0
.data.rel.ro:000000000020DB44                 db    0
.data.rel.ro:000000000020DB45                 db    0
.data.rel.ro:000000000020DB46                 db    0
.data.rel.ro:000000000020DB47                 db    0
.data.rel.ro:000000000020DB48                 db    0
.data.rel.ro:000000000020DB49                 db    0
.data.rel.ro:000000000020DB4A                 db    0
.data.rel.ro:000000000020DB4B                 db    0
.data.rel.ro:000000000020DB4C                 db    0
.data.rel.ro:000000000020DB4D                 db    0
.data.rel.ro:000000000020DB4E                 db    0
.data.rel.ro:000000000020DB4F                 db    0
.data.rel.ro:000000000020DB50                 db    0
.data.rel.ro:000000000020DB51                 db    0
.data.rel.ro:000000000020DB52                 db    0
.data.rel.ro:000000000020DB53                 db    0
.data.rel.ro:000000000020DB54                 db    0
.data.rel.ro:000000000020DB55                 db    0
.data.rel.ro:000000000020DB56                 db    0
.data.rel.ro:000000000020DB57                 db    0
.data.rel.ro:000000000020DB58                 db    0
.data.rel.ro:000000000020DB59                 db    0
.data.rel.ro:000000000020DB5A                 db    0
.data.rel.ro:000000000020DB5B                 db    0
.data.rel.ro:000000000020DB5C                 db    0
.data.rel.ro:000000000020DB5D                 db    0
.data.rel.ro:000000000020DB5E                 db    0
.data.rel.ro:000000000020DB5F                 db    0
.data.rel.ro:000000000020DB60                 public quoting_style_args
.data.rel.ro:000000000020DB60 quoting_style_args dq offset aLiteral   ; "literal"
.data.rel.ro:000000000020DB68                 dq offset aShell        ; "shell"
.data.rel.ro:000000000020DB70                 dq offset aShellAlways  ; "shell-always"
.data.rel.ro:000000000020DB78                 dq offset aShellEscape  ; "shell-escape"
.data.rel.ro:000000000020DB80                 dq offset aShellEscapeAlw ; "shell-escape-always"
.data.rel.ro:000000000020DB88                 dq offset file+1Bh      ; "c"
.data.rel.ro:000000000020DB90                 dq offset aCMaybe       ; "c-maybe"
.data.rel.ro:000000000020DB98                 dq offset aShellEscape+6 ; "escape"
.data.rel.ro:000000000020DBA0                 dq offset dirname+11h   ; "locale"
.data.rel.ro:000000000020DBA8                 dq offset aClocale      ; "clocale"
.data.rel.ro:000000000020DBB0                 db    0
.data.rel.ro:000000000020DBB1                 db    0
.data.rel.ro:000000000020DBB2                 db    0
.data.rel.ro:000000000020DBB3                 db    0
.data.rel.ro:000000000020DBB4                 db    0
.data.rel.ro:000000000020DBB5                 db    0
.data.rel.ro:000000000020DBB6                 db    0
.data.rel.ro:000000000020DBB7                 db    0
.data.rel.ro:000000000020DBB7 _data_rel_ro    ends
.data.rel.ro:000000000020DBB7
LOAD:000000000020DBB8 ; ELF Dynamic Information
LOAD:000000000020DBB8 ; ===========================================================================
LOAD:000000000020DBB8
LOAD:000000000020DBB8 ; Segment type: Pure data
LOAD:000000000020DBB8 ; Segment permissions: Read/Write
LOAD:000000000020DBB8 LOAD            segment byte public 'DATA' use64
LOAD:000000000020DBB8                 assume cs:LOAD
LOAD:000000000020DBB8                 ;org 20DBB8h
LOAD:000000000020DBB8 _DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000000130↑o
LOAD:000000000020DBB8                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:000000000020DBB8                                         ; DT_NEEDED libc.so.6
LOAD:000000000020DBC8                 Elf64_Dyn <0Ch, 1860h>  ; DT_INIT
LOAD:000000000020DBD8                 Elf64_Dyn <0Dh, 9BB0h>  ; DT_FINI
LOAD:000000000020DBE8                 Elf64_Dyn <19h, 20D990h> ; DT_INIT_ARRAY
LOAD:000000000020DBF8                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:000000000020DC08                 Elf64_Dyn <1Ah, 20D998h> ; DT_FINI_ARRAY
LOAD:000000000020DC18                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:000000000020DC28                 Elf64_Dyn <6FFFFEF5h, 298h> ; DT_GNU_HASH
LOAD:000000000020DC38                 Elf64_Dyn <5, 0A48h>    ; DT_STRTAB
LOAD:000000000020DC48                 Elf64_Dyn <6, 2E0h>     ; DT_SYMTAB
LOAD:000000000020DC58                 Elf64_Dyn <0Ah, 342h>   ; DT_STRSZ
LOAD:000000000020DC68                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:000000000020DC78                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:000000000020DC88                 Elf64_Dyn <3, 20DDA8h>  ; DT_PLTGOT
LOAD:000000000020DC98                 Elf64_Dyn <2, 600h>     ; DT_PLTRELSZ
LOAD:000000000020DCA8                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:000000000020DCB8                 Elf64_Dyn <17h, 1260h>  ; DT_JMPREL
LOAD:000000000020DCC8                 Elf64_Dyn <7, 0E88h>    ; DT_RELA
LOAD:000000000020DCD8                 Elf64_Dyn <8, 3D8h>     ; DT_RELASZ
LOAD:000000000020DCE8                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:000000000020DCF8                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:000000000020DD08                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:000000000020DD18                 Elf64_Dyn <6FFFFFFEh, 0E28h> ; DT_VERNEED
LOAD:000000000020DD28                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:000000000020DD38                 Elf64_Dyn <6FFFFFF0h, 0D8Ah> ; DT_VERSYM
LOAD:000000000020DD48                 Elf64_Dyn <6FFFFFF9h, 1Dh> ; DT_RELACOUNT
LOAD:000000000020DD58                 Elf64_Dyn <0>           ; DT_NULL
LOAD:000000000020DD68                 db    0
LOAD:000000000020DD69                 db    0
LOAD:000000000020DD6A                 db    0
LOAD:000000000020DD6B                 db    0
LOAD:000000000020DD6C                 db    0
LOAD:000000000020DD6D                 db    0
LOAD:000000000020DD6E                 db    0
LOAD:000000000020DD6F                 db    0
LOAD:000000000020DD70                 db    0
LOAD:000000000020DD71                 db    0
LOAD:000000000020DD72                 db    0
LOAD:000000000020DD73                 db    0
LOAD:000000000020DD74                 db    0
LOAD:000000000020DD75                 db    0
LOAD:000000000020DD76                 db    0
LOAD:000000000020DD77                 db    0
LOAD:000000000020DD78                 db    0
LOAD:000000000020DD79                 db    0
LOAD:000000000020DD7A                 db    0
LOAD:000000000020DD7B                 db    0
LOAD:000000000020DD7C                 db    0
LOAD:000000000020DD7D                 db    0
LOAD:000000000020DD7E                 db    0
LOAD:000000000020DD7F                 db    0
LOAD:000000000020DD80                 db    0
LOAD:000000000020DD81                 db    0
LOAD:000000000020DD82                 db    0
LOAD:000000000020DD83                 db    0
LOAD:000000000020DD84                 db    0
LOAD:000000000020DD85                 db    0
LOAD:000000000020DD86                 db    0
LOAD:000000000020DD87                 db    0
LOAD:000000000020DD88                 db    0
LOAD:000000000020DD89                 db    0
LOAD:000000000020DD8A                 db    0
LOAD:000000000020DD8B                 db    0
LOAD:000000000020DD8C                 db    0
LOAD:000000000020DD8D                 db    0
LOAD:000000000020DD8E                 db    0
LOAD:000000000020DD8F                 db    0
LOAD:000000000020DD90                 db    0
LOAD:000000000020DD91                 db    0
LOAD:000000000020DD92                 db    0
LOAD:000000000020DD93                 db    0
LOAD:000000000020DD94                 db    0
LOAD:000000000020DD95                 db    0
LOAD:000000000020DD96                 db    0
LOAD:000000000020DD97                 db    0
LOAD:000000000020DD98                 db    0
LOAD:000000000020DD99                 db    0
LOAD:000000000020DD9A                 db    0
LOAD:000000000020DD9B                 db    0
LOAD:000000000020DD9C                 db    0
LOAD:000000000020DD9D                 db    0
LOAD:000000000020DD9E                 db    0
LOAD:000000000020DD9F                 db    0
LOAD:000000000020DDA0                 db    0
LOAD:000000000020DDA1                 db    0
LOAD:000000000020DDA2                 db    0
LOAD:000000000020DDA3                 db    0
LOAD:000000000020DDA4                 db    0
LOAD:000000000020DDA5                 db    0
LOAD:000000000020DDA6                 db    0
LOAD:000000000020DDA7                 db    0
LOAD:000000000020DDA7 LOAD            ends
LOAD:000000000020DDA7
.got:000000000020DDA8 ; ===========================================================================
.got:000000000020DDA8
.got:000000000020DDA8 ; Segment type: Pure data
.got:000000000020DDA8 ; Segment permissions: Read/Write
.got:000000000020DDA8 _got            segment qword public 'DATA' use64
.got:000000000020DDA8                 assume cs:_got
.got:000000000020DDA8                 ;org 20DDA8h
.got:000000000020DDA8 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:000000000020DDB0 qword_20DDB0    dq 0                    ; DATA XREF: sub_1880↑r
.got:000000000020DDB8 qword_20DDB8    dq 0                    ; DATA XREF: sub_1880+6↑r
.got:000000000020DDC0 abort_ptr       dq offset abort         ; DATA XREF: _abort↑r
.got:000000000020DDC8 __errno_location_ptr dq offset __errno_location
.got:000000000020DDC8                                         ; DATA XREF: ___errno_location↑r
.got:000000000020DDD0 strncmp_ptr     dq offset strncmp       ; DATA XREF: _strncmp↑r
.got:000000000020DDD8 _exit_ptr       dq offset _exit         ; DATA XREF: __exit↑r
.got:000000000020DDE0 strcpy_ptr      dq offset strcpy        ; DATA XREF: _strcpy↑r
.got:000000000020DDE8 __fpending_ptr  dq offset __fpending    ; DATA XREF: ___fpending↑r
.got:000000000020DDF0 qsort_ptr       dq offset qsort         ; DATA XREF: _qsort↑r
.got:000000000020DDF8 fcntl_ptr       dq offset fcntl         ; DATA XREF: _fcntl↑r
.got:000000000020DE00 textdomain_ptr  dq offset textdomain    ; DATA XREF: _textdomain↑r
.got:000000000020DE08 fclose_ptr      dq offset fclose        ; DATA XREF: _fclose↑r
.got:000000000020DE10 bindtextdomain_ptr dq offset bindtextdomain
.got:000000000020DE10                                         ; DATA XREF: _bindtextdomain↑r
.got:000000000020DE18 dcgettext_ptr   dq offset dcgettext     ; DATA XREF: _dcgettext↑r
.got:000000000020DE20 __ctype_get_mb_cur_max_ptr dq offset __ctype_get_mb_cur_max
.got:000000000020DE20                                         ; DATA XREF: ___ctype_get_mb_cur_max↑r
.got:000000000020DE28 strlen_ptr      dq offset strlen        ; DATA XREF: _strlen↑r
.got:000000000020DE30 __lxstat_ptr    dq offset __lxstat      ; DATA XREF: ___lxstat↑r
.got:000000000020DE38 openat_ptr      dq offset openat        ; DATA XREF: _openat↑r
.got:000000000020DE40 chdir_ptr       dq offset chdir         ; DATA XREF: _chdir↑r
.got:000000000020DE48 __stack_chk_fail_ptr dq offset __stack_chk_fail
.got:000000000020DE48                                         ; DATA XREF: ___stack_chk_fail↑r
.got:000000000020DE50 getopt_long_ptr dq offset getopt_long   ; DATA XREF: _getopt_long↑r
.got:000000000020DE58 mbrtowc_ptr     dq offset mbrtowc       ; DATA XREF: _mbrtowc↑r
.got:000000000020DE60 __fxstatat_ptr  dq offset __fxstatat    ; DATA XREF: ___fxstatat↑r
.got:000000000020DE68 strrchr_ptr     dq offset strrchr       ; DATA XREF: _strrchr↑r
.got:000000000020DE70 lseek_ptr       dq offset lseek         ; DATA XREF: _lseek↑r
.got:000000000020DE78 __assert_fail_ptr dq offset __assert_fail
.got:000000000020DE78                                         ; DATA XREF: ___assert_fail↑r
.got:000000000020DE80 memset_ptr      dq offset memset        ; DATA XREF: _memset↑r
.got:000000000020DE88 getcwd_ptr      dq offset getcwd        ; DATA XREF: _getcwd↑r
.got:000000000020DE90 close_ptr       dq offset close         ; DATA XREF: _close↑r
.got:000000000020DE98 strspn_ptr      dq offset strspn        ; DATA XREF: _strspn↑r
.got:000000000020DEA0 closedir_ptr    dq offset closedir      ; DATA XREF: _closedir↑r
.got:000000000020DEA8 memchr_ptr      dq offset memchr        ; DATA XREF: _memchr↑r
.got:000000000020DEB0 memcmp_ptr      dq offset memcmp        ; DATA XREF: _memcmp↑r
.got:000000000020DEB8 fputs_unlocked_ptr dq offset fputs_unlocked
.got:000000000020DEB8                                         ; DATA XREF: _fputs_unlocked↑r
.got:000000000020DEC0 calloc_ptr      dq offset calloc        ; DATA XREF: _calloc↑r
.got:000000000020DEC8 strcmp_ptr      dq offset strcmp        ; DATA XREF: _strcmp↑r
.got:000000000020DED0 dirfd_ptr       dq offset dirfd         ; DATA XREF: _dirfd↑r
.got:000000000020DED8 memcpy_ptr      dq offset memcpy        ; DATA XREF: _memcpy↑r
.got:000000000020DEE0 fileno_ptr      dq offset fileno        ; DATA XREF: _fileno↑r
.got:000000000020DEE8 __xstat_ptr     dq offset __xstat       ; DATA XREF: ___xstat↑r
.got:000000000020DEF0 readdir_ptr     dq offset readdir       ; DATA XREF: _readdir↑r
.got:000000000020DEF8 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc↑r
.got:000000000020DF00 fflush_ptr      dq offset fflush        ; DATA XREF: _fflush↑r
.got:000000000020DF08 nl_langinfo_ptr dq offset nl_langinfo   ; DATA XREF: _nl_langinfo↑r
.got:000000000020DF10 __fxstat_ptr    dq offset __fxstat      ; DATA XREF: ___fxstat↑r
.got:000000000020DF18 __freading_ptr  dq offset __freading    ; DATA XREF: ___freading↑r
.got:000000000020DF20 fchdir_ptr      dq offset fchdir        ; DATA XREF: _fchdir↑r
.got:000000000020DF28 realloc_ptr     dq offset realloc       ; DATA XREF: _realloc↑r
.got:000000000020DF30 setlocale_ptr   dq offset setlocale     ; DATA XREF: _setlocale↑r
.got:000000000020DF38 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk↑r
.got:000000000020DF40 memmove_ptr     dq offset memmove       ; DATA XREF: _memmove↑r
.got:000000000020DF48 error_ptr       dq offset error         ; DATA XREF: _error↑r
.got:000000000020DF50 memrchr_ptr     dq offset memrchr       ; DATA XREF: _memrchr↑r
.got:000000000020DF58 open_ptr        dq offset open          ; DATA XREF: _open↑r
.got:000000000020DF60 access_ptr      dq offset access        ; DATA XREF: _access↑r
.got:000000000020DF68 fseeko_ptr      dq offset fseeko        ; DATA XREF: _fseeko↑r
.got:000000000020DF70 fdopendir_ptr   dq offset fdopendir     ; DATA XREF: _fdopendir↑r
.got:000000000020DF78 fstatfs_ptr     dq offset fstatfs       ; DATA XREF: _fstatfs↑r
.got:000000000020DF80 __cxa_atexit_ptr dq offset __cxa_atexit ; DATA XREF: ___cxa_atexit↑r
.got:000000000020DF88 exit_ptr        dq offset exit          ; DATA XREF: _exit↑r
.got:000000000020DF90 fwrite_ptr      dq offset fwrite        ; DATA XREF: _fwrite↑r
.got:000000000020DF98 __fprintf_chk_ptr dq offset __fprintf_chk
.got:000000000020DF98                                         ; DATA XREF: ___fprintf_chk↑r
.got:000000000020DFA0 mbsinit_ptr     dq offset mbsinit       ; DATA XREF: _mbsinit↑r
.got:000000000020DFA8 iswprint_ptr    dq offset iswprint      ; DATA XREF: _iswprint↑r
.got:000000000020DFB0 __ctype_b_loc_ptr dq offset __ctype_b_loc
.got:000000000020DFB0                                         ; DATA XREF: ___ctype_b_loc↑r
.got:000000000020DFB8 __sprintf_chk_ptr dq offset __sprintf_chk
.got:000000000020DFB8                                         ; DATA XREF: ___sprintf_chk↑r
.got:000000000020DFC0 free_ptr        dq offset __imp_free    ; DATA XREF: free↑r
.got:000000000020DFC0                                         ; filesystem_type:loc_59A0↑r ...
.got:000000000020DFC8 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:000000000020DFC8                                         ; DATA XREF: deregister_tm_clones+17↑r
.got:000000000020DFD0 __libc_start_main_ptr dq offset __libc_start_main
.got:000000000020DFD0                                         ; DATA XREF: start+24↑r
.got:000000000020DFD8 __gmon_start___ptr dq offset __gmon_start__
.got:000000000020DFD8                                         ; DATA XREF: _init_proc+4↑r
.got:000000000020DFE0 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:000000000020DFE0                                         ; DATA XREF: register_tm_clones+28↑r
.got:000000000020DFE8 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:000000000020DFE8                                         ; DATA XREF: __cxa_finalize↑r
.got:000000000020DFE8                                         ; __do_global_dtors_aux+9↑r
.got:000000000020DFE8 _got            ends
.got:000000000020DFE8
LOAD:000000000020DFF0 ; ===========================================================================
LOAD:000000000020DFF0
LOAD:000000000020DFF0 ; Segment type: Pure data
LOAD:000000000020DFF0 ; Segment permissions: Read/Write
LOAD:000000000020DFF0 LOAD            segment byte public 'DATA' use64
LOAD:000000000020DFF0                 assume cs:LOAD
LOAD:000000000020DFF0                 ;org 20DFF0h
LOAD:000000000020DFF0                 align 20h
LOAD:000000000020DFF0 LOAD            ends
LOAD:000000000020DFF0
.data:000000000020E000 ; ===========================================================================
.data:000000000020E000
.data:000000000020E000 ; Segment type: Pure data
.data:000000000020E000 ; Segment permissions: Read/Write
.data:000000000020E000 _data           segment align_32 public 'DATA' use64
.data:000000000020E000                 assume cs:_data
.data:000000000020E000                 ;org 20E000h
.data:000000000020E000                 public __data_start ; weak
.data:000000000020E000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:000000000020E000                                         ; data_start
.data:000000000020E001                 db    0
.data:000000000020E002                 db    0
.data:000000000020E003                 db    0
.data:000000000020E004                 db    0
.data:000000000020E005                 db    0
.data:000000000020E006                 db    0
.data:000000000020E007                 db    0
.data:000000000020E008                 public __dso_handle
.data:000000000020E008 ; void *_dso_handle
.data:000000000020E008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+17↑r
.data:000000000020E008                                         ; atexit↑r ...
.data:000000000020E010                 public Version
.data:000000000020E010 Version         dq offset a831          ; DATA XREF: main+16C↑r
.data:000000000020E010                                         ; "8.31"
.data:000000000020E018                 public exit_failure
.data:000000000020E018 ; int exit_failure
.data:000000000020E018 exit_failure    dd 1                    ; DATA XREF: close_stdout:loc_2DB2↑r
.data:000000000020E018                                         ; xalloc_die+17↑r ...
.data:000000000020E01C                 align 20h
.data:000000000020E020                 public quote_quoting_options
.data:000000000020E020 quote_quoting_options db    8           ; DATA XREF: quote_n_mem↑o
.data:000000000020E020                                         ; quote_mem↑o ...
.data:000000000020E021                 db    0
.data:000000000020E022                 db    0
.data:000000000020E023                 db    0
.data:000000000020E024                 db    0
.data:000000000020E025                 db    0
.data:000000000020E026                 db    0
.data:000000000020E027                 db    0
.data:000000000020E028                 db    0
.data:000000000020E029                 db    0
.data:000000000020E02A                 db    0
.data:000000000020E02B                 db    0
.data:000000000020E02C                 db    0
.data:000000000020E02D                 db    0
.data:000000000020E02E                 db    0
.data:000000000020E02F                 db    0
.data:000000000020E030                 db    0
.data:000000000020E031                 db    0
.data:000000000020E032                 db    0
.data:000000000020E033                 db    0
.data:000000000020E034                 db    0
.data:000000000020E035                 db    0
.data:000000000020E036                 db    0
.data:000000000020E037                 db    0
.data:000000000020E038                 db    0
.data:000000000020E039                 db    0
.data:000000000020E03A                 db    0
.data:000000000020E03B                 db    0
.data:000000000020E03C                 db    0
.data:000000000020E03D                 db    0
.data:000000000020E03E                 db    0
.data:000000000020E03F                 db    0
.data:000000000020E040                 db    0
.data:000000000020E041                 db    0
.data:000000000020E042                 db    0
.data:000000000020E043                 db    0
.data:000000000020E044                 db    0
.data:000000000020E045                 db    0
.data:000000000020E046                 db    0
.data:000000000020E047                 db    0
.data:000000000020E048                 db    0
.data:000000000020E049                 db    0
.data:000000000020E04A                 db    0
.data:000000000020E04B                 db    0
.data:000000000020E04C                 db    0
.data:000000000020E04D                 db    0
.data:000000000020E04E                 db    0
.data:000000000020E04F                 db    0
.data:000000000020E050                 db    0
.data:000000000020E051                 db    0
.data:000000000020E052                 db    0
.data:000000000020E053                 db    0
.data:000000000020E054                 db    0
.data:000000000020E055                 db    0
.data:000000000020E056                 db    0
.data:000000000020E057                 db    0
.data:000000000020E058 nslots          dd 1                    ; DATA XREF: quotearg_n_options+3A↑r
.data:000000000020E058                                         ; quotearg_n_options:loc_422D↑r ...
.data:000000000020E05C                 align 20h
.data:000000000020E060 ; void *slotvec
.data:000000000020E060 slotvec         dq offset slotvec0      ; DATA XREF: quotearg_n_options+29↑r
.data:000000000020E060                                         ; quotearg_n_options+76↑w ...
.data:000000000020E068                 align 10h
.data:000000000020E070 slotvec0        dq offset qword_100     ; DATA XREF: quotearg_n_options+54↑o
.data:000000000020E070                                         ; quotearg_n_options+187↑r ...
.data:000000000020E078 off_20E078      dq offset slot0         ; DATA XREF: quotearg_free+62↑w
.data:000000000020E078 _data           ends
.data:000000000020E078
.bss:000000000020E080 ; ===========================================================================
.bss:000000000020E080
.bss:000000000020E080 ; Segment type: Uninitialized
.bss:000000000020E080 ; Segment permissions: Read/Write
.bss:000000000020E080 _bss            segment align_32 public 'BSS' use64
.bss:000000000020E080                 assume cs:_bss
.bss:000000000020E080                 ;org 20E080h
.bss:000000000020E080                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:000000000020E080                 public __bss_start ; weak
.bss:000000000020E080 __bss_start     dq ?                    ; DATA XREF: LOAD:00000000000009A0↑o
.bss:000000000020E080                                         ; LOAD:00000000000009E8↑o ...
.bss:000000000020E080                                         ; Alternative name is '__TMC_END__'
.bss:000000000020E080                                         ; program_invocation_short_name@@GLIBC_2.2.5
.bss:000000000020E080                                         ; _edata
.bss:000000000020E080                                         ; Copy of shared data
.bss:000000000020E088                 public stdout@@GLIBC_2_2_5
.bss:000000000020E088 ; FILE *stdout
.bss:000000000020E088 stdout@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000988↑o
.bss:000000000020E088                                         ; main+165↑r ...
.bss:000000000020E088                                         ; Alternative name is 'stdout'
.bss:000000000020E088                                         ; Copy of shared data
.bss:000000000020E090                 public optind@@GLIBC_2_2_5
.bss:000000000020E090 optind@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:0000000000000A18↑o
.bss:000000000020E090                                         ; main:loc_1EC3↑r ...
.bss:000000000020E090                                         ; Alternative name is 'optind'
.bss:000000000020E090                                         ; Copy of shared data
.bss:000000000020E094                 align 8
.bss:000000000020E098                 public optarg@@GLIBC_2_2_5
.bss:000000000020E098 optarg@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000A30↑o
.bss:000000000020E098                                         ; main+E1↑r
.bss:000000000020E098                                         ; Alternative name is 'optarg'
.bss:000000000020E098                                         ; Copy of shared data
.bss:000000000020E0A0                 public program_invocation_name@@GLIBC_2_2_5 ; weak
.bss:000000000020E0A0 program_invocation_name@@GLIBC_2_2_5 dq ?
.bss:000000000020E0A0                                         ; DATA XREF: LOAD:00000000000009B8↑o
.bss:000000000020E0A0                                         ; LOAD:00000000000009D0↑o ...
.bss:000000000020E0A0                                         ; Alternative name is '__progname_full@@GLIBC_2.2.5'
.bss:000000000020E0A0                                         ; Copy of shared data
.bss:000000000020E0A8                 align 20h
.bss:000000000020E0C0                 public stderr@@GLIBC_2_2_5
.bss:000000000020E0C0 ; FILE *stderr
.bss:000000000020E0C0 stderr@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000A00↑o
.bss:000000000020E0C0                                         ; usage+3D↑r ...
.bss:000000000020E0C0                                         ; Alternative name is 'stderr'
.bss:000000000020E0C0                                         ; Copy of shared data
.bss:000000000020E0C8 completed_7697  db ?                    ; DATA XREF: __do_global_dtors_aux↑r
.bss:000000000020E0C8                                         ; __do_global_dtors_aux+28↑w
.bss:000000000020E0C9                 align 10h
.bss:000000000020E0D0 dev_ino_buf_7158 db    ? ;              ; DATA XREF: main:loc_24FD↑o
.bss:000000000020E0D1                 db    ? ;
.bss:000000000020E0D2                 db    ? ;
.bss:000000000020E0D3                 db    ? ;
.bss:000000000020E0D4                 db    ? ;
.bss:000000000020E0D5                 db    ? ;
.bss:000000000020E0D6                 db    ? ;
.bss:000000000020E0D7                 db    ? ;
.bss:000000000020E0D8                 db    ? ;
.bss:000000000020E0D9                 db    ? ;
.bss:000000000020E0DA                 db    ? ;
.bss:000000000020E0DB                 db    ? ;
.bss:000000000020E0DC                 db    ? ;
.bss:000000000020E0DD                 db    ? ;
.bss:000000000020E0DE                 db    ? ;
.bss:000000000020E0DF                 db    ? ;
.bss:000000000020E0E0 specified_context dq ?                  ; DATA XREF: main+26C↑w
.bss:000000000020E0E0                                         ; main:loc_20A9↑r ...
.bss:000000000020E0E8 root_dev_ino    dq ?                    ; DATA XREF: main:loc_1F22↑w
.bss:000000000020E0E8                                         ; main+3D7↑r ...
.bss:000000000020E0F0 verbose         db ?                    ; DATA XREF: main:loc_1E7C↑w
.bss:000000000020E0F0                                         ; main:def_1F8A↑r
.bss:000000000020E0F1 recurse         db ?                    ; DATA XREF: main:loc_1E65↑w
.bss:000000000020E0F1                                         ; main:loc_1EA4↑r ...
.bss:000000000020E0F2 affect_symlink_referent db ?            ; DATA XREF: main+21C↑w
.bss:000000000020E0F2                                         ; main+41E↑r ...
.bss:000000000020E0F3                 align 8
.bss:000000000020E0F8 ignore_EPIPE    db ?                    ; DATA XREF: close_stdout_set_ignore_EPIPE↑w
.bss:000000000020E0F8                                         ; close_stdout+1B↑r
.bss:000000000020E0F9                 align 20h
.bss:000000000020E100 file_name       dq ?                    ; DATA XREF: close_stdout_set_file_name↑w
.bss:000000000020E100                                         ; close_stdout+56↑r
.bss:000000000020E108                 public program_name
.bss:000000000020E108 program_name    dq ?                    ; DATA XREF: usage+14↑r
.bss:000000000020E108                                         ; set_program_name:loc_2E4D↑w
.bss:000000000020E110                 align 20h
.bss:000000000020E120 slot0           db    ? ;               ; DATA XREF: quotearg_n_options+FE↑o
.bss:000000000020E120                                         ; quotearg_free+46↑o ...
.bss:000000000020E121                 db    ? ;
.bss:000000000020E122                 db    ? ;
.bss:000000000020E123                 db    ? ;
.bss:000000000020E124                 db    ? ;
.bss:000000000020E125                 db    ? ;
.bss:000000000020E126                 db    ? ;
.bss:000000000020E127                 db    ? ;
.bss:000000000020E128                 db    ? ;
.bss:000000000020E129                 db    ? ;
.bss:000000000020E12A                 db    ? ;
.bss:000000000020E12B                 db    ? ;
.bss:000000000020E12C                 db    ? ;
.bss:000000000020E12D                 db    ? ;
.bss:000000000020E12E                 db    ? ;
.bss:000000000020E12F                 db    ? ;
.bss:000000000020E130                 db    ? ;
.bss:000000000020E131                 db    ? ;
.bss:000000000020E132                 db    ? ;
.bss:000000000020E133                 db    ? ;
.bss:000000000020E134                 db    ? ;
.bss:000000000020E135                 db    ? ;
.bss:000000000020E136                 db    ? ;
.bss:000000000020E137                 db    ? ;
.bss:000000000020E138                 db    ? ;
.bss:000000000020E139                 db    ? ;
.bss:000000000020E13A                 db    ? ;
.bss:000000000020E13B                 db    ? ;
.bss:000000000020E13C                 db    ? ;
.bss:000000000020E13D                 db    ? ;
.bss:000000000020E13E                 db    ? ;
.bss:000000000020E13F                 db    ? ;
.bss:000000000020E140                 db    ? ;
.bss:000000000020E141                 db    ? ;
.bss:000000000020E142                 db    ? ;
.bss:000000000020E143                 db    ? ;
.bss:000000000020E144                 db    ? ;
.bss:000000000020E145                 db    ? ;
.bss:000000000020E146                 db    ? ;
.bss:000000000020E147                 db    ? ;
.bss:000000000020E148                 db    ? ;
.bss:000000000020E149                 db    ? ;
.bss:000000000020E14A                 db    ? ;
.bss:000000000020E14B                 db    ? ;
.bss:000000000020E14C                 db    ? ;
.bss:000000000020E14D                 db    ? ;
.bss:000000000020E14E                 db    ? ;
.bss:000000000020E14F                 db    ? ;
.bss:000000000020E150                 db    ? ;
.bss:000000000020E151                 db    ? ;
.bss:000000000020E152                 db    ? ;
.bss:000000000020E153                 db    ? ;
.bss:000000000020E154                 db    ? ;
.bss:000000000020E155                 db    ? ;
.bss:000000000020E156                 db    ? ;
.bss:000000000020E157                 db    ? ;
.bss:000000000020E158                 db    ? ;
.bss:000000000020E159                 db    ? ;
.bss:000000000020E15A                 db    ? ;
.bss:000000000020E15B                 db    ? ;
.bss:000000000020E15C                 db    ? ;
.bss:000000000020E15D                 db    ? ;
.bss:000000000020E15E                 db    ? ;
.bss:000000000020E15F                 db    ? ;
.bss:000000000020E160                 db    ? ;
.bss:000000000020E161                 db    ? ;
.bss:000000000020E162                 db    ? ;
.bss:000000000020E163                 db    ? ;
.bss:000000000020E164                 db    ? ;
.bss:000000000020E165                 db    ? ;
.bss:000000000020E166                 db    ? ;
.bss:000000000020E167                 db    ? ;
.bss:000000000020E168                 db    ? ;
.bss:000000000020E169                 db    ? ;
.bss:000000000020E16A                 db    ? ;
.bss:000000000020E16B                 db    ? ;
.bss:000000000020E16C                 db    ? ;
.bss:000000000020E16D                 db    ? ;
.bss:000000000020E16E                 db    ? ;
.bss:000000000020E16F                 db    ? ;
.bss:000000000020E170                 db    ? ;
.bss:000000000020E171                 db    ? ;
.bss:000000000020E172                 db    ? ;
.bss:000000000020E173                 db    ? ;
.bss:000000000020E174                 db    ? ;
.bss:000000000020E175                 db    ? ;
.bss:000000000020E176                 db    ? ;
.bss:000000000020E177                 db    ? ;
.bss:000000000020E178                 db    ? ;
.bss:000000000020E179                 db    ? ;
.bss:000000000020E17A                 db    ? ;
.bss:000000000020E17B                 db    ? ;
.bss:000000000020E17C                 db    ? ;
.bss:000000000020E17D                 db    ? ;
.bss:000000000020E17E                 db    ? ;
.bss:000000000020E17F                 db    ? ;
.bss:000000000020E180                 db    ? ;
.bss:000000000020E181                 db    ? ;
.bss:000000000020E182                 db    ? ;
.bss:000000000020E183                 db    ? ;
.bss:000000000020E184                 db    ? ;
.bss:000000000020E185                 db    ? ;
.bss:000000000020E186                 db    ? ;
.bss:000000000020E187                 db    ? ;
.bss:000000000020E188                 db    ? ;
.bss:000000000020E189                 db    ? ;
.bss:000000000020E18A                 db    ? ;
.bss:000000000020E18B                 db    ? ;
.bss:000000000020E18C                 db    ? ;
.bss:000000000020E18D                 db    ? ;
.bss:000000000020E18E                 db    ? ;
.bss:000000000020E18F                 db    ? ;
.bss:000000000020E190                 db    ? ;
.bss:000000000020E191                 db    ? ;
.bss:000000000020E192                 db    ? ;
.bss:000000000020E193                 db    ? ;
.bss:000000000020E194                 db    ? ;
.bss:000000000020E195                 db    ? ;
.bss:000000000020E196                 db    ? ;
.bss:000000000020E197                 db    ? ;
.bss:000000000020E198                 db    ? ;
.bss:000000000020E199                 db    ? ;
.bss:000000000020E19A                 db    ? ;
.bss:000000000020E19B                 db    ? ;
.bss:000000000020E19C                 db    ? ;
.bss:000000000020E19D                 db    ? ;
.bss:000000000020E19E                 db    ? ;
.bss:000000000020E19F                 db    ? ;
.bss:000000000020E1A0                 db    ? ;
.bss:000000000020E1A1                 db    ? ;
.bss:000000000020E1A2                 db    ? ;
.bss:000000000020E1A3                 db    ? ;
.bss:000000000020E1A4                 db    ? ;
.bss:000000000020E1A5                 db    ? ;
.bss:000000000020E1A6                 db    ? ;
.bss:000000000020E1A7                 db    ? ;
.bss:000000000020E1A8                 db    ? ;
.bss:000000000020E1A9                 db    ? ;
.bss:000000000020E1AA                 db    ? ;
.bss:000000000020E1AB                 db    ? ;
.bss:000000000020E1AC                 db    ? ;
.bss:000000000020E1AD                 db    ? ;
.bss:000000000020E1AE                 db    ? ;
.bss:000000000020E1AF                 db    ? ;
.bss:000000000020E1B0                 db    ? ;
.bss:000000000020E1B1                 db    ? ;
.bss:000000000020E1B2                 db    ? ;
.bss:000000000020E1B3                 db    ? ;
.bss:000000000020E1B4                 db    ? ;
.bss:000000000020E1B5                 db    ? ;
.bss:000000000020E1B6                 db    ? ;
.bss:000000000020E1B7                 db    ? ;
.bss:000000000020E1B8                 db    ? ;
.bss:000000000020E1B9                 db    ? ;
.bss:000000000020E1BA                 db    ? ;
.bss:000000000020E1BB                 db    ? ;
.bss:000000000020E1BC                 db    ? ;
.bss:000000000020E1BD                 db    ? ;
.bss:000000000020E1BE                 db    ? ;
.bss:000000000020E1BF                 db    ? ;
.bss:000000000020E1C0                 db    ? ;
.bss:000000000020E1C1                 db    ? ;
.bss:000000000020E1C2                 db    ? ;
.bss:000000000020E1C3                 db    ? ;
.bss:000000000020E1C4                 db    ? ;
.bss:000000000020E1C5                 db    ? ;
.bss:000000000020E1C6                 db    ? ;
.bss:000000000020E1C7                 db    ? ;
.bss:000000000020E1C8                 db    ? ;
.bss:000000000020E1C9                 db    ? ;
.bss:000000000020E1CA                 db    ? ;
.bss:000000000020E1CB                 db    ? ;
.bss:000000000020E1CC                 db    ? ;
.bss:000000000020E1CD                 db    ? ;
.bss:000000000020E1CE                 db    ? ;
.bss:000000000020E1CF                 db    ? ;
.bss:000000000020E1D0                 db    ? ;
.bss:000000000020E1D1                 db    ? ;
.bss:000000000020E1D2                 db    ? ;
.bss:000000000020E1D3                 db    ? ;
.bss:000000000020E1D4                 db    ? ;
.bss:000000000020E1D5                 db    ? ;
.bss:000000000020E1D6                 db    ? ;
.bss:000000000020E1D7                 db    ? ;
.bss:000000000020E1D8                 db    ? ;
.bss:000000000020E1D9                 db    ? ;
.bss:000000000020E1DA                 db    ? ;
.bss:000000000020E1DB                 db    ? ;
.bss:000000000020E1DC                 db    ? ;
.bss:000000000020E1DD                 db    ? ;
.bss:000000000020E1DE                 db    ? ;
.bss:000000000020E1DF                 db    ? ;
.bss:000000000020E1E0                 db    ? ;
.bss:000000000020E1E1                 db    ? ;
.bss:000000000020E1E2                 db    ? ;
.bss:000000000020E1E3                 db    ? ;
.bss:000000000020E1E4                 db    ? ;
.bss:000000000020E1E5                 db    ? ;
.bss:000000000020E1E6                 db    ? ;
.bss:000000000020E1E7                 db    ? ;
.bss:000000000020E1E8                 db    ? ;
.bss:000000000020E1E9                 db    ? ;
.bss:000000000020E1EA                 db    ? ;
.bss:000000000020E1EB                 db    ? ;
.bss:000000000020E1EC                 db    ? ;
.bss:000000000020E1ED                 db    ? ;
.bss:000000000020E1EE                 db    ? ;
.bss:000000000020E1EF                 db    ? ;
.bss:000000000020E1F0                 db    ? ;
.bss:000000000020E1F1                 db    ? ;
.bss:000000000020E1F2                 db    ? ;
.bss:000000000020E1F3                 db    ? ;
.bss:000000000020E1F4                 db    ? ;
.bss:000000000020E1F5                 db    ? ;
.bss:000000000020E1F6                 db    ? ;
.bss:000000000020E1F7                 db    ? ;
.bss:000000000020E1F8                 db    ? ;
.bss:000000000020E1F9                 db    ? ;
.bss:000000000020E1FA                 db    ? ;
.bss:000000000020E1FB                 db    ? ;
.bss:000000000020E1FC                 db    ? ;
.bss:000000000020E1FD                 db    ? ;
.bss:000000000020E1FE                 db    ? ;
.bss:000000000020E1FF                 db    ? ;
.bss:000000000020E200                 db    ? ;
.bss:000000000020E201                 db    ? ;
.bss:000000000020E202                 db    ? ;
.bss:000000000020E203                 db    ? ;
.bss:000000000020E204                 db    ? ;
.bss:000000000020E205                 db    ? ;
.bss:000000000020E206                 db    ? ;
.bss:000000000020E207                 db    ? ;
.bss:000000000020E208                 db    ? ;
.bss:000000000020E209                 db    ? ;
.bss:000000000020E20A                 db    ? ;
.bss:000000000020E20B                 db    ? ;
.bss:000000000020E20C                 db    ? ;
.bss:000000000020E20D                 db    ? ;
.bss:000000000020E20E                 db    ? ;
.bss:000000000020E20F                 db    ? ;
.bss:000000000020E210                 db    ? ;
.bss:000000000020E211                 db    ? ;
.bss:000000000020E212                 db    ? ;
.bss:000000000020E213                 db    ? ;
.bss:000000000020E214                 db    ? ;
.bss:000000000020E215                 db    ? ;
.bss:000000000020E216                 db    ? ;
.bss:000000000020E217                 db    ? ;
.bss:000000000020E218                 db    ? ;
.bss:000000000020E219                 db    ? ;
.bss:000000000020E21A                 db    ? ;
.bss:000000000020E21B                 db    ? ;
.bss:000000000020E21C                 db    ? ;
.bss:000000000020E21D                 db    ? ;
.bss:000000000020E21E                 db    ? ;
.bss:000000000020E21F                 db    ? ;
.bss:000000000020E220 default_quoting_options xmmword ?       ; DATA XREF: clone_quoting_options+12↑o
.bss:000000000020E220                                         ; get_quoting_style↑o ...
.bss:000000000020E230 xmmword_20E230  xmmword ?               ; DATA XREF: quotearg_char_mem+41↑r
.bss:000000000020E230                                         ; quotearg_n_custom_mem+39↑r
.bss:000000000020E240 xmmword_20E240  xmmword ?               ; DATA XREF: quotearg_char_mem+4E↑r
.bss:000000000020E240                                         ; quotearg_n_custom_mem+46↑r
.bss:000000000020E250 qword_20E250    dq ?                    ; DATA XREF: quotearg_char_mem+16↑r
.bss:000000000020E250                                         ; quotearg_n_custom_mem+7↑r
.bss:000000000020E258 have_dupfd_cloexec_3326 dd ?            ; DATA XREF: rpl_fcntl+5E↑r
.bss:000000000020E258                                         ; rpl_fcntl:loc_971F↑w ...
.bss:000000000020E25C proc_status_5461 dd ?                   ; DATA XREF: openat_proc_name+28↑r
.bss:000000000020E25C                                         ; openat_proc_name+E8↑w ...
.bss:000000000020E25C _bss            ends
.bss:000000000020E25C
.prgend:000000000020E260 ; ===========================================================================
.prgend:000000000020E260
.prgend:000000000020E260 ; Segment type: Zero-length
.prgend:000000000020E260 _prgend         segment byte public '' use64
.prgend:000000000020E260 _end            label byte
.prgend:000000000020E260 _prgend         ends
.prgend:000000000020E260
extern:000000000020E268 ; ===========================================================================
extern:000000000020E268
extern:000000000020E268 ; Segment type: Externs
extern:000000000020E268 ; extern
extern:000000000020E268 ; void free(void *ptr)
extern:000000000020E268                 extrn __imp_free:near   ; CODE XREF: free↑j
extern:000000000020E268                                         ; DATA XREF: .got:free_ptr↑o
extern:000000000020E270 ; void __noreturn abort(void)
extern:000000000020E270                 extrn abort:near        ; CODE XREF: _abort↑j
extern:000000000020E270                                         ; DATA XREF: .got:abort_ptr↑o
extern:000000000020E278 ; int *_errno_location(void)
extern:000000000020E278                 extrn __errno_location:near
extern:000000000020E278                                         ; CODE XREF: ___errno_location↑j
extern:000000000020E278                                         ; DATA XREF: .got:__errno_location_ptr↑o
extern:000000000020E280 ; int strncmp(const char *s1, const char *s2, size_t n)
extern:000000000020E280                 extrn strncmp:near      ; CODE XREF: _strncmp↑j
extern:000000000020E280                                         ; DATA XREF: .got:strncmp_ptr↑o
extern:000000000020E288 ; void __noreturn exit(int status)
extern:000000000020E288                 extrn _exit:near        ; CODE XREF: __exit↑j
extern:000000000020E288                                         ; DATA XREF: .got:_exit_ptr↑o
extern:000000000020E290 ; char *strcpy(char *dest, const char *src)
extern:000000000020E290                 extrn strcpy:near       ; CODE XREF: _strcpy↑j
extern:000000000020E290                                         ; DATA XREF: .got:strcpy_ptr↑o
extern:000000000020E298 ; size_t _fpending(FILE *fp)
extern:000000000020E298                 extrn __fpending:near   ; CODE XREF: ___fpending↑j
extern:000000000020E298                                         ; DATA XREF: .got:__fpending_ptr↑o
extern:000000000020E2A0 ; void qsort(void *base, size_t nmemb, size_t size, __compar_fn_t compar)
extern:000000000020E2A0                 extrn qsort:near        ; CODE XREF: _qsort↑j
extern:000000000020E2A0                                         ; DATA XREF: .got:qsort_ptr↑o
extern:000000000020E2A8 ; int fcntl(int fd, int cmd, ...)
extern:000000000020E2A8                 extrn fcntl:near        ; CODE XREF: _fcntl↑j
extern:000000000020E2A8                                         ; DATA XREF: .got:fcntl_ptr↑o
extern:000000000020E2B0 ; char *textdomain(const char *domainname)
extern:000000000020E2B0                 extrn textdomain:near   ; CODE XREF: _textdomain↑j
extern:000000000020E2B0                                         ; DATA XREF: .got:textdomain_ptr↑o
extern:000000000020E2B8 ; int fclose(FILE *stream)
extern:000000000020E2B8                 extrn fclose:near       ; CODE XREF: _fclose↑j
extern:000000000020E2B8                                         ; DATA XREF: .got:fclose_ptr↑o
extern:000000000020E2C0 ; char *bindtextdomain(const char *domainname, const char *dirname)
extern:000000000020E2C0                 extrn bindtextdomain:near
extern:000000000020E2C0                                         ; CODE XREF: _bindtextdomain↑j
extern:000000000020E2C0                                         ; DATA XREF: .got:bindtextdomain_ptr↑o
extern:000000000020E2C8 ; char *dcgettext(const char *domainname, const char *msgid, int category)
extern:000000000020E2C8                 extrn dcgettext:near    ; CODE XREF: _dcgettext↑j
extern:000000000020E2C8                                         ; DATA XREF: .got:dcgettext_ptr↑o
extern:000000000020E2D0 ; size_t _ctype_get_mb_cur_max(void)
extern:000000000020E2D0                 extrn __ctype_get_mb_cur_max:near
extern:000000000020E2D0                                         ; CODE XREF: ___ctype_get_mb_cur_max↑j
extern:000000000020E2D0                                         ; DATA XREF: .got:__ctype_get_mb_cur_max_ptr↑o
extern:000000000020E2D8 ; size_t strlen(const char *s)
extern:000000000020E2D8                 extrn strlen:near       ; CODE XREF: _strlen↑j
extern:000000000020E2D8                                         ; DATA XREF: .got:strlen_ptr↑o
extern:000000000020E2E0 ; int _lxstat(int ver, const char *filename, struct stat *stat_buf)
extern:000000000020E2E0                 extrn __lxstat:near     ; CODE XREF: ___lxstat↑j
extern:000000000020E2E0                                         ; DATA XREF: .got:__lxstat_ptr↑o
extern:000000000020E2E8 ; int openat(int fd, const char *file, int oflag, ...)
extern:000000000020E2E8                 extrn openat:near       ; CODE XREF: _openat↑j
extern:000000000020E2E8                                         ; DATA XREF: .got:openat_ptr↑o
extern:000000000020E2F0 ; int chdir(const char *path)
extern:000000000020E2F0                 extrn chdir:near        ; CODE XREF: _chdir↑j
extern:000000000020E2F0                                         ; DATA XREF: .got:chdir_ptr↑o
extern:000000000020E2F8                 extrn __stack_chk_fail:near
extern:000000000020E2F8                                         ; CODE XREF: ___stack_chk_fail↑j
extern:000000000020E2F8                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:000000000020E300 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
extern:000000000020E300                 extrn getopt_long:near  ; CODE XREF: _getopt_long↑j
extern:000000000020E300                                         ; DATA XREF: .got:getopt_long_ptr↑o
extern:000000000020E308 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
extern:000000000020E308                 extrn mbrtowc:near      ; CODE XREF: _mbrtowc↑j
extern:000000000020E308                                         ; DATA XREF: .got:mbrtowc_ptr↑o
extern:000000000020E310 ; int _fxstatat(int ver, int fildes, const char *filename, struct stat *stat_buf, int flag)
extern:000000000020E310                 extrn __fxstatat:near   ; CODE XREF: ___fxstatat↑j
extern:000000000020E310                                         ; DATA XREF: .got:__fxstatat_ptr↑o
extern:000000000020E318 ; char *strrchr(const char *s, int c)
extern:000000000020E318                 extrn strrchr:near      ; CODE XREF: _strrchr↑j
extern:000000000020E318                                         ; DATA XREF: .got:strrchr_ptr↑o
extern:000000000020E320 ; __off_t lseek(int fd, __off_t offset, int whence)
extern:000000000020E320                 extrn lseek:near        ; CODE XREF: _lseek↑j
extern:000000000020E320                                         ; DATA XREF: .got:lseek_ptr↑o
extern:000000000020E328 ; void __noreturn _assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
extern:000000000020E328                 extrn __assert_fail:near
extern:000000000020E328                                         ; CODE XREF: ___assert_fail↑j
extern:000000000020E328                                         ; DATA XREF: .got:__assert_fail_ptr↑o
extern:000000000020E330 ; void *memset(void *s, int c, size_t n)
extern:000000000020E330                 extrn memset:near       ; CODE XREF: _memset↑j
extern:000000000020E330                                         ; DATA XREF: .got:memset_ptr↑o
extern:000000000020E338 ; char *getcwd(char *buf, size_t size)
extern:000000000020E338                 extrn getcwd:near       ; CODE XREF: _getcwd↑j
extern:000000000020E338                                         ; DATA XREF: .got:getcwd_ptr↑o
extern:000000000020E340 ; int close(int fd)
extern:000000000020E340                 extrn close:near        ; CODE XREF: _close↑j
extern:000000000020E340                                         ; DATA XREF: .got:close_ptr↑o
extern:000000000020E348 ; size_t strspn(const char *s, const char *accept)
extern:000000000020E348                 extrn strspn:near       ; CODE XREF: _strspn↑j
extern:000000000020E348                                         ; DATA XREF: .got:strspn_ptr↑o
extern:000000000020E350 ; int closedir(DIR *dirp)
extern:000000000020E350                 extrn closedir:near     ; CODE XREF: _closedir↑j
extern:000000000020E350                                         ; DATA XREF: .got:closedir_ptr↑o
extern:000000000020E358 ; void *memchr(const void *s, int c, size_t n)
extern:000000000020E358                 extrn memchr:near       ; CODE XREF: _memchr↑j
extern:000000000020E358                                         ; DATA XREF: .got:memchr_ptr↑o
extern:000000000020E360 ; int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:000000000020E360                 extrn __libc_start_main:near
extern:000000000020E360                                         ; CODE XREF: start+24↑p
extern:000000000020E360                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:000000000020E368 ; int memcmp(const void *s1, const void *s2, size_t n)
extern:000000000020E368                 extrn memcmp:near       ; CODE XREF: _memcmp↑j
extern:000000000020E368                                         ; DATA XREF: .got:memcmp_ptr↑o
extern:000000000020E370 ; int fputs_unlocked(const char *s, FILE *stream)
extern:000000000020E370                 extrn fputs_unlocked:near
extern:000000000020E370                                         ; CODE XREF: _fputs_unlocked↑j
extern:000000000020E370                                         ; DATA XREF: .got:fputs_unlocked_ptr↑o
extern:000000000020E378 ; void *calloc(size_t nmemb, size_t size)
extern:000000000020E378                 extrn calloc:near       ; CODE XREF: _calloc↑j
extern:000000000020E378                                         ; DATA XREF: .got:calloc_ptr↑o
extern:000000000020E380 ; int strcmp(const char *s1, const char *s2)
extern:000000000020E380                 extrn strcmp:near       ; CODE XREF: _strcmp↑j
extern:000000000020E380                                         ; DATA XREF: .got:strcmp_ptr↑o
extern:000000000020E388 ; int dirfd(DIR *dirp)
extern:000000000020E388                 extrn dirfd:near        ; CODE XREF: _dirfd↑j
extern:000000000020E388                                         ; DATA XREF: .got:dirfd_ptr↑o
extern:000000000020E390 ; void *memcpy(void *dest, const void *src, size_t n)
extern:000000000020E390                 extrn memcpy:near       ; CODE XREF: _memcpy↑j
extern:000000000020E390                                         ; DATA XREF: .got:memcpy_ptr↑o
extern:000000000020E398 ; int fileno(FILE *stream)
extern:000000000020E398                 extrn fileno:near       ; CODE XREF: _fileno↑j
extern:000000000020E398                                         ; DATA XREF: .got:fileno_ptr↑o
extern:000000000020E3A0 ; int _xstat(int ver, const char *filename, struct stat *stat_buf)
extern:000000000020E3A0                 extrn __xstat:near      ; CODE XREF: ___xstat↑j
extern:000000000020E3A0                                         ; DATA XREF: .got:__xstat_ptr↑o
extern:000000000020E3A8 ; struct dirent *readdir(DIR *dirp)
extern:000000000020E3A8                 extrn readdir:near      ; CODE XREF: _readdir↑j
extern:000000000020E3A8                                         ; DATA XREF: .got:readdir_ptr↑o
extern:000000000020E3B0 ; void *malloc(size_t size)
extern:000000000020E3B0                 extrn malloc:near       ; CODE XREF: _malloc↑j
extern:000000000020E3B0                                         ; DATA XREF: .got:malloc_ptr↑o
extern:000000000020E3B8 ; int fflush(FILE *stream)
extern:000000000020E3B8                 extrn fflush:near       ; CODE XREF: _fflush↑j
extern:000000000020E3B8                                         ; DATA XREF: .got:fflush_ptr↑o
extern:000000000020E3C0 ; char *nl_langinfo(nl_item item)
extern:000000000020E3C0                 extrn nl_langinfo:near  ; CODE XREF: _nl_langinfo↑j
extern:000000000020E3C0                                         ; DATA XREF: .got:nl_langinfo_ptr↑o
extern:000000000020E3C8 ; int _fxstat(int ver, int fildes, struct stat *stat_buf)
extern:000000000020E3C8                 extrn __fxstat:near     ; CODE XREF: ___fxstat↑j
extern:000000000020E3C8                                         ; DATA XREF: .got:__fxstat_ptr↑o
extern:000000000020E3D0 ; int _freading(FILE *fp)
extern:000000000020E3D0                 extrn __freading:near   ; CODE XREF: ___freading↑j
extern:000000000020E3D0                                         ; DATA XREF: .got:__freading_ptr↑o
extern:000000000020E3D8 ; int fchdir(int fd)
extern:000000000020E3D8                 extrn fchdir:near       ; CODE XREF: _fchdir↑j
extern:000000000020E3D8                                         ; DATA XREF: .got:fchdir_ptr↑o
extern:000000000020E3E0 ; void *realloc(void *ptr, size_t size)
extern:000000000020E3E0                 extrn realloc:near      ; CODE XREF: _realloc↑j
extern:000000000020E3E0                                         ; DATA XREF: .got:realloc_ptr↑o
extern:000000000020E3E8 ; char *setlocale(int category, const char *locale)
extern:000000000020E3E8                 extrn setlocale:near    ; CODE XREF: _setlocale↑j
extern:000000000020E3E8                                         ; DATA XREF: .got:setlocale_ptr↑o
extern:000000000020E3F0                 extrn __printf_chk:near ; CODE XREF: ___printf_chk↑j
extern:000000000020E3F0                                         ; DATA XREF: .got:__printf_chk_ptr↑o
extern:000000000020E3F8 ; void *memmove(void *dest, const void *src, size_t n)
extern:000000000020E3F8                 extrn memmove:near      ; CODE XREF: _memmove↑j
extern:000000000020E3F8                                         ; DATA XREF: .got:memmove_ptr↑o
extern:000000000020E400 ; void error(int status, int errnum, const char *format, ...)
extern:000000000020E400                 extrn error:near        ; CODE XREF: _error↑j
extern:000000000020E400                                         ; DATA XREF: .got:error_ptr↑o
extern:000000000020E408 ; void *memrchr(const void *s, int c, size_t n)
extern:000000000020E408                 extrn memrchr:near      ; CODE XREF: _memrchr↑j
extern:000000000020E408                                         ; DATA XREF: .got:memrchr_ptr↑o
extern:000000000020E410 ; int open(const char *file, int oflag, ...)
extern:000000000020E410                 extrn open:near         ; CODE XREF: _open↑j
extern:000000000020E410                                         ; DATA XREF: .got:open_ptr↑o
extern:000000000020E418 ; int access(const char *name, int type)
extern:000000000020E418                 extrn access:near       ; CODE XREF: _access↑j
extern:000000000020E418                                         ; DATA XREF: .got:access_ptr↑o
extern:000000000020E420 ; int fseeko(FILE *stream, __off_t off, int whence)
extern:000000000020E420                 extrn fseeko:near       ; CODE XREF: _fseeko↑j
extern:000000000020E420                                         ; DATA XREF: .got:fseeko_ptr↑o
extern:000000000020E428 ; DIR *fdopendir(int fd)
extern:000000000020E428                 extrn fdopendir:near    ; CODE XREF: _fdopendir↑j
extern:000000000020E428                                         ; DATA XREF: .got:fdopendir_ptr↑o
extern:000000000020E430 ; int fstatfs(int fildes, struct statfs *buf)
extern:000000000020E430                 extrn fstatfs:near      ; CODE XREF: _fstatfs↑j
extern:000000000020E430                                         ; DATA XREF: .got:fstatfs_ptr↑o
extern:000000000020E438 ; int __fastcall _cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
extern:000000000020E438                 extrn __cxa_atexit:near ; CODE XREF: ___cxa_atexit↑j
extern:000000000020E438                                         ; DATA XREF: .got:__cxa_atexit_ptr↑o
extern:000000000020E440 ; void __noreturn exit(int status)
extern:000000000020E440                 extrn exit:near         ; CODE XREF: _exit↑j
extern:000000000020E440                                         ; DATA XREF: .got:exit_ptr↑o
extern:000000000020E448 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
extern:000000000020E448                 extrn fwrite:near       ; CODE XREF: _fwrite↑j
extern:000000000020E448                                         ; DATA XREF: .got:fwrite_ptr↑o
extern:000000000020E450                 extrn __fprintf_chk:near
extern:000000000020E450                                         ; CODE XREF: ___fprintf_chk↑j
extern:000000000020E450                                         ; DATA XREF: .got:__fprintf_chk_ptr↑o
extern:000000000020E458 ; int mbsinit(const mbstate_t *ps)
extern:000000000020E458                 extrn mbsinit:near      ; CODE XREF: _mbsinit↑j
extern:000000000020E458                                         ; DATA XREF: .got:mbsinit_ptr↑o
extern:000000000020E460 ; int iswprint(wint_t wc)
extern:000000000020E460                 extrn iswprint:near     ; CODE XREF: _iswprint↑j
extern:000000000020E460                                         ; DATA XREF: .got:iswprint_ptr↑o
extern:000000000020E468 ; int __fastcall __cxa_finalize(void *)
extern:000000000020E468                 extrn __imp___cxa_finalize:near ; weak
extern:000000000020E468                                         ; CODE XREF: __cxa_finalize↑j
extern:000000000020E468                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:000000000020E470 ; const unsigned __int16 **_ctype_b_loc(void)
extern:000000000020E470                 extrn __ctype_b_loc:near
extern:000000000020E470                                         ; CODE XREF: ___ctype_b_loc↑j
extern:000000000020E470                                         ; DATA XREF: .got:__ctype_b_loc_ptr↑o
extern:000000000020E478                 extrn __sprintf_chk:near
extern:000000000020E478                                         ; CODE XREF: ___sprintf_chk↑j
extern:000000000020E478                                         ; DATA XREF: .got:__sprintf_chk_ptr↑o
extern:000000000020E480                 extrn _ITM_deregisterTMCloneTable ; weak
extern:000000000020E480                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:000000000020E488                 extrn __gmon_start__:near ; weak
extern:000000000020E488                                         ; CODE XREF: _init_proc+10↑p
extern:000000000020E488                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:000000000020E490                 extrn _ITM_registerTMCloneTable ; weak
extern:000000000020E490                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:000000000020E490
extern:000000000020E490
extern:000000000020E490                 end start
