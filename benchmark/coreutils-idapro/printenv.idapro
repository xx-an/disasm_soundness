LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                      License info: 48-357D-7BC4-C6                      |
LOAD:0000000000000000 ; |                              Virginia Tech                              |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : 7FE802DA5EEBEC8C2942B539B2C92235DB208E4EAEC4AB8F3C28AFF0C9A834D1
LOAD:0000000000000000 ; Input MD5    : 08D03B304D3C581F137189A244D34ABC
LOAD:0000000000000000 ; Input CRC32  : 6D896F9F
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/printenv
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'printenv.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000 ; Source File : 'version.c'
LOAD:0000000000000000 ; Source File : 'closeout.c'
LOAD:0000000000000000 ; Source File : 'exitfail.c'
LOAD:0000000000000000 ; Source File : 'progname.c'
LOAD:0000000000000000 ; Source File : 'quotearg.c'
LOAD:0000000000000000 ; Source File : 'version-etc.c'
LOAD:0000000000000000 ; Source File : 'version-etc-fsf.c'
LOAD:0000000000000000 ; Source File : 'xmalloc.c'
LOAD:0000000000000000 ; Source File : 'xalloc-die.c'
LOAD:0000000000000000 ; Source File : 'mbrtowc.c'
LOAD:0000000000000000 ; Source File : 'close-stream.c'
LOAD:0000000000000000 ; Source File : 'hard-locale.c'
LOAD:0000000000000000 ; Source File : 'localcharset.c'
LOAD:0000000000000000 ; Source File : 'fclose.c'
LOAD:0000000000000000 ; Source File : 'fflush.c'
LOAD:0000000000000000 ; Source File : 'fseeko.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure code
LOAD:0000000000000000 ; Segment permissions: Read/Execute
LOAD:0000000000000000 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:0000000000000300↓o
LOAD:0000000000000000                                         ; LOAD:0000000000000318↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset start         ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 21BF8h               ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 9                    ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 25h                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 24h                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 1F8h                 ; Size in file image
LOAD:0000000000000068                 dq 1F8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 238h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 238h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 5                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 5F20h                ; Size in file image
LOAD:00000000000000D8                 dq 5F20h                ; Size in memory image
LOAD:00000000000000E0                 dq 200000h              ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 6                    ; Flags
LOAD:00000000000000F0                 dq 6B90h                ; File offset
LOAD:00000000000000F8                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000100 qword_100       dq 206B90h              ; DATA XREF: .data:slotvec0↓o
LOAD:0000000000000100                                         ; Physical address
LOAD:0000000000000108                 dq 4F0h                 ; Size in file image
LOAD:0000000000000110                 dq 6A8h                 ; Size in memory image
LOAD:0000000000000118                 dq 200000h              ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000124                 dd 6                    ; Flags
LOAD:0000000000000128                 dq 6C78h                ; File offset
LOAD:0000000000000130                 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000000138                 dq 206C78h              ; Physical address
LOAD:0000000000000140                 dq 1F0h                 ; Size in file image
LOAD:0000000000000148                 dq 1F0h                 ; Size in memory image
LOAD:0000000000000150                 dq 8                    ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 4                    ; Type: NOTE
LOAD:000000000000015C                 dd 4                    ; Flags
LOAD:0000000000000160                 dq 254h                 ; File offset
LOAD:0000000000000168                 dq offset dword_254     ; Virtual address
LOAD:0000000000000170                 dq 254h                 ; Physical address
LOAD:0000000000000178                 dq 44h                  ; Size in file image
LOAD:0000000000000180                 dq 44h                  ; Size in memory image
LOAD:0000000000000188                 dq 4                    ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000194                 dd 4                    ; Flags
LOAD:0000000000000198                 dq 5230h                ; File offset
LOAD:00000000000001A0                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000000001A8                 dq 5230h                ; Physical address
LOAD:00000000000001B0                 dq 23Ch                 ; Size in file image
LOAD:00000000000001B8                 dq 23Ch                 ; Size in memory image
LOAD:00000000000001C0                 dq 4                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000001CC                 dd 6                    ; Flags
LOAD:00000000000001D0                 dq 0                    ; File offset
LOAD:00000000000001D8                 dq 0                    ; Virtual address
LOAD:00000000000001E0                 dq 0                    ; Physical address
LOAD:00000000000001E8                 dq 0                    ; Size in file image
LOAD:00000000000001F0                 dq 0                    ; Size in memory image
LOAD:00000000000001F8                 dq 10h                  ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 6474E552h            ; Type: RO-AFTER
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 6B90h                ; File offset
LOAD:0000000000000210                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000218                 dq 206B90h              ; Physical address
LOAD:0000000000000220                 dq 470h                 ; Size in file image
LOAD:0000000000000228                 dq 470h                 ; Size in memory image
LOAD:0000000000000230                 dq 1                    ; Alignment
LOAD:0000000000000238 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000238                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000254 ; ELF Note Entry
LOAD:0000000000000254 dword_254       dd 4                    ; DATA XREF: LOAD:0000000000000168↑o
LOAD:0000000000000254                                         ; Name Size
LOAD:0000000000000258                 dd 10h                  ; Desc Size
LOAD:000000000000025C                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000260 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000264                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:0000000000000274 ; ELF Note Entry
LOAD:0000000000000274                 dd 4                    ; Name Size
LOAD:0000000000000278                 dd 14h                  ; Desc Size
LOAD:000000000000027C                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000280 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000284                 db 20h, 82h, 7Ch, 0F2h, 0DAh, 0C9h, 0C6h, 9Fh, 77h, 0ECh ; Desc
LOAD:0000000000000284                 db 48h, 0BEh, 0CFh, 0DCh, 3Ch, 0C9h, 87h, 0F5h, 0FAh, 9Dh
LOAD:0000000000000298 ; ELF GNU Hash Table
LOAD:0000000000000298 elf_gnu_hash_nbuckets dd 3
LOAD:000000000000029C elf_gnu_hash_symbias dd 2Eh
LOAD:00000000000002A0 elf_gnu_hash_bitmask_nwords dd 1
LOAD:00000000000002A4 elf_gnu_hash_shift dd 6
LOAD:00000000000002A8 elf_gnu_hash_indexes dq 125801E000414934h
LOAD:00000000000002B0 elf_gnu_hash_bucket dd 2Eh, 31h, 37h
LOAD:00000000000002BC elf_gnu_hash_chain dd 1C8C1D28h, 900589C4h, 6BA3DDA7h, 9E7650BCh, 9789A096h
LOAD:00000000000002BC                 dd 72632CCEh, 409CB9C4h, 0F54162E4h, 1C8BF239h, 12F7C433h
LOAD:00000000000002BC                 dd 0
LOAD:00000000000002E8 ; ELF Symbol Table
LOAD:00000000000002E8                 Elf64_Sym <0>
LOAD:0000000000000300                 Elf64_Sym <offset aFree - offset byte_828, 12h, 0, 0, offset dword_0, \ ; "free"
LOAD:0000000000000300                            0>
LOAD:0000000000000318                 Elf64_Sym <offset aAbort - offset byte_828, 12h, 0, 0, offset dword_0,\ ; "abort"
LOAD:0000000000000318                            0>
LOAD:0000000000000330                 Elf64_Sym <offset aErrnoLocation - offset byte_828, 12h, 0, 0, \ ; "__errno_location"
LOAD:0000000000000330                            offset dword_0, 0>
LOAD:0000000000000348                 Elf64_Sym <offset aStrncmp - offset byte_828, 12h, 0, 0, \ ; "strncmp"
LOAD:0000000000000348                            offset dword_0, 0>
LOAD:0000000000000360                 Elf64_Sym <offset aItmDeregistert - offset byte_828, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:0000000000000360                            offset dword_0, 0>
LOAD:0000000000000378                 Elf64_Sym <offset aExit - offset byte_828, 12h, 0, 0, offset dword_0, \ ; "_exit"
LOAD:0000000000000378                            0>
LOAD:0000000000000390                 Elf64_Sym <offset aFpending - offset byte_828, 12h, 0, 0, \ ; "__fpending"
LOAD:0000000000000390                            offset dword_0, 0>
LOAD:00000000000003A8                 Elf64_Sym <offset aBindtextdomain+4 - offset byte_828, 12h, 0, 0, \ ; "textdomain"
LOAD:00000000000003A8                            offset dword_0, 0>
LOAD:00000000000003C0                 Elf64_Sym <offset aFclose - offset byte_828, 12h, 0, 0, \ ; "fclose"
LOAD:00000000000003C0                            offset dword_0, 0>
LOAD:00000000000003D8                 Elf64_Sym <offset aBindtextdomain - offset byte_828, 12h, 0, 0, \ ; "bindtextdomain"
LOAD:00000000000003D8                            offset dword_0, 0>
LOAD:00000000000003F0                 Elf64_Sym <offset aDcgettext - offset byte_828, 12h, 0, 0, \ ; "dcgettext"
LOAD:00000000000003F0                            offset dword_0, 0>
LOAD:0000000000000408                 Elf64_Sym <offset aCtypeGetMbCurM - offset byte_828, 12h, 0, 0, \ ; "__ctype_get_mb_cur_max"
LOAD:0000000000000408                            offset dword_0, 0>
LOAD:0000000000000420                 Elf64_Sym <offset aStrlen - offset byte_828, 12h, 0, 0, \ ; "strlen"
LOAD:0000000000000420                            offset dword_0, 0>
LOAD:0000000000000438                 Elf64_Sym <offset aStackChkFail - offset byte_828, 12h, 0, 0, \ ; "__stack_chk_fail"
LOAD:0000000000000438                            offset dword_0, 0>
LOAD:0000000000000450                 Elf64_Sym <offset aGetoptLong - offset byte_828, 12h, 0, 0, \ ; "getopt_long"
LOAD:0000000000000450                            offset dword_0, 0>
LOAD:0000000000000468                 Elf64_Sym <offset aMbrtowc - offset byte_828, 12h, 0, 0, \ ; "mbrtowc"
LOAD:0000000000000468                            offset dword_0, 0>
LOAD:0000000000000480                 Elf64_Sym <offset aStrchr - offset byte_828, 12h, 0, 0, \ ; "strchr"
LOAD:0000000000000480                            offset dword_0, 0>
LOAD:0000000000000498                 Elf64_Sym <offset aStrrchr - offset byte_828, 12h, 0, 0, \ ; "strrchr"
LOAD:0000000000000498                            offset dword_0, 0>
LOAD:00000000000004B0                 Elf64_Sym <offset aLseek - offset byte_828, 12h, 0, 0, offset dword_0,\ ; "lseek"
LOAD:00000000000004B0                            0>
LOAD:00000000000004C8                 Elf64_Sym <offset aMemset - offset byte_828, 12h, 0, 0, \ ; "memset"
LOAD:00000000000004C8                            offset dword_0, 0>
LOAD:00000000000004E0                 Elf64_Sym <offset aLibcStartMain - offset byte_828, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:00000000000004E0                            offset dword_0, 0>
LOAD:00000000000004F8                 Elf64_Sym <offset aMemcmp - offset byte_828, 12h, 0, 0, \ ; "memcmp"
LOAD:00000000000004F8                            offset dword_0, 0>
LOAD:0000000000000510                 Elf64_Sym <offset aFputsUnlocked - offset byte_828, 12h, 0, 0, \ ; "fputs_unlocked"
LOAD:0000000000000510                            offset dword_0, 0>
LOAD:0000000000000528                 Elf64_Sym <offset aCalloc - offset byte_828, 12h, 0, 0, \ ; "calloc"
LOAD:0000000000000528                            offset dword_0, 0>
LOAD:0000000000000540                 Elf64_Sym <offset aGmonStart - offset byte_828, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:0000000000000540                            offset dword_0, 0>
LOAD:0000000000000558                 Elf64_Sym <offset aMemcpy - offset byte_828, 12h, 0, 0, \ ; "memcpy"
LOAD:0000000000000558                            offset dword_0, 0>
LOAD:0000000000000570                 Elf64_Sym <offset aFileno - offset byte_828, 12h, 0, 0, \ ; "fileno"
LOAD:0000000000000570                            offset dword_0, 0>
LOAD:0000000000000588                 Elf64_Sym <offset aMalloc - offset byte_828, 12h, 0, 0, \ ; "malloc"
LOAD:0000000000000588                            offset dword_0, 0>
LOAD:00000000000005A0                 Elf64_Sym <offset aFflush - offset byte_828, 12h, 0, 0, \ ; "fflush"
LOAD:00000000000005A0                            offset dword_0, 0>
LOAD:00000000000005B8                 Elf64_Sym <offset aNlLanginfo - offset byte_828, 12h, 0, 0, \ ; "nl_langinfo"
LOAD:00000000000005B8                            offset dword_0, 0>
LOAD:00000000000005D0                 Elf64_Sym <offset aFreading - offset byte_828, 12h, 0, 0, \ ; "__freading"
LOAD:00000000000005D0                            offset dword_0, 0>
LOAD:00000000000005E8                 Elf64_Sym <offset aRealloc - offset byte_828, 12h, 0, 0, \ ; "realloc"
LOAD:00000000000005E8                            offset dword_0, 0>
LOAD:0000000000000600                 Elf64_Sym <offset aSetlocale - offset byte_828, 12h, 0, 0, \ ; "setlocale"
LOAD:0000000000000600                            offset dword_0, 0>
LOAD:0000000000000618                 Elf64_Sym <offset aPrintfChk - offset byte_828, 12h, 0, 0, \ ; "__printf_chk"
LOAD:0000000000000618                            offset dword_0, 0>
LOAD:0000000000000630                 Elf64_Sym <offset aError - offset byte_828, 12h, 0, 0, offset dword_0,\ ; "error"
LOAD:0000000000000630                            0>
LOAD:0000000000000648                 Elf64_Sym <offset aFseeko - offset byte_828, 12h, 0, 0, \ ; "fseeko"
LOAD:0000000000000648                            offset dword_0, 0>
LOAD:0000000000000660                 Elf64_Sym <offset aCxaAtexit - offset byte_828, 12h, 0, 0, \ ; "__cxa_atexit"
LOAD:0000000000000660                            offset dword_0, 0>
LOAD:0000000000000678                 Elf64_Sym <offset aExit+1 - offset byte_828, 12h, 0, 0, \ ; "exit"
LOAD:0000000000000678                            offset dword_0, 0>
LOAD:0000000000000690                 Elf64_Sym <offset aFwrite - offset byte_828, 12h, 0, 0, \ ; "fwrite"
LOAD:0000000000000690                            offset dword_0, 0>
LOAD:00000000000006A8                 Elf64_Sym <offset aFprintfChk - offset byte_828, 12h, 0, 0, \ ; "__fprintf_chk"
LOAD:00000000000006A8                            offset dword_0, 0>
LOAD:00000000000006C0                 Elf64_Sym <offset aItmRegistertmc - offset byte_828, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:00000000000006C0                            offset dword_0, 0>
LOAD:00000000000006D8                 Elf64_Sym <offset aMbsinit - offset byte_828, 12h, 0, 0, \ ; "mbsinit"
LOAD:00000000000006D8                            offset dword_0, 0>
LOAD:00000000000006F0                 Elf64_Sym <offset aIswprint - offset byte_828, 12h, 0, 0, \ ; "iswprint"
LOAD:00000000000006F0                            offset dword_0, 0>
LOAD:0000000000000708                 Elf64_Sym <offset aCxaFinalize - offset byte_828, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:0000000000000708                            offset dword_0, 0>
LOAD:0000000000000720                 Elf64_Sym <offset aCtypeBLoc - offset byte_828, 12h, 0, 0, \ ; "__ctype_b_loc"
LOAD:0000000000000720                            offset dword_0, 0>
LOAD:0000000000000738                 Elf64_Sym <offset aStdout - offset byte_828, 11h, 0, 19h, \ ; "stdout"
LOAD:0000000000000738                            offset stdout@@GLIBC_2_2_5, 8>
LOAD:0000000000000750                 Elf64_Sym <offset aEnviron+1 - offset byte_828, 21h, 0, 19h, \ ; "_environ"
LOAD:0000000000000750                            offset environ@@GLIBC_2_2_5, 8>
LOAD:0000000000000768                 Elf64_Sym <offset aEnviron+2 - offset byte_828, 21h, 0, 19h, \ ; "environ"
LOAD:0000000000000768                            offset environ@@GLIBC_2_2_5, 8>
LOAD:0000000000000780                 Elf64_Sym <offset aProgname - offset byte_828, 11h, 0, 19h, \ ; "__progname"
LOAD:0000000000000780                            offset __bss_start, 8>
LOAD:0000000000000798                 Elf64_Sym <offset aProgramInvocat - offset byte_828, 21h, 0, 19h, \ ; "program_invocation_name"
LOAD:0000000000000798                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:00000000000007B0                 Elf64_Sym <offset aPrognameFull - offset byte_828, 11h, 0, 19h, \ ; "__progname_full"
LOAD:00000000000007B0                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:00000000000007C8                 Elf64_Sym <offset aEnviron - offset byte_828, 11h, 0, 19h, \ ; "__environ"
LOAD:00000000000007C8                            offset environ@@GLIBC_2_2_5, 8>
LOAD:00000000000007E0                 Elf64_Sym <offset aProgramInvocat_0 - offset byte_828, 21h, 0, 19h, \ ; "program_invocation_short_name"
LOAD:00000000000007E0                            offset __bss_start, 8>
LOAD:00000000000007F8                 Elf64_Sym <offset aStderr - offset byte_828, 11h, 0, 19h, \ ; "stderr"
LOAD:00000000000007F8                            offset stderr@@GLIBC_2_2_5, 8>
LOAD:0000000000000810                 Elf64_Sym <offset aOptind - offset byte_828, 11h, 0, 19h, \ ; "optind"
LOAD:0000000000000810                            offset optind@@GLIBC_2_2_5, 4>
LOAD:0000000000000828 ; ELF String Table
LOAD:0000000000000828 byte_828        db 0                    ; DATA XREF: LOAD:0000000000000300↑o
LOAD:0000000000000828                                         ; LOAD:0000000000000318↑o ...
LOAD:0000000000000829 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000000B28↓o
LOAD:0000000000000833 aFflush         db 'fflush',0           ; DATA XREF: LOAD:00000000000005A0↑o
LOAD:000000000000083A aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:0000000000000618↑o
LOAD:0000000000000847 aSetlocale      db 'setlocale',0        ; DATA XREF: LOAD:0000000000000600↑o
LOAD:0000000000000851 aMbrtowc        db 'mbrtowc',0          ; DATA XREF: LOAD:0000000000000468↑o
LOAD:0000000000000859 aStrncmp        db 'strncmp',0          ; DATA XREF: LOAD:0000000000000348↑o
LOAD:0000000000000861 aOptind         db 'optind',0           ; DATA XREF: LOAD:0000000000000810↑o
LOAD:0000000000000868 aStrrchr        db 'strrchr',0          ; DATA XREF: LOAD:0000000000000498↑o
LOAD:0000000000000870 aDcgettext      db 'dcgettext',0        ; DATA XREF: LOAD:00000000000003F0↑o
LOAD:000000000000087A aError          db 'error',0            ; DATA XREF: LOAD:0000000000000630↑o
LOAD:0000000000000880 aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:0000000000000438↑o
LOAD:0000000000000891 aIswprint       db 'iswprint',0         ; DATA XREF: LOAD:00000000000006F0↑o
LOAD:000000000000089A aRealloc        db 'realloc',0          ; DATA XREF: LOAD:00000000000005E8↑o
LOAD:00000000000008A2 aAbort          db 'abort',0            ; DATA XREF: LOAD:0000000000000318↑o
LOAD:00000000000008A8 aExit           db '_exit',0            ; DATA XREF: LOAD:0000000000000378↑o
LOAD:00000000000008A8                                         ; LOAD:0000000000000678↑o
LOAD:00000000000008AE aProgramInvocat db 'program_invocation_name',0
LOAD:00000000000008AE                                         ; DATA XREF: LOAD:0000000000000798↑o
LOAD:00000000000008C6 aCtypeGetMbCurM db '__ctype_get_mb_cur_max',0
LOAD:00000000000008C6                                         ; DATA XREF: LOAD:0000000000000408↑o
LOAD:00000000000008DD aCalloc         db 'calloc',0           ; DATA XREF: LOAD:0000000000000528↑o
LOAD:00000000000008E4 aStrlen         db 'strlen',0           ; DATA XREF: LOAD:0000000000000420↑o
LOAD:00000000000008EB aMemset         db 'memset',0           ; DATA XREF: LOAD:00000000000004C8↑o
LOAD:00000000000008F2 aErrnoLocation  db '__errno_location',0 ; DATA XREF: LOAD:0000000000000330↑o
LOAD:0000000000000903 aMemcmp         db 'memcmp',0           ; DATA XREF: LOAD:00000000000004F8↑o
LOAD:000000000000090A aFprintfChk     db '__fprintf_chk',0    ; DATA XREF: LOAD:00000000000006A8↑o
LOAD:0000000000000918 aStdout         db 'stdout',0           ; DATA XREF: LOAD:0000000000000738↑o
LOAD:000000000000091F aLseek          db 'lseek',0            ; DATA XREF: LOAD:00000000000004B0↑o
LOAD:0000000000000925 aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:0000000000000558↑o
LOAD:000000000000092C aFclose         db 'fclose',0           ; DATA XREF: LOAD:00000000000003C0↑o
LOAD:0000000000000933 aMalloc         db 'malloc',0           ; DATA XREF: LOAD:0000000000000588↑o
LOAD:000000000000093A aMbsinit        db 'mbsinit',0          ; DATA XREF: LOAD:00000000000006D8↑o
LOAD:0000000000000942 aNlLanginfo     db 'nl_langinfo',0      ; DATA XREF: LOAD:00000000000005B8↑o
LOAD:000000000000094E aCtypeBLoc      db '__ctype_b_loc',0    ; DATA XREF: LOAD:0000000000000720↑o
LOAD:000000000000095C aFreading       db '__freading',0       ; DATA XREF: LOAD:00000000000005D0↑o
LOAD:0000000000000967 aStderr         db 'stderr',0           ; DATA XREF: LOAD:00000000000007F8↑o
LOAD:000000000000096E aGetoptLong     db 'getopt_long',0      ; DATA XREF: LOAD:0000000000000450↑o
LOAD:000000000000097A aFileno         db 'fileno',0           ; DATA XREF: LOAD:0000000000000570↑o
LOAD:0000000000000981 aFwrite         db 'fwrite',0           ; DATA XREF: LOAD:0000000000000690↑o
LOAD:0000000000000988 aFpending       db '__fpending',0       ; DATA XREF: LOAD:0000000000000390↑o
LOAD:0000000000000993 aStrchr         db 'strchr',0           ; DATA XREF: LOAD:0000000000000480↑o
LOAD:000000000000099A aProgramInvocat_0 db 'program_invocation_short_name',0
LOAD:000000000000099A                                         ; DATA XREF: LOAD:00000000000007E0↑o
LOAD:00000000000009B8 aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:0000000000000708↑o
LOAD:00000000000009C7 aBindtextdomain db 'bindtextdomain',0   ; DATA XREF: LOAD:00000000000003D8↑o
LOAD:00000000000009C7                                         ; LOAD:00000000000003A8↑o
LOAD:00000000000009D6 aLibcStartMain  db '__libc_start_main',0
LOAD:00000000000009D6                                         ; DATA XREF: LOAD:00000000000004E0↑o
LOAD:00000000000009E8 aFseeko         db 'fseeko',0           ; DATA XREF: LOAD:0000000000000648↑o
LOAD:00000000000009EF aFputsUnlocked  db 'fputs_unlocked',0   ; DATA XREF: LOAD:0000000000000510↑o
LOAD:00000000000009FE aFree           db 'free',0             ; DATA XREF: LOAD:0000000000000300↑o
LOAD:0000000000000A03 aProgname       db '__progname',0       ; DATA XREF: LOAD:0000000000000780↑o
LOAD:0000000000000A0E aEnviron        db '__environ',0        ; DATA XREF: LOAD:00000000000007C8↑o
LOAD:0000000000000A0E                                         ; LOAD:0000000000000750↑o ...
LOAD:0000000000000A18 aPrognameFull   db '__progname_full',0  ; DATA XREF: LOAD:00000000000007B0↑o
LOAD:0000000000000A28 aCxaAtexit      db '__cxa_atexit',0     ; DATA XREF: LOAD:0000000000000660↑o
LOAD:0000000000000A35 aGlibc23        db 'GLIBC_2.3',0        ; DATA XREF: LOAD:0000000000000B38↓o
LOAD:0000000000000A3F aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000000B48↓o
LOAD:0000000000000A4B aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:0000000000000B58↓o
LOAD:0000000000000A56 aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000000B68↓o
LOAD:0000000000000A60 aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000000B78↓o
LOAD:0000000000000A6C aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:0000000000000A6C                                         ; DATA XREF: LOAD:0000000000000360↑o
LOAD:0000000000000A88 aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:0000000000000540↑o
LOAD:0000000000000A97 aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:0000000000000A97                                         ; DATA XREF: LOAD:00000000000006C0↑o
LOAD:0000000000000AB1                 align 2
LOAD:0000000000000AB2 ; ELF GNU Symbol Version Table
LOAD:0000000000000AB2                 dw 0
LOAD:0000000000000AB4                 dw 2                    ; free@@GLIBC_2.2.5
LOAD:0000000000000AB6                 dw 2                    ; abort@@GLIBC_2.2.5
LOAD:0000000000000AB8                 dw 2                    ; __errno_location@@GLIBC_2.2.5
LOAD:0000000000000ABA                 dw 2                    ; strncmp@@GLIBC_2.2.5
LOAD:0000000000000ABC                 dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
LOAD:0000000000000ABE                 dw 2                    ; _exit@@GLIBC_2.2.5
LOAD:0000000000000AC0                 dw 2                    ; __fpending@@GLIBC_2.2.5
LOAD:0000000000000AC2                 dw 2                    ; textdomain@@GLIBC_2.2.5
LOAD:0000000000000AC4                 dw 2                    ; fclose@@GLIBC_2.2.5
LOAD:0000000000000AC6                 dw 2                    ; bindtextdomain@@GLIBC_2.2.5
LOAD:0000000000000AC8                 dw 2                    ; dcgettext@@GLIBC_2.2.5
LOAD:0000000000000ACA                 dw 2                    ; __ctype_get_mb_cur_max@@GLIBC_2.2.5
LOAD:0000000000000ACC                 dw 2                    ; strlen@@GLIBC_2.2.5
LOAD:0000000000000ACE                 dw 3                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:0000000000000AD0                 dw 2                    ; getopt_long@@GLIBC_2.2.5
LOAD:0000000000000AD2                 dw 2                    ; mbrtowc@@GLIBC_2.2.5
LOAD:0000000000000AD4                 dw 2                    ; strchr@@GLIBC_2.2.5
LOAD:0000000000000AD6                 dw 2                    ; strrchr@@GLIBC_2.2.5
LOAD:0000000000000AD8                 dw 2                    ; lseek@@GLIBC_2.2.5
LOAD:0000000000000ADA                 dw 2                    ; memset@@GLIBC_2.2.5
LOAD:0000000000000ADC                 dw 2                    ; __libc_start_main@@GLIBC_2.2.5
LOAD:0000000000000ADE                 dw 2                    ; memcmp@@GLIBC_2.2.5
LOAD:0000000000000AE0                 dw 2                    ; fputs_unlocked@@GLIBC_2.2.5
LOAD:0000000000000AE2                 dw 2                    ; calloc@@GLIBC_2.2.5
LOAD:0000000000000AE4                 dw 0                    ; local  symbol: __gmon_start__
LOAD:0000000000000AE6                 dw 4                    ; memcpy@@GLIBC_2.14
LOAD:0000000000000AE8                 dw 2                    ; fileno@@GLIBC_2.2.5
LOAD:0000000000000AEA                 dw 2                    ; malloc@@GLIBC_2.2.5
LOAD:0000000000000AEC                 dw 2                    ; fflush@@GLIBC_2.2.5
LOAD:0000000000000AEE                 dw 2                    ; nl_langinfo@@GLIBC_2.2.5
LOAD:0000000000000AF0                 dw 2                    ; __freading@@GLIBC_2.2.5
LOAD:0000000000000AF2                 dw 2                    ; realloc@@GLIBC_2.2.5
LOAD:0000000000000AF4                 dw 2                    ; setlocale@@GLIBC_2.2.5
LOAD:0000000000000AF6                 dw 5                    ; __printf_chk@@GLIBC_2.3.4
LOAD:0000000000000AF8                 dw 2                    ; error@@GLIBC_2.2.5
LOAD:0000000000000AFA                 dw 2                    ; fseeko@@GLIBC_2.2.5
LOAD:0000000000000AFC                 dw 2                    ; __cxa_atexit@@GLIBC_2.2.5
LOAD:0000000000000AFE                 dw 2                    ; exit@@GLIBC_2.2.5
LOAD:0000000000000B00                 dw 2                    ; fwrite@@GLIBC_2.2.5
LOAD:0000000000000B02                 dw 5                    ; __fprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000B04                 dw 0                    ; local  symbol: _ITM_registerTMCloneTable
LOAD:0000000000000B06                 dw 2                    ; mbsinit@@GLIBC_2.2.5
LOAD:0000000000000B08                 dw 2                    ; iswprint@@GLIBC_2.2.5
LOAD:0000000000000B0A                 dw 2                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:0000000000000B0C                 dw 6                    ; __ctype_b_loc@@GLIBC_2.3
LOAD:0000000000000B0E                 dw 2                    ; stdout@@GLIBC_2.2.5
LOAD:0000000000000B10                 dw 2                    ; _environ@@GLIBC_2.2.5
LOAD:0000000000000B12                 dw 2                    ; environ@@GLIBC_2.2.5
LOAD:0000000000000B14                 dw 2                    ; __progname@@GLIBC_2.2.5
LOAD:0000000000000B16                 dw 2                    ; program_invocation_name@@GLIBC_2.2.5
LOAD:0000000000000B18                 dw 2                    ; __progname_full@@GLIBC_2.2.5
LOAD:0000000000000B1A                 dw 2                    ; __environ@@GLIBC_2.2.5
LOAD:0000000000000B1C                 dw 2                    ; program_invocation_short_name@@GLIBC_2.2.5
LOAD:0000000000000B1E                 dw 2                    ; stderr@@GLIBC_2.2.5
LOAD:0000000000000B20                 dw 2                    ; optind@@GLIBC_2.2.5
LOAD:0000000000000B22                 dw 0
LOAD:0000000000000B24                 dw 0
LOAD:0000000000000B26                 dw 0
LOAD:0000000000000B28 ; ELF GNU Symbol Version Requirements
LOAD:0000000000000B28                 Elf64_Verneed <1, 5, offset aLibcSo6 - offset byte_828, 10h, 0> ; "libc.so.6"
LOAD:0000000000000B38                 Elf64_Vernaux <0D696913h, 0, 6, offset aGlibc23 - offset byte_828, \ ; "GLIBC_2.3"
LOAD:0000000000000B38                                10h>
LOAD:0000000000000B48                 Elf64_Vernaux <9691974h, 0, 5, offset aGlibc234 - offset byte_828, \ ; "GLIBC_2.3.4"
LOAD:0000000000000B48                                10h>
LOAD:0000000000000B58                 Elf64_Vernaux <6969194h, 0, 4, offset aGlibc214 - offset byte_828, \ ; "GLIBC_2.14"
LOAD:0000000000000B58                                10h>
LOAD:0000000000000B68                 Elf64_Vernaux <0D696914h, 0, 3, offset aGlibc24 - offset byte_828, \ ; "GLIBC_2.4"
LOAD:0000000000000B68                                10h>
LOAD:0000000000000B78                 Elf64_Vernaux <9691A75h, 0, 2, offset aGlibc225 - offset byte_828, 0> ; "GLIBC_2.2.5"
LOAD:0000000000000B88 ; ELF RELA Relocation Table
LOAD:0000000000000B88                 Elf64_Rela <206B90h, 8, 17E0h> ; R_X86_64_RELATIVE +17E0h
LOAD:0000000000000BA0                 Elf64_Rela <206B98h, 8, 17A0h> ; R_X86_64_RELATIVE +17A0h
LOAD:0000000000000BB8                 Elf64_Rela <206BA0h, 8, 4674h> ; R_X86_64_RELATIVE +4674h
LOAD:0000000000000BD0                 Elf64_Rela <206BC0h, 8, 4679h> ; R_X86_64_RELATIVE +4679h
LOAD:0000000000000BE8                 Elf64_Rela <206BE0h, 8, 467Eh> ; R_X86_64_RELATIVE +467Eh
LOAD:0000000000000C00                 Elf64_Rela <206C20h, 8, 49D9h> ; R_X86_64_RELATIVE +49D9h
LOAD:0000000000000C18                 Elf64_Rela <206C28h, 8, 49E1h> ; R_X86_64_RELATIVE +49E1h
LOAD:0000000000000C30                 Elf64_Rela <206C30h, 8, 49E7h> ; R_X86_64_RELATIVE +49E7h
LOAD:0000000000000C48                 Elf64_Rela <206C38h, 8, 49F4h> ; R_X86_64_RELATIVE +49F4h
LOAD:0000000000000C60                 Elf64_Rela <206C40h, 8, 4A01h> ; R_X86_64_RELATIVE +4A01h
LOAD:0000000000000C78                 Elf64_Rela <206C48h, 8, 4672h> ; R_X86_64_RELATIVE +4672h
LOAD:0000000000000C90                 Elf64_Rela <206C50h, 8, 4A15h> ; R_X86_64_RELATIVE +4A15h
LOAD:0000000000000CA8                 Elf64_Rela <206C58h, 8, 49FAh> ; R_X86_64_RELATIVE +49FAh
LOAD:0000000000000CC0                 Elf64_Rela <206C60h, 8, 4641h> ; R_X86_64_RELATIVE +4641h
LOAD:0000000000000CD8                 Elf64_Rela <206C68h, 8, 4A1Dh> ; R_X86_64_RELATIVE +4A1Dh
LOAD:0000000000000CF0                 Elf64_Rela <207008h, 8, 207008h> ; R_X86_64_RELATIVE +207008h
LOAD:0000000000000D08                 Elf64_Rela <207010h, 8, 4963h> ; R_X86_64_RELATIVE +4963h
LOAD:0000000000000D20                 Elf64_Rela <207060h, 8, 207070h> ; R_X86_64_RELATIVE +207070h
LOAD:0000000000000D38                 Elf64_Rela <207078h, 8, 207100h> ; R_X86_64_RELATIVE +207100h
LOAD:0000000000000D50                 Elf64_Rela <206FC0h, 500000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:0000000000000D68                 Elf64_Rela <206FC8h, 1500000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:0000000000000D80                 Elf64_Rela <206FD0h, 1900000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:0000000000000D98                 Elf64_Rela <206FD8h, 2900000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:0000000000000DB0                 Elf64_Rela <206FE0h, 2C00000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:0000000000000DC8                 Elf64_Rela <207080h, 3100000005h, 0> ; R_X86_64_COPY __progname
LOAD:0000000000000DE0                 Elf64_Rela <207088h, 2E00000005h, 0> ; R_X86_64_COPY stdout
LOAD:0000000000000DF8                 Elf64_Rela <207090h, 3700000005h, 0> ; R_X86_64_COPY optind
LOAD:0000000000000E10                 Elf64_Rela <207098h, 3400000005h, 0> ; R_X86_64_COPY __environ
LOAD:0000000000000E28                 Elf64_Rela <2070A0h, 3300000005h, 0> ; R_X86_64_COPY __progname_full
LOAD:0000000000000E40                 Elf64_Rela <2070C0h, 3600000005h, 0> ; R_X86_64_COPY stderr
LOAD:0000000000000E58 ; ELF JMPREL Relocation Table
LOAD:0000000000000E58                 Elf64_Rela <206E80h, 100000007h, 0> ; R_X86_64_JUMP_SLOT free
LOAD:0000000000000E70                 Elf64_Rela <206E88h, 200000007h, 0> ; R_X86_64_JUMP_SLOT abort
LOAD:0000000000000E88                 Elf64_Rela <206E90h, 300000007h, 0> ; R_X86_64_JUMP_SLOT __errno_location
LOAD:0000000000000EA0                 Elf64_Rela <206E98h, 400000007h, 0> ; R_X86_64_JUMP_SLOT strncmp
LOAD:0000000000000EB8                 Elf64_Rela <206EA0h, 600000007h, 0> ; R_X86_64_JUMP_SLOT _exit
LOAD:0000000000000ED0                 Elf64_Rela <206EA8h, 700000007h, 0> ; R_X86_64_JUMP_SLOT __fpending
LOAD:0000000000000EE8                 Elf64_Rela <206EB0h, 800000007h, 0> ; R_X86_64_JUMP_SLOT textdomain
LOAD:0000000000000F00                 Elf64_Rela <206EB8h, 900000007h, 0> ; R_X86_64_JUMP_SLOT fclose
LOAD:0000000000000F18                 Elf64_Rela <206EC0h, 0A00000007h, 0> ; R_X86_64_JUMP_SLOT bindtextdomain
LOAD:0000000000000F30                 Elf64_Rela <206EC8h, 0B00000007h, 0> ; R_X86_64_JUMP_SLOT dcgettext
LOAD:0000000000000F48                 Elf64_Rela <206ED0h, 0C00000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_get_mb_cur_max
LOAD:0000000000000F60                 Elf64_Rela <206ED8h, 0D00000007h, 0> ; R_X86_64_JUMP_SLOT strlen
LOAD:0000000000000F78                 Elf64_Rela <206EE0h, 0E00000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
LOAD:0000000000000F90                 Elf64_Rela <206EE8h, 0F00000007h, 0> ; R_X86_64_JUMP_SLOT getopt_long
LOAD:0000000000000FA8                 Elf64_Rela <206EF0h, 1000000007h, 0> ; R_X86_64_JUMP_SLOT mbrtowc
LOAD:0000000000000FC0                 Elf64_Rela <206EF8h, 1100000007h, 0> ; R_X86_64_JUMP_SLOT strchr
LOAD:0000000000000FD8                 Elf64_Rela <206F00h, 1200000007h, 0> ; R_X86_64_JUMP_SLOT strrchr
LOAD:0000000000000FF0                 Elf64_Rela <206F08h, 1300000007h, 0> ; R_X86_64_JUMP_SLOT lseek
LOAD:0000000000001008                 Elf64_Rela <206F10h, 1400000007h, 0> ; R_X86_64_JUMP_SLOT memset
LOAD:0000000000001020                 Elf64_Rela <206F18h, 1600000007h, 0> ; R_X86_64_JUMP_SLOT memcmp
LOAD:0000000000001038                 Elf64_Rela <206F20h, 1700000007h, 0> ; R_X86_64_JUMP_SLOT fputs_unlocked
LOAD:0000000000001050                 Elf64_Rela <206F28h, 1800000007h, 0> ; R_X86_64_JUMP_SLOT calloc
LOAD:0000000000001068                 Elf64_Rela <206F30h, 1A00000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
LOAD:0000000000001080                 Elf64_Rela <206F38h, 1B00000007h, 0> ; R_X86_64_JUMP_SLOT fileno
LOAD:0000000000001098                 Elf64_Rela <206F40h, 1C00000007h, 0> ; R_X86_64_JUMP_SLOT malloc
LOAD:00000000000010B0                 Elf64_Rela <206F48h, 1D00000007h, 0> ; R_X86_64_JUMP_SLOT fflush
LOAD:00000000000010C8                 Elf64_Rela <206F50h, 1E00000007h, 0> ; R_X86_64_JUMP_SLOT nl_langinfo
LOAD:00000000000010E0                 Elf64_Rela <206F58h, 1F00000007h, 0> ; R_X86_64_JUMP_SLOT __freading
LOAD:00000000000010F8                 Elf64_Rela <206F60h, 2000000007h, 0> ; R_X86_64_JUMP_SLOT realloc
LOAD:0000000000001110                 Elf64_Rela <206F68h, 2100000007h, 0> ; R_X86_64_JUMP_SLOT setlocale
LOAD:0000000000001128                 Elf64_Rela <206F70h, 2200000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
LOAD:0000000000001140                 Elf64_Rela <206F78h, 2300000007h, 0> ; R_X86_64_JUMP_SLOT error
LOAD:0000000000001158                 Elf64_Rela <206F80h, 2400000007h, 0> ; R_X86_64_JUMP_SLOT fseeko
LOAD:0000000000001170                 Elf64_Rela <206F88h, 2500000007h, 0> ; R_X86_64_JUMP_SLOT __cxa_atexit
LOAD:0000000000001188                 Elf64_Rela <206F90h, 2600000007h, 0> ; R_X86_64_JUMP_SLOT exit
LOAD:00000000000011A0                 Elf64_Rela <206F98h, 2700000007h, 0> ; R_X86_64_JUMP_SLOT fwrite
LOAD:00000000000011B8                 Elf64_Rela <206FA0h, 2800000007h, 0> ; R_X86_64_JUMP_SLOT __fprintf_chk
LOAD:00000000000011D0                 Elf64_Rela <206FA8h, 2A00000007h, 0> ; R_X86_64_JUMP_SLOT mbsinit
LOAD:00000000000011E8                 Elf64_Rela <206FB0h, 2B00000007h, 0> ; R_X86_64_JUMP_SLOT iswprint
LOAD:0000000000001200                 Elf64_Rela <206FB8h, 2D00000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_b_loc
LOAD:0000000000001200 LOAD            ends
LOAD:0000000000001200
.init:0000000000001218 ; ===========================================================================
.init:0000000000001218
.init:0000000000001218 ; Segment type: Pure code
.init:0000000000001218 ; Segment permissions: Read/Execute
.init:0000000000001218 _init           segment dword public 'CODE' use64
.init:0000000000001218                 assume cs:_init
.init:0000000000001218                 ;org 1218h
.init:0000000000001218                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:0000000000001218
.init:0000000000001218 ; =============== S U B R O U T I N E =======================================
.init:0000000000001218
.init:0000000000001218
.init:0000000000001218                 public _init_proc
.init:0000000000001218 _init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
.init:0000000000001218                 sub     rsp, 8          ; _init
.init:000000000000121C                 mov     rax, cs:__gmon_start___ptr
.init:0000000000001223                 test    rax, rax
.init:0000000000001226                 jz      short loc_122A
.init:0000000000001228                 call    rax ; __gmon_start__
.init:000000000000122A
.init:000000000000122A loc_122A:                               ; CODE XREF: _init_proc+E↑j
.init:000000000000122A                 add     rsp, 8
.init:000000000000122E                 retn
.init:000000000000122E _init_proc      endp
.init:000000000000122E
.init:000000000000122E _init           ends
.init:000000000000122E
LOAD:000000000000122F ; ===========================================================================
LOAD:000000000000122F
LOAD:000000000000122F ; Segment type: Pure code
LOAD:000000000000122F ; Segment permissions: Read/Execute
LOAD:000000000000122F LOAD            segment byte public 'CODE' use64
LOAD:000000000000122F                 assume cs:LOAD
LOAD:000000000000122F                 ;org 122Fh
LOAD:000000000000122F                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000122F                 align 10h
LOAD:000000000000122F LOAD            ends
LOAD:000000000000122F
.plt:0000000000001230 ; ===========================================================================
.plt:0000000000001230
.plt:0000000000001230 ; Segment type: Pure code
.plt:0000000000001230 ; Segment permissions: Read/Execute
.plt:0000000000001230 _plt            segment para public 'CODE' use64
.plt:0000000000001230                 assume cs:_plt
.plt:0000000000001230                 ;org 1230h
.plt:0000000000001230                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:0000000000001230
.plt:0000000000001230 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001230
.plt:0000000000001230
.plt:0000000000001230 sub_1230        proc near               ; CODE XREF: .plt:000000000000124B↓j
.plt:0000000000001230                                         ; .plt:000000000000125B↓j ...
.plt:0000000000001230 ; __unwind {
.plt:0000000000001230                 push    cs:qword_206E70
.plt:0000000000001236                 jmp     cs:qword_206E78
.plt:0000000000001236 sub_1230        endp
.plt:0000000000001236
.plt:0000000000001236 ; ---------------------------------------------------------------------------
.plt:000000000000123C                 align 20h
.plt:0000000000001240
.plt:0000000000001240 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001240
.plt:0000000000001240 ; Attributes: thunk
.plt:0000000000001240
.plt:0000000000001240 ; void free(void *ptr)
.plt:0000000000001240 _free           proc near               ; CODE XREF: quotearg_n_options+115↓p
.plt:0000000000001240                                         ; quotearg_free+37↓p ...
.plt:0000000000001240                 jmp     cs:free_ptr
.plt:0000000000001240 _free           endp
.plt:0000000000001240
.plt:0000000000001246 ; ---------------------------------------------------------------------------
.plt:0000000000001246                 push    0
.plt:000000000000124B                 jmp     sub_1230
.plt:0000000000001250
.plt:0000000000001250 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001250
.plt:0000000000001250 ; Attributes: noreturn thunk
.plt:0000000000001250
.plt:0000000000001250 ; void __noreturn abort(void)
.plt:0000000000001250 _abort          proc near               ; CODE XREF: set_program_name+9A↓p
.plt:0000000000001250                                         ; quotearg_buffer_restyled:def_1E51↓p ...
.plt:0000000000001250                 jmp     cs:abort_ptr
.plt:0000000000001250 _abort          endp
.plt:0000000000001250
.plt:0000000000001256 ; ---------------------------------------------------------------------------
.plt:0000000000001256                 push    1
.plt:000000000000125B                 jmp     sub_1230
.plt:0000000000001260
.plt:0000000000001260 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001260
.plt:0000000000001260 ; Attributes: thunk
.plt:0000000000001260
.plt:0000000000001260 ; int *__errno_location(void)
.plt:0000000000001260 ___errno_location proc near             ; CODE XREF: close_stdout+16↓p
.plt:0000000000001260                                         ; quotearg_n_options+1C↓p ...
.plt:0000000000001260                 jmp     cs:__errno_location_ptr
.plt:0000000000001260 ___errno_location endp
.plt:0000000000001260
.plt:0000000000001266 ; ---------------------------------------------------------------------------
.plt:0000000000001266                 push    2
.plt:000000000000126B                 jmp     sub_1230
.plt:0000000000001270
.plt:0000000000001270 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001270
.plt:0000000000001270 ; Attributes: thunk
.plt:0000000000001270
.plt:0000000000001270 ; int strncmp(const char *s1, const char *s2, size_t n)
.plt:0000000000001270 _strncmp        proc near               ; CODE XREF: usage+22C↓p
.plt:0000000000001270                                         ; usage+2ED↓p
.plt:0000000000001270                 jmp     cs:strncmp_ptr
.plt:0000000000001270 _strncmp        endp
.plt:0000000000001270
.plt:0000000000001276 ; ---------------------------------------------------------------------------
.plt:0000000000001276                 push    3
.plt:000000000000127B                 jmp     sub_1230
.plt:0000000000001280
.plt:0000000000001280 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001280
.plt:0000000000001280 ; Attributes: noreturn thunk
.plt:0000000000001280
.plt:0000000000001280 ; void __noreturn _exit(int status)
.plt:0000000000001280 __exit          proc near               ; CODE XREF: close_stdout+88↓p
.plt:0000000000001280                 jmp     cs:_exit_ptr
.plt:0000000000001280 __exit          endp
.plt:0000000000001280
.plt:0000000000001286 ; ---------------------------------------------------------------------------
.plt:0000000000001286                 push    4
.plt:000000000000128B                 jmp     sub_1230
.plt:0000000000001290
.plt:0000000000001290 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001290
.plt:0000000000001290 ; Attributes: thunk
.plt:0000000000001290
.plt:0000000000001290 ; size_t __fpending(FILE *fp)
.plt:0000000000001290 ___fpending     proc near               ; CODE XREF: close_stream+7↓p
.plt:0000000000001290                 jmp     cs:__fpending_ptr
.plt:0000000000001290 ___fpending     endp
.plt:0000000000001290
.plt:0000000000001296 ; ---------------------------------------------------------------------------
.plt:0000000000001296                 push    5
.plt:000000000000129B                 jmp     sub_1230
.plt:00000000000012A0
.plt:00000000000012A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000012A0
.plt:00000000000012A0 ; Attributes: thunk
.plt:00000000000012A0
.plt:00000000000012A0 ; char *textdomain(const char *domainname)
.plt:00000000000012A0 _textdomain     proc near               ; CODE XREF: main+49↓p
.plt:00000000000012A0                 jmp     cs:textdomain_ptr
.plt:00000000000012A0 _textdomain     endp
.plt:00000000000012A0
.plt:00000000000012A6 ; ---------------------------------------------------------------------------
.plt:00000000000012A6                 push    6
.plt:00000000000012AB                 jmp     sub_1230
.plt:00000000000012B0
.plt:00000000000012B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000012B0
.plt:00000000000012B0 ; Attributes: thunk
.plt:00000000000012B0
.plt:00000000000012B0 ; int fclose(FILE *stream)
.plt:00000000000012B0 _fclose         proc near               ; CODE XREF: rpl_fclose+36↓p
.plt:00000000000012B0                                         ; rpl_fclose+6B↓j
.plt:00000000000012B0                 jmp     cs:fclose_ptr
.plt:00000000000012B0 _fclose         endp
.plt:00000000000012B0
.plt:00000000000012B6 ; ---------------------------------------------------------------------------
.plt:00000000000012B6                 push    7
.plt:00000000000012BB                 jmp     sub_1230
.plt:00000000000012C0
.plt:00000000000012C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000012C0
.plt:00000000000012C0 ; Attributes: thunk
.plt:00000000000012C0
.plt:00000000000012C0 ; char *bindtextdomain(const char *domainname, const char *dirname)
.plt:00000000000012C0 _bindtextdomain proc near               ; CODE XREF: main+3D↓p
.plt:00000000000012C0                 jmp     cs:bindtextdomain_ptr
.plt:00000000000012C0 _bindtextdomain endp
.plt:00000000000012C0
.plt:00000000000012C6 ; ---------------------------------------------------------------------------
.plt:00000000000012C6                 push    8
.plt:00000000000012CB                 jmp     sub_1230
.plt:00000000000012D0
.plt:00000000000012D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000012D0
.plt:00000000000012D0 ; Attributes: thunk
.plt:00000000000012D0
.plt:00000000000012D0 ; char *dcgettext(const char *domainname, const char *msgid, int category)
.plt:00000000000012D0 _dcgettext      proc near               ; CODE XREF: usage+38↓p
.plt:00000000000012D0                                         ; usage+66↓p ...
.plt:00000000000012D0                 jmp     cs:dcgettext_ptr
.plt:00000000000012D0 _dcgettext      endp
.plt:00000000000012D0
.plt:00000000000012D6 ; ---------------------------------------------------------------------------
.plt:00000000000012D6                 push    9
.plt:00000000000012DB                 jmp     sub_1230
.plt:00000000000012E0
.plt:00000000000012E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000012E0
.plt:00000000000012E0 ; Attributes: thunk
.plt:00000000000012E0
.plt:00000000000012E0 ; size_t __ctype_get_mb_cur_max(void)
.plt:00000000000012E0 ___ctype_get_mb_cur_max proc near       ; CODE XREF: quotearg_buffer_restyled+6C↓p
.plt:00000000000012E0                 jmp     cs:__ctype_get_mb_cur_max_ptr
.plt:00000000000012E0 ___ctype_get_mb_cur_max endp
.plt:00000000000012E0
.plt:00000000000012E6 ; ---------------------------------------------------------------------------
.plt:00000000000012E6                 push    0Ah
.plt:00000000000012EB                 jmp     sub_1230
.plt:00000000000012F0
.plt:00000000000012F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000012F0
.plt:00000000000012F0 ; Attributes: thunk
.plt:00000000000012F0
.plt:00000000000012F0 ; size_t strlen(const char *s)
.plt:00000000000012F0 _strlen         proc near               ; CODE XREF: quotearg_buffer_restyled+157↓p
.plt:00000000000012F0                                         ; quotearg_buffer_restyled+8DB↓p ...
.plt:00000000000012F0                 jmp     cs:strlen_ptr
.plt:00000000000012F0 _strlen         endp
.plt:00000000000012F0
.plt:00000000000012F6 ; ---------------------------------------------------------------------------
.plt:00000000000012F6                 push    0Bh
.plt:00000000000012FB                 jmp     sub_1230
.plt:0000000000001300
.plt:0000000000001300 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001300
.plt:0000000000001300 ; Attributes: noreturn thunk
.plt:0000000000001300
.plt:0000000000001300 ___stack_chk_fail proc near             ; CODE XREF: quotearg_buffer_restyled:loc_2FB3↓p
.plt:0000000000001300                                         ; quotearg_n_style:loc_35D9↓p ...
.plt:0000000000001300                 jmp     cs:__stack_chk_fail_ptr
.plt:0000000000001300 ___stack_chk_fail endp
.plt:0000000000001300
.plt:0000000000001306 ; ---------------------------------------------------------------------------
.plt:0000000000001306                 push    0Ch
.plt:000000000000130B                 jmp     sub_1230
.plt:0000000000001310
.plt:0000000000001310 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001310
.plt:0000000000001310 ; Attributes: thunk
.plt:0000000000001310
.plt:0000000000001310 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
.plt:0000000000001310 _getopt_long    proc near               ; CODE XREF: main+7A↓p
.plt:0000000000001310                 jmp     cs:getopt_long_ptr
.plt:0000000000001310 _getopt_long    endp
.plt:0000000000001310
.plt:0000000000001316 ; ---------------------------------------------------------------------------
.plt:0000000000001316                 push    0Dh
.plt:000000000000131B                 jmp     sub_1230
.plt:0000000000001320
.plt:0000000000001320 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001320
.plt:0000000000001320 ; Attributes: thunk
.plt:0000000000001320
.plt:0000000000001320 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
.plt:0000000000001320 _mbrtowc        proc near               ; CODE XREF: rpl_mbrtowc+32↓p
.plt:0000000000001320                 jmp     cs:mbrtowc_ptr
.plt:0000000000001320 _mbrtowc        endp
.plt:0000000000001320
.plt:0000000000001326 ; ---------------------------------------------------------------------------
.plt:0000000000001326                 push    0Eh
.plt:000000000000132B                 jmp     sub_1230
.plt:0000000000001330
.plt:0000000000001330 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001330
.plt:0000000000001330 ; Attributes: thunk
.plt:0000000000001330
.plt:0000000000001330 ; char *strchr(const char *s, int c)
.plt:0000000000001330 _strchr         proc near               ; CODE XREF: main+169↓p
.plt:0000000000001330                 jmp     cs:strchr_ptr
.plt:0000000000001330 _strchr         endp
.plt:0000000000001330
.plt:0000000000001336 ; ---------------------------------------------------------------------------
.plt:0000000000001336                 push    0Fh
.plt:000000000000133B                 jmp     sub_1230
.plt:0000000000001340
.plt:0000000000001340 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001340
.plt:0000000000001340 ; Attributes: thunk
.plt:0000000000001340
.plt:0000000000001340 ; char *strrchr(const char *s, int c)
.plt:0000000000001340 _strrchr        proc near               ; CODE XREF: set_program_name+E↓p
.plt:0000000000001340                 jmp     cs:strrchr_ptr
.plt:0000000000001340 _strrchr        endp
.plt:0000000000001340
.plt:0000000000001346 ; ---------------------------------------------------------------------------
.plt:0000000000001346                 push    10h
.plt:000000000000134B                 jmp     sub_1230
.plt:0000000000001350
.plt:0000000000001350 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001350
.plt:0000000000001350 ; Attributes: thunk
.plt:0000000000001350
.plt:0000000000001350 ; __off_t lseek(int fd, __off_t offset, int whence)
.plt:0000000000001350 _lseek          proc near               ; CODE XREF: rpl_fclose+59↓p
.plt:0000000000001350                                         ; rpl_fseeko+3B↓p
.plt:0000000000001350                 jmp     cs:lseek_ptr
.plt:0000000000001350 _lseek          endp
.plt:0000000000001350
.plt:0000000000001356 ; ---------------------------------------------------------------------------
.plt:0000000000001356                 push    11h
.plt:000000000000135B                 jmp     sub_1230
.plt:0000000000001360
.plt:0000000000001360 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001360
.plt:0000000000001360 ; Attributes: thunk
.plt:0000000000001360
.plt:0000000000001360 ; void *memset(void *s, int c, size_t n)
.plt:0000000000001360 _memset         proc near               ; CODE XREF: quotearg_n_options+99↓p
.plt:0000000000001360                                         ; xzalloc+12↓j
.plt:0000000000001360                 jmp     cs:memset_ptr
.plt:0000000000001360 _memset         endp
.plt:0000000000001360
.plt:0000000000001366 ; ---------------------------------------------------------------------------
.plt:0000000000001366                 push    12h
.plt:000000000000136B                 jmp     sub_1230
.plt:0000000000001370
.plt:0000000000001370 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001370
.plt:0000000000001370 ; Attributes: thunk
.plt:0000000000001370
.plt:0000000000001370 ; int memcmp(const void *s1, const void *s2, size_t n)
.plt:0000000000001370 _memcmp         proc near               ; CODE XREF: quotearg_buffer_restyled+19A↓p
.plt:0000000000001370                 jmp     cs:memcmp_ptr
.plt:0000000000001370 _memcmp         endp
.plt:0000000000001370
.plt:0000000000001376 ; ---------------------------------------------------------------------------
.plt:0000000000001376                 push    13h
.plt:000000000000137B                 jmp     sub_1230
.plt:0000000000001380
.plt:0000000000001380 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001380
.plt:0000000000001380 ; Attributes: thunk
.plt:0000000000001380
.plt:0000000000001380 ; int fputs_unlocked(const char *s, FILE *stream)
.plt:0000000000001380 _fputs_unlocked proc near               ; CODE XREF: usage+9D↓p
.plt:0000000000001380                                         ; usage+C2↓p ...
.plt:0000000000001380                 jmp     cs:fputs_unlocked_ptr
.plt:0000000000001380 _fputs_unlocked endp
.plt:0000000000001380
.plt:0000000000001386 ; ---------------------------------------------------------------------------
.plt:0000000000001386                 push    14h
.plt:000000000000138B                 jmp     sub_1230
.plt:0000000000001390
.plt:0000000000001390 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001390
.plt:0000000000001390 ; Attributes: thunk
.plt:0000000000001390
.plt:0000000000001390 ; void *calloc(size_t nmemb, size_t size)
.plt:0000000000001390 _calloc         proc near               ; CODE XREF: xcalloc+1A↓p
.plt:0000000000001390                 jmp     cs:calloc_ptr
.plt:0000000000001390 _calloc         endp
.plt:0000000000001390
.plt:0000000000001396 ; ---------------------------------------------------------------------------
.plt:0000000000001396                 push    15h
.plt:000000000000139B                 jmp     sub_1230
.plt:00000000000013A0
.plt:00000000000013A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013A0
.plt:00000000000013A0 ; Attributes: thunk
.plt:00000000000013A0
.plt:00000000000013A0 ; void *memcpy(void *dest, const void *src, size_t n)
.plt:00000000000013A0 _memcpy         proc near               ; CODE XREF: xmemdup+23↓j
.plt:00000000000013A0                 jmp     cs:memcpy_ptr
.plt:00000000000013A0 _memcpy         endp
.plt:00000000000013A0
.plt:00000000000013A6 ; ---------------------------------------------------------------------------
.plt:00000000000013A6                 push    16h
.plt:00000000000013AB                 jmp     sub_1230
.plt:00000000000013B0
.plt:00000000000013B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013B0
.plt:00000000000013B0 ; Attributes: thunk
.plt:00000000000013B0
.plt:00000000000013B0 ; int fileno(FILE *stream)
.plt:00000000000013B0 _fileno         proc near               ; CODE XREF: rpl_fclose+7↓p
.plt:00000000000013B0                                         ; rpl_fclose+4B↓p ...
.plt:00000000000013B0                 jmp     cs:fileno_ptr
.plt:00000000000013B0 _fileno         endp
.plt:00000000000013B0
.plt:00000000000013B6 ; ---------------------------------------------------------------------------
.plt:00000000000013B6                 push    17h
.plt:00000000000013BB                 jmp     sub_1230
.plt:00000000000013C0
.plt:00000000000013C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013C0
.plt:00000000000013C0 ; Attributes: thunk
.plt:00000000000013C0
.plt:00000000000013C0 ; void *malloc(size_t size)
.plt:00000000000013C0 _malloc         proc near               ; CODE XREF: xmalloc+4↓p
.plt:00000000000013C0                 jmp     cs:malloc_ptr
.plt:00000000000013C0 _malloc         endp
.plt:00000000000013C0
.plt:00000000000013C6 ; ---------------------------------------------------------------------------
.plt:00000000000013C6                 push    18h
.plt:00000000000013CB                 jmp     sub_1230
.plt:00000000000013D0
.plt:00000000000013D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013D0
.plt:00000000000013D0 ; Attributes: thunk
.plt:00000000000013D0
.plt:00000000000013D0 ; int fflush(FILE *stream)
.plt:00000000000013D0 _fflush         proc near               ; CODE XREF: rpl_fflush+1E↓j
.plt:00000000000013D0                                         ; rpl_fflush+3B↓j
.plt:00000000000013D0                 jmp     cs:fflush_ptr
.plt:00000000000013D0 _fflush         endp
.plt:00000000000013D0
.plt:00000000000013D6 ; ---------------------------------------------------------------------------
.plt:00000000000013D6                 push    19h
.plt:00000000000013DB                 jmp     sub_1230
.plt:00000000000013E0
.plt:00000000000013E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013E0
.plt:00000000000013E0 ; Attributes: thunk
.plt:00000000000013E0
.plt:00000000000013E0 ; char *nl_langinfo(nl_item item)
.plt:00000000000013E0 _nl_langinfo    proc near               ; CODE XREF: locale_charset+9↓p
.plt:00000000000013E0                 jmp     cs:nl_langinfo_ptr
.plt:00000000000013E0 _nl_langinfo    endp
.plt:00000000000013E0
.plt:00000000000013E6 ; ---------------------------------------------------------------------------
.plt:00000000000013E6                 push    1Ah
.plt:00000000000013EB                 jmp     sub_1230
.plt:00000000000013F0
.plt:00000000000013F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013F0
.plt:00000000000013F0 ; Attributes: thunk
.plt:00000000000013F0
.plt:00000000000013F0 ; int __freading(FILE *fp)
.plt:00000000000013F0 ___freading     proc near               ; CODE XREF: rpl_fclose+13↓p
.plt:00000000000013F0                                         ; rpl_fflush+9↓p
.plt:00000000000013F0                 jmp     cs:__freading_ptr
.plt:00000000000013F0 ___freading     endp
.plt:00000000000013F0
.plt:00000000000013F6 ; ---------------------------------------------------------------------------
.plt:00000000000013F6                 push    1Bh
.plt:00000000000013FB                 jmp     sub_1230
.plt:0000000000001400
.plt:0000000000001400 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001400
.plt:0000000000001400 ; Attributes: thunk
.plt:0000000000001400
.plt:0000000000001400 ; void *realloc(void *ptr, size_t size)
.plt:0000000000001400 _realloc        proc near               ; CODE XREF: xrealloc+11↓p
.plt:0000000000001400                 jmp     cs:realloc_ptr
.plt:0000000000001400 _realloc        endp
.plt:0000000000001400
.plt:0000000000001406 ; ---------------------------------------------------------------------------
.plt:0000000000001406                 push    1Ch
.plt:000000000000140B                 jmp     sub_1230
.plt:0000000000001410
.plt:0000000000001410 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001410
.plt:0000000000001410 ; Attributes: thunk
.plt:0000000000001410
.plt:0000000000001410 ; char *setlocale(int category, const char *locale)
.plt:0000000000001410 _setlocale      proc near               ; CODE XREF: main+2A↓p
.plt:0000000000001410                                         ; usage+213↓p ...
.plt:0000000000001410                 jmp     cs:setlocale_ptr
.plt:0000000000001410 _setlocale      endp
.plt:0000000000001410
.plt:0000000000001416 ; ---------------------------------------------------------------------------
.plt:0000000000001416                 push    1Dh
.plt:000000000000141B                 jmp     sub_1230
.plt:0000000000001420
.plt:0000000000001420 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001420
.plt:0000000000001420 ; Attributes: thunk
.plt:0000000000001420
.plt:0000000000001420 ___printf_chk   proc near               ; CODE XREF: main+123↓p
.plt:0000000000001420                                         ; main+1F5↓p ...
.plt:0000000000001420                 jmp     cs:__printf_chk_ptr
.plt:0000000000001420 ___printf_chk   endp
.plt:0000000000001420
.plt:0000000000001426 ; ---------------------------------------------------------------------------
.plt:0000000000001426                 push    1Eh
.plt:000000000000142B                 jmp     sub_1230
.plt:0000000000001430
.plt:0000000000001430 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001430
.plt:0000000000001430 ; Attributes: thunk
.plt:0000000000001430
.plt:0000000000001430 ; void error(int status, int errnum, const char *format, ...)
.plt:0000000000001430 _error          proc near               ; CODE XREF: close_stdout+7D↓p
.plt:0000000000001430                                         ; close_stdout+9D↓p ...
.plt:0000000000001430                 jmp     cs:error_ptr
.plt:0000000000001430 _error          endp
.plt:0000000000001430
.plt:0000000000001436 ; ---------------------------------------------------------------------------
.plt:0000000000001436                 push    1Fh
.plt:000000000000143B                 jmp     sub_1230
.plt:0000000000001440
.plt:0000000000001440 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001440
.plt:0000000000001440 ; Attributes: thunk
.plt:0000000000001440
.plt:0000000000001440 ; int fseeko(FILE *stream, __off_t off, int whence)
.plt:0000000000001440 _fseeko         proc near               ; CODE XREF: rpl_fseeko:loc_448A↓j
.plt:0000000000001440                 jmp     cs:fseeko_ptr
.plt:0000000000001440 _fseeko         endp
.plt:0000000000001440
.plt:0000000000001446 ; ---------------------------------------------------------------------------
.plt:0000000000001446                 push    20h ; ' '
.plt:000000000000144B                 jmp     sub_1230
.plt:0000000000001450
.plt:0000000000001450 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001450
.plt:0000000000001450 ; Attributes: thunk
.plt:0000000000001450
.plt:0000000000001450 ; int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
.plt:0000000000001450 ___cxa_atexit   proc near               ; CODE XREF: atexit+9↓j
.plt:0000000000001450                 jmp     cs:__cxa_atexit_ptr
.plt:0000000000001450 ___cxa_atexit   endp
.plt:0000000000001450
.plt:0000000000001456 ; ---------------------------------------------------------------------------
.plt:0000000000001456                 push    21h ; '!'
.plt:000000000000145B                 jmp     sub_1230
.plt:0000000000001460
.plt:0000000000001460 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001460
.plt:0000000000001460 ; Attributes: noreturn thunk
.plt:0000000000001460
.plt:0000000000001460 ; void __noreturn exit(int status)
.plt:0000000000001460 _exit           proc near               ; CODE XREF: main+E9↓p
.plt:0000000000001460                                         ; usage+58↓p
.plt:0000000000001460                 jmp     cs:exit_ptr
.plt:0000000000001460 _exit           endp
.plt:0000000000001460
.plt:0000000000001466 ; ---------------------------------------------------------------------------
.plt:0000000000001466                 push    22h ; '"'
.plt:000000000000146B                 jmp     sub_1230
.plt:0000000000001470
.plt:0000000000001470 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001470
.plt:0000000000001470 ; Attributes: thunk
.plt:0000000000001470
.plt:0000000000001470 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
.plt:0000000000001470 _fwrite         proc near               ; CODE XREF: set_program_name+95↓p
.plt:0000000000001470                 jmp     cs:fwrite_ptr
.plt:0000000000001470 _fwrite         endp
.plt:0000000000001470
.plt:0000000000001476 ; ---------------------------------------------------------------------------
.plt:0000000000001476                 push    23h ; '#'
.plt:000000000000147B                 jmp     sub_1230
.plt:0000000000001480
.plt:0000000000001480 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001480
.plt:0000000000001480 ; Attributes: thunk
.plt:0000000000001480
.plt:0000000000001480 ___fprintf_chk  proc near               ; CODE XREF: usage+51↓p
.plt:0000000000001480                                         ; version_etc_arn+37↓p ...
.plt:0000000000001480                 jmp     cs:__fprintf_chk_ptr
.plt:0000000000001480 ___fprintf_chk  endp
.plt:0000000000001480
.plt:0000000000001486 ; ---------------------------------------------------------------------------
.plt:0000000000001486                 push    24h ; '$'
.plt:000000000000148B                 jmp     sub_1230
.plt:0000000000001490
.plt:0000000000001490 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001490
.plt:0000000000001490 ; Attributes: thunk
.plt:0000000000001490
.plt:0000000000001490 ; int mbsinit(const mbstate_t *ps)
.plt:0000000000001490 _mbsinit        proc near               ; CODE XREF: quotearg_buffer_restyled+9A8↓p
.plt:0000000000001490                 jmp     cs:mbsinit_ptr
.plt:0000000000001490 _mbsinit        endp
.plt:0000000000001490
.plt:0000000000001496 ; ---------------------------------------------------------------------------
.plt:0000000000001496                 push    25h ; '%'
.plt:000000000000149B                 jmp     sub_1230
.plt:00000000000014A0
.plt:00000000000014A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014A0
.plt:00000000000014A0 ; Attributes: thunk
.plt:00000000000014A0
.plt:00000000000014A0 ; int iswprint(wint_t wc)
.plt:00000000000014A0 _iswprint       proc near               ; CODE XREF: quotearg_buffer_restyled+990↓p
.plt:00000000000014A0                 jmp     cs:iswprint_ptr
.plt:00000000000014A0 _iswprint       endp
.plt:00000000000014A0
.plt:00000000000014A6 ; ---------------------------------------------------------------------------
.plt:00000000000014A6                 push    26h ; '&'
.plt:00000000000014AB                 jmp     sub_1230
.plt:00000000000014B0
.plt:00000000000014B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014B0
.plt:00000000000014B0 ; Attributes: thunk
.plt:00000000000014B0
.plt:00000000000014B0 ; const unsigned __int16 **__ctype_b_loc(void)
.plt:00000000000014B0 ___ctype_b_loc  proc near               ; CODE XREF: quotearg_buffer_restyled+513↓p
.plt:00000000000014B0                 jmp     cs:__ctype_b_loc_ptr
.plt:00000000000014B0 ___ctype_b_loc  endp
.plt:00000000000014B0
.plt:00000000000014B6 ; ---------------------------------------------------------------------------
.plt:00000000000014B6                 push    27h ; '''
.plt:00000000000014BB                 jmp     sub_1230
.plt:00000000000014BB ; } // starts at 1230
.plt:00000000000014BB _plt            ends
.plt:00000000000014BB
.plt.got:00000000000014C0 ; ===========================================================================
.plt.got:00000000000014C0
.plt.got:00000000000014C0 ; Segment type: Pure code
.plt.got:00000000000014C0 ; Segment permissions: Read/Execute
.plt.got:00000000000014C0 _plt_got        segment qword public 'CODE' use64
.plt.got:00000000000014C0                 assume cs:_plt_got
.plt.got:00000000000014C0                 ;org 14C0h
.plt.got:00000000000014C0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:00000000000014C0
.plt.got:00000000000014C0 ; =============== S U B R O U T I N E =======================================
.plt.got:00000000000014C0
.plt.got:00000000000014C0 ; Attributes: thunk
.plt.got:00000000000014C0
.plt.got:00000000000014C0 ; int __fastcall _cxa_finalize(void *)
.plt.got:00000000000014C0 __cxa_finalize  proc near               ; CODE XREF: __do_global_dtors_aux+1E↓p
.plt.got:00000000000014C0 ; __unwind {
.plt.got:00000000000014C0                 jmp     cs:__cxa_finalize_ptr
.plt.got:00000000000014C0 __cxa_finalize  endp
.plt.got:00000000000014C0
.plt.got:00000000000014C0 ; ---------------------------------------------------------------------------
.plt.got:00000000000014C6                 align 8
.plt.got:00000000000014C6 ; } // starts at 14C0
.plt.got:00000000000014C6 _plt_got        ends
.plt.got:00000000000014C6
LOAD:00000000000014C8 ; ===========================================================================
LOAD:00000000000014C8
LOAD:00000000000014C8 ; Segment type: Pure code
LOAD:00000000000014C8 ; Segment permissions: Read/Execute
LOAD:00000000000014C8 LOAD            segment byte public 'CODE' use64
LOAD:00000000000014C8                 assume cs:LOAD
LOAD:00000000000014C8                 ;org 14C8h
LOAD:00000000000014C8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000014C8                 align 10h
LOAD:00000000000014C8 LOAD            ends
LOAD:00000000000014C8
.text:00000000000014D0 ; ===========================================================================
.text:00000000000014D0
.text:00000000000014D0 ; Segment type: Pure code
.text:00000000000014D0 ; Segment permissions: Read/Execute
.text:00000000000014D0 _text           segment para public 'CODE' use64
.text:00000000000014D0                 assume cs:_text
.text:00000000000014D0                 ;org 14D0h
.text:00000000000014D0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00000000000014D0
.text:00000000000014D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000014D0
.text:00000000000014D0
.text:00000000000014D0 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:00000000000014D0                 public main
.text:00000000000014D0 main            proc near               ; DATA XREF: start+1D↓o
.text:00000000000014D0 ; __unwind {
.text:00000000000014D0                 push    r15
.text:00000000000014D2                 push    r14
.text:00000000000014D4                 push    r13
.text:00000000000014D6                 push    r12
.text:00000000000014D8                 xor     r12d, r12d
.text:00000000000014DB                 push    rbp
.text:00000000000014DC                 push    rbx
.text:00000000000014DD                 mov     ebp, edi
.text:00000000000014DF                 mov     rbx, rsi
.text:00000000000014E2                 sub     rsp, 8
.text:00000000000014E6                 mov     rdi, [rsi]
.text:00000000000014E9                 call    set_program_name
.text:00000000000014EE                 lea     rsi, aWrittenBySSAnd+1Bh ; locale
.text:00000000000014F5                 mov     edi, 6          ; category
.text:00000000000014FA                 call    _setlocale
.text:00000000000014FF                 lea     rsi, dirname    ; "/usr/local/share/locale"
.text:0000000000001506                 lea     rdi, domainname ; "coreutils"
.text:000000000000150D                 call    _bindtextdomain
.text:0000000000001512                 lea     rdi, domainname ; "coreutils"
.text:0000000000001519                 call    _textdomain
.text:000000000000151E                 lea     rdi, close_stdout
.text:0000000000001525                 mov     cs:exit_failure, 2
.text:000000000000152F                 call    atexit
.text:0000000000001534
.text:0000000000001534 loc_1534:                               ; CODE XREF: main+98↓j
.text:0000000000001534                 lea     rcx, longopts   ; longopts
.text:000000000000153B                 lea     rdx, shortopts  ; "+iu:0"
.text:0000000000001542                 xor     r8d, r8d        ; longind
.text:0000000000001545                 mov     rsi, rbx        ; argv
.text:0000000000001548                 mov     edi, ebp        ; argc
.text:000000000000154A                 call    _getopt_long
.text:000000000000154F                 cmp     eax, 0FFFFFFFFh
.text:0000000000001552                 jz      short loc_15BE
.text:0000000000001554                 cmp     eax, 0FFFFFF7Eh
.text:0000000000001559                 mov     r12d, 1
.text:000000000000155F                 jz      loc_16D2
.text:0000000000001565                 cmp     eax, 30h ; '0'
.text:0000000000001568                 jz      short loc_1534
.text:000000000000156A                 cmp     eax, 0FFFFFF7Dh
.text:000000000000156F                 jz      short loc_1580
.text:0000000000001571                 mov     edi, 2          ; status
.text:0000000000001576                 call    usage
.text:0000000000001576 ; ---------------------------------------------------------------------------
.text:000000000000157B                 align 20h
.text:0000000000001580
.text:0000000000001580 loc_1580:                               ; CODE XREF: main+9F↑j
.text:0000000000001580                 sub     rsp, 8
.text:0000000000001584                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:000000000000158B                 mov     rcx, cs:Version
.text:0000000000001592                 push    0
.text:0000000000001594                 lea     r9, aRichardMlynari ; "Richard Mlynarik"
.text:000000000000159B                 lea     r8, aDavidMackenzie ; "David MacKenzie"
.text:00000000000015A2                 lea     rdx, unk_4603
.text:00000000000015A9                 lea     rsi, aPrintenv  ; "printenv"
.text:00000000000015B0                 xor     eax, eax
.text:00000000000015B2                 call    version_etc
.text:00000000000015B7                 xor     edi, edi        ; status
.text:00000000000015B9                 call    _exit
.text:00000000000015BE ; ---------------------------------------------------------------------------
.text:00000000000015BE
.text:00000000000015BE loc_15BE:                               ; CODE XREF: main+82↑j
.text:00000000000015BE                 movsxd  r15, cs:optind@@GLIBC_2_2_5
.text:00000000000015C5                 cmp     r15d, ebp
.text:00000000000015C8                 jl      short loc_1617
.text:00000000000015CA                 cmp     r12b, 1
.text:00000000000015CE                 mov     rbx, cs:environ@@GLIBC_2_2_5
.text:00000000000015D5                 lea     r12, aSC        ; "%s%c"
.text:00000000000015DC                 sbb     ebp, ebp
.text:00000000000015DE                 and     ebp, 0Ah
.text:00000000000015E1                 jmp     short loc_15F8
.text:00000000000015E3 ; ---------------------------------------------------------------------------
.text:00000000000015E3
.text:00000000000015E3 loc_15E3:                               ; CODE XREF: main+12E↓j
.text:00000000000015E3                 mov     ecx, ebp
.text:00000000000015E5                 mov     rsi, r12
.text:00000000000015E8                 mov     edi, 1
.text:00000000000015ED                 xor     eax, eax
.text:00000000000015EF                 add     rbx, 8
.text:00000000000015F3                 call    ___printf_chk
.text:00000000000015F8
.text:00000000000015F8 loc_15F8:                               ; CODE XREF: main+111↑j
.text:00000000000015F8                 mov     rdx, [rbx]
.text:00000000000015FB                 test    rdx, rdx
.text:00000000000015FE                 jnz     short loc_15E3
.text:0000000000001600                 mov     eax, 1
.text:0000000000001605
.text:0000000000001605 loc_1605:                               ; CODE XREF: main+1DB↓j
.text:0000000000001605                 xor     eax, 1
.text:0000000000001608                 pop     rdx
.text:0000000000001609                 movzx   eax, al
.text:000000000000160C                 pop     rbx
.text:000000000000160D                 pop     rbp
.text:000000000000160E                 pop     r12
.text:0000000000001610                 pop     r13
.text:0000000000001612                 pop     r14
.text:0000000000001614                 pop     r15
.text:0000000000001616                 retn
.text:0000000000001617 ; ---------------------------------------------------------------------------
.text:0000000000001617
.text:0000000000001617 loc_1617:                               ; CODE XREF: main+F8↑j
.text:0000000000001617                 cmp     r12b, 1
.text:000000000000161B                 sbb     r13d, r13d
.text:000000000000161E                 xor     r12d, r12d
.text:0000000000001621                 and     r13d, 0Ah
.text:0000000000001625                 jmp     short loc_1630
.text:0000000000001627 ; ---------------------------------------------------------------------------
.text:0000000000001627
.text:0000000000001627 loc_1627:                               ; CODE XREF: main+171↓j
.text:0000000000001627                                         ; main+1CD↓j
.text:0000000000001627                 add     r15, 1
.text:000000000000162B                 cmp     ebp, r15d
.text:000000000000162E                 jle     short loc_169F
.text:0000000000001630
.text:0000000000001630 loc_1630:                               ; CODE XREF: main+155↑j
.text:0000000000001630                 mov     rdi, [rbx+r15*8] ; s
.text:0000000000001634                 mov     esi, 3Dh ; '='  ; c
.text:0000000000001639                 call    _strchr
.text:000000000000163E                 test    rax, rax
.text:0000000000001641                 jnz     short loc_1627
.text:0000000000001643                 mov     r14, cs:environ@@GLIBC_2_2_5
.text:000000000000164A                 xor     r9d, r9d
.text:000000000000164D
.text:000000000000164D loc_164D:                               ; CODE XREF: main+1C8↓j
.text:000000000000164D                 mov     rcx, [r14]
.text:0000000000001650                 test    rcx, rcx
.text:0000000000001653                 jz      short loc_169A
.text:0000000000001655                 mov     rdx, [rbx+r15*8]
.text:0000000000001659                 movzx   eax, byte ptr [rcx]
.text:000000000000165C                 jmp     short loc_1663
.text:000000000000165C ; ---------------------------------------------------------------------------
.text:000000000000165E                 align 20h
.text:0000000000001660
.text:0000000000001660 loc_1660:                               ; CODE XREF: main+1B2↓j
.text:0000000000001660                 mov     rcx, rdi
.text:0000000000001663
.text:0000000000001663 loc_1663:                               ; CODE XREF: main+18C↑j
.text:0000000000001663                 test    al, al
.text:0000000000001665                 jz      short loc_1694
.text:0000000000001667                 movzx   esi, byte ptr [rdx]
.text:000000000000166A                 test    sil, sil
.text:000000000000166D                 jz      short loc_1694
.text:000000000000166F
.text:000000000000166F loc_166F:                               ; CODE XREF: main+1C2↓j
.text:000000000000166F                 add     rdx, 1
.text:0000000000001673                 cmp     sil, al
.text:0000000000001676                 lea     rdi, [rcx+1]
.text:000000000000167A                 jnz     short loc_1694
.text:000000000000167C                 movzx   eax, byte ptr [rcx+1]
.text:0000000000001680                 cmp     al, 3Dh ; '='
.text:0000000000001682                 jnz     short loc_1660
.text:0000000000001684                 cmp     byte ptr [rdx], 0
.text:0000000000001687                 jz      short loc_16B0
.text:0000000000001689                 movzx   esi, byte ptr [rdx]
.text:000000000000168C                 mov     rcx, rdi
.text:000000000000168F                 test    sil, sil
.text:0000000000001692                 jnz     short loc_166F
.text:0000000000001694
.text:0000000000001694 loc_1694:                               ; CODE XREF: main+195↑j
.text:0000000000001694                                         ; main+19D↑j ...
.text:0000000000001694                 add     r14, 8
.text:0000000000001698                 jmp     short loc_164D
.text:000000000000169A ; ---------------------------------------------------------------------------
.text:000000000000169A
.text:000000000000169A loc_169A:                               ; CODE XREF: main+183↑j
.text:000000000000169A                 add     r12d, r9d
.text:000000000000169D                 jmp     short loc_1627
.text:000000000000169F ; ---------------------------------------------------------------------------
.text:000000000000169F
.text:000000000000169F loc_169F:                               ; CODE XREF: main+15E↑j
.text:000000000000169F                 sub     ebp, cs:optind@@GLIBC_2_2_5
.text:00000000000016A5                 cmp     ebp, r12d
.text:00000000000016A8                 setz    al
.text:00000000000016AB                 jmp     loc_1605
.text:00000000000016B0 ; ---------------------------------------------------------------------------
.text:00000000000016B0
.text:00000000000016B0 loc_16B0:                               ; CODE XREF: main+1B7↑j
.text:00000000000016B0                 lea     rdx, [rcx+2]
.text:00000000000016B4                 lea     rsi, aSC        ; "%s%c"
.text:00000000000016BB                 mov     ecx, r13d
.text:00000000000016BE                 mov     edi, 1
.text:00000000000016C3                 xor     eax, eax
.text:00000000000016C5                 call    ___printf_chk
.text:00000000000016CA                 mov     r9d, 1
.text:00000000000016D0                 jmp     short loc_1694
.text:00000000000016D2 ; ---------------------------------------------------------------------------
.text:00000000000016D2
.text:00000000000016D2 loc_16D2:                               ; CODE XREF: main+8F↑j
.text:00000000000016D2                 xor     edi, edi        ; status
.text:00000000000016D4                 call    usage
.text:00000000000016D4 ; } // starts at 14D0
.text:00000000000016D4 main            endp
.text:00000000000016D4
.text:00000000000016D4 ; ---------------------------------------------------------------------------
.text:00000000000016D9                 align 20h
.text:00000000000016E0
.text:00000000000016E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000016E0
.text:00000000000016E0 ; Attributes: noreturn fuzzy-sp info_from_lumina
.text:00000000000016E0
.text:00000000000016E0 ; void __fastcall __noreturn start(__int64, __int64, void (*)(void))
.text:00000000000016E0                 public start
.text:00000000000016E0 start           proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:00000000000016E0 ; __unwind {
.text:00000000000016E0                 xor     ebp, ebp
.text:00000000000016E2                 mov     r9, rdx         ; rtld_fini
.text:00000000000016E5                 pop     rsi             ; argc
.text:00000000000016E6                 mov     rdx, rsp        ; ubp_av
.text:00000000000016E9                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:00000000000016ED                 push    rax
.text:00000000000016EE                 push    rsp             ; stack_end
.text:00000000000016EF                 lea     r8, __libc_csu_fini ; fini
.text:00000000000016F6                 lea     rcx, __libc_csu_init ; init
.text:00000000000016FD                 lea     rdi, main       ; main
.text:0000000000001704                 call    cs:__libc_start_main_ptr
.text:000000000000170A                 hlt
.text:000000000000170A ; } // starts at 16E0
.text:000000000000170A start           endp
.text:000000000000170A
.text:000000000000170A ; ---------------------------------------------------------------------------
.text:000000000000170B                 align 10h
.text:0000000000001710
.text:0000000000001710 ; =============== S U B R O U T I N E =======================================
.text:0000000000001710
.text:0000000000001710 ; Attributes: bp-based frame info_from_lumina
.text:0000000000001710
.text:0000000000001710 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_17C3↓p
.text:0000000000001710                 lea     rdi, __bss_start
.text:0000000000001717                 push    rbp
.text:0000000000001718                 lea     rax, __bss_start
.text:000000000000171F                 cmp     rax, rdi
.text:0000000000001722                 mov     rbp, rsp
.text:0000000000001725                 jz      short loc_1740
.text:0000000000001727                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:000000000000172E                 test    rax, rax
.text:0000000000001731                 jz      short loc_1740
.text:0000000000001733                 pop     rbp
.text:0000000000001734                 jmp     rax
.text:0000000000001734 ; ---------------------------------------------------------------------------
.text:0000000000001736                 align 20h
.text:0000000000001740
.text:0000000000001740 loc_1740:                               ; CODE XREF: deregister_tm_clones+15↑j
.text:0000000000001740                                         ; deregister_tm_clones+21↑j
.text:0000000000001740                 pop     rbp
.text:0000000000001741                 retn
.text:0000000000001741 deregister_tm_clones endp
.text:0000000000001741
.text:0000000000001741 ; ---------------------------------------------------------------------------
.text:0000000000001742                 align 10h
.text:0000000000001750
.text:0000000000001750 ; =============== S U B R O U T I N E =======================================
.text:0000000000001750
.text:0000000000001750 ; Attributes: bp-based frame info_from_lumina
.text:0000000000001750
.text:0000000000001750 register_tm_clones proc near            ; CODE XREF: frame_dummy+5↓j
.text:0000000000001750                 lea     rdi, __bss_start
.text:0000000000001757                 lea     rsi, __bss_start
.text:000000000000175E                 push    rbp
.text:000000000000175F                 sub     rsi, rdi
.text:0000000000001762                 mov     rbp, rsp
.text:0000000000001765                 sar     rsi, 3
.text:0000000000001769                 mov     rax, rsi
.text:000000000000176C                 shr     rax, 3Fh
.text:0000000000001770                 add     rsi, rax
.text:0000000000001773                 sar     rsi, 1
.text:0000000000001776                 jz      short loc_1790
.text:0000000000001778                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:000000000000177F                 test    rax, rax
.text:0000000000001782                 jz      short loc_1790
.text:0000000000001784                 pop     rbp
.text:0000000000001785                 jmp     rax
.text:0000000000001785 ; ---------------------------------------------------------------------------
.text:0000000000001787                 align 10h
.text:0000000000001790
.text:0000000000001790 loc_1790:                               ; CODE XREF: register_tm_clones+26↑j
.text:0000000000001790                                         ; register_tm_clones+32↑j
.text:0000000000001790                 pop     rbp
.text:0000000000001791                 retn
.text:0000000000001791 register_tm_clones endp
.text:0000000000001791
.text:0000000000001791 ; ---------------------------------------------------------------------------
.text:0000000000001792                 align 20h
.text:00000000000017A0
.text:00000000000017A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000017A0
.text:00000000000017A0 ; Attributes: info_from_lumina
.text:00000000000017A0
.text:00000000000017A0 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:00000000000017A0                 cmp     cs:completed_7697, 0
.text:00000000000017A7                 jnz     short locret_17D8
.text:00000000000017A9                 cmp     cs:__cxa_finalize_ptr, 0
.text:00000000000017B1                 push    rbp
.text:00000000000017B2                 mov     rbp, rsp
.text:00000000000017B5                 jz      short loc_17C3
.text:00000000000017B7                 mov     rdi, cs:__dso_handle ; void *
.text:00000000000017BE                 call    __cxa_finalize
.text:00000000000017C3
.text:00000000000017C3 loc_17C3:                               ; CODE XREF: __do_global_dtors_aux+15↑j
.text:00000000000017C3                 call    deregister_tm_clones
.text:00000000000017C8                 mov     cs:completed_7697, 1
.text:00000000000017CF                 pop     rbp
.text:00000000000017D0                 retn
.text:00000000000017D0 ; ---------------------------------------------------------------------------
.text:00000000000017D1                 align 8
.text:00000000000017D8
.text:00000000000017D8 locret_17D8:                            ; CODE XREF: __do_global_dtors_aux+7↑j
.text:00000000000017D8                 rep retn
.text:00000000000017D8 __do_global_dtors_aux endp
.text:00000000000017D8
.text:00000000000017D8 ; ---------------------------------------------------------------------------
.text:00000000000017DA                 align 20h
.text:00000000000017E0
.text:00000000000017E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000017E0
.text:00000000000017E0 ; Attributes: bp-based frame
.text:00000000000017E0
.text:00000000000017E0 frame_dummy     proc near               ; CODE XREF: __libc_csu_init+49↓p
.text:00000000000017E0                                         ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:00000000000017E0                 push    rbp
.text:00000000000017E1                 mov     rbp, rsp
.text:00000000000017E4                 pop     rbp
.text:00000000000017E5                 jmp     register_tm_clones
.text:00000000000017E5 frame_dummy     endp
.text:00000000000017E5
.text:00000000000017E5 ; ---------------------------------------------------------------------------
.text:00000000000017EA                 align 10h
.text:00000000000017F0
.text:00000000000017F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000017F0
.text:00000000000017F0 ; Attributes: noreturn
.text:00000000000017F0
.text:00000000000017F0 ; void __fastcall __noreturn usage(int status)
.text:00000000000017F0                 public usage
.text:00000000000017F0 usage           proc near               ; CODE XREF: main+A6↑p
.text:00000000000017F0                                         ; main+204↑p
.text:00000000000017F0
.text:00000000000017F0 var_A8          = qword ptr -0A8h
.text:00000000000017F0 var_A0          = qword ptr -0A0h
.text:00000000000017F0 var_98          = qword ptr -98h
.text:00000000000017F0 var_90          = qword ptr -90h
.text:00000000000017F0 var_88          = qword ptr -88h
.text:00000000000017F0 var_80          = qword ptr -80h
.text:00000000000017F0 var_78          = qword ptr -78h
.text:00000000000017F0 var_70          = qword ptr -70h
.text:00000000000017F0 var_68          = qword ptr -68h
.text:00000000000017F0 var_60          = qword ptr -60h
.text:00000000000017F0 var_58          = qword ptr -58h
.text:00000000000017F0 var_50          = qword ptr -50h
.text:00000000000017F0 var_48          = qword ptr -48h
.text:00000000000017F0 var_40          = qword ptr -40h
.text:00000000000017F0 var_30          = qword ptr -30h
.text:00000000000017F0
.text:00000000000017F0 ; __unwind {
.text:00000000000017F0                 push    r13
.text:00000000000017F2                 push    r12
.text:00000000000017F4                 mov     edx, 5          ; category
.text:00000000000017F9                 push    rbp
.text:00000000000017FA                 push    rbx
.text:00000000000017FB                 mov     ebp, edi
.text:00000000000017FD                 sub     rsp, 88h
.text:0000000000001804                 mov     rbx, cs:program_name
.text:000000000000180B                 mov     rax, fs:28h
.text:0000000000001814                 mov     [rsp+0A8h+var_30], rax
.text:0000000000001819                 xor     eax, eax
.text:000000000000181B                 test    edi, edi
.text:000000000000181D                 jz      short loc_184D
.text:000000000000181F                 lea     rsi, msgid      ; "Try '%s --help' for more information.\n"
.text:0000000000001826                 xor     edi, edi        ; domainname
.text:0000000000001828                 call    _dcgettext
.text:000000000000182D                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000001834                 mov     rdx, rax
.text:0000000000001837                 mov     rcx, rbx
.text:000000000000183A                 mov     esi, 1
.text:000000000000183F                 xor     eax, eax
.text:0000000000001841                 call    ___fprintf_chk
.text:0000000000001846
.text:0000000000001846 loc_1846:                               ; CODE XREF: usage+2A6↓j
.text:0000000000001846                 mov     edi, ebp        ; status
.text:0000000000001848                 call    _exit
.text:000000000000184D ; ---------------------------------------------------------------------------
.text:000000000000184D
.text:000000000000184D loc_184D:                               ; CODE XREF: usage+2D↑j
.text:000000000000184D                 lea     rsi, aUsageSOptionVa ; "Usage: %s [OPTION]... [VARIABLE]...\nPr"...
.text:0000000000001854                 xor     edi, edi        ; domainname
.text:0000000000001856                 call    _dcgettext
.text:000000000000185B                 mov     rdx, rbx
.text:000000000000185E                 mov     rsi, rax
.text:0000000000001861                 mov     edi, 1
.text:0000000000001866                 xor     eax, eax
.text:0000000000001868                 call    ___printf_chk
.text:000000000000186D                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001874                 lea     rsi, a0NullEndEachOu ; "  -0, --null     end each output line w"...
.text:000000000000187B                 mov     edx, 5          ; category
.text:0000000000001880                 xor     edi, edi        ; domainname
.text:0000000000001882                 call    _dcgettext
.text:0000000000001887                 mov     rsi, rbx        ; stream
.text:000000000000188A                 mov     rdi, rax        ; s
.text:000000000000188D                 call    _fputs_unlocked
.text:0000000000001892                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001899                 lea     rsi, aHelpDisplayThi ; "      --help     display this help and "...
.text:00000000000018A0                 mov     edx, 5          ; category
.text:00000000000018A5                 xor     edi, edi        ; domainname
.text:00000000000018A7                 call    _dcgettext
.text:00000000000018AC                 mov     rsi, rbx        ; stream
.text:00000000000018AF                 mov     rdi, rax        ; s
.text:00000000000018B2                 call    _fputs_unlocked
.text:00000000000018B7                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000018BE                 lea     rsi, aVersionOutputV ; "      --version  output version informa"...
.text:00000000000018C5                 mov     edx, 5          ; category
.text:00000000000018CA                 xor     edi, edi        ; domainname
.text:00000000000018CC                 call    _dcgettext
.text:00000000000018D1                 mov     rsi, rbx        ; stream
.text:00000000000018D4                 mov     rdi, rax        ; s
.text:00000000000018D7                 lea     rbx, aPrintenv  ; "printenv"
.text:00000000000018DE                 call    _fputs_unlocked
.text:00000000000018E3                 lea     rsi, aNoteYourShellM ; "\nNOTE: your shell may have its own ver"...
.text:00000000000018EA                 mov     edx, 5          ; category
.text:00000000000018EF                 xor     edi, edi        ; domainname
.text:00000000000018F1                 call    _dcgettext
.text:00000000000018F6                 lea     rdx, aPrintenv  ; "printenv"
.text:00000000000018FD                 mov     rsi, rax
.text:0000000000001900                 mov     edi, 1
.text:0000000000001905                 xor     eax, eax
.text:0000000000001907                 call    ___printf_chk
.text:000000000000190C                 lea     rax, asc_458D   ; "["
.text:0000000000001913                 lea     rcx, aSha256sum ; "sha256sum"
.text:000000000000191A                 mov     [rsp+0A8h+var_48], 0
.text:0000000000001923                 mov     [rsp+0A8h+var_40], 0
.text:000000000000192C                 mov     rdx, rsp
.text:000000000000192F                 mov     [rsp+0A8h+var_A8], rax
.text:0000000000001933                 lea     rax, aTestInvocation ; "test invocation"
.text:000000000000193A                 mov     [rsp+0A8h+var_78], rcx
.text:000000000000193F                 lea     rcx, aSha384sum ; "sha384sum"
.text:0000000000001946                 mov     [rsp+0A8h+var_A0], rax
.text:000000000000194B                 lea     rax, domainname ; "coreutils"
.text:0000000000001952                 mov     [rsp+0A8h+var_68], rcx
.text:0000000000001957                 lea     rcx, aSha512sum ; "sha512sum"
.text:000000000000195E                 mov     [rsp+0A8h+var_98], rax
.text:0000000000001963                 lea     rax, aMultiCallInvoc ; "Multi-call invocation"
.text:000000000000196A                 mov     [rsp+0A8h+var_58], rcx
.text:000000000000196F                 mov     [rsp+0A8h+var_90], rax
.text:0000000000001974                 lea     rax, aSha224sum ; "sha224sum"
.text:000000000000197B                 mov     [rsp+0A8h+var_88], rax
.text:0000000000001980                 lea     rax, aSha2Utilities ; "sha2 utilities"
.text:0000000000001987                 mov     [rsp+0A8h+var_80], rax
.text:000000000000198C                 mov     [rsp+0A8h+var_70], rax
.text:0000000000001991                 mov     [rsp+0A8h+var_60], rax
.text:0000000000001996                 mov     [rsp+0A8h+var_50], rax
.text:000000000000199B                 nop     dword ptr [rax+rax+00h]
.text:00000000000019A0
.text:00000000000019A0 loc_19A0:                               ; CODE XREF: usage+1CD↓j
.text:00000000000019A0                 add     rdx, 10h
.text:00000000000019A4                 mov     rdi, [rdx]
.text:00000000000019A7                 test    rdi, rdi
.text:00000000000019AA                 jz      short loc_19BF
.text:00000000000019AC                 mov     ecx, 9
.text:00000000000019B1                 mov     rsi, rbx
.text:00000000000019B4                 repe cmpsb
.text:00000000000019B6                 setnbe  al
.text:00000000000019B9                 sbb     al, 0
.text:00000000000019BB                 test    al, al
.text:00000000000019BD                 jnz     short loc_19A0
.text:00000000000019BF
.text:00000000000019BF loc_19BF:                               ; CODE XREF: usage+1BA↑j
.text:00000000000019BF                 mov     r12, [rdx+8]
.text:00000000000019C3                 xor     edi, edi        ; domainname
.text:00000000000019C5                 mov     edx, 5          ; category
.text:00000000000019CA                 lea     rsi, aSOnlineHelpS ; "\n%s online help: <%s>\n"
.text:00000000000019D1                 test    r12, r12
.text:00000000000019D4                 jz      loc_1A9B
.text:00000000000019DA                 call    _dcgettext
.text:00000000000019DF                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000019E6                 lea     rdx, unk_4603
.text:00000000000019ED                 mov     rsi, rax
.text:00000000000019F0                 mov     edi, 1
.text:00000000000019F5                 xor     eax, eax
.text:00000000000019F7                 call    ___printf_chk
.text:00000000000019FC                 xor     esi, esi        ; locale
.text:00000000000019FE                 mov     edi, 5          ; category
.text:0000000000001A03                 call    _setlocale
.text:0000000000001A08                 test    rax, rax
.text:0000000000001A0B                 jz      short loc_1A29
.text:0000000000001A0D                 lea     rsi, s2         ; "en_"
.text:0000000000001A14                 mov     edx, 3          ; n
.text:0000000000001A19                 mov     rdi, rax        ; s1
.text:0000000000001A1C                 call    _strncmp
.text:0000000000001A21                 test    eax, eax
.text:0000000000001A23                 jnz     loc_1B30
.text:0000000000001A29
.text:0000000000001A29 loc_1A29:                               ; CODE XREF: usage+21B↑j
.text:0000000000001A29                                         ; usage+365↓j
.text:0000000000001A29                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000001A30                 xor     edi, edi        ; domainname
.text:0000000000001A32                 mov     edx, 5          ; category
.text:0000000000001A37                 call    _dcgettext
.text:0000000000001A3C                 lea     rcx, aPrintenv  ; "printenv"
.text:0000000000001A43                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000001A4A                 mov     rsi, rax
.text:0000000000001A4D                 mov     edi, 1
.text:0000000000001A52                 xor     eax, eax
.text:0000000000001A54                 call    ___printf_chk
.text:0000000000001A59                 cmp     r12, rbx
.text:0000000000001A5C                 lea     rcx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000001A63                 lea     rbx, aWrittenBySSAnd+1Bh ; ""
.text:0000000000001A6A                 cmovz   rbx, rcx
.text:0000000000001A6E
.text:0000000000001A6E loc_1A6E:                               ; CODE XREF: usage+334↓j
.text:0000000000001A6E                 lea     rsi, aOrAvailableLoc ; "or available locally via: info '(coreut"...
.text:0000000000001A75                 xor     edi, edi        ; domainname
.text:0000000000001A77                 mov     edx, 5          ; category
.text:0000000000001A7C                 call    _dcgettext
.text:0000000000001A81                 mov     rcx, rbx
.text:0000000000001A84                 mov     rsi, rax
.text:0000000000001A87                 mov     rdx, r12
.text:0000000000001A8A                 mov     edi, 1
.text:0000000000001A8F                 xor     eax, eax
.text:0000000000001A91                 call    ___printf_chk
.text:0000000000001A96                 jmp     loc_1846
.text:0000000000001A9B ; ---------------------------------------------------------------------------
.text:0000000000001A9B
.text:0000000000001A9B loc_1A9B:                               ; CODE XREF: usage+1E4↑j
.text:0000000000001A9B                 call    _dcgettext
.text:0000000000001AA0                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000001AA7                 lea     rdx, unk_4603
.text:0000000000001AAE                 mov     rsi, rax
.text:0000000000001AB1                 mov     edi, 1
.text:0000000000001AB6                 xor     eax, eax
.text:0000000000001AB8                 call    ___printf_chk
.text:0000000000001ABD                 xor     esi, esi        ; locale
.text:0000000000001ABF                 mov     edi, 5          ; category
.text:0000000000001AC4                 call    _setlocale
.text:0000000000001AC9                 test    rax, rax
.text:0000000000001ACC                 jz      short loc_1AE6
.text:0000000000001ACE                 lea     rsi, s2         ; "en_"
.text:0000000000001AD5                 mov     edx, 3          ; n
.text:0000000000001ADA                 mov     rdi, rax        ; s1
.text:0000000000001ADD                 call    _strncmp
.text:0000000000001AE2                 test    eax, eax
.text:0000000000001AE4                 jnz     short loc_1B29
.text:0000000000001AE6
.text:0000000000001AE6 loc_1AE6:                               ; CODE XREF: usage+2DC↑j
.text:0000000000001AE6                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000001AED                 mov     edx, 5          ; category
.text:0000000000001AF2                 xor     edi, edi        ; domainname
.text:0000000000001AF4                 lea     r12, aPrintenv  ; "printenv"
.text:0000000000001AFB                 lea     rbx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000001B02                 call    _dcgettext
.text:0000000000001B07                 lea     rcx, aPrintenv  ; "printenv"
.text:0000000000001B0E                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000001B15                 mov     rsi, rax
.text:0000000000001B18                 mov     edi, 1
.text:0000000000001B1D                 xor     eax, eax
.text:0000000000001B1F                 call    ___printf_chk
.text:0000000000001B24                 jmp     loc_1A6E
.text:0000000000001B29 ; ---------------------------------------------------------------------------
.text:0000000000001B29
.text:0000000000001B29 loc_1B29:                               ; CODE XREF: usage+2F4↑j
.text:0000000000001B29                 lea     r12, aPrintenv  ; "printenv"
.text:0000000000001B30
.text:0000000000001B30 loc_1B30:                               ; CODE XREF: usage+233↑j
.text:0000000000001B30                 mov     r13, cs:stdout@@GLIBC_2_2_5
.text:0000000000001B37                 lea     rsi, aReportAnyTrans ; "Report any translation bugs to <https:/"...
.text:0000000000001B3E                 xor     edi, edi        ; domainname
.text:0000000000001B40                 mov     edx, 5          ; category
.text:0000000000001B45                 call    _dcgettext
.text:0000000000001B4A                 mov     rsi, r13        ; stream
.text:0000000000001B4D                 mov     rdi, rax        ; s
.text:0000000000001B50                 call    _fputs_unlocked
.text:0000000000001B55                 jmp     loc_1A29
.text:0000000000001B55 ; } // starts at 17F0
.text:0000000000001B55 usage           endp
.text:0000000000001B55
.text:0000000000001B55 ; ---------------------------------------------------------------------------
.text:0000000000001B5A                 align 20h
.text:0000000000001B60
.text:0000000000001B60 ; =============== S U B R O U T I N E =======================================
.text:0000000000001B60
.text:0000000000001B60
.text:0000000000001B60                 public close_stdout_set_file_name
.text:0000000000001B60 close_stdout_set_file_name proc near
.text:0000000000001B60 ; __unwind {
.text:0000000000001B60                 mov     cs:file_name, rdi
.text:0000000000001B67                 retn
.text:0000000000001B67 ; } // starts at 1B60
.text:0000000000001B67 close_stdout_set_file_name endp
.text:0000000000001B67
.text:0000000000001B67 ; ---------------------------------------------------------------------------
.text:0000000000001B68                 align 10h
.text:0000000000001B70
.text:0000000000001B70 ; =============== S U B R O U T I N E =======================================
.text:0000000000001B70
.text:0000000000001B70
.text:0000000000001B70                 public close_stdout_set_ignore_EPIPE
.text:0000000000001B70 close_stdout_set_ignore_EPIPE proc near
.text:0000000000001B70 ; __unwind {
.text:0000000000001B70                 mov     cs:ignore_EPIPE, dil
.text:0000000000001B77                 retn
.text:0000000000001B77 ; } // starts at 1B70
.text:0000000000001B77 close_stdout_set_ignore_EPIPE endp
.text:0000000000001B77
.text:0000000000001B77 ; ---------------------------------------------------------------------------
.text:0000000000001B78                 align 20h
.text:0000000000001B80
.text:0000000000001B80 ; =============== S U B R O U T I N E =======================================
.text:0000000000001B80
.text:0000000000001B80 ; Attributes: info_from_lumina
.text:0000000000001B80
.text:0000000000001B80 ; void __cdecl close_stdout()
.text:0000000000001B80                 public close_stdout
.text:0000000000001B80 close_stdout    proc near               ; DATA XREF: main+4E↑o
.text:0000000000001B80 ; __unwind {
.text:0000000000001B80                 push    rbp
.text:0000000000001B81                 push    rbx
.text:0000000000001B82                 sub     rsp, 8
.text:0000000000001B86                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000001B8D                 call    close_stream
.text:0000000000001B92                 test    eax, eax
.text:0000000000001B94                 jz      short loc_1BAC
.text:0000000000001B96                 call    ___errno_location
.text:0000000000001B9B                 cmp     cs:ignore_EPIPE, 0
.text:0000000000001BA2                 mov     rbx, rax
.text:0000000000001BA5                 jz      short loc_1BC3
.text:0000000000001BA7                 cmp     dword ptr [rax], 20h ; ' '
.text:0000000000001BAA                 jnz     short loc_1BC3
.text:0000000000001BAC
.text:0000000000001BAC loc_1BAC:                               ; CODE XREF: close_stdout+14↑j
.text:0000000000001BAC                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:0000000000001BB3                 call    close_stream
.text:0000000000001BB8                 test    eax, eax
.text:0000000000001BBA                 jnz     short loc_1C02
.text:0000000000001BBC                 add     rsp, 8
.text:0000000000001BC0                 pop     rbx
.text:0000000000001BC1                 pop     rbp
.text:0000000000001BC2                 retn
.text:0000000000001BC3 ; ---------------------------------------------------------------------------
.text:0000000000001BC3
.text:0000000000001BC3 loc_1BC3:                               ; CODE XREF: close_stdout+25↑j
.text:0000000000001BC3                                         ; close_stdout+2A↑j
.text:0000000000001BC3                 lea     rsi, aWriteError ; "write error"
.text:0000000000001BCA                 xor     edi, edi        ; domainname
.text:0000000000001BCC                 mov     edx, 5          ; category
.text:0000000000001BD1                 call    _dcgettext
.text:0000000000001BD6                 mov     rdi, cs:file_name
.text:0000000000001BDD                 mov     rbp, rax
.text:0000000000001BE0                 test    rdi, rdi
.text:0000000000001BE3                 jz      short loc_1C0D
.text:0000000000001BE5                 call    quotearg_colon
.text:0000000000001BEA                 mov     esi, [rbx]      ; errnum
.text:0000000000001BEC                 lea     rdx, format     ; "%s: %s"
.text:0000000000001BF3                 mov     rcx, rax
.text:0000000000001BF6                 mov     r8, rbp
.text:0000000000001BF9                 xor     edi, edi        ; status
.text:0000000000001BFB                 xor     eax, eax
.text:0000000000001BFD                 call    _error
.text:0000000000001C02
.text:0000000000001C02 loc_1C02:                               ; CODE XREF: close_stdout+3A↑j
.text:0000000000001C02                                         ; close_stdout+A2↓j
.text:0000000000001C02                 mov     edi, cs:exit_failure ; status
.text:0000000000001C08                 call    __exit
.text:0000000000001C0D ; ---------------------------------------------------------------------------
.text:0000000000001C0D
.text:0000000000001C0D loc_1C0D:                               ; CODE XREF: close_stdout+63↑j
.text:0000000000001C0D                 mov     esi, [rbx]      ; errnum
.text:0000000000001C0F                 lea     rdx, format+4   ; format
.text:0000000000001C16                 mov     rcx, rax
.text:0000000000001C19                 xor     edi, edi        ; status
.text:0000000000001C1B                 xor     eax, eax
.text:0000000000001C1D                 call    _error
.text:0000000000001C22                 jmp     short loc_1C02
.text:0000000000001C22 ; } // starts at 1B80
.text:0000000000001C22 close_stdout    endp
.text:0000000000001C22
.text:0000000000001C22 ; ---------------------------------------------------------------------------
.text:0000000000001C24                 align 10h
.text:0000000000001C30
.text:0000000000001C30 ; =============== S U B R O U T I N E =======================================
.text:0000000000001C30
.text:0000000000001C30
.text:0000000000001C30                 public set_program_name
.text:0000000000001C30 set_program_name proc near              ; CODE XREF: main+19↑p
.text:0000000000001C30 ; __unwind {
.text:0000000000001C30                 test    rdi, rdi
.text:0000000000001C33                 push    rbx
.text:0000000000001C34                 jz      short loc_1CAD
.text:0000000000001C36                 mov     esi, 2Fh ; '/'  ; c
.text:0000000000001C3B                 mov     rbx, rdi
.text:0000000000001C3E                 call    _strrchr
.text:0000000000001C43                 test    rax, rax
.text:0000000000001C46                 jz      short loc_1C9D
.text:0000000000001C48                 lea     r8, [rax+1]
.text:0000000000001C4C                 mov     rdx, r8
.text:0000000000001C4F                 sub     rdx, rbx
.text:0000000000001C52                 cmp     rdx, 6
.text:0000000000001C56                 jle     short loc_1C9D
.text:0000000000001C58                 lea     rsi, [rax-6]
.text:0000000000001C5C                 lea     rdi, aLibs      ; "/.libs/"
.text:0000000000001C63                 mov     ecx, 7
.text:0000000000001C68                 repe cmpsb
.text:0000000000001C6A                 setnbe  dl
.text:0000000000001C6D                 sbb     dl, 0
.text:0000000000001C70                 test    dl, dl
.text:0000000000001C72                 jnz     short loc_1C9D
.text:0000000000001C74                 lea     rdi, aLt        ; "lt-"
.text:0000000000001C7B                 mov     ecx, 3
.text:0000000000001C80                 mov     rsi, r8
.text:0000000000001C83                 mov     rbx, r8
.text:0000000000001C86                 repe cmpsb
.text:0000000000001C88                 setnbe  dl
.text:0000000000001C8B                 sbb     dl, 0
.text:0000000000001C8E                 test    dl, dl
.text:0000000000001C90                 jnz     short loc_1C9D
.text:0000000000001C92                 lea     rbx, [rax+4]
.text:0000000000001C96                 mov     cs:__bss_start, rbx
.text:0000000000001C9D
.text:0000000000001C9D loc_1C9D:                               ; CODE XREF: set_program_name+16↑j
.text:0000000000001C9D                                         ; set_program_name+26↑j ...
.text:0000000000001C9D                 mov     cs:program_name, rbx
.text:0000000000001CA4                 mov     cs:program_invocation_name@@GLIBC_2_2_5, rbx
.text:0000000000001CAB                 pop     rbx
.text:0000000000001CAC                 retn
.text:0000000000001CAD ; ---------------------------------------------------------------------------
.text:0000000000001CAD
.text:0000000000001CAD loc_1CAD:                               ; CODE XREF: set_program_name+4↑j
.text:0000000000001CAD                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:0000000000001CB4                 lea     rdi, aANullArgv0WasP ; "A NULL argv[0] was passed through an ex"...
.text:0000000000001CBB                 mov     edx, 37h ; '7'  ; n
.text:0000000000001CC0                 mov     esi, 1          ; size
.text:0000000000001CC5                 call    _fwrite
.text:0000000000001CCA                 call    _abort
.text:0000000000001CCA ; } // starts at 1C30
.text:0000000000001CCA set_program_name endp
.text:0000000000001CCA
.text:0000000000001CCA ; ---------------------------------------------------------------------------
.text:0000000000001CCF                 align 10h
.text:0000000000001CD0
.text:0000000000001CD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001CD0
.text:0000000000001CD0 ; Attributes: info_from_lumina
.text:0000000000001CD0
.text:0000000000001CD0 ; const char *__fastcall gettext_quote(const char *msgid, quoting_style s)
.text:0000000000001CD0 gettext_quote   proc near               ; CODE XREF: quotearg_buffer_restyled+1165↓p
.text:0000000000001CD0                                         ; quotearg_buffer_restyled+117B↓p
.text:0000000000001CD0 ; __unwind {
.text:0000000000001CD0                 push    rbp
.text:0000000000001CD1                 push    rbx
.text:0000000000001CD2                 mov     rbp, rdi
.text:0000000000001CD5                 mov     ebx, esi
.text:0000000000001CD7                 sub     rsp, 8
.text:0000000000001CDB                 call    locale_charset
.text:0000000000001CE0                 movzx   edx, byte ptr [rax]
.text:0000000000001CE3                 and     edx, 0FFFFFFDFh
.text:0000000000001CE6                 cmp     dl, 55h ; 'U'
.text:0000000000001CE9                 jz      short loc_1D60
.text:0000000000001CEB                 cmp     dl, 47h ; 'G'
.text:0000000000001CEE                 jz      short loc_1D10
.text:0000000000001CF0
.text:0000000000001CF0 loc_1CF0:                               ; CODE XREF: gettext_quote+4A↓j
.text:0000000000001CF0                                         ; gettext_quote+50↓j ...
.text:0000000000001CF0                 lea     rax, unk_49D3
.text:0000000000001CF7                 lea     rdx, asc_49D5   ; "'"
.text:0000000000001CFE                 cmp     ebx, 9
.text:0000000000001D01                 cmovnz  rax, rdx
.text:0000000000001D05                 add     rsp, 8
.text:0000000000001D09                 pop     rbx
.text:0000000000001D0A                 pop     rbp
.text:0000000000001D0B                 retn
.text:0000000000001D0B ; ---------------------------------------------------------------------------
.text:0000000000001D0C                 align 10h
.text:0000000000001D10
.text:0000000000001D10 loc_1D10:                               ; CODE XREF: gettext_quote+1E↑j
.text:0000000000001D10                 movzx   edx, byte ptr [rax+1]
.text:0000000000001D14                 and     edx, 0FFFFFFDFh
.text:0000000000001D17                 cmp     dl, 42h ; 'B'
.text:0000000000001D1A                 jnz     short loc_1CF0
.text:0000000000001D1C                 cmp     byte ptr [rax+2], 31h ; '1'
.text:0000000000001D20                 jnz     short loc_1CF0
.text:0000000000001D22                 cmp     byte ptr [rax+3], 38h ; '8'
.text:0000000000001D26                 jnz     short loc_1CF0
.text:0000000000001D28                 cmp     byte ptr [rax+4], 30h ; '0'
.text:0000000000001D2C                 jnz     short loc_1CF0
.text:0000000000001D2E                 cmp     byte ptr [rax+5], 33h ; '3'
.text:0000000000001D32                 jnz     short loc_1CF0
.text:0000000000001D34                 cmp     byte ptr [rax+6], 30h ; '0'
.text:0000000000001D38                 jnz     short loc_1CF0
.text:0000000000001D3A                 cmp     byte ptr [rax+7], 0
.text:0000000000001D3E                 jnz     short loc_1CF0
.text:0000000000001D40                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000001D44                 lea     rax, unk_49CC
.text:0000000000001D4B                 lea     rdx, unk_49D0
.text:0000000000001D52                 cmovnz  rax, rdx
.text:0000000000001D56                 add     rsp, 8
.text:0000000000001D5A                 pop     rbx
.text:0000000000001D5B                 pop     rbp
.text:0000000000001D5C                 retn
.text:0000000000001D5C ; ---------------------------------------------------------------------------
.text:0000000000001D5D                 align 20h
.text:0000000000001D60
.text:0000000000001D60 loc_1D60:                               ; CODE XREF: gettext_quote+19↑j
.text:0000000000001D60                 movzx   edx, byte ptr [rax+1]
.text:0000000000001D64                 and     edx, 0FFFFFFDFh
.text:0000000000001D67                 cmp     dl, 54h ; 'T'
.text:0000000000001D6A                 jnz     short loc_1CF0
.text:0000000000001D6C                 movzx   edx, byte ptr [rax+2]
.text:0000000000001D70                 and     edx, 0FFFFFFDFh
.text:0000000000001D73                 cmp     dl, 46h ; 'F'
.text:0000000000001D76                 jnz     loc_1CF0
.text:0000000000001D7C                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:0000000000001D80                 jnz     loc_1CF0
.text:0000000000001D86                 cmp     byte ptr [rax+4], 38h ; '8'
.text:0000000000001D8A                 jnz     loc_1CF0
.text:0000000000001D90                 cmp     byte ptr [rax+5], 0
.text:0000000000001D94                 jnz     loc_1CF0
.text:0000000000001D9A                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000001D9E                 lea     rax, unk_49C4
.text:0000000000001DA5                 lea     rdx, unk_49C8
.text:0000000000001DAC                 cmovnz  rax, rdx
.text:0000000000001DB0                 add     rsp, 8
.text:0000000000001DB4                 pop     rbx
.text:0000000000001DB5                 pop     rbp
.text:0000000000001DB6                 retn
.text:0000000000001DB6 ; } // starts at 1CD0
.text:0000000000001DB6 gettext_quote   endp
.text:0000000000001DB6
.text:0000000000001DB6 ; ---------------------------------------------------------------------------
.text:0000000000001DB7                 align 20h
.text:0000000000001DC0
.text:0000000000001DC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001DC0
.text:0000000000001DC0 ; Attributes: info_from_lumina
.text:0000000000001DC0
.text:0000000000001DC0 ; size_t __fastcall quotearg_buffer_restyled(char *buffer, size_t buffersize, const char *arg, size_t argsize, quoting_style quoting_style, int flags, const unsigned int *quote_these_too, const char *left_quote, const char *right_quote)
.text:0000000000001DC0 quotearg_buffer_restyled proc near      ; CODE XREF: quotearg_buffer_restyled+BCD↓p
.text:0000000000001DC0                                         ; quotearg_buffer_restyled+11CB↓p ...
.text:0000000000001DC0
.text:0000000000001DC0 var_E0          = dword ptr -0E0h
.text:0000000000001DC0 var_DB          = byte ptr -0DBh
.text:0000000000001DC0 var_DA          = byte ptr -0DAh
.text:0000000000001DC0 var_D9          = byte ptr -0D9h
.text:0000000000001DC0 s               = qword ptr -0D8h
.text:0000000000001DC0 n               = qword ptr -0D0h
.text:0000000000001DC0 var_C8          = qword ptr -0C8h
.text:0000000000001DC0 ps              = qword ptr -0C0h
.text:0000000000001DC0 var_B8          = qword ptr -0B8h
.text:0000000000001DC0 var_B0          = qword ptr -0B0h
.text:0000000000001DC0 var_A8          = qword ptr -0A8h
.text:0000000000001DC0 s2              = qword ptr -0A0h
.text:0000000000001DC0 var_98          = qword ptr -98h
.text:0000000000001DC0 var_90          = qword ptr -90h
.text:0000000000001DC0 var_88          = qword ptr -88h
.text:0000000000001DC0 var_80          = qword ptr -80h
.text:0000000000001DC0 var_78          = qword ptr -78h
.text:0000000000001DC0 var_70          = dword ptr -70h
.text:0000000000001DC0 var_6C          = byte ptr -6Ch
.text:0000000000001DC0 var_6B          = byte ptr -6Bh
.text:0000000000001DC0 var_6A          = byte ptr -6Ah
.text:0000000000001DC0 var_69          = byte ptr -69h
.text:0000000000001DC0 var_68          = qword ptr -68h
.text:0000000000001DC0 var_60          = qword ptr -60h
.text:0000000000001DC0 wc              = dword ptr -4Ch
.text:0000000000001DC0 var_48          = qword ptr -48h
.text:0000000000001DC0 var_40          = qword ptr -40h
.text:0000000000001DC0 arg_0           = qword ptr  8
.text:0000000000001DC0 arg_8           = qword ptr  10h
.text:0000000000001DC0 arg_10          = qword ptr  18h
.text:0000000000001DC0
.text:0000000000001DC0 ; __unwind {
.text:0000000000001DC0                 push    r15
.text:0000000000001DC2                 push    r14
.text:0000000000001DC4                 mov     r15d, r8d
.text:0000000000001DC7                 push    r13
.text:0000000000001DC9                 push    r12
.text:0000000000001DCB                 mov     r14, rdi
.text:0000000000001DCE                 push    rbp
.text:0000000000001DCF                 push    rbx
.text:0000000000001DD0                 mov     ebx, r9d
.text:0000000000001DD3                 mov     r13, rsi
.text:0000000000001DD6                 mov     rbp, rcx
.text:0000000000001DD9                 and     ebx, 2
.text:0000000000001DDC                 sub     rsp, 0B8h
.text:0000000000001DE3                 mov     rax, [rsp+0E8h+arg_0]
.text:0000000000001DEB                 mov     [rsp+0E8h+s], rdx
.text:0000000000001DF0                 mov     [rsp+0E8h+var_E0], r8d
.text:0000000000001DF5                 mov     [rsp+0E8h+var_70], r9d
.text:0000000000001DFA                 mov     [rsp+0E8h+var_C8], rax
.text:0000000000001DFF                 mov     rax, [rsp+0E8h+arg_8]
.text:0000000000001E07                 mov     [rsp+0E8h+var_80], rax
.text:0000000000001E0C                 mov     rax, [rsp+0E8h+arg_10]
.text:0000000000001E14                 mov     [rsp+0E8h+var_88], rax
.text:0000000000001E19                 mov     rax, fs:28h
.text:0000000000001E22                 mov     [rsp+0E8h+var_40], rax
.text:0000000000001E2A                 xor     eax, eax
.text:0000000000001E2C                 call    ___ctype_get_mb_cur_max
.text:0000000000001E31                 cmp     r15d, 0Ah       ; switch 11 cases
.text:0000000000001E35                 mov     [rsp+0E8h+var_90], rax
.text:0000000000001E3A                 ja      def_1E51        ; jumptable 00000000000121F1 default case
.text:0000000000001E40                 lea     rcx, jpt_1E51
.text:0000000000001E47                 mov     edx, r15d
.text:0000000000001E4A                 movsxd  rax, ds:(jpt_1E51 - 4A40h)[rcx+rdx*4]
.text:0000000000001E4E                 add     rax, rcx
.text:0000000000001E51                 jmp     rax             ; switch jump
.text:0000000000001E53 ; ---------------------------------------------------------------------------
.text:0000000000001E53
.text:0000000000001E53 loc_1E53:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000001E53                                         ; quotearg_buffer_restyled+C66↓j
.text:0000000000001E53                                         ; DATA XREF: ...
.text:0000000000001E53                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 1
.text:0000000000001E58                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000001E5D                 xor     r12d, r12d
.text:0000000000001E60                 mov     [rsp+0E8h+var_98], 0
.text:0000000000001E69                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000001E6E                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000001E73
.text:0000000000001E73 loc_1E73:                               ; CODE XREF: quotearg_buffer_restyled+E94↓j
.text:0000000000001E73                 lea     rax, asc_49D5   ; "'"
.text:0000000000001E7A                 mov     [rsp+0E8h+n], 1
.text:0000000000001E83                 xor     r15d, r15d
.text:0000000000001E86                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000001E8E                 mov     [rsp+0E8h+s2], rax
.text:0000000000001E93
.text:0000000000001E93 loc_1E93:                               ; CODE XREF: quotearg_buffer_restyled+7F4↓j
.text:0000000000001E93                                         ; quotearg_buffer_restyled+CB8↓j ...
.text:0000000000001E93                 xor     r11d, r11d
.text:0000000000001E96                 mov     rax, rbp
.text:0000000000001E99                 mov     r8d, r12d
.text:0000000000001E9C                 mov     rbp, r11
.text:0000000000001E9F                 mov     r11, rax
.text:0000000000001EA2                 nop     word ptr [rax+rax+00h]
.text:0000000000001EA8
.text:0000000000001EA8 loc_1EA8:                               ; CODE XREF: quotearg_buffer_restyled+2B2↓j
.text:0000000000001EA8                                         ; quotearg_buffer_restyled+42C↓j
.text:0000000000001EA8                 cmp     r11, rbp
.text:0000000000001EAB                 setnz   r12b
.text:0000000000001EAF                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000001EB3                 jnz     short loc_1EC2
.text:0000000000001EB5                 mov     rax, [rsp+0E8h+s]
.text:0000000000001EBA                 cmp     byte ptr [rax+rbp], 0
.text:0000000000001EBE                 setnz   r12b
.text:0000000000001EC2
.text:0000000000001EC2 loc_1EC2:                               ; CODE XREF: quotearg_buffer_restyled+F3↑j
.text:0000000000001EC2                 test    r12b, r12b
.text:0000000000001EC5                 jz      loc_2520
.text:0000000000001ECB                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000001ED0                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000001ED5                 lea     r9, [rdi+rbp]
.text:0000000000001ED9                 setnz   al
.text:0000000000001EDC                 and     al, [rsp+0E8h+var_DB]
.text:0000000000001EE0                 mov     r10d, eax
.text:0000000000001EE3                 jz      loc_1F90
.text:0000000000001EE9                 mov     rax, [rsp+0E8h+n]
.text:0000000000001EEE                 test    rax, rax
.text:0000000000001EF1                 jz      loc_2320
.text:0000000000001EF7                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000001EFB                 lea     rbx, [rbp+rax+0]
.text:0000000000001F00                 jnz     short loc_1F30
.text:0000000000001F02                 cmp     rax, 1
.text:0000000000001F06                 jbe     short loc_1F30
.text:0000000000001F08                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000001F0D                 mov     byte ptr [rsp+0E8h+var_B8], r10b
.text:0000000000001F12                 mov     [rsp+0E8h+ps], r9
.text:0000000000001F17                 call    _strlen
.text:0000000000001F1C                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000001F22                 movzx   r10d, byte ptr [rsp+0E8h+var_B8]
.text:0000000000001F28                 mov     r11, rax
.text:0000000000001F2B                 mov     r9, [rsp+0E8h+ps]
.text:0000000000001F30
.text:0000000000001F30 loc_1F30:                               ; CODE XREF: quotearg_buffer_restyled+140↑j
.text:0000000000001F30                                         ; quotearg_buffer_restyled+146↑j
.text:0000000000001F30                 cmp     rbx, r11
.text:0000000000001F33                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000001F38                 ja      loc_24F0
.text:0000000000001F3E                 mov     rdx, [rsp+0E8h+n] ; n
.text:0000000000001F43                 mov     rsi, [rsp+0E8h+s2] ; s2
.text:0000000000001F48                 mov     rdi, r9         ; s1
.text:0000000000001F4B                 mov     [rsp+0E8h+var_A8], r11
.text:0000000000001F50                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000001F55                 mov     [rsp+0E8h+var_B8], r9
.text:0000000000001F5A                 call    _memcmp
.text:0000000000001F5F                 test    eax, eax
.text:0000000000001F61                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000001F66                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000001F6C                 mov     r11, [rsp+0E8h+var_A8]
.text:0000000000001F71                 jnz     loc_24F0
.text:0000000000001F77                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000001F7C                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000001F82                 jnz     loc_2F05
.text:0000000000001F88                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000001F90
.text:0000000000001F90 loc_1F90:                               ; CODE XREF: quotearg_buffer_restyled+123↑j
.text:0000000000001F90                                         ; quotearg_buffer_restyled+733↓j
.text:0000000000001F90                 movzx   ebx, byte ptr [r9]
.text:0000000000001F94                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000001F97                 ja      def_1FAE        ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:0000000000001F9D                 lea     rcx, jpt_1FAE
.text:0000000000001FA4                 movzx   edx, bl
.text:0000000000001FA7                 movsxd  rax, ds:(jpt_1FAE - 4A6Ch)[rcx+rdx*4]
.text:0000000000001FAB                 add     rax, rcx
.text:0000000000001FAE                 jmp     rax             ; switch jump
.text:0000000000001FB0 ; ---------------------------------------------------------------------------
.text:0000000000001FB0
.text:0000000000001FB0 loc_1FB0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000001FB0                                         ; DATA XREF: .rodata:jpt_233A↓o
.text:0000000000001FB0                 xor     r10d, r10d      ; jumptable 00000000000126DA cases 123,125
.text:0000000000001FB3
.text:0000000000001FB3 loc_1FB3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000001FB3                                         ; DATA XREF: .rodata:jpt_1FAE↓o
.text:0000000000001FB3                 cmp     r11, 1          ; jumptable 000000000001234E cases 123,125
.text:0000000000001FB7                 setnz   al
.text:0000000000001FBA                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000001FBE                 jnz     short loc_1FCC
.text:0000000000001FC0                 mov     rax, [rsp+0E8h+s]
.text:0000000000001FC5                 cmp     byte ptr [rax+1], 0
.text:0000000000001FC9                 setnz   al
.text:0000000000001FCC
.text:0000000000001FCC loc_1FCC:                               ; CODE XREF: quotearg_buffer_restyled+1FE↑j
.text:0000000000001FCC                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000001FD1                 setz    dl
.text:0000000000001FD4                 test    al, al
.text:0000000000001FD6                 jz      loc_2228
.text:0000000000001FDC
.text:0000000000001FDC loc_1FDC:                               ; CODE XREF: quotearg_buffer_restyled+46B↓j
.text:0000000000001FDC                 xor     r12d, r12d
.text:0000000000001FDF                 xor     eax, eax
.text:0000000000001FE1                 nop     dword ptr [rax+00000000h]
.text:0000000000001FE8
.text:0000000000001FE8 loc_1FE8:                               ; CODE XREF: quotearg_buffer_restyled+2E9↓j
.text:0000000000001FE8                                         ; quotearg_buffer_restyled+30C↓j ...
.text:0000000000001FE8                 cmp     [rsp+0E8h+var_DB], 1
.text:0000000000001FED                 jnz     loc_2102
.text:0000000000001FF3                 test    dl, dl
.text:0000000000001FF5                 jnz     loc_2102
.text:0000000000001FFB
.text:0000000000001FFB loc_1FFB:                               ; CODE XREF: quotearg_buffer_restyled+347↓j
.text:0000000000001FFB                 mov     rsi, [rsp+0E8h+var_C8]
.text:0000000000002000                 test    rsi, rsi
.text:0000000000002003                 jz      short loc_2019
.text:0000000000002005                 mov     edx, ebx
.text:0000000000002007                 shr     dl, 5
.text:000000000000200A                 movzx   edx, dl
.text:000000000000200D                 mov     edx, [rsi+rdx*4]
.text:0000000000002010                 bt      edx, ebx
.text:0000000000002013                 jb      loc_2163
.text:0000000000002019
.text:0000000000002019 loc_2019:                               ; CODE XREF: quotearg_buffer_restyled+243↑j
.text:0000000000002019                                         ; quotearg_buffer_restyled+34D↓j ...
.text:0000000000002019                 test    r10b, r10b
.text:000000000000201C                 jnz     loc_2163
.text:0000000000002022                 xor     eax, 1
.text:0000000000002025                 add     rbp, 1
.text:0000000000002029                 and     eax, r8d
.text:000000000000202C
.text:000000000000202C loc_202C:                               ; CODE XREF: quotearg_buffer_restyled+75A↓j
.text:000000000000202C                                         ; quotearg_buffer_restyled+AE8↓j
.text:000000000000202C                 test    al, al
.text:000000000000202E                 jz      short loc_2050
.text:0000000000002030                 cmp     r13, r15
.text:0000000000002033                 jbe     short loc_203A
.text:0000000000002035                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000203A
.text:000000000000203A loc_203A:                               ; CODE XREF: quotearg_buffer_restyled+273↑j
.text:000000000000203A                 lea     rax, [r15+1]
.text:000000000000203E                 cmp     r13, rax
.text:0000000000002041                 jbe     short loc_2049
.text:0000000000002043                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000002049
.text:0000000000002049 loc_2049:                               ; CODE XREF: quotearg_buffer_restyled+281↑j
.text:0000000000002049                 add     r15, 2
.text:000000000000204D                 xor     r8d, r8d
.text:0000000000002050
.text:0000000000002050 loc_2050:                               ; CODE XREF: quotearg_buffer_restyled+26E↑j
.text:0000000000002050                                         ; quotearg_buffer_restyled+403↓j ...
.text:0000000000002050                 cmp     r15, r13
.text:0000000000002053                 jnb     short loc_2059
.text:0000000000002055                 mov     [r14+r15], bl
.text:0000000000002059
.text:0000000000002059 loc_2059:                               ; CODE XREF: quotearg_buffer_restyled+293↑j
.text:0000000000002059                 movzx   edi, [rsp+0E8h+var_DA]
.text:000000000000205E                 add     r15, 1
.text:0000000000002062                 mov     eax, 0
.text:0000000000002067                 test    r12b, r12b
.text:000000000000206A                 cmovz   edi, eax
.text:000000000000206D                 mov     [rsp+0E8h+var_DA], dil
.text:0000000000002072                 jmp     loc_1EA8
.text:0000000000002072 ; ---------------------------------------------------------------------------
.text:0000000000002077                 align 20h
.text:0000000000002080
.text:0000000000002080 loc_2080:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000002080                                         ; DATA XREF: .rodata:jpt_233A↓o
.text:0000000000002080                 xor     r10d, r10d      ; jumptable 00000000000126DA case 63
.text:0000000000002083
.text:0000000000002083 loc_2083:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002083                                         ; DATA XREF: .rodata:jpt_1FAE↓o
.text:0000000000002083                 mov     eax, [rsp+0E8h+var_E0] ; jumptable 000000000001234E case 63
.text:0000000000002087                 cmp     eax, 2
.text:000000000000208A                 jz      loc_2648
.text:0000000000002090                 cmp     eax, 5
.text:0000000000002093                 jz      loc_2608
.text:0000000000002099                 cmp     eax, 2
.text:000000000000209C                 mov     ebx, 3Fh ; '?'
.text:00000000000020A1                 setz    dl
.text:00000000000020A4                 xor     r12d, r12d
.text:00000000000020A7                 xor     eax, eax
.text:00000000000020A9                 jmp     loc_1FE8
.text:00000000000020A9 ; ---------------------------------------------------------------------------
.text:00000000000020AE                 align 10h
.text:00000000000020B0
.text:00000000000020B0 loc_20B0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:00000000000020B0                                         ; DATA XREF: .rodata:jpt_233A↓o
.text:00000000000020B0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 39
.text:00000000000020B3
.text:00000000000020B3 loc_20B3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000020B3                                         ; DATA XREF: .rodata:jpt_1FAE↓o
.text:00000000000020B3                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 39
.text:00000000000020B8                 jz      loc_25C0
.text:00000000000020BE                 mov     [rsp+0E8h+var_6C], r12b
.text:00000000000020C3                 xor     edx, edx
.text:00000000000020C5                 xor     eax, eax
.text:00000000000020C7                 mov     ebx, 27h ; '''
.text:00000000000020CC                 jmp     loc_1FE8
.text:00000000000020CC ; ---------------------------------------------------------------------------
.text:00000000000020D1                 align 8
.text:00000000000020D8
.text:00000000000020D8 loc_20D8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000020D8                                         ; DATA XREF: .rodata:jpt_1FAE↓o
.text:00000000000020D8                 mov     edx, 9          ; jumptable 000000000001234E case 9
.text:00000000000020DD                 mov     ebx, 74h ; 't'
.text:00000000000020E2
.text:00000000000020E2 loc_20E2:                               ; CODE XREF: quotearg_buffer_restyled+4BA↓j
.text:00000000000020E2                                         ; quotearg_buffer_restyled+4EA↓j ...
.text:00000000000020E2                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000020E7                 setz    al
.text:00000000000020EA                 and     al, [rsp+0E8h+var_D9]
.text:00000000000020EE                 jnz     loc_223E
.text:00000000000020F4
.text:00000000000020F4 loc_20F4:                               ; CODE XREF: quotearg_buffer_restyled+362↓j
.text:00000000000020F4                                         ; quotearg_buffer_restyled+45A↓j ...
.text:00000000000020F4                 cmp     [rsp+0E8h+var_DB], 0
.text:00000000000020F9                 jnz     short loc_2160
.text:00000000000020FB
.text:00000000000020FB loc_20FB:                               ; CODE XREF: quotearg_buffer_restyled+422↓j
.text:00000000000020FB                 mov     ebx, edx
.text:00000000000020FD                 xor     r12d, r12d
.text:0000000000002100                 xor     eax, eax
.text:0000000000002102
.text:0000000000002102 loc_2102:                               ; CODE XREF: quotearg_buffer_restyled+22D↑j
.text:0000000000002102                                         ; quotearg_buffer_restyled+235↑j
.text:0000000000002102                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002107                 jnz     loc_1FFB
.text:000000000000210D                 jmp     loc_2019
.text:000000000000210D ; ---------------------------------------------------------------------------
.text:0000000000002112                 align 8
.text:0000000000002118
.text:0000000000002118 loc_2118:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002118                                         ; DATA XREF: .rodata:jpt_1FAE↓o
.text:0000000000002118                 mov     edx, 8          ; jumptable 000000000001234E case 8
.text:000000000000211D                 mov     ebx, 62h ; 'b'
.text:0000000000002122                 jmp     short loc_20F4
.text:0000000000002122 ; ---------------------------------------------------------------------------
.text:0000000000002124                 align 8
.text:0000000000002128
.text:0000000000002128 loc_2128:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002128                                         ; DATA XREF: .rodata:jpt_1FAE↓o
.text:0000000000002128                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 92
.text:000000000000212D                 jz      loc_2500
.text:0000000000002133                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000002138                 jz      loc_2350
.text:000000000000213E
.text:000000000000213E loc_213E:                               ; CODE XREF: quotearg_buffer_restyled+588↓j
.text:000000000000213E                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002143                 jz      loc_2350
.text:0000000000002149                 cmp     [rsp+0E8h+n], 0
.text:000000000000214F                 jnz     loc_250B
.text:0000000000002155                 mov     ebx, 5Ch ; '\'
.text:000000000000215A                 nop     word ptr [rax+rax+00h]
.text:0000000000002160
.text:0000000000002160 loc_2160:                               ; CODE XREF: quotearg_buffer_restyled+339↑j
.text:0000000000002160                                         ; quotearg_buffer_restyled+5D5↓j ...
.text:0000000000002160                 xor     r12d, r12d
.text:0000000000002163
.text:0000000000002163 loc_2163:                               ; CODE XREF: quotearg_buffer_restyled+253↑j
.text:0000000000002163                                         ; quotearg_buffer_restyled+25C↑j
.text:0000000000002163                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002168                 setz    dl
.text:000000000000216B                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002170                 mov     eax, edx
.text:0000000000002172                 jnz     loc_29C8
.text:0000000000002178                 mov     eax, r8d
.text:000000000000217B                 xor     eax, 1
.text:000000000000217E                 and     al, dl
.text:0000000000002180                 jz      short loc_21B1
.text:0000000000002182                 cmp     r13, r15
.text:0000000000002185                 jbe     short loc_218C
.text:0000000000002187                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000218C
.text:000000000000218C loc_218C:                               ; CODE XREF: quotearg_buffer_restyled+3C5↑j
.text:000000000000218C                 lea     rdx, [r15+1]
.text:0000000000002190                 cmp     r13, rdx
.text:0000000000002193                 jbe     short loc_219B
.text:0000000000002195                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:000000000000219B
.text:000000000000219B loc_219B:                               ; CODE XREF: quotearg_buffer_restyled+3D3↑j
.text:000000000000219B                 lea     rdx, [r15+2]
.text:000000000000219F                 cmp     r13, rdx
.text:00000000000021A2                 jbe     short loc_21AA
.text:00000000000021A4                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:00000000000021AA
.text:00000000000021AA loc_21AA:                               ; CODE XREF: quotearg_buffer_restyled+3E2↑j
.text:00000000000021AA                 add     r15, 3
.text:00000000000021AE                 mov     r8d, eax
.text:00000000000021B1
.text:00000000000021B1 loc_21B1:                               ; CODE XREF: quotearg_buffer_restyled+3C0↑j
.text:00000000000021B1                 cmp     r13, r15
.text:00000000000021B4                 jbe     short loc_21BB
.text:00000000000021B6                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:00000000000021BB
.text:00000000000021BB loc_21BB:                               ; CODE XREF: quotearg_buffer_restyled+3F4↑j
.text:00000000000021BB                 add     r15, 1
.text:00000000000021BF                 add     rbp, 1
.text:00000000000021C3                 jmp     loc_2050
.text:00000000000021C3 ; ---------------------------------------------------------------------------
.text:00000000000021C8                 align 10h
.text:00000000000021D0
.text:00000000000021D0 loc_21D0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000021D0                                         ; DATA XREF: .rodata:jpt_1FAE↓o
.text:00000000000021D0                 cmp     [rsp+0E8h+var_DB], 0 ; jumptable 000000000001234E case 0
.text:00000000000021D5                 jnz     loc_23A3
.text:00000000000021DB                 xor     edx, edx
.text:00000000000021DD                 test    byte ptr [rsp+0E8h+var_70], 1
.text:00000000000021E2                 jz      loc_20FB
.text:00000000000021E8                 add     rbp, 1
.text:00000000000021EC                 jmp     loc_1EA8
.text:00000000000021EC ; ---------------------------------------------------------------------------
.text:00000000000021F1                 align 8
.text:00000000000021F8
.text:00000000000021F8 loc_21F8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000021F8                                         ; DATA XREF: .rodata:jpt_1FAE↓o
.text:00000000000021F8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 37,43-58,65-90,93,95,97-122
.text:00000000000021FD                 setz    dl
.text:0000000000002200                 xor     eax, eax
.text:0000000000002202                 jmp     loc_1FE8
.text:0000000000002202 ; ---------------------------------------------------------------------------
.text:0000000000002207                 align 10h
.text:0000000000002210
.text:0000000000002210 loc_2210:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002210                                         ; DATA XREF: .rodata:jpt_1FAE↓o
.text:0000000000002210                 mov     edx, 7          ; jumptable 000000000001234E case 7
.text:0000000000002215                 mov     ebx, 61h ; 'a'
.text:000000000000221A                 jmp     loc_20F4
.text:000000000000221A ; ---------------------------------------------------------------------------
.text:000000000000221F                 align 20h
.text:0000000000002220
.text:0000000000002220 loc_2220:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002220                                         ; DATA XREF: .rodata:jpt_1FAE↓o
.text:0000000000002220                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 35,126
.text:0000000000002225                 setz    dl
.text:0000000000002228
.text:0000000000002228 loc_2228:                               ; CODE XREF: quotearg_buffer_restyled+216↑j
.text:0000000000002228                                         ; quotearg_buffer_restyled+6A3↓j
.text:0000000000002228                 test    rbp, rbp
.text:000000000000222B                 jnz     loc_1FDC
.text:0000000000002231
.text:0000000000002231 loc_2231:                               ; CODE XREF: quotearg_buffer_restyled+49B↓j
.text:0000000000002231                                         ; quotearg_buffer_restyled+4AD↓j ...
.text:0000000000002231                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000002236                 and     al, dl
.text:0000000000002238                 jz      loc_1FE8
.text:000000000000223E
.text:000000000000223E loc_223E:                               ; CODE XREF: quotearg_buffer_restyled+32E↑j
.text:000000000000223E                 mov     rbp, r11
.text:0000000000002241                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000002249                 jmp     loc_2949
.text:0000000000002249 ; ---------------------------------------------------------------------------
.text:000000000000224E                 align 10h
.text:0000000000002250
.text:0000000000002250 loc_2250:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002250                                         ; DATA XREF: .rodata:jpt_1FAE↓o
.text:0000000000002250                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000002255                 setz    dl
.text:0000000000002258                 xor     r12d, r12d
.text:000000000000225B                 jmp     short loc_2231
.text:000000000000225B ; ---------------------------------------------------------------------------
.text:000000000000225D                 align 20h
.text:0000000000002260
.text:0000000000002260 loc_2260:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002260                                         ; DATA XREF: .rodata:jpt_1FAE↓o
.text:0000000000002260                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 32
.text:0000000000002265                 mov     ebx, 20h ; ' '
.text:000000000000226A                 setz    dl
.text:000000000000226D                 jmp     short loc_2231
.text:000000000000226D ; ---------------------------------------------------------------------------
.text:000000000000226F                 align 10h
.text:0000000000002270
.text:0000000000002270 loc_2270:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002270                                         ; DATA XREF: .rodata:jpt_1FAE↓o
.text:0000000000002270                 mov     edx, 0Dh        ; jumptable 000000000001234E case 13
.text:0000000000002275                 mov     ebx, 72h ; 'r'
.text:000000000000227A                 jmp     loc_20E2
.text:000000000000227A ; ---------------------------------------------------------------------------
.text:000000000000227F                 align 20h
.text:0000000000002280
.text:0000000000002280 loc_2280:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002280                                         ; DATA XREF: .rodata:jpt_1FAE↓o
.text:0000000000002280                 mov     edx, 0Ch        ; jumptable 000000000001234E case 12
.text:0000000000002285                 mov     ebx, 66h ; 'f'
.text:000000000000228A                 jmp     loc_20F4
.text:000000000000228A ; ---------------------------------------------------------------------------
.text:000000000000228F                 align 10h
.text:0000000000002290
.text:0000000000002290 loc_2290:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002290                                         ; DATA XREF: .rodata:jpt_1FAE↓o
.text:0000000000002290                 mov     edx, 0Bh        ; jumptable 000000000001234E case 11
.text:0000000000002295                 mov     ebx, 76h ; 'v'
.text:000000000000229A                 jmp     loc_20F4
.text:000000000000229A ; ---------------------------------------------------------------------------
.text:000000000000229F                 align 20h
.text:00000000000022A0
.text:00000000000022A0 loc_22A0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000022A0                                         ; DATA XREF: .rodata:jpt_1FAE↓o
.text:00000000000022A0                 mov     edx, 0Ah        ; jumptable 000000000001234E case 10
.text:00000000000022A5                 mov     ebx, 6Eh ; 'n'
.text:00000000000022AA                 jmp     loc_20E2
.text:00000000000022AA ; ---------------------------------------------------------------------------
.text:00000000000022AF                 align 10h
.text:00000000000022B0
.text:00000000000022B0 def_233A:                               ; CODE XREF: quotearg_buffer_restyled+567↓j
.text:00000000000022B0                                         ; quotearg_buffer_restyled+57A↓j
.text:00000000000022B0                                         ; DATA XREF: ...
.text:00000000000022B0                 xor     r10d, r10d      ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:00000000000022B3                 nop     dword ptr [rax+rax+00h]
.text:00000000000022B8
.text:00000000000022B8 def_1FAE:                               ; CODE XREF: quotearg_buffer_restyled+1D7↑j
.text:00000000000022B8                                         ; quotearg_buffer_restyled+1EE↑j
.text:00000000000022B8                                         ; DATA XREF: ...
.text:00000000000022B8                 cmp     [rsp+0E8h+var_90], 1 ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:00000000000022BE                 jnz     loc_2668
.text:00000000000022C4                 mov     [rsp+0E8h+var_B0], r11
.text:00000000000022C9                 mov     byte ptr [rsp+0E8h+var_B8], r8b
.text:00000000000022CE                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:00000000000022D3                 call    ___ctype_b_loc
.text:00000000000022D8                 mov     rcx, [rax]
.text:00000000000022DB                 movzx   edx, bl
.text:00000000000022DE                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:00000000000022E4                 movzx   r8d, byte ptr [rsp+0E8h+var_B8]
.text:00000000000022EA                 mov     r11, [rsp+0E8h+var_B0]
.text:00000000000022EF                 mov     edi, 1
.text:00000000000022F4                 movzx   eax, word ptr [rcx+rdx*2]
.text:00000000000022F8                 and     ax, 4000h
.text:00000000000022FC                 setnz   r12b
.text:0000000000002300                 setz    al
.text:0000000000002303                 and     al, [rsp+0E8h+var_DB]
.text:0000000000002307
.text:0000000000002307 loc_2307:                               ; CODE XREF: quotearg_buffer_restyled+FED↓j
.text:0000000000002307                 test    al, al
.text:0000000000002309                 jnz     loc_2CA1
.text:000000000000230F                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002314                 setz    dl
.text:0000000000002317                 jmp     loc_1FE8
.text:0000000000002317 ; ---------------------------------------------------------------------------
.text:000000000000231C                 align 20h
.text:0000000000002320
.text:0000000000002320 loc_2320:                               ; CODE XREF: quotearg_buffer_restyled+131↑j
.text:0000000000002320                 movzx   ebx, byte ptr [r9]
.text:0000000000002324                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000002327                 ja      short def_233A  ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000002329                 lea     rcx, jpt_233A
.text:0000000000002330                 movzx   edx, bl
.text:0000000000002333                 movsxd  rax, ds:(jpt_233A - 4C68h)[rcx+rdx*4]
.text:0000000000002337                 add     rax, rcx
.text:000000000000233A                 jmp     rax             ; switch jump
.text:000000000000233A ; ---------------------------------------------------------------------------
.text:000000000000233C                 align 20h
.text:0000000000002340
.text:0000000000002340 loc_2340:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002340                                         ; DATA XREF: .rodata:jpt_233A↓o
.text:0000000000002340                 xor     r10d, r10d      ; jumptable 00000000000126DA case 92
.text:0000000000002343                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000002348                 jnz     loc_213E
.text:000000000000234E                 xchg    ax, ax
.text:0000000000002350
.text:0000000000002350 loc_2350:                               ; CODE XREF: quotearg_buffer_restyled+378↑j
.text:0000000000002350                                         ; quotearg_buffer_restyled+383↑j
.text:0000000000002350                 mov     edx, 5Ch ; '\'
.text:0000000000002355                 mov     ebx, 5Ch ; '\'
.text:000000000000235A                 jmp     loc_20F4
.text:000000000000235A ; ---------------------------------------------------------------------------
.text:000000000000235F                 align 20h
.text:0000000000002360
.text:0000000000002360 loc_2360:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002360                                         ; DATA XREF: .rodata:jpt_233A↓o
.text:0000000000002360                 mov     edx, 0Ch        ; jumptable 00000000000126DA case 12
.text:0000000000002365                 xor     r10d, r10d
.text:0000000000002368                 mov     ebx, 66h ; 'f'
.text:000000000000236D                 jmp     loc_20F4
.text:000000000000236D ; ---------------------------------------------------------------------------
.text:0000000000002372                 align 8
.text:0000000000002378
.text:0000000000002378 loc_2378:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002378                                         ; DATA XREF: .rodata:jpt_233A↓o
.text:0000000000002378                 mov     edx, 0Ah        ; jumptable 00000000000126DA case 10
.text:000000000000237D                 xor     r10d, r10d
.text:0000000000002380                 mov     ebx, 6Eh ; 'n'
.text:0000000000002385                 jmp     loc_20E2
.text:0000000000002385 ; ---------------------------------------------------------------------------
.text:000000000000238A                 align 10h
.text:0000000000002390
.text:0000000000002390 loc_2390:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002390                                         ; DATA XREF: .rodata:jpt_233A↓o
.text:0000000000002390                 mov     ebx, 61h ; 'a'  ; jumptable 00000000000126DA case 7
.text:0000000000002395                 jmp     loc_2160
.text:0000000000002395 ; ---------------------------------------------------------------------------
.text:000000000000239A                 align 20h
.text:00000000000023A0
.text:00000000000023A0 loc_23A0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000023A0                                         ; DATA XREF: .rodata:jpt_233A↓o
.text:00000000000023A0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 0
.text:00000000000023A3
.text:00000000000023A3 loc_23A3:                               ; CODE XREF: quotearg_buffer_restyled+415↑j
.text:00000000000023A3                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000023A8                 setz    dl
.text:00000000000023AB                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000023B0                 jnz     loc_2F4A
.text:00000000000023B6                 mov     eax, r8d
.text:00000000000023B9                 mov     rcx, r15
.text:00000000000023BC                 xor     eax, 1
.text:00000000000023BF                 and     al, dl
.text:00000000000023C1                 jz      short loc_23F0
.text:00000000000023C3                 cmp     r13, r15
.text:00000000000023C6                 jbe     short loc_23CD
.text:00000000000023C8                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000023CD
.text:00000000000023CD loc_23CD:                               ; CODE XREF: quotearg_buffer_restyled+606↑j
.text:00000000000023CD                 lea     rcx, [r15+1]
.text:00000000000023D1                 cmp     r13, rcx
.text:00000000000023D4                 jbe     short loc_23DC
.text:00000000000023D6                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:00000000000023DC
.text:00000000000023DC loc_23DC:                               ; CODE XREF: quotearg_buffer_restyled+614↑j
.text:00000000000023DC                 lea     rcx, [r15+2]
.text:00000000000023E0                 cmp     r13, rcx
.text:00000000000023E3                 ja      loc_2A19
.text:00000000000023E9
.text:00000000000023E9 loc_23E9:                               ; CODE XREF: quotearg_buffer_restyled+C5F↓j
.text:00000000000023E9                 lea     rcx, [r15+3]
.text:00000000000023ED                 mov     r8d, eax
.text:00000000000023F0
.text:00000000000023F0 loc_23F0:                               ; CODE XREF: quotearg_buffer_restyled+601↑j
.text:00000000000023F0                 cmp     r13, rcx
.text:00000000000023F3                 jbe     short loc_23FA
.text:00000000000023F5                 mov     byte ptr [r14+rcx], 5Ch ; '\'
.text:00000000000023FA
.text:00000000000023FA loc_23FA:                               ; CODE XREF: quotearg_buffer_restyled+633↑j
.text:00000000000023FA                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000023FF                 lea     r15, [rcx+1]
.text:0000000000002403                 jz      loc_2A09
.text:0000000000002409                 lea     rax, [rbp+1]
.text:000000000000240D                 cmp     rax, r11
.text:0000000000002410                 jnb     short loc_242B
.text:0000000000002412                 mov     rax, [rsp+0E8h+s]
.text:0000000000002417                 movzx   eax, byte ptr [rax+rbp+1]
.text:000000000000241C                 mov     byte ptr [rsp+0E8h+ps], al
.text:0000000000002420                 sub     eax, 30h ; '0'
.text:0000000000002423                 cmp     al, 9
.text:0000000000002425                 jbe     loc_2C59
.text:000000000000242B
.text:000000000000242B loc_242B:                               ; CODE XREF: quotearg_buffer_restyled+650↑j
.text:000000000000242B                 mov     eax, r12d
.text:000000000000242E                 mov     ebx, 30h ; '0'
.text:0000000000002433                 xor     r12d, r12d
.text:0000000000002436                 jmp     loc_1FE8
.text:0000000000002436 ; ---------------------------------------------------------------------------
.text:000000000000243B                 align 20h
.text:0000000000002440
.text:0000000000002440 loc_2440:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002440                                         ; DATA XREF: .rodata:jpt_233A↓o
.text:0000000000002440                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 37,43-58,65-90,93,95,97-122
.text:0000000000002445                 mov     r12d, r10d
.text:0000000000002448                 setz    dl
.text:000000000000244B                 xor     r10d, r10d
.text:000000000000244E                 xor     eax, eax
.text:0000000000002450                 jmp     loc_1FE8
.text:0000000000002450 ; ---------------------------------------------------------------------------
.text:0000000000002455                 align 8
.text:0000000000002458
.text:0000000000002458 loc_2458:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002458                                         ; DATA XREF: .rodata:jpt_233A↓o
.text:0000000000002458                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 35,126
.text:000000000000245D                 setz    dl
.text:0000000000002460                 xor     r10d, r10d
.text:0000000000002463                 jmp     loc_2228
.text:0000000000002463 ; ---------------------------------------------------------------------------
.text:0000000000002468                 align 10h
.text:0000000000002470
.text:0000000000002470 loc_2470:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002470                                         ; DATA XREF: .rodata:jpt_233A↓o
.text:0000000000002470                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000002475                 setz    dl
.text:0000000000002478                 xor     r10d, r10d
.text:000000000000247B                 xor     r12d, r12d
.text:000000000000247E                 jmp     loc_2231
.text:000000000000247E ; ---------------------------------------------------------------------------
.text:0000000000002483                 align 8
.text:0000000000002488
.text:0000000000002488 loc_2488:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002488                                         ; DATA XREF: .rodata:jpt_233A↓o
.text:0000000000002488                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA case 32
.text:000000000000248D                 mov     r12d, r10d
.text:0000000000002490                 mov     ebx, 20h ; ' '
.text:0000000000002495                 setz    dl
.text:0000000000002498                 xor     r10d, r10d
.text:000000000000249B                 jmp     loc_2231
.text:00000000000024A0 ; ---------------------------------------------------------------------------
.text:00000000000024A0
.text:00000000000024A0 loc_24A0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000024A0                                         ; DATA XREF: .rodata:jpt_233A↓o
.text:00000000000024A0                 mov     edx, 0Dh        ; jumptable 00000000000126DA case 13
.text:00000000000024A5                 xor     r10d, r10d
.text:00000000000024A8                 mov     ebx, 72h ; 'r'
.text:00000000000024AD                 jmp     loc_20E2
.text:00000000000024AD ; ---------------------------------------------------------------------------
.text:00000000000024B2                 align 8
.text:00000000000024B8
.text:00000000000024B8 loc_24B8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000024B8                                         ; DATA XREF: .rodata:jpt_233A↓o
.text:00000000000024B8                 mov     ebx, 76h ; 'v'  ; jumptable 00000000000126DA case 11
.text:00000000000024BD                 jmp     loc_2160
.text:00000000000024BD ; ---------------------------------------------------------------------------
.text:00000000000024C2                 align 8
.text:00000000000024C8
.text:00000000000024C8 loc_24C8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000024C8                                         ; DATA XREF: .rodata:jpt_233A↓o
.text:00000000000024C8                 mov     edx, 9          ; jumptable 00000000000126DA case 9
.text:00000000000024CD                 xor     r10d, r10d
.text:00000000000024D0                 mov     ebx, 74h ; 't'
.text:00000000000024D5                 jmp     loc_20E2
.text:00000000000024D5 ; ---------------------------------------------------------------------------
.text:00000000000024DA                 align 20h
.text:00000000000024E0
.text:00000000000024E0 loc_24E0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000024E0                                         ; DATA XREF: .rodata:jpt_233A↓o
.text:00000000000024E0                 mov     ebx, 62h ; 'b'  ; jumptable 00000000000126DA case 8
.text:00000000000024E5                 jmp     loc_2160
.text:00000000000024E5 ; ---------------------------------------------------------------------------
.text:00000000000024EA                 align 10h
.text:00000000000024F0
.text:00000000000024F0 loc_24F0:                               ; CODE XREF: quotearg_buffer_restyled+178↑j
.text:00000000000024F0                                         ; quotearg_buffer_restyled+1B1↑j
.text:00000000000024F0                 xor     r10d, r10d
.text:00000000000024F3                 jmp     loc_1F90
.text:00000000000024F3 ; ---------------------------------------------------------------------------
.text:00000000000024F8                 align 20h
.text:0000000000002500
.text:0000000000002500 loc_2500:                               ; CODE XREF: quotearg_buffer_restyled+36D↑j
.text:0000000000002500                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002505                 jnz     loc_2E70
.text:000000000000250B
.text:000000000000250B loc_250B:                               ; CODE XREF: quotearg_buffer_restyled+38F↑j
.text:000000000000250B                 add     rbp, 1
.text:000000000000250F                 mov     eax, r8d
.text:0000000000002512                 xor     r12d, r12d
.text:0000000000002515                 mov     ebx, 5Ch ; '\'
.text:000000000000251A                 jmp     loc_202C
.text:000000000000251A ; ---------------------------------------------------------------------------
.text:000000000000251F                 align 20h
.text:0000000000002520
.text:0000000000002520 loc_2520:                               ; CODE XREF: quotearg_buffer_restyled+105↑j
.text:0000000000002520                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002525                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000252A                 mov     r12d, r8d
.text:000000000000252D                 mov     rbp, r11
.text:0000000000002530                 setz    dl
.text:0000000000002533                 mov     eax, ebx
.text:0000000000002535                 test    r15, r15
.text:0000000000002538                 setz    cl
.text:000000000000253B                 and     eax, edx
.text:000000000000253D                 and     al, cl
.text:000000000000253F                 jnz     loc_2FA6
.text:0000000000002545                 mov     eax, ebx
.text:0000000000002547                 xor     eax, 1
.text:000000000000254A                 and     dl, al
.text:000000000000254C                 jz      loc_2EBC
.text:0000000000002552                 cmp     [rsp+0E8h+var_6C], 0
.text:0000000000002557                 jz      loc_2EBA
.text:000000000000255D                 cmp     [rsp+0E8h+var_DA], 0
.text:0000000000002562                 jnz     loc_2F5D
.text:0000000000002568                 test    r13, r13
.text:000000000000256B                 setz    al
.text:000000000000256E                 cmp     [rsp+0E8h+var_98], 0
.text:0000000000002574                 setnz   dl
.text:0000000000002577                 and     al, dl
.text:0000000000002579                 jz      loc_2F9C
.text:000000000000257F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000002584
.text:0000000000002584 loc_2584:                               ; CODE XREF: quotearg_buffer_restyled+121D↓j
.text:0000000000002584                 lea     rbx, asc_49D5   ; "'"
.text:000000000000258B                 mov     byte ptr [r14], 27h ; '''
.text:000000000000258F                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000002597                 mov     r15d, 1
.text:000000000000259D                 mov     [rsp+0E8h+n], 1
.text:00000000000025A6                 mov     [rsp+0E8h+var_D9], 0
.text:00000000000025AB                 mov     [rsp+0E8h+s2], rbx
.text:00000000000025B0                 mov     [rsp+0E8h+var_6C], al
.text:00000000000025B4                 jmp     loc_1E93
.text:00000000000025B4 ; ---------------------------------------------------------------------------
.text:00000000000025B9                 align 20h
.text:00000000000025C0
.text:00000000000025C0 loc_25C0:                               ; CODE XREF: quotearg_buffer_restyled+2F8↑j
.text:00000000000025C0                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000025C5                 jnz     loc_2E70
.text:00000000000025CB                 test    r13, r13
.text:00000000000025CE                 jz      loc_29D0
.text:00000000000025D4                 xor     edx, edx
.text:00000000000025D6                 cmp     [rsp+0E8h+var_98], 0
.text:00000000000025DC                 jnz     loc_29D0
.text:00000000000025E2
.text:00000000000025E2 loc_25E2:                               ; CODE XREF: quotearg_buffer_restyled+C44↓j
.text:00000000000025E2                                         ; quotearg_buffer_restyled+122A↓j
.text:00000000000025E2                 mov     [rsp+0E8h+var_98], r13
.text:00000000000025E7                 add     r15, 3
.text:00000000000025EB                 xor     eax, eax
.text:00000000000025ED                 mov     [rsp+0E8h+var_6C], r12b
.text:00000000000025F2                 xor     r8d, r8d
.text:00000000000025F5                 mov     r13, rdx
.text:00000000000025F8                 mov     ebx, 27h ; '''
.text:00000000000025FD                 jmp     loc_2019
.text:00000000000025FD ; ---------------------------------------------------------------------------
.text:0000000000002602                 align 8
.text:0000000000002608
.text:0000000000002608 loc_2608:                               ; CODE XREF: quotearg_buffer_restyled+2D3↑j
.text:0000000000002608                 test    byte ptr [rsp+0E8h+var_70], 4
.text:000000000000260D                 jz      short loc_2630
.text:000000000000260F                 lea     rcx, [rbp+2]
.text:0000000000002613                 cmp     rcx, r11
.text:0000000000002616                 jnb     short loc_2630
.text:0000000000002618                 mov     rax, [rsp+0E8h+s]
.text:000000000000261D                 cmp     byte ptr [rax+rbp+1], 3Fh ; '?'
.text:0000000000002622                 jz      loc_2DB2
.text:0000000000002628                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000002630
.text:0000000000002630 loc_2630:                               ; CODE XREF: quotearg_buffer_restyled+84D↑j
.text:0000000000002630                                         ; quotearg_buffer_restyled+856↑j ...
.text:0000000000002630                 xor     edx, edx
.text:0000000000002632                 xor     r12d, r12d
.text:0000000000002635                 xor     eax, eax
.text:0000000000002637                 mov     ebx, 3Fh ; '?'
.text:000000000000263C                 jmp     loc_1FE8
.text:000000000000263C ; ---------------------------------------------------------------------------
.text:0000000000002641                 align 8
.text:0000000000002648
.text:0000000000002648 loc_2648:                               ; CODE XREF: quotearg_buffer_restyled+2CA↑j
.text:0000000000002648                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000264D                 jnz     loc_2E70
.text:0000000000002653                 xor     r12d, r12d
.text:0000000000002656                 xor     eax, eax
.text:0000000000002658                 mov     ebx, 3Fh ; '?'
.text:000000000000265D                 jmp     loc_2019
.text:000000000000265D ; ---------------------------------------------------------------------------
.text:0000000000002662                 align 8
.text:0000000000002668
.text:0000000000002668 loc_2668:                               ; CODE XREF: quotearg_buffer_restyled+4FE↑j
.text:0000000000002668                 lea     rax, [rsp+0E8h+var_48]
.text:0000000000002670                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000002674                 mov     [rsp+0E8h+var_48], 0
.text:0000000000002680                 mov     [rsp+0E8h+ps], rax
.text:0000000000002685                 jnz     short loc_26B4
.text:0000000000002687                 mov     rdi, [rsp+0E8h+s] ; s
.text:000000000000268C                 mov     byte ptr [rsp+0E8h+var_A8], r8b
.text:0000000000002691                 mov     byte ptr [rsp+0E8h+var_B0], r10b
.text:0000000000002696                 mov     [rsp+0E8h+var_B8], r9
.text:000000000000269B                 call    _strlen
.text:00000000000026A0                 movzx   r8d, byte ptr [rsp+0E8h+var_A8]
.text:00000000000026A6                 movzx   r10d, byte ptr [rsp+0E8h+var_B0]
.text:00000000000026AC                 mov     r11, rax
.text:00000000000026AF                 mov     r9, [rsp+0E8h+var_B8]
.text:00000000000026B4
.text:00000000000026B4 loc_26B4:                               ; CODE XREF: quotearg_buffer_restyled+8C5↑j
.text:00000000000026B4                 lea     rax, [rsp+0E8h+wc]
.text:00000000000026BC                 xor     ecx, ecx
.text:00000000000026BE                 mov     [rsp+0E8h+var_6A], bl
.text:00000000000026C2                 mov     [rsp+0E8h+var_6B], r8b
.text:00000000000026C7                 mov     rbx, rcx
.text:00000000000026CA                 mov     [rsp+0E8h+var_60], r9
.text:00000000000026D2                 mov     [rsp+0E8h+var_B0], rax
.text:00000000000026D7                 mov     [rsp+0E8h+var_69], r10b
.text:00000000000026DC                 mov     [rsp+0E8h+var_68], r15
.text:00000000000026E4                 mov     [rsp+0E8h+var_A8], r14
.text:00000000000026E9                 mov     [rsp+0E8h+var_78], r13
.text:00000000000026EE                 mov     [rsp+0E8h+var_B8], r11
.text:00000000000026F3
.text:00000000000026F3 loc_26F3:                               ; CODE XREF: quotearg_buffer_restyled+9AF↓j
.text:00000000000026F3                 mov     rax, [rsp+0E8h+s]
.text:00000000000026F8                 lea     r14, [rbp+rbx+0]
.text:00000000000026FD                 mov     rdx, [rsp+0E8h+var_B8]
.text:0000000000002702                 mov     rcx, [rsp+0E8h+ps]
.text:0000000000002707                 mov     rdi, [rsp+0E8h+var_B0]
.text:000000000000270C                 lea     r13, [rax+r14]
.text:0000000000002710                 sub     rdx, r14
.text:0000000000002713                 mov     rsi, r13
.text:0000000000002716                 call    rpl_mbrtowc
.text:000000000000271B                 test    rax, rax
.text:000000000000271E                 mov     r15, rax
.text:0000000000002721                 jz      short loc_2771
.text:0000000000002723                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000002727                 jz      loc_2D45
.text:000000000000272D                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000002731                 jz      loc_2CD1
.text:0000000000002737                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000273C                 setz    al
.text:000000000000273F                 and     al, [rsp+0E8h+var_D9]
.text:0000000000002743                 jnz     loc_28E0
.text:0000000000002749
.text:0000000000002749 loc_2749:                               ; CODE XREF: quotearg_buffer_restyled+B24↓j
.text:0000000000002749                                         ; quotearg_buffer_restyled+B47↓j
.text:0000000000002749                 mov     edi, [rsp+0E8h+wc] ; wc
.text:0000000000002750                 call    _iswprint
.text:0000000000002755                 mov     rdi, [rsp+0E8h+ps] ; ps
.text:000000000000275A                 test    eax, eax
.text:000000000000275C                 mov     eax, 0
.text:0000000000002761                 cmovz   r12d, eax
.text:0000000000002765                 add     rbx, r15
.text:0000000000002768                 call    _mbsinit
.text:000000000000276D                 test    eax, eax
.text:000000000000276F                 jz      short loc_26F3
.text:0000000000002771
.text:0000000000002771 loc_2771:                               ; CODE XREF: quotearg_buffer_restyled+961↑j
.text:0000000000002771                 mov     edx, r12d
.text:0000000000002774                 mov     rdi, rbx
.text:0000000000002777                 movzx   r8d, [rsp+0E8h+var_6B]
.text:000000000000277D                 xor     edx, 1
.text:0000000000002780                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000002785                 movzx   r10d, [rsp+0E8h+var_69]
.text:000000000000278B                 and     dl, [rsp+0E8h+var_DB]
.text:000000000000278F                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000002797                 mov     r14, [rsp+0E8h+var_A8]
.text:000000000000279C                 mov     r13, [rsp+0E8h+var_78]
.text:00000000000027A1                 mov     r11, [rsp+0E8h+var_B8]
.text:00000000000027A6
.text:00000000000027A6 loc_27A6:                               ; CODE XREF: quotearg_buffer_restyled+F80↓j
.text:00000000000027A6                                         ; quotearg_buffer_restyled+FB8↓j
.text:00000000000027A6                 cmp     rdi, 1
.text:00000000000027AA                 jbe     loc_2DAB
.text:00000000000027B0
.text:00000000000027B0 loc_27B0:                               ; CODE XREF: quotearg_buffer_restyled+EE9↓j
.text:00000000000027B0                 mov     rcx, rdi
.text:00000000000027B3                 xor     esi, esi
.text:00000000000027B5                 movzx   r9d, [rsp+0E8h+var_D9]
.text:00000000000027BB                 add     rcx, rbp
.text:00000000000027BE                 mov     rdi, [rsp+0E8h+s]
.text:00000000000027C3                 jmp     loc_287E
.text:00000000000027C3 ; ---------------------------------------------------------------------------
.text:00000000000027C8                 align 10h
.text:00000000000027D0
.text:00000000000027D0 loc_27D0:                               ; CODE XREF: quotearg_buffer_restyled+AC0↓j
.text:00000000000027D0                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000027D5                 setz    al
.text:00000000000027D8                 test    r9b, r9b
.text:00000000000027DB                 jnz     loc_2C90
.text:00000000000027E1                 mov     esi, r8d
.text:00000000000027E4                 xor     esi, 1
.text:00000000000027E7                 and     al, sil
.text:00000000000027EA                 jz      short loc_281B
.text:00000000000027EC                 cmp     r13, r15
.text:00000000000027EF                 jbe     short loc_27F6
.text:00000000000027F1                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000027F6
.text:00000000000027F6 loc_27F6:                               ; CODE XREF: quotearg_buffer_restyled+A2F↑j
.text:00000000000027F6                 lea     rsi, [r15+1]
.text:00000000000027FA                 cmp     r13, rsi
.text:00000000000027FD                 jbe     short loc_2805
.text:00000000000027FF                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000002805
.text:0000000000002805 loc_2805:                               ; CODE XREF: quotearg_buffer_restyled+A3D↑j
.text:0000000000002805                 lea     rsi, [r15+2]
.text:0000000000002809                 cmp     r13, rsi
.text:000000000000280C                 jbe     short loc_2814
.text:000000000000280E                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000002814
.text:0000000000002814 loc_2814:                               ; CODE XREF: quotearg_buffer_restyled+A4C↑j
.text:0000000000002814                 add     r15, 3
.text:0000000000002818                 mov     r8d, eax
.text:000000000000281B
.text:000000000000281B loc_281B:                               ; CODE XREF: quotearg_buffer_restyled+A2A↑j
.text:000000000000281B                 cmp     r13, r15
.text:000000000000281E                 jbe     short loc_2825
.text:0000000000002820                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000002825
.text:0000000000002825 loc_2825:                               ; CODE XREF: quotearg_buffer_restyled+A5E↑j
.text:0000000000002825                 lea     rax, [r15+1]
.text:0000000000002829                 cmp     r13, rax
.text:000000000000282C                 jbe     short loc_283B
.text:000000000000282E                 mov     eax, ebx
.text:0000000000002830                 shr     al, 6
.text:0000000000002833                 add     eax, 30h ; '0'
.text:0000000000002836                 mov     [r14+r15+1], al
.text:000000000000283B
.text:000000000000283B loc_283B:                               ; CODE XREF: quotearg_buffer_restyled+A6C↑j
.text:000000000000283B                 lea     rax, [r15+2]
.text:000000000000283F                 cmp     r13, rax
.text:0000000000002842                 jbe     short loc_2854
.text:0000000000002844                 mov     eax, ebx
.text:0000000000002846                 shr     al, 3
.text:0000000000002849                 and     eax, 7
.text:000000000000284C                 add     eax, 30h ; '0'
.text:000000000000284F                 mov     [r14+r15+2], al
.text:0000000000002854
.text:0000000000002854 loc_2854:                               ; CODE XREF: quotearg_buffer_restyled+A82↑j
.text:0000000000002854                 and     ebx, 7
.text:0000000000002857                 add     rbp, 1
.text:000000000000285B                 add     r15, 3
.text:000000000000285F                 add     ebx, 30h ; '0'
.text:0000000000002862                 cmp     rbp, rcx
.text:0000000000002865                 jnb     loc_2050
.text:000000000000286B                 mov     esi, edx
.text:000000000000286D
.text:000000000000286D loc_286D:                               ; CODE XREF: quotearg_buffer_restyled+B19↓j
.text:000000000000286D                                         ; quotearg_buffer_restyled+EF1↓j
.text:000000000000286D                 cmp     r13, r15
.text:0000000000002870                 jbe     short loc_2876
.text:0000000000002872                 mov     [r14+r15], bl
.text:0000000000002876
.text:0000000000002876 loc_2876:                               ; CODE XREF: quotearg_buffer_restyled+AB0↑j
.text:0000000000002876                 movzx   ebx, byte ptr [rdi+rbp]
.text:000000000000287A                 add     r15, 1
.text:000000000000287E
.text:000000000000287E loc_287E:                               ; CODE XREF: quotearg_buffer_restyled+A03↑j
.text:000000000000287E                 test    dl, dl
.text:0000000000002880                 jnz     loc_27D0
.text:0000000000002886                 mov     eax, esi
.text:0000000000002888                 xor     eax, 1
.text:000000000000288B                 and     eax, r8d
.text:000000000000288E                 test    r10b, r10b
.text:0000000000002891                 jz      short loc_28A1
.text:0000000000002893                 cmp     r13, r15
.text:0000000000002896                 jbe     short loc_289D
.text:0000000000002898                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:000000000000289D
.text:000000000000289D loc_289D:                               ; CODE XREF: quotearg_buffer_restyled+AD6↑j
.text:000000000000289D                 add     r15, 1
.text:00000000000028A1
.text:00000000000028A1 loc_28A1:                               ; CODE XREF: quotearg_buffer_restyled+AD1↑j
.text:00000000000028A1                 add     rbp, 1
.text:00000000000028A5                 cmp     rbp, rcx
.text:00000000000028A8                 jnb     loc_202C
.text:00000000000028AE                 test    al, al
.text:00000000000028B0                 jz      loc_2CAE
.text:00000000000028B6                 cmp     r13, r15
.text:00000000000028B9                 jbe     short loc_28C0
.text:00000000000028BB                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000028C0
.text:00000000000028C0 loc_28C0:                               ; CODE XREF: quotearg_buffer_restyled+AF9↑j
.text:00000000000028C0                 lea     rax, [r15+1]
.text:00000000000028C4                 cmp     r13, rax
.text:00000000000028C7                 jbe     short loc_28CF
.text:00000000000028C9                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:00000000000028CF
.text:00000000000028CF loc_28CF:                               ; CODE XREF: quotearg_buffer_restyled+B07↑j
.text:00000000000028CF                 add     r15, 2
.text:00000000000028D3                 xor     r10d, r10d
.text:00000000000028D6                 xor     r8d, r8d
.text:00000000000028D9                 jmp     short loc_286D
.text:00000000000028D9 ; ---------------------------------------------------------------------------
.text:00000000000028DB                 align 20h
.text:00000000000028E0
.text:00000000000028E0 loc_28E0:                               ; CODE XREF: quotearg_buffer_restyled+983↑j
.text:00000000000028E0                 cmp     r15, 1
.text:00000000000028E4                 jz      loc_2749
.text:00000000000028EA                 mov     rdi, [rsp+0E8h+s]
.text:00000000000028EF                 lea     rcx, [rdi+r15]
.text:00000000000028F3                 lea     rdx, [rdi+r14+1]
.text:00000000000028F8                 lea     r8, [rcx+r14]
.text:00000000000028FC                 jmp     short loc_290D
.text:00000000000028FC ; ---------------------------------------------------------------------------
.text:00000000000028FE                 align 20h
.text:0000000000002900
.text:0000000000002900 loc_2900:                               ; CODE XREF: quotearg_buffer_restyled+B56↓j
.text:0000000000002900                                         ; quotearg_buffer_restyled+B70↓j
.text:0000000000002900                 add     rdx, 1
.text:0000000000002904                 cmp     r8, rdx
.text:0000000000002907                 jz      loc_2749
.text:000000000000290D
.text:000000000000290D loc_290D:                               ; CODE XREF: quotearg_buffer_restyled+B3C↑j
.text:000000000000290D                 movzx   ecx, byte ptr [rdx]
.text:0000000000002910                 sub     ecx, 5Bh ; '['
.text:0000000000002913                 cmp     cl, 21h ; '!'
.text:0000000000002916                 ja      short loc_2900
.text:0000000000002918                 mov     esi, 1
.text:000000000000291D                 shl     rsi, cl
.text:0000000000002920                 mov     rcx, rsi
.text:0000000000002923                 mov     rsi, 20000002Bh
.text:000000000000292D                 test    rcx, rsi
.text:0000000000002930                 jz      short loc_2900
.text:0000000000002932                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000002937                 mov     r13, [rsp+0E8h+var_78]
.text:000000000000293C                 mov     rbp, [rsp+0E8h+var_B8]
.text:0000000000002941                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000002949
.text:0000000000002949 loc_2949:                               ; CODE XREF: quotearg_buffer_restyled+489↑j
.text:0000000000002949                                         ; quotearg_buffer_restyled+C0B↓j ...
.text:0000000000002949                 cmp     [rsp+0E8h+var_DB], 0
.text:000000000000294E                 jz      short loc_2960
.text:0000000000002950                 test    al, al
.text:0000000000002952                 mov     eax, 4
.text:0000000000002957                 cmovz   eax, [rsp+0E8h+var_E0]
.text:000000000000295C                 mov     [rsp+0E8h+var_E0], eax
.text:0000000000002960
.text:0000000000002960 loc_2960:                               ; CODE XREF: quotearg_buffer_restyled+B8E↑j
.text:0000000000002960                                         ; quotearg_buffer_restyled+1205↓j
.text:0000000000002960                 sub     rsp, 8
.text:0000000000002964                 mov     rcx, rbp
.text:0000000000002967                 mov     rsi, r13
.text:000000000000296A                 push    [rsp+0F0h+var_88]
.text:000000000000296E                 push    [rsp+0F8h+var_80]
.text:0000000000002972                 mov     rdi, r14
.text:0000000000002975                 push    0
.text:0000000000002977                 mov     r9d, [rsp+108h+var_70]
.text:000000000000297F                 mov     r8d, [rsp+108h+var_E0]
.text:0000000000002984                 mov     rdx, [rsp+108h+s]
.text:0000000000002989                 and     r9d, 0FFFFFFFDh
.text:000000000000298D                 call    quotearg_buffer_restyled
.text:0000000000002992                 add     rsp, 20h
.text:0000000000002996                 mov     r15, rax
.text:0000000000002999
.text:0000000000002999 loc_2999:                               ; CODE XREF: quotearg_buffer_restyled+1135↓j
.text:0000000000002999                                         ; quotearg_buffer_restyled+1140↓j ...
.text:0000000000002999                 mov     rbx, [rsp+0E8h+var_40]
.text:00000000000029A1                 xor     rbx, fs:28h
.text:00000000000029AA                 mov     rax, r15
.text:00000000000029AD                 jnz     loc_2FB3
.text:00000000000029B3                 add     rsp, 0B8h
.text:00000000000029BA                 pop     rbx
.text:00000000000029BB                 pop     rbp
.text:00000000000029BC                 pop     r12
.text:00000000000029BE                 pop     r13
.text:00000000000029C0                 pop     r14
.text:00000000000029C2                 pop     r15
.text:00000000000029C4                 retn
.text:00000000000029C4 ; ---------------------------------------------------------------------------
.text:00000000000029C5                 align 8
.text:00000000000029C8
.text:00000000000029C8 loc_29C8:                               ; CODE XREF: quotearg_buffer_restyled+3B2↑j
.text:00000000000029C8                 mov     rbp, r11
.text:00000000000029CB                 jmp     loc_2949
.text:00000000000029D0 ; ---------------------------------------------------------------------------
.text:00000000000029D0
.text:00000000000029D0 loc_29D0:                               ; CODE XREF: quotearg_buffer_restyled+80E↑j
.text:00000000000029D0                                         ; quotearg_buffer_restyled+81C↑j
.text:00000000000029D0                 cmp     r13, r15
.text:00000000000029D3                 jbe     short loc_29DA
.text:00000000000029D5                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000029DA
.text:00000000000029DA loc_29DA:                               ; CODE XREF: quotearg_buffer_restyled+C13↑j
.text:00000000000029DA                 lea     rax, [r15+1]
.text:00000000000029DE                 cmp     r13, rax
.text:00000000000029E1                 jbe     short loc_29E9
.text:00000000000029E3                 mov     byte ptr [r14+r15+1], 5Ch ; '\'
.text:00000000000029E9
.text:00000000000029E9 loc_29E9:                               ; CODE XREF: quotearg_buffer_restyled+C21↑j
.text:00000000000029E9                 lea     rax, [r15+2]
.text:00000000000029ED                 cmp     r13, rax
.text:00000000000029F0                 jbe     loc_2FE2
.text:00000000000029F6                 mov     rdx, r13
.text:00000000000029F9                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:00000000000029FF                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000002A04                 jmp     loc_25E2
.text:0000000000002A09 ; ---------------------------------------------------------------------------
.text:0000000000002A09
.text:0000000000002A09 loc_2A09:                               ; CODE XREF: quotearg_buffer_restyled+643↑j
.text:0000000000002A09                 mov     eax, r12d
.text:0000000000002A0C                 mov     ebx, 30h ; '0'
.text:0000000000002A11                 xor     r12d, r12d
.text:0000000000002A14                 jmp     loc_2019
.text:0000000000002A19 ; ---------------------------------------------------------------------------
.text:0000000000002A19
.text:0000000000002A19 loc_2A19:                               ; CODE XREF: quotearg_buffer_restyled+623↑j
.text:0000000000002A19                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000002A1F                 jmp     loc_23E9
.text:0000000000002A24 ; ---------------------------------------------------------------------------
.text:0000000000002A24
.text:0000000000002A24 loc_2A24:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002A24                                         ; DATA XREF: .rodata:jpt_1E51↓o
.text:0000000000002A24                 test    ebx, ebx        ; jumptable 00000000000121F1 case 4
.text:0000000000002A26                 jnz     loc_1E53        ; jumptable 00000000000121F1 case 1
.text:0000000000002A2C                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002A31
.text:0000000000002A31 loc_2A31:                               ; CODE XREF: quotearg_buffer_restyled+11FD↓j
.text:0000000000002A31                 test    r13, r13
.text:0000000000002A34                 jnz     loc_2FCA
.text:0000000000002A3A                 lea     rax, asc_49D5   ; "'"
.text:0000000000002A41                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002A4A                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002A4F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002A54                 xor     r12d, r12d
.text:0000000000002A57                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000002A5C                 mov     [rsp+0E8h+n], 1
.text:0000000000002A65                 mov     [rsp+0E8h+s2], rax
.text:0000000000002A6A                 mov     r15d, 1
.text:0000000000002A70                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000002A78                 jmp     loc_1E93
.text:0000000000002A78 ; ---------------------------------------------------------------------------
.text:0000000000002A7D                 align 20h
.text:0000000000002A80
.text:0000000000002A80 loc_2A80:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002A80                                         ; DATA XREF: .rodata:jpt_1E51↓o
.text:0000000000002A80                 test    ebx, ebx        ; jumptable 00000000000121F1 case 5
.text:0000000000002A82                 jnz     loc_2E7D
.text:0000000000002A88                 test    r13, r13
.text:0000000000002A8B                 jz      loc_2CB6
.text:0000000000002A91                 mov     byte ptr [r14], 22h ; '"'
.text:0000000000002A95                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002A9A                 xor     r12d, r12d
.text:0000000000002A9D                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002AA2                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002AAB
.text:0000000000002AAB loc_2AAB:                               ; CODE XREF: quotearg_buffer_restyled+F0C↓j
.text:0000000000002AAB                 lea     rax, unk_49D3
.text:0000000000002AB2                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000002AB7                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002ABC                 mov     [rsp+0E8h+n], 1
.text:0000000000002AC5                 mov     r15d, 1
.text:0000000000002ACB                 mov     [rsp+0E8h+s2], rax
.text:0000000000002AD0                 jmp     loc_1E93
.text:0000000000002AD5 ; ---------------------------------------------------------------------------
.text:0000000000002AD5
.text:0000000000002AD5 loc_2AD5:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002AD5                                         ; DATA XREF: .rodata:jpt_1E51↓o
.text:0000000000002AD5                 lea     rax, unk_49D3   ; jumptable 00000000000121F1 case 6
.text:0000000000002ADC                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002AE1                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002AE6                 xor     r12d, r12d
.text:0000000000002AE9                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002AF2                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000002AF7                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002AFC                 mov     [rsp+0E8h+n], 1
.text:0000000000002B05                 xor     r15d, r15d
.text:0000000000002B08                 mov     [rsp+0E8h+s2], rax
.text:0000000000002B0D                 mov     [rsp+0E8h+var_E0], 5
.text:0000000000002B15                 jmp     loc_1E93
.text:0000000000002B1A ; ---------------------------------------------------------------------------
.text:0000000000002B1A
.text:0000000000002B1A loc_2B1A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002B1A                                         ; DATA XREF: .rodata:jpt_1E51↓o
.text:0000000000002B1A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 7
.text:0000000000002B1F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002B24                 xor     r12d, r12d
.text:0000000000002B27                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002B30                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000002B35                 xor     r15d, r15d
.text:0000000000002B38                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002B3D                 mov     [rsp+0E8h+n], 0
.text:0000000000002B46                 mov     [rsp+0E8h+s2], 0
.text:0000000000002B4F                 jmp     loc_1E93
.text:0000000000002B54 ; ---------------------------------------------------------------------------
.text:0000000000002B54
.text:0000000000002B54 loc_2B54:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002B54                                         ; DATA XREF: .rodata:jpt_1E51↓o
.text:0000000000002B54                 cmp     [rsp+0E8h+var_E0], 0Ah ; jumptable 00000000000121F1 cases 8-10
.text:0000000000002B59                 jz      short loc_2BB1
.text:0000000000002B5B                 lea     rsi, asc_49D7   ; "`"
.text:0000000000002B62                 xor     edi, edi        ; domainname
.text:0000000000002B64                 mov     edx, 5          ; category
.text:0000000000002B69                 call    _dcgettext
.text:0000000000002B6E                 mov     rcx, rax
.text:0000000000002B71                 mov     [rsp+0E8h+var_80], rax
.text:0000000000002B76                 lea     rax, asc_49D7   ; "`"
.text:0000000000002B7D                 cmp     rcx, rax
.text:0000000000002B80                 jz      loc_2F1E
.text:0000000000002B86
.text:0000000000002B86 loc_2B86:                               ; CODE XREF: quotearg_buffer_restyled+116F↓j
.text:0000000000002B86                 lea     rsi, asc_49D5   ; "'"
.text:0000000000002B8D                 xor     edi, edi        ; domainname
.text:0000000000002B8F                 mov     edx, 5          ; category
.text:0000000000002B94                 call    _dcgettext
.text:0000000000002B99                 mov     rcx, rax
.text:0000000000002B9C                 mov     [rsp+0E8h+var_88], rax
.text:0000000000002BA1                 lea     rax, asc_49D5   ; "'"
.text:0000000000002BA8                 cmp     rcx, rax
.text:0000000000002BAB                 jz      loc_2F34
.text:0000000000002BB1
.text:0000000000002BB1 loc_2BB1:                               ; CODE XREF: quotearg_buffer_restyled+D99↑j
.text:0000000000002BB1                                         ; quotearg_buffer_restyled+1185↓j
.text:0000000000002BB1                 xor     r15d, r15d
.text:0000000000002BB4                 test    ebx, ebx
.text:0000000000002BB6                 jz      loc_2D7D
.text:0000000000002BBC
.text:0000000000002BBC loc_2BBC:                               ; CODE XREF: quotearg_buffer_restyled+FC7↓j
.text:0000000000002BBC                                         ; quotearg_buffer_restyled+FE6↓j
.text:0000000000002BBC                 test    ebx, ebx
.text:0000000000002BBE                 mov     rbx, [rsp+0E8h+var_88]
.text:0000000000002BC3                 setnz   [rsp+0E8h+var_D9]
.text:0000000000002BC8                 xor     r12d, r12d
.text:0000000000002BCB                 mov     rdi, rbx        ; s
.text:0000000000002BCE                 call    _strlen
.text:0000000000002BD3                 mov     [rsp+0E8h+s2], rbx
.text:0000000000002BD8                 mov     [rsp+0E8h+n], rax
.text:0000000000002BDD                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002BE2                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002BE7                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002BF0                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002BF5                 jmp     loc_1E93
.text:0000000000002BFA ; ---------------------------------------------------------------------------
.text:0000000000002BFA
.text:0000000000002BFA loc_2BFA:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002BFA                                         ; DATA XREF: .rodata:jpt_1E51↓o
.text:0000000000002BFA                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 0
.text:0000000000002BFF                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002C04                 xor     r12d, r12d
.text:0000000000002C07                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002C10                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000002C15                 xor     r15d, r15d
.text:0000000000002C18                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000002C1D                 mov     [rsp+0E8h+n], 0
.text:0000000000002C26                 mov     [rsp+0E8h+s2], 0
.text:0000000000002C2F                 jmp     loc_1E93
.text:0000000000002C34 ; ---------------------------------------------------------------------------
.text:0000000000002C34
.text:0000000000002C34 loc_2C34:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002C34                                         ; DATA XREF: .rodata:jpt_1E51↓o
.text:0000000000002C34                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 3
.text:0000000000002C39                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002C3E                 xor     r12d, r12d
.text:0000000000002C41                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002C4A                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000002C4F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002C54                 jmp     loc_1E73
.text:0000000000002C59 ; ---------------------------------------------------------------------------
.text:0000000000002C59
.text:0000000000002C59 loc_2C59:                               ; CODE XREF: quotearg_buffer_restyled+665↑j
.text:0000000000002C59                 cmp     r13, r15
.text:0000000000002C5C                 jbe     short loc_2C63
.text:0000000000002C5E                 mov     byte ptr [r14+r15], 30h ; '0'
.text:0000000000002C63
.text:0000000000002C63 loc_2C63:                               ; CODE XREF: quotearg_buffer_restyled+E9C↑j
.text:0000000000002C63                 lea     rax, [rcx+2]
.text:0000000000002C67                 cmp     r13, rax
.text:0000000000002C6A                 jbe     short loc_2C72
.text:0000000000002C6C                 mov     byte ptr [r14+rcx+2], 30h ; '0'
.text:0000000000002C72
.text:0000000000002C72 loc_2C72:                               ; CODE XREF: quotearg_buffer_restyled+EAA↑j
.text:0000000000002C72                 mov     eax, r12d
.text:0000000000002C75                 lea     r15, [rcx+3]
.text:0000000000002C79                 xor     r12d, r12d
.text:0000000000002C7C                 mov     ebx, 30h ; '0'
.text:0000000000002C81                 jmp     loc_1FE8
.text:0000000000002C81 ; ---------------------------------------------------------------------------
.text:0000000000002C86                 align 10h
.text:0000000000002C90
.text:0000000000002C90 loc_2C90:                               ; CODE XREF: quotearg_buffer_restyled+A1B↑j
.text:0000000000002C90                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000002C95                 mov     rbp, r11
.text:0000000000002C98                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000002C9C                 jmp     loc_2949
.text:0000000000002CA1 ; ---------------------------------------------------------------------------
.text:0000000000002CA1
.text:0000000000002CA1 loc_2CA1:                               ; CODE XREF: quotearg_buffer_restyled+549↑j
.text:0000000000002CA1                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000002CA6                 xor     r12d, r12d
.text:0000000000002CA9                 jmp     loc_27B0
.text:0000000000002CAE ; ---------------------------------------------------------------------------
.text:0000000000002CAE
.text:0000000000002CAE loc_2CAE:                               ; CODE XREF: quotearg_buffer_restyled+AF0↑j
.text:0000000000002CAE                 xor     r10d, r10d
.text:0000000000002CB1                 jmp     loc_286D
.text:0000000000002CB6 ; ---------------------------------------------------------------------------
.text:0000000000002CB6
.text:0000000000002CB6 loc_2CB6:                               ; CODE XREF: quotearg_buffer_restyled+CCB↑j
.text:0000000000002CB6                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002CBF                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002CC4                 xor     r12d, r12d
.text:0000000000002CC7                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002CCC                 jmp     loc_2AAB
.text:0000000000002CD1 ; ---------------------------------------------------------------------------
.text:0000000000002CD1
.text:0000000000002CD1 loc_2CD1:                               ; CODE XREF: quotearg_buffer_restyled+971↑j
.text:0000000000002CD1                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000002CD6                 mov     rsi, r14
.text:0000000000002CD9                 mov     rcx, r13
.text:0000000000002CDC                 mov     rax, rbx
.text:0000000000002CDF                 mov     rdi, rbx
.text:0000000000002CE2                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000002CE8                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000002CED                 mov     r9, [rsp+0E8h+var_60]
.text:0000000000002CF5                 cmp     rsi, r11
.text:0000000000002CF8                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000002CFE                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000002D06                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000002D0B                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000002D10                 jnb     short loc_2D38
.text:0000000000002D12                 cmp     byte ptr [rcx], 0
.text:0000000000002D15                 jnz     short loc_2D27
.text:0000000000002D17                 jmp     short loc_2D38
.text:0000000000002D17 ; ---------------------------------------------------------------------------
.text:0000000000002D19                 align 20h
.text:0000000000002D20
.text:0000000000002D20 loc_2D20:                               ; CODE XREF: quotearg_buffer_restyled+F73↓j
.text:0000000000002D20                 cmp     byte ptr [r9+rax], 0
.text:0000000000002D25                 jz      short loc_2D35
.text:0000000000002D27
.text:0000000000002D27 loc_2D27:                               ; CODE XREF: quotearg_buffer_restyled+F55↑j
.text:0000000000002D27                 add     rax, 1
.text:0000000000002D2B                 lea     rdx, [rbp+rax+0]
.text:0000000000002D30                 cmp     r11, rdx
.text:0000000000002D33                 ja      short loc_2D20
.text:0000000000002D35
.text:0000000000002D35 loc_2D35:                               ; CODE XREF: quotearg_buffer_restyled+F65↑j
.text:0000000000002D35                 mov     rdi, rax
.text:0000000000002D38
.text:0000000000002D38 loc_2D38:                               ; CODE XREF: quotearg_buffer_restyled+F50↑j
.text:0000000000002D38                                         ; quotearg_buffer_restyled+F57↑j
.text:0000000000002D38                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000002D3D                 xor     r12d, r12d
.text:0000000000002D40                 jmp     loc_27A6
.text:0000000000002D45 ; ---------------------------------------------------------------------------
.text:0000000000002D45
.text:0000000000002D45 loc_2D45:                               ; CODE XREF: quotearg_buffer_restyled+967↑j
.text:0000000000002D45                 mov     rdi, rbx
.text:0000000000002D48                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000002D4E                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000002D53                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000002D59                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000002D61                 xor     r12d, r12d
.text:0000000000002D64                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000002D69                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000002D6E                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000002D73                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000002D78                 jmp     loc_27A6
.text:0000000000002D7D ; ---------------------------------------------------------------------------
.text:0000000000002D7D
.text:0000000000002D7D loc_2D7D:                               ; CODE XREF: quotearg_buffer_restyled+DF6↑j
.text:0000000000002D7D                 mov     rdx, [rsp+0E8h+var_80]
.text:0000000000002D82                 movzx   eax, byte ptr [rdx]
.text:0000000000002D85                 test    al, al
.text:0000000000002D87                 jz      loc_2BBC
.text:0000000000002D8D                 nop     dword ptr [rax]
.text:0000000000002D90
.text:0000000000002D90 loc_2D90:                               ; CODE XREF: quotearg_buffer_restyled+FE4↓j
.text:0000000000002D90                 cmp     r13, r15
.text:0000000000002D93                 jbe     short loc_2D99
.text:0000000000002D95                 mov     [r14+r15], al
.text:0000000000002D99
.text:0000000000002D99 loc_2D99:                               ; CODE XREF: quotearg_buffer_restyled+FD3↑j
.text:0000000000002D99                 add     r15, 1
.text:0000000000002D9D                 movzx   eax, byte ptr [rdx+r15]
.text:0000000000002DA2                 test    al, al
.text:0000000000002DA4                 jnz     short loc_2D90
.text:0000000000002DA6                 jmp     loc_2BBC
.text:0000000000002DAB ; ---------------------------------------------------------------------------
.text:0000000000002DAB
.text:0000000000002DAB loc_2DAB:                               ; CODE XREF: quotearg_buffer_restyled+9EA↑j
.text:0000000000002DAB                 mov     eax, edx
.text:0000000000002DAD                 jmp     loc_2307
.text:0000000000002DB2 ; ---------------------------------------------------------------------------
.text:0000000000002DB2
.text:0000000000002DB2 loc_2DB2:                               ; CODE XREF: quotearg_buffer_restyled+862↑j
.text:0000000000002DB2                 movzx   ebx, byte ptr [rax+rcx]
.text:0000000000002DB6                 cmp     bl, 3Eh ; '>'
.text:0000000000002DB9                 ja      loc_2630
.text:0000000000002DBF                 mov     rax, 7000A38200000000h
.text:0000000000002DC9                 bt      rax, rbx
.text:0000000000002DCD                 jnb     loc_2630
.text:0000000000002DD3                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002DD8                 jnz     loc_2FC2
.text:0000000000002DDE                 cmp     r13, r15
.text:0000000000002DE1                 jbe     short loc_2DE8
.text:0000000000002DE3                 mov     byte ptr [r14+r15], 3Fh ; '?'
.text:0000000000002DE8
.text:0000000000002DE8 loc_2DE8:                               ; CODE XREF: quotearg_buffer_restyled+1021↑j
.text:0000000000002DE8                 lea     rax, [r15+1]
.text:0000000000002DEC                 cmp     r13, rax
.text:0000000000002DEF                 jbe     short loc_2DF7
.text:0000000000002DF1                 mov     byte ptr [r14+r15+1], 22h ; '"'
.text:0000000000002DF7
.text:0000000000002DF7 loc_2DF7:                               ; CODE XREF: quotearg_buffer_restyled+102F↑j
.text:0000000000002DF7                 lea     rax, [r15+2]
.text:0000000000002DFB                 cmp     r13, rax
.text:0000000000002DFE                 jbe     short loc_2E06
.text:0000000000002E00                 mov     byte ptr [r14+r15+2], 22h ; '"'
.text:0000000000002E06
.text:0000000000002E06 loc_2E06:                               ; CODE XREF: quotearg_buffer_restyled+103E↑j
.text:0000000000002E06                 lea     rax, [r15+3]
.text:0000000000002E0A                 cmp     r13, rax
.text:0000000000002E0D                 jbe     short loc_2E15
.text:0000000000002E0F                 mov     byte ptr [r14+r15+3], 3Fh ; '?'
.text:0000000000002E15
.text:0000000000002E15 loc_2E15:                               ; CODE XREF: quotearg_buffer_restyled+104D↑j
.text:0000000000002E15                 add     r15, 4
.text:0000000000002E19                 xor     edx, edx
.text:0000000000002E1B                 xor     r12d, r12d
.text:0000000000002E1E                 xor     eax, eax
.text:0000000000002E20                 mov     rbp, rcx
.text:0000000000002E23                 jmp     loc_1FE8
.text:0000000000002E28 ; ---------------------------------------------------------------------------
.text:0000000000002E28
.text:0000000000002E28 loc_2E28:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002E28                                         ; DATA XREF: .rodata:jpt_1E51↓o
.text:0000000000002E28                 test    ebx, ebx        ; jumptable 00000000000121F1 case 2
.text:0000000000002E2A                 jz      loc_2FB8
.text:0000000000002E30                 lea     rax, asc_49D5   ; "'"
.text:0000000000002E37                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002E3C                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002E41                 xor     r12d, r12d
.text:0000000000002E44                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002E4D                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000002E52                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000002E57                 mov     [rsp+0E8h+n], 1
.text:0000000000002E60                 xor     r15d, r15d
.text:0000000000002E63                 mov     [rsp+0E8h+s2], rax
.text:0000000000002E68                 jmp     loc_1E93
.text:0000000000002E68 ; ---------------------------------------------------------------------------
.text:0000000000002E6D                 align 10h
.text:0000000000002E70
.text:0000000000002E70 loc_2E70:                               ; CODE XREF: quotearg_buffer_restyled+745↑j
.text:0000000000002E70                                         ; quotearg_buffer_restyled+805↑j ...
.text:0000000000002E70                 mov     rbp, r11
.text:0000000000002E73                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000002E78                 jmp     loc_2949
.text:0000000000002E7D ; ---------------------------------------------------------------------------
.text:0000000000002E7D
.text:0000000000002E7D loc_2E7D:                               ; CODE XREF: quotearg_buffer_restyled+CC2↑j
.text:0000000000002E7D                 lea     rax, unk_49D3
.text:0000000000002E84                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002E89                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002E8E                 xor     r12d, r12d
.text:0000000000002E91                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002E9A                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000002E9F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002EA4                 mov     [rsp+0E8h+n], 1
.text:0000000000002EAD                 xor     r15d, r15d
.text:0000000000002EB0                 mov     [rsp+0E8h+s2], rax
.text:0000000000002EB5                 jmp     loc_1E93
.text:0000000000002EBA ; ---------------------------------------------------------------------------
.text:0000000000002EBA
.text:0000000000002EBA loc_2EBA:                               ; CODE XREF: quotearg_buffer_restyled+797↑j
.text:0000000000002EBA                 mov     eax, edx
.text:0000000000002EBC
.text:0000000000002EBC loc_2EBC:                               ; CODE XREF: quotearg_buffer_restyled+78C↑j
.text:0000000000002EBC                                         ; quotearg_buffer_restyled+11E1↓j
.text:0000000000002EBC                 mov     rbx, [rsp+0E8h+s2]
.text:0000000000002EC1                 test    rbx, rbx
.text:0000000000002EC4                 jz      short loc_2EF2
.text:0000000000002EC6                 test    al, al
.text:0000000000002EC8                 jz      short loc_2EF2
.text:0000000000002ECA                 movzx   ecx, byte ptr [rbx]
.text:0000000000002ECD                 mov     rax, rbx
.text:0000000000002ED0                 test    cl, cl
.text:0000000000002ED2                 jz      short loc_2EF2
.text:0000000000002ED4                 mov     rdx, r15
.text:0000000000002ED7                 sub     rax, r15
.text:0000000000002EDA
.text:0000000000002EDA loc_2EDA:                               ; CODE XREF: quotearg_buffer_restyled+112D↓j
.text:0000000000002EDA                 cmp     r13, rdx
.text:0000000000002EDD                 jbe     short loc_2EE3
.text:0000000000002EDF                 mov     [r14+rdx], cl
.text:0000000000002EE3
.text:0000000000002EE3 loc_2EE3:                               ; CODE XREF: quotearg_buffer_restyled+111D↑j
.text:0000000000002EE3                 add     rdx, 1
.text:0000000000002EE7                 movzx   ecx, byte ptr [rax+rdx]
.text:0000000000002EEB                 test    cl, cl
.text:0000000000002EED                 jnz     short loc_2EDA
.text:0000000000002EEF                 mov     r15, rdx
.text:0000000000002EF2
.text:0000000000002EF2 loc_2EF2:                               ; CODE XREF: quotearg_buffer_restyled+1104↑j
.text:0000000000002EF2                                         ; quotearg_buffer_restyled+1108↑j ...
.text:0000000000002EF2                 cmp     r13, r15
.text:0000000000002EF5                 jbe     loc_2999
.text:0000000000002EFB                 mov     byte ptr [r14+r15], 0
.text:0000000000002F00                 jmp     loc_2999
.text:0000000000002F05 ; ---------------------------------------------------------------------------
.text:0000000000002F05
.text:0000000000002F05 loc_2F05:                               ; CODE XREF: quotearg_buffer_restyled+1C2↑j
.text:0000000000002F05                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002F0A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000002F0F                 mov     rbp, r11
.text:0000000000002F12                 setz    al
.text:0000000000002F15                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000002F19                 jmp     loc_2949
.text:0000000000002F1E ; ---------------------------------------------------------------------------
.text:0000000000002F1E
.text:0000000000002F1E loc_2F1E:                               ; CODE XREF: quotearg_buffer_restyled+DC0↑j
.text:0000000000002F1E                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000002F22                 mov     rdi, rcx
.text:0000000000002F25                 call    gettext_quote
.text:0000000000002F2A                 mov     [rsp+0E8h+var_80], rax
.text:0000000000002F2F                 jmp     loc_2B86
.text:0000000000002F34 ; ---------------------------------------------------------------------------
.text:0000000000002F34
.text:0000000000002F34 loc_2F34:                               ; CODE XREF: quotearg_buffer_restyled+DEB↑j
.text:0000000000002F34                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000002F38                 mov     rdi, rcx
.text:0000000000002F3B                 call    gettext_quote
.text:0000000000002F40                 mov     [rsp+0E8h+var_88], rax
.text:0000000000002F45                 jmp     loc_2BB1
.text:0000000000002F4A ; ---------------------------------------------------------------------------
.text:0000000000002F4A
.text:0000000000002F4A loc_2F4A:                               ; CODE XREF: quotearg_buffer_restyled+5F0↑j
.text:0000000000002F4A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000002F4F                 mov     rbp, r11
.text:0000000000002F52                 mov     eax, edx
.text:0000000000002F54                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000002F58                 jmp     loc_2949
.text:0000000000002F5D ; ---------------------------------------------------------------------------
.text:0000000000002F5D
.text:0000000000002F5D loc_2F5D:                               ; CODE XREF: quotearg_buffer_restyled+7A2↑j
.text:0000000000002F5D                 sub     rsp, 8
.text:0000000000002F61                 mov     r8d, 5
.text:0000000000002F67                 mov     rcx, r11
.text:0000000000002F6A                 push    [rsp+0F0h+var_88]
.text:0000000000002F6E                 push    [rsp+0F8h+var_80]
.text:0000000000002F72                 mov     rdi, r14
.text:0000000000002F75                 push    [rsp+100h+var_C8]
.text:0000000000002F79                 mov     r9d, [rsp+108h+var_70]
.text:0000000000002F81                 mov     rdx, [rsp+108h+s]
.text:0000000000002F86                 mov     rsi, [rsp+108h+var_98]
.text:0000000000002F8B                 call    quotearg_buffer_restyled
.text:0000000000002F90                 add     rsp, 20h
.text:0000000000002F94                 mov     r15, rax
.text:0000000000002F97                 jmp     loc_2999
.text:0000000000002F9C ; ---------------------------------------------------------------------------
.text:0000000000002F9C
.text:0000000000002F9C loc_2F9C:                               ; CODE XREF: quotearg_buffer_restyled+7B9↑j
.text:0000000000002F9C                 movzx   eax, [rsp+0E8h+var_6C]
.text:0000000000002FA1                 jmp     loc_2EBC
.text:0000000000002FA6 ; ---------------------------------------------------------------------------
.text:0000000000002FA6
.text:0000000000002FA6 loc_2FA6:                               ; CODE XREF: quotearg_buffer_restyled+77F↑j
.text:0000000000002FA6                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000002FAE                 jmp     loc_2949
.text:0000000000002FB3 ; ---------------------------------------------------------------------------
.text:0000000000002FB3
.text:0000000000002FB3 loc_2FB3:                               ; CODE XREF: quotearg_buffer_restyled+BED↑j
.text:0000000000002FB3                 call    ___stack_chk_fail
.text:0000000000002FB8 ; ---------------------------------------------------------------------------
.text:0000000000002FB8
.text:0000000000002FB8 loc_2FB8:                               ; CODE XREF: quotearg_buffer_restyled+106A↑j
.text:0000000000002FB8                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000002FBD                 jmp     loc_2A31
.text:0000000000002FC2 ; ---------------------------------------------------------------------------
.text:0000000000002FC2
.text:0000000000002FC2 loc_2FC2:                               ; CODE XREF: quotearg_buffer_restyled+1018↑j
.text:0000000000002FC2                 mov     rbp, r11
.text:0000000000002FC5                 jmp     loc_2960
.text:0000000000002FCA ; ---------------------------------------------------------------------------
.text:0000000000002FCA
.text:0000000000002FCA loc_2FCA:                               ; CODE XREF: quotearg_buffer_restyled+C74↑j
.text:0000000000002FCA                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002FCF                 xor     eax, eax
.text:0000000000002FD1                 xor     r12d, r12d
.text:0000000000002FD4                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002FDD                 jmp     loc_2584
.text:0000000000002FE2 ; ---------------------------------------------------------------------------
.text:0000000000002FE2
.text:0000000000002FE2 loc_2FE2:                               ; CODE XREF: quotearg_buffer_restyled+C30↑j
.text:0000000000002FE2                 mov     rdx, r13
.text:0000000000002FE5                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000002FEA                 jmp     loc_25E2
.text:0000000000002FEF ; ---------------------------------------------------------------------------
.text:0000000000002FEF
.text:0000000000002FEF def_1E51:                               ; CODE XREF: quotearg_buffer_restyled+7A↑j
.text:0000000000002FEF                 call    _abort          ; jumptable 00000000000121F1 default case
.text:0000000000002FEF ; } // starts at 1DC0
.text:0000000000002FEF quotearg_buffer_restyled endp
.text:0000000000002FEF
.text:0000000000002FEF ; ---------------------------------------------------------------------------
.text:0000000000002FF4                 align 20h
.text:0000000000003000
.text:0000000000003000 ; =============== S U B R O U T I N E =======================================
.text:0000000000003000
.text:0000000000003000
.text:0000000000003000 quotearg_n_options proc near            ; CODE XREF: quotearg_n+E↓j
.text:0000000000003000                                         ; quotearg_n_mem+7↓j ...
.text:0000000000003000
.text:0000000000003000 var_50          = qword ptr -50h
.text:0000000000003000 var_48          = qword ptr -48h
.text:0000000000003000 var_40          = dword ptr -40h
.text:0000000000003000 var_3C          = dword ptr -3Ch
.text:0000000000003000
.text:0000000000003000 ; __unwind {
.text:0000000000003000                 push    r15
.text:0000000000003002                 push    r14
.text:0000000000003004                 movsxd  r15, edi
.text:0000000000003007                 push    r13
.text:0000000000003009                 push    r12
.text:000000000000300B                 mov     r14, rdx
.text:000000000000300E                 push    rbp
.text:000000000000300F                 push    rbx
.text:0000000000003010                 mov     rbp, rcx
.text:0000000000003013                 sub     rsp, 28h
.text:0000000000003017                 mov     [rsp+58h+var_50], rsi
.text:000000000000301C                 call    ___errno_location
.text:0000000000003021                 mov     r13, rax
.text:0000000000003024                 mov     eax, [rax]
.text:0000000000003026                 test    r15d, r15d
.text:0000000000003029                 mov     rbx, cs:slotvec
.text:0000000000003030                 mov     [rsp+58h+var_40], eax
.text:0000000000003034                 js      loc_31A1
.text:000000000000303A                 cmp     cs:nslots, r15d
.text:0000000000003041                 jg      short loc_30A5
.text:0000000000003043                 cmp     r15d, 7FFFFFFFh
.text:000000000000304A                 jz      loc_31A6
.text:0000000000003050                 lea     r12d, [r15+1]
.text:0000000000003054                 lea     rax, slotvec0
.text:000000000000305B                 movsxd  rsi, r12d
.text:000000000000305E                 shl     rsi, 4
.text:0000000000003062                 cmp     rbx, rax
.text:0000000000003065                 jz      loc_3180
.text:000000000000306B                 mov     rdi, rbx
.text:000000000000306E                 call    xrealloc
.text:0000000000003073                 mov     rbx, rax
.text:0000000000003076                 mov     cs:slotvec, rax
.text:000000000000307D
.text:000000000000307D loc_307D:                               ; CODE XREF: quotearg_n_options+19C↓j
.text:000000000000307D                 movsxd  rdi, cs:nslots
.text:0000000000003084                 mov     edx, r12d
.text:0000000000003087                 xor     esi, esi        ; c
.text:0000000000003089                 sub     edx, edi
.text:000000000000308B                 shl     rdi, 4
.text:000000000000308F                 movsxd  rdx, edx
.text:0000000000003092                 add     rdi, rbx        ; s
.text:0000000000003095                 shl     rdx, 4          ; n
.text:0000000000003099                 call    _memset
.text:000000000000309E                 mov     cs:nslots, r12d
.text:00000000000030A5
.text:00000000000030A5 loc_30A5:                               ; CODE XREF: quotearg_n_options+41↑j
.text:00000000000030A5                 mov     eax, [rbp+4]
.text:00000000000030A8                 shl     r15, 4
.text:00000000000030AC                 sub     rsp, 8
.text:00000000000030B0                 add     rbx, r15
.text:00000000000030B3                 lea     r15, [rbp+8]
.text:00000000000030B7                 mov     r8d, [rbp+0]
.text:00000000000030BB                 mov     r11, [rbx]
.text:00000000000030BE                 mov     r12, [rbx+8]
.text:00000000000030C2                 mov     rcx, r14
.text:00000000000030C5                 or      eax, 1
.text:00000000000030C8                 mov     [rsp+60h+var_3C], eax
.text:00000000000030CC                 push    qword ptr [rbp+30h]
.text:00000000000030CF                 mov     r9d, eax
.text:00000000000030D2                 push    qword ptr [rbp+28h]
.text:00000000000030D5                 push    r15
.text:00000000000030D7                 mov     rsi, r11
.text:00000000000030DA                 mov     rdx, [rsp+78h+var_50]
.text:00000000000030DF                 mov     rdi, r12
.text:00000000000030E2                 mov     [rsp+78h+var_48], r11
.text:00000000000030E7                 call    quotearg_buffer_restyled
.text:00000000000030EC                 add     rsp, 20h
.text:00000000000030F0                 mov     r11, [rsp+58h+var_48]
.text:00000000000030F5                 cmp     r11, rax
.text:00000000000030F8                 ja      short loc_3161
.text:00000000000030FA                 lea     rsi, [rax+1]
.text:00000000000030FE                 lea     rax, slot0
.text:0000000000003105                 cmp     r12, rax
.text:0000000000003108                 mov     [rbx], rsi
.text:000000000000310B                 jz      short loc_311F
.text:000000000000310D                 mov     rdi, r12        ; ptr
.text:0000000000003110                 mov     [rsp+58h+var_48], rsi
.text:0000000000003115                 call    _free
.text:000000000000311A                 mov     rsi, [rsp+58h+var_48]
.text:000000000000311F
.text:000000000000311F loc_311F:                               ; CODE XREF: quotearg_n_options+10B↑j
.text:000000000000311F                 mov     rdi, rsi
.text:0000000000003122                 mov     [rsp+58h+var_48], rsi
.text:0000000000003127                 call    xmalloc
.text:000000000000312C                 sub     rsp, 8
.text:0000000000003130                 mov     [rbx+8], rax
.text:0000000000003134                 mov     r8d, [rbp+0]
.text:0000000000003138                 push    qword ptr [rbp+30h]
.text:000000000000313B                 push    qword ptr [rbp+28h]
.text:000000000000313E                 mov     rcx, r14
.text:0000000000003141                 push    r15
.text:0000000000003143                 mov     r9d, [rsp+78h+var_3C]
.text:0000000000003148                 mov     rdi, rax
.text:000000000000314B                 mov     rdx, [rsp+78h+var_50]
.text:0000000000003150                 mov     rsi, [rsp+78h+var_48]
.text:0000000000003155                 mov     r12, rax
.text:0000000000003158                 call    quotearg_buffer_restyled
.text:000000000000315D                 add     rsp, 20h
.text:0000000000003161
.text:0000000000003161 loc_3161:                               ; CODE XREF: quotearg_n_options+F8↑j
.text:0000000000003161                 mov     eax, [rsp+58h+var_40]
.text:0000000000003165                 mov     [r13+0], eax
.text:0000000000003169                 add     rsp, 28h
.text:000000000000316D                 mov     rax, r12
.text:0000000000003170                 pop     rbx
.text:0000000000003171                 pop     rbp
.text:0000000000003172                 pop     r12
.text:0000000000003174                 pop     r13
.text:0000000000003176                 pop     r14
.text:0000000000003178                 pop     r15
.text:000000000000317A                 retn
.text:000000000000317A ; ---------------------------------------------------------------------------
.text:000000000000317B                 align 20h
.text:0000000000003180
.text:0000000000003180 loc_3180:                               ; CODE XREF: quotearg_n_options+65↑j
.text:0000000000003180                 xor     edi, edi
.text:0000000000003182                 call    xrealloc
.text:0000000000003187                 movdqa  xmm0, xmmword ptr cs:slotvec0
.text:000000000000318F                 mov     rbx, rax
.text:0000000000003192                 mov     cs:slotvec, rax
.text:0000000000003199                 movups  xmmword ptr [rax], xmm0
.text:000000000000319C                 jmp     loc_307D
.text:00000000000031A1 ; ---------------------------------------------------------------------------
.text:00000000000031A1
.text:00000000000031A1 loc_31A1:                               ; CODE XREF: quotearg_n_options+34↑j
.text:00000000000031A1                 call    _abort
.text:00000000000031A6 ; ---------------------------------------------------------------------------
.text:00000000000031A6
.text:00000000000031A6 loc_31A6:                               ; CODE XREF: quotearg_n_options+4A↑j
.text:00000000000031A6                 call    xalloc_die
.text:00000000000031A6 ; } // starts at 3000
.text:00000000000031A6 quotearg_n_options endp
.text:00000000000031A6
.text:00000000000031A6 ; ---------------------------------------------------------------------------
.text:00000000000031AB                 align 10h
.text:00000000000031B0
.text:00000000000031B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000031B0
.text:00000000000031B0 ; Attributes: info_from_lumina
.text:00000000000031B0
.text:00000000000031B0 ; quoting_options *__fastcall clone_quoting_options(quoting_options *o)
.text:00000000000031B0                 public clone_quoting_options
.text:00000000000031B0 clone_quoting_options proc near
.text:00000000000031B0 ; __unwind {
.text:00000000000031B0                 push    r12
.text:00000000000031B2                 push    rbp
.text:00000000000031B3                 push    rbx
.text:00000000000031B4                 mov     rbx, rdi
.text:00000000000031B7                 call    ___errno_location
.text:00000000000031BC                 mov     r12d, [rax]
.text:00000000000031BF                 mov     rbp, rax
.text:00000000000031C2                 lea     rax, default_quoting_options
.text:00000000000031C9                 test    rbx, rbx
.text:00000000000031CC                 mov     esi, 38h ; '8'  ; n
.text:00000000000031D1                 cmovz   rbx, rax
.text:00000000000031D5                 mov     rdi, rbx        ; src
.text:00000000000031D8                 call    xmemdup
.text:00000000000031DD                 mov     [rbp+0], r12d
.text:00000000000031E1                 pop     rbx
.text:00000000000031E2                 pop     rbp
.text:00000000000031E3                 pop     r12
.text:00000000000031E5                 retn
.text:00000000000031E5 ; } // starts at 31B0
.text:00000000000031E5 clone_quoting_options endp
.text:00000000000031E5
.text:00000000000031E5 ; ---------------------------------------------------------------------------
.text:00000000000031E6                 align 10h
.text:00000000000031F0
.text:00000000000031F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000031F0
.text:00000000000031F0
.text:00000000000031F0                 public get_quoting_style
.text:00000000000031F0 get_quoting_style proc near
.text:00000000000031F0 ; __unwind {
.text:00000000000031F0                 lea     rax, default_quoting_options
.text:00000000000031F7                 test    rdi, rdi
.text:00000000000031FA                 cmovz   rdi, rax
.text:00000000000031FE                 mov     eax, [rdi]
.text:0000000000003200                 retn
.text:0000000000003200 ; } // starts at 31F0
.text:0000000000003200 get_quoting_style endp
.text:0000000000003200
.text:0000000000003200 ; ---------------------------------------------------------------------------
.text:0000000000003201                 align 10h
.text:0000000000003210
.text:0000000000003210 ; =============== S U B R O U T I N E =======================================
.text:0000000000003210
.text:0000000000003210
.text:0000000000003210                 public set_quoting_style
.text:0000000000003210 set_quoting_style proc near
.text:0000000000003210 ; __unwind {
.text:0000000000003210                 lea     rax, default_quoting_options
.text:0000000000003217                 test    rdi, rdi
.text:000000000000321A                 cmovz   rdi, rax
.text:000000000000321E                 mov     [rdi], esi
.text:0000000000003220                 retn
.text:0000000000003220 ; } // starts at 3210
.text:0000000000003220 set_quoting_style endp
.text:0000000000003220
.text:0000000000003220 ; ---------------------------------------------------------------------------
.text:0000000000003221                 align 10h
.text:0000000000003230
.text:0000000000003230 ; =============== S U B R O U T I N E =======================================
.text:0000000000003230
.text:0000000000003230 ; Attributes: info_from_lumina
.text:0000000000003230
.text:0000000000003230 ; int __fastcall set_char_quoting(quoting_options *o, char c, int i)
.text:0000000000003230                 public set_char_quoting
.text:0000000000003230 set_char_quoting proc near
.text:0000000000003230 ; __unwind {
.text:0000000000003230                 lea     rax, default_quoting_options
.text:0000000000003237                 test    rdi, rdi
.text:000000000000323A                 mov     ecx, esi
.text:000000000000323C                 cmovz   rdi, rax
.text:0000000000003240                 mov     eax, esi
.text:0000000000003242                 and     ecx, 1Fh
.text:0000000000003245                 shr     al, 5
.text:0000000000003248                 movzx   eax, al
.text:000000000000324B                 lea     rdi, [rdi+rax*4+8]
.text:0000000000003250                 mov     esi, [rdi]
.text:0000000000003252                 mov     eax, esi
.text:0000000000003254                 shr     eax, cl
.text:0000000000003256                 xor     edx, eax
.text:0000000000003258                 and     eax, 1
.text:000000000000325B                 and     edx, 1
.text:000000000000325E                 shl     edx, cl
.text:0000000000003260                 xor     edx, esi
.text:0000000000003262                 mov     [rdi], edx
.text:0000000000003264                 retn
.text:0000000000003264 ; } // starts at 3230
.text:0000000000003264 set_char_quoting endp
.text:0000000000003264
.text:0000000000003264 ; ---------------------------------------------------------------------------
.text:0000000000003265                 align 10h
.text:0000000000003270
.text:0000000000003270 ; =============== S U B R O U T I N E =======================================
.text:0000000000003270
.text:0000000000003270
.text:0000000000003270                 public set_quoting_flags
.text:0000000000003270 set_quoting_flags proc near
.text:0000000000003270 ; __unwind {
.text:0000000000003270                 lea     rax, default_quoting_options
.text:0000000000003277                 test    rdi, rdi
.text:000000000000327A                 cmovz   rdi, rax
.text:000000000000327E                 mov     eax, [rdi+4]
.text:0000000000003281                 mov     [rdi+4], esi
.text:0000000000003284                 retn
.text:0000000000003284 ; } // starts at 3270
.text:0000000000003284 set_quoting_flags endp
.text:0000000000003284
.text:0000000000003284 ; ---------------------------------------------------------------------------
.text:0000000000003285                 align 10h
.text:0000000000003290
.text:0000000000003290 ; =============== S U B R O U T I N E =======================================
.text:0000000000003290
.text:0000000000003290 ; Attributes: info_from_lumina
.text:0000000000003290
.text:0000000000003290 ; void __fastcall set_custom_quoting(quoting_options *o, const char *left_quote, const char *right_quote)
.text:0000000000003290                 public set_custom_quoting
.text:0000000000003290 set_custom_quoting proc near
.text:0000000000003290 ; __unwind {
.text:0000000000003290                 lea     rax, default_quoting_options
.text:0000000000003297                 test    rdi, rdi
.text:000000000000329A                 cmovz   rdi, rax
.text:000000000000329E                 test    rsi, rsi
.text:00000000000032A1                 mov     dword ptr [rdi], 0Ah
.text:00000000000032A7                 jz      short loc_32B7
.text:00000000000032A9                 test    rdx, rdx
.text:00000000000032AC                 jz      short loc_32B7
.text:00000000000032AE                 mov     [rdi+28h], rsi
.text:00000000000032B2                 mov     [rdi+30h], rdx
.text:00000000000032B6                 retn
.text:00000000000032B7 ; ---------------------------------------------------------------------------
.text:00000000000032B7
.text:00000000000032B7 loc_32B7:                               ; CODE XREF: set_custom_quoting+17↑j
.text:00000000000032B7                                         ; set_custom_quoting+1C↑j
.text:00000000000032B7                 sub     rsp, 8
.text:00000000000032BB                 call    _abort
.text:00000000000032BB ; } // starts at 3290
.text:00000000000032BB set_custom_quoting endp
.text:00000000000032BB
.text:00000000000032C0
.text:00000000000032C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000032C0
.text:00000000000032C0 ; Attributes: info_from_lumina
.text:00000000000032C0
.text:00000000000032C0 ; size_t __fastcall quotearg_buffer(char *buffer, size_t buffersize, const char *arg, size_t argsize, const quoting_options *o)
.text:00000000000032C0                 public quotearg_buffer
.text:00000000000032C0 quotearg_buffer proc near
.text:00000000000032C0
.text:00000000000032C0 var_40          = qword ptr -40h
.text:00000000000032C0
.text:00000000000032C0 ; __unwind {
.text:00000000000032C0                 push    r15
.text:00000000000032C2                 push    r14
.text:00000000000032C4                 lea     rax, default_quoting_options
.text:00000000000032CB                 push    r13
.text:00000000000032CD                 push    r12
.text:00000000000032CF                 mov     r13, rdi
.text:00000000000032D2                 push    rbp
.text:00000000000032D3                 push    rbx
.text:00000000000032D4                 mov     rbx, r8
.text:00000000000032D7                 mov     r14, rsi
.text:00000000000032DA                 mov     r15, rdx
.text:00000000000032DD                 sub     rsp, 18h
.text:00000000000032E1                 test    r8, r8
.text:00000000000032E4                 cmovz   rbx, rax
.text:00000000000032E8                 mov     [rsp+48h+var_40], rcx
.text:00000000000032ED                 call    ___errno_location
.text:00000000000032F2                 mov     r12d, [rax]
.text:00000000000032F5                 mov     rbp, rax
.text:00000000000032F8                 lea     rax, [rbx+8]
.text:00000000000032FC                 sub     rsp, 8
.text:0000000000003300                 mov     r9d, [rbx+4]
.text:0000000000003304                 push    qword ptr [rbx+30h]
.text:0000000000003307                 mov     r8d, [rbx]
.text:000000000000330A                 push    qword ptr [rbx+28h]
.text:000000000000330D                 mov     rdx, r15
.text:0000000000003310                 push    rax
.text:0000000000003311                 mov     rcx, [rsp+68h+var_40]
.text:0000000000003316                 mov     rsi, r14
.text:0000000000003319                 mov     rdi, r13
.text:000000000000331C                 call    quotearg_buffer_restyled
.text:0000000000003321                 mov     [rbp+0], r12d
.text:0000000000003325                 add     rsp, 38h
.text:0000000000003329                 pop     rbx
.text:000000000000332A                 pop     rbp
.text:000000000000332B                 pop     r12
.text:000000000000332D                 pop     r13
.text:000000000000332F                 pop     r14
.text:0000000000003331                 pop     r15
.text:0000000000003333                 retn
.text:0000000000003333 ; } // starts at 32C0
.text:0000000000003333 quotearg_buffer endp
.text:0000000000003333
.text:0000000000003333 ; ---------------------------------------------------------------------------
.text:0000000000003334                 align 20h
.text:0000000000003340
.text:0000000000003340 ; =============== S U B R O U T I N E =======================================
.text:0000000000003340
.text:0000000000003340 ; Attributes: info_from_lumina
.text:0000000000003340
.text:0000000000003340 ; char *__fastcall quotearg_alloc_mem(const char *arg, size_t argsize, size_t *size, const quoting_options *o)
.text:0000000000003340                 public quotearg_alloc_mem
.text:0000000000003340 quotearg_alloc_mem proc near            ; CODE XREF: quotearg_alloc+5↓j
.text:0000000000003340
.text:0000000000003340 var_5C          = dword ptr -5Ch
.text:0000000000003340 var_58          = qword ptr -58h
.text:0000000000003340 var_50          = qword ptr -50h
.text:0000000000003340 var_48          = qword ptr -48h
.text:0000000000003340 var_40          = qword ptr -40h
.text:0000000000003340
.text:0000000000003340 ; __unwind {
.text:0000000000003340                 push    r15
.text:0000000000003342                 push    r14
.text:0000000000003344                 lea     rax, default_quoting_options
.text:000000000000334B                 push    r13
.text:000000000000334D                 push    r12
.text:000000000000334F                 mov     r12, rdx
.text:0000000000003352                 push    rbp
.text:0000000000003353                 push    rbx
.text:0000000000003354                 mov     rbx, rcx
.text:0000000000003357                 mov     r14, rdi
.text:000000000000335A                 mov     r15, rsi
.text:000000000000335D                 sub     rsp, 38h
.text:0000000000003361                 test    rcx, rcx
.text:0000000000003364                 cmovz   rbx, rax
.text:0000000000003368                 xor     ebp, ebp
.text:000000000000336A                 call    ___errno_location
.text:000000000000336F                 test    r12, r12
.text:0000000000003372                 mov     r13, rax
.text:0000000000003375                 mov     eax, [rax]
.text:0000000000003377                 setz    bpl
.text:000000000000337B                 or      ebp, [rbx+4]
.text:000000000000337E                 lea     r10, [rbx+8]
.text:0000000000003382                 sub     rsp, 8
.text:0000000000003386                 mov     r8d, [rbx]
.text:0000000000003389                 mov     rcx, r15
.text:000000000000338C                 mov     [rsp+70h+var_5C], eax
.text:0000000000003390                 push    qword ptr [rbx+30h]
.text:0000000000003393                 mov     rdx, r14
.text:0000000000003396                 push    qword ptr [rbx+28h]
.text:0000000000003399                 push    r10
.text:000000000000339B                 xor     esi, esi
.text:000000000000339D                 mov     r9d, ebp
.text:00000000000033A0                 xor     edi, edi
.text:00000000000033A2                 mov     [rsp+88h+var_48], r10
.text:00000000000033A7                 call    quotearg_buffer_restyled
.text:00000000000033AC                 lea     rsi, [rax+1]
.text:00000000000033B0                 mov     [rsp+88h+var_40], rax
.text:00000000000033B5                 add     rsp, 20h
.text:00000000000033B9                 mov     rdi, rsi
.text:00000000000033BC                 mov     [rsp+68h+var_50], rsi
.text:00000000000033C1                 call    xmalloc
.text:00000000000033C6                 mov     [rsp+68h+var_58], rax
.text:00000000000033CB                 sub     rsp, 8
.text:00000000000033CF                 push    qword ptr [rbx+30h]
.text:00000000000033D2                 push    qword ptr [rbx+28h]
.text:00000000000033D5                 mov     r10, [rsp+80h+var_48]
.text:00000000000033DA                 mov     r9d, ebp
.text:00000000000033DD                 mov     r8d, [rbx]
.text:00000000000033E0                 mov     rcx, r15
.text:00000000000033E3                 mov     rdx, r14
.text:00000000000033E6                 mov     rdi, rax
.text:00000000000033E9                 push    r10
.text:00000000000033EB                 mov     rsi, [rsp+88h+var_50]
.text:00000000000033F0                 call    quotearg_buffer_restyled
.text:00000000000033F5                 mov     eax, [rsp+88h+var_5C]
.text:00000000000033F9                 add     rsp, 20h
.text:00000000000033FD                 test    r12, r12
.text:0000000000003400                 mov     [r13+0], eax
.text:0000000000003404                 jz      short loc_340F
.text:0000000000003406                 mov     r11, [rsp+68h+var_40]
.text:000000000000340B                 mov     [r12], r11
.text:000000000000340F
.text:000000000000340F loc_340F:                               ; CODE XREF: quotearg_alloc_mem+C4↑j
.text:000000000000340F                 mov     rax, [rsp+68h+var_58]
.text:0000000000003414                 add     rsp, 38h
.text:0000000000003418                 pop     rbx
.text:0000000000003419                 pop     rbp
.text:000000000000341A                 pop     r12
.text:000000000000341C                 pop     r13
.text:000000000000341E                 pop     r14
.text:0000000000003420                 pop     r15
.text:0000000000003422                 retn
.text:0000000000003422 ; } // starts at 3340
.text:0000000000003422 quotearg_alloc_mem endp
.text:0000000000003422
.text:0000000000003422 ; ---------------------------------------------------------------------------
.text:0000000000003423                 align 10h
.text:0000000000003430
.text:0000000000003430 ; =============== S U B R O U T I N E =======================================
.text:0000000000003430
.text:0000000000003430
.text:0000000000003430                 public quotearg_alloc
.text:0000000000003430 quotearg_alloc  proc near
.text:0000000000003430 ; __unwind {
.text:0000000000003430                 mov     rcx, rdx
.text:0000000000003433                 xor     edx, edx
.text:0000000000003435                 jmp     quotearg_alloc_mem
.text:0000000000003435 ; } // starts at 3430
.text:0000000000003435 quotearg_alloc  endp
.text:0000000000003435
.text:0000000000003435 ; ---------------------------------------------------------------------------
.text:000000000000343A                 align 20h
.text:0000000000003440
.text:0000000000003440 ; =============== S U B R O U T I N E =======================================
.text:0000000000003440
.text:0000000000003440 ; Attributes: info_from_lumina
.text:0000000000003440
.text:0000000000003440 ; void __cdecl quotearg_free()
.text:0000000000003440                 public quotearg_free
.text:0000000000003440 quotearg_free   proc near
.text:0000000000003440 ; __unwind {
.text:0000000000003440                 mov     eax, cs:nslots
.text:0000000000003446                 push    r12
.text:0000000000003448                 mov     r12, cs:slotvec
.text:000000000000344F                 push    rbp
.text:0000000000003450                 push    rbx
.text:0000000000003451                 cmp     eax, 1
.text:0000000000003454                 jle     short loc_3481
.text:0000000000003456                 sub     eax, 2
.text:0000000000003459                 lea     rbx, [r12+18h]
.text:000000000000345E                 shl     rax, 4
.text:0000000000003462                 lea     rbp, [r12+rax+28h]
.text:0000000000003467                 nop     word ptr [rax+rax+00000000h]
.text:0000000000003470
.text:0000000000003470 loc_3470:                               ; CODE XREF: quotearg_free+3F↓j
.text:0000000000003470                 mov     rdi, [rbx]      ; ptr
.text:0000000000003473                 add     rbx, 10h
.text:0000000000003477                 call    _free
.text:000000000000347C                 cmp     rbx, rbp
.text:000000000000347F                 jnz     short loc_3470
.text:0000000000003481
.text:0000000000003481 loc_3481:                               ; CODE XREF: quotearg_free+14↑j
.text:0000000000003481                 mov     rdi, [r12+8]    ; ptr
.text:0000000000003486                 lea     rbx, slot0
.text:000000000000348D                 cmp     rdi, rbx
.text:0000000000003490                 jz      short loc_34A9
.text:0000000000003492                 call    _free
.text:0000000000003497                 mov     cs:slotvec0, 100h
.text:00000000000034A2                 mov     cs:off_207078, rbx
.text:00000000000034A9
.text:00000000000034A9 loc_34A9:                               ; CODE XREF: quotearg_free+50↑j
.text:00000000000034A9                 lea     rbx, slotvec0
.text:00000000000034B0                 cmp     r12, rbx
.text:00000000000034B3                 jz      short loc_34C4
.text:00000000000034B5                 mov     rdi, r12        ; ptr
.text:00000000000034B8                 call    _free
.text:00000000000034BD                 mov     cs:slotvec, rbx
.text:00000000000034C4
.text:00000000000034C4 loc_34C4:                               ; CODE XREF: quotearg_free+73↑j
.text:00000000000034C4                 pop     rbx
.text:00000000000034C5                 mov     cs:nslots, 1
.text:00000000000034CF                 pop     rbp
.text:00000000000034D0                 pop     r12
.text:00000000000034D2                 retn
.text:00000000000034D2 ; } // starts at 3440
.text:00000000000034D2 quotearg_free   endp
.text:00000000000034D2
.text:00000000000034D2 ; ---------------------------------------------------------------------------
.text:00000000000034D3                 align 20h
.text:00000000000034E0
.text:00000000000034E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000034E0
.text:00000000000034E0
.text:00000000000034E0                 public quotearg_n
.text:00000000000034E0 quotearg_n      proc near
.text:00000000000034E0 ; __unwind {
.text:00000000000034E0                 lea     rcx, default_quoting_options
.text:00000000000034E7                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000034EE                 jmp     quotearg_n_options
.text:00000000000034EE ; } // starts at 34E0
.text:00000000000034EE quotearg_n      endp
.text:00000000000034EE
.text:00000000000034EE ; ---------------------------------------------------------------------------
.text:00000000000034F3                 align 20h
.text:0000000000003500
.text:0000000000003500 ; =============== S U B R O U T I N E =======================================
.text:0000000000003500
.text:0000000000003500
.text:0000000000003500                 public quotearg_n_mem
.text:0000000000003500 quotearg_n_mem  proc near
.text:0000000000003500 ; __unwind {
.text:0000000000003500                 lea     rcx, default_quoting_options
.text:0000000000003507                 jmp     quotearg_n_options
.text:0000000000003507 ; } // starts at 3500
.text:0000000000003507 quotearg_n_mem  endp
.text:0000000000003507
.text:0000000000003507 ; ---------------------------------------------------------------------------
.text:000000000000350C                 align 10h
.text:0000000000003510
.text:0000000000003510 ; =============== S U B R O U T I N E =======================================
.text:0000000000003510
.text:0000000000003510
.text:0000000000003510                 public quotearg
.text:0000000000003510 quotearg        proc near
.text:0000000000003510 ; __unwind {
.text:0000000000003510                 lea     rcx, default_quoting_options
.text:0000000000003517                 mov     rsi, rdi
.text:000000000000351A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003521                 xor     edi, edi
.text:0000000000003523                 jmp     quotearg_n_options
.text:0000000000003523 ; } // starts at 3510
.text:0000000000003523 quotearg        endp
.text:0000000000003523
.text:0000000000003523 ; ---------------------------------------------------------------------------
.text:0000000000003528                 align 10h
.text:0000000000003530
.text:0000000000003530 ; =============== S U B R O U T I N E =======================================
.text:0000000000003530
.text:0000000000003530
.text:0000000000003530                 public quotearg_mem
.text:0000000000003530 quotearg_mem    proc near
.text:0000000000003530 ; __unwind {
.text:0000000000003530                 lea     rcx, default_quoting_options
.text:0000000000003537                 mov     rdx, rsi
.text:000000000000353A                 mov     rsi, rdi
.text:000000000000353D                 xor     edi, edi
.text:000000000000353F                 jmp     quotearg_n_options
.text:000000000000353F ; } // starts at 3530
.text:000000000000353F quotearg_mem    endp
.text:000000000000353F
.text:000000000000353F ; ---------------------------------------------------------------------------
.text:0000000000003544                 align 10h
.text:0000000000003550
.text:0000000000003550 ; =============== S U B R O U T I N E =======================================
.text:0000000000003550
.text:0000000000003550 ; Attributes: info_from_lumina
.text:0000000000003550
.text:0000000000003550 ; char *__fastcall quotearg_n_style(int n, quoting_style s, const char *arg)
.text:0000000000003550                 public quotearg_n_style
.text:0000000000003550 quotearg_n_style proc near              ; CODE XREF: quotearg_style+7↓j
.text:0000000000003550
.text:0000000000003550 var_48          = dword ptr -48h
.text:0000000000003550 var_44          = qword ptr -44h
.text:0000000000003550 var_3C          = qword ptr -3Ch
.text:0000000000003550 var_34          = qword ptr -34h
.text:0000000000003550 var_2C          = qword ptr -2Ch
.text:0000000000003550 var_24          = qword ptr -24h
.text:0000000000003550 var_1C          = qword ptr -1Ch
.text:0000000000003550 var_14          = dword ptr -14h
.text:0000000000003550 var_10          = qword ptr -10h
.text:0000000000003550
.text:0000000000003550 ; __unwind {
.text:0000000000003550                 sub     rsp, 48h
.text:0000000000003554                 mov     rax, rdx
.text:0000000000003557                 mov     rdx, fs:28h
.text:0000000000003560                 mov     [rsp+48h+var_10], rdx
.text:0000000000003565                 xor     edx, edx
.text:0000000000003567                 cmp     esi, 0Ah
.text:000000000000356A                 jz      short loc_35D4
.text:000000000000356C                 mov     [rsp+48h+var_48], esi
.text:000000000000356F                 mov     rcx, rsp
.text:0000000000003572                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003579                 mov     rsi, rax
.text:000000000000357C                 mov     [rsp+48h+var_44], 0
.text:0000000000003585                 mov     [rsp+48h+var_3C], 0
.text:000000000000358E                 mov     [rsp+48h+var_34], 0
.text:0000000000003597                 mov     [rsp+48h+var_2C], 0
.text:00000000000035A0                 mov     [rsp+48h+var_24], 0
.text:00000000000035A9                 mov     [rsp+48h+var_1C], 0
.text:00000000000035B2                 mov     [rsp+48h+var_14], 0
.text:00000000000035BA                 call    quotearg_n_options
.text:00000000000035BF                 mov     rcx, [rsp+48h+var_10]
.text:00000000000035C4                 xor     rcx, fs:28h
.text:00000000000035CD                 jnz     short loc_35D9
.text:00000000000035CF                 add     rsp, 48h
.text:00000000000035D3                 retn
.text:00000000000035D4 ; ---------------------------------------------------------------------------
.text:00000000000035D4
.text:00000000000035D4 loc_35D4:                               ; CODE XREF: quotearg_n_style+1A↑j
.text:00000000000035D4                 call    _abort
.text:00000000000035D9 ; ---------------------------------------------------------------------------
.text:00000000000035D9
.text:00000000000035D9 loc_35D9:                               ; CODE XREF: quotearg_n_style+7D↑j
.text:00000000000035D9                 call    ___stack_chk_fail
.text:00000000000035D9 ; } // starts at 3550
.text:00000000000035D9 quotearg_n_style endp
.text:00000000000035D9
.text:00000000000035D9 ; ---------------------------------------------------------------------------
.text:00000000000035DE                 align 20h
.text:00000000000035E0
.text:00000000000035E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000035E0
.text:00000000000035E0 ; Attributes: info_from_lumina
.text:00000000000035E0
.text:00000000000035E0 ; char *__fastcall quotearg_n_style_mem(int n, quoting_style s, const char *arg, size_t argsize)
.text:00000000000035E0                 public quotearg_n_style_mem
.text:00000000000035E0 quotearg_n_style_mem proc near          ; CODE XREF: quotearg_style_mem+A↓j
.text:00000000000035E0
.text:00000000000035E0 var_48          = dword ptr -48h
.text:00000000000035E0 var_44          = qword ptr -44h
.text:00000000000035E0 var_3C          = qword ptr -3Ch
.text:00000000000035E0 var_34          = qword ptr -34h
.text:00000000000035E0 var_2C          = qword ptr -2Ch
.text:00000000000035E0 var_24          = qword ptr -24h
.text:00000000000035E0 var_1C          = qword ptr -1Ch
.text:00000000000035E0 var_14          = dword ptr -14h
.text:00000000000035E0 var_10          = qword ptr -10h
.text:00000000000035E0
.text:00000000000035E0 ; __unwind {
.text:00000000000035E0                 sub     rsp, 48h
.text:00000000000035E4                 mov     rax, rdx
.text:00000000000035E7                 mov     rdx, rcx
.text:00000000000035EA                 mov     rcx, fs:28h
.text:00000000000035F3                 mov     [rsp+48h+var_10], rcx
.text:00000000000035F8                 xor     ecx, ecx
.text:00000000000035FA                 cmp     esi, 0Ah
.text:00000000000035FD                 jz      short loc_3660
.text:00000000000035FF                 mov     [rsp+48h+var_48], esi
.text:0000000000003602                 mov     rcx, rsp
.text:0000000000003605                 mov     rsi, rax
.text:0000000000003608                 mov     [rsp+48h+var_44], 0
.text:0000000000003611                 mov     [rsp+48h+var_3C], 0
.text:000000000000361A                 mov     [rsp+48h+var_34], 0
.text:0000000000003623                 mov     [rsp+48h+var_2C], 0
.text:000000000000362C                 mov     [rsp+48h+var_24], 0
.text:0000000000003635                 mov     [rsp+48h+var_1C], 0
.text:000000000000363E                 mov     [rsp+48h+var_14], 0
.text:0000000000003646                 call    quotearg_n_options
.text:000000000000364B                 mov     rdx, [rsp+48h+var_10]
.text:0000000000003650                 xor     rdx, fs:28h
.text:0000000000003659                 jnz     short loc_3665
.text:000000000000365B                 add     rsp, 48h
.text:000000000000365F                 retn
.text:0000000000003660 ; ---------------------------------------------------------------------------
.text:0000000000003660
.text:0000000000003660 loc_3660:                               ; CODE XREF: quotearg_n_style_mem+1D↑j
.text:0000000000003660                 call    _abort
.text:0000000000003665 ; ---------------------------------------------------------------------------
.text:0000000000003665
.text:0000000000003665 loc_3665:                               ; CODE XREF: quotearg_n_style_mem+79↑j
.text:0000000000003665                 call    ___stack_chk_fail
.text:0000000000003665 ; } // starts at 35E0
.text:0000000000003665 quotearg_n_style_mem endp
.text:0000000000003665
.text:0000000000003665 ; ---------------------------------------------------------------------------
.text:000000000000366A                 align 10h
.text:0000000000003670
.text:0000000000003670 ; =============== S U B R O U T I N E =======================================
.text:0000000000003670
.text:0000000000003670
.text:0000000000003670                 public quotearg_style
.text:0000000000003670 quotearg_style  proc near
.text:0000000000003670 ; __unwind {
.text:0000000000003670                 mov     rdx, rsi
.text:0000000000003673                 mov     esi, edi
.text:0000000000003675                 xor     edi, edi
.text:0000000000003677                 jmp     quotearg_n_style
.text:0000000000003677 ; } // starts at 3670
.text:0000000000003677 quotearg_style  endp
.text:0000000000003677
.text:0000000000003677 ; ---------------------------------------------------------------------------
.text:000000000000367C                 align 20h
.text:0000000000003680
.text:0000000000003680 ; =============== S U B R O U T I N E =======================================
.text:0000000000003680
.text:0000000000003680
.text:0000000000003680                 public quotearg_style_mem
.text:0000000000003680 quotearg_style_mem proc near
.text:0000000000003680 ; __unwind {
.text:0000000000003680                 mov     rcx, rdx
.text:0000000000003683                 mov     rdx, rsi
.text:0000000000003686                 mov     esi, edi
.text:0000000000003688                 xor     edi, edi
.text:000000000000368A                 jmp     quotearg_n_style_mem
.text:000000000000368A ; } // starts at 3680
.text:000000000000368A quotearg_style_mem endp
.text:000000000000368A
.text:000000000000368A ; ---------------------------------------------------------------------------
.text:000000000000368F                 align 10h
.text:0000000000003690
.text:0000000000003690 ; =============== S U B R O U T I N E =======================================
.text:0000000000003690
.text:0000000000003690 ; Attributes: info_from_lumina
.text:0000000000003690
.text:0000000000003690 ; char *__fastcall quotearg_char_mem(const char *arg, size_t argsize, char ch_0)
.text:0000000000003690                 public quotearg_char_mem
.text:0000000000003690 quotearg_char_mem proc near             ; CODE XREF: quotearg_char+B↓j
.text:0000000000003690                                         ; quotearg_colon+C↓j ...
.text:0000000000003690
.text:0000000000003690 var_48          = xmmword ptr -48h
.text:0000000000003690 var_38          = xmmword ptr -38h
.text:0000000000003690 var_28          = xmmword ptr -28h
.text:0000000000003690 var_18          = qword ptr -18h
.text:0000000000003690 var_10          = qword ptr -10h
.text:0000000000003690
.text:0000000000003690 ; __unwind {
.text:0000000000003690                 sub     rsp, 48h
.text:0000000000003694                 mov     ecx, edx
.text:0000000000003696                 mov     rax, fs:28h
.text:000000000000369F                 mov     [rsp+48h+var_10], rax
.text:00000000000036A4                 xor     eax, eax
.text:00000000000036A6                 mov     rax, cs:qword_207230
.text:00000000000036AD                 mov     r8, rsp
.text:00000000000036B0                 and     ecx, 1Fh
.text:00000000000036B3                 movdqa  xmm0, cs:default_quoting_options
.text:00000000000036BB                 mov     [rsp+48h+var_18], rax
.text:00000000000036C0                 mov     eax, edx
.text:00000000000036C2                 movaps  [rsp+48h+var_48], xmm0
.text:00000000000036C6                 shr     al, 5
.text:00000000000036C9                 movzx   eax, al
.text:00000000000036CC                 lea     r9, [r8+rax*4+8]
.text:00000000000036D1                 movdqa  xmm0, cs:xmmword_207210
.text:00000000000036D9                 movaps  [rsp+48h+var_38], xmm0
.text:00000000000036DE                 movdqa  xmm0, cs:xmmword_207220
.text:00000000000036E6                 movaps  [rsp+48h+var_28], xmm0
.text:00000000000036EB                 mov     edx, [r9]
.text:00000000000036EE                 mov     eax, edx
.text:00000000000036F0                 shr     eax, cl
.text:00000000000036F2                 not     eax
.text:00000000000036F4                 and     eax, 1
.text:00000000000036F7                 shl     eax, cl
.text:00000000000036F9                 mov     rcx, r8
.text:00000000000036FC                 xor     eax, edx
.text:00000000000036FE                 mov     rdx, rsi
.text:0000000000003701                 mov     rsi, rdi
.text:0000000000003704                 mov     [r9], eax
.text:0000000000003707                 xor     edi, edi
.text:0000000000003709                 call    quotearg_n_options
.text:000000000000370E                 mov     rsi, [rsp+48h+var_10]
.text:0000000000003713                 xor     rsi, fs:28h
.text:000000000000371C                 jnz     short loc_3723
.text:000000000000371E                 add     rsp, 48h
.text:0000000000003722                 retn
.text:0000000000003723 ; ---------------------------------------------------------------------------
.text:0000000000003723
.text:0000000000003723 loc_3723:                               ; CODE XREF: quotearg_char_mem+8C↑j
.text:0000000000003723                 call    ___stack_chk_fail
.text:0000000000003723 ; } // starts at 3690
.text:0000000000003723 quotearg_char_mem endp
.text:0000000000003723
.text:0000000000003723 ; ---------------------------------------------------------------------------
.text:0000000000003728                 align 10h
.text:0000000000003730
.text:0000000000003730 ; =============== S U B R O U T I N E =======================================
.text:0000000000003730
.text:0000000000003730
.text:0000000000003730                 public quotearg_char
.text:0000000000003730 quotearg_char   proc near
.text:0000000000003730 ; __unwind {
.text:0000000000003730                 movsx   edx, sil
.text:0000000000003734                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000373B                 jmp     quotearg_char_mem
.text:000000000000373B ; } // starts at 3730
.text:000000000000373B quotearg_char   endp
.text:000000000000373B
.text:0000000000003740
.text:0000000000003740 ; =============== S U B R O U T I N E =======================================
.text:0000000000003740
.text:0000000000003740
.text:0000000000003740                 public quotearg_colon
.text:0000000000003740 quotearg_colon  proc near               ; CODE XREF: close_stdout+65↑p
.text:0000000000003740 ; __unwind {
.text:0000000000003740                 mov     edx, 3Ah ; ':'
.text:0000000000003745                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000374C                 jmp     quotearg_char_mem
.text:000000000000374C ; } // starts at 3740
.text:000000000000374C quotearg_colon  endp
.text:000000000000374C
.text:000000000000374C ; ---------------------------------------------------------------------------
.text:0000000000003751                 align 20h
.text:0000000000003760
.text:0000000000003760 ; =============== S U B R O U T I N E =======================================
.text:0000000000003760
.text:0000000000003760
.text:0000000000003760                 public quotearg_colon_mem
.text:0000000000003760 quotearg_colon_mem proc near
.text:0000000000003760 ; __unwind {
.text:0000000000003760                 mov     edx, 3Ah ; ':'
.text:0000000000003765                 jmp     quotearg_char_mem
.text:0000000000003765 ; } // starts at 3760
.text:0000000000003765 quotearg_colon_mem endp
.text:0000000000003765
.text:0000000000003765 ; ---------------------------------------------------------------------------
.text:000000000000376A                 align 10h
.text:0000000000003770
.text:0000000000003770 ; =============== S U B R O U T I N E =======================================
.text:0000000000003770
.text:0000000000003770 ; Attributes: info_from_lumina
.text:0000000000003770
.text:0000000000003770 ; char *__fastcall quotearg_n_style_colon(int n, quoting_style s, const char *arg)
.text:0000000000003770                 public quotearg_n_style_colon
.text:0000000000003770 quotearg_n_style_colon proc near
.text:0000000000003770
.text:0000000000003770 var_48          = dword ptr -48h
.text:0000000000003770 var_44          = qword ptr -44h
.text:0000000000003770 var_3C          = qword ptr -3Ch
.text:0000000000003770 var_34          = qword ptr -34h
.text:0000000000003770 var_2C          = qword ptr -2Ch
.text:0000000000003770 var_24          = qword ptr -24h
.text:0000000000003770 var_1C          = qword ptr -1Ch
.text:0000000000003770 var_14          = dword ptr -14h
.text:0000000000003770 var_10          = qword ptr -10h
.text:0000000000003770
.text:0000000000003770 ; __unwind {
.text:0000000000003770                 sub     rsp, 48h
.text:0000000000003774                 mov     rax, rdx
.text:0000000000003777                 mov     rdx, fs:28h
.text:0000000000003780                 mov     [rsp+48h+var_10], rdx
.text:0000000000003785                 xor     edx, edx
.text:0000000000003787                 cmp     esi, 0Ah
.text:000000000000378A                 jz      short loc_37F4
.text:000000000000378C                 mov     [rsp+48h+var_48], esi
.text:000000000000378F                 mov     rcx, rsp
.text:0000000000003792                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003799                 mov     rsi, rax
.text:000000000000379C                 mov     [rsp+48h+var_44], 0
.text:00000000000037A5                 mov     [rsp+48h+var_3C], 4000000h
.text:00000000000037AE                 mov     [rsp+48h+var_34], 0
.text:00000000000037B7                 mov     [rsp+48h+var_2C], 0
.text:00000000000037C0                 mov     [rsp+48h+var_24], 0
.text:00000000000037C9                 mov     [rsp+48h+var_1C], 0
.text:00000000000037D2                 mov     [rsp+48h+var_14], 0
.text:00000000000037DA                 call    quotearg_n_options
.text:00000000000037DF                 mov     rcx, [rsp+48h+var_10]
.text:00000000000037E4                 xor     rcx, fs:28h
.text:00000000000037ED                 jnz     short loc_37F9
.text:00000000000037EF                 add     rsp, 48h
.text:00000000000037F3                 retn
.text:00000000000037F4 ; ---------------------------------------------------------------------------
.text:00000000000037F4
.text:00000000000037F4 loc_37F4:                               ; CODE XREF: quotearg_n_style_colon+1A↑j
.text:00000000000037F4                 call    _abort
.text:00000000000037F9 ; ---------------------------------------------------------------------------
.text:00000000000037F9
.text:00000000000037F9 loc_37F9:                               ; CODE XREF: quotearg_n_style_colon+7D↑j
.text:00000000000037F9                 call    ___stack_chk_fail
.text:00000000000037F9 ; } // starts at 3770
.text:00000000000037F9 quotearg_n_style_colon endp
.text:00000000000037F9
.text:00000000000037F9 ; ---------------------------------------------------------------------------
.text:00000000000037FE                 align 20h
.text:0000000000003800
.text:0000000000003800 ; =============== S U B R O U T I N E =======================================
.text:0000000000003800
.text:0000000000003800 ; Attributes: info_from_lumina
.text:0000000000003800
.text:0000000000003800 ; char *__fastcall quotearg_n_custom_mem(int n, const char *left_quote, const char *right_quote, const char *arg, size_t argsize)
.text:0000000000003800                 public quotearg_n_custom_mem
.text:0000000000003800 quotearg_n_custom_mem proc near         ; CODE XREF: quotearg_n_custom+7↓j
.text:0000000000003800                                         ; quotearg_custom+12↓j ...
.text:0000000000003800
.text:0000000000003800 var_48          = xmmword ptr -48h
.text:0000000000003800 var_38          = xmmword ptr -38h
.text:0000000000003800 var_28          = xmmword ptr -28h
.text:0000000000003800 var_18          = qword ptr -18h
.text:0000000000003800 var_10          = qword ptr -10h
.text:0000000000003800
.text:0000000000003800 ; __unwind {
.text:0000000000003800                 sub     rsp, 48h
.text:0000000000003804                 mov     r9, rcx
.text:0000000000003807                 mov     rcx, cs:qword_207230
.text:000000000000380E                 movdqa  xmm0, cs:default_quoting_options
.text:0000000000003816                 mov     rax, fs:28h
.text:000000000000381F                 mov     [rsp+48h+var_10], rax
.text:0000000000003824                 xor     eax, eax
.text:0000000000003826                 movaps  [rsp+48h+var_48], xmm0
.text:000000000000382A                 test    rsi, rsi
.text:000000000000382D                 mov     [rsp+48h+var_18], rcx
.text:0000000000003832                 mov     dword ptr [rsp+48h+var_48], 0Ah
.text:0000000000003839                 movdqa  xmm0, cs:xmmword_207210
.text:0000000000003841                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000003846                 movdqa  xmm0, cs:xmmword_207220
.text:000000000000384E                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000003853                 jz      short loc_3887
.text:0000000000003855                 test    rdx, rdx
.text:0000000000003858                 jz      short loc_3887
.text:000000000000385A                 mov     qword ptr [rsp+48h+var_28+8], rsi
.text:000000000000385F                 mov     [rsp+48h+var_18], rdx
.text:0000000000003864                 mov     rcx, rsp
.text:0000000000003867                 mov     rdx, r8
.text:000000000000386A                 mov     rsi, r9
.text:000000000000386D                 call    quotearg_n_options
.text:0000000000003872                 mov     rdi, [rsp+48h+var_10]
.text:0000000000003877                 xor     rdi, fs:28h
.text:0000000000003880                 jnz     short loc_388C
.text:0000000000003882                 add     rsp, 48h
.text:0000000000003886                 retn
.text:0000000000003887 ; ---------------------------------------------------------------------------
.text:0000000000003887
.text:0000000000003887 loc_3887:                               ; CODE XREF: quotearg_n_custom_mem+53↑j
.text:0000000000003887                                         ; quotearg_n_custom_mem+58↑j
.text:0000000000003887                 call    _abort
.text:000000000000388C ; ---------------------------------------------------------------------------
.text:000000000000388C
.text:000000000000388C loc_388C:                               ; CODE XREF: quotearg_n_custom_mem+80↑j
.text:000000000000388C                 call    ___stack_chk_fail
.text:000000000000388C ; } // starts at 3800
.text:000000000000388C quotearg_n_custom_mem endp
.text:000000000000388C
.text:000000000000388C ; ---------------------------------------------------------------------------
.text:0000000000003891                 align 20h
.text:00000000000038A0
.text:00000000000038A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000038A0
.text:00000000000038A0
.text:00000000000038A0                 public quotearg_n_custom
.text:00000000000038A0 quotearg_n_custom proc near
.text:00000000000038A0 ; __unwind {
.text:00000000000038A0                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:00000000000038A7                 jmp     quotearg_n_custom_mem
.text:00000000000038A7 ; } // starts at 38A0
.text:00000000000038A7 quotearg_n_custom endp
.text:00000000000038A7
.text:00000000000038A7 ; ---------------------------------------------------------------------------
.text:00000000000038AC                 align 10h
.text:00000000000038B0
.text:00000000000038B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000038B0
.text:00000000000038B0
.text:00000000000038B0                 public quotearg_custom
.text:00000000000038B0 quotearg_custom proc near
.text:00000000000038B0 ; __unwind {
.text:00000000000038B0                 mov     rcx, rdx
.text:00000000000038B3                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:00000000000038BA                 mov     rdx, rsi
.text:00000000000038BD                 mov     rsi, rdi
.text:00000000000038C0                 xor     edi, edi
.text:00000000000038C2                 jmp     quotearg_n_custom_mem
.text:00000000000038C2 ; } // starts at 38B0
.text:00000000000038C2 quotearg_custom endp
.text:00000000000038C2
.text:00000000000038C2 ; ---------------------------------------------------------------------------
.text:00000000000038C7                 align 10h
.text:00000000000038D0
.text:00000000000038D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000038D0
.text:00000000000038D0
.text:00000000000038D0                 public quotearg_custom_mem
.text:00000000000038D0 quotearg_custom_mem proc near
.text:00000000000038D0 ; __unwind {
.text:00000000000038D0                 mov     r8, rcx
.text:00000000000038D3                 mov     rcx, rdx
.text:00000000000038D6                 mov     rdx, rsi
.text:00000000000038D9                 mov     rsi, rdi
.text:00000000000038DC                 xor     edi, edi
.text:00000000000038DE                 jmp     quotearg_n_custom_mem
.text:00000000000038DE ; } // starts at 38D0
.text:00000000000038DE quotearg_custom_mem endp
.text:00000000000038DE
.text:00000000000038DE ; ---------------------------------------------------------------------------
.text:00000000000038E3                 align 10h
.text:00000000000038F0
.text:00000000000038F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000038F0
.text:00000000000038F0
.text:00000000000038F0                 public quote_n_mem
.text:00000000000038F0 quote_n_mem     proc near
.text:00000000000038F0 ; __unwind {
.text:00000000000038F0                 lea     rcx, quote_quoting_options
.text:00000000000038F7                 jmp     quotearg_n_options
.text:00000000000038F7 ; } // starts at 38F0
.text:00000000000038F7 quote_n_mem     endp
.text:00000000000038F7
.text:00000000000038F7 ; ---------------------------------------------------------------------------
.text:00000000000038FC                 align 20h
.text:0000000000003900
.text:0000000000003900 ; =============== S U B R O U T I N E =======================================
.text:0000000000003900
.text:0000000000003900
.text:0000000000003900                 public quote_mem
.text:0000000000003900 quote_mem       proc near
.text:0000000000003900 ; __unwind {
.text:0000000000003900                 lea     rcx, quote_quoting_options
.text:0000000000003907                 mov     rdx, rsi
.text:000000000000390A                 mov     rsi, rdi
.text:000000000000390D                 xor     edi, edi
.text:000000000000390F                 jmp     quotearg_n_options
.text:000000000000390F ; } // starts at 3900
.text:000000000000390F quote_mem       endp
.text:000000000000390F
.text:000000000000390F ; ---------------------------------------------------------------------------
.text:0000000000003914                 align 20h
.text:0000000000003920
.text:0000000000003920 ; =============== S U B R O U T I N E =======================================
.text:0000000000003920
.text:0000000000003920
.text:0000000000003920                 public quote_n
.text:0000000000003920 quote_n         proc near
.text:0000000000003920 ; __unwind {
.text:0000000000003920                 lea     rcx, quote_quoting_options
.text:0000000000003927                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000392E                 jmp     quotearg_n_options
.text:000000000000392E ; } // starts at 3920
.text:000000000000392E quote_n         endp
.text:000000000000392E
.text:000000000000392E ; ---------------------------------------------------------------------------
.text:0000000000003933                 align 20h
.text:0000000000003940
.text:0000000000003940 ; =============== S U B R O U T I N E =======================================
.text:0000000000003940
.text:0000000000003940
.text:0000000000003940                 public quote
.text:0000000000003940 quote           proc near
.text:0000000000003940 ; __unwind {
.text:0000000000003940                 lea     rcx, quote_quoting_options
.text:0000000000003947                 mov     rsi, rdi
.text:000000000000394A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003951                 xor     edi, edi
.text:0000000000003953                 jmp     quotearg_n_options
.text:0000000000003953 ; } // starts at 3940
.text:0000000000003953 quote           endp
.text:0000000000003953
.text:0000000000003953 ; ---------------------------------------------------------------------------
.text:0000000000003958                 align 20h
.text:0000000000003960
.text:0000000000003960 ; =============== S U B R O U T I N E =======================================
.text:0000000000003960
.text:0000000000003960
.text:0000000000003960 ; __int64 __fastcall version_etc_arn(FILE *stream)
.text:0000000000003960                 public version_etc_arn
.text:0000000000003960 version_etc_arn proc near               ; CODE XREF: version_etc_ar:loc_3D9B↓j
.text:0000000000003960                                         ; version_etc_va:loc_3DEB↓p ...
.text:0000000000003960
.text:0000000000003960 var_58          = qword ptr -58h
.text:0000000000003960 var_50          = qword ptr -50h
.text:0000000000003960 var_48          = qword ptr -48h
.text:0000000000003960 var_40          = qword ptr -40h
.text:0000000000003960
.text:0000000000003960 ; __unwind {
.text:0000000000003960                 push    r15
.text:0000000000003962                 push    r14
.text:0000000000003964                 push    r13
.text:0000000000003966                 push    r12
.text:0000000000003968                 mov     r12, r9
.text:000000000000396B                 push    rbp
.text:000000000000396C                 push    rbx
.text:000000000000396D                 mov     rbp, rdi
.text:0000000000003970                 mov     rbx, r8
.text:0000000000003973                 sub     rsp, 28h
.text:0000000000003977                 test    rsi, rsi
.text:000000000000397A                 jz      loc_3A98
.text:0000000000003980                 mov     r8, rdx
.text:0000000000003983                 lea     rdx, aSSS       ; "%s (%s) %s\n"
.text:000000000000398A                 mov     r9, rcx
.text:000000000000398D                 xor     eax, eax
.text:000000000000398F                 mov     rcx, rsi
.text:0000000000003992                 mov     esi, 1
.text:0000000000003997                 call    ___fprintf_chk
.text:000000000000399C
.text:000000000000399C loc_399C:                               ; CODE XREF: version_etc_arn+151↓j
.text:000000000000399C                 lea     rsi, aC_0       ; "(C)"
.text:00000000000039A3                 xor     edi, edi        ; domainname
.text:00000000000039A5                 mov     edx, 5          ; category
.text:00000000000039AA                 call    _dcgettext
.text:00000000000039AF                 lea     rdx, version_etc_copyright ; "Copyright %s %d Free Software Foundatio"...
.text:00000000000039B6                 mov     rcx, rax
.text:00000000000039B9                 mov     r8d, 7E3h
.text:00000000000039BF                 mov     esi, 1
.text:00000000000039C4                 mov     rdi, rbp
.text:00000000000039C7                 xor     eax, eax
.text:00000000000039C9                 call    ___fprintf_chk
.text:00000000000039CE                 lea     rsi, aLicenseGplv3Gn ; "\nLicense GPLv3+: GNU GPL version 3 or "...
.text:00000000000039D5                 xor     edi, edi        ; domainname
.text:00000000000039D7                 mov     edx, 5          ; category
.text:00000000000039DC                 call    _dcgettext
.text:00000000000039E1                 mov     rsi, rbp        ; stream
.text:00000000000039E4                 mov     rdi, rax        ; s
.text:00000000000039E7                 call    _fputs_unlocked
.text:00000000000039EC                 cmp     r12, 9          ; switch 10 cases
.text:00000000000039F0                 ja      def_3A04        ; jumptable 0000000000003A04 default case
.text:00000000000039F6                 lea     rdx, jpt_3A04
.text:00000000000039FD                 movsxd  rax, ds:(jpt_3A04 - 51A8h)[rdx+r12*4]
.text:0000000000003A01                 add     rax, rdx
.text:0000000000003A04                 jmp     rax             ; switch jump
.text:0000000000003A04 ; ---------------------------------------------------------------------------
.text:0000000000003A06                 align 10h
.text:0000000000003A10
.text:0000000000003A10 loc_3A10:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003A10                                         ; DATA XREF: .rodata:jpt_3A04↓o
.text:0000000000003A10                 mov     r9, [rbx+38h]   ; jumptable 0000000000003A04 case 8
.text:0000000000003A14                 mov     rax, [rbx+10h]
.text:0000000000003A18                 lea     rsi, aWrittenBySSSSS ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000003A1F                 mov     r8, [rbx+8]
.text:0000000000003A23                 mov     edx, 5          ; category
.text:0000000000003A28                 xor     edi, edi        ; domainname
.text:0000000000003A2A                 mov     r13, [rbx+30h]
.text:0000000000003A2E                 mov     r12, [rbx+28h]
.text:0000000000003A32                 mov     [rsp+58h+var_48], r9
.text:0000000000003A37                 mov     r15, [rbx+20h]
.text:0000000000003A3B                 mov     r14, [rbx+18h]
.text:0000000000003A3F                 mov     [rsp+58h+var_58], rax
.text:0000000000003A43                 mov     [rsp+58h+var_50], r8
.text:0000000000003A48                 mov     rbx, [rbx]
.text:0000000000003A4B                 call    _dcgettext
.text:0000000000003A50                 sub     rsp, 8
.text:0000000000003A54
.text:0000000000003A54 loc_3A54:                               ; CODE XREF: version_etc_arn+1B0↓j
.text:0000000000003A54                 mov     r9, [rsp+60h+var_48]
.text:0000000000003A59                 mov     rdx, rax
.text:0000000000003A5C                 mov     rcx, rbx
.text:0000000000003A5F                 mov     esi, 1
.text:0000000000003A64                 mov     rdi, rbp
.text:0000000000003A67                 xor     eax, eax
.text:0000000000003A69                 push    r9
.text:0000000000003A6B                 push    r13
.text:0000000000003A6D                 push    r12
.text:0000000000003A6F                 push    r15
.text:0000000000003A71                 push    r14
.text:0000000000003A73                 mov     r9, [rsp+88h+var_58]
.text:0000000000003A78                 mov     r8, [rsp+88h+var_50]
.text:0000000000003A7D                 call    ___fprintf_chk
.text:0000000000003A82                 add     rsp, 30h
.text:0000000000003A86
.text:0000000000003A86 loc_3A86:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003A86                                         ; DATA XREF: .rodata:jpt_3A04↓o
.text:0000000000003A86                 add     rsp, 28h        ; jumptable 0000000000003A04 case 0
.text:0000000000003A8A                 pop     rbx
.text:0000000000003A8B                 pop     rbp
.text:0000000000003A8C                 pop     r12
.text:0000000000003A8E                 pop     r13
.text:0000000000003A90                 pop     r14
.text:0000000000003A92                 pop     r15
.text:0000000000003A94                 retn
.text:0000000000003A94 ; ---------------------------------------------------------------------------
.text:0000000000003A95                 align 8
.text:0000000000003A98
.text:0000000000003A98 loc_3A98:                               ; CODE XREF: version_etc_arn+1A↑j
.text:0000000000003A98                 mov     r8, rcx
.text:0000000000003A9B                 mov     rcx, rdx
.text:0000000000003A9E                 lea     rdx, aSS_0      ; "%s %s\n"
.text:0000000000003AA5                 mov     esi, 1
.text:0000000000003AAA                 xor     eax, eax
.text:0000000000003AAC                 call    ___fprintf_chk
.text:0000000000003AB1                 jmp     loc_399C
.text:0000000000003AB1 ; ---------------------------------------------------------------------------
.text:0000000000003AB6                 align 20h
.text:0000000000003AC0
.text:0000000000003AC0 loc_3AC0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003AC0                                         ; DATA XREF: .rodata:jpt_3A04↓o
.text:0000000000003AC0                 mov     r10, [rbx+40h]  ; jumptable 0000000000003A04 case 9
.text:0000000000003AC4                 mov     r9, [rbx+38h]
.text:0000000000003AC8                 lea     rsi, aWrittenBySSSSS_0 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000003ACF                 mov     rax, [rbx+10h]
.text:0000000000003AD3                 mov     r8, [rbx+8]
.text:0000000000003AD7                 mov     edx, 5          ; category
.text:0000000000003ADC                 mov     r13, [rbx+30h]
.text:0000000000003AE0                 mov     r12, [rbx+28h]
.text:0000000000003AE4                 mov     r15, [rbx+20h]
.text:0000000000003AE8                 mov     r14, [rbx+18h]
.text:0000000000003AEC                 mov     rbx, [rbx]
.text:0000000000003AEF                 mov     [rsp+58h+var_40], r10
.text:0000000000003AF4                 mov     [rsp+58h+var_48], r9
.text:0000000000003AF9                 mov     [rsp+58h+var_58], rax
.text:0000000000003AFD                 mov     [rsp+58h+var_50], r8
.text:0000000000003B02
.text:0000000000003B02 loc_3B02:                               ; CODE XREF: version_etc_arn+412↓j
.text:0000000000003B02                 xor     edi, edi        ; domainname
.text:0000000000003B04                 call    _dcgettext
.text:0000000000003B09                 mov     r10, [rsp+58h+var_40]
.text:0000000000003B0E                 push    r10
.text:0000000000003B10                 jmp     loc_3A54
.text:0000000000003B10 ; ---------------------------------------------------------------------------
.text:0000000000003B15                 align 8
.text:0000000000003B18
.text:0000000000003B18 loc_3B18:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003B18                                         ; DATA XREF: .rodata:jpt_3A04↓o
.text:0000000000003B18                 mov     rbx, [rbx]      ; jumptable 0000000000003A04 case 1
.text:0000000000003B1B                 lea     rsi, aWrittenByS ; "Written by %s.\n"
.text:0000000000003B22                 mov     edx, 5          ; category
.text:0000000000003B27                 xor     edi, edi        ; domainname
.text:0000000000003B29                 call    _dcgettext
.text:0000000000003B2E                 add     rsp, 28h
.text:0000000000003B32                 mov     rcx, rbx
.text:0000000000003B35                 mov     rdi, rbp
.text:0000000000003B38                 pop     rbx
.text:0000000000003B39                 pop     rbp
.text:0000000000003B3A                 pop     r12
.text:0000000000003B3C                 pop     r13
.text:0000000000003B3E                 pop     r14
.text:0000000000003B40                 pop     r15
.text:0000000000003B42                 mov     rdx, rax
.text:0000000000003B45                 mov     esi, 1
.text:0000000000003B4A                 xor     eax, eax
.text:0000000000003B4C                 jmp     ___fprintf_chk
.text:0000000000003B4C ; ---------------------------------------------------------------------------
.text:0000000000003B51                 align 8
.text:0000000000003B58
.text:0000000000003B58 loc_3B58:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003B58                                         ; DATA XREF: .rodata:jpt_3A04↓o
.text:0000000000003B58                 mov     r12, [rbx+8]    ; jumptable 0000000000003A04 case 2
.text:0000000000003B5C                 lea     rsi, aWrittenBySAndS ; "Written by %s and %s.\n"
.text:0000000000003B63                 mov     rbx, [rbx]
.text:0000000000003B66                 mov     edx, 5          ; category
.text:0000000000003B6B                 xor     edi, edi        ; domainname
.text:0000000000003B6D                 call    _dcgettext
.text:0000000000003B72                 add     rsp, 28h
.text:0000000000003B76                 mov     r8, r12
.text:0000000000003B79                 mov     rcx, rbx
.text:0000000000003B7C                 mov     rdi, rbp
.text:0000000000003B7F                 mov     rdx, rax
.text:0000000000003B82                 mov     esi, 1
.text:0000000000003B87                 pop     rbx
.text:0000000000003B88                 pop     rbp
.text:0000000000003B89                 pop     r12
.text:0000000000003B8B                 pop     r13
.text:0000000000003B8D                 pop     r14
.text:0000000000003B8F                 pop     r15
.text:0000000000003B91                 xor     eax, eax
.text:0000000000003B93                 jmp     ___fprintf_chk
.text:0000000000003B93 ; ---------------------------------------------------------------------------
.text:0000000000003B98                 align 20h
.text:0000000000003BA0
.text:0000000000003BA0 loc_3BA0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003BA0                                         ; DATA XREF: .rodata:jpt_3A04↓o
.text:0000000000003BA0                 mov     r13, [rbx+10h]  ; jumptable 0000000000003A04 case 3
.text:0000000000003BA4                 mov     r12, [rbx+8]
.text:0000000000003BA8                 lea     rsi, aWrittenBySSAnd ; "Written by %s, %s, and %s.\n"
.text:0000000000003BAF                 mov     rbx, [rbx]
.text:0000000000003BB2                 mov     edx, 5          ; category
.text:0000000000003BB7                 xor     edi, edi        ; domainname
.text:0000000000003BB9                 call    _dcgettext
.text:0000000000003BBE                 add     rsp, 28h
.text:0000000000003BC2                 mov     r9, r13
.text:0000000000003BC5                 mov     r8, r12
.text:0000000000003BC8                 mov     rcx, rbx
.text:0000000000003BCB                 mov     rdi, rbp
.text:0000000000003BCE                 mov     rdx, rax
.text:0000000000003BD1                 pop     rbx
.text:0000000000003BD2                 pop     rbp
.text:0000000000003BD3                 pop     r12
.text:0000000000003BD5                 pop     r13
.text:0000000000003BD7                 pop     r14
.text:0000000000003BD9                 pop     r15
.text:0000000000003BDB                 mov     esi, 1
.text:0000000000003BE0                 xor     eax, eax
.text:0000000000003BE2                 jmp     ___fprintf_chk
.text:0000000000003BE2 ; ---------------------------------------------------------------------------
.text:0000000000003BE7                 align 10h
.text:0000000000003BF0
.text:0000000000003BF0 loc_3BF0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003BF0                                         ; DATA XREF: .rodata:jpt_3A04↓o
.text:0000000000003BF0                 lea     rsi, aWrittenBySSSAn ; jumptable 0000000000003A04 case 4
.text:0000000000003BF7                 mov     edx, 5          ; category
.text:0000000000003BFC                 xor     edi, edi        ; domainname
.text:0000000000003BFE                 mov     r14, [rbx+18h]
.text:0000000000003C02                 mov     r13, [rbx+10h]
.text:0000000000003C06                 mov     r12, [rbx+8]
.text:0000000000003C0A                 mov     rbx, [rbx]
.text:0000000000003C0D                 call    _dcgettext
.text:0000000000003C12                 sub     rsp, 8
.text:0000000000003C16
.text:0000000000003C16 loc_3C16:                               ; CODE XREF: version_etc_arn+310↓j
.text:0000000000003C16                 push    r14
.text:0000000000003C18                 mov     rdx, rax
.text:0000000000003C1B                 mov     r9, r13
.text:0000000000003C1E                 mov     r8, r12
.text:0000000000003C21                 mov     rcx, rbx
.text:0000000000003C24                 mov     rdi, rbp
.text:0000000000003C27                 mov     esi, 1
.text:0000000000003C2C                 xor     eax, eax
.text:0000000000003C2E                 call    ___fprintf_chk
.text:0000000000003C33                 pop     rax
.text:0000000000003C34                 pop     rdx
.text:0000000000003C35                 add     rsp, 28h
.text:0000000000003C39                 pop     rbx
.text:0000000000003C3A                 pop     rbp
.text:0000000000003C3B                 pop     r12
.text:0000000000003C3D                 pop     r13
.text:0000000000003C3F                 pop     r14
.text:0000000000003C41                 pop     r15
.text:0000000000003C43                 retn
.text:0000000000003C43 ; ---------------------------------------------------------------------------
.text:0000000000003C44                 align 8
.text:0000000000003C48
.text:0000000000003C48 loc_3C48:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003C48                                         ; DATA XREF: .rodata:jpt_3A04↓o
.text:0000000000003C48                 mov     r15, [rbx+20h]  ; jumptable 0000000000003A04 case 5
.text:0000000000003C4C                 lea     rsi, aWrittenBySSSSA ; "Written by %s, %s, %s,\n%s, and %s.\n"
.text:0000000000003C53                 mov     edx, 5          ; category
.text:0000000000003C58                 xor     edi, edi        ; domainname
.text:0000000000003C5A                 mov     r14, [rbx+18h]
.text:0000000000003C5E                 mov     r13, [rbx+10h]
.text:0000000000003C62                 mov     r12, [rbx+8]
.text:0000000000003C66                 mov     rbx, [rbx]
.text:0000000000003C69                 call    _dcgettext
.text:0000000000003C6E                 push    r15
.text:0000000000003C70                 jmp     short loc_3C16
.text:0000000000003C70 ; ---------------------------------------------------------------------------
.text:0000000000003C72                 align 8
.text:0000000000003C78
.text:0000000000003C78 loc_3C78:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003C78                                         ; DATA XREF: .rodata:jpt_3A04↓o
.text:0000000000003C78                 mov     r8, [rbx+8]     ; jumptable 0000000000003A04 case 6
.text:0000000000003C7C                 mov     r12, [rbx+28h]
.text:0000000000003C80                 lea     rsi, aWrittenBySSSSS_1 ; "Written by %s, %s, %s,\n%s, %s, and %s."...
.text:0000000000003C87                 mov     r15, [rbx+20h]
.text:0000000000003C8B                 mov     r14, [rbx+18h]
.text:0000000000003C8F                 mov     edx, 5          ; category
.text:0000000000003C94                 mov     r13, [rbx+10h]
.text:0000000000003C98                 xor     edi, edi        ; domainname
.text:0000000000003C9A                 mov     rbx, [rbx]
.text:0000000000003C9D                 mov     [rsp+58h+var_58], r8
.text:0000000000003CA1                 call    _dcgettext
.text:0000000000003CA6                 sub     rsp, 8
.text:0000000000003CAA                 mov     r9, r13
.text:0000000000003CAD                 push    r12
.text:0000000000003CAF                 push    r15
.text:0000000000003CB1                 push    r14
.text:0000000000003CB3
.text:0000000000003CB3 loc_3CB3:                               ; CODE XREF: version_etc_arn+3C4↓j
.text:0000000000003CB3                 mov     r8, [rsp+78h+var_58]
.text:0000000000003CB8                 mov     rcx, rbx
.text:0000000000003CBB                 mov     rdx, rax
.text:0000000000003CBE                 mov     rdi, rbp
.text:0000000000003CC1                 mov     esi, 1
.text:0000000000003CC6                 xor     eax, eax
.text:0000000000003CC8                 call    ___fprintf_chk
.text:0000000000003CCD                 add     rsp, 20h
.text:0000000000003CD1                 add     rsp, 28h
.text:0000000000003CD5                 pop     rbx
.text:0000000000003CD6                 pop     rbp
.text:0000000000003CD7                 pop     r12
.text:0000000000003CD9                 pop     r13
.text:0000000000003CDB                 pop     r14
.text:0000000000003CDD                 pop     r15
.text:0000000000003CDF                 retn
.text:0000000000003CE0 ; ---------------------------------------------------------------------------
.text:0000000000003CE0
.text:0000000000003CE0 loc_3CE0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003CE0                                         ; DATA XREF: .rodata:jpt_3A04↓o
.text:0000000000003CE0                 mov     r9, [rbx+10h]   ; jumptable 0000000000003A04 case 7
.text:0000000000003CE4                 mov     r13, [rbx+30h]
.text:0000000000003CE8                 lea     rsi, aWrittenBySSSSS_2 ; "Written by %s, %s, %s,\n%s, %s, %s, and"...
.text:0000000000003CEF                 mov     r12, [rbx+28h]
.text:0000000000003CF3                 mov     r15, [rbx+20h]
.text:0000000000003CF7                 mov     edx, 5          ; category
.text:0000000000003CFC                 mov     r14, [rbx+18h]
.text:0000000000003D00                 mov     r8, [rbx+8]
.text:0000000000003D04                 xor     edi, edi        ; domainname
.text:0000000000003D06                 mov     [rsp+58h+var_50], r9
.text:0000000000003D0B                 mov     rbx, [rbx]
.text:0000000000003D0E                 mov     [rsp+58h+var_58], r8
.text:0000000000003D12                 call    _dcgettext
.text:0000000000003D17                 push    r13
.text:0000000000003D19                 push    r12
.text:0000000000003D1B                 push    r15
.text:0000000000003D1D                 push    r14
.text:0000000000003D1F                 mov     r9, [rsp+78h+var_50]
.text:0000000000003D24                 jmp     short loc_3CB3
.text:0000000000003D24 ; ---------------------------------------------------------------------------
.text:0000000000003D26                 align 10h
.text:0000000000003D30
.text:0000000000003D30 def_3A04:                               ; CODE XREF: version_etc_arn+90↑j
.text:0000000000003D30                 mov     r10, [rbx+40h]  ; jumptable 0000000000003A04 default case
.text:0000000000003D34                 mov     r9, [rbx+38h]
.text:0000000000003D38                 mov     edx, 5
.text:0000000000003D3D                 mov     rax, [rbx+10h]
.text:0000000000003D41                 mov     r8, [rbx+8]
.text:0000000000003D45                 lea     rsi, aWrittenBySSSSS_3 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000003D4C                 mov     r13, [rbx+30h]
.text:0000000000003D50                 mov     r12, [rbx+28h]
.text:0000000000003D54                 mov     r15, [rbx+20h]
.text:0000000000003D58                 mov     r14, [rbx+18h]
.text:0000000000003D5C                 mov     [rsp+58h+var_40], r10
.text:0000000000003D61                 mov     [rsp+58h+var_48], r9
.text:0000000000003D66                 mov     [rsp+58h+var_58], rax
.text:0000000000003D6A                 mov     [rsp+58h+var_50], r8
.text:0000000000003D6F                 mov     rbx, [rbx]
.text:0000000000003D72                 jmp     loc_3B02
.text:0000000000003D72 ; } // starts at 3960
.text:0000000000003D72 version_etc_arn endp
.text:0000000000003D72
.text:0000000000003D72 ; ---------------------------------------------------------------------------
.text:0000000000003D77                 align 20h
.text:0000000000003D80
.text:0000000000003D80 ; =============== S U B R O U T I N E =======================================
.text:0000000000003D80
.text:0000000000003D80 ; Attributes: info_from_lumina
.text:0000000000003D80
.text:0000000000003D80 ; void __fastcall version_etc_ar(FILE *stream, const char *command_name, const char *package, const char *version, const char *const *authors)
.text:0000000000003D80                 public version_etc_ar
.text:0000000000003D80 version_etc_ar  proc near
.text:0000000000003D80 ; __unwind {
.text:0000000000003D80                 xor     r9d, r9d
.text:0000000000003D83                 cmp     qword ptr [r8], 0
.text:0000000000003D87                 jz      short loc_3D9B
.text:0000000000003D89                 nop     dword ptr [rax+00000000h]
.text:0000000000003D90
.text:0000000000003D90 loc_3D90:                               ; CODE XREF: version_etc_ar+19↓j
.text:0000000000003D90                 add     r9, 1
.text:0000000000003D94                 cmp     qword ptr [r8+r9*8], 0
.text:0000000000003D99                 jnz     short loc_3D90
.text:0000000000003D9B
.text:0000000000003D9B loc_3D9B:                               ; CODE XREF: version_etc_ar+7↑j
.text:0000000000003D9B                 jmp     version_etc_arn
.text:0000000000003D9B ; } // starts at 3D80
.text:0000000000003D9B version_etc_ar  endp
.text:0000000000003D9B
.text:0000000000003DA0
.text:0000000000003DA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003DA0
.text:0000000000003DA0 ; Attributes: info_from_lumina
.text:0000000000003DA0
.text:0000000000003DA0 ; void __fastcall version_etc_va(FILE *stream, const char *command_name, const char *package, const char *version, __va_list_tag *authors)
.text:0000000000003DA0                 public version_etc_va
.text:0000000000003DA0 version_etc_va  proc near
.text:0000000000003DA0
.text:0000000000003DA0 authtab         = qword ptr -68h
.text:0000000000003DA0 var_10          = qword ptr -10h
.text:0000000000003DA0
.text:0000000000003DA0 ; __unwind {
.text:0000000000003DA0                 sub     rsp, 68h
.text:0000000000003DA4                 mov     r10, r8
.text:0000000000003DA7                 xor     r9d, r9d
.text:0000000000003DAA                 mov     rax, fs:28h
.text:0000000000003DB3                 mov     [rsp+68h+var_10], rax
.text:0000000000003DB8                 xor     eax, eax
.text:0000000000003DBA                 mov     r8, rsp
.text:0000000000003DBD                 nop     dword ptr [rax]
.text:0000000000003DC0
.text:0000000000003DC0 loc_3DC0:                               ; CODE XREF: version_etc_va+49↓j
.text:0000000000003DC0                 mov     eax, [r10]
.text:0000000000003DC3                 cmp     eax, 2Fh ; '/'
.text:0000000000003DC6                 ja      short loc_3E0A
.text:0000000000003DC8                 mov     r11d, eax
.text:0000000000003DCB                 add     r11, [r10+10h]
.text:0000000000003DCF                 add     eax, 8
.text:0000000000003DD2                 mov     [r10], eax
.text:0000000000003DD5
.text:0000000000003DD5 loc_3DD5:                               ; CODE XREF: version_etc_va+76↓j
.text:0000000000003DD5                 mov     rax, [r11]
.text:0000000000003DD8                 test    rax, rax
.text:0000000000003DDB                 mov     [r8+r9*8], rax
.text:0000000000003DDF                 jz      short loc_3DEB
.text:0000000000003DE1                 add     r9, 1
.text:0000000000003DE5                 cmp     r9, 0Ah
.text:0000000000003DE9                 jnz     short loc_3DC0
.text:0000000000003DEB
.text:0000000000003DEB loc_3DEB:                               ; CODE XREF: version_etc_va+3F↑j
.text:0000000000003DEB                 call    version_etc_arn
.text:0000000000003DF0                 mov     rax, [rsp+68h+var_10]
.text:0000000000003DF5                 xor     rax, fs:28h
.text:0000000000003DFE                 jnz     short loc_3E05
.text:0000000000003E00                 add     rsp, 68h
.text:0000000000003E04                 retn
.text:0000000000003E05 ; ---------------------------------------------------------------------------
.text:0000000000003E05
.text:0000000000003E05 loc_3E05:                               ; CODE XREF: version_etc_va+5E↑j
.text:0000000000003E05                 call    ___stack_chk_fail
.text:0000000000003E0A ; ---------------------------------------------------------------------------
.text:0000000000003E0A
.text:0000000000003E0A loc_3E0A:                               ; CODE XREF: version_etc_va+26↑j
.text:0000000000003E0A                 mov     r11, [r10+8]
.text:0000000000003E0E                 lea     rax, [r11+8]
.text:0000000000003E12                 mov     [r10+8], rax
.text:0000000000003E16                 jmp     short loc_3DD5
.text:0000000000003E16 ; } // starts at 3DA0
.text:0000000000003E16 version_etc_va  endp
.text:0000000000003E16
.text:0000000000003E16 ; ---------------------------------------------------------------------------
.text:0000000000003E18                 align 20h
.text:0000000000003E20
.text:0000000000003E20 ; =============== S U B R O U T I N E =======================================
.text:0000000000003E20
.text:0000000000003E20 ; Attributes: info_from_lumina
.text:0000000000003E20
.text:0000000000003E20 ; void version_etc(FILE *stream, const char *command_name, const char *package, const char *version, ...)
.text:0000000000003E20                 public version_etc
.text:0000000000003E20 version_etc     proc near               ; CODE XREF: main+E2↑p
.text:0000000000003E20
.text:0000000000003E20 var_C0          = dword ptr -0C0h
.text:0000000000003E20 var_B8          = qword ptr -0B8h
.text:0000000000003E20 var_B0          = qword ptr -0B0h
.text:0000000000003E20 var_A8          = byte ptr -0A8h
.text:0000000000003E20 var_50          = qword ptr -50h
.text:0000000000003E20 var_48          = byte ptr -48h
.text:0000000000003E20 var_28          = qword ptr -28h
.text:0000000000003E20 var_20          = qword ptr -20h
.text:0000000000003E20 arg_0           = byte ptr  8
.text:0000000000003E20
.text:0000000000003E20 ; __unwind {
.text:0000000000003E20                 push    rbp
.text:0000000000003E21                 push    rbx
.text:0000000000003E22                 mov     r10d, 20h ; ' '
.text:0000000000003E28                 xor     r11d, r11d
.text:0000000000003E2B                 sub     rsp, 0B8h
.text:0000000000003E32                 mov     rax, fs:28h
.text:0000000000003E3B                 mov     [rsp+0C8h+var_50], rax
.text:0000000000003E40                 xor     eax, eax
.text:0000000000003E42                 lea     rax, [rsp+0C8h+arg_0]
.text:0000000000003E4A                 mov     [rsp+0C8h+var_28], r8
.text:0000000000003E52                 lea     rbx, [rsp+0C8h+arg_0]
.text:0000000000003E5A                 lea     r8, [rsp+0C8h+var_A8]
.text:0000000000003E5F                 mov     [rsp+0C8h+var_20], r9
.text:0000000000003E67                 mov     [rsp+0C8h+var_C0], 20h ; ' '
.text:0000000000003E6F                 mov     [rsp+0C8h+var_B8], rax
.text:0000000000003E74                 lea     rax, [rsp+0C8h+var_48]
.text:0000000000003E7C                 xor     r9d, r9d
.text:0000000000003E7F                 mov     [rsp+0C8h+var_B0], rax
.text:0000000000003E84                 mov     rbp, rax
.text:0000000000003E87                 nop     word ptr [rax+rax+00000000h]
.text:0000000000003E90
.text:0000000000003E90 loc_3E90:                               ; CODE XREF: version_etc+9A↓j
.text:0000000000003E90                 cmp     r10d, 2Fh ; '/'
.text:0000000000003E94                 ja      short loc_3EEC
.text:0000000000003E96                 mov     eax, r10d
.text:0000000000003E99                 mov     r11d, 1
.text:0000000000003E9F                 add     r10d, 8
.text:0000000000003EA3                 add     rax, rbp
.text:0000000000003EA6
.text:0000000000003EA6 loc_3EA6:                               ; CODE XREF: version_etc+D3↓j
.text:0000000000003EA6                 mov     rax, [rax]
.text:0000000000003EA9                 test    rax, rax
.text:0000000000003EAC                 mov     [r8+r9*8], rax
.text:0000000000003EB0                 jz      short loc_3EBC
.text:0000000000003EB2                 add     r9, 1
.text:0000000000003EB6                 cmp     r9, 0Ah
.text:0000000000003EBA                 jnz     short loc_3E90
.text:0000000000003EBC
.text:0000000000003EBC loc_3EBC:                               ; CODE XREF: version_etc+90↑j
.text:0000000000003EBC                 test    r11b, r11b
.text:0000000000003EBF                 jnz     short loc_3EE5
.text:0000000000003EC1
.text:0000000000003EC1 loc_3EC1:                               ; CODE XREF: version_etc+CA↓j
.text:0000000000003EC1                 call    version_etc_arn
.text:0000000000003EC6                 mov     rax, [rsp+0C8h+var_50]
.text:0000000000003ECB                 xor     rax, fs:28h
.text:0000000000003ED4                 jnz     short loc_3EE0
.text:0000000000003ED6                 add     rsp, 0B8h
.text:0000000000003EDD                 pop     rbx
.text:0000000000003EDE                 pop     rbp
.text:0000000000003EDF                 retn
.text:0000000000003EE0 ; ---------------------------------------------------------------------------
.text:0000000000003EE0
.text:0000000000003EE0 loc_3EE0:                               ; CODE XREF: version_etc+B4↑j
.text:0000000000003EE0                 call    ___stack_chk_fail
.text:0000000000003EE5 ; ---------------------------------------------------------------------------
.text:0000000000003EE5
.text:0000000000003EE5 loc_3EE5:                               ; CODE XREF: version_etc+9F↑j
.text:0000000000003EE5                 mov     [rsp+0C8h+var_C0], r10d
.text:0000000000003EEA                 jmp     short loc_3EC1
.text:0000000000003EEC ; ---------------------------------------------------------------------------
.text:0000000000003EEC
.text:0000000000003EEC loc_3EEC:                               ; CODE XREF: version_etc+74↑j
.text:0000000000003EEC                 mov     rax, rbx
.text:0000000000003EEF                 add     rbx, 8
.text:0000000000003EF3                 jmp     short loc_3EA6
.text:0000000000003EF3 ; } // starts at 3E20
.text:0000000000003EF3 version_etc     endp
.text:0000000000003EF3
.text:0000000000003EF3 ; ---------------------------------------------------------------------------
.text:0000000000003EF5                 align 20h
.text:0000000000003F00
.text:0000000000003F00 ; =============== S U B R O U T I N E =======================================
.text:0000000000003F00
.text:0000000000003F00 ; Attributes: info_from_lumina
.text:0000000000003F00
.text:0000000000003F00 ; void __cdecl emit_bug_reporting_address()
.text:0000000000003F00                 public emit_bug_reporting_address
.text:0000000000003F00 emit_bug_reporting_address proc near
.text:0000000000003F00 ; __unwind {
.text:0000000000003F00                 push    rbx
.text:0000000000003F01                 lea     rsi, aReportBugsToS ; "\nReport bugs to: %s\n"
.text:0000000000003F08                 mov     edx, 5          ; category
.text:0000000000003F0D                 xor     edi, edi        ; domainname
.text:0000000000003F0F                 call    _dcgettext
.text:0000000000003F14                 lea     rdx, aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:0000000000003F1B                 mov     rsi, rax
.text:0000000000003F1E                 mov     edi, 1
.text:0000000000003F23                 xor     eax, eax
.text:0000000000003F25                 call    ___printf_chk
.text:0000000000003F2A                 lea     rsi, aSHomePageS ; "%s home page: <%s>\n"
.text:0000000000003F31                 mov     edx, 5          ; category
.text:0000000000003F36                 xor     edi, edi        ; domainname
.text:0000000000003F38                 call    _dcgettext
.text:0000000000003F3D                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000003F44                 lea     rdx, unk_4603
.text:0000000000003F4B                 mov     rsi, rax
.text:0000000000003F4E                 mov     edi, 1
.text:0000000000003F53                 xor     eax, eax
.text:0000000000003F55                 call    ___printf_chk
.text:0000000000003F5A                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000003F61                 lea     rsi, aGeneralHelpUsi ; "General help using GNU software: <https"...
.text:0000000000003F68                 xor     edi, edi        ; domainname
.text:0000000000003F6A                 mov     edx, 5          ; category
.text:0000000000003F6F                 call    _dcgettext
.text:0000000000003F74                 mov     rsi, rbx        ; stream
.text:0000000000003F77                 mov     rdi, rax        ; s
.text:0000000000003F7A                 pop     rbx
.text:0000000000003F7B                 jmp     _fputs_unlocked
.text:0000000000003F7B ; } // starts at 3F00
.text:0000000000003F7B emit_bug_reporting_address endp
.text:0000000000003F7B
.text:0000000000003F80
.text:0000000000003F80 ; =============== S U B R O U T I N E =======================================
.text:0000000000003F80
.text:0000000000003F80
.text:0000000000003F80                 public xmalloc
.text:0000000000003F80 xmalloc         proc near               ; CODE XREF: quotearg_n_options+127↑p
.text:0000000000003F80                                         ; quotearg_alloc_mem+81↑p ...
.text:0000000000003F80 ; __unwind {
.text:0000000000003F80                 push    rbx
.text:0000000000003F81                 mov     rbx, rdi
.text:0000000000003F84                 call    _malloc
.text:0000000000003F89                 test    rax, rax
.text:0000000000003F8C                 jnz     short loc_3F93
.text:0000000000003F8E                 test    rbx, rbx
.text:0000000000003F91                 jnz     short loc_3F95
.text:0000000000003F93
.text:0000000000003F93 loc_3F93:                               ; CODE XREF: xmalloc+C↑j
.text:0000000000003F93                 pop     rbx
.text:0000000000003F94                 retn
.text:0000000000003F95 ; ---------------------------------------------------------------------------
.text:0000000000003F95
.text:0000000000003F95 loc_3F95:                               ; CODE XREF: xmalloc+11↑j
.text:0000000000003F95                 call    xalloc_die
.text:0000000000003F95 ; } // starts at 3F80
.text:0000000000003F95 xmalloc         endp
.text:0000000000003F95
.text:0000000000003F95 ; ---------------------------------------------------------------------------
.text:0000000000003F9A                 align 20h
.text:0000000000003FA0
.text:0000000000003FA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003FA0
.text:0000000000003FA0 ; Attributes: info_from_lumina
.text:0000000000003FA0
.text:0000000000003FA0 ; void *__fastcall xnmalloc(size_t n, size_t s)
.text:0000000000003FA0                 public xnmalloc
.text:0000000000003FA0 xnmalloc        proc near
.text:0000000000003FA0 ; __unwind {
.text:0000000000003FA0                 mov     rax, rdi
.text:0000000000003FA3                 mul     rsi
.text:0000000000003FA6                 mov     rdi, rax
.text:0000000000003FA9                 seto    al
.text:0000000000003FAC                 test    rdi, rdi
.text:0000000000003FAF                 js      short loc_3FBB
.text:0000000000003FB1                 movzx   eax, al
.text:0000000000003FB4                 test    rax, rax
.text:0000000000003FB7                 jnz     short loc_3FBB
.text:0000000000003FB9                 jmp     short xmalloc
.text:0000000000003FBB ; ---------------------------------------------------------------------------
.text:0000000000003FBB
.text:0000000000003FBB loc_3FBB:                               ; CODE XREF: xnmalloc+F↑j
.text:0000000000003FBB                                         ; xnmalloc+17↑j
.text:0000000000003FBB                 sub     rsp, 8
.text:0000000000003FBF                 call    xalloc_die
.text:0000000000003FBF ; } // starts at 3FA0
.text:0000000000003FBF xnmalloc        endp
.text:0000000000003FBF
.text:0000000000003FBF ; ---------------------------------------------------------------------------
.text:0000000000003FC4                 align 10h
.text:0000000000003FD0
.text:0000000000003FD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003FD0
.text:0000000000003FD0
.text:0000000000003FD0                 public xcharalloc
.text:0000000000003FD0 xcharalloc      proc near
.text:0000000000003FD0 ; __unwind {
.text:0000000000003FD0                 jmp     short xmalloc
.text:0000000000003FD0 ; } // starts at 3FD0
.text:0000000000003FD0 xcharalloc      endp
.text:0000000000003FD0
.text:0000000000003FD0 ; ---------------------------------------------------------------------------
.text:0000000000003FD2                 align 20h
.text:0000000000003FE0
.text:0000000000003FE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003FE0
.text:0000000000003FE0 ; Attributes: info_from_lumina
.text:0000000000003FE0
.text:0000000000003FE0 ; void *__fastcall xrealloc(void *p, size_t n)
.text:0000000000003FE0                 public xrealloc
.text:0000000000003FE0 xrealloc        proc near               ; CODE XREF: quotearg_n_options+6E↑p
.text:0000000000003FE0                                         ; quotearg_n_options+182↑p ...
.text:0000000000003FE0 ; __unwind {
.text:0000000000003FE0                 test    rsi, rsi
.text:0000000000003FE3                 push    rbx
.text:0000000000003FE4                 mov     rbx, rsi
.text:0000000000003FE7                 jnz     short loc_3FEE
.text:0000000000003FE9                 test    rdi, rdi
.text:0000000000003FEC                 jnz     short loc_4008
.text:0000000000003FEE
.text:0000000000003FEE loc_3FEE:                               ; CODE XREF: xrealloc+7↑j
.text:0000000000003FEE                 mov     rsi, rbx        ; size
.text:0000000000003FF1                 call    _realloc
.text:0000000000003FF6                 test    rax, rax
.text:0000000000003FF9                 jnz     short loc_4000
.text:0000000000003FFB                 test    rbx, rbx
.text:0000000000003FFE                 jnz     short loc_4011
.text:0000000000004000
.text:0000000000004000 loc_4000:                               ; CODE XREF: xrealloc+19↑j
.text:0000000000004000                 pop     rbx
.text:0000000000004001                 retn
.text:0000000000004001 ; ---------------------------------------------------------------------------
.text:0000000000004002                 align 8
.text:0000000000004008
.text:0000000000004008 loc_4008:                               ; CODE XREF: xrealloc+C↑j
.text:0000000000004008                 call    _free
.text:000000000000400D                 xor     eax, eax
.text:000000000000400F                 pop     rbx
.text:0000000000004010                 retn
.text:0000000000004011 ; ---------------------------------------------------------------------------
.text:0000000000004011
.text:0000000000004011 loc_4011:                               ; CODE XREF: xrealloc+1E↑j
.text:0000000000004011                 call    xalloc_die
.text:0000000000004011 ; } // starts at 3FE0
.text:0000000000004011 xrealloc        endp
.text:0000000000004011
.text:0000000000004011 ; ---------------------------------------------------------------------------
.text:0000000000004016                 align 20h
.text:0000000000004020
.text:0000000000004020 ; =============== S U B R O U T I N E =======================================
.text:0000000000004020
.text:0000000000004020 ; Attributes: info_from_lumina
.text:0000000000004020
.text:0000000000004020 ; void *__fastcall xnrealloc(void *p, size_t n, size_t s)
.text:0000000000004020                 public xnrealloc
.text:0000000000004020 xnrealloc       proc near
.text:0000000000004020 ; __unwind {
.text:0000000000004020                 mov     rax, rsi
.text:0000000000004023                 mul     rdx
.text:0000000000004026                 mov     rsi, rax
.text:0000000000004029                 seto    al
.text:000000000000402C                 test    rsi, rsi
.text:000000000000402F                 js      short loc_403B
.text:0000000000004031                 movzx   eax, al
.text:0000000000004034                 test    rax, rax
.text:0000000000004037                 jnz     short loc_403B
.text:0000000000004039                 jmp     short xrealloc
.text:000000000000403B ; ---------------------------------------------------------------------------
.text:000000000000403B
.text:000000000000403B loc_403B:                               ; CODE XREF: xnrealloc+F↑j
.text:000000000000403B                                         ; xnrealloc+17↑j
.text:000000000000403B                 sub     rsp, 8
.text:000000000000403F                 call    xalloc_die
.text:000000000000403F ; } // starts at 4020
.text:000000000000403F xnrealloc       endp
.text:000000000000403F
.text:000000000000403F ; ---------------------------------------------------------------------------
.text:0000000000004044                 align 10h
.text:0000000000004050
.text:0000000000004050 ; =============== S U B R O U T I N E =======================================
.text:0000000000004050
.text:0000000000004050 ; Attributes: info_from_lumina
.text:0000000000004050
.text:0000000000004050 ; void *__fastcall x2nrealloc(void *p, size_t *pn, size_t s)
.text:0000000000004050                 public x2nrealloc
.text:0000000000004050 x2nrealloc      proc near
.text:0000000000004050 ; __unwind {
.text:0000000000004050                 test    rdi, rdi
.text:0000000000004053                 mov     r9, rdx
.text:0000000000004056                 mov     rcx, [rsi]
.text:0000000000004059                 jz      short loc_4090
.text:000000000000405B                 xor     edx, edx
.text:000000000000405D                 mov     rax, 5555555555555554h
.text:0000000000004067                 div     r9
.text:000000000000406A                 cmp     rax, rcx
.text:000000000000406D                 jbe     short loc_40AB
.text:000000000000406F                 mov     rax, rcx
.text:0000000000004072                 shr     rax, 1
.text:0000000000004075                 lea     rcx, [rax+rcx+1]
.text:000000000000407A
.text:000000000000407A loc_407A:                               ; CODE XREF: x2nrealloc+59↓j
.text:000000000000407A                 mov     [rsi], rcx
.text:000000000000407D                 imul    rcx, r9
.text:0000000000004081                 mov     rsi, rcx
.text:0000000000004084                 jmp     xrealloc
.text:0000000000004084 ; ---------------------------------------------------------------------------
.text:0000000000004089                 align 10h
.text:0000000000004090
.text:0000000000004090 loc_4090:                               ; CODE XREF: x2nrealloc+9↑j
.text:0000000000004090                 test    rcx, rcx
.text:0000000000004093                 jz      short loc_40B8
.text:0000000000004095
.text:0000000000004095 loc_4095:                               ; CODE XREF: x2nrealloc+80↓j
.text:0000000000004095                 mov     rax, rcx
.text:0000000000004098                 mul     r9
.text:000000000000409B                 seto    dl
.text:000000000000409E                 test    rax, rax
.text:00000000000040A1                 movzx   edx, dl
.text:00000000000040A4                 js      short loc_40AB
.text:00000000000040A6                 test    rdx, rdx
.text:00000000000040A9                 jz      short loc_407A
.text:00000000000040AB
.text:00000000000040AB loc_40AB:                               ; CODE XREF: x2nrealloc+1D↑j
.text:00000000000040AB                                         ; x2nrealloc+54↑j
.text:00000000000040AB                 sub     rsp, 8
.text:00000000000040AF                 call    xalloc_die
.text:00000000000040AF ; ---------------------------------------------------------------------------
.text:00000000000040B4                 align 8
.text:00000000000040B8
.text:00000000000040B8 loc_40B8:                               ; CODE XREF: x2nrealloc+43↑j
.text:00000000000040B8                 xor     edx, edx
.text:00000000000040BA                 mov     eax, 80h
.text:00000000000040BF                 xor     r8d, r8d
.text:00000000000040C2                 div     r9
.text:00000000000040C5                 test    rax, rax
.text:00000000000040C8                 setz    r8b
.text:00000000000040CC                 lea     rcx, [r8+rax]
.text:00000000000040D0                 jmp     short loc_4095
.text:00000000000040D0 ; } // starts at 4050
.text:00000000000040D0 x2nrealloc      endp
.text:00000000000040D0
.text:00000000000040D0 ; ---------------------------------------------------------------------------
.text:00000000000040D2                 align 20h
.text:00000000000040E0
.text:00000000000040E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000040E0
.text:00000000000040E0 ; Attributes: info_from_lumina
.text:00000000000040E0
.text:00000000000040E0 ; void *__fastcall x2realloc(void *p, size_t *pn)
.text:00000000000040E0                 public x2realloc
.text:00000000000040E0 x2realloc       proc near
.text:00000000000040E0 ; __unwind {
.text:00000000000040E0                 test    rdi, rdi
.text:00000000000040E3                 mov     rax, [rsi]
.text:00000000000040E6                 jz      short loc_4110
.text:00000000000040E8                 mov     rdx, 5555555555555553h
.text:00000000000040F2                 cmp     rax, rdx
.text:00000000000040F5                 ja      short loc_4121
.text:00000000000040F7                 mov     rdx, rax
.text:00000000000040FA                 shr     rdx, 1
.text:00000000000040FD                 lea     rax, [rdx+rax+1]
.text:0000000000004102
.text:0000000000004102 loc_4102:                               ; CODE XREF: x2realloc+3F↓j
.text:0000000000004102                 mov     [rsi], rax
.text:0000000000004105                 mov     rsi, rax
.text:0000000000004108                 jmp     xrealloc
.text:0000000000004108 ; ---------------------------------------------------------------------------
.text:000000000000410D                 align 10h
.text:0000000000004110
.text:0000000000004110 loc_4110:                               ; CODE XREF: x2realloc+6↑j
.text:0000000000004110                 test    rax, rax
.text:0000000000004113                 mov     edx, 80h
.text:0000000000004118                 cmovz   rax, rdx
.text:000000000000411C                 test    rax, rax
.text:000000000000411F                 jns     short loc_4102
.text:0000000000004121
.text:0000000000004121 loc_4121:                               ; CODE XREF: x2realloc+15↑j
.text:0000000000004121                 sub     rsp, 8
.text:0000000000004125                 call    xalloc_die
.text:0000000000004125 ; } // starts at 40E0
.text:0000000000004125 x2realloc       endp
.text:0000000000004125
.text:0000000000004125 ; ---------------------------------------------------------------------------
.text:000000000000412A                 align 10h
.text:0000000000004130
.text:0000000000004130 ; =============== S U B R O U T I N E =======================================
.text:0000000000004130
.text:0000000000004130
.text:0000000000004130 ; __int64 __fastcall xzalloc(size_t n)
.text:0000000000004130                 public xzalloc
.text:0000000000004130 xzalloc         proc near
.text:0000000000004130 ; __unwind {
.text:0000000000004130                 push    rbx
.text:0000000000004131                 mov     rbx, rdi
.text:0000000000004134                 call    xmalloc
.text:0000000000004139                 mov     rdx, rbx        ; n
.text:000000000000413C                 xor     esi, esi        ; c
.text:000000000000413E                 mov     rdi, rax        ; s
.text:0000000000004141                 pop     rbx
.text:0000000000004142                 jmp     _memset
.text:0000000000004142 ; } // starts at 4130
.text:0000000000004142 xzalloc         endp
.text:0000000000004142
.text:0000000000004142 ; ---------------------------------------------------------------------------
.text:0000000000004147                 align 10h
.text:0000000000004150
.text:0000000000004150 ; =============== S U B R O U T I N E =======================================
.text:0000000000004150
.text:0000000000004150 ; Attributes: info_from_lumina
.text:0000000000004150
.text:0000000000004150 ; void *__fastcall xcalloc(size_t n, size_t s)
.text:0000000000004150                 public xcalloc
.text:0000000000004150 xcalloc         proc near
.text:0000000000004150 ; __unwind {
.text:0000000000004150                 mov     rax, rdi
.text:0000000000004153                 sub     rsp, 8
.text:0000000000004157                 mul     rsi
.text:000000000000415A                 seto    dl
.text:000000000000415D                 test    rax, rax
.text:0000000000004160                 js      short loc_4179
.text:0000000000004162                 movzx   edx, dl
.text:0000000000004165                 test    rdx, rdx
.text:0000000000004168                 jnz     short loc_4179
.text:000000000000416A                 call    _calloc
.text:000000000000416F                 test    rax, rax
.text:0000000000004172                 jz      short loc_4179
.text:0000000000004174                 add     rsp, 8
.text:0000000000004178                 retn
.text:0000000000004179 ; ---------------------------------------------------------------------------
.text:0000000000004179
.text:0000000000004179 loc_4179:                               ; CODE XREF: xcalloc+10↑j
.text:0000000000004179                                         ; xcalloc+18↑j ...
.text:0000000000004179                 call    xalloc_die
.text:0000000000004179 ; } // starts at 4150
.text:0000000000004179 xcalloc         endp
.text:0000000000004179
.text:0000000000004179 ; ---------------------------------------------------------------------------
.text:000000000000417E                 align 20h
.text:0000000000004180
.text:0000000000004180 ; =============== S U B R O U T I N E =======================================
.text:0000000000004180
.text:0000000000004180 ; Attributes: info_from_lumina
.text:0000000000004180
.text:0000000000004180 ; void *__fastcall xmemdup(const void *p, size_t s)
.text:0000000000004180                 public xmemdup
.text:0000000000004180 xmemdup         proc near               ; CODE XREF: clone_quoting_options+28↑p
.text:0000000000004180                                         ; xstrdup+11↓j
.text:0000000000004180 ; __unwind {
.text:0000000000004180                 push    rbp
.text:0000000000004181                 push    rbx
.text:0000000000004182                 mov     rbp, rdi
.text:0000000000004185                 mov     rdi, rsi
.text:0000000000004188                 mov     rbx, rsi
.text:000000000000418B                 sub     rsp, 8
.text:000000000000418F                 call    xmalloc
.text:0000000000004194                 add     rsp, 8
.text:0000000000004198                 mov     rdx, rbx        ; n
.text:000000000000419B                 mov     rsi, rbp        ; src
.text:000000000000419E                 pop     rbx
.text:000000000000419F                 pop     rbp
.text:00000000000041A0                 mov     rdi, rax        ; dest
.text:00000000000041A3                 jmp     _memcpy
.text:00000000000041A3 ; } // starts at 4180
.text:00000000000041A3 xmemdup         endp
.text:00000000000041A3
.text:00000000000041A3 ; ---------------------------------------------------------------------------
.text:00000000000041A8                 align 10h
.text:00000000000041B0
.text:00000000000041B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000041B0
.text:00000000000041B0
.text:00000000000041B0 ; __int64 __fastcall xstrdup(void *src)
.text:00000000000041B0                 public xstrdup
.text:00000000000041B0 xstrdup         proc near
.text:00000000000041B0 ; __unwind {
.text:00000000000041B0                 push    rbx
.text:00000000000041B1                 mov     rbx, rdi
.text:00000000000041B4                 call    _strlen
.text:00000000000041B9                 mov     rdi, rbx        ; src
.text:00000000000041BC                 lea     rsi, [rax+1]    ; n
.text:00000000000041C0                 pop     rbx
.text:00000000000041C1                 jmp     short xmemdup
.text:00000000000041C1 ; } // starts at 41B0
.text:00000000000041C1 xstrdup         endp
.text:00000000000041C1
.text:00000000000041C1 ; ---------------------------------------------------------------------------
.text:00000000000041C3                 align 10h
.text:00000000000041D0
.text:00000000000041D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000041D0
.text:00000000000041D0 ; Attributes: noreturn info_from_lumina
.text:00000000000041D0
.text:00000000000041D0 ; void __cdecl xalloc_die()
.text:00000000000041D0                 public xalloc_die
.text:00000000000041D0 xalloc_die      proc near               ; CODE XREF: quotearg_n_options:loc_31A6↑p
.text:00000000000041D0                                         ; xmalloc:loc_3F95↑p ...
.text:00000000000041D0 ; __unwind {
.text:00000000000041D0                 lea     rsi, aMemoryExhauste ; "memory exhausted"
.text:00000000000041D7                 sub     rsp, 8
.text:00000000000041DB                 mov     edx, 5          ; category
.text:00000000000041E0                 xor     edi, edi        ; domainname
.text:00000000000041E2                 call    _dcgettext
.text:00000000000041E7                 mov     edi, cs:exit_failure ; status
.text:00000000000041ED                 lea     rdx, format+4   ; format
.text:00000000000041F4                 mov     rcx, rax
.text:00000000000041F7                 xor     esi, esi        ; errnum
.text:00000000000041F9                 xor     eax, eax
.text:00000000000041FB                 call    _error
.text:0000000000004200                 call    _abort
.text:0000000000004200 ; } // starts at 41D0
.text:0000000000004200 xalloc_die      endp
.text:0000000000004200
.text:0000000000004200 ; ---------------------------------------------------------------------------
.text:0000000000004205                 align 10h
.text:0000000000004210
.text:0000000000004210 ; =============== S U B R O U T I N E =======================================
.text:0000000000004210
.text:0000000000004210 ; Attributes: info_from_lumina
.text:0000000000004210
.text:0000000000004210 ; size_t __fastcall rpl_mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
.text:0000000000004210                 public rpl_mbrtowc
.text:0000000000004210 rpl_mbrtowc     proc near               ; CODE XREF: quotearg_buffer_restyled+956↑p
.text:0000000000004210
.text:0000000000004210 pwc             = dword ptr -34h
.text:0000000000004210 var_30          = qword ptr -30h
.text:0000000000004210
.text:0000000000004210 ; __unwind {
.text:0000000000004210                 push    r13
.text:0000000000004212                 push    r12
.text:0000000000004214                 mov     r13, rsi
.text:0000000000004217                 push    rbp
.text:0000000000004218                 push    rbx
.text:0000000000004219                 mov     rbx, rdi
.text:000000000000421C                 mov     r12, rdx
.text:000000000000421F                 sub     rsp, 18h
.text:0000000000004223                 mov     rax, fs:28h
.text:000000000000422C                 mov     [rsp+38h+var_30], rax
.text:0000000000004231                 xor     eax, eax
.text:0000000000004233                 lea     rax, [rsp+38h+pwc]
.text:0000000000004238                 test    rdi, rdi
.text:000000000000423B                 cmovz   rbx, rax
.text:000000000000423F                 mov     rdi, rbx        ; pwc
.text:0000000000004242                 call    _mbrtowc
.text:0000000000004247                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:000000000000424B                 mov     rbp, rax
.text:000000000000424E                 jbe     short loc_4270
.text:0000000000004250                 test    r12, r12
.text:0000000000004253                 jz      short loc_4270
.text:0000000000004255                 xor     edi, edi
.text:0000000000004257                 call    hard_locale
.text:000000000000425C                 test    al, al
.text:000000000000425E                 jnz     short loc_4270
.text:0000000000004260                 movzx   eax, byte ptr [r13+0]
.text:0000000000004265                 mov     ebp, 1
.text:000000000000426A                 mov     [rbx], eax
.text:000000000000426C                 nop     dword ptr [rax+00h]
.text:0000000000004270
.text:0000000000004270 loc_4270:                               ; CODE XREF: rpl_mbrtowc+3E↑j
.text:0000000000004270                                         ; rpl_mbrtowc+43↑j ...
.text:0000000000004270                 mov     rdx, [rsp+38h+var_30]
.text:0000000000004275                 xor     rdx, fs:28h
.text:000000000000427E                 mov     rax, rbp
.text:0000000000004281                 jnz     short loc_428E
.text:0000000000004283                 add     rsp, 18h
.text:0000000000004287                 pop     rbx
.text:0000000000004288                 pop     rbp
.text:0000000000004289                 pop     r12
.text:000000000000428B                 pop     r13
.text:000000000000428D                 retn
.text:000000000000428E ; ---------------------------------------------------------------------------
.text:000000000000428E
.text:000000000000428E loc_428E:                               ; CODE XREF: rpl_mbrtowc+71↑j
.text:000000000000428E                 call    ___stack_chk_fail
.text:000000000000428E ; } // starts at 4210
.text:000000000000428E rpl_mbrtowc     endp
.text:000000000000428E
.text:000000000000428E ; ---------------------------------------------------------------------------
.text:0000000000004293                 align 20h
.text:00000000000042A0
.text:00000000000042A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000042A0
.text:00000000000042A0 ; Attributes: info_from_lumina
.text:00000000000042A0
.text:00000000000042A0 ; int __fastcall close_stream(FILE *stream)
.text:00000000000042A0                 public close_stream
.text:00000000000042A0 close_stream    proc near               ; CODE XREF: close_stdout+D↑p
.text:00000000000042A0                                         ; close_stdout+33↑p
.text:00000000000042A0 ; __unwind {
.text:00000000000042A0                 push    r12
.text:00000000000042A2                 push    rbp
.text:00000000000042A3                 mov     rbp, rdi
.text:00000000000042A6                 push    rbx
.text:00000000000042A7                 call    ___fpending
.text:00000000000042AC                 mov     ebx, [rbp+0]
.text:00000000000042AF                 mov     rdi, rbp        ; stream
.text:00000000000042B2                 mov     r12, rax
.text:00000000000042B5                 call    rpl_fclose
.text:00000000000042BA                 and     ebx, 20h
.text:00000000000042BD                 test    ebx, ebx
.text:00000000000042BF                 jnz     short loc_42D8
.text:00000000000042C1                 test    eax, eax
.text:00000000000042C3                 jz      short loc_42CF
.text:00000000000042C5                 test    r12, r12
.text:00000000000042C8                 mov     eax, 0FFFFFFFFh
.text:00000000000042CD                 jz      short loc_4308
.text:00000000000042CF
.text:00000000000042CF loc_42CF:                               ; CODE XREF: close_stream+23↑j
.text:00000000000042CF                 pop     rbx
.text:00000000000042D0                 pop     rbp
.text:00000000000042D1                 pop     r12
.text:00000000000042D3                 retn
.text:00000000000042D3 ; ---------------------------------------------------------------------------
.text:00000000000042D4                 align 8
.text:00000000000042D8
.text:00000000000042D8 loc_42D8:                               ; CODE XREF: close_stream+1F↑j
.text:00000000000042D8                 test    eax, eax
.text:00000000000042DA                 jnz     short loc_42F8
.text:00000000000042DC                 call    ___errno_location
.text:00000000000042E1                 mov     dword ptr [rax], 0
.text:00000000000042E7                 mov     eax, 0FFFFFFFFh
.text:00000000000042EC                 pop     rbx
.text:00000000000042ED                 pop     rbp
.text:00000000000042EE                 pop     r12
.text:00000000000042F0                 retn
.text:00000000000042F0 ; ---------------------------------------------------------------------------
.text:00000000000042F1                 align 8
.text:00000000000042F8
.text:00000000000042F8 loc_42F8:                               ; CODE XREF: close_stream+3A↑j
.text:00000000000042F8                 pop     rbx
.text:00000000000042F9                 mov     eax, 0FFFFFFFFh
.text:00000000000042FE                 pop     rbp
.text:00000000000042FF                 pop     r12
.text:0000000000004301                 retn
.text:0000000000004301 ; ---------------------------------------------------------------------------
.text:0000000000004302                 align 8
.text:0000000000004308
.text:0000000000004308 loc_4308:                               ; CODE XREF: close_stream+2D↑j
.text:0000000000004308                 call    ___errno_location
.text:000000000000430D                 cmp     dword ptr [rax], 9
.text:0000000000004310                 pop     rbx
.text:0000000000004311                 pop     rbp
.text:0000000000004312                 pop     r12
.text:0000000000004314                 setnz   al
.text:0000000000004317                 movzx   eax, al
.text:000000000000431A                 neg     eax
.text:000000000000431C                 retn
.text:000000000000431C ; } // starts at 42A0
.text:000000000000431C close_stream    endp
.text:000000000000431C
.text:000000000000431C ; ---------------------------------------------------------------------------
.text:000000000000431D                 align 20h
.text:0000000000004320
.text:0000000000004320 ; =============== S U B R O U T I N E =======================================
.text:0000000000004320
.text:0000000000004320
.text:0000000000004320                 public hard_locale
.text:0000000000004320 hard_locale     proc near               ; CODE XREF: rpl_mbrtowc+47↑p
.text:0000000000004320 ; __unwind {
.text:0000000000004320                 sub     rsp, 8
.text:0000000000004324                 xor     esi, esi        ; locale
.text:0000000000004326                 call    _setlocale
.text:000000000000432B                 mov     rdx, rax
.text:000000000000432E                 mov     eax, 1
.text:0000000000004333                 test    rdx, rdx
.text:0000000000004336                 jz      short loc_4355
.text:0000000000004338                 lea     rdi, aC         ; "C"
.text:000000000000433F                 mov     ecx, 2
.text:0000000000004344                 mov     rsi, rdx
.text:0000000000004347                 repe cmpsb
.text:0000000000004349                 setnbe  cl
.text:000000000000434C                 sbb     cl, 0
.text:000000000000434F                 xor     eax, eax
.text:0000000000004351                 test    cl, cl
.text:0000000000004353                 jnz     short loc_4360
.text:0000000000004355
.text:0000000000004355 loc_4355:                               ; CODE XREF: hard_locale+16↑j
.text:0000000000004355                 add     rsp, 8
.text:0000000000004359                 retn
.text:0000000000004359 ; ---------------------------------------------------------------------------
.text:000000000000435A                 align 20h
.text:0000000000004360
.text:0000000000004360 loc_4360:                               ; CODE XREF: hard_locale+33↑j
.text:0000000000004360                 lea     rdi, aPosix     ; "POSIX"
.text:0000000000004367                 mov     ecx, 6
.text:000000000000436C                 mov     rsi, rdx
.text:000000000000436F                 repe cmpsb
.text:0000000000004371                 setnbe  al
.text:0000000000004374                 sbb     al, 0
.text:0000000000004376                 test    al, al
.text:0000000000004378                 setnz   al
.text:000000000000437B                 add     rsp, 8
.text:000000000000437F                 retn
.text:000000000000437F ; } // starts at 4320
.text:000000000000437F hard_locale     endp
.text:000000000000437F
.text:0000000000004380
.text:0000000000004380 ; =============== S U B R O U T I N E =======================================
.text:0000000000004380
.text:0000000000004380
.text:0000000000004380                 public locale_charset
.text:0000000000004380 locale_charset  proc near               ; CODE XREF: gettext_quote+B↑p
.text:0000000000004380 ; __unwind {
.text:0000000000004380                 sub     rsp, 8
.text:0000000000004384                 mov     edi, 0Eh        ; item
.text:0000000000004389                 call    _nl_langinfo
.text:000000000000438E                 test    rax, rax
.text:0000000000004391                 jz      short loc_43B0
.text:0000000000004393                 cmp     byte ptr [rax], 0
.text:0000000000004396                 lea     rdx, aAscii     ; "ASCII"
.text:000000000000439D                 cmovz   rax, rdx
.text:00000000000043A1                 add     rsp, 8
.text:00000000000043A5                 retn
.text:00000000000043A5 ; ---------------------------------------------------------------------------
.text:00000000000043A6                 align 10h
.text:00000000000043B0
.text:00000000000043B0 loc_43B0:                               ; CODE XREF: locale_charset+11↑j
.text:00000000000043B0                 lea     rax, aAscii     ; "ASCII"
.text:00000000000043B7                 add     rsp, 8
.text:00000000000043BB                 retn
.text:00000000000043BB ; } // starts at 4380
.text:00000000000043BB locale_charset  endp
.text:00000000000043BB
.text:00000000000043BB ; ---------------------------------------------------------------------------
.text:00000000000043BC                 align 20h
.text:00000000000043C0
.text:00000000000043C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000043C0
.text:00000000000043C0 ; Attributes: info_from_lumina
.text:00000000000043C0
.text:00000000000043C0 ; int __fastcall rpl_fclose(FILE *fp)
.text:00000000000043C0                 public rpl_fclose
.text:00000000000043C0 rpl_fclose      proc near               ; CODE XREF: close_stream+15↑p
.text:00000000000043C0 ; __unwind {
.text:00000000000043C0                 push    r12
.text:00000000000043C2                 push    rbp
.text:00000000000043C3                 push    rbx
.text:00000000000043C4                 mov     rbx, rdi
.text:00000000000043C7                 call    _fileno
.text:00000000000043CC                 test    eax, eax
.text:00000000000043CE                 mov     rdi, rbx        ; fp
.text:00000000000043D1                 js      short loc_4427
.text:00000000000043D3                 call    ___freading
.text:00000000000043D8                 test    eax, eax
.text:00000000000043DA                 jnz     short loc_4408
.text:00000000000043DC
.text:00000000000043DC loc_43DC:                               ; CODE XREF: rpl_fclose+62↓j
.text:00000000000043DC                 mov     rdi, rbx        ; stream
.text:00000000000043DF                 call    rpl_fflush
.text:00000000000043E4                 test    eax, eax
.text:00000000000043E6                 jz      short loc_4424
.text:00000000000043E8                 call    ___errno_location
.text:00000000000043ED                 mov     r12d, [rax]
.text:00000000000043F0                 mov     rdi, rbx        ; stream
.text:00000000000043F3                 mov     rbp, rax
.text:00000000000043F6                 call    _fclose
.text:00000000000043FB                 test    r12d, r12d
.text:00000000000043FE                 jnz     short loc_4430
.text:0000000000004400
.text:0000000000004400 loc_4400:                               ; CODE XREF: rpl_fclose+79↓j
.text:0000000000004400                 pop     rbx
.text:0000000000004401                 pop     rbp
.text:0000000000004402                 pop     r12
.text:0000000000004404                 retn
.text:0000000000004404 ; ---------------------------------------------------------------------------
.text:0000000000004405                 align 8
.text:0000000000004408
.text:0000000000004408 loc_4408:                               ; CODE XREF: rpl_fclose+1A↑j
.text:0000000000004408                 mov     rdi, rbx        ; stream
.text:000000000000440B                 call    _fileno
.text:0000000000004410                 xor     esi, esi        ; offset
.text:0000000000004412                 mov     edx, 1          ; whence
.text:0000000000004417                 mov     edi, eax        ; fd
.text:0000000000004419                 call    _lseek
.text:000000000000441E                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000004422                 jnz     short loc_43DC
.text:0000000000004424
.text:0000000000004424 loc_4424:                               ; CODE XREF: rpl_fclose+26↑j
.text:0000000000004424                 mov     rdi, rbx        ; stream
.text:0000000000004427
.text:0000000000004427 loc_4427:                               ; CODE XREF: rpl_fclose+11↑j
.text:0000000000004427                 pop     rbx
.text:0000000000004428                 pop     rbp
.text:0000000000004429                 pop     r12
.text:000000000000442B                 jmp     _fclose
.text:0000000000004430 ; ---------------------------------------------------------------------------
.text:0000000000004430
.text:0000000000004430 loc_4430:                               ; CODE XREF: rpl_fclose+3E↑j
.text:0000000000004430                 mov     [rbp+0], r12d
.text:0000000000004434                 mov     eax, 0FFFFFFFFh
.text:0000000000004439                 jmp     short loc_4400
.text:0000000000004439 ; } // starts at 43C0
.text:0000000000004439 rpl_fclose      endp
.text:0000000000004439
.text:0000000000004439 ; ---------------------------------------------------------------------------
.text:000000000000443B                 align 20h
.text:0000000000004440
.text:0000000000004440 ; =============== S U B R O U T I N E =======================================
.text:0000000000004440
.text:0000000000004440 ; Attributes: info_from_lumina
.text:0000000000004440
.text:0000000000004440 ; int __fastcall rpl_fflush(FILE *stream)
.text:0000000000004440                 public rpl_fflush
.text:0000000000004440 rpl_fflush      proc near               ; CODE XREF: rpl_fclose+1F↑p
.text:0000000000004440 ; __unwind {
.text:0000000000004440                 test    rdi, rdi
.text:0000000000004443                 push    rbx
.text:0000000000004444                 mov     rbx, rdi
.text:0000000000004447                 jz      short loc_445A
.text:0000000000004449                 call    ___freading
.text:000000000000444E                 test    eax, eax
.text:0000000000004450                 jz      short loc_445A
.text:0000000000004452                 test    dword ptr [rbx], 100h
.text:0000000000004458                 jnz     short loc_4468
.text:000000000000445A
.text:000000000000445A loc_445A:                               ; CODE XREF: rpl_fflush+7↑j
.text:000000000000445A                                         ; rpl_fflush+10↑j
.text:000000000000445A                 mov     rdi, rbx        ; stream
.text:000000000000445D                 pop     rbx
.text:000000000000445E                 jmp     _fflush
.text:000000000000445E ; ---------------------------------------------------------------------------
.text:0000000000004463                 align 8
.text:0000000000004468
.text:0000000000004468 loc_4468:                               ; CODE XREF: rpl_fflush+18↑j
.text:0000000000004468                 mov     rdi, rbx
.text:000000000000446B                 mov     edx, 1
.text:0000000000004470                 xor     esi, esi
.text:0000000000004472                 call    rpl_fseeko
.text:0000000000004477                 mov     rdi, rbx        ; stream
.text:000000000000447A                 pop     rbx
.text:000000000000447B                 jmp     _fflush
.text:000000000000447B ; } // starts at 4440
.text:000000000000447B rpl_fflush      endp
.text:000000000000447B
.text:0000000000004480
.text:0000000000004480 ; =============== S U B R O U T I N E =======================================
.text:0000000000004480
.text:0000000000004480 ; Attributes: info_from_lumina
.text:0000000000004480
.text:0000000000004480 ; int __fastcall rpl_fseeko(FILE *fp, off_t offset, int whence)
.text:0000000000004480                 public rpl_fseeko
.text:0000000000004480 rpl_fseeko      proc near               ; CODE XREF: rpl_fflush+32↑p
.text:0000000000004480 ; __unwind {
.text:0000000000004480                 mov     rax, [rdi+8]
.text:0000000000004484                 cmp     [rdi+10h], rax
.text:0000000000004488                 jz      short loc_4490
.text:000000000000448A
.text:000000000000448A loc_448A:                               ; CODE XREF: rpl_fseeko+18↓j
.text:000000000000448A                                         ; rpl_fseeko+1F↓j
.text:000000000000448A                 jmp     _fseeko
.text:000000000000448A ; ---------------------------------------------------------------------------
.text:000000000000448F                 align 10h
.text:0000000000004490
.text:0000000000004490 loc_4490:                               ; CODE XREF: rpl_fseeko+8↑j
.text:0000000000004490                 mov     rax, [rdi+20h]
.text:0000000000004494                 cmp     [rdi+28h], rax
.text:0000000000004498                 jnz     short loc_448A
.text:000000000000449A                 cmp     qword ptr [rdi+48h], 0
.text:000000000000449F                 jnz     short loc_448A
.text:00000000000044A1                 push    r12
.text:00000000000044A3                 push    rbp
.text:00000000000044A4                 mov     r12d, edx
.text:00000000000044A7                 push    rbx
.text:00000000000044A8                 mov     rbp, rsi
.text:00000000000044AB                 mov     rbx, rdi
.text:00000000000044AE                 call    _fileno
.text:00000000000044B3                 mov     edx, r12d       ; whence
.text:00000000000044B6                 mov     rsi, rbp        ; offset
.text:00000000000044B9                 mov     edi, eax        ; fd
.text:00000000000044BB                 call    _lseek
.text:00000000000044C0                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000044C4                 jz      short loc_44D2
.text:00000000000044C6                 and     dword ptr [rbx], 0FFFFFFEFh
.text:00000000000044C9                 mov     [rbx+90h], rax
.text:00000000000044D0                 xor     eax, eax
.text:00000000000044D2
.text:00000000000044D2 loc_44D2:                               ; CODE XREF: rpl_fseeko+44↑j
.text:00000000000044D2                 pop     rbx
.text:00000000000044D3                 pop     rbp
.text:00000000000044D4                 pop     r12
.text:00000000000044D6                 retn
.text:00000000000044D6 ; } // starts at 4480
.text:00000000000044D6 rpl_fseeko      endp
.text:00000000000044D6
.text:00000000000044D6 ; ---------------------------------------------------------------------------
.text:00000000000044D7                 align 20h
.text:00000000000044E0
.text:00000000000044E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000044E0
.text:00000000000044E0 ; Attributes: info_from_lumina
.text:00000000000044E0
.text:00000000000044E0 ; void _libc_csu_init(void)
.text:00000000000044E0                 public __libc_csu_init
.text:00000000000044E0 __libc_csu_init proc near               ; DATA XREF: start+16↑o
.text:00000000000044E0 ; __unwind {
.text:00000000000044E0                 push    r15
.text:00000000000044E2                 push    r14
.text:00000000000044E4                 mov     r15, rdx
.text:00000000000044E7                 push    r13
.text:00000000000044E9                 push    r12
.text:00000000000044EB                 lea     r12, __frame_dummy_init_array_entry
.text:00000000000044F2                 push    rbp
.text:00000000000044F3                 lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:00000000000044FA                 push    rbx
.text:00000000000044FB                 mov     r13d, edi
.text:00000000000044FE                 mov     r14, rsi
.text:0000000000004501                 sub     rbp, r12
.text:0000000000004504                 sub     rsp, 8
.text:0000000000004508                 sar     rbp, 3
.text:000000000000450C                 call    _init_proc
.text:0000000000004511                 test    rbp, rbp
.text:0000000000004514                 jz      short loc_4536
.text:0000000000004516                 xor     ebx, ebx
.text:0000000000004518                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000004520
.text:0000000000004520 loc_4520:                               ; CODE XREF: __libc_csu_init+54↓j
.text:0000000000004520                 mov     rdx, r15
.text:0000000000004523                 mov     rsi, r14
.text:0000000000004526                 mov     edi, r13d
.text:0000000000004529                 call    ds:(__frame_dummy_init_array_entry - 206B90h)[r12+rbx*8]
.text:000000000000452D                 add     rbx, 1
.text:0000000000004531                 cmp     rbp, rbx
.text:0000000000004534                 jnz     short loc_4520
.text:0000000000004536
.text:0000000000004536 loc_4536:                               ; CODE XREF: __libc_csu_init+34↑j
.text:0000000000004536                 add     rsp, 8
.text:000000000000453A                 pop     rbx
.text:000000000000453B                 pop     rbp
.text:000000000000453C                 pop     r12
.text:000000000000453E                 pop     r13
.text:0000000000004540                 pop     r14
.text:0000000000004542                 pop     r15
.text:0000000000004544                 retn
.text:0000000000004544 ; } // starts at 44E0
.text:0000000000004544 __libc_csu_init endp
.text:0000000000004544
.text:0000000000004544 ; ---------------------------------------------------------------------------
.text:0000000000004545                 align 10h
.text:0000000000004550
.text:0000000000004550 ; =============== S U B R O U T I N E =======================================
.text:0000000000004550
.text:0000000000004550
.text:0000000000004550 ; void _libc_csu_fini(void)
.text:0000000000004550                 public __libc_csu_fini
.text:0000000000004550 __libc_csu_fini proc near               ; DATA XREF: start+F↑o
.text:0000000000004550 ; __unwind {
.text:0000000000004550                 rep retn
.text:0000000000004550 ; } // starts at 4550
.text:0000000000004550 __libc_csu_fini endp
.text:0000000000004550
.text:0000000000004550 ; ---------------------------------------------------------------------------
.text:0000000000004552                 align 20h
.text:0000000000004560
.text:0000000000004560 ; =============== S U B R O U T I N E =======================================
.text:0000000000004560
.text:0000000000004560
.text:0000000000004560 atexit          proc near               ; CODE XREF: main+5F↑p
.text:0000000000004560 ; __unwind {
.text:0000000000004560                 mov     rdx, cs:__dso_handle ; lpdso_handle
.text:0000000000004567                 xor     esi, esi        ; obj
.text:0000000000004569                 jmp     ___cxa_atexit
.text:0000000000004569 ; } // starts at 4560
.text:0000000000004569 atexit          endp
.text:0000000000004569
.text:0000000000004569 _text           ends
.text:0000000000004569
LOAD:000000000000456E ; ===========================================================================
LOAD:000000000000456E
LOAD:000000000000456E ; Segment type: Pure code
LOAD:000000000000456E ; Segment permissions: Read/Execute
LOAD:000000000000456E LOAD            segment byte public 'CODE' use64
LOAD:000000000000456E                 assume cs:LOAD
LOAD:000000000000456E                 ;org 456Eh
LOAD:000000000000456E                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000456E                 align 10h
LOAD:000000000000456E LOAD            ends
LOAD:000000000000456E
.fini:0000000000004570 ; ===========================================================================
.fini:0000000000004570
.fini:0000000000004570 ; Segment type: Pure code
.fini:0000000000004570 ; Segment permissions: Read/Execute
.fini:0000000000004570 _fini           segment dword public 'CODE' use64
.fini:0000000000004570                 assume cs:_fini
.fini:0000000000004570                 ;org 4570h
.fini:0000000000004570                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:0000000000004570
.fini:0000000000004570 ; =============== S U B R O U T I N E =======================================
.fini:0000000000004570
.fini:0000000000004570
.fini:0000000000004570                 public _term_proc
.fini:0000000000004570 _term_proc      proc near
.fini:0000000000004570                 sub     rsp, 8          ; _fini
.fini:0000000000004574                 add     rsp, 8
.fini:0000000000004578                 retn
.fini:0000000000004578 _term_proc      endp
.fini:0000000000004578
.fini:0000000000004578 _fini           ends
.fini:0000000000004578
LOAD:0000000000004579 ; ===========================================================================
LOAD:0000000000004579
LOAD:0000000000004579 ; Segment type: Pure code
LOAD:0000000000004579 ; Segment permissions: Read/Execute
LOAD:0000000000004579 LOAD            segment byte public 'CODE' use64
LOAD:0000000000004579                 assume cs:LOAD
LOAD:0000000000004579                 ;org 4579h
LOAD:0000000000004579                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000004579                 align 20h
LOAD:0000000000004579 LOAD            ends
LOAD:0000000000004579
.rodata:0000000000004580 ; ===========================================================================
.rodata:0000000000004580
.rodata:0000000000004580 ; Segment type: Pure data
.rodata:0000000000004580 ; Segment permissions: Read
.rodata:0000000000004580 _rodata         segment align_32 public 'CONST' use64
.rodata:0000000000004580                 assume cs:_rodata
.rodata:0000000000004580                 ;org 4580h
.rodata:0000000000004580                 public _IO_stdin_used
.rodata:0000000000004580 _IO_stdin_used  db    1
.rodata:0000000000004581                 db    0
.rodata:0000000000004582                 db    2
.rodata:0000000000004583                 db    0
.rodata:0000000000004584 aPrintenv       db 'printenv',0         ; DATA XREF: main+D9↑o
.rodata:0000000000004584                                         ; usage+E7↑o ...
.rodata:000000000000458D asc_458D        db '[',0                ; DATA XREF: usage+11C↑o
.rodata:000000000000458F aTestInvocation db 'test invocation',0  ; DATA XREF: usage+143↑o
.rodata:000000000000459F aMultiCallInvoc db 'Multi-call invocation',0
.rodata:000000000000459F                                         ; DATA XREF: usage+173↑o
.rodata:000000000000459F                                         ; usage+26C↑o ...
.rodata:00000000000045B5 aSha224sum      db 'sha224sum',0        ; DATA XREF: usage+184↑o
.rodata:00000000000045BF aSha2Utilities  db 'sha2 utilities',0   ; DATA XREF: usage+190↑o
.rodata:00000000000045CE aSha256sum      db 'sha256sum',0        ; DATA XREF: usage+123↑o
.rodata:00000000000045D8 aSha384sum      db 'sha384sum',0        ; DATA XREF: usage+14F↑o
.rodata:00000000000045E2 aSha512sum      db 'sha512sum',0        ; DATA XREF: usage+167↑o
.rodata:00000000000045EC ; const char aSOnlineHelpS[]
.rodata:00000000000045EC aSOnlineHelpS   db 0Ah                  ; DATA XREF: usage+1DA↑o
.rodata:00000000000045EC                 db '%s online help: <%s>',0Ah,0
.rodata:0000000000004603 unk_4603        db  47h ; G             ; DATA XREF: main+D2↑o
.rodata:0000000000004603                                         ; usage+1F6↑o ...
.rodata:0000000000004604                 db  4Eh ; N
.rodata:0000000000004605                 db  55h ; U
.rodata:0000000000004606                 db  20h
.rodata:0000000000004607 ; const char domainname[]
.rodata:0000000000004607 domainname      db 'coreutils',0        ; DATA XREF: main+36↑o
.rodata:0000000000004607                                         ; main+42↑o ...
.rodata:0000000000004611 ; const char s2[]
.rodata:0000000000004611 s2              db 'en_',0              ; DATA XREF: usage+21D↑o
.rodata:0000000000004611                                         ; usage+2DE↑o
.rodata:0000000000004615 ; const char aFullDocumentat[]
.rodata:0000000000004615 aFullDocumentat db 'Full documentation <%s%s>',0Ah,0
.rodata:0000000000004615                                         ; DATA XREF: usage:loc_1A29↑o
.rodata:0000000000004615                                         ; usage:loc_1AE6↑o
.rodata:0000000000004630 ; const char dirname[]
.rodata:0000000000004630 dirname         db '/usr/local/share/locale',0
.rodata:0000000000004630                                         ; DATA XREF: main+2F↑o
.rodata:0000000000004648 aRichardMlynari db 'Richard Mlynarik',0 ; DATA XREF: main+C4↑o
.rodata:0000000000004659 aDavidMackenzie db 'David MacKenzie',0  ; DATA XREF: main+CB↑o
.rodata:0000000000004669 ; const char shortopts[]
.rodata:0000000000004669 shortopts       db '+iu:0',0            ; DATA XREF: main+6B↑o
.rodata:000000000000466F aSC             db '%s%c',0             ; DATA XREF: main+105↑o
.rodata:000000000000466F                                         ; main+1E4↑o ...
.rodata:0000000000004674 aNull           db 'null',0             ; DATA XREF: .data.rel.ro:longopts↓o
.rodata:0000000000004679 aHelp           db 'help',0             ; DATA XREF: .data.rel.ro:0000000000206BC0↓o
.rodata:000000000000467E aVersion        db 'version',0          ; DATA XREF: .data.rel.ro:0000000000206BE0↓o
.rodata:0000000000004686                 align 8
.rodata:0000000000004688 ; const char msgid[]
.rodata:0000000000004688 msgid           db 'Try ',27h,'%s --help',27h,' for more information.',0Ah,0
.rodata:0000000000004688                                         ; DATA XREF: usage+2F↑o
.rodata:00000000000046AF                 align 10h
.rodata:00000000000046B0 ; const char aUsageSOptionVa[]
.rodata:00000000000046B0 aUsageSOptionVa db 'Usage: %s [OPTION]... [VARIABLE]...',0Ah
.rodata:00000000000046B0                                         ; DATA XREF: usage:loc_184D↑o
.rodata:00000000000046B0                 db 'Print the values of the specified environment VARIABLE(s).',0Ah
.rodata:00000000000046B0                 db 'If no VARIABLE is specified, print name and value pairs for them '
.rodata:00000000000046B0                 db 'all.',0Ah
.rodata:00000000000046B0                 db 0Ah,0
.rodata:0000000000004757                 align 8
.rodata:0000000000004758 ; const char a0NullEndEachOu[]
.rodata:0000000000004758 a0NullEndEachOu db '  -0, --null     end each output line with NUL, not newline',0Ah,0
.rodata:0000000000004758                                         ; DATA XREF: usage+84↑o
.rodata:0000000000004795                 align 8
.rodata:0000000000004798 ; const char aHelpDisplayThi[]
.rodata:0000000000004798 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.rodata:0000000000004798                                         ; DATA XREF: usage+A9↑o
.rodata:00000000000047C5                 align 8
.rodata:00000000000047C8 ; const char aVersionOutputV[]
.rodata:00000000000047C8 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.rodata:00000000000047C8                                         ; DATA XREF: usage+CE↑o
.rodata:00000000000047FE                 align 20h
.rodata:0000000000004800 ; const char aNoteYourShellM[]
.rodata:0000000000004800 aNoteYourShellM db 0Ah                  ; DATA XREF: usage+F3↑o
.rodata:0000000000004800                 db 'NOTE: your shell may have its own version of %s, which usually su'
.rodata:0000000000004800                 db 'persedes',0Ah
.rodata:0000000000004800                 db 'the version described here.  Please refer to your shell',27h,'s d'
.rodata:0000000000004800                 db 'ocumentation',0Ah
.rodata:0000000000004800                 db 'for details about the options it supports.',0Ah,0
.rodata:00000000000048BF                 align 20h
.rodata:00000000000048C0 aHttpsWwwGnuOrg db 'https://www.gnu.org/software/coreutils/',0
.rodata:00000000000048C0                                         ; DATA XREF: usage+1EF↑o
.rodata:00000000000048C0                                         ; usage+253↑o ...
.rodata:00000000000048E8 ; const char aReportAnyTrans[]
.rodata:00000000000048E8 aReportAnyTrans db 'Report any translation bugs to <https://translationproject.org/te'
.rodata:00000000000048E8                                         ; DATA XREF: usage+347↑o
.rodata:00000000000048E8                 db 'am/>',0Ah,0
.rodata:000000000000492F                 align 10h
.rodata:0000000000004930 ; const char aOrAvailableLoc[]
.rodata:0000000000004930 aOrAvailableLoc db 'or available locally via: info ',27h,'(coreutils) %s%s',27h,0Ah,0
.rodata:0000000000004930                                         ; DATA XREF: usage:loc_1A6E↑o
.rodata:0000000000004963 a831            db '8.31',0             ; DATA XREF: .data:Version↓o
.rodata:0000000000004968 ; const char aWriteError[]
.rodata:0000000000004968 aWriteError     db 'write error',0      ; DATA XREF: close_stdout:loc_1BC3↑o
.rodata:0000000000004974 ; const char format[]
.rodata:0000000000004974 format          db '%s: %s',0           ; DATA XREF: close_stdout+6C↑o
.rodata:0000000000004974                                         ; close_stdout+8F↑o ...
.rodata:000000000000497B                 align 20h
.rodata:0000000000004980 aANullArgv0WasP db 'A NULL argv[0] was passed through an exec system call.',0Ah,0
.rodata:0000000000004980                                         ; DATA XREF: set_program_name+84↑o
.rodata:00000000000049B8 aLibs           db '/.libs/',0          ; DATA XREF: set_program_name+2C↑o
.rodata:00000000000049C0 aLt             db 'lt-',0              ; DATA XREF: set_program_name+44↑o
.rodata:00000000000049C4 unk_49C4        db 0E2h                 ; DATA XREF: gettext_quote+CE↑o
.rodata:00000000000049C5                 db  80h
.rodata:00000000000049C6                 db  98h
.rodata:00000000000049C7                 db    0
.rodata:00000000000049C8 unk_49C8        db 0E2h                 ; DATA XREF: gettext_quote+D5↑o
.rodata:00000000000049C9                 db  80h
.rodata:00000000000049CA                 db  99h
.rodata:00000000000049CB                 db    0
.rodata:00000000000049CC unk_49CC        db 0A1h                 ; DATA XREF: gettext_quote+74↑o
.rodata:00000000000049CD                 db    7
.rodata:00000000000049CE                 db  65h ; e
.rodata:00000000000049CF                 db    0
.rodata:00000000000049D0 unk_49D0        db 0A1h                 ; DATA XREF: gettext_quote+7B↑o
.rodata:00000000000049D1                 db 0AFh
.rodata:00000000000049D2                 db    0
.rodata:00000000000049D3 unk_49D3        db  22h ; "             ; DATA XREF: gettext_quote:loc_1CF0↑o
.rodata:00000000000049D3                                         ; quotearg_buffer_restyled:loc_2AAB↑o ...
.rodata:00000000000049D4                 db    0
.rodata:00000000000049D5 ; const char asc_49D5[2]
.rodata:00000000000049D5 asc_49D5        db 27h,0                ; DATA XREF: gettext_quote+27↑o
.rodata:00000000000049D5                                         ; quotearg_buffer_restyled:loc_1E73↑o ...
.rodata:00000000000049D7 ; const char asc_49D7[2]
.rodata:00000000000049D7 asc_49D7        db '`',0                ; DATA XREF: quotearg_buffer_restyled+D9B↑o
.rodata:00000000000049D7                                         ; quotearg_buffer_restyled+DB6↑o
.rodata:00000000000049D9 aLiteral        db 'literal',0          ; DATA XREF: .data.rel.ro:quoting_style_args↓o
.rodata:00000000000049E1 aShell          db 'shell',0            ; DATA XREF: .data.rel.ro:0000000000206C28↓o
.rodata:00000000000049E7 aShellAlways    db 'shell-always',0     ; DATA XREF: .data.rel.ro:0000000000206C30↓o
.rodata:00000000000049F4 aShellEscape    db 'shell-escape',0     ; DATA XREF: .data.rel.ro:0000000000206C38↓o
.rodata:00000000000049F4                                         ; .data.rel.ro:0000000000206C58↓o
.rodata:0000000000004A01 aShellEscapeAlw db 'shell-escape-always',0
.rodata:0000000000004A01                                         ; DATA XREF: .data.rel.ro:0000000000206C40↓o
.rodata:0000000000004A15 aCMaybe         db 'c-maybe',0          ; DATA XREF: .data.rel.ro:0000000000206C50↓o
.rodata:0000000000004A1D aClocale        db 'clocale',0          ; DATA XREF: .data.rel.ro:0000000000206C68↓o
.rodata:0000000000004A25                 align 20h
.rodata:0000000000004A40 jpt_1E51        dd offset loc_2BFA - 4A40h
.rodata:0000000000004A40                                         ; DATA XREF: quotearg_buffer_restyled+80↑o
.rodata:0000000000004A40                                         ; quotearg_buffer_restyled+8A↑r
.rodata:0000000000004A40                 dd offset loc_1E53 - 4A40h ; jump table for switch statement
.rodata:0000000000004A40                 dd offset loc_2E28 - 4A40h
.rodata:0000000000004A40                 dd offset loc_2C34 - 4A40h
.rodata:0000000000004A40                 dd offset loc_2A24 - 4A40h
.rodata:0000000000004A40                 dd offset loc_2A80 - 4A40h
.rodata:0000000000004A40                 dd offset loc_2AD5 - 4A40h
.rodata:0000000000004A40                 dd offset loc_2B1A - 4A40h
.rodata:0000000000004A40                 dd offset loc_2B54 - 4A40h
.rodata:0000000000004A40                 dd offset loc_2B54 - 4A40h
.rodata:0000000000004A40                 dd offset loc_2B54 - 4A40h
.rodata:0000000000004A6C jpt_1FAE        dd offset loc_21D0 - 4A6Ch, offset def_1FAE - 4A6Ch, offset def_1FAE - 4A6Ch
.rodata:0000000000004A6C                                         ; DATA XREF: quotearg_buffer_restyled+1DD↑o
.rodata:0000000000004A6C                                         ; quotearg_buffer_restyled+1E7↑r
.rodata:0000000000004A6C                 dd offset def_1FAE - 4A6Ch, offset def_1FAE - 4A6Ch, offset def_1FAE - 4A6Ch ; jump table for switch statement
.rodata:0000000000004A6C                 dd offset def_1FAE - 4A6Ch, offset loc_2210 - 4A6Ch, offset loc_2118 - 4A6Ch
.rodata:0000000000004A6C                 dd offset loc_20D8 - 4A6Ch, offset loc_22A0 - 4A6Ch, offset loc_2290 - 4A6Ch
.rodata:0000000000004A6C                 dd offset loc_2280 - 4A6Ch, offset loc_2270 - 4A6Ch, offset def_1FAE - 4A6Ch
.rodata:0000000000004A6C                 dd offset def_1FAE - 4A6Ch, offset def_1FAE - 4A6Ch, offset def_1FAE - 4A6Ch
.rodata:0000000000004A6C                 dd offset def_1FAE - 4A6Ch, offset def_1FAE - 4A6Ch, offset def_1FAE - 4A6Ch
.rodata:0000000000004A6C                 dd offset def_1FAE - 4A6Ch, offset def_1FAE - 4A6Ch, offset def_1FAE - 4A6Ch
.rodata:0000000000004A6C                 dd offset def_1FAE - 4A6Ch, offset def_1FAE - 4A6Ch, offset def_1FAE - 4A6Ch
.rodata:0000000000004A6C                 dd offset def_1FAE - 4A6Ch, offset def_1FAE - 4A6Ch, offset def_1FAE - 4A6Ch
.rodata:0000000000004A6C                 dd offset def_1FAE - 4A6Ch, offset def_1FAE - 4A6Ch, offset loc_2260 - 4A6Ch
.rodata:0000000000004A6C                 dd offset loc_2250 - 4A6Ch, offset loc_2250 - 4A6Ch, offset loc_2220 - 4A6Ch
.rodata:0000000000004A6C                 dd offset loc_2250 - 4A6Ch, offset loc_21F8 - 4A6Ch, offset loc_2250 - 4A6Ch
.rodata:0000000000004A6C                 dd offset loc_20B3 - 4A6Ch, offset loc_2250 - 4A6Ch, offset loc_2250 - 4A6Ch
.rodata:0000000000004A6C                 dd offset loc_2250 - 4A6Ch, offset loc_21F8 - 4A6Ch, offset loc_21F8 - 4A6Ch
.rodata:0000000000004A6C                 dd offset loc_21F8 - 4A6Ch, offset loc_21F8 - 4A6Ch, offset loc_21F8 - 4A6Ch
.rodata:0000000000004A6C                 dd offset loc_21F8 - 4A6Ch, offset loc_21F8 - 4A6Ch, offset loc_21F8 - 4A6Ch
.rodata:0000000000004A6C                 dd offset loc_21F8 - 4A6Ch, offset loc_21F8 - 4A6Ch, offset loc_21F8 - 4A6Ch
.rodata:0000000000004A6C                 dd offset loc_21F8 - 4A6Ch, offset loc_21F8 - 4A6Ch, offset loc_21F8 - 4A6Ch
.rodata:0000000000004A6C                 dd offset loc_21F8 - 4A6Ch, offset loc_21F8 - 4A6Ch, offset loc_2250 - 4A6Ch
.rodata:0000000000004A6C                 dd offset loc_2250 - 4A6Ch, offset loc_2250 - 4A6Ch, offset loc_2250 - 4A6Ch
.rodata:0000000000004A6C                 dd offset loc_2083 - 4A6Ch, offset def_1FAE - 4A6Ch, offset loc_21F8 - 4A6Ch
.rodata:0000000000004A6C                 dd offset loc_21F8 - 4A6Ch, offset loc_21F8 - 4A6Ch, offset loc_21F8 - 4A6Ch
.rodata:0000000000004A6C                 dd offset loc_21F8 - 4A6Ch, offset loc_21F8 - 4A6Ch, offset loc_21F8 - 4A6Ch
.rodata:0000000000004A6C                 dd offset loc_21F8 - 4A6Ch, offset loc_21F8 - 4A6Ch, offset loc_21F8 - 4A6Ch
.rodata:0000000000004A6C                 dd offset loc_21F8 - 4A6Ch, offset loc_21F8 - 4A6Ch, offset loc_21F8 - 4A6Ch
.rodata:0000000000004A6C                 dd offset loc_21F8 - 4A6Ch, offset loc_21F8 - 4A6Ch, offset loc_21F8 - 4A6Ch
.rodata:0000000000004A6C                 dd offset loc_21F8 - 4A6Ch, offset loc_21F8 - 4A6Ch, offset loc_21F8 - 4A6Ch
.rodata:0000000000004A6C                 dd offset loc_21F8 - 4A6Ch, offset loc_21F8 - 4A6Ch, offset loc_21F8 - 4A6Ch
.rodata:0000000000004A6C                 dd offset loc_21F8 - 4A6Ch, offset loc_21F8 - 4A6Ch, offset loc_21F8 - 4A6Ch
.rodata:0000000000004A6C                 dd offset loc_21F8 - 4A6Ch, offset loc_2250 - 4A6Ch, offset loc_2128 - 4A6Ch
.rodata:0000000000004A6C                 dd offset loc_21F8 - 4A6Ch, offset loc_2250 - 4A6Ch, offset loc_21F8 - 4A6Ch
.rodata:0000000000004A6C                 dd offset loc_2250 - 4A6Ch, offset loc_21F8 - 4A6Ch, offset loc_21F8 - 4A6Ch
.rodata:0000000000004A6C                 dd offset loc_21F8 - 4A6Ch, offset loc_21F8 - 4A6Ch, offset loc_21F8 - 4A6Ch
.rodata:0000000000004A6C                 dd offset loc_21F8 - 4A6Ch, offset loc_21F8 - 4A6Ch, offset loc_21F8 - 4A6Ch
.rodata:0000000000004A6C                 dd offset loc_21F8 - 4A6Ch, offset loc_21F8 - 4A6Ch, offset loc_21F8 - 4A6Ch
.rodata:0000000000004A6C                 dd offset loc_21F8 - 4A6Ch, offset loc_21F8 - 4A6Ch, offset loc_21F8 - 4A6Ch
.rodata:0000000000004A6C                 dd offset loc_21F8 - 4A6Ch, offset loc_21F8 - 4A6Ch, offset loc_21F8 - 4A6Ch
.rodata:0000000000004A6C                 dd offset loc_21F8 - 4A6Ch, offset loc_21F8 - 4A6Ch, offset loc_21F8 - 4A6Ch
.rodata:0000000000004A6C                 dd offset loc_21F8 - 4A6Ch, offset loc_21F8 - 4A6Ch, offset loc_21F8 - 4A6Ch
.rodata:0000000000004A6C                 dd offset loc_21F8 - 4A6Ch, offset loc_21F8 - 4A6Ch, offset loc_21F8 - 4A6Ch
.rodata:0000000000004A6C                 dd offset loc_1FB3 - 4A6Ch, offset loc_2250 - 4A6Ch, offset loc_1FB3 - 4A6Ch
.rodata:0000000000004A6C                 dd offset loc_2220 - 4A6Ch
.rodata:0000000000004C68 jpt_233A        dd offset loc_23A0 - 4C68h, offset def_233A - 4C68h, offset def_233A - 4C68h
.rodata:0000000000004C68                                         ; DATA XREF: quotearg_buffer_restyled+569↑o
.rodata:0000000000004C68                                         ; quotearg_buffer_restyled+573↑r
.rodata:0000000000004C68                 dd offset def_233A - 4C68h, offset def_233A - 4C68h, offset def_233A - 4C68h ; jump table for switch statement
.rodata:0000000000004C68                 dd offset def_233A - 4C68h, offset loc_2390 - 4C68h, offset loc_24E0 - 4C68h
.rodata:0000000000004C68                 dd offset loc_24C8 - 4C68h, offset loc_2378 - 4C68h, offset loc_24B8 - 4C68h
.rodata:0000000000004C68                 dd offset loc_2360 - 4C68h, offset loc_24A0 - 4C68h, offset def_233A - 4C68h
.rodata:0000000000004C68                 dd offset def_233A - 4C68h, offset def_233A - 4C68h, offset def_233A - 4C68h
.rodata:0000000000004C68                 dd offset def_233A - 4C68h, offset def_233A - 4C68h, offset def_233A - 4C68h
.rodata:0000000000004C68                 dd offset def_233A - 4C68h, offset def_233A - 4C68h, offset def_233A - 4C68h
.rodata:0000000000004C68                 dd offset def_233A - 4C68h, offset def_233A - 4C68h, offset def_233A - 4C68h
.rodata:0000000000004C68                 dd offset def_233A - 4C68h, offset def_233A - 4C68h, offset def_233A - 4C68h
.rodata:0000000000004C68                 dd offset def_233A - 4C68h, offset def_233A - 4C68h, offset loc_2488 - 4C68h
.rodata:0000000000004C68                 dd offset loc_2470 - 4C68h, offset loc_2470 - 4C68h, offset loc_2458 - 4C68h
.rodata:0000000000004C68                 dd offset loc_2470 - 4C68h, offset loc_2440 - 4C68h, offset loc_2470 - 4C68h
.rodata:0000000000004C68                 dd offset loc_20B0 - 4C68h, offset loc_2470 - 4C68h, offset loc_2470 - 4C68h
.rodata:0000000000004C68                 dd offset loc_2470 - 4C68h, offset loc_2440 - 4C68h, offset loc_2440 - 4C68h
.rodata:0000000000004C68                 dd offset loc_2440 - 4C68h, offset loc_2440 - 4C68h, offset loc_2440 - 4C68h
.rodata:0000000000004C68                 dd offset loc_2440 - 4C68h, offset loc_2440 - 4C68h, offset loc_2440 - 4C68h
.rodata:0000000000004C68                 dd offset loc_2440 - 4C68h, offset loc_2440 - 4C68h, offset loc_2440 - 4C68h
.rodata:0000000000004C68                 dd offset loc_2440 - 4C68h, offset loc_2440 - 4C68h, offset loc_2440 - 4C68h
.rodata:0000000000004C68                 dd offset loc_2440 - 4C68h, offset loc_2440 - 4C68h, offset loc_2470 - 4C68h
.rodata:0000000000004C68                 dd offset loc_2470 - 4C68h, offset loc_2470 - 4C68h, offset loc_2470 - 4C68h
.rodata:0000000000004C68                 dd offset loc_2080 - 4C68h, offset def_233A - 4C68h, offset loc_2440 - 4C68h
.rodata:0000000000004C68                 dd offset loc_2440 - 4C68h, offset loc_2440 - 4C68h, offset loc_2440 - 4C68h
.rodata:0000000000004C68                 dd offset loc_2440 - 4C68h, offset loc_2440 - 4C68h, offset loc_2440 - 4C68h
.rodata:0000000000004C68                 dd offset loc_2440 - 4C68h, offset loc_2440 - 4C68h, offset loc_2440 - 4C68h
.rodata:0000000000004C68                 dd offset loc_2440 - 4C68h, offset loc_2440 - 4C68h, offset loc_2440 - 4C68h
.rodata:0000000000004C68                 dd offset loc_2440 - 4C68h, offset loc_2440 - 4C68h, offset loc_2440 - 4C68h
.rodata:0000000000004C68                 dd offset loc_2440 - 4C68h, offset loc_2440 - 4C68h, offset loc_2440 - 4C68h
.rodata:0000000000004C68                 dd offset loc_2440 - 4C68h, offset loc_2440 - 4C68h, offset loc_2440 - 4C68h
.rodata:0000000000004C68                 dd offset loc_2440 - 4C68h, offset loc_2440 - 4C68h, offset loc_2440 - 4C68h
.rodata:0000000000004C68                 dd offset loc_2440 - 4C68h, offset loc_2470 - 4C68h, offset loc_2340 - 4C68h
.rodata:0000000000004C68                 dd offset loc_2440 - 4C68h, offset loc_2470 - 4C68h, offset loc_2440 - 4C68h
.rodata:0000000000004C68                 dd offset loc_2470 - 4C68h, offset loc_2440 - 4C68h, offset loc_2440 - 4C68h
.rodata:0000000000004C68                 dd offset loc_2440 - 4C68h, offset loc_2440 - 4C68h, offset loc_2440 - 4C68h
.rodata:0000000000004C68                 dd offset loc_2440 - 4C68h, offset loc_2440 - 4C68h, offset loc_2440 - 4C68h
.rodata:0000000000004C68                 dd offset loc_2440 - 4C68h, offset loc_2440 - 4C68h, offset loc_2440 - 4C68h
.rodata:0000000000004C68                 dd offset loc_2440 - 4C68h, offset loc_2440 - 4C68h, offset loc_2440 - 4C68h
.rodata:0000000000004C68                 dd offset loc_2440 - 4C68h, offset loc_2440 - 4C68h, offset loc_2440 - 4C68h
.rodata:0000000000004C68                 dd offset loc_2440 - 4C68h, offset loc_2440 - 4C68h, offset loc_2440 - 4C68h
.rodata:0000000000004C68                 dd offset loc_2440 - 4C68h, offset loc_2440 - 4C68h, offset loc_2440 - 4C68h
.rodata:0000000000004C68                 dd offset loc_2440 - 4C68h, offset loc_2440 - 4C68h, offset loc_2440 - 4C68h
.rodata:0000000000004C68                 dd offset loc_1FB0 - 4C68h, offset loc_2470 - 4C68h, offset loc_1FB0 - 4C68h
.rodata:0000000000004C68                 dd offset loc_2458 - 4C68h
.rodata:0000000000004E64                 align 20h
.rodata:0000000000004E80                 public quoting_style_vals
.rodata:0000000000004E80 quoting_style_vals db    0
.rodata:0000000000004E81                 db    0
.rodata:0000000000004E82                 db    0
.rodata:0000000000004E83                 db    0
.rodata:0000000000004E84                 db    1
.rodata:0000000000004E85                 db    0
.rodata:0000000000004E86                 db    0
.rodata:0000000000004E87                 db    0
.rodata:0000000000004E88                 db    2
.rodata:0000000000004E89                 db    0
.rodata:0000000000004E8A                 db    0
.rodata:0000000000004E8B                 db    0
.rodata:0000000000004E8C                 db    3
.rodata:0000000000004E8D                 db    0
.rodata:0000000000004E8E                 db    0
.rodata:0000000000004E8F                 db    0
.rodata:0000000000004E90                 db    4
.rodata:0000000000004E91                 db    0
.rodata:0000000000004E92                 db    0
.rodata:0000000000004E93                 db    0
.rodata:0000000000004E94                 db    5
.rodata:0000000000004E95                 db    0
.rodata:0000000000004E96                 db    0
.rodata:0000000000004E97                 db    0
.rodata:0000000000004E98                 db    6
.rodata:0000000000004E99                 db    0
.rodata:0000000000004E9A                 db    0
.rodata:0000000000004E9B                 db    0
.rodata:0000000000004E9C                 db    7
.rodata:0000000000004E9D                 db    0
.rodata:0000000000004E9E                 db    0
.rodata:0000000000004E9F                 db    0
.rodata:0000000000004EA0                 db    8
.rodata:0000000000004EA1                 db    0
.rodata:0000000000004EA2                 db    0
.rodata:0000000000004EA3                 db    0
.rodata:0000000000004EA4                 db    9
.rodata:0000000000004EA5                 db    0
.rodata:0000000000004EA6                 db    0
.rodata:0000000000004EA7                 db    0
.rodata:0000000000004EA8 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: version_etc_arn+23↑o
.rodata:0000000000004EB4 aSS_0           db '%s %s',0Ah,0        ; DATA XREF: version_etc_arn+13E↑o
.rodata:0000000000004EBB ; const char aC_0[]
.rodata:0000000000004EBB aC_0            db '(C)',0              ; DATA XREF: version_etc_arn:loc_399C↑o
.rodata:0000000000004EBF ; const char aWrittenByS[]
.rodata:0000000000004EBF aWrittenByS     db 'Written by %s.',0Ah,0
.rodata:0000000000004EBF                                         ; DATA XREF: version_etc_arn+1BB↑o
.rodata:0000000000004ECF ; const char aWrittenBySAndS[]
.rodata:0000000000004ECF aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.rodata:0000000000004ECF                                         ; DATA XREF: version_etc_arn+1FC↑o
.rodata:0000000000004EE6 ; const char aWrittenBySSAnd[]
.rodata:0000000000004EE6 aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.rodata:0000000000004EE6                                         ; DATA XREF: version_etc_arn+248↑o
.rodata:0000000000004F02 ; const char aReportBugsToS[]
.rodata:0000000000004F02 aReportBugsToS  db 0Ah                  ; DATA XREF: emit_bug_reporting_address+1↑o
.rodata:0000000000004F02                 db 'Report bugs to: %s',0Ah,0
.rodata:0000000000004F17 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.rodata:0000000000004F17                                         ; DATA XREF: emit_bug_reporting_address+14↑o
.rodata:0000000000004F2D ; const char aSHomePageS[]
.rodata:0000000000004F2D aSHomePageS     db '%s home page: <%s>',0Ah,0
.rodata:0000000000004F2D                                         ; DATA XREF: emit_bug_reporting_address+2A↑o
.rodata:0000000000004F41                 align 8
.rodata:0000000000004F48 ; const char aLicenseGplv3Gn[]
.rodata:0000000000004F48 aLicenseGplv3Gn db 0Ah                  ; DATA XREF: version_etc_arn+6E↑o
.rodata:0000000000004F48                 db 'License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licen'
.rodata:0000000000004F48                 db 'ses/gpl.html>.',0Ah
.rodata:0000000000004F48                 db 'This is free software: you are free to change and redistribute it'
.rodata:0000000000004F48                 db '.',0Ah
.rodata:0000000000004F48                 db 'There is NO WARRANTY, to the extent permitted by law.',0Ah
.rodata:0000000000004F48                 db 0Ah,0
.rodata:0000000000005014                 align 8
.rodata:0000000000005018 ; const char aWrittenBySSSAn[]
.rodata:0000000000005018 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005018                                         ; DATA XREF: version_etc_arn:loc_3BF0↑o
.rodata:0000000000005018                 db 'and %s.',0Ah,0
.rodata:0000000000005038 ; const char aWrittenBySSSSA[]
.rodata:0000000000005038 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005038                                         ; DATA XREF: version_etc_arn+2EC↑o
.rodata:0000000000005038                 db '%s, and %s.',0Ah,0
.rodata:000000000000505C                 align 20h
.rodata:0000000000005060 ; const char aWrittenBySSSSS_1[]
.rodata:0000000000005060 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005060                                         ; DATA XREF: version_etc_arn+320↑o
.rodata:0000000000005060                 db '%s, %s, and %s.',0Ah,0
.rodata:0000000000005088 ; const char aWrittenBySSSSS_2[]
.rodata:0000000000005088 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005088                                         ; DATA XREF: version_etc_arn+388↑o
.rodata:0000000000005088                 db '%s, %s, %s, and %s.',0Ah,0
.rodata:00000000000050B4                 align 8
.rodata:00000000000050B8 ; const char aWrittenBySSSSS[]
.rodata:00000000000050B8 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000050B8                                         ; DATA XREF: version_etc_arn+B8↑o
.rodata:00000000000050B8                 db '%s, %s, %s, %s,',0Ah
.rodata:00000000000050B8                 db 'and %s.',0Ah,0
.rodata:00000000000050E8 ; const char aWrittenBySSSSS_0[]
.rodata:00000000000050E8 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000050E8                                         ; DATA XREF: version_etc_arn+168↑o
.rodata:00000000000050E8                 db '%s, %s, %s, %s,',0Ah
.rodata:00000000000050E8                 db '%s, and %s.',0Ah,0
.rodata:000000000000511C                 align 20h
.rodata:0000000000005120 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005120                                         ; DATA XREF: version_etc_arn+3E5↑o
.rodata:0000000000005120                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000005120                 db '%s, %s, and others.',0Ah,0
.rodata:000000000000515C                 align 20h
.rodata:0000000000005160 ; const char aGeneralHelpUsi[]
.rodata:0000000000005160 aGeneralHelpUsi db 'General help using GNU software: <https://www.gnu.org/gethelp/>',0Ah
.rodata:0000000000005160                                         ; DATA XREF: emit_bug_reporting_address+61↑o
.rodata:0000000000005160                 db 0
.rodata:00000000000051A1                 align 8
.rodata:00000000000051A8 jpt_3A04        dd offset loc_3A86 - 51A8h
.rodata:00000000000051A8                                         ; DATA XREF: version_etc_arn+96↑o
.rodata:00000000000051A8                                         ; version_etc_arn+9D↑r
.rodata:00000000000051A8                 dd offset loc_3B18 - 51A8h ; jump table for switch statement
.rodata:00000000000051A8                 dd offset loc_3B58 - 51A8h
.rodata:00000000000051A8                 dd offset loc_3BA0 - 51A8h
.rodata:00000000000051A8                 dd offset loc_3BF0 - 51A8h
.rodata:00000000000051A8                 dd offset loc_3C48 - 51A8h
.rodata:00000000000051A8                 dd offset loc_3C78 - 51A8h
.rodata:00000000000051A8                 dd offset loc_3CE0 - 51A8h
.rodata:00000000000051A8                 dd offset loc_3A10 - 51A8h
.rodata:00000000000051A8                 dd offset loc_3AC0 - 51A8h
.rodata:00000000000051D0                 align 20h
.rodata:00000000000051E0                 public version_etc_copyright
.rodata:00000000000051E0 version_etc_copyright db 'Copyright %s %d Free Software Foundation, Inc.',0
.rodata:00000000000051E0                                         ; DATA XREF: version_etc_arn+4F↑o
.rodata:000000000000520F ; const char aMemoryExhauste[]
.rodata:000000000000520F aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: xalloc_die↑o
.rodata:0000000000005220 aC              db 'C',0                ; DATA XREF: hard_locale+18↑o
.rodata:0000000000005222 aPosix          db 'POSIX',0            ; DATA XREF: hard_locale:loc_4360↑o
.rodata:0000000000005228 aAscii          db 'ASCII',0            ; DATA XREF: locale_charset+16↑o
.rodata:0000000000005228                                         ; locale_charset:loc_43B0↑o
.rodata:0000000000005228 _rodata         ends
.rodata:0000000000005228
LOAD:000000000000522E ; ===========================================================================
LOAD:000000000000522E
LOAD:000000000000522E ; Segment type: Pure code
LOAD:000000000000522E ; Segment permissions: Read/Execute
LOAD:000000000000522E LOAD            segment byte public 'CODE' use64
LOAD:000000000000522E                 assume cs:LOAD
LOAD:000000000000522E                 ;org 522Eh
LOAD:000000000000522E                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000522E                 align 10h
LOAD:000000000000522E LOAD            ends
LOAD:000000000000522E
.eh_frame_hdr:0000000000005230 ; ===========================================================================
.eh_frame_hdr:0000000000005230
.eh_frame_hdr:0000000000005230 ; Segment type: Pure data
.eh_frame_hdr:0000000000005230 ; Segment permissions: Read
.eh_frame_hdr:0000000000005230 _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:0000000000005230                 assume cs:_eh_frame_hdr
.eh_frame_hdr:0000000000005230                 ;org 5230h
.eh_frame_hdr:0000000000005230 __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000000001A0↑o
.eh_frame_hdr:0000000000005231                 db  1Bh
.eh_frame_hdr:0000000000005232                 db    3
.eh_frame_hdr:0000000000005233                 db  3Bh ; ;
.eh_frame_hdr:0000000000005234                 db  3Ch ; <
.eh_frame_hdr:0000000000005235                 db    2
.eh_frame_hdr:0000000000005236                 db    0
.eh_frame_hdr:0000000000005237                 db    0
.eh_frame_hdr:0000000000005238                 db  46h ; F
.eh_frame_hdr:0000000000005239                 db    0
.eh_frame_hdr:000000000000523A                 db    0
.eh_frame_hdr:000000000000523B                 db    0
.eh_frame_hdr:000000000000523C                 db    0
.eh_frame_hdr:000000000000523D                 db 0C0h
.eh_frame_hdr:000000000000523E                 db 0FFh
.eh_frame_hdr:000000000000523F                 db 0FFh
.eh_frame_hdr:0000000000005240                 db  88h
.eh_frame_hdr:0000000000005241                 db    2
.eh_frame_hdr:0000000000005242                 db    0
.eh_frame_hdr:0000000000005243                 db    0
.eh_frame_hdr:0000000000005244                 db  90h
.eh_frame_hdr:0000000000005245                 db 0C2h
.eh_frame_hdr:0000000000005246                 db 0FFh
.eh_frame_hdr:0000000000005247                 db 0FFh
.eh_frame_hdr:0000000000005248                 db 0B0h
.eh_frame_hdr:0000000000005249                 db    2
.eh_frame_hdr:000000000000524A                 db    0
.eh_frame_hdr:000000000000524B                 db    0
.eh_frame_hdr:000000000000524C                 db 0A0h
.eh_frame_hdr:000000000000524D                 db 0C2h
.eh_frame_hdr:000000000000524E                 db 0FFh
.eh_frame_hdr:000000000000524F                 db 0FFh
.eh_frame_hdr:0000000000005250                 db 0F4h
.eh_frame_hdr:0000000000005251                 db    2
.eh_frame_hdr:0000000000005252                 db    0
.eh_frame_hdr:0000000000005253                 db    0
.eh_frame_hdr:0000000000005254                 db 0B0h
.eh_frame_hdr:0000000000005255                 db 0C4h
.eh_frame_hdr:0000000000005256                 db 0FFh
.eh_frame_hdr:0000000000005257                 db 0FFh
.eh_frame_hdr:0000000000005258                 db  58h ; X
.eh_frame_hdr:0000000000005259                 db    2
.eh_frame_hdr:000000000000525A                 db    0
.eh_frame_hdr:000000000000525B                 db    0
.eh_frame_hdr:000000000000525C                 db 0C0h
.eh_frame_hdr:000000000000525D                 db 0C5h
.eh_frame_hdr:000000000000525E                 db 0FFh
.eh_frame_hdr:000000000000525F                 db 0FFh
.eh_frame_hdr:0000000000005260                 db 0C8h
.eh_frame_hdr:0000000000005261                 db    2
.eh_frame_hdr:0000000000005262                 db    0
.eh_frame_hdr:0000000000005263                 db    0
.eh_frame_hdr:0000000000005264                 db  30h ; 0
.eh_frame_hdr:0000000000005265                 db 0C9h
.eh_frame_hdr:0000000000005266                 db 0FFh
.eh_frame_hdr:0000000000005267                 db 0FFh
.eh_frame_hdr:0000000000005268                 db  50h ; P
.eh_frame_hdr:0000000000005269                 db    3
.eh_frame_hdr:000000000000526A                 db    0
.eh_frame_hdr:000000000000526B                 db    0
.eh_frame_hdr:000000000000526C                 db  40h ; @
.eh_frame_hdr:000000000000526D                 db 0C9h
.eh_frame_hdr:000000000000526E                 db 0FFh
.eh_frame_hdr:000000000000526F                 db 0FFh
.eh_frame_hdr:0000000000005270                 db  64h ; d
.eh_frame_hdr:0000000000005271                 db    3
.eh_frame_hdr:0000000000005272                 db    0
.eh_frame_hdr:0000000000005273                 db    0
.eh_frame_hdr:0000000000005274                 db  50h ; P
.eh_frame_hdr:0000000000005275                 db 0C9h
.eh_frame_hdr:0000000000005276                 db 0FFh
.eh_frame_hdr:0000000000005277                 db 0FFh
.eh_frame_hdr:0000000000005278                 db  78h ; x
.eh_frame_hdr:0000000000005279                 db    3
.eh_frame_hdr:000000000000527A                 db    0
.eh_frame_hdr:000000000000527B                 db    0
.eh_frame_hdr:000000000000527C                 db    0
.eh_frame_hdr:000000000000527D                 db 0CAh
.eh_frame_hdr:000000000000527E                 db 0FFh
.eh_frame_hdr:000000000000527F                 db 0FFh
.eh_frame_hdr:0000000000005280                 db 0A8h
.eh_frame_hdr:0000000000005281                 db    3
.eh_frame_hdr:0000000000005282                 db    0
.eh_frame_hdr:0000000000005283                 db    0
.eh_frame_hdr:0000000000005284                 db 0A0h
.eh_frame_hdr:0000000000005285                 db 0CAh
.eh_frame_hdr:0000000000005286                 db 0FFh
.eh_frame_hdr:0000000000005287                 db 0FFh
.eh_frame_hdr:0000000000005288                 db 0C8h
.eh_frame_hdr:0000000000005289                 db    3
.eh_frame_hdr:000000000000528A                 db    0
.eh_frame_hdr:000000000000528B                 db    0
.eh_frame_hdr:000000000000528C                 db  90h
.eh_frame_hdr:000000000000528D                 db 0CBh
.eh_frame_hdr:000000000000528E                 db 0FFh
.eh_frame_hdr:000000000000528F                 db 0FFh
.eh_frame_hdr:0000000000005290                 db  0Ch
.eh_frame_hdr:0000000000005291                 db    4
.eh_frame_hdr:0000000000005292                 db    0
.eh_frame_hdr:0000000000005293                 db    0
.eh_frame_hdr:0000000000005294                 db 0D0h
.eh_frame_hdr:0000000000005295                 db 0DDh
.eh_frame_hdr:0000000000005296                 db 0FFh
.eh_frame_hdr:0000000000005297                 db 0FFh
.eh_frame_hdr:0000000000005298                 db  84h
.eh_frame_hdr:0000000000005299                 db    4
.eh_frame_hdr:000000000000529A                 db    0
.eh_frame_hdr:000000000000529B                 db    0
.eh_frame_hdr:000000000000529C                 db  80h
.eh_frame_hdr:000000000000529D                 db 0DFh
.eh_frame_hdr:000000000000529E                 db 0FFh
.eh_frame_hdr:000000000000529F                 db 0FFh
.eh_frame_hdr:00000000000052A0                 db 0F0h
.eh_frame_hdr:00000000000052A1                 db    4
.eh_frame_hdr:00000000000052A2                 db    0
.eh_frame_hdr:00000000000052A3                 db    0
.eh_frame_hdr:00000000000052A4                 db 0C0h
.eh_frame_hdr:00000000000052A5                 db 0DFh
.eh_frame_hdr:00000000000052A6                 db 0FFh
.eh_frame_hdr:00000000000052A7                 db 0FFh
.eh_frame_hdr:00000000000052A8                 db  1Ch
.eh_frame_hdr:00000000000052A9                 db    5
.eh_frame_hdr:00000000000052AA                 db    0
.eh_frame_hdr:00000000000052AB                 db    0
.eh_frame_hdr:00000000000052AC                 db 0E0h
.eh_frame_hdr:00000000000052AD                 db 0DFh
.eh_frame_hdr:00000000000052AE                 db 0FFh
.eh_frame_hdr:00000000000052AF                 db 0FFh
.eh_frame_hdr:00000000000052B0                 db  30h ; 0
.eh_frame_hdr:00000000000052B1                 db    5
.eh_frame_hdr:00000000000052B2                 db    0
.eh_frame_hdr:00000000000052B3                 db    0
.eh_frame_hdr:00000000000052B4                 db    0
.eh_frame_hdr:00000000000052B5                 db 0E0h
.eh_frame_hdr:00000000000052B6                 db 0FFh
.eh_frame_hdr:00000000000052B7                 db 0FFh
.eh_frame_hdr:00000000000052B8                 db  44h ; D
.eh_frame_hdr:00000000000052B9                 db    5
.eh_frame_hdr:00000000000052BA                 db    0
.eh_frame_hdr:00000000000052BB                 db    0
.eh_frame_hdr:00000000000052BC                 db  40h ; @
.eh_frame_hdr:00000000000052BD                 db 0E0h
.eh_frame_hdr:00000000000052BE                 db 0FFh
.eh_frame_hdr:00000000000052BF                 db 0FFh
.eh_frame_hdr:00000000000052C0                 db  58h ; X
.eh_frame_hdr:00000000000052C1                 db    5
.eh_frame_hdr:00000000000052C2                 db    0
.eh_frame_hdr:00000000000052C3                 db    0
.eh_frame_hdr:00000000000052C4                 db  60h ; `
.eh_frame_hdr:00000000000052C5                 db 0E0h
.eh_frame_hdr:00000000000052C6                 db 0FFh
.eh_frame_hdr:00000000000052C7                 db 0FFh
.eh_frame_hdr:00000000000052C8                 db  6Ch ; l
.eh_frame_hdr:00000000000052C9                 db    5
.eh_frame_hdr:00000000000052CA                 db    0
.eh_frame_hdr:00000000000052CB                 db    0
.eh_frame_hdr:00000000000052CC                 db  90h
.eh_frame_hdr:00000000000052CD                 db 0E0h
.eh_frame_hdr:00000000000052CE                 db 0FFh
.eh_frame_hdr:00000000000052CF                 db 0FFh
.eh_frame_hdr:00000000000052D0                 db  80h
.eh_frame_hdr:00000000000052D1                 db    5
.eh_frame_hdr:00000000000052D2                 db    0
.eh_frame_hdr:00000000000052D3                 db    0
.eh_frame_hdr:00000000000052D4                 db  10h
.eh_frame_hdr:00000000000052D5                 db 0E1h
.eh_frame_hdr:00000000000052D6                 db 0FFh
.eh_frame_hdr:00000000000052D7                 db 0FFh
.eh_frame_hdr:00000000000052D8                 db 0D4h
.eh_frame_hdr:00000000000052D9                 db    5
.eh_frame_hdr:00000000000052DA                 db    0
.eh_frame_hdr:00000000000052DB                 db    0
.eh_frame_hdr:00000000000052DC                 db    0
.eh_frame_hdr:00000000000052DD                 db 0E2h
.eh_frame_hdr:00000000000052DE                 db 0FFh
.eh_frame_hdr:00000000000052DF                 db 0FFh
.eh_frame_hdr:00000000000052E0                 db  40h ; @
.eh_frame_hdr:00000000000052E1                 db    6
.eh_frame_hdr:00000000000052E2                 db    0
.eh_frame_hdr:00000000000052E3                 db    0
.eh_frame_hdr:00000000000052E4                 db  10h
.eh_frame_hdr:00000000000052E5                 db 0E2h
.eh_frame_hdr:00000000000052E6                 db 0FFh
.eh_frame_hdr:00000000000052E7                 db 0FFh
.eh_frame_hdr:00000000000052E8                 db  54h ; T
.eh_frame_hdr:00000000000052E9                 db    6
.eh_frame_hdr:00000000000052EA                 db    0
.eh_frame_hdr:00000000000052EB                 db    0
.eh_frame_hdr:00000000000052EC                 db 0B0h
.eh_frame_hdr:00000000000052ED                 db 0E2h
.eh_frame_hdr:00000000000052EE                 db 0FFh
.eh_frame_hdr:00000000000052EF                 db 0FFh
.eh_frame_hdr:00000000000052F0                 db  80h
.eh_frame_hdr:00000000000052F1                 db    6
.eh_frame_hdr:00000000000052F2                 db    0
.eh_frame_hdr:00000000000052F3                 db    0
.eh_frame_hdr:00000000000052F4                 db 0D0h
.eh_frame_hdr:00000000000052F5                 db 0E2h
.eh_frame_hdr:00000000000052F6                 db 0FFh
.eh_frame_hdr:00000000000052F7                 db 0FFh
.eh_frame_hdr:00000000000052F8                 db  94h
.eh_frame_hdr:00000000000052F9                 db    6
.eh_frame_hdr:00000000000052FA                 db    0
.eh_frame_hdr:00000000000052FB                 db    0
.eh_frame_hdr:00000000000052FC                 db 0E0h
.eh_frame_hdr:00000000000052FD                 db 0E2h
.eh_frame_hdr:00000000000052FE                 db 0FFh
.eh_frame_hdr:00000000000052FF                 db 0FFh
.eh_frame_hdr:0000000000005300                 db 0A8h
.eh_frame_hdr:0000000000005301                 db    6
.eh_frame_hdr:0000000000005302                 db    0
.eh_frame_hdr:0000000000005303                 db    0
.eh_frame_hdr:0000000000005304                 db    0
.eh_frame_hdr:0000000000005305                 db 0E3h
.eh_frame_hdr:0000000000005306                 db 0FFh
.eh_frame_hdr:0000000000005307                 db 0FFh
.eh_frame_hdr:0000000000005308                 db 0BCh
.eh_frame_hdr:0000000000005309                 db    6
.eh_frame_hdr:000000000000530A                 db    0
.eh_frame_hdr:000000000000530B                 db    0
.eh_frame_hdr:000000000000530C                 db  20h
.eh_frame_hdr:000000000000530D                 db 0E3h
.eh_frame_hdr:000000000000530E                 db 0FFh
.eh_frame_hdr:000000000000530F                 db 0FFh
.eh_frame_hdr:0000000000005310                 db 0D0h
.eh_frame_hdr:0000000000005311                 db    6
.eh_frame_hdr:0000000000005312                 db    0
.eh_frame_hdr:0000000000005313                 db    0
.eh_frame_hdr:0000000000005314                 db 0B0h
.eh_frame_hdr:0000000000005315                 db 0E3h
.eh_frame_hdr:0000000000005316                 db 0FFh
.eh_frame_hdr:0000000000005317                 db 0FFh
.eh_frame_hdr:0000000000005318                 db 0ECh
.eh_frame_hdr:0000000000005319                 db    6
.eh_frame_hdr:000000000000531A                 db    0
.eh_frame_hdr:000000000000531B                 db    0
.eh_frame_hdr:000000000000531C                 db  40h ; @
.eh_frame_hdr:000000000000531D                 db 0E4h
.eh_frame_hdr:000000000000531E                 db 0FFh
.eh_frame_hdr:000000000000531F                 db 0FFh
.eh_frame_hdr:0000000000005320                 db    8
.eh_frame_hdr:0000000000005321                 db    7
.eh_frame_hdr:0000000000005322                 db    0
.eh_frame_hdr:0000000000005323                 db    0
.eh_frame_hdr:0000000000005324                 db  50h ; P
.eh_frame_hdr:0000000000005325                 db 0E4h
.eh_frame_hdr:0000000000005326                 db 0FFh
.eh_frame_hdr:0000000000005327                 db 0FFh
.eh_frame_hdr:0000000000005328                 db  1Ch
.eh_frame_hdr:0000000000005329                 db    7
.eh_frame_hdr:000000000000532A                 db    0
.eh_frame_hdr:000000000000532B                 db    0
.eh_frame_hdr:000000000000532C                 db  60h ; `
.eh_frame_hdr:000000000000532D                 db 0E4h
.eh_frame_hdr:000000000000532E                 db 0FFh
.eh_frame_hdr:000000000000532F                 db 0FFh
.eh_frame_hdr:0000000000005330                 db  30h ; 0
.eh_frame_hdr:0000000000005331                 db    7
.eh_frame_hdr:0000000000005332                 db    0
.eh_frame_hdr:0000000000005333                 db    0
.eh_frame_hdr:0000000000005334                 db    0
.eh_frame_hdr:0000000000005335                 db 0E5h
.eh_frame_hdr:0000000000005336                 db 0FFh
.eh_frame_hdr:0000000000005337                 db 0FFh
.eh_frame_hdr:0000000000005338                 db  4Ch ; L
.eh_frame_hdr:0000000000005339                 db    7
.eh_frame_hdr:000000000000533A                 db    0
.eh_frame_hdr:000000000000533B                 db    0
.eh_frame_hdr:000000000000533C                 db  10h
.eh_frame_hdr:000000000000533D                 db 0E5h
.eh_frame_hdr:000000000000533E                 db 0FFh
.eh_frame_hdr:000000000000533F                 db 0FFh
.eh_frame_hdr:0000000000005340                 db  60h ; `
.eh_frame_hdr:0000000000005341                 db    7
.eh_frame_hdr:0000000000005342                 db    0
.eh_frame_hdr:0000000000005343                 db    0
.eh_frame_hdr:0000000000005344                 db  30h ; 0
.eh_frame_hdr:0000000000005345                 db 0E5h
.eh_frame_hdr:0000000000005346                 db 0FFh
.eh_frame_hdr:0000000000005347                 db 0FFh
.eh_frame_hdr:0000000000005348                 db  74h ; t
.eh_frame_hdr:0000000000005349                 db    7
.eh_frame_hdr:000000000000534A                 db    0
.eh_frame_hdr:000000000000534B                 db    0
.eh_frame_hdr:000000000000534C                 db  40h ; @
.eh_frame_hdr:000000000000534D                 db 0E5h
.eh_frame_hdr:000000000000534E                 db 0FFh
.eh_frame_hdr:000000000000534F                 db 0FFh
.eh_frame_hdr:0000000000005350                 db  88h
.eh_frame_hdr:0000000000005351                 db    7
.eh_frame_hdr:0000000000005352                 db    0
.eh_frame_hdr:0000000000005353                 db    0
.eh_frame_hdr:0000000000005354                 db 0D0h
.eh_frame_hdr:0000000000005355                 db 0E5h
.eh_frame_hdr:0000000000005356                 db 0FFh
.eh_frame_hdr:0000000000005357                 db 0FFh
.eh_frame_hdr:0000000000005358                 db 0A4h
.eh_frame_hdr:0000000000005359                 db    7
.eh_frame_hdr:000000000000535A                 db    0
.eh_frame_hdr:000000000000535B                 db    0
.eh_frame_hdr:000000000000535C                 db  70h ; p
.eh_frame_hdr:000000000000535D                 db 0E6h
.eh_frame_hdr:000000000000535E                 db 0FFh
.eh_frame_hdr:000000000000535F                 db 0FFh
.eh_frame_hdr:0000000000005360                 db 0C0h
.eh_frame_hdr:0000000000005361                 db    7
.eh_frame_hdr:0000000000005362                 db    0
.eh_frame_hdr:0000000000005363                 db    0
.eh_frame_hdr:0000000000005364                 db  80h
.eh_frame_hdr:0000000000005365                 db 0E6h
.eh_frame_hdr:0000000000005366                 db 0FFh
.eh_frame_hdr:0000000000005367                 db 0FFh
.eh_frame_hdr:0000000000005368                 db 0D4h
.eh_frame_hdr:0000000000005369                 db    7
.eh_frame_hdr:000000000000536A                 db    0
.eh_frame_hdr:000000000000536B                 db    0
.eh_frame_hdr:000000000000536C                 db 0A0h
.eh_frame_hdr:000000000000536D                 db 0E6h
.eh_frame_hdr:000000000000536E                 db 0FFh
.eh_frame_hdr:000000000000536F                 db 0FFh
.eh_frame_hdr:0000000000005370                 db 0E8h
.eh_frame_hdr:0000000000005371                 db    7
.eh_frame_hdr:0000000000005372                 db    0
.eh_frame_hdr:0000000000005373                 db    0
.eh_frame_hdr:0000000000005374                 db 0C0h
.eh_frame_hdr:0000000000005375                 db 0E6h
.eh_frame_hdr:0000000000005376                 db 0FFh
.eh_frame_hdr:0000000000005377                 db 0FFh
.eh_frame_hdr:0000000000005378                 db 0FCh
.eh_frame_hdr:0000000000005379                 db    7
.eh_frame_hdr:000000000000537A                 db    0
.eh_frame_hdr:000000000000537B                 db    0
.eh_frame_hdr:000000000000537C                 db 0D0h
.eh_frame_hdr:000000000000537D                 db 0E6h
.eh_frame_hdr:000000000000537E                 db 0FFh
.eh_frame_hdr:000000000000537F                 db 0FFh
.eh_frame_hdr:0000000000005380                 db  10h
.eh_frame_hdr:0000000000005381                 db    8
.eh_frame_hdr:0000000000005382                 db    0
.eh_frame_hdr:0000000000005383                 db    0
.eh_frame_hdr:0000000000005384                 db 0F0h
.eh_frame_hdr:0000000000005385                 db 0E6h
.eh_frame_hdr:0000000000005386                 db 0FFh
.eh_frame_hdr:0000000000005387                 db 0FFh
.eh_frame_hdr:0000000000005388                 db  24h ; $
.eh_frame_hdr:0000000000005389                 db    8
.eh_frame_hdr:000000000000538A                 db    0
.eh_frame_hdr:000000000000538B                 db    0
.eh_frame_hdr:000000000000538C                 db  10h
.eh_frame_hdr:000000000000538D                 db 0E7h
.eh_frame_hdr:000000000000538E                 db 0FFh
.eh_frame_hdr:000000000000538F                 db 0FFh
.eh_frame_hdr:0000000000005390                 db  38h ; 8
.eh_frame_hdr:0000000000005391                 db    8
.eh_frame_hdr:0000000000005392                 db    0
.eh_frame_hdr:0000000000005393                 db    0
.eh_frame_hdr:0000000000005394                 db  30h ; 0
.eh_frame_hdr:0000000000005395                 db 0E7h
.eh_frame_hdr:0000000000005396                 db 0FFh
.eh_frame_hdr:0000000000005397                 db 0FFh
.eh_frame_hdr:0000000000005398                 db  50h ; P
.eh_frame_hdr:0000000000005399                 db    8
.eh_frame_hdr:000000000000539A                 db    0
.eh_frame_hdr:000000000000539B                 db    0
.eh_frame_hdr:000000000000539C                 db  50h ; P
.eh_frame_hdr:000000000000539D                 db 0EBh
.eh_frame_hdr:000000000000539E                 db 0FFh
.eh_frame_hdr:000000000000539F                 db 0FFh
.eh_frame_hdr:00000000000053A0                 db  64h ; d
.eh_frame_hdr:00000000000053A1                 db    9
.eh_frame_hdr:00000000000053A2                 db    0
.eh_frame_hdr:00000000000053A3                 db    0
.eh_frame_hdr:00000000000053A4                 db  70h ; p
.eh_frame_hdr:00000000000053A5                 db 0EBh
.eh_frame_hdr:00000000000053A6                 db 0FFh
.eh_frame_hdr:00000000000053A7                 db 0FFh
.eh_frame_hdr:00000000000053A8                 db  78h ; x
.eh_frame_hdr:00000000000053A9                 db    9
.eh_frame_hdr:00000000000053AA                 db    0
.eh_frame_hdr:00000000000053AB                 db    0
.eh_frame_hdr:00000000000053AC                 db 0F0h
.eh_frame_hdr:00000000000053AD                 db 0EBh
.eh_frame_hdr:00000000000053AE                 db 0FFh
.eh_frame_hdr:00000000000053AF                 db 0FFh
.eh_frame_hdr:00000000000053B0                 db  94h
.eh_frame_hdr:00000000000053B1                 db    9
.eh_frame_hdr:00000000000053B2                 db    0
.eh_frame_hdr:00000000000053B3                 db    0
.eh_frame_hdr:00000000000053B4                 db 0D0h
.eh_frame_hdr:00000000000053B5                 db 0ECh
.eh_frame_hdr:00000000000053B6                 db 0FFh
.eh_frame_hdr:00000000000053B7                 db 0FFh
.eh_frame_hdr:00000000000053B8                 db 0C0h
.eh_frame_hdr:00000000000053B9                 db    9
.eh_frame_hdr:00000000000053BA                 db    0
.eh_frame_hdr:00000000000053BB                 db    0
.eh_frame_hdr:00000000000053BC                 db  50h ; P
.eh_frame_hdr:00000000000053BD                 db 0EDh
.eh_frame_hdr:00000000000053BE                 db 0FFh
.eh_frame_hdr:00000000000053BF                 db 0FFh
.eh_frame_hdr:00000000000053C0                 db 0E0h
.eh_frame_hdr:00000000000053C1                 db    9
.eh_frame_hdr:00000000000053C2                 db    0
.eh_frame_hdr:00000000000053C3                 db    0
.eh_frame_hdr:00000000000053C4                 db  70h ; p
.eh_frame_hdr:00000000000053C5                 db 0EDh
.eh_frame_hdr:00000000000053C6                 db 0FFh
.eh_frame_hdr:00000000000053C7                 db 0FFh
.eh_frame_hdr:00000000000053C8                 db 0FCh
.eh_frame_hdr:00000000000053C9                 db    9
.eh_frame_hdr:00000000000053CA                 db    0
.eh_frame_hdr:00000000000053CB                 db    0
.eh_frame_hdr:00000000000053CC                 db 0A0h
.eh_frame_hdr:00000000000053CD                 db 0EDh
.eh_frame_hdr:00000000000053CE                 db 0FFh
.eh_frame_hdr:00000000000053CF                 db 0FFh
.eh_frame_hdr:00000000000053D0                 db  10h
.eh_frame_hdr:00000000000053D1                 db  0Ah
.eh_frame_hdr:00000000000053D2                 db    0
.eh_frame_hdr:00000000000053D3                 db    0
.eh_frame_hdr:00000000000053D4                 db 0B0h
.eh_frame_hdr:00000000000053D5                 db 0EDh
.eh_frame_hdr:00000000000053D6                 db 0FFh
.eh_frame_hdr:00000000000053D7                 db 0FFh
.eh_frame_hdr:00000000000053D8                 db  24h ; $
.eh_frame_hdr:00000000000053D9                 db  0Ah
.eh_frame_hdr:00000000000053DA                 db    0
.eh_frame_hdr:00000000000053DB                 db    0
.eh_frame_hdr:00000000000053DC                 db 0F0h
.eh_frame_hdr:00000000000053DD                 db 0EDh
.eh_frame_hdr:00000000000053DE                 db 0FFh
.eh_frame_hdr:00000000000053DF                 db 0FFh
.eh_frame_hdr:00000000000053E0                 db  48h ; H
.eh_frame_hdr:00000000000053E1                 db  0Ah
.eh_frame_hdr:00000000000053E2                 db    0
.eh_frame_hdr:00000000000053E3                 db    0
.eh_frame_hdr:00000000000053E4                 db  20h
.eh_frame_hdr:00000000000053E5                 db 0EEh
.eh_frame_hdr:00000000000053E6                 db 0FFh
.eh_frame_hdr:00000000000053E7                 db 0FFh
.eh_frame_hdr:00000000000053E8                 db  5Ch ; \
.eh_frame_hdr:00000000000053E9                 db  0Ah
.eh_frame_hdr:00000000000053EA                 db    0
.eh_frame_hdr:00000000000053EB                 db    0
.eh_frame_hdr:00000000000053EC                 db 0B0h
.eh_frame_hdr:00000000000053ED                 db 0EEh
.eh_frame_hdr:00000000000053EE                 db 0FFh
.eh_frame_hdr:00000000000053EF                 db 0FFh
.eh_frame_hdr:00000000000053F0                 db  74h ; t
.eh_frame_hdr:00000000000053F1                 db  0Ah
.eh_frame_hdr:00000000000053F2                 db    0
.eh_frame_hdr:00000000000053F3                 db    0
.eh_frame_hdr:00000000000053F4                 db    0
.eh_frame_hdr:00000000000053F5                 db 0EFh
.eh_frame_hdr:00000000000053F6                 db 0FFh
.eh_frame_hdr:00000000000053F7                 db 0FFh
.eh_frame_hdr:00000000000053F8                 db  8Ch
.eh_frame_hdr:00000000000053F9                 db  0Ah
.eh_frame_hdr:00000000000053FA                 db    0
.eh_frame_hdr:00000000000053FB                 db    0
.eh_frame_hdr:00000000000053FC                 db  20h
.eh_frame_hdr:00000000000053FD                 db 0EFh
.eh_frame_hdr:00000000000053FE                 db 0FFh
.eh_frame_hdr:00000000000053FF                 db 0FFh
.eh_frame_hdr:0000000000005400                 db 0A8h
.eh_frame_hdr:0000000000005401                 db  0Ah
.eh_frame_hdr:0000000000005402                 db    0
.eh_frame_hdr:0000000000005403                 db    0
.eh_frame_hdr:0000000000005404                 db  50h ; P
.eh_frame_hdr:0000000000005405                 db 0EFh
.eh_frame_hdr:0000000000005406                 db 0FFh
.eh_frame_hdr:0000000000005407                 db 0FFh
.eh_frame_hdr:0000000000005408                 db 0C4h
.eh_frame_hdr:0000000000005409                 db  0Ah
.eh_frame_hdr:000000000000540A                 db    0
.eh_frame_hdr:000000000000540B                 db    0
.eh_frame_hdr:000000000000540C                 db  80h
.eh_frame_hdr:000000000000540D                 db 0EFh
.eh_frame_hdr:000000000000540E                 db 0FFh
.eh_frame_hdr:000000000000540F                 db 0FFh
.eh_frame_hdr:0000000000005410                 db 0ECh
.eh_frame_hdr:0000000000005411                 db  0Ah
.eh_frame_hdr:0000000000005412                 db    0
.eh_frame_hdr:0000000000005413                 db    0
.eh_frame_hdr:0000000000005414                 db 0A0h
.eh_frame_hdr:0000000000005415                 db 0EFh
.eh_frame_hdr:0000000000005416                 db 0FFh
.eh_frame_hdr:0000000000005417                 db 0FFh
.eh_frame_hdr:0000000000005418                 db    8
.eh_frame_hdr:0000000000005419                 db  0Bh
.eh_frame_hdr:000000000000541A                 db    0
.eh_frame_hdr:000000000000541B                 db    0
.eh_frame_hdr:000000000000541C                 db 0E0h
.eh_frame_hdr:000000000000541D                 db 0EFh
.eh_frame_hdr:000000000000541E                 db 0FFh
.eh_frame_hdr:000000000000541F                 db 0FFh
.eh_frame_hdr:0000000000005420                 db  20h
.eh_frame_hdr:0000000000005421                 db  0Bh
.eh_frame_hdr:0000000000005422                 db    0
.eh_frame_hdr:0000000000005423                 db    0
.eh_frame_hdr:0000000000005424                 db  70h ; p
.eh_frame_hdr:0000000000005425                 db 0F0h
.eh_frame_hdr:0000000000005426                 db 0FFh
.eh_frame_hdr:0000000000005427                 db 0FFh
.eh_frame_hdr:0000000000005428                 db  60h ; `
.eh_frame_hdr:0000000000005429                 db  0Bh
.eh_frame_hdr:000000000000542A                 db    0
.eh_frame_hdr:000000000000542B                 db    0
.eh_frame_hdr:000000000000542C                 db 0F0h
.eh_frame_hdr:000000000000542D                 db 0F0h
.eh_frame_hdr:000000000000542E                 db 0FFh
.eh_frame_hdr:000000000000542F                 db 0FFh
.eh_frame_hdr:0000000000005430                 db 0B0h
.eh_frame_hdr:0000000000005431                 db  0Bh
.eh_frame_hdr:0000000000005432                 db    0
.eh_frame_hdr:0000000000005433                 db    0
.eh_frame_hdr:0000000000005434                 db  50h ; P
.eh_frame_hdr:0000000000005435                 db 0F1h
.eh_frame_hdr:0000000000005436                 db 0FFh
.eh_frame_hdr:0000000000005437                 db 0FFh
.eh_frame_hdr:0000000000005438                 db 0D0h
.eh_frame_hdr:0000000000005439                 db  0Bh
.eh_frame_hdr:000000000000543A                 db    0
.eh_frame_hdr:000000000000543B                 db    0
.eh_frame_hdr:000000000000543C                 db  90h
.eh_frame_hdr:000000000000543D                 db 0F1h
.eh_frame_hdr:000000000000543E                 db 0FFh
.eh_frame_hdr:000000000000543F                 db 0FFh
.eh_frame_hdr:0000000000005440                 db 0F0h
.eh_frame_hdr:0000000000005441                 db  0Bh
.eh_frame_hdr:0000000000005442                 db    0
.eh_frame_hdr:0000000000005443                 db    0
.eh_frame_hdr:0000000000005444                 db  10h
.eh_frame_hdr:0000000000005445                 db 0F2h
.eh_frame_hdr:0000000000005446                 db 0FFh
.eh_frame_hdr:0000000000005447                 db 0FFh
.eh_frame_hdr:0000000000005448                 db  28h ; (
.eh_frame_hdr:0000000000005449                 db  0Ch
.eh_frame_hdr:000000000000544A                 db    0
.eh_frame_hdr:000000000000544B                 db    0
.eh_frame_hdr:000000000000544C                 db  50h ; P
.eh_frame_hdr:000000000000544D                 db 0F2h
.eh_frame_hdr:000000000000544E                 db 0FFh
.eh_frame_hdr:000000000000544F                 db 0FFh
.eh_frame_hdr:0000000000005450                 db  48h ; H
.eh_frame_hdr:0000000000005451                 db  0Ch
.eh_frame_hdr:0000000000005452                 db    0
.eh_frame_hdr:0000000000005453                 db    0
.eh_frame_hdr:0000000000005454                 db 0B0h
.eh_frame_hdr:0000000000005455                 db 0F2h
.eh_frame_hdr:0000000000005456                 db 0FFh
.eh_frame_hdr:0000000000005457                 db 0FFh
.eh_frame_hdr:0000000000005458                 db  78h ; x
.eh_frame_hdr:0000000000005459                 db  0Ch
.eh_frame_hdr:000000000000545A                 db    0
.eh_frame_hdr:000000000000545B                 db    0
.eh_frame_hdr:000000000000545C                 db  20h
.eh_frame_hdr:000000000000545D                 db 0F3h
.eh_frame_hdr:000000000000545E                 db 0FFh
.eh_frame_hdr:000000000000545F                 db 0FFh
.eh_frame_hdr:0000000000005460                 db 0C0h
.eh_frame_hdr:0000000000005461                 db  0Ch
.eh_frame_hdr:0000000000005462                 db    0
.eh_frame_hdr:0000000000005463                 db    0
.eh_frame_hdr:0000000000005464                 db  30h ; 0
.eh_frame_hdr:0000000000005465                 db 0F3h
.eh_frame_hdr:0000000000005466                 db 0FFh
.eh_frame_hdr:0000000000005467                 db 0FFh
.eh_frame_hdr:0000000000005468                 db 0D8h
.eh_frame_hdr:0000000000005469                 db  0Ch
.eh_frame_hdr:000000000000546A                 db    0
.eh_frame_hdr:000000000000546B                 db    0
.eh_frame_hdr:000000000000546B _eh_frame_hdr   ends
.eh_frame_hdr:000000000000546B
LOAD:000000000000546C ; ===========================================================================
LOAD:000000000000546C
LOAD:000000000000546C ; Segment type: Pure code
LOAD:000000000000546C ; Segment permissions: Read/Execute
LOAD:000000000000546C LOAD            segment byte public 'CODE' use64
LOAD:000000000000546C                 assume cs:LOAD
LOAD:000000000000546C                 ;org 546Ch
LOAD:000000000000546C                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000546C                 align 10h
LOAD:000000000000546C LOAD            ends
LOAD:000000000000546C
.eh_frame:0000000000005470 ; ===========================================================================
.eh_frame:0000000000005470
.eh_frame:0000000000005470 ; Segment type: Pure data
.eh_frame:0000000000005470 ; Segment permissions: Read
.eh_frame:0000000000005470 _eh_frame       segment qword public 'CONST' use64
.eh_frame:0000000000005470                 assume cs:_eh_frame
.eh_frame:0000000000005470                 ;org 5470h
.eh_frame:0000000000005470                 db  14h
.eh_frame:0000000000005471                 db    0
.eh_frame:0000000000005472                 db    0
.eh_frame:0000000000005473                 db    0
.eh_frame:0000000000005474                 db    0
.eh_frame:0000000000005475                 db    0
.eh_frame:0000000000005476                 db    0
.eh_frame:0000000000005477                 db    0
.eh_frame:0000000000005478                 db    1
.eh_frame:0000000000005479                 db  7Ah ; z
.eh_frame:000000000000547A                 db  52h ; R
.eh_frame:000000000000547B                 db    0
.eh_frame:000000000000547C                 db    1
.eh_frame:000000000000547D                 db  78h ; x
.eh_frame:000000000000547E                 db  10h
.eh_frame:000000000000547F                 db    1
.eh_frame:0000000000005480                 db  1Bh
.eh_frame:0000000000005481                 db  0Ch
.eh_frame:0000000000005482                 db    7
.eh_frame:0000000000005483                 db    8
.eh_frame:0000000000005484                 db  90h
.eh_frame:0000000000005485                 db    1
.eh_frame:0000000000005486                 db    7
.eh_frame:0000000000005487                 db  10h
.eh_frame:0000000000005488                 db  14h
.eh_frame:0000000000005489                 db    0
.eh_frame:000000000000548A                 db    0
.eh_frame:000000000000548B                 db    0
.eh_frame:000000000000548C                 db  1Ch
.eh_frame:000000000000548D                 db    0
.eh_frame:000000000000548E                 db    0
.eh_frame:000000000000548F                 db    0
.eh_frame:0000000000005490                 db  50h ; P
.eh_frame:0000000000005491                 db 0C2h
.eh_frame:0000000000005492                 db 0FFh
.eh_frame:0000000000005493                 db 0FFh
.eh_frame:0000000000005494                 db  2Bh ; +
.eh_frame:0000000000005495                 db    0
.eh_frame:0000000000005496                 db    0
.eh_frame:0000000000005497                 db    0
.eh_frame:0000000000005498                 db    0
.eh_frame:0000000000005499                 db    0
.eh_frame:000000000000549A                 db    0
.eh_frame:000000000000549B                 db    0
.eh_frame:000000000000549C                 db    0
.eh_frame:000000000000549D                 db    0
.eh_frame:000000000000549E                 db    0
.eh_frame:000000000000549F                 db    0
.eh_frame:00000000000054A0                 db  14h
.eh_frame:00000000000054A1                 db    0
.eh_frame:00000000000054A2                 db    0
.eh_frame:00000000000054A3                 db    0
.eh_frame:00000000000054A4                 db    0
.eh_frame:00000000000054A5                 db    0
.eh_frame:00000000000054A6                 db    0
.eh_frame:00000000000054A7                 db    0
.eh_frame:00000000000054A8                 db    1
.eh_frame:00000000000054A9                 db  7Ah ; z
.eh_frame:00000000000054AA                 db  52h ; R
.eh_frame:00000000000054AB                 db    0
.eh_frame:00000000000054AC                 db    1
.eh_frame:00000000000054AD                 db  78h ; x
.eh_frame:00000000000054AE                 db  10h
.eh_frame:00000000000054AF                 db    1
.eh_frame:00000000000054B0                 db  1Bh
.eh_frame:00000000000054B1                 db  0Ch
.eh_frame:00000000000054B2                 db    7
.eh_frame:00000000000054B3                 db    8
.eh_frame:00000000000054B4                 db  90h
.eh_frame:00000000000054B5                 db    1
.eh_frame:00000000000054B6                 db    0
.eh_frame:00000000000054B7                 db    0
.eh_frame:00000000000054B8                 db  24h ; $
.eh_frame:00000000000054B9                 db    0
.eh_frame:00000000000054BA                 db    0
.eh_frame:00000000000054BB                 db    0
.eh_frame:00000000000054BC                 db  1Ch
.eh_frame:00000000000054BD                 db    0
.eh_frame:00000000000054BE                 db    0
.eh_frame:00000000000054BF                 db    0
.eh_frame:00000000000054C0                 db  70h ; p
.eh_frame:00000000000054C1                 db 0BDh
.eh_frame:00000000000054C2                 db 0FFh
.eh_frame:00000000000054C3                 db 0FFh
.eh_frame:00000000000054C4                 db  90h
.eh_frame:00000000000054C5                 db    2
.eh_frame:00000000000054C6                 db    0
.eh_frame:00000000000054C7                 db    0
.eh_frame:00000000000054C8                 db    0
.eh_frame:00000000000054C9                 db  0Eh
.eh_frame:00000000000054CA                 db  10h
.eh_frame:00000000000054CB                 db  46h ; F
.eh_frame:00000000000054CC                 db  0Eh
.eh_frame:00000000000054CD                 db  18h
.eh_frame:00000000000054CE                 db  4Ah ; J
.eh_frame:00000000000054CF                 db  0Fh
.eh_frame:00000000000054D0                 db  0Bh
.eh_frame:00000000000054D1                 db  77h ; w
.eh_frame:00000000000054D2                 db    8
.eh_frame:00000000000054D3                 db  80h
.eh_frame:00000000000054D4                 db    0
.eh_frame:00000000000054D5                 db  3Fh ; ?
.eh_frame:00000000000054D6                 db  1Ah
.eh_frame:00000000000054D7                 db  3Bh ; ;
.eh_frame:00000000000054D8                 db  2Ah ; *
.eh_frame:00000000000054D9                 db  33h ; 3
.eh_frame:00000000000054DA                 db  24h ; $
.eh_frame:00000000000054DB                 db  22h ; "
.eh_frame:00000000000054DC                 db    0
.eh_frame:00000000000054DD                 db    0
.eh_frame:00000000000054DE                 db    0
.eh_frame:00000000000054DF                 db    0
.eh_frame:00000000000054E0                 db  14h
.eh_frame:00000000000054E1                 db    0
.eh_frame:00000000000054E2                 db    0
.eh_frame:00000000000054E3                 db    0
.eh_frame:00000000000054E4                 db  44h ; D
.eh_frame:00000000000054E5                 db    0
.eh_frame:00000000000054E6                 db    0
.eh_frame:00000000000054E7                 db    0
.eh_frame:00000000000054E8                 db 0D8h
.eh_frame:00000000000054E9                 db 0BFh
.eh_frame:00000000000054EA                 db 0FFh
.eh_frame:00000000000054EB                 db 0FFh
.eh_frame:00000000000054EC                 db    8
.eh_frame:00000000000054ED                 db    0
.eh_frame:00000000000054EE                 db    0
.eh_frame:00000000000054EF                 db    0
.eh_frame:00000000000054F0                 db    0
.eh_frame:00000000000054F1                 db    0
.eh_frame:00000000000054F2                 db    0
.eh_frame:00000000000054F3                 db    0
.eh_frame:00000000000054F4                 db    0
.eh_frame:00000000000054F5                 db    0
.eh_frame:00000000000054F6                 db    0
.eh_frame:00000000000054F7                 db    0
.eh_frame:00000000000054F8                 db  28h ; (
.eh_frame:00000000000054F9                 db    0
.eh_frame:00000000000054FA                 db    0
.eh_frame:00000000000054FB                 db    0
.eh_frame:00000000000054FC                 db  5Ch ; \
.eh_frame:00000000000054FD                 db    0
.eh_frame:00000000000054FE                 db    0
.eh_frame:00000000000054FF                 db    0
.eh_frame:0000000000005500                 db 0F0h
.eh_frame:0000000000005501                 db 0C2h
.eh_frame:0000000000005502                 db 0FFh
.eh_frame:0000000000005503                 db 0FFh
.eh_frame:0000000000005504                 db  6Ah ; j
.eh_frame:0000000000005505                 db    3
.eh_frame:0000000000005506                 db    0
.eh_frame:0000000000005507                 db    0
.eh_frame:0000000000005508                 db    0
.eh_frame:0000000000005509                 db  42h ; B
.eh_frame:000000000000550A                 db  0Eh
.eh_frame:000000000000550B                 db  10h
.eh_frame:000000000000550C                 db  8Dh
.eh_frame:000000000000550D                 db    2
.eh_frame:000000000000550E                 db  42h ; B
.eh_frame:000000000000550F                 db  0Eh
.eh_frame:0000000000005510                 db  18h
.eh_frame:0000000000005511                 db  8Ch
.eh_frame:0000000000005512                 db    3
.eh_frame:0000000000005513                 db  46h ; F
.eh_frame:0000000000005514                 db  0Eh
.eh_frame:0000000000005515                 db  20h
.eh_frame:0000000000005516                 db  86h
.eh_frame:0000000000005517                 db    4
.eh_frame:0000000000005518                 db  41h ; A
.eh_frame:0000000000005519                 db  0Eh
.eh_frame:000000000000551A                 db  28h ; (
.eh_frame:000000000000551B                 db  83h
.eh_frame:000000000000551C                 db    5
.eh_frame:000000000000551D                 db  49h ; I
.eh_frame:000000000000551E                 db  0Eh
.eh_frame:000000000000551F                 db 0B0h
.eh_frame:0000000000005520                 db    1
.eh_frame:0000000000005521                 db    0
.eh_frame:0000000000005522                 db    0
.eh_frame:0000000000005523                 db    0
.eh_frame:0000000000005524                 db  58h ; X
.eh_frame:0000000000005525                 db    0
.eh_frame:0000000000005526                 db    0
.eh_frame:0000000000005527                 db    0
.eh_frame:0000000000005528                 db  88h
.eh_frame:0000000000005529                 db    0
.eh_frame:000000000000552A                 db    0
.eh_frame:000000000000552B                 db    0
.eh_frame:000000000000552C                 db 0A4h
.eh_frame:000000000000552D                 db 0BFh
.eh_frame:000000000000552E                 db 0FFh
.eh_frame:000000000000552F                 db 0FFh
.eh_frame:0000000000005530                 db    9
.eh_frame:0000000000005531                 db    2
.eh_frame:0000000000005532                 db    0
.eh_frame:0000000000005533                 db    0
.eh_frame:0000000000005534                 db    0
.eh_frame:0000000000005535                 db  42h ; B
.eh_frame:0000000000005536                 db  0Eh
.eh_frame:0000000000005537                 db  10h
.eh_frame:0000000000005538                 db  8Fh
.eh_frame:0000000000005539                 db    2
.eh_frame:000000000000553A                 db  42h ; B
.eh_frame:000000000000553B                 db  0Eh
.eh_frame:000000000000553C                 db  18h
.eh_frame:000000000000553D                 db  8Eh
.eh_frame:000000000000553E                 db    3
.eh_frame:000000000000553F                 db  42h ; B
.eh_frame:0000000000005540                 db  0Eh
.eh_frame:0000000000005541                 db  20h
.eh_frame:0000000000005542                 db  8Dh
.eh_frame:0000000000005543                 db    4
.eh_frame:0000000000005544                 db  42h ; B
.eh_frame:0000000000005545                 db  0Eh
.eh_frame:0000000000005546                 db  28h ; (
.eh_frame:0000000000005547                 db  8Ch
.eh_frame:0000000000005548                 db    5
.eh_frame:0000000000005549                 db  44h ; D
.eh_frame:000000000000554A                 db  0Eh
.eh_frame:000000000000554B                 db  30h ; 0
.eh_frame:000000000000554C                 db  86h
.eh_frame:000000000000554D                 db    6
.eh_frame:000000000000554E                 db  41h ; A
.eh_frame:000000000000554F                 db  0Eh
.eh_frame:0000000000005550                 db  38h ; 8
.eh_frame:0000000000005551                 db  83h
.eh_frame:0000000000005552                 db    7
.eh_frame:0000000000005553                 db  49h ; I
.eh_frame:0000000000005554                 db  0Eh
.eh_frame:0000000000005555                 db  40h ; @
.eh_frame:0000000000005556                 db    2
.eh_frame:0000000000005557                 db  9Eh
.eh_frame:0000000000005558                 db  0Ah
.eh_frame:0000000000005559                 db  0Eh
.eh_frame:000000000000555A                 db  48h ; H
.eh_frame:000000000000555B                 db  50h ; P
.eh_frame:000000000000555C                 db  0Eh
.eh_frame:000000000000555D                 db  50h ; P
.eh_frame:000000000000555E                 db  6Ah ; j
.eh_frame:000000000000555F                 db  0Bh
.eh_frame:0000000000005560                 db    2
.eh_frame:0000000000005561                 db  4Bh ; K
.eh_frame:0000000000005562                 db  0Ah
.eh_frame:0000000000005563                 db  0Eh
.eh_frame:0000000000005564                 db  38h ; 8
.eh_frame:0000000000005565                 db  44h ; D
.eh_frame:0000000000005566                 db  0Eh
.eh_frame:0000000000005567                 db  30h ; 0
.eh_frame:0000000000005568                 db  41h ; A
.eh_frame:0000000000005569                 db  0Eh
.eh_frame:000000000000556A                 db  28h ; (
.eh_frame:000000000000556B                 db  42h ; B
.eh_frame:000000000000556C                 db  0Eh
.eh_frame:000000000000556D                 db  20h
.eh_frame:000000000000556E                 db  42h ; B
.eh_frame:000000000000556F                 db  0Eh
.eh_frame:0000000000005570                 db  18h
.eh_frame:0000000000005571                 db  42h ; B
.eh_frame:0000000000005572                 db  0Eh
.eh_frame:0000000000005573                 db  10h
.eh_frame:0000000000005574                 db  42h ; B
.eh_frame:0000000000005575                 db  0Eh
.eh_frame:0000000000005576                 db    8
.eh_frame:0000000000005577                 db  41h ; A
.eh_frame:0000000000005578                 db  0Bh
.eh_frame:0000000000005579                 db    0
.eh_frame:000000000000557A                 db    0
.eh_frame:000000000000557B                 db    0
.eh_frame:000000000000557C                 db    0
.eh_frame:000000000000557D                 db    0
.eh_frame:000000000000557E                 db    0
.eh_frame:000000000000557F                 db    0
.eh_frame:0000000000005580                 db  10h
.eh_frame:0000000000005581                 db    0
.eh_frame:0000000000005582                 db    0
.eh_frame:0000000000005583                 db    0
.eh_frame:0000000000005584                 db 0E4h
.eh_frame:0000000000005585                 db    0
.eh_frame:0000000000005586                 db    0
.eh_frame:0000000000005587                 db    0
.eh_frame:0000000000005588                 db 0D8h
.eh_frame:0000000000005589                 db 0C5h
.eh_frame:000000000000558A                 db 0FFh
.eh_frame:000000000000558B                 db 0FFh
.eh_frame:000000000000558C                 db    8
.eh_frame:000000000000558D                 db    0
.eh_frame:000000000000558E                 db    0
.eh_frame:000000000000558F                 db    0
.eh_frame:0000000000005590                 db    0
.eh_frame:0000000000005591                 db    0
.eh_frame:0000000000005592                 db    0
.eh_frame:0000000000005593                 db    0
.eh_frame:0000000000005594                 db  10h
.eh_frame:0000000000005595                 db    0
.eh_frame:0000000000005596                 db    0
.eh_frame:0000000000005597                 db    0
.eh_frame:0000000000005598                 db 0F8h
.eh_frame:0000000000005599                 db    0
.eh_frame:000000000000559A                 db    0
.eh_frame:000000000000559B                 db    0
.eh_frame:000000000000559C                 db 0D4h
.eh_frame:000000000000559D                 db 0C5h
.eh_frame:000000000000559E                 db 0FFh
.eh_frame:000000000000559F                 db 0FFh
.eh_frame:00000000000055A0                 db    8
.eh_frame:00000000000055A1                 db    0
.eh_frame:00000000000055A2                 db    0
.eh_frame:00000000000055A3                 db    0
.eh_frame:00000000000055A4                 db    0
.eh_frame:00000000000055A5                 db    0
.eh_frame:00000000000055A6                 db    0
.eh_frame:00000000000055A7                 db    0
.eh_frame:00000000000055A8                 db  2Ch ; ,
.eh_frame:00000000000055A9                 db    0
.eh_frame:00000000000055AA                 db    0
.eh_frame:00000000000055AB                 db    0
.eh_frame:00000000000055AC                 db  0Ch
.eh_frame:00000000000055AD                 db    1
.eh_frame:00000000000055AE                 db    0
.eh_frame:00000000000055AF                 db    0
.eh_frame:00000000000055B0                 db 0D0h
.eh_frame:00000000000055B1                 db 0C5h
.eh_frame:00000000000055B2                 db 0FFh
.eh_frame:00000000000055B3                 db 0FFh
.eh_frame:00000000000055B4                 db 0A4h
.eh_frame:00000000000055B5                 db    0
.eh_frame:00000000000055B6                 db    0
.eh_frame:00000000000055B7                 db    0
.eh_frame:00000000000055B8                 db    0
.eh_frame:00000000000055B9                 db  41h ; A
.eh_frame:00000000000055BA                 db  0Eh
.eh_frame:00000000000055BB                 db  10h
.eh_frame:00000000000055BC                 db  86h
.eh_frame:00000000000055BD                 db    2
.eh_frame:00000000000055BE                 db  41h ; A
.eh_frame:00000000000055BF                 db  0Eh
.eh_frame:00000000000055C0                 db  18h
.eh_frame:00000000000055C1                 db  83h
.eh_frame:00000000000055C2                 db    3
.eh_frame:00000000000055C3                 db  44h ; D
.eh_frame:00000000000055C4                 db  0Eh
.eh_frame:00000000000055C5                 db  20h
.eh_frame:00000000000055C6                 db  7Ah ; z
.eh_frame:00000000000055C7                 db  0Ah
.eh_frame:00000000000055C8                 db  0Eh
.eh_frame:00000000000055C9                 db  18h
.eh_frame:00000000000055CA                 db  41h ; A
.eh_frame:00000000000055CB                 db  0Eh
.eh_frame:00000000000055CC                 db  10h
.eh_frame:00000000000055CD                 db  41h ; A
.eh_frame:00000000000055CE                 db  0Eh
.eh_frame:00000000000055CF                 db    8
.eh_frame:00000000000055D0                 db  41h ; A
.eh_frame:00000000000055D1                 db  0Bh
.eh_frame:00000000000055D2                 db    0
.eh_frame:00000000000055D3                 db    0
.eh_frame:00000000000055D4                 db    0
.eh_frame:00000000000055D5                 db    0
.eh_frame:00000000000055D6                 db    0
.eh_frame:00000000000055D7                 db    0
.eh_frame:00000000000055D8                 db  1Ch
.eh_frame:00000000000055D9                 db    0
.eh_frame:00000000000055DA                 db    0
.eh_frame:00000000000055DB                 db    0
.eh_frame:00000000000055DC                 db  3Ch ; <
.eh_frame:00000000000055DD                 db    1
.eh_frame:00000000000055DE                 db    0
.eh_frame:00000000000055DF                 db    0
.eh_frame:00000000000055E0                 db  50h ; P
.eh_frame:00000000000055E1                 db 0C6h
.eh_frame:00000000000055E2                 db 0FFh
.eh_frame:00000000000055E3                 db 0FFh
.eh_frame:00000000000055E4                 db  9Fh
.eh_frame:00000000000055E5                 db    0
.eh_frame:00000000000055E6                 db    0
.eh_frame:00000000000055E7                 db    0
.eh_frame:00000000000055E8                 db    0
.eh_frame:00000000000055E9                 db  44h ; D
.eh_frame:00000000000055EA                 db  0Eh
.eh_frame:00000000000055EB                 db  10h
.eh_frame:00000000000055EC                 db  83h
.eh_frame:00000000000055ED                 db    2
.eh_frame:00000000000055EE                 db    2
.eh_frame:00000000000055EF                 db  78h ; x
.eh_frame:00000000000055F0                 db  0Ah
.eh_frame:00000000000055F1                 db  0Eh
.eh_frame:00000000000055F2                 db    8
.eh_frame:00000000000055F3                 db  41h ; A
.eh_frame:00000000000055F4                 db  0Bh
.eh_frame:00000000000055F5                 db    0
.eh_frame:00000000000055F6                 db    0
.eh_frame:00000000000055F7                 db    0
.eh_frame:00000000000055F8                 db  40h ; @
.eh_frame:00000000000055F9                 db    0
.eh_frame:00000000000055FA                 db    0
.eh_frame:00000000000055FB                 db    0
.eh_frame:00000000000055FC                 db  5Ch ; \
.eh_frame:00000000000055FD                 db    1
.eh_frame:00000000000055FE                 db    0
.eh_frame:00000000000055FF                 db    0
.eh_frame:0000000000005600                 db 0D0h
.eh_frame:0000000000005601                 db 0C6h
.eh_frame:0000000000005602                 db 0FFh
.eh_frame:0000000000005603                 db 0FFh
.eh_frame:0000000000005604                 db 0E7h
.eh_frame:0000000000005605                 db    0
.eh_frame:0000000000005606                 db    0
.eh_frame:0000000000005607                 db    0
.eh_frame:0000000000005608                 db    0
.eh_frame:0000000000005609                 db  41h ; A
.eh_frame:000000000000560A                 db  0Eh
.eh_frame:000000000000560B                 db  10h
.eh_frame:000000000000560C                 db  86h
.eh_frame:000000000000560D                 db    2
.eh_frame:000000000000560E                 db  41h ; A
.eh_frame:000000000000560F                 db  0Eh
.eh_frame:0000000000005610                 db  18h
.eh_frame:0000000000005611                 db  83h
.eh_frame:0000000000005612                 db    3
.eh_frame:0000000000005613                 db  49h ; I
.eh_frame:0000000000005614                 db  0Eh
.eh_frame:0000000000005615                 db  20h
.eh_frame:0000000000005616                 db  6Eh ; n
.eh_frame:0000000000005617                 db  0Ah
.eh_frame:0000000000005618                 db  0Eh
.eh_frame:0000000000005619                 db  18h
.eh_frame:000000000000561A                 db  41h ; A
.eh_frame:000000000000561B                 db  0Eh
.eh_frame:000000000000561C                 db  10h
.eh_frame:000000000000561D                 db  41h ; A
.eh_frame:000000000000561E                 db  0Eh
.eh_frame:000000000000561F                 db    8
.eh_frame:0000000000005620                 db  45h ; E
.eh_frame:0000000000005621                 db  0Bh
.eh_frame:0000000000005622                 db    2
.eh_frame:0000000000005623                 db  4Ah ; J
.eh_frame:0000000000005624                 db  0Ah
.eh_frame:0000000000005625                 db  0Eh
.eh_frame:0000000000005626                 db  18h
.eh_frame:0000000000005627                 db  41h ; A
.eh_frame:0000000000005628                 db  0Eh
.eh_frame:0000000000005629                 db  10h
.eh_frame:000000000000562A                 db  41h ; A
.eh_frame:000000000000562B                 db  0Eh
.eh_frame:000000000000562C                 db    8
.eh_frame:000000000000562D                 db  44h ; D
.eh_frame:000000000000562E                 db  0Bh
.eh_frame:000000000000562F                 db    2
.eh_frame:0000000000005630                 db  54h ; T
.eh_frame:0000000000005631                 db  0Eh
.eh_frame:0000000000005632                 db  18h
.eh_frame:0000000000005633                 db  41h ; A
.eh_frame:0000000000005634                 db  0Eh
.eh_frame:0000000000005635                 db  10h
.eh_frame:0000000000005636                 db  41h ; A
.eh_frame:0000000000005637                 db  0Eh
.eh_frame:0000000000005638                 db    8
.eh_frame:0000000000005639                 db    0
.eh_frame:000000000000563A                 db    0
.eh_frame:000000000000563B                 db    0
.eh_frame:000000000000563C                 db  74h ; t
.eh_frame:000000000000563D                 db    0
.eh_frame:000000000000563E                 db    0
.eh_frame:000000000000563F                 db    0
.eh_frame:0000000000005640                 db 0A0h
.eh_frame:0000000000005641                 db    1
.eh_frame:0000000000005642                 db    0
.eh_frame:0000000000005643                 db    0
.eh_frame:0000000000005644                 db  7Ch ; |
.eh_frame:0000000000005645                 db 0C7h
.eh_frame:0000000000005646                 db 0FFh
.eh_frame:0000000000005647                 db 0FFh
.eh_frame:0000000000005648                 db  34h ; 4
.eh_frame:0000000000005649                 db  12h
.eh_frame:000000000000564A                 db    0
.eh_frame:000000000000564B                 db    0
.eh_frame:000000000000564C                 db    0
.eh_frame:000000000000564D                 db  42h ; B
.eh_frame:000000000000564E                 db  0Eh
.eh_frame:000000000000564F                 db  10h
.eh_frame:0000000000005650                 db  8Fh
.eh_frame:0000000000005651                 db    2
.eh_frame:0000000000005652                 db  42h ; B
.eh_frame:0000000000005653                 db  0Eh
.eh_frame:0000000000005654                 db  18h
.eh_frame:0000000000005655                 db  8Eh
.eh_frame:0000000000005656                 db    3
.eh_frame:0000000000005657                 db  45h ; E
.eh_frame:0000000000005658                 db  0Eh
.eh_frame:0000000000005659                 db  20h
.eh_frame:000000000000565A                 db  8Dh
.eh_frame:000000000000565B                 db    4
.eh_frame:000000000000565C                 db  42h ; B
.eh_frame:000000000000565D                 db  0Eh
.eh_frame:000000000000565E                 db  28h ; (
.eh_frame:000000000000565F                 db  8Ch
.eh_frame:0000000000005660                 db    5
.eh_frame:0000000000005661                 db  44h ; D
.eh_frame:0000000000005662                 db  0Eh
.eh_frame:0000000000005663                 db  30h ; 0
.eh_frame:0000000000005664                 db  86h
.eh_frame:0000000000005665                 db    6
.eh_frame:0000000000005666                 db  41h ; A
.eh_frame:0000000000005667                 db  0Eh
.eh_frame:0000000000005668                 db  38h ; 8
.eh_frame:0000000000005669                 db  83h
.eh_frame:000000000000566A                 db    7
.eh_frame:000000000000566B                 db  53h ; S
.eh_frame:000000000000566C                 db  0Eh
.eh_frame:000000000000566D                 db 0F0h
.eh_frame:000000000000566E                 db    1
.eh_frame:000000000000566F                 db    3
.eh_frame:0000000000005670                 db  81h
.eh_frame:0000000000005671                 db  0Bh
.eh_frame:0000000000005672                 db  0Eh
.eh_frame:0000000000005673                 db 0F8h
.eh_frame:0000000000005674                 db    1
.eh_frame:0000000000005675                 db  4Ah ; J
.eh_frame:0000000000005676                 db  0Eh
.eh_frame:0000000000005677                 db  80h
.eh_frame:0000000000005678                 db    2
.eh_frame:0000000000005679                 db  44h ; D
.eh_frame:000000000000567A                 db  0Eh
.eh_frame:000000000000567B                 db  88h
.eh_frame:000000000000567C                 db    2
.eh_frame:000000000000567D                 db  45h ; E
.eh_frame:000000000000567E                 db  0Eh
.eh_frame:000000000000567F                 db  90h
.eh_frame:0000000000005680                 db    2
.eh_frame:0000000000005681                 db  5Fh ; _
.eh_frame:0000000000005682                 db  0Eh
.eh_frame:0000000000005683                 db 0F0h
.eh_frame:0000000000005684                 db    1
.eh_frame:0000000000005685                 db  64h ; d
.eh_frame:0000000000005686                 db  0Ah
.eh_frame:0000000000005687                 db  0Eh
.eh_frame:0000000000005688                 db  38h ; 8
.eh_frame:0000000000005689                 db  41h ; A
.eh_frame:000000000000568A                 db  0Eh
.eh_frame:000000000000568B                 db  30h ; 0
.eh_frame:000000000000568C                 db  41h ; A
.eh_frame:000000000000568D                 db  0Eh
.eh_frame:000000000000568E                 db  28h ; (
.eh_frame:000000000000568F                 db  42h ; B
.eh_frame:0000000000005690                 db  0Eh
.eh_frame:0000000000005691                 db  20h
.eh_frame:0000000000005692                 db  42h ; B
.eh_frame:0000000000005693                 db  0Eh
.eh_frame:0000000000005694                 db  18h
.eh_frame:0000000000005695                 db  42h ; B
.eh_frame:0000000000005696                 db  0Eh
.eh_frame:0000000000005697                 db  10h
.eh_frame:0000000000005698                 db  42h ; B
.eh_frame:0000000000005699                 db  0Eh
.eh_frame:000000000000569A                 db    8
.eh_frame:000000000000569B                 db  44h ; D
.eh_frame:000000000000569C                 db  0Bh
.eh_frame:000000000000569D                 db    3
.eh_frame:000000000000569E                 db  99h
.eh_frame:000000000000569F                 db    5
.eh_frame:00000000000056A0                 db  0Eh
.eh_frame:00000000000056A1                 db 0F8h
.eh_frame:00000000000056A2                 db    1
.eh_frame:00000000000056A3                 db  4Dh ; M
.eh_frame:00000000000056A4                 db  0Eh
.eh_frame:00000000000056A5                 db  80h
.eh_frame:00000000000056A6                 db    2
.eh_frame:00000000000056A7                 db  44h ; D
.eh_frame:00000000000056A8                 db  0Eh
.eh_frame:00000000000056A9                 db  88h
.eh_frame:00000000000056AA                 db    2
.eh_frame:00000000000056AB                 db  47h ; G
.eh_frame:00000000000056AC                 db  0Eh
.eh_frame:00000000000056AD                 db  90h
.eh_frame:00000000000056AE                 db    2
.eh_frame:00000000000056AF                 db  5Bh ; [
.eh_frame:00000000000056B0                 db  0Eh
.eh_frame:00000000000056B1                 db 0F0h
.eh_frame:00000000000056B2                 db    1
.eh_frame:00000000000056B3                 db    0
.eh_frame:00000000000056B4                 db  68h ; h
.eh_frame:00000000000056B5                 db    0
.eh_frame:00000000000056B6                 db    0
.eh_frame:00000000000056B7                 db    0
.eh_frame:00000000000056B8                 db  18h
.eh_frame:00000000000056B9                 db    2
.eh_frame:00000000000056BA                 db    0
.eh_frame:00000000000056BB                 db    0
.eh_frame:00000000000056BC                 db  44h ; D
.eh_frame:00000000000056BD                 db 0D9h
.eh_frame:00000000000056BE                 db 0FFh
.eh_frame:00000000000056BF                 db 0FFh
.eh_frame:00000000000056C0                 db 0ABh
.eh_frame:00000000000056C1                 db    1
.eh_frame:00000000000056C2                 db    0
.eh_frame:00000000000056C3                 db    0
.eh_frame:00000000000056C4                 db    0
.eh_frame:00000000000056C5                 db  42h ; B
.eh_frame:00000000000056C6                 db  0Eh
.eh_frame:00000000000056C7                 db  10h
.eh_frame:00000000000056C8                 db  8Fh
.eh_frame:00000000000056C9                 db    2
.eh_frame:00000000000056CA                 db  42h ; B
.eh_frame:00000000000056CB                 db  0Eh
.eh_frame:00000000000056CC                 db  18h
.eh_frame:00000000000056CD                 db  8Eh
.eh_frame:00000000000056CE                 db    3
.eh_frame:00000000000056CF                 db  45h ; E
.eh_frame:00000000000056D0                 db  0Eh
.eh_frame:00000000000056D1                 db  20h
.eh_frame:00000000000056D2                 db  8Dh
.eh_frame:00000000000056D3                 db    4
.eh_frame:00000000000056D4                 db  42h ; B
.eh_frame:00000000000056D5                 db  0Eh
.eh_frame:00000000000056D6                 db  28h ; (
.eh_frame:00000000000056D7                 db  8Ch
.eh_frame:00000000000056D8                 db    5
.eh_frame:00000000000056D9                 db  44h ; D
.eh_frame:00000000000056DA                 db  0Eh
.eh_frame:00000000000056DB                 db  30h ; 0
.eh_frame:00000000000056DC                 db  86h
.eh_frame:00000000000056DD                 db    6
.eh_frame:00000000000056DE                 db  41h ; A
.eh_frame:00000000000056DF                 db  0Eh
.eh_frame:00000000000056E0                 db  38h ; 8
.eh_frame:00000000000056E1                 db  83h
.eh_frame:00000000000056E2                 db    7
.eh_frame:00000000000056E3                 db  47h ; G
.eh_frame:00000000000056E4                 db  0Eh
.eh_frame:00000000000056E5                 db  60h ; `
.eh_frame:00000000000056E6                 db    2
.eh_frame:00000000000056E7                 db  99h
.eh_frame:00000000000056E8                 db  0Eh
.eh_frame:00000000000056E9                 db  68h ; h
.eh_frame:00000000000056EA                 db  5Fh ; _
.eh_frame:00000000000056EB                 db  0Eh
.eh_frame:00000000000056EC                 db  70h ; p
.eh_frame:00000000000056ED                 db  46h ; F
.eh_frame:00000000000056EE                 db  0Eh
.eh_frame:00000000000056EF                 db  78h ; x
.eh_frame:00000000000056F0                 db  42h ; B
.eh_frame:00000000000056F1                 db  0Eh
.eh_frame:00000000000056F2                 db  80h
.eh_frame:00000000000056F3                 db    1
.eh_frame:00000000000056F4                 db  59h ; Y
.eh_frame:00000000000056F5                 db  0Eh
.eh_frame:00000000000056F6                 db  60h ; `
.eh_frame:00000000000056F7                 db    2
.eh_frame:00000000000056F8                 db  40h ; @
.eh_frame:00000000000056F9                 db  0Eh
.eh_frame:00000000000056FA                 db  68h ; h
.eh_frame:00000000000056FB                 db  4Bh ; K
.eh_frame:00000000000056FC                 db  0Eh
.eh_frame:00000000000056FD                 db  70h ; p
.eh_frame:00000000000056FE                 db  43h ; C
.eh_frame:00000000000056FF                 db  0Eh
.eh_frame:0000000000005700                 db  78h ; x
.eh_frame:0000000000005701                 db  45h ; E
.eh_frame:0000000000005702                 db  0Eh
.eh_frame:0000000000005703                 db  80h
.eh_frame:0000000000005704                 db    1
.eh_frame:0000000000005705                 db  5Eh ; ^
.eh_frame:0000000000005706                 db  0Eh
.eh_frame:0000000000005707                 db  60h ; `
.eh_frame:0000000000005708                 db  4Ch ; L
.eh_frame:0000000000005709                 db  0Ah
.eh_frame:000000000000570A                 db  0Eh
.eh_frame:000000000000570B                 db  38h ; 8
.eh_frame:000000000000570C                 db  44h ; D
.eh_frame:000000000000570D                 db  0Eh
.eh_frame:000000000000570E                 db  30h ; 0
.eh_frame:000000000000570F                 db  41h ; A
.eh_frame:0000000000005710                 db  0Eh
.eh_frame:0000000000005711                 db  28h ; (
.eh_frame:0000000000005712                 db  42h ; B
.eh_frame:0000000000005713                 db  0Eh
.eh_frame:0000000000005714                 db  20h
.eh_frame:0000000000005715                 db  42h ; B
.eh_frame:0000000000005716                 db  0Eh
.eh_frame:0000000000005717                 db  18h
.eh_frame:0000000000005718                 db  42h ; B
.eh_frame:0000000000005719                 db  0Eh
.eh_frame:000000000000571A                 db  10h
.eh_frame:000000000000571B                 db  42h ; B
.eh_frame:000000000000571C                 db  0Eh
.eh_frame:000000000000571D                 db    8
.eh_frame:000000000000571E                 db  46h ; F
.eh_frame:000000000000571F                 db  0Bh
.eh_frame:0000000000005720                 db  28h ; (
.eh_frame:0000000000005721                 db    0
.eh_frame:0000000000005722                 db    0
.eh_frame:0000000000005723                 db    0
.eh_frame:0000000000005724                 db  84h
.eh_frame:0000000000005725                 db    2
.eh_frame:0000000000005726                 db    0
.eh_frame:0000000000005727                 db    0
.eh_frame:0000000000005728                 db  88h
.eh_frame:0000000000005729                 db 0DAh
.eh_frame:000000000000572A                 db 0FFh
.eh_frame:000000000000572B                 db 0FFh
.eh_frame:000000000000572C                 db  36h ; 6
.eh_frame:000000000000572D                 db    0
.eh_frame:000000000000572E                 db    0
.eh_frame:000000000000572F                 db    0
.eh_frame:0000000000005730                 db    0
.eh_frame:0000000000005731                 db  42h ; B
.eh_frame:0000000000005732                 db  0Eh
.eh_frame:0000000000005733                 db  10h
.eh_frame:0000000000005734                 db  8Ch
.eh_frame:0000000000005735                 db    2
.eh_frame:0000000000005736                 db  41h ; A
.eh_frame:0000000000005737                 db  0Eh
.eh_frame:0000000000005738                 db  18h
.eh_frame:0000000000005739                 db  86h
.eh_frame:000000000000573A                 db    3
.eh_frame:000000000000573B                 db  41h ; A
.eh_frame:000000000000573C                 db  0Eh
.eh_frame:000000000000573D                 db  20h
.eh_frame:000000000000573E                 db  83h
.eh_frame:000000000000573F                 db    4
.eh_frame:0000000000005740                 db  6Eh ; n
.eh_frame:0000000000005741                 db  0Eh
.eh_frame:0000000000005742                 db  18h
.eh_frame:0000000000005743                 db  41h ; A
.eh_frame:0000000000005744                 db  0Eh
.eh_frame:0000000000005745                 db  10h
.eh_frame:0000000000005746                 db  42h ; B
.eh_frame:0000000000005747                 db  0Eh
.eh_frame:0000000000005748                 db    8
.eh_frame:0000000000005749                 db    0
.eh_frame:000000000000574A                 db    0
.eh_frame:000000000000574B                 db    0
.eh_frame:000000000000574C                 db  10h
.eh_frame:000000000000574D                 db    0
.eh_frame:000000000000574E                 db    0
.eh_frame:000000000000574F                 db    0
.eh_frame:0000000000005750                 db 0B0h
.eh_frame:0000000000005751                 db    2
.eh_frame:0000000000005752                 db    0
.eh_frame:0000000000005753                 db    0
.eh_frame:0000000000005754                 db  9Ch
.eh_frame:0000000000005755                 db 0DAh
.eh_frame:0000000000005756                 db 0FFh
.eh_frame:0000000000005757                 db 0FFh
.eh_frame:0000000000005758                 db  11h
.eh_frame:0000000000005759                 db    0
.eh_frame:000000000000575A                 db    0
.eh_frame:000000000000575B                 db    0
.eh_frame:000000000000575C                 db    0
.eh_frame:000000000000575D                 db    0
.eh_frame:000000000000575E                 db    0
.eh_frame:000000000000575F                 db    0
.eh_frame:0000000000005760                 db  10h
.eh_frame:0000000000005761                 db    0
.eh_frame:0000000000005762                 db    0
.eh_frame:0000000000005763                 db    0
.eh_frame:0000000000005764                 db 0C4h
.eh_frame:0000000000005765                 db    2
.eh_frame:0000000000005766                 db    0
.eh_frame:0000000000005767                 db    0
.eh_frame:0000000000005768                 db 0A8h
.eh_frame:0000000000005769                 db 0DAh
.eh_frame:000000000000576A                 db 0FFh
.eh_frame:000000000000576B                 db 0FFh
.eh_frame:000000000000576C                 db  11h
.eh_frame:000000000000576D                 db    0
.eh_frame:000000000000576E                 db    0
.eh_frame:000000000000576F                 db    0
.eh_frame:0000000000005770                 db    0
.eh_frame:0000000000005771                 db    0
.eh_frame:0000000000005772                 db    0
.eh_frame:0000000000005773                 db    0
.eh_frame:0000000000005774                 db  10h
.eh_frame:0000000000005775                 db    0
.eh_frame:0000000000005776                 db    0
.eh_frame:0000000000005777                 db    0
.eh_frame:0000000000005778                 db 0D8h
.eh_frame:0000000000005779                 db    2
.eh_frame:000000000000577A                 db    0
.eh_frame:000000000000577B                 db    0
.eh_frame:000000000000577C                 db 0B4h
.eh_frame:000000000000577D                 db 0DAh
.eh_frame:000000000000577E                 db 0FFh
.eh_frame:000000000000577F                 db 0FFh
.eh_frame:0000000000005780                 db  35h ; 5
.eh_frame:0000000000005781                 db    0
.eh_frame:0000000000005782                 db    0
.eh_frame:0000000000005783                 db    0
.eh_frame:0000000000005784                 db    0
.eh_frame:0000000000005785                 db    0
.eh_frame:0000000000005786                 db    0
.eh_frame:0000000000005787                 db    0
.eh_frame:0000000000005788                 db  10h
.eh_frame:0000000000005789                 db    0
.eh_frame:000000000000578A                 db    0
.eh_frame:000000000000578B                 db    0
.eh_frame:000000000000578C                 db 0ECh
.eh_frame:000000000000578D                 db    2
.eh_frame:000000000000578E                 db    0
.eh_frame:000000000000578F                 db    0
.eh_frame:0000000000005790                 db 0E0h
.eh_frame:0000000000005791                 db 0DAh
.eh_frame:0000000000005792                 db 0FFh
.eh_frame:0000000000005793                 db 0FFh
.eh_frame:0000000000005794                 db  15h
.eh_frame:0000000000005795                 db    0
.eh_frame:0000000000005796                 db    0
.eh_frame:0000000000005797                 db    0
.eh_frame:0000000000005798                 db    0
.eh_frame:0000000000005799                 db    0
.eh_frame:000000000000579A                 db    0
.eh_frame:000000000000579B                 db    0
.eh_frame:000000000000579C                 db  10h
.eh_frame:000000000000579D                 db    0
.eh_frame:000000000000579E                 db    0
.eh_frame:000000000000579F                 db    0
.eh_frame:00000000000057A0                 db    0
.eh_frame:00000000000057A1                 db    3
.eh_frame:00000000000057A2                 db    0
.eh_frame:00000000000057A3                 db    0
.eh_frame:00000000000057A4                 db 0ECh
.eh_frame:00000000000057A5                 db 0DAh
.eh_frame:00000000000057A6                 db 0FFh
.eh_frame:00000000000057A7                 db 0FFh
.eh_frame:00000000000057A8                 db  30h ; 0
.eh_frame:00000000000057A9                 db    0
.eh_frame:00000000000057AA                 db    0
.eh_frame:00000000000057AB                 db    0
.eh_frame:00000000000057AC                 db    0
.eh_frame:00000000000057AD                 db  6Bh ; k
.eh_frame:00000000000057AE                 db  0Eh
.eh_frame:00000000000057AF                 db  10h
.eh_frame:00000000000057B0                 db  50h ; P
.eh_frame:00000000000057B1                 db    0
.eh_frame:00000000000057B2                 db    0
.eh_frame:00000000000057B3                 db    0
.eh_frame:00000000000057B4                 db  14h
.eh_frame:00000000000057B5                 db    3
.eh_frame:00000000000057B6                 db    0
.eh_frame:00000000000057B7                 db    0
.eh_frame:00000000000057B8                 db    8
.eh_frame:00000000000057B9                 db 0DBh
.eh_frame:00000000000057BA                 db 0FFh
.eh_frame:00000000000057BB                 db 0FFh
.eh_frame:00000000000057BC                 db  74h ; t
.eh_frame:00000000000057BD                 db    0
.eh_frame:00000000000057BE                 db    0
.eh_frame:00000000000057BF                 db    0
.eh_frame:00000000000057C0                 db    0
.eh_frame:00000000000057C1                 db  42h ; B
.eh_frame:00000000000057C2                 db  0Eh
.eh_frame:00000000000057C3                 db  10h
.eh_frame:00000000000057C4                 db  8Fh
.eh_frame:00000000000057C5                 db    2
.eh_frame:00000000000057C6                 db  42h ; B
.eh_frame:00000000000057C7                 db  0Eh
.eh_frame:00000000000057C8                 db  18h
.eh_frame:00000000000057C9                 db  8Eh
.eh_frame:00000000000057CA                 db    3
.eh_frame:00000000000057CB                 db  49h ; I
.eh_frame:00000000000057CC                 db  0Eh
.eh_frame:00000000000057CD                 db  20h
.eh_frame:00000000000057CE                 db  8Dh
.eh_frame:00000000000057CF                 db    4
.eh_frame:00000000000057D0                 db  42h ; B
.eh_frame:00000000000057D1                 db  0Eh
.eh_frame:00000000000057D2                 db  28h ; (
.eh_frame:00000000000057D3                 db  8Ch
.eh_frame:00000000000057D4                 db    5
.eh_frame:00000000000057D5                 db  44h ; D
.eh_frame:00000000000057D6                 db  0Eh
.eh_frame:00000000000057D7                 db  30h ; 0
.eh_frame:00000000000057D8                 db  86h
.eh_frame:00000000000057D9                 db    6
.eh_frame:00000000000057DA                 db  41h ; A
.eh_frame:00000000000057DB                 db  0Eh
.eh_frame:00000000000057DC                 db  38h ; 8
.eh_frame:00000000000057DD                 db  83h
.eh_frame:00000000000057DE                 db    7
.eh_frame:00000000000057DF                 db  4Dh ; M
.eh_frame:00000000000057E0                 db  0Eh
.eh_frame:00000000000057E1                 db  50h ; P
.eh_frame:00000000000057E2                 db  5Fh ; _
.eh_frame:00000000000057E3                 db  0Eh
.eh_frame:00000000000057E4                 db  58h ; X
.eh_frame:00000000000057E5                 db  47h ; G
.eh_frame:00000000000057E6                 db  0Eh
.eh_frame:00000000000057E7                 db  60h ; `
.eh_frame:00000000000057E8                 db  46h ; F
.eh_frame:00000000000057E9                 db  0Eh
.eh_frame:00000000000057EA                 db  68h ; h
.eh_frame:00000000000057EB                 db  44h ; D
.eh_frame:00000000000057EC                 db  0Eh
.eh_frame:00000000000057ED                 db  70h ; p
.eh_frame:00000000000057EE                 db  58h ; X
.eh_frame:00000000000057EF                 db  0Eh
.eh_frame:00000000000057F0                 db  38h ; 8
.eh_frame:00000000000057F1                 db  41h ; A
.eh_frame:00000000000057F2                 db  0Eh
.eh_frame:00000000000057F3                 db  30h ; 0
.eh_frame:00000000000057F4                 db  41h ; A
.eh_frame:00000000000057F5                 db  0Eh
.eh_frame:00000000000057F6                 db  28h ; (
.eh_frame:00000000000057F7                 db  42h ; B
.eh_frame:00000000000057F8                 db  0Eh
.eh_frame:00000000000057F9                 db  20h
.eh_frame:00000000000057FA                 db  42h ; B
.eh_frame:00000000000057FB                 db  0Eh
.eh_frame:00000000000057FC                 db  18h
.eh_frame:00000000000057FD                 db  42h ; B
.eh_frame:00000000000057FE                 db  0Eh
.eh_frame:00000000000057FF                 db  10h
.eh_frame:0000000000005800                 db  42h ; B
.eh_frame:0000000000005801                 db  0Eh
.eh_frame:0000000000005802                 db    8
.eh_frame:0000000000005803                 db    0
.eh_frame:0000000000005804                 db  68h ; h
.eh_frame:0000000000005805                 db    0
.eh_frame:0000000000005806                 db    0
.eh_frame:0000000000005807                 db    0
.eh_frame:0000000000005808                 db  68h ; h
.eh_frame:0000000000005809                 db    3
.eh_frame:000000000000580A                 db    0
.eh_frame:000000000000580B                 db    0
.eh_frame:000000000000580C                 db  34h ; 4
.eh_frame:000000000000580D                 db 0DBh
.eh_frame:000000000000580E                 db 0FFh
.eh_frame:000000000000580F                 db 0FFh
.eh_frame:0000000000005810                 db 0E3h
.eh_frame:0000000000005811                 db    0
.eh_frame:0000000000005812                 db    0
.eh_frame:0000000000005813                 db    0
.eh_frame:0000000000005814                 db    0
.eh_frame:0000000000005815                 db  42h ; B
.eh_frame:0000000000005816                 db  0Eh
.eh_frame:0000000000005817                 db  10h
.eh_frame:0000000000005818                 db  8Fh
.eh_frame:0000000000005819                 db    2
.eh_frame:000000000000581A                 db  42h ; B
.eh_frame:000000000000581B                 db  0Eh
.eh_frame:000000000000581C                 db  18h
.eh_frame:000000000000581D                 db  8Eh
.eh_frame:000000000000581E                 db    3
.eh_frame:000000000000581F                 db  49h ; I
.eh_frame:0000000000005820                 db  0Eh
.eh_frame:0000000000005821                 db  20h
.eh_frame:0000000000005822                 db  8Dh
.eh_frame:0000000000005823                 db    4
.eh_frame:0000000000005824                 db  42h ; B
.eh_frame:0000000000005825                 db  0Eh
.eh_frame:0000000000005826                 db  28h ; (
.eh_frame:0000000000005827                 db  8Ch
.eh_frame:0000000000005828                 db    5
.eh_frame:0000000000005829                 db  44h ; D
.eh_frame:000000000000582A                 db  0Eh
.eh_frame:000000000000582B                 db  30h ; 0
.eh_frame:000000000000582C                 db  86h
.eh_frame:000000000000582D                 db    6
.eh_frame:000000000000582E                 db  41h ; A
.eh_frame:000000000000582F                 db  0Eh
.eh_frame:0000000000005830                 db  38h ; 8
.eh_frame:0000000000005831                 db  83h
.eh_frame:0000000000005832                 db    7
.eh_frame:0000000000005833                 db  4Dh ; M
.eh_frame:0000000000005834                 db  0Eh
.eh_frame:0000000000005835                 db  70h ; p
.eh_frame:0000000000005836                 db  65h ; e
.eh_frame:0000000000005837                 db  0Eh
.eh_frame:0000000000005838                 db  78h ; x
.eh_frame:0000000000005839                 db  4Dh ; M
.eh_frame:000000000000583A                 db  0Eh
.eh_frame:000000000000583B                 db  80h
.eh_frame:000000000000583C                 db    1
.eh_frame:000000000000583D                 db  46h ; F
.eh_frame:000000000000583E                 db  0Eh
.eh_frame:000000000000583F                 db  88h
.eh_frame:0000000000005840                 db    1
.eh_frame:0000000000005841                 db  42h ; B
.eh_frame:0000000000005842                 db  0Eh
.eh_frame:0000000000005843                 db  90h
.eh_frame:0000000000005844                 db    1
.eh_frame:0000000000005845                 db  5Eh ; ^
.eh_frame:0000000000005846                 db  0Eh
.eh_frame:0000000000005847                 db  70h ; p
.eh_frame:0000000000005848                 db  56h ; V
.eh_frame:0000000000005849                 db  0Eh
.eh_frame:000000000000584A                 db  78h ; x
.eh_frame:000000000000584B                 db  43h ; C
.eh_frame:000000000000584C                 db  0Eh
.eh_frame:000000000000584D                 db  80h
.eh_frame:000000000000584E                 db    1
.eh_frame:000000000000584F                 db  43h ; C
.eh_frame:0000000000005850                 db  0Eh
.eh_frame:0000000000005851                 db  88h
.eh_frame:0000000000005852                 db    1
.eh_frame:0000000000005853                 db  56h ; V
.eh_frame:0000000000005854                 db  0Eh
.eh_frame:0000000000005855                 db  90h
.eh_frame:0000000000005856                 db    1
.eh_frame:0000000000005857                 db  52h ; R
.eh_frame:0000000000005858                 db  0Eh
.eh_frame:0000000000005859                 db  70h ; p
.eh_frame:000000000000585A                 db  5Bh ; [
.eh_frame:000000000000585B                 db  0Eh
.eh_frame:000000000000585C                 db  38h ; 8
.eh_frame:000000000000585D                 db  41h ; A
.eh_frame:000000000000585E                 db  0Eh
.eh_frame:000000000000585F                 db  30h ; 0
.eh_frame:0000000000005860                 db  41h ; A
.eh_frame:0000000000005861                 db  0Eh
.eh_frame:0000000000005862                 db  28h ; (
.eh_frame:0000000000005863                 db  42h ; B
.eh_frame:0000000000005864                 db  0Eh
.eh_frame:0000000000005865                 db  20h
.eh_frame:0000000000005866                 db  42h ; B
.eh_frame:0000000000005867                 db  0Eh
.eh_frame:0000000000005868                 db  18h
.eh_frame:0000000000005869                 db  42h ; B
.eh_frame:000000000000586A                 db  0Eh
.eh_frame:000000000000586B                 db  10h
.eh_frame:000000000000586C                 db  42h ; B
.eh_frame:000000000000586D                 db  0Eh
.eh_frame:000000000000586E                 db    8
.eh_frame:000000000000586F                 db    0
.eh_frame:0000000000005870                 db  10h
.eh_frame:0000000000005871                 db    0
.eh_frame:0000000000005872                 db    0
.eh_frame:0000000000005873                 db    0
.eh_frame:0000000000005874                 db 0D4h
.eh_frame:0000000000005875                 db    3
.eh_frame:0000000000005876                 db    0
.eh_frame:0000000000005877                 db    0
.eh_frame:0000000000005878                 db 0B8h
.eh_frame:0000000000005879                 db 0DBh
.eh_frame:000000000000587A                 db 0FFh
.eh_frame:000000000000587B                 db 0FFh
.eh_frame:000000000000587C                 db  0Ah
.eh_frame:000000000000587D                 db    0
.eh_frame:000000000000587E                 db    0
.eh_frame:000000000000587F                 db    0
.eh_frame:0000000000005880                 db    0
.eh_frame:0000000000005881                 db    0
.eh_frame:0000000000005882                 db    0
.eh_frame:0000000000005883                 db    0
.eh_frame:0000000000005884                 db  28h ; (
.eh_frame:0000000000005885                 db    0
.eh_frame:0000000000005886                 db    0
.eh_frame:0000000000005887                 db    0
.eh_frame:0000000000005888                 db 0E8h
.eh_frame:0000000000005889                 db    3
.eh_frame:000000000000588A                 db    0
.eh_frame:000000000000588B                 db    0
.eh_frame:000000000000588C                 db 0B4h
.eh_frame:000000000000588D                 db 0DBh
.eh_frame:000000000000588E                 db 0FFh
.eh_frame:000000000000588F                 db 0FFh
.eh_frame:0000000000005890                 db  93h
.eh_frame:0000000000005891                 db    0
.eh_frame:0000000000005892                 db    0
.eh_frame:0000000000005893                 db    0
.eh_frame:0000000000005894                 db    0
.eh_frame:0000000000005895                 db  48h ; H
.eh_frame:0000000000005896                 db  0Eh
.eh_frame:0000000000005897                 db  10h
.eh_frame:0000000000005898                 db  8Ch
.eh_frame:0000000000005899                 db    2
.eh_frame:000000000000589A                 db  48h ; H
.eh_frame:000000000000589B                 db  0Eh
.eh_frame:000000000000589C                 db  18h
.eh_frame:000000000000589D                 db  86h
.eh_frame:000000000000589E                 db    3
.eh_frame:000000000000589F                 db  41h ; A
.eh_frame:00000000000058A0                 db  0Eh
.eh_frame:00000000000058A1                 db  20h
.eh_frame:00000000000058A2                 db  83h
.eh_frame:00000000000058A3                 db    4
.eh_frame:00000000000058A4                 db    2
.eh_frame:00000000000058A5                 db  74h ; t
.eh_frame:00000000000058A6                 db  0Eh
.eh_frame:00000000000058A7                 db  18h
.eh_frame:00000000000058A8                 db  4Bh ; K
.eh_frame:00000000000058A9                 db  0Eh
.eh_frame:00000000000058AA                 db  10h
.eh_frame:00000000000058AB                 db  42h ; B
.eh_frame:00000000000058AC                 db  0Eh
.eh_frame:00000000000058AD                 db    8
.eh_frame:00000000000058AE                 db    0
.eh_frame:00000000000058AF                 db    0
.eh_frame:00000000000058B0                 db  10h
.eh_frame:00000000000058B1                 db    0
.eh_frame:00000000000058B2                 db    0
.eh_frame:00000000000058B3                 db    0
.eh_frame:00000000000058B4                 db  14h
.eh_frame:00000000000058B5                 db    4
.eh_frame:00000000000058B6                 db    0
.eh_frame:00000000000058B7                 db    0
.eh_frame:00000000000058B8                 db  28h ; (
.eh_frame:00000000000058B9                 db 0DCh
.eh_frame:00000000000058BA                 db 0FFh
.eh_frame:00000000000058BB                 db 0FFh
.eh_frame:00000000000058BC                 db  13h
.eh_frame:00000000000058BD                 db    0
.eh_frame:00000000000058BE                 db    0
.eh_frame:00000000000058BF                 db    0
.eh_frame:00000000000058C0                 db    0
.eh_frame:00000000000058C1                 db    0
.eh_frame:00000000000058C2                 db    0
.eh_frame:00000000000058C3                 db    0
.eh_frame:00000000000058C4                 db  10h
.eh_frame:00000000000058C5                 db    0
.eh_frame:00000000000058C6                 db    0
.eh_frame:00000000000058C7                 db    0
.eh_frame:00000000000058C8                 db  28h ; (
.eh_frame:00000000000058C9                 db    4
.eh_frame:00000000000058CA                 db    0
.eh_frame:00000000000058CB                 db    0
.eh_frame:00000000000058CC                 db  34h ; 4
.eh_frame:00000000000058CD                 db 0DCh
.eh_frame:00000000000058CE                 db 0FFh
.eh_frame:00000000000058CF                 db 0FFh
.eh_frame:00000000000058D0                 db  0Ch
.eh_frame:00000000000058D1                 db    0
.eh_frame:00000000000058D2                 db    0
.eh_frame:00000000000058D3                 db    0
.eh_frame:00000000000058D4                 db    0
.eh_frame:00000000000058D5                 db    0
.eh_frame:00000000000058D6                 db    0
.eh_frame:00000000000058D7                 db    0
.eh_frame:00000000000058D8                 db  10h
.eh_frame:00000000000058D9                 db    0
.eh_frame:00000000000058DA                 db    0
.eh_frame:00000000000058DB                 db    0
.eh_frame:00000000000058DC                 db  3Ch ; <
.eh_frame:00000000000058DD                 db    4
.eh_frame:00000000000058DE                 db    0
.eh_frame:00000000000058DF                 db    0
.eh_frame:00000000000058E0                 db  30h ; 0
.eh_frame:00000000000058E1                 db 0DCh
.eh_frame:00000000000058E2                 db 0FFh
.eh_frame:00000000000058E3                 db 0FFh
.eh_frame:00000000000058E4                 db  18h
.eh_frame:00000000000058E5                 db    0
.eh_frame:00000000000058E6                 db    0
.eh_frame:00000000000058E7                 db    0
.eh_frame:00000000000058E8                 db    0
.eh_frame:00000000000058E9                 db    0
.eh_frame:00000000000058EA                 db    0
.eh_frame:00000000000058EB                 db    0
.eh_frame:00000000000058EC                 db  10h
.eh_frame:00000000000058ED                 db    0
.eh_frame:00000000000058EE                 db    0
.eh_frame:00000000000058EF                 db    0
.eh_frame:00000000000058F0                 db  50h ; P
.eh_frame:00000000000058F1                 db    4
.eh_frame:00000000000058F2                 db    0
.eh_frame:00000000000058F3                 db    0
.eh_frame:00000000000058F4                 db  3Ch ; <
.eh_frame:00000000000058F5                 db 0DCh
.eh_frame:00000000000058F6                 db 0FFh
.eh_frame:00000000000058F7                 db 0FFh
.eh_frame:00000000000058F8                 db  14h
.eh_frame:00000000000058F9                 db    0
.eh_frame:00000000000058FA                 db    0
.eh_frame:00000000000058FB                 db    0
.eh_frame:00000000000058FC                 db    0
.eh_frame:00000000000058FD                 db    0
.eh_frame:00000000000058FE                 db    0
.eh_frame:00000000000058FF                 db    0
.eh_frame:0000000000005900                 db  18h
.eh_frame:0000000000005901                 db    0
.eh_frame:0000000000005902                 db    0
.eh_frame:0000000000005903                 db    0
.eh_frame:0000000000005904                 db  64h ; d
.eh_frame:0000000000005905                 db    4
.eh_frame:0000000000005906                 db    0
.eh_frame:0000000000005907                 db    0
.eh_frame:0000000000005908                 db  48h ; H
.eh_frame:0000000000005909                 db 0DCh
.eh_frame:000000000000590A                 db 0FFh
.eh_frame:000000000000590B                 db 0FFh
.eh_frame:000000000000590C                 db  8Eh
.eh_frame:000000000000590D                 db    0
.eh_frame:000000000000590E                 db    0
.eh_frame:000000000000590F                 db    0
.eh_frame:0000000000005910                 db    0
.eh_frame:0000000000005911                 db  44h ; D
.eh_frame:0000000000005912                 db  0Eh
.eh_frame:0000000000005913                 db  50h ; P
.eh_frame:0000000000005914                 db    2
.eh_frame:0000000000005915                 db  7Fh ; 
.eh_frame:0000000000005916                 db  0Ah
.eh_frame:0000000000005917                 db  0Eh
.eh_frame:0000000000005918                 db    8
.eh_frame:0000000000005919                 db  41h ; A
.eh_frame:000000000000591A                 db  0Bh
.eh_frame:000000000000591B                 db    0
.eh_frame:000000000000591C                 db  18h
.eh_frame:000000000000591D                 db    0
.eh_frame:000000000000591E                 db    0
.eh_frame:000000000000591F                 db    0
.eh_frame:0000000000005920                 db  80h
.eh_frame:0000000000005921                 db    4
.eh_frame:0000000000005922                 db    0
.eh_frame:0000000000005923                 db    0
.eh_frame:0000000000005924                 db 0BCh
.eh_frame:0000000000005925                 db 0DCh
.eh_frame:0000000000005926                 db 0FFh
.eh_frame:0000000000005927                 db 0FFh
.eh_frame:0000000000005928                 db  8Ah
.eh_frame:0000000000005929                 db    0
.eh_frame:000000000000592A                 db    0
.eh_frame:000000000000592B                 db    0
.eh_frame:000000000000592C                 db    0
.eh_frame:000000000000592D                 db  44h ; D
.eh_frame:000000000000592E                 db  0Eh
.eh_frame:000000000000592F                 db  50h ; P
.eh_frame:0000000000005930                 db    2
.eh_frame:0000000000005931                 db  7Bh ; {
.eh_frame:0000000000005932                 db  0Ah
.eh_frame:0000000000005933                 db  0Eh
.eh_frame:0000000000005934                 db    8
.eh_frame:0000000000005935                 db  41h ; A
.eh_frame:0000000000005936                 db  0Bh
.eh_frame:0000000000005937                 db    0
.eh_frame:0000000000005938                 db  10h
.eh_frame:0000000000005939                 db    0
.eh_frame:000000000000593A                 db    0
.eh_frame:000000000000593B                 db    0
.eh_frame:000000000000593C                 db  9Ch
.eh_frame:000000000000593D                 db    4
.eh_frame:000000000000593E                 db    0
.eh_frame:000000000000593F                 db    0
.eh_frame:0000000000005940                 db  30h ; 0
.eh_frame:0000000000005941                 db 0DDh
.eh_frame:0000000000005942                 db 0FFh
.eh_frame:0000000000005943                 db 0FFh
.eh_frame:0000000000005944                 db  0Ch
.eh_frame:0000000000005945                 db    0
.eh_frame:0000000000005946                 db    0
.eh_frame:0000000000005947                 db    0
.eh_frame:0000000000005948                 db    0
.eh_frame:0000000000005949                 db    0
.eh_frame:000000000000594A                 db    0
.eh_frame:000000000000594B                 db    0
.eh_frame:000000000000594C                 db  10h
.eh_frame:000000000000594D                 db    0
.eh_frame:000000000000594E                 db    0
.eh_frame:000000000000594F                 db    0
.eh_frame:0000000000005950                 db 0B0h
.eh_frame:0000000000005951                 db    4
.eh_frame:0000000000005952                 db    0
.eh_frame:0000000000005953                 db    0
.eh_frame:0000000000005954                 db  2Ch ; ,
.eh_frame:0000000000005955                 db 0DDh
.eh_frame:0000000000005956                 db 0FFh
.eh_frame:0000000000005957                 db 0FFh
.eh_frame:0000000000005958                 db  0Fh
.eh_frame:0000000000005959                 db    0
.eh_frame:000000000000595A                 db    0
.eh_frame:000000000000595B                 db    0
.eh_frame:000000000000595C                 db    0
.eh_frame:000000000000595D                 db    0
.eh_frame:000000000000595E                 db    0
.eh_frame:000000000000595F                 db    0
.eh_frame:0000000000005960                 db  18h
.eh_frame:0000000000005961                 db    0
.eh_frame:0000000000005962                 db    0
.eh_frame:0000000000005963                 db    0
.eh_frame:0000000000005964                 db 0C4h
.eh_frame:0000000000005965                 db    4
.eh_frame:0000000000005966                 db    0
.eh_frame:0000000000005967                 db    0
.eh_frame:0000000000005968                 db  28h ; (
.eh_frame:0000000000005969                 db 0DDh
.eh_frame:000000000000596A                 db 0FFh
.eh_frame:000000000000596B                 db 0FFh
.eh_frame:000000000000596C                 db  98h
.eh_frame:000000000000596D                 db    0
.eh_frame:000000000000596E                 db    0
.eh_frame:000000000000596F                 db    0
.eh_frame:0000000000005970                 db    0
.eh_frame:0000000000005971                 db  44h ; D
.eh_frame:0000000000005972                 db  0Eh
.eh_frame:0000000000005973                 db  50h ; P
.eh_frame:0000000000005974                 db    2
.eh_frame:0000000000005975                 db  8Eh
.eh_frame:0000000000005976                 db  0Ah
.eh_frame:0000000000005977                 db  0Eh
.eh_frame:0000000000005978                 db    8
.eh_frame:0000000000005979                 db  41h ; A
.eh_frame:000000000000597A                 db  0Bh
.eh_frame:000000000000597B                 db    0
.eh_frame:000000000000597C                 db  10h
.eh_frame:000000000000597D                 db    0
.eh_frame:000000000000597E                 db    0
.eh_frame:000000000000597F                 db    0
.eh_frame:0000000000005980                 db 0E0h
.eh_frame:0000000000005981                 db    4
.eh_frame:0000000000005982                 db    0
.eh_frame:0000000000005983                 db    0
.eh_frame:0000000000005984                 db 0ACh
.eh_frame:0000000000005985                 db 0DDh
.eh_frame:0000000000005986                 db 0FFh
.eh_frame:0000000000005987                 db 0FFh
.eh_frame:0000000000005988                 db  10h
.eh_frame:0000000000005989                 db    0
.eh_frame:000000000000598A                 db    0
.eh_frame:000000000000598B                 db    0
.eh_frame:000000000000598C                 db    0
.eh_frame:000000000000598D                 db    0
.eh_frame:000000000000598E                 db    0
.eh_frame:000000000000598F                 db    0
.eh_frame:0000000000005990                 db  10h
.eh_frame:0000000000005991                 db    0
.eh_frame:0000000000005992                 db    0
.eh_frame:0000000000005993                 db    0
.eh_frame:0000000000005994                 db 0F4h
.eh_frame:0000000000005995                 db    4
.eh_frame:0000000000005996                 db    0
.eh_frame:0000000000005997                 db    0
.eh_frame:0000000000005998                 db 0A8h
.eh_frame:0000000000005999                 db 0DDh
.eh_frame:000000000000599A                 db 0FFh
.eh_frame:000000000000599B                 db 0FFh
.eh_frame:000000000000599C                 db  11h
.eh_frame:000000000000599D                 db    0
.eh_frame:000000000000599E                 db    0
.eh_frame:000000000000599F                 db    0
.eh_frame:00000000000059A0                 db    0
.eh_frame:00000000000059A1                 db    0
.eh_frame:00000000000059A2                 db    0
.eh_frame:00000000000059A3                 db    0
.eh_frame:00000000000059A4                 db  10h
.eh_frame:00000000000059A5                 db    0
.eh_frame:00000000000059A6                 db    0
.eh_frame:00000000000059A7                 db    0
.eh_frame:00000000000059A8                 db    8
.eh_frame:00000000000059A9                 db    5
.eh_frame:00000000000059AA                 db    0
.eh_frame:00000000000059AB                 db    0
.eh_frame:00000000000059AC                 db 0B4h
.eh_frame:00000000000059AD                 db 0DDh
.eh_frame:00000000000059AE                 db 0FFh
.eh_frame:00000000000059AF                 db 0FFh
.eh_frame:00000000000059B0                 db  0Ah
.eh_frame:00000000000059B1                 db    0
.eh_frame:00000000000059B2                 db    0
.eh_frame:00000000000059B3                 db    0
.eh_frame:00000000000059B4                 db    0
.eh_frame:00000000000059B5                 db    0
.eh_frame:00000000000059B6                 db    0
.eh_frame:00000000000059B7                 db    0
.eh_frame:00000000000059B8                 db  18h
.eh_frame:00000000000059B9                 db    0
.eh_frame:00000000000059BA                 db    0
.eh_frame:00000000000059BB                 db    0
.eh_frame:00000000000059BC                 db  1Ch
.eh_frame:00000000000059BD                 db    5
.eh_frame:00000000000059BE                 db    0
.eh_frame:00000000000059BF                 db    0
.eh_frame:00000000000059C0                 db 0B0h
.eh_frame:00000000000059C1                 db 0DDh
.eh_frame:00000000000059C2                 db 0FFh
.eh_frame:00000000000059C3                 db 0FFh
.eh_frame:00000000000059C4                 db  8Eh
.eh_frame:00000000000059C5                 db    0
.eh_frame:00000000000059C6                 db    0
.eh_frame:00000000000059C7                 db    0
.eh_frame:00000000000059C8                 db    0
.eh_frame:00000000000059C9                 db  44h ; D
.eh_frame:00000000000059CA                 db  0Eh
.eh_frame:00000000000059CB                 db  50h ; P
.eh_frame:00000000000059CC                 db    2
.eh_frame:00000000000059CD                 db  7Fh ; 
.eh_frame:00000000000059CE                 db  0Ah
.eh_frame:00000000000059CF                 db  0Eh
.eh_frame:00000000000059D0                 db    8
.eh_frame:00000000000059D1                 db  41h ; A
.eh_frame:00000000000059D2                 db  0Bh
.eh_frame:00000000000059D3                 db    0
.eh_frame:00000000000059D4                 db  18h
.eh_frame:00000000000059D5                 db    0
.eh_frame:00000000000059D6                 db    0
.eh_frame:00000000000059D7                 db    0
.eh_frame:00000000000059D8                 db  38h ; 8
.eh_frame:00000000000059D9                 db    5
.eh_frame:00000000000059DA                 db    0
.eh_frame:00000000000059DB                 db    0
.eh_frame:00000000000059DC                 db  24h ; $
.eh_frame:00000000000059DD                 db 0DEh
.eh_frame:00000000000059DE                 db 0FFh
.eh_frame:00000000000059DF                 db 0FFh
.eh_frame:00000000000059E0                 db  91h
.eh_frame:00000000000059E1                 db    0
.eh_frame:00000000000059E2                 db    0
.eh_frame:00000000000059E3                 db    0
.eh_frame:00000000000059E4                 db    0
.eh_frame:00000000000059E5                 db  44h ; D
.eh_frame:00000000000059E6                 db  0Eh
.eh_frame:00000000000059E7                 db  50h ; P
.eh_frame:00000000000059E8                 db    2
.eh_frame:00000000000059E9                 db  82h
.eh_frame:00000000000059EA                 db  0Ah
.eh_frame:00000000000059EB                 db  0Eh
.eh_frame:00000000000059EC                 db    8
.eh_frame:00000000000059ED                 db  41h ; A
.eh_frame:00000000000059EE                 db  0Bh
.eh_frame:00000000000059EF                 db    0
.eh_frame:00000000000059F0                 db  10h
.eh_frame:00000000000059F1                 db    0
.eh_frame:00000000000059F2                 db    0
.eh_frame:00000000000059F3                 db    0
.eh_frame:00000000000059F4                 db  54h ; T
.eh_frame:00000000000059F5                 db    5
.eh_frame:00000000000059F6                 db    0
.eh_frame:00000000000059F7                 db    0
.eh_frame:00000000000059F8                 db 0A8h
.eh_frame:00000000000059F9                 db 0DEh
.eh_frame:00000000000059FA                 db 0FFh
.eh_frame:00000000000059FB                 db 0FFh
.eh_frame:00000000000059FC                 db  0Ch
.eh_frame:00000000000059FD                 db    0
.eh_frame:00000000000059FE                 db    0
.eh_frame:00000000000059FF                 db    0
.eh_frame:0000000000005A00                 db    0
.eh_frame:0000000000005A01                 db    0
.eh_frame:0000000000005A02                 db    0
.eh_frame:0000000000005A03                 db    0
.eh_frame:0000000000005A04                 db  10h
.eh_frame:0000000000005A05                 db    0
.eh_frame:0000000000005A06                 db    0
.eh_frame:0000000000005A07                 db    0
.eh_frame:0000000000005A08                 db  68h ; h
.eh_frame:0000000000005A09                 db    5
.eh_frame:0000000000005A0A                 db    0
.eh_frame:0000000000005A0B                 db    0
.eh_frame:0000000000005A0C                 db 0A4h
.eh_frame:0000000000005A0D                 db 0DEh
.eh_frame:0000000000005A0E                 db 0FFh
.eh_frame:0000000000005A0F                 db 0FFh
.eh_frame:0000000000005A10                 db  17h
.eh_frame:0000000000005A11                 db    0
.eh_frame:0000000000005A12                 db    0
.eh_frame:0000000000005A13                 db    0
.eh_frame:0000000000005A14                 db    0
.eh_frame:0000000000005A15                 db    0
.eh_frame:0000000000005A16                 db    0
.eh_frame:0000000000005A17                 db    0
.eh_frame:0000000000005A18                 db  10h
.eh_frame:0000000000005A19                 db    0
.eh_frame:0000000000005A1A                 db    0
.eh_frame:0000000000005A1B                 db    0
.eh_frame:0000000000005A1C                 db  7Ch ; |
.eh_frame:0000000000005A1D                 db    5
.eh_frame:0000000000005A1E                 db    0
.eh_frame:0000000000005A1F                 db    0
.eh_frame:0000000000005A20                 db 0B0h
.eh_frame:0000000000005A21                 db 0DEh
.eh_frame:0000000000005A22                 db 0FFh
.eh_frame:0000000000005A23                 db 0FFh
.eh_frame:0000000000005A24                 db  13h
.eh_frame:0000000000005A25                 db    0
.eh_frame:0000000000005A26                 db    0
.eh_frame:0000000000005A27                 db    0
.eh_frame:0000000000005A28                 db    0
.eh_frame:0000000000005A29                 db    0
.eh_frame:0000000000005A2A                 db    0
.eh_frame:0000000000005A2B                 db    0
.eh_frame:0000000000005A2C                 db  10h
.eh_frame:0000000000005A2D                 db    0
.eh_frame:0000000000005A2E                 db    0
.eh_frame:0000000000005A2F                 db    0
.eh_frame:0000000000005A30                 db  90h
.eh_frame:0000000000005A31                 db    5
.eh_frame:0000000000005A32                 db    0
.eh_frame:0000000000005A33                 db    0
.eh_frame:0000000000005A34                 db 0BCh
.eh_frame:0000000000005A35                 db 0DEh
.eh_frame:0000000000005A36                 db 0FFh
.eh_frame:0000000000005A37                 db 0FFh
.eh_frame:0000000000005A38                 db  0Ch
.eh_frame:0000000000005A39                 db    0
.eh_frame:0000000000005A3A                 db    0
.eh_frame:0000000000005A3B                 db    0
.eh_frame:0000000000005A3C                 db    0
.eh_frame:0000000000005A3D                 db    0
.eh_frame:0000000000005A3E                 db    0
.eh_frame:0000000000005A3F                 db    0
.eh_frame:0000000000005A40                 db  10h
.eh_frame:0000000000005A41                 db    0
.eh_frame:0000000000005A42                 db    0
.eh_frame:0000000000005A43                 db    0
.eh_frame:0000000000005A44                 db 0A4h
.eh_frame:0000000000005A45                 db    5
.eh_frame:0000000000005A46                 db    0
.eh_frame:0000000000005A47                 db    0
.eh_frame:0000000000005A48                 db 0B8h
.eh_frame:0000000000005A49                 db 0DEh
.eh_frame:0000000000005A4A                 db 0FFh
.eh_frame:0000000000005A4B                 db 0FFh
.eh_frame:0000000000005A4C                 db  14h
.eh_frame:0000000000005A4D                 db    0
.eh_frame:0000000000005A4E                 db    0
.eh_frame:0000000000005A4F                 db    0
.eh_frame:0000000000005A50                 db    0
.eh_frame:0000000000005A51                 db    0
.eh_frame:0000000000005A52                 db    0
.eh_frame:0000000000005A53                 db    0
.eh_frame:0000000000005A54                 db  10h
.eh_frame:0000000000005A55                 db    0
.eh_frame:0000000000005A56                 db    0
.eh_frame:0000000000005A57                 db    0
.eh_frame:0000000000005A58                 db 0B8h
.eh_frame:0000000000005A59                 db    5
.eh_frame:0000000000005A5A                 db    0
.eh_frame:0000000000005A5B                 db    0
.eh_frame:0000000000005A5C                 db 0C4h
.eh_frame:0000000000005A5D                 db 0DEh
.eh_frame:0000000000005A5E                 db 0FFh
.eh_frame:0000000000005A5F                 db 0FFh
.eh_frame:0000000000005A60                 db  13h
.eh_frame:0000000000005A61                 db    0
.eh_frame:0000000000005A62                 db    0
.eh_frame:0000000000005A63                 db    0
.eh_frame:0000000000005A64                 db    0
.eh_frame:0000000000005A65                 db    0
.eh_frame:0000000000005A66                 db    0
.eh_frame:0000000000005A67                 db    0
.eh_frame:0000000000005A68                 db  14h
.eh_frame:0000000000005A69                 db    0
.eh_frame:0000000000005A6A                 db    0
.eh_frame:0000000000005A6B                 db    0
.eh_frame:0000000000005A6C                 db 0CCh
.eh_frame:0000000000005A6D                 db    5
.eh_frame:0000000000005A6E                 db    0
.eh_frame:0000000000005A6F                 db    0
.eh_frame:0000000000005A70                 db 0D0h
.eh_frame:0000000000005A71                 db 0DEh
.eh_frame:0000000000005A72                 db 0FFh
.eh_frame:0000000000005A73                 db 0FFh
.eh_frame:0000000000005A74                 db  18h
.eh_frame:0000000000005A75                 db    0
.eh_frame:0000000000005A76                 db    0
.eh_frame:0000000000005A77                 db    0
.eh_frame:0000000000005A78                 db    0
.eh_frame:0000000000005A79                 db    0
.eh_frame:0000000000005A7A                 db    0
.eh_frame:0000000000005A7B                 db    0
.eh_frame:0000000000005A7C                 db    0
.eh_frame:0000000000005A7D                 db    0
.eh_frame:0000000000005A7E                 db    0
.eh_frame:0000000000005A7F                 db    0
.eh_frame:0000000000005A80                 db  10h
.eh_frame:0000000000005A81                 db    1
.eh_frame:0000000000005A82                 db    0
.eh_frame:0000000000005A83                 db    0
.eh_frame:0000000000005A84                 db 0E4h
.eh_frame:0000000000005A85                 db    5
.eh_frame:0000000000005A86                 db    0
.eh_frame:0000000000005A87                 db    0
.eh_frame:0000000000005A88                 db 0D8h
.eh_frame:0000000000005A89                 db 0DEh
.eh_frame:0000000000005A8A                 db 0FFh
.eh_frame:0000000000005A8B                 db 0FFh
.eh_frame:0000000000005A8C                 db  17h
.eh_frame:0000000000005A8D                 db    4
.eh_frame:0000000000005A8E                 db    0
.eh_frame:0000000000005A8F                 db    0
.eh_frame:0000000000005A90                 db    0
.eh_frame:0000000000005A91                 db  42h ; B
.eh_frame:0000000000005A92                 db  0Eh
.eh_frame:0000000000005A93                 db  10h
.eh_frame:0000000000005A94                 db  8Fh
.eh_frame:0000000000005A95                 db    2
.eh_frame:0000000000005A96                 db  42h ; B
.eh_frame:0000000000005A97                 db  0Eh
.eh_frame:0000000000005A98                 db  18h
.eh_frame:0000000000005A99                 db  8Eh
.eh_frame:0000000000005A9A                 db    3
.eh_frame:0000000000005A9B                 db  42h ; B
.eh_frame:0000000000005A9C                 db  0Eh
.eh_frame:0000000000005A9D                 db  20h
.eh_frame:0000000000005A9E                 db  8Dh
.eh_frame:0000000000005A9F                 db    4
.eh_frame:0000000000005AA0                 db  42h ; B
.eh_frame:0000000000005AA1                 db  0Eh
.eh_frame:0000000000005AA2                 db  28h ; (
.eh_frame:0000000000005AA3                 db  8Ch
.eh_frame:0000000000005AA4                 db    5
.eh_frame:0000000000005AA5                 db  44h ; D
.eh_frame:0000000000005AA6                 db  0Eh
.eh_frame:0000000000005AA7                 db  30h ; 0
.eh_frame:0000000000005AA8                 db  86h
.eh_frame:0000000000005AA9                 db    6
.eh_frame:0000000000005AAA                 db  41h ; A
.eh_frame:0000000000005AAB                 db  0Eh
.eh_frame:0000000000005AAC                 db  38h ; 8
.eh_frame:0000000000005AAD                 db  83h
.eh_frame:0000000000005AAE                 db    7
.eh_frame:0000000000005AAF                 db  4Ah ; J
.eh_frame:0000000000005AB0                 db  0Eh
.eh_frame:0000000000005AB1                 db  60h ; `
.eh_frame:0000000000005AB2                 db    2
.eh_frame:0000000000005AB3                 db 0DDh
.eh_frame:0000000000005AB4                 db  0Eh
.eh_frame:0000000000005AB5                 db  68h ; h
.eh_frame:0000000000005AB6                 db  57h ; W
.eh_frame:0000000000005AB7                 db  0Eh
.eh_frame:0000000000005AB8                 db  70h ; p
.eh_frame:0000000000005AB9                 db  42h ; B
.eh_frame:0000000000005ABA                 db  0Eh
.eh_frame:0000000000005ABB                 db  78h ; x
.eh_frame:0000000000005ABC                 db  42h ; B
.eh_frame:0000000000005ABD                 db  0Eh
.eh_frame:0000000000005ABE                 db  80h
.eh_frame:0000000000005ABF                 db    1
.eh_frame:0000000000005AC0                 db  42h ; B
.eh_frame:0000000000005AC1                 db  0Eh
.eh_frame:0000000000005AC2                 db  88h
.eh_frame:0000000000005AC3                 db    1
.eh_frame:0000000000005AC4                 db  42h ; B
.eh_frame:0000000000005AC5                 db  0Eh
.eh_frame:0000000000005AC6                 db  90h
.eh_frame:0000000000005AC7                 db    1
.eh_frame:0000000000005AC8                 db  53h ; S
.eh_frame:0000000000005AC9                 db  0Eh
.eh_frame:0000000000005ACA                 db  60h ; `
.eh_frame:0000000000005ACB                 db  44h ; D
.eh_frame:0000000000005ACC                 db  0Ah
.eh_frame:0000000000005ACD                 db  0Eh
.eh_frame:0000000000005ACE                 db  38h ; 8
.eh_frame:0000000000005ACF                 db  41h ; A
.eh_frame:0000000000005AD0                 db  0Eh
.eh_frame:0000000000005AD1                 db  30h ; 0
.eh_frame:0000000000005AD2                 db  41h ; A
.eh_frame:0000000000005AD3                 db  0Eh
.eh_frame:0000000000005AD4                 db  28h ; (
.eh_frame:0000000000005AD5                 db  42h ; B
.eh_frame:0000000000005AD6                 db  0Eh
.eh_frame:0000000000005AD7                 db  20h
.eh_frame:0000000000005AD8                 db  42h ; B
.eh_frame:0000000000005AD9                 db  0Eh
.eh_frame:0000000000005ADA                 db  18h
.eh_frame:0000000000005ADB                 db  42h ; B
.eh_frame:0000000000005ADC                 db  0Eh
.eh_frame:0000000000005ADD                 db  10h
.eh_frame:0000000000005ADE                 db  42h ; B
.eh_frame:0000000000005ADF                 db  0Eh
.eh_frame:0000000000005AE0                 db    8
.eh_frame:0000000000005AE1                 db  44h ; D
.eh_frame:0000000000005AE2                 db  0Bh
.eh_frame:0000000000005AE3                 db    2
.eh_frame:0000000000005AE4                 db  78h ; x
.eh_frame:0000000000005AE5                 db  0Ah
.eh_frame:0000000000005AE6                 db  0Eh
.eh_frame:0000000000005AE7                 db  68h ; h
.eh_frame:0000000000005AE8                 db  48h ; H
.eh_frame:0000000000005AE9                 db  0Bh
.eh_frame:0000000000005AEA                 db  5Ah ; Z
.eh_frame:0000000000005AEB                 db  0Ah
.eh_frame:0000000000005AEC                 db  0Eh
.eh_frame:0000000000005AED                 db  38h ; 8
.eh_frame:0000000000005AEE                 db  47h ; G
.eh_frame:0000000000005AEF                 db  0Eh
.eh_frame:0000000000005AF0                 db  30h ; 0
.eh_frame:0000000000005AF1                 db  41h ; A
.eh_frame:0000000000005AF2                 db  0Eh
.eh_frame:0000000000005AF3                 db  28h ; (
.eh_frame:0000000000005AF4                 db  42h ; B
.eh_frame:0000000000005AF5                 db  0Eh
.eh_frame:0000000000005AF6                 db  20h
.eh_frame:0000000000005AF7                 db  42h ; B
.eh_frame:0000000000005AF8                 db  0Eh
.eh_frame:0000000000005AF9                 db  18h
.eh_frame:0000000000005AFA                 db  42h ; B
.eh_frame:0000000000005AFB                 db  0Eh
.eh_frame:0000000000005AFC                 db  10h
.eh_frame:0000000000005AFD                 db  42h ; B
.eh_frame:0000000000005AFE                 db  0Eh
.eh_frame:0000000000005AFF                 db    8
.eh_frame:0000000000005B00                 db  56h ; V
.eh_frame:0000000000005B01                 db  0Bh
.eh_frame:0000000000005B02                 db  5Eh ; ^
.eh_frame:0000000000005B03                 db  0Ah
.eh_frame:0000000000005B04                 db  0Eh
.eh_frame:0000000000005B05                 db  38h ; 8
.eh_frame:0000000000005B06                 db  52h ; R
.eh_frame:0000000000005B07                 db  0Eh
.eh_frame:0000000000005B08                 db  30h ; 0
.eh_frame:0000000000005B09                 db  41h ; A
.eh_frame:0000000000005B0A                 db  0Eh
.eh_frame:0000000000005B0B                 db  28h ; (
.eh_frame:0000000000005B0C                 db  42h ; B
.eh_frame:0000000000005B0D                 db  0Eh
.eh_frame:0000000000005B0E                 db  20h
.eh_frame:0000000000005B0F                 db  42h ; B
.eh_frame:0000000000005B10                 db  0Eh
.eh_frame:0000000000005B11                 db  18h
.eh_frame:0000000000005B12                 db  42h ; B
.eh_frame:0000000000005B13                 db  0Eh
.eh_frame:0000000000005B14                 db  10h
.eh_frame:0000000000005B15                 db  42h ; B
.eh_frame:0000000000005B16                 db  0Eh
.eh_frame:0000000000005B17                 db    8
.eh_frame:0000000000005B18                 db  4Fh ; O
.eh_frame:0000000000005B19                 db  0Bh
.eh_frame:0000000000005B1A                 db  62h ; b
.eh_frame:0000000000005B1B                 db  0Ah
.eh_frame:0000000000005B1C                 db  0Eh
.eh_frame:0000000000005B1D                 db  38h ; 8
.eh_frame:0000000000005B1E                 db  50h ; P
.eh_frame:0000000000005B1F                 db  0Eh
.eh_frame:0000000000005B20                 db  30h ; 0
.eh_frame:0000000000005B21                 db  41h ; A
.eh_frame:0000000000005B22                 db  0Eh
.eh_frame:0000000000005B23                 db  28h ; (
.eh_frame:0000000000005B24                 db  42h ; B
.eh_frame:0000000000005B25                 db  0Eh
.eh_frame:0000000000005B26                 db  20h
.eh_frame:0000000000005B27                 db  42h ; B
.eh_frame:0000000000005B28                 db  0Eh
.eh_frame:0000000000005B29                 db  18h
.eh_frame:0000000000005B2A                 db  42h ; B
.eh_frame:0000000000005B2B                 db  0Eh
.eh_frame:0000000000005B2C                 db  10h
.eh_frame:0000000000005B2D                 db  42h ; B
.eh_frame:0000000000005B2E                 db  0Eh
.eh_frame:0000000000005B2F                 db    8
.eh_frame:0000000000005B30                 db  55h ; U
.eh_frame:0000000000005B31                 db  0Bh
.eh_frame:0000000000005B32                 db  66h ; f
.eh_frame:0000000000005B33                 db  0Eh
.eh_frame:0000000000005B34                 db  68h ; h
.eh_frame:0000000000005B35                 db  42h ; B
.eh_frame:0000000000005B36                 db  0Eh
.eh_frame:0000000000005B37                 db  70h ; p
.eh_frame:0000000000005B38                 db  5Ch ; \
.eh_frame:0000000000005B39                 db  0Eh
.eh_frame:0000000000005B3A                 db  68h ; h
.eh_frame:0000000000005B3B                 db  41h ; A
.eh_frame:0000000000005B3C                 db  0Eh
.eh_frame:0000000000005B3D                 db  60h ; `
.eh_frame:0000000000005B3E                 db  44h ; D
.eh_frame:0000000000005B3F                 db  0Ah
.eh_frame:0000000000005B40                 db  0Eh
.eh_frame:0000000000005B41                 db  38h ; 8
.eh_frame:0000000000005B42                 db  41h ; A
.eh_frame:0000000000005B43                 db  0Eh
.eh_frame:0000000000005B44                 db  30h ; 0
.eh_frame:0000000000005B45                 db  41h ; A
.eh_frame:0000000000005B46                 db  0Eh
.eh_frame:0000000000005B47                 db  28h ; (
.eh_frame:0000000000005B48                 db  42h ; B
.eh_frame:0000000000005B49                 db  0Eh
.eh_frame:0000000000005B4A                 db  20h
.eh_frame:0000000000005B4B                 db  42h ; B
.eh_frame:0000000000005B4C                 db  0Eh
.eh_frame:0000000000005B4D                 db  18h
.eh_frame:0000000000005B4E                 db  42h ; B
.eh_frame:0000000000005B4F                 db  0Eh
.eh_frame:0000000000005B50                 db  10h
.eh_frame:0000000000005B51                 db  42h ; B
.eh_frame:0000000000005B52                 db  0Eh
.eh_frame:0000000000005B53                 db    8
.eh_frame:0000000000005B54                 db  45h ; E
.eh_frame:0000000000005B55                 db  0Bh
.eh_frame:0000000000005B56                 db  68h ; h
.eh_frame:0000000000005B57                 db  0Ah
.eh_frame:0000000000005B58                 db  0Eh
.eh_frame:0000000000005B59                 db  68h ; h
.eh_frame:0000000000005B5A                 db  48h ; H
.eh_frame:0000000000005B5B                 db  0Bh
.eh_frame:0000000000005B5C                 db  72h ; r
.eh_frame:0000000000005B5D                 db  0Eh
.eh_frame:0000000000005B5E                 db  68h ; h
.eh_frame:0000000000005B5F                 db  45h ; E
.eh_frame:0000000000005B60                 db  0Eh
.eh_frame:0000000000005B61                 db  70h ; p
.eh_frame:0000000000005B62                 db  42h ; B
.eh_frame:0000000000005B63                 db  0Eh
.eh_frame:0000000000005B64                 db  78h ; x
.eh_frame:0000000000005B65                 db  42h ; B
.eh_frame:0000000000005B66                 db  0Eh
.eh_frame:0000000000005B67                 db  80h
.eh_frame:0000000000005B68                 db    1
.eh_frame:0000000000005B69                 db  5Eh ; ^
.eh_frame:0000000000005B6A                 db  0Eh
.eh_frame:0000000000005B6B                 db  60h ; `
.eh_frame:0000000000005B6C                 db  44h ; D
.eh_frame:0000000000005B6D                 db  0Ah
.eh_frame:0000000000005B6E                 db  0Eh
.eh_frame:0000000000005B6F                 db  38h ; 8
.eh_frame:0000000000005B70                 db  41h ; A
.eh_frame:0000000000005B71                 db  0Eh
.eh_frame:0000000000005B72                 db  30h ; 0
.eh_frame:0000000000005B73                 db  41h ; A
.eh_frame:0000000000005B74                 db  0Eh
.eh_frame:0000000000005B75                 db  28h ; (
.eh_frame:0000000000005B76                 db  42h ; B
.eh_frame:0000000000005B77                 db  0Eh
.eh_frame:0000000000005B78                 db  20h
.eh_frame:0000000000005B79                 db  42h ; B
.eh_frame:0000000000005B7A                 db  0Eh
.eh_frame:0000000000005B7B                 db  18h
.eh_frame:0000000000005B7C                 db  42h ; B
.eh_frame:0000000000005B7D                 db  0Eh
.eh_frame:0000000000005B7E                 db  10h
.eh_frame:0000000000005B7F                 db  42h ; B
.eh_frame:0000000000005B80                 db  0Eh
.eh_frame:0000000000005B81                 db    8
.eh_frame:0000000000005B82                 db  41h ; A
.eh_frame:0000000000005B83                 db  0Bh
.eh_frame:0000000000005B84                 db  79h ; y
.eh_frame:0000000000005B85                 db  0Ah
.eh_frame:0000000000005B86                 db  0Eh
.eh_frame:0000000000005B87                 db  68h ; h
.eh_frame:0000000000005B88                 db  42h ; B
.eh_frame:0000000000005B89                 db  0Eh
.eh_frame:0000000000005B8A                 db  70h ; p
.eh_frame:0000000000005B8B                 db  42h ; B
.eh_frame:0000000000005B8C                 db  0Eh
.eh_frame:0000000000005B8D                 db  78h ; x
.eh_frame:0000000000005B8E                 db  42h ; B
.eh_frame:0000000000005B8F                 db  0Eh
.eh_frame:0000000000005B90                 db  80h
.eh_frame:0000000000005B91                 db    1
.eh_frame:0000000000005B92                 db  51h ; Q
.eh_frame:0000000000005B93                 db  0Bh
.eh_frame:0000000000005B94                 db  10h
.eh_frame:0000000000005B95                 db    0
.eh_frame:0000000000005B96                 db    0
.eh_frame:0000000000005B97                 db    0
.eh_frame:0000000000005B98                 db 0F8h
.eh_frame:0000000000005B99                 db    6
.eh_frame:0000000000005B9A                 db    0
.eh_frame:0000000000005B9B                 db    0
.eh_frame:0000000000005B9C                 db 0E4h
.eh_frame:0000000000005B9D                 db 0E1h
.eh_frame:0000000000005B9E                 db 0FFh
.eh_frame:0000000000005B9F                 db 0FFh
.eh_frame:0000000000005BA0                 db  20h
.eh_frame:0000000000005BA1                 db    0
.eh_frame:0000000000005BA2                 db    0
.eh_frame:0000000000005BA3                 db    0
.eh_frame:0000000000005BA4                 db    0
.eh_frame:0000000000005BA5                 db    0
.eh_frame:0000000000005BA6                 db    0
.eh_frame:0000000000005BA7                 db    0
.eh_frame:0000000000005BA8                 db  18h
.eh_frame:0000000000005BA9                 db    0
.eh_frame:0000000000005BAA                 db    0
.eh_frame:0000000000005BAB                 db    0
.eh_frame:0000000000005BAC                 db  0Ch
.eh_frame:0000000000005BAD                 db    7
.eh_frame:0000000000005BAE                 db    0
.eh_frame:0000000000005BAF                 db    0
.eh_frame:0000000000005BB0                 db 0F0h
.eh_frame:0000000000005BB1                 db 0E1h
.eh_frame:0000000000005BB2                 db 0FFh
.eh_frame:0000000000005BB3                 db 0FFh
.eh_frame:0000000000005BB4                 db  78h ; x
.eh_frame:0000000000005BB5                 db    0
.eh_frame:0000000000005BB6                 db    0
.eh_frame:0000000000005BB7                 db    0
.eh_frame:0000000000005BB8                 db    0
.eh_frame:0000000000005BB9                 db  44h ; D
.eh_frame:0000000000005BBA                 db  0Eh
.eh_frame:0000000000005BBB                 db  70h ; p
.eh_frame:0000000000005BBC                 db    2
.eh_frame:0000000000005BBD                 db  60h ; `
.eh_frame:0000000000005BBE                 db  0Ah
.eh_frame:0000000000005BBF                 db  0Eh
.eh_frame:0000000000005BC0                 db    8
.eh_frame:0000000000005BC1                 db  41h ; A
.eh_frame:0000000000005BC2                 db  0Bh
.eh_frame:0000000000005BC3                 db    0
.eh_frame:0000000000005BC4                 db  28h ; (
.eh_frame:0000000000005BC5                 db    0
.eh_frame:0000000000005BC6                 db    0
.eh_frame:0000000000005BC7                 db    0
.eh_frame:0000000000005BC8                 db  28h ; (
.eh_frame:0000000000005BC9                 db    7
.eh_frame:0000000000005BCA                 db    0
.eh_frame:0000000000005BCB                 db    0
.eh_frame:0000000000005BCC                 db  54h ; T
.eh_frame:0000000000005BCD                 db 0E2h
.eh_frame:0000000000005BCE                 db 0FFh
.eh_frame:0000000000005BCF                 db 0FFh
.eh_frame:0000000000005BD0                 db 0D5h
.eh_frame:0000000000005BD1                 db    0
.eh_frame:0000000000005BD2                 db    0
.eh_frame:0000000000005BD3                 db    0
.eh_frame:0000000000005BD4                 db    0
.eh_frame:0000000000005BD5                 db  41h ; A
.eh_frame:0000000000005BD6                 db  0Eh
.eh_frame:0000000000005BD7                 db  10h
.eh_frame:0000000000005BD8                 db  86h
.eh_frame:0000000000005BD9                 db    2
.eh_frame:0000000000005BDA                 db  41h ; A
.eh_frame:0000000000005BDB                 db  0Eh
.eh_frame:0000000000005BDC                 db  18h
.eh_frame:0000000000005BDD                 db  83h
.eh_frame:0000000000005BDE                 db    3
.eh_frame:0000000000005BDF                 db  50h ; P
.eh_frame:0000000000005BE0                 db  0Eh
.eh_frame:0000000000005BE1                 db 0D0h
.eh_frame:0000000000005BE2                 db    1
.eh_frame:0000000000005BE3                 db    2
.eh_frame:0000000000005BE4                 db 0ABh
.eh_frame:0000000000005BE5                 db  0Ah
.eh_frame:0000000000005BE6                 db  0Eh
.eh_frame:0000000000005BE7                 db  18h
.eh_frame:0000000000005BE8                 db  41h ; A
.eh_frame:0000000000005BE9                 db  0Eh
.eh_frame:0000000000005BEA                 db  10h
.eh_frame:0000000000005BEB                 db  41h ; A
.eh_frame:0000000000005BEC                 db  0Eh
.eh_frame:0000000000005BED                 db    8
.eh_frame:0000000000005BEE                 db  41h ; A
.eh_frame:0000000000005BEF                 db  0Bh
.eh_frame:0000000000005BF0                 db  1Ch
.eh_frame:0000000000005BF1                 db    0
.eh_frame:0000000000005BF2                 db    0
.eh_frame:0000000000005BF3                 db    0
.eh_frame:0000000000005BF4                 db  54h ; T
.eh_frame:0000000000005BF5                 db    7
.eh_frame:0000000000005BF6                 db    0
.eh_frame:0000000000005BF7                 db    0
.eh_frame:0000000000005BF8                 db    8
.eh_frame:0000000000005BF9                 db 0E3h
.eh_frame:0000000000005BFA                 db 0FFh
.eh_frame:0000000000005BFB                 db 0FFh
.eh_frame:0000000000005BFC                 db  80h
.eh_frame:0000000000005BFD                 db    0
.eh_frame:0000000000005BFE                 db    0
.eh_frame:0000000000005BFF                 db    0
.eh_frame:0000000000005C00                 db    0
.eh_frame:0000000000005C01                 db  41h ; A
.eh_frame:0000000000005C02                 db  0Eh
.eh_frame:0000000000005C03                 db  10h
.eh_frame:0000000000005C04                 db  83h
.eh_frame:0000000000005C05                 db    2
.eh_frame:0000000000005C06                 db    2
.eh_frame:0000000000005C07                 db  7Ah ; z
.eh_frame:0000000000005C08                 db  0Eh
.eh_frame:0000000000005C09                 db    8
.eh_frame:0000000000005C0A                 db    0
.eh_frame:0000000000005C0B                 db    0
.eh_frame:0000000000005C0C                 db    0
.eh_frame:0000000000005C0D                 db    0
.eh_frame:0000000000005C0E                 db    0
.eh_frame:0000000000005C0F                 db    0
.eh_frame:0000000000005C10                 db  18h
.eh_frame:0000000000005C11                 db    0
.eh_frame:0000000000005C12                 db    0
.eh_frame:0000000000005C13                 db    0
.eh_frame:0000000000005C14                 db  74h ; t
.eh_frame:0000000000005C15                 db    7
.eh_frame:0000000000005C16                 db    0
.eh_frame:0000000000005C17                 db    0
.eh_frame:0000000000005C18                 db  68h ; h
.eh_frame:0000000000005C19                 db 0E3h
.eh_frame:0000000000005C1A                 db 0FFh
.eh_frame:0000000000005C1B                 db 0FFh
.eh_frame:0000000000005C1C                 db  1Ah
.eh_frame:0000000000005C1D                 db    0
.eh_frame:0000000000005C1E                 db    0
.eh_frame:0000000000005C1F                 db    0
.eh_frame:0000000000005C20                 db    0
.eh_frame:0000000000005C21                 db  41h ; A
.eh_frame:0000000000005C22                 db  0Eh
.eh_frame:0000000000005C23                 db  10h
.eh_frame:0000000000005C24                 db  83h
.eh_frame:0000000000005C25                 db    2
.eh_frame:0000000000005C26                 db  53h ; S
.eh_frame:0000000000005C27                 db  0Ah
.eh_frame:0000000000005C28                 db  0Eh
.eh_frame:0000000000005C29                 db    8
.eh_frame:0000000000005C2A                 db  41h ; A
.eh_frame:0000000000005C2B                 db  0Bh
.eh_frame:0000000000005C2C                 db  10h
.eh_frame:0000000000005C2D                 db    0
.eh_frame:0000000000005C2E                 db    0
.eh_frame:0000000000005C2F                 db    0
.eh_frame:0000000000005C30                 db  90h
.eh_frame:0000000000005C31                 db    7
.eh_frame:0000000000005C32                 db    0
.eh_frame:0000000000005C33                 db    0
.eh_frame:0000000000005C34                 db  6Ch ; l
.eh_frame:0000000000005C35                 db 0E3h
.eh_frame:0000000000005C36                 db 0FFh
.eh_frame:0000000000005C37                 db 0FFh
.eh_frame:0000000000005C38                 db  24h ; $
.eh_frame:0000000000005C39                 db    0
.eh_frame:0000000000005C3A                 db    0
.eh_frame:0000000000005C3B                 db    0
.eh_frame:0000000000005C3C                 db    0
.eh_frame:0000000000005C3D                 db  5Fh ; _
.eh_frame:0000000000005C3E                 db  0Eh
.eh_frame:0000000000005C3F                 db  10h
.eh_frame:0000000000005C40                 db  10h
.eh_frame:0000000000005C41                 db    0
.eh_frame:0000000000005C42                 db    0
.eh_frame:0000000000005C43                 db    0
.eh_frame:0000000000005C44                 db 0A4h
.eh_frame:0000000000005C45                 db    7
.eh_frame:0000000000005C46                 db    0
.eh_frame:0000000000005C47                 db    0
.eh_frame:0000000000005C48                 db  88h
.eh_frame:0000000000005C49                 db 0E3h
.eh_frame:0000000000005C4A                 db 0FFh
.eh_frame:0000000000005C4B                 db 0FFh
.eh_frame:0000000000005C4C                 db    2
.eh_frame:0000000000005C4D                 db    0
.eh_frame:0000000000005C4E                 db    0
.eh_frame:0000000000005C4F                 db    0
.eh_frame:0000000000005C50                 db    0
.eh_frame:0000000000005C51                 db    0
.eh_frame:0000000000005C52                 db    0
.eh_frame:0000000000005C53                 db    0
.eh_frame:0000000000005C54                 db  20h
.eh_frame:0000000000005C55                 db    0
.eh_frame:0000000000005C56                 db    0
.eh_frame:0000000000005C57                 db    0
.eh_frame:0000000000005C58                 db 0B8h
.eh_frame:0000000000005C59                 db    7
.eh_frame:0000000000005C5A                 db    0
.eh_frame:0000000000005C5B                 db    0
.eh_frame:0000000000005C5C                 db  84h
.eh_frame:0000000000005C5D                 db 0E3h
.eh_frame:0000000000005C5E                 db 0FFh
.eh_frame:0000000000005C5F                 db 0FFh
.eh_frame:0000000000005C60                 db  36h ; 6
.eh_frame:0000000000005C61                 db    0
.eh_frame:0000000000005C62                 db    0
.eh_frame:0000000000005C63                 db    0
.eh_frame:0000000000005C64                 db    0
.eh_frame:0000000000005C65                 db  44h ; D
.eh_frame:0000000000005C66                 db  0Eh
.eh_frame:0000000000005C67                 db  10h
.eh_frame:0000000000005C68                 db  83h
.eh_frame:0000000000005C69                 db    2
.eh_frame:0000000000005C6A                 db  5Dh ; ]
.eh_frame:0000000000005C6B                 db  0Ah
.eh_frame:0000000000005C6C                 db  0Eh
.eh_frame:0000000000005C6D                 db    8
.eh_frame:0000000000005C6E                 db  47h ; G
.eh_frame:0000000000005C6F                 db  0Bh
.eh_frame:0000000000005C70                 db  48h ; H
.eh_frame:0000000000005C71                 db  0Ah
.eh_frame:0000000000005C72                 db  0Eh
.eh_frame:0000000000005C73                 db    8
.eh_frame:0000000000005C74                 db  41h ; A
.eh_frame:0000000000005C75                 db  0Bh
.eh_frame:0000000000005C76                 db    0
.eh_frame:0000000000005C77                 db    0
.eh_frame:0000000000005C78                 db  10h
.eh_frame:0000000000005C79                 db    0
.eh_frame:0000000000005C7A                 db    0
.eh_frame:0000000000005C7B                 db    0
.eh_frame:0000000000005C7C                 db 0DCh
.eh_frame:0000000000005C7D                 db    7
.eh_frame:0000000000005C7E                 db    0
.eh_frame:0000000000005C7F                 db    0
.eh_frame:0000000000005C80                 db 0A0h
.eh_frame:0000000000005C81                 db 0E3h
.eh_frame:0000000000005C82                 db 0FFh
.eh_frame:0000000000005C83                 db 0FFh
.eh_frame:0000000000005C84                 db  24h ; $
.eh_frame:0000000000005C85                 db    0
.eh_frame:0000000000005C86                 db    0
.eh_frame:0000000000005C87                 db    0
.eh_frame:0000000000005C88                 db    0
.eh_frame:0000000000005C89                 db  5Fh ; _
.eh_frame:0000000000005C8A                 db  0Eh
.eh_frame:0000000000005C8B                 db  10h
.eh_frame:0000000000005C8C                 db  14h
.eh_frame:0000000000005C8D                 db    0
.eh_frame:0000000000005C8E                 db    0
.eh_frame:0000000000005C8F                 db    0
.eh_frame:0000000000005C90                 db 0F0h
.eh_frame:0000000000005C91                 db    7
.eh_frame:0000000000005C92                 db    0
.eh_frame:0000000000005C93                 db    0
.eh_frame:0000000000005C94                 db 0BCh
.eh_frame:0000000000005C95                 db 0E3h
.eh_frame:0000000000005C96                 db 0FFh
.eh_frame:0000000000005C97                 db 0FFh
.eh_frame:0000000000005C98                 db  82h
.eh_frame:0000000000005C99                 db    0
.eh_frame:0000000000005C9A                 db    0
.eh_frame:0000000000005C9B                 db    0
.eh_frame:0000000000005C9C                 db    0
.eh_frame:0000000000005C9D                 db    2
.eh_frame:0000000000005C9E                 db  5Fh ; _
.eh_frame:0000000000005C9F                 db  0Eh
.eh_frame:0000000000005CA0                 db  10h
.eh_frame:0000000000005CA1                 db  49h ; I
.eh_frame:0000000000005CA2                 db  0Eh
.eh_frame:0000000000005CA3                 db    8
.eh_frame:0000000000005CA4                 db  14h
.eh_frame:0000000000005CA5                 db    0
.eh_frame:0000000000005CA6                 db    0
.eh_frame:0000000000005CA7                 db    0
.eh_frame:0000000000005CA8                 db    8
.eh_frame:0000000000005CA9                 db    8
.eh_frame:0000000000005CAA                 db    0
.eh_frame:0000000000005CAB                 db    0
.eh_frame:0000000000005CAC                 db  34h ; 4
.eh_frame:0000000000005CAD                 db 0E4h
.eh_frame:0000000000005CAE                 db 0FFh
.eh_frame:0000000000005CAF                 db 0FFh
.eh_frame:0000000000005CB0                 db  4Ah ; J
.eh_frame:0000000000005CB1                 db    0
.eh_frame:0000000000005CB2                 db    0
.eh_frame:0000000000005CB3                 db    0
.eh_frame:0000000000005CB4                 db    0
.eh_frame:0000000000005CB5                 db    2
.eh_frame:0000000000005CB6                 db  45h ; E
.eh_frame:0000000000005CB7                 db  0Eh
.eh_frame:0000000000005CB8                 db  10h
.eh_frame:0000000000005CB9                 db    0
.eh_frame:0000000000005CBA                 db    0
.eh_frame:0000000000005CBB                 db    0
.eh_frame:0000000000005CBC                 db  18h
.eh_frame:0000000000005CBD                 db    0
.eh_frame:0000000000005CBE                 db    0
.eh_frame:0000000000005CBF                 db    0
.eh_frame:0000000000005CC0                 db  20h
.eh_frame:0000000000005CC1                 db    8
.eh_frame:0000000000005CC2                 db    0
.eh_frame:0000000000005CC3                 db    0
.eh_frame:0000000000005CC4                 db  6Ch ; l
.eh_frame:0000000000005CC5                 db 0E4h
.eh_frame:0000000000005CC6                 db 0FFh
.eh_frame:0000000000005CC7                 db 0FFh
.eh_frame:0000000000005CC8                 db  17h
.eh_frame:0000000000005CC9                 db    0
.eh_frame:0000000000005CCA                 db    0
.eh_frame:0000000000005CCB                 db    0
.eh_frame:0000000000005CCC                 db    0
.eh_frame:0000000000005CCD                 db  41h ; A
.eh_frame:0000000000005CCE                 db  0Eh
.eh_frame:0000000000005CCF                 db  10h
.eh_frame:0000000000005CD0                 db  83h
.eh_frame:0000000000005CD1                 db    2
.eh_frame:0000000000005CD2                 db  51h ; Q
.eh_frame:0000000000005CD3                 db  0Eh
.eh_frame:0000000000005CD4                 db    8
.eh_frame:0000000000005CD5                 db    0
.eh_frame:0000000000005CD6                 db    0
.eh_frame:0000000000005CD7                 db    0
.eh_frame:0000000000005CD8                 db  18h
.eh_frame:0000000000005CD9                 db    0
.eh_frame:0000000000005CDA                 db    0
.eh_frame:0000000000005CDB                 db    0
.eh_frame:0000000000005CDC                 db  3Ch ; <
.eh_frame:0000000000005CDD                 db    8
.eh_frame:0000000000005CDE                 db    0
.eh_frame:0000000000005CDF                 db    0
.eh_frame:0000000000005CE0                 db  70h ; p
.eh_frame:0000000000005CE1                 db 0E4h
.eh_frame:0000000000005CE2                 db 0FFh
.eh_frame:0000000000005CE3                 db 0FFh
.eh_frame:0000000000005CE4                 db  2Eh ; .
.eh_frame:0000000000005CE5                 db    0
.eh_frame:0000000000005CE6                 db    0
.eh_frame:0000000000005CE7                 db    0
.eh_frame:0000000000005CE8                 db    0
.eh_frame:0000000000005CE9                 db  47h ; G
.eh_frame:0000000000005CEA                 db  0Eh
.eh_frame:0000000000005CEB                 db  10h
.eh_frame:0000000000005CEC                 db  61h ; a
.eh_frame:0000000000005CED                 db  0Ah
.eh_frame:0000000000005CEE                 db  0Eh
.eh_frame:0000000000005CEF                 db    8
.eh_frame:0000000000005CF0                 db  41h ; A
.eh_frame:0000000000005CF1                 db  0Bh
.eh_frame:0000000000005CF2                 db    0
.eh_frame:0000000000005CF3                 db    0
.eh_frame:0000000000005CF4                 db  24h ; $
.eh_frame:0000000000005CF5                 db    0
.eh_frame:0000000000005CF6                 db    0
.eh_frame:0000000000005CF7                 db    0
.eh_frame:0000000000005CF8                 db  58h ; X
.eh_frame:0000000000005CF9                 db    8
.eh_frame:0000000000005CFA                 db    0
.eh_frame:0000000000005CFB                 db    0
.eh_frame:0000000000005CFC                 db  84h
.eh_frame:0000000000005CFD                 db 0E4h
.eh_frame:0000000000005CFE                 db 0FFh
.eh_frame:0000000000005CFF                 db 0FFh
.eh_frame:0000000000005D00                 db  28h ; (
.eh_frame:0000000000005D01                 db    0
.eh_frame:0000000000005D02                 db    0
.eh_frame:0000000000005D03                 db    0
.eh_frame:0000000000005D04                 db    0
.eh_frame:0000000000005D05                 db  41h ; A
.eh_frame:0000000000005D06                 db  0Eh
.eh_frame:0000000000005D07                 db  10h
.eh_frame:0000000000005D08                 db  86h
.eh_frame:0000000000005D09                 db    2
.eh_frame:0000000000005D0A                 db  41h ; A
.eh_frame:0000000000005D0B                 db  0Eh
.eh_frame:0000000000005D0C                 db  18h
.eh_frame:0000000000005D0D                 db  83h
.eh_frame:0000000000005D0E                 db    3
.eh_frame:0000000000005D0F                 db  4Dh ; M
.eh_frame:0000000000005D10                 db  0Eh
.eh_frame:0000000000005D11                 db  20h
.eh_frame:0000000000005D12                 db  49h ; I
.eh_frame:0000000000005D13                 db  0Eh
.eh_frame:0000000000005D14                 db  18h
.eh_frame:0000000000005D15                 db  47h ; G
.eh_frame:0000000000005D16                 db  0Eh
.eh_frame:0000000000005D17                 db  10h
.eh_frame:0000000000005D18                 db  41h ; A
.eh_frame:0000000000005D19                 db  0Eh
.eh_frame:0000000000005D1A                 db    8
.eh_frame:0000000000005D1B                 db    0
.eh_frame:0000000000005D1C                 db  18h
.eh_frame:0000000000005D1D                 db    0
.eh_frame:0000000000005D1E                 db    0
.eh_frame:0000000000005D1F                 db    0
.eh_frame:0000000000005D20                 db  80h
.eh_frame:0000000000005D21                 db    8
.eh_frame:0000000000005D22                 db    0
.eh_frame:0000000000005D23                 db    0
.eh_frame:0000000000005D24                 db  8Ch
.eh_frame:0000000000005D25                 db 0E4h
.eh_frame:0000000000005D26                 db 0FFh
.eh_frame:0000000000005D27                 db 0FFh
.eh_frame:0000000000005D28                 db  13h
.eh_frame:0000000000005D29                 db    0
.eh_frame:0000000000005D2A                 db    0
.eh_frame:0000000000005D2B                 db    0
.eh_frame:0000000000005D2C                 db    0
.eh_frame:0000000000005D2D                 db  41h ; A
.eh_frame:0000000000005D2E                 db  0Eh
.eh_frame:0000000000005D2F                 db  10h
.eh_frame:0000000000005D30                 db  83h
.eh_frame:0000000000005D31                 db    2
.eh_frame:0000000000005D32                 db  50h ; P
.eh_frame:0000000000005D33                 db  0Eh
.eh_frame:0000000000005D34                 db    8
.eh_frame:0000000000005D35                 db    0
.eh_frame:0000000000005D36                 db    0
.eh_frame:0000000000005D37                 db    0
.eh_frame:0000000000005D38                 db  14h
.eh_frame:0000000000005D39                 db    0
.eh_frame:0000000000005D3A                 db    0
.eh_frame:0000000000005D3B                 db    0
.eh_frame:0000000000005D3C                 db  9Ch
.eh_frame:0000000000005D3D                 db    8
.eh_frame:0000000000005D3E                 db    0
.eh_frame:0000000000005D3F                 db    0
.eh_frame:0000000000005D40                 db  90h
.eh_frame:0000000000005D41                 db 0E4h
.eh_frame:0000000000005D42                 db 0FFh
.eh_frame:0000000000005D43                 db 0FFh
.eh_frame:0000000000005D44                 db  35h ; 5
.eh_frame:0000000000005D45                 db    0
.eh_frame:0000000000005D46                 db    0
.eh_frame:0000000000005D47                 db    0
.eh_frame:0000000000005D48                 db    0
.eh_frame:0000000000005D49                 db  4Bh ; K
.eh_frame:0000000000005D4A                 db  0Eh
.eh_frame:0000000000005D4B                 db  10h
.eh_frame:0000000000005D4C                 db    0
.eh_frame:0000000000005D4D                 db    0
.eh_frame:0000000000005D4E                 db    0
.eh_frame:0000000000005D4F                 db    0
.eh_frame:0000000000005D50                 db  3Ch ; <
.eh_frame:0000000000005D51                 db    0
.eh_frame:0000000000005D52                 db    0
.eh_frame:0000000000005D53                 db    0
.eh_frame:0000000000005D54                 db 0B4h
.eh_frame:0000000000005D55                 db    8
.eh_frame:0000000000005D56                 db    0
.eh_frame:0000000000005D57                 db    0
.eh_frame:0000000000005D58                 db 0B8h
.eh_frame:0000000000005D59                 db 0E4h
.eh_frame:0000000000005D5A                 db 0FFh
.eh_frame:0000000000005D5B                 db 0FFh
.eh_frame:0000000000005D5C                 db  83h
.eh_frame:0000000000005D5D                 db    0
.eh_frame:0000000000005D5E                 db    0
.eh_frame:0000000000005D5F                 db    0
.eh_frame:0000000000005D60                 db    0
.eh_frame:0000000000005D61                 db  42h ; B
.eh_frame:0000000000005D62                 db  0Eh
.eh_frame:0000000000005D63                 db  10h
.eh_frame:0000000000005D64                 db  8Dh
.eh_frame:0000000000005D65                 db    2
.eh_frame:0000000000005D66                 db  42h ; B
.eh_frame:0000000000005D67                 db  0Eh
.eh_frame:0000000000005D68                 db  18h
.eh_frame:0000000000005D69                 db  8Ch
.eh_frame:0000000000005D6A                 db    3
.eh_frame:0000000000005D6B                 db  44h ; D
.eh_frame:0000000000005D6C                 db  0Eh
.eh_frame:0000000000005D6D                 db  20h
.eh_frame:0000000000005D6E                 db  86h
.eh_frame:0000000000005D6F                 db    4
.eh_frame:0000000000005D70                 db  41h ; A
.eh_frame:0000000000005D71                 db  0Eh
.eh_frame:0000000000005D72                 db  28h ; (
.eh_frame:0000000000005D73                 db  83h
.eh_frame:0000000000005D74                 db    5
.eh_frame:0000000000005D75                 db  4Ah ; J
.eh_frame:0000000000005D76                 db  0Eh
.eh_frame:0000000000005D77                 db  40h ; @
.eh_frame:0000000000005D78                 db    2
.eh_frame:0000000000005D79                 db  64h ; d
.eh_frame:0000000000005D7A                 db  0Ah
.eh_frame:0000000000005D7B                 db  0Eh
.eh_frame:0000000000005D7C                 db  28h ; (
.eh_frame:0000000000005D7D                 db  41h ; A
.eh_frame:0000000000005D7E                 db  0Eh
.eh_frame:0000000000005D7F                 db  20h
.eh_frame:0000000000005D80                 db  41h ; A
.eh_frame:0000000000005D81                 db  0Eh
.eh_frame:0000000000005D82                 db  18h
.eh_frame:0000000000005D83                 db  42h ; B
.eh_frame:0000000000005D84                 db  0Eh
.eh_frame:0000000000005D85                 db  10h
.eh_frame:0000000000005D86                 db  42h ; B
.eh_frame:0000000000005D87                 db  0Eh
.eh_frame:0000000000005D88                 db    8
.eh_frame:0000000000005D89                 db  41h ; A
.eh_frame:0000000000005D8A                 db  0Bh
.eh_frame:0000000000005D8B                 db    0
.eh_frame:0000000000005D8C                 db    0
.eh_frame:0000000000005D8D                 db    0
.eh_frame:0000000000005D8E                 db    0
.eh_frame:0000000000005D8F                 db    0
.eh_frame:0000000000005D90                 db  4Ch ; L
.eh_frame:0000000000005D91                 db    0
.eh_frame:0000000000005D92                 db    0
.eh_frame:0000000000005D93                 db    0
.eh_frame:0000000000005D94                 db 0F4h
.eh_frame:0000000000005D95                 db    8
.eh_frame:0000000000005D96                 db    0
.eh_frame:0000000000005D97                 db    0
.eh_frame:0000000000005D98                 db    8
.eh_frame:0000000000005D99                 db 0E5h
.eh_frame:0000000000005D9A                 db 0FFh
.eh_frame:0000000000005D9B                 db 0FFh
.eh_frame:0000000000005D9C                 db  7Dh ; }
.eh_frame:0000000000005D9D                 db    0
.eh_frame:0000000000005D9E                 db    0
.eh_frame:0000000000005D9F                 db    0
.eh_frame:0000000000005DA0                 db    0
.eh_frame:0000000000005DA1                 db  42h ; B
.eh_frame:0000000000005DA2                 db  0Eh
.eh_frame:0000000000005DA3                 db  10h
.eh_frame:0000000000005DA4                 db  8Ch
.eh_frame:0000000000005DA5                 db    2
.eh_frame:0000000000005DA6                 db  41h ; A
.eh_frame:0000000000005DA7                 db  0Eh
.eh_frame:0000000000005DA8                 db  18h
.eh_frame:0000000000005DA9                 db  86h
.eh_frame:0000000000005DAA                 db    3
.eh_frame:0000000000005DAB                 db  44h ; D
.eh_frame:0000000000005DAC                 db  0Eh
.eh_frame:0000000000005DAD                 db  20h
.eh_frame:0000000000005DAE                 db  83h
.eh_frame:0000000000005DAF                 db    4
.eh_frame:0000000000005DB0                 db  69h ; i
.eh_frame:0000000000005DB1                 db  0Ah
.eh_frame:0000000000005DB2                 db  0Eh
.eh_frame:0000000000005DB3                 db  18h
.eh_frame:0000000000005DB4                 db  41h ; A
.eh_frame:0000000000005DB5                 db  0Eh
.eh_frame:0000000000005DB6                 db  10h
.eh_frame:0000000000005DB7                 db  42h ; B
.eh_frame:0000000000005DB8                 db  0Eh
.eh_frame:0000000000005DB9                 db    8
.eh_frame:0000000000005DBA                 db  45h ; E
.eh_frame:0000000000005DBB                 db  0Bh
.eh_frame:0000000000005DBC                 db  55h ; U
.eh_frame:0000000000005DBD                 db  0Ah
.eh_frame:0000000000005DBE                 db  0Eh
.eh_frame:0000000000005DBF                 db  18h
.eh_frame:0000000000005DC0                 db  41h ; A
.eh_frame:0000000000005DC1                 db  0Eh
.eh_frame:0000000000005DC2                 db  10h
.eh_frame:0000000000005DC3                 db  42h ; B
.eh_frame:0000000000005DC4                 db  0Eh
.eh_frame:0000000000005DC5                 db    8
.eh_frame:0000000000005DC6                 db  48h ; H
.eh_frame:0000000000005DC7                 db  0Bh
.eh_frame:0000000000005DC8                 db  41h ; A
.eh_frame:0000000000005DC9                 db  0Ah
.eh_frame:0000000000005DCA                 db  0Eh
.eh_frame:0000000000005DCB                 db  18h
.eh_frame:0000000000005DCC                 db  46h ; F
.eh_frame:0000000000005DCD                 db  0Eh
.eh_frame:0000000000005DCE                 db  10h
.eh_frame:0000000000005DCF                 db  42h ; B
.eh_frame:0000000000005DD0                 db  0Eh
.eh_frame:0000000000005DD1                 db    8
.eh_frame:0000000000005DD2                 db  47h ; G
.eh_frame:0000000000005DD3                 db  0Bh
.eh_frame:0000000000005DD4                 db  49h ; I
.eh_frame:0000000000005DD5                 db  0Eh
.eh_frame:0000000000005DD6                 db  18h
.eh_frame:0000000000005DD7                 db  41h ; A
.eh_frame:0000000000005DD8                 db  0Eh
.eh_frame:0000000000005DD9                 db  10h
.eh_frame:0000000000005DDA                 db  42h ; B
.eh_frame:0000000000005DDB                 db  0Eh
.eh_frame:0000000000005DDC                 db    8
.eh_frame:0000000000005DDD                 db    0
.eh_frame:0000000000005DDE                 db    0
.eh_frame:0000000000005DDF                 db    0
.eh_frame:0000000000005DE0                 db  1Ch
.eh_frame:0000000000005DE1                 db    0
.eh_frame:0000000000005DE2                 db    0
.eh_frame:0000000000005DE3                 db    0
.eh_frame:0000000000005DE4                 db  44h ; D
.eh_frame:0000000000005DE5                 db    9
.eh_frame:0000000000005DE6                 db    0
.eh_frame:0000000000005DE7                 db    0
.eh_frame:0000000000005DE8                 db  38h ; 8
.eh_frame:0000000000005DE9                 db 0E5h
.eh_frame:0000000000005DEA                 db 0FFh
.eh_frame:0000000000005DEB                 db 0FFh
.eh_frame:0000000000005DEC                 db  60h ; `
.eh_frame:0000000000005DED                 db    0
.eh_frame:0000000000005DEE                 db    0
.eh_frame:0000000000005DEF                 db    0
.eh_frame:0000000000005DF0                 db    0
.eh_frame:0000000000005DF1                 db  44h ; D
.eh_frame:0000000000005DF2                 db  0Eh
.eh_frame:0000000000005DF3                 db  10h
.eh_frame:0000000000005DF4                 db  75h ; u
.eh_frame:0000000000005DF5                 db  0Ah
.eh_frame:0000000000005DF6                 db  0Eh
.eh_frame:0000000000005DF7                 db    8
.eh_frame:0000000000005DF8                 db  47h ; G
.eh_frame:0000000000005DF9                 db  0Bh
.eh_frame:0000000000005DFA                 db  5Fh ; _
.eh_frame:0000000000005DFB                 db  0Eh
.eh_frame:0000000000005DFC                 db    8
.eh_frame:0000000000005DFD                 db    0
.eh_frame:0000000000005DFE                 db    0
.eh_frame:0000000000005DFF                 db    0
.eh_frame:0000000000005E00                 db  1Ch
.eh_frame:0000000000005E01                 db    0
.eh_frame:0000000000005E02                 db    0
.eh_frame:0000000000005E03                 db    0
.eh_frame:0000000000005E04                 db  64h ; d
.eh_frame:0000000000005E05                 db    9
.eh_frame:0000000000005E06                 db    0
.eh_frame:0000000000005E07                 db    0
.eh_frame:0000000000005E08                 db  78h ; x
.eh_frame:0000000000005E09                 db 0E5h
.eh_frame:0000000000005E0A                 db 0FFh
.eh_frame:0000000000005E0B                 db 0FFh
.eh_frame:0000000000005E0C                 db  3Ch ; <
.eh_frame:0000000000005E0D                 db    0
.eh_frame:0000000000005E0E                 db    0
.eh_frame:0000000000005E0F                 db    0
.eh_frame:0000000000005E10                 db    0
.eh_frame:0000000000005E11                 db  44h ; D
.eh_frame:0000000000005E12                 db  0Eh
.eh_frame:0000000000005E13                 db  10h
.eh_frame:0000000000005E14                 db  61h ; a
.eh_frame:0000000000005E15                 db  0Ah
.eh_frame:0000000000005E16                 db  0Eh
.eh_frame:0000000000005E17                 db    8
.eh_frame:0000000000005E18                 db  4Bh ; K
.eh_frame:0000000000005E19                 db  0Bh
.eh_frame:0000000000005E1A                 db  4Bh ; K
.eh_frame:0000000000005E1B                 db  0Eh
.eh_frame:0000000000005E1C                 db    8
.eh_frame:0000000000005E1D                 db    0
.eh_frame:0000000000005E1E                 db    0
.eh_frame:0000000000005E1F                 db    0
.eh_frame:0000000000005E20                 db  34h ; 4
.eh_frame:0000000000005E21                 db    0
.eh_frame:0000000000005E22                 db    0
.eh_frame:0000000000005E23                 db    0
.eh_frame:0000000000005E24                 db  84h
.eh_frame:0000000000005E25                 db    9
.eh_frame:0000000000005E26                 db    0
.eh_frame:0000000000005E27                 db    0
.eh_frame:0000000000005E28                 db  98h
.eh_frame:0000000000005E29                 db 0E5h
.eh_frame:0000000000005E2A                 db 0FFh
.eh_frame:0000000000005E2B                 db 0FFh
.eh_frame:0000000000005E2C                 db  7Bh ; {
.eh_frame:0000000000005E2D                 db    0
.eh_frame:0000000000005E2E                 db    0
.eh_frame:0000000000005E2F                 db    0
.eh_frame:0000000000005E30                 db    0
.eh_frame:0000000000005E31                 db  42h ; B
.eh_frame:0000000000005E32                 db  0Eh
.eh_frame:0000000000005E33                 db  10h
.eh_frame:0000000000005E34                 db  8Ch
.eh_frame:0000000000005E35                 db    2
.eh_frame:0000000000005E36                 db  41h ; A
.eh_frame:0000000000005E37                 db  0Eh
.eh_frame:0000000000005E38                 db  18h
.eh_frame:0000000000005E39                 db  86h
.eh_frame:0000000000005E3A                 db    3
.eh_frame:0000000000005E3B                 db  41h ; A
.eh_frame:0000000000005E3C                 db  0Eh
.eh_frame:0000000000005E3D                 db  20h
.eh_frame:0000000000005E3E                 db  83h
.eh_frame:0000000000005E3F                 db    4
.eh_frame:0000000000005E40                 db  7Dh ; }
.eh_frame:0000000000005E41                 db  0Ah
.eh_frame:0000000000005E42                 db  0Eh
.eh_frame:0000000000005E43                 db  18h
.eh_frame:0000000000005E44                 db  41h ; A
.eh_frame:0000000000005E45                 db  0Eh
.eh_frame:0000000000005E46                 db  10h
.eh_frame:0000000000005E47                 db  42h ; B
.eh_frame:0000000000005E48                 db  0Eh
.eh_frame:0000000000005E49                 db    8
.eh_frame:0000000000005E4A                 db  44h ; D
.eh_frame:0000000000005E4B                 db  0Bh
.eh_frame:0000000000005E4C                 db  60h ; `
.eh_frame:0000000000005E4D                 db  0Ah
.eh_frame:0000000000005E4E                 db  0Eh
.eh_frame:0000000000005E4F                 db  18h
.eh_frame:0000000000005E50                 db  41h ; A
.eh_frame:0000000000005E51                 db  0Eh
.eh_frame:0000000000005E52                 db  10h
.eh_frame:0000000000005E53                 db  42h ; B
.eh_frame:0000000000005E54                 db  0Eh
.eh_frame:0000000000005E55                 db    8
.eh_frame:0000000000005E56                 db  45h ; E
.eh_frame:0000000000005E57                 db  0Bh
.eh_frame:0000000000005E58                 db  1Ch
.eh_frame:0000000000005E59                 db    0
.eh_frame:0000000000005E5A                 db    0
.eh_frame:0000000000005E5B                 db    0
.eh_frame:0000000000005E5C                 db 0BCh
.eh_frame:0000000000005E5D                 db    9
.eh_frame:0000000000005E5E                 db    0
.eh_frame:0000000000005E5F                 db    0
.eh_frame:0000000000005E60                 db 0E0h
.eh_frame:0000000000005E61                 db 0E5h
.eh_frame:0000000000005E62                 db 0FFh
.eh_frame:0000000000005E63                 db 0FFh
.eh_frame:0000000000005E64                 db  40h ; @
.eh_frame:0000000000005E65                 db    0
.eh_frame:0000000000005E66                 db    0
.eh_frame:0000000000005E67                 db    0
.eh_frame:0000000000005E68                 db    0
.eh_frame:0000000000005E69                 db  44h ; D
.eh_frame:0000000000005E6A                 db  0Eh
.eh_frame:0000000000005E6B                 db  10h
.eh_frame:0000000000005E6C                 db  83h
.eh_frame:0000000000005E6D                 db    2
.eh_frame:0000000000005E6E                 db  5Ah ; Z
.eh_frame:0000000000005E6F                 db  0Ah
.eh_frame:0000000000005E70                 db  0Eh
.eh_frame:0000000000005E71                 db    8
.eh_frame:0000000000005E72                 db  4Ah ; J
.eh_frame:0000000000005E73                 db  0Bh
.eh_frame:0000000000005E74                 db  53h ; S
.eh_frame:0000000000005E75                 db  0Eh
.eh_frame:0000000000005E76                 db    8
.eh_frame:0000000000005E77                 db    0
.eh_frame:0000000000005E78                 db  2Ch ; ,
.eh_frame:0000000000005E79                 db    0
.eh_frame:0000000000005E7A                 db    0
.eh_frame:0000000000005E7B                 db    0
.eh_frame:0000000000005E7C                 db 0DCh
.eh_frame:0000000000005E7D                 db    9
.eh_frame:0000000000005E7E                 db    0
.eh_frame:0000000000005E7F                 db    0
.eh_frame:0000000000005E80                 db    0
.eh_frame:0000000000005E81                 db 0E6h
.eh_frame:0000000000005E82                 db 0FFh
.eh_frame:0000000000005E83                 db 0FFh
.eh_frame:0000000000005E84                 db  57h ; W
.eh_frame:0000000000005E85                 db    0
.eh_frame:0000000000005E86                 db    0
.eh_frame:0000000000005E87                 db    0
.eh_frame:0000000000005E88                 db    0
.eh_frame:0000000000005E89                 db  63h ; c
.eh_frame:0000000000005E8A                 db  0Eh
.eh_frame:0000000000005E8B                 db  10h
.eh_frame:0000000000005E8C                 db  8Ch
.eh_frame:0000000000005E8D                 db    2
.eh_frame:0000000000005E8E                 db  41h ; A
.eh_frame:0000000000005E8F                 db  0Eh
.eh_frame:0000000000005E90                 db  18h
.eh_frame:0000000000005E91                 db  86h
.eh_frame:0000000000005E92                 db    3
.eh_frame:0000000000005E93                 db  44h ; D
.eh_frame:0000000000005E94                 db  0Eh
.eh_frame:0000000000005E95                 db  20h
.eh_frame:0000000000005E96                 db  83h
.eh_frame:0000000000005E97                 db    4
.eh_frame:0000000000005E98                 db  6Bh ; k
.eh_frame:0000000000005E99                 db  0Eh
.eh_frame:0000000000005E9A                 db  18h
.eh_frame:0000000000005E9B                 db  41h ; A
.eh_frame:0000000000005E9C                 db  0Eh
.eh_frame:0000000000005E9D                 db  10h
.eh_frame:0000000000005E9E                 db  42h ; B
.eh_frame:0000000000005E9F                 db  0Eh
.eh_frame:0000000000005EA0                 db    8
.eh_frame:0000000000005EA1                 db    0
.eh_frame:0000000000005EA2                 db    0
.eh_frame:0000000000005EA3                 db    0
.eh_frame:0000000000005EA4                 db    0
.eh_frame:0000000000005EA5                 db    0
.eh_frame:0000000000005EA6                 db    0
.eh_frame:0000000000005EA7                 db    0
.eh_frame:0000000000005EA8                 db  44h ; D
.eh_frame:0000000000005EA9                 db    0
.eh_frame:0000000000005EAA                 db    0
.eh_frame:0000000000005EAB                 db    0
.eh_frame:0000000000005EAC                 db  0Ch
.eh_frame:0000000000005EAD                 db  0Ah
.eh_frame:0000000000005EAE                 db    0
.eh_frame:0000000000005EAF                 db    0
.eh_frame:0000000000005EB0                 db  30h ; 0
.eh_frame:0000000000005EB1                 db 0E6h
.eh_frame:0000000000005EB2                 db 0FFh
.eh_frame:0000000000005EB3                 db 0FFh
.eh_frame:0000000000005EB4                 db  65h ; e
.eh_frame:0000000000005EB5                 db    0
.eh_frame:0000000000005EB6                 db    0
.eh_frame:0000000000005EB7                 db    0
.eh_frame:0000000000005EB8                 db    0
.eh_frame:0000000000005EB9                 db  42h ; B
.eh_frame:0000000000005EBA                 db  0Eh
.eh_frame:0000000000005EBB                 db  10h
.eh_frame:0000000000005EBC                 db  8Fh
.eh_frame:0000000000005EBD                 db    2
.eh_frame:0000000000005EBE                 db  42h ; B
.eh_frame:0000000000005EBF                 db  0Eh
.eh_frame:0000000000005EC0                 db  18h
.eh_frame:0000000000005EC1                 db  8Eh
.eh_frame:0000000000005EC2                 db    3
.eh_frame:0000000000005EC3                 db  45h ; E
.eh_frame:0000000000005EC4                 db  0Eh
.eh_frame:0000000000005EC5                 db  20h
.eh_frame:0000000000005EC6                 db  8Dh
.eh_frame:0000000000005EC7                 db    4
.eh_frame:0000000000005EC8                 db  42h ; B
.eh_frame:0000000000005EC9                 db  0Eh
.eh_frame:0000000000005ECA                 db  28h ; (
.eh_frame:0000000000005ECB                 db  8Ch
.eh_frame:0000000000005ECC                 db    5
.eh_frame:0000000000005ECD                 db  48h ; H
.eh_frame:0000000000005ECE                 db  0Eh
.eh_frame:0000000000005ECF                 db  30h ; 0
.eh_frame:0000000000005ED0                 db  86h
.eh_frame:0000000000005ED1                 db    6
.eh_frame:0000000000005ED2                 db  48h ; H
.eh_frame:0000000000005ED3                 db  0Eh
.eh_frame:0000000000005ED4                 db  38h ; 8
.eh_frame:0000000000005ED5                 db  83h
.eh_frame:0000000000005ED6                 db    7
.eh_frame:0000000000005ED7                 db  4Dh ; M
.eh_frame:0000000000005ED8                 db  0Eh
.eh_frame:0000000000005ED9                 db  40h ; @
.eh_frame:0000000000005EDA                 db  72h ; r
.eh_frame:0000000000005EDB                 db  0Eh
.eh_frame:0000000000005EDC                 db  38h ; 8
.eh_frame:0000000000005EDD                 db  41h ; A
.eh_frame:0000000000005EDE                 db  0Eh
.eh_frame:0000000000005EDF                 db  30h ; 0
.eh_frame:0000000000005EE0                 db  41h ; A
.eh_frame:0000000000005EE1                 db  0Eh
.eh_frame:0000000000005EE2                 db  28h ; (
.eh_frame:0000000000005EE3                 db  42h ; B
.eh_frame:0000000000005EE4                 db  0Eh
.eh_frame:0000000000005EE5                 db  20h
.eh_frame:0000000000005EE6                 db  42h ; B
.eh_frame:0000000000005EE7                 db  0Eh
.eh_frame:0000000000005EE8                 db  18h
.eh_frame:0000000000005EE9                 db  42h ; B
.eh_frame:0000000000005EEA                 db  0Eh
.eh_frame:0000000000005EEB                 db  10h
.eh_frame:0000000000005EEC                 db  42h ; B
.eh_frame:0000000000005EED                 db  0Eh
.eh_frame:0000000000005EEE                 db    8
.eh_frame:0000000000005EEF                 db    0
.eh_frame:0000000000005EF0                 db  14h
.eh_frame:0000000000005EF1                 db    0
.eh_frame:0000000000005EF2                 db    0
.eh_frame:0000000000005EF3                 db    0
.eh_frame:0000000000005EF4                 db  54h ; T
.eh_frame:0000000000005EF5                 db  0Ah
.eh_frame:0000000000005EF6                 db    0
.eh_frame:0000000000005EF7                 db    0
.eh_frame:0000000000005EF8                 db  58h ; X
.eh_frame:0000000000005EF9                 db 0E6h
.eh_frame:0000000000005EFA                 db 0FFh
.eh_frame:0000000000005EFB                 db 0FFh
.eh_frame:0000000000005EFC                 db    2
.eh_frame:0000000000005EFD                 db    0
.eh_frame:0000000000005EFE                 db    0
.eh_frame:0000000000005EFF                 db    0
.eh_frame:0000000000005F00                 db    0
.eh_frame:0000000000005F01                 db    0
.eh_frame:0000000000005F02                 db    0
.eh_frame:0000000000005F03                 db    0
.eh_frame:0000000000005F04                 db    0
.eh_frame:0000000000005F05                 db    0
.eh_frame:0000000000005F06                 db    0
.eh_frame:0000000000005F07                 db    0
.eh_frame:0000000000005F08                 db  10h
.eh_frame:0000000000005F09                 db    0
.eh_frame:0000000000005F0A                 db    0
.eh_frame:0000000000005F0B                 db    0
.eh_frame:0000000000005F0C                 db  6Ch ; l
.eh_frame:0000000000005F0D                 db  0Ah
.eh_frame:0000000000005F0E                 db    0
.eh_frame:0000000000005F0F                 db    0
.eh_frame:0000000000005F10                 db  50h ; P
.eh_frame:0000000000005F11                 db 0E6h
.eh_frame:0000000000005F12                 db 0FFh
.eh_frame:0000000000005F13                 db 0FFh
.eh_frame:0000000000005F14                 db  0Eh
.eh_frame:0000000000005F15                 db    0
.eh_frame:0000000000005F16                 db    0
.eh_frame:0000000000005F17                 db    0
.eh_frame:0000000000005F18                 db    0
.eh_frame:0000000000005F19                 db    0
.eh_frame:0000000000005F1A                 db    0
.eh_frame:0000000000005F1B                 db    0
.eh_frame:0000000000005F1C __FRAME_END__   db    0
.eh_frame:0000000000005F1D                 db    0
.eh_frame:0000000000005F1E                 db    0
.eh_frame:0000000000005F1F                 db    0
.eh_frame:0000000000005F1F _eh_frame       ends
.eh_frame:0000000000005F1F
.init_array:0000000000206B90 ; ELF Initialization Function Table
.init_array:0000000000206B90 ; ===========================================================================
.init_array:0000000000206B90
.init_array:0000000000206B90 ; Segment type: Pure data
.init_array:0000000000206B90 ; Segment permissions: Read/Write
.init_array:0000000000206B90 _init_array     segment qword public 'DATA' use64
.init_array:0000000000206B90                 assume cs:_init_array
.init_array:0000000000206B90                 ;org 206B90h
.init_array:0000000000206B90 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:0000000000206B90                                         ; DATA XREF: LOAD:00000000000000F8↑o
.init_array:0000000000206B90                                         ; LOAD:0000000000000210↑o ...
.init_array:0000000000206B90 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:0000000000206B90
.fini_array:0000000000206B98 ; ELF Termination Function Table
.fini_array:0000000000206B98 ; ===========================================================================
.fini_array:0000000000206B98
.fini_array:0000000000206B98 ; Segment type: Pure data
.fini_array:0000000000206B98 ; Segment permissions: Read/Write
.fini_array:0000000000206B98 _fini_array     segment qword public 'DATA' use64
.fini_array:0000000000206B98                 assume cs:_fini_array
.fini_array:0000000000206B98                 ;org 206B98h
.fini_array:0000000000206B98 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:0000000000206B98                                         ; DATA XREF: __libc_csu_init+13↑o
.fini_array:0000000000206B98 _fini_array     ends                    ; Alternative name is '__init_array_end'
.fini_array:0000000000206B98
.data.rel.ro:0000000000206BA0 ; ===========================================================================
.data.rel.ro:0000000000206BA0
.data.rel.ro:0000000000206BA0 ; Segment type: Pure data
.data.rel.ro:0000000000206BA0 ; Segment permissions: Read/Write
.data.rel.ro:0000000000206BA0 _data_rel_ro    segment align_32 public 'DATA' use64
.data.rel.ro:0000000000206BA0                 assume cs:_data_rel_ro
.data.rel.ro:0000000000206BA0                 ;org 206BA0h
.data.rel.ro:0000000000206BA0 ; struct option longopts
.data.rel.ro:0000000000206BA0 longopts        dq offset aNull         ; name
.data.rel.ro:0000000000206BA0                                         ; DATA XREF: main:loc_1534↑o
.data.rel.ro:0000000000206BA0                 dd 0                    ; has_arg ; "null"
.data.rel.ro:0000000000206BA0                 db 4 dup(0)
.data.rel.ro:0000000000206BA0                 dq 0                    ; flag
.data.rel.ro:0000000000206BA0                 dd 30h                  ; val
.data.rel.ro:0000000000206BA0                 db 4 dup(0)
.data.rel.ro:0000000000206BC0                 dq offset aHelp         ; "help"
.data.rel.ro:0000000000206BC8                 db    0
.data.rel.ro:0000000000206BC9                 db    0
.data.rel.ro:0000000000206BCA                 db    0
.data.rel.ro:0000000000206BCB                 db    0
.data.rel.ro:0000000000206BCC                 db    0
.data.rel.ro:0000000000206BCD                 db    0
.data.rel.ro:0000000000206BCE                 db    0
.data.rel.ro:0000000000206BCF                 db    0
.data.rel.ro:0000000000206BD0                 db    0
.data.rel.ro:0000000000206BD1                 db    0
.data.rel.ro:0000000000206BD2                 db    0
.data.rel.ro:0000000000206BD3                 db    0
.data.rel.ro:0000000000206BD4                 db    0
.data.rel.ro:0000000000206BD5                 db    0
.data.rel.ro:0000000000206BD6                 db    0
.data.rel.ro:0000000000206BD7                 db    0
.data.rel.ro:0000000000206BD8                 db  7Eh ; ~
.data.rel.ro:0000000000206BD9                 db 0FFh
.data.rel.ro:0000000000206BDA                 db 0FFh
.data.rel.ro:0000000000206BDB                 db 0FFh
.data.rel.ro:0000000000206BDC                 db    0
.data.rel.ro:0000000000206BDD                 db    0
.data.rel.ro:0000000000206BDE                 db    0
.data.rel.ro:0000000000206BDF                 db    0
.data.rel.ro:0000000000206BE0                 dq offset aVersion      ; "version"
.data.rel.ro:0000000000206BE8                 db    0
.data.rel.ro:0000000000206BE9                 db    0
.data.rel.ro:0000000000206BEA                 db    0
.data.rel.ro:0000000000206BEB                 db    0
.data.rel.ro:0000000000206BEC                 db    0
.data.rel.ro:0000000000206BED                 db    0
.data.rel.ro:0000000000206BEE                 db    0
.data.rel.ro:0000000000206BEF                 db    0
.data.rel.ro:0000000000206BF0                 db    0
.data.rel.ro:0000000000206BF1                 db    0
.data.rel.ro:0000000000206BF2                 db    0
.data.rel.ro:0000000000206BF3                 db    0
.data.rel.ro:0000000000206BF4                 db    0
.data.rel.ro:0000000000206BF5                 db    0
.data.rel.ro:0000000000206BF6                 db    0
.data.rel.ro:0000000000206BF7                 db    0
.data.rel.ro:0000000000206BF8                 db  7Dh ; }
.data.rel.ro:0000000000206BF9                 db 0FFh
.data.rel.ro:0000000000206BFA                 db 0FFh
.data.rel.ro:0000000000206BFB                 db 0FFh
.data.rel.ro:0000000000206BFC                 db    0
.data.rel.ro:0000000000206BFD                 db    0
.data.rel.ro:0000000000206BFE                 db    0
.data.rel.ro:0000000000206BFF                 db    0
.data.rel.ro:0000000000206C00                 db    0
.data.rel.ro:0000000000206C01                 db    0
.data.rel.ro:0000000000206C02                 db    0
.data.rel.ro:0000000000206C03                 db    0
.data.rel.ro:0000000000206C04                 db    0
.data.rel.ro:0000000000206C05                 db    0
.data.rel.ro:0000000000206C06                 db    0
.data.rel.ro:0000000000206C07                 db    0
.data.rel.ro:0000000000206C08                 db    0
.data.rel.ro:0000000000206C09                 db    0
.data.rel.ro:0000000000206C0A                 db    0
.data.rel.ro:0000000000206C0B                 db    0
.data.rel.ro:0000000000206C0C                 db    0
.data.rel.ro:0000000000206C0D                 db    0
.data.rel.ro:0000000000206C0E                 db    0
.data.rel.ro:0000000000206C0F                 db    0
.data.rel.ro:0000000000206C10                 db    0
.data.rel.ro:0000000000206C11                 db    0
.data.rel.ro:0000000000206C12                 db    0
.data.rel.ro:0000000000206C13                 db    0
.data.rel.ro:0000000000206C14                 db    0
.data.rel.ro:0000000000206C15                 db    0
.data.rel.ro:0000000000206C16                 db    0
.data.rel.ro:0000000000206C17                 db    0
.data.rel.ro:0000000000206C18                 db    0
.data.rel.ro:0000000000206C19                 db    0
.data.rel.ro:0000000000206C1A                 db    0
.data.rel.ro:0000000000206C1B                 db    0
.data.rel.ro:0000000000206C1C                 db    0
.data.rel.ro:0000000000206C1D                 db    0
.data.rel.ro:0000000000206C1E                 db    0
.data.rel.ro:0000000000206C1F                 db    0
.data.rel.ro:0000000000206C20                 public quoting_style_args
.data.rel.ro:0000000000206C20 quoting_style_args dq offset aLiteral   ; "literal"
.data.rel.ro:0000000000206C28                 dq offset aShell        ; "shell"
.data.rel.ro:0000000000206C30                 dq offset aShellAlways  ; "shell-always"
.data.rel.ro:0000000000206C38                 dq offset aShellEscape  ; "shell-escape"
.data.rel.ro:0000000000206C40                 dq offset aShellEscapeAlw ; "shell-escape-always"
.data.rel.ro:0000000000206C48                 dq offset aSC+3         ; "c"
.data.rel.ro:0000000000206C50                 dq offset aCMaybe       ; "c-maybe"
.data.rel.ro:0000000000206C58                 dq offset aShellEscape+6 ; "escape"
.data.rel.ro:0000000000206C60                 dq offset dirname+11h   ; "locale"
.data.rel.ro:0000000000206C68                 dq offset aClocale      ; "clocale"
.data.rel.ro:0000000000206C70                 db    0
.data.rel.ro:0000000000206C71                 db    0
.data.rel.ro:0000000000206C72                 db    0
.data.rel.ro:0000000000206C73                 db    0
.data.rel.ro:0000000000206C74                 db    0
.data.rel.ro:0000000000206C75                 db    0
.data.rel.ro:0000000000206C76                 db    0
.data.rel.ro:0000000000206C77                 db    0
.data.rel.ro:0000000000206C77 _data_rel_ro    ends
.data.rel.ro:0000000000206C77
LOAD:0000000000206C78 ; ELF Dynamic Information
LOAD:0000000000206C78 ; ===========================================================================
LOAD:0000000000206C78
LOAD:0000000000206C78 ; Segment type: Pure data
LOAD:0000000000206C78 ; Segment permissions: Read/Write
LOAD:0000000000206C78 LOAD            segment byte public 'DATA' use64
LOAD:0000000000206C78                 assume cs:LOAD
LOAD:0000000000206C78                 ;org 206C78h
LOAD:0000000000206C78 _DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000000130↑o
LOAD:0000000000206C78                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:0000000000206C78                                         ; DT_NEEDED libc.so.6
LOAD:0000000000206C88                 Elf64_Dyn <0Ch, 1218h>  ; DT_INIT
LOAD:0000000000206C98                 Elf64_Dyn <0Dh, 4570h>  ; DT_FINI
LOAD:0000000000206CA8                 Elf64_Dyn <19h, 206B90h> ; DT_INIT_ARRAY
LOAD:0000000000206CB8                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:0000000000206CC8                 Elf64_Dyn <1Ah, 206B98h> ; DT_FINI_ARRAY
LOAD:0000000000206CD8                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:0000000000206CE8                 Elf64_Dyn <6FFFFEF5h, 298h> ; DT_GNU_HASH
LOAD:0000000000206CF8                 Elf64_Dyn <5, 828h>     ; DT_STRTAB
LOAD:0000000000206D08                 Elf64_Dyn <6, 2E8h>     ; DT_SYMTAB
LOAD:0000000000206D18                 Elf64_Dyn <0Ah, 289h>   ; DT_STRSZ
LOAD:0000000000206D28                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:0000000000206D38                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:0000000000206D48                 Elf64_Dyn <3, 206E68h>  ; DT_PLTGOT
LOAD:0000000000206D58                 Elf64_Dyn <2, 3C0h>     ; DT_PLTRELSZ
LOAD:0000000000206D68                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:0000000000206D78                 Elf64_Dyn <17h, 0E58h>  ; DT_JMPREL
LOAD:0000000000206D88                 Elf64_Dyn <7, 0B88h>    ; DT_RELA
LOAD:0000000000206D98                 Elf64_Dyn <8, 2D0h>     ; DT_RELASZ
LOAD:0000000000206DA8                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:0000000000206DB8                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:0000000000206DC8                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:0000000000206DD8                 Elf64_Dyn <6FFFFFFEh, 0B28h> ; DT_VERNEED
LOAD:0000000000206DE8                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:0000000000206DF8                 Elf64_Dyn <6FFFFFF0h, 0AB2h> ; DT_VERSYM
LOAD:0000000000206E08                 Elf64_Dyn <6FFFFFF9h, 13h> ; DT_RELACOUNT
LOAD:0000000000206E18                 Elf64_Dyn <0>           ; DT_NULL
LOAD:0000000000206E28                 db    0
LOAD:0000000000206E29                 db    0
LOAD:0000000000206E2A                 db    0
LOAD:0000000000206E2B                 db    0
LOAD:0000000000206E2C                 db    0
LOAD:0000000000206E2D                 db    0
LOAD:0000000000206E2E                 db    0
LOAD:0000000000206E2F                 db    0
LOAD:0000000000206E30                 db    0
LOAD:0000000000206E31                 db    0
LOAD:0000000000206E32                 db    0
LOAD:0000000000206E33                 db    0
LOAD:0000000000206E34                 db    0
LOAD:0000000000206E35                 db    0
LOAD:0000000000206E36                 db    0
LOAD:0000000000206E37                 db    0
LOAD:0000000000206E38                 db    0
LOAD:0000000000206E39                 db    0
LOAD:0000000000206E3A                 db    0
LOAD:0000000000206E3B                 db    0
LOAD:0000000000206E3C                 db    0
LOAD:0000000000206E3D                 db    0
LOAD:0000000000206E3E                 db    0
LOAD:0000000000206E3F                 db    0
LOAD:0000000000206E40                 db    0
LOAD:0000000000206E41                 db    0
LOAD:0000000000206E42                 db    0
LOAD:0000000000206E43                 db    0
LOAD:0000000000206E44                 db    0
LOAD:0000000000206E45                 db    0
LOAD:0000000000206E46                 db    0
LOAD:0000000000206E47                 db    0
LOAD:0000000000206E48                 db    0
LOAD:0000000000206E49                 db    0
LOAD:0000000000206E4A                 db    0
LOAD:0000000000206E4B                 db    0
LOAD:0000000000206E4C                 db    0
LOAD:0000000000206E4D                 db    0
LOAD:0000000000206E4E                 db    0
LOAD:0000000000206E4F                 db    0
LOAD:0000000000206E50                 db    0
LOAD:0000000000206E51                 db    0
LOAD:0000000000206E52                 db    0
LOAD:0000000000206E53                 db    0
LOAD:0000000000206E54                 db    0
LOAD:0000000000206E55                 db    0
LOAD:0000000000206E56                 db    0
LOAD:0000000000206E57                 db    0
LOAD:0000000000206E58                 db    0
LOAD:0000000000206E59                 db    0
LOAD:0000000000206E5A                 db    0
LOAD:0000000000206E5B                 db    0
LOAD:0000000000206E5C                 db    0
LOAD:0000000000206E5D                 db    0
LOAD:0000000000206E5E                 db    0
LOAD:0000000000206E5F                 db    0
LOAD:0000000000206E60                 db    0
LOAD:0000000000206E61                 db    0
LOAD:0000000000206E62                 db    0
LOAD:0000000000206E63                 db    0
LOAD:0000000000206E64                 db    0
LOAD:0000000000206E65                 db    0
LOAD:0000000000206E66                 db    0
LOAD:0000000000206E67                 db    0
LOAD:0000000000206E67 LOAD            ends
LOAD:0000000000206E67
.got:0000000000206E68 ; ===========================================================================
.got:0000000000206E68
.got:0000000000206E68 ; Segment type: Pure data
.got:0000000000206E68 ; Segment permissions: Read/Write
.got:0000000000206E68 _got            segment qword public 'DATA' use64
.got:0000000000206E68                 assume cs:_got
.got:0000000000206E68                 ;org 206E68h
.got:0000000000206E68 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:0000000000206E70 qword_206E70    dq 0                    ; DATA XREF: sub_1230↑r
.got:0000000000206E78 qword_206E78    dq 0                    ; DATA XREF: sub_1230+6↑r
.got:0000000000206E80 free_ptr        dq offset free          ; DATA XREF: _free↑r
.got:0000000000206E88 abort_ptr       dq offset abort         ; DATA XREF: _abort↑r
.got:0000000000206E90 __errno_location_ptr dq offset __errno_location
.got:0000000000206E90                                         ; DATA XREF: ___errno_location↑r
.got:0000000000206E98 strncmp_ptr     dq offset strncmp       ; DATA XREF: _strncmp↑r
.got:0000000000206EA0 _exit_ptr       dq offset _exit         ; DATA XREF: __exit↑r
.got:0000000000206EA8 __fpending_ptr  dq offset __fpending    ; DATA XREF: ___fpending↑r
.got:0000000000206EB0 textdomain_ptr  dq offset textdomain    ; DATA XREF: _textdomain↑r
.got:0000000000206EB8 fclose_ptr      dq offset fclose        ; DATA XREF: _fclose↑r
.got:0000000000206EC0 bindtextdomain_ptr dq offset bindtextdomain
.got:0000000000206EC0                                         ; DATA XREF: _bindtextdomain↑r
.got:0000000000206EC8 dcgettext_ptr   dq offset dcgettext     ; DATA XREF: _dcgettext↑r
.got:0000000000206ED0 __ctype_get_mb_cur_max_ptr dq offset __ctype_get_mb_cur_max
.got:0000000000206ED0                                         ; DATA XREF: ___ctype_get_mb_cur_max↑r
.got:0000000000206ED8 strlen_ptr      dq offset strlen        ; DATA XREF: _strlen↑r
.got:0000000000206EE0 __stack_chk_fail_ptr dq offset __stack_chk_fail
.got:0000000000206EE0                                         ; DATA XREF: ___stack_chk_fail↑r
.got:0000000000206EE8 getopt_long_ptr dq offset getopt_long   ; DATA XREF: _getopt_long↑r
.got:0000000000206EF0 mbrtowc_ptr     dq offset mbrtowc       ; DATA XREF: _mbrtowc↑r
.got:0000000000206EF8 strchr_ptr      dq offset strchr        ; DATA XREF: _strchr↑r
.got:0000000000206F00 strrchr_ptr     dq offset strrchr       ; DATA XREF: _strrchr↑r
.got:0000000000206F08 lseek_ptr       dq offset lseek         ; DATA XREF: _lseek↑r
.got:0000000000206F10 memset_ptr      dq offset memset        ; DATA XREF: _memset↑r
.got:0000000000206F18 memcmp_ptr      dq offset memcmp        ; DATA XREF: _memcmp↑r
.got:0000000000206F20 fputs_unlocked_ptr dq offset fputs_unlocked
.got:0000000000206F20                                         ; DATA XREF: _fputs_unlocked↑r
.got:0000000000206F28 calloc_ptr      dq offset calloc        ; DATA XREF: _calloc↑r
.got:0000000000206F30 memcpy_ptr      dq offset memcpy        ; DATA XREF: _memcpy↑r
.got:0000000000206F38 fileno_ptr      dq offset fileno        ; DATA XREF: _fileno↑r
.got:0000000000206F40 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc↑r
.got:0000000000206F48 fflush_ptr      dq offset fflush        ; DATA XREF: _fflush↑r
.got:0000000000206F50 nl_langinfo_ptr dq offset nl_langinfo   ; DATA XREF: _nl_langinfo↑r
.got:0000000000206F58 __freading_ptr  dq offset __freading    ; DATA XREF: ___freading↑r
.got:0000000000206F60 realloc_ptr     dq offset realloc       ; DATA XREF: _realloc↑r
.got:0000000000206F68 setlocale_ptr   dq offset setlocale     ; DATA XREF: _setlocale↑r
.got:0000000000206F70 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk↑r
.got:0000000000206F78 error_ptr       dq offset error         ; DATA XREF: _error↑r
.got:0000000000206F80 fseeko_ptr      dq offset fseeko        ; DATA XREF: _fseeko↑r
.got:0000000000206F88 __cxa_atexit_ptr dq offset __cxa_atexit ; DATA XREF: ___cxa_atexit↑r
.got:0000000000206F90 exit_ptr        dq offset exit          ; DATA XREF: _exit↑r
.got:0000000000206F98 fwrite_ptr      dq offset fwrite        ; DATA XREF: _fwrite↑r
.got:0000000000206FA0 __fprintf_chk_ptr dq offset __fprintf_chk
.got:0000000000206FA0                                         ; DATA XREF: ___fprintf_chk↑r
.got:0000000000206FA8 mbsinit_ptr     dq offset mbsinit       ; DATA XREF: _mbsinit↑r
.got:0000000000206FB0 iswprint_ptr    dq offset iswprint      ; DATA XREF: _iswprint↑r
.got:0000000000206FB8 __ctype_b_loc_ptr dq offset __ctype_b_loc
.got:0000000000206FB8                                         ; DATA XREF: ___ctype_b_loc↑r
.got:0000000000206FC0 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:0000000000206FC0                                         ; DATA XREF: deregister_tm_clones+17↑r
.got:0000000000206FC8 __libc_start_main_ptr dq offset __libc_start_main
.got:0000000000206FC8                                         ; DATA XREF: start+24↑r
.got:0000000000206FD0 __gmon_start___ptr dq offset __gmon_start__
.got:0000000000206FD0                                         ; DATA XREF: _init_proc+4↑r
.got:0000000000206FD8 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:0000000000206FD8                                         ; DATA XREF: register_tm_clones+28↑r
.got:0000000000206FE0 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:0000000000206FE0                                         ; DATA XREF: __cxa_finalize↑r
.got:0000000000206FE0                                         ; __do_global_dtors_aux+9↑r
.got:0000000000206FE0 _got            ends
.got:0000000000206FE0
LOAD:0000000000206FE8 ; ===========================================================================
LOAD:0000000000206FE8
LOAD:0000000000206FE8 ; Segment type: Pure data
LOAD:0000000000206FE8 ; Segment permissions: Read/Write
LOAD:0000000000206FE8 LOAD            segment byte public 'DATA' use64
LOAD:0000000000206FE8                 assume cs:LOAD
LOAD:0000000000206FE8                 ;org 206FE8h
LOAD:0000000000206FE8                 align 20h
LOAD:0000000000206FE8 LOAD            ends
LOAD:0000000000206FE8
.data:0000000000207000 ; ===========================================================================
.data:0000000000207000
.data:0000000000207000 ; Segment type: Pure data
.data:0000000000207000 ; Segment permissions: Read/Write
.data:0000000000207000 _data           segment align_32 public 'DATA' use64
.data:0000000000207000                 assume cs:_data
.data:0000000000207000                 ;org 207000h
.data:0000000000207000                 public __data_start ; weak
.data:0000000000207000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:0000000000207000                                         ; data_start
.data:0000000000207001                 db    0
.data:0000000000207002                 db    0
.data:0000000000207003                 db    0
.data:0000000000207004                 db    0
.data:0000000000207005                 db    0
.data:0000000000207006                 db    0
.data:0000000000207007                 db    0
.data:0000000000207008                 public __dso_handle
.data:0000000000207008 ; void *_dso_handle
.data:0000000000207008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+17↑r
.data:0000000000207008                                         ; atexit↑r ...
.data:0000000000207010                 public Version
.data:0000000000207010 Version         dq offset a831          ; DATA XREF: main+BB↑r
.data:0000000000207010                                         ; "8.31"
.data:0000000000207018                 public exit_failure
.data:0000000000207018 ; int exit_failure
.data:0000000000207018 exit_failure    dd 1                    ; DATA XREF: main+55↑w
.data:0000000000207018                                         ; close_stdout:loc_1C02↑r ...
.data:000000000020701C                 align 20h
.data:0000000000207020                 public quote_quoting_options
.data:0000000000207020 quote_quoting_options db    8           ; DATA XREF: quote_n_mem↑o
.data:0000000000207020                                         ; quote_mem↑o ...
.data:0000000000207021                 db    0
.data:0000000000207022                 db    0
.data:0000000000207023                 db    0
.data:0000000000207024                 db    0
.data:0000000000207025                 db    0
.data:0000000000207026                 db    0
.data:0000000000207027                 db    0
.data:0000000000207028                 db    0
.data:0000000000207029                 db    0
.data:000000000020702A                 db    0
.data:000000000020702B                 db    0
.data:000000000020702C                 db    0
.data:000000000020702D                 db    0
.data:000000000020702E                 db    0
.data:000000000020702F                 db    0
.data:0000000000207030                 db    0
.data:0000000000207031                 db    0
.data:0000000000207032                 db    0
.data:0000000000207033                 db    0
.data:0000000000207034                 db    0
.data:0000000000207035                 db    0
.data:0000000000207036                 db    0
.data:0000000000207037                 db    0
.data:0000000000207038                 db    0
.data:0000000000207039                 db    0
.data:000000000020703A                 db    0
.data:000000000020703B                 db    0
.data:000000000020703C                 db    0
.data:000000000020703D                 db    0
.data:000000000020703E                 db    0
.data:000000000020703F                 db    0
.data:0000000000207040                 db    0
.data:0000000000207041                 db    0
.data:0000000000207042                 db    0
.data:0000000000207043                 db    0
.data:0000000000207044                 db    0
.data:0000000000207045                 db    0
.data:0000000000207046                 db    0
.data:0000000000207047                 db    0
.data:0000000000207048                 db    0
.data:0000000000207049                 db    0
.data:000000000020704A                 db    0
.data:000000000020704B                 db    0
.data:000000000020704C                 db    0
.data:000000000020704D                 db    0
.data:000000000020704E                 db    0
.data:000000000020704F                 db    0
.data:0000000000207050                 db    0
.data:0000000000207051                 db    0
.data:0000000000207052                 db    0
.data:0000000000207053                 db    0
.data:0000000000207054                 db    0
.data:0000000000207055                 db    0
.data:0000000000207056                 db    0
.data:0000000000207057                 db    0
.data:0000000000207058 nslots          dd 1                    ; DATA XREF: quotearg_n_options+3A↑r
.data:0000000000207058                                         ; quotearg_n_options:loc_307D↑r ...
.data:000000000020705C                 align 20h
.data:0000000000207060 ; void *slotvec
.data:0000000000207060 slotvec         dq offset slotvec0      ; DATA XREF: quotearg_n_options+29↑r
.data:0000000000207060                                         ; quotearg_n_options+76↑w ...
.data:0000000000207068                 align 10h
.data:0000000000207070 slotvec0        dq offset qword_100     ; DATA XREF: quotearg_n_options+54↑o
.data:0000000000207070                                         ; quotearg_n_options+187↑r ...
.data:0000000000207078 off_207078      dq offset slot0         ; DATA XREF: quotearg_free+62↑w
.data:0000000000207078 _data           ends
.data:0000000000207078
.bss:0000000000207080 ; ===========================================================================
.bss:0000000000207080
.bss:0000000000207080 ; Segment type: Uninitialized
.bss:0000000000207080 ; Segment permissions: Read/Write
.bss:0000000000207080 _bss            segment align_32 public 'BSS' use64
.bss:0000000000207080                 assume cs:_bss
.bss:0000000000207080                 ;org 207080h
.bss:0000000000207080                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:0000000000207080                 public __bss_start ; weak
.bss:0000000000207080 __bss_start     dq ?                    ; DATA XREF: LOAD:0000000000000780↑o
.bss:0000000000207080                                         ; LOAD:00000000000007E0↑o ...
.bss:0000000000207080                                         ; Alternative name is '__TMC_END__'
.bss:0000000000207080                                         ; program_invocation_short_name@@GLIBC_2.2.5
.bss:0000000000207080                                         ; _edata
.bss:0000000000207080                                         ; Copy of shared data
.bss:0000000000207088                 public stdout@@GLIBC_2_2_5
.bss:0000000000207088 ; FILE *stdout
.bss:0000000000207088 stdout@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000738↑o
.bss:0000000000207088                                         ; main+B4↑r ...
.bss:0000000000207088                                         ; Alternative name is 'stdout'
.bss:0000000000207088                                         ; Copy of shared data
.bss:0000000000207090                 public optind@@GLIBC_2_2_5
.bss:0000000000207090 optind@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:0000000000000810↑o
.bss:0000000000207090                                         ; main:loc_15BE↑r ...
.bss:0000000000207090                                         ; Alternative name is 'optind'
.bss:0000000000207090                                         ; Copy of shared data
.bss:0000000000207094                 align 8
.bss:0000000000207098                 public environ@@GLIBC_2_2_5 ; weak
.bss:0000000000207098 environ@@GLIBC_2_2_5 dq ?               ; DATA XREF: LOAD:0000000000000750↑o
.bss:0000000000207098                                         ; LOAD:0000000000000768↑o ...
.bss:0000000000207098                                         ; Alternative name is '__environ@@GLIBC_2.2.5'
.bss:0000000000207098                                         ; Copy of shared data
.bss:00000000002070A0                 public program_invocation_name@@GLIBC_2_2_5 ; weak
.bss:00000000002070A0 program_invocation_name@@GLIBC_2_2_5 dq ?
.bss:00000000002070A0                                         ; DATA XREF: LOAD:0000000000000798↑o
.bss:00000000002070A0                                         ; LOAD:00000000000007B0↑o ...
.bss:00000000002070A0                                         ; Alternative name is '__progname_full@@GLIBC_2.2.5'
.bss:00000000002070A0                                         ; Copy of shared data
.bss:00000000002070A8                 align 20h
.bss:00000000002070C0                 public stderr@@GLIBC_2_2_5
.bss:00000000002070C0 ; FILE *stderr
.bss:00000000002070C0 stderr@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:00000000000007F8↑o
.bss:00000000002070C0                                         ; usage+3D↑r ...
.bss:00000000002070C0                                         ; Alternative name is 'stderr'
.bss:00000000002070C0                                         ; Copy of shared data
.bss:00000000002070C8 completed_7697  db ?                    ; DATA XREF: __do_global_dtors_aux↑r
.bss:00000000002070C8                                         ; __do_global_dtors_aux+28↑w
.bss:00000000002070C9                 align 10h
.bss:00000000002070D0 ignore_EPIPE    db ?                    ; DATA XREF: close_stdout_set_ignore_EPIPE↑w
.bss:00000000002070D0                                         ; close_stdout+1B↑r
.bss:00000000002070D1                 align 8
.bss:00000000002070D8 file_name       dq ?                    ; DATA XREF: close_stdout_set_file_name↑w
.bss:00000000002070D8                                         ; close_stdout+56↑r
.bss:00000000002070E0                 public program_name
.bss:00000000002070E0 program_name    dq ?                    ; DATA XREF: usage+14↑r
.bss:00000000002070E0                                         ; set_program_name:loc_1C9D↑w
.bss:00000000002070E8                 align 20h
.bss:0000000000207100 slot0           db    ? ;               ; DATA XREF: quotearg_n_options+FE↑o
.bss:0000000000207100                                         ; quotearg_free+46↑o ...
.bss:0000000000207101                 db    ? ;
.bss:0000000000207102                 db    ? ;
.bss:0000000000207103                 db    ? ;
.bss:0000000000207104                 db    ? ;
.bss:0000000000207105                 db    ? ;
.bss:0000000000207106                 db    ? ;
.bss:0000000000207107                 db    ? ;
.bss:0000000000207108                 db    ? ;
.bss:0000000000207109                 db    ? ;
.bss:000000000020710A                 db    ? ;
.bss:000000000020710B                 db    ? ;
.bss:000000000020710C                 db    ? ;
.bss:000000000020710D                 db    ? ;
.bss:000000000020710E                 db    ? ;
.bss:000000000020710F                 db    ? ;
.bss:0000000000207110                 db    ? ;
.bss:0000000000207111                 db    ? ;
.bss:0000000000207112                 db    ? ;
.bss:0000000000207113                 db    ? ;
.bss:0000000000207114                 db    ? ;
.bss:0000000000207115                 db    ? ;
.bss:0000000000207116                 db    ? ;
.bss:0000000000207117                 db    ? ;
.bss:0000000000207118                 db    ? ;
.bss:0000000000207119                 db    ? ;
.bss:000000000020711A                 db    ? ;
.bss:000000000020711B                 db    ? ;
.bss:000000000020711C                 db    ? ;
.bss:000000000020711D                 db    ? ;
.bss:000000000020711E                 db    ? ;
.bss:000000000020711F                 db    ? ;
.bss:0000000000207120                 db    ? ;
.bss:0000000000207121                 db    ? ;
.bss:0000000000207122                 db    ? ;
.bss:0000000000207123                 db    ? ;
.bss:0000000000207124                 db    ? ;
.bss:0000000000207125                 db    ? ;
.bss:0000000000207126                 db    ? ;
.bss:0000000000207127                 db    ? ;
.bss:0000000000207128                 db    ? ;
.bss:0000000000207129                 db    ? ;
.bss:000000000020712A                 db    ? ;
.bss:000000000020712B                 db    ? ;
.bss:000000000020712C                 db    ? ;
.bss:000000000020712D                 db    ? ;
.bss:000000000020712E                 db    ? ;
.bss:000000000020712F                 db    ? ;
.bss:0000000000207130                 db    ? ;
.bss:0000000000207131                 db    ? ;
.bss:0000000000207132                 db    ? ;
.bss:0000000000207133                 db    ? ;
.bss:0000000000207134                 db    ? ;
.bss:0000000000207135                 db    ? ;
.bss:0000000000207136                 db    ? ;
.bss:0000000000207137                 db    ? ;
.bss:0000000000207138                 db    ? ;
.bss:0000000000207139                 db    ? ;
.bss:000000000020713A                 db    ? ;
.bss:000000000020713B                 db    ? ;
.bss:000000000020713C                 db    ? ;
.bss:000000000020713D                 db    ? ;
.bss:000000000020713E                 db    ? ;
.bss:000000000020713F                 db    ? ;
.bss:0000000000207140                 db    ? ;
.bss:0000000000207141                 db    ? ;
.bss:0000000000207142                 db    ? ;
.bss:0000000000207143                 db    ? ;
.bss:0000000000207144                 db    ? ;
.bss:0000000000207145                 db    ? ;
.bss:0000000000207146                 db    ? ;
.bss:0000000000207147                 db    ? ;
.bss:0000000000207148                 db    ? ;
.bss:0000000000207149                 db    ? ;
.bss:000000000020714A                 db    ? ;
.bss:000000000020714B                 db    ? ;
.bss:000000000020714C                 db    ? ;
.bss:000000000020714D                 db    ? ;
.bss:000000000020714E                 db    ? ;
.bss:000000000020714F                 db    ? ;
.bss:0000000000207150                 db    ? ;
.bss:0000000000207151                 db    ? ;
.bss:0000000000207152                 db    ? ;
.bss:0000000000207153                 db    ? ;
.bss:0000000000207154                 db    ? ;
.bss:0000000000207155                 db    ? ;
.bss:0000000000207156                 db    ? ;
.bss:0000000000207157                 db    ? ;
.bss:0000000000207158                 db    ? ;
.bss:0000000000207159                 db    ? ;
.bss:000000000020715A                 db    ? ;
.bss:000000000020715B                 db    ? ;
.bss:000000000020715C                 db    ? ;
.bss:000000000020715D                 db    ? ;
.bss:000000000020715E                 db    ? ;
.bss:000000000020715F                 db    ? ;
.bss:0000000000207160                 db    ? ;
.bss:0000000000207161                 db    ? ;
.bss:0000000000207162                 db    ? ;
.bss:0000000000207163                 db    ? ;
.bss:0000000000207164                 db    ? ;
.bss:0000000000207165                 db    ? ;
.bss:0000000000207166                 db    ? ;
.bss:0000000000207167                 db    ? ;
.bss:0000000000207168                 db    ? ;
.bss:0000000000207169                 db    ? ;
.bss:000000000020716A                 db    ? ;
.bss:000000000020716B                 db    ? ;
.bss:000000000020716C                 db    ? ;
.bss:000000000020716D                 db    ? ;
.bss:000000000020716E                 db    ? ;
.bss:000000000020716F                 db    ? ;
.bss:0000000000207170                 db    ? ;
.bss:0000000000207171                 db    ? ;
.bss:0000000000207172                 db    ? ;
.bss:0000000000207173                 db    ? ;
.bss:0000000000207174                 db    ? ;
.bss:0000000000207175                 db    ? ;
.bss:0000000000207176                 db    ? ;
.bss:0000000000207177                 db    ? ;
.bss:0000000000207178                 db    ? ;
.bss:0000000000207179                 db    ? ;
.bss:000000000020717A                 db    ? ;
.bss:000000000020717B                 db    ? ;
.bss:000000000020717C                 db    ? ;
.bss:000000000020717D                 db    ? ;
.bss:000000000020717E                 db    ? ;
.bss:000000000020717F                 db    ? ;
.bss:0000000000207180                 db    ? ;
.bss:0000000000207181                 db    ? ;
.bss:0000000000207182                 db    ? ;
.bss:0000000000207183                 db    ? ;
.bss:0000000000207184                 db    ? ;
.bss:0000000000207185                 db    ? ;
.bss:0000000000207186                 db    ? ;
.bss:0000000000207187                 db    ? ;
.bss:0000000000207188                 db    ? ;
.bss:0000000000207189                 db    ? ;
.bss:000000000020718A                 db    ? ;
.bss:000000000020718B                 db    ? ;
.bss:000000000020718C                 db    ? ;
.bss:000000000020718D                 db    ? ;
.bss:000000000020718E                 db    ? ;
.bss:000000000020718F                 db    ? ;
.bss:0000000000207190                 db    ? ;
.bss:0000000000207191                 db    ? ;
.bss:0000000000207192                 db    ? ;
.bss:0000000000207193                 db    ? ;
.bss:0000000000207194                 db    ? ;
.bss:0000000000207195                 db    ? ;
.bss:0000000000207196                 db    ? ;
.bss:0000000000207197                 db    ? ;
.bss:0000000000207198                 db    ? ;
.bss:0000000000207199                 db    ? ;
.bss:000000000020719A                 db    ? ;
.bss:000000000020719B                 db    ? ;
.bss:000000000020719C                 db    ? ;
.bss:000000000020719D                 db    ? ;
.bss:000000000020719E                 db    ? ;
.bss:000000000020719F                 db    ? ;
.bss:00000000002071A0                 db    ? ;
.bss:00000000002071A1                 db    ? ;
.bss:00000000002071A2                 db    ? ;
.bss:00000000002071A3                 db    ? ;
.bss:00000000002071A4                 db    ? ;
.bss:00000000002071A5                 db    ? ;
.bss:00000000002071A6                 db    ? ;
.bss:00000000002071A7                 db    ? ;
.bss:00000000002071A8                 db    ? ;
.bss:00000000002071A9                 db    ? ;
.bss:00000000002071AA                 db    ? ;
.bss:00000000002071AB                 db    ? ;
.bss:00000000002071AC                 db    ? ;
.bss:00000000002071AD                 db    ? ;
.bss:00000000002071AE                 db    ? ;
.bss:00000000002071AF                 db    ? ;
.bss:00000000002071B0                 db    ? ;
.bss:00000000002071B1                 db    ? ;
.bss:00000000002071B2                 db    ? ;
.bss:00000000002071B3                 db    ? ;
.bss:00000000002071B4                 db    ? ;
.bss:00000000002071B5                 db    ? ;
.bss:00000000002071B6                 db    ? ;
.bss:00000000002071B7                 db    ? ;
.bss:00000000002071B8                 db    ? ;
.bss:00000000002071B9                 db    ? ;
.bss:00000000002071BA                 db    ? ;
.bss:00000000002071BB                 db    ? ;
.bss:00000000002071BC                 db    ? ;
.bss:00000000002071BD                 db    ? ;
.bss:00000000002071BE                 db    ? ;
.bss:00000000002071BF                 db    ? ;
.bss:00000000002071C0                 db    ? ;
.bss:00000000002071C1                 db    ? ;
.bss:00000000002071C2                 db    ? ;
.bss:00000000002071C3                 db    ? ;
.bss:00000000002071C4                 db    ? ;
.bss:00000000002071C5                 db    ? ;
.bss:00000000002071C6                 db    ? ;
.bss:00000000002071C7                 db    ? ;
.bss:00000000002071C8                 db    ? ;
.bss:00000000002071C9                 db    ? ;
.bss:00000000002071CA                 db    ? ;
.bss:00000000002071CB                 db    ? ;
.bss:00000000002071CC                 db    ? ;
.bss:00000000002071CD                 db    ? ;
.bss:00000000002071CE                 db    ? ;
.bss:00000000002071CF                 db    ? ;
.bss:00000000002071D0                 db    ? ;
.bss:00000000002071D1                 db    ? ;
.bss:00000000002071D2                 db    ? ;
.bss:00000000002071D3                 db    ? ;
.bss:00000000002071D4                 db    ? ;
.bss:00000000002071D5                 db    ? ;
.bss:00000000002071D6                 db    ? ;
.bss:00000000002071D7                 db    ? ;
.bss:00000000002071D8                 db    ? ;
.bss:00000000002071D9                 db    ? ;
.bss:00000000002071DA                 db    ? ;
.bss:00000000002071DB                 db    ? ;
.bss:00000000002071DC                 db    ? ;
.bss:00000000002071DD                 db    ? ;
.bss:00000000002071DE                 db    ? ;
.bss:00000000002071DF                 db    ? ;
.bss:00000000002071E0                 db    ? ;
.bss:00000000002071E1                 db    ? ;
.bss:00000000002071E2                 db    ? ;
.bss:00000000002071E3                 db    ? ;
.bss:00000000002071E4                 db    ? ;
.bss:00000000002071E5                 db    ? ;
.bss:00000000002071E6                 db    ? ;
.bss:00000000002071E7                 db    ? ;
.bss:00000000002071E8                 db    ? ;
.bss:00000000002071E9                 db    ? ;
.bss:00000000002071EA                 db    ? ;
.bss:00000000002071EB                 db    ? ;
.bss:00000000002071EC                 db    ? ;
.bss:00000000002071ED                 db    ? ;
.bss:00000000002071EE                 db    ? ;
.bss:00000000002071EF                 db    ? ;
.bss:00000000002071F0                 db    ? ;
.bss:00000000002071F1                 db    ? ;
.bss:00000000002071F2                 db    ? ;
.bss:00000000002071F3                 db    ? ;
.bss:00000000002071F4                 db    ? ;
.bss:00000000002071F5                 db    ? ;
.bss:00000000002071F6                 db    ? ;
.bss:00000000002071F7                 db    ? ;
.bss:00000000002071F8                 db    ? ;
.bss:00000000002071F9                 db    ? ;
.bss:00000000002071FA                 db    ? ;
.bss:00000000002071FB                 db    ? ;
.bss:00000000002071FC                 db    ? ;
.bss:00000000002071FD                 db    ? ;
.bss:00000000002071FE                 db    ? ;
.bss:00000000002071FF                 db    ? ;
.bss:0000000000207200 default_quoting_options xmmword ?       ; DATA XREF: clone_quoting_options+12↑o
.bss:0000000000207200                                         ; get_quoting_style↑o ...
.bss:0000000000207210 xmmword_207210  xmmword ?               ; DATA XREF: quotearg_char_mem+41↑r
.bss:0000000000207210                                         ; quotearg_n_custom_mem+39↑r
.bss:0000000000207220 xmmword_207220  xmmword ?               ; DATA XREF: quotearg_char_mem+4E↑r
.bss:0000000000207220                                         ; quotearg_n_custom_mem+46↑r
.bss:0000000000207230 qword_207230    dq ?                    ; DATA XREF: quotearg_char_mem+16↑r
.bss:0000000000207230                                         ; quotearg_n_custom_mem+7↑r
.bss:0000000000207230 _bss            ends
.bss:0000000000207230
.prgend:0000000000207238 ; ===========================================================================
.prgend:0000000000207238
.prgend:0000000000207238 ; Segment type: Zero-length
.prgend:0000000000207238 _prgend         segment byte public '' use64
.prgend:0000000000207238 _end            label byte
.prgend:0000000000207238 _prgend         ends
.prgend:0000000000207238
extern:0000000000207240 ; ===========================================================================
extern:0000000000207240
extern:0000000000207240 ; Segment type: Externs
extern:0000000000207240 ; extern
extern:0000000000207240 ; void free(void *ptr)
extern:0000000000207240                 extrn free:near         ; CODE XREF: _free↑j
extern:0000000000207240                                         ; DATA XREF: .got:free_ptr↑o
extern:0000000000207248 ; void __noreturn abort(void)
extern:0000000000207248                 extrn abort:near        ; CODE XREF: _abort↑j
extern:0000000000207248                                         ; DATA XREF: .got:abort_ptr↑o
extern:0000000000207250 ; int *_errno_location(void)
extern:0000000000207250                 extrn __errno_location:near
extern:0000000000207250                                         ; CODE XREF: ___errno_location↑j
extern:0000000000207250                                         ; DATA XREF: .got:__errno_location_ptr↑o
extern:0000000000207258 ; int strncmp(const char *s1, const char *s2, size_t n)
extern:0000000000207258                 extrn strncmp:near      ; CODE XREF: _strncmp↑j
extern:0000000000207258                                         ; DATA XREF: .got:strncmp_ptr↑o
extern:0000000000207260 ; void __noreturn exit(int status)
extern:0000000000207260                 extrn _exit:near        ; CODE XREF: __exit↑j
extern:0000000000207260                                         ; DATA XREF: .got:_exit_ptr↑o
extern:0000000000207268 ; size_t _fpending(FILE *fp)
extern:0000000000207268                 extrn __fpending:near   ; CODE XREF: ___fpending↑j
extern:0000000000207268                                         ; DATA XREF: .got:__fpending_ptr↑o
extern:0000000000207270 ; char *textdomain(const char *domainname)
extern:0000000000207270                 extrn textdomain:near   ; CODE XREF: _textdomain↑j
extern:0000000000207270                                         ; DATA XREF: .got:textdomain_ptr↑o
extern:0000000000207278 ; int fclose(FILE *stream)
extern:0000000000207278                 extrn fclose:near       ; CODE XREF: _fclose↑j
extern:0000000000207278                                         ; DATA XREF: .got:fclose_ptr↑o
extern:0000000000207280 ; char *bindtextdomain(const char *domainname, const char *dirname)
extern:0000000000207280                 extrn bindtextdomain:near
extern:0000000000207280                                         ; CODE XREF: _bindtextdomain↑j
extern:0000000000207280                                         ; DATA XREF: .got:bindtextdomain_ptr↑o
extern:0000000000207288 ; char *dcgettext(const char *domainname, const char *msgid, int category)
extern:0000000000207288                 extrn dcgettext:near    ; CODE XREF: _dcgettext↑j
extern:0000000000207288                                         ; DATA XREF: .got:dcgettext_ptr↑o
extern:0000000000207290 ; size_t _ctype_get_mb_cur_max(void)
extern:0000000000207290                 extrn __ctype_get_mb_cur_max:near
extern:0000000000207290                                         ; CODE XREF: ___ctype_get_mb_cur_max↑j
extern:0000000000207290                                         ; DATA XREF: .got:__ctype_get_mb_cur_max_ptr↑o
extern:0000000000207298 ; size_t strlen(const char *s)
extern:0000000000207298                 extrn strlen:near       ; CODE XREF: _strlen↑j
extern:0000000000207298                                         ; DATA XREF: .got:strlen_ptr↑o
extern:00000000002072A0                 extrn __stack_chk_fail:near
extern:00000000002072A0                                         ; CODE XREF: ___stack_chk_fail↑j
extern:00000000002072A0                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:00000000002072A8 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
extern:00000000002072A8                 extrn getopt_long:near  ; CODE XREF: _getopt_long↑j
extern:00000000002072A8                                         ; DATA XREF: .got:getopt_long_ptr↑o
extern:00000000002072B0 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
extern:00000000002072B0                 extrn mbrtowc:near      ; CODE XREF: _mbrtowc↑j
extern:00000000002072B0                                         ; DATA XREF: .got:mbrtowc_ptr↑o
extern:00000000002072B8 ; char *strchr(const char *s, int c)
extern:00000000002072B8                 extrn strchr:near       ; CODE XREF: _strchr↑j
extern:00000000002072B8                                         ; DATA XREF: .got:strchr_ptr↑o
extern:00000000002072C0 ; char *strrchr(const char *s, int c)
extern:00000000002072C0                 extrn strrchr:near      ; CODE XREF: _strrchr↑j
extern:00000000002072C0                                         ; DATA XREF: .got:strrchr_ptr↑o
extern:00000000002072C8 ; __off_t lseek(int fd, __off_t offset, int whence)
extern:00000000002072C8                 extrn lseek:near        ; CODE XREF: _lseek↑j
extern:00000000002072C8                                         ; DATA XREF: .got:lseek_ptr↑o
extern:00000000002072D0 ; void *memset(void *s, int c, size_t n)
extern:00000000002072D0                 extrn memset:near       ; CODE XREF: _memset↑j
extern:00000000002072D0                                         ; DATA XREF: .got:memset_ptr↑o
extern:00000000002072D8 ; int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:00000000002072D8                 extrn __libc_start_main:near
extern:00000000002072D8                                         ; CODE XREF: start+24↑p
extern:00000000002072D8                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:00000000002072E0 ; int memcmp(const void *s1, const void *s2, size_t n)
extern:00000000002072E0                 extrn memcmp:near       ; CODE XREF: _memcmp↑j
extern:00000000002072E0                                         ; DATA XREF: .got:memcmp_ptr↑o
extern:00000000002072E8 ; int fputs_unlocked(const char *s, FILE *stream)
extern:00000000002072E8                 extrn fputs_unlocked:near
extern:00000000002072E8                                         ; CODE XREF: _fputs_unlocked↑j
extern:00000000002072E8                                         ; DATA XREF: .got:fputs_unlocked_ptr↑o
extern:00000000002072F0 ; void *calloc(size_t nmemb, size_t size)
extern:00000000002072F0                 extrn calloc:near       ; CODE XREF: _calloc↑j
extern:00000000002072F0                                         ; DATA XREF: .got:calloc_ptr↑o
extern:00000000002072F8 ; void *memcpy(void *dest, const void *src, size_t n)
extern:00000000002072F8                 extrn memcpy:near       ; CODE XREF: _memcpy↑j
extern:00000000002072F8                                         ; DATA XREF: .got:memcpy_ptr↑o
extern:0000000000207300 ; int fileno(FILE *stream)
extern:0000000000207300                 extrn fileno:near       ; CODE XREF: _fileno↑j
extern:0000000000207300                                         ; DATA XREF: .got:fileno_ptr↑o
extern:0000000000207308 ; void *malloc(size_t size)
extern:0000000000207308                 extrn malloc:near       ; CODE XREF: _malloc↑j
extern:0000000000207308                                         ; DATA XREF: .got:malloc_ptr↑o
extern:0000000000207310 ; int fflush(FILE *stream)
extern:0000000000207310                 extrn fflush:near       ; CODE XREF: _fflush↑j
extern:0000000000207310                                         ; DATA XREF: .got:fflush_ptr↑o
extern:0000000000207318 ; char *nl_langinfo(nl_item item)
extern:0000000000207318                 extrn nl_langinfo:near  ; CODE XREF: _nl_langinfo↑j
extern:0000000000207318                                         ; DATA XREF: .got:nl_langinfo_ptr↑o
extern:0000000000207320 ; int _freading(FILE *fp)
extern:0000000000207320                 extrn __freading:near   ; CODE XREF: ___freading↑j
extern:0000000000207320                                         ; DATA XREF: .got:__freading_ptr↑o
extern:0000000000207328 ; void *realloc(void *ptr, size_t size)
extern:0000000000207328                 extrn realloc:near      ; CODE XREF: _realloc↑j
extern:0000000000207328                                         ; DATA XREF: .got:realloc_ptr↑o
extern:0000000000207330 ; char *setlocale(int category, const char *locale)
extern:0000000000207330                 extrn setlocale:near    ; CODE XREF: _setlocale↑j
extern:0000000000207330                                         ; DATA XREF: .got:setlocale_ptr↑o
extern:0000000000207338                 extrn __printf_chk:near ; CODE XREF: ___printf_chk↑j
extern:0000000000207338                                         ; DATA XREF: .got:__printf_chk_ptr↑o
extern:0000000000207340 ; void error(int status, int errnum, const char *format, ...)
extern:0000000000207340                 extrn error:near        ; CODE XREF: _error↑j
extern:0000000000207340                                         ; DATA XREF: .got:error_ptr↑o
extern:0000000000207348 ; int fseeko(FILE *stream, __off_t off, int whence)
extern:0000000000207348                 extrn fseeko:near       ; CODE XREF: _fseeko↑j
extern:0000000000207348                                         ; DATA XREF: .got:fseeko_ptr↑o
extern:0000000000207350 ; int __fastcall _cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
extern:0000000000207350                 extrn __cxa_atexit:near ; CODE XREF: ___cxa_atexit↑j
extern:0000000000207350                                         ; DATA XREF: .got:__cxa_atexit_ptr↑o
extern:0000000000207358 ; void __noreturn exit(int status)
extern:0000000000207358                 extrn exit:near         ; CODE XREF: _exit↑j
extern:0000000000207358                                         ; DATA XREF: .got:exit_ptr↑o
extern:0000000000207360 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
extern:0000000000207360                 extrn fwrite:near       ; CODE XREF: _fwrite↑j
extern:0000000000207360                                         ; DATA XREF: .got:fwrite_ptr↑o
extern:0000000000207368                 extrn __fprintf_chk:near
extern:0000000000207368                                         ; CODE XREF: ___fprintf_chk↑j
extern:0000000000207368                                         ; DATA XREF: .got:__fprintf_chk_ptr↑o
extern:0000000000207370 ; int mbsinit(const mbstate_t *ps)
extern:0000000000207370                 extrn mbsinit:near      ; CODE XREF: _mbsinit↑j
extern:0000000000207370                                         ; DATA XREF: .got:mbsinit_ptr↑o
extern:0000000000207378 ; int iswprint(wint_t wc)
extern:0000000000207378                 extrn iswprint:near     ; CODE XREF: _iswprint↑j
extern:0000000000207378                                         ; DATA XREF: .got:iswprint_ptr↑o
extern:0000000000207380 ; int __fastcall __cxa_finalize(void *)
extern:0000000000207380                 extrn __imp___cxa_finalize:near ; weak
extern:0000000000207380                                         ; CODE XREF: __cxa_finalize↑j
extern:0000000000207380                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:0000000000207388 ; const unsigned __int16 **_ctype_b_loc(void)
extern:0000000000207388                 extrn __ctype_b_loc:near
extern:0000000000207388                                         ; CODE XREF: ___ctype_b_loc↑j
extern:0000000000207388                                         ; DATA XREF: .got:__ctype_b_loc_ptr↑o
extern:0000000000207390                 extrn _ITM_deregisterTMCloneTable ; weak
extern:0000000000207390                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:0000000000207398                 extrn __gmon_start__:near ; weak
extern:0000000000207398                                         ; CODE XREF: _init_proc+10↑p
extern:0000000000207398                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:00000000002073A0                 extrn _ITM_registerTMCloneTable ; weak
extern:00000000002073A0                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:00000000002073A0
extern:00000000002073A0
extern:00000000002073A0                 end start
